uint64_t NLStringTokenizerGetCurrentTokenRange(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 88);
  if (v1)
    return *(_QWORD *)(a1 + 24) + *v1;
  else
    return -1;
}

uint64_t _NLStringTokenizerGetSubTokensOfCompound(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[8];
  _QWORD v12[3];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  if (!a5)
    return 0;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = 0;
  v7 = a2 - a1[3];
  if (v7 >= 0 && v7 + a3 <= a1[4])
  {
    v12[0] = a2 - a1[3];
    v12[1] = a3;
    v12[2] = a4;
    v9 = a1[6];
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = ___NLStringTokenizerGetSubTokensOfCompound_block_invoke;
    v11[3] = &unk_1E2DF44A8;
    v11[4] = &v13;
    v11[5] = a6;
    v11[6] = a7;
    v11[7] = a5;
    NLTokenizerEnumerateSubTokensOfToken(v9, (uint64_t)v12, (uint64_t)v11);
    v8 = v14[3];
  }
  else
  {
    v8 = 0;
  }
  _Block_object_dispose(&v13, 8);
  return v8;
}

void sub_191C5E814(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

unint64_t CoreNLP::EnglishCompoundWord::enumerateSubTokensOfTokenWithCharacterType(unint64_t result, CFRange a2, uint64_t a3)
{
  CFIndex location;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  a2.length = *(_QWORD *)(a2.location + 8);
  if (!a2.length)
    return result;
  location = a2.location;
  v24 = 0;
  a2.location = *(_QWORD *)a2.location;
  result = CoreNLP::StringBuffer::getSubStringCharsOfRange(*(CoreNLP::StringBuffer **)(result + 8), a2);
  if (!result || *(uint64_t *)(location + 8) < 1)
    return result;
  v5 = result;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  do
  {
    result = *(unsigned __int16 *)(v5 + 2 * v7);
    if (result > 0xFF)
    {
      result = u_hasBinaryProperty(result, UCHAR_BIDI_CONTROL);
      if ((_DWORD)result)
      {
        v10 = 32;
      }
      else
      {
        result = u_charType(*(unsigned __int16 *)(v5 + 2 * v7));
        if (((1 << result) & 0x3FF97000) != 0)
          v10 = 2;
        else
          v10 = 4;
      }
    }
    else
    {
    }
    if ((_DWORD)v10 == (_DWORD)v9)
    {
      if ((v9 & 8) != 0)
        v8 = v7;
      v11 = v26 + 1;
      v10 = v9;
    }
    else
    {
      if ((_DWORD)v10 == 32 || (_DWORD)v10 == 2)
      {
        if (v6)
        {
          if (v26 < 1)
          {
LABEL_23:
            result = (*(uint64_t (**)(uint64_t, uint64_t *, char *))(a3 + 16))(a3, &v25, &v24);
          }
          else
          {
            v12 = 0;
            v13 = v5 + 2 * v25;
            while (1)
            {
              result = u_hasBinaryProperty(*(unsigned __int16 *)(v13 + 2 * v12), UCHAR_BIDI_CONTROL);
              if ((_DWORD)result)
                break;
              if (++v12 >= v26)
                goto LABEL_23;
            }
          }
          if (v24)
            return result;
        }
        ++v6;
        v27 = 32;
LABEL_26:
        v25 = v7;
        v11 = 1;
        goto LABEL_36;
      }
      if ((v10 & 0x18) != 0)
      {
        if (v6)
        {
          if (v26 < 1)
          {
LABEL_33:
            result = (*(uint64_t (**)(uint64_t, uint64_t *, char *))(a3 + 16))(a3, &v25, &v24);
          }
          else
          {
            v14 = 0;
            v15 = v5 + 2 * v25;
            while (1)
            {
              result = u_hasBinaryProperty(*(unsigned __int16 *)(v15 + 2 * v14), UCHAR_BIDI_CONTROL);
              if ((_DWORD)result)
                break;
              if (++v14 >= v26)
                goto LABEL_33;
            }
          }
          if (v24)
            return result;
        }
        ++v6;
        v27 = (v10 >> 1) & 8;
        v25 = v7;
        v11 = 1;
        v8 = v7;
      }
      else
      {
        if ((v9 & 8) == 0)
        {
          if (v6)
          {
            if (v26 < 1)
            {
LABEL_44:
              result = (*(uint64_t (**)(uint64_t, uint64_t *, char *))(a3 + 16))(a3, &v25, &v24);
            }
            else
            {
              v16 = 0;
              v17 = v5 + 2 * v25;
              while (1)
              {
                result = u_hasBinaryProperty(*(unsigned __int16 *)(v17 + 2 * v16), UCHAR_BIDI_CONTROL);
                if ((_DWORD)result)
                  break;
                if (++v16 >= v26)
                  goto LABEL_44;
              }
            }
            if (v24)
              return result;
          }
          ++v6;
          v27 = 0;
          goto LABEL_26;
        }
        if (v8 == v25)
        {
          v11 = v26 + 1;
        }
        else
        {
          v18 = v7 - v8;
          v19 = v26 - (v7 - v8);
          v26 = v19;
          if (v6)
          {
            if (v19 < 1)
            {
LABEL_54:
              result = (*(uint64_t (**)(uint64_t, uint64_t *, char *))(a3 + 16))(a3, &v25, &v24);
            }
            else
            {
              v20 = 0;
              v21 = v5 + 2 * v25;
              while (1)
              {
                result = u_hasBinaryProperty(*(unsigned __int16 *)(v21 + 2 * v20), UCHAR_BIDI_CONTROL);
                if ((_DWORD)result)
                  break;
                if (++v20 >= v26)
                  goto LABEL_54;
              }
            }
            v18 = v7 - v8;
            if (v24)
              return result;
          }
          ++v6;
          v27 = 0;
          v25 = v8;
          v11 = v18 + 1;
        }
      }
    }
LABEL_36:
    v26 = v11;
    ++v7;
    v9 = v10;
  }
  while (v7 < *(_QWORD *)(location + 8));
  if (v6)
  {
    if (v11 < 1)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t *, char *))(a3 + 16))(a3, &v25, &v24);
    }
    else
    {
      v22 = 0;
      v23 = v5 + 2 * v25;
      while (1)
      {
        result = u_hasBinaryProperty(*(unsigned __int16 *)(v23 + 2 * v22), UCHAR_BIDI_CONTROL);
        if ((_DWORD)result)
          break;
        if (++v22 >= v26)
          return (*(uint64_t (**)(uint64_t, uint64_t *, char *))(a3 + 16))(a3, &v25, &v24);
      }
    }
  }
  return result;
}

unint64_t CoreNLP::DefaultSubWordTagger::enumerateSubTokensOfToken(uint64_t a1, CFRange a2, uint64_t a3)
{
  return CoreNLP::EnglishCompoundWord::enumerateSubTokensOfToken(*(_QWORD *)(a1 + 48), a2, (**(_QWORD **)(a1 + 8) >> 19) & 1, a3);
}

unint64_t CoreNLP::EnglishCompoundWord::enumerateSubTokensOfToken(unint64_t a1, CFRange a2, int a3, uint64_t a4)
{
  CFIndex location;
  unint64_t result;

  location = a2.location;
  if (!a3
    || (result = CoreNLP::EnglishCompoundWord::enumerateSubTokensOfTokenFromTrie(a1, (CFIndex *)a2.location, a2.length, a4), (result & 1) == 0))
  {
    a2.location = location;
    return CoreNLP::EnglishCompoundWord::enumerateSubTokensOfTokenWithCharacterType(a1, a2, a4);
  }
  return result;
}

uint64_t CoreNLP::EnglishCompoundWord::enumerateSubTokensOfTokenFromTrie(uint64_t a1, CFIndex *a2, uint64_t a3, uint64_t a4)
{
  CFRange v7;
  unsigned __int8 *SubStringCharsOfRange;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  CFIndex v20;
  uint64_t v21;
  CFIndex v22;
  uint64_t v23;
  char v24;
  int v25;

    return 0;
  v7.length = a2[1];
    return 0;
  v7.location = *a2;
  SubStringCharsOfRange = (unsigned __int8 *)CoreNLP::StringBuffer::getSubStringCharsOfRange(*(CoreNLP::StringBuffer **)(a1 + 8), v7);
    return 0;
  v9 = 2 * a2[1];
  if (v9)
  {
    v11 = 1;
    while (1)
    {
      v12 = *SubStringCharsOfRange++;
      v13 = *(_DWORD *)(v10 + 8 * v11) + v12 + 1;
      if (*(_DWORD *)(v10 + 8 * v13 + 4) != v11)
        return 0;
      v11 = v13;
      if (!--v9)
        goto LABEL_12;
    }
  }
  v13 = 1;
LABEL_12:
  v14 = *(unsigned int *)(v10 + 8 * v13);
  if (*(_DWORD *)(v10 + 8 * v14 + 4) != v13)
    return 0;
  v15 = *(_DWORD *)(v10 + 8 * v14);
  if ((v15 & 0x80000000) == 0)
    return 0;
  v17 = 0;
  v25 = -v15;
  v24 = 0;
  v18 = (unsigned __int8 *)&v25 + 1;
  v19 = -(uint64_t)-(char)v15;
  do
  {
    v21 = v17;
    if (v19)
      v20 = *v18;
    else
      v20 = a2[1] - v17;
    v22 = v20;
    v23 = 0;
    (*(void (**)(uint64_t, uint64_t *, char *))(a4 + 16))(a4, &v21, &v24);
    if (v24)
      break;
    v17 += v22;
    ++v18;
    ++v19;
  }
  while (v19 != 1);
  return 1;
}

uint64_t CoreNLP::StringBuffer::getSubStringCharsOfRange(CoreNLP::StringBuffer *this, CFRange a2)
{
  CFIndex location;
  uint64_t v3;
  CoreNLP::UStringPiece *v4;
  uint64_t v6;
  uint64_t v7;

  location = a2.location;
  v3 = *((_QWORD *)this + 1);
  v4 = (CoreNLP::UStringPiece *)*((_QWORD *)this + 3);
  if (!v4)
  {
    v4 = (CoreNLP::UStringPiece *)operator new();
    CoreNLP::UStringPiece::UStringPiece(v4, *(const __CFString **)this, *(CFRange *)((char *)this + 8));
    v6 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v4;
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v4 = (CoreNLP::UStringPiece *)*((_QWORD *)this + 3);
    }
  }
  v7 = *((_QWORD *)v4 + 1);
  if (v7)
    return v7 + 2 * (location - v3);
  else
    return 0;
}

void sub_191C5EE8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10D1C40A2689608);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::SentenceTagger::setString(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, int a5)
{
  CoreNLP::Tagger::setString((_QWORD *)a1, a2, a3, a4, a5);
  return (*(uint64_t (**)(_QWORD, const __CFString *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), a2, a3, a4);
}

CoreNLP::SentenceTagger *CoreNLP::SentenceTagger::createSentenceTagger(const __CFLocale **this, CoreNLP::TaggerContext *a2)
{
  CoreNLP::SentenceTagger *v3;

  v3 = (CoreNLP::SentenceTagger *)operator new();
  CoreNLP::SentenceTagger::SentenceTagger(v3, this);
  return v3;
}

void sub_191C5EF40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10A1C40D6BA5B14);
  _Unwind_Resume(a1);
}

CoreNLP::SentenceTagger *CoreNLP::SentenceTagger::SentenceTagger(CoreNLP::SentenceTagger *this, const __CFLocale **a2)
{
  _QWORD *v4;

  v4 = CoreNLP::Tagger::Tagger(this, (uint64_t)a2);
  *v4 = &off_1E2DF1FF8;
  *((_BYTE *)v4 + 40) = (*(_BYTE *)a2 & 2) != 0;
  v4[6] = 0;
  CoreNLP::SentenceTagger::resetICUSentenceBreak((CoreNLP::SentenceTagger *)v4, a2[5]);
  return this;
}

void sub_191C5EFB0(_Unwind_Exception *a1)
{
  CoreNLP::SubWordTagger *v1;
  uint64_t v3;

  v3 = *((_QWORD *)v1 + 6);
  *((_QWORD *)v1 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  CoreNLP::SubWordTagger::~SubWordTagger(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::SentenceTagger::resetICUSentenceBreak(CoreNLP::SentenceTagger *this, const __CFLocale *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[64];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  CoreNLP::getLocaleCString(a2, (const __CFLocale *)v7, (char *)0x40);
  if ((int)uloc_setKeywordValue() >= 64)
    v3 = "en";
  else
    v3 = v7;
  v4 = operator new();
  CoreNLP::ICUTextBreakWithBuiltInRules::ICUTextBreakWithBuiltInRules(v4, *((_QWORD *)this + 4), 3, v3);
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v4 = *((_QWORD *)this + 6);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, *(_QWORD *)(*((_QWORD *)this + 4) + 8), *(_QWORD *)(*((_QWORD *)this + 4) + 16), *(_QWORD *)(*((_QWORD *)this + 4) + 24));
}

void sub_191C5F0EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10E1C4000849271);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::NLLangid::cjTokenLengthInString(CoreNLP::NLLangid *this, const __CFString *a2, CFRange a3)
{
  CFIndex length;
  CFIndex location;
  CoreNLP::ICUTextBreakWithCustomizedRules *v6;
  CoreNLP::TaggerContext **v8;
  CoreNLP::TaggerContext *v9;
  uint64_t v10;
  CFRange v12;

  length = a3.length;
  location = a3.location;
  v6 = (CoreNLP::ICUTextBreakWithCustomizedRules *)*((_QWORD *)this + 2);
  if (!v6)
  {
    v8 = (CoreNLP::TaggerContext **)((char *)this + 24);
    if (!*((_QWORD *)this + 3))
    {
      v9 = (CoreNLP::TaggerContext *)operator new();
      CoreNLP::TaggerContext::TaggerContext(v9);
      std::unique_ptr<CoreNLP::TaggerContext>::reset[abi:ne180100](v8, v9);
    }
    v6 = (CoreNLP::ICUTextBreakWithCustomizedRules *)operator new();
    CoreNLP::ICUTextBreakWithCustomizedRules::ICUTextBreakWithCustomizedRules(v6, *v8, 0, 0, 0, 0);
    v10 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v6;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      v6 = (CoreNLP::ICUTextBreakWithCustomizedRules *)*((_QWORD *)this + 2);
    }
  }
  v12.location = location;
  v12.length = length;
  return CoreNLP::ICUTextBreakWithCustomizedRules::cjTokenLengthInString(v6, a2, v12);
}

void sub_191C5F1F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x1060C40C790CA97);
  _Unwind_Resume(a1);
}

uint64_t NLStringTokenizerCreate(uint64_t a1, const __CFString *a2, CFIndex a3, CFIndex a4, unint64_t a5, const __CFLocale *a6)
{
  uint64_t Instance;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  CFRange v18;

  if (NLStringTokenizerGetTypeID::onceToken != -1)
    dispatch_once(&NLStringTokenizerGetTypeID::onceToken, &__block_literal_global_4);
  Instance = _CFRuntimeCreateInstance();
  v12 = Instance;
  if (Instance)
  {
    *(_QWORD *)(Instance + 64) = 0;
    *(_QWORD *)(Instance + 72) = a5;
    switch((char)a5)
    {
      case 0:
        v13 = 0;
        v14 = 0;
        *(_DWORD *)(v12 + 56) = 0;
        if ((a5 & 0x4000) != 0)
          goto LABEL_12;
        goto LABEL_17;
      case 1:
        v13 = 1;
        *(_DWORD *)(v12 + 56) = 1;
        v14 = 2;
        goto LABEL_16;
      case 2:
        v14 = 0;
        v13 = 2;
        *(_DWORD *)(v12 + 56) = 2;
        if ((a5 & 0x4000) != 0)
          goto LABEL_12;
        goto LABEL_17;
      case 3:
        v13 = 0;
        *(_DWORD *)(v12 + 56) = 0;
        v14 = 4;
        goto LABEL_16;
      case 4:
        v13 = 0;
        *(_DWORD *)(v12 + 56) = 0;
        v14 = 0x10000;
        goto LABEL_16;
      default:
        if (a5 == 64)
        {
          v13 = 0;
          *(_DWORD *)(v12 + 56) = 0;
          v14 = 0x800000;
        }
        else
        {
          if (a5 != 128)
            goto LABEL_29;
          v13 = 0;
          *(_DWORD *)(v12 + 56) = 0;
          v14 = 0x80000;
        }
LABEL_16:
        *(_QWORD *)(v12 + 64) = v14;
        if ((a5 & 0x4000) != 0)
        {
LABEL_12:
          v15 = 0x1000000;
        }
        else
        {
LABEL_17:
          if ((a5 & 0x8000) == 0)
            goto LABEL_20;
          v15 = 0x2000000;
        }
        v14 |= v15;
        *(_QWORD *)(v12 + 64) = v14;
LABEL_20:
        if ((a5 & 0xA00300) != 0)
        {
          v14 |= ((_DWORD)a5 << 19) & 0x18000000 | (((a5 >> 21) & 1) << 26) & 0xFFFFFFFFDFFFFFFFLL | (((a5 >> 23) & 1) << 29);
          *(_QWORD *)(v12 + 64) = v14;
        }
        v16 = NLTokenizerCreate(v13, v14, a6);
        *(_QWORD *)(v12 + 48) = v16;
        if (v16)
        {
          *(_QWORD *)(v12 + 112) = 0;
          *(_QWORD *)(v12 + 16) = 0;
          *(_QWORD *)(v12 + 88) = 0;
          *(_QWORD *)(v12 + 96) = 0;
          *(_QWORD *)(v12 + 80) = 0;
          *(_OWORD *)(v12 + 24) = xmmword_191D40610;
          *(_BYTE *)(v12 + 40) = 0;
          if (a2 && (a3 & 0x8000000000000000) == 0 && a4)
          {
            v18.location = a3;
            v18.length = a4;
            __NLSTSetStringAndLanguage(v12, a2, v18);
          }
          if (a6)
            *(_QWORD *)(v12 + 104) = CFRetain(a6);
          else
            *(_QWORD *)(v12 + 104) = 0;
          return v12;
        }
LABEL_29:
        CFRelease((CFTypeRef)v12);
        return 0;
    }
  }
  return v12;
}

uint64_t __NLSTSetStringAndLanguage(uint64_t result, CFStringRef str, CFRange range)
{
  BOOL v3;
  int v5;
  CFIndex length;
  CFIndex location;
  uint64_t v9;
  const void *v10;
  CFRange v11;

  if (str)
    v3 = range.location < 0;
  else
    v3 = 1;
  v5 = !v3 && range.length > 0;
  *(_BYTE *)(result + 40) = v5;
  *(_QWORD *)(result + 88) = 0;
  if (v5 == 1)
  {
    length = range.length;
    location = range.location;
    v9 = result;
    v10 = *(const void **)(result + 16);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(v9 + 16) = 0;
    }
    if ((*(_BYTE *)(v9 + 67) & 0x80) != 0)
    {
      *(_QWORD *)(v9 + 16) = CFRetain(str);
      *(_QWORD *)(v9 + 24) = 0;
    }
    else
    {
      v11.location = location;
      v11.length = length;
      *(_QWORD *)(v9 + 16) = CFStringCreateWithSubstring(0, str, v11);
      *(_QWORD *)(v9 + 24) = location;
    }
    *(_QWORD *)(v9 + 32) = length;
    return NLTokenizerSetString(*(_QWORD *)(v9 + 48));
  }
  return result;
}

uint64_t NLTokenizerSetString(uint64_t result)
{
  if (result)
  {
    result = *(_QWORD *)result;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

void CoreNLP::WordDispatchTagger::setString(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  _QWORD *SubWordTagger;
  CFRange v19;
  CFRange v20;
  CFRange v21;
  CFRange v22;
  CFRange v23;

  CoreNLP::Tagger::setString((_QWORD *)a1, a2, a3, a4, a5);
  v19.location = a3;
  v19.length = a4;
  CoreNLP::StringBuffer::setString((const __CFString **)(a1 + 168), a2, v19, **(_DWORD **)(a1 + 32) >> 31);
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 144) = xmmword_191D40610;
  *(_WORD *)(a1 + 160) = 0;
  v10 = *(uint64_t **)(a1 + 32);
  if (*((_BYTE *)v10 + 32))
  {
    v11 = *v10;
    if ((v11 & 0x40000) != 0)
    {
      v21.location = a3;
      v21.length = a4;
      CoreNLP::WordDispatchTagger::setStringInPossibleSubWordTaggers(a1, a2, v21, a5);
      return;
    }
    if ((v11 & 0x20000) == 0)
      goto LABEL_4;
    v22.location = a3;
    v22.length = a4;
    v15 = CoreNLP::DefaultSubWordTagger::needSpeciallyHandleCJPersonName(*(CoreNLP::DefaultSubWordTagger **)(a1 + 48), a2, v22);
    *(_WORD *)(a1 + 160) = v15;
    if ((_BYTE)v15)
      return;
    v23.location = a3;
    v23.length = a4;
    if (CoreNLP::NLLangid::isThaiString(*(CoreNLP::NLLangid **)(a1 + 96), a2, v23))
    {
      v12 = 31;
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 36) = 31;
    }
    else
    {
LABEL_4:
      if (a5 >= 2)
      {
        v13 = *(_QWORD *)(a1 + 32);
        v12 = *(_DWORD *)(v13 + 36);
      }
      else
      {
        v20.location = a3;
        v20.length = a4;
        v12 = CoreNLP::WordDispatchTagger::identifyLanguage((CoreNLP::WordDispatchTagger *)a1, a2, v20);
        v13 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)(v13 + 36) = v12;
      }
      v16 = *(_QWORD *)v13 & 0x800000;
      if (v12 != 31 && v16 != 0)
      {
        SubWordTagger = (_QWORD *)(a1 + 48);
LABEL_19:
        CoreNLP::WordDispatchTagger::setStringToSubWordTagger(a1, a2, a3, a4, SubWordTagger);
        *(_QWORD *)(a1 + 40) = *SubWordTagger;
        return;
      }
    }
    SubWordTagger = CoreNLP::WordDispatchTagger::getSubWordTagger(a1, v12);
    goto LABEL_19;
  }
  v14 = *(_QWORD *)(a1 + 40);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
}

void CoreNLP::Tagger::setString(_QWORD *a1, const __CFString *a2, uint64_t a3, uint64_t a4, int a5)
{
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = -1;
  CoreNLP::TaggerContext::setString(a1[4], a2, a3, a4, a5);
}

void CoreNLP::TaggerContext::setString(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4, int a5)
{
  CFStringRef v8;
  const __CFString *v10;
  const __CFString *Copy;
  BOOL v12;
  char v13;

  v8 = theString;
  v10 = *(const __CFString **)(a1 + 8);
  if (v10 != theString)
  {
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(a1 + 8) = 0;
    }
    if (v8)
    {
      if ((*(_BYTE *)(a1 + 3) & 0x80) != 0)
        Copy = (const __CFString *)CFRetain(v8);
      else
        Copy = CFStringCreateCopy(0, v8);
      v8 = Copy;
      *(_QWORD *)(a1 + 8) = Copy;
    }
  }
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 36) = a5;
  if (v8)
    v12 = a3 < 0;
  else
    v12 = 1;
  v13 = !v12;
  *(_BYTE *)(a1 + 32) = v13;
}

uint64_t CoreNLP::WordDispatchTagger::identifyLanguage(CoreNLP::WordDispatchTagger *this, const __CFString *a2, CFRange a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int LanguageOfString;
  BOOL v6;

  v3 = *((_QWORD *)this + 4);
  v4 = *(unsigned int *)(v3 + 60);
  if ((*(_BYTE *)v3 & 4) == 0
    || (v4 <= 0x36 ? (v6 = ((1 << v4) & 0x40000000300030) == 0) : (v6 = 1), v6))
  {
    LanguageOfString = CoreNLP::NLLangid::getLanguageOfString(*((_QWORD *)this + 12), a2, a3.location, a3.length, v4);
    if (LanguageOfString == 1)
      return 10;
    else
      return LanguageOfString;
  }
  return v4;
}

uint64_t CoreNLP::NLLangid::getLanguageOfString(uint64_t a1, CFStringRef theString, CFIndex a3, CFIndex a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  const char *CStringPtr;
  CoreNLP *v12;
  const char *v13;
  uint64_t v14;
  CoreNLP *v15;
  const char *v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  CoreNLP *v20;
  const char *v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  CFRange v26;
  CFRange v27;
  CFRange v28;
  CFRange v29;

  v5 = *(unsigned int **)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) - (_QWORD)v5 == 4)
    return *v5;
  if (!a4)
    return 1;
  v6 = a5;
  CStringPtr = CFStringGetCStringPtr(theString, 0x600u);
  if ((_DWORD)v6 != 13 && CStringPtr)
    return 10;
  if ((_DWORD)v6 == 20 && *(_DWORD *)(a1 + 8) == 20 && a4 <= 15)
  {
    v26.location = a3;
    v26.length = a4;
    if (!v12)
      return 20;
    v14 = CoreNLP::convertLanguageIDWithCode(v12, v13);
    v6 = v14;
    if (v14 <= 0x36 && ((1 << v14) & 0x40000000000032) != 0)
      return 20;
    return v6;
  }
  v27.location = a3;
  v27.length = a4;
  if (CoreNLP::NLLangid::cjTokenLengthInString((CoreNLP::NLLangid *)a1, theString, v27) == a4)
  {
    if (v6 > 0x36 || ((1 << v6) & 0x40000000100030) == 0)
    {
      v28.location = a3;
      v28.length = a4;
      v17 = CoreNLP::convertLanguageIDWithCode(v15, v16);
      v6 = v17;
      v19 = *(_DWORD **)(a1 + 32);
      v18 = *(_DWORD **)(a1 + 40);
      if (v19 != v18)
      {
        while (*v19 != (_DWORD)v17)
        {
          if (++v19 == v18)
          {
            v19 = *(_DWORD **)(a1 + 40);
            break;
          }
        }
        if (v19 == v18)
          return *(unsigned int *)(a1 + 8);
      }
      if (v17 > 0x36 || ((1 << v17) & 0x40000000300030) == 0)
        return *(unsigned int *)(a1 + 8);
    }
    return v6;
  }
  v29.location = a3;
  v29.length = a4;
  if (!v20)
    return 1;
  v22 = CoreNLP::convertLanguageIDWithCode(v20, v21);
  v6 = v22;
  v24 = *(_DWORD **)(a1 + 32);
  v23 = *(_DWORD **)(a1 + 40);
  if (v24 != v23)
  {
    while (*v24 != (_DWORD)v22)
    {
      if (++v24 == v23)
      {
        v24 = *(_DWORD **)(a1 + 40);
        break;
      }
    }
    if (v24 == v23)
      return 1;
  }
  return v6;
}

uint64_t CoreNLP::DefaultSubWordTagger::setString(CoreNLP::DefaultSubWordTagger *this, const __CFString *a2, CFRange a3)
{
  CFIndex length;
  CFIndex location;
  uint64_t result;

  length = a3.length;
  location = a3.location;
  CoreNLP::SubWordTagger::setString(this, a2, a3);
  result = (*(uint64_t (**)(_QWORD, const __CFString *, CFIndex, CFIndex))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8), a2, location, length);
  *((_QWORD *)this + 11) = *((_QWORD *)this + 10);
  *((_QWORD *)this + 13) = 0;
  return result;
}

_QWORD *CoreNLP::WordDispatchTagger::getSubWordTagger(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  _QWORD *v5;
  CoreNLP::KoreanSubWordTagger *v6;
  _QWORD *v7;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (!CoreNLP::WordDispatchTagger::hasSubWordTaggerForLanguage(a1, a2))
    return (_QWORD *)(a1 + 48);
  v4 = a2;
  v12 = a2;
  v5 = std::__hash_table<long,std::hash<long>,std::equal_to<long>,std::allocator<long>>::find<long>((_QWORD *)(a1 + 56), &v12);
  if (!v5)
  {
    if ((int)a2 > 20)
    {
      switch(a2)
      {
        case 0x15u:
          v6 = (CoreNLP::KoreanSubWordTagger *)operator new();
          CoreNLP::KoreanSubWordTagger::KoreanSubWordTagger(v6, *(const CoreNLP::TaggerContext **)(a1 + 32), (const CoreNLP::StringBuffer *)(a1 + 168));
          v11 = v4;
          v12 = (unint64_t)&v11;
          v7 = std::__hash_table<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long &&>,std::tuple<>>(a1 + 56, &v11, (uint64_t)&std::piecewise_construct, (_QWORD **)&v12);
          break;
        case 0x1Fu:
          v6 = (CoreNLP::KoreanSubWordTagger *)operator new();
          CoreNLP::ThaiSubWordTagger::ThaiSubWordTagger(v6, *(const CoreNLP::TaggerContext **)(a1 + 32), (const CoreNLP::StringBuffer *)(a1 + 168));
          v11 = v4;
          v12 = (unint64_t)&v11;
          v7 = std::__hash_table<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long &&>,std::tuple<>>(a1 + 56, &v11, (uint64_t)&std::piecewise_construct, (_QWORD **)&v12);
          break;
        case 0x36u:
          v6 = (CoreNLP::KoreanSubWordTagger *)operator new();
          CoreNLP::ChineseSubWordTagger::ChineseSubWordTagger(v6, *(_QWORD *)(a1 + 32), a1 + 168, 54);
          v11 = v4;
          v12 = (unint64_t)&v11;
          v7 = std::__hash_table<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long &&>,std::tuple<>>(a1 + 56, &v11, (uint64_t)&std::piecewise_construct, (_QWORD **)&v12);
          break;
        default:
          goto LABEL_19;
      }
    }
    else
    {
      switch(a2)
      {
        case 4u:
          v6 = (CoreNLP::KoreanSubWordTagger *)operator new();
          CoreNLP::ChineseSubWordTagger::ChineseSubWordTagger(v6, *(_QWORD *)(a1 + 32), a1 + 168, 4);
          v11 = v4;
          v12 = (unint64_t)&v11;
          v7 = std::__hash_table<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long &&>,std::tuple<>>(a1 + 56, &v11, (uint64_t)&std::piecewise_construct, (_QWORD **)&v12);
          break;
        case 5u:
          v6 = (CoreNLP::KoreanSubWordTagger *)operator new();
          CoreNLP::ChineseSubWordTagger::ChineseSubWordTagger(v6, *(_QWORD *)(a1 + 32), a1 + 168, 5);
          v11 = v4;
          v12 = (unint64_t)&v11;
          v7 = std::__hash_table<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long &&>,std::tuple<>>(a1 + 56, &v11, (uint64_t)&std::piecewise_construct, (_QWORD **)&v12);
          break;
        case 0x14u:
          v6 = (CoreNLP::KoreanSubWordTagger *)operator new();
          CoreNLP::JapaneseSubWordTagger::JapaneseSubWordTagger(v6, *(const CoreNLP::TaggerContext **)(a1 + 32), (const CoreNLP::StringBuffer *)(a1 + 168));
          v11 = v4;
          v12 = (unint64_t)&v11;
          v7 = std::__hash_table<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long &&>,std::tuple<>>(a1 + 56, &v11, (uint64_t)&std::piecewise_construct, (_QWORD **)&v12);
          break;
        default:
LABEL_19:
          v11 = v4;
          v12 = (unint64_t)&v11;
          v5 = std::__hash_table<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long &&>,std::tuple<>>(a1 + 56, &v11, (uint64_t)&std::piecewise_construct, (_QWORD **)&v12);
          return v5 + 3;
      }
    }
    v9 = v7;
    v10 = v7[3];
    v9[3] = v6;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    goto LABEL_19;
  }
  return v5 + 3;
}

void sub_191C5FD04(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::WordDispatchTagger::hasSubWordTaggerForLanguage(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  unint64_t v4;

  if (CoreNLP::WordDispatchTagger::hasSubWordTaggerForLanguage(NLLanguageID)const::onceToken != -1)
    dispatch_once(&CoreNLP::WordDispatchTagger::hasSubWordTaggerForLanguage(NLLanguageID)const::onceToken, &__block_literal_global_0);
  result = CoreNLP::WordDispatchTagger::hasSubWordTaggerForLanguage(NLLanguageID)const::supportedLanguages;
  if (CoreNLP::WordDispatchTagger::hasSubWordTaggerForLanguage(NLLanguageID)const::supportedLanguages)
  {
    v4 = a2;
    return std::__hash_table<long,std::hash<long>,std::equal_to<long>,std::allocator<long>>::find<long>((_QWORD *)CoreNLP::WordDispatchTagger::hasSubWordTaggerForLanguage(NLLanguageID)const::supportedLanguages, &v4) != 0;
  }
  return result;
}

_QWORD *std::__hash_table<long,std::hash<long>,std::equal_to<long>,std::allocator<long>>::find<long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *CoreNLP::SubWordTagger::setString(_QWORD *this, const __CFString *a2, CFRange a3)
{
  this[4] = 0;
  this[5] = 0;
  this[3] = -1;
  return this;
}

const __CFString *CoreNLP::StringBuffer::setString(const __CFString **this, CFStringRef theString, CFRange a3, int a4)
{
  CFIndex length;
  CFIndex location;
  const __CFString *v7;
  const __CFString *Copy;
  const __CFString *result;

  length = a3.length;
  location = a3.location;
  v7 = *this;
  if (v7 != theString)
  {
    if (v7)
    {
      CFRelease(v7);
      *this = 0;
    }
    if (theString)
    {
      if (a4)
        Copy = (const __CFString *)CFRetain(theString);
      else
        Copy = CFStringCreateCopy(0, theString);
      *this = Copy;
    }
  }
  this[1] = (const __CFString *)location;
  this[2] = (const __CFString *)length;
  result = this[3];
  this[3] = 0;
  if (result)
    return (const __CFString *)(*((uint64_t (**)(const __CFString *))result->isa + 1))(result);
  return result;
}

_QWORD *NLTokenizerCreate(int a1, uint64_t a2, const __CFLocale *a3)
{
  _QWORD *v6;
  const __CFLocale **v7;
  CoreNLP::TaggerContext *v8;
  CoreNLP::SentenceTagger *SentenceTagger;

  v6 = (_QWORD *)operator new();
  v7 = (const __CFLocale **)(v6 + 1);
  CoreNLP::TaggerContext::TaggerContext((CoreNLP::TaggerContext *)(v6 + 1));
  v6[1] = a2;
  CoreNLP::TaggerContext::setLocale((CoreNLP::TaggerContext *)(v6 + 1), a3);
  if (a1)
  {
    if (a1 == 1)
    {
      SentenceTagger = CoreNLP::SentenceTagger::createSentenceTagger(v7, v8);
    }
    else
    {
      if (a1 != 2)
      {
        CFLog();
LABEL_10:
        CoreNLP::TaggerContext::~TaggerContext((CoreNLP::TaggerContext *)v7);
        MEMORY[0x19401E994](v6, 0x1060C407ECFC6C2);
        return 0;
      }
      SentenceTagger = CoreNLP::ParagraphTagger::createParagraphTagger((CoreNLP::ParagraphTagger *)v7, v8);
    }
  }
  else
  {
    SentenceTagger = CoreNLP::WordTagger::createWordTagger((CoreNLP::WordTagger *)v7, v8);
  }
  *v6 = SentenceTagger;
  if (!SentenceTagger)
    goto LABEL_10;
  return v6;
}

void sub_191C60060(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x1060C407ECFC6C2);
  _Unwind_Resume(a1);
}

CoreNLP::TaggerContext *CoreNLP::TaggerContext::TaggerContext(CoreNLP::TaggerContext *this, const __CFLocale *a2, const __CFLocale *a3)
{
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_OWORD *)this + 1) = xmmword_191D40610;
  *((_WORD *)this + 16) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 52) = 0;
  *(_QWORD *)((char *)this + 44) = 0;
  *((_DWORD *)this + 15) = CoreNLP::getLocaleLanguage(a3, a2);
  if (a3)
    *((_QWORD *)this + 5) = CFRetain(a3);
  return this;
}

void sub_191C600E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::getLocaleLanguage(CoreNLP *this, const __CFLocale *a2)
{
  const __CFString *v2;
  const __CFString *v3;
  const char *v4;
  int v6;
  unsigned __int8 v7;
  int v8;
  char buffer[157];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!this)
    return 1;
  v2 = (const __CFString *)MEMORY[0x19401E1F0](this, a2);
  if (!v2)
    return 1;
  v3 = v2;
  if (!CFStringGetCStringPtr(v2, 0x600u) && !CFStringGetCString(v3, buffer, 157, 0x600u))
    return 1;
  uloc_addLikelySubtags();
  uloc_getLanguage();
  if ((unsigned __int16)v8 ^ 0x687A | BYTE2(v8))
  {
    if (v8 == 6649209 && (uloc_getScript(), !(v6 ^ 0x746E6148 | v7)))
      return 54;
    else
      return CoreNLP::convertLanguageIDWithCode((CoreNLP *)&v8, v4);
  }
  else
  {
    uloc_getScript();
    if (v6 ^ 0x736E6148 | v7)
    {
      if (v6 ^ 0x746E6148 | v7)
        return 1;
      else
        return 5;
    }
    else
    {
      return 4;
    }
  }
}

uint64_t CoreNLP::convertLanguageIDWithCode(CoreNLP *this, const char *a2)
{
  uint64_t v3;
  void *__p[2];
  char v6;

  if (!this)
    return 1;
  if (CoreNLP::convertLanguageIDWithCode(char const*)::onceToken != -1)
    dispatch_once(&CoreNLP::convertLanguageIDWithCode(char const*)::onceToken, &__block_literal_global_12);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)this);
  if (CoreNLP::convertLanguageIDWithCode(char const*)::codeToLangId + 8 == std::__tree<std::string>::find<std::string>(CoreNLP::convertLanguageIDWithCode(char const*)::codeToLangId, (const void **)__p))v3 = 1;
  else
    v3 = *(unsigned int *)(std::__tree<std::string>::find<std::string>(CoreNLP::convertLanguageIDWithCode(char const*)::codeToLangId, (const void **)__p)+ 56);
  if (v6 < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_191C6036C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CoreNLP::TaggerContext *CoreNLP::TaggerContext::TaggerContext(CoreNLP::TaggerContext *this)
{
  return CoreNLP::TaggerContext::TaggerContext(this, 0, 0);
}

uint64_t CoreNLP::TaggerContext::setLocale(CoreNLP::TaggerContext *this, const __CFLocale *a2)
{
  const __CFLocale *v4;
  uint64_t result;

  v4 = (const __CFLocale *)*((_QWORD *)this + 5);
  if (v4 != a2)
  {
    if (v4)
    {
      CFRelease(v4);
      *((_QWORD *)this + 5) = 0;
    }
    if (a2)
      *((_QWORD *)this + 5) = CFRetain(a2);
  }
  result = CoreNLP::getLocaleLanguage(a2, a2);
  *((_DWORD *)this + 15) = result;
  return result;
}

uint64_t _NLStringTokenizerTokenizeWithTranscriptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v12;
  _QWORD *i;
  _QWORD *NextToken;
  uint64_t v15;

  if (!*(_BYTE *)(a1 + 40))
    return 0;
  NLTokenizerReset(*(_QWORD *)(a1 + 48));
  if (a2 < 1)
    return 0;
  v12 = 0;
  for (i = (_QWORD *)(a3 + 8); ; i += 2)
  {
    NextToken = (_QWORD *)NLTokenizerGetNextToken(*(uint64_t **)(a1 + 48));
    if (!NextToken)
      break;
    v15 = NextToken[1];
    *(i - 1) = *(_QWORD *)(a1 + 24) + *NextToken;
    *i = v15;
    *(_QWORD *)(a4 + 8 * v12) = NextToken[2];
    if (a6)
      *(_QWORD *)(a6 + 8 * v12) = NLTokenizerGetTranscriptionCharactersPtrOfCurrentToken(*(uint64_t **)(a1 + 48), (uint64_t)NextToken, 0, a5);
    ++v12;
    ++a5;
    if (a2 == v12)
      return a2;
  }
  return v12;
}

void CoreNLP::WordDispatchTagger::setStringToSubWordTagger(uint64_t a1, const __CFString *a2, CFIndex a3, CFIndex a4, _QWORD *a5)
{
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  CoreNLP::ParagraphTagger *v14;
  uint64_t v15;
  void (*v16)(void);
  const __CFString *v17;
  const __CFString *v18;
  CFMutableStringRef MutableCopy;
  CFRange v20;
  CFRange v21;
  CFRange v22;
  CFRange v23;

  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a5 + 152))(*a5)
    && (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 2) & 2) != 0)
  {
    v20.location = a3;
    v20.length = a4;
    v17 = CFStringCreateWithSubstring(0, a2, v20);
    if (v17)
    {
      v18 = v17;
      MutableCopy = CFStringCreateMutableCopy(0, 0, v17);
      CFRelease(v18);
      if (MutableCopy)
      {
        v22.location = 0;
        v22.length = a4;
        CFStringFindAndReplace(MutableCopy, CFSTR("-"), CFSTR("a"), v22, 0);
        v23.location = 0;
        v23.length = a4;
        CFStringFindAndReplace(MutableCopy, CFSTR("@"), CFSTR("a"), v23, 0);
        CoreNLP::TaggerContext::setString(*(_QWORD *)(a1 + 32), MutableCopy, 0, a4, *(_DWORD *)(*(_QWORD *)(a1 + 32) + 36));
        v21.location = 0;
        v21.length = a4;
        CoreNLP::StringBuffer::setString((const __CFString **)(a1 + 168), MutableCopy, v21, 0);
        (*(void (**)(_QWORD, CFMutableStringRef, _QWORD, CFIndex))(*(_QWORD *)*a5 + 32))(*a5, MutableCopy, 0, a4);
        CFRelease(MutableCopy);
      }
    }
  }
  else
  {
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 152))(*a5) & 1) != 0
      || a4 < 1025
      || ((v10 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 36),
           v11 = v10 > 0x36,
           v12 = (1 << v10) & 0x40000000300030,
           !v11)
        ? (v13 = v12 == 0)
        : (v13 = 1),
          v13))
    {
      v16 = *(void (**)(void))(*(_QWORD *)*a5 + 32);
    }
    else
    {
      *(_BYTE *)(a1 + 208) = 1;
      v14 = *(CoreNLP::ParagraphTagger **)(a1 + 200);
      if (!v14)
      {
        v14 = (CoreNLP::ParagraphTagger *)operator new();
        CoreNLP::ParagraphTagger::ParagraphTagger(v14, *(CoreNLP::TaggerContext **)(a1 + 32), (CoreNLP::StringBuffer *)(a1 + 168), 4096);
        v15 = *(_QWORD *)(a1 + 200);
        *(_QWORD *)(a1 + 200) = v14;
        if (v15)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          v14 = *(CoreNLP::ParagraphTagger **)(a1 + 200);
        }
      }
      (*(void (**)(CoreNLP::ParagraphTagger *, const __CFString *, CFIndex, CFIndex, _QWORD))(*(_QWORD *)v14 + 40))(v14, a2, a3, a4, *(unsigned int *)(*(_QWORD *)(a1 + 32) + 36));
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 200) + 128))(*(_QWORD *)(a1 + 200));
      v16 = *(void (**)(void))(*(_QWORD *)*a5 + 32);
    }
    v16();
  }
}

void sub_191C60734(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10F1C40BE244B8ALL);
  _Unwind_Resume(a1);
}

uint64_t NLStringTokenizerAdvanceToNextToken(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  if (!*(_BYTE *)(a1 + 40))
    return 0;
  result = NLTokenizerGetNextToken(*(uint64_t **)(a1 + 48));
  *(_QWORD *)(a1 + 88) = result;
  if (result)
  {
    v3 = 17;
    if ((*(_QWORD *)(result + 16) & 0x20) == 0)
      v3 = 1;
    return (*(_QWORD *)(result + 16) >> 2) & 0x20 | *(_QWORD *)(result + 16) & 0xELL | v3;
  }
  return result;
}

uint64_t NLTokenizerGetNextToken(uint64_t *a1)
{
  uint64_t v1;

  if (a1 && (v1 = *a1) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 128))(v1);
  else
    return 0;
}

__int128 *CoreNLP::WordDispatchTagger::getNextToken(CoreNLP::WordDispatchTagger *this)
{
  __int128 *v2;
  __int128 *NextTokenFromCurrentSubWordTagger;
  uint64_t v4;
  BOOL v5;
  uint64_t SubWordTaggerForCJKSubToken;
  __int128 *v7;
  __int128 v9;

  if (*((_BYTE *)this + 128))
  {
    v2 = (__int128 *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 17) + 136))(*((_QWORD *)this + 17), 0);
    if (v2)
    {
      NextTokenFromCurrentSubWordTagger = v2;
      if ((*(_BYTE *)(*((_QWORD *)this + 4) + 2) & 1) == 0
        || *(_QWORD *)v2 < *((_QWORD *)this + 19) + *((_QWORD *)this + 18))
      {
        return NextTokenFromCurrentSubWordTagger;
      }
    }
    *((_BYTE *)this + 128) = 0;
    *((_OWORD *)this + 9) = xmmword_191D40610;
  }
  v9 = xmmword_191D40610;
  NextTokenFromCurrentSubWordTagger = (__int128 *)CoreNLP::WordDispatchTagger::getNextTokenFromCurrentSubWordTagger(this, (CFRange *)&v9);
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    v5 = !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 152))(v4)
      || NextTokenFromCurrentSubWordTagger == 0;
    if (!v5 && (NextTokenFromCurrentSubWordTagger[1] & 0x40001080) != 0)
    {
      SubWordTaggerForCJKSubToken = CoreNLP::WordDispatchTagger::getSubWordTaggerForCJKSubToken((uint64_t)this, (uint64_t)NextTokenFromCurrentSubWordTagger);
      v7 = NextTokenFromCurrentSubWordTagger;
      if (!SubWordTaggerForCJKSubToken)
        return NextTokenFromCurrentSubWordTagger;
      goto LABEL_16;
    }
  }
  if (*((_QWORD *)&v9 + 1))
  {
    SubWordTaggerForCJKSubToken = *((_QWORD *)this + 6);
    v7 = &v9;
    if (SubWordTaggerForCJKSubToken)
    {
LABEL_16:
      *((_QWORD *)this + 17) = SubWordTaggerForCJKSubToken;
      *((_OWORD *)this + 9) = *v7;
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)SubWordTaggerForCJKSubToken + 32))(SubWordTaggerForCJKSubToken, *(_QWORD *)(*((_QWORD *)this + 4) + 8), *((_QWORD *)this + 18), *((_QWORD *)this + 19));
      *((_BYTE *)this + 128) = 1;
      return (__int128 *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 17) + 136))(*((_QWORD *)this + 17), 0);
    }
  }
  return NextTokenFromCurrentSubWordTagger;
}

uint64_t CoreNLP::DefaultSubWordTagger::isDefaultSubWordTagger(CoreNLP::DefaultSubWordTagger *this)
{
  return 1;
}

_QWORD *CoreNLP::WordDispatchTagger::getNextTokenFromCurrentSubWordTagger(CoreNLP::WordDispatchTagger *this, CFRange *a2)
{
  _QWORD *result;
  int v5;

  result = (_QWORD *)*((_QWORD *)this + 5);
  if (result)
  {
    v5 = *((unsigned __int8 *)this + 208);
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 136))(result);
    if (v5 && result == 0)
    {
      do
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 25) + 128))(*((_QWORD *)this + 25));
        if (!result)
          break;
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5), *(_QWORD *)(*((_QWORD *)this + 4) + 8), *result, result[1]);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD, CFRange *))(**((_QWORD **)this + 5) + 136))(*((_QWORD *)this + 5), a2);
      }
      while (!result);
    }
  }
  return result;
}

CFRange *CoreNLP::DefaultSubWordTagger::getNextToken(CoreNLP::DefaultSubWordTagger *this, CFRange *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  __int128 *v6;
  __int128 v7;
  CFRange *result;
  BOOL v9;
  uint64_t v10;
  CoreNLP::StringBuffer **v11;
  uint64_t v12;
  BOOL v13;
  _QWORD v14[5];
  char v15;
  char v16;
  CFRange v17;

  v16 = 0;
  if (!*((_BYTE *)this + 72))
    return (CFRange *)(*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 8) + 56))(*((_QWORD *)this + 8), &v16);
  v3 = *((_QWORD *)this + 10);
  v4 = *((_QWORD *)this + 11);
  if (v3 != v4)
  {
    v5 = *((_QWORD *)this + 13);
    if (v5 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3)))
    {
      *((_QWORD *)this + 11) = v3;
    }
    else
    {
      *((_QWORD *)this + 13) = v5 + 1;
      if (v5 != -1)
      {
LABEL_5:
        v6 = (__int128 *)(v3 + 24 * v5);
        v7 = *v6;
        result = (CFRange *)((char *)this + 24);
        *((_QWORD *)this + 5) = *((_QWORD *)v6 + 2);
        *(_OWORD *)((char *)this + 24) = v7;
        return result;
      }
    }
  }
  *((_QWORD *)this + 13) = 0;
  result = (CFRange *)(*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 8) + 56))(*((_QWORD *)this + 8), &v16);
  if (result)
    v9 = v16 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v10 = MEMORY[0x1E0C809B0];
    do
    {
      v15 = 0;
      v11 = (CoreNLP::StringBuffer **)*((_QWORD *)this + 6);
      v17 = *result;
      v14[0] = v10;
      v14[1] = 0x40000000;
      v14[2] = ___ZN7CoreNLP20DefaultSubWordTagger12getNextTokenEP7CFRange_block_invoke;
      v14[3] = &__block_descriptor_tmp_4;
      v14[4] = this;
      CoreNLP::EnglishCompoundWord::enumerateDecomposedTokensWithSpecifiedStop(v11, v17, &v15, (uint64_t)v14);
      v3 = *((_QWORD *)this + 10);
      v12 = *((_QWORD *)this + 11);
      if (v3 != v12)
      {
        v5 = *((_QWORD *)this + 13);
        if (v5 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v12 - v3) >> 3)))
        {
          *((_QWORD *)this + 11) = v3;
        }
        else
        {
          *((_QWORD *)this + 13) = v5 + 1;
          if (v5 != -1)
            goto LABEL_5;
        }
      }
      *((_QWORD *)this + 13) = 0;
      result = (CFRange *)(*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 8) + 56))(*((_QWORD *)this + 8), &v16);
      if (result)
        v13 = v16 == 0;
      else
        v13 = 1;
    }
    while (!v13);
  }
  *((_BYTE *)this + 112) = 1;
  return result;
}

char *CoreNLP::ICUTextBreakWithBuiltInRules::getNextToken(CoreNLP::ICUTextBreakWithBuiltInRules *this, BOOL *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  char *v6;
  unsigned int RuleStatus;
  uint64_t v8;

  if ((*(_BYTE *)(*((_QWORD *)this + 7) + 2) & 0x80) != 0)
    return (char *)CoreNLP::ICUTextBreakWithBuiltInRules::getNextTokenForDataDetector(this, a2);
  v3 = ubrk_next();
  if (v3 == -1)
    return 0;
  v4 = v3;
  v5 = *((int *)this + 22);
  *((_QWORD *)this + 4) = *((_QWORD *)this + 2) + v5;
  v6 = (char *)this + 32;
  *((_QWORD *)this + 5) = v3 - v5;
  RuleStatus = ubrk_getRuleStatus();
  if (*((_DWORD *)this + 21) == 1)
  {
    if (RuleStatus >= 0x64)
    {
      if (RuleStatus - 100 >= 0x64)
      {
        v8 = 128;
        if (((RuleStatus - 300 < 0xC8) & *(_BYTE *)(*((_QWORD *)this + 7) + 2)) == 0)
          v8 = 0;
      }
      else
      {
        v8 = 8;
      }
    }
    else
    {
      v8 = 32;
    }
  }
  else
  {
    v8 = 0;
  }
  *((_QWORD *)this + 6) = v8;
  *((_DWORD *)this + 22) = v4;
  return v6;
}

uint64_t CoreNLP::ICUTextBreakWithBuiltInRules::getNextTokenForDataDetector(CoreNLP::ICUTextBreakWithBuiltInRules *this, BOOL *a2)
{
  int v3;
  int v4;
  int v5;
  unsigned int RuleStatus;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  BOOL v16;

  v3 = *((_DWORD *)this + 22);
  do
  {
    v4 = v3;
    v5 = ubrk_next();
    if (v5 == -1)
      return 0;
    v3 = v5;
    RuleStatus = ubrk_getRuleStatus();
  }
  while (!RuleStatus);
  if (RuleStatus - 500 > 0xFFFFFF37)
  {
    v9 = 128;
  }
  else
  {
    v7 = *((_QWORD *)this + 7);
    v8 = *(_DWORD *)(v7 + 36);
    if (v8 != 21 && *(_DWORD *)(v7 + 60) != 21 || (*(_WORD *)(v7 + 2) & 0x1880) == 0)
    {
      *((_QWORD *)this + 4) = *((_QWORD *)this + 2) + v4;
      *((_QWORD *)this + 5) = v3 - v4;
      v12 = 32;
      if (RuleStatus >= 0x64)
        v12 = 8 * (RuleStatus - 100 < 0x64);
      if (*((_DWORD *)this + 21) == 1)
        v13 = v12;
      else
        v13 = 0;
      *((_QWORD *)this + 6) = v13;
      if (v8 == 13)
      {
        v14 = *(unsigned __int16 *)(CoreNLP::ICUTextBreak::getStringBufferPtr(this) + 2 * v4);
        if ((v14 - 65) < 0x1A || (v15 = v14 - 196, v15 <= 0x18) && ((1 << v15) & 0x1040001) != 0)
          *((_QWORD *)this + 6) |= 4uLL;
      }
      *((_DWORD *)this + 22) = v3;
      return (uint64_t)this + 32;
    }
    v9 = 4096;
  }
  v16 = 0;
  *((_QWORD *)this + 4) = CoreNLP::ICUTextBreakWithBuiltInRules::getCJTextRange(this, v3, &v16);
  *((_QWORD *)this + 5) = v11;
  *((_DWORD *)this + 22) = ubrk_following();
  *((_QWORD *)this + 4) += *((_QWORD *)this + 2);
  *((_QWORD *)this + 6) = v9;
  return (uint64_t)this + 32;
}

char *CoreNLP::ICUTextBreakWithCustomizedRules::getNextToken(CoreNLP::ICUTextBreakWithCustomizedRules *this, BOOL *a2)
{
  uint64_t v3;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v5 = (char *)this + 32;
    if (MEMORY[0x19401F228](v3, 1, (char *)this + 32, (char *)this + 112))
    {
      if (!*((_BYTE *)this + 97))
      {
        if (*((_BYTE *)this + 96))
          CoreNLP::ICUTextBreakWithCustomizedRules::setTokenAttributes((uint64_t)this, *((_QWORD *)this + 14), (unint64_t *)this + 6, a2);
        goto LABEL_14;
      }
      v6 = 536872448;
      v7 = *((_QWORD *)this + 14);
      *((_QWORD *)this + 6) = v7 | 0x20000000;
      if ((v7 & 2) == 0 || (v7 & 8) == 0 && *(_DWORD *)(*((_QWORD *)this + 7) + 60) != 13)
      {
        if ((v7 & 0x1000) == 0)
        {
LABEL_10:
          *a2 = 0;
LABEL_14:
          *((_QWORD *)this + 4) += *((_QWORD *)this + 13) + *((_QWORD *)this + 2);
          return v5;
        }
        v6 = 536875008;
      }
      *((_QWORD *)this + 6) = v7 | v6;
      goto LABEL_10;
    }
  }
  return 0;
}

uint64_t CoreNLP::WordDispatchTagger::reset(CoreNLP::WordDispatchTagger *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
  return result;
}

uint64_t NLTokenizerReset(uint64_t result)
{
  if (result)
  {
    result = *(_QWORD *)result;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 136))(result);
  }
  return result;
}

CoreNLP::LineBreakTagger *CoreNLP::WordTagger::createWordTagger(CoreNLP::WordTagger *this, CoreNLP::TaggerContext *a2)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  CoreNLP::LineBreakTagger *v7;

  if ((*(_BYTE *)this & 4) != 0
    && ((v3 = *((_DWORD *)this + 15), v4 = v3 > 0x36, v5 = (1 << v3) & 0x40000000300030, !v4)
      ? (v6 = v5 == 0)
      : (v6 = 1),
        v6))
  {
    v7 = (CoreNLP::LineBreakTagger *)operator new();
    CoreNLP::LineBreakTagger::LineBreakTagger(v7, this);
  }
  else
  {
    v7 = (CoreNLP::LineBreakTagger *)operator new();
    CoreNLP::WordDispatchTagger::WordDispatchTagger(v7, this, 0);
  }
  return v7;
}

void sub_191C60F6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10A1C40F8EEC480);
  _Unwind_Resume(a1);
}

const CoreNLP::TaggerContext **CoreNLP::WordDispatchTagger::WordDispatchTagger(const CoreNLP::TaggerContext **this, CoreNLP::TaggerContext *a2, const __CFURL *a3)
{
  _QWORD *v6;
  CoreNLP::NLLangid *v7;
  CoreNLP::DefaultSubWordTagger *v8;
  const CoreNLP::TaggerContext *v9;

  v6 = CoreNLP::WordTagger::WordTagger((CoreNLP::WordTagger *)this, a2);
  *v6 = &off_1E2DF2610;
  *(_OWORD *)(v6 + 7) = 0u;
  *(_OWORD *)(v6 + 5) = 0u;
  *(_OWORD *)(v6 + 9) = 0u;
  *((_DWORD *)v6 + 22) = 1065353216;
  v7 = (CoreNLP::NLLangid *)operator new();
  CoreNLP::NLLangid::NLLangid(v7);
  this[13] = 0;
  this[12] = v7;
  this[17] = 0;
  this[14] = 0;
  this[15] = 0;
  *((_BYTE *)this + 128) = 0;
  *((_OWORD *)this + 9) = xmmword_191D40610;
  *((_WORD *)this + 80) = 0;
  CoreNLP::StringBuffer::StringBuffer(this + 21);
  this[25] = 0;
  *((_BYTE *)this + 208) = 0;
  v8 = (CoreNLP::DefaultSubWordTagger *)operator new();
  CoreNLP::DefaultSubWordTagger::DefaultSubWordTagger(v8, this[4], (const CoreNLP::StringBuffer *)(this + 21), *(_QWORD *)a2, a3);
  v9 = this[6];
  this[6] = v8;
  if (v9)
    (*(void (**)(const CoreNLP::TaggerContext *))(*(_QWORD *)v9 + 8))(v9);
  return this;
}

void sub_191C610BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  CoreNLP::StringBuffer *v3;
  uint64_t v4;
  void **v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  MEMORY[0x19401E994](v4, 0x10E1C40108564E1);
  v7 = *(_QWORD *)(v1 + 200);
  *(_QWORD *)(v1 + 200) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  CoreNLP::StringBuffer::~StringBuffer(v3);
  v8 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 112) = v8;
    operator delete(v8);
  }
  std::unique_ptr<CoreNLP::NLLangid>::reset[abi:ne180100]((CoreNLP::NLLangid **)(v1 + 96), 0);
  std::__hash_table<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>>>::~__hash_table(v2);
  v9 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  CoreNLP::SubWordTagger::~SubWordTagger((CoreNLP::SubWordTagger *)v1);
  _Unwind_Resume(a1);
}

CoreNLP::NLLangid *CoreNLP::NLLangid::NLLangid(CoreNLP::NLLangid *this)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFArrayRef v4;
  CFIndex Count;
  CFIndex FirstIndexOfValue;
  CFIndex v7;
  CFIndex v8;
  CFIndex v9;
  CFIndex v10;
  CFIndex v11;
  CFIndex v12;
  CFIndex v13;
  int v14;
  _OWORD v18[2];
  uint64_t v19;
  CFRange v20;
  CFRange v21;
  CFRange v22;
  CFRange v23;

  v19 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = langid_create();
  v18[0] = xmmword_1E2DF4900;
  v18[1] = *(_OWORD *)off_1E2DF4910;
  v2 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)v18, 4, MEMORY[0x1E0C9B378]);
  if (v2)
  {
    v3 = CFLocaleCopyPreferredLanguages();
    if (!v3)
    {
      v14 = 20;
      v4 = v2;
LABEL_37:
      CFRelease(v4);
      goto LABEL_38;
    }
    v4 = CFBundleCopyLocalizationsForPreferences(v2, v3);
    CFRelease(v3);
    CFRelease(v2);
    if (v4)
    {
      Count = CFArrayGetCount(v4);
      if (Count)
      {
        v20.location = 0;
        v20.length = Count;
        FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v4, v20, CFSTR("ja"));
        if (FirstIndexOfValue == -1)
          v7 = Count;
        else
          v7 = FirstIndexOfValue;
        v21.location = 0;
        v21.length = Count;
        v8 = CFArrayGetFirstIndexOfValue(v4, v21, CFSTR("zh-Hans"));
        if (v8 == -1)
          v9 = Count;
        else
          v9 = v8;
        v22.location = 0;
        v22.length = Count;
        v10 = CFArrayGetFirstIndexOfValue(v4, v22, CFSTR("zh-Hant"));
        if (v10 == -1)
          v11 = Count;
        else
          v11 = v10;
        v23.location = 0;
        v23.length = Count;
        v12 = CFArrayGetFirstIndexOfValue(v4, v23, CFSTR("ko"));
        if (v12 == -1)
          v13 = Count;
        else
          v13 = v12;
        if (v9 >= v7 || v9 >= v11 || v9 >= v13)
        {
          if (v11 >= v7 || v11 >= v9 || v11 >= v13)
          {
            if (v13 < v11 && v13 < v9 && v13 < v7)
              v14 = 21;
            else
              v14 = 20;
          }
          else
          {
            v14 = 5;
          }
        }
        else
        {
          v14 = 4;
        }
      }
      else
      {
        v14 = 20;
      }
      goto LABEL_37;
    }
  }
  v14 = 20;
LABEL_38:
  *((_DWORD *)this + 2) = v14;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 6) = 0;
  return this;
}

CoreNLP::DefaultSubWordTagger *CoreNLP::DefaultSubWordTagger::DefaultSubWordTagger(CoreNLP::DefaultSubWordTagger *this, const __CFLocale **a2, const CoreNLP::StringBuffer *a3, unint64_t a4, const __CFURL *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  *CoreNLP::SubWordTagger::SubWordTagger(this, (uint64_t)a2, (uint64_t)a3) = &off_1E2DF2898;
  v10 = (_QWORD *)operator new();
  CoreNLP::EnglishCompoundWord::EnglishCompoundWord(v10, (uint64_t)a2, (uint64_t)a3);
  *((_QWORD *)this + 6) = v10;
  v11 = (_QWORD *)operator new();
  CoreNLP::EnglishCompoundWord::EnglishCompoundWord(v11, (uint64_t)a2, (uint64_t)a3);
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 7) = v11;
  *((_QWORD *)this + 8) = 0;
  *((_BYTE *)this + 72) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_WORD *)this + 56) = 0;
  if ((a4 & 0x810000) != 0)
  {
    CoreNLP::DefaultSubWordTagger::resetICUTextBreak(this, a2[5]);
  }
  else
  {
    *((_BYTE *)this + 72) = 1;
    v12 = operator new();
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 0x40000000;
    v15[2] = ___ZN7CoreNLP20DefaultSubWordTaggerC2ERKNS_13TaggerContextERKNS_12StringBufferEmPK7__CFURL_block_invoke;
    v15[3] = &__block_descriptor_tmp_4;
    v15[4] = this;
    CoreNLP::ICUTextBreakWithCustomizedRules::ICUTextBreakWithCustomizedRules(v12, a2, a5, 1, (a4 >> 19) & 1, v15);
    v13 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v12;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  return this;
}

void sub_191C614E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  CoreNLP::SubWordTagger **v2;
  uint64_t v3;
  void **v4;
  void *v6;
  uint64_t v7;

  MEMORY[0x19401E994](v3, 0x10E1C403762A6A8);
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 88) = v6;
    operator delete(v6);
  }
  v7 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 64) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  std::unique_ptr<CoreNLP::EnglishCompoundWord>::reset[abi:ne180100]((CoreNLP::SubWordTagger **)(v1 + 56), 0);
  std::unique_ptr<CoreNLP::EnglishCompoundWord>::reset[abi:ne180100](v2, 0);
  CoreNLP::SubWordTagger::~SubWordTagger((CoreNLP::SubWordTagger *)v1);
  _Unwind_Resume(a1);
}

_QWORD *CoreNLP::EnglishCompoundWord::EnglishCompoundWord(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

_QWORD *CoreNLP::SubWordTagger::SubWordTagger(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = off_1E2DF1E90;
  result[1] = a2;
  result[2] = a3;
  result[3] = -1;
  result[4] = 0;
  result[5] = 0;
  return result;
}

_QWORD *CoreNLP::StringBuffer::StringBuffer(_QWORD *this)
{
  *this = 0;
  this[1] = -1;
  this[2] = 0;
  this[3] = 0;
  return this;
}

_QWORD *CoreNLP::WordTagger::WordTagger(CoreNLP::WordTagger *this, CoreNLP::TaggerContext *a2)
{
  _QWORD *result;

  result = CoreNLP::Tagger::Tagger(this, (uint64_t)a2);
  *result = &unk_1E2DF1BD0;
  return result;
}

_QWORD *CoreNLP::Tagger::Tagger(_QWORD *result, uint64_t a2)
{
  *result = off_1E2DF2F80;
  result[1] = -1;
  result[2] = 0;
  result[3] = 0;
  result[4] = a2;
  return result;
}

UText *CoreNLP::ICUTextBreakWithCustomizedRules::setString(CoreNLP::ICUTextBreakWithCustomizedRules *this, const __CFString *a2, CFRange a3)
{
  UText *result;

  result = CoreNLP::ICUTextBreak::setString(this, a2, a3);
  *((_QWORD *)this + 13) = 0;
  return result;
}

uint64_t CoreNLP::ICUTextBreakWithBuiltInRules::setString(CoreNLP::ICUTextBreakWithBuiltInRules *this, const __CFString *a2, CFRange a3)
{
  CFIndex location;
  uint64_t result;

  location = a3.location;
  result = (uint64_t)CoreNLP::ICUTextBreak::setString(this, a2, a3);
  *((_DWORD *)this + 22) = 0;
  if (a2)
  {
    if ((location & 0x8000000000000000) == 0)
    {
      result = ubrk_first();
      *((_DWORD *)this + 22) = result;
    }
  }
  return result;
}

UText *CoreNLP::ICUTextBreak::setString(CoreNLP::ICUTextBreak *this, CFStringRef theString, CFRange range)
{
  CFIndex length;
  CFIndex location;
  UText *result;
  const char *CStringPtr;
  UText *v9;
  const UniChar *CharactersPtr;
  const UChar *v11;
  int64_t v12;
  UText *v13;
  UErrorCode status;
  CFRange v15;

  length = range.length;
  location = range.location;
  result = (UText *)*((_QWORD *)this + 8);
  if (result)
  {
    CFRelease(result);
    result = (UText *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = 0;
    if (result)
      result = (UText *)(*(uint64_t (**)(UText *))(*(_QWORD *)&result->magic + 8))(result);
  }
  *((_OWORD *)this + 1) = xmmword_191D40610;
  *((_BYTE *)this + 80) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = -1;
  if (!theString || location < 0 || !*((_QWORD *)this + 1))
    return result;
  *((_QWORD *)this + 2) = location;
  *((_QWORD *)this + 3) = length;
  status = U_ZERO_ERROR;
  if ((*(_BYTE *)(*((_QWORD *)this + 7) + 3) & 0x80) != 0 && !location && length == CFStringGetLength(theString))
  {
    CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
    if (CStringPtr)
    {
      v9 = utext_openUTF8(0, CStringPtr, -1, &status);
LABEL_14:
      v13 = v9;
      if (status >= U_ILLEGAL_ARGUMENT_ERROR && v9)
      {
        utext_close(v9);
      }
      else if (v9)
      {
        *((_BYTE *)this + 80) = 1;
        *((_QWORD *)this + 8) = CFRetain(theString);
LABEL_21:
        status = U_ZERO_ERROR;
        ubrk_setUText();
        return utext_close(v13);
      }
      goto LABEL_19;
    }
    CharactersPtr = CFStringGetCharactersPtr(theString);
    if (CharactersPtr)
    {
      v11 = CharactersPtr;
      v12 = CFStringGetLength(theString);
      v9 = utext_openUChars(0, v11, v12, &status);
      goto LABEL_14;
    }
  }
LABEL_19:
  v15.location = location;
  v15.length = length;
  result = (UText *)CFStringCreateWithSubstring(0, theString, v15);
  *((_QWORD *)this + 8) = result;
  if (result)
  {
    result = (UText *)CFStringOpenUText();
    v13 = result;
    if (result)
      goto LABEL_21;
  }
  return result;
}

_BYTE *CoreNLP::DefaultSubWordTagger::resetICUTextBreak(_BYTE *this, const __CFLocale *a2)
{
  _BYTE *v2;
  uint64_t v3;
  _BYTE v4[64];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (!this[72])
  {
    v2 = this;
    CoreNLP::getLocaleCString(a2, (const __CFLocale *)v4, (char *)0x40);
    v3 = operator new();
    CoreNLP::ICUTextBreakWithBuiltInRules::ICUTextBreakWithBuiltInRules(v3, *((_QWORD *)v2 + 1), 1, v4);
    this = (_BYTE *)*((_QWORD *)v2 + 8);
    *((_QWORD *)v2 + 8) = v3;
    if (this)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

void sub_191C618E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10E1C4000849271);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::ICUTextBreakWithBuiltInRules::ICUTextBreakWithBuiltInRules(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;

  CoreNLP::ICUTextBreak::ICUTextBreak(a1, a2);
  *(_QWORD *)v5 = &off_1E2DF2CD8;
  *(_DWORD *)(v5 + 84) = a3;
  *(_DWORD *)(v5 + 88) = 0;
  *(_QWORD *)(a1 + 8) = ubrk_open();
  return a1;
}

void sub_191C61984(_Unwind_Exception *a1)
{
  CoreNLP::ICUTextBreak *v1;

  CoreNLP::ICUTextBreak::~ICUTextBreak(v1);
  _Unwind_Resume(a1);
}

double CoreNLP::ICUTextBreak::ICUTextBreak(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_1E2DF1D00;
  *(_QWORD *)(a1 + 8) = 0;
  result = NAN;
  *(_OWORD *)(a1 + 16) = xmmword_191D40610;
  *(_QWORD *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  return result;
}

void CoreNLP::getLocaleCString(CoreNLP *this, const __CFLocale *a2, char *a3)
{
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *CanonicalLanguageIdentifierFromString;
  const __CFString *v10;
  int CString;
  const __CFString *v12;
  CFTypeID TypeID;
  const __CFString *ValueAtIndex;
  int v15;

  if (!this)
  {
    v6 = (const __CFString *)*MEMORY[0x1E0C9B248];
    v7 = (const __CFString *)CFPreferencesCopyAppValue(CFSTR("AppleTextBreakLocale"), (CFStringRef)*MEMORY[0x1E0C9B248]);
    if (v7)
    {
      v8 = v7;
      CanonicalLanguageIdentifierFromString = CFLocaleCreateCanonicalLanguageIdentifierFromString(0, v7);
      if (CanonicalLanguageIdentifierFromString)
      {
        v10 = CanonicalLanguageIdentifierFromString;
        CString = CFStringGetCString(CanonicalLanguageIdentifierFromString, (char *)a2, (CFIndex)a3, 0x600u);
        CFRelease(v10);
        CFRelease(v8);
        if (CString)
          return;
        goto LABEL_16;
      }
    }
    else
    {
      v12 = (const __CFString *)CFPreferencesCopyAppValue(CFSTR("AppleLanguages"), v6);
      if (!v12)
        goto LABEL_16;
      v8 = v12;
      TypeID = CFArrayGetTypeID();
      if (TypeID == CFGetTypeID(v8) && CFArrayGetCount((CFArrayRef)v8) >= 1)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v8, 0);
        if (ValueAtIndex)
        {
          v15 = CFStringGetCString(ValueAtIndex, (char *)a2, (CFIndex)a3, 0x600u);
          CFRelease(v8);
          if (v15)
            return;
LABEL_16:
          strlcpy((char *)a2, "en", (size_t)a3);
          return;
        }
      }
    }
    CFRelease(v8);
    goto LABEL_16;
  }
  v5 = (const __CFString *)MEMORY[0x19401E1F0]();
  if (!v5 || !CFStringGetCString(v5, (char *)a2, (CFIndex)a3, 0x600u))
    goto LABEL_16;
}

uint64_t CoreNLP::ICUTextBreakWithCustomizedRules::cjTokenLengthInString(CoreNLP::ICUTextBreakWithCustomizedRules *this, const __CFString *a2, CFRange a3)
{
  uint64_t result;
  _BYTE v5[32];
  _BYTE v6[8];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 1))
    return 0;
  result = 0;
  if (a2 && a3.location != -1 && a3.length)
  {
    (*(void (**)(CoreNLP::ICUTextBreakWithCustomizedRules *))(*(_QWORD *)this + 16))(this);
    if (MEMORY[0x19401F228](*((_QWORD *)this + 1), 4, v6, v5) == 1 && (v5[3] & 0x40) != 0)
      return v7;
    return 0;
  }
  return result;
}

uint64_t `anonymous namespace'::identifyLanguage(uint64_t a1, const __CFString *a2, CFRange a3)
{
  uint64_t v4;
  _BYTE v6[8];
  uint64_t v7;

  CoreNLP::UStringPiece::UStringPiece((CoreNLP::UStringPiece *)v6, a2, a3);
  v4 = 0;
  if (a1 && v7)
  {
    langid_reset();
    langid_consume_string();
    langid_highest_score();
    v4 = langid_languagecode();
  }
  CoreNLP::UStringPiece::~UStringPiece((CoreNLP::UStringPiece *)v6);
  return v4;
}

void sub_191C61C54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CoreNLP::UStringPiece::~UStringPiece((CoreNLP::UStringPiece *)va);
  _Unwind_Resume(a1);
}

CoreNLP::UStringPiece *CoreNLP::UStringPiece::UStringPiece(CoreNLP::UStringPiece *this, CFStringRef theString, CFRange a3)
{
  const UniChar **v4;
  CFIndex location;
  CFIndex length;
  const UniChar *CharactersPtr;
  const UniChar *v9;
  UniChar *v10;
  uint64_t v11;
  CFRange v13;

  *(_QWORD *)this = &off_1E2DF1D58;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (const UniChar **)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  if (theString)
  {
    location = a3.location;
    if (a3.location != -1)
    {
      length = a3.length;
      if (a3.length)
      {
        if (CFStringGetLength(theString) >= a3.location + a3.length)
        {
          *((_QWORD *)this + 2) = location;
          *((_QWORD *)this + 3) = length;
          CharactersPtr = CFStringGetCharactersPtr(theString);
          *v4 = CharactersPtr;
          if (CharactersPtr)
          {
            v9 = &CharactersPtr[location];
          }
          else
          {
            v10 = (UniChar *)operator new[]();
            v11 = *((_QWORD *)this + 4);
            *((_QWORD *)this + 4) = v10;
            if (v11)
            {
              MEMORY[0x19401E970](v11, 0x1000C80BDFB0063);
              v10 = (UniChar *)*((_QWORD *)this + 4);
            }
            v13.location = location;
            v13.length = length;
            CFStringGetCharacters(theString, v13, v10);
            v9 = (const UniChar *)*((_QWORD *)this + 4);
          }
          *v4 = v9;
        }
      }
    }
  }
  return this;
}

void sub_191C61D68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v3)
    MEMORY[0x19401E970](v3, 0x1000C80BDFB0063);
  _Unwind_Resume(exception_object);
}

void CoreNLP::UStringPiece::~UStringPiece(CoreNLP::UStringPiece *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DF1D58;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    MEMORY[0x19401E970](v2, 0x1000C80BDFB0063);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DF1D58;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    MEMORY[0x19401E970](v2, 0x1000C80BDFB0063);
  JUMPOUT(0x19401E994);
}

uint64_t CoreNLP::ICUTextBreakWithCustomizedRules::ICUTextBreakWithCustomizedRules(uint64_t a1, uint64_t a2, CoreNLP *a3, char a4, char a5, const void *a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];
  std::string __p;
  std::string v17;
  int v18;

  CoreNLP::ICUTextBreak::ICUTextBreak(a1, a2);
  *v11 = &off_1E2DF2DA0;
  *(_QWORD *)(a1 + 88) = _Block_copy(a6);
  *(_BYTE *)(a1 + 96) = a4;
  *(_BYTE *)(a1 + 97) = a5;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if (a3)
    CoreNLP::getFileSystemRepresentationFromCFURL(a3, &v17);
  std::string::basic_string[abi:ne180100]<0>(&v17, "com.apple.CoreNLP.defaultICURule");
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v15[2] = ___ZN7CoreNLP31ICUTextBreakWithCustomizedRulesC2ERKNS_13TaggerContextEPK7__CFURLbbU13block_pointerFv7CFRangeRbU13block_pointerFvP7NLTokenPbEE_block_invoke;
  v15[3] = &__block_descriptor_tmp_16;
  v15[4] = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
  else
    __p = v17;
  if (CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<unsigned char>>::getPersistentResource((uint64_t)&v17, (uint64_t)v15))
  {
    v18 = 0;
    v12 = urbtok57_openBinaryRulesNoCopy();
    if (v18 >= 1)
      v13 = 0;
    else
      v13 = v12;
    *(_QWORD *)(a1 + 8) = v13;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return a1;
}

void sub_191C61F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  CoreNLP::ICUTextBreak *v25;

  if (a25 < 0)
    operator delete(__p);
  CoreNLP::ICUTextBreak::~ICUTextBreak(v25);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<unsigned char>>::getPersistentResource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD block[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  if (CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<unsigned char>>::getQueue(void)::onceToken != -1)
    dispatch_once(&CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<unsigned char>>::getQueue(void)::onceToken, &__block_literal_global_14);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7CoreNLP24SingletonResourceManagerINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_12ReadOnlyFileIhEEE21getPersistentResourceERKS7_U13block_pointerFPS9_vE_block_invoke;
  block[3] = &unk_1E2DF51A0;
  block[5] = &v7;
  block[6] = a1;
  block[4] = a2;
  dispatch_sync((dispatch_queue_t)CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<unsigned char>>::getQueue(void)::queue, block);
  v4 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t CoreNLP::SentenceTagger::getNextToken(CoreNLP::SentenceTagger *this)
{
  char v2;

  v2 = 0;
  return (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 6) + 56))(*((_QWORD *)this + 6), &v2);
}

uint64_t CoreNLP::DefaultSubWordTagger::getTranscriptionCharactersPtrOfCurrentToken()
{
  return 0;
}

uint64_t CoreNLP::WordDispatchTagger::getTranscriptionCharactersPtrOfCurrentToken(uint64_t a1)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 128))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 112))(*(_QWORD *)(a1 + 136));
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
  return result;
}

_QWORD *CoreNLP::WordDispatchTagger::enumerateSubTokensOfToken(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v7;
  _QWORD v8[3];

  if (a2)
  {
    v4 = *(_QWORD *)(a2 + 16);
    if ((v4 & 0x800) == 0)
    {
      if ((v4 & 0x40001080) != 0)
        goto LABEL_4;
      if ((*(_BYTE *)(result[4] + 2) & 8) != 0)
      {
        if ((~(_BYTE)v4 & 0x30) == 0 || (*(_QWORD *)(a2 + 16) & 0x20000000) != 0)
          goto LABEL_15;
      }
      else if ((v4 & 0x20000000) != 0)
      {
LABEL_15:
        result = (_QWORD *)result[6];
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 80))(result);
      }
LABEL_4:
      result = (_QWORD *)result[5];
      if (!result)
        return result;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 80))(result);
    }
    v5 = *(_QWORD *)(a2 + 8);
    v8[0] = 0;
    v8[1] = v5;
    v8[2] = v4;
    v7 = 0;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, char *))(a4 + 16))(a4, v8, &v7);
  }
  return result;
}

uint64_t NLTokenizerGetTranscriptionCharactersPtrOfCurrentToken(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;

  if (a4)
    *a4 = 0;
  if (a1 && (v4 = *a1) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  else
    return 0;
}

uint64_t NLTokenizerEnumerateSubTokensOfToken(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    result = *(_QWORD *)result;
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)result + 88))(result, a2, 0, a3);
  }
  return result;
}

uint64_t CoreNLP::ICUTextBreakWithCustomizedRules::setTokenAttributes(uint64_t this, unint64_t a2, unint64_t *a3, BOOL *a4)
{
  uint64_t v4;

  if ((a2 & 0x40000000) != 0)
  {
    *a3 = 128;
    *a4 = 0;
  }
  else if ((a2 & 0x820) == 0x20)
  {
    *a4 = 1;
  }
  else
  {
    *a4 = 0;
    v4 = 2 * ((a2 & 0x14) != 0);
    *a3 = v4;
    if (((*(_DWORD *)(*(_QWORD *)(this + 56) + 36) == 13) & (a2 >> 1)) != 0 || (a2 & 0x30) != 0)
    {
      if (((*(_DWORD *)(*(_QWORD *)(this + 56) + 36) == 13) & (a2 >> 1)) != 0)
        v4 |= 4uLL;
      *a3 = a2 & 0x20 | (a2 >> 1) & 8 | v4;
    }
  }
  return this;
}

void ___ZN7CoreNLP24SingletonResourceManagerINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_12ReadOnlyFileIhEEE8getQueueEv_block_invoke()
{
  NSObject *v0;
  NSObject *global_queue;

  v0 = dispatch_queue_create("com.apple.CoreNLP.SingletonResourceManager", 0);
  CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<unsigned char>>::getQueue(void)::queue = (uint64_t)v0;
  global_queue = dispatch_get_global_queue(-32768, 0);
  dispatch_set_target_queue(v0, global_queue);
}

CoreNLP::TaggingFeatureExtractor *CoreNLP::TaggingFeatureExtractor::TaggingFeatureExtractor(CoreNLP::TaggingFeatureExtractor *this)
{
  _OWORD *v2;
  char *v3;
  _BYTE *v4;
  char *v5;
  _OWORD *v6;
  _OWORD *v7;
  _OWORD *v8;
  _BYTE *v9;
  char *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;

  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E2DF2BF8;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 7) = (char *)this + 64;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  v2 = operator new(0x10uLL);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 10) = v2;
  *v2++ = xmmword_191D41730;
  *((_QWORD *)this + 11) = v2;
  *((_QWORD *)this + 12) = v2;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  v3 = (char *)operator new(0x11uLL);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 14) = v3 + 17;
  *((_QWORD *)this + 15) = v3 + 17;
  qmemcpy(v3, "AR!\"$%&'()*pqrstu", 17);
  *((_QWORD *)this + 13) = v3;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  v4 = operator new(1uLL);
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 16) = v4;
  *v4++ = 74;
  *((_QWORD *)this + 17) = v4;
  *((_QWORD *)this + 18) = v4;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  v5 = (char *)operator new(0xBuLL);
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 20) = v5 + 11;
  *((_QWORD *)this + 21) = v5 + 11;
  qmemcpy(v5, "ARSJKLMNOPQ", 11);
  *((_QWORD *)this + 19) = v5;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  v6 = operator new(0x1CuLL);
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 23) = (char *)v6 + 28;
  *((_QWORD *)this + 24) = (char *)v6 + 28;
  *v6 = xmmword_191D4185D;
  *(_OWORD *)((char *)v6 + 12) = *(__int128 *)((char *)&xmmword_191D4185D + 12);
  *((_QWORD *)this + 22) = v6;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  v7 = operator new(0x1CuLL);
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 26) = (char *)v7 + 28;
  *((_QWORD *)this + 27) = (char *)v7 + 28;
  *v7 = xmmword_191D41879;
  *(_OWORD *)((char *)v7 + 12) = *(__int128 *)((char *)&xmmword_191D41879 + 12);
  *((_QWORD *)this + 25) = v7;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  v8 = operator new(0x1CuLL);
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 29) = (char *)v8 + 28;
  *((_QWORD *)this + 30) = (char *)v8 + 28;
  *v8 = xmmword_191D41879;
  *(_OWORD *)((char *)v8 + 12) = *(__int128 *)((char *)&xmmword_191D41879 + 12);
  *((_QWORD *)this + 28) = v8;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  v9 = operator new(0x21uLL);
  v9[32] = 123;
  *(_OWORD *)v9 = xmmword_191D41895;
  *((_OWORD *)v9 + 1) = unk_191D418A5;
  *((_QWORD *)this + 31) = v9;
  *((_QWORD *)this + 32) = v9 + 33;
  *((_QWORD *)this + 33) = v9 + 33;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  v10 = (char *)operator new(0x1CuLL);
  *((_QWORD *)this + 34) = v10;
  *((_QWORD *)this + 35) = v10 + 28;
  *((_QWORD *)this + 36) = v10 + 28;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  v11 = operator new(1uLL);
  *v11 = 118;
  *((_QWORD *)this + 37) = v11;
  *((_QWORD *)this + 38) = v11 + 1;
  *((_QWORD *)this + 39) = v11 + 1;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  v12 = operator new(1uLL);
  *v12 = 118;
  *((_QWORD *)this + 40) = v12;
  *((_QWORD *)this + 41) = v12 + 1;
  *((_QWORD *)this + 42) = v12 + 1;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  v13 = operator new(1uLL);
  *((_QWORD *)this + 43) = v13;
  *v13++ = -122;
  *((_QWORD *)this + 44) = v13;
  *((_QWORD *)this + 45) = v13;
  *((_QWORD *)this + 46) = (char *)this + 376;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = (char *)this + 400;
  return this;
}

void sub_191C6267C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, uint64_t a11, _QWORD **a12, uint64_t a13, _QWORD **a14, uint64_t a15, _QWORD **a16)
{
  void **v16;
  _QWORD *v17;
  void **v18;
  void *v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  void *v24;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  v24 = v19;
  v17[41] = v24;
  operator delete(v24);
  v26 = (void *)v17[37];
  if (v26)
  {
    v17[38] = v26;
    operator delete(v26);
  }
  v27 = (void *)v17[34];
  if (v27)
  {
    v17[35] = v27;
    operator delete(v27);
  }
  v28 = *v22;
  if (*v22)
  {
    v17[32] = v28;
    operator delete(v28);
  }
  v29 = *v21;
  if (*v21)
  {
    v17[29] = v29;
    operator delete(v29);
  }
  v30 = *v20;
  if (*v20)
  {
    v17[26] = v30;
    operator delete(v30);
  }
  v31 = *v23;
  if (*v23)
  {
    v17[23] = v31;
    operator delete(v31);
  }
  v32 = *v18;
  if (*v18)
  {
    v17[20] = v32;
    operator delete(v32);
  }
  v33 = *v16;
  if (*v16)
  {
    v17[17] = v33;
    operator delete(v33);
  }
  v34 = *a9;
  if (*a9)
  {
    v17[14] = v34;
    operator delete(v34);
  }
  v35 = *a10;
  if (*a10)
  {
    v17[11] = v35;
    operator delete(v35);
  }
  std::__tree<std::__value_type<NLLanguageID,BloomFilter>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,BloomFilter>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,BloomFilter>>>::destroy(a11, *a12);
  std::__tree<std::__value_type<NLLanguageID,BloomFilter>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,BloomFilter>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,BloomFilter>>>::destroy(a13, *a14);
  std::__tree<std::__value_type<NLLanguageID,BloomFilter>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,BloomFilter>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,BloomFilter>>>::destroy(a15, *a16);
  _Unwind_Resume(a1);
}

void sub_191C627AC()
{
  JUMPOUT(0x191C62758);
}

void sub_191C627B4()
{
  JUMPOUT(0x191C6276CLL);
}

void sub_191C627BC()
{
  JUMPOUT(0x191C62780);
}

void CoreNLP::GazetteerWrapper::~GazetteerWrapper(CoreNLP::GazetteerWrapper *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &unk_1E2DF23E8;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<CoreNLP::Gazetteer>::operator()[abi:ne180100]((uint64_t)v2, v3);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &unk_1E2DF23E8;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<CoreNLP::Gazetteer>::operator()[abi:ne180100]((uint64_t)v2, v3);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
  JUMPOUT(0x19401E994);
}

void std::__tree<std::__value_type<std::string,BloomFilter>,std::__map_value_compare<std::string,std::__value_type<std::string,BloomFilter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BloomFilter>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,BloomFilter>,std::__map_value_compare<std::string,std::__value_type<std::string,BloomFilter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BloomFilter>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,BloomFilter>,std::__map_value_compare<std::string,std::__value_type<std::string,BloomFilter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BloomFilter>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,BloomFilter>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void nlp::CFScopedPtr<void *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFData const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFLocale const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t NLTaggerCreate(const __CFArray *a1, const __CFDictionary *a2)
{
  CoreNLP::TaggerManager *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (CoreNLP::TaggerManager *)operator new();
  CoreNLP::TaggerManager::TaggerManager(v4, a1, a2);
  std::shared_ptr<CoreNLP::TaggerManager>::shared_ptr[abi:ne180100]<CoreNLP::TaggerManager,void>(&v10, (uint64_t)v4);
  v5 = CoreNLP::createTaggerManagerWrapper(&v10);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_191C62994(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x191C6297CLL);
}

_QWORD *std::__hash_table<long,std::hash<long>,std::equal_to<long>,std::allocator<long>>::__emplace_unique_key_args<long,long>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<long,std::hash<long>,std::equal_to<long>,std::allocator<long>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_191C62CBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<long,std::hash<long>,std::equal_to<long>,std::allocator<long>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<long,std::hash<long>,std::equal_to<long>,std::allocator<long>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<long,std::hash<long>,std::equal_to<long>,std::allocator<long>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t ___ZN7CoreNLP24SingletonResourceManagerINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_12ReadOnlyFileIhEEE21getPersistentResourceERKS7_U13block_pointerFPS9_vE_block_invoke(uint64_t a1)
{
  uint64_t **v2;
  uint64_t result;
  __int128 *v4;
  uint64_t v5;
  __int128 *v6;

  if (CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<unsigned char>>::getPersistentCache(void)::onceToken != -1)
    dispatch_once(&CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<unsigned char>>::getPersistentCache(void)::onceToken, &__block_literal_global_10);
  v2 = (uint64_t **)CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<unsigned char>>::getPersistentCache(void)::cache;
  result = std::__tree<std::string>::find<std::string>(CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<unsigned char>>::getPersistentCache(void)::cache, *(const void ***)(a1 + 48));
  if (v2 + 1 == (uint64_t **)result)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    v4 = *(__int128 **)(a1 + 48);
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v6 = v4;
    result = (uint64_t)std::__tree<std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::__map_value_compare<std::string,std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MontrealNeuralNetworkTensor *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v2, (const void **)v4, (uint64_t)&std::piecewise_construct, &v6);
    *(_QWORD *)(result + 56) = v5;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_QWORD *)(result + 56);
  }
  return result;
}

void sub_191C62FC8(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 24) = 0;
  __cxa_end_catch();
  JUMPOUT(0x191C62F74);
}

uint64_t ___ZN7CoreNLP31ICUTextBreakWithCustomizedRulesC2ERKNS_13TaggerContextEPK7__CFURLbbU13block_pointerFv7CFRangeRbU13block_pointerFvP7NLTokenPbEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::string __p;

  if (*(_QWORD *)(a1 + 32))
  {
    if (*(char *)(a1 + 63) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
    else
      __p = *(std::string *)(a1 + 40);
  }
  else
  {
    CoreNLP::getFileSystemRepresentationFromBundleResource(CFSTR("tokruleLE.data"), &__p);
  }
  v1 = CoreNLP::ReadOnlyFile<unsigned char>::create((__int128 *)&__p, "r", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v1;
}

void sub_191C63074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::__map_value_compare<std::string,std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MontrealNeuralNetworkTensor *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::__map_value_compare<std::string,std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MontrealNeuralNetworkTensor *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void std::__tree<std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::__map_value_compare<std::string,std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MontrealNeuralNetworkTensor *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_QWORD *)v6 + 7) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_191C63200(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

CFURLRef CoreNLP::getFileSystemRepresentationFromBundleResource@<X0>(const __CFString *this@<X0>, _QWORD *a2@<X8>)
{
  __CFBundle *BundleWithIdentifier;
  CFURLRef result;
  const __CFURL *v7;
  UInt8 *v8;

  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.CoreNLP"));
  result = CFBundleCopyResourceURL(BundleWithIdentifier, this, 0, 0);
  if (result)
  {
    v7 = result;
    v8 = (UInt8 *)operator new[]();
    CFURLGetFileSystemRepresentation(v7, 1u, v8, 1024);
    CFRelease(v7);
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)v8);
    JUMPOUT(0x19401E970);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void sub_191C632D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E970](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::ReadOnlyFile<unsigned char>::create(__int128 *a1, char *a2, int a3)
{
  uint64_t v6;
  void *__p[2];
  char v9;

  v6 = operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  CoreNLP::ReadOnlyFile<unsigned char>::ReadOnlyFile(v6, a1, (const std::string::value_type *)__p, a3);
  if (v9 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_191C63380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x19401E994](v15, 0x1012C403EBA5055);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::ReadOnlyFile<unsigned char>::ReadOnlyFile(uint64_t a1, __int128 *a2, const std::string::value_type *a3, int a4)
{
  __int128 v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  const char *v12;
  int v13;
  const char *v14;
  int v15;
  int st_size;
  size_t v17;
  void *v18;
  void *v19;
  _QWORD *exception;
  _QWORD *v22;
  stat v23;
  uint64_t v24;
  int v25;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v8;
  }
  if (a3[23] < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 40) = v9;
  }
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = a4;
  if (a3[23] < 0)
  {
    v11 = *((_QWORD *)a3 + 1);
    if (v11 != 1 || **(_BYTE **)a3 != 114)
    {
      if (v11 != 2)
        goto LABEL_33;
      a3 = *(const std::string::value_type **)a3;
LABEL_15:
      if (*(_WORD *)a3 == 11122)
      {
        *(_DWORD *)(a1 + 64) = 514;
        if (*((char *)a2 + 23) >= 0)
          v12 = (const char *)a2;
        else
          v12 = *(const char **)a2;
        v13 = open(v12, 514, 384);
        goto LABEL_25;
      }
LABEL_33:
      exception = __cxa_allocate_exception(0x20uLL);
      CoreNLP::ReadOnlyFileCreationException::ReadOnlyFileCreationException(exception);
      goto LABEL_35;
    }
  }
  else
  {
    v10 = *((unsigned __int8 *)a3 + 23);
    if (v10 != 1)
    {
      if (v10 != 2)
        goto LABEL_33;
      goto LABEL_15;
    }
    if (*a3 != 114)
      goto LABEL_33;
  }
  *(_DWORD *)(a1 + 64) = 0;
  if (*((char *)a2 + 23) >= 0)
    v14 = (const char *)a2;
  else
    v14 = *(const char **)a2;
  v13 = open(v14, 0);
LABEL_25:
  v15 = v13;
  if (v13 < 0)
    goto LABEL_33;
  if (fstat(v13, &v23) < 0)
    goto LABEL_34;
  st_size = v23.st_size;
  *(_QWORD *)(a1 + 8) = v23.st_size;
  v24 = 0;
  v25 = st_size;
  fcntl(v15, 44, &v24);
  v17 = *(_QWORD *)(a1 + 8);
  if (!a4)
  {
    v19 = (void *)operator new[]();
    *(_QWORD *)a1 = v19;
    if ((read(v15, v19, *(_QWORD *)(a1 + 8)) & 0x8000000000000000) == 0)
      goto LABEL_32;
LABEL_34:
    close(v15);
    exception = __cxa_allocate_exception(0x20uLL);
    CoreNLP::ReadOnlyFileCreationException::ReadOnlyFileCreationException(exception);
LABEL_35:
  }
  if (v17)
  {
    v18 = mmap(0, v17, *(_DWORD *)(a1 + 64) & 2 | 1u, 1, v15, 0);
    if (v18 == (void *)-1)
    {
      close(v15);
      v22 = __cxa_allocate_exception(0x20uLL);
      CoreNLP::ReadOnlyFileCreationException::ReadOnlyFileCreationException(v22);
    }
    *(_QWORD *)a1 = v18;
  }
LABEL_32:
  close(v15);
  return a1;
}

void sub_191C63694(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  void **v3;
  void *v4;

  __cxa_free_exception(v4);
  if (*(char *)(v2 + 63) < 0)
    operator delete(*v3);
  if (*(char *)(v2 + 39) < 0)
    operator delete(*v1);
  _Unwind_Resume(a1);
}

CoreNLP::TaggingModelManager *CoreNLP::TaggingModelManager::TaggingModelManager(CoreNLP::TaggingModelManager *this)
{
  uint64_t i;
  uint64_t j;
  uint64_t v4;
  char *v6;
  const void *v7[3];
  int v8;
  _QWORD v9[3];
  int v10;
  _QWORD v11[3];
  int v12;
  _QWORD v13[3];
  int v14;
  _QWORD v15[3];
  int v16;
  _QWORD v17[3];
  int v18;
  _QWORD v19[3];
  int v20;
  _QWORD v21[3];
  int v22;
  _QWORD v23[3];
  int v24;
  _QWORD v25[3];
  int v26;
  _QWORD v27[3];
  int v28;
  _QWORD v29[3];
  int v30;
  _QWORD v31[3];
  int v32;
  _QWORD v33[3];
  int v34;
  _QWORD v35[3];
  int v36;
  _QWORD v37[3];
  int v38;
  _QWORD v39[3];
  int v40;
  _QWORD v41[3];
  int v42;
  _QWORD v43[3];
  int v44;
  _QWORD v45[3];
  int v46;
  _QWORD v47[3];
  int v48;
  _QWORD v49[3];
  int v50;
  _QWORD v51[3];
  int v52;
  _QWORD v53[3];
  int v54;
  _QWORD v55[3];
  int v56;
  _QWORD v57[3];
  int v58;
  _QWORD v59[3];
  int v60;
  _QWORD v61[3];
  int v62;
  _QWORD v63[3];
  int v64;
  _QWORD v65[3];
  int v66;
  _QWORD v67[3];
  int v68;
  _QWORD v69[3];
  int v70;
  _QWORD v71[3];
  int v72;
  _QWORD v73[3];
  int v74;
  _QWORD v75[3];
  int v76;
  _QWORD v77[3];
  int v78;
  _QWORD v79[3];
  int v80;
  _QWORD v81[3];
  int v82;
  _QWORD v83[3];
  int v84;
  _QWORD v85[3];
  int v86;
  _QWORD v87[3];
  int v88;
  _QWORD v89[3];
  int v90;
  _QWORD v91[3];
  int v92;
  _QWORD v93[3];
  int v94;
  _QWORD v95[3];
  int v96;
  _QWORD v97[3];
  int v98;
  _QWORD v99[3];
  int v100;
  _QWORD v101[3];
  int v102;
  _QWORD v103[3];
  int v104;
  _QWORD v105[3];
  int v106;
  _QWORD v107[3];
  int v108;
  _QWORD v109[3];
  int v110;
  _QWORD v111[3];
  int v112;
  _QWORD v113[3];
  int v114;
  _QWORD v115[3];
  int v116;
  _QWORD v117[3];
  int v118;
  _QWORD v119[3];
  int v120;
  _QWORD v121[3];
  int v122;
  _QWORD v123[3];
  int v124;
  _QWORD v125[3];
  int v126;
  _QWORD v127[3];
  int v128;
  _QWORD v129[3];
  int v130;
  _QWORD v131[3];
  int v132;
  _QWORD v133[3];
  int v134;
  _QWORD v135[3];
  int v136;
  _QWORD v137[3];
  int v138;
  _QWORD v139[3];
  int v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 3) = (char *)this + 32;
  *((_QWORD *)this + 5) = 0;
  CoreNLP::TaggingFeatureExtractor::TaggingFeatureExtractor((CoreNLP::TaggingModelManager *)((char *)this + 48));
  *((_QWORD *)this + 58) = (char *)this + 472;
  *((_QWORD *)this + 59) = 0;
  v6 = (char *)this + 472;
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 61) = (char *)this + 496;
  *((_QWORD *)this + 66) = 0;
  *((_QWORD *)this + 65) = 0;
  *((_QWORD *)this + 64) = (char *)this + 520;
  std::string::basic_string[abi:ne180100]<0>(v7, "PER");
  v8 = 67;
  std::string::basic_string[abi:ne180100]<0>(v9, "LOC");
  v10 = 68;
  std::string::basic_string[abi:ne180100]<0>(v11, "ORG");
  v12 = 69;
  std::string::basic_string[abi:ne180100]<0>(v13, "NONE");
  v14 = 70;
  std::map<std::string,int>::map[abi:ne180100]((uint64_t)this + 536, v7, 4);
  for (i = 0; i != -16; i -= 4)
  {
    if (SHIBYTE(v13[i + 2]) < 0)
      operator delete((void *)v13[i]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "B-PER");
  v8 = 92;
  std::string::basic_string[abi:ne180100]<0>(v9, "I-PER");
  v10 = 93;
  std::string::basic_string[abi:ne180100]<0>(v11, "B-LOC");
  v12 = 94;
  std::string::basic_string[abi:ne180100]<0>(v13, "I-LOC");
  v14 = 95;
  std::string::basic_string[abi:ne180100]<0>(v15, "B-ORG");
  v16 = 96;
  std::string::basic_string[abi:ne180100]<0>(v17, "I-ORG");
  v18 = 97;
  std::string::basic_string[abi:ne180100]<0>(v19, "O");
  v20 = 98;
  std::map<std::string,int>::map[abi:ne180100]((uint64_t)this + 560, v7, 7);
  for (j = 0; j != -28; j -= 4)
  {
    if (SHIBYTE(v19[j + 2]) < 0)
      operator delete((void *)v19[j]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "NONE");
  v8 = 0;
  std::string::basic_string[abi:ne180100]<0>(v9, "OTHER");
  v10 = 1;
  std::string::basic_string[abi:ne180100]<0>(v11, ".");
  v12 = 2;
  std::string::basic_string[abi:ne180100]<0>(v13, "?");
  v14 = 3;
  std::string::basic_string[abi:ne180100]<0>(v15, "!");
  v16 = 4;
  std::string::basic_string[abi:ne180100]<0>(v17, "“");
  v18 = 5;
  std::string::basic_string[abi:ne180100]<0>(v19, "”");
  v20 = 6;
  std::string::basic_string[abi:ne180100]<0>(v21, "(");
  v22 = 7;
  std::string::basic_string[abi:ne180100]<0>(v23, ")");
  v24 = 8;
  std::string::basic_string[abi:ne180100]<0>(v25, "-");
  v26 = 9;
  std::string::basic_string[abi:ne180100]<0>(v27, ",");
  v28 = 10;
  std::string::basic_string[abi:ne180100]<0>(v29, "--");
  v30 = 11;
  std::string::basic_string[abi:ne180100]<0>(v31, ":");
  v32 = 12;
  std::string::basic_string[abi:ne180100]<0>(v33, "SYM");
  v34 = 13;
  std::string::basic_string[abi:ne180100]<0>(v35, "ABB");
  v36 = 14;
  std::string::basic_string[abi:ne180100]<0>(v37, "ACK");
  v38 = 15;
  std::string::basic_string[abi:ne180100]<0>(v39, "CC");
  v40 = 16;
  std::string::basic_string[abi:ne180100]<0>(v41, "CD");
  v42 = 17;
  std::string::basic_string[abi:ne180100]<0>(v43, "CS");
  v44 = 18;
  std::string::basic_string[abi:ne180100]<0>(v45, "DT");
  v46 = 19;
  std::string::basic_string[abi:ne180100]<0>(v47, "DTO");
  v48 = 20;
  std::string::basic_string[abi:ne180100]<0>(v49, "DTP");
  v50 = 21;
  std::string::basic_string[abi:ne180100]<0>(v51, "DTW");
  v52 = 22;
  std::string::basic_string[abi:ne180100]<0>(v53, "EX");
  v54 = 23;
  std::string::basic_string[abi:ne180100]<0>(v55, "FW");
  v56 = 24;
  std::string::basic_string[abi:ne180100]<0>(v57, "IN");
  v58 = 25;
  std::string::basic_string[abi:ne180100]<0>(v59, "JJ");
  v60 = 26;
  std::string::basic_string[abi:ne180100]<0>(v61, "JJR");
  v62 = 27;
  std::string::basic_string[abi:ne180100]<0>(v63, "JJS");
  v64 = 28;
  std::string::basic_string[abi:ne180100]<0>(v65, "LS");
  v66 = 29;
  std::string::basic_string[abi:ne180100]<0>(v67, "NN");
  v68 = 30;
  std::string::basic_string[abi:ne180100]<0>(v69, "NNS");
  v70 = 31;
  std::string::basic_string[abi:ne180100]<0>(v71, "NNP");
  v72 = 32;
  std::string::basic_string[abi:ne180100]<0>(v73, "NNPS");
  v74 = 33;
  std::string::basic_string[abi:ne180100]<0>(v75, "PRE");
  v76 = 34;
  std::string::basic_string[abi:ne180100]<0>(v77, "PRP");
  v78 = 35;
  std::string::basic_string[abi:ne180100]<0>(v79, "PRPD");
  v80 = 36;
  std::string::basic_string[abi:ne180100]<0>(v81, "PRPR");
  v82 = 37;
  std::string::basic_string[abi:ne180100]<0>(v83, "PRPS");
  v84 = 38;
  std::string::basic_string[abi:ne180100]<0>(v85, "PRPT");
  v86 = 39;
  std::string::basic_string[abi:ne180100]<0>(v87, "RB");
  v88 = 40;
  std::string::basic_string[abi:ne180100]<0>(v89, "RBC");
  v90 = 41;
  std::string::basic_string[abi:ne180100]<0>(v91, "RBN");
  v92 = 42;
  std::string::basic_string[abi:ne180100]<0>(v93, "RBP");
  v94 = 43;
  std::string::basic_string[abi:ne180100]<0>(v95, "RBR");
  v96 = 44;
  std::string::basic_string[abi:ne180100]<0>(v97, "RBS");
  v98 = 45;
  std::string::basic_string[abi:ne180100]<0>(v99, "RBW");
  v100 = 46;
  std::string::basic_string[abi:ne180100]<0>(v101, "RP");
  v102 = 47;
  std::string::basic_string[abi:ne180100]<0>(v103, "RPP");
  v104 = 48;
  std::string::basic_string[abi:ne180100]<0>(v105, "TO");
  v106 = 49;
  std::string::basic_string[abi:ne180100]<0>(v107, "UH");
  v108 = 50;
  std::string::basic_string[abi:ne180100]<0>(v109, "URL");
  v110 = 51;
  std::string::basic_string[abi:ne180100]<0>(v111, "VB");
  v112 = 52;
  std::string::basic_string[abi:ne180100]<0>(v113, "VBC");
  v114 = 53;
  std::string::basic_string[abi:ne180100]<0>(v115, "VBD");
  v116 = 54;
  std::string::basic_string[abi:ne180100]<0>(v117, "VBF");
  v118 = 55;
  std::string::basic_string[abi:ne180100]<0>(v119, "VBG");
  v120 = 56;
  std::string::basic_string[abi:ne180100]<0>(v121, "VBI");
  v122 = 57;
  std::string::basic_string[abi:ne180100]<0>(v123, "VBM");
  v124 = 58;
  std::string::basic_string[abi:ne180100]<0>(v125, "VBN");
  v126 = 59;
  std::string::basic_string[abi:ne180100]<0>(v127, "VBP");
  v128 = 60;
  std::string::basic_string[abi:ne180100]<0>(v129, "VBR");
  v130 = 61;
  std::string::basic_string[abi:ne180100]<0>(v131, "VBS");
  v132 = 62;
  std::string::basic_string[abi:ne180100]<0>(v133, "VBT");
  v134 = 63;
  std::string::basic_string[abi:ne180100]<0>(v135, "VBZ");
  v136 = 64;
  std::string::basic_string[abi:ne180100]<0>(v137, "WP");
  v138 = 65;
  std::string::basic_string[abi:ne180100]<0>(v139, "WRB");
  v140 = 66;
  std::map<std::string,int>::map[abi:ne180100]((uint64_t)this + 584, v7, 67);
  v4 = 268;
  do
  {
    if (*((char *)&v6 + v4 * 8 + 7) < 0)
      operator delete((void *)v7[v4 - 4]);
    v4 -= 4;
  }
  while (v4 * 8);
  *((_DWORD *)this + 152) = 3;
  *((_QWORD *)this + 79) = 0;
  *((_QWORD *)this + 78) = 0;
  *((_QWORD *)this + 77) = (char *)this + 624;
  return this;
}

void sub_191C641A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD **a9)
{
  uint64_t v9;
  uint64_t v10;
  CoreNLP::TaggingFeatureExtractor *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD **v15;
  char **v16;
  uint64_t v18;

  v18 = 2144;
  while (1)
  {
    if (*(char *)(v14 + v18 - 9) < 0)
      operator delete(*(void **)(v14 + v18 - 32));
    v18 -= 32;
    if (!v18)
    {
      std::__tree<std::string>::destroy(v13, *(char **)(v9 + 568));
      std::__tree<std::string>::destroy(v12, *(char **)(v9 + 544));
      std::__tree<std::string>::destroy(v9 + 512, *v16);
      std::__tree<std::__value_type<NLLanguageID,std::map<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>>>>::destroy(v9 + 488, *v15);
      std::__tree<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,std::__map_value_compare<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,std::less<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>>,true>,std::allocator<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>>>::destroy(v9 + 464, *a9);
      CoreNLP::TaggingFeatureExtractor::~TaggingFeatureExtractor(v11);
      std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy(v10, *(_QWORD **)(v9 + 32));
      std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy(v9, *(_QWORD **)(v9 + 8));
      _Unwind_Resume(a1);
    }
  }
}

void sub_191C64364()
{
  JUMPOUT(0x191C642F4);
}

void sub_191C6436C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = 0;
  while (1)
  {
    if (*(char *)(v0 + v1 + 215) < 0)
      operator delete(*(void **)(v0 + v1 + 192));
    v1 -= 32;
    if (v1 == -224)
      JUMPOUT(0x191C64300);
  }
}

void sub_191C64398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void **v11;

  while (1)
  {
    if (*((char *)v11 - 9) < 0)
      operator delete(*(v11 - 4));
    v11 -= 4;
    if (v11 == (void **)&a11)
      JUMPOUT(0x191C64300);
  }
}

void sub_191C643D4()
{
  JUMPOUT(0x191C64300);
}

void sub_191C643DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = 0;
  while (1)
  {
    if (*(char *)(v0 + v1 + 119) < 0)
      operator delete(*(void **)(v0 + v1 + 96));
    v1 -= 32;
    if (v1 == -128)
      JUMPOUT(0x191C6430CLL);
  }
}

void sub_191C64408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void **v11;

  while (1)
  {
    if (*((char *)v11 - 9) < 0)
      operator delete(*(v11 - 4));
    v11 -= 4;
    if (v11 == (void **)&a11)
      JUMPOUT(0x191C6430CLL);
  }
}

void sub_191C64438()
{
  JUMPOUT(0x191C6430CLL);
}

void sub_191C64440()
{
  JUMPOUT(0x191C64344);
}

void __NLStringTokenizerDeallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  const void *v5;

  if (a1)
  {
    v2 = (_QWORD *)a1[6];
    if (v2)
      NLTokenizerRelease(v2);
    v3 = (_QWORD *)a1[14];
    if (v3)
      NLTokenizerRelease(v3);
    v4 = (const void *)a1[2];
    if (v4)
      CFRelease(v4);
    v5 = (const void *)a1[13];
    if (v5)
      CFRelease(v5);
  }
}

_QWORD *NLTokenizerRelease(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = *result;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    CoreNLP::TaggerContext::~TaggerContext((CoreNLP::TaggerContext *)(v1 + 1));
    JUMPOUT(0x19401E994);
  }
  return result;
}

void CoreNLP::TaggerContext::~TaggerContext(CoreNLP::TaggerContext *this)
{
  const void *v2;
  const void *v3;
  uint64_t v4;

  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 5);
  if (v3)
    CFRelease(v3);
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void CoreNLP::WordDispatchTagger::~WordDispatchTagger(CoreNLP::WordDispatchTagger *this)
{
  CoreNLP::WordDispatchTagger::~WordDispatchTagger(this);
  JUMPOUT(0x19401E994);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E2DF2610;
  v2 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  CoreNLP::StringBuffer::~StringBuffer((CoreNLP::WordDispatchTagger *)((char *)this + 168));
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  std::unique_ptr<CoreNLP::NLLangid>::reset[abi:ne180100]((CoreNLP::NLLangid **)this + 12, 0);
  std::__hash_table<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>>>::~__hash_table((uint64_t)this + 56);
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
}

uint64_t std::__hash_table<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = v2[3];
      v2[3] = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void CoreNLP::NLLangid::~NLLangid(CoreNLP::NLLangid *this)
{
  void *v2;
  uint64_t v3;

  if (*(_QWORD *)this)
    langid_dispose();
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  std::unique_ptr<CoreNLP::TaggerContext>::reset[abi:ne180100]((CoreNLP::TaggerContext **)this + 3, 0);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void CoreNLP::DefaultSubWordTagger::~DefaultSubWordTagger(CoreNLP::DefaultSubWordTagger *this)
{
  CoreNLP::DefaultSubWordTagger::~DefaultSubWordTagger(this);
  JUMPOUT(0x19401E994);
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E2DF2898;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<CoreNLP::EnglishCompoundWord>::reset[abi:ne180100]((CoreNLP::SubWordTagger **)this + 7, 0);
  std::unique_ptr<CoreNLP::EnglishCompoundWord>::reset[abi:ne180100]((CoreNLP::SubWordTagger **)this + 6, 0);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
}

void CoreNLP::ICUTextBreakWithBuiltInRules::~ICUTextBreakWithBuiltInRules(CoreNLP::ICUTextBreakWithBuiltInRules *this)
{
  CoreNLP::ICUTextBreakWithBuiltInRules::~ICUTextBreakWithBuiltInRules(this);
  JUMPOUT(0x19401E994);
}

{
  *(_QWORD *)this = &off_1E2DF2CD8;
  if (*((_QWORD *)this + 1))
    ubrk_close();
  CoreNLP::ICUTextBreak::~ICUTextBreak(this);
}

void CoreNLP::ICUTextBreak::~ICUTextBreak(CoreNLP::ICUTextBreak *this)
{
  const void *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E2DF1D00;
  v2 = (const void *)*((_QWORD *)this + 8);
  if (v2)
    CFRelease(v2);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void CoreNLP::StringBuffer::~StringBuffer(CoreNLP::StringBuffer *this)
{
  const void *v2;
  uint64_t v3;

  v2 = *(const void **)this;
  if (v2)
    CFRelease(v2);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void CoreNLP::ICUTextBreakWithCustomizedRules::~ICUTextBreakWithCustomizedRules(CoreNLP::ICUTextBreakWithCustomizedRules *this)
{
  CoreNLP::ICUTextBreakWithCustomizedRules::~ICUTextBreakWithCustomizedRules(this);
  JUMPOUT(0x19401E994);
}

{
  const void *v2;

  *(_QWORD *)this = &off_1E2DF2DA0;
  if (*((_QWORD *)this + 1))
    ubrk_close();
  v2 = (const void *)*((_QWORD *)this + 11);
  if (v2)
    _Block_release(v2);
  CoreNLP::ICUTextBreak::~ICUTextBreak(this);
}

void CoreNLP::SentenceTagger::~SentenceTagger(CoreNLP::SentenceTagger *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DF1FF8;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
  JUMPOUT(0x19401E994);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DF1FF8;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
}

void ___ZN7CoreNLP25convertLanguageIDWithCodeEPKc_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2[3];
  int v3;
  _QWORD v4[3];
  int v5;
  _QWORD v6[3];
  int v7;
  _QWORD v8[3];
  int v9;
  _QWORD v10[3];
  int v11;
  _QWORD v12[3];
  int v13;
  _QWORD v14[3];
  int v15;
  _QWORD v16[3];
  int v17;
  _QWORD v18[3];
  int v19;
  _QWORD v20[3];
  int v21;
  _QWORD v22[3];
  int v23;
  _QWORD v24[3];
  int v25;
  _QWORD v26[3];
  int v27;
  _QWORD v28[3];
  int v29;
  _QWORD v30[3];
  int v31;
  _QWORD v32[3];
  int v33;
  _QWORD v34[3];
  int v35;
  _QWORD v36[3];
  int v37;
  _QWORD v38[3];
  int v39;
  _QWORD v40[3];
  int v41;
  _QWORD v42[3];
  int v43;
  _QWORD v44[3];
  int v45;
  _QWORD v46[3];
  int v47;
  _QWORD v48[3];
  int v49;
  _QWORD v50[3];
  int v51;
  _QWORD v52[3];
  int v53;
  _QWORD v54[3];
  int v55;
  _QWORD v56[3];
  int v57;
  _QWORD v58[3];
  int v59;
  _QWORD v60[3];
  int v61;
  _QWORD v62[3];
  int v63;
  _QWORD v64[3];
  int v65;
  _QWORD v66[3];
  int v67;
  _QWORD v68[3];
  int v69;
  _QWORD v70[3];
  int v71;
  _QWORD v72[3];
  int v73;
  _QWORD v74[3];
  int v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  std::string::basic_string[abi:ne180100]<0>(v2, "ar");
  v3 = 2;
  std::string::basic_string[abi:ne180100]<0>(v4, "bg");
  v5 = 3;
  std::string::basic_string[abi:ne180100]<0>(v6, "zh");
  v7 = 4;
  std::string::basic_string[abi:ne180100]<0>(v8, "zh-Hans");
  v9 = 4;
  std::string::basic_string[abi:ne180100]<0>(v10, "zh-Hant");
  v11 = 5;
  std::string::basic_string[abi:ne180100]<0>(v12, "yue-Hant");
  v13 = 54;
  std::string::basic_string[abi:ne180100]<0>(v14, "cr");
  v15 = 6;
  std::string::basic_string[abi:ne180100]<0>(v16, "cz");
  v17 = 7;
  std::string::basic_string[abi:ne180100]<0>(v18, "da");
  v19 = 8;
  std::string::basic_string[abi:ne180100]<0>(v20, "nl");
  v21 = 9;
  std::string::basic_string[abi:ne180100]<0>(v22, "en");
  v23 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "fi");
  v25 = 11;
  std::string::basic_string[abi:ne180100]<0>(v26, "fr");
  v27 = 12;
  std::string::basic_string[abi:ne180100]<0>(v28, "de");
  v29 = 13;
  std::string::basic_string[abi:ne180100]<0>(v30, "gr");
  v31 = 14;
  std::string::basic_string[abi:ne180100]<0>(v32, "he");
  v33 = 15;
  std::string::basic_string[abi:ne180100]<0>(v34, "hi");
  v35 = 16;
  std::string::basic_string[abi:ne180100]<0>(v36, "hu");
  v37 = 17;
  std::string::basic_string[abi:ne180100]<0>(v38, "is");
  v39 = 18;
  std::string::basic_string[abi:ne180100]<0>(v40, "it");
  v41 = 19;
  std::string::basic_string[abi:ne180100]<0>(v42, "ja");
  v43 = 20;
  std::string::basic_string[abi:ne180100]<0>(v44, "ko");
  v45 = 21;
  std::string::basic_string[abi:ne180100]<0>(v46, "mr");
  v47 = 22;
  std::string::basic_string[abi:ne180100]<0>(v48, "nb");
  v49 = 23;
  std::string::basic_string[abi:ne180100]<0>(v50, "pl");
  v51 = 24;
  std::string::basic_string[abi:ne180100]<0>(v52, "pt");
  v53 = 25;
  std::string::basic_string[abi:ne180100]<0>(v54, "ro");
  v55 = 26;
  std::string::basic_string[abi:ne180100]<0>(v56, "ru");
  v57 = 27;
  std::string::basic_string[abi:ne180100]<0>(v58, "sl");
  v59 = 28;
  std::string::basic_string[abi:ne180100]<0>(v60, "es");
  v61 = 29;
  std::string::basic_string[abi:ne180100]<0>(v62, "sv");
  v63 = 30;
  std::string::basic_string[abi:ne180100]<0>(v64, "th");
  v65 = 31;
  std::string::basic_string[abi:ne180100]<0>(v66, "tr");
  v67 = 32;
  std::string::basic_string[abi:ne180100]<0>(v68, "uk");
  v69 = 33;
  std::string::basic_string[abi:ne180100]<0>(v70, "ur");
  v71 = 34;
  std::string::basic_string[abi:ne180100]<0>(v72, "vi");
  v73 = 55;
  std::string::basic_string[abi:ne180100]<0>(v74, "fa");
  v75 = 56;
  std::map<std::string,NLLanguageID>::map[abi:ne180100](v0, v2, 37);
  CoreNLP::convertLanguageIDWithCode(char const*)::codeToLangId = v0;
  v1 = 148;
  do
  {
    if (*((char *)&v2[v1 - 1] - 1) < 0)
      operator delete((void *)v2[v1 - 4]);
    v1 -= 4;
  }
  while (v1 * 8);
}

void sub_191C64E44(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 1184;
  while (1)
  {
    if (*(char *)(v2 + v4 - 9) < 0)
      operator delete(*(void **)(v2 + v4 - 32));
    v4 -= 32;
    if (!v4)
    {
      MEMORY[0x19401E994](v1, 0x1020C4062D53EE8);
      _Unwind_Resume(a1);
    }
  }
}

void sub_191C64F3C()
{
  JUMPOUT(0x191C64F1CLL);
}

uint64_t std::__tree<std::string>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

_QWORD *std::__tree<std::string>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,int> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::pair<std::string const,int> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::pair<std::string const,int> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_DWORD *)v6 + 14) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_191C65174(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

const void **std::__tree<std::string>::__find_equal<std::string>(_QWORD *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  const void **v9;
  const void **v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t *v16;
  BOOL v17;
  const void **v18;

  v9 = (const void **)(a1 + 1);
  if (a1 + 1 == a2 || std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (const void **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = (const void **)a2;
        return (const void **)a2;
      }
    }
    v11 = (const void **)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (const void **)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (const void **)v16[2];
        v17 = *v12 == v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5))
      goto LABEL_16;
    return (const void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (const void **)a2[1];
      do
      {
        v15 = v14;
        v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = (const void **)a2;
      do
      {
        v15 = (const void **)v18[2];
        v17 = *v15 == v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4))
        return (const void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  *a3 = (const void **)a2;
  *a4 = (uint64_t)a2;
  return (const void **)a4;
}

uint64_t NLStringTokenizerSetString(uint64_t result, CFStringRef str, CFRange range)
{
  return __NLSTSetStringAndLanguage(result, str, range);
}

uint64_t CoreNLP::CFFinalize(CoreNLP *this, const void *a2)
{
  return (**((uint64_t (***)(char *))this + 2))((char *)this + 16);
}

uint64_t _NLStringTokenizerSetStringWithOptionsAndLanguageID(uint64_t *a1, CFStringRef str, CFRange range, uint64_t a4)
{
  CFIndex length;
  CFIndex location;
  uint64_t v8;
  CFRange v10;

  length = range.length;
  location = range.location;
  if (a1[10] != a4)
  {
    a1[10] = a4;
    v8 = a1[8];
    if ((a4 & 8) != 0 && (v8 & 0x80000) != 0)
      a1[8] = v8 | 0x80000000;
    NLTokenizerSetOptions(a1[6]);
  }
  v10.location = location;
  v10.length = length;
  return __NLSTSetStringAndLanguage((uint64_t)a1, str, v10);
}

CoreNLP::CompositeTagger *CoreNLP::CompositeTagger::CompositeTagger(CoreNLP::CompositeTagger *this, CoreNLP::TaggerContext *a2, const __CFArray *a3, const __CFDictionary *a4)
{
  char *v6;
  CoreNLP::TaggerContext *v7;
  uint64_t v8;
  CFIndex Count;
  CFIndex i;
  const __CFString *ValueAtIndex;
  int v12;
  const __CFArray *Value;
  CFIndex v14;
  CFIndex j;
  const __CFDictionary *v16;
  const void *v17;
  const __CFString *v18;
  int v19;
  const __CFString *v20;
  int v21;
  const __CFString *v22;
  unint64_t v23;
  const __CFString *v24;
  unint64_t v25;
  unsigned __int8 v26;
  const __CFNumber *v27;
  const void *v28;
  uint64_t v29;
  CoreNLP::TaggerContext *v30;
  CoreNLP::LineBreakTagger *WordTagger;
  CoreNLP::LineBreakTagger *v32;
  CoreNLP::SentenceTagger *SentenceTagger;
  uint64_t v34;
  CoreNLP::LineBreakTagger **v36;
  void *v39[2];
  unsigned __int8 v40;
  void *__p[2];
  unsigned __int8 v42;
  int valuePtr;

  *(_QWORD *)this = &off_1E2DF2150;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = a2;
  v6 = (char *)this + 24;
  CoreNLP::TaggingModelManager::TaggingModelManager((CoreNLP::CompositeTagger *)((char *)this + 24));
  *((_QWORD *)this + 85) = 0;
  *((_QWORD *)this + 84) = 0;
  *((_QWORD *)this + 83) = (char *)this + 672;
  *((_QWORD *)this + 87) = 0;
  *((_QWORD *)this + 89) = 0;
  *((_QWORD *)this + 88) = 0;
  *((_QWORD *)this + 86) = (char *)this + 696;
  *((_DWORD *)this + 180) = 3;
  *((_BYTE *)this + 724) = 0;
  *((_QWORD *)this + 91) = 0;
  CoreNLP::NLAttributedToken::NLAttributedToken((CoreNLP::CompositeTagger *)((char *)this + 736));
  *((_QWORD *)this + 106) = (char *)this + 848;
  *((_QWORD *)this + 107) = (char *)this + 848;
  *((_QWORD *)this + 108) = 0;
  *((_QWORD *)this + 109) = (char *)this + 872;
  *((_QWORD *)this + 110) = (char *)this + 872;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  v36 = (CoreNLP::LineBreakTagger **)((char *)this + 944);
  *((_OWORD *)this + 59) = 0u;
  if (a4 && CFDictionaryGetValue(a4, kNLTaggerOptionLSTMLanguageIdentifierKey[0]) == (const void *)*MEMORY[0x1E0C9AE50])
  {
    *((_BYTE *)this + 724) = 1;
    if (!a3)
      goto LABEL_10;
  }
  else if (!a3)
  {
    goto LABEL_10;
  }
  Count = CFArrayGetCount(a3);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a3, i);
      valuePtr = 0;
      valuePtr = CoreNLP::CompositeTagger::schemeType(this, ValueAtIndex);
      if (!valuePtr)
      {
        valuePtr = *((_DWORD *)this + 176) + 100;
        v12 = valuePtr;
        CoreNLP::getUTF8StringFromCFString(ValueAtIndex, __p);
        v39[0] = __p;
        *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 86, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v39)+ 14) = v12;
        if ((char)v42 < 0)
          operator delete(__p[0]);
      }
      std::__tree<CoreNLP::NLTagSchemeType>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,CoreNLP::NLTagSchemeType const&>((uint64_t **)this + 83, &valuePtr, &valuePtr);
    }
  }
LABEL_10:
  *(_BYTE *)(*((_QWORD *)this + 2) + 33) = *((_BYTE *)this + 724);
  if (!a4)
    goto LABEL_34;
  if (CFDictionaryContainsKey(a4, kNLTaggerOptionCustomModelPropertyArrayKey[0]))
  {
    Value = (const __CFArray *)CFDictionaryGetValue(a4, kNLTaggerOptionCustomModelPropertyArrayKey[0]);
    v14 = CFArrayGetCount(Value);
    if (v14 >= 1)
    {
      for (j = 0; j != v14; ++j)
      {
        v16 = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, j);
        v17 = CFDictionaryGetValue(v16, kNLTaggerOptionCustomModelPropertyLanguageKey[0]);
        v19 = CoreNLP::languageIdForLanguage((uint64_t)v17, v18);
        v20 = (const __CFString *)CFDictionaryGetValue(v16, kNLTaggerOptionCustomModelPropertySchemeKey[0]);
        v21 = CoreNLP::CompositeTagger::schemeType(this, v20);
        v22 = (const __CFString *)CFDictionaryGetValue(v16, kNLTaggerOptionCustomModelPropertyModelPathKey[0]);
        CoreNLP::getUTF8StringFromCFString(v22, __p);
        v23 = v42;
        if ((v42 & 0x80u) != 0)
          v23 = (unint64_t)__p[1];
        if (v23)
          CoreNLP::TaggingModelManager::setCustomModelPath((uint64_t)v6, v19, v21, (uint64_t)__p);
        v24 = (const __CFString *)CFDictionaryGetValue(v16, kNLTaggerOptionCustomModelPropertyGazetteerPathKey[0]);
        CoreNLP::getUTF8StringFromCFString(v24, v39);
        v25 = v40;
        v26 = v40;
        if ((v40 & 0x80u) != 0)
          v25 = (unint64_t)v39[1];
        if (v25 && v21 == 7)
        {
          CoreNLP::TaggingModelManager::loadCustomGazetteer((uint64_t)v6, (const char *)v39);
          valuePtr = 0;
          if (CFDictionaryContainsKey(v16, kNLTaggerOptionCustomModelPropertyGazetteerMaxTokenSizeKey[0]))
          {
            v27 = (const __CFNumber *)CFDictionaryGetValue(v16, kNLTaggerOptionCustomModelPropertyGazetteerMaxTokenSizeKey[0]);
            CFNumberGetValue(v27, kCFNumberIntType, &valuePtr);
            CoreNLP::TaggingModelManager::setCustomGazetteerMaxTokenSize((uint64_t)v6, valuePtr);
          }
          v26 = v40;
        }
        if ((v26 & 0x80) != 0)
          operator delete(v39[0]);
        if ((char)v42 < 0)
          operator delete(__p[0]);
      }
    }
  }
  if (CFDictionaryContainsKey(a4, kNLTaggerOptionRetainStringKey[0]))
  {
    v28 = CFDictionaryGetValue(a4, kNLTaggerOptionRetainStringKey[0]);
    v29 = 0x10000;
    if (v28 == (const void *)*MEMORY[0x1E0C9AE50])
      v29 = 2147549184;
  }
  else
  {
LABEL_34:
    v29 = 0x10000;
  }
  *((_OWORD *)this + 46) = xmmword_191D40610;
  **((_QWORD **)this + 2) = v29;
  WordTagger = CoreNLP::WordTagger::createWordTagger(a2, v7);
  v32 = *v36;
  *v36 = WordTagger;
  if (v32)
    (*(void (**)(CoreNLP::LineBreakTagger *))(*(_QWORD *)v32 + 8))(v32);
  SentenceTagger = CoreNLP::SentenceTagger::createSentenceTagger((const __CFLocale **)a2, v30);
  v34 = *((_QWORD *)this + 119);
  *((_QWORD *)this + 119) = SentenceTagger;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  return this;
}

void sub_191C65818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CoreNLP::CompositeTagger::ParagraphCache *a10, char **a11, _QWORD **a12, CoreNLP::SmartTokenizer **a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  CoreNLP::TaggingModelManager *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = *(_QWORD *)(v30 + 952);
  *(_QWORD *)(v30 + 952) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *a14;
  *a14 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  CoreNLP::CompositeTagger::ParagraphCache::~ParagraphCache(a10);
  v35 = *(_QWORD *)(v30 + 728);
  *(_QWORD *)(v30 + 728) = 0;
  if (v35)
    MEMORY[0x19401E994](v35, 0x60C4044C4A2DFLL);
  std::__tree<std::string>::destroy(a17, *a11);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy(v31, *a12);
  CoreNLP::TaggingModelManager::~TaggingModelManager(v29);
  std::unique_ptr<CoreNLP::SmartTokenizer>::reset[abi:ne180100](a13, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<CoreNLP::NLTagSchemeType>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,CoreNLP::NLTagSchemeType const&>(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

double CoreNLP::NLAttributedToken::NLAttributedToken(CoreNLP::NLAttributedToken *this)
{
  double result;

  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)this = -1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = (char *)this + 32;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = (char *)this + 56;
  result = 0.0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_BYTE *)this + 104) = 0;
  *((_DWORD *)this + 27) = 1;
  return result;
}

_QWORD *CoreNLP::_CFInit_TaggerManagerWrapper(_QWORD *this, const void *a2)
{
  this[3] = 0;
  this[4] = 0;
  this[2] = &unk_1E2DF2958;
  return this;
}

uint64_t CoreNLP::createTaggerManagerWrapper(uint64_t *a1)
{
  unsigned __int8 v2;
  uint64_t Instance;

  CFAllocatorGetDefault();
  if ((v2 & 1) == 0
  {
    qword_1ECED80E0 = 0;
    unk_1ECED80F0 = 0u;
    unk_1ECED8100 = 0u;
    CoreNLP::_CFGetTypeID_TaggerManagerWrapper(void)::typeID = _CFRuntimeRegisterClass();
  }
  Instance = _CFRuntimeCreateInstance();
  std::shared_ptr<CoreNLP::NLModelTrainer>::operator=[abi:ne180100]((_QWORD *)(Instance + 24), a1);
  return Instance;
}

void sub_191C65AF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CoreNLP::CompositeTagger *CoreNLP::CompositeTagger::createCompositeTagger(CoreNLP::CompositeTagger *this, CoreNLP::TaggerContext *a2, const __CFArray *a3, const __CFDictionary *a4)
{
  CoreNLP::CompositeTagger *v7;

  v7 = (CoreNLP::CompositeTagger *)operator new();
  CoreNLP::CompositeTagger::CompositeTagger(v7, this, a2, a3);
  return v7;
}

void sub_191C65B68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10B3C405F109F14);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::CompositeTagger::schemeType(CoreNLP::CompositeTagger *this, CFStringRef theString1)
{
  unsigned int *v4;
  uint64_t v5;
  void *__p[2];
  char v8;

  if (!theString1)
    return 0;
  if (CFStringCompare(theString1, kNLTagSchemeTokenType[0], 0) == kCFCompareEqualTo)
    return 1;
  if (CFStringCompare(theString1, kNLTagSchemeNamedEntity[0], 0) == kCFCompareEqualTo
    || CFStringCompare(theString1, kNLTagSchemeNamedEntityOrLexicalClass[0], 0) == kCFCompareEqualTo)
  {
    return 7;
  }
  if (CFStringCompare(theString1, kNLTagSchemeLexicalClass[0], 0) == kCFCompareEqualTo
    || CFStringCompare(theString1, kNLTagSchemeInternalClass[0], 0) == kCFCompareEqualTo
    || CFStringCompare(theString1, kNLTagSchemeLemma[0], 0) == kCFCompareEqualTo)
  {
    return 6;
  }
  if (CFStringCompare(theString1, kNLTagSchemeLanguage[0], 0) == kCFCompareEqualTo)
    return 3;
  if (CFStringCompare(theString1, kNLTagSchemeScript[0], 0) == kCFCompareEqualTo)
    return 4;
  if (CFStringCompare(theString1, kNLTagSchemeSentiment[0], 0) == kCFCompareEqualTo)
    return 8;
  if (CFStringCompare(theString1, kNLTagSchemeTopic[0], 0) == kCFCompareEqualTo)
    return 9;
  if (CFStringCompare(theString1, kNLTagSchemeEmotion[0], 0) == kCFCompareEqualTo)
    return 12;
  CoreNLP::getUTF8StringFromCFString(theString1, __p);
  v4 = (unsigned int *)std::__tree<std::string>::find<std::string>((uint64_t)this + 688, (const void **)__p);
  if ((unsigned int *)((char *)this + 696) == v4)
    v5 = 0;
  else
    v5 = v4[14];
  if (v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_191C65D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CoreNLP::TaggerManager *CoreNLP::TaggerManager::TaggerManager(CoreNLP::TaggerManager *this, const __CFArray *a2, const __CFDictionary *a3)
{
  CoreNLP::CompositeTagger **v6;
  CoreNLP::CompositeTagger *v7;
  int v8;
  const __CFDictionary *v9;
  CoreNLP::CompositeTagger *CompositeTagger;
  CoreNLP::CompositeTagger *v11;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *((_QWORD *)this + 5) = 0;
  v6 = (CoreNLP::CompositeTagger **)((char *)this + 40);
  v7 = (CoreNLP::TaggerManager *)((char *)this + 64);
  *((_QWORD *)this + 6) = 0;
  *((_WORD *)this + 28) = 0;
  CoreNLP::TaggerContext::TaggerContext((CoreNLP::TaggerManager *)((char *)this + 64));
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 16) = -1;
  if (a3)
  {
    v8 = CFDictionaryGetValue(a3, kNLTaggerOptionLineBreakKey[0]) == (const void *)*MEMORY[0x1E0C9AE50];
    *((_BYTE *)this + 56) = v8;
    if (!a2)
      goto LABEL_10;
  }
  else
  {
    v8 = *((unsigned __int8 *)this + 56);
    if (!a2)
    {
LABEL_10:
      *((_BYTE *)this + 57) = 1;
      return this;
    }
  }
  if (v8 || !CFArrayGetCount(a2))
    goto LABEL_10;
  if (!*((_BYTE *)this + 57))
  {
    CompositeTagger = CoreNLP::CompositeTagger::createCompositeTagger(v7, a2, a3, v9);
    v11 = *v6;
    *v6 = CompositeTagger;
    if (v11)
      (*(void (**)(CoreNLP::CompositeTagger *))(*(_QWORD *)v11 + 8))(v11);
  }
  return this;
}

void sub_191C65E94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::__hash_table<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t NLStringTokenizerSetStringWithOptions(uint64_t *a1, CFStringRef str, CFRange range, uint64_t a4)
{
  return _NLStringTokenizerSetStringWithOptionsAndLanguageID(a1, str, range, a4);
}

uint64_t CoreNLP::SubWordTagger::enumerateSubTokensOfToken(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v6;
  _QWORD v7[3];

  v6 = 0;
  v4 = *(_QWORD *)(a2 + 8);
  v7[0] = 0;
  v7[1] = v4;
  v7[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *, char *))(a4 + 16))(a4, v7, &v6);
}

BOOL CoreNLP::SubWordTagger::enumerateCJKPersonNamesOfCurrentSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 v4;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  __int128 v12;
  __int128 v14;
  uint64_t v15;
  char v16;
  unint64_t *v17;
  char v18;

  v4 = 0;
  if (a4 && *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24))
  {
    v6 = *(_QWORD *)(a1 + 8);
    v18 = 0;
    v7 = (unint64_t *)(*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a4 + 88))(a4, &v18);
    v17 = v7;
    if (v7)
    {
      v8 = (uint64_t)v7;
      v16 = 0;
      if (!*v7)
      {
LABEL_8:
        v4 = v18 != 0;
        v17 = 0;
LABEL_11:
        std::default_delete<CoreNLP::NameRanges>::operator()[abi:ne180100]((uint64_t)&v17, v8);
        return v4;
      }
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = (__int128 *)(*(_QWORD *)(v8 + 8) + v9);
        v12 = *v11;
        v15 = *((_QWORD *)v11 + 2);
        v14 = v12;
        *(_QWORD *)&v14 = v12 + *(_QWORD *)(v6 + 16);
        (*(void (**)(uint64_t, __int128 *, char *))(a3 + 16))(a3, &v14, &v16);
        if (v16)
          break;
        ++v10;
        v8 = (uint64_t)v17;
        v9 += 24;
        if (v10 >= *v17)
          goto LABEL_8;
      }
      v8 = (uint64_t)v17;
      v4 = v18 != 0;
      v17 = 0;
      if (v8)
        goto LABEL_11;
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_191C66040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14;

  v14 = a13;
  a13 = 0;
  if (v14)
    std::default_delete<CoreNLP::NameRanges>::operator()[abi:ne180100]((uint64_t)&a13, v14);
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::SubWordTagger::getPartOfSpeechOfCurrentToken(CoreNLP::SubWordTagger *this)
{
  return 15;
}

uint64_t CoreNLP::SubWordTagger::isDefaultSubWordTagger(CoreNLP::SubWordTagger *this)
{
  return 0;
}

uint64_t CoreNLP::SubWordTagger::getCurrentICUTokenFlag(CoreNLP::SubWordTagger *this)
{
  return 0;
}

void std::default_delete<CoreNLP::NameRanges>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = *(_QWORD *)(a2 + 8);
    if (v2)
      MEMORY[0x19401E970](v2, 0x1000C80504FFAC1);
    JUMPOUT(0x19401E994);
  }
}

BOOL CoreNLP::isOpenQuote(CoreNLP *this)
{
  unsigned int v1;
  _BOOL4 v2;
  BOOL v3;
  int v4;

  v1 = (_DWORD)this - 8216;
  v2 = (_DWORD)this == 12317;
  if ((_DWORD)this == 171)
    v2 = 1;
  v3 = v1 > 6;
  v4 = (1 << v1) & 0x55;
  return !v3 && v4 != 0 || v2;
}

BOOL CoreNLP::isCloseQuote(CoreNLP *this)
{
  return ((_DWORD)this - 8217) <= 4 && ((1 << ((_BYTE)this - 25)) & 0x15) != 0
      || ((_DWORD)this - 12318) < 2
      || (_DWORD)this == 187;
}

BOOL CoreNLP::isOpenPunctuation(CoreNLP *this)
{
  if ((int)this <= 122)
  {
    if ((_DWORD)this != 40 && (_DWORD)this != 91)
      return CoreNLP::isOpenQuote(this);
    return 1;
  }
  if ((_DWORD)this == 123 || (_DWORD)this == 8261 || (_DWORD)this == 9001)
    return 1;
  return CoreNLP::isOpenQuote(this);
}

BOOL CoreNLP::isClosePunctuation(CoreNLP *this)
{
  if ((int)this <= 124)
  {
    if ((_DWORD)this != 41 && (_DWORD)this != 93)
      return CoreNLP::isCloseQuote(this);
    return 1;
  }
  if ((_DWORD)this == 125 || (_DWORD)this == 8262 || (_DWORD)this == 9002)
    return 1;
  return CoreNLP::isCloseQuote(this);
}

uint64_t CoreNLP::isFullstop(CoreNLP *this)
{
  int v1;
  uint64_t result;
  int v3;

  v1 = (int)this;
  result = 1;
  if (v1 > 5741)
  {
    if (v1 <= 65105)
    {
      if (v1 == 5742)
        return result;
      v3 = 12290;
    }
    else
    {
      if (v1 == 65106 || v1 == 65294)
        return result;
      v3 = 65377;
    }
  }
  else
  {
    if (v1 <= 1747)
    {
      if (v1 != 46 && v1 != 1417)
        return 0;
      return result;
    }
    if (v1 == 1748 || v1 == 2404)
      return result;
    v3 = 4962;
  }
  if (v1 != v3)
    return 0;
  return result;
}

uint64_t CoreNLP::isDash(CoreNLP *this)
{
  int v1;
  uint64_t result;

  v1 = (int)this;
  result = 1;
  if (v1 > 8721)
  {
    if (v1 != 8722 && v1 != 65123 && v1 != 65293)
      return 0;
  }
  else if ((v1 - 8208) >= 2 && v1 != 45)
  {
    return 0;
  }
  return result;
}

BOOL CoreNLP::isExclamation(CoreNLP *this)
{
  unsigned int v1;
  _BOOL4 v2;
  BOOL v3;
  int v4;

  v1 = (_DWORD)this - 8252;
  v2 = (_DWORD)this == 65281;
  if ((_DWORD)this == 33)
    v2 = 1;
  v3 = v1 > 0xD;
  v4 = (1 << v1) & 0x3003;
  return !v3 && v4 != 0 || v2;
}

uint64_t CoreNLP::isQuote(CoreNLP *this)
{
  int v1;
  uint64_t result;
  unsigned int v3;

  v1 = (int)this;
  result = 1;
  if (v1 <= 782)
  {
    if (v1 > 170)
    {
      if (v1 == 171 || v1 == 187 || v1 == 768)
        return result;
    }
    else
    {
      v3 = v1 - 34;
      if (v3 <= 0x3E && ((1 << v3) & 0x4000000000000021) != 0)
        return result;
    }
    return 0;
  }
  if (((v1 - 8216) > 0x22 || ((1 << (v1 - 24)) & 0x6000000FFLL) == 0)
    && (v1 - 12300) >= 4
    && v1 != 783)
  {
    return 0;
  }
  return result;
}

uint64_t CoreNLP::quoteStatusForToken(CFStringRef theString, const __CFString *a2, CFRange a3, CoreNLP::NLAttributedToken *a4, int *a5)
{
  const __CFString **length;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  const char *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  CFIndex v16;
  const __CFCharacterSet *Predefined;
  const __CFCharacterSet *v18;
  const __CFCharacterSet *v19;
  const __CFString *v20;
  int v21;
  int CharacterAtIndex;
  BOOL v23;
  int v24;
  CFIndex v25;
  UniChar v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  int IsCharacterMember;
  BOOL v33;

  if ((*(_BYTE *)(a3.length + 75) & 0x20) == 0)
    return 0;
  length = (const __CFString **)a3.length;
  v9 = *(_QWORD *)(a3.length + 8);
  if (v9 <= 1)
  {
    if (v9 == 1)
    {
      result = CFStringGetCharacterAtIndex(theString, *(_QWORD *)a3.length);
      if (!(_DWORD)result)
        return result;
      goto LABEL_6;
    }
    return 0;
  }
  LODWORD(result) = 34;
LABEL_6:
  v11 = 0;
  v12 = "\x02\x03\x01\x04\x01\x03\x01\x04";
  while (1)
  {
    v13 = CoreNLP::openingStrengthForQuoteCharacter(unsigned short,BOOL *)::singleQuotes[v11];
    v14 = v13 == (_DWORD)result;
    if (v13 == (_DWORD)result)
      break;
    if (CoreNLP::openingStrengthForQuoteCharacter(unsigned short,BOOL *)::doubleQuotes[v11] == (_DWORD)result)
    {
      v12 = "\x02\x03\x01\x03\x01\x04\x01\x04";
      break;
    }
    if (++v11 == 9)
    {
      v15 = 2;
      v14 = 1;
      goto LABEL_14;
    }
  }
  v15 = v12[v11];
LABEL_14:
  v16 = CFStringGetLength(theString);
  Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
  v18 = CFCharacterSetGetPredefined(kCFCharacterSetAlphaNumeric);
  v19 = CFCharacterSetCreateWithCharactersInString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("([{</@-=–—"));
  if (v15 > 3)
    goto LABEL_17;
  if (!v15)
  {
    v21 = 6;
    goto LABEL_19;
  }
  v20 = *length;
  if (*length == a2)
  {
LABEL_17:
    v21 = 5;
    goto LABEL_19;
  }
  if ((uint64_t)v20 <= (uint64_t)a2)
  {
    CharacterAtIndex = 0;
  }
  else
  {
    CharacterAtIndex = CFStringGetCharacterAtIndex(theString, (CFIndex)&v20[-1].length + 7);
    if (CharacterAtIndex)
    {
      v23 = CFCharacterSetIsCharacterMember(Predefined, CharacterAtIndex) != 0;
      goto LABEL_28;
    }
  }
  v23 = 1;
LABEL_28:
  v33 = v23;
  IsCharacterMember = CFCharacterSetIsCharacterMember(v19, CharacterAtIndex);
  v24 = CFCharacterSetIsCharacterMember(v18, CharacterAtIndex);
  v25 = (CFIndex)*length + (_QWORD)length[1];
  if (v25 >= v16)
    v26 = 0;
  else
    v26 = CFStringGetCharacterAtIndex(theString, v25);
  v27 = CFCharacterSetIsCharacterMember(v18, v26);
  if (v14)
  {
    if (v24 && v27)
    {
      v21 = 13;
      goto LABEL_19;
    }
    if (v15 == 2)
    {
      if (CharacterAtIndex == 34)
        v31 = 5;
      else
        v31 = 6;
      if (IsCharacterMember)
        v31 = 5;
      if (v33)
        v21 = 5;
      else
        v21 = v31;
      goto LABEL_19;
    }
    if (v15 == 3)
    {
      v28 = v24 == 0 || v27 != 0;
LABEL_43:
      if (v28)
        v21 = 5;
      else
        v21 = 6;
      goto LABEL_19;
    }
    v30 = v27 == 0 || v24 != 0;
  }
  else
  {
    if (v15 == 2)
    {
      v21 = 5;
      if (!v33)
      {
        if (CharacterAtIndex == 39)
          v29 = 5;
        else
          v29 = 6;
        if (IsCharacterMember)
          v21 = 5;
        else
          v21 = v29;
      }
      goto LABEL_19;
    }
    if (v15 == 3)
    {
      if (v27)
        v28 = 1;
      else
        v28 = v24 == 0;
      goto LABEL_43;
    }
    if (v24)
      v30 = 1;
    else
      v30 = v27 == 0;
  }
  if (v30)
    v21 = 6;
  else
    v21 = 5;
LABEL_19:
  CFRelease(v19);
  if (a4)
    *(_DWORD *)a4 = v21;
  return 1;
}

uint64_t CoreNLP::toLowerLatin(uint64_t this)
{
  if ((this - 216) < 7
    || (unsigned __int16)(this - 65) < 0x1Au
    || (unsigned __int16)(this - 192) <= 0x16u)
  {
    LOWORD(this) = this + 32;
  }
  else if ((_DWORD)this == 376)
  {
    LOWORD(this) = 255;
  }
  else if ((this & 1) != 0)
  {
    if ((this - 313) < 0xF || (this - 377) < 5 || (this - 461) < 0xF)
      LOWORD(this) = this + 1;
  }
  else if ((this - 256) < 0x37
         || (unsigned __int16)(this - 330) < 0x2Du
         || (vmaxv_u16(vcgt_u16((uint16x4_t)0x9001100270011, (uint16x4_t)vadd_s16(vdup_n_s16(this), (int16x4_t)0xFDBAFDDEFE08FE22))) & 1) != 0|| (_DWORD)this == 500)
  {
    LOWORD(this) = this + 1;
  }
  return (unsigned __int16)this;
}

uint64_t CoreNLP::convertCharactersToUTF8(uint64_t a1, int a2, std::string *this, int a4)
{
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  }
  if (a2 >= 1)
  {
    v8 = 0;
    while (1)
    {
      v9 = *(unsigned __int16 *)(a1 + 2 * v8);
      v10 = v8 + 1;
      if (v9 >> 10 != 54 || (int)v10 >= a2)
        break;
      v13 = *(unsigned __int16 *)(a1 + 2 * v10);
      if (v13 >> 10 != 55)
        break;
      v14 = v13 + (v9 << 10) - 56613888;
      std::string::push_back(this, (v14 >> 18) - 16);
      std::string::push_back(this, (v14 >> 12) & 0x3F | 0x80);
      std::string::push_back(this, (v14 >> 6) & 0x3F | 0x80);
      LOBYTE(v9) = v13 & 0x3F | 0x80;
LABEL_29:
      std::string::push_back(this, v9);
      v8 = v10 + 1;
      if ((int)v10 + 1 >= a2)
        return 0;
    }
    if (a4)
    {
      if (v9 >> 2 == 2054)
      {
        LOBYTE(v9) = 39;
LABEL_28:
        LODWORD(v10) = v8;
        goto LABEL_29;
      }
      if ((v9 & 0xFFFFFF7F) == 0x3F)
      {
        LOBYTE(v9) = 63;
        goto LABEL_28;
      }
      if ((v9 & 0xFFFFFF7F) == 0x21)
      {
        LOBYTE(v9) = 33;
        goto LABEL_28;
      }
      if (v9 <= 0x7F)
        goto LABEL_28;
      if (v9 <= 0x7FF)
      {
        LOBYTE(v12) = (v9 >> 6) - 64;
        goto LABEL_27;
      }
    }
    else
    {
      if (v9 <= 0x7F)
        goto LABEL_28;
      if (v9 <= 0x7FF)
      {
        LOBYTE(v12) = (v9 >> 6) - 64;
LABEL_27:
        std::string::push_back(this, v12);
        LOBYTE(v9) = v9 & 0x3F | 0x80;
        goto LABEL_28;
      }
    }
    std::string::push_back(this, (v9 >> 12) | 0xE0);
    v12 = (v9 >> 6) & 0x3F | 0xFFFFFF80;
    goto LABEL_27;
  }
  return 0;
}

uint64_t CoreNLP::extractTokenExtendedAttributes(uint64_t this, const __CFString *a2, CoreNLP::NLAttributedToken *a3)
{
  const __CFString *v4;
  int64_t isa;
  uint64_t info;
  const __CFCharacterSet *v7;
  uint64_t v8;
  CoreNLP *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  CoreNLP *CharacterAtIndex;
  uint64_t v16;
  BOOL v17;
  char v18;
  int v19;
  int v20;
  int isQuote;
  BOOL v22;
  int v23;
  int v24;
  _BOOL4 isOpenPunctuation;
  _BOOL4 isExclamation;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  int v38;
  char v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t data;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  const __CFCharacterSet *v55;
  const __CFCharacterSet *Predefined;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int isDash;
  int isFullstop;
  int isClosePunctuation;
  char v66;
  const __CFCharacterSet *v67;
  char v68;
  char v69;
  int v70;
  char v71;
  int v72;
  int v73;
  int v74;
  int v75;
  char v76;
  uint64_t v77;
  const __CFCharacterSet *theSet;
  int v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  const __CFCharacterSet *v85;
  int v86;
  _DWORD *v87[2];

  if (!this)
    return this;
  if (!a2)
    return this;
  v4 = (const __CFString *)this;
  isa = (int64_t)a2->isa;
  info = a2->info;
  this = CFStringGetLength((CFStringRef)this);
  if (isa == -1 || isa < 0 || info + isa > this)
    return this;
  Predefined = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
  theSet = CFCharacterSetGetPredefined(kCFCharacterSetAlphaNumeric);
  v85 = CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
  v7 = CFCharacterSetGetPredefined(kCFCharacterSetNewline);
  v67 = CFCharacterSetGetPredefined(kCFCharacterSetUppercaseLetter);
  this = (uint64_t)CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
  v55 = (const __CFCharacterSet *)this;
  v8 = a2->info;
  if (v8 >= 1)
  {
    v9 = 0;
    v10 = 0;
    v74 = 0;
    v75 = 0;
    v11 = 0;
    v72 = 0;
    v82 = 0;
    v73 = 0;
    v81 = 0;
    v70 = 0;
    v84 = 0;
    v12 = 0;
    v13 = 0;
    v79 = 0;
    v57 = 0;
    v83 = 0;
    v77 = 0;
    v71 = 0;
    v80 = 0;
    v68 = 0;
    v69 = 0;
    v76 = 0;
    v66 = 0;
    v14 = a2->isa;
    while (1)
    {
      CharacterAtIndex = (CoreNLP *)CFStringGetCharacterAtIndex(v4, (CFIndex)v14 + v10);
      this = CFCharacterSetIsCharacterMember(v7, (UniChar)CharacterAtIndex);
      if ((_DWORD)this)
        break;
      this = CFCharacterSetIsCharacterMember(v85, (UniChar)CharacterAtIndex);
      if ((_DWORD)this)
      {
        v13 = (v13 + 1);
        goto LABEL_12;
      }
      if (!CFCharacterSetIsCharacterMember(theSet, (UniChar)CharacterAtIndex))
      {
        v59 = v13;
        v62 = v11;
        v19 = HIDWORD(v77);
        if ((_WORD)v9)
          v20 = (unsigned __int16)v9 == (_DWORD)CharacterAtIndex;
        else
          v20 = HIDWORD(v77);
        isQuote = CoreNLP::isQuote(CharacterAtIndex);
        if (isQuote)
          v19 = v20;
        HIDWORD(v77) = v19;
        v22 = (_DWORD)CharacterAtIndex == 39 || CharacterAtIndex >> 1 == 4108;
        v23 = v22;
        v54 = v23;
        v24 = v81;
        if (v22)
          v24 = v81 + 1;
        isOpenPunctuation = CoreNLP::isOpenPunctuation(CharacterAtIndex);
        isClosePunctuation = CoreNLP::isClosePunctuation(CharacterAtIndex);
        isFullstop = CoreNLP::isFullstop(CharacterAtIndex);
        isDash = CoreNLP::isDash(CharacterAtIndex);
        isExclamation = CoreNLP::isExclamation(CharacterAtIndex);
        v60 = v12;
        LODWORD(v81) = v24;
        v61 = isOpenPunctuation;
        v58 = isQuote;
        if ((int)CharacterAtIndex <= 11821)
        {
          v27 = v59;
          if ((_DWORD)CharacterAtIndex != 63)
          {
            v28 = isQuote;
            v29 = 8263;
            goto LABEL_42;
          }
          goto LABEL_43;
        }
        v27 = v59;
        if ((_DWORD)CharacterAtIndex == 11822)
          goto LABEL_43;
        v28 = isQuote;
        v29 = 65311;
LABEL_42:
        if ((_DWORD)CharacterAtIndex == v29)
        {
LABEL_43:
          v30 = isExclamation;
          ++v70;
          v31 = 1;
        }
        else
        {
          v30 = isExclamation;
          v31 = isExclamation | isDash | isFullstop | isClosePunctuation | v28 | v54 | isOpenPunctuation;
        }
        v32 = (_DWORD)CharacterAtIndex == 58 || (_DWORD)CharacterAtIndex == 65306;
        v33 = v32;
        v34 = HIDWORD(v82);
        if (v32)
          v34 = HIDWORD(v82) + 1;
        HIDWORD(v82) = v34;
        this = CFCharacterSetIsCharacterMember(Predefined, (UniChar)CharacterAtIndex);
        if ((_DWORD)this)
          v35 = 1;
        else
          v35 = v33;
        v36 = (_DWORD)CharacterAtIndex == 44 || (_DWORD)CharacterAtIndex == 65292;
        v37 = v82;
        if (v36)
        {
          v37 = v82 + 1;
          v35 = 1;
        }
        v38 = v35 | v31;
        LODWORD(v82) = v37;
        if (v38 == 1)
          v71 |= v10 == a2->info - 1;
        v13 = v27;
        v12 = v60;
        v73 += v58;
        v75 += v61;
        v72 += isClosePunctuation;
        HIDWORD(v83) += isFullstop;
        v84 += isDash;
        HIDWORD(v81) += v30;
        if (v10)
          v39 = 0;
        else
          v39 = v38;
        v80 |= v39;
        v11 = v62 + (v38 ^ 1);
        v74 += v38;
        goto LABEL_13;
      }
      this = CFCharacterSetIsCharacterMember(v67, (UniChar)CharacterAtIndex);
      if ((_DWORD)this)
      {
        if (v10)
        {
          v16 = a2->info - 1;
          v22 = v10 == v16;
          v17 = v10 != v16;
          v18 = v22;
          v76 |= v17;
          LOBYTE(v77) = v18 | v77;
        }
        else
        {
          v66 = 1;
        }
        LODWORD(v83) = v83 + 1;
LABEL_68:
        ++v79;
        goto LABEL_13;
      }
      this = CFCharacterSetIsCharacterMember(v55, (UniChar)CharacterAtIndex);
      if (!(_DWORD)this)
        goto LABEL_68;
      v68 |= v10 == 0;
      v69 |= v10 == a2->info - 1;
      ++v57;
LABEL_13:
      ++v10;
      v8 = a2->info;
      v9 = CharacterAtIndex;
      if ((uint64_t)v14 + v10 >= (uint64_t)a2->isa + v8)
      {
        v40 = v57;
        v41 = v79;
        v43 = v73;
        v42 = v74;
        v44 = v72;
        v45 = v75;
        v46 = v70;
        goto LABEL_71;
      }
    }
    v12 = (v12 + 1);
LABEL_12:
    CharacterAtIndex = v9;
    goto LABEL_13;
  }
  v66 = 0;
  v77 = 0;
  v76 = 0;
  v68 = 0;
  v69 = 0;
  v80 = 0;
  v71 = 0;
  v83 = 0;
  v40 = 0;
  v41 = 0;
  LODWORD(v13) = 0;
  LODWORD(v12) = 0;
  v84 = 0;
  v81 = 0;
  v46 = 0;
  v43 = 0;
  v82 = 0;
  v45 = 0;
  v44 = 0;
  v11 = 0;
  v42 = 0;
LABEL_71:
  if (v8 == v41)
    a2[2].info |= 0x40000uLL;
  if (v41)
    a2[2].info |= 8uLL;
  if (v8 == (int)v83)
    a2[2].info |= 0x400uLL;
  if ((v66 & 1) != 0)
    a2[2].info |= 0x800uLL;
  if ((v76 & 1) != 0)
    a2[2].info |= 0x1000uLL;
  if ((v77 & 1) != 0)
    a2[2].info |= 0x2000uLL;
  if (v8 == v40)
    a2[2].info |= 0x80000uLL;
  if (v40)
    a2[2].info |= 0x10uLL;
  if ((v68 & 1) != 0)
    a2[2].info |= 0x4000uLL;
  if ((v69 & 1) != 0)
    a2[2].info |= 0x8000uLL;
  if (v8 == v42)
    a2[2].info |= 0x400000uLL;
  if (v42)
    a2[2].info |= 0x40uLL;
  if ((v80 & 1) != 0)
    a2[2].info |= 0x10000uLL;
  if ((v71 & 1) != 0)
    a2[2].info |= 0x20000uLL;
  if (v8 == (int)v13)
    a2[2].info |= 0x100000uLL;
  if ((_DWORD)v13)
    a2[2].info |= 0x20uLL;
  if (v8 == (int)v12)
    a2[2].info |= 0x200000uLL;
  if (v8 == SHIDWORD(v83))
    a2[2].info |= 0x2000000uLL;
  if ((_DWORD)v81)
    a2[2].info |= 0x80uLL;
  if (HIDWORD(v83))
    a2[2].info |= 0x100uLL;
  if (v84)
    a2[2].info |= 0x200uLL;
  if (v8 == v45)
    a2[2].info |= 0x800000uLL;
  if (v8 == v44)
    a2[2].info |= 0x1000000uLL;
  if (v8 == v43)
  {
    v47 = a2[2].info;
    a2[2].info = v47 | 0x20000000;
    if ((v77 & 0x100000000) != 0)
      a2[2].info = v47 | 0x30000000;
  }
  if (HIDWORD(v81) && v8 == v46 + HIDWORD(v81))
  {
    a2[2].info |= 0x8000000uLL;
    v86 = 1;
    v87[0] = &v86;
    this = (uint64_t)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)&a2->length, &v86, (uint64_t)&std::piecewise_construct, v87);
    v48 = 4;
  }
  else
  {
    if (!v46)
      goto LABEL_126;
    a2[2].info |= 0x4000000uLL;
    v86 = 1;
    v87[0] = &v86;
    this = (uint64_t)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)&a2->length, &v86, (uint64_t)&std::piecewise_construct, v87);
    v48 = 3;
  }
  *(_DWORD *)(this + 40) = v48;
LABEL_126:
  v49 = a2[2].info;
  if ((v49 & 0x10) != 0)
  {
    data = (uint64_t)a2->data | 8;
    goto LABEL_130;
  }
  if ((v49 & 0x60) != 0)
  {
    data = (uint64_t)a2->data;
LABEL_130:
    a2->data = (char *)(data | 0x20);
  }
  if ((v49 & 0x1800) != 0)
    a2[2].info = v49;
  if ((v49 & 0x40) != 0)
    a2->data = (char *)((unint64_t)a2->data | 0x10);
  if ((v49 & 0x400000) != 0)
    a2->data = (char *)((unint64_t)a2->data | 0x400);
  v51 = v49 >> 20;
  v52 = a2->info;
  a2->data = (char *)((unint64_t)a2->data & 0xFFFFFFFFFFFFF7FFLL | ((v51 & 1) << 11));
  if ((_DWORD)v82 && v52 == 1)
  {
    v86 = 1;
    v87[0] = &v86;
    this = (uint64_t)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)&a2->length, &v86, (uint64_t)&std::piecewise_construct, v87);
    *(_DWORD *)(this + 40) = 10;
    v52 = a2->info;
  }
  if (HIDWORD(v82) && v52 == 1)
  {
    v86 = 1;
    v87[0] = &v86;
    this = (uint64_t)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)&a2->length, &v86, (uint64_t)&std::piecewise_construct, v87);
    *(_DWORD *)(this + 40) = 12;
    v52 = a2->info;
  }
  if (v52 == v84)
  {
    v86 = 1;
    v87[0] = &v86;
    this = (uint64_t)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)&a2->length, &v86, (uint64_t)&std::piecewise_construct, v87);
    *(_DWORD *)(this + 40) = 11;
  }
  if (v45 && !v43)
  {
    v86 = 1;
    v87[0] = &v86;
    this = (uint64_t)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)&a2->length, &v86, (uint64_t)&std::piecewise_construct, v87);
    *(_DWORD *)(this + 40) = 7;
  }
  if (v44 && !v43)
  {
    v86 = 1;
    v87[0] = &v86;
    this = (uint64_t)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)&a2->length, &v86, (uint64_t)&std::piecewise_construct, v87);
    *(_DWORD *)(this + 40) = 8;
  }
  if (v42)
  {
    v86 = 1;
    v87[0] = &v86;
    this = (uint64_t)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)&a2->length, &v86, (uint64_t)&std::piecewise_construct, v87);
    if (!*(_DWORD *)(this + 40))
    {
      v86 = 1;
      v87[0] = &v86;
      this = (uint64_t)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)&a2->length, &v86, (uint64_t)&std::piecewise_construct, v87);
      *(_DWORD *)(this + 40) = 13;
    }
  }
  v53 = a2->info;
  if (v53 == (int)v13)
  {
    v86 = 1;
    v87[0] = &v86;
    this = (uint64_t)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)&a2->length, &v86, (uint64_t)&std::piecewise_construct, v87);
    *(_DWORD *)(this + 40) = 89;
    v53 = a2->info;
  }
  if (v53 == (int)v12)
  {
    v86 = 1;
    v87[0] = &v86;
    this = (uint64_t)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)&a2->length, &v86, (uint64_t)&std::piecewise_construct, v87);
    *(_DWORD *)(this + 40) = 90;
  }
  if (v41 | v40)
  {
    v86 = 1;
    v87[0] = &v86;
    this = (uint64_t)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)&a2->length, &v86, (uint64_t)&std::piecewise_construct, v87);
    *(_DWORD *)(this + 40) = 91;
  }
  if (v11)
  {
    v86 = 1;
    v87[0] = &v86;
    this = (uint64_t)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)&a2->length, &v86, (uint64_t)&std::piecewise_construct, v87);
    *(_DWORD *)(this + 40) = 88;
  }
  return this;
}

BOOL CoreNLP::isTerminator(CoreNLP *this, CoreNLP::NLAttributedToken *a2)
{
  return (*((_BYTE *)this + 75) & 0xE) != 0;
}

BOOL CoreNLP::isPunctuationOrWhitespace(CoreNLP *this, CoreNLP::NLAttributedToken *a2)
{
  return (*((_BYTE *)this + 74) & 0x70) != 0;
}

BOOL CoreNLP::isWhitespaceOrNewline(CoreNLP *this, CoreNLP::NLAttributedToken *a2)
{
  return (*((_DWORD *)this + 18) & 0x300002) != 0;
}

uint64_t CoreNLP::languageIdForLanguage(uint64_t this, const __CFString *a2)
{
  const __CFString *v2;

  if (this)
  {
    v2 = (const __CFString *)this;
    if (CFStringHasPrefix((CFStringRef)this, CFSTR("en")))
    {
      return 10;
    }
    else if (CFStringHasPrefix(v2, CFSTR("fr")))
    {
      return 12;
    }
    else if (CFStringHasPrefix(v2, CFSTR("de")))
    {
      return 13;
    }
    else if (CFStringHasPrefix(v2, CFSTR("it")))
    {
      return 19;
    }
    else if (CFStringHasPrefix(v2, CFSTR("es")))
    {
      return 29;
    }
    else if (CFStringHasPrefix(v2, CFSTR("pt")))
    {
      return 25;
    }
    else if (CFStringHasPrefix(v2, CFSTR("nl")))
    {
      return 9;
    }
    else if (CFStringHasPrefix(v2, CFSTR("sv")))
    {
      return 30;
    }
    else if (CFStringHasPrefix(v2, CFSTR("tr")))
    {
      return 32;
    }
    else if (CFStringHasPrefix(v2, CFSTR("ru")))
    {
      return 27;
    }
    else
    {
      return 4 * (CFStringHasPrefix(v2, CFSTR("zh-Hans")) != 0);
    }
  }
  return this;
}

uint64_t CoreNLP::scriptIdForScript(const __CFString *this, const __CFString *a2)
{
  if (CFStringHasPrefix(this, CFSTR("Arab")))
    return 0;
  if (CFStringHasPrefix(this, CFSTR("Cyrl")))
    return 1;
  if (CFStringHasPrefix(this, CFSTR("Deva")))
    return 2;
  if (CFStringHasPrefix(this, CFSTR("Hans")))
    return 3;
  if (CFStringHasPrefix(this, CFSTR("Latn")))
    return 4;
  if (CFStringHasPrefix(this, CFSTR("Hebr")))
    return 5;
  if (CFStringHasPrefix(this, CFSTR("Grek")))
    return 6;
  if (CFStringHasPrefix(this, CFSTR("Thai")))
    return 7;
  if (CFStringHasPrefix(this, CFSTR("Kore")))
    return 8;
  return 28;
}

CFLocaleRef CoreNLP::copyLocaleForLanguageID(int a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;

  if (CoreNLP::copyLocaleForLanguageID(NLLanguageID)::onceToken != -1)
    dispatch_once(&CoreNLP::copyLocaleForLanguageID(NLLanguageID)::onceToken, &__block_literal_global_45);
  v2 = *(_QWORD *)(CoreNLP::copyLocaleForLanguageID(NLLanguageID)::languageLocaleIdentifierMap + 8);
  if (!v2)
    return 0;
  v3 = CoreNLP::copyLocaleForLanguageID(NLLanguageID)::languageLocaleIdentifierMap + 8;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a1;
    if (v4 >= a1)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 != CoreNLP::copyLocaleForLanguageID(NLLanguageID)::languageLocaleIdentifierMap + 8
    && *(_DWORD *)(v3 + 32) <= a1)
  {
    return CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFLocaleIdentifier *)(v3 + 40));
  }
  else
  {
    return 0;
  }
}

uint64_t ___ZN7CoreNLP23copyLocaleForLanguageIDE12NLLanguageID_block_invoke()
{
  uint64_t v0;
  uint64_t result;
  int __dst[132];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  memcpy(__dst, &unk_1E2DF3DD0, sizeof(__dst));
  result = std::map<NLLanguageID,__CFString const*>::map[abi:ne180100](v0, __dst, 33);
  CoreNLP::copyLocaleForLanguageID(NLLanguageID)::languageLocaleIdentifierMap = v0;
  return result;
}

void sub_191C6777C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void CoreNLP::extractAffix(std::string *a1, std::string::value_type *a2, unsigned int a3, int a4)
{
  std::string::size_type v5;
  std::string::value_type *v6;
  std::string::value_type *v7;
  std::string::value_type *v8;
  std::string::size_type v9;

  v5 = a2[23];
  if (!a4)
  {
    if ((v5 & 0x80) != 0)
    {
      v7 = a2;
      a2 = *(std::string::value_type **)a2;
      v5 = *((_QWORD *)v7 + 1);
      if (v5 < a3)
        goto LABEL_11;
    }
    else if (v5 < a3)
    {
      goto LABEL_11;
    }
    v9 = (std::string::size_type)&a2[v5 - a3];
    v8 = &a2[v5];
    v5 = (std::string::size_type)&a2[v5 - v9];
    a2 = (std::string::value_type *)v9;
    goto LABEL_12;
  }
  if ((v5 & 0x80) == 0)
  {
    if (v5 < a3)
      goto LABEL_11;
    goto LABEL_9;
  }
  v6 = a2;
  a2 = *(std::string::value_type **)a2;
  v5 = *((_QWORD *)v6 + 1);
  if (v5 >= a3)
LABEL_9:
    v5 = a3;
LABEL_11:
  v8 = &a2[v5];
LABEL_12:
  std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(a1, a2, v8, v5);
}

void CoreNLP::extractAffixLetters(std::string *a1, uint64_t *a2, int a3, int a4)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  BOOL v8;
  uint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  std::string::size_type v14;
  std::string::value_type *v15;
  uint64_t v16;

  if ((a4 & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    v5 = *((unsigned __int8 *)a2 + 23);
    if ((v5 & 0x80u) != 0)
      v5 = *((_DWORD *)a2 + 2);
    v4 = v5 - 1;
  }
  v6 = 0;
  if (a3 && (v4 & 0x80000000) == 0)
  {
    v6 = 0;
    v7 = *((unsigned __int8 *)a2 + 23);
    v8 = (v7 & 0x80u) != 0;
    if ((v7 & 0x80u) != 0)
      v7 = a2[1];
    if (v8)
      v9 = (uint64_t *)*a2;
    else
      v9 = a2;
    while (1)
    {
      if (v7 <= v4)
        goto LABEL_21;
      if (!a4)
        break;
      v10 = v4 + 1;
      v11 = 1;
      if (v7 > v10)
        goto LABEL_18;
LABEL_19:
      ++v6;
      if (a3)
      {
        v4 += v11;
        if ((v4 & 0x80000000) == 0)
          continue;
      }
      goto LABEL_21;
    }
    v11 = -1;
    v10 = v4;
LABEL_18:
    a3 -= (*((_BYTE *)v9 + v10) & 0xC0) != 128;
    goto LABEL_19;
  }
LABEL_21:
  v12 = *((unsigned __int8 *)a2 + 23);
  v13 = (uint64_t *)*a2;
  if (a4)
  {
    if ((v12 & 0x80u) != 0)
      a2 = (uint64_t *)*a2;
    v14 = v6;
    v15 = (char *)a2 + v6;
  }
  else
  {
    if ((v12 & 0x80u) == 0)
      v16 = (uint64_t)a2 + v12;
    else
      v16 = (uint64_t)v13 + a2[1];
    if ((v12 & 0x80u) != 0)
      v12 = a2[1];
    else
      v13 = a2;
    a2 = (uint64_t *)(v16 - v6);
    v15 = (char *)v13 + v12;
    v14 = (char *)v13 + v12 - (char *)a2;
  }
  std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(a1, (std::string::value_type *)a2, v15, v14);
}

std::string *CoreNLP::extractLetters@<X0>(std::string *__str@<X0>, int a2@<W1>, unsigned int a3@<W2>, std::string *a4@<X8>)
{
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  uint64_t v8;
  std::string::size_type v9;
  std::string::size_type size;
  char v12;

  v5 = a4;
  LODWORD(a4) = 0;
  if (a2 && (a3 & 0x80000000) == 0)
  {
    a4 = 0;
    v6 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((v6 & 0x80u) == 0)
      v7 = __str;
    else
      v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
    v8 = (uint64_t)v7->__r_.__value_.__r.__words + a3 + 1;
    do
    {
      v9 = (std::string::size_type)a4 + a3;
      if ((v6 & 0x80) != 0)
      {
        size = __str->__r_.__value_.__l.__size_;
        if (size <= v9)
          return std::string::basic_string(v5, __str, (int)a3, a4, (std::allocator<char> *)&v12);
      }
      else
      {
        size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
        if (v9 >= v6)
          return std::string::basic_string(v5, __str, (int)a3, a4, (std::allocator<char> *)&v12);
      }
      if (size > (unint64_t)a4->__r_.__value_.__r.__words + a3 + 1)
        a2 -= (a4->__r_.__value_.__s.__data_[v8] & 0xC0) != 128;
      a4 = (std::string *)((char *)a4 + 1);
    }
    while (a2);
  }
  return std::string::basic_string(v5, __str, (int)a3, a4, (std::allocator<char> *)&v12);
}

void CoreNLP::extractLowercaseUTF8(CFStringRef theString@<X1>, CFIndex *a2@<X0>, int a3@<W2>, std::string *a4@<X8>)
{
  uint64_t v6;
  CFIndex v9;
  CFIndex Length;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  UniChar *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  CFRange v18;
  uint64_t v19;
  _WORD *v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD v23[2];
  CFRange v24;

  v23[1] = *MEMORY[0x1E0C80C00];
  if (theString
    && (v6 = a2[1], v6 >= 1)
    && (*a2 & 0x8000000000000000) == 0
    && (v9 = *a2 + v6, Length = CFStringGetLength(theString), v9 <= Length))
  {
    v12 = MEMORY[0x1E0C80A78](Length, v11);
    v14 = (UniChar *)((char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
    MEMORY[0x1E0C80A78](v12, v15);
    v17 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    v24.location = *a2;
    CFStringGetCharacters(theString, v24, v14);
    if (a3 == 4)
    {
      v18.location = a2[1];
      CoreNLP::getUTF8StringFromCFStringInRange(theString, (const __CFString *)*a2, v18, (uint64_t)a4);
    }
    else
    {
      v19 = a2[1];
      if (v19 >= 1)
      {
        v20 = v17;
        v21 = v19;
        do
        {
          v22 = *v14++;
          *v20++ = CoreNLP::toLowerLatin(v22);
          --v21;
        }
        while (v21);
      }
      a4->__r_.__value_.__r.__words[0] = 0;
      a4->__r_.__value_.__l.__size_ = 0;
      a4->__r_.__value_.__r.__words[2] = 0;
      CoreNLP::convertCharactersToUTF8((uint64_t)v17, v19, a4, 1);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a4, "");
  }
}

void sub_191C67B64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::splitOnApostrophe(const __CFString *a1, CFRange *a2, uint64_t a3)
{
  unsigned __int8 v6;
  CFRange v7;
  CFIndex v8;
  int v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  CFIndex v14;
  uint64_t v15;
  CFIndex v16;
  CFRange v18;
  CFIndex v19;
  uint64_t v20;
  CFIndex v21;
  _QWORD v22[3];
  _QWORD v23[3];
  CFRange v24;
  uint64_t v25;
  __int128 v26[7];
  __int128 v27;
  _QWORD v28[2];
  CFRange result;
  CFRange v30;

  if ((v6 & 1) == 0
  {
    CoreNLP::splitOnApostrophe(__CFString const*,CFRange const&,std::vector<CoreNLP::NLAttributedToken> &)::_apostropheCharacterSet = (uint64_t)CFCharacterSetCreateWithCharactersInString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("'’"));
  }
  result = (CFRange)xmmword_191D40610;
  v27 = xmmword_191D40610;
  CFStringFindCharacterFromSet(a1, (CFCharacterSetRef)CoreNLP::splitOnApostrophe(__CFString const*,CFRange const&,std::vector<CoreNLP::NLAttributedToken> &)::_apostropheCharacterSet, *a2, 4uLL, &result);
  if (result.length < 1)
    goto LABEL_47;
  v7.location = a2->location;
  if (result.location > a2->location)
  {
    v7.length = a2->length;
    v8 = v7.length + v7.location - (result.length + result.location);
    if (v7.length + v7.location > result.length + result.location)
    {
      if (v8 == 2)
      {
        if (!CFStringFindWithOptions(a1, CFSTR("ve"), v7, 0xDuLL, 0)
          && !CFStringFindWithOptions(a1, CFSTR("ll"), *a2, 0xDuLL, 0)
          && !CFStringFindWithOptions(a1, CFSTR("re"), *a2, 0xDuLL, 0))
        {
          goto LABEL_25;
        }
        v10 = -3;
      }
      else
      {
        if (v8 != 1)
          goto LABEL_25;
        if (CFStringFindWithOptions(a1, CFSTR("s"), v7, 0xDuLL, 0)
          || CFStringFindWithOptions(a1, CFSTR("d"), *a2, 0xDuLL, 0)
          || CFStringFindWithOptions(a1, CFSTR("m"), *a2, 0xDuLL, 0))
        {
          v9 = 0;
          v10 = -2;
        }
        else
        {
          v9 = 1;
          v10 = 1;
        }
        if (CFStringFindWithOptions(a1, CFSTR("t"), *a2, 0xDuLL, 0))
        {
          v30.location = a2->location;
          v30.length = a2->length - 2;
          v11 = CFStringFindWithOptions(a1, CFSTR("n"), v30, 0xDuLL, 0);
          if (v11)
            v12 = 0;
          else
            v12 = v9;
          if (v11)
            v10 = -3;
          if ((v12 & 1) != 0)
            goto LABEL_25;
        }
        else if (v9)
        {
          goto LABEL_25;
        }
      }
      v14 = a2->length + v10;
      v28[0] = a2->location;
      v13 = v28[0];
      v28[1] = v14;
      v15 = CoreNLP::splitOnApostrophe(a1, v28, a3);
      v16 = a2->location - (v14 + v13) + a2->length;
      v22[0] = v14 + v13;
      v22[1] = v16;
      v22[2] = 0;
      CoreNLP::NLAttributedToken::NLAttributedToken((uint64_t)v26, (uint64_t)v22);
      std::vector<CoreNLP::NLAttributedToken>::push_back[abi:ne180100](a3, v26);
      CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::NLAttributedToken *)v26);
      return v15 + 1;
    }
  }
LABEL_25:
  if (result.length >= 1)
  {
    CFStringFindCharacterFromSet(a1, (CFCharacterSetRef)CoreNLP::splitOnApostrophe(__CFString const*,CFRange const&,std::vector<CoreNLP::NLAttributedToken> &)::_apostropheCharacterSet, *a2, 0, &result);
    if (result.length >= 1)
    {
      v18.location = a2->location;
      v19 = result.location - a2->location;
      if (result.location > a2->location)
      {
        v18.length = a2->length;
        if (result.length + result.location < v18.length + v18.location)
        {
          if (v19 == 4)
          {
            if (CFStringFindWithOptions(a1, CFSTR("entr"), v18, 9uLL, 0))
            {
              v20 = 5;
              goto LABEL_46;
            }
          }
          else if (v19 == 2)
          {
            if (CFStringFindWithOptions(a1, CFSTR("qu"), v18, 9uLL, 0))
            {
              v20 = 3;
              goto LABEL_46;
            }
          }
          else if (v19 == 1
                 && (CFStringFindWithOptions(a1, CFSTR("c"), v18, 9uLL, 0)
                  || CFStringFindWithOptions(a1, CFSTR("d"), *a2, 9uLL, 0)
                  || CFStringFindWithOptions(a1, CFSTR("j"), *a2, 9uLL, 0)
                  || CFStringFindWithOptions(a1, CFSTR("l"), *a2, 9uLL, 0)
                  || CFStringFindWithOptions(a1, CFSTR("m"), *a2, 9uLL, 0)
                  || CFStringFindWithOptions(a1, CFSTR("n"), *a2, 9uLL, 0)
                  || CFStringFindWithOptions(a1, CFSTR("s"), *a2, 9uLL, 0)
                  || CFStringFindWithOptions(a1, CFSTR("t"), *a2, 9uLL, 0)
                  || CFStringFindWithOptions(a1, CFSTR("y"), *a2, 9uLL, 0)))
          {
            v20 = 2;
LABEL_46:
            v23[0] = a2->location;
            v23[1] = v20;
            v23[2] = 0;
            CoreNLP::NLAttributedToken::NLAttributedToken((uint64_t)v26, (uint64_t)v23);
            std::vector<CoreNLP::NLAttributedToken>::push_back[abi:ne180100](a3, v26);
            CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::NLAttributedToken *)v26);
            v21 = a2->length - v20;
            *(_QWORD *)&v27 = a2->location + v20;
            *((_QWORD *)&v27 + 1) = v21;
            return CoreNLP::splitOnApostrophe(a1, &v27, a3) + 1;
          }
        }
      }
    }
  }
LABEL_47:
  v24 = *a2;
  v25 = 0;
  CoreNLP::NLAttributedToken::NLAttributedToken((uint64_t)v26, (uint64_t)&v24);
  std::vector<CoreNLP::NLAttributedToken>::push_back[abi:ne180100](a3, v26);
  CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::NLAttributedToken *)v26);
  return 1;
}

void sub_191C6806C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<CoreNLP::NLAttributedToken>::push_back[abi:ne180100](uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a1 + 16);
  v4 = a1 + 16;
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *(_QWORD *)a1) >> 4);
    if ((unint64_t)(v9 + 1) > 0x249249249249249)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *(_QWORD *)a1) >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x124924924924924)
      v12 = 0x249249249249249;
    else
      v12 = v11;
    v18 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreNLP::NLAttributedToken>>(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[112 * v9];
    v17 = &v13[112 * v12];
    CoreNLP::NLAttributedToken::NLAttributedToken((uint64_t)v15, a2);
    v16 = v15 + 112;
    std::vector<CoreNLP::NLAttributedToken>::__swap_out_circular_buffer((__int128 **)a1, &v14);
    v8 = *(_QWORD *)(a1 + 8);
    std::__split_buffer<CoreNLP::NLAttributedToken>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    CoreNLP::NLAttributedToken::NLAttributedToken(*(_QWORD *)(v4 - 8), a2);
    v8 = v7 + 112;
    *(_QWORD *)(a1 + 8) = v7 + 112;
  }
  *(_QWORD *)(a1 + 8) = v8;
}

void sub_191C681C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CoreNLP::NLAttributedToken>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::loadLinguisticData(CoreNLP *this)
{
  if (CoreNLP::loadLinguisticData(void)::onceToken != -1)
    dispatch_once(&CoreNLP::loadLinguisticData(void)::onceToken, &__block_literal_global_239);
  return CoreNLP::loadLinguisticData(void)::linguisticDataHandle;
}

void ___ZN7CoreNLP18loadLinguisticDataEv_block_invoke()
{
  void **v0;
  void *__p[2];
  char v2;

  CoreNLP::getPathRelativeToPlatformRoot((CoreNLP *)"/System/Library/PrivateFrameworks/LinguisticData.framework/LinguisticData", __p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  CoreNLP::loadLinguisticData(void)::linguisticDataHandle = (uint64_t)dlopen((const char *)v0, 261);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_191C68278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::loadLexicon(CoreNLP *this)
{
  if (CoreNLP::loadLexicon(void)::onceToken != -1)
    dispatch_once(&CoreNLP::loadLexicon(void)::onceToken, &__block_literal_global_242);
  return CoreNLP::loadLexicon(void)::lexiconHandle;
}

void ___ZN7CoreNLP11loadLexiconEv_block_invoke()
{
  void **v0;
  void *__p[2];
  char v2;

  CoreNLP::getPathRelativeToPlatformRoot((CoreNLP *)"/System/Library/PrivateFrameworks/Lexicon.framework/Lexicon", __p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  CoreNLP::loadLexicon(void)::lexiconHandle = (uint64_t)dlopen((const char *)v0, 261);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_191C68338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::loadEspresso(CoreNLP *this)
{
  if (CoreNLP::loadEspresso(void)::onceToken != -1)
    dispatch_once(&CoreNLP::loadEspresso(void)::onceToken, &__block_literal_global_245);
  return CoreNLP::loadEspresso(void)::EspressoHandle;
}

void ___ZN7CoreNLP12loadEspressoEv_block_invoke()
{
  void **v0;
  void *__p[2];
  char v2;

  CoreNLP::getPathRelativeToPlatformRoot((CoreNLP *)"/System/Library/PrivateFrameworks/Espresso.framework/Espresso", __p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  CoreNLP::loadEspresso(void)::EspressoHandle = (uint64_t)dlopen((const char *)v0, 261);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_191C683F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::loadMontreal(CoreNLP *this)
{
  if (CoreNLP::loadMontreal(void)::onceToken != -1)
    dispatch_once(&CoreNLP::loadMontreal(void)::onceToken, &__block_literal_global_251);
  return CoreNLP::loadMontreal(void)::MontrealHandle;
}

void ___ZN7CoreNLP12loadMontrealEv_block_invoke()
{
  void **v0;
  void *__p[2];
  char v2;

  CoreNLP::getPathRelativeToPlatformRoot((CoreNLP *)"/System/Library/PrivateFrameworks/Montreal.framework/Montreal", __p);
  if (v2 >= 0)
    v0 = __p;
  else
    v0 = (void **)__p[0];
  CoreNLP::loadMontreal(void)::MontrealHandle = (uint64_t)dlopen((const char *)v0, 261);
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_191C684B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::skipTokenForOptions(CoreNLP *this, CoreNLP::NLAttributedToken *a2)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v9;
  int *v10;

  v2 = a2;
  v3 = *((_QWORD *)this + 2);
  v4 = 1;
  v5 = 1;
  if ((v3 & 0x800) == 0)
    v5 = (*((unsigned __int8 *)this + 74) >> 5) & 1;
  v9 = 1;
  v10 = &v9;
  v6 = *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)this + 3, &v9, (uint64_t)&std::piecewise_construct, &v10)+ 10);
  if (v6 == 91)
    v7 = 1;
  else
    v7 = (v3 >> 10) & 1;
  if (((v2 & 4) == 0 || (v5 & 1) == 0) && ((v2 & 2) == 0 || (v3 & 0x400) == 0) && ((v2 & 1) == 0 || v6 != 91))
    return ((v7 | v5) ^ 1) & (v2 >> 3);
  return v4;
}

uint64_t CoreNLP::createExemplarSetForLanguage(CoreNLP *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ExemplarSet;
  uint64_t v5;

  if ((_DWORD)a1 == 4)
    return CoreNLP::createExemplarSetForChineseSimplified(a1);
  if (!CoreNLP::convertLanguageIDToCode((int)a1))
    return 0;
  v2 = uset_openEmpty();
  v3 = ulocdata_open();
  if (v2)
  {
    MEMORY[0x19401F24C](v2, 48, 57);
    MEMORY[0x19401F24C](v2, 97, 122);
    MEMORY[0x19401F24C](v2, 65, 90);
    MEMORY[0x19401F234](v2, 38);
    MEMORY[0x19401F234](v2, 46);
    MEMORY[0x19401F234](v2, 39);
    MEMORY[0x19401F234](v2, 45);
    MEMORY[0x19401F234](v2, 8211);
    MEMORY[0x19401F234](v2, 8212);
    MEMORY[0x19401F234](v2, 8208);
    MEMORY[0x19401F234](v2, 96);
    MEMORY[0x19401F234](v2, 8216);
    MEMORY[0x19401F234](v2, 8217);
    MEMORY[0x19401F234](v2, 8242);
    MEMORY[0x19401F24C](v2, 262, 269);
    MEMORY[0x19401F24C](v2, 346, 353);
    MEMORY[0x19401F24C](v2, 377, 382);
    ExemplarSet = ulocdata_getExemplarSet();
    if (ExemplarSet)
    {
      MEMORY[0x19401F240](v2, ExemplarSet);
      uset_close();
    }
    v5 = ulocdata_getExemplarSet();
    if (v5)
    {
      MEMORY[0x19401F240](v2, v5);
      uset_close();
    }
  }
  if (v3)
    ulocdata_close();
  if (v2)
    MEMORY[0x19401F270](v2);
  return v2;
}

uint64_t CoreNLP::createExemplarSetForChineseSimplified(CoreNLP *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  int32_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned __int8 v12;
  UErrorCode pErrorCode;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  pErrorCode = U_ZERO_ERROR;
  v1 = std::string::basic_string[abi:ne180100]<0>(&v10, "[[:Hani:]]");
  MEMORY[0x1E0C80A78](v1, v2);
  HIDWORD(v9) = 0;
  if ((v12 & 0x80u) == 0)
    v4 = (const char *)&v10;
  else
    v4 = v10;
  if ((v12 & 0x80u) == 0)
    v5 = v12;
  else
    v5 = v11;
  u_strFromUTF8((UChar *)((char *)&v9 - v3), v5, (int32_t *)&v9 + 1, v4, v5, &pErrorCode);
  if (pErrorCode > U_ZERO_ERROR)
    goto LABEL_11;
  v6 = uset_openPattern();
  v7 = v6;
  if (pErrorCode >= U_ILLEGAL_ARGUMENT_ERROR && v6)
  {
    uset_close();
LABEL_11:
    v7 = 0;
  }
  if ((char)v12 < 0)
    operator delete(v10);
  return v7;
}

void sub_191C688D0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void CoreNLP::getTopNIndices(CoreNLP *this@<X0>, unint64_t a2@<X2>, float *a3@<X1>, uint64_t **a4@<X8>)
{
  float *v7;
  float *v8;
  float v9;
  uint64_t v10;
  float *v11;
  float v12;
  float v13;
  uint64_t *v14;
  unint64_t v15;
  char *v16;
  float *i;
  uint64_t v18;
  float **v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  float **v25;
  float *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  float *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  float **v35;
  float **v36;
  float **v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  float **v47;
  float **__p;
  float **v49;
  char *v50;
  uint64_t *v51;
  float *v52;
  uint64_t *v53;

  v52 = a3;
  if (this == (CoreNLP *)1)
  {
    v7 = a3;
    if (a2 >= 2)
    {
      v8 = a3 + 1;
      v9 = *a3;
      v10 = 4 * a2 - 4;
      v7 = a3;
      v11 = a3 + 1;
      do
      {
        v12 = *v11++;
        v13 = v12;
        if (v9 < v12)
        {
          v9 = v13;
          v7 = v8;
        }
        v8 = v11;
        v10 -= 4;
      }
      while (v10);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v14 = (uint64_t *)operator new(8uLL);
    *a4 = v14;
    *v14++ = v7 - a3;
    a4[1] = v14;
    a4[2] = v14;
  }
  else
  {
    __p = 0;
    v49 = 0;
    v50 = 0;
    v51 = (uint64_t *)&v52;
    if (a2 >= (unint64_t)this)
      v15 = (unint64_t)this;
    else
      v15 = a2;
    if (a2)
    {
      v16 = 0;
      for (i = 0; i != (float *)a2; i = (float *)((char *)i + 1))
      {
        if (v16 >= v50)
        {
          v19 = __p;
          v20 = (v16 - (char *)__p) >> 3;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 61)
            std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
          v22 = v50 - (char *)__p;
          if ((v50 - (char *)__p) >> 2 > v21)
            v21 = v22 >> 2;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
            v23 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          if (v23)
          {
            v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v50, v23);
            v19 = __p;
            v16 = (char *)v49;
          }
          else
          {
            v24 = 0;
          }
          v25 = (float **)&v24[8 * v20];
          *v25 = i;
          v18 = (uint64_t)(v25 + 1);
          while (v16 != (char *)v19)
          {
            v26 = (float *)*((_QWORD *)v16 - 1);
            v16 -= 8;
            *--v25 = v26;
          }
          __p = v25;
          v50 = &v24[8 * v23];
          if (v19)
            operator delete(v19);
        }
        else
        {
          *(_QWORD *)v16 = i;
          v18 = (uint64_t)(v16 + 8);
        }
        v49 = (float **)v18;
        v53 = v51;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,CoreNLP::getTopNIndices(unsigned long,float *,unsigned long)::$_0 &,std::__wrap_iter<unsigned long *>>((uint64_t)__p, v18, &v53, (v18 - (uint64_t)__p) >> 3);
        v16 = (char *)v18;
        v27 = (v18 - (uint64_t)__p) >> 3;
        if (v27 > v15)
        {
          v28 = v51;
          v53 = v51;
          if (v18 - (uint64_t)__p >= 9)
          {
            v29 = 0;
            v30 = *__p;
            v31 = __p;
            do
            {
              v32 = v31;
              v31 += v29 + 1;
              v33 = 2 * v29;
              v29 = (2 * v29) | 1;
              v34 = v33 + 2;
              if (v34 < v27 && *(float *)(*v28 + 4 * *v31) > *(float *)(*v28 + 4 * v31[1]))
              {
                ++v31;
                v29 = v34;
              }
              *v32 = *v31;
            }
            while (v29 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
            v35 = (float **)(v18 - 8);
            if (v31 == (_QWORD *)(v18 - 8))
            {
              *v31 = v30;
            }
            else
            {
              *v31 = *v35;
              *v35 = v30;
              std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,CoreNLP::getTopNIndices(unsigned long,float *,unsigned long)::$_0 &,std::__wrap_iter<unsigned long *>>((uint64_t)__p, (uint64_t)(v31 + 1), &v53, (float **)(v31 + 1) - __p);
              v16 = (char *)v18;
            }
          }
          v16 -= 8;
          v49 = (float **)v16;
        }
      }
    }
    v53 = 0;
    std::vector<unsigned long>::vector(a4, v15, &v53);
    v37 = __p;
    v36 = v49;
    if (__p == v49)
    {
      v36 = __p;
      if (!__p)
        return;
    }
    else
    {
      v38 = *a4;
      do
      {
        v38[--v15] = (uint64_t)*v37;
        v39 = v51;
        v53 = v51;
        if ((char *)v36 - (char *)v37 >= 9)
        {
          v40 = 0;
          v41 = v36 - v37;
          v42 = *v37;
          v43 = v37;
          do
          {
            v44 = v43;
            v43 += v40 + 1;
            v45 = 2 * v40;
            v40 = (2 * v40) | 1;
            v46 = v45 + 2;
            if (v46 < v41 && *(float *)(*v39 + 4 * *v43) > *(float *)(*v39 + 4 * v43[1]))
            {
              ++v43;
              v40 = v46;
            }
            *v44 = *v43;
          }
          while (v40 <= (uint64_t)((unint64_t)(v41 - 2) >> 1));
          v47 = v36 - 1;
          if (v43 == v36 - 1)
          {
            *v43 = v42;
          }
          else
          {
            *v43 = *v47;
            *v47 = v42;
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,CoreNLP::getTopNIndices(unsigned long,float *,unsigned long)::$_0 &,std::__wrap_iter<unsigned long *>>((uint64_t)v37, (uint64_t)(v43 + 1), &v53, (float **)(v43 + 1) - v37);
            v36 = v49;
            v38 = *a4;
          }
        }
        v49 = --v36;
        v37 = __p;
      }
      while (__p != v36);
    }
    operator delete(v36);
  }
}

void sub_191C68CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x38uLL);
    v11[8] = **a4;
    v11[10] = 0;
    *((_QWORD *)v11 + 6) = 0;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t std::map<NLLanguageID,__CFString const*>::map[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::__emplace_hint_unique_key_args<NLLanguageID,std::pair<NLLanguageID const,__CFString const*> const&>((uint64_t **)a1, v4, a2, a2);
      a2 += 4;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_191C68FB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::__emplace_hint_unique_key_args<NLLanguageID,std::pair<NLLanguageID const,__CFString const*> const&>(uint64_t **a1, uint64_t *a2, int *a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::__find_equal<NLLanguageID>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::__find_equal<NLLanguageID>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  std::string *v8;
  std::string::size_type size;
  std::string::size_type v10;
  unint64_t v11;
  unint64_t v12;
  std::string::value_type v13;

  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v8 = this;
    if (a4 <= 0x16)
      goto LABEL_11;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v10 = 22;
    goto LABEL_6;
  }
  v11 = this->__r_.__value_.__r.__words[2];
  v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  v12 = HIBYTE(v11);
LABEL_8:
  v8 = this;
  if ((v12 & 0x80) != 0)
    v8 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_11:
  while (a2 != a3)
  {
    v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    this->__r_.__value_.__l.__size_ = a4;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E2DEE990, MEMORY[0x1E0DE42D0]);
}

void sub_191C69350(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

__n128 CoreNLP::NLAttributedToken::NLAttributedToken(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  v3 = a2 + 2;
  v4 = *((_QWORD *)a2 + 4);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = a1 + 32;
  v6 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 40) = v6;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    *((_QWORD *)a2 + 3) = v3;
    *v3 = 0;
    *((_QWORD *)a2 + 5) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 24) = v5;
  }
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  v7 = (_QWORD *)a2 + 7;
  v8 = *((_QWORD *)a2 + 7);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = a1 + 56;
  v10 = *((_QWORD *)a2 + 8);
  *(_QWORD *)(a1 + 64) = v10;
  if (v10)
  {
    *(_QWORD *)(v8 + 16) = v9;
    *((_QWORD *)a2 + 6) = v7;
    *v7 = 0;
    *((_QWORD *)a2 + 8) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v9;
  }
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  result = (__n128)a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(__n128 *)(a1 + 80) = result;
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  return result;
}

void std::vector<CoreNLP::NLAttributedToken>::__swap_out_circular_buffer(__int128 **a1, _QWORD *a2)
{
  __int128 *v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = (__int128 *)a2[1];
  while (v4 != v5)
  {
    v4 -= 7;
    CoreNLP::NLAttributedToken::NLAttributedToken((uint64_t)(v6 - 7), v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = (__int128 *)a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = (__int128 *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CoreNLP::NLAttributedToken>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(112 * a2);
}

uint64_t std::__split_buffer<CoreNLP::NLAttributedToken>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 112;
    CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::NLAttributedToken *)(i - 112));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::set<std::string>::set[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 24 * a3;
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_191C69678(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_191C69790(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::string>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,CoreNLP::getTopNIndices(unsigned long,float *,unsigned long)::$_0 &,std::__wrap_iter<unsigned long *>>(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (_QWORD *)(result + 8 * v4);
    v8 = *(_QWORD *)(a2 - 8);
    v6 = (_QWORD *)(a2 - 8);
    v7 = v8;
    v9 = **a3;
    v10 = *v5;
    v11 = *(float *)(v9 + 4 * v8);
    if (*(float *)(v9 + 4 * *v5) > v11)
    {
      do
      {
        *v6 = v10;
        v6 = v5;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (_QWORD *)(result + 8 * v4);
        v10 = *v5;
      }
      while (*(float *)(v9 + 4 * *v5) > v11);
      *v6 = v7;
    }
  }
  return result;
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_191C699E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::AbstractModel::AbstractModel(uint64_t a1, const void ***a2)
{
  *(_QWORD *)a1 = &unk_1E2DF1D78;
  *(_DWORD *)(a1 + 12) = 0;
  std::map<std::string,int>::map[abi:ne180100]((uint64_t *)(a1 + 16), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 100;
  *(_BYTE *)(a1 + 68) = 0;
  return a1;
}

uint64_t CoreNLP::AbstractModel::AbstractModel(uint64_t this)
{
  *(_QWORD *)this = &unk_1E2DF1D78;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = this + 24;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_DWORD *)(this + 64) = 100;
  *(_BYTE *)(this + 68) = 0;
  return this;
}

uint64_t CoreNLP::AbstractModel::train(CoreNLP::AbstractModel *this, __sFILE *a2)
{
  return 0;
}

uint64_t CoreNLP::AbstractModel::userData(CoreNLP::AbstractModel *this)
{
  return 0;
}

uint64_t CoreNLP::AbstractModel::userDataSize(CoreNLP::AbstractModel *this)
{
  return 0;
}

uint64_t CoreNLP::AbstractModel::load()
{
  return 0;
}

uint64_t CoreNLP::AbstractModel::load(CoreNLP::AbstractModel *this, const char *a2)
{
  return 0;
}

_QWORD *CoreNLP::AbstractModel::tagToLabel@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t *std::map<std::string,int>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_191C69B04(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,int> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

BOOL corelm::util::startsWith(uint64_t a1, uint64_t a2, char *a3, int64_t a4)
{
  uint64_t v5[2];

  v5[0] = a1;
  v5[1] = a2;
  return std::string_view::find[abi:ne180100](v5, a3, a4, 0) == 0;
}

uint64_t std::string_view::find[abi:ne180100](uint64_t *a1, char *a2, int64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  void *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v13;
  uint64_t v14;
  char *v15;

  v4 = a1[1];
  if (v4 < a4)
    return -1;
  if (a3)
  {
    v6 = *a1;
    v7 = (void *)(*a1 + a4);
    v8 = (char *)(v6 + v4);
    v9 = v6 + v4 - (_QWORD)v7;
    if (v9 >= a3)
    {
      v13 = *a2;
      do
      {
        v14 = v9 - a3;
        if (v14 == -1)
          break;
        v15 = (char *)memchr(v7, v13, v14 + 1);
        if (!v15)
          break;
        v10 = v15;
        if (!memcmp(v15, a2, a3))
          goto LABEL_6;
        v7 = v10 + 1;
        v9 = v8 - (v10 + 1);
      }
      while (v9 >= a3);
    }
    v10 = v8;
LABEL_6:
    if (v10 == v8)
      return -1;
    else
      return (uint64_t)&v10[-v6];
  }
  return a4;
}

BOOL corelm::util::endsWith(uint64_t a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;

  if (a2 < a4)
    return 0;
  if (!a4)
    return 1;
  v5 = a1 + a2;
  v6 = -(uint64_t)a4;
  do
  {
    v7 = *a3++;
    result = *(unsigned __int8 *)(v5 + v6) == v7;
    v8 = *(unsigned __int8 *)(v5 + v6) != v7 || v6 == -1;
    ++v6;
  }
  while (!v8);
  return result;
}

void corelm::util::split(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, int64_t a4@<X3>, std::vector<std::string> *a5@<X8>)
{
  unint64_t v8;
  std::allocator<std::string> *p_end_cap;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::string::value_type *v13;
  std::string *value;
  std::vector<std::string>::pointer end;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  std::string *v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  int v25;
  std::string __p;
  uint64_t v27;
  unint64_t v28;
  std::__split_buffer<std::string> __v;

  v8 = 0;
  v27 = a1;
  v28 = a2;
  a5->__begin_ = 0;
  a5->__end_ = 0;
  a5->__end_cap_.__value_ = 0;
  p_end_cap = (std::allocator<std::string> *)&a5->__end_cap_;
  do
  {
    if (v8 >= v28)
      break;
    v10 = std::string_view::find[abi:ne180100](&v27, a3, a4, v8);
    v11 = v10;
    if (v10 != v8)
    {
      if (v28 < v8)
        std::__throw_out_of_range[abi:ne180100]("string_view::substr");
      if (v28 - v8 >= v10 - v8)
        v12 = v10 - v8;
      else
        v12 = v28 - v8;
      memset(&__p, 0, sizeof(__p));
      if (v12)
      {
        v13 = (std::string::value_type *)(v27 + v8);
        do
        {
          std::string::push_back(&__p, *v13++);
          --v12;
        }
        while (v12);
      }
      end = a5->__end_;
      value = a5->__end_cap_.__value_;
      if (end >= value)
      {
        v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a5->__begin_) >> 3);
        v18 = v17 + 1;
        if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)a5->__begin_) >> 3);
        if (2 * v19 > v18)
          v18 = 2 * v19;
        if (v19 >= 0x555555555555555)
          v20 = 0xAAAAAAAAAAAAAAALL;
        else
          v20 = v18;
        __v.__end_cap_.__value_ = p_end_cap;
        if (v20)
          v21 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v20);
        else
          v21 = 0;
        v22 = v21 + v17;
        __v.__first_ = v21;
        __v.__begin_ = v22;
        __v.__end_cap_.__value_ = &v21[v20];
        v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v22->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v22 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(a5, &__v);
        v24 = a5->__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v25 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        a5->__end_ = v24;
        if (v25 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v16 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        end->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v16;
        a5->__end_ = end + 1;
      }
    }
    v8 = v11 + 1;
  }
  while (v11 != -1);
}

void sub_191C69EB4(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, uint64_t a7, uint64_t a8, std::__split_buffer<std::string> *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__pa);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

void corelm::util::strip(std::string *a1)
{
  std::locale v2;
  std::locale v3;
  std::locale v4;

  MEMORY[0x19401E8D4](&v2);
  LODWORD(v3.__locale_) = 0x4000;
  std::locale::locale(&v4, &v2);
  boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(a1, &v3);
  std::locale::~locale(&v4);
  std::locale::~locale(&v2);
}

void sub_191C69F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale *v10;

  std::locale::~locale(v10);
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void corelm::util::stripSplit(std::string *a1@<X0>, char *a2@<X1>, std::vector<std::string> *a3@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  char *v9;

  v4 = (uint64_t)a1;
  corelm::util::strip(a1);
  if (*(char *)(v4 + 23) < 0)
  {
    v7 = v4;
    v4 = *(_QWORD *)v4;
    v6 = *(_QWORD *)(v7 + 8);
  }
  else
  {
    v6 = *(unsigned __int8 *)(v4 + 23);
  }
  if (a2[23] < 0)
  {
    v9 = a2;
    a2 = *(char **)a2;
    v8 = *((_QWORD *)v9 + 1);
  }
  else
  {
    v8 = a2[23];
  }
  corelm::util::split(v4, v6, a2, v8, a3);
}

uint64_t corelm::util::replace(uint64_t result, uint64_t a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21[3];

  v3 = *(_QWORD *)a2;
  if (*(char *)(a2 + 23) < 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v3 = a2;
    v4 = *(unsigned __int8 *)(a2 + 23);
  }
  v5 = a3[23];
  v6 = *((_QWORD *)a3 + 1);
  if (v5 >= 0)
  {
    v7 = v5;
  }
  else
  {
    a3 = *(char **)a3;
    v7 = v6;
  }
  v8 = *(char *)(result + 23);
  if (v8 >= 0)
    v9 = (_BYTE *)result;
  else
    v9 = *(_BYTE **)result;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(result + 23);
  else
    v10 = *(_QWORD *)(result + 8);
  if (v10)
    v11 = v4 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    v12 = v3 + v4;
    v13 = &a3[v7];
    v14 = &v9[v10];
    v15 = v4 - 1;
    for (i = v10 - 1; ; --i)
    {
      v17 = 0;
      while (v9[v17] == *(_BYTE *)(v3 + v17))
      {
        v18 = v17 + 1;
        if (i != v17)
        {
          v11 = v15 == v17++;
          if (!v11)
            continue;
        }
        v19 = v3 + v18;
        v20 = &v9[v18];
        goto LABEL_25;
      }
      v19 = v3 + v17;
      v20 = &v9[v17];
LABEL_25:
      if (v19 == v12)
        break;
      if (++v9 == v14)
        return result;
    }
    if (v9 != v20)
    {
      v21[0] = v3;
      v21[1] = v12;
      return boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<std::__wrap_iter<char const*>,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>(result, v21, a3, v13, v9, v20, a3, v13);
    }
  }
  return result;
}

_QWORD *std::istringstream::basic_istringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x1E0DE4FD8];
  v7 = MEMORY[0x1E0DE4FD8] + 64;
  a1[15] = MEMORY[0x1E0DE4FD8] + 64;
  v8 = (uint64_t)(a1 + 2);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 16);
  *a1 = v9;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v9 - 24)) = v10;
  a1[1] = 0;
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 2);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6 + 24;
  a1[15] = v7;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3 | 8);
  return a1;
}

void sub_191C6A194(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x19401E928](v1);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F58];
  v3 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x19401E928](a1 + 120);
  return a1;
}

void corelm::util::getChars(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD v7[5];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __n128 (*v11)(__n128 *, __n128 *);
  void (*v12)(uint64_t);
  const char *v13;
  _QWORD v14[3];
  void **v15;

  v8 = 0;
  v9 = &v8;
  v10 = 0x4812000000;
  v11 = __Block_byref_object_copy_;
  v12 = __Block_byref_object_dispose_;
  v13 = "";
  memset(v14, 0, sizeof(v14));
  if (*((char *)a1 + 23) >= 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  v4 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v3);
  v5 = objc_msgSend(v4, "length");
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___ZN6corelm4util8getCharsERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
  v7[3] = &unk_1E2DF40E8;
  v7[4] = &v8;
  objc_msgSend(v4, "enumerateSubstringsInRange:options:usingBlock:", 0, v5, 2, v7);
  v6 = v9;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, (__int128 *)v6[6], (__int128 *)v6[7], 0xAAAAAAAAAAAAAAABLL * ((v6[7] - v6[6]) >> 3));
  _Block_object_dispose(&v8, 8);
  v15 = (void **)v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
}

void sub_191C6A360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  *(_QWORD *)(v8 - 40) = v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 40));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN6corelm4util8getCharsERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1, CFTypeRef cf)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  std::runtime_error *exception;
  CFTypeRef cfa;
  void *__p[2];
  std::string::size_type v20;
  std::__split_buffer<std::string> __v;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (cf)
    CFRetain(cf);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cfa, cf);
  if (!cfa)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::convert_to<std::string,0>((const __CFString *)cfa, (uint64_t)__p);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v3 + 56);
  if (v5 >= v4)
  {
    v7 = *(_QWORD *)(v3 + 48);
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v7) >> 3);
    v9 = v8 + 1;
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v7) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v3 + 64);
    if (v11)
      v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v3 + 64, v11);
    else
      v12 = 0;
    v13 = v12 + v8;
    __v.__first_ = v12;
    __v.__begin_ = v13;
    __v.__end_cap_.__value_ = &v12[v11];
    v14 = *(_OWORD *)__p;
    v13->__r_.__value_.__r.__words[2] = v20;
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    __p[1] = 0;
    v20 = 0;
    __p[0] = 0;
    __v.__end_ = v13 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(v3 + 48), &__v);
    v15 = *(_QWORD *)(v3 + 56);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v16 = SHIBYTE(v20);
    *(_QWORD *)(v3 + 56) = v15;
    if (v16 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6 = *(_OWORD *)__p;
    *(_QWORD *)(v5 + 16) = v20;
    *(_OWORD *)v5 = v6;
    __p[1] = 0;
    v20 = 0;
    __p[0] = 0;
    *(_QWORD *)(v3 + 56) = v5 + 24;
  }
  if (cfa)
    CFRelease(cfa);
}

void sub_191C6A57C(_Unwind_Exception *a1, char a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, std::__split_buffer<std::string> *a9, const void *a10, void *__pa, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a17);
  if (a16 < 0)
    operator delete(__pa);
  applesauce::CF::StringRef::~StringRef(&a10);
  _Unwind_Resume(a1);
}

void applesauce::CF::StringRef::~StringRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E2DEE998, (void (*)(void *))MEMORY[0x1E0DE42E0]);
}

void sub_191C6A63C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

applesauce::CF::StringRef *applesauce::CF::StringRef::StringRef(applesauce::CF::StringRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return this;
}

void sub_191C6A6F0(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_191C6A85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(std::string *a1, std::locale *a2)
{
  const std::locale *v4;
  int v5;
  std::string *v6;
  std::string::size_type size;
  unsigned __int8 *v8;
  std::locale::id *v9;
  std::string *v10;
  uint64_t v11;
  const std::locale::facet *v12;
  std::string::size_type v13;
  int locale;
  std::locale v15;
  std::locale v16;
  std::locale v17;
  int v18;
  std::locale v19;

  v4 = a2 + 1;
  LODWORD(v16.__locale_) = a2->__locale_;
  std::locale::locale(&v17, a2 + 1);
  boost::algorithm::trim_right_if<std::string,boost::algorithm::detail::is_classifiedF>(a1, &v16);
  std::locale::~locale(&v17);
  locale = (int)a2->__locale_;
  std::locale::locale(&v15, v4);
  v5 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v5 >= 0)
    v6 = a1;
  else
    v6 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if (v5 >= 0)
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  else
    size = a1->__r_.__value_.__l.__size_;
  v18 = locale;
  std::locale::locale(&v19, &v15);
  if (size)
  {
    v8 = (unsigned __int8 *)v6 + size;
    v9 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    v10 = v6;
    while (1)
    {
      v11 = v10->__r_.__value_.__s.__data_[0];
      v12 = std::locale::use_facet(&v19, v9);
      if ((v11 & 0x80) != 0 || (*((_DWORD *)&v12[1].~facet + v11) & v18) == 0)
        break;
      v10 = (std::string *)((char *)v10 + 1);
      if (!--size)
      {
        v10 = (std::string *)v8;
        break;
      }
    }
  }
  else
  {
    v10 = v6;
  }
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = (std::string::size_type)a1;
  else
    v13 = a1->__r_.__value_.__r.__words[0];
  std::string::erase(a1, (std::string::size_type)v6 - v13, (char *)v10 - (char *)v6);
  std::locale::~locale(&v19);
  std::locale::~locale(&v15);
}

void sub_191C6ACD4(_Unwind_Exception *a1)
{
  std::locale *v1;
  std::locale *v2;

  std::locale::~locale(v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void boost::algorithm::trim_right_if<std::string,boost::algorithm::detail::is_classifiedF>(std::string *a1, const std::locale *a2)
{
  int v3;
  char *v4;
  std::string::size_type size;
  char *v6;
  std::locale::id *v7;
  std::string::size_type v8;
  uint64_t v9;
  const std::locale::facet *v10;
  int v11;
  std::string::size_type v12;
  char *v13;
  int locale;
  std::locale v15;
  int v16;
  std::locale v17;

  v3 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v3 >= 0)
    v4 = (char *)a1;
  else
    v4 = (char *)a1->__r_.__value_.__r.__words[0];
  if (v3 >= 0)
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  else
    size = a1->__r_.__value_.__l.__size_;
  v6 = &v4[size];
  locale = (int)a2->__locale_;
  std::locale::locale(&v15, a2 + 1);
  v16 = locale;
  std::locale::locale(&v17, &v15);
  v7 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (size)
  {
    v8 = size;
    v9 = v4[size - 1];
    v10 = std::locale::use_facet(&v17, v7);
    if ((v9 & 0x80) != 0)
    {
      v4 = v6;
      break;
    }
    --v6;
    v11 = *((_DWORD *)&v10[1].~facet + v9);
    size = v8 - 1;
    if ((v11 & v16) == 0)
    {
      v4 += v8;
      break;
    }
  }
  std::locale::~locale(&v17);
  v12 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((v12 & 0x80u) == 0)
    v13 = (char *)a1;
  else
    v13 = (char *)a1->__r_.__value_.__r.__words[0];
  if ((v12 & 0x80u) != 0)
    v12 = a1->__r_.__value_.__l.__size_;
  std::string::erase(a1, v4 - v13, &v13[v12] - v4);
  std::locale::~locale(&v15);
}

void sub_191C6AE14(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::algorithm::detail::first_finderF<std::__wrap_iter<char const*>,boost::algorithm::is_equal>::operator()<std::__wrap_iter<char *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = *a1;
    v5 = a1[1];
    if (*a1 == v5)
    {
      return a3;
    }
    else
    {
      while (1)
      {
        v6 = 0;
        do
        {
          if (*(unsigned __int8 *)(v3 + v6) != *(unsigned __int8 *)(v4 + v6))
            break;
          if (++v6 + v3 == a3)
            break;
        }
        while (v6 + v4 != v5);
        if (v4 + v6 == v5)
          break;
        if (++v3 == a3)
          return a3;
      }
    }
  }
  return v3;
}

uint64_t boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<std::__wrap_iter<char const*>,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>(uint64_t a1, uint64_t *a2, char *a3, char *a4, _BYTE *a5, _BYTE *a6, char *a7, char *a8)
{
  _BYTE *v8;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v15;
  _BYTE *v19;
  _BYTE *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  std::string::value_type *v32;
  char *v33;
  std::string::value_type *v34;
  std::string::size_type v35;
  int64x2_t v37;
  __int128 v38;
  __int128 v39;
  char v40;

  v8 = a6;
  v38 = 0u;
  v39 = 0u;
  v37 = 0u;
  LODWORD(v10) = *(char *)(a1 + 23);
  v11 = *(_BYTE **)a1;
  if ((int)v10 >= 0)
    v12 = (_BYTE *)a1;
  else
    v12 = *(_BYTE **)a1;
  if (a5 == a6)
  {
    v19 = v12;
  }
  else
  {
    v15 = a5;
    v19 = v12;
    v20 = v12;
    do
    {
      v12 = v8;
      v19 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v40, &v37, a1, v19, v20, v15);
      v21 = (char *)(v37.i64[1] + 8 * (((_QWORD)v39 + *((_QWORD *)&v39 + 1)) >> 12));
      if ((_QWORD)v38 == v37.i64[1])
        v22 = 0;
      else
        v22 = *(_QWORD *)v21 + (((_WORD)v39 + WORD4(v39)) & 0xFFF);
      std::deque<char>::__insert_bidirectional[abi:ne180100]<std::__wrap_iter<char const*>>(&v37, v21, v22, a7, a8, a8 - a7);
      v23 = *(unsigned __int8 *)(a1 + 23);
      if ((v23 & 0x80u) == 0)
        v24 = a1;
      else
        v24 = *(_QWORD *)a1;
      if ((v23 & 0x80u) != 0)
        v23 = *(_QWORD *)(a1 + 8);
      v15 = (_BYTE *)boost::algorithm::detail::first_finderF<std::__wrap_iter<char const*>,boost::algorithm::is_equal>::operator()<std::__wrap_iter<char *>>(a2, (uint64_t)v12, v24 + v23);
      v8 = v25;
      v20 = v12;
      a7 = a3;
      a8 = a4;
    }
    while (v15 != v25);
    LOBYTE(v10) = *(_BYTE *)(a1 + 23);
    v11 = *(_BYTE **)a1;
  }
  v10 = v10;
  if ((v10 & 0x80u) == 0)
    v26 = a1;
  else
    v26 = (uint64_t)v11;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a1 + 8);
  v27 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v40, &v37, a1, v19, v12, (_BYTE *)(v26 + v10));
  v28 = *(unsigned __int8 *)(a1 + 23);
  if ((v28 & 0x80u) == 0)
    v29 = a1;
  else
    v29 = *(_QWORD *)a1;
  if ((v28 & 0x80u) != 0)
    v28 = *(_QWORD *)(a1 + 8);
  v30 = v29 + v28;
  if (*((_QWORD *)&v39 + 1))
  {
    v31 = (char *)(v37.i64[1] + 8 * ((unint64_t)v39 >> 12));
    if ((_QWORD)v38 == v37.i64[1])
    {
      v32 = 0;
      v34 = 0;
      v33 = (char *)(v37.i64[1] + 8 * (((_QWORD)v39 + *((_QWORD *)&v39 + 1)) >> 12));
    }
    else
    {
      v32 = (std::string::value_type *)(*(_QWORD *)v31 + (v39 & 0xFFF));
      v33 = (char *)(v37.i64[1] + 8 * (((_QWORD)v39 + *((_QWORD *)&v39 + 1)) >> 12));
      v34 = (std::string::value_type *)(*(_QWORD *)v33 + ((v39 + *((_QWORD *)&v39 + 1)) & 0xFFF));
    }
    if (v34 == v32)
      v35 = 0;
    else
      v35 = &v34[512 * (v33 - v31)] - &v32[*(_QWORD *)v33] + *(_QWORD *)v31;
    std::string::__insert_with_size<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(a1, v30, v31, v32, (uint64_t)v33, v34, v35);
  }
  else
  {
    std::string::erase((std::string *)a1, (std::string::size_type)&v27[-v29], v30 - (_QWORD)v27);
  }
  return std::deque<char>::~deque[abi:ne180100](&v37);
}

void sub_191C6B0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::deque<char>::~deque[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_BYTE *boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>(int a1, int64x2_t *a2, int a3, _BYTE *__dst, _BYTE *__src, _BYTE *a6)
{
  _BYTE *v8;
  uint64_t v10;
  BOOL v11;
  size_t v12;

  v8 = __dst;
  v10 = a2[2].i64[1];
  if (v10)
    v11 = __dst == __src;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      *v8++ = *(_BYTE *)(*(_QWORD *)(a2->i64[1] + (((unint64_t)a2[2].i64[0] >> 9) & 0x7FFFFFFFFFFFF8))
                       + (a2[2].i64[0] & 0xFFF));
      a2[2] = vaddq_s64(a2[2], (int64x2_t)xmmword_191D40670);
      std::deque<char>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a2, 1);
      v10 = a2[2].i64[1];
    }
    while (v10 && v8 != __src);
  }
  if (v10)
  {
    while (v8 != a6)
    {
      std::deque<char>::push_back(a2, v8);
      *v8++ = *(_BYTE *)(*(_QWORD *)(a2->i64[1] + (((unint64_t)a2[2].i64[0] >> 9) & 0x7FFFFFFFFFFFF8))
                       + (a2[2].i64[0] & 0xFFF));
      a2[2] = vaddq_s64(a2[2], (int64x2_t)xmmword_191D40670);
      std::deque<char>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a2, 1);
    }
  }
  else if (v8 != __src)
  {
    v12 = a6 - __src;
    if (v12)
      memmove(v8, __src, v12);
    return &v8[v12];
  }
  return a6;
}

void std::deque<char>::push_back(_QWORD *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 9) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<char>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_BYTE *)(*(_QWORD *)(v5 + ((v7 >> 9) & 0x7FFFFFFFFFFFF8)) + (v7 & 0xFFF)) = *a2;
  ++a1[5];
}

void std::deque<char>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x1000;
  v4 = v2 - 4096;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_191C6B590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<char *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<char *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::deque<char>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x1000)
    a2 = 1;
  if (v2 < 0x2000)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 4096;
  }
  return v4 ^ 1u;
}

_QWORD *std::deque<char>::__insert_bidirectional[abi:ne180100]<std::__wrap_iter<char const*>>(int64x2_t *a1, char *a2, uint64_t a3, char *a4, char *a5, unint64_t a6)
{
  unint64_t v6;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  _BYTE *v33;
  _QWORD *v34;
  _BYTE *v35;
  _BYTE *v36;
  _QWORD *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _QWORD *v42;
  _BYTE *v43;
  _BYTE *v44;
  void **v45;
  uint64_t v46;
  size_t v47;
  _BYTE *v48;
  const void **v49;
  char *v50;
  const void **v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  char *v55;
  char *v56;
  char *v57;
  const void **v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  int64_t v62;
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v68;
  __int128 v69;
  __int128 v70;

  v6 = a6;
  v10 = a1[2].u64[0];
  v11 = v10 >> 12;
  v12 = a1->i64[1];
  v13 = a1[1].i64[0];
  v14 = (char *)(v12 + 8 * (v10 >> 12));
  if (v13 == v12)
    v15 = 0;
  else
    v15 = *(_QWORD *)v14 + (a1[2].i64[0] & 0xFFF);
  if (a3 == v15)
    v16 = 0;
  else
    v16 = a3 + ((a2 - v14) << 9) - (v15 + *(_QWORD *)a2) + *(_QWORD *)v14;
  v17 = a1[2].i64[1];
  if (v16 >= v17 - v16)
  {
    v20 = ((v13 - v12) << 9) - 1;
    if (v13 == v12)
      v20 = 0;
    v21 = v10 + v17;
    v22 = v20 - v21;
    if (a6 > v22)
    {
      std::deque<char>::__add_back_capacity(a1, a6 - v22);
      v17 = a1[2].i64[1];
      v12 = a1->i64[1];
      v13 = a1[1].i64[0];
      v21 = a1[2].i64[0] + v17;
    }
    v23 = (_QWORD *)(v12 + 8 * (v21 >> 12));
    if (v13 == v12)
      v24 = 0;
    else
      v24 = (char *)(*v23 + (v21 & 0xFFF));
    *(_QWORD *)&v68 = v12 + 8 * (v21 >> 12);
    *((_QWORD *)&v68 + 1) = v24;
    v29 = v17 - v16;
    if (v17 - v16 >= v6)
    {
      v30 = a5;
      if (!v6)
        goto LABEL_84;
    }
    else
    {
      if (v29 >= v6 >> 1)
        v30 = &a5[v17 - v16 - v6];
      else
        v30 = &a4[v29];
      if (v30 == a5)
      {
        v30 = a5;
      }
      else
      {
        v31 = v30;
        do
        {
          *v24++ = *v31;
          if (&v24[-*v23] == (char *)4096)
          {
            v32 = (char *)v23[1];
            ++v23;
            v24 = v32;
          }
          ++v31;
          ++a1[2].i64[1];
        }
        while (v31 != a5);
      }
      v6 = v17 - v16;
      if (!v29)
        goto LABEL_84;
    }
    v49 = (const void **)std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator-[abi:ne180100]((uint64_t)&v68, v6);
    v51 = v49;
    v52 = v50;
    v53 = *((_QWORD *)&v68 + 1);
    if (*((char **)&v68 + 1) != v50)
    {
      v54 = v49;
      v55 = v50;
      do
      {
        *v24++ = *v55;
        if (&v24[-*v23] == (char *)4096)
        {
          v56 = (char *)v23[1];
          ++v23;
          v24 = v56;
        }
        if (&(++v55)[-*v54] == (char *)4096)
        {
          v57 = (char *)v54[1];
          ++v54;
          v55 = v57;
        }
        ++a1[2].i64[1];
        v53 = *((_QWORD *)&v68 + 1);
      }
      while (v55 != *((char **)&v68 + 1));
    }
    if (v6 < v29)
    {
      v58 = (const void **)std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator-[abi:ne180100]((uint64_t)&v68, v29);
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>,0>(v58, v59, v51, v52, (const void **)v68, *((char **)&v68 + 1), (const void ***)&v69);
      v53 = *((_QWORD *)&v70 + 1);
      v68 = v70;
    }
    if (v30 != a4)
    {
      v61 = (uint64_t *)(v68 - 8);
      v60 = *(_QWORD *)v68;
      while (1)
      {
        v62 = v53 - v60;
        if (v30 - a4 >= v62)
          v63 = v62;
        else
          v63 = v30 - a4;
        v30 -= v63;
        if (v63)
          memmove((void *)(v53 - v63), v30, v63);
        if (v30 == a4)
          break;
        v64 = *v61--;
        v60 = v64;
        v53 = v64 + 4096;
      }
    }
    goto LABEL_84;
  }
  if (a6 > v10)
  {
    std::deque<char>::__add_front_capacity((void **)a1, a6 - v10);
    v10 = a1[2].u64[0];
    v12 = a1->i64[1];
    v13 = a1[1].i64[0];
    v11 = v10 >> 12;
  }
  v18 = (_QWORD *)(v12 + 8 * v11);
  if (v13 == v12)
    v19 = 0;
  else
    v19 = *v18 + (v10 & 0xFFF);
  *(_QWORD *)&v68 = v12 + 8 * v11;
  *((_QWORD *)&v68 + 1) = v19;
  if (v6 <= v16)
  {
    v25 = a4;
    if (!v6)
      goto LABEL_84;
    goto LABEL_46;
  }
  if (v16 >= v6 >> 1)
    v25 = &a4[v6 - v16];
  else
    v25 = &a5[-v16];
  if (v25 == a4)
  {
    v25 = a4;
  }
  else
  {
    v26 = v25;
    do
    {
      if (v19 == *v18)
      {
        v27 = *--v18;
        v19 = v27 + 4096;
      }
      v28 = *--v26;
      *(_BYTE *)--v19 = v28;
      a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_191D40680);
    }
    while (v26 != a4);
  }
  v6 = v16;
  if (v16)
  {
LABEL_46:
    v34 = std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v68, v6);
    v35 = v33;
    v36 = (_BYTE *)*((_QWORD *)&v68 + 1);
    if (*((_BYTE **)&v68 + 1) != v33)
    {
      v37 = v34;
      v38 = v33;
      do
      {
        if (v19 == *v18)
        {
          v39 = *--v18;
          v19 = v39 + 4096;
        }
        if (v38 == (_BYTE *)*v37)
        {
          v40 = *--v37;
          v38 = (_BYTE *)(v40 + 4096);
        }
        v41 = *--v38;
        *(_BYTE *)--v19 = v41;
        a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_191D40680);
        v36 = (_BYTE *)*((_QWORD *)&v68 + 1);
      }
      while (v38 != *((_BYTE **)&v68 + 1));
    }
    if (v6 < v16)
    {
      v42 = std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v68, v16);
      v69 = v68;
      std::__for_each_segment[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>>(v34, v35, (_BYTE **)v42, v43, (void ***)&v69);
      v36 = (_BYTE *)*((_QWORD *)&v69 + 1);
      v68 = v69;
    }
    if (v25 != a5)
    {
      v45 = (void **)(v68 + 8);
      v44 = *(_BYTE **)v68;
      while (1)
      {
        v46 = v44 - v36 + 4096;
        if (a5 - v25 >= v46)
          v47 = v46;
        else
          v47 = a5 - v25;
        if (v47)
          memmove(v36, v25, v47);
        v25 += v47;
        if (v25 == a5)
          break;
        v48 = *v45++;
        v44 = v48;
        v36 = v48;
      }
    }
  }
LABEL_84:
  v65 = a1->i64[1];
  if (a1[1].i64[0] == v65)
    v66 = 0;
  else
    v66 = *(_QWORD *)(v65 + 8 * ((unint64_t)a1[2].i64[0] >> 12)) + (a1[2].i64[0] & 0xFFF);
  *(_QWORD *)&v69 = v65 + 8 * ((unint64_t)a1[2].i64[0] >> 12);
  *((_QWORD *)&v69 + 1) = v66;
  return std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v69, v16);
}

void std::deque<char>::__add_front_capacity(void **a1, unint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  void **v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  void **v23;
  unint64_t v24;
  char *v25;
  char *i;
  int64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void *v43;
  char *v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int64_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  void *v65;
  void *v66;
  void *__p[2];
  char *v68;
  char *v69;
  _QWORD *v70;

  v3 = a1[1];
  v4 = a1[2];
  v5 = v4 - v3;
  if (v4 == v3)
    v6 = a2 + 1;
  else
    v6 = a2;
  if (v4 == v3)
    v7 = 0;
  else
    v7 = ((v4 - v3) << 9) - 1;
  if ((v6 & 0xFFF) != 0)
    v8 = (v6 >> 12) + 1;
  else
    v8 = v6 >> 12;
  v9 = (uint64_t)a1[4];
  v10 = v7 - ((_QWORD)a1[5] + v9);
  if (v8 >= v10 >> 12)
    v11 = v10 >> 12;
  else
    v11 = v8;
  if (v8 <= v10 >> 12)
  {
    for (a1[4] = (void *)(v9 + (v11 << 12)); v11; --v11)
    {
      v19 = (void **)a1[2];
      __p[0] = *(v19 - 1);
      a1[2] = v19 - 1;
      std::__split_buffer<char *>::push_front((uint64_t)a1, __p);
    }
  }
  else
  {
    v12 = (uint64_t)(a1 + 3);
    v13 = v8 - v11;
    v14 = (_BYTE *)a1[3] - (_BYTE *)*a1;
    if (v8 - v11 <= (v14 >> 3) - (v5 >> 3))
    {
      if (v13)
      {
        if (v3 == *a1)
        {
LABEL_30:
          v22 = v13;
          do
          {
            __p[0] = operator new(0x1000uLL);
            std::__split_buffer<char *>::push_back(a1, __p);
            --v22;
          }
          while (v22);
          v11 += v13;
          v9 = (uint64_t)a1[4];
        }
        else
        {
          while (1)
          {
            __p[0] = operator new(0x1000uLL);
            std::__split_buffer<char *>::push_front((uint64_t)a1, __p);
            v20 = a1[1];
            v21 = (_BYTE *)a1[2] - v20 == 8 ? 4095 : 4096;
            v9 = (uint64_t)a1[4] + v21;
            a1[4] = (void *)v9;
            if (!--v13)
              break;
            if (v20 == *a1)
              goto LABEL_30;
          }
        }
      }
      for (a1[4] = (void *)(v9 + (v11 << 12)); v11; --v11)
      {
        v23 = (void **)a1[2];
        __p[0] = *(v23 - 1);
        a1[2] = v23 - 1;
        std::__split_buffer<char *>::push_front((uint64_t)a1, __p);
      }
    }
    else
    {
      v15 = v4 == v3;
      v16 = v8 << 12;
      if (v14 >> 2 <= v13 + (v5 >> 3))
        v17 = v13 + (v5 >> 3);
      else
        v17 = v14 >> 2;
      v70 = a1 + 3;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v12, v17);
      else
        v18 = 0;
      v24 = v16 - v15;
      __p[0] = v18;
      __p[1] = v18;
      v68 = v18;
      v69 = &v18[8 * v17];
      do
      {
        v66 = operator new(0x1000uLL);
        std::__split_buffer<char *>::push_back(__p, &v66);
        --v13;
      }
      while (v13);
      v25 = (char *)a1[2];
      for (i = v68; v11; --v11)
      {
        if (i == v69)
        {
          v27 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] <= __p[0])
          {
            if (i == __p[0])
              v35 = 1;
            else
              v35 = (i - (char *)__p[0]) >> 2;
            v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v70, v35);
            v38 = (uint64_t *)__p[1];
            i = &v36[8 * (v35 >> 2)];
            v39 = v68 - (char *)__p[1];
            if (v68 != __p[1])
            {
              i = &v36[8 * (v35 >> 2) + (v39 & 0xFFFFFFFFFFFFFFF8)];
              v40 = 8 * (v39 >> 3);
              v41 = &v36[8 * (v35 >> 2)];
              do
              {
                v42 = *v38++;
                *(_QWORD *)v41 = v42;
                v41 += 8;
                v40 -= 8;
              }
              while (v40);
            }
            v43 = __p[0];
            __p[0] = v36;
            __p[1] = &v36[8 * (v35 >> 2)];
            v68 = i;
            v69 = &v36[8 * v37];
            if (v43)
            {
              operator delete(v43);
              i = v68;
            }
          }
          else
          {
            v28 = v27 >> 3;
            v29 = v27 >> 3 < -1;
            v30 = (v27 >> 3) + 2;
            if (v29)
              v31 = v30;
            else
              v31 = v28 + 1;
            v32 = (char *)__p[1] - 8 * (v31 >> 1);
            v33 = i - (char *)__p[1];
            if (i != __p[1])
            {
              memmove((char *)__p[1] - 8 * (v31 >> 1), __p[1], i - (char *)__p[1]);
              i = (char *)__p[1];
            }
            v34 = &i[-8 * (v31 >> 1)];
            i = &v32[v33];
            __p[1] = v34;
            v68 = &v32[v33];
          }
        }
        *(_QWORD *)i = *((_QWORD *)v25 - 1);
        i = v68 + 8;
        v68 += 8;
        v25 = (char *)a1[2] - 8;
        a1[2] = v25;
      }
      v44 = (char *)a1[1];
      if (v44 == v25)
      {
        v44 = v25;
      }
      else
      {
        do
        {
          if (i == v69)
          {
            v45 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (i == __p[0])
                v52 = 1;
              else
                v52 = (i - (char *)__p[0]) >> 2;
              v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v70, v52);
              v55 = (uint64_t *)__p[1];
              i = &v53[8 * (v52 >> 2)];
              v56 = v68 - (char *)__p[1];
              if (v68 != __p[1])
              {
                i = &v53[8 * (v52 >> 2) + (v56 & 0xFFFFFFFFFFFFFFF8)];
                v57 = 8 * (v56 >> 3);
                v58 = &v53[8 * (v52 >> 2)];
                do
                {
                  v59 = *v55++;
                  *(_QWORD *)v58 = v59;
                  v58 += 8;
                  v57 -= 8;
                }
                while (v57);
              }
              v60 = __p[0];
              __p[0] = v53;
              __p[1] = &v53[8 * (v52 >> 2)];
              v68 = i;
              v69 = &v53[8 * v54];
              if (v60)
              {
                operator delete(v60);
                i = v68;
              }
            }
            else
            {
              v46 = v45 >> 3;
              v29 = v45 >> 3 < -1;
              v47 = (v45 >> 3) + 2;
              if (v29)
                v48 = v47;
              else
                v48 = v46 + 1;
              v49 = (char *)__p[1] - 8 * (v48 >> 1);
              v50 = i - (char *)__p[1];
              if (i != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v48 >> 1), __p[1], i - (char *)__p[1]);
                i = (char *)__p[1];
              }
              v51 = &i[-8 * (v48 >> 1)];
              i = &v49[v50];
              __p[1] = v51;
              v68 = &v49[v50];
            }
          }
          v61 = *(_QWORD *)v44;
          v44 += 8;
          *(_QWORD *)i = v61;
          i = v68 + 8;
          v68 += 8;
        }
        while (v44 != a1[2]);
        v25 = (char *)a1[1];
      }
      v62 = v69;
      v63 = (char *)a1[3];
      v64 = (char *)a1[4];
      a1[2] = i;
      a1[3] = v62;
      v65 = *a1;
      *(_OWORD *)a1 = *(_OWORD *)__p;
      __p[0] = v65;
      __p[1] = v25;
      v68 = v44;
      v69 = v63;
      a1[4] = &v64[v24];
      if (v44 != v25)
        v68 = &v44[(v25 - v44 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v65)
        operator delete(v65);
    }
  }
}

void sub_191C6C36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 8) - *result + a2;
    if (v4 < 1)
      result -= (unint64_t)(4095 - v4) >> 12;
    else
      result += (unint64_t)v4 >> 12;
  }
  return result;
}

void std::deque<char>::__add_back_capacity(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0xFFF) != 0)
    v6 = (v5 >> 12) + 1;
  else
    v6 = v5 >> 12;
  v7 = a1[4];
  if (v6 >= v7 >> 12)
    v8 = v7 >> 12;
  else
    v8 = v6;
  if (v6 <= v7 >> 12)
  {
    for (a1[4] = v7 - (v8 << 12); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<char *>::push_back(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<char *>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 4095;
          else
            v64 = 4096;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 12);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 12;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        std::__split_buffer<char *>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<char *>::push_front((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_191C6C958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator-[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 8) - a2 - *result;
    if (v4 < 1)
      result -= (unint64_t)(4095 - v4) >> 12;
    else
      result += (unint64_t)v4 >> 12;
  }
  return result;
}

void ****std::__for_each_segment[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>>(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, void ***a5)
{
  _QWORD *v7;
  _BYTE *i;
  _BYTE *v9;
  void ***v11;

  v11 = a5;
  if (a1 != a3)
  {
    v7 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4096); ; i = v9 + 4096)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>::operator()[abi:ne180100](&v11, a2, i);
      if (v7 == a3)
        break;
      v9 = (_BYTE *)*v7++;
      a2 = v9;
    }
    a2 = *a3;
  }
  return std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>::operator()[abi:ne180100](&v11, a2, a4);
}

void ****std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>::operator()[abi:ne180100](void ****result, _BYTE *__src, _BYTE *a3)
{
  void ***v3;
  void **v4;
  void **v5;
  _BYTE *v7;
  void ****v8;
  void **v9;
  char *v10;
  uint64_t v11;
  size_t v12;
  void **v13;

  v3 = *result;
  v5 = **result;
  v4 = (*result)[1];
  if (__src != a3)
  {
    v7 = __src;
    v8 = result;
    v10 = (char *)*v5++;
    v9 = (void **)v10;
    while (1)
    {
      v11 = (char *)v9 - (char *)v4 + 4096;
      if (a3 - v7 >= v11)
        v12 = v11;
      else
        v12 = a3 - v7;
      if (v12)
        result = (void ****)memmove(v4, v7, v12);
      v7 += v12;
      if (v7 == a3)
        break;
      v13 = (void **)*v5++;
      v9 = v13;
      v4 = v13;
    }
    v4 = (void **)((char *)v4 + v12);
    if ((char *)*(v5 - 1) + 4096 == (char *)v4)
      v4 = (void **)*v5;
    else
      --v5;
    v3 = *v8;
  }
  *v3 = v5;
  v3[1] = v4;
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>,0>@<X0>(const void **a1@<X1>, char *a2@<X2>, const void **a3@<X3>, char *a4@<X4>, const void **a5@<X5>, char *a6@<X6>, const void ***a7@<X8>)
{
  const void **v8;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  void *result;
  uint64_t v20;
  char *v21;
  const void **v22;
  char *v23;
  _BYTE *v24;
  char *v25;
  char *v26;
  size_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  size_t v38;
  uint64_t v39;
  char *v40;

  v8 = a5;
  if (a1 == a3)
  {
    if (a2 == a4)
      goto LABEL_46;
    v35 = (uint64_t)*a5;
    v36 = a4;
    while (1)
    {
      v37 = &a6[-v35];
      if (v36 - a2 >= (uint64_t)v37)
        v38 = (size_t)v37;
      else
        v38 = v36 - a2;
      v36 -= v38;
      a6 -= v38;
      if (v38)
        result = memmove(a6, v36, v38);
      if (v36 == a2)
        break;
      v39 = (uint64_t)*--v8;
      v35 = v39;
      a6 = (char *)(v39 + 4096);
    }
    goto LABEL_44;
  }
  v14 = *a3;
  if (*a3 != a4)
  {
    v15 = (uint64_t)*a5;
    v16 = a4;
    while (1)
    {
      v17 = &a6[-v15];
      if (v16 - v14 >= (uint64_t)v17)
        v18 = (size_t)v17;
      else
        v18 = v16 - v14;
      v16 -= v18;
      a6 -= v18;
      if (v18)
        result = memmove(a6, v16, v18);
      if (v16 == v14)
        break;
      v20 = (uint64_t)*--v8;
      v15 = v20;
      a6 = (char *)(v20 + 4096);
    }
    if ((char *)*v8 + 4096 == a6)
    {
      v21 = (char *)v8[1];
      ++v8;
      a6 = v21;
    }
  }
  v22 = a3 - 1;
  if (a3 - 1 != a1)
  {
    v23 = (char *)*v8;
    do
    {
      v24 = *v22;
      v25 = (char *)*v22 + 4096;
      while (1)
      {
        v26 = (char *)(a6 - v23);
        if (v25 - v24 >= (uint64_t)v26)
          v27 = (size_t)v26;
        else
          v27 = v25 - v24;
        v25 -= v27;
        a6 -= v27;
        if (v27)
          result = memmove(a6, v25, v27);
        if (v25 == v24)
          break;
        v28 = (char *)*--v8;
        v23 = v28;
        a6 = v28 + 4096;
      }
      v23 = (char *)*v8;
      if ((char *)*v8 + 4096 == a6)
      {
        v29 = (char *)v8[1];
        ++v8;
        v23 = v29;
        a6 = v29;
      }
      --v22;
    }
    while (v22 != a1);
  }
  v30 = (char *)*a1 + 4096;
  if (v30 != a2)
  {
    v31 = (uint64_t)*v8;
    while (1)
    {
      v32 = &a6[-v31];
      if (v30 - a2 >= (uint64_t)v32)
        v33 = (size_t)v32;
      else
        v33 = v30 - a2;
      v30 -= v33;
      a6 -= v33;
      if (v33)
        result = memmove(a6, v30, v33);
      if (v30 == a2)
        break;
      v34 = (uint64_t)*--v8;
      v31 = v34;
      a6 = (char *)(v34 + 4096);
    }
LABEL_44:
    if ((char *)*v8 + 4096 == a6)
    {
      v40 = (char *)v8[1];
      ++v8;
      a6 = v40;
    }
  }
LABEL_46:
  *a7 = a3;
  a7[1] = (const void **)a4;
  a7[2] = v8;
  a7[3] = (const void **)a6;
  return result;
}

char *std::string::__insert_with_size<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(uint64_t a1, uint64_t a2, _QWORD *a3, std::string::value_type *a4, uint64_t a5, std::string::value_type *a6, std::string::size_type a7)
{
  std::string *v8;
  std::string::size_type v9;
  std::string::size_type size;
  std::string *p_p;
  uint64_t v12;
  std::string __p;

  v8 = (std::string *)a1;
  if (*(char *)(a1 + 23) < 0)
  {
    v9 = a2 - *(_QWORD *)a1;
    if (!a7)
    {
      v8 = *(std::string **)a1;
      return (char *)v8 + v9;
    }
  }
  else
  {
    v9 = a2 - a1;
    if (!a7)
      return (char *)v8 + v9;
  }
  std::string::__init_with_sentinel[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(&__p, a3, a4, a5, a6);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  v12 = std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(v8, a7, v9, (char *)p_p, (char *)p_p + size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return (char *)v12;
}

void sub_191C6CE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  std::string *v9;
  std::string::size_type size;
  std::string::size_type v11;
  std::string *v12;
  size_t v13;
  std::string::size_type v14;
  _BYTE *v15;
  char v16;

  v9 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v11 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v11 = 22;
    v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      v13 = size - __n_copy;
      if (size == __n_copy)
        size = __n_copy;
      else
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      goto LABEL_10;
    }
  }
  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  v14 = size + __n_add;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    v9->__r_.__value_.__l.__size_ = v14;
  else
    *((_BYTE *)&v9->__r_.__value_.__s + 23) = v14 & 0x7F;
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    v15 = (char *)v12 + __n_copy;
    do
    {
      v16 = *a4++;
      *v15++ = v16;
    }
    while (a4 != a5);
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  return (uint64_t)v9 + __n_copy;
}

void std::string::__init_with_sentinel[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(std::string *this, _QWORD *a2, std::string::value_type *a3, uint64_t a4, std::string::value_type *a5)
{
  std::string::value_type *v6;
  std::string::value_type *v9;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a3 != a5)
  {
    v6 = a3;
    do
    {
      std::string::push_back(this, *v6++);
      if (&v6[-*a2] == (std::string::value_type *)4096)
      {
        v9 = (std::string::value_type *)a2[1];
        ++a2;
        v6 = v9;
      }
    }
    while (v6 != a5);
  }
}

void sub_191C6CFA4(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_191C6CFC0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::deque<char>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 2048;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 4096;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<char *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<char *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_191C6D120(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

_QWORD *applesauce::CF::convert_to<std::string,0>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID TypeID;
  std::runtime_error *exception;

  if (!a1 || (TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(a1)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return applesauce::CF::details::CFString_get_value<true>(a1, a2);
}

void sub_191C6D2CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *applesauce::CF::convert_error@<X0>(std::runtime_error *a1@<X8>)
{
  return std::runtime_error::runtime_error(a1, "Could not convert");
}

_QWORD *applesauce::CF::details::CFString_get_value<true>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  char *CStringPtr;
  CFIndex Length;
  UInt8 *v7;
  CFIndex maxBufLen;
  CFRange v9;
  CFRange v10;

  CStringPtr = (char *)CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
    return std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, CStringPtr);
  Length = CFStringGetLength(a1);
  maxBufLen = 0;
  v9.location = 0;
  v9.length = Length;
  CFStringGetBytes(a1, v9, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  std::string::basic_string[abi:ne180100]((_QWORD *)a2, maxBufLen, 0);
  if (*(char *)(a2 + 23) >= 0)
    v7 = (UInt8 *)a2;
  else
    v7 = *(UInt8 **)a2;
  v10.location = 0;
  v10.length = Length;
  return (_QWORD *)CFStringGetBytes(a1, v10, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
}

void sub_191C6D3D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_191C6D4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_191C6D5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

CoreNLP::ParagraphTagger *CoreNLP::ParagraphTagger::createParagraphTagger(CoreNLP::ParagraphTagger *this, CoreNLP::TaggerContext *a2)
{
  CoreNLP::ParagraphTagger *v3;

  v3 = (CoreNLP::ParagraphTagger *)operator new();
  CoreNLP::ParagraphTagger::ParagraphTagger(v3, this);
  return v3;
}

void sub_191C6D618(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10F1C40BE244B8ALL);
  _Unwind_Resume(a1);
}

CoreNLP::ParagraphTagger *CoreNLP::ParagraphTagger::ParagraphTagger(CoreNLP::ParagraphTagger *this, CoreNLP::TaggerContext *a2)
{
  _QWORD *v3;

  *CoreNLP::Tagger::Tagger(this, (uint64_t)a2) = &off_1E2DF2210;
  v3 = (_QWORD *)operator new();
  CoreNLP::StringBuffer::StringBuffer(v3);
  *((_QWORD *)this + 5) = v3;
  *((_QWORD *)this + 6) = v3;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = 0;
  return this;
}

void sub_191C6D6A0(_Unwind_Exception *a1)
{
  CoreNLP::SubWordTagger *v1;
  uint64_t v2;

  MEMORY[0x19401E994](v2, 0x1060C40F6749743);
  CoreNLP::SubWordTagger::~SubWordTagger(v1);
  _Unwind_Resume(a1);
}

_QWORD *CoreNLP::ParagraphTagger::ParagraphTagger(CoreNLP::ParagraphTagger *this, CoreNLP::TaggerContext *a2, CoreNLP::StringBuffer *a3, uint64_t a4)
{
  _QWORD *result;

  result = CoreNLP::Tagger::Tagger(this, (uint64_t)a2);
  *result = &off_1E2DF2210;
  result[5] = 0;
  result[6] = a3;
  result[7] = 0;
  result[8] = 0;
  result[9] = a4;
  return result;
}

const __CFString *CoreNLP::ParagraphTagger::setString(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, int a5)
{
  const __CFString *result;
  CFRange v10;

  CoreNLP::Tagger::setString((_QWORD *)a1, a2, a3, a4, a5);
  *(_QWORD *)(a1 + 64) = 0;
  v10.location = a3;
  v10.length = a4;
  result = CoreNLP::StringBuffer::setString(*(const __CFString ***)(a1 + 48), a2, v10, **(_DWORD **)(a1 + 32) >> 31);
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t CoreNLP::ParagraphTagger::getCharacterBuffer(CoreNLP::ParagraphTagger *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (!result)
  {
    result = CoreNLP::StringBuffer::getSubStringCharsOfRange(*((CoreNLP::StringBuffer **)this + 6), *(CFRange *)(*((_QWORD *)this + 4) + 16));
    *((_QWORD *)this + 7) = result;
  }
  return result;
}

uint64_t CoreNLP::ParagraphTagger::enumerateTokensInRange(CoreNLP::ParagraphTagger *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[3];
  char v21;

  v21 = 0;
  v20[2] = 0;
  result = CoreNLP::ParagraphTagger::getCharacterBuffer(a1);
  if (result)
  {
    v10 = 0;
    v11 = result - 2 * *(_QWORD *)(*((_QWORD *)a1 + 4) + 16) + 2 * a2 + 2;
    v12 = 0;
    do
    {
      if (v10 < a3)
      {
        v13 = (_WORD *)(v11 + 2 * v10);
        v14 = v10;
        while (1)
        {
          v15 = (unsigned __int16)*(v13 - 1);
          if ((v15 - 14) >= 0x201B)
          {
            v16 = v15 == 10 || v15 == 13;
            if (v16 || v15 == 8233)
              break;
          }
          ++v14;
          ++v13;
          if (a3 == v14)
          {
            v12 = a3;
            goto LABEL_21;
          }
        }
        v12 = v14 + 1;
        if (v14 + 1 < a3 - 1 && v15 == 13)
        {
          if (*v13 == 10)
            v18 = v14 + 1;
          else
            v18 = v14;
          v12 = v18 + 1;
        }
      }
LABEL_21:
      v20[0] = v10 + a2;
      v20[1] = v12 - v10;
      result = (*(uint64_t (**)(uint64_t, _QWORD *, char *))(a5 + 16))(a5, v20, &v21);
      if (v21)
        v19 = 0;
      else
        v19 = v12 < a3;
      v10 = v12;
    }
    while (v19);
  }
  return result;
}

uint64_t CoreNLP::ParagraphTagger::IsParagraphSeparatorTypeCharacter(CoreNLP::ParagraphTagger *this)
{
  _BOOL4 v1;
  unsigned int v2;

  v1 = (_DWORD)this == 8233;
  if ((_DWORD)this == 13)
    v1 = 1;
  v2 = (_DWORD)this == 10 || v1;
  if (((_DWORD)this - 14) >= 0x201B)
    return v2;
  else
    return 0;
}

CoreNLP::ParagraphTagger *CoreNLP::ParagraphTagger::fastEnumerateTokens(CoreNLP::ParagraphTagger *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  v4 = *((_QWORD *)result + 4);
  if (*(_BYTE *)(v4 + 32))
  {
    v6 = *(_QWORD *)(v4 + 24);
    if (v6)
      return (CoreNLP::ParagraphTagger *)CoreNLP::ParagraphTagger::enumerateTokensInRange(result, *(_QWORD *)(v4 + 16), v6, a4, a3);
  }
  return result;
}

CoreNLP::ParagraphTagger *CoreNLP::ParagraphTagger::enumerateTokens(CoreNLP::ParagraphTagger *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  v5 = *((_QWORD *)a1 + 4);
  if (*(_BYTE *)(v5 + 32))
  {
    v6 = *(_QWORD *)(v5 + 24);
    v7 = !v6 || a3 == 0;
    if (!v7 && a2 != -1)
    {
      v9 = *(_QWORD *)(v5 + 16);
      v11 = a2 < v9;
      v10 = v9 + v6;
      v11 = !v11 && a2 + a3 <= v10;
      if (v11)
        return (CoreNLP::ParagraphTagger *)CoreNLP::ParagraphTagger::enumerateTokensInRange(a1, a2, a3, a4, a5);
    }
  }
  return a1;
}

char *CoreNLP::ParagraphTagger::goToTokenAtIndex(CoreNLP::ParagraphTagger *this, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char *v8;
  uint64_t CharacterBuffer;
  uint64_t v10;
  int v11;
  BOOL v12;
  BOOL v13;
  int v14;
  BOOL v15;
  uint64_t v18;
  int v19;
  BOOL v20;

  v3 = *((_QWORD *)this + 4);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = a3 - v4;
  if (a3 < v4 || *(_QWORD *)(v3 + 24) + v4 <= a3)
    return 0;
  v8 = (char *)this + 8;
  v7 = *((_QWORD *)this + 1);
  if (v7 <= a3 && *((_QWORD *)this + 2) + v7 > a3)
    return v8;
  CharacterBuffer = CoreNLP::ParagraphTagger::getCharacterBuffer(this);
  if (!CharacterBuffer)
    return 0;
  if (v5)
  {
    v10 = v5 - 1;
    v11 = *(unsigned __int16 *)(CharacterBuffer + 2 * (v5 - 1));
    if (*(_WORD *)(CharacterBuffer + 2 * v5) != 10 || v11 != 13)
    {
      v10 = v5;
      v11 = *(unsigned __int16 *)(CharacterBuffer + 2 * v5);
    }
    if (v10)
    {
      if ((unsigned __int16)(v11 - 14) < 0x201Bu
        || (v11 != 10 ? (v12 = v11 == 8233) : (v12 = 1), !v12 ? (v13 = v11 == 13) : (v13 = 1), !v13 || (--v10, v10)))
      {
        while (1)
        {
          v14 = *(unsigned __int16 *)(CharacterBuffer + 2 * v10);
          if ((v14 - 14) >= 0x201B)
          {
            v15 = v14 == 10 || v14 == 8233;
            if (v15 || v14 == 13)
              break;
          }
          if (!--v10)
            goto LABEL_34;
        }
        ++v10;
      }
    }
  }
  else
  {
    v10 = 0;
  }
LABEL_34:
  v18 = *(_QWORD *)(v3 + 24);
  if (v5 < v18)
  {
    while (1)
    {
      v19 = *(unsigned __int16 *)(CharacterBuffer + 2 * v5);
      if ((v19 - 14) >= 0x201B)
      {
        v20 = v19 == 10 || v19 == 13;
        if (v20 || v19 == 8233)
          break;
      }
      if (v18 == ++v5)
      {
        v5 = *(_QWORD *)(v3 + 24);
        goto LABEL_50;
      }
    }
    ++v5;
  }
  if (v5 < v18 - 1 && *(_WORD *)(CharacterBuffer + 2 * v5) == 13 && *(_WORD *)(CharacterBuffer + 2 * (v5 + 1)) == 10)
    ++v5;
LABEL_50:
  *((_QWORD *)this + 1) = v10 + v4;
  *((_QWORD *)this + 2) = v5 - v10;
  *((_QWORD *)this + 8) = v5;
  return v8;
}

char *CoreNLP::ParagraphTagger::getNextToken(CoreNLP::ParagraphTagger *this)
{
  uint64_t v1;
  uint64_t CharacterBuffer;
  uint64_t v4;
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  UChar32 v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v14;
  CFIndex v15;
  CFRange RangeOfComposedCharactersAtIndex;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *((_QWORD *)this + 4);
  if (*((_QWORD *)this + 8) >= *(_QWORD *)(v1 + 24))
    return 0;
  CharacterBuffer = CoreNLP::ParagraphTagger::getCharacterBuffer(this);
  if (!CharacterBuffer)
    return 0;
  v4 = 0;
  v5 = *((_QWORD *)this + 8);
  v6 = (_WORD *)(CharacterBuffer + 2 * v5 + 2);
  while (1)
  {
    v7 = v5 + v4;
    if (v5 + v4 >= *(_QWORD *)(v1 + 24))
      goto LABEL_39;
    v8 = v4;
    v9 = (unsigned __int16)*(v6 - 1);
    if ((v9 - 14) >= 0x201B)
    {
      v10 = v9 == 10 || v9 == 13;
      if (v10 || v9 == 8233)
        break;
    }
    ++v4;
    v12 = *((_QWORD *)this + 9);
    if (v12 >= 1 && v4 >= v12)
    {
      if (u_isspace((unsigned __int16)*(v6 - 1)) || u_ispunct(v9))
      {
        v20 = v5 + v8;
LABEL_38:
        v7 = v20 + 1;
        goto LABEL_39;
      }
      v12 = *((_QWORD *)this + 9);
    }
    ++v6;
    if (v12 >= 1 && v4 == v12 + 36)
    {
      v14 = *(_QWORD *)(v1 + 16);
      v15 = *(_QWORD *)(v1 + 24);
      RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex((CFStringRef)*(_QWORD *)(*((_QWORD *)this + 4) + 8), v5 + v4 + v14);
      v7 = v5 + v8 + 1;
      if ((RangeOfComposedCharactersAtIndex.location & 0x8000000000000000) == 0
        && RangeOfComposedCharactersAtIndex.length >= 2)
      {
        v7 = RangeOfComposedCharactersAtIndex.location - v14;
        if (RangeOfComposedCharactersAtIndex.location - v14 >= v15 || v7 < v5)
          v7 = v5 + v4;
      }
      goto LABEL_39;
    }
  }
  v7 = v5 + v4 + 1;
  if (v9 == 13 && v7 < *(_QWORD *)(v1 + 24) - 1)
  {
    if (*v6 == 10)
      v19 = v5 + 1;
    else
      v19 = v5;
    v20 = v19 + v4;
    goto LABEL_38;
  }
LABEL_39:
  *((_QWORD *)this + 1) = *(_QWORD *)(v1 + 16) + v5;
  v18 = (char *)this + 8;
  *((_QWORD *)v18 + 1) = v7 - v5;
  *((_QWORD *)v18 + 7) = v7;
  return v18;
}

void CoreNLP::ParagraphTagger::~ParagraphTagger(CoreNLP::StringBuffer **this)
{
  *this = (CoreNLP::StringBuffer *)&off_1E2DF2210;
  std::unique_ptr<CoreNLP::StringBuffer>::reset[abi:ne180100](this + 5, 0);
  CoreNLP::SubWordTagger::~SubWordTagger((CoreNLP::SubWordTagger *)this);
}

{
  *this = (CoreNLP::StringBuffer *)&off_1E2DF2210;
  std::unique_ptr<CoreNLP::StringBuffer>::reset[abi:ne180100](this + 5, 0);
  CoreNLP::SubWordTagger::~SubWordTagger((CoreNLP::SubWordTagger *)this);
  JUMPOUT(0x19401E994);
}

uint64_t CoreNLP::Tagger::getPartOfSpeechOfCurrentToken(CoreNLP::Tagger *this)
{
  return 15;
}

CoreNLP::StringBuffer *std::unique_ptr<CoreNLP::StringBuffer>::reset[abi:ne180100](CoreNLP::StringBuffer **a1, CoreNLP::StringBuffer *a2)
{
  CoreNLP::StringBuffer *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CoreNLP::StringBuffer::~StringBuffer(result);
    JUMPOUT(0x19401E994);
  }
  return result;
}

_QWORD *CoreNLP::MeCabImpl::MeCabImpl(_QWORD *this)
{
  *this = &off_1E2DF30F8;
  this[1] = 0;
  return this;
}

void CoreNLP::MeCabImpl::~MeCabImpl(CoreNLP::MeCabImpl *this)
{
  *(_QWORD *)this = &off_1E2DF30F8;
  std::unique_ptr<mecab_t,CoreNLP::MeCabImpl::Deleter>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
}

{
  *(_QWORD *)this = &off_1E2DF30F8;
  std::unique_ptr<mecab_t,CoreNLP::MeCabImpl::Deleter>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
  JUMPOUT(0x19401E994);
}

BOOL CoreNLP::MeCabImpl::init(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  CoreNLP *v7;
  void **v8;
  std::string::size_type v9;
  _BOOL8 v10;
  std::string *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v15;
  std::string v16;

  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (!v3)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(&v16, "-d ");
  if (*(char *)(a2 + 23) >= 0)
    v7 = (CoreNLP *)a2;
  else
    v7 = *(CoreNLP **)a2;
  CoreNLP::getPathRelativeToPlatformRoot(v7, __p);
  if ((v15 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v9 = v15;
  else
    v9 = (std::string::size_type)__p[1];
  std::string::append(&v16, (const std::string::value_type *)v8, v9);
  if (((char)v15 & 0x80000000) == 0)
  {
    if (!a3)
      goto LABEL_19;
    goto LABEL_18;
  }
  operator delete(__p[0]);
  if (a3)
LABEL_18:
    std::string::append(&v16, " -l1");
LABEL_19:
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v16;
  else
    v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
  v12 = MEMORY[0x19401EE5C](v11);
  std::unique_ptr<mecab_t,CoreNLP::MeCabImpl::Deleter>::reset[abi:ne180100]((uint64_t *)(a1 + 8), v12);
  v10 = *(_QWORD *)(a1 + 8) != 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v10;
}

void sub_191C6DEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t std::unique_ptr<mecab_t,CoreNLP::MeCabImpl::Deleter>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
    return mecab_destroy();
  return result;
}

uint64_t CoreNLP::MeCabImpl::parseToNode(CoreNLP::MeCabImpl *this, const unsigned __int16 *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return mecab_sparse_tonode2();
  return result;
}

uint64_t CoreNLP::MeCabImpl::parseNBestInit(CoreNLP::MeCabImpl *this, const unsigned __int16 *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return mecab_nbest_init2() != 0;
  return result;
}

uint64_t CoreNLP::MeCabImpl::nextNode(CoreNLP::MeCabImpl *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return mecab_nbest_next_tonode();
  return result;
}

uint64_t CoreNLP::MeCabImpl::getLastNameLength(CoreNLP::MeCabImpl *this, const CoreNLP::UStringPiece *a2)
{
  if (*((_QWORD *)this + 1))
    return ((int)mecab_get_lastname_length() >> 1);
  else
    return 0xFFFFFFFFLL;
}

uint64_t CoreNLP::MeCabImpl::getFeature()
{
  return mecab_get_feature();
}

uint64_t corelm::LanguageModel::LanguageModel(uint64_t a1, CFTypeRef *a2, uint64_t *a3)
{
  CFTypeRef v5;
  uint64_t v6;
  CFTypeRef cf;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  cf = v5;
  corelm::NeuralNetwork::NeuralNetwork(a1, (const __CFDictionary **)&cf);
  if (cf)
    CFRelease(cf);
  v6 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 104) = v6;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  return a1;
}

void sub_191C6E058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

void applesauce::CF::DictionaryRef::~DictionaryRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void applesauce::CF::TypeRefPair::~TypeRefPair(applesauce::CF::TypeRefPair *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)this)
    CFRelease(*(CFTypeRef *)this);
}

void applesauce::CF::URLRef::~URLRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void corelm::LanguageModel::getOutputProbs(corelm::NeuralNetwork *a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *__p[2];
  char v12;
  __n128 v13;

  if (a2 <= 1)
    v7 = 1;
  else
    v7 = a2;
  v8 = corelm::NeuralNetwork::outputDimension(a1);
  if (a3 == 1)
    v9 = v8;
  else
    v9 = v7;
  if (a3 == 1)
    v10 = v7;
  else
    v10 = v8;
  v13.n128_u64[0] = v9;
  v13.n128_u64[1] = v10;
  std::string::basic_string[abi:ne180100]<0>(__p, "output");
  corelm::NeuralNetwork::getOutput<2ul>((uint64_t *)a1, &v13, a3, (uint64_t)__p, a4);
  if (v12 < 0)
    operator delete(__p[0]);
}

void sub_191C6E19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double corelm::NeuralNetwork::getOutput<2ul>@<D0>(uint64_t *a1@<X0>, __n128 *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v8;
  CFIndex v9;
  uint64_t v10;
  const UInt8 *v11;
  CFIndex v12;
  CFStringRef v13;
  CFStringRef v14;
  uint64_t Output;
  double result;
  std::runtime_error *exception;

  v8 = *(_BYTE *)(a4 + 23);
  if (v8 < 0)
  {
    v9 = *(_QWORD *)(a4 + 8);
    if (v9)
      goto LABEL_5;
LABEL_13:
    Output = _MRLNeuralNetworkGetOutput(*a1, 0);
    goto LABEL_14;
  }
  if (!*(_BYTE *)(a4 + 23))
    goto LABEL_13;
  v9 = *(_QWORD *)(a4 + 8);
LABEL_5:
  v10 = *a1;
  if (v8 >= 0)
    v11 = (const UInt8 *)a4;
  else
    v11 = *(const UInt8 **)a4;
  if (v8 >= 0)
    v12 = *(unsigned __int8 *)(a4 + 23);
  else
    v12 = v9;
  v13 = CFStringCreateWithBytes(0, v11, v12, 0x8000100u, 0);
  if (!v13)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v14 = v13;
  Output = _MRLNeuralNetworkGetOutput(v10, (uint64_t)v13);
  CFRelease(v14);
LABEL_14:
  *(_QWORD *)&result = corelm::util::Matrix<float>::Matrix(a5, Output, a2, a3).n128_u64[0];
  return result;
}

void sub_191C6E2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

CFDictionaryRef applesauce::CF::details::make_CFDictionaryRef(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void *v6;
  void **v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  void **v13;
  void **v14;
  void **v15;
  void *v16;
  void *v17;
  void **v18;
  void **v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  void **v24;
  void **v25;
  void **v26;
  void *v27;
  CFDictionaryRef v28;
  std::runtime_error *exception;
  void **values;
  void **v32;
  void **v33;
  void **keys;
  void **v35;
  void **v36;

  v2 = *(_QWORD *)(a1 + 8);
  keys = 0;
  v35 = 0;
  v36 = 0;
  std::vector<void const*>::reserve((void **)&keys, v2);
  values = 0;
  v32 = 0;
  v33 = 0;
  std::vector<void const*>::reserve((void **)&values, v2);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(void ***)a1;
    v5 = *(_QWORD *)a1 + 16 * v3;
    do
    {
      v6 = *v4;
      v7 = v35;
      if (v35 >= v36)
      {
        v9 = v35 - keys;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v10 = ((char *)v36 - (char *)keys) >> 2;
        if (v10 <= v9 + 1)
          v10 = v9 + 1;
        if ((unint64_t)((char *)v36 - (char *)keys) >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v36, v11);
        else
          v12 = 0;
        v13 = (void **)&v12[8 * v9];
        *v13 = v6;
        v8 = v13 + 1;
        v15 = keys;
        v14 = v35;
        if (v35 != keys)
        {
          do
          {
            v16 = *--v14;
            *--v13 = v16;
          }
          while (v14 != v15);
          v14 = keys;
        }
        keys = v13;
        v35 = v8;
        v36 = (void **)&v12[8 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v35 = v6;
        v8 = v7 + 1;
      }
      v35 = v8;
      v17 = v4[1];
      v18 = v32;
      if (v32 >= v33)
      {
        v20 = v32 - values;
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v21 = ((char *)v33 - (char *)values) >> 2;
        if (v21 <= v20 + 1)
          v21 = v20 + 1;
        if ((unint64_t)((char *)v33 - (char *)values) >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v33, v22);
        else
          v23 = 0;
        v24 = (void **)&v23[8 * v20];
        *v24 = v17;
        v19 = v24 + 1;
        v26 = values;
        v25 = v32;
        if (v32 != values)
        {
          do
          {
            v27 = *--v25;
            *--v24 = v27;
          }
          while (v25 != v26);
          v25 = values;
        }
        values = v24;
        v32 = v19;
        v33 = (void **)&v23[8 * v22];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v32 = v17;
        v19 = v18 + 1;
      }
      v32 = v19;
      v4 += 2;
    }
    while (v4 != (void **)v5);
  }
  v28 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v28)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (values)
  {
    v32 = values;
    operator delete(values);
  }
  if (keys)
  {
    v35 = keys;
    operator delete(keys);
  }
  return v28;
}

void sub_191C6E568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  void *v13;

  __cxa_free_exception(v13);
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void std::vector<void const*>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void applesauce::CF::TypeRef::~TypeRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

void applesauce::CF::ArrayRef::~ArrayRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

_QWORD *std::__construct_at[abi:ne180100]<applesauce::CF::ArrayRef,applesauce::CF::ArrayRef const&,applesauce::CF::ArrayRef*>(_QWORD *a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v3;
  return a1;
}

uint64_t _MRLNeuralNetworkGetOutput(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  _Unwind_Exception *Output;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v4 = getMRLNeuralNetworkGetOutputSymbolLoc(void)::ptr;
  v11 = getMRLNeuralNetworkGetOutputSymbolLoc(void)::ptr;
  if (!getMRLNeuralNetworkGetOutputSymbolLoc(void)::ptr)
  {
    v5 = (void *)MontrealLibrary();
    v4 = dlsym(v5, "MRLNeuralNetworkGetOutput");
    v9[3] = (uint64_t)v4;
    getMRLNeuralNetworkGetOutputSymbolLoc(void)::ptr = v4;
  }
  _Block_object_dispose(&v8, 8);
  if (!v4)
  {
    Output = (_Unwind_Exception *)_MRLNeuralNetworkGetOutput();
    _Block_object_dispose(&v8, 8);
    _Unwind_Resume(Output);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v4)(a1, a2, 0);
}

{
  void *v4;
  void *v5;
  _Unwind_Exception *Output;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v4 = getMRLNeuralNetworkGetOutputSymbolLoc(void)::ptr;
  v11 = getMRLNeuralNetworkGetOutputSymbolLoc(void)::ptr;
  if (!getMRLNeuralNetworkGetOutputSymbolLoc(void)::ptr)
  {
    v5 = (void *)MontrealLibrary();
    v4 = dlsym(v5, "MRLNeuralNetworkGetOutput");
    v9[3] = (uint64_t)v4;
    getMRLNeuralNetworkGetOutputSymbolLoc(void)::ptr = v4;
  }
  _Block_object_dispose(&v8, 8);
  if (!v4)
  {
    Output = (_Unwind_Exception *)_MRLNeuralNetworkGetOutput();
    _Block_object_dispose(&v8, 8);
    _Unwind_Resume(Output);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v4)(a1, a2, 0);
}

uint64_t MontrealLibrary(void)
{
  uint64_t v0;
  void *v2;

  if (!MontrealLibraryCore(char **)::frameworkLibrary)
    MontrealLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  v0 = MontrealLibraryCore(char **)::frameworkLibrary;
  if (!MontrealLibraryCore(char **)::frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

{
  uint64_t v0;
  void *v2;

  if (!MontrealLibraryCore(char **)::frameworkLibrary)
    MontrealLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  v0 = MontrealLibraryCore(char **)::frameworkLibrary;
  if (!MontrealLibraryCore(char **)::frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

{
  uint64_t v0;
  void *v2;

  if (!MontrealLibraryCore(char **)::frameworkLibrary)
    MontrealLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  v0 = MontrealLibraryCore(char **)::frameworkLibrary;
  if (!MontrealLibraryCore(char **)::frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

{
  uint64_t v0;
  void *v2;

  if (!MontrealLibraryCore(char **)::frameworkLibrary)
    MontrealLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  v0 = MontrealLibraryCore(char **)::frameworkLibrary;
  if (!MontrealLibraryCore(char **)::frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRef::TypeRef(applesauce::CF::TypeRef *this, char *a2)
{
  void **v3;
  CFIndex v4;
  CFStringRef v5;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v9;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  if ((v9 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v4 = v9;
  else
    v4 = (CFIndex)__p[1];
  v5 = CFStringCreateWithBytes(0, (const UInt8 *)v3, v4, 0x8000100u, 0);
  *(_QWORD *)this = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if ((char)v9 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_191C6E93C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  CFTypeRef *v15;

  if (*v15)
    CFRelease(*v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void corelm::LanguageModel::updateModel<long,void>(uint64_t a1, uint64_t *a2, uint64_t a3, CFTypeRef *a4, uint64_t a5)
{
  _QWORD *v10;
  unint64_t v11;
  int v12;
  _DWORD *v13;
  _DWORD *v14;
  CFTypeRef cf;
  void *v16;
  _BYTE *v17;
  uint64_t v18;
  __int128 v19;
  void *__p[2];
  uint64_t v21;

  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  corelm::NeuralNetwork::setInputTensor<long,void>((uint64_t **)a1, a2, a3, (uint64_t)__p, 1);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (corelm::util::contains<std::string,char const*,void>((uint64_t *)(a1 + 8), "position"))
  {
    v21 = 0;
    v18 = a3 & ~(a3 >> 63);
    v19 = xmmword_191D40700;
    *(_OWORD *)__p = xmmword_191D406F0;
    std::vector<long>::vector<corelm::util::NumRange<long>::iterator,0>((uint64_t)&v16, __p, &v18);
    v10 = v16;
    if (v17 != v16)
    {
      v11 = (v17 - (_BYTE *)v16) >> 3;
      if (v11 <= 1)
        v11 = 1;
      do
      {
        *v10++ += a5;
        --v11;
      }
      while (v11);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "position");
    corelm::NeuralNetwork::setInputTensor<long,void>((uint64_t **)a1, (uint64_t *)v16, (v17 - (_BYTE *)v16) >> 3, (uint64_t)__p, 1);
    if (SHIBYTE(v21) < 0)
      operator delete(__p[0]);
    if (v16)
    {
      v17 = v16;
      operator delete(v16);
    }
  }
  if (corelm::util::contains<std::string,char const*,void>((uint64_t *)(a1 + 8), "temperature"))
  {
    v12 = *(_DWORD *)(a1 + 112);
    v13 = operator new(4uLL);
    *v13 = v12;
    std::string::basic_string[abi:ne180100]<0>(__p, "temperature");
    corelm::NeuralNetwork::setInputTensor<float,void>((uint64_t **)a1, v13, 1, (uint64_t)__p, 1);
    if (SHIBYTE(v21) < 0)
      operator delete(__p[0]);
    operator delete(v13);
  }
  if (corelm::util::contains<std::string,char const*,void>((uint64_t *)(a1 + 8), "segment"))
  {
    v14 = operator new(4uLL);
    *v14 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "segment");
    corelm::NeuralNetwork::setInputTensor<float,void>((uint64_t **)a1, v14, 1, (uint64_t)__p, 1);
    if (SHIBYTE(v21) < 0)
      operator delete(__p[0]);
    operator delete(v14);
  }
  __p[0] = 0;
  std::optional<applesauce::CF::ArrayRef>::value_or[abi:ne180100]<applesauce::CF::ArrayRef>(a4, __p, &cf);
  corelm::NeuralNetwork::predict((uint64_t *)a1, (uint64_t *)&cf);
  if (cf)
    CFRelease(cf);
  if (__p[0])
    CFRelease(__p[0]);
}

void sub_191C6EBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  if (a22 < 0)
    operator delete(__p);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void corelm::NeuralNetwork::setInputTensor<long,void>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t InputTensor;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  const UInt8 *v16;
  CFIndex v17;
  CFStringRef v18;
  CFStringRef v19;
  uint64_t *v20;
  std::runtime_error *exception;
  __int128 *v22;

  v9 = a5 * a3;
  corelm::NeuralNetwork::updateMostRecentInputs<long,void>((uint64_t)a1, a2, a5 * a3, (__int128 *)a4);
  v22 = (__int128 *)a4;
  v10 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 7, (const void **)a4, (uint64_t)&std::piecewise_construct, &v22)[7];
  InputTensor = corelm::NeuralNetwork::createInputTensor((corelm::NeuralNetwork *)a1, a3, a5);
  v12 = a1 + 10;
  v22 = (__int128 *)a4;
  std::__tree<std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::__map_value_compare<std::string,std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MontrealNeuralNetworkTensor *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 10, (const void **)a4, (uint64_t)&std::piecewise_construct, &v22)[7] = InputTensor;
  v22 = (__int128 *)a4;
  v13 = std::__tree<std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::__map_value_compare<std::string,std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MontrealNeuralNetworkTensor *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 10, (const void **)a4, (uint64_t)&std::piecewise_construct, &v22);
  _MRLNeuralNetworkTensorAppendData(v13[7], v10, 4 * v9);
  v14 = (uint64_t)*a1;
  v15 = *(char *)(a4 + 23);
  if (v15 >= 0)
    v16 = (const UInt8 *)a4;
  else
    v16 = *(const UInt8 **)a4;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a4 + 23);
  else
    v17 = *(_QWORD *)(a4 + 8);
  v18 = CFStringCreateWithBytes(0, v16, v17, 0x8000100u, 0);
  if (!v18)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v19 = v18;
  v22 = (__int128 *)a4;
  v20 = std::__tree<std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::__map_value_compare<std::string,std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MontrealNeuralNetworkTensor *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, (const void **)a4, (uint64_t)&std::piecewise_construct, &v22);
  _MRLNeuralNetworkSetInputTensor(v14, (uint64_t)v19, v20[7]);
  CFRelease(v19);
}

void sub_191C6EDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

CFTypeRef *std::optional<applesauce::CF::ArrayRef>::value_or[abi:ne180100]<applesauce::CF::ArrayRef>@<X0>(CFTypeRef *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  CFTypeRef v4;

  if (*((_BYTE *)result + 8))
  {
    v4 = *result;
    if (*result)
      result = (CFTypeRef *)CFRetain(*result);
    *a3 = v4;
  }
  else
  {
    *a3 = *a2;
    *a2 = 0;
  }
  return result;
}

double corelm::NeuralNetwork::updateMostRecentInputs<long,void>(uint64_t a1, uint64_t *a2, unint64_t a3, __int128 *a4)
{
  float *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  double result;
  __int128 v14;
  uint64_t v15;
  __int128 *v16;

  std::vector<float>::vector(&v14, a3);
  if (a3)
  {
    v8 = (float *)v14;
    v9 = 8 * a3;
    do
    {
      v10 = *a2++;
      *v8++ = (float)v10;
      v9 -= 8;
    }
    while (v9);
  }
  v16 = a4;
  v11 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 56), (const void **)a4, (uint64_t)&std::piecewise_construct, &v16);
  v12 = (void *)v11[7];
  if (v12)
  {
    v11[8] = (uint64_t)v12;
    operator delete(v12);
    v11[7] = 0;
    v11[8] = 0;
    v11[9] = 0;
  }
  result = *(double *)&v14;
  *(_OWORD *)(v11 + 7) = v14;
  v11[9] = v15;
  return result;
}

void sub_191C6EF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t corelm::NeuralNetwork::createInputTensor(corelm::NeuralNetwork *this, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef CFDictionaryRef;
  uint64_t v4;
  const void *v5;
  const void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v12 = a3;
  v13 = a2;
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],unsigned long &>((applesauce::CF::TypeRef *)&v14, "InputDimension", &v12);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],unsigned long &>((applesauce::CF::TypeRef *)&v16, "SequenceLength", &v13);
  v11[0] = &v14;
  v11[1] = 2;
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v11);
  v4 = 0;
  v11[2] = CFDictionaryRef;
  do
  {
    v5 = (const void *)v17[v4];
    if (v5)
      CFRelease(v5);
    v6 = (const void *)v17[v4 - 1];
    if (v6)
      CFRelease(v6);
    v4 -= 2;
  }
  while (v4 != -4);
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v7 = getMRLNeuralNetworkTensorCreateSymbolLoc(void)::ptr;
  v17[0] = getMRLNeuralNetworkTensorCreateSymbolLoc(void)::ptr;
  if (!getMRLNeuralNetworkTensorCreateSymbolLoc(void)::ptr)
  {
    v8 = (void *)MontrealLibrary();
    v7 = dlsym(v8, "MRLNeuralNetworkTensorCreate");
    v15[3] = (uint64_t)v7;
    getMRLNeuralNetworkTensorCreateSymbolLoc(void)::ptr = v7;
  }
  _Block_object_dispose(&v14, 8);
  if (!v7)
  {
    dlerror();
    abort_report_np();
    __break(1u);
  }
  v9 = ((uint64_t (*)(CFDictionaryRef))v7)(CFDictionaryRef);
  if (CFDictionaryRef)
    CFRelease(CFDictionaryRef);
  return v9;
}

void sub_191C6F098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t _MRLNeuralNetworkTensorAppendData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  _Unwind_Exception *Output;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v6 = getMRLNeuralNetworkTensorAppendDataSymbolLoc(void)::ptr;
  v13 = getMRLNeuralNetworkTensorAppendDataSymbolLoc(void)::ptr;
  if (!getMRLNeuralNetworkTensorAppendDataSymbolLoc(void)::ptr)
  {
    v7 = (void *)MontrealLibrary();
    v6 = dlsym(v7, "MRLNeuralNetworkTensorAppendData");
    v11[3] = (uint64_t)v6;
    getMRLNeuralNetworkTensorAppendDataSymbolLoc(void)::ptr = v6;
  }
  _Block_object_dispose(&v10, 8);
  if (!v6)
  {
    Output = (_Unwind_Exception *)_MRLNeuralNetworkGetOutput();
    _Block_object_dispose(&v10, 8);
    _Unwind_Resume(Output);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

uint64_t _MRLNeuralNetworkSetInputTensor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  _Unwind_Exception *Output;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v6 = getMRLNeuralNetworkSetInputTensorSymbolLoc(void)::ptr;
  v13 = getMRLNeuralNetworkSetInputTensorSymbolLoc(void)::ptr;
  if (!getMRLNeuralNetworkSetInputTensorSymbolLoc(void)::ptr)
  {
    v7 = (void *)MontrealLibrary();
    v6 = dlsym(v7, "MRLNeuralNetworkSetInputTensor");
    v11[3] = (uint64_t)v6;
    getMRLNeuralNetworkSetInputTensorSymbolLoc(void)::ptr = v6;
  }
  _Block_object_dispose(&v10, 8);
  if (!v6)
  {
    Output = (_Unwind_Exception *)_MRLNeuralNetworkGetOutput();
    _Block_object_dispose(&v10, 8);
    _Unwind_Resume(Output);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v6)(a1, a2, a3, 0);
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_191C6F3B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],unsigned long &>(applesauce::CF::TypeRef *a1, char *a2, uint64_t *a3)
{
  CFNumberRef v5;
  std::runtime_error *exception;
  uint64_t valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  *((_QWORD *)a1 + 1) = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_191C6F4E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

BOOL corelm::util::contains<std::string,char const*,void>(uint64_t *a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v9;

  v3 = *a1;
  v4 = a1[1];
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v5 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v3, v4, (unsigned __int8 **)__p);
  v6 = a1[1];
  if (v9 < 0)
    operator delete(__p[0]);
  return v5 != v6;
}

uint64_t std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v9 = *(unsigned __int8 **)(v3 + 8);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
            return v3;
        }
        else
        {
          if (!*(_BYTE *)(v3 + 23))
            return v3;
          v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t std::vector<long>::vector<corelm::util::NumRange<long>::iterator,0>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v4 = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = a2[1];
  v6 = *a2 + a2[2] * v5;
  v7 = a3[2] * a3[1];
  if (v6 != v7 + *a3)
  {
    v4 = 0;
    v8 = *a3 + v7 - v6;
    do
    {
      ++v4;
      v8 -= v5;
    }
    while (v8);
  }
  v12 = *(_OWORD *)a2;
  v13 = a2[2];
  v10 = *(_OWORD *)a3;
  v11 = a3[2];
  std::vector<long>::__init_with_size[abi:ne180100]<corelm::util::NumRange<long>::iterator,corelm::util::NumRange<long>::iterator>((char *)a1, &v12, &v10, v4);
  return a1;
}

char *std::vector<long>::__init_with_size[abi:ne180100]<corelm::util::NumRange<long>::iterator,corelm::util::NumRange<long>::iterator>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t i;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = a2[1];
    v8 = (uint64_t *)*((_QWORD *)v6 + 1);
    v9 = *a2 + a2[2] * v7;
    for (i = *a3 + a3[2] * a3[1]; i != v9; v9 += v7)
      *v8++ = v9;
    *((_QWORD *)v6 + 1) = v8;
  }
  return result;
}

void sub_191C6F750(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void corelm::NeuralNetwork::setInputTensor<float,void>(uint64_t **a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t InputTensor;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  const UInt8 *v16;
  CFIndex v17;
  CFStringRef v18;
  CFStringRef v19;
  uint64_t *v20;
  std::runtime_error *exception;
  __int128 *v22;

  v9 = a5 * a3;
  corelm::NeuralNetwork::updateMostRecentInputs<float,void>((uint64_t)a1, a2, a5 * a3, (__int128 *)a4);
  v22 = (__int128 *)a4;
  v10 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 7, (const void **)a4, (uint64_t)&std::piecewise_construct, &v22)[7];
  InputTensor = corelm::NeuralNetwork::createInputTensor((corelm::NeuralNetwork *)a1, a3, a5);
  v12 = a1 + 10;
  v22 = (__int128 *)a4;
  std::__tree<std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::__map_value_compare<std::string,std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MontrealNeuralNetworkTensor *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 10, (const void **)a4, (uint64_t)&std::piecewise_construct, &v22)[7] = InputTensor;
  v22 = (__int128 *)a4;
  v13 = std::__tree<std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::__map_value_compare<std::string,std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MontrealNeuralNetworkTensor *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 10, (const void **)a4, (uint64_t)&std::piecewise_construct, &v22);
  _MRLNeuralNetworkTensorAppendData(v13[7], v10, 4 * v9);
  v14 = (uint64_t)*a1;
  v15 = *(char *)(a4 + 23);
  if (v15 >= 0)
    v16 = (const UInt8 *)a4;
  else
    v16 = *(const UInt8 **)a4;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a4 + 23);
  else
    v17 = *(_QWORD *)(a4 + 8);
  v18 = CFStringCreateWithBytes(0, v16, v17, 0x8000100u, 0);
  if (!v18)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v19 = v18;
  v22 = (__int128 *)a4;
  v20 = std::__tree<std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::__map_value_compare<std::string,std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MontrealNeuralNetworkTensor *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, (const void **)a4, (uint64_t)&std::piecewise_construct, &v22);
  _MRLNeuralNetworkSetInputTensor(v14, (uint64_t)v19, v20[7]);
  CFRelease(v19);
}

void sub_191C6F8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

double corelm::NeuralNetwork::updateMostRecentInputs<float,void>(uint64_t a1, const void *a2, unint64_t a3, __int128 *a4)
{
  uint64_t *v6;
  void *v7;
  double result;
  __int128 v9;
  uint64_t v10;
  __int128 *v11;

  v9 = 0uLL;
  v10 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(&v9, a2, (uint64_t)a2 + 4 * a3, a3);
  v11 = a4;
  v6 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 56), (const void **)a4, (uint64_t)&std::piecewise_construct, &v11);
  v7 = (void *)v6[7];
  if (v7)
  {
    v6[8] = (uint64_t)v7;
    operator delete(v7);
    v6[7] = 0;
    v6[8] = 0;
    v6[9] = 0;
  }
  result = *(double *)&v9;
  *(_OWORD *)(v6 + 7) = v9;
  v6[9] = v10;
  return result;
}

void sub_191C6F9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_191C6FA20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_191C6FB08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *Korean::POSID::getPOSCombiningRules(Korean::POSID *this)
{
  unsigned __int8 v1;
  uint64_t i;
  void *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned __int16 *v15[3];
  _QWORD v16[3];
  _QWORD v17[3];
  _QWORD v18[3];
  _QWORD v19[3];
  _QWORD v20[3];
  _QWORD v21[3];
  _QWORD v22[3];
  _QWORD v23[3];
  _QWORD v24[4];

  v24[3] = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v14 = 131076;
    std::vector<unsigned short>::vector[abi:ne180100](v15, &v14, 2);
    v13 = 196612;
    std::vector<unsigned short>::vector[abi:ne180100](v16, &v13, 2);
    v12 = 589846;
    std::vector<unsigned short>::vector[abi:ne180100](v17, &v12, 2);
    v11 = 2686998;
    std::vector<unsigned short>::vector[abi:ne180100](v18, &v11, 2);
    v10 = 589847;
    std::vector<unsigned short>::vector[abi:ne180100](v19, &v10, 2);
    v9 = 589852;
    std::vector<unsigned short>::vector[abi:ne180100](v20, &v9, 2);
    v8 = 720924;
    std::vector<unsigned short>::vector[abi:ne180100](v21, &v8, 2);
    v7 = 786460;
    std::vector<unsigned short>::vector[abi:ne180100](v22, &v7, 2);
    v6 = 917532;
    std::vector<unsigned short>::vector[abi:ne180100](v23, &v6, 2);
    v5 = 2687004;
    std::vector<unsigned short>::vector[abi:ne180100](v24, &v5, 2);
    std::set<std::vector<unsigned short>>::set[abi:ne180100]((uint64_t)&Korean::POSID::getPOSCombiningRules(void)::posCombiningRules, v15, 10);
    for (i = 0; i != -30; i -= 3)
    {
      v4 = (void *)v24[i];
      if (v4)
      {
        v24[i + 1] = v4;
        operator delete(v4);
      }
    }
    __cxa_atexit((void (*)(void *))std::set<std::vector<unsigned short>>::~set[abi:ne180100], &Korean::POSID::getPOSCombiningRules(void)::posCombiningRules, &dword_191C5D000);
  }
  return &Korean::POSID::getPOSCombiningRules(void)::posCombiningRules;
}

void sub_191C6FD64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;

  v3 = 0;
  while (1)
  {
    v4 = *(void **)(v1 + v3 + 216);
    if (v4)
    {
      *(_QWORD *)(v1 + v3 + 224) = v4;
      operator delete(v4);
    }
    v3 -= 24;
    if (v3 == -240)
    {
      _Unwind_Resume(a1);
    }
  }
}

void sub_191C6FE08()
{
  JUMPOUT(0x191C6FDF4);
}

_QWORD *std::vector<unsigned short>::vector[abi:ne180100](_QWORD *a1, const void *a2, uint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<unsigned short>::__vallocate[abi:ne180100](a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 2 * a3);
    a1[1] = &v6[2 * a3];
  }
  return a1;
}

void sub_191C6FE74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::set<std::vector<unsigned short>>::~set[abi:ne180100](uint64_t a1)
{
  std::__tree<std::vector<unsigned short>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

_QWORD *CoreNLP::KoreanLineBreakConnector::KoreanLineBreakConnector(_QWORD *this)
{
  *this = &off_1E2DF2C38;
  return this;
}

void CoreNLP::KoreanLineBreakConnector::~KoreanLineBreakConnector(CoreNLP::KoreanLineBreakConnector *this)
{
  JUMPOUT(0x19401E994);
}

uint64_t CoreNLP::KoreanLineBreakConnector::connect(CoreNLP::KoreanLineBreakConnector *a1, uint64_t a2, uint64_t a3)
{
  CoreNLP::KoreanLineBreakConnector::connectionRules(a1);
}

uint64_t `anonymous namespace'::shouldConnect(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4 || *(_BYTE *)(v4 + 91) == 3)
    return 0;
  v6 = *(unsigned __int16 *)(v4 + 82);
  v7 = *(unsigned __int16 *)(v4 + 80);
  if ((_DWORD)v6 != (_DWORD)v7)
    return *(unsigned __int16 *)(*(_QWORD *)(v4 + 64) - ((v6 - v7) & 0xFFFFFFFFFFFFFFFELL)) == 160;
  v8 = *a1;
  v9 = a1[1];
  if (*a1 == v9)
    return 0;
  do
  {
    result = std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>::operator()(v8, a2, v4, a3);
    if ((result & 1) != 0)
      break;
    v8 += 32;
  }
  while (v8 != v9);
  return result;
}

_QWORD *CoreNLP::KoreanLineBreakConnector::connectionRules(CoreNLP::KoreanLineBreakConnector *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[4];
  _QWORD v7[4];
  _QWORD v8[4];
  _QWORD v9[4];
  _QWORD v10[4];
  _QWORD v11[3];
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v6[0] = &unk_1E2DF3380;
    v6[1] = Korean::twotwoRule;
    v6[3] = v6;
    v7[0] = &unk_1E2DF3380;
    v7[3] = v7;
    v8[0] = &unk_1E2DF3380;
    v8[3] = v8;
    v9[0] = &unk_1E2DF3380;
    v9[3] = v9;
    v10[0] = &unk_1E2DF3380;
    v10[1] = Korean::numberRule;
    v10[3] = v10;
    v11[0] = &unk_1E2DF3380;
    v11[1] = Korean::lineBreakPosRule;
    v12[0] = v11;
    std::vector<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>::vector[abi:ne180100](CoreNLP::KoreanLineBreakConnector::connectionRules(void)const::kLineBreakRuleTable, (uint64_t)v6, 6uLL);
    v3 = 0;
    while (1)
    {
      v4 = (_QWORD *)v12[v3];
      if (&v11[v3] == v4)
        break;
      if (v4)
      {
        v5 = 5;
LABEL_9:
        (*(void (**)(void))(*v4 + 8 * v5))();
      }
      v3 -= 4;
      if (v3 == -24)
      {
        __cxa_atexit((void (*)(void *))std::vector<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>::~vector[abi:ne180100], CoreNLP::KoreanLineBreakConnector::connectionRules(void)const::kLineBreakRuleTable, &dword_191C5D000);
        return CoreNLP::KoreanLineBreakConnector::connectionRules(void)const::kLineBreakRuleTable;
      }
    }
    v4 = &v11[v3];
    v5 = 4;
    goto LABEL_9;
  }
  return CoreNLP::KoreanLineBreakConnector::connectionRules(void)const::kLineBreakRuleTable;
}

void sub_191C70148(_Unwind_Exception *a1)
{
  uint64_t v1;

  CoreNLP::KoreanLineBreakConnector::connectionRules(v1 + 192);
  _Unwind_Resume(a1);
}

BOOL Korean::twotwoRule(unsigned __int16 *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unsigned __int16 *v7;
  int v8;
  UChar32 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  int v13;
  unsigned __int16 *v14;
  int v15;
  UChar32 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  BOOL v21;

  if (*(_BYTE *)(a2 + 90) != 3)
    goto LABEL_9;
  v6 = -56613888;
  v7 = *(unsigned __int16 **)(a2 + 64);
  v8 = *(unsigned __int16 *)(a2 + 80);
  if (v8 != 2)
  {
    if (v8 != 4)
    {
      v9 = 0;
      goto LABEL_8;
    }
    v6 = v7[1] - 56613888;
  }
  v9 = *v7;
  if ((v9 & 0xF800) == 0xD800)
    v9 = v6 + (v9 << 10);
LABEL_8:
  if (u_ispunct(v9))
    return 0;
LABEL_9:
  if (a1)
  {
    v10 = a1[40];
    if ((v10 & 0xFFFE) == 2
      && (!*(_QWORD *)a1 || *(_BYTE *)(*(_QWORD *)a1 + 91) == 2 || a1[41] != v10)
      && a1[44] != 22)
    {
      return 1;
    }
  }
  v11 = *(_WORD *)(a2 + 80);
  if ((v11 & 0xFFFE) != 2)
    goto LABEL_26;
  v12 = *(_QWORD *)(a2 + 8);
  if (!v12 || *(_BYTE *)(v12 + 90) != 3)
    goto LABEL_26;
  v13 = -56613888;
  v14 = *(unsigned __int16 **)(v12 + 64);
  v15 = *(unsigned __int16 *)(v12 + 80);
  if (v15 == 2)
    goto LABEL_21;
  if (v15 == 4)
  {
    v13 = v14[1] - 56613888;
LABEL_21:
    v16 = *v14;
    if ((v16 & 0xF800) == 0xD800)
      v16 = v13 + (v16 << 10);
    goto LABEL_24;
  }
  v16 = 0;
LABEL_24:
  if (u_ispunct(v16))
    return 1;
  v11 = *(_WORD *)(a2 + 80);
LABEL_26:
  if ((v11 & 0xFFFE) != 2)
  {
    if (a3 != 1)
      return 0;
LABEL_38:
    v21 = a1[44] == 22;
    return !v21;
  }
  v17 = *(_QWORD *)(a2 + 8);
  if (v17
    && (*(_BYTE *)(v17 + 91) == 3 || *(unsigned __int16 *)(v17 + 82) != *(unsigned __int16 *)(v17 + 80))
    && *(_WORD *)(a2 + 88) != 36)
  {
    return 1;
  }
  if (a3 == 1)
    goto LABEL_38;
  v18 = a1[44];
  if (v18 != 41)
  {
    if (v18 == 22)
    {
      if (*(_WORD *)(a2 + 88) == 41)
      {
        v19 = *(_QWORD *)(a2 + 8);
        if (v19)
          return *(unsigned __int16 *)(v19 + 88) == 9;
      }
      return 0;
    }
    goto LABEL_46;
  }
  if (*(_QWORD *)a1 && *(_WORD *)(*(_QWORD *)a1 + 88) == 22)
    return 0;
LABEL_46:
  v21 = *(unsigned __int16 *)(a2 + 88) == 36;
  return !v21;
}

uint64_t `anonymous namespace'::punctuationRule(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  int8_t v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned __int16 *v8;
  int v9;
  UChar32 v10;
  UChar32 v11;
  int8_t v12;
  int v13;
  uint64_t v14;

  if (result)
  {
    v2 = (uint64_t *)result;
    if (*(unsigned __int16 *)(result + 80) < 2u)
      return 0;
    v4 = u_charType(**(unsigned __int16 **)(result + 64));
    result = 1;
    v5 = 1 << v4;
    if (((1 << v4) & 0x10100000) == 0)
    {
      if (!a2)
        return 0;
      v6 = *(unsigned __int16 *)(a2 + 80);
      if (v6 < 2)
        return 0;
      if ((v5 & 0x20200000) == 0)
      {
LABEL_18:
        v12 = u_charType(**(unsigned __int16 **)(a2 + 64));
        result = 1;
        v13 = 1 << v12;
        if ((v13 & 0x20200000) == 0)
        {
          if ((v13 & 0x10100000) != 0)
            return 0;
          return (v5 & 0x800000) != 0
              && (v13 & 0x200) != 0
              && (v14 = *v2) != 0
              && *(unsigned __int16 *)(v14 + 80) >= 2u
              && u_charType(**(unsigned __int16 **)(v14 + 64)) == 9
              || CoreNLP::mecab::isPunctuation(a2);
        }
        return result;
      }
      if (*(_BYTE *)(a2 + 90) != 3)
        return 0;
      v7 = -56613888;
      v8 = *(unsigned __int16 **)(a2 + 64);
      if (v6 != 2)
      {
        if (v6 != 4)
        {
          v11 = 0;
          goto LABEL_17;
        }
        v7 = v8[1] - 56613888;
      }
      v9 = *v8;
      v10 = v7 + (v9 << 10);
      if ((v9 & 0xF800) == 0xD800)
        v11 = v10;
      else
        v11 = *v8;
LABEL_17:
      result = u_ispunct(v11);
      if (!(_DWORD)result)
        return result;
      goto LABEL_18;
    }
  }
  return result;
}

BOOL `anonymous namespace'::alphaSymbolRule(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL8 result;
  unsigned __int16 *v5;
  int v6;
  UChar32 v7;
  int v8;

  v2 = *(unsigned __int16 *)(a2 + 82);
  if (v2 != *(unsigned __int16 *)(a2 + 80) || *(_BYTE *)(a1 + 90) != 5)
    return 0;
  v3 = *(unsigned __int8 *)(a2 + 90);
  if (v3 == 5)
    return 1;
  v5 = *(unsigned __int16 **)(a2 + 64);
  if (v3 == 3)
  {
    v6 = -56613888;
    if (v2 != 2)
    {
      if (v2 != 4)
      {
        v7 = 0;
        return u_ispunct(v7) == 0;
      }
      v6 = v5[1] - 56613888;
    }
    v7 = *v5;
    if ((v7 & 0xF800) == 0xD800)
      v7 = v6 + (v7 << 10);
    return u_ispunct(v7) == 0;
  }
  if (v2 != 2)
    return 0;
  v8 = *v5;
  result = 1;
  if (v8 != 45 && v8 != 95)
    return 0;
  return result;
}

BOOL `anonymous namespace'::numberSymbolRule(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v2;
  int v3;
  int v4;
  UChar32 v5;
  int v6;
  _BOOL8 result;

  if (*(_BYTE *)(a1 + 90) != 4)
    return 0;
  v2 = *(unsigned __int16 **)(a2 + 64);
  v3 = *(unsigned __int16 *)(a2 + 80);
  if (*(_BYTE *)(a2 + 90) == 3)
  {
    v4 = -56613888;
    if (v3 != 2)
    {
      if (v3 != 4)
      {
        v5 = 0;
        return u_ispunct(v5) == 0;
      }
      v4 = v2[1] - 56613888;
    }
    v5 = *v2;
    if ((v5 & 0xF800) == 0xD800)
      v5 = v4 + (v5 << 10);
    return u_ispunct(v5) == 0;
  }
  if (v3 != 2)
    return 0;
  v6 = *v2;
  result = 1;
  if (v6 != 45 && v6 != 95)
    return 0;
  return result;
}

uint64_t Korean::numberRule(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  BOOL v4;
  unsigned int v5;

  if (*(_WORD *)(a1 + 88) != 29)
    return 0;
  v2 = *(unsigned __int16 *)(a2 + 88);
  v3 = v2 >= 0x1C;
  v4 = v2 == 28;
  v5 = (0x12F00000u >> v2) & 1;
  if (!v4 && v3)
    return 0;
  else
    return v5;
}

uint64_t Korean::lineBreakPosRule(Korean::POSID *a1, uint64_t a2)
{
  Korean::POSID *v3;
  unsigned __int16 *v4;
  int v5;
  int v6;
  UChar32 v7;
  int v8;
  _BOOL8 v9;
  int v10;
  int v11;
  unsigned int v12;
  _DWORD *v13;
  unsigned int v14;
  void *__p;
  void *v17;
  _DWORD *v18;

  v3 = a1;
  if (*((_WORD *)a1 + 44) == 29)
  {
    v4 = *(unsigned __int16 **)(a2 + 64);
    v5 = *(unsigned __int16 *)(a2 + 80);
    if (*(_BYTE *)(a2 + 90) != 3)
    {
      if (v5 == 2)
      {
        v8 = *v4;
        v9 = 1;
        if (v8 == 45 || v8 == 95)
          return v9;
      }
      goto LABEL_14;
    }
    v6 = -56613888;
    if (v5 != 2)
    {
      if (v5 != 4)
      {
        v7 = 0;
        goto LABEL_13;
      }
      v6 = v4[1] - 56613888;
    }
    v7 = *v4;
    if ((v7 & 0xF800) == 0xD800)
      v7 = v6 + (v7 << 10);
LABEL_13:
    a1 = (Korean::POSID *)u_ispunct(v7);
    if (!(_DWORD)a1)
      return 1;
  }
LABEL_14:
  if (*(_QWORD *)v3)
  {
    if (*(_WORD *)(*(_QWORD *)v3 + 88) == 29)
    {
      if (*((_BYTE *)v3 + 90) == 3
        || *((_WORD *)v3 + 40) == 2 && ((v10 = **((unsigned __int16 **)v3 + 8), v10 == 95) || v10 == 45))
      {
        if (*(_WORD *)(a2 + 88) == 8964)
          return 1;
      }
    }
  }
  Korean::POSID::getPOSCombiningRules(a1);
  v11 = *((unsigned __int8 *)v3 + 88);
  v12 = *(unsigned __int16 *)(a2 + 88);
  v13 = operator new(4uLL);
  v14 = v12 >> 8;
  if (v12 <= 0xFF)
    v14 = v12;
  __p = v13;
  *v13 = v11 | (v14 << 16);
  v17 = v13 + 1;
  v18 = v13 + 1;
  v9 = std::__tree<std::vector<unsigned short>>::find<std::vector<unsigned short>>((uint64_t)&Korean::POSID::getPOSCombiningRules(void)::posCombiningRules, (unsigned __int16 **)&__p) != (_QWORD *)&unk_1EE21C330;
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  return v9;
}

void sub_191C707D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>::vector[abi:ne180100](_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;

  a1[2] = 0;
  v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    std::vector<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>::__vallocate[abi:ne180100](a1, a3);
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>,std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)> const*,std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)> const*,std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>*>(v4, a2, a2 + 32 * a3, a1[1]);
  }
  return a1;
}

void sub_191C70868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void **std::vector<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>::~vector[abi:ne180100](void **a1)
{
  void **v3;

  v3 = a1;
  std::vector<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t CoreNLP::JapaneseLineBreakConnector::connect(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int16 *v8;
  int v9;
  UChar32 v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned __int16 *v14;
  int v15;
  int v16;
  UChar32 v17;
  int v18;
  int v19;
  unsigned __int16 *v20;
  int v21;
  UChar32 v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)(a2 + 8);
  if (!v2 || *(_BYTE *)(v2 + 91) == 3)
    return 0;
  v5 = *(unsigned __int16 *)(v2 + 82);
  v6 = *(unsigned __int16 *)(v2 + 80);
  if ((_DWORD)v5 != (_DWORD)v6)
  {
    if (*(_WORD *)(*(_QWORD *)(v2 + 64) - ((v5 - v6) & 0xFFFFFFFFFFFFFFFELL)) == 160)
      return 1;
    goto LABEL_22;
  }
  if (*(_BYTE *)(a2 + 90) == 5)
  {
    v7 = *(unsigned __int8 *)(v2 + 90);
    if (v7 == 5)
      return 1;
    v8 = *(unsigned __int16 **)(v2 + 64);
    if (v7 != 3)
    {
      if ((_DWORD)v5 == 2)
      {
        v11 = *v8;
        result = 1;
        if (v11 == 45 || v11 == 95)
          return result;
      }
      goto LABEL_22;
    }
    v9 = -56613888;
    if ((_DWORD)v5 != 2)
    {
      if ((_DWORD)v5 != 4)
      {
        v10 = 0;
        goto LABEL_21;
      }
      v9 = v8[1] - 56613888;
    }
    v10 = *v8;
    if ((v10 & 0xF800) == 0xD800)
      v10 = v9 + (v10 << 10);
LABEL_21:
    if (!u_ispunct(v10))
      return 1;
  }
LABEL_22:
  v12 = *(unsigned __int8 *)(a2 + 90);
  if (v12 != 4)
    goto LABEL_36;
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(unsigned __int16 **)(v13 + 64);
  v15 = *(unsigned __int16 *)(v13 + 80);
  if (*(_BYTE *)(v13 + 90) == 3)
  {
    v16 = -56613888;
    if (v15 != 2)
    {
      if (v15 != 4)
      {
        v17 = 0;
        goto LABEL_34;
      }
      v16 = v14[1] - 56613888;
    }
    v17 = *v14;
    if ((v17 & 0xF800) == 0xD800)
      v17 = v16 + (v17 << 10);
LABEL_34:
    if (u_ispunct(v17))
    {
      v12 = *(unsigned __int8 *)(a2 + 90);
LABEL_36:
      if (v12 != 3)
        goto LABEL_44;
      v19 = -56613888;
      v20 = *(unsigned __int16 **)(a2 + 64);
      v21 = *(unsigned __int16 *)(a2 + 80);
      if (v21 != 2)
      {
        if (v21 != 4)
        {
          v22 = 0;
          goto LABEL_43;
        }
        v19 = v20[1] - 56613888;
      }
      v22 = *v20;
      if ((v22 & 0xF800) == 0xD800)
        v22 = v19 + (v22 << 10);
LABEL_43:
      if (u_ispunct(v22))
LABEL_44:
      v23 = *(_QWORD *)(a2 + 8);
      if (v23)
      {
        if (CoreNLP::mecab::isPunctuation(v23))
        v24 = *(_QWORD *)(a2 + 8);
      }
      else
      {
        v24 = 0;
      }
      return Japanese::lineBreakPosRule(a2, v24) ^ 1;
    }
    return 1;
  }
  if (v15 != 2)
    goto LABEL_44;
  v18 = *v14;
  result = 1;
  if (v18 != 45 && v18 != 95)
    goto LABEL_44;
  return result;
}

BOOL CoreNLP::mecab::isPunctuation(uint64_t a1)
{
  int v1;
  unsigned __int16 *v2;
  int v3;
  UChar32 v4;

  if (*(_BYTE *)(a1 + 90) != 3)
    return 0;
  v1 = -56613888;
  v2 = *(unsigned __int16 **)(a1 + 64);
  v3 = *(unsigned __int16 *)(a1 + 80);
  if (v3 == 2)
    goto LABEL_5;
  if (v3 == 4)
  {
    v1 = v2[1] - 56613888;
LABEL_5:
    v4 = *v2;
    if ((v4 & 0xF800) == 0xD800)
      v4 = v1 + (v4 << 10);
    return u_ispunct(v4) != 0;
  }
  v4 = 0;
  return u_ispunct(v4) != 0;
}

uint64_t Japanese::lineBreakPosRule(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  _BYTE *v6;
  _BYTE *v7;
  const char *v8;
  BOOL v9;
  const char *v10;
  uint64_t result;
  unsigned __int16 *v12;
  int v13;
  int v14;
  UChar32 v15;
  UChar32 v16;
  UChar32 v17;
  int v18;

  v3 = *(unsigned __int16 *)(a1 + 88);
  if (a2)
  {
    v4 = *(unsigned __int16 *)(a2 + 88);
    if (v3 == 5)
    {
      if (v4 - 1 < 0x15 && ((0x10003Fu >> (v4 - 1)) & 1) != 0)
        return 0;
      goto LABEL_9;
    }
  }
  else
  {
    v4 = 0;
    if (v3 == 5)
    {
LABEL_9:
      v5 = 1;
      goto LABEL_10;
    }
  }
  v5 = v3 - 1 < 6;
  if (v3 - 1 < 6 || (v3 <= 0x15 ? (v9 = ((1 << v3) & 0x2C0080) == 0) : (v9 = 1), !v9))
  {
    if (v4 - 1 >= 6)
    {
      if (v4 > 0x15 || ((1 << v4) & 0x2C0080) == 0)
        goto LABEL_10;
    }
    else if (v4 == 5)
    {
      goto LABEL_10;
    }
    if ((*(_WORD *)(a1 + 80) & 0xFFFE) == 2 || a2 && (*(_WORD *)(a2 + 80) & 0xFFFE) == 2)
      return 0;
LABEL_10:
    v6 = memchr(&Japanese::kConclusiveOrAttributiveFormPosIDs, (char)v3, 4uLL);
    v7 = &Japanese::kSuffixPosIDs;
    if (v6)
      v7 = v6;
    if (v7 - (_BYTE *)&Japanese::kConclusiveOrAttributiveFormPosIDs != 4)
      return 1;
    if (v5)
      goto LABEL_16;
    goto LABEL_14;
  }
  if (v3 <= 0xFF)
  {
    v5 = 0;
    goto LABEL_10;
  }
LABEL_14:
  if (v3 > 0x15 || ((1 << v3) & 0x2C0080) == 0)
  {
    if (v3 > 0x1C)
      return 1;
LABEL_29:
    if (v4 > 0x1C)
      return 1;
    if (!*(_QWORD *)a1 || *(_BYTE *)(*(_QWORD *)a1 + 90) != 4)
      return (((0x1109100uLL >> v3) & 1) == 0) & (0x1F8FF0FFuLL >> v4);
    v12 = *(unsigned __int16 **)(a1 + 64);
    v13 = *(unsigned __int16 *)(a1 + 80);
    if (*(_BYTE *)(a1 + 90) != 3)
    {
      if (v13 == 2)
      {
        v18 = *v12;
        if (v18 == 45 || v18 == 95)
        {
LABEL_56:
          if (((0x1109100uLL >> v4) & 1) == 0)
            return 1;
        }
      }
      return (((0x1109100uLL >> v3) & 1) == 0) & (0x1F8FF0FFuLL >> v4);
    }
    v14 = -56613888;
    if (v13 != 2)
    {
      if (v13 != 4)
      {
        v17 = 0;
        goto LABEL_55;
      }
      v14 = v12[1] - 56613888;
    }
    v15 = *v12;
    v16 = v14 + (v15 << 10);
    if ((v15 & 0xF800) == 0xD800)
      v17 = v16;
    else
      v17 = v15;
LABEL_55:
    if (!u_ispunct(v17))
      goto LABEL_56;
    return (((0x1109100uLL >> v3) & 1) == 0) & (0x1F8FF0FFuLL >> v4);
  }
LABEL_16:
  if (v4 <= 0xFF)
  {
    v10 = (const char *)memchr(&Japanese::kSuffixPosIDs, (char)v4, 4uLL);
    v8 = "NSt3__110__function6__funcIPFbPK12mecab_node_tS4_lENS_9allocatorIS6_EES5_EE";
    if (v10)
      v8 = v10;
  }
  else
  {
    v8 = "NSt3__110__function6__funcIPFbPK12mecab_node_tS4_lENS_9allocatorIS6_EES5_EE";
  }
  result = 1;
  if (v8 - (const char *)&Japanese::kSuffixPosIDs != 4 && v3 <= 0x1C)
    goto LABEL_29;
  return result;
}

uint64_t CoreNLP::SimplifiedChineseLineBreakConnector::connect(CoreNLP::SimplifiedChineseLineBreakConnector *a1, uint64_t a2, uint64_t a3)
{
  CoreNLP::SimplifiedChineseLineBreakConnector::connectionRules(a1);
}

_QWORD *CoreNLP::SimplifiedChineseLineBreakConnector::connectionRules(CoreNLP::SimplifiedChineseLineBreakConnector *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[4];
  _QWORD v7[4];
  _QWORD v8[4];
  _QWORD v9[4];
  _QWORD v10[4];
  _QWORD v11[4];
  _QWORD v12[3];
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v6[0] = &unk_1E2DF3380;
    v6[3] = v6;
    v7[0] = &unk_1E2DF3380;
    v7[3] = v7;
    v8[0] = &unk_1E2DF3380;
    v8[3] = v8;
    v9[0] = &unk_1E2DF3380;
    v9[3] = v9;
    v10[0] = &unk_1E2DF3380;
    v10[1] = SC::numberMeasureRule;
    v10[3] = v10;
    v11[0] = &unk_1E2DF3380;
    v11[1] = SC::auxiliaryDeRule;
    v11[3] = v11;
    v12[0] = &unk_1E2DF3380;
    v12[1] = SC::postpositionRule;
    v13[0] = v12;
    std::vector<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>::vector[abi:ne180100](CoreNLP::SimplifiedChineseLineBreakConnector::connectionRules(void)const::kLineBreakRuleTable, (uint64_t)v6, 7uLL);
    v3 = 0;
    while (1)
    {
      v4 = (_QWORD *)v13[v3];
      if (&v12[v3] == v4)
        break;
      if (v4)
      {
        v5 = 5;
LABEL_9:
        (*(void (**)(void))(*v4 + 8 * v5))();
      }
      v3 -= 4;
      if (v3 == -28)
      {
        __cxa_atexit((void (*)(void *))std::vector<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>::~vector[abi:ne180100], CoreNLP::SimplifiedChineseLineBreakConnector::connectionRules(void)const::kLineBreakRuleTable, &dword_191C5D000);
        return CoreNLP::SimplifiedChineseLineBreakConnector::connectionRules(void)const::kLineBreakRuleTable;
      }
    }
    v4 = &v12[v3];
    v5 = 4;
    goto LABEL_9;
  }
  return CoreNLP::SimplifiedChineseLineBreakConnector::connectionRules(void)const::kLineBreakRuleTable;
}

void sub_191C70FC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  CoreNLP::KoreanLineBreakConnector::connectionRules(v1 + 224);
  _Unwind_Resume(a1);
}

BOOL `anonymous namespace'::alphaNumericRule(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(a1 + 90) & 0xFE) == 4 && (*(_BYTE *)(a2 + 90) & 0xFE) == 4;
}

BOOL SC::numberMeasureRule(uint64_t a1, uint64_t a2)
{
  return *(_WORD *)(a1 + 88) == 34 && *(unsigned __int16 *)(a2 + 88) - 49 < 0xC;
}

uint64_t SC::auxiliaryDeRule(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int16 *)(a2 + 88) - 71 < 4) & (0xBu >> ((*(_WORD *)(a2 + 88) - 71) & 0xF));
}

BOOL SC::postpositionRule(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int16 *)(a2 + 88);
  return (v2 == 39 || v2 == 14) && (*(_WORD *)(a2 + 80) & 0xFFFE) == 2;
}

uint64_t CoreNLP::TraditionalChineseLineBreakConnector::connect(CoreNLP::TraditionalChineseLineBreakConnector *a1, uint64_t a2, uint64_t a3)
{
  CoreNLP::TraditionalChineseLineBreakConnector::connectionRules(a1);
}

_QWORD *CoreNLP::TraditionalChineseLineBreakConnector::connectionRules(CoreNLP::TraditionalChineseLineBreakConnector *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[4];
  _QWORD v7[4];
  _QWORD v8[4];
  _QWORD v9[4];
  _QWORD v10[4];
  _QWORD v11[4];
  _QWORD v12[3];
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v6[0] = &unk_1E2DF3380;
    v6[3] = v6;
    v7[0] = &unk_1E2DF3380;
    v7[3] = v7;
    v8[0] = &unk_1E2DF3380;
    v8[3] = v8;
    v9[0] = &unk_1E2DF3380;
    v9[3] = v9;
    v10[0] = &unk_1E2DF3380;
    v10[1] = TC::numberMeasureRule;
    v10[3] = v10;
    v11[0] = &unk_1E2DF3380;
    v11[1] = TC::auxiliaryDeRule;
    v11[3] = v11;
    v12[0] = &unk_1E2DF3380;
    v12[1] = TC::postpositionRule;
    v13[0] = v12;
    std::vector<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>::vector[abi:ne180100](CoreNLP::TraditionalChineseLineBreakConnector::connectionRules(void)const::kLineBreakRuleTable, (uint64_t)v6, 7uLL);
    v3 = 0;
    while (1)
    {
      v4 = (_QWORD *)v13[v3];
      if (&v12[v3] == v4)
        break;
      if (v4)
      {
        v5 = 5;
LABEL_9:
        (*(void (**)(void))(*v4 + 8 * v5))();
      }
      v3 -= 4;
      if (v3 == -28)
      {
        __cxa_atexit((void (*)(void *))std::vector<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>::~vector[abi:ne180100], CoreNLP::TraditionalChineseLineBreakConnector::connectionRules(void)const::kLineBreakRuleTable, &dword_191C5D000);
        return CoreNLP::TraditionalChineseLineBreakConnector::connectionRules(void)const::kLineBreakRuleTable;
      }
    }
    v4 = &v12[v3];
    v5 = 4;
    goto LABEL_9;
  }
  return CoreNLP::TraditionalChineseLineBreakConnector::connectionRules(void)const::kLineBreakRuleTable;
}

void sub_191C71264(_Unwind_Exception *a1)
{
  uint64_t v1;

  CoreNLP::KoreanLineBreakConnector::connectionRules(v1 + 224);
  _Unwind_Resume(a1);
}

BOOL TC::numberMeasureRule(uint64_t a1, uint64_t a2)
{
  return *(_WORD *)(a1 + 88) == 33 && *(unsigned __int16 *)(a2 + 88) == 34;
}

BOOL TC::auxiliaryDeRule(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a2 + 88) == 12;
}

BOOL TC::postpositionRule(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int16 *)(a2 + 88);
  return (v2 == 35 || v2 == 27) && (*(_WORD *)(a2 + 80) & 0xFFFE) == 2;
}

uint64_t CoreNLP::TraditionalCantoneseLineBreakConnector::connect(CoreNLP::TraditionalCantoneseLineBreakConnector *a1, uint64_t a2, uint64_t a3)
{
  CoreNLP::TraditionalCantoneseLineBreakConnector::connectionRules(a1);
}

_QWORD *CoreNLP::TraditionalCantoneseLineBreakConnector::connectionRules(CoreNLP::TraditionalCantoneseLineBreakConnector *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[4];
  _QWORD v7[4];
  _QWORD v8[4];
  _QWORD v9[4];
  _QWORD v10[4];
  _QWORD v11[4];
  _QWORD v12[3];
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v6[0] = &unk_1E2DF3380;
    v6[3] = v6;
    v7[0] = &unk_1E2DF3380;
    v7[3] = v7;
    v8[0] = &unk_1E2DF3380;
    v8[3] = v8;
    v9[0] = &unk_1E2DF3380;
    v9[3] = v9;
    v10[0] = &unk_1E2DF3380;
    v10[1] = YUE::numberMeasureRule;
    v10[3] = v10;
    v11[0] = &unk_1E2DF3380;
    v11[1] = YUE::auxiliaryDeRule;
    v11[3] = v11;
    v12[0] = &unk_1E2DF3380;
    v12[1] = YUE::postpositionRule;
    v13[0] = v12;
    std::vector<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>::vector[abi:ne180100](CoreNLP::TraditionalCantoneseLineBreakConnector::connectionRules(void)const::kLineBreakRuleTable, (uint64_t)v6, 7uLL);
    v3 = 0;
    while (1)
    {
      v4 = (_QWORD *)v13[v3];
      if (&v12[v3] == v4)
        break;
      if (v4)
      {
        v5 = 5;
LABEL_9:
        (*(void (**)(void))(*v4 + 8 * v5))();
      }
      v3 -= 4;
      if (v3 == -28)
      {
        __cxa_atexit((void (*)(void *))std::vector<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>::~vector[abi:ne180100], CoreNLP::TraditionalCantoneseLineBreakConnector::connectionRules(void)const::kLineBreakRuleTable, &dword_191C5D000);
        return CoreNLP::TraditionalCantoneseLineBreakConnector::connectionRules(void)const::kLineBreakRuleTable;
      }
    }
    v4 = &v12[v3];
    v5 = 4;
    goto LABEL_9;
  }
  return CoreNLP::TraditionalCantoneseLineBreakConnector::connectionRules(void)const::kLineBreakRuleTable;
}

void sub_191C714BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  CoreNLP::KoreanLineBreakConnector::connectionRules(v1 + 224);
  _Unwind_Resume(a1);
}

BOOL YUE::numberMeasureRule(uint64_t a1, uint64_t a2)
{
  return *(_WORD *)(a1 + 88) == 22 && *(unsigned __int16 *)(a2 + 88) == 31;
}

BOOL YUE::auxiliaryDeRule(uint64_t a1, uint64_t a2)
{
  int v2;

  if (*(_WORD *)(a2 + 88) != 35 || (*(_WORD *)(a2 + 80) & 0xFFFE) != 2)
    return 0;
  v2 = **(unsigned __int16 **)(a2 + 64);
  if (v2 == 22320 || v2 == 30340)
    return 1;
  return v2 == 24471 || v2 == 22021;
}

BOOL YUE::postpositionRule(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(unsigned __int16 *)(a2 + 88);
  return (v2 == 15 || v2 == 4) && (*(_WORD *)(a2 + 80) & 0xFFFE) == 2;
}

void CoreNLP::SimplifiedChineseLineBreakConnector::~SimplifiedChineseLineBreakConnector(CoreNLP::SimplifiedChineseLineBreakConnector *this)
{
  JUMPOUT(0x19401E994);
}

void CoreNLP::TraditionalChineseLineBreakConnector::~TraditionalChineseLineBreakConnector(CoreNLP::TraditionalChineseLineBreakConnector *this)
{
  JUMPOUT(0x19401E994);
}

void CoreNLP::TraditionalCantoneseLineBreakConnector::~TraditionalCantoneseLineBreakConnector(CoreNLP::TraditionalCantoneseLineBreakConnector *this)
{
  JUMPOUT(0x19401E994);
}

void CoreNLP::JapaneseLineBreakConnector::~JapaneseLineBreakConnector(CoreNLP::JapaneseLineBreakConnector *this)
{
  JUMPOUT(0x19401E994);
}

uint64_t std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  v6 = a4;
  v7 = a3;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v8, &v7, &v6);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x19401E994);
}

_QWORD *std::__tree<std::vector<unsigned short>>::find<std::vector<unsigned short>>(uint64_t a1, unsigned __int16 **a2)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;

  v3 = (_QWORD *)(a1 + 8);
  result = std::__tree<std::vector<unsigned short>>::__lower_bound<std::vector<unsigned short>>(a1, a2, *(_QWORD **)(a1 + 8), (_QWORD *)(a1 + 8));
  if (v3 != result)
  {
    v6 = result[4];
    v5 = result[5];
    if (v6 == v5)
      return result;
    v7 = *a2;
    v8 = v6 + 2;
    while (v7 != a2[1])
    {
      v9 = *v7;
      v10 = *(unsigned __int16 *)(v8 - 2);
      if (v9 < v10)
        break;
      ++v7;
      v11 = v10 < v9 || v8 == v5;
      v8 += 2;
      if (v11)
        return result;
    }
  }
  return v3;
}

_QWORD *std::__tree<std::vector<unsigned short>>::__lower_bound<std::vector<unsigned short>>(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *result;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;

  result = a4;
  if (a3)
  {
    v5 = a2[1];
    do
    {
      if (*a2 == v5)
      {
LABEL_12:
        result = a3;
      }
      else
      {
        v6 = (unsigned __int16 *)a3[4];
        v7 = *a2 + 2;
        while (v6 != (unsigned __int16 *)a3[5])
        {
          v8 = *v6;
          v9 = *(unsigned __int16 *)(v7 - 2);
          if (v8 < v9)
            break;
          ++v6;
          v10 = v9 < v8 || v7 == v5;
          v7 += 2;
          if (v10)
            goto LABEL_12;
        }
        ++a3;
      }
      a3 = (_QWORD *)*a3;
    }
    while (a3);
  }
  return result;
}

char *std::vector<unsigned short>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

uint64_t std::set<std::vector<unsigned short>>::set[abi:ne180100](uint64_t a1, unsigned __int16 **a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 24 * a3;
    do
    {
      std::__tree<std::vector<unsigned short>>::__emplace_hint_unique_key_args<std::vector<unsigned short>,std::vector<unsigned short> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_191C7184C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::vector<unsigned short>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::vector<unsigned short>>::__emplace_hint_unique_key_args<std::vector<unsigned short>,std::vector<unsigned short> const&>(uint64_t **a1, _QWORD *a2, unsigned __int16 **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (uint64_t **)std::__tree<std::vector<unsigned short>>::__find_equal<std::vector<unsigned short>>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::vector<unsigned short>>::__construct_node<std::vector<unsigned short> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *std::__tree<std::vector<unsigned short>>::__find_equal<std::vector<unsigned short>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unsigned __int16 **a5)
{
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned __int16 *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;

  if (a1 + 1 == a2)
  {
LABEL_21:
    v18 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v20 = a2;
LABEL_27:
      if (v18)
      {
        *a3 = v20;
        return v20 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v18)
    {
      v19 = (_QWORD *)*a2;
      do
      {
        v20 = v19;
        v19 = (_QWORD *)v19[1];
      }
      while (v19);
    }
    else
    {
      v23 = a2;
      do
      {
        v20 = (_QWORD *)v23[2];
        v13 = *v20 == (_QWORD)v23;
        v23 = v20;
      }
      while (v13);
    }
    v24 = a5[1];
    if (*a5 != v24)
    {
      v25 = (unsigned __int16 *)v20[4];
      v26 = (uint64_t)(*a5 + 1);
      while (v25 != (unsigned __int16 *)v20[5])
      {
        v27 = *v25;
        v28 = *(unsigned __int16 *)(v26 - 2);
        if (v27 < v28)
          break;
        ++v25;
        v29 = v28 < v27 || v26 == (_QWORD)v24;
        v26 += 2;
        if (v29)
          return std::__tree<std::vector<unsigned short>>::__find_equal<std::vector<unsigned short>>((uint64_t)a1, a3, a5);
      }
      goto LABEL_27;
    }
    return std::__tree<std::vector<unsigned short>>::__find_equal<std::vector<unsigned short>>((uint64_t)a1, a3, a5);
  }
  v5 = (unsigned __int16 *)a2[4];
  v6 = (unsigned __int16 *)a2[5];
  v8 = *a5;
  v7 = a5[1];
  if (v5 != v6)
  {
    v9 = v5 + 1;
    v10 = *a5;
    while (v10 != v7)
    {
      v11 = *v10;
      v12 = *(v9 - 1);
      if (v11 < v12)
        break;
      ++v10;
      v13 = v12 < v11 || v9++ == v6;
      if (v13)
        goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_11:
  if (v8 == v7)
  {
LABEL_20:
    *a3 = a2;
    *a4 = a2;
  }
  else
  {
    v14 = v8 + 1;
    while (v5 != v6)
    {
      v15 = *v5;
      v16 = *(v14 - 1);
      if (v15 < v16)
        break;
      ++v5;
      if (v16 < v15 || v14++ == v7)
        goto LABEL_20;
    }
    v21 = a2[1];
    if (v21)
    {
      v22 = (_QWORD *)a2[1];
      do
      {
        a4 = v22;
        v22 = (_QWORD *)*v22;
      }
      while (v22);
    }
    else
    {
      v30 = a2;
      do
      {
        a4 = (_QWORD *)v30[2];
        v13 = *a4 == (_QWORD)v30;
        v30 = a4;
      }
      while (!v13);
    }
    if (a4 != a1 + 1)
    {
      v32 = a4[4];
      v31 = a4[5];
      if (v32 == v31)
        return std::__tree<std::vector<unsigned short>>::__find_equal<std::vector<unsigned short>>((uint64_t)a1, a3, a5);
      v33 = v32 + 2;
      while (v8 != v7)
      {
        v34 = *v8;
        v35 = *(unsigned __int16 *)(v33 - 2);
        if (v34 < v35)
          break;
        ++v8;
        v36 = v35 < v34 || v33 == v31;
        v33 += 2;
        if (v36)
          return std::__tree<std::vector<unsigned short>>::__find_equal<std::vector<unsigned short>>((uint64_t)a1, a3, a5);
      }
    }
    if (v21)
    {
      *a3 = a4;
    }
    else
    {
      *a3 = a2;
      return a2 + 1;
    }
  }
  return a4;
}

_QWORD *std::__tree<std::vector<unsigned short>>::__construct_node<std::vector<unsigned short> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[5] = 0;
  v6[6] = 0;
  v6[4] = 0;
  result = std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(v6 + 4, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_191C71B30(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::vector<unsigned short>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::vector<unsigned short>>::__find_equal<std::vector<unsigned short>>(uint64_t a1, _QWORD *a2, unsigned __int16 **a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  unsigned __int16 *v6;
  _QWORD *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;

  v5 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = a3[1];
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (unsigned __int16 *)v4[4];
        v9 = (unsigned __int16 *)v7[5];
        if (v8 != v9)
          break;
LABEL_12:
        if (*a3 != v6)
        {
          v15 = (uint64_t)(*a3 + 1);
          while (v8 != v9)
          {
            v16 = *v8;
            v17 = *(unsigned __int16 *)(v15 - 2);
            if (v16 < v17)
              break;
            ++v8;
            v18 = v17 < v16 || v15 == (_QWORD)v6;
            v15 += 2;
            if (v18)
              goto LABEL_27;
          }
          result = v7 + 1;
          v4 = (_QWORD *)v7[1];
          if (v4)
            continue;
        }
        goto LABEL_27;
      }
      v10 = v8 + 1;
      v11 = *a3;
      while (v11 != v6)
      {
        v12 = *v11;
        v13 = *(v10 - 1);
        if (v12 < v13)
          break;
        ++v11;
        if (v13 < v12 || v10++ == v9)
          goto LABEL_12;
      }
      v4 = (_QWORD *)*v7;
      result = v7;
    }
    while (*v7);
  }
  else
  {
    v7 = result;
  }
LABEL_27:
  *a2 = v7;
  return result;
}

_QWORD *std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned short>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_191C71C68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::vector<unsigned short>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[4];
    if (v3)
    {
      __p[5] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__tree<std::vector<unsigned short>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::vector<unsigned short>>::destroy(a1, *a2);
    std::__tree<std::vector<unsigned short>>::destroy(a1, a2[1]);
    v4 = (void *)a2[4];
    if (v4)
    {
      a2[5] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void std::__function::__func<BOOL (*)(mecab_node_t const*,mecab_node_t const*,long),std::allocator<BOOL (*)(mecab_node_t const*,mecab_node_t const*,long)>,BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>::~__func()
{
  JUMPOUT(0x19401E994);
}

_QWORD *std::__function::__func<BOOL (*)(mecab_node_t const*,mecab_node_t const*,long),std::allocator<BOOL (*)(mecab_node_t const*,mecab_node_t const*,long)>,BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DF3380;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(mecab_node_t const*,mecab_node_t const*,long),std::allocator<BOOL (*)(mecab_node_t const*,mecab_node_t const*,long)>,BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DF3380;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(mecab_node_t const*,mecab_node_t const*,long),std::allocator<BOOL (*)(mecab_node_t const*,mecab_node_t const*,long)>,BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<BOOL (*)(mecab_node_t const*,mecab_node_t const*,long),std::allocator<BOOL (*)(mecab_node_t const*,mecab_node_t const*,long)>,BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL (*)(mecab_node_t const*,mecab_node_t const*,long),std::allocator<BOOL (*)(mecab_node_t const*,mecab_node_t const*,long)>,BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

char *std::vector<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>,std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)> const*,std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)> const*,std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__function::__value_func<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>::__value_func[abi:ne180100](v4, v6);
      v6 += 32;
      v4 = v11 + 32;
      v11 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>,std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_191C71F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>,std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>,std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>,std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>,std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>*>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = **(_QWORD **)(result + 16);
  v2 = **(_QWORD **)(result + 8);
  if (v1 != v2)
  {
    while (1)
    {
      v3 = v1 - 32;
      result = *(_QWORD *)(v1 - 8);
      if (v1 - 32 == result)
        break;
      if (result)
      {
        v4 = 5;
LABEL_6:
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v4))();
      }
      v1 = v3;
      if (v3 == v2)
        return result;
    }
    result = v1 - 32;
    v4 = 4;
    goto LABEL_6;
  }
  return result;
}

void std::vector<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (!v2)
    return;
  v4 = (char *)v1[1];
  v5 = **a1;
  if (v4 == v2)
    goto LABEL_10;
  do
  {
    v6 = v4 - 32;
    v7 = (char *)*((_QWORD *)v4 - 1);
    if (v4 - 32 == v7)
    {
      v7 = v4 - 32;
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_8;
      v8 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_8:
    v4 = v6;
  }
  while (v6 != v2);
  v5 = **a1;
LABEL_10:
  v1[1] = v2;
  operator delete(v5);
}

uint64_t OUTLINED_FUNCTION_0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(*a1 + 8 * a2))();
}

uint64_t OUTLINED_FUNCTION_1(uint64_t a1)
{
  return *(_QWORD *)(a1 - 8);
}

uint64_t OUTLINED_FUNCTION_3()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_4()
{
  uint64_t v0;

  return v0;
}

uint64_t CoreNLP::BERTANEEmbedding::BERTANEEmbedding(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  unsigned int v13;
  const char *v14;
  size_t v15;
  size_t v16;
  void **v17;
  const std::string::value_type *v18;
  char *v19;
  uint64_t *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  std::runtime_error *exception;
  std::string v26;
  _QWORD v27[3];
  char v28;
  void *__p[2];
  char v30;
  void *v31[2];
  char v32;

  *(_QWORD *)a1 = off_1E2DF22B0;
  v8 = a1 + 24;
  v9 = "/ane_embeddings_gec_decoder.espresso.net";
  v10 = "/ane_embeddings_parser.espresso.net";
  v11 = "/ane_sentence_embeddings.espresso.net";
  v12 = "/ane_embeddings.espresso.net";
  v13 = a4 & 0xFFFFFFFE;
  if (a4 == 13)
    v12 = "/ane_search_embeddings.espresso.net";
  if (a4 != 12)
    v11 = v12;
  if (v13 != 10)
    v10 = v11;
  if (v13 != 8)
    v9 = v10;
  if (v13 == 2)
    v14 = "/ane_embeddings_gec_tagger.espresso.net";
  else
    v14 = v9;
  if (*(char *)(a2 + 23) >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = strlen(v14);
  v17 = v31;
  std::string::basic_string[abi:ne180100]((uint64_t)v31, v15 + v16);
  if (v32 < 0)
    v17 = (void **)v31[0];
  if (v15)
  {
    if (*(char *)(a2 + 23) >= 0)
      v18 = (const std::string::value_type *)a2;
    else
      v18 = *(const std::string::value_type **)a2;
    memmove(v17, v18, v15);
  }
  v19 = (char *)v17 + v15;
  if (v16)
    memcpy(v19, v14, v16);
  v19[v16] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "ANE");
  corelm::NeuralNetwork::NeuralNetwork(v8, (uint64_t)v31, (uint64_t)__p);
  if (v30 < 0)
    operator delete(__p[0]);
  if (v32 < 0)
    operator delete(v31[0]);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 128), "");
  *(_OWORD *)(a1 + 152) = 0u;
  v20 = (uint64_t *)(a1 + 152);
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 216) = a1 + 224;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 3;
  *(_QWORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = a4;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v26 = *(std::string *)a2;
  corelm::util::Directory::Directory<std::string>(v27, (uint64_t)&v26);
  corelm::VocabularyBuilder::makeVocabulary((uint64_t)v27, 2, v31);
  v21 = v31[0];
  v31[0] = 0;
  v22 = *v20;
  *v20 = (uint64_t)v21;
  if (v22)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = v31[0];
    v31[0] = 0;
    if (v23)
      (*(void (**)(void *))(*(_QWORD *)v23 + 8))(v23);
  }
  v27[0] = &unk_1E2DF1AB8;
  if (v28 < 0)
    operator delete((void *)v27[1]);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to process embedding model config");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_191C723E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  char **v34;
  uint64_t v35;
  void **v36;
  uint64_t v37;
  uint64_t *v38;
  void *v40;
  void *v41;
  uint64_t v42;

  std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::destroy(v37, *(_QWORD **)(v35 + 224));
  v40 = *(void **)(v35 + 184);
  if (v40)
  {
    *(_QWORD *)(v35 + 192) = v40;
    operator delete(v40);
  }
  v41 = *(void **)(v35 + 160);
  if (v41)
  {
    *(_QWORD *)(v35 + 168) = v41;
    operator delete(v41);
  }
  v42 = *v38;
  *v38 = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  if (*(char *)(v35 + 151) < 0)
    operator delete(*v36);
  corelm::NeuralNetwork::~NeuralNetwork(v34);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::BERTANEEmbedding::selectBatchSizeForInput(CoreNLP::BERTANEEmbedding *this, unint64_t a2)
{
  CoreNLP::BERTANEEmbedding *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  CoreNLP::BERTANEEmbedding *v16;
  CoreNLP::BERTANEEmbedding *v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  void *__p;
  char *v25;
  unint64_t v26;
  char v27;

  __p = 0;
  v25 = 0;
  v26 = 0;
  std::vector<unsigned long>::reserve(&__p, *((_QWORD *)this + 29));
  v4 = (CoreNLP::BERTANEEmbedding *)*((_QWORD *)this + 27);
  if (v4 == (CoreNLP::BERTANEEmbedding *)((char *)this + 224))
  {
    v5 = v25;
  }
  else
  {
    v5 = v25;
    do
    {
      if ((unint64_t)v5 >= v26)
      {
        v6 = (char *)__p;
        v7 = (v5 - (_BYTE *)__p) >> 3;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 61)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v9 = v26 - (_QWORD)__p;
        if ((uint64_t)(v26 - (_QWORD)__p) >> 2 > v8)
          v8 = v9 >> 2;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
          v10 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        if (v10)
        {
          v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v26, v10);
          v12 = v11;
          v6 = (char *)__p;
          v5 = v25;
        }
        else
        {
          v12 = 0;
        }
        v13 = (char *)(v10 + 8 * v7);
        *(_QWORD *)v13 = *((_QWORD *)v4 + 4);
        v14 = v13 + 8;
        while (v5 != v6)
        {
          v15 = *((_QWORD *)v5 - 1);
          v5 -= 8;
          *((_QWORD *)v13 - 1) = v15;
          v13 -= 8;
        }
        __p = v13;
        v25 = v14;
        v26 = v10 + 8 * v12;
        if (v6)
          operator delete(v6);
        v5 = v14;
      }
      else
      {
        *(_QWORD *)v5 = *((_QWORD *)v4 + 4);
        v5 += 8;
      }
      v25 = v5;
      v16 = (CoreNLP::BERTANEEmbedding *)*((_QWORD *)v4 + 1);
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(CoreNLP::BERTANEEmbedding **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (CoreNLP::BERTANEEmbedding *)*((_QWORD *)v4 + 2);
          v18 = *(_QWORD *)v17 == (_QWORD)v4;
          v4 = v17;
        }
        while (!v18);
      }
      v4 = v17;
    }
    while (v17 != (CoreNLP::BERTANEEmbedding *)((char *)this + 224));
  }
  v19 = 126 - 2 * __clz((v5 - (_BYTE *)__p) >> 3);
  if (v5 == __p)
    v20 = 0;
  else
    v20 = v19;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *,false>((unint64_t *)__p, (unint64_t *)v5, (uint64_t)&v27, v20, 1);
  if (__p == v25)
  {
LABEL_35:
    v22 = 0;
  }
  else
  {
    v21 = (uint64_t *)__p;
    while (1)
    {
      v22 = *v21;
      if (!(a2 % *v21))
        break;
      if (++v21 == (uint64_t *)v25)
        goto LABEL_35;
    }
  }
  if (__p)
  {
    v25 = (char *)__p;
    operator delete(__p);
  }
  return v22;
}

void sub_191C726BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t CoreNLP::BERTANEEmbedding::maxSeqLenSupportedByModel(uint64_t **this, unint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;

  v11 = a2;
  v12 = &v11;
  v2 = std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(this + 27, &v11, (uint64_t)&std::piecewise_construct, (uint64_t **)&v12);
  v9 = 0;
  v10 = 0;
  v8 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v8, (const void *)v2[5], v2[6], (v2[6] - v2[5]) >> 3);
  v3 = 126 - 2 * __clz((v9 - v8) >> 3);
  if (v9 == v8)
    v4 = 0;
  else
    v4 = v3;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *,false>((unint64_t *)v8, (unint64_t *)v9, (uint64_t)&v12, v4, 1);
  if (v8 != v9)
  {
    v5 = *(_QWORD *)v8;
LABEL_7:
    v9 = v8;
    operator delete(v8);
    return v5;
  }
  v5 = 0;
  v6 = 0;
  if (v8)
    goto LABEL_7;
  return v6;
}

void sub_191C72834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t CoreNLP::BERTANEEmbedding::selectSeqLenForInputBatch(uint64_t **this, unint64_t a2, unint64_t a3)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;

  v15 = a2;
  v16 = &v15;
  v4 = std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(this + 27, &v15, (uint64_t)&std::piecewise_construct, (uint64_t **)&v16);
  v13 = 0;
  v14 = 0;
  v12 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v12, (const void *)v4[5], v4[6], (v4[6] - v4[5]) >> 3);
  v5 = 126 - 2 * __clz((v13 - v12) >> 3);
  if (v13 == v12)
    v6 = 0;
  else
    v6 = v5;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *,false>((unint64_t *)v12, (unint64_t *)v13, (uint64_t)&v16, v6, 1);
  if (v12 == v13)
  {
    v7 = 0;
    if (!v12)
      return v7;
    goto LABEL_10;
  }
  v7 = 0;
  v8 = (unint64_t *)v12;
  do
  {
    v10 = *v8++;
    v9 = v10;
    if (v10 >= a3)
      v7 = v9;
  }
  while (v8 != (unint64_t *)v13);
  if (v12)
  {
LABEL_10:
    v13 = v12;
    operator delete(v12);
  }
  return v7;
}

void sub_191C72928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreNLP::BERTANEEmbedding::runANEModel(uint64_t a1@<X0>, _QWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float *v30;
  uint64_t v31;
  const void *v32;
  uint64_t *v33;
  const void *v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  const void **v41;
  __n128 v42;
  void *__p[2];
  char v44;
  void *v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;

  v6 = a1;
  v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
  __p[0] = &v48;
  v8 = std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(a1 + 216), &v48, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
  v46 = 0;
  v47 = 0;
  v45 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v45, (const void *)v8[5], v8[6], (v8[6] - v8[5]) >> 3);
  v9 = v48 * a3 * *(_QWORD *)(v6 + 208);
  LODWORD(__p[0]) = 0;
  std::vector<float>::assign((char **)(v6 + 184), v9, __p);
  LODWORD(__p[0]) = 1065353216;
  v41 = (const void **)(v6 + 160);
  std::vector<float>::assign((char **)(v6 + 160), a3 * a3 * v48, __p);
  v10 = v48;
  if (v48)
  {
    v39 = v6;
    v40 = a4;
    v11 = 0;
    v12 = 0;
    v38 = a2;
    v13 = *a2;
    v14 = 4 * a3;
    do
    {
      v15 = *(_QWORD *)(v13 + 24 * v12 + 8) - *(_QWORD *)(v13 + 24 * v12);
      if (a3 >= v15 >> 3)
        v16 = v15 >> 3;
      else
        v16 = a3;
      if (v16)
      {
        v17 = 4 * v16;
        v18 = (char *)*v41 + v11;
        do
        {
          bzero(v18, v17);
          v18 += v14;
          --v16;
        }
        while (v16);
      }
      ++v12;
      v11 += 4 * a3 * a3;
    }
    while (v12 != v10);
    v6 = v39;
    v19 = v38[1];
    v20 = v19 - v13;
    a4 = v40;
    if (v19 != v13)
    {
      v21 = v48;
      if (v48)
      {
        v22 = 0;
        v23 = 0;
        v24 = 0xAAAAAAAAAAAAAAABLL * (v20 >> 3);
        do
        {
          v25 = *(_QWORD *)(v13 + 24 * v23);
          v26 = *(_QWORD *)(v13 + 24 * v23 + 8) - v25;
          if (a3 >= v26 >> 3)
            v27 = v26 >> 3;
          else
            v27 = a3;
          if (v27)
          {
            v28 = 0;
            v29 = *(_QWORD *)(v39 + 208);
            v30 = (float *)(*(_QWORD *)(v39 + 184) + v29 * v22 + 8);
            v31 = 4 * v29;
            do
            {
              *(v30 - 2) = (float)*(uint64_t *)(v25 + 8 * v28);
              *(v30 - 1) = (float)(int)v28;
              *v30 = 0.0;
              ++v28;
              v30 = (float *)((char *)v30 + v31);
            }
            while (v27 != v28);
            v21 = v48;
          }
          if (++v23 >= v24)
            break;
          v22 += v14;
        }
        while (v23 < v21);
      }
    }
  }
  v32 = *(const void **)(v6 + 184);
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  v33 = (uint64_t *)(v6 + 24);
  corelm::NeuralNetwork::setInputTensorANE<float,void>((uint64_t **)(v6 + 24), v32, a3, (uint64_t)__p, *(_QWORD *)(v6 + 208), v48);
  if (v44 < 0)
    operator delete(__p[0]);
  v34 = *v41;
  std::string::basic_string[abi:ne180100]<0>(__p, "qk_mask");
  corelm::NeuralNetwork::setInputTensorANE<float,void>((uint64_t **)(v6 + 24), v34, a3, (uint64_t)__p, a3, v48);
  v35 = v6;
  if (v44 < 0)
    operator delete(__p[0]);
  corelm::NeuralNetwork::predict((corelm::NeuralNetwork *)(v6 + 24));
  v36 = v48;
  v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 64))(v35);
  v42.n128_u64[0] = v36;
  v42.n128_u64[1] = v37 * a3;
  corelm::NeuralNetwork::getOutput<2ul>(v33, &v42, 1, v35 + 128, a4);
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
}

void sub_191C72C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::assign(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  char *result;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 2)
  {
    v13 = a1[1];
    v14 = (v13 - result) >> 2;
    if (v14 >= a2)
      v15 = a2;
    else
      v15 = (v13 - result) >> 2;
    if (v15)
    {
      v16 = result;
      do
      {
        *(_DWORD *)v16 = *a3;
        v16 += 4;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[4 * a2];
    }
    else
    {
      v17 = &v13[4 * (a2 - v14)];
      v18 = 4 * a2 - 4 * v14;
      do
      {
        *(_DWORD *)v13 = *a3;
        v13 += 4;
        v18 -= 4;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 62)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v8 = v6 >> 1;
    if (v6 >> 1 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
      v9 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<float>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[4 * a2];
    v12 = 4 * a2;
    do
    {
      *(_DWORD *)v10 = *a3;
      v10 += 4;
      v12 -= 4;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void corelm::NeuralNetwork::setInputTensorANE<float,void>(uint64_t **a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t InputTensorANE;
  uint64_t **v13;
  uint64_t v14;
  __int128 *v15;
  void *v16;
  uint64_t *v17;
  int v18;
  const UInt8 *v19;
  CFIndex v20;
  CFStringRef v21;
  CFStringRef v22;
  uint64_t v23;
  __int128 *v24;
  void *v25;
  std::runtime_error *exception;
  __int128 *v27;
  __int128 **v28;
  uint64_t v29;
  void *v30;

  v10 = a5 * a3 * a6;
  corelm::NeuralNetwork::updateMostRecentInputs<float,void>((uint64_t)a1, a2, v10, (__int128 *)a4);
  v27 = (__int128 *)a4;
  v11 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 7, (const void **)a4, (uint64_t)&std::piecewise_construct, &v27)[7];
  InputTensorANE = corelm::NeuralNetwork::createInputTensorANE((corelm::NeuralNetwork *)a1, a3, a5);
  v13 = a1 + 10;
  v27 = (__int128 *)a4;
  std::__tree<std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::__map_value_compare<std::string,std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MontrealNeuralNetworkTensor *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 10, (const void **)a4, (uint64_t)&std::piecewise_construct, &v27)[7] = InputTensorANE;
  v27 = (__int128 *)a4;
  v14 = std::__tree<std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::__map_value_compare<std::string,std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MontrealNeuralNetworkTensor *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 10, (const void **)a4, (uint64_t)&std::piecewise_construct, &v27)[7];
  v27 = 0;
  v28 = &v27;
  v29 = 0x2020000000;
  v15 = (__int128 *)getMRLNeuralNetworkTensorAppendDataSymbolLoc(void)::ptr;
  v30 = getMRLNeuralNetworkTensorAppendDataSymbolLoc(void)::ptr;
  if (!getMRLNeuralNetworkTensorAppendDataSymbolLoc(void)::ptr)
  {
    v16 = (void *)MontrealLibrary();
    v15 = (__int128 *)dlsym(v16, "MRLNeuralNetworkTensorAppendData");
    v28[3] = v15;
    getMRLNeuralNetworkTensorAppendDataSymbolLoc(void)::ptr = v15;
  }
  _Block_object_dispose(&v27, 8);
  if (!v15)
  {
    _MRLNeuralNetworkGetOutput();
    goto LABEL_16;
  }
  ((void (*)(uint64_t, uint64_t, unint64_t))v15)(v14, v11, 4 * v10);
  v17 = *a1;
  v18 = *(char *)(a4 + 23);
  if (v18 >= 0)
    v19 = (const UInt8 *)a4;
  else
    v19 = *(const UInt8 **)a4;
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(a4 + 23);
  else
    v20 = *(_QWORD *)(a4 + 8);
  v21 = CFStringCreateWithBytes(0, v19, v20, 0x8000100u, 0);
  if (!v21)
  {
LABEL_17:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v22 = v21;
  v27 = (__int128 *)a4;
  v23 = std::__tree<std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::__map_value_compare<std::string,std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MontrealNeuralNetworkTensor *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (const void **)a4, (uint64_t)&std::piecewise_construct, &v27)[7];
  v27 = 0;
  v28 = &v27;
  v29 = 0x2020000000;
  v24 = (__int128 *)getMRLNeuralNetworkSetInputTensorSymbolLoc(void)::ptr;
  v30 = getMRLNeuralNetworkSetInputTensorSymbolLoc(void)::ptr;
  if (!getMRLNeuralNetworkSetInputTensorSymbolLoc(void)::ptr)
  {
    v25 = (void *)MontrealLibrary();
    v24 = (__int128 *)dlsym(v25, "MRLNeuralNetworkSetInputTensor");
    v28[3] = v24;
    getMRLNeuralNetworkSetInputTensorSymbolLoc(void)::ptr = v24;
  }
  _Block_object_dispose(&v27, 8);
  if (!v24)
  {
LABEL_16:
    dlerror();
    abort_report_np();
    __break(1u);
    goto LABEL_17;
  }
  ((void (*)(uint64_t *, CFStringRef, uint64_t, _QWORD))v24)(v17, v22, v23, 0);
  CFRelease(v22);
}

void sub_191C72FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  void *v13;

  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::BERTANEEmbedding::fillWordVectors(CoreNLP::BERTANEEmbedding *this, const __CFArray *a2, uint64_t a3, uint64_t a4, float *a5, const float *a6, const float *a7)
{
  return (*(uint64_t (**)(CoreNLP::BERTANEEmbedding *, const __CFArray *, uint64_t, uint64_t, float *, const float *, const float *, uint64_t))(*(_QWORD *)this + 24))(this, a2, a3, a4, a5, a6, a7, 1);
}

uint64_t CoreNLP::BERTANEEmbedding::fillTokenVectors(CoreNLP::BERTANEEmbedding *this, const __CFArray *a2, unint64_t a3, unsigned int a4, float *a5, const float *a6, const float *a7)
{
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t result;
  uint64_t v16;
  const __CFString *ValueAtIndex;
  char *v18;
  uint64_t v19;
  BOOL v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  char v44;
  uint64_t v45;
  void *__p;
  char *v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;

  v12 = CoreNLP::BERTANEEmbedding::selectBatchSizeForInput(this, a3);
  v13 = CoreNLP::BERTANEEmbedding::selectSeqLenForInputBatch((uint64_t **)this, v12, a4);
  v40 = v13;
  v41 = v12;
  if (v12)
    v14 = v13 == 0;
  else
    v14 = 1;
  result = !v14;
  if (!v14)
  {
    v37 = result;
    if (a3)
    {
      v42 = 0;
      v38 = a3;
      do
      {
        v16 = 0;
        v48 = 0;
        v49 = 0;
        v50 = 0;
        do
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, v16 + v42);
          applesauce::CF::convert_to<std::string,0>(ValueAtIndex, (uint64_t)&v43);
          (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 19) + 16))(&__p);
          v18 = v47;
          if (a4 < (unint64_t)((v47 - (_BYTE *)__p) >> 3))
          {
            v19 = v47 - (_BYTE *)__p - 8;
            do
            {
              v18 -= 8;
              v20 = a4 >= (unint64_t)(v19 >> 3);
              v19 -= 8;
            }
            while (!v20);
            v47 = v18;
          }
          v21 = v49;
          if ((unint64_t)v49 >= v50)
          {
            v22 = std::vector<std::vector<long>>::__push_back_slow_path<std::vector<long> const&>((uint64_t *)&v48, (uint64_t)&__p);
          }
          else
          {
            *v49 = 0;
            v21[1] = 0;
            v21[2] = 0;
            std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(v21, __p, (uint64_t)v47, (v47 - (_BYTE *)__p) >> 3);
            v22 = (uint64_t)(v21 + 3);
          }
          v49 = (_QWORD *)v22;
          if (__p)
          {
            v47 = (char *)__p;
            operator delete(__p);
          }
          if (v44 < 0)
            operator delete(v43);
          ++v16;
        }
        while (v16 != v41);
        CoreNLP::BERTANEEmbedding::runANEModel((uint64_t)this, &v48, v40, (uint64_t)&v43);
        if (v49 != v48)
        {
          v23 = 0;
          do
          {
            v24 = v45;
            v25 = (*(uint64_t (**)(CoreNLP::BERTANEEmbedding *))(*(_QWORD *)this + 64))(this);
            v26 = &v48[3 * v23];
            v28 = *v26;
            v27 = v26[1];
            v29 = (*(uint64_t (**)(CoreNLP::BERTANEEmbedding *))(*(_QWORD *)this + 64))(this);
            memcpy(a5, (const void *)(v24 + 4 * v23 * v40 * v25), ((v27 - v28) >> 1) * v29);
            v30 = &v48[3 * v23];
            v32 = *v30;
            v31 = v30[1];
            a5 += ((v31 - v32) >> 3)
                * (*(int (**)(CoreNLP::BERTANEEmbedding *))(*(_QWORD *)this + 64))(this);
            v33 = (uint64_t)v48;
            v34 = v48[3 * v23 + 1] - v48[3 * v23];
            if (a4 > (unint64_t)(v34 >> 3))
            {
              v35 = a4 - (v34 >> 3);
              do
              {
                v36 = (*(uint64_t (**)(CoreNLP::BERTANEEmbedding *))(*(_QWORD *)this + 64))(this);
                memcpy(a5, a7, 4 * v36);
                a5 += (*(int (**)(CoreNLP::BERTANEEmbedding *))(*(_QWORD *)this + 64))(this);
                --v35;
              }
              while (v35);
              v33 = (uint64_t)v48;
            }
            ++v23;
          }
          while (v23 < 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v49 - v33) >> 3));
        }
        v43 = &v48;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
        v42 += v41;
      }
      while (v42 < v38);
    }
    corelm::NeuralNetwork::clear((CoreNLP::BERTANEEmbedding *)((char *)this + 24));
    return v37;
  }
  return result;
}

void sub_191C73358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,uint64_t a26)
{
  a15 = &a25;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

unint64_t CoreNLP::BERTANEEmbedding::fillWordFragmentVectors(CoreNLP::BERTANEEmbedding *this, CFArrayRef theArray, unsigned int a3, unsigned int a4, float *a5, const float *a6, const float *a7, int a8)
{
  unint64_t Count;
  unint64_t result;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const __CFArray *ValueAtIndex;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  CFIndex v24;
  CFIndex v25;
  const __CFString *v26;
  unint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  int v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  vDSP_Length v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  const float *v79;
  unint64_t v80;
  int v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v87;
  unint64_t v89;
  unint64_t v90;
  const float *__src;
  void *__p;
  _DWORD *v94;
  unint64_t v95;
  uint64_t v96;
  void *v97;
  char *v98;
  void *v99;
  char v100;
  _BYTE *v101;
  void *__dst;
  _QWORD *v103;
  char *v104;
  char *v105;
  unint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  unint64_t v115;

  Count = CFArrayGetCount(theArray);
  result = CoreNLP::BERTANEEmbedding::selectBatchSizeForInput(this, Count);
  if (result)
  {
    v13 = result;
    v87 = CoreNLP::BERTANEEmbedding::maxSeqLenSupportedByModel((uint64_t **)this, result);
    if (Count)
    {
      v90 = 0;
      __src = a7;
      v83 = Count;
      v89 = v13;
      while (1)
      {
        v14 = 0;
        v15 = 0;
        v113 = 0;
        v114 = 0;
        v115 = 0;
        v110 = 0;
        v111 = 0;
        v112 = 0;
        v107 = 0;
        v108 = 0;
        v109 = 0;
        while (1)
        {
          v16 = Count;
          v17 = v14;
          ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(theArray, v14 + v90);
          __p = 0;
          v94 = 0;
          v95 = 0;
          v104 = 0;
          v105 = 0;
          v106 = 0;
          v19 = *((_QWORD *)this + 19);
          if (*(char *)(v19 + 31) < 0)
          {
            v20 = *(_QWORD *)(v19 + 8);
            v21 = *(_QWORD *)(v19 + 16);
          }
          else
          {
            v20 = v19 + 8;
            v21 = *(unsigned __int8 *)(v19 + 31);
          }
          v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 32))(v19, v20, v21);
          v23 = operator new(8uLL);
          v24 = 0;
          v101 = v23;
          *v23 = v22;
          __dst = v23 + 1;
          v103 = v23 + 1;
          while (1)
          {
            v25 = CFArrayGetCount(ValueAtIndex);
            if (v24 == a4 || v25 <= v24)
              break;
            v26 = (const __CFString *)CFArrayGetValueAtIndex(ValueAtIndex, v24);
            applesauce::CF::convert_to<std::string,0>(v26, (uint64_t)&v99);
            (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 19) + 16))(&v97);
            v27 = (unint64_t)((_BYTE *)__dst - v101) >> 3;
            v28 = v94;
            if ((unint64_t)v94 >= v95)
            {
              v30 = __p;
              v31 = ((char *)v94 - (_BYTE *)__p) >> 2;
              v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 62)
                std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
              v33 = v95 - (_QWORD)__p;
              if ((uint64_t)(v95 - (_QWORD)__p) >> 1 > v32)
                v32 = v33 >> 1;
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
                v34 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v34 = v32;
              if (v34)
              {
                v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v95, v34);
                v30 = __p;
                v28 = v94;
              }
              else
              {
                v35 = 0;
              }
              v36 = &v35[4 * v31];
              *(_DWORD *)v36 = v27;
              v29 = v36 + 4;
              while (v28 != v30)
              {
                v37 = *--v28;
                *((_DWORD *)v36 - 1) = v37;
                v36 -= 4;
              }
              __p = v36;
              v94 = v29;
              v95 = (unint64_t)&v35[4 * v34];
              if (v30)
                operator delete(v30);
            }
            else
            {
              *v94 = v27;
              v29 = v28 + 1;
            }
            v94 = v29;
            v38 = (unint64_t)(v98 - (_BYTE *)v97) >> 3;
            v39 = v105;
            if ((unint64_t)v105 >= v106)
            {
              v41 = v104;
              v42 = (v105 - v104) >> 2;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 62)
                std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
              v44 = v106 - (_QWORD)v104;
              if ((uint64_t)(v106 - (_QWORD)v104) >> 1 > v43)
                v43 = v44 >> 1;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
                v45 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              if (v45)
              {
                v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v106, v45);
                v41 = v104;
                v39 = v105;
              }
              else
              {
                v46 = 0;
              }
              v47 = &v46[4 * v42];
              *(_DWORD *)v47 = v38;
              v40 = v47 + 4;
              while (v39 != v41)
              {
                v48 = *((_DWORD *)v39 - 1);
                v39 -= 4;
                *((_DWORD *)v47 - 1) = v48;
                v47 -= 4;
              }
              v104 = v47;
              v105 = v40;
              v106 = (unint64_t)&v46[4 * v45];
              if (v41)
                operator delete(v41);
            }
            else
            {
              *(_DWORD *)v105 = v38;
              v40 = v39 + 4;
            }
            v105 = v40;
            std::vector<long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<long *>,std::__wrap_iter<long *>>((uint64_t)&v101, (uint64_t)__dst, (char *)v97, v98, (v98 - (_BYTE *)v97) >> 3);
            if (v97)
            {
              v98 = (char *)v97;
              operator delete(v97);
            }
            if (v100 < 0)
              operator delete(v99);
            ++v24;
          }
          if (v87 < ((_BYTE *)__dst - v101) >> 3)
            break;
          v49 = v114;
          if ((unint64_t)v114 >= v115)
          {
            v50 = std::vector<std::vector<long>>::__push_back_slow_path<std::vector<long> const&>((uint64_t *)&v113, (uint64_t)&v101);
          }
          else
          {
            *v114 = 0;
            v49[1] = 0;
            v49[2] = 0;
            std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(v49, v101, (uint64_t)__dst, ((_BYTE *)__dst - v101) >> 3);
            v50 = (uint64_t)(v49 + 3);
          }
          v114 = (_QWORD *)v50;
          v51 = v111;
          if ((unint64_t)v111 >= v112)
          {
            v52 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(&v110, (uint64_t)&__p);
          }
          else
          {
            *v111 = 0;
            v51[1] = 0;
            v51[2] = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v51, __p, (uint64_t)v94, ((char *)v94 - (_BYTE *)__p) >> 2);
            v52 = (uint64_t)(v51 + 3);
          }
          v111 = (_QWORD *)v52;
          v53 = v108;
          if ((unint64_t)v108 >= v109)
          {
            v54 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(&v107, (uint64_t)&v104);
          }
          else
          {
            *v108 = 0;
            v53[1] = 0;
            v53[2] = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v53, v104, (uint64_t)v105, (v105 - v104) >> 2);
            v54 = (uint64_t)(v53 + 3);
          }
          v108 = (_QWORD *)v54;
          if (v15 <= ((_BYTE *)__dst - v101) >> 3)
            v15 = ((_BYTE *)__dst - v101) >> 3;
          if (v101)
          {
            __dst = v101;
            operator delete(v101);
          }
          Count = v16;
          if (v104)
          {
            v105 = v104;
            operator delete(v104);
          }
          v55 = v89;
          if (__p)
          {
            v94 = __p;
            operator delete(__p);
          }
          v14 = v17 + 1;
          if (v17 + 1 == v89)
          {
            v56 = CoreNLP::BERTANEEmbedding::selectSeqLenForInputBatch((uint64_t **)this, v89, v15);
            if (v56)
            {
              CoreNLP::BERTANEEmbedding::runANEModel((uint64_t)this, &v113, v56, (uint64_t)&__p);
              if (v114 != v113)
              {
                v57 = 0;
                v58 = 0;
                v84 = v56;
                v85 = 4 * v56;
                do
                {
                  v59 = v110;
                  v60 = *(_QWORD *)(v110 + 24 * v58);
                  v61 = *(_QWORD *)(v110 + 24 * v58 + 8);
                  if (a4)
                    v62 = v61 == v60;
                  else
                    v62 = 1;
                  v63 = !v62;
                  if (*((_BYTE *)this + 240))
                  {
                    if (v63)
                    {
                      v64 = 0;
                      LODWORD(v65) = *((_DWORD *)this + 4);
                      do
                      {
                        if ((int)v65 >= 1)
                        {
                          v66 = 0;
                          v67 = 0;
                          v68 = *(_DWORD *)(v60 + 4 * v64);
                          v69 = *(int *)(*(_QWORD *)(v107 + 24 * v58) + 4 * v64);
                          do
                          {
                            v70 = v96;
                            v71 = (*(uint64_t (**)(CoreNLP::BERTANEEmbedding *))(*(_QWORD *)this + 64))(this);
                            vDSP_meanv((const float *)(v70 + v66 * 4 + v57 * v71 + 4 * *((_DWORD *)this + 4) * v68), *((int *)this + 4), &a5[v66], v69);
                            ++v67;
                            v65 = *((int *)this + 4);
                            ++v66;
                          }
                          while (v67 < v65);
                          v59 = v110;
                          a5 = (float *)((char *)a5 + v66 * 4);
                        }
                        ++v64;
                        v60 = *(_QWORD *)(v59 + 24 * v58);
                        v61 = *(_QWORD *)(v59 + 24 * v58 + 8);
                      }
                      while (v64 < a4 && (v61 - v60) >> 2 > v64);
                    }
                  }
                  else if (v63)
                  {
                    v72 = 0;
                    do
                    {
                      if (a8 >= 1)
                      {
                        v73 = 0;
                        v74 = *(_DWORD *)(v60 + 4 * v72);
                        do
                        {
                          if (v73 >= *(_DWORD *)(*(_QWORD *)(v107 + 24 * v58) + 4 * v72))
                          {
                            v78 = (*(uint64_t (**)(CoreNLP::BERTANEEmbedding *))(*(_QWORD *)this + 64))(this);
                            v79 = __src;
                          }
                          else
                          {
                            v75 = v96;
                            v76 = (*(uint64_t (**)(CoreNLP::BERTANEEmbedding *))(*(_QWORD *)this + 64))(this);
                            v77 = (*(uint64_t (**)(CoreNLP::BERTANEEmbedding *))(*(_QWORD *)this + 64))(this);
                            v78 = (*(uint64_t (**)(CoreNLP::BERTANEEmbedding *))(*(_QWORD *)this + 64))(this);
                            v79 = (const float *)(v75 + 4 * v58 * v84 * v76 + 4 * v77 * (v74 + v73));
                          }
                          memcpy(a5, v79, 4 * v78);
                          a5 += (*(int (**)(CoreNLP::BERTANEEmbedding *))(*(_QWORD *)this + 64))(this);
                          ++v73;
                        }
                        while (a8 != v73);
                        v59 = v110;
                      }
                      ++v72;
                      v60 = *(_QWORD *)(v59 + 24 * v58);
                      v61 = *(_QWORD *)(v59 + 24 * v58 + 8);
                    }
                    while (v72 < a4 && (v61 - v60) >> 2 > v72);
                  }
                  v80 = (v61 - v60) >> 2;
                  if (v80 < a4)
                  {
                    do
                    {
                      v81 = a8;
                      if (a8 >= 1)
                      {
                        do
                        {
                          v82 = (*(uint64_t (**)(CoreNLP::BERTANEEmbedding *))(*(_QWORD *)this + 64))(this);
                          memcpy(a5, __src, 4 * v82);
                          a5 += (*(int (**)(CoreNLP::BERTANEEmbedding *))(*(_QWORD *)this + 64))(this);
                          --v81;
                        }
                        while (v81);
                      }
                      ++v80;
                    }
                    while (v80 != a4);
                  }
                  ++v58;
                  v57 += v85;
                }
                while (v58 < 0xAAAAAAAAAAAAAAABLL * (v114 - v113));
              }
              LOBYTE(v56) = 1;
              Count = v83;
              v55 = v89;
            }
            goto LABEL_110;
          }
        }
        if (v101)
        {
          __dst = v101;
          operator delete(v101);
        }
        Count = v16;
        if (v104)
        {
          v105 = v104;
          operator delete(v104);
        }
        v55 = v89;
        if (__p)
        {
          v94 = __p;
          operator delete(__p);
        }
        LOBYTE(v56) = 0;
LABEL_110:
        __p = &v107;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        __p = &v110;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        __p = &v113;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if ((v56 & 1) == 0)
          return 0;
        v90 += v55;
        if (v90 >= Count)
          goto LABEL_112;
      }
    }
    else
    {
LABEL_112:
      corelm::NeuralNetwork::clear((CoreNLP::BERTANEEmbedding *)((char *)this + 24));
      return 1;
    }
  }
  return result;
}

void sub_191C73BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37)
{
  uint64_t v37;

  a23 = (void *)(v37 - 160);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = (void *)(v37 - 136);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = (void *)(v37 - 112);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

unint64_t CoreNLP::BERTANEEmbedding::copyEmbeddingDataForTokenizedSentences(CoreNLP::BERTANEEmbedding *this, CFArrayRef theArray, const __CFDictionary *a3, __CFDictionary *a4, __CFError **a5)
{
  unint64_t result;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  unint64_t i;
  char *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  __CFDictionary *theDict;
  unint64_t Count;
  __CFData *theData;
  unsigned int v51;
  void *v52;
  void *value;
  unint64_t v55;
  unint64_t v56;
  CoreNLP::BERTANEEmbedding *v57;
  unint64_t v58;
  void *v59;
  void *__dst;
  _QWORD v61[2];
  void *__p;
  char *v63;
  void *v64;
  char v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;

  Count = CFArrayGetCount(theArray);
  result = CoreNLP::BERTANEEmbedding::selectBatchSizeForInput(this, Count);
  if (result)
  {
    v9 = result;
    v10 = CoreNLP::BERTANEEmbedding::maxSeqLenSupportedByModel((uint64_t **)this, result);
    theDict = a4;
    if (a3
      && CFDictionaryContainsKey(a3, kNLStringEmbeddingPadEncoderInput[0])
      && (v11 = (void *)CFDictionaryGetValue(a3, kNLStringEmbeddingPadEncoderInput[0])) != 0)
    {
      v51 = objc_msgSend(v11, "unsignedIntValue");
    }
    else
    {
      v51 = 0;
    }
    theData = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    value = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v52 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    if (Count)
    {
      v55 = v9;
      v56 = 0;
      v12 = v51;
      if (v51 >= v10)
        v12 = v10;
      v58 = v12;
      v57 = this;
      while (1)
      {
        v13 = 0;
        v14 = 0;
        v66 = 0;
        v67 = 0;
        v68 = 0;
        do
        {
          v15 = *((_QWORD *)this + 19);
          if (*(char *)(v15 + 31) < 0)
          {
            v16 = *(_QWORD *)(v15 + 8);
            v17 = *(_QWORD *)(v15 + 16);
          }
          else
          {
            v16 = v15 + 8;
            v17 = *(unsigned __int8 *)(v15 + 31);
          }
          v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 32))(v15, v16, v17);
          v19 = operator new(8uLL);
          v59 = v19;
          *v19 = v18;
          __dst = v19 + 1;
          v61[0] = v19 + 1;
          v20 = (void *)-[__CFArray objectAtIndex:](theArray, "objectAtIndex:", v13 + v56);
          v21 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
          for (i = 0; objc_msgSend(v20, "count", theDict) > i; ++i)
          {
            applesauce::CF::convert_to<std::string,0>((const __CFString *)objc_msgSend(v20, "objectAtIndex:", i), (uint64_t)&v64);
            (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 19) + 16))(&__p);
            v23 = (char *)__p;
            v24 = ((v63 - (_BYTE *)__p) >> 3) + (((_BYTE *)__dst - (_BYTE *)v59) >> 3);
            if (v24 <= v10)
            {
              objc_msgSend(v21, "addObject:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", ((_BYTE *)__dst - (_BYTE *)v59) >> 3));
              std::vector<long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<long *>,std::__wrap_iter<long *>>((uint64_t)&v59, (uint64_t)__dst, (char *)__p, v63, (v63 - (_BYTE *)__p) >> 3);
              v23 = (char *)__p;
            }
            if (v23)
            {
              v63 = v23;
              operator delete(v23);
            }
            if (v65 < 0)
              operator delete(v64);
            if (v24 > v10)
              break;
          }
          v25 = __dst;
          if (v51 && (v26 = v59, v27 = ((_BYTE *)__dst - (_BYTE *)v59) >> 3, v27 < v58))
          {
            do
            {
              if ((unint64_t)v25 >= v61[0])
              {
                v29 = v27 + 1;
                if ((v27 + 1) >> 61)
                  std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
                v30 = v61[0] - (_QWORD)v26;
                if ((uint64_t)(v61[0] - (_QWORD)v26) >> 2 > v29)
                  v29 = v30 >> 2;
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
                  v31 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v31 = v29;
                if (v31)
                {
                  v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v61, v31);
                  v26 = v59;
                  v25 = __dst;
                }
                else
                {
                  v32 = 0;
                }
                v33 = &v32[8 * v27];
                *(_QWORD *)v33 = 0;
                v28 = v33 + 8;
                while (v25 != v26)
                {
                  v34 = *--v25;
                  *((_QWORD *)v33 - 1) = v34;
                  v33 -= 8;
                }
                v59 = v33;
                __dst = v28;
                v61[0] = &v32[8 * v31];
                if (v26)
                  operator delete(v26);
              }
              else
              {
                *v25 = 0;
                v28 = v25 + 1;
              }
              __dst = v28;
              v26 = v59;
              v27 = ((_BYTE *)v28 - (_BYTE *)v59) >> 3;
              v25 = v28;
            }
            while (v27 < v58);
          }
          else
          {
            v28 = __dst;
          }
          if (v14 <= ((_BYTE *)v28 - (_BYTE *)v59) >> 3)
            v14 = ((_BYTE *)v28 - (_BYTE *)v59) >> 3;
          v35 = v67;
          if ((unint64_t)v67 >= v68)
          {
            v37 = std::vector<std::vector<long>>::__push_back_slow_path<std::vector<long> const&>(&v66, (uint64_t)&v59);
            v36 = v55;
          }
          else
          {
            *v67 = 0;
            v35[1] = 0;
            v35[2] = 0;
            std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(v35, v59, (uint64_t)__dst, ((_BYTE *)__dst - (_BYTE *)v59) >> 3);
            v36 = v55;
            v37 = (uint64_t)(v35 + 3);
          }
          v67 = (_QWORD *)v37;
          while (objc_msgSend(v20, "count") > i)
          {
            objc_msgSend(v21, "addObject:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", 0x7FFFFFFFFFFFFFFFLL, 0));
            ++i;
          }
          objc_msgSend(value, "addObject:", v21);
          objc_msgSend(v52, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", ((_BYTE *)__dst - (_BYTE *)v59) >> 3));
          if (v59)
          {
            __dst = v59;
            operator delete(v59);
          }
          ++v13;
        }
        while (v13 != v36);
        v38 = CoreNLP::BERTANEEmbedding::selectSeqLenForInputBatch((uint64_t **)this, v36, v14);
        if (!v38)
          break;
        CoreNLP::BERTANEEmbedding::runANEModel((uint64_t)this, &v66, v38, (uint64_t)&v59);
        v39 = 0;
        v40 = 0;
        v41 = v36;
        do
        {
          v42 = v38;
          v43 = v61[1];
          v44 = (*(uint64_t (**)(CoreNLP::BERTANEEmbedding *))(*(_QWORD *)v57 + 64))(v57);
          v46 = *(_QWORD *)(v66 + v39);
          v45 = *(_QWORD *)(v66 + v39 + 8);
          v47 = (*(uint64_t (**)(CoreNLP::BERTANEEmbedding *))(*(_QWORD *)v57 + 64))(v57);
          CFDataAppendBytes(theData, (const UInt8 *)(v43 + 4 * v40 * v44), ((v45 - v46) >> 1) * v47);
          v38 = v42;
          v40 += v42;
          v39 += 24;
          --v41;
        }
        while (v41);
        v59 = &v66;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
        v56 += v55;
        this = v57;
        if (v56 >= Count)
          goto LABEL_61;
      }
      if (theData)
        CFRelease(theData);
      v59 = &v66;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
      return 0;
    }
    else
    {
LABEL_61:
      CFDictionarySetValue(theDict, kNLStringEmbeddingTokenizedBatchComponentRanges[0], value);
      CFDictionarySetValue(theDict, kNLStringEmbeddingTokenizedBatchComponentsCount[0], v52);
      corelm::NeuralNetwork::clear((CoreNLP::BERTANEEmbedding *)((char *)this + 24));
      return (unint64_t)theData;
    }
  }
  return result;
}

void sub_191C74248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  uint64_t v26;

  __p = (void *)(v26 - 112);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL CoreNLP::BERTANEEmbedding::fillStringVector(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  int v6;
  void *v7;
  _BYTE *v8;
  _BYTE *v9;
  int v10;
  __int128 v12;
  uint64_t v13;
  _BYTE v14[24];
  uint64_t v15;
  void *__p;
  _BYTE *v17;
  void **v18;
  char v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  (*(void (**)(void **__return_ptr))(*a1[19] + 16))(&__p);
  v5 = CoreNLP::BERTANEEmbedding::selectSeqLenForInputBatch(a1, 1uLL, (v17 - (_BYTE *)__p) >> 3);
  if (v5)
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(&v20, __p, (uint64_t)v17, (v17 - (_BYTE *)__p) >> 3);
    v12 = 0uLL;
    v13 = 0;
    v18 = (void **)&v12;
    v19 = 0;
    *(_QWORD *)&v12 = operator new(0x18uLL);
    *((_QWORD *)&v12 + 1) = v12;
    v13 = v12 + 24;
    *((_QWORD *)&v12 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<long>>,std::vector<long> const*,std::vector<long> const*,std::vector<long>*>((uint64_t)&v13, (uint64_t)&v20, (uint64_t)&v23, (_QWORD *)v12);
    CoreNLP::BERTANEEmbedding::runANEModel((uint64_t)a1, &v12, v5, (uint64_t)v14);
    v18 = (void **)&v12;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v18);
    if (v20)
    {
      v21 = v20;
      operator delete(v20);
    }
    v6 = ((uint64_t (*)(uint64_t **))(*a1)[8])(a1);
    LODWORD(v20) = 0;
    std::vector<float>::vector(&v12, v6, &v20);
    v7 = *(void **)a3;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)(a3 + 8) = v7;
      operator delete(v7);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v13;
    v9 = __p;
    v8 = v17;
    v10 = ((uint64_t (*)(uint64_t **))(*a1)[8])(a1);
    memmove(*(void **)a3, (const void *)(v15 + 4 * (((v8 - v9) >> 3) - 1) * v10), *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
    corelm::NeuralNetwork::clear((corelm::NeuralNetwork *)(a1 + 3));
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  return v5 != 0;
}

void sub_191C744E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::BERTANEEmbedding::version(CoreNLP::BERTANEEmbedding *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t CoreNLP::BERTANEEmbedding::dimension(CoreNLP::BERTANEEmbedding *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t CoreNLP::BERTANEEmbedding::modelLanguage(CoreNLP::BERTANEEmbedding *this)
{
  return *((unsigned int *)this + 2);
}

void CoreNLP::BERTANEEmbedding::~BERTANEEmbedding(CoreNLP::BERTANEEmbedding *this)
{
  void *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E2DF22B0;
  std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::destroy((uint64_t)this + 216, *((_QWORD **)this + 28));
  v2 = (void *)*((_QWORD *)this + 23);
  if (v2)
  {
    *((_QWORD *)this + 24) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 20);
  if (v3)
  {
    *((_QWORD *)this + 21) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  corelm::NeuralNetwork::~NeuralNetwork((char **)this + 3);
}

{
  void *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E2DF22B0;
  std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::destroy((uint64_t)this + 216, *((_QWORD **)this + 28));
  v2 = (void *)*((_QWORD *)this + 23);
  if (v2)
  {
    *((_QWORD *)this + 24) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 20);
  if (v3)
  {
    *((_QWORD *)this + 21) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  corelm::NeuralNetwork::~NeuralNetwork((char **)this + 3);
  JUMPOUT(0x19401E994);
}

uint64_t **CoreNLP::BERTANEEmbedding::setSupportedConfigs(uint64_t a1, uint64_t **a2)
{
  uint64_t **result;

  result = (uint64_t **)(a1 + 216);
  if (result != a2)
    return std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__tree_node<std::__value_type<unsigned long,std::vector<unsigned long>>,void *> *,long>>(result, *a2, a2 + 1);
  return result;
}

std::string *CoreNLP::BERTANEEmbedding::setEmbeddingNodeName(uint64_t a1, int a2, std::string *__str)
{
  return std::string::operator=((std::string *)(a1 + 128), __str);
}

uint64_t CoreNLP::BERTANEEmbedding::setEmbeddingDimension(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

uint64_t CoreNLP::BERTANEEmbedding::setPreProcessor(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 152);
  v3 = *a2;
  *a2 = 0;
  v5 = v3;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 64))(v2, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_191C74708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::BERTANEEmbedding::textToIDs(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 152);
  v3 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v4 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (uint64_t *)*a2;
    v4 = v3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, a2, v4, 1);
}

uint64_t CoreNLP::BERTANEEmbedding::idstoText(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 24))(*(_QWORD *)(a1 + 152));
}

uint64_t CoreNLP::BERTANEEmbedding::setMeanPooling(uint64_t this, char a2)
{
  *(_BYTE *)(this + 240) = a2;
  return this;
}

BOOL corelm::util::Path::exists(corelm::util::Path *this)
{
  const char *v2;
  int v3;
  int v4;

  v2 = (char *)this + 8;
  if (*((char *)this + 31) < 0)
    v2 = *(const char **)v2;
  v3 = open(v2, 0);
  v4 = v3;
  if ((v3 & 0x80000000) == 0)
    close(v3);
  return v4 >= 0;
}

void corelm::NeuralNetwork::~NeuralNetwork(char **this)
{
  void **v2;

  corelm::NeuralNetwork::releaseInputTensor((corelm::NeuralNetwork *)this);
  std::__tree<std::string>::destroy((uint64_t)(this + 10), this[11]);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy((uint64_t)(this + 7), this[8]);
  v2 = (void **)(this + 4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(this + 1);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  nlp::CFScopedPtr<MontrealNeuralNetwork *>::reset((const void **)this, 0);
}

void corelm::NeuralNetwork::releaseInputTensor(corelm::NeuralNetwork *this)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t **v3;
  uint64_t **v4;
  __int128 v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  std::string __p;
  std::string *p_p;

  v1 = (__int128 *)*((_QWORD *)this + 1);
  v2 = (__int128 *)*((_QWORD *)this + 2);
  if (v1 != v2)
  {
    v3 = (uint64_t **)((char *)this + 80);
    v4 = (uint64_t **)((char *)this + 56);
    do
    {
      if (*((char *)v1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v1, *((_QWORD *)v1 + 1));
      }
      else
      {
        v5 = *v1;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v1 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
      }
      p_p = &__p;
      if (std::__tree<std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::__map_value_compare<std::string,std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MontrealNeuralNetworkTensor *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p)[7])
      {
        p_p = &__p;
        v6 = std::__tree<std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::__map_value_compare<std::string,std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MontrealNeuralNetworkTensor *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
        CFRelease((CFTypeRef)v6[7]);
        p_p = &__p;
        std::__tree<std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::__map_value_compare<std::string,std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MontrealNeuralNetworkTensor *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p)[7] = 0;
      }
      p_p = &__p;
      v7 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
      if (v7[7] != v7[8])
      {
        p_p = &__p;
        v8 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
        v8[8] = v8[7];
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v1 = (__int128 *)((char *)v1 + 24);
    }
    while (v1 != v2);
  }
}

void sub_191C74978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<float>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void nlp::CFScopedPtr<MontrealNeuralNetwork *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t **std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__tree_node<std::__value_type<unsigned long,std::vector<unsigned long>>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD v17[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v17[0] = v8 + 4;
          v17[1] = v8 + 5;
          std::pair<unsigned long &,std::vector<unsigned long> &>::operator=[abi:ne180100]<unsigned long const,std::vector<unsigned long>,(void *)0>((uint64_t)v17, (uint64_t)(v9 + 4));
          std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__node_insert_multi(v5, v16);
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          v8 = v16;
          if (v16)
            v11 = a2 == a3;
          else
            v11 = 1;
          v9 = a2;
        }
        while (!v11);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_multi<std::pair<unsigned long const,std::vector<unsigned long>> const&>((uint64_t)v5, a2 + 4);
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_191C74C1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__node_insert_multi(uint64_t **a1, uint64_t *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (a2[4] >= (unint64_t)v4[4])
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, (uint64_t)v3, v5, a2);
  return a2;
}

uint64_t std::pair<unsigned long &,std::vector<unsigned long> &>::operator=[abi:ne180100]<unsigned long const,std::vector<unsigned long>,(void *)0>(uint64_t a1, uint64_t a2)
{
  char *v3;
  _QWORD *v4;

  v4 = *(_QWORD **)a1;
  v3 = *(char **)(a1 + 8);
  *v4 = *(_QWORD *)a2;
  if (v3 != (char *)(a2 + 8))
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v3, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  return a1;
}

char *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

_QWORD *std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

void std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_multi<std::pair<unsigned long const,std::vector<unsigned long>> const&>(uint64_t a1, _QWORD *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v7;

  std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__construct_node<std::pair<unsigned long const,std::vector<unsigned long>> const&>(a1, a2, (uint64_t)&v7);
  v3 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (v7[4] >= (unint64_t)v4[4])
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v3, v5, v7);
  return v7;
}

_QWORD *std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__construct_node<std::pair<unsigned long const,std::vector<unsigned long>> const&>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  const void *v7;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (const void *)a2[1];
  v6[4] = *a2;
  v6[6] = 0;
  v6[7] = 0;
  v6[5] = 0;
  result = std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v6 + 5, v7, a2[2], (uint64_t)(a2[2] - (_QWORD)v7) >> 3);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_191C74FE0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,std::vector<unsigned long>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,std::vector<unsigned long>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[5];
    if (v3)
    {
      __p[6] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

_QWORD *std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_191C75138(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

_QWORD *corelm::util::Directory::Directory<std::string>(_QWORD *a1, uint64_t a2)
{
  std::string *v3;
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  *a1 = &unk_1E2DF1AB8;
  v3 = (std::string *)(a1 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v3, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    a1[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  *a1 = &unk_1E2DF1AF8;
  return a1;
}

void sub_191C75284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL corelm::util::Directory::exists(corelm::util::Directory *this)
{
  const char *v2;
  int v3;
  int v4;

  v2 = (char *)this + 8;
  if (*((char *)this + 31) < 0)
    v2 = *(const char **)v2;
  v3 = open(v2, 0x100000);
  v4 = v3;
  if ((v3 & 0x80000000) == 0)
    close(v3);
  return v4 >= 0;
}

unint64_t *std::__introsort<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *,false>(unint64_t *result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  char v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  BOOL v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (v20 > *v9)
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        v22 = v9[1];
        v23 = *(a2 - 1);
        if (v22 <= v23)
          v24 = *(a2 - 1);
        else
          v24 = v9[1];
        if (v22 >= v23)
          v22 = *(a2 - 1);
        *(a2 - 1) = v22;
        v9[1] = v24;
        v25 = *(a2 - 1);
        if (v25 <= *v9)
          v26 = *v9;
        else
          v26 = *(a2 - 1);
        if (v25 >= *v9)
          v25 = *v9;
        *(a2 - 1) = v25;
        v28 = *v9;
        v27 = v9[1];
        if (v26 <= v27)
          v28 = v9[1];
        if (v26 < v27)
          v27 = v26;
        *v9 = v28;
        v9[1] = v27;
        return result;
      case 4uLL:
        v30 = v9[1];
        v29 = v9[2];
        if (*v9 <= v29)
          v31 = v9[2];
        else
          v31 = *v9;
        if (*v9 < v29)
          v29 = *v9;
        v9[2] = v29;
        *v9 = v31;
        v32 = *(a2 - 1);
        if (v30 <= v32)
          v33 = *(a2 - 1);
        else
          v33 = v30;
        if (v30 < v32)
          v32 = v30;
        *(a2 - 1) = v32;
        v34 = *v9;
        if (*v9 <= v33)
          v35 = v33;
        else
          v35 = *v9;
        if (*v9 >= v33)
          v34 = v33;
        *v9 = v35;
        v9[1] = v34;
        v36 = v9[2];
        v37 = *(a2 - 1);
        if (v36 <= v37)
          v38 = *(a2 - 1);
        else
          v38 = v9[2];
        if (v36 >= v37)
          v36 = *(a2 - 1);
        *(a2 - 1) = v36;
        v39 = v9[1];
        if (v39 <= v38)
          v40 = v38;
        else
          v40 = v9[1];
        if (v39 >= v38)
          v39 = v38;
        v9[1] = v40;
        v9[2] = v39;
        return result;
      case 5uLL:
        v41 = *v9;
        v42 = v9[1];
        if (*v9 <= v42)
          v43 = v9[1];
        else
          v43 = *v9;
        if (*v9 >= v42)
          v41 = v9[1];
        *v9 = v43;
        v9[1] = v41;
        v44 = v9[3];
        v45 = *(a2 - 1);
        if (v44 <= v45)
          v46 = *(a2 - 1);
        else
          v46 = v9[3];
        if (v44 >= v45)
          v44 = *(a2 - 1);
        *(a2 - 1) = v44;
        v9[3] = v46;
        v47 = *(a2 - 1);
        v48 = v9[2];
        if (v47 <= v48)
          v49 = v9[2];
        else
          v49 = *(a2 - 1);
        if (v47 >= v48)
          v47 = v9[2];
        *(a2 - 1) = v47;
        v51 = v9[2];
        v50 = v9[3];
        v52 = v9[1];
        if (v49 <= v50)
          v51 = v9[3];
        if (v49 < v50)
          v50 = v49;
        v9[2] = v51;
        v9[3] = v50;
        v53 = *(a2 - 1);
        if (v52 <= v53)
          v54 = *(a2 - 1);
        else
          v54 = v52;
        if (v52 < v53)
          v53 = v52;
        *(a2 - 1) = v53;
        v55 = *v9;
        v57 = v9[2];
        v56 = v9[3];
        if (v56 <= *v9)
          v58 = *v9;
        else
          v58 = v9[3];
        if (v56 >= *v9)
          v56 = *v9;
        if (v58 <= v57)
          v55 = v9[2];
        if (v58 < v57)
          v57 = v58;
        if (v56 <= v54)
          v59 = v54;
        else
          v59 = v56;
        if (v56 >= v54)
          v56 = v54;
        if (v59 <= v57)
          v54 = v57;
        *v9 = v55;
        v9[1] = v54;
        if (v59 >= v57)
          v60 = v57;
        else
          v60 = v59;
        v9[2] = v60;
        v9[3] = v56;
        return result;
      default:
        if (v12 > 191)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *,unsigned long *>(v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *>(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *>(v9 + 2, &v9[v14 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *>(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v9 - 1) <= *v9)
          {
            result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,std::greater<unsigned long> &>(v9, (uint64_t *)a2);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,std::greater<unsigned long> &>(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *>(v9, v17);
          v9 = v17 + 1;
          result = (unint64_t *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *>(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = (unint64_t *)std::__introsort<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        v61 = v9 + 1;
        v63 = v9 == a2 || v61 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v63)
          {
            v64 = 0;
            v65 = v9;
            do
            {
              v67 = *v65;
              v66 = v65[1];
              v65 = v61;
              if (v66 > v67)
              {
                v68 = v64;
                while (1)
                {
                  *(unint64_t *)((char *)v9 + v68 + 8) = v67;
                  if (!v68)
                    break;
                  v67 = *(unint64_t *)((char *)v9 + v68 - 8);
                  v68 -= 8;
                  if (v66 <= v67)
                  {
                    v69 = (unint64_t *)((char *)v9 + v68 + 8);
                    goto LABEL_123;
                  }
                }
                v69 = v9;
LABEL_123:
                *v69 = v66;
              }
              v61 = v65 + 1;
              v64 += 8;
            }
            while (v65 + 1 != a2);
          }
        }
        else if (!v63)
        {
          do
          {
            v71 = *v8;
            v70 = v8[1];
            v8 = v61;
            if (v70 > v71)
            {
              do
              {
                *v61 = v71;
                v71 = *(v61 - 2);
                --v61;
              }
              while (v70 > v71);
              *v61 = v70;
            }
            v61 = v8 + 1;
          }
          while (v8 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 > *a1)
  {
    if (v5 > v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 <= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 > v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 <= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,std::greater<unsigned long> &>(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = *a1;
  if (*a1 <= *(a2 - 1))
  {
    v5 = (uint64_t *)(a1 + 1);
    do
    {
      v3 = (unint64_t *)v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 <= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 <= v4);
  }
  if (v3 < (unint64_t *)a2)
  {
    do
      v6 = *--a2;
    while (v2 > v6);
  }
  if (v3 < (unint64_t *)a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 <= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 > v10);
    }
    while (v3 < (unint64_t *)a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

unint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,unsigned long *,std::greater<unsigned long> &>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 > v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 <= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 <= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 > v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 <= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v20 = a1[1];
      v21 = *(a2 - 1);
      if (v20 <= v21)
        v22 = *(a2 - 1);
      else
        v22 = a1[1];
      if (v20 >= v21)
        v20 = *(a2 - 1);
      *(a2 - 1) = v20;
      a1[1] = v22;
      v23 = *(a2 - 1);
      if (v23 <= *a1)
        v24 = *a1;
      else
        v24 = *(a2 - 1);
      if (v23 >= *a1)
        v23 = *a1;
      *(a2 - 1) = v23;
      v26 = *a1;
      v25 = a1[1];
      if (v24 <= v25)
        v26 = a1[1];
      if (v24 < v25)
        v25 = v24;
      *a1 = v26;
      a1[1] = v25;
      return 1;
    case 4:
      v48 = a1[1];
      v47 = a1[2];
      if (*a1 <= v47)
        v49 = a1[2];
      else
        v49 = *a1;
      if (*a1 < v47)
        v47 = *a1;
      a1[2] = v47;
      *a1 = v49;
      v50 = *(a2 - 1);
      if (v48 <= v50)
        v51 = *(a2 - 1);
      else
        v51 = v48;
      if (v48 < v50)
        v50 = v48;
      *(a2 - 1) = v50;
      v52 = *a1;
      if (*a1 <= v51)
        v53 = v51;
      else
        v53 = *a1;
      if (*a1 >= v51)
        v52 = v51;
      *a1 = v53;
      a1[1] = v52;
      v54 = a1[2];
      v55 = *(a2 - 1);
      if (v54 <= v55)
        v56 = *(a2 - 1);
      else
        v56 = a1[2];
      if (v54 >= v55)
        v54 = *(a2 - 1);
      *(a2 - 1) = v54;
      v57 = a1[1];
      if (v57 <= v56)
        v58 = v56;
      else
        v58 = a1[1];
      if (v57 >= v56)
        v57 = v56;
      a1[1] = v58;
      a1[2] = v57;
      return 1;
    case 5:
      v27 = *a1;
      v28 = a1[1];
      if (*a1 <= v28)
        v29 = a1[1];
      else
        v29 = *a1;
      if (*a1 >= v28)
        v27 = a1[1];
      *a1 = v29;
      a1[1] = v27;
      v30 = a1[3];
      v31 = *(a2 - 1);
      if (v30 <= v31)
        v32 = *(a2 - 1);
      else
        v32 = a1[3];
      if (v30 >= v31)
        v30 = *(a2 - 1);
      *(a2 - 1) = v30;
      a1[3] = v32;
      v33 = *(a2 - 1);
      v34 = a1[2];
      if (v33 <= v34)
        v35 = a1[2];
      else
        v35 = *(a2 - 1);
      if (v33 >= v34)
        v33 = a1[2];
      *(a2 - 1) = v33;
      v37 = a1[2];
      v36 = a1[3];
      v38 = a1[1];
      if (v35 <= v36)
        v37 = a1[3];
      if (v35 < v36)
        v36 = v35;
      a1[2] = v37;
      a1[3] = v36;
      v39 = *(a2 - 1);
      if (v38 <= v39)
        v40 = *(a2 - 1);
      else
        v40 = v38;
      if (v38 < v39)
        v39 = v38;
      *(a2 - 1) = v39;
      v41 = *a1;
      v43 = a1[2];
      v42 = a1[3];
      if (v42 <= *a1)
        v44 = *a1;
      else
        v44 = a1[3];
      if (v42 >= *a1)
        v42 = *a1;
      if (v44 <= v43)
        v41 = a1[2];
      if (v44 < v43)
        v43 = v44;
      if (v42 <= v40)
        v45 = v40;
      else
        v45 = v42;
      if (v42 >= v40)
        v42 = v40;
      if (v45 <= v43)
        v40 = v43;
      *a1 = v41;
      a1[1] = v40;
      if (v45 >= v43)
        v46 = v43;
      else
        v46 = v45;
      a1[2] = v46;
      a1[3] = v42;
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v8 = *a1;
      v7 = a1[1];
      if (v7 <= v5)
        v9 = a1[2];
      else
        v9 = a1[1];
      if (v7 < v5)
        v5 = a1[1];
      if (v5 <= v8)
        v10 = *a1;
      else
        v10 = v5;
      if (v5 >= v8)
        v5 = *a1;
      *v6 = v5;
      if (v10 <= v9)
        v11 = v9;
      else
        v11 = v8;
      if (v10 >= v9)
        v10 = v9;
      *a1 = v11;
      a1[1] = v10;
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 24;
      break;
  }
  while (1)
  {
    v15 = *v12;
    v16 = *v6;
    if (*v12 > v16)
    {
      v17 = v14;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v17) = v16;
        v18 = v17 - 8;
        if (v17 == 8)
          break;
        v16 = *(unint64_t *)((char *)a1 + v17 - 16);
        v17 -= 8;
        if (v15 <= v16)
        {
          v19 = (unint64_t *)((char *)a1 + v18);
          goto LABEL_27;
        }
      }
      v19 = a1;
LABEL_27:
      *v19 = v15;
      if (++v13 == 8)
        return v12 + 1 == a2;
    }
    v6 = v12;
    v14 += 8;
    if (++v12 == a2)
      return 1;
  }
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *,unsigned long *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*v14 > *a1)
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      do
      {
        v17 = 0;
        v18 = *a1;
        v19 = a1;
        do
        {
          v20 = &v19[v17 + 1];
          v21 = (2 * v17) | 1;
          v17 = 2 * v17 + 2;
          if (v17 >= v16)
          {
            v22 = *v20;
            v17 = v21;
          }
          else
          {
            v22 = *v20;
            v23 = v20[1];
            if (*v20 >= v23)
              v22 = v20[1];
            if (*v20 <= v23)
              v17 = v21;
            else
              ++v20;
          }
          *v19 = v22;
          v19 = v20;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v20 == --v6)
        {
          *v20 = v18;
        }
        else
        {
          *v20 = *v6;
          *v6 = v18;
          v24 = (char *)v20 - (char *)a1 + 8;
          if (v24 >= 9)
          {
            v25 = (((unint64_t)v24 >> 3) - 2) >> 1;
            v26 = &a1[v25];
            v27 = *v26;
            v28 = *v20;
            if (*v26 > *v20)
            {
              do
              {
                *v20 = v27;
                v20 = v26;
                if (!v25)
                  break;
                v25 = (v25 - 1) >> 1;
                v26 = &a1[v25];
                v27 = *v26;
              }
              while (*v26 > v28);
              *v20 = v28;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (unint64_t *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        v11 = v8[1];
        if (*v8 >= v11)
          v10 = v8[1];
        if (*v8 > v11)
        {
          ++v8;
          v7 = v9;
        }
      }
      v12 = *a4;
      if (v10 <= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v13 = (2 * v7) | 1;
          v8 = (unint64_t *)(result + 8 * v13);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v10 = *v8;
            v7 = v13;
          }
          else
          {
            v10 = *v8;
            v14 = v8[1];
            if (*v8 >= v14)
              v10 = v8[1];
            if (*v8 <= v14)
              v7 = v13;
            else
              ++v8;
          }
        }
        while (v10 <= v12);
        *a4 = v12;
      }
    }
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = **a4;
    v11[6] = 0;
    v11[7] = 0;
    v11[4] = v12;
    v11[5] = 0;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

_QWORD *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_191C75F94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t corelm::NeuralNetwork::createInputTensorANE(corelm::NeuralNetwork *this, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef CFDictionaryRef;
  uint64_t v4;
  const void *v5;
  const void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  int v11;
  int v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD v18[2];
  uint64_t v19;
  _BYTE v20[16];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v14 = a3;
  v15 = a2;
  v12 = 5;
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],int>((applesauce::CF::TypeRef *)&v16, "ShapeDimension", &v12);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],unsigned long &>((applesauce::CF::TypeRef *)v18, "Width", &v14);
  v11 = 1;
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],int>((applesauce::CF::TypeRef *)&v19, "Height", &v11);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],unsigned long &>((applesauce::CF::TypeRef *)v20, "Channel", &v15);
  v13[0] = &v16;
  v13[1] = 4;
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v13);
  v4 = 0;
  v13[2] = CFDictionaryRef;
  do
  {
    v5 = *(const void **)&v20[v4 + 8];
    if (v5)
      CFRelease(v5);
    v6 = *(const void **)&v20[v4];
    if (v6)
      CFRelease(v6);
    v4 -= 16;
  }
  while (v4 != -64);
  v16 = 0;
  v17 = &v16;
  v18[0] = 0x2020000000;
  v7 = getMRLNeuralNetworkTensorCreateSymbolLoc(void)::ptr;
  v18[1] = getMRLNeuralNetworkTensorCreateSymbolLoc(void)::ptr;
  if (!getMRLNeuralNetworkTensorCreateSymbolLoc(void)::ptr)
  {
    v8 = (void *)MontrealLibrary();
    v7 = dlsym(v8, "MRLNeuralNetworkTensorCreate");
    v17[3] = (uint64_t)v7;
    getMRLNeuralNetworkTensorCreateSymbolLoc(void)::ptr = v7;
  }
  _Block_object_dispose(&v16, 8);
  if (!v7)
  {
    dlerror();
    abort_report_np();
    __break(1u);
  }
  v9 = ((uint64_t (*)(CFDictionaryRef))v7)(CFDictionaryRef);
  if (CFDictionaryRef)
    CFRelease(CFDictionaryRef);
  return v9;
}

void sub_191C76150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],int>(applesauce::CF::TypeRef *a1, char *a2, int *a3)
{
  CFNumberRef v5;
  std::runtime_error *exception;
  int valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *((_QWORD *)a1 + 1) = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_191C7627C(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<long>>::__push_back_slow_path<std::vector<long> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<long>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_191C763B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<long>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<long>>,std::reverse_iterator<std::vector<long>*>,std::reverse_iterator<std::vector<long>*>,std::reverse_iterator<std::vector<long>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<long>>,std::reverse_iterator<std::vector<long>*>,std::reverse_iterator<std::vector<long>*>,std::reverse_iterator<std::vector<long>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long>>,std::reverse_iterator<std::vector<long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long>>,std::reverse_iterator<std::vector<long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long>>,std::reverse_iterator<std::vector<long>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long>>,std::reverse_iterator<std::vector<long>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<long>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<long>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<long>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

char *std::vector<long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<long *>,std::__wrap_iter<long *>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_191C767B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<long>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_191C769B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_191C76A24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long>>,std::reverse_iterator<std::vector<long>*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<long>>,std::vector<long> const*,std::vector<long> const*,std::vector<long>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long>>,std::vector<long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_191C76C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long>>,std::vector<long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long>>,std::vector<long>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long>>,std::vector<long>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long>>,std::vector<long>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 24);
      v3 -= 24;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 16) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_191C76D1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::BERTEmbedding::BERTEmbedding(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  const char *v11;
  size_t v12;
  size_t v13;
  void **v14;
  const std::string::value_type *v15;
  char *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  std::runtime_error *exception;
  std::string v22;
  _QWORD v23[3];
  char v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;

  *(_QWORD *)a1 = off_1E2DF1DE8;
  v8 = a1 + 24;
  HIDWORD(v10) = a4;
  LODWORD(v10) = a4 - 2;
  v9 = v10 >> 1;
  if (v9 < 6 && ((0x39u >> v9) & 1) != 0)
  {
    v11 = off_1E2DF4150[v9];
  }
  else if (a4 == 13)
  {
    v11 = "/cpu_search_embeddings.espresso.net";
  }
  else
  {
    v11 = "/cpu_embeddings.espresso.net";
  }
  if (*(char *)(a2 + 23) >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  v13 = strlen(v11);
  v14 = v27;
  std::string::basic_string[abi:ne180100]((uint64_t)v27, v12 + v13);
  if (v28 < 0)
    v14 = (void **)v27[0];
  if (v12)
  {
    if (*(char *)(a2 + 23) >= 0)
      v15 = (const std::string::value_type *)a2;
    else
      v15 = *(const std::string::value_type **)a2;
    memmove(v14, v15, v12);
  }
  v16 = (char *)v14 + v12;
  if (v13)
    memcpy(v16, v11, v13);
  v16[v13] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "CPU");
  corelm::NeuralNetwork::NeuralNetwork(v8, (uint64_t)v27, (uint64_t)__p);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete(v27[0]);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_BYTE *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = a4;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v22 = *(std::string *)a2;
  corelm::util::Directory::Directory<std::string>(v23, (uint64_t)&v22);
  corelm::VocabularyBuilder::makeVocabulary((uint64_t)v23, 2, v27);
  v17 = v27[0];
  v27[0] = 0;
  v18 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v17;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = v27[0];
    v27[0] = 0;
    if (v19)
      (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  }
  v23[0] = &unk_1E2DF1AB8;
  if (v24 < 0)
    operator delete((void *)v23[1]);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to process embedding model config");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_191C76FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  char **v34;
  uint64_t v35;
  void **v36;
  uint64_t v38;

  v38 = *(_QWORD *)(v35 + 152);
  *(_QWORD *)(v35 + 152) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  if (*(char *)(v35 + 151) < 0)
    operator delete(*v36);
  corelm::NeuralNetwork::~NeuralNetwork(v34);
  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(char *__s@<X1>, const void **a2@<X0>, void **a3@<X8>)
{
  size_t v6;
  size_t v7;
  uint64_t result;
  const void *v9;
  char *v10;

  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = strlen(__s);
  result = std::string::basic_string[abi:ne180100]((uint64_t)a3, v6 + v7);
  if (*((char *)a3 + 23) < 0)
    a3 = (void **)*a3;
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(a3, v9, v6);
  }
  v10 = (char *)a3 + v6;
  if (v7)
    result = (uint64_t)memmove(v10, __s, v7);
  v10[v7] = 0;
  return result;
}

uint64_t CoreNLP::BERTEmbedding::fillWordVectors(CoreNLP::BERTEmbedding *this, const __CFArray *a2, uint64_t a3, uint64_t a4, float *a5, const float *a6, const float *a7)
{
  return (*(uint64_t (**)(CoreNLP::BERTEmbedding *, const __CFArray *, uint64_t, uint64_t, float *, const float *, const float *, uint64_t))(*(_QWORD *)this + 24))(this, a2, a3, a4, a5, a6, a7, 1);
}

uint64_t CoreNLP::BERTEmbedding::fillTokenVectors(CoreNLP::BERTEmbedding *this, CFArrayRef theArray, unint64_t a3, unsigned int a4, float *a5, const float *a6, const float *a7)
{
  const __CFArray *v10;
  CFIndex v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  const __CFString *ValueAtIndex;
  _BYTE *v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  CFIndex v22;
  uint64_t *v23;
  const __CFArray *v24;
  _BYTE *v25;
  _BYTE *v26;
  const void *v27;
  _BYTE *v28;
  _BYTE *v29;
  int v30;
  _BYTE *v31;
  _BYTE *v32;
  unint64_t v33;
  int v34;
  const float *v36;
  unint64_t v37;
  uint64_t v38;
  void *__p;
  _BYTE *v40;
  void *v41;
  _BYTE *v42;
  void *v43;
  char v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  const void *v48;

  v10 = theArray;
  if (CFArrayGetCount(theArray) < 1)
  {
LABEL_35:
    corelm::NeuralNetwork::clear((CoreNLP::BERTEmbedding *)((char *)this + 24));
    return 1;
  }
  else
  {
    v12 = 0;
    v13 = a4;
    v14 = (uint64_t **)((char *)this + 24);
    v15 = (uint64_t *)((char *)this + 32);
    v36 = a7;
    while (1)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v10, v12);
      applesauce::CF::convert_to<std::string,0>(ValueAtIndex, (uint64_t)&v43);
      (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 19) + 16))(&v41);
      v17 = v41;
      v18 = v42;
      v19 = (v42 - (_BYTE *)v41) >> 3;
      if (v19 > v13)
      {
        v20 = v42 - (_BYTE *)v41 - 8;
        do
        {
          v18 -= 8;
          v19 = v20 >> 3;
          v20 -= 8;
        }
        while (v19 > v13);
        v42 = v18;
      }
      v37 = *((_QWORD *)this + 20);
      if (v19 <= v37)
      {
        std::string::basic_string[abi:ne180100]<0>(&v47, "input");
        corelm::NeuralNetwork::setInputTensor<long,void>(v14, (uint64_t *)v41, (v42 - (_BYTE *)v41) >> 3, (uint64_t)&v47, 1);
        if (SHIBYTE(v48) < 0)
          operator delete((void *)v47);
        v48 = 0;
        v45 = (void *)(((v42 - (_BYTE *)v41) >> 3) & ~((v42 - (_BYTE *)v41) >> 63));
        v46 = xmmword_191D40700;
        v47 = xmmword_191D406F0;
        std::vector<long>::vector<corelm::util::NumRange<long>::iterator,0>((uint64_t)&__p, &v47, &v45);
        std::string::basic_string[abi:ne180100]<0>(&v47, "position");
        corelm::NeuralNetwork::setInputTensor<long,void>(v14, (uint64_t *)__p, (v40 - (_BYTE *)__p) >> 3, (uint64_t)&v47, 1);
        if (SHIBYTE(v48) < 0)
          operator delete((void *)v47);
        if (corelm::util::contains<std::string,char const*,void>(v15, "temperature"))
        {
          v21 = operator new(4uLL);
          *v21 = 1065353216;
          std::string::basic_string[abi:ne180100]<0>(&v47, "temperature");
          corelm::NeuralNetwork::setInputTensor<float,void>(v14, v21, 1, (uint64_t)&v47, 1);
          if (SHIBYTE(v48) < 0)
            operator delete((void *)v47);
          operator delete(v21);
        }
        if (corelm::util::contains<std::string,char const*,void>(v15, "segment"))
        {
          v45 = 0;
          std::vector<long>::vector(&v47, (v42 - (_BYTE *)v41) >> 3, &v45);
          std::string::basic_string[abi:ne180100]<0>(&v45, "segment");
          corelm::NeuralNetwork::setInputTensor<long,void>(v14, (uint64_t *)v47, (uint64_t)(*((_QWORD *)&v47 + 1) - v47) >> 3, (uint64_t)&v45, 1);
          if (SHIBYTE(v46) < 0)
            operator delete(v45);
          if ((_QWORD)v47)
          {
            *((_QWORD *)&v47 + 1) = v47;
            operator delete((void *)v47);
          }
        }
        corelm::NeuralNetwork::predict((corelm::NeuralNetwork *)v14);
        v22 = v12;
        v23 = (uint64_t *)v14;
        v24 = v10;
        v26 = v41;
        v25 = v42;
        v38 = ((v25 - v26) >> 3) * (*(int (**)(CoreNLP::BERTEmbedding *))(*(_QWORD *)this + 64))(this);
        corelm::NeuralNetwork::getOutput<1ul>(v23, (int *)&v38, (uint64_t)this + 128, (uint64_t)&v47);
        v27 = v48;
        v29 = v41;
        v28 = v42;
        v30 = (*(uint64_t (**)(CoreNLP::BERTEmbedding *))(*(_QWORD *)this + 64))(this);
        memcpy(a5, v27, ((v28 - v29) >> 1) * v30);
        v32 = v41;
        v31 = v42;
        a5 += ((v31 - v32) >> 3) * (*(int (**)(CoreNLP::BERTEmbedding *))(*(_QWORD *)this + 64))(this);
        if (v13 <= (v42 - (_BYTE *)v41) >> 3)
        {
          v10 = v24;
          v14 = (uint64_t **)v23;
          v12 = v22;
          v15 = (uint64_t *)((char *)this + 32);
        }
        else
        {
          v33 = v13 - ((v42 - (_BYTE *)v41) >> 3);
          v10 = v24;
          v14 = (uint64_t **)v23;
          v12 = v22;
          v15 = (uint64_t *)((char *)this + 32);
          do
          {
            v34 = (*(uint64_t (**)(CoreNLP::BERTEmbedding *))(*(_QWORD *)this + 64))(this);
            memcpy(a5, v36, 4 * v34);
            a5 += (*(int (**)(CoreNLP::BERTEmbedding *))(*(_QWORD *)this + 64))(this);
            --v33;
          }
          while (v33);
        }
        if (__p)
        {
          v40 = __p;
          operator delete(__p);
        }
        v17 = v41;
      }
      if (v17)
      {
        v42 = v17;
        operator delete(v17);
      }
      if (v44 < 0)
        operator delete(v43);
      if (v19 > v37)
        return 0;
      if (++v12 >= CFArrayGetCount(v10))
        goto LABEL_35;
    }
  }
}

void sub_191C77580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  void *v32;

  if (*(char *)(v30 - 113) < 0)
    operator delete(*(void **)(v30 - 136));
  v32 = *(void **)(v30 - 112);
  if (v32)
  {
    *(_QWORD *)(v30 - 104) = v32;
    operator delete(v32);
  }
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

void corelm::NeuralNetwork::getOutput<1ul>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  char v6;
  CFIndex v7;
  uint64_t v8;
  const UInt8 *v9;
  CFIndex v10;
  CFStringRef v11;
  CFStringRef v12;
  uint64_t Output;
  uint64_t v14;
  std::runtime_error *exception;

  v6 = *(_BYTE *)(a3 + 23);
  if (v6 < 0)
  {
    v7 = *(_QWORD *)(a3 + 8);
    if (v7)
      goto LABEL_5;
LABEL_13:
    Output = _MRLNeuralNetworkGetOutput(*a1, 0);
    goto LABEL_14;
  }
  if (!*(_BYTE *)(a3 + 23))
    goto LABEL_13;
  v7 = *(_QWORD *)(a3 + 8);
LABEL_5:
  v8 = *a1;
  if (v6 >= 0)
    v9 = (const UInt8 *)a3;
  else
    v9 = *(const UInt8 **)a3;
  if (v6 >= 0)
    v10 = *(unsigned __int8 *)(a3 + 23);
  else
    v10 = v7;
  v11 = CFStringCreateWithBytes(0, v9, v10, 0x8000100u, 0);
  if (!v11)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v12 = v11;
  Output = _MRLNeuralNetworkGetOutput(v8, (uint64_t)v11);
  CFRelease(v12);
LABEL_14:
  v14 = *a2;
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = v14;
  *(_QWORD *)(a4 + 16) = Output;
}

void sub_191C77754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::BERTEmbedding::fillWordFragmentVectors(CoreNLP::BERTEmbedding *this, CFArrayRef theArray, unsigned int a3, unsigned int a4, float *a5, const float *a6, const float *a7, int a8)
{
  const __CFArray *v11;
  CFIndex v13;
  uint64_t v14;
  const __CFArray *ValueAtIndex;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  CFIndex v21;
  CFIndex Count;
  const __CFString *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  int v45;
  void *v46;
  unint64_t v47;
  _DWORD *v48;
  _BYTE *v49;
  _BYTE *v50;
  char *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  vDSP_Length v58;
  unint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  const float *v65;
  int v66;
  int v67;
  CFIndex v68;
  const __CFArray *v70;
  unint64_t v71;
  uint64_t *v72;
  CFIndex v73;
  unint64_t v74;
  uint64_t **v75;
  uint64_t v77;
  void *v78;
  _BYTE *v79;
  void *v80;
  void *__dst;
  _QWORD *v82;
  void *__p;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;

  v11 = theArray;
  if (CFArrayGetCount(theArray) < 1)
  {
LABEL_97:
    corelm::NeuralNetwork::clear((CoreNLP::BERTEmbedding *)((char *)this + 24));
    return 1;
  }
  else
  {
    v13 = 0;
    v75 = (uint64_t **)((char *)this + 24);
    v72 = (uint64_t *)((char *)this + 32);
    v14 = a4;
    v70 = v11;
    while (1)
    {
      v73 = v13;
      ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v11, v13);
      v86 = 0;
      v87 = 0;
      v88 = 0;
      __p = 0;
      v84 = 0;
      v85 = 0;
      v16 = *((_QWORD *)this + 19);
      if (*(char *)(v16 + 31) < 0)
      {
        v17 = *(_QWORD *)(v16 + 8);
        v18 = *(_QWORD *)(v16 + 16);
      }
      else
      {
        v17 = v16 + 8;
        v18 = *(unsigned __int8 *)(v16 + 31);
      }
      v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v17, v18);
      v20 = operator new(8uLL);
      v21 = 0;
      v80 = v20;
      *v20 = v19;
      __dst = v20 + 1;
      v82 = v20 + 1;
      while (1)
      {
        Count = CFArrayGetCount(ValueAtIndex);
        if (v21 == v14 || Count <= v21)
          break;
        v23 = (const __CFString *)CFArrayGetValueAtIndex(ValueAtIndex, v21);
        applesauce::CF::convert_to<std::string,0>(v23, (uint64_t)&v91);
        (*(void (**)(char **__return_ptr))(**((_QWORD **)this + 19) + 16))(&v89);
        v24 = (unint64_t)((_BYTE *)__dst - (_BYTE *)v80) >> 3;
        v25 = v87;
        if (v87 >= v88)
        {
          v27 = v86;
          v28 = (v87 - v86) >> 2;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 62)
            std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
          v30 = v88 - v86;
          if ((v88 - v86) >> 1 > v29)
            v29 = v30 >> 1;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
            v31 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          if (v31)
          {
            v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v88, v31);
            v27 = v86;
            v25 = v87;
          }
          else
          {
            v32 = 0;
          }
          v33 = &v32[4 * v28];
          *(_DWORD *)v33 = v24;
          v26 = v33 + 4;
          while (v25 != v27)
          {
            v34 = *((_DWORD *)v25 - 1);
            v25 -= 4;
            *((_DWORD *)v33 - 1) = v34;
            v33 -= 4;
          }
          v86 = v33;
          v87 = v26;
          v88 = &v32[4 * v31];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *(_DWORD *)v87 = v24;
          v26 = v25 + 4;
        }
        v87 = v26;
        v35 = ((_QWORD)v90 - (_QWORD)v89) >> 3;
        v36 = v84;
        if (v84 >= v85)
        {
          v38 = (char *)__p;
          v39 = (v84 - (_BYTE *)__p) >> 2;
          v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 62)
            std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
          v41 = v85 - (_BYTE *)__p;
          if ((v85 - (_BYTE *)__p) >> 1 > v40)
            v40 = v41 >> 1;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
            v42 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v42 = v40;
          if (v42)
          {
            v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v85, v42);
            v38 = (char *)__p;
            v36 = v84;
          }
          else
          {
            v43 = 0;
          }
          v44 = &v43[4 * v39];
          *(_DWORD *)v44 = v35;
          v37 = v44 + 4;
          while (v36 != v38)
          {
            v45 = *((_DWORD *)v36 - 1);
            v36 -= 4;
            *((_DWORD *)v44 - 1) = v45;
            v44 -= 4;
          }
          __p = v44;
          v84 = v37;
          v85 = &v43[4 * v42];
          if (v38)
            operator delete(v38);
        }
        else
        {
          *(_DWORD *)v84 = v35;
          v37 = v36 + 4;
        }
        v84 = v37;
        std::vector<long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<long *>,std::__wrap_iter<long *>>((uint64_t)&v80, (uint64_t)__dst, v89, (char *)v90, (uint64_t)(v90 - (_QWORD)v89) >> 3);
        if (v89)
        {
          *(_QWORD *)&v90 = v89;
          operator delete(v89);
        }
        if (SHIBYTE(v92) < 0)
          operator delete((void *)v91);
        ++v21;
      }
      v46 = v80;
      v47 = ((_BYTE *)__dst - (_BYTE *)v80) >> 3;
      v74 = *((_QWORD *)this + 20);
      if (v47 <= v74)
      {
        std::string::basic_string[abi:ne180100]<0>(&v91, "input");
        corelm::NeuralNetwork::setInputTensor<long,void>(v75, (uint64_t *)v80, ((_BYTE *)__dst - (_BYTE *)v80) >> 3, (uint64_t)&v91, 1);
        if (SHIBYTE(v92) < 0)
          operator delete((void *)v91);
        v92 = 0;
        v89 = (char *)((((_BYTE *)__dst - (_BYTE *)v80) >> 3) & ~(((_BYTE *)__dst - (_BYTE *)v80) >> 63));
        v90 = xmmword_191D40700;
        v91 = xmmword_191D406F0;
        std::vector<long>::vector<corelm::util::NumRange<long>::iterator,0>((uint64_t)&v78, &v91, &v89);
        std::string::basic_string[abi:ne180100]<0>(&v91, "position");
        corelm::NeuralNetwork::setInputTensor<long,void>(v75, (uint64_t *)v78, (v79 - (_BYTE *)v78) >> 3, (uint64_t)&v91, 1);
        if (SHIBYTE(v92) < 0)
          operator delete((void *)v91);
        if (corelm::util::contains<std::string,char const*,void>(v72, "temperature"))
        {
          v48 = operator new(4uLL);
          *v48 = 1065353216;
          std::string::basic_string[abi:ne180100]<0>(&v91, "temperature");
          corelm::NeuralNetwork::setInputTensor<float,void>(v75, v48, 1, (uint64_t)&v91, 1);
          if (SHIBYTE(v92) < 0)
            operator delete((void *)v91);
          operator delete(v48);
        }
        if (corelm::util::contains<std::string,char const*,void>(v72, "segment"))
        {
          v89 = 0;
          std::vector<long>::vector(&v91, ((_BYTE *)__dst - (_BYTE *)v80) >> 3, &v89);
          std::string::basic_string[abi:ne180100]<0>(&v89, "segment");
          corelm::NeuralNetwork::setInputTensor<long,void>(v75, (uint64_t *)v91, (uint64_t)(*((_QWORD *)&v91 + 1) - v91) >> 3, (uint64_t)&v89, 1);
          if (SHIBYTE(v90) < 0)
            operator delete(v89);
          if ((_QWORD)v91)
          {
            *((_QWORD *)&v91 + 1) = v91;
            operator delete((void *)v91);
          }
        }
        corelm::NeuralNetwork::predict((corelm::NeuralNetwork *)v75);
        v71 = v47;
        v50 = v80;
        v49 = __dst;
        v77 = ((v49 - v50) >> 3) * (*(int (**)(CoreNLP::BERTEmbedding *))(*(_QWORD *)this + 64))(this);
        corelm::NeuralNetwork::getOutput<1ul>((uint64_t *)v75, (int *)&v77, (uint64_t)this + 128, (uint64_t)&v91);
        v52 = v86;
        v51 = v87;
        if (*((_BYTE *)this + 168))
        {
          if (v87 != v86)
          {
            v53 = 0;
            LODWORD(v54) = *((_DWORD *)this + 4);
            do
            {
              if ((int)v54 >= 1)
              {
                v55 = 0;
                v56 = 0;
                v57 = *(_DWORD *)&v52[4 * v53];
                v58 = *((int *)__p + v53);
                do
                {
                  vDSP_meanv((const float *)(v92 + 4 * (int)v54 * v57 + v55 * 4), (int)v54, &a5[v55], v58);
                  ++v56;
                  v54 = *((int *)this + 4);
                  ++v55;
                }
                while (v56 < v54);
                v52 = v86;
                v51 = v87;
                a5 = (float *)((char *)a5 + v55 * 4);
                v14 = a4;
              }
              ++v53;
            }
            while (v53 < (v51 - v52) >> 2);
          }
        }
        else if (v87 != v86)
        {
          v59 = 0;
          do
          {
            if (a8 >= 1)
            {
              v60 = 0;
              v61 = *(_DWORD *)&v52[4 * v59];
              do
              {
                if (v60 >= *((_DWORD *)__p + v59))
                {
                  v64 = (*(uint64_t (**)(CoreNLP::BERTEmbedding *))(*(_QWORD *)this + 64))(this);
                  v65 = a7;
                }
                else
                {
                  v62 = v92;
                  v63 = (*(uint64_t (**)(CoreNLP::BERTEmbedding *))(*(_QWORD *)this + 64))(this);
                  v64 = (*(uint64_t (**)(CoreNLP::BERTEmbedding *))(*(_QWORD *)this + 64))(this);
                  v65 = (const float *)(v62 + 4 * v63 * (v61 + v60));
                }
                memcpy(a5, v65, 4 * v64);
                a5 += (*(int (**)(CoreNLP::BERTEmbedding *))(*(_QWORD *)this + 64))(this);
                ++v60;
              }
              while (a8 != v60);
              v52 = v86;
              v51 = v87;
              v14 = a4;
            }
            ++v59;
          }
          while (v59 < (v51 - v52) >> 2);
        }
        if (v21 >= a4)
        {
          v47 = v71;
        }
        else
        {
          v47 = v71;
          do
          {
            v66 = a8;
            if (a8 >= 1)
            {
              do
              {
                v67 = (*(uint64_t (**)(CoreNLP::BERTEmbedding *))(*(_QWORD *)this + 64))(this);
                memcpy(a5, a7, 4 * v67);
                a5 += (*(int (**)(CoreNLP::BERTEmbedding *))(*(_QWORD *)this + 64))(this);
                --v66;
              }
              while (v66);
            }
            LODWORD(v21) = v21 + 1;
          }
          while ((_DWORD)v21 != a4);
        }
        if (v78)
        {
          v79 = v78;
          operator delete(v78);
        }
        v46 = v80;
        v11 = v70;
      }
      if (v46)
      {
        __dst = v46;
        operator delete(v46);
      }
      if (__p)
      {
        v84 = (char *)__p;
        operator delete(__p);
      }
      if (v86)
      {
        v87 = v86;
        operator delete(v86);
      }
      if (v47 > v74)
        return 0;
      v68 = CFArrayGetCount(v11);
      v13 = v73 + 1;
      if (v73 + 1 >= v68)
        goto LABEL_97;
    }
  }
}

void sub_191C77EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  void *v33;
  uint64_t v34;
  void *v36;

  operator delete(v33);
  if (__p)
    operator delete(__p);
  if (a29)
    operator delete(a29);
  if (a32)
    operator delete(a32);
  v36 = *(void **)(v34 - 160);
  if (v36)
  {
    *(_QWORD *)(v34 - 152) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(a1);
}

__CFData *CoreNLP::BERTEmbedding::copyEmbeddingDataForTokenizedSentences(CoreNLP::BERTEmbedding *this, const __CFArray *a2, const __CFDictionary *a3, __CFDictionary *a4, __CFError **a5)
{
  void *v9;
  CFIndex v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _DWORD *v33;
  _BYTE *v34;
  _BYTE *v35;
  const UInt8 *v36;
  _BYTE *v37;
  _BYTE *v38;
  int v39;
  const __CFArray *theArray;
  uint64_t **v42;
  void *v43;
  void *value;
  __CFData *theData;
  uint64_t *v46;
  uint64_t v47;
  void *__p;
  _BYTE *v49;
  void *v50;
  void *__dst;
  char *v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  const UInt8 *v56;

  theData = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  value = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v43 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if (a3)
  {
    if (CFDictionaryContainsKey(a3, kNLStringEmbeddingPadEncoderInput[0])
      && (v9 = (void *)CFDictionaryGetValue(a3, kNLStringEmbeddingPadEncoderInput[0])) != 0)
    {
      LODWORD(a3) = objc_msgSend(v9, "unsignedIntValue");
    }
    else
    {
      LODWORD(a3) = 0;
    }
  }
  if (CFArrayGetCount(a2) >= 1)
  {
    v10 = 0;
    v11 = a3;
    v42 = (uint64_t **)((char *)this + 24);
    v46 = (uint64_t *)((char *)this + 32);
    theArray = a2;
    do
    {
      v12 = (void *)-[__CFArray objectAtIndex:](a2, "objectAtIndex:", v10);
      v13 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v14 = *((_QWORD *)this + 19);
      if (*(char *)(v14 + 31) < 0)
      {
        v15 = *(_QWORD *)(v14 + 8);
        v16 = *(_QWORD *)(v14 + 16);
      }
      else
      {
        v15 = v14 + 8;
        v16 = *(unsigned __int8 *)(v14 + 31);
      }
      v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, v15, v16);
      v18 = operator new(8uLL);
      v19 = 0;
      v50 = v18;
      *v18 = v17;
      __dst = v18 + 1;
      v52 = (char *)(v18 + 1);
      while (objc_msgSend(v12, "count") > v19)
      {
        applesauce::CF::convert_to<std::string,0>((const __CFString *)objc_msgSend(v12, "objectAtIndex:", v19), (uint64_t)&v55);
        (*(void (**)(char **__return_ptr))(**((_QWORD **)this + 19) + 16))(&v53);
        v20 = v53;
        v21 = ((uint64_t)(v54 - (_QWORD)v53) >> 3) + (((_BYTE *)__dst - (_BYTE *)v50) >> 3);
        v22 = *((_QWORD *)this + 20);
        if (v21 <= v22)
        {
          objc_msgSend(v13, "addObject:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", ((_BYTE *)__dst - (_BYTE *)v50) >> 3));
          std::vector<long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<long *>,std::__wrap_iter<long *>>((uint64_t)&v50, (uint64_t)__dst, v53, (char *)v54, (uint64_t)(v54 - (_QWORD)v53) >> 3);
          v20 = v53;
        }
        if (v20)
        {
          *(_QWORD *)&v54 = v20;
          operator delete(v20);
        }
        if (SHIBYTE(v56) < 0)
          operator delete((void *)v55);
        if (v21 > v22)
          break;
        ++v19;
      }
      while (objc_msgSend(v12, "count") > v19)
      {
        objc_msgSend(v13, "addObject:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", 0x7FFFFFFFFFFFFFFFLL, 0));
        ++v19;
      }
      if ((_DWORD)v11)
      {
        v23 = (char *)v50;
        v24 = (char *)__dst;
        v25 = ((_BYTE *)__dst - (_BYTE *)v50) >> 3;
        while (v25 < v11 && v25 < *((_QWORD *)this + 20))
        {
          if (v24 >= v52)
          {
            v27 = v25 + 1;
            if ((v25 + 1) >> 61)
              std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
            v28 = v52 - v23;
            if ((v52 - v23) >> 2 > v27)
              v27 = v28 >> 2;
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
              v29 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v29 = v27;
            if (v29)
            {
              v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v52, v29);
              v23 = (char *)v50;
              v24 = (char *)__dst;
            }
            else
            {
              v30 = 0;
            }
            v31 = &v30[8 * v25];
            *(_QWORD *)v31 = 0;
            v26 = v31 + 8;
            while (v24 != v23)
            {
              v32 = *((_QWORD *)v24 - 1);
              v24 -= 8;
              *((_QWORD *)v31 - 1) = v32;
              v31 -= 8;
            }
            v50 = v31;
            __dst = v26;
            v52 = &v30[8 * v29];
            if (v23)
              operator delete(v23);
          }
          else
          {
            *(_QWORD *)v24 = 0;
            v26 = v24 + 8;
          }
          __dst = v26;
          v23 = (char *)v50;
          v25 = ((_BYTE *)v26 - (_BYTE *)v50) >> 3;
          v24 = (char *)v26;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v55, "input");
      corelm::NeuralNetwork::setInputTensor<long,void>(v42, (uint64_t *)v50, ((_BYTE *)__dst - (_BYTE *)v50) >> 3, (uint64_t)&v55, 1);
      if (SHIBYTE(v56) < 0)
        operator delete((void *)v55);
      v56 = 0;
      v53 = (char *)((((_BYTE *)__dst - (_BYTE *)v50) >> 3) & ~(((_BYTE *)__dst - (_BYTE *)v50) >> 63));
      v54 = xmmword_191D40700;
      v55 = xmmword_191D406F0;
      std::vector<long>::vector<corelm::util::NumRange<long>::iterator,0>((uint64_t)&__p, &v55, &v53);
      std::string::basic_string[abi:ne180100]<0>(&v55, "position");
      corelm::NeuralNetwork::setInputTensor<long,void>(v42, (uint64_t *)__p, (v49 - (_BYTE *)__p) >> 3, (uint64_t)&v55, 1);
      if (SHIBYTE(v56) < 0)
        operator delete((void *)v55);
      if (corelm::util::contains<std::string,char const*,void>(v46, "temperature"))
      {
        v33 = operator new(4uLL);
        *v33 = 1065353216;
        std::string::basic_string[abi:ne180100]<0>(&v55, "temperature");
        corelm::NeuralNetwork::setInputTensor<float,void>(v42, v33, 1, (uint64_t)&v55, 1);
        if (SHIBYTE(v56) < 0)
          operator delete((void *)v55);
        operator delete(v33);
      }
      if (corelm::util::contains<std::string,char const*,void>(v46, "segment"))
      {
        v53 = 0;
        std::vector<long>::vector(&v55, ((_BYTE *)__dst - (_BYTE *)v50) >> 3, &v53);
        std::string::basic_string[abi:ne180100]<0>(&v53, "segment");
        corelm::NeuralNetwork::setInputTensor<long,void>(v42, (uint64_t *)v55, (uint64_t)(*((_QWORD *)&v55 + 1) - v55) >> 3, (uint64_t)&v53, 1);
        if (SHIBYTE(v54) < 0)
          operator delete(v53);
        if ((_QWORD)v55)
        {
          *((_QWORD *)&v55 + 1) = v55;
          operator delete((void *)v55);
        }
      }
      corelm::NeuralNetwork::predict((corelm::NeuralNetwork *)v42);
      v35 = v50;
      v34 = __dst;
      v47 = ((v34 - v35) >> 3) * (*(int (**)(CoreNLP::BERTEmbedding *))(*(_QWORD *)this + 64))(this);
      corelm::NeuralNetwork::getOutput<1ul>((uint64_t *)v42, (int *)&v47, (uint64_t)this + 128, (uint64_t)&v55);
      v36 = v56;
      v38 = v50;
      v37 = __dst;
      v39 = (*(uint64_t (**)(CoreNLP::BERTEmbedding *))(*(_QWORD *)this + 64))(this);
      CFDataAppendBytes(theData, v36, ((v37 - v38) >> 1) * v39);
      objc_msgSend(value, "addObject:", v13);
      objc_msgSend(v43, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", ((_BYTE *)__dst - (_BYTE *)v50) >> 3));
      if (__p)
      {
        v49 = __p;
        operator delete(__p);
      }
      a2 = theArray;
      if (v50)
      {
        __dst = v50;
        operator delete(v50);
      }
      ++v10;
    }
    while (v10 < CFArrayGetCount(theArray));
  }
  CFDictionarySetValue(a4, kNLStringEmbeddingTokenizedBatchComponentRanges[0], value);
  CFDictionarySetValue(a4, kNLStringEmbeddingTokenizedBatchComponentsCount[0], v43);
  corelm::NeuralNetwork::clear((CoreNLP::BERTEmbedding *)((char *)this + 24));
  return theData;
}

void sub_191C7863C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  void *v28;

  operator delete(v28);
  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  _Unwind_Resume(a1);
}

BOOL CoreNLP::BERTEmbedding::fillStringVector(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _BYTE *v9;
  _BYTE *v10;
  int v11;
  void *v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  int v17;
  uint64_t v18;
  void *v19;
  _BYTE *v20;
  void *v21;
  _BYTE *v22;
  _BYTE v23[24];
  void *__p[2];
  uint64_t v25;

  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 152) + 16))(&v21);
  v5 = v21;
  v6 = (v22 - (_BYTE *)v21) >> 3;
  v7 = *(_QWORD *)(a1 + 160);
  if (v6 <= v7)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "input");
    corelm::NeuralNetwork::setInputTensor<long,void>((uint64_t **)(a1 + 24), (uint64_t *)v21, (v22 - (_BYTE *)v21) >> 3, (uint64_t)__p, 1);
    if (SHIBYTE(v25) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = xmmword_191D406F0;
    v25 = 0;
    *(_QWORD *)v23 = ((v22 - (_BYTE *)v21) >> 3) & ~((v22 - (_BYTE *)v21) >> 63);
    *(_OWORD *)&v23[8] = xmmword_191D40700;
    std::vector<long>::vector<corelm::util::NumRange<long>::iterator,0>((uint64_t)&v19, __p, v23);
    std::string::basic_string[abi:ne180100]<0>(__p, "position");
    corelm::NeuralNetwork::setInputTensor<long,void>((uint64_t **)(a1 + 24), (uint64_t *)v19, (v20 - (_BYTE *)v19) >> 3, (uint64_t)__p, 1);
    if (SHIBYTE(v25) < 0)
      operator delete(__p[0]);
    if (corelm::util::contains<std::string,char const*,void>((uint64_t *)(a1 + 32), "temperature"))
    {
      v8 = operator new(4uLL);
      *v8 = 1065353216;
      std::string::basic_string[abi:ne180100]<0>(__p, "temperature");
      corelm::NeuralNetwork::setInputTensor<float,void>((uint64_t **)(a1 + 24), v8, 1, (uint64_t)__p, 1);
      if (SHIBYTE(v25) < 0)
        operator delete(__p[0]);
      operator delete(v8);
    }
    if (corelm::util::contains<std::string,char const*,void>((uint64_t *)(a1 + 32), "segment"))
    {
      *(_QWORD *)v23 = 0;
      std::vector<long>::vector(__p, (v22 - (_BYTE *)v21) >> 3, v23);
      std::string::basic_string[abi:ne180100]<0>(v23, "segment");
      corelm::NeuralNetwork::setInputTensor<long,void>((uint64_t **)(a1 + 24), (uint64_t *)__p[0], ((char *)__p[1] - (char *)__p[0]) >> 3, (uint64_t)v23, 1);
      if ((v23[23] & 0x80000000) != 0)
        operator delete(*(void **)v23);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    corelm::NeuralNetwork::predict((corelm::NeuralNetwork *)(a1 + 24));
    v10 = v21;
    v9 = v22;
    v18 = ((v9 - v10) >> 3) * (*(int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    corelm::NeuralNetwork::getOutput<1ul>((uint64_t *)(a1 + 24), (int *)&v18, a1 + 128, (uint64_t)__p);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    v17 = 0;
    std::vector<float>::vector(v23, v11, &v17);
    v12 = *(void **)a3;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)(a3 + 8) = v12;
      operator delete(v12);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    *(_OWORD *)a3 = *(_OWORD *)v23;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&v23[16];
    v14 = v21;
    v13 = v22;
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    memmove(*(void **)a3, (const void *)(v25 + 4 * (((v13 - v14) >> 3) - 1) * v15), *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
    corelm::NeuralNetwork::clear((corelm::NeuralNetwork *)(a1 + 24));
    if (v19)
    {
      v20 = v19;
      operator delete(v19);
    }
    v5 = v21;
  }
  if (v5)
  {
    v22 = v5;
    operator delete(v5);
  }
  return v6 <= v7;
}

void sub_191C78A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a22 < 0)
    operator delete(__p);
  if (a24)
    operator delete(a24);
  if (a11)
    operator delete(a11);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::BERTEmbedding::version(CoreNLP::BERTEmbedding *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t CoreNLP::BERTEmbedding::dimension(CoreNLP::BERTEmbedding *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t CoreNLP::BERTEmbedding::modelLanguage(CoreNLP::BERTEmbedding *this)
{
  return *((unsigned int *)this + 2);
}

void CoreNLP::BERTEmbedding::~BERTEmbedding(CoreNLP::BERTEmbedding *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E2DF1DE8;
  v2 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  corelm::NeuralNetwork::~NeuralNetwork((char **)this + 3);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E2DF1DE8;
  v2 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  corelm::NeuralNetwork::~NeuralNetwork((char **)this + 3);
  JUMPOUT(0x19401E994);
}

uint64_t CoreNLP::BERTEmbedding::setMaxSeqLenSupportedByModel(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 160) = a2;
  return this;
}

uint64_t CoreNLP::BERTEmbedding::setEmbeddingNodeName(uint64_t a1, const std::string *a2)
{
  UInt8 *v3;
  uint64_t result;
  std::runtime_error *exception;
  std::string v6;

  v3 = (UInt8 *)(a1 + 128);
  std::string::operator=((std::string *)(a1 + 128), a2);
  result = corelm::NeuralNetwork::declareOutput((uint64_t *)(a1 + 24), v3);
  if ((result & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" not found", (const void **)v3, (void **)&v6.__r_.__value_.__l.__data_);
    std::runtime_error::runtime_error(exception, &v6);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_191C78CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t CoreNLP::BERTEmbedding::setEmbeddingDimension(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

uint64_t CoreNLP::BERTEmbedding::setPreProcessor(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 152);
  v3 = *a2;
  *a2 = 0;
  v5 = v3;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 64))(v2, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_191C78D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::BERTEmbedding::textToIDs(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 152);
  v3 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v4 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (uint64_t *)*a2;
    v4 = v3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, a2, v4, 1);
}

uint64_t CoreNLP::BERTEmbedding::idstoText(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 24))(*(_QWORD *)(a1 + 152));
}

uint64_t CoreNLP::BERTEmbedding::setMeanPooling(uint64_t this, char a2)
{
  *(_BYTE *)(this + 168) = a2;
  return this;
}

uint64_t corelm::NeuralNetwork::declareOutput(uint64_t *a1, const UInt8 *a2)
{
  uint64_t v2;
  CFIndex v3;
  CFIndex v4;
  CFStringRef v5;
  CFStringRef v6;
  void *v7;
  void *v8;
  uint64_t v9;
  std::runtime_error *exception;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;

  v2 = *a1;
  v3 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v4 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v4 = v3;
  }
  v5 = CFStringCreateWithBytes(0, a2, v4, 0x8000100u, 0);
  if (!v5)
  {
LABEL_10:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = v5;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v7 = getMRLNeuralNetworkDeclareOutputSymbolLoc(void)::ptr;
  v15 = getMRLNeuralNetworkDeclareOutputSymbolLoc(void)::ptr;
  if (!getMRLNeuralNetworkDeclareOutputSymbolLoc(void)::ptr)
  {
    v8 = (void *)MontrealLibrary();
    v7 = dlsym(v8, "MRLNeuralNetworkDeclareOutput");
    v13[3] = (uint64_t)v7;
    getMRLNeuralNetworkDeclareOutputSymbolLoc(void)::ptr = v7;
  }
  _Block_object_dispose(&v12, 8);
  if (!v7)
  {
    dlerror();
    abort_report_np();
    __break(1u);
    goto LABEL_10;
  }
  v9 = ((uint64_t (*)(uint64_t, CFStringRef))v7)(v2, v6);
  CFRelease(v6);
  return v9;
}

void sub_191C79040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_191C790E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::ContextualWordEmbedding::ContextualWordEmbedding(uint64_t a1, uint64_t a2, int a3, int a4)
{
  CoreNLP::MontrealModel **v6;
  CoreNLP::MontrealModel *v7;
  std::runtime_error *exception;

  *(_QWORD *)a1 = &off_1E2DF2B50;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = (CoreNLP::MontrealModel **)(a1 + 16);
  v7 = (CoreNLP::MontrealModel *)operator new();
  CoreNLP::MontrealModel::MontrealModel(v7, a2);
  std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100](v6, v7);
  if (!*(_QWORD *)*v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to load model");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_191C791B0(_Unwind_Exception *a1)
{
  CoreNLP::MontrealModel **v1;

  std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::ContextualWordEmbedding::fillWordVectors(CoreNLP::ContextualWordEmbedding *this, CFArrayRef theArray, unsigned int a3, int a4, float *a5, const float *a6, const float *a7)
{
  unint64_t v9;
  const __CFArray *v10;
  unsigned int v12;
  BOOL v13;
  int v14;
  unint64_t v16;
  CFIndex v17;
  const __CFArray *ValueAtIndex;
  char *v19;
  CFIndex v20;
  unint64_t i;
  CFIndex Count;
  const __CFString *v23;
  float v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  void *v34;
  float *v35;
  unsigned int v36;
  unint64_t v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  char *v48;
  int v49;
  const __CFArray *v51;
  const float *v52;
  CFIndex v53;
  unint64_t v54;
  _DWORD v55[3];
  __int128 v56;
  int v57;
  int v58;
  void *__src;
  __int128 v60;
  void *v61;
  __int128 v62;
  void *__p;
  __int128 v64;
  void *v65;
  void *__dst;
  uint64_t v67;

  LODWORD(v9) = a4;
  v10 = theArray;
  v12 = *((_DWORD *)this + 2);
  v13 = v12 > 0x1D;
  v14 = (1 << v12) & 0x20000402;
  if (v13 || v14 == 0)
    v16 = 50;
  else
    v16 = 16;
  if (CFArrayGetCount(theArray) >= 1)
  {
    v17 = 0;
    v9 = v9;
    v51 = v10;
    v52 = a7;
    v54 = v9;
    do
    {
      ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v10, v17);
      v65 = 0;
      __dst = 0;
      v67 = 0;
      LODWORD(v61) = 1132593152;
      std::vector<float>::vector(&__p, v16, &v61);
      v19 = (char *)__p;
      *(_QWORD *)__p = 0x4380000043810000;
      *((_DWORD *)v19 + 2) = 1132560384;
      std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((uint64_t)&v65, (uint64_t)__dst, v19, (char *)v64, (uint64_t)(v64 - (_QWORD)v19) >> 2);
      v20 = 0;
      for (i = v9; ; --i)
      {
        Count = CFArrayGetCount(ValueAtIndex);
        if (v20 == v9 || v20 >= Count)
          break;
        v23 = (const __CFString *)CFArrayGetValueAtIndex(ValueAtIndex, v20);
        applesauce::CF::convert_to<std::string,0>(v23, (uint64_t)&v61);
        v58 = 1132593152;
        std::vector<float>::vector(&__src, v16, &v58);
        if (__p)
        {
          *(_QWORD *)&v64 = __p;
          operator delete(__p);
        }
        v25 = (char *)__src;
        __p = __src;
        v26 = (char *)v60;
        v64 = v60;
        *(_DWORD *)__src = 1132527616;
        v27 = HIBYTE(v62);
        if (v62 < 0)
          v27 = v62;
        v28 = v27 + 2;
        if ((int)v16 < v28)
          v28 = v16;
        if (v28 < 3)
        {
          v30 = 0;
        }
        else
        {
          v29 = 0;
          v30 = v28 - 2;
          do
          {
            if (v62 >= 0)
              v31 = &v61;
            else
              v31 = v61;
            LOBYTE(v24) = v31[v29];
            v24 = (float)LODWORD(v24);
            *(float *)&v25[4 * v29++ + 4] = v24;
          }
          while (v30 != v29);
        }
        *(_DWORD *)&v25[4 * v30 + 4] = 1132560384;
        std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((uint64_t)&v65, (uint64_t)__dst, v25, v26, (v26 - v25) >> 2);
        if (SHIBYTE(v62) < 0)
          operator delete(v61);
        ++v20;
      }
      LODWORD(__src) = 1132593152;
      std::vector<float>::vector(&v61, v16, &__src);
      if (__p)
      {
        *(_QWORD *)&v64 = __p;
        operator delete(__p);
      }
      v32 = (char *)v61;
      __p = v61;
      v33 = (char *)v62;
      v64 = v62;
      *(_QWORD *)v61 = 0x4380800043810000;
      *((_DWORD *)v32 + 2) = 1132560384;
      std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((uint64_t)&v65, (uint64_t)__dst, v32, v33, (v33 - v32) >> 2);
      v34 = v65;
      v35 = (float *)__dst;
      v36 = *((_DWORD *)this + 2);
      v37 = (((_BYTE *)__dst - (_BYTE *)v65) >> 2) / v16;
      v53 = v17;
      if (v36 <= 0x1D && ((1 << v36) & 0x20000402) != 0)
      {
        v38 = (float *)v65;
        if (v65 != __dst)
        {
          do
          {
            *v38 = *v38 + 1.0;
            ++v38;
          }
          while (v38 != v35);
        }
        CoreNLP::MontrealModel::setInput(*((CoreNLP::MontrealModel **)this + 2), 1, v37, v34, CFSTR("elmo_input"));
        CoreNLP::MontrealModel::predict(*((CoreNLP::MontrealModel **)this + 2));
        v39 = CoreNLP::MontrealModel::output(*((CoreNLP::MontrealModel **)this + 2), CFSTR("elmo_embedding"));
        v40 = CoreNLP::MontrealModel::output(*((CoreNLP::MontrealModel **)this + 2), CFSTR("elmo_lstm0"));
        v41 = CoreNLP::MontrealModel::output(*((CoreNLP::MontrealModel **)this + 2), CFSTR("elmo_lstm1"));
        if (v37 >= 3)
        {
          v42 = (char *)(v41 + 1024);
          v43 = (char *)(v40 + 1024);
          v44 = (char *)(v39 + 512);
          do
          {
            if (*((_DWORD *)this + 3) == 1)
            {
              memcpy(a5, v44, 0x200uLL);
              memcpy(a5 + 128, v43, 0x400uLL);
              memcpy(a5 + 384, v42, 0x400uLL);
              a5 += 640;
            }
            --v37;
            v42 += 1024;
            v43 += 1024;
            v44 += 512;
          }
          while (v37 > 2);
        }
      }
      else
      {
        v45 = *((_QWORD *)this + 2);
        LOWORD(v55[0]) = 256;
        v55[1] = 3;
        v55[2] = v16;
        *(_QWORD *)&v46 = 0x100000001;
        *((_QWORD *)&v46 + 1) = 0x100000001;
        v56 = v46;
        v57 = (((_BYTE *)__dst - (_BYTE *)v65) >> 2) / v16;
        CoreNLP::MontrealModel::setInputTensor(v45, v55, (uint64_t)v65, (uint64_t)CFSTR("input"));
        CoreNLP::MontrealModel::predict(*((CoreNLP::MontrealModel **)this + 2));
        v47 = CoreNLP::MontrealModel::output(*((CoreNLP::MontrealModel **)this + 2), CFSTR("output"));
        if (v37 >= 3)
        {
          v48 = (char *)(v47 + 2560);
          do
          {
            memcpy(a5, v48, 0xA00uLL);
            a5 += 640;
            --v37;
            v48 += 2560;
          }
          while (v37 > 2);
        }
      }
      CoreNLP::MontrealModel::clear(*((const void ***)this + 2));
      v10 = v51;
      if (v20 < v54)
      {
        do
        {
          v49 = (*(uint64_t (**)(CoreNLP::ContextualWordEmbedding *))(*(_QWORD *)this + 64))(this);
          memcpy(a5, v52, 4 * v49);
          a5 += (*(int (**)(CoreNLP::ContextualWordEmbedding *))(*(_QWORD *)this + 64))(this);
          --i;
        }
        while (i);
      }
      if (__p)
      {
        *(_QWORD *)&v64 = __p;
        operator delete(__p);
      }
      v9 = v54;
      if (v65)
      {
        __dst = v65;
        operator delete(v65);
      }
      v17 = v53 + 1;
    }
    while (v53 + 1 < CFArrayGetCount(v51));
  }
  return 1;
}

void sub_191C796D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p)
    operator delete(__p);
  if (a30)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::ContextualWordEmbedding::fillTokenVectors(CoreNLP::ContextualWordEmbedding *this, const __CFArray *a2, uint64_t a3, uint64_t a4, float *a5, const float *a6, const float *a7)
{
  void *v13;

  v13 = CoreNLP::AbstractEmbedding::tokenizeSentences(this, a2);
  (*(void (**)(CoreNLP::ContextualWordEmbedding *, void *, uint64_t, uint64_t, float *, const float *, const float *))(*(_QWORD *)this + 16))(this, v13, a3, a4, a5, a6, a7);
  return 1;
}

uint64_t CoreNLP::ContextualWordEmbedding::version(CoreNLP::ContextualWordEmbedding *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t CoreNLP::ContextualWordEmbedding::dimension(CoreNLP::ContextualWordEmbedding *this)
{
  return 640;
}

uint64_t CoreNLP::ContextualWordEmbedding::modelLanguage(CoreNLP::ContextualWordEmbedding *this)
{
  return *((unsigned int *)this + 2);
}

void CoreNLP::ContextualWordEmbedding::~ContextualWordEmbedding(CoreNLP::MontrealModel **this)
{
  *this = (CoreNLP::MontrealModel *)&off_1E2DF2B50;
  std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100](this + 2, 0);
}

{
  *this = (CoreNLP::MontrealModel *)&off_1E2DF2B50;
  std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100](this + 2, 0);
  JUMPOUT(0x19401E994);
}

uint64_t CoreNLP::AbstractEmbedding::fillWordFragmentVectors(CoreNLP::AbstractEmbedding *this, const __CFArray *a2, unsigned int a3, unsigned int a4, float *a5, const float *a6, const float *a7)
{
  NSObject *v7;

  if (CoreNLP::AbstractEmbedding::fillWordFragmentVectors(__CFArray const*,unsigned int,unsigned int,float *,float const*,float const*,int)::sOnce != -1)
    dispatch_once(&CoreNLP::AbstractEmbedding::fillWordFragmentVectors(__CFArray const*,unsigned int,unsigned int,float *,float const*,float const*,int)::sOnce, &__block_literal_global);
  v7 = CoreNLP::AbstractEmbedding::fillWordFragmentVectors(__CFArray const*,unsigned int,unsigned int,float *,float const*,float const*,int)::sLogger;
  if (os_log_type_enabled((os_log_t)CoreNLP::AbstractEmbedding::fillWordFragmentVectors(__CFArray const*,unsigned int,unsigned int,float *,float const*,float const*,int)::sLogger, OS_LOG_TYPE_ERROR))
  {
    CoreNLP::AbstractEmbedding::fillWordFragmentVectors(v7);
  }
  return 0;
}

uint64_t CoreNLP::AbstractEmbedding::fillStringVector()
{
  return 0;
}

uint64_t CoreNLP::AbstractEmbedding::copyEmbeddingDataForTokenizedSentences(CoreNLP::AbstractEmbedding *this, const __CFArray *a2, const __CFDictionary *a3, __CFDictionary *a4, __CFError **a5)
{
  if (a5)
    *a5 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kNLStringEmbeddingErrorDomain[0], 1, 0);
  return 0;
}

void CoreNLP::AbstractEmbedding::textToIDs(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

_QWORD *CoreNLP::AbstractEmbedding::idstoText@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

os_log_t ___ZN7CoreNLP17AbstractEmbedding23fillWordFragmentVectorsEPK9__CFArrayjjPfPKfS6_i_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.CoreNLP", "Embedding");
  CoreNLP::AbstractEmbedding::fillWordFragmentVectors(__CFArray const*,unsigned int,unsigned int,float *,float const*,float const*,int)::sLogger = (uint64_t)result;
  return result;
}

CoreNLP::MontrealModel *std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100](CoreNLP::MontrealModel **a1, CoreNLP::MontrealModel *a2)
{
  CoreNLP::MontrealModel *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CoreNLP::MontrealModel::~MontrealModel(result);
    JUMPOUT(0x19401E994);
  }
  return result;
}

char *std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  char *v30;
  int v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 2);
    if (v14 >> 62)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 2;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[4 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[4 * v17];
    v29 = 4 * a5;
    v30 = &v28[4 * a5];
    do
    {
      v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[4 * a5];
    v25 = &v23[-4 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_191C79B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t CoreNLP::PosTagger::PosTagger(uint64_t a1, int a2, int a3, uint64_t a4)
{
  CoreNLP::MontrealModel *v6;
  __int128 v7;
  int v8;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 44) = a3;
  v6 = (CoreNLP::MontrealModel *)operator new();
  CoreNLP::MontrealModel::MontrealModel(v6, a4);
  std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100]((CoreNLP::MontrealModel **)a1, v6);
  *(_DWORD *)(a1 + 36) = 1;
  *(_QWORD *)&v7 = 0x100000001;
  *((_QWORD *)&v7 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 20) = v7;
  *(_WORD *)(a1 + 8) = 257;
  v8 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 12) = 1;
  *(_DWORD *)(a1 + 16) = v8;
  return a1;
}

void sub_191C79CF0(_Unwind_Exception *a1)
{
  CoreNLP::MontrealModel **v1;
  uint64_t v2;

  MEMORY[0x19401E994](v2, 0x80C40803F642BLL);
  std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void CoreNLP::PosTagger::GetPosTags(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, char **a4@<X8>)
{
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int v14;
  uint64_t v15;
  int v16;
  CoreNLP::MontrealModel *v17;
  __int128 v18;
  float *v19;
  float *v20;
  float *v21;
  float v22;
  uint64_t v23;
  float *v24;
  float v25;
  float v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int v38;
  uint64_t v40;
  _OWORD v41[2];

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v40 = (uint64_t)(a4 + 2);
  v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a4 + 2), 1uLL);
  v9 = *a4;
  v10 = a4[1];
  v12 = &v8[4 * v11];
  *(_DWORD *)v8 = 0;
  v13 = v8 + 4;
  while (v10 != v9)
  {
    v14 = *((_DWORD *)v10 - 1);
    v10 -= 4;
    *((_DWORD *)v8 - 1) = v14;
    v8 -= 4;
  }
  *a4 = v8;
  a4[1] = v13;
  a4[2] = v12;
  if (v9)
    operator delete(v9);
  a4[1] = v13;
  if (a3 >= 1)
  {
    v15 = *(int *)(a1 + 44);
    v16 = 1;
    do
    {
      v17 = *(CoreNLP::MontrealModel **)a1;
      v18 = *(_OWORD *)(a1 + 24);
      v41[0] = *(_OWORD *)(a1 + 8);
      v41[1] = v18;
      CoreNLP::MontrealModel::setInputTensor((uint64_t)v17, v41, *a2 + 4 * *(_DWORD *)(a1 + 40) * v16, (uint64_t)CFSTR("input"));
      CoreNLP::MontrealModel::predict(*(CoreNLP::MontrealModel **)a1);
      v19 = (float *)CoreNLP::MontrealModel::output(*(CoreNLP::MontrealModel **)a1, CFSTR("output"));
      if (v15 >= 2)
      {
        v21 = v19 + 1;
        v22 = *v19;
        v23 = 4 * v15 - 4;
        v20 = v19;
        v24 = v19 + 1;
        do
        {
          v25 = *v24++;
          v26 = v25;
          if (v22 < v25)
          {
            v22 = v26;
            v20 = v21;
          }
          v21 = v24;
          v23 -= 4;
        }
        while (v23);
      }
      else
      {
        v20 = v19;
      }
      v27 = (unint64_t)((char *)v20 - (char *)v19) >> 2;
      v29 = a4[1];
      v28 = (unint64_t)a4[2];
      if ((unint64_t)v29 >= v28)
      {
        v31 = *a4;
        v32 = (v29 - *a4) >> 2;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 62)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v34 = v28 - (_QWORD)v31;
        if (v34 >> 1 > v33)
          v33 = v34 >> 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
          v35 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (v35)
        {
          v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v40, v35);
          v31 = *a4;
          v29 = a4[1];
        }
        else
        {
          v36 = 0;
        }
        v37 = &v36[4 * v32];
        *(_DWORD *)v37 = v27;
        v30 = v37 + 4;
        while (v29 != v31)
        {
          v38 = *((_DWORD *)v29 - 1);
          v29 -= 4;
          *((_DWORD *)v37 - 1) = v38;
          v37 -= 4;
        }
        *a4 = v37;
        a4[1] = v30;
        a4[2] = &v36[4 * v35];
        if (v31)
          operator delete(v31);
      }
      else
      {
        *(_DWORD *)v29 = v27;
        v30 = v29 + 4;
      }
      a4[1] = v30;
    }
    while (v16++ != a3);
  }
  CoreNLP::MontrealModel::clear(*(const void ***)a1);
}

void sub_191C79F40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL corelm::util::InFile::getLine(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  const std::locale::facet *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  std::locale v8;

  v3 = *(_QWORD **)(a1 + 32);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
  v4 = std::locale::use_facet(&v8, MEMORY[0x1E0DE4A90]);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v8);
  v6 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, a2, v5);
  return (*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) == 0;
}

void sub_191C7A00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void corelm::util::InFile::getLines(corelm::util::InFile *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  __int128 v5;
  uint64_t v6;
  void *__p[2];
  uint64_t v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  __p[0] = 0;
  __p[1] = 0;
  v8 = 0;
  while (corelm::util::InFile::getLine((uint64_t)this, (uint64_t)__p))
  {
    v4 = a2[1];
    if (v4 >= a2[2])
    {
      v6 = std::vector<std::string>::__emplace_back_slow_path<std::string&>(a2, (__int128 *)__p);
    }
    else
    {
      if (SHIBYTE(v8) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a2[1], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        v5 = *(_OWORD *)__p;
        *(_QWORD *)(v4 + 16) = v8;
        *(_OWORD *)v4 = v5;
      }
      v6 = v4 + 24;
      a2[1] = v4 + 24;
    }
    a2[1] = v6;
  }
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
}

void sub_191C7A0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  uint64_t v16;

  v15[1] = v16;
  if (a15 < 0)
    operator delete(__p);
  __p = v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t corelm::util::InFile::reset(corelm::util::InFile *this)
{
  std::ios_base::clear((std::ios_base *)(*((_QWORD *)this + 4) + *(_QWORD *)(**((_QWORD **)this + 4) - 24)), 0);
  return std::istream::seekg();
}

uint64_t corelm::util::InFile::getPos(corelm::util::InFile *this)
{
  return std::istream::tellg();
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x19401E73C](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_191C7A27C(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191C7A248);
  }
  __cxa_rethrow();
}

void sub_191C7A2C0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_191C7A3E0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::ModelContainer::ModelContainer(uint64_t a1, int a2, int a3, uint64_t a4, CFTypeRef cf, const void *a6)
{
  CFArrayRef *v9;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v12;
  std::logic_error *v14;
  std::logic_error *exception;
  CFTypeRef cfa;
  CFTypeRef v17;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_QWORD *)(a1 + 8) = a4;
  if (cf)
    CFRetain(cf);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)(a1 + 16), cf);
  if (a6)
    CFRetain(a6);
  v9 = (CFArrayRef *)(a1 + 24);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)(a1 + 24), a6);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if (!*(_QWORD *)(a1 + 16))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid info dictionary");
    goto LABEL_19;
  }
  if (!*v9)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid model data dictionary");
LABEL_19:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2DEE9A8, MEMORY[0x1E0DE4360]);
  }
  for (i = 0; i < CFArrayGetCount((CFArrayRef)a6); ++i)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*v9, i);
    v12 = ValueAtIndex;
    if (ValueAtIndex)
      CFRetain(ValueAtIndex);
    v17 = v12;
    applesauce::CF::TypeRef::operator applesauce::CF::DataRef(&v17, (applesauce::CF::DataRef *)&cfa);
    if (!cfa)
    {
      v14 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v14, "Invalid data type in model data array");
      v14->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(v14, (struct type_info *)off_1E2DEE9A8, MEMORY[0x1E0DE4360]);
    }
    CFRelease(cfa);
    if (v17)
      CFRelease(v17);
  }
  return a1;
}

void sub_191C7A5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  const void **v10;
  uint64_t v11;
  const void **v12;
  CoreNLP::ModelContainerMMap **v13;
  void *v14;
  void **v15;
  void *v17;

  __cxa_free_exception(v14);
  std::unique_ptr<CoreNLP::ModelContainerMMap>::reset[abi:ne180100](v13, 0);
  v17 = *(void **)(v11 + 56);
  if (v17)
  {
    *(_QWORD *)(v11 + 64) = v17;
    operator delete(v17);
  }
  if (*(char *)(v11 + 55) < 0)
    operator delete(*v15);
  applesauce::CF::ArrayRef::~ArrayRef(v12);
  applesauce::CF::DictionaryRef::~DictionaryRef(v10);
  _Unwind_Resume(a1);
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
  return result;
}

applesauce::CF::DataRef *applesauce::CF::TypeRef::operator applesauce::CF::DataRef@<X0>(const void **a1@<X0>, applesauce::CF::DataRef *a2@<X8>)
{
  const void *v4;
  CFTypeID v5;
  const void *v6;
  std::runtime_error *exception;

  v4 = *a1;
  if (v4)
  {
    v5 = CFGetTypeID(v4);
    if (v5 != CFDataGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(exception);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v6 = *a1;
    if (v6)
      CFRetain(v6);
  }
  else
  {
    v6 = 0;
  }
  return applesauce::CF::DataRef::DataRef(a2, v6);
}

void sub_191C7A70C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::DataRef::~DataRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

CoreNLP::ModelContainer *CoreNLP::ModelContainer::ModelContainer(CoreNLP::ModelContainer *this, CFURLRef anURL, char a3)
{
  uint64_t v5;
  char *v6;
  const __CFString *v7;
  const __CFString *v8;
  std::ios_base::failure *exception;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::error_code __ec;
  std::string v17;
  std::string __msg;
  __int128 v19;
  _QWORD v20[51];
  _QWORD v21[20];

  v21[19] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  v5 = kNLModelUnknownRevision;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v6 = (char *)this + 32;
  *((_QWORD *)this + 1) = v5;
  *((_QWORD *)this + 10) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  v7 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
  v8 = v7;
  if (v7)
  {
    CoreNLP::getUTF8StringFromCFString(v7, &v19);
    if (*((char *)this + 55) < 0)
      operator delete(*(void **)v6);
    *(_OWORD *)v6 = v19;
    *((_QWORD *)v6 + 2) = v20[0];
    CFRelease(v8);
  }
  std::ifstream::basic_ifstream(&v19);
  if (!v20[15])
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v17, "Failed to open the given file ");
    v11 = *((char *)this + 55);
    if (v11 >= 0)
      v12 = v6;
    else
      v12 = (const std::string::value_type *)*((_QWORD *)this + 4);
    if (v11 >= 0)
      v13 = *((unsigned __int8 *)this + 55);
    else
      v13 = *((_QWORD *)this + 5);
    v14 = std::string::append(&v17, v12, v13);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    __msg.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)&__ec.__val_ = 1;
    __ec.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(exception, &__msg, &__ec);
    __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  CoreNLP::ModelContainer::parseMetaData((uint64_t)this, (uint64_t)&v19);
  if ((a3 & 8) != 0)
    CoreNLP::ModelContainer::createMemoryMap(this);
  *(_QWORD *)&v19 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)&v20[-2] + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x19401E70C](v20);
  std::istream::~istream();
  MEMORY[0x19401E928](v21);
  return this;
}

void sub_191C7A944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  uint64_t v24;
  const void **v25;
  void **v26;
  CoreNLP::ModelContainerMMap **v27;
  void *v28;
  int v29;
  void *v31;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v29 & 1) == 0)
    {
LABEL_8:
      std::ifstream::~ifstream(&a24);
      std::unique_ptr<CoreNLP::ModelContainerMMap>::reset[abi:ne180100](v27, 0);
      v31 = *(void **)(v24 + 56);
      if (v31)
      {
        *(_QWORD *)(v24 + 64) = v31;
        operator delete(v31);
      }
      if (*(char *)(v24 + 55) < 0)
        operator delete(*v26);
      applesauce::CF::ArrayRef::~ArrayRef((const void **)(v24 + 24));
      applesauce::CF::DictionaryRef::~DictionaryRef(v25);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x19401E700](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x19401E700](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_191C7AAE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x19401E928](v1 + 424);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::ModelContainer::parseMetaData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const void *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  const void *v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  uint64_t v38;
  CFDataRef v39;
  CFPropertyListRef v40;
  const void *v41;
  std::runtime_error *exception;
  std::runtime_error *v44;
  std::runtime_error *v45;
  std::runtime_error *v46;
  std::runtime_error *v47;
  char **v48;
  CFTypeRef cf;
  const void *v50;
  void *v51[2];
  char v52;
  size_t v53;
  uint64_t v54;
  __int16 v55;
  int v56;
  void *__src[2];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  void *__p[2];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v56 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)kFieldHeader);
  v4 = CoreNLP::read_32<unsigned int>(a2, &v56, (uint64_t)__p);
  if (SBYTE7(v67) < 0)
    operator delete(__p[0]);
  if (v56 != kMagicNumber)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    CoreNLP::NLModelContainerParseError::NLModelContainerParseError(exception, "Given input does not contain the expected file header");
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)kFieldModelType);
  v5 = CoreNLP::read_16<NLModelMethodType>(a2, (_DWORD *)a1, (uint64_t)__p);
  if (SBYTE7(v67) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)kFieldModelSubtype);
  v6 = CoreNLP::read_16<NLModelMethodType>(a2, (_DWORD *)(a1 + 4), (uint64_t)__p);
  if (SBYTE7(v67) < 0)
    operator delete(__p[0]);
  v55 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)kFieldFormatVersion);
  v7 = CoreNLP::read_16<unsigned short>(a2, &v55, (uint64_t)__p);
  if (SBYTE7(v67) < 0)
    operator delete(__p[0]);
  if (v55 != kContainerFormatVersion_1)
  {
    v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    CoreNLP::NLModelContainerIncompatibleFormat::NLModelContainerIncompatibleFormat(v44, "Given input cannot be parsed, as the file format has a higher number");
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)kFieldModelRevision);
  v8 = CoreNLP::read_16<long>(a2, (_QWORD *)(a1 + 8), (uint64_t)__p);
  if (SBYTE7(v67) < 0)
    operator delete(__p[0]);
  v54 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)kFieldModelCount);
  v9 = CoreNLP::read_32<long>(a2, &v54, (uint64_t)__p);
  if (SBYTE7(v67) < 0)
    operator delete(__p[0]);
  v74 = 0;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  *(_OWORD *)__p = 0u;
  v67 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__src, (char *)kFieldInfoOffset);
  v10 = CoreNLP::read_32<std::fpos<__mbstate_t>>(a2, (uint64_t)__p, (uint64_t)__src);
  if (SBYTE7(v58) < 0)
    operator delete(__src[0]);
  v53 = 0;
  std::string::basic_string[abi:ne180100]<0>(__src, (char *)kFieldInfoLength);
  v11 = v5 + v4 + v6 + v7 + v8 + v9 + v10 + CoreNLP::read_32<long>(a2, &v53, (uint64_t)__src);
  if (SBYTE7(v58) < 0)
    operator delete(__src[0]);
  if (v54 >= 1)
  {
    v12 = 0;
    v48 = (char **)(a1 + 56);
    do
    {
      v65 = 0;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      *(_OWORD *)__src = 0u;
      v58 = 0u;
      std::string::basic_string[abi:ne180100]<0>(v51, (char *)kFieldModelOffset);
      v13 = CoreNLP::read_32<std::fpos<__mbstate_t>>(a2, (uint64_t)__src, (uint64_t)v51);
      if (v52 < 0)
        operator delete(v51[0]);
      v50 = 0;
      std::string::basic_string[abi:ne180100]<0>(v51, (char *)kFieldModelLength);
      v14 = CoreNLP::read_32<long>(a2, &v50, (uint64_t)v51);
      if (v52 < 0)
        operator delete(v51[0]);
      v16 = *(_QWORD *)(a1 + 64);
      v15 = *(_QWORD *)(a1 + 72);
      if (v16 >= v15)
      {
        v19 = 0x8E38E38E38E38E39 * ((uint64_t)(v16 - (_QWORD)*v48) >> 4);
        v20 = v19 + 1;
        if (v19 + 1 > 0x1C71C71C71C71C7)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v21 = 0x8E38E38E38E38E39 * ((uint64_t)(v15 - (_QWORD)*v48) >> 4);
        if (2 * v21 > v20)
          v20 = 2 * v21;
        if (v21 >= 0xE38E38E38E38E3)
          v22 = 0x1C71C71C71C71C7;
        else
          v22 = v20;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreNLP::NLModelDataPosition>>(a1 + 72, v22);
        v25 = v24;
        v26 = &v23[144 * v19];
        v27 = v50;
        memmove(v26, __src, 0x88uLL);
        *((_QWORD *)v26 + 17) = v27;
        v29 = *(char **)(a1 + 56);
        v28 = *(char **)(a1 + 64);
        v30 = v26;
        if (v28 != v29)
        {
          do
          {
            *((_OWORD *)v30 - 9) = *((_OWORD *)v28 - 9);
            v31 = *((_OWORD *)v28 - 8);
            v32 = *((_OWORD *)v28 - 7);
            v33 = *((_OWORD *)v28 - 5);
            *((_OWORD *)v30 - 6) = *((_OWORD *)v28 - 6);
            *((_OWORD *)v30 - 5) = v33;
            *((_OWORD *)v30 - 8) = v31;
            *((_OWORD *)v30 - 7) = v32;
            v34 = *((_OWORD *)v28 - 4);
            v35 = *((_OWORD *)v28 - 3);
            v36 = *((_OWORD *)v28 - 1);
            *((_OWORD *)v30 - 2) = *((_OWORD *)v28 - 2);
            *((_OWORD *)v30 - 1) = v36;
            *((_OWORD *)v30 - 4) = v34;
            *((_OWORD *)v30 - 3) = v35;
            v30 -= 144;
            v28 -= 144;
          }
          while (v28 != v29);
          v28 = *v48;
        }
        v37 = &v23[144 * v25];
        v18 = v26 + 144;
        *(_QWORD *)(a1 + 56) = v30;
        *(_QWORD *)(a1 + 64) = v26 + 144;
        *(_QWORD *)(a1 + 72) = v37;
        if (v28)
          operator delete(v28);
      }
      else
      {
        v17 = v50;
        memmove(*(void **)(a1 + 64), __src, 0x88uLL);
        *(_QWORD *)(v16 + 136) = v17;
        v18 = (_QWORD *)(v16 + 144);
      }
      v11 += v13 + v14;
      *(_QWORD *)(a1 + 64) = v18;
      ++v12;
    }
    while (v12 < v54);
  }
  LOBYTE(v51[0]) = 0;
  std::vector<unsigned char>::vector(__src, v53, v51);
  std::istream::read();
  v38 = *(_QWORD *)(a2 + 8);
  if (v38 != v53)
  {
    v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v45, "Failed to read complete info dictionary");
    v45->__vftable = (std::runtime_error_vtbl *)&unk_1E2DF2CB0;
  }
  v39 = CFDataCreate(0, (const UInt8 *)__src[0], (char *)__src[1] - (char *)__src[0]);
  v51[0] = v39;
  if (!v39)
  {
    v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v46, "Could not construct");
    __cxa_throw(v46, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v40 = CFPropertyListCreateWithData(0, v39, 0, 0, 0);
  if (!v40)
  {
    v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v47, "Failed to deserialize info dictionary");
    v47->__vftable = (std::runtime_error_vtbl *)&unk_1E2DF2CB0;
  }
  cf = v40;
  applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&cf, (applesauce::CF::DictionaryRef *)&v50);
  v41 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v50;
  v50 = v41;
  if (v41)
    CFRelease(v41);
  if (cf)
    CFRelease(cf);
  CFRelease(v39);
  if (__src[0])
  {
    __src[1] = __src[0];
    operator delete(__src[0]);
  }
  return v38 + v11;
}

void sub_191C7B188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  void *v48;

  __cxa_free_exception(v48);
  applesauce::CF::DataRef::~DataRef((const void **)&a13);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

CoreNLP::ModelContainerMMap *CoreNLP::ModelContainer::createMemoryMap(CoreNLP::ModelContainer *this)
{
  const char **v2;
  const char *v3;
  int v4;
  int v5;
  off_t st_size;
  void *v7;
  void *v8;
  CoreNLP::ModelContainerMMap *v9;
  std::ios_base::failure *exception;
  std::string *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::ios_base::failure *v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::ios_base::failure *v24;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::error_code v30;
  std::string __ec;
  stat v32;
  std::string __msg;

  v2 = (const char **)((char *)this + 32);
  if (*((char *)this + 55) < 0)
    v3 = *v2;
  else
    v3 = (char *)this + 32;
  v4 = open(v3, 0);
  if (v4 < 0)
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    v12 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&__msg, "Failed to open the given file ");
    v13 = *((char *)this + 55);
    if (v13 >= 0)
      v14 = (const std::string::value_type *)v2;
    else
      v14 = (const std::string::value_type *)*((_QWORD *)this + 4);
    if (v13 >= 0)
      v15 = *((unsigned __int8 *)this + 55);
    else
      v15 = *((_QWORD *)this + 5);
    v16 = std::string::append(v12, v14, v15);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    *(_QWORD *)&v32.st_uid = *((_QWORD *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)&v32.st_dev = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    __ec.__r_.__value_.__r.__words[0] = 1;
    __ec.__r_.__value_.__l.__size_ = (std::string::size_type)std::iostream_category();
    std::ios_base::failure::failure(exception, (const std::string *)&v32, (const std::error_code *)&__ec);
    __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  v5 = v4;
  if (fstat(v4, &v32) < 0)
  {
    v18 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&__ec, "Failed to open the given file ");
    v19 = *((char *)this + 55);
    if (v19 >= 0)
      v20 = (const std::string::value_type *)v2;
    else
      v20 = (const std::string::value_type *)*((_QWORD *)this + 4);
    if (v19 >= 0)
      v21 = *((unsigned __int8 *)this + 55);
    else
      v21 = *((_QWORD *)this + 5);
    v22 = std::string::append(&__ec, v20, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    __msg.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)&v30.__val_ = 1;
    v30.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(v18, &__msg, &v30);
    __cxa_throw(v18, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  st_size = v32.st_size;
  v7 = mmap(0, v32.st_size, 1, 1, v5, 0);
  if (v7 == (void *)-1)
  {
    v24 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&__ec, "Failed to mmap the given file ");
    v25 = *((char *)this + 55);
    if (v25 >= 0)
      v26 = (const std::string::value_type *)v2;
    else
      v26 = (const std::string::value_type *)*((_QWORD *)this + 4);
    if (v25 >= 0)
      v27 = *((unsigned __int8 *)this + 55);
    else
      v27 = *((_QWORD *)this + 5);
    v28 = std::string::append(&__ec, v26, v27);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    __msg.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)&v30.__val_ = 1;
    v30.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(v24, &__msg, &v30);
    __cxa_throw(v24, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  v8 = v7;
  v9 = (CoreNLP::ModelContainerMMap *)operator new();
  *(_DWORD *)v9 = v5;
  *((_QWORD *)v9 + 1) = st_size;
  *((_QWORD *)v9 + 2) = v8;
  return std::unique_ptr<CoreNLP::ModelContainerMMap>::reset[abi:ne180100]((CoreNLP::ModelContainerMMap **)this + 10, v9);
}

void sub_191C7B4F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  char v24;
  uint64_t v25;

  if (*(char *)(v25 - 73) < 0)
    operator delete(*(void **)(v25 - 96));
  if (a17 < 0)
    operator delete(__p);
  if ((v24 & 1) != 0)
    __cxa_free_exception(v23);
  _Unwind_Resume(exception_object);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *a1 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x19401E70C](a1 + 2);
  std::istream::~istream();
  MEMORY[0x19401E928](a1 + 53);
  return a1;
}

CoreNLP::ModelContainer *CoreNLP::ModelContainer::ModelContainer(CoreNLP::ModelContainer *this, CFDataRef theData)
{
  const void **v3;
  const UInt8 *BytePtr;
  CFIndex Length;
  __CFArray *Mutable;
  uint64_t v8;
  uint64_t v9;
  const __CFAllocator *v10;
  CFDataRef v11;
  const __CFData *v12;
  std::logic_error *exception;
  CFDataRef v15;
  std::istrstream v16;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = kNLModelUnknownRevision;
  *((_OWORD *)this + 1) = 0u;
  v3 = (const void **)((char *)this + 24);
  *((_QWORD *)this + 10) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  if (!theData)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Given container data is null");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2DEE9A8, MEMORY[0x1E0DE4360]);
  }
  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  std::istrstream::istrstream[abi:ne180100]((uint64_t)&v16, (uint64_t)BytePtr, Length);
  CoreNLP::ModelContainer::parseMetaData((uint64_t)this, (uint64_t)&v16);
  Mutable = CFArrayCreateMutable(0, 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 4), MEMORY[0x1E0C9B378]);
  v8 = *((_QWORD *)this + 7);
  v9 = *((_QWORD *)this + 8);
  if (v8 != v9)
  {
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    do
    {
      v11 = CFDataCreateWithBytesNoCopy(0, &BytePtr[*(int *)(v8 + 128)], *(_QWORD *)(v8 + 136), v10);
      v15 = v11;
      CFArrayAppendValue(Mutable, v11);
      if (v11)
        CFRelease(v11);
      v8 += 144;
    }
    while (v8 != v9);
  }
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v15, Mutable);
  v12 = (const __CFData *)*v3;
  *v3 = v15;
  v15 = v12;
  if (v12)
    CFRelease(v12);
  *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
  std::istrstream::~istrstream(&v16);
  return this;
}

void sub_191C7B7B4(_Unwind_Exception *a1, char a2, std::istrstream *a3)
{
  uint64_t v3;
  const void **v4;
  const void **v5;
  CoreNLP::ModelContainerMMap **v6;
  void *v8;

  std::unique_ptr<CoreNLP::ModelContainerMMap>::reset[abi:ne180100](v6, 0);
  v8 = *(void **)(v3 + 56);
  if (v8)
  {
    *(_QWORD *)(v3 + 64) = v8;
    operator delete(v8);
  }
  if (*(char *)(v3 + 55) < 0)
    operator delete(*(void **)(v3 + 32));
  applesauce::CF::ArrayRef::~ArrayRef(v5);
  applesauce::CF::DictionaryRef::~DictionaryRef(v4);
  _Unwind_Resume(a1);
}

uint64_t std::istrstream::istrstream[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 112) = &unk_1E2DEF320;
  v6 = a1 + 16;
  *(_QWORD *)a1 = &unk_1E2DEF2F8;
  *(_QWORD *)(a1 + 8) = 0;
  std::ios_base::init((std::ios_base *)(a1 + 112), (void *)(a1 + 16));
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = -1;
  v7 = MEMORY[0x1E0DE4F70];
  *(_QWORD *)a1 = MEMORY[0x1E0DE4F70] + 24;
  *(_QWORD *)(a1 + 112) = v7 + 64;
  MEMORY[0x19401E6DC](v6, a2, a3);
  return a1;
}

void sub_191C7B8E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x19401E928](v1);
  _Unwind_Resume(a1);
}

CoreNLP::ModelContainer *CoreNLP::ModelContainer::ModelContainer(CoreNLP::ModelContainer *this, CFArrayRef theArray)
{
  const void *ValueAtIndex;
  const void *v5;
  CFTypeID v6;
  CFTypeID v7;
  const UInt8 *BytePtr;
  const UInt8 *v9;
  CFIndex Length;
  uint64_t v11;
  __CFArray *Mutable;
  uint64_t i;
  CFDataRef v14;
  uint64_t v15;
  CFDataRef v16;
  const __CFData *v17;
  std::logic_error *exception;
  std::logic_error *v20;
  const void **v21;
  CFDataRef v22;
  std::istrstream v23;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = kNLModelUnknownRevision;
  *((_OWORD *)this + 1) = 0u;
  v21 = (const void **)((char *)this + 24);
  *((_QWORD *)this + 10) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  if (!theArray || CFArrayGetCount(theArray) <= 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Given container data is null");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2DEE9A8, MEMORY[0x1E0DE4360]);
  }
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
  v5 = CFArrayGetValueAtIndex(theArray, 1);
  v6 = CFGetTypeID(ValueAtIndex);
  if (v6 != CFDataGetTypeID() || (v7 = CFGetTypeID(v5), v7 != CFDataGetTypeID()))
  {
    v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v20, "Given array contains non-data elements");
    v20->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v20, (struct type_info *)off_1E2DEE9A8, MEMORY[0x1E0DE4360]);
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)ValueAtIndex);
  v9 = CFDataGetBytePtr((CFDataRef)v5);
  Length = CFDataGetLength((CFDataRef)ValueAtIndex);
  std::istrstream::istrstream[abi:ne180100]((uint64_t)&v23, (uint64_t)BytePtr, Length);
  v11 = CoreNLP::ModelContainer::parseMetaData((uint64_t)this, (uint64_t)&v23);
  Mutable = CFArrayCreateMutable(0, 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 4), MEMORY[0x1E0C9B378]);
  for (i = *((_QWORD *)this + 7); i != *((_QWORD *)this + 8); i += 144)
  {
    if (i == *((_QWORD *)this + 7))
      v11 = *(int *)(i + 128);
    if (v11 == CFDataGetLength((CFDataRef)ValueAtIndex))
    {
      v14 = CFDataCreate(0, v9, *(_QWORD *)(i + 136));
      v22 = v14;
      CFArrayAppendValue(Mutable, v14);
      v15 = *(_QWORD *)(i + 136);
      if (v14)
        CFRelease(v14);
      v9 += v15;
    }
    else
    {
      v16 = CFDataCreate(0, &BytePtr[*(int *)(i + 128)], *(_QWORD *)(i + 136));
      v22 = v16;
      CFArrayAppendValue(Mutable, v16);
      if (i + 144 == *((_QWORD *)this + 8))
      {
        v11 += *(_QWORD *)(i + 136);
        if (!v16)
          continue;
LABEL_17:
        CFRelease(v16);
        continue;
      }
      v11 = v11 + *(int *)(i + 272) - *(int *)(i + 128);
      if (v16)
        goto LABEL_17;
    }
  }
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v22, Mutable);
  v17 = (const __CFData *)*v21;
  *v21 = v22;
  v22 = v17;
  if (v17)
    CFRelease(v17);
  *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
  std::istrstream::~istrstream(&v23);
  return this;
}

void sub_191C7BC0C(_Unwind_Exception *a1, applesauce::CF::DictionaryRef *a2, applesauce::CF::ArrayRef *a3, char a4, std::istrstream *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void **a10, const void **a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  CoreNLP::ModelContainerMMap **v14;
  void *v16;

  std::istrstream::~istrstream((std::istrstream *)&a13);
  std::unique_ptr<CoreNLP::ModelContainerMMap>::reset[abi:ne180100](v14, 0);
  v16 = *(void **)(v13 + 56);
  if (v16)
  {
    *(_QWORD *)(v13 + 64) = v16;
    operator delete(v16);
  }
  if (*(char *)(v13 + 55) < 0)
    operator delete(*(void **)(v13 + 32));
  applesauce::CF::ArrayRef::~ArrayRef(a11);
  applesauce::CF::DictionaryRef::~DictionaryRef(a10);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::read_32<unsigned int>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  std::runtime_error *exception;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string v14;
  int v15;

  v15 = 0;
  std::istream::read();
  if (*(_QWORD *)(a1 + 8) != 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v13, "Failed to read ");
    v8 = *(char *)(a3 + 23);
    if (v8 >= 0)
      v9 = (const std::string::value_type *)a3;
    else
      v9 = *(const std::string::value_type **)a3;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a3 + 23);
    else
      v10 = *(_QWORD *)(a3 + 8);
    v11 = std::string::append(&v13, v9, v10);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v14);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1E2DF2CB0;
  }
  *a2 = v15;
  return 4;
}

void sub_191C7BDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

std::runtime_error *CoreNLP::NLModelContainerParseError::NLModelContainerParseError(std::runtime_error *this, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(this, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_1E2DF2CB0;
  return result;
}

uint64_t CoreNLP::read_16<NLModelMethodType>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  std::runtime_error *exception;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string v14;
  unsigned __int16 v15;

  v15 = 0;
  std::istream::read();
  if (*(_QWORD *)(a1 + 8) != 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v13, "Failed to read ");
    v8 = *(char *)(a3 + 23);
    if (v8 >= 0)
      v9 = (const std::string::value_type *)a3;
    else
      v9 = *(const std::string::value_type **)a3;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a3 + 23);
    else
      v10 = *(_QWORD *)(a3 + 8);
    v11 = std::string::append(&v13, v9, v10);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v14);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1E2DF2CB0;
  }
  *a2 = v15;
  return 2;
}

void sub_191C7BF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t CoreNLP::read_16<unsigned short>(uint64_t a1, _WORD *a2, uint64_t a3)
{
  std::runtime_error *exception;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string v14;
  __int16 v15;

  v15 = 0;
  std::istream::read();
  if (*(_QWORD *)(a1 + 8) != 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v13, "Failed to read ");
    v8 = *(char *)(a3 + 23);
    if (v8 >= 0)
      v9 = (const std::string::value_type *)a3;
    else
      v9 = *(const std::string::value_type **)a3;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a3 + 23);
    else
      v10 = *(_QWORD *)(a3 + 8);
    v11 = std::string::append(&v13, v9, v10);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v14);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1E2DF2CB0;
  }
  *a2 = v15;
  return 2;
}

void sub_191C7C07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

std::runtime_error *CoreNLP::NLModelContainerIncompatibleFormat::NLModelContainerIncompatibleFormat(std::runtime_error *this, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(this, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_1E2DF2DF8;
  return result;
}

uint64_t CoreNLP::read_16<long>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::runtime_error *exception;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string v14;
  unsigned __int16 v15;

  v15 = 0;
  std::istream::read();
  if (*(_QWORD *)(a1 + 8) != 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v13, "Failed to read ");
    v8 = *(char *)(a3 + 23);
    if (v8 >= 0)
      v9 = (const std::string::value_type *)a3;
    else
      v9 = *(const std::string::value_type **)a3;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a3 + 23);
    else
      v10 = *(_QWORD *)(a3 + 8);
    v11 = std::string::append(&v13, v9, v10);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v14);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1E2DF2CB0;
  }
  *a2 = v15;
  return 2;
}

void sub_191C7C1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t CoreNLP::read_32<long>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::runtime_error *exception;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string v14;
  unsigned int v15;

  v15 = 0;
  std::istream::read();
  if (*(_QWORD *)(a1 + 8) != 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v13, "Failed to read ");
    v8 = *(char *)(a3 + 23);
    if (v8 >= 0)
      v9 = (const std::string::value_type *)a3;
    else
      v9 = *(const std::string::value_type **)a3;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a3 + 23);
    else
      v10 = *(_QWORD *)(a3 + 8);
    v11 = std::string::append(&v13, v9, v10);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v14);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1E2DF2CB0;
  }
  *a2 = v15;
  return 4;
}

void sub_191C7C344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t CoreNLP::read_32<std::fpos<__mbstate_t>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::runtime_error *exception;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string v14;
  std::string v15;
  unsigned int v16;

  v16 = 0;
  std::istream::read();
  if (*(_QWORD *)(a1 + 8) != 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, "Failed to read ");
    v9 = *(char *)(a3 + 23);
    if (v9 >= 0)
      v10 = (const std::string::value_type *)a3;
    else
      v10 = *(const std::string::value_type **)a3;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(a3 + 23);
    else
      v11 = *(_QWORD *)(a3 + 8);
    v12 = std::string::append(&v14, v10, v11);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v15);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1E2DF2CB0;
  }
  v6 = v16;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_QWORD *)(a2 + 128) = v6;
  return 4;
}

void sub_191C7C4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

applesauce::CF::DictionaryRef *applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef@<X0>(const void **a1@<X0>, applesauce::CF::DictionaryRef *a2@<X8>)
{
  const void *v4;
  CFTypeID v5;
  const void *v6;
  std::runtime_error *exception;

  v4 = *a1;
  if (v4)
  {
    v5 = CFGetTypeID(v4);
    if (v5 != CFDictionaryGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(exception);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v6 = *a1;
    if (v6)
      CFRetain(v6);
  }
  else
  {
    v6 = 0;
  }
  return applesauce::CF::DictionaryRef::DictionaryRef(a2, v6);
}

void sub_191C7C598(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL CoreNLP::has_suffix(uint64_t **a1, _QWORD *a2)
{
  size_t v2;
  size_t v3;
  size_t v4;
  int v5;
  size_t v6;
  size_t v7;
  size_t v10;
  BOOL v11;
  size_t v12;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = (size_t)a1[1];
  if ((v2 & 0x80u) == 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = (size_t)a1[1];
  v5 = *((char *)a2 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = a2[1];
  v11 = v4 >= v6;
  v7 = v4 - v6;
  if (!v11)
    return 0;
  if ((v2 & 0x80) != 0)
  {
    v11 = v6 != -1 && v3 >= v7;
    if (v11)
    {
      v12 = v3 - v7;
      if (v12 >= v6)
        v10 = v6;
      else
        v10 = v12;
      a1 = (uint64_t **)*a1;
      goto LABEL_26;
    }
LABEL_34:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v2 < v7 || v6 == -1)
    goto LABEL_34;
  if (v2 - v7 >= v6)
    v10 = v6;
  else
    v10 = v2 - v7;
LABEL_26:
  if (v5 < 0)
    a2 = (_QWORD *)*a2;
  return !memcmp((char *)a1 + v7, a2, v10) && v10 == v6;
}

BOOL CoreNLP::ModelContainer::writeToURL(CoreNLP::ModelContainer *this, CFURLRef anURL, char a3)
{
  CFStringRef v5;
  const __CFString *v6;
  CFTypeID TypeID;
  BOOL has_suffix;
  BOOL v9;
  std::string *v10;
  _BOOL8 v11;
  std::error_code *v12;
  const std::__fs::filesystem::path *v13;
  const std::__fs::filesystem::path *v14;
  int v15;
  void *v17[2];
  char v18;
  std::string v19;
  std::string v20;
  stat __p[2];
  _QWORD v22[20];

  v22[19] = *MEMORY[0x1E0C80C00];
  v5 = CFURLGetString(anURL);
  if (v5 && (v6 = v5, TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(v6)))
    applesauce::CF::details::CFString_get_value<false>(v6, (uint64_t)&v20);
  else
    std::string::basic_string[abi:ne180100]<0>(&v20, "");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)kNLPModelExtension);
  has_suffix = CoreNLP::has_suffix((uint64_t **)&v20, __p);
  v9 = has_suffix;
  if (SHIBYTE(__p[0].st_gid) < 0)
  {
    operator delete(*(void **)&__p[0].st_dev);
    if (v9)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (!has_suffix)
LABEL_9:
    std::string::append(&v20, (const std::string::value_type *)kNLPModelExtension);
LABEL_10:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v19, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  else
    v19 = v20;
  if ((a3 & 1) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "");
    nlp::temporaryFile((uint64_t)v17, (uint64_t)__p);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&__p[0].st_dev;
    v19.__r_.__value_.__r.__words[2] = *(_QWORD *)&__p[0].st_uid;
    HIBYTE(__p[0].st_gid) = 0;
    LOBYTE(__p[0].st_dev) = 0;
    if (v18 < 0)
      operator delete(v17[0]);
    goto LABEL_24;
  }
  if ((a3 & 2) == 0
    || ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (v10 = &v19)
      : (v10 = (std::string *)v19.__r_.__value_.__r.__words[0]),
        stat((const char *)v10, __p)))
  {
LABEL_24:
    std::ofstream::basic_ofstream(__p);
    v11 = 0;
    if (__p[0].st_qspare[0])
    {
      CoreNLP::ModelContainer::writeContainerData(this, (uint64_t)__p);
      if ((a3 & 1) == 0
        || ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (v13 = (const std::__fs::filesystem::path *)&v19)
          : (v13 = (const std::__fs::filesystem::path *)v19.__r_.__value_.__r.__words[0]),
            (v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (v14 = (const std::__fs::filesystem::path *)&v20)
          : (v14 = (const std::__fs::filesystem::path *)v20.__r_.__value_.__r.__words[0]),
            rename(v13, v14, v12),
            !v15))
      {
        v11 = 1;
      }
    }
    *(_QWORD *)&__p[0].st_dev = *MEMORY[0x1E0DE4F48];
    *(_QWORD *)((char *)&__p[0].st_dev + *(_QWORD *)(*(_QWORD *)&__p[0].st_dev - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
    MEMORY[0x19401E70C](&__p[0].st_ino);
    std::ostream::~ostream();
    MEMORY[0x19401E928](v22);
    goto LABEL_36;
  }
  v11 = 0;
LABEL_36:
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  return v11;
}

void sub_191C7C8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

_QWORD *std::ofstream::basic_ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FB0];
  v3 = MEMORY[0x1E0DE4FB0] + 64;
  a1[52] = MEMORY[0x1E0DE4FB0] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x19401E700](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_191C7CA38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401E928](v1 + 416);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::ModelContainer::writeContainerData(_QWORD *a1, uint64_t a2)
{
  const __CFArray *v4;
  CFIndex Count;

  v4 = (const __CFArray *)a1[3];
  if (v4)
    Count = CFArrayGetCount(v4);
  else
    Count = 0x8E38E38E38E38E39 * ((uint64_t)(a1[8] - a1[7]) >> 4);
  CoreNLP::ModelContainer::writeContainerData((uint64_t)a1, a2, Count);
  return 1;
}

_QWORD *std::ofstream::~ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F48];
  v3 = *MEMORY[0x1E0DE4F48];
  *a1 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x19401E70C](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x19401E928](a1 + 52);
  return a1;
}

uint64_t CoreNLP::ModelContainer::writeContainerData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFArray *v5;
  CFIndex Count;
  CFDataRef Data;
  char Length;
  std::vector<char>::size_type v9;
  uint64_t v10;
  uint64_t v11;
  CFIndex v12;
  CFIndex v13;
  uint64_t v14;
  uint64_t v15;
  const __CFArray *v16;
  const void *ValueAtIndex;
  const void *v18;
  CFIndex v19;
  uint64_t v20;
  unint64_t v21;
  const __CFArray *v22;
  char *v23;
  char *v24;
  const __CFData *begin;
  CFDataRef v26;
  CFIndex v27;
  uint64_t v28;
  std::runtime_error *exception;
  const __CFData *v31;
  std::vector<char> v32;
  CFTypeRef cf;
  CFDataRef theData;

  v5 = *(const __CFArray **)(a1 + 24);
  if (v5)
    Count = CFArrayGetCount(v5);
  else
    Count = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 4);
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  LODWORD(v32.__begin_) = 8 * Count + 20;
  std::ostream::write();
  Data = CFPropertyListCreateData(0, *(CFPropertyListRef *)(a1 + 16), kCFPropertyListBinaryFormat_v1_0, 0, 0);
  applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&theData, Data);
  if (!theData)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot serialize the info dictionary");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1E2DF2E20;
  }
  LODWORD(v32.__begin_) = CFDataGetLength(theData);
  std::ostream::write();
  Length = CFDataGetLength(theData);
  v9 = 8 - (Length & 7);
  v10 = Length & 7;
  if ((Length & 7) != 0)
    v11 = 8 - (Length & 7);
  else
    v11 = 0;
  v12 = CFDataGetLength(theData);
  if (Count)
  {
    v13 = 0;
    v14 = 8 * Count + v11 + v12 + 24;
    v15 = 136;
    do
    {
      LODWORD(v32.__begin_) = v14;
      std::ostream::write();
      v16 = *(const __CFArray **)(a1 + 24);
      if (v16)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v16, v13);
        v18 = ValueAtIndex;
        if (ValueAtIndex)
          CFRetain(ValueAtIndex);
        cf = v18;
        applesauce::CF::TypeRef::operator applesauce::CF::DataRef(&cf, (applesauce::CF::DataRef *)&v32);
        if (cf)
          CFRelease(cf);
        v19 = CFDataGetLength((CFDataRef)v32.__begin_);
        if (v32.__begin_)
          CFRelease(v32.__begin_);
      }
      else
      {
        v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + v15);
      }
      LODWORD(v32.__begin_) = v19;
      std::ostream::write();
      if (v19 <= 0)
        v20 = -(-v19 & 7);
      else
        v20 = v19 & 7;
      if (v20)
        v14 = v19 + v14 - v20 + 8;
      else
        v14 += v19;
      ++v13;
      v15 += 144;
    }
    while (Count != v13);
  }
  CFDataGetBytePtr(theData);
  CFDataGetLength(theData);
  std::ostream::write();
  if (v10)
  {
    LOBYTE(cf) = 0;
    std::vector<char>::vector(&v32, v9, (const std::vector<char>::value_type *)&cf);
    std::ostream::write();
    if (v32.__begin_)
    {
      v32.__end_ = v32.__begin_;
      operator delete(v32.__begin_);
    }
  }
  if (a3 >= 1)
  {
    v21 = 0;
    do
    {
      cf = 0;
      v22 = *(const __CFArray **)(a1 + 24);
      if (v22)
      {
        v23 = (char *)CFArrayGetValueAtIndex(v22, v21);
        v24 = v23;
        if (v23)
          CFRetain(v23);
        v32.__begin_ = v24;
        applesauce::CF::TypeRef::operator applesauce::CF::DataRef((const void **)&v32.__begin_, (applesauce::CF::DataRef *)&v31);
        begin = v31;
        cf = v31;
        if (v32.__begin_)
        {
          CFRelease(v32.__begin_);
          begin = (const __CFData *)cf;
        }
      }
      else
      {
        v26 = CoreNLP::ModelContainer::copyModelDataAtIndex((CoreNLP::ModelContainer *)a1, v21);
        applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v32, v26);
        begin = (const __CFData *)v32.__begin_;
        cf = v32.__begin_;
      }
      v27 = CFDataGetLength(begin);
      CFDataGetBytePtr(begin);
      std::ostream::write();
      if (v27 <= 0)
        v28 = -(-v27 & 7);
      else
        v28 = v27 & 7;
      if (v28)
      {
        LOBYTE(v31) = 0;
        std::vector<char>::vector(&v32, 8 - v28, (const std::vector<char>::value_type *)&v31);
        std::ostream::write();
        if (v32.__begin_)
        {
          v32.__end_ = v32.__begin_;
          operator delete(v32.__begin_);
        }
      }
      if (begin)
        CFRelease(begin);
      ++v21;
    }
    while (a3 != v21);
  }
  if (theData)
    CFRelease(theData);
  return 1;
}

void sub_191C7CF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, int a14, const void *a15)
{
  applesauce::CF::DataRef::~DataRef(&a15);
  _Unwind_Resume(a1);
}

CFIndex CoreNLP::ModelContainer::getModelDataCount(CFArrayRef *this)
{
  if (this[3])
    return CFArrayGetCount(this[3]);
  else
    return 0x8E38E38E38E38E39 * ((this[8] - this[7]) >> 4);
}

CFDataRef CoreNLP::ModelContainer::copyModelDataAtIndex(CoreNLP::ModelContainer *this, unint64_t a2)
{
  const __CFArray *v4;
  const void *ValueAtIndex;
  const void *v6;
  const UInt8 *BytePtr;
  CFIndex v8;
  CFDataRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  std::runtime_error *exception;
  const char *v17;
  const char *v18;
  char v19;
  CFDataRef theData[2];
  _QWORD v21[33];
  std::vector<char> v22;
  CFTypeRef cf;
  CFIndex length;
  uint64_t v25;
  _QWORD v26[20];

  v26[19] = *MEMORY[0x1E0C80C00];
  v4 = (const __CFArray *)*((_QWORD *)this + 3);
  if (v4)
  {
    if (CFArrayGetCount(v4) > a2)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*((CFArrayRef *)this + 3), a2);
      v6 = ValueAtIndex;
      if (ValueAtIndex)
        CFRetain(ValueAtIndex);
      cf = v6;
      applesauce::CF::TypeRef::operator applesauce::CF::DataRef(&cf, (applesauce::CF::DataRef *)theData);
      BytePtr = CFDataGetBytePtr(theData[0]);
      v8 = CFDataGetLength(theData[0]);
      v9 = CFDataCreateWithBytesNoCopy(0, BytePtr, v8, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
      if (theData[0])
        CFRelease(theData[0]);
      if (cf)
        CFRelease(cf);
      return v9;
    }
    return 0;
  }
  v10 = *((_QWORD *)this + 7);
  if (0x8E38E38E38E38E39 * ((*((_QWORD *)this + 8) - v10) >> 4) <= a2)
    return 0;
  v11 = *((_QWORD *)this + 10);
  if (v11)
    return CFDataCreateWithBytesNoCopy(0, (const UInt8 *)(*(_QWORD *)(v11 + 16) + *(_QWORD *)(v10 + 144 * a2 + 128)), *(_QWORD *)(v10 + 144 * a2 + 136), (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  std::ifstream::basic_ifstream(&cf);
  v13 = v10 + 144 * a2;
  std::vector<char>::vector(&v22, *(_QWORD *)(v13 + 136));
  std::istream::seekg();
  std::istream::read();
  if (length != *(_QWORD *)(v13 + 136))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)theData);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Failed to read the model data completely at index: ", 51);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", only read ", 12);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" vs expected ", 13);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    if (v19 >= 0)
      v17 = (const char *)&v18;
    else
      v17 = v18;
    std::runtime_error::runtime_error(exception, v17);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1E2DF2CB0;
  }
  v9 = CFDataCreate(0, (const UInt8 *)v22.__begin_, length);
  if (v22.__begin_)
  {
    v22.__end_ = v22.__begin_;
    operator delete(v22.__begin_);
  }
  cf = (CFTypeRef)*MEMORY[0x1E0DE4F40];
  *(CFTypeRef *)((char *)&cf + *((_QWORD *)cf - 3)) = *(CFTypeRef *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x19401E70C](&v25);
  std::istream::~istream();
  MEMORY[0x19401E928](v26);
  return v9;
}

void sub_191C7D364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  void *v53;
  int v54;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v54 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
      if (a50)
      {
        a51 = (uint64_t)a50;
        operator delete(a50);
      }
      std::ifstream::~ifstream(&a53);
      _Unwind_Resume(a1);
    }
  }
  else if (!v54)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v53);
  goto LABEL_6;
}

CFDataRef CoreNLP::ModelContainer::copyContainerData(CoreNLP::ModelContainer *this)
{
  uint64_t v1;
  const char **v4;
  const char *v5;
  const UInt8 *p_p;
  __darwin_ino64_t st_gid_high;
  CFDataRef v8;
  _QWORD *v9;
  std::ios_base::failure *exception;
  std::ios_base::failure *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::ios_base::failure *v17;
  std::error_code __ec;
  std::string v19;
  stat v20;
  std::vector<char> __p;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  char v26;
  _QWORD v27[39];
  _QWORD v28[20];

  v28[19] = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 10);
  if (v1)
    return CFDataCreateWithBytesNoCopy(0, *(const UInt8 **)(v1 + 16), *(_QWORD *)(v1 + 8), (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  if (*((char *)this + 55) < 0)
  {
    if (*((_QWORD *)this + 5))
      goto LABEL_5;
LABEL_9:
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22, 4);
    CoreNLP::ModelContainer::writeContainerData(this, (uint64_t)&v22);
    std::stringbuf::str();
    std::stringbuf::str();
    if (SHIBYTE(__p.__end_cap_.__value_) >= 0)
      p_p = (const UInt8 *)&__p;
    else
      p_p = (const UInt8 *)__p.__begin_;
    if ((v20.st_gid & 0x80000000) == 0)
      st_gid_high = HIBYTE(v20.st_gid);
    else
      st_gid_high = v20.st_ino;
    v8 = CFDataCreate(0, p_p, st_gid_high);
    if (SHIBYTE(__p.__end_cap_.__value_) < 0)
      operator delete(__p.__begin_);
    if (SHIBYTE(v20.st_gid) < 0)
      operator delete(*(void **)&v20.st_dev);
    v22 = *MEMORY[0x1E0DE4F60];
    *(uint64_t *)((char *)&v22 + *(_QWORD *)(v22 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v23 = MEMORY[0x1E0DE4FB8] + 16;
    if (v26 < 0)
      operator delete(v25);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    v9 = v27;
    goto LABEL_28;
  }
  if (!*((_BYTE *)this + 55))
    goto LABEL_9;
LABEL_5:
  v4 = (const char **)((char *)this + 32);
  std::ifstream::basic_ifstream(&v22);
  if (!v27[3])
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    *(_QWORD *)&v20.st_dev = 1;
    v20.st_ino = (__darwin_ino64_t)std::iostream_category();
    std::ios_base::failure::failure(exception, "Failed to open the temp file", (const std::error_code *)&v20);
    __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  if (*((char *)this + 55) < 0)
    v5 = *v4;
  else
    v5 = (char *)this + 32;
  if (stat(v5, &v20))
  {
    v11 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v19, "Failed to get the file size of ");
    v12 = *((char *)this + 55);
    if (v12 >= 0)
      v13 = (char *)this + 32;
    else
      v13 = (const std::string::value_type *)*((_QWORD *)this + 4);
    if (v12 >= 0)
      v14 = *((unsigned __int8 *)this + 55);
    else
      v14 = *((_QWORD *)this + 5);
    v15 = std::string::append(&v19, v13, v14);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    __p.__end_cap_.__value_ = (char *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__begin_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)&__ec.__val_ = 1;
    __ec.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(v11, (const std::string *)&__p, &__ec);
    __cxa_throw(v11, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  std::vector<char>::vector(&__p, LODWORD(v20.st_size));
  std::istream::read();
  if (v23 != v20.st_size)
  {
    v17 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    v19.__r_.__value_.__r.__words[0] = 1;
    v19.__r_.__value_.__l.__size_ = (std::string::size_type)std::iostream_category();
    std::ios_base::failure::failure(v17, "Open failed", (const std::error_code *)&v19);
    __cxa_throw(v17, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  v8 = CFDataCreate(0, (const UInt8 *)__p.__begin_, __p.__end_ - __p.__begin_);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  v22 = *MEMORY[0x1E0DE4F40];
  *(uint64_t *)((char *)&v22 + *(_QWORD *)(v22 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x19401E70C](&v24);
  std::istream::~istream();
  v9 = v28;
LABEL_28:
  MEMORY[0x19401E928](v9);
  return v8;
}

void sub_191C7D7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45)
{
  void *v45;
  int v46;

  if (a44 < 0)
    operator delete(__p);
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v46 & 1) == 0)
    {
LABEL_8:
      std::ifstream::~ifstream(&a45);
      _Unwind_Resume(a1);
    }
  }
  else if (!v46)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v45);
  goto LABEL_8;
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 8));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v4 + 24;
  *(_QWORD *)(a1 + 112) = v5;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = a2 | 0x10;
  return a1;
}

void sub_191C7D974(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401E928](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19401E928](a1 + 112);
  return a1;
}

CFArrayRef CoreNLP::ModelContainer::copySplitContainerData(CoreNLP::ModelContainer *this, int64_t a2)
{
  const __CFArray *v4;
  CFIndex Count;
  const __CFArray *v6;
  CFIndex v7;
  const UInt8 *p_p;
  CFIndex v9;
  CFDataRef v10;
  CFMutableDataRef Mutable;
  const __CFData *v12;
  const UInt8 *BytePtr;
  CFIndex Length;
  CFDataRef Copy;
  __CFArray *v16;
  CFArrayRef v17;
  std::logic_error *exception;
  void *__p;
  char v21;
  CFDataRef v22;
  void *v23;
  CFIndex v24;
  unsigned __int8 v25;
  _QWORD v26[11];
  char v27;
  uint64_t v28;

  v4 = (const __CFArray *)*((_QWORD *)this + 3);
  if (v4)
  {
    Count = CFArrayGetCount(v4);
    v6 = (const __CFArray *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = CFArrayGetCount(v6);
      goto LABEL_6;
    }
  }
  else
  {
    Count = 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 4);
  }
  v7 = 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 4);
LABEL_6:
  if (v7 < a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid info dictionary");
    __cxa_throw(exception, (struct type_info *)off_1E2DEE9A8, MEMORY[0x1E0DE4360]);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26, 4);
  CoreNLP::ModelContainer::writeContainerData((uint64_t)this, (uint64_t)v26, a2);
  std::stringbuf::str();
  std::stringbuf::str();
  if (v21 >= 0)
    p_p = (const UInt8 *)&__p;
  else
    p_p = (const UInt8 *)__p;
  if ((v25 & 0x80u) == 0)
    v9 = v25;
  else
    v9 = v24;
  v10 = CFDataCreate(0, p_p, v9);
  v22 = v10;
  if (v21 < 0)
    operator delete(__p);
  Mutable = CFDataCreateMutable(0, 0);
  __p = Mutable;
  if (Count > a2)
  {
    do
    {
      v12 = CoreNLP::ModelContainer::copyModelDataAtIndex(this, a2);
      BytePtr = CFDataGetBytePtr(v12);
      Length = CFDataGetLength(v12);
      CFDataAppendBytes(Mutable, BytePtr, Length);
      if (v12)
        CFRelease(v12);
      ++a2;
    }
    while (Count != a2);
  }
  Copy = CFDataCreateCopy(0, Mutable);
  v16 = CFArrayCreateMutable(0, 2, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(v16, v10);
  CFArrayAppendValue(v16, Copy);
  v17 = CFArrayCreateCopy(0, v16);
  if (v16)
    CFRelease(v16);
  if (Copy)
    CFRelease(Copy);
  if (Mutable)
    CFRelease(Mutable);
  if (v10)
    CFRelease(v10);
  if ((char)v25 < 0)
    operator delete(v23);
  v26[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v26 + *(_QWORD *)(v26[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v26[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v27 < 0)
    operator delete((void *)v26[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19401E928](&v28);
  return v17;
}

void sub_191C7DCE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  void *v24;

  __cxa_free_exception(v24);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_191C7DEA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x19401E928](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19401E928](a1 + 128);
  return a1;
}

uint64_t CoreNLP::ModelContainer::getType(CoreNLP::ModelContainer *this)
{
  return *(unsigned int *)this;
}

uint64_t CoreNLP::ModelContainer::getSubtype(CoreNLP::ModelContainer *this)
{
  return *((unsigned int *)this + 1);
}

uint64_t CoreNLP::ModelContainer::getRevision(CoreNLP::ModelContainer *this)
{
  return *((_QWORD *)this + 1);
}

CFDictionaryRef CoreNLP::ModelContainer::copyInfoDictionary(CFDictionaryRef *this)
{
  return CFDictionaryCreateCopy(0, this[2]);
}

applesauce::CF::DictionaryRef *applesauce::CF::DictionaryRef::DictionaryRef(applesauce::CF::DictionaryRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFDictionaryGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return this;
}

void sub_191C7DFF8(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

std::runtime_error *applesauce::CF::construct_error@<X0>(std::runtime_error *a1@<X8>)
{
  return std::runtime_error::runtime_error(a1, "Could not construct");
}

applesauce::CF::ArrayRef *applesauce::CF::ArrayRef::ArrayRef(applesauce::CF::ArrayRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFArrayGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return this;
}

void sub_191C7E0B4(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

applesauce::CF::DataRef *applesauce::CF::DataRef::DataRef(applesauce::CF::DataRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFDataGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return this;
}

void sub_191C7E160(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

void CoreNLP::NLModelContainerParseError::~NLModelContainerParseError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x19401E994);
}

void CoreNLP::NLModelContainerIncompatibleFormat::~NLModelContainerIncompatibleFormat(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x19401E994);
}

_QWORD *applesauce::CF::details::CFString_get_value<false>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  char *CStringPtr;
  CFIndex Length;
  UInt8 *v7;
  CFIndex maxBufLen;
  CFRange v9;
  CFRange v10;

  CStringPtr = (char *)CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
    return std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, CStringPtr);
  Length = CFStringGetLength(a1);
  maxBufLen = 0;
  v9.location = 0;
  v9.length = Length;
  CFStringGetBytes(a1, v9, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  std::string::basic_string[abi:ne180100]((_QWORD *)a2, maxBufLen, 0);
  if (*(char *)(a2 + 23) >= 0)
    v7 = (UInt8 *)a2;
  else
    v7 = *(UInt8 **)a2;
  v10.location = 0;
  v10.length = Length;
  return (_QWORD *)CFStringGetBytes(a1, v10, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
}

void CoreNLP::NLModelContainerSerializationError::~NLModelContainerSerializationError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x19401E994);
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer end;
  char *v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<char>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_191C7E32C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

CoreNLP::ModelContainerMMap *std::unique_ptr<CoreNLP::ModelContainerMMap>::reset[abi:ne180100](CoreNLP::ModelContainerMMap **a1, CoreNLP::ModelContainerMMap *a2)
{
  CoreNLP::ModelContainerMMap *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CoreNLP::ModelContainerMMap::~ModelContainerMMap(result);
    JUMPOUT(0x19401E994);
  }
  return result;
}

void CoreNLP::ModelContainerMMap::~ModelContainerMMap(CoreNLP::ModelContainerMMap *this)
{
  int v1;

  v1 = *(_DWORD *)this;
  if (v1 != -1)
    close(v1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CoreNLP::NLModelDataPosition>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(144 * a2);
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    std::vector<char>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_191C7E4A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n, const std::vector<char>::value_type *__x)
{
  std::vector<char>::size_type v5;
  std::vector<char>::pointer end;
  char *v7;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    v5 = __n;
    std::vector<char>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[v5];
    do
    {
      *end++ = *__x;
      --v5;
    }
    while (v5);
    this->__end_ = v7;
  }
  return this;
}

void sub_191C7E530(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void nlp::CFScopedPtr<__CFData *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFArray *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x19401E784](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x19401E790](v13);
  return a1;
}

void sub_191C7E6BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x19401E790](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x191C7E69CLL);
}

void sub_191C7E704(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_191C7E838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::_CFInit_GazetteerWrapper(uint64_t this, const void *a2)
{
  *(_QWORD *)(this + 16) = &unk_1E2DF23E8;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreNLP::createGazetteerWrapper(uint64_t *a1)
{
  unsigned __int8 v2;
  uint64_t Instance;
  uint64_t v4;
  uint64_t v5;

  CFAllocatorGetDefault();
  {
    qword_1EE21AF10 = 0;
    unk_1EE21AF20 = 0u;
    unk_1EE21AF30 = 0u;
    CoreNLP::_CFGetTypeID_GazetteerWrapper(void)::typeID = _CFRuntimeRegisterClass();
  }
  Instance = _CFRuntimeCreateInstance();
  v4 = *a1;
  *a1 = 0;
  v5 = *(_QWORD *)(Instance + 24);
  *(_QWORD *)(Instance + 24) = v4;
  if (v5)
    std::default_delete<CoreNLP::Gazetteer>::operator()[abi:ne180100](Instance + 24, v5);
  return Instance;
}

void sub_191C7E928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::unwrapGazetteer(CoreNLP *this, void *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t CoreNLP::CFType::Copy(CoreNLP::CFType *this, const __CFAllocator *a2)
{
  return 0;
}

uint64_t CoreNLP::CFType::Equal(CoreNLP::CFType *this, const CoreNLP::CFType *a2)
{
  return 0;
}

uint64_t CoreNLP::CFType::Hash(CoreNLP::CFType *this)
{
  return 0;
}

uint64_t CoreNLP::CFType::CopyFormattingDesc(CoreNLP::CFType *this, const __CFDictionary *a2)
{
  return 0;
}

uint64_t CoreNLP::CFType::CopyDebugDesc(CoreNLP::CFType *this)
{
  return 0;
}

void std::default_delete<CoreNLP::Gazetteer>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    nlp::CFScopedPtr<void *>::reset((const void **)(a2 + 56), 0);
    nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)(a2 + 48), 0);
    nlp::CFScopedPtr<__CFData const*>::reset((const void **)(a2 + 40), 0);
    std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100](a2 + 24);
    std::__tree<std::__value_type<std::string,BloomFilter>,std::__map_value_compare<std::string,std::__value_type<std::string,BloomFilter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BloomFilter>>>::destroy(a2, *(_QWORD **)(a2 + 8));
    JUMPOUT(0x19401E994);
  }
}

uint64_t std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,BloomFilter>,0>(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  v2 = *(void **)(a1 + 24);
  if (v2)
    operator delete(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t CoreNLP::WordDispatchTagger::setLocale(CoreNLP::TaggerContext **this, const __CFLocale *a2)
{
  CoreNLP::Tagger::setLocale(this, a2);
  return (*(uint64_t (**)(CoreNLP::TaggerContext *, const __CFLocale *))(*(_QWORD *)this[6] + 16))(this[6], a2);
}

void CoreNLP::WordDispatchTagger::setLocaleConstraints(CoreNLP::WordDispatchTagger *this, const __CFArray *a2)
{
  CFIndex Count;
  CFIndex i;
  CoreNLP *ValueAtIndex;
  const __CFLocale *v7;
  int LocaleLanguage;
  int v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  char *v20;
  char *v21;
  char *__p;
  char *v23;
  char *v24;

  CoreNLP::Tagger::setLocaleConstraints((CoreNLP::TaggerContext **)this, a2);
  (*(void (**)(_QWORD, const __CFArray *))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), a2);
  __p = 0;
  v23 = 0;
  v24 = 0;
  Count = CFArrayGetCount(a2);
  if (Count < 1)
  {
    v21 = 0;
    v20 = 0;
  }
  else
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = (CoreNLP *)CFArrayGetValueAtIndex(a2, i);
      LocaleLanguage = CoreNLP::getLocaleLanguage(ValueAtIndex, v7);
      v9 = LocaleLanguage;
      if (LocaleLanguage != 1)
      {
        v10 = v23;
        if (v23 >= v24)
        {
          v12 = __p;
          v13 = (v23 - __p) >> 2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62)
            std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
          v15 = v24 - __p;
          if ((v24 - __p) >> 1 > v14)
            v14 = v15 >> 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v16 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v24, v16);
            v12 = __p;
            v10 = v23;
          }
          else
          {
            v17 = 0;
          }
          v18 = &v17[4 * v13];
          *(_DWORD *)v18 = v9;
          v11 = v18 + 4;
          while (v10 != v12)
          {
            v19 = *((_DWORD *)v10 - 1);
            v10 -= 4;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }
          __p = v18;
          v24 = &v17[4 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *(_DWORD *)v23 = LocaleLanguage;
          v11 = v23 + 4;
        }
        v23 = v11;
      }
    }
    v20 = __p;
    v21 = v23;
  }
  CoreNLP::NLLangid::setLanguageConstraints(*((_QWORD *)this + 12), v20, (v21 - v20) >> 2);
  if (__p)
    operator delete(__p);
}

void sub_191C7ECB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CoreNLP::TaggerContext *CoreNLP::WordDispatchTagger::setTokenizerOptions(CoreNLP::WordDispatchTagger *this, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v8;

  CoreNLP::Tagger::setTokenizerOptions((uint64_t)this, a2);
  v8 = 4;
  v4 = std::__hash_table<long,std::hash<long>,std::equal_to<long>,std::allocator<long>>::find<long>((_QWORD *)this + 7, &v8);
  if (v4)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v4[3] + 128))(v4[3], a2);
  v8 = 5;
  v5 = std::__hash_table<long,std::hash<long>,std::equal_to<long>,std::allocator<long>>::find<long>((_QWORD *)this + 7, &v8);
  if (v5)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v5[3] + 128))(v5[3], a2);
  v8 = 54;
  v6 = std::__hash_table<long,std::hash<long>,std::equal_to<long>,std::allocator<long>>::find<long>((_QWORD *)this + 7, &v8);
  if (v6)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v6[3] + 128))(v6[3], a2);
  return CoreNLP::NLLangid::setTokenizerOptions(*((CoreNLP::TaggerContext **)this + 12), a2);
}

void CoreNLP::WordDispatchTagger::setStringInPossibleSubWordTaggers(uint64_t a1, const __CFString *a2, CFRange a3, unsigned int a4)
{
  unsigned int v4;
  CFIndex length;
  CFIndex location;
  uint64_t TopHypothesesOfString;
  unsigned int v10;
  unsigned int v11;
  float v12;
  uint64_t v13;

  v4 = a4;
  length = a3.length;
  location = a3.location;
  v13 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  if (a4 <= 1)
  {
    TopHypothesesOfString = CoreNLP::NLLangid::getTopHypothesesOfString(*(uint64_t **)(a1 + 96), a2, a3, &v10, 2);
    if (TopHypothesesOfString)
    {
      v4 = v10;
      if (TopHypothesesOfString >= 2
        && v10 <= 0x36
        && ((1 << v10) & 0x40000000100030) != 0
        && v11 <= 0x36
        && ((1 << v11) & 0x40000000100030) != 0
        && v12 >= 0.5)
      {
        CoreNLP::WordDispatchTagger::prepareSubWordTagger((_QWORD *)a1, (uint64_t)a2, location, length, v11);
      }
    }
    else
    {
      v4 = 10;
    }
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 36) = v4;
  CoreNLP::WordDispatchTagger::prepareSubWordTagger((_QWORD *)a1, (uint64_t)a2, location, length, v4);
}

void CoreNLP::WordDispatchTagger::prepareSubWordTagger(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  _QWORD *SubWordTagger;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;

  SubWordTagger = CoreNLP::WordDispatchTagger::getSubWordTagger((uint64_t)a1, a5);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*SubWordTagger + 32))(*SubWordTagger, a2, a3, a4);
  v10 = a1[15];
  v11 = *SubWordTagger;
  v12 = (_QWORD *)a1[14];
  if ((unint64_t)v12 >= v10)
  {
    v14 = a1[13];
    v15 = ((uint64_t)v12 - v14) >> 3;
    if ((unint64_t)(v15 + 1) >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v16 = v10 - v14;
    v17 = v16 >> 2;
    if (v16 >> 2 <= (unint64_t)(v15 + 1))
      v17 = v15 + 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 15), v18);
    else
      v19 = 0;
    v20 = &v19[8 * v15];
    v21 = &v19[8 * v18];
    *(_QWORD *)v20 = v11;
    v13 = v20 + 8;
    v23 = (char *)a1[13];
    v22 = (char *)a1[14];
    if (v22 != v23)
    {
      do
      {
        v24 = *((_QWORD *)v22 - 1);
        v22 -= 8;
        *((_QWORD *)v20 - 1) = v24;
        v20 -= 8;
      }
      while (v22 != v23);
      v22 = (char *)a1[13];
    }
    a1[13] = v20;
    a1[14] = v13;
    a1[15] = v21;
    if (v22)
      operator delete(v22);
  }
  else
  {
    *v12 = v11;
    v13 = v12 + 1;
  }
  a1[14] = v13;
}

size_t ___ZN7CoreNLP18WordDispatchTagger30enumerateTokensOfPartialStringEm7CFRangeRbU13block_pointerFvP7NLTokenPbE_block_invoke()
{
  return fwrite("Should not be here as default tagger should handle everything.\n", 0x3FuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
}

void CoreNLP::WordDispatchTagger::fastEnumerateTokens(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, uint64_t, uint64_t);
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  _BYTE v14[8];

  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v13[0] = 0;
    v13[1] = v13;
    v13[2] = 0x2000000000;
    v14[0] = 0;
    v5 = MEMORY[0x1E0C809B0];
    v6 = 0x40000000;
    v7 = ___ZN7CoreNLP18WordDispatchTagger19fastEnumerateTokensEmU13block_pointerFvP7NLTokenPbE_block_invoke;
    v8 = &unk_1E2DF41C8;
    v11 = a1;
    v12 = a2;
    v9 = a3;
    v10 = v13;
    (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v4 + 48))(v4, a2, v14);
    _Block_object_dispose(v13, 8);
  }
}

void sub_191C7F0B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN7CoreNLP18WordDispatchTagger19fastEnumerateTokensEmU13block_pointerFvP7NLTokenPbE_block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = (_QWORD *)a1[6];
  v3 = a1[7];
  v5 = a1[4];
  v6 = *(_QWORD *)(a1[5] + 8) + 24;
  v8 = v4[5];
  v7 = v4[6];
  v9 = v4[4];
  v4[5] = v7;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, *(_QWORD *)(v9 + 8), a2, a3);
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)v4[6] + 48))(v4[6], v3, v6, v5, &__block_literal_global_8);
  v4[5] = v8;
  return result;
}

__n128 CoreNLP::WordDispatchTagger::enumerateTokens(_QWORD *a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v9;
  __n128 *v10;
  _QWORD *v11;
  int64_t v12;
  __n128 *v13;
  __n128 result;
  int v15;
  unsigned __int8 v16;

  v16 = 0;
  v10 = (__n128 *)(a1 + 1);
  v9 = a1[1];
  if (v9 >= a2 && (v11 = a1 + 2, a1[2] + v9 <= a2 + a3))
  {
    (*(void (**)(uint64_t, __n128 *, unsigned __int8 *))(a5 + 16))(a5, v10, &v16);
    v15 = v16;
    v10->n128_u64[0] = -1;
    *v11 = 0;
    a1[3] = 0;
    if (v15)
      return result;
  }
  else
  {
    a1[2] = 0;
    a1[3] = 0;
    a1[1] = -1;
  }
  v12 = a2 + a3;
  do
  {
    v13 = (__n128 *)(*(uint64_t (**)(_QWORD *))(*a1 + 128))(a1);
    if (!v13)
      break;
    if ((int64_t)v13->n128_u64[0] >= a2)
    {
      if ((int64_t)(v13->n128_u64[1] + v13->n128_u64[0]) > v12)
      {
        result = *v13;
        *v10 = *v13;
        a1[3] = v13[1].n128_u64[0];
        return result;
      }
      (*(void (**)(uint64_t, __n128 *, unsigned __int8 *))(a5 + 16))(a5, v13, &v16);
    }
  }
  while (!v16);
  return result;
}

uint64_t CoreNLP::WordDispatchTagger::getSubWordTaggerForCJKSubToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int LanguageOfCJKString;
  unsigned int v6;

  v4 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v4 + 2) & 0x80) != 0)
  {
    if ((*(_BYTE *)(a2 + 17) & 0x10) != 0)
    {
LABEL_8:
      v6 = 21;
      return *CoreNLP::WordDispatchTagger::getSubWordTagger(a1, v6);
    }
    LanguageOfCJKString = CoreNLP::NLLangid::getLanguageOfCJKString(*(_QWORD *)(a1 + 96), *(const __CFString **)(v4 + 8), (CFIndex *)a2, *(unsigned int *)(v4 + 60));
  }
  else
  {
    LanguageOfCJKString = CoreNLP::NLLangid::getLanguageOfCJString(*(_QWORD *)(a1 + 96), *(const __CFString **)(v4 + 8), (CFIndex *)a2, *(unsigned int *)(v4 + 60));
  }
  v6 = LanguageOfCJKString;
  if (LanguageOfCJKString == 1)
  {
    if ((*(_BYTE *)(a2 + 17) & 0x10) == 0)
      return 0;
    goto LABEL_8;
  }
  return *CoreNLP::WordDispatchTagger::getSubWordTagger(a1, v6);
}

_QWORD *CoreNLP::WordDispatchTagger::goToTokenAtIndexFromCurrentSubWordTagger(CoreNLP::WordDispatchTagger *this, uint64_t a2, uint64_t a3, CFRange *a4)
{
  _QWORD *result;
  int v9;
  BOOL v10;

  result = (_QWORD *)*((_QWORD *)this + 5);
  if (result)
  {
    v9 = *((unsigned __int8 *)this + 208);
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 96))(result);
    if (v9)
      v10 = result == 0;
    else
      v10 = 0;
    if (v10)
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 25) + 64))(*((_QWORD *)this + 25), a2, a3);
      if (result)
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5), *(_QWORD *)(*((_QWORD *)this + 4) + 8), *result, result[1]);
        return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, CFRange *))(**((_QWORD **)this + 5) + 96))(*((_QWORD *)this + 5), a2, a3, a4);
      }
    }
  }
  return result;
}

_QWORD *CoreNLP::WordDispatchTagger::goToTokenAtIndex(CoreNLP::WordDispatchTagger *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t SubWordTaggerForCJKSubToken;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFRange v16;

  if (*((_BYTE *)this + 128))
  {
    v6 = *((_QWORD *)this + 18);
    if (v6 <= a3 && *((_QWORD *)this + 19) + v6 > a3)
      return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, CFRange *))(**((_QWORD **)this + 17) + 96))(*((_QWORD *)this + 17), a2, a3, &v16);
  }
  *((_BYTE *)this + 128) = 0;
  *((_OWORD *)this + 9) = xmmword_191D40610;
  v8 = CoreNLP::WordDispatchTagger::goToTokenAtIndexFromCurrentSubWordTagger(this, a2, a3, &v16);
  if (v8)
  {
    v9 = *((_QWORD *)this + 5);
    if (v9 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 152))(v9) && (v8[2] & 0x40001080) != 0)
    {
      SubWordTaggerForCJKSubToken = CoreNLP::WordDispatchTagger::getSubWordTaggerForCJKSubToken((uint64_t)this, (uint64_t)v8);
      if (SubWordTaggerForCJKSubToken)
      {
        v11 = SubWordTaggerForCJKSubToken;
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)SubWordTaggerForCJKSubToken + 32))(SubWordTaggerForCJKSubToken, *(_QWORD *)(*((_QWORD *)this + 4) + 8), *v8, v8[1]);
        return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v11 + 96))(v11, a2, a3, 0);
      }
    }
    else if (v16.location != -1 && v16.length)
    {
      v13 = *((_QWORD *)this + 5);
      v12 = *((_QWORD *)this + 6);
      v14 = *((_QWORD *)this + 4);
      *((_QWORD *)this + 5) = v12;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 32))(v12, *(_QWORD *)(v14 + 8));
      v8 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**((_QWORD **)this + 6) + 96))(*((_QWORD *)this + 6), a2, a3, 0);
      *((_QWORD *)this + 5) = v13;
    }
  }
  return v8;
}

uint64_t CoreNLP::WordDispatchTagger::enumeratePossibleTokenSequences(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;

  v2 = *(uint64_t **)(result + 32);
  if (*((_BYTE *)v2 + 32) && v2[3])
  {
    v4 = result;
    v5 = *v2;
    if ((v5 & 0x20000) != 0)
    {
      if (*(_BYTE *)(result + 160) || *(_BYTE *)(result + 161))
      {
        result = *(_QWORD *)(result + 48);
      }
      else
      {
        result = *(_QWORD *)(result + 40);
        if (!result)
          return result;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 64))(result, a2);
    }
    if ((v5 & 0x40000) != 0)
    {
      v10 = 0;
      v6 = *(_QWORD *)(result + 104);
      v7 = *(_QWORD *)(result + 112);
      if (v6 != v7)
      {
        v8 = v6 + 8;
        do
        {
          *(_QWORD *)(v4 + 40) = *(_QWORD *)(v8 - 8);
          result = (*(uint64_t (**)(uint64_t, char *))(a2 + 16))(a2, &v10);
          if (v10)
            v9 = 1;
          else
            v9 = v8 == v7;
          v8 += 8;
        }
        while (!v9);
      }
    }
  }
  return result;
}

uint64_t CoreNLP::WordDispatchTagger::enumerateTokensOfCurrentTokenSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[3];
  _BYTE v8[8];

  v3 = **(_QWORD **)(a1 + 32);
  if ((v3 & 0x20000) == 0)
  {
    if ((v3 & 0x40000) != 0)
    {
      v7[0] = 0;
      v7[1] = v7;
      v7[2] = 0x2000000000;
      v8[0] = 0;
      v4 = *(_QWORD *)(a1 + 40);
      if (v4)
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v4 + 48))(v4, a2, v8);
      _Block_object_dispose(v7, 8);
    }
    return 1;
  }
  if (*(_BYTE *)(a1 + 161))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 72))(*(_QWORD *)(a1 + 48), a2, a3);
    return 1;
  }
  if (*(_BYTE *)(a1 + 160))
  {
    CoreNLP::DefaultSubWordTagger::enumerateSpeciallyHandledPersonNames(*(_QWORD *)(a1 + 48), a3);
    return 1;
  }
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    return 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 72))(v6, a2, a3);
}

void sub_191C7F6F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN7CoreNLP18WordDispatchTagger37enumerateTokensOfCurrentTokenSequenceEmU13block_pointerFvP7NLTokenPbE_block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = (_QWORD *)a1[6];
  v3 = a1[7];
  v5 = a1[4];
  v6 = *(_QWORD *)(a1[5] + 8) + 24;
  v8 = v4[5];
  v7 = v4[6];
  v9 = v4[4];
  v4[5] = v7;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, *(_QWORD *)(v9 + 8), a2, a3);
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)v4[6] + 48))(v4[6], v3, v6, v5, &__block_literal_global_8);
  v4[5] = v8;
  return result;
}

uint64_t CoreNLP::WordDispatchTagger::enumerateDerivedSubTokensOfToken(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 88))(result);
  return result;
}

uint64_t CoreNLP::WordDispatchTagger::copyTranscriptionOfCurrentToken(uint64_t a1)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 128))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 104))(*(_QWORD *)(a1 + 136));
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 104))(result);
  return result;
}

uint64_t CoreNLP::WordDispatchTagger::getPartOfSpeechOfCurrentToken(CoreNLP::WordDispatchTagger *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 5);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 120))(v1);
  else
    return 15;
}

CoreNLP::NLLangid *std::unique_ptr<CoreNLP::NLLangid>::reset[abi:ne180100](CoreNLP::NLLangid **a1, CoreNLP::NLLangid *a2)
{
  CoreNLP::NLLangid *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CoreNLP::NLLangid::~NLLangid(result);
    JUMPOUT(0x19401E994);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<long,std::hash<long>,std::equal_to<long>,std::allocator<long>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_191C7FA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  uint64_t v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p[3];
    __p[3] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

const char *_nlpLoggingSubsystem()
{
  return "com.apple.CoreNLPFramework";
}

uint64_t _nlpDefaultLog()
{
  if (_nlpDefaultLog::token != -1)
    dispatch_once(&_nlpDefaultLog::token, &__block_literal_global_1);
  return _nlpDefaultLog::log;
}

os_log_t ___nlpDefaultLog_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.CoreNLPFramework", "Default");
  _nlpDefaultLog::log = (uint64_t)result;
  return result;
}

uint64_t CoreNLP::Parser::Parser(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6)
{
  CoreNLP::MontrealModel *v10;
  __int128 v11;
  int v12;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 20) = a3;
  v10 = (CoreNLP::MontrealModel *)operator new();
  CoreNLP::MontrealModel::MontrealModel(v10, a6);
  std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100]((CoreNLP::MontrealModel **)a1, v10);
  *(_DWORD *)(a1 + 12) = a5;
  *(_DWORD *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 52) = 1;
  *(_QWORD *)&v11 = 0x100000001;
  *((_QWORD *)&v11 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 36) = v11;
  *(_WORD *)(a1 + 24) = 257;
  v12 = *(_DWORD *)(a1 + 8) * (a5 + a4);
  *(_DWORD *)(a1 + 28) = 1;
  *(_DWORD *)(a1 + 32) = v12;
  return a1;
}

void sub_191C7FBE4(_Unwind_Exception *a1)
{
  CoreNLP::MontrealModel **v1;
  uint64_t v2;

  MEMORY[0x19401E994](v2, 0x80C40803F642BLL);
  std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void CoreNLP::Parser::getParseTree(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  unint64_t v8;
  int v9;
  std::vector<int>::pointer end;
  int *v11;
  std::vector<int>::pointer begin;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  char *v17;
  int *v18;
  int *v19;
  int v20;
  unint64_t v21;
  void *v23;
  int v24;
  int v25;
  void *__p;
  _BYTE *v27;
  std::vector<int> v28;
  std::vector<int>::value_type __x[4];
  __int128 v30;
  __int128 v31;
  std::vector<int> v32;
  void *v33;
  _BYTE *v34;

  v8 = a3 + 1;
  __x[0] = 0;
  std::vector<NLDepLabel>::vector(&v33, v8, __x);
  __x[0] = 0;
  std::vector<int>::vector(&v32, v8, __x);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  std::vector<NLDepLabel>::__init_with_size[abi:ne180100]<NLDepLabel*,NLDepLabel*>(a4, v33, (uint64_t)v34, (v34 - (_BYTE *)v33) >> 2);
  a4[3] = 0;
  a4[4] = 0;
  a4[5] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a4 + 3, v32.__begin_, (uint64_t)v32.__end_, v32.__end_ - v32.__begin_);
  v30 = 0u;
  v31 = 0u;
  *(_OWORD *)__x = 0u;
  LODWORD(v28.__begin_) = 1;
  if (a3 >= 1)
  {
    do
    {
      std::deque<int>::push_back(__x, &v28);
      v9 = LODWORD(v28.__begin_)++;
    }
    while (v9 < a3);
  }
  memset(&v28, 0, sizeof(v28));
  std::vector<int>::reserve(&v28, v8);
  end = v28.__end_;
  if (v28.__end_ >= v28.__end_cap_.__value_)
  {
    begin = v28.__begin_;
    v13 = v28.__end_ - v28.__begin_;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v15 = (char *)v28.__end_cap_.__value_ - (char *)v28.__begin_;
    if (((char *)v28.__end_cap_.__value_ - (char *)v28.__begin_) >> 1 > v14)
      v14 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v28.__end_cap_, v16);
      begin = v28.__begin_;
      end = v28.__end_;
    }
    else
    {
      v17 = 0;
    }
    v18 = (int *)&v17[4 * v13];
    v19 = (int *)&v17[4 * v16];
    *v18 = 0;
    v11 = v18 + 1;
    while (end != begin)
    {
      v20 = *--end;
      *--v18 = v20;
    }
    v28.__begin_ = v18;
    v28.__end_ = v11;
    v28.__end_cap_.__value_ = v19;
    if (begin)
      operator delete(begin);
  }
  else
  {
    *v28.__end_ = 0;
    v11 = end + 1;
  }
  v28.__end_ = v11;
  v21 = *(int *)(a1 + 32);
  v25 = 0;
  std::vector<float>::vector(&__p, v21, &v25);
  while ((std::vector<int>::pointer)((char *)v28.__end_ - (char *)v28.__begin_) > (std::vector<int>::pointer)7
       || *((_QWORD *)&v31 + 1) != 0)
  {
    v23 = __p;
    if (v27 - (_BYTE *)__p >= 1)
      bzero(__p, 4 * (((unint64_t)(v27 - (_BYTE *)__p) >> 2) - ((unint64_t)(v27 - (_BYTE *)__p) > 3)) + 4);
    CoreNLP::Parser::getFeatures((unsigned int *)a1, (uint64_t)v23, *a2, __x, &v28);
    v24 = CoreNLP::Parser::predictTransition(a1, (uint64_t)__p, (uint64_t)__x, &v28);
    CoreNLP::Parser::updateState(a1, v24, __x, (char **)&v28, a4);
  }
  CoreNLP::MontrealModel::clear(*(const void ***)a1);
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  if (v28.__begin_)
  {
    v28.__end_ = v28.__begin_;
    operator delete(v28.__begin_);
  }
  std::deque<int>::~deque[abi:ne180100](__x);
  if (v32.__begin_)
  {
    v32.__end_ = v32.__begin_;
    operator delete(v32.__begin_);
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
}

void sub_191C7FEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17)
{
  CoreNLP::Dependency *v17;
  uint64_t v18;
  uint64_t v19;
  void *v21;
  void *v22;

  if (__p)
    operator delete(__p);
  std::deque<int>::~deque[abi:ne180100](&a17);
  CoreNLP::Dependency::~Dependency(v17);
  v21 = *(void **)(v19 - 96);
  if (v21)
  {
    *(_QWORD *)(v19 - 88) = v21;
    operator delete(v21);
  }
  v22 = *(void **)(v19 - 72);
  if (v22)
  {
    *(_QWORD *)(v18 + 8) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(a1);
}

void std::deque<int>::push_back(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<int>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *value;
  int64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  std::vector<int>::pointer begin;
  int *end;
  int *v12;
  int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, __n);
    v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

unsigned int *CoreNLP::Parser::getFeatures(unsigned int *result, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  unsigned int *v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v8 = result;
  v9 = result[3];
  if ((int)v9 < 1)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    v11 = 0;
    v12 = result[3];
    do
    {
      v13 = a5[1] - *a5;
      v14 = v13 >> 2;
      if (v13 != 4 && v14 >= v12)
        result = (unsigned int *)memcpy((void *)(a2 + 4 * (int)(v8[2] * v11)), (const void *)(a3 + 4 * (int)(v8[2] * *(_DWORD *)(*a5 + 4 * (v11 - v9 + v14)))), 4 * (int)v8[2]);
      --v12;
      ++v11;
    }
    while ((_DWORD)v9 != (_DWORD)v11);
  }
  v16 = v8[4];
  if ((int)v16 >= 1)
  {
    v17 = v16 + 1;
    do
    {
      v18 = (v17 - 2);
      if (a4[5] > v18)
        result = (unsigned int *)memcpy((void *)(a2 + 4 * (int)(v8[2] * v9)), (const void *)(a3+ 4* (int)(v8[2]* *(_DWORD *)(*(_QWORD *)(a4[1]+ (((a4[4] + v18) >> 7) & 0x1FFFFFFFFFFFFF8))+ 4 * ((a4[4] + v18) & 0x3FF)))), 4 * (int)v8[2]);
      LODWORD(v9) = v9 + 1;
      --v17;
    }
    while (v17 > 1);
  }
  return result;
}

unint64_t CoreNLP::Parser::predictTransition(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v7;
  int v8;
  CoreNLP::MontrealModel *v9;
  __int128 v10;
  float *v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t i;
  float *v17;
  float v18;
  uint64_t v19;
  float *v20;
  float *v21;
  float v22;
  float v23;
  _OWORD v25[2];

  v7 = *(_DWORD *)(a1 + 20);
  v8 = (2 * v7) | 1;
  v9 = *(CoreNLP::MontrealModel **)a1;
  v10 = *(_OWORD *)(a1 + 40);
  v25[0] = *(_OWORD *)(a1 + 24);
  v25[1] = v10;
  CoreNLP::MontrealModel::setInputTensor((uint64_t)v9, v25, a2, (uint64_t)CFSTR("input"));
  CoreNLP::MontrealModel::predict(*(CoreNLP::MontrealModel **)a1);
  v11 = (float *)CoreNLP::MontrealModel::output(*(CoreNLP::MontrealModel **)a1, CFSTR("output"));
  v12 = *(_QWORD *)(a3 + 40);
  v13 = v12 != 0;
  if (v12)
    v11[1] = v11[1] + 100000.0;
  v14 = a4[1] - *a4;
  if (v14 >= 9 && *(_DWORD *)(a4[1] - 8) < *(_DWORD *)(a4[1] - 4))
  {
    v11[v8 - 1] = v11[v8 - 1] + 100000.0;
    v13 = 1;
  }
  v15 = v8 - 1;
  if (v15 >= 3)
  {
    for (i = 2; i != v15; ++i)
    {
      if (v14 >= 9 && (i & 1) == 0 || (v14 > 8 || !v12 && v14 == 8) && (i & 1) != 0)
      {
        v11[i] = v11[i] + 100000.0;
        v13 = 1;
      }
    }
  }
  if (!v13)
    return 0;
  if (v7)
  {
    v17 = v11 + 1;
    v18 = *v11;
    v19 = 8 * v7;
    v20 = v11;
    v21 = v11 + 1;
    do
    {
      v22 = *v21++;
      v23 = v22;
      if (v18 < v22)
      {
        v18 = v23;
        v20 = v17;
      }
      v17 = v21;
      v19 -= 4;
    }
    while (v19);
  }
  else
  {
    v20 = v11;
  }
  return (unint64_t)((char *)v20 - (char *)v11) >> 2;
}

void CoreNLP::Parser::updateState(uint64_t a1, int a2, _QWORD *a3, char **a4, _QWORD *a5)
{
  uint64_t v7;
  int v8;
  unint64_t v9;
  int *v10;
  int *v11;
  int *v12;
  int *v13;
  uint64_t v14;
  int v15;
  int *v16;
  unint64_t v17;
  int *v18;
  int v19;
  unsigned int v20;
  char *v21;
  int *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int *v27;
  unint64_t v28;
  int *v29;
  int *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  int v43;
  int *v44;
  int v45;
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  int v58;
  int v59;

  if (a2 == 1)
  {
    v7 = a3[5];
    if (!v7)
      std::__throw_out_of_range[abi:ne180100]("deque");
    v8 = *(_DWORD *)(*(_QWORD *)(a3[1] + ((a3[4] >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (a3[4] & 0x3FFLL));
    ++a3[4];
    a3[5] = v7 - 1;
    std::deque<int>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a3, 1);
    v9 = (unint64_t)a4[2];
    v10 = (int *)a4[1];
    if ((unint64_t)v10 < v9)
    {
      *v10 = v8;
      v11 = v10 + 1;
LABEL_44:
      a4[1] = (char *)v11;
      return;
    }
    v30 = (int *)*a4;
    v31 = ((char *)v10 - *a4) >> 2;
    v32 = v31 + 1;
    if (!((unint64_t)(v31 + 1) >> 62))
    {
      v33 = v9 - (_QWORD)v30;
      if (v33 >> 1 > v32)
        v32 = v33 >> 1;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
        v34 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a4 + 2), v34);
        v30 = (int *)*a4;
        v10 = (int *)a4[1];
      }
      else
      {
        v35 = 0;
      }
      v41 = &v35[4 * v31];
      v42 = &v35[4 * v34];
      *(_DWORD *)v41 = v8;
      v11 = (int *)(v41 + 4);
      while (v10 != v30)
      {
        v43 = *--v10;
        *((_DWORD *)v41 - 1) = v43;
        v41 -= 4;
      }
      *a4 = v41;
      a4[1] = (char *)v11;
      a4[2] = v42;
      if (v30)
        operator delete(v30);
      goto LABEL_44;
    }
LABEL_73:
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  }
  if (a2 == 2 * *(_DWORD *)(a1 + 20))
  {
    v12 = (int *)*a4;
    v13 = (int *)a4[1];
    v14 = (char *)v13 - *a4;
    if (v13 != (int *)*a4 && (unint64_t)v14 > 4)
    {
      v15 = *(v13 - 1);
      v59 = v12[(v14 >> 2) - 2];
      v16 = v13 - 2;
      v17 = (unint64_t)a4[2];
      a4[1] = (char *)(v13 - 2);
      if ((unint64_t)(v13 - 2) >= v17)
      {
        v36 = v16 - v12;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62)
          goto LABEL_73;
        v38 = v17 - (_QWORD)v12;
        if (v38 >> 1 > v37)
          v37 = v38 >> 1;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
          v39 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
        {
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a4 + 2), v39);
          v12 = (int *)*a4;
          v16 = (int *)a4[1];
        }
        else
        {
          v40 = 0;
        }
        v48 = &v40[4 * v36];
        v49 = &v40[4 * v39];
        *(_DWORD *)v48 = v15;
        v18 = (int *)(v48 + 4);
        while (v16 != v12)
        {
          v50 = *--v16;
          *((_DWORD *)v48 - 1) = v50;
          v48 -= 4;
        }
        *a4 = v48;
        a4[1] = (char *)v18;
        a4[2] = v49;
        if (v12)
          operator delete(v12);
      }
      else
      {
        *(v13 - 2) = v15;
        v18 = v13 - 1;
      }
      a4[1] = (char *)v18;
      std::deque<int>::push_front((uint64_t)a3, &v59);
      return;
    }
    goto LABEL_71;
  }
  if (a2 >= 0)
    v19 = a2;
  else
    v19 = a2 + 1;
  v20 = a2 - (v19 & 0xFFFFFFFE);
  if (v20 == 1)
  {
    v44 = (int *)a4[1];
    if (v44 != (int *)*a4 && (unint64_t)((char *)v44 - *a4) > 4)
    {
      v46 = v44 - 2;
      v45 = *v46;
      v47 = v46[1];
      a4[1] = (char *)(v44 - 1);
      *(_DWORD *)(*a5 + 4 * v47) = v19 >> 1;
      *(_DWORD *)(a5[3] + 4 * v47) = v45;
      return;
    }
    goto LABEL_71;
  }
  if (v20)
    return;
  v21 = *a4;
  v22 = (int *)a4[1];
  v23 = (char *)v22 - *a4;
  if (v22 == (int *)*a4 || (unint64_t)v23 <= 4)
LABEL_71:
    std::vector<int>::__throw_out_of_range[abi:ne180100]();
  v24 = *(v22 - 1);
  v25 = *(int *)&v21[4 * (v23 >> 2) - 8];
  if (a2 >= 0)
    v26 = a2;
  else
    v26 = a2 + 1;
  *(_DWORD *)(*a5 + 4 * v25) = v26 >> 1;
  *(_DWORD *)(a5[3] + 4 * v25) = v24;
  v27 = v22 - 2;
  v28 = (unint64_t)a4[2];
  a4[1] = (char *)(v22 - 2);
  if ((unint64_t)(v22 - 2) >= v28)
  {
    v51 = ((char *)v27 - v21) >> 2;
    v52 = v51 + 1;
    if ((unint64_t)(v51 + 1) >> 62)
      goto LABEL_73;
    v53 = v28 - (_QWORD)v21;
    if (v53 >> 1 > v52)
      v52 = v53 >> 1;
    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
      v54 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v54 = v52;
    if (v54)
    {
      v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a4 + 2), v54);
      v21 = *a4;
      v27 = (int *)a4[1];
    }
    else
    {
      v55 = 0;
    }
    v56 = &v55[4 * v51];
    v57 = &v55[4 * v54];
    *(_DWORD *)v56 = v24;
    v29 = (int *)(v56 + 4);
    while (v27 != (int *)v21)
    {
      v58 = *--v27;
      *((_DWORD *)v56 - 1) = v58;
      v56 -= 4;
    }
    *a4 = v56;
    a4[1] = (char *)v29;
    a4[2] = v57;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *(v22 - 2) = v24;
    v29 = v22 - 1;
  }
  a4[1] = (char *)v29;
}

void CoreNLP::Dependency::~Dependency(CoreNLP::Dependency *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

void std::deque<int>::push_front(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    std::deque<int>::__add_front_capacity((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 >> 10));
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  else
    v7 = *v6 + 4 * (v4 & 0x3FF);
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4096;
  *(_DWORD *)(v7 - 4) = *a2;
  v8 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 32) = v4 - 1;
  *(_QWORD *)(a1 + 40) = v8;
}

_QWORD *std::vector<NLDepLabel>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_191C807CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_191C8084C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<NLDepLabel>::__init_with_size[abi:ne180100]<NLDepLabel*,NLDepLabel*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_191C808C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<int>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<char *>::~__split_buffer((uint64_t)a1);
}

void std::deque<int>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_191C80C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::vector<int>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

uint64_t std::deque<int>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x400)
    a2 = 1;
  if (v2 < 0x800)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 1024;
  }
  return v4 ^ 1u;
}

void std::deque<int>::__add_front_capacity(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = v3 - v2;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = ((v3 - v2) << 7) - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x400)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0x1000uLL);
      std::__split_buffer<char *>::push_back(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 512;
      else
        v40 = (uint64_t)a1[4] + 1024;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0x1000uLL);
        std::__split_buffer<char *>::push_back(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0x1000uLL);
      }
      std::__split_buffer<char *>::push_front((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 512;
      else
        v35 = (uint64_t)a1[4] + 1024;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 1024;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<char *>::push_front((uint64_t)a1, &__p);
  }
}

void sub_191C80FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t hasRequiredKeys(_BOOL8 *a1)
{
  const __CFArray *CFArray;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  std::runtime_error *exception;
  _QWORD v12[3];
  void *__p[2];
  const __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = xmmword_1E2DF42B8;
  v14 = CFSTR("kCoreLMLocaleKey");
  v12[0] = __p;
  v12[1] = 3;
  CFArray = applesauce::CF::details::make_CFArrayRef<__CFString const*>((uint64_t)v12);
  v3 = CFArray;
  v12[2] = CFArray;
  if (!CFArray)
    return 1;
  Count = CFArrayGetCount(CFArray);
  v5 = CFArrayGetCount(v3);
  if (Count)
  {
    v6 = v5;
    v7 = 0;
    while (v6 != v7)
    {
      applesauce::CF::details::at_to<std::string>(v3, v7, (uint64_t)__p);
      if (!*a1)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v8 = applesauce::CF::details::has_key<std::string &>(*a1, (const UInt8 *)__p);
      if (SHIBYTE(v14) < 0)
        operator delete(__p[0]);
      if (!v8)
      {
        v9 = 0;
        goto LABEL_13;
      }
      if (Count == ++v7)
        break;
    }
  }
  v9 = 1;
LABEL_13:
  CFRelease(v3);
  return v9;
}

void sub_191C81160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *applesauce::CF::DictionaryRef::operator->(_QWORD *result)
{
  std::runtime_error *exception;

  if (!*result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_191C8120C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void getLocaleAsString(const __CFDictionary *a1@<X0>, _QWORD *a2@<X8>)
{
  const void *Value;
  const void *v5;
  CFTypeID v6;
  CFTypeID v7;
  const void *v8;
  const void *v9;
  NSObject *v10;
  std::runtime_error *exception;
  CFTypeRef cf;

  Value = CFDictionaryGetValue(a1, CFSTR("kCoreLMLocaleKey"));
  if (!Value)
  {
LABEL_12:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  v5 = Value;
  v6 = CFGetTypeID(Value);
  if (v6 == CFStringGetTypeID())
  {
    applesauce::CF::details::find_at_key<std::string,__CFString const* const&>(a1, (const void **)&kCoreLMLocaleKey, (uint64_t)a2);
    return;
  }
  v7 = CFGetTypeID(v5);
  if (v7 != CFLocaleGetTypeID())
  {
    v10 = _nlpDefaultLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      getLocaleAsString();
    goto LABEL_12;
  }
  v8 = (const void *)MEMORY[0x19401E1F0](v5);
  v9 = v8;
  if (v8)
    CFRetain(v8);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v9);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::convert_to<std::string,0>((const __CFString *)cf, (uint64_t)a2);
  if (cf)
    CFRelease(cf);
}

void sub_191C81354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  void *v10;

  __cxa_free_exception(v10);
  applesauce::CF::StringRef::~StringRef(&a10);
  _Unwind_Resume(a1);
}

const __CFString *copyCFLocale(const __CFDictionary *a1)
{
  const __CFString *Value;
  const __CFString *v3;
  CFTypeID v4;
  CFTypeID v5;
  NSObject *v7;
  void *__p;
  char v9;

  Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("kCoreLMLocaleKey"));
  v3 = Value;
  if (Value)
  {
    v4 = CFGetTypeID(Value);
    if (v4 == CFStringGetTypeID())
    {
      applesauce::CF::details::find_at_key<std::string,__CFString const* const&>(a1, (const void **)&kCoreLMLocaleKey, (uint64_t)&__p);
      v3 = (const __CFString *)CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3);
      if (v9 < 0)
        operator delete(__p);
    }
    else
    {
      v5 = CFGetTypeID(v3);
      if (v5 == CFLocaleGetTypeID())
        return (const __CFString *)CFRetain(v3);
      v7 = _nlpDefaultLog();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        getLocaleAsString();
      return 0;
    }
  }
  return v3;
}

void sub_191C81470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void getModelNameAsString(const __CFDictionary **a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFDictionary *v3;
  const __CFDictionary *v5;
  char *v6;
  unsigned int v7;
  const __CFDictionary *v8;
  NSObject *v9;
  const __CFDictionary *v10;
  NSObject *v11;
  std::runtime_error *exception;

  v3 = *a1;
  if (!v3)
    goto LABEL_24;
  if ((applesauce::CF::details::has_key<__CFString const* const&>(v3, (const void **)&kCoreLMArchitectureKey) & 1) == 0)
  {
LABEL_5:
    v6 = "model.dat";
LABEL_6:
    std::string::basic_string[abi:ne180100]<0>(a2, v6);
    return;
  }
  if (!*a1)
    goto LABEL_24;
  v5 = applesauce::CF::details::find_at_key<__CFString const*,__CFString const* const&>(*a1, (const void **)&kCoreLMArchitectureKey);
  if (CFEqual(v5, CFSTR("kCoreLMArchitectureLSTM")))
    goto LABEL_5;
  if (CFEqual(v5, CFSTR("kCoreLMArchitectureTransformer")))
  {
    if (!*a1)
      goto LABEL_24;
    v7 = applesauce::CF::details::has_key<__CFString const* const&>(*a1, (const void **)kCoreLMNetworkNameKey);
    v8 = *a1;
    if (v7)
    {
      if (v8)
      {
        applesauce::CF::details::find_at_key<std::string,__CFString const* const&>(v8, (const void **)kCoreLMNetworkNameKey, (uint64_t)a2);
        return;
      }
LABEL_24:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(exception);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (!v8)
      goto LABEL_24;
    if (!applesauce::CF::details::has_key<__CFString const* const&>(v8, (const void **)&kCoreLMEngineKey))
      goto LABEL_19;
    if (!*a1)
      goto LABEL_24;
    v10 = applesauce::CF::details::find_at_key<__CFString const*,__CFString const* const&>(*a1, (const void **)&kCoreLMEngineKey);
    if (CFEqual(v10, CFSTR("kCoreLMEngineCPU")))
    {
LABEL_19:
      v6 = "unilm_joint_cpu.espresso.net";
      goto LABEL_6;
    }
    if (CFEqual(v10, CFSTR("kCoreLMEngineANE")))
    {
      v6 = "unilm_joint_ane.espresso.net";
      goto LABEL_6;
    }
    v11 = _nlpDefaultLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      getModelNameAsString();
  }
  else
  {
    v9 = _nlpDefaultLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      getModelNameAsString();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_191C816B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void copyModelInfo(uint64_t a1, uint64_t a2)
{
  _BOOL4 hasFile;
  _BOOL4 v5;
  void *v6;
  uint64_t v7;
  std::string *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t *v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void *v36;
  _BOOL4 v39;
  corelm::Custom1PreProcessor *v40;
  uint64_t v41;
  corelm::Custom1PreProcessor *v42;
  _BOOL4 v45;
  corelm::Custom2PreProcessor *v46;
  uint64_t v47;
  _BOOL4 v50;
  corelm::Custom2ASRPreProcessor *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  id obj;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  std::runtime_error v60;
  corelm::Custom2ASRPreProcessor *v61;
  corelm::Custom2PreProcessor *v62;
  corelm::Custom1PreProcessor *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  std::runtime_error v72;
  void *v73[2];
  char v74;
  void *__p;
  std::string v76;
  std::string v77;
  uint64_t *v78;
  _QWORD *v79[2];
  _BYTE v80[128];
  _BYTE v81[128];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v79[0] = 0;
  v79[1] = 0;
  v78 = (uint64_t *)v79;
  std::string::basic_string[abi:ne180100]<0>(&__p, "modelInfo.plist");
  hasFile = corelm::util::Directory::hasFile(a2, (uint64_t)&__p);
  v5 = hasFile;
  if ((v76.__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
  {
    if (hasFile)
      goto LABEL_3;
LABEL_6:
    std::runtime_error::runtime_error(&v60, "modelInfo.plist not found");
    std::runtime_error::~runtime_error(&v60);
    v7 = 0;
    goto LABEL_111;
  }
  operator delete(__p);
  if (!v5)
    goto LABEL_6;
LABEL_3:
  v6 = (void *)MEMORY[0x1E0CB3940];
  std::string::basic_string[abi:ne180100]<0>(v73, "modelInfo.plist");
  corelm::util::Directory::getFilePath(a2, (uint64_t)v73, (uint64_t)&__p);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v77, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  else
    v77 = v76;
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v77;
  else
    v8 = (std::string *)v77.__r_.__value_.__r.__words[0];
  v9 = objc_msgSend(v6, "stringWithUTF8String:", v8);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  __p = &unk_1E2DF1AB8;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  if (v74 < 0)
    operator delete(v73[0]);
  v10 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithContentsOfFile:", v9);
  if ((objc_msgSend((id)objc_msgSend(v10, "allKeys"), "containsObject:", CFSTR("MaximumSequenceLength")) & 1) == 0)
  {
    std::runtime_error::runtime_error(&v72, "modelInfo.plist should have keys MaximumSequenceLength");
    std::runtime_error::~runtime_error(&v72);
  }
  v53 = a1;
  v54 = v10;
  if (objc_msgSend((id)objc_msgSend(v10, "allKeys"), "containsObject:", CFSTR("SupportedBatchSizesAndSequenceLengthsForLM")))
  {
    v57 = (void *)objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("SupportedBatchSizesAndSequenceLengthsForLM"));
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    obj = (id)objc_msgSend(v57, "allKeys");
    v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v68, v81, 16);
    if (v11)
    {
      v56 = *(_QWORD *)v69;
      do
      {
        v12 = 0;
        v58 = v11;
        do
        {
          if (*(_QWORD *)v69 != v56)
            objc_enumerationMutation(obj);
          v13 = *(void **)(*((_QWORD *)&v68 + 1) + 8 * v12);
          v77.__r_.__value_.__r.__words[0] = 0;
          v77.__r_.__value_.__r.__words[0] = (int)objc_msgSend(v13, "intValue");
          __p = &v77;
          v14 = std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v78, (unint64_t *)&v77, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
          v59 = v12;
          v16 = v14 + 5;
          v15 = (void *)v14[5];
          if (v15)
          {
            v14[6] = (uint64_t)v15;
            operator delete(v15);
            *v16 = 0;
            v16[1] = 0;
            v16[2] = 0;
          }
          v16[1] = 0;
          v16[2] = 0;
          *v16 = 0;
          v64 = 0u;
          v65 = 0u;
          v66 = 0u;
          v67 = 0u;
          v17 = (void *)objc_msgSend(v57, "objectForKey:", v13);
          v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v64, v80, 16);
          if (v18)
          {
            v19 = *(_QWORD *)v65;
            do
            {
              for (i = 0; i != v18; ++i)
              {
                if (*(_QWORD *)v65 != v19)
                  objc_enumerationMutation(v17);
                v21 = *(void **)(*((_QWORD *)&v64 + 1) + 8 * i);
                __p = &v77;
                v22 = std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v78, (unint64_t *)&v77, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
                v23 = objc_msgSend(v21, "intValue");
                v24 = v23;
                v25 = v22[7];
                v26 = (char *)v22[6];
                if ((unint64_t)v26 >= v25)
                {
                  v28 = (char *)v22[5];
                  v29 = (v26 - v28) >> 3;
                  if ((unint64_t)(v29 + 1) >> 61)
                    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
                  v30 = v25 - (_QWORD)v28;
                  v31 = (uint64_t)(v25 - (_QWORD)v28) >> 2;
                  if (v31 <= v29 + 1)
                    v31 = v29 + 1;
                  if (v30 >= 0x7FFFFFFFFFFFFFF8)
                    v32 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v32 = v31;
                  if (v32)
                  {
                    v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v22 + 7), v32);
                    v28 = (char *)v22[5];
                    v26 = (char *)v22[6];
                  }
                  else
                  {
                    v33 = 0;
                  }
                  v34 = &v33[8 * v29];
                  *(_QWORD *)v34 = v24;
                  v27 = v34 + 8;
                  while (v26 != v28)
                  {
                    v35 = *((_QWORD *)v26 - 1);
                    v26 -= 8;
                    *((_QWORD *)v34 - 1) = v35;
                    v34 -= 8;
                  }
                  v22[5] = (uint64_t)v34;
                  v22[6] = (uint64_t)v27;
                  v22[7] = (uint64_t)&v33[8 * v32];
                  if (v28)
                    operator delete(v28);
                }
                else
                {
                  *(_QWORD *)v26 = v23;
                  v27 = v26 + 8;
                }
                v22[6] = (uint64_t)v27;
              }
              v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v64, v80, 16);
            }
            while (v18);
          }
          v12 = v59 + 1;
        }
        while (v59 + 1 != v58);
        v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v68, v81, 16);
      }
      while (v11);
    }
  }
  a1 = v53;
  if (!objc_msgSend((id)objc_msgSend(v54, "allKeys"), "containsObject:", CFSTR("PreProcessor")))
    goto LABEL_110;
  v36 = (void *)objc_msgSend((id)objc_msgSend(v54, "objectForKeyedSubscript:", CFSTR("PreProcessor")), "objectForKeyedSubscript:", CFSTR("Name"));
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(v36, "UTF8String"));
  if ((v76.__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
  {
    if (v76.__r_.__value_.__s.__data_[15] != 7)
      goto LABEL_72;
    if ((_DWORD)__p != 1953723747 || *(_DWORD *)((char *)&__p + 3) != 829255540)
      goto LABEL_72;
LABEL_69:
    v40 = (corelm::Custom1PreProcessor *)operator new();
    corelm::Custom1PreProcessor::Custom1PreProcessor(v40);
    v41 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v53 + 16) + 112))(v53 + 16) + 120);
    v63 = v40;
    (*(void (**)(uint64_t, corelm::Custom1PreProcessor **))(*(_QWORD *)v41 + 64))(v41, &v63);
    v42 = v63;
    v63 = 0;
    if (!v42)
      goto LABEL_110;
    goto LABEL_108;
  }
  if (v76.__r_.__value_.__r.__words[0] != 7)
  {
    operator delete(__p);
    goto LABEL_72;
  }
  v39 = *(_DWORD *)__p != 1953723747 || *(_DWORD *)((char *)__p + 3) != 829255540;
  operator delete(__p);
  if (!v39)
    goto LABEL_69;
LABEL_72:
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(v36, "UTF8String"));
  if ((v76.__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
  {
    if (v76.__r_.__value_.__s.__data_[15] != 7)
      goto LABEL_91;
    if ((_DWORD)__p != 1953723747 || *(_DWORD *)((char *)&__p + 3) != 846032756)
      goto LABEL_91;
    goto LABEL_88;
  }
  if (v76.__r_.__value_.__r.__words[0] != 7)
  {
    operator delete(__p);
    goto LABEL_91;
  }
  v45 = *(_DWORD *)__p != 1953723747 || *(_DWORD *)((char *)__p + 3) != 846032756;
  operator delete(__p);
  if (!v45)
  {
LABEL_88:
    v46 = (corelm::Custom2PreProcessor *)operator new();
    corelm::Custom2PreProcessor::Custom2PreProcessor(v46);
    v47 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v53 + 16) + 112))(v53 + 16) + 120);
    v62 = v46;
    (*(void (**)(uint64_t, corelm::Custom2PreProcessor **))(*(_QWORD *)v47 + 64))(v47, &v62);
    v42 = v62;
    v62 = 0;
    if (!v42)
      goto LABEL_110;
LABEL_108:
    (*(void (**)(corelm::Custom1PreProcessor *))(*(_QWORD *)v42 + 8))(v42);
    goto LABEL_110;
  }
LABEL_91:
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(v36, "UTF8String"));
  if (v76.__r_.__value_.__s.__data_[15] < 0)
  {
    if (v76.__r_.__value_.__r.__words[0] != 10)
    {
      operator delete(__p);
      goto LABEL_110;
    }
    v50 = *(_QWORD *)__p != 0x41326D6F74737563 || *((_WORD *)__p + 4) != 21075;
    operator delete(__p);
    if (v50)
      goto LABEL_110;
  }
  else
  {
    if (v76.__r_.__value_.__s.__data_[15] != 10)
      goto LABEL_110;
    if (__p != (void *)0x41326D6F74737563 || LOWORD(v76.__r_.__value_.__l.__data_) != 21075)
      goto LABEL_110;
  }
  v51 = (corelm::Custom2ASRPreProcessor *)operator new();
  corelm::Custom2ASRPreProcessor::Custom2ASRPreProcessor(v51);
  v52 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v53 + 16) + 112))(v53 + 16) + 120);
  v61 = v51;
  (*(void (**)(uint64_t, corelm::Custom2ASRPreProcessor **))(*(_QWORD *)v52 + 64))(v52, &v61);
  v42 = v61;
  v61 = 0;
  if (v42)
    goto LABEL_108;
LABEL_110:
  v7 = (int)objc_msgSend((id)objc_msgSend(v54, "objectForKeyedSubscript:", CFSTR("MaximumSequenceLength")), "intValue");
LABEL_111:
  if ((uint64_t **)(a1 + 32) != &v78)
    std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__tree_node<std::__value_type<unsigned long,std::vector<unsigned long>>,void *> *,long>>((uint64_t **)(a1 + 32), v78, v79);
  *(_QWORD *)(a1 + 24) = v7;
  std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::destroy((uint64_t)&v78, v79[0]);
}

void sub_191C81E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54)
{
  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 8))(a20);
  std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::destroy((uint64_t)&a53, (_QWORD *)a54);
  _Unwind_Resume(a1);
}

BOOL corelm::util::Directory::hasFile(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _QWORD v4[3];
  char v5;

  corelm::util::Directory::getFilePath(a1, a2, (uint64_t)v4);
  v2 = corelm::util::Path::exists((corelm::util::Path *)v4);
  v4[0] = &unk_1E2DF1AB8;
  if (v5 < 0)
    operator delete((void *)v4[1]);
  return v2;
}

void sub_191C8207C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void corelm::util::Directory::getFilePath(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v5;
  __int128 v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type size;
  std::string::value_type *v12;
  int v13;
  std::string __p;
  std::string v15;
  _DWORD v16[2];

  if (*(char *)(a1 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  else
    __p = *(std::string *)(a1 + 8);
  v5 = std::string::append(&__p, "/");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = (const std::string::value_type *)a2;
  else
    v8 = *(const std::string::value_type **)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  v10 = std::string::append(&v15, v8, v9);
  v12 = (std::string::value_type *)v10->__r_.__value_.__r.__words[0];
  size = v10->__r_.__value_.__l.__size_;
  v16[0] = v10->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v16 + 3) = *(_DWORD *)((char *)&v10->__r_.__value_.__r.__words[2] + 3);
  v13 = SHIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)a3 = &unk_1E2DF1AB8;
  if (v13 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a3 + 8), v12, size);
    operator delete(v12);
  }
  else
  {
    *(_QWORD *)(a3 + 8) = v12;
    *(_QWORD *)(a3 + 16) = size;
    *(_DWORD *)(a3 + 24) = v16[0];
    *(_DWORD *)(a3 + 27) = *(_DWORD *)((char *)v16 + 3);
    *(_BYTE *)(a3 + 31) = v13;
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_191C821C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  operator delete(v21);
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(a1);
}

uint64_t CoreLMCreate(const void *a1)
{
  const __CFDictionary *v2;
  char v3;
  CFStringRef v4;
  const __CFDictionary *v5;
  const __CFDictionary *v6;
  std::string *v7;
  std::string::size_type v8;
  char v9;
  std::string::size_type size;
  const __CFDictionary *v11;
  __int128 v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  const __CFDictionary *v16;
  CoreNLP::Resource *v17;
  std::string *v18;
  std::string::size_type v19;
  const UInt8 *v20;
  CFIndex v21;
  uint64_t v22;
  const void *v23;
  const void *v24;
  const __CFDictionary *v25;
  int v26;
  NSObject *v27;
  uint64_t v28;
  const __CFDictionary *v29;
  uint64_t v30;
  _QWORD *v31;
  std::string::size_type v32;
  NSObject *v34;
  std::runtime_error *exception;
  std::runtime_error *v36;
  std::runtime_error *v37;
  std::runtime_error *v38;
  std::runtime_error *v39;
  std::runtime_error *v40;
  std::runtime_error *v41;
  std::runtime_error *v42;
  std::runtime_error *v43;
  std::runtime_error *v44;
  std::runtime_error *v45;
  std::runtime_error *v46;
  NSObject *v47;
  std::runtime_error *v48;
  std::runtime_error *v49;
  NSObject *v50;
  std::runtime_error *v51;
  std::runtime_error *v52;
  std::runtime_error *v53;
  std::string *v54;
  std::string::size_type v55;
  char v56;
  NSObject *v57;
  std::runtime_error *v58;
  std::runtime_error *v59;
  std::runtime_error *v60;
  std::runtime_error *v61;
  std::runtime_error *v62;
  std::runtime_error *v63;
  std::runtime_error *v64;
  std::runtime_error *v65;
  _QWORD v66[3];
  char v67;
  _QWORD v68[3];
  char v69;
  _QWORD v70[3];
  char v71;
  CFTypeRef cf;
  void *__p[2];
  char v74;
  CFTypeRef v75;
  CFTypeRef v76[2];
  char v77;
  std::string v78;
  void *v79[2];
  char v80;
  CFURLRef anURL[2];
  char v82;
  void *v83[2];
  char v84;
  std::string v85;
  std::string v86;
  CFTypeRef v87;
  std::string v88;
  void *v89[2];
  unsigned __int8 v90;
  std::string v91;
  void *v92;
  std::string v93;
  const __CFDictionary *v94;
  const __CFDictionary *v95;
  std::string v96;
  std::string v97;
  _BYTE v98[32];
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v96, "Unknown runtime error.");
  if (a1)
    CFRetain(a1);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v95, a1);
  v2 = v95;
  if (v95)
    CFRetain(v95);
  v94 = v2;
  v3 = hasRequiredKeys((_BOOL8 *)&v94);
  if (v94)
    CFRelease(v94);
  if ((v3 & 1) == 0)
  {
    MEMORY[0x19401E64C](&v96, "Creation options does not contain all required keys (kCoreLMVocabularyTypeKey, kCoreLMArchitectureKey, kCoreLMLocaleKey).");
    v34 = _nlpDefaultLog();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      CoreLMCreate_cold_4();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v96);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v92 = &unk_1E2DF1AF8;
  memset(&v93, 0, sizeof(v93));
  memset(&v91, 0, sizeof(v91));
  std::string::basic_string[abi:ne180100]<0>(v89, "CPU");
  if (!v95)
  {
    v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v36, "Could not construct");
    __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if ((applesauce::CF::details::has_key<__CFString const* const&>(v95, (const void **)&kCoreLMURLKey) & 1) != 0)
  {
    if (!v95)
    {
      v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v41, "Could not construct");
      __cxa_throw(v41, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::details::find_at_key<applesauce::CF::URLRef,__CFString const* const&>(v95, (const void **)&kCoreLMURLKey, (applesauce::CF::URLRef *)anURL);
    if (!anURL[0])
    {
      v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v43, "Could not construct");
      __cxa_throw(v43, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v4 = CFURLCopyFileSystemPath(anURL[0], kCFURLPOSIXPathStyle);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v97, v4);
    if (!v97.__r_.__value_.__r.__words[0])
    {
      v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v44, "Could not construct");
      __cxa_throw(v44, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::convert_to<std::string,0>((const __CFString *)v97.__r_.__value_.__l.__data_, (uint64_t)__p);
    corelm::util::Directory::Directory<std::string>(v98, (uint64_t)__p);
    std::string::operator=(&v93, (const std::string *)&v98[8]);
    *(_QWORD *)v98 = &unk_1E2DF1AB8;
    if ((v98[31] & 0x80000000) != 0)
      operator delete(*(void **)&v98[8]);
    if (v74 < 0)
      operator delete(__p[0]);
    if (v97.__r_.__value_.__r.__words[0])
      CFRelease(v97.__r_.__value_.__l.__data_);
    v5 = v95;
    if (v95)
      CFRetain(v95);
    cf = v5;
    getModelNameAsString((const __CFDictionary **)&cf, &v86);
    corelm::util::Directory::getFilePath((uint64_t)&v92, (uint64_t)&v86, (uint64_t)v98);
    if ((v98[31] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)&v98[8], *(std::string::size_type *)&v98[16]);
    else
      v97 = *(std::string *)&v98[8];
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v91.__r_.__value_.__l.__data_);
    v91 = v97;
    *((_BYTE *)&v97.__r_.__value_.__s + 23) = 0;
    v97.__r_.__value_.__s.__data_[0] = 0;
    *(_QWORD *)v98 = &unk_1E2DF1AB8;
    if ((v98[31] & 0x80000000) != 0)
      operator delete(*(void **)&v98[8]);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
    if (cf)
      CFRelease(cf);
    if (!v95)
    {
      v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v45, "Could not construct");
      __cxa_throw(v45, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (applesauce::CF::details::has_key<__CFString const* const&>(v95, (const void **)&kCoreLMEngineKey))
    {
      if (!v95)
      {
        v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v53, "Could not construct");
        __cxa_throw(v53, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v11 = applesauce::CF::details::find_at_key<__CFString const*,__CFString const* const&>(v95, (const void **)&kCoreLMEngineKey);
      if (!CFEqual(v11, CFSTR("kCoreLMEngineCPU")) && !CFEqual(v11, CFSTR("kCoreLMEngineANE")))
      {
        v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v63, "Invalid Engine type. Should be either kCoreLMEngineCPU or kCoreLMEngineANE");
        __cxa_throw(v63, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (CFEqual(v11, CFSTR("kCoreLMEngineANE")))
        MEMORY[0x19401E64C](v89, "ANE");
    }
    if (!corelm::util::Directory::exists((corelm::util::Directory *)&v92))
    {
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)v98, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
      else
        *(std::string *)v98 = v93;
      v54 = std::string::insert((std::string *)v98, 0, "Model directory does not exist: ");
      v55 = v54->__r_.__value_.__r.__words[0];
      v97.__r_.__value_.__r.__words[0] = v54->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v97.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v54->__r_.__value_.__r.__words[1] + 7);
      v56 = HIBYTE(v54->__r_.__value_.__r.__words[2]);
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v96.__r_.__value_.__l.__data_);
      v96.__r_.__value_.__r.__words[0] = v55;
      v96.__r_.__value_.__l.__size_ = v97.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&v96.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v97.__r_.__value_.__r.__words + 7);
      *((_BYTE *)&v96.__r_.__value_.__s + 23) = v56;
      if ((v98[23] & 0x80000000) != 0)
        operator delete(*(void **)v98);
      v57 = _nlpDefaultLog();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
        CoreLMCreate_cold_2();
      v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v58, &v96);
      __cxa_throw(v58, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (anURL[0])
      CFRelease(anURL[0]);
    goto LABEL_128;
  }
  if (!v95)
  {
    v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v42, "Could not construct");
    __cxa_throw(v42, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (applesauce::CF::details::has_key<__CFString const* const&>(v95, (const void **)&kCoreLMArchitectureKey))
  {
    if (!v95)
    {
      v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v52, "Could not construct");
      __cxa_throw(v52, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v6 = applesauce::CF::details::find_at_key<__CFString const*,__CFString const* const&>(v95, (const void **)&kCoreLMArchitectureKey);
    if (CFEqual(v6, CFSTR("kCoreLMArchitectureTransformer")))
    {
      anURL[0] = (CFURLRef)copyCFLocale((const __CFDictionary *)a1);
      CoreNLP::Resource::getAssetResource(anURL[0], (const __CFLocale *)CFSTR("LanguageModel"), CFSTR("en.lm"), (const __CFString *)1, &v78);
      if (!v78.__r_.__value_.__r.__words[0])
      {
        v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v60, "Unable to locate model. Should be of the format unilm_joint_ane.espresso.net or unilm_joint_cpu.espresso.net");
        __cxa_throw(v60, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      CoreNLP::Resource::path((CoreNLP **)v78.__r_.__value_.__l.__data_, v98);
      v7 = std::string::append((std::string *)v98, "/unilm.bundle");
      v8 = v7->__r_.__value_.__r.__words[0];
      v97.__r_.__value_.__r.__words[0] = v7->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v97.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v7->__r_.__value_.__r.__words[1] + 7);
      v9 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      v91.__r_.__value_.__r.__words[0] = v8;
      v91.__r_.__value_.__l.__size_ = v97.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&v91.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v97.__r_.__value_.__r.__words + 7);
      *((_BYTE *)&v91.__r_.__value_.__s + 23) = v9;
      if ((v98[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v98);
        if ((*((_BYTE *)&v91.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_32;
      }
      else if ((v9 & 0x80) == 0)
      {
LABEL_32:
        v88 = v91;
LABEL_99:
        corelm::util::Directory::Directory<std::string>(v98, (uint64_t)&v88);
        std::string::operator=(&v93, (const std::string *)&v98[8]);
        *(_QWORD *)v98 = &unk_1E2DF1AB8;
        if ((v98[31] & 0x80000000) != 0)
          operator delete(*(void **)&v98[8]);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        v15 = v95;
        if (v95)
          CFRetain(v95);
        v87 = v15;
        getModelNameAsString((const __CFDictionary **)&v87, &v97);
        if (v87)
          CFRelease(v87);
        if (!v95)
        {
          v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v61, "Could not construct");
          __cxa_throw(v61, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        if (applesauce::CF::details::has_key<__CFString const* const&>(v95, (const void **)&kCoreLMEngineKey))
        {
          if (!v95)
          {
            v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v64, "Could not construct");
            __cxa_throw(v64, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v16 = applesauce::CF::details::find_at_key<__CFString const*,__CFString const* const&>(v95, (const void **)&kCoreLMEngineKey);
          if (!CFEqual(v16, CFSTR("kCoreLMEngineCPU")) && !CFEqual(v16, CFSTR("kCoreLMEngineANE")))
          {
            v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v65, "Invalid Engine type. Should be either kCoreLMEngineCPU or kCoreLMEngineANE");
            __cxa_throw(v65, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          if (CFEqual(v16, CFSTR("kCoreLMEngineANE")))
            MEMORY[0x19401E64C](v89, "ANE");
        }
        if (!corelm::util::Directory::hasFile((uint64_t)&v92, (uint64_t)&v97))
        {
          v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v62, "Unable to locate espresso model inside the unilm bundle");
          __cxa_throw(v62, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        corelm::util::Directory::getFilePath((uint64_t)&v92, (uint64_t)&v97, (uint64_t)v98);
        if ((v98[31] & 0x80000000) != 0)
          std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)&v98[8], *(std::string::size_type *)&v98[16]);
        else
          v86 = *(std::string *)&v98[8];
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v91.__r_.__value_.__l.__data_);
        v91 = v86;
        *((_BYTE *)&v86.__r_.__value_.__s + 23) = 0;
        v86.__r_.__value_.__s.__data_[0] = 0;
        *(_QWORD *)v98 = &unk_1E2DF1AB8;
        if ((v98[31] & 0x80000000) != 0)
          operator delete(*(void **)&v98[8]);
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v97.__r_.__value_.__l.__data_);
        v17 = (CoreNLP::Resource *)v78.__r_.__value_.__r.__words[0];
        v78.__r_.__value_.__r.__words[0] = 0;
        if (v17)
        {
          CoreNLP::Resource::~Resource(v17);
          MEMORY[0x19401E994]();
        }
        if (anURL[0])
          CFRelease(anURL[0]);
        goto LABEL_128;
      }
      std::string::__init_copy_ctor_external(&v88, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
      goto LABEL_99;
    }
  }
  getLocaleAsString((const __CFDictionary *)a1, &v97);
  size = HIBYTE(v97.__r_.__value_.__r.__words[2]);
  if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v97.__r_.__value_.__l.__size_;
  if (!size)
  {
    MEMORY[0x19401E64C](&v96, "Unable to determine model locale from options");
    v47 = _nlpDefaultLog();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      CoreLMCreate_cold_3();
    v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v48, &v96);
    __cxa_throw(v48, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  std::string::basic_string[abi:ne180100]<0>(v98, "-");
  std::string::basic_string[abi:ne180100]<0>(&v86, "_");
  corelm::util::replace((uint64_t)&v97, (uint64_t)v98, (char *)&v86);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  if ((v98[23] & 0x80000000) != 0)
    operator delete(*(void **)v98);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v85, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
  else
    v85 = v97;
  std::string::basic_string[abi:ne180100]<0>(v83, "_");
  corelm::util::stripSplit(&v85, (char *)v83, (std::vector<std::string> *)v98);
  if (*(char *)(*(_QWORD *)v98 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v86, **(const std::string::value_type ***)v98, *(_QWORD *)(*(_QWORD *)v98 + 8));
  }
  else
  {
    v12 = **(_OWORD **)v98;
    v86.__r_.__value_.__r.__words[2] = *(_QWORD *)(*(_QWORD *)v98 + 16);
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v12;
  }
  anURL[0] = (CFURLRef)v98;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)anURL);
  if (v84 < 0)
    operator delete(v83[0]);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(anURL, "/System/Library/PrivateFrameworks/CVNLP.framework/Models/");
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)anURL, (const void **)&v86.__r_.__value_.__l.__data_, (uint64_t)v79);
  corelm::util::Directory::Directory<std::string>(v98, (uint64_t)v79);
  std::string::operator=(&v93, (const std::string *)&v98[8]);
  *(_QWORD *)v98 = &unk_1E2DF1AB8;
  if ((v98[31] & 0x80000000) != 0)
    operator delete(*(void **)&v98[8]);
  if (v80 < 0)
    operator delete(v79[0]);
  v13 = v95;
  if (v95)
    CFRetain(v95);
  v75 = v13;
  getModelNameAsString((const __CFDictionary **)&v75, v76);
  corelm::util::Directory::getFilePath((uint64_t)&v92, (uint64_t)v76, (uint64_t)v98);
  if ((v98[31] & 0x80000000) != 0)
    std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)&v98[8], *(std::string::size_type *)&v98[16]);
  else
    v78 = *(std::string *)&v98[8];
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  v91 = v78;
  *((_BYTE *)&v78.__r_.__value_.__s + 23) = 0;
  v78.__r_.__value_.__s.__data_[0] = 0;
  *(_QWORD *)v98 = &unk_1E2DF1AB8;
  if ((v98[31] & 0x80000000) != 0)
    operator delete(*(void **)&v98[8]);
  if (v77 < 0)
    operator delete((void *)v76[0]);
  if (v75)
    CFRelease(v75);
  if (!v95)
  {
    v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v49, "Could not construct");
    __cxa_throw(v49, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (applesauce::CF::details::has_key<__CFString const* const&>(v95, (const void **)&kCoreLMEngineKey))
  {
    if (!v95)
    {
      v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v59, "Could not construct");
      __cxa_throw(v59, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v14 = applesauce::CF::details::find_at_key<__CFString const*,__CFString const* const&>(v95, (const void **)&kCoreLMEngineKey);
    if (CFEqual(v14, CFSTR("kCoreLMEngineANE")))
    {
      v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v51, "LSTM architecture only supports CPU");
      goto LABEL_216;
    }
  }
  if (!corelm::util::Directory::exists((corelm::util::Directory *)&v92))
  {
    MEMORY[0x19401E64C](&v96, "Requested core language model (locale, vocabulary type, architecture type) is not supported.");
    v50 = _nlpDefaultLog();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      CoreLMCreate_cold_4();
    v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v51, &v96);
LABEL_216:
    __cxa_throw(v51, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v82 < 0)
    operator delete(anURL[0]);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
LABEL_128:
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v91;
  else
    v18 = (std::string *)v91.__r_.__value_.__r.__words[0];
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
  else
    v19 = v91.__r_.__value_.__l.__size_;
  v86.__r_.__value_.__r.__words[0] = (std::string::size_type)CFURLCreateWithBytes(0, (const UInt8 *)v18, v19, 0, 0);
  if (!v86.__r_.__value_.__r.__words[0])
  {
    v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "Could not construct");
    __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if ((v90 & 0x80u) == 0)
    v20 = (const UInt8 *)v89;
  else
    v20 = (const UInt8 *)v89[0];
  if ((v90 & 0x80u) == 0)
    v21 = v90;
  else
    v21 = (CFIndex)v89[1];
  anURL[0] = (CFURLRef)CFStringCreateWithBytes(0, v20, v21, 0x8000100u, 0);
  if (!anURL[0])
  {
    v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v38, "Could not construct");
    __cxa_throw(v38, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[34],applesauce::CF::URLRef &>((applesauce::CF::TypeRef *)v98, "MRLNeuralNetworkOptionModelURLKey", (const void **)&v86.__r_.__value_.__l.__data_);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[34],applesauce::CF::URLRef &>((applesauce::CF::TypeRef *)&v98[16], "MRLNeuralNetworkOptionEngineKey", (const void **)anURL);
  v97.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
  v97.__r_.__value_.__l.__size_ = 2;
  v22 = 0;
  v78.__r_.__value_.__r.__words[0] = (std::string::size_type)applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v97);
  do
  {
    v23 = *(const void **)&v98[v22 + 24];
    if (v23)
      CFRelease(v23);
    v24 = *(const void **)&v98[v22 + 16];
    if (v24)
      CFRelease(v24);
    v22 -= 16;
  }
  while (v22 != -32);
  if (!v95)
  {
    v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v39, "Could not construct");
    __cxa_throw(v39, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v25 = applesauce::CF::details::find_at_key<__CFString const*,__CFString const* const&>(v95, (const void **)&kCoreLMVocabularyTypeKey);
  v26 = CFEqual(v25, CFSTR("kCoreLMVocabularyTypeFragment"));
  corelm::util::Directory::Directory((corelm::util::Directory *)v70, (const corelm::util::Directory *)&v92);
  corelm::VocabularyBuilder::makeVocabulary((uint64_t)v70, 2 * (v26 != 0), (void **)&v97.__r_.__value_.__l.__data_);
  v70[0] = &unk_1E2DF1AB8;
  if (v71 < 0)
    operator delete((void *)v70[1]);
  v27 = _nlpDefaultLog();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
  {
    v28 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v97.__r_.__value_.__l.__data_ + 96))(v97.__r_.__value_.__r.__words[0]);
    CoreLMCreate_cold_1(v98, v28, v27);
  }
  v76[0] = 0;
  v76[0] = (CFTypeRef)CFWrapper<CoreLanguageModel,corelm::LanguageModel>::create<corelm::LanguageModel,applesauce::CF::DictionaryRef &,std::unique_ptr<corelm::AbstractVocabulary>>((const void **)&v78.__r_.__value_.__l.__data_, (uint64_t *)&v97);
  if (!v95)
  {
    v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v40, "Could not construct");
    __cxa_throw(v40, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!applesauce::CF::details::has_key<__CFString const* const&>(v95, (const void **)&kCoreLMEngineKey))
    goto LABEL_159;
  if (!v95)
  {
    v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v46, "Could not construct");
    __cxa_throw(v46, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v29 = applesauce::CF::details::find_at_key<__CFString const*,__CFString const* const&>(v95, (const void **)&kCoreLMEngineKey);
  if (CFEqual(v29, CFSTR("kCoreLMEngineANE")))
  {
    v30 = CFWrapper<CoreLanguageModelWithState,corelm::LanguageModelWithState>::create<corelm::LanguageModelForANE,CoreLanguageModel *&>(v76);
    CFRelease(v76[0]);
    corelm::util::Directory::Directory((corelm::util::Directory *)v68, (const corelm::util::Directory *)&v92);
    copyModelInfo(v30, (uint64_t)v68);
    v68[0] = &unk_1E2DF1AB8;
    if ((v69 & 0x80000000) == 0)
      goto LABEL_162;
    v31 = v68;
  }
  else
  {
LABEL_159:
    v30 = CFWrapper<CoreLanguageModelWithState,corelm::LanguageModelWithState>::create<corelm::LanguageModelWithState,CoreLanguageModel *&>(v76);
    CFRelease(v76[0]);
    corelm::util::Directory::Directory((corelm::util::Directory *)v66, (const corelm::util::Directory *)&v92);
    copyModelInfo(v30, (uint64_t)v66);
    v66[0] = &unk_1E2DF1AB8;
    if ((v67 & 0x80000000) == 0)
      goto LABEL_162;
    v31 = v66;
  }
  operator delete((void *)v31[1]);
LABEL_162:
  v32 = v97.__r_.__value_.__r.__words[0];
  v97.__r_.__value_.__r.__words[0] = 0;
  if (v32)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v32 + 8))(v32);
  if (v78.__r_.__value_.__r.__words[0])
    CFRelease(v78.__r_.__value_.__l.__data_);
  if (anURL[0])
    CFRelease(anURL[0]);
  if (v86.__r_.__value_.__r.__words[0])
    CFRelease(v86.__r_.__value_.__l.__data_);
  if ((char)v90 < 0)
    operator delete(v89[0]);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  v92 = &unk_1E2DF1AB8;
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  if (v95)
    CFRelease(v95);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  return v30;
}

void sub_191C833CC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,CoreNLP::Resource *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p)
{
  CFErrorRef *v35;
  void *v36;
  uint64_t v37;
  void *v40;
  void *v41;
  const __CFAllocator *v42;
  __CFDictionary *Mutable;
  const char *v44;
  CFStringRef v45;
  const __CFAllocator *v46;
  __CFDictionary *v47;
  const char *v48;
  CFStringRef v49;

  if (a2)
  {
    __cxa_free_exception(v36);
    if (*(char *)(v37 - 105) < 0)
      operator delete(*(void **)(v37 - 128));
    std::unique_ptr<CoreNLP::Resource>::reset[abi:ne180100](&a29, 0);
    nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)&__p, 0);
    if (*(char *)(v37 - 225) < 0)
      operator delete(*(void **)(v37 - 248));
    if (*(char *)(v37 - 201) < 0)
      operator delete(*(void **)(v37 - 224));
    *(_QWORD *)(v37 - 200) = &unk_1E2DF1AB8;
    if (*(char *)(v37 - 169) < 0)
      operator delete(*(void **)(v37 - 192));
    applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v37 - 160));
    if (*(char *)(v37 - 129) < 0)
      operator delete(*(void **)(v37 - 152));
    v40 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      if (v35)
      {
        v41 = v40;
        v42 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v44 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 16))(v41);
        v45 = CFStringCreateWithCString(v42, v44, 0);
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0C9AFE0], v45);
        *v35 = CFErrorCreate(v42, CFSTR("CoreLanguageModel"), 0, Mutable);
        CFRelease(v45);
        CFRelease(Mutable);
      }
      __cxa_end_catch();
    }
    else
    {
      if (v35)
      {
        v46 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v47 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v37 - 200), "Unknown exception");
        v48 = *(char *)(v37 - 177) >= 0 ? (const char *)(v37 - 200) : *(const char **)(v37 - 200);
        v49 = CFStringCreateWithCString(v46, v48, 0);
        CFDictionaryAddValue(v47, (const void *)*MEMORY[0x1E0C9AFE0], v49);
        *v35 = CFErrorCreate(v46, CFSTR("CoreLanguageModel"), 0, v47);
        CFRelease(v49);
        CFRelease(v47);
        if (*(char *)(v37 - 177) < 0)
          operator delete(*(void **)(v37 - 200));
      }
      __cxa_end_catch();
    }
    JUMPOUT(0x191C82D2CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

uint64_t CFWrapper<CoreLanguageModel,corelm::LanguageModel>::create<corelm::LanguageModel,applesauce::CF::DictionaryRef &,std::unique_ptr<corelm::AbstractVocabulary>>(const void **a1, uint64_t *a2)
{
  uint64_t Instance;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  CFTypeRef cf;

  if (CFWrapper<CoreLanguageModel,corelm::LanguageModel>::s_once != -1)
    dispatch_once(&CFWrapper<CoreLanguageModel,corelm::LanguageModel>::s_once, &__block_literal_global_2);
  Instance = _CFRuntimeCreateInstance();
  v5 = *a1;
  if (v5)
    CFRetain(v5);
  v6 = *a2;
  *a2 = 0;
  v9 = v6;
  cf = v5;
  corelm::LanguageModel::LanguageModel(Instance + 16, &cf, &v9);
  v7 = v9;
  v9 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (cf)
    CFRelease(cf);
  return Instance;
}

void sub_191C83FE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  if (a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t CFWrapper<CoreLanguageModelWithState,corelm::LanguageModelWithState>::create<corelm::LanguageModelForANE,CoreLanguageModel *&>(CFTypeRef *a1)
{
  uint64_t Instance;

  if (CFWrapper<CoreLanguageModelWithState,corelm::LanguageModelWithState>::s_once != -1)
    dispatch_once(&CFWrapper<CoreLanguageModelWithState,corelm::LanguageModelWithState>::s_once, &__block_literal_global_224);
  Instance = _CFRuntimeCreateInstance();
  corelm::LanguageModelWithState::LanguageModelWithState(Instance + 16, *a1, 0);
  *(_QWORD *)(Instance + 16) = &unk_1E2DF17A8;
  *(_OWORD *)(Instance + 112) = 0u;
  *(_OWORD *)(Instance + 128) = 0u;
  *(_OWORD *)(Instance + 144) = 0u;
  *(_DWORD *)(Instance + 160) = 3;
  return Instance;
}

uint64_t CFWrapper<CoreLanguageModelWithState,corelm::LanguageModelWithState>::create<corelm::LanguageModelWithState,CoreLanguageModel *&>(CFTypeRef *a1)
{
  uint64_t Instance;

  if (CFWrapper<CoreLanguageModelWithState,corelm::LanguageModelWithState>::s_once != -1)
    dispatch_once(&CFWrapper<CoreLanguageModelWithState,corelm::LanguageModelWithState>::s_once, &__block_literal_global_224);
  Instance = _CFRuntimeCreateInstance();
  corelm::LanguageModelWithState::LanguageModelWithState(Instance + 16, *a1, 1);
  return Instance;
}

CFTypeRef CoreLMCopyTokenIdsForText(uint64_t a1, const void *a2)
{
  uint64_t v3;
  const __CFString *v4;
  CFTypeID TypeID;
  std::string *v6;
  std::string::size_type size;
  CFArrayRef CFArray;
  CFTypeRef v9;
  std::runtime_error *exception;
  std::string __p;
  CFTypeRef cf;
  std::string v14;
  std::string v15;

  v3 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 112))(a1 + 16) + 120);
  if (a2)
    CFRetain(a2);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, a2);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v4 = (const __CFString *)cf;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v15, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v15 = __p;
  if (v4 && (TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(v4)))
  {
    applesauce::CF::details::CFString_get_value<false>(v4, (uint64_t)&v14);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    v14 = v15;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (cf)
    CFRelease(cf);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v14;
  else
    v6 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  else
    size = v14.__r_.__value_.__l.__size_;
  (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, std::string::size_type, _QWORD))(*(_QWORD *)v3 + 16))(&v15, v3, v6, size, 0);
  CFArray = applesauce::CF::details::make_CFArrayRef<long>((void ****)&v15);
  cf = CFArray;
  v9 = CFRetain(CFArray);
  if (CFArray)
    CFRelease(CFArray);
  if (v15.__r_.__value_.__r.__words[0])
  {
    v15.__r_.__value_.__l.__size_ = v15.__r_.__value_.__r.__words[0];
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return v9;
}

void sub_191C842F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;

  __cxa_free_exception(v21);
  applesauce::CF::StringRef::~StringRef(&a12);
  _Unwind_Resume(a1);
}

CFTypeRef CoreLMCopyTextForTokenIds(uint64_t a1, const void *a2)
{
  uint64_t v3;
  __n128 v4;
  void **v5;
  CFIndex v6;
  CFStringRef v7;
  CFStringRef v8;
  CFTypeRef v9;
  std::runtime_error *exception;
  std::runtime_error *v12;
  __n128 v13;
  uint64_t v14;
  __n128 __p;
  void *v16[2];
  unsigned __int8 v17;
  const __CFArray *v18;

  v3 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 112))(a1 + 16) + 120);
  if (a2)
    CFRetain(a2);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v18, a2);
  if (!v18)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v13 = 0uLL;
  v14 = 0;
  v4 = applesauce::CF::convert_or<std::vector<long>,0>(v18, &v13, &__p);
  (*(void (**)(void **__return_ptr, uint64_t, __n128 *, __n128))(*(_QWORD *)v3 + 24))(v16, v3, &__p, v4);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v13.n128_u64[0])
  {
    v13.n128_u64[1] = v13.n128_u64[0];
    operator delete((void *)v13.n128_u64[0]);
  }
  if ((v17 & 0x80u) == 0)
    v5 = v16;
  else
    v5 = (void **)v16[0];
  if ((v17 & 0x80u) == 0)
    v6 = v17;
  else
    v6 = (CFIndex)v16[1];
  v7 = CFStringCreateWithBytes(0, (const UInt8 *)v5, v6, 0x8000100u, 0);
  v8 = v7;
  __p.n128_u64[0] = (unint64_t)v7;
  if (!v7)
  {
    v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Could not construct");
    __cxa_throw(v12, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = CFRetain(v7);
  CFRelease(v8);
  if ((char)v17 < 0)
    operator delete(v16[0]);
  if (v18)
    CFRelease(v18);
  return v9;
}

void sub_191C844E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)(v20 - 24));
  _Unwind_Resume(a1);
}

uint64_t CoreLMGetSpecialTokenId(uint64_t a1, int a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v7;

  v3 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 112))(a1 + 16) + 120);
  switch(a2)
  {
    case 0:
      v4 = *(char *)(v3 + 31);
      if ((v4 & 0x80000000) == 0)
      {
        v5 = v3 + 8;
        goto LABEL_11;
      }
      v5 = *(_QWORD *)(v3 + 8);
      v7 = *(_QWORD *)(v3 + 16);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, v5, v7);
    case 1:
      v4 = *(char *)(v3 + 55);
      if ((v4 & 0x80000000) == 0)
      {
        v5 = v3 + 32;
        goto LABEL_11;
      }
      v5 = *(_QWORD *)(v3 + 32);
      v7 = *(_QWORD *)(v3 + 40);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, v5, v7);
    case 2:
      v4 = *(char *)(v3 + 79);
      if ((v4 & 0x80000000) == 0)
      {
        v5 = v3 + 56;
        goto LABEL_11;
      }
      v5 = *(_QWORD *)(v3 + 56);
      v7 = *(_QWORD *)(v3 + 64);
      break;
    case 3:
      v4 = *(char *)(v3 + 103);
      if (v4 < 0)
      {
        v5 = *(_QWORD *)(v3 + 80);
        v7 = *(_QWORD *)(v3 + 88);
      }
      else
      {
        v5 = v3 + 80;
LABEL_11:
        v7 = v4;
      }
      break;
    default:
      return 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, v5, v7);
}

CFTypeRef CoreLMCopyVocabulary(uint64_t a1)
{
  uint64_t v1;
  std::vector<std::string>::size_type v2;
  char *v3;
  char *v4;
  char **v5;
  BOOL v6;
  uint64_t *v7;
  CFArrayRef v8;
  CFTypeRef v9;
  NSObject *v10;
  std::vector<std::string>::value_type __x;
  std::vector<std::string> v13;
  uint64_t *v14;
  char *v15;
  std::string::size_type v16;
  std::vector<std::string>::value_type *p_x;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 112))(a1 + 16);
  (*(void (**)(uint64_t **__return_ptr))(**(_QWORD **)(v1 + 120) + 56))(&v14);
  v2 = v16;
  if (!v16 || v14[4])
    goto LABEL_16;
  v3 = v15;
  if (v15)
  {
    do
    {
      v4 = v3;
      v3 = (char *)*((_QWORD *)v3 + 1);
    }
    while (v3);
  }
  else
  {
    v5 = &v15;
    do
    {
      v4 = v5[2];
      v6 = *(_QWORD *)v4 == (_QWORD)v5;
      v5 = (char **)v4;
    }
    while (v6);
  }
  if (*((_QWORD *)v4 + 4) == v16 - 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__x, "");
    std::vector<std::string>::vector(&v13, v2, &__x);
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__x.__r_.__value_.__l.__data_);
    for (__x.__r_.__value_.__r.__words[0] = 0; __x.__r_.__value_.__r.__words[0] < v16; ++__x.__r_.__value_.__r.__words[0])
    {
      p_x = &__x;
      v7 = std::__tree<std::__value_type<long,std::string>,std::__map_value_compare<long,std::__value_type<long,std::string>,std::less<long>,true>,std::allocator<std::__value_type<long,std::string>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(&v14, (uint64_t *)&__x, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_x);
      std::string::operator=(&v13.__begin_[__x.__r_.__value_.__r.__words[0]], (const std::string *)(v7 + 5));
    }
    v8 = applesauce::CF::details::make_CFArrayRef<std::string>((__int128 **)&v13);
    __x.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v9 = CFRetain(v8);
    if (v8)
      CFRelease(v8);
    __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  }
  else
  {
LABEL_16:
    v10 = _nlpDefaultLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      CoreLMCopyVocabulary_cold_1();
    v9 = 0;
  }
  std::__tree<std::__value_type<long,std::string>,std::__map_value_compare<long,std::__value_type<long,std::string>,std::less<long>,true>,std::allocator<std::__value_type<long,std::string>>>::destroy((uint64_t)&v14, v15);
  return v9;
}

void sub_191C847D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, char *a20)
{
  applesauce::CF::ArrayRef::~ArrayRef((const void **)&__p);
  __p = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<long,std::string>,std::__map_value_compare<long,std::__value_type<long,std::string>,std::less<long>,true>,std::allocator<std::__value_type<long,std::string>>>::destroy((uint64_t)&a19, a20);
  _Unwind_Resume(a1);
}

uint64_t CoreLMUpdateWithContext(uint64_t a1, CFTypeRef cf)
{
  __n128 v4;
  NSObject *v5;
  std::runtime_error *exception;
  std::runtime_error *v8;
  __n128 v9;
  uint64_t v10;
  __n128 __p;
  const __CFArray *v12;

  if (cf)
    CFRetain(cf);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v12, cf);
  if (!v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (CFArrayGetCount(v12))
  {
    if (!v12)
    {
      v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v8, "Could not construct");
      __cxa_throw(v8, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v9 = 0uLL;
    v10 = 0;
    v4 = applesauce::CF::convert_or<std::vector<long>,0>(v12, &v9, &__p);
    (*(void (**)(uint64_t, __n128 *, __n128))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16, &__p, v4);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    if (v9.n128_u64[0])
    {
      v9.n128_u64[1] = v9.n128_u64[0];
      operator delete((void *)v9.n128_u64[0]);
    }
  }
  else
  {
    v5 = _nlpDefaultLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      CoreLMUpdateWithContext_cold_1();
  }
  if (v12)
    CFRelease(v12);
  return 1;
}

void sub_191C84974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  uint64_t v14;

  applesauce::CF::ArrayRef::~ArrayRef((const void **)(v14 - 24));
  _Unwind_Resume(a1);
}

CFTypeRef CoreLMCopyConditionalProbabilities(uint64_t a1, CFTypeRef cf)
{
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFArrayRef v7;
  CFIndex v8;
  unint64_t v9;
  uint64_t v10;
  const __CFBoolean *v11;
  float v12;
  float v13;
  float *v14;
  float *v15;
  float *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  float *v22;
  int v23;
  CFArrayRef CFArray;
  CFTypeRef v25;
  void *__p;
  float *v28;
  float *v29;
  CFArrayRef theArray;

  if (cf)
    CFRetain(cf);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&theArray, cf);
  __p = 0;
  v28 = 0;
  v29 = 0;
  v4 = theArray;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    v6 = Count;
    v7 = theArray;
    if (theArray)
    {
      v8 = CFArrayGetCount(theArray);
      if (!v6)
        goto LABEL_28;
    }
    else
    {
      v8 = 0;
      if (!Count)
        goto LABEL_28;
    }
    v9 = 0;
    v10 = a1 + 16;
    do
    {
      if (v4 == v7 && v9 == v8)
        break;
      v11 = applesauce::CF::details::at_to<long>(v4, v9);
      v12 = (*(float (**)(uint64_t, const __CFBoolean *))(*(_QWORD *)v10 + 104))(v10, v11);
      v13 = v12;
      v14 = v28;
      if (v28 >= v29)
      {
        v16 = (float *)__p;
        v17 = ((char *)v28 - (_BYTE *)__p) >> 2;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v19 = (char *)v29 - (_BYTE *)__p;
        if (((char *)v29 - (_BYTE *)__p) >> 1 > v18)
          v18 = v19 >> 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v29, v20);
          v16 = (float *)__p;
          v14 = v28;
        }
        else
        {
          v21 = 0;
        }
        v22 = (float *)&v21[4 * v17];
        *v22 = v13;
        v15 = v22 + 1;
        while (v14 != v16)
        {
          v23 = *((_DWORD *)v14-- - 1);
          *((_DWORD *)v22-- - 1) = v23;
        }
        __p = v22;
        v28 = v15;
        v29 = (float *)&v21[4 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v28 = v12;
        v15 = v14 + 1;
      }
      v28 = v15;
      ++v9;
    }
    while (v9 != v6);
  }
LABEL_28:
  CFArray = applesauce::CF::details::make_CFArrayRef<float>(&__p);
  v25 = CFRetain(CFArray);
  if (CFArray)
    CFRelease(CFArray);
  if (__p)
  {
    v28 = (float *)__p;
    operator delete(__p);
  }
  if (theArray)
    CFRelease(theArray);
  return v25;
}

void sub_191C84BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, uint64_t a13, const void *a14)
{
  applesauce::CF::ArrayRef::~ArrayRef(&a10);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  applesauce::CF::ArrayRef::~ArrayRef(&a14);
  _Unwind_Resume(a1);
}

uint64_t CoreLMGetConditionalProbabilitiesOverVocabulary(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 96))(a1 + 16);
}

CFArrayRef CoreLMCopyConditionalProbabilitiesOverVocabulary(uint64_t a1)
{
  CFArrayRef CFArray;
  void *__p[3];

  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)(a1 + 16) + 88))(__p, a1 + 16);
  CFArray = applesauce::CF::details::make_CFArrayRef<float>(__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return CFArray;
}

void sub_191C84C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreLMReset(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 48))(a1 + 16);
}

uint64_t CoreLMClear(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 40))(a1 + 16);
}

uint64_t CoreLMCreateCopy(uint64_t a1)
{
  unsigned __int8 v2;

  v2 = 1;
  return CFWrapper<CoreLanguageModelWithState,corelm::LanguageModelWithState>::create<corelm::LanguageModelWithState,corelm::LanguageModelWithState&,BOOL>((const corelm::LanguageModelWithState *)(a1 + 16), &v2);
}

uint64_t CFWrapper<CoreLanguageModelWithState,corelm::LanguageModelWithState>::create<corelm::LanguageModelWithState,corelm::LanguageModelWithState&,BOOL>(const corelm::LanguageModelWithState *a1, unsigned __int8 *a2)
{
  uint64_t Instance;

  if (CFWrapper<CoreLanguageModelWithState,corelm::LanguageModelWithState>::s_once != -1)
    dispatch_once(&CFWrapper<CoreLanguageModelWithState,corelm::LanguageModelWithState>::s_once, &__block_literal_global_224);
  Instance = _CFRuntimeCreateInstance();
  corelm::LanguageModelWithState::LanguageModelWithState((corelm::LanguageModelWithState *)(Instance + 16), a1, *a2);
  return Instance;
}

uint64_t CoreLMCreateCopyState(uint64_t a1)
{
  unsigned __int8 v2;

  v2 = 0;
  return CFWrapper<CoreLanguageModelWithState,corelm::LanguageModelWithState>::create<corelm::LanguageModelWithState,corelm::LanguageModelWithState&,BOOL>((const corelm::LanguageModelWithState *)(a1 + 16), &v2);
}

CFDictionaryRef CoreLMCopyPredictions(uint64_t a1, CFTypeRef cf)
{
  const __CFDictionary *v4;
  const __CFBoolean *v5;
  char v6;
  const __CFBoolean *v7;
  char v8;
  const __CFDictionary *v9;
  int v10;
  _DWORD *v11;
  const void *v12;
  char **v13;
  char *v14;
  char **v15;
  BOOL v16;
  CFDictionaryRef CFDictionaryRef;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  const __CFDictionary *v22;
  int v23;
  uint64_t v24;
  int v25;
  const __CFDictionary *v26;
  const __CFDictionary *v27;
  const __CFDictionary *v28;
  uint64_t v29;
  int v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  std::runtime_error *exception;
  std::runtime_error *v35;
  std::runtime_error *v36;
  std::runtime_error *v37;
  char **v38;
  char *v39[2];
  CFTypeRef cfa;
  const __CFDictionary **v41[3];
  const __CFDictionary ***v42;

  if (cf)
    CFRetain(cf);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cfa, cf);
  if (!cfa)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = applesauce::CF::details::at_key<__CFString const* const&>((const __CFDictionary *)cfa, (const void **)&kCoreLMSamplingMethodKey);
  if (!cfa)
  {
    v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v35, "Could not construct");
    __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = applesauce::CF::details::find_at_key_or_optional<unsigned long,__CFString const* const&>((const __CFDictionary *)cfa, (const void **)&kCoreLMSamplingMaxLengthKey);
  if (!cfa)
  {
    v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v36, "Could not construct");
    __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = v5;
  v8 = v6;
  v41[0] = (const __CFDictionary **)&cfa;
  v9 = applesauce::CF::DictionaryRef_proxy::at_as<int,__CFString const* const&>(v41, (const void **)&kCoreLMSamplingNumberKey);
  if (!v4)
  {
    v18 = _nlpDefaultLog();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      CoreLMCopyPredictions_cold_1();
    goto LABEL_27;
  }
  if (!v8)
  {
    v19 = _nlpDefaultLog();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      CoreLMCopyPredictions_cold_2();
    goto LABEL_27;
  }
  v10 = (int)v9;
  if (((unint64_t)v9 & 0xFF00000000) == 0)
  {
    v20 = _nlpDefaultLog();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      CoreLMCopyPredictions_cold_3();
    goto LABEL_27;
  }
  if (!CFEqual(v4, CFSTR("kCoreLMSamplingMethodGREEDY")))
  {
    if (CFEqual(v4, CFSTR("kCoreLMSamplingMethodTOPK")))
    {
      if (!cfa)
      {
        v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v37, "Could not construct");
        __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v41[0] = (const __CFDictionary **)&cfa;
      v22 = applesauce::CF::DictionaryRef_proxy::at_as<int,__CFString const* const&>(v41, (const void **)&kCoreLMSamplingTopKKey);
      if (((unint64_t)v22 & 0xFF00000000) != 0)
      {
        v23 = (int)v22;
        v24 = operator new();
        v11 = (_DWORD *)v24;
        *(_QWORD *)v24 = &unk_1E2DF1650;
        if (v23 <= 0)
          v25 = 300;
        else
          v25 = v23;
        *(_DWORD *)(v24 + 8) = v25;
        *(_DWORD *)(v24 + 12) = v10;
        *(_DWORD *)(v24 + 16) = 1065353216;
        goto LABEL_11;
      }
      v31 = _nlpDefaultLog();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        CoreLMCopyPredictions_cold_6();
    }
    else if (CFEqual(v4, CFSTR("kCoreLMSamplingMethodTOPP")))
    {
      v41[0] = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&cfa);
      v26 = applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const* const&>(v41, (const void **)&kCoreLMSamplingTopPKey);
      v41[0] = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&cfa);
      v27 = applesauce::CF::DictionaryRef_proxy::at_as<int,__CFString const* const&>(v41, (const void **)&kCoreLMSamplingTopKKey);
      if (((unint64_t)v26 & 0xFF00000000) != 0)
      {
        v28 = v27;
        v29 = operator new();
        v11 = (_DWORD *)v29;
        if (((unint64_t)v28 & 0xFF00000000) != 0)
          v30 = (int)v28;
        else
          v30 = 0;
        *(_QWORD *)v29 = &unk_1E2DF1650;
        if (v30 <= 0)
          v30 = 300;
        *(_DWORD *)(v29 + 8) = v30;
        *(_DWORD *)(v29 + 12) = v10;
        *(_DWORD *)(v29 + 16) = (_DWORD)v26;
        goto LABEL_11;
      }
      v33 = _nlpDefaultLog();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        CoreLMCopyPredictions_cold_5();
    }
    else
    {
      v32 = _nlpDefaultLog();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        CoreLMCopyPredictions_cold_4();
    }
LABEL_27:
    CFDictionaryRef = 0;
    goto LABEL_28;
  }
  v11 = (_DWORD *)operator new();
  *(_QWORD *)v11 = &unk_1E2DF1678;
  v11[2] = v10;
LABEL_11:
  LOBYTE(v41[0]) = 1;
  v12 = (const void *)CFWrapper<CoreLanguageModelWithState,corelm::LanguageModelWithState>::create<corelm::LanguageModelWithState,corelm::LanguageModelWithState&,BOOL>((const corelm::LanguageModelWithState *)(a1 + 16), (unsigned __int8 *)v41);
  (*(void (**)(char ***__return_ptr, _DWORD *, uint64_t, const __CFBoolean *))(*(_QWORD *)v11 + 16))(&v38, v11, (uint64_t)v12 + 16, v7);
  if (v12)
    CFRelease(v12);
  memset(v41, 0, sizeof(v41));
  std::vector<applesauce::CF::TypeRefPair>::reserve((uint64_t *)v41, (unint64_t)v39[1]);
  v13 = v38;
  if (v38 != v39)
  {
    do
    {
      std::vector<applesauce::CF::TypeRefPair>::emplace_back<std::string const&,float const&>((uint64_t *)v41, (const UInt8 *)v13 + 32, (int *)v13 + 14);
      v14 = v13[1];
      if (v14)
      {
        do
        {
          v15 = (char **)v14;
          v14 = *(char **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (char **)v13[2];
          v16 = *v15 == (char *)v13;
          v13 = v15;
        }
        while (!v16);
      }
      v13 = v15;
    }
    while (v15 != v39);
  }
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((void ***)v41);
  v42 = v41;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  std::__tree<std::string>::destroy((uint64_t)&v38, v39[0]);
  (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
LABEL_28:
  if (cfa)
    CFRelease(cfa);
  return CFDictionaryRef;
}

void sub_191C85248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

const __CFDictionary *applesauce::CF::DictionaryRef_proxy::at_as<int,__CFString const* const&>(const __CFDictionary ***a1, const void **a2)
{
  const __CFDictionary *result;

  result = applesauce::CF::details::at_key<__CFString const* const&>(**a1, a2);
  if (result)
    return (const __CFDictionary *)applesauce::CF::convert_as<int,0>(result);
  return result;
}

const __CFDictionary *applesauce::CF::DictionaryRef_proxy::at_as<float,__CFString const* const&>(const __CFDictionary ***a1, const void **a2)
{
  const __CFDictionary *result;

  result = applesauce::CF::details::at_key<__CFString const* const&>(**a1, a2);
  if (result)
    return (const __CFDictionary *)applesauce::CF::convert_as<float,0>(result);
  return result;
}

BOOL CoreLMSetTemperature(uint64_t a1, float a2)
{
  uint64_t v3;
  _BOOL8 result;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 112))(a1 + 16);
  result = corelm::util::contains<std::string,char const*,void>((uint64_t *)(v3 + 24), "temperature");
  if (result)
    *(float *)(v3 + 128) = 1.0 / a2;
  return result;
}

uint64_t CoreLMGetProbabilitiesForSequences(uint64_t a1, CFTypeRef cf, _BOOL8 a3)
{
  const __CFDictionary *v6;
  uint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v10;
  __n128 cfa;
  uint64_t v12;
  __n128 v13;
  CFTypeRef v14;
  __n128 *p_cfa;

  if (cf)
    CFRetain(cf);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v14, cf);
  if (!v14)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  cfa = 0uLL;
  v12 = 0;
  applesauce::CF::convert_or<std::vector<std::vector<long>>,0>((const __CFArray *)v14, &cfa, &v13);
  p_cfa = &cfa;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_cfa);
  if (a3)
  {
    CFRetain((CFTypeRef)a3);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cfa, (CFTypeRef)a3);
    if (!cfa.n128_u64[0])
    {
      v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v10, "Could not construct");
      __cxa_throw(v10, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v6 = applesauce::CF::details::at_key<__CFString const* const&>((const __CFDictionary *)cfa.n128_u64[0], (const void **)&kCoreLMAttentionTypeKey);
    if (v6)
      a3 = CFEqual(v6, CFSTR("kCoreLMAttentionTypeAutoencoding")) != 0;
    else
      a3 = 0;
    if (cfa.n128_u64[0])
      CFRelease((CFTypeRef)cfa.n128_u64[0]);
  }
  v7 = (*(uint64_t (**)(uint64_t, __n128 *, _BOOL8))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, &v13, a3);
  cfa.n128_u64[0] = (unint64_t)&v13;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&cfa);
  if (v14)
    CFRelease(v14);
  return v7;
}

void sub_191C85520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, const void *a15)
{
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&a9);
  a9 = (void **)&a12;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  applesauce::CF::ArrayRef::~ArrayRef(&a15);
  _Unwind_Resume(a1);
}

CFDictionaryRef CoreLMCopyBatchingConfig(uint64_t a1)
{
  _QWORD **v1;
  _QWORD *v2;
  _QWORD **v3;
  BOOL v4;
  CFDictionaryRef CFDictionaryRef;
  _QWORD **v7;
  _QWORD *v8[2];
  void **v9[3];
  void ***v10;

  (*(void (**)(_QWORD ***__return_ptr, uint64_t))(*(_QWORD *)(a1 + 16) + 136))(&v7, a1 + 16);
  memset(v9, 0, sizeof(v9));
  std::vector<applesauce::CF::TypeRefPair>::reserve((uint64_t *)v9, (unint64_t)v8[1]);
  v1 = v7;
  if (v7 != v8)
  {
    do
    {
      std::vector<applesauce::CF::TypeRefPair>::emplace_back<unsigned long const&,std::vector<unsigned long> const&>((uint64_t *)v9, (uint64_t *)v1 + 4, (void ****)v1 + 5);
      v2 = v1[1];
      if (v2)
      {
        do
        {
          v3 = (_QWORD **)v2;
          v2 = (_QWORD *)*v2;
        }
        while (v2);
      }
      else
      {
        do
        {
          v3 = (_QWORD **)v1[2];
          v4 = *v3 == v1;
          v1 = v3;
        }
        while (!v4);
      }
      v1 = v3;
    }
    while (v3 != v8);
  }
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef(v9);
  v10 = v9;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::destroy((uint64_t)&v7, v8[0]);
  return CFDictionaryRef;
}

void sub_191C85660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, char a13)
{
  uint64_t v13;

  *(_QWORD *)(v13 - 24) = &a13;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 24));
  std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

CFTypeRef CoreLMCopyPreprocessedText(uint64_t a1, CFTypeRef cf)
{
  const __CFString *v4;
  CFTypeID TypeID;
  uint64_t v6;
  std::string *v7;
  std::string::size_type size;
  CFStringRef v9;
  CFStringRef v10;
  CFTypeRef v11;
  std::runtime_error *exception;
  std::runtime_error *v14;
  std::string __p;
  CFTypeRef cfa;
  std::string v17;
  std::string v18;

  if (cf)
    CFRetain(cf);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cfa, cf);
  if (!cfa)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v4 = (const __CFString *)cfa;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v18 = __p;
  if (v4 && (TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(v4)))
  {
    applesauce::CF::details::CFString_get_value<false>(v4, (uint64_t)&v17);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = v18;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (cfa)
    CFRelease(cfa);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 112))(a1 + 16);
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *))(**(_QWORD **)(v6 + 120) + 72))(&v18, *(_QWORD *)(v6 + 120), &v17);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v18;
  else
    v7 = (std::string *)v18.__r_.__value_.__r.__words[0];
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  else
    size = v18.__r_.__value_.__l.__size_;
  v9 = CFStringCreateWithBytes(0, (const UInt8 *)v7, size, 0x8000100u, 0);
  v10 = v9;
  cfa = v9;
  if (!v9)
  {
    v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
    __cxa_throw(v14, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v11 = CFRetain(v9);
  CFRelease(v10);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return v11;
}

void sub_191C85888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

float CoreLMTerminationProbabilityForText(uint64_t a1, const void *a2)
{
  CFTypeRef v4;
  CFIndex Count;
  CFDictionaryRef v6;
  CFTypeRef v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFArrayRef v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  CFTypeRef v21;
  const __CFArray *v22;
  unint64_t v23;
  uint64_t v24;
  float v25;
  std::runtime_error *v26;
  std::runtime_error *v28;
  std::runtime_error *exception;
  std::runtime_error *v30;
  std::runtime_error *v31;
  _QWORD v32[3];
  uint64_t *v33[3];
  CFTypeRef cf;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *__p;
  _BYTE *v39;
  char v40[8];
  _QWORD *v41;
  const void *v42;
  const __CFArray *v43;
  CFTypeRef *p_cf;
  CFTypeRef *v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = CoreLMCopyVocabulary(a1);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v43, v4);
  if (!v43)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Count = CFArrayGetCount(v43);
  v6 = CoreLMCopyBatchingConfig(a1);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v42, v6);
  if (!v42)
  {
    v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v30, "Could not construct");
    __cxa_throw(v30, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::convert_to<std::map<unsigned long,std::vector<unsigned long>>,0>(v42, (uint64_t)v40);
  v7 = CoreLMCopyTokenIdsForText(a1, a2);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&cf, v7);
  if (!cf)
  {
    v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v31, "Could not construct");
    __cxa_throw(v31, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::convert_to<std::vector<long>,0>(cf, (uint64_t)&__p);
  if (cf)
    CFRelease(cf);
  v37 = 0;
  v8 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 112))(a1 + 16) + 120);
  if (*(char *)(v8 + 31) < 0)
  {
    v9 = *(_QWORD *)(v8 + 8);
    v10 = *(_QWORD *)(v8 + 16);
  }
  else
  {
    v9 = v8 + 8;
    v10 = *(unsigned __int8 *)(v8 + 31);
  }
  v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v9, v10);
  std::vector<long>::insert((uint64_t)&__p, (char *)__p, (char *)&v37);
  cf = 0;
  v35 = 0;
  v36 = 0;
  v11 = std::vector<std::vector<long>>::__push_back_slow_path<std::vector<long> const&>((uint64_t *)&cf, (uint64_t)&__p);
  v12 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 112);
  v35 = v11;
  v13 = *(_QWORD *)(v12(a1 + 16) + 120);
  if (*(char *)(v13 + 103) < 0)
  {
    v14 = *(_QWORD *)(v13 + 80);
    v15 = *(_QWORD *)(v13 + 88);
  }
  else
  {
    v14 = v13 + 80;
    v15 = *(unsigned __int8 *)(v13 + 103);
  }
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v14, v15);
  std::map<unsigned long,std::vector<unsigned long>>::map[abi:ne180100]((uint64_t *)v33, (uint64_t)v40);
  corelm::util::paddingBatchedContext<long>((uint64_t *)&cf, v33, v16);
  std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::destroy((uint64_t)v33, v33[1]);
  v45 = 0;
  v46 = 0;
  p_cf = 0;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(&p_cf, *(const void **)cf, *((_QWORD *)cf + 1), (uint64_t)(*((_QWORD *)cf + 1) - *(_QWORD *)cf) >> 3);
  v32[0] = &p_cf;
  v32[1] = 1;
  v17 = applesauce::CF::details::make_CFArrayRef<std::vector<long>>((uint64_t)v32);
  v32[2] = v17;
  v18 = CoreLMGetProbabilitiesForSequences(a1, v17, 0);
  if (v17)
    CFRelease(v17);
  if (p_cf)
  {
    v45 = p_cf;
    operator delete(p_cf);
  }
  v20 = __p;
  v19 = v39;
  v21 = CoreLMCopyTokenIdsForText(a1, CFSTR(". ! ? "));
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&p_cf, v21);
  v22 = (const __CFArray *)p_cf;
  if (!p_cf)
  {
LABEL_21:
    v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "Could not construct");
    __cxa_throw(v26, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v23 = 0;
  v24 = v18 + 4 * (((v19 - v20) >> 3) - 1) * Count;
  v25 = 0.0;
  while (CFArrayGetCount(v22) > v23)
  {
    if (!p_cf)
    {
      v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v28, "Could not construct");
      __cxa_throw(v28, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v25 = v25
        + *(float *)(v24 + 4 * (_QWORD)applesauce::CF::details::at_to<unsigned long>((const __CFArray *)p_cf, v23++));
    v22 = (const __CFArray *)p_cf;
    if (!p_cf)
      goto LABEL_21;
  }
  if (p_cf)
    CFRelease(p_cf);
  p_cf = &cf;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_cf);
  if (__p)
  {
    v39 = __p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::destroy((uint64_t)v40, v41);
  if (v42)
    CFRelease(v42);
  if (v43)
    CFRelease(v43);
  return v25;
}

void sub_191C85CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, const void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,_QWORD *a26)
{
  void *v26;
  uint64_t v27;

  __cxa_free_exception(v26);
  applesauce::CF::ArrayRef::~ArrayRef(&a18);
  std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::destroy((uint64_t)&a25, a26);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v27 - 112));
  applesauce::CF::ArrayRef::~ArrayRef((const void **)(v27 - 104));
  _Unwind_Resume(a1);
}

char *std::vector<long>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = std::vector<long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_191C86058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void corelm::util::paddingBatchedContext<long>(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  const void *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  void **v16;
  void *v17;
  uint64_t *v18;
  uint64_t *v19;
  BOOL v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  void *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *__p;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t *v53;

  v51 = 0;
  v52 = a3;
  __p = 0;
  v50 = 0;
  v5 = a2 + 1;
  v6 = *a2;
  if (*a2 == (uint64_t *)(a2 + 1))
  {
    v22 = 0;
    v21 = 0;
  }
  else
  {
    do
    {
      v7 = (const void *)v6[5];
      v45 = (void *)v6[4];
      v47 = 0;
      v48 = 0;
      v46 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v46, v7, v6[6], (v6[6] - (uint64_t)v7) >> 3);
      v8 = v50;
      if (v50 >= v51)
      {
        v10 = (char *)__p;
        v11 = (v50 - (_BYTE *)__p) >> 3;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v13 = v51 - (_BYTE *)__p;
        if ((v51 - (_BYTE *)__p) >> 2 > v12)
          v12 = v13 >> 2;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v51, v14);
          v10 = (char *)__p;
          v8 = v50;
        }
        else
        {
          v15 = 0;
        }
        v16 = (void **)&v15[8 * v11];
        *v16 = v45;
        v9 = (char *)(v16 + 1);
        while (v8 != v10)
        {
          v17 = (void *)*((_QWORD *)v8 - 1);
          v8 -= 8;
          *--v16 = v17;
        }
        __p = v16;
        v50 = v9;
        v51 = &v15[8 * v14];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *(_QWORD *)v50 = v45;
        v9 = v8 + 8;
      }
      v50 = v9;
      if (v46)
      {
        v47 = v46;
        operator delete(v46);
      }
      v18 = (uint64_t *)v6[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (uint64_t *)v6[2];
          v20 = *v19 == (_QWORD)v6;
          v6 = v19;
        }
        while (!v20);
      }
      v6 = v19;
    }
    while (v19 != (uint64_t *)v5);
    v21 = (unint64_t *)__p;
    v22 = (unint64_t *)v50;
  }
  v23 = 126 - 2 * __clz(v22 - v21);
  if (v22 == v21)
    v24 = 0;
  else
    v24 = v23;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *,false>(v21, v22, (uint64_t)&v45, v24, 1);
  v25 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v44 = v25;
  v26 = (unint64_t *)__p;
  if (__p != v50)
  {
    v27 = v25;
    do
    {
      v28 = *v26;
      if (v25 <= *v26)
      {
        v44 = *v26;
        v27 = v28;
      }
      ++v26;
    }
    while (v26 != (unint64_t *)v50);
    if (v27 > v25)
    {
      do
      {
        v45 = 0;
        v46 = 0;
        v47 = 0;
        std::vector<std::vector<long>>::push_back[abi:ne180100](a1, (uint64_t)&v45);
        if (v45)
        {
          v46 = v45;
          operator delete(v45);
        }
      }
      while (v27 > 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
    }
  }
  v53 = &v44;
  v29 = std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a2, &v44, (uint64_t)&std::piecewise_construct, (uint64_t **)&v53);
  v46 = 0;
  v47 = 0;
  v45 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v45, (const void *)v29[5], v29[6], (v29[6] - v29[5]) >> 3);
  v30 = 126 - 2 * __clz(((_BYTE *)v46 - (_BYTE *)v45) >> 3);
  if (v46 == v45)
    v31 = 0;
  else
    v31 = v30;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<unsigned long> &,unsigned long *,false>((unint64_t *)v45, (unint64_t *)v46, (uint64_t)&v53, v31, 1);
  v32 = *a1;
  v33 = a1[1];
  v34 = 0;
  if (v33 != *a1)
  {
    v35 = (v33 - *a1) / 24;
    if (v35 <= 1)
      v35 = 1;
    v36 = (_QWORD *)(v32 + 8);
    do
    {
      if (v34 <= (uint64_t)(*v36 - *(v36 - 1)) >> 3)
        v34 = (uint64_t)(*v36 - *(v36 - 1)) >> 3;
      v36 += 3;
      --v35;
    }
    while (v35);
  }
  v37 = v45;
  if (v45 == v46)
  {
    v38 = v34;
  }
  else
  {
    v38 = v34;
    v39 = (unint64_t *)v45;
    do
    {
      v41 = *v39++;
      v40 = v41;
      if (v34 <= v41)
        v38 = v40;
    }
    while (v39 != v46);
  }
  if (v33 != v32)
  {
    v42 = 0;
    v43 = 0;
    do
    {
      std::vector<long>::resize(v32 + v42, v38, &v52);
      ++v43;
      v32 = *a1;
      v42 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v43);
    v37 = v45;
  }
  if (v37)
  {
    v46 = v37;
    operator delete(v37);
  }
  if (__p)
  {
    v50 = (char *)__p;
    operator delete(__p);
  }
}

void sub_191C8644C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

corelm::util::Directory *corelm::util::Directory::Directory(corelm::util::Directory *this, const corelm::util::Directory *a2)
{
  std::string *v3;
  std::string __p;

  if (*((char *)a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  else
    __p = *(std::string *)((char *)a2 + 8);
  *(_QWORD *)this = &unk_1E2DF1AB8;
  v3 = (std::string *)((char *)this + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v3, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 3) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  *(_QWORD *)this = &unk_1E2DF1AF8;
  return this;
}

void sub_191C86558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<long,std::string>,std::__map_value_compare<long,std::__value_type<long,std::string>,std::less<long>,true>,std::allocator<std::__value_type<long,std::string>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<long,std::string>,std::__map_value_compare<long,std::__value_type<long,std::string>,std::less<long>,true>,std::allocator<std::__value_type<long,std::string>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<long,std::string>,std::__map_value_compare<long,std::__value_type<long,std::string>,std::less<long>,true>,std::allocator<std::__value_type<long,std::string>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

uint64_t *std::map<unsigned long,std::vector<unsigned long>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned long,std::vector<unsigned long>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__tree_node<std::__value_type<unsigned long,std::vector<unsigned long>>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_191C86600(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned long,std::vector<unsigned long>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__tree_node<std::__value_type<unsigned long,std::vector<unsigned long>>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,std::vector<unsigned long>> const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,std::vector<unsigned long>> const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__find_equal<unsigned long>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__construct_node<std::pair<unsigned long const,std::vector<unsigned long>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__find_equal<unsigned long>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<__CFString const*>(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t *v3;
  CFArrayRef CFArray;
  void *__p;
  void *v7;
  uint64_t v8;

  v1 = *(uint64_t **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = (uint64_t *)(*(_QWORD *)a1 + 8 * v2);
  v7 = 0;
  v8 = 0;
  __p = 0;
  std::vector<void const*>::__init_with_size[abi:ne180100]<__CFString const* const*,__CFString const* const*>((char *)&__p, v1, v3, v2);
  CFArray = applesauce::CF::details::make_CFArrayRef<void const*>((uint64_t)&__p);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return CFArray;
}

void sub_191C8691C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<void const*>(uint64_t a1)
{
  CFArrayRef result;
  std::runtime_error *exception;

  result = CFArrayCreate(0, *(const void ***)a1, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3, MEMORY[0x1E0C9B378]);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_191C8699C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<void const*>::__init_with_size[abi:ne180100]<__CFString const* const*,__CFString const* const*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_191C86A04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *applesauce::CF::details::at_to<std::string>@<X0>(const __CFArray *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const __CFString *ValueAtIndex;
  std::runtime_error *exception;

  if (!a1 || CFArrayGetCount(a1) <= a2 || (ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, a2)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return applesauce::CF::convert_to<std::string,0>(ValueAtIndex, a3);
}

void sub_191C86AA4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *applesauce::CF::not_found@<X0>(std::runtime_error *a1@<X8>)
{
  return std::runtime_error::runtime_error(a1, "Could not find item");
}

BOOL applesauce::CF::details::has_key<std::string &>(_BOOL8 a1, const UInt8 *a2)
{
  CFIndex v3;
  CFIndex v4;
  CFStringRef v5;
  CFStringRef v6;
  std::runtime_error *exception;

  v3 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v4 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v4 = v3;
  }
  v5 = CFStringCreateWithBytes(0, a2, v4, 0x8000100u, 0);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = v5;
  if (a1)
    a1 = CFDictionaryContainsKey((CFDictionaryRef)a1, v5) != 0;
  CFRelease(v6);
  return a1;
}

void sub_191C86B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

_QWORD *applesauce::CF::details::find_at_key<std::string,__CFString const* const&>@<X0>(const __CFDictionary *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  const __CFString *v4;
  std::runtime_error *exception;

  v4 = (const __CFString *)applesauce::CF::details::at_key<__CFString const* const&>(a1, a2);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return applesauce::CF::convert_to<std::string,0>(v4, a3);
}

void sub_191C86BF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const __CFDictionary *applesauce::CF::details::at_key<__CFString const* const&>(const __CFDictionary *result, const void **a2)
{
  const void *v2;

  if (result)
  {
    v2 = *a2;
    if (v2)
      return (const __CFDictionary *)CFDictionaryGetValue(result, v2);
    else
      return 0;
  }
  return result;
}

const __CFDictionary *applesauce::CF::details::has_key<__CFString const* const&>(const __CFDictionary *result, const void **a2)
{
  const void *v2;

  if (result)
  {
    v2 = *a2;
    if (v2)
      return (const __CFDictionary *)(CFDictionaryContainsKey(result, v2) != 0);
    else
      return 0;
  }
  return result;
}

const __CFDictionary *applesauce::CF::details::find_at_key<__CFString const*,__CFString const* const&>(const __CFDictionary *a1, const void **a2)
{
  const __CFDictionary *result;
  std::runtime_error *exception;

  result = applesauce::CF::details::at_key<__CFString const* const&>(a1, a2);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_191C86CB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

corelm::Custom1PreProcessor *corelm::Custom1PreProcessor::Custom1PreProcessor(corelm::Custom1PreProcessor *this)
{
  char *v2;
  uint64_t i;
  const void *v5[3];
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];
  _QWORD v14[4];

  v14[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E2DF1748;
  v2 = (char *)this + 8;
  std::string::basic_string[abi:ne180100]<0>(v5, "The");
  std::string::basic_string[abi:ne180100]<0>(v6, "I");
  std::string::basic_string[abi:ne180100]<0>(v7, "I'll");
  std::string::basic_string[abi:ne180100]<0>(v8, "I'm");
  std::string::basic_string[abi:ne180100]<0>(v9, "I've");
  std::string::basic_string[abi:ne180100]<0>(v10, "I'd");
  std::string::basic_string[abi:ne180100]<0>(v11, "I’ll");
  std::string::basic_string[abi:ne180100]<0>(v12, "I’m");
  std::string::basic_string[abi:ne180100]<0>(v13, "I’ve");
  std::string::basic_string[abi:ne180100]<0>(v14, "I’d");
  std::set<std::string>::set[abi:ne180100]((uint64_t)v2, v5, 10);
  for (i = 0; i != -30; i -= 3)
  {
    if (SHIBYTE(v14[i + 2]) < 0)
      operator delete((void *)v14[i]);
  }
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 4, "_U_CAP_");
  *((_QWORD *)this + 7) = NLTokenizerCreate(0, 0x10000, 0);
  return this;
}

void sub_191C86E7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v3);
  std::__tree<std::string>::destroy(v2, *(char **)(v1 + 16));
  _Unwind_Resume(a1);
}

corelm::Custom2PreProcessor *corelm::Custom2PreProcessor::Custom2PreProcessor(corelm::Custom2PreProcessor *this)
{
  char *v2;
  uint64_t i;
  uint64_t v4;
  const void *v6[3];
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[3];
  _QWORD v16[3];
  _QWORD v17[3];
  _QWORD v18[3];
  _QWORD v19[3];
  _QWORD v20[3];
  _QWORD v21[3];
  _QWORD v22[3];
  _QWORD v23[3];
  _QWORD v24[3];
  _QWORD v25[3];
  _QWORD v26[3];
  _QWORD v27[3];
  _QWORD v28[3];
  _QWORD v29[4];

  v29[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &unk_1E2DF1778;
  v2 = (char *)this + 8;
  std::string::basic_string[abi:ne180100]<0>(v6, "I'll");
  std::string::basic_string[abi:ne180100]<0>(v7, "I'm");
  std::string::basic_string[abi:ne180100]<0>(v8, "I've");
  std::string::basic_string[abi:ne180100]<0>(v9, "I'd");
  std::string::basic_string[abi:ne180100]<0>(v10, "I’ll");
  std::string::basic_string[abi:ne180100]<0>(v11, "I’m");
  std::string::basic_string[abi:ne180100]<0>(v12, "I’ve");
  std::string::basic_string[abi:ne180100]<0>(v13, "I’d");
  std::set<std::string>::set[abi:ne180100]((uint64_t)v2, v6, 8);
  for (i = 0; i != -24; i -= 3)
  {
    if (SHIBYTE(v13[i + 2]) < 0)
      operator delete((void *)v13[i]);
  }
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 4, "_U_CAP_");
  std::string::basic_string[abi:ne180100]<0>(v6, "it's");
  std::string::basic_string[abi:ne180100]<0>(v7, "that's");
  std::string::basic_string[abi:ne180100]<0>(v8, "he's");
  std::string::basic_string[abi:ne180100]<0>(v9, "there's");
  std::string::basic_string[abi:ne180100]<0>(v10, "she's");
  std::string::basic_string[abi:ne180100]<0>(v11, "what's");
  std::string::basic_string[abi:ne180100]<0>(v12, "let's");
  std::string::basic_string[abi:ne180100]<0>(v13, "who's");
  std::string::basic_string[abi:ne180100]<0>(v14, "here's");
  std::string::basic_string[abi:ne180100]<0>(v15, "how's");
  std::string::basic_string[abi:ne180100]<0>(v16, "where's");
  std::string::basic_string[abi:ne180100]<0>(v17, "else's");
  std::string::basic_string[abi:ne180100]<0>(v18, "it’s");
  std::string::basic_string[abi:ne180100]<0>(v19, "that’s");
  std::string::basic_string[abi:ne180100]<0>(v20, "he’s");
  std::string::basic_string[abi:ne180100]<0>(v21, "there’s");
  std::string::basic_string[abi:ne180100]<0>(v22, "she’s");
  std::string::basic_string[abi:ne180100]<0>(v23, "what’s");
  std::string::basic_string[abi:ne180100]<0>(v24, "let’s");
  std::string::basic_string[abi:ne180100]<0>(v25, "who’s");
  std::string::basic_string[abi:ne180100]<0>(v26, "here’s");
  std::string::basic_string[abi:ne180100]<0>(v27, "how’s");
  std::string::basic_string[abi:ne180100]<0>(v28, "where’s");
  std::string::basic_string[abi:ne180100]<0>(v29, "else’s");
  std::set<std::string>::set[abi:ne180100]((uint64_t)this + 56, v6, 24);
  v4 = 72;
  do
  {
    if (SHIBYTE(v6[v4 - 1]) < 0)
      operator delete((void *)v6[v4 - 3]);
    v4 -= 3;
  }
  while (v4 * 8);
  *((_QWORD *)this + 10) = NLTokenizerCreate(0, 0x10000, 0);
  return this;
}

void sub_191C872E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;

  std::__tree<std::string>::destroy(v4, *(char **)(v1 + 64));
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v3);
  std::__tree<std::string>::destroy(v2, *(char **)(v1 + 16));
  _Unwind_Resume(a1);
}

corelm::Custom2PreProcessor *corelm::Custom2ASRPreProcessor::Custom2ASRPreProcessor(corelm::Custom2ASRPreProcessor *this)
{
  uint64_t v1;
  const void **v2;
  corelm::Custom2PreProcessor *v4;
  char *v5[2];
  char *v6[2];
  char *v7[2];
  char *v8[2];
  char *v9[2];
  char *v10[2];
  char *v11[2];
  char *v12[2];
  char *v13[2];
  char *v14[2];
  char *v15[2];
  char *v16[2];
  char *v17[2];
  char *v18[2];
  char *v19[2];
  char *v20[2];
  char *v21[2];
  char *v22[2];
  char *v23[2];
  char *v24[2];
  char *v25[2];
  char *v26[2];
  char *v27[2];
  char *v28[2];
  char *v29[2];
  char *v30[2];
  char *v31[2];
  char *v32[2];
  char *v33[2];
  char *v34[2];
  char *v35[2];
  char *v36[2];
  char *v37[2];
  char *v38[2];
  char *v39[2];
  char *v40[2];
  char *v41[2];
  char *v42[2];
  char *v43[2];
  char *v44[2];
  char *v45[2];
  char *v46[2];
  char *v47[2];
  char *v48[2];
  char *v49[2];
  char *v50[2];
  char *v51[2];
  char *v52[2];
  char *v53[2];
  char *v54[2];
  char *v55[2];
  char *v56[2];
  char *v57[2];
  char *v58[2];
  char *v59[2];
  char *v60[2];
  char *v61[2];
  char *v62[2];
  char *v63[2];
  const void *v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[8];

  v122[6] = *MEMORY[0x1E0C80C00];
  v4 = corelm::Custom2PreProcessor::Custom2PreProcessor(this);
  *(_QWORD *)v4 = &off_1E2DF1948;
  v63[0] = "\\NT-action";
  v63[1] = "_U_NT00";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v64, v63);
  v62[0] = "\\NT-appcontact";
  v62[1] = "_U_NT01";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v65, v62);
  v61[0] = "\\NT-appname";
  v61[1] = "_U_NT02";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v66, v61);
  v60[0] = "\\NT-appunknown";
  v60[1] = "_U_NT03";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v67, v60);
  v59[0] = "\\NT-appvocab";
  v59[1] = "_U_NT04";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v68, v59);
  v58[0] = "\\NT-artist";
  v58[1] = "_U_NT05";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v69, v58);
  v57[0] = "\\NT-buzz";
  v57[1] = "_U_NT06";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v70, v57);
  v56[0] = "\\NT-calevent";
  v56[1] = "_U_NT07";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v71, v56);
  v55[0] = "\\NT-contact";
  v55[1] = "_U_NT08";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v72, v55);
  v54[0] = "\\NT-correction";
  v54[1] = "_U_NT09";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v73, v54);
  v53[0] = "\\NT-device";
  v53[1] = "_U_NT10";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v74, v53);
  v52[0] = "\\NT-entity";
  v52[1] = "_U_NT11";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v75, v52);
  v51[0] = "\\NT-group";
  v51[1] = "_U_NT12";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v76, v51);
  v50[0] = "\\NT-house";
  v50[1] = "_U_NT13";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v77, v50);
  v49[0] = "\\NT-inline";
  v49[1] = "_U_NT14";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v78, v49);
  v48[0] = "\\NT-location";
  v48[1] = "_U_NT15";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v79, v48);
  v47[0] = "\\NT-notefolder";
  v47[1] = "_U_NT16";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v80, v47);
  v46[0] = "\\NT-notetitle";
  v46[1] = "_U_NT17";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v81, v46);
  v45[0] = "\\NT-payaccount";
  v45[1] = "_U_NT18";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v82, v45);
  v44[0] = "\\NT-photoalbum";
  v44[1] = "_U_NT19";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v83, v44);
  v43[0] = "\\NT-phototag";
  v43[1] = "_U_NT20";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v84, v43);
  v42[0] = "\\NT-playlist";
  v42[1] = "_U_NT21";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v85, v42);
  v41[0] = "\\NT-room";
  v41[1] = "_U_NT22";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v86, v41);
  v40[0] = "\\NT-savedactivity";
  v40[1] = "_U_NT23";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v87, v40);
  v39[0] = "\\NT-scene";
  v39[1] = "_U_NT24";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v88, v39);
  v38[0] = "\\NT-searchterm";
  v38[1] = "_U_NT25";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v89, v38);
  v37[0] = "\\NT-unknown";
  v37[1] = "_U_NT26";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v90, v37);
  v36[0] = "\\NT-zone";
  v36[1] = "_U_NT27";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v91, v36);
  v35[0] = "\\nt-action";
  v35[1] = "_U_NT00";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v92, v35);
  v34[0] = "\\nt-appcontact";
  v34[1] = "_U_NT01";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v93, v34);
  v33[0] = "\\nt-appname";
  v33[1] = "_U_NT02";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v94, v33);
  v32[0] = "\\nt-appunknown";
  v32[1] = "_U_NT03";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v95, v32);
  v31[0] = "\\nt-appvocab";
  v31[1] = "_U_NT04";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v96, v31);
  v30[0] = "\\nt-artist";
  v30[1] = "_U_NT05";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v97, v30);
  v29[0] = "\\nt-bizname";
  v29[1] = "_U_NT28";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v98, v29);
  v28[0] = "\\nt-buzz";
  v28[1] = "_U_NT06";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v99, v28);
  v27[0] = "\\nt-calevent";
  v27[1] = "_U_NT07";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v100, v27);
  v26[0] = "\\nt-contact";
  v26[1] = "_U_NT08";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v101, v26);
  v25[0] = "\\nt-correction";
  v25[1] = "_U_NT09";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v102, v25);
  v24[0] = "\\nt-device";
  v24[1] = "_U_NT10";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v103, v24);
  v23[0] = "\\nt-entity";
  v23[1] = "_U_NT11";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v104, v23);
  v22[0] = "\\nt-group";
  v22[1] = "_U_NT12";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v105, v22);
  v21[0] = "\\nt-house";
  v21[1] = "_U_NT13";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v106, v21);
  v20[0] = "\\nt-inline";
  v20[1] = "_U_NT14";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v107, v20);
  v19[0] = "\\nt-location";
  v19[1] = "_U_NT15";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v108, v19);
  v18[0] = "\\nt-notefolder";
  v18[1] = "_U_NT16";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v109, v18);
  v17[0] = "\\nt-notetitle";
  v17[1] = "_U_NT17";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v110, v17);
  v16[0] = "\\nt-payaccount";
  v16[1] = "_U_NT18";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v111, v16);
  v15[0] = "\\nt-photoalbum";
  v15[1] = "_U_NT19";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v112, v15);
  v14[0] = "\\nt-phototag";
  v14[1] = "_U_NT20";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v113, v14);
  v13[0] = "\\nt-playlist";
  v13[1] = "_U_NT21";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v114, v13);
  v12[0] = "\\nt-room";
  v12[1] = "_U_NT22";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v115, v12);
  v11[0] = "\\nt-savedactivity";
  v11[1] = "_U_NT23";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v116, v11);
  v10[0] = "\\nt-scene";
  v10[1] = "_U_NT24";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v117, v10);
  v9[0] = "\\nt-searchterm";
  v9[1] = "_U_NT25";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v118, v9);
  v8[0] = "\\nt-spell";
  v8[1] = "_U_NT29";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v119, v8);
  v7[0] = "\\nt-unknown";
  v7[1] = "_U_NT26";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v120, v7);
  v6[0] = "\\nt-widget";
  v6[1] = "_U_NT30";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v121, v6);
  v5[0] = "\\nt-zone";
  v5[1] = "_U_NT27";
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(v122, v5);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v4 + 88, v64, 59);
  v1 = 354;
  do
  {
    v2 = &v64[v1];
    if (SHIBYTE(v64[v1 - 1]) < 0)
      operator delete((void *)*(v2 - 3));
    if (*((char *)v2 - 25) < 0)
      operator delete((void *)*(v2 - 6));
    v1 -= 6;
  }
  while (v1 * 8);
  return v4;
}

void sub_191C87D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, corelm::Custom2PreProcessor *a11)
{
  uint64_t v11;
  uint64_t i;

  for (i = 2784; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v11 + i);
  corelm::Custom2PreProcessor::~Custom2PreProcessor(a11);
  _Unwind_Resume(a1);
}

void sub_191C87ECC()
{
  JUMPOUT(0x191C87EBCLL);
}

uint64_t std::pair<std::string const,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void corelm::Custom2PreProcessor::~Custom2PreProcessor(corelm::Custom2PreProcessor *this)
{
  *(_QWORD *)this = &unk_1E2DF1778;
  NLTokenizerRelease(*((_QWORD **)this + 10));
  std::__tree<std::string>::destroy((uint64_t)this + 56, *((char **)this + 8));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  std::__tree<std::string>::destroy((uint64_t)this + 8, *((char **)this + 2));
}

{
  corelm::Custom2PreProcessor::~Custom2PreProcessor(this);
  JUMPOUT(0x19401E994);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(_QWORD *a1, char **a2)
{
  _QWORD *v4;

  v4 = std::string::basic_string[abi:ne180100]<0>(a1, *a2);
  std::string::basic_string[abi:ne180100]<0>(v4 + 3, a2[1]);
  return a1;
}

void sub_191C87FB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::string>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 48 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_191C88034(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_191C88130(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_191C881C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

CoreNLP::Resource *std::unique_ptr<CoreNLP::Resource>::reset[abi:ne180100](CoreNLP::Resource **a1, CoreNLP::Resource *a2)
{
  CoreNLP::Resource *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CoreNLP::Resource::~Resource(result);
    JUMPOUT(0x19401E994);
  }
  return result;
}

applesauce::CF::URLRef *applesauce::CF::details::find_at_key<applesauce::CF::URLRef,__CFString const* const&>@<X0>(const __CFDictionary *a1@<X0>, const void **a2@<X1>, applesauce::CF::URLRef *a3@<X8>)
{
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  std::runtime_error *exception;

  v4 = applesauce::CF::details::at_key<__CFString const* const&>(a1, a2);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = v4;
  CFRetain(v4);
  return applesauce::CF::URLRef::URLRef(a3, v5);
}

void sub_191C88348(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

applesauce::CF::URLRef *applesauce::CF::URLRef::URLRef(applesauce::CF::URLRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFURLGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return this;
}

void sub_191C883DC(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[34],applesauce::CF::URLRef &>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  const void *v5;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  v5 = *a3;
  if (v5)
    CFRetain(v5);
  *((_QWORD *)a1 + 1) = v5;
  return a1;
}

uint64_t ___ZN9CFWrapperI17CoreLanguageModelN6corelm13LanguageModelEE10cf_type_idEv_block_invoke()
{
  uint64_t result;

  CFWrapper<CoreLanguageModel,corelm::LanguageModel>::s_class = 0;
  *(_QWORD *)algn_1EE21AFD8 = "CoreLanguageModel";
  qword_1EE21AFE0 = 0;
  unk_1EE21AFE8 = 0;
  qword_1EE21AFF0 = (uint64_t)CFWrapper<CoreLanguageModel,corelm::LanguageModel>::cf_finalize;
  unk_1EE21AFF8 = 0u;
  unk_1EE21B008 = 0u;
  result = _CFRuntimeRegisterClass();
  CFWrapper<CoreLanguageModel,corelm::LanguageModel>::s_type_id = result;
  return result;
}

void CFWrapper<CoreLanguageModel,corelm::LanguageModel>::cf_finalize(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  corelm::NeuralNetwork::~NeuralNetwork((char **)(a1 + 16));
}

uint64_t ___ZN9CFWrapperI26CoreLanguageModelWithStateN6corelm22LanguageModelWithStateEE10cf_type_idEv_block_invoke()
{
  uint64_t result;

  CFWrapper<CoreLanguageModelWithState,corelm::LanguageModelWithState>::s_class = 0;
  *(_QWORD *)algn_1EE21B048 = "CoreLanguageModelWithState";
  qword_1EE21B050 = 0;
  unk_1EE21B058 = 0;
  qword_1EE21B060 = (uint64_t)CFWrapper<CoreLanguageModelWithState,corelm::LanguageModelWithState>::cf_finalize;
  unk_1EE21B068 = 0u;
  unk_1EE21B078 = 0u;
  result = _CFRuntimeRegisterClass();
  CFWrapper<CoreLanguageModelWithState,corelm::LanguageModelWithState>::s_type_id = result;
  return result;
}

uint64_t CFWrapper<CoreLanguageModelWithState,corelm::LanguageModelWithState>::cf_finalize(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 16))(a1 + 16);
}

uint64_t corelm::LanguageModelWithState::LanguageModelWithState(uint64_t a1, CFTypeRef cf, int a3)
{
  void *__p[2];
  char v7;

  *(_QWORD *)a1 = &unk_1E2DF1978;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = CFRetain(cf);
  *(_QWORD *)(a1 + 88) = 0;
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 32))(a1, __p);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_191C885FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD **v18;
  void **v19;
  void *v21;

  if (a15 < 0)
    operator delete(__p);
  v21 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v15 + 64) = v21;
    operator delete(v21);
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](v17);
  std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::destroy(v16, *v18);
  _Unwind_Resume(a1);
}

void corelm::LanguageModelForANE::~LanguageModelForANE(corelm::LanguageModelForANE *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &unk_1E2DF17A8;
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 13) = v3;
    operator delete(v3);
  }
  corelm::LanguageModelWithState::~LanguageModelWithState((CFTypeRef *)this);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &unk_1E2DF17A8;
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 13) = v3;
    operator delete(v3);
  }
  corelm::LanguageModelWithState::~LanguageModelWithState((CFTypeRef *)this);
  JUMPOUT(0x19401E994);
}

uint64_t corelm::LanguageModelForANE::calculateProbsOnSequence(uint64_t a1, uint64_t **a2, char a3)
{
  uint64_t *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  void *v19;
  const void **v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  size_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  float *v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  std::runtime_error *exception;
  const void **v65;
  uint64_t v66;
  uint64_t **v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;

  v3 = *a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  v75 = v4;
  v5 = *(_QWORD **)(a1 + 24);
  if (!v5)
    goto LABEL_63;
  v7 = a2;
  v8 = a1;
  v9 = (uint64_t **)(a1 + 16);
  v10 = (_QWORD *)(a1 + 24);
  do
  {
    v11 = v5[4];
    v12 = v11 >= v4;
    if (v11 >= v4)
      v13 = v5;
    else
      v13 = v5 + 1;
    if (v12)
      v10 = v5;
    v5 = (_QWORD *)*v13;
  }
  while (*v13);
  if (v10 == (_QWORD *)(a1 + 24) || v4 < v10[4])
  {
LABEL_63:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "input batch size not supported");
    goto LABEL_65;
  }
  v68 = *v3;
  v69 = v3[1];
  v14 = (v69 - *v3) >> 3;
  *(_QWORD *)&v71 = &v75;
  v15 = (_QWORD *)std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v9, (unint64_t *)&v75, (uint64_t)&std::piecewise_construct, (uint64_t **)&v71)[5];
  *(_QWORD *)&v71 = &v75;
  v16 = std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v9, (unint64_t *)&v75, (uint64_t)&std::piecewise_construct, (uint64_t **)&v71);
  v17 = (_QWORD *)v16[6];
  if (v15 != v17)
  {
    while (*v15 != v14)
    {
      if (++v15 == v17)
      {
        v15 = (_QWORD *)v16[6];
        break;
      }
    }
  }
  *(_QWORD *)&v71 = &v75;
  if (v15 == (_QWORD *)std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v9, (unint64_t *)&v75, (uint64_t)&std::piecewise_construct, (uint64_t **)&v71)[6])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "input seq length not supported");
LABEL_65:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v18 = v14 * v14;
  v74 = 1065353216;
  std::vector<float>::vector(&v71, v14 * v14 * v75, &v74);
  v20 = (const void **)(v8 + 96);
  v19 = *(void **)(v8 + 96);
  if (v19)
  {
    *(_QWORD *)(v8 + 104) = v19;
    operator delete(v19);
    *v20 = 0;
    *(_QWORD *)(v8 + 104) = 0;
    *(_QWORD *)(v8 + 112) = 0;
  }
  v21 = (char *)v71;
  *(_OWORD *)(v8 + 96) = v71;
  *(_QWORD *)(v8 + 112) = v72;
  v22 = v75;
  if ((a3 & 1) != 0)
  {
    if (!v75)
      goto LABEL_48;
    v65 = (const void **)(v8 + 96);
    v66 = v8;
    v23 = 0;
    v67 = v7;
    v70 = *v7;
    v24 = 0xAAAAAAAAAAAAAAABLL * (v7[1] - *v7);
    v25 = 4 * v18;
    v26 = v21;
    do
    {
      if (v24 <= v23)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v27 = (uint64_t **)&v70[3 * v23];
      v28 = *v27;
      v29 = v27[1];
      if (v28 != v29)
      {
        v30 = 0;
        do
        {
          v31 = v30;
          v33 = *v28++;
          v32 = v33;
          if (v33 > 0)
            ++v30;
        }
        while (v28 != v29);
        if (v30)
        {
          v34 = 4 * v30;
          if (v32 <= 0)
            v35 = v31;
          else
            v35 = v31 + 1;
          v36 = v26;
          do
          {
            bzero(v36, v34);
            v36 += 4 * v14;
            --v35;
          }
          while (v35);
        }
      }
      ++v23;
      v26 += v25;
    }
    while (v23 != v22);
  }
  else
  {
    if (!v75)
      goto LABEL_48;
    v65 = (const void **)(v8 + 96);
    v66 = v8;
    v37 = 0;
    v38 = 4 * v18;
    v67 = v7;
    if (v14 <= 1)
      v39 = 1;
    else
      v39 = v14;
    v40 = v21;
    do
    {
      if (v69 != v68)
      {
        v41 = 0;
        v42 = v40;
        v43 = 4 * v14;
        do
        {
          if (v14 > v41)
            bzero(v42, v43);
          ++v41;
          v43 -= 4;
          v42 += 4 * v14 + 4;
        }
        while (v39 != v41);
      }
      ++v37;
      v40 += v38;
    }
    while (v37 != v22);
  }
  v8 = v66;
  v7 = v67;
  v20 = v65;
LABEL_48:
  v44 = v22 * v14 * *(int *)(v8 + 144);
  v74 = 0;
  std::vector<float>::vector(&v71, v44, &v74);
  v45 = *(void **)(v8 + 120);
  if (v45)
  {
    *(_QWORD *)(v8 + 128) = v45;
    operator delete(v45);
    *(_QWORD *)(v8 + 120) = 0;
    *(_QWORD *)(v8 + 128) = 0;
    *(_QWORD *)(v8 + 136) = 0;
  }
  v46 = v71;
  *(_OWORD *)(v8 + 120) = v71;
  *(_QWORD *)(v8 + 136) = v72;
  v47 = *v7;
  v48 = v7[1];
  v49 = (char *)v48 - (char *)*v7;
  if (v48 != *v7)
  {
    v50 = 0;
    v51 = v49 / 24;
    if (v51 <= 1)
      v51 = 1;
    do
    {
      v52 = v47[3 * v50];
      v53 = v47[3 * v50 + 1];
      v54 = v53 - v52;
      if (v53 != v52)
      {
        v55 = 0;
        v56 = v54 >> 3;
        v57 = *(int *)(v8 + 144);
        if (v56 <= 1)
          v56 = 1;
        v58 = (float *)(v46 + 8 + 4 * v14 * (int)v57 * (uint64_t)(int)v50);
        v59 = 4 * v57;
        do
        {
          v60 = *(_QWORD *)(v52 + 8 * v55);
          v61 = (float)(int)v55;
          if (v60 <= 0)
            v61 = 0.0;
          *(v58 - 2) = (float)v60;
          *(v58 - 1) = v61;
          *v58 = 0.0;
          ++v55;
          v58 = (float *)((char *)v58 + v59);
        }
        while (v56 != v55);
      }
      ++v50;
    }
    while (v50 != v51);
  }
  v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 112))(v8);
  corelm::LanguageModel::calculateProbsOnSequence<float,void>((uint64_t *)(v62 + 16), (const void **)(v8 + 120), v20, v75, v14, *(int *)(v8 + 144), (uint64_t)&v71);
  return v73;
}

void sub_191C88B58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void corelm::LanguageModelForANE::updateWithContextIDs()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "NOT supported on ANE");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_191C88BAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void corelm::LanguageModelForANE::updateWithContext()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "NOT supported on ANE");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_191C88BFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void corelm::LanguageModelForANE::clear(corelm::LanguageModelForANE *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)(*(uint64_t (**)(corelm::LanguageModelForANE *))(*(_QWORD *)this + 112))(this);
  v1[18] = v1[17];
  corelm::NeuralNetwork::clear((corelm::NeuralNetwork *)(v1 + 2));
}

void corelm::LanguageModelForANE::setOutputProbs()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "updateWithContextIDs is not supported");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_191C88C7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void corelm::LanguageModelForANE::getNetworkStates(corelm::LanguageModelForANE *this)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "NOT supported on ANE");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_191C88CCC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void corelm::LanguageModelForANE::copyNetworkStates(corelm::LanguageModelForANE *this)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "NOT supported on ANE");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_191C88D1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void corelm::LanguageModelForANE::setNetworkStates()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "NOT supported on ANE");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_191C88D6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void corelm::LanguageModelForANE::copyOutputProbs(corelm::LanguageModelForANE *this)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "NOT supported on ANE");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_191C88DBC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void corelm::LanguageModelForANE::getOutputProbs(corelm::LanguageModelForANE *this)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "NOT supported on ANE");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "NOT supported on ANE");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_191C88E0C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191C88E5C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t corelm::LanguageModelWithState::getLanguageModel(corelm::LanguageModelWithState *this)
{
  return *((_QWORD *)this + 10);
}

void corelm::LanguageModelForANE::topKCandidates(corelm::LanguageModelForANE *this)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "NOT supported on ANE");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_191C88EB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void corelm::LanguageModelForANE::getInputPositionOffset(corelm::LanguageModelForANE *this)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "NOT supported on ANE");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_191C88F04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *corelm::LanguageModelWithState::getSupportedConfigs@<X0>(corelm::LanguageModelWithState *this@<X0>, uint64_t *a2@<X8>)
{
  return std::map<unsigned long,std::vector<unsigned long>>::map[abi:ne180100](a2, (uint64_t)this + 16);
}

void corelm::LanguageModelWithState::~LanguageModelWithState(CFTypeRef *this)
{
  corelm::LanguageModelWithState::~LanguageModelWithState(this);
  JUMPOUT(0x19401E994);
}

{
  void *v2;

  *this = &unk_1E2DF1978;
  CFRelease(this[10]);
  v2 = (void *)this[7];
  if (v2)
  {
    this[8] = v2;
    operator delete(v2);
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 5));
  std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::destroy((uint64_t)(this + 2), this[3]);
}

uint64_t corelm::LanguageModelWithState::calculateProbsOnSequence(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  std::runtime_error *exception;
  _QWORD v6[4];

  if (a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "auto-encoding not supported for this configuration");
    goto LABEL_8;
  }
  if (a2[1] == *a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "input batch size is zero");
    goto LABEL_8;
  }
  v3 = *(_QWORD *)(*a2 + 8) - *(_QWORD *)*a2;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "input seqence length is zero");
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  corelm::LanguageModel::calculateProbsOnSequence<long,void>(*(_QWORD *)(a1 + 80) + 16, a2, v3 >> 3, (uint64_t)v6);
  return v6[3];
}

void sub_191C89008(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t corelm::LanguageModelWithState::updateWithContextIDs(uint64_t a1, uint64_t *a2)
{
  corelm::NeuralNetwork *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  char v9;
  uint64_t v10;
  CFTypeRef v11;
  _BYTE v13[32];
  CFTypeRef v14;
  char v15;
  CFTypeRef cf;
  char v17;
  CFTypeRef v18;
  char v19;

  v3 = (corelm::NeuralNetwork *)(*(_QWORD *)(a1 + 80) + 16);
  v4 = *a2;
  if (a2[1] != *a2)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v4 + 8 * v6);
      v8 = (uint64_t *)operator new(8uLL);
      *v8 = v7;
      LOBYTE(cf) = 0;
      v17 = 0;
      v9 = *(_BYTE *)(a1 + 48);
      if (v9)
      {
        std::__construct_at[abi:ne180100]<applesauce::CF::ArrayRef,applesauce::CF::ArrayRef const&,applesauce::CF::ArrayRef*>(&cf, (CFTypeRef *)(a1 + 40));
        v17 = 1;
        v10 = *(_QWORD *)(a1 + 88);
        LOBYTE(v18) = 0;
        v19 = 0;
        v11 = cf;
        if (cf)
          CFRetain(cf);
        v18 = v11;
        v9 = 1;
      }
      else
      {
        v10 = *(_QWORD *)(a1 + 88);
        LOBYTE(v18) = 0;
      }
      v19 = v9;
      corelm::LanguageModel::updateModel<long,void>((uint64_t)v3, v8, 1, &v18, v10);
      std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v18);
      std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
      ++*(_QWORD *)(a1 + 88);
      corelm::NeuralNetwork::copyStates(v3, (applesauce::CF::ArrayRef *)&v18);
      v14 = v18;
      v15 = 1;
      (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 80))(a1, &v14);
      std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v14);
      operator delete(v8);
      ++v6;
      v4 = *a2;
    }
    while (v6 < (a2[1] - *a2) >> 3);
  }
  corelm::LanguageModel::getOutputProbs(v3, 1uLL, 0, (uint64_t)v13);
  return (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 56))(a1, v13);
}

void sub_191C891A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void corelm::LanguageModelWithState::updateWithContext(_QWORD *a1)
{
  void *__p[3];

  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1[10] + 120) + 16))(__p);
  (*(void (**)(_QWORD *, void **))(*a1 + 24))(a1, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_191C8925C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void corelm::LanguageModelWithState::clear(corelm::LanguageModelWithState *this)
{
  _QWORD *v1;

  *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
  v1 = (_QWORD *)*((_QWORD *)this + 10);
  v1[18] = v1[17];
  corelm::NeuralNetwork::clear((corelm::NeuralNetwork *)(v1 + 2));
}

void corelm::LanguageModelWithState::reset(corelm::LanguageModelWithState *this)
{
  void *__p[2];
  char v3;
  _BYTE v4[16];

  v4[0] = 0;
  v4[8] = 0;
  (*(void (**)(corelm::LanguageModelWithState *, _BYTE *))(*(_QWORD *)this + 80))(this, v4);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v4);
  *((_QWORD *)this + 11) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  (*(void (**)(corelm::LanguageModelWithState *, void **))(*(_QWORD *)this + 32))(this, __p);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_191C89310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *corelm::LanguageModelWithState::setOutputProbs(_QWORD *a1, void **this)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *result;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  void *__src;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = CoreNLP::ModelContainer::getRevision((CoreNLP::ModelContainer *)this) - 1;
  v5 = corelm::util::Matrix<float>::numCols((uint64_t)this);
  v6 = v15;
  __src = this[3];
  v15[0] = &off_1E2DF3430;
  v16 = v15;
  v17 = v4;
  v15[1] = this;
  v18 = v5;
  v11 = 0;
  std::vector<float>::vector(&v12, v5, &v11);
  v7 = (void *)a1[7];
  if (v7)
  {
    a1[8] = v7;
    operator delete(v7);
    a1[7] = 0;
    a1[8] = 0;
    a1[9] = 0;
  }
  v8 = (void *)v12;
  *(_OWORD *)(a1 + 7) = v12;
  a1[9] = v13;
  result = memmove(v8, __src, 4 * v18);
  if (v16 == v15)
  {
    v10 = 4;
  }
  else
  {
    if (!v16)
      return result;
    v10 = 5;
    v6 = v16;
  }
  return (void *)(*(uint64_t (**)(_QWORD *))(*v6 + 8 * v10))(v6);
}

void sub_191C89454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  _QWORD *v19;
  uint64_t v21;

  if (a19 == v19)
  {
    v21 = 4;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v21 = 5;
    v19 = a19;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v21))(v19);
LABEL_6:
  _Unwind_Resume(exception_object);
}

CFTypeRef *corelm::LanguageModelWithState::getNetworkStates@<X0>(CFTypeRef *this@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  if (*((_BYTE *)this + 48))
  {
    this = (CFTypeRef *)std::__construct_at[abi:ne180100]<applesauce::CF::ArrayRef,applesauce::CF::ArrayRef const&,applesauce::CF::ArrayRef*>((_QWORD *)a2, this + 5);
    *(_BYTE *)(a2 + 8) = 1;
  }
  return this;
}

CFTypeRef *corelm::LanguageModelWithState::copyNetworkStates@<X0>(CFTypeRef *this@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  if (*((_BYTE *)this + 48))
  {
    this = (CFTypeRef *)std::__construct_at[abi:ne180100]<applesauce::CF::ArrayRef,applesauce::CF::ArrayRef const&,applesauce::CF::ArrayRef*>((_QWORD *)a2, this + 5);
    *(_BYTE *)(a2 + 8) = 1;
  }
  return this;
}

void corelm::LanguageModelWithState::setNetworkStates(uint64_t a1, uint64_t a2)
{
  std::__optional_storage_base<applesauce::CF::ArrayRef,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<applesauce::CF::ArrayRef,false> const&>(a1 + 40, a2);
}

_QWORD *corelm::LanguageModelWithState::copyOutputProbs@<X0>(corelm::LanguageModelWithState *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2, *((const void **)this + 7), *((_QWORD *)this + 8), (uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 2);
}

uint64_t corelm::LanguageModelWithState::getOutputProbs(corelm::LanguageModelWithState *this)
{
  if (*((_QWORD *)this + 7) == *((_QWORD *)this + 8))
    return 0;
  else
    return *((_QWORD *)this + 7);
}

float corelm::LanguageModelWithState::getOutputProbs(corelm::LanguageModelWithState *this, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 7);
  if (v2 == *((_QWORD *)this + 8))
    return 0.0;
  else
    return *(float *)(v2 + 4 * a2);
}

void corelm::LanguageModelWithState::topKCandidates(corelm::LanguageModelWithState *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  corelm::util::topKWithIndices<float,unsigned long>((uint64_t *)this + 7, a2, a3);
}

uint64_t corelm::LanguageModelWithState::getInputPositionOffset(corelm::LanguageModelWithState *this)
{
  return *((_QWORD *)this + 11);
}

double corelm::LanguageModel::calculateProbsOnSequence<long,void>@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  int v24;
  _DWORD *v25;
  _DWORD *v26;
  CFTypeRef v27;
  uint64_t v28;
  double result;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  void *v38[2];
  char v39;
  __n128 v40;
  __n128 __p;
  char v42;
  void *__src;
  CFTypeRef v44;
  unint64_t v45;
  char v46;

  v8 = *a2;
  v7 = a2[1];
  v9 = (v7 - *a2) / 24;
  v35 = (uint64_t *)(a1 + 120);
  v36 = corelm::NeuralNetwork::outputDimension((corelm::NeuralNetwork *)a1);
  v30 = v9 * a3;
  std::vector<float>::resize((uint64_t)v35, v9 * a3 * v36);
  bzero(*(void **)(a1 + 120), *(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120));
  if (v7 != v8)
  {
    v10 = a2;
    v11 = 0;
    v12 = 4 * v36;
    if (v9 <= 1)
      v13 = 1;
    else
      v13 = v9;
    v33 = v13;
    v34 = 0;
    v32 = 4 * v36 * a3;
    do
    {
      v14 = *(_QWORD *)(*v10 + 24 * v11);
      v15 = *(_QWORD *)(*v10 + 24 * v11 + 8);
      LOBYTE(v45) = 0;
      v46 = 0;
      v16 = v15 - v14;
      if (v16)
      {
        v17 = 0;
        v18 = v16 >> 3;
        if (v18 <= 1)
          v18 = 1;
        v37 = v18;
        v19 = v34;
        do
        {
          v20 = *(_QWORD *)(*(_QWORD *)(*v10 + 24 * v11) + 8 * v17);
          v21 = (uint64_t *)operator new(8uLL);
          *v21 = v20;
          std::string::basic_string[abi:ne180100]<0>(&__p, "input");
          corelm::NeuralNetwork::setInputTensor<long,void>((uint64_t **)a1, v21, 1, (uint64_t)&__p, 1);
          if (v42 < 0)
            operator delete((void *)__p.n128_u64[0]);
          if (corelm::util::contains<std::string,char const*,void>((uint64_t *)(a1 + 8), "position"))
          {
            v22 = (uint64_t *)operator new(8uLL);
            *v22 = v17;
            std::string::basic_string[abi:ne180100]<0>(&__p, "position");
            corelm::NeuralNetwork::setInputTensor<long,void>((uint64_t **)a1, v22, 1, (uint64_t)&__p, 1);
            if (v42 < 0)
              operator delete((void *)__p.n128_u64[0]);
            operator delete(v22);
          }
          if (corelm::util::contains<std::string,char const*,void>((uint64_t *)(a1 + 8), "temperature"))
          {
            v23 = v10;
            v24 = *(_DWORD *)(a1 + 112);
            v25 = operator new(4uLL);
            *v25 = v24;
            std::string::basic_string[abi:ne180100]<0>(&__p, "temperature");
            corelm::NeuralNetwork::setInputTensor<float,void>((uint64_t **)a1, v25, 1, (uint64_t)&__p, 1);
            if (v42 < 0)
              operator delete((void *)__p.n128_u64[0]);
            operator delete(v25);
            v10 = v23;
          }
          if (corelm::util::contains<std::string,char const*,void>((uint64_t *)(a1 + 8), "segment"))
          {
            v26 = operator new(4uLL);
            *v26 = 0;
            std::string::basic_string[abi:ne180100]<0>(&__p, "segment");
            corelm::NeuralNetwork::setInputTensor<float,void>((uint64_t **)a1, v26, 1, (uint64_t)&__p, 1);
            if (v42 < 0)
              operator delete((void *)__p.n128_u64[0]);
            operator delete(v26);
          }
          __p.n128_u64[0] = 0;
          std::optional<applesauce::CF::ArrayRef>::value_or[abi:ne180100]<applesauce::CF::ArrayRef>((CFTypeRef *)&v45, &__p, &v44);
          corelm::NeuralNetwork::predict((uint64_t *)a1, (uint64_t *)&v44);
          if (v44)
            CFRelease(v44);
          if (__p.n128_u64[0])
            CFRelease((CFTypeRef)__p.n128_u64[0]);
          corelm::NeuralNetwork::copyStates((corelm::NeuralNetwork *)a1, (applesauce::CF::ArrayRef *)&__p);
          if (v46)
          {
            v27 = (CFTypeRef)v45;
            v45 = __p.n128_u64[0];
            __p.n128_u64[0] = (unint64_t)v27;
            if (v27)
              CFRelease(v27);
          }
          else
          {
            v46 = 1;
            v45 = __p.n128_u64[0];
          }
          v28 = *v35;
          v40.n128_u64[0] = v36;
          v40.n128_u64[1] = 1;
          std::string::basic_string[abi:ne180100]<0>(v38, "output");
          corelm::NeuralNetwork::getOutput<2ul>((uint64_t *)a1, &v40, 1, (uint64_t)v38, (uint64_t)&__p);
          memcpy((void *)(v28 + v19), __src, v12);
          if (v39 < 0)
            operator delete(v38[0]);
          operator delete(v21);
          ++v17;
          v19 += v12;
        }
        while (v37 != v17);
      }
      std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v45);
      ++v11;
      v34 += v32;
    }
    while (v11 != v33);
  }
  __p.n128_u64[0] = v36;
  __p.n128_u64[1] = v30;
  *(_QWORD *)&result = corelm::util::Matrix<float>::Matrix(a4, *v35, &__p, 1).n128_u64[0];
  return result;
}

void sub_191C899A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  void *v32;
  uint64_t v33;

  if (a31 < 0)
    operator delete(__p);
  operator delete(v32);
  operator delete(v31);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](v33 - 104);
  _Unwind_Resume(a1);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void std::__function::__func<corelm::util::Matrix<float>::row(unsigned long)::{lambda(unsigned long,unsigned long)#1},std::allocator<corelm::util::Matrix<float>::row(unsigned long)::{lambda(unsigned long,unsigned long)#1}>,unsigned long ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x19401E994);
}

_QWORD *std::__function::__func<corelm::util::Matrix<float>::row(unsigned long)::{lambda(unsigned long,unsigned long)#1},std::allocator<corelm::util::Matrix<float>::row(unsigned long)::{lambda(unsigned long,unsigned long)#1}>,unsigned long ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DF3430;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<corelm::util::Matrix<float>::row(unsigned long)::{lambda(unsigned long,unsigned long)#1},std::allocator<corelm::util::Matrix<float>::row(unsigned long)::{lambda(unsigned long,unsigned long)#1}>,unsigned long ()(unsigned long,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DF3430;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<corelm::util::Matrix<float>::row(unsigned long)::{lambda(unsigned long,unsigned long)#1},std::allocator<corelm::util::Matrix<float>::row(unsigned long)::{lambda(unsigned long,unsigned long)#1}>,unsigned long ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return corelm::util::Matrix<float>::flatIndex(*(_DWORD **)(a1 + 8), *a2, *a3);
}

uint64_t std::__function::__func<corelm::util::Matrix<float>::row(unsigned long)::{lambda(unsigned long,unsigned long)#1},std::allocator<corelm::util::Matrix<float>::row(unsigned long)::{lambda(unsigned long,unsigned long)#1}>,unsigned long ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<corelm::util::Matrix<float>::row(unsigned long)::{lambda(unsigned long,unsigned long)#1},std::allocator<corelm::util::Matrix<float>::row(unsigned long)::{lambda(unsigned long,unsigned long)#1}>,unsigned long ()(unsigned long,unsigned long)>::target_type()
{
}

void std::__optional_storage_base<applesauce::CF::ArrayRef,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<applesauce::CF::ArrayRef,false> const&>(uint64_t a1, uint64_t a2)
{
  const void *v3;
  CFTypeRef v4;

  if (*(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8))
  {
    if (*(_BYTE *)(a1 + 8))
    {
      v3 = *(const void **)a1;
      v4 = *(CFTypeRef *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      if (v4)
        CFRetain(v4);
      if (v3)
        CFRelease(v3);
    }
  }
  else if (*(_BYTE *)(a1 + 8))
  {
    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::reset[abi:ne180100](a1);
  }
  else
  {
    std::__construct_at[abi:ne180100]<applesauce::CF::ArrayRef,applesauce::CF::ArrayRef const&,applesauce::CF::ArrayRef*>((_QWORD *)a1, (CFTypeRef *)a2);
    *(_BYTE *)(a1 + 8) = 1;
  }
}

void std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::reset[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (v2)
      CFRelease(v2);
    *(_BYTE *)(a1 + 8) = 0;
  }
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_191C89D70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void corelm::util::topKWithIndices<float,unsigned long>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  void *__p;
  void *v6;
  void *v7[2];
  uint64_t v8;
  char v9;

  std::vector<std::pair<float,unsigned long>>::vector(v7, a2);
  corelm::util::enumerate<float,unsigned long>(a1, &__p);
  _ZNSt3__119__partial_sort_copyB8ne180100INS_17_ClassicAlgPolicyERZN6corelm4util15topKWithIndicesIfmEEDaRKNS_6vectorIT_NS_9allocatorIS7_EEEEiE11PairGreaterNS_11__wrap_iterIPNS_4pairIfmEEEESJ_SJ_SJ_NS_10__identityESK_EENSG_IT1_T3_EESL_T2_SM_T4_OT0_OT5_OT6_((uint64_t)__p, (uint64_t)v6, (uint64_t)v7[0], (uint64_t)v7[1], (uint64_t)&v9);
  *(_OWORD *)a3 = *(_OWORD *)v7;
  *(_QWORD *)(a3 + 16) = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
    if (v7[0])
    {
      v7[1] = v7[0];
      operator delete(v7[0]);
    }
  }
}

void sub_191C89E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void corelm::util::enumerate<float,unsigned long>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = a1[1] - *a1;
  if (v3)
  {
    v5 = 0;
    v6 = 0;
    v7 = v3 >> 2;
    v8 = a2 + 2;
    do
    {
      v9 = *a1;
      if ((unint64_t)v5 >= *v8)
      {
        v10 = (uint64_t)&v5[-*a2] >> 4;
        if ((unint64_t)(v10 + 1) >> 60)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v11 = *v8 - *a2;
        v12 = v11 >> 3;
        if (v11 >> 3 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
          v13 = 0xFFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>((uint64_t)(a2 + 2), v13);
        v16 = &v14[16 * v10];
        *(_DWORD *)v16 = *(_DWORD *)(v9 + 4 * v6);
        *((_QWORD *)v16 + 1) = v6;
        v18 = (char *)*a2;
        v17 = (char *)a2[1];
        v19 = v16;
        if (v17 != (char *)*a2)
        {
          do
          {
            *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
            v19 -= 16;
            v17 -= 16;
          }
          while (v17 != v18);
          v17 = (char *)*a2;
        }
        v5 = v16 + 16;
        *a2 = v19;
        a2[1] = v16 + 16;
        a2[2] = &v14[16 * v15];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_DWORD *)v5 = *(_DWORD *)(v9 + 4 * v6);
        *((_QWORD *)v5 + 1) = v6;
        v5 += 16;
      }
      a2[1] = v5;
      ++v6;
    }
    while (v6 != v7);
  }
}

void sub_191C89F90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::pair<float,unsigned long>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<float,unsigned long>>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 16 * a2;
    do
    {
      *(_DWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      v4 += 16;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_191C8A008(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<float,unsigned long>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t _ZNSt3__119__partial_sort_copyB8ne180100INS_17_ClassicAlgPolicyERZN6corelm4util15topKWithIndicesIfmEEDaRKNS_6vectorIT_NS_9allocatorIS7_EEEEiE11PairGreaterNS_11__wrap_iterIPNS_4pairIfmEEEESJ_SJ_SJ_NS_10__identityESK_EENSG_IT1_T3_EESL_T2_SM_T4_OT0_OT5_OT6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a3 != a4)
  {
    v8 = a1;
    v9 = a3;
    if (a1 == a2)
    {
      v8 = a2;
    }
    else
    {
      do
      {
        *(_DWORD *)v9 = *(_DWORD *)v8;
        *(_QWORD *)(v9 + 8) = *(_QWORD *)(v8 + 8);
        v8 += 16;
        v9 += 16;
      }
      while (v8 != a2 && v9 != a4);
    }
    v11 = v9 - a3;
    if (v9 - a3 >= 17)
    {
      v12 = (unint64_t)(((v9 - a3) >> 4) - 2) >> 1;
      v13 = v12 + 1;
      v14 = a3 + 16 * v12;
      do
      {
        _ZNSt3__111__sift_downB8ne180100INS_17_ClassicAlgPolicyERZN6corelm4util15topKWithIndicesIfmEEDaRKNS_6vectorIT_NS_9allocatorIS7_EEEEiE11PairGreaterNS_11__wrap_iterIPNS_4pairIfmEEEEEEvT1_OT0_NS_15iterator_traitsISK_E15difference_typeESK_(a3, a5, (v9 - a3) >> 4, v14);
        v14 -= 16;
        --v13;
      }
      while (v13);
    }
    while (v8 != a2)
    {
      if (*(float *)v8 > *(float *)a3)
      {
        *(_DWORD *)a3 = *(_DWORD *)v8;
        *(_QWORD *)(a3 + 8) = *(_QWORD *)(v8 + 8);
        _ZNSt3__111__sift_downB8ne180100INS_17_ClassicAlgPolicyERZN6corelm4util15topKWithIndicesIfmEEDaRKNS_6vectorIT_NS_9allocatorIS7_EEEEiE11PairGreaterNS_11__wrap_iterIPNS_4pairIfmEEEEEEvT1_OT0_NS_15iterator_traitsISK_E15difference_typeESK_(a3, a5, (v9 - a3) >> 4, a3);
      }
      v8 += 16;
    }
    if (v11 >= 17)
    {
      v15 = (unint64_t)v11 >> 4;
      v16 = v9;
      do
      {
        v17 = 0;
        v18 = *(_DWORD *)a3;
        v19 = *(_QWORD *)(a3 + 8);
        v20 = a3;
        do
        {
          v21 = v20;
          v20 += 16 * v17 + 16;
          v22 = 2 * v17;
          v17 = (2 * v17) | 1;
          v23 = v22 + 2;
          if (v23 < v15 && *(float *)v20 > *(float *)(v20 + 16))
          {
            v20 += 16;
            v17 = v23;
          }
          *(_DWORD *)v21 = *(_DWORD *)v20;
          *(_QWORD *)(v21 + 8) = *(_QWORD *)(v20 + 8);
        }
        while (v17 <= (uint64_t)((unint64_t)(v15 - 2) >> 1));
        v24 = v16 - 16;
        if (v20 == v16 - 16)
        {
          *(_DWORD *)v20 = v18;
          *(_QWORD *)(v20 + 8) = v19;
        }
        else
        {
          *(_DWORD *)v20 = *(_DWORD *)(v16 - 16);
          *(_QWORD *)(v20 + 8) = *(_QWORD *)(v16 - 8);
          *(_DWORD *)(v16 - 16) = v18;
          *(_QWORD *)(v16 - 8) = v19;
          _ZNSt3__19__sift_upB8ne180100INS_17_ClassicAlgPolicyERZN6corelm4util15topKWithIndicesIfmEEDaRKNS_6vectorIT_NS_9allocatorIS7_EEEEiE11PairGreaterNS_11__wrap_iterIPNS_4pairIfmEEEEEEvT1_SK_OT0_NS_15iterator_traitsISK_E15difference_typeE(a3, v20 + 16, a5, (v20 + 16 - a3) >> 4);
        }
        v16 = v24;
      }
      while (v15-- > 2);
    }
  }
  return a2;
}

uint64_t _ZNSt3__111__sift_downB8ne180100INS_17_ClassicAlgPolicyERZN6corelm4util15topKWithIndicesIfmEEDaRKNS_6vectorIT_NS_9allocatorIS7_EEEEiE11PairGreaterNS_11__wrap_iterIPNS_4pairIfmEEEEEEvT1_OT0_NS_15iterator_traitsISK_E15difference_typeESK_(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a3 >= 2)
  {
    v4 = a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= (a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) | 1;
      v8 = result + 16 * v7;
      v9 = v6 + 2;
      if (v9 < a3 && *(float *)v8 > *(float *)(v8 + 16))
      {
        v8 += 16;
        v7 = v9;
      }
      v10 = *(float *)a4;
      v11 = *(float *)v8;
      v12 = *(float *)a4;
      if (*(float *)v8 <= *(float *)a4)
      {
        v13 = *(_QWORD *)(a4 + 8);
        do
        {
          v14 = a4;
          a4 = v8;
          *(float *)v14 = v11;
          *(_QWORD *)(v14 + 8) = *(_QWORD *)(v8 + 8);
          if (v5 < v7)
            break;
          v15 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = result + 16 * v7;
          v16 = v15 + 2;
          if (v16 < a3 && *(float *)v8 > *(float *)(v8 + 16))
          {
            v8 += 16;
            v7 = v16;
          }
          v11 = *(float *)v8;
        }
        while (*(float *)v8 <= v12);
        *(float *)a4 = v10;
        *(_QWORD *)(a4 + 8) = v13;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__19__sift_upB8ne180100INS_17_ClassicAlgPolicyERZN6corelm4util15topKWithIndicesIfmEEDaRKNS_6vectorIT_NS_9allocatorIS7_EEEEiE11PairGreaterNS_11__wrap_iterIPNS_4pairIfmEEEEEEvT1_SK_OT0_NS_15iterator_traitsISK_E15difference_typeE(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = result + 16 * v4;
    v8 = *(float *)(a2 - 16);
    v6 = a2 - 16;
    v7 = v8;
    v9 = *(float *)v5;
    v10 = v8;
    if (*(float *)v5 > v8)
    {
      v11 = *(_QWORD *)(v6 + 8);
      do
      {
        v12 = v6;
        v6 = v5;
        *(float *)v12 = v9;
        *(_QWORD *)(v12 + 8) = *(_QWORD *)(v5 + 8);
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = result + 16 * v4;
        v9 = *(float *)v5;
      }
      while (*(float *)v5 > v10);
      *(float *)v6 = v7;
      *(_QWORD *)(v6 + 8) = v11;
    }
  }
  return result;
}

void corelm::LanguageModel::calculateProbsOnSequence<float,void>(uint64_t *a1@<X0>, const void **a2@<X1>, const void **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  const void *v15;
  const void *v16;
  __n128 v17;
  CFTypeRef cf;
  void *__p[2];
  char v20;

  std::string::basic_string[abi:ne180100]<0>(__p, "output");
  v14 = corelm::NeuralNetwork::outputDimension(a1, (const UInt8 *)__p);
  if (v20 < 0)
    operator delete(__p[0]);
  v15 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  corelm::NeuralNetwork::setInputTensorANE<float,void>((uint64_t **)a1, v15, a5, (uint64_t)__p, a6, a4);
  if (v20 < 0)
    operator delete(__p[0]);
  v16 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, "qk_mask");
  corelm::NeuralNetwork::setInputTensorANE<float,void>((uint64_t **)a1, v16, a5, (uint64_t)__p, a5, a4);
  if (v20 < 0)
    operator delete(__p[0]);
  cf = 0;
  corelm::NeuralNetwork::predict(a1, (uint64_t *)&cf);
  if (cf)
    CFRelease(cf);
  v17.n128_u64[0] = v14;
  v17.n128_u64[1] = a5 * a4;
  std::string::basic_string[abi:ne180100]<0>(__p, "output");
  corelm::NeuralNetwork::getOutput<2ul>(a1, &v17, 1, (uint64_t)__p, a7);
  if (v20 < 0)
    operator delete(__p[0]);
}

void sub_191C8A530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<long>(void ****a1)
{
  unint64_t v2;
  void ***v3;
  void ***v4;
  CFArrayRef v5;
  uint64_t *v7[3];
  void **v8;

  v2 = a1[1] - *a1;
  memset(v7, 0, sizeof(v7));
  std::vector<applesauce::CF::NumberRef>::reserve((uint64_t *)v7, v2);
  v4 = *a1;
  v3 = a1[1];
  while (v4 != v3)
  {
    v8 = *v4;
    std::vector<applesauce::CF::NumberRef>::emplace_back<long>((uint64_t *)v7, (uint64_t *)&v8);
    ++v4;
  }
  v5 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(v7);
  v8 = (void **)v7;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&v8);
  return v5;
}

void sub_191C8A5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void **std::vector<applesauce::CF::NumberRef>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 8 * v6;
    std::vector<applesauce::CF::NumberRef>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer(v7);
  }
  return result;
}

void sub_191C8A68C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

CFNumberRef *std::vector<applesauce::CF::NumberRef>::emplace_back<long>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  CFNumberRef *v6;
  CFNumberRef *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void *v14;
  CFNumberRef *v15;
  CFNumberRef *v16;
  char *v17;
  uint64_t *v18;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = (CFNumberRef *)a1[1];
  if ((unint64_t)v6 >= v4)
  {
    v8 = ((uint64_t)v6 - *a1) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v9 = v4 - *a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v18 = a1 + 2;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), v11);
    else
      v12 = 0;
    v14 = v12;
    v15 = (CFNumberRef *)&v12[8 * v8];
    v17 = &v12[8 * v11];
    std::allocator<applesauce::CF::NumberRef>::construct[abi:ne180100]<applesauce::CF::NumberRef,long>(v5, v15, a2);
    v16 = v15 + 1;
    std::vector<applesauce::CF::NumberRef>::__swap_out_circular_buffer(a1, &v14);
    v7 = (CFNumberRef *)a1[1];
    std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer(&v14);
  }
  else
  {
    std::allocator<applesauce::CF::NumberRef>::construct[abi:ne180100]<applesauce::CF::NumberRef,long>((uint64_t)(a1 + 2), v6, a2);
    v7 = v6 + 1;
    a1[1] = (uint64_t)(v6 + 1);
  }
  a1[1] = (uint64_t)v7;
  return v7 - 1;
}

void sub_191C8A7A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  CFArrayRef CFArray;
  void *__p[3];

  std::vector<void const*>::vector(__p, a1[1] - *a1);
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v4 = __p[0];
    do
    {
      v5 = *v2++;
      *v4++ = v5;
    }
    while (v2 != v3);
  }
  CFArray = applesauce::CF::details::make_CFArrayRef<void const*>((uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return CFArray;
}

void sub_191C8A83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<applesauce::CF::NumberRef>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<applesauce::CF::NumberRef>,std::reverse_iterator<applesauce::CF::NumberRef*>,std::reverse_iterator<applesauce::CF::NumberRef*>,std::reverse_iterator<applesauce::CF::NumberRef*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<applesauce::CF::NumberRef>,std::reverse_iterator<applesauce::CF::NumberRef*>,std::reverse_iterator<applesauce::CF::NumberRef*>,std::reverse_iterator<applesauce::CF::NumberRef*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *--a3;
      *(_QWORD *)(v8 - 8) = v9;
      v8 -= 8;
      *a3 = 0;
      v7 -= 8;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<applesauce::CF::NumberRef>,std::reverse_iterator<applesauce::CF::NumberRef*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<applesauce::CF::NumberRef>,std::reverse_iterator<applesauce::CF::NumberRef*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<applesauce::CF::NumberRef>,std::reverse_iterator<applesauce::CF::NumberRef*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<applesauce::CF::NumberRef>,std::reverse_iterator<applesauce::CF::NumberRef*>>::operator()[abi:ne180100](uint64_t *a1)
{
  CFTypeRef *v1;
  CFTypeRef *v2;
  uint64_t v3;

  v1 = *(CFTypeRef **)(a1[2] + 8);
  v2 = *(CFTypeRef **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
      std::allocator<applesauce::CF::NumberRef>::destroy[abi:ne180100](v3, v1++);
    while (v1 != v2);
  }
}

void std::allocator<applesauce::CF::NumberRef>::destroy[abi:ne180100](uint64_t a1, CFTypeRef *a2)
{
  if (*a2)
    CFRelease(*a2);
}

void **std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer(void **a1)
{
  std::__split_buffer<applesauce::CF::NumberRef>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<applesauce::CF::NumberRef>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 8;
    std::allocator<applesauce::CF::NumberRef>::destroy[abi:ne180100](v4, (CFTypeRef *)(i - 8));
  }
}

CFNumberRef std::allocator<applesauce::CF::NumberRef>::construct[abi:ne180100]<applesauce::CF::NumberRef,long>(uint64_t a1, CFNumberRef *a2, uint64_t *a3)
{
  CFNumberRef result;
  std::runtime_error *exception;
  uint64_t valuePtr;

  valuePtr = *a3;
  result = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  *a2 = result;
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_191C8AAF0(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<void const*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_191C8AB74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  CFTypeRef *v2;
  CFTypeRef *v4;
  void *v5;

  v1 = *a1;
  v2 = (CFTypeRef *)**a1;
  if (v2)
  {
    v4 = (CFTypeRef *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::allocator<applesauce::CF::NumberRef>::destroy[abi:ne180100]((uint64_t)(v1 + 2), --v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 applesauce::CF::convert_or<std::vector<long>,0>@<Q0>(const __CFArray *a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X8>)
{
  __n128 result;
  void *__p;
  _BYTE *v7;
  char v8;

  applesauce::CF::convert_as<std::vector<long>,0>(a1, &__p);
  if (v8)
  {
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(a3, __p, (uint64_t)v7, (v7 - (_BYTE *)__p) >> 3);
    if (v8)
    {
      if (__p)
      {
        v7 = __p;
        operator delete(__p);
      }
    }
  }
  else
  {
    result = *a2;
    *a3 = *a2;
    a3[1].n128_u64[0] = a2[1].n128_u64[0];
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
  }
  return result;
}

void applesauce::CF::convert_as<std::vector<long>,0>(const __CFArray *a1@<X0>, _BYTE *a2@<X8>)
{
  CFTypeID TypeID;

  if (a1 && (TypeID = CFArrayGetTypeID(), TypeID == CFGetTypeID(a1)))
  {
    applesauce::CF::details::CFArray_get_value_as<std::vector<long>>(a1, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[24] = 0;
  }
}

void applesauce::CF::details::CFArray_get_value_as<std::vector<long>>(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  int Count;
  CFIndex v5;
  uint64_t v6;
  const __CFNumber *ValueAtIndex;
  const __CFBoolean *v8;
  char v9;
  const __CFBoolean *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  void *__p;
  char *v23;
  char *v24;

  Count = CFArrayGetCount(a1);
  __p = 0;
  v23 = 0;
  v24 = 0;
  std::vector<unsigned long>::reserve(&__p, Count);
  if (Count <= 0)
  {
    v12 = v23;
LABEL_23:
    v21 = v24;
    *(_QWORD *)a2 = __p;
    *(_QWORD *)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 16) = v21;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    v5 = 0;
    v6 = Count;
    while (1)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, v5);
      v8 = applesauce::CF::convert_as<long,0>(ValueAtIndex);
      if (!v9)
        break;
      v10 = v8;
      v11 = v23;
      if (v23 >= v24)
      {
        v13 = (char *)__p;
        v14 = (v23 - (_BYTE *)__p) >> 3;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v16 = v24 - (_BYTE *)__p;
        if ((v24 - (_BYTE *)__p) >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v24, v17);
          v13 = (char *)__p;
          v11 = v23;
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v10;
        v12 = v19 + 8;
        while (v11 != v13)
        {
          v20 = *((_QWORD *)v11 - 1);
          v11 -= 8;
          *((_QWORD *)v19 - 1) = v20;
          v19 -= 8;
        }
        __p = v19;
        v23 = v12;
        v24 = &v18[8 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_QWORD *)v23 = v8;
        v12 = v11 + 8;
      }
      v23 = v12;
      if (++v5 == v6)
        goto LABEL_23;
    }
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    if (__p)
    {
      v23 = (char *)__p;
      operator delete(__p);
    }
  }
}

const __CFBoolean *applesauce::CF::convert_as<long,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;

  if (a1 && (TypeID = CFNumberGetTypeID(), TypeID == CFGetTypeID(a1)))
    return (const __CFBoolean *)applesauce::CF::details::number_convert_as<long>(a1);
  else
    return applesauce::CF::details::treat_as_BOOL_for_convert_as<long>(a1);
}

const __CFBoolean *applesauce::CF::details::treat_as_BOOL_for_convert_as<long>(const __CFBoolean *result)
{
  const __CFBoolean *v1;
  CFTypeID TypeID;

  if (result)
  {
    v1 = result;
    TypeID = CFBooleanGetTypeID();
    if (TypeID == CFGetTypeID(v1))
      return (const __CFBoolean *)CFBooleanGetValue(v1);
    else
      return 0;
  }
  return result;
}

unint64_t applesauce::CF::details::number_convert_as<long>(const __CFNumber *a1)
{
  const __CFNumber *v2;
  CFNumberType v3;
  unint64_t v4;
  uint64_t v5;
  const __CFNumber *v6;
  CFNumberType v7;
  const __CFNumber *v8;
  CFNumberType v9;
  const __CFNumber *v10;
  CFNumberType v11;
  const __CFNumber *v12;
  CFNumberType v13;
  const __CFNumber *v14;
  CFNumberType v15;
  int Value;
  char v17;
  BOOL v18;
  unsigned __int8 v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  double valuePtr;

  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      v6 = a1;
      v7 = kCFNumberSInt16Type;
      goto LABEL_18;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      v8 = a1;
      v9 = kCFNumberSInt32Type;
      goto LABEL_20;
    case kCFNumberSInt64Type:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberSInt64Type;
      goto LABEL_31;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      v12 = a1;
      v13 = kCFNumberFloat32Type;
      goto LABEL_27;
    case kCFNumberFloat64Type:
      valuePtr = 0.0;
      v14 = a1;
      v15 = kCFNumberFloat64Type;
      goto LABEL_33;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberCharType;
LABEL_10:
      Value = CFNumberGetValue(v2, v3, &valuePtr);
      if (Value)
        v17 = LOBYTE(valuePtr);
      else
        v17 = 0;
      if (Value != 0 && SLOBYTE(valuePtr) < 0)
        v4 = -256;
      else
        v4 = 0;
      LOBYTE(v5) = v17;
      return v5 | v4;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      v6 = a1;
      v7 = kCFNumberShortType;
LABEL_18:
      v18 = CFNumberGetValue(v6, v7, &valuePtr) == 0;
      v19 = LOBYTE(valuePtr);
      v20 = SLOWORD(valuePtr);
      goto LABEL_21;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      v8 = a1;
      v9 = kCFNumberIntType;
LABEL_20:
      v18 = CFNumberGetValue(v8, v9, &valuePtr) == 0;
      v19 = LOBYTE(valuePtr);
      v20 = SLODWORD(valuePtr);
LABEL_21:
      v21 = v20 & 0xFFFFFFFFFFFFFF00 | v19;
      if (v18)
        v5 = 0;
      else
        v5 = v21;
      goto LABEL_37;
    case kCFNumberLongType:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberLongType;
      goto LABEL_31;
    case kCFNumberLongLongType:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberLongLongType;
      goto LABEL_31;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      v12 = a1;
      v13 = kCFNumberFloatType;
LABEL_27:
      v22 = CFNumberGetValue(v12, v13, &valuePtr) == 0;
      v5 = (uint64_t)*(float *)&valuePtr;
      goto LABEL_34;
    case kCFNumberDoubleType:
      valuePtr = 0.0;
      v14 = a1;
      v15 = kCFNumberDoubleType;
      goto LABEL_33;
    case kCFNumberCFIndexType:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberCFIndexType;
      goto LABEL_31;
    case kCFNumberNSIntegerType:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberNSIntegerType;
LABEL_31:
      v22 = CFNumberGetValue(v10, v11, &valuePtr) == 0;
      v5 = *(_QWORD *)&valuePtr;
      goto LABEL_34;
    case kCFNumberCGFloatType:
      valuePtr = 0.0;
      v14 = a1;
      v15 = kCFNumberCGFloatType;
LABEL_33:
      v22 = CFNumberGetValue(v14, v15, &valuePtr) == 0;
      v5 = (uint64_t)valuePtr;
LABEL_34:
      if (v22)
        v5 = 0;
LABEL_37:
      v4 = v5 & 0xFFFFFFFFFFFFFF00;
      break;
    default:
      v4 = 0;
      LOBYTE(v5) = 0;
      break;
  }
  return v5 | v4;
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, std::vector<std::string>::size_type __n, const std::vector<std::string>::value_type *__x)
{
  std::vector<std::string>::pointer end;
  std::vector<std::string>::size_type v7;
  std::string *v8;
  uint64_t v9;
  __int128 v10;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = 3 * __n;
    v8 = &end[__n];
    v9 = 8 * v7;
    do
    {
      if (SHIBYTE(__x->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(end, __x->__r_.__value_.__l.__data_, __x->__r_.__value_.__l.__size_);
      }
      else
      {
        v10 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
        end->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
      }
      ++end;
      v9 -= 24;
    }
    while (v9);
    this->__end_ = v8;
  }
  return this;
}

void sub_191C8B23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<long,std::string>,std::__map_value_compare<long,std::__value_type<long,std::string>,std::less<long>,true>,std::allocator<std::__value_type<long,std::string>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = **a4;
    v11[6] = 0;
    v11[7] = 0;
    v11[4] = v12;
    v11[5] = 0;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<std::string>(__int128 **a1)
{
  unint64_t v2;
  __int128 *v3;
  __int128 *v4;
  __int128 v5;
  CFArrayRef v6;
  std::string __p;
  uint64_t *v9[3];

  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3);
  memset(v9, 0, sizeof(v9));
  std::vector<applesauce::CF::StringRef>::reserve((uint64_t *)v9, v2);
  v4 = *a1;
  v3 = a1[1];
  while (v4 != v3)
  {
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v5 = *v4;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
    }
    std::vector<applesauce::CF::StringRef>::emplace_back<std::string>((uint64_t *)v9, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v4 = (__int128 *)((char *)v4 + 24);
  }
  v6 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(v9);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v6;
}

void sub_191C8B3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  __p = &a15;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void **std::vector<applesauce::CF::StringRef>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 8 * v6;
    std::vector<applesauce::CF::StringRef>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<applesauce::CF::StringRef>::~__split_buffer(v7);
  }
  return result;
}

void sub_191C8B494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<applesauce::CF::StringRef>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

CFStringRef *std::vector<applesauce::CF::StringRef>::emplace_back<std::string>(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  CFStringRef *v6;
  CFStringRef *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void *v14;
  CFStringRef *v15;
  CFStringRef *v16;
  char *v17;
  uint64_t *v18;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = (CFStringRef *)a1[1];
  if ((unint64_t)v6 >= v4)
  {
    v8 = ((uint64_t)v6 - *a1) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v9 = v4 - *a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v18 = a1 + 2;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), v11);
    else
      v12 = 0;
    v14 = v12;
    v15 = (CFStringRef *)&v12[8 * v8];
    v17 = &v12[8 * v11];
    std::allocator<applesauce::CF::StringRef>::construct[abi:ne180100]<applesauce::CF::StringRef,std::string>(v5, v15, a2);
    v16 = v15 + 1;
    std::vector<applesauce::CF::StringRef>::__swap_out_circular_buffer(a1, &v14);
    v7 = (CFStringRef *)a1[1];
    std::__split_buffer<applesauce::CF::StringRef>::~__split_buffer(&v14);
  }
  else
  {
    std::allocator<applesauce::CF::StringRef>::construct[abi:ne180100]<applesauce::CF::StringRef,std::string>((uint64_t)(a1 + 2), v6, a2);
    v7 = v6 + 1;
    a1[1] = (uint64_t)(v6 + 1);
  }
  a1[1] = (uint64_t)v7;
  return v7 - 1;
}

void sub_191C8B5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<applesauce::CF::StringRef>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<applesauce::CF::StringRef>,std::reverse_iterator<applesauce::CF::StringRef*>,std::reverse_iterator<applesauce::CF::StringRef*>,std::reverse_iterator<applesauce::CF::StringRef*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<applesauce::CF::StringRef>,std::reverse_iterator<applesauce::CF::StringRef*>,std::reverse_iterator<applesauce::CF::StringRef*>,std::reverse_iterator<applesauce::CF::StringRef*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *--a3;
      *(_QWORD *)(v8 - 8) = v9;
      v8 -= 8;
      *a3 = 0;
      v7 -= 8;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<applesauce::CF::StringRef>,std::reverse_iterator<applesauce::CF::StringRef*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<applesauce::CF::StringRef>,std::reverse_iterator<applesauce::CF::StringRef*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<applesauce::CF::StringRef>,std::reverse_iterator<applesauce::CF::StringRef*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<applesauce::CF::StringRef>,std::reverse_iterator<applesauce::CF::StringRef*>>::operator()[abi:ne180100](uint64_t *a1)
{
  CFTypeRef *v1;
  CFTypeRef *v2;
  uint64_t v3;

  v1 = *(CFTypeRef **)(a1[2] + 8);
  v2 = *(CFTypeRef **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
      std::allocator<applesauce::CF::StringRef>::destroy[abi:ne180100](v3, v1++);
    while (v1 != v2);
  }
}

void std::allocator<applesauce::CF::StringRef>::destroy[abi:ne180100](uint64_t a1, CFTypeRef *a2)
{
  if (*a2)
    CFRelease(*a2);
}

void **std::__split_buffer<applesauce::CF::StringRef>::~__split_buffer(void **a1)
{
  std::__split_buffer<applesauce::CF::StringRef>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<applesauce::CF::StringRef>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 8;
    std::allocator<applesauce::CF::StringRef>::destroy[abi:ne180100](v4, (CFTypeRef *)(i - 8));
  }
}

CFStringRef std::allocator<applesauce::CF::StringRef>::construct[abi:ne180100]<applesauce::CF::StringRef,std::string>(uint64_t a1, CFStringRef *a2, uint64_t a3)
{
  int v4;
  const UInt8 *v5;
  CFIndex v6;
  CFStringRef result;
  std::runtime_error *exception;

  v4 = *(char *)(a3 + 23);
  if (v4 >= 0)
    v5 = (const UInt8 *)a3;
  else
    v5 = *(const UInt8 **)a3;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a3 + 23);
  else
    v6 = *(_QWORD *)(a3 + 8);
  result = CFStringCreateWithBytes(0, v5, v6, 0x8000100u, 0);
  *a2 = result;
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_191C8B870(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

void std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  CFTypeRef *v2;
  CFTypeRef *v4;
  void *v5;

  v1 = *a1;
  v2 = (CFTypeRef *)**a1;
  if (v2)
  {
    v4 = (CFTypeRef *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::allocator<applesauce::CF::StringRef>::destroy[abi:ne180100]((uint64_t)(v1 + 2), --v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

const __CFBoolean *applesauce::CF::details::at_to<long>(const __CFArray *a1, unint64_t a2)
{
  const __CFNumber *ValueAtIndex;
  std::runtime_error *exception;

  if (!a1 || CFArrayGetCount(a1) <= a2 || (ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, a2)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return applesauce::CF::convert_to<long,0>(ValueAtIndex);
}

void sub_191C8B994(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const __CFBoolean *applesauce::CF::convert_to<long,0>(const __CFNumber *a1)
{
  const __CFBoolean *result;
  char v2;
  std::runtime_error *exception;

  result = applesauce::CF::convert_as<long,0>(a1);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_191C8B9F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<float>(_QWORD *a1)
{
  unint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  CFArrayRef v5;
  uint64_t *v7[3];
  void **v8;

  v2 = (uint64_t)(a1[1] - *a1) >> 2;
  memset(v7, 0, sizeof(v7));
  std::vector<applesauce::CF::NumberRef>::reserve((uint64_t *)v7, v2);
  v4 = (_DWORD *)*a1;
  v3 = (_DWORD *)a1[1];
  while (v4 != v3)
  {
    LODWORD(v8) = *v4;
    std::vector<applesauce::CF::NumberRef>::emplace_back<float>((uint64_t *)v7, (int *)&v8);
    ++v4;
  }
  v5 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(v7);
  v8 = (void **)v7;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&v8);
  return v5;
}

void sub_191C8BA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

CFNumberRef *std::vector<applesauce::CF::NumberRef>::emplace_back<float>(uint64_t *a1, int *a2)
{
  unint64_t v4;
  uint64_t v5;
  CFNumberRef *v6;
  CFNumberRef *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void *v14;
  CFNumberRef *v15;
  CFNumberRef *v16;
  char *v17;
  uint64_t *v18;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = (CFNumberRef *)a1[1];
  if ((unint64_t)v6 >= v4)
  {
    v8 = ((uint64_t)v6 - *a1) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v9 = v4 - *a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v18 = a1 + 2;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), v11);
    else
      v12 = 0;
    v14 = v12;
    v15 = (CFNumberRef *)&v12[8 * v8];
    v17 = &v12[8 * v11];
    std::allocator<applesauce::CF::NumberRef>::construct[abi:ne180100]<applesauce::CF::NumberRef,float>(v5, v15, a2);
    v16 = v15 + 1;
    std::vector<applesauce::CF::NumberRef>::__swap_out_circular_buffer(a1, &v14);
    v7 = (CFNumberRef *)a1[1];
    std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer(&v14);
  }
  else
  {
    std::allocator<applesauce::CF::NumberRef>::construct[abi:ne180100]<applesauce::CF::NumberRef,float>((uint64_t)(a1 + 2), v6, a2);
    v7 = v6 + 1;
    a1[1] = (uint64_t)(v6 + 1);
  }
  a1[1] = (uint64_t)v7;
  return v7 - 1;
}

void sub_191C8BBB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

CFNumberRef std::allocator<applesauce::CF::NumberRef>::construct[abi:ne180100]<applesauce::CF::NumberRef,float>(uint64_t a1, CFNumberRef *a2, int *a3)
{
  CFNumberRef result;
  std::runtime_error *exception;
  int valuePtr;

  valuePtr = *a3;
  result = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *a2 = result;
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_191C8BC58(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

corelm::LanguageModelWithState *corelm::LanguageModelWithState::LanguageModelWithState(corelm::LanguageModelWithState *this, const corelm::LanguageModelWithState *a2, int a3)
{
  uint64_t *v5;
  _QWORD *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v10;
  unsigned __int8 v11;

  *(_QWORD *)this = &unk_1E2DF1978;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
  *((_BYTE *)this + 40) = 0;
  v5 = (uint64_t *)((char *)this + 40);
  *((_BYTE *)this + 48) = 0;
  v6 = (_QWORD *)((char *)this + 56);
  *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  if (a3)
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v6, *((const void **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
  v7 = (const void *)(*(uint64_t (**)(const corelm::LanguageModelWithState *))(*(_QWORD *)a2 + 112))(a2);
  *((_QWORD *)this + 10) = CFRetain(v7);
  *((_QWORD *)this + 11) = 0;
  (*(void (**)(uint64_t *__return_ptr, const corelm::LanguageModelWithState *))(*(_QWORD *)a2 + 72))(&v10, a2);
  if (*((unsigned __int8 *)this + 48) == v11)
  {
    if (*((_BYTE *)this + 48))
    {
      v8 = *v5;
      *v5 = v10;
      v10 = v8;
    }
  }
  else if (*((_BYTE *)this + 48))
  {
    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::reset[abi:ne180100]((uint64_t)v5);
  }
  else
  {
    *((_QWORD *)this + 5) = v10;
    v10 = 0;
    *((_BYTE *)this + 48) = 1;
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v10);
  *((_QWORD *)this + 11) = (*(uint64_t (**)(const corelm::LanguageModelWithState *))(*(_QWORD *)a2 + 128))(a2);
  return this;
}

const __CFBoolean *applesauce::CF::details::find_at_key_or_optional<unsigned long,__CFString const* const&>(const __CFDictionary *a1, const void **a2)
{
  const __CFBoolean *result;

  result = applesauce::CF::details::at_key<__CFString const* const&>(a1, a2);
  if (result)
    return applesauce::CF::convert_as<unsigned long,0>(result);
  return result;
}

const __CFBoolean *applesauce::CF::convert_as<unsigned long,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;

  if (a1 && (TypeID = CFNumberGetTypeID(), TypeID == CFGetTypeID(a1)))
    return (const __CFBoolean *)applesauce::CF::details::number_convert_as<unsigned long>(a1);
  else
    return applesauce::CF::details::treat_as_BOOL_for_convert_as<long>(a1);
}

unint64_t applesauce::CF::details::number_convert_as<unsigned long>(const __CFNumber *a1)
{
  const __CFNumber *v2;
  CFNumberType v3;
  unint64_t v4;
  unint64_t v5;
  const __CFNumber *v6;
  CFNumberType v7;
  const __CFNumber *v8;
  CFNumberType v9;
  const __CFNumber *v10;
  CFNumberType v11;
  const __CFNumber *v12;
  CFNumberType v13;
  const __CFNumber *v14;
  CFNumberType v15;
  int Value;
  char v17;
  BOOL v18;
  unsigned __int8 v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  double valuePtr;

  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      v6 = a1;
      v7 = kCFNumberSInt16Type;
      goto LABEL_18;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      v8 = a1;
      v9 = kCFNumberSInt32Type;
      goto LABEL_20;
    case kCFNumberSInt64Type:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberSInt64Type;
      goto LABEL_31;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      v12 = a1;
      v13 = kCFNumberFloat32Type;
      goto LABEL_27;
    case kCFNumberFloat64Type:
      valuePtr = 0.0;
      v14 = a1;
      v15 = kCFNumberFloat64Type;
      goto LABEL_33;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberCharType;
LABEL_10:
      Value = CFNumberGetValue(v2, v3, &valuePtr);
      if (Value)
        v17 = LOBYTE(valuePtr);
      else
        v17 = 0;
      if (Value != 0 && SLOBYTE(valuePtr) < 0)
        v4 = -256;
      else
        v4 = 0;
      LOBYTE(v5) = v17;
      return v5 | v4;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      v6 = a1;
      v7 = kCFNumberShortType;
LABEL_18:
      v18 = CFNumberGetValue(v6, v7, &valuePtr) == 0;
      v19 = LOBYTE(valuePtr);
      v20 = SLOWORD(valuePtr);
      goto LABEL_21;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      v8 = a1;
      v9 = kCFNumberIntType;
LABEL_20:
      v18 = CFNumberGetValue(v8, v9, &valuePtr) == 0;
      v19 = LOBYTE(valuePtr);
      v20 = SLODWORD(valuePtr);
LABEL_21:
      v21 = v20 & 0xFFFFFFFFFFFFFF00 | v19;
      if (v18)
        v5 = 0;
      else
        v5 = v21;
      goto LABEL_37;
    case kCFNumberLongType:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberLongType;
      goto LABEL_31;
    case kCFNumberLongLongType:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberLongLongType;
      goto LABEL_31;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      v12 = a1;
      v13 = kCFNumberFloatType;
LABEL_27:
      v22 = CFNumberGetValue(v12, v13, &valuePtr) == 0;
      v5 = (unint64_t)*(float *)&valuePtr;
      goto LABEL_34;
    case kCFNumberDoubleType:
      valuePtr = 0.0;
      v14 = a1;
      v15 = kCFNumberDoubleType;
      goto LABEL_33;
    case kCFNumberCFIndexType:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberCFIndexType;
      goto LABEL_31;
    case kCFNumberNSIntegerType:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberNSIntegerType;
LABEL_31:
      v22 = CFNumberGetValue(v10, v11, &valuePtr) == 0;
      v5 = *(_QWORD *)&valuePtr;
      goto LABEL_34;
    case kCFNumberCGFloatType:
      valuePtr = 0.0;
      v14 = a1;
      v15 = kCFNumberCGFloatType;
LABEL_33:
      v22 = CFNumberGetValue(v14, v15, &valuePtr) == 0;
      v5 = (unint64_t)valuePtr;
LABEL_34:
      if (v22)
        v5 = 0;
LABEL_37:
      v4 = v5 & 0xFFFFFFFFFFFFFF00;
      break;
    default:
      v4 = 0;
      LOBYTE(v5) = 0;
      break;
  }
  return v5 | v4;
}

uint64_t applesauce::CF::convert_as<int,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;

  if (a1 && (TypeID = CFNumberGetTypeID(), TypeID == CFGetTypeID(a1)))
    return applesauce::CF::details::number_convert_as<int>(a1);
  else
    return applesauce::CF::details::treat_as_BOOL_for_convert_as<int>(a1);
}

uint64_t applesauce::CF::details::treat_as_BOOL_for_convert_as<int>(const __CFBoolean *a1)
{
  CFTypeID TypeID;
  uint64_t Value;
  uint64_t v4;

  if (a1 && (TypeID = CFBooleanGetTypeID(), TypeID == CFGetTypeID(a1)))
  {
    Value = CFBooleanGetValue(a1);
    v4 = 0x100000000;
  }
  else
  {
    Value = 0;
    v4 = 0;
  }
  return v4 | Value;
}

uint64_t applesauce::CF::details::number_convert_as<int>(const __CFNumber *a1)
{
  const __CFNumber *v2;
  CFNumberType v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  const __CFNumber *v7;
  CFNumberType v8;
  const __CFNumber *v9;
  CFNumberType v10;
  const __CFNumber *v11;
  CFNumberType v12;
  const __CFNumber *v13;
  CFNumberType v14;
  int Value;
  uint64_t v16;
  unsigned __int8 v17;
  int v18;
  int v19;
  uint64_t v20;
  double valuePtr;

  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberSInt16Type;
      goto LABEL_17;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      v9 = a1;
      v10 = kCFNumberSInt32Type;
      goto LABEL_28;
    case kCFNumberSInt64Type:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberSInt64Type;
      goto LABEL_28;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      v11 = a1;
      v12 = kCFNumberFloat32Type;
      goto LABEL_24;
    case kCFNumberFloat64Type:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberFloat64Type;
      goto LABEL_30;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberCharType;
LABEL_10:
      Value = CFNumberGetValue(v2, v3, &valuePtr);
      v16 = Value != 0;
      if (Value)
        v17 = LOBYTE(valuePtr);
      else
        v17 = 0;
      v18 = -256;
      if ((v16 & (SLOBYTE(valuePtr) < 0)) == 0)
        v18 = 0;
      v5 = v16 << 32;
      LODWORD(v6) = v18 & 0xFFFFFF00 | v17;
      v4 = v6 & 0xFFFFFF00;
      return v5 | v4 & 0xFFFFFF00 | v6;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberShortType;
LABEL_17:
      if (CFNumberGetValue(v7, v8, &valuePtr))
        v6 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000;
      else
        v6 = 0;
      goto LABEL_33;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      v9 = a1;
      v10 = kCFNumberIntType;
      goto LABEL_28;
    case kCFNumberLongType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberLongType;
      goto LABEL_28;
    case kCFNumberLongLongType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberLongLongType;
      goto LABEL_28;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      v11 = a1;
      v12 = kCFNumberFloatType;
LABEL_24:
      v19 = CFNumberGetValue(v11, v12, &valuePtr);
      v20 = (int)*(float *)&valuePtr;
      goto LABEL_31;
    case kCFNumberDoubleType:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberDoubleType;
      goto LABEL_30;
    case kCFNumberCFIndexType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberCFIndexType;
      goto LABEL_28;
    case kCFNumberNSIntegerType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberNSIntegerType;
LABEL_28:
      v19 = CFNumberGetValue(v9, v10, &valuePtr);
      v20 = LODWORD(valuePtr);
      goto LABEL_31;
    case kCFNumberCGFloatType:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberCGFloatType;
LABEL_30:
      v19 = CFNumberGetValue(v13, v14, &valuePtr);
      v20 = (int)valuePtr;
LABEL_31:
      v6 = v20 | 0x100000000;
      if (!v19)
        v6 = 0;
LABEL_33:
      v4 = v6 & 0xFFFFFF00;
      v5 = v6 & 0x100000000;
      break;
    default:
      v4 = 0;
      v5 = 0;
      LOBYTE(v6) = 0;
      break;
  }
  return v5 | v4 & 0xFFFFFF00 | v6;
}

uint64_t applesauce::CF::convert_as<float,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;

  if (a1 && (TypeID = CFNumberGetTypeID(), TypeID == CFGetTypeID(a1)))
    return applesauce::CF::details::number_convert_as<float>(a1);
  else
    return applesauce::CF::details::treat_as_BOOL_for_convert_as<float>(a1);
}

uint64_t applesauce::CF::details::treat_as_BOOL_for_convert_as<float>(const __CFBoolean *a1)
{
  CFTypeID TypeID;
  uint64_t v3;
  uint64_t v4;

  if (a1 && (TypeID = CFBooleanGetTypeID(), TypeID == CFGetTypeID(a1)))
  {
    v3 = COERCE_UNSIGNED_INT((float)CFBooleanGetValue(a1));
    v4 = 0x100000000;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  return v3 | v4;
}

uint64_t applesauce::CF::details::number_convert_as<float>(const __CFNumber *a1)
{
  const __CFNumber *v2;
  CFNumberType v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  const __CFNumber *v7;
  CFNumberType v8;
  const __CFNumber *v9;
  CFNumberType v10;
  const __CFNumber *v11;
  CFNumberType v12;
  const __CFNumber *v13;
  CFNumberType v14;
  const __CFNumber *v15;
  CFNumberType v16;
  int Value;
  int v18;
  float v19;
  uint64_t v20;
  double valuePtr;

  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberSInt16Type;
      goto LABEL_12;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      v9 = a1;
      v10 = kCFNumberSInt32Type;
      goto LABEL_15;
    case kCFNumberSInt64Type:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberSInt64Type;
      goto LABEL_23;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      v13 = a1;
      v14 = kCFNumberFloat32Type;
      goto LABEL_19;
    case kCFNumberFloat64Type:
      valuePtr = 0.0;
      v15 = a1;
      v16 = kCFNumberFloat64Type;
      goto LABEL_25;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberCharType;
LABEL_10:
      Value = CFNumberGetValue(v2, v3, &valuePtr);
      v18 = SLOBYTE(valuePtr);
      goto LABEL_13;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberShortType;
LABEL_12:
      Value = CFNumberGetValue(v7, v8, &valuePtr);
      v18 = SLOWORD(valuePtr);
LABEL_13:
      v19 = (float)v18;
      goto LABEL_26;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      v9 = a1;
      v10 = kCFNumberIntType;
LABEL_15:
      Value = CFNumberGetValue(v9, v10, &valuePtr);
      v19 = (float)SLODWORD(valuePtr);
      goto LABEL_26;
    case kCFNumberLongType:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberLongType;
      goto LABEL_23;
    case kCFNumberLongLongType:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberLongLongType;
      goto LABEL_23;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      v13 = a1;
      v14 = kCFNumberFloatType;
LABEL_19:
      Value = CFNumberGetValue(v13, v14, &valuePtr);
      v20 = LODWORD(valuePtr);
      goto LABEL_27;
    case kCFNumberDoubleType:
      valuePtr = 0.0;
      v15 = a1;
      v16 = kCFNumberDoubleType;
      goto LABEL_25;
    case kCFNumberCFIndexType:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberCFIndexType;
      goto LABEL_23;
    case kCFNumberNSIntegerType:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberNSIntegerType;
LABEL_23:
      Value = CFNumberGetValue(v11, v12, &valuePtr);
      v19 = (float)*(uint64_t *)&valuePtr;
      goto LABEL_26;
    case kCFNumberCGFloatType:
      valuePtr = 0.0;
      v15 = a1;
      v16 = kCFNumberCGFloatType;
LABEL_25:
      Value = CFNumberGetValue(v15, v16, &valuePtr);
      v19 = valuePtr;
LABEL_26:
      v20 = LODWORD(v19);
LABEL_27:
      v6 = v20 | 0x100000000;
      if (!Value)
        v6 = 0;
      v4 = v6 & 0xFFFFFF00;
      v5 = v6 & 0x100000000;
      break;
    default:
      v4 = 0;
      v5 = 0;
      LOBYTE(v6) = 0;
      break;
  }
  return v5 | v4 & 0xFFFFFF00 | v6;
}

void **std::vector<applesauce::CF::TypeRefPair>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 16 * v6;
    std::vector<applesauce::CF::TypeRefPair>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer(v7);
  }
  return result;
}

void sub_191C8C670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<applesauce::CF::TypeRefPair>::emplace_back<std::string const&,float const&>(uint64_t *a1, const UInt8 *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  void *v17;
  CFStringRef *v18;
  CFStringRef *v19;
  char *v20;
  uint64_t v21;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 8);
  if (v9 >= v8)
  {
    v11 = (uint64_t)(v9 - *a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v12 = v7 - *a1;
    v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v21 = v6;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>(v6, v14);
    else
      v15 = 0;
    v17 = v15;
    v18 = (CFStringRef *)&v15[16 * v11];
    v20 = &v15[16 * v14];
    applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,float const&>(v18, a2, a3);
    v19 = v18 + 2;
    std::vector<applesauce::CF::TypeRefPair>::__swap_out_circular_buffer(a1, &v17);
    v10 = a1[1];
    std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer(&v17);
  }
  else
  {
    applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,float const&>(*(CFStringRef **)(v6 - 8), a2, a3);
    v10 = v9 + 16;
    a1[1] = v9 + 16;
  }
  a1[1] = v10;
  return v10 - 16;
}

void sub_191C8C784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

CFDictionaryRef applesauce::CF::details::make_CFDictionaryRef(void ***a1)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void *v5;
  void **v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void **v12;
  void **v13;
  void **v14;
  void *v15;
  void *v16;
  void **v17;
  void **v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  void **v23;
  void **v24;
  void **v25;
  void *v26;
  CFDictionaryRef v27;
  std::runtime_error *exception;
  std::runtime_error *v30;
  void **values;
  void **v32;
  void **v33;
  void **keys;
  void **v35;
  void **v36;

  v2 = ((char *)a1[1] - (char *)*a1) >> 4;
  keys = 0;
  v35 = 0;
  v36 = 0;
  std::vector<void const*>::reserve((void **)&keys, v2);
  values = 0;
  v32 = 0;
  v33 = 0;
  std::vector<void const*>::reserve((void **)&values, v2);
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      v5 = *v3;
      if (!*v3 || !v3[1])
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v6 = v35;
      if (v35 >= v36)
      {
        v8 = v35 - keys;
        if ((unint64_t)(v8 + 1) >> 61)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v9 = ((char *)v36 - (char *)keys) >> 2;
        if (v9 <= v8 + 1)
          v9 = v8 + 1;
        if ((unint64_t)((char *)v36 - (char *)keys) >= 0x7FFFFFFFFFFFFFF8)
          v10 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v36, v10);
        else
          v11 = 0;
        v12 = (void **)&v11[8 * v8];
        *v12 = v5;
        v7 = v12 + 1;
        v14 = keys;
        v13 = v35;
        if (v35 != keys)
        {
          do
          {
            v15 = *--v13;
            *--v12 = v15;
          }
          while (v13 != v14);
          v13 = keys;
        }
        keys = v12;
        v35 = v7;
        v36 = (void **)&v11[8 * v10];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v35 = v5;
        v7 = v6 + 1;
      }
      v35 = v7;
      v16 = v3[1];
      v17 = v32;
      if (v32 >= v33)
      {
        v19 = v32 - values;
        if ((unint64_t)(v19 + 1) >> 61)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v20 = ((char *)v33 - (char *)values) >> 2;
        if (v20 <= v19 + 1)
          v20 = v19 + 1;
        if ((unint64_t)((char *)v33 - (char *)values) >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v33, v21);
        else
          v22 = 0;
        v23 = (void **)&v22[8 * v19];
        *v23 = v16;
        v18 = v23 + 1;
        v25 = values;
        v24 = v32;
        if (v32 != values)
        {
          do
          {
            v26 = *--v24;
            *--v23 = v26;
          }
          while (v24 != v25);
          v24 = values;
        }
        values = v23;
        v32 = v18;
        v33 = (void **)&v22[8 * v21];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *v32 = v16;
        v18 = v17 + 1;
      }
      v32 = v18;
      v3 += 2;
    }
    while (v3 != v4);
  }
  v27 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v27)
  {
    v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v30, "Could not construct");
    __cxa_throw(v30, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (values)
  {
    v32 = values;
    operator delete(values);
  }
  if (keys)
  {
    v35 = keys;
    operator delete(keys);
  }
  return v27;
}

void sub_191C8CA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  void *v13;

  __cxa_free_exception(v13);
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(a1);
}

uint64_t std::vector<applesauce::CF::TypeRefPair>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<applesauce::CF::TypeRefPair>,std::reverse_iterator<applesauce::CF::TypeRefPair*>,std::reverse_iterator<applesauce::CF::TypeRefPair*>,std::reverse_iterator<applesauce::CF::TypeRefPair*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<applesauce::CF::TypeRefPair>,std::reverse_iterator<applesauce::CF::TypeRefPair*>,std::reverse_iterator<applesauce::CF::TypeRefPair*>,std::reverse_iterator<applesauce::CF::TypeRefPair*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(a3 - 2);
      a3 -= 2;
      *(_QWORD *)(v8 - 16) = v9;
      v8 -= 16;
      *a3 = 0;
      *(_QWORD *)(v8 + 8) = a3[1];
      a3[1] = 0;
      v7 -= 16;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<applesauce::CF::TypeRefPair>,std::reverse_iterator<applesauce::CF::TypeRefPair*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<applesauce::CF::TypeRefPair>,std::reverse_iterator<applesauce::CF::TypeRefPair*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<applesauce::CF::TypeRefPair>,std::reverse_iterator<applesauce::CF::TypeRefPair*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<applesauce::CF::TypeRefPair>,std::reverse_iterator<applesauce::CF::TypeRefPair*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<applesauce::CF::TypeRefPair>::destroy[abi:ne180100](v3, v1);
      v1 += 16;
    }
    while (v1 != v2);
  }
}

void std::allocator<applesauce::CF::TypeRefPair>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  const void *v3;

  v3 = *(const void **)(a2 + 8);
  if (v3)
    CFRelease(v3);
  if (*(_QWORD *)a2)
    CFRelease(*(CFTypeRef *)a2);
}

void **std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer(void **a1)
{
  std::__split_buffer<applesauce::CF::TypeRefPair>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<applesauce::CF::TypeRefPair>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 16;
    std::allocator<applesauce::CF::TypeRefPair>::destroy[abi:ne180100](v4, i - 16);
  }
}

CFStringRef *applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,float const&>(CFStringRef *a1, const UInt8 *a2, int *a3)
{
  CFIndex v5;
  CFIndex v6;
  CFStringRef v7;
  CFNumberRef v8;
  std::runtime_error *exception;
  std::runtime_error *v11;
  int valuePtr;

  v5 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v6 = v5;
  }
  v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  valuePtr = *a3;
  v8 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  a1[1] = (CFStringRef)v8;
  if (!v8)
  {
    v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
    __cxa_throw(v11, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_191C8CE00(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

void std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::allocator<applesauce::CF::TypeRefPair>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 applesauce::CF::convert_or<std::vector<std::vector<long>>,0>@<Q0>(const __CFArray *a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X8>)
{
  __n128 result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void **v9;

  applesauce::CF::convert_as<std::vector<std::vector<long>>,0>(a1, &v6);
  if (v8)
  {
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    std::vector<std::vector<long>>::__init_with_size[abi:ne180100]<std::vector<long>*,std::vector<long>*>(a3, v6, v7, 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3));
    if (v8)
    {
      v9 = (void **)&v6;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v9);
    }
  }
  else
  {
    result = *a2;
    *a3 = *a2;
    a3[1].n128_u64[0] = a2[1].n128_u64[0];
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
  }
  return result;
}

void applesauce::CF::convert_as<std::vector<std::vector<long>>,0>(const __CFArray *a1@<X0>, _BYTE *a2@<X8>)
{
  CFTypeID TypeID;

  if (a1 && (TypeID = CFArrayGetTypeID(), TypeID == CFGetTypeID(a1)))
  {
    applesauce::CF::details::CFArray_get_value_as<std::vector<std::vector<long>>>(a1, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[24] = 0;
  }
}

void applesauce::CF::details::CFArray_get_value_as<std::vector<std::vector<long>>>(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  int Count;
  CFIndex v5;
  const __CFArray *ValueAtIndex;
  void *__p[3];
  char v8;
  __int128 v9;
  uint64_t v10;

  Count = CFArrayGetCount(a1);
  v9 = 0uLL;
  v10 = 0;
  std::vector<std::vector<long>>::reserve((uint64_t *)&v9, Count);
  if (Count < 1)
  {
LABEL_8:
    *(_OWORD *)a2 = v9;
    *(_QWORD *)(a2 + 16) = v10;
    v10 = 0;
    v9 = 0uLL;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    v5 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(a1, v5);
      applesauce::CF::convert_as<std::vector<long>,0>(ValueAtIndex, __p);
      if (!v8)
        break;
      std::vector<std::vector<long>>::emplace_back<std::vector<long>>((uint64_t *)&v9, (uint64_t)__p);
      if (v8 && __p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (Count == ++v5)
        goto LABEL_8;
    }
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  __p[0] = &v9;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

uint64_t std::vector<std::vector<long>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<long>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_191C8D170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<long>>::emplace_back<std::vector<long>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v17[4] = v4;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v12);
    v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    std::vector<std::vector<long>>::__swap_out_circular_buffer(a1, v17);
    v8 = (_QWORD *)a1[1];
    std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_191C8D2B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<long>>::__init_with_size[abi:ne180100]<std::vector<long>*,std::vector<long>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<long>>,std::vector<long>*,std::vector<long>*,std::vector<long>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_191C8D328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<long>>,std::vector<long>*,std::vector<long>*,std::vector<long>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long>>,std::vector<long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_191C8D3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long>>,std::vector<long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<applesauce::CF::TypeRefPair>::emplace_back<unsigned long const&,std::vector<unsigned long> const&>(uint64_t *a1, uint64_t *a2, void ****a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  void *v17;
  CFNumberRef *v18;
  CFNumberRef *v19;
  char *v20;
  uint64_t v21;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 8);
  if (v9 >= v8)
  {
    v11 = (uint64_t)(v9 - *a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v12 = v7 - *a1;
    v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v21 = v6;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>(v6, v14);
    else
      v15 = 0;
    v17 = v15;
    v18 = (CFNumberRef *)&v15[16 * v11];
    v20 = &v15[16 * v14];
    applesauce::CF::TypeRefPair::TypeRefPair<unsigned long const&,std::vector<unsigned long> const&>(v18, a2, a3);
    v19 = v18 + 2;
    std::vector<applesauce::CF::TypeRefPair>::__swap_out_circular_buffer(a1, &v17);
    v10 = a1[1];
    std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer(&v17);
  }
  else
  {
    applesauce::CF::TypeRefPair::TypeRefPair<unsigned long const&,std::vector<unsigned long> const&>(*(CFNumberRef **)(v6 - 8), a2, a3);
    v10 = v9 + 16;
    a1[1] = v9 + 16;
  }
  a1[1] = v10;
  return v10 - 16;
}

void sub_191C8D4F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

CFNumberRef *applesauce::CF::TypeRefPair::TypeRefPair<unsigned long const&,std::vector<unsigned long> const&>(CFNumberRef *a1, uint64_t *a2, void ****a3)
{
  CFNumberRef v5;
  std::runtime_error *exception;
  uint64_t valuePtr;

  valuePtr = *a2;
  v5 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  *a1 = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  a1[1] = applesauce::CF::details::make_CFArrayRef<unsigned long>(a3);
  return a1;
}

void sub_191C8D5AC(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<unsigned long>(void ****a1)
{
  unint64_t v2;
  void ***v3;
  void ***v4;
  CFArrayRef v5;
  uint64_t *v7[3];
  void **v8;

  v2 = a1[1] - *a1;
  memset(v7, 0, sizeof(v7));
  std::vector<applesauce::CF::NumberRef>::reserve((uint64_t *)v7, v2);
  v4 = *a1;
  v3 = a1[1];
  while (v4 != v3)
  {
    v8 = *v4;
    std::vector<applesauce::CF::NumberRef>::emplace_back<unsigned long>((uint64_t *)v7, (uint64_t *)&v8);
    ++v4;
  }
  v5 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(v7);
  v8 = (void **)v7;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&v8);
  return v5;
}

void sub_191C8D670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

CFNumberRef *std::vector<applesauce::CF::NumberRef>::emplace_back<unsigned long>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  CFNumberRef *v6;
  CFNumberRef *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void *v14;
  CFNumberRef *v15;
  CFNumberRef *v16;
  char *v17;
  uint64_t *v18;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = (CFNumberRef *)a1[1];
  if ((unint64_t)v6 >= v4)
  {
    v8 = ((uint64_t)v6 - *a1) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v9 = v4 - *a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v18 = a1 + 2;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), v11);
    else
      v12 = 0;
    v14 = v12;
    v15 = (CFNumberRef *)&v12[8 * v8];
    v17 = &v12[8 * v11];
    std::allocator<applesauce::CF::NumberRef>::construct[abi:ne180100]<applesauce::CF::NumberRef,unsigned long>(v5, v15, a2);
    v16 = v15 + 1;
    std::vector<applesauce::CF::NumberRef>::__swap_out_circular_buffer(a1, &v14);
    v7 = (CFNumberRef *)a1[1];
    std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer(&v14);
  }
  else
  {
    std::allocator<applesauce::CF::NumberRef>::construct[abi:ne180100]<applesauce::CF::NumberRef,unsigned long>((uint64_t)(a1 + 2), v6, a2);
    v7 = v6 + 1;
    a1[1] = (uint64_t)(v6 + 1);
  }
  a1[1] = (uint64_t)v7;
  return v7 - 1;
}

void sub_191C8D794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

CFNumberRef std::allocator<applesauce::CF::NumberRef>::construct[abi:ne180100]<applesauce::CF::NumberRef,unsigned long>(uint64_t a1, CFNumberRef *a2, uint64_t *a3)
{
  CFNumberRef result;
  std::runtime_error *exception;
  uint64_t valuePtr;

  valuePtr = *a3;
  result = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  *a2 = result;
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_191C8D834(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

void applesauce::CF::convert_to<std::map<unsigned long,std::vector<unsigned long>>,0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID TypeID;
  std::runtime_error *exception;

  if (!a1 || (TypeID = CFDictionaryGetTypeID(), TypeID != CFGetTypeID(a1)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::CFDictionary_get_value_to<std::map<unsigned long,std::vector<unsigned long>>>((const __CFDictionary *)a1, a2);
}

void sub_191C8D8D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::details::CFDictionary_get_value_to<std::map<unsigned long,std::vector<unsigned long>>>(const __CFDictionary *a1@<X0>, uint64_t a2@<X8>)
{
  CFIndex Count;
  uint64_t i;
  const __CFBoolean *v6;
  void *v7[2];
  uint64_t v8;
  const __CFBoolean *v9;
  void *__p[2];
  uint64_t v11;
  void **values[3];
  void *v13[3];

  Count = CFDictionaryGetCount(a1);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  std::vector<void const*>::vector(v13, Count);
  std::vector<void const*>::vector(values, Count);
  CFDictionaryGetKeysAndValues(a1, (const void **)v13[0], (const void **)values[0]);
  if (Count)
  {
    for (i = 0; i != Count; ++i)
    {
      v6 = applesauce::CF::convert_to<unsigned long,0>(*((const __CFNumber **)v13[0] + i));
      applesauce::CF::convert_to<std::vector<unsigned long>,0>(values[0][i], (uint64_t)v7);
      v9 = v6;
      *(_OWORD *)__p = *(_OWORD *)v7;
      v11 = v8;
      v7[0] = 0;
      v7[1] = 0;
      v8 = 0;
      std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,std::vector<unsigned long>>>((uint64_t **)a2, (unint64_t *)&v9, (uint64_t)&v9);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v7[0])
      {
        v7[1] = v7[0];
        operator delete(v7[0]);
      }
    }
  }
  if (values[0])
  {
    values[1] = values[0];
    operator delete(values[0]);
  }
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
}

void sub_191C8D9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  void *v21;

  if (__p)
    operator delete(__p);
  v21 = *(void **)(v19 - 56);
  if (v21)
  {
    *(_QWORD *)(v19 - 48) = v21;
    operator delete(v21);
  }
  std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::destroy(v18, *(_QWORD **)(v18 + 8));
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,std::vector<unsigned long>>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  char *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (char *)operator new(0x40uLL);
    *((_QWORD *)v10 + 4) = *(_QWORD *)a3;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
    *((_QWORD *)v10 + 7) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

const __CFBoolean *applesauce::CF::convert_to<unsigned long,0>(const __CFNumber *a1)
{
  const __CFBoolean *result;
  char v2;
  std::runtime_error *exception;

  result = applesauce::CF::convert_as<unsigned long,0>(a1);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_191C8DB94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::convert_to<std::vector<unsigned long>,0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID TypeID;
  std::runtime_error *exception;

  if (!a1 || (TypeID = CFArrayGetTypeID(), TypeID != CFGetTypeID(a1)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::CFArray_get_value_to<std::vector<unsigned long>>((const __CFArray *)a1, a2);
}

void sub_191C8DC20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::details::CFArray_get_value_to<std::vector<unsigned long>>(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  int Count;
  CFIndex v5;
  uint64_t v6;
  const __CFNumber *ValueAtIndex;
  const __CFBoolean *v8;
  const __CFBoolean *v9;
  unint64_t v10;
  const __CFBoolean **v11;
  _QWORD *v12;
  const __CFBoolean **v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  const __CFBoolean **v19;
  const __CFBoolean *v20;

  Count = CFArrayGetCount(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  std::vector<unsigned long>::reserve((void **)a2, Count);
  if (Count >= 1)
  {
    v5 = 0;
    v6 = Count;
    do
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, v5);
      v8 = applesauce::CF::convert_to<unsigned long,0>(ValueAtIndex);
      v9 = v8;
      v11 = *(const __CFBoolean ***)(a2 + 8);
      v10 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *(const __CFBoolean ***)a2;
        v14 = ((uint64_t)v11 - *(_QWORD *)a2) >> 3;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v16 = v10 - (_QWORD)v13;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a2 + 16, v17);
          v13 = *(const __CFBoolean ***)a2;
          v11 = *(const __CFBoolean ***)(a2 + 8);
        }
        else
        {
          v18 = 0;
        }
        v19 = (const __CFBoolean **)&v18[8 * v14];
        *v19 = v9;
        v12 = v19 + 1;
        while (v11 != v13)
        {
          v20 = *--v11;
          *--v19 = v20;
        }
        *(_QWORD *)a2 = v19;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v18[8 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      *(_QWORD *)(a2 + 8) = v12;
      ++v5;
    }
    while (v5 != v6);
  }
}

void sub_191C8DD74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void applesauce::CF::convert_to<std::vector<long>,0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID TypeID;
  std::runtime_error *exception;

  if (!a1 || (TypeID = CFArrayGetTypeID(), TypeID != CFGetTypeID(a1)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::CFArray_get_value_to<std::vector<long>>((const __CFArray *)a1, a2);
}

void sub_191C8DE10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::details::CFArray_get_value_to<std::vector<long>>(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  int Count;
  CFIndex v5;
  uint64_t v6;
  const __CFNumber *ValueAtIndex;
  const __CFBoolean *v8;
  const __CFBoolean *v9;
  unint64_t v10;
  const __CFBoolean **v11;
  _QWORD *v12;
  const __CFBoolean **v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  const __CFBoolean **v19;
  const __CFBoolean *v20;

  Count = CFArrayGetCount(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  std::vector<unsigned long>::reserve((void **)a2, Count);
  if (Count >= 1)
  {
    v5 = 0;
    v6 = Count;
    do
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, v5);
      v8 = applesauce::CF::convert_to<long,0>(ValueAtIndex);
      v9 = v8;
      v11 = *(const __CFBoolean ***)(a2 + 8);
      v10 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *(const __CFBoolean ***)a2;
        v14 = ((uint64_t)v11 - *(_QWORD *)a2) >> 3;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v16 = v10 - (_QWORD)v13;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a2 + 16, v17);
          v13 = *(const __CFBoolean ***)a2;
          v11 = *(const __CFBoolean ***)(a2 + 8);
        }
        else
        {
          v18 = 0;
        }
        v19 = (const __CFBoolean **)&v18[8 * v14];
        *v19 = v9;
        v12 = v19 + 1;
        while (v11 != v13)
        {
          v20 = *--v11;
          *--v19 = v20;
        }
        *(_QWORD *)a2 = v19;
        *(_QWORD *)(a2 + 8) = v12;
        *(_QWORD *)(a2 + 16) = &v18[8 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      *(_QWORD *)(a2 + 8) = v12;
      ++v5;
    }
    while (v5 != v6);
  }
}

void sub_191C8DF64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<long>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<long>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_191C8E0B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<long>::resize(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<long>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<long>::__append(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 8)
    {
      v25 = *((_QWORD *)i - 1);
      *((_QWORD *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<std::vector<long>>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  void ****v4;
  uint64_t v5;
  CFArrayRef v6;
  uint64_t *v8[3];
  void **v9;

  v2 = *(_QWORD *)(a1 + 8);
  memset(v8, 0, sizeof(v8));
  std::vector<applesauce::CF::ArrayRef>::reserve((uint64_t *)v8, v2);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(void *****)a1;
    v5 = 24 * v3;
    do
    {
      std::vector<applesauce::CF::ArrayRef>::emplace_back<std::vector<long> const&>((uint64_t *)v8, v4);
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  v6 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(v8);
  v9 = (void **)v8;
  std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100](&v9);
  return v6;
}

void sub_191C8E288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void **std::vector<applesauce::CF::ArrayRef>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 8 * v6;
    std::vector<applesauce::CF::ArrayRef>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<applesauce::CF::ArrayRef>::~__split_buffer(v7);
  }
  return result;
}

void sub_191C8E324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<applesauce::CF::ArrayRef>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<applesauce::CF::ArrayRef>::emplace_back<std::vector<long> const&>(uint64_t *a1, void ****a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  CFArrayRef *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *v15;
  CFArrayRef *v16;
  CFArrayRef *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(CFArrayRef **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((uint64_t)v7 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v10 = v5 - *a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v19 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
    else
      v13 = 0;
    v15 = v13;
    v16 = (CFArrayRef *)&v13[8 * v9];
    v17 = v16;
    v18 = &v13[8 * v12];
    *v16 = applesauce::CF::details::make_CFArrayRef<long>(a2);
    ++v17;
    std::vector<applesauce::CF::ArrayRef>::__swap_out_circular_buffer(a1, &v15);
    v8 = (_QWORD *)a1[1];
    std::__split_buffer<applesauce::CF::ArrayRef>::~__split_buffer(&v15);
  }
  else
  {
    *v7 = applesauce::CF::details::make_CFArrayRef<long>(a2);
    v8 = v7 + 1;
    a1[1] = (uint64_t)v8;
  }
  a1[1] = (uint64_t)v8;
  return v8 - 1;
}

void sub_191C8E428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<applesauce::CF::ArrayRef>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<applesauce::CF::ArrayRef>,std::reverse_iterator<applesauce::CF::ArrayRef*>,std::reverse_iterator<applesauce::CF::ArrayRef*>,std::reverse_iterator<applesauce::CF::ArrayRef*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<applesauce::CF::ArrayRef>,std::reverse_iterator<applesauce::CF::ArrayRef*>,std::reverse_iterator<applesauce::CF::ArrayRef*>,std::reverse_iterator<applesauce::CF::ArrayRef*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *--a3;
      *(_QWORD *)(v8 - 8) = v9;
      v8 -= 8;
      *a3 = 0;
      v7 -= 8;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<applesauce::CF::ArrayRef>,std::reverse_iterator<applesauce::CF::ArrayRef*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<applesauce::CF::ArrayRef>,std::reverse_iterator<applesauce::CF::ArrayRef*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<applesauce::CF::ArrayRef>,std::reverse_iterator<applesauce::CF::ArrayRef*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<applesauce::CF::ArrayRef>,std::reverse_iterator<applesauce::CF::ArrayRef*>>::operator()[abi:ne180100](uint64_t *a1)
{
  CFTypeRef *v1;
  CFTypeRef *v2;
  uint64_t v3;

  v1 = *(CFTypeRef **)(a1[2] + 8);
  v2 = *(CFTypeRef **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
      std::allocator<applesauce::CF::ArrayRef>::destroy[abi:ne180100](v3, v1++);
    while (v1 != v2);
  }
}

void std::allocator<applesauce::CF::ArrayRef>::destroy[abi:ne180100](uint64_t a1, CFTypeRef *a2)
{
  if (*a2)
    CFRelease(*a2);
}

void **std::__split_buffer<applesauce::CF::ArrayRef>::~__split_buffer(void **a1)
{
  std::__split_buffer<applesauce::CF::ArrayRef>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<applesauce::CF::ArrayRef>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 8;
    std::allocator<applesauce::CF::ArrayRef>::destroy[abi:ne180100](v4, (CFTypeRef *)(i - 8));
  }
}

void std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  CFTypeRef *v2;
  CFTypeRef *v4;
  void *v5;

  v1 = *a1;
  v2 = (CFTypeRef *)**a1;
  if (v2)
  {
    v4 = (CFTypeRef *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::allocator<applesauce::CF::ArrayRef>::destroy[abi:ne180100]((uint64_t)(v1 + 2), --v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

const __CFBoolean *applesauce::CF::details::at_to<unsigned long>(const __CFArray *a1, unint64_t a2)
{
  const __CFNumber *ValueAtIndex;
  std::runtime_error *exception;

  if (!a1 || CFArrayGetCount(a1) <= a2 || (ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, a2)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return applesauce::CF::convert_to<unsigned long,0>(ValueAtIndex);
}

void sub_191C8E758(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_3_0(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_4_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

uint64_t CoreNLP::TransferSeqTagModel::TransferSeqTagModel(uint64_t a1, const void ***a2)
{
  const void ***v4;
  const void **v5;
  const void **v6;
  uint64_t **v7;
  const void **v8;
  const void ***v9;
  BOOL v10;
  uint64_t *v11;
  unint64_t v12;
  __int128 *v13;
  char *v14;
  char **v15;
  char **v17;
  char *v18[2];
  _DWORD *v19;

  *(_QWORD *)a1 = &off_1E2DF27B8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_QWORD *)(a1 + 592) = 0;
  std::map<std::string,int>::map[abi:ne180100]((uint64_t *)(a1 + 600), a2);
  *(_QWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  v18[0] = 0;
  v18[1] = 0;
  v17 = v18;
  v6 = *a2;
  v4 = a2 + 1;
  v5 = v6;
  if (v6 != (const void **)v4)
  {
    do
    {
      v19 = v5 + 7;
      v7 = std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v17, (int *)v5 + 14, (uint64_t)&std::piecewise_construct, &v19);
      std::string::operator=((std::string *)(v7 + 5), (const std::string *)(v5 + 4));
      v8 = (const void **)v5[1];
      if (v8)
      {
        do
        {
          v9 = (const void ***)v8;
          v8 = (const void **)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (const void ***)v5[2];
          v10 = *v9 == v5;
          v5 = (const void **)v9;
        }
        while (!v10);
      }
      v5 = (const void **)v9;
    }
    while (v9 != v4);
    v11 = (uint64_t *)v17;
    if (v17 != v18)
    {
      v12 = *(_QWORD *)(a1 + 640);
      do
      {
        v13 = (__int128 *)(v11 + 5);
        if (v12 >= *(_QWORD *)(a1 + 648))
        {
          v12 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 632), v13);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 632, v13);
          v12 += 24;
        }
        *(_QWORD *)(a1 + 640) = v12;
        v14 = (char *)v11[1];
        if (v14)
        {
          do
          {
            v15 = (char **)v14;
            v14 = *(char **)v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (char **)v11[2];
            v10 = *v15 == (char *)v11;
            v11 = (uint64_t *)v15;
          }
          while (!v10);
        }
        v11 = (uint64_t *)v15;
      }
      while (v15 != v18);
    }
  }
  *(_QWORD *)(a1 + 80) = 0;
  std::__tree<std::__value_type<long,std::string>,std::__map_value_compare<long,std::__value_type<long,std::string>,std::less<long>,true>,std::allocator<std::__value_type<long,std::string>>>::destroy((uint64_t)&v17, v18[0]);
  return a1;
}

void sub_191C8E9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t v15;
  void *v16;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;

  for (i = 0; i != -72; i -= 24)
  {
    a10 = (void **)(v10 + 576 + i);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a10);
  }
  for (j = 0; j != -72; j -= 24)
  {
    a10 = (void **)(v10 + 504 + j);
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a10);
  }
  for (k = 0; k != -72; k -= 24)
  {
    a10 = (void **)(v10 + 432 + k);
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a10);
  }
  v15 = 0;
  while (1)
  {
    v16 = *(void **)(v10 + v15 + 360);
    if (v16)
    {
      *(_QWORD *)(v10 + v15 + 368) = v16;
      operator delete(v16);
    }
    v15 -= 24;
    if (v15 == -72)
    {
      for (m = 0; m != -72; m -= 24)
      {
        a10 = (void **)(v10 + 288 + m);
        std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a10);
      }
      for (n = 0; n != -72; n -= 24)
      {
        a10 = (void **)(v10 + 216 + n);
        std::vector<std::vector<std::vector<std::vector<int>>>>::__destroy_vector::operator()[abi:ne180100](&a10);
      }
      for (ii = 144; ii != 72; ii -= 24)
      {
        a10 = (void **)(v10 + ii);
        std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&a10);
      }
      for (jj = 56; jj != -16; jj -= 24)
      {
        a10 = (void **)(v10 + jj);
        std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>::__destroy_vector::operator()[abi:ne180100](&a10);
      }
      _Unwind_Resume(a1);
    }
  }
}

void CoreNLP::TransferSeqTagModel::~TransferSeqTagModel(CoreNLP::TransferSeqTagModel *this)
{
  void *v2;
  void *v3;
  const void *v4;
  uint64_t i;
  uint64_t j;
  void *v7;
  uint64_t k;
  uint64_t m;
  void **v10;

  *(_QWORD *)this = &off_1E2DF27B8;
  std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100]((CoreNLP::MontrealModel **)this + 90, 0);
  nlp::CFScopedPtr<void *>::reset((const void **)this + 89, 0);
  v2 = (void *)*((_QWORD *)this + 86);
  if (v2)
  {
    *((_QWORD *)this + 87) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 83);
  if (v3)
  {
    *((_QWORD *)this + 84) = v3;
    operator delete(v3);
  }
  v4 = (const void *)*((_QWORD *)this + 82);
  if (v4)
    CFRelease(v4);
  v10 = (void **)((char *)this + 632);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
  std::__tree<std::string>::destroy((uint64_t)this + 600, *((char **)this + 76));
  for (i = 576; i != 504; i -= 24)
  {
    v10 = (void **)((char *)this + i);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v10);
  }
  do
  {
    v10 = (void **)((char *)this + i);
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v10);
    i -= 24;
  }
  while (i != 432);
  do
  {
    v10 = (void **)((char *)this + i);
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v10);
    i -= 24;
  }
  while (i != 360);
  for (j = 0; j != -72; j -= 24)
  {
    v7 = *(void **)((char *)this + j + 360);
    if (v7)
    {
      *(_QWORD *)((char *)this + j + 368) = v7;
      operator delete(v7);
    }
  }
  for (k = 288; k != 216; k -= 24)
  {
    v10 = (void **)((char *)this + k);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v10);
  }
  do
  {
    v10 = (void **)((char *)this + k);
    std::vector<std::vector<std::vector<std::vector<int>>>>::__destroy_vector::operator()[abi:ne180100](&v10);
    k -= 24;
  }
  while (k != 144);
  do
  {
    v10 = (void **)((char *)this + k);
    std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v10);
    k -= 24;
  }
  while (k != 72);
  for (m = 56; m != -16; m -= 24)
  {
    v10 = (void **)((char *)this + m);
    std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  }
}

{
  CoreNLP::TransferSeqTagModel::~TransferSeqTagModel(this);
  JUMPOUT(0x19401E994);
}

void CoreNLP::TransferSeqTagModel::initTrainer(uint64_t a1, const void **a2)
{
  const void *v3;
  const void *v4;

  v3 = *(const void **)(a1 + 656);
  v4 = *a2;
  *(_QWORD *)(a1 + 656) = *a2;
  if (v4)
    CFRetain(v4);
  if (v3)
    CFRelease(v3);
}

void CoreNLP::TransferSeqTagModel::readSample(uint64_t a1, __int128 **a2, __int128 **a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t *v8;
  _DWORD *v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *__p;
  void *v23;
  void **v24;

  v8 = (uint64_t *)(a1 + 24 * a6 + 8);
  v9 = (_DWORD *)(a1 + 4 * a6 + 80);
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4EEEEJiNS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_IS9_EEEESB_NS3_IiNS7_IiEEEESD_EEC2B8ne180100IJLm0ELm1ELm2ELm3ELm4EEJiSB_SB_SD_SD_EJEJEJRiRKSB_SI_RKSD_SK_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSM_IJDpT2_EEEDpOT3_((uint64_t)&v17, v9, a2, a3, a4, a5);
  std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>::push_back[abi:ne180100](v8, (uint64_t)&v17);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  v24 = (void **)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v24);
  v24 = (void **)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v24);
  ++*v9;
  v10 = *a3;
  v11 = a3[1];
  if (*a3 != v11)
  {
    do
    {
      v12 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*(_QWORD *)(a1 + 632), *(_QWORD *)(a1 + 640), (unsigned __int8 **)v10);
      if (v12 == *(_QWORD *)(a1 + 640))
      {
        v13 = v12;
        v14 = (uint64_t *)(a1 + 632);
        if (v13 >= *(_QWORD *)(a1 + 648))
        {
          v15 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v14, v10);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v14, v10);
          v15 = v13 + 24;
        }
        *(_QWORD *)(a1 + 640) = v15;
        v16 = -1 - 1431655765 * ((unint64_t)(v15 - *(_QWORD *)(a1 + 632)) >> 3);
        v17 = v10;
        *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 600), (const void **)v10, (uint64_t)&std::piecewise_construct, &v17)+ 14) = v16;
      }
      v10 = (__int128 *)((char *)v10 + 24);
    }
    while (v10 != v11);
  }
}

void sub_191C8EEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::~tuple((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v7 - *a1) >> 3);
    if ((unint64_t)(v9 + 1) > 0x276276276276276)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v10 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v5 - *a1) >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x13B13B13B13B13BLL)
      v12 = 0x276276276276276;
    else
      v12 = v11;
    v18 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>>(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[104 * v9];
    v17 = &v13[104 * v12];
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::__tuple_impl((uint64_t)v15, a2);
    v16 = v15 + 104;
    std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>::__swap_out_circular_buffer(a1, &v14);
    v8 = a1[1];
    std::__split_buffer<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>::~__split_buffer(&v14);
  }
  else
  {
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::__tuple_impl(*(_QWORD *)(v4 - 8), a2);
    v8 = v7 + 104;
    a1[1] = v7 + 104;
  }
  a1[1] = v8;
}

void sub_191C8F034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::~tuple(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(_QWORD *)(a1 + 64) = v3;
    operator delete(v3);
  }
  v5 = (void **)(a1 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a1 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  return a1;
}

void CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const __CFDictionary *v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;
  __int128 **v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  std::vector<int>::size_type v40;
  int *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::runtime_error *exception;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  int v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *__p;
  void *v63;
  uint64_t v64;
  std::string __x;
  std::vector<int> v66;
  std::string v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;

  v14 = *a2;
  v15 = a2[1];
  v16 = 126 - 2 * __clz(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v15 - v14) >> 3));
  if (v15 == v14)
    v17 = 0;
  else
    v17 = v16;
  std::__introsort<std::_ClassicAlgPolicy,CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<std::vector<std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<int>&,std::vector<std::vector<std::string>> &,std::vector<std::vector<int>>&,std::vector<std::vector<int>>&)::$_0 &,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*,false>(v14, v15, v17, 1);
  v18 = (const __CFDictionary *)a1[82];
  if (!v18)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LODWORD(v68) = 30;
  v58 = applesauce::CF::at_or<int,__CFString const* const&>(v18, (const void **)CoreNLP::kNLModelTrainerMaxSeqLengthKey, (unsigned int *)&v68);
  v19 = *a2;
  if (a2[1] != *a2)
  {
    v20 = 0;
    v52 = a6 + 16;
    v53 = a6;
    v54 = a4;
    do
    {
      v21 = (_DWORD *)(v19 + 104 * v20);
      v23 = *(_DWORD **)(a6 + 8);
      v22 = *(_QWORD *)(a6 + 16);
      if ((unint64_t)v23 >= v22)
      {
        v25 = *(_DWORD **)a6;
        v26 = ((uint64_t)v23 - *(_QWORD *)a6) >> 2;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v28 = v22 - (_QWORD)v25;
        if (v28 >> 1 > v27)
          v27 = v28 >> 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
          v29 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v52, v29);
          v25 = *(_DWORD **)a6;
          v23 = *(_DWORD **)(a6 + 8);
        }
        else
        {
          v30 = 0;
        }
        v31 = &v30[4 * v26];
        *(_DWORD *)v31 = *v21;
        v24 = v31 + 4;
        while (v23 != v25)
        {
          v32 = *--v23;
          *((_DWORD *)v31 - 1) = v32;
          v31 -= 4;
        }
        *(_QWORD *)a6 = v31;
        *(_QWORD *)(a6 + 8) = v24;
        *(_QWORD *)(a6 + 16) = &v30[4 * v29];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v23 = *v21;
        v24 = v23 + 1;
      }
      *(_QWORD *)(a6 + 8) = v24;
      v33 = (__int128 **)(*a2 + 104 * v20 + 8);
      v34 = a3[1];
      if (v34 >= a3[2])
      {
        v35 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(a3, v33);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)a3, v33);
        v35 = v34 + 24;
      }
      v36 = a3;
      a3[1] = v35;
      v68 = 0;
      v69 = 0;
      v70 = 0;
      v37 = *a2 + 104 * v20;
      memset(&v67, 0, sizeof(v67));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v67, *(__int128 **)(v37 + 32), *(__int128 **)(v37 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v37 + 40) - *(_QWORD *)(v37 + 32)) >> 3));
      if (v67.__r_.__value_.__l.__size_ != v67.__r_.__value_.__r.__words[0])
      {
        v38 = 0;
        v39 = 0;
        do
        {
          v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[80] - a1[79]) >> 3);
          LODWORD(__x.__r_.__value_.__l.__data_) = 0;
          std::vector<int>::vector(&v66, v40, (const std::vector<int>::value_type *)&__x);
          v41 = (int *)std::map<std::string,int>::at((uint64_t)(a1 + 75), (const void **)(v67.__r_.__value_.__r.__words[0] + v38));
          v66.__begin_[*v41] = 1;
          v42 = v69;
          if ((unint64_t)v69 >= v70)
          {
            v43 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(&v68, (uint64_t)&v66);
          }
          else
          {
            *v69 = 0;
            v42[1] = 0;
            v42[2] = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v42, v66.__begin_, (uint64_t)v66.__end_, v66.__end_ - v66.__begin_);
            v43 = (uint64_t)(v42 + 3);
          }
          v69 = (_QWORD *)v43;
          std::map<std::string,int>::at((uint64_t)(a1 + 75), (const void **)(v67.__r_.__value_.__r.__words[0] + v38));
          if (v66.__begin_)
          {
            v66.__end_ = v66.__begin_;
            operator delete(v66.__begin_);
          }
          ++v39;
          v38 += 24;
        }
        while (0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(v67.__r_.__value_.__l.__size_ - v67.__r_.__value_.__r.__words[0]) >> 3) > v39);
      }
      v44 = v54[1];
      if (v44 >= v54[2])
      {
        v45 = std::vector<std::vector<std::vector<int>>>::__push_back_slow_path<std::vector<std::vector<int>> const&>(v54, &v68);
      }
      else
      {
        std::vector<std::vector<std::vector<int>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<int>> const&>((uint64_t)v54, &v68);
        v45 = v44 + 24;
      }
      v54[1] = v45;
      v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67.__r_.__value_.__l.__size_ - v67.__r_.__value_.__r.__words[0]) >> 3);
      if (v46 > v58)
        LODWORD(v46) = v58;
      v47 = (int)v46;
      memset(&v66, 0, sizeof(v66));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::string *)&v66, (__int128 *)v67.__r_.__value_.__l.__data_, (__int128 *)(v67.__r_.__value_.__r.__words[0] + 24 * (int)v46), (int)v46);
      a3 = v36;
      std::vector<std::vector<std::string>>::push_back[abi:ne180100](a7, (uint64_t)&v66);
      a6 = v53;
      __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
      v48 = *a2 + 104 * v20;
      memset(&v66, 0, sizeof(v66));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v66, *(__int128 **)(v48 + 8), *(__int128 **)(v48 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v48 + 16) - *(_QWORD *)(v48 + 8)) >> 3));
      memset(&__x, 0, sizeof(__x));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&__x, (__int128 *)v66.__begin_, (__int128 *)&v66.__begin_[6 * (int)v47], v47);
      std::vector<std::vector<std::string>>::push_back[abi:ne180100](a5, (uint64_t)&__x);
      __p = &__x;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v49 = *a2 + 104 * v20;
      memset(&__x, 0, sizeof(__x));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__x, *(const void **)(v49 + 56), *(_QWORD *)(v49 + 64), (uint64_t)(*(_QWORD *)(v49 + 64) - *(_QWORD *)(v49 + 56)) >> 2);
      v63 = 0;
      v64 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(&__p, __x.__r_.__value_.__l.__data_, __x.__r_.__value_.__r.__words[0] + 4 * v47, v47);
      std::vector<std::vector<int>>::push_back[abi:ne180100](a8, (uint64_t)&__p);
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      v50 = *a2 + 104 * v20;
      v63 = 0;
      v64 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v50 + 80), *(_QWORD *)(v50 + 88), (uint64_t)(*(_QWORD *)(v50 + 88) - *(_QWORD *)(v50 + 80)) >> 2);
      v60 = 0;
      v61 = 0;
      v59 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(&v59, __p, (uint64_t)__p + 4 * v47, v47);
      std::vector<std::vector<int>>::push_back[abi:ne180100](a9, (uint64_t)&v59);
      if (v59)
      {
        v60 = v59;
        operator delete(v59);
      }
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (__x.__r_.__value_.__r.__words[0])
      {
        __x.__r_.__value_.__l.__size_ = __x.__r_.__value_.__r.__words[0];
        operator delete(__x.__r_.__value_.__l.__data_);
      }
      __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
      v66.__begin_ = (std::vector<int>::pointer)&v67;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
      v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
      ++v20;
      v19 = *a2;
    }
    while (0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3) > v20);
  }
}

void sub_191C8F600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  void *v28;

  __cxa_free_exception(v28);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,int>::at(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::string>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 56;
}

void **std::vector<std::vector<std::string>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::string>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<std::string>>::~__split_buffer(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_191C8F860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<int>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_191C8F99C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void CoreNLP::TransferSeqTagModel::createBatchForDataType(_QWORD *a1, unsigned int a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  const __CFDictionary *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 ***v21;
  char *v22;
  __int128 ***v23;
  void ***v24;
  void ***v25;
  std::runtime_error *exception;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  _QWORD *v31;
  void **v33[3];
  __int128 **v34[3];
  void **v35[3];
  __int128 ****v36;
  uint64_t v37;
  uint64_t v38;
  __int128 ***v39;
  uint64_t v40;
  uint64_t v41;
  __int128 **v42;
  __int128 **v43;
  uint64_t v44;
  void **v45;
  void **v46;
  uint64_t v47;
  __int128 **v48;
  __int128 **v49;
  uint64_t v50;
  void ***v51;

  v2 = &a1[3 * a2];
  v3 = v2[1];
  v31 = v2 + 1;
  v4 = v2[2];
  if (v3 != v4)
  {
    v5 = (const __CFDictionary *)a1[82];
    if (!v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(exception);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v6 = 0x4EC4EC4EC4EC4EC5 * ((v4 - v3) >> 3);
    LODWORD(v48) = 32;
    v7 = applesauce::CF::at_or<int,__CFString const* const&>(v5, (const void **)&CoreNLP::kNLModelTrainerBatchSizeKey, (unsigned int *)&v48);
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    if ((int)v7 <= (int)v6)
    {
      v8 = 0;
      v9 = (int)v7;
      v10 = &a1[3 * a2];
      v11 = v10 + 13;
      v29 = v10 + 12;
      v30 = v10 + 14;
      v28 = v10 + 21;
      v12 = v10 + 22;
      v13 = v10 + 23;
      v14 = v7 << 32;
      v15 = (int)v7;
      do
      {
        v16 = *v31 + 104 * SHIDWORD(v8);
        memset(v35, 0, sizeof(v35));
        std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>,std::__wrap_iter<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>>(v35, v16, v16 + 104 * (int)v9, v9);
        memset(v34, 0, sizeof(v34));
        memset(v33, 0, sizeof(v33));
        CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(a1, (uint64_t *)v35, (uint64_t *)v34, (uint64_t *)v33, (uint64_t *)&v48, (uint64_t)&v45, (uint64_t *)&v42, (uint64_t *)&v39, (uint64_t *)&v36);
        v17 = *v11;
        if ((unint64_t)*v11 >= *v30)
        {
          v18 = std::vector<std::vector<std::vector<std::string>>>::__push_back_slow_path<std::vector<std::vector<std::string>> const&>(v29, v34);
        }
        else
        {
          std::vector<std::vector<std::vector<std::string>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<std::string>> const&>((uint64_t)v29, v34);
          v18 = v17 + 24;
        }
        *v11 = v18;
        v19 = *v12;
        if ((unint64_t)*v12 >= *v13)
        {
          v20 = std::vector<std::vector<std::vector<std::vector<int>>>>::__push_back_slow_path<std::vector<std::vector<std::vector<int>>> const&>(v28, (uint64_t **)v33);
        }
        else
        {
          std::vector<std::vector<std::vector<std::vector<int>>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<std::vector<int>>> const&>((uint64_t)v28, (uint64_t **)v33);
          v20 = v19 + 24;
        }
        *v12 = v20;
        v51 = v33;
        std::vector<std::vector<std::vector<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
        v33[0] = (void **)v34;
        std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](v33);
        v34[0] = (__int128 **)v35;
        std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
        v15 += v9;
        v8 += v14;
      }
      while (v15 <= (int)v6);
    }
    v21 = (__int128 ***)&a1[3 * a2 + 30];
    if (v21 != &v48)
      std::vector<std::vector<std::string>>::__assign_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>((uint64_t)v21, v48, v49, 0xAAAAAAAAAAAAAAABLL * (v49 - v48));
    v22 = (char *)&a1[3 * a2 + 39];
    if (v22 != (char *)&v45)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v22, (char *)v45, (uint64_t)v46, ((char *)v46 - (char *)v45) >> 2);
    v23 = (__int128 ***)&a1[3 * a2 + 66];
    if (v23 != &v42)
      std::vector<std::vector<std::string>>::__assign_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>((uint64_t)v23, v42, v43, 0xAAAAAAAAAAAAAAABLL * (v43 - v42));
    v24 = (void ***)&a1[3 * a2 + 48];
    if (v24 != (void ***)&v39)
      std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)v24, (uint64_t)v39, v40, 0xAAAAAAAAAAAAAAABLL * ((v40 - (uint64_t)v39) >> 3));
    v25 = (void ***)&a1[3 * a2 + 57];
    if (v25 != (void ***)&v36)
      std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)v25, (uint64_t)v36, v37, 0xAAAAAAAAAAAAAAABLL * ((v37 - (uint64_t)v36) >> 3));
    v35[0] = (void **)&v36;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v35);
    v36 = &v39;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
    v39 = &v42;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    v45 = (void **)&v48;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v45);
  }
}

void sub_191C8FD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  void *v29;

  __cxa_free_exception(v29);
  _Unwind_Resume(a1);
}

void CoreNLP::TransferSeqTagModel::endReadSamples(CoreNLP::TransferSeqTagModel *this)
{
  const __CFDictionary *v2;
  int v3;
  uint64_t v4;
  char v5;
  char v6;
  unint64_t v7;
  CFNumberRef v8;
  uint64_t v9;
  char v10;
  char v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  std::runtime_error *exception;
  CFTypeRef cf;
  int valuePtr;

  v2 = (const __CFDictionary *)*((_QWORD *)this + 82);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    goto LABEL_16;
  }
  LODWORD(cf) = 32;
  v3 = applesauce::CF::at_or<int,__CFString const* const&>(v2, (const void **)&CoreNLP::kNLModelTrainerBatchSizeKey, (unsigned int *)&cf);
  v4 = 0;
  v5 = 1;
  do
  {
    v6 = v5;
    v7 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)this + 3 * v4 + 2) - *((_QWORD *)this + 3 * v4 + 1)) >> 3);
    if (v7 < v3)
      v3 = v7;
    v4 = 1;
    v5 = 0;
  }
  while ((v6 & 1) != 0);
  valuePtr = v3;
  v8 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  cf = v8;
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_16:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 82), CFSTR("batchSize"), v8);
  v9 = 0;
  v10 = 1;
  do
  {
    v11 = v10;
    CoreNLP::TransferSeqTagModel::createBatchForDataType(this, v9);
    v12 = (char *)this + 24 * v9;
    v15 = *((_QWORD *)v12 + 2);
    v14 = v12 + 16;
    v13 = v15;
    v16 = *(v14 - 1);
    if (v15 != v16)
    {
      do
      {
        v13 -= 104;
        std::allocator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>::destroy[abi:ne180100]((uint64_t)this + 24 * v9 + 24, v13);
      }
      while (v13 != v16);
    }
    v10 = 0;
    *v14 = v16;
    *((_DWORD *)this + v9 + 20) = 0;
    v9 = 1;
  }
  while ((v11 & 1) != 0);
  if (cf)
    CFRelease(cf);
}

void sub_191C8FF8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::NumberRef::~NumberRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void CoreNLP::TransferSeqTagModel::loadEmbeddings(CFDictionaryRef theDict@<X1>, CoreNLP **a2@<X8>)
{
  const __CFString *Value;
  const __CFString *v6;
  CFLocaleRef v7;
  const __CFDictionary *v8;
  _BOOL4 v9;
  const __CFString *v10;
  CFComparisonResult v11;
  const void **v12;
  const __CFString *v13;
  CFLocaleRef v14;
  CoreNLP *v15;
  void *v16;
  void *values;
  CFLocaleRef v18;
  const __CFString *v19;
  void *keys;
  __CFString *v21;
  __CFString *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (CFDictionaryContainsKey(theDict, CFSTR("TransferTaggingEmbeddingVesionKey")))
  {
    Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("TransferTaggingEmbeddingVesionKey"));
    v6 = (const __CFString *)CFDictionaryGetValue(theDict, kNLModelTrainerLanguageKey);
    v7 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6);
    keys = kNLStringEmbeddingModelType[0];
    v21 = kNLStringEmbeddingModelLocale[0];
    v22 = kNLStringEmbeddingModelVersion[0];
    values = kNLStringEmbeddingModelTypeContextualWordEmbedding[0];
    v18 = v7;
    v19 = Value;
    v8 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE30], (const void **)&keys, (const void **)&values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v7)
      CFRelease(v7);
    v9 = 0;
  }
  else
  {
    v10 = (const __CFString *)CFDictionaryGetValue(theDict, kNLModelTrainerEmbeddingArchitectureKey);
    v11 = CFStringCompare(v10, kNLModelTrainerEmbeddingArchitectureMultilingualBERT, 0);
    v9 = v11 == kCFCompareEqualTo;
    v12 = (const void **)&kNLModelTrainerMultilingualEmbeddingLocaleIdentifierKey;
    if (v11)
      v12 = (const void **)&kNLModelTrainerLanguageKey;
    v13 = (const __CFString *)CFDictionaryGetValue(theDict, *v12);
    v14 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v13);
    keys = kNLStringEmbeddingModelType[0];
    v21 = kNLStringEmbeddingModelLocale[0];
    v22 = kNLStringEmbeddingContextualModelArchitecture[0];
    values = kNLStringEmbeddingModelTypeContextualWordEmbedding[0];
    v18 = v14;
    v19 = v10;
    v8 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE30], (const void **)&keys, (const void **)&values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v14)
      CFRelease(v14);
  }
  v15 = (CoreNLP *)NLStringEmbeddingCreateWithOptions(v8);
  *a2 = v15;
  if (v9)
    NLStringEmbeddingApplyMeanPoolingOverFragments(v15, v16);
  if (v8)
    CFRelease(v8);
}

void sub_191C90244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void nlp::CFScopedPtr<__CFDictionary const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t CoreNLP::TransferSeqTagModel::load(CoreNLP::TransferSeqTagModel *this, const __CFDictionary *a2, const __CFArray *a3)
{
  uint64_t *v5;
  const __CFArray *Value;
  CFIndex Count;
  CFIndex v8;
  CFIndex i;
  char *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  const __CFData *ValueAtIndex;
  CoreNLP::MontrealModel *v17;
  const __CFArray *theArray;
  void *__p[2];
  uint64_t v21;
  void **v22;

  theArray = a3;
  v5 = (uint64_t *)((char *)this + 632);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 79);
  std::__tree<std::string>::destroy((uint64_t)this + 600, *((char **)this + 76));
  *((_QWORD *)this + 75) = (char *)this + 608;
  *((_QWORD *)this + 77) = 0;
  *((_QWORD *)this + 76) = 0;
  *((_QWORD *)this + 84) = *((_QWORD *)this + 83);
  Value = (const __CFArray *)CFDictionaryGetValue(a2, kNLModelSampleDataLabelTypesArrayKey);
  Count = CFArrayGetCount(Value);
  if (Count >= 1)
  {
    v8 = Count;
    for (i = 0; i != v8; ++i)
    {
      v10 = (char *)objc_msgSend((id)CFArrayGetValueAtIndex(Value, i), "UTF8String", theArray);
      std::string::basic_string[abi:ne180100]<0>(__p, v10);
      v22 = __p;
      *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 75, (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v22)+ 14) = i;
      v11 = *((_QWORD *)this + 80);
      if (v11 >= *((_QWORD *)this + 81))
      {
        v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v5, (__int128 *)__p);
      }
      else
      {
        if (SHIBYTE(v21) < 0)
        {
          std::string::__init_copy_ctor_external(*((std::string **)this + 80), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v12 = *(_OWORD *)__p;
          *(_QWORD *)(v11 + 16) = v21;
          *(_OWORD *)v11 = v12;
        }
        v13 = v11 + 24;
        *((_QWORD *)this + 80) = v11 + 24;
      }
      *((_QWORD *)this + 80) = v13;
      if (SHIBYTE(v21) < 0)
        operator delete(__p[0]);
    }
  }
  CoreNLP::TransferSeqTagModel::loadEmbeddings(a2, (CoreNLP **)__p);
  v14 = __p[0];
  __p[0] = 0;
  nlp::CFScopedPtr<void *>::reset((const void **)this + 89, v14);
  if (__p[0])
    CFRelease(__p[0]);
  if (!*((_QWORD *)this + 89))
  {
    v15 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Embedding Creation Failed. Please check you have downloaded CoreNLP OTA Assets."));
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", CFSTR("Infrastructure Error"), v15, 0), "raise");
  }
  ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(theArray, 0);
  v17 = (CoreNLP::MontrealModel *)operator new();
  CoreNLP::MontrealModel::MontrealModel(v17, ValueAtIndex);
  std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100]((CoreNLP::MontrealModel **)this + 90, v17);
  return 1;
}

void sub_191C904FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x191C904DCLL);
  }
  _Unwind_Resume(exception_object);
}

CFMutableDictionaryRef CoreNLP::TransferSeqTagModel::copyTrainedDict(CoreNLP::TransferSeqTagModel *this)
{
  uint64_t v2;
  char v3;
  char v4;
  __int128 ****v5;
  std::string *v6;
  uint64_t v7;
  uint64_t ***v8;
  _QWORD *v9;
  uint64_t v10;
  TransferSeqTagMLFHelper *v11;
  CFArrayRef v12;
  CFArrayRef CFArray;
  CFArrayRef v14;
  CFArrayRef v15;
  CFArrayRef v16;
  CFArrayRef v17;
  CFArrayRef v18;
  CFArrayRef v19;
  CFArrayRef v20;
  CFMutableDictionaryRef v21;
  TransferSeqTagMLFHelper *v23;
  CFArrayRef v24;
  void **v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  std::string *v29;
  unint64_t v30;
  CFMutableDictionaryRef v31;
  void **v32[2];

  v2 = 0;
  v31 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v25 = 0;
  v26 = 0;
  v3 = 1;
  v27 = 0;
  do
  {
    v4 = v3;
    v5 = (__int128 ****)((char *)this + 24 * v2 + 96);
    v6 = v29;
    if ((unint64_t)v29 >= v30)
    {
      v7 = std::vector<std::vector<std::vector<std::vector<std::string>>>>::__push_back_slow_path<std::vector<std::vector<std::vector<std::string>>> const&>(&v28, v5);
    }
    else
    {
      v29->__r_.__value_.__r.__words[0] = 0;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::vector<std::vector<std::string>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<std::string>>*,std::vector<std::vector<std::string>>*>(v6, *v5, *((__int128 ****)this + 3 * v2 + 13), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 3 * v2 + 13) - (_QWORD)*v5) >> 3));
      v7 = (uint64_t)&v6[1];
    }
    v29 = (std::string *)v7;
    v8 = (uint64_t ***)((char *)this + 24 * v2 + 168);
    v9 = v26;
    if ((unint64_t)v26 >= v27)
    {
      v10 = std::vector<std::vector<std::vector<std::vector<std::vector<int>>>>>::__push_back_slow_path<std::vector<std::vector<std::vector<std::vector<int>>>> const&>((uint64_t *)&v25, v8);
    }
    else
    {
      *v26 = 0;
      v9[1] = 0;
      v9[2] = 0;
      std::vector<std::vector<std::vector<std::vector<int>>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<std::vector<int>>>*,std::vector<std::vector<std::vector<int>>>*>(v9, *v8, *((uint64_t ***)this + 3 * v2 + 22), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 3 * v2 + 22) - (_QWORD)*v8) >> 3));
      v10 = (uint64_t)(v9 + 3);
    }
    v3 = 0;
    v26 = (_QWORD *)v10;
    v2 = 1;
  }
  while ((v4 & 1) != 0);
  CoreNLP::TransferSeqTagModel::loadEmbeddings(*((CFDictionaryRef *)this + 82), (CoreNLP **)v32);
  if (!v32[0])
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Embedding Creation Failed. Please check you have downloaded CoreNLP OTA Assets."));
    (*(void (**)(void))(*((_QWORD *)this + 78) + 16))();
    goto LABEL_34;
  }
  v11 = -[TransferSeqTagMLFHelper initWithTraininingParameters:]([TransferSeqTagMLFHelper alloc], "initWithTraininingParameters:", *((_QWORD *)this + 82));
  -[TransferSeqTagMLFHelper trainAndSaveSeqTagModelFromData:batchedLabels:labelArray:embeddingRef:trainedModelDict:trainingLogger:](v11, "trainAndSaveSeqTagModelFromData:batchedLabels:labelArray:embeddingRef:trainedModelDict:trainingLogger:", &v28, &v25, (char *)this + 632, v32[0], &v31, *((_QWORD *)this + 78));
  v23 = v11;
  if (v31)
  {
    v24 = applesauce::CF::details::make_CFArrayRef<std::vector<std::string>>((__int128 ***)this + 30);
    CFDictionaryAddValue(v31, kNLModelTrainingSentencesKey, v24);
    v12 = applesauce::CF::details::make_CFArrayRef<std::vector<std::string>>((__int128 ***)this + 33);
    CFDictionaryAddValue(v31, kNLModelValidationSentencesKey, v12);
    CFArray = applesauce::CF::details::make_CFArrayRef<int>((_QWORD *)this + 39);
    CFDictionaryAddValue(v31, kNLModelTrainingSentenceIdsKey, CFArray);
    v14 = applesauce::CF::details::make_CFArrayRef<int>((_QWORD *)this + 42);
    CFDictionaryAddValue(v31, kNLModelValidationSentenceIdsKey, v14);
    v15 = applesauce::CF::details::make_CFArrayRef<std::vector<int>>((uint64_t *)this + 48);
    CFDictionaryAddValue(v31, kNLModelTrainingTokenLocationsKey, v15);
    v16 = applesauce::CF::details::make_CFArrayRef<std::vector<int>>((uint64_t *)this + 51);
    CFDictionaryAddValue(v31, kNLModelValidationTokenLocationsKey, v16);
    v17 = applesauce::CF::details::make_CFArrayRef<std::vector<int>>((uint64_t *)this + 57);
    CFDictionaryAddValue(v31, kNLModelTrainingTokenLengthsKey, v17);
    v18 = applesauce::CF::details::make_CFArrayRef<std::vector<int>>((uint64_t *)this + 60);
    CFDictionaryAddValue(v31, kNLModelValidationTokenLengthsKey, v18);
    v19 = applesauce::CF::details::make_CFArrayRef<std::vector<std::string>>((__int128 ***)this + 66);
    CFDictionaryAddValue(v31, kNLModelGoldTrainingLabelsKey, v19);
    v20 = applesauce::CF::details::make_CFArrayRef<std::vector<std::string>>((__int128 ***)this + 69);
    CFDictionaryAddValue(v31, kNLModelGoldValidationLabelsKey, v20);
    if (v20)
      CFRelease(v20);
    if (v19)
      CFRelease(v19);
    if (v18)
      CFRelease(v18);
    if (v17)
      CFRelease(v17);
    if (v16)
      CFRelease(v16);
    if (v15)
      CFRelease(v15);
    if (v14)
      CFRelease(v14);
    if (CFArray)
      CFRelease(CFArray);
    if (v12)
      CFRelease(v12);
    if (v24)
      CFRelease(v24);
  }

  v21 = v31;
  if (!v31)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Transfer Tagging API failed to generate a model."));
    (*(void (**)(void))(*((_QWORD *)this + 78) + 16))();
LABEL_34:
    v21 = v31;
  }
  if (v32[0])
    CFRelease(v32[0]);
  v32[0] = (void **)&v25;
  std::vector<std::vector<std::vector<std::vector<std::vector<int>>>>>::__destroy_vector::operator()[abi:ne180100](v32);
  v25 = (void **)&v28;
  std::vector<std::vector<std::vector<std::vector<std::string>>>>::__destroy_vector::operator()[abi:ne180100](&v25);
  return v21;
}

void sub_191C909D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  nlp::CFScopedPtr<void *>::reset((const void **)(v25 - 96), 0);
  *(_QWORD *)(v25 - 96) = &a22;
  std::vector<std::vector<std::vector<std::vector<std::vector<int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 96));
  a22 = (void **)&a25;
  std::vector<std::vector<std::vector<std::vector<std::string>>>>::__destroy_vector::operator()[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void CoreNLP::TransferSeqTagModel::inference(uint64_t a1@<X0>, uint64_t *a2@<X1>, CoreNLP *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t Dimension;
  float *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  double *v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  double *v23;
  char *v24;
  char *v25;
  double *v26;
  CFArrayRef cf;
  uint64_t v30;
  void *__p;
  uint64_t *v32;
  void *v33;
  char *v34;
  char *v35;
  CFArrayRef v36;
  __int128 **v37;
  uint64_t v38;
  uint64_t v39;
  void *v40[3];
  void *v41[4];

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v7 = *a2;
  v6 = a2[1];
  Dimension = (unint64_t)NLStringEmbeddingGetDimension(*(CoreNLP **)(a1 + 712), a2);
  v30 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3);
  LODWORD(v40[0]) = 0;
  std::vector<float>::vector(v41, (int)v30 * Dimension, v40);
  LODWORD(v37) = 0;
  std::vector<float>::vector(v40, Dimension, &v37);
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v38 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>((uint64_t *)&v37, (__int128 **)a2);
  v36 = applesauce::CF::details::make_CFArrayRef<std::vector<std::string>>(&v37);
  NLStringEmbeddingFillWordVectorsWithShape(*(CoreNLP **)(a1 + 712), v36, 1, v30, (char *)v41[0], 0, (uint64_t)v40[0], 2);
  CoreNLP::MontrealModel::setInput(*(CoreNLP::MontrealModel **)(a1 + 720), 1, (int)v30, v41[0], 0);
  CoreNLP::MontrealModel::predict(*(CoreNLP::MontrealModel **)(a1 + 720));
  v9 = (float *)CoreNLP::MontrealModel::output(*(CoreNLP::MontrealModel **)(a1 + 720), 0);
  cf = v36;
  v10 = CoreNLP::MontrealModel::outputSize(*(CoreNLP::MontrealModel **)(a1 + 720));
  if ((int)v30 >= 1)
  {
    v11 = v10;
    v12 = 0;
    do
    {
      v33 = 0;
      v34 = 0;
      v35 = 0;
      CoreNLP::getTopNIndices(a3, v11, v9, (uint64_t **)&__p);
      v14 = (uint64_t *)__p;
      v13 = v32;
      if (__p != v32)
      {
        v15 = (double *)v34;
        do
        {
          v16 = *v14;
          v17 = v9[*v14];
          if (v15 >= (double *)v35)
          {
            v18 = ((char *)v15 - (_BYTE *)v33) >> 4;
            if ((unint64_t)(v18 + 1) >> 60)
              std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
            v19 = (v35 - (_BYTE *)v33) >> 3;
            if (v19 <= v18 + 1)
              v19 = v18 + 1;
            if ((unint64_t)(v35 - (_BYTE *)v33) >= 0x7FFFFFFFFFFFFFF0)
              v20 = 0xFFFFFFFFFFFFFFFLL;
            else
              v20 = v19;
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>((uint64_t)&v35, v20);
            v23 = (double *)&v21[16 * v18];
            *(_DWORD *)v23 = v16;
            v23[1] = v17;
            v25 = (char *)v33;
            v24 = v34;
            v26 = v23;
            if (v34 != v33)
            {
              do
              {
                *((_OWORD *)v26 - 1) = *((_OWORD *)v24 - 1);
                v26 -= 2;
                v24 -= 16;
              }
              while (v24 != v25);
              v24 = (char *)v33;
            }
            v15 = v23 + 2;
            v33 = v26;
            v34 = (char *)(v23 + 2);
            v35 = &v21[16 * v22];
            if (v24)
              operator delete(v24);
          }
          else
          {
            *(_DWORD *)v15 = v16;
            v15[1] = v17;
            v15 += 2;
          }
          v34 = (char *)v15;
          ++v14;
        }
        while (v14 != v13);
      }
      std::vector<std::vector<std::pair<int,double>>>::emplace_back<std::vector<std::pair<int,double>>>(a4, (uint64_t)&v33);
      if (__p)
      {
        v32 = (uint64_t *)__p;
        operator delete(__p);
      }
      if (v33)
      {
        v34 = (char *)v33;
        operator delete(v33);
      }
      v9 += v11;
      ++v12;
    }
    while (v12 != (_DWORD)v30);
  }
  if (cf)
    CFRelease(cf);
  v33 = &v37;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
  if (v41[0])
  {
    v41[1] = v41[0];
    operator delete(v41[0]);
  }
}

void sub_191C90DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, __int16 *a17, uint64_t a18, uint64_t a19, const void *a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  applesauce::CF::ArrayRef::~ArrayRef(&a20);
  a17 = &a21;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  v29 = *(void **)(v27 - 128);
  if (v29)
  {
    *(_QWORD *)(v27 - 120) = v29;
    operator delete(v29);
  }
  *(_QWORD *)(v27 - 128) = a12;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 128));
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<std::pair<int,double>>>::emplace_back<std::vector<std::pair<int,double>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v17[4] = v4;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v12);
    v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    std::vector<std::vector<std::pair<int,double>>>::__swap_out_circular_buffer(a1, v17);
    v8 = (_QWORD *)a1[1];
    std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_191C90FC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *CoreNLP::TransferSeqTagModel::tagToLabel@<X0>(std::string *this@<X0>, unsigned int a2@<W1>, std::string *a3@<X8>)
{
  std::string::size_type size;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if ((a2 & 0x80000000) == 0)
  {
    size = this[26].__r_.__value_.__l.__size_;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(this[26].__r_.__value_.__r.__words[2] - size) >> 3) > a2)
      return std::string::operator=(a3, (const std::string *)(size + 24 * a2));
  }
  return this;
}

void sub_191C91038(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::TransferSeqTagModel::setTrainingLogBlock(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 624) = a2;
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4EEEEJiNS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS7_IS9_EEEESB_NS3_IiNS7_IiEEEESD_EEC2B8ne180100IJLm0ELm1ELm2ELm3ELm4EEJiSB_SB_SD_SD_EJEJEJRiRKSB_SI_RKSD_SK_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSM_IJDpT2_EEEDpOT3_(uint64_t a1, _DWORD *a2, __int128 **a3, __int128 **a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 8), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 32), *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a4[1] - (char *)*a4) >> 3));
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 56), *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 80), *(const void **)a6, *(_QWORD *)(a6 + 8), (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2);
  return a1;
}

void sub_191C9113C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 64) = v5;
    operator delete(v5);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::allocator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void **v5;

  v3 = *(void **)(a2 + 80);
  if (v3)
  {
    *(_QWORD *)(a2 + 88) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a2 + 56);
  if (v4)
  {
    *(_QWORD *)(a2 + 64) = v4;
    operator delete(v4);
  }
  v5 = (void **)(a2 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a2 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<std::vector<std::vector<int>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<std::vector<int>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t **std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_191C914D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_191C915E4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

__n128 std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::__tuple_impl(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  result = *(__n128 *)(a2 + 80);
  *(__n128 *)(a1 + 80) = result;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  return result;
}

uint64_t std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>,std::reverse_iterator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>,std::reverse_iterator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>,std::reverse_iterator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(104 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>,std::reverse_iterator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>,std::reverse_iterator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>,std::reverse_iterator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 104;
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::__tuple_impl(v7 - 104, v9);
      v7 = *((_QWORD *)&v15 + 1) - 104;
      *((_QWORD *)&v15 + 1) -= 104;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>,std::reverse_iterator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>,std::reverse_iterator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>,std::reverse_iterator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>,std::reverse_iterator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>::destroy[abi:ne180100](v3, v1);
      v1 += 104;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 104;
    std::allocator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>::destroy[abi:ne180100](v4, i - 104);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_DWORD *)v6 + 14) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_191C919F8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<std::vector<std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<int>&,std::vector<std::vector<std::string>> &,std::vector<std::vector<int>>&,std::vector<std::vector<int>>&)::$_0 &,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7;
  int *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _DWORD *v89;
  _DWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void **v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  void *v103[2];
  uint64_t v104;
  void *v105[2];
  uint64_t v106;
  void **v107;
  void **v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  void *__p[2];
  uint64_t v117;

LABEL_1:
  v7 = a2;
  v8 = (int *)(a2 - 104);
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = v7 - v9;
    v11 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v7 - v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 - 88) - *(_QWORD *)(a2 - 96)) >> 3) > 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3))
          std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::swap[abi:ne180100]((int *)a1, v8);
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<std::vector<std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<int>&,std::vector<std::vector<std::string>> &,std::vector<std::vector<int>>&,std::vector<std::vector<int>>&)::$_0 &,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>((int *)a1, a1 + 104, (uint64_t)v8);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<std::vector<std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<int>&,std::vector<std::vector<std::string>> &,std::vector<std::vector<int>>&,std::vector<std::vector<int>>&)::$_0 &,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>(a1, a1 + 104, a1 + 208, (uint64_t)v8);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<std::vector<std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<int>&,std::vector<std::vector<std::string>> &,std::vector<std::vector<int>>&,std::vector<std::vector<int>>&)::$_0 &,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*,0>(a1, a1 + 104, a1 + 208, a1 + 312, (uint64_t)v8);
        return;
      default:
        if (v10 <= 2495)
        {
          if ((a4 & 1) != 0)
          {
            if (a1 != v7)
            {
              v45 = (_DWORD *)(a1 + 104);
              if (a1 + 104 != a2)
              {
                v46 = 0;
                v47 = a1;
                do
                {
                  v48 = v45;
                  v50 = *(_QWORD *)(v47 + 112);
                  v49 = *(_QWORD *)(v47 + 120);
                  if (0xAAAAAAAAAAAAAAABLL * ((v49 - v50) >> 3) > 0xAAAAAAAAAAAAAAABLL
                                                                 * ((uint64_t)(*(_QWORD *)(v47 + 16)
                                                                            - *(_QWORD *)(v47 + 8)) >> 3))
                  {
                    LODWORD(v108) = *v45;
                    v109 = v50;
                    v110 = v49;
                    v111 = *(_QWORD *)(v47 + 128);
                    *(_QWORD *)(v47 + 120) = 0;
                    *(_QWORD *)(v47 + 128) = 0;
                    *(_QWORD *)(v47 + 112) = 0;
                    v112 = *(_OWORD *)(v47 + 136);
                    v51 = *(_QWORD *)(v47 + 152);
                    *(_QWORD *)(v47 + 136) = 0;
                    *(_QWORD *)(v47 + 144) = 0;
                    v114 = *(_OWORD *)(v47 + 160);
                    v52 = *(_QWORD *)(v47 + 176);
                    v113 = v51;
                    v115 = v52;
                    *(_QWORD *)(v47 + 152) = 0;
                    *(_QWORD *)(v47 + 160) = 0;
                    *(_QWORD *)(v47 + 168) = 0;
                    *(_QWORD *)(v47 + 176) = 0;
                    *(_OWORD *)__p = *(_OWORD *)(v47 + 184);
                    v117 = *(_QWORD *)(v47 + 200);
                    *(_QWORD *)(v47 + 184) = 0;
                    *(_QWORD *)(v47 + 192) = 0;
                    v53 = v46;
                    *(_QWORD *)(v47 + 200) = 0;
                    while (1)
                    {
                      std::__memberwise_forward_assign[abi:ne180100]<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>,0ul,1ul,2ul,3ul,4ul>(a1 + v53 + 104, a1 + v53);
                      if (!v53)
                        break;
                      v54 = 0xAAAAAAAAAAAAAAABLL
                          * ((uint64_t)(*(_QWORD *)(a1 + v53 - 88) - *(_QWORD *)(a1 + v53 - 96)) >> 3);
                      v53 -= 104;
                      if (0xAAAAAAAAAAAAAAABLL * ((v110 - v109) >> 3) <= v54)
                      {
                        v55 = a1 + v53 + 104;
                        goto LABEL_80;
                      }
                    }
                    v55 = a1;
LABEL_80:
                    std::__memberwise_forward_assign[abi:ne180100]<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>,0ul,1ul,2ul,3ul,4ul>(v55, (uint64_t)&v108);
                    if (__p[0])
                    {
                      __p[1] = __p[0];
                      operator delete(__p[0]);
                    }
                    if ((_QWORD)v114)
                    {
                      *((_QWORD *)&v114 + 1) = v114;
                      operator delete((void *)v114);
                    }
                    v98 = (void **)&v112;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v98);
                    v98 = (void **)&v109;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v98);
                  }
                  v45 = v48 + 26;
                  v46 += 104;
                  v47 = (uint64_t)v48;
                }
                while (v48 + 26 != (_DWORD *)a2);
              }
            }
          }
          else if (a1 != v7)
          {
            v89 = (_DWORD *)(a1 + 104);
            if (a1 + 104 != a2)
            {
              do
              {
                v90 = v89;
                v92 = *(_QWORD *)(a1 + 112);
                v91 = *(_QWORD *)(a1 + 120);
                if (0xAAAAAAAAAAAAAAABLL * ((v91 - v92) >> 3) > 0xAAAAAAAAAAAAAAABLL
                                                               * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3))
                {
                  LODWORD(v108) = *v89;
                  v109 = v92;
                  v110 = v91;
                  v111 = *(_QWORD *)(a1 + 128);
                  *(_QWORD *)(a1 + 120) = 0;
                  *(_QWORD *)(a1 + 128) = 0;
                  *(_QWORD *)(a1 + 112) = 0;
                  v112 = *(_OWORD *)(a1 + 136);
                  v93 = *(_QWORD *)(a1 + 152);
                  *(_QWORD *)(a1 + 136) = 0;
                  *(_QWORD *)(a1 + 144) = 0;
                  v114 = *(_OWORD *)(a1 + 160);
                  v94 = *(_QWORD *)(a1 + 176);
                  v113 = v93;
                  v115 = v94;
                  *(_QWORD *)(a1 + 152) = 0;
                  *(_QWORD *)(a1 + 160) = 0;
                  *(_QWORD *)(a1 + 168) = 0;
                  *(_QWORD *)(a1 + 176) = 0;
                  *(_OWORD *)__p = *(_OWORD *)(a1 + 184);
                  v117 = *(_QWORD *)(a1 + 200);
                  *(_QWORD *)(a1 + 184) = 0;
                  *(_QWORD *)(a1 + 192) = 0;
                  *(_QWORD *)(a1 + 200) = 0;
                  do
                  {
                    std::__memberwise_forward_assign[abi:ne180100]<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>,0ul,1ul,2ul,3ul,4ul>(a1 + 104, a1);
                    v95 = a1 - 104;
                    v96 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 - 88) - *(_QWORD *)(a1 - 96)) >> 3);
                    a1 -= 104;
                  }
                  while (0xAAAAAAAAAAAAAAABLL * ((v110 - v109) >> 3) > v96);
                  std::__memberwise_forward_assign[abi:ne180100]<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>,0ul,1ul,2ul,3ul,4ul>(v95 + 104, (uint64_t)&v108);
                  if (__p[0])
                  {
                    __p[1] = __p[0];
                    operator delete(__p[0]);
                  }
                  if ((_QWORD)v114)
                  {
                    *((_QWORD *)&v114 + 1) = v114;
                    operator delete((void *)v114);
                  }
                  v98 = (void **)&v112;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v98);
                  v98 = (void **)&v109;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v98);
                }
                v89 = v90 + 26;
                a1 = (uint64_t)v90;
              }
              while (v90 + 26 != (_DWORD *)a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if (a1 != v7)
          {
            v56 = (unint64_t)(v11 - 2) >> 1;
            v57 = v56;
            do
            {
              v58 = v57;
              if (v56 >= v57)
              {
                v59 = (2 * v57) | 1;
                v60 = (_QWORD *)(a1 + 104 * v59);
                if (2 * v58 + 2 < v11)
                {
                  v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60[2] - v60[1]) >> 3);
                  v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60[15] - v60[14]) >> 3);
                  v60 += 13 * (v61 > v62);
                  if (v61 > v62)
                    v59 = 2 * v58 + 2;
                }
                v63 = a1 + 104 * v58;
                v65 = *(_QWORD *)(v63 + 8);
                v64 = *(_QWORD *)(v63 + 16);
                v66 = 0xAAAAAAAAAAAAAAABLL * ((v64 - v65) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60[2] - v60[1]) >> 3) <= v66)
                {
                  LODWORD(v108) = *(_DWORD *)v63;
                  v109 = v65;
                  v110 = v64;
                  v111 = *(_QWORD *)(v63 + 24);
                  *(_QWORD *)(v63 + 8) = 0;
                  *(_QWORD *)(v63 + 16) = 0;
                  *(_QWORD *)(v63 + 24) = 0;
                  v112 = *(_OWORD *)(v63 + 32);
                  v113 = *(_QWORD *)(v63 + 48);
                  *(_QWORD *)(v63 + 32) = 0;
                  *(_QWORD *)(v63 + 40) = 0;
                  *(_QWORD *)(v63 + 48) = 0;
                  v114 = *(_OWORD *)(v63 + 56);
                  v115 = *(_QWORD *)(v63 + 72);
                  *(_QWORD *)(v63 + 56) = 0;
                  *(_QWORD *)(v63 + 64) = 0;
                  *(_QWORD *)(v63 + 72) = 0;
                  *(_OWORD *)__p = *(_OWORD *)(v63 + 80);
                  v117 = *(_QWORD *)(v63 + 96);
                  *(_QWORD *)(v63 + 80) = 0;
                  *(_QWORD *)(v63 + 88) = 0;
                  *(_QWORD *)(v63 + 96) = 0;
                  do
                  {
                    v67 = (uint64_t)v60;
                    std::__memberwise_forward_assign[abi:ne180100]<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>,0ul,1ul,2ul,3ul,4ul>(v63, (uint64_t)v60);
                    if (v56 < v59)
                      break;
                    v68 = (2 * v59) | 1;
                    v60 = (_QWORD *)(a1 + 104 * v68);
                    if (2 * v59 + 2 < v11)
                    {
                      v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60[2] - v60[1]) >> 3);
                      v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60[15] - v60[14]) >> 3);
                      v60 += 13 * (v69 > v70);
                      if (v69 > v70)
                        v68 = 2 * v59 + 2;
                    }
                    v63 = v67;
                    v59 = v68;
                  }
                  while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60[2] - v60[1]) >> 3) <= v66);
                  std::__memberwise_forward_assign[abi:ne180100]<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>,0ul,1ul,2ul,3ul,4ul>(v67, (uint64_t)&v108);
                  if (__p[0])
                  {
                    __p[1] = __p[0];
                    operator delete(__p[0]);
                  }
                  if ((_QWORD)v114)
                  {
                    *((_QWORD *)&v114 + 1) = v114;
                    operator delete((void *)v114);
                  }
                  v98 = (void **)&v112;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v98);
                  v98 = (void **)&v109;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v98);
                }
              }
              v57 = v58 - 1;
            }
            while (v58);
            v71 = v10 / 0x68uLL;
            do
            {
              v72 = 0;
              LODWORD(v98) = *(_DWORD *)a1;
              v99 = *(_OWORD *)(a1 + 8);
              v100 = *(_QWORD *)(a1 + 24);
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)(a1 + 24) = 0;
              *(_QWORD *)(a1 + 8) = 0;
              v101 = *(_OWORD *)(a1 + 32);
              v102 = *(_QWORD *)(a1 + 48);
              *(_QWORD *)(a1 + 40) = 0;
              *(_QWORD *)(a1 + 48) = 0;
              *(_QWORD *)(a1 + 32) = 0;
              *(_OWORD *)v103 = *(_OWORD *)(a1 + 56);
              v104 = *(_QWORD *)(a1 + 72);
              *(_QWORD *)(a1 + 56) = 0;
              *(_QWORD *)(a1 + 64) = 0;
              *(_QWORD *)(a1 + 72) = 0;
              *(_OWORD *)v105 = *(_OWORD *)(a1 + 80);
              v106 = *(_QWORD *)(a1 + 96);
              *(_QWORD *)(a1 + 80) = 0;
              *(_QWORD *)(a1 + 88) = 0;
              v73 = a1;
              *(_QWORD *)(a1 + 96) = 0;
              do
              {
                v74 = v73 + 104 * v72 + 104;
                v75 = (2 * v72) | 1;
                v76 = 2 * v72 + 2;
                if (v76 < v71)
                {
                  v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v74 + 16) - *(_QWORD *)(v74 + 8)) >> 3);
                  v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v74 + 120) - *(_QWORD *)(v74 + 112)) >> 3);
                  v74 += 104 * (v77 > v78);
                  if (v77 > v78)
                    v75 = v76;
                }
                std::__memberwise_forward_assign[abi:ne180100]<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>,0ul,1ul,2ul,3ul,4ul>(v73, v74);
                v73 = v74;
                v72 = v75;
              }
              while (v75 <= (uint64_t)((unint64_t)(v71 - 2) >> 1));
              v79 = a2 - 104;
              v80 = v74 == a2 - 104;
              a2 -= 104;
              if (v80)
              {
                std::__memberwise_forward_assign[abi:ne180100]<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>,0ul,1ul,2ul,3ul,4ul>(v74, (uint64_t)&v98);
              }
              else
              {
                std::__memberwise_forward_assign[abi:ne180100]<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>,0ul,1ul,2ul,3ul,4ul>(v74, v79);
                std::__memberwise_forward_assign[abi:ne180100]<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>,0ul,1ul,2ul,3ul,4ul>(v79, (uint64_t)&v98);
                v81 = v74 - a1 + 104;
                if (v81 >= 105)
                {
                  v82 = (v81 / 0x68uLL - 2) >> 1;
                  v83 = a1 + 104 * v82;
                  v85 = *(_QWORD *)(v74 + 8);
                  v84 = *(_QWORD *)(v74 + 16);
                  v86 = 0xAAAAAAAAAAAAAAABLL * ((v84 - v85) >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v83 + 16) - *(_QWORD *)(v83 + 8)) >> 3) > v86)
                  {
                    LODWORD(v108) = *(_DWORD *)v74;
                    v109 = v85;
                    v110 = v84;
                    v111 = *(_QWORD *)(v74 + 24);
                    *(_QWORD *)(v74 + 8) = 0;
                    *(_QWORD *)(v74 + 16) = 0;
                    *(_QWORD *)(v74 + 24) = 0;
                    v112 = *(_OWORD *)(v74 + 32);
                    v113 = *(_QWORD *)(v74 + 48);
                    *(_QWORD *)(v74 + 32) = 0;
                    *(_QWORD *)(v74 + 40) = 0;
                    *(_QWORD *)(v74 + 48) = 0;
                    v114 = *(_OWORD *)(v74 + 56);
                    v115 = *(_QWORD *)(v74 + 72);
                    *(_QWORD *)(v74 + 56) = 0;
                    *(_QWORD *)(v74 + 64) = 0;
                    *(_QWORD *)(v74 + 72) = 0;
                    *(_OWORD *)__p = *(_OWORD *)(v74 + 80);
                    v117 = *(_QWORD *)(v74 + 96);
                    *(_QWORD *)(v74 + 80) = 0;
                    *(_QWORD *)(v74 + 88) = 0;
                    *(_QWORD *)(v74 + 96) = 0;
                    do
                    {
                      v87 = v83;
                      std::__memberwise_forward_assign[abi:ne180100]<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>,0ul,1ul,2ul,3ul,4ul>(v74, v83);
                      if (!v82)
                        break;
                      v82 = (v82 - 1) >> 1;
                      v83 = a1 + 104 * v82;
                      v74 = v87;
                    }
                    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v83 + 16) - *(_QWORD *)(v83 + 8)) >> 3) > v86);
                    std::__memberwise_forward_assign[abi:ne180100]<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>,0ul,1ul,2ul,3ul,4ul>(v87, (uint64_t)&v108);
                    if (__p[0])
                    {
                      __p[1] = __p[0];
                      operator delete(__p[0]);
                    }
                    if ((_QWORD)v114)
                    {
                      *((_QWORD *)&v114 + 1) = v114;
                      operator delete((void *)v114);
                    }
                    v107 = (void **)&v112;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v107);
                    v107 = (void **)&v109;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v107);
                  }
                }
              }
              if (v105[0])
              {
                v105[1] = v105[0];
                operator delete(v105[0]);
              }
              if (v103[0])
              {
                v103[1] = v103[0];
                operator delete(v103[0]);
              }
              v108 = (void **)&v101;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v108);
              v108 = (void **)&v99;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v108);
            }
            while (v71-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (int *)(a1 + 104 * ((unint64_t)v11 >> 1));
        if ((unint64_t)v10 < 0x3401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<std::vector<std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<int>&,std::vector<std::vector<std::string>> &,std::vector<std::vector<int>>&,std::vector<std::vector<int>>&)::$_0 &,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>(v13, a1, (uint64_t)v8);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<std::vector<std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<int>&,std::vector<std::vector<std::string>> &,std::vector<std::vector<int>>&,std::vector<std::vector<int>>&)::$_0 &,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>((int *)a1, (uint64_t)v13, (uint64_t)v8);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<std::vector<std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<int>&,std::vector<std::vector<std::string>> &,std::vector<std::vector<int>>&,std::vector<std::vector<int>>&)::$_0 &,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>((int *)(a1 + 104), 104 * v12 + a1 - 104, a2 - 208);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<std::vector<std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<int>&,std::vector<std::vector<std::string>> &,std::vector<std::vector<int>>&,std::vector<std::vector<int>>&)::$_0 &,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>((int *)(a1 + 208), a1 + 104 + 104 * v12, a2 - 312);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<std::vector<std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<int>&,std::vector<std::vector<std::string>> &,std::vector<std::vector<int>>&,std::vector<std::vector<int>>&)::$_0 &,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>((int *)(104 * v12 + a1 - 104), (uint64_t)v13, a1 + 104 + 104 * v12);
          std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::swap[abi:ne180100]((int *)a1, v13);
        }
        --a3;
        v7 = a2;
        if ((a4 & 1) == 0)
        {
          v15 = *(_QWORD *)(a1 + 8);
          v14 = *(_QWORD *)(a1 + 16);
          v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 - 88) - *(_QWORD *)(a1 - 96)) >> 3) > v16)
            goto LABEL_11;
          LODWORD(v108) = *(_DWORD *)a1;
          v109 = v15;
          v110 = v14;
          v111 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 8) = 0;
          v112 = *(_OWORD *)(a1 + 32);
          v113 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 40) = 0;
          *(_QWORD *)(a1 + 48) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          v114 = *(_OWORD *)(a1 + 56);
          v115 = *(_QWORD *)(a1 + 72);
          *(_QWORD *)(a1 + 56) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 72) = 0;
          *(_OWORD *)__p = *(_OWORD *)(a1 + 80);
          v117 = *(_QWORD *)(a1 + 96);
          *(_QWORD *)(a1 + 80) = 0;
          *(_QWORD *)(a1 + 88) = 0;
          *(_QWORD *)(a1 + 96) = 0;
          if (v16 <= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 - 88) - *(_QWORD *)(a2 - 96)) >> 3))
          {
            v36 = a1 + 104;
            do
            {
              v9 = v36;
              if (v36 >= a2)
                break;
              v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v36 + 16) - *(_QWORD *)(v36 + 8)) >> 3);
              v36 += 104;
            }
            while (v16 <= v37);
          }
          else
          {
            v34 = a1;
            do
            {
              v9 = v34 + 104;
              v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v34 + 120) - *(_QWORD *)(v34 + 112)) >> 3);
              v34 += 104;
            }
            while (v16 <= v35);
          }
          v38 = (int *)a2;
          if (v9 < a2)
          {
            v39 = a2;
            do
            {
              v38 = (int *)(v39 - 104);
              v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v39 - 88) - *(_QWORD *)(v39 - 96)) >> 3);
              v39 -= 104;
            }
            while (v16 > v40);
          }
          while (v9 < (unint64_t)v38)
          {
            std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::swap[abi:ne180100]((int *)v9, v38);
            do
            {
              v42 = *(_QWORD *)(v9 + 112);
              v41 = *(_QWORD *)(v9 + 120);
              v9 += 104;
            }
            while (v16 <= 0xAAAAAAAAAAAAAAABLL * ((v41 - v42) >> 3));
            do
            {
              v44 = *((_QWORD *)v38 - 12);
              v43 = *((_QWORD *)v38 - 11);
              v38 -= 26;
            }
            while (v16 > 0xAAAAAAAAAAAAAAABLL * ((v43 - v44) >> 3));
          }
          if (v9 - 104 != a1)
            std::__memberwise_forward_assign[abi:ne180100]<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>,0ul,1ul,2ul,3ul,4ul>(a1, v9 - 104);
          std::__memberwise_forward_assign[abi:ne180100]<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>,0ul,1ul,2ul,3ul,4ul>(v9 - 104, (uint64_t)&v108);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if ((_QWORD)v114)
          {
            *((_QWORD *)&v114 + 1) = v114;
            operator delete((void *)v114);
          }
          v98 = (void **)&v112;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v98);
          v98 = (void **)&v109;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v98);
          a4 = 0;
          continue;
        }
        v15 = *(_QWORD *)(a1 + 8);
        v14 = *(_QWORD *)(a1 + 16);
        v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
LABEL_11:
        v17 = 0;
        LODWORD(v108) = *(_DWORD *)a1;
        v109 = v15;
        v110 = v14;
        v111 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 8) = 0;
        v112 = *(_OWORD *)(a1 + 32);
        v113 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 32) = 0;
        v114 = *(_OWORD *)(a1 + 56);
        v115 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 64) = 0;
        *(_QWORD *)(a1 + 72) = 0;
        *(_OWORD *)__p = *(_OWORD *)(a1 + 80);
        v117 = *(_QWORD *)(a1 + 96);
        *(_QWORD *)(a1 + 80) = 0;
        *(_QWORD *)(a1 + 88) = 0;
        *(_QWORD *)(a1 + 96) = 0;
        do
        {
          v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + v17 + 120) - *(_QWORD *)(a1 + v17 + 112)) >> 3);
          v17 += 104;
        }
        while (v18 > v16);
        v19 = a1 + v17;
        v20 = a2;
        if (v17 == 104)
        {
          v23 = a2;
          while (v19 < v23)
          {
            v21 = (int *)(v23 - 104);
            v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v23 - 88) - *(_QWORD *)(v23 - 96)) >> 3);
            v23 -= 104;
            if (v24 > v16)
              goto LABEL_21;
          }
          v21 = (int *)v23;
        }
        else
        {
          do
          {
            v21 = (int *)(v20 - 104);
            v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v20 - 88) - *(_QWORD *)(v20 - 96)) >> 3);
            v20 -= 104;
          }
          while (v22 <= v16);
        }
LABEL_21:
        if (v19 >= (unint64_t)v21)
        {
          v31 = v19 - 104;
        }
        else
        {
          v25 = v19;
          v26 = v21;
          do
          {
            std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::swap[abi:ne180100]((int *)v25, v26);
            do
            {
              v28 = *(_QWORD *)(v25 + 112);
              v27 = *(_QWORD *)(v25 + 120);
              v25 += 104;
            }
            while (0xAAAAAAAAAAAAAAABLL * ((v27 - v28) >> 3) > v16);
            do
            {
              v30 = *((_QWORD *)v26 - 12);
              v29 = *((_QWORD *)v26 - 11);
              v26 -= 26;
            }
            while (0xAAAAAAAAAAAAAAABLL * ((v29 - v30) >> 3) <= v16);
          }
          while (v25 < (unint64_t)v26);
          v31 = v25 - 104;
        }
        if (v31 != a1)
          std::__memberwise_forward_assign[abi:ne180100]<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>,0ul,1ul,2ul,3ul,4ul>(a1, v31);
        std::__memberwise_forward_assign[abi:ne180100]<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>,0ul,1ul,2ul,3ul,4ul>(v31, (uint64_t)&v108);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if ((_QWORD)v114)
        {
          *((_QWORD *)&v114 + 1) = v114;
          operator delete((void *)v114);
        }
        v98 = (void **)&v112;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v98);
        v98 = (void **)&v109;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v98);
        v32 = v19 >= (unint64_t)v21;
        v7 = a2;
        if (!v32)
        {
LABEL_39:
          std::__introsort<std::_ClassicAlgPolicy,CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<std::vector<std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<int>&,std::vector<std::vector<std::string>> &,std::vector<std::vector<int>>&,std::vector<std::vector<int>>&)::$_0 &,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*,false>(a1, v31, a3, a4 & 1);
          a4 = 0;
          v9 = v31 + 104;
          continue;
        }
        v33 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<std::vector<std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<int>&,std::vector<std::vector<std::string>> &,std::vector<std::vector<int>>&,std::vector<std::vector<int>>&)::$_0 &,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>(a1, v31);
        v9 = v31 + 104;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<std::vector<std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<int>&,std::vector<std::vector<std::string>> &,std::vector<std::vector<int>>&,std::vector<std::vector<int>>&)::$_0 &,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>(v31 + 104, a2))
        {
          if (v33)
            continue;
          goto LABEL_39;
        }
        a2 = v31;
        if (!v33)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v20 = *(a2 - 2);
        v19 = (__int128 *)(a2 - 2);
        if (v20 < *v9)
        {
          v28 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *v19;
          *v19 = v28;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v9, v9 + 2, a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v9, v9 + 2, v9 + 4, (_OWORD *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v9, v9 + 2, v9 + 4, (__n128 *)v9 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v12 > 383)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(v9, a2, a2, a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v9, &v9[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v9 + 1, v15 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v9 + 2, &v9[2 * v14 + 2], a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)v15 - 1, v15, &v9[2 * v14 + 2]);
            v27 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v27;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(v9 - 2) >= *v9)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,std::__less<void,void> &>(v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v16 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,std::__less<void,void> &>((__int128 *)v9, (__int128 *)a2);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)v9, (unint64_t *)v16);
          v9 = (unint64_t *)(v16 + 1);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v16 + 1), a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = (unint64_t *)(v16 + 1);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (unint64_t *)v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(v9, a2);
        }
        else if (v9 != a2)
        {
          v21 = v9 + 2;
          while (v21 != a2)
          {
            v22 = v21;
            v23 = a1[2];
            if (v23 < *a1)
            {
              v24 = a1[3];
              v25 = v22;
              do
              {
                *(_OWORD *)v25 = *((_OWORD *)v25 - 1);
                v26 = *(v25 - 4);
                v25 -= 2;
              }
              while (v23 < v26);
              *v25 = v23;
              v25[1] = v24;
            }
            v21 = v22 + 2;
            a1 = v22;
          }
        }
        return;
    }
  }
}

int *std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<std::vector<std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<int>&,std::vector<std::vector<std::string>> &,std::vector<std::vector<int>>&,std::vector<std::vector<int>>&)::$_0 &,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *result;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<std::vector<std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<int>&,std::vector<std::vector<std::string>> &,std::vector<std::vector<int>>&,std::vector<std::vector<int>>&)::$_0 &,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>(a1, a2, a3, a4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a5 + 16) - *(_QWORD *)(a5 + 8)) >> 3) > 0xAAAAAAAAAAAAAAABLL
                                                                                           * ((uint64_t)(*(_QWORD *)(a4 + 16) - *(_QWORD *)(a4 + 8)) >> 3))
  {
    result = std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::swap[abi:ne180100]((int *)a4, (int *)a5);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 16) - *(_QWORD *)(a4 + 8)) >> 3) > 0xAAAAAAAAAAAAAAABLL
                                                                                             * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 3))
    {
      result = std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::swap[abi:ne180100]((int *)a3, (int *)a4);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 3) > 0xAAAAAAAAAAAAAAABLL
                                                                                               * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3))
      {
        result = std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::swap[abi:ne180100]((int *)a2, (int *)a3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3) > 0xAAAAAAAAAAAAAAABLL
                                                                                                 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3))
          return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::swap[abi:ne180100]((int *)a1, (int *)a2);
      }
    }
  }
  return result;
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<std::vector<std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<int>&,std::vector<std::vector<std::string>> &,std::vector<std::vector<int>>&,std::vector<std::vector<int>>&)::$_0 &,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>(int *result, uint64_t a2, uint64_t a3)
{
  int *v5;
  unint64_t v6;
  unint64_t v7;
  int *v8;

  v5 = result;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 3);
  if (v6 > 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)result + 2) - *((_QWORD *)result + 1)) >> 3))
  {
    if (v7 <= v6)
    {
      result = std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::swap[abi:ne180100](result, (int *)a2);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 3) <= 0xAAAAAAAAAAAAAAABLL
                                                                                                * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3))
        return result;
      result = (int *)a2;
    }
    v8 = (int *)a3;
    return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::swap[abi:ne180100](result, v8);
  }
  if (v7 > v6)
  {
    result = std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::swap[abi:ne180100]((int *)a2, (int *)a3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3) > 0xAAAAAAAAAAAAAAABLL
                                                                                             * ((uint64_t)(*((_QWORD *)v5 + 2) - *((_QWORD *)v5 + 1)) >> 3))
    {
      result = v5;
      v8 = (int *)a2;
      return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::swap[abi:ne180100](result, v8);
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<std::vector<std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<int>&,std::vector<std::vector<std::string>> &,std::vector<std::vector<int>>&,std::vector<std::vector<int>>&)::$_0 &,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  void *v21[2];
  uint64_t v22;
  void *__p[2];
  uint64_t v24;
  void **v25;

  v4 = 0x4EC4EC4EC4EC4EC5 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 - 88) - *(_QWORD *)(a2 - 96)) >> 3) > 0xAAAAAAAAAAAAAAABLL
                                                                                                * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3))
      {
        std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::swap[abi:ne180100]((int *)a1, (int *)(a2 - 104));
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<std::vector<std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<int>&,std::vector<std::vector<std::string>> &,std::vector<std::vector<int>>&,std::vector<std::vector<int>>&)::$_0 &,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>((int *)a1, a1 + 104, a2 - 104);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<std::vector<std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<int>&,std::vector<std::vector<std::string>> &,std::vector<std::vector<int>>&,std::vector<std::vector<int>>&)::$_0 &,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>(a1, a1 + 104, a1 + 208, a2 - 104);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<std::vector<std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<int>&,std::vector<std::vector<std::string>> &,std::vector<std::vector<int>>&,std::vector<std::vector<int>>&)::$_0 &,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*,0>(a1, a1 + 104, a1 + 208, a1 + 312, a2 - 104);
      return 1;
    default:
      v6 = a1 + 208;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<std::vector<std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<int>&,std::vector<std::vector<std::string>> &,std::vector<std::vector<int>>&,std::vector<std::vector<int>>&)::$_0 &,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>((int *)a1, a1 + 104, a1 + 208);
      v7 = a1 + 312;
      if (a1 + 312 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v10 = *(_QWORD *)(v7 + 8);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v7 + 16) - v10) >> 3) > 0xAAAAAAAAAAAAAAABLL
                                                                    * ((uint64_t)(*(_QWORD *)(v6 + 16)
                                                                               - *(_QWORD *)(v6 + 8)) >> 3))
    {
      v16 = *(_DWORD *)v7;
      v17 = v10;
      v11 = *(_OWORD *)(v7 + 16);
      v12 = *(_OWORD *)(v7 + 32);
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 24) = 0;
      v18 = v11;
      v19 = v12;
      v20 = *(_QWORD *)(v7 + 48);
      *(_QWORD *)(v7 + 32) = 0;
      *(_QWORD *)(v7 + 40) = 0;
      *(_OWORD *)v21 = *(_OWORD *)(v7 + 56);
      v22 = *(_QWORD *)(v7 + 72);
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      *(_QWORD *)(v7 + 64) = 0;
      *(_QWORD *)(v7 + 72) = 0;
      *(_OWORD *)__p = *(_OWORD *)(v7 + 80);
      v24 = *(_QWORD *)(v7 + 96);
      *(_QWORD *)(v7 + 88) = 0;
      *(_QWORD *)(v7 + 96) = 0;
      v13 = v8;
      *(_QWORD *)(v7 + 80) = 0;
      while (1)
      {
        std::__memberwise_forward_assign[abi:ne180100]<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>,0ul,1ul,2ul,3ul,4ul>(a1 + v13 + 312, a1 + v13 + 208);
        if (v13 == -208)
          break;
        v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + v13 + 120) - *(_QWORD *)(a1 + v13 + 112)) >> 3);
        v13 -= 104;
        if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v18 - v17) >> 3) <= v14)
        {
          v15 = a1 + v13 + 312;
          goto LABEL_12;
        }
      }
      v15 = a1;
LABEL_12:
      std::__memberwise_forward_assign[abi:ne180100]<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>,0ul,1ul,2ul,3ul,4ul>(v15, (uint64_t)&v16);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v21[0])
      {
        v21[1] = v21[0];
        operator delete(v21[0]);
      }
      ++v9;
      v25 = (void **)&v19;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v25);
      v25 = (void **)&v17;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v25);
      if (v9 == 8)
        return v7 + 104 == a2;
    }
    v6 = v7;
    v8 += 104;
    v7 += 104;
    if (v7 == a2)
      return 1;
  }
}

int *std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::swap[abi:ne180100](int *result, int *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v3 = *((_QWORD *)result + 1);
  *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  v4 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v4;
  v5 = *((_QWORD *)result + 3);
  *((_QWORD *)result + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v5;
  v6 = *((_QWORD *)result + 4);
  *((_QWORD *)result + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)result + 5);
  *((_QWORD *)result + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = *((_QWORD *)result + 6);
  *((_QWORD *)result + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  v9 = *((_QWORD *)result + 7);
  *((_QWORD *)result + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v9;
  v10 = *((_QWORD *)result + 8);
  *((_QWORD *)result + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v10;
  v11 = *((_QWORD *)result + 9);
  *((_QWORD *)result + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v11;
  v12 = *((_QWORD *)result + 10);
  *((_QWORD *)result + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v12;
  v13 = *((_QWORD *)result + 11);
  *((_QWORD *)result + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v13;
  v14 = *((_QWORD *)result + 12);
  *((_QWORD *)result + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v14;
  return result;
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<std::vector<std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<int>&,std::vector<std::vector<std::string>> &,std::vector<std::vector<int>>&,std::vector<std::vector<int>>&)::$_0 &,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *result;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,CoreNLP::TransferSeqTagModel::prepareDataSubsetForBatch(std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<std::vector<std::vector<int>>> &,std::vector<std::vector<std::string>> &,std::vector<int>&,std::vector<std::vector<std::string>> &,std::vector<std::vector<int>>&,std::vector<std::vector<int>>&)::$_0 &,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>((int *)a1, a2, a3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 16) - *(_QWORD *)(a4 + 8)) >> 3) > 0xAAAAAAAAAAAAAAABLL
                                                                                           * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 3))
  {
    result = std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::swap[abi:ne180100]((int *)a3, (int *)a4);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 3) > 0xAAAAAAAAAAAAAAABLL
                                                                                             * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3))
    {
      result = std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::swap[abi:ne180100]((int *)a2, (int *)a3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3) > 0xAAAAAAAAAAAAAAABLL
                                                                                               * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3))
        return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::swap[abi:ne180100]((int *)a1, (int *)a2);
    }
  }
  return result;
}

double std::__memberwise_forward_assign[abi:ne180100]<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>,0ul,1ul,2ul,3ul,4ul>(uint64_t a1, uint64_t a2)
{
  double result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 32));
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  std::vector<int>::__move_assign(a1 + 56, (__n128 *)(a2 + 56));
  *(_QWORD *)&result = std::vector<int>::__move_assign(a1 + 80, (__n128 *)(a2 + 80)).n128_u64[0];
  return result;
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

__n128 std::vector<int>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t applesauce::CF::at_or<int,__CFString const* const&>(const __CFDictionary *a1, const void **a2, unsigned int *a3)
{
  const __CFDictionary *v4;
  uint64_t result;

  v4 = applesauce::CF::details::at_key<__CFString const* const&>(a1, a2);
  if (!v4)
    return *a3;
  result = applesauce::CF::convert_as<int,0>(v4);
  if ((result & 0xFF00000000) != 0)
    return result;
  else
    return *a3;
}

std::string *std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>(uint64_t a1, __int128 **a2)
{
  std::string *v3;
  std::string *result;

  v3 = *(std::string **)(a1 + 8);
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 1;
  return result;
}

void sub_191C93040(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(uint64_t *a1, __int128 **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  uint64_t v12;
  void *v14[2];
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  ++v15;
  std::vector<std::vector<std::string>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<std::string>>::~__split_buffer(v14);
  return v12;
}

void sub_191C93154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::string>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::string>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::string>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

_QWORD *std::vector<std::vector<std::vector<int>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<int>> const&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<std::vector<int>>::__init_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_191C933CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<int>>>::__push_back_slow_path<std::vector<std::vector<int>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<std::vector<int>>::__init_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v15 += 24;
  std::vector<std::vector<std::vector<int>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<std::vector<int>>>::~__split_buffer(v14);
  return v12;
}

void sub_191C934E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<int>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<int>>::__init_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int>*,std::vector<int>*,std::vector<int>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_191C93558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int>*,std::vector<int>*,std::vector<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_191C93614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long>>,std::vector<long>*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::vector<std::vector<std::vector<int>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<int>>>,std::reverse_iterator<std::vector<std::vector<int>>*>,std::reverse_iterator<std::vector<std::vector<int>>*>,std::reverse_iterator<std::vector<std::vector<int>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<int>>>,std::reverse_iterator<std::vector<std::vector<int>>*>,std::reverse_iterator<std::vector<std::vector<int>>*>,std::reverse_iterator<std::vector<std::vector<int>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<int>>>,std::reverse_iterator<std::vector<std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<int>>>,std::reverse_iterator<std::vector<std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<int>>>,std::reverse_iterator<std::vector<std::vector<int>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<int>>>,std::reverse_iterator<std::vector<std::vector<int>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<int>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::vector<int>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::vector<int>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_191C938D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_191C9394C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>,std::__wrap_iter<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_191C939CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x276276276276277)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[104 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::__tuple_impl(v4, v6);
      v6 += 104;
      v4 = v11 + 104;
      v11 += 104;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_191C93ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>::__tuple_impl(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 8), *(__int128 **)(a2 + 8), *(__int128 **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 32), *(__int128 **)(a2 + 32), *(__int128 **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 56), *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 80), *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  return a1;
}

void sub_191C93BB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 64) = v5;
    operator delete(v5);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>,std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 104;
      std::allocator<std::tuple<int,std::vector<std::string>,std::vector<std::string>,std::vector<int>,std::vector<int>>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::vector<std::vector<std::vector<int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::string *std::vector<std::vector<std::vector<std::string>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<std::string>> const&>(uint64_t a1, __int128 ***a2)
{
  std::string *v3;
  std::string *result;

  v3 = *(std::string **)(a1 + 8);
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  result = std::vector<std::vector<std::string>>::__init_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  *(_QWORD *)(a1 + 8) = v3 + 1;
  return result;
}

void sub_191C93D40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<std::string>>>::__push_back_slow_path<std::vector<std::vector<std::string>> const&>(uint64_t *a1, __int128 ***a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  uint64_t v12;
  void *v14[2];
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::vector<std::string>>::__init_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  ++v15;
  std::vector<std::vector<std::vector<std::string>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<std::vector<std::string>>>::~__split_buffer(v14);
  return v12;
}

void sub_191C93E54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::string>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::vector<std::string>>::__init_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>(std::string *result, __int128 **a2, __int128 **a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_191C93ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>(uint64_t a1, __int128 **a2, __int128 **a3, std::string *a4)
{
  std::string *v4;
  __int128 **v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v6[1] - (char *)*v6) >> 3));
      v4 = ++v11;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_191C93F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t std::vector<std::vector<std::vector<std::string>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::string>>>,std::reverse_iterator<std::vector<std::vector<std::string>>*>,std::reverse_iterator<std::vector<std::vector<std::string>>*>,std::reverse_iterator<std::vector<std::vector<std::string>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::string>>>,std::reverse_iterator<std::vector<std::vector<std::string>>*>,std::reverse_iterator<std::vector<std::vector<std::string>>*>,std::reverse_iterator<std::vector<std::vector<std::string>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::string>>>,std::reverse_iterator<std::vector<std::vector<std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::string>>>,std::reverse_iterator<std::vector<std::vector<std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::string>>>,std::reverse_iterator<std::vector<std::vector<std::string>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::string>>>,std::reverse_iterator<std::vector<std::vector<std::string>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<std::string>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::vector<std::string>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::vector<std::string>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

_QWORD *std::vector<std::vector<std::vector<std::vector<int>>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<std::vector<int>>> const&>(uint64_t a1, uint64_t **a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<std::vector<std::vector<int>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<int>>*,std::vector<std::vector<int>>*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_191C94288(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<std::vector<int>>>>::__push_back_slow_path<std::vector<std::vector<std::vector<int>>> const&>(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<std::vector<std::vector<int>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<int>>*,std::vector<std::vector<int>>*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  v15 += 24;
  std::vector<std::vector<std::vector<std::vector<int>>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<std::vector<std::vector<int>>>>::~__split_buffer(v14);
  return v12;
}

void sub_191C9439C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::vector<int>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<std::vector<int>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<int>>*,std::vector<std::vector<int>>*>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<int>>>,std::vector<std::vector<int>>*,std::vector<std::vector<int>>*,std::vector<std::vector<int>>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_191C94414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<std::vector<int>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<int>>>,std::vector<std::vector<int>>*,std::vector<std::vector<int>>*,std::vector<std::vector<int>>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t *v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<std::vector<int>>::__init_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 3));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<int>>>,std::vector<std::vector<int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_191C944DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<int>>>,std::vector<std::vector<int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<int>>>,std::vector<std::vector<int>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<int>>>,std::vector<std::vector<int>>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<int>>>,std::vector<std::vector<int>>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t std::vector<std::vector<std::vector<std::vector<int>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::vector<int>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<int>>>*>,std::reverse_iterator<std::vector<std::vector<std::vector<int>>>*>,std::reverse_iterator<std::vector<std::vector<std::vector<int>>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::vector<int>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<int>>>*>,std::reverse_iterator<std::vector<std::vector<std::vector<int>>>*>,std::reverse_iterator<std::vector<std::vector<std::vector<int>>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<int>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<int>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<int>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<int>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<int>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<int>>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<int>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<int>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::vector<std::vector<int>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<std::vector<int>>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::vector<std::vector<int>>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::vector<std::vector<int>>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::vector<std::vector<int>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<std::string>>::__assign_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>(uint64_t a1, __int128 **a2, __int128 **a3, unint64_t a4)
{
  uint64_t v8;
  std::vector<std::string> *v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  __int128 **v13;
  void **v14;
  void **v15;
  void **v16;
  char v17;
  char v18;
  void **v19;

  v8 = a1 + 16;
  v9 = *(std::vector<std::string> **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<std::string>>::__vdeallocate((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>(v8, a2, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>((int)&v17, (uint64_t)a2, (uint64_t)v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>(v8, v13, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>((int)&v18, (uint64_t)a2, (uint64_t)a3, v9);
  v15 = v14;
  v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      v19 = v16;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_191C948EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_191C948F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::string>>::__vdeallocate(void ***a1)
{
  void **v1;
  void **v3;
  void **v4;
  void **v5;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        v5 = v3;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>(int a1, uint64_t a2, uint64_t a3, std::vector<std::string> *this)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((std::vector<std::string> *)v5 != this)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(this, *(std::string **)v5, *(__int128 **)(v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3));
      v5 += 24;
      ++this;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::vector<std::string>::pointer end;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_191C94B48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_191C94B50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<int>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int>*,std::vector<int>*,std::vector<int>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v20, a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int>*,std::vector<int>*,std::vector<int>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v21, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    v17 = *(_QWORD *)(a1 + 8);
    do
    {
      v19 = *(void **)(v17 - 24);
      v17 -= 24;
      v18 = v19;
      if (v19)
      {
        *(_QWORD *)(v16 - 16) = v18;
        operator delete(v18);
      }
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_191C94E34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_191C94E3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<int>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<int>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a4, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<std::vector<std::vector<std::vector<std::string>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<std::vector<std::vector<std::vector<int>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<std::vector<std::vector<int>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::vector<std::vector<std::vector<std::string>>>>::__push_back_slow_path<std::vector<std::vector<std::vector<std::string>>> const&>(uint64_t *a1, __int128 ****a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  uint64_t v12;
  void *v14[2];
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::vector<std::vector<std::string>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<std::string>>*,std::vector<std::vector<std::string>>*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  ++v15;
  std::vector<std::vector<std::vector<std::vector<std::string>>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<std::vector<std::vector<std::string>>>>::~__split_buffer(v14);
  return v12;
}

void sub_191C950D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::vector<std::string>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::vector<std::vector<std::string>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<std::string>>*,std::vector<std::vector<std::string>>*>(std::string *result, __int128 ***a2, __int128 ***a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<std::string>>>,std::vector<std::vector<std::string>>*,std::vector<std::vector<std::string>>*,std::vector<std::vector<std::string>>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_191C9514C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<std::string>>>,std::vector<std::vector<std::string>>*,std::vector<std::vector<std::string>>*,std::vector<std::vector<std::string>>*>(uint64_t a1, __int128 ***a2, __int128 ***a3, std::string *a4)
{
  std::string *v4;
  __int128 ***v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::vector<std::string>>::__init_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (v6[1] - *v6));
      v4 = ++v11;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::string>>>,std::vector<std::vector<std::string>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_191C95214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::string>>>,std::vector<std::vector<std::string>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::string>>>,std::vector<std::vector<std::string>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::string>>>,std::vector<std::vector<std::string>>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::string>>>,std::vector<std::vector<std::string>>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t std::vector<std::vector<std::vector<std::vector<std::string>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::vector<std::string>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<std::string>>>*>,std::reverse_iterator<std::vector<std::vector<std::vector<std::string>>>*>,std::reverse_iterator<std::vector<std::vector<std::vector<std::string>>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::vector<std::string>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<std::string>>>*>,std::reverse_iterator<std::vector<std::vector<std::vector<std::string>>>*>,std::reverse_iterator<std::vector<std::vector<std::vector<std::string>>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<std::string>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<std::string>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<std::string>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<std::string>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<std::string>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<std::string>>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<std::string>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<std::string>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<std::vector<std::string>>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::vector<std::vector<std::string>>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::vector<std::vector<std::string>>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::vector<std::vector<std::vector<std::vector<std::vector<int>>>>>::__push_back_slow_path<std::vector<std::vector<std::vector<std::vector<int>>>> const&>(uint64_t *a1, uint64_t ***a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<std::vector<std::vector<std::vector<int>>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<std::vector<int>>>*,std::vector<std::vector<std::vector<int>>>*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  v15 += 24;
  std::vector<std::vector<std::vector<std::vector<std::vector<int>>>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<std::vector<std::vector<std::vector<int>>>>>::~__split_buffer(v14);
  return v12;
}

void sub_191C955C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::vector<std::vector<int>>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<std::vector<std::vector<int>>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<std::vector<int>>>*,std::vector<std::vector<std::vector<int>>>*>(_QWORD *result, uint64_t **a2, uint64_t **a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<std::vector<int>>>>,std::vector<std::vector<std::vector<int>>>*,std::vector<std::vector<std::vector<int>>>*,std::vector<std::vector<std::vector<int>>>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_191C95638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<std::vector<std::vector<int>>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<std::vector<int>>>>,std::vector<std::vector<std::vector<int>>>*,std::vector<std::vector<std::vector<int>>>*,std::vector<std::vector<std::vector<int>>>*>(uint64_t a1, uint64_t **a2, uint64_t **a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t **v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<std::vector<std::vector<int>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<int>>*,std::vector<std::vector<int>>*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (v6[1] - *v6));
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<int>>>>,std::vector<std::vector<std::vector<int>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_191C95700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<int>>>>,std::vector<std::vector<std::vector<int>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<int>>>>,std::vector<std::vector<std::vector<int>>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<int>>>>,std::vector<std::vector<std::vector<int>>>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<int>>>>,std::vector<std::vector<std::vector<int>>>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<std::vector<std::vector<int>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t std::vector<std::vector<std::vector<std::vector<std::vector<int>>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::vector<std::vector<int>>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<std::vector<int>>>>*>,std::reverse_iterator<std::vector<std::vector<std::vector<std::vector<int>>>>*>,std::reverse_iterator<std::vector<std::vector<std::vector<std::vector<int>>>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::vector<std::vector<int>>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<std::vector<int>>>>*>,std::reverse_iterator<std::vector<std::vector<std::vector<std::vector<int>>>>*>,std::reverse_iterator<std::vector<std::vector<std::vector<std::vector<int>>>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<std::vector<int>>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<std::vector<int>>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<std::vector<int>>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<std::vector<int>>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<std::vector<int>>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<std::vector<int>>>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::vector<std::vector<int>>>>>,std::reverse_iterator<std::vector<std::vector<std::vector<std::vector<int>>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::vector<std::vector<std::vector<int>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<std::vector<std::vector<int>>>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::vector<std::vector<std::vector<int>>>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::vector<std::vector<std::vector<int>>>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::vector<std::vector<std::vector<int>>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<std::vector<std::string>>(__int128 ***a1)
{
  unint64_t v2;
  __int128 **i;
  __int128 **v4;
  CFArrayRef v5;
  std::string v7;
  uint64_t *v8[3];
  std::string *v9;

  v2 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  memset(v8, 0, sizeof(v8));
  std::vector<applesauce::CF::ArrayRef>::reserve((uint64_t *)v8, v2);
  v4 = *a1;
  for (i = a1[1]; v4 != i; v4 += 3)
  {
    memset(&v7, 0, sizeof(v7));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, *v4, v4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v4[1] - (char *)*v4) >> 3));
    std::vector<applesauce::CF::ArrayRef>::emplace_back<std::vector<std::string>>((uint64_t *)v8, (__int128 **)&v7);
    v9 = &v7;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  }
  v5 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(v8);
  v7.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  return v5;
}

void sub_191C95A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<applesauce::CF::ArrayRef>::emplace_back<std::vector<std::string>>(uint64_t *a1, __int128 **a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  CFArrayRef *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *v15;
  CFArrayRef *v16;
  CFArrayRef *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(CFArrayRef **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((uint64_t)v7 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v10 = v5 - *a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v19 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
    else
      v13 = 0;
    v15 = v13;
    v16 = (CFArrayRef *)&v13[8 * v9];
    v17 = v16;
    v18 = &v13[8 * v12];
    *v16 = applesauce::CF::details::make_CFArrayRef<std::string>(a2);
    ++v17;
    std::vector<applesauce::CF::ArrayRef>::__swap_out_circular_buffer(a1, &v15);
    v8 = (_QWORD *)a1[1];
    std::__split_buffer<applesauce::CF::ArrayRef>::~__split_buffer(&v15);
  }
  else
  {
    *v7 = applesauce::CF::details::make_CFArrayRef<std::string>(a2);
    v8 = v7 + 1;
    a1[1] = (uint64_t)v8;
  }
  a1[1] = (uint64_t)v8;
  return v8 - 1;
}

void sub_191C95B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<int>(_QWORD *a1)
{
  unint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  CFArrayRef v5;
  uint64_t *v7[3];
  void **v8;

  v2 = (uint64_t)(a1[1] - *a1) >> 2;
  memset(v7, 0, sizeof(v7));
  std::vector<applesauce::CF::NumberRef>::reserve((uint64_t *)v7, v2);
  v4 = (_DWORD *)*a1;
  v3 = (_DWORD *)a1[1];
  while (v4 != v3)
  {
    LODWORD(v8) = *v4;
    std::vector<applesauce::CF::NumberRef>::emplace_back<int>((uint64_t *)v7, (int *)&v8);
    ++v4;
  }
  v5 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(v7);
  v8 = (void **)v7;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&v8);
  return v5;
}

void sub_191C95C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

CFNumberRef *std::vector<applesauce::CF::NumberRef>::emplace_back<int>(uint64_t *a1, int *a2)
{
  unint64_t v4;
  uint64_t v5;
  CFNumberRef *v6;
  CFNumberRef *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void *v14;
  CFNumberRef *v15;
  CFNumberRef *v16;
  char *v17;
  uint64_t *v18;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = (CFNumberRef *)a1[1];
  if ((unint64_t)v6 >= v4)
  {
    v8 = ((uint64_t)v6 - *a1) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v9 = v4 - *a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v18 = a1 + 2;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), v11);
    else
      v12 = 0;
    v14 = v12;
    v15 = (CFNumberRef *)&v12[8 * v8];
    v17 = &v12[8 * v11];
    std::allocator<applesauce::CF::NumberRef>::construct[abi:ne180100]<applesauce::CF::NumberRef,int>(v5, v15, a2);
    v16 = v15 + 1;
    std::vector<applesauce::CF::NumberRef>::__swap_out_circular_buffer(a1, &v14);
    v7 = (CFNumberRef *)a1[1];
    std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer(&v14);
  }
  else
  {
    std::allocator<applesauce::CF::NumberRef>::construct[abi:ne180100]<applesauce::CF::NumberRef,int>((uint64_t)(a1 + 2), v6, a2);
    v7 = v6 + 1;
    a1[1] = (uint64_t)(v6 + 1);
  }
  a1[1] = (uint64_t)v7;
  return v7 - 1;
}

void sub_191C95D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

CFNumberRef std::allocator<applesauce::CF::NumberRef>::construct[abi:ne180100]<applesauce::CF::NumberRef,int>(uint64_t a1, CFNumberRef *a2, int *a3)
{
  CFNumberRef result;
  std::runtime_error *exception;
  int valuePtr;

  valuePtr = *a3;
  result = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *a2 = result;
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_191C95E04(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<std::vector<int>>(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CFArrayRef v5;
  void *__p;
  void *v8;
  uint64_t v9;
  uint64_t *v10[3];

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  memset(v10, 0, sizeof(v10));
  std::vector<applesauce::CF::ArrayRef>::reserve((uint64_t *)v10, v2);
  v4 = *a1;
  v3 = a1[1];
  while (v4 != v3)
  {
    __p = 0;
    v8 = 0;
    v9 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v4, *(_QWORD *)(v4 + 8), (uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 2);
    std::vector<applesauce::CF::ArrayRef>::emplace_back<std::vector<int>>((uint64_t *)v10, &__p);
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
    v4 += 24;
  }
  v5 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(v10);
  __p = v10;
  std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v5;
}

void sub_191C95EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, uint64_t a11, char a12)
{
  __p = &a12;
  std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<applesauce::CF::ArrayRef>::emplace_back<std::vector<int>>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  CFArrayRef *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *v15;
  CFArrayRef *v16;
  CFArrayRef *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(CFArrayRef **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((uint64_t)v7 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v10 = v5 - *a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v19 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
    else
      v13 = 0;
    v15 = v13;
    v16 = (CFArrayRef *)&v13[8 * v9];
    v17 = v16;
    v18 = &v13[8 * v12];
    *v16 = applesauce::CF::details::make_CFArrayRef<int>(a2);
    ++v17;
    std::vector<applesauce::CF::ArrayRef>::__swap_out_circular_buffer(a1, &v15);
    v8 = (_QWORD *)a1[1];
    std::__split_buffer<applesauce::CF::ArrayRef>::~__split_buffer(&v15);
  }
  else
  {
    *v7 = applesauce::CF::details::make_CFArrayRef<int>(a2);
    v8 = v7 + 1;
    a1[1] = (uint64_t)v8;
  }
  a1[1] = (uint64_t)v8;
  return v8 - 1;
}

void sub_191C96010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<std::pair<int,double>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<int,double>>>,std::reverse_iterator<std::vector<std::pair<int,double>>*>,std::reverse_iterator<std::vector<std::pair<int,double>>*>,std::reverse_iterator<std::vector<std::pair<int,double>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<int,double>>>,std::reverse_iterator<std::vector<std::pair<int,double>>*>,std::reverse_iterator<std::vector<std::pair<int,double>>*>,std::reverse_iterator<std::vector<std::pair<int,double>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,double>>>,std::reverse_iterator<std::vector<std::pair<int,double>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,double>>>,std::reverse_iterator<std::vector<std::pair<int,double>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long>>,std::reverse_iterator<std::vector<long>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t utf82uni@<X0>(uint64_t *a1@<X0>, int **a2@<X8>)
{
  int *v3;
  int v4;
  _QWORD *v5;
  uint64_t result;
  _DWORD *v7;
  _DWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  int *v22;
  int *v23;
  uint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  int *v30;
  int v31;
  _QWORD *v32;

  v3 = 0;
  v4 = 0;
  a2[2] = 0;
  v5 = a2 + 2;
  *a2 = 0;
  a2[1] = 0;
  v32 = a2 + 2;
  result = 3;
  v7 = &unk_1EE21B000;
  v8 = &unk_1EE21B000;
  while (1)
  {
    v9 = *((char *)a1 + 23) < 0 ? a1[1] : *((unsigned __int8 *)a1 + 23);
    v10 = v4;
    if (v9 <= v4)
      break;
    v11 = a1;
    if ((*((_BYTE *)a1 + 23) & 0x80) != 0)
      v11 = (uint64_t *)*a1;
    v12 = (maskHeader[0] & *((char *)v11 + v10)) == 0;
    v13 = a1;
    if ((*((_BYTE *)a1 + 23) & 0x80) != 0)
      v13 = (uint64_t *)*a1;
    if ((dword_1EE21B0AC & ~*((char *)v13 + v10)) == 0)
      v12 = 2;
    v14 = a1;
    if ((*((_BYTE *)a1 + 23) & 0x80) != 0)
      v14 = (uint64_t *)*a1;
    if ((dword_1EE21B0B0 & ~*((char *)v14 + v10)) == 0)
      v12 = 3;
    v15 = a1;
    if ((*((_BYTE *)a1 + 23) & 0x80) != 0)
      v15 = (uint64_t *)*a1;
    if ((v7[45] & ~*((char *)v15 + v10)) == 0)
      v12 = 4;
    v16 = a1;
    if ((*((_BYTE *)a1 + 23) & 0x80) != 0)
      v16 = (uint64_t *)*a1;
    if ((dword_1EE21B0B8 & ~*((char *)v16 + v10)) == 0)
      v12 = 5;
    v17 = a1;
    if ((*((_BYTE *)a1 + 23) & 0x80) != 0)
      v17 = (uint64_t *)*a1;
    if ((v8[47] & ~*((char *)v17 + v10)) != 0)
      v18 = v12;
    else
      v18 = 6;
    if ((_DWORD)v18)
    {
      v19 = 0;
      v20 = 0;
      do
      {
        v21 = a1;
        if (v19)
        {
          if ((*((_BYTE *)a1 + 23) & 0x80) != 0)
            v21 = (uint64_t *)*a1;
          v20 = (v20 << 6) | *((_BYTE *)v21 + v10 + v19) & 0x3F;
        }
        else
        {
          if ((*((_BYTE *)a1 + 23) & 0x80) != 0)
            v21 = (uint64_t *)*a1;
          v20 |= *((unsigned __int8 *)v21 + v10) & ~maskHeader[(v18 - 1)];
        }
        ++v19;
      }
      while (v18 != v19);
    }
    else
    {
      v20 = 0;
    }
    if ((unint64_t)v3 >= *v5)
    {
      v23 = *a2;
      v24 = v3 - *a2;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 62)
        std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
      v26 = v7;
      v27 = *v5 - (_QWORD)v23;
      if (v27 >> 1 > v25)
        v25 = v27 >> 1;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
        v28 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v28 = v25;
      if (v28)
      {
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v5, v28);
        v5 = v32;
        v23 = *a2;
        v3 = a2[1];
      }
      else
      {
        v29 = 0;
      }
      v30 = (int *)&v29[4 * v24];
      *v30 = v20;
      v22 = v30 + 1;
      while (v3 != v23)
      {
        v31 = *--v3;
        *--v30 = v31;
      }
      *a2 = v30;
      a2[1] = v22;
      a2[2] = (int *)&v29[4 * v28];
      if (v23)
      {
        operator delete(v23);
        v5 = v32;
      }
      result = 3;
      v7 = v26;
      v8 = (_DWORD *)&unk_1EE21B000;
    }
    else
    {
      *v3 = v20;
      v22 = v3 + 1;
    }
    a2[1] = v22;
    v4 = v18 + v10;
    v3 = v22;
  }
  return result;
}

void sub_191C96430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v11;

  v11 = *(void **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)(a10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void prepareInputCFStringToUTF8String(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  CFIndex Length;
  CFAllocatorRef *v5;
  const __CFString *v6;
  const __CFString *v7;
  __CFString *MutableCopy;
  __CFString *v9;
  __int128 v10;
  uint64_t v11;
  CFRange v12;

  Length = CFStringGetLength(a1);
  v5 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (Length < 101)
  {
    v6 = (const __CFString *)CFRetain(a1);
  }
  else
  {
    v12.location = 0;
    v12.length = 100;
    v6 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, v12);
  }
  v7 = v6;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (v6)
  {
    MutableCopy = CFStringCreateMutableCopy(*v5, 0, v6);
    v9 = MutableCopy;
    if (MutableCopy)
    {
      CFStringLowercase(MutableCopy, 0);
      CFStringNormalize(v9, kCFStringNormalizationFormC);
      CoreNLP::getUTF8StringFromCFString(v9, &v10);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_OWORD *)a2 = v10;
      *(_QWORD *)(a2 + 16) = v11;
      CFRelease(v9);
    }
    else
    {
      MEMORY[0x19401E64C](a2, "");
    }
    CFRelease(v7);
  }
  else
  {
    MEMORY[0x19401E64C](a2, "");
  }
}

void sub_191C96560(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void prepareUTF8StringToTokens(uint64_t a1@<X0>, UnicodeTokenIDMap **a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  UnicodeTokenIDMap *v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  unsigned int v13;
  _QWORD *v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  __int16 v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int16 v28;
  _WORD *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _WORD *v33;
  _WORD *v34;
  __int16 v35;
  unsigned int v36;
  __int16 v37;
  unint64_t v38;
  char *v39;
  _WORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  __int16 v49;
  char *v50;
  unint64_t v51;
  char *v52;
  unsigned int v53;
  uint64_t v54;
  char *v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _WORD *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  _WORD *v65;
  __int16 v66;
  unint64_t v67;
  _WORD *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  __int16 v81;
  int v82;
  std::string v83;
  void *__p;
  unsigned __int16 *v85;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v83 = *(std::string *)a1;
  utf82uni((uint64_t *)&v83, (int **)&__p);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v7 = *a2;
  if (!*a2)
  {
    v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a4 + 2), 1);
    v30 = (char *)*a4;
    v31 = (char *)a4[1];
    v33 = &v29[v32];
    *v29 = 1;
    v34 = v29 + 1;
    while (v31 != v30)
    {
      v35 = *((_WORD *)v31 - 1);
      v31 -= 2;
      *--v29 = v35;
    }
    *a4 = v29;
    a4[1] = v34;
    a4[2] = v33;
    if (!v30)
      goto LABEL_96;
    goto LABEL_95;
  }
  v8 = *((_QWORD *)v7 + 1);
  v9 = UnicodeTokenIDMap::tokenToID(v7, 0x20u);
  v10 = v9;
  v11 = (unsigned __int16 *)__p;
  v12 = v85;
  if (v8 <= v9)
  {
    if (__p != v85)
    {
      do
      {
        v36 = UnicodeTokenIDMap::tokenToID(*a2, *v11);
        if (v8 > v36)
        {
          v37 = v36 + 1;
          v39 = (char *)a4[1];
          v38 = a4[2];
          if ((unint64_t)v39 >= v38)
          {
            v41 = (char *)*a4;
            v42 = (uint64_t)&v39[-*a4];
            if (v42 <= -3)
              std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
            v43 = v42 >> 1;
            v44 = v38 - (_QWORD)v41;
            if (v44 <= (v42 >> 1) + 1)
              v45 = v43 + 1;
            else
              v45 = v44;
            if (v44 >= 0x7FFFFFFFFFFFFFFELL)
              v46 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v46 = v45;
            if (v46)
            {
              v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a4 + 2), v46);
              v41 = (char *)*a4;
              v39 = (char *)a4[1];
            }
            else
            {
              v47 = 0;
            }
            v48 = &v47[2 * v43];
            *(_WORD *)v48 = v37;
            v40 = v48 + 2;
            while (v39 != v41)
            {
              v49 = *((_WORD *)v39 - 1);
              v39 -= 2;
              *((_WORD *)v48 - 1) = v49;
              v48 -= 2;
            }
            *a4 = v48;
            a4[1] = v40;
            a4[2] = &v47[2 * v46];
            if (v41)
              operator delete(v41);
          }
          else
          {
            *(_WORD *)v39 = v37;
            v40 = v39 + 2;
          }
          a4[1] = v40;
        }
        v11 += 2;
      }
      while (v11 != v12);
    }
    v50 = (char *)*a4;
    if (*a4 != a4[1])
      goto LABEL_97;
    v51 = a4[2];
    if ((unint64_t)v50 < v51)
    {
      *(_WORD *)v50 = 1;
      v34 = v50 + 2;
LABEL_96:
      a4[1] = v34;
      goto LABEL_97;
    }
    v69 = v51 - (_QWORD)v50;
    if (v69 <= 1)
      v70 = 1;
    else
      v70 = v69;
    if (v69 >= 0x7FFFFFFFFFFFFFFELL)
      v71 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v71 = v70;
    v61 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a4 + 2), v71);
    v62 = (char *)*a4;
    v72 = (char *)a4[1];
    v65 = &v61[v73];
    *v61 = 1;
    v34 = v61 + 1;
    while (v72 != v62)
    {
      v74 = *((_WORD *)v72 - 1);
      v72 -= 2;
      *--v61 = v74;
    }
    goto LABEL_93;
  }
  v82 = a3;
  if (__p == v85)
  {
    v17 = (char *)a4[1];
  }
  else
  {
    v13 = v9 + 1;
    v14 = a4 + 2;
    do
    {
      v15 = UnicodeTokenIDMap::tokenToID(*a2, *v11);
      if (v8 <= v15)
        v16 = v10;
      else
        v16 = v15;
      v17 = (char *)a4[1];
      if (v16 != v10 || v17 != (char *)*a4 && v13 != *((unsigned __int16 *)v17 - 1))
      {
        v18 = v16 + 1;
        if ((unint64_t)v17 >= *v14)
        {
          v20 = (char *)*a4;
          v21 = (uint64_t)&v17[-*a4];
          if (v21 <= -3)
            std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
          v22 = v21 >> 1;
          v23 = *v14 - (_QWORD)v20;
          if (v23 <= (v21 >> 1) + 1)
            v24 = v22 + 1;
          else
            v24 = *v14 - (_QWORD)v20;
          if (v23 >= 0x7FFFFFFFFFFFFFFELL)
            v25 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v25 = v24;
          if (v25)
          {
            v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a4 + 2), v25);
            v20 = (char *)*a4;
            v17 = (char *)a4[1];
          }
          else
          {
            v26 = 0;
          }
          v27 = &v26[2 * v22];
          *(_WORD *)v27 = v18;
          v19 = v27 + 2;
          while (v17 != v20)
          {
            v28 = *((_WORD *)v17 - 1);
            v17 -= 2;
            *((_WORD *)v27 - 1) = v28;
            v27 -= 2;
          }
          *a4 = v27;
          a4[1] = v19;
          a4[2] = &v26[2 * v25];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *(_WORD *)v17 = v18;
          v19 = v17 + 2;
        }
        a4[1] = v19;
        v17 = v19;
      }
      v11 += 2;
    }
    while (v11 != v12);
  }
  v52 = (char *)*a4;
  v53 = v10 + 1;
  if ((char *)*a4 == v17)
  {
LABEL_70:
    v57 = a4[2];
    if ((unint64_t)v52 < v57)
    {
      *(_WORD *)v52 = v53;
      v34 = v52 + 2;
      goto LABEL_96;
    }
    v58 = v57 - (_QWORD)v52;
    if (v58 <= 1)
      v59 = 1;
    else
      v59 = v58;
    if (v58 >= 0x7FFFFFFFFFFFFFFELL)
      v60 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v60 = v59;
    v61 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a4 + 2), v60);
    v62 = (char *)*a4;
    v63 = (char *)a4[1];
    v65 = &v61[v64];
    *v61 = v53;
    v34 = v61 + 1;
    while (v63 != v62)
    {
      v66 = *((_WORD *)v63 - 1);
      v63 -= 2;
      *--v61 = v66;
    }
LABEL_93:
    *a4 = v61;
    a4[1] = v34;
    a4[2] = v65;
    if (!v62)
      goto LABEL_96;
    v30 = v62;
LABEL_95:
    operator delete(v30);
    goto LABEL_96;
  }
  v54 = v17 - v52;
  v55 = v17;
  while (1)
  {
    v56 = *((unsigned __int16 *)v55 - 1);
    v55 -= 2;
    if (v53 != v56)
      break;
    a4[1] = v55;
    v54 -= 2;
    v17 = v55;
    if (v55 == v52)
      goto LABEL_70;
  }
  if (v82)
  {
    v67 = a4[2];
    if ((unint64_t)v17 >= v67)
    {
      if (v54 <= -3)
        std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
      v75 = v54 >> 1;
      v76 = v67 - (_QWORD)v52;
      if (v76 <= (v54 >> 1) + 1)
        v77 = v75 + 1;
      else
        v77 = v76;
      if (v76 >= 0x7FFFFFFFFFFFFFFELL)
        v78 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v78 = v77;
      if (v78)
      {
        v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a4 + 2), v78);
        v52 = (char *)*a4;
        v17 = (char *)a4[1];
      }
      else
      {
        v79 = 0;
      }
      v80 = &v79[2 * v75];
      *(_WORD *)v80 = v53;
      v68 = v80 + 2;
      while (v17 != v52)
      {
        v81 = *((_WORD *)v17 - 1);
        v17 -= 2;
        *((_WORD *)v80 - 1) = v81;
        v80 -= 2;
      }
      *a4 = v80;
      a4[1] = v68;
      a4[2] = &v79[2 * v78];
      if (v52)
        operator delete(v52);
    }
    else
    {
      *(_WORD *)v17 = v53;
      v68 = v17 + 2;
    }
    a4[1] = v68;
  }
LABEL_97:
  if (__p)
  {
    v85 = (unsigned __int16 *)__p;
    operator delete(__p);
  }
}

void sub_191C96A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18)
{
  uint64_t v18;
  void *v20;

  v20 = *(void **)v18;
  if (*(_QWORD *)v18)
  {
    *(_QWORD *)(v18 + 8) = v20;
    operator delete(v20);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t UnicodeTokenIDMap::tokenToID(UnicodeTokenIDMap *this, unsigned int a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unsigned int v8;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(unsigned __int16 **)this;
    v4 = *((_QWORD *)this + 1);
    do
    {
      v5 = v4 >> 1;
      v6 = &v3[v4 >> 1];
      v8 = *v6;
      v7 = v6 + 1;
      v4 += ~(v4 >> 1);
      if (v8 < a2)
        v3 = v7;
      else
        v4 = v5;
    }
    while (v4);
  }
  else
  {
    v3 = *(unsigned __int16 **)this;
  }
  if (*v3 == a2)
    LOWORD(v2) = (v3 - *(_QWORD *)this) >> 1;
  return (unsigned __int16)v2;
}

void LanguageIdentifierModel::LanguageIdentifierModel(LanguageIdentifierModel *this)
{
  *(_DWORD *)this = 28;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
}

void LanguageIdentifierModel::~LanguageIdentifierModel(LanguageIdentifierModel *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v2 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v2)
    MEMORY[0x19401E994](v2, 0x1010C40FDD9F14CLL);
  v3 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
    MEMORY[0x19401E994](v3, 0x1010C40FDD9F14CLL);
  v4 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
    MEMORY[0x19401E994](v4, 0x1010C40FDD9F14CLL);
  v5 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v5)
    MEMORY[0x19401E994](v5, 0x1010C40FDD9F14CLL);
  v6 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
    MEMORY[0x19401E994](v6, 0x1010C40FDD9F14CLL);
  std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100]((CoreNLP::MontrealModel **)this + 11, 0);
  std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100]((CoreNLP::MontrealModel **)this + 10, 0);
  std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100]((CoreNLP::MontrealModel **)this + 9, 0);
  std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100]((CoreNLP::MontrealModel **)this + 8, 0);
  std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100]((CoreNLP::MontrealModel **)this + 7, 0);
  v7 = (void *)*((_QWORD *)this + 4);
  if (v7)
  {
    *((_QWORD *)this + 5) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 1);
  if (v8)
  {
    *((_QWORD *)this + 2) = v8;
    operator delete(v8);
  }
}

void LanguageIdentifierModel::createTokenMap(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  std::string __p;

  v4 = (_QWORD *)operator new();
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  UnicodeTokenIDMap::UnicodeTokenIDMap(v4, (uint64_t)&__p);
  *a2 = v4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_191C96CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _QWORD *v14;
  uint64_t v15;

  MEMORY[0x19401E994](v15, 0x1010C40FDD9F14CLL);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    *v14 = 0;
    __cxa_end_catch();
    JUMPOUT(0x191C96CE8);
  }
  _Unwind_Resume(a1);
}

uint64_t LanguageIdentifierModel::createModel@<X0>(uint64_t a1@<X1>, CoreNLP::MontrealModel **a2@<X8>)
{
  CoreNLP::MontrealModel *v4;
  uint64_t result;

  v4 = (CoreNLP::MontrealModel *)operator new();
  result = CoreNLP::MontrealModel::MontrealModel(v4, a1);
  if (!*(_QWORD *)v4)
  {
    CoreNLP::MontrealModel::~MontrealModel(v4);
    result = MEMORY[0x19401E994]();
    v4 = 0;
  }
  *a2 = v4;
  return result;
}

void sub_191C96DDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x80C40803F642BLL);
  _Unwind_Resume(a1);
}

void LanguageIdentifierModel::setStringForModelWithTokenMap(int a1, const void ***a2, UnicodeTokenIDMap **a3, __CFString *a4, int a5)
{
  BOOL v5;
  const void **v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  void *__p;
  _BYTE *v15;
  uint64_t v16;
  std::string v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  std::string v20;

  if (*a2)
    v5 = *a3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    prepareInputCFStringToUTF8String(a4, (uint64_t)&v20);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v17, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
    else
      v17 = v20;
    prepareUTF8StringToTokens((uint64_t)&v17, a3, a5, &v18);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    v15 = 0;
    v16 = 0;
    __p = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>((char *)&__p, v18, v19, v19 - v18);
    CoreNLP::MontrealModel::clear(*a2);
    v9 = *a2;
    v13 = (unint64_t)(v15 - (_BYTE *)__p) >> 2;
    v12 = 0x100000001;
    v11 = xmmword_191D40C10;
    LOWORD(v10) = 256;
    CoreNLP::MontrealModel::setInputTensor((uint64_t)v9, &v10, (uint64_t)__p, 0);
    CoreNLP::MontrealModel::predict((CoreNLP::MontrealModel *)*a2);
    if (__p)
    {
      v15 = __p;
      operator delete(__p);
    }
    if (v18)
    {
      v19 = v18;
      operator delete(v18);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
  }
}

void sub_191C96F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 33) < 0)
    operator delete(*(void **)(v22 - 56));
  _Unwind_Resume(exception_object);
}

void LanguageIdentifierModel::setString(CoreNLP::MontrealModel **this, __CFString *a2)
{
  NLScriptDetector *v4;
  CoreNLP::MontrealModel *v5;
  std::string::value_type *v6;
  int v7;
  std::string::value_type *v8;
  int v9;
  std::string::size_type v10;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string::size_type v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string __p;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string::value_type *v30;
  std::string::size_type v31;
  _BYTE v32[7];
  char v33;
  _DWORD v34[2];
  _DWORD v35[4];

  if (a2)
  {
    v4 = (NLScriptDetector *)operator new();
    NLScriptDetector::NLScriptDetector(v4);
    NLScriptDetector::setString((CFStringRef)v4, a2);
    *(_DWORD *)this = NLScriptDetector::getDominantScript((const __CFString **)v4);
    NLScriptDetector::~NLScriptDetector(v4);
    LODWORD(v5) = MEMORY[0x19401E994]();
    *(_DWORD *)((char *)v35 + 3) = 0;
    v35[0] = 0;
    *(_DWORD *)((char *)v34 + 3) = 0;
    v34[0] = 0;
    switch(*(_DWORD *)this)
    {
      case 0:
        if (this[10] && this[15])
        {
          v6 = 0;
          v7 = 0;
          v8 = 0;
          v9 = 0;
        }
        else
        {
          CoreNLP::getFileSystemRepresentationFromBundleResource(CFSTR("ar_quant.espresso.net"), &v30);
          v6 = v30;
          v10 = v31;
          v35[0] = *(_DWORD *)v32;
          *(_DWORD *)((char *)v35 + 3) = *(_DWORD *)&v32[3];
          v7 = v33;
          CoreNLP::getFileSystemRepresentationFromBundleResource(CFSTR("ar_vocab.dat"), &v30);
          v8 = v30;
          v11 = v31;
          v34[0] = *(_DWORD *)v32;
          *(_DWORD *)((char *)v34 + 3) = *(_DWORD *)&v32[3];
          v9 = v33;
          if (v7 < 0)
          {
            std::string::__init_copy_ctor_external(&v29, v6, v10);
          }
          else
          {
            v29.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
            v29.__r_.__value_.__l.__size_ = v10;
            LODWORD(v29.__r_.__value_.__r.__words[2]) = v35[0];
            *(_DWORD *)((char *)&v29.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v35 + 3);
            *((_BYTE *)&v29.__r_.__value_.__s + 23) = v7;
          }
          LanguageIdentifierModel::createModel((uint64_t)&v29, (CoreNLP::MontrealModel **)&v30);
          std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100](this + 10, (CoreNLP::MontrealModel *)v30);
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v29.__r_.__value_.__l.__data_);
          if (v9 < 0)
          {
            std::string::__init_copy_ctor_external(&v28, v8, v11);
          }
          else
          {
            v28.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
            v28.__r_.__value_.__l.__size_ = v11;
            LODWORD(v28.__r_.__value_.__r.__words[2]) = v34[0];
            *(_DWORD *)((char *)&v28.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v34 + 3);
            *((_BYTE *)&v28.__r_.__value_.__s + 23) = v9;
          }
          LanguageIdentifierModel::createTokenMap((uint64_t)&v28, &v30);
          v5 = this[15];
          this[15] = (CoreNLP::MontrealModel *)v30;
          if (v5)
            LODWORD(v5) = MEMORY[0x19401E994](v5, 0x1010C40FDD9F14CLL);
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v28.__r_.__value_.__l.__data_);
        }
        LanguageIdentifierModel::setStringForModelWithTokenMap((int)v5, (const void ***)this + 10, this + 15, a2, 0);
        goto LABEL_83;
      case 1:
        if (this[8] && this[13])
        {
          v6 = 0;
          v7 = 0;
          v8 = 0;
          v9 = 0;
        }
        else
        {
          CoreNLP::getFileSystemRepresentationFromBundleResource(CFSTR("cyrl_quant.espresso.net"), &v30);
          v6 = v30;
          v12 = v31;
          v35[0] = *(_DWORD *)v32;
          *(_DWORD *)((char *)v35 + 3) = *(_DWORD *)&v32[3];
          v7 = v33;
          CoreNLP::getFileSystemRepresentationFromBundleResource(CFSTR("cyrl_vocab.dat"), &v30);
          v8 = v30;
          v13 = v31;
          v34[0] = *(_DWORD *)v32;
          *(_DWORD *)((char *)v34 + 3) = *(_DWORD *)&v32[3];
          v9 = v33;
          if (v7 < 0)
          {
            std::string::__init_copy_ctor_external(&v27, v6, v12);
          }
          else
          {
            v27.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
            v27.__r_.__value_.__l.__size_ = v12;
            LODWORD(v27.__r_.__value_.__r.__words[2]) = v35[0];
            *(_DWORD *)((char *)&v27.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v35 + 3);
            *((_BYTE *)&v27.__r_.__value_.__s + 23) = v7;
          }
          LanguageIdentifierModel::createModel((uint64_t)&v27, (CoreNLP::MontrealModel **)&v30);
          std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100](this + 8, (CoreNLP::MontrealModel *)v30);
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v27.__r_.__value_.__l.__data_);
          if (v9 < 0)
          {
            std::string::__init_copy_ctor_external(&v26, v8, v13);
          }
          else
          {
            v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
            v26.__r_.__value_.__l.__size_ = v13;
            LODWORD(v26.__r_.__value_.__r.__words[2]) = v34[0];
            *(_DWORD *)((char *)&v26.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v34 + 3);
            *((_BYTE *)&v26.__r_.__value_.__s + 23) = v9;
          }
          LanguageIdentifierModel::createTokenMap((uint64_t)&v26, &v30);
          v5 = this[13];
          this[13] = (CoreNLP::MontrealModel *)v30;
          if (v5)
            LODWORD(v5) = MEMORY[0x19401E994](v5, 0x1010C40FDD9F14CLL);
          if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v26.__r_.__value_.__l.__data_);
        }
        LanguageIdentifierModel::setStringForModelWithTokenMap((int)v5, (const void ***)this + 8, this + 13, a2, 1);
        goto LABEL_83;
      case 2:
        if (this[9] && this[14])
        {
          v6 = 0;
          v7 = 0;
          v8 = 0;
          v9 = 0;
        }
        else
        {
          CoreNLP::getFileSystemRepresentationFromBundleResource(CFSTR("devn_quant.espresso.net"), &v30);
          v6 = v30;
          v14 = v31;
          v35[0] = *(_DWORD *)v32;
          *(_DWORD *)((char *)v35 + 3) = *(_DWORD *)&v32[3];
          v7 = v33;
          CoreNLP::getFileSystemRepresentationFromBundleResource(CFSTR("devn_vocab.dat"), &v30);
          v8 = v30;
          v15 = v31;
          v34[0] = *(_DWORD *)v32;
          *(_DWORD *)((char *)v34 + 3) = *(_DWORD *)&v32[3];
          v9 = v33;
          if (v7 < 0)
          {
            std::string::__init_copy_ctor_external(&v25, v6, v14);
          }
          else
          {
            v25.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
            v25.__r_.__value_.__l.__size_ = v14;
            LODWORD(v25.__r_.__value_.__r.__words[2]) = v35[0];
            *(_DWORD *)((char *)&v25.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v35 + 3);
            *((_BYTE *)&v25.__r_.__value_.__s + 23) = v7;
          }
          LanguageIdentifierModel::createModel((uint64_t)&v25, (CoreNLP::MontrealModel **)&v30);
          std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100](this + 9, (CoreNLP::MontrealModel *)v30);
          if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v25.__r_.__value_.__l.__data_);
          if (v9 < 0)
          {
            std::string::__init_copy_ctor_external(&v24, v8, v15);
          }
          else
          {
            v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
            v24.__r_.__value_.__l.__size_ = v15;
            LODWORD(v24.__r_.__value_.__r.__words[2]) = v34[0];
            *(_DWORD *)((char *)&v24.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v34 + 3);
            *((_BYTE *)&v24.__r_.__value_.__s + 23) = v9;
          }
          LanguageIdentifierModel::createTokenMap((uint64_t)&v24, &v30);
          v5 = this[14];
          this[14] = (CoreNLP::MontrealModel *)v30;
          if (v5)
            LODWORD(v5) = MEMORY[0x19401E994](v5, 0x1010C40FDD9F14CLL);
          if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v24.__r_.__value_.__l.__data_);
        }
        LanguageIdentifierModel::setStringForModelWithTokenMap((int)v5, (const void ***)this + 9, this + 14, a2, 0);
        goto LABEL_83;
      case 3:
        if (this[11] && this[16])
        {
          v6 = 0;
          v7 = 0;
          v8 = 0;
          v9 = 0;
        }
        else
        {
          CoreNLP::getFileSystemRepresentationFromBundleResource(CFSTR("cj_quant.espresso.net"), &v30);
          v6 = v30;
          v16 = v31;
          v35[0] = *(_DWORD *)v32;
          *(_DWORD *)((char *)v35 + 3) = *(_DWORD *)&v32[3];
          v7 = v33;
          CoreNLP::getFileSystemRepresentationFromBundleResource(CFSTR("cj_vocab.dat"), &v30);
          v8 = v30;
          v17 = v31;
          v34[0] = *(_DWORD *)v32;
          *(_DWORD *)((char *)v34 + 3) = *(_DWORD *)&v32[3];
          v9 = v33;
          if (v7 < 0)
          {
            std::string::__init_copy_ctor_external(&v23, v6, v16);
          }
          else
          {
            v23.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
            v23.__r_.__value_.__l.__size_ = v16;
            LODWORD(v23.__r_.__value_.__r.__words[2]) = v35[0];
            *(_DWORD *)((char *)&v23.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v35 + 3);
            *((_BYTE *)&v23.__r_.__value_.__s + 23) = v7;
          }
          LanguageIdentifierModel::createModel((uint64_t)&v23, (CoreNLP::MontrealModel **)&v30);
          std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100](this + 11, (CoreNLP::MontrealModel *)v30);
          if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v23.__r_.__value_.__l.__data_);
          if (v9 < 0)
          {
            std::string::__init_copy_ctor_external(&v22, v8, v17);
          }
          else
          {
            v22.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
            v22.__r_.__value_.__l.__size_ = v17;
            LODWORD(v22.__r_.__value_.__r.__words[2]) = v34[0];
            *(_DWORD *)((char *)&v22.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v34 + 3);
            *((_BYTE *)&v22.__r_.__value_.__s + 23) = v9;
          }
          LanguageIdentifierModel::createTokenMap((uint64_t)&v22, &v30);
          v5 = this[16];
          this[16] = (CoreNLP::MontrealModel *)v30;
          if (v5)
            LODWORD(v5) = MEMORY[0x19401E994](v5, 0x1010C40FDD9F14CLL);
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v22.__r_.__value_.__l.__data_);
        }
        LanguageIdentifierModel::setStringForModelWithTokenMap((int)v5, (const void ***)this + 11, this + 16, a2, 0);
        goto LABEL_83;
      case 4:
        if (this[7] && this[12])
        {
          v6 = 0;
          v7 = 0;
          v8 = 0;
          v9 = 0;
        }
        else
        {
          CoreNLP::getFileSystemRepresentationFromBundleResource(CFSTR("latin_quant.espresso.net"), &v30);
          v6 = v30;
          v18 = v31;
          v35[0] = *(_DWORD *)v32;
          *(_DWORD *)((char *)v35 + 3) = *(_DWORD *)&v32[3];
          v7 = v33;
          CoreNLP::getFileSystemRepresentationFromBundleResource(CFSTR("latin_vocab.dat"), &v30);
          v8 = v30;
          v19 = v31;
          v34[0] = *(_DWORD *)v32;
          *(_DWORD *)((char *)v34 + 3) = *(_DWORD *)&v32[3];
          v9 = v33;
          if (v7 < 0)
          {
            std::string::__init_copy_ctor_external(&v21, v6, v18);
          }
          else
          {
            v21.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
            v21.__r_.__value_.__l.__size_ = v18;
            LODWORD(v21.__r_.__value_.__r.__words[2]) = v35[0];
            *(_DWORD *)((char *)&v21.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v35 + 3);
            *((_BYTE *)&v21.__r_.__value_.__s + 23) = v7;
          }
          LanguageIdentifierModel::createModel((uint64_t)&v21, (CoreNLP::MontrealModel **)&v30);
          std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100](this + 7, (CoreNLP::MontrealModel *)v30);
          if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v21.__r_.__value_.__l.__data_);
          if (v9 < 0)
          {
            std::string::__init_copy_ctor_external(&__p, v8, v19);
          }
          else
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
            __p.__r_.__value_.__l.__size_ = v19;
            LODWORD(__p.__r_.__value_.__r.__words[2]) = v34[0];
            *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v34 + 3);
            *((_BYTE *)&__p.__r_.__value_.__s + 23) = v9;
          }
          LanguageIdentifierModel::createTokenMap((uint64_t)&__p, &v30);
          v5 = this[12];
          this[12] = (CoreNLP::MontrealModel *)v30;
          if (v5)
            LODWORD(v5) = MEMORY[0x19401E994](v5, 0x1010C40FDD9F14CLL);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        LanguageIdentifierModel::setStringForModelWithTokenMap((int)v5, (const void ***)this + 7, this + 12, a2, 1);
LABEL_83:
        if (v9 < 0)
        {
          operator delete(v8);
          if ((v7 & 0x80000000) == 0)
            return;
        }
        else if ((v7 & 0x80000000) == 0)
        {
          return;
        }
        operator delete(v6);
        break;
      default:
        return;
    }
  }
}

void sub_191C97744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  void *v56;
  void *v57;
  int v58;
  int v59;

  if (v59 < 0)
    operator delete(v57);
  if (v58 < 0)
    operator delete(v56);
  _Unwind_Resume(exception_object);
}

void LanguageIdentifierModel::setCharacters(CoreNLP::MontrealModel **this, const unsigned __int16 *a2, CFIndex a3)
{
  __CFString *v4;
  __CFString *v5;

  v4 = (__CFString *)CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, a3);
  if (v4)
  {
    v5 = v4;
    LanguageIdentifierModel::setString(this, v4);
    CFRelease(v5);
  }
}

_DWORD *LanguageIdentifierModel::clearInputString(_DWORD *this)
{
  *this = 28;
  return this;
}

void LanguageIdentifierModel::getProbabilitiesFromModel(CoreNLP::MontrealModel **a1@<X1>, char **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int v17;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*a1)
  {
    v4 = CoreNLP::MontrealModel::output(*a1, CFSTR("output"));
    if (v4)
    {
      v5 = CoreNLP::MontrealModel::outputSize(*a1);
      if (v5)
      {
        v6 = 0;
        v7 = 0;
        v8 = a2 + 2;
        do
        {
          if ((unint64_t)v6 >= *v8)
          {
            v10 = *a2;
            v11 = (v6 - *a2) >> 2;
            v12 = v11 + 1;
            if ((unint64_t)(v11 + 1) >> 62)
              std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
            v13 = *v8 - (_QWORD)v10;
            if (v13 >> 1 > v12)
              v12 = v13 >> 1;
            if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
              v14 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v14 = v12;
            if (v14)
            {
              v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a2 + 2), v14);
              v10 = *a2;
              v6 = a2[1];
            }
            else
            {
              v15 = 0;
            }
            v16 = &v15[4 * v11];
            *(_DWORD *)v16 = *(_DWORD *)(v4 + 4 * v7);
            v9 = v16 + 4;
            while (v6 != v10)
            {
              v17 = *((_DWORD *)v6 - 1);
              v6 -= 4;
              *((_DWORD *)v16 - 1) = v17;
              v16 -= 4;
            }
            *a2 = v16;
            a2[1] = v9;
            a2[2] = &v15[4 * v14];
            if (v10)
              operator delete(v10);
          }
          else
          {
            *(_DWORD *)v6 = *(_DWORD *)(v4 + 4 * v7);
            v9 = v6 + 4;
          }
          a2[1] = v9;
          ++v7;
          v6 = v9;
        }
        while (v7 != v5);
      }
    }
  }
}

void sub_191C97A48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double LanguageIdentifierModel::getTopProbabilities@<D0>(LanguageIdentifierModel *this@<X0>, _QWORD *a2@<X8>)
{
  CoreNLP::MontrealModel **v3;
  uint64_t v4;
  double result;
  __int128 v6;
  uint64_t v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  switch(*(_DWORD *)this)
  {
    case 0:
      v3 = (CoreNLP::MontrealModel **)((char *)this + 80);
      goto LABEL_7;
    case 1:
      v3 = (CoreNLP::MontrealModel **)((char *)this + 64);
      goto LABEL_7;
    case 2:
      v3 = (CoreNLP::MontrealModel **)((char *)this + 72);
      goto LABEL_7;
    case 3:
      v3 = (CoreNLP::MontrealModel **)((char *)this + 88);
      goto LABEL_7;
    case 4:
      v3 = (CoreNLP::MontrealModel **)((char *)this + 56);
LABEL_7:
      LanguageIdentifierModel::getProbabilitiesFromModel(v3, (char **)&v6);
      v4 = v7;
      result = *(double *)&v6;
      *(_OWORD *)a2 = v6;
      a2[2] = v4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t LanguageIdentifierModel::getOutputSize(uint64_t a1, unsigned int a2)
{
  if (a2 > 4)
    return 0;
  else
    return qword_191D40C80[a2];
}

void LanguageIdentifierModel::setConstraints(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void **v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int v18;

  if (a3 >= 1)
  {
    v6 = 0;
    v7 = (void **)(a1 + 1);
    v8 = a1 + 3;
    v9 = (char *)a1[2];
    do
    {
      if ((unint64_t)v9 >= *v8)
      {
        v11 = (char *)*v7;
        v12 = (v9 - (_BYTE *)*v7) >> 2;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v14 = *v8 - (_QWORD)v11;
        if (v14 >> 1 > v13)
          v13 = v14 >> 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v8, v15);
          v11 = (char *)a1[1];
          v9 = (char *)a1[2];
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[4 * v12];
        *(_DWORD *)v17 = *(_DWORD *)(a2 + 4 * v6);
        v10 = v17 + 4;
        while (v9 != v11)
        {
          v18 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v17 - 1) = v18;
          v17 -= 4;
        }
        a1[1] = v17;
        a1[2] = v10;
        a1[3] = &v16[4 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_DWORD *)v9 = *(_DWORD *)(a2 + 4 * v6);
        v10 = v9 + 4;
      }
      a1[2] = v10;
      ++v6;
      v9 = v10;
    }
    while (v6 != a3);
  }
}

uint64_t LanguageIdentifierModel::getConstraints(LanguageIdentifierModel *this)
{
  return (uint64_t)this + 8;
}

uint64_t LanguageIdentifierModel::clearConstraints(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 8);
  if (*(_QWORD *)(this + 16) != v1)
    *(_QWORD *)(this + 16) = v1;
  return this;
}

void LanguageIdentifierModel::setHints(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char **v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  if (a3 >= 1)
  {
    v6 = 0;
    v7 = (char **)(a1 + 4);
    v8 = a1 + 6;
    v9 = (char *)a1[5];
    do
    {
      if ((unint64_t)v9 >= *v8)
      {
        v10 = (v9 - *v7) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v11 = *v8 - (_QWORD)*v7;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v8, v13);
        else
          v14 = 0;
        v15 = &v14[8 * v10];
        *(_QWORD *)v15 = *(_QWORD *)(a2 + 8 * v6);
        v9 = v15 + 8;
        v17 = (char *)a1[4];
        v16 = (char *)a1[5];
        if (v16 != v17)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *((_QWORD *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          v16 = *v7;
        }
        a1[4] = v15;
        a1[5] = v9;
        a1[6] = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v9 = *(_QWORD *)(a2 + 8 * v6);
        v9 += 8;
      }
      a1[5] = v9;
      ++v6;
    }
    while (v6 != a3);
  }
}

uint64_t LanguageIdentifierModel::getHints(LanguageIdentifierModel *this)
{
  return (uint64_t)this + 32;
}

uint64_t LanguageIdentifierModel::clearHints(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 32);
  if (*(_QWORD *)(this + 40) != v1)
    *(_QWORD *)(this + 40) = v1;
  return this;
}

void LanguageIdentifierModel::clearModels(LanguageIdentifierModel *this)
{
  const void **v2;
  const void **v3;
  const void **v4;
  const void **v5;
  const void **v6;

  v2 = (const void **)*((_QWORD *)this + 10);
  if (v2)
    CoreNLP::MontrealModel::clear(v2);
  v3 = (const void **)*((_QWORD *)this + 8);
  if (v3)
    CoreNLP::MontrealModel::clear(v3);
  v4 = (const void **)*((_QWORD *)this + 9);
  if (v4)
    CoreNLP::MontrealModel::clear(v4);
  v5 = (const void **)*((_QWORD *)this + 11);
  if (v5)
    CoreNLP::MontrealModel::clear(v5);
  v6 = (const void **)*((_QWORD *)this + 7);
  if (v6)
    CoreNLP::MontrealModel::clear(v6);
}

_QWORD *UnicodeTokenIDMap::UnicodeTokenIDMap(_QWORD *a1, uint64_t a2)
{
  _QWORD *PersistentResource;
  _QWORD *exception;
  __int128 v7;
  _QWORD v8[4];
  std::string __p;

  *a1 = 0;
  a1[1] = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN17UnicodeTokenIDMapC2ENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_2;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  PersistentResource = (_QWORD *)CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<unsigned short>>::getPersistentResource(a2, (uint64_t)v8);
  if (!PersistentResource)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v7, "Failed to read UnicodeTokenIDMap data");
    CoreNLP::ResourceCreationException::ResourceCreationException(exception, &v7);
  }
  *a1 = *PersistentResource;
  a1[1] = PersistentResource[1] >> 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_191C97F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  int v25;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (a24 < 0)
        operator delete(a19);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

uint64_t CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<unsigned short>>::getPersistentResource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD block[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  if (CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<unsigned short>>::getQueue(void)::onceToken != -1)
    dispatch_once(&CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<unsigned short>>::getQueue(void)::onceToken, &__block_literal_global_3);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7CoreNLP24SingletonResourceManagerINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_12ReadOnlyFileItEEE21getPersistentResourceERKS7_U13block_pointerFPS9_vE_block_invoke;
  block[3] = &unk_1E2DF4338;
  block[5] = &v7;
  block[6] = a1;
  block[4] = a2;
  dispatch_sync((dispatch_queue_t)CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<unsigned short>>::getQueue(void)::queue, block);
  v4 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t ___ZN17UnicodeTokenIDMapC2ENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  return CoreNLP::ReadOnlyFile<unsigned short>::create((__int128 *)(a1 + 32), "r", 1);
}

uint64_t CoreNLP::ReadOnlyFile<unsigned short>::create(__int128 *a1, char *a2, int a3)
{
  uint64_t v6;
  void *__p[2];
  char v9;

  v6 = operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  CoreNLP::ReadOnlyFile<unsigned short>::ReadOnlyFile(v6, a1, (const std::string::value_type *)__p, a3);
  if (v9 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_191C980B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x19401E994](v15, 0x1012C403EBA5055);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 32);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

uint64_t ___ZN7CoreNLP24SingletonResourceManagerINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_12ReadOnlyFileItEEE21getPersistentResourceERKS7_U13block_pointerFPS9_vE_block_invoke(uint64_t a1)
{
  uint64_t **v2;
  uint64_t result;
  __int128 *v4;
  uint64_t v5;
  __int128 *v6;

  if (CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<unsigned short>>::getPersistentCache(void)::onceToken != -1)
    dispatch_once(&CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<unsigned short>>::getPersistentCache(void)::onceToken, &__block_literal_global_32);
  v2 = (uint64_t **)CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<unsigned short>>::getPersistentCache(void)::cache;
  result = std::__tree<std::string>::find<std::string>(CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<unsigned short>>::getPersistentCache(void)::cache, *(const void ***)(a1 + 48));
  if (v2 + 1 == (uint64_t **)result)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    v4 = *(__int128 **)(a1 + 48);
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v6 = v4;
    result = (uint64_t)std::__tree<std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::__map_value_compare<std::string,std::__value_type<std::string,MontrealNeuralNetworkTensor *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MontrealNeuralNetworkTensor *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v2, (const void **)v4, (uint64_t)&std::piecewise_construct, &v6);
    *(_QWORD *)(result + 56) = v5;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_QWORD *)(result + 56);
  }
  return result;
}

void sub_191C981FC(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 24) = 0;
  __cxa_end_catch();
  JUMPOUT(0x191C981A8);
}

void ___ZN7CoreNLP24SingletonResourceManagerINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_12ReadOnlyFileItEEE8getQueueEv_block_invoke()
{
  NSObject *v0;
  NSObject *global_queue;

  v0 = dispatch_queue_create("com.apple.CoreNLP.SingletonResourceManager", 0);
  CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<unsigned short>>::getQueue(void)::queue = (uint64_t)v0;
  global_queue = dispatch_get_global_queue(-32768, 0);
  dispatch_set_target_queue(v0, global_queue);
}

uint64_t CoreNLP::ReadOnlyFile<unsigned short>::ReadOnlyFile(uint64_t a1, __int128 *a2, const std::string::value_type *a3, int a4)
{
  __int128 v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  const char *v12;
  int v13;
  const char *v14;
  int v15;
  int st_size;
  size_t v17;
  void *v18;
  void *v19;
  _QWORD *exception;
  _QWORD *v22;
  stat v23;
  uint64_t v24;
  int v25;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v8;
  }
  if (a3[23] < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 40) = v9;
  }
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = a4;
  if (a3[23] < 0)
  {
    v11 = *((_QWORD *)a3 + 1);
    if (v11 != 1 || **(_BYTE **)a3 != 114)
    {
      if (v11 != 2)
        goto LABEL_33;
      a3 = *(const std::string::value_type **)a3;
LABEL_15:
      if (*(_WORD *)a3 == 11122)
      {
        *(_DWORD *)(a1 + 64) = 514;
        if (*((char *)a2 + 23) >= 0)
          v12 = (const char *)a2;
        else
          v12 = *(const char **)a2;
        v13 = open(v12, 514, 384);
        goto LABEL_25;
      }
LABEL_33:
      exception = __cxa_allocate_exception(0x20uLL);
      CoreNLP::ReadOnlyFileCreationException::ReadOnlyFileCreationException(exception);
      goto LABEL_35;
    }
  }
  else
  {
    v10 = *((unsigned __int8 *)a3 + 23);
    if (v10 != 1)
    {
      if (v10 != 2)
        goto LABEL_33;
      goto LABEL_15;
    }
    if (*a3 != 114)
      goto LABEL_33;
  }
  *(_DWORD *)(a1 + 64) = 0;
  if (*((char *)a2 + 23) >= 0)
    v14 = (const char *)a2;
  else
    v14 = *(const char **)a2;
  v13 = open(v14, 0);
LABEL_25:
  v15 = v13;
  if (v13 < 0)
    goto LABEL_33;
  if (fstat(v13, &v23) < 0)
    goto LABEL_34;
  st_size = v23.st_size;
  *(_QWORD *)(a1 + 8) = v23.st_size;
  v24 = 0;
  v25 = st_size;
  fcntl(v15, 44, &v24);
  v17 = *(_QWORD *)(a1 + 8);
  if (!a4)
  {
    v19 = (void *)operator new[]();
    *(_QWORD *)a1 = v19;
    if ((read(v15, v19, *(_QWORD *)(a1 + 8)) & 0x8000000000000000) == 0)
      goto LABEL_32;
LABEL_34:
    close(v15);
    exception = __cxa_allocate_exception(0x20uLL);
    CoreNLP::ReadOnlyFileCreationException::ReadOnlyFileCreationException(exception);
LABEL_35:
  }
  if (v17)
  {
    v18 = mmap(0, v17, *(_DWORD *)(a1 + 64) & 2 | 1u, 1, v15, 0);
    if (v18 == (void *)-1)
    {
      close(v15);
      v22 = __cxa_allocate_exception(0x20uLL);
      CoreNLP::ReadOnlyFileCreationException::ReadOnlyFileCreationException(v22);
    }
    *(_QWORD *)a1 = v18;
  }
LABEL_32:
  close(v15);
  return a1;
}

void sub_191C9857C(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  void **v3;
  void *v4;

  __cxa_free_exception(v4);
  if (*(char *)(v2 + 63) < 0)
    operator delete(*v3);
  if (*(char *)(v2 + 39) < 0)
    operator delete(*v1);
  _Unwind_Resume(a1);
}

_QWORD *CoreNLP::ReadOnlyFileCreationException::ReadOnlyFileCreationException(_QWORD *a1)
{
  __int128 __p;
  char v4;

  std::operator+<char>();
  CoreNLP::ResourceCreationException::ResourceCreationException(a1, &__p);
  if (v4 < 0)
    operator delete((void *)__p);
  *a1 = &unk_1E2DF2D30;
  return a1;
}

void sub_191C9865C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *CoreNLP::ResourceCreationException::ResourceCreationException(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = &unk_1E2DF2C60;
  v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void sub_191C986D0(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void CoreNLP::ReadOnlyFileCreationException::~ReadOnlyFileCreationException(std::exception *this)
{
  CoreNLP::ResourceCreationException::~ResourceCreationException(this);
  JUMPOUT(0x19401E994);
}

uint64_t CoreNLP::ResourceCreationException::what(CoreNLP::ResourceCreationException *this)
{
  uint64_t result;

  result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

void CoreNLP::ResourceCreationException::~ResourceCreationException(std::exception *this)
{
  CoreNLP::ResourceCreationException::~ResourceCreationException(this);
  JUMPOUT(0x19401E994);
}

{
  this->__vftable = (std::exception_vtbl *)&unk_1E2DF2C60;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

char *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>(char *result, unsigned __int16 *a2, unsigned __int16 *a3, unint64_t a4)
{
  char *v6;
  float *v7;
  unsigned int v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = (float *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = (float)v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_191C987E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t getFixedLanguageForScript(int a1)
{
  if ((a1 - 5) > 0x17)
    return 0;
  else
    return dword_191D40D3C[a1 - 5];
}

uint64_t getDominantScriptForString(const __CFString *a1)
{
  NLScriptDetector *v2;
  uint64_t DominantScript;

  v2 = (NLScriptDetector *)operator new();
  NLScriptDetector::NLScriptDetector(v2);
  NLScriptDetector::setString((CFStringRef)v2, a1);
  DominantScript = NLScriptDetector::getDominantScript((const __CFString **)v2);
  NLScriptDetector::~NLScriptDetector(v2);
  MEMORY[0x19401E994]();
  return DominantScript;
}

void sub_191C98894(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x1060C40ADAFC7CALL);
  _Unwind_Resume(a1);
}

unint64_t NLLanguageIdentifierGetTopLanguage(__CFString *a1, CFIndex a2, CFIndex a3)
{
  int DominantScriptForString;
  unint64_t FixedLanguageForScript;
  CoreNLP::MontrealModel **v8;

  DominantScriptForString = getDominantScriptForString(a1);
  FixedLanguageForScript = getFixedLanguageForScript(DominantScriptForString);
  if (!(_DWORD)FixedLanguageForScript)
  {
    v8 = (CoreNLP::MontrealModel **)NLLanguageIdentifierCreate();
    NLLanguageIdentifierConsumeString(v8, a1, a2, a3);
    FixedLanguageForScript = NLLanguageIdentifierGetTopHypothesis((LanguageIdentifierModel *)v8);
    LanguageIdentifierModel::~LanguageIdentifierModel((LanguageIdentifierModel *)v8);
    MEMORY[0x19401E994]();
  }
  return FixedLanguageForScript;
}

LanguageIdentifierModel *NLLanguageIdentifierCreate()
{
  LanguageIdentifierModel *v0;

  v0 = (LanguageIdentifierModel *)operator new();
  LanguageIdentifierModel::LanguageIdentifierModel(v0);
  return v0;
}

void sub_191C9897C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x1030C4043F66EA9);
  _Unwind_Resume(a1);
}

void NLLanguageIdentifierConsumeString(CoreNLP::MontrealModel **a1, __CFString *theString, CFIndex a3, CFIndex a4)
{
  __CFString *v8;
  CFRange v9;

  if (a1 && theString && a4)
  {
    if (a4 == CFStringGetLength(theString))
    {
      LanguageIdentifierModel::setString(a1, theString);
    }
    else
    {
      v9.location = a3;
      v9.length = a4;
      v8 = (__CFString *)CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString, v9);
      LanguageIdentifierModel::setString(a1, v8);
      CFRelease(v8);
    }
  }
}

unint64_t NLLanguageIdentifierGetTopHypothesis(LanguageIdentifierModel *a1)
{
  uint64_t Constraints;
  unint64_t v3;
  unsigned __int32 v4;
  float v5;
  uint64_t v6;
  unsigned int Type;
  unsigned __int32 FixedLanguageForScript;
  _DWORD *v9;
  _DWORD *v10;
  BOOL v11;
  int64_t OutputSize;
  __int32 *v13;
  float *v14;
  float *v15;
  uint64_t *Hints;
  uint64_t v17;
  __int32 *v18;
  __int32 *v19;
  uint64_t v20;
  int v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  int *v30;
  int v31;
  float v32;
  char *v33;
  float *v34;
  float *v35;
  unint64_t v36;
  __int32 *v37;
  __int32 *v38;
  float v39;
  float *v40;
  float v41;
  float v42;
  uint64_t v43;
  unsigned int v44;
  float v45;
  _DWORD *v46;
  _DWORD *v47;
  char *v48;
  char *v49;
  float v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  int v58;
  char *v59;
  float v60;
  uint64_t v61;
  float *v62;
  float *v63;
  float *v64;
  float v65;
  float *v66;
  float v67;
  float v68;
  char *v69;
  char *v71;
  char *v72;
  char *v73;
  void *__p;
  char *v75;
  char *v76;
  float *v77;
  float *v78;

  if (!a1)
  {
    v4 = 0;
    v5 = 0.0;
    return v4 | ((unint64_t)LODWORD(v5) << 32);
  }
  Constraints = LanguageIdentifierModel::getConstraints(a1);
  v3 = *(_QWORD *)(Constraints + 8) - *(_QWORD *)Constraints;
  if (v3 == 4)
  {
    v4 = **(_DWORD **)Constraints;
    v5 = 1.0;
    return v4 | ((unint64_t)LODWORD(v5) << 32);
  }
  v6 = Constraints;
  Type = CoreNLP::ModelContainer::getType(a1);
  FixedLanguageForScript = getFixedLanguageForScript(Type);
  if (!FixedLanguageForScript)
  {
    LanguageIdentifierModel::getTopProbabilities(a1, &v77);
    OutputSize = LanguageIdentifierModel::getOutputSize((uint64_t)a1, Type);
    if (Type > 4)
      v13 = 0;
    else
      v13 = (__int32 *)*(&off_1E2DF43E0 + (int)Type);
    v14 = v77;
    v15 = v78;
    if (v77 == v78)
    {
      v4 = 0;
      v5 = 0.0;
LABEL_112:
      if (v14)
      {
        v78 = v14;
        operator delete(v14);
      }
      return v4 | ((unint64_t)LODWORD(v5) << 32);
    }
    do
    {
      *v14 = log10f(*v14);
      ++v14;
    }
    while (v14 != v15);
    Hints = (uint64_t *)LanguageIdentifierModel::getHints(a1);
    __p = 0;
    v75 = 0;
    v76 = 0;
    v17 = *Hints;
    if (*Hints == Hints[1])
    {
      v34 = v77;
      v35 = v78;
    }
    else
    {
      do
      {
        v18 = wmemchr(v13, *(_DWORD *)v17, OutputSize);
        if (v18)
          v19 = v18;
        else
          v19 = &v13[OutputSize];
        v20 = (char *)v19 - (char *)v13;
        if (OutputSize == v20 >> 2)
          v21 = -1;
        else
          v21 = (unint64_t)v20 >> 2;
        if ((v21 & 0x80000000) == 0)
        {
          v22 = v75;
          if (v75 >= v76)
          {
            v24 = (char *)__p;
            v25 = (v75 - (_BYTE *)__p) >> 2;
            v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 62)
              std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
            v27 = v76 - (_BYTE *)__p;
            if ((v76 - (_BYTE *)__p) >> 1 > v26)
              v26 = v27 >> 1;
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
              v28 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v28 = v26;
            if (v28)
            {
              v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v76, v28);
              v24 = (char *)__p;
              v22 = v75;
            }
            else
            {
              v29 = 0;
            }
            v30 = (int *)&v29[4 * v25];
            *v30 = v21;
            v23 = (char *)(v30 + 1);
            while (v22 != v24)
            {
              v31 = *((_DWORD *)v22 - 1);
              v22 -= 4;
              *--v30 = v31;
            }
            __p = v30;
            v75 = v23;
            v76 = &v29[4 * v28];
            if (v24)
              operator delete(v24);
          }
          else
          {
            *(_DWORD *)v75 = v21;
            v23 = v22 + 4;
          }
          v75 = v23;
          v32 = log10f(*(float *)(v17 + 4));
          v77[v21] = v32 + v77[v21];
        }
        v17 += 8;
      }
      while (v17 != Hints[1]);
      v33 = v75;
      v34 = v77;
      v35 = v78;
      if (__p != v75)
      {
        if (v78 == v77)
        {
LABEL_66:
          v71 = 0;
          v72 = 0;
          v73 = 0;
          if (OutputSize < 1)
          {
            v69 = 0;
            v4 = 0;
            v5 = 0.0;
          }
          else
          {
            v43 = 0;
            v44 = -1;
            v45 = 0.0;
            do
            {
              v47 = *(_DWORD **)v6;
              v46 = *(_DWORD **)(v6 + 8);
              if (*(_DWORD **)v6 != v46)
              {
                while (*v47 != v13[v43])
                {
                  if (++v47 == v46)
                  {
                    v47 = *(_DWORD **)(v6 + 8);
                    break;
                  }
                }
              }
              if (v3 >= 5 && v47 == v46)
              {
                v48 = v72;
                if (v72 >= v73)
                {
                  v51 = v71;
                  v52 = (v72 - v71) >> 2;
                  v53 = v52 + 1;
                  if ((unint64_t)(v52 + 1) >> 62)
                    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
                  v54 = v73 - v71;
                  if ((v73 - v71) >> 1 > v53)
                    v53 = v54 >> 1;
                  if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
                    v55 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v55 = v53;
                  if (v55)
                  {
                    v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v73, v55);
                    v51 = v71;
                    v48 = v72;
                  }
                  else
                  {
                    v56 = 0;
                  }
                  v57 = &v56[4 * v52];
                  *(_DWORD *)v57 = v43;
                  v49 = v57 + 4;
                  while (v48 != v51)
                  {
                    v58 = *((_DWORD *)v48 - 1);
                    v48 -= 4;
                    *((_DWORD *)v57 - 1) = v58;
                    v57 -= 4;
                  }
                  v71 = v57;
                  v73 = &v56[4 * v55];
                  if (v51)
                    operator delete(v51);
                }
                else
                {
                  *(_DWORD *)v72 = v43;
                  v49 = v72 + 4;
                }
                v72 = v49;
              }
              else
              {
                v50 = __exp10f(v77[v43]);
                if (v50 > v45)
                {
                  v44 = v43;
                  v45 = v50;
                }
              }
              ++v43;
            }
            while (v43 != OutputSize);
            v59 = v71;
            if (v72 != v71)
            {
              v60 = 0.0;
              do
              {
                v61 = *(int *)v59;
                v59 += 4;
                v62 = v77;
                v60 = v60 + __exp10f(v77[v61]);
                v62[v61] = -3.4028e38;
              }
              while (v59 != v72);
              v63 = v77;
              v64 = v78;
              if (v77 != v78)
              {
                v65 = 0.0;
                v66 = v77;
                do
                {
                  v67 = *v66++;
                  v65 = v65 + __exp10f(v67);
                }
                while (v66 != v64);
                do
                {
                  v68 = __exp10f(*v63);
                  *v63++ = log10f(v68 + (float)((float)(v68 / v65) * v60));
                }
                while (v63 != v64);
              }
            }
            if ((v44 & 0x80000000) != 0)
            {
              v4 = 0;
              v5 = 0.0;
            }
            else
            {
              v5 = __exp10f(v77[v44]);
              v4 = v13[v44];
            }
            v69 = v71;
          }
          if (v69)
            operator delete(v69);
          if (__p)
          {
            v75 = (char *)__p;
            operator delete(__p);
          }
          v14 = v77;
          goto LABEL_112;
        }
        v36 = 0;
        do
        {
          v37 = wmemchr((__int32 *)__p, v36, (v33 - (_BYTE *)__p) >> 2);
          if (v37)
            v38 = v37;
          else
            v38 = (__int32 *)v33;
          v33 = v75;
          v34 = v77;
          if (v38 == (__int32 *)v75)
            v77[v36] = -20.0;
          ++v36;
          v35 = v78;
        }
        while (v36 < v78 - v34);
      }
    }
    if (v34 != v35)
    {
      v39 = 0.0;
      v40 = v34;
      do
      {
        v41 = *v40++;
        v39 = v39 + __exp10f(v41);
      }
      while (v40 != v35);
      do
      {
        v42 = __exp10f(*v34);
        *v34++ = log10f(v42 / v39);
      }
      while (v34 != v35);
    }
    goto LABEL_66;
  }
  v10 = *(_DWORD **)v6;
  v9 = *(_DWORD **)(v6 + 8);
  if (*(_DWORD **)v6 != v9)
  {
    while (*v10 != FixedLanguageForScript)
    {
      if (++v10 == v9)
      {
        v10 = *(_DWORD **)(v6 + 8);
        break;
      }
    }
  }
  v11 = v3 >= 5 && v10 == v9;
  if (v11)
    v4 = 0;
  else
    v4 = FixedLanguageForScript;
  if (v11)
    v5 = 0.0;
  else
    v5 = 1.0;
  return v4 | ((unint64_t)LODWORD(v5) << 32);
}

void sub_191C98F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

LanguageIdentifierModel *NLLanguageIdentifierRelease(LanguageIdentifierModel *result)
{
  if (result)
  {
    LanguageIdentifierModel::~LanguageIdentifierModel(result);
    JUMPOUT(0x19401E994);
  }
  return result;
}

uint64_t NLLanguageIdentifierGetTopLanguages(__CFString *a1, CFIndex a2, CFIndex a3, _DWORD *a4, int64_t a5)
{
  uint64_t TopHypotheses;
  int DominantScriptForString;
  int FixedLanguageForScript;
  CoreNLP::MontrealModel **v13;
  int *v14;
  int *v15;
  uint64_t v16;
  int v17;

  TopHypotheses = 0;
  if (a1 && a3)
  {
    DominantScriptForString = getDominantScriptForString(a1);
    FixedLanguageForScript = getFixedLanguageForScript(DominantScriptForString);
    if (FixedLanguageForScript)
    {
      if (a5 < 1)
      {
        return 0;
      }
      else
      {
        *a4 = FixedLanguageForScript;
        return 1;
      }
    }
    else
    {
      v13 = (CoreNLP::MontrealModel **)NLLanguageIdentifierCreate();
      NLLanguageIdentifierConsumeString(v13, a1, a2, a3);
      v14 = (int *)operator new[]();
      TopHypotheses = NLLanguageIdentifierGetTopHypotheses((LanguageIdentifierModel *)v13, v14, a5);
      LanguageIdentifierModel::~LanguageIdentifierModel((LanguageIdentifierModel *)v13);
      MEMORY[0x19401E994]();
      if (TopHypotheses < 1)
      {
        TopHypotheses = 0;
      }
      else
      {
        v15 = v14;
        v16 = TopHypotheses;
        do
        {
          v17 = *v15;
          v15 += 2;
          *a4++ = v17;
          --v16;
        }
        while (v16);
      }
      MEMORY[0x19401E970](v14, 0x1000C8000313F17);
    }
  }
  return TopHypotheses;
}

void sub_191C99134(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E970](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t NLLanguageIdentifierGetTopHypotheses(LanguageIdentifierModel *a1, _DWORD *a2, int64_t a3)
{
  uint64_t Constraints;
  _QWORD *v7;
  unsigned int Type;
  int FixedLanguageForScript;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;
  int64_t OutputSize;
  __int32 *v15;
  float *v16;
  float *v17;
  float *v18;
  uint64_t *Hints;
  uint64_t v20;
  __int32 *v21;
  __int32 *v22;
  uint64_t v23;
  int v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  int *v33;
  int v34;
  float v35;
  char *v36;
  float *v37;
  float *v38;
  unint64_t v39;
  __int32 *v40;
  __int32 *v41;
  float *v42;
  float v43;
  float *v44;
  float v45;
  float v46;
  char *v47;
  uint64_t i;
  _DWORD *v49;
  _DWORD *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  int v59;
  char *v60;
  float v61;
  uint64_t v62;
  _DWORD *v63;
  float *v64;
  float *v65;
  float v66;
  float *v67;
  float v68;
  float v69;
  uint64_t j;
  float v71;
  __int32 v72;
  float v73;
  float v74;
  char *v75;
  uint64_t *v76;
  char *v77;
  int64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  int64_t v90;
  uint64_t v91;
  float *v93;
  float *v94;
  int64_t v95;
  void *v96;
  char *v97;
  unint64_t v98;
  void *v99;
  char *v100;
  char *v101;
  void *__p;
  char *v103;
  char *v104;
  void *v105;
  float *v106;
  BOOL (*v107)(uint64_t, uint64_t);

  if (!a1)
    return 0;
  Constraints = LanguageIdentifierModel::getConstraints(a1);
  if (*(_QWORD *)(Constraints + 8) - *(_QWORD *)Constraints == 4)
  {
    *a2 = **(_DWORD **)Constraints;
    a2[1] = 1065353216;
    return 1;
  }
  v7 = (_QWORD *)Constraints;
  Type = CoreNLP::ModelContainer::getType(a1);
  FixedLanguageForScript = getFixedLanguageForScript(Type);
  v11 = (_DWORD *)*v7;
  v10 = (_DWORD *)v7[1];
  v12 = (unint64_t)v10 - *v7;
  if (FixedLanguageForScript)
  {
    if (v11 == v10)
    {
LABEL_9:
      v13 = (uint64_t)v10 - *v7;
    }
    else
    {
      v13 = 0;
      while (*(_DWORD *)((char *)v11 + v13) != FixedLanguageForScript)
      {
        v13 += 4;
        if ((_DWORD *)((char *)v11 + v13) == v10)
          goto LABEL_9;
      }
    }
    if (v12 < 5 || (_DWORD *)((char *)v11 + v13) != v10)
    {
      *a2 = FixedLanguageForScript;
      a2[1] = 1065353216;
      return 1;
    }
    return 0;
  }
  LanguageIdentifierModel::getTopProbabilities(a1, &v105);
  OutputSize = LanguageIdentifierModel::getOutputSize((uint64_t)a1, Type);
  if (Type > 4)
    v15 = 0;
  else
    v15 = (__int32 *)*(&off_1E2DF43E0 + (int)Type);
  v16 = (float *)v105;
  v17 = v106;
  if (v105 == v106)
  {
    v42 = (float *)v105;
    goto LABEL_133;
  }
  v95 = a3;
  v18 = (float *)v105;
  do
  {
    *v18 = log10f(*v18);
    ++v18;
  }
  while (v18 != v17);
  v94 = v17;
  Hints = (uint64_t *)LanguageIdentifierModel::getHints(a1);
  v93 = v16;
  __p = 0;
  v103 = 0;
  v104 = 0;
  v20 = *Hints;
  if (*Hints == Hints[1])
  {
    v37 = (float *)v105;
    v38 = v106;
  }
  else
  {
    do
    {
      v21 = wmemchr(v15, *(_DWORD *)v20, OutputSize);
      if (v21)
        v22 = v21;
      else
        v22 = &v15[OutputSize];
      v23 = (char *)v22 - (char *)v15;
      if (OutputSize == v23 >> 2)
        v24 = -1;
      else
        v24 = (unint64_t)v23 >> 2;
      if ((v24 & 0x80000000) == 0)
      {
        v25 = v103;
        if (v103 >= v104)
        {
          v27 = (char *)__p;
          v28 = (v103 - (_BYTE *)__p) >> 2;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 62)
            std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
          v30 = v104 - (_BYTE *)__p;
          if ((v104 - (_BYTE *)__p) >> 1 > v29)
            v29 = v30 >> 1;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
            v31 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          if (v31)
          {
            v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v104, v31);
            v27 = (char *)__p;
            v25 = v103;
          }
          else
          {
            v32 = 0;
          }
          v33 = (int *)&v32[4 * v28];
          *v33 = v24;
          v26 = (char *)(v33 + 1);
          while (v25 != v27)
          {
            v34 = *((_DWORD *)v25 - 1);
            v25 -= 4;
            *--v33 = v34;
          }
          __p = v33;
          v103 = v26;
          v104 = &v32[4 * v31];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *(_DWORD *)v103 = v24;
          v26 = v25 + 4;
        }
        v103 = v26;
        v35 = log10f(*(float *)(v20 + 4));
        *((float *)v105 + v24) = v35 + *((float *)v105 + v24);
      }
      v20 += 8;
    }
    while (v20 != Hints[1]);
    v36 = v103;
    v37 = (float *)v105;
    v38 = v106;
    if (__p != v103)
    {
      if (v106 == v105)
        goto LABEL_62;
      v39 = 0;
      do
      {
        v40 = wmemchr((__int32 *)__p, v39, (v36 - (_BYTE *)__p) >> 2);
        if (v40)
          v41 = v40;
        else
          v41 = (__int32 *)v36;
        v36 = v103;
        v37 = (float *)v105;
        if (v41 == (__int32 *)v103)
          *((_DWORD *)v105 + v39) = -1046478848;
        ++v39;
        v38 = v106;
      }
      while (v39 < v106 - v37);
    }
  }
  if (v37 != v38)
  {
    v43 = 0.0;
    v44 = v37;
    do
    {
      v45 = *v44++;
      v43 = v43 + __exp10f(v45);
    }
    while (v44 != v38);
    do
    {
      v46 = __exp10f(*v37);
      *v37++ = log10f(v46 / v43);
    }
    while (v37 != v38);
  }
LABEL_62:
  v99 = 0;
  v100 = 0;
  v101 = 0;
  if (OutputSize >= 1)
  {
    v47 = 0;
    for (i = 0; i != OutputSize; ++i)
    {
      v50 = (_DWORD *)*v7;
      v49 = (_DWORD *)v7[1];
      if ((_DWORD *)*v7 != v49)
      {
        while (*v50 != v15[i])
        {
          if (++v50 == v49)
          {
            v50 = (_DWORD *)v7[1];
            break;
          }
        }
      }
      if (v12 >= 5 && v50 == v49)
      {
        if (v47 >= v101)
        {
          v52 = (char *)v99;
          v53 = (v47 - (_BYTE *)v99) >> 2;
          v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) >> 62)
            std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
          v55 = v101 - (_BYTE *)v99;
          if ((v101 - (_BYTE *)v99) >> 1 > v54)
            v54 = v55 >> 1;
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
            v56 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v56 = v54;
          if (v56)
          {
            v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v101, v56);
            v52 = (char *)v99;
            v47 = v100;
          }
          else
          {
            v57 = 0;
          }
          v58 = &v57[4 * v53];
          *(_DWORD *)v58 = i;
          v51 = v58 + 4;
          while (v47 != v52)
          {
            v59 = *((_DWORD *)v47 - 1);
            v47 -= 4;
            *((_DWORD *)v58 - 1) = v59;
            v58 -= 4;
          }
          v99 = v58;
          v100 = v51;
          v101 = &v57[4 * v56];
          if (v52)
            operator delete(v52);
        }
        else
        {
          *(_DWORD *)v47 = i;
          v51 = v47 + 4;
        }
        v100 = v51;
        v47 = v51;
      }
    }
    v60 = (char *)v99;
    if (v47 != v99)
    {
      v61 = 0.0;
      do
      {
        v62 = *(int *)v60;
        v60 += 4;
        v63 = v105;
        v61 = v61 + __exp10f(*((float *)v105 + v62));
        v63[v62] = -8388609;
      }
      while (v60 != v47);
      v64 = (float *)v105;
      v65 = v106;
      if (v105 != v106)
      {
        v66 = 0.0;
        v67 = (float *)v105;
        do
        {
          v68 = *v67++;
          v66 = v66 + __exp10f(v68);
        }
        while (v67 != v65);
        do
        {
          v69 = __exp10f(*v64);
          *v64++ = log10f(v69 + (float)((float)(v69 / v66) * v61));
        }
        while (v64 != v65);
      }
    }
  }
  v96 = 0;
  v97 = 0;
  v98 = 0;
  std::vector<void const*>::reserve(&v96, OutputSize);
  if (OutputSize >= 1)
  {
    for (j = 0; j != OutputSize; ++j)
    {
      v71 = *((float *)v105 + j);
      if (fabsf(v71 + 3.4028e38) > 0.00000011921)
      {
        v72 = v15[j];
        v73 = __exp10f(v71);
        v74 = v73;
        v75 = v97;
        if ((unint64_t)v97 >= v98)
        {
          v77 = (char *)v96;
          v78 = (v97 - (_BYTE *)v96) >> 3;
          v79 = v78 + 1;
          if ((unint64_t)(v78 + 1) >> 61)
            std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
          v80 = v98 - (_QWORD)v96;
          if ((uint64_t)(v98 - (_QWORD)v96) >> 2 > v79)
            v79 = v80 >> 2;
          if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
            v81 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v81 = v79;
          if (v81)
          {
            v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v98, v81);
            v77 = (char *)v96;
            v75 = v97;
          }
          else
          {
            v82 = 0;
          }
          v83 = (uint64_t *)&v82[8 * v78];
          *(_DWORD *)v83 = v72;
          *((float *)v83 + 1) = v74;
          v84 = v83;
          if (v75 != v77)
          {
            do
            {
              v85 = *((_QWORD *)v75 - 1);
              v75 -= 8;
              *--v84 = v85;
            }
            while (v75 != v77);
            v77 = (char *)v96;
          }
          v76 = v83 + 1;
          v96 = v84;
          v97 = (char *)(v83 + 1);
          v98 = (unint64_t)&v82[8 * v81];
          if (v77)
            operator delete(v77);
        }
        else
        {
          *(_DWORD *)v97 = v72;
          *((float *)v75 + 1) = v73;
          v76 = (uint64_t *)(v75 + 8);
        }
        v97 = (char *)v76;
      }
    }
  }
  v86 = 126 - 2 * __clz((v97 - (_BYTE *)v96) >> 3);
  v107 = compareByProbability;
  if (v97 == v96)
    v87 = 0;
  else
    v87 = v86;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*,false>((uint64_t)v96, (uint64_t *)v97, (uint64_t (**)(uint64_t *, uint64_t *))&v107, v87, 1);
  if (OutputSize >= v95)
    a3 = v95;
  else
    a3 = OutputSize;
  std::vector<NLLanguageHypothesis>::resize((uint64_t)&v96, a3);
  v88 = (uint64_t *)v96;
  v16 = v93;
  v17 = v94;
  if (a3 >= 1)
  {
    v89 = (uint64_t *)v96;
    v90 = a3;
    do
    {
      v91 = *v89++;
      *(_QWORD *)a2 = v91;
      a2 += 2;
      --v90;
    }
    while (v90);
    goto LABEL_127;
  }
  if (v96)
  {
LABEL_127:
    v97 = (char *)v88;
    operator delete(v88);
  }
  if (v99)
  {
    v100 = (char *)v99;
    operator delete(v99);
  }
  if (__p)
  {
    v103 = (char *)__p;
    operator delete(__p);
  }
  v42 = (float *)v105;
LABEL_133:
  if (v42)
  {
    v106 = v42;
    operator delete(v42);
  }
  if (v16 == v17)
    return 0;
  return a3;
}

void sub_191C9981C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void NLLanguageIdentifierConsumeCharacters(CoreNLP::MontrealModel **this, const unsigned __int16 *a2, CFIndex a3)
{
  if (this)
    LanguageIdentifierModel::setCharacters(this, a2, a3);
}

_DWORD *NLLanguageIdentifierReset(_DWORD *result)
{
  uint64_t v1;

  if (result)
  {
    v1 = (uint64_t)result;
    LanguageIdentifierModel::clearInputString(result);
    LanguageIdentifierModel::clearConstraints(v1);
    return (_DWORD *)LanguageIdentifierModel::clearHints(v1);
  }
  return result;
}

BOOL compareByProbability(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 4) > *(float *)(a2 + 4);
}

void std::vector<NLLanguageHypothesis>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<NLLanguageHypothesis>::__append((void **)a1, a2 - v2);
  }
}

void NLLanguageIdentifierSetLanguageHints(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
    LanguageIdentifierModel::setHints(a1, a2, a3);
}

void NLLanguageIdentifierSetLanguageConstraints(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
    LanguageIdentifierModel::setConstraints(a1, a2, a3);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  char v19;
  BOOL v20;
  uint64_t v21;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = a2 - 1;
  v10 = v8;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = a2 - v10;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(a2 - 1, v10);
        if ((_DWORD)result)
        {
          v21 = *v10;
          *v10 = *v9;
          *v9 = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>(v10, v10 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, a3);
      default:
        if (v13 <= 191)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>((uint64_t)v10, a2, (uint64_t (**)(_QWORD *, _QWORD))a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>((uint64_t)v10, a2, (uint64_t (**)(_QWORD *, _QWORD))a3);
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>(&v10[v14 >> 1], v10, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>(v10, &v10[v14 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>(v10 + 1, v16 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>(v10 + 2, &v10[v15 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>(v16 - 1, v16, &v10[v15 + 1], a3);
            v17 = *v10;
            *v10 = *v16;
            *v16 = v17;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*a3)(v10 - 1, v10) & 1) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,NLLanguageHypothesis *,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&)>(v10, a2, a3);
            v10 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,NLLanguageHypothesis *,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&)>(v10, a2, a3);
          if ((v19 & 1) == 0)
            goto LABEL_15;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>(v10, v18, a3);
          v10 = v18 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>(v18 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v20)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*,false>(v8, v18, a3, -v12, a5 & 1);
            v10 = v18 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v10 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*,NLLanguageHypothesis*>((char *)v10, (char *)a2, (char *)a2, (unsigned int (**)(char *, uint64_t))a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>(uint64_t result, _QWORD *a2, uint64_t (**a3)(_QWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD v14[9];

  if ((_QWORD *)result != a2)
  {
    v14[7] = v3;
    v14[8] = v4;
    v6 = (_QWORD *)result;
    v7 = (_QWORD *)(result + 8);
    if ((_QWORD *)(result + 8) != a2)
    {
      v9 = 0;
      v10 = (_QWORD *)result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v14[0] = *v10;
          v12 = v9;
          while (1)
          {
            *(_QWORD *)((char *)v6 + v12 + 8) = *(_QWORD *)((char *)v6 + v12);
            if (!v12)
              break;
            v12 -= 8;
            result = (*a3)(v14, (char *)v6 + v12);
            if ((result & 1) == 0)
            {
              v13 = (_QWORD *)((char *)v6 + v12 + 8);
              goto LABEL_10;
            }
          }
          v13 = v6;
LABEL_10:
          *v13 = v14[0];
        }
        v7 = v10 + 1;
        v9 += 8;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>(uint64_t result, _QWORD *a2, uint64_t (**a3)(_QWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v12[9];

  if ((_QWORD *)result != a2)
  {
    v12[7] = v3;
    v12[8] = v4;
    v6 = (_QWORD *)result;
    v7 = (_QWORD *)(result + 8);
    if ((_QWORD *)(result + 8) != a2)
    {
      v9 = result - 8;
      do
      {
        v10 = v6;
        v6 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v12[0] = *v6;
          v11 = v9;
          do
          {
            *(_QWORD *)(v11 + 16) = *(_QWORD *)(v11 + 8);
            result = (*a3)(v12, v11);
            v11 -= 8;
          }
          while ((result & 1) != 0);
          *(_QWORD *)(v11 + 16) = v12[0];
        }
        v7 = v6 + 1;
        v9 += 8;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!(*a4)(a2, a1))
      return 1;
    v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  v10 = *a1;
  if (!(_DWORD)result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!(*a4)(a3, a2))
      return 1;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,NLLanguageHypothesis *,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v11;

  v4 = a2;
  v11 = *a1;
  if (((*a3)(&v11, a2 - 1) & 1) != 0)
  {
    v6 = a1;
    do
      ++v6;
    while (((*a3)(&v11, v6) & 1) == 0);
  }
  else
  {
    v7 = a1 + 1;
    do
    {
      v6 = v7;
      if (v7 >= v4)
        break;
      v8 = (*a3)(&v11, v7);
      v7 = v6 + 1;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      --v4;
    while (((*a3)(&v11, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    v9 = *v6;
    *v6 = *v4;
    *v4 = v9;
    do
      ++v6;
    while (!(*a3)(&v11, v6));
    do
      --v4;
    while (((*a3)(&v11, v4) & 1) != 0);
  }
  if (v6 - 1 != a1)
    *a1 = *(v6 - 1);
  *(v6 - 1) = v11;
  return v6;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,NLLanguageHypothesis *,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;

  v6 = 0;
  v13 = *a1;
  do
    ++v6;
  while (((*a3)(&a1[v6], &v13) & 1) != 0);
  v7 = &a1[v6];
  v8 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v7 >= a2)
        break;
      --a2;
    }
    while (((*a3)(a2, &v13) & 1) == 0);
  }
  else
  {
    do
      --a2;
    while (!(*a3)(a2, &v13));
  }
  if (v7 < a2)
  {
    v9 = &a1[v6];
    v10 = a2;
    do
    {
      v11 = *v9;
      *v9 = *v10;
      *v10 = v11;
      do
        ++v9;
      while (((*a3)(v9, &v13) & 1) != 0);
      do
        --v10;
      while (!(*a3)(v10, &v13));
    }
    while (v9 < v10);
    v8 = v9 - 1;
  }
  if (v8 != a1)
    *a1 = *v8;
  *v8 = v13;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if ((*a3)(a2 - 1, a1))
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      v17 = *v11;
      v14 = v12;
      while (1)
      {
        v15 = (uint64_t *)((char *)a1 + v14);
        *(uint64_t *)((char *)a1 + v14 + 24) = *(uint64_t *)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if (((*a3)(&v17, v15 + 1) & 1) == 0)
        {
          v16 = (uint64_t *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v17;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>(a1, a2, a3, a5);
  result = (*a5)(a4, a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = (*a5)(a3, a2);
    if ((_DWORD)result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = (*a5)(a2, a1);
      if ((_DWORD)result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>(a1, a2, a3, a4, a6);
  result = (*a6)(a5, a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = (*a6)(a4, a3);
    if ((_DWORD)result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = (*a6)(a3, a2);
      if ((_DWORD)result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = (*a6)(a2, a1);
        if ((_DWORD)result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*,NLLanguageHypothesis*>(char *a1, char *a2, char *a3, unsigned int (**a4)(char *, uint64_t))
{
  char *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v24;
  uint64_t v25;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD))a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if ((*a4)(v14, (uint64_t)a1))
        {
          v15 = *(_QWORD *)v14;
          *(_QWORD *)v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD))a4, v9, a1);
        }
        v14 += 8;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 < 9)
    {
      return v13;
    }
    else
    {
      v24 = v13;
      v16 = (unint64_t)v8 >> 3;
      do
      {
        v17 = 0;
        v25 = *(_QWORD *)a1;
        v18 = a1;
        do
        {
          v19 = &v18[8 * v17 + 8];
          v20 = (2 * v17) | 1;
          v21 = 2 * v17 + 2;
          if (v21 < v16 && (*a4)(&v18[8 * v17 + 8], (uint64_t)&v18[8 * v17 + 16]))
          {
            v19 += 8;
            v20 = v21;
          }
          *(_QWORD *)v18 = *(_QWORD *)v19;
          v18 = v19;
          v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 8;
        if (v19 == v6)
        {
          *(_QWORD *)v19 = v25;
        }
        else
        {
          *(_QWORD *)v19 = *(_QWORD *)v6;
          *(_QWORD *)v6 = v25;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>((uint64_t)a1, (uint64_t)(v19 + 8), (uint64_t (**)(_QWORD *, uint64_t))a4, (v19 + 8 - a1) >> 3);
        }
      }
      while (v16-- > 2);
      return v24;
    }
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>(uint64_t result, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[13];

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v19[11] = v4;
    v19[12] = v5;
    v7 = a4;
    v8 = result;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v12 = ((uint64_t)a4 - result) >> 2;
      v13 = v12 + 1;
      v14 = (_QWORD *)(result + 8 * (v12 + 1));
      v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 1))
      {
        ++v14;
        v13 = v15;
      }
      result = ((uint64_t (*)(_QWORD *, _QWORD *))*a2)(v14, v7);
      if ((result & 1) == 0)
      {
        v19[0] = *v7;
        do
        {
          v16 = v14;
          *v7 = *v14;
          if (v9 < v13)
            break;
          v17 = (2 * v13) | 1;
          v14 = (_QWORD *)(v8 + 8 * v17);
          v18 = 2 * v13 + 2;
          if (v18 < a3)
          {
            if ((*a2)(v8 + 8 * v17, v14 + 1))
            {
              ++v14;
              v17 = v18;
            }
          }
          result = ((uint64_t (*)(_QWORD *, _QWORD *))*a2)(v14, v19);
          v7 = v16;
          v13 = v17;
        }
        while (!(_DWORD)result);
        *v16 = v19[0];
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(NLLanguageHypothesis const&,NLLanguageHypothesis const&),NLLanguageHypothesis*>(uint64_t result, uint64_t a2, uint64_t (**a3)(_QWORD *, uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD v13[9];

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v13[7] = v4;
    v13[8] = v5;
    v8 = result;
    v9 = v6 >> 1;
    v10 = (_QWORD *)(result + 8 * (v6 >> 1));
    v11 = (_QWORD *)(a2 - 8);
    result = (*a3)(v10, a2 - 8);
    if ((_DWORD)result)
    {
      v13[0] = *v11;
      do
      {
        v12 = v10;
        *v11 = *v10;
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (_QWORD *)(v8 + 8 * v9);
        result = (*a3)(v10, (uint64_t)v13);
        v11 = v12;
      }
      while ((result & 1) != 0);
      *v12 = v13[0];
    }
  }
  return result;
}

void std::vector<NLLanguageHypothesis>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void CoreNLP::AbstractModel::~AbstractModel(CoreNLP::AbstractModel *this)
{
  *(_QWORD *)this = &unk_1E2DF1D78;
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  std::__tree<std::string>::destroy((uint64_t)this + 16, *((char **)this + 3));
}

_QWORD *std::vector<std::vector<std::pair<int,double>>>::__init_with_size[abi:ne180100]<std::vector<std::pair<int,double>>*,std::vector<std::pair<int,double>>*>(_QWORD *result, __int128 **a2, __int128 **a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,double>>>,std::vector<std::pair<int,double>>*,std::vector<std::pair<int,double>>*,std::vector<std::pair<int,double>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_191C9A9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,double>>>,std::vector<std::pair<int,double>>*,std::vector<std::pair<int,double>>*,std::vector<std::pair<int,double>>*>(uint64_t a1, __int128 **a2, __int128 **a3, uint64_t a4)
{
  uint64_t v4;
  __int128 **v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<std::pair<int,double>>::__init_with_size[abi:ne180100]<std::pair<int,double>*,std::pair<int,double>*>((char *)v4, *v6, v6[1], v6[1] - *v6);
      v4 = v11 + 24;
      v11 += 24;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,double>>>,std::vector<std::pair<int,double>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_191C9AA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,double>>>,std::vector<std::pair<int,double>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<int,double>>::__init_with_size[abi:ne180100]<std::pair<int,double>*,std::pair<int,double>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<float,unsigned long>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_191C9AAF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,double>>>,std::vector<std::pair<int,double>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long>>,std::vector<long>*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t CoreNLP::Tagger::setLocale(CoreNLP::TaggerContext **this, const __CFLocale *a2)
{
  return CoreNLP::TaggerContext::setLocale(this[4], a2);
}

uint64_t CoreNLP::Tagger::setLocaleConstraints(CoreNLP::TaggerContext **this, const __CFArray *a2)
{
  return CoreNLP::TaggerContext::setLocaleConstraints(this[4], a2);
}

uint64_t CoreNLP::Tagger::setTokenizerOptions(uint64_t this, uint64_t a2)
{
  **(_QWORD **)(this + 32) = a2;
  return this;
}

uint64_t CoreNLP::Tagger::setStringType(uint64_t a1, int a2)
{
  return CoreNLP::TaggerContext::setStringType(*(_QWORD *)(a1 + 32), a2);
}

uint64_t CoreNLP::Tagger::getTokenAtIndex@<X0>(CoreNLP::Tagger *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(CoreNLP::Tagger *, _QWORD, uint64_t))(*(_QWORD *)this + 64))(this, 0, a2);
  if (result)
  {
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(result + 16);
  }
  else
  {
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = -1;
  }
  return result;
}

uint64_t CoreNLP::Tagger::enumerateTokensOfCurrentTokenSequence()
{
  return 0;
}

uint64_t CoreNLP::Tagger::copyTranscriptionOfCurrentToken()
{
  return 0;
}

uint64_t CoreNLP::Tagger::getTranscriptionCharactersPtrOfCurrentToken()
{
  return 0;
}

CFStringRef NLStringTokenizerCopyBestStringLanguage(CoreNLP::NLLangid *a1, const __CFString *a2, CFRange a3)
{
  if (!a1 || ((unint64_t)a2 & 0x8000000000000000) != 0 || a3.location < 1)
    return 0;
  else
    return CoreNLP::NLLangid::copyLanguageString(a1, a2, a3);
}

CFStringRef NLStringTokenizerCopyBestStringLanguageWithHints(CoreNLP::NLLangid *a1, const __CFString *a2, CFRange theArray)
{
  uint64_t location;
  const __CFArray *length;
  const void *ValueAtIndex;

  location = theArray.location;
  if (!theArray.length || (length = (const __CFArray *)theArray.length, !CFArrayGetCount((CFArrayRef)theArray.length)))
  {
    ValueAtIndex = 0;
    if (!a1 || ((unint64_t)a2 & 0x8000000000000000) != 0 || location < 1)
      return (CFStringRef)ValueAtIndex;
    goto LABEL_11;
  }
  ValueAtIndex = 0;
  if (!a1 || ((unint64_t)a2 & 0x8000000000000000) != 0 || location < 1)
    return (CFStringRef)ValueAtIndex;
  if (CFStringGetLength((CFStringRef)a1) > 25)
  {
LABEL_11:
    theArray.location = location;
    return CoreNLP::NLLangid::copyLanguageString(a1, a2, theArray);
  }
  ValueAtIndex = CFArrayGetValueAtIndex(length, 0);
  CFRetain(ValueAtIndex);
  return (CFStringRef)ValueAtIndex;
}

uint64_t _NLStringTokenizerCopyPossibleStringLanguages(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v8[8];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = 0;
  if (a1 && (a2 & 0x8000000000000000) == 0 && a3 >= 1)
  {
    if (_NLStringTokenizerCopyPossibleStringLanguages::initOnce != -1)
      dispatch_once(&_NLStringTokenizerCopyPossibleStringLanguages::initOnce, &__block_literal_global_4);
    if (_NLStringTokenizerCopyPossibleStringLanguages::nlLangid)
    {
      v9 = 0;
      v10 = &v9;
      v11 = 0x2000000000;
      v12 = 0;
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 0x40000000;
      v8[2] = ___NLStringTokenizerCopyPossibleStringLanguages_block_invoke_2;
      v8[3] = &unk_1E2DF4410;
      v8[4] = &v9;
      v8[5] = a1;
      v8[6] = a2;
      v8[7] = a3;
      dispatch_sync((dispatch_queue_t)_NLStringTokenizerCopyPossibleStringLanguages::queue, v8);
      v3 = v10[3];
      _Block_object_dispose(&v9, 8);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_191C9AE0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x1030C4046C6D1BALL);
  _Unwind_Resume(a1);
}

uint64_t NLStringTokenizerGetTypeID()
{
  if (NLStringTokenizerGetTypeID::onceToken != -1)
    dispatch_once(&NLStringTokenizerGetTypeID::onceToken, &__block_literal_global_4);
  return __kNLStringTokenizerTypeID;
}

uint64_t NLStringTokenizerGoToTokenAtIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t result;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 40)
    || (v4 = *(_QWORD *)(a1 + 24), v5 = a2 < v4, v6 = a2 - v4, v5)
    || *(_QWORD *)(a1 + 32) + v4 <= a2)
  {
    result = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  else
  {
    v7 = *(uint64_t **)(a1 + 88);
    if (v7 && v6 >= *v7 && v6 < v7[1] + *v7)
    {
      return *(_QWORD *)(a1 + 96);
    }
    else
    {
      result = NLTokenizerGoToTokenAtIndex(*(uint64_t **)(a1 + 48), v6);
      *(_QWORD *)(a1 + 88) = result;
      if (result)
      {
        v9 = 17;
        if ((*(_QWORD *)(result + 16) & 0x20) == 0)
          v9 = 1;
        result = (*(_QWORD *)(result + 16) >> 2) & 0x20 | *(_QWORD *)(result + 16) & 0xELL | v9;
        *(_QWORD *)(a1 + 96) = result;
      }
    }
  }
  return result;
}

uint64_t NLStringTokenizerCopyCurrentTokenAttribute(uint64_t a1, int a2)
{
  uint64_t *v3;
  const __CFString *v4;
  CFRange *v5;
  const __CFString *v6;
  CoreNLP::NLLangid *v7;
  uint64_t Length;
  CFRange v9;
  uint64_t v10;

  if ((a2 & 0x20000) != 0)
  {
    v4 = *(const __CFString **)(a1 + 16);
    if (v4
      && (v5 = *(CFRange **)(a1 + 88)) != 0
      && (*(_DWORD *)(a1 + 56) - 1) <= 1
      && (v6 = CFStringCreateWithSubstring(0, v4, *v5)) != 0)
    {
      v7 = (CoreNLP::NLLangid *)v6;
      Length = CFStringGetLength(v6);
      if (Length < 1)
      {
        v10 = 0;
      }
      else
      {
        v9.location = Length;
        v10 = (uint64_t)CoreNLP::NLLangid::copyLanguageString(v7, 0, v9);
      }
      CFRelease(v7);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if ((a2 & 0x10000) != 0)
    {
      v3 = *(uint64_t **)(a1 + 48);
      return NLTokenizerCopyTranscriptionOfCurrentToken(v3);
    }
    v3 = *(uint64_t **)(a1 + 48);
    if ((a2 & 0x1000000) == 0)
      return NLTokenizerCopyTranscriptionOfCurrentToken(v3);
    NLTokenizerSetOptions((uint64_t)v3);
    v10 = NLTokenizerCopyTranscriptionOfCurrentToken(*(uint64_t **)(a1 + 48));
    NLTokenizerSetOptions(*(_QWORD *)(a1 + 48));
  }
  return v10;
}

uint64_t NLStringTokenizerGetCurrentSubTokens(uint64_t a1, _QWORD *a2, uint64_t a3, __CFArray *a4)
{
  CFRange *v5;
  CFIndex location;
  CFIndex length;
  CFStringRef v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[9];
  _QWORD v16[9];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  if (a3)
  {
    v5 = *(CFRange **)(a1 + 88);
    if (v5)
    {
      v17 = 0;
      v18 = &v17;
      v19 = 0x2000000000;
      v20 = 0;
      location = v5[1].location;
      if ((location & 4) != 0)
      {
        v12 = *(_QWORD *)(a1 + 48);
        v16[0] = MEMORY[0x1E0C809B0];
        v16[1] = 0x40000000;
        v16[2] = __NLStringTokenizerGetCurrentSubTokens_block_invoke;
        v16[3] = &unk_1E2DF4458;
        v16[4] = &v17;
        v16[5] = a2;
        v16[6] = a1;
        v16[7] = a4;
        v16[8] = a3;
        NLTokenizerEnumerateDerivedSubTokensOfToken(v12, (uint64_t)v5, (uint64_t)v16);
      }
      else if ((location & 2) != 0)
      {
        v13 = *(_QWORD *)(a1 + 48);
        v15[0] = MEMORY[0x1E0C809B0];
        v15[1] = 0x40000000;
        v15[2] = __NLStringTokenizerGetCurrentSubTokens_block_invoke_2;
        v15[3] = &unk_1E2DF4480;
        v15[4] = &v17;
        v15[5] = a2;
        v15[6] = a1;
        v15[7] = a4;
        v15[8] = a3;
        NLTokenizerEnumerateSubTokensOfToken(v13, (uint64_t)v5, (uint64_t)v15);
      }
      else
      {
        if (!a2)
        {
          v11 = 0;
LABEL_15:
          _Block_object_dispose(&v17, 8);
          return v11;
        }
        length = v5->length;
        *a2 = *(_QWORD *)(a1 + 24) + v5->location;
        a2[1] = length;
        if (a4)
        {
          v9 = CFStringCreateWithSubstring(0, *(CFStringRef *)(a1 + 16), *v5);
          CFArrayAppendValue(a4, v9);
          CFRelease(v9);
          v10 = v18;
        }
        else
        {
          v10 = &v17;
        }
        v10[3] = 1;
      }
      v11 = v18[3];
      goto LABEL_15;
    }
  }
  return 0;
}

void sub_191C9B1DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t _NLStringTokenizerTokenize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _NLStringTokenizerTokenizeWithTranscriptions(a1, a2, a3, a4, 0, 0);
}

uint64_t _NLStringTokenizerTokenizeCompoundWord(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return _NLStringTokenizerGetSubTokensOfCompound(a1, a2, a3, 0, a4, a5, a6);
}

uint64_t _NLStringTokenizerGetDerivedTokens(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[12];
  _QWORD v14[4];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = a3;
  if (!a4)
    return 0;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2000000000;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2000000000;
  v14[3] = 0;
  v9 = a2 - *(_QWORD *)(a1 + 24);
  v18 = 0;
  v19[0] = v9;
  v10 = *(_QWORD *)(a1 + 48);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 0x40000000;
  v13[2] = ___NLStringTokenizerGetDerivedTokens_block_invoke;
  v13[3] = &unk_1E2DF44D0;
  v13[6] = a5;
  v13[7] = a6;
  v13[8] = a9;
  v13[9] = a8;
  v13[4] = &v15;
  v13[5] = v14;
  v13[10] = a7;
  v13[11] = a4;
  NLTokenizerEnumerateDerivedSubTokensOfToken(v10, (uint64_t)v19, (uint64_t)v13);
  v11 = v16[3];
  _Block_object_dispose(v14, 8);
  _Block_object_dispose(&v15, 8);
  return v11;
}

void sub_191C9B490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t _NLStringTokenizerGetCurrentTokenPartOfSpeech(uint64_t a1)
{
  return NLTokenizerGetPartOfSpeechOfCurrentToken(*(uint64_t **)(a1 + 48));
}

uint64_t _NLStringTokenizerSetLocale(uint64_t a1, CFTypeRef cf)
{
  const void *v4;

  v4 = *(const void **)(a1 + 104);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 104) = 0;
  }
  if (cf)
    *(_QWORD *)(a1 + 104) = CFRetain(cf);
  return NLTokenizerSetLocale(*(_QWORD *)(a1 + 48));
}

uint64_t _NLStringTokenizerSetLocaleConstraints(uint64_t a1)
{
  return NLTokenizerSetLocaleConstraints(*(_QWORD *)(a1 + 48));
}

CFMutableArrayRef _NLStringTokenizerCreateNamePartsArrayWithString(uint64_t a1, const __CFString *a2)
{
  return __NLSTCreatePossibleNamePartsArrayWithStringAsCompositeName(a1, a2, 1);
}

CFMutableArrayRef _NLStringTokenizerCreateNamePartsArrayWithStringAsCompositeName(uint64_t a1, CFStringRef theString, int a3)
{
  return __NLSTCreatePossibleNamePartsArrayWithStringAsCompositeName(a1, theString, a3);
}

CFMutableArrayRef __NLSTCreatePossibleNamePartsArrayWithStringAsCompositeName(uint64_t a1, CFStringRef theString, int a3)
{
  _QWORD *v5;
  CFMutableArrayRef Mutable;
  _QWORD v8[4];

  if (!theString)
    return 0;
  if (!CFStringGetLength(theString))
    return 0;
  v5 = *(_QWORD **)(a1 + 112);
  if (!v5)
  {
    v5 = NLTokenizerCreate(0, 0x20000, *(const __CFLocale **)(a1 + 104));
    *(_QWORD *)(a1 + 112) = v5;
    if (!v5)
      return 0;
  }
  NLTokenizerSetStringType(v5, a3 != 0);
  NLTokenizerSetString(*(_QWORD *)(a1 + 112));
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x2000000000;
  v8[3] = 0;
  NLTokenizerEnumeratePossibleTokenSequences(*(_QWORD *)(a1 + 112));
  _Block_object_dispose(v8, 8);
  return Mutable;
}

void sub_191C9B778(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

CFMutableArrayRef _NLStringTokenizerCreatePossibleNamePartsArrayWithStringAsCompositeName(uint64_t a1, CFStringRef theString, int a3)
{
  return __NLSTCreatePossibleNamePartsArrayWithStringAsCompositeName(a1, theString, a3);
}

uint64_t _NLStringTokenizerGetNextBestTokens()
{
  return 0;
}

uint64_t _NLStringTokenizerSetTokenizerAttribute()
{
  return 0;
}

uint64_t _NLStringTokenizerGetTokenizerAttribute()
{
  return 0;
}

void ___ZL59__NLSTCreatePossibleNamePartsArrayWithStringAsCompositeNameP19__NLStringTokenizerPK10__CFStringhhPi_block_invoke(uint64_t a1, _BYTE *a2)
{
  char v4;
  uint64_t v5;
  uint64_t *v6;
  char v7;
  char v8;
  const __CFArray *v9;
  const __CFString *ValueAtIndex;
  CFIndex Length;
  uint64_t v12;
  CFIndex v13;
  uint64_t v14;
  CFIndex v15;
  uint64_t v16;
  const CFArrayCallBacks *v17;
  const UniChar *v18;
  __CFArray *Mutable;
  CFStringRef v20;
  CFStringRef v21;
  const void *v23;
  _BYTE v24[8];
  const UniChar *v25;
  _QWORD v26[6];
  __int128 v27;
  uint64_t v28;
  char v29;
  _QWORD v30[4];
  CFStringRef v31;
  CFRange v32;

  v30[0] = 0;
  v30[1] = v30;
  v30[2] = 0x2000000000;
  v30[3] = 0;
  v4 = *(_BYTE *)(a1 + 80);
  if (v4)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v4 = *(_BYTE *)(a1 + 80);
  }
  v26[0] = MEMORY[0x1E0C809B0];
  v26[2] = ___ZL59__NLSTCreatePossibleNamePartsArrayWithStringAsCompositeNameP19__NLStringTokenizerPK10__CFStringhhPi_block_invoke_2;
  v26[3] = &unk_1E2DF44F8;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(uint64_t **)(*(_QWORD *)(a1 + 40) + 112);
  v26[1] = 0x40000000;
  v27 = *(_OWORD *)(a1 + 48);
  v29 = v4;
  v26[4] = v30;
  v26[5] = v5;
  v28 = *(_QWORD *)(a1 + 64);
  v7 = NLTokenizerEnumerateTokensOfCurrentTokenSequence(v6, (uint64_t)v26);
  if (*(_BYTE *)(a1 + 80))
  {
    v8 = v7;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 64), *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
    v32.length = *(_QWORD *)(a1 + 72);
    v32.location = 0;
    CoreNLP::UStringPiece::UStringPiece((CoreNLP::UStringPiece *)v24, *(const __CFString **)(a1 + 56), v32);
    if ((v8 & 1) == 0)
    {
      v9 = *(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      if (v9)
      {
        if (CFArrayGetCount(v9) >= 1)
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), 0);
          Length = CFStringGetLength(ValueAtIndex);
          v12 = *(_QWORD *)(a1 + 72);
          if (v12 >= 1)
          {
            v13 = Length;
            v14 = -1;
            v15 = 1;
            v16 = 1;
            v17 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
            do
            {
              if (v13 != v15)
              {
                v18 = v25;
                Mutable = CFArrayCreateMutable(0, 0, v17);
                v20 = CFStringCreateWithCharacters(0, v18, v15);
                v31 = v20;
                CFArrayAppendValue(Mutable, v20);
                if (v20)
                  CFRelease(v20);
                if (v12 > v15)
                {
                  v21 = CFStringCreateWithCharacters(0, &v18[v16], v12 + v14);
                  v31 = v21;
                  CFArrayAppendValue(Mutable, v21);
                  if (v21)
                    CFRelease(v21);
                }
                CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 64), Mutable);
                if (Mutable)
                  CFRelease(Mutable);
                v12 = *(_QWORD *)(a1 + 72);
              }
              ++v16;
              --v14;
            }
            while (v15++ < v12);
          }
        }
      }
    }
    v23 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    if (v23)
      CFRelease(v23);
    CoreNLP::UStringPiece::~UStringPiece((CoreNLP::UStringPiece *)v24);
  }
  else
  {
    *a2 = 1;
  }
  _Block_object_dispose(v30, 8);
}

void sub_191C9BA1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  CoreNLP::UStringPiece::~UStringPiece((CoreNLP::UStringPiece *)va);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void ___ZL59__NLSTCreatePossibleNamePartsArrayWithStringAsCompositeNameP19__NLStringTokenizerPK10__CFStringhhPi_block_invoke_2(uint64_t a1, CFRange *a2)
{
  CFIndex location;
  int *v4;
  int v5;
  CFStringRef v6;
  CFMutableArrayRef *v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    goto LABEL_8;
  location = a2[1].location;
  if ((location & 0x10000) != 0)
  {
    v4 = *(int **)(a1 + 48);
    v5 = 1;
  }
  else
  {
    v4 = *(int **)(a1 + 48);
    if ((location & 0x40000) == 0)
    {
      *v4 = 0;
      goto LABEL_8;
    }
    v5 = -1;
  }
  *v4 = v5;
LABEL_8:
  v6 = CFStringCreateWithSubstring(0, *(CFStringRef *)(a1 + 56), *a2);
  if (*(_BYTE *)(a1 + 72))
    v7 = (CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  else
    v7 = (CFMutableArrayRef *)(a1 + 64);
  CFArrayAppendValue(*v7, v6);
  CFRelease(v6);
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

void std::unique_ptr<__CFString const,CoreNLP::CFDeleteFunctor<__CFString const*>>::reset[abi:ne180100](const void **a1, const void *a2)
{
  const void *v3;

  v3 = *a1;
  *a1 = a2;
  if (v3)
    CFRelease(v3);
}

void std::unique_ptr<__CFArray const,CoreNLP::CFDeleteFunctor<__CFArray const*>>::reset[abi:ne180100](const void **a1, const void *a2)
{
  const void *v3;

  v3 = *a1;
  *a1 = a2;
  if (v3)
    CFRelease(v3);
}

void CoreNLP::TopicModel::CreateModel(int a1@<W0>, uint64_t *a2@<X8>)
{
  CoreNLP::Resource *v4;
  uint64_t v5;
  uint64_t v6;
  CoreNLP::CNNModel *v7;
  CoreNLP::Resource *v8;
  CoreNLP::CNNModel *v9;
  CoreNLP::CNNModel *v10;
  __int128 v11;
  uint64_t v12;
  CoreNLP::Resource *v13[2];
  void *__p[2];
  uint64_t v15;
  void **v16;
  char v17;
  __int128 v18;
  char v19;
  __int128 v20;

  *(_QWORD *)&v20 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v4 = CoreNLP::copyLocaleForLanguageID(a1);
  v13[1] = v4;
  CoreNLP::Resource::getAssetResource(v4, (const __CFLocale *)CFSTR("TopicModel"), CFSTR("topic.bundle"), 0, v13);
  if (v13[0] && CoreNLP::Resource::exists((CoreNLP **)v13[0]))
  {
    CoreNLP::Resource::path((CoreNLP **)v13[0], &v11);
    if (SHIBYTE(v15) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = v11;
    v15 = v12;
    std::string::basic_string[abi:ne180100]<0>(&v18, "output1");
    v11 = 0uLL;
    v12 = 0;
    v16 = (void **)&v11;
    v17 = 0;
    *(_QWORD *)&v11 = operator new(0x18uLL);
    *((_QWORD *)&v11 + 1) = v11;
    v12 = v11 + 24;
    *((_QWORD *)&v11 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v12, &v18, &v20, (std::string *)v11);
    CoreNLP::CNNModel::CreateCNNModel(1, (uint64_t)v4, (const void **)__p, (__int128 **)&v11, &v10);
    v16 = (void **)&v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v16);
    if (v19 < 0)
      operator delete((void *)v18);
    v5 = operator new();
    v9 = v10;
    v10 = 0;
    CoreNLP::TopicModel::TopicModel((_QWORD *)v5, (uint64_t *)&v9);
    *a2 = v5;
    v6 = (uint64_t)v9;
    v9 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    *(_DWORD *)(v5 + 64) = 108;
    *(_DWORD *)(v5 + 8) = 9;
    *(_DWORD *)(v5 + 12) = a1;
    v7 = v10;
    v10 = 0;
    if (v7)
      (*(void (**)(CoreNLP::CNNModel *))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    *a2 = 0;
  }
  v8 = v13[0];
  v13[0] = 0;
  if (v8)
  {
    CoreNLP::Resource::~Resource(v8);
    MEMORY[0x19401E994]();
  }
  if (v4)
    CFRelease(v4);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_191C9BDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CoreNLP::Resource *a15, const void *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  MEMORY[0x19401E994](v24, 0x10B3C405D312BFDLL);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  std::unique_ptr<CoreNLP::Resource>::reset[abi:ne180100](&a15, 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset(&a16, 0);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void CoreNLP::TopicModel::vinference(uint64_t a1@<X0>, __int128 ***a2@<X1>, CoreNLP *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  const void *v7;
  const void *Value;
  const void *v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  double *v20;
  char *v21;
  double *v22;
  __int128 *v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  std::runtime_error *exception;
  char *v28;
  char *v29;
  char *v30;
  void *v31;
  _QWORD *v32;
  CFTypeRef cf;
  std::string v34;
  CFTypeRef v35;
  _QWORD *v36;
  char v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *__p;
  _BYTE *v42;
  char *v43;
  __int128 *v44;

  v44 = (__int128 *)*MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
  {
    memset(&v34, 0, sizeof(v34));
    std::vector<std::vector<std::string>>::__init_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>(&v34, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    v7 = (const void *)CoreNLP::CNNModel::featureRepresentation(v5, (uint64_t *)&v34);
    v35 = v7;
    __p = &v34;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    Value = CFDictionaryGetValue((CFDictionaryRef)v7, CFSTR("output1"));
    v9 = Value;
    if (Value)
      CFRetain(Value);
    applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&cf, v9);
    if (!cf)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::convert_to<std::vector<float>,0>(cf, (uint64_t)&__p);
    CoreNLP::getTopNIndices(a3, (v42 - (_BYTE *)__p) >> 2, (float *)__p, (uint64_t **)&v31);
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v10 = v31;
    v11 = v32;
    if (v31 == v32)
    {
      v12 = 0;
      v23 = 0;
    }
    else
    {
      v12 = 0;
      do
      {
        v13 = *v10 + 212;
        v14 = *((float *)__p + *v10);
        if (v12 >= v30)
        {
          v15 = (v12 - v28) >> 4;
          if ((unint64_t)(v15 + 1) >> 60)
            std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
          v16 = (v30 - v28) >> 3;
          if (v16 <= v15 + 1)
            v16 = v15 + 1;
          if ((unint64_t)(v30 - v28) >= 0x7FFFFFFFFFFFFFF0)
            v17 = 0xFFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>((uint64_t)&v30, v17);
          v20 = (double *)&v18[16 * v15];
          *(_DWORD *)v20 = v13;
          v20[1] = v14;
          v21 = v29;
          v22 = v20;
          if (v29 != v28)
          {
            do
            {
              *((_OWORD *)v22 - 1) = *((_OWORD *)v21 - 1);
              v22 -= 2;
              v21 -= 16;
            }
            while (v21 != v28);
            v21 = v28;
          }
          v12 = (char *)(v20 + 2);
          v28 = (char *)v22;
          v30 = &v18[16 * v19];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_DWORD *)v12 = v13;
          *((double *)v12 + 1) = v14;
          v12 += 16;
        }
        v29 = v12;
        ++v10;
      }
      while (v10 != v11);
      v23 = (__int128 *)v28;
    }
    v38 = 0;
    v39 = 0;
    v40 = 0;
    std::vector<std::pair<int,double>>::__init_with_size[abi:ne180100]<std::pair<int,double>*,std::pair<int,double>*>((char *)&v38, v23, (__int128 *)v12, (v12 - (char *)v23) >> 4);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v36 = a4;
    v37 = 0;
    v26 = (char *)operator new(0x18uLL);
    *a4 = v26;
    a4[1] = v26;
    a4[2] = v26 + 24;
    a4[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,double>>>,std::vector<std::pair<int,double>> const*,std::vector<std::pair<int,double>> const*,std::vector<std::pair<int,double>>*>((uint64_t)(a4 + 2), (__int128 **)&v38, (__int128 **)&__p, (uint64_t)v26);
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    if (v28)
      operator delete(v28);
    if (v31)
    {
      v32 = v31;
      operator delete(v31);
    }
    if (__p)
    {
      v42 = __p;
      operator delete(__p);
    }
    if (cf)
      CFRelease(cf);
    if (v35)
      CFRelease(v35);
  }
  else
  {
    v24 = operator new(0x10uLL);
    v42 = v24 + 2;
    v43 = (char *)(v24 + 2);
    *(_DWORD *)v24 = 0;
    v24[1] = 0x3FF0000000000000;
    __p = v24;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    v31 = a4;
    LOBYTE(v32) = 0;
    v25 = (char *)operator new(0x18uLL);
    *a4 = v25;
    a4[1] = v25;
    a4[2] = v25 + 24;
    a4[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,double>>>,std::vector<std::pair<int,double>> const*,std::vector<std::pair<int,double>> const*,std::vector<std::pair<int,double>>*>((uint64_t)(a4 + 2), (__int128 **)&__p, &v44, (uint64_t)v25);
    if (__p)
    {
      v42 = __p;
      operator delete(__p);
    }
  }
}

void sub_191C9C250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, const void *a15, uint64_t a16, uint64_t a17, uint64_t a18, const void *a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  void *v28;

  __cxa_free_exception(v28);
  applesauce::CF::ArrayRef::~ArrayRef(&a15);
  nlp::CFScopedPtr<__CFDictionary const*>::reset(&a19, 0);
  _Unwind_Resume(a1);
}

void CoreNLP::TopicModel::~TopicModel(CoreNLP::TopicModel *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DF1B60;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  CoreNLP::AbstractModel::~AbstractModel(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DF1B60;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  CoreNLP::AbstractModel::~AbstractModel(this);
  JUMPOUT(0x19401E994);
}

uint64_t CoreNLP::TopicModel::train()
{
  return 0;
}

_QWORD *CoreNLP::TopicModel::TopicModel(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  char **v6;
  char *v7[2];

  v7[0] = 0;
  v7[1] = 0;
  v6 = v7;
  CoreNLP::AbstractModel::AbstractModel((uint64_t)a1, (const void ***)&v6);
  std::__tree<std::string>::destroy((uint64_t)&v6, v7[0]);
  *a1 = &off_1E2DF1B60;
  v4 = *a2;
  *a2 = 0;
  a1[9] = v4;
  return a1;
}

void sub_191C9C474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::string>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,double>>>,std::vector<std::pair<int,double>> const*,std::vector<std::pair<int,double>> const*,std::vector<std::pair<int,double>>*>(uint64_t a1, __int128 **a2, __int128 **a3, uint64_t a4)
{
  uint64_t v4;
  __int128 **v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<std::pair<int,double>>::__init_with_size[abi:ne180100]<std::pair<int,double>*,std::pair<int,double>*>((char *)v4, *v6, v6[1], v6[1] - *v6);
      v4 = v11 + 24;
      v11 += 24;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,double>>>,std::vector<std::pair<int,double>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_191C9C528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,double>>>,std::vector<std::pair<int,double>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void applesauce::CF::convert_to<std::vector<float>,0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID TypeID;
  std::runtime_error *exception;

  if (!a1 || (TypeID = CFArrayGetTypeID(), TypeID != CFGetTypeID(a1)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::CFArray_get_value_to<std::vector<float>>((const __CFArray *)a1, a2);
}

void sub_191C9C5B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::details::CFArray_get_value_to<std::vector<float>>(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  int Count;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  float v7;
  float v8;
  unint64_t v9;
  float *v10;
  float *v11;
  float *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  float *v18;
  int v19;

  Count = CFArrayGetCount(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  std::vector<float>::reserve((void **)a2, Count);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, i);
      v7 = applesauce::CF::convert_to<float,0>(ValueAtIndex);
      v8 = v7;
      v10 = *(float **)(a2 + 8);
      v9 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v10 >= v9)
      {
        v12 = *(float **)a2;
        v13 = ((uint64_t)v10 - *(_QWORD *)a2) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v15 = v9 - (_QWORD)v12;
        if (v15 >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2 + 16, v16);
          v12 = *(float **)a2;
          v10 = *(float **)(a2 + 8);
        }
        else
        {
          v17 = 0;
        }
        v18 = (float *)&v17[4 * v13];
        *v18 = v8;
        v11 = v18 + 1;
        while (v10 != v12)
        {
          v19 = *((_DWORD *)v10-- - 1);
          *((_DWORD *)v18-- - 1) = v19;
        }
        *(_QWORD *)a2 = v18;
        *(_QWORD *)(a2 + 8) = v11;
        *(_QWORD *)(a2 + 16) = &v17[4 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *v10 = v7;
        v11 = v10 + 1;
      }
      *(_QWORD *)(a2 + 8) = v11;
    }
  }
}

void sub_191C9C708(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

float applesauce::CF::convert_to<float,0>(const __CFNumber *a1)
{
  uint64_t v1;
  std::runtime_error *exception;

  v1 = applesauce::CF::convert_as<float,0>(a1);
  if ((v1 & 0xFF00000000) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return *(float *)&v1;
}

void sub_191C9C814(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::AbstractEmbedding::fillWordVectorsWithShape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, int a8)
{
  int v15;
  vDSP_Length v16;
  vDSP_Length v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  size_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;

  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  if (a8 == 3)
    v16 = 3 * v15;
  else
    v16 = v15;
  v17 = v16 * (a4 * a3);
  v18 = 4 * v17;
  bzero(a5, 4 * v17);
  if (a8 == 1)
  {
    v25 = a6;
    v19 = a7;
    if (v17 >> 62)
      v20 = -1;
    else
      v20 = 4 * v17;
    v21 = (char *)operator new[]();
    v22 = v20;
    a7 = v19;
    a6 = v25;
    bzero(v21, v22);
    bzero(v21, v18);
  }
  else
  {
    v21 = a5;
    if (a8 == 3)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2, a3, a4, a5, a6, a7, 3);
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a2, a3, a4, v21, a6, a7);
  if (a8 == 1 && (_DWORD)result)
  {
    if ((_DWORD)a3)
    {
      v24 = 0;
      a3 = a3;
      do
      {
        vDSP_mtrans((const float *)&v21[v24], 1, (float *)&a5[v24], 1, v16, a4);
        v24 += 4 * v16 * a4;
        --a3;
      }
      while (a3);
    }
    if (v21)
      MEMORY[0x19401E970](v21, 0x1000C8052888210);
    return 1;
  }
  return result;
}

uint64_t CoreNLP::AbstractEmbedding::fillTokenVectorsWithShape(uint64_t a1, const __CFArray *a2, unsigned int a3, char *a4, uint64_t a5, uint64_t a6, int a7)
{
  vDSP_Length v12;
  CFIndex Count;
  size_t v14;
  char *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  vDSP_Length v21;

  v12 = (*(int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  Count = CFArrayGetCount(a2);
  v21 = v12 * a3;
  v14 = 4 * v21 * Count;
  bzero(a4, v14);
  v15 = a4;
  if (a7 == 1)
  {
    if ((v21 * Count) >> 62)
      v16 = -1;
    else
      v16 = 4 * v21 * Count;
    v15 = (char *)operator new[]();
    bzero(v15, v16);
    bzero(v15, v14);
  }
  v17 = (*(uint64_t (**)(uint64_t, const __CFArray *, CFIndex, _QWORD, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2, Count, a3, v15, a5, a6);
  v18 = v17;
  if (a7 == 1 && (_DWORD)v17)
  {
    if (Count)
    {
      v19 = 0;
      do
      {
        vDSP_mtrans((const float *)&v15[v19], 1, (float *)&a4[v19], 1, v12, a3);
        v19 += 4 * v21;
        --Count;
      }
      while (Count);
    }
    if (v15)
      MEMORY[0x19401E970](v15, 0x1000C8052888210);
  }
  return v18;
}

void *CoreNLP::AbstractEmbedding::tokenizeSentences(CoreNLP::AbstractEmbedding *this, const __CFArray *a2)
{
  __CFArray *Mutable;
  __CFDictionary *v5;
  int v6;
  CFLocaleRef v7;
  CoreNLP *v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  __CFString *v12;
  uint64_t v13;
  CFIndex v14;
  _QWORD v16[6];

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(Mutable, kNLTagSchemeTokenType[0]);
  v5 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  v6 = (*(uint64_t (**)(CoreNLP::AbstractEmbedding *))(*(_QWORD *)this + 72))(this);
  v7 = CoreNLP::copyLocaleForLanguageID(v6);
  CFDictionaryAddValue(v5, kNLTaggerOptionCustomModelPropertyLanguageKey[0], v7);
  v8 = (CoreNLP *)NLTaggerCreate(Mutable, v5);
  CFRelease(v7);
  CFRelease(Mutable);
  CFRelease(v5);
  v9 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if (CFArrayGetCount(a2))
  {
    v10 = 0;
    v11 = MEMORY[0x1E0C809B0];
    do
    {
      v12 = (__CFString *)-[__CFArray objectAtIndexedSubscript:](a2, "objectAtIndexedSubscript:", v10);
      v13 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      NLTaggerSetString(v8, v12);
      v14 = -[__CFString length](v12, "length");
      v16[0] = v11;
      v16[1] = 3221225472;
      v16[2] = ___ZN7CoreNLP17AbstractEmbedding17tokenizeSentencesEPK9__CFArray_block_invoke;
      v16[3] = &unk_1E2DF4548;
      v16[4] = v12;
      v16[5] = v13;
      NLTaggerEnumerateTokens(v8, 0, 0, v14, (CoreNLP::NLAttributedToken *)4, (uint64_t)v16);
      objc_msgSend(v9, "addObject:", v13);
      ++v10;
    }
    while (v10 < CFArrayGetCount(a2));
  }
  CFRelease(v8);
  return v9;
}

uint64_t ___ZN7CoreNLP17AbstractEmbedding17tokenizeSentencesEPK9__CFArray_block_invoke(uint64_t a1, _QWORD *a2)
{
  return objc_msgSend(*(id *)(a1 + 40), "addObject:", objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", *a2, a2[1]));
}

uint64_t CoreNLP::AbstractEmbedding::processModelConfig(uint64_t a1, uint64_t a2)
{
  _BOOL4 hasFile;
  _BOOL4 v4;
  void *v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  uint64_t v15;
  void *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t *v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  void *v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  unint64_t v51;
  void *v52;
  _BOOL4 v53;
  void *v54;
  void *v55;
  void *v56;
  _BOOL8 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL8 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BOOL4 v75;
  void *v76;
  unsigned int v77;
  uint64_t v78;
  void *v79;
  id obj;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  std::string v85;
  std::string v86;
  void *v87;
  void *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  void *v97[2];
  char v98;
  void *__p;
  std::string v100;
  std::string v101;
  std::string v102;
  std::string v103;
  uint64_t *v104;
  _QWORD *v105[2];
  std::string v106;
  _QWORD v107[3];
  char v108;
  _BYTE v109[128];
  _BYTE v110[128];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v106 = *(std::string *)a2;
  corelm::util::Directory::Directory<std::string>(v107, (uint64_t)&v106);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  v105[0] = 0;
  v105[1] = 0;
  v104 = (uint64_t *)v105;
  std::string::basic_string[abi:ne180100]<0>(&v103, "");
  std::string::basic_string[abi:ne180100]<0>(&v102, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)kEmbeddingModelConfig);
  hasFile = corelm::util::Directory::hasFile((uint64_t)v107, (uint64_t)&__p);
  v4 = hasFile;
  if ((v100.__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
  {
    if (hasFile)
      goto LABEL_8;
LABEL_11:
    v6 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v6)
      CoreNLP::AbstractEmbedding::processModelConfig(v6, v7, v8, v9, v10, v11, v12, v13);
    goto LABEL_79;
  }
  operator delete(__p);
  if (!v4)
    goto LABEL_11;
LABEL_8:
  v5 = (void *)MEMORY[0x1E0CB3940];
  std::string::basic_string[abi:ne180100]<0>(v97, (char *)kEmbeddingModelConfig);
  corelm::util::Directory::getFilePath((uint64_t)v107, (uint64_t)v97, (uint64_t)&__p);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v101, v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_);
  else
    v101 = v100;
  if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v101;
  else
    v14 = (std::string *)v101.__r_.__value_.__r.__words[0];
  v15 = objc_msgSend(v5, "stringWithUTF8String:", v14);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
  __p = &unk_1E2DF1AB8;
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  if (v98 < 0)
    operator delete(v97[0]);
  v16 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithContentsOfFile:", v15);
  if (!objc_msgSend((id)objc_msgSend(v16, "allKeys"), "containsObject:", CFSTR("EmbeddingNodeNameOnCPU"))
    || !objc_msgSend((id)objc_msgSend(v16, "allKeys"), "containsObject:", CFSTR("EmbeddingNodeNameOnANE"))
    || !objc_msgSend((id)objc_msgSend(v16, "allKeys"), "containsObject:", CFSTR("EmbeddingDimension"))
    || (objc_msgSend((id)objc_msgSend(v16, "allKeys"), "containsObject:", CFSTR("SupportedBatchSizesAndSequenceLengths")) & 1) == 0)
  {
    v57 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v57)
      CoreNLP::AbstractEmbedding::processModelConfig(v57, v58, v59, v60, v61, v62, v63, v64);
    goto LABEL_79;
  }
  MEMORY[0x19401E64C](&v103, objc_msgSend((id)objc_msgSend(v16, "objectForKeyedSubscript:", CFSTR("EmbeddingNodeNameOnCPU")), "UTF8String"));
  MEMORY[0x19401E64C](&v102, objc_msgSend((id)objc_msgSend(v16, "objectForKeyedSubscript:", CFSTR("EmbeddingNodeNameOnANE")), "UTF8String"));
  v17 = objc_msgSend((id)objc_msgSend(v16, "objectForKeyedSubscript:", CFSTR("EmbeddingDimension")), "intValue");
  v83 = (void *)objc_msgSend(v16, "objectForKeyedSubscript:", CFSTR("SupportedBatchSizesAndSequenceLengths"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0 || !objc_msgSend(v83, "objectForKeyedSubscript:", CFSTR("1")))
  {
    v67 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v67)
      CoreNLP::AbstractEmbedding::processModelConfig(v67, v68, v69, v70, v71, v72, v73, v74);
LABEL_79:
    v65 = 0;
    goto LABEL_80;
  }
  v78 = a1;
  v79 = v16;
  v77 = v17;
  v95 = 0u;
  v96 = 0u;
  v93 = 0u;
  v94 = 0u;
  obj = (id)objc_msgSend(v83, "allKeys");
  v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v93, v110, 16);
  if (v18)
  {
    v81 = *(_QWORD *)v94;
    do
    {
      v19 = 0;
      v82 = v18;
      do
      {
        if (*(_QWORD *)v94 != v81)
          objc_enumerationMutation(obj);
        v20 = *(void **)(*((_QWORD *)&v93 + 1) + 8 * v19);
        v101.__r_.__value_.__r.__words[0] = 0;
        v101.__r_.__value_.__r.__words[0] = (int)objc_msgSend(v20, "intValue");
        __p = &v101;
        v21 = std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v104, (unint64_t *)&v101, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
        v84 = v19;
        v23 = v21 + 5;
        v22 = (void *)v21[5];
        if (v22)
        {
          v21[6] = (uint64_t)v22;
          operator delete(v22);
          *v23 = 0;
          v23[1] = 0;
          v23[2] = 0;
        }
        v23[1] = 0;
        v23[2] = 0;
        *v23 = 0;
        v89 = 0u;
        v90 = 0u;
        v91 = 0u;
        v92 = 0u;
        v24 = (void *)objc_msgSend(v83, "objectForKey:", v20);
        v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v89, v109, 16);
        if (v25)
        {
          v26 = *(_QWORD *)v90;
          do
          {
            for (i = 0; i != v25; ++i)
            {
              if (*(_QWORD *)v90 != v26)
                objc_enumerationMutation(v24);
              v28 = *(void **)(*((_QWORD *)&v89 + 1) + 8 * i);
              __p = &v101;
              v29 = std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v104, (unint64_t *)&v101, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
              v30 = objc_msgSend(v28, "intValue");
              v31 = v30;
              v32 = v29[7];
              v33 = (char *)v29[6];
              if ((unint64_t)v33 >= v32)
              {
                v35 = (char *)v29[5];
                v36 = (v33 - v35) >> 3;
                if ((unint64_t)(v36 + 1) >> 61)
                  std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
                v37 = v32 - (_QWORD)v35;
                v38 = (uint64_t)(v32 - (_QWORD)v35) >> 2;
                if (v38 <= v36 + 1)
                  v38 = v36 + 1;
                if (v37 >= 0x7FFFFFFFFFFFFFF8)
                  v39 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v39 = v38;
                if (v39)
                {
                  v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v29 + 7), v39);
                  v35 = (char *)v29[5];
                  v33 = (char *)v29[6];
                }
                else
                {
                  v40 = 0;
                }
                v41 = &v40[8 * v36];
                *(_QWORD *)v41 = v31;
                v34 = v41 + 8;
                while (v33 != v35)
                {
                  v42 = *((_QWORD *)v33 - 1);
                  v33 -= 8;
                  *((_QWORD *)v41 - 1) = v42;
                  v41 -= 8;
                }
                v29[5] = (uint64_t)v41;
                v29[6] = (uint64_t)v34;
                v29[7] = (uint64_t)&v40[8 * v39];
                if (v35)
                  operator delete(v35);
              }
              else
              {
                *(_QWORD *)v33 = v30;
                v34 = v33 + 8;
              }
              v29[6] = (uint64_t)v34;
            }
            v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v89, v109, 16);
          }
          while (v25);
        }
        v19 = v84 + 1;
      }
      while (v84 + 1 != v82);
      v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v93, v110, 16);
    }
    while (v18);
  }
  v101.__r_.__value_.__r.__words[0] = 1;
  __p = &v101;
  v43 = (unint64_t *)std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v104, (unint64_t *)&v101, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p)[5];
  v97[0] = (void *)1;
  __p = v97;
  v44 = std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v104, (unint64_t *)v97, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p)[6];
  if (v43 != (unint64_t *)v44)
  {
    v45 = v43 + 1;
    if (v43 + 1 != (unint64_t *)v44)
    {
      v46 = *v43;
      v47 = v43 + 1;
      do
      {
        v49 = *v47++;
        v48 = v49;
        v50 = v46 >= v49;
        if (v46 <= v49)
          v46 = v48;
        if (!v50)
          v43 = v45;
        v45 = v47;
      }
      while (v47 != (unint64_t *)v44);
    }
  }
  v51 = *v43;
  if (!objc_msgSend((id)objc_msgSend(v79, "allKeys"), "containsObject:", CFSTR("PreProcessor")))
    goto LABEL_94;
  v52 = (void *)objc_msgSend((id)objc_msgSend(v79, "objectForKeyedSubscript:", CFSTR("PreProcessor")), "objectForKeyedSubscript:", CFSTR("Name"));
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(v52, "UTF8String"));
  v53 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "custom1");
  if (v100.__r_.__value_.__s.__data_[15] < 0)
    operator delete(__p);
  if (v53)
  {
    std::make_unique[abi:ne180100]<corelm::Custom1PreProcessor>((corelm::Custom1PreProcessor **)&__p);
    v54 = __p;
    __p = 0;
    v88 = v54;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v78 + 112))(v78, &v88);
    v55 = v88;
    v88 = 0;
    if (!v55)
      goto LABEL_75;
    goto LABEL_74;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(v52, "UTF8String"));
  v75 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "custom2");
  if (v100.__r_.__value_.__s.__data_[15] < 0)
    operator delete(__p);
  if (!v75)
    goto LABEL_94;
  std::make_unique[abi:ne180100]<corelm::Custom2PreProcessor>((corelm::Custom2PreProcessor **)&__p);
  v76 = __p;
  __p = 0;
  v87 = v76;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v78 + 112))(v78, &v87);
  v55 = v87;
  v87 = 0;
  if (v55)
LABEL_74:
    (*(void (**)(void *))(*(_QWORD *)v55 + 8))(v55);
LABEL_75:
  v56 = __p;
  __p = 0;
  if (v56)
    (*(void (**)(void *))(*(_QWORD *)v56 + 8))(v56);
LABEL_94:
  (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v78 + 80))(v78, &v104);
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v78 + 88))(v78, v51);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v86, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
  else
    v86 = v103;
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v85, v102.__r_.__value_.__l.__data_, v102.__r_.__value_.__l.__size_);
  else
    v85 = v102;
  (*(void (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)v78 + 96))(v78, &v86, &v85);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v78 + 104))(v78, v77);
  v65 = 1;
LABEL_80:
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v102.__r_.__value_.__l.__data_);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::destroy((uint64_t)&v104, v105[0]);
  v107[0] = &unk_1E2DF1AB8;
  if (v108 < 0)
    operator delete((void *)v107[1]);
  return v65;
}

void sub_191C9D60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  char a66;
  uint64_t a67;
  uint64_t a72;
  void *a73;
  char a74;

  if (a25)
    (*(void (**)(uint64_t))(*(_QWORD *)a25 + 8))(a25);
  if (a47)
    (*(void (**)(uint64_t))(*(_QWORD *)a47 + 8))(a47);
  if (a59 < 0)
    operator delete(__p);
  if (a65 < 0)
    operator delete(a60);
  std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::destroy((uint64_t)&a66, (_QWORD *)a67);
  a72 = (uint64_t)&unk_1E2DF1AB8;
  if (a74 < 0)
    operator delete(a73);
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

corelm::Custom1PreProcessor *std::make_unique[abi:ne180100]<corelm::Custom1PreProcessor>@<X0>(corelm::Custom1PreProcessor **a1@<X8>)
{
  corelm::Custom1PreProcessor *v2;
  corelm::Custom1PreProcessor *result;

  v2 = (corelm::Custom1PreProcessor *)operator new();
  result = corelm::Custom1PreProcessor::Custom1PreProcessor(v2);
  *a1 = v2;
  return result;
}

void sub_191C9D8AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10F3C4091DD64BDLL);
  _Unwind_Resume(a1);
}

corelm::Custom2PreProcessor *std::make_unique[abi:ne180100]<corelm::Custom2PreProcessor>@<X0>(corelm::Custom2PreProcessor **a1@<X8>)
{
  corelm::Custom2PreProcessor *v2;
  corelm::Custom2PreProcessor *result;

  v2 = (corelm::Custom2PreProcessor *)operator new();
  result = corelm::Custom2PreProcessor::Custom2PreProcessor(v2);
  *a1 = v2;
  return result;
}

void sub_191C9D910(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10F3C4061FB9574);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::AbstractEmbedding::fillWordVectors(CoreNLP::AbstractEmbedding *this, const __CFArray *a2, unsigned int a3, unsigned int a4, float *a5, const float *a6, const float *a7)
{
  return 0;
}

uint64_t CoreNLP::AbstractEmbedding::fillTokenVectors(CoreNLP::AbstractEmbedding *this, const __CFArray *a2, unint64_t a3, unsigned int a4, float *a5, const float *a6, const float *a7)
{
  return 0;
}

uint64_t CoreNLP::ReadOnlyFile<char>::create(__int128 *a1, char *a2, int a3)
{
  uint64_t v6;
  void *__p[2];
  char v9;

  v6 = operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  CoreNLP::ReadOnlyFile<char>::ReadOnlyFile(v6, a1, (const std::string::value_type *)__p, a3);
  if (v9 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_191C9D9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x19401E994](v15, 0x1012C403EBA5055);
  _Unwind_Resume(a1);
}

void CoreNLP::SmartWordBreak::~SmartWordBreak(CoreNLP::SmartWordBreak *this)
{
  const void *v2;

  v2 = *(const void **)this;
  if (v2)
    CFRelease(v2);
  if (*((_QWORD *)this + 2))
    ubrk_close();
}

CFTypeRef *CoreNLP::SmartWordBreak::setString(CFTypeRef *this, CFTypeRef cf, CFRange a3)
{
  CFTypeRef *v3;
  CFTypeRef v5;
  UText *v6;

  if (cf)
  {
    v3 = this;
    if (this[2])
    {
      v5 = *this;
      if (*v3)
      {
        CFRelease(v5);
        *v3 = 0;
      }
      *v3 = CFRetain(cf);
      v3[1] = 0;
      this = (CFTypeRef *)CFStringOpenUText();
      if (this)
      {
        v6 = (UText *)this;
        ubrk_setUText();
        utext_close(v6);
        this = (CFTypeRef *)ubrk_first();
        v3[1] = (CFTypeRef)(int)this;
      }
    }
  }
  return this;
}

uint64_t CoreNLP::ReadOnlyFile<char>::ReadOnlyFile(uint64_t a1, __int128 *a2, const std::string::value_type *a3, int a4)
{
  __int128 v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  const char *v12;
  int v13;
  const char *v14;
  int v15;
  int st_size;
  size_t v17;
  void *v18;
  void *v19;
  _QWORD *exception;
  _QWORD *v22;
  stat v23;
  uint64_t v24;
  int v25;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v8;
  }
  if (a3[23] < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 40) = v9;
  }
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = a4;
  if (a3[23] < 0)
  {
    v11 = *((_QWORD *)a3 + 1);
    if (v11 != 1 || **(_BYTE **)a3 != 114)
    {
      if (v11 != 2)
        goto LABEL_33;
      a3 = *(const std::string::value_type **)a3;
LABEL_15:
      if (*(_WORD *)a3 == 11122)
      {
        *(_DWORD *)(a1 + 64) = 514;
        if (*((char *)a2 + 23) >= 0)
          v12 = (const char *)a2;
        else
          v12 = *(const char **)a2;
        v13 = open(v12, 514, 384);
        goto LABEL_25;
      }
LABEL_33:
      exception = __cxa_allocate_exception(0x20uLL);
      CoreNLP::ReadOnlyFileCreationException::ReadOnlyFileCreationException(exception);
      goto LABEL_35;
    }
  }
  else
  {
    v10 = *((unsigned __int8 *)a3 + 23);
    if (v10 != 1)
    {
      if (v10 != 2)
        goto LABEL_33;
      goto LABEL_15;
    }
    if (*a3 != 114)
      goto LABEL_33;
  }
  *(_DWORD *)(a1 + 64) = 0;
  if (*((char *)a2 + 23) >= 0)
    v14 = (const char *)a2;
  else
    v14 = *(const char **)a2;
  v13 = open(v14, 0);
LABEL_25:
  v15 = v13;
  if (v13 < 0)
    goto LABEL_33;
  if (fstat(v13, &v23) < 0)
    goto LABEL_34;
  st_size = v23.st_size;
  *(_QWORD *)(a1 + 8) = v23.st_size;
  v24 = 0;
  v25 = st_size;
  fcntl(v15, 44, &v24);
  v17 = *(_QWORD *)(a1 + 8);
  if (!a4)
  {
    v19 = (void *)operator new[]();
    *(_QWORD *)a1 = v19;
    if ((read(v15, v19, *(_QWORD *)(a1 + 8)) & 0x8000000000000000) == 0)
      goto LABEL_32;
LABEL_34:
    close(v15);
    exception = __cxa_allocate_exception(0x20uLL);
    CoreNLP::ReadOnlyFileCreationException::ReadOnlyFileCreationException(exception);
LABEL_35:
  }
  if (v17)
  {
    v18 = mmap(0, v17, *(_DWORD *)(a1 + 64) & 2 | 1u, 1, v15, 0);
    if (v18 == (void *)-1)
    {
      close(v15);
      v22 = __cxa_allocate_exception(0x20uLL);
      CoreNLP::ReadOnlyFileCreationException::ReadOnlyFileCreationException(v22);
    }
    *(_QWORD *)a1 = v18;
  }
LABEL_32:
  close(v15);
  return a1;
}

void sub_191C9DDAC(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  void **v3;
  void *v4;

  __cxa_free_exception(v4);
  if (*(char *)(v2 + 63) < 0)
    operator delete(*v3);
  if (*(char *)(v2 + 39) < 0)
    operator delete(*v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN7CoreNLP20DefaultSubWordTaggerC2ERKNS_13TaggerContextERKNS_12StringBufferEmPK7__CFURL_block_invoke(uint64_t a1, CFRange a2, _BYTE *a3, uint64_t a4)
{
  return CoreNLP::EnglishCompoundWord::enumerateDecomposedTokensWithSpecifiedStop(*(CoreNLP::StringBuffer ***)(*(_QWORD *)(a1 + 32) + 48), a2, a3, a4);
}

_BYTE *CoreNLP::DefaultSubWordTagger::setLocaleConstraints(_BYTE *this, CFArrayRef theArray)
{
  _BYTE *v3;
  const __CFLocale *ValueAtIndex;

  if (theArray)
  {
    v3 = this;
    this = (_BYTE *)CFArrayGetCount(theArray);
    if (this == (_BYTE *)1)
    {
      ValueAtIndex = (const __CFLocale *)CFArrayGetValueAtIndex(theArray, 0);
      return CoreNLP::DefaultSubWordTagger::resetICUTextBreak(v3, ValueAtIndex);
    }
  }
  return this;
}

void CoreNLP::DefaultSubWordTagger::releaseString(CoreNLP::DefaultSubWordTagger *this)
{
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = -1;
  CoreNLP::ICUTextBreak::reset(*((CoreNLP::ICUTextBreak **)this + 8));
  *((_QWORD *)this + 11) = *((_QWORD *)this + 10);
  *((_QWORD *)this + 13) = 0;
}

uint64_t CoreNLP::DefaultSubWordTagger::fastEnumerateTokensWithSpecifiedStop(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64));
}

uint64_t CoreNLP::DefaultSubWordTagger::enumerateTokensWithSpecifiedStop(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 32))(*(_QWORD *)(a1 + 64));
}

uint64_t CoreNLP::DefaultSubWordTagger::enumeratePossiblePersonNameSequences(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = 0;
  return (*(uint64_t (**)(uint64_t, char *))(a2 + 16))(a2, &v3);
}

uint64_t CoreNLP::DefaultSubWordTagger::enumeratePersonNamesOfCurrentSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD v6[6];
  char v7;

  if (*(_BYTE *)(a1 + 113))
  {
    v7 = 1;
    (*(void (**)(uint64_t, uint64_t, char *))(a3 + 16))(a3, a1 + 24, &v7);
    *(_BYTE *)(a1 + 113) = 0;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 64);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 0x40000000;
    v6[2] = ___ZN7CoreNLP20DefaultSubWordTagger37enumeratePersonNamesOfCurrentSequenceEmU13block_pointerFvP7NLTokenPbE_block_invoke;
    v6[3] = &unk_1E2DF4570;
    v6[4] = a3;
    v6[5] = a1;
    CoreNLP::ICUTextBreak::fastEnumerateTokens(v4, a2, (uint64_t)v6);
  }
  return 1;
}

uint64_t ___ZN7CoreNLP20DefaultSubWordTagger37enumeratePersonNamesOfCurrentSequenceEmU13block_pointerFvP7NLTokenPbE_block_invoke(uint64_t result, _QWORD *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2[2] != -1)
  {
    v10 = 0x80000;
    v7 = 0;
    v5 = result + 32;
    v4 = *(_QWORD *)(result + 32);
    v6 = a2[1];
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8) + 16) + *a2;
    v9 = v6;
    result = (*(uint64_t (**)(void))(v4 + 16))();
    if (v7)
      *a3 = 1;
  }
  return result;
}

void CoreNLP::DefaultSubWordTagger::enumerateDerivedSubTokensOfToken(uint64_t a1, uint64_t a2)
{
  CoreNLP::GermanCompoundWord::enumerateDerivedSubTokensOfToken(*(_QWORD *)(a1 + 56), a2);
}

uint64_t CoreNLP::DefaultSubWordTagger::goToTokenAtIndexWithDecomposedEnglishTokens(CoreNLP::DefaultSubWordTagger *this, uint64_t a2)
{
  char *v2;
  char *v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (char *)*((_QWORD *)this + 10);
  if (*(_QWORD *)v2 > a2 || (v3 = (char *)*((_QWORD *)this + 11), *((_QWORD *)v3 - 2) + *((_QWORD *)v3 - 3) <= a2))
  {
    v11 = 0;
    *((_QWORD *)this + 11) = v2;
  }
  else
  {
    v4 = v3 - v2;
    if (v3 == v2)
      return -1;
    v5 = 0;
    v6 = v4 / 24;
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    for (i = v2 + 8; ; i += 3)
    {
      v9 = *(i - 1);
      if (v9 > a2)
        break;
      v10 = *i + v9;
      v11 = v5 + 1;
      if (v10 > a2)
        goto LABEL_14;
      ++v5;
      if (v7 == v11)
        return -1;
    }
    v11 = v5;
  }
  v5 = -1;
LABEL_14:
  *((_QWORD *)this + 13) = v11;
  return v5;
}

CFRange *CoreNLP::DefaultSubWordTagger::goToTokenAtIndex(CoreNLP::DefaultSubWordTagger *this, uint64_t a2, uint64_t a3, CFRange *a4)
{
  uint64_t v7;
  CFRange *v8;
  BOOL v9;
  CoreNLP::StringBuffer **v10;
  _QWORD v12[5];
  char v13;
  char v14;
  CFRange v15;

  if (a4)
    *a4 = (CFRange)xmmword_191D40610;
  v14 = 0;
  if (!*((_BYTE *)this + 72))
    return (CFRange *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, char *))(**((_QWORD **)this + 8) + 48))(*((_QWORD *)this + 8), a2, a3, &v14);
  if (*((_QWORD *)this + 10) != *((_QWORD *)this + 11))
  {
    v7 = CoreNLP::DefaultSubWordTagger::goToTokenAtIndexWithDecomposedEnglishTokens(this, a3);
    if (v7 != -1)
      return (CFRange *)(*((_QWORD *)this + 10) + 24 * v7);
  }
  v8 = (CFRange *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, char *))(**((_QWORD **)this + 8) + 48))(*((_QWORD *)this + 8), a2, a3, &v14);
  if (v8)
    v9 = v14 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    *((_QWORD *)this + 11) = *((_QWORD *)this + 10);
    *((_QWORD *)this + 13) = 0;
    v13 = 0;
    v10 = (CoreNLP::StringBuffer **)*((_QWORD *)this + 6);
    v15 = *v8;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 0x40000000;
    v12[2] = ___ZN7CoreNLP20DefaultSubWordTagger16goToTokenAtIndexEmlP7CFRange_block_invoke;
    v12[3] = &__block_descriptor_tmp_3_0;
    v12[4] = this;
    CoreNLP::EnglishCompoundWord::enumerateDecomposedTokensWithSpecifiedStop(v10, v15, &v13, (uint64_t)v12);
    if (*((_QWORD *)this + 10) != *((_QWORD *)this + 11))
    {
      v7 = CoreNLP::DefaultSubWordTagger::goToTokenAtIndexWithDecomposedEnglishTokens(this, a3);
      if (v7 == -1)
        return 0;
      return (CFRange *)(*((_QWORD *)this + 10) + 24 * v7);
    }
  }
  return v8;
}

void ___ZN7CoreNLP20DefaultSubWordTagger16goToTokenAtIndexEmlP7CFRange_block_invoke(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  __int128 v19;

  v3 = *(_QWORD **)(a1 + 32);
  v4 = v3[11];
  v5 = v3[12];
  if (v4 >= v5)
  {
    v8 = v3[10];
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v8) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v8) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(v3 + 12), v12);
    else
      v13 = 0;
    v14 = &v13[24 * v9];
    v15 = &v13[24 * v12];
    v16 = *a2;
    *((_QWORD *)v14 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v14 = v16;
    v7 = v14 + 24;
    v18 = (char *)v3[10];
    v17 = (char *)v3[11];
    if (v17 != v18)
    {
      do
      {
        v19 = *(_OWORD *)(v17 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v17 - 1);
        *(_OWORD *)(v14 - 24) = v19;
        v14 -= 24;
        v17 -= 24;
      }
      while (v17 != v18);
      v17 = (char *)v3[10];
    }
    v3[10] = v14;
    v3[11] = v7;
    v3[12] = v15;
    if (v17)
      operator delete(v17);
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v6;
    v7 = (char *)(v4 + 24);
  }
  v3[11] = v7;
}

__CFString *CoreNLP::DefaultSubWordTagger::copyTranscriptionOfCurrentToken(uint64_t a1, CFIndex *a2)
{
  CFRange v3;
  CoreNLP *SubStringCharsOfRange;

  if (!a2)
    return 0;
  v3.location = *a2;
  if (v3.location == -1)
    return 0;
  v3.length = a2[1];
  if (!v3.length)
    return 0;
  SubStringCharsOfRange = (CoreNLP *)CoreNLP::StringBuffer::getSubStringCharsOfRange(*(CoreNLP::StringBuffer **)(a1 + 16), v3);
  return CoreNLP::createLatinTranscription(SubStringCharsOfRange, (const unsigned __int16 *)a2[1], (**(_QWORD **)(a1 + 8) >> 26) & 1);
}

void ___ZN7CoreNLP20DefaultSubWordTagger12getNextTokenEP7CFRange_block_invoke(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  __int128 v19;

  v3 = *(_QWORD **)(a1 + 32);
  v4 = v3[11];
  v5 = v3[12];
  if (v4 >= v5)
  {
    v8 = v3[10];
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v8) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v8) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(v3 + 12), v12);
    else
      v13 = 0;
    v14 = &v13[24 * v9];
    v15 = &v13[24 * v12];
    v16 = *a2;
    *((_QWORD *)v14 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v14 = v16;
    v7 = v14 + 24;
    v18 = (char *)v3[10];
    v17 = (char *)v3[11];
    if (v17 != v18)
    {
      do
      {
        v19 = *(_OWORD *)(v17 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v17 - 1);
        *(_OWORD *)(v14 - 24) = v19;
        v14 -= 24;
        v17 -= 24;
      }
      while (v17 != v18);
      v17 = (char *)v3[10];
    }
    v3[10] = v14;
    v3[11] = v7;
    v3[12] = v15;
    if (v17)
      operator delete(v17);
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v6;
    v7 = (char *)(v4 + 24);
  }
  v3[11] = v7;
}

uint64_t CoreNLP::DefaultSubWordTagger::needSpeciallyHandleCJPersonName(CoreNLP::DefaultSubWordTagger *this, const __CFString *a2, CFRange a3)
{
  char *v3;
  int v4;
  CFIndex length;
  int v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  char v12;

  *(_OWORD *)((char *)this + 24) = xmmword_191D40610;
  v3 = (char *)this + 24;
  v4 = *((unsigned __int8 *)this + 72);
  if (!*((_BYTE *)this + 72))
  {
    v9 = 0;
    return v9 | (v4 << 8);
  }
  length = a3.length;
  v7 = *(_DWORD *)(*((_QWORD *)this + 1) + 56);
  (*(void (**)(_QWORD, const __CFString *, CFIndex))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8), a2, a3.location);
  v12 = 0;
  v8 = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 8) + 56))(*((_QWORD *)this + 8), &v12);
  if (v8 && (*(_BYTE *)(v8 + 16) & 0x80) != 0)
  {
    if (*(_QWORD *)(v8 + 8) == length)
    {
      if (v7 == 1)
        goto LABEL_4;
      v4 = 1;
      *((_BYTE *)this + 113) = 1;
    }
    else
    {
      v4 = 0;
    }
    v10 = *(_OWORD *)v8;
    *((_QWORD *)v3 + 2) = *(_QWORD *)(v8 + 16);
    *(_OWORD *)v3 = v10;
    v9 = 1;
    return v9 | (v4 << 8);
  }
LABEL_4:
  v9 = 0;
  v4 = 0;
  return v9 | (v4 << 8);
}

_OWORD *CoreNLP::DefaultSubWordTagger::enumerateSpeciallyHandledPersonNames(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *result;
  char v7;
  char v8;

  v8 = 0;
  v4 = (_OWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 24) == -1 || !*(_QWORD *)(a1 + 32))
    goto LABEL_6;
  v5 = 0x80000;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) == 1)
    v5 = 0x40000;
  *(_QWORD *)(a1 + 40) |= v5;
  result = (_OWORD *)(*(uint64_t (**)(uint64_t, _OWORD *, char *))(a2 + 16))(a2, v4, &v8);
  if (!v8)
  {
LABEL_6:
    v7 = 0;
    do
    {
      result = (_OWORD *)(*(uint64_t (**)(_QWORD, char *))(**(_QWORD **)(a1 + 64) + 56))(*(_QWORD *)(a1 + 64), &v7);
      if (!result)
        break;
      *v4 = *result;
      *(_QWORD *)(a1 + 40) = 0x80000;
      result = (_OWORD *)(*(uint64_t (**)(uint64_t, _OWORD *, char *))(a2 + 16))(a2, v4, &v8);
    }
    while (!v8);
  }
  return result;
}

uint64_t CoreNLP::DefaultSubWordTagger::getCurrentICUTokenFlag(CoreNLP::DefaultSubWordTagger *this)
{
  if (*((_BYTE *)this + 112))
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
  else
    return 0;
}

CoreNLP::SubWordTagger *std::unique_ptr<CoreNLP::EnglishCompoundWord>::reset[abi:ne180100](CoreNLP::SubWordTagger **a1, CoreNLP::SubWordTagger *a2)
{
  CoreNLP::SubWordTagger *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CoreNLP::SubWordTagger::~SubWordTagger(result);
    JUMPOUT(0x19401E994);
  }
  return result;
}

void NLScriptDetector::NLScriptDetector(NLScriptDetector *this)
{
  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 28;
}

void NLScriptDetector::~NLScriptDetector(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

CFStringRef NLScriptDetector::setString(CFStringRef this, const __CFString *a2)
{
  _QWORD *p_isa;

  if (a2)
  {
    p_isa = &this->isa;
    this = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
    *p_isa = this;
  }
  return this;
}

uint64_t NLScriptDetector::getDominantScript(const __CFString **this)
{
  const __CFString *v1;
  CFIndex Length;
  CFIndex i;
  unsigned int CharacterAtIndex;
  unsigned int v5;
  _QWORD *v6;
  int v7;
  int v8;
  int16x4_t v9;
  int v10;
  _QWORD *v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  CFIndex idx;
  NLScriptDetector *v19;
  int v20;
  __int128 v21;
  __int128 v22;
  int v23;
  int *v24;

  v1 = *this;
  if (*this)
  {
    v19 = (NLScriptDetector *)this;
    Length = CFStringGetLength(v1);
    v21 = 0u;
    v22 = 0u;
    v23 = 1065353216;
    std::__hash_table<long,std::hash<long>,std::equal_to<long>,std::allocator<long>>::__rehash<true>((uint64_t)&v21, 0x1DuLL);
    v20 = 0;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 1;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 2;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 3;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 4;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 5;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 6;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 7;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 8;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 9;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 10;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 11;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 12;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 13;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 14;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 15;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 16;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 17;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 18;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 19;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 20;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 21;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 22;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 23;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 24;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 25;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 26;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 27;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    v20 = 28;
    v24 = &v20;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24)+ 5) = 0;
    if (Length >= 1)
    {
      for (i = 0; i < Length; ++i)
      {
        CharacterAtIndex = CFStringGetCharacterAtIndex(v1, i);
        v5 = CharacterAtIndex;
        if ((unsigned __int16)((CharacterAtIndex & 0xFFDF) - 65) <= 0x19u)
          goto LABEL_5;
        if (CharacterAtIndex <= 0x2E && ((1 << CharacterAtIndex) & 0x708000000000) != 0
          || CharacterAtIndex == 173
          || CharacterAtIndex - 48 < 0xA
          || (unsigned __int16)(CharacterAtIndex - 188) <= 2u
          || CharacterAtIndex < 0x20
          || (unsigned __int16)(CharacterAtIndex - 127) <= 0x20u
          || CharacterAtIndex < 0xC0
          || (CharacterAtIndex & 0xFFDF) == 0xD7)
        {
LABEL_9:
          v20 = 28;
          v24 = &v20;
          v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
          goto LABEL_10;
        }
        if (CharacterAtIndex > 0x2AF)
        {
          if (CharacterAtIndex <= 0x36F)
            goto LABEL_9;
          if (CharacterAtIndex > 0x3FF)
          {
            if (CharacterAtIndex < 0x530 || CharacterAtIndex == 7467)
            {
              v20 = 1;
              v24 = &v20;
              v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
            }
            else if (CharacterAtIndex < 0x590 || (unsigned __int16)(CharacterAtIndex + 1261) <= 4u)
            {
              v20 = 9;
              v24 = &v20;
              v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
            }
            else if (CharacterAtIndex < 0x600 || (unsigned __int16)(CharacterAtIndex + 1251) <= 0x32u)
            {
              v20 = 5;
              v24 = &v20;
              v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
            }
            else
            {
              if ((unsigned __int16)(CharacterAtIndex + 400) >= 0x8Fu
                && CharacterAtIndex >= 0x700
                && (unsigned __int16)(CharacterAtIndex + 1200) > 0x2AFu)
              {
                v7 = CharacterAtIndex & 0xFF80;
                switch((unsigned __int16)((CharacterAtIndex & 0xFF80) - 2304) >> 7)
                {
                  case 0:
                    if ((CharacterAtIndex & 0xFFFE) == 0x964)
                    {
                      v20 = 28;
                      v24 = &v20;
                      std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                      continue;
                    }
                    v20 = 2;
                    v24 = &v20;
                    v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                    goto LABEL_10;
                  case 1:
                    v20 = 10;
                    v24 = &v20;
                    v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                    goto LABEL_10;
                  case 2:
                    v20 = 11;
                    v24 = &v20;
                    v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                    goto LABEL_10;
                  case 3:
                    v20 = 12;
                    v24 = &v20;
                    v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                    goto LABEL_10;
                  case 4:
                    v20 = 13;
                    v24 = &v20;
                    v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                    goto LABEL_10;
                  case 5:
                    v20 = 14;
                    v24 = &v20;
                    v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                    goto LABEL_10;
                  case 6:
                    v20 = 15;
                    v24 = &v20;
                    v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                    goto LABEL_10;
                  case 7:
                    v20 = 16;
                    v24 = &v20;
                    v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                    goto LABEL_10;
                  case 8:
                    v20 = 17;
                    v24 = &v20;
                    v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                    goto LABEL_10;
                  case 9:
                    v20 = 18;
                    v24 = &v20;
                    v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                    goto LABEL_10;
                  case 10:
                    v20 = 7;
                    v24 = &v20;
                    v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                    goto LABEL_10;
                  case 11:
                    v20 = 19;
                    v24 = &v20;
                    v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                    goto LABEL_10;
                  default:
                    if ((unsigned __int16)((unsigned __int16)(CharacterAtIndex + 21504) >> 10) < 0xBu
                      || (v8 = CharacterAtIndex & 0xFF00, v8 == 4352)
                      || (unsigned __int16)(CharacterAtIndex - 12593) <= 0x5Du)
                    {
                      v20 = 8;
                      v24 = &v20;
                      v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                      goto LABEL_10;
                    }
                    v9 = vdup_n_s16(CharacterAtIndex);
                    if ((vmaxv_u16(vcgt_u16((uint16x4_t)0xFC006071800200, (uint16x4_t)vadd_s16(v9, (int16x4_t)0x10001F0D1800700))) & 1) != 0)
                    {
                      v20 = 3;
                      v24 = &v20;
                      v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                      goto LABEL_10;
                    }
                    if (CharacterAtIndex - 8204 < 6
                      || CharacterAtIndex == 8217
                      || CharacterAtIndex - 8234 < 5
                      || (CharacterAtIndex & 0xFFF0) == 0x2060
                      || CharacterAtIndex == 65279
                      || (CharacterAtIndex & 0xFFF0) == 0xFE00)
                    {
                      goto LABEL_9;
                    }
                    if ((vmaxv_u16(vcgt_u16((uint16x4_t)0x700E000260030, (uint16x4_t)vadd_s16(v9, (int16x4_t)0x50058E0E300E295))) & 1) != 0|| v8 == 7680|| (CharacterAtIndex & 0xFFE0) == 0x2C60)
                    {
                      goto LABEL_5;
                    }
                    if (CharacterAtIndex - 7462 < 5 || v8 == 7936)
                      goto LABEL_26;
                    if ((vmaxv_u16(vcgt_u16((uint16x4_t)0x300030003F0065, (uint16x4_t)vadd_s16(v9, (int16x4_t)0xDF30DF90E2D4E265))) & 1) != 0|| (CharacterAtIndex & 0xFFE0) == 0xA700|| CharacterAtIndex - 0x2000 < 0xC00|| CharacterAtIndex > 0xFFFB|| v7 == 11776)
                    {
                      goto LABEL_9;
                    }
                    if (v8 == 3840)
                    {
                      v20 = 20;
                      v24 = &v20;
                      v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                      goto LABEL_10;
                    }
                    if (CharacterAtIndex - 4096 <= 0x9F)
                    {
                      v20 = 21;
                      v24 = &v20;
                      v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                      goto LABEL_10;
                    }
                    if (CharacterAtIndex - 4256 <= 0x5F)
                    {
                      v20 = 22;
                      v24 = &v20;
                      v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                      goto LABEL_10;
                    }
                    if (CharacterAtIndex - 4608 <= 0x19F)
                    {
                      v20 = 23;
                      v24 = &v20;
                      v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                      goto LABEL_10;
                    }
                    if (CharacterAtIndex - 5024 <= 0x5F)
                    {
                      v20 = 24;
                      v24 = &v20;
                      v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                      goto LABEL_10;
                    }
                    if (CharacterAtIndex - 5120 <= 0x27F)
                    {
                      v20 = 25;
                      v24 = &v20;
                      v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                      goto LABEL_10;
                    }
                    if (v7 == 6016)
                    {
                      v20 = 26;
                      v24 = &v20;
                      v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                      goto LABEL_10;
                    }
                    if (CharacterAtIndex - 6144 <= 0xAF)
                    {
                      v20 = 27;
                      v24 = &v20;
                      v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                      goto LABEL_10;
                    }
                    if (CharacterAtIndex >> 10 != 54)
                      continue;
                    idx = i + 1;
                    if (i + 1 >= Length
                      || CFStringGetCharacterAtIndex(v1, idx) >> 10 < 0x37u
                      || CFStringGetCharacterAtIndex(v1, idx) >> 13 > 6u)
                    {
                      continue;
                    }
                    v10 = CFStringGetCharacterAtIndex(v1, i);
                    if (((v10 + (v5 << 10) - 56613888) & 0xFFFF0000) == 0x10000)
                    {
                      v20 = 28;
                      v24 = &v20;
                      v11 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                    }
                    else
                    {
                      if ((v10 + (v5 << 10) - 56744960) >> 16)
                        goto LABEL_107;
                      v20 = 3;
                      v24 = &v20;
                      v11 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
                    }
                    ++*((_DWORD *)v11 + 5);
LABEL_107:
                    ++i;
                    break;
                }
                continue;
              }
              v20 = 0;
              v24 = &v20;
              v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
            }
          }
          else
          {
LABEL_26:
            v20 = 6;
            v24 = &v20;
            v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
          }
        }
        else
        {
LABEL_5:
          v20 = 4;
          v24 = &v20;
          v6 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v21, &v20, (uint64_t)&std::piecewise_construct, &v24);
        }
LABEL_10:
        ++*((_DWORD *)v6 + 5);
      }
    }
    v12 = (uint64_t *)v22;
    if ((_QWORD)v22)
    {
      v13 = 0;
      v14 = 28;
      do
      {
        v15 = *((_DWORD *)v12 + 4);
        if (v15 != 28)
        {
          v16 = *((_DWORD *)v12 + 5);
          if (v16 <= v13)
            v14 = v14;
          else
            v14 = v15;
          if (v16 > v13)
            v13 = *((_DWORD *)v12 + 5);
        }
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v14 = 28;
    }
    std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::~__hash_table((uint64_t)&v21);
    this = (const __CFString **)v19;
  }
  else
  {
    v14 = 28;
  }
  *((_DWORD *)this + 2) = v14;
  return v14;
}

void sub_191C9F79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x18uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<long,std::hash<long>,std::equal_to<long>,std::allocator<long>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_191C9FADC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

CoreNLP::MeCabSubTokenizer *CoreNLP::MeCabSubTokenizer::createTokenizer(int a1)
{
  CoreNLP::MeCabSubTokenizer *v2;

  v2 = (CoreNLP::MeCabSubTokenizer *)operator new();
  CoreNLP::MeCabSubTokenizer::MeCabSubTokenizer(v2);
  if ((CoreNLP::MeCabSubTokenizer::init((uint64_t)v2, a1) & 1) == 0)
  {
    (*(void (**)(CoreNLP::MeCabSubTokenizer *))(*(_QWORD *)v2 + 8))(v2);
    return 0;
  }
  return v2;
}

void sub_191C9FB9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10F1C40916E2469);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::MeCabSubTokenizer::init(uint64_t a1, int a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *__p[2];
  char v24;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    *(_DWORD *)(a1 + 400) = a2;
    switch(a2)
    {
      case 1:
        std::string::basic_string[abi:ne180100]<0>(__p, "/usr/share/tokenizer/ja");
        v2 = (*(uint64_t (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v2 + 16))(v2, __p, 0);
        if (v24 < 0)
          operator delete(__p[0]);
        v4 = (_QWORD *)operator new();
        v5 = *(_QWORD *)(a1 + 8);
        *v4 = &unk_1E2DF2F20;
        v4[1] = v5;
        v4[2] = 0;
        v6 = *(_QWORD *)(a1 + 264);
        *(_QWORD *)(a1 + 264) = v4;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        v7 = (_QWORD *)operator new();
        v8 = v7;
        goto LABEL_30;
      case 2:
        std::string::basic_string[abi:ne180100]<0>(__p, "/usr/share/tokenizer/zh/Hans");
        v2 = (*(uint64_t (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v2 + 16))(v2, __p, 0);
        if (v24 < 0)
          operator delete(__p[0]);
        v15 = (_QWORD *)operator new();
        v16 = *(_QWORD *)(a1 + 8);
        *v15 = &unk_1E2DF2F50;
        v15[1] = v16;
        v17 = *(_QWORD *)(a1 + 264);
        *(_QWORD *)(a1 + 264) = v15;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        v7 = (_QWORD *)operator new();
        v8 = v7;
        goto LABEL_30;
      case 3:
        std::string::basic_string[abi:ne180100]<0>(__p, "/usr/share/tokenizer/zh/Hant");
        v2 = (*(uint64_t (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v2 + 16))(v2, __p, 0);
        if (v24 < 0)
          operator delete(__p[0]);
        v18 = (_QWORD *)operator new();
        *v18 = &unk_1E2DF2EF0;
        v19 = *(_QWORD *)(a1 + 264);
        *(_QWORD *)(a1 + 264) = v18;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        v7 = (_QWORD *)operator new();
        v8 = v7;
        goto LABEL_30;
      case 4:
        std::string::basic_string[abi:ne180100]<0>(__p, "/usr/share/tokenizer/zh/yue-Hant");
        v2 = (*(uint64_t (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v2 + 16))(v2, __p, 0);
        if (v24 < 0)
          operator delete(__p[0]);
        v20 = (_QWORD *)operator new();
        *v20 = &unk_1E2DF2EF0;
        v21 = *(_QWORD *)(a1 + 264);
        *(_QWORD *)(a1 + 264) = v20;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        v7 = (_QWORD *)operator new();
        v8 = v7;
LABEL_30:
        *v7 = v9 + 16;
        v14 = *(_QWORD *)(a1 + 464);
        *(_QWORD *)(a1 + 464) = v8;
        if (v14)
          goto LABEL_31;
        break;
      case 5:
        std::string::basic_string[abi:ne180100]<0>(__p, "/usr/share/tokenizer/ko");
        v2 = (*(uint64_t (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v2 + 16))(v2, __p, 0);
        if (v24 < 0)
          operator delete(__p[0]);
        v10 = (_QWORD *)operator new();
        v11 = *(_QWORD *)(a1 + 8);
        *v10 = &unk_1E2DF2EC0;
        v10[1] = v11;
        v10[2] = 0;
        v12 = *(_QWORD *)(a1 + 264);
        *(_QWORD *)(a1 + 264) = v10;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        v13 = (_QWORD *)operator new();
        CoreNLP::KoreanLineBreakConnector::KoreanLineBreakConnector(v13);
        v14 = *(_QWORD *)(a1 + 464);
        *(_QWORD *)(a1 + 464) = v13;
        if (!v14)
          break;
LABEL_31:
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        break;
      default:
        v2 = 0;
        break;
    }
    CoreNLP::MeCabSubTokenizer::initFunctors((_QWORD *)a1);
  }
  return v2;
}

void sub_191C9FFB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CoreNLP::MeCabSubTokenizer *CoreNLP::MeCabSubTokenizer::MeCabSubTokenizer(CoreNLP::MeCabSubTokenizer *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E2DF2430;
  v2 = (_QWORD *)operator new();
  CoreNLP::MeCabImpl::MeCabImpl(v2);
  *((_QWORD *)this + 1) = v2;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 25) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_QWORD *)this + 35) = -1;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_QWORD *)this + 44) = (char *)this + 320;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = -1;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 433) = 0u;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = 0;
  return this;
}

void sub_191CA00A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

_QWORD *CoreNLP::MeCabSubTokenizer::initFunctors(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t (*v5)(uint64_t);
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  void *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;

  v1 = this;
  switch(*((_DWORD *)this + 100))
  {
    case 1:
      v4 = v1 + 22;
      v5 = CoreNLP::mecab::GetJapanesePOS;
      goto LABEL_7;
    case 2:
      v4 = v1 + 22;
      v5 = CoreNLP::mecab::GetSimplifiedChinesePOS;
LABEL_7:
      this = std::function<NLTokenizerPartOfSpeech ()(mecab_node_t const*)>::operator=<NLTokenizerPartOfSpeech (&)(mecab_node_t const*),void>(v4, (uint64_t)v5);
      break;
    case 3:
    case 4:
      v2 = v1 + 2;
      goto LABEL_4;
    case 5:
      v2 = v1 + 2;
LABEL_4:
      this = std::function<__CFString const* ()(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL)>::operator=<__CFString const* (&)(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL),void>(v2, (uint64_t)v3);
      break;
    default:
      break;
  }
  v6 = v1 + 30;
  v7 = (_QWORD *)v1[31];
  v8 = v1[32];
  if ((unint64_t)v7 >= v8)
  {
    v10 = ((uint64_t)v7 - *v6) >> 5;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59)
      goto LABEL_33;
    v12 = v8 - *v6;
    if (v12 >> 4 > v11)
      v11 = v12 >> 4;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v28 = v1 + 32;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>>((uint64_t)(v1 + 32), v13);
    else
      v14 = 0;
    v15 = &v14[32 * v10];
    v24 = v14;
    v25 = v15;
    v27 = &v14[32 * v13];
    *(_QWORD *)v15 = &unk_1E2DF3328;
    *((_QWORD *)v15 + 1) = CoreNLP::mecab::isAlphaNumeric;
    *((_QWORD *)v15 + 3) = v15;
    v26 = v15 + 32;
    std::vector<std::function<BOOL ()(mecab_node_t const*)>>::__swap_out_circular_buffer(v1 + 30, &v24);
    v9 = (_QWORD *)v1[31];
    this = std::__split_buffer<std::function<BOOL ()(mecab_node_t const*)>>::~__split_buffer(&v24);
  }
  else
  {
    *v7 = &unk_1E2DF3328;
    v7[1] = CoreNLP::mecab::isAlphaNumeric;
    v7[3] = v7;
    v9 = v7 + 4;
    v1[31] = v7 + 4;
  }
  v1[31] = v9;
  v16 = v1[32];
  if ((unint64_t)v9 < v16)
  {
    *v9 = &unk_1E2DF3328;
    v9[1] = CoreNLP::mecab::isOutOfBMP;
    v9[3] = v9;
    v17 = v9 + 4;
    v1[31] = v9 + 4;
    goto LABEL_32;
  }
  v18 = ((uint64_t)v9 - *v6) >> 5;
  if ((unint64_t)(v18 + 1) >> 59)
LABEL_33:
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v19 = v16 - *v6;
  v20 = v19 >> 4;
  if (v19 >> 4 <= (unint64_t)(v18 + 1))
    v20 = v18 + 1;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0)
    v21 = 0x7FFFFFFFFFFFFFFLL;
  else
    v21 = v20;
  v28 = v1 + 32;
  if (v21)
    v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>>((uint64_t)(v1 + 32), v21);
  else
    v22 = 0;
  v23 = &v22[32 * v18];
  v24 = v22;
  v25 = v23;
  v27 = &v22[32 * v21];
  *(_QWORD *)v23 = &unk_1E2DF3328;
  *((_QWORD *)v23 + 1) = CoreNLP::mecab::isOutOfBMP;
  *((_QWORD *)v23 + 3) = v23;
  v26 = v23 + 32;
  std::vector<std::function<BOOL ()(mecab_node_t const*)>>::__swap_out_circular_buffer(v1 + 30, &v24);
  v17 = (_QWORD *)v1[31];
  this = std::__split_buffer<std::function<BOOL ()(mecab_node_t const*)>>::~__split_buffer(&v24);
LABEL_32:
  v1[31] = v17;
  return this;
}

void sub_191CA03FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::function<BOOL ()(mecab_node_t const*)>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void CoreNLP::MeCabSubTokenizer::~MeCabSubTokenizer(CoreNLP::MeCabSubTokenizer *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  CoreNLP::MeCabSubTokenizer *v6;
  uint64_t v7;
  CoreNLP::MeCabSubTokenizer *v8;
  uint64_t v9;
  CoreNLP::MeCabSubTokenizer *v10;
  uint64_t v11;
  CoreNLP::MeCabSubTokenizer *v12;
  uint64_t v13;
  CoreNLP::MeCabSubTokenizer *v14;
  uint64_t v15;
  CoreNLP::MeCabSubTokenizer *v16;
  uint64_t v17;
  CoreNLP::MeCabSubTokenizer *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;

  *(_QWORD *)this = &off_1E2DF2430;
  v2 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v3)
    MEMORY[0x19401E970](v3, 0x1000C80BDFB0063);
  v4 = (void *)*((_QWORD *)this + 52);
  if (v4)
  {
    *((_QWORD *)this + 53) = v4;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v21 = (void **)((char *)this + 240);
  std::vector<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>::__destroy_vector::operator()[abi:ne180100](&v21);
  v6 = (CoreNLP::MeCabSubTokenizer *)*((_QWORD *)this + 29);
  if (v6 == (CoreNLP::MeCabSubTokenizer *)((char *)this + 208))
  {
    v7 = 4;
    v6 = (CoreNLP::MeCabSubTokenizer *)((char *)this + 208);
  }
  else
  {
    if (!v6)
      goto LABEL_14;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_14:
  v8 = (CoreNLP::MeCabSubTokenizer *)*((_QWORD *)this + 25);
  if (v8 == (CoreNLP::MeCabSubTokenizer *)((char *)this + 176))
  {
    v9 = 4;
    v8 = (CoreNLP::MeCabSubTokenizer *)((char *)this + 176);
  }
  else
  {
    if (!v8)
      goto LABEL_19;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_19:
  v10 = (CoreNLP::MeCabSubTokenizer *)*((_QWORD *)this + 21);
  if (v10 == (CoreNLP::MeCabSubTokenizer *)((char *)this + 144))
  {
    v11 = 4;
    v10 = (CoreNLP::MeCabSubTokenizer *)((char *)this + 144);
  }
  else
  {
    if (!v10)
      goto LABEL_24;
    v11 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
LABEL_24:
  v12 = (CoreNLP::MeCabSubTokenizer *)*((_QWORD *)this + 17);
  if (v12 == (CoreNLP::MeCabSubTokenizer *)((char *)this + 112))
  {
    v13 = 4;
    v12 = (CoreNLP::MeCabSubTokenizer *)((char *)this + 112);
  }
  else
  {
    if (!v12)
      goto LABEL_29;
    v13 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
LABEL_29:
  v14 = (CoreNLP::MeCabSubTokenizer *)*((_QWORD *)this + 13);
  if (v14 == (CoreNLP::MeCabSubTokenizer *)((char *)this + 80))
  {
    v15 = 4;
    v14 = (CoreNLP::MeCabSubTokenizer *)((char *)this + 80);
  }
  else
  {
    if (!v14)
      goto LABEL_34;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_34:
  v16 = (CoreNLP::MeCabSubTokenizer *)*((_QWORD *)this + 9);
  if (v16 == (CoreNLP::MeCabSubTokenizer *)((char *)this + 48))
  {
    v17 = 4;
    v16 = (CoreNLP::MeCabSubTokenizer *)((char *)this + 48);
  }
  else
  {
    if (!v16)
      goto LABEL_39;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_39:
  v18 = (CoreNLP::MeCabSubTokenizer *)*((_QWORD *)this + 5);
  if (v18 == (CoreNLP::MeCabSubTokenizer *)((char *)this + 16))
  {
    v19 = 4;
    v18 = (CoreNLP::MeCabSubTokenizer *)((char *)this + 16);
  }
  else
  {
    if (!v18)
      goto LABEL_44;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_44:
  v20 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
}

{
  CoreNLP::MeCabSubTokenizer::~MeCabSubTokenizer(this);
  JUMPOUT(0x19401E994);
}

__CFString *CoreNLP::`anonymous namespace'::createJapaneseTranscription(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  unsigned int v5;
  BOOL v9;
  int v10;
  uint64_t v12;
  UniChar *v14;
  int v15;
  const __CFString *v16;
  CFIndex v17;
  int v18;
  const UniChar *v19;
  CFStringRef v20;
  UniChar *v21;
  __CFString *MutableString;
  int v23;
  UniChar *v24;
  CFIndex v25;
  int v26;
  UniChar *v27;
  UniChar *v28;
  CFIndex v29;

  v4 = a2;
  v5 = *(unsigned __int8 *)(a2 + 90);
  if (v5 - 3 < 2)
  if (v5 == 5 && *(_BYTE *)(a2 + 91) == 1)
  if ((a3 & 0x20000) != 0)
  {
    v9 = v5 > 8;
    v10 = (1 << v5) & 0x184;
    if (!v9 && v10 != 0)
    {
      v12 = a2;
      while (*(unsigned __int16 *)(v12 + 80) != *(unsigned __int16 *)(a2 + 80)
           || *(unsigned __int16 *)(v12 + 88) - 1 >= 2)
      {
        v12 = *(_QWORD *)(v12 + 24);
        if (!v12)
          goto LABEL_18;
      }
      v4 = v12;
    }
  }
LABEL_18:
  v14 = (UniChar *)operator new[]();
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, UniChar *, uint64_t))(*(_QWORD *)a1 + 48))(a1, v4, v14, 256);
  if ((v15 - 256) < 0xFFFFFF01)
    goto LABEL_19;
  if (v4)
    v17 = (unint64_t)*(unsigned __int16 *)(v4 + 80) >> 1;
  else
    v17 = 0;
  if (*v14 != 42)
  {
    v17 = v15;
    v27 = v14;
    v28 = v14;
    v29 = v15;
    v21 = v14;
    if ((a4 & 1) != 0)
      goto LABEL_31;
LABEL_44:
    v20 = CFStringCreateWithCharacters(0, v21, v17);
    goto LABEL_45;
  }
  v18 = *(unsigned __int8 *)(v4 + 90);
  if (v18 == 6)
  {
    v19 = *(const UniChar **)(v4 + 64);
    goto LABEL_27;
  }
  if (*(_WORD *)(v4 + 80) == 2)
  {
    v19 = *(const UniChar **)(v4 + 64);
    v23 = *v19;
    if ((v23 - 40) < 2 || (v23 - 65288) < 2)
    {
LABEL_27:
      v27 = (UniChar *)v19;
      v28 = 0;
      v29 = v17;
      MEMORY[0x19401E970](v14, 0x1000C80BDFB0063);
      if (!v19)
        goto LABEL_20;
      if (!a4)
      {
        v20 = CFStringCreateWithCharactersNoCopy(0, v19, v17, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
LABEL_45:
        v16 = v20;
        goto LABEL_46;
      }
LABEL_31:
      MutableString = CoreNLP::TranscriptionBuffer::createMutableString((CoreNLP::TranscriptionBuffer *)&v27);
      v16 = MutableString;
      if (MutableString)
      {
        if (!CFStringTransform(MutableString, 0, CFSTR("Katakana; Latin; NFD"), 0))
          CFRelease(v16);
      }
      goto LABEL_46;
    }
  }
  if (v18 == 7)
  {
    v21 = (UniChar *)operator new[]();
    memcpy(v21, *(const void **)(v4 + 64), *(unsigned __int16 *)(v4 + 80));
    if (v17)
    {
      v24 = v21;
      v25 = v17;
      do
      {
        v26 = *v24;
        if ((v26 - 12449) <= 0x55)
          *v24 = v26 - 96;
        ++v24;
        --v25;
      }
      while (v25);
    }
    v27 = v21;
    v28 = v21;
    v29 = v17;
    MEMORY[0x19401E970](v14, 0x1000C80BDFB0063);
    if ((a4 & 1) != 0)
      goto LABEL_31;
    goto LABEL_44;
  }
LABEL_19:
  v27 = 0;
  v28 = 0;
  v29 = 0;
  MEMORY[0x19401E970](v14, 0x1000C80BDFB0063);
LABEL_20:
  v16 = &stru_1E2DF6418;
LABEL_46:
  CoreNLP::TranscriptionBuffer::~TranscriptionBuffer((CoreNLP::TranscriptionBuffer *)&v27);
  return (__CFString *)v16;
}

void sub_191CA0924(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E970](v1, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

_QWORD *std::function<__CFString const* ()(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL)>::operator=<__CFString const* (&)(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL),void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &unk_1E2DF32D0;
  v6[1] = a2;
  v7 = v6;
  std::__function::__value_func<__CFString const* ()(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t CoreNLP::`anonymous namespace'::calcRange(uint64_t a1, uint64_t *a2, int a3, int a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v9 = *(_QWORD *)(*a2 + 64);
  v10 = *(unsigned __int16 *)(*a2 + 80);
  v11 = v10 >> 1;
  if ((*(_QWORD *)&a4 & 0x810000) != 0
    || v10 < 4
    || *(_BYTE *)(*a2 + 90) != 3
    || *(_WORD *)(v9 + 2) != 12288)
  {
    v12 = CoreNLP::NumberIterator::next(a2);
    v13 = *a2;
    if (*a2
      && *(_BYTE *)(v13 + 91) == 1
      && (*(_WORD *)(v13 + 80) & 0xFFFE) == 2
      && (**(_WORD **)(v13 + 64) & 0xFC00) == 0xD800
      && (v14 = *(_QWORD *)(v13 + 8)) != 0
      && *(_BYTE *)(v14 + 91) == 1
      && (*(_WORD *)(v14 + 80) & 0xFFFE) == 2
      && (**(_WORD **)(v14 + 64) & 0xFC00) == 0xDC00)
    {
      *a2 = v14;
      v15 = 1;
      v13 = v14;
    }
    else
    {
      v15 = 0;
    }
    v16 = v12 + v11 + v15;
    if (a3)
    {
      while (1)
      {
        v17 = *(uint64_t **)(v13 + 8);
        if (v17 && *((_BYTE *)v17 + 91) == 1)
        {
          v18 = *((unsigned __int8 *)v17 + 90);
          if (v18 == 12)
          {
            v20 = *v17;
            if (v20 && *(_BYTE *)(v20 + 90) == 11)
              return (v9 - a1) >> 1;
          }
          else if (v18 == 11)
          {
            v19 = v17[1];
            if (v19)
            {
              if (*(_BYTE *)(v19 + 90) == 12)
                return (v9 - a1) >> 1;
            }
          }
        }
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5))
          return (v9 - a1) >> 1;
        v13 = *(_QWORD *)(*a2 + 8);
        *a2 = v13;
        v16 += (unint64_t)*(unsigned __int16 *)(v13 + 82) >> 1;
      }
    }
  }
  return (v9 - a1) >> 1;
}

_QWORD *std::function<CFRange ()(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*)>::operator=<CFRange (&)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*),void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &unk_1E2DF3278;
  v6[1] = a2;
  v7 = v6;
  std::__function::__value_func<CFRange ()(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t CoreNLP::`anonymous namespace'::calcRangeRandomAccess(uint64_t a1, unint64_t *a2, uint64_t a3, int a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _WORD *v19;
  uint64_t v20;
  unint64_t v22;
  uint64_t *v23;

  v6 = *a2;
  v7 = *(_QWORD *)(*a2 + 64);
  v8 = (v7 - a1) >> 1;
  if ((*(_QWORD *)&a4 & 0x810000) == 0
    && *(unsigned __int16 *)(*a2 + 80) >= 4u
    && *(_BYTE *)(v6 + 90) == 3
    && *(_WORD *)(v7 + 2) == 12288)
  {
    return v8;
  }
  v22 = *a2;
  v23 = (uint64_t *)v6;
  if (CoreNLP::NumberIterator::isDecimalMark((uint64_t *)v6) && (v9 = *(_QWORD *)v6, (v23 = (uint64_t *)v9) != 0))
    v10 = (unint64_t)*(unsigned __int16 *)(v9 + 80) >> 1;
  else
    v10 = 0;
  v11 = CoreNLP::NumberIterator::prev(&v23) + v10;
  if (CoreNLP::NumberIterator::isDecimalMark((uint64_t *)v6))
  {
    v12 = *(_QWORD *)(v6 + 8);
    v22 = v12;
    if (v12)
      v12 = (unint64_t)*(unsigned __int16 *)(v12 + 80) >> 1;
    v11 += v12;
  }
  if ((uint64_t)(CoreNLP::NumberIterator::next((uint64_t *)&v22) + v11) >= 1)
    return (v23[8] - a1) >> 1;
  v13 = *a2;
  if (*a2)
  {
    if (*(_BYTE *)(v13 + 91) == 1 && (*(_WORD *)(v13 + 80) & 0xFFFE) == 2)
    {
      v14 = *(_WORD **)(v13 + 64);
      if ((*v14 & 0xFC00) == 0xD800)
      {
        v15 = *(_QWORD *)(v13 + 8);
        if (v15)
        {
          if (*(_BYTE *)(v15 + 91) == 1
            && (*(_WORD *)(v15 + 80) & 0xFFFE) == 2
            && (**(_WORD **)(v15 + 64) & 0xFC00) == 0xDC00)
          {
            v16 = ((uint64_t)v14 - a1) >> 1;
            v17 = 1;
            goto LABEL_36;
          }
        }
      }
    }
  }
  v18 = *(_QWORD *)v13;
  if (!*(_QWORD *)v13)
  {
    v17 = 0;
    goto LABEL_35;
  }
  if (*(_BYTE *)(v18 + 91) != 1
    || (*(_WORD *)(v18 + 80) & 0xFFFE) != 2
    || (v19 = *(_WORD **)(v18 + 64), (*v19 & 0xFC00) != 0xD800)
    || *(_BYTE *)(v13 + 91) != 1
    || (*(_WORD *)(v13 + 80) & 0xFFFE) != 2)
  {
    v17 = 0;
LABEL_35:
    v16 = -1;
    goto LABEL_36;
  }
  v16 = -1;
  v20 = ((uint64_t)v19 - a1) >> 1;
  if ((**(_WORD **)(v13 + 64) & 0xFC00) == 0xDC00)
  {
    v16 = v20;
    v17 = 1;
  }
  else
  {
    v17 = 0;
  }
LABEL_36:
  if (((v16 != -1) & v17) != 0)
    return v16;
  return v8;
}

_QWORD *std::function<CFRange ()(unsigned short const*,mecab_node_t const**,BOOL,unsigned long)>::operator=<CFRange (&)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long),void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &unk_1E2DF3220;
  v6[1] = a2;
  v7 = v6;
  std::__function::__value_func<CFRange ()(unsigned short const*,mecab_node_t const**,BOOL,unsigned long)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t CoreNLP::`anonymous namespace'::setAttributes(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  *(_QWORD *)(a2 + 16) = result;
  if ((a3 & 0x80000) != 0)
  {
    if ((result & 0x80) != 0)
    {
      result ^= 0x40000080uLL;
      *(_QWORD *)(a2 + 16) = result;
    }
    if (*(_BYTE *)(a1 + 90) == 5 && *(_WORD *)(a1 + 80) && **(unsigned __int8 **)(a1 + 64) - 65 <= 0x19)
    {
      result |= 2uLL;
      *(_QWORD *)(a2 + 16) = result;
    }
    if ((result & 8) != 0)
      *(_QWORD *)(a2 + 16) = result & 0xFFFFFFFFFFFFFFCFLL ^ 0x38;
  }
  return result;
}

_QWORD *std::function<void ()(mecab_node_t const*,NLToken *,unsigned long)>::operator=<void (&)(mecab_node_t const*,NLToken *,unsigned long),void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &unk_1E2DF33D8;
  v6[1] = a2;
  v7 = v6;
  std::__function::__value_func<void ()(mecab_node_t const*,NLToken *,unsigned long)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t CoreNLP::mecab::GetJapanesePOS(uint64_t a1)
{
  int v1;
  unsigned int v3;

  v1 = *(unsigned __int16 *)(a1 + 88);
  if ((v1 - 12) < 3)
    return 1;
  if (v1 == 7)
    return 3;
  if (v1 == 26)
    return 14;
  if ((v1 - 8) < 3)
    return 10;
  if (v1 == 11)
    return 4;
  if ((unsigned __int16)(v1 - 15) < 4u)
    return 2;
  if ((v1 - 1) < 6)
    return 0;
  if ((v1 - 20) < 3)
    return 12;
  v3 = v1 - 19;
  if (v3 > 9)
    return 15;
  else
    return *(unsigned int *)&asc_191D41668[4 * (__int16)v3];
}

_QWORD *std::function<NLTokenizerPartOfSpeech ()(mecab_node_t const*)>::operator=<NLTokenizerPartOfSpeech (&)(mecab_node_t const*),void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &unk_1E2DF31C8;
  v6[1] = a2;
  v7 = v6;
  std::__function::__value_func<NLTokenizerPartOfSpeech ()(mecab_node_t const*)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

__CFString *CoreNLP::`anonymous namespace'::createChineseTranscription(uint64_t a1, uint64_t a2, int a3)
{
  const UniChar *v7;
  unsigned int v8;
  unsigned int v9;
  __CFString *v10;
  unint64_t v11;
  CFIndex v12;
  int v13;
  UniChar *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const UniChar *v19;
  int v20;
  CFStringRef v21;
  __CFString *MutableString;
  const UniChar *v23;
  void *v24;
  CFIndex v25;

  if (*(unsigned __int8 *)(a2 + 90) - 3 <= 2)
  v7 = (const UniChar *)operator new[]();
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, const UniChar *, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2, v7, 256);
  v9 = v8;
  if (v8 - 256 < 0xFFFFFF01)
    goto LABEL_4;
  if (*v7 != 42)
  {
    if ((a3 & 0x4080000) != 0x80000)
    {
      v23 = v7;
      v24 = (void *)v7;
      v12 = v8;
      v25 = v8;
LABEL_22:
      if ((a3 & 0x4080000) != 0)
      {
        v21 = CFStringCreateWithCharacters(0, v7, v12);
LABEL_24:
        v10 = (__CFString *)v21;
        goto LABEL_25;
      }
      goto LABEL_29;
    }
    v17 = operator new[]();
    v14 = (UniChar *)v17;
    v12 = 0;
    v18 = 2 * v9;
    v19 = v7;
    do
    {
      v20 = *v19;
      if ((v20 - 97) <= 0x19)
        *(_WORD *)(v17 + 2 * v12++) = v20;
      ++v19;
      v18 -= 2;
    }
    while (v18);
LABEL_20:
    v23 = v14;
    v24 = v14;
    v25 = v12;
    MEMORY[0x19401E970](v7, 0x1000C80BDFB0063);
    v7 = v14;
    goto LABEL_22;
  }
  v11 = *(unsigned __int16 *)(a2 + 80);
  v12 = v11 >> 1;
  v13 = *(unsigned __int8 *)(a2 + 90);
  if (v13 == 6)
  {
    v23 = *(const UniChar **)(a2 + 64);
    v24 = 0;
    v25 = v11 >> 1;
    MEMORY[0x19401E970](v7, 0x1000C80BDFB0063);
    if (!v23)
      goto LABEL_5;
    if ((a3 & 0x4080000) != 0)
    {
      v21 = CFStringCreateWithCharactersNoCopy(0, v23, v11 >> 1, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
      goto LABEL_24;
    }
LABEL_29:
    MutableString = CoreNLP::TranscriptionBuffer::createMutableString((CoreNLP::TranscriptionBuffer *)&v23);
    v10 = MutableString;
    if ((*(_BYTE *)(a2 + 90) & 0xFE) == 6)
    {
      if (!MutableString)
        goto LABEL_25;
      if (!CFStringTransform(MutableString, 0, CFSTR("Katakana; Latin; NFD"), 0))
        CFRelease(v10);
    }
    else if (!MutableString)
    {
      goto LABEL_25;
    }
    if (!CFStringTransform(v10, 0, CFSTR("NumericPinyin-Latin"), 0))
      CFRelease(v10);
    goto LABEL_25;
  }
  if (v13 == 7)
  {
    v14 = (UniChar *)operator new[]();
    memcpy(v14, *(const void **)(a2 + 64), *(unsigned __int16 *)(a2 + 80));
    if (v11 >= 2)
    {
      v15 = 0;
      do
      {
        v16 = v14[v15];
        if ((v16 - 12449) <= 0x55)
          v14[v15] = v16 - 96;
        ++v15;
      }
      while (v12 != v15);
    }
    goto LABEL_20;
  }
LABEL_4:
  v23 = 0;
  v24 = 0;
  v25 = 0;
  MEMORY[0x19401E970](v7, 0x1000C80BDFB0063);
LABEL_5:
  v10 = 0;
LABEL_25:
  CoreNLP::TranscriptionBuffer::~TranscriptionBuffer((CoreNLP::TranscriptionBuffer *)&v23);
  return v10;
}

void sub_191CA14E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E970](v1, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::mecab::GetSimplifiedChinesePOS(uint64_t a1)
{
  int v1;
  __int16 v2;
  unsigned int v4;
  unsigned int v5;

  v1 = *(unsigned __int16 *)(a1 + 88);
  v2 = v1 - 1;
  if ((v1 - 1) < 7 && ((0x4Du >> v2) & 1) != 0)
    return dword_191D41690[v2];
  if ((v1 & 0xFFFC) == 8)
    return 3;
  if (v1 == 12)
    return 8;
  if (v1 == 15)
    return 11;
  if ((v1 - 16) < 6)
    return 13;
  if (v1 == 27)
    return 12;
  if ((v1 - 37) < 0xA)
    return 0;
  if (v1 == 48)
    return 6;
  if ((v1 - 61) < 5)
    return 7;
  if ((v1 - 70) < 9)
    return 4;
  v4 = v1 - 79;
  if ((unsigned __int16)(v1 - 88) < 0x10u)
    v5 = 14;
  else
    v5 = 15;
  if (v4 >= 9)
    return v5;
  else
    return 1;
}

uint64_t CoreNLP::`anonymous namespace'::korean::calcRangeForward(uint64_t a1, uint64_t *a2, int a3, int a4, uint64_t a5)
{
  char v6;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a4;
  v10 = *(_QWORD *)(*a2 + 64);
  v11 = *(unsigned __int16 *)(*a2 + 80);
  v12 = v11 >> 1;
  if ((a4 & 0x10000) == 0 && (_DWORD)v12 == 2)
  {
    if (v11 >= 4 && *(_BYTE *)(*a2 + 90) == 3)
    {
      if (*(_WORD *)(v10 + 2) == 12288)
        v12 = 1;
      else
        v12 = 2;
    }
    else
    {
      v12 = 2;
    }
  }
  v13 = CoreNLP::NumberIterator::next(a2);
  v14 = *a2;
  if (*a2
    && *(_BYTE *)(v14 + 91) == 1
    && (*(_WORD *)(v14 + 80) & 0xFFFE) == 2
    && (**(_WORD **)(v14 + 64) & 0xFC00) == 0xD800
    && (v15 = *(_QWORD *)(v14 + 8)) != 0
    && *(_BYTE *)(v15 + 91) == 1
    && (*(_WORD *)(v15 + 80) & 0xFFFE) == 2
    && (**(_WORD **)(v15 + 64) & 0xFC00) == 0xDC00)
  {
    *a2 = v15;
    v16 = 1;
    v14 = v15;
  }
  else
  {
    v16 = 0;
  }
  v17 = v13 + v12 + v16;
  if (a3)
  {
    while (1)
    {
      v18 = *(uint64_t **)(v14 + 8);
      if (v18 && *((_BYTE *)v18 + 91) == 1)
      {
        v19 = *((unsigned __int8 *)v18 + 90);
        if (v19 == 12)
        {
          v21 = *v18;
          if (v21 && *(_BYTE *)(v21 + 90) == 11)
            return (v10 - a1) >> 1;
        }
        else if (v19 == 11)
        {
          v20 = v18[1];
          if (v20)
          {
            if (*(_BYTE *)(v20 + 90) == 12)
              return (v10 - a1) >> 1;
          }
        }
      }
      if ((v6 & 4) != 0)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5) & 1) == 0)
          return (v10 - a1) >> 1;
      }
      else if (!CoreNLP::mecab::KoreanWordConnector::connect(a1, v14))
      {
        return (v10 - a1) >> 1;
      }
      v14 = *(_QWORD *)(*a2 + 8);
      *a2 = v14;
      v17 += (unint64_t)*(unsigned __int16 *)(v14 + 82) >> 1;
    }
  }
  return (v10 - a1) >> 1;
}

uint64_t CoreNLP::`anonymous namespace'::korean::calcRangeRandomAccess(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t i;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;

  v7 = *a2;
  v8 = *(_QWORD *)(*a2 + 64);
  v9 = *(unsigned __int16 *)(*a2 + 80);
  v10 = v9 >> 1;
  if ((a4 & 0x10000) == 0 && (_DWORD)v10 == 2)
  {
    if (v9 >= 4 && *(_BYTE *)(v7 + 90) == 3)
    {
      if (*(_WORD *)(v8 + 2) == 12288)
        v10 = 1;
      else
        v10 = 2;
    }
    else
    {
      v10 = 2;
    }
  }
  v33 = *a2;
  v34 = (uint64_t *)v7;
  if (CoreNLP::NumberIterator::isDecimalMark((uint64_t *)v7) && (v11 = *(_QWORD *)v7, (v34 = (uint64_t *)v11) != 0))
    v12 = (unint64_t)*(unsigned __int16 *)(v11 + 80) >> 1;
  else
    v12 = 0;
  v13 = CoreNLP::NumberIterator::prev(&v34) + v12;
  if (CoreNLP::NumberIterator::isDecimalMark((uint64_t *)v7))
  {
    v14 = *(_QWORD *)(v7 + 8);
    v33 = v14;
    if (v14)
      v14 = (unint64_t)*(unsigned __int16 *)(v14 + 80) >> 1;
    v13 += v14;
  }
  if ((uint64_t)(CoreNLP::NumberIterator::next((uint64_t *)&v33) + v13) >= 1)
    return (v34[8] - a1) >> 1;
  v16 = (v8 - a1) >> 1;
  v17 = *a2;
  if (*a2
    && *(_BYTE *)(v17 + 91) == 1
    && (*(_WORD *)(v17 + 80) & 0xFFFE) == 2
    && (v18 = *(_QWORD *)(v17 + 64), (*(_WORD *)v18 & 0xFC00) == 0xD800)
    && (v19 = *(_QWORD *)(v17 + 8)) != 0
    && *(_BYTE *)(v19 + 91) == 1
    && (*(_WORD *)(v19 + 80) & 0xFFFE) == 2
    && (**(_WORD **)(v19 + 64) & 0xFC00) == 0xDC00)
  {
    v20 = (v18 - a1) >> 1;
    LOBYTE(v18) = 1;
  }
  else
  {
    v18 = *(_QWORD *)v17;
    if (*(_QWORD *)v17)
    {
      if (*(_BYTE *)(v18 + 91) == 1 && (*(_WORD *)(v18 + 80) & 0xFFFE) == 2)
      {
        v21 = *(_WORD **)(v18 + 64);
        if ((*v21 & 0xFC00) == 0xD800 && *(_BYTE *)(v17 + 91) == 1 && (*(_WORD *)(v17 + 80) & 0xFFFE) == 2)
        {
          v20 = -1;
          v18 = ((uint64_t)v21 - a1) >> 1;
          if ((**(_WORD **)(v17 + 64) & 0xFC00) == 0xDC00)
          {
            v20 = v18;
            LOBYTE(v18) = 1;
          }
          else
          {
            LOBYTE(v18) = 0;
          }
          goto LABEL_39;
        }
      }
      LOBYTE(v18) = 0;
    }
    v20 = -1;
  }
LABEL_39:
  v22 = (v20 != -1) & v18;
  if (v22)
    result = v20;
  else
    result = v16;
  if ((v22 & 1) == 0 && a3)
  {
    v23 = *(_QWORD *)v17;
    if (*(_QWORD *)v17)
    {
      while (1)
      {
        v24 = *(unsigned __int8 *)(v23 + 91);
        if ((v24 & 0xFE) == 2 || !*(_WORD *)(v23 + 80))
          break;
        if (v24 == 1)
        {
          v25 = *(unsigned __int8 *)(v23 + 90);
          if (v25 == 12)
          {
            if (*(_QWORD *)v23 && *(_BYTE *)(*(_QWORD *)v23 + 90) == 11)
              break;
          }
          else if (v25 == 11)
          {
            v26 = *(_QWORD *)(v23 + 8);
            if (v26)
            {
              if (*(_BYTE *)(v26 + 90) == 12)
                break;
            }
          }
        }
        if (CoreNLP::mecab::KoreanWordConnector::connect(a1, v23))
        {
          v16 = (*(_QWORD *)(v23 + 64) - a1) >> 1;
          v10 += (unint64_t)*(unsigned __int16 *)(v23 + 80) >> 1;
          v23 = *(_QWORD *)v23;
          if (v23)
            continue;
        }
        break;
      }
      v17 = *a2;
    }
    for (i = v10; ; i += v32)
    {
      v28 = *(uint64_t **)(v17 + 8);
      if (v28 && *((_BYTE *)v28 + 91) == 1)
      {
        v29 = *((unsigned __int8 *)v28 + 90);
        if (v29 == 12)
        {
          v31 = *v28;
          if (v31 && *(_BYTE *)(v31 + 90) == 11)
            return v16;
        }
        else if (v29 == 11)
        {
          v30 = v28[1];
          if (v30)
          {
            if (*(_BYTE *)(v30 + 90) == 12)
              return v16;
          }
        }
      }
      if (!CoreNLP::mecab::KoreanWordConnector::connect(a1, v17))
        return v16;
      v17 = *(_QWORD *)(*a2 + 8);
      *a2 = v17;
      if (v17)
        v32 = (unint64_t)*(unsigned __int16 *)(v17 + 80) >> 1;
      else
        v32 = 0;
    }
  }
  return result;
}

uint64_t CoreNLP::`anonymous namespace'::korean::setAttributes(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v6;

  v6 = result | 2;
  if ((a3 & 0x8800000) != 0)
    v6 = result & 0x1FFD;
  *(_QWORD *)(a2 + 16) = v6;
  return result;
}

__CFString *CoreNLP::`anonymous namespace'::createKoreanTranscription(uint64_t a1, uint64_t a2)
{
  __CFString *MutableString;
  __CFString *v3;
  _QWORD v5[3];

  v5[0] = *(_QWORD *)(a2 + 64);
  v5[1] = 0;
  v5[2] = (unint64_t)*(unsigned __int16 *)(a2 + 80) >> 1;
  MutableString = CoreNLP::TranscriptionBuffer::createMutableString((CoreNLP::TranscriptionBuffer *)v5);
  v3 = MutableString;
  if (MutableString && !CFStringTransform(MutableString, 0, (CFStringRef)*MEMORY[0x1E0C9B360], 0))
    CFRelease(v3);
  CoreNLP::TranscriptionBuffer::~TranscriptionBuffer((CoreNLP::TranscriptionBuffer *)v5);
  return v3;
}

void sub_191CA1C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CoreNLP::TranscriptionBuffer::~TranscriptionBuffer((CoreNLP::TranscriptionBuffer *)va);
  _Unwind_Resume(a1);
}

BOOL CoreNLP::mecab::isAlphaNumeric(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 90) & 0xFE) == 4;
}

uint64_t CoreNLP::mecab::isOutOfBMP(uint64_t a1)
{
  int v1;
  uint64_t v2;
  _BOOL4 v3;
  BOOL v4;

  v1 = *(unsigned __int8 *)(a1 + 90);
  if ((v1 - 11) > 1)
    goto LABEL_7;
  if (*(_BYTE *)(a1 + 91) == 1)
  {
    if (v1 == 12)
    {
      if (*(_QWORD *)a1)
      {
        v3 = *(unsigned __int8 *)(*(_QWORD *)a1 + 90) != 11;
LABEL_8:
        if (*(_BYTE *)(a1 + 90))
          v4 = !v3;
        else
          v4 = 0;
        if (v4)
          return *(_WORD *)(a1 + 80) == 2 && **(unsigned __int16 **)(a1 + 64) == 8205;
      }
    }
    else if (v1 == 11)
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 90) == 12)
        {
LABEL_7:
          v3 = 0;
          goto LABEL_8;
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 91) == 1)
    return 1;
  return *(_WORD *)(a1 + 80) == 2 && **(unsigned __int16 **)(a1 + 64) == 8205;
}

double CoreNLP::MeCabSubTokenizer::setString(CoreNLP::MeCabSubTokenizer *this, const CoreNLP::UStringPiece *a2, CFRange a3)
{
  CFIndex v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;

  *((_QWORD *)this + 34) = a2;
  *(CFRange *)((char *)this + 280) = a3;
  *((_QWORD *)this + 37) = 0;
  if (a3.location < 0 || a3.length < 1)
  {
    if (!a2)
      goto LABEL_22;
    v4 = *((_QWORD *)a2 + 2);
    v6 = 1;
    if (v4 < 0)
      goto LABEL_22;
  }
  else
  {
    v4 = *((_QWORD *)a2 + 2);
    if (v4 == -1)
      goto LABEL_22;
    v5 = a3.location >= v4 && a3.location + a3.length <= *((_QWORD *)a2 + 3) + v4;
    v6 = !v5;
    if (v4 < 0)
      goto LABEL_22;
  }
  if (*((uint64_t *)a2 + 3) >= 1)
  {
    v7 = *((_QWORD *)a2 + 1);
    if (!v7)
      v6 = 1;
    if (!v6)
    {
      v8 = (*(uint64_t (**)(_QWORD, uint64_t, CFIndex))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), v7 + 2 * a3.location - 2 * v4, a3.length);
      *((_QWORD *)this + 37) = v8;
      if (v8)
      {
        if ((*(_BYTE *)(v8 + 91) & 0xFE) == 2 || !*(_WORD *)(v8 + 80))
          *((_QWORD *)this + 37) = *(_QWORD *)(v8 + 8);
      }
    }
  }
LABEL_22:
  result = 0.0;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  v10 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = v10;
  *((_QWORD *)this + 47) = -1;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  return result;
}

_QWORD *CoreNLP::MeCabSubTokenizer::setOptions(_QWORD *this, uint64_t a2)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  BOOL v5;
  __int128 v6;

  v2 = this;
  this[55] = a2;
  if ((a2 & 0x2000000) != 0)
  {
    v3 = CoreNLP::quickCheckNFKD;
  }
  else
  {
    if ((a2 & 0x1000000) == 0)
      goto LABEL_6;
    v3 = CoreNLP::quickCheckNFKC;
  }
  *(_QWORD *)&v6 = v3;
  this = std::function<unsigned long ()(unsigned short const*,int)>::operator=<std::__bind<unsigned long (&)(unsigned short const*,int),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,void>(this + 6, &v6);
LABEL_6:
  v4 = v2[55];
  v5 = (v4 & 0x8000004) != 0 && (v4 & 0x880000) == 0;
  *((_BYTE *)v2 + 448) = v5;
  return this;
}

unint64_t CoreNLP::quickCheckNFKD(CoreNLP *this, const unsigned __int16 *a2)
{
  if (CoreNLP::getUNormalizer2(3))
    return (unint64_t)(unorm2_quickCheck() != 1) << 8;
  else
    return 256;
}

_QWORD *std::function<unsigned long ()(unsigned short const*,int)>::operator=<std::__bind<unsigned long (&)(unsigned short const*,int),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,void>(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = &unk_1E2DF3170;
  v7 = *a2;
  v8 = &v6;
  std::__function::__value_func<unsigned long ()(unsigned short const*,int)>::swap[abi:ne180100](&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

BOOL CoreNLP::quickCheckNFKC(CoreNLP *this, const unsigned __int16 *a2)
{
  return !CoreNLP::getUNormalizer2(5) || unorm2_quickCheck() != 1;
}

uint64_t CoreNLP::MeCabSubTokenizer::fastEnumerateTokensWithSpecifiedStop(uint64_t result, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v5 = *(_QWORD *)(result + 296);
  if (v5)
  {
    v9 = result;
    v19 = *(_QWORD *)(result + 296);
    v10 = result + 80;
    v11 = result + 144;
    v12 = result + 376;
    do
    {
      v13 = *(unsigned __int8 *)(v5 + 91);
      if ((v13 & 0xFE) != 2 && *(_WORD *)(v5 + 80))
      {
        v14 = *(_QWORD *)(v9 + 272);
        if (v14)
        {
          v15 = v13 == 2
              ? 0
              : (*(_QWORD *)(v5 + 64)
               - (*(_QWORD *)(v14 + 8)
                + 2 * *(_QWORD *)(v9 + 280))
               + 2 * *(_QWORD *)(v14 + 16)) >> 1;
          v16 = (unint64_t)*(unsigned __int16 *)(v5 + 80) >> 1;
        }
        else
        {
          v16 = 0;
          v15 = -1;
        }
        v17 = *(_QWORD *)(v9 + 280);
        if (v13 == 1 && *(_BYTE *)(v5 + 90) != 4)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(a5 + 16))(a5, v15 + v17, v16);
        }
        else
        {
          *(_QWORD *)(v9 + 304) = v5;
          *(_QWORD *)&v20 = *(_QWORD *)(v9 + 280)
                          + std::function<CFRange ()(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*)>::operator()(v10, *(_QWORD *)(v14 + 8) + 2 * v17 - 2 * *(_QWORD *)(v14 + 16), (uint64_t)&v19, *(_BYTE *)(v9 + 448), *(_QWORD *)(v9 + 440), *(_QWORD *)(v9 + 464));
          *((_QWORD *)&v20 + 1) = v18;
          std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>::operator()(v11, v19, (uint64_t)&v20, *(_QWORD *)(v9 + 440));
          *(_OWORD *)v12 = v20;
          *(_QWORD *)(v12 + 16) = v21;
          result = (*(uint64_t (**)(uint64_t, __int128 *, _BYTE *))(a4 + 16))(a4, &v20, a3);
        }
        if (*a3)
          break;
      }
      v5 = *(_QWORD *)(v19 + 8);
      v19 = v5;
    }
    while (v5);
  }
  return result;
}

uint64_t CoreNLP::MeCabSubTokenizer::getRange(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 272);
  if (!v2)
    return -1;
  if (*(_BYTE *)(a2 + 91) == 2)
    return 0;
  return (*(_QWORD *)(a2 + 64) - (*(_QWORD *)(v2 + 8) + 2 * *(_QWORD *)(a1 + 280)) + 2 * *(_QWORD *)(v2 + 16)) >> 1;
}

uint64_t std::function<CFRange ()(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v11 = a3;
  v12 = a2;
  v10 = a4;
  v8 = a6;
  v9 = a5;
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, char *, uint64_t *, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v12, &v11, &v10, &v9, &v8);
}

char *CoreNLP::MeCabSubTokenizer::goToTokenAtIndex(CoreNLP::MeCabSubTokenizer *this, unint64_t a2, uint64_t a3, CFRange *a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  int64_t NodeLocation;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t SpaceRange;
  uint64_t v26;
  uint64_t v28;
  uint64_t *v29;
  CFIndex v30;
  uint64_t *v31;

  if (a4)
    *a4 = (CFRange)xmmword_191D40610;
  v6 = *((_QWORD *)this + 35);
  v7 = a3 - v6;
  if (a3 < v6 || !*((_QWORD *)this + 34) || *((_QWORD *)this + 36) + v6 <= a3)
    return 0;
  v8 = (char *)this + 376;
  v9 = *((_QWORD *)this + 47);
  if (v9 > a3 || *((_QWORD *)this + 48) + v9 <= a3)
  {
    v10 = (uint64_t **)*((_QWORD *)this + 37);
    if (!v10)
      return 0;
    v11 = *((_QWORD *)this + 55) & 0x10004;
    if (!v11)
      v10 = (uint64_t **)((char *)this + 296);
    v12 = *v10;
    v31 = v12;
    if (!v12)
    {
LABEL_30:
      if (!v11)
        return 0;
      if (!CoreNLP::MeCabSubTokenizer::hasSpace((uint64_t)this, v12))
        return 0;
      CoreNLP::MeCabSubTokenizer::seekSpace((uint64_t)this, v12);
      v20 = CoreNLP::mecab::SpaceIterator::seekTo((CoreNLP::mecab::SpaceView **)this + 44, v7);
      if (v20 == -1)
        return 0;
LABEL_33:
      *((_QWORD *)this + 47) = *((_QWORD *)this + 35) + v20;
      *((_QWORD *)this + 48) = v21;
      *((_QWORD *)this + 49) = 2048;
      return v8;
    }
    while (1)
    {
      v13 = *((unsigned __int8 *)v12 + 91);
      if (v13 != 2)
      {
        if (v13 == 3)
          goto LABEL_30;
        v14 = CoreNLP::MeCabSubTokenizer::skipNonWord((uint64_t)this, (uint64_t)v12);
        v12 = v31;
        if (!v14)
        {
          if (v31)
            v15 = (unint64_t)*((unsigned __int16 *)v31 + 40) >> 1;
          else
            v15 = 0;
          v16 = (unint64_t)*((unsigned __int16 *)v31 + 41) >> 1;
          NodeLocation = CoreNLP::MeCabSubTokenizer::getNodeLocation((uint64_t)this, v31);
          v18 = NodeLocation;
          if (v11)
          {
            if (NodeLocation <= v7 && v7 < NodeLocation + v16 - v15)
            {
              v19 = v31;
              if (CoreNLP::MeCabSubTokenizer::hasSpace((uint64_t)this, v31))
              {
                CoreNLP::MeCabSubTokenizer::seekSpace((uint64_t)this, v19);
                v20 = CoreNLP::mecab::SpaceIterator::seekTo((CoreNLP::mecab::SpaceView **)this + 44, v7);
                if (v20 != -1)
                  goto LABEL_33;
              }
            }
          }
          v22 = *((_QWORD *)this + 55);
          if ((v22 & 4) != 0)
          {
            v23 = std::function<CFRange ()(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*)>::operator()((uint64_t)this + 80, *(_QWORD *)(*((_QWORD *)this + 34) + 8)+ 2 * *((_QWORD *)this + 35)- 2 * *(_QWORD *)(*((_QWORD *)this + 34) + 16), (uint64_t)&v31, *((_BYTE *)this + 448), v22, *((_QWORD *)this + 58));
            if (v7 < v23)
              return 0;
            v12 = v31;
            if (v23 + v24 > v7)
            {
              *((_QWORD *)this + 47) = *((_QWORD *)this + 35) + v23;
              *((_QWORD *)this + 48) = v24;
              std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>::operator()((uint64_t)this + 144, (uint64_t)v12, (uint64_t)this + 376, *((_QWORD *)this + 55));
              *((_QWORD *)this + 38) = v31;
              return v8;
            }
          }
          else
          {
            if (v18 <= v7 && v7 < v18 + v16)
            {
              if (!v11 && CoreNLP::MeCabSubTokenizer::hasSpace((uint64_t)this, v31))
              {
                SpaceRange = CoreNLP::MeCabSubTokenizer::getSpaceRange((uint64_t)this, v31);
                if (SpaceRange <= v7 && SpaceRange + v26 > v7)
                  return 0;
              }
              *((_QWORD *)this + 47) = *((_QWORD *)this + 35)
                                     + std::function<CFRange ()(unsigned short const*,mecab_node_t const**,BOOL,unsigned long)>::operator()((uint64_t)this + 112, *(_QWORD *)(*((_QWORD *)this + 34) + 8)+ 2 * *((_QWORD *)this + 35)- 2 * *(_QWORD *)(*((_QWORD *)this + 34) + 16), (uint64_t)&v31, *((_BYTE *)this + 448), *((_QWORD *)this + 55));
              *((_QWORD *)this + 48) = v28;
              std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>::operator()((uint64_t)this + 144, (uint64_t)v31, (uint64_t)this + 376, *((_QWORD *)this + 55));
              v29 = v31;
              *((_QWORD *)this + 38) = v31;
              if (a4 && *((_BYTE *)v29 + 91) == 1)
              {
                a4->location = CoreNLP::MeCabSubTokenizer::makeUnhandledRange((uint64_t)this, v29);
                a4->length = v30;
              }
              return v8;
            }
            v12 = v31;
          }
        }
      }
      v12 = (uint64_t *)v12[1];
      v31 = v12;
      if (!v12)
        goto LABEL_30;
    }
  }
  return v8;
}

BOOL CoreNLP::MeCabSubTokenizer::skipNonWord(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned __int16 *v5;
  int v6;
  UChar32 v7;
  _BOOL4 v8;
  uint64_t v9;
  _BOOL8 result;
  uint64_t v11;
  int v12;
  int v14;
  int v15;
  char v18;
  _BOOL4 v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned __int16 *v23;
  int v24;
  unsigned int v25;

  if (*(_BYTE *)(a2 + 90) == 3)
  {
    v4 = -56613888;
    v5 = *(unsigned __int16 **)(a2 + 64);
    v6 = *(unsigned __int16 *)(a2 + 80);
    if (v6 != 2)
    {
      if (v6 != 4)
      {
        v7 = 0;
LABEL_9:
        v8 = u_ispunct(v7) != 0;
        goto LABEL_10;
      }
      v4 = v5[1] - 56613888;
    }
    v7 = *v5;
    if ((v7 & 0xF800) == 0xD800)
      v7 = v4 + (v7 << 10);
    goto LABEL_9;
  }
  v8 = 0;
LABEL_10:
  v9 = *(_QWORD *)(a1 + 440);
  if ((v9 & 0x10004) != 0)
    return 0;
  v11 = *(_QWORD *)(a2 + 8);
  if (v11
    && *(_BYTE *)(v11 + 91) != 3
    && *(unsigned __int16 *)(v11 + 82) == *(unsigned __int16 *)(v11 + 80)
    && *(_WORD *)(a2 + 80) == 2
    && (**(_WORD **)(a2 + 64) & 0xFFFD) == 0x2C)
  {
    v12 = *(unsigned __int8 *)(v11 + 90);
    if (v12 == 4 || v12 == 8)
      return 0;
  }
  v14 = *(unsigned __int16 *)(a2 + 80);
  if (v14 == 2)
  {
    v15 = **(unsigned __int16 **)(a2 + 64);
    v18 = *(_BYTE *)(a2 + 90) == 3 && v15 == 12288 || v15 == 160 || v8;
    if ((v18 & 1) != 0)
      goto LABEL_35;
  }
  else if (v8)
  {
    goto LABEL_35;
  }
  v21 = *(unsigned __int16 *)(a2 + 88);
  v22 = *(_DWORD *)(a1 + 400);
  if (v22 == 1)
  {
    if (v21 <= 0x1C)
      return 0;
    goto LABEL_35;
  }
  if (v22 != 3)
  {
    if (v22 == 2 && v21 - 88 < 0x11)
      goto LABEL_35;
    return 0;
  }
  if (v21 - 39 < 5)
  {
LABEL_35:
    v19 = 1;
    goto LABEL_36;
  }
  v23 = *(unsigned __int16 **)(a2 + 64);
  if (v14 == 6)
  {
    if (*v23 == 58 && v23[1] == 47)
    {
      v19 = v23[2] == 47;
      goto LABEL_36;
    }
    return 0;
  }
  if (v14 != 2)
    return 0;
  v24 = *v23;
  v25 = v24 - 33;
  v19 = (v24 - 58) < 7;
  if (v25 < 0xF)
    v19 = 1;
LABEL_36:
  if (*(_DWORD *)(a1 + 400) != 1 || v9 || !v19)
    return v19 && ((v9 & 0x80000) == 0 || !v8 || *(_WORD *)(a2 + 80) != 2 || **(_WORD **)(a2 + 64) != 45);
  if (*(_WORD *)(a2 + 80) != 2)
    return 1;
  result = 0;
  v20 = **(unsigned __int16 **)(a2 + 64);
  if ((v20 - 40) >= 2 && (v20 - 65288) >= 2)
    return 1;
  return result;
}

unint64_t CoreNLP::MeCabSubTokenizer::getNodeLocation(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  if (a2 && (v2 = *a2) != 0 && *(_BYTE *)(v2 + 91) != 2)
    return ((*(_QWORD *)(v2 + 64)
           - (*(_QWORD *)(*(_QWORD *)(a1 + 272) + 8)
            + 2 * *(_QWORD *)(a1 + 280))
           + 2 * *(_QWORD *)(*(_QWORD *)(a1 + 272) + 16)) >> 1)
         + ((unint64_t)*(unsigned __int16 *)(v2 + 80) >> 1);
  else
    return 0;
}

BOOL CoreNLP::MeCabSubTokenizer::hasSpace(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  if (*((unsigned __int16 *)a2 + 41) != *((unsigned __int16 *)a2 + 40))
    return 1;
  if (*((_BYTE *)a2 + 91) == 3)
  {
    v2 = *a2;
    if (*a2)
    {
      if (*(_BYTE *)(v2 + 91) != 2)
        return ((unint64_t)*(unsigned __int16 *)(v2 + 80) >> 1)
             + ((*(_QWORD *)(v2 + 64)
               - (*(_QWORD *)(*(_QWORD *)(a1 + 272) + 8)
                + 2 * *(_QWORD *)(a1 + 280))
               + 2 * *(_QWORD *)(*(_QWORD *)(a1 + 272) + 16)) >> 1) != 0;
    }
  }
  return 0;
}

unint64_t CoreNLP::MeCabSubTokenizer::getSpaceRange(uint64_t a1, uint64_t *a2)
{
  return CoreNLP::MeCabSubTokenizer::getNodeLocation(a1, a2);
}

uint64_t std::function<CFRange ()(unsigned short const*,mecab_node_t const**,BOOL,unsigned long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v9 = a3;
  v8 = a4;
  v7 = a5;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, char *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v10, &v9, &v8, &v7);
}

uint64_t CoreNLP::MeCabSubTokenizer::makeUnhandledRange(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  _BOOL4 v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  char v16;
  _WORD *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;

  v2 = *((unsigned __int8 *)a2 + 90);
  if ((v2 - 11) > 1)
  {
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (*((_BYTE *)a2 + 91) != 1)
    goto LABEL_13;
  if (v2 != 12)
  {
    if (v2 != 11)
      goto LABEL_15;
    v3 = a2[1];
    if (!v3 || *(_BYTE *)(v3 + 90) != 12)
      goto LABEL_15;
    goto LABEL_7;
  }
  if (!*a2)
    goto LABEL_15;
  v4 = *(unsigned __int8 *)(*a2 + 90) != 11;
LABEL_8:
  if (*((_BYTE *)a2 + 90))
    v5 = !v4;
  else
    v5 = 0;
  if (v5 || *((_BYTE *)a2 + 91) != 1)
  {
LABEL_13:
    if (*((_WORD *)a2 + 40) != 2 || *(_WORD *)a2[8] != 8205)
      return -1;
  }
LABEL_15:
  v6 = *(_QWORD *)(a1 + 272);
  if (v6)
  {
    if (*((_BYTE *)a2 + 91) == 2)
      v7 = 0;
    else
      v7 = (a2[8] - (*(_QWORD *)(v6 + 8) + 2 * *(_QWORD *)(a1 + 280)) + 2 * *(_QWORD *)(v6 + 16)) >> 1;
    v9 = (unint64_t)*((unsigned __int16 *)a2 + 40) >> 1;
  }
  else
  {
    v9 = 0;
    v7 = -1;
  }
  v10 = a2;
  do
  {
    v11 = v9;
    v10 = (uint64_t *)v10[1];
    if (!v10)
      break;
    v12 = *((unsigned __int8 *)v10 + 91);
    if (v12 == 3)
      break;
    v13 = *((unsigned __int8 *)v10 + 90);
    if ((v13 - 11) > 1)
      goto LABEL_31;
    if (v12 != 1)
      goto LABEL_39;
    if (v13 != 12)
    {
      if (v13 != 11)
        goto LABEL_37;
      v14 = v10[1];
      if (!v14 || *(_BYTE *)(v14 + 90) != 12)
        goto LABEL_37;
LABEL_31:
      v15 = 0;
      goto LABEL_32;
    }
    if (!*v10)
      goto LABEL_37;
    v15 = *(_BYTE *)(*v10 + 90) != 11;
LABEL_32:
    if (*((_BYTE *)v10 + 90))
      v16 = v15;
    else
      v16 = 1;
    if (v12 == 1 && (v16 & 1) != 0)
    {
LABEL_37:
      if (!v6)
        goto LABEL_46;
      v17 = (_WORD *)v10[8];
      v18 = *((unsigned __int16 *)v10 + 40);
LABEL_44:
      v19 = ((uint64_t)&v17[*(_QWORD *)(v6 + 16)] - *(_QWORD *)(v6 + 8) + -2 * *(_QWORD *)(a1 + 280)) >> 1;
      goto LABEL_45;
    }
LABEL_39:
    if (*((_WORD *)v10 + 40) != 2)
      break;
    v17 = (_WORD *)v10[8];
    if (*v17 != 8205)
      break;
    if (!v6)
    {
LABEL_46:
      v20 = 0;
      v19 = -1;
      goto LABEL_47;
    }
    v18 = 2;
    if (v12 != 2)
      goto LABEL_44;
    v19 = 0;
LABEL_45:
    v20 = v18 >> 1;
LABEL_47:
    v9 = v20 + v11;
  }
  while (v19 == v11 + v7);
  while (2)
  {
    v21 = v11;
    v22 = v7;
    a2 = (uint64_t *)*a2;
    if (a2)
    {
      v23 = *((unsigned __int8 *)a2 + 91);
      if (v23 != 2)
      {
        v24 = *((unsigned __int8 *)a2 + 90);
        if ((v24 - 11) > 1)
          goto LABEL_59;
        if (v23 == 1)
        {
          if (v24 != 12)
          {
            if (v24 == 11)
            {
              v25 = a2[1];
              if (v25)
              {
                if (*(_BYTE *)(v25 + 90) == 12)
                {
LABEL_59:
                  v26 = 0;
                  goto LABEL_60;
                }
              }
            }
            goto LABEL_67;
          }
          if (!*a2)
            goto LABEL_67;
          v26 = *(_BYTE *)(*a2 + 90) != 11;
LABEL_60:
          v27 = !*((_BYTE *)a2 + 90) || v26;
          if (v23 == 1 && v27)
          {
LABEL_67:
            if (v6)
            {
              v7 = (a2[8] - (*(_QWORD *)(v6 + 8) + 2 * *(_QWORD *)(a1 + 280)) + 2 * *(_QWORD *)(v6 + 16)) >> 1;
              v28 = (unint64_t)*((unsigned __int16 *)a2 + 40) >> 1;
            }
            else
            {
              v28 = 0;
              v7 = -1;
            }
            v29 = v7 + v28;
            v11 = v28 + v21;
            if (v22 != v29)
              return *(_QWORD *)(a1 + 280) + v22;
            continue;
          }
        }
        if (*((_WORD *)a2 + 40) != 2 || *(_WORD *)a2[8] != 8205)
          return *(_QWORD *)(a1 + 280) + v22;
        goto LABEL_67;
      }
    }
    return *(_QWORD *)(a1 + 280) + v22;
  }
}

uint64_t CoreNLP::MeCabSubTokenizer::copyTranscription(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;

  if (a2
    && (v6 = a1[38]) != 0
    && a1[47] == *(_QWORD *)a2
    && a1[48] == *(_QWORD *)(a2 + 8)
    && a1[5]
    && (*(_BYTE *)(a2 + 17) & 8) == 0)
  {
    return std::function<__CFString const* ()(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL)>::operator()((uint64_t)(a1 + 2), a1[1], v6, a3, a4);
  }
  else
  {
    return 0;
  }
}

uint64_t std::function<__CFString const* ()(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  v8 = a4;
  v9 = a3;
  v7 = a5;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *, char *))(*(_QWORD *)v5 + 48))(v5, &v10, &v9, &v8, &v7);
}

_WORD *CoreNLP::MeCabSubTokenizer::getTranscriptionCharactersPtrOfCurrentToken(uint64_t a1, _QWORD *a2, int a3, unint64_t *a4)
{
  int v4;

  if (!a2)
    return 0;
  if (!a4)
    return 0;
  if (*(_QWORD *)(a1 + 376) != *a2)
    return 0;
  if (*(_QWORD *)(a1 + 384) != a2[1])
    return 0;
  *a4 = 0;
  if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 304) + 90) - 3 < 3)
    return 0;
  v4 = *(_DWORD *)(a1 + 400);
  if ((v4 - 1) <= 3
    && *(_QWORD *)(a1 + 408) + 256 >= (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 424) - *(_QWORD *)(a1 + 416)) >> 1))
  {
    return 0;
  }
  if ((v4 - 2) < 3)
    return (_WORD *)CoreNLP::MeCabSubTokenizer::getChineseTranscriptionCharactersPtrOfCurrentToken((CoreNLP::MeCabSubTokenizer *)a1, a3, a4);
  if (v4 == 1)
    return CoreNLP::MeCabSubTokenizer::getJapaneseTranscriptionCharactersPtrOfCurrentToken((CoreNLP::MeCabSubTokenizer *)a1, a4);
  else
    return 0;
}

_WORD *CoreNLP::MeCabSubTokenizer::getJapaneseTranscriptionCharactersPtrOfCurrentToken(CoreNLP::MeCabSubTokenizer *this, unint64_t *a2)
{
  uint64_t v4;
  int v5;
  _WORD *result;
  int v7;

  v4 = *((_QWORD *)this + 51);
  v5 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1), *((_QWORD *)this + 38), *((_QWORD *)this + 52) + 2 * v4, 256);
  if ((v5 - 256) < 0xFFFFFF01)
    return 0;
  v7 = v5;
  result = (_WORD *)(*((_QWORD *)this + 52) + 2 * v4);
  if (*result == 42)
    return (_WORD *)CoreNLP::MeCabSubTokenizer::getTranscriptionPtrForNoReadingNode((uint64_t)this, *((_QWORD *)this + 38), a2);
  *a2 = v7;
  *((_QWORD *)this + 51) += v7;
  return result;
}

uint64_t CoreNLP::MeCabSubTokenizer::getChineseTranscriptionCharactersPtrOfCurrentToken(CoreNLP::MeCabSubTokenizer *this, int a2, unint64_t *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unsigned __int16 *v16;
  int v17;

  v6 = *((_QWORD *)this + 51);
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1), *((_QWORD *)this + 38), *((_QWORD *)this + 52) + 2 * v6, 256);
  if ((v7 - 256) < 0xFFFFFF01)
    return 0;
  v9 = *((_QWORD *)this + 52);
  if (*(_WORD *)(v9 + 2 * v6) == 42)
    return CoreNLP::MeCabSubTokenizer::getTranscriptionPtrForNoReadingNode((uint64_t)this, *((_QWORD *)this + 38), a3);
  v10 = v7;
  *a3 = v7;
  if ((a2 & 0x4000000) == 0)
  {
    if (!*((_QWORD *)this + 57))
    {
      v11 = operator new[]();
      v12 = *((_QWORD *)this + 57);
      *((_QWORD *)this + 57) = v11;
      if (v12)
        MEMORY[0x19401E970](v12, 0x1000C80BDFB0063);
    }
    v13 = *((_QWORD *)this + 51) + v10;
    v14 = (void *)(*((_QWORD *)this + 52) + 2 * v6);
    if (v6 == v13)
    {
      v10 = 0;
    }
    else
    {
      v10 = 0;
      v15 = 2 * v13 - 2 * v6;
      v16 = (unsigned __int16 *)(*((_QWORD *)this + 52) + 2 * v6);
      do
      {
        v17 = *v16;
        if ((v17 - 97) <= 0x19)
          *(_WORD *)(*((_QWORD *)this + 57) + 2 * v10++) = v17;
        ++v16;
        v15 -= 2;
      }
      while (v15);
    }
    memcpy(v14, *((const void **)this + 57), 2 * v10);
    *a3 = v10;
    v9 = *((_QWORD *)this + 52);
  }
  *((_QWORD *)this + 51) += v10;
  return v9 + 2 * v6;
}

uint64_t CoreNLP::MeCabSubTokenizer::getTranscriptionPtrForNoReadingNode(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  _WORD *v9;
  unint64_t v10;
  int v11;

  if (a2)
    v5 = (unint64_t)*(unsigned __int16 *)(a2 + 80) >> 1;
  else
    v5 = 0;
  v6 = *(unsigned __int8 *)(a2 + 90);
  if (v6 == 7)
  {
    v8 = *(_QWORD *)(a1 + 408);
    memcpy((void *)(*(_QWORD *)(a1 + 416) + 2 * v8), *(const void **)(a2 + 64), *(unsigned __int16 *)(a2 + 80));
    result = *(_QWORD *)(a1 + 416) + 2 * v8;
    if (v5)
    {
      v9 = (_WORD *)(*(_QWORD *)(a1 + 416) + 2 * v8);
      v10 = v5;
      do
      {
        v11 = (unsigned __int16)*v9;
        if ((v11 - 12449) <= 0x55)
          *v9 = v11 - 96;
        ++v9;
        --v10;
      }
      while (v10);
    }
    *a3 = v5;
    *(_QWORD *)(a1 + 408) += v5;
  }
  else if (v6 == 6)
  {
    *a3 = v5;
    return *(_QWORD *)(a2 + 64);
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t CoreNLP::MeCabSubTokenizer::getPartOfSpeech(CoreNLP::MeCabSubTokenizer *this)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *((_QWORD *)this + 25);
  if (!v2)
    return 15;
  v4 = *((_QWORD *)this + 38);
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v4);
}

char *CoreNLP::MeCabSubTokenizer::getNextToken(CoreNLP::MeCabSubTokenizer *this, CFRange *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  CFIndex Range;
  CFIndex v24;
  uint64_t v25;
  CoreNLP::MeCabSubTokenizer *v27;
  _QWORD v28[3];
  _QWORD *v29;
  _BYTE v30[24];
  _BYTE *v31;
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a2)
    *a2 = (CFRange)xmmword_191D40610;
  v27 = this;
  v4 = (uint64_t *)((char *)this + 304);
  v5 = *((_QWORD *)this + 39);
  if (!v5)
  {
    v9 = *((_QWORD *)this + 38);
    if (v9)
      v10 = (uint64_t *)(v9 + 8);
    else
      v10 = (uint64_t *)((char *)this + 296);
    v5 = *v10;
    if (!*v10)
    {
LABEL_17:
      v7 = 0;
      *v4 = 0;
      return v7;
    }
    while (CoreNLP::MeCabSubTokenizer::skipNonWord((uint64_t)this, v5))
    {
      v5 = *(_QWORD *)(v5 + 8);
      if (!v5)
        goto LABEL_17;
    }
  }
  *v4 = v5;
  v6 = *(unsigned __int8 *)(v5 + 91);
  if (v6 == 2)
    return 0;
  if ((*((_DWORD *)this + 110) & 0x10004) == 0)
    goto LABEL_19;
  if (*((_QWORD *)this + 39) != v5 && CoreNLP::MeCabSubTokenizer::hasSpace((uint64_t)this, (uint64_t *)v5))
    CoreNLP::MeCabSubTokenizer::seekSpace((uint64_t)this, *((uint64_t **)this + 38));
  if (*((_QWORD *)this + 46) >= *(_QWORD *)(*((_QWORD *)this + 44) + 24))
  {
    *((_QWORD *)this + 39) = 0;
    v6 = *(unsigned __int8 *)(*((_QWORD *)this + 38) + 91);
LABEL_19:
    if (v6 == 3)
      return 0;
    if (!a2)
      goto LABEL_51;
    if ((*((_BYTE *)this + 442) & 8) == 0)
    {
      v28[0] = &unk_1E2DF3328;
      v28[1] = CoreNLP::mecab::isOutOfBMP;
      v29 = v28;
      v11 = CoreNLP::MeCabSubTokenizer::combineTokens(this, &a2->location, (uint64_t)v28);
      v12 = v29;
      if (v29 == v28)
      {
        v13 = 4;
        v12 = v28;
      }
      else
      {
        if (!v29)
          goto LABEL_47;
        v13 = 5;
      }
      (*(void (**)(_QWORD *))(*v12 + 8 * v13))(v12);
LABEL_47:
      if ((v11 & 1) == 0)
        goto LABEL_48;
LABEL_51:
      v7 = (char *)this + 376;
      *((_QWORD *)this + 47) = *((_QWORD *)this + 35)
                             + std::function<CFRange ()(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*)>::operator()((uint64_t)this + 80, *(_QWORD *)(*((_QWORD *)this + 34) + 8)+ 2 * *((_QWORD *)this + 35)- 2 * *(_QWORD *)(*((_QWORD *)this + 34) + 16), (uint64_t)this + 304, *((_BYTE *)this + 448), *((_QWORD *)this + 55), *((_QWORD *)this + 58));
      *((_QWORD *)this + 48) = v25;
      std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>::operator()((uint64_t)this + 144, *((_QWORD *)this + 38), (uint64_t)this + 376, *((_QWORD *)this + 55));
      CoreNLP::MeCabSubTokenizer::checkNodeIsNormalized((uint64_t)this, *((_QWORD *)this + 38));
      return v7;
    }
    v14 = *((_QWORD *)this + 30);
    v15 = *((_QWORD *)this + 31);
    if (v14 == v15)
    {
LABEL_48:
      if ((*((_BYTE *)this + 440) & 4) == 0)
      {
        v22 = *v4;
        if (CoreNLP::MeCabSubTokenizer::getNextToken(CFRange *)::$_0::operator()((uint64_t)&v27, *v4))
        {
          Range = CoreNLP::MeCabSubTokenizer::getRange((uint64_t)this, v22);
          a2->location = Range;
          a2->length = v24;
          a2->location = *((_QWORD *)this + 35) + Range;
        }
      }
      goto LABEL_51;
    }
    while (1)
    {
      std::__function::__value_func<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>::__value_func[abi:ne180100]((uint64_t)v32, v14);
      v16 = (uint64_t)v33;
      if (!v33)
        goto LABEL_30;
      if (v33 != v32)
        break;
      v31 = v30;
      (*(void (**)(_QWORD *, _BYTE *))(v32[0] + 24))(v32, v30);
LABEL_32:
      v17 = CoreNLP::MeCabSubTokenizer::combineTokens(this, &a2->location, (uint64_t)v30);
      v18 = v31;
      if (v31 == v30)
      {
        v18 = v30;
        v19 = 4;
      }
      else
      {
        if (!v31)
          goto LABEL_37;
        v19 = 5;
      }
      (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
LABEL_37:
      v20 = v33;
      if (v33 == v32)
      {
        v20 = v32;
        v21 = 4;
        goto LABEL_41;
      }
      if (v33)
      {
        v21 = 5;
LABEL_41:
        (*(void (**)(_QWORD *))(*v20 + 8 * v21))(v20);
      }
      if ((v17 & 1) != 0)
        goto LABEL_51;
      v14 += 32;
      if (v14 == v15)
        goto LABEL_48;
    }
    v16 = (*(uint64_t (**)(_QWORD *))(*v33 + 16))(v33);
LABEL_30:
    v31 = (_BYTE *)v16;
    goto LABEL_32;
  }
  v7 = (char *)this + 376;
  *((_QWORD *)this + 47) = *((_QWORD *)this + 35)
                         + CoreNLP::mecab::SpaceIterator::next((CoreNLP::MeCabSubTokenizer *)((char *)this + 352));
  *((_QWORD *)this + 48) = v8;
  *((_QWORD *)this + 49) = 2048;
  return v7;
}

void sub_191CA3324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a13;
  if (a13 == v21)
  {
    v24 = 4;
    v23 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

unint64_t CoreNLP::MeCabSubTokenizer::seekSpace(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 312) = a2;
  result = CoreNLP::MeCabSubTokenizer::getSpaceRange(a1, a2);
  if (result == -1
    || (result & 0x8000000000000000) != 0
    || (v5 = *(_QWORD *)(a1 + 288), (uint64_t)(result + v4) > v5))
  {
    *(_OWORD *)(a1 + 320) = 0u;
    *(_OWORD *)(a1 + 336) = 0u;
  }
  else
  {
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8)
                          + 2 * *(_QWORD *)(a1 + 280)
                          - 2 * *(_QWORD *)(*(_QWORD *)(a1 + 272) + 16);
    *(_QWORD *)(a1 + 328) = v5;
    *(_QWORD *)(a1 + 336) = result;
    *(_QWORD *)(a1 + 344) = result + v4;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + 16);
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = v6;
  return result;
}

uint64_t CoreNLP::mecab::SpaceIterator::next(CoreNLP::mecab::SpaceIterator *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  if (CoreNLP::mecab::SpaceView::isCRLF(*(CoreNLP::mecab::SpaceView **)this, *((_QWORD *)this + 2)))
  {
    v2 = *((_QWORD *)this + 2);
    v3 = v2 + 2;
    result = *((_QWORD *)this + 1) + v2;
  }
  else
  {
    v5 = *((_QWORD *)this + 2);
    v3 = v5 + 1;
    result = v5 + *((_QWORD *)this + 1);
  }
  *((_QWORD *)this + 2) = v3;
  return result;
}

uint64_t CoreNLP::MeCabSubTokenizer::combineTokens(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a1[38];
  v4 = *(_QWORD *)(a3 + 24);
  if (!v4)
LABEL_27:
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v17);
  if ((_DWORD)result)
  {
    v8 = a1[38];
    v9 = a1[34];
    if (v9)
    {
      if (*(_BYTE *)(v8 + 91) == 2)
        v10 = 0;
      else
        v10 = (*(_QWORD *)(v8 + 64) - (*(_QWORD *)(v9 + 8) + 2 * a1[35]) + 2 * *(_QWORD *)(v9 + 16)) >> 1;
      v9 = (unint64_t)*(unsigned __int16 *)(v8 + 80) >> 1;
    }
    else
    {
      v10 = -1;
    }
    v11 = 1;
    while (1)
    {
      v12 = v9;
      v13 = v11;
      v8 = *(_QWORD *)(v8 + 8);
      if (!v8)
        break;
      if (!*(_WORD *)(v8 + 80))
        goto LABEL_21;
      v17 = v8;
      v14 = *(_QWORD *)(a3 + 24);
      if (!v14)
        goto LABEL_27;
      if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 48))(v14, &v17))
      {
        v15 = a1[34];
        if (v15)
        {
          v16 = *(_BYTE *)(v8 + 91) == 2
              ? 0
              : (*(_QWORD *)(v8 + 64) - (*(_QWORD *)(v15 + 8) + 2 * a1[35]) + 2 * *(_QWORD *)(v15 + 16)) >> 1;
          v15 = (unint64_t)*(unsigned __int16 *)(v8 + 80) >> 1;
        }
        else
        {
          v16 = -1;
        }
        v11 = 0;
        v9 = v15 + v12;
        if (v16 == v12 + v10)
          continue;
      }
LABEL_21:
      if ((v13 & 1) == 0)
      {
        a1[38] = *(_QWORD *)v8;
        goto LABEL_25;
      }
      return 0;
    }
    if ((v11 & 1) != 0)
      return 0;
LABEL_25:
    *a2 = v10;
    a2[1] = v12;
    *a2 = a1[35] + v10;
    return 1;
  }
  return result;
}

BOOL CoreNLP::MeCabSubTokenizer::getNextToken(CFRange *)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  int v3;
  int v4;
  _BOOL8 v5;
  uint64_t v6;

  if (*(_DWORD *)(*(_QWORD *)a1 + 400) == 1 && (*(unsigned __int8 *)(a2 + 90) | 4) == 6 || *(_BYTE *)(a2 + 91) != 1)
    return 0;
  if (*(_WORD *)(a2 + 80) == 2)
  {
    result = 0;
    v3 = *(unsigned __int8 *)(a2 + 90);
    if (v3 == 3)
      return result;
    v4 = **(unsigned __int16 **)(a2 + 64);
    if (v4 == 160)
      return result;
    result = 0;
    if (v4 == 45 || v4 == 95)
      return result;
    goto LABEL_12;
  }
  v3 = *(unsigned __int8 *)(a2 + 90);
  if (v3 == 3)
    return 0;
LABEL_12:
  v5 = 1;
  result = 0;
  switch(v3)
  {
    case 4:
    case 7:
      return result;
    case 11:
      v6 = *(_QWORD *)(a2 + 8);
      if (v6)
        v5 = *(unsigned __int8 *)(v6 + 90) != 12;
      goto LABEL_17;
    case 12:
      if (*(_QWORD *)a2)
        v5 = *(unsigned __int8 *)(*(_QWORD *)a2 + 90) != 11;
      goto LABEL_17;
    default:
LABEL_17:
      result = v5;
      break;
  }
  return result;
}

uint64_t CoreNLP::MeCabSubTokenizer::checkNodeIsNormalized(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(result + 72))
  {
    v2 = result;
    result = std::function<unsigned long ()(unsigned short const*,int)>::operator()(result + 48, *(_QWORD *)(a2 + 64), *(unsigned __int16 *)(a2 + 80) >> 1);
    *(_QWORD *)(v2 + 392) |= result;
  }
  return result;
}

uint64_t CoreNLP::MeCabSubTokenizer::createPersonNameRanges(CoreNLP::MeCabSubTokenizer *this, BOOL *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 33);
  if (!v3 || !*((_QWORD *)this + 34))
    return 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 24))(v3, *((_QWORD *)this + 37));
  return (*(uint64_t (**)(_QWORD, _QWORD, BOOL *))(**((_QWORD **)this + 33) + 16))(*((_QWORD *)this + 33), *((_QWORD *)this + 34), a2);
}

void CoreNLP::MeCabSubTokenizer::reset(CoreNLP::MeCabSubTokenizer *this)
{
  uint64_t v1;

  *((_QWORD *)this + 51) = 0;
  if (*((_QWORD *)this + 34))
  {
    std::vector<unsigned short>::resize((uint64_t)this + 416, 0x3000uLL);
  }
  else
  {
    v1 = *((_QWORD *)this + 52);
    if (v1 != *((_QWORD *)this + 53))
      *((_QWORD *)this + 53) = v1;
  }
}

uint64_t CoreNLP::MeCabSubTokenizer::enableConnector(uint64_t this, char a2)
{
  *(_BYTE *)(this + 448) = a2;
  return this;
}

__CFString *CoreNLP::`anonymous namespace'::createLatinTranscription(uint64_t a1, int a2)
{
  __CFString *MutableString;
  __CFString *v4;
  _QWORD v6[3];

  v6[0] = *(_QWORD *)(a1 + 64);
  v6[1] = 0;
  v6[2] = (unint64_t)*(unsigned __int16 *)(a1 + 80) >> 1;
  MutableString = CoreNLP::TranscriptionBuffer::createMutableString((CoreNLP::TranscriptionBuffer *)v6);
  v4 = MutableString;
  if (MutableString)
  {
    if (!CFStringTransform(MutableString, 0, (CFStringRef)*MEMORY[0x1E0C9B360], 0))
      CFRelease(v4);
    if (!CFStringTransform(v4, 0, (CFStringRef)*MEMORY[0x1E0C9B340], 0))
      CFRelease(v4);
    if ((a2 & 0x20000) != 0 && !CFStringTransform(v4, 0, (CFStringRef)*MEMORY[0x1E0C9B348], 0))
      CFRelease(v4);
  }
  CoreNLP::TranscriptionBuffer::~TranscriptionBuffer((CoreNLP::TranscriptionBuffer *)v6);
  return v4;
}

void sub_191CA3894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CoreNLP::TranscriptionBuffer::~TranscriptionBuffer((CoreNLP::TranscriptionBuffer *)va);
  _Unwind_Resume(a1);
}

__CFString *CoreNLP::TranscriptionBuffer::createMutableString(CoreNLP::TranscriptionBuffer *this)
{
  __CFString *Mutable;
  __CFString *v3;

  Mutable = CFStringCreateMutable(0, 0);
  v3 = Mutable;
  if (Mutable)
    CFStringAppendCharacters(Mutable, *(const UniChar **)this, *((_QWORD *)this + 2));
  return v3;
}

uint64_t CoreNLP::NumberIterator::next(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = 0;
  if (CoreNLP::NumberIterator::isLHS(*a1))
  {
    do
    {
      v3 = *(_QWORD *)(*a1 + 8);
      *a1 = v3;
      if (v3)
        v4 = (unint64_t)*(unsigned __int16 *)(v3 + 80) >> 1;
      else
        v4 = 0;
      v5 = *(_QWORD *)(v3 + 8);
      *a1 = v5;
      if (v5)
        v6 = (unint64_t)*(unsigned __int16 *)(v5 + 80) >> 1;
      else
        v6 = 0;
      v2 += v4 + v6;
    }
    while (CoreNLP::NumberIterator::isLHS(v5));
  }
  return v2;
}

BOOL CoreNLP::NumberIterator::isLHS(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  return v1
      && *(_BYTE *)(v1 + 91) != 3
      && (v2 = *(_QWORD *)(v1 + 8)) != 0
      && *(_BYTE *)(v2 + 91) != 3
      && CoreNLP::NumberIterator::isNumeral(a1, v1, v2);
}

BOOL CoreNLP::NumberIterator::isNumeral(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v6;

  v3 = *(unsigned __int16 *)(a2 + 82);
  if (v3 != *(unsigned __int16 *)(a2 + 80) || *(unsigned __int16 *)(a3 + 82) != *(unsigned __int16 *)(a3 + 80))
    return 0;
  v4 = *(unsigned __int8 *)(a1 + 90);
  v5 = v4 == 8 || v4 == 4;
  if (!v5 || v3 != 2 || (**(_WORD **)(a2 + 64) & 0xFFFD) != 0x2C)
    return 0;
  v6 = *(unsigned __int8 *)(a3 + 90);
  return v6 == 4 || v6 == 8;
}

BOOL CoreNLP::NumberIterator::isDecimalMark(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  return v2
      && *(_BYTE *)(v2 + 91) != 2
      && (v3 = a1[1]) != 0
      && *(_BYTE *)(v3 + 91) != 3
      && CoreNLP::NumberIterator::isNumeral(v2, (uint64_t)a1, v3);
}

uint64_t CoreNLP::NumberIterator::prev(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = 0;
  if (CoreNLP::NumberIterator::isRHS(*a1))
  {
    do
    {
      v3 = **a1;
      *a1 = (uint64_t *)v3;
      if (v3)
        v4 = (unint64_t)*(unsigned __int16 *)(v3 + 80) >> 1;
      else
        v4 = 0;
      v5 = *(_QWORD *)v3;
      *a1 = *(uint64_t **)v3;
      if (v5)
        v6 = (unint64_t)*(unsigned __int16 *)(v5 + 80) >> 1;
      else
        v6 = 0;
      v2 += v4 + v6;
    }
    while (CoreNLP::NumberIterator::isRHS((uint64_t *)v5));
  }
  return v2;
}

BOOL CoreNLP::NumberIterator::isRHS(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *a1;
  return *a1
      && *(_BYTE *)(v1 + 91) != 2
      && (v3 = *(_QWORD *)v1) != 0
      && *(_BYTE *)(v3 + 91) != 2
      && CoreNLP::NumberIterator::isNumeral(v3, v1, (uint64_t)a1);
}

uint64_t CoreNLP::`anonymous namespace'::convertCharTypeToAttributes(uint64_t a1)
{
  unint64_t v1;

  v1 = *(char *)(a1 + 90);
  if (v1 > 0xE)
    return 0;
  else
    return qword_191D416B0[v1];
}

uint64_t CoreNLP::mecab::SpaceIterator::seekTo(CoreNLP::mecab::SpaceView **this, uint64_t a2)
{
  CoreNLP::mecab::SpaceView *v3;

  v3 = *this;
  if (*((_QWORD *)v3 + 2) > a2 || *((_QWORD *)v3 + 3) < a2)
    return -1;
  this[2] = (CoreNLP::mecab::SpaceView *)a2;
  CoreNLP::mecab::SpaceView::isCRLF(v3, a2);
  return (uint64_t)this[1] + (_QWORD)this[2];
}

BOOL CoreNLP::mecab::SpaceView::isCRLF(CoreNLP::mecab::SpaceView *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v3 = *((_QWORD *)this + 1);
  if (!v3)
    return 0;
  v4 = *((_QWORD *)this + 2);
  if (v4 < 0)
    return 0;
  v5 = *((_QWORD *)this + 3);
  if (v4 < v5)
  {
    v8 = __OFSUB__(v5, v3);
    v6 = v5 == v3;
    v7 = v5 - v3 < 0;
  }
  else
  {
    v8 = 0;
    v6 = 0;
    v7 = 0;
  }
  if (v7 ^ v8 | v6)
  {
    v11 = __OFSUB__(v4, a2);
    v9 = v4 == a2;
    v10 = v4 - a2 < 0;
  }
  else
  {
    v11 = 0;
    v9 = 0;
    v10 = 0;
  }
  return v10 ^ v11 | v9
      && v5 > a2 + 1
      && *(_WORD *)(v2 + 2 * a2) == 13
      && *(unsigned __int16 *)(v2 + 2 * (a2 + 1)) == 10;
}

uint64_t std::function<unsigned long ()(unsigned short const*,int)>::operator()(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v5;
  uint64_t v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

void std::vector<unsigned short>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    std::vector<unsigned short>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<unsigned short>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void std::__function::__func<__CFString const* (*)(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL),std::allocator<__CFString const* (*)(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL)>,__CFString const* ()(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL)>::~__func()
{
  JUMPOUT(0x19401E994);
}

_QWORD *std::__function::__func<__CFString const* (*)(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL),std::allocator<__CFString const* (*)(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL)>,__CFString const* ()(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DF32D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<__CFString const* (*)(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL),std::allocator<__CFString const* (*)(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL)>,__CFString const* ()(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DF32D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<__CFString const* (*)(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL),std::allocator<__CFString const* (*)(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL)>,__CFString const* ()(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unsigned __int8 *a5)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4, *a5);
}

uint64_t std::__function::__func<__CFString const* (*)(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL),std::allocator<__CFString const* (*)(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL)>,__CFString const* ()(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<__CFString const* (*)(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL),std::allocator<__CFString const* (*)(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL)>,__CFString const* ()(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL)>::target_type()
{
}

_QWORD *std::__function::__value_func<__CFString const* ()(CoreNLP::MeCabInterface *,mecab_node_t const*,unsigned long,BOOL)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_191CA3F7C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<CFRange (*)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*),std::allocator<CFRange (*)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*)>,CFRange ()(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*)>::~__func()
{
  JUMPOUT(0x19401E994);
}

_QWORD *std::__function::__func<CFRange (*)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*),std::allocator<CFRange (*)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*)>,CFRange ()(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DF3278;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CFRange (*)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*),std::allocator<CFRange (*)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*)>,CFRange ()(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DF3278;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<CFRange (*)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*),std::allocator<CFRange (*)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*)>,CFRange ()(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, unsigned __int8 *a4, _QWORD *a5, _QWORD *a6)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4, *a5, *a6);
}

uint64_t std::__function::__func<CFRange (*)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*),std::allocator<CFRange (*)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*)>,CFRange ()(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CFRange (*)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*),std::allocator<CFRange (*)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*)>,CFRange ()(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*)>::target_type()
{
}

_QWORD *std::__function::__value_func<CFRange ()(unsigned short const*,mecab_node_t const**,BOOL,unsigned long,CoreNLP::LineBreakConnector const*)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_191CA41C4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<CFRange (*)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long),std::allocator<CFRange (*)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long)>,CFRange ()(unsigned short const*,mecab_node_t const**,BOOL,unsigned long)>::~__func()
{
  JUMPOUT(0x19401E994);
}

_QWORD *std::__function::__func<CFRange (*)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long),std::allocator<CFRange (*)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long)>,CFRange ()(unsigned short const*,mecab_node_t const**,BOOL,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DF3220;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CFRange (*)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long),std::allocator<CFRange (*)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long)>,CFRange ()(unsigned short const*,mecab_node_t const**,BOOL,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DF3220;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<CFRange (*)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long),std::allocator<CFRange (*)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long)>,CFRange ()(unsigned short const*,mecab_node_t const**,BOOL,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, unsigned __int8 *a4, _QWORD *a5)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4, *a5);
}

uint64_t std::__function::__func<CFRange (*)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long),std::allocator<CFRange (*)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long)>,CFRange ()(unsigned short const*,mecab_node_t const**,BOOL,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CFRange (*)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long),std::allocator<CFRange (*)(unsigned short const*,mecab_node_t const**,BOOL,unsigned long)>,CFRange ()(unsigned short const*,mecab_node_t const**,BOOL,unsigned long)>::target_type()
{
}

_QWORD *std::__function::__value_func<CFRange ()(unsigned short const*,mecab_node_t const**,BOOL,unsigned long)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_191CA4408(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<void (*)(mecab_node_t const*,NLToken *,unsigned long),std::allocator<void (*)(mecab_node_t const*,NLToken *,unsigned long)>,void ()(mecab_node_t const*,NLToken *,unsigned long)>::~__func()
{
  JUMPOUT(0x19401E994);
}

_QWORD *std::__function::__func<void (*)(mecab_node_t const*,NLToken *,unsigned long),std::allocator<void (*)(mecab_node_t const*,NLToken *,unsigned long)>,void ()(mecab_node_t const*,NLToken *,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DF33D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(mecab_node_t const*,NLToken *,unsigned long),std::allocator<void (*)(mecab_node_t const*,NLToken *,unsigned long)>,void ()(mecab_node_t const*,NLToken *,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DF33D8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(mecab_node_t const*,NLToken *,unsigned long),std::allocator<void (*)(mecab_node_t const*,NLToken *,unsigned long)>,void ()(mecab_node_t const*,NLToken *,unsigned long)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

uint64_t std::__function::__func<void (*)(mecab_node_t const*,NLToken *,unsigned long),std::allocator<void (*)(mecab_node_t const*,NLToken *,unsigned long)>,void ()(mecab_node_t const*,NLToken *,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void (*)(mecab_node_t const*,NLToken *,unsigned long),std::allocator<void (*)(mecab_node_t const*,NLToken *,unsigned long)>,void ()(mecab_node_t const*,NLToken *,unsigned long)>::target_type()
{
}

_QWORD *std::__function::__value_func<void ()(mecab_node_t const*,NLToken *,unsigned long)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_191CA4648(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<NLTokenizerPartOfSpeech (*)(mecab_node_t const*),std::allocator<NLTokenizerPartOfSpeech (*)(mecab_node_t const*)>,NLTokenizerPartOfSpeech ()(mecab_node_t const*)>::~__func()
{
  JUMPOUT(0x19401E994);
}

_QWORD *std::__function::__func<NLTokenizerPartOfSpeech (*)(mecab_node_t const*),std::allocator<NLTokenizerPartOfSpeech (*)(mecab_node_t const*)>,NLTokenizerPartOfSpeech ()(mecab_node_t const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DF31C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<NLTokenizerPartOfSpeech (*)(mecab_node_t const*),std::allocator<NLTokenizerPartOfSpeech (*)(mecab_node_t const*)>,NLTokenizerPartOfSpeech ()(mecab_node_t const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DF31C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<NLTokenizerPartOfSpeech (*)(mecab_node_t const*),std::allocator<NLTokenizerPartOfSpeech (*)(mecab_node_t const*)>,NLTokenizerPartOfSpeech ()(mecab_node_t const*)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<NLTokenizerPartOfSpeech (*)(mecab_node_t const*),std::allocator<NLTokenizerPartOfSpeech (*)(mecab_node_t const*)>,NLTokenizerPartOfSpeech ()(mecab_node_t const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<NLTokenizerPartOfSpeech (*)(mecab_node_t const*),std::allocator<NLTokenizerPartOfSpeech (*)(mecab_node_t const*)>,NLTokenizerPartOfSpeech ()(mecab_node_t const*)>::target_type()
{
}

_QWORD *std::__function::__value_func<NLTokenizerPartOfSpeech ()(mecab_node_t const*)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_191CA4880(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::vector<std::function<BOOL ()(mecab_node_t const*)>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<BOOL ()(mecab_node_t const*)>>,std::reverse_iterator<std::function<BOOL ()(mecab_node_t const*)>*>,std::reverse_iterator<std::function<BOOL ()(mecab_node_t const*)>*>,std::reverse_iterator<std::function<BOOL ()(mecab_node_t const*)>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<BOOL ()(mecab_node_t const*)>>,std::reverse_iterator<std::function<BOOL ()(mecab_node_t const*)>*>,std::reverse_iterator<std::function<BOOL ()(mecab_node_t const*)>*>,std::reverse_iterator<std::function<BOOL ()(mecab_node_t const*)>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 32;
      std::__function::__value_func<BOOL ()(mecab_node_t const*)>::__value_func[abi:ne180100](v7 - 32, v9);
      v7 = *((_QWORD *)&v15 + 1) - 32;
      *((_QWORD *)&v15 + 1) -= 32;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<BOOL ()(mecab_node_t const*)>>,std::reverse_iterator<std::function<BOOL ()(mecab_node_t const*)>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__function::__value_func<BOOL ()(mecab_node_t const*)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<BOOL ()(mecab_node_t const*)>>,std::reverse_iterator<std::function<BOOL ()(mecab_node_t const*)>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::function<BOOL ()(mecab_node_t const*)>>,std::reverse_iterator<std::function<BOOL ()(mecab_node_t const*)>*>>::operator()[abi:ne180100]((_QWORD *)a1);
  return a1;
}

_QWORD *std::_AllocatorDestroyRangeReverse<std::allocator<std::function<BOOL ()(mecab_node_t const*)>>,std::reverse_iterator<std::function<BOOL ()(mecab_node_t const*)>*>>::operator()[abi:ne180100](_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(result[2] + 8);
  v2 = *(_QWORD **)(result[1] + 8);
  while (v1 != v2)
  {
    result = (_QWORD *)v1[3];
    if (v1 == result)
    {
      result = v1;
      v3 = 4;
    }
    else
    {
      if (!result)
        goto LABEL_8;
      v3 = 5;
    }
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
LABEL_8:
    v1 += 4;
  }
  return result;
}

void **std::__split_buffer<std::function<BOOL ()(mecab_node_t const*)>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::function<BOOL ()(mecab_node_t const*)>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *std::__split_buffer<std::function<BOOL ()(mecab_node_t const*)>>::clear[abi:ne180100](_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = (_QWORD *)result[1];
  v1 = (_QWORD *)result[2];
  if (v1 != v2)
  {
    v3 = result;
    while (1)
    {
      result = v1 - 4;
      v3[2] = v1 - 4;
      v4 = (_QWORD *)*(v1 - 1);
      if (v4 == result)
        break;
      if (v4)
      {
        result = v4;
        v5 = 5;
LABEL_7:
        (*(void (**)(void))(*result + 8 * v5))();
        result = (_QWORD *)v3[2];
      }
      v1 = result;
      if (result == v2)
        return result;
    }
    v5 = 4;
    goto LABEL_7;
  }
  return result;
}

void std::__function::__func<std::__bind<unsigned long (&)(unsigned short const*,int),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<unsigned long (&)(unsigned short const*,int),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,unsigned long ()(unsigned short const*,int)>::~__func()
{
  JUMPOUT(0x19401E994);
}

__n128 std::__function::__func<std::__bind<unsigned long (&)(unsigned short const*,int),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<unsigned long (&)(unsigned short const*,int),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,unsigned long ()(unsigned short const*,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E2DF3170;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<unsigned long (&)(unsigned short const*,int),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<unsigned long (&)(unsigned short const*,int),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,unsigned long ()(unsigned short const*,int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E2DF3170;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<unsigned long (&)(unsigned short const*,int),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<unsigned long (&)(unsigned short const*,int),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,unsigned long ()(unsigned short const*,int)>::operator()(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, *a3);
}

uint64_t std::__function::__func<std::__bind<unsigned long (&)(unsigned short const*,int),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<unsigned long (&)(unsigned short const*,int),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,unsigned long ()(unsigned short const*,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<unsigned long (&)(unsigned short const*,int),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<unsigned long (&)(unsigned short const*,int),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,unsigned long ()(unsigned short const*,int)>::target_type()
{
}

_QWORD *std::__function::__value_func<unsigned long ()(unsigned short const*,int)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_191CA4D70(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<BOOL (*)(mecab_node_t const*),std::allocator<BOOL (*)(mecab_node_t const*)>,BOOL ()(mecab_node_t const*)>::~__func()
{
  JUMPOUT(0x19401E994);
}

_QWORD *std::__function::__func<BOOL (*)(mecab_node_t const*),std::allocator<BOOL (*)(mecab_node_t const*)>,BOOL ()(mecab_node_t const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E2DF3328;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(mecab_node_t const*),std::allocator<BOOL (*)(mecab_node_t const*)>,BOOL ()(mecab_node_t const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E2DF3328;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(mecab_node_t const*),std::allocator<BOOL (*)(mecab_node_t const*)>,BOOL ()(mecab_node_t const*)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<BOOL (*)(mecab_node_t const*),std::allocator<BOOL (*)(mecab_node_t const*)>,BOOL ()(mecab_node_t const*)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<BOOL (*)(mecab_node_t const*),std::allocator<BOOL (*)(mecab_node_t const*)>,BOOL ()(mecab_node_t const*)>::target_type()
{
}

uint64_t NLEmbeddingSubwordVocabCreate(CFTypeRef cf)
{
  uint64_t v2;
  corelm::Custom2PreProcessor *v3;
  corelm::Custom2PreProcessor *v4;
  uint64_t v5;
  uint64_t v6;
  std::runtime_error *exception;
  uint64_t v9;
  corelm::Custom2PreProcessor *v10;
  CFTypeRef cfa;
  void *__p[2];
  char v13;

  if (cf)
    CFRetain(cf);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cfa, cf);
  if (!cfa)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::convert_to<std::string,0>((const __CFString *)cfa, (uint64_t)__p);
  if (cfa)
    CFRelease(cfa);
  v2 = operator new();
  corelm::SentencePieceVocabulary::SentencePieceVocabulary(v2, __p);
  v3 = (corelm::Custom2PreProcessor *)operator new();
  corelm::Custom2PreProcessor::Custom2PreProcessor(v3);
  v10 = v3;
  (*(void (**)(uint64_t, corelm::Custom2PreProcessor **))(*(_QWORD *)v2 + 64))(v2, &v10);
  v4 = v10;
  v10 = 0;
  if (v4)
    (*(void (**)(corelm::Custom2PreProcessor *))(*(_QWORD *)v4 + 8))(v4);
  v9 = v2;
  v5 = CoreNLP::createSPVocabWrapper(&v9);
  v6 = v9;
  v9 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v13 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_191CA4F84(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v20;
  _BOOL4 v21;

  __cxa_free_exception(v17);
  applesauce::CF::StringRef::~StringRef(&a11);
  v20 = __cxa_begin_catch(a1);
  v21 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v21)
      NLEmbeddingSubwordVocabCreate_cold_1((uint64_t)v20);
  }
  else if (v21)
  {
    NLEmbeddingSubwordVocabCreate_cold_2();
  }
  __cxa_end_catch();
  JUMPOUT(0x191CA4F38);
}

CFArrayRef NLEmbeddingSubwordVocabCopyTokenIdsForText(CoreNLP *a1, CFTypeRef cf)
{
  CFArrayRef Copy;
  void *v5;
  const __CFString *v6;
  CFTypeID TypeID;
  uint64_t v8;
  CFArrayRef CFArray;
  const __CFAllocator *v10;
  std::runtime_error *exception;
  std::string __p;
  CFTypeRef cfa;
  std::string v15;
  std::string v16;

  Copy = 0;
  if (a1 && cf)
  {
    CFRetain(cf);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cfa, cf);
    if (!cfa)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v6 = (const __CFString *)cfa;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v16, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v16 = __p;
    if (v6 && (TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(v6)))
    {
      applesauce::CF::details::CFString_get_value<false>(v6, (uint64_t)&v15);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
    }
    else
    {
      v15 = v16;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (cfa)
      CFRelease(cfa);
    v8 = CoreNLP::unwrapGazetteer(a1, v5);
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v8 + 16))(&v16);
    CFArray = applesauce::CF::details::make_CFArrayRef<long>((void ****)&v16);
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    cfa = CFArray;
    Copy = CFArrayCreateCopy(v10, CFArray);
    if (CFArray)
      CFRelease(CFArray);
    if (v16.__r_.__value_.__r.__words[0])
    {
      v16.__r_.__value_.__l.__size_ = v16.__r_.__value_.__r.__words[0];
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  return Copy;
}

void sub_191CA5298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;

  __cxa_free_exception(v21);
  applesauce::CF::StringRef::~StringRef(&a12);
  _Unwind_Resume(a1);
}

CFStringRef NLEmbeddingSubwordVocabCopyTextForTokenIds(CoreNLP *a1, CFTypeRef cf)
{
  CFStringRef Copy;
  void *v5;
  uint64_t v6;
  __n128 v7;
  void **v8;
  CFIndex v9;
  const __CFString *v10;
  std::runtime_error *exception;
  std::runtime_error *v13;
  __n128 v14;
  uint64_t v15;
  __n128 __p;
  void *v17[2];
  unsigned __int8 v18;
  const __CFArray *v19;

  Copy = 0;
  if (a1 && cf)
  {
    CFRetain(cf);
    applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v19, cf);
    v6 = CoreNLP::unwrapGazetteer(a1, v5);
    if (!v19)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v14 = 0uLL;
    v15 = 0;
    v7 = applesauce::CF::convert_or<std::vector<long>,0>(v19, &v14, &__p);
    (*(void (**)(void **__return_ptr, uint64_t, __n128 *, __n128))(*(_QWORD *)v6 + 24))(v17, v6, &__p, v7);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    if (v14.n128_u64[0])
    {
      v14.n128_u64[1] = v14.n128_u64[0];
      operator delete((void *)v14.n128_u64[0]);
    }
    if ((v18 & 0x80u) == 0)
      v8 = v17;
    else
      v8 = (void **)v17[0];
    if ((v18 & 0x80u) == 0)
      v9 = v18;
    else
      v9 = (CFIndex)v17[1];
    v10 = CFStringCreateWithBytes(0, (const UInt8 *)v8, v9, 0x8000100u, 0);
    __p.n128_u64[0] = (unint64_t)v10;
    if (!v10)
    {
      v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v13, "Could not construct");
      __cxa_throw(v13, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v10);
    CFRelease(v10);
    if ((char)v18 < 0)
      operator delete(v17[0]);
    if (v19)
      CFRelease(v19);
  }
  return Copy;
}

void sub_191CA54A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)(v20 - 40));
  _Unwind_Resume(a1);
}

CFStringRef NLEmbeddingSubwordVocabCopyPreprocessedText(CoreNLP *a1, CFTypeRef cf)
{
  CFStringRef Copy;
  void *v5;
  const __CFString *v6;
  CFTypeID TypeID;
  uint64_t v8;
  std::string *v9;
  std::string::size_type size;
  CFStringRef v11;
  std::runtime_error *exception;
  std::runtime_error *v14;
  std::string __p;
  CFTypeRef cfa;
  std::string v17;
  std::string v18;

  Copy = 0;
  if (a1 && cf)
  {
    CFRetain(cf);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cfa, cf);
    if (!cfa)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v6 = (const __CFString *)cfa;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v18 = __p;
    if (v6 && (TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(v6)))
    {
      applesauce::CF::details::CFString_get_value<false>(v6, (uint64_t)&v17);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
    }
    else
    {
      v17 = v18;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (cfa)
      CFRelease(cfa);
    v8 = CoreNLP::unwrapGazetteer(a1, v5);
    (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v8 + 72))(&v18, v8, &v17);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v18;
    else
      v9 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    else
      size = v18.__r_.__value_.__l.__size_;
    v11 = CFStringCreateWithBytes(0, (const UInt8 *)v9, size, 0x8000100u, 0);
    cfa = v11;
    if (!v11)
    {
      v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v14, "Could not construct");
      __cxa_throw(v14, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v11);
    CFRelease(v11);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  return Copy;
}

void sub_191CA5734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void CoreNLP::TaggingFeatureExtractor::~TaggingFeatureExtractor(char **this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;

  *this = (char *)&off_1E2DF2BF8;
  std::__tree<std::string>::destroy((uint64_t)(this + 49), this[50]);
  std::__tree<std::string>::destroy((uint64_t)(this + 46), this[47]);
  v2 = this[43];
  if (v2)
  {
    this[44] = v2;
    operator delete(v2);
  }
  v3 = this[40];
  if (v3)
  {
    this[41] = v3;
    operator delete(v3);
  }
  v4 = this[37];
  if (v4)
  {
    this[38] = v4;
    operator delete(v4);
  }
  v5 = this[34];
  if (v5)
  {
    this[35] = v5;
    operator delete(v5);
  }
  v6 = this[31];
  if (v6)
  {
    this[32] = v6;
    operator delete(v6);
  }
  v7 = this[28];
  if (v7)
  {
    this[29] = v7;
    operator delete(v7);
  }
  v8 = this[25];
  if (v8)
  {
    this[26] = v8;
    operator delete(v8);
  }
  v9 = this[22];
  if (v9)
  {
    this[23] = v9;
    operator delete(v9);
  }
  v10 = this[19];
  if (v10)
  {
    this[20] = v10;
    operator delete(v10);
  }
  v11 = this[16];
  if (v11)
  {
    this[17] = v11;
    operator delete(v11);
  }
  v12 = this[13];
  if (v12)
  {
    this[14] = v12;
    operator delete(v12);
  }
  v13 = this[10];
  if (v13)
  {
    this[11] = v13;
    operator delete(v13);
  }
  std::__tree<std::__value_type<NLLanguageID,BloomFilter>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,BloomFilter>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,BloomFilter>>>::destroy((uint64_t)(this + 7), this[8]);
  std::__tree<std::__value_type<NLLanguageID,BloomFilter>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,BloomFilter>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,BloomFilter>>>::destroy((uint64_t)(this + 4), this[5]);
  std::__tree<std::__value_type<NLLanguageID,BloomFilter>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,BloomFilter>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,BloomFilter>>>::destroy((uint64_t)(this + 1), this[2]);
}

{
  CoreNLP::TaggingFeatureExtractor::~TaggingFeatureExtractor(this);
  JUMPOUT(0x19401E994);
}

double CoreNLP::TaggingFeatureExtractor::extractSharedData(int a1, uint64_t *a2, CFStringRef theString, int a4)
{
  uint64_t v4;
  unint64_t v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  void **v12;
  double result;
  __int128 v14;
  uint64_t v15;
  std::string v16;

  v4 = *a2;
  if (a2[1] != *a2)
  {
    v8 = 0;
    do
    {
      v9 = *(__int128 **)(v4 + 8 * v8);
      v10 = *v9;
      v15 = *((_QWORD *)v9 + 2);
      v14 = v10;
      CoreNLP::extractLowercaseUTF8(theString, (CFIndex *)&v14, a4, &v16);
      v11 = *(_QWORD *)(*a2 + 8 * v8);
      v12 = (void **)(v11 + 80);
      if (*(char *)(v11 + 103) < 0)
        operator delete(*v12);
      result = *(double *)&v16.__r_.__value_.__l.__data_;
      *(std::string *)v12 = v16;
      ++v8;
      v4 = *a2;
    }
    while (v8 < (a2[1] - *a2) >> 3);
  }
  return result;
}

uint64_t CoreNLP::TaggingFeatureExtractor::useModel(uint64_t result, const char *a2, unint64_t a3, int a4, int a5)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  int *v11;

  v10 = a5;
  if (a3 >= 0x1D
    && a2
    && a4 == 7
    && *(_DWORD *)a2 == 2000
    && *((unsigned int *)a2 + 6) + (unint64_t)*((unsigned int *)a2 + 2) + *((unsigned int *)a2 + 4) + 28 <= a3)
  {
    v6 = result;
    v11 = &v10;
    v7 = std::__tree<std::__value_type<NLLanguageID,BloomFilter>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,BloomFilter>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,BloomFilter>>>::__emplace_unique_key_args<NLLanguageID,std::piecewise_construct_t const&,std::tuple<NLLanguageID const&>,std::tuple<>>(result + 56, &v10, (uint64_t)&std::piecewise_construct, &v11);
    BloomFilter::loadFromBuffer((uint64_t)(v7 + 5), &a2[*((unsigned int *)a2 + 5)], *((unsigned int *)a2 + 6));
    v11 = &v10;
    v8 = std::__tree<std::__value_type<NLLanguageID,BloomFilter>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,BloomFilter>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,BloomFilter>>>::__emplace_unique_key_args<NLLanguageID,std::piecewise_construct_t const&,std::tuple<NLLanguageID const&>,std::tuple<>>(v6 + 8, &v10, (uint64_t)&std::piecewise_construct, &v11);
    BloomFilter::loadFromBuffer((uint64_t)(v8 + 5), &a2[*((unsigned int *)a2 + 1)], *((unsigned int *)a2 + 2));
    v11 = &v10;
    v9 = std::__tree<std::__value_type<NLLanguageID,BloomFilter>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,BloomFilter>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,BloomFilter>>>::__emplace_unique_key_args<NLLanguageID,std::piecewise_construct_t const&,std::tuple<NLLanguageID const&>,std::tuple<>>(v6 + 32, &v10, (uint64_t)&std::piecewise_construct, &v11);
    return BloomFilter::loadFromBuffer((uint64_t)(v9 + 5), &a2[*((unsigned int *)a2 + 3)], *((unsigned int *)a2 + 4));
  }
  return result;
}

void sub_191CA5AC8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x191CA5AB8);
}

void CoreNLP::TaggingFeatureExtractor::extractFeatures(_QWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X3>, unint64_t a5@<X4>, const void *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  const std::string *v23;
  const std::string::value_type *v24;
  std::__split_buffer<std::string>::pointer v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  char v28;
  std::string::size_type v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  const std::string::value_type *first;
  uint64_t v33;
  uint64_t v34;
  const std::string::value_type *v35;
  const std::string::value_type *v36;
  int v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  uint64_t v40;
  unint64_t v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  const std::string::value_type *v44;
  std::__split_buffer<std::string>::pointer v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  uint64_t *v53;
  std::string::size_type v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  std::string::size_type v58;
  const std::string::value_type *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  BOOL v66;
  uint64_t *v67;
  std::string::size_type v68;
  const std::string::value_type *v69;
  const std::string::value_type *v70;
  std::__split_buffer<std::string>::pointer v71;
  const std::string::value_type *v72;
  std::string::size_type v73;
  const std::string::value_type *v74;
  std::string::size_type v75;
  std::string::size_type v76;
  std::string::size_type v77;
  const void *v78;
  const std::string::value_type *v79;
  std::string::size_type v80;
  const std::string::value_type *v81;
  std::__split_buffer<std::string>::pointer v82;
  unsigned int v83;
  int v84;
  const std::string::value_type *v85;
  std::string::size_type v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  BOOL v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  BOOL v101;
  uint64_t *v102;
  std::string::size_type v103;
  const std::string::value_type *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  BOOL v111;
  uint64_t *v112;
  int v113;
  const std::string::value_type *v114;
  std::string::size_type v115;
  uint64_t v116;
  uint64_t v117;
  const std::string::value_type *v118;
  const std::string::value_type *v119;
  int v120;
  signed int v121;
  unint64_t v122;
  int end_high;
  std::__split_buffer<std::string>::pointer begin;
  unint64_t v125;
  __int128 v126;
  uint64_t v127;
  int v128;
  const std::string::value_type *v129;
  std::__split_buffer<std::string>::pointer v130;
  const std::string::value_type *v131;
  std::__split_buffer<std::string>::pointer v132;
  const std::string::value_type *v133;
  std::string::size_type v134;
  std::string::size_type size;
  char v136;
  unint64_t v137;
  unint64_t v138;
  __int128 v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  std::string *v145;
  std::string *v146;
  __int128 v147;
  std::string::size_type __pos;
  std::string::size_type v149;
  std::string::size_type v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  int v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  CFTypeRef v162;
  std::string v163;
  unsigned __int8 *v164;
  unsigned __int8 *v165;
  std::__split_buffer<std::string> v166;

  if (a2 == 104 && a3 == 4)
  {
    CoreNLP::TaggingFeatureExtractor::extractFeatures_Chinese((uint64_t)a1, 104, 4, (uint64_t)a4, a5, a7);
  }
  else
  {
    *(_QWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = 0;
    *(_QWORD *)(a7 + 16) = 0;
    if ((a5 & 0x8000000000000000) == 0)
    {
      v12 = *a4;
      v13 = a4[1];
      if (*a4 != v13 && a5 < (v13 - v12) >> 3)
      {
        v14 = *(_QWORD *)(v12 + 8 * a5);
        v160 = *(_QWORD *)(v14 + 8);
        CoreNLP::TaggingFeatureExtractor::featureIDs(a1, a2, a3, &v164);
        v16 = v164;
        v15 = v165;
        if (v164 != v165)
        {
          v154 = a3;
          v155 = (uint64_t)a1;
          v156 = a5 - 2;
          v161 = a5 + 1;
          v158 = a5 + 2;
          v159 = a5 - 1;
          v150 = (v160 - 2);
          v149 = (v160 - 3);
          __pos = (v160 - 4);
          if ((int)v160 >= 2)
            v17 = 2;
          else
            v17 = v160;
          if ((int)v160 >= 3)
            v18 = 3;
          else
            v18 = v160;
          v152 = v18;
          v153 = v17;
          if ((int)v160 >= 4)
            v19 = 4;
          else
            v19 = v160;
          v151 = v19;
          while (2)
          {
            v20 = *v16;
            memset(&v163, 0, sizeof(v163));
            v21 = 1;
            v22 = 4;
            v23 = (const std::string *)(v14 + 80);
            switch(v20)
            {
              case 33:
                if ((*(_BYTE *)(*(_QWORD *)(*a4 + 8 * a5) + 73) & 8) != 0)
                  goto LABEL_399;
                goto LABEL_400;
              case 34:
                if ((*(_BYTE *)(*(_QWORD *)(*a4 + 8 * a5) + 73) & 0x10) != 0)
                  goto LABEL_399;
                goto LABEL_400;
              case 36:
                if ((*(_BYTE *)(*(_QWORD *)(*a4 + 8 * a5) + 73) & 0x40) != 0)
                  goto LABEL_399;
                goto LABEL_400;
              case 37:
                if ((*(_BYTE *)(*(_QWORD *)(*a4 + 8 * a5) + 72) & 0x10) != 0)
                  goto LABEL_399;
                goto LABEL_400;
              case 38:
                if ((*(_BYTE *)(*(_QWORD *)(*a4 + 8 * a5) + 74) & 8) != 0)
                  goto LABEL_399;
                goto LABEL_400;
              case 39:
                if ((*(_BYTE *)(*(_QWORD *)(*a4 + 8 * a5) + 74) & 1) != 0)
                  goto LABEL_399;
                goto LABEL_400;
              case 40:
                if ((*(_BYTE *)(*(_QWORD *)(*a4 + 8 * a5) + 74) & 2) != 0)
                  goto LABEL_399;
                goto LABEL_400;
              case 41:
                if ((*(_BYTE *)(*(_QWORD *)(*a4 + 8 * a5) + 74) & 0x40) != 0)
                  goto LABEL_399;
                goto LABEL_400;
              case 42:
                if ((*(_BYTE *)(*(_QWORD *)(*a4 + 8 * a5) + 72) & 0x80) != 0)
                  goto LABEL_399;
                goto LABEL_400;
              case 65:
                goto LABEL_157;
              case 68:
                CoreNLP::extractAffix(&v163, (std::string::value_type *)(v14 + 80), v151, 1);
                goto LABEL_399;
              case 69:
                CoreNLP::extractAffix(&v163, (std::string::value_type *)(v14 + 80), v152, 1);
                goto LABEL_399;
              case 70:
                CoreNLP::extractAffix(&v163, (std::string::value_type *)(v14 + 80), v153, 1);
                goto LABEL_399;
              case 71:
                if ((int)v160 < 5)
                  goto LABEL_398;
                v54 = *(char *)(v14 + 103) < 0 ? *(_QWORD *)(v14 + 88) : *(unsigned __int8 *)(v14 + 103);
                if (v54 <= __pos)
                  goto LABEL_398;
                std::string::basic_string((std::string *)&v166, (const std::string *)(v14 + 80), __pos, 4uLL, (std::allocator<char> *)&v162);
                goto LABEL_395;
              case 72:
                if ((int)v160 < 4)
                  goto LABEL_398;
                v76 = *(char *)(v14 + 103) < 0 ? *(_QWORD *)(v14 + 88) : *(unsigned __int8 *)(v14 + 103);
                if (v76 <= v149)
                  goto LABEL_398;
                std::string::basic_string((std::string *)&v166, (const std::string *)(v14 + 80), v149, 3uLL, (std::allocator<char> *)&v162);
                goto LABEL_395;
              case 73:
                if ((int)v160 < 3
                  || (*(char *)(v14 + 103) < 0 ? (v77 = *(_QWORD *)(v14 + 88)) : (v77 = *(unsigned __int8 *)(v14 + 103)),
                      v77 <= v150))
                {
LABEL_398:
                  CoreNLP::extractAffix(&v163, (std::string::value_type *)(v14 + 80), v160, 1);
                }
                else
                {
                  std::string::basic_string((std::string *)&v166, (const std::string *)(v14 + 80), v150, 2uLL, (std::allocator<char> *)&v162);
LABEL_395:
                  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v163.__r_.__value_.__l.__data_);
                  *(_OWORD *)&v163.__r_.__value_.__l.__data_ = *(_OWORD *)&v166.__first_;
                  v163.__r_.__value_.__r.__words[2] = (std::string::size_type)v166.__end_;
                }
                goto LABEL_399;
              case 74:
                v95 = *(_QWORD *)(*a4 + 8 * a5);
                v98 = *(_QWORD *)(v95 + 32);
                v96 = v95 + 32;
                v97 = v98;
                if (v98)
                {
                  v99 = v96;
                  do
                  {
                    v100 = *(_DWORD *)(v97 + 32);
                    v101 = v100 < 6;
                    if (v100 >= 6)
                      v102 = (uint64_t *)v97;
                    else
                      v102 = (uint64_t *)(v97 + 8);
                    if (!v101)
                      v99 = v97;
                    v97 = *v102;
                  }
                  while (*v102);
                  if (v99 != v96 && *(int *)(v99 + 32) <= 6)
                  {
                    std::string::push_back(&v163, *(_BYTE *)(v99 + 40));
                    std::string::push_back(&v163, 74);
                  }
                }
                goto LABEL_400;
              case 75:
                if (a5 >= 2 && v156 < (a4[1] - *a4) >> 3)
                {
                  v87 = *(_QWORD *)(*a4 + 8 * v156);
                  v90 = *(_QWORD *)(v87 + 32);
                  v88 = v87 + 32;
                  v89 = v90;
                  if (v90)
                  {
                    v91 = v88;
                    do
                    {
                      v92 = *(_DWORD *)(v89 + 32);
                      v93 = v92 < 6;
                      if (v92 >= 6)
                        v94 = (uint64_t *)v89;
                      else
                        v94 = (uint64_t *)(v89 + 8);
                      if (!v93)
                        v91 = v89;
                      v89 = *v94;
                    }
                    while (*v94);
                    if (v91 != v88 && *(int *)(v91 + 32) <= 6)
                      std::string::push_back(&v163, *(_BYTE *)(v91 + 40));
                  }
                  std::string::push_back(&v163, 75);
                }
                goto LABEL_400;
              case 76:
                if (a5 && v159 < (a4[1] - *a4) >> 3)
                {
                  v46 = *(_QWORD *)(*a4 + 8 * v159);
                  v49 = *(_QWORD *)(v46 + 32);
                  v47 = v46 + 32;
                  v48 = v49;
                  if (v49)
                  {
                    v50 = v47;
                    do
                    {
                      v51 = *(_DWORD *)(v48 + 32);
                      v52 = v51 < 6;
                      if (v51 >= 6)
                        v53 = (uint64_t *)v48;
                      else
                        v53 = (uint64_t *)(v48 + 8);
                      if (!v52)
                        v50 = v48;
                      v48 = *v53;
                    }
                    while (*v53);
                    if (v50 != v47 && *(int *)(v50 + 32) <= 6)
                      std::string::push_back(&v163, *(_BYTE *)(v50 + 40));
                  }
                  std::string::push_back(&v163, 76);
                }
                goto LABEL_400;
              case 77:
                if (v161 < (a4[1] - *a4) >> 3)
                {
                  v60 = *(_QWORD *)(*a4 + 8 * v161);
                  v63 = *(_QWORD *)(v60 + 32);
                  v61 = v60 + 32;
                  v62 = v63;
                  if (v63)
                  {
                    v64 = v61;
                    do
                    {
                      v65 = *(_DWORD *)(v62 + 32);
                      v66 = v65 < 6;
                      if (v65 >= 6)
                        v67 = (uint64_t *)v62;
                      else
                        v67 = (uint64_t *)(v62 + 8);
                      if (!v66)
                        v64 = v62;
                      v62 = *v67;
                    }
                    while (*v67);
                    if (v64 != v61 && *(int *)(v64 + 32) <= 6)
                      std::string::push_back(&v163, *(_BYTE *)(v64 + 40));
                  }
                  std::string::push_back(&v163, 77);
                }
                goto LABEL_400;
              case 78:
                if (v158 < (a4[1] - *a4) >> 3)
                {
                  v105 = *(_QWORD *)(*a4 + 8 * v158);
                  v108 = *(_QWORD *)(v105 + 32);
                  v106 = v105 + 32;
                  v107 = v108;
                  if (v108)
                  {
                    v109 = v106;
                    do
                    {
                      v110 = *(_DWORD *)(v107 + 32);
                      v111 = v110 < 6;
                      if (v110 >= 6)
                        v112 = (uint64_t *)v107;
                      else
                        v112 = (uint64_t *)(v107 + 8);
                      if (!v111)
                        v109 = v107;
                      v107 = *v112;
                    }
                    while (*v112);
                    if (v109 != v106 && *(int *)(v109 + 32) <= 6)
                      std::string::push_back(&v163, *(_BYTE *)(v109 + 40));
                  }
                  std::string::push_back(&v163, 78);
                }
                goto LABEL_400;
              case 79:
                if ((*(_BYTE *)(*(_QWORD *)(*a4 + 8 * a5) + 73) & 8) == 0
                  || !CoreNLP::TaggingFeatureExtractor::isInGazetter(v155, 0x2000000000, a4, a5, 2, v154))
                {
                  goto LABEL_399;
                }
                goto LABEL_131;
              case 80:
                if ((*(_BYTE *)(*(_QWORD *)(*a4 + 8 * a5) + 73) & 8) == 0)
                  goto LABEL_399;
                v57 = CoreNLP::TaggingFeatureExtractor::isInGazetter(v155, 0x4000000000, a4, a5, 3, v154);
                goto LABEL_130;
              case 81:
                if ((*(_BYTE *)(*(_QWORD *)(*a4 + 8 * a5) + 73) & 8) == 0)
                  goto LABEL_399;
                v57 = CoreNLP::TaggingFeatureExtractor::isInGazetter(v155, 0x8000000000, a4, a5, 3, v154);
LABEL_130:
                if ((v57 & 1) != 0)
LABEL_131:
                  std::string::push_back(&v163, 1);
                goto LABEL_399;
              case 82:
                if (!a5)
                  goto LABEL_399;
                v55 = *a4;
                v56 = a5 - 1;
                goto LABEL_156;
              case 83:
                v55 = *a4;
                if (v161 >= (a4[1] - *a4) >> 3)
                  goto LABEL_399;
                v56 = a5 + 1;
LABEL_156:
                v23 = (const std::string *)(*(_QWORD *)(v55 + 8 * v56) + 80);
LABEL_157:
                std::string::operator=(&v163, v23);
                goto LABEL_399;
              case 112:
                goto LABEL_209;
              case 113:
                goto LABEL_208;
              case 114:
                goto LABEL_150;
              case 115:
                v21 = 0;
                goto LABEL_209;
              case 116:
                v21 = 0;
LABEL_208:
                v22 = 3;
                goto LABEL_209;
              case 117:
                v21 = 0;
LABEL_150:
                v22 = 2;
LABEL_209:
                CoreNLP::extractAffixLetters(&v163, (uint64_t *)(v14 + 80), v22, v21);
                goto LABEL_399;
              case 118:
                v121 = 0;
                do
                {
                  if (*(char *)(v14 + 103) < 0)
                    v122 = *(_QWORD *)(v14 + 88);
                  else
                    v122 = *(unsigned __int8 *)(v14 + 103);
                  if (v122 <= v121)
                    break;
                  CoreNLP::extractLetters((std::string *)(v14 + 80), 1, v121, (std::string *)&v166);
                  end_high = SHIBYTE(v166.__end_);
                  if (SHIBYTE(v166.__end_) >= 0)
                    begin = (std::__split_buffer<std::string>::pointer)HIBYTE(v166.__end_);
                  else
                    begin = v166.__begin_;
                  if (begin)
                  {
                    v125 = *(_QWORD *)(a7 + 8);
                    if (v125 >= *(_QWORD *)(a7 + 16))
                    {
                      v127 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a7, (__int128 *)&v166);
                    }
                    else
                    {
                      if (SHIBYTE(v166.__end_) < 0)
                      {
                        std::string::__init_copy_ctor_external(*(std::string **)(a7 + 8), (const std::string::value_type *)v166.__first_, (std::string::size_type)v166.__begin_);
                      }
                      else
                      {
                        v126 = *(_OWORD *)&v166.__first_;
                        *(_QWORD *)(v125 + 16) = v166.__end_;
                        *(_OWORD *)v125 = v126;
                      }
                      v127 = v125 + 24;
                      *(_QWORD *)(a7 + 8) = v125 + 24;
                    }
                    *(_QWORD *)(a7 + 8) = v127;
                    v128 = HIBYTE(v166.__end_);
                    end_high = SHIBYTE(v166.__end_);
                    if (SHIBYTE(v166.__end_) < 0)
                      v128 = (int)v166.__begin_;
                    v121 += v128;
                  }
                  if (end_high < 0)
                    operator delete(v166.__first_);
                }
                while (begin);
                goto LABEL_400;
              case 119:
                if (a5)
                  std::string::operator=(&v163, (const std::string *)(*(_QWORD *)(*a4 + 8 * v159) + 80));
                goto LABEL_246;
              case 120:
                std::string::operator=(&v163, (const std::string *)(v14 + 80));
                std::string::push_back(&v163, 32);
                goto LABEL_314;
              case 121:
                if (a5)
                  std::string::operator=(&v163, (const std::string *)(*(_QWORD *)(*a4 + 8 * v159) + 80));
                std::string::push_back(&v163, 32);
                v113 = *(char *)(v14 + 103);
                if (v113 >= 0)
                  v114 = (const std::string::value_type *)(v14 + 80);
                else
                  v114 = *(const std::string::value_type **)(v14 + 80);
                if (v113 >= 0)
                  v115 = *(unsigned __int8 *)(v14 + 103);
                else
                  v115 = *(_QWORD *)(v14 + 88);
                std::string::append(&v163, v114, v115);
LABEL_314:
                v40 = *a4;
                if (v161 >= (a4[1] - *a4) >> 3)
                  goto LABEL_399;
                v41 = a5 + 1;
                goto LABEL_316;
              case 122:
                std::string::operator=(&v163, (const std::string *)(v14 + 80));
                std::string::push_back(&v163, 32);
                if (v161 < (a4[1] - *a4) >> 3)
                {
                  v33 = *(_QWORD *)(*a4 + 8 * v161);
                  v36 = *(const std::string::value_type **)(v33 + 80);
                  v34 = v33 + 80;
                  v35 = v36;
                  v37 = *(char *)(v34 + 23);
                  if (v37 >= 0)
                    v38 = (const std::string::value_type *)v34;
                  else
                    v38 = v35;
                  if (v37 >= 0)
                    v39 = *(unsigned __int8 *)(v34 + 23);
                  else
                    v39 = *(_QWORD *)(v34 + 8);
                  std::string::append(&v163, v38, v39);
                }
                std::string::push_back(&v163, 32);
                v40 = *a4;
                if (v158 >= (a4[1] - *a4) >> 3)
                  goto LABEL_399;
                v41 = a5 + 2;
LABEL_316:
                v116 = *(_QWORD *)(v40 + 8 * v41);
                v119 = *(const std::string::value_type **)(v116 + 80);
                v117 = v116 + 80;
                v118 = v119;
                v120 = *(char *)(v117 + 23);
                if (v120 >= 0)
                  v85 = (const std::string::value_type *)v117;
                else
                  v85 = v118;
                if (v120 >= 0)
                  v86 = *(unsigned __int8 *)(v117 + 23);
                else
                  v86 = *(_QWORD *)(v117 + 8);
LABEL_322:
                std::string::append(&v163, v85, v86);
                goto LABEL_399;
              case 123:
                if (a5 >= 2)
                  std::string::operator=(&v163, (const std::string *)(*(_QWORD *)(*a4 + 8 * v156) + 80));
                std::string::push_back(&v163, 32);
                if (a5)
                  std::string::operator=(&v163, (const std::string *)(*(_QWORD *)(*a4 + 8 * v159) + 80));
LABEL_246:
                std::string::push_back(&v163, 32);
                v84 = *(char *)(v14 + 103);
                if (v84 >= 0)
                  v85 = (const std::string::value_type *)(v14 + 80);
                else
                  v85 = *(const std::string::value_type **)(v14 + 80);
                if (v84 >= 0)
                  v86 = *(unsigned __int8 *)(v14 + 103);
                else
                  v86 = *(_QWORD *)(v14 + 88);
                goto LABEL_322;
              case 124:
                CoreNLP::TaggingFeatureExtractor::posFeature(*(CoreNLP::NLAttributedToken **)(*a4 + 8 * a5), &v166);
                v28 = HIBYTE(v166.__end_);
                if (SHIBYTE(v166.__end_) >= 0)
                  v31 = HIBYTE(v166.__end_);
                else
                  v31 = (std::string::size_type)v166.__begin_;
                if (!v31)
                  goto LABEL_290;
                if (SHIBYTE(v166.__end_) >= 0)
                  first = (const std::string::value_type *)&v166;
                else
                  first = (const std::string::value_type *)v166.__first_;
                std::string::append(&v163, first, v31);
                std::string::push_back(&v163, 124);
                goto LABEL_289;
              case 125:
                if (a5 < 2 || v156 >= (a4[1] - *a4) >> 3)
                  goto LABEL_400;
                CoreNLP::TaggingFeatureExtractor::posFeature(*(CoreNLP::NLAttributedToken **)(*a4 + 8 * v156), &v166);
                v28 = HIBYTE(v166.__end_);
                if (SHIBYTE(v166.__end_) >= 0)
                  v29 = HIBYTE(v166.__end_);
                else
                  v29 = (std::string::size_type)v166.__begin_;
                if (!v29)
                  goto LABEL_290;
                if (SHIBYTE(v166.__end_) >= 0)
                  v30 = (const std::string::value_type *)&v166;
                else
                  v30 = (const std::string::value_type *)v166.__first_;
                std::string::append(&v163, v30, v29);
                std::string::push_back(&v163, 125);
                goto LABEL_289;
              case 126:
                if (!a5 || v159 >= (a4[1] - *a4) >> 3)
                  goto LABEL_400;
                CoreNLP::TaggingFeatureExtractor::posFeature(*(CoreNLP::NLAttributedToken **)(*a4 + 8 * v159), &v166);
                v28 = HIBYTE(v166.__end_);
                if (SHIBYTE(v166.__end_) >= 0)
                  v58 = HIBYTE(v166.__end_);
                else
                  v58 = (std::string::size_type)v166.__begin_;
                if (!v58)
                  goto LABEL_290;
                if (SHIBYTE(v166.__end_) >= 0)
                  v59 = (const std::string::value_type *)&v166;
                else
                  v59 = (const std::string::value_type *)v166.__first_;
                std::string::append(&v163, v59, v58);
                std::string::push_back(&v163, 126);
                goto LABEL_289;
              case 127:
                if (v161 >= (a4[1] - *a4) >> 3)
                  goto LABEL_400;
                CoreNLP::TaggingFeatureExtractor::posFeature(*(CoreNLP::NLAttributedToken **)(*a4 + 8 * v161), &v166);
                v28 = HIBYTE(v166.__end_);
                if (SHIBYTE(v166.__end_) >= 0)
                  v68 = HIBYTE(v166.__end_);
                else
                  v68 = (std::string::size_type)v166.__begin_;
                if (!v68)
                  goto LABEL_290;
                if (SHIBYTE(v166.__end_) >= 0)
                  v69 = (const std::string::value_type *)&v166;
                else
                  v69 = (const std::string::value_type *)v166.__first_;
                std::string::append(&v163, v69, v68);
                std::string::push_back(&v163, 127);
                goto LABEL_289;
              case 128:
                if (v158 >= (a4[1] - *a4) >> 3)
                  goto LABEL_400;
                CoreNLP::TaggingFeatureExtractor::posFeature(*(CoreNLP::NLAttributedToken **)(*a4 + 8 * v158), &v166);
                v28 = HIBYTE(v166.__end_);
                if (SHIBYTE(v166.__end_) >= 0)
                  v103 = HIBYTE(v166.__end_);
                else
                  v103 = (std::string::size_type)v166.__begin_;
                if (!v103)
                  goto LABEL_290;
                if (SHIBYTE(v166.__end_) >= 0)
                  v104 = (const std::string::value_type *)&v166;
                else
                  v104 = (const std::string::value_type *)v166.__first_;
                std::string::append(&v163, v104, v103);
                std::string::push_back(&v163, 0x80);
LABEL_289:
                v28 = HIBYTE(v166.__end_);
LABEL_290:
                if (v28 < 0)
                  operator delete(v166.__first_);
                goto LABEL_400;
              case 129:
                if (a5 && v159 < (a4[1] - *a4) >> 3)
                {
                  CoreNLP::TaggingFeatureExtractor::posFeature(*(CoreNLP::NLAttributedToken **)(*a4 + 8 * v159), &v166);
                  v24 = SHIBYTE(v166.__end_) >= 0
                      ? (const std::string::value_type *)&v166
                      : (const std::string::value_type *)v166.__first_;
                  v25 = SHIBYTE(v166.__end_) >= 0
                      ? (std::__split_buffer<std::string>::pointer)HIBYTE(v166.__end_)
                      : v166.__begin_;
                  std::string::append(&v163, v24, (std::string::size_type)v25);
                  if (SHIBYTE(v166.__end_) < 0)
                    operator delete(v166.__first_);
                }
                std::string::push_back(&v163, 32);
                CoreNLP::TaggingFeatureExtractor::posFeature(*(CoreNLP::NLAttributedToken **)(*a4 + 8 * a5), &v166);
                if (SHIBYTE(v166.__end_) >= 0)
                  v26 = (const std::string::value_type *)&v166;
                else
                  v26 = (const std::string::value_type *)v166.__first_;
                if (SHIBYTE(v166.__end_) >= 0)
                  v27 = HIBYTE(v166.__end_);
                else
                  v27 = (std::string::size_type)v166.__begin_;
                std::string::append(&v163, v26, v27);
                if (SHIBYTE(v166.__end_) < 0)
                  operator delete(v166.__first_);
                if ((*((_BYTE *)&v163.__r_.__value_.__s + 23) & 0x80) != 0)
                {
                  if (v163.__r_.__value_.__l.__size_ <= 1)
                    goto LABEL_385;
                }
                else if (HIBYTE(v163.__r_.__value_.__r.__words[2]) < 2u)
                {
                  goto LABEL_373;
                }
                std::string::push_back(&v163, -127);
                goto LABEL_400;
              case 130:
                CoreNLP::TaggingFeatureExtractor::posFeature(*(CoreNLP::NLAttributedToken **)(*a4 + 8 * a5), &v166);
                if (SHIBYTE(v166.__end_) >= 0)
                  v42 = (const std::string::value_type *)&v166;
                else
                  v42 = (const std::string::value_type *)v166.__first_;
                if (SHIBYTE(v166.__end_) >= 0)
                  v43 = HIBYTE(v166.__end_);
                else
                  v43 = (std::string::size_type)v166.__begin_;
                std::string::append(&v163, v42, v43);
                if (SHIBYTE(v166.__end_) < 0)
                  operator delete(v166.__first_);
                std::string::push_back(&v163, 32);
                if (v161 < (a4[1] - *a4) >> 3)
                {
                  CoreNLP::TaggingFeatureExtractor::posFeature(*(CoreNLP::NLAttributedToken **)(*a4 + 8 * v161), &v166);
                  v44 = SHIBYTE(v166.__end_) >= 0
                      ? (const std::string::value_type *)&v166
                      : (const std::string::value_type *)v166.__first_;
                  v45 = SHIBYTE(v166.__end_) >= 0
                      ? (std::__split_buffer<std::string>::pointer)HIBYTE(v166.__end_)
                      : v166.__begin_;
                  std::string::append(&v163, v44, (std::string::size_type)v45);
                  if (SHIBYTE(v166.__end_) < 0)
                    operator delete(v166.__first_);
                }
                if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
                {
                  if (v163.__r_.__value_.__l.__size_ <= 1)
                    goto LABEL_385;
                }
                else if (HIBYTE(v163.__r_.__value_.__r.__words[2]) < 2u)
                {
                  goto LABEL_373;
                }
                std::string::push_back(&v163, -126);
                goto LABEL_400;
              case 131:
                if (a5)
                {
                  CoreNLP::TaggingFeatureExtractor::posFeature(*(CoreNLP::NLAttributedToken **)(*a4 + 8 * v159), &v166);
                  v70 = SHIBYTE(v166.__end_) >= 0
                      ? (const std::string::value_type *)&v166
                      : (const std::string::value_type *)v166.__first_;
                  v71 = SHIBYTE(v166.__end_) >= 0
                      ? (std::__split_buffer<std::string>::pointer)HIBYTE(v166.__end_)
                      : v166.__begin_;
                  std::string::append(&v163, v70, (std::string::size_type)v71);
                  if (SHIBYTE(v166.__end_) < 0)
                    operator delete(v166.__first_);
                }
                std::string::push_back(&v163, 32);
                CoreNLP::TaggingFeatureExtractor::posFeature(*(CoreNLP::NLAttributedToken **)(*a4 + 8 * a5), &v166);
                if (SHIBYTE(v166.__end_) >= 0)
                  v72 = (const std::string::value_type *)&v166;
                else
                  v72 = (const std::string::value_type *)v166.__first_;
                if (SHIBYTE(v166.__end_) >= 0)
                  v73 = HIBYTE(v166.__end_);
                else
                  v73 = (std::string::size_type)v166.__begin_;
                std::string::append(&v163, v72, v73);
                if (SHIBYTE(v166.__end_) < 0)
                  operator delete(v166.__first_);
                std::string::push_back(&v163, 32);
                if (v161 >= (a4[1] - *a4) >> 3)
                  goto LABEL_238;
                CoreNLP::TaggingFeatureExtractor::posFeature(*(CoreNLP::NLAttributedToken **)(*a4 + 8 * v161), &v166);
                if (SHIBYTE(v166.__end_) >= 0)
                  v74 = (const std::string::value_type *)&v166;
                else
                  v74 = (const std::string::value_type *)v166.__first_;
                if (SHIBYTE(v166.__end_) >= 0)
                  v75 = HIBYTE(v166.__end_);
                else
                  v75 = (std::string::size_type)v166.__begin_;
                goto LABEL_236;
              case 132:
                CoreNLP::TaggingFeatureExtractor::posFeature(*(CoreNLP::NLAttributedToken **)(*a4 + 8 * a5), &v166);
                if (SHIBYTE(v166.__end_) >= 0)
                  v79 = (const std::string::value_type *)&v166;
                else
                  v79 = (const std::string::value_type *)v166.__first_;
                if (SHIBYTE(v166.__end_) >= 0)
                  v80 = HIBYTE(v166.__end_);
                else
                  v80 = (std::string::size_type)v166.__begin_;
                std::string::append(&v163, v79, v80);
                if (SHIBYTE(v166.__end_) < 0)
                  operator delete(v166.__first_);
                std::string::push_back(&v163, 32);
                if (v161 < (a4[1] - *a4) >> 3)
                {
                  CoreNLP::TaggingFeatureExtractor::posFeature(*(CoreNLP::NLAttributedToken **)(*a4 + 8 * v161), &v166);
                  v81 = SHIBYTE(v166.__end_) >= 0
                      ? (const std::string::value_type *)&v166
                      : (const std::string::value_type *)v166.__first_;
                  v82 = SHIBYTE(v166.__end_) >= 0
                      ? (std::__split_buffer<std::string>::pointer)HIBYTE(v166.__end_)
                      : v166.__begin_;
                  std::string::append(&v163, v81, (std::string::size_type)v82);
                  if (SHIBYTE(v166.__end_) < 0)
                    operator delete(v166.__first_);
                }
                std::string::push_back(&v163, 32);
                if (v158 >= (a4[1] - *a4) >> 3)
                  goto LABEL_238;
                CoreNLP::TaggingFeatureExtractor::posFeature(*(CoreNLP::NLAttributedToken **)(*a4 + 8 * v158), &v166);
                if (SHIBYTE(v166.__end_) >= 0)
                  v74 = (const std::string::value_type *)&v166;
                else
                  v74 = (const std::string::value_type *)v166.__first_;
                if (SHIBYTE(v166.__end_) >= 0)
                  v75 = HIBYTE(v166.__end_);
                else
                  v75 = (std::string::size_type)v166.__begin_;
LABEL_236:
                std::string::append(&v163, v74, v75);
                if (SHIBYTE(v166.__end_) < 0)
                  operator delete(v166.__first_);
LABEL_238:
                if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
                {
LABEL_374:
                  if (v163.__r_.__value_.__l.__size_ <= 2)
                  {
LABEL_385:
                    *v163.__r_.__value_.__l.__data_ = 0;
                    v163.__r_.__value_.__l.__size_ = 0;
                    goto LABEL_400;
                  }
                }
                else
                {
                  v83 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
LABEL_372:
                  if (v83 <= 2)
                  {
LABEL_373:
                    v163.__r_.__value_.__s.__data_[0] = 0;
                    *((_BYTE *)&v163.__r_.__value_.__s + 23) = 0;
                    goto LABEL_400;
                  }
                }
LABEL_399:
                std::string::push_back(&v163, v20);
LABEL_400:
                size = HIBYTE(v163.__r_.__value_.__r.__words[2]);
                v136 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
                if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  size = v163.__r_.__value_.__l.__size_;
                if (size)
                {
                  v138 = *(_QWORD *)(a7 + 8);
                  v137 = *(_QWORD *)(a7 + 16);
                  if (v138 >= v137)
                  {
                    v141 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v138 - *(_QWORD *)a7) >> 3);
                    v142 = v141 + 1;
                    if (v141 + 1 > 0xAAAAAAAAAAAAAAALL)
                      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
                    v143 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v137 - *(_QWORD *)a7) >> 3);
                    if (2 * v143 > v142)
                      v142 = 2 * v143;
                    if (v143 >= 0x555555555555555)
                      v144 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v144 = v142;
                    v166.__end_cap_.__value_ = (std::allocator<std::string> *)(a7 + 16);
                    if (v144)
                      v145 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a7 + 16, v144);
                    else
                      v145 = 0;
                    v146 = v145 + v141;
                    v166.__first_ = v145;
                    v166.__begin_ = v146;
                    v166.__end_cap_.__value_ = &v145[v144];
                    v147 = *(_OWORD *)&v163.__r_.__value_.__l.__data_;
                    v146->__r_.__value_.__r.__words[2] = v163.__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v146->__r_.__value_.__l.__data_ = v147;
                    memset(&v163, 0, sizeof(v163));
                    v166.__end_ = v146 + 1;
                    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a7, &v166);
                    v140 = *(_QWORD *)(a7 + 8);
                    std::__split_buffer<std::string>::~__split_buffer(&v166);
                    v136 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
                  }
                  else
                  {
                    v136 = 0;
                    v139 = *(_OWORD *)&v163.__r_.__value_.__l.__data_;
                    *(_QWORD *)(v138 + 16) = *((_QWORD *)&v163.__r_.__value_.__l + 2);
                    *(_OWORD *)v138 = v139;
                    memset(&v163, 0, sizeof(v163));
                    v140 = v138 + 24;
                    *(_QWORD *)(a7 + 8) = v138 + 24;
                  }
                  *(_QWORD *)(a7 + 8) = v140;
                }
                if (v136 < 0)
                  operator delete(v163.__r_.__value_.__l.__data_);
                if (++v16 != v15)
                  continue;
                v16 = v164;
                break;
              case 133:
                if (a5 >= 2)
                {
                  CoreNLP::TaggingFeatureExtractor::posFeature(*(CoreNLP::NLAttributedToken **)(*a4 + 8 * v156), &v166);
                  v129 = SHIBYTE(v166.__end_) >= 0
                       ? (const std::string::value_type *)&v166
                       : (const std::string::value_type *)v166.__first_;
                  v130 = SHIBYTE(v166.__end_) >= 0
                       ? (std::__split_buffer<std::string>::pointer)HIBYTE(v166.__end_)
                       : v166.__begin_;
                  std::string::append(&v163, v129, (std::string::size_type)v130);
                  if (SHIBYTE(v166.__end_) < 0)
                    operator delete(v166.__first_);
                }
                std::string::push_back(&v163, 32);
                if (a5)
                {
                  CoreNLP::TaggingFeatureExtractor::posFeature(*(CoreNLP::NLAttributedToken **)(*a4 + 8 * v159), &v166);
                  v131 = SHIBYTE(v166.__end_) >= 0
                       ? (const std::string::value_type *)&v166
                       : (const std::string::value_type *)v166.__first_;
                  v132 = SHIBYTE(v166.__end_) >= 0
                       ? (std::__split_buffer<std::string>::pointer)HIBYTE(v166.__end_)
                       : v166.__begin_;
                  std::string::append(&v163, v131, (std::string::size_type)v132);
                  if (SHIBYTE(v166.__end_) < 0)
                    operator delete(v166.__first_);
                }
                std::string::push_back(&v163, 32);
                CoreNLP::TaggingFeatureExtractor::posFeature(*(CoreNLP::NLAttributedToken **)(*a4 + 8 * a5), &v166);
                if (SHIBYTE(v166.__end_) >= 0)
                  v133 = (const std::string::value_type *)&v166;
                else
                  v133 = (const std::string::value_type *)v166.__first_;
                if (SHIBYTE(v166.__end_) >= 0)
                  v134 = HIBYTE(v166.__end_);
                else
                  v134 = (std::string::size_type)v166.__begin_;
                std::string::append(&v163, v133, v134);
                if (SHIBYTE(v166.__end_) < 0)
                  operator delete(v166.__first_);
                v83 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
                if ((*((_BYTE *)&v163.__r_.__value_.__s + 23) & 0x80) == 0)
                  goto LABEL_372;
                goto LABEL_374;
              case 134:
                v78 = a6;
                if (a6)
                {
                  CFRetain(a6);
                  v78 = a6;
                }
                applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v162, v78);
                if (v162)
                  applesauce::CF::convert_to<std::string,0>((const __CFString *)v162, (uint64_t)&v166);
                else
                  std::string::basic_string[abi:ne180100]<0>(&v166, "");
                if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v163.__r_.__value_.__l.__data_);
                *(_OWORD *)&v163.__r_.__value_.__l.__data_ = *(_OWORD *)&v166.__first_;
                v163.__r_.__value_.__r.__words[2] = (std::string::size_type)v166.__end_;
                if (v162)
                  CFRelease(v162);
                goto LABEL_400;
              default:
                goto LABEL_400;
            }
            break;
          }
        }
        if (v16)
        {
          v165 = v16;
          operator delete(v16);
        }
      }
    }
  }
}

void sub_191CA6CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30)
{
  if (a28 < 0)
    operator delete(__p);
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void CoreNLP::TaggingFeatureExtractor::extractFeatures_Chinese(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  std::string::size_type size;
  unsigned int v15;
  BOOL v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  std::string *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  std::string *v31;
  __int128 v32;
  std::string __p;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  std::__split_buffer<std::string> __v;

  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  if ((a5 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(a4 + 8);
    if (*(_QWORD *)a4 != v8 && a5 < (v8 - *(_QWORD *)a4) >> 3)
    {
      CoreNLP::TaggingFeatureExtractor::featureIDs((_QWORD *)a1, a2, a3, &v34);
      v11 = v34;
      v12 = v35;
      if (v34 != v35)
      {
        while (1)
        {
          v13 = *v11;
          CoreNLP::TaggingFeatureExtractor::getChineseNERFeature((std::string *)a1, v13, (uint64_t **)a4, a5, &__p);
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = __p.__r_.__value_.__l.__size_;
          if (!size)
            goto LABEL_39;
          v15 = v13 - 94;
          v16 = v15 < 0x12 || *(_QWORD *)(a1 + 384) == 0;
          if (!v16
            && a1 + 376 == std::__tree<std::string>::find<std::string>(a1 + 368, (const void **)&__p.__r_.__value_.__l.__data_))
          {
            goto LABEL_39;
          }
          if (*(_QWORD *)(a1 + 408))
          {
            if (a1 + 400 == std::__tree<std::string>::find<std::string>(a1 + 392, (const void **)&__p.__r_.__value_.__l.__data_))exit(1);
            __v.__first_ = &__p;
            v17 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 392), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&__v);
            if (v15 >= 0x12u && *((_DWORD *)v17 + 14) < 5u)
              goto LABEL_39;
            v18 = *(_QWORD *)(a6 + 8);
            v19 = *(_QWORD *)(a6 + 16);
            if (v18 >= v19)
            {
              v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *(_QWORD *)a6) >> 3);
              v21 = v20 + 1;
              if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
              v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *(_QWORD *)a6) >> 3);
              if (2 * v22 > v21)
                v21 = 2 * v22;
              if (v22 >= 0x555555555555555)
                v23 = 0xAAAAAAAAAAAAAAALL;
              else
                v23 = v21;
              v24 = a6 + 16;
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a6 + 16);
              if (v23)
                goto LABEL_25;
              v25 = 0;
              goto LABEL_37;
            }
          }
          else
          {
            v18 = *(_QWORD *)(a6 + 8);
            v26 = *(_QWORD *)(a6 + 16);
            if (v18 >= v26)
            {
              v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *(_QWORD *)a6) >> 3);
              v29 = v20 + 1;
              if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
              v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *(_QWORD *)a6) >> 3);
              if (2 * v30 > v29)
                v29 = 2 * v30;
              if (v30 >= 0x555555555555555)
                v23 = 0xAAAAAAAAAAAAAAALL;
              else
                v23 = v29;
              v24 = a6 + 16;
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a6 + 16);
              if (v23)
LABEL_25:
                v25 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v24, v23);
              else
                v25 = 0;
LABEL_37:
              v31 = v25 + v20;
              __v.__first_ = v25;
              __v.__begin_ = v31;
              __v.__end_cap_.__value_ = &v25[v23];
              v32 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              v31->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
              memset(&__p, 0, sizeof(__p));
              __v.__end_ = v31 + 1;
              std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a6, &__v);
              v28 = *(_QWORD *)(a6 + 8);
              std::__split_buffer<std::string>::~__split_buffer(&__v);
              goto LABEL_38;
            }
          }
          v27 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v18 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)v18 = v27;
          memset(&__p, 0, sizeof(__p));
          v28 = v18 + 24;
          *(_QWORD *)(a6 + 8) = v18 + 24;
LABEL_38:
          *(_QWORD *)(a6 + 8) = v28;
LABEL_39:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (++v11 == v12)
          {
            v11 = v34;
            break;
          }
        }
      }
      if (v11)
      {
        v35 = v11;
        operator delete(v11);
      }
    }
  }
}

void sub_191CA718C(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, void *a9, uint64_t a10, void *__pa, uint64_t a12, std::__split_buffer<std::string> *a13)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

_QWORD *CoreNLP::TaggingFeatureExtractor::featureIDs@<X0>(_QWORD *result@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  const void *v4;
  uint64_t v5;

  if (a2 == 105)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v4 = (const void *)result[13];
    v5 = result[14];
    return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a4, v4, v5, v5 - (_QWORD)v4);
  }
  if (a2 == 101)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v4 = (const void *)result[10];
    v5 = result[11];
    return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a4, v4, v5, v5 - (_QWORD)v4);
  }
  if (a2 == 104 && a3 == 4)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v4 = (const void *)result[34];
    v5 = result[35];
    return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a4, v4, v5, v5 - (_QWORD)v4);
  }
  switch(a2)
  {
    case 'f':
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v4 = (const void *)result[16];
      v5 = result[17];
      return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a4, v4, v5, v5 - (_QWORD)v4);
    case 'j':
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v4 = (const void *)result[22];
      v5 = result[23];
      return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a4, v4, v5, v5 - (_QWORD)v4);
    case 'g':
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v4 = (const void *)result[19];
      v5 = result[20];
      return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a4, v4, v5, v5 - (_QWORD)v4);
  }
  if ((a2 & 0xFFFFFFFD) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v4 = (const void *)result[28];
    v5 = result[29];
    return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a4, v4, v5, v5 - (_QWORD)v4);
  }
  if (a2 <= 106)
  {
    if (a2 == 1)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v4 = (const void *)result[25];
      v5 = result[26];
      return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a4, v4, v5, v5 - (_QWORD)v4);
    }
    if (a2 == 3)
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v4 = (const void *)result[31];
      v5 = result[32];
      return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a4, v4, v5, v5 - (_QWORD)v4);
    }
  }
  else
  {
    switch(a2)
    {
      case 'k':
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        v4 = (const void *)result[37];
        v5 = result[38];
        return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a4, v4, v5, v5 - (_QWORD)v4);
      case 'l':
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        v4 = (const void *)result[40];
        v5 = result[41];
        return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a4, v4, v5, v5 - (_QWORD)v4);
      case 'm':
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        v4 = (const void *)result[43];
        v5 = result[44];
        return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a4, v4, v5, v5 - (_QWORD)v4);
    }
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  return result;
}

uint64_t CoreNLP::TaggingFeatureExtractor::isInGazetter(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t *v20;
  _BOOL8 v21;
  uint64_t v23;
  std::vector<std::string>::pointer begin;
  uint64_t v25;
  unint64_t v26;
  std::vector<std::string>::pointer end;
  std::string::size_type size;
  std::string *p_p;
  std::string *data;
  uint64_t v31;
  uint64_t v32;
  const std::string::value_type *v33;
  const std::string::value_type *v34;
  int v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string *v38;
  char *v39;
  char v40;
  std::vector<std::string>::pointer v41;
  std::string::size_type v42;
  std::string *v43;
  uint64_t v44;
  __int128 *v45;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  std::string *v50;
  std::string *v51;
  std::string *v52;
  std::string::size_type v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  std::string *v58;
  std::string::size_type v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  std::string __p;
  std::vector<std::string> v65;
  std::__split_buffer<std::string> __v;
  _QWORD v67[3];

  v67[2] = *MEMORY[0x1E0C80C00];
  if (a2 != 0x2000000000 && a2 != 0x8000000000 && a2 != 0x4000000000)
    return 0;
  v9 = a2 == 0x4000000000 ? a1 + 32 : a1 + 56;
  v10 = a2 == 0x2000000000 ? a1 + 8 : v9;
  v13 = *(_QWORD *)(v10 + 8);
  v11 = v10 + 8;
  v12 = v13;
  if (!v13)
    return 0;
  v14 = a5;
  v15 = a4;
  v17 = v11;
  do
  {
    v18 = *(_DWORD *)(v12 + 32);
    v19 = v18 < a6;
    if (v18 >= a6)
      v20 = (uint64_t *)v12;
    else
      v20 = (uint64_t *)(v12 + 8);
    if (!v19)
      v17 = v12;
    v12 = *v20;
  }
  while (*v20);
  if (v17 == v11 || *(_DWORD *)(v17 + 32) > a6)
    return 0;
  v23 = *a3;
  if ((*(_QWORD *)(*(_QWORD *)(*a3 + 8 * a4) + 72) & a2) != 0)
    return 1;
  begin = 0;
  memset(&v65, 0, sizeof(v65));
  if (a5 < 1 || (a4 & 0x8000000000000000) != 0)
  {
    end = 0;
  }
  else
  {
    v25 = a3[1];
    while (1)
    {
      v26 = v15;
      end = v65.__end_;
      if (v15 >= (v25 - v23) >> 3)
        break;
      if (v65.__begin_ == v65.__end_)
      {
        v44 = *(_QWORD *)(v23 + 8 * v15);
        v45 = (__int128 *)(v44 + 80);
        if (v65.__end_ >= v65.__end_cap_.__value_)
        {
          v51 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v65, v45);
        }
        else
        {
          if (*(char *)(v44 + 103) < 0)
          {
            std::string::__init_copy_ctor_external(v65.__end_, *(const std::string::value_type **)(v44 + 80), *(_QWORD *)(v44 + 88));
          }
          else
          {
            v46 = *v45;
            v65.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)(v44 + 96);
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v46;
          }
          v51 = end + 1;
        }
        v65.__end_ = v51;
      }
      else
      {
        if ((v65.__end_[-1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v65.__end_[-1].__r_.__value_.__r.__words[2]);
        else
          size = v65.__end_[-1].__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 1);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (size)
        {
          if ((end[-1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            data = end - 1;
          else
            data = (std::string *)end[-1].__r_.__value_.__l.__data_;
          memmove(p_p, data, size);
        }
        *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + size) = 32;
        v31 = *(_QWORD *)(*a3 + 8 * v26);
        v34 = *(const std::string::value_type **)(v31 + 80);
        v32 = v31 + 80;
        v33 = v34;
        v35 = *(char *)(v32 + 23);
        if (v35 >= 0)
          v36 = (const std::string::value_type *)v32;
        else
          v36 = v33;
        if (v35 >= 0)
          v37 = *(unsigned __int8 *)(v32 + 23);
        else
          v37 = *(_QWORD *)(v32 + 8);
        v38 = std::string::append(&__p, v36, v37);
        v39 = (char *)v38->__r_.__value_.__r.__words[0];
        v67[0] = v38->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v67 + 7) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
        v40 = HIBYTE(v38->__r_.__value_.__r.__words[2]);
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        v41 = v65.__end_;
        if (v65.__end_ >= v65.__end_cap_.__value_)
        {
          v47 = 0xAAAAAAAAAAAAAAABLL * (((char *)v65.__end_ - (char *)v65.__begin_) >> 3);
          v48 = v47 + 1;
          if (v47 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v65.__end_cap_.__value_ - (char *)v65.__begin_) >> 3) > v48)
            v48 = 0x5555555555555556 * (((char *)v65.__end_cap_.__value_ - (char *)v65.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v65.__end_cap_.__value_ - (char *)v65.__begin_) >> 3) >= 0x555555555555555)
            v49 = 0xAAAAAAAAAAAAAAALL;
          else
            v49 = v48;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v65.__end_cap_;
          if (v49)
            v50 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v65.__end_cap_, v49);
          else
            v50 = 0;
          v52 = v50 + v47;
          __v.__first_ = v50;
          __v.__begin_ = v52;
          __v.__end_cap_.__value_ = &v50[v49];
          v53 = v67[0];
          v52->__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
          v52->__r_.__value_.__l.__size_ = v53;
          *(std::string::size_type *)((char *)&v52->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v67 + 7);
          *((_BYTE *)&v52->__r_.__value_.__s + 23) = v40;
          __v.__end_ = v52 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v65, &__v);
          v43 = v65.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        else
        {
          v42 = v67[0];
          v65.__end_->__r_.__value_.__l.__data_ = v39;
          v41->__r_.__value_.__l.__size_ = v42;
          *(std::string::size_type *)((char *)&v41->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v67 + 7);
          *((_BYTE *)&v41->__r_.__value_.__s + 23) = v40;
          v43 = v41 + 1;
        }
        v65.__end_ = v43;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v15 = v26 + 1;
      v23 = *a3;
      v25 = a3[1];
      if (v26 + 1 < (v25 - *a3) >> 3
        && (v54 = *(_QWORD *)(v23 + 8 * v26 + 8), (*(_BYTE *)(v54 + 73) & 2) != 0)
        && *(_QWORD *)(v54 + 8) == 1)
      {
        v14 += 2;
      }
      else
      {
        v55 = *(_QWORD *)(v23 + 8 * v26);
        if ((*(_BYTE *)(v55 + 72) & 0x80) != 0 && *(uint64_t *)(v55 + 8) > 1)
          ++v14;
      }
      v19 = v14-- <= 1;
      if (v19)
      {
        end = v65.__end_;
        break;
      }
    }
    begin = v65.__begin_;
  }
  LODWORD(end) = -1431655765 * (((char *)end - (char *)begin) >> 3);
  v56 = end;
  while (1)
  {
    v21 = (int)end > 0;
    v57 = __OFSUB__((_DWORD)end, 1);
    end = (std::vector<std::string>::pointer)((_DWORD)end - 1);
    if ((int)end < 0 != v57)
      break;
    v58 = &v65.__begin_[v56 - 1];
    if (SHIBYTE(v65.__begin_[v56 - 1].__r_.__value_.__r.__words[2]) < 0)
    {
      v58 = (std::string *)v58->__r_.__value_.__r.__words[0];
      v59 = v65.__begin_[v56 - 1].__r_.__value_.__l.__size_;
    }
    else
    {
      v59 = HIBYTE(v65.__begin_[v56 - 1].__r_.__value_.__r.__words[2]);
    }
    --v56;
    if (BloomFilter::possiblyContains((BloomFilter *)(v17 + 40), (const char *)v58, v59))
    {
      v60 = 0x5555555555555555 * (((char *)v65.__end_ - (char *)v65.__begin_) >> 3);
      v61 = *a3;
      v62 = (_DWORD)end + 1;
      do
      {
        v63 = *(_QWORD *)(v61 + 8 * ((_QWORD)end + v15 + v60));
        *(_QWORD *)(v63 + 72) |= a2;
        end = (std::vector<std::string>::pointer)((char *)end - 1);
        --v62;
      }
      while (v62 > 0);
      break;
    }
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v65;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  return v21;
}

void sub_191CA77C8(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, char a7, uint64_t a8, char *__pa, std::__split_buffer<std::string> *a10, uint64_t a11, char a12)
{
  __pa = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

_QWORD *CoreNLP::TaggingFeatureExtractor::posFeature@<X0>(CoreNLP::NLAttributedToken *a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  int v8;
  BOOL v9;
  char **v10;
  char *v11;
  unsigned int v12;

  if (!a1)
    goto LABEL_12;
  v6 = (char *)*((_QWORD *)a1 + 4);
  v4 = (char *)a1 + 32;
  v5 = v6;
  if (!v6)
    goto LABEL_12;
  v7 = v4;
  do
  {
    v8 = *((_DWORD *)v5 + 8);
    v9 = v8 < 6;
    if (v8 >= 6)
      v10 = (char **)v5;
    else
      v10 = (char **)(v5 + 8);
    if (!v9)
      v7 = v5;
    v5 = *v10;
  }
  while (*v10);
  if (v7 != v4 && *((int *)v7 + 8) <= 6)
  {
    v12 = *((_DWORD *)v7 + 10) - 16;
    if (v12 > 0x32)
      v11 = "OtherWord";
    else
      v11 = off_1E2DF45D0[v12];
  }
  else
  {
LABEL_12:
    v11 = "";
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v11);
}

void CoreNLP::TaggingFeatureExtractor::collectFeatures(uint64_t a1, int a2, int a3, uint64_t a4, unint64_t a5)
{
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  std::string::size_type size;
  BOOL v13;
  uint64_t *v14;
  int v15;
  std::string __p;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  std::string *p_p;

  if (a2 == 7 && a3 == 4 && (a5 & 0x8000000000000000) == 0)
  {
    v7 = *(_QWORD *)(a4 + 8);
    if (*(_QWORD *)a4 != v7 && a5 < (v7 - *(_QWORD *)a4) >> 3)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v17, *(const void **)(a1 + 272), *(_QWORD *)(a1 + 280), *(_QWORD *)(a1 + 280) - *(_QWORD *)(a1 + 272));
      v9 = v17;
      v10 = v18;
      if (v17 != v18)
      {
        do
        {
          v11 = *v9;
          CoreNLP::TaggingFeatureExtractor::getChineseNERFeature((std::string *)a1, v11, (uint64_t **)a4, a5, &__p);
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = __p.__r_.__value_.__l.__size_;
          if (size)
          {
            v13 = (v11 - 94) < 0x12 || *(_QWORD *)(a1 + 384) == 0;
            if (v13
              || a1 + 376 != std::__tree<std::string>::find<std::string>(a1 + 368, (const void **)&__p.__r_.__value_.__l.__data_))
            {
              if (a1 + 400 == std::__tree<std::string>::find<std::string>(a1 + 392, (const void **)&__p.__r_.__value_.__l.__data_))
              {
                p_p = &__p;
                v14 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 392), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
                v15 = 1;
              }
              else
              {
                p_p = &__p;
                v14 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 392), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
                v15 = *((_DWORD *)v14 + 14) + 1;
              }
              *((_DWORD *)v14 + 14) = v15;
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          ++v9;
        }
        while (v9 != v10);
        v9 = v17;
      }
      if (v9)
      {
        v18 = v9;
        operator delete(v9);
      }
    }
  }
}

void sub_191CA7A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

std::string *CoreNLP::TaggingFeatureExtractor::getChineseNERFeature@<X0>(std::string *result@<X0>, int a2@<W1>, uint64_t **a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  uint64_t v8;
  const std::string::value_type *p_p;
  std::string::size_type v10;
  uint64_t v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  uint64_t v14;
  uint64_t v15;
  const std::string::value_type *v16;
  const std::string::value_type *v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  uint64_t v23;
  uint64_t v24;
  const std::string::value_type *v25;
  const std::string::value_type *v26;
  int v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  uint64_t v32;
  const std::string::value_type *v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  uint64_t v36;
  uint64_t v37;
  const std::string::value_type *v38;
  const std::string::value_type *v39;
  int v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  const std::string::value_type *v45;
  std::string::size_type v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  uint64_t *v51;
  uint64_t v52;
  const std::string::value_type *v53;
  std::string::size_type v54;
  int v55;
  const std::string::value_type *v56;
  std::string::size_type v57;
  const std::string::value_type *v58;
  std::string::size_type v59;
  const std::string::value_type *v60;
  std::string::size_type v61;
  const std::string::value_type *v62;
  std::string::size_type v63;
  const std::string::value_type *v64;
  std::string::size_type v65;
  const std::string::value_type *v66;
  std::string::size_type v67;
  const std::string::value_type *v68;
  std::string::size_type v69;
  const std::string::value_type *v70;
  std::string::size_type v71;
  const std::string::value_type *v72;
  std::string::size_type v73;
  const std::string::value_type *v74;
  std::string::size_type v75;
  const std::string::value_type *v76;
  std::string::size_type v77;
  const std::string::value_type *v78;
  std::string::size_type v79;
  const std::string::value_type *v80;
  std::string::size_type v81;
  const std::string::value_type *v82;
  std::string::size_type v83;
  const std::string::value_type *v84;
  std::string::size_type v85;
  const std::string::value_type *v86;
  std::string::size_type v87;
  const std::string::value_type *v88;
  std::string::size_type v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const std::string::value_type *v93;
  const std::string::value_type *v94;
  int v95;
  const std::string::value_type *v96;
  std::string::size_type v97;
  uint64_t v98;
  uint64_t v99;
  const std::string::value_type *v100;
  const std::string::value_type *v101;
  int v102;
  const std::string::value_type *v103;
  std::string::size_type v104;
  uint64_t v105;
  const std::string::value_type *v106;
  const std::string::value_type *v107;
  int v108;
  const std::string::value_type *v109;
  std::string::size_type v110;
  void *__p;
  std::string::size_type v112;
  unsigned __int8 v113;

  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  v8 = (uint64_t)result;
  switch(a2)
  {
    case 'T':
      CoreNLP::to_twoDigitString((CoreNLP *)1);
      if ((v113 & 0x80u) == 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v10 = v113;
      else
        v10 = v112;
      std::string::append(a5, p_p, v10);
      if ((char)v113 < 0)
        operator delete(__p);
      if (!a4)
      {
        v33 = "BOSBOS";
        return std::string::append(a5, v33);
      }
      if (a4 == 1)
      {
        std::string::append(a5, "BOS");
        v11 = **a3;
        goto LABEL_307;
      }
      v98 = (*a3)[a4 - 2];
      v101 = *(const std::string::value_type **)(v98 + 80);
      v99 = v98 + 80;
      v100 = v101;
      v102 = *(char *)(v99 + 23);
      if (v102 >= 0)
        v103 = (const std::string::value_type *)v99;
      else
        v103 = v100;
      if (v102 >= 0)
        v104 = *(unsigned __int8 *)(v99 + 23);
      else
        v104 = *(_QWORD *)(v99 + 8);
      std::string::append(a5, v103, v104);
      goto LABEL_304;
    case 'U':
      CoreNLP::to_twoDigitString((CoreNLP *)2);
      if ((v113 & 0x80u) == 0)
        v12 = (const std::string::value_type *)&__p;
      else
        v12 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v13 = v113;
      else
        v13 = v112;
      std::string::append(a5, v12, v13);
      if ((char)v113 < 0)
        operator delete(__p);
      if (a4)
      {
        v14 = (*a3)[a4 - 1];
        v17 = *(const std::string::value_type **)(v14 + 80);
        v15 = v14 + 80;
        v16 = v17;
        v18 = *(char *)(v15 + 23);
        if (v18 >= 0)
          v19 = (const std::string::value_type *)v15;
        else
          v19 = v16;
        if (v18 >= 0)
          v20 = *(unsigned __int8 *)(v15 + 23);
        else
          v20 = *(_QWORD *)(v15 + 8);
        std::string::append(a5, v19, v20);
      }
      else
      {
        std::string::append(a5, "BOS");
      }
      goto LABEL_291;
    case 'V':
      CoreNLP::to_twoDigitString((CoreNLP *)3);
      if ((v113 & 0x80u) == 0)
        v21 = (const std::string::value_type *)&__p;
      else
        v21 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v22 = v113;
      else
        v22 = v112;
      std::string::append(a5, v21, v22);
      if ((char)v113 < 0)
        operator delete(__p);
      v23 = (*a3)[a4];
      v26 = *(const std::string::value_type **)(v23 + 80);
      v24 = v23 + 80;
      v25 = v26;
      v27 = *(char *)(v24 + 23);
      if (v27 >= 0)
        v28 = (const std::string::value_type *)v24;
      else
        v28 = v25;
      if (v27 >= 0)
        v29 = *(unsigned __int8 *)(v24 + 23);
      else
        v29 = *(_QWORD *)(v24 + 8);
      goto LABEL_43;
    case 'W':
      CoreNLP::to_twoDigitString((CoreNLP *)4);
      if ((v113 & 0x80u) == 0)
        v30 = (const std::string::value_type *)&__p;
      else
        v30 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v31 = v113;
      else
        v31 = v112;
      std::string::append(a5, v30, v31);
      if ((char)v113 < 0)
        operator delete(__p);
      v32 = a3[1] - *a3;
      if (v32 - 1 == a4)
      {
        v33 = "EOSEOS";
        return std::string::append(a5, v33);
      }
      v90 = v32 - 2;
      v91 = (*a3)[a4 + 1];
      v94 = *(const std::string::value_type **)(v91 + 80);
      v92 = v91 + 80;
      v93 = v94;
      v95 = *(char *)(v92 + 23);
      if (v95 >= 0)
        v96 = (const std::string::value_type *)v92;
      else
        v96 = v93;
      if (v95 >= 0)
        v97 = *(unsigned __int8 *)(v92 + 23);
      else
        v97 = *(_QWORD *)(v92 + 8);
      if (v90 == a4)
      {
        std::string::append(a5, v96, v97);
LABEL_294:
        v33 = "EOS";
        return std::string::append(a5, v33);
      }
      std::string::append(a5, v96, v97);
      v51 = *a3;
LABEL_306:
      v11 = v51[a4 + 2];
      goto LABEL_307;
    case 'X':
      CoreNLP::to_twoDigitString((CoreNLP *)5);
      if ((v113 & 0x80u) == 0)
        v34 = (const std::string::value_type *)&__p;
      else
        v34 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v35 = v113;
      else
        v35 = v112;
      std::string::append(a5, v34, v35);
      if ((char)v113 < 0)
        operator delete(__p);
      if (a4)
      {
        v36 = (*a3)[a4 - 1];
        v39 = *(const std::string::value_type **)(v36 + 80);
        v37 = v36 + 80;
        v38 = v39;
        v40 = *(char *)(v37 + 23);
        if (v40 >= 0)
          v28 = (const std::string::value_type *)v37;
        else
          v28 = v38;
        if (v40 >= 0)
          v29 = *(unsigned __int8 *)(v37 + 23);
        else
          v29 = *(_QWORD *)(v37 + 8);
LABEL_43:
        std::string::append(a5, v28, v29);
      }
      else
      {
        std::string::append(a5, "BOS");
      }
      goto LABEL_293;
    case 'Y':
      CoreNLP::to_twoDigitString((CoreNLP *)6);
      if ((v113 & 0x80u) == 0)
        v41 = (const std::string::value_type *)&__p;
      else
        v41 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v42 = v113;
      else
        v42 = v112;
      std::string::append(a5, v41, v42);
      if ((char)v113 < 0)
        operator delete(__p);
      if (a4 < 2)
        goto LABEL_88;
      v11 = (*a3)[a4 - 2];
      goto LABEL_307;
    case 'Z':
      CoreNLP::to_twoDigitString((CoreNLP *)7);
      if ((v113 & 0x80u) == 0)
        v43 = (const std::string::value_type *)&__p;
      else
        v43 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v44 = v113;
      else
        v44 = v112;
      std::string::append(a5, v43, v44);
      if ((char)v113 < 0)
        operator delete(__p);
      if (a4)
      {
LABEL_304:
        v11 = (*a3)[a4 - 1];
LABEL_307:
        v107 = *(const std::string::value_type **)(v11 + 80);
        v105 = v11 + 80;
        v106 = v107;
        v108 = *(char *)(v105 + 23);
        if (v108 >= 0)
          v109 = (const std::string::value_type *)v105;
        else
          v109 = v106;
        if (v108 >= 0)
          v110 = *(unsigned __int8 *)(v105 + 23);
        else
          v110 = *(_QWORD *)(v105 + 8);
        return std::string::append(a5, v109, v110);
      }
      else
      {
LABEL_88:
        v33 = "BOS";
        return std::string::append(a5, v33);
      }
    case '[':
      CoreNLP::to_twoDigitString((CoreNLP *)8);
      if ((v113 & 0x80u) == 0)
        v45 = (const std::string::value_type *)&__p;
      else
        v45 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v46 = v113;
      else
        v46 = v112;
      std::string::append(a5, v45, v46);
      if ((char)v113 < 0)
        operator delete(__p);
LABEL_291:
      v11 = (*a3)[a4];
      goto LABEL_307;
    case '\\':
      CoreNLP::to_twoDigitString((CoreNLP *)9);
      if ((v113 & 0x80u) == 0)
        v47 = (const std::string::value_type *)&__p;
      else
        v47 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v48 = v113;
      else
        v48 = v112;
      std::string::append(a5, v47, v48);
      if ((char)v113 < 0)
        operator delete(__p);
LABEL_293:
      if (a3[1] - *a3 - 1 == a4)
        goto LABEL_294;
      v11 = (*a3)[a4 + 1];
      goto LABEL_307;
    case ']':
      CoreNLP::to_twoDigitString((CoreNLP *)0xA);
      if ((v113 & 0x80u) == 0)
        v49 = (const std::string::value_type *)&__p;
      else
        v49 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v50 = v113;
      else
        v50 = v112;
      std::string::append(a5, v49, v50);
      if ((char)v113 < 0)
        operator delete(__p);
      v51 = *a3;
      v52 = a3[1] - *a3;
      v33 = "EOS";
      if (v52 - 1 == a4 || v52 - 2 == a4)
        return std::string::append(a5, v33);
      goto LABEL_306;
    case '^':
      CoreNLP::to_twoDigitString((CoreNLP *)0xB);
      if ((v113 & 0x80u) == 0)
        v53 = (const std::string::value_type *)&__p;
      else
        v53 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v54 = v113;
      else
        v54 = v112;
      std::string::append(a5, v53, v54);
      if ((char)v113 < 0)
        operator delete(__p);
      v55 = CoreNLP::TaggingFeatureExtractor::isInChineseGazetter(v8, 0x2000000000, a3, a4, 2, 4);
      goto LABEL_278;
    case '_':
      CoreNLP::to_twoDigitString((CoreNLP *)0xC);
      if ((v113 & 0x80u) == 0)
        v56 = (const std::string::value_type *)&__p;
      else
        v56 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v57 = v113;
      else
        v57 = v112;
      std::string::append(a5, v56, v57);
      if ((char)v113 < 0)
        operator delete(__p);
      v55 = CoreNLP::TaggingFeatureExtractor::isInChineseGazetter(v8, 0x4000000000, a3, a4, 2, 4);
      goto LABEL_278;
      CoreNLP::to_twoDigitString((CoreNLP *)0xD);
      if ((v113 & 0x80u) == 0)
        v58 = (const std::string::value_type *)&__p;
      else
        v58 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v59 = v113;
      else
        v59 = v112;
      std::string::append(a5, v58, v59);
      if ((char)v113 < 0)
        operator delete(__p);
      v55 = CoreNLP::TaggingFeatureExtractor::isInChineseGazetter(v8, 0x8000000000, a3, a4, 2, 4);
      goto LABEL_278;
    case 'a':
      CoreNLP::to_twoDigitString((CoreNLP *)0xE);
      if ((v113 & 0x80u) == 0)
        v60 = (const std::string::value_type *)&__p;
      else
        v60 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v61 = v113;
      else
        v61 = v112;
      std::string::append(a5, v60, v61);
      if ((char)v113 < 0)
        operator delete(__p);
      v55 = CoreNLP::TaggingFeatureExtractor::isInChineseGazetter(v8, 0x2000000000, a3, a4, 3, 4);
      goto LABEL_278;
    case 'b':
      CoreNLP::to_twoDigitString((CoreNLP *)0xF);
      if ((v113 & 0x80u) == 0)
        v62 = (const std::string::value_type *)&__p;
      else
        v62 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v63 = v113;
      else
        v63 = v112;
      std::string::append(a5, v62, v63);
      if ((char)v113 < 0)
        operator delete(__p);
      v55 = CoreNLP::TaggingFeatureExtractor::isInChineseGazetter(v8, 0x4000000000, a3, a4, 3, 4);
      goto LABEL_278;
    case 'c':
      CoreNLP::to_twoDigitString((CoreNLP *)0x10);
      if ((v113 & 0x80u) == 0)
        v64 = (const std::string::value_type *)&__p;
      else
        v64 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v65 = v113;
      else
        v65 = v112;
      std::string::append(a5, v64, v65);
      if ((char)v113 < 0)
        operator delete(__p);
      v55 = CoreNLP::TaggingFeatureExtractor::isInChineseGazetter(v8, 0x8000000000, a3, a4, 3, 4);
      goto LABEL_278;
    case 'd':
      CoreNLP::to_twoDigitString((CoreNLP *)0x11);
      if ((v113 & 0x80u) == 0)
        v66 = (const std::string::value_type *)&__p;
      else
        v66 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v67 = v113;
      else
        v67 = v112;
      std::string::append(a5, v66, v67);
      if ((char)v113 < 0)
        operator delete(__p);
      v55 = CoreNLP::TaggingFeatureExtractor::isInChineseGazetter(v8, 0x2000000000, a3, a4, 4, 4);
      goto LABEL_278;
    case 'e':
      CoreNLP::to_twoDigitString((CoreNLP *)0x12);
      if ((v113 & 0x80u) == 0)
        v68 = (const std::string::value_type *)&__p;
      else
        v68 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v69 = v113;
      else
        v69 = v112;
      std::string::append(a5, v68, v69);
      if ((char)v113 < 0)
        operator delete(__p);
      v55 = CoreNLP::TaggingFeatureExtractor::isInChineseGazetter(v8, 0x4000000000, a3, a4, 4, 4);
      goto LABEL_278;
    case 'f':
      CoreNLP::to_twoDigitString((CoreNLP *)0x13);
      if ((v113 & 0x80u) == 0)
        v70 = (const std::string::value_type *)&__p;
      else
        v70 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v71 = v113;
      else
        v71 = v112;
      std::string::append(a5, v70, v71);
      if ((char)v113 < 0)
        operator delete(__p);
      v55 = CoreNLP::TaggingFeatureExtractor::isInChineseGazetter(v8, 0x8000000000, a3, a4, 4, 4);
      goto LABEL_278;
    case 'g':
      CoreNLP::to_twoDigitString((CoreNLP *)0x14);
      if ((v113 & 0x80u) == 0)
        v72 = (const std::string::value_type *)&__p;
      else
        v72 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v73 = v113;
      else
        v73 = v112;
      std::string::append(a5, v72, v73);
      if ((char)v113 < 0)
        operator delete(__p);
      v55 = CoreNLP::TaggingFeatureExtractor::isInChineseGazetter(v8, 0x2000000000, a3, a4, 5, 4);
      goto LABEL_278;
    case 'h':
      CoreNLP::to_twoDigitString((CoreNLP *)0x15);
      if ((v113 & 0x80u) == 0)
        v74 = (const std::string::value_type *)&__p;
      else
        v74 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v75 = v113;
      else
        v75 = v112;
      std::string::append(a5, v74, v75);
      if ((char)v113 < 0)
        operator delete(__p);
      v55 = CoreNLP::TaggingFeatureExtractor::isInChineseGazetter(v8, 0x4000000000, a3, a4, 5, 4);
      goto LABEL_278;
    case 'i':
      CoreNLP::to_twoDigitString((CoreNLP *)0x16);
      if ((v113 & 0x80u) == 0)
        v76 = (const std::string::value_type *)&__p;
      else
        v76 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v77 = v113;
      else
        v77 = v112;
      std::string::append(a5, v76, v77);
      if ((char)v113 < 0)
        operator delete(__p);
      v55 = CoreNLP::TaggingFeatureExtractor::isInChineseGazetter(v8, 0x8000000000, a3, a4, 5, 4);
      goto LABEL_278;
    case 'j':
      CoreNLP::to_twoDigitString((CoreNLP *)0x17);
      if ((v113 & 0x80u) == 0)
        v78 = (const std::string::value_type *)&__p;
      else
        v78 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v79 = v113;
      else
        v79 = v112;
      std::string::append(a5, v78, v79);
      if ((char)v113 < 0)
        operator delete(__p);
      v55 = CoreNLP::TaggingFeatureExtractor::isInChineseGazetter(v8, 0x2000000000, a3, a4, 6, 4);
      goto LABEL_278;
    case 'k':
      CoreNLP::to_twoDigitString((CoreNLP *)0x18);
      if ((v113 & 0x80u) == 0)
        v80 = (const std::string::value_type *)&__p;
      else
        v80 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v81 = v113;
      else
        v81 = v112;
      std::string::append(a5, v80, v81);
      if ((char)v113 < 0)
        operator delete(__p);
      v55 = CoreNLP::TaggingFeatureExtractor::isInChineseGazetter(v8, 0x4000000000, a3, a4, 6, 4);
      goto LABEL_278;
    case 'l':
      CoreNLP::to_twoDigitString((CoreNLP *)0x19);
      if ((v113 & 0x80u) == 0)
        v82 = (const std::string::value_type *)&__p;
      else
        v82 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v83 = v113;
      else
        v83 = v112;
      std::string::append(a5, v82, v83);
      if ((char)v113 < 0)
        operator delete(__p);
      v55 = CoreNLP::TaggingFeatureExtractor::isInChineseGazetter(v8, 0x8000000000, a3, a4, 6, 4);
      goto LABEL_278;
    case 'm':
      CoreNLP::to_twoDigitString((CoreNLP *)0x1A);
      if ((v113 & 0x80u) == 0)
        v84 = (const std::string::value_type *)&__p;
      else
        v84 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v85 = v113;
      else
        v85 = v112;
      std::string::append(a5, v84, v85);
      if ((char)v113 < 0)
        operator delete(__p);
      v55 = CoreNLP::TaggingFeatureExtractor::isInChineseGazetter(v8, 0x2000000000, a3, a4, 7, 4);
      goto LABEL_278;
    case 'n':
      CoreNLP::to_twoDigitString((CoreNLP *)0x1B);
      if ((v113 & 0x80u) == 0)
        v88 = (const std::string::value_type *)&__p;
      else
        v88 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v89 = v113;
      else
        v89 = v112;
      std::string::append(a5, v88, v89);
      if ((char)v113 < 0)
        operator delete(__p);
      v55 = CoreNLP::TaggingFeatureExtractor::isInChineseGazetter(v8, 0x4000000000, a3, a4, 7, 4);
      goto LABEL_278;
    case 'o':
      CoreNLP::to_twoDigitString((CoreNLP *)0x1C);
      if ((v113 & 0x80u) == 0)
        v86 = (const std::string::value_type *)&__p;
      else
        v86 = (const std::string::value_type *)__p;
      if ((v113 & 0x80u) == 0)
        v87 = v113;
      else
        v87 = v112;
      std::string::append(a5, v86, v87);
      if ((char)v113 < 0)
        operator delete(__p);
      v55 = CoreNLP::TaggingFeatureExtractor::isInChineseGazetter(v8, 0x8000000000, a3, a4, 7, 4);
LABEL_278:
      if (v55)
        v33 = "1";
      else
        v33 = "0";
      return std::string::append(a5, v33);
    default:
      return result;
  }
}

void sub_191CA86C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void CoreNLP::TaggingFeatureExtractor::setConstrainFeaturePath(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  std::locale::id *v7;
  const std::locale::facet *v8;
  unsigned __int8 v9;
  _QWORD *v10;
  uint64_t v11;
  void *__p;
  uint64_t v13;
  uint64_t v14;
  std::locale v15;
  _QWORD v16[2];
  _BYTE v17[408];
  _QWORD v18[20];

  v18[19] = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t **)(a1 + 368);
  v5 = a1 + 376;
  std::__tree<std::string>::destroy(a1 + 368, *(char **)(a1 + 376));
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 368) = v5;
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
      return;
  }
  else if (!*(_BYTE *)(a2 + 23))
  {
    return;
  }
  std::ifstream::basic_ifstream(v16);
  v6 = *(_QWORD *)(v16[0] - 24);
  if ((v17[v6 + 16] & 5) == 0)
  {
    __p = 0;
    v13 = 0;
    v14 = 0;
    v7 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v16 + v6));
      v8 = std::locale::use_facet(&v15, v7);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
      std::locale::~locale(&v15);
      v10 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16, (uint64_t)&__p, v9);
      v11 = HIBYTE(v14);
      if ((*((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 32) & 5) != 0)
        break;
      if (v14 < 0)
        v11 = v13;
      if (v11)
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v4, (const void **)&__p, (uint64_t)&__p);
      v6 = *(_QWORD *)(v16[0] - 24);
    }
    if (v14 < 0)
      operator delete(__p);
  }
  v16[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x19401E70C](v17);
  std::istream::~istream();
  MEMORY[0x19401E928](v18);
}

void sub_191CA8990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, char a17)
{
  _Unwind_Resume(exception_object);
}

void sub_191CA8AA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x19401E928](v1 + 424);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::TaggingFeatureExtractor::isInChineseGazetter(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const std::string::value_type *v18;
  const std::string::value_type *v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  uint64_t *v31;
  std::string *v32;
  std::string::size_type size;
  std::string v34;

  if (a2 != 0x2000000000 && a2 != 0x8000000000 && a2 != 0x4000000000)
    return 0;
  v8 = a5;
  if (a5 < 2 || a5 + a4 > (unint64_t)((uint64_t)(a3[1] - *a3) >> 3))
    return 0;
  memset(&v34, 0, sizeof(v34));
  v15 = 8 * a4;
  do
  {
    v16 = *(_QWORD *)(*a3 + v15);
    v19 = *(const std::string::value_type **)(v16 + 80);
    v17 = v16 + 80;
    v18 = v19;
    v20 = *(char *)(v17 + 23);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)v17;
    else
      v21 = v18;
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(v17 + 23);
    else
      v22 = *(_QWORD *)(v17 + 8);
    std::string::append(&v34, v21, v22);
    v15 += 8;
    --v8;
  }
  while (v8);
  v23 = a1 + 8;
  v24 = a1 + 32;
  if (a2 != 0x4000000000)
    v24 = a1 + 56;
  if (a2 != 0x2000000000)
    v23 = v24;
  v27 = *(_QWORD *)(v23 + 8);
  v25 = v23 + 8;
  v26 = v27;
  if (!v27)
    goto LABEL_35;
  v28 = v25;
  do
  {
    v29 = *(_DWORD *)(v26 + 32);
    v30 = v29 < a6;
    if (v29 >= a6)
      v31 = (uint64_t *)v26;
    else
      v31 = (uint64_t *)(v26 + 8);
    if (!v30)
      v28 = v26;
    v26 = *v31;
  }
  while (*v31);
  if (v28 != v25 && *(_DWORD *)(v28 + 32) <= a6)
  {
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = &v34;
    else
      v32 = (std::string *)v34.__r_.__value_.__r.__words[0];
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    else
      size = v34.__r_.__value_.__l.__size_;
    v10 = BloomFilter::possiblyContains((BloomFilter *)(v28 + 40), (const char *)v32, size);
  }
  else
  {
LABEL_35:
    v10 = 0;
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  return v10;
}

void sub_191CA8C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::to_twoDigitString(CoreNLP *this)
{
  uint64_t v1;
  char v3;
  _QWORD v4[2];
  _QWORD v5[11];
  char v6;
  uint64_t v7;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v4);
  *(_QWORD *)((char *)&v5[3] + *(_QWORD *)(v5[0] - 24)) = 2;
  v3 = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, &v3);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E0DE4F50];
  v1 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v5[0] = v1;
  v5[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v6 < 0)
    operator delete((void *)v5[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401E928](&v7);
}

void sub_191CA8D40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void CoreNLP::TaggingFeatureExtractor::dependency(unsigned int a1@<W1>, void **a2@<X8>)
{
  _DWORD *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  int v9;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1 < 4 || a1 - 102 <= 4 && ((1 << (a1 - 102)) & 0x13) != 0)
  {
    v3 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a2 + 2), 1uLL);
    v4 = (char *)*a2;
    v5 = (char *)a2[1];
    v7 = &v3[v6];
    *v3 = 6;
    v8 = v3 + 1;
    while (v5 != v4)
    {
      v9 = *((_DWORD *)v5 - 1);
      v5 -= 4;
      *--v3 = v9;
    }
    *a2 = v3;
    a2[1] = v8;
    a2[2] = v7;
    if (v4)
      operator delete(v4);
    a2[1] = v8;
  }
}

void sub_191CA8DF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::operator<<[abi:ne180100]<std::char_traits<char>>(_QWORD *a1, char *a2)
{
  char *v3;
  int v4;
  const std::locale::facet *v5;
  int v6;
  std::locale v8;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v5 = std::locale::use_facet(&v8, MEMORY[0x1E0DE4A90]);
    v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_191CA8E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_191CA8F08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<NLLanguageID,BloomFilter>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,BloomFilter>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,BloomFilter>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<NLLanguageID,BloomFilter>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,BloomFilter>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,BloomFilter>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<NLLanguageID,BloomFilter>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,BloomFilter>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,BloomFilter>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<NLLanguageID const,BloomFilter>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NLLanguageID const,BloomFilter>,0>(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(void **)(a1 + 8);
  if (v2)
    operator delete(v2);
}

uint64_t *std::__tree<std::__value_type<NLLanguageID,BloomFilter>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,BloomFilter>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,BloomFilter>>>::__emplace_unique_key_args<NLLanguageID,std::piecewise_construct_t const&,std::tuple<NLLanguageID const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v5;
  uint64_t **v6;
  int v7;
  uint64_t *v8;
  int v9;
  uint64_t *v11[3];

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t *)v5;
        v9 = *(_DWORD *)(v5 + 32);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<NLLanguageID,BloomFilter>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,BloomFilter>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,BloomFilter>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<NLLanguageID const&>,std::tuple<>>(a1, a4, (uint64_t)v11);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<NLLanguageID,BloomFilter>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<NLLanguageID,BloomFilter>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

void std::__tree<std::__value_type<NLLanguageID,BloomFilter>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,BloomFilter>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,BloomFilter>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<NLLanguageID const&>,std::tuple<>>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;

  v5 = a1 + 8;
  v6 = operator new(0x98uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = **a2;
  BloomFilter::BloomFilter((BloomFilter *)(v6 + 10));
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_191CA90DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<NLLanguageID,BloomFilter>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<NLLanguageID,BloomFilter>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<NLLanguageID,BloomFilter>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<NLLanguageID,BloomFilter>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<NLLanguageID const,BloomFilter>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void CoreNLP::TranscriptionBuffer::~TranscriptionBuffer(CoreNLP::TranscriptionBuffer *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    MEMORY[0x19401E970](v1, 0x1000C80BDFB0063);
}

__CFString *CoreNLP::createLatinTranscription(CoreNLP *this, const unsigned __int16 *a2, int a3)
{
  __CFString *v3;
  __CFString *MutableString;
  CoreNLP *v7;
  uint64_t v8;
  const unsigned __int16 *v9;

  v3 = 0;
  if (this && a2)
  {
    v7 = this;
    v8 = 0;
    v9 = a2;
    MutableString = CoreNLP::TranscriptionBuffer::createMutableString((CoreNLP::TranscriptionBuffer *)&v7);
    v3 = MutableString;
    if (MutableString)
    {
      if (!CFStringTransform(MutableString, 0, (CFStringRef)*MEMORY[0x1E0C9B360], 0))
        CFRelease(v3);
      if (a3 && !CFStringTransform(v3, 0, CFSTR("Latin-NumericPinyin"), 0))
        CFRelease(v3);
    }
    if (v8)
      MEMORY[0x19401E970](v8, 0x1000C80BDFB0063);
  }
  return v3;
}

void sub_191CA92A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    MEMORY[0x19401E970](a11, 0x1000C80BDFB0063);
  _Unwind_Resume(exception_object);
}

void sub_191CA9360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<CoreNLP::Resource>::reset[abi:ne180100]((CoreNLP::Resource **)va, 0);
  _Unwind_Resume(a1);
}

void CoreNLP::PunctClassifier::~PunctClassifier(CoreNLP::PunctClassifier *this)
{
  uint64_t v2;
  const void *v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (const void *)*((_QWORD *)this + 2);
  if (v3)
    CFRelease(v3);
  std::__tree<std::string>::destroy((uint64_t)this + 24, *((char **)this + 4));
}

void CoreNLP::PunctClassifier::setString(CoreNLP::PunctClassifier *this, CFTypeRef cf)
{
  const void *v4;

  v4 = (const void *)*((_QWORD *)this + 2);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 2) = 0;
  }
  if (cf)
    *((_QWORD *)this + 2) = CFRetain(cf);
}

CoreNLP::KoreanSubWordTagger *CoreNLP::KoreanSubWordTagger::KoreanSubWordTagger(CoreNLP::KoreanSubWordTagger *this, const CoreNLP::TaggerContext *a2, const CoreNLP::StringBuffer *a3)
{
  _QWORD *v6;
  unint64_t v7;
  CoreNLP::MeCabSubTokenizer *Tokenizer;
  uint64_t v9;
  uint64_t v10;

  v6 = CoreNLP::SubWordTagger::SubWordTagger(this, (uint64_t)a2, (uint64_t)a3);
  *v6 = &off_1E2DF26B0;
  v7 = *(_QWORD *)a2;
  v6[6] = *(_QWORD *)a2;
  *((_BYTE *)v6 + 56) = 0;
  v6[8] = -1;
  v6[9] = 0;
  v6[10] = 0;
  if ((*((_DWORD *)this + 12) & 0x188A0004) != 0)
    Tokenizer = CoreNLP::MeCabSubTokenizer::createTokenizer(5);
  else
    Tokenizer = 0;
  *((_QWORD *)this + 12) = Tokenizer;
  *((_QWORD *)this + 13) = 0;
  v9 = operator new();
  CoreNLP::EnglishCompoundWord::EnglishCompoundWord((_QWORD *)v9, (uint64_t)a2, (uint64_t)a3);
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *((_QWORD *)this + 14) = v9;
  v10 = *((_QWORD *)this + 12);
  if (v10)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 24))(v10, *((_QWORD *)this + 6));
  return this;
}

void sub_191CA94E8(_Unwind_Exception *a1)
{
  CoreNLP::SubWordTagger *v1;
  CoreNLP::SubWordTagger **v2;
  CoreNLP::SubWordTagger *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *v2;
  *v2 = 0;
  if (v4)
    std::default_delete<CoreNLP::BufferedDecompounder>::operator()[abi:ne180100]((int)v2, v4);
  v5 = *((_QWORD *)v1 + 13);
  *((_QWORD *)v1 + 13) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)v1 + 12);
  *((_QWORD *)v1 + 12) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)v1 + 11);
  *((_QWORD *)v1 + 11) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  CoreNLP::SubWordTagger::~SubWordTagger(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::`anonymous namespace'::createICUTextBreak(CoreNLP::_anonymous_namespace_ *this, unint64_t a2)
{
  int v3;
  uint64_t v5;
  uint64_t v6;

  if ((a2 & 0x188A0004) != 0 && (a2 & 0x80000) == 0)
    return 0;
  v3 = a2;
  if ((a2 & 0x10000) != 0)
  {
    v6 = operator new();
    CoreNLP::ICUTextBreakWithBuiltInRules::ICUTextBreakWithBuiltInRules(v6, this, 1, "ko");
  }
  else
  {
    v5 = operator new();
    v6 = v5;
    if ((v3 & 0x80000) != 0)
      CoreNLP::ICUTextBreakWithCustomizedRules::ICUTextBreakWithCustomizedRules(v5, this, 0, 1, 1, 0);
    else
      CoreNLP::ICUTextBreakWithCustomizedRules::ICUTextBreakWithCustomizedRules(v5, this, 0, 1, 0, 0);
  }
  return v6;
}

void sub_191CA9674(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10E1C403762A6A8);
  _Unwind_Resume(a1);
}

void CoreNLP::KoreanSubWordTagger::~KoreanSubWordTagger(CoreNLP::KoreanSubWordTagger *this)
{
  _QWORD *v2;
  CoreNLP::SubWordTagger *v3;
  CoreNLP::SubWordTagger *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E2DF26B0;
  v4 = (CoreNLP::SubWordTagger *)*((_QWORD *)this + 14);
  v2 = (_QWORD *)((char *)this + 112);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<CoreNLP::BufferedDecompounder>::operator()[abi:ne180100]((int)v2, v3);
  v5 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
}

{
  CoreNLP::KoreanSubWordTagger::~KoreanSubWordTagger(this);
  JUMPOUT(0x19401E994);
}

uint64_t CoreNLP::KoreanSubWordTagger::setString(CoreNLP::KoreanSubWordTagger *this, const __CFString *a2, CFRange a3)
{
  CFIndex length;
  CFIndex location;
  uint64_t result;
  _QWORD *v7;

  length = a3.length;
  location = a3.location;
  *((_BYTE *)this + 56) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = -1;
  result = *((_QWORD *)this + 11);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t, const __CFString *, CFIndex, CFIndex))(*(_QWORD *)result + 16))(result, a2, a3.location, a3.length);
    v7 = (_QWORD *)*((_QWORD *)this + 14);
    v7[2] = 0;
    v7[4] = v7[3];
  }
  else if (*((_QWORD *)this + 12))
  {
    CoreNLP::StringBuffer::getSubStringCharsOfRange(*((CoreNLP::StringBuffer **)this + 2), a3);
    return (*(uint64_t (**)(_QWORD, _QWORD, CFIndex, CFIndex))(**((_QWORD **)this + 12) + 16))(*((_QWORD *)this + 12), *(_QWORD *)(*((_QWORD *)this + 2) + 24), location, length);
  }
  return result;
}

uint64_t CoreNLP::KoreanSubWordTagger::fastEnumerateTokensWithSpecifiedStop(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 96);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  result = *(_QWORD *)(a1 + 88);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t CoreNLP::KoreanSubWordTagger::enumerateTokensWithSpecifiedStop(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 88);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t CoreNLP::KoreanSubWordTagger::enumeratePossiblePersonNameSequences(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = 0;
  return (*(uint64_t (**)(uint64_t, char *))(a2 + 16))(a2, &v3);
}

uint64_t CoreNLP::KoreanSubWordTagger::enumeratePersonNamesOfCurrentSequence(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD))(*a1 + 160))(a1, a2, a3, a1[12]);
}

CoreNLP::MeCabSubTokenizer *CoreNLP::KoreanSubWordTagger::enumerateSubTokensOfToken(CoreNLP::MeCabSubTokenizer *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  CoreNLP::MeCabSubTokenizer *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;

  if (a2 && a2[1])
  {
    v6 = result;
    result = (CoreNLP::MeCabSubTokenizer *)*((_QWORD *)result + 13);
    if (result)
      goto LABEL_7;
    result = CoreNLP::MeCabSubTokenizer::createTokenizer(5);
    v7 = *((_QWORD *)v6 + 13);
    *((_QWORD *)v6 + 13) = result;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      result = (CoreNLP::MeCabSubTokenizer *)*((_QWORD *)v6 + 13);
    }
    if (result)
    {
LABEL_7:
      (*(void (**)(CoreNLP::MeCabSubTokenizer *, BOOL))(*(_QWORD *)result + 96))(result, (**((_QWORD **)v6 + 1) & 0x18880000) == 0);
      result = (CoreNLP::MeCabSubTokenizer *)CoreNLP::StringBuffer::getSubStringCharsOfRange(*((CoreNLP::StringBuffer **)v6 + 2), *(CFRange *)(*((_QWORD *)v6 + 1) + 16));
      v8 = *(_QWORD *)(*((_QWORD *)v6 + 2) + 24);
      if (v8)
      {
        (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**((_QWORD **)v6 + 13) + 16))(*((_QWORD *)v6 + 13), v8, *a2, a2[1]);
        v11 = 0;
        do
        {
          result = (CoreNLP::MeCabSubTokenizer *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v6 + 13)
                                                                                           + 72))(*((_QWORD *)v6 + 13), 0);
          if (!result)
            break;
          v9 = *((_QWORD *)result + 2);
          v12 = *(_OWORD *)result;
          v10 = v12 - *a2;
          v13 = v9;
          *(_QWORD *)&v12 = v10;
          result = (CoreNLP::MeCabSubTokenizer *)(*(uint64_t (**)(uint64_t, __int128 *, char *))(a4 + 16))(a4, &v12, &v11);
        }
        while (!v11);
      }
    }
  }
  return result;
}

__n128 CoreNLP::KoreanSubWordTagger::goToTokenAtIndex(CoreNLP::KoreanSubWordTagger *this, uint64_t a2, uint64_t a3, CFRange *a4)
{
  uint64_t v7;
  __n128 result;
  uint64_t v9;
  __n128 *v10;
  CFIndex *v11;
  unint64_t v12;

  v7 = *((_QWORD *)this + 12);
  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, CFRange *))(*(_QWORD *)v7 + 40))(v7, a2, a3, a4);
    return result;
  }
  v9 = *((_QWORD *)this + 11);
  if (v9)
  {
    if (a4)
      *a4 = (CFRange)xmmword_191D40610;
    if ((*((_BYTE *)this + 50) & 1) != 0)
    {
      v10 = (__n128 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 40))(v9, a2, a3);
      if (!v10)
        return result;
    }
    else
    {
      v10 = (__n128 *)CoreNLP::BufferedDecompounder::goToTokenAtIndex(*((CoreNLP::BufferedDecompounder **)this + 14), a3);
      if (!v10)
      {
        v11 = (CFIndex *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 11) + 40))(*((_QWORD *)this + 11), a2, a3);
        if (!v11)
          return result;
        CoreNLP::BufferedDecompounder::tokenize(*((_QWORD *)this + 14), v11);
        v10 = (__n128 *)CoreNLP::BufferedDecompounder::goToTokenAtIndex(*((CoreNLP::BufferedDecompounder **)this + 14), a3);
        if (!v10)
          return result;
      }
    }
    v12 = v10[1].n128_u64[0];
    result = *v10;
    *((__n128 *)this + 4) = *v10;
    *((_QWORD *)this + 10) = v12 | 2;
  }
  return result;
}

char *CoreNLP::BufferedDecompounder::goToTokenAtIndex(CoreNLP::BufferedDecompounder *this, uint64_t a2)
{
  char *result;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  int64_t v7;

  result = (char *)*((_QWORD *)this + 3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (result == v4)
    return 0;
  if (*(_QWORD *)result > a2 || *((_QWORD *)v4 - 2) + *((_QWORD *)v4 - 3) <= a2)
  {
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 4) = result;
    return 0;
  }
  v5 = v4 - result;
  if (v4 - result < 1)
    return 0;
  v6 = 0;
  v7 = v5 / 0x18;
  if (v7 <= 1)
    v7 = 1;
  while (*(_QWORD *)result <= a2)
  {
    ++v6;
    if (*((_QWORD *)result + 1) + *(_QWORD *)result > a2)
      goto LABEL_14;
    result += 24;
    if (v7 == v6)
      return 0;
  }
  result = 0;
LABEL_14:
  *((_QWORD *)this + 2) = v6;
  return result;
}

uint64_t CoreNLP::BufferedDecompounder::tokenize(uint64_t a1, CFIndex *a2)
{
  CFIndex v2;
  CFIndex v3;
  _QWORD v5[6];
  char v6;
  CFRange v7;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 24);
  v6 = 0;
  v7.length = a2[1];
  v2 = a2[2];
  v3 = *a2;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN7CoreNLP20BufferedDecompounder8tokenizeEPK7NLToken_block_invoke;
  v5[3] = &__block_descriptor_tmp_5;
  v5[4] = a1;
  v5[5] = v2;
  v7.location = v3;
  return CoreNLP::EnglishCompoundWord::enumerateDecomposedTokensWithSpecifiedStop((CoreNLP::StringBuffer **)a1, v7, &v6, (uint64_t)v5);
}

__CFString *CoreNLP::KoreanSubWordTagger::copyTranscriptionOfCurrentToken(uint64_t a1, CFIndex *a2, uint64_t a3)
{
  uint64_t v4;
  CFRange v6;
  CoreNLP *SubStringCharsOfRange;

  v4 = *(_QWORD *)(a1 + 96);
  if (v4)
    return (__CFString *)(*(uint64_t (**)(_QWORD, CFIndex *, _QWORD, uint64_t))(*(_QWORD *)v4 + 48))(*(_QWORD *)(a1 + 96), a2, **(_QWORD **)(a1 + 8), a3);
  if (!a2)
    return 0;
  v6.location = *a2;
  if (*a2 == -1)
    return 0;
  v6.length = a2[1];
  if (!v6.length)
    return 0;
  SubStringCharsOfRange = (CoreNLP *)CoreNLP::StringBuffer::getSubStringCharsOfRange(*(CoreNLP::StringBuffer **)(a1 + 16), v6);
  return CoreNLP::createLatinTranscription(SubStringCharsOfRange, (const unsigned __int16 *)a2[1], 0);
}

uint64_t CoreNLP::KoreanSubWordTagger::getTranscriptionCharactersPtrOfCurrentToken()
{
  return 0;
}

CFRange *CoreNLP::KoreanSubWordTagger::getNextToken(CoreNLP::KoreanSubWordTagger *this, CFRange *a2)
{
  uint64_t v3;
  uint64_t v4;
  CFRange *result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  CFRange *v10;
  CFRange v11;
  CFIndex location;
  CFRange *v13;
  char v14;

  v3 = *((_QWORD *)this + 6);
  if ((v3 & 0x80000) != 0)
    return CoreNLP::KoreanSubWordTagger::getNextShorterToken(this, a2);
  v4 = *((_QWORD *)this + 12);
  if (v4)
    return (CFRange *)(*(uint64_t (**)(uint64_t, CFRange *))(*(_QWORD *)v4 + 72))(v4, a2);
  result = (CFRange *)*((_QWORD *)this + 11);
  if (result)
  {
    if (a2)
    {
      *a2 = (CFRange)xmmword_191D40610;
      v3 = *((_QWORD *)this + 6);
    }
    v14 = 0;
    if ((v3 & 0x10000) != 0)
    {
      result = (CFRange *)(*(uint64_t (**)(CFRange *, char *))(result->location + 56))(result, &v14);
      if (result)
        goto LABEL_19;
    }
    else
    {
      v6 = (_QWORD *)*((_QWORD *)this + 14);
      v7 = v6[3];
      v8 = v6[4];
      if (v7 != v8)
      {
        v9 = v6[2];
        if (v9 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 3)))
        {
          v6[4] = v7;
          v6[2] = 0;
        }
        else
        {
          v6[2] = v9 + 1;
          if (v7 && v9 != -1)
          {
            v10 = (CFRange *)(v7 + 24 * v9);
            v11 = *v10;
            location = v10[1].location;
            result = (CFRange *)((char *)this + 64);
LABEL_20:
            *((_QWORD *)this + 10) = location;
            *((CFRange *)this + 4) = v11;
            *((_QWORD *)this + 10) = location | 2;
            return result;
          }
        }
      }
      result = (CFRange *)(*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 11) + 56))(*((_QWORD *)this + 11), &v14);
      if (result)
      {
        CoreNLP::BufferedDecompounder::tokenize(*((_QWORD *)this + 14), &result->location);
        result = (CFRange *)CoreNLP::BufferedDecompounder::getNextToken(*((CoreNLP::BufferedDecompounder **)this + 14));
        if (result)
        {
LABEL_19:
          v13 = result;
          result = (CFRange *)((char *)this + 64);
          v11 = *v13;
          location = v13[1].location;
          goto LABEL_20;
        }
      }
    }
  }
  return result;
}

CFRange *CoreNLP::KoreanSubWordTagger::getNextShorterToken(CoreNLP::KoreanSubWordTagger *this, CFRange *a2)
{
  CFRange *v4;
  int v5;
  CFIndex location;
  CFIndex length;
  uint64_t v8;
  CFRange v9;
  CFRange v11;
  uint64_t v12;
  CFRange v13;

  if (*((_QWORD *)this + 11))
  {
    if (a2)
      *a2 = (CFRange)xmmword_191D40610;
    v4 = (CFRange *)((char *)this + 64);
    if (*((_BYTE *)this + 56))
      goto LABEL_15;
    while (1)
    {
      CoreNLP::KoreanSubWordTagger::mergeTokens((uint64_t)this, (__n128 *)&v11);
      location = v11.location;
      if ((v5 & 1) == 0 && v11.location == -1)
        break;
      if (v5 && *((_QWORD *)this + 12))
      {
        *((_BYTE *)this + 56) = 1;
        length = v11.length;
        v13.location = location;
        v13.length = v11.length;
        CoreNLP::StringBuffer::getSubStringCharsOfRange(*((CoreNLP::StringBuffer **)this + 2), v13);
        (*(void (**)(_QWORD, _QWORD, CFIndex, CFIndex))(**((_QWORD **)this + 12) + 16))(*((_QWORD *)this + 12), *(_QWORD *)(*((_QWORD *)this + 2) + 24), location, length);
      }
      *v4 = v11;
      *((_QWORD *)this + 10) = v12;
      if ((v12 & 0x1000) != 0)
        *((_QWORD *)this + 10) |= 2uLL;
      if (!*((_BYTE *)this + 56))
        return v4;
LABEL_15:
      v8 = (*(uint64_t (**)(_QWORD, CFRange *))(**((_QWORD **)this + 12) + 72))(*((_QWORD *)this + 12), a2);
      if (v8)
      {
        v9 = *(CFRange *)v8;
        *((_QWORD *)this + 10) = *(_QWORD *)(v8 + 16);
        *v4 = v9;
        return v4;
      }
      *((_BYTE *)this + 56) = 0;
    }
  }
  return 0;
}

uint64_t CoreNLP::BufferedDecompounder::getNextToken(CoreNLP::BufferedDecompounder *this)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  BOOL v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 3);
  v2 = *((_QWORD *)this + 4);
  if (v1 == v2)
    return 0;
  v3 = *((_QWORD *)this + 2);
  if (v3 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v2 - v1) >> 3)))
  {
    v5 = 0;
    *((_QWORD *)this + 4) = v1;
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    v4 = __CFADD__(v3, 1);
    *((_QWORD *)this + 2) = v3 + 1;
    v5 = v1 + 24 * v3;
    if (v4)
      return 0;
  }
  return v5;
}

void CoreNLP::KoreanSubWordTagger::releaseString(CoreNLP::KoreanSubWordTagger *this)
{
  CoreNLP::ICUTextBreak *v2;
  _QWORD *v3;

  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = -1;
  v2 = (CoreNLP::ICUTextBreak *)*((_QWORD *)this + 11);
  if (v2)
  {
    CoreNLP::ICUTextBreak::reset(v2);
    v3 = (_QWORD *)*((_QWORD *)this + 14);
    v3[2] = 0;
    v3[4] = v3[3];
  }
}

uint64_t CoreNLP::KoreanSubWordTagger::reset(CoreNLP::KoreanSubWordTagger *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 12);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
  return result;
}

__n128 CoreNLP::KoreanSubWordTagger::mergeTokens(uint64_t a1, __n128 *a2)
{
  __n128 *v4;
  __n128 result;
  __n128 *v6;
  uint64_t v7;
  __n128 *v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = -1;
  v11 = 0;
  v4 = (__n128 *)(*(uint64_t (**)(_QWORD, char *))(**(_QWORD **)(a1 + 88) + 56))(*(_QWORD *)(a1 + 88), &v11);
  if (!v4)
    return result;
  v6 = 0;
  LOBYTE(v7) = 0;
  while (1)
  {
    v8 = v6;
    v6 = v4;
    v9 = v4[1].n128_u64[0];
    if ((v7 & 1) == 0 && (v9 & 0x1000) == 0)
    {
      result = *v4;
      a2[1].n128_u64[0] = v4[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    if (v7 & 1 | ((v4[1].n128_u64[0] & 0x1000) == 0))
      break;
    a2->n128_u64[0] = v4->n128_u64[0];
LABEL_10:
    v7 = (v9 >> 12) & 1;
    v11 = 0;
    v4 = (__n128 *)(*(uint64_t (**)(_QWORD, char *))(**(_QWORD **)(a1 + 88) + 56))(*(_QWORD *)(a1 + 88), &v11);
    v8 = v6;
    if (!v4)
      goto LABEL_11;
  }
  if ((v7 & 1) == 0 || (v9 & 0x1000) != 0)
    goto LABEL_10;
LABEL_11:
  if ((v7 & 1) != 0)
  {
    if (v8)
    {
      v10 = v8[1].n128_u64[0];
      a2->n128_u64[1] = v8->n128_u64[1] + v8->n128_u64[0] - a2->n128_u64[0];
      a2[1].n128_u64[0] = v10;
    }
  }
  return result;
}

void ___ZN7CoreNLP20BufferedDecompounder8tokenizeEPK7NLToken_block_invoke(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  __int128 v19;

  v3 = *(_QWORD **)(a1 + 32);
  *((_QWORD *)a2 + 2) |= *(_QWORD *)(a1 + 40);
  v4 = v3[4];
  v5 = v3[5];
  if (v4 >= v5)
  {
    v8 = v3[3];
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v8) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v8) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(v3 + 5), v12);
    else
      v13 = 0;
    v14 = &v13[24 * v9];
    v15 = &v13[24 * v12];
    v16 = *a2;
    *((_QWORD *)v14 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v14 = v16;
    v7 = v14 + 24;
    v18 = (char *)v3[3];
    v17 = (char *)v3[4];
    if (v17 != v18)
    {
      do
      {
        v19 = *(_OWORD *)(v17 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v17 - 1);
        *(_OWORD *)(v14 - 24) = v19;
        v14 -= 24;
        v17 -= 24;
      }
      while (v17 != v18);
      v17 = (char *)v3[3];
    }
    v3[3] = v14;
    v3[4] = v7;
    v3[5] = v15;
    if (v17)
      operator delete(v17);
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v6;
    v7 = (char *)(v4 + 24);
  }
  v3[4] = v7;
}

void std::default_delete<CoreNLP::BufferedDecompounder>::operator()[abi:ne180100](int a1, CoreNLP::SubWordTagger *this)
{
  void *v3;

  if (this)
  {
    v3 = (void *)*((_QWORD *)this + 3);
    if (v3)
    {
      *((_QWORD *)this + 4) = v3;
      operator delete(v3);
    }
    CoreNLP::SubWordTagger::~SubWordTagger(this);
    JUMPOUT(0x19401E994);
  }
}

void CoreNLP::SentenceEmbedding::L2Normalize(uint64_t a1, uint64_t a2)
{
  float __C;

  __C = 0.0;
  vDSP_dotpr(*(const float **)a2, 1, *(const float **)a2, 1, &__C, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  if (fabsf(__C) > 0.000001)
    vDSP_vsdiv(*(const float **)a2, 1, &__C, *(float **)a2, 1, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
}

uint64_t CoreNLP::SentenceEmbedding::SentenceEmbedding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  CoreNLP::MontrealModel **v12;
  CoreNLP::MontrealModel **v13;
  _DWORD *v14;
  CFNumberRef v15;
  const __CFDictionary *v16;
  uint64_t v17;
  CoreNLP::MontrealModel *v18;
  CoreNLP::MontrealModel *v19;
  std::runtime_error *exception;
  _QWORD v22[3];
  _QWORD v23[4];

  v23[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E2DF24A8;
  *(_OWORD *)(a1 + 24) = 0u;
  v12 = (CoreNLP::MontrealModel **)(a1 + 24);
  v13 = (CoreNLP::MontrealModel **)(a1 + 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  v14 = operator new(0xCuLL);
  *(_DWORD *)(a1 + 20) = a6;
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 56) = v14 + 3;
  *(_QWORD *)v14 = 0x3EC5AEE63F019653;
  v14[2] = 1037865425;
  *(_QWORD *)(a1 + 48) = v14 + 3;
  *(_QWORD *)(a1 + 64) = 0x3F4000003EBEDFA4;
  *(_DWORD *)(a1 + 16) = a5;
  v15 = CFNumberCreate(0, kCFNumberCFIndexType, (const void *)(a1 + 20));
  v22[0] = kNLStringEmbeddingModelType[0];
  v22[1] = kNLStringEmbeddingModelLocale[0];
  v23[0] = kNLStringEmbeddingModelTypeContextualWordEmbedding[0];
  v23[1] = a2;
  v22[2] = kNLStringEmbeddingModelVersion[0];
  v23[2] = v15;
  v16 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, v22, 3);
  CFRelease(v15);
  v17 = NLStringEmbeddingCreateWithOptions(v16);
  *(_QWORD *)(a1 + 8) = v17;
  if (!v17)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to load contextual embedding model.");
    goto LABEL_10;
  }
  if (a6 == 1 && *(_DWORD *)(a1 + 16) == 10)
  {
    v18 = (CoreNLP::MontrealModel *)operator new();
    CoreNLP::MontrealModel::MontrealModel(v18, a3);
    std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100](v13, v18);
    if (*(_QWORD *)*v13)
    {
      v19 = (CoreNLP::MontrealModel *)operator new();
      CoreNLP::MontrealModel::MontrealModel(v19, a4);
      std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100](v12, v19);
      if (*(_QWORD *)*v12)
        return a1;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unable to load similarity model");
    }
    else
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unable to load sentence embedding model");
    }
LABEL_10:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_191CAA4E0(_Unwind_Exception *a1)
{
  CoreNLP::MontrealModel **v1;
  CoreNLP::MontrealModel **v2;
  uint64_t v3;
  void *v4;
  void *v6;

  __cxa_free_exception(v4);
  v6 = *(void **)(v3 + 40);
  if (v6)
  {
    *(_QWORD *)(v3 + 48) = v6;
    operator delete(v6);
  }
  std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100](v2, 0);
  std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void CoreNLP::SentenceEmbedding::~SentenceEmbedding(CoreNLP::SentenceEmbedding *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E2DF24A8;
  CFRelease(*((CFTypeRef *)this + 1));
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100]((CoreNLP::MontrealModel **)this + 4, 0);
  std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100]((CoreNLP::MontrealModel **)this + 3, 0);
}

{
  CoreNLP::SentenceEmbedding::~SentenceEmbedding(this);
  JUMPOUT(0x19401E994);
}

uint64_t CoreNLP::SentenceEmbedding::fillStringVector(uint64_t a1, char *a2, float **a3)
{
  CoreNLP *v4;
  char *v7;
  __CFArray *v8;
  CFIndex Count;
  float *v10;
  uint64_t v11;
  CFIndex v12;
  const __CFNumber *ValueAtIndex;
  unint64_t Dimension;
  __CFArray *Mutable;
  CoreNLP *v16;
  char *v17;
  __CFString *v18;
  void *v19;
  CFIndex v20;
  void *v21;
  uint64_t v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  int v30;
  double v31;
  uint64_t v34;
  CoreNLP *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float *v44;
  char *v45;
  float *v46;
  uint64_t v47;
  char *v48;
  uint64_t i;
  uint64_t v50;
  const void *v51;
  float *v52;
  uint64_t v53;
  uint64_t v54;
  float *v55;
  float *v56;
  uint64_t v57;
  unint64_t v58;
  float *v59;
  float *v60;
  float v61;
  float *v62;
  std::runtime_error *exception;
  CoreNLP *cf;
  __int128 v66;
  float *v67;
  int v68;
  __int128 v69;
  uint64_t v70;
  int v71;
  void *__p;
  void *__dst;
  uint64_t v74;
  void *__src;
  char *v76;
  void *v77;
  _BYTE *v78;
  _QWORD v79[6];
  __int128 v80;
  float *v81;
  _QWORD v82[3];

  v82[1] = *MEMORY[0x1E0C80C00];
  v4 = *(CoreNLP **)(a1 + 8);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No contextual embedding found.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if ((*(_DWORD *)(a1 + 20) & 0xFFFFFFFE) == 4)
  {
    if (a2[23] >= 0)
      v7 = a2;
    else
      v7 = *(char **)a2;
    v8 = NLStringEmbeddingCopyVector(*(CoreNLP **)(a1 + 8), (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7));
    v77 = v8;
    Count = CFArrayGetCount(v8);
    LODWORD(__src) = 0;
    std::vector<float>::vector(&v80, Count, &__src);
    v10 = *a3;
    if (*a3)
    {
      a3[1] = v10;
      operator delete(v10);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    v11 = 0;
    v12 = 0;
    *(_OWORD *)a3 = v80;
    a3[2] = v81;
    while (CFArrayGetCount(v8) > v12)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v8, v12);
      CFNumberGetValue(ValueAtIndex, kCFNumberFloatType, &(*a3)[v11]);
      ++v12;
      ++v11;
    }
    if (v8)
      CFRelease(v8);
    return 1;
  }
  else
  {
    Dimension = (unint64_t)NLStringEmbeddingGetDimension(v4, a2);
    LODWORD(v77) = 0;
    std::vector<float>::vector(&v80, Dimension, &v77);
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    CFArrayAppendValue(Mutable, kNLTagSchemeTokenType[0]);
    v16 = (CoreNLP *)NLTaggerCreate(Mutable, 0);
    CFRelease(Mutable);
    if (a2[23] >= 0)
      v17 = a2;
    else
      v17 = *(char **)a2;
    v18 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v17);
    v19 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    NLTaggerSetString(v16, v18);
    v20 = -[__CFString length](v18, "length");
    v79[0] = MEMORY[0x1E0C809B0];
    v79[1] = 3221225472;
    v79[2] = ___ZN7CoreNLP17SentenceEmbedding16fillStringVectorERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERNS1_6vectorIfNS5_IfEEEE_block_invoke;
    v79[3] = &unk_1E2DF4548;
    v79[4] = v18;
    v79[5] = v19;
    NLTaggerEnumerateTokens(v16, 0, 0, v20, (CoreNLP::NLAttributedToken *)4, (uint64_t)v79);
    v82[0] = v19;
    v21 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v82, 1);
    v22 = objc_msgSend(v19, "count");
    v23 = v22 != 0;
    if (v22)
    {
      LODWORD(__src) = 0;
      std::vector<float>::vector(&v77, objc_msgSend(v19, "count") * Dimension, &__src);
      cf = v16;
      v24 = (v78 - (_BYTE *)v77) >> 2;
      v25 = v24 / Dimension;
      if (Dimension <= v24)
      {
        v26 = 0;
        if (v25 <= 1)
          v27 = 1;
        else
          v27 = v24 / Dimension;
        v28 = 0.0;
        v29 = 0.0;
        do
        {
          v30 = objc_msgSend((id)objc_msgSend(v19, "objectAtIndexedSubscript:", v26), "characterAtIndex:", 0);
          if ((unsigned __int16)(v30 - 97) < 0x1Au || (unsigned __int16)(v30 - 65) < 0x1Au)
            v29 = v29 + 1.0;
          if ((v30 - 65) < 0x1A)
            v28 = v28 + 1.0;
          ++v26;
        }
        while (v27 != v26);
        if (v29 > 0.0)
        {
          *(float *)&v31 = v28 / v29;
          if ((float)(v28 / v29) >= *(float *)(a1 + 68) && Dimension <= v24)
          {
            v34 = 0;
            do
            {
              if (objc_msgSend((id)objc_msgSend(v19, "objectAtIndexedSubscript:", v34, v31), "characterAtIndex:", 0)- 65 <= 0x19)objc_msgSend(v19, "setObject:atIndexedSubscript:", objc_msgSend((id)objc_msgSend(v19, "objectAtIndexedSubscript:", v34), "lowercaseString"), v34);
              ++v34;
            }
            while (v27 != v34);
          }
        }
      }
      v35 = *(CoreNLP **)(a1 + 8);
      v36 = objc_msgSend(v19, "count");
      NLStringEmbeddingFillWordVectorsWithShape(v35, v21, 1, v36, (char *)v77, v80, v80, 2);
      if (*(_DWORD *)(a1 + 16) == 10)
      {
        LODWORD(__p) = 0;
        std::vector<float>::vector(&__src, 0x100uLL, &__p);
        v37 = 0;
        __p = 0;
        __dst = 0;
        v74 = 0;
        if (Dimension <= v24)
        {
          v38 = 0;
          v39 = 0;
          v40 = (char *)__src;
          if (v25 <= 1)
            v41 = 1;
          else
            v41 = v24 / Dimension;
          v42 = 4 * Dimension;
          do
          {
            v43 = 0;
            v44 = *(float **)(a1 + 40);
            v45 = (char *)v77 + v38;
            do
            {
              v46 = (float *)&v40[v43];
              *v46 = *v44 * *(float *)&v45[v43];
              v46[128] = *v44 * *(float *)&v45[v43];
              v43 += 4;
            }
            while (v43 != 512);
            v47 = 0;
            v48 = (char *)v77 + v38;
            do
            {
              *(float *)&v40[v47] = *(float *)&v40[v47]
                                  + (float)((float)(v44[2] * *(float *)&v48[v47 + 1536])
                                          + (float)(v44[1] * *(float *)&v48[v47 + 512]));
              v47 += 4;
            }
            while (v47 != 1024);
            for (i = 0; i != 1024; i += 4)
              *(float *)&v40[i] = *(float *)(a1 + 64) * *(float *)&v40[i];
            std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((uint64_t)&__p, (uint64_t)__dst, v40, v76, (v76 - v40) >> 2);
            v40 = (char *)__src;
            if (v76 - (_BYTE *)__src >= 1)
              bzero(__src, 4 * (((unint64_t)(v76 - (_BYTE *)__src) >> 2) - ((unint64_t)(v76 - (_BYTE *)__src) > 3))+ 4);
            ++v39;
            v38 += v42;
          }
          while (v39 != v41);
          v37 = __p;
        }
        v50 = *(_QWORD *)(a1 + 32);
        LOWORD(v68) = 256;
        v69 = xmmword_191D41960;
        v70 = 0x100000001;
        v71 = v25;
        CoreNLP::MontrealModel::setInputTensor(v50, &v68, (uint64_t)v37, (uint64_t)CFSTR("input"));
        CoreNLP::MontrealModel::predict(*(CoreNLP::MontrealModel **)(a1 + 32));
        v51 = (const void *)CoreNLP::MontrealModel::output(*(CoreNLP::MontrealModel **)(a1 + 32), CFSTR("output"));
        v66 = 0uLL;
        v67 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v66, v51, (uint64_t)v51 + 2048, 0x200uLL);
        v52 = *a3;
        if (*a3)
        {
          a3[1] = v52;
          operator delete(v52);
          *a3 = 0;
          a3[1] = 0;
          a3[2] = 0;
        }
        *(_OWORD *)a3 = v66;
        a3[2] = v67;
        CoreNLP::MontrealModel::clear(*(const void ***)(a1 + 32));
        CFRelease(cf);
        if (__p)
        {
          __dst = __p;
          operator delete(__p);
        }
        if (__src)
        {
          v76 = (char *)__src;
          operator delete(__src);
        }
      }
      else
      {
        std::vector<float>::resize((uint64_t)a3, Dimension);
        if (Dimension <= v24)
        {
          v54 = 0;
          v55 = (float *)v77;
          v56 = *a3;
          if (v25 <= 1)
            v57 = 1;
          else
            v57 = v24 / Dimension;
          do
          {
            v58 = Dimension;
            v59 = v55;
            v60 = v56;
            if ((uint64_t)Dimension >= 1)
            {
              do
              {
                v61 = *v59++;
                *v60 = v61 + *v60;
                ++v60;
                --v58;
              }
              while (v58);
            }
            ++v54;
            v55 += Dimension;
          }
          while (v54 != v57);
        }
        if ((uint64_t)Dimension >= 1)
        {
          v62 = *a3;
          do
          {
            *v62 = *v62 / (float)v25;
            ++v62;
            --Dimension;
          }
          while (Dimension);
        }
        CoreNLP::SentenceEmbedding::L2Normalize(v53, (uint64_t)a3);
        CFRelease(cf);
      }
      if (v77)
      {
        v78 = v77;
        operator delete(v77);
      }
    }
    else
    {
      a3[1] = *a3;
    }
    if ((_QWORD)v80)
    {
      *((_QWORD *)&v80 + 1) = v80;
      operator delete((void *)v80);
    }
  }
  return v23;
}

void sub_191CAACB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  uint64_t v25;
  void *v27;

  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  if (a24)
    operator delete(a24);
  v27 = *(void **)(v25 - 160);
  if (v27)
  {
    *(_QWORD *)(v25 - 152) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN7CoreNLP17SentenceEmbedding16fillStringVectorERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERNS1_6vectorIfNS5_IfEEEE_block_invoke(uint64_t a1, _QWORD *a2)
{
  return objc_msgSend(*(id *)(a1 + 40), "addObject:", objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", *a2, a2[1]));
}

void nlp::CFScopedPtr<__CFArray const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

CoreNLP::JapaneseSubWordTagger *CoreNLP::JapaneseSubWordTagger::JapaneseSubWordTagger(CoreNLP::JapaneseSubWordTagger *this, const CoreNLP::TaggerContext *a2, const CoreNLP::StringBuffer *a3)
{
  _QWORD *v5;
  CoreNLP::MeCabSubTokenizer *Tokenizer;

  v5 = CoreNLP::SubWordTagger::SubWordTagger(this, (uint64_t)a2, (uint64_t)a3);
  *v5 = &off_1E2DF2A48;
  *((_WORD *)v5 + 24) = 0;
  Tokenizer = CoreNLP::MeCabSubTokenizer::createTokenizer(1);
  *((_QWORD *)this + 7) = Tokenizer;
  if (Tokenizer)
    (*(void (**)(CoreNLP::MeCabSubTokenizer *, _QWORD))(*(_QWORD *)Tokenizer + 24))(Tokenizer, *(_QWORD *)a2);
  return this;
}

void sub_191CAAE44(_Unwind_Exception *a1)
{
  CoreNLP::SubWordTagger *v1;
  uint64_t v3;

  v3 = *((_QWORD *)v1 + 7);
  *((_QWORD *)v1 + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  CoreNLP::SubWordTagger::~SubWordTagger(v1);
  _Unwind_Resume(a1);
}

void CoreNLP::JapaneseSubWordTagger::~JapaneseSubWordTagger(CoreNLP::JapaneseSubWordTagger *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DF2A48;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DF2A48;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
  JUMPOUT(0x19401E994);
}

unsigned __int16 *CoreNLP::JapaneseSubWordTagger::setString(unsigned __int16 *this, const __CFString *a2, CFRange a3)
{
  uint64_t length;
  CFIndex location;
  unsigned __int16 *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  CFRange v12;

  length = a3.length;
  location = a3.location;
  v5 = this;
  v6 = (_QWORD *)*((_QWORD *)this + 1);
  if ((*v6 & 0x20890000) == 0x20000000 && a3.length <= 4)
  {
    v8 = v6[2];
    v7 = v6[3];
    if (v8 == a3.location && v7 == a3.length)
    {
      this = (unsigned __int16 *)CoreNLP::StringBuffer::getSubStringCharsOfRange(*((CoreNLP::StringBuffer **)this + 2), a3);
      if (length < 1)
      {
LABEL_13:
        v5[24] = 1;
        return this;
      }
      v10 = length;
      while (1)
      {
        v11 = *this++;
        if ((v11 - 12353) >= 0xBF)
          break;
        if (!--v10)
          goto LABEL_13;
      }
    }
  }
  *((_BYTE *)v5 + 48) = 0;
  if (*((_QWORD *)v5 + 7))
  {
    v12.location = location;
    v12.length = length;
    CoreNLP::StringBuffer::getSubStringCharsOfRange(*((CoreNLP::StringBuffer **)v5 + 2), v12);
    return (unsigned __int16 *)(*(uint64_t (**)(_QWORD, _QWORD, CFIndex, uint64_t))(**((_QWORD **)v5 + 7) + 16))(*((_QWORD *)v5 + 7), *(_QWORD *)(*((_QWORD *)v5 + 2) + 24), location, length);
  }
  return this;
}

uint64_t CoreNLP::JapaneseSubWordTagger::fastEnumerateTokensWithSpecifiedStop(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t CoreNLP::JapaneseSubWordTagger::enumeratePossiblePersonNameSequences(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = 0;
  return (*(uint64_t (**)(uint64_t, char *))(a2 + 16))(a2, &v3);
}

uint64_t CoreNLP::JapaneseSubWordTagger::enumeratePersonNamesOfCurrentSequence(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD))(*a1 + 160))(a1, a2, a3, a1[7]);
}

uint64_t CoreNLP::JapaneseSubWordTagger::goToTokenAtIndex(CoreNLP::JapaneseSubWordTagger *this, uint64_t a2, uint64_t a3, CFRange *a4)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFRange *))(*(_QWORD *)result + 40))(result, a2, a3, a4);
  return result;
}

uint64_t CoreNLP::JapaneseSubWordTagger::copyTranscriptionOfCurrentToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)result + 48))(result, a2, **(_QWORD **)(a1 + 8), a3);
  return result;
}

uint64_t CoreNLP::JapaneseSubWordTagger::getTranscriptionCharactersPtrOfCurrentToken(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 56))(result, a2, **(_QWORD **)(a1 + 8));
  return result;
}

uint64_t CoreNLP::JapaneseSubWordTagger::getPartOfSpeechOfCurrentToken(CoreNLP::JapaneseSubWordTagger *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 7);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 64))(v1);
  else
    return 15;
}

double CoreNLP::JapaneseSubWordTagger::getNextToken(CoreNLP::JapaneseSubWordTagger *this, CFRange *a2)
{
  uint64_t v2;
  __int128 v3;

  if (*((_BYTE *)this + 48))
  {
    if (!*((_BYTE *)this + 49))
    {
      v3 = *(_OWORD *)(*((_QWORD *)this + 1) + 16);
      *(_OWORD *)((char *)this + 24) = v3;
      *((_QWORD *)this + 5) = 128;
      *((_BYTE *)this + 49) = 1;
      if (a2)
      {
        *(_QWORD *)&v3 = -1;
        *a2 = (CFRange)xmmword_191D40610;
      }
    }
  }
  else
  {
    v2 = *((_QWORD *)this + 7);
    if (v2)
      (*(void (**)(uint64_t, CFRange *))(*(_QWORD *)v2 + 72))(v2, a2);
  }
  return *(double *)&v3;
}

uint64_t CoreNLP::JapaneseSubWordTagger::reset(CoreNLP::JapaneseSubWordTagger *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
  return result;
}

_QWORD *CoreNLP::BERTSentenceEmbedding::BERTSentenceEmbedding(_QWORD *a1, const void **a2, char a3)
{
  corelm::NeuralNetwork *v6;
  size_t v7;
  void **v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;

  *a1 = &off_1E2DF29A0;
  v6 = (corelm::NeuralNetwork *)(a1 + 1);
  if (*((char *)a2 + 23) >= 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = (size_t)a2[1];
  v8 = v15;
  std::string::basic_string[abi:ne180100]((uint64_t)v15, v7 + 38);
  if (v16 < 0)
    v8 = (void **)v15[0];
  if (v7)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    memmove(v8, v9, v7);
  }
  strcpy((char *)v8 + v7, "/sentence_embeddings_head.espresso.bin");
  std::string::basic_string[abi:ne180100]<0>(__p, "CPU");
  corelm::NeuralNetwork::NeuralNetwork((uint64_t)v6, (uint64_t)v15, (uint64_t)__p);
  if (v14 < 0)
    operator delete(__p[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  a1[14] = 0;
  if ((a3 & 1) != 0)
  {
    v10 = operator new();
    CoreNLP::BERTANEEmbedding::BERTANEEmbedding(v10, a2, 1, 12);
  }
  else
  {
    v10 = operator new();
    CoreNLP::BERTEmbedding::BERTEmbedding(v10, a2, 1, 12);
  }
  v11 = a1[14];
  a1[14] = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  a1[15] = corelm::NeuralNetwork::outputDimension(v6);
  return a1;
}

void sub_191CAB2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  char **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  MEMORY[0x19401E994](v22, 0x10B3C40FE858EBELL);
  v24 = *(_QWORD *)(v21 + 112);
  *(_QWORD *)(v21 + 112) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  corelm::NeuralNetwork::~NeuralNetwork(v20);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::BERTSentenceEmbedding::fillStringVector(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  int v9;
  void *v10[2];
  uint64_t v11;
  uint64_t v12;
  void *__p;
  uint64_t v14;
  const void *v15;

  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 32))(*(_QWORD *)(a1 + 112));
  if ((_DWORD)v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "input");
    corelm::NeuralNetwork::setInputTensor<float,void>((uint64_t **)(a1 + 8), *(const void **)a3, (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2, (uint64_t)&__p, 1);
    if (SHIBYTE(v15) < 0)
      operator delete(__p);
    corelm::NeuralNetwork::predict((corelm::NeuralNetwork *)(a1 + 8));
    v12 = *(_QWORD *)(a1 + 120);
    std::string::basic_string[abi:ne180100]<0>(v10, "output");
    corelm::NeuralNetwork::getOutput<1ul>((uint64_t *)(a1 + 8), (int *)&v12, (uint64_t)v10, (uint64_t)&__p);
    if (SHIBYTE(v11) < 0)
      operator delete(v10[0]);
    v9 = 0;
    std::vector<float>::vector(v10, (int)v14, &v9);
    v6 = *(void **)a3;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)(a3 + 8) = v6;
      operator delete(v6);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    v7 = v10[0];
    *(_OWORD *)a3 = *(_OWORD *)v10;
    *(_QWORD *)(a3 + 16) = v11;
    memmove(v7, v15, 4 * (int)v14);
    corelm::NeuralNetwork::clear((corelm::NeuralNetwork *)(a1 + 8));
  }
  return v5;
}

void sub_191CAB4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::BERTSentenceEmbedding::dimension(CoreNLP::BERTSentenceEmbedding *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t CoreNLP::BERTSentenceEmbedding::version(CoreNLP::BERTSentenceEmbedding *this)
{
  return 0;
}

uint64_t CoreNLP::BERTSentenceEmbedding::modelLanguage(CoreNLP::BERTSentenceEmbedding *this)
{
  return 1;
}

void CoreNLP::BERTSentenceEmbedding::~BERTSentenceEmbedding(CoreNLP::BERTSentenceEmbedding *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DF29A0;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  corelm::NeuralNetwork::~NeuralNetwork((char **)this + 1);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DF29A0;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  corelm::NeuralNetwork::~NeuralNetwork((char **)this + 1);
  JUMPOUT(0x19401E994);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_191CAB6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *CoreNLP::ChineseSubWordTagger::ChineseSubWordTagger(_QWORD *a1, _QWORD *a2, uint64_t a3, int a4)
{
  _QWORD *v7;
  int v8;
  int v9;
  int v10;
  CoreNLP::MeCabSubTokenizer *Tokenizer;

  v7 = CoreNLP::SubWordTagger::SubWordTagger(a1, (uint64_t)a2, a3);
  *v7 = &off_1E2DF27D8;
  *((_DWORD *)v7 + 12) = a4;
  if (a4 == 5)
    v8 = 3;
  else
    v8 = 0;
  if (a4 == 54)
    v9 = 4;
  else
    v9 = v8;
  if (a4 == 4)
    v10 = 2;
  else
    v10 = v9;
  Tokenizer = CoreNLP::MeCabSubTokenizer::createTokenizer(v10);
  a1[7] = Tokenizer;
  if (Tokenizer)
    (*(void (**)(CoreNLP::MeCabSubTokenizer *, _QWORD))(*(_QWORD *)Tokenizer + 24))(Tokenizer, *a2);
  return a1;
}

void sub_191CAB798(_Unwind_Exception *a1)
{
  CoreNLP::SubWordTagger *v1;
  uint64_t v3;

  v3 = *((_QWORD *)v1 + 7);
  *((_QWORD *)v1 + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  CoreNLP::SubWordTagger::~SubWordTagger(v1);
  _Unwind_Resume(a1);
}

void CoreNLP::ChineseSubWordTagger::~ChineseSubWordTagger(CoreNLP::ChineseSubWordTagger *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DF27D8;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DF27D8;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
  JUMPOUT(0x19401E994);
}

uint64_t CoreNLP::ChineseSubWordTagger::setString(uint64_t this, const __CFString *a2, CFRange a3)
{
  CFIndex length;
  CFIndex location;
  uint64_t v5;

  if (*(_QWORD *)(this + 56))
  {
    length = a3.length;
    location = a3.location;
    v5 = this;
    CoreNLP::StringBuffer::getSubStringCharsOfRange(*(CoreNLP::StringBuffer **)(this + 16), a3);
    return (*(uint64_t (**)(_QWORD, _QWORD, CFIndex, CFIndex))(**(_QWORD **)(v5 + 56) + 16))(*(_QWORD *)(v5 + 56), *(_QWORD *)(*(_QWORD *)(v5 + 16) + 24), location, length);
  }
  return this;
}

uint64_t CoreNLP::ChineseSubWordTagger::fastEnumerateTokensWithSpecifiedStop(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t CoreNLP::ChineseSubWordTagger::enumeratePossiblePersonNameSequences(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = 0;
  return (*(uint64_t (**)(uint64_t, char *))(a2 + 16))(a2, &v3);
}

uint64_t CoreNLP::ChineseSubWordTagger::enumeratePersonNamesOfCurrentSequence(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD))(*a1 + 160))(a1, a2, a3, a1[7]);
}

uint64_t CoreNLP::ChineseSubWordTagger::goToTokenAtIndex(CoreNLP::ChineseSubWordTagger *this, uint64_t a2, uint64_t a3, CFRange *a4)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFRange *))(*(_QWORD *)result + 40))(result, a2, a3, a4);
  return result;
}

uint64_t CoreNLP::ChineseSubWordTagger::copyTranscriptionOfCurrentToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)result + 48))(result, a2, **(_QWORD **)(a1 + 8), a3);
  return result;
}

uint64_t CoreNLP::ChineseSubWordTagger::getTranscriptionCharactersPtrOfCurrentToken(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 56))(result, a2, **(_QWORD **)(a1 + 8));
  return result;
}

uint64_t CoreNLP::ChineseSubWordTagger::getPartOfSpeechOfCurrentToken(CoreNLP::ChineseSubWordTagger *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 7);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 64))(v1);
  else
    return 15;
}

uint64_t CoreNLP::ChineseSubWordTagger::getNextToken(CoreNLP::ChineseSubWordTagger *this, CFRange *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    return (*(uint64_t (**)(uint64_t, CFRange *))(*(_QWORD *)result + 72))(result, a2);
  return result;
}

uint64_t CoreNLP::ChineseSubWordTagger::reset(CoreNLP::ChineseSubWordTagger *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
  return result;
}

uint64_t CoreNLP::ChineseSubWordTagger::setTokenizerOptions(CoreNLP::ChineseSubWordTagger *this)
{
  int v2;
  int v3;
  int v4;
  int v5;
  CoreNLP::MeCabSubTokenizer *Tokenizer;
  uint64_t result;

  v2 = *((_DWORD *)this + 12);
  if (v2 == 5)
    v3 = 3;
  else
    v3 = 0;
  if (v2 == 54)
    v4 = 4;
  else
    v4 = v3;
  if (v2 == 4)
    v5 = 2;
  else
    v5 = v4;
  Tokenizer = CoreNLP::MeCabSubTokenizer::createTokenizer(v5);
  result = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = Tokenizer;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t CoreNLP::TaggerContext::setLocaleConstraints(CoreNLP::TaggerContext *this, CFArrayRef theArray)
{
  CoreNLP *ValueAtIndex;
  const __CFLocale *v5;
  uint64_t result;

  if (theArray && CFArrayGetCount(theArray) == 1)
  {
    ValueAtIndex = (CoreNLP *)CFArrayGetValueAtIndex(theArray, 0);
    result = CoreNLP::getLocaleLanguage(ValueAtIndex, v5);
  }
  else
  {
    result = 1;
  }
  *((_DWORD *)this + 15) = result;
  return result;
}

uint64_t CoreNLP::TaggerContext::setStringType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 56) = a2;
  return result;
}

const __CFString *CoreNLP::TaggerContext::setCurrentOrthographyForRange(const __CFString **this, CFRange a2)
{
  uint64_t v3;
  CoreNLP::Orthography *Orthography;
  const __CFString *result;

  v3 = *((unsigned __int8 *)this + 33);
  Orthography = CoreNLP::Orthography::createOrthography(this[1], (const __CFString *)a2.location, *(CFRange *)&a2.length);
  result = this[6];
  this[6] = (const __CFString *)Orthography;
  if (result)
    return (const __CFString *)(*((uint64_t (**)(const __CFString *))result->isa + 1))(result);
  return result;
}

uint64_t CoreNLP::TaggerContext::getCurrentDominantLanguageID(CoreNLP::TaggerContext *this)
{
  uint64_t v1;
  const __CFString *v2;

  if (*((_QWORD *)this + 5))
  {
    v1 = MEMORY[0x19401E1F0](*((_QWORD *)this + 5));
    return CoreNLP::languageIdForLanguage(v1, v2);
  }
  else if (*((_QWORD *)this + 6))
  {
    return CoreNLP::Orthography::dominantLanguageID(*((CoreNLP::Orthography **)this + 6));
  }
  else
  {
    return *((unsigned int *)this + 9);
  }
}

CoreNLP::Orthography *CoreNLP::TaggerContext::getCurrentDominantLanguage(CoreNLP::TaggerContext *this)
{
  CoreNLP::Orthography *result;

  if (*((_QWORD *)this + 5))
    JUMPOUT(0x19401E1F0);
  result = (CoreNLP::Orthography *)*((_QWORD *)this + 6);
  if (result)
    return (CoreNLP::Orthography *)CoreNLP::Orthography::getDominantLanguageTag(result);
  return result;
}

CoreNLP::Orthography *CoreNLP::TaggerContext::getCurrentDominantLanguageForString(CoreNLP::TaggerContext *this, const __CFString *a2, CFRange a3)
{
  CoreNLP::Orthography *result;

  if (*((_QWORD *)this + 5))
    JUMPOUT(0x19401E1F0);
  result = (CoreNLP::Orthography *)*((_QWORD *)this + 6);
  if (result)
    return (CoreNLP::Orthography *)CoreNLP::Orthography::getLanguageTagForString(result, a2, a3);
  return result;
}

uint64_t CoreNLP::TaggerContext::getCurrentDominantScriptID(CoreNLP::TaggerContext *this)
{
  const __CFLocale *v2;
  const __CFString *Value;
  const __CFString *v4;
  CoreNLP::Orthography *v6;

  v2 = (const __CFLocale *)*((_QWORD *)this + 5);
  if (v2)
  {
    Value = (const __CFString *)CFLocaleGetValue(v2, (CFLocaleKey)*MEMORY[0x1E0C9B090]);
    if (Value)
      return CoreNLP::scriptIdForScript(Value, v4);
  }
  else
  {
    v6 = (CoreNLP::Orthography *)*((_QWORD *)this + 6);
    if (v6)
      return CoreNLP::Orthography::dominantScriptID(v6);
  }
  return 28;
}

CoreNLP::Orthography *CoreNLP::TaggerContext::getCurrentDominantScript(CoreNLP::TaggerContext *this)
{
  const __CFLocale *v2;
  CoreNLP::Orthography *result;

  v2 = (const __CFLocale *)*((_QWORD *)this + 5);
  if (v2)
    return (CoreNLP::Orthography *)CFLocaleGetValue(v2, (CFLocaleKey)*MEMORY[0x1E0C9B090]);
  result = (CoreNLP::Orthography *)*((_QWORD *)this + 6);
  if (result)
    return (CoreNLP::Orthography *)CoreNLP::Orthography::getDominantScriptTag(result);
  return result;
}

CoreNLP::Orthography *CoreNLP::TaggerContext::getCurrentDominantScriptForString(CoreNLP::TaggerContext *this, const __CFString *a2, CFRange a3)
{
  const __CFLocale *v4;
  CoreNLP::Orthography *result;

  v4 = (const __CFLocale *)*((_QWORD *)this + 5);
  if (v4)
    return (CoreNLP::Orthography *)CFLocaleGetValue(v4, (CFLocaleKey)*MEMORY[0x1E0C9B090]);
  result = (CoreNLP::Orthography *)*((_QWORD *)this + 6);
  if (result)
    return (CoreNLP::Orthography *)CoreNLP::Orthography::getScriptTagForString(result, a2, a3);
  return result;
}

__CFDictionary *CoreNLP::TaggerContext::copyLanguageMap(CoreNLP::TaggerContext *this)
{
  const __CFLocale *v2;
  void *v3;
  BOOL v4;
  CoreNLP::Orthography *v5;
  CFDictionaryRef v7;
  CFTypeRef cf;
  void *values;
  void *keys;

  v2 = (const __CFLocale *)*((_QWORD *)this + 5);
  if (!v2
    || ((keys = (void *)CFLocaleGetValue(v2, (CFLocaleKey)*MEMORY[0x1E0C9B090]),
         v3 = (void *)MEMORY[0x19401E1F0](*((_QWORD *)this + 5)),
         values = v3,
         keys)
      ? (v4 = v3 == 0)
      : (v4 = 1),
        v4))
  {
    v5 = (CoreNLP::Orthography *)*((_QWORD *)this + 6);
    if (v5)
      return CoreNLP::Orthography::copyLanguageMap(v5);
    return 0;
  }
  else
  {
    cf = CFArrayCreate(0, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    v7 = CFDictionaryCreate(0, (const void **)&keys, &cf, 1, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
    CFRelease(cf);
  }
  return v7;
}

CoreNLP::LineBreakTagger *CoreNLP::LineBreakTagger::LineBreakTagger(CoreNLP::LineBreakTagger *this, const __CFLocale **a2)
{
  CoreNLP::LineBreakTagger *v4;

  v4 = (CoreNLP::LineBreakTagger *)CoreNLP::WordTagger::WordTagger(this, (CoreNLP::TaggerContext *)a2);
  *(_QWORD *)v4 = &off_1E2DF2170;
  *((_QWORD *)v4 + 5) = 0;
  CoreNLP::LineBreakTagger::resetICULineBreak(v4, a2[5]);
  return this;
}

void sub_191CABD24(_Unwind_Exception *a1)
{
  CoreNLP::SubWordTagger *v1;
  uint64_t v3;

  v3 = *((_QWORD *)v1 + 5);
  *((_QWORD *)v1 + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  CoreNLP::SubWordTagger::~SubWordTagger(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::LineBreakTagger::resetICULineBreak(CoreNLP::LineBreakTagger *this, const __CFLocale *a2)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[64];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  CoreNLP::getLocaleCString(a2, (const __CFLocale *)v5, (char *)0x40);
  v3 = operator new();
  CoreNLP::ICUTextBreakWithBuiltInRules::ICUTextBreakWithBuiltInRules(v3, *((_QWORD *)this + 4), 2, v5);
  result = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_191CABDF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10E1C4000849271);
  _Unwind_Resume(a1);
}

void CoreNLP::LineBreakTagger::~LineBreakTagger(CoreNLP::LineBreakTagger *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DF2170;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DF2170;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
  JUMPOUT(0x19401E994);
}

uint64_t CoreNLP::LineBreakTagger::setLocale(CoreNLP::TaggerContext **this, const __CFLocale *a2)
{
  CoreNLP::Tagger::setLocale(this, a2);
  return CoreNLP::LineBreakTagger::resetICULineBreak((CoreNLP::LineBreakTagger *)this, a2);
}

uint64_t CoreNLP::LineBreakTagger::setLocaleConstraints(CoreNLP::TaggerContext **this, const __CFArray *a2)
{
  uint64_t result;
  const __CFLocale *ValueAtIndex;

  result = CoreNLP::Tagger::setLocaleConstraints(this, a2);
  if (a2)
  {
    result = CFArrayGetCount(a2);
    if (result == 1)
    {
      ValueAtIndex = (const __CFLocale *)CFArrayGetValueAtIndex(a2, 0);
      return CoreNLP::LineBreakTagger::resetICULineBreak((CoreNLP::LineBreakTagger *)this, ValueAtIndex);
    }
  }
  return result;
}

uint64_t CoreNLP::LineBreakTagger::setString(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, int a5)
{
  CoreNLP::Tagger::setString((_QWORD *)a1, a2, a3, a4, a5);
  return (*(uint64_t (**)(_QWORD, const __CFString *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), a2, a3, a4);
}

uint64_t CoreNLP::LineBreakTagger::fastEnumerateTokens(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CoreNLP::ICUTextBreak::fastEnumerateTokens(*(_QWORD *)(a1 + 40), a2, a3);
}

uint64_t CoreNLP::LineBreakTagger::enumerateTokens(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CoreNLP::ICUTextBreak::enumerateTokens(*(_QWORD *)(a1 + 40), a2, a3, a4, a5);
}

uint64_t CoreNLP::LineBreakTagger::goToTokenAtIndex(CoreNLP::LineBreakTagger *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5));
}

uint64_t CoreNLP::LineBreakTagger::getNextToken(CoreNLP::LineBreakTagger *this)
{
  char v2;

  v2 = 0;
  return (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 5) + 56))(*((_QWORD *)this + 5), &v2);
}

_QWORD *CoreNLP::LemmaTagger::LemmaTagger(_QWORD *this, const CoreNLP::TaggerContext *a2)
{
  *this = a2;
  return this;
}

BOOL CoreNLP::LemmaTagger::lemmasAvailableForLanguage(unsigned int a1)
{
  return CoreNLP::getLXLemmatizer(a1) != 0;
}

uint64_t CoreNLP::getLXLemmatizer(unsigned int a1)
{
  uint64_t v2;
  _QWORD v4[5];
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 < 2)
    return 0;
  if (CoreNLP::loadLexiconAPI(void)::onceToken != -1)
    dispatch_once(&CoreNLP::loadLexiconAPI(void)::onceToken, &__block_literal_global_3);
  if (!CoreNLP::loadLexiconAPI(void)::isSoftlinked)
    return 0;
  if (CoreNLP::getLXLemmatizer(NLLanguageID)::onceToken != -1)
    dispatch_once(&CoreNLP::getLXLemmatizer(NLLanguageID)::onceToken, &__block_literal_global_5);
  if (!CoreNLP::getLXLemmatizer(NLLanguageID)::lemmatizerMap)
    return 0;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN7CoreNLPL15getLXLemmatizerE12NLLanguageID_block_invoke_2;
  v4[3] = &unk_1E2DF4770;
  v5 = a1;
  v4[4] = &v6;
  v2 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v2;
}

uint64_t CoreNLP::LemmaTagger::createLemmaTag(CoreNLP::TaggerContext **a1, CFRange *a2, int a3)
{
  unsigned int CurrentDominantLanguageID;
  uint64_t LXLemmatizer;
  uint64_t v8;
  const __CFAllocator *v9;
  CFStringRef v10;
  const __CFString *v11;
  const __CFString *MutableCopy;
  __CFString *v13;
  uint64_t v14;
  CFIndex Length;
  uint64_t LemmatizerLemma;
  const void *Value;
  CFRange v19;
  CFRange v20;
  CFRange v21;
  CFRange v22;

  CurrentDominantLanguageID = CoreNLP::TaggerContext::getCurrentDominantLanguageID(*a1);
  LXLemmatizer = CoreNLP::getLXLemmatizer(CurrentDominantLanguageID);
  if (LXLemmatizer)
  {
    v8 = LXLemmatizer;
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v10 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *((CFStringRef *)*a1 + 1), *a2);
    if (v10)
    {
      v11 = v10;
      if (CoreNLP::normalizeAndCreateLemmatizerLemma(_LXLemmatizer const*,__CFString const*,int)::onceToken != -1)
        dispatch_once(&CoreNLP::normalizeAndCreateLemmatizerLemma(_LXLemmatizer const*,__CFString const*,int)::onceToken, &__block_literal_global_21);
      MutableCopy = CFStringCreateMutableCopy(v9, 0, v11);
      v13 = (__CFString *)MutableCopy;
      v14 = (uint64_t)v11;
      if (MutableCopy)
      {
        Length = CFStringGetLength(MutableCopy);
        v19.location = 0;
        v19.length = Length;
        CFStringFindAndReplace(v13, CFSTR("‘"), CFSTR("'"), v19, 0);
        v20.location = 0;
        v20.length = Length;
        CFStringFindAndReplace(v13, CFSTR("’"), CFSTR("'"), v20, 0);
        v21.location = 0;
        v21.length = Length;
        CFStringFindAndReplace(v13, CFSTR("“"), CFSTR("\""), v21, 0);
        v22.location = 0;
        v22.length = Length;
        CFStringFindAndReplace(v13, CFSTR("”"), CFSTR("\""), v22, 0);
        v14 = (uint64_t)v13;
      }
      LemmatizerLemma = CoreNLP::createLemmatizerLemma(v8, v14, a3);
      if (LemmatizerLemma)
      {
        if (!v13)
          goto LABEL_19;
      }
      else
      {
        if (!v13)
        {
          LemmatizerLemma = 0;
LABEL_19:
          CFRelease(v11);
          return LemmatizerLemma;
        }
        CFStringLowercase(v13, 0);
        LemmatizerLemma = CoreNLP::createLemmatizerLemma(v8, (uint64_t)v13, a3);
        if (!LemmatizerLemma)
        {
          CFStringCapitalize(v13, 0);
          LemmatizerLemma = CoreNLP::createLemmatizerLemma(v8, (uint64_t)v13, a3);
          if (!LemmatizerLemma)
          {
            CFStringLowercase(v13, 0);
            Value = CFDictionaryGetValue((CFDictionaryRef)CoreNLP::normalizeAndCreateLemmatizerLemma(_LXLemmatizer const*,__CFString const*,int)::replacementDictionary, v13);
            if (Value)
              LemmatizerLemma = CoreNLP::createLemmatizerLemma(v8, (uint64_t)Value, a3);
            else
              LemmatizerLemma = 0;
          }
        }
      }
      CFRelease(v13);
      goto LABEL_19;
    }
  }
  return 0;
}

void sub_191CAC370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  nlp::CFScopedPtr<__CFString *>::reset(&a10, 0);
  nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0);
  _Unwind_Resume(a1);
}

void ___ZN7CoreNLPL15getLXLemmatizerE12NLLanguageID_block_invoke_2(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  CFLocaleRef v9;
  _DWORD *v10;
  const __CFString *v11;
  const __CFString *v12;
  CFLocaleRef v13;
  CFTypeRef *p_cf;
  uint64_t v15;
  uint64_t *v16;
  const __CFString *v17;
  CFTypeRef cf;
  _DWORD *v19;

  v2 = (int *)(a1 + 40);
  v3 = *(_QWORD *)(CoreNLP::getLXLemmatizer(NLLanguageID)::lemmatizerMap + 8);
  if (v3)
  {
    v4 = *v2;
    v5 = CoreNLP::getLXLemmatizer(NLLanguageID)::lemmatizerMap + 8;
    do
    {
      v6 = *(_DWORD *)(v3 + 32);
      v7 = v6 < v4;
      if (v6 >= v4)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (!v7)
        v5 = v3;
      v3 = *v8;
    }
    while (*v8);
    if (v5 != CoreNLP::getLXLemmatizer(NLLanguageID)::lemmatizerMap + 8 && v4 >= *(_DWORD *)(v5 + 32))
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(v5 + 40);
      return;
    }
  }
  else
  {
    v4 = *v2;
  }
  v9 = CoreNLP::copyLocaleForLanguageID(v4);
  v19 = v9;
  if (v9)
  {
    v10 = v9;
    v11 = (const __CFString *)MEMORY[0x19401E1F0]();
    v12 = v11;
    if (!v11)
    {
LABEL_29:
      CFRelease(v10);
LABEL_30:
      v17 = v12;
      if (v12)
      {
        v15 = MEMORY[0x19401E1F0](v12);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CoreNLP::_LXLemmatizerCreate(v15, 0);
      }
      goto LABEL_32;
    }
    cf = 0;
    if (CFStringCompare(v11, CFSTR("en"), 0))
    {
      if (CFStringCompare(v12, CFSTR("es"), 0))
      {
        if (CFStringCompare(v12, CFSTR("pt"), 0))
        {
          v13 = 0;
          goto LABEL_24;
        }
        v13 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("pt_BR"));
      }
      else
      {
        v13 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("es_ES"));
      }
    }
    else
    {
      v13 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("en_US"));
    }
    cf = v13;
LABEL_24:
    p_cf = &cf;
    if (!v13)
      p_cf = (CFTypeRef *)&v19;
    v12 = (const __CFString *)*p_cf;
    *p_cf = 0;
    if (cf)
      CFRelease(cf);
    v10 = v19;
    if (!v19)
      goto LABEL_30;
    goto LABEL_29;
  }
  v17 = 0;
LABEL_32:
  v16 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v19 = v2;
  std::__tree<std::__value_type<NLLanguageID,_LXLemmatizer const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,_LXLemmatizer const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,_LXLemmatizer const*>>>::__emplace_unique_key_args<NLLanguageID,std::piecewise_construct_t const&,std::tuple<NLLanguageID const&>,std::tuple<>>((uint64_t **)CoreNLP::getLXLemmatizer(NLLanguageID)::lemmatizerMap, v2, (uint64_t)&std::piecewise_construct, &v19)[5] = v16;
  if (v17)
    CFRelease(v17);
}

void sub_191CAC5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void ___ZN12_GLOBAL__N_18getQueueEv_block_invoke()
{
  NSObject *v0;
  NSObject *global_queue;

  v0 = dispatch_queue_create("com.apple.CoreNLP.LemmaTagger", 0);
  global_queue = dispatch_get_global_queue(-32768, 0);
  dispatch_set_target_queue(v0, global_queue);
}

uint64_t **std::__tree<std::__value_type<NLLanguageID,_LXLemmatizer const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,_LXLemmatizer const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,_LXLemmatizer const*>>>::__emplace_unique_key_args<NLLanguageID,std::piecewise_construct_t const&,std::tuple<NLLanguageID const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

CFDictionaryRef ___ZN7CoreNLPL33normalizeAndCreateLemmatizerLemmaEPK13_LXLemmatizerPK10__CFStringi_block_invoke()
{
  CFDictionaryRef result;
  _OWORD v1[3];
  void *keys[2];
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)keys = xmmword_1E2DF4850;
  v3 = *(_OWORD *)&off_1E2DF4860;
  v4 = xmmword_1E2DF4870;
  v1[0] = xmmword_1E2DF4880;
  v1[1] = *(_OWORD *)&off_1E2DF4890;
  v1[2] = xmmword_1E2DF48A0;
  result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE30], (const void **)keys, (const void **)v1, 6, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CoreNLP::normalizeAndCreateLemmatizerLemma(_LXLemmatizer const*,__CFString const*,int)::replacementDictionary = (uint64_t)result;
  return result;
}

uint64_t CoreNLP::createLemmatizerLemma(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD v7[6];
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  CFTypeRef cf;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  CFTypeRef v20;

  if ((a3 - 16) > 0x45)
    v3 = 12;
  else
    v3 = byte_191D41A30[a3 - 16];
  v15 = 0;
  v16 = &v15;
  v17 = 0x3002000000;
  v18 = __Block_byref_object_copy__0;
  v19 = __Block_byref_object_dispose__0;
  v20 = 0;
  v9 = 0;
  v10 = &v9;
  v11 = 0x3002000000;
  v12 = __Block_byref_object_copy__0;
  v13 = __Block_byref_object_dispose__0;
  cf = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZN7CoreNLPL21createLemmatizerLemmaEPK13_LXLemmatizerPK10__CFStringi_block_invoke;
  v7[3] = &unk_1E2DF48B8;
  v8 = v3;
  v7[4] = &v9;
  v7[5] = &v15;
  CoreNLP::_LXLemmatizerEnumerateLemmasforString(a1, a2, v7);
  v4 = v16;
  if (!v16[5])
    v4 = v10;
  v5 = v4[5];
  v4[5] = 0;
  _Block_object_dispose(&v9, 8);
  if (cf)
    CFRelease(cf);
  _Block_object_dispose(&v15, 8);
  if (v20)
    CFRelease(v20);
  return v5;
}

void sub_191CAC978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  const void **v9;
  const void **v10;
  uint64_t v11;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  nlp::CFScopedPtr<__CFString const*>::reset(v10, 0);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  nlp::CFScopedPtr<__CFString const*>::reset(v9, 0);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(a1 + 40), 0);
}

void ___ZN7CoreNLPL21createLemmatizerLemmaEPK13_LXLemmatizerPK10__CFStringi_block_invoke(uint64_t a1, CFTypeRef cf, int a3, _BYTE *a4)
{
  uint64_t v8;
  const void **v9;
  uint64_t v10;

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v10 = *(_QWORD *)(v8 + 40);
  v9 = (const void **)(v8 + 40);
  if (!v10)
    nlp::CFScopedPtr<__CFString const*>::acquire(v9, cf);
  if (*(unsigned __int8 *)(a1 + 48) == a3)
  {
    nlp::CFScopedPtr<__CFString const*>::acquire((const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), cf);
    *a4 = 1;
  }
}

void nlp::CFScopedPtr<__CFString const*>::acquire(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    nlp::CFScopedPtr<__CFString const*>::reset(a1, cf);
  }
}

void nlp::CFScopedPtr<__CFString const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFString *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

__n128 corelm::util::Matrix<float>::Matrix(uint64_t a1, uint64_t a2, __n128 *a3, int a4)
{
  __n128 result;

  *(_DWORD *)a1 = a4;
  result = *a3;
  *(__n128 *)(a1 + 8) = *a3;
  *(_QWORD *)(a1 + 24) = a2;
  return result;
}

uint64_t corelm::util::Matrix<float>::numCols(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t corelm::util::Matrix<float>::flatIndex(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = 2;
  if (*a1)
  {
    v4 = a3;
  }
  else
  {
    v3 = 4;
    v4 = a2;
  }
  if (*a1)
    v5 = a2;
  else
    v5 = a3;
  return v5 + *(_QWORD *)&a1[v3] * v4;
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_191CACBFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401E928](v1);
  _Unwind_Resume(a1);
}

char *CoreNLP::NLLangid::setLanguageConstraints(uint64_t a1, char *a2, int64_t a3)
{
  char *result;
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  result = (char *)(a1 + 32);
  *((_QWORD *)result + 1) = v4;
  if (a2)
  {
    if (a3 >= 1)
      return std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(result, a2, (uint64_t)&a2[4 * a3], a3);
  }
  return result;
}

const char *CoreNLP::NLLangid::isThaiString(CoreNLP::NLLangid *this, const __CFString *a2, CFRange a3)
{
  const char *result;

  if (result)
    return (const char *)(strncmp(result, "th", 3uLL) == 0);
  return result;
}

CoreNLP::TaggerContext *CoreNLP::NLLangid::setTokenizerOptions(CoreNLP::TaggerContext *this, int a2)
{
  CoreNLP::TaggerContext **v3;
  CoreNLP::TaggerContext *v4;

  if ((a2 & 0x80000) != 0)
  {
    v3 = (CoreNLP::TaggerContext **)((char *)this + 24);
    if (!*((_QWORD *)this + 3))
    {
      v4 = (CoreNLP::TaggerContext *)operator new();
      CoreNLP::TaggerContext::TaggerContext(v4);
      this = std::unique_ptr<CoreNLP::TaggerContext>::reset[abi:ne180100](v3, v4);
    }
    *(_QWORD *)*v3 = a2 & 0x80000000;
  }
  return this;
}

void sub_191CACCE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x1060C40C790CA97);
  _Unwind_Resume(a1);
}

CoreNLP::TaggerContext *std::unique_ptr<CoreNLP::TaggerContext>::reset[abi:ne180100](CoreNLP::TaggerContext **a1, CoreNLP::TaggerContext *a2)
{
  CoreNLP::TaggerContext *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CoreNLP::TaggerContext::~TaggerContext(result);
    JUMPOUT(0x19401E994);
  }
  return result;
}

CFStringRef CoreNLP::NLLangid::copyLanguageString(CoreNLP::NLLangid *this, const __CFString *a2, CFRange a3)
{
  CFIndex location;
  BOOL v6;
  CFStringRef v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  location = a3.location;
  if (CoreNLP::NLLangid::copyLanguageString(__CFString const*,CFRange)::initOnce != -1)
    dispatch_once(&CoreNLP::NLLangid::copyLanguageString(__CFString const*,CFRange)::initOnce, &__block_literal_global_6);
  if (CoreNLP::NLLangid::copyLanguageString(__CFString const*,CFRange)::langid)
    v6 = CoreNLP::NLLangid::copyLanguageString(__CFString const*,CFRange)::queue == 0;
  else
    v6 = 1;
  if (v6)
    return 0;
  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZN7CoreNLP8NLLangid18copyLanguageStringEPK10__CFString7CFRange_block_invoke_2;
  v9[3] = &unk_1E2DF48E0;
  v9[4] = &v10;
  v9[5] = this;
  v9[6] = a2;
  v9[7] = location;
  dispatch_sync((dispatch_queue_t)CoreNLP::NLLangid::copyLanguageString(__CFString const*,CFRange)::queue, v9);
  v7 = (CFStringRef)v11[3];
  if (v7)
  {
    if (!strncmp((const char *)v11[3], "yue-Hant", 9uLL))
    {
      v7 = CFSTR("zh-Hant");
    }
    else if (!strncmp((const char *)v7, "--", 3uLL))
    {
      v7 = 0;
    }
    else
    {
      v7 = CFStringCreateWithCString(0, (const char *)v7, 0x201u);
    }
  }
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_191CACE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

dispatch_queue_t ___ZN7CoreNLP8NLLangid18copyLanguageStringEPK10__CFString7CFRange_block_invoke()
{
  dispatch_queue_t result;

  CoreNLP::NLLangid::copyLanguageString(__CFString const*,CFRange)::langid = langid_create();
  result = dispatch_queue_create("com.apple.CoreNLP.LanguageIdentifier", 0);
  CoreNLP::NLLangid::copyLanguageString(__CFString const*,CFRange)::queue = (uint64_t)result;
  return result;
}

uint64_t ___ZN7CoreNLP8NLLangid18copyLanguageStringEPK10__CFString7CFRange_block_invoke_2(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

__CFArray *CoreNLP::NLLangid::copyPossibleLanguageStrings(int **this, const __CFString *a2, CFRange a3)
{
  CFIndex location;
  CFIndex length;
  __CFArray *Mutable;
  int *v8;
  const char *v9;
  CFStringRef v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  CoreNLP *v14;
  const char *v15;
  const char *v16;
  int v17;
  int *v18;
  int *v19;
  CFStringRef v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25[3];
  uint64_t v26;
  CFRange v27;

  location = a3.location;
  v26 = *MEMORY[0x1E0C80C00];
  if (a3.length >= 0x190uLL)
    length = 400;
  else
    length = a3.length;
  a3.length = length;
  CoreNLP::UStringPiece::UStringPiece((CoreNLP::UStringPiece *)&v22, a2, a3);
  if (!v23)
    goto LABEL_23;
  v27.location = location;
  v27.length = length;
  if (!CoreNLP::NLLangid::cjTokenLengthInString((CoreNLP::NLLangid *)this, a2, v27))
    goto LABEL_23;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    goto LABEL_24;
  v8 = this[4];
  if ((char *)this[5] - (char *)v8 == 4)
  {
    v9 = CoreNLP::convertLanguageIDToCode(*v8);
    v10 = CFStringCreateWithCString(0, v9, 0x8000100u);
    if (v10)
    {
      CFArrayAppendValue(Mutable, v10);
      CFRelease(v10);
    }
    goto LABEL_24;
  }
  if (!v11)
  {
LABEL_23:
    Mutable = 0;
    goto LABEL_24;
  }
  if (v11 >= 1)
  {
    v12 = 0;
    v13 = v11;
    do
    {
      v14 = (CoreNLP *)langid_languagecode();
      v16 = (const char *)v14;
      if (v14)
      {
        v17 = CoreNLP::convertLanguageIDWithCode(v14, v15);
        v19 = this[4];
        v18 = this[5];
        if (v19 == v18)
          goto LABEL_19;
        while (*v19 != v17)
        {
          if (++v19 == v18)
          {
            v19 = this[5];
            break;
          }
        }
        if (v19 != v18)
        {
LABEL_19:
          v20 = CFStringCreateWithCString(0, v16, 0x8000100u);
          if (v20)
          {
            CFArrayAppendValue(Mutable, v20);
            CFRelease(v20);
          }
        }
      }
      ++v12;
    }
    while (v12 != v13);
  }
LABEL_24:
  CoreNLP::UStringPiece::~UStringPiece((CoreNLP::UStringPiece *)&v22);
  return Mutable;
}

void sub_191CAD0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CoreNLP::UStringPiece::~UStringPiece((CoreNLP::UStringPiece *)&a9);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::langid_identifiy_possible_languages(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  char *v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  double v31;
  _QWORD v32[2];

  result = 0;
  v32[1] = *MEMORY[0x1E0C80C00];
  if (!a1 || !a2 || !a3 || !a4)
    return result;
  langid_reset();
  v7 = langid_consume_string();
  v8 = langid_numlanguages();
  v9 = v8;
  if (v8 >= 3)
    v10 = 3;
  else
    v10 = v8;
  if (v10)
    v8 = (uint64_t)memset(a4, 255, 4 * v10);
  if (v9 < 1)
    return 0;
  MEMORY[0x1E0C80A78](v8, v32);
  v13 = (char *)v32 - v12;
  v14 = 0;
  v15 = 0;
  v16 = (char *)v32 - v12 + 4;
  do
  {
    if (v15 >= 1)
    {
      v17 = 0;
      v18 = *(_DWORD *)(v7 + 4 * v14);
      v19 = (unsigned int *)v16;
      v20 = v15;
      while (1)
      {
        v21 = *v19;
        v19 += 2;
        if (v18 > v21)
          break;
        if (v15 == ++v17)
          goto LABEL_18;
      }
      LODWORD(v22) = v15 - 2;
      if (v15 - 2 >= (int)v17)
      {
        v22 = (int)v22;
        do
          *(_QWORD *)&v13[8 * v22 + 8] = *(_QWORD *)&v13[8 * v22];
        while (v22-- > v17);
      }
      v20 = v17;
      goto LABEL_25;
    }
    v20 = 0;
LABEL_18:
    if (v10 > v15)
    {
      v18 = *(_DWORD *)(v7 + 4 * v14);
LABEL_25:
      v24 = &v13[8 * v20];
      *(_DWORD *)v24 = v14;
      *((_DWORD *)v24 + 1) = v18;
      if (v10 > v15)
        ++v15;
    }
    ++v14;
  }
  while (v14 != v11);
  if (v15 < 1)
    goto LABEL_42;
  v25 = 0;
  v26 = 0;
  result = 0;
  v27 = (unsigned int *)(v13 + 4);
  v28 = 4 * v15;
  while (2)
  {
    v29 = *v27;
    if (*v27)
    {
      v30 = *(v27 - 1);
      if ((v30 - 20) > 2)
        goto LABEL_40;
      if (v25)
      {
        if (v29 <= 0x63)
          v31 = 1.5;
        else
          v31 = 1.2;
        if (v31 * (double)v29 < (double)v26)
        {
LABEL_40:
          v25 += 4;
          v27 += 2;
          if (v28 == v25)
            break;
          continue;
        }
      }
      else
      {
        v26 = *v27;
      }
      a4[v25 / 4] = v30;
      result = (result + 1);
      goto LABEL_40;
    }
    break;
  }
  if (!(_DWORD)result)
  {
LABEL_42:
    *(_QWORD *)a4 = 0x1500000014;
    a4[2] = 22;
    return 3;
  }
  return result;
}

uint64_t CoreNLP::NLLangid::getTopHypothesesOfString(uint64_t *a1, const __CFString *a2, CFRange a3, _DWORD *a4, uint64_t a5)
{
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t i;
  CoreNLP *v13;
  const char *v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD v23[3];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a3.length >= 0x190uLL)
    a3.length = 400;
  CoreNLP::UStringPiece::UStringPiece((CoreNLP::UStringPiece *)&v20, a2, a3);
  if (!v21)
    goto LABEL_19;
  v8 = (_DWORD *)a1[4];
  if (a1[5] - (_QWORD)v8 == 4)
  {
    *a4 = *v8;
    a4[1] = 1065353216;
    v9 = 1;
    goto LABEL_20;
  }
  v11 = v10 >= a5 ? a5 : v10;
  if (v11 < 1)
  {
LABEL_19:
    v9 = 0;
    goto LABEL_20;
  }
  v9 = 0;
  for (i = 0; i != v11; ++i)
  {
    v13 = (CoreNLP *)langid_languagecode();
    v15 = CoreNLP::convertLanguageIDWithCode(v13, v14);
    v17 = (_DWORD *)a1[4];
    v16 = (_DWORD *)a1[5];
    if (v17 == v16)
      goto LABEL_16;
    while (*v17 != v15)
    {
      if (++v17 == v16)
      {
        v17 = (_DWORD *)a1[5];
        break;
      }
    }
    if (v17 != v16)
    {
LABEL_16:
      v18 = &a4[2 * v9];
      *v18 = v15;
      v18[1] = 1058642330;
      ++v9;
    }
  }
LABEL_20:
  CoreNLP::UStringPiece::~UStringPiece((CoreNLP::UStringPiece *)&v20);
  return v9;
}

void sub_191CAD4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CoreNLP::UStringPiece::~UStringPiece((CoreNLP::UStringPiece *)&a9);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::NLLangid::getLanguageOfCJString(uint64_t a1, const __CFString *a2, CFIndex *a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t result;
  unsigned int v8;

  v4 = a4;
  LODWORD(result) = CoreNLP::NLLangid::getLanguageOfString(a1, a2, *a3, a3[1], a4);
  if ((v4 & 0xFFFFFFFE) == 4 || v4 == 54 || v4 == 20)
    v8 = v4;
  else
    v8 = 1;
  if (result > 0x36 || ((1 << result) & 0x40000000100030) == 0)
    return v8;
  else
    return result;
}

uint64_t CoreNLP::NLLangid::getLanguageOfCJKString(uint64_t a1, const __CFString *a2, CFIndex *a3, uint64_t a4)
{
  uint64_t LanguageOfString;

  LanguageOfString = a4;
  if (a4 > 0x36 || ((1 << a4) & 0x40000000300030) == 0)
  {
    LanguageOfString = CoreNLP::NLLangid::getLanguageOfString(a1, a2, *a3, a3[1], a4);
    if (LanguageOfString > 0x36 || ((1 << LanguageOfString) & 0x40000000300030) == 0)
      return *(unsigned int *)(a1 + 8);
  }
  return LanguageOfString;
}

_QWORD *CoreNLP::mecab::DefaultNameTokenizer::createPersonNameRanges(CoreNLP::mecab::DefaultNameTokenizer *this, const CoreNLP::UStringPiece *a2, BOOL *a3)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  if (!*((_QWORD *)a2 + 1))
    return 0;
  v4 = *((_QWORD *)a2 + 3);
  if (!v4)
    return 0;
  *a3 = 0;
  if (v4 == 1)
  {
    v6 = 1;
LABEL_13:
    v8 = (_QWORD *)operator new();
    *v8 = 1;
    v10 = (_QWORD *)operator new[]();
    v8[1] = v10;
    *v10 = 0;
    v10[1] = v6;
    v10[2] = 0x40000;
    return v8;
  }
  if (CoreNLP::isChineseCompoundLastName(a2, a2))
  {
    *a3 = 1;
    v6 = *((_QWORD *)a2 + 3);
    v7 = 2;
  }
  else
  {
    v6 = *((_QWORD *)a2 + 3);
    if ((unint64_t)v6 < 2)
    {
      v7 = 1;
LABEL_12:
      if (v6 == v7)
        goto LABEL_13;
      return 0;
    }
    v7 = (int)(v6 >> 1);
  }
  if (v6 <= v7)
    goto LABEL_12;
  v8 = (_QWORD *)operator new();
  *v8 = 2;
  v9 = (_QWORD *)operator new[]();
  v8[1] = v9;
  *v9 = 0;
  v9[1] = v7;
  v9[2] = 0x40000;
  v9[3] = v7;
  v9[4] = v6 - v7;
  v9[5] = 0x10000;
  return v8;
}

void sub_191CAD710(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x1020C405730B0C9);
  _Unwind_Resume(a1);
}

_QWORD *CoreNLP::mecab::JapaneseNameTokenizer::createPersonNameRanges(CoreNLP::mecab::JapaneseNameTokenizer *this, const CoreNLP::UStringPiece *a2, BOOL *a3)
{
  _QWORD *v6;
  uint64_t *v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v13;
  uint64_t v14;

  if (!*((_QWORD *)a2 + 1) || !*((_QWORD *)a2 + 3))
    return 0;
  v6 = (_QWORD *)operator new();
  *v6 = 1;
  v7 = (uint64_t *)operator new[]();
  v6[1] = v7;
  if ((CoreNLP::mecab::JapaneseNameTokenizer::isNotFullName((uint64_t)this, (uint64_t)a2, v7) & 1) == 0)
  {
    MEMORY[0x19401E970](v7, 0x1000C80504FFAC1);
    MEMORY[0x19401E994](v6, 0x1020C405730B0C9);
    v8 = (*(uint64_t (**)(_QWORD, const CoreNLP::UStringPiece *, uint64_t))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1), a2, 1);
    *a3 = v8 > 0;
    if (v8 < 1)
    {
      v6 = (_QWORD *)operator new();
      *v6 = 1;
      v13 = (_QWORD *)operator new[]();
      v6[1] = v13;
      v14 = *((_QWORD *)a2 + 3);
      *v13 = 0;
      v13[1] = v14;
      v13[2] = 0x40000;
      return v6;
    }
    v9 = v8;
    v10 = *((_QWORD *)a2 + 3);
    if (v10 > v8)
    {
      v6 = (_QWORD *)operator new();
      *v6 = 2;
      v11 = (_QWORD *)operator new[]();
      v6[1] = v11;
      *v11 = 0;
      v11[1] = v9;
      v11[2] = 0x40000;
      v11[3] = v9;
      v11[4] = v10 - v9;
      v11[5] = 0x10000;
      return v6;
    }
    return 0;
  }
  *a3 = 1;
  return v6;
}

void sub_191CAD908(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x1020C405730B0C9);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::mecab::JapaneseNameTokenizer::isNotFullName(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 91) & 0xFE) != 2 && *(_WORD *)(v3 + 80)
      || (v3 = *(_QWORD *)(v3 + 8)) != 0 && (*(_BYTE *)(v3 + 91) & 0xFE) != 2)
    {
      v4 = *(unsigned __int16 *)(v3 + 80);
      if (*(_WORD *)(v3 + 80))
      {
        v5 = *(unsigned __int16 *)(v3 + 88);
        if (*(_QWORD *)(a2 + 24) == v4 >> 1)
        {
          if (v5 == 1)
          {
            v6 = 0x40000;
LABEL_12:
            *a3 = (uint64_t)(*(_QWORD *)(v3 + 64) - *(_QWORD *)(a2 + 8)) >> 1;
            a3[1] = v4 >> 1;
            a3[2] = v6;
            return 1;
          }
LABEL_11:
          v6 = 0x10000;
          goto LABEL_12;
        }
        if (v5 == 2)
          goto LABEL_11;
        v8 = *(_QWORD *)(v3 + 16);
        if (v8)
        {
          v6 = 0x10000;
          while (*(unsigned __int16 *)(v8 + 80) != (_DWORD)v4 || *(_WORD *)(v8 + 88) != 2)
          {
            result = 0;
            v8 = *(_QWORD *)(v8 + 16);
            if (!v8)
              return result;
          }
          goto LABEL_12;
        }
      }
    }
  }
  return 0;
}

_QWORD *CoreNLP::mecab::SimplifiedChineseNameTokenizer::createPersonNameRanges(CoreNLP::mecab::SimplifiedChineseNameTokenizer *this, const CoreNLP::UStringPiece *a2, BOOL *a3)
{
  unsigned __int16 *v3;
  unint64_t v5;
  int v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;

  v3 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
  if (!v3)
    return 0;
  v5 = *((_QWORD *)a2 + 3);
  if (!v5)
    return 0;
  v8 = *v3;
  if ((v8 - 7680) < 0xFA || (v8 - 33) < 0x5E || (v8 - 161) <= 0x195)
  {
    v10 = 1;
    do
    {
      v11 = v10;
      if (v5 == v10)
        break;
      v12 = v3[v10++];
    }
    while ((v12 - 7680) < 0xFA || (v12 - 33) < 0x5E || (v12 - 161) < 0x196);
    v9 = v11 >= v5;
  }
  else
  {
    v9 = 0;
  }
  if (v5 <= 2 && !v9)
    *a3 = 0;
  if (CoreNLP::isChineseCompoundLastName(a2, a2))
  {
    *a3 = 1;
    v13 = *((_QWORD *)a2 + 3);
    v14 = 2;
  }
  else
  {
    v15 = (*(uint64_t (**)(_QWORD, const CoreNLP::UStringPiece *, uint64_t))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1), a2, 41);
    v13 = *((_QWORD *)a2 + 3);
    if (v9 && v15 == 0)
      v14 = v13;
    else
      v14 = v15;
    *a3 = v14 > 0;
    if (v14 <= 0)
      v14 = v13 >> 1;
  }
  v16 = v14;
  if (v13 <= v14)
  {
    if (v13 == v14)
    {
      v17 = (_QWORD *)operator new();
      *v17 = 1;
      v19 = (_QWORD *)operator new[]();
      v17[1] = v19;
      *v19 = 0;
      v19[1] = v13;
      v19[2] = 0x40000;
      return v17;
    }
    return 0;
  }
  v17 = (_QWORD *)operator new();
  *v17 = 2;
  v18 = (_QWORD *)operator new[]();
  v17[1] = v18;
  *v18 = 0;
  v18[1] = v16;
  v18[2] = 0x40000;
  v18[3] = v16;
  v18[4] = v13 - v16;
  v18[5] = 0x10000;
  return v17;
}

void sub_191CADBEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x1020C405730B0C9);
  _Unwind_Resume(a1);
}

_QWORD *CoreNLP::mecab::KoreanNameTokenizer::createPersonNameRanges(CoreNLP::mecab::KoreanNameTokenizer *this, const CoreNLP::UStringPiece *a2, BOOL *a3)
{
  uint64_t v4;
  BOOL v5;
  unsigned int LastNameLength;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 v17;

  if (!*((_QWORD *)a2 + 1))
    return 0;
  if (!*((_QWORD *)a2 + 3))
    return 0;
  v4 = *((_QWORD *)this + 2);
  if (!v4)
    return 0;
  v5 = ((*(_BYTE *)(v4 + 91) & 0xFE) != 2 && *(_WORD *)(v4 + 80) || (v4 = *(_QWORD *)(v4 + 8)) != 0)
    && *(_WORD *)(v4 + 86) == 1095;
  *a3 = v5;
  v17 = 0;
  LastNameLength = CoreNLP::mecab::KoreanNameTokenizer::getLastNameLength((uint64_t)this, v4, a3, &v17);
  if ((LastNameLength & 0x80000000) != 0)
    return 0;
  v7 = LastNameLength;
  v8 = LastNameLength;
  v9 = *((_QWORD *)a2 + 3);
  if (v9 <= LastNameLength)
  {
    v13 = v17;
    v10 = (_QWORD *)operator new();
    *v10 = 1;
    v14 = (_QWORD *)operator new[]();
    if (v13)
      v15 = 0;
    else
      v15 = v7 == 2;
    v16 = 0x40000;
    v10[1] = v14;
    if (v15)
      v16 = 0x10000;
    *v14 = 0;
    v14[1] = v8;
    v14[2] = v16;
  }
  else
  {
    v10 = (_QWORD *)operator new();
    *v10 = 2;
    v11 = (_QWORD *)operator new[]();
    v10[1] = v11;
    *v11 = 0;
    v11[1] = v8;
    v11[2] = 0x40000;
    v11[3] = v8;
    v11[4] = v9 - v8;
    v11[5] = 0x10000;
  }
  return v10;
}

void sub_191CADD7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x1020C405730B0C9);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::mecab::KoreanNameTokenizer::getLastNameLength(uint64_t a1, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  unsigned __int16 *v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int8 v10;
  unsigned __int16 v11;
  unsigned __int16 __dst[168];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0xFFFFFFFFLL;
  v4 = *(unsigned __int16 **)(a2 + 64);
  if (!v4)
    return 0xFFFFFFFFLL;
  v5 = *(_WORD *)(a2 + 80) & 0xFFFE;
  if (v5 == 2)
  {
    result = 1;
    *a4 = 1;
  }
  else
  {
    v7 = 0;
    v8 = *v4;
    do
    {
      if (v8 == (unsigned __int16)CoreNLP::mecab::KoreanNameTokenizer::getLastNameLength(mecab_node_t const*,BOOL *,BOOL *)const::kExceptionNames[v7]
        && v4[1] == (unsigned __int16)CoreNLP::mecab::KoreanNameTokenizer::getLastNameLength(mecab_node_t const*,BOOL *,BOOL *)const::kExceptionNames[v7 + 1])
      {
        *a3 = 1;
        *a4 = 1;
        return 2;
      }
      v7 += 2;
    }
    while (v7 != 24);
    if (v5 != 4)
      return 1;
    v9 = *(_QWORD *)(a2 + 8);
    if (v9 && (*(_WORD *)(v9 + 80) & 0xFFFE) == 2)
    {
      v11 = v8;
      if ((v10 & 1) == 0)
      {
        {
          memcpy(__dst, &unk_191D41B88, sizeof(__dst));
          std::unordered_set<unsigned short>::unordered_set((uint64_t)CoreNLP::mecab::korean::isSingleSyllableLastName(unsigned short)::set, __dst, 168);
          __cxa_atexit((void (*)(void *))std::unordered_set<unsigned short>::~unordered_set[abi:ne180100], CoreNLP::mecab::korean::isSingleSyllableLastName(unsigned short)::set, &dword_191C5D000);
        }
      }
      if (std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::find<unsigned short>(CoreNLP::mecab::korean::isSingleSyllableLastName(unsigned short)::set, &v11))
      {
        return 1;
      }
    }
    return 2;
  }
  return result;
}

void sub_191CADF20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreNLP::mecab::DefaultNameTokenizer::~DefaultNameTokenizer(CoreNLP::mecab::DefaultNameTokenizer *this)
{
  JUMPOUT(0x19401E994);
}

void CoreNLP::mecab::JapaneseNameTokenizer::~JapaneseNameTokenizer(CoreNLP::mecab::JapaneseNameTokenizer *this)
{
  JUMPOUT(0x19401E994);
}

uint64_t CoreNLP::mecab::JapaneseNameTokenizer::setBeginNode(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

void CoreNLP::mecab::SimplifiedChineseNameTokenizer::~SimplifiedChineseNameTokenizer(CoreNLP::mecab::SimplifiedChineseNameTokenizer *this)
{
  JUMPOUT(0x19401E994);
}

void CoreNLP::mecab::KoreanNameTokenizer::~KoreanNameTokenizer(CoreNLP::mecab::KoreanNameTokenizer *this)
{
  JUMPOUT(0x19401E994);
}

uint64_t CoreNLP::mecab::KoreanNameTokenizer::setBeginNode(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t std::unordered_set<unsigned short>::unordered_set(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 2 * a3;
    do
    {
      std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>(a1, a2, a2);
      ++a2;
      v5 -= 2;
    }
    while (v5);
  }
  return a1;
}

void sub_191CAE014(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>(uint64_t a1, unsigned __int16 *a2, _WORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((unsigned __int16 *)v10 + 8) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<long,std::hash<long>,std::equal_to<long>,std::allocator<long>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_191CAE230(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::find<unsigned short>(_QWORD *a1, unsigned __int16 *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t **)*result)
  {
    v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int16 *)result + 8) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t NLStringEmbeddingCreateWithOptions(const __CFDictionary *a1)
{
  CoreNLP::EmbeddingManager *v2;
  uint64_t EmbeddingWrapper;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v7;
  uint64_t *v8;

  v2 = (CoreNLP::EmbeddingManager *)operator new();
  CoreNLP::EmbeddingManager::EmbeddingManager(v2, a1);
  v7 = (uint64_t *)v2;
  v8 = 0;
  EmbeddingWrapper = CoreNLP::createEmbeddingWrapper((uint64_t *)&v7);
  v4 = v7;
  v7 = 0;
  if (v4)
    std::default_delete<CoreNLP::EmbeddingManager>::operator()[abi:ne180100]((uint64_t)&v7, v4);
  v5 = v8;
  v8 = 0;
  if (v5)
    std::default_delete<CoreNLP::EmbeddingManager>::operator()[abi:ne180100]((uint64_t)&v8, v5);
  return EmbeddingWrapper;
}

void sub_191CAE37C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t *v11;
  uint64_t *v12;

  v11 = a9;
  a9 = 0;
  if (v11)
    std::default_delete<CoreNLP::EmbeddingManager>::operator()[abi:ne180100]((uint64_t)&a9, v11);
  v12 = a10;
  a10 = 0;
  if (v12)
    std::default_delete<CoreNLP::EmbeddingManager>::operator()[abi:ne180100]((uint64_t)&a10, v12);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x191CAE368);
}

uint64_t NLStringEmbeddingCreate(const void *a1)
{
  __CFDictionary *Mutable;
  uint64_t v3;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionaryAddValue(Mutable, kNLStringEmbeddingModelLocale[0], a1);
  v3 = NLStringEmbeddingCreateWithOptions(Mutable);
  CFRelease(Mutable);
  return v3;
}

CoreNLP *NLStringEmbeddingGetDimension(CoreNLP *result, void *a2)
{
  if (result)
  {
    result = *(CoreNLP **)CoreNLP::unwrapGazetteer(result, a2);
    if (result)
      return (CoreNLP *)(*(int (**)(CoreNLP *))(*(_QWORD *)result + 64))(result);
  }
  return result;
}

int *NLStringEmbeddingGetVocabularySize(int *result, void *a2)
{
  if (result)
  {
    result = *(int **)CoreNLP::unwrapGazetteer((CoreNLP *)result, a2);
    if (result)
    {
      if (result)
        return (int *)result[678];
    }
  }
  return result;
}

uint64_t NLStringEmbeddingSaveModel(const void *a1, const void *a2, const __CFDictionary *a3)
{
  __CFDictionary *MutableCopy;
  uint64_t v6;

  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, a3);
  CFDictionaryAddValue(MutableCopy, kNLStringEmbeddingModelPath[0], a1);
  v6 = NLStringEmbeddingSaveCompressedModel(a2, MutableCopy);
  CFRelease(MutableCopy);
  return v6;
}

uint64_t NLStringEmbeddingSaveCompressedModel(const void *a1, CFDictionaryRef theDict)
{
  const void *Value;
  const void *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  const char *v9;
  CoreNLP *p_p;
  int v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const char *v15;
  CoreNLP *v16;
  unsigned int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error *v26;
  std::runtime_error *v27;
  std::runtime_error *v28;
  std::runtime_error *v29;
  __int128 v30;
  std::string v31;
  const void *v32;
  int v33;
  void *__p;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  void *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  CFTypeRef cf;
  std::string v44;
  __int128 v45;
  std::string v46;
  const void *v47;
  int v48;
  void *v49[2];
  char v50;
  unsigned int v51;
  const __CFDictionary *v52;
  _QWORD v53[3];

  Value = CFDictionaryGetValue(theDict, kNLStringEmbeddingModelPath[0]);
  v5 = CFDictionaryGetValue(theDict, kNLStringEmbeddingModelData[0]);
  applesauce::CF::convert_to<std::map<std::string,std::vector<float>>,0>(a1, (uint64_t)v53);
  if (theDict)
    CFRetain(theDict);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v52, theDict);
  v51 = (*(_QWORD *)(v53[0] + 64) - *(_QWORD *)(v53[0] + 56)) >> 2;
  if (!v52)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::convert_to<std::string,0>((const __CFString *)kNLStringEmbeddingSubDimension, (uint64_t)&__p);
  v6 = applesauce::CF::at_or<int &,std::string>(v52, (const UInt8 *)&__p, &v51);
  if (SHIBYTE(v36) < 0)
    operator delete(__p);
  if (!v52)
  {
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v24, "Could not construct");
    __cxa_throw(v24, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::convert_to<std::string,0>(kNLStringEmbeddingModelVersion[0], (uint64_t)&__p);
  LODWORD(v45) = 0;
  v7 = applesauce::CF::at_or<unsigned int,std::string>(v52, (const UInt8 *)&__p, (unsigned int *)&v45);
  if (SHIBYTE(v36) < 0)
    operator delete(__p);
  if (!v52)
  {
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Could not construct");
    __cxa_throw(v25, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::convert_to<std::string,0>((const __CFString *)kNLStringEmbeddingNumberOfTrees, (uint64_t)&__p);
  LODWORD(v45) = 1;
  v8 = applesauce::CF::at_or<int &,std::string>(v52, (const UInt8 *)&__p, (unsigned int *)&v45);
  if (SHIBYTE(v36) < 0)
    operator delete(__p);
  applesauce::CF::convert_to<std::string,0>(kNLStringEmbeddingModelLocale[0], (uint64_t)v49);
  if (!v52)
  {
    v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "Could not construct");
    __cxa_throw(v26, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::find_at_key_or_optional<std::string,std::string&>(v52, (const UInt8 *)v49, &__p);
  if (v37)
  {
    if (SHIBYTE(v36) < 0)
      operator delete(__p);
    if (!v52)
    {
      v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v27, "Could not construct");
      __cxa_throw(v27, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::details::find_at_key<std::string,std::string&>(v52, (const UInt8 *)v49, (uint64_t)&__p);
    if (SHIBYTE(v36) >= 0)
      p_p = (CoreNLP *)&__p;
    else
      p_p = (CoreNLP *)__p;
    v11 = CoreNLP::convertLanguageIDWithCode(p_p, v9);
    if (SHIBYTE(v36) < 0)
      operator delete(__p);
  }
  else
  {
    if (!v52)
    {
      v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v28, "Could not construct");
      __cxa_throw(v28, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (applesauce::CF::details::has_key<std::string &>((_BOOL8)v52, (const UInt8 *)v49))
    {
      v12 = CFDictionaryGetValue(theDict, kNLStringEmbeddingModelLocale[0]);
      v13 = (const void *)MEMORY[0x19401E1F0](v12);
      v14 = v13;
      if (v13)
        CFRetain(v13);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v45, v14);
      if (!(_QWORD)v45)
      {
        v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v29, "Could not construct");
        __cxa_throw(v29, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::convert_to<std::string,0>((const __CFString *)v45, (uint64_t)&__p);
      if (SHIBYTE(v36) >= 0)
        v16 = (CoreNLP *)&__p;
      else
        v16 = (CoreNLP *)__p;
      v11 = CoreNLP::convertLanguageIDWithCode(v16, v15);
      if (SHIBYTE(v36) < 0)
        operator delete(__p);
      if ((_QWORD)v45)
        CFRelease((CFTypeRef)v45);
    }
    else
    {
      v11 = 0;
    }
  }
  v17 = v51;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  applesauce::CF::convert_or<std::string>((CFTypeID)Value, (uint64_t)&__p, &v44);
  *(_QWORD *)&v45 = __PAIR64__(v6, v17);
  *((_QWORD *)&v45 + 1) = __PAIR64__(v8, v7);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v46, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
    v47 = v5;
    v48 = v11;
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
  }
  else
  {
    v46 = v44;
    v47 = v5;
    v48 = v11;
  }
  if (SHIBYTE(v36) < 0)
    operator delete(__p);
  CoreNLP::WordEmbedding::WordEmbedding((CoreNLP::WordEmbedding *)&__p);
  v30 = v45;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v31, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  else
    v31 = v46;
  v32 = v47;
  v33 = v48;
  v18 = CoreNLP::WordEmbedding::buildModelFromDictionary((uint64_t)&__p, (uint64_t)v53, (uint64_t)&v30);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  __p = off_1E2DF1F50;
  if (cf)
    CFRelease(cf);
  cf = 0;
  v19 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  CoreNLP::ProductQuantizer::~ProductQuantizer((CoreNLP::ProductQuantizer *)&v41);
  CoreNLP::KDTree::~KDTree((CoreNLP::KDTree *)&v40);
  if (v39 < 0)
    operator delete(v38);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy((uint64_t)&v35, v36);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (v50 < 0)
    operator delete(v49[0]);
  if (v52)
    CFRelease(v52);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy((uint64_t)v53, (_QWORD *)v53[1]);
  return v18;
}

void sub_191CAEACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  uint64_t v25;

  __cxa_free_exception(v24);
  applesauce::CF::StringRef::~StringRef((const void **)(v25 - 184));
  if (*(char *)(v25 - 105) < 0)
    operator delete(*(void **)(v25 - 128));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v25 - 96));
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v25 - 88, *(_QWORD **)(v25 - 80));
  _Unwind_Resume(a1);
}

void sub_191CAEC18()
{
  JUMPOUT(0x191CAEC04);
}

void applesauce::CF::convert_to<std::map<std::string,std::vector<float>>,0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID TypeID;
  std::runtime_error *exception;

  if (!a1 || (TypeID = CFDictionaryGetTypeID(), TypeID != CFGetTypeID(a1)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::CFDictionary_get_value_to<std::map<std::string,std::vector<float>>>((const __CFDictionary *)a1, a2);
}

void sub_191CAEC98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::convert_or<std::string>(CFTypeID a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  void *__p[2];
  std::string::size_type v6;
  char v7;

  applesauce::CF::convert_as<std::string,0>(a1, (uint64_t)__p);
  if (v7)
  {
    if (SHIBYTE(v6) < 0)
    {
      std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      if (v7)
      {
        if (SHIBYTE(v6) < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      a3->__r_.__value_.__r.__words[2] = v6;
    }
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
  }
}

void CoreNLP::WordEmbedding::~WordEmbedding(CoreNLP::WordEmbedding *this)
{
  *(_QWORD *)this = off_1E2DF1F50;
  nlp::CFScopedPtr<__CFData const*>::reset((const void **)this + 346, 0);
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 2752);
  CoreNLP::ProductQuantizer::~ProductQuantizer((CoreNLP::WordEmbedding *)((char *)this + 2680));
  CoreNLP::KDTree::~KDTree((CoreNLP::WordEmbedding *)((char *)this + 88));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

{
  *(_QWORD *)this = off_1E2DF1F50;
  nlp::CFScopedPtr<__CFData const*>::reset((const void **)this + 346, 0);
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 2752);
  CoreNLP::ProductQuantizer::~ProductQuantizer((CoreNLP::WordEmbedding *)((char *)this + 2680));
  CoreNLP::KDTree::~KDTree((CoreNLP::WordEmbedding *)((char *)this + 88));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
  JUMPOUT(0x19401E994);
}

uint64_t NLStringEmbeddingCreateFromFile(const __CFString *a1)
{
  CoreNLP::WordEmbedding *v2;
  BOOL Model;
  BOOL v4;
  uint64_t *v5;
  void *v6;
  uint64_t EmbeddingWrapper;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v11;
  uint64_t *v12;
  void *__p[2];
  char v14;

  v2 = (CoreNLP::WordEmbedding *)operator new();
  CoreNLP::WordEmbedding::WordEmbedding(v2);
  applesauce::CF::convert_to<std::string,0>(a1, (uint64_t)__p);
  Model = CoreNLP::WordEmbedding::loadModel(v2, (uint64_t)__p);
  v4 = Model;
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (v4)
      goto LABEL_3;
LABEL_10:
    (*(void (**)(CoreNLP::WordEmbedding *))(*(_QWORD *)v2 + 8))(v2);
    return 0;
  }
  if (!Model)
    goto LABEL_10;
LABEL_3:
  v5 = (uint64_t *)operator new();
  __p[0] = v2;
  CoreNLP::EmbeddingManager::EmbeddingManager(v5, (uint64_t *)__p);
  v6 = __p[0];
  __p[0] = 0;
  if (v6)
    (*(void (**)(void *))(*(_QWORD *)v6 + 8))(v6);
  v11 = v5;
  v12 = 0;
  EmbeddingWrapper = CoreNLP::createEmbeddingWrapper((uint64_t *)&v11);
  v8 = v11;
  v11 = 0;
  if (v8)
    std::default_delete<CoreNLP::EmbeddingManager>::operator()[abi:ne180100]((uint64_t)&v11, v8);
  v9 = v12;
  v12 = 0;
  if (v9)
    std::default_delete<CoreNLP::EmbeddingManager>::operator()[abi:ne180100]((uint64_t)&v12, v9);
  return EmbeddingWrapper;
}

void sub_191CAEEC8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t *v18;
  uint64_t *v19;

  v18 = a10;
  a10 = 0;
  if (v18)
    std::default_delete<CoreNLP::EmbeddingManager>::operator()[abi:ne180100]((uint64_t)&a10, v18);
  v19 = a11;
  a11 = 0;
  if (v19)
    std::default_delete<CoreNLP::EmbeddingManager>::operator()[abi:ne180100]((uint64_t)&a11, v19);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x191CAEEACLL);
}

uint64_t NLStringEmbeddingCreateFromData(const __CFData *a1)
{
  CoreNLP::WordEmbedding *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t EmbeddingWrapper;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v9;
  uint64_t *v10;
  CoreNLP::WordEmbedding *v11;

  v2 = (CoreNLP::WordEmbedding *)operator new();
  CoreNLP::WordEmbedding::WordEmbedding(v2);
  if (CoreNLP::WordEmbedding::loadModel((const void **)v2, a1))
  {
    v3 = (uint64_t *)operator new();
    v11 = v2;
    CoreNLP::EmbeddingManager::EmbeddingManager(v3, (uint64_t *)&v11);
    v4 = (uint64_t)v11;
    v11 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v9 = v3;
    v10 = 0;
    EmbeddingWrapper = CoreNLP::createEmbeddingWrapper((uint64_t *)&v9);
    v6 = v9;
    v9 = 0;
    if (v6)
      std::default_delete<CoreNLP::EmbeddingManager>::operator()[abi:ne180100]((uint64_t)&v9, v6);
    v7 = v10;
    v10 = 0;
    if (v7)
      std::default_delete<CoreNLP::EmbeddingManager>::operator()[abi:ne180100]((uint64_t)&v10, v7);
  }
  else
  {
    (*(void (**)(CoreNLP::WordEmbedding *))(*(_QWORD *)v2 + 8))(v2);
    return 0;
  }
  return EmbeddingWrapper;
}

void sub_191CAF084(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t *a11, uint64_t a12)
{
  uint64_t *v13;
  uint64_t *v14;

  v13 = a10;
  a10 = 0;
  if (v13)
    std::default_delete<CoreNLP::EmbeddingManager>::operator()[abi:ne180100]((uint64_t)&a10, v13);
  v14 = a11;
  a11 = 0;
  if (v14)
    std::default_delete<CoreNLP::EmbeddingManager>::operator()[abi:ne180100]((uint64_t)&a11, v14);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x191CAF068);
}

CFLocaleRef NLStringEmbeddingCopyModelLocale(CoreNLP *a1, void *a2)
{
  uint64_t v2;
  int v3;
  char *v4;
  CFLocaleRef v5;
  CFLocaleIdentifier localeIdentifier;

  if (!a1)
    return 0;
  v2 = *(_QWORD *)CoreNLP::unwrapGazetteer(a1, a2);
  if (!v2)
    return 0;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  if (!v3)
    return 0;
  v4 = (char *)CoreNLP::convertLanguageIDToCode(v3);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&localeIdentifier, v4);
  v5 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], localeIdentifier);
  if (localeIdentifier)
    CFRelease(localeIdentifier);
  return v5;
}

void sub_191CAF1BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

applesauce::CF::StringRef *applesauce::CF::StringRef::StringRef(applesauce::CF::StringRef *this, char *a2)
{
  void **v3;
  CFIndex v4;
  CFStringRef v5;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v9;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  if ((v9 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v4 = v9;
  else
    v4 = (CFIndex)__p[1];
  v5 = CFStringCreateWithBytes(0, (const UInt8 *)v3, v4, 0x8000100u, 0);
  *(_QWORD *)this = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if ((char)v9 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_191CAF284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  CFTypeRef *v15;

  if (*v15)
    CFRelease(*v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFNumberRef NLEmbeddingCopyVersion(const __CFLocale *a1)
{
  CFNumberRef v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  void (**v8)(CoreNLP::WordEmbedding *__hidden);
  _QWORD *v9[4];
  int v10;
  void *__p;
  char v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  CFTypeRef cf;

  CoreNLP::WordEmbedding::WordEmbedding((CoreNLP::WordEmbedding *)&v8);
  CoreNLP::WordEmbedding::clearEmptyModels((CoreNLP::WordEmbedding *)&v8);
  if (CoreNLP::WordEmbedding::loadModel((CoreNLP::WordEmbedding *)&v8, a1, CFSTR("embedding.dat")))
  {
    v7 = v10;
    v2 = CFNumberCreate(0, kCFNumberCFIndexType, &v7);
  }
  else
  {
    v2 = 0;
  }
  v8 = off_1E2DF1F50;
  if (cf)
    CFRelease(cf);
  cf = 0;
  v3 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  CoreNLP::ProductQuantizer::~ProductQuantizer((CoreNLP::ProductQuantizer *)&v14);
  CoreNLP::KDTree::~KDTree((CoreNLP::KDTree *)&v13);
  if (v12 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy((uint64_t)v9, v9[1]);
  return v2;
}

void sub_191CAF3CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  CoreNLP::WordEmbedding::~WordEmbedding((CoreNLP::WordEmbedding *)va);
  _Unwind_Resume(a1);
}

CoreNLP *NLStringEmbeddingCopyVersion(CoreNLP *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t valuePtr;

  if (result)
  {
    v2 = *(_QWORD *)CoreNLP::unwrapGazetteer(result, a2);
    if (v2)
      v3 = (*(int (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
    else
      v3 = 0;
    valuePtr = v3;
    return CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
  }
  return result;
}

CFNumberRef NLStringEmbeddingCopyCurrentVersion(const __CFLocale *a1, const __CFString *a2)
{
  _QWORD *v4;
  CFNumberRef v5;
  uint64_t v6;
  uint64_t valuePtr;
  void *__p;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12[3];
  _QWORD *v13[3];
  _QWORD *v14[3];
  _QWORD *v15[3];

  CoreNLP::EmbeddingManager::EmbeddingManager((CoreNLP::EmbeddingManager *)&v11);
  CoreNLP::EmbeddingManager::supportedVersions((CoreNLP::EmbeddingManager *)&v11, a1, a2, (char **)&__p);
  v4 = __p;
  if (__p != v10)
  {
    valuePtr = *(v10 - 1);
    v5 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
    v4 = __p;
    if (!__p)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (__p)
  {
LABEL_3:
    v10 = v4;
    operator delete(v4);
  }
LABEL_4:
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy((uint64_t)v15, v15[1]);
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy((uint64_t)v14, v14[1]);
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy((uint64_t)v13, v13[1]);
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy((uint64_t)v12, v12[1]);
  v6 = v11;
  v11 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return v5;
}

void sub_191CAF514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p)
    operator delete(__p);
  CoreNLP::EmbeddingManager::~EmbeddingManager((CoreNLP::EmbeddingManager *)&a14);
  _Unwind_Resume(a1);
}

void CoreNLP::EmbeddingManager::~EmbeddingManager(CoreNLP::EmbeddingManager *this)
{
  _QWORD *v2;

  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
  v2 = *(_QWORD **)this;
  *(_QWORD *)this = 0;
  if (v2)
    (*(void (**)(_QWORD *))(*v2 + 8))(v2);
}

float NLEmbeddingGetDistance(const __CFLocale *a1, const __CFString *a2, const __CFString *a3)
{
  BOOL Model;
  BOOL v7;
  float Distance;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  void (**v17)(CoreNLP::WordEmbedding *__hidden);
  _QWORD *v18[7];
  char v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  CFTypeRef cf;

  CoreNLP::WordEmbedding::WordEmbedding((CoreNLP::WordEmbedding *)&v17);
  Model = CoreNLP::WordEmbedding::loadModel((CoreNLP::WordEmbedding *)&v17, a1, CFSTR("embedding.dat"));
  if (a2)
    v7 = Model;
  else
    v7 = 0;
  Distance = 2.0;
  if (a3 && v7)
  {
    CoreNLP::getUTF8StringFromCFString(a2, v15);
    CoreNLP::getUTF8StringFromCFString(a3, __p);
    Distance = CoreNLP::WordEmbedding::getDistance((CoreNLP::WordEmbedding *)&v17, (const char *)v15, (uint64_t)__p);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15[0]);
  }
  v17 = off_1E2DF1F50;
  if (cf)
    CFRelease(cf);
  cf = 0;
  v9 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  CoreNLP::ProductQuantizer::~ProductQuantizer((CoreNLP::ProductQuantizer *)&v21);
  CoreNLP::KDTree::~KDTree((CoreNLP::KDTree *)&v20);
  if (v19 < 0)
    operator delete(v18[5]);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy((uint64_t)v18, v18[1]);
  return Distance;
}

void sub_191CAF6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  CoreNLP::WordEmbedding::~WordEmbedding((CoreNLP::WordEmbedding *)&a22);
  _Unwind_Resume(a1);
}

float NLStringEmbeddingGetDistance(CoreNLP *a1, __CFString *a2, __CFString *a3)
{
  const void *v6;
  CoreNLP::WordEmbedding *v7;
  CoreNLP::WordEmbedding *v8;
  float Distance;
  __CFArray *v10;
  __CFArray *v11;
  const __CFArray *v12;
  CFIndex Count;
  CFIndex v14;
  float v15;
  float v16;
  float v17;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v19;
  void *__p[2];
  char v22;
  void *valuePtr[2];
  char v24;

  if (!a1)
    return 2.0;
  v6 = *(const void **)CoreNLP::unwrapGazetteer(a1, a2);
  if (v6)
  {
    if (v7)
    {
      v8 = v7;
      CoreNLP::getUTF8StringFromCFString(a2, valuePtr);
      CoreNLP::getUTF8StringFromCFString(a3, __p);
      Distance = CoreNLP::WordEmbedding::getDistance(v8, (const char *)valuePtr, (uint64_t)__p);
      if (v22 < 0)
        operator delete(__p[0]);
      if (v24 < 0)
        operator delete(valuePtr[0]);
      return Distance;
    }
  }
  v10 = NLStringEmbeddingCopyVector(a1, a2);
  v11 = NLStringEmbeddingCopyVector(a1, a3);
  v12 = v11;
  Distance = 2.0;
  if (!v10 || !v11)
  {
LABEL_17:
    if (!v10)
      goto LABEL_19;
    goto LABEL_18;
  }
  Count = CFArrayGetCount(v10);
  if (Count == CFArrayGetCount(v12))
  {
    if (Count >= 1)
    {
      v14 = 0;
      v15 = 0.0;
      v16 = 0.0;
      v17 = 0.0;
      do
      {
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v10, v14);
        v19 = (const __CFNumber *)CFArrayGetValueAtIndex(v12, v14);
        LODWORD(valuePtr[0]) = 0;
        LODWORD(__p[0]) = 0;
        CFNumberGetValue(ValueAtIndex, kCFNumberFloatType, valuePtr);
        CFNumberGetValue(v19, kCFNumberFloatType, __p);
        v16 = v16 + (float)(*(float *)valuePtr * *(float *)valuePtr);
        v17 = v17 + (float)(*(float *)__p * *(float *)__p);
        v15 = v15 + (float)(*(float *)valuePtr * *(float *)__p);
        ++v14;
      }
      while (Count != v14);
      if ((float)(v16 * v17) > 0.0)
        Distance = 2.0 - (v15 + v15) / sqrtf(v16 * v17);
    }
    Distance = sqrtf(fmaxf(Distance, 0.0));
    goto LABEL_17;
  }
LABEL_18:
  CFRelease(v10);
LABEL_19:
  if (v12)
    CFRelease(v12);
  return Distance;
}

void sub_191CAF928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

__CFArray *NLStringEmbeddingCopyVector(CoreNLP *a1, __CFString *a2)
{
  _QWORD *v3;
  _DWORD *v4;
  __CFArray *Mutable;
  _DWORD *v6;
  CFNumberRef v7;
  void *__p[2];
  char v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;

  if (!a1)
    return 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v3 = (_QWORD *)CoreNLP::unwrapGazetteer(a1, a2);
  CoreNLP::getUTF8StringFromCFString(a2, __p);
  (*(void (**)(_QWORD, void **, _DWORD **))(*(_QWORD *)*v3 + 32))(*v3, __p, &v11);
  if (v10 < 0)
    operator delete(__p[0]);
  v4 = v11;
  if (v11 == v12)
  {
    Mutable = 0;
    if (!v11)
      return Mutable;
LABEL_12:
    v12 = v4;
    operator delete(v4);
    return Mutable;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v4 = v11;
  v6 = v12;
  if (v11 != v12)
  {
    do
    {
      LODWORD(__p[0]) = *v4;
      v7 = CFNumberCreate(0, kCFNumberFloatType, __p);
      CFArrayAppendValue(Mutable, v7);
      CFRelease(v7);
      ++v4;
    }
    while (v4 != v6);
    v4 = v11;
  }
  if (v4)
    goto LABEL_12;
  return Mutable;
}

void sub_191CAFA68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFArray *NLEmbeddingCopyNeighbors(const __CFLocale *a1, const __CFString *a2, int a3, float a4)
{
  BOOL Model;
  BOOL v9;
  __CFArray *Mutable;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  CFStringRef v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *__p[2];
  char v20;
  uint64_t v21;
  uint64_t v22;
  void (**v23)(CoreNLP::WordEmbedding *__hidden);
  _QWORD *v24[7];
  char v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  CFTypeRef cf;

  CoreNLP::WordEmbedding::WordEmbedding((CoreNLP::WordEmbedding *)&v23);
  Model = CoreNLP::WordEmbedding::loadModel((CoreNLP::WordEmbedding *)&v23, a1, CFSTR("embedding.dat"));
  if (a2)
    v9 = Model;
  else
    v9 = 0;
  if (v9)
  {
    CoreNLP::getUTF8StringFromCFString(a2, __p);
    CoreNLP::WordEmbedding::getNearestNeighbors((CoreNLP::WordEmbedding *)&v23, (uint64_t)__p, a3, &v21, a4);
    if (v20 < 0)
      operator delete(__p[0]);
    if (v21 == v22)
    {
      Mutable = 0;
    }
    else
    {
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      v11 = v21;
      v12 = v22;
      while (v11 != v12)
      {
        v13 = (const char *)v11;
        if (*(char *)(v11 + 23) < 0)
          v13 = *(const char **)v11;
        v14 = CFStringCreateWithCString(0, v13, 0x8000100u);
        CFArrayAppendValue(Mutable, v14);
        CFRelease(v14);
        v11 += 32;
      }
    }
    __p[0] = &v21;
    std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  else
  {
    Mutable = 0;
  }
  v23 = off_1E2DF1F50;
  if (cf)
    CFRelease(cf);
  cf = 0;
  v15 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  CoreNLP::ProductQuantizer::~ProductQuantizer((CoreNLP::ProductQuantizer *)&v27);
  CoreNLP::KDTree::~KDTree((CoreNLP::KDTree *)&v26);
  if (v25 < 0)
    operator delete(v24[5]);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy((uint64_t)v24, v24[1]);
  return Mutable;
}

void sub_191CAFC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  __p = &a16;
  std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  CoreNLP::WordEmbedding::~WordEmbedding((CoreNLP::WordEmbedding *)&a19);
  _Unwind_Resume(a1);
}

__CFArray *NLStringEmbeddingCopyNeighbors(CoreNLP *a1, __CFString *a2, int a3, float a4)
{
  const void *v7;
  CoreNLP::WordEmbedding *v8;
  CoreNLP::WordEmbedding *v9;
  __CFArray *Mutable;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  CFStringRef v14;
  void *__p[2];
  char v17;
  uint64_t v18;
  uint64_t v19;

  if (!a1)
    return 0;
  v7 = *(const void **)CoreNLP::unwrapGazetteer(a1, a2);
  if (!v7)
    return 0;
  if (!v8)
    return 0;
  v9 = v8;
  CoreNLP::getUTF8StringFromCFString(a2, __p);
  CoreNLP::WordEmbedding::getNearestNeighbors(v9, (uint64_t)__p, a3, &v18, a4);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v18 == v19)
  {
    Mutable = 0;
  }
  else
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v11 = v18;
    v12 = v19;
    while (v11 != v12)
    {
      v13 = (const char *)v11;
      if (*(char *)(v11 + 23) < 0)
        v13 = *(const char **)v11;
      v14 = CFStringCreateWithCString(0, v13, 0x8000100u);
      CFArrayAppendValue(Mutable, v14);
      CFRelease(v14);
      v11 += 32;
    }
  }
  __p[0] = &v18;
  std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return Mutable;
}

void sub_191CAFDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  __p = &a15;
  std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

__CFDictionary *NLEmbeddingCopyNeighborsWithDistances(const __CFLocale *a1, const __CFString *a2, int a3, float a4)
{
  BOOL Model;
  BOOL v9;
  __CFDictionary *Mutable;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  CFStringRef v14;
  CFNumberRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p[2];
  char v21;
  uint64_t v22;
  uint64_t v23;
  void (**v24)(CoreNLP::WordEmbedding *__hidden);
  _QWORD *v25[7];
  char v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  CFTypeRef cf;

  CoreNLP::WordEmbedding::WordEmbedding((CoreNLP::WordEmbedding *)&v24);
  Model = CoreNLP::WordEmbedding::loadModel((CoreNLP::WordEmbedding *)&v24, a1, CFSTR("embedding.dat"));
  if (a2)
    v9 = Model;
  else
    v9 = 0;
  if (v9)
  {
    CoreNLP::getUTF8StringFromCFString(a2, __p);
    CoreNLP::WordEmbedding::getNearestNeighbors((CoreNLP::WordEmbedding *)&v24, (uint64_t)__p, a3, &v22, a4);
    if (v21 < 0)
      operator delete(__p[0]);
    if (v22 == v23)
    {
      Mutable = 0;
    }
    else
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v11 = v22;
      v12 = v23;
      while (v11 != v12)
      {
        v13 = (const char *)v11;
        if (*(char *)(v11 + 23) < 0)
          v13 = *(const char **)v11;
        v14 = CFStringCreateWithCString(0, v13, 0x8000100u);
        v15 = CFNumberCreate(0, kCFNumberFloatType, (const void *)(v11 + 24));
        CFDictionaryAddValue(Mutable, v14, v15);
        CFRelease(v14);
        CFRelease(v15);
        v11 += 32;
      }
    }
    __p[0] = &v22;
    std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  else
  {
    Mutable = 0;
  }
  v24 = off_1E2DF1F50;
  if (cf)
    CFRelease(cf);
  cf = 0;
  v16 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  CoreNLP::ProductQuantizer::~ProductQuantizer((CoreNLP::ProductQuantizer *)&v28);
  CoreNLP::KDTree::~KDTree((CoreNLP::KDTree *)&v27);
  if (v26 < 0)
    operator delete(v25[5]);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy((uint64_t)v25, v25[1]);
  return Mutable;
}

void sub_191CB0008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  __p = &a16;
  std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  CoreNLP::WordEmbedding::~WordEmbedding((CoreNLP::WordEmbedding *)&a19);
  _Unwind_Resume(a1);
}

__CFDictionary *NLStringEmbeddingCopyNeighborsWithDistances(CoreNLP *a1, __CFString *a2, int a3, float a4)
{
  const void *v7;
  CoreNLP::WordEmbedding *v8;
  CoreNLP::WordEmbedding *v9;
  __CFDictionary *Mutable;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  CFStringRef v14;
  CFNumberRef v15;
  void *__p[2];
  char v18;
  uint64_t v19;
  uint64_t v20;

  if (!a1)
    return 0;
  v7 = *(const void **)CoreNLP::unwrapGazetteer(a1, a2);
  if (!v7)
    return 0;
  if (!v8)
    return 0;
  v9 = v8;
  CoreNLP::getUTF8StringFromCFString(a2, __p);
  CoreNLP::WordEmbedding::getNearestNeighbors(v9, (uint64_t)__p, a3, &v19, a4);
  if (v18 < 0)
    operator delete(__p[0]);
  if (v19 == v20)
  {
    Mutable = 0;
  }
  else
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v11 = v19;
    v12 = v20;
    while (v11 != v12)
    {
      v13 = (const char *)v11;
      if (*(char *)(v11 + 23) < 0)
        v13 = *(const char **)v11;
      v14 = CFStringCreateWithCString(0, v13, 0x8000100u);
      v15 = CFNumberCreate(0, kCFNumberFloatType, (const void *)(v11 + 24));
      CFDictionaryAddValue(Mutable, v14, v15);
      CFRelease(v14);
      CFRelease(v15);
      v11 += 32;
    }
  }
  __p[0] = &v19;
  std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return Mutable;
}

void sub_191CB01C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  __p = &a15;
  std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

__CFArray *NLEmbeddingCopyWordClusterIDs(const __CFLocale *a1, const __CFString *a2)
{
  unsigned __int8 *v4;
  __CFArray *Mutable;
  unsigned __int8 *v6;
  CFNumberRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p[2];
  char v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  void (**v16)(CoreNLP::WordEmbedding *__hidden);
  _QWORD *v17[7];
  char v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  CFTypeRef cf;

  CoreNLP::WordEmbedding::WordEmbedding((CoreNLP::WordEmbedding *)&v16);
  CoreNLP::WordEmbedding::clearEmptyModels((CoreNLP::WordEmbedding *)&v16);
  if (!CoreNLP::WordEmbedding::loadModel((CoreNLP::WordEmbedding *)&v16, a1, CFSTR("embedding.dat")))
  {
    Mutable = 0;
    goto LABEL_13;
  }
  CoreNLP::getUTF8StringFromCFString(a2, __p);
  CoreNLP::WordEmbedding::getCentroids((uint64_t)&v16, (const char *)__p, &v14);
  if (v13 < 0)
    operator delete(__p[0]);
  v4 = v14;
  if (v14 == v15)
  {
    Mutable = 0;
    if (!v14)
      goto LABEL_13;
    goto LABEL_12;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v4 = v14;
  v6 = v15;
  if (v14 != v15)
  {
    do
    {
      LODWORD(__p[0]) = *v4;
      v7 = CFNumberCreate(0, kCFNumberSInt32Type, __p);
      CFArrayAppendValue(Mutable, v7);
      CFRelease(v7);
      ++v4;
    }
    while (v4 != v6);
    v4 = v14;
  }
  if (v4)
  {
LABEL_12:
    v15 = v4;
    operator delete(v4);
  }
LABEL_13:
  v16 = off_1E2DF1F50;
  if (cf)
    CFRelease(cf);
  cf = 0;
  v8 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  CoreNLP::ProductQuantizer::~ProductQuantizer((CoreNLP::ProductQuantizer *)&v20);
  CoreNLP::KDTree::~KDTree((CoreNLP::KDTree *)&v19);
  if (v18 < 0)
    operator delete(v17[5]);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy((uint64_t)v17, v17[1]);
  return Mutable;
}

void sub_191CB03AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
    operator delete(__p);
  CoreNLP::WordEmbedding::~WordEmbedding((CoreNLP::WordEmbedding *)&a19);
  _Unwind_Resume(a1);
}

__CFArray *NLStringEmbeddingCopyWordClusterIDs(CoreNLP *a1, __CFString *a2)
{
  const void *v3;
  void *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  __CFArray *Mutable;
  unsigned __int8 *v8;
  CFNumberRef v9;
  void *__p[2];
  char v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;

  if (!a1)
    return 0;
  v3 = *(const void **)CoreNLP::unwrapGazetteer(a1, a2);
  if (!v3)
    return 0;
  if (!v4)
    return 0;
  v5 = (uint64_t)v4;
  CoreNLP::getUTF8StringFromCFString(a2, __p);
  CoreNLP::WordEmbedding::getCentroids(v5, (const char *)__p, &v13);
  if (v12 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13 == v14)
  {
    Mutable = 0;
    if (!v13)
      return Mutable;
LABEL_15:
    v14 = v6;
    operator delete(v6);
    return Mutable;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v6 = v13;
  v8 = v14;
  if (v13 != v14)
  {
    do
    {
      LODWORD(__p[0]) = *v6;
      v9 = CFNumberCreate(0, kCFNumberSInt32Type, __p);
      CFArrayAppendValue(Mutable, v9);
      CFRelease(v9);
      ++v6;
    }
    while (v6 != v8);
    v6 = v13;
  }
  if (v6)
    goto LABEL_15;
  return Mutable;
}

void sub_191CB0518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFArray *NLEmbeddingCopyWordVector(const __CFLocale *a1, const __CFString *a2)
{
  __CFArray *Mutable;
  _DWORD *v5;
  _DWORD *v6;
  CFNumberRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  void *__p;
  _DWORD *v16;
  uint64_t v17;
  void (**v18)(CoreNLP::WordEmbedding *__hidden);
  _QWORD *v19[7];
  char v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  CFTypeRef cf;
  std::string **v25;
  char v26;
  __int128 valuePtr;
  char v28;
  __int128 v29;

  *(_QWORD *)&v29 = *MEMORY[0x1E0C80C00];
  CoreNLP::WordEmbedding::WordEmbedding((CoreNLP::WordEmbedding *)&v18);
  CoreNLP::WordEmbedding::clearEmptyModels((CoreNLP::WordEmbedding *)&v18);
  if (CoreNLP::WordEmbedding::loadModel((CoreNLP::WordEmbedding *)&v18, a1, CFSTR("embedding.dat")))
  {
    __p = 0;
    v16 = 0;
    v17 = 0;
    CoreNLP::getUTF8StringFromCFString(a2, &valuePtr);
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v25 = &v12;
    v26 = 0;
    v12 = (std::string *)operator new(0x18uLL);
    v13 = v12;
    v14 = v12 + 1;
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v14, &valuePtr, &v29, v12);
    if (v28 < 0)
      operator delete((void *)valuePtr);
    if ((CoreNLP::WordEmbedding::getAverageEmbedding((CoreNLP::WordEmbedding *)&v18, (uint64_t *)&v12, (uint64_t)&__p) & 1) != 0)
    {
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      v5 = __p;
      v6 = v16;
      while (v5 != v6)
      {
        LODWORD(valuePtr) = *v5;
        v7 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
        CFArrayAppendValue(Mutable, v7);
        CFRelease(v7);
        ++v5;
      }
    }
    else
    {
      Mutable = 0;
    }
    *(_QWORD *)&valuePtr = &v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&valuePtr);
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
  }
  else
  {
    Mutable = 0;
  }
  v18 = off_1E2DF1F50;
  if (cf)
    CFRelease(cf);
  cf = 0;
  v8 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  CoreNLP::ProductQuantizer::~ProductQuantizer((CoreNLP::ProductQuantizer *)&v22);
  CoreNLP::KDTree::~KDTree((CoreNLP::KDTree *)&v21);
  if (v20 < 0)
    operator delete(v19[5]);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy((uint64_t)v19, v19[1]);
  return Mutable;
}

void sub_191CB076C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  *(_QWORD *)(v16 - 80) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 80));
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  CoreNLP::WordEmbedding::~WordEmbedding((CoreNLP::WordEmbedding *)&a16);
  _Unwind_Resume(a1);
}

CFDataRef NLStringEmbeddingCopyData(CoreNLP *a1, __CFString *a2)
{
  _QWORD *v3;
  _BYTE *v4;
  CFDataRef v5;
  void *__p[2];
  char v8;
  void *v9;
  _BYTE *v10;
  uint64_t v11;

  if (!a1)
    return 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v3 = (_QWORD *)CoreNLP::unwrapGazetteer(a1, a2);
  CoreNLP::getUTF8StringFromCFString(a2, __p);
  (*(void (**)(_QWORD, void **, void **))(*(_QWORD *)*v3 + 32))(*v3, __p, &v9);
  if (v8 < 0)
    operator delete(__p[0]);
  v4 = v9;
  if (v9 != v10)
  {
    v5 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE30], (const UInt8 *)v9, v10 - (_BYTE *)v9);
    v4 = v9;
    if (!v9)
      return v5;
    goto LABEL_9;
  }
  v5 = 0;
  if (v9)
  {
LABEL_9:
    v10 = v4;
    operator delete(v4);
  }
  return v5;
}

void sub_191CB08B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

CoreNLP *NLStringEmbeddingFillWordVectors(CoreNLP *a1, void *a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7)
{
  return NLStringEmbeddingFillWordVectorsWithShape(a1, a2, a3, a4, a5, a6, a7, 1);
}

CoreNLP *NLStringEmbeddingFillWordVectorsWithShape(CoreNLP *result, void *a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t *v15;

  if (result)
  {
    v15 = (uint64_t *)CoreNLP::unwrapGazetteer(result, a2);
    return (CoreNLP *)CoreNLP::AbstractEmbedding::fillWordVectorsWithShape(*v15, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  return result;
}

CoreNLP *NLStringEmbeddingFillTokenVectorsWithShape(CoreNLP *result, void *a2, unsigned int a3, char *a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t *v13;

  if (result)
  {
    v13 = (uint64_t *)CoreNLP::unwrapGazetteer(result, a2);
    return (CoreNLP *)CoreNLP::AbstractEmbedding::fillTokenVectorsWithShape(*v13, (const __CFArray *)a2, a3, a4, a5, a6, a7);
  }
  return result;
}

uint64_t NLStringEmbeddingCopyDataForTokenizedBatch(CoreNLP *this, void *a2, CFDictionaryRef theDict, uint64_t a4, CFErrorRef *a5)
{
  const void *Value;
  CFTypeID v11;
  CFTypeID TypeID;
  CFTypeID v13;
  _QWORD *v14;
  const __CFAllocator *v16;
  const __CFString *v17;
  CFIndex v18;

  if (!a2 || !a4)
  {
    if (!a5)
      return 0;
    v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v17 = kNLStringEmbeddingErrorDomain[0];
    v18 = 2;
LABEL_15:
    *a5 = CFErrorCreate(v16, v17, v18, 0);
    return 0;
  }
  if (!this)
  {
    if (!a5)
      return 0;
    v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v17 = kNLStringEmbeddingErrorDomain[0];
    v18 = 3;
    goto LABEL_15;
  }
  if (!theDict || !CFDictionaryContainsKey(theDict, kNLStringEmbeddingPadEncoderInput[0]))
    goto LABEL_10;
  Value = CFDictionaryGetValue(theDict, kNLStringEmbeddingPadEncoderInput[0]);
  v11 = CFGetTypeID(Value);
  TypeID = CFNumberGetTypeID();
  v13 = TypeID;
  if (a5)
  {
    if (v11 != TypeID)
      *a5 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kNLStringEmbeddingErrorDomain[0], 2, 0);
  }
  if (v11 == v13)
  {
LABEL_10:
    v14 = (_QWORD *)CoreNLP::unwrapGazetteer(this, a2);
    return (*(uint64_t (**)(_QWORD, void *, CFDictionaryRef, uint64_t, CFErrorRef *))(*(_QWORD *)*v14 + 48))(*v14, a2, theDict, a4, a5);
  }
  return 0;
}

__CFDictionary *NLEmbeddingCopyAllWordVectors(const __CFLocale *a1)
{
  __CFDictionary *Mutable;
  uint64_t v3;
  unint64_t v4;
  const CFArrayCallBacks *v5;
  unint64_t v6;
  CFStringRef v7;
  __CFArray *v8;
  void **v9;
  _DWORD *v10;
  _DWORD *v11;
  CFNumberRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void **v17[3];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (**v21)(CoreNLP::WordEmbedding *__hidden);
  _QWORD *v22[7];
  char v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  CFTypeRef cf;
  void **valuePtr[2];

  CoreNLP::WordEmbedding::WordEmbedding((CoreNLP::WordEmbedding *)&v21);
  CoreNLP::WordEmbedding::clearEmptyModels((CoreNLP::WordEmbedding *)&v21);
  if (CoreNLP::WordEmbedding::loadModel((CoreNLP::WordEmbedding *)&v21, a1, CFSTR("embedding.dat")))
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    memset(v17, 0, sizeof(v17));
    CoreNLP::WordEmbedding::getAllEmbeddings((CoreNLP::WordEmbedding *)&v21, &v18, (uint64_t *)v17);
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v3 = v18;
    if (v19 != v18)
    {
      v4 = 0;
      v5 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      do
      {
        v6 = v3 + 24 * v4;
        if (*(char *)(v6 + 23) < 0)
          v6 = *(_QWORD *)v6;
        v7 = CFStringCreateWithCString(0, (const char *)v6, 0x8000100u);
        v8 = CFArrayCreateMutable(0, 0, v5);
        v9 = &v17[0][3 * v4];
        v10 = *v9;
        v11 = v9[1];
        while (v10 != v11)
        {
          LODWORD(valuePtr[0]) = 0;
          LODWORD(valuePtr[0]) = *v10;
          v12 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
          CFArrayAppendValue(v8, v12);
          CFRelease(v12);
          ++v10;
        }
        CFDictionaryAddValue(Mutable, v7, v8);
        CFRelease(v7);
        CFRelease(v8);
        ++v4;
        v3 = v18;
      }
      while (v4 < 0xAAAAAAAAAAAAAAABLL * ((v19 - v18) >> 3));
    }
    valuePtr[0] = (void **)v17;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](valuePtr);
    v17[0] = (void **)&v18;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v17);
  }
  else
  {
    Mutable = 0;
  }
  v21 = off_1E2DF1F50;
  if (cf)
    CFRelease(cf);
  cf = 0;
  v13 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  CoreNLP::ProductQuantizer::~ProductQuantizer((CoreNLP::ProductQuantizer *)&v25);
  CoreNLP::KDTree::~KDTree((CoreNLP::KDTree *)&v24);
  if (v23 < 0)
    operator delete(v22[5]);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy((uint64_t)v22, v22[1]);
  return Mutable;
}

void sub_191CB0D6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void **);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  *(_QWORD *)(v2 - 96) = va;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 96));
  va_copy((va_list)v4, va1);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  CoreNLP::WordEmbedding::~WordEmbedding((CoreNLP::WordEmbedding *)va2);
  _Unwind_Resume(a1);
}

__CFDictionary *NLStringEmbeddingCopyAllWordVectors(CoreNLP *a1, void *a2)
{
  const void *v2;
  CoreNLP::WordEmbedding *v3;
  __CFDictionary *Mutable;
  uint64_t v5;
  unint64_t v6;
  const CFArrayCallBacks *v7;
  unint64_t v8;
  CFStringRef v9;
  __CFArray *v10;
  void **v11;
  _DWORD *v12;
  _DWORD *v13;
  CFNumberRef v14;
  void **v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void ***valuePtr;

  if (!a1)
    return 0;
  v2 = *(const void **)CoreNLP::unwrapGazetteer(a1, a2);
  if (!v2)
    return 0;
  if (!v3)
    return 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  memset(v16, 0, sizeof(v16));
  CoreNLP::WordEmbedding::getAllEmbeddings(v3, &v17, (uint64_t *)v16);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = v17;
  if (v18 != v17)
  {
    v6 = 0;
    v7 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    do
    {
      v8 = v5 + 24 * v6;
      if (*(char *)(v8 + 23) < 0)
        v8 = *(_QWORD *)v8;
      v9 = CFStringCreateWithCString(0, (const char *)v8, 0x8000100u);
      v10 = CFArrayCreateMutable(0, 0, v7);
      v11 = &v16[0][3 * v6];
      v12 = *v11;
      v13 = v11[1];
      while (v12 != v13)
      {
        LODWORD(valuePtr) = 0;
        LODWORD(valuePtr) = *v12;
        v14 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
        CFArrayAppendValue(v10, v14);
        CFRelease(v14);
        ++v12;
      }
      CFDictionaryAddValue(Mutable, v9, v10);
      CFRelease(v9);
      CFRelease(v10);
      ++v6;
      v5 = v17;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((v18 - v17) >> 3));
  }
  valuePtr = v16;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&valuePtr);
  v16[0] = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v16);
  return Mutable;
}

void sub_191CB0F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void ***a16)
{
  a16 = &a10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a10 = (void **)&a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

__CFArray *NLStringEmbeddingCopyNeighborsForVector(CoreNLP *a1, const void *a2, int a3, float a4)
{
  void *v7;
  const void *v8;
  CoreNLP::WordEmbedding *v9;
  CoreNLP::WordEmbedding *v10;
  _BYTE *v11;
  _BYTE *v12;
  __CFArray *Mutable;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  CFStringRef v17;
  void *__p;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _BYTE *v25;
  void **v26;

  if (!a1)
    return 0;
  applesauce::CF::convert_to<std::vector<float>,0>(a2, (uint64_t)&v24);
  v8 = *(const void **)CoreNLP::unwrapGazetteer(a1, v7);
  if (v8
  {
    v20 = 0;
    v21 = 0;
    __p = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v24, (uint64_t)v25, (v25 - (_BYTE *)v24) >> 2);
    CoreNLP::WordEmbedding::getNearestNeighborsForVector(v10, (uint64_t)&__p, a3, &v22, a4);
    if (__p)
    {
      v20 = __p;
      operator delete(__p);
    }
    if (v22 == v23)
    {
      Mutable = 0;
    }
    else
    {
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      v14 = v22;
      v15 = v23;
      while (v14 != v15)
      {
        v16 = (const char *)v14;
        if (*(char *)(v14 + 23) < 0)
          v16 = *(const char **)v14;
        v17 = CFStringCreateWithCString(0, v16, 0x8000100u);
        CFArrayAppendValue(Mutable, v17);
        CFRelease(v17);
        v14 += 32;
      }
    }
    v26 = (void **)&v22;
    std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100](&v26);
  }
  else
  {
    Mutable = 0;
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  return Mutable;
}

void sub_191CB1144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  *(_QWORD *)(v16 - 56) = &a12;
  std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 56));
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__CFDictionary *NLStringEmbeddingCopyNeighborsForVectorWithDistances(CoreNLP *a1, const void *a2, int a3, float a4)
{
  void *v7;
  const void *v8;
  CoreNLP::WordEmbedding *v9;
  CoreNLP::WordEmbedding *v10;
  _BYTE *v11;
  _BYTE *v12;
  __CFDictionary *Mutable;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  CFStringRef v17;
  CFNumberRef v18;
  void *__p;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _BYTE *v26;
  void **v27;

  if (!a1)
    return 0;
  applesauce::CF::convert_to<std::vector<float>,0>(a2, (uint64_t)&v25);
  v8 = *(const void **)CoreNLP::unwrapGazetteer(a1, v7);
  if (v8
  {
    v21 = 0;
    v22 = 0;
    __p = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v25, (uint64_t)v26, (v26 - (_BYTE *)v25) >> 2);
    CoreNLP::WordEmbedding::getNearestNeighborsForVector(v10, (uint64_t)&__p, a3, &v23, a4);
    if (__p)
    {
      v21 = __p;
      operator delete(__p);
    }
    if (v23 == v24)
    {
      Mutable = 0;
    }
    else
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v14 = v23;
      v15 = v24;
      while (v14 != v15)
      {
        v16 = (const char *)v14;
        if (*(char *)(v14 + 23) < 0)
          v16 = *(const char **)v14;
        v17 = CFStringCreateWithCString(0, v16, 0x8000100u);
        v18 = CFNumberCreate(0, kCFNumberFloatType, (const void *)(v14 + 24));
        CFDictionaryAddValue(Mutable, v17, v18);
        CFRelease(v17);
        CFRelease(v18);
        v14 += 32;
      }
    }
    v27 = (void **)&v23;
    std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100](&v27);
  }
  else
  {
    Mutable = 0;
  }
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
  return Mutable;
}

void sub_191CB1358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char *a18)
{
  a18 = &a12;
  std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

CFTypeRef NLStringEmbeddingCopySupportedVersions(const __CFLocale *a1, const __CFString *a2)
{
  void *v4;
  CFArrayRef CFArray;
  CFTypeRef v6;
  uint64_t v7;
  void *__p;
  void *v10;
  uint64_t v11;
  _QWORD *v12[3];
  _QWORD *v13[3];
  _QWORD *v14[3];
  _QWORD *v15[3];

  CoreNLP::EmbeddingManager::EmbeddingManager((CoreNLP::EmbeddingManager *)&v11);
  CoreNLP::EmbeddingManager::supportedVersions((CoreNLP::EmbeddingManager *)&v11, a1, a2, (char **)&__p);
  v4 = __p;
  if (__p == v10)
  {
    v6 = 0;
    if (__p)
    {
LABEL_5:
      v10 = v4;
      operator delete(v4);
    }
  }
  else
  {
    CFArray = applesauce::CF::details::make_CFArrayRef<long>((void ****)&__p);
    v6 = CFRetain(CFArray);
    if (CFArray)
      CFRelease(CFArray);
    v4 = __p;
    if (__p)
      goto LABEL_5;
  }
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy((uint64_t)v15, v15[1]);
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy((uint64_t)v14, v14[1]);
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy((uint64_t)v13, v13[1]);
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy((uint64_t)v12, v12[1]);
  v7 = v11;
  v11 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return v6;
}

void sub_191CB1494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  applesauce::CF::ArrayRef::~ArrayRef(&a10);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  CoreNLP::EmbeddingManager::~EmbeddingManager((CoreNLP::EmbeddingManager *)&a14);
  _Unwind_Resume(a1);
}

CFArrayRef NLStringEmbeddingCopyTokenIDsForText(CoreNLP *a1, CFTypeRef cf)
{
  CFArrayRef CFArray;
  void *v5;
  _QWORD *v6;
  std::runtime_error *exception;
  void *__p[2];
  char v10;
  void *v11[3];
  const __CFString *v12;

  CFArray = 0;
  if (a1 && cf)
  {
    CFRetain(cf);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v12, cf);
    v6 = (_QWORD *)CoreNLP::unwrapGazetteer(a1, v5);
    if (!v12)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::convert_to<std::string,0>(v12, (uint64_t)__p);
    (*(void (**)(void **__return_ptr, _QWORD, void **))(*(_QWORD *)*v6 + 120))(v11, *v6, __p);
    if (v10 < 0)
      operator delete(__p[0]);
    CFArray = applesauce::CF::details::make_CFArrayRef<long>((void ****)v11);
    if (v11[0])
    {
      v11[1] = v11[0];
      operator delete(v11[0]);
    }
    if (v12)
      CFRelease(v12);
  }
  return CFArray;
}

void sub_191CB15C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17)
{
  void *v17;
  uint64_t v18;

  __cxa_free_exception(v17);
  applesauce::CF::StringRef::~StringRef((const void **)(v18 - 40));
  _Unwind_Resume(a1);
}

CFStringRef NLStringEmbeddingCopyTextForTokenIDs(CoreNLP *a1, CFTypeRef cf)
{
  CFStringRef v2;
  void *v5;
  _QWORD *v6;
  void **v7;
  CFIndex v8;
  std::runtime_error *exception;
  std::runtime_error *v11;
  void *__p[3];
  void *v13[2];
  unsigned __int8 v14;
  const void *v15;

  v2 = 0;
  if (a1 && cf)
  {
    CFRetain(cf);
    applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v15, cf);
    v6 = (_QWORD *)CoreNLP::unwrapGazetteer(a1, v5);
    if (!v15)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::convert_to<std::vector<long>,0>(v15, (uint64_t)__p);
    (*(void (**)(void **__return_ptr, _QWORD, void **))(*(_QWORD *)*v6 + 128))(v13, *v6, __p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((v14 & 0x80u) == 0)
      v7 = v13;
    else
      v7 = (void **)v13[0];
    if ((v14 & 0x80u) == 0)
      v8 = v14;
    else
      v8 = (CFIndex)v13[1];
    v2 = CFStringCreateWithBytes(0, (const UInt8 *)v7, v8, 0x8000100u, 0);
    if (!v2)
    {
      v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v11, "Could not construct");
      __cxa_throw(v11, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if ((char)v14 < 0)
      operator delete(v13[0]);
    if (v15)
      CFRelease(v15);
  }
  return v2;
}

void sub_191CB1774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 < 0)
    operator delete(__p);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)(v18 - 40));
  _Unwind_Resume(a1);
}

CoreNLP *NLStringEmbeddingApplyMeanPoolingOverFragments(CoreNLP *result, void *a2)
{
  _QWORD *v2;

  if (result)
  {
    v2 = (_QWORD *)CoreNLP::unwrapGazetteer(result, a2);
    return (CoreNLP *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v2 + 136))(*v2, 1);
  }
  return result;
}

void std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

void std::default_delete<CoreNLP::EmbeddingManager>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if (a2)
  {
    std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy((uint64_t)(a2 + 10), (_QWORD *)a2[11]);
    std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy((uint64_t)(a2 + 7), (_QWORD *)a2[8]);
    std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy((uint64_t)(a2 + 4), (_QWORD *)a2[5]);
    std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy((uint64_t)(a2 + 1), (_QWORD *)a2[2]);
    v3 = *a2;
    *a2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    JUMPOUT(0x19401E994);
  }
}

void applesauce::CF::details::CFDictionary_get_value_to<std::map<std::string,std::vector<float>>>(const __CFDictionary *a1@<X0>, uint64_t a2@<X8>)
{
  CFIndex Count;
  uint64_t i;
  void *v6[2];
  uint64_t v7;
  void *v8[2];
  uint64_t v9;
  void *v10[2];
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  void *v14[3];
  void *v15[3];

  Count = CFDictionaryGetCount(a1);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  std::vector<void const*>::vector(v15, Count);
  std::vector<void const*>::vector(v14, Count);
  CFDictionaryGetKeysAndValues(a1, (const void **)v15[0], (const void **)v14[0]);
  if (Count)
  {
    for (i = 0; i != Count; ++i)
    {
      applesauce::CF::convert_to<std::string,0>(*((const __CFString **)v15[0] + i), (uint64_t)v8);
      applesauce::CF::convert_to<std::vector<float>,0>(*((const void **)v14[0] + i), (uint64_t)v6);
      *(_OWORD *)v10 = *(_OWORD *)v8;
      v11 = v9;
      v8[1] = 0;
      v9 = 0;
      *(_OWORD *)__p = *(_OWORD *)v6;
      v13 = v7;
      v6[0] = 0;
      v6[1] = 0;
      v7 = 0;
      v8[0] = 0;
      std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<float>>>((uint64_t **)a2, (const void **)v10, (__int128 *)v10);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (SHIBYTE(v11) < 0)
        operator delete(v10[0]);
      if (v6[0])
      {
        v6[1] = v6[0];
        operator delete(v6[0]);
      }
      if (SHIBYTE(v9) < 0)
        operator delete(v8[0]);
    }
  }
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  if (v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
}

void sub_191CB1A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v19;
  void *v21;
  void *v22;

  v21 = *(void **)(v19 - 80);
  if (v21)
  {
    *(_QWORD *)(v19 - 72) = v21;
    operator delete(v21);
  }
  v22 = *(void **)(v19 - 56);
  if (v22)
  {
    *(_QWORD *)(v19 - 48) = v22;
    operator delete(v22);
  }
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v18, *(_QWORD **)(v18 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::vector<float>>::~pair(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<float>>>(uint64_t **a1, const void **a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__construct_node<std::pair<std::string const,std::vector<float>>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

std::string *std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__construct_node<std::pair<std::string const,std::vector<float>>>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::vector<float>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_191CB1BC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<float>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(__int128 *)((char *)a2 + 24);
  this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  return this;
}

{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(this[1].__r_.__value_.__r.__words, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 2);
  return this;
}

uint64_t applesauce::CF::at_or<int &,std::string>(const __CFDictionary *a1, const UInt8 *a2, unsigned int *a3)
{
  const __CFNumber *v4;
  uint64_t result;

  v4 = (const __CFNumber *)applesauce::CF::details::at_key<std::string>(a1, a2);
  if (!v4)
    return *a3;
  result = applesauce::CF::convert_as<int,0>(v4);
  if ((result & 0xFF00000000) != 0)
    return result;
  else
    return *a3;
}

const void *applesauce::CF::details::at_key<std::string>(const __CFDictionary *a1, const UInt8 *a2)
{
  const void *Value;
  CFIndex v4;
  CFIndex v5;
  CFStringRef v6;
  std::runtime_error *exception;

  v4 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v5 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v5 = v4;
  }
  v6 = CFStringCreateWithBytes(0, a2, v5, 0x8000100u, 0);
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (a1)
    Value = CFDictionaryGetValue(a1, v6);
  CFRelease(v6);
  if (!a1)
    return 0;
  return Value;
}

void sub_191CB1D44(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x191CB1CF4);
}

uint64_t applesauce::CF::at_or<unsigned int,std::string>(const __CFDictionary *a1, const UInt8 *a2, unsigned int *a3)
{
  const __CFNumber *v4;
  uint64_t result;

  v4 = (const __CFNumber *)applesauce::CF::details::at_key<std::string>(a1, a2);
  if (!v4)
    return *a3;
  result = applesauce::CF::convert_as<unsigned int,0>(v4);
  if ((result & 0xFF00000000) != 0)
    return result;
  else
    return *a3;
}

uint64_t applesauce::CF::convert_as<unsigned int,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;

  if (a1 && (TypeID = CFNumberGetTypeID(), TypeID == CFGetTypeID(a1)))
    return applesauce::CF::details::number_convert_as<unsigned int>(a1);
  else
    return applesauce::CF::details::treat_as_BOOL_for_convert_as<int>(a1);
}

uint64_t applesauce::CF::details::number_convert_as<unsigned int>(const __CFNumber *a1)
{
  const __CFNumber *v2;
  CFNumberType v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  const __CFNumber *v7;
  CFNumberType v8;
  const __CFNumber *v9;
  CFNumberType v10;
  const __CFNumber *v11;
  CFNumberType v12;
  const __CFNumber *v13;
  CFNumberType v14;
  int Value;
  uint64_t v16;
  unsigned __int8 v17;
  int v18;
  int v19;
  uint64_t v20;
  double valuePtr;

  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberSInt16Type;
      goto LABEL_17;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      v9 = a1;
      v10 = kCFNumberSInt32Type;
      goto LABEL_28;
    case kCFNumberSInt64Type:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberSInt64Type;
      goto LABEL_28;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      v11 = a1;
      v12 = kCFNumberFloat32Type;
      goto LABEL_24;
    case kCFNumberFloat64Type:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberFloat64Type;
      goto LABEL_30;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberCharType;
LABEL_10:
      Value = CFNumberGetValue(v2, v3, &valuePtr);
      v16 = Value != 0;
      if (Value)
        v17 = LOBYTE(valuePtr);
      else
        v17 = 0;
      v18 = -256;
      if ((v16 & (SLOBYTE(valuePtr) < 0)) == 0)
        v18 = 0;
      v5 = v16 << 32;
      LODWORD(v6) = v18 & 0xFFFFFF00 | v17;
      v4 = v6 & 0xFFFFFF00;
      return v5 | v4 & 0xFFFFFF00 | v6;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberShortType;
LABEL_17:
      if (CFNumberGetValue(v7, v8, &valuePtr))
        v6 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000;
      else
        v6 = 0;
      goto LABEL_33;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      v9 = a1;
      v10 = kCFNumberIntType;
      goto LABEL_28;
    case kCFNumberLongType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberLongType;
      goto LABEL_28;
    case kCFNumberLongLongType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberLongLongType;
      goto LABEL_28;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      v11 = a1;
      v12 = kCFNumberFloatType;
LABEL_24:
      v19 = CFNumberGetValue(v11, v12, &valuePtr);
      v20 = *(float *)&valuePtr;
      goto LABEL_31;
    case kCFNumberDoubleType:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberDoubleType;
      goto LABEL_30;
    case kCFNumberCFIndexType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberCFIndexType;
      goto LABEL_28;
    case kCFNumberNSIntegerType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberNSIntegerType;
LABEL_28:
      v19 = CFNumberGetValue(v9, v10, &valuePtr);
      v20 = LODWORD(valuePtr);
      goto LABEL_31;
    case kCFNumberCGFloatType:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberCGFloatType;
LABEL_30:
      v19 = CFNumberGetValue(v13, v14, &valuePtr);
      v20 = valuePtr;
LABEL_31:
      v6 = v20 | 0x100000000;
      if (!v19)
        v6 = 0;
LABEL_33:
      v4 = v6 & 0xFFFFFF00;
      v5 = v6 & 0x100000000;
      break;
    default:
      v4 = 0;
      v5 = 0;
      LOBYTE(v6) = 0;
      break;
  }
  return v5 | v4 & 0xFFFFFF00 | v6;
}

const void *applesauce::CF::details::find_at_key_or_optional<std::string,std::string&>@<X0>(const __CFDictionary *a1@<X0>, const UInt8 *a2@<X1>, _BYTE *a3@<X8>)
{
  const void *result;

  result = applesauce::CF::details::at_key<std::string>(a1, a2);
  if (result)
    return (const void *)applesauce::CF::convert_as<std::string,0>((CFTypeID)result, (uint64_t)a3);
  *a3 = 0;
  a3[24] = 0;
  return result;
}

CFTypeID applesauce::CF::convert_as<std::string,0>@<X0>(CFTypeID result@<X0>, uint64_t a2@<X8>)
{
  const __CFString *v3;
  CFTypeID TypeID;
  __int128 v5;
  uint64_t v6;

  if (result
    && (v3 = (const __CFString *)result, TypeID = CFStringGetTypeID(), result = CFGetTypeID(v3), TypeID == result))
  {
    result = (CFTypeID)applesauce::CF::details::CFString_get_value<false>(v3, (uint64_t)&v5);
    *(_OWORD *)a2 = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  return result;
}

_QWORD *applesauce::CF::details::find_at_key<std::string,std::string&>@<X0>(const __CFDictionary *a1@<X0>, const UInt8 *a2@<X1>, uint64_t a3@<X8>)
{
  const __CFString *v4;
  std::runtime_error *exception;

  v4 = (const __CFString *)applesauce::CF::details::at_key<std::string>(a1, a2);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return applesauce::CF::convert_to<std::string,0>(v4, a3);
}

void sub_191CB2150(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::string,float>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<std::string,float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

uint64_t CoreNLP::crfsuite::Instance::finish(CoreNLP::crfsuite::Instance *this)
{
  return crfsuite_instance_finish();
}

void CoreNLP::crfsuite::Instance::~Instance(CoreNLP::crfsuite::Instance *this)
{
  *(_QWORD *)this = &off_1E2DF30D8;
  if (*((_QWORD *)this + 3))
  {
    if (*((_QWORD *)this + 4))
      crfsuite_instance_finish();
  }
}

{
  CoreNLP::crfsuite::Instance::~Instance(this);
  JUMPOUT(0x19401E994);
}

uint64_t CoreNLP::crfsuite::Instance::init(CoreNLP::crfsuite::Instance *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  if (*((_QWORD *)this + 3) && *((_QWORD *)this + 4))
    crfsuite_instance_finish();
  result = crfsuite_instance_init_n();
  if (*((int *)this + 4) >= 1)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      result = crfsuite_item_init_with_capacity();
      ++v4;
      v3 += 16;
    }
    while (v4 < *((int *)this + 4));
  }
  return result;
}

void CoreNLP::TaggingModelManager::~TaggingModelManager(CoreNLP::TaggingModelManager *this)
{
  char *v2;
  char *v3;
  char *v4;
  _QWORD **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD **v8;
  BOOL v9;
  char *v10;
  char *v11;
  char *v12;
  _QWORD *p_p;
  void *__p;
  _QWORD **v15;
  _QWORD *v16[2];

  v2 = (char *)this + 24;
  v3 = (char *)*((_QWORD *)this + 3);
  v4 = (char *)this + 32;
  if (v3 != (char *)this + 32)
  {
    do
    {
      LODWORD(__p) = *((_DWORD *)v3 + 8);
      std::map<NLLanguageID,CoreNLP::AbstractModel *>::map[abi:ne180100]((uint64_t *)&v15, (uint64_t)(v3 + 40));
      v5 = v15;
      if (v15 != v16)
      {
        do
        {
          v6 = v5[5];
          if (v6)
            (*(void (**)(_QWORD *))(*v6 + 8))(v6);
          v7 = v5[1];
          if (v7)
          {
            do
            {
              v8 = (_QWORD **)v7;
              v7 = (_QWORD *)*v7;
            }
            while (v7);
          }
          else
          {
            do
            {
              v8 = (_QWORD **)v5[2];
              v9 = *v8 == v5;
              v5 = v8;
            }
            while (!v9);
          }
          v5 = v8;
        }
        while (v8 != v16);
      }
      std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v15, v16[0]);
      v10 = (char *)*((_QWORD *)v3 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (char *)*((_QWORD *)v3 + 2);
          v9 = *(_QWORD *)v11 == (_QWORD)v3;
          v3 = v11;
        }
        while (!v9);
      }
      v3 = v11;
    }
    while (v11 != v4);
  }
  v12 = (char *)getprogname();
  std::string::basic_string[abi:ne180100]<0>(&__p, v12);
  if (SHIBYTE(v16[0]) < 0)
  {
    if (v15 != (_QWORD **)8)
      goto LABEL_24;
    p_p = __p;
  }
  else
  {
    if (SHIBYTE(v16[0]) != 8)
      goto LABEL_25;
    p_p = &__p;
  }
  if (*p_p == 0x6474736567677573)
  {
    CoreNLP::SingletonResourceManager<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char>>::clearEmptyResources();
    if ((HIBYTE(v16[0]) & 0x80) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
  if ((HIBYTE(v16[0]) & 0x80) != 0)
LABEL_24:
    operator delete(__p);
LABEL_25:
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)this + 616, *((_QWORD **)this + 78));
  std::__tree<std::string>::destroy((uint64_t)this + 584, *((char **)this + 74));
  std::__tree<std::string>::destroy((uint64_t)this + 560, *((char **)this + 71));
  std::__tree<std::string>::destroy((uint64_t)this + 536, *((char **)this + 68));
  std::__tree<std::string>::destroy((uint64_t)this + 512, *((char **)this + 65));
  std::__tree<std::__value_type<NLLanguageID,std::map<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>>>>::destroy((uint64_t)this + 488, *((_QWORD **)this + 62));
  std::__tree<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,std::__map_value_compare<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,std::less<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>>,true>,std::allocator<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>>>::destroy((uint64_t)this + 464, *((_QWORD **)this + 59));
  CoreNLP::TaggingFeatureExtractor::~TaggingFeatureExtractor((CoreNLP::TaggingModelManager *)((char *)this + 48));
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy((uint64_t)v2, *((_QWORD **)this + 4));
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

void CoreNLP::SingletonResourceManager<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char>>::clearEmptyResources()
{
  if (CoreNLP::SingletonResourceManager<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char>>::getQueue(void)::onceToken != -1)
    dispatch_once(&CoreNLP::SingletonResourceManager<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char>>::getQueue(void)::onceToken, &__block_literal_global_94);
  dispatch_sync((dispatch_queue_t)CoreNLP::SingletonResourceManager<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char>>::getQueue(void)::queue, &__block_literal_global_7);
}

uint64_t CoreNLP::TaggingModelManager::tagInstance(_QWORD *a1, uint64_t *a2, CFStringRef *this, int a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD **v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD **v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t **v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t **v42;
  uint64_t **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t **v46;
  int v47;
  uint64_t **v48;
  uint64_t **v49;
  uint64_t **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t **v57;
  uint64_t **v58;
  uint64_t v59;
  unint64_t v60;
  void **v61;
  uint64_t **v62;
  uint64_t **v63;
  _QWORD *v64;
  _QWORD *v65;
  unsigned int CurrentDominantLanguageID;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  int v76;
  void *v77;
  void *v78;
  uint64_t v79;
  void *__p;
  void *v81;
  uint64_t v82;
  void **v83;
  uint64_t v84;
  uint64_t v85[3];
  _DWORD *v86;
  uint64_t *v87;
  _QWORD *v88[2];
  _DWORD *v89;
  _DWORD *v90[2];

  v6 = (uint64_t)a1;
  if (!a1[2] && !a1[63])
    return 0;
  v7 = a1 + 6;
  CurrentDominantLanguageID = CoreNLP::TaggerContext::getCurrentDominantLanguageID((CoreNLP::TaggerContext *)this);
  CoreNLP::TaggingFeatureExtractor::extractSharedData(v6 + 48, a2, this[1], CurrentDominantLanguageID);
  v88[0] = 0;
  v88[1] = 0;
  v87 = (uint64_t *)v88;
  v8 = *(_QWORD *)(v6 + 16);
  if (v8)
  {
    v9 = (_QWORD *)(v6 + 8);
    v10 = *(_QWORD *)(v6 + 16);
    v71 = v6 + 8;
    v72 = v6;
    do
    {
      v11 = *(_QWORD **)v6;
      if (*(_QWORD **)v6 != v9)
      {
        v69 = v8;
        do
        {
          v12 = (_DWORD *)v11[4];
          v13 = (_QWORD *)v11[5];
          v86 = v12;
          if (v13 == v11 + 6)
          {
LABEL_24:
            memset(v85, 0, sizeof(v85));
            v22 = a2[1];
            if (v22 == *a2)
            {
              v25 = (v22 - *a2) >> 3;
              v24 = (uint64_t *)a2[1];
            }
            else
            {
              v23 = 0;
              do
              {
                CoreNLP::TaggingFeatureExtractor::extractFeatures(v7, v86[16], v86[3], a2, v23, this[1], (uint64_t)&v83);
                std::vector<std::vector<std::string>>::push_back[abi:ne180100](v85, (uint64_t)&v83);
                v90[0] = &v83;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v90);
                ++v23;
                v24 = (uint64_t *)*a2;
                v22 = a2[1];
                v25 = (v22 - *a2) >> 3;
              }
              while (v25 > v23);
              v12 = v86;
            }
            if (v12[2] == 7)
            {
              if (v24 == (uint64_t *)v22)
              {
                v28 = 0;
              }
              else
              {
                v28 = 0;
                v29 = v24;
                do
                {
                  v30 = *v29++;
                  v28 += (*(_QWORD *)(v30 + 72) >> 11) & 1;
                }
                while (v29 != (uint64_t *)v22);
              }
              if (v28 <= v25 >> 1)
              {
                (*(void (**)(void ***__return_ptr, _DWORD *, uint64_t *, uint64_t))(*(_QWORD *)v12 + 88))(&v83, v12, v85, 1);
                v36 = *a2;
                v37 = a2[1];
                v38 = 0xAAAAAAAAAAAAAAABLL * ((v84 - (uint64_t)v83) >> 3) != (v37 - *a2) >> 3 || v37 == v36;
                if (!v38)
                {
                  v39 = 0;
                  v40 = 0;
                  do
                  {
                    v41 = v83[v39];
                    v42 = (uint64_t **)(*(_QWORD *)(v36 + 8 * v40) + 24);
                    LODWORD(v90[0]) = v86[2];
                    v89 = v90;
                    v43 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v42, (int *)v90, (uint64_t)&std::piecewise_construct, &v89);
                    *((_DWORD *)v43 + 10) = *(_DWORD *)v41;
                    v43[6] = (uint64_t *)v41[1];
                    ++v40;
                    v36 = *a2;
                    v39 += 3;
                  }
                  while (v40 < (a2[1] - *a2) >> 3);
                }
                v90[0] = &v83;
                std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v90);
              }
              else
              {
                __p = 0;
                v81 = 0;
                v82 = 0;
                v32 = std::vector<CoreNLP::NLAttributedToken *>::__init_with_size[abi:ne180100]<CoreNLP::NLAttributedToken **,CoreNLP::NLAttributedToken **>(&__p, v24, v22, v25);
                CoreNLP::TaggingModelManager::applyGazetteer((uint64_t)v32, (uint64_t *)&__p);
                if (__p)
                {
                  v81 = __p;
                  operator delete(__p);
                }
                v33 = (_QWORD *)*a2;
                v34 = (_QWORD *)a2[1];
                while (v33 != v34)
                {
                  v35 = (uint64_t **)(*v33 + 24);
                  LODWORD(v83) = v86[2];
                  v90[0] = &v83;
                  std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v35, (int *)&v83, (uint64_t)&std::piecewise_construct, v90)[6] = (uint64_t *)0x3FF0000000000000;
                  ++v33;
                }
              }
              v77 = 0;
              v78 = 0;
              v79 = 0;
              std::vector<CoreNLP::NLAttributedToken *>::__init_with_size[abi:ne180100]<CoreNLP::NLAttributedToken **,CoreNLP::NLAttributedToken **>(&v77, (const void *)*a2, a2[1], (a2[1] - *a2) >> 3);
              CoreNLP::TaggingModelManager::checkInvalidCharInNER((uint64_t **)v72, (uint64_t *)&v77, v86[3], (CoreNLP::NLAttributedToken *)this);
              if (v77)
              {
                v78 = v77;
                operator delete(v77);
              }
              v44 = *a2;
              if ((unint64_t)(a2[1] - *a2) >= 9)
              {
                v45 = 0;
                do
                {
                  v46 = (uint64_t **)(*(_QWORD *)(v44 + 8 * v45) + 24);
                  LODWORD(v83) = v86[2];
                  v90[0] = &v83;
                  v47 = *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v46, (int *)&v83, (uint64_t)&std::piecewise_construct, v90)+ 10);
                  v48 = (uint64_t **)(*(_QWORD *)(*a2 + 8 * v45 + 8) + 24);
                  LODWORD(v89) = v86[2];
                  v90[0] = &v89;
                  if (v47 == *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v48, (int *)&v89, (uint64_t)&std::piecewise_construct, v90)+ 10))
                  {
                    v49 = (uint64_t **)(*(_QWORD *)(*a2 + 8 * v45) + 24);
                    v76 = v86[2];
                    v90[0] = &v76;
                    v50 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v49, &v76, (uint64_t)&std::piecewise_construct, v90);
                    v44 = *a2;
                    if (*((_DWORD *)v50 + 10) != 70)
                      *(_BYTE *)(*(_QWORD *)(v44 + 8 * v45) + 104) = 1;
                  }
                  else
                  {
                    v44 = *a2;
                  }
                  ++v45;
                }
                while (v45 + 1 < (unint64_t)((a2[1] - v44) >> 3));
              }
            }
            else
            {
              if (v24 == (uint64_t *)v22)
              {
                v31 = 1;
              }
              else if (*(int *)(*v24 + 108) <= 1)
              {
                v31 = 1;
              }
              else
              {
                v31 = *(_DWORD *)(*v24 + 108);
              }
              (*(void (**)(void ***__return_ptr, _DWORD *, uint64_t *, _QWORD, unint64_t))(*(_QWORD *)v12 + 88))(&v83, v12, v85, v31, v25);
              v52 = *a2;
              v51 = a2[1];
              if (0xAAAAAAAAAAAAAAABLL * ((v84 - (uint64_t)v83) >> 3) == (v51 - *a2) >> 3)
              {
                v53 = a2[1];
                if (v51 != v52)
                {
                  v70 = v31;
                  v54 = 0;
                  v55 = 0;
                  do
                  {
                    v56 = v83[v54];
                    v57 = (uint64_t **)(*(_QWORD *)(v52 + 8 * v55) + 24);
                    LODWORD(v90[0]) = v86[2];
                    v89 = v90;
                    v58 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v57, (int *)v90, (uint64_t)&std::piecewise_construct, &v89);
                    *((_DWORD *)v58 + 10) = *(_DWORD *)v56;
                    v58[6] = (uint64_t *)v56[1];
                    ++v55;
                    v52 = *a2;
                    v51 = a2[1];
                    v54 += 3;
                  }
                  while (v55 < (v51 - *a2) >> 3);
                  v53 = *a2;
                  v31 = v70;
                }
              }
              else
              {
                v53 = *a2;
              }
              if (v31 >= 2 && v51 != v53)
              {
                v59 = 0;
                v60 = 0;
                do
                {
                  v61 = v83;
                  v62 = (uint64_t **)(*(_QWORD *)(v53 + 8 * v60) + 48);
                  LODWORD(v90[0]) = v86[2];
                  v89 = v90;
                  v63 = std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v62, (int *)v90, (uint64_t)&std::piecewise_construct, &v89)+ 5;
                  if (&v61[v59] != (void **)v63)
                    std::vector<std::pair<int,double>>::__assign_with_size[abi:ne180100]<std::pair<int,double>*,std::pair<int,double>*>(v63, (__int128 *)v61[v59], (__int128 *)v61[v59 + 1], ((_BYTE *)v61[v59 + 1] - (_BYTE *)v61[v59]) >> 4);
                  ++v60;
                  v53 = *a2;
                  v59 += 3;
                }
                while (v60 < (a2[1] - *a2) >> 3);
              }
              v90[0] = &v83;
              std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v90);
            }
            std::__tree<CoreNLP::AbstractModel *>::__emplace_unique_key_args<CoreNLP::AbstractModel *,CoreNLP::AbstractModel * const&>(&v87, (unint64_t *)&v86, (uint64_t *)&v86);
            v64 = (_QWORD *)v11[1];
            v65 = v11;
            if (v64)
            {
              do
              {
                v27 = v64;
                v64 = (_QWORD *)*v64;
              }
              while (v64);
            }
            else
            {
              do
              {
                v27 = (_QWORD *)v65[2];
                v38 = *v27 == (_QWORD)v65;
                v65 = v27;
              }
              while (!v38);
            }
            std::__tree<std::__value_type<CoreNLP::AbstractModel *,std::set<CoreNLP::AbstractModel *>>,std::__map_value_compare<CoreNLP::AbstractModel *,std::__value_type<CoreNLP::AbstractModel *,std::set<CoreNLP::AbstractModel *>>,std::less<CoreNLP::AbstractModel *>,true>,std::allocator<std::__value_type<CoreNLP::AbstractModel *,std::set<CoreNLP::AbstractModel *>>>>::erase((uint64_t **)v72, (uint64_t)v11);
            v83 = (void **)v85;
            std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v83);
            v9 = (_QWORD *)v71;
          }
          else
          {
            if (v88[0])
            {
              while (1)
              {
                v14 = v13[4];
                v15 = v88;
                v16 = v88[0];
                do
                {
                  v17 = v16;
                  v18 = v15;
                  v19 = v16[4];
                  if (v19 >= v14)
                    v15 = (_QWORD **)v16;
                  else
                    ++v16;
                  v16 = (_QWORD *)*v16;
                }
                while (v16);
                if (v15 == v88)
                  break;
                if (v19 < v14)
                  v17 = v18;
                if (v14 < v17[4])
                  break;
                v20 = (_QWORD *)v13[1];
                if (v20)
                {
                  do
                  {
                    v21 = v20;
                    v20 = (_QWORD *)*v20;
                  }
                  while (v20);
                }
                else
                {
                  do
                  {
                    v21 = (_QWORD *)v13[2];
                    v38 = *v21 == (_QWORD)v13;
                    v13 = v21;
                  }
                  while (!v38);
                }
                v13 = v21;
                if (v21 == v11 + 6)
                  goto LABEL_24;
              }
            }
            v26 = (_QWORD *)v11[1];
            if (v26)
            {
              do
              {
                v27 = v26;
                v26 = (_QWORD *)*v26;
              }
              while (v26);
            }
            else
            {
              do
              {
                v27 = (_QWORD *)v11[2];
                v38 = *v27 == (_QWORD)v11;
                v11 = v27;
              }
              while (!v38);
            }
          }
          v11 = v27;
        }
        while (v27 != v9);
        v10 = *(_QWORD *)(v72 + 16);
        v8 = v69;
      }
      v6 = v72;
      if (!v10)
        break;
      v38 = v8 == v10;
      v8 = v10;
    }
    while (!v38);
  }
  if (!a4)
  {
    if (*(_QWORD *)(v6 + 504))
    {
      v73 = 0;
      v74 = 0;
      v75 = 0;
      std::vector<CoreNLP::NLAttributedToken *>::__init_with_size[abi:ne180100]<CoreNLP::NLAttributedToken **,CoreNLP::NLAttributedToken **>(&v73, (const void *)*a2, a2[1], (a2[1] - *a2) >> 3);
      CoreNLP::TaggingModelManager::applyCustomGazetteer(v6, (uint64_t *)&v73, CurrentDominantLanguageID);
      if (v73)
      {
        v74 = v73;
        operator delete(v73);
      }
    }
  }
  if (*(_QWORD *)(v6 + 16))
  {
    std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy(v6, *(_QWORD **)(v6 + 8));
    *(_QWORD *)v6 = v6 + 8;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 8) = 0;
  }
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v87, v88[0]);
  return 1;
}

void sub_191CB2C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy(v28 - 136, *(_QWORD **)(v28 - 128));
  _Unwind_Resume(a1);
}

void CoreNLP::TaggingModelManager::applyGazetteer(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t **v16;
  int v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t **v26;
  int v27;
  int *v28;

  v2 = a2[1];
  v3 = v2 - *a2;
  if (v2 != *a2)
  {
    v5 = 0;
    LODWORD(v6) = 0;
    v7 = v3 >> 3;
    do
    {
      v8 = (int)v6;
      v6 = (int)v6 + 2;
      v9 = *a2;
      if (v7 > v6)
      {
        v10 = *(_QWORD *)(v9 + 8 * v5);
        v11 = *(_QWORD *)(v10 + 72);
        if ((v11 & 0x8000000000) != 0
          && (*(_BYTE *)(*(_QWORD *)(v9 + 8 * (v8 + 1)) + 76) & 0x80) != 0
          && (*(_BYTE *)(*(_QWORD *)(v9 + 8 * v6) + 76) & 0x80) != 0)
        {
          v27 = 7;
          v28 = &v27;
          *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)(v10 + 24), &v27, (uint64_t)&std::piecewise_construct, &v28)+ 10) = 69;
          v20 = (uint64_t **)(*(_QWORD *)(*a2 + 8 * (v8 + 1)) + 24);
          v27 = 7;
          v28 = &v27;
          *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v20, &v27, (uint64_t)&std::piecewise_construct, &v28)+ 10) = 69;
          v21 = (uint64_t **)(*(_QWORD *)(*a2 + 8 * v6) + 24);
          v27 = 7;
          v28 = &v27;
          *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v21, &v27, (uint64_t)&std::piecewise_construct, &v28)+ 10) = 69;
LABEL_35:
          LODWORD(v6) = v8 + 3;
          goto LABEL_36;
        }
        if ((v11 & 0x4000000000) != 0
          && (*(_BYTE *)(*(_QWORD *)(v9 + 8 * (v8 + 1)) + 76) & 0x40) != 0
          && (*(_BYTE *)(*(_QWORD *)(v9 + 8 * v6) + 76) & 0x40) != 0)
        {
          v27 = 7;
          v28 = &v27;
          *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)(v10 + 24), &v27, (uint64_t)&std::piecewise_construct, &v28)+ 10) = 68;
          v23 = (uint64_t **)(*(_QWORD *)(*a2 + 8 * (v8 + 1)) + 24);
          v27 = 7;
          v28 = &v27;
          *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v23, &v27, (uint64_t)&std::piecewise_construct, &v28)+ 10) = 68;
          v24 = (uint64_t **)(*(_QWORD *)(*a2 + 8 * v6) + 24);
          v27 = 7;
          v28 = &v27;
          *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v24, &v27, (uint64_t)&std::piecewise_construct, &v28)+ 10) = 68;
          goto LABEL_35;
        }
        if ((v11 & 0x2000000000) != 0
          && (*(_BYTE *)(*(_QWORD *)(v9 + 8 * (v8 + 1)) + 76) & 0x20) != 0
          && (*(_BYTE *)(*(_QWORD *)(v9 + 8 * v6) + 76) & 0x20) != 0)
        {
          v27 = 7;
          v28 = &v27;
          *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)(v10 + 24), &v27, (uint64_t)&std::piecewise_construct, &v28)+ 10) = 67;
          v25 = (uint64_t **)(*(_QWORD *)(*a2 + 8 * (v8 + 1)) + 24);
          v27 = 7;
          v28 = &v27;
          *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v25, &v27, (uint64_t)&std::piecewise_construct, &v28)+ 10) = 67;
          v26 = (uint64_t **)(*(_QWORD *)(*a2 + 8 * v6) + 24);
          v27 = 7;
          v28 = &v27;
          *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v26, &v27, (uint64_t)&std::piecewise_construct, &v28)+ 10) = 67;
          goto LABEL_35;
        }
      }
      v12 = v8 + 1;
      v13 = *(_QWORD *)(v9 + 8 * v5);
      v14 = *(_QWORD *)(v13 + 72);
      if (v7 <= v12)
        goto LABEL_20;
      if ((v14 & 0x2000000000) != 0 && (*(_BYTE *)(*(_QWORD *)(v9 + 8 * v12) + 76) & 0x20) != 0)
      {
        v27 = 7;
        v28 = &v27;
        *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)(v13 + 24), &v27, (uint64_t)&std::piecewise_construct, &v28)+ 10) = 67;
        v18 = (uint64_t **)(*(_QWORD *)(*a2 + 8 * v12) + 24);
        v27 = 7;
        v28 = &v27;
        *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v18, &v27, (uint64_t)&std::piecewise_construct, &v28)+ 10) = 67;
      }
      else if ((v14 & 0x8000000000) != 0 && (*(_BYTE *)(*(_QWORD *)(v9 + 8 * v12) + 76) & 0x80) != 0)
      {
        v27 = 7;
        v28 = &v27;
        *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)(v13 + 24), &v27, (uint64_t)&std::piecewise_construct, &v28)+ 10) = 69;
        v19 = (uint64_t **)(*(_QWORD *)(*a2 + 8 * v12) + 24);
        v27 = 7;
        v28 = &v27;
        *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v19, &v27, (uint64_t)&std::piecewise_construct, &v28)+ 10) = 69;
      }
      else
      {
        if ((v14 & 0x4000000000) == 0 || (*(_BYTE *)(*(_QWORD *)(v9 + 8 * v12) + 76) & 0x40) == 0)
        {
LABEL_20:
          v15 = (uint64_t **)(v13 + 24);
          if ((v14 & 0x8000000000) != 0)
          {
            v27 = 7;
            v28 = &v27;
            *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v15, &v27, (uint64_t)&std::piecewise_construct, &v28)+ 10) = 69;
          }
          else if ((v14 & 0x4000000000) != 0)
          {
            v27 = 7;
            v28 = &v27;
            *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v15, &v27, (uint64_t)&std::piecewise_construct, &v28)+ 10) = 68;
          }
          else
          {
            v27 = 7;
            v28 = &v27;
            if ((v14 & 0x2000000000) != 0)
            {
              v16 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v15, &v27, (uint64_t)&std::piecewise_construct, &v28);
              v17 = 67;
            }
            else
            {
              v16 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v15, &v27, (uint64_t)&std::piecewise_construct, &v28);
              v17 = 70;
            }
            *((_DWORD *)v16 + 10) = v17;
          }
          LODWORD(v6) = v12;
          goto LABEL_36;
        }
        v27 = 7;
        v28 = &v27;
        *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)(v13 + 24), &v27, (uint64_t)&std::piecewise_construct, &v28)+ 10) = 68;
        v22 = (uint64_t **)(*(_QWORD *)(*a2 + 8 * v12) + 24);
        v27 = 7;
        v28 = &v27;
        *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v22, &v27, (uint64_t)&std::piecewise_construct, &v28)+ 10) = 68;
      }
LABEL_36:
      v5 = (int)v6;
    }
    while (v7 > (int)v6);
  }
}

uint64_t **CoreNLP::TaggingModelManager::checkInvalidCharInNER(uint64_t **result, uint64_t *a2, int a3, CoreNLP::NLAttributedToken *a4)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t *v7;
  uint64_t **v8;
  int v9;
  BOOL v10;
  uint64_t **v11;
  int v12;
  const __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int *v20;
  uint64_t v21;
  int *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  uint64_t *v33;
  int v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t **v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  _DWORD *v45[11];

  if (a3 != 4)
  {
    v45[9] = v4;
    v45[10] = v5;
    v7 = result[78];
    if (!v7)
      goto LABEL_12;
    v8 = result + 78;
    do
    {
      v9 = *((_DWORD *)v7 + 8);
      v10 = v9 < a3;
      if (v9 >= a3)
        v11 = (uint64_t **)v7;
      else
        v11 = (uint64_t **)(v7 + 1);
      if (!v10)
        v8 = (uint64_t **)v7;
      v7 = *v11;
    }
    while (*v11);
    if (v8 != result + 78 && *((_DWORD *)v8 + 8) <= a3)
    {
      v13 = (const __CFString *)*((_QWORD *)a4 + 1);
      if (v8[5] && v13 && (v42 = *a2, a2[1] != *a2))
      {
        v43 = 0;
        do
        {
          result = (uint64_t **)CoreNLP::hasInvalidCharInNERToken((CoreNLP *)v8[5], v13, *(__CFString **)(v42 + 8 * v43), a4);
          v12 = (int)result;
          if ((_DWORD)result)
            break;
          ++v43;
          v42 = *a2;
        }
        while (v43 < (a2[1] - *a2) >> 3);
      }
      else
      {
        v12 = 0;
      }
    }
    else
    {
LABEL_12:
      v12 = 0;
      v13 = (const __CFString *)*((_QWORD *)a4 + 1);
    }
    v14 = *a2;
    v15 = a2[1];
    if ((unint64_t)(v15 - *a2) < 9)
    {
LABEL_49:
      if (!v12)
        return result;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (1)
      {
        v18 = v16;
        v19 = *(_QWORD **)(v14 + 8 * v16);
        v20 = (int *)(v19 + 4);
        v21 = v19[4];
        if (!v21)
          goto LABEL_25;
        v22 = (int *)(v19 + 4);
        do
        {
          v23 = *(_DWORD *)(v21 + 32);
          v24 = v23 < 7;
          if (v23 >= 7)
            v25 = (uint64_t *)v21;
          else
            v25 = (uint64_t *)(v21 + 8);
          if (!v24)
            v22 = (int *)v21;
          v21 = *v25;
        }
        while (*v25);
        if (v22 == v20 || v22[8] >= 8)
LABEL_25:
          v22 = (int *)(v19 + 4);
        v26 = *(_QWORD *)(v14 + 8 * v17);
        v29 = *(_QWORD *)(v26 + 32);
        v27 = v26 + 32;
        v28 = v29;
        if (!v29)
          break;
        ++v16;
        v30 = v27;
        do
        {
          v31 = *(_DWORD *)(v28 + 32);
          v32 = v31 < 7;
          if (v31 >= 7)
            v33 = (uint64_t *)v28;
          else
            v33 = (uint64_t *)(v28 + 8);
          if (!v32)
            v30 = v28;
          v28 = *v33;
        }
        while (*v33);
        if (v30 == v27)
          break;
        if (*(int *)(v30 + 32) > 7 || v22 == v20)
          break;
        v35 = v22[10];
        if (v35 != 70 && v35 != *(_DWORD *)(v30 + 40))
        {
          result = (uint64_t **)CFStringGetCharacterAtIndex(v13, *v19 + v19[1] - 1);
          v14 = *a2;
          if ((_DWORD)result == 46)
          {
            v36 = *(_QWORD *)(v14 + 8 * v18);
            v37 = *(_QWORD *)(v36 + 8);
            v38 = v37 >= 4 && v37 + *(_QWORD *)v36 < **(_QWORD **)(v14 + 8 * v17);
            if (v38 && (*(_BYTE *)(v36 + 73) & 0x10) == 0)
            {
              v22[10] = 70;
              v15 = a2[1];
              goto LABEL_52;
            }
          }
        }
        ++v17;
        v15 = a2[1];
        if (v17 >= (v15 - v14) >> 3)
          goto LABEL_49;
      }
      if ((v12 & 1) == 0)
        return result;
    }
LABEL_52:
    if ((unint64_t)(v15 - v14) >= 9)
    {
      v39 = 0;
      do
      {
        v40 = (uint64_t **)(*(_QWORD *)(v14 + 8 * v39) + 24);
        v44 = 7;
        v45[0] = &v44;
        result = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v40, &v44, (uint64_t)&std::piecewise_construct, v45);
        *((_DWORD *)result + 10) = 70;
        v14 = *a2;
        v41 = v39 + 2 >= (unint64_t)((a2[1] - *a2) >> 3);
        ++v39;
      }
      while (!v41);
    }
  }
  return result;
}

void CoreNLP::TaggingModelManager::applyCustomGazetteer(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  CoreNLP *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  BOOL v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t **v39;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  unint64_t v42;
  std::string::size_type size;
  std::string *v44;
  std::string *data;
  uint64_t v46;
  uint64_t v47;
  const std::string::value_type *v48;
  const std::string::value_type *v49;
  int v50;
  const std::string::value_type *v51;
  std::string::size_type v52;
  std::string *v53;
  char *v54;
  char v55;
  std::vector<std::string>::pointer v56;
  std::string *v57;
  uint64_t v58;
  __int128 *v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  std::string *v64;
  std::string *v65;
  std::string *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char v75;
  std::__split_buffer<std::string>::pointer end_high;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t **v83;
  int v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t **v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  std::string v96;
  std::vector<std::string> v97;
  void *__p;
  char *v99;
  char *v100;
  std::__split_buffer<std::string> __v;
  _BYTE v102[15];
  uint64_t v103;

  v5 = a1;
  v103 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a1 + 608);
  __p = 0;
  v99 = 0;
  v100 = 0;
  v8 = operator new(8uLL);
  v9 = 0;
  v10 = 0;
  *v8 = a3 << 32;
  v11 = (_QWORD *)(v5 + 496);
  v87 = v5;
  do
  {
    v12 = *v11;
    if (*v11)
    {
      v13 = *((_DWORD *)v8 + v10);
      v14 = v11;
      do
      {
        v15 = *(_DWORD *)(v12 + 32);
        v16 = v15 < v13;
        if (v15 >= v13)
          v17 = (uint64_t *)v12;
        else
          v17 = (uint64_t *)(v12 + 8);
        if (!v16)
          v14 = (_QWORD *)v12;
        v12 = *v17;
      }
      while (*v17);
      if (v14 != v11 && v13 >= *((_DWORD *)v14 + 8))
      {
        v84 = v6;
        v18 = (_QWORD *)v14[5];
        v19 = v14 + 6;
        if (v18 != v14 + 6)
        {
          do
          {
            v20 = (CoreNLP *)v18[5];
            if (v20)
            {
              v21 = CoreNLP::unwrapGazetteer(v20, (void *)v7);
              v22 = v21;
              v23 = *((unsigned int *)v18 + 8);
              v24 = v99;
              if (v99 >= v100)
              {
                v25 = (v99 - (_BYTE *)__p) >> 4;
                v26 = v25 + 1;
                if ((unint64_t)(v25 + 1) >> 60)
                  std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
                v27 = v100 - (_BYTE *)__p;
                if ((v100 - (_BYTE *)__p) >> 3 > v26)
                  v26 = v27 >> 3;
                if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
                  v7 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v7 = v26;
                if (v7)
                  v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>((uint64_t)&v100, v7);
                else
                  v28 = 0;
                v29 = &v28[16 * v25];
                *(_QWORD *)v29 = v23;
                *((_QWORD *)v29 + 1) = v22;
                v31 = (char *)__p;
                v30 = v99;
                v32 = v29;
                if (v99 != __p)
                {
                  do
                  {
                    *((_OWORD *)v32 - 1) = *((_OWORD *)v30 - 1);
                    v32 -= 16;
                    v30 -= 16;
                  }
                  while (v30 != v31);
                  v30 = (char *)__p;
                }
                v9 = v29 + 16;
                __p = v32;
                v99 = v29 + 16;
                v100 = &v28[16 * v7];
                if (v30)
                  operator delete(v30);
              }
              else
              {
                *(_QWORD *)v99 = v23;
                *((_QWORD *)v24 + 1) = v21;
                v9 = v24 + 16;
              }
              v99 = v9;
            }
            v33 = (_QWORD *)v18[1];
            if (v33)
            {
              do
              {
                v34 = v33;
                v33 = (_QWORD *)*v33;
              }
              while (v33);
            }
            else
            {
              do
              {
                v34 = (_QWORD *)v18[2];
                v35 = *v34 == (_QWORD)v18;
                v18 = v34;
              }
              while (!v35);
            }
            v18 = v34;
          }
          while (v34 != v19);
        }
        v6 = v84;
        if (*(_DWORD *)(*((_QWORD *)v9 - 1) + 64) > v84)
          v6 = *(_DWORD *)(*((_QWORD *)v9 - 1) + 64);
        v5 = v87;
      }
    }
    ++v10;
  }
  while (v10 != 2);
  operator delete(v8);
  v36 = (char *)__p;
  if (__p != v99)
  {
    v37 = *a2;
    v38 = a2[1];
    if (v38 != *a2)
    {
      v86 = 0;
      v39 = (uint64_t **)(v5 + 512);
      v92 = v5 + 520;
      v89 = (uint64_t **)(v5 + 512);
      while (1)
      {
        begin = 0;
        memset(&v97, 0, sizeof(v97));
        v85 = v6;
        end = 0;
        if (v6 < 1)
        {
          LODWORD(v42) = v86;
        }
        else
        {
          LODWORD(v42) = v86;
          if ((v86 & 0x80000000) == 0)
          {
            v42 = v86;
            do
            {
              end = v97.__end_;
              v94 = v42;
              if (v42 >= (v38 - v37) >> 3)
                goto LABEL_98;
              if (v97.__begin_ == v97.__end_)
              {
                v58 = *(_QWORD *)(v37 + 8 * v42);
                v59 = (__int128 *)(v58 + 80);
                if (v97.__end_ >= v97.__end_cap_.__value_)
                {
                  v65 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v97, v59);
                }
                else
                {
                  if (*(char *)(v58 + 103) < 0)
                  {
                    std::string::__init_copy_ctor_external(v97.__end_, *(const std::string::value_type **)(v58 + 80), *(_QWORD *)(v58 + 88));
                  }
                  else
                  {
                    v60 = *v59;
                    v97.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)(v58 + 96);
                    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v60;
                  }
                  v65 = end + 1;
                }
                v67 = v94;
                v97.__end_ = v65;
              }
              else
              {
                if ((v97.__end_[-1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(v97.__end_[-1].__r_.__value_.__r.__words[2]);
                else
                  size = v97.__end_[-1].__r_.__value_.__l.__size_;
                std::string::basic_string[abi:ne180100]((uint64_t)&v96, size + 1);
                if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v44 = &v96;
                else
                  v44 = (std::string *)v96.__r_.__value_.__r.__words[0];
                if (size)
                {
                  if ((end[-1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    data = end - 1;
                  else
                    data = (std::string *)end[-1].__r_.__value_.__l.__data_;
                  memmove(v44, data, size);
                }
                *(_WORD *)((char *)&v44->__r_.__value_.__l.__data_ + size) = 32;
                v46 = *(_QWORD *)(*a2 + 8 * v94);
                v49 = *(const std::string::value_type **)(v46 + 80);
                v47 = v46 + 80;
                v48 = v49;
                v50 = *(char *)(v47 + 23);
                if (v50 >= 0)
                  v51 = (const std::string::value_type *)v47;
                else
                  v51 = v48;
                if (v50 >= 0)
                  v52 = *(unsigned __int8 *)(v47 + 23);
                else
                  v52 = *(_QWORD *)(v47 + 8);
                v53 = std::string::append(&v96, v51, v52);
                v54 = (char *)v53->__r_.__value_.__r.__words[0];
                *(_QWORD *)v102 = v53->__r_.__value_.__l.__size_;
                *(_QWORD *)&v102[7] = *(std::string::size_type *)((char *)&v53->__r_.__value_.__r.__words[1] + 7);
                v55 = HIBYTE(v53->__r_.__value_.__r.__words[2]);
                v53->__r_.__value_.__l.__size_ = 0;
                v53->__r_.__value_.__r.__words[2] = 0;
                v53->__r_.__value_.__r.__words[0] = 0;
                v56 = v97.__end_;
                v39 = v89;
                if (v97.__end_ >= v97.__end_cap_.__value_)
                {
                  v61 = 0xAAAAAAAAAAAAAAABLL * (((char *)v97.__end_ - (char *)v97.__begin_) >> 3);
                  v62 = v61 + 1;
                  if (v61 + 1 > 0xAAAAAAAAAAAAAAALL)
                    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
                  if (0x5555555555555556 * (((char *)v97.__end_cap_.__value_ - (char *)v97.__begin_) >> 3) > v62)
                    v62 = 0x5555555555555556 * (((char *)v97.__end_cap_.__value_ - (char *)v97.__begin_) >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * (((char *)v97.__end_cap_.__value_ - (char *)v97.__begin_) >> 3) >= 0x555555555555555)
                    v63 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v63 = v62;
                  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v97.__end_cap_;
                  if (v63)
                    v64 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v97.__end_cap_, v63);
                  else
                    v64 = 0;
                  v66 = v64 + v61;
                  __v.__first_ = v64;
                  __v.__begin_ = v66;
                  __v.__end_cap_.__value_ = &v64[v63];
                  v66->__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
                  v66->__r_.__value_.__l.__size_ = *(_QWORD *)v102;
                  *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v102[7];
                  *((_BYTE *)&v66->__r_.__value_.__s + 23) = v55;
                  __v.__end_ = v66 + 1;
                  std::vector<std::string>::__swap_out_circular_buffer(&v97, &__v);
                  v57 = v97.__end_;
                  std::__split_buffer<std::string>::~__split_buffer(&__v);
                }
                else
                {
                  v97.__end_->__r_.__value_.__l.__data_ = v54;
                  v56->__r_.__value_.__l.__size_ = *(_QWORD *)v102;
                  *(std::string::size_type *)((char *)&v56->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v102[7];
                  *((_BYTE *)&v56->__r_.__value_.__s + 23) = v55;
                  v57 = v56 + 1;
                }
                v67 = v94;
                v97.__end_ = v57;
                if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v96.__r_.__value_.__l.__data_);
              }
              v42 = v67 + 1;
              v37 = *a2;
              v38 = a2[1];
              if (v67 + 1 < (v38 - *a2) >> 3
                && (v68 = *(_QWORD *)(v37 + 8 * v67 + 8), (*(_BYTE *)(v68 + 73) & 2) != 0)
                && *(_QWORD *)(v68 + 8) == 1)
              {
                v6 += 2;
              }
              else
              {
                v69 = *(_QWORD *)(v37 + 8 * v67);
                if ((*(_BYTE *)(v69 + 72) & 0x80) != 0 && *(uint64_t *)(v69 + 8) > 1)
                  ++v6;
              }
              v70 = __OFSUB__(v6--, 1);
            }
            while (!((v6 < 0) ^ v70 | (v6 == 0)));
            end = v97.__end_;
LABEL_98:
            begin = v97.__begin_;
            v6 = v85;
          }
        }
        v71 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
        v72 = (v71 - 1);
        if ((int)v71 < 1)
          goto LABEL_124;
        v73 = -1431655765 * (((char *)end - (char *)begin) >> 3);
        v91 = (int)v42 + v72;
        v88 = ~v72 + v71;
        do
        {
          v74 = (char *)__p;
          v93 = v99;
          v95 = v73 - 1;
          if (__p == v99)
            goto LABEL_120;
          v90 = v73;
          v75 = 0;
          do
          {
            *(_OWORD *)&v96.__r_.__value_.__l.__data_ = *(_OWORD *)v74;
            CoreNLP::Gazetteer::label((_QWORD *)v96.__r_.__value_.__l.__size_, (uint64_t)&v97.__begin_[v95], (std::string *)&__v);
            end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(__v.__end_);
            if (SHIBYTE(__v.__end_) < 0)
              end_high = __v.__begin_;
            if (end_high)
            {
              v77 = std::__tree<std::string>::find<std::string>((uint64_t)v39, (const void **)&__v.__first_);
              if (v92 == v77)
              {
                v78 = *(_QWORD *)(v87 + 528);
                *(_QWORD *)v102 = &__v;
                *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v39, (const void **)&__v.__first_, (uint64_t)&std::piecewise_construct, (__int128 **)v102)+ 14) = v78;
                if ((v78 & 0x80000000) != 0)
                  goto LABEL_116;
              }
              else
              {
                LODWORD(v78) = *(_DWORD *)(v77 + 56);
                if ((v78 & 0x80000000) != 0)
                  goto LABEL_116;
              }
              v79 = v78 + 100;
              v80 = v88;
              v81 = v91;
              v82 = v90;
              do
              {
                v83 = (uint64_t **)(*(_QWORD *)(*a2
                                             + 8
                                             * (v81
                                              + 0x5555555555555555
                                              * ((unint64_t)((char *)v97.__end_ - (char *)v97.__begin_) >> 3)))
                                 + 24);
                *(_QWORD *)v102 = &v96;
                *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v83, (int *)&v96, (uint64_t)&std::piecewise_construct, (_DWORD **)v102)+ 10) = v79;
                if (v80)
                  *(_BYTE *)(*(_QWORD *)(*a2
                                       + 8
                                       * (v81
                                        + 0x5555555555555555
                                        * ((unint64_t)((char *)v97.__end_ - (char *)v97.__begin_) >> 3)))
                           + 104) = 1;
                --v82;
                --v81;
                ++v80;
              }
              while (v82 > 0);
              v75 = 1;
              v39 = v89;
            }
LABEL_116:
            if (SHIBYTE(__v.__end_) < 0)
              operator delete(__v.__first_);
            v74 += 16;
          }
          while (v74 != v93);
          if ((v75 & 1) != 0)
          {
            v86 += v95;
            break;
          }
LABEL_120:
          --v91;
          v73 = v95;
        }
        while ((int)v95 > 0);
        v6 = v85;
LABEL_124:
        __v.__first_ = (std::__split_buffer<std::string>::pointer)&v97;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        ++v86;
        v37 = *a2;
        v38 = a2[1];
        if ((int)v86 >= (unint64_t)((v38 - *a2) >> 3))
        {
          v36 = (char *)__p;
          break;
        }
      }
    }
  }
  if (v36)
  {
    v99 = v36;
    operator delete(v36);
  }
}

void sub_191CB3BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  _Unwind_Resume(exception_object);
}

uint64_t *CoreNLP::TaggingModelManager::loadCRFModel(uint64_t a1, int a2, int a3)
{
  uint64_t *v5;
  uint64_t *v6;
  char *v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t *PersistentResource;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t **v17;
  const char *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t **v21;
  _QWORD v23[4];
  int v24;
  _QWORD v25[5];
  void *__p[2];
  char v27;
  __int128 v28;
  unint64_t v29;
  int v30;
  int v31;

  v30 = a3;
  v31 = a2;
  v29 = __PAIR64__(a3, a2);
  v5 = std::__tree<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,std::__map_value_compare<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,std::less<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>>,true>,std::allocator<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>>>::find<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>>(a1 + 464, (int *)&v29);
  if ((uint64_t *)(a1 + 472) == v5)
  {
    if ((a2 & 0xFFFFFFFE) != 6)
      goto LABEL_21;
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 0x40000000;
    v25[2] = ___ZN7CoreNLP19TaggingModelManager12loadCRFModelENS_15NLTagSchemeTypeE12NLLanguageID_block_invoke;
    v25[3] = &__block_descriptor_tmp_8;
    v25[4] = v29;
    PersistentResource = (uint64_t *)CoreNLP::SingletonResourceManager<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char>>::getPersistentResource((uint64_t)&v29, (uint64_t)v25);
    if (!PersistentResource)
      goto LABEL_21;
  }
  else
  {
    v6 = v5;
    v7 = (char *)(v5 + 5);
    if (*((char *)v5 + 63) < 0)
      v7 = *(char **)v7;
    std::string::basic_string[abi:ne180100]<0>(__p, v7);
    CoreNLP::ReadOnlyFile<char>::open((uint64_t)__p, (uint64_t)"r", 1, &v28);
    v8 = (uint64_t **)(v6 + 8);
    std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::operator=[abi:ne180100]((uint64_t)v8, &v28);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (v27 < 0)
      operator delete(__p[0]);
    PersistentResource = *v8;
    if (!*v8)
      goto LABEL_21;
  }
  v13 = *PersistentResource;
  if (!*PersistentResource)
  {
LABEL_21:
    __p[0] = &v31;
    v21 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::map<NLLanguageID,CoreNLP::AbstractModel *>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::map<NLLanguageID,CoreNLP::AbstractModel *>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::map<NLLanguageID,CoreNLP::AbstractModel *>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType const&>,std::tuple<>>((uint64_t **)(a1 + 24), &v31, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
    __p[0] = &v30;
    v15 = 0;
    std::__tree<std::__value_type<NLLanguageID,_LXLemmatizer const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,_LXLemmatizer const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,_LXLemmatizer const*>>>::__emplace_unique_key_args<NLLanguageID,std::piecewise_construct_t const&,std::tuple<NLLanguageID const&>,std::tuple<>>(v21 + 5, &v30, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)[5] = 0;
    return v15;
  }
  v14 = PersistentResource[1];
  v15 = (uint64_t *)operator new();
  CoreNLP::TaggingModelManager::labelMap((uint64_t *)a1, v31, v30, (uint64_t *)__p);
  CoreNLP::CRFModel::CRFModel(v15, __p);
  std::__tree<std::string>::destroy((uint64_t)__p, (char *)__p[1]);
  v16 = v30;
  *((_DWORD *)v15 + 2) = v31;
  *((_DWORD *)v15 + 3) = v16;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 56))(v15, v13, v14);
  if (v31 == 7 && v30 == 4)
    *((_DWORD *)v15 + 16) = 104;
  __p[0] = &v31;
  v17 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::map<NLLanguageID,CoreNLP::AbstractModel *>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::map<NLLanguageID,CoreNLP::AbstractModel *>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::map<NLLanguageID,CoreNLP::AbstractModel *>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType const&>,std::tuple<>>((uint64_t **)(a1 + 24), &v31, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
  __p[0] = &v30;
  std::__tree<std::__value_type<NLLanguageID,_LXLemmatizer const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,_LXLemmatizer const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,_LXLemmatizer const*>>>::__emplace_unique_key_args<NLLanguageID,std::piecewise_construct_t const&,std::tuple<NLLanguageID const&>,std::tuple<>>(v17 + 5, &v30, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)[5] = v15;
  v18 = (const char *)(*(uint64_t (**)(uint64_t *))(*v15 + 40))(v15);
  v19 = (*(uint64_t (**)(uint64_t *))(*v15 + 48))(v15);
  CoreNLP::TaggingFeatureExtractor::useModel(a1 + 48, v18, v19, v31, v30);
  if (v31 == 7)
  {
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 0x40000000;
    v23[2] = ___ZN7CoreNLP19TaggingModelManager12loadCRFModelENS_15NLTagSchemeTypeE12NLLanguageID_block_invoke_2;
    v23[3] = &__block_descriptor_tmp_88;
    v24 = v30;
    v20 = (uint64_t *)CoreNLP::SingletonResourceManager<NLLanguageID,USet>::getPersistentResource((uint64_t)&v30, (uint64_t)v23);
    __p[0] = &v30;
    std::__tree<std::__value_type<NLLanguageID,_LXLemmatizer const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,_LXLemmatizer const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,_LXLemmatizer const*>>>::__emplace_unique_key_args<NLLanguageID,std::piecewise_construct_t const&,std::tuple<NLLanguageID const&>,std::tuple<>>((uint64_t **)(a1 + 616), &v30, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)[5] = v20;
  }
  return v15;
}

void CoreNLP::ReadOnlyFile<char>::open(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  _QWORD *exception;
  _QWORD v5[7];
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __n128 (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  void *__p;
  uint64_t v13;
  uint64_t v14;

  v7 = 0;
  v8 = &v7;
  v9 = 0x4002000000;
  v10 = __Block_byref_object_copy__1;
  v11 = __Block_byref_object_dispose__1;
  v13 = 0;
  v14 = 0;
  __p = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN7CoreNLP12ReadOnlyFileIcE4openERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKcb_block_invoke;
  v5[3] = &unk_1E2DF49E8;
  v5[5] = a1;
  v5[6] = a2;
  v6 = a3;
  v5[4] = &v7;
  CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<char>>::getResource(a1, (uint64_t)v5, a4);
  if ((*((char *)v8 + 63) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)v8 + 63))
      goto LABEL_3;
LABEL_7:
    exception = __cxa_allocate_exception(0x20uLL);
    CoreNLP::ResourceCreationException::ResourceCreationException(exception, (__int128 *)(v8 + 5));
  }
  if (v8[6])
    goto LABEL_7;
LABEL_3:
  _Block_object_dispose(&v7, 8);
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
}

void sub_191CB4124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100](v27);
  _Block_object_dispose(&a17, 8);
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t CoreNLP::SingletonResourceManager<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char>>::getPersistentResource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD block[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  if (CoreNLP::SingletonResourceManager<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char>>::getQueue(void)::onceToken != -1)
    dispatch_once(&CoreNLP::SingletonResourceManager<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char>>::getQueue(void)::onceToken, &__block_literal_global_94);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7CoreNLP24SingletonResourceManagerINSt3__14pairINS_15NLTagSchemeTypeE12NLLanguageIDEENS_12ReadOnlyFileIcEEE21getPersistentResourceERKS5_U13block_pointerFPS7_vE_block_invoke;
  block[3] = &unk_1E2DF4AB8;
  block[5] = &v7;
  block[6] = a1;
  block[4] = a2;
  dispatch_sync((dispatch_queue_t)CoreNLP::SingletonResourceManager<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char>>::getQueue(void)::queue, block);
  v4 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t ___ZN7CoreNLP19TaggingModelManager12loadCRFModelENS_15NLTagSchemeTypeE12NLLanguageID_block_invoke(uint64_t a1)
{
  CoreNLP::Resource *v2;
  CoreNLP::Resource *v3;
  int v4;
  CoreNLP **v5;
  const __CFString *v6;
  uint64_t v7;
  void *__p[2];
  char v10;
  void *v11;

  v2 = CoreNLP::copyLocaleForLanguageID(*(_DWORD *)(a1 + 36));
  v3 = v2;
  v11 = 0;
  v4 = *(_DWORD *)(a1 + 32);
  if (v4 == 7)
  {
    if (*(_DWORD *)(a1 + 36) == 10)
      v6 = CFSTR("ner_v2.dat");
    else
      v6 = CFSTR("ner.dat");
    CoreNLP::Resource::getAssetResource(v2, (const __CFLocale *)CFSTR("Tagging"), v6, 0, __p);
  }
  else
  {
    v5 = 0;
    if (v4 != 6)
      goto LABEL_9;
    CoreNLP::Resource::getAssetResource(v2, (const __CFLocale *)CFSTR("Tagging"), CFSTR("pos.dat"), 0, __p);
  }
  v5 = (CoreNLP **)__p[0];
  v11 = __p[0];
LABEL_9:
  if (v3)
    CFRelease(v3);
  if (!v5)
    return 0;
  if (CoreNLP::Resource::exists(v5))
  {
    CoreNLP::Resource::path(v5, __p);
    v7 = CoreNLP::ReadOnlyFile<char>::create((__int128 *)__p, "r", 1);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v7 = 0;
  }
  CoreNLP::Resource::~Resource((CoreNLP::Resource *)v5);
  MEMORY[0x19401E994]();
  return v7;
}

void sub_191CB43C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CoreNLP::Resource *a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::unique_ptr<CoreNLP::Resource>::reset[abi:ne180100](&a15, 0);
  _Unwind_Resume(a1);
}

uint64_t *CoreNLP::TaggingModelManager::labelMap@<X0>(uint64_t *result@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  const void ***v4;

  if (a2 == 7)
  {
    if (a3 == 4)
      v4 = (const void ***)(result + 70);
    else
      v4 = (const void ***)(result + 67);
  }
  else
  {
    if (a2 != 6)
    {
      a4[2] = 0;
      a4[1] = 0;
      *a4 = (uint64_t)(a4 + 1);
      return result;
    }
    v4 = (const void ***)(result + 73);
  }
  return std::map<std::string,int>::map[abi:ne180100](a4, v4);
}

uint64_t CoreNLP::SingletonResourceManager<NLLanguageID,USet>::getPersistentResource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD block[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  if (CoreNLP::SingletonResourceManager<NLLanguageID,USet>::getQueue(void)::onceToken != -1)
    dispatch_once(&CoreNLP::SingletonResourceManager<NLLanguageID,USet>::getQueue(void)::onceToken, &__block_literal_global_117);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7CoreNLP24SingletonResourceManagerI12NLLanguageID4USetE21getPersistentResourceERKS1_U13block_pointerFPS2_vE_block_invoke;
  block[3] = &unk_1E2DF4AE0;
  block[5] = &v7;
  block[6] = a1;
  block[4] = a2;
  dispatch_sync((dispatch_queue_t)CoreNLP::SingletonResourceManager<NLLanguageID,USet>::getQueue(void)::queue, block);
  v4 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t ___ZN7CoreNLP19TaggingModelManager12loadCRFModelENS_15NLTagSchemeTypeE12NLLanguageID_block_invoke_2(uint64_t a1)
{
  return CoreNLP::createExemplarSetForLanguage((CoreNLP *)*(unsigned int *)(a1 + 32));
}

uint64_t *CoreNLP::TaggingModelManager::getOrLoadModel(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  uint64_t **v19;
  int v21;
  int v22;
  int *v23;

  v21 = a3;
  v22 = a2;
  v4 = a1 + 32;
  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    goto LABEL_21;
  v5 = a1 + 32;
  do
  {
    v6 = *(_DWORD *)(v3 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (!v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 != v4 && *(_DWORD *)(v5 + 32) <= a2)
  {
    v11 = *(_QWORD *)(v5 + 48);
    v9 = v5 + 48;
    v10 = v11;
    if (v11)
    {
      v12 = v9;
      do
      {
        v13 = *(_DWORD *)(v10 + 32);
        v14 = v13 < a3;
        if (v13 >= a3)
          v15 = (uint64_t *)v10;
        else
          v15 = (uint64_t *)(v10 + 8);
        if (!v14)
          v12 = v10;
        v10 = *v15;
      }
      while (*v15);
      if (v12 != v9 && *(_DWORD *)(v12 + 32) <= a3)
        return *(uint64_t **)(v12 + 40);
    }
  }
LABEL_21:
  switch(a2)
  {
    case 12:
      CoreNLP::EmotionModel::CreateModel(a3, &v23);
      break;
    case 9:
      CoreNLP::TopicModel::CreateModel(a3, (uint64_t *)&v23);
      break;
    case 8:
      CoreNLP::SentimentModel::CreateModel(a3, (uint64_t *)&v23);
      break;
    default:
      return CoreNLP::TaggingModelManager::loadCRFModel(a1, a2, a3);
  }
  v16 = (uint64_t *)v23;
  if (!v23)
    return 0;
  v17 = (uint64_t **)(v4 - 8);
  v23 = &v22;
  v18 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::map<NLLanguageID,CoreNLP::AbstractModel *>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::map<NLLanguageID,CoreNLP::AbstractModel *>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::map<NLLanguageID,CoreNLP::AbstractModel *>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType const&>,std::tuple<>>(v17, &v22, (uint64_t)&std::piecewise_construct, &v23);
  v23 = &v21;
  std::__tree<std::__value_type<NLLanguageID,_LXLemmatizer const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,_LXLemmatizer const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,_LXLemmatizer const*>>>::__emplace_unique_key_args<NLLanguageID,std::piecewise_construct_t const&,std::tuple<NLLanguageID const&>,std::tuple<>>(v18 + 5, &v21, (uint64_t)&std::piecewise_construct, &v23)[5] = v16;
  v23 = &v22;
  v19 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::map<NLLanguageID,CoreNLP::AbstractModel *>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::map<NLLanguageID,CoreNLP::AbstractModel *>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::map<NLLanguageID,CoreNLP::AbstractModel *>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType const&>,std::tuple<>>(v17, &v22, (uint64_t)&std::piecewise_construct, &v23);
  v23 = &v21;
  return std::__tree<std::__value_type<NLLanguageID,_LXLemmatizer const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,_LXLemmatizer const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,_LXLemmatizer const*>>>::__emplace_unique_key_args<NLLanguageID,std::piecewise_construct_t const&,std::tuple<NLLanguageID const&>,std::tuple<>>(v19 + 5, &v21, (uint64_t)&std::piecewise_construct, &v23)[5];
}

BOOL CoreNLP::TaggingModelManager::addTask(CoreNLP::TaggingModelManager *a1, int a2, int a3)
{
  uint64_t *Model;

  Model = CoreNLP::TaggingModelManager::getOrLoadModel((uint64_t)a1, a2, a3);
  return CoreNLP::TaggingModelManager::addTask(a1, (CoreNLP::AbstractModel *)Model);
}

BOOL CoreNLP::TaggingModelManager::addTask(CoreNLP::TaggingModelManager *this, CoreNLP::AbstractModel *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  int *v9;
  int *v10;
  int v11;
  uint64_t *v12;
  CoreNLP::AbstractModel *Model;
  CoreNLP::AbstractModel **v15;
  int *v16;
  CoreNLP::AbstractModel *v17;
  CoreNLP::AbstractModel **v18;

  v17 = a2;
  if (a2)
  {
    v4 = (_QWORD *)*((_QWORD *)this + 1);
    if (!v4)
      goto LABEL_13;
    v5 = (_QWORD *)((char *)this + 8);
    do
    {
      v6 = v4[4];
      v7 = v6 >= (unint64_t)a2;
      if (v6 >= (unint64_t)a2)
        v8 = v4;
      else
        v8 = v4 + 1;
      if (v7)
        v5 = v4;
      v4 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 == (_QWORD *)((char *)this + 8) || v5[4] > (unint64_t)a2)
    {
LABEL_13:
      v15 = &v17;
      std::__tree<std::__value_type<CoreNLP::AbstractModel *,std::set<CoreNLP::AbstractModel *>>,std::__map_value_compare<CoreNLP::AbstractModel *,std::__value_type<CoreNLP::AbstractModel *,std::set<CoreNLP::AbstractModel *>>,std::less<CoreNLP::AbstractModel *>,true>,std::allocator<std::__value_type<CoreNLP::AbstractModel *,std::set<CoreNLP::AbstractModel *>>>>::__emplace_unique_key_args<CoreNLP::AbstractModel *,std::piecewise_construct_t const&,std::tuple<CoreNLP::AbstractModel * const&>,std::tuple<>>((uint64_t **)this, (unint64_t *)&v17, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15);
      CoreNLP::TaggingFeatureExtractor::dependency(*((_DWORD *)v17 + 16), (void **)&v15);
      v9 = (int *)v15;
      v10 = v16;
      if (v15 != (CoreNLP::AbstractModel **)v16)
      {
        do
        {
          v11 = *v9;
          if (*v9)
          {
            Model = 0;
            Model = (CoreNLP::AbstractModel *)CoreNLP::TaggingModelManager::getOrLoadModel((uint64_t)this, v11, *((_DWORD *)v17 + 3));
            if (Model)
            {
              v18 = &v17;
              v12 = std::__tree<std::__value_type<CoreNLP::AbstractModel *,std::set<CoreNLP::AbstractModel *>>,std::__map_value_compare<CoreNLP::AbstractModel *,std::__value_type<CoreNLP::AbstractModel *,std::set<CoreNLP::AbstractModel *>>,std::less<CoreNLP::AbstractModel *>,true>,std::allocator<std::__value_type<CoreNLP::AbstractModel *,std::set<CoreNLP::AbstractModel *>>>>::__emplace_unique_key_args<CoreNLP::AbstractModel *,std::piecewise_construct_t const&,std::tuple<CoreNLP::AbstractModel * const&>,std::tuple<>>((uint64_t **)this, (unint64_t *)&v17, (uint64_t)&std::piecewise_construct, (uint64_t **)&v18);
              std::__tree<CoreNLP::AbstractModel *>::__emplace_unique_key_args<CoreNLP::AbstractModel *,CoreNLP::AbstractModel * const&>((uint64_t **)v12 + 5, (unint64_t *)&Model, (uint64_t *)&Model);
              CoreNLP::TaggingModelManager::addTask(this, Model);
            }
          }
          ++v9;
        }
        while (v9 != v10);
        v9 = (int *)v15;
      }
      if (v9)
      {
        v16 = v9;
        operator delete(v9);
      }
    }
  }
  return a2 != 0;
}

void sub_191CB4844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreNLP::TaggingModelManager::tagToLabel(_QWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, std::string *a5@<X8>)
{
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t v26;
  std::string __p;
  int v28;

  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  if (a3 == 7 && (v6 = a2 - 100, (a2 - 100) <= 0x64))
  {
    v7 = (_QWORD *)a1[64];
    v8 = a1 + 65;
    if (v7 != a1 + 65)
    {
      while (1)
      {
        if (*((char *)v7 + 55) < 0)
          std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v7[4], v7[5]);
        else
          __p = *(std::string *)(v7 + 4);
        v28 = *((_DWORD *)v7 + 14);
        if (v6 == v28)
          break;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v9 = (_QWORD *)v7[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v7[2];
            v11 = *v10 == (_QWORD)v7;
            v7 = v10;
          }
          while (!v11);
        }
        v7 = v10;
        if (v10 == v8)
          return;
      }
      std::string::operator=(a5, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v14 = a1[4];
    v12 = a1 + 4;
    v13 = v14;
    if (v14)
    {
      v15 = v12;
      do
      {
        v16 = *(_DWORD *)(v13 + 32);
        v17 = v16 < a3;
        if (v16 >= a3)
          v18 = (uint64_t *)v13;
        else
          v18 = (uint64_t *)(v13 + 8);
        if (!v17)
          v15 = (_QWORD *)v13;
        v13 = *v18;
      }
      while (*v18);
      if (v15 != v12 && *((_DWORD *)v15 + 8) <= a3)
      {
        v21 = (_QWORD *)v15[6];
        v19 = v15 + 6;
        v20 = v21;
        if (v21)
        {
          v22 = v19;
          do
          {
            v23 = *((_DWORD *)v20 + 8);
            v24 = v23 < a4;
            if (v23 >= a4)
              v25 = v20;
            else
              v25 = v20 + 1;
            if (!v24)
              v22 = v20;
            v20 = (_QWORD *)*v25;
          }
          while (*v25);
          if (v22 != v19 && *((_DWORD *)v22 + 8) <= a4)
          {
            v26 = v22[5];
            if (v26)
            {
              (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v26 + 72))(&__p);
              *a5 = __p;
            }
          }
        }
      }
    }
  }
}

void sub_191CB4A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

void CoreNLP::TaggingModelManager::setCustomModelPath(uint64_t a1, int a2, int a3, uint64_t a4)
{
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11[2];
  std::string v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  int *v15;

  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v12 = *(std::string *)a4;
  v13 = 0;
  v14 = 0;
  v11[0] = a3;
  v11[1] = a2;
  v15 = v11;
  v7 = std::__tree<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,std::__map_value_compare<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,std::less<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>>,true>,std::allocator<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>>>::__emplace_unique_key_args<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::piecewise_construct_t const&,std::tuple<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>&&>,std::tuple<>>((uint64_t **)(a1 + 464), v11, (uint64_t)&std::piecewise_construct, (_QWORD **)&v15);
  std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>::operator=[abi:ne180100]((uint64_t)(v7 + 40), (__int128 *)&v12);
  v8 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_191CB4B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v4;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::operator=[abi:ne180100](a1 + 24, (__int128 *)((char *)a2 + 24));
  return a1;
}

uint64_t std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>::~pair(uint64_t a1)
{
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void CoreNLP::TaggingModelManager::loadCustomGazetteer(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  const __CFString *v8;
  CFURLRef v9;
  __CFDictionary *Mutable;
  uint64_t v11;
  const void *v12;
  uint64_t **v13;
  uint64_t **v14;
  int v15;
  int v16;
  uint64_t v17;
  int *v18;

  v3 = *(_QWORD *)(a1 + 496);
  if (!v3)
    goto LABEL_11;
  v4 = a1 + 496;
  do
  {
    v5 = *(_DWORD *)(v3 + 32);
    v6 = v5 < 0;
    if (v5 >= 0)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (!v6)
      v4 = v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 496 || *(int *)(v4 + 32) >= 1)
  {
LABEL_11:
    if (a2[23] < 0)
      a2 = *(const char **)a2;
    v8 = CFStringCreateWithCString(0, a2, 0x8000100u);
    v9 = CFURLCreateWithFileSystemPath(0, v8, kCFURLPOSIXPathStyle, 0);
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionaryAddValue(Mutable, kNLGazetteerCompressedModelURL, v9);
    v11 = NLGazetteerCreate(Mutable);
    v17 = v11;
    if (v11)
    {
      v12 = (const void *)v11;
      v16 = 0;
      v18 = &v16;
      v13 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::map<NLLanguageID,CoreNLP::AbstractModel *>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::map<NLLanguageID,CoreNLP::AbstractModel *>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::map<NLLanguageID,CoreNLP::AbstractModel *>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType const&>,std::tuple<>>((uint64_t **)(a1 + 488), &v16, (uint64_t)&std::piecewise_construct, &v18);
      v15 = 208;
      v18 = &v15;
      v14 = std::__tree<std::__value_type<NLLanguageID,_LXLemmatizer const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,_LXLemmatizer const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,_LXLemmatizer const*>>>::__emplace_unique_key_args<NLLanguageID,std::piecewise_construct_t const&,std::tuple<NLLanguageID const&>,std::tuple<>>(v13 + 5, &v15, (uint64_t)&std::piecewise_construct, &v18);
      v17 = 0;
      nlp::CFScopedPtr<void *>::reset((const void **)v14 + 5, v12);
    }
    if (v8)
      CFRelease(v8);
    if (v9)
      CFRelease(v9);
    CFRelease(Mutable);
  }
}

void sub_191CB4D3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<void *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::TaggingModelManager::setCustomGazetteerMaxTokenSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 608) = a2;
  return this;
}

CFIndex CoreNLP::TaggingModelManager::setCustomGazetteers(uint64_t a1, CFArrayRef theArray, int a3)
{
  CFIndex result;
  CFIndex v6;
  uint64_t **v7;
  CoreNLP *ValueAtIndex;
  void *v9;
  CoreNLP *v10;
  const __CFLocale *v11;
  CoreNLP *v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t **v16;
  int LocaleLanguage;
  int v18;
  int *p_LocaleLanguage;

  v18 = a3;
  result = CFArrayGetCount(theArray);
  if (result >= 1)
  {
    v6 = 0;
    v7 = (uint64_t **)(a1 + 488);
    do
    {
      ValueAtIndex = (CoreNLP *)CFArrayGetValueAtIndex(theArray, v6);
      v10 = (CoreNLP *)NLGazetteerCopyLocale(ValueAtIndex, v9);
      if (v10)
      {
        v12 = v10;
        LocaleLanguage = CoreNLP::getLocaleLanguage(v10, v11);
        p_LocaleLanguage = &LocaleLanguage;
        v13 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::map<NLLanguageID,CoreNLP::AbstractModel *>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::map<NLLanguageID,CoreNLP::AbstractModel *>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::map<NLLanguageID,CoreNLP::AbstractModel *>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType const&>,std::tuple<>>(v7, &LocaleLanguage, (uint64_t)&std::piecewise_construct, &p_LocaleLanguage);
        p_LocaleLanguage = &v18;
        v14 = std::__tree<std::__value_type<NLLanguageID,_LXLemmatizer const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,_LXLemmatizer const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,_LXLemmatizer const*>>>::__emplace_unique_key_args<NLLanguageID,std::piecewise_construct_t const&,std::tuple<NLLanguageID const&>,std::tuple<>>(v13 + 5, &v18, (uint64_t)&std::piecewise_construct, &p_LocaleLanguage);
        nlp::CFScopedPtr<void *>::acquire((const void **)v14 + 5, ValueAtIndex);
        CFRelease(v12);
      }
      else
      {
        LocaleLanguage = 0;
        p_LocaleLanguage = &LocaleLanguage;
        v15 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::map<NLLanguageID,CoreNLP::AbstractModel *>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::map<NLLanguageID,CoreNLP::AbstractModel *>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::map<NLLanguageID,CoreNLP::AbstractModel *>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType const&>,std::tuple<>>(v7, &LocaleLanguage, (uint64_t)&std::piecewise_construct, &p_LocaleLanguage);
        p_LocaleLanguage = &v18;
        v16 = std::__tree<std::__value_type<NLLanguageID,_LXLemmatizer const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,_LXLemmatizer const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,_LXLemmatizer const*>>>::__emplace_unique_key_args<NLLanguageID,std::piecewise_construct_t const&,std::tuple<NLLanguageID const&>,std::tuple<>>(v15 + 5, &v18, (uint64_t)&std::piecewise_construct, &p_LocaleLanguage);
        nlp::CFScopedPtr<void *>::acquire((const void **)v16 + 5, ValueAtIndex);
      }
      ++v6;
      result = CFArrayGetCount(theArray);
    }
    while (v6 < result);
  }
  return result;
}

void nlp::CFScopedPtr<void *>::acquire(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    nlp::CFScopedPtr<void *>::reset(a1, cf);
  }
}

uint64_t CoreNLP::hasInvalidCharInNERToken(CoreNLP *this, CFStringRef theString, __CFString *a3, CoreNLP::NLAttributedToken *a4)
{
  CFIndex Length;
  CoreNLP::NLAttributedToken *v8;
  char *isa;
  CFIndex v10;
  const __CFString *v11;
  int v12;
  BOOL v13;
  char **v14;
  unint64_t v15;
  char *v16;
  uint64_t CharacterAtIndex;
  int v19;
  int *v20;

  Length = CFStringGetLength(theString);
  isa = (char *)a3[1].isa;
  if (isa)
  {
    v10 = Length;
    v11 = a3 + 1;
    do
    {
      v12 = *((_DWORD *)isa + 8);
      v13 = v12 < 7;
      if (v12 >= 7)
        v14 = (char **)isa;
      else
        v14 = (char **)(isa + 8);
      if (!v13)
        v11 = (const __CFString *)isa;
      isa = *v14;
    }
    while (*v14);
    if (v11 != &a3[1] && SLODWORD(v11[1].isa) <= 7 && (LODWORD(v11[1].info) - 67) <= 2)
    {
      if (a3->info >= 1)
      {
        v15 = (unint64_t)a3->isa;
        v16 = (char *)a3->isa;
        while ((v15 & 0x8000000000000000) == 0)
        {
          if ((uint64_t)v16 >= v10)
            break;
          CharacterAtIndex = CFStringGetCharacterAtIndex(theString, (CFIndex)v16);
          if (!MEMORY[0x19401F264](this, CharacterAtIndex))
            break;
          if ((uint64_t)++v16 >= (uint64_t)a3->isa + a3->info)
            goto LABEL_18;
        }
        goto LABEL_21;
      }
LABEL_18:
      if ((a3[2].info & 0x200) == 0 && (CoreNLP::isPunctuationOrWhitespace((CoreNLP *)a3, v8) || a3->info <= 1))
      {
LABEL_21:
        v19 = 7;
        v20 = &v19;
        *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)&a3->length, &v19, (uint64_t)&std::piecewise_construct, &v20)+ 10) = 70;
        return 1;
      }
    }
  }
  return 0;
}

uint64_t CoreNLP::TaggingModelManager::checkInvalidCharInSimplifiedChineseNER(uint64_t result, uint64_t *a2, uint64_t a3, CoreNLP::NLAttributedToken *a4)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  const __CFString *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(result + 624);
  if (v4)
  {
    v6 = result + 624;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < 4;
      if (v7 >= 4)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != result + 624 && *(int *)(v6 + 32) <= 4)
    {
      v10 = *(const __CFString **)(a3 + 8);
      if (*(_QWORD *)(v6 + 40))
        v11 = v10 == 0;
      else
        v11 = 1;
      if (!v11)
      {
        v12 = *a2;
        if (a2[1] != *a2)
        {
          v13 = 0;
          v14 = 0;
          do
          {
            result = CoreNLP::hasInvalidCharInNERToken(*(CoreNLP **)(v6 + 40), v10, (__CFString *)(v12 + v13), a4);
            ++v14;
            v12 = *a2;
            v13 += 112;
          }
          while (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4) > v14);
        }
      }
    }
  }
  return result;
}

uint64_t *std::map<NLLanguageID,CoreNLP::AbstractModel *>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<NLLanguageID,CoreNLP::AbstractModel *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<NLLanguageID,CoreNLP::AbstractModel *>,std::__tree_node<std::__value_type<NLLanguageID,CoreNLP::AbstractModel *>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_191CB5150(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<NLLanguageID,CoreNLP::AbstractModel *>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<NLLanguageID,CoreNLP::AbstractModel *>,std::__tree_node<std::__value_type<NLLanguageID,CoreNLP::AbstractModel *>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::__emplace_hint_unique_key_args<NLLanguageID,std::pair<NLLanguageID const,__CFString const*> const&>(v5, v6, v4 + 8, (_OWORD *)v4 + 2);
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t std::map<std::string,int>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,int> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_191CB5250(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,std::__map_value_compare<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,std::less<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>>,true>,std::allocator<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,std::__map_value_compare<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,std::less<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>>,true>,std::allocator<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,std::__map_value_compare<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,std::less<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>>,true>,std::allocator<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID> const,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID> const,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,0>(uint64_t a1)
{
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100](a1 + 32);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__tree<std::__value_type<NLLanguageID,std::map<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<NLLanguageID,std::map<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<NLLanguageID,std::map<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>>>::destroy((uint64_t)(a2 + 5), (const void **)a2[6]);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>>>::destroy(uint64_t a1, const void **a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,nlp::CFScopedPtr<void *>>>>::destroy(a1, a2[1]);
    nlp::CFScopedPtr<void *>::reset(a2 + 5, 0);
    operator delete(a2);
  }
}

void ___ZN7CoreNLP24SingletonResourceManagerINSt3__14pairINS_15NLTagSchemeTypeE12NLLanguageIDEENS_12ReadOnlyFileIcEEE19clearEmptyResourcesEv_block_invoke()
{
  uint64_t **v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  if (CoreNLP::SingletonResourceManager<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char>>::getPersistentCache(void)::onceToken != -1)
    dispatch_once(&CoreNLP::SingletonResourceManager<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char>>::getPersistentCache(void)::onceToken, &__block_literal_global_97);
  v0 = (uint64_t **)CoreNLP::SingletonResourceManager<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char>>::getPersistentCache(void)::cache;
  v2 = (uint64_t *)((char *)CoreNLP::SingletonResourceManager<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char>>::getPersistentCache(void)::cache
                 + 8);
  v1 = *(uint64_t **)CoreNLP::SingletonResourceManager<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char>>::getPersistentCache(void)::cache;
  if (*(_UNKNOWN **)CoreNLP::SingletonResourceManager<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char>>::getPersistentCache(void)::cache != (_UNKNOWN *)((char *)CoreNLP::SingletonResourceManager<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char>>::getPersistentCache(void)::cache + 8))
  {
    do
    {
      v3 = (uint64_t *)v1[1];
      if (v1[5])
      {
        if (v3)
        {
          do
          {
            v4 = v3;
            v3 = (uint64_t *)*v3;
          }
          while (v3);
        }
        else
        {
          do
          {
            v4 = (uint64_t *)v1[2];
            v5 = *v4 == (_QWORD)v1;
            v1 = v4;
          }
          while (!v5);
        }
      }
      else
      {
        v6 = v1;
        if (v3)
        {
          do
          {
            v4 = v3;
            v3 = (uint64_t *)*v3;
          }
          while (v3);
        }
        else
        {
          do
          {
            v4 = (uint64_t *)v6[2];
            v5 = *v4 == (_QWORD)v6;
            v6 = v4;
          }
          while (!v5);
        }
        std::__tree<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char> *>,std::__map_value_compare<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char> *>,std::less<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>>,true>,std::allocator<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char> *>>>::__remove_node_pointer(v0, v1);
        operator delete(v1);
      }
      v1 = v4;
    }
    while (v4 != v2);
  }
}

void ___ZN7CoreNLP24SingletonResourceManagerINSt3__14pairINS_15NLTagSchemeTypeE12NLLanguageIDEENS_12ReadOnlyFileIcEEE8getQueueEv_block_invoke()
{
  NSObject *v0;
  NSObject *global_queue;

  v0 = dispatch_queue_create("com.apple.CoreNLP.SingletonResourceManager", 0);
  CoreNLP::SingletonResourceManager<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char>>::getQueue(void)::queue = (uint64_t)v0;
  global_queue = dispatch_get_global_queue(-32768, 0);
  dispatch_set_target_queue(v0, global_queue);
}

uint64_t ___ZN7CoreNLP24SingletonResourceManagerINSt3__14pairINS_15NLTagSchemeTypeE12NLLanguageIDEENS_12ReadOnlyFileIcEEE18getPersistentCacheEv_block_invoke()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)result = result + 8;
  CoreNLP::SingletonResourceManager<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char>>::getPersistentCache(void)::cache = (_UNKNOWN *)result;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char> *>,std::__map_value_compare<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char> *>,std::less<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>>,true>,std::allocator<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char> *>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

_QWORD *std::vector<CoreNLP::NLAttributedToken *>::__init_with_size[abi:ne180100]<CoreNLP::NLAttributedToken **,CoreNLP::NLAttributedToken **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_191CB5940(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<int,double>>::__assign_with_size[abi:ne180100]<std::pair<int,double>*,std::pair<int,double>*>(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          *(_DWORD *)v25 = *(_DWORD *)v6;
          *((_QWORD *)v25 + 1) = *((_QWORD *)v6 + 1);
          v24 += 16;
          ++v6;
          v25 += 16;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v24 - result);
      v12 = result;
    }
    else
    {
      v20 = &a2[v19];
      if (v12 != result)
      {
        do
        {
          *(_DWORD *)result = *(_DWORD *)v6;
          *((_QWORD *)result + 1) = *((_QWORD *)v6++ + 1);
          result += 16;
        }
        while (v6 != v20);
      }
      v21 = v12;
      if (v20 != a3)
      {
        v22 = v12;
        do
        {
          v23 = *v20++;
          *(_OWORD *)v22 = v23;
          v22 += 16;
          v21 += 16;
        }
        while (v20 != a3);
      }
      v17 = (char *)(v21 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<std::pair<float,unsigned long>>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *v6++;
        *(_OWORD *)v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

uint64_t *std::__tree<CoreNLP::AbstractModel *>::__emplace_unique_key_args<CoreNLP::AbstractModel *,CoreNLP::AbstractModel * const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t *std::__tree<std::__value_type<CoreNLP::AbstractModel *,std::set<CoreNLP::AbstractModel *>>,std::__map_value_compare<CoreNLP::AbstractModel *,std::__value_type<CoreNLP::AbstractModel *,std::set<CoreNLP::AbstractModel *>>,std::less<CoreNLP::AbstractModel *>,true>,std::allocator<std::__value_type<CoreNLP::AbstractModel *,std::set<CoreNLP::AbstractModel *>>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = std::__tree<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char> *>,std::__map_value_compare<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char> *>,std::less<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>>,true>,std::allocator<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char> *>>>::__remove_node_pointer(a1, (uint64_t *)a2);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy(a2 + 40, *(_QWORD **)(a2 + 48));
  operator delete((void *)a2);
  return v3;
}

uint64_t *std::__tree<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,std::__map_value_compare<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,std::less<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>>,true>,std::allocator<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>>>::find<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>>(uint64_t a1, int *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  int v6;
  uint64_t *v7;
  int v8;
  int v9;

  v4 = *(uint64_t **)(a1 + 8);
  v2 = (uint64_t *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v6 = *a2;
  v5 = a2[1];
  v7 = v2;
  do
  {
    v8 = *((_DWORD *)v3 + 8);
    if (v8 >= v6)
    {
      if (v6 >= v8)
      {
        if (*((_DWORD *)v3 + 9) < v5)
          ++v3;
        else
          v7 = v3;
      }
      else
      {
        v7 = v3;
      }
    }
    else
    {
      ++v3;
    }
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v7 == v2)
    return v2;
  v9 = *((_DWORD *)v7 + 8);
  if (v6 < v9 || v9 >= v6 && v5 < *((_DWORD *)v7 + 9))
    return v2;
  return v7;
}

__n128 __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<char>>::getResource(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[7];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  __n128 (*v16)(uint64_t, uint64_t);
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  std::__shared_weak_count *v19;

  v13 = 0;
  v14 = &v13;
  v15 = 0x3802000000;
  v16 = __Block_byref_object_copy__100;
  v17 = __Block_byref_object_dispose__101;
  v18 = 0;
  v19 = 0;
  if (CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<char>>::getQueue(void)::onceToken != -1)
    dispatch_once(&CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<char>>::getQueue(void)::onceToken, &__block_literal_global_104);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___ZN7CoreNLP24SingletonResourceManagerINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_12ReadOnlyFileIcEEE11getResourceERKS7_U13block_pointerFPS9_vE_block_invoke;
  v12[3] = &unk_1E2DF4A10;
  v12[4] = a2;
  v12[5] = &v13;
  v12[6] = a1;
  dispatch_sync((dispatch_queue_t)CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<char>>::getQueue(void)::queue, v12);
  v6 = v14[6];
  *a3 = v14[5];
  a3[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  _Block_object_dispose(&v13, 8);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t ___ZN7CoreNLP12ReadOnlyFileIcE4openERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKcb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 *v3;
  void *__p[2];
  char v6;

  v2 = operator new();
  v3 = *(__int128 **)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, *(char **)(a1 + 48));
  CoreNLP::ReadOnlyFile<char>::ReadOnlyFile(v2, v3, (const std::string::value_type *)__p, *(unsigned __int8 *)(a1 + 56));
  if (v6 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_191CB5E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  void *v19;
  uint64_t v20;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x19401E994](v16, 0x1012C403EBA5055);
  if (a2 == 1)
  {
    v19 = __cxa_begin_catch(a1);
    v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
    MEMORY[0x19401E64C](*(_QWORD *)(*(_QWORD *)(v15 + 32) + 8) + 40, v20);
    __cxa_end_catch();
    JUMPOUT(0x191CB5E14);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__100(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__101(uint64_t a1)
{
  return std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100](a1 + 40);
}

void ___ZN7CoreNLP24SingletonResourceManagerINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_12ReadOnlyFileIcEEE11getResourceERKS7_U13block_pointerFPS9_vE_block_invoke(uint64_t a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  __int128 v17;

  if (CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<char>>::getCache(void)::onceToken != -1)
    dispatch_once(&CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<char>>::getCache(void)::onceToken, &__block_literal_global_106);
  v2 = (uint64_t **)CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<char>>::getCache(void)::cache;
  v3 = std::__tree<std::string>::find<std::string>(CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<char>>::getCache(void)::cache, *(const void ***)(a1 + 48));
  if (v2 + 1 == (uint64_t **)v3
    || (v4 = v3, (v5 = *(std::__shared_weak_count **)(v3 + 64)) == 0)
    || v5->__shared_owners_ == -1)
  {
    v10 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    if (v10)
    {
      std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::reset[abi:ne180100]<CoreNLP::ReadOnlyFile<char>,void>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v10);
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v13 = *(_QWORD *)(v11 + 40);
      v12 = *(_QWORD *)(v11 + 48);
      if (v12)
      {
        v14 = (unint64_t *)(v12 + 16);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      *(_QWORD *)&v17 = *(_QWORD *)(a1 + 48);
      v16 = std::__tree<std::__value_type<std::string,std::weak_ptr<CoreNLP::ReadOnlyFile<char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<CoreNLP::ReadOnlyFile<char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<CoreNLP::ReadOnlyFile<char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v2, (const void **)v17, (uint64_t)&std::piecewise_construct, (__int128 **)&v17);
      v9 = (std::__shared_weak_count *)v16[8];
      v16[7] = v13;
      v16[8] = v12;
      if (v9)
        goto LABEL_18;
    }
  }
  else
  {
    *(_QWORD *)&v17 = 0;
    *((_QWORD *)&v17 + 1) = std::__shared_weak_count::lock(v5);
    if (*((_QWORD *)&v17 + 1))
      *(_QWORD *)&v17 = *(_QWORD *)(v4 + 56);
    std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::operator=[abi:ne180100](*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40, &v17);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        v9 = v6;
LABEL_18:
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_191CB6048(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::reset[abi:ne180100]<CoreNLP::ReadOnlyFile<char>,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::shared_ptr[abi:ne180100]<CoreNLP::ReadOnlyFile<char>,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ___ZN7CoreNLP24SingletonResourceManagerINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_12ReadOnlyFileIcEEE8getQueueEv_block_invoke()
{
  NSObject *v0;
  NSObject *global_queue;

  v0 = dispatch_queue_create("com.apple.CoreNLP.SingletonResourceManager", 0);
  CoreNLP::SingletonResourceManager<std::string,CoreNLP::ReadOnlyFile<char>>::getQueue(void)::queue = (uint64_t)v0;
  global_queue = dispatch_get_global_queue(-32768, 0);
  dispatch_set_target_queue(v0, global_queue);
}

_QWORD *std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::shared_ptr[abi:ne180100]<CoreNLP::ReadOnlyFile<char>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E2DF35F0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_191CB61BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<CoreNLP::ReadOnlyFile<char>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<CoreNLP::ReadOnlyFile<char> *,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::__shared_ptr_default_delete<CoreNLP::ReadOnlyFile<char>,CoreNLP::ReadOnlyFile<char>>,std::allocator<CoreNLP::ReadOnlyFile<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401E994);
}

uint64_t std::__shared_ptr_pointer<CoreNLP::ReadOnlyFile<char> *,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::__shared_ptr_default_delete<CoreNLP::ReadOnlyFile<char>,CoreNLP::ReadOnlyFile<char>>,std::allocator<CoreNLP::ReadOnlyFile<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    CoreNLP::ReadOnlyFile<char>::~ReadOnlyFile(result);
    JUMPOUT(0x19401E994);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<CoreNLP::ReadOnlyFile<char> *,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::__shared_ptr_default_delete<CoreNLP::ReadOnlyFile<char>,CoreNLP::ReadOnlyFile<char>>,std::allocator<CoreNLP::ReadOnlyFile<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t CoreNLP::ReadOnlyFile<char>::~ReadOnlyFile(uint64_t a1)
{
  void *v2;
  const char *v3;
  int v4;
  int v5;

  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    if (*(_BYTE *)(a1 + 68))
    {
      munmap(*(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      if (*(_DWORD *)(a1 + 64) != 2)
        goto LABEL_10;
      v3 = (const char *)(a1 + 16);
      if (*(char *)(a1 + 39) < 0)
        v3 = *(const char **)v3;
      v4 = open(v3, 2);
      v5 = v4;
      v2 = *(void **)a1;
      if ((v4 & 0x80000000) == 0)
      {
        write(v4, *(const void **)a1, *(_QWORD *)(a1 + 8));
        close(v5);
        v2 = *(void **)a1;
      }
      if (v2)
LABEL_10:
        MEMORY[0x19401E970](v2, 0x1000C8077774924);
    }
  }
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t std::unique_ptr<CoreNLP::ReadOnlyFile<char>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CoreNLP::ReadOnlyFile<char>::~ReadOnlyFile(result);
    JUMPOUT(0x19401E994);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::weak_ptr<CoreNLP::ReadOnlyFile<char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<CoreNLP::ReadOnlyFile<char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<CoreNLP::ReadOnlyFile<char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::weak_ptr<CoreNLP::ReadOnlyFile<char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<CoreNLP::ReadOnlyFile<char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<CoreNLP::ReadOnlyFile<char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<CoreNLP::ReadOnlyFile<char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<CoreNLP::ReadOnlyFile<char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<CoreNLP::ReadOnlyFile<char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<CoreNLP::ReadOnlyFile<char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<CoreNLP::ReadOnlyFile<char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_191CB6498(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<CoreNLP::ReadOnlyFile<char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<CoreNLP::ReadOnlyFile<char>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<CoreNLP::ReadOnlyFile<char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<CoreNLP::ReadOnlyFile<char>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<CoreNLP::ReadOnlyFile<char>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<CoreNLP::ReadOnlyFile<char>>>,0>(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_191CB65F8(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 24) = 0;
  __cxa_end_catch();
  JUMPOUT(0x191CB65A4);
}

uint64_t *std::__tree<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char> *>,std::__map_value_compare<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char> *>,std::less<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>>,true>,std::allocator<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char> *>>>::__emplace_unique_key_args<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::piecewise_construct_t const&,std::tuple<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID> const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char> *>,std::__map_value_compare<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char> *>,std::less<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>>,true>,std::allocator<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char> *>>>::__find_equal<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>>((uint64_t)a1, &v10, a2);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    v7[4] = **a4;
    v7[5] = 0;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v10, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char> *>,std::__map_value_compare<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char> *>,std::less<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>>,true>,std::allocator<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char> *>>>::__find_equal<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>>(uint64_t a1, _QWORD *a2, int *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  int v9;
  int v10;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    while (1)
    {
      while (1)
      {
        v8 = v4;
        v9 = *((_DWORD *)v4 + 8);
        if (v6 >= v9)
          break;
LABEL_4:
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_12;
      }
      if (v9 >= v6)
      {
        v10 = *((_DWORD *)v8 + 9);
        if (v7 < v10)
          goto LABEL_4;
        if (v10 >= v7)
          goto LABEL_12;
      }
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
      if (!v4)
        goto LABEL_12;
    }
  }
  v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

uint64_t **std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::map<NLLanguageID,CoreNLP::AbstractModel *>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::map<NLLanguageID,CoreNLP::AbstractModel *>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::map<NLLanguageID,CoreNLP::AbstractModel *>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 5) = v11 + 12;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void ___ZN7CoreNLP24SingletonResourceManagerI12NLLanguageID4USetE21getPersistentResourceERKS1_U13block_pointerFPS2_vE_block_invoke(uint64_t a1)
{
  uint64_t **v2;
  char *v3;
  int v4;
  char *v5;
  int v6;
  BOOL v7;
  char **v8;
  _DWORD *v9;
  uint64_t *v10;
  _DWORD *v11;

  if (CoreNLP::SingletonResourceManager<NLLanguageID,USet>::getPersistentCache(void)::onceToken != -1)
    dispatch_once(&CoreNLP::SingletonResourceManager<NLLanguageID,USet>::getPersistentCache(void)::onceToken, &__block_literal_global_119);
  v2 = (uint64_t **)CoreNLP::SingletonResourceManager<NLLanguageID,USet>::getPersistentCache(void)::cache;
  v3 = (char *)*((_QWORD *)CoreNLP::SingletonResourceManager<NLLanguageID,USet>::getPersistentCache(void)::cache + 1);
  if (!v3)
    goto LABEL_13;
  v4 = **(_DWORD **)(a1 + 48);
  v5 = (char *)CoreNLP::SingletonResourceManager<NLLanguageID,USet>::getPersistentCache(void)::cache + 8;
  do
  {
    v6 = *((_DWORD *)v3 + 8);
    v7 = v6 < v4;
    if (v6 >= v4)
      v8 = (char **)v3;
    else
      v8 = (char **)(v3 + 8);
    if (!v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 != (char *)CoreNLP::SingletonResourceManager<NLLanguageID,USet>::getPersistentCache(void)::cache + 8
    && v4 >= *((_DWORD *)v5 + 8))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *((_QWORD *)v5 + 5);
  }
  else
  {
LABEL_13:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    v9 = *(_DWORD **)(a1 + 48);
    v10 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v11 = v9;
    std::__tree<std::__value_type<NLLanguageID,_LXLemmatizer const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,_LXLemmatizer const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,_LXLemmatizer const*>>>::__emplace_unique_key_args<NLLanguageID,std::piecewise_construct_t const&,std::tuple<NLLanguageID const&>,std::tuple<>>(v2, v9, (uint64_t)&std::piecewise_construct, &v11)[5] = v10;
  }
}

void sub_191CB68B8(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 24) = 0;
  __cxa_end_catch();
  JUMPOUT(0x191CB6850);
}

void ___ZN7CoreNLP24SingletonResourceManagerI12NLLanguageID4USetE8getQueueEv_block_invoke()
{
  NSObject *v0;
  NSObject *global_queue;

  v0 = dispatch_queue_create("com.apple.CoreNLP.SingletonResourceManager", 0);
  CoreNLP::SingletonResourceManager<NLLanguageID,USet>::getQueue(void)::queue = (uint64_t)v0;
  global_queue = dispatch_get_global_queue(-32768, 0);
  dispatch_set_target_queue(v0, global_queue);
}

uint64_t ___ZN7CoreNLP24SingletonResourceManagerI12NLLanguageID4USetE18getPersistentCacheEv_block_invoke()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)result = result + 8;
  CoreNLP::SingletonResourceManager<NLLanguageID,USet>::getPersistentCache(void)::cache = (_UNKNOWN *)result;
  return result;
}

uint64_t *std::__tree<std::__value_type<CoreNLP::AbstractModel *,std::set<CoreNLP::AbstractModel *>>,std::__map_value_compare<CoreNLP::AbstractModel *,std::__value_type<CoreNLP::AbstractModel *,std::set<CoreNLP::AbstractModel *>>,std::less<CoreNLP::AbstractModel *>,true>,std::allocator<std::__value_type<CoreNLP::AbstractModel *,std::set<CoreNLP::AbstractModel *>>>>::__emplace_unique_key_args<CoreNLP::AbstractModel *,std::piecewise_construct_t const&,std::tuple<CoreNLP::AbstractModel * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = **a4;
    v11[7] = 0;
    v11[6] = 0;
    v11[4] = v12;
    v11[5] = (uint64_t)(v11 + 6);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

char *std::__tree<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,std::__map_value_compare<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,std::less<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>>,true>,std::allocator<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>>>::__emplace_unique_key_args<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::piecewise_construct_t const&,std::tuple<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>&&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  char *v7;
  uint64_t **v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v6 = std::__tree<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char> *>,std::__map_value_compare<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char> *>,std::less<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>>,true>,std::allocator<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char> *>>>::__find_equal<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>>((uint64_t)a1, &v12, a2);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (char *)operator new(0x50uLL);
    v10[1] = a1 + 1;
    *((_QWORD *)v7 + 4) = **a4;
    *((_QWORD *)v7 + 9) = 0;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    v11 = 1;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID> const,std::pair<std::string,std::shared_ptr<CoreNLP::ReadOnlyFile<char>>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

CoreNLP::EmbeddingManager *CoreNLP::EmbeddingManager::EmbeddingManager(CoreNLP::EmbeddingManager *this)
{
  char *v2;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  _BYTE v7[8];
  _QWORD *v8;
  _BYTE v9[8];
  _QWORD *v10;
  _BYTE v11[8];
  _QWORD *v12;
  _BYTE v13[8];
  _QWORD *v14;
  _BYTE v15[8];
  _QWORD *v16;
  _BYTE v17[8];
  _QWORD *v18;
  uint64_t v19;
  const __CFString *v20;
  uint64_t v21;
  const __CFString *v22;
  uint64_t v23;
  const __CFString *v24;
  uint64_t v25;
  const __CFString *v26;
  uint64_t v27;
  const __CFString *v28;
  uint64_t v29;
  const __CFString *v30;
  uint64_t v31;
  __CFString *v32;
  uint64_t v33;
  const __CFString *v34;
  int v35;
  uint64_t v36[3];
  int v37;
  uint64_t v38[3];
  int v39;
  uint64_t v40[3];
  int v41;
  uint64_t v42[3];
  int v43;
  uint64_t v44[3];
  int v45;
  uint64_t v46[3];
  int v47;
  uint64_t v48[4];

  v48[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  v2 = (char *)this + 8;
  v33 = 1;
  v34 = CFSTR("embedding.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)v17, &v33, 1);
  v35 = 10;
  std::map<long,__CFString const*>::map[abi:ne180100](v36, (uint64_t)v17);
  v29 = 1;
  v30 = CFSTR("embedding.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&v31, &v29, 1);
  v37 = 4;
  std::map<long,__CFString const*>::map[abi:ne180100](v38, (uint64_t)&v31);
  v27 = 1;
  v28 = CFSTR("embedding.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)v15, &v27, 1);
  v39 = 12;
  std::map<long,__CFString const*>::map[abi:ne180100](v40, (uint64_t)v15);
  v25 = 1;
  v26 = CFSTR("embedding.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)v13, &v25, 1);
  v41 = 13;
  std::map<long,__CFString const*>::map[abi:ne180100](v42, (uint64_t)v13);
  v23 = 1;
  v24 = CFSTR("embedding.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)v11, &v23, 1);
  v43 = 29;
  std::map<long,__CFString const*>::map[abi:ne180100](v44, (uint64_t)v11);
  v21 = 1;
  v22 = CFSTR("embedding.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)v9, &v21, 1);
  v45 = 19;
  std::map<long,__CFString const*>::map[abi:ne180100](v46, (uint64_t)v9);
  v19 = 1;
  v20 = CFSTR("embedding.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)v7, &v19, 1);
  v47 = 25;
  std::map<long,__CFString const*>::map[abi:ne180100](v48, (uint64_t)v7);
  std::map<NLLanguageID,std::map<long,__CFString const*>>::map[abi:ne180100]((uint64_t)v2, &v35, 7);
  for (i = 0; i != -28; i -= 4)
    std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v48[i], (_QWORD *)v48[i + 1]);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)v7, v8);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)v9, v10);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)v11, v12);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)v13, v14);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)v15, v16);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v31, v32);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)v17, v18);
  v33 = 1;
  v34 = CFSTR("bilm.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)v17, &v33, 1);
  v35 = 10;
  std::map<long,__CFString const*>::map[abi:ne180100](v36, (uint64_t)v17);
  v29 = 1;
  v30 = CFSTR("bilm.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&v31, &v29, 1);
  v37 = 4;
  std::map<long,__CFString const*>::map[abi:ne180100](v38, (uint64_t)&v31);
  v27 = 1;
  v28 = CFSTR("bilm.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)v15, &v27, 1);
  v39 = 12;
  std::map<long,__CFString const*>::map[abi:ne180100](v40, (uint64_t)v15);
  v25 = 1;
  v26 = CFSTR("bilm.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)v13, &v25, 1);
  v41 = 29;
  std::map<long,__CFString const*>::map[abi:ne180100](v42, (uint64_t)v13);
  v23 = 1;
  v24 = CFSTR("bilm.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)v11, &v23, 1);
  v43 = 19;
  std::map<long,__CFString const*>::map[abi:ne180100](v44, (uint64_t)v11);
  v21 = 1;
  v22 = CFSTR("bilm.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)v9, &v21, 1);
  v45 = 13;
  std::map<long,__CFString const*>::map[abi:ne180100](v46, (uint64_t)v9);
  v19 = 1;
  v20 = CFSTR("bilm.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)v7, &v19, 1);
  v47 = 25;
  std::map<long,__CFString const*>::map[abi:ne180100](v48, (uint64_t)v7);
  std::map<NLLanguageID,std::map<long,__CFString const*>>::map[abi:ne180100]((uint64_t)this + 32, &v35, 7);
  for (j = 0; j != -28; j -= 4)
    std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v48[j], (_QWORD *)v48[j + 1]);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)v7, v8);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)v9, v10);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)v11, v12);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)v13, v14);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)v15, v16);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v31, v32);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)v17, v18);
  v33 = 1;
  v34 = CFSTR("sentence.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)v17, &v33, 1);
  v35 = 10;
  std::map<long,__CFString const*>::map[abi:ne180100](v36, (uint64_t)v17);
  v29 = 1;
  v30 = CFSTR("sentence.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&v31, &v29, 1);
  v37 = 4;
  std::map<long,__CFString const*>::map[abi:ne180100](v38, (uint64_t)&v31);
  v27 = 1;
  v28 = CFSTR("sentence.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)v15, &v27, 1);
  v39 = 12;
  std::map<long,__CFString const*>::map[abi:ne180100](v40, (uint64_t)v15);
  v25 = 1;
  v26 = CFSTR("sentence.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)v13, &v25, 1);
  v41 = 29;
  std::map<long,__CFString const*>::map[abi:ne180100](v42, (uint64_t)v13);
  v23 = 1;
  v24 = CFSTR("sentence.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)v11, &v23, 1);
  v43 = 19;
  std::map<long,__CFString const*>::map[abi:ne180100](v44, (uint64_t)v11);
  v21 = 1;
  v22 = CFSTR("sentence.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)v9, &v21, 1);
  v45 = 13;
  std::map<long,__CFString const*>::map[abi:ne180100](v46, (uint64_t)v9);
  v19 = 1;
  v20 = CFSTR("sentence.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)v7, &v19, 1);
  v47 = 25;
  std::map<long,__CFString const*>::map[abi:ne180100](v48, (uint64_t)v7);
  std::map<NLLanguageID,std::map<long,__CFString const*>>::map[abi:ne180100]((uint64_t)this + 56, &v35, 7);
  for (k = 0; k != -28; k -= 4)
    std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v48[k], (_QWORD *)v48[k + 1]);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)v7, v8);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)v9, v10);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)v11, v12);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)v13, v14);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)v15, v16);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v31, v32);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)v17, v18);
  v31 = 1;
  v32 = CFSTR("similarity.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)v17, &v31, 1);
  v35 = 10;
  std::map<long,__CFString const*>::map[abi:ne180100](v36, (uint64_t)v17);
  std::map<NLLanguageID,std::map<long,__CFString const*>>::map[abi:ne180100]((uint64_t)this + 80, &v35, 1);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)v36, (_QWORD *)v36[1]);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)v17, v18);
  return this;
}

void sub_191CB7250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;

  v36 = v32;
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy(v36, *(_QWORD **)(v35 + 208));
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&a30, *(_QWORD **)(v35 + 40));
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy(v34, (_QWORD *)v30[8]);
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy(v33, (_QWORD *)v30[5]);
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy(v31, (_QWORD *)v30[2]);
  v38 = *v30;
  *v30 = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  _Unwind_Resume(a1);
}

void sub_191CB7510()
{
  JUMPOUT(0x191CB7498);
}

void sub_191CB7520()
{
  JUMPOUT(0x191CB74A4);
}

void sub_191CB7538()
{
  JUMPOUT(0x191CB74E4);
}

void sub_191CB7540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19, uint64_t a20,uint64_t a21,char a22,_QWORD *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;
  _QWORD **v46;
  uint64_t i;

  for (i = 0; i != -224; i -= 32)
    std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy(v45 + i + 200, *(_QWORD **)(v45 + i + 208));
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&a14, a15);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&a18, a19);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&a22, a23);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&a26, v46[1]);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&a45, v46[20]);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&a30, v46[5]);
  JUMPOUT(0x191CB74F0);
}

void sub_191CB764C()
{
  JUMPOUT(0x191CB75FCLL);
}

void sub_191CB765C()
{
  JUMPOUT(0x191CB7608);
}

void sub_191CB7674()
{
  JUMPOUT(0x191CB74F0);
}

CoreNLP::EmbeddingManager *CoreNLP::EmbeddingManager::EmbeddingManager(CoreNLP::EmbeddingManager *this, const __CFDictionary *a2)
{
  char *v4;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  const void *Value;
  const void *v9;
  CoreNLP::WordEmbedding *v10;
  const __CFString *v11;
  const __CFData *v12;
  BOOL Model;
  uint64_t v14;
  std::runtime_error *exception;
  const __CFNumber *v17;
  const void *v18;
  const void *v19;
  void *v20;
  uint64_t v21;
  const __CFLocale *v22;
  const __CFNumber *v23;
  uint64_t v24;
  CoreNLP *v25;
  const __CFLocale *v26;
  unsigned int LocaleLanguage;
  const void *v28;
  const void *v29;
  const __CFBoolean *v30;
  int v31;
  char *v32;
  int *v33;
  int v34;
  BOOL v35;
  char **v36;
  char *v37;
  int *v38;
  int v39;
  BOOL v40;
  char **v41;
  const __CFString *v42;
  const __CFNumber *v43;
  _QWORD *v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  BOOL v49;
  _QWORD *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  BOOL v56;
  _QWORD *v57;
  BOOL v58;
  _BOOL4 v59;
  const __CFString *v60;
  const void *v61;
  const void *v62;
  const __CFBoolean *v63;
  int v64;
  BOOL v65;
  const __CFString *v66;
  unint64_t v67;
  CoreNLP *v68;
  const __CFLocale *v69;
  uint64_t v70;
  uint64_t v71;
  const __CFString *v72;
  CoreNLP::Resource *v73;
  uint64_t v74;
  uint64_t v75;
  CFTypeRef v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  CoreNLP *v80;
  const __CFLocale *v81;
  size_t v82;
  char v83;
  size_t v84;
  uint64_t v85;
  size_t v86;
  __int128 *v87;
  __int128 *p_valuePtr;
  uint64_t v89;
  uint64_t v90;
  CFTypeRef v91;
  const __CFString *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  CFTypeRef v97;
  unint64_t v98;
  uint64_t v99;
  CoreNLP::Resource *v100;
  CoreNLP::Resource *v101;
  uint64_t v102;
  std::runtime_error *v103;
  _BOOL8 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  std::runtime_error *v112;
  const __CFString *v113;
  std::runtime_error *v114;
  _BOOL8 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  std::runtime_error *v123;
  std::runtime_error *v124;
  const __CFString *v125;
  std::runtime_error *v126;
  const __CFString *v127;
  std::runtime_error *v128;
  std::runtime_error *v129;
  std::runtime_error *v130;
  const __CFString *v131;
  __CFString *v132;
  unsigned int v133;
  _QWORD *v134;
  unsigned int v135;
  _QWORD *v136;
  CoreNLP::Resource *v137;
  _QWORD *v138;
  CFTypeRef cf1;
  _QWORD *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  __CFString *v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  const __CFString *v155;
  uint64_t v156;
  const __CFString *v157;
  uint64_t v158;
  const __CFString *v159;
  uint64_t v160;
  const __CFString *v161;
  uint64_t v162;
  const __CFString *v163;
  uint64_t v164;
  const __CFString *v165;
  __int128 buf;
  uint64_t v167;
  __int128 valuePtr;
  _QWORD *v169;
  int v170;
  uint64_t v171[3];
  int v172;
  uint64_t v173[3];
  int v174;
  uint64_t v175[3];
  int v176;
  uint64_t v177[3];
  int v178;
  uint64_t v179[3];
  int v180;
  uint64_t v181[7];

  v181[4] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  v4 = (char *)this + 8;
  v143 = 1;
  v144 = CFSTR("embedding.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&v145, &v143, 1);
  LODWORD(valuePtr) = 10;
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t *)&valuePtr + 1, (uint64_t)&v145);
  v164 = 1;
  v165 = CFSTR("embedding.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&buf, &v164, 1);
  v170 = 4;
  std::map<long,__CFString const*>::map[abi:ne180100](v171, (uint64_t)&buf);
  v162 = 1;
  v163 = CFSTR("embedding.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&v141, &v162, 1);
  v172 = 12;
  std::map<long,__CFString const*>::map[abi:ne180100](v173, (uint64_t)&v141);
  v160 = 1;
  v161 = CFSTR("embedding.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&cf1, &v160, 1);
  v174 = 13;
  std::map<long,__CFString const*>::map[abi:ne180100](v175, (uint64_t)&cf1);
  v158 = 1;
  v159 = CFSTR("embedding.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&v137, &v158, 1);
  v176 = 29;
  std::map<long,__CFString const*>::map[abi:ne180100](v177, (uint64_t)&v137);
  v156 = 1;
  v157 = CFSTR("embedding.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&v135, &v156, 1);
  v178 = 19;
  std::map<long,__CFString const*>::map[abi:ne180100](v179, (uint64_t)&v135);
  v154 = 1;
  v155 = CFSTR("embedding.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&v133, &v154, 1);
  v180 = 25;
  std::map<long,__CFString const*>::map[abi:ne180100](v181, (uint64_t)&v133);
  std::map<NLLanguageID,std::map<long,__CFString const*>>::map[abi:ne180100]((uint64_t)v4, (int *)&valuePtr, 7);
  for (i = 0; i != -28; i -= 4)
    std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v181[i], (_QWORD *)v181[i + 1]);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v133, v134);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v135, v136);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v137, v138);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&cf1, v140);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v141, v142);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&buf, *((_QWORD **)&buf + 1));
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v145, *((_QWORD **)&v145 + 1));
  v150 = unk_1E2DF4BD0;
  v151 = xmmword_1E2DF4BE0;
  v152 = unk_1E2DF4BF0;
  v153 = xmmword_1E2DF4C00;
  v146 = unk_1E2DF4B90;
  v147 = xmmword_1E2DF4BA0;
  v148 = unk_1E2DF4BB0;
  v149 = xmmword_1E2DF4BC0;
  v145 = xmmword_1E2DF4B80;
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&buf, (uint64_t *)&v145, 9);
  LODWORD(valuePtr) = 10;
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t *)&valuePtr + 1, (uint64_t)&buf);
  v164 = 1;
  v165 = CFSTR("bilm.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&v141, &v164, 1);
  v170 = 4;
  std::map<long,__CFString const*>::map[abi:ne180100](v171, (uint64_t)&v141);
  v162 = 1;
  v163 = CFSTR("bilm.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&cf1, &v162, 1);
  v172 = 12;
  std::map<long,__CFString const*>::map[abi:ne180100](v173, (uint64_t)&cf1);
  v160 = 1;
  v161 = CFSTR("bilm.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&v137, &v160, 1);
  v174 = 29;
  std::map<long,__CFString const*>::map[abi:ne180100](v175, (uint64_t)&v137);
  v158 = 1;
  v159 = CFSTR("bilm.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&v135, &v158, 1);
  v176 = 19;
  std::map<long,__CFString const*>::map[abi:ne180100](v177, (uint64_t)&v135);
  v156 = 1;
  v157 = CFSTR("bilm.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&v133, &v156, 1);
  v178 = 13;
  std::map<long,__CFString const*>::map[abi:ne180100](v179, (uint64_t)&v133);
  v154 = 1;
  v155 = CFSTR("bilm.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&v143, &v154, 1);
  v180 = 25;
  std::map<long,__CFString const*>::map[abi:ne180100](v181, (uint64_t)&v143);
  std::map<NLLanguageID,std::map<long,__CFString const*>>::map[abi:ne180100]((uint64_t)this + 32, (int *)&valuePtr, 7);
  for (j = 0; j != -28; j -= 4)
    std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v181[j], (_QWORD *)v181[j + 1]);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v143, v144);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v133, v134);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v135, v136);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v137, v138);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&cf1, v140);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v141, v142);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&buf, *((_QWORD **)&buf + 1));
  v145 = xmmword_1E2DF4C10;
  v146 = unk_1E2DF4C20;
  v147 = xmmword_1E2DF4C30;
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&buf, (uint64_t *)&v145, 3);
  LODWORD(valuePtr) = 10;
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t *)&valuePtr + 1, (uint64_t)&buf);
  v164 = 1;
  v165 = CFSTR("sentence.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&v141, &v164, 1);
  v170 = 4;
  std::map<long,__CFString const*>::map[abi:ne180100](v171, (uint64_t)&v141);
  v162 = 1;
  v163 = CFSTR("sentence.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&cf1, &v162, 1);
  v172 = 12;
  std::map<long,__CFString const*>::map[abi:ne180100](v173, (uint64_t)&cf1);
  v160 = 1;
  v161 = CFSTR("sentence.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&v137, &v160, 1);
  v174 = 29;
  std::map<long,__CFString const*>::map[abi:ne180100](v175, (uint64_t)&v137);
  v158 = 1;
  v159 = CFSTR("sentence.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&v135, &v158, 1);
  v176 = 19;
  std::map<long,__CFString const*>::map[abi:ne180100](v177, (uint64_t)&v135);
  v156 = 1;
  v157 = CFSTR("sentence.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&v133, &v156, 1);
  v178 = 13;
  std::map<long,__CFString const*>::map[abi:ne180100](v179, (uint64_t)&v133);
  v154 = 1;
  v155 = CFSTR("sentence.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&v143, &v154, 1);
  v180 = 25;
  std::map<long,__CFString const*>::map[abi:ne180100](v181, (uint64_t)&v143);
  std::map<NLLanguageID,std::map<long,__CFString const*>>::map[abi:ne180100]((uint64_t)this + 56, (int *)&valuePtr, 7);
  for (k = 0; k != -28; k -= 4)
    std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v181[k], (_QWORD *)v181[k + 1]);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v143, v144);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v133, v134);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v135, v136);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v137, v138);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&cf1, v140);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v141, v142);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&buf, *((_QWORD **)&buf + 1));
  *(_QWORD *)&buf = 1;
  *((_QWORD *)&buf + 1) = CFSTR("similarity.dat");
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t)&v145, (uint64_t *)&buf, 1);
  LODWORD(valuePtr) = 10;
  std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t *)&valuePtr + 1, (uint64_t)&v145);
  std::map<NLLanguageID,std::map<long,__CFString const*>>::map[abi:ne180100]((uint64_t)this + 80, (int *)&valuePtr, 1);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&valuePtr + 8, v169);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v145, *((_QWORD **)&v145 + 1));
  Value = CFDictionaryGetValue(a2, kNLStringEmbeddingModelType[0]);
  v9 = Value;
  if (!Value || CFEqual(Value, kNLStringEmbeddingModelTypeCompressedWordEmbedding[0]))
  {
    v10 = (CoreNLP::WordEmbedding *)operator new();
    CoreNLP::WordEmbedding::WordEmbedding(v10);
    v11 = (const __CFString *)CFDictionaryGetValue(a2, kNLStringEmbeddingModelPath[0]);
    v12 = (const __CFData *)CFDictionaryGetValue(a2, kNLStringEmbeddingModelData[0]);
    if (v11)
    {
      applesauce::CF::convert_to<std::string,0>(v11, (uint64_t)&valuePtr);
      Model = CoreNLP::WordEmbedding::loadModel(v10, (uint64_t)&valuePtr);
      if (SHIBYTE(v169) < 0)
        operator delete((void *)valuePtr);
      if (Model)
        goto LABEL_13;
LABEL_18:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unable to locate model");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (v12)
    {
      if (!CoreNLP::WordEmbedding::loadModel((const void **)v10, v12))
        goto LABEL_18;
    }
    else
    {
      v22 = (const __CFLocale *)CFDictionaryGetValue(a2, kNLStringEmbeddingModelLocale[0]);
      *(_QWORD *)&valuePtr = 1;
      if (CFDictionaryContainsKey(a2, kNLStringEmbeddingModelVersion[0]))
      {
        v23 = (const __CFNumber *)CFDictionaryGetValue(a2, kNLStringEmbeddingModelVersion[0]);
        CFNumberGetValue(v23, kCFNumberCFIndexType, &valuePtr);
        v24 = valuePtr;
      }
      else
      {
        v24 = 1;
      }
      v60 = (const __CFString *)CoreNLP::EmbeddingManager::systemAssetName(this, kNLStringEmbeddingModelTypeCompressedWordEmbedding[0], v24, v22);
      if (!CoreNLP::WordEmbedding::loadModel(v10, v22, v60))
        goto LABEL_18;
    }
LABEL_13:
    v14 = *(_QWORD *)this;
    *(_QWORD *)this = v10;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return this;
  }
  if (!CFEqual(v9, kNLStringEmbeddingModelTypeContextualWordEmbedding[0]))
  {
    if (!CFEqual(v9, kNLStringEmbeddingModelTypeSentenceEmbedding[0]))
    {
      v112 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v112, "Unsupported embedding model type");
      __cxa_throw(v112, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v25 = (CoreNLP *)CFDictionaryGetValue(a2, kNLStringEmbeddingModelLocale[0]);
    v141 = (uint64_t)v25;
    LocaleLanguage = CoreNLP::getLocaleLanguage(v25, v26);
    v135 = LocaleLanguage;
    v133 = 1;
    v28 = CFDictionaryGetValue(a2, kNLStringEmbeddingContextualModelArchitecture[0]);
    v29 = v28;
    if (v28)
      CFRetain(v28);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf1, v29);
    if (cf1 && CFEqual(cf1, kNLStringEmbeddingMultilingualBERT[0]))
    {
      if (CFDictionaryContainsKey(a2, kNLStringEmbeddingModelUseANE[0]))
      {
        v30 = (const __CFBoolean *)CFDictionaryGetValue(a2, kNLStringEmbeddingModelUseANE[0]);
        v31 = CFBooleanGetValue(v30);
      }
      else
      {
        v31 = 0;
      }
      std::string::basic_string[abi:ne180100]<0>(&valuePtr, "");
      if (!CFDictionaryContainsKey(a2, kNLStringEmbeddingModelPath[0]))
      {
        v115 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
        if (v115)
          CoreNLP::EmbeddingManager::EmbeddingManager(v115, v116, v117, v118, v119, v120, v121, v122);
        v123 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v123, "Unable to locate mBERT.bundle");
        __cxa_throw(v123, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v92 = (const __CFString *)CFDictionaryGetValue(a2, kNLStringEmbeddingModelPath[0]);
      applesauce::CF::convert_to<std::string,0>(v92, (uint64_t)&v145);
      if (SHIBYTE(v169) < 0)
        operator delete((void *)valuePtr);
      valuePtr = v145;
      v169 = (_QWORD *)v146;
      v93 = operator new();
      CoreNLP::BERTSentenceEmbedding::BERTSentenceEmbedding(v93, &valuePtr, v31 != 0);
      v94 = *(_QWORD *)this;
      *(_QWORD *)this = v93;
      if (v94)
        (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
    }
    else
    {
      if (LocaleLanguage != 10)
      {
        std::make_unique[abi:ne180100]<CoreNLP::SentenceEmbedding,__CFLocale const*&,char const(&)[1],char const(&)[1],NLLanguageID &,int &>(&v141, "", "", &v135, &v133, (uint64_t *)&valuePtr);
        v77 = valuePtr;
        *(_QWORD *)&valuePtr = 0;
        v78 = *(_QWORD *)this;
        *(_QWORD *)this = v77;
        if (v78)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
          v79 = valuePtr;
          *(_QWORD *)&valuePtr = 0;
          if (v79)
            (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
        }
LABEL_181:
        v91 = cf1;
        if (!cf1)
          return this;
        goto LABEL_159;
      }
      v32 = (char *)*((_QWORD *)this + 8);
      if (!v32)
        goto LABEL_50;
      v33 = (int *)((char *)this + 64);
      do
      {
        v34 = *((_DWORD *)v32 + 8);
        v35 = v34 < 10;
        if (v34 >= 10)
          v36 = (char **)v32;
        else
          v36 = (char **)(v32 + 8);
        if (!v35)
          v33 = (int *)v32;
        v32 = *v36;
      }
      while (*v36);
      if (v33 == (int *)((char *)this + 64) || v33[8] >= 11)
LABEL_50:
        v33 = (int *)((char *)this + 64);
      v37 = (char *)*((_QWORD *)this + 11);
      if (!v37)
        goto LABEL_61;
      v38 = (int *)((char *)this + 88);
      do
      {
        v39 = *((_DWORD *)v37 + 8);
        v40 = v39 < 10;
        if (v39 >= 10)
          v41 = (char **)v37;
        else
          v41 = (char **)(v37 + 8);
        if (!v40)
          v38 = (int *)v37;
        v37 = *v41;
      }
      while (*v41);
      if (v38 == (int *)((char *)this + 88) || v38[8] >= 11)
LABEL_61:
        v38 = (int *)((char *)this + 88);
      v42 = *(const __CFString **)(*((_QWORD *)v33 + 5) + 40);
      v132 = *(__CFString **)(*((_QWORD *)v38 + 5) + 40);
      if (CFDictionaryContainsKey(a2, kNLStringEmbeddingModelVersion[0]))
      {
        v43 = (const __CFNumber *)CFDictionaryGetValue(a2, kNLStringEmbeddingModelVersion[0]);
        *(_QWORD *)&valuePtr = 0;
        CFNumberGetValue(v43, kCFNumberCFIndexType, &valuePtr);
        v46 = (_QWORD *)*((_QWORD *)v33 + 6);
        v45 = (char *)(v33 + 12);
        v44 = v46;
        if (!v46)
          goto LABEL_73;
        v47 = v45;
        do
        {
          v48 = v44[4];
          v49 = v48 < (uint64_t)valuePtr;
          if (v48 >= (uint64_t)valuePtr)
            v50 = v44;
          else
            v50 = v44 + 1;
          if (!v49)
            v47 = (char *)v44;
          v44 = (_QWORD *)*v50;
        }
        while (*v50);
        if (v47 == v45 || (uint64_t)valuePtr < *((_QWORD *)v47 + 4))
LABEL_73:
          v47 = v45;
        v53 = (_QWORD *)*((_QWORD *)v38 + 6);
        v52 = (char *)(v38 + 12);
        v51 = v53;
        if (!v53)
          goto LABEL_84;
        v54 = v52;
        do
        {
          v55 = v51[4];
          v56 = v55 < (uint64_t)valuePtr;
          if (v55 >= (uint64_t)valuePtr)
            v57 = v51;
          else
            v57 = v51 + 1;
          if (!v56)
            v54 = (char *)v51;
          v51 = (_QWORD *)*v57;
        }
        while (*v57);
        if (v54 == v52 || (uint64_t)valuePtr < *((_QWORD *)v54 + 4))
LABEL_84:
          v54 = v52;
        if (v47 == v45)
        {
          v124 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v124, "Unsupported version");
          __cxa_throw(v124, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v58 = v54 == v52;
        v59 = v54 != v52;
        if (!v58)
          v132 = (__CFString *)*((_QWORD *)v54 + 5);
        v42 = (const __CFString *)*((_QWORD *)v47 + 5);
        CFNumberGetValue(v43, kCFNumberSInt32Type, &v133);
      }
      else
      {
        v59 = 1;
      }
      valuePtr = 0uLL;
      v169 = 0;
      if (v133 == 1)
      {
        CoreNLP::Resource::getAssetResource(v25, (const __CFLocale *)CFSTR("Embedding"), v42, 0, &buf);
        if (!(_QWORD)buf)
        {
          v127 = (const __CFString *)MEMORY[0x19401E1F0](v25);
          CoreNLP::getUTF8StringFromCFString(v127, &v145);
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            CoreNLP::EmbeddingManager::EmbeddingManager();
          v128 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v128, "Unable to locate sentence embedding model");
          __cxa_throw(v128, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        CoreNLP::Resource::path((CoreNLP **)buf, &v145);
        valuePtr = v145;
        v169 = (_QWORD *)v146;
        std::unique_ptr<CoreNLP::Resource>::reset[abi:ne180100]((CoreNLP::Resource **)&buf, 0);
      }
      std::string::basic_string[abi:ne180100]<0>(&v145, "");
      if (v59)
      {
        CoreNLP::Resource::getAssetResource(v25, (const __CFLocale *)CFSTR("Embedding"), v132, 0, &v137);
        if (!v137)
        {
          v129 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v129, "Unable to locate similarity model");
          __cxa_throw(v129, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        CoreNLP::Resource::path((CoreNLP **)v137, &buf);
        if (SBYTE7(v146) < 0)
          operator delete((void *)v145);
        v145 = buf;
        *(_QWORD *)&v146 = v167;
        std::unique_ptr<CoreNLP::Resource>::reset[abi:ne180100](&v137, 0);
      }
      v95 = operator new();
      CoreNLP::SentenceEmbedding::SentenceEmbedding(v95, v141, &valuePtr, &v145, v135, v133);
      v96 = *(_QWORD *)this;
      *(_QWORD *)this = v95;
      if (v96)
        (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
      if (SBYTE7(v146) < 0)
        operator delete((void *)v145);
    }
    if (SHIBYTE(v169) < 0)
      operator delete((void *)valuePtr);
    goto LABEL_181;
  }
  v141 = 0;
  if (getModelVersionForContextualEmbedding(__CFDictionary const*)::onceToken != -1)
    dispatch_once(&getModelVersionForContextualEmbedding(__CFDictionary const*)::onceToken, &__block_literal_global_8);
  *(_QWORD *)&valuePtr = 1;
  if (CFDictionaryContainsKey(a2, kNLStringEmbeddingModelVersion[0]))
  {
    v17 = (const __CFNumber *)CFDictionaryGetValue(a2, kNLStringEmbeddingModelVersion[0]);
    CFNumberGetValue(v17, kCFNumberCFIndexType, &valuePtr);
  }
  v18 = CFDictionaryGetValue(a2, kNLStringEmbeddingContextualModelArchitecture[0]);
  v19 = v18;
  if (v18)
    CFRetain(v18);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v145, v19);
  if ((_QWORD)v145)
  {
    v20 = (void *)objc_msgSend((id)getModelVersionForContextualEmbedding(__CFDictionary const*)::mappingArchitectureToVersion, "objectForKey:");
    if (v20)
    {
      v21 = objc_msgSend(v20, "unsignedIntValue");
      *(_QWORD *)&valuePtr = v21;
    }
    else
    {
      v21 = valuePtr;
    }
    if ((_QWORD)v145)
      CFRelease((CFTypeRef)v145);
  }
  else
  {
    v21 = valuePtr;
  }
  v141 = v21;
  v61 = CFDictionaryGetValue(a2, kNLStringEmbeddingContextualModelArchitecture[0]);
  v62 = v61;
  if (v61)
    CFRetain(v61);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf1, v62);
  if (CFDictionaryContainsKey(a2, kNLStringEmbeddingModelUseANE[0]))
  {
    v63 = (const __CFBoolean *)CFDictionaryGetValue(a2, kNLStringEmbeddingModelUseANE[0]);
    v64 = CFBooleanGetValue(v63);
  }
  else
  {
    v64 = 0;
  }
  v65 = v64 != 0;
  std::string::basic_string[abi:ne180100]<0>(&valuePtr, "");
  if (CFDictionaryContainsKey(a2, kNLStringEmbeddingModelPath[0]))
  {
    v66 = (const __CFString *)CFDictionaryGetValue(a2, kNLStringEmbeddingModelPath[0]);
    applesauce::CF::convert_to<std::string,0>(v66, (uint64_t)&v145);
    if (SHIBYTE(v169) < 0)
      operator delete((void *)valuePtr);
    valuePtr = v145;
    v169 = (_QWORD *)v146;
  }
  v67 = v141;
  if (v141 != 1)
  {
    if (cf1)
    {
      if (CFEqual(cf1, kNLStringEmbeddingELMo[0]))
        goto LABEL_107;
      v67 = v141;
      v76 = cf1;
    }
    else
    {
      v76 = 0;
    }
    if (requestedEnglishBERT(NSString *,long,BOOL *)::onceToken != -1)
      dispatch_once(&requestedEnglishBERT(NSString *,long,BOOL *)::onceToken, &__block_literal_global_40);
    if (v67 <= 0xB)
    {
      if (((1 << v67) & 0x514) != 0)
      {
LABEL_129:
        v80 = (CoreNLP *)CFDictionaryGetValue(a2, kNLStringEmbeddingModelLocale[0]);
        LODWORD(v137) = 0;
        LODWORD(v137) = CoreNLP::getLocaleLanguage(v80, v81);
        v82 = HIBYTE(v169);
        v83 = HIBYTE(v169);
        v84 = *((_QWORD *)&valuePtr + 1);
        if (SHIBYTE(v169) >= 0)
          v85 = HIBYTE(v169);
        else
          v85 = *((_QWORD *)&valuePtr + 1);
        if (!v85)
        {
          CoreNLP::Resource::getAssetResource(v80, (const __CFLocale *)CFSTR("LanguageModel"), CFSTR("en.lm"), (const __CFString *)1, &buf);
          if (!(_QWORD)buf)
          {
            v125 = (const __CFString *)MEMORY[0x19401E1F0](v80);
            CoreNLP::getUTF8StringFromCFString(v125, &v145);
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              CoreNLP::EmbeddingManager::EmbeddingManager();
            v126 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v126, "Unable to locate model");
            __cxa_throw(v126, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          CoreNLP::Resource::path((CoreNLP **)buf, &v145);
          if (SHIBYTE(v169) < 0)
            operator delete((void *)valuePtr);
          valuePtr = v145;
          v169 = (_QWORD *)v146;
          std::unique_ptr<CoreNLP::Resource>::reset[abi:ne180100]((CoreNLP::Resource **)&buf, 0);
          v82 = HIBYTE(v169);
          v84 = *((_QWORD *)&valuePtr + 1);
          v83 = HIBYTE(v169);
        }
        if (v83 >= 0)
          v86 = v82;
        else
          v86 = v84;
        std::string::basic_string[abi:ne180100]((uint64_t)&v145, v86 + 13);
        if ((SBYTE7(v146) & 0x80u) == 0)
          v87 = &v145;
        else
          v87 = (__int128 *)v145;
        if (v86)
        {
          if (SHIBYTE(v169) >= 0)
            p_valuePtr = &valuePtr;
          else
            p_valuePtr = (__int128 *)valuePtr;
          memmove(v87, p_valuePtr, v86);
        }
        strcpy((char *)v87 + v86, "/unilm.bundle");
        if (SHIBYTE(v169) < 0)
          operator delete((void *)valuePtr);
        valuePtr = v145;
        v169 = (_QWORD *)v146;
        if (v65)
          std::make_unique[abi:ne180100]<CoreNLP::BERTANEEmbedding,std::string &,NLLanguageID &,long &>((uint64_t)&valuePtr, (unsigned int *)&v137, (unsigned int *)&v141, (uint64_t *)&v145);
        else
          std::make_unique[abi:ne180100]<CoreNLP::BERTEmbedding,std::string &,NLLanguageID &,long &>((uint64_t)&valuePtr, (unsigned int *)&v137, (unsigned int *)&v141, (uint64_t *)&v145);
LABEL_153:
        v89 = v145;
        *(_QWORD *)&v145 = 0;
        v90 = *(_QWORD *)this;
        *(_QWORD *)this = v89;
        if (!v90)
          goto LABEL_156;
        (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
        v75 = v145;
        *(_QWORD *)&v145 = 0;
        if (!v75)
          goto LABEL_156;
LABEL_155:
        (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
        goto LABEL_156;
      }
      if (((1 << v67) & 0xA28) != 0)
      {
        v65 = 1;
        goto LABEL_129;
      }
    }
    if (objc_msgSend((id)requestedEnglishBERT(NSString *,long,BOOL *)::englishBERT, "containsObject:", v76))goto LABEL_129;
    v97 = cf1;
    v98 = v141;
    if (requestedMultilingualBERT(NSString *,long)::onceToken != -1)
      dispatch_once(&requestedMultilingualBERT(NSString *,long)::onceToken, &__block_literal_global_43);
    if ((v98 > 0xD || ((1 << v98) & 0x30C0) == 0)
      && !objc_msgSend((id)requestedMultilingualBERT(NSString *,long)::multilingualBERT, "containsObject:", v97))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v102 = v141;
        v137 = (CoreNLP::Resource *)applesauce::CF::StringRef::operator->(&cf1);
        applesauce::CF::StringRef_proxy::pretty_print((const __CFString ***)&v137, &v145);
        CoreNLP::EmbeddingManager::EmbeddingManager((char *)&v145, (uint8_t *)&buf, v102);
      }
      v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v103, "Unsupported embedding model version/architecture");
LABEL_207:
      __cxa_throw(v103, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v99 = HIBYTE(v169);
    if (SHIBYTE(v169) < 0)
      v99 = *((_QWORD *)&valuePtr + 1);
    if (!v99)
    {
      if (CFDictionaryContainsKey(a2, kNLStringEmbeddingModelLocale[0])
        && (v100 = (CoreNLP::Resource *)CFDictionaryGetValue(a2, kNLStringEmbeddingModelLocale[0]), (v101 = v100) != 0))
      {
        CoreNLP::Resource::getAssetResource(v100, (const __CFLocale *)CFSTR("Embedding"), CFSTR("mBERT.bundle"), 0, &buf);
        if ((_QWORD)buf)
        {
          CoreNLP::Resource::path((CoreNLP **)buf, &v145);
          if (SHIBYTE(v169) < 0)
            operator delete((void *)valuePtr);
          valuePtr = v145;
          v169 = (_QWORD *)v146;
          std::unique_ptr<CoreNLP::Resource>::reset[abi:ne180100]((CoreNLP::Resource **)&buf, 0);
          goto LABEL_197;
        }
        v131 = (const __CFString *)MEMORY[0x19401E1F0](v101);
        CoreNLP::getUTF8StringFromCFString(v131, &v145);
      }
      else
      {
        *(_QWORD *)&buf = 0;
        std::string::basic_string[abi:ne180100]<0>(&v145, "unknown");
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        CoreNLP::EmbeddingManager::EmbeddingManager();
      v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v130, "Unable to locate mBERT.bundle");
      __cxa_throw(v130, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
LABEL_197:
    LODWORD(buf) = 1;
    if (v64)
      std::make_unique[abi:ne180100]<CoreNLP::BERTANEEmbedding,std::string &,NLLanguageID,long &>((uint64_t)&valuePtr, (unsigned int *)&buf, (unsigned int *)&v141, (uint64_t *)&v145);
    else
      std::make_unique[abi:ne180100]<CoreNLP::BERTEmbedding,std::string &,NLLanguageID,long &>((uint64_t)&valuePtr, (unsigned int *)&buf, (unsigned int *)&v141, (uint64_t *)&v145);
    goto LABEL_153;
  }
LABEL_107:
  if (v64)
  {
    v104 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v104)
      CoreNLP::EmbeddingManager::EmbeddingManager(v104, v105, v106, v107, v108, v109, v110, v111);
    v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v103, "Unable to load ANE version of the model");
    goto LABEL_207;
  }
  v68 = (CoreNLP *)CFDictionaryGetValue(a2, kNLStringEmbeddingModelLocale[0]);
  v70 = CoreNLP::getLocaleLanguage(v68, v69);
  v71 = HIBYTE(v169);
  if (SHIBYTE(v169) < 0)
    v71 = *((_QWORD *)&valuePtr + 1);
  if (!v71)
  {
    v72 = (const __CFString *)CoreNLP::EmbeddingManager::systemAssetName(this, kNLStringEmbeddingModelTypeContextualWordEmbedding[0], v141, v68);
    CoreNLP::Resource::getAssetResource(v68, (const __CFLocale *)CFSTR("Embedding"), v72, 0, &buf);
    if (!(_QWORD)buf)
    {
      v113 = (const __CFString *)MEMORY[0x19401E1F0](v68);
      CoreNLP::getUTF8StringFromCFString(v113, &v145);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        CoreNLP::EmbeddingManager::EmbeddingManager();
      v114 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v114, "Unable to locate model");
      __cxa_throw(v114, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    CoreNLP::Resource::path((CoreNLP **)buf, &v145);
    if (SHIBYTE(v169) < 0)
      operator delete((void *)valuePtr);
    valuePtr = v145;
    v169 = (_QWORD *)v146;
    v73 = (CoreNLP::Resource *)buf;
    *(_QWORD *)&buf = 0;
    if (v73)
    {
      CoreNLP::Resource::~Resource(v73);
      MEMORY[0x19401E994]();
    }
  }
  v74 = operator new();
  CoreNLP::ContextualWordEmbedding::ContextualWordEmbedding(v74, &valuePtr, v70, v141);
  v75 = *(_QWORD *)this;
  *(_QWORD *)this = v74;
  if (v75)
    goto LABEL_155;
LABEL_156:
  if (SHIBYTE(v169) < 0)
    operator delete((void *)valuePtr);
  v91 = cf1;
  if (cf1)
LABEL_159:
    CFRelease(v91);
  return this;
}

void sub_191CB8E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,const void *a26)
{
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v31;

  __cxa_free_exception(v29);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(*(void **)(v28 + 32));
  applesauce::CF::StringRef::~StringRef(&a26);
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy(a9, (_QWORD *)v26[11]);
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy(a11, (_QWORD *)v26[8]);
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy(a12, (_QWORD *)v26[5]);
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy(v27, (_QWORD *)v26[2]);
  v31 = *v26;
  *v26 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::EmbeddingManager::systemAssetName(CoreNLP::EmbeddingManager *this, const __CFString *a2, uint64_t a3, const __CFLocale *a4)
{
  int LocaleLanguage;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  BOOL v15;
  uint64_t *v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  BOOL v22;
  _QWORD *v23;
  const __CFString *v25;
  std::runtime_error *v26;
  std::runtime_error *exception;
  uint64_t v28[3];

  if (!a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Missing locale");
LABEL_30:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LocaleLanguage = CoreNLP::getLocaleLanguage(a4, (const __CFLocale *)a2);
  v9 = (char *)this + 8;
  if (kNLStringEmbeddingModelTypeCompressedWordEmbedding[0] != a2)
    v9 = (char *)this + 32;
  v12 = *((_QWORD *)v9 + 1);
  v10 = v9 + 8;
  v11 = v12;
  if (!v12)
    goto LABEL_25;
  v13 = v10;
  do
  {
    v14 = *(_DWORD *)(v11 + 32);
    v15 = v14 < LocaleLanguage;
    if (v14 >= LocaleLanguage)
      v16 = (uint64_t *)v11;
    else
      v16 = (uint64_t *)(v11 + 8);
    if (!v15)
      v13 = (char *)v11;
    v11 = *v16;
  }
  while (*v16);
  if (v13 == v10 || LocaleLanguage < *((_DWORD *)v13 + 8))
  {
LABEL_25:
    v25 = (const __CFString *)MEMORY[0x19401E1F0](a4);
    CoreNLP::getUTF8StringFromCFString(v25, v28);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      CoreNLP::EmbeddingManager::systemAssetName();
    v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "Unsupported locale");
    __cxa_throw(v26, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v19 = (_QWORD *)*((_QWORD *)v13 + 6);
  v17 = v13 + 48;
  v18 = v19;
  if (!v19)
    goto LABEL_28;
  v20 = v17;
  do
  {
    v21 = v18[4];
    v22 = v21 < a3;
    if (v21 >= a3)
      v23 = v18;
    else
      v23 = v18 + 1;
    if (!v22)
      v20 = (char *)v18;
    v18 = (_QWORD *)*v23;
  }
  while (*v23);
  if (v20 == v17 || *((_QWORD *)v20 + 4) > a3)
  {
LABEL_28:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unsupported version");
    goto LABEL_30;
  }
  return *((_QWORD *)v20 + 5);
}

void sub_191CB96D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<CoreNLP::BERTEmbedding,std::string &,NLLanguageID &,long &>@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = operator new();
  result = CoreNLP::BERTEmbedding::BERTEmbedding(v8, a1, *a2, *a3);
  *a4 = v8;
  return result;
}

void sub_191CB9780(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10B3C40FE858EBELL);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<CoreNLP::BERTANEEmbedding,std::string &,NLLanguageID &,long &>@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = operator new();
  result = CoreNLP::BERTANEEmbedding::BERTANEEmbedding(v8, a1, *a2, *a3);
  *a4 = v8;
  return result;
}

void sub_191CB980C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10B3C40987FB485);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<CoreNLP::BERTEmbedding,std::string &,NLLanguageID,long &>@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = operator new();
  result = CoreNLP::BERTEmbedding::BERTEmbedding(v8, a1, *a2, *a3);
  *a4 = v8;
  return result;
}

void sub_191CB9898(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10B3C40FE858EBELL);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<CoreNLP::BERTANEEmbedding,std::string &,NLLanguageID,long &>@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = operator new();
  result = CoreNLP::BERTANEEmbedding::BERTANEEmbedding(v8, a1, *a2, *a3);
  *a4 = v8;
  return result;
}

void sub_191CB9924(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10B3C40987FB485);
  _Unwind_Resume(a1);
}

_QWORD *applesauce::CF::StringRef::operator->(_QWORD *result)
{
  std::runtime_error *exception;

  if (!*result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_191CB9994(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *applesauce::CF::StringRef_proxy::pretty_print@<X0>(const __CFString ***this@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v2;

  v2 = **this;
  if (v2)
    return applesauce::CF::convert_to<std::string,0>(v2, (uint64_t)a2);
  else
    return std::string::basic_string[abi:ne180100]<0>(a2, "(null)");
}

void std::make_unique[abi:ne180100]<CoreNLP::SentenceEmbedding,__CFLocale const*&,char const(&)[1],char const(&)[1],NLLanguageID &,int &>(uint64_t *a1@<X0>, char *a2@<X1>, char *a3@<X2>, unsigned int *a4@<X3>, unsigned int *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;

  v12 = operator new();
  v13 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v16, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  CoreNLP::SentenceEmbedding::SentenceEmbedding(v12, v13, v16, __p, *a4, *a5);
  *a6 = v12;
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
}

void sub_191CB9A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  MEMORY[0x19401E994](v20, 0x10A1C4046FD7E3ELL);
  _Unwind_Resume(a1);
}

_QWORD *CoreNLP::EmbeddingManager::EmbeddingManager(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  result[2] = 0;
  *result = v2;
  result[1] = result + 2;
  result[5] = 0;
  result[3] = 0;
  result[4] = result + 5;
  result[8] = 0;
  result[6] = 0;
  result[7] = result + 8;
  result[12] = 0;
  result[11] = 0;
  result[9] = 0;
  result[10] = result + 11;
  return result;
}

void CoreNLP::EmbeddingManager::supportedVersions(CoreNLP::EmbeddingManager *this@<X0>, const __CFLocale *a2@<X1>, const __CFString *a3@<X2>, char **a4@<X8>)
{
  char *v5;
  int LocaleLanguage;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;
  char *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  BOOL v29;
  _QWORD **v30;
  _QWORD *v31[2];

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v31[0] = 0;
  v31[1] = 0;
  v30 = v31;
  if (kNLStringEmbeddingModelTypeCompressedWordEmbedding[0] == a3)
  {
    v5 = (char *)this + 8;
  }
  else if (kNLStringEmbeddingModelTypeContextualWordEmbedding[0] == a3)
  {
    v5 = (char *)this + 32;
  }
  else if (kNLStringEmbeddingModelTypeSentenceEmbedding[0] == a3)
  {
    v5 = (char *)this + 56;
  }
  else
  {
    v5 = (char *)&v30;
  }
  LocaleLanguage = CoreNLP::getLocaleLanguage(a2, a2);
  v9 = (char *)*((_QWORD *)v5 + 1);
  v8 = v5 + 8;
  v7 = v9;
  if (v9)
  {
    v10 = v8;
    do
    {
      v11 = v7;
      v12 = v10;
      v13 = *((_DWORD *)v7 + 8);
      if (v13 >= LocaleLanguage)
        v10 = v7;
      else
        v7 += 8;
      v7 = *(char **)v7;
    }
    while (v7);
    if (v10 != v8)
    {
      if (v13 < LocaleLanguage)
        v11 = v12;
      if (LocaleLanguage >= *((_DWORD *)v11 + 8))
      {
        v14 = (char *)*((_QWORD *)v10 + 5);
        v15 = v10 + 48;
        if (v14 != v10 + 48)
        {
          v16 = 0;
          v17 = a4 + 2;
          do
          {
            if ((unint64_t)v16 >= *v17)
            {
              v18 = *a4;
              v19 = (v16 - *a4) >> 3;
              v20 = v19 + 1;
              if ((unint64_t)(v19 + 1) >> 61)
                std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
              v21 = *v17 - (_QWORD)v18;
              if (v21 >> 2 > v20)
                v20 = v21 >> 2;
              if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
                v22 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v22 = v20;
              if (v22)
              {
                v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a4 + 2), v22);
                v18 = *a4;
                v16 = a4[1];
              }
              else
              {
                v23 = 0;
              }
              v24 = &v23[8 * v19];
              *(_QWORD *)v24 = *((_QWORD *)v14 + 4);
              v25 = v24 + 8;
              while (v16 != v18)
              {
                v26 = *((_QWORD *)v16 - 1);
                v16 -= 8;
                *((_QWORD *)v24 - 1) = v26;
                v24 -= 8;
              }
              *a4 = v24;
              a4[1] = v25;
              a4[2] = &v23[8 * v22];
              if (v18)
                operator delete(v18);
              v16 = v25;
            }
            else
            {
              *(_QWORD *)v16 = *((_QWORD *)v14 + 4);
              v16 += 8;
            }
            a4[1] = v16;
            v27 = (char *)*((_QWORD *)v14 + 1);
            if (v27)
            {
              do
              {
                v28 = v27;
                v27 = *(char **)v27;
              }
              while (v27);
            }
            else
            {
              do
              {
                v28 = (char *)*((_QWORD *)v14 + 2);
                v29 = *(_QWORD *)v28 == (_QWORD)v14;
                v14 = v28;
              }
              while (!v29);
            }
            v14 = v28;
          }
          while (v28 != v15);
        }
      }
    }
  }
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy((uint64_t)&v30, v31[0]);
}

void sub_191CB9D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  uint64_t v11;
  void *v13;

  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy((uint64_t)&a10, a11);
  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::map<long,__CFString const*>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<long,__CFString const*>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<long,__CFString const*>,std::__tree_node<std::__value_type<long,__CFString const*>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_191CB9DA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<long,__CFString const*>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<long,__CFString const*>,std::__tree_node<std::__value_type<long,__CFString const*>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<long,__CFString const*>,std::__map_value_compare<long,std::__value_type<long,__CFString const*>,std::less<long>,true>,std::allocator<std::__value_type<long,__CFString const*>>>::__emplace_hint_unique_key_args<long,std::pair<long const,__CFString const*> const&>(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<long,__CFString const*>,std::__map_value_compare<long,std::__value_type<long,__CFString const*>,std::less<long>,true>,std::allocator<std::__value_type<long,__CFString const*>>>::__emplace_hint_unique_key_args<long,std::pair<long const,__CFString const*> const&>(uint64_t **a1, _QWORD *a2, uint64_t *a3, _OWORD *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (void **)std::__tree<std::__value_type<long,__CFString const*>,std::__map_value_compare<long,std::__value_type<long,__CFString const*>,std::less<long>,true>,std::allocator<std::__value_type<long,__CFString const*>>>::__find_equal<long>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<long,__CFString const*>,std::__map_value_compare<long,std::__value_type<long,__CFString const*>,std::less<long>,true>,std::allocator<std::__value_type<long,__CFString const*>>>::__find_equal<long>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t ___ZL37getModelVersionForContextualEmbeddingPK14__CFDictionary_block_invoke()
{
  uint64_t result;
  _QWORD v1[7];
  _QWORD v2[8];

  v2[7] = *MEMORY[0x1E0C80C00];
  v1[0] = kNLStringEmbeddingELMo[0];
  v1[1] = kNLStringEmbeddingBERTPlusGECTagger[0];
  v2[0] = &unk_1E2DF8F00;
  v2[1] = &unk_1E2DF8F18;
  v1[2] = kNLStringEmbeddingBERT[0];
  v1[3] = kNLStringEmbeddingMultilingualBERT[0];
  v2[2] = &unk_1E2DF8F30;
  v2[3] = &unk_1E2DF8F48;
  v1[4] = kNLStringEmbeddingBERTPlusGECS2S[0];
  v1[5] = kNLStringEmbeddingBERTPlusParser[0];
  v2[4] = &unk_1E2DF8F60;
  v2[5] = &unk_1E2DF8F78;
  v1[6] = kNLStringEmbeddingMultilingualBERTForSearch[0];
  v2[6] = &unk_1E2DF8F90;
  result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v2, v1, 7), "copy");
  getModelVersionForContextualEmbedding(__CFDictionary const*)::mappingArchitectureToVersion = result;
  return result;
}

uint64_t ___ZL20requestedEnglishBERTP8NSStringlPb_block_invoke()
{
  id v0;
  uint64_t result;
  _QWORD v2[5];

  v2[4] = *MEMORY[0x1E0C80C00];
  v0 = objc_alloc(MEMORY[0x1E0C99E60]);
  v2[0] = kNLStringEmbeddingBERTPlusGECTagger[0];
  v2[1] = kNLStringEmbeddingBERT[0];
  v2[2] = kNLStringEmbeddingBERTPlusGECS2S[0];
  v2[3] = kNLStringEmbeddingBERTPlusParser[0];
  result = objc_msgSend(v0, "initWithArray:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v2, 4));
  requestedEnglishBERT(NSString *,long,BOOL *)::englishBERT = result;
  return result;
}

uint64_t ___ZL25requestedMultilingualBERTP8NSStringl_block_invoke()
{
  id v0;
  uint64_t result;
  _QWORD v2[3];

  v2[2] = *MEMORY[0x1E0C80C00];
  v0 = objc_alloc(MEMORY[0x1E0C99E60]);
  v2[0] = kNLStringEmbeddingMultilingualBERT[0];
  v2[1] = kNLStringEmbeddingMultilingualBERTForSearch[0];
  result = objc_msgSend(v0, "initWithArray:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v2, 2));
  requestedMultilingualBERT(NSString *,long)::multilingualBERT = result;
  return result;
}

uint64_t std::map<long,__CFString const*>::map[abi:ne180100](uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      std::__tree<std::__value_type<long,__CFString const*>,std::__map_value_compare<long,std::__value_type<long,__CFString const*>,std::less<long>,true>,std::allocator<std::__value_type<long,__CFString const*>>>::__emplace_hint_unique_key_args<long,std::pair<long const,__CFString const*> const&>((uint64_t **)a1, v4, a2, a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_191CBA340(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<NLLanguageID,std::map<long,__CFString const*>>::map[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::__emplace_hint_unique_key_args<NLLanguageID,std::pair<NLLanguageID const,std::map<long,__CFString const*>> const&>((uint64_t **)a1, v4, a2, a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_191CBA3BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::__emplace_hint_unique_key_args<NLLanguageID,std::pair<NLLanguageID const,std::map<long,__CFString const*>> const&>(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::__find_equal<NLLanguageID>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::__construct_node<std::pair<NLLanguageID const,std::map<long,__CFString const*>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::__construct_node<std::pair<NLLanguageID const,std::map<long,__CFString const*>> const&>@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *a2;
  result = std::map<long,__CFString const*>::map[abi:ne180100]((uint64_t *)v6 + 5, (uint64_t)(a2 + 2));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_191CBA4C0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void OUTLINED_FUNCTION_1_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

_QWORD *CoreNLP::MontrealModel::MontrealModel(_QWORD *a1, _QWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  CFDictionaryRef CFDictionaryRef;
  __int128 *v11;
  __int128 v12;
  std::string *p_str;
  std::string::size_type size;
  CFStringRef v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  const UInt8 *v22;
  CFIndex v23;
  void **v24;
  uint64_t v25;
  CFStringRef v26;
  std::runtime_error *v28;
  std::runtime_error *exception;
  _BYTE v30[704];
  CFStringRef v31;
  _BYTE __dst[704];
  void **v33[2];
  char v34;
  uint64_t *v35;
  _QWORD *v36;
  unint64_t v37;
  void ***v38;
  std::string __str;
  __int128 v40;

  *((_QWORD *)&v40 + 1) = *MEMORY[0x1E0C80C00];
  a1[1] = 0;
  if (CoreNLP::MontrealModel::MontrealModel(std::vector<std::pair<std::string,MRLNeuralNetworkNodeParameter>> const&)::onceToken != -1)
    dispatch_once(&CoreNLP::MontrealModel::MontrealModel(std::vector<std::pair<std::string,MRLNeuralNetworkNodeParameter>> const&)::onceToken, &__block_literal_global_9);
  if (CoreNLP::MontrealModel::MontrealModel(std::vector<std::pair<std::string,MRLNeuralNetworkNodeParameter>> const&)::softLinked
    && *a2 != a2[1])
  {
    v36 = 0;
    v37 = 0;
    v35 = (uint64_t *)&v36;
    std::string::basic_string[abi:ne180100]<0>(&__str, "input");
    std::string::basic_string[abi:ne180100]<0>(v33, "MRLNeuralNetworkOptionInputNamesKey");
    v38 = v33;
    v4 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v35, (const void **)v33, (uint64_t)&std::piecewise_construct, (_OWORD **)&v38);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)((char *)v4 + 56), &__str, &v40, 1uLL);
    if (v34 < 0)
      operator delete(v33[0]);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__str, "output");
    std::string::basic_string[abi:ne180100]<0>(v33, "MRLNeuralNetworkOptionOutputNamesKey");
    v38 = v33;
    v5 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v35, (const void **)v33, (uint64_t)&std::piecewise_construct, (_OWORD **)&v38);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)((char *)v5 + 56), &__str, &v40, 1uLL);
    if (v34 < 0)
      operator delete(v33[0]);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    memset(&__str, 0, sizeof(__str));
    std::vector<applesauce::CF::TypeRefPair>::reserve((uint64_t *)&__str, v37);
    v6 = v35;
    if (v35 != (uint64_t *)&v36)
    {
      do
      {
        std::vector<applesauce::CF::TypeRefPair>::emplace_back<std::string const&,std::vector<std::string> const&>((uint64_t *)&__str, (const UInt8 *)v6 + 32, (__int128 **)v6 + 7);
        v7 = (uint64_t *)v6[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (uint64_t *)v6[2];
            v9 = *v8 == (_QWORD)v6;
            v6 = v8;
          }
          while (!v9);
        }
        v6 = v8;
      }
      while (v8 != (uint64_t *)&v36);
    }
    CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((void ***)&__str);
    v33[0] = (void **)&__str;
    std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](v33);
    v38 = (void ***)CFDictionaryRef;
    *a1 = CoreNLP::_MRLNeuralNetworkCreate(CFDictionaryRef, 0);
    v11 = (__int128 *)*a2;
    if (*(char *)(*a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
    }
    else
    {
      v12 = *v11;
      __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v12;
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    v15 = CFStringCreateWithBytes(0, (const UInt8 *)p_str, size, 0x8000100u, 0);
    v33[0] = &v15->isa;
    if (!v15)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v16 = *a1;
    memcpy(__dst, (const void *)(*a2 + 24), sizeof(__dst));
    ((void (*)(uint64_t, CFStringRef, _BYTE *, _QWORD))CoreNLP::_MRLNeuralNetworkAddNode)(v16, v15, __dst, 0);
    CoreNLP::_MRLNeuralNetworkConnectNodes(*a1, CFSTR("input"), 0, v15, 1, 0);
    CFRetain(v15);
    v31 = v15;
    v17 = (__int128 *)*a2;
    if ((unint64_t)(0x2FD2FD2FD2FD2FD3 * ((uint64_t)(a2[1] - *a2) >> 3)) >= 2)
    {
      v18 = 1;
      v19 = 1;
      do
      {
        v20 = (uint64_t)v17 + 728 * v18;
        v21 = *(char *)(v20 + 23);
        if (v21 >= 0)
          v22 = (const UInt8 *)v20;
        else
          v22 = *(const UInt8 **)v20;
        if (v21 >= 0)
          v23 = *(unsigned __int8 *)(v20 + 23);
        else
          v23 = *(_QWORD *)(v20 + 8);
        v15 = CFStringCreateWithBytes(0, v22, v23, 0x8000100u, 0);
        if (!v15)
        {
          v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v28, "Could not construct");
          __cxa_throw(v28, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v24 = v33[0];
        v33[0] = &v15->isa;
        if (v24)
          CFRelease(v24);
        v25 = *a1;
        memcpy(v30, (const void *)(*a2 + 728 * v18 + 24), sizeof(v30));
        ((void (*)(uint64_t, CFStringRef, _BYTE *, _QWORD))CoreNLP::_MRLNeuralNetworkAddNode)(v25, v15, v30, 0);
        v26 = v31;
        CoreNLP::_MRLNeuralNetworkConnectNodes(*a1, v31, 9, v15, 1, 0);
        v31 = v15;
        CFRetain(v15);
        if (v26)
          CFRelease(v26);
        v18 = (char)++v19;
        v17 = (__int128 *)*a2;
      }
      while (0x2FD2FD2FD2FD2FD3 * ((uint64_t)(a2[1] - *a2) >> 3) > (unint64_t)(char)v19);
    }
    CoreNLP::_MRLNeuralNetworkConnectNodes(*a1, v15, 9, CFSTR("output"), 0, 0);
    CFRelease(v15);
    CFRelease(v15);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v38)
      CFRelease(v38);
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)&v35, v36);
  }
  return a1;
}

void sub_191CBAA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void **a10)
{
  uint64_t v10;

  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v10 - 136));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v10 - 160, *(_QWORD **)(v10 - 152));
  nlp::CFScopedPtr<void *>::reset(a10, 0);
  _Unwind_Resume(a1);
}

void *CoreNLP::softlinkMontreal(CoreNLP *this)
{
  void *result;
  void *v2;
  void *v3;

  result = (void *)CoreNLP::loadMontreal(this);
  if (result)
  {
    v2 = result;
    CoreNLP::_MRLNeuralNetworkCreate = (uint64_t (*)(_QWORD, _QWORD))dlsym(result, "MRLNeuralNetworkCreate");
    CoreNLP::_MRLNeuralNetworkGetOutputDimension = (uint64_t (*)(_QWORD, _QWORD))dlsym(v2, "MRLNeuralNetworkGetOutputDimension");
    CoreNLP::_MRLNeuralNetworkSetInput = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))dlsym(v2, "MRLNeuralNetworkSetInput");
    CoreNLP::_MRLNeuralNetworkPredict = (uint64_t (*)(_QWORD, _QWORD, _QWORD))dlsym(v2, "MRLNeuralNetworkPredict");
    CoreNLP::_MRLNeuralNetworkClear = (uint64_t (*)(_QWORD, _QWORD))dlsym(v2, "MRLNeuralNetworkClear");
    CoreNLP::_MRLNeuralNetworkGetOutput = (uint64_t (*)(_QWORD, _QWORD, _QWORD))dlsym(v2, "MRLNeuralNetworkGetOutput");
    CoreNLP::_MRLNeuralNetworkTensorCreate = (uint64_t (*)(_QWORD))dlsym(v2, "MRLNeuralNetworkTensorCreate");
    CoreNLP::_MRLNeuralNetworkTensorAppendData = (uint64_t (*)(_QWORD, _QWORD, _QWORD))dlsym(v2, "MRLNeuralNetworkTensorAppendData");
    CoreNLP::_MRLNeuralNetworkSetInputTensor = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))dlsym(v2, "MRLNeuralNetworkSetInputTensor");
    CoreNLP::_MRLNeuralNetworkAddNode = dlsym(v2, "MRLNeuralNetworkAddNode");
    CoreNLP::_MRLNeuralNetworkConnectNodes = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))dlsym(v2, "MRLNeuralNetworkConnectNodes");
    CoreNLP::_MRLNeuralNetworkSave = dlsym(v2, "MRLNeuralNetworkSave");
    v3 = dlsym(v2, "MRLNeuralNetworkCopyModelData");
    result = 0;
    CoreNLP::_MRLNeuralNetworkCopyModelData = v3;
    if (CoreNLP::_MRLNeuralNetworkCreate)
    {
      if (CoreNLP::_MRLNeuralNetworkGetOutputDimension
        && CoreNLP::_MRLNeuralNetworkSetInput
        && CoreNLP::_MRLNeuralNetworkPredict
        && CoreNLP::_MRLNeuralNetworkClear
        && CoreNLP::_MRLNeuralNetworkGetOutput
        && CoreNLP::_MRLNeuralNetworkTensorCreate)
      {
        if (CoreNLP::_MRLNeuralNetworkTensorAppendData)
          return (void *)(CoreNLP::_MRLNeuralNetworkSetInputTensor != 0);
      }
    }
  }
  return result;
}

_QWORD *CoreNLP::MontrealModel::MontrealModel(_QWORD *a1, uint64_t a2)
{
  const char *v4;
  const __CFString *v5;
  CFURLRef v6;
  __CFDictionary *Mutable;
  __CFDictionary *v8;

  *a1 = 0;
  a1[1] = 0;
  if (CoreNLP::MontrealModel::MontrealModel(std::string const&)::onceToken != -1)
    dispatch_once(&CoreNLP::MontrealModel::MontrealModel(std::string const&)::onceToken, &__block_literal_global_8_0);
  if (CoreNLP::MontrealModel::MontrealModel(std::string const&)::softLinked)
  {
    if (*(char *)(a2 + 23) >= 0)
      v4 = (const char *)a2;
    else
      v4 = *(const char **)a2;
    v5 = CFStringCreateWithCString(0, v4, 0x8000100u);
    v6 = CFURLCreateWithFileSystemPath(0, v5, kCFURLPOSIXPathStyle, 0);
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v8 = Mutable;
    if (v6)
    {
      CFDictionaryAddValue(Mutable, CFSTR("MRLNeuralNetworkOptionModelURLKey"), v6);
      *a1 = CoreNLP::_MRLNeuralNetworkCreate(v8, 0);
    }
    if (v5)
      CFRelease(v5);
    if (v6)
      CFRelease(v6);
    CFRelease(v8);
  }
  return a1;
}

void sub_191CBAE64(_Unwind_Exception *a1)
{
  uint64_t v1;

  nlp::CFScopedPtr<void *>::reset((const void **)(v1 + 8), 0);
  _Unwind_Resume(a1);
}

CoreNLP::MontrealModel *CoreNLP::MontrealModel::MontrealModel(CoreNLP::MontrealModel *this, const __CFData *a2)
{
  __CFDictionary *Mutable;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  if (CoreNLP::MontrealModel::MontrealModel(__CFData const*)::onceToken != -1)
    dispatch_once(&CoreNLP::MontrealModel::MontrealModel(__CFData const*)::onceToken, &__block_literal_global_11);
  if (CoreNLP::MontrealModel::MontrealModel(__CFData const*)::softLinked)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionaryAddValue(Mutable, CFSTR("MRLNeuralNetworkOptionModelDataKey"), a2);
    CFDictionaryAddValue(Mutable, CFSTR("kMRLNeuralNetworkOptionModelTypeKey"), CFSTR("FlatModel"));
    *(_QWORD *)this = CoreNLP::_MRLNeuralNetworkCreate(Mutable, 0);
    CFRelease(Mutable);
  }
  return this;
}

void sub_191CBAF78(_Unwind_Exception *a1)
{
  uint64_t v1;

  nlp::CFScopedPtr<void *>::reset((const void **)(v1 + 8), 0);
  _Unwind_Resume(a1);
}

void CoreNLP::MontrealModel::~MontrealModel(const void **this)
{
  const void *v2;

  v2 = *this;
  if (v2)
    CFRelease(v2);
  nlp::CFScopedPtr<void *>::reset(this + 1, 0);
  nlp::CFScopedPtr<void *>::reset(this + 1, 0);
}

void CoreNLP::MontrealModel::clear(const void **this)
{
  const void *v2;

  v2 = *this;
  if (v2)
    CoreNLP::_MRLNeuralNetworkClear(v2, 0);
  nlp::CFScopedPtr<void *>::reset(this + 1, 0);
}

uint64_t CoreNLP::MontrealModel::outputSize(CoreNLP::MontrealModel *this)
{
  uint64_t result;

  result = *(_QWORD *)this;
  if (result)
    return CoreNLP::_MRLNeuralNetworkGetOutputDimension(result, 0);
  return result;
}

uint64_t CoreNLP::MontrealModel::predict(CoreNLP::MontrealModel *this)
{
  uint64_t result;

  result = *(_QWORD *)this;
  if (result)
    return CoreNLP::_MRLNeuralNetworkPredict(result, 0, 0);
  return result;
}

uint64_t CoreNLP::MontrealModel::setInput(CoreNLP::MontrealModel *this, uint64_t a2, uint64_t a3, void *a4, const __CFString *a5)
{
  uint64_t result;

  result = *(_QWORD *)this;
  if (result)
    return CoreNLP::_MRLNeuralNetworkSetInput(result, a5, a2, a3, a4, 0);
  return result;
}

void CoreNLP::MontrealModel::setInputTensor(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t *v14;
  char *v15;
  char **v16;
  BOOL v17;
  CFDictionaryRef CFDictionaryRef;
  const void *v19;
  char **v20;
  char *v21;
  unint64_t v22;
  void *__p[2];
  uint64_t v24;
  void **v25;

  v21 = 0;
  v22 = 0;
  v20 = &v21;
  v8 = a2[7];
  std::string::basic_string[abi:ne180100]<0>(__p, "SequenceLength");
  v25 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v20, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v25)+ 14) = v8;
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  v9 = a2[2];
  std::string::basic_string[abi:ne180100]<0>(__p, "InputDimension");
  v25 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v20, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v25)+ 14) = v9;
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  v10 = a2[3];
  std::string::basic_string[abi:ne180100]<0>(__p, "Channel");
  v25 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v20, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v25)+ 14) = v10;
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  v11 = a2[4];
  std::string::basic_string[abi:ne180100]<0>(__p, "Width");
  v25 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v20, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v25)+ 14) = v11;
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  v12 = a2[5];
  std::string::basic_string[abi:ne180100]<0>(__p, "Height");
  v25 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v20, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v25)+ 14) = v12;
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  v13 = a2[1];
  std::string::basic_string[abi:ne180100]<0>(__p, "ShapeDimension");
  v25 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v20, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v25)+ 14) = v13;
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  __p[0] = 0;
  __p[1] = 0;
  v24 = 0;
  std::vector<applesauce::CF::TypeRefPair>::reserve((uint64_t *)__p, v22);
  v14 = (uint64_t *)v20;
  if (v20 != &v21)
  {
    do
    {
      std::vector<applesauce::CF::TypeRefPair>::emplace_back<std::string const&,int const&>((uint64_t *)__p, (const UInt8 *)v14 + 32, (int *)v14 + 14);
      v15 = (char *)v14[1];
      if (v15)
      {
        do
        {
          v16 = (char **)v15;
          v15 = *(char **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (char **)v14[2];
          v17 = *v16 == (char *)v14;
          v14 = (uint64_t *)v16;
        }
        while (!v17);
      }
      v14 = (uint64_t *)v16;
    }
    while (v16 != &v21);
  }
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((void ***)__p);
  v25 = __p;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](&v25);
  v19 = (const void *)CoreNLP::_MRLNeuralNetworkTensorCreate(CFDictionaryRef);
  nlp::CFScopedPtr<void *>::reset((const void **)(a1 + 8), v19);
  CoreNLP::_MRLNeuralNetworkTensorAppendData(*(_QWORD *)(a1 + 8), a3, 4 * a2[7] * a2[2] * a2[3] * a2[4] * a2[5]);
  if (*(_QWORD *)a1)
    CoreNLP::_MRLNeuralNetworkSetInputTensor(*(_QWORD *)a1, a4, *(_QWORD *)(a1 + 8), 0);
  if (CFDictionaryRef)
    CFRelease(CFDictionaryRef);
  std::__tree<std::string>::destroy((uint64_t)&v20, v21);
}

void sub_191CBB3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (a18 < 0)
    operator delete(__p);
  std::__tree<std::string>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::MontrealModel::output(CoreNLP::MontrealModel *this, const __CFString *a2)
{
  uint64_t result;

  result = *(_QWORD *)this;
  if (result)
    return CoreNLP::_MRLNeuralNetworkGetOutput(result, a2, 0);
  return result;
}

uint64_t CoreNLP::MontrealModel::copyInt8ModelData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  double v9;
  uint64_t v10;
  void *v11;
  std::string *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  const void *v16;
  uint64_t v17;
  std::string v20;
  float v21;
  _QWORD v22[3];
  _QWORD v23[3];
  _QWORD v24[4];
  _QWORD v25[6];

  v25[4] = *MEMORY[0x1E0C80C00];
  if (!*a1)
    return 0;
  v3 = objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", -[NSString stringByAppendingPathComponent:](NSTemporaryDirectory(), "stringByAppendingPathComponent:", CFSTR("modelInt8.dat")));
  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v24[0] = CFSTR("MRLNeuralNetworkOptionModelURLKey");
  v24[1] = CFSTR("MRLNeuralNetworkOptionModelNameKey");
  v25[0] = v3;
  v25[1] = CFSTR("000-000");
  v25[2] = CFSTR("1");
  v24[2] = CFSTR("MRLNeuralNetworkOptionModelVersionKey");
  v24[3] = CFSTR("MRLNeuralNetworkOptionQuantizationParamsKey");
  v25[3] = objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  objc_msgSend(v4, "setDictionary:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, v24, 4));
  v7 = (_QWORD *)*a2;
  v5 = a2 + 1;
  v6 = v7;
  if (v7 != v5)
  {
    do
    {
      if (*((char *)v6 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(&v20, (const std::string::value_type *)v6[4], v6[5]);
      }
      else
      {
        v8 = *((_OWORD *)v6 + 2);
        *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v8;
        v20.__r_.__value_.__r.__words[2] = v6[6];
      }
      v21 = *((float *)v6 + 14);
      v23[0] = CFSTR("MRLNeuralNetworkOptionQuantizationSchemeNameLinearInt8");
      v22[0] = CFSTR("MRLNeuralNetworkOptionQuantizationSchemeNameKey");
      v22[1] = CFSTR("MRLNeuralNetworkOptionQuantizationSchemeLinearInt8RangeMinKey");
      *(float *)&v8 = -v21;
      v23[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", *(double *)&v8);
      v22[2] = CFSTR("MRLNeuralNetworkOptionQuantizationSchemeLinearInt8RangeMaxKey");
      *(float *)&v9 = v21;
      v23[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v9);
      v10 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, v22, 3);
      v11 = (void *)objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("MRLNeuralNetworkOptionQuantizationParamsKey"));
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v20;
      else
        v12 = (std::string *)v20.__r_.__value_.__r.__words[0];
      objc_msgSend(v11, "setObject:forKeyedSubscript:", v10, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v12));
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      v13 = (_QWORD *)v6[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v6[2];
          v15 = *v14 == (_QWORD)v6;
          v6 = v14;
        }
        while (!v15);
      }
      v6 = v14;
    }
    while (v14 != v5);
  }
  CoreNLP::_MRLNeuralNetworkSave(*a1, v4, 0);
  v16 = (const void *)CoreNLP::_MRLNeuralNetworkCreate(v4, 0);
  v17 = CoreNLP::_MRLNeuralNetworkCopyModelData(v16, 0);
  CFRelease(v16);
  return v17;
}

void sub_191CBB73C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_OWORD *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 7) = 0;
    v13 = 1;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(std::vector<std::string> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::vector<std::string>::pointer end;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)p_end_cap, (__int128 *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)p_end_cap, (__int128 *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_191CBBA58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_191CBBA60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<applesauce::CF::TypeRefPair>::emplace_back<std::string const&,std::vector<std::string> const&>(uint64_t *a1, const UInt8 *a2, __int128 **a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  void *v17;
  CFStringRef *v18;
  CFStringRef *v19;
  char *v20;
  uint64_t v21;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 8);
  if (v9 >= v8)
  {
    v11 = (uint64_t)(v9 - *a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v12 = v7 - *a1;
    v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v21 = v6;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>(v6, v14);
    else
      v15 = 0;
    v17 = v15;
    v18 = (CFStringRef *)&v15[16 * v11];
    v20 = &v15[16 * v14];
    applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,std::vector<std::string> const&>(v18, a2, a3);
    v19 = v18 + 2;
    std::vector<applesauce::CF::TypeRefPair>::__swap_out_circular_buffer(a1, &v17);
    v10 = a1[1];
    std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer(&v17);
  }
  else
  {
    applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,std::vector<std::string> const&>(*(CFStringRef **)(v6 - 8), a2, a3);
    v10 = v9 + 16;
    a1[1] = v9 + 16;
  }
  a1[1] = v10;
  return v10 - 16;
}

void sub_191CBBB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

CFStringRef *applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,std::vector<std::string> const&>(CFStringRef *a1, const UInt8 *a2, __int128 **a3)
{
  CFIndex v5;
  CFIndex v6;
  CFStringRef v7;
  std::runtime_error *exception;

  v5 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v6 = v5;
  }
  v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  a1[1] = (CFStringRef)applesauce::CF::details::make_CFArrayRef<std::string>(a3);
  return a1;
}

void sub_191CBBC28(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_DWORD *)v7 + 14) = 0;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t std::vector<applesauce::CF::TypeRefPair>::emplace_back<std::string const&,int const&>(uint64_t *a1, const UInt8 *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  void *v17;
  CFStringRef *v18;
  CFStringRef *v19;
  char *v20;
  uint64_t v21;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 8);
  if (v9 >= v8)
  {
    v11 = (uint64_t)(v9 - *a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v12 = v7 - *a1;
    v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v21 = v6;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>(v6, v14);
    else
      v15 = 0;
    v17 = v15;
    v18 = (CFStringRef *)&v15[16 * v11];
    v20 = &v15[16 * v14];
    applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,int const&>(v18, a2, a3);
    v19 = v18 + 2;
    std::vector<applesauce::CF::TypeRefPair>::__swap_out_circular_buffer(a1, &v17);
    v10 = a1[1];
    std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer(&v17);
  }
  else
  {
    applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,int const&>(*(CFStringRef **)(v6 - 8), a2, a3);
    v10 = v9 + 16;
    a1[1] = v9 + 16;
  }
  a1[1] = v10;
  return v10 - 16;
}

void sub_191CBBDFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

CFStringRef *applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,int const&>(CFStringRef *a1, const UInt8 *a2, int *a3)
{
  CFIndex v5;
  CFIndex v6;
  CFStringRef v7;
  CFNumberRef v8;
  std::runtime_error *exception;
  std::runtime_error *v11;
  int valuePtr;

  v5 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v6 = v5;
  }
  v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  valuePtr = *a3;
  v8 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  a1[1] = (CFStringRef)v8;
  if (!v8)
  {
    v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
    __cxa_throw(v11, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_191CBBF0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

uint64_t NLTokenizerSetLocale(uint64_t result)
{
  if (result)
  {
    result = *(_QWORD *)result;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

uint64_t NLTokenizerSetLocaleConstraints(uint64_t result)
{
  if (result)
  {
    result = *(_QWORD *)result;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  return result;
}

_QWORD *NLTokenizerSetStringType(_QWORD *result, int a2)
{
  if (result)
  {
    result = (_QWORD *)*result;
    if (result)
      return (_QWORD *)CoreNLP::Tagger::setStringType((uint64_t)result, a2);
  }
  return result;
}

uint64_t NLTokenizerSetOptions(uint64_t result)
{
  if (result)
  {
    result = *(_QWORD *)result;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  }
  return result;
}

uint64_t NLTokenizerEnumerateTokens(uint64_t result, uint64_t a2)
{
  if (result)
  {
    result = *(_QWORD *)result;
    if (result)
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)result + 48))(result, 0, a2);
  }
  return result;
}

uint64_t NLTokenizerGoToTokenAtIndex(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && (v2 = *a1) != 0)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v2 + 64))(v2, 0, a2);
  else
    return 0;
}

uint64_t NLTokenizerEnumerateDerivedSubTokensOfToken(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    result = *(_QWORD *)result;
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)result + 96))(result, a2, 0, a3);
  }
  return result;
}

uint64_t NLTokenizerEnumeratePossibleTokenSequences(uint64_t result)
{
  if (result)
  {
    result = *(_QWORD *)result;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  }
  return result;
}

uint64_t NLTokenizerEnumerateTokensOfCurrentTokenSequence(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && (v2 = *a1) != 0)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v2 + 80))(v2, 0, a2);
  else
    return 0;
}

uint64_t NLTokenizerCopyTranscriptionOfCurrentToken(uint64_t *a1)
{
  uint64_t v1;

  if (a1 && (v1 = *a1) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 104))(v1);
  else
    return 0;
}

uint64_t NLTokenizerGetPartOfSpeechOfCurrentToken(uint64_t *a1)
{
  uint64_t v1;

  if (a1 && (v1 = *a1) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 120))(v1);
  else
    return 15;
}

uint64_t NLTaggerCopyAvailableTagSchemes(int a1, CoreNLP::Resource *a2)
{
  uint64_t *v4;
  uint64_t v5;
  const __CFString *v6;
  unsigned int v7;
  CoreNLP::Resource *v8;
  CoreNLP::Resource *v9;
  CFIndex Count;
  uint64_t v11;
  CoreNLP::Resource *v13;
  CoreNLP::Resource *v14;
  _QWORD v15[5];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  CFMutableArrayRef Mutable;
  CFRange v20;
  CFRange v21;

  v16 = 0;
  v17 = &v16;
  v18 = 0x2000000000;
  Mutable = 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v4 = v17;
  if (a2)
  {
    CFArrayAppendValue((CFMutableArrayRef)v17[3], kNLTagSchemeLanguage[0]);
    CFArrayAppendValue((CFMutableArrayRef)v17[3], kNLTagSchemeScript[0]);
    if (a1 == 2)
    {
      CoreNLP::Resource::getAssetResource(a2, (const __CFLocale *)CFSTR("Sentiment"), CFSTR("sentiment.bundle"), 0, &v14);
      if (v14 && CoreNLP::Resource::exists((CoreNLP **)v14))
        CFArrayAppendValue((CFMutableArrayRef)v17[3], kNLTagSchemeSentiment[0]);
      CoreNLP::Resource::getAssetResource(a2, (const __CFLocale *)CFSTR("Emotion"), CFSTR("emotion.dat"), 0, &v13);
      if (v13)
      {
        if (CoreNLP::Resource::exists((CoreNLP **)v13))
          CFArrayAppendValue((CFMutableArrayRef)v17[3], kNLTagSchemeEmotion[0]);
        v8 = v13;
        v13 = 0;
        if (v8)
        {
          CoreNLP::Resource::~Resource(v8);
          MEMORY[0x19401E994]();
        }
      }
      v9 = v14;
      v14 = 0;
      if (v9)
      {
        CoreNLP::Resource::~Resource(v9);
        MEMORY[0x19401E994]();
      }
    }
    else if (!a1)
    {
      CFArrayAppendValue((CFMutableArrayRef)v17[3], kNLTagSchemeTokenType[0]);
      v5 = MEMORY[0x19401E1F0](a2);
      v7 = CoreNLP::languageIdForLanguage(v5, v6);
      if (v7 == 4)
      {
        CFArrayAppendValue((CFMutableArrayRef)v17[3], kNLTagSchemeLexicalClass[0]);
      }
      else
      {
        v15[0] = MEMORY[0x1E0C809B0];
        v15[1] = 0x40000000;
        v15[2] = __NLTaggerCopyAvailableTagSchemes_block_invoke;
        v15[3] = &unk_1E2DF3850;
        v15[4] = &v16;
        CoreNLP::Resource::enumerateAssetResources((uint64_t)a2, (uint64_t)v15);
      }
      Count = CFArrayGetCount((CFArrayRef)v17[3]);
      v20.location = 0;
      v20.length = Count;
      if (CFArrayContainsValue((CFArrayRef)v17[3], v20, kNLTagSchemeLexicalClass[0]))
      {
        v21.location = 0;
        v21.length = Count;
        if (CFArrayContainsValue((CFArrayRef)v17[3], v21, kNLTagSchemeNamedEntity[0]))
          CFArrayAppendValue((CFMutableArrayRef)v17[3], kNLTagSchemeNamedEntityOrLexicalClass[0]);
      }
      if (CoreNLP::LemmaTagger::lemmasAvailableForLanguage(v7))
        CFArrayAppendValue((CFMutableArrayRef)v17[3], kNLTagSchemeLemma[0]);
    }
    v4 = v17;
  }
  v11 = v4[3];
  _Block_object_dispose(&v16, 8);
  return v11;
}

void sub_191CBC380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  CoreNLP::Resource *v3;
  va_list va;
  CoreNLP::Resource *v5;
  va_list va1;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, CoreNLP::Resource *);
  va_copy(va2, va1);
  v5 = va_arg(va2, CoreNLP::Resource *);
  v7 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  std::unique_ptr<CoreNLP::Resource>::reset[abi:ne180100]((CoreNLP::Resource **)va, 0);
  std::unique_ptr<CoreNLP::Resource>::reset[abi:ne180100]((CoreNLP::Resource **)va1, 0);
  _Block_object_dispose(va2, 8);
  _Unwind_Resume(a1);
}

void NLTaggerSetString(CoreNLP *a1, __CFString *a2)
{
  CoreNLP::TaggerManager *v3;

  if (a1)
  {
    v3 = (CoreNLP::TaggerManager *)CoreNLP::unwrapGazetteer(a1, a2);
    CoreNLP::TaggerManager::setString(v3, a2);
  }
}

CoreNLP *NLTaggerSetLocaleForRange(CoreNLP *result, void *a2, CFIndex a3, CFIndex a4)
{
  uint64_t v7;
  CFRange v8;

  if (result)
  {
    v7 = CoreNLP::unwrapGazetteer(result, a2);
    v8.location = a3;
    v8.length = a4;
    return (CoreNLP *)CoreNLP::TaggerManager::setLocaleForRange(v7, (const __CFLocale *)a2, v8);
  }
  return result;
}

void NLTaggerSetStringEditedInRange(CoreNLP *a1, void *a2, CFIndex a3)
{
  CFStringRef *v5;
  CFRange v6;

  if (a1)
  {
    v5 = (CFStringRef *)CoreNLP::unwrapGazetteer(a1, a2);
    v6.location = (CFIndex)a2;
    v6.length = a3;
    CoreNLP::TaggerManager::setStringEditedInRange(v5, v6);
  }
}

CoreNLP *NLTaggerEnumerateTokens(CoreNLP *result, void *a2, CFIndex a3, CFIndex a4, CoreNLP::NLAttributedToken *a5, uint64_t a6)
{
  unsigned int v10;
  uint64_t v11;

  if (result)
  {
    v10 = a2;
    v11 = CoreNLP::unwrapGazetteer(result, a2);
    return (CoreNLP *)CoreNLP::TaggerManager::enumerateTokens(v11, v10, a3, a4, a5, a6);
  }
  return result;
}

__CFString *NLTaggerCopyTagForCurrentToken(__CFString *result, __CFString *a2)
{
  CoreNLP::CompositeTagger **v3;

  if (result)
  {
    v3 = (CoreNLP::CompositeTagger **)CoreNLP::unwrapGazetteer((CoreNLP *)result, a2);
    return CoreNLP::TaggerManager::copyTagForCurrentToken(v3, a2);
  }
  return result;
}

__CFDictionary *NLTaggerCopyHypothesesForCurrentToken(__CFDictionary *result, __CFString *a2)
{
  CoreNLP::CompositeTagger **v3;

  if (result)
  {
    v3 = (CoreNLP::CompositeTagger **)CoreNLP::unwrapGazetteer(result, a2);
    return CoreNLP::TaggerManager::copyTagAndProbabilityForCurrentToken(v3, a2);
  }
  return result;
}

CoreNLP *NLTaggerGetTokenAtIndex@<X0>(CoreNLP *result@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned int v6;
  const __CFString *v7;

  if (result)
  {
    v6 = a2;
    v7 = (const __CFString *)CoreNLP::unwrapGazetteer(result, a2);
    return (CoreNLP *)CoreNLP::TaggerManager::getTokenAtIndex(v7, v6, a3, a4);
  }
  else
  {
    a4[1] = 0;
    a4[2] = 0;
    *a4 = -1;
  }
  return result;
}

__CFString *NLTaggerCopyTagAtIndex(__CFString *result, void *a2, CFIndex a3, const __CFString *a4)
{
  unsigned int v6;
  uint64_t v7;

  if (result)
  {
    v6 = a2;
    v7 = CoreNLP::unwrapGazetteer((CoreNLP *)result, a2);
    return CoreNLP::TaggerManager::copyTagAtIndex(v7, v6, a3, a4);
  }
  return result;
}

__CFDictionary *NLTaggerCopyHypothesesAtIndex(__CFDictionary *result, void *a2, CFIndex a3, const __CFString *a4, uint64_t a5)
{
  unsigned int v8;
  uint64_t v9;

  if (result)
  {
    v8 = a2;
    v9 = CoreNLP::unwrapGazetteer(result, a2);
    return CoreNLP::TaggerManager::copyTagAndProbabilityAtIndex(v9, v8, a3, a4, a5);
  }
  return result;
}

void NLTaggerEnumerateSubTokens(CoreNLP *a1, void *a2)
{
  CoreNLP::SubWordTagger *v2;

  if (a1)
  {
    v2 = (CoreNLP::SubWordTagger *)CoreNLP::unwrapGazetteer(a1, a2);
    CoreNLP::SubWordTagger::~SubWordTagger(v2);
  }
}

__CFDictionary *NLTaggerCopyLanguageMapAtIndex(__CFDictionary *result, void *a2, CFIndex a3)
{
  unsigned int v4;
  uint64_t v5;

  if (result)
  {
    v4 = a2;
    v5 = CoreNLP::unwrapGazetteer(result, a2);
    return CoreNLP::TaggerManager::copyLanguageMapAtIndex(v5, v4, a3);
  }
  return result;
}

CoreNLP *NLTaggerSetGazetteers(CoreNLP *result, void *a2, const __CFString *a3)
{
  CoreNLP::TaggerManager *v5;

  if (result)
  {
    v5 = (CoreNLP::TaggerManager *)CoreNLP::unwrapGazetteer(result, a2);
    return CoreNLP::TaggerManager::setGazetteers(v5, (const __CFArray *)a2, a3);
  }
  return result;
}

_QWORD *std::shared_ptr<CoreNLP::TaggerManager>::shared_ptr[abi:ne180100]<CoreNLP::TaggerManager,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E2DF3628;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_191CBC858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<CoreNLP::TaggerManager>::reset[abi:ne180100]((CoreNLP::TaggerManager **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<CoreNLP::TaggerManager *,std::shared_ptr<CoreNLP::TaggerManager>::__shared_ptr_default_delete<CoreNLP::TaggerManager,CoreNLP::TaggerManager>,std::allocator<CoreNLP::TaggerManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401E994);
}

CoreNLP::TaggerManager *std::__shared_ptr_pointer<CoreNLP::TaggerManager *,std::shared_ptr<CoreNLP::TaggerManager>::__shared_ptr_default_delete<CoreNLP::TaggerManager,CoreNLP::TaggerManager>,std::allocator<CoreNLP::TaggerManager>>::__on_zero_shared(uint64_t a1)
{
  CoreNLP::TaggerManager *result;

  result = *(CoreNLP::TaggerManager **)(a1 + 24);
  if (result)
  {
    CoreNLP::TaggerManager::~TaggerManager(result);
    JUMPOUT(0x19401E994);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<CoreNLP::TaggerManager *,std::shared_ptr<CoreNLP::TaggerManager>::__shared_ptr_default_delete<CoreNLP::TaggerManager,CoreNLP::TaggerManager>,std::allocator<CoreNLP::TaggerManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

CoreNLP::TaggerManager *std::unique_ptr<CoreNLP::TaggerManager>::reset[abi:ne180100](CoreNLP::TaggerManager **a1, CoreNLP::TaggerManager *a2)
{
  CoreNLP::TaggerManager *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CoreNLP::TaggerManager::~TaggerManager(result);
    JUMPOUT(0x19401E994);
  }
  return result;
}

void CoreNLP::chunkNounPhrases(CoreNLP *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v13;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char *v29;
  uint64_t v30;
  int v32;
  unsigned __int8 v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  uint64_t *v47;
  int v48;
  uint64_t i;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  unint64_t v56;
  uint64_t v57;
  void **v58;
  std::string::size_type v59;
  unsigned int v60;
  int v61[2];
  int v63[2];
  int v64[2];
  _QWORD *v65;
  char *v66;
  std::string v67;
  void *__p[2];
  void *v69[2];
  _BYTE v70[28];
  _QWORD v71[3];
  _QWORD v72[3];
  _QWORD v73[3];
  uint64_t v74[3];
  uint64_t v75[3];
  uint64_t v76[3];
  uint64_t v77[3];
  uint64_t v78[3];
  uint64_t v79[3];
  uint64_t v80[3];
  uint64_t v81[3];
  uint64_t v82[3];
  uint64_t v83[3];
  _QWORD v84[6];

  v84[4] = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)((char *)this + 8);
  v5 = *v4;
  v6 = *(_QWORD *)this;
  if (0xAAAAAAAAAAAAAAABLL * ((*v4 - *(_QWORD *)this) >> 3) >= 2)
  {
    v7 = 1;
    v8 = 1;
    while (1)
    {
      v9 = *((_QWORD *)this + 6);
      v10 = *((_QWORD *)this + 12);
      v11 = *(_DWORD *)(v9 + 4 * v8);
      if (v11 == 12 || v11 == 9)
        v65[v8] = v7++;
      if (v11 == 11)
      {
        if (*(_DWORD *)(v10 + 4 * *(int *)(*((_QWORD *)this + 9) + 4 * v8)) == 2 || *(_DWORD *)(v10 + 4 * v8) == 46)
          goto LABEL_29;
      }
      else
      {
        v13 = *(_DWORD *)(v10 + 4 * v8);
        if (v11 != 8 || v13 == 11)
        {
          if (v11 != 15 || v13 == 11)
            goto LABEL_23;
          if ((v16 & 1) == 0
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "$");
            std::string::basic_string[abi:ne180100]<0>(&v69[1], "%");
            std::string::basic_string[abi:ne180100]<0>(&v70[16], "£");
            std::string::basic_string[abi:ne180100]<0>(v71, "°");
            std::string::basic_string[abi:ne180100]<0>(v72, "€");
            std::string::basic_string[abi:ne180100]<0>(v73, "n°");
            std::string::basic_string[abi:ne180100]<0>(v74, "kw");
            std::string::basic_string[abi:ne180100]<0>(v75, "kg");
            std::string::basic_string[abi:ne180100]<0>(v76, "g");
            std::string::basic_string[abi:ne180100]<0>(v77, "km");
            std::string::basic_string[abi:ne180100]<0>(v78, "cm");
            std::string::basic_string[abi:ne180100]<0>(v79, "mm");
            std::string::basic_string[abi:ne180100]<0>(v80, "m");
            std::string::basic_string[abi:ne180100]<0>(v81, "m²");
            std::string::basic_string[abi:ne180100]<0>(v82, "cm²");
            std::string::basic_string[abi:ne180100]<0>(v83, "mm²");
            std::string::basic_string[abi:ne180100]<0>(v84, "km²");
            v17 = 51;
            do
            {
              if (SHIBYTE(__p[v17 - 1]) < 0)
                operator delete((void *)v67.__r_.__value_.__r.__words[v17 + 1]);
              v17 -= 3;
            }
            while (v17 * 8);
          }
          {
            v11 = *(_DWORD *)(v9 + 4 * v8);
LABEL_23:
            if (v11 != 1)
              goto LABEL_29;
          }
        }
      }
      v65[v8] = v7++;
LABEL_29:
      ++v8;
      v6 = *(_QWORD *)this;
      v5 = *((_QWORD *)this + 1);
      if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((v5 - *(_QWORD *)this) >> 3))
        goto LABEL_38;
    }
  }
  do
  {
LABEL_38:
    if (0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3) < 2)
      break;
    v18 = 0;
    v19 = -2;
    v20 = 1;
    v21 = 2;
    v22 = 8;
    v23 = 1;
    do
    {
      v24 = *(int *)(*((_QWORD *)this + 9) + 4 * v23);
      if (!(_DWORD)v24)
        goto LABEL_65;
      v25 = *((_QWORD *)this + 6);
      v26 = *((_QWORD *)this + 12);
      v27 = v65[v24];
      if (v27 && v65[v23] != v27)
      {
        v32 = *(_DWORD *)(v25 + 4 * v23);
        LODWORD(v67.__r_.__value_.__l.__data_) = *(_DWORD *)(v26 + 4 * v23);
        if ((v33 & 1) == 0)
        {
          v60 = v18;
          *(_QWORD *)v64 = v25;
          v25 = *(_QWORD *)v64;
          v18 = v60;
          if (v48)
          {
            *(_DWORD *)&v70[16] = 52;
            *(_OWORD *)__p = xmmword_191D41F58;
            *(_OWORD *)v69 = unk_191D41F68;
            *(_OWORD *)v70 = xmmword_191D41F78;
            v18 = v60;
            v25 = *(_QWORD *)v64;
          }
        }
        if (v32 != 11 && LODWORD(v67.__r_.__value_.__l.__data_) == 46
          || (*(_QWORD *)v63 = v25,
              v34 = v18,
        {
          v35 = v65;
          v65[v23] = v65[v24];
          if (v23 < v24)
          {
            v36 = &v35[v20];
            v37 = v24;
            do
            {
              *v36++ = v35[v24];
              --v37;
            }
            while (v23 != v37);
          }
          v38 = v24;
          if (v23 > v24)
          {
            do
              v35[v38++] = v35[v24];
            while (v23 != v38);
          }
          goto LABEL_64;
        }
        if (v23 + 1 >= (v66 - (char *)v65) >> 3)
        {
LABEL_73:
          v43 = v23 - 1;
          if (v23 == 1)
          {
            v18 = v34;
            goto LABEL_65;
          }
          while (v65[v43] != v65[*(int *)(*((_QWORD *)this + 9) + 4 * v23)])
          {
            v44 = *(_DWORD *)(*((_QWORD *)this + 12) + 4 * v43);
            if (v44 == 41 || v44 == 37)
            {
              if (--v43)
                continue;
            }
            goto LABEL_85;
          }
        }
        else
        {
          v39 = ((v66 - (char *)v65) >> 3) + v19;
          v40 = (_DWORD *)(*((_QWORD *)this + 12) + v22);
          v41 = &v65[v21];
          while (1)
          {
            v42 = *v41++;
            if (v42 == v65[*(int *)(*((_QWORD *)this + 9) + 4 * v23)])
              break;
            if (*v40 == 41 || *v40 == 37)
            {
              ++v40;
              if (--v39)
                continue;
            }
            goto LABEL_73;
          }
        }
        LODWORD(v67.__r_.__value_.__l.__data_) = *(_DWORD *)(v26 + 4 * v23);
        if ((v45 & 1) == 0
        {
          *(_OWORD *)__p = xmmword_191D41F8C;
          *(_OWORD *)v69 = unk_191D41F9C;
          *(_OWORD *)v70 = xmmword_191D41FAC;
          *(_OWORD *)&v70[12] = *(__int128 *)((char *)&xmmword_191D41FAC + 12);
        }
        if ((v46 & 1) == 0
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "-");
          std::string::basic_string[abi:ne180100]<0>(&v69[1], "/");
          std::string::basic_string[abi:ne180100]<0>(&v70[16], "'");
          std::string::basic_string[abi:ne180100]<0>(v71, "\"");
          std::string::basic_string[abi:ne180100]<0>(v72, "(");
          std::string::basic_string[abi:ne180100]<0>(v73, ")");
          for (i = 0; i != -144; i -= 24)
          {
            if (*((char *)&v73[2] + i + 7) < 0)
            {
              *(_QWORD *)v61 = i;
              operator delete(*(void **)((char *)v73 + i));
              i = *(_QWORD *)v61;
            }
          }
        }
        if (LODWORD(v67.__r_.__value_.__l.__data_) == 61
        {
LABEL_85:
          v18 = v34;
          v25 = *(_QWORD *)v63;
        }
        else
        {
          v18 = v34;
          v25 = *(_QWORD *)v63;
          if (v47)
          {
            v65[v23] = v65[v24];
            v18 = 1;
          }
        }
      }
      if (v23 >= 2 && v23 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) - 1)
      {
        v28 = *(_DWORD *)(v26 + 4 * v23);
        if (v28 == 61 || v28 == 12 || v28 == 11 && *(_DWORD *)(v25 + 4 * v23) == 10)
        {
          v29 = (char *)&v65[v23];
          v30 = *((_QWORD *)v29 - 1);
          if (v30 == *((_QWORD *)v29 + 1) && v30 && v65[v23] != v30)
          {
            v65[v23] = v30;
LABEL_64:
            v18 = 1;
          }
        }
      }
LABEL_65:
      ++v23;
      v6 = *(_QWORD *)this;
      v5 = *((_QWORD *)this + 1);
      --v19;
      v22 += 4;
      ++v21;
      ++v20;
    }
    while (v23 < 0xAAAAAAAAAAAAAAABLL * ((v5 - *(_QWORD *)this) >> 3));
  }
  while ((v18 & 1) != 0);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v50 = (char *)v65;
  v51 = v66;
  if ((unint64_t)(v66 - (char *)v65) >= 9)
  {
    v52 = 1;
    do
    {
      v53 = *(_QWORD *)&v50[8 * v52];
      if (v53)
      {
        v54 = *(_QWORD *)this + 24 * v52;
        if (*(char *)(v54 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)v54, *(_QWORD *)(v54 + 8));
          v50 = (char *)v65;
          v51 = v66;
        }
        else
        {
          v55 = *(_OWORD *)v54;
          v67.__r_.__value_.__r.__words[2] = *(_QWORD *)(v54 + 16);
          *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v55;
        }
        v56 = v52 + 1;
        if (v52 + 1 < (unint64_t)((v51 - v50) >> 3))
        {
          v57 = 24 * v52 + 24;
          do
          {
            if (*(_QWORD *)&v50[8 * v56] != v53)
              break;
            std::operator+<char>();
            if (SHIBYTE(v69[0]) >= 0)
              v58 = __p;
            else
              v58 = (void **)__p[0];
            if (SHIBYTE(v69[0]) >= 0)
              v59 = HIBYTE(v69[0]);
            else
              v59 = (std::string::size_type)__p[1];
            std::string::append(&v67, (const std::string::value_type *)v58, v59);
            if (SHIBYTE(v69[0]) < 0)
              operator delete(__p[0]);
            ++v56;
            v50 = (char *)v65;
            v57 += 24;
          }
          while (v56 < (v66 - (char *)v65) >> 3);
        }
        __p[0] = (void *)v52;
        __p[1] = (void *)(v56 - v52);
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v69, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)v69 = *(_OWORD *)&v67.__r_.__value_.__l.__data_;
          *(_QWORD *)v70 = *((_QWORD *)&v67.__r_.__value_.__l + 2);
        }
        std::vector<CoreNLP::NounPhrase>::push_back[abi:ne180100](a2, (uint64_t)__p);
        if ((v70[7] & 0x80000000) != 0)
          operator delete(v69[0]);
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v67.__r_.__value_.__l.__data_);
        v50 = (char *)v65;
        v51 = v66;
      }
      else
      {
        v56 = v52 + 1;
      }
      v52 = v56;
    }
    while (v56 < (v51 - v50) >> 3);
  }
  if (v50)
  {
    v66 = v50;
    operator delete(v50);
  }
}

void sub_191CBD3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v44;

  v44 = 408;
  while (1)
  {
    if (*((char *)&a36 + v44 - 1) < 0)
      operator delete(*(void **)((char *)&a36 + v44 - 24));
    v44 -= 24;
    if (!v44)
    {
      if (__p)
        operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 24 * a3;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_191CBD594(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<long,std::hash<long>,std::equal_to<long>,std::allocator<long>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_191CBD800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = operator new(0x28uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_191CBD988(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::unordered_set<NLDepLabel>::unordered_set(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 4 * a3;
    do
    {
      std::__hash_table<NLDepLabel,std::hash<NLDepLabel>,std::equal_to<NLDepLabel>,std::allocator<NLDepLabel>>::__emplace_unique_key_args<NLDepLabel,NLDepLabel const&>(a1, a2, a2);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_191CBE03C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<NLDepLabel,std::hash<NLDepLabel>,std::equal_to<NLDepLabel>,std::allocator<NLDepLabel>>::__emplace_unique_key_args<NLDepLabel,NLDepLabel const&>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<long,std::hash<long>,std::equal_to<long>,std::allocator<long>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_191CBE258(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<NLDepLabel,std::hash<NLDepLabel>,std::equal_to<NLDepLabel>,std::allocator<NLDepLabel>>::find<NLDepLabel>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t std::vector<CoreNLP::NounPhrase>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  _QWORD v17[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0x666666666666666)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x333333333333333)
      v13 = 0x666666666666666;
    else
      v13 = v11;
    v17[4] = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CoreNLP::NounPhrase>>(result, v13);
    else
      v14 = 0;
    v15 = &v14[40 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[40 * v13];
    *(_OWORD *)v15 = *(_OWORD *)a2;
    v16 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v15 + 4) = *(_QWORD *)(a2 + 32);
    *((_OWORD *)v15 + 1) = v16;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v17[2] = v15 + 40;
    std::vector<CoreNLP::NounPhrase>::__swap_out_circular_buffer(a1, v17);
    v9 = a1[1];
    result = std::__split_buffer<CoreNLP::NounPhrase>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v8 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(v7 + 16) = v8;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v9 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v9;
  return result;
}

void sub_191CBE454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CoreNLP::NounPhrase>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CoreNLP::NounPhrase>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CoreNLP::NounPhrase>,std::reverse_iterator<CoreNLP::NounPhrase*>,std::reverse_iterator<CoreNLP::NounPhrase*>,std::reverse_iterator<CoreNLP::NounPhrase*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CoreNLP::NounPhrase>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CoreNLP::NounPhrase>,std::reverse_iterator<CoreNLP::NounPhrase*>,std::reverse_iterator<CoreNLP::NounPhrase*>,std::reverse_iterator<CoreNLP::NounPhrase*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      v8 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 40;
      *((_QWORD *)&v14 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CoreNLP::NounPhrase>,std::reverse_iterator<CoreNLP::NounPhrase*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CoreNLP::NounPhrase>,std::reverse_iterator<CoreNLP::NounPhrase*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<CoreNLP::NounPhrase>,std::reverse_iterator<CoreNLP::NounPhrase*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CoreNLP::NounPhrase>,std::reverse_iterator<CoreNLP::NounPhrase*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 39) < 0)
      operator delete(*(void **)(v1 + 16));
    v1 += 40;
  }
}

uint64_t std::__split_buffer<CoreNLP::NounPhrase>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<CoreNLP::NounPhrase>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<CoreNLP::NounPhrase>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 40;
      *(_QWORD *)(a1 + 16) = v2 - 40;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<CoreNLP::NounPhrase>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<CoreNLP::NounPhrase>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<CoreNLP::NounPhrase>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

double CoreNLP::ICUTextBreak::reset(CoreNLP::ICUTextBreak *this)
{
  const void *v2;
  uint64_t v3;
  double result;

  v2 = (const void *)*((_QWORD *)this + 8);
  if (v2)
  {
    CFRelease(v2);
    v3 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  result = NAN;
  *((_OWORD *)this + 1) = xmmword_191D40610;
  *((_BYTE *)this + 80) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = -1;
  return result;
}

uint64_t CoreNLP::ICUTextBreak::fastEnumerateTokens(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2, &v4, a3);
}

uint64_t CoreNLP::ICUTextBreak::enumerateTokens(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v6;

  v6 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2, a3, a4, &v6, a5);
}

uint64_t CoreNLP::ICUTextBreak::getStringBufferPtr(CoreNLP::ICUTextBreak *this)
{
  int v2;
  CoreNLP::UStringPiece *v3;
  CoreNLP::UStringPiece *v4;
  const __CFString *v5;
  uint64_t v6;
  CFRange v8;

  if (!*((_QWORD *)this + 9))
  {
    v2 = *((unsigned __int8 *)this + 80);
    v3 = (CoreNLP::UStringPiece *)operator new();
    v4 = v3;
    v5 = (const __CFString *)*((_QWORD *)this + 8);
    if (v2)
    {
      CoreNLP::UStringPiece::UStringPiece(v3, *((const __CFString **)this + 8), *((CFRange *)this + 1));
    }
    else
    {
      v8.length = CFStringGetLength(*((CFStringRef *)this + 8));
      v8.location = 0;
      CoreNLP::UStringPiece::UStringPiece(v4, v5, v8);
    }
    v6 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v4;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return *(_QWORD *)(*((_QWORD *)this + 9) + 8);
}

void sub_191CBE8BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10D1C40A2689608);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::ICUTextBreak::getCurrentICUTokenFlag(CoreNLP::ICUTextBreak *this)
{
  return 0;
}

_QWORD *CoreNLP::_CFInit_ModelTrainerWrapper(_QWORD *this, const void *a2)
{
  this[3] = 0;
  this[4] = 0;
  this[2] = &unk_1E2DF2770;
  return this;
}

uint64_t CoreNLP::createModelTrainerWrapper(uint64_t *a1)
{
  unsigned __int8 v2;
  uint64_t Instance;

  CFAllocatorGetDefault();
  if ((v2 & 1) == 0
  {
    qword_1EE21AC80 = 0;
    unk_1EE21AC90 = 0u;
    unk_1EE21ACA0 = 0u;
    CoreNLP::_CFGetTypeID_ModelTrainerWrapper(void)::typeID = _CFRuntimeRegisterClass();
  }
  Instance = _CFRuntimeCreateInstance();
  std::shared_ptr<CoreNLP::NLModelTrainer>::operator=[abi:ne180100]((_QWORD *)(Instance + 24), a1);
  return Instance;
}

void sub_191CBE9B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<CoreNLP::NLModelTrainer>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void CoreNLP::ModelTrainerWrapper::~ModelTrainerWrapper(CoreNLP::ModelTrainerWrapper *this)
{
  *(_QWORD *)this = &unk_1E2DF2770;
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
}

{
  *(_QWORD *)this = &unk_1E2DF2770;
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
  JUMPOUT(0x19401E994);
}

void CoreNLP::SentimentModel::CreateModel(int a1@<W0>, uint64_t *a2@<X8>)
{
  CoreNLP **v4;
  size_t st_gid_high;
  stat *v6;
  __int128 *v7;
  std::string *v8;
  __int128 v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  CoreNLP::CNNModel *v13;
  size_t v14;
  std::string *v15;
  __int128 *v16;
  std::string *v17;
  __int128 v18;
  uint64_t v19;
  CoreNLP::Resource *v20;
  uint64_t v21;
  CoreNLP::CNNModel *v22;
  CoreNLP::CNNModel *v23;
  void *__p[2];
  char *v25;
  stat v26;
  __int128 v27;
  int64_t v28;
  __int128 v29;
  uint64_t v30;
  CoreNLP **v31[2];
  void **v32;
  char v33;
  std::string v34;
  __int128 v35;

  *(_QWORD *)&v35 = *MEMORY[0x1E0C80C00];
  v4 = (CoreNLP **)CoreNLP::copyLocaleForLanguageID(a1);
  v31[1] = v4;
  CoreNLP::Resource::getAssetResource((CoreNLP::Resource *)v4, (const __CFLocale *)CFSTR("Sentiment"), CFSTR("sentiment.bundle"), 0, v31);
  v29 = 0uLL;
  v30 = 0;
  if (v31[0] && CoreNLP::Resource::exists(v31[0]))
  {
    CoreNLP::Resource::path(v31[0], &v26);
    if (SHIBYTE(v30) < 0)
      operator delete((void *)v29);
    v30 = *(_QWORD *)&v26.st_uid;
    v29 = *(_OWORD *)&v26.st_dev;
    if ((v26.st_gid & 0x80000000) == 0)
      st_gid_high = HIBYTE(v26.st_gid);
    else
      st_gid_high = *((_QWORD *)&v29 + 1);
    v6 = &v26;
    std::string::basic_string[abi:ne180100]((uint64_t)&v26, st_gid_high + 1);
    if ((v26.st_gid & 0x80000000) != 0)
      v6 = *(stat **)&v26.st_dev;
    if (st_gid_high)
    {
      if (v30 >= 0)
        v7 = &v29;
      else
        v7 = (__int128 *)v29;
      memmove(v6, v7, st_gid_high);
    }
    *(_WORD *)((char *)&v6->st_dev + st_gid_high) = 47;
    v8 = std::string::append((std::string *)&v26, "sentiment.nlmodel");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v28 = v8->__r_.__value_.__r.__words[2];
    v27 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v26.st_gid) < 0)
      operator delete(*(void **)&v26.st_dev);
    if (v28 >= 0)
      v10 = (const char *)&v27;
    else
      v10 = (const char *)v27;
    if (stat(v10, &v26))
    {
      std::string::basic_string[abi:ne180100]<0>(&v34, "output1");
      __p[0] = 0;
      __p[1] = 0;
      v25 = 0;
      v32 = __p;
      v33 = 0;
      __p[0] = operator new(0x18uLL);
      __p[1] = __p[0];
      v25 = (char *)__p[0] + 24;
      __p[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v25, (__int128 *)&v34, &v35, (std::string *)__p[0]);
      CoreNLP::CNNModel::CreateCNNModel(1, (uint64_t)v4, (const void **)&v29, (__int128 **)__p, &v23);
      v32 = __p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v32);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      v11 = operator new();
      v22 = v23;
      v23 = 0;
      CoreNLP::SentimentModel::SentimentModel((_QWORD *)v11, (uint64_t *)&v22);
      *a2 = v11;
      v12 = (uint64_t)v22;
      v22 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      *(_DWORD *)(v11 + 64) = 107;
      *(_DWORD *)(v11 + 8) = 8;
      *(_DWORD *)(v11 + 12) = a1;
      v13 = v23;
      v23 = 0;
      if (v13)
        (*(void (**)(CoreNLP::CNNModel *))(*(_QWORD *)v13 + 8))(v13);
    }
    else
    {
      if (v30 >= 0)
        v14 = HIBYTE(v30);
      else
        v14 = *((_QWORD *)&v29 + 1);
      v15 = &v34;
      std::string::basic_string[abi:ne180100]((uint64_t)&v34, v14 + 1);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v15 = (std::string *)v34.__r_.__value_.__r.__words[0];
      if (v14)
      {
        if (v30 >= 0)
          v16 = &v29;
        else
          v16 = (__int128 *)v29;
        memmove(v15, v16, v14);
      }
      *(_WORD *)((char *)&v15->__r_.__value_.__l.__data_ + v14) = 47;
      v17 = std::string::append(&v34, "char_id.json");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v25 = (char *)v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      v19 = operator new();
      CoreNLP::SentimentModel::SentimentModel(v19, (uint64_t)&v27);
      if (*(_QWORD *)(v19 + 80))
      {
        *(_DWORD *)(v19 + 64) = 107;
        *(_DWORD *)(v19 + 8) = 8;
        *(_DWORD *)(v19 + 12) = a1;
      }
      else
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        v19 = 0;
      }
      *a2 = v19;
      if (SHIBYTE(v25) < 0)
        operator delete(__p[0]);
    }
    if (SHIBYTE(v28) < 0)
      operator delete((void *)v27);
  }
  else
  {
    *a2 = 0;
  }
  if (SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  v20 = (CoreNLP::Resource *)v31[0];
  v31[0] = 0;
  if (v20)
  {
    CoreNLP::Resource::~Resource(v20);
    MEMORY[0x19401E994](v21, 0x60C4045F868BCLL);
  }
  if (v4)
    CFRelease(v4);
}

void sub_191CBEEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;

  MEMORY[0x19401E994](v23, 0x10B3C40686E1955);
  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v24 - 153) < 0)
    operator delete(*(void **)(v24 - 176));
  if (*(char *)(v24 - 121) < 0)
    operator delete(*(void **)(v24 - 144));
  std::unique_ptr<CoreNLP::Resource>::reset[abi:ne180100]((CoreNLP::Resource **)(v24 - 112), 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)(v24 - 104), 0);
  _Unwind_Resume(a1);
}

_QWORD *CoreNLP::SentimentModel::SentimentModel(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  char **v6;
  char *v7[2];

  v7[0] = 0;
  v7[1] = 0;
  v6 = v7;
  CoreNLP::AbstractModel::AbstractModel((uint64_t)a1, (const void ***)&v6);
  std::__tree<std::string>::destroy((uint64_t)&v6, v7[0]);
  *a1 = &off_1E2DF2098;
  v4 = *a2;
  *a2 = 0;
  a1[9] = v4;
  a1[10] = 0;
  a1[13] = 0;
  a1[12] = 0;
  a1[11] = a1 + 12;
  return a1;
}

void sub_191CBF07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::string>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::SentimentModel::SentimentModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::runtime_error *exception;
  CFTypeRef v12;
  void *__p;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef cf;
  _QWORD v17[13];
  char v18;
  uint64_t v19;
  char **v20;
  char *v21;
  _QWORD v22[51];
  _QWORD v23[20];

  v23[19] = *MEMORY[0x1E0C80C00];
  v21 = 0;
  v22[0] = 0;
  v20 = &v21;
  CoreNLP::AbstractModel::AbstractModel(a1, (const void ***)&v20);
  std::__tree<std::string>::destroy((uint64_t)&v20, v21);
  *(_QWORD *)a1 = &off_1E2DF2098;
  *(_QWORD *)(a1 + 72) = 0;
  v4 = operator new();
  CoreNLP::MontrealModel::MontrealModel(v4, a2);
  *(_QWORD *)(a1 + 96) = 0;
  v5 = a1 + 96;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 80) = v4;
  *(_QWORD *)(a1 + 104) = 0;
  std::ifstream::basic_ifstream(&v20);
  if ((*((_BYTE *)&v22[2] + (_QWORD)*(v20 - 3)) & 5) == 0)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
    std::ostream::operator<<();
    std::stringbuf::str();
    applesauce::CF::details::parse_json((uint64_t *)&__p, (applesauce::CF::DictionaryRef *)&cf);
    if (SHIBYTE(v15) < 0)
      operator delete(__p);
    v6 = cf;
    if (cf)
    {
      CFRetain(cf);
      applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v12, v6);
      if (!v12)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      applesauce::CF::convert_to<std::map<std::string,int>,0>(v12, (uint64_t)&__p);
      std::__tree<std::string>::destroy(a1 + 88, *(char **)(a1 + 96));
      v7 = v14;
      *(_QWORD *)(a1 + 88) = __p;
      *(_QWORD *)(a1 + 96) = v7;
      v8 = v15;
      *(_QWORD *)(a1 + 104) = v15;
      if (v8)
      {
        *(_QWORD *)(v7 + 16) = v5;
        __p = &v14;
        v14 = 0;
        v15 = 0;
        v7 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 88) = v5;
      }
      std::__tree<std::string>::destroy((uint64_t)&__p, (char *)v7);
      if (v12)
        CFRelease(v12);
      if (cf)
        CFRelease(cf);
    }
    v17[0] = *MEMORY[0x1E0DE4F50];
    v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v17[2] = v9;
    v17[3] = MEMORY[0x1E0DE4FB8] + 16;
    if (v18 < 0)
      operator delete((void *)v17[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x19401E928](&v19);
  }
  v20 = (char **)*MEMORY[0x1E0DE4F40];
  *(char ***)((char *)&v20 + (_QWORD)*(v20 - 3)) = *(char ***)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x19401E70C](v22);
  std::istream::~istream();
  MEMORY[0x19401E928](v23);
  return a1;
}

void sub_191CBF344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56)
{
  void *v56;

  if (a2)
  {
    __cxa_free_exception(v56);
    applesauce::CF::DictionaryRef::~DictionaryRef(&a10);
    applesauce::CF::DictionaryRef::~DictionaryRef(&a17);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x191CBF29CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t applesauce::CF::details::parse_json@<X0>(uint64_t *a1@<X0>, applesauce::CF::DictionaryRef *a2@<X8>)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  CFTypeRef cf;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = a1;
  else
    v4 = (uint64_t *)*a1;
  if (v3 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = a1[1];
  v8 = 0;
  v9 = 0;
  v10 = v4;
  v11 = operator new[]();
  v12 = v5;
  v13 = 0;
  v14 = 0;
  v15 = v11;
  applesauce::CF::details::parse_object<minijson::const_buffer_context>((minijson::detail::buffer_context_base *)&v8, (CFDictionaryRef *)&cf);
  applesauce::CF::TypeRef::operator applesauce::CF::DictionaryRef(&cf, a2);
  if (cf)
    CFRelease(cf);
  result = v11;
  if (v11)
    return MEMORY[0x19401E970](v11, 0x1000C8077774924);
  return result;
}

void sub_191CBF52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  applesauce::CF::TypeRef::~TypeRef(&a10);
  if (a14)
    MEMORY[0x19401E970](a14, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::SentimentModel::train()
{
  return 0;
}

void CoreNLP::SentimentModel::vinference(uint64_t a1@<X0>, __int128 ***a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const __CFDictionary *v11;
  const void *Value;
  const void *v13;
  float v14;
  double v15;
  int v16;
  __int128 **v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  void *v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  char *v29;
  std::runtime_error *exception;
  std::string v31;
  std::string v32;
  float v33;
  CFTypeRef cf;
  void *__p;
  void *v36;
  _QWORD *v37;
  __int128 *v38;

  v38 = (__int128 *)*MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 80))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "PAD");
    v6 = std::__tree<std::string>::find<std::string>(a1 + 88, (const void **)&__p);
    if (SHIBYTE(v37) < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "UNK");
    v7 = std::__tree<std::string>::find<std::string>(a1 + 88, (const void **)&__p);
    if (SHIBYTE(v37) < 0)
      operator delete(__p);
    v8 = a1 + 96;
    if (a1 + 96 == v6)
      v9 = 0;
    else
      v9 = *(_DWORD *)(v6 + 56);
    v33 = (float)v9;
    if (v8 == v7)
      v16 = 0;
    else
      v16 = *(_DWORD *)(v7 + 56);
    std::vector<float>::vector(&__p, 0x190uLL, &v33);
    v17 = *a2;
    memset(&v32, 0, sizeof(v32));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v32, *v17, v17[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v17[1] - (char *)*v17) >> 3));
    v18 = 0x5555555555555555 * (((char *)(*a2)[1] - (char *)**a2) >> 3);
    if (v18 <= 0xFFFFFFFFFFFFFE6FLL)
    {
      v23 = __p;
    }
    else
    {
      v19 = 0;
      v20 = v18 + 400;
      do
      {
        v21 = std::__tree<std::string>::find<std::string>(a1 + 88, (const void **)((char *)**a2 + v19));
        v22 = v16;
        if (v8 != v21)
          v22 = *(_DWORD *)(v21 + 56);
        v23 = __p;
        *((float *)__p + v20) = (float)v22;
        v19 += 24;
      }
      while (v20++ < 0x18F);
    }
    CoreNLP::MontrealModel::setInput(*(CoreNLP::MontrealModel **)(a1 + 80), 1, 1, v23, 0);
    CoreNLP::MontrealModel::predict(*(CoreNLP::MontrealModel **)(a1 + 80));
    v25 = CoreNLP::MontrealModel::output(*(CoreNLP::MontrealModel **)(a1 + 80), 0);
    if (v25)
      v15 = *(float *)(v25 + 4);
    else
      v15 = 0.0;
    cf = &v32;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
    if (__p)
    {
      v36 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 72);
    memset(&v31, 0, sizeof(v31));
    std::vector<std::vector<std::string>>::__init_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>(&v31, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    v11 = (const __CFDictionary *)CoreNLP::CNNModel::featureRepresentation(v10, (uint64_t *)&v31);
    v32.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    __p = &v31;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    Value = CFDictionaryGetValue(v11, CFSTR("output1"));
    v13 = Value;
    if (Value)
      CFRetain(Value);
    applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&cf, v13);
    if (!cf)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    applesauce::CF::convert_to<std::vector<float>,0>(cf, (uint64_t)&__p);
    v14 = *((float *)__p + 1);
    v36 = __p;
    operator delete(__p);
    if (cf)
      CFRelease(cf);
    if (v11)
      CFRelease(v11);
    v15 = v14;
  }
  if (v15 < -0.05 || v15 >= 0.05)
  {
    if (v15 < 0.05 || v15 >= 0.15)
    {
      if (v15 < 0.15 || v15 >= 0.25)
      {
        if (v15 < 0.25 || v15 >= 0.35)
        {
          if (v15 < 0.35 || v15 >= 0.45)
          {
            if (v15 < 0.45 || v15 >= 0.55)
            {
              if (v15 < 0.55 || v15 >= 0.65)
              {
                if (v15 < 0.65 || v15 >= 0.75)
                {
                  if (v15 < 0.75 || v15 >= 0.85)
                  {
                    if (v15 < 0.85 || v15 >= 0.95)
                    {
                      if (v15 >= 1.05 || v15 < 0.95)
                        v26 = 0;
                      else
                        v26 = 211;
                    }
                    else
                    {
                      v26 = 210;
                    }
                  }
                  else
                  {
                    v26 = 209;
                  }
                }
                else
                {
                  v26 = 208;
                }
              }
              else
              {
                v26 = 207;
              }
            }
            else
            {
              v26 = 206;
            }
          }
          else
          {
            v26 = 205;
          }
        }
        else
        {
          v26 = 204;
        }
      }
      else
      {
        v26 = 203;
      }
    }
    else
    {
      v26 = 202;
    }
  }
  else
  {
    v26 = 201;
  }
  v28 = operator new(0x10uLL);
  v36 = v28 + 2;
  v37 = v28 + 2;
  *v28 = v26;
  v28[1] = 0x3FF0000000000000;
  __p = v28;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v32.__r_.__value_.__s.__data_[8] = 0;
  v29 = (char *)operator new(0x18uLL);
  *a3 = v29;
  a3[1] = v29;
  a3[2] = v29 + 24;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,double>>>,std::vector<std::pair<int,double>> const*,std::vector<std::pair<int,double>> const*,std::vector<std::pair<int,double>>*>((uint64_t)(a3 + 2), (__int128 **)&__p, &v38, (uint64_t)v29);
  if (__p)
  {
    v36 = __p;
    operator delete(__p);
  }
}

void sub_191CBFA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  __cxa_free_exception(v22);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)&a16);
  nlp::CFScopedPtr<__CFDictionary const*>::reset(&a12, 0);
  _Unwind_Resume(a1);
}

void CoreNLP::SentimentModel::~SentimentModel(CoreNLP::SentimentModel *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DF2098;
  std::__tree<std::string>::destroy((uint64_t)this + 88, *((char **)this + 12));
  std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100]((CoreNLP::MontrealModel **)this + 10, 0);
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  CoreNLP::AbstractModel::~AbstractModel(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DF2098;
  std::__tree<std::string>::destroy((uint64_t)this + 88, *((char **)this + 12));
  std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100]((CoreNLP::MontrealModel **)this + 10, 0);
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  CoreNLP::AbstractModel::~AbstractModel(this);
  JUMPOUT(0x19401E994);
}

void applesauce::CF::details::parse_object<minijson::const_buffer_context>(minijson::detail::buffer_context_base *a1@<X0>, CFDictionaryRef *a2@<X8>)
{
  _QWORD **v3;
  _QWORD *v4;
  _QWORD **v5;
  BOOL v6;
  CFDictionaryRef CFDictionaryRef;
  _QWORD **v8;
  _QWORD *v9;
  unint64_t v10;
  void **v11[3];
  void ***v12;

  v9 = 0;
  v10 = 0;
  v8 = &v9;
  minijson::parse_object<minijson::const_buffer_context,applesauce::CF::TypeRef applesauce::CF::details::parse_object<minijson::const_buffer_context>(minijson::const_buffer_context &)::{lambda(char const*,minijson::value)#1}>(a1, (uint64_t)&v8, (uint64_t)a1);
  memset(v11, 0, sizeof(v11));
  std::vector<applesauce::CF::TypeRefPair>::reserve((uint64_t *)v11, v10);
  v3 = v8;
  if (v8 != &v9)
  {
    do
    {
      std::vector<applesauce::CF::TypeRefPair>::emplace_back<std::string const&,applesauce::CF::TypeRef const&>((uint64_t *)v11, (const UInt8 *)v3 + 32, (const void **)v3 + 7);
      v4 = v3[1];
      if (v4)
      {
        do
        {
          v5 = (_QWORD **)v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD **)v3[2];
          v6 = *v5 == v3;
          v3 = v5;
        }
        while (!v6);
      }
      v3 = v5;
    }
    while (v5 != &v9);
  }
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef(v11);
  v12 = v11;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  *a2 = CFDictionaryRef;
  std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy((uint64_t)&v8, v9);
}

void sub_191CBFCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void minijson::parse_object<minijson::const_buffer_context,applesauce::CF::TypeRef applesauce::CF::details::parse_object<minijson::const_buffer_context>(minijson::const_buffer_context &)::{lambda(char const*,minijson::value)#1}>(minijson::detail::buffer_context_base *this, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  char v5;
  int v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  std::runtime_error *v13;
  uint64_t v14;
  _QWORD *exception;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[2];
  __int16 v31;
  _QWORD v32[2];

  v32[0] = a2;
  v32[1] = a3;
  v4 = *((_QWORD *)this + 1);
  if (v4 >= 0x21)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *exception = &unk_1E2DF3148;
    v28 = *((_QWORD *)this + 5);
    v17 = v28 != 0;
    v29 = v28 - 1;
    if (!v17)
      v29 = 0;
    exception[1] = v29;
    v19 = 12;
LABEL_40:
    *((_DWORD *)exception + 4) = v19;
  }
  v31 = 0;
  if (*(_DWORD *)this <= 2u)
  {
    v5 = 8 * *(_DWORD *)this;
    HIBYTE(v31) = 0x5B7B00u >> v5;
    LOBYTE(v31) = 1u >> v5;
  }
  v6 = 0;
  v7 = "";
  *(_DWORD *)this = 0;
  v8 = MEMORY[0x1E0C80978];
  while (v6 != 6)
  {
    do
    {
      while (1)
      {
        if (*((_QWORD *)this + 1) != v4)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          *exception = &unk_1E2DF3148;
          v16 = *((_QWORD *)this + 5);
          v17 = v16 != 0;
          v18 = v16 - 1;
          if (!v17)
            v18 = 0;
          exception[1] = v18;
          v19 = 11;
          goto LABEL_40;
        }
        if ((_BYTE)v31)
        {
          v9 = *((_QWORD *)this + 5);
          if (v9 >= *((_QWORD *)this + 4))
          {
            v11 = 0;
          }
          else
          {
            v10 = *((_QWORD *)this + 2);
            *((_QWORD *)this + 5) = v9 + 1;
            v11 = *(_BYTE *)(v10 + v9);
          }
          HIBYTE(v31) = v11;
        }
        else
        {
          v11 = HIBYTE(v31);
        }
        LOBYTE(v31) = 1;
        if (v11 < 0)
          break;
        if ((*(_DWORD *)(v8 + 4 * v11 + 60) & 0x4000) == 0)
          goto LABEL_17;
      }
    }
    while (__maskrune(v11, 0x4000uLL));
LABEL_17:
    switch(v6)
    {
      case 0:
        if (HIBYTE(v31) == 123)
        {
          v6 = 1;
          continue;
        }
        exception = __cxa_allocate_exception(0x18uLL);
        *exception = &unk_1E2DF3148;
        v22 = *((_QWORD *)this + 5);
        v17 = v22 != 0;
        v23 = v22 - 1;
        if (!v17)
          v23 = 0;
        exception[1] = v23;
        v19 = 8;
        goto LABEL_40;
      case 1:
        v12 = HIBYTE(v31);
        if (HIBYTE(v31) == 125)
          goto LABEL_32;
        goto LABEL_23;
      case 2:
        v12 = HIBYTE(v31);
LABEL_23:
        if (v12 != 34)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          *exception = &unk_1E2DF3148;
          v20 = *((_QWORD *)this + 5);
          v17 = v20 != 0;
          v21 = v20 - 1;
          if (!v17)
            v21 = 0;
          exception[1] = v21;
          v19 = 1;
          goto LABEL_40;
        }
        *((_QWORD *)this + 7) = *((_QWORD *)this + 3) + *((_QWORD *)this + 6);
        minijson::detail::read_quoted_string<minijson::const_buffer_context>(this, 1);
        v7 = (char *)*((_QWORD *)this + 7);
        v6 = 3;
LABEL_28:
        if (!HIBYTE(v31))
        {
          v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v13, "This line should never be reached, please file a bug report");
          __cxa_throw(v13, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        continue;
      case 3:
        if (HIBYTE(v31) != 58)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          *exception = &unk_1E2DF3148;
          v24 = *((_QWORD *)this + 5);
          v17 = v24 != 0;
          v25 = v24 - 1;
          if (!v17)
            v25 = 0;
          exception[1] = v25;
          v19 = 9;
          goto LABEL_40;
        }
        v6 = 4;
        continue;
      case 4:
        minijson::detail::parse_value_helper<minijson::const_buffer_context>(this, (_BYTE *)&v31 + 1, &v31, v30);
        applesauce::CF::details::parse_object<minijson::const_buffer_context>(minijson::const_buffer_context &)::{lambda(char const*,minijson::value)#1}::operator()((uint64_t)v32, v7, (uint64_t)v30);
        v6 = 5;
        goto LABEL_28;
      case 5:
        if (HIBYTE(v31) == 44)
        {
          v6 = 2;
        }
        else
        {
          if (HIBYTE(v31) != 125)
          {
            exception = __cxa_allocate_exception(0x18uLL);
            *exception = &unk_1E2DF3148;
            v26 = *((_QWORD *)this + 5);
            v17 = v26 != 0;
            v27 = v26 - 1;
            if (!v17)
              v27 = 0;
            exception[1] = v27;
            v19 = 10;
            goto LABEL_40;
          }
LABEL_32:
          v6 = 6;
        }
        break;
      default:
        goto LABEL_28;
    }
  }
  v14 = *((_QWORD *)this + 1);
  if (v14)
    *((_QWORD *)this + 1) = v14 - 1;
}

void sub_191CC00B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *minijson::detail::read_quoted_string<minijson::const_buffer_context>(minijson::detail::buffer_context_base *this, int a2)
{
  unint64_t v3;
  char v4;
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  minijson::detail::buffer_context_base *v11;
  char v12;
  uint64_t i;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  void *v25;
  _QWORD *exception;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char v37;
  int v38;
  int v39;
  int v40;
  char v41;

  v41 = 0;
  v40 = 0;
  v3 = *((_QWORD *)this + 5);
  v37 = a2;
  v4 = 0;
  if (v3 >= *((_QWORD *)this + 4))
  {
LABEL_57:
    exception = __cxa_allocate_exception(0x18uLL);
    v20 = *((_QWORD *)this + 5);
    v21 = v20 != 0;
    v22 = v20 - 1;
    if (!v21)
      v22 = 0;
    *exception = &unk_1E2DF3148;
    exception[1] = v22;
    if ((v4 & 1) != 0 || (v37 & 1) != 0)
      v23 = 5;
    else
      v23 = 1;
LABEL_65:
    *((_DWORD *)exception + 4) = v23;
LABEL_66:
  }
  v5 = 0;
  v6 = 0;
  v7 = MEMORY[0x1E0C80978];
  v8 = a2;
  while (2)
  {
    v9 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 5) = v3 + 1;
    v10 = *(char *)(v9 + v3);
    if (!v10)
      goto LABEL_57;
    switch(v8)
    {
      case 0:
        v8 = 1;
        if (v10 == 34)
          goto LABEL_56;
        exception = __cxa_allocate_exception(0x18uLL);
        v27 = *((_QWORD *)this + 5);
        v21 = v27 != 0;
        v28 = v27 - 1;
        if (!v21)
          v28 = 0;
        *exception = &unk_1E2DF3148;
        exception[1] = v28;
        *((_DWORD *)exception + 4) = 1;
        goto LABEL_66;
      case 1:
        if (v10 == 92)
        {
          v8 = 2;
          goto LABEL_56;
        }
        if (v6)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          v29 = *((_QWORD *)this + 5);
          v21 = v29 != 0;
          v30 = v29 - 1;
          if (!v21)
            v30 = 0;
          *exception = &unk_1E2DF3148;
          exception[1] = v30;
          v23 = 2;
          goto LABEL_65;
        }
        if (v10 != 34)
        {
          minijson::detail::buffer_context_base::write(this, v10);
LABEL_54:
          v6 = 0;
LABEL_55:
          v8 = 1;
LABEL_56:
          v3 = *((_QWORD *)this + 5);
          v4 = 1;
          if (v3 >= *((_QWORD *)this + 4))
            goto LABEL_57;
          continue;
        }
        return minijson::detail::buffer_context_base::write(this, 0);
      case 2:
        if (v10 > 97)
        {
          v8 = 3;
          switch(v10)
          {
            case 'n':
              v11 = this;
              v12 = 10;
              break;
            case 'o':
            case 'p':
            case 'q':
            case 's':
              goto LABEL_76;
            case 'r':
              v11 = this;
              v12 = 13;
              break;
            case 't':
              v11 = this;
              v12 = 9;
              break;
            case 'u':
              goto LABEL_56;
            default:
              if (v10 == 98)
              {
                v11 = this;
                v12 = 8;
              }
              else
              {
                if (v10 != 102)
                {
LABEL_76:
                  exception = __cxa_allocate_exception(0x18uLL);
                  v34 = *((_QWORD *)this + 5);
                  v21 = v34 != 0;
                  v35 = v34 - 1;
                  if (!v21)
                    v35 = 0;
                  *exception = &unk_1E2DF3148;
                  exception[1] = v35;
                  v23 = 3;
                  goto LABEL_65;
                }
                v11 = this;
                v12 = 12;
              }
              break;
          }
        }
        else
        {
          switch(v10)
          {
            case '"':
              v11 = this;
              v12 = 34;
              break;
            case '/':
              v11 = this;
              v12 = 47;
              break;
            case '\\':
              v11 = this;
              v12 = 92;
              break;
            default:
              goto LABEL_76;
          }
        }
        minijson::detail::buffer_context_base::write(v11, v12);
        goto LABEL_55;
      case 3:
        *((_BYTE *)&v40 + v5) = v10;
        if (v5 != 3)
        {
          v8 = 3;
          ++v5;
          goto LABEL_56;
        }
        for (i = 0; i != 4; ++i)
        {
          if (*((char *)&v40 + i) < 0 || (*(_DWORD *)(v7 + 4 * *((unsigned __int8 *)&v40 + i) + 60) & 0x10000) == 0)
          {
            v25 = __cxa_allocate_exception(1uLL);
          }
        }
        v14 = minijson::detail::parse_long((minijson::detail *)&v40, (const char *)0x10);
        if (!((unsigned __int16)v14 | v6))
        {
          v31 = __cxa_allocate_exception(0x18uLL);
          v32 = *((_QWORD *)this + 5);
          v21 = v32 != 0;
          v33 = v32 - 1;
          if (!v21)
            v33 = 0;
          *v31 = &unk_1E2DF3148;
          v31[1] = v33;
          *((_DWORD *)v31 + 4) = 13;
        }
        if (v6)
        {
          v15 = 0;
          v39 = minijson::detail::utf16_to_utf8((minijson::detail *)v6, (unsigned __int16)v14);
          do
          {
            if (v15 && !*((_BYTE *)&v39 + v15))
              break;
            minijson::detail::buffer_context_base::write(this, *((_BYTE *)&v39 + v15++));
          }
          while (v15 != 4);
        }
        else
        {
          if ((unsigned __int16)v14 >> 10 == 54)
          {
            v5 = 0;
            v8 = 1;
            v6 = v14;
            goto LABEL_56;
          }
          if ((unsigned __int16)((unsigned __int16)(v14 + 0x2000) >> 11) > 0x1Eu)
          {
            v36 = __cxa_allocate_exception(1uLL);
          }
          v16 = (unsigned __int16)v14;
          if ((unsigned __int16)v14 >= 0x80u)
          {
            if ((unsigned __int16)v14 > 0x7FFu)
            {
              v16 = ((unsigned __int16)v14 >> 12) | 0xE0;
              v18 = (v14 >> 6) & 0x3F | 0x80;
              v17 = v14 & 0x3F | 0x80;
            }
            else
            {
              v17 = 0;
              v16 = ((unsigned __int16)v14 >> 6) | 0xC0;
              v18 = v14 & 0x3F | 0x80;
            }
          }
          else
          {
            v17 = 0;
            v18 = 0;
          }
          v19 = 0;
          v38 = (v17 << 16) | (v18 << 8) | v16;
          do
          {
            if (v19 && !*((_BYTE *)&v38 + v19))
              break;
            minijson::detail::buffer_context_base::write(this, *((_BYTE *)&v38 + v19++));
          }
          while (v19 != 4);
        }
        v5 = 0;
        goto LABEL_54;
      default:
        goto LABEL_56;
    }
  }
}

void sub_191CC0560(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  _QWORD *exception;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    exception = __cxa_allocate_exception(0x18uLL);
    v4 = *(_QWORD *)(v2 + 40);
    v5 = v4 != 0;
    v6 = v4 - 1;
    if (!v5)
      v6 = 0;
    *exception = &unk_1E2DF3148;
    exception[1] = v6;
    *((_DWORD *)exception + 4) = 4;
  }
  _Unwind_Resume(exception_object);
}

void sub_191CC05CC()
{
  __cxa_end_catch();
  JUMPOUT(0x191CC05D4);
}

void applesauce::CF::details::parse_object<minijson::const_buffer_context>(minijson::const_buffer_context &)::{lambda(char const*,minijson::value)#1}::operator()(uint64_t a1, char *__s, uint64_t a3)
{
  uint64_t **v5;
  _OWORD *v6;
  CFTypeRef v7;
  CFTypeRef *v8;
  CFTypeRef v9;
  uint64_t **v10;
  _OWORD *v11;
  const void *v12;
  uint64_t **v13;
  _OWORD *v14;
  uint64_t **v15;
  _OWORD *v16;
  CFNumberRef v17;
  CFNumberRef v18;
  uint64_t **v19;
  _OWORD *v20;
  const void *v21;
  uint64_t **v22;
  _OWORD *v23;
  std::runtime_error *exception;
  void *__p[2];
  char v26;
  CFTypeRef cf;
  void **v28;

  switch(*(_DWORD *)a3)
  {
    case 0:
      applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&cf, *(char **)(a3 + 8));
      v5 = *(uint64_t ***)a1;
      std::string::basic_string[abi:ne180100]<0>(__p, __s);
      v28 = __p;
      v6 = std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v5, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v28);
      v7 = (CFTypeRef)*((_QWORD *)v6 + 7);
      *((_QWORD *)v6 + 7) = cf;
      cf = v7;
      if (v26 < 0)
      {
        operator delete(__p[0]);
        v7 = cf;
        if (cf)
          goto LABEL_30;
      }
      else if (v7)
      {
        goto LABEL_30;
      }
      return;
    case 1:
      __p[0] = *(void **)(a3 + 24);
      v17 = CFNumberCreate(0, kCFNumberDoubleType, __p);
      cf = v17;
      if (!v17)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v18 = v17;
      v19 = *(uint64_t ***)a1;
      std::string::basic_string[abi:ne180100]<0>(__p, __s);
      v28 = __p;
      v20 = std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v19, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v28);
      v21 = (const void *)*((_QWORD *)v20 + 7);
      *((_QWORD *)v20 + 7) = v18;
      cf = v21;
      if (v26 < 0)
      {
        operator delete(__p[0]);
        if (!v21)
          return;
      }
      else if (!v21)
      {
        return;
      }
      CFRelease(v21);
      return;
    case 2:
      v8 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      if (!*(_QWORD *)(a3 + 16))
        v8 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      cf = *v8;
      v9 = cf;
      v10 = *(uint64_t ***)a1;
      std::string::basic_string[abi:ne180100]<0>(__p, __s);
      v28 = __p;
      v11 = std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v28);
      v12 = (const void *)*((_QWORD *)v11 + 7);
      *((_QWORD *)v11 + 7) = v9;
      cf = v12;
      if (v26 < 0)
      {
        operator delete(__p[0]);
        if (v12)
          goto LABEL_26;
      }
      else if (v12)
      {
        goto LABEL_26;
      }
      return;
    case 3:
      applesauce::CF::details::parse_object<minijson::const_buffer_context>(&cf, *(_QWORD *)(a1 + 8));
      v13 = *(uint64_t ***)a1;
      std::string::basic_string[abi:ne180100]<0>(__p, __s);
      v28 = __p;
      v14 = std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v13, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v28);
      v7 = (CFTypeRef)*((_QWORD *)v14 + 7);
      *((_QWORD *)v14 + 7) = cf;
      cf = v7;
      if (v26 < 0)
      {
        operator delete(__p[0]);
        v7 = cf;
        if (cf)
          goto LABEL_30;
      }
      else if (v7)
      {
        goto LABEL_30;
      }
      return;
    case 4:
      applesauce::CF::details::parse_array<minijson::const_buffer_context>(*(minijson::detail::buffer_context_base **)(a1 + 8), (CFArrayRef *)&cf);
      v15 = *(uint64_t ***)a1;
      std::string::basic_string[abi:ne180100]<0>(__p, __s);
      v28 = __p;
      v16 = std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v15, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v28);
      v7 = (CFTypeRef)*((_QWORD *)v16 + 7);
      *((_QWORD *)v16 + 7) = cf;
      cf = v7;
      if (v26 < 0)
      {
        operator delete(__p[0]);
        v7 = cf;
        if (!cf)
          return;
      }
      else if (!v7)
      {
        return;
      }
LABEL_30:
      CFRelease(v7);
      return;
    case 5:
      cf = 0;
      v22 = *(uint64_t ***)a1;
      std::string::basic_string[abi:ne180100]<0>(__p, __s);
      v28 = __p;
      v23 = std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v28);
      v12 = (const void *)*((_QWORD *)v23 + 7);
      *((_QWORD *)v23 + 7) = 0;
      cf = v12;
      if ((v26 & 0x80000000) == 0)
      {
        if (!v12)
          return;
LABEL_26:
        CFRelease(v12);
        return;
      }
      operator delete(__p[0]);
      if (v12)
        goto LABEL_26;
      return;
    default:
      return;
  }
}

void sub_191CC0958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void minijson::detail::parse_value_helper<minijson::const_buffer_context>(minijson::detail::buffer_context_base *a1@<X0>, _BYTE *a2@<X1>, _BYTE *a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v8;
  int v9;
  int v10;
  _OWORD v11[2];
  char v12;

  minijson::detail::read_value<minijson::const_buffer_context>(a1, (char)*a2, (uint64_t)v11);
  v8 = v11[1];
  *a4 = v11[0];
  a4[1] = v8;
  v9 = *(_DWORD *)a4;
  if (*(_DWORD *)a4)
  {
    if (v9 == 4)
    {
      v10 = 2;
      goto LABEL_6;
    }
    if (v9 == 3)
    {
      v10 = 1;
LABEL_6:
      *(_DWORD *)a1 = v10;
      ++*((_QWORD *)a1 + 1);
      return;
    }
    *a2 = v12;
    *a3 = 0;
  }
}

void minijson::parse_error::~parse_error(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x19401E994);
}

const char *minijson::parse_error::what(minijson::parse_error *this)
{
  uint64_t v1;

  v1 = *((int *)this + 4);
  if (v1 > 0xD)
    return "";
  else
    return off_1E2DF4CA0[v1];
}

_QWORD *minijson::detail::buffer_context_base::write(_QWORD *this, char a2)
{
  unint64_t v2;
  uint64_t v3;
  std::runtime_error *exception;

  v2 = this[6];
  if (v2 >= this[5])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid write call, please file a bug report");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = this[3];
  this[6] = v2 + 1;
  *(_BYTE *)(v3 + v2) = a2;
  return this;
}

void sub_191CC0B18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t minijson::detail::utf16_to_utf8(minijson::detail *this, int a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  void *exception;

  if ((unsigned __int16)((unsigned __int16)((_WORD)this + 0x2000) >> 11) > 0x1Eu)
  {
    if (this >> 10 < 0x37 && (unsigned __int16)((unsigned __int16)(a2 + 0x2000) >> 10) > 0x3Eu)
    {
      v7 = (unsigned __int16)(a2 + 9216) | ((unsigned __int16)((_WORD)this + 10240) << 10);
      v2 = ((v7 + 0x10000) >> 18) | 0xF0;
      v3 = ((v7 + 0x10000) >> 12) & 0x3F | 0x80;
      v6 = (v7 >> 6) & 0x3F | 0x80;
      v5 = (((a2 + 9216) & 0x3F) << 24) | 0x80000000;
      return v5 | (v6 << 16) | (v3 << 8) | v2;
    }
LABEL_18:
    exception = __cxa_allocate_exception(1uLL);
  }
  if (a2)
    goto LABEL_18;
  v2 = (this >> 12) | 0xE0;
  v3 = (this >> 6) & 0x3F | 0x80;
  if (this <= 0x7FF)
    v4 = 0;
  else
    v4 = this & 0x3F | 0x80;
  if (this <= 0x7FF)
  {
    v3 = this & 0x3F | 0x80;
    v2 = (this >> 6) | 0xC0;
  }
  v5 = 0;
  if (this >= 0x80)
    v6 = v4;
  else
    v6 = 0;
  if (this < 0x80)
  {
    v3 = 0;
    v2 = this;
  }
  return v5 | (v6 << 16) | (v3 << 8) | v2;
}

uint64_t minijson::detail::parse_long(minijson::detail *this, const char *a2)
{
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  int *v7;
  int v8;
  void *exception;
  char *__endptr;

  if (!this)
    goto LABEL_11;
  v3 = *(char *)this;
  if (!v3)
    goto LABEL_11;
  v4 = (int)a2;
  if ((v3 & 0x80000000) != 0)
  {
    if (__maskrune(v3, 0x4000uLL))
      goto LABEL_11;
  }
  else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v3 + 60) & 0x4000) != 0)
  {
    goto LABEL_11;
  }
  v5 = *__error();
  *__error() = 0;
  __endptr = 0;
  v6 = strtol((const char *)this, &__endptr, v4);
  v7 = __error();
  v8 = *v7;
  *v7 = v5;
  if (*__endptr || v8 == 34 && (unint64_t)(v6 - 0x7FFFFFFFFFFFFFFFLL) <= 1)
  {
LABEL_11:
    exception = __cxa_allocate_exception(1uLL);
  }
  return v6;
}

void applesauce::CF::details::parse_array<minijson::const_buffer_context>(minijson::detail::buffer_context_base *a1@<X0>, CFArrayRef *a2@<X8>)
{
  uint64_t *v3[3];
  void **v4;

  memset(v3, 0, sizeof(v3));
  minijson::parse_array<minijson::const_buffer_context,applesauce::CF::TypeRef applesauce::CF::details::parse_array<minijson::const_buffer_context>(minijson::const_buffer_context &)::{lambda(minijson::value)#1}>(a1, (uint64_t *)v3, (uint64_t *)a1);
  *a2 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(v3);
  v4 = (void **)v3;
  std::vector<applesauce::CF::TypeRef>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void sub_191CC0D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<applesauce::CF::TypeRef>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    v13 = 1;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,applesauce::CF::TypeRef>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,applesauce::CF::TypeRef>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,applesauce::CF::TypeRef>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,applesauce::CF::TypeRef>,0>(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 24);
  if (v2)
    CFRelease(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void minijson::parse_array<minijson::const_buffer_context,applesauce::CF::TypeRef applesauce::CF::details::parse_array<minijson::const_buffer_context>(minijson::const_buffer_context &)::{lambda(minijson::value)#1}>(minijson::detail::buffer_context_base *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  std::runtime_error *v11;
  uint64_t v12;
  _QWORD *exception;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[2];
  __int16 v25;
  uint64_t *v26[2];

  v26[0] = a2;
  v26[1] = a3;
  v4 = *((_QWORD *)a1 + 1);
  if (v4 >= 0x21)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *exception = &unk_1E2DF3148;
    v22 = *((_QWORD *)a1 + 5);
    v15 = v22 != 0;
    v23 = v22 - 1;
    if (!v15)
      v23 = 0;
    exception[1] = v23;
    v17 = 12;
LABEL_34:
    *((_DWORD *)exception + 4) = v17;
  }
  v25 = 0;
  if (*(_DWORD *)a1 <= 2u)
  {
    v5 = 8 * *(_DWORD *)a1;
    HIBYTE(v25) = 0x5B7B00u >> v5;
    LOBYTE(v25) = 1u >> v5;
  }
  v6 = 0;
  *(_DWORD *)a1 = 0;
  v7 = MEMORY[0x1E0C80978];
  while (v6 != 4)
  {
    do
    {
      while (1)
      {
        if (*((_QWORD *)a1 + 1) != v4)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          *exception = &unk_1E2DF3148;
          v14 = *((_QWORD *)a1 + 5);
          v15 = v14 != 0;
          v16 = v14 - 1;
          if (!v15)
            v16 = 0;
          exception[1] = v16;
          v17 = 11;
          goto LABEL_34;
        }
        if ((_BYTE)v25)
        {
          v8 = *((_QWORD *)a1 + 5);
          if (v8 >= *((_QWORD *)a1 + 4))
          {
            v10 = 0;
          }
          else
          {
            v9 = *((_QWORD *)a1 + 2);
            *((_QWORD *)a1 + 5) = v8 + 1;
            v10 = *(_BYTE *)(v9 + v8);
          }
          HIBYTE(v25) = v10;
        }
        else
        {
          v10 = HIBYTE(v25);
        }
        LOBYTE(v25) = 1;
        if (v10 < 0)
          break;
        if ((*(_DWORD *)(v7 + 4 * v10 + 60) & 0x4000) == 0)
          goto LABEL_17;
      }
    }
    while (__maskrune(v10, 0x4000uLL));
LABEL_17:
    switch(v6)
    {
      case 0:
        if (HIBYTE(v25) == 91)
        {
          v6 = 1;
          continue;
        }
        exception = __cxa_allocate_exception(0x18uLL);
        *exception = &unk_1E2DF3148;
        v18 = *((_QWORD *)a1 + 5);
        v15 = v18 != 0;
        v19 = v18 - 1;
        if (!v15)
          v19 = 0;
        exception[1] = v19;
        v17 = 8;
        goto LABEL_34;
      case 1:
        if (HIBYTE(v25) != 93)
          goto LABEL_21;
        goto LABEL_26;
      case 2:
LABEL_21:
        minijson::detail::parse_value_helper<minijson::const_buffer_context>(a1, (_BYTE *)&v25 + 1, &v25, v24);
        applesauce::CF::details::parse_array<minijson::const_buffer_context>(minijson::const_buffer_context &)::{lambda(minijson::value)#1}::operator()(v26, (uint64_t)v24);
        v6 = 3;
        goto LABEL_22;
      case 3:
        if (HIBYTE(v25) == 44)
        {
          v6 = 2;
        }
        else
        {
          if (HIBYTE(v25) != 93)
          {
            exception = __cxa_allocate_exception(0x18uLL);
            *exception = &unk_1E2DF3148;
            v20 = *((_QWORD *)a1 + 5);
            v15 = v20 != 0;
            v21 = v20 - 1;
            if (!v15)
              v21 = 0;
            exception[1] = v21;
            v17 = 10;
            goto LABEL_34;
          }
LABEL_26:
          v6 = 4;
        }
        break;
      default:
LABEL_22:
        if (!HIBYTE(v25))
        {
          v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v11, "This line should never be reached, please file a bug report");
          __cxa_throw(v11, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        continue;
    }
  }
  v12 = *((_QWORD *)a1 + 1);
  if (v12)
    *((_QWORD *)a1 + 1) = v12 - 1;
}

void sub_191CC1180(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::details::parse_array<minijson::const_buffer_context>(minijson::const_buffer_context &)::{lambda(minijson::value)#1}::operator()(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  CFTypeRef *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  CFTypeRef *v31;
  uint64_t v32;
  CFTypeRef v33;
  CFTypeRef *v34;
  uint64_t v35;
  char *v36;
  CFTypeRef cf;
  void *v38;
  CFTypeRef *v39;
  _QWORD *v40;
  char *v41;
  uint64_t *v42;

  switch(*(_DWORD *)a2)
  {
    case 0:
      v2 = *a1;
      v38 = *(void **)(a2 + 8);
      std::vector<applesauce::CF::TypeRef>::emplace_back<char const*>(v2, (char **)&v38);
      break;
    case 1:
      v13 = *a1;
      v38 = *(void **)(a2 + 24);
      std::vector<applesauce::CF::TypeRef>::emplace_back<double>(v13, (uint64_t *)&v38);
      break;
    case 2:
      v11 = *a1;
      LOBYTE(v38) = *(_QWORD *)(a2 + 16) != 0;
      std::vector<applesauce::CF::TypeRef>::emplace_back<BOOL>(v11, &v38);
      break;
    case 3:
      v3 = *a1;
      applesauce::CF::details::parse_object<minijson::const_buffer_context>(&cf, a1[1]);
      v4 = (CFTypeRef *)v3[1];
      v12 = v3[2];
      if ((unint64_t)v4 < v12)
        goto LABEL_14;
      v21 = ((uint64_t)v4 - *v3) >> 3;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 61)
        std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
      v23 = v12 - *v3;
      if (v23 >> 2 > v22)
        v22 = v23 >> 2;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      v42 = v3 + 2;
      if (v24)
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v3 + 2), v24);
      else
        v25 = 0;
      v34 = (CFTypeRef *)&v25[8 * v21];
      v38 = v25;
      v39 = v34;
      v41 = &v25[8 * v24];
      *v34 = cf;
      cf = 0;
      v40 = v34 + 1;
      std::vector<applesauce::CF::TypeRef>::__swap_out_circular_buffer(v3, &v38);
      v35 = v3[1];
      std::__split_buffer<applesauce::CF::TypeRef>::~__split_buffer(&v38);
      v33 = cf;
      v3[1] = v35;
      if (v33)
        goto LABEL_36;
      break;
    case 4:
      v3 = *a1;
      applesauce::CF::details::parse_array<minijson::const_buffer_context>(&cf, a1[1]);
      v4 = (CFTypeRef *)v3[1];
      v5 = v3[2];
      if ((unint64_t)v4 < v5)
      {
LABEL_14:
        *v4 = cf;
        v3[1] = (uint64_t)(v4 + 1);
      }
      else
      {
        v6 = ((uint64_t)v4 - *v3) >> 3;
        v7 = v6 + 1;
        if ((unint64_t)(v6 + 1) >> 61)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v8 = v5 - *v3;
        if (v8 >> 2 > v7)
          v7 = v8 >> 2;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
          v9 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        v42 = v3 + 2;
        if (v9)
          v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v3 + 2), v9);
        else
          v10 = 0;
        v31 = (CFTypeRef *)&v10[8 * v6];
        v38 = v10;
        v39 = v31;
        v41 = &v10[8 * v9];
        *v31 = cf;
        cf = 0;
        v40 = v31 + 1;
        std::vector<applesauce::CF::TypeRef>::__swap_out_circular_buffer(v3, &v38);
        v32 = v3[1];
        std::__split_buffer<applesauce::CF::TypeRef>::~__split_buffer(&v38);
        v33 = cf;
        v3[1] = v32;
        if (v33)
LABEL_36:
          CFRelease(v33);
      }
      break;
    case 5:
      v14 = *a1;
      v15 = (_QWORD *)(*a1)[1];
      v16 = *a1;
      v19 = v16[2];
      v17 = (uint64_t)(v16 + 2);
      v18 = v19;
      if ((unint64_t)v15 >= v19)
      {
        v26 = ((uint64_t)v15 - *v14) >> 3;
        if ((unint64_t)(v26 + 1) >> 61)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v27 = v18 - *v14;
        v28 = v27 >> 2;
        if (v27 >> 2 <= (unint64_t)(v26 + 1))
          v28 = v26 + 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v28;
        v42 = (uint64_t *)v17;
        if (v29)
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v17, v29);
        else
          v30 = 0;
        v36 = &v30[8 * v26];
        v38 = v30;
        v39 = (CFTypeRef *)v36;
        v41 = &v30[8 * v29];
        *(_QWORD *)v36 = 0;
        v40 = v36 + 8;
        std::vector<applesauce::CF::TypeRef>::__swap_out_circular_buffer(v14, &v38);
        v20 = (_QWORD *)v14[1];
        std::__split_buffer<applesauce::CF::TypeRef>::~__split_buffer(&v38);
      }
      else
      {
        *v15 = 0;
        v20 = v15 + 1;
        v14[1] = (uint64_t)v20;
      }
      v14[1] = (uint64_t)v20;
      break;
    default:
      return;
  }
}

void sub_191CC1474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, void *a10)
{
  std::__split_buffer<applesauce::CF::TypeRef>::~__split_buffer(&a10);
  applesauce::CF::TypeRef::~TypeRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<applesauce::CF::TypeRef>::emplace_back<char const*>(uint64_t *a1, char **a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *v15;
  applesauce::CF::TypeRef *v16;
  applesauce::CF::TypeRef *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = (uint64_t)(v7 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v10 = v5 - *a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v19 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
    else
      v13 = 0;
    v15 = v13;
    v16 = (applesauce::CF::TypeRef *)&v13[8 * v9];
    v17 = v16;
    v18 = &v13[8 * v12];
    applesauce::CF::TypeRef::TypeRef(v16, *a2);
    v17 = (applesauce::CF::TypeRef *)((char *)v16 + 8);
    std::vector<applesauce::CF::TypeRef>::__swap_out_circular_buffer(a1, &v15);
    v8 = a1[1];
    std::__split_buffer<applesauce::CF::TypeRef>::~__split_buffer(&v15);
  }
  else
  {
    applesauce::CF::TypeRef::TypeRef(*(applesauce::CF::TypeRef **)(v4 - 8), *a2);
    v8 = v7 + 8;
    a1[1] = v7 + 8;
  }
  a1[1] = v8;
  return v8 - 8;
}

void sub_191CC15A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

CFNumberRef *std::vector<applesauce::CF::TypeRef>::emplace_back<double>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  CFNumberRef *v6;
  CFNumberRef *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void *v14;
  CFNumberRef *v15;
  CFNumberRef *v16;
  char *v17;
  uint64_t *v18;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = (CFNumberRef *)a1[1];
  if ((unint64_t)v6 >= v4)
  {
    v8 = ((uint64_t)v6 - *a1) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v9 = v4 - *a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    v18 = a1 + 2;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), v11);
    else
      v12 = 0;
    v14 = v12;
    v15 = (CFNumberRef *)&v12[8 * v8];
    v17 = &v12[8 * v11];
    std::allocator<applesauce::CF::TypeRef>::construct[abi:ne180100]<applesauce::CF::TypeRef,double>(v5, v15, a2);
    v16 = v15 + 1;
    std::vector<applesauce::CF::TypeRef>::__swap_out_circular_buffer(a1, &v14);
    v7 = (CFNumberRef *)a1[1];
    std::__split_buffer<applesauce::CF::TypeRef>::~__split_buffer(&v14);
  }
  else
  {
    std::allocator<applesauce::CF::TypeRef>::construct[abi:ne180100]<applesauce::CF::TypeRef,double>((uint64_t)(a1 + 2), v6, a2);
    v7 = v6 + 1;
    a1[1] = (uint64_t)(v6 + 1);
  }
  a1[1] = (uint64_t)v7;
  return v7 - 1;
}

void sub_191CC16C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<applesauce::CF::TypeRef>::emplace_back<BOOL>(uint64_t *a1, _BYTE *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  void *v18[5];

  v6 = a1[2];
  v4 = a1 + 2;
  v5 = v6;
  v7 = (_QWORD *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v10 = ((uint64_t)v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v18[4] = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v4, v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[8 * v13];
    if (*a2)
      v16 = (_QWORD *)MEMORY[0x1E0C9AE50];
    else
      v16 = (_QWORD *)MEMORY[0x1E0C9AE40];
    *(_QWORD *)v15 = *v16;
    v18[2] = v15 + 8;
    std::vector<applesauce::CF::TypeRef>::__swap_out_circular_buffer(a1, v18);
    v9 = (_QWORD *)a1[1];
    std::__split_buffer<applesauce::CF::TypeRef>::~__split_buffer(v18);
  }
  else
  {
    if (*a2)
      v8 = (_QWORD *)MEMORY[0x1E0C9AE50];
    else
      v8 = (_QWORD *)MEMORY[0x1E0C9AE40];
    *v7 = *v8;
    v9 = v7 + 1;
    a1[1] = (uint64_t)v9;
  }
  a1[1] = (uint64_t)v9;
  return v9 - 1;
}

void sub_191CC1800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<applesauce::CF::TypeRef>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<applesauce::CF::TypeRef>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<applesauce::CF::TypeRef>,std::reverse_iterator<applesauce::CF::TypeRef*>,std::reverse_iterator<applesauce::CF::TypeRef*>,std::reverse_iterator<applesauce::CF::TypeRef*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<applesauce::CF::TypeRef>,std::reverse_iterator<applesauce::CF::TypeRef*>,std::reverse_iterator<applesauce::CF::TypeRef*>,std::reverse_iterator<applesauce::CF::TypeRef*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *--a3;
      *(_QWORD *)(v8 - 8) = v9;
      v8 -= 8;
      *a3 = 0;
      v7 -= 8;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<applesauce::CF::TypeRef>,std::reverse_iterator<applesauce::CF::TypeRef*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<applesauce::CF::TypeRef>,std::reverse_iterator<applesauce::CF::TypeRef*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<applesauce::CF::TypeRef>,std::reverse_iterator<applesauce::CF::TypeRef*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<applesauce::CF::TypeRef>,std::reverse_iterator<applesauce::CF::TypeRef*>>::operator()[abi:ne180100](uint64_t *a1)
{
  CFTypeRef *v1;
  CFTypeRef *v2;
  uint64_t v3;

  v1 = *(CFTypeRef **)(a1[2] + 8);
  v2 = *(CFTypeRef **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
      std::allocator<applesauce::CF::TypeRef>::destroy[abi:ne180100](v3, v1++);
    while (v1 != v2);
  }
}

void std::allocator<applesauce::CF::TypeRef>::destroy[abi:ne180100](uint64_t a1, CFTypeRef *a2)
{
  if (*a2)
    CFRelease(*a2);
}

void **std::__split_buffer<applesauce::CF::TypeRef>::~__split_buffer(void **a1)
{
  std::__split_buffer<applesauce::CF::TypeRef>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<applesauce::CF::TypeRef>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 8;
    std::allocator<applesauce::CF::TypeRef>::destroy[abi:ne180100](v4, (CFTypeRef *)(i - 8));
  }
}

CFNumberRef std::allocator<applesauce::CF::TypeRef>::construct[abi:ne180100]<applesauce::CF::TypeRef,double>(uint64_t a1, CFNumberRef *a2, uint64_t *a3)
{
  CFNumberRef result;
  std::runtime_error *exception;
  uint64_t valuePtr;

  valuePtr = *a3;
  result = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  *a2 = result;
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_191CC1AAC(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

void std::vector<applesauce::CF::TypeRef>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  CFTypeRef *v2;
  CFTypeRef *v4;
  void *v5;

  v1 = *a1;
  v2 = (CFTypeRef *)**a1;
  if (v2)
  {
    v4 = (CFTypeRef *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::allocator<applesauce::CF::TypeRef>::destroy[abi:ne180100]((uint64_t)(v1 + 2), --v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

double minijson::detail::read_value<minijson::const_buffer_context>@<D0>(minijson::detail::buffer_context_base *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v5;
  double result;
  const char *v7;
  char v8;
  __int128 v9;
  _OWORD v10[2];

  switch(a2)
  {
    case '"':
      *((_QWORD *)this + 7) = *((_QWORD *)this + 3) + *((_QWORD *)this + 6);
      minijson::detail::read_quoted_string<minijson::const_buffer_context>(this, 1);
      v7 = (const char *)*((_QWORD *)this + 7);
      *(_DWORD *)a3 = 0;
      *(_WORD *)(a3 + 4) = 0;
LABEL_8:
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = v7;
      *(_BYTE *)(a3 + 32) = 0;
      return result;
    case '[':
      v5 = 4;
      goto LABEL_7;
    case '{':
      v5 = 3;
LABEL_7:
      *(_DWORD *)a3 = v5;
      *(_WORD *)(a3 + 4) = 0;
      v7 = "";
      goto LABEL_8;
  }
  *((_QWORD *)this + 7) = *((_QWORD *)this + 3) + *((_QWORD *)this + 6);
  v8 = minijson::detail::read_unquoted_value<minijson::const_buffer_context>(this, a2);
  minijson::detail::parse_unquoted_value<minijson::const_buffer_context>((uint64_t)this, (uint64_t)v10);
  result = *(double *)v10;
  v9 = v10[1];
  *(_OWORD *)a3 = v10[0];
  *(_OWORD *)(a3 + 16) = v9;
  *(_BYTE *)(a3 + 32) = v8;
  return result;
}

uint64_t minijson::detail::read_unquoted_value<minijson::const_buffer_context>(minijson::detail::buffer_context_base *this, int a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *exception;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (a2)
    minijson::detail::buffer_context_base::write(this, a2);
  v3 = *((_QWORD *)this + 5);
  if (v3 >= *((_QWORD *)this + 4))
    goto LABEL_19;
  v4 = MEMORY[0x1E0C80978];
  while (1)
  {
    v5 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 5) = v3 + 1;
    v6 = *(unsigned __int8 *)(v5 + v3);
    v7 = (char)v6;
    if (v6 <= 92)
    {
      if (v6 == 44)
        goto LABEL_18;
      if (!v6)
        goto LABEL_19;
    }
    else if (v6 == 93 || v6 == 125)
    {
      goto LABEL_18;
    }
    if ((v7 & 0x80000000) == 0)
    {
      if ((*(_DWORD *)(v4 + 4 * v7 + 60) & 0x4000) != 0)
        break;
      goto LABEL_15;
    }
    if (__maskrune((char)v6, 0x4000uLL))
      break;
LABEL_15:
    minijson::detail::buffer_context_base::write(this, v7);
    v3 = *((_QWORD *)this + 5);
    if (v3 >= *((_QWORD *)this + 4))
      goto LABEL_19;
  }
  if (!(_DWORD)v7)
  {
LABEL_19:
    exception = __cxa_allocate_exception(0x18uLL);
    v10 = *((_QWORD *)this + 5);
    v11 = v10 != 0;
    v12 = v10 - 1;
    if (!v11)
      v12 = 0;
    *exception = &unk_1E2DF3148;
    exception[1] = v12;
    *((_DWORD *)exception + 4) = 7;
  }
LABEL_18:
  minijson::detail::buffer_context_base::write(this, 0);
  return v7;
}

uint64_t minijson::detail::parse_unquoted_value<minijson::const_buffer_context>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  uint64_t result;

  v3 = *(char **)(a1 + 56);
  result = strcmp(v3, "true");
  if ((_DWORD)result)
  {
    result = strcmp(v3, "false");
    if ((_DWORD)result)
    {
      result = strcmp(v3, "null");
      if ((_DWORD)result)
      {
        result = minijson::detail::parse_long((minijson::detail *)v3, (const char *)0xA);
        *(_DWORD *)a2 = 1;
        *(_BYTE *)(a2 + 4) = 1;
        *(_BYTE *)(a2 + 5) = 1;
        *(_QWORD *)(a2 + 8) = v3;
        *(_QWORD *)(a2 + 16) = result;
        *(double *)(a2 + 24) = (double)result;
        return result;
      }
      *(_DWORD *)a2 = 5;
      *(_WORD *)(a2 + 4) = 0;
    }
    else
    {
      *(_DWORD *)a2 = 2;
      *(_WORD *)(a2 + 4) = 257;
    }
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = v3;
  }
  else
  {
    *(_DWORD *)a2 = 2;
    *(_WORD *)(a2 + 4) = 257;
    *(_QWORD *)(a2 + 8) = v3;
    *(_QWORD *)(a2 + 16) = 1;
    *(_QWORD *)(a2 + 24) = 0x3FF0000000000000;
  }
  return result;
}

void sub_191CC1E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  minijson::detail *v10;
  const char *v11;

  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    minijson::detail::parse_double(v10, v11);
    __cxa_end_catch();
    JUMPOUT(0x191CC1DBCLL);
  }
  _Unwind_Resume(exception_object);
}

double minijson::detail::parse_double(minijson::detail *this, const char *a2)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  double v7;
  int *v8;
  int v9;
  void *exception;
  char *v12;

  if (!this)
    goto LABEL_12;
  v3 = *(unsigned __int8 *)this;
  if (!*(_BYTE *)this)
    goto LABEL_12;
  v4 = 1;
  do
  {
    if ((v3 & 0x80) != 0 || (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v3 + 60) & 0x400) == 0)
    {
      v5 = v3 - 43;
      if (v5 > 0x3A || ((1 << v5) & 0x40000000400000DLL) == 0)
        goto LABEL_12;
    }
    v3 = *((unsigned __int8 *)this + v4++);
  }
  while (v3);
  v6 = *__error();
  *__error() = 0;
  v12 = 0;
  v7 = strtod((const char *)this, &v12);
  v8 = __error();
  v9 = *v8;
  *v8 = v6;
  if (*v12 || v9 == 34)
  {
LABEL_12:
    exception = __cxa_allocate_exception(1uLL);
  }
  return v7;
}

uint64_t std::vector<applesauce::CF::TypeRefPair>::emplace_back<std::string const&,applesauce::CF::TypeRef const&>(uint64_t *a1, const UInt8 *a2, const void **a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  void *v17;
  CFStringRef *v18;
  CFStringRef *v19;
  char *v20;
  uint64_t v21;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 8);
  if (v9 >= v8)
  {
    v11 = (uint64_t)(v9 - *a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v12 = v7 - *a1;
    v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v21 = v6;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>(v6, v14);
    else
      v15 = 0;
    v17 = v15;
    v18 = (CFStringRef *)&v15[16 * v11];
    v20 = &v15[16 * v14];
    applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,applesauce::CF::TypeRef const&>(v18, a2, a3);
    v19 = v18 + 2;
    std::vector<applesauce::CF::TypeRefPair>::__swap_out_circular_buffer(a1, &v17);
    v10 = a1[1];
    std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer(&v17);
  }
  else
  {
    applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,applesauce::CF::TypeRef const&>(*(CFStringRef **)(v6 - 8), a2, a3);
    v10 = v9 + 16;
    a1[1] = v9 + 16;
  }
  a1[1] = v10;
  return v10 - 16;
}

void sub_191CC20C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

CFStringRef *applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,applesauce::CF::TypeRef const&>(CFStringRef *a1, const UInt8 *a2, const void **a3)
{
  CFIndex v5;
  CFIndex v6;
  CFStringRef v7;
  const __CFString *v8;
  std::runtime_error *exception;

  v5 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v6 = v5;
  }
  v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = (const __CFString *)*a3;
  if (v8)
    CFRetain(v8);
  a1[1] = v8;
  return a1;
}

void sub_191CC2190(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,applesauce::CF::TypeRef>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void applesauce::CF::convert_to<std::map<std::string,int>,0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID TypeID;
  std::runtime_error *exception;

  if (!a1 || (TypeID = CFDictionaryGetTypeID(), TypeID != CFGetTypeID(a1)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::details::CFDictionary_get_value_to<std::map<std::string,int>>((const __CFDictionary *)a1, a2);
}

void sub_191CC2280(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::details::CFDictionary_get_value_to<std::map<std::string,int>>(const __CFDictionary *a1@<X0>, uint64_t a2@<X8>)
{
  CFIndex Count;
  uint64_t i;
  int v6;
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  int v11;
  void **values[3];
  void *v13[3];

  Count = CFDictionaryGetCount(a1);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  std::vector<void const*>::vector(v13, Count);
  std::vector<void const*>::vector(values, Count);
  CFDictionaryGetKeysAndValues(a1, (const void **)v13[0], (const void **)values[0]);
  if (Count)
  {
    for (i = 0; i != Count; ++i)
    {
      applesauce::CF::convert_to<std::string,0>(*((const __CFString **)v13[0] + i), (uint64_t)v7);
      v6 = applesauce::CF::convert_to<int,0>((const __CFNumber *)values[0][i]);
      *(_OWORD *)__p = *(_OWORD *)v7;
      v10 = v8;
      v7[1] = 0;
      v8 = 0;
      v7[0] = 0;
      v11 = v6;
      std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int>>((uint64_t **)a2, (const void **)__p, (uint64_t)__p);
      if (SHIBYTE(v10) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8) < 0)
        operator delete(v7[0]);
    }
  }
  if (values[0])
  {
    values[1] = values[0];
    operator delete(values[0]);
  }
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
}

void sub_191CC23A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  void *v27;

  if (__p)
    operator delete(__p);
  v27 = *(void **)(v25 - 56);
  if (v27)
  {
    *(_QWORD *)(v25 - 48) = v27;
    operator delete(v27);
  }
  std::__tree<std::string>::destroy(v24, *(char **)(v24 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::pair<std::string const,int> const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

uint64_t applesauce::CF::convert_to<int,0>(const __CFNumber *a1)
{
  uint64_t result;
  std::runtime_error *exception;

  result = applesauce::CF::convert_as<int,0>(a1);
  if ((result & 0xFF00000000) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_191CC24E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::SentenceTagger::setLocale(CoreNLP::TaggerContext **this, const __CFLocale *a2)
{
  CoreNLP::Tagger::setLocale(this, a2);
  return CoreNLP::SentenceTagger::resetICUSentenceBreak((CoreNLP::SentenceTagger *)this, a2);
}

uint64_t CoreNLP::SentenceTagger::setLocaleConstraints(CoreNLP::TaggerContext **this, const __CFArray *a2)
{
  uint64_t result;
  const __CFLocale *ValueAtIndex;

  result = CoreNLP::Tagger::setLocaleConstraints(this, a2);
  if (a2)
  {
    result = CFArrayGetCount(a2);
    if (result == 1)
    {
      ValueAtIndex = (const __CFLocale *)CFArrayGetValueAtIndex(a2, 0);
      return CoreNLP::SentenceTagger::resetICUSentenceBreak((CoreNLP::SentenceTagger *)this, ValueAtIndex);
    }
  }
  return result;
}

uint64_t CoreNLP::SentenceTagger::setTokenizerOptions(CoreNLP::SentenceTagger *this, uint64_t a2)
{
  char v2;
  uint64_t result;

  v2 = a2;
  result = CoreNLP::Tagger::setTokenizerOptions((uint64_t)this, a2);
  *((_BYTE *)this + 40) = (v2 & 2) != 0;
  return result;
}

uint64_t CoreNLP::SentenceTagger::fastEnumerateTokens(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CoreNLP::ICUTextBreak::fastEnumerateTokens(*(_QWORD *)(a1 + 48), a2, a3);
}

uint64_t CoreNLP::SentenceTagger::enumerateTokens(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CoreNLP::ICUTextBreak::enumerateTokens(*(_QWORD *)(a1 + 48), a2, a3, a4, a5);
}

uint64_t CoreNLP::SentenceTagger::goToTokenAtIndex(CoreNLP::SentenceTagger *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6));
}

uint64_t CoreNLP::_CFInit_NLEmbeddingSubwordVocabWrapper(uint64_t this, const void *a2)
{
  *(_QWORD *)(this + 16) = &unk_1E2DF2D58;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreNLP::createSPVocabWrapper(uint64_t *a1)
{
  unsigned __int8 v2;
  uint64_t Instance;
  uint64_t v4;
  uint64_t v5;

  CFAllocatorGetDefault();
  if ((v2 & 1) == 0
  {
    qword_1EE21ACE0 = 0;
    unk_1EE21ACF0 = 0u;
    unk_1EE21AD00 = 0u;
    CoreNLP::_CFGetTypeID_NLEmbeddingSubwordVocabWrapper(void)::typeID = _CFRuntimeRegisterClass();
  }
  Instance = _CFRuntimeCreateInstance();
  v4 = *a1;
  *a1 = 0;
  v5 = *(_QWORD *)(Instance + 24);
  *(_QWORD *)(Instance + 24) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return Instance;
}

void sub_191CC26EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreNLP::NLEmbeddingSubwordVocabWrapper::~NLEmbeddingSubwordVocabWrapper(CoreNLP::NLEmbeddingSubwordVocabWrapper *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &unk_1E2DF2D58;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &unk_1E2DF2D58;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
  JUMPOUT(0x19401E994);
}

double CoreNLP::NLAttributedToken::NLAttributedToken(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  result = 0.0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 108) = 1;
  return result;
}

void CoreNLP::NLAttributedToken::~NLAttributedToken(void **this)
{
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::destroy((uint64_t)(this + 6), this[7]);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)(this + 3), this[4]);
}

uint64_t corelm::LanguageModelSampler::reachedWordBoundary(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *p_p;
  uint64_t v25;
  void *__p;
  uint64_t v28;
  unsigned __int8 v29;
  void *v30;
  char v31;

  v7 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2) + 120);
  if (*(char *)(v7 + 55) < 0)
  {
    v8 = *(_QWORD *)(v7 + 32);
    v9 = *(_QWORD *)(v7 + 40);
  }
  else
  {
    v8 = v7 + 32;
    v9 = *(unsigned __int8 *)(v7 + 55);
  }
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, v8, v9);
  v11 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2) + 120);
  if (*(char *)(v11 + 31) < 0)
  {
    v12 = *(_QWORD *)(v11 + 8);
    v13 = *(_QWORD *)(v11 + 16);
  }
  else
  {
    v12 = v11 + 8;
    v13 = *(unsigned __int8 *)(v11 + 31);
  }
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, v12, v13);
  v15 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2) + 120);
  if (*(char *)(v15 + 79) < 0)
  {
    v16 = *(_QWORD *)(v15 + 56);
    v17 = *(_QWORD *)(v15 + 64);
  }
  else
  {
    v16 = v15 + 56;
    v17 = *(unsigned __int8 *)(v15 + 79);
  }
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 32))(v15, v16, v17);
  if (v10 == a4 || v14 == a4 || v18 == a4)
    return 1;
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v22 + 120) + 40))(&v30, *(_QWORD *)(v22 + 120), a4);
  if (*a3 == a3[1])
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
  }
  else
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD *))(**(_QWORD **)(v23 + 120) + 24))(&__p, *(_QWORD *)(v23 + 120), a3);
  }
  if ((char)v29 < 0)
  {
    v25 = v28;
    if (!v28)
      goto LABEL_30;
    p_p = (char *)__p;
  }
  else
  {
    if (!v29)
      goto LABEL_30;
    p_p = (char *)&__p;
    v25 = v29;
  }
  if (p_p[v25 - 1] != 32)
  {
LABEL_30:
    v21 = 0;
    if ((v29 & 0x80) == 0)
      goto LABEL_32;
    goto LABEL_31;
  }
  v21 = 1;
  if ((v29 & 0x80) == 0)
    goto LABEL_32;
LABEL_31:
  operator delete(__p);
LABEL_32:
  if (v31 < 0)
    operator delete(v30);
  return v21;
}

void sub_191CC2A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void corelm::GreedySampler::sampleWords(corelm::GreedySampler *this@<X0>, corelm::LanguageModelWithState *a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  float *v7;
  float v8;
  char *v9;
  uint64_t v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  float v28;
  int v29;
  uint64_t **v31;
  float *v32;
  void *__p;
  void *v34;
  unsigned __int8 v35;
  CFTypeRef v36[2];
  char v37;
  uint64_t v38[5];
  float v39;
  void *v40;
  char *v41;
  char *v42;
  float *v43;
  float *v44;
  void **p_p;

  a4[2] = 0;
  a4[1] = 0;
  *a4 = (uint64_t *)(a4 + 1);
  (*(void (**)(float **__return_ptr, corelm::LanguageModelWithState *, _QWORD))(*(_QWORD *)a2 + 120))(&v43, a2, *((unsigned int *)this + 2));
  v7 = v43;
  v32 = v44;
  if (v43 == v44)
    goto LABEL_48;
  v31 = a4;
  while (1)
  {
    v8 = *v7;
    v9 = (char *)*((_QWORD *)v7 + 1);
    if (a3 != 1)
      break;
    v10 = (*(uint64_t (**)(corelm::LanguageModelWithState *))(*(_QWORD *)a2 + 112))(a2);
    (*(void (**)(CFTypeRef *__return_ptr, _QWORD, char *))(**(_QWORD **)(v10 + 120) + 40))(v36, *(_QWORD *)(v10 + 120), v9);
    if (v37 < 0)
    {
      v11 = v36[1];
      operator delete((void *)v36[0]);
      if (v11)
        break;
    }
    else if (v37)
    {
      break;
    }
LABEL_43:
    v7 += 4;
    if (v7 == v32)
      goto LABEL_47;
  }
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v39 = 1.0;
  corelm::LanguageModelWithState::LanguageModelWithState((corelm::LanguageModelWithState *)v36, a2, 1);
  v12 = 0;
  while (v12 != a3)
  {
    if ((unint64_t)++v12 >= 2)
    {
      corelm::util::topKWithIndices<float,unsigned long>(v38, 1, (uint64_t)&__p);
      v8 = *(float *)__p;
      v9 = (char *)*((_QWORD *)__p + 1);
      v34 = __p;
      operator delete(__p);
    }
    v13 = *(_QWORD *)(v38[3] + 120);
    if (*(char *)(v13 + 55) < 0)
    {
      v14 = *(_QWORD *)(v13 + 32);
      v15 = *(_QWORD *)(v13 + 40);
    }
    else
    {
      v14 = v13 + 32;
      v15 = *(unsigned __int8 *)(v13 + 55);
    }
    v16 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, v14, v15);
    if (v9 == v16)
    {
      v39 = v8 * v39;
      break;
    }
    v17 = v41;
    if (v41 >= v42)
    {
      v16 = (char *)v40;
      v19 = (v41 - (_BYTE *)v40) >> 3;
      v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 61)
        std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
      v21 = v42 - (_BYTE *)v40;
      if ((v42 - (_BYTE *)v40) >> 2 > v20)
        v20 = v21 >> 2;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v20;
      if (v22)
      {
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v42, v22);
        v16 = (char *)v40;
        v17 = v41;
      }
      else
      {
        v23 = 0;
      }
      v24 = &v23[8 * v19];
      *(_QWORD *)v24 = v9;
      v18 = v24 + 8;
      while (v17 != v16)
      {
        v25 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v24 - 1) = v25;
        v24 -= 8;
      }
      v40 = v24;
      v41 = v18;
      v42 = &v23[8 * v22];
      if (v16)
        operator delete(v16);
    }
    else
    {
      *(_QWORD *)v41 = v9;
      v18 = v17 + 8;
    }
    v41 = v18;
    v39 = v8 * v39;
    corelm::GreedySampler::sampleToWordBoundary((uint64_t)v16, (uint64_t)v36, (uint64_t)&v40, &v39);
  }
  v26 = (*(uint64_t (**)(corelm::LanguageModelWithState *))(*(_QWORD *)a2 + 112))(a2);
  (*(void (**)(void **__return_ptr, _QWORD, void **))(**(_QWORD **)(v26 + 120) + 24))(&__p, *(_QWORD *)(v26 + 120), &v40);
  v27 = v35;
  if ((v35 & 0x80u) != 0)
    v27 = (unint64_t)v34;
  if (v27)
  {
    v28 = v39;
    p_p = &__p;
    *((float *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, (const void **)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p)+ 14) = v28;
    v29 = 2 * ((unint64_t)v31[2] >= *((int *)this + 2));
    if ((v35 & 0x80) == 0)
      goto LABEL_39;
    goto LABEL_38;
  }
  v29 = 3;
  if ((v35 & 0x80) != 0)
LABEL_38:
    operator delete(__p);
LABEL_39:
  corelm::LanguageModelWithState::~LanguageModelWithState(v36);
  if (v40)
  {
    v41 = (char *)v40;
    operator delete(v40);
  }
  if (v29 == 3 || !v29)
    goto LABEL_43;
LABEL_47:
  v7 = v43;
LABEL_48:
  if (v7)
  {
    v44 = v7;
    operator delete(v7);
  }
}

void sub_191CC2D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  uint64_t v32;

  std::__tree<std::string>::destroy(v32, *(char **)(v32 + 8));
  _Unwind_Resume(a1);
}

void corelm::GreedySampler::sampleToWordBoundary(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  float v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *__p;
  void *v31;
  _QWORD *v32;

  v7 = a3 + 16;
  v8 = *(_QWORD **)(a3 + 8);
  v9 = 49;
  do
  {
    if (*(_QWORD **)a3 != v8)
    {
      v10 = *(v8 - 1);
      v11 = operator new(8uLL);
      __p = v11;
      *v11 = v10;
      v31 = v11 + 1;
      v32 = v11 + 1;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, &__p);
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
    }
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(&__p, a2, 1);
    v12 = *(float *)__p;
    v13 = *((_QWORD *)__p + 1);
    v31 = __p;
    operator delete(__p);
    v28 = 0;
    v29 = 0;
    v27 = 0;
    v14 = std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(&v27, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
    v15 = corelm::LanguageModelSampler::reachedWordBoundary((uint64_t)v14, a2, &v27, v13);
    if (v27)
    {
      v28 = v27;
      operator delete(v27);
    }
    if ((v15 & 1) != 0)
      break;
    v17 = *(uint64_t **)(a3 + 8);
    v16 = *(_QWORD *)(a3 + 16);
    if ((unint64_t)v17 >= v16)
    {
      v18 = *(uint64_t **)a3;
      v19 = ((uint64_t)v17 - *(_QWORD *)a3) >> 3;
      v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 61)
        std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
      v21 = v16 - (_QWORD)v18;
      if (v21 >> 2 > v20)
        v20 = v21 >> 2;
      v22 = (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v20;
      if (v22)
      {
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v7, v22);
        v18 = *(uint64_t **)a3;
        v17 = *(uint64_t **)(a3 + 8);
      }
      else
      {
        v23 = 0;
      }
      v24 = (uint64_t *)&v23[8 * v19];
      *v24 = v13;
      v8 = v24 + 1;
      while (v17 != v18)
      {
        v25 = *--v17;
        *--v24 = v25;
      }
      *(_QWORD *)a3 = v24;
      *(_QWORD *)(a3 + 8) = v8;
      *(_QWORD *)(a3 + 16) = &v23[8 * v22];
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v17 = v13;
      v8 = v17 + 1;
    }
    *(_QWORD *)(a3 + 8) = v8;
    *a4 = v12 * *a4;
    v26 = v9-- != 0;
  }
  while (v9 != 0 && v26);
}

void sub_191CC2FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void corelm::TopKSampler::sampleWords(corelm::TopKSampler *this@<X0>, corelm::LanguageModelWithState *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  unint64_t v9;
  unsigned __int8 v10;
  int v11;
  void *__p[2];
  unsigned __int8 v13;
  CFTypeRef v14[12];

  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)a4 = a4 + 8;
  v8 = -1;
  do
  {
    if (*(_QWORD *)(a4 + 16) >= (unint64_t)*((int *)this + 3))
      break;
    corelm::LanguageModelWithState::LanguageModelWithState((corelm::LanguageModelWithState *)v14, a2, 1);
    corelm::TopKSampler::sampleWordsSingle(this, (corelm::LanguageModelWithState *)v14, a3, (uint64_t)__p);
    v9 = v13;
    v10 = v13;
    if ((v13 & 0x80u) != 0)
      v9 = (unint64_t)__p[1];
    if (v9)
    {
      std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::pair<std::string,float> &>((uint64_t **)a4, (const void **)__p, (uint64_t)__p);
      v10 = v13;
    }
    v11 = *((_DWORD *)this + 3);
    if ((v10 & 0x80) != 0)
      operator delete(__p[0]);
    corelm::LanguageModelWithState::~LanguageModelWithState(v14);
    ++v8;
  }
  while (v8 < 2 * v11);
}

void sub_191CC30D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, CFTypeRef a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  corelm::LanguageModelWithState::~LanguageModelWithState(&a16);
  std::__tree<std::string>::destroy(v16, *(char **)(v16 + 8));
  _Unwind_Resume(a1);
}

void corelm::TopKSampler::sampleWordsSingle(corelm::TopKSampler *this@<X0>, corelm::LanguageModelWithState *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  float v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  float v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  int v21;
  char v22;
  float v23;
  uint64_t v24;
  _QWORD *v25;
  char v26;
  uint64_t v27;
  int v28;
  _BOOL4 v30;
  unsigned __int8 *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  void *v43;
  void *v44;
  char v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *__p;
  void *v56;
  uint64_t v57;
  void *v58;
  __int128 *v59;
  void *v60[2];
  uint64_t v61;
  float v62;
  void *v63;
  char *v64;
  unint64_t v65;
  std::random_device v66;

  corelm::TokenIDSampler::TokenIDSampler(&v66);
  v7 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v62 = 1.0;
  while (v7 != a3)
  {
    (*(void (**)(void **__return_ptr, corelm::LanguageModelWithState *))(*(_QWORD *)a2 + 88))(v60, a2);
    corelm::util::topKWithIndices<float,long>((uint64_t *)v60, *((_DWORD *)this + 2), (uint64_t)&v58);
    __p = 0;
    v56 = 0;
    v57 = 0;
    std::vector<std::pair<float,long>>::__init_with_size[abi:ne180100]<std::pair<float,long>*,std::pair<float,long>*>((char *)&__p, (__int128 *)v58, v59, ((char *)v59 - (_BYTE *)v58) >> 4);
    LODWORD(v8) = corelm::TokenIDSampler::sparseSample((uint64_t)&v66, (float **)&__p, *((float *)this + 4));
    v10 = v9;
    if (__p)
    {
      v56 = __p;
      operator delete(__p);
    }
    v11 = *(_QWORD *)((*(uint64_t (**)(corelm::LanguageModelWithState *))(*(_QWORD *)a2 + 112))(a2) + 120);
    if (*(char *)(v11 + 55) < 0)
    {
      v12 = *(_QWORD *)(v11 + 32);
      v13 = *(_QWORD *)(v11 + 40);
    }
    else
    {
      v12 = v11 + 32;
      v13 = *(unsigned __int8 *)(v11 + 55);
    }
    v14 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, v12, v13);
    v15 = v14;
    ++v7;
    v16 = v8;
    if (v10 == v14)
    {
      v62 = v62 * v8;
    }
    else
    {
      if (v7 < 2)
      {
        v18 = (uint64_t)v10;
      }
      else
      {
        v17 = 3;
        v18 = (uint64_t)v10;
        while (1)
        {
          v52 = 0;
          v53 = 0;
          v54 = 0;
          v19 = std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(&v52, v63, (uint64_t)v64, (v64 - (_BYTE *)v63) >> 3);
          v20 = corelm::LanguageModelSampler::reachedWordBoundary((uint64_t)v19, (uint64_t)a2, &v52, v18);
          v21 = v20;
          if (v17 < 1)
            v22 = 1;
          else
            v22 = v20;
          if (v52)
          {
            v53 = v52;
            operator delete(v52);
          }
          if ((v22 & 1) != 0)
            break;
          v49 = 0;
          v50 = 0;
          v51 = 0;
          std::vector<std::pair<float,long>>::__init_with_size[abi:ne180100]<std::pair<float,long>*,std::pair<float,long>*>((char *)&v49, (__int128 *)v58, v59, ((char *)v59 - (_BYTE *)v58) >> 4);
          LODWORD(v23) = corelm::TokenIDSampler::sparseSample((uint64_t)&v66, (float **)&v49, *((float *)this + 4));
          v18 = v24;
          v17 -= v21 ^ 1;
          v16 = v23;
          if (v49)
          {
            v50 = v49;
            operator delete(v49);
          }
        }
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v25 = std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(&v46, v63, (uint64_t)v64, (v64 - (_BYTE *)v63) >> 3);
        v26 = corelm::LanguageModelSampler::reachedWordBoundary((uint64_t)v25, (uint64_t)a2, &v46, v18);
        v14 = (unsigned __int8 *)v46;
        if (v46)
        {
          v47 = v46;
          operator delete(v46);
        }
        if ((v26 & 1) == 0)
        {
          corelm::util::topKWithIndices<float,long>((uint64_t *)v60, 1, (uint64_t)&v43);
          v16 = *(float *)v43;
          v18 = *((_QWORD *)v43 + 1);
          v44 = v43;
          operator delete(v43);
        }
      }
      if (a3 != 1)
      {
LABEL_40:
        v31 = (unsigned __int8 *)v64;
        if ((unint64_t)v64 >= v65)
        {
          v14 = (unsigned __int8 *)v63;
          v33 = (v64 - (_BYTE *)v63) >> 3;
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 61)
            std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
          v35 = v65 - (_QWORD)v63;
          if ((uint64_t)(v65 - (_QWORD)v63) >> 2 > v34)
            v34 = v35 >> 2;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
            v36 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v36 = v34;
          if (v36)
          {
            v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v65, v36);
            v14 = (unsigned __int8 *)v63;
            v31 = (unsigned __int8 *)v64;
          }
          else
          {
            v37 = 0;
          }
          v38 = (uint64_t *)&v37[8 * v33];
          *v38 = v18;
          v32 = (char *)(v38 + 1);
          while (v31 != v14)
          {
            v39 = *((_QWORD *)v31 - 1);
            v31 -= 8;
            *--v38 = v39;
          }
          v63 = v38;
          v64 = v32;
          v65 = (unint64_t)&v37[8 * v36];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v64 = v18;
          v32 = (char *)(v31 + 8);
        }
        v64 = v32;
        v62 = v16 * v62;
        corelm::GreedySampler::sampleToWordBoundary((uint64_t)v14, (uint64_t)a2, (uint64_t)&v63, &v62);
        goto LABEL_57;
      }
      v27 = (*(uint64_t (**)(corelm::LanguageModelWithState *))(*(_QWORD *)a2 + 112))(a2);
      (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v27 + 120) + 40))(&v43, *(_QWORD *)(v27 + 120), v18);
      if (v45 < 0)
      {
        v14 = (unsigned __int8 *)v43;
        if (!v44)
        {
          operator delete(v43);
          goto LABEL_57;
        }
      }
      else
      {
        if (!v45)
          goto LABEL_57;
        v14 = (unsigned __int8 *)&v43;
      }
      v28 = *v14;
      v30 = v28 == 95 || (v28 & 0xFFFFFFDF) - 65 < 0x1A;
      if (v45 < 0)
      {
        operator delete(v43);
        if (v30)
          goto LABEL_40;
      }
      else if (v30)
      {
        goto LABEL_40;
      }
    }
LABEL_57:
    if (v58)
    {
      v59 = (__int128 *)v58;
      operator delete(v58);
    }
    if (v60[0])
    {
      v60[1] = v60[0];
      operator delete(v60[0]);
    }
    if (v10 == v15)
      break;
  }
  v40 = (*(uint64_t (**)(corelm::LanguageModelWithState *))(*(_QWORD *)a2 + 112))(a2);
  (*(void (**)(void **__return_ptr, _QWORD, void **))(**(_QWORD **)(v40 + 120) + 24))(v60, *(_QWORD *)(v40 + 120), &v63);
  if (SHIBYTE(v61) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a4, (const std::string::value_type *)v60[0], (std::string::size_type)v60[1]);
    v41 = SHIBYTE(v61);
    *(float *)(a4 + 24) = v62;
    if (v41 < 0)
      operator delete(v60[0]);
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)v60;
    *(_QWORD *)(a4 + 16) = v61;
    *(float *)(a4 + 24) = v62;
  }
  if (v63)
  {
    v64 = (char *)v63;
    operator delete(v63);
  }
  std::random_device::~random_device(&v66);
}

void sub_191CC3580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,std::random_device a39)
{
  if (a34 < 0)
    operator delete(__p);
  if (a36)
    operator delete(a36);
  std::random_device::~random_device(&a39);
  _Unwind_Resume(a1);
}

void corelm::util::topKWithIndices<float,long>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  void *__p;
  void *v6;
  void *v7[2];
  uint64_t v8;
  char v9;

  std::vector<std::pair<float,long>>::vector(v7, a2);
  corelm::util::enumerate<float,unsigned long>(a1, &__p);
  _ZNSt3__119__partial_sort_copyB8ne180100INS_17_ClassicAlgPolicyERZN6corelm4util15topKWithIndicesIfmEEDaRKNS_6vectorIT_NS_9allocatorIS7_EEEEiE11PairGreaterNS_11__wrap_iterIPNS_4pairIfmEEEESJ_SJ_SJ_NS_10__identityESK_EENSG_IT1_T3_EESL_T2_SM_T4_OT0_OT5_OT6_((uint64_t)__p, (uint64_t)v6, (uint64_t)v7[0], (uint64_t)v7[1], (uint64_t)&v9);
  *(_OWORD *)a3 = *(_OWORD *)v7;
  *(_QWORD *)(a3 + 16) = v8;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
    if (v7[0])
    {
      v7[1] = v7[0];
      operator delete(v7[0]);
    }
  }
}

void sub_191CC36E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

uint64_t corelm::TokenIDSampler::sparseSample(uint64_t a1, float **a2, float a3)
{
  float *v5;
  float *v6;
  char *v8;
  float v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  float *v17;
  int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v23;
  void *v24;
  uint64_t v25;
  void *__p;
  char *v27;
  char *v28;

  __p = 0;
  v27 = 0;
  v28 = 0;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v10 = 0;
    v19 = 0;
  }
  else
  {
    v8 = 0;
    while (1)
    {
      v9 = *v5;
      a3 = a3 - *v5;
      if (a3 <= 0.0)
        break;
      if (v8 >= v28)
      {
        v11 = (char *)__p;
        v12 = (v8 - (_BYTE *)__p) >> 2;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v14 = v28 - (_BYTE *)__p;
        if ((v28 - (_BYTE *)__p) >> 1 > v13)
          v13 = v14 >> 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v28, v15);
          v11 = (char *)__p;
          v8 = v27;
        }
        else
        {
          v16 = 0;
        }
        v17 = (float *)&v16[4 * v12];
        *v17 = v9;
        v10 = (uint64_t)(v17 + 1);
        while (v8 != v11)
        {
          v18 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v17-- - 1) = v18;
        }
        __p = v17;
        v27 = (char *)v10;
        v28 = &v16[4 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(float *)v8 = v9;
        v10 = (uint64_t)(v8 + 4);
      }
      v27 = (char *)v10;
      v5 += 4;
      v8 = (char *)v10;
      if (v5 == v6)
        goto LABEL_24;
    }
    v10 = (uint64_t)v8;
LABEL_24:
    v19 = __p;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v23, v19, v10, (v10 - (uint64_t)v19) >> 2);
  v20 = corelm::TokenIDSampler::sample(a1, (float **)&v23);
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  v21 = *(_QWORD *)&(*a2)[4 * v20];
  if (__p)
  {
    v27 = (char *)__p;
    operator delete(__p);
  }
  return v21;
}

void sub_191CC38D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void corelm::GreedySampler::~GreedySampler(corelm::GreedySampler *this)
{
  JUMPOUT(0x19401E994);
}

void corelm::TopKSampler::~TopKSampler(corelm::TopKSampler *this)
{
  JUMPOUT(0x19401E994);
}

std::random_device *corelm::TokenIDSampler::TokenIDSampler(std::random_device *this)
{
  std::random_device *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t i;
  int v6;

  v2 = std::random_device::random_device[abi:ne180100](this);
  v3 = MEMORY[0x19401E820](v2);
  this[2].__padding_ = v3;
  v4 = 1;
  for (i = 3; i != 626; ++i)
  {
    v6 = 1812433253 * (v3 ^ (v3 >> 30));
    v3 = v6 + v4;
    this[i].__padding_ = i + v6 - 2;
    ++v4;
  }
  *(_QWORD *)&this[626].__padding_ = 0;
  return this;
}

void sub_191CC39A4(_Unwind_Exception *a1)
{
  std::random_device *v1;

  std::random_device::~random_device(v1);
  _Unwind_Resume(a1);
}

std::random_device *std::random_device::random_device[abi:ne180100](std::random_device *a1)
{
  std::string __token;

  std::string::basic_string[abi:ne180100]<0>(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__token.__r_.__value_.__l.__data_);
  return a1;
}

void sub_191CC3A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::pair<float,long>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<float,unsigned long>>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 16 * a2;
    do
    {
      *(_DWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      v4 += 16;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_191CC3A80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t corelm::TokenIDSampler::sample(uint64_t a1, float **a2)
{
  int v3;
  void *__p[3];

  std::discrete_distribution<int>::param_type::param_type[abi:ne180100]<std::__wrap_iter<float *>>((uint64_t)__p, *a2, a2[1]);
  v3 = std::discrete_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((int)__p, (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)(a1 + 8), (double **)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v3;
}

void sub_191CC3AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::discrete_distribution<int>::param_type::param_type[abi:ne180100]<std::__wrap_iter<float *>>(uint64_t a1, float *a2, float *a3)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)a1, a2, a3, a3 - a2);
  std::discrete_distribution<int>::param_type::__init((double **)a1);
  return a1;
}

void sub_191CC3B50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::discrete_distribution<int>::param_type::__init(double **a1)
{
  double *v1;
  double *v2;
  uint64_t v4;
  double v5;
  double *v6;
  double v7;
  double *v8;
  uint64_t v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  double v14;
  double *v15;
  double *v16;
  __int128 v17;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 != v2)
  {
    if ((unint64_t)((char *)v2 - (char *)v1) < 9)
    {
      a1[1] = v1;
      std::vector<double>::shrink_to_fit((uint64_t)a1);
    }
    else
    {
      v4 = v2 - v1;
      v5 = 0.0;
      v6 = *a1;
      do
      {
        v7 = *v6++;
        v5 = v5 + v7;
      }
      while (v6 != v2);
      while (v1 < v2)
      {
        *v1 = *v1 / v5;
        ++v1;
      }
      std::vector<double>::vector(&v16, v4 - 1);
      v8 = *a1;
      v9 = (uint64_t)(a1[1] - 1);
      v10 = v16;
      if (*a1 != (double *)v9)
      {
        v11 = v8 + 1;
        v12 = *v8;
        *v16 = *v8;
        if (v8 + 1 != (double *)v9)
        {
          v13 = v10 + 1;
          do
          {
            v14 = *v11++;
            v12 = v12 + v14;
            *v13++ = v12;
          }
          while (v11 != (double *)v9);
        }
      }
      *a1 = v10;
      v15 = a1[2];
      *(_OWORD *)(a1 + 1) = v17;
      v16 = v8;
      *((_QWORD *)&v17 + 1) = v15;
      if (v8)
      {
        *(_QWORD *)&v17 = v8;
        operator delete(v8);
      }
    }
  }
}

char *std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(char *result, float *a2, float *a3, unint64_t a4)
{
  char *v6;
  double *v7;
  float v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = (double *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_191CC3CBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<double>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - (uint64_t)v4) >> 3)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 8 * v6;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[8 * v6];
      v11 = &v7[8 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *(_QWORD *)(v12 - 8) = v13;
          v12 -= 8;
        }
        while (v8 != v4);
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_191CC3DE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i;
  size_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;

  i = this->__i_;
  v2 = (i + 1) % 0x270;
  v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)i << 15) & 0xEFC60000 ^ i ^ ((((_DWORD)i << 15) & 0xEFC60000 ^ i) >> 18);
}

uint64_t *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::pair<std::string,float> &>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__construct_node<std::pair<std::string,float> &>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

float std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__construct_node<std::pair<std::string,float> &>@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  float result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  result = *(float *)(a2 + 24);
  *((float *)v6 + 14) = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_191CC3FA4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<float,long>>::__init_with_size[abi:ne180100]<std::pair<float,long>*,std::pair<float,long>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<float,unsigned long>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_191CC4014(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::ICUTextBreakWithBuiltInRules::fastEnumerateTokensWithSpecifiedStop(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  int v9;
  unsigned int RuleStatus;
  uint64_t v11;
  _QWORD v12[3];

  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v8 = ubrk_first();
    do
    {
      result = ubrk_next();
      if ((_DWORD)result == -1)
        break;
      v9 = result;
      v12[0] = *(_QWORD *)(a1 + 16) + v8;
      v12[1] = (int)result - v8;
      RuleStatus = ubrk_getRuleStatus();
      if (*(_DWORD *)(a1 + 84) == 1)
      {
        if (RuleStatus >= 0x64)
        {
          if (RuleStatus - 100 >= 0x64)
            v11 = ((RuleStatus - 300 < 0xC8) & *(_BYTE *)(*(_QWORD *)(a1 + 56) + 2)) != 0 ? 128 : 0;
          else
            v11 = 8;
        }
        else
        {
          v11 = 32;
        }
      }
      else
      {
        v11 = 0;
      }
      v12[2] = v11;
      result = (*(uint64_t (**)(uint64_t, _QWORD *, _BYTE *))(a4 + 16))(a4, v12, a3);
      v8 = v9;
    }
    while (!*a3);
  }
  return result;
}

uint64_t CoreNLP::ICUTextBreakWithBuiltInRules::enumerateTokensWithSpecifiedStop(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6)
{
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v13;
  int v14;
  unsigned int RuleStatus;
  uint64_t v16;
  _QWORD v17[3];

  if (*(_QWORD *)(result + 8))
    v6 = a3 == 0;
  else
    v6 = 1;
  if (!v6 && a2 != -1)
  {
    v8 = result;
    v9 = *(_QWORD *)(result + 16);
    if (a2 >= v9)
    {
      v10 = a2 + a3;
      if (a2 + a3 <= *(_QWORD *)(result + 24) + v9)
      {
        CFStringGetRangeOfComposedCharactersAtIndex(*(CFStringRef *)(result + 64), a2 - v9);
        v13 = ubrk_preceding();
        do
        {
          result = ubrk_next();
          if ((_DWORD)result == -1)
            break;
          v14 = result;
          v17[0] = *(_QWORD *)(v8 + 16) + v13;
          v17[1] = (int)result - v13;
          if (v17[0] >= v10)
            break;
          RuleStatus = ubrk_getRuleStatus();
          if (*(_DWORD *)(v8 + 84) == 1)
          {
            if (RuleStatus >= 0x64)
            {
              if (RuleStatus - 100 >= 0x64)
                v16 = ((RuleStatus - 300 < 0xC8) & *(_BYTE *)(*(_QWORD *)(v8 + 56) + 2)) != 0 ? 128 : 0;
              else
                v16 = 8;
            }
            else
            {
              v16 = 32;
            }
          }
          else
          {
            v16 = 0;
          }
          v17[2] = v16;
          result = (*(uint64_t (**)(uint64_t, _QWORD *, _BYTE *))(a6 + 16))(a6, v17, a5);
          v13 = v14;
        }
        while (!*a5);
      }
    }
  }
  return result;
}

uint64_t CoreNLP::ICUTextBreakWithBuiltInRules::goToTokenAtIndex(CoreNLP::ICUTextBreakWithBuiltInRules *this, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = 0;
  return (*(uint64_t (**)(CoreNLP::ICUTextBreakWithBuiltInRules *, uint64_t, uint64_t, char *))(*(_QWORD *)this + 48))(this, a2, a3, &v4);
}

char *CoreNLP::ICUTextBreakWithBuiltInRules::goToTokenAtIndex(CoreNLP::ICUTextBreakWithBuiltInRules *this, unint64_t a2, uint64_t a3, BOOL *a4)
{
  uint64_t v5;
  CFIndex v6;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int RuleStatus;
  uint64_t v14;

  if (!*((_QWORD *)this + 1))
    return 0;
  v5 = *((_QWORD *)this + 2);
  v6 = a3 - v5;
  if (a3 < v5 || *((_QWORD *)this + 3) + v5 <= a3)
    return 0;
  v8 = (char *)this + 32;
  v7 = *((_QWORD *)this + 4);
  if (v7 <= a3 && *((_QWORD *)this + 5) + v7 > a3)
    return v8;
  CFStringGetRangeOfComposedCharactersAtIndex(*((CFStringRef *)this + 8), v6);
  v9 = ubrk_preceding();
  if (v9 == -1)
    return 0;
  v10 = v9;
  v11 = ubrk_next();
  if (v11 == -1)
    return 0;
  v12 = v11;
  *((_QWORD *)this + 4) = *((_QWORD *)this + 2) + v10;
  *((_QWORD *)this + 5) = v11 - v10;
  RuleStatus = ubrk_getRuleStatus();
  if (*((_DWORD *)this + 21) == 1)
  {
    if (RuleStatus >= 0x64)
    {
      if (RuleStatus - 100 >= 0x64)
      {
        v14 = 128;
        if (((RuleStatus - 300 < 0xC8) & *(_BYTE *)(*((_QWORD *)this + 7) + 2)) == 0)
          v14 = 0;
      }
      else
      {
        v14 = 8;
      }
    }
    else
    {
      v14 = 32;
    }
  }
  else
  {
    v14 = 0;
  }
  *((_QWORD *)this + 6) = v14;
  *((_DWORD *)this + 22) = v12;
  return v8;
}

uint64_t CoreNLP::ICUTextBreakWithBuiltInRules::getCJTextRange(CoreNLP::ICUTextBreakWithBuiltInRules *this, int a2, BOOL *a3)
{
  uint64_t v4;
  uint64_t StringBufferPtr;
  int v6;
  int v7;
  int RuleStatus;
  int v9;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *((_QWORD *)this + 3);
  StringBufferPtr = CoreNLP::ICUTextBreak::getStringBufferPtr(this);
  *a3 = 0;
  v6 = ubrk_previous();
  v7 = ubrk_following();
  RuleStatus = ubrk_getRuleStatus();
  if (v7 != -1)
  {
    v9 = RuleStatus;
    if (!RuleStatus || RuleStatus >= 200)
    {
      v15 = StringBufferPtr;
      while (1)
      {
        v11 = v7;
        v12 = v9;
        v7 = ubrk_next();
        v13 = ubrk_getRuleStatus();
        v9 = v13;
        if (!*a3 && (v13 - 300) <= 0x63)
          *a3 = 1;
        if (v7 == -1 || v13 && v13 < 200)
          break;
        if (!v12)
        {
          v14 = v11 - 1;
          if (v4 > v14)
          {
            if (CoreNLP::ParagraphTagger::IsParagraphSeparatorTypeCharacter((CoreNLP::ParagraphTagger *)*(unsigned __int16 *)(v15 + 2 * v14)))
              break;
          }
        }
      }
    }
  }
  return v6;
}

uint64_t NLGazetteerCreate(const __CFDictionary *a1)
{
  CoreNLP::Gazetteer *v2;
  uint64_t GazetteerWrapper;
  uint64_t v4;
  CoreNLP::Gazetteer *v6;

  v2 = (CoreNLP::Gazetteer *)operator new();
  CoreNLP::Gazetteer::Gazetteer(v2, a1);
  v6 = v2;
  GazetteerWrapper = CoreNLP::createGazetteerWrapper((uint64_t *)&v6);
  v4 = (uint64_t)v6;
  v6 = 0;
  if (v4)
    std::default_delete<CoreNLP::Gazetteer>::operator()[abi:ne180100]((uint64_t)&v6, v4);
  return GazetteerWrapper;
}

void sub_191CC4580(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFStringRef a10, CFMutableDictionaryRef theDict, uint64_t a12)
{
  CFErrorRef *v12;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;

  v15 = a12;
  a12 = 0;
  if (v15)
    std::default_delete<CoreNLP::Gazetteer>::operator()[abi:ne180100]((uint64_t)&a12, v15);
  v16 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v17 = (uint64_t)v16;
    if (logger(void)::token != -1)
      dispatch_once(&logger(void)::token, &__block_literal_global_10);
    v18 = logger(void)::log;
    if (os_log_type_enabled((os_log_t)logger(void)::log, OS_LOG_TYPE_ERROR))
    {
      NLGazetteerCreate_cold_1(v17, v18);
      if (!v12)
        goto LABEL_9;
      goto LABEL_8;
    }
    if (v12)
    {
LABEL_8:
      theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v19 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
      a10 = CFStringCreateWithCString(0, v19, 0x8000100u);
      CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E0C9AFE0], a10);
      *v12 = CFErrorCreate(0, CFSTR("com.apple.CoreNLPFramework.Gazetteer"), 0, theDict);
      nlp::CFScopedPtr<__CFString const*>::reset((const void **)&a10, 0);
      nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)&theDict, 0);
    }
  }
LABEL_9:
  __cxa_end_catch();
  JUMPOUT(0x191CC4568);
}

void sub_191CC46D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)va, 0);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

CFStringRef NLGazetteerCopyLabel(CoreNLP *a1, __CFString *a2)
{
  CFStringRef v2;
  CoreNLP::Gazetteer *v4;
  std::string *p_cStr;
  std::string cStr;

  v2 = 0;
  if (a1 && a2)
  {
    v4 = (CoreNLP::Gazetteer *)CoreNLP::unwrapGazetteer(a1, a2);
    CoreNLP::Gazetteer::label(v4, a2, &cStr);
    if (SHIBYTE(cStr.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!cStr.__r_.__value_.__l.__size_)
      {
        v2 = 0;
LABEL_12:
        operator delete(cStr.__r_.__value_.__l.__data_);
        return v2;
      }
      p_cStr = (std::string *)cStr.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((_BYTE *)&cStr.__r_.__value_.__s + 23))
        return 0;
      p_cStr = &cStr;
    }
    v2 = CFStringCreateWithCString(0, (const char *)p_cStr, 0x8000100u);
    if (SHIBYTE(cStr.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_12;
  }
  return v2;
}

void sub_191CC47AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFTypeRef NLGazetteerCopyCompressedModel(CoreNLP *a1, void *a2)
{
  CoreNLP::Gazetteer *v2;
  const void *ModelData;

  if (a1
    && (v2 = (CoreNLP::Gazetteer *)CoreNLP::unwrapGazetteer(a1, a2),
        (ModelData = CoreNLP::Gazetteer::getModelData(v2)) != 0))
  {
    return CFRetain(ModelData);
  }
  else
  {
    return 0;
  }
}

CoreNLP *NLGazetteerSaveCompressedModel(CoreNLP *result, void *a2)
{
  CoreNLP::Gazetteer *v3;
  const __CFData *v4;
  const __CFString *v5;
  void *__p;
  char v7;
  uint64_t v8;
  _BYTE v9[408];
  _QWORD v10[20];

  v10[19] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = (CoreNLP::Gazetteer *)CoreNLP::unwrapGazetteer(result, a2);
    result = (CoreNLP *)CoreNLP::Gazetteer::getModelData(v3);
    if (result)
    {
      v4 = result;
      v5 = CFURLCopyFileSystemPath((CFURLRef)a2, kCFURLPOSIXPathStyle);
      CoreNLP::getUTF8StringFromCFString(v5, &__p);
      std::ofstream::basic_ofstream(&v8);
      if (v7 < 0)
        operator delete(__p);
      CFDataGetBytePtr(v4);
      CFDataGetLength(v4);
      std::ostream::write();
      if (!std::filebuf::close())
        std::ios_base::clear((std::ios_base *)&v9[*(_QWORD *)(v8 - 24) - 8], *(_DWORD *)&v9[*(_QWORD *)(v8 - 24) + 24] | 4);
      if (v5)
        CFRelease(v5);
      v8 = *MEMORY[0x1E0DE4F48];
      *(_QWORD *)&v9[*(_QWORD *)(v8 - 24) - 8] = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
      MEMORY[0x19401E70C](v9);
      std::ostream::~ostream();
      MEMORY[0x19401E928](v10);
      return (CoreNLP *)1;
    }
  }
  return result;
}

void sub_191CC4934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a2)
  {
    if (a15 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x191CC4904);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef NLGazetteerCopyLocale(CoreNLP *a1, void *a2)
{
  CoreNLP::Gazetteer *v2;
  const void *Locale;

  if (a1
    && (v2 = (CoreNLP::Gazetteer *)CoreNLP::unwrapGazetteer(a1, a2),
        (Locale = (const void *)CoreNLP::Gazetteer::getLocale(v2)) != 0))
  {
    return CFRetain(Locale);
  }
  else
  {
    return 0;
  }
}

__CFArray *NLGazetteerCopyAvailableLabels(CoreNLP *a1)
{
  void *v2;
  __CFArray *Mutable;
  CoreNLP::Gazetteer **v4;
  uint64_t v5;
  uint64_t i;
  __int128 v7;
  std::string *p_p;
  CFStringRef v9;
  std::string __p;
  uint64_t v12;
  uint64_t v13;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (a1)
  {
    v4 = (CoreNLP::Gazetteer **)CoreNLP::unwrapGazetteer(a1, v2);
    CoreNLP::Gazetteer::availableLabels(v4, &v12);
    v5 = v12;
    for (i = v13; v5 != i; v5 += 24)
    {
      if (*(char *)(v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
      }
      else
      {
        v7 = *(_OWORD *)v5;
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v9 = CFStringCreateWithCString(0, (const char *)p_p, 0x8000100u);
      if (v9)
      {
        CFArrayAppendValue(Mutable, v9);
        CFRelease(v9);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  return Mutable;
}

void sub_191CC4ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

os_log_t ___ZL6loggerv_block_invoke()
{
  const char *v0;
  os_log_t result;

  v0 = _nlpLoggingSubsystem();
  result = os_log_create(v0, "NLGazetteer");
  logger(void)::log = (uint64_t)result;
  return result;
}

void nlp::CFScopedPtr<__CFDictionary *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void BloomFilter::BloomFilter(BloomFilter *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 26) = 2;
}

uint64_t BloomFilter::loadFromBuffer(uint64_t this, const char *a2, unint64_t a3)
{
  uint64_t v4;
  int v5;
  __int128 v6;
  __int128 v7;
  NSObject *v8;
  _QWORD *exception;
  _QWORD *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  __int128 v29;
  __int128 v30[2];
  _OWORD v31[3];
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (a3 <= 3)
  {
    if (logger(void)::token != -1)
      dispatch_once(&logger(void)::token, &__block_literal_global_11);
    v8 = logger(void)::log;
    if (os_log_type_enabled((os_log_t)logger(void)::log, OS_LOG_TYPE_ERROR))
      BloomFilter::loadFromBuffer(a3, v8);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v30, "bloom filter loading too small buffer");
    CoreNLP::ResourceCreationException::ResourceCreationException(exception, v30);
  }
  v4 = this;
  v5 = *(_DWORD *)a2;
  *(_DWORD *)(this + 104) = *(_DWORD *)a2;
  *(_QWORD *)(this + 8) = 0;
  if (v5 == 2)
  {
    if (a3 <= 0x58)
    {
      if (logger(void)::token != -1)
        dispatch_once(&logger(void)::token, &__block_literal_global_11);
      v20 = logger(void)::log;
      if (os_log_type_enabled((os_log_t)logger(void)::log, OS_LOG_TYPE_ERROR))
        BloomFilter::loadFromBuffer(v20, v21, v22, v23, v24, v25, v26, v27);
      v28 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v29, "bloom filter loading too small buffer");
      CoreNLP::ResourceCreationException::ResourceCreationException(v28, &v29);
    }
    v6 = *((_OWORD *)a2 + 3);
    v31[0] = *((_OWORD *)a2 + 2);
    v31[1] = v6;
    v31[2] = *((_OWORD *)a2 + 4);
    v32 = *((_QWORD *)a2 + 10);
    v7 = *((_OWORD *)a2 + 1);
    v30[0] = *(_OWORD *)a2;
    v30[1] = v7;
    *(_DWORD *)(this + 24) = DWORD1(v30[0]);
    *(_QWORD *)(this + 32) = a2 + 88;
    *(_QWORD *)(this + 40) = a3 - 88;
    MEMORY[0x19401E64C](this + 56, (char *)v31 + 12);
    this = MEMORY[0x19401E64C](v4 + 80, (unint64_t)v30 | 0xC);
    *(_DWORD *)(v4 + 48) = DWORD2(v30[0]);
  }
  else
  {
    if (v5 != 1)
    {
      v10 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v30, "unsupported bloom filter version");
      CoreNLP::ResourceCreationException::ResourceCreationException(v10, v30);
    }
    if (a3 <= 8)
    {
      if (logger(void)::token != -1)
        dispatch_once(&logger(void)::token, &__block_literal_global_11);
      v11 = logger(void)::log;
      if (os_log_type_enabled((os_log_t)logger(void)::log, OS_LOG_TYPE_ERROR))
        BloomFilter::loadFromBuffer(v11, v12, v13, v14, v15, v16, v17, v18);
      v19 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v30, "bloom filter loading too small buffer");
      CoreNLP::ResourceCreationException::ResourceCreationException(v19, v30);
    }
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 1);
    *(_QWORD *)(this + 32) = a2 + 8;
    *(_QWORD *)(this + 40) = a3 - 8;
  }
  return this;
}

void sub_191CC4E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

uint64_t BloomFilter::possiblyContains(BloomFilter *this, const char *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10[2];

  if (*((int *)this + 6) < 1)
    return 0;
  result = 0;
  if (a3 && a2 && *((_QWORD *)this + 5))
  {
    MurmurHash3_x64_128((uint64_t)a2, a3, 0, v10);
    v5 = *((unsigned int *)this + 6);
    if ((int)v5 >= 1)
    {
      v6 = v10[0];
      v7 = *((_QWORD *)this + 1);
      do
      {
        v8 = v6 % (8 * *((_QWORD *)this + 5));
        if (v7)
        {
          if (v8 >= v7 || ((*(_QWORD *)(*(_QWORD *)this + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
            return 0;
        }
        else
        {
          v9 = *((_QWORD *)this + 4);
          if (!v9 || ((*(unsigned __int8 *)(v9 + (v8 >> 3)) >> (v8 & 7)) & 1) == 0)
            return 0;
        }
        v6 += v10[1];
        --v5;
      }
      while (v5);
    }
    return 1;
  }
  return result;
}

void BloomFilter::init(uint64_t a1, unint64_t a2, std::string *__str, const std::string *a4, long double a5)
{
  unint64_t v9;
  int v10;
  double v11;
  long double v12;
  long double v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  int v17;

  std::string::operator=((std::string *)(a1 + 80), __str);
  std::string::operator=((std::string *)(a1 + 56), a4);
  v9 = 0;
  v10 = 1;
  v11 = 1.0;
  do
  {
    v12 = pow(a5, 1.0 / v11);
    v13 = (0.0 - v11 * (double)a2) / log(1.0 - v12);
    v14 = (int)v13 + 1;
    if ((int)v13 != -1 && (v10 == 1 || v9 > v14))
    {
      *(_DWORD *)(a1 + 24) = v10;
      v9 = v14;
    }
    v11 = v11 + 1.0;
    ++v10;
  }
  while (v10 != 1000);
  std::vector<BOOL>::resize(a1, (v9 & 0xFFFFFFFFFFFFFFC0) + 64, 0);
  v15 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 40) = v15 >> 3;
  if (v15)
  {
    v16 = *(_QWORD *)a1;
    v17 = 0;
    std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v16, v15);
  }
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  __int128 v22;
  char *v23;
  int v24;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      v21 = 0;
      v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
      v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v9 <= 0x3FFFFFFFFFFFFFFELL)
        v12 = v11;
      else
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      std::vector<BOOL>::reserve(&v21, v12);
      v13 = *(unint64_t **)a1;
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v22 = v14 + v6;
      v23 = v21;
      v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      v17 = v19;
      LODWORD(v18) = v20;
      v15 = *(char **)a1;
      *(_QWORD *)a1 = v21;
      v21 = v15;
      v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      v22 = v16;
      if (v15)
        operator delete(v15);
    }
    else
    {
      v17 = (char *)(*(_QWORD *)a1 + 8 * (v5 >> 6));
      v18 = *(_QWORD *)(a1 + 8) & 0x3FLL;
      *(_QWORD *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_191CC5230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BloomFilter::add(uint64_t this, const char *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8[2];

  if (*(int *)(this + 24) >= 1)
  {
    v3 = this;
    if (*(_QWORD *)(this + 8))
    {
      this = MurmurHash3_x64_128((uint64_t)a2, a3, 0, v8);
      v4 = *(unsigned int *)(v3 + 24);
      if ((int)v4 >= 1)
      {
        v5 = v8[0];
        v6 = v8[1];
        v7 = *(_QWORD *)v3;
        do
        {
          *(_QWORD *)(v7 + (((v5 % *(_QWORD *)(v3 + 8)) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (v5
                                                                                                % *(_QWORD *)(v3 + 8));
          v5 += v6;
          --v4;
        }
        while (v4);
      }
    }
  }
  return this;
}

void *BloomFilter::saveToBuffer(BloomFilter *this, char *a2)
{
  int v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t i;
  const void *v17;
  size_t v18;
  _OWORD v19[2];
  _OWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  bzero(v19, 0x58uLL);
  v4 = *((_DWORD *)this + 6);
  LODWORD(v19[0]) = 2;
  DWORD1(v19[0]) = v4;
  DWORD2(v19[0]) = *((_DWORD *)this + 12);
  if (*((char *)this + 103) < 0)
  {
    v5 = (char *)*((_QWORD *)this + 10);
    v6 = *((_QWORD *)this + 11);
  }
  else
  {
    v5 = (char *)this + 80;
    LODWORD(v6) = *((unsigned __int8 *)this + 103);
  }
  if ((int)v6 >= 31)
    LODWORD(v6) = 31;
  memcpy((char *)v19 + 12, v5, (int)v6);
  if (*((char *)this + 79) < 0)
  {
    v7 = (char *)*((_QWORD *)this + 7);
    v8 = *((_QWORD *)this + 8);
  }
  else
  {
    v7 = (char *)this + 56;
    LODWORD(v8) = *((unsigned __int8 *)this + 79);
  }
  if ((int)v8 >= 31)
    LODWORD(v8) = 31;
  result = memcpy((char *)v20 + 12, v7, (int)v8);
  v10 = v19[1];
  *(_OWORD *)a2 = v19[0];
  *((_OWORD *)a2 + 1) = v10;
  *((_QWORD *)a2 + 10) = v21;
  v11 = v20[2];
  v12 = v20[0];
  *((_OWORD *)a2 + 3) = v20[1];
  *((_OWORD *)a2 + 4) = v11;
  *((_OWORD *)a2 + 2) = v12;
  v13 = *((_QWORD *)this + 1);
  if (v13)
  {
    if (v13 >= 8)
    {
      v14 = 0;
      v15 = 0;
      do
      {
        for (i = 0; i != 8; ++i)
        {
          if (((*(_QWORD *)(*(_QWORD *)this + (((unint64_t)(v14 + i) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> ((v14 & 0x3Fu) + i)) & 1) != 0)
            a2[v15 + 88] |= 1 << i;
        }
        ++v15;
        v14 += 8;
      }
      while (v15 < *((_QWORD *)this + 1) >> 3);
    }
  }
  else
  {
    v17 = (const void *)*((_QWORD *)this + 4);
    if (v17)
    {
      v18 = *((_QWORD *)this + 5);
      if (v18)
        return memcpy(a2 + 88, v17, v18);
    }
  }
  return result;
}

uint64_t BloomFilter::bufferSize(BloomFilter *this)
{
  return *((_QWORD *)this + 5) + 88;
}

os_log_t ___ZL6loggerv_block_invoke_0()
{
  const char *v0;
  os_log_t result;

  v0 = _nlpLoggingSubsystem();
  result = os_log_create(v0, "BloomFilter");
  logger(void)::log = (uint64_t)result;
  return result;
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v10 = 0;
    v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_191CC5578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)a3;
  v9 = *(_DWORD *)(a3 + 8);
  v10 = *a1 + 8 * (v4 >> 6);
  v16 = *(_QWORD *)a2;
  v17 = v7;
  v14 = v8;
  v15 = v9;
  v12 = v10;
  v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8;
  unint64_t *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v8 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)__src);
  if (v8 <= 0)
  {
    v16 = *(unint64_t **)a5;
  }
  else
  {
    v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2))
        v10 = 64 - a2;
      else
        v10 = v8;
      v8 -= v10;
      v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0)
      v13 = v8;
    else
      v13 = v8 + 63;
    v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    v15 = v8 - (v14 << 6);
    v16 = &__src[v14];
    *(_QWORD *)a5 = v16;
    if (v15 >= 1)
    {
      *v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(_QWORD *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t CoreNLP::ProductQuantizer::ProductQuantizer(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_BYTE *)(this + 24) = 0;
  return this;
}

void CoreNLP::ProductQuantizer::~ProductQuantizer(CoreNLP::ProductQuantizer *this)
{
  uint64_t v1;

  if (*((_BYTE *)this + 24))
  {
    v1 = *((_QWORD *)this + 2);
    if (v1)
      MEMORY[0x19401E970](v1, 0x1000C8052888210);
  }
}

uint64_t CoreNLP::ProductQuantizer::initialize(uint64_t this, int a2, int a3, float *a4)
{
  uint64_t v4;
  int v5;
  char v6;

  v4 = this;
  *(_DWORD *)this = a2;
  *(_DWORD *)(this + 4) = a3;
  *(_QWORD *)(this + 16) = a4;
  if (a3)
    v5 = a2 / a3;
  else
    v5 = 0;
  *(_DWORD *)(this + 8) = v5;
  if (a4)
  {
    v6 = 0;
  }
  else
  {
    this = operator new[]();
    *(_QWORD *)(v4 + 16) = this;
    v6 = 1;
  }
  *(_BYTE *)(v4 + 24) = v6;
  return this;
}

void CoreNLP::ProductQuantizer::runCompressing(CoreNLP::ProductQuantizer *this, std::vector<int>::size_type __n, const float *a3)
{
  uint64_t v4;
  std::vector<int>::size_type v5;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v8;
  unsigned int v9;
  uint64_t i;
  uint64_t v11;
  int v12;
  uint64_t v13;
  std::vector<int>::size_type v14;
  std::vector<int>::pointer v15;
  int v16;
  uint64_t v17;
  float *v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v24;
  const float *__dst;
  std::vector<int>::value_type __x[624];
  uint64_t v27;
  std::vector<int> v28;
  void *v29;
  void *v30;
  uint64_t v31;

  v4 = *(int *)this;
  if ((int)v4 % *((_DWORD *)this + 1))
  {
    std::operator<<[abi:ne180100]<std::char_traits<char>>(MEMORY[0x1E0DE4A50], "Improper sub-dimension ");
    v20 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, " , dimenion ");
    v21 = (_QWORD *)std::ostream::operator<<();
    v22 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v21, "must be devided by sub-dimention");
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v22);
    exit(1);
  }
  v5 = __n;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  if ((int)__n <= 255)
  {
    std::vector<float>::resize((uint64_t)&v29, v4 << 8);
    memcpy(v29, a3, 4 * (int)v5);
    v5 = 256;
    a3 = (const float *)v29;
  }
  __x[0] = 0;
  std::vector<int>::vector(&v28, v5, __x);
  begin = v28.__begin_;
  end = v28.__end_;
  if (v28.__begin_ != v28.__end_)
  {
    v8 = 0;
    do
      *begin++ = v8++;
    while (begin != end);
  }
  v9 = 111;
  __x[0] = 111;
  for (i = 1; i != 624; ++i)
  {
    v9 = i + 1812433253 * (v9 ^ (v9 >> 30));
    __x[i] = v9;
  }
  v27 = 0;
  if ((int)v5 >= 0x10000)
    v11 = 0x10000;
  else
    v11 = v5;
  v24 = v11;
  __dst = (const float *)operator new[]();
  if (*((int *)this + 2) >= 1)
  {
    v12 = 0;
    do
    {
      std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u> &>((unint64_t)v28.__begin_, (uint64_t)v28.__end_, (uint64_t)__x);
      v13 = *((int *)this + 1);
      v14 = v5;
      if ((int)v5 >= 1)
      {
        v15 = v28.__begin_;
        v16 = *(_DWORD *)this;
        v17 = v24;
        v18 = (float *)__dst;
        do
        {
          v19 = *v15++;
          memcpy(v18, &a3[(int)v13 * v12 + v16 * v19], 4 * v13);
          v18 += v13;
          --v17;
        }
        while (v17);
      }
      CoreNLP::ProductQuantizer::runClustering(this, __dst, (float *)(*((_QWORD *)this + 2) + 4 * ((v12 * (int)v13) << 8)), v24);
      v5 = v14;
      ++v12;
    }
    while (v12 < *((_DWORD *)this + 2));
  }
  MEMORY[0x19401E970](__dst, 0x1000C8052888210);
  if (v28.__begin_)
  {
    v28.__end_ = v28.__begin_;
    operator delete(v28.__begin_);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
}

void sub_191CC5D78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(_QWORD *)(v1 - 104) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::operator<<[abi:ne180100]<std::char_traits<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
}

_QWORD *std::endl[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_191CC5E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void CoreNLP::ProductQuantizer::runClustering(CoreNLP::ProductQuantizer *this, const float *a2, float *a3, int a4)
{
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int v10;
  std::vector<int>::pointer v11;
  unsigned int v12;
  uint64_t i;
  uint64_t v14;
  std::vector<int>::pointer v15;
  const unsigned __int8 *v16;
  int j;
  uint64_t v18;
  std::vector<int>::value_type v19[624];
  uint64_t v20;
  std::vector<int> v21;

  v19[0] = 0;
  std::vector<int>::vector(&v21, a4, v19);
  begin = v21.__begin_;
  end = v21.__end_;
  if (v21.__begin_ != v21.__end_)
  {
    v10 = 0;
    v11 = v21.__begin_;
    do
      *v11++ = v10++;
    while (v11 != end);
  }
  v12 = 999;
  v19[0] = 999;
  for (i = 1; i != 624; ++i)
  {
    v12 = i + 1812433253 * (v12 ^ (v12 >> 30));
    v19[i] = v12;
  }
  v20 = 0;
  std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u> &>((unint64_t)begin, (uint64_t)end, (uint64_t)v19);
  v14 = 0;
  v15 = v21.__begin_;
  do
  {
    memcpy(&a3[*((_DWORD *)this + 1) * (int)v14], &a2[v15[v14] * *((_DWORD *)this + 1)], 4 * *((int *)this + 1));
    ++v14;
  }
  while (v14 != 256);
  v16 = (const unsigned __int8 *)operator new[]();
  for (j = 0; j != 25; ++j)
  {
    if (a4 >= 1)
    {
      v18 = 0;
      do
      {
        CoreNLP::ProductQuantizer::chooseCentroid(this, &a2[*((_DWORD *)this + 1) * (int)v18], a3, (unsigned __int8 *)&v16[v18]);
        ++v18;
      }
      while (a4 != v18);
    }
    CoreNLP::ProductQuantizer::recomputeCentroids(this, a2, a3, v16, a4);
  }
  MEMORY[0x19401E970](v16, 0x1000C8077774924);
  if (v21.__begin_)
  {
    v21.__end_ = v21.__begin_;
    operator delete(v21.__begin_);
  }
}

void sub_191CC6018(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 104);
  if (v3)
  {
    *(_QWORD *)(v1 - 96) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CoreNLP::ProductQuantizer::recomputeCentroids(CoreNLP::ProductQuantizer *this, const float *a2, float *a3, const unsigned __int8 *a4, int a5)
{
  uint64_t v5;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t i;
  int v14;
  void *__p[3];

  LODWORD(v5) = a5;
  v14 = 0;
  std::vector<float>::vector(__p, 0x100uLL, &v14);
  bzero(a3, (uint64_t)*((int *)this + 1) << 10);
  v10 = *((_DWORD *)this + 1);
  if ((int)v5 <= 0)
  {
    LODWORD(v12) = *((_DWORD *)this + 1);
  }
  else
  {
    v5 = v5;
    do
    {
      v11 = *a4++;
      vDSP_vadd(&a3[v10 * v11], 1, a2, 1, &a3[v10 * v11], 1, v10);
      *((float *)__p[0] + v11) = *((float *)__p[0] + v11) + 1.0;
      v12 = *((int *)this + 1);
      a2 += v12;
      v10 = *((_DWORD *)this + 1);
      --v5;
    }
    while (v5);
  }
  for (i = 0; i != 1024; i += 4)
  {
    vDSP_vsdiv(a3, 1, (const float *)((char *)__p[0] + i), a3, 1, (int)v12);
    v12 = *((int *)this + 1);
    a3 += v12;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_191CC6160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreNLP::ProductQuantizer::chooseCentroid(CoreNLP::ProductQuantizer *this, const float *__A, const float *a3, unsigned __int8 *a4)
{
  const float *v5;
  vDSP_Length v8;
  int v9;
  float v10;
  vDSP_Length v11;
  float v12;
  float __C;
  float v14;

  v5 = a3;
  v8 = *((int *)this + 1);
  __C = 0.0;
  v9 = 1;
  vDSP_distancesq(__A, 1, a3, 1, &__C, v8);
  v10 = __C;
  *a4 = 0;
  do
  {
    v11 = *((int *)this + 1);
    v5 += v11;
    v14 = 0.0;
    vDSP_distancesq(__A, 1, v5, 1, &v14, v11);
    v12 = v14;
    if (v14 < v10)
    {
      *a4 = v9;
      v10 = v12;
    }
    ++v9;
  }
  while (v9 != 256);
}

void CoreNLP::ProductQuantizer::quantizeVectors(CoreNLP::ProductQuantizer *this, const float *a2, unsigned __int8 *a3, int a4)
{
  int i;

  if (a4 >= 1)
  {
    for (i = 0; i != a4; ++i)
      CoreNLP::ProductQuantizer::quantizeVector(this, &a2[*(_DWORD *)this * i], &a3[*((int *)this + 2) * (uint64_t)i]);
  }
}

void CoreNLP::ProductQuantizer::quantizeVector(CoreNLP::ProductQuantizer *this, const float *a2, unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t v7;

  if (*((int *)this + 2) >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      CoreNLP::ProductQuantizer::chooseCentroid(this, &a2[*((_DWORD *)this + 1) * (int)v7], (const float *)(*((_QWORD *)this + 2) + 4 * v6 * *((int *)this + 1)), &a3[v7]);
      ++v7;
      v6 += 256;
    }
    while (v7 < *((int *)this + 2));
  }
}

uint64_t std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u> &>(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD v11[2];
  __int128 v12;

  if ((uint64_t)(a2 - a1) >= 5)
  {
    v4 = (int *)a1;
    v12 = xmmword_191D421D0;
    v5 = a2 - 4;
    if (a2 - 4 > a1)
    {
      v7 = ((a2 - a1) >> 2) - 1;
      do
      {
        v11[0] = 0;
        v11[1] = v7;
        v8 = std::uniform_int_distribution<long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v12, a3, v11);
        if (v8)
        {
          v9 = *v4;
          *v4 = v4[v8];
          v4[v8] = v9;
        }
        ++v4;
        --v7;
      }
      while ((unint64_t)v4 < v5);
    }
  }
  return a2;
}

uint64_t std::uniform_int_distribution<long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE v10[64];

  result = a3[1];
  v4 = result - *a3;
  if (result != *a3)
  {
    v5 = v4 + 1;
    if (v4 == -1)
    {
      std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, 0x40uLL);
      return std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)v10);
    }
    else
    {
      v7 = __clz(v5);
      v8 = 63;
      if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v8 = 64;
      std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, v8 - v7);
      do
        v9 = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)v10);
      while (v9 >= v5);
      return *a3 + v9;
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if ((a3 & 0x1F) != 0)
    v3 = (a3 >> 5) + 1;
  else
    v3 = a3 >> 5;
  v4 = a3 / v3;
  *(_QWORD *)(result + 16) = a3 / v3;
  *(_QWORD *)(result + 24) = v3;
  v5 = (-1 << (a3 / v3)) & 0x100000000;
  if (a3 / v3 >= 0x40)
    v5 = 0;
  *(_QWORD *)(result + 40) = v5;
  if ((v5 ^ 0x100000000) > v5 / v3)
  {
    ++v3;
    v4 = a3 / v3;
    *(_QWORD *)(result + 16) = a3 / v3;
    *(_QWORD *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      v6 = 0;
      *(_QWORD *)(result + 32) = v3 + v4 * v3 - a3;
      *(_QWORD *)(result + 40) = 0;
      goto LABEL_13;
    }
    *(_QWORD *)(result + 40) = (-1 << v4) & 0x100000000;
  }
  *(_QWORD *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 > 0x3E)
    v6 = 0;
  else
    v6 = 0x80000000uLL >> v4 << (v4 + 1);
LABEL_13:
  *(_QWORD *)(result + 48) = v6;
  v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4)
    v7 = 0;
  if (v4 >= 0x1F)
    v8 = -1;
  else
    v8 = 0xFFFFFFFF >> ~(_BYTE)v4;
  *(_DWORD *)(result + 56) = v7;
  *(_DWORD *)(result + 60) = v8;
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8;
  unint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      do
        v4 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
      while (*(_QWORD *)(a1 + 40) <= (unint64_t)v4);
      v5 = *(_QWORD *)(a1 + 16);
      if (v5 >= 0x40)
        v6 = 0;
      else
        v6 = v2 << v5;
      v2 = v6 + (*(_DWORD *)(a1 + 56) & v4);
      ++v3;
      v7 = *(_QWORD *)(a1 + 32);
    }
    while (v3 < v7);
  }
  else
  {
    v2 = 0;
    v7 = 0;
  }
  for (; v7 < *(_QWORD *)(a1 + 24); ++v7)
  {
    do
      v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
    while (*(_QWORD *)(a1 + 48) <= (unint64_t)v8);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9 >= 0x3F)
      v10 = 0;
    else
      v10 = v2 << (v9 + 1);
    v2 = v10 + (*(_DWORD *)(a1 + 60) & v8);
  }
  return v2;
}

uint64_t CoreNLP::_CFInit_EmbeddingWrapper(uint64_t this, const void *a2)
{
  *(_QWORD *)(this + 16) = &unk_1E2DF23A0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreNLP::createEmbeddingWrapper(uint64_t *a1)
{
  unsigned __int8 v2;
  uint64_t Instance;
  uint64_t v4;
  uint64_t *v5;

  CFAllocatorGetDefault();
  {
    qword_1EE21AEB0 = 0;
    unk_1EE21AEC0 = 0u;
    unk_1EE21AED0 = 0u;
    CoreNLP::_CFGetTypeID_EmbeddingWrapper(void)::typeID = _CFRuntimeRegisterClass();
  }
  Instance = _CFRuntimeCreateInstance();
  v4 = *a1;
  *a1 = 0;
  v5 = *(uint64_t **)(Instance + 24);
  *(_QWORD *)(Instance + 24) = v4;
  if (v5)
    std::default_delete<CoreNLP::EmbeddingManager>::operator()[abi:ne180100](Instance + 24, v5);
  return Instance;
}

void sub_191CC66D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreNLP::EmbeddingWrapper::~EmbeddingWrapper(CoreNLP::EmbeddingWrapper *this)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;

  *(_QWORD *)this = &unk_1E2DF23A0;
  v4 = (uint64_t *)*((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<CoreNLP::EmbeddingManager>::operator()[abi:ne180100]((uint64_t)v2, v3);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
}

{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;

  *(_QWORD *)this = &unk_1E2DF23A0;
  v4 = (uint64_t *)*((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<CoreNLP::EmbeddingManager>::operator()[abi:ne180100]((uint64_t)v2, v3);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
  JUMPOUT(0x19401E994);
}

void CoreNLP::CompositeTagger::ParagraphCache::~ParagraphCache(CoreNLP::CompositeTagger::ParagraphCache *this)
{
  void **v2;

  v2 = (void **)((char *)this + 176);
  std::vector<CoreNLP::NLAttributedToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__list_imp<CoreNLP::NLAttributedToken>::clear((uint64_t *)this + 17);
  std::__list_imp<CoreNLP::NLAttributedToken>::clear((uint64_t *)this + 14);
  CoreNLP::NLAttributedToken::~NLAttributedToken(this);
}

void CoreNLP::CompositeTagger::~CompositeTagger(CoreNLP::CompositeTagger *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  *(_QWORD *)this = &off_1E2DF2150;
  v2 = *((_QWORD *)this + 119);
  *((_QWORD *)this + 119) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v5 = (void **)((char *)this + 912);
  std::vector<CoreNLP::NLAttributedToken>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::__list_imp<CoreNLP::NLAttributedToken>::clear((uint64_t *)this + 109);
  std::__list_imp<CoreNLP::NLAttributedToken>::clear((uint64_t *)this + 106);
  CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::CompositeTagger *)((char *)this + 736));
  v4 = *((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v4)
    MEMORY[0x19401E994](v4, 0x60C4044C4A2DFLL);
  std::__tree<std::string>::destroy((uint64_t)this + 688, *((char **)this + 87));
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)this + 664, *((_QWORD **)this + 84));
  CoreNLP::TaggingModelManager::~TaggingModelManager((CoreNLP::CompositeTagger *)((char *)this + 24));
  std::unique_ptr<CoreNLP::SmartTokenizer>::reset[abi:ne180100]((CoreNLP::SmartTokenizer **)this + 1, 0);
}

{
  CoreNLP::CompositeTagger::~CompositeTagger(this);
  JUMPOUT(0x19401E994);
}

void CoreNLP::CompositeTagger::setString(CoreNLP::CompositeTagger *this, CFStringRef theString)
{
  CFIndex Length;
  uint64_t v5;
  CoreNLP::SmartTokenizer *v6;
  CFRange v7;

  if (theString)
  {
    Length = CFStringGetLength(theString);
    v5 = 0;
  }
  else
  {
    Length = 0;
    v5 = -1;
  }
  CoreNLP::TaggerContext::setString(*((_QWORD *)this + 2), theString, v5, Length, *(_DWORD *)(*((_QWORD *)this + 2) + 60));
  v6 = (CoreNLP::SmartTokenizer *)*((_QWORD *)this + 1);
  if (v6)
  {
    v7.location = v5;
    v7.length = Length;
    CoreNLP::SmartTokenizer::setString(v6, theString, v7);
  }
  CoreNLP::CompositeTagger::resetParagraphCache(this);
}

void CoreNLP::CompositeTagger::resetParagraphCache(CoreNLP::CompositeTagger *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  *((_OWORD *)this + 46) = xmmword_191D40610;
  v2 = (char *)this + 848;
  std::__list_imp<CoreNLP::NLAttributedToken>::clear((uint64_t *)this + 106);
  std::__list_imp<CoreNLP::NLAttributedToken>::clear((uint64_t *)this + 109);
  v3 = *((_QWORD *)this + 115);
  v4 = *((_QWORD *)this + 114);
  while (v3 != v4)
    CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::NLAttributedToken *)(v3 - 112));
  *((_QWORD *)this + 115) = v4;
  *((_QWORD *)this + 113) = (char *)this + 872;
  *((_QWORD *)this + 112) = v2;
}

uint64_t CoreNLP::CompositeTagger::setLocaleForRange(CoreNLP::CompositeTagger *this, const __CFLocale *a2, CFRange a3)
{
  uint64_t v5;

  v5 = *((_QWORD *)this + 2);
  *(_DWORD *)(v5 + 36) = CoreNLP::getLocaleLanguage(a2, a2);
  return CoreNLP::TaggerContext::setLocale(*((CoreNLP::TaggerContext **)this + 2), a2);
}

CoreNLP::NLAttributedToken *CoreNLP::CompositeTagger::getTokenAtIndex@<X0>(CoreNLP::CompositeTagger *a1@<X0>, unsigned int a2@<W1>, CFIndex a3@<X2>, uint64_t a4@<X8>)
{
  CoreNLP::NLAttributedToken *result;

  result = CoreNLP::CompositeTagger::getAttributedTokenAtIndex(a1, a2, a3);
  if (result)
  {
    *(_OWORD *)a4 = *(_OWORD *)result;
    *(_QWORD *)(a4 + 16) = *((_QWORD *)result + 2);
  }
  else
  {
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = -1;
  }
  return result;
}

CoreNLP::NLAttributedToken *CoreNLP::CompositeTagger::getAttributedTokenAtIndex(CoreNLP::CompositeTagger *this, unsigned int a2, CFIndex a3)
{
  CFIndex v3;
  unsigned int v4;
  CoreNLP::CompositeTagger *v5;
  CoreNLP::NLAttributedToken *v6;
  CFIndex v7;
  CFIndex v8;
  CFRange v10;
  uint64_t v11;
  int CurrentDominantLanguageID;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  BOOL v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  int *v21;
  char *v22;
  int v23;
  BOOL v24;
  char **v25;
  int *v26;
  int v27;
  BOOL v28;
  char **v29;
  char *v30;
  char *v31;
  int *v32;
  char *v33;
  int v34;
  BOOL v35;
  char **v36;
  int *v37;
  char *v38;
  int v39;
  BOOL v40;
  char **v41;
  int *v42;
  int v43;
  BOOL v44;
  char **v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  CoreNLP::NLAttributedToken *v75;
  uint64_t v78;
  char *v79;
  char *v80;
  CFIndex v81;
  char *v82;
  _QWORD *v84;
  CFIndex v85;
  uint64_t v86;
  unsigned int v88;
  CFIndex v89;
  CoreNLP::NLAttributedToken *v90;
  uint64_t v91;
  _QWORD *v92;
  int v93;
  void *__p;
  char *v95;
  char *v96;
  _QWORD v97[5];
  _QWORD v98[5];
  char v99;
  CFIndex parEndIndex;
  CFIndex parBeginIndex;
  _DWORD *v102[2];
  CFRange v103;

  if (a2 == 3)
    return 0;
  v3 = a3;
  v4 = a2;
  v5 = this;
  v6 = (CoreNLP::CompositeTagger *)((char *)this + 736);
  v7 = *((_QWORD *)this + 92);
  v8 = *((_QWORD *)this + 93) + v7;
  if (v7 > a3 || v8 <= a3)
  {
    CoreNLP::CompositeTagger::resetParagraphCache(this);
    parEndIndex = -1;
    parBeginIndex = -1;
    v103.location = v3;
    v103.length = 0;
    CFStringGetParagraphBounds(*(CFStringRef *)(*((_QWORD *)v5 + 2) + 8), v103, &parBeginIndex, &parEndIndex, 0);
    if (parBeginIndex < 0 || parEndIndex < parBeginIndex)
    {
LABEL_138:
      v7 = *((_QWORD *)v5 + 92);
      v8 = *((_QWORD *)v5 + 93) + v7;
      goto LABEL_139;
    }
    if (parBeginIndex <= v3 - 0x8000)
      v10.location = v3 - 0x8000;
    else
      v10.location = parBeginIndex;
    if (parEndIndex - v10.location >= 0x10000)
      v10.length = 0x10000;
    else
      v10.length = parEndIndex - v10.location;
    *((CFRange *)v5 + 46) = v10;
    v11 = *((_QWORD *)v5 + 2);
    if (*(_QWORD *)(v11 + 40))
    {
      CurrentDominantLanguageID = *(_DWORD *)(v11 + 60);
    }
    else
    {
      CoreNLP::TaggerContext::setCurrentOrthographyForRange((const __CFString **)v11, v10);
      CurrentDominantLanguageID = CoreNLP::TaggerContext::getCurrentDominantLanguageID(*((CoreNLP::TaggerContext **)v5
                                                                                       + 2));
    }
    *((_DWORD *)v5 + 234) = CurrentDominantLanguageID;
    v89 = v3;
    if (CurrentDominantLanguageID != 4)
      goto LABEL_82;
    v13 = *((_QWORD *)v5 + 85);
    switch(v13)
    {
      case 3:
        v30 = (char *)*((_QWORD *)v5 + 84);
        if (!v30)
          goto LABEL_82;
        v31 = (char *)v5 + 672;
        v32 = (int *)((char *)v5 + 672);
        v33 = (char *)*((_QWORD *)v5 + 84);
        do
        {
          v34 = *((_DWORD *)v33 + 7);
          v35 = v34 < 6;
          if (v34 >= 6)
            v36 = (char **)v33;
          else
            v36 = (char **)(v33 + 8);
          if (!v35)
            v32 = (int *)v33;
          v33 = *v36;
        }
        while (*v36);
        if (v32 == (int *)v31 || v32[7] > 6)
          goto LABEL_82;
        v37 = (int *)((char *)v5 + 672);
        v38 = (char *)*((_QWORD *)v5 + 84);
        do
        {
          v39 = *((_DWORD *)v38 + 7);
          v40 = v39 < 3;
          if (v39 >= 3)
            v41 = (char **)v38;
          else
            v41 = (char **)(v38 + 8);
          if (!v40)
            v37 = (int *)v38;
          v38 = *v41;
        }
        while (*v41);
        if (v37 == (int *)v31 || v37[7] > 3)
          goto LABEL_82;
        v42 = (int *)((char *)v5 + 672);
        do
        {
          v43 = *((_DWORD *)v30 + 7);
          v44 = v43 < 4;
          if (v43 >= 4)
            v45 = (char **)v30;
          else
            v45 = (char **)(v30 + 8);
          if (!v44)
            v42 = (int *)v30;
          v30 = *v45;
        }
        while (*v45);
        if (v42 == (int *)v31 || v42[7] >= 5)
          goto LABEL_82;
        break;
      case 2:
        v19 = (char *)*((_QWORD *)v5 + 84);
        if (!v19)
          goto LABEL_82;
        v20 = (char *)v5 + 672;
        v21 = (int *)((char *)v5 + 672);
        v22 = (char *)*((_QWORD *)v5 + 84);
        do
        {
          v23 = *((_DWORD *)v22 + 7);
          v24 = v23 < 6;
          if (v23 >= 6)
            v25 = (char **)v22;
          else
            v25 = (char **)(v22 + 8);
          if (!v24)
            v21 = (int *)v22;
          v22 = *v25;
        }
        while (*v25);
        if (v21 == (int *)v20 || v21[7] > 6)
          goto LABEL_82;
        v26 = (int *)((char *)v5 + 672);
        do
        {
          v27 = *((_DWORD *)v19 + 7);
          v28 = v27 < 1;
          if (v27 >= 1)
            v29 = (char **)v19;
          else
            v29 = (char **)(v19 + 8);
          if (!v28)
            v26 = (int *)v19;
          v19 = *v29;
        }
        while (*v29);
        if (v26 == (int *)v20 || v26[7] >= 2)
          goto LABEL_82;
        break;
      case 1:
        v14 = *((_QWORD *)v5 + 84);
        if (!v14)
          goto LABEL_82;
        v15 = (int *)((char *)v5 + 672);
        do
        {
          v16 = *(_DWORD *)(v14 + 28);
          v17 = v16 < 6;
          if (v16 >= 6)
            v18 = (uint64_t *)v14;
          else
            v18 = (uint64_t *)(v14 + 8);
          if (!v17)
            v15 = (int *)v14;
          v14 = *v18;
        }
        while (*v18);
        if (v15 == (int *)((char *)v5 + 672) || v15[7] >= 7)
        {
LABEL_82:
          v46 = 0;
LABEL_83:
          (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)v5 + 118) + 40))(*((_QWORD *)v5 + 118), *(_QWORD *)(*((_QWORD *)v5 + 2) + 8), *((_QWORD *)v5 + 92), *((_QWORD *)v5 + 93));
          v47 = *((_QWORD *)v5 + 118);
          v48 = *((_QWORD *)v5 + 92);
          v49 = *((_QWORD *)v5 + 93);
          v50 = MEMORY[0x1E0C809B0];
          v98[0] = MEMORY[0x1E0C809B0];
          v98[1] = 0x40000000;
          v98[2] = ___ZN7CoreNLP15CompositeTagger25getAttributedTokenAtIndexE15NLTokenizerUnitl_block_invoke;
          v98[3] = &__block_descriptor_tmp_12;
          v98[4] = v5;
          v99 = v46;
          (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v47 + 56))(v47, v48, v49, 0, v98);
          (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)v5 + 119) + 40))(*((_QWORD *)v5 + 119), *(_QWORD *)(*((_QWORD *)v5 + 2) + 8), *((_QWORD *)v5 + 92), *((_QWORD *)v5 + 93), *((unsigned int *)v5 + 234));
          v51 = *((_QWORD *)v5 + 119);
          v52 = *((_QWORD *)v5 + 92);
          v53 = *((_QWORD *)v5 + 93);
          v97[0] = v50;
          v97[1] = 0x40000000;
          v97[2] = ___ZN7CoreNLP15CompositeTagger25getAttributedTokenAtIndexE15NLTokenizerUnitl_block_invoke_2;
          v97[3] = &__block_descriptor_tmp_52;
          v97[4] = v5;
          (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v51 + 56))(v51, v52, v53, 0, v97);
          v88 = v4;
          v90 = v6;
          if (*((_QWORD *)v5 + 111)
            && *((_QWORD *)v5 + 108)
            && *(_QWORD *)(*((_QWORD *)v5 + 110) + 16) == *(_QWORD *)(*((_QWORD *)v5 + 107) + 16)
            && *(_QWORD *)(*((_QWORD *)v5 + 109) + 24) + *(_QWORD *)(*((_QWORD *)v5 + 109) + 16) == *(_QWORD *)(*((_QWORD *)v5 + 106) + 24) + *(_QWORD *)(*((_QWORD *)v5 + 106) + 16))
          {
            if ((v46 & 1) == 0)
              CoreNLP::CompositeTagger::updateWordAndSentenceBoundaries(v5);
          }
          else
          {
            CoreNLP::CompositeTagger::resetParagraphCache(v5);
          }
          v54 = (_QWORD *)*((_QWORD *)v5 + 110);
          __p = 0;
          v95 = 0;
          v96 = 0;
          v91 = (uint64_t)v5;
          v55 = (_QWORD *)*((_QWORD *)v5 + 107);
          v92 = (_QWORD *)((char *)v5 + 848);
          if (v55 != (_QWORD *)((char *)v5 + 848))
          {
            v56 = (_QWORD *)((char *)v5 + 872);
            do
            {
              v57 = v54;
              v54 = v56;
              if (v57 != v56)
              {
                while (1)
                {
                  v59 = v57 + 2;
                  v58 = v57[2];
                  v60 = v55[2];
                  if (v58 == -1 || v60 == -1)
                    break;
                  if (v58 < v60 || v57[3] + v58 > v55[3] + v60)
                    break;
                  if ((CoreNLP::skipTokenForOptions((CoreNLP *)(v57 + 2), (CoreNLP::NLAttributedToken *)4) & 1) == 0)
                  {
                    v63 = v95;
                    if (v95 >= v96)
                    {
                      v65 = (v95 - (_BYTE *)__p) >> 3;
                      if ((unint64_t)(v65 + 1) >> 61)
                        std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
                      v66 = (v96 - (_BYTE *)__p) >> 2;
                      if (v66 <= v65 + 1)
                        v66 = v65 + 1;
                      if ((unint64_t)(v96 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
                        v67 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v67 = v66;
                      if (v67)
                        v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v96, v67);
                      else
                        v68 = 0;
                      v69 = &v68[8 * v65];
                      *(_QWORD *)v69 = v59;
                      v64 = v69 + 8;
                      v71 = (char *)__p;
                      v70 = v95;
                      if (v95 != __p)
                      {
                        do
                        {
                          v72 = *((_QWORD *)v70 - 1);
                          v70 -= 8;
                          *((_QWORD *)v69 - 1) = v72;
                          v69 -= 8;
                        }
                        while (v70 != v71);
                        v70 = (char *)__p;
                      }
                      __p = v69;
                      v95 = v64;
                      v96 = &v68[8 * v67];
                      if (v70)
                        operator delete(v70);
                    }
                    else
                    {
                      *(_QWORD *)v95 = v59;
                      v64 = v63 + 8;
                    }
                    v95 = v64;
                  }
                  v57 = (_QWORD *)v57[1];
                  if (v57 == v56)
                  {
                    v54 = v56;
                    goto LABEL_123;
                  }
                }
                v54 = v57;
              }
LABEL_123:
              if ((v46 & 1) == 0)
                CoreNLP::CompositeTagger::tagCurrentSentenceForAllSchemes(v91, (uint64_t *)&__p);
              if ((int)((unint64_t)(v95 - (_BYTE *)__p) >> 3) >= 1)
              {
                v73 = ((unint64_t)(v95 - (_BYTE *)__p) >> 3) + 1;
                while (1)
                {
                  v74 = *((_QWORD *)__p + (v73 - 2));
                  if ((*(_BYTE *)(v74 + 75) & 1) == 0)
                  {
                    v93 = 1;
                    v102[0] = &v93;
                    if (*((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)(v74 + 24), &v93, (uint64_t)&std::piecewise_construct, v102)+ 10) != 6)break;
                  }
                  if ((unint64_t)--v73 <= 1)
                    goto LABEL_133;
                }
                if (CoreNLP::isTerminator((CoreNLP *)v74, v75))
                {
                  v93 = 1;
                  v102[0] = &v93;
                  *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)(v74 + 24), &v93, (uint64_t)&std::piecewise_construct, v102)+ 10) = 2;
                }
              }
LABEL_133:
              v95 = (char *)__p;
              v55 = (_QWORD *)v55[1];
            }
            while (v55 != v92);
          }
          v6 = v90;
          v5 = (CoreNLP::CompositeTagger *)v91;
          CoreNLP::CompositeTagger::tagCurrentParagraph((CoreNLP::CompositeTagger *)v91, v90);
          if (*(_DWORD *)(v91 + 936) == 4)
            CoreNLP::CompositeTagger::updateChineseWordBoundaries((CoreNLP::CompositeTagger *)v91);
          *(_QWORD *)(v91 + 904) = *(_QWORD *)(v91 + 880);
          *(_QWORD *)(v91 + 896) = *(_QWORD *)(v91 + 856);
          v3 = v89;
          v4 = v88;
          if (__p)
          {
            v95 = (char *)__p;
            operator delete(__p);
          }
          goto LABEL_138;
        }
        break;
      default:
        goto LABEL_82;
    }
    v46 = 1;
    goto LABEL_83;
  }
LABEL_139:
  if (v7 > v3 || v8 <= v3)
    return 0;
  if (v4 >= 2)
  {
    if (v4 == 2)
      return v6;
    else
      return 0;
  }
  if (v4 == 1)
    v78 = 896;
  else
    v78 = 904;
  v79 = (char *)v5 + 872;
  if (v4 == 1)
    v79 = (char *)v5 + 848;
  v80 = *(char **)((char *)v5 + v78);
  v81 = *((_QWORD *)v80 + 2);
  if (v81 <= v3)
  {
    if (*((_QWORD *)v80 + 3) + v81 <= v3)
    {
      if (v80 == v79)
        return 0;
      do
        v80 = (char *)*((_QWORD *)v80 + 1);
      while (*((_QWORD *)v80 + 3) + *((_QWORD *)v80 + 2) <= v3 && v80 != v79);
      *(_QWORD *)((char *)v5 + v78) = v80;
    }
  }
  else
  {
    v82 = (char *)*((_QWORD *)v79 + 1);
    while (v80 != v82)
    {
      v80 = *(char **)v80;
      *(_QWORD *)((char *)v5 + v78) = v80;
      if (*((_QWORD *)v80 + 2) <= v3)
        goto LABEL_168;
    }
    v80 = v82;
  }
LABEL_168:
  if (v80 == v79)
    return 0;
  v85 = *((_QWORD *)v80 + 2);
  v86 = *((_QWORD *)v80 + 3);
  v84 = v80 + 16;
  if (v86 + v85 > v3 && v85 <= v3)
    return (CoreNLP::NLAttributedToken *)v84;
  else
    return 0;
}

void sub_191CC7190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::CompositeTagger::enumerateTokens(uint64_t this, unsigned int a2, uint64_t a3, uint64_t a4, CoreNLP::NLAttributedToken *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  CoreNLP::CompositeTagger *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  BOOL v19;
  BOOL v20;
  BOOL v22;
  int v24;
  int v26;
  _QWORD v28[3];
  uint64_t v29[3];
  uint64_t v30[3];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = ((unint64_t)a5 >> 4) & 1;
  if (a2)
    LODWORD(v6) = 0;
  v24 = v6;
  v7 = ((unint64_t)a5 >> 5) & 1;
  if (a2)
    LODWORD(v7) = 0;
  v26 = v7;
  if (a4 >= 1)
  {
    v10 = (CoreNLP::CompositeTagger *)this;
    v11 = 0;
    v12 = a3 + a4;
    v13 = a3;
    do
    {
      while (1)
      {
        this = (uint64_t)CoreNLP::CompositeTagger::getAttributedTokenAtIndex(v10, a2, v13 + v11);
        if (!this)
          return this;
        v13 = *(_QWORD *)this;
        v11 = *(_QWORD *)(this + 8);
        v14 = *(_QWORD *)(this + 16);
        this = CoreNLP::skipTokenForOptions((CoreNLP *)this, a5);
        v15 = this;
        if (v26)
        {
          v16 = *((_DWORD *)v10 + 234);
          v19 = v16 > 0x20;
          v17 = (0x12A083400uLL >> v16) & 1;
          v18 = v19 ? 0 : v17;
        }
        else
        {
          v18 = 0;
        }
        v19 = a3 > v11 + v13 || v12 <= v11 + v13;
        if (!v19)
          break;
        v20 = 0;
        if ((this & 1) == 0)
          goto LABEL_34;
LABEL_31:
        if (!v20)
          return this;
      }
      if (!v24)
        goto LABEL_23;
      v30[0] = v13;
      v30[1] = v11;
      v30[2] = v14;
      this = (uint64_t)CoreNLP::CompositeTagger::joinNames(v10, v30, a3, a4, (uint64_t)&v31);
      v20 = 0;
      v13 = v31;
      v11 = v32;
      v14 = v33;
      if (a3 <= v32 + v31 && v12 > v32 + v31)
      {
LABEL_23:
        if (!v18)
        {
          v20 = 1;
          if ((v15 & 1) != 0)
            goto LABEL_31;
          goto LABEL_34;
        }
        v29[0] = v13;
        v29[1] = v11;
        v29[2] = v14;
        this = (uint64_t)CoreNLP::CompositeTagger::joinContractions(v10, v29, a3, a4, (uint64_t)&v31);
        v13 = v31;
        v11 = v32;
        v14 = v33;
        v20 = a3 <= v32 + v31 && v12 > v32 + v31;
      }
      if ((v15 & 1) != 0)
        goto LABEL_31;
LABEL_34:
      LOBYTE(v31) = 0;
      v28[0] = v13;
      v28[1] = v11;
      v28[2] = v14;
      this = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *))(a6 + 16))(a6, v28, &v31);
      if ((_BYTE)v31)
        v22 = 0;
      else
        v22 = v20;
    }
    while (v22);
  }
  return this;
}

CoreNLP *CoreNLP::CompositeTagger::joinNames@<X0>(CoreNLP *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v22;

  *(_OWORD *)a5 = *(_OWORD *)a2;
  *(_QWORD *)(a5 + 16) = a2[2];
  v6 = *((_QWORD *)result + 92);
  v7 = *((_QWORD *)result + 93);
  v8 = v7 + v6;
  if (a3 + a4 <= v7 + v6)
    v9 = a4;
  else
    v9 = *((_QWORD *)result + 93);
  if (a3 + a4 <= v7 + v6)
    v10 = a3;
  else
    v10 = *((_QWORD *)result + 92);
  v11 = *a2;
  if (*a2 != -1 && v6 != -1)
  {
    v14 = a2[1];
    v15 = v14 + v11;
    if (v11 >= v6 && v15 <= v8)
    {
      v17 = *((_QWORD *)result + 113);
      v18 = (_QWORD *)((char *)result + 872);
      if ((CoreNLP *)((char *)result + 872) != (CoreNLP *)v17
        && *(_QWORD *)(v17 + 16) == v11
        && *(_QWORD *)(v17 + 24) == v14)
      {
        v19 = v10 + v9;
        v20 = *(_BYTE *)(v17 + 120) && v10 <= v15;
        if (v20 && v19 > v15)
        {
          do
          {
            v17 = *(_QWORD *)(v17 + 8);
            if ((_QWORD *)v17 == v18)
              break;
            result = (CoreNLP *)(v17 + 16);
            v22 = *(_QWORD *)(v17 + 24) + *(_QWORD *)(v17 + 16);
            *(_QWORD *)(a5 + 8) = v22 - *a2;
            if (!*(_BYTE *)(v17 + 120))
            {
              result = (CoreNLP *)CoreNLP::skipTokenForOptions(result, (CoreNLP::NLAttributedToken *)4);
              if (!(_DWORD)result)
                return result;
              v22 = *(_QWORD *)(v17 + 24) + *(_QWORD *)(v17 + 16);
            }
          }
          while (v10 <= v22 && v19 > v22);
        }
      }
    }
  }
  return result;
}

CoreNLP *CoreNLP::CompositeTagger::joinContractions@<X0>(CoreNLP *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  _QWORD *v15;
  _QWORD *v16;
  CoreNLP *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_OWORD *)a5 = *(_OWORD *)a2;
  *(_QWORD *)(a5 + 16) = a2[2];
  v6 = *((_QWORD *)result + 92);
  v7 = *((_QWORD *)result + 93);
  if (a3 + a4 <= v7 + v6)
    v8 = a4;
  else
    v8 = *((_QWORD *)result + 93);
  if (a3 + a4 <= v7 + v6)
    v9 = a3;
  else
    v9 = *((_QWORD *)result + 92);
  v10 = *a2;
  if (*a2 != -1 && v6 != -1)
  {
    v13 = a2[1];
    if (v10 >= v6 && v13 + v10 <= v7 + v6)
    {
      v15 = (_QWORD *)*((_QWORD *)result + 113);
      v16 = (_QWORD *)((char *)result + 872);
      if ((_QWORD *)((char *)result + 872) != v15)
      {
        v17 = (CoreNLP *)(v15 + 2);
        if (v15[2] == v10)
        {
          v18 = v15[3];
          result = (CoreNLP *)CoreNLP::skipTokenForOptions(v17, (CoreNLP::NLAttributedToken *)1);
          if (v18 <= v13 && (_DWORD)result != 0)
          {
            v20 = v9 + v8;
            while (1)
            {
              result = (CoreNLP *)(v15 + 2);
              if (v15[3] + v15[2] >= a2[1] + *a2)
              {
                if (v15 == v16)
                  break;
                result = (CoreNLP *)CoreNLP::skipTokenForOptions(result, (CoreNLP::NLAttributedToken *)1);
                if (!(_DWORD)result)
                  break;
                v21 = v15[2];
                v22 = v15[3] + v21;
                if (v21 == *(_QWORD *)(a5 + 8) + *(_QWORD *)a5)
                  *(_QWORD *)(a5 + 8) = v22 - *a2;
                if (v9 > v22 || v20 <= v22)
                  break;
              }
              v15 = (_QWORD *)v15[1];
            }
          }
        }
        else
        {
          return (CoreNLP *)CoreNLP::skipTokenForOptions(v17, (CoreNLP::NLAttributedToken *)1);
        }
      }
    }
  }
  return result;
}

__CFString *CoreNLP::CompositeTagger::copyTagForCurrentToken(CoreNLP::CompositeTagger *this, const __CFString *a2)
{
  int v4;
  char *v5;
  CoreNLP::CompositeTagger *v7;

  v4 = CoreNLP::CompositeTagger::schemeType(this, a2);
  if ((v4 - 8) < 2)
    goto LABEL_4;
  if (v4)
  {
    if (v4 == 12)
    {
LABEL_4:
      v5 = (char *)this + 736;
      return CoreNLP::CompositeTagger::createTag((uint64_t)this, 0, (uint64_t)v5, a2);
    }
    v7 = (CoreNLP::CompositeTagger *)*((_QWORD *)this + 113);
    if (v7 != (CoreNLP::CompositeTagger *)((char *)this + 872))
    {
      v5 = (char *)v7 + 16;
      return CoreNLP::CompositeTagger::createTag((uint64_t)this, 0, (uint64_t)v5, a2);
    }
  }
  return 0;
}

__CFString *CoreNLP::CompositeTagger::createTag(uint64_t a1, int a2, uint64_t a3, CFStringRef theString1)
{
  const __CFString *v4;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t *v20;
  CoreNLP::CompositeTagger *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint64_t *v26;
  int v27;
  void *v28;
  __CFString *result;
  uint64_t v30;
  __CFString **v31;
  uint64_t **v32;
  char v33;
  std::string *v34;
  __CFString **v35;
  std::string *v36;
  const __CFAllocator *v37;
  unint64_t v38;
  std::string *p_cStr;
  const __CFAllocator *v41;
  const char *v42;
  CFStringRef v43;
  __CFString **v44;
  unint64_t v45;
  int v46;
  std::string cStr;

  v4 = theString1;
  v8 = CoreNLP::CompositeTagger::schemeType((CoreNLP::CompositeTagger *)a1, theString1);
  if (!v8)
    return 0;
  v9 = v8;
  if (a2)
    v10 = 1;
  else
    v10 = a3 == 0;
  v11 = !v10;
  v12 = (uint64_t *)(a3 + 32);
  while (1)
  {
    if (v11)
    {
      v13 = CoreNLP::CompositeTagger::schemeType((CoreNLP::CompositeTagger *)a1, v4);
      if (CFEqual(v4, kNLTagSchemeNamedEntityOrLexicalClass[0]))
        v14 = 11;
      else
        v14 = CFEqual(v4, kNLTagSchemeLemma[0]) ? 10 : v13;
      v15 = *v12;
      if (*v12)
      {
        v16 = v14 + 201;
        v17 = a3 + 32;
        do
        {
          v18 = *(_DWORD *)(v15 + 32);
          v19 = v18 < v16;
          if (v18 >= v16)
            v20 = (uint64_t *)v15;
          else
            v20 = (uint64_t *)(v15 + 8);
          if (!v19)
            v17 = v15;
          v15 = *v20;
        }
        while (*v20);
        if ((uint64_t *)v17 != v12 && v16 >= *(_DWORD *)(v17 + 32))
        {
          CoreNLP::TaggingModelManager::tagToLabel((_QWORD *)(a1 + 24), *(_DWORD *)(v17 + 40), 7, *(_DWORD *)(a1 + 936), &cStr);
          if ((cStr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_cStr = &cStr;
          else
            p_cStr = (std::string *)cStr.__r_.__value_.__r.__words[0];
          v28 = (void *)CFStringCreateWithCString(0, (const char *)p_cStr, 0x8000100u);
          if ((SHIBYTE(cStr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            return (__CFString *)v28;
LABEL_99:
          operator delete(cStr.__r_.__value_.__l.__data_);
          return (__CFString *)v28;
        }
      }
    }
    if (v9 == 4)
      return (__CFString *)CoreNLP::CompositeTagger::createScriptTag(a1, a2, a3);
    if (v9 == 3)
      return (__CFString *)CoreNLP::CompositeTagger::createLanguageTag(a1, a2, a3);
    if (!a3)
      return 0;
    v21 = (CoreNLP::CompositeTagger *)CFStringCompare(v4, kNLTagSchemeLemma[0], 0);
    if (!v21)
      return (__CFString *)CoreNLP::CompositeTagger::createLemmaTag(a1, a2, a3);
    v22 = *v12;
    if (!*v12)
      return (__CFString *)CoreNLP::CompositeTagger::createFixedTag(v21, (uint64_t **)a3, v4);
    v23 = a3 + 32;
    do
    {
      v24 = *(_DWORD *)(v22 + 32);
      v25 = v24 < v9;
      if (v24 >= v9)
        v26 = (uint64_t *)v22;
      else
        v26 = (uint64_t *)(v22 + 8);
      if (!v25)
        v23 = v22;
      v22 = *v26;
    }
    while (*v26);
    if ((uint64_t *)v23 == v12 || v9 < *(_DWORD *)(v23 + 32))
      return (__CFString *)CoreNLP::CompositeTagger::createFixedTag(v21, (uint64_t **)a3, v4);
    v27 = *(_DWORD *)(v23 + 40);
    if (CFStringCompare(v4, kNLTagSchemeTokenType[0], 0) == kCFCompareEqualTo)
      break;
    if (CFStringCompare(v4, kNLTagSchemeInternalClass[0], 0) == kCFCompareEqualTo)
    {
      v46 = 1;
      cStr.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
      v32 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)(a3 + 24), &v46, (uint64_t)&std::piecewise_construct, &cStr);
      if (*((_DWORD *)v32 + 10) != 91)
        return (__CFString *)CoreNLP::CompositeTagger::createFixedTag((CoreNLP::CompositeTagger *)v32, (uint64_t **)a3, v4);
      CoreNLP::TaggingModelManager::tagToLabel((_QWORD *)(a1 + 24), v27, 6, *(_DWORD *)(a1 + 936), &cStr);
      v33 = HIBYTE(cStr.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(cStr.__r_.__value_.__r.__words[2]) < 0)
      {
        if (cStr.__r_.__value_.__l.__size_)
        {
          v34 = (std::string *)cStr.__r_.__value_.__r.__words[0];
          goto LABEL_94;
        }
      }
      else if (*((_BYTE *)&cStr.__r_.__value_.__s + 23))
      {
        v34 = &cStr;
LABEL_94:
        v43 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v34, 0x8000100u);
        goto LABEL_95;
      }
      v44 = NLLexicalClassOtherWord;
      goto LABEL_97;
    }
    if (CFStringCompare(v4, kNLTagSchemeLexicalClass[0], 0) == kCFCompareEqualTo)
    {
      v46 = 1;
      cStr.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
      v32 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)(a3 + 24), &v46, (uint64_t)&std::piecewise_construct, &cStr);
      if (*((_DWORD *)v32 + 10) != 91)
        return (__CFString *)CoreNLP::CompositeTagger::createFixedTag((CoreNLP::CompositeTagger *)v32, (uint64_t **)a3, v4);
      switch(v27)
      {
        case 16:
        case 18:
          v35 = NLLexicalClassConjunction;
          break;
        case 17:
        case 29:
          v35 = NLLexicalClassNumber;
          break;
        case 19:
        case 20:
        case 21:
        case 22:
          v35 = NLLexicalClassDeterminer;
          break;
        case 23:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 65:
        case 66:
          v35 = NLLexicalClassPronoun;
          break;
        case 25:
          v35 = NLLexicalClassPreposition;
          break;
        case 26:
        case 27:
        case 28:
          v35 = NLLexicalClassAdjective;
          break;
        case 30:
        case 31:
        case 32:
        case 33:
          v35 = NLLexicalClassNoun;
          break;
        case 34:
        case 43:
        case 47:
        case 48:
        case 49:
          v35 = NLLexicalClassParticle;
          break;
        case 40:
        case 41:
        case 42:
        case 45:
        case 46:
          v35 = NLLexicalClassAdverb;
          break;
        case 50:
          v35 = NLLexicalClassInterjection;
          break;
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
          v35 = NLLexicalClassVerb;
          break;
        default:
          return (__CFString *)CoreNLP::CompositeTagger::createFixedTag((CoreNLP::CompositeTagger *)v32, (uint64_t **)a3, v4);
      }
      return (__CFString *)CFRetain(*v35);
    }
    if (CFStringCompare(v4, kNLTagSchemeNamedEntity[0], 0) == kCFCompareEqualTo)
    {
      switch(v27)
      {
        case 'E':
LABEL_70:
          v31 = NLNamedEntityOrganizationName;
          return (__CFString *)CFRetain(*v31);
        case 'D':
LABEL_71:
          v31 = NLNamedEntityPlaceName;
          return (__CFString *)CFRetain(*v31);
        case 'C':
LABEL_69:
          v31 = NLNamedEntityPersonalName;
          return (__CFString *)CFRetain(*v31);
      }
      v46 = 1;
      cStr.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
      v32 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)(a3 + 24), &v46, (uint64_t)&std::piecewise_construct, &cStr);
      if (*((_DWORD *)v32 + 10) == 91)
        return NLLexicalClassOtherWord[0];
      return (__CFString *)CoreNLP::CompositeTagger::createFixedTag((CoreNLP::CompositeTagger *)v32, (uint64_t **)a3, v4);
    }
    if (CFStringCompare(v4, kNLTagSchemeNamedEntityOrLexicalClass[0], 0))
    {
      if (CFStringCompare(v4, kNLTagSchemeSentiment[0], 0) == kCFCompareEqualTo)
      {
        switch(v27)
        {
          case 201:
            v37 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v38 = 0xBFF0000000000000;
            goto LABEL_124;
          case 202:
            v37 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v38 = 0xBFE999999999999ALL;
            goto LABEL_124;
          case 203:
            v37 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v38 = 0xBFE3333333333333;
            goto LABEL_124;
          case 204:
            v37 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v38 = 0xBFD999999999999ALL;
            goto LABEL_124;
          case 205:
            v37 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v38 = 0xBFC999999999999ALL;
            goto LABEL_124;
          case 206:
            v37 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v45 = 0;
            goto LABEL_125;
          case 207:
            v37 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v38 = 0x3FC999999999999ALL;
            goto LABEL_124;
          case 208:
            v37 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v38 = 0x3FD999999999999ALL;
            goto LABEL_124;
          case 209:
            v37 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v38 = 0x3FE3333333333333;
            goto LABEL_124;
          case 210:
            v37 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v38 = 0x3FE999999999999ALL;
            goto LABEL_124;
          case 211:
            v37 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v38 = 0x3FF0000000000000;
LABEL_124:
            v45 = v38;
LABEL_125:
            result = (__CFString *)CFStringCreateWithFormat(v37, 0, CFSTR("%.1f"), v45);
            break;
          default:
            return 0;
        }
        return result;
      }
      if (CFStringCompare(v4, kNLTagSchemeTopic[0], 0) == kCFCompareEqualTo)
      {
        switch(v27)
        {
          case 212:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Automotives";
            break;
          case 213:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Books";
            break;
          case 214:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Romance";
            break;
          case 215:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Pets";
            break;
          case 216:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Home";
            break;
          case 217:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Family";
            break;
          case 218:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Games";
            break;
          case 219:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Holidays";
            break;
          case 220:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Movies";
            break;
          case 221:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Politics";
            break;
          case 222:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Health";
            break;
          case 223:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "School";
            break;
          case 224:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Music";
            break;
          case 225:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Science";
            break;
          case 226:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Outdoors";
            break;
          case 227:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Party";
            break;
          case 228:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Others";
            break;
          case 229:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Restaurant";
            break;
          case 230:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Sports";
            break;
          case 231:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Television";
            break;
          case 232:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Shopping";
            break;
          case 233:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Travel";
            break;
          case 234:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Work";
            break;
          case 235:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Education";
            break;
          case 236:
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Technology";
            break;
          default:
            if (v27)
              return 0;
            v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v42 = "Unknown";
            break;
        }
        return (__CFString *)CFStringCreateWithFormat(v41, 0, CFSTR("%s"), v42);
      }
      if (CFStringCompare(v4, kNLTagSchemeEmotion[0], 0))
      {
        if ((v9 - 100) <= 0x64)
        {
          CoreNLP::TaggingModelManager::tagToLabel((_QWORD *)(a1 + 24), v27, v9, *(_DWORD *)(a1 + 936), &cStr);
          v33 = HIBYTE(cStr.__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(cStr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (*((_BYTE *)&cStr.__r_.__value_.__s + 23))
            {
              v36 = &cStr;
              goto LABEL_109;
            }
LABEL_110:
            v44 = NLTokenTypeOther;
LABEL_97:
            v28 = *v44;
LABEL_98:
            if ((v33 & 0x80) == 0)
              return (__CFString *)v28;
            goto LABEL_99;
          }
          if (!cStr.__r_.__value_.__l.__size_)
            goto LABEL_110;
          v36 = (std::string *)cStr.__r_.__value_.__r.__words[0];
LABEL_109:
          v43 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v36, 0x8000100u);
LABEL_95:
          v28 = (void *)v43;
          v33 = HIBYTE(cStr.__r_.__value_.__r.__words[2]);
          goto LABEL_98;
        }
        return 0;
      }
      if ((v27 - 238) > 5)
        v31 = NLEmotionNeutral;
      else
        v31 = off_1E2DF4D48[v27 - 238];
      return (__CFString *)CFRetain(*v31);
    }
    switch(v27)
    {
      case 'E':
        goto LABEL_70;
      case 'D':
        goto LABEL_71;
      case 'C':
        goto LABEL_69;
    }
    v4 = kNLTagSchemeLexicalClass[0];
    v9 = CoreNLP::CompositeTagger::schemeType((CoreNLP::CompositeTagger *)a1, kNLTagSchemeLexicalClass[0]);
    if (!v9)
      return 0;
  }
  if ((v27 - 89) > 2 || (v28 = (void *)CFRetain(*off_1E2DF4D30[v27 - 89])) == 0)
  {
    v30 = *(_QWORD *)(a3 + 72);
    if ((v30 & 0x800000000) == 0 && (v30 & 0x400000) != 0)
      v31 = NLTokenTypePunctuation;
    else
      v31 = NLTokenTypeOther;
    return (__CFString *)CFRetain(*v31);
  }
  return (__CFString *)v28;
}

void sub_191CC80F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFDictionary *CoreNLP::CompositeTagger::copyTagAndProbabilityForCurrentToken(CoreNLP::CompositeTagger *this, const __CFString *a2)
{
  int v4;
  int v5;
  char *v6;
  uint64_t **v7;
  const __CFAllocator *v8;
  __CFDictionary *Mutable;
  CFNumberRef v10;
  void *v11;
  CoreNLP::CompositeTagger *v12;
  uint64_t *v14;
  char *v15;
  int i;
  int v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t *v24;
  char *v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  int v29;
  uint64_t valuePtr;
  void *key;
  int v32;
  int *v33;

  v4 = CoreNLP::CompositeTagger::schemeType(this, a2);
  v5 = v4;
  v32 = v4;
  if ((v4 - 8) < 2)
    goto LABEL_4;
  if (!v4)
    return 0;
  if (v4 == 12)
  {
LABEL_4:
    v6 = (char *)this + 736;
  }
  else
  {
    v12 = (CoreNLP::CompositeTagger *)*((_QWORD *)this + 113);
    if (v12 == (CoreNLP::CompositeTagger *)((char *)this + 872))
      return 0;
    v6 = (char *)v12 + 16;
  }
  key = CoreNLP::CompositeTagger::createTag((uint64_t)this, 0, (uint64_t)v6, a2);
  if (!key)
    return 0;
  valuePtr = 0x3FF0000000000000;
  if ((v5 - 5) > 0xFFFFFFFD)
    goto LABEL_8;
  v7 = (uint64_t **)CFEqual(a2, kNLTagSchemeLemma[0]);
  if ((_DWORD)v7)
    goto LABEL_8;
  v15 = v6 + 32;
  v14 = (uint64_t *)*((_QWORD *)v6 + 4);
  for (i = v32; v14; v14 = (uint64_t *)*v14)
  {
    v17 = *((_DWORD *)v14 + 8);
    if (v32 >= v17)
    {
      if (v17 >= v32)
      {
        v33 = &v32;
        v7 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)v6 + 3, &v32, (uint64_t)&std::piecewise_construct, &v33);
        valuePtr = (uint64_t)v7[6];
        i = v32;
        break;
      }
      ++v14;
    }
  }
  if (i != 7)
    goto LABEL_32;
  v18 = *(uint64_t **)v15;
  if (!*(_QWORD *)v15)
    goto LABEL_32;
  while (1)
  {
    v19 = *((_DWORD *)v18 + 8);
    if (v19 <= 6)
      break;
LABEL_28:
    v18 = (uint64_t *)*v18;
    if (!v18)
      goto LABEL_32;
  }
  if (v19 != 6)
  {
    ++v18;
    goto LABEL_28;
  }
  if (!CoreNLP::CompositeTagger::isNERTag((CoreNLP::CompositeTagger *)v7, key))
  {
    v29 = 6;
    v33 = &v29;
    valuePtr = (uint64_t)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)v6 + 3, &v29, (uint64_t)&std::piecewise_construct, &v33)[6];
  }
LABEL_32:
  if (*((_DWORD *)this + 234) == 4)
  {
    valuePtr = 0x3FF0000000000000;
    if (v32 == 7)
    {
      v20 = *((_QWORD *)this + 114);
      v21 = *((_QWORD *)this + 115);
      if (v20 != v21)
      {
        while (*(_QWORD *)v20 != *(_QWORD *)v6)
        {
          v20 += 112;
          if (v20 == v21)
            goto LABEL_39;
        }
        v33 = &v32;
        valuePtr = (uint64_t)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)(v20 + 24), &v32, (uint64_t)&std::piecewise_construct, &v33)[6];
      }
    }
  }
LABEL_39:
  if (CFEqual(a2, kNLTagSchemeNamedEntityOrLexicalClass[0]))
  {
    v22 = 212;
  }
  else
  {
    v23 = CFEqual(a2, kNLTagSchemeLemma[0]);
    v22 = v32 + 201;
    if (v23)
      v22 = 211;
  }
  v24 = *(uint64_t **)v15;
  if (*(_QWORD *)v15)
  {
    v25 = v6 + 32;
    do
    {
      v26 = *((_DWORD *)v24 + 8);
      v27 = v26 < v22;
      if (v26 >= v22)
        v28 = v24;
      else
        v28 = v24 + 1;
      if (!v27)
        v25 = (char *)v24;
      v24 = (uint64_t *)*v28;
    }
    while (*v28);
    if (v25 != v15 && v22 >= *((_DWORD *)v25 + 8))
      valuePtr = 0x3FF0000000000000;
  }
LABEL_8:
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v10 = CFNumberCreate(v8, kCFNumberDoubleType, &valuePtr);
  v33 = (int *)v10;
  v11 = key;
  CFDictionaryAddValue(Mutable, key, v10);
  if (v10)
    CFRelease(v10);
  if (v11)
    CFRelease(v11);
  return Mutable;
}

void sub_191CC8430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

BOOL CoreNLP::CompositeTagger::isNERTag(CoreNLP::CompositeTagger *this, CFTypeRef cf1)
{
  return CFEqual(cf1, NLNamedEntityPersonalName[0])
      || CFEqual(cf1, NLNamedEntityPlaceName[0])
      || CFEqual(cf1, NLNamedEntityOrganizationName[0]) != 0;
}

__CFString *CoreNLP::CompositeTagger::copyTagAtIndex(CoreNLP::CompositeTagger *this, unsigned int a2, CFIndex a3, CFStringRef theString1)
{
  const __CFString *v8;
  CoreNLP::NLAttributedToken *AttributedTokenAtIndex;

  if (a3 < 0)
    return 0;
  v8 = *(const __CFString **)(*((_QWORD *)this + 2) + 8);
  if (v8)
  {
    if (CFStringGetLength(v8) <= a3)
      return 0;
  }
  if (!CoreNLP::CompositeTagger::schemeType(this, theString1))
    return 0;
  AttributedTokenAtIndex = CoreNLP::CompositeTagger::getAttributedTokenAtIndex(this, a2, a3);
  if (!AttributedTokenAtIndex
    && CFStringCompare(theString1, kNLTagSchemeLanguage[0], 0)
    && CFStringCompare(theString1, kNLTagSchemeScript[0], 0))
  {
    return 0;
  }
  else
  {
    return CoreNLP::CompositeTagger::createTag((uint64_t)this, a2, (uint64_t)AttributedTokenAtIndex, theString1);
  }
}

__CFDictionary *CoreNLP::CompositeTagger::copyLanguageMapAtIndex(CoreNLP::CompositeTagger *this, unsigned int a2, CFIndex a3)
{
  const __CFString *v6;
  CoreNLP::NLAttributedToken *AttributedTokenAtIndex;

  if ((a3 & 0x8000000000000000) == 0
    && ((v6 = *(const __CFString **)(*((_QWORD *)this + 2) + 8)) == 0 || CFStringGetLength(v6) > a3)
    && ((AttributedTokenAtIndex = CoreNLP::CompositeTagger::getAttributedTokenAtIndex(this, a2, a3), a2 == 3)
     || AttributedTokenAtIndex))
  {
    return CoreNLP::CompositeTagger::copyLanguageMap((uint64_t)this, a2, (uint64_t)AttributedTokenAtIndex);
  }
  else
  {
    return 0;
  }
}

__CFDictionary *CoreNLP::CompositeTagger::copyLanguageMap(uint64_t a1, int a2, uint64_t a3)
{
  __CFDictionary *v5;
  uint64_t v6;
  CoreNLP::Orthography *Orthography;
  CoreNLP::Orthography *CurrentDominantLanguageForString;
  CFTypeRef cf;
  void *values;
  void *keys;
  CFRange v14;

  if ((a2 - 1) < 2)
  {
    v5 = CoreNLP::TaggerContext::copyLanguageMap(*(CoreNLP::TaggerContext **)(a1 + 16));
  }
  else
  {
    v5 = 0;
    if (a2)
    {
      if (a2 == 3)
      {
        v6 = *(_QWORD *)(a1 + 16);
        v14.location = *(_QWORD *)(v6 + 24);
        v14.length = *(unsigned __int8 *)(a1 + 724);
        Orthography = CoreNLP::Orthography::createOrthography(*(const __CFString **)(v6 + 8), *(const __CFString **)(v6 + 16), v14);
        v5 = CoreNLP::Orthography::copyLanguageMap(Orthography);
        if (Orthography)
          (*(void (**)(CoreNLP::Orthography *))(*(_QWORD *)Orthography + 8))(Orthography);
      }
      return v5;
    }
  }
  if ((*(_BYTE *)(a3 + 72) & 8) != 0)
  {
    keys = CoreNLP::TaggerContext::getCurrentDominantScriptForString(*(CoreNLP::TaggerContext **)(a1 + 16), *(const __CFString **)(*(_QWORD *)(a1 + 16) + 8), *(CFRange *)a3);
    CurrentDominantLanguageForString = CoreNLP::TaggerContext::getCurrentDominantLanguageForString(*(CoreNLP::TaggerContext **)(a1 + 16), *(const __CFString **)(*(_QWORD *)(a1 + 16) + 8), *(CFRange *)a3);
    values = CurrentDominantLanguageForString;
    if (keys && CurrentDominantLanguageForString != 0)
    {
      cf = CFArrayCreate(0, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
      v5 = CFDictionaryCreate(0, (const void **)&keys, &cf, 1, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
      CFRelease(cf);
    }
  }
  return v5;
}

void sub_191CC8764(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

const __CFString *CoreNLP::CompositeTagger::createFixedTag(CoreNLP::CompositeTagger *this, uint64_t **a2, CFStringRef theString1)
{
  uint64_t **v5;
  __CFString **v6;
  unint64_t v7;
  int v8;
  const __CFString *result;
  int v10;
  int v11;
  int *v12;

  if (CFStringCompare(theString1, kNLTagSchemeInternalClass[0], 0))
  {
    v5 = a2 + 3;
    v11 = 1;
    v12 = &v11;
    if (*((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(a2 + 3, &v11, (uint64_t)&std::piecewise_construct, &v12)+ 10) == 2)
    {
      v6 = NLLexicalClassSentenceTerminator;
      return *v6;
    }
    if ((*((_BYTE *)a2 + 76) & 8) == 0)
    {
      v11 = 1;
      v12 = &v11;
      if (*((int *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v5, &v11, (uint64_t)&std::piecewise_construct, &v12)+ 10) >= 2)
      {
        v10 = 1;
        v12 = &v10;
        if (*((int *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v5, &v10, (uint64_t)&std::piecewise_construct, &v12)+ 10) <= 13)
        {
          v11 = 1;
          v12 = &v11;
          switch(*((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v5, &v11, (uint64_t)&std::piecewise_construct, &v12)+ 10))
          {
            case 5:
              v6 = NLLexicalClassOpenQuote;
              break;
            case 6:
              v6 = NLLexicalClassCloseQuote;
              break;
            case 7:
              v6 = NLLexicalClassOpenParenthesis;
              break;
            case 8:
              v6 = NLLexicalClassCloseParenthesis;
              break;
            case 9:
              v6 = NLLexicalClassWordJoiner;
              break;
            case 0xB:
              v6 = NLLexicalClassDash;
              break;
            default:
              v6 = NLLexicalClassOtherPunctuation;
              break;
          }
          return *v6;
        }
      }
      v11 = 1;
      v12 = &v11;
      if (*((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v5, &v11, (uint64_t)&std::piecewise_construct, &v12)+ 10) == 89)
      {
        v6 = NLTokenTypeWhitespace;
        return *v6;
      }
      v11 = 1;
      v12 = &v11;
      if (*((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v5, &v11, (uint64_t)&std::piecewise_construct, &v12)+ 10) == 90)
      {
        v6 = NLLexicalClassParagraphBreak;
        return *v6;
      }
      if (CFStringCompare(theString1, kNLTagSchemeLexicalClass[0], 0) == kCFCompareEqualTo)
      {
        v6 = NLLexicalClassOtherWord;
        return *v6;
      }
    }
    v6 = NLTokenTypeOther;
    return *v6;
  }
  v7 = (unint64_t)a2[9];
  if ((v7 & 0x2000000) != 0)
    return CFSTR(".");
  if ((v7 & 0x4000000) != 0)
    return CFSTR("?");
  if ((v7 & 0x8000000) != 0)
    return CFSTR("!");
  if ((v7 & 0x800000000) != 0)
    return CFSTR("SYM");
  v11 = 1;
  v12 = &v11;
  v8 = *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(a2 + 3, &v11, (uint64_t)&std::piecewise_construct, &v12)+ 10);
  switch(v8)
  {
    case 5:
      result = CFSTR("“");
      break;
    case 6:
      result = CFSTR("”");
      break;
    case 7:
      result = CFSTR("(");
      break;
    case 8:
      result = CFSTR(")");
      break;
    case 9:
    case 11:
      result = CFSTR("-");
      break;
    case 10:
      result = CFSTR(",");
      break;
    default:
      if ((v8 - 89) >= 2)
        return CFSTR("SYM");
      result = CFSTR(" ");
      break;
  }
  return result;
}

CFStringRef CoreNLP::CompositeTagger::createLanguageTag(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  CoreNLP::Orthography *Orthography;
  const __CFString *DominantLanguageTag;
  CFStringRef Copy;
  CoreNLP::Orthography *CurrentDominantLanguage;
  CFRange v9;

  if ((a2 - 1) < 2)
  {
    CurrentDominantLanguage = CoreNLP::TaggerContext::getCurrentDominantLanguage(*(CoreNLP::TaggerContext **)(a1 + 16));
    if (!CurrentDominantLanguage)
      return 0;
    return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFStringRef)CurrentDominantLanguage);
  }
  if (!a2)
  {
    if ((*(_BYTE *)(a3 + 72) & 8) == 0)
      return 0;
    CurrentDominantLanguage = CoreNLP::TaggerContext::getCurrentDominantLanguageForString(*(CoreNLP::TaggerContext **)(a1 + 16), *(const __CFString **)(*(_QWORD *)(a1 + 16) + 8), *(CFRange *)a3);
    if (!CurrentDominantLanguage)
      return 0;
    return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFStringRef)CurrentDominantLanguage);
  }
  if (a2 != 3)
    return 0;
  v3 = *(_QWORD *)(a1 + 16);
  v9.location = *(_QWORD *)(v3 + 24);
  v9.length = *(unsigned __int8 *)(a1 + 724);
  Orthography = CoreNLP::Orthography::createOrthography(*(const __CFString **)(v3 + 8), *(const __CFString **)(v3 + 16), v9);
  DominantLanguageTag = CoreNLP::Orthography::getDominantLanguageTag(Orthography);
  if (DominantLanguageTag)
  {
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], DominantLanguageTag);
    if (!Orthography)
      return Copy;
    goto LABEL_13;
  }
  Copy = 0;
  if (Orthography)
LABEL_13:
    (*(void (**)(CoreNLP::Orthography *))(*(_QWORD *)Orthography + 8))(Orthography);
  return Copy;
}

void sub_191CC8BBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

CFStringRef CoreNLP::CompositeTagger::createScriptTag(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  CoreNLP::Orthography *Orthography;
  const __CFString *DominantScriptTag;
  CFStringRef Copy;
  CoreNLP::Orthography *CurrentDominantScript;
  CFRange v9;

  if ((a2 - 1) < 2)
  {
    CurrentDominantScript = CoreNLP::TaggerContext::getCurrentDominantScript(*(CoreNLP::TaggerContext **)(a1 + 16));
    if (!CurrentDominantScript)
      return 0;
    return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFStringRef)CurrentDominantScript);
  }
  if (!a2)
  {
    if ((*(_BYTE *)(a3 + 72) & 8) == 0)
      return 0;
    CurrentDominantScript = CoreNLP::TaggerContext::getCurrentDominantScriptForString(*(CoreNLP::TaggerContext **)(a1 + 16), *(const __CFString **)(*(_QWORD *)(a1 + 16) + 8), *(CFRange *)a3);
    if (!CurrentDominantScript)
      return 0;
    return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFStringRef)CurrentDominantScript);
  }
  if (a2 != 3)
    return 0;
  v3 = *(_QWORD *)(a1 + 16);
  v9.location = *(_QWORD *)(v3 + 24);
  v9.length = *(unsigned __int8 *)(a1 + 724);
  Orthography = CoreNLP::Orthography::createOrthography(*(const __CFString **)(v3 + 8), *(const __CFString **)(v3 + 16), v9);
  DominantScriptTag = CoreNLP::Orthography::getDominantScriptTag(Orthography);
  if (DominantScriptTag)
  {
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], DominantScriptTag);
    if (!Orthography)
      return Copy;
    goto LABEL_13;
  }
  Copy = 0;
  if (Orthography)
LABEL_13:
    (*(void (**)(CoreNLP::Orthography *))(*(_QWORD *)Orthography + 8))(Orthography);
  return Copy;
}

void sub_191CC8CBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::CompositeTagger::createLemmaTag(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;

  if ((a2 - 1) < 3 || (*(_BYTE *)(a3 + 72) & 8) == 0)
    return 0;
  if (!*(_QWORD *)(a1 + 728))
  {
    v5 = (_QWORD *)operator new();
    CoreNLP::LemmaTagger::LemmaTagger(v5, *(const CoreNLP::TaggerContext **)(a1 + 16));
    v6 = *(_QWORD *)(a1 + 728);
    *(_QWORD *)(a1 + 728) = v5;
    if (v6)
      MEMORY[0x19401E994](v6, 0x60C4044C4A2DFLL);
  }
  v7 = *(_QWORD *)(a3 + 32);
  if (!v7)
    return 0;
  v8 = a3 + 32;
  do
  {
    v9 = *(_DWORD *)(v7 + 32);
    v10 = v9 < 6;
    if (v9 >= 6)
      v11 = (uint64_t *)v7;
    else
      v11 = (uint64_t *)(v7 + 8);
    if (!v10)
      v8 = v7;
    v7 = *v11;
  }
  while (*v11);
  if (v8 != a3 + 32 && *(int *)(v8 + 32) <= 6)
    return CoreNLP::LemmaTagger::createLemmaTag(*(CoreNLP::TaggerContext ***)(a1 + 728), (CFRange *)a3, *(_DWORD *)(v8 + 40));
  else
    return 0;
}

void sub_191CC8DC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

__CFString *CoreNLP::CompositeTagger::getEmotionLabelFromTagID(CoreNLP::CompositeTagger *this, int a2)
{
  __CFString **v2;

  if ((a2 - 238) > 5)
    v2 = NLEmotionNeutral;
  else
    v2 = off_1E2DF4D48[a2 - 238];
  return *v2;
}

void CoreNLP::CompositeTagger::tagCurrentParagraph(CoreNLP::CompositeTagger *this, CoreNLP::NLAttributedToken *a2)
{
  _QWORD *v4;
  CoreNLP::TaggingModelManager *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  unsigned int v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void *__p;
  char *v21;
  char *v22;

  v4 = (_QWORD *)((char *)this + 32);
  v5 = (CoreNLP::CompositeTagger *)((char *)this + 24);
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  *(v4 - 1) = v4;
  *v4 = 0;
  v4[1] = 0;
  v6 = (_QWORD *)v4[79];
  v7 = v4 + 80;
  if (v6 != v7)
  {
    v8 = 0;
    do
    {
      v9 = *((_DWORD *)v6 + 7);
      v10 = v9 > 0xC || ((1 << v9) & 0x1300) == 0;
      if (!v10)
      {
        CoreNLP::TaggingModelManager::addTask(v5, v9, *((_DWORD *)this + 234));
        v8 = 1;
      }
      v11 = (_QWORD *)v6[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v6[2];
          v10 = *v12 == (_QWORD)v6;
          v6 = v12;
        }
        while (!v10);
      }
      v6 = v12;
    }
    while (v12 != v7);
    if ((v8 & 1) != 0)
    {
      __p = 0;
      v21 = 0;
      v22 = 0;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v22, 1uLL);
      v15 = &v13[8 * v14];
      *(_QWORD *)v13 = a2;
      v16 = v13 + 8;
      v18 = (char *)__p;
      v17 = v21;
      if (v21 != __p)
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *((_QWORD *)v13 - 1) = v19;
          v13 -= 8;
        }
        while (v17 != v18);
        v17 = (char *)__p;
      }
      __p = v13;
      v21 = v16;
      v22 = v15;
      if (v17)
        operator delete(v17);
      v21 = v16;
      CoreNLP::TaggingModelManager::tagInstance(v5, (uint64_t *)&__p, *((CFStringRef **)this + 2), 2);
      if (__p)
      {
        v21 = (char *)__p;
        operator delete(__p);
      }
    }
  }
}

void sub_191CC8F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreNLP::CompositeTagger::tagCurrentSentenceForAllSchemes(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  CoreNLP::TaggingModelManager *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  BOOL v10;
  int *v11;
  int *v12;
  BOOL v14;
  uint64_t v15;
  int *v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  CoreNLP::NLAttributedToken *v36;
  CoreNLP::NLAttributedToken **v37;
  unint64_t v38;
  CoreNLP::NLAttributedToken *v39;
  uint64_t **v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t **v50;
  uint64_t *v51;
  uint64_t **v52;
  CoreNLP::NLAttributedToken **v53;
  CoreNLP::TaggingModelManager *v54;
  uint64_t v55;
  uint64_t **v56;
  int v57;
  int v58;
  _QWORD v59[3];
  __int128 v60[7];
  int v61;
  uint64_t v62;
  __int128 v63;
  uint64_t *v64;
  uint64_t *v65;
  char *v66;

  v4 = (_QWORD *)(a1 + 32);
  v5 = (CoreNLP::TaggingModelManager *)(a1 + 24);
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  *(v4 - 1) = v4;
  *v4 = 0;
  v4[1] = 0;
  v6 = (int *)v4[79];
  v7 = (int *)(v4 + 80);
  if (v6 == v7)
    goto LABEL_77;
  v8 = 0;
  do
  {
    v9 = v6[7];
    v10 = v9 > 0xC || ((1 << v9) & 0x1300) == 0;
    if (v10 && CoreNLP::TaggingModelManager::addTask(v5, v6[7], *(_DWORD *)(a1 + 936)))
    {
      v14 = v9 == 7 && *(_DWORD *)(a1 + 936) == 4;
      v8 |= v14;
    }
    v11 = (int *)*((_QWORD *)v6 + 1);
    if (v11)
    {
      do
      {
        v12 = v11;
        v11 = *(int **)v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        v12 = (int *)*((_QWORD *)v6 + 2);
        v10 = *(_QWORD *)v12 == (_QWORD)v6;
        v6 = v12;
      }
      while (!v10);
    }
    v6 = v12;
  }
  while (v12 != v7);
  if ((v8 & 1) == 0)
    goto LABEL_77;
  if (*(_DWORD *)(a1 + 936) != 4)
    goto LABEL_77;
  v15 = *(_QWORD *)v7;
  if (!*(_QWORD *)v7)
    goto LABEL_77;
  v16 = v7;
  do
  {
    v17 = *(_DWORD *)(v15 + 28);
    v18 = v17 < 7;
    if (v17 >= 7)
      v19 = (uint64_t *)v15;
    else
      v19 = (uint64_t *)(v15 + 8);
    if (!v18)
      v16 = (int *)v15;
    v15 = *v19;
  }
  while (*v19);
  if (v16 != v7 && v16[7] <= 7)
  {
    v54 = v5;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v20 = (uint64_t **)*a2;
    v56 = (uint64_t **)a2[1];
    if ((uint64_t **)*a2 != v56)
    {
      do
      {
        v21 = (*v20)[1];
        if (v21 >= 1)
        {
          v22 = 0;
          v23 = **v20;
          do
          {
            v24 = operator new();
            v62 = v22 + v23;
            v63 = xmmword_191D40700;
            CoreNLP::NLAttributedToken::NLAttributedToken(v24, (uint64_t)&v62);
            v25 = v65;
            if (v65 >= (uint64_t *)v66)
            {
              v27 = v65 - v64;
              if ((unint64_t)(v27 + 1) >> 61)
                std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
              v28 = (v66 - (char *)v64) >> 2;
              if (v28 <= v27 + 1)
                v28 = v27 + 1;
              if ((unint64_t)(v66 - (char *)v64) >= 0x7FFFFFFFFFFFFFF8)
                v29 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v29 = v28;
              if (v29)
                v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v66, v29);
              else
                v30 = 0;
              v31 = (uint64_t *)&v30[8 * v27];
              *v31 = v24;
              v26 = v31 + 1;
              v33 = v64;
              v32 = v65;
              if (v65 != v64)
              {
                do
                {
                  v34 = *--v32;
                  *--v31 = v34;
                }
                while (v32 != v33);
                v32 = v64;
              }
              v64 = v31;
              v65 = v26;
              v66 = &v30[8 * v29];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *v65 = v24;
              v26 = v25 + 1;
            }
            v65 = v26;
            ++v22;
          }
          while (v22 != v21);
        }
        ++v20;
      }
      while (v20 != v56);
    }
    v35 = (uint64_t)v54;
    CoreNLP::TaggingModelManager::tagInstance(v54, (uint64_t *)&v64, *(CFStringRef **)(a1 + 16), 0);
    v37 = (CoreNLP::NLAttributedToken **)v64;
    if (v65 != v64)
    {
      v38 = 0;
      while (1)
      {
        v39 = v37[v38];
        v40 = (uint64_t **)((char *)v39 + 24);
        v61 = 7;
        *(_QWORD *)&v60[0] = &v61;
        v41 = *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)v39 + 3, &v61, (uint64_t)&std::piecewise_construct, (_DWORD **)v60)+ 10);
        if (v41 == 92)
        {
          v42 = 67;
          v43 = 93;
          goto LABEL_63;
        }
        if (v41 == 94)
          break;
        if (v41 == 96)
        {
          v42 = 69;
          v43 = 97;
LABEL_63:
          v44 = *(_QWORD *)v39;
          v45 = *((_QWORD *)v39 + 1);
          v46 = v38 + 1;
          v47 = v64;
          if (v38 + 1 < v65 - v64)
          {
            v55 = v44;
            v57 = v42;
            do
            {
              v48 = v46;
              v49 = v47[v46];
              v61 = 7;
              *(_QWORD *)&v60[0] = &v61;
              if (*((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)(v49 + 24), &v61, (uint64_t)&std::piecewise_construct, (_DWORD **)v60)+ 10) != v43)break;
              v45 += *(_QWORD *)(v49 + 8);
              v46 = v48 + 1;
              v47 = v64;
            }
            while (v48 + 1 < v65 - v64);
            v38 = v48 - 1;
            v42 = v57;
            v44 = v55;
          }
          v59[0] = v44;
          v59[1] = v45;
          v59[2] = 0;
          CoreNLP::NLAttributedToken::NLAttributedToken((uint64_t)v60, (uint64_t)v59);
          std::vector<CoreNLP::NLAttributedToken>::push_back[abi:ne180100](a1 + 912, v60);
          CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::NLAttributedToken *)v60);
          v50 = (uint64_t **)(*(_QWORD *)(a1 + 920) - 88);
          v61 = 7;
          *(_QWORD *)&v60[0] = &v61;
          *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v50, &v61, (uint64_t)&std::piecewise_construct, (_DWORD **)v60)+ 10) = v42;
          v61 = 7;
          *(_QWORD *)&v60[0] = &v61;
          v51 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v40, &v61, (uint64_t)&std::piecewise_construct, (_DWORD **)v60)[6];
          v52 = (uint64_t **)(*(_QWORD *)(a1 + 920) - 88);
          v58 = 7;
          *(_QWORD *)&v60[0] = &v58;
          std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v52, &v58, (uint64_t)&std::piecewise_construct, (_DWORD **)v60)[6] = v51;
        }
        ++v38;
        v37 = (CoreNLP::NLAttributedToken **)v64;
        v53 = (CoreNLP::NLAttributedToken **)v65;
        if (v38 >= v65 - v64)
        {
          v35 = (uint64_t)v54;
          if (v64 != v65)
          {
            do
            {
              if (*v37)
              {
                CoreNLP::NLAttributedToken::~NLAttributedToken(*v37);
                MEMORY[0x19401E994]();
              }
              ++v37;
            }
            while (v37 != v53);
          }
          goto LABEL_74;
        }
      }
      v42 = 68;
      v43 = 95;
      goto LABEL_63;
    }
LABEL_74:
    CoreNLP::TaggingModelManager::checkInvalidCharInSimplifiedChineseNER(v35, (uint64_t *)(a1 + 912), *(_QWORD *)(a1 + 16), v36);
    if (v64)
    {
      v65 = v64;
      operator delete(v64);
    }
  }
  else
  {
LABEL_77:
    CoreNLP::TaggingModelManager::tagInstance(v5, a2, *(CFStringRef **)(a1 + 16), 0);
  }
}

