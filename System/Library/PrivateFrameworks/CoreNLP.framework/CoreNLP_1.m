void sub_191CC9490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;
  void *v22;

  v22 = *(void **)(v20 + 24);
  if (v22)
  {
    *(_QWORD *)(v20 + 32) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

void CoreNLP::CompositeTagger::updateWordAndSentenceBoundaries(CoreNLP::CompositeTagger *this)
{
  char *v2;
  char *i;
  uint64_t v4;
  char *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  CoreNLP::NLAttributedToken *v9;
  CoreNLP::NLAttributedToken *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  BOOL v18;
  _BOOL4 isPunctuationOrWhitespace;
  char v20;
  uint64_t v21;
  uint64_t v22;
  CoreNLP::NLAttributedToken *v23;
  CFRange v24;
  int v25;
  char v26;
  uint64_t j;
  char *v28;
  uint64_t v29;
  CoreNLP::NLAttributedToken *v30;
  CFIndex *v31;
  char *v32;
  int CurrentDominantScriptID;
  CoreNLP::NLAttributedToken *v34;
  char *v35;
  BOOL v36;
  char *v38;
  char *v39;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  int v47;
  int v49;
  char *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v56;
  uint64_t v57;
  CFRange v58;
  CFIndex v59;
  char *v60;
  CFIndex v61;
  _BOOL4 v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v71;
  char *v72;
  int v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t **v76;
  uint64_t **v77;
  uint64_t v78;
  _BOOL4 v80;
  _BOOL4 v81;
  CFIndex *v82;
  UniChar *v85;
  _BOOL4 v86;
  BOOL v87;
  BOOL v88;
  int v89;
  int v90;
  CFIndex v92;
  uint64_t v93;
  CoreNLP::NLAttributedToken *v94;
  CFIndex v95;
  CoreNLP::NLAttributedToken *v96;
  CFIndex v97;
  uint64_t v98;
  CoreNLP::NLAttributedToken *v99;
  _BOOL4 v100;
  char *v101;
  CFIndex *v102;
  UniChar v103;
  UniChar *v104;
  UniChar buffer[4];
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  CFRange v109;

  v108 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 872;
  i = (char *)*((_QWORD *)this + 110);
  if (i != (char *)this + 872)
  {
    do
    {
      *(_QWORD *)buffer = 0;
      v106 = 0;
      v107 = 0;
      if (i[88] < 0
        && CoreNLP::splitOnApostrophe(*(const __CFString **)(*((_QWORD *)this + 2) + 8), (CFRange *)i + 1, (uint64_t)buffer) >= 2)
      {
        v4 = *(_QWORD *)i;
        v5 = (char *)*((_QWORD *)i + 1);
        *(_QWORD *)(v4 + 8) = v5;
        **((_QWORD **)i + 1) = v4;
        --*((_QWORD *)this + 111);
        CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::NLAttributedToken *)(i + 16));
        operator delete(i);
        v6 = ((int)v106 - *(_DWORD *)buffer) / 112;
        v7 = v6 + 1;
        v8 = 112 * v6 - 112;
        for (i = v5;
              (int)--v7 > 0;
              CoreNLP::extractTokenExtendedAttributes(*(_QWORD *)(*((_QWORD *)this + 2) + 8), (const __CFString *)(i + 16), v9))
        {
          i = (char *)std::list<CoreNLP::NLAttributedToken>::insert((uint64_t)v2, (uint64_t *)i, (__int128 *)(*(_QWORD *)buffer + v8));
          v8 -= 112;
        }
        if (v106 != *(_QWORD *)buffer)
        {
          v11 = (v106 - *(_QWORD *)buffer) / 112;
          if (v11 <= 1)
            v11 = 1;
          do
          {
            i = (char *)*((_QWORD *)i + 1);
            --v11;
          }
          while (v11);
        }
      }
      else
      {
        i = (char *)*((_QWORD *)i + 1);
      }
      v104 = buffer;
      std::vector<CoreNLP::NLAttributedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
    }
    while (i != v2);
    v12 = (char *)*((_QWORD *)this + 110);
    if (v12 != v2)
    {
      do
      {
        if (*((_QWORD *)v12 + 3) == 1)
        {
          v13 = *((_QWORD *)v12 + 11);
          v14 = (v13 >> 9) & 1;
          v15 = (v13 >> 7) & 1;
        }
        else
        {
          LODWORD(v14) = 0;
          LODWORD(v15) = 0;
        }
        v17 = *(_QWORD *)v12;
        v16 = (char *)*((_QWORD *)v12 + 1);
        if ((v14 & 1) != 0 || (_DWORD)v15)
        {
          v18 = v12 == *((char **)this + 110) || v16 == v2;
          if (!v18 && !CoreNLP::isPunctuationOrWhitespace((CoreNLP *)(v17 + 16), v10))
          {
            isPunctuationOrWhitespace = CoreNLP::isPunctuationOrWhitespace((CoreNLP *)(v16 + 16), v10);
            v20 = isPunctuationOrWhitespace;
            if (((isPunctuationOrWhitespace | v14 ^ 1) & 1) != 0)
            {
              if (!isPunctuationOrWhitespace)
              {
LABEL_28:
                *(_QWORD *)(v17 + 24) = *((_QWORD *)v16 + 3) + *((_QWORD *)v16 + 2) - *(_QWORD *)(v17 + 16);
                v21 = *(_QWORD *)v12;
                *(_QWORD *)(v21 + 8) = *((_QWORD *)v12 + 1);
                **((_QWORD **)v12 + 1) = v21;
                --*((_QWORD *)this + 111);
                CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::NLAttributedToken *)(v12 + 16));
                operator delete(v12);
                v22 = *(_QWORD *)v16;
                *(_QWORD *)(v22 + 8) = *((_QWORD *)v16 + 1);
                **((_QWORD **)v16 + 1) = v22;
                --*((_QWORD *)this + 111);
                CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::NLAttributedToken *)(v16 + 16));
                operator delete(v16);
                CoreNLP::extractTokenExtendedAttributes(*(_QWORD *)(*((_QWORD *)this + 2) + 8), (const __CFString *)(v17 + 16), v23);
                v12 = (char *)v17;
              }
            }
            else
            {
              if (*(uint64_t *)(v17 + 24) >= 4)
                v24.length = 4;
              else
                v24.length = *(_QWORD *)(v17 + 24);
              v24.location = *(_QWORD *)(v17 + 16);
              CFStringGetCharacters(*(CFStringRef *)(*((_QWORD *)this + 2) + 8), v24, buffer);
              switch(*(_QWORD *)(v17 + 24))
              {
                case 1:
                  if (buffer[0] == 97 || buffer[0] == 116)
                    goto LABEL_28;
                  break;
                case 2:
                  v25 = buffer[1];
                  if (buffer[0] == 99 && buffer[1] == 111)
                    goto LABEL_28;
                  if (buffer[0] == 117)
                    goto LABEL_47;
                  break;
                case 3:
                  v25 = buffer[2];
                  if (buffer[0] == 109 && buffer[1] == 97 && buffer[2] == 108)
                    goto LABEL_28;
                  if (buffer[0] == 110 && buffer[1] == 111)
                  {
LABEL_47:
                    if (v25 == 110)
                      goto LABEL_28;
                  }
                  break;
                case 4:
                  if (buffer[0] == 97 && buffer[1] == 110 && buffer[2] == 116)
                  {
                    v26 = buffer[3] == 105 ? v20 : 1;
                    if ((v26 & 1) == 0)
                      goto LABEL_28;
                  }
                  break;
                default:
                  break;
              }
            }
          }
        }
        v12 = (char *)*((_QWORD *)v12 + 1);
      }
      while (v12 != v2);
      for (j = *((_QWORD *)this + 110); (char *)j != v2; j = *(_QWORD *)(j + 8))
      {
        if (CoreNLP::isTerminator((CoreNLP *)(j + 16), v10))
        {
          while (1)
          {
            v28 = *(char **)(j + 8);
            if (v28 == v2 || !CoreNLP::isTerminator((CoreNLP *)(v28 + 16), v10))
              break;
            *(_QWORD *)(j + 24) = *((_QWORD *)v28 + 3) + *((_QWORD *)v28 + 2) - *(_QWORD *)(j + 16);
            v29 = *(_QWORD *)v28;
            *(_QWORD *)(v29 + 8) = *((_QWORD *)v28 + 1);
            **((_QWORD **)v28 + 1) = v29;
            --*((_QWORD *)this + 111);
            CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::NLAttributedToken *)(v28 + 16));
            operator delete(v28);
            *(_QWORD *)(j + 88) = 0;
            *(_QWORD *)(j + 32) = 0;
            CoreNLP::extractTokenExtendedAttributes(*(_QWORD *)(*((_QWORD *)this + 2) + 8), (const __CFString *)(j + 16), v30);
          }
        }
      }
    }
  }
  v31 = (CFIndex *)*((_QWORD *)this + 110);
  v32 = (char *)*((_QWORD *)this + 107);
  CurrentDominantScriptID = CoreNLP::TaggerContext::getCurrentDominantScriptID(*((CoreNLP::TaggerContext **)this + 2));
  v35 = (char *)this + 848;
  if (CurrentDominantScriptID)
    v36 = CurrentDominantScriptID == 5;
  else
    v36 = 1;
  if (!v36 && v31 != (CFIndex *)v2)
  {
    while (1)
    {
      if (v31[3] != 1)
        goto LABEL_201;
      if ((*((_BYTE *)v31 + 91) & 2) == 0)
        goto LABEL_201;
      v109.location = v31[2];
      v109.length = 1;
      CFStringGetCharacters(*(CFStringRef *)(*((_QWORD *)this + 2) + 8), v109, &v103);
      if (v103 != 46)
        goto LABEL_201;
      if (v32 == v35)
        goto LABEL_71;
      while (1)
      {
        v59 = *((_QWORD *)v32 + 3) + *((_QWORD *)v32 + 2);
        if (v59 >= v31[3] + v31[2])
          break;
        v32 = (char *)*((_QWORD *)v32 + 1);
        if (v32 == v35)
          goto LABEL_71;
      }
      if (v32 == v35)
        goto LABEL_71;
      v60 = (char *)v31[1];
      v61 = v31[3] + v31[2];
      v62 = v59 == v61;
      if (v60 != v2)
      {
        while (1)
        {
          v63 = (uint64_t *)(v60 + 16);
          if (!CoreNLP::isWhitespaceOrNewline((CoreNLP *)(v60 + 16), v34))
            break;
          v60 = (char *)*((_QWORD *)v60 + 1);
          if (v60 == v2)
          {
            v62 = 1;
            goto LABEL_141;
          }
        }
        v64 = *v63;
        v65 = *((_QWORD *)v32 + 2);
        if (*v63 == -1 || v65 == -1)
        {
          v67 = 0;
        }
        else
        {
          v46 = v64 < v65;
          v68 = *((_QWORD *)v60 + 3) + v64;
          v69 = *((_QWORD *)v32 + 3) + v65;
          v67 = !v46 && v68 <= v69;
        }
        v71 = v67 ^ 1;
        if (v59 == v61)
          v62 = 1;
        else
          v62 = v71;
      }
LABEL_141:
      v72 = (char *)v31[1];
      v101 = v72;
      v102 = (CFIndex *)*v31;
      v73 = !v62;
      if (v72 != v2)
      {
        v100 = v62;
        v75 = *((_QWORD *)v72 + 11);
        v74 = v72 + 88;
        v76 = (uint64_t **)(v74 - 6);
        LODWORD(v104) = 1;
        *(_QWORD *)buffer = &v104;
        v77 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)v74 - 6, (int *)&v104, (uint64_t)&std::piecewise_construct, (_DWORD **)buffer);
        v78 = *v74 & 0x800000 | v75 & 0x1000000;
        v80 = *((_DWORD *)v77 + 10) != 6 && v78 == 0;
        LODWORD(v104) = 1;
        *(_QWORD *)buffer = &v104;
        v81 = *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v76, (int *)&v104, (uint64_t)&std::piecewise_construct, (_DWORD **)buffer)+ 10) != 5&& v80;
        v73 &= v81;
        v72 = v101;
        v62 = v100;
      }
      v82 = (CFIndex *)*((_QWORD *)this + 110);
      if (v31 == v82)
        v62 = 0;
      if (v62)
        break;
      v86 = v73;
LABEL_189:
      if (v72 == v2
        || v31 == v82
        || CoreNLP::isPunctuationOrWhitespace((CoreNLP *)(v102 + 2), v34)
        || CoreNLP::isPunctuationOrWhitespace((CoreNLP *)(v101 + 16), v34))
      {
        if (v31 == *((CFIndex **)this + 110) || CoreNLP::isPunctuationOrWhitespace((CoreNLP *)(v102 + 2), v34) || !v86)
        {
          if (v101 != v2 && !CoreNLP::isPunctuationOrWhitespace((CoreNLP *)(v101 + 16), v34))
          {
            v92 = *((_QWORD *)v101 + 3) + *((_QWORD *)v101 + 2) - v31[2];
            v31[11] = 0;
            v31[3] = v92;
            v31[4] = 0;
            v93 = *(_QWORD *)v101;
            *(_QWORD *)(v93 + 8) = *((_QWORD *)v101 + 1);
            **((_QWORD **)v101 + 1) = v93;
            --*((_QWORD *)this + 111);
            CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::NLAttributedToken *)(v101 + 16));
            operator delete(v101);
            CoreNLP::extractTokenExtendedAttributes(*(_QWORD *)(*((_QWORD *)this + 2) + 8), (const __CFString *)(v31 + 2), v94);
          }
          goto LABEL_201;
        }
        v102[3] = v31[3] + v31[2] - v102[2];
        v95 = *v31;
        *(_QWORD *)(v95 + 8) = v31[1];
        *(_QWORD *)v31[1] = v95;
        --*((_QWORD *)this + 111);
        CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::NLAttributedToken *)(v31 + 2));
        operator delete(v31);
        v102[11] = 0;
        v102[4] = 0;
        CoreNLP::extractTokenExtendedAttributes(*(_QWORD *)(*((_QWORD *)this + 2) + 8), (const __CFString *)(v102 + 2), v96);
        v102[11] |= 0x40000000uLL;
      }
      else
      {
        v102[3] = *((_QWORD *)v101 + 3) + *((_QWORD *)v101 + 2) - v102[2];
        v97 = *v31;
        *(_QWORD *)(v97 + 8) = v31[1];
        *(_QWORD *)v31[1] = v97;
        --*((_QWORD *)this + 111);
        CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::NLAttributedToken *)(v31 + 2));
        operator delete(v31);
        v98 = *(_QWORD *)v101;
        *(_QWORD *)(v98 + 8) = *((_QWORD *)v101 + 1);
        **((_QWORD **)v101 + 1) = v98;
        --*((_QWORD *)this + 111);
        CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::NLAttributedToken *)(v101 + 16));
        operator delete(v101);
        v102[11] = 0;
        v102[4] = 0;
        CoreNLP::extractTokenExtendedAttributes(*(_QWORD *)(*((_QWORD *)this + 2) + 8), (const __CFString *)(v102 + 2), v99);
      }
      v31 = v102;
LABEL_201:
      v31 = (CFIndex *)v31[1];
      if (v31 == (CFIndex *)v2)
        goto LABEL_71;
    }
    if (*((char **)v32 + 1) == v35)
    {
LABEL_185:
      if (v72 != v2 && (v72[90] & 0x40) != 0)
        v73 = 1;
      v86 = v73 != 0;
      v82 = (CFIndex *)*((_QWORD *)this + 110);
      goto LABEL_189;
    }
    v58.location = v102[3];
    CoreNLP::getUTF8StringFromCFStringInRange(*(CFStringRef *)(*((_QWORD *)this + 2) + 8), (const __CFString *)v102[2], v58, (uint64_t)buffer);
    if (SHIBYTE(v107) < 0)
    {
      v72 = v101;
      if (v106 != 3)
        goto LABEL_181;
      v85 = *(UniChar **)buffer;
      v87 = **(_WORD **)buffer == 28487 && *(_BYTE *)(*(_QWORD *)buffer + 2) == 118;
      if (v87 || (**(_WORD **)buffer == 25927 ? (v88 = *(_BYTE *)(*(_QWORD *)buffer + 2) == 110) : (v88 = 0), v88))
      {
LABEL_182:
        v73 = 1;
LABEL_183:
        if (SHIBYTE(v107) < 0)
          operator delete(*(void **)buffer);
        goto LABEL_185;
      }
    }
    else
    {
      v72 = v101;
      if (SHIBYTE(v107) != 3)
        goto LABEL_181;
      if (buffer[0] == 28487 && LOBYTE(buffer[1]) == 118)
        goto LABEL_182;
      if (buffer[0] == 25927 && LOBYTE(buffer[1]) == 110)
        goto LABEL_182;
      v85 = buffer;
    }
    v89 = *v85;
    v90 = *((unsigned __int8 *)v85 + 2);
    if (v89 != 25423 || v90 != 116)
    {
LABEL_181:
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(buffer, "z"))
        goto LABEL_183;
      goto LABEL_182;
    }
    goto LABEL_182;
  }
LABEL_71:
  v38 = (char *)*((_QWORD *)this + 107);
  v39 = (char *)*((_QWORD *)this + 110);
  if (v39 != v2 && v38 != v35)
  {
    v41 = v2;
    while (1)
    {
      v42 = *((_QWORD *)v39 + 2);
      v43 = *((_QWORD *)v39 + 3) + v42;
      v44 = *((_QWORD *)v38 + 2);
      v45 = *((_QWORD *)v38 + 3) + v44;
      v46 = v42 >= v44 && v43 <= v45;
      v47 = v46;
      if (v42 == -1 || v44 == -1)
        v49 = 0;
      else
        v49 = v47;
      v50 = v39;
      if ((v39[91] & 0x40) == 0)
      {
        if (CoreNLP::isWhitespaceOrNewline((CoreNLP *)(v39 + 16), v34))
          v50 = v41;
        else
          v50 = v2;
      }
      if (v43 == v45)
      {
        if (v50 == v2)
        {
          if ((v49 & 1) == 0)
            goto LABEL_109;
        }
        else
        {
          v51 = 0;
          v52 = *((_QWORD *)v50 + 2);
          if (v52 != -1)
          {
            v53 = *((_QWORD *)v38 + 2);
            if (v53 != -1)
            {
              v46 = v52 < v53;
              v54 = *((_QWORD *)v50 + 3) + v52;
              v51 = !v46 && v54 <= *((_QWORD *)v38 + 3) + v53;
            }
          }
          if (((v51 | v49 ^ 1) & 1) != 0)
          {
LABEL_109:
            v56 = (char *)*((_QWORD *)v38 + 1);
            if (v56 == v35)
              return;
            *((_QWORD *)v38 + 3) = *((_QWORD *)v56 + 3) + *((_QWORD *)v56 + 2) - *((_QWORD *)v38 + 2);
            v57 = *(_QWORD *)v56;
            *(_QWORD *)(v57 + 8) = *((_QWORD *)v56 + 1);
            **((_QWORD **)v56 + 1) = v57;
            --*((_QWORD *)this + 108);
            CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::NLAttributedToken *)(v56 + 16));
            operator delete(v56);
            goto LABEL_111;
          }
        }
        v38 = (char *)*((_QWORD *)v38 + 1);
      }
      else if ((v49 & 1) == 0)
      {
        goto LABEL_109;
      }
      v39 = (char *)*((_QWORD *)v39 + 1);
LABEL_111:
      if (v39 != v2)
      {
        v41 = v50;
        if (v38 != v35)
          continue;
      }
      return;
    }
  }
}

void sub_191CCA0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, char a15)
{
  a13 = (void **)&a15;
  std::vector<CoreNLP::NLAttributedToken>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void CoreNLP::CompositeTagger::updateChineseWordBoundaries(CoreNLP::CompositeTagger *this)
{
  uint64_t **v1;
  uint64_t **v2;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  char *v12;
  int64_t v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t **v22;
  BOOL v23;
  uint64_t *v24;
  int v25;
  uint64_t **v26;
  uint64_t *v27;
  _QWORD v28[3];
  _QWORD v29[3];
  __int128 v30[7];
  int v31;

  v1 = (uint64_t **)*((_QWORD *)this + 114);
  v2 = (uint64_t **)*((_QWORD *)this + 115);
  if (v1 != v2)
  {
    v4 = (uint64_t **)((char *)this + 872);
    v5 = (uint64_t **)*((_QWORD *)this + 110);
    do
    {
      v6 = *v1;
      v27 = v1[1];
      v31 = 7;
      *(_QWORD *)&v30[0] = &v31;
      v7 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v1 + 3, &v31, (uint64_t)&std::piecewise_construct, (_DWORD **)v30);
      if (v5 == v4)
        break;
      v8 = (uint64_t)v6 + (_QWORD)v27;
      v9 = *((_DWORD *)v7 + 10);
      while (1)
      {
        v10 = v5[2];
        if ((uint64_t)v6 >= (uint64_t)v10)
        {
          v11 = v5[3];
          v12 = (char *)v10 + (_QWORD)v11;
          v13 = (char *)v10 + (_QWORD)v11 - (char *)v6;
          if ((uint64_t)((char *)v10 + (unint64_t)v11) > (uint64_t)v6)
            break;
        }
        v5 = (uint64_t **)v5[1];
        if (v5 == v4)
          return;
      }
      v14 = __OFSUB__(v6, v10);
      v15 = (char *)v6 - (char *)v10;
      if (!((v15 < 0) ^ v14 | (v15 == 0)))
      {
        v16 = *((_DWORD *)v7 + 10);
        v5[3] = (uint64_t *)v15;
        v17 = v5[1];
        v29[0] = v6;
        v29[1] = v13;
        v29[2] = 0;
        CoreNLP::NLAttributedToken::NLAttributedToken((uint64_t)v30, (uint64_t)v29);
        v5 = (uint64_t **)std::list<CoreNLP::NLAttributedToken>::insert((uint64_t)v4, v17, v30);
        CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::NLAttributedToken *)v30);
        v11 = v5[3];
        v12 = (char *)v5[2] + (_QWORD)v11;
        v9 = v16;
      }
      if (v8 > (uint64_t)v12)
      {
        v25 = v9;
        v26 = v2;
        v18 = (uint64_t **)v5[1];
        if (v18 != v4)
        {
          do
          {
            v19 = v18[3];
            v11 = (uint64_t *)((char *)v11 + (_QWORD)v19);
            v20 = (uint64_t)v19 + (_QWORD)v18[2];
            v21 = *v18;
            v22 = (uint64_t **)v18[1];
            v21[1] = (uint64_t)v22;
            *v18[1] = (uint64_t)v21;
            --*((_QWORD *)this + 111);
            CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::NLAttributedToken *)(v18 + 2));
            operator delete(v18);
            v23 = v8 <= v20 || v22 == v4;
            v18 = v22;
          }
          while (!v23);
        }
        if (v11 != v5[3])
          v5[3] = v11;
        v2 = v26;
        v9 = v25;
      }
      if (v6 == v5[2])
      {
        if (v27 == v11)
        {
          v31 = 7;
          *(_QWORD *)&v30[0] = &v31;
          *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v5 + 5, &v31, (uint64_t)&std::piecewise_construct, (_DWORD **)v30)+ 10) = v9;
          v5 = (uint64_t **)v5[1];
        }
        else if ((uint64_t)v27 < (uint64_t)v11)
        {
          v5[2] = v6;
          v5[3] = v27;
          v31 = 7;
          *(_QWORD *)&v30[0] = &v31;
          *((_DWORD *)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v5 + 5, &v31, (uint64_t)&std::piecewise_construct, (_DWORD **)v30)+ 10) = v9;
          v24 = v5[1];
          v28[0] = (char *)v6 + (_QWORD)v27;
          v28[1] = (char *)v11 - (char *)v27;
          v28[2] = 0;
          CoreNLP::NLAttributedToken::NLAttributedToken((uint64_t)v30, (uint64_t)v28);
          v5 = (uint64_t **)std::list<CoreNLP::NLAttributedToken>::insert((uint64_t)v4, v24, v30);
          CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::NLAttributedToken *)v30);
        }
      }
      if (v5 == v4)
        break;
      v1 += 14;
    }
    while (v1 != v2);
  }
}

void sub_191CCA3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::NLAttributedToken *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::list<CoreNLP::NLAttributedToken>::insert(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  _QWORD *v6;
  uint64_t v7;

  v6 = operator new(0x80uLL);
  *v6 = 0;
  v6[1] = 0;
  CoreNLP::NLAttributedToken::NLAttributedToken((uint64_t)(v6 + 2), a3);
  v7 = *a2;
  *(_QWORD *)(v7 + 8) = v6;
  *v6 = v7;
  *a2 = (uint64_t)v6;
  v6[1] = a2;
  ++*(_QWORD *)(a1 + 16);
  return v6;
}

CFIndex CoreNLP::CompositeTagger::setGazetteers(CoreNLP::CompositeTagger *this, const __CFArray *a2, const __CFString *cf1)
{
  int v6;

  if (CFEqual(cf1, kNLTagSchemeNamedEntityOrLexicalClass[0]))
  {
    v6 = 212;
  }
  else if (CFEqual(cf1, kNLTagSchemeLemma[0]))
  {
    v6 = 211;
  }
  else
  {
    v6 = CoreNLP::CompositeTagger::schemeType(this, cf1) + 201;
  }
  return CoreNLP::TaggingModelManager::setCustomGazetteers((uint64_t)this + 24, a2, v6);
}

void std::__list_imp<CoreNLP::NLAttributedToken>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::NLAttributedToken *)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::vector<CoreNLP::NLAttributedToken>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::NLAttributedToken *)(v4 - 112));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

CoreNLP::SmartTokenizer *std::unique_ptr<CoreNLP::SmartTokenizer>::reset[abi:ne180100](CoreNLP::SmartTokenizer **a1, CoreNLP::SmartTokenizer *a2)
{
  CoreNLP::SmartTokenizer *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CoreNLP::SmartTokenizer::~SmartTokenizer(result);
    JUMPOUT(0x19401E994);
  }
  return result;
}

void nlp::CFScopedPtr<__CFNumber const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

_QWORD *std::__list_imp<CoreNLP::NLAttributedToken>::__create_node[abi:ne180100]<NLToken &>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  _QWORD *v7;
  __int128 v9;
  uint64_t v10;

  v7 = operator new(0x80uLL);
  *v7 = a2;
  v7[1] = a3;
  v9 = *a4;
  v10 = *((_QWORD *)a4 + 2);
  CoreNLP::NLAttributedToken::NLAttributedToken((uint64_t)(v7 + 2), (uint64_t)&v9);
  return v7;
}

void sub_191CCA664(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t getMLCTensorDataClass(void)
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__132;
  v7 = __Block_byref_object_dispose__133;
  v0 = getMLCTensorDataClass(void)::softClass;
  v8 = getMLCTensorDataClass(void)::softClass;
  if (!getMLCTensorDataClass(void)::softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = ___ZL21getMLCTensorDataClassv_block_invoke;
    v2[3] = &unk_1E2DF4DD0;
    v2[4] = &v3;
    ___ZL21getMLCTensorDataClassv_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_191CCA864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191CCAAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getMLCActivationDescriptorClass(void)
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__132;
  v7 = __Block_byref_object_dispose__133;
  v0 = getMLCActivationDescriptorClass(void)::softClass;
  v8 = getMLCActivationDescriptorClass(void)::softClass;
  if (!getMLCActivationDescriptorClass(void)::softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = ___ZL31getMLCActivationDescriptorClassv_block_invoke;
    v2[3] = &unk_1E2DF4DD0;
    v2[4] = &v3;
    ___ZL31getMLCActivationDescriptorClassv_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_191CCABB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getMLCTensorClass(void)
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__132;
  v7 = __Block_byref_object_dispose__133;
  v0 = getMLCTensorClass(void)::softClass;
  v8 = getMLCTensorClass(void)::softClass;
  if (!getMLCTensorClass(void)::softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = ___ZL17getMLCTensorClassv_block_invoke;
    v2[3] = &unk_1E2DF4DD0;
    v2[4] = &v3;
    ___ZL17getMLCTensorClassv_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_191CCADE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getMLCTensorDescriptorClass(void)
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__132;
  v7 = __Block_byref_object_dispose__133;
  v0 = getMLCTensorDescriptorClass(void)::softClass;
  v8 = getMLCTensorDescriptorClass(void)::softClass;
  if (!getMLCTensorDescriptorClass(void)::softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = ___ZL27getMLCTensorDescriptorClassv_block_invoke;
    v2[3] = &unk_1E2DF4DD0;
    v2[4] = &v3;
    ___ZL27getMLCTensorDescriptorClassv_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_191CCB0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getMLCConvolutionDescriptorClass(void)
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__132;
  v7 = __Block_byref_object_dispose__133;
  v0 = getMLCConvolutionDescriptorClass(void)::softClass;
  v8 = getMLCConvolutionDescriptorClass(void)::softClass;
  if (!getMLCConvolutionDescriptorClass(void)::softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = ___ZL32getMLCConvolutionDescriptorClassv_block_invoke;
    v2[3] = &unk_1E2DF4DD0;
    v2[4] = &v3;
    ___ZL32getMLCConvolutionDescriptorClassv_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_191CCB168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getMLCConvolutionLayerClass(void)
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__132;
  v7 = __Block_byref_object_dispose__133;
  v0 = getMLCConvolutionLayerClass(void)::softClass;
  v8 = getMLCConvolutionLayerClass(void)::softClass;
  if (!getMLCConvolutionLayerClass(void)::softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = ___ZL27getMLCConvolutionLayerClassv_block_invoke;
    v2[3] = &unk_1E2DF4DD0;
    v2[4] = &v3;
    ___ZL27getMLCConvolutionLayerClassv_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_191CCB22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191CCB5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<std::vector<int>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::vector<int>>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<std::vector<int>>>::~__split_buffer(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_191CCB71C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<int>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void sub_191CCBA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191CCBE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191CCC2B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void sub_191CCC5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char *a19, char *a20,uint64_t a21,char a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  if (a19)
  {
    a20 = a19;
    operator delete(a19);
  }
  a19 = &a22;
  std::vector<std::vector<std::vector<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<int>>::assign(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  char *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;

  v6 = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= a2)
  {
    v13 = (a1[1] - (uint64_t)v6) / 24;
    if (v13 >= a2)
      v14 = a2;
    else
      v14 = (a1[1] - (uint64_t)v6) / 24;
    for (; v14; --v14)
    {
      if (v6 != (char *)a3)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v6, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v6 += 24;
    }
    if (a2 <= v13)
    {
      v18 = a1[1];
      v19 = *a1 + 24 * a2;
      if (v18 != v19)
      {
        v20 = a1[1];
        do
        {
          v22 = *(void **)(v20 - 24);
          v20 -= 24;
          v21 = v22;
          if (v22)
          {
            *(_QWORD *)(v18 - 16) = v21;
            operator delete(v21);
          }
          v18 = v20;
        }
        while (v20 != v19);
      }
      a1[1] = v19;
    }
    else
    {
      v15 = (_QWORD *)a1[1];
      v16 = &v15[3 * (a2 - v13)];
      v17 = -24 * v13 + 24 * a2;
      do
      {
        *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v15, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
        v15 += 3;
        v17 -= 24;
      }
      while (v17);
      a1[1] = (uint64_t)v16;
    }
  }
  else
  {
    std::vector<std::vector<int>>::__vdeallocate(a1);
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
    if (v7 <= a2)
      v7 = a2;
    if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
      v8 = 0xAAAAAAAAAAAAAAALL;
    else
      v8 = v7;
    std::vector<std::string>::__vallocate[abi:ne180100](a1, v8);
    v9 = (_QWORD *)a1[1];
    v10 = 3 * a2;
    v11 = &v9[3 * a2];
    v12 = 8 * v10;
    do
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v9, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v9 += 3;
      v12 -= 24;
    }
    while (v12);
    a1[1] = (uint64_t)v11;
  }
}

void sub_191CCC844(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<int>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = a2 >= v5;
  v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<std::vector<int>>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    v8 = *a1 + 24 * a2;
    if (v4 != v8)
    {
      v9 = a1[1];
      do
      {
        v11 = *(void **)(v9 - 24);
        v9 -= 24;
        v10 = v11;
        if (v11)
        {
          *(_QWORD *)(v4 - 16) = v10;
          operator delete(v10);
        }
        v4 = v9;
      }
      while (v9 != v8);
    }
    a1[1] = v8;
  }
}

void sub_191CCCD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  uint64_t v5;
  va_list va;
  char *v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, char *);
  v8 = va_arg(va1, _QWORD);
  std::__tree<std::string>::destroy((uint64_t)va, v7);
  v4 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x308] + v4 + 55) < 0)
      operator delete(*(void **)((char *)&STACK[0x308] + v4 + 32));
    v4 -= 32;
    if (v4 == -64)
    {
      std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100]((CoreNLP::MontrealModel **)va1, 0);
      STACK[0x308] = (unint64_t)&STACK[0x2F0];
      std::vector<std::pair<std::string,MRLNeuralNetworkNodeParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x308]);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::vector<std::pair<std::string,MRLNeuralNetworkNodeParameter>>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD v18[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v11 = 0x2FD2FD2FD2FD2FD3 * ((uint64_t)(v7 - *a1) >> 3);
    if ((unint64_t)(v11 + 1) > 0x5A05A05A05A05ALL)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v12 = 0x2FD2FD2FD2FD2FD3 * ((uint64_t)(v5 - *a1) >> 3);
    v13 = 2 * v12;
    if (2 * v12 <= v11 + 1)
      v13 = v11 + 1;
    if (v12 >= 0x2D02D02D02D02DLL)
      v14 = 0x5A05A05A05A05ALL;
    else
      v14 = v13;
    v18[4] = v4;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,MRLNeuralNetworkNodeParameter>>>(v4, v14);
    else
      v15 = 0;
    v16 = &v15[728 * v11];
    v18[0] = v15;
    v18[1] = v16;
    v18[3] = &v15[728 * v14];
    v17 = *a2;
    *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    memcpy(v16 + 24, (char *)a2 + 24, 0x2C0uLL);
    v18[2] = v16 + 728;
    std::vector<std::pair<std::string,MRLNeuralNetworkNodeParameter>>::__swap_out_circular_buffer(a1, v18);
    v10 = a1[1];
    result = std::__split_buffer<std::pair<std::string,MRLNeuralNetworkNodeParameter>>::~__split_buffer((uint64_t)v18);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    result = (uint64_t)memcpy((void *)(v7 + 24), (char *)a2 + 24, 0x2C0uLL);
    v10 = v7 + 728;
    a1[1] = v7 + 728;
  }
  a1[1] = v10;
  return result;
}

void sub_191CCCF5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,MRLNeuralNetworkNodeParameter>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_191CCD690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  _Block_object_dispose(&a20, 8);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_191CCDFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191CCE2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_191CCEFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  uint64_t v58;

  if (a2)
  {
    _Block_object_dispose((const void *)(v58 - 224), 8);
    if (__p)
      operator delete(__p);
    *(_QWORD *)(v58 - 224) = &a35;
    std::vector<std::vector<std::vector<std::vector<std::vector<int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v58 - 224));
    if (a40)
    {
      a41 = (uint64_t)a40;
      operator delete(a40);
    }
    if (a43)
    {
      a44 = (uint64_t)a43;
      operator delete(a43);
    }
    if (a46)
    {
      a47 = (uint64_t)a46;
      operator delete(a46);
    }
    if (a49)
    {
      a50 = (uint64_t)a49;
      operator delete(a49);
    }
    if (a2 == 2)
    {
      objc_begin_catch(exception_object);
      (*(void (**)(uint64_t, uint64_t, char *))(a24 + 16))(a24, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Training Sequence Tagger model Failed.")), &a55);
      objc_end_catch();
      JUMPOUT(0x191CCEF64);
    }
    objc_begin_catch(exception_object);
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_191CCF2F4()
{
  objc_end_catch();
  JUMPOUT(0x191CCF004);
}

void sub_191CD02F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose(&STACK[0x240], 8);
  STACK[0x240] = (unint64_t)&STACK[0x260];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
  v3 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v3;
    operator delete(v3);
  }
  STACK[0x240] = (unint64_t)&STACK[0x290];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
  STACK[0x240] = (unint64_t)&STACK[0x2A8];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
  STACK[0x240] = v1 - 256;
  std::vector<std::vector<std::vector<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
  STACK[0x240] = v1 - 232;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void sub_191CD0798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191CD0B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191CD1244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,_QWORD *a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,_QWORD *a33,uint64_t a34,char a35,_QWORD *a36)
{
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&a27, a28);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&a32, a33);
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy((uint64_t)&a35, a36);
  _Unwind_Resume(a1);
}

void sub_191CD1A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,_QWORD *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;

  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&a35, a36);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy(v42 - 256, *(_QWORD **)(v42 - 248));
  std::__tree<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,std::map<long,__CFString const*>>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,std::map<long,__CFString const*>>>>::destroy(v42 - 232, *(_QWORD **)(v42 - 224));
  _Unwind_Resume(a1);
}

void sub_191CD1BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  _Block_object_dispose(&a18, 8);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__2(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_copy__132(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__133(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void ___ZL21getMLCTensorDataClassv_block_invoke(uint64_t a1)
{
  MLComputeLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = objc_getClass("MLCTensorData");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getMLCTensorDataClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    ___ZL21getMLCTensorDataClassv_block_invoke_cold_1();
    MLComputeLibrary();
  }
}

void MLComputeLibrary(void)
{
  void *v0;

  if (!MLComputeLibraryCore(char **)::frameworkLibrary)
    MLComputeLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  if (!MLComputeLibraryCore(char **)::frameworkLibrary)
  {
    v0 = (void *)abort_report_np();
    free(v0);
  }
}

Class ___ZL25getMLCLSTMDescriptorClassv_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  MLComputeLibrary();
  result = objc_getClass("MLCLSTMDescriptor");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getMLCLSTMDescriptorClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = ___ZL25getMLCLSTMDescriptorClassv_block_invoke_cold_1();
    return ___ZL31getMLCActivationDescriptorClassv_block_invoke(v3);
  }
  return result;
}

Class ___ZL31getMLCActivationDescriptorClassv_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  MLComputeLibrary();
  result = objc_getClass("MLCActivationDescriptor");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getMLCActivationDescriptorClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = ___ZL31getMLCActivationDescriptorClassv_block_invoke_cold_1();
    return (Class)___ZL20getMLCLSTMLayerClassv_block_invoke(v3);
  }
  return result;
}

Class ___ZL20getMLCLSTMLayerClassv_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  MLComputeLibrary();
  result = objc_getClass("MLCLSTMLayer");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getMLCLSTMLayerClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = ___ZL20getMLCLSTMLayerClassv_block_invoke_cold_1();
    return (Class)___ZL17getMLCTensorClassv_block_invoke(v3);
  }
  return result;
}

Class ___ZL17getMLCTensorClassv_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  MLComputeLibrary();
  result = objc_getClass("MLCTensor");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getMLCTensorClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = ___ZL17getMLCTensorClassv_block_invoke_cold_1();
    return (Class)___ZL27getMLCTensorDescriptorClassv_block_invoke(v3);
  }
  return result;
}

Class ___ZL27getMLCTensorDescriptorClassv_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  MLComputeLibrary();
  result = objc_getClass("MLCTensorDescriptor");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getMLCTensorDescriptorClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = ___ZL27getMLCTensorDescriptorClassv_block_invoke_cold_1();
    return (Class)___ZL32getMLCConvolutionDescriptorClassv_block_invoke(v3);
  }
  return result;
}

Class ___ZL32getMLCConvolutionDescriptorClassv_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  MLComputeLibrary();
  result = objc_getClass("MLCConvolutionDescriptor");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getMLCConvolutionDescriptorClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = ___ZL32getMLCConvolutionDescriptorClassv_block_invoke_cold_1();
    return (Class)___ZL27getMLCConvolutionLayerClassv_block_invoke(v3);
  }
  return result;
}

Class ___ZL27getMLCConvolutionLayerClassv_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  MLComputeLibrary();
  result = objc_getClass("MLCConvolutionLayer");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getMLCConvolutionLayerClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = ___ZL27getMLCConvolutionLayerClassv_block_invoke_cold_1();
    return (Class)___ZL26getMLCArithmeticLayerClassv_block_invoke(v3);
  }
  return result;
}

Class ___ZL26getMLCArithmeticLayerClassv_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  MLComputeLibrary();
  result = objc_getClass("MLCArithmeticLayer");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getMLCArithmeticLayerClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = ___ZL26getMLCArithmeticLayerClassv_block_invoke_cold_1();
    return (Class)___ZL23getMLCDropoutLayerClassv_block_invoke(v3);
  }
  return result;
}

Class ___ZL23getMLCDropoutLayerClassv_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  MLComputeLibrary();
  result = objc_getClass("MLCDropoutLayer");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getMLCDropoutLayerClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = ___ZL23getMLCDropoutLayerClassv_block_invoke_cold_1();
    return (Class)___ZL25getMLCLossDescriptorClassv_block_invoke(v3);
  }
  return result;
}

Class ___ZL25getMLCLossDescriptorClassv_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  MLComputeLibrary();
  result = objc_getClass("MLCLossDescriptor");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getMLCLossDescriptorClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = ___ZL25getMLCLossDescriptorClassv_block_invoke_cold_1();
    return (Class)___ZL20getMLCLossLayerClassv_block_invoke(v3);
  }
  return result;
}

Class ___ZL20getMLCLossLayerClassv_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  MLComputeLibrary();
  result = objc_getClass("MLCLossLayer");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getMLCLossLayerClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = ___ZL20getMLCLossLayerClassv_block_invoke_cold_1();
    return (Class)___ZL30getMLCOptimizerDescriptorClassv_block_invoke(v3);
  }
  return result;
}

Class ___ZL30getMLCOptimizerDescriptorClassv_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  MLComputeLibrary();
  result = objc_getClass("MLCOptimizerDescriptor");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getMLCOptimizerDescriptorClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = ___ZL30getMLCOptimizerDescriptorClassv_block_invoke_cold_1();
    return (Class)___ZL24getMLCAdamOptimizerClassv_block_invoke(v3);
  }
  return result;
}

Class ___ZL24getMLCAdamOptimizerClassv_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  MLComputeLibrary();
  result = objc_getClass("MLCAdamOptimizer");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getMLCAdamOptimizerClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = ___ZL24getMLCAdamOptimizerClassv_block_invoke_cold_1();
    return (Class)___ZL24getMLCTrainingGraphClassv_block_invoke(v3);
  }
  return result;
}

Class ___ZL24getMLCTrainingGraphClassv_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  MLComputeLibrary();
  result = objc_getClass("MLCTrainingGraph");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getMLCTrainingGraphClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = ___ZL24getMLCTrainingGraphClassv_block_invoke_cold_1();
    return (Class)___ZL26getMLCTensorParameterClassv_block_invoke(v3);
  }
  return result;
}

Class ___ZL26getMLCTensorParameterClassv_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  MLComputeLibrary();
  result = objc_getClass("MLCTensorParameter");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getMLCTensorParameterClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = ___ZL26getMLCTensorParameterClassv_block_invoke_cold_1();
    return (Class)___ZL23getMLCSoftmaxLayerClassv_block_invoke(v3);
  }
  return result;
}

Class ___ZL23getMLCSoftmaxLayerClassv_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  MLComputeLibrary();
  result = objc_getClass("MLCSoftmaxLayer");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getMLCSoftmaxLayerClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = ___ZL23getMLCSoftmaxLayerClassv_block_invoke_cold_1();
    return (Class)___ZL25getMLCInferenceGraphClassv_block_invoke(v3);
  }
  return result;
}

Class ___ZL25getMLCInferenceGraphClassv_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  MLComputeLibrary();
  result = objc_getClass("MLCInferenceGraph");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getMLCInferenceGraphClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = ___ZL25getMLCInferenceGraphClassv_block_invoke_cold_1();
    return (Class)___ZL17getMLCDeviceClassv_block_invoke(v3);
  }
  return result;
}

Class ___ZL17getMLCDeviceClassv_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  MLComputeLibrary();
  result = objc_getClass("MLCDevice");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getMLCDeviceClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    v3 = ___ZL17getMLCDeviceClassv_block_invoke_cold_1();
    return (Class)___ZL16getMLCGraphClassv_block_invoke(v3);
  }
  return result;
}

Class ___ZL16getMLCGraphClassv_block_invoke(uint64_t a1)
{
  Class result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  MLComputeLibrary();
  result = objc_getClass("MLCGraph");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    getMLCGraphClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  }
  else
  {
    ___ZL16getMLCGraphClassv_block_invoke_cold_1();
    return (Class)std::vector<std::vector<int>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::vector<int>*>,std::__wrap_iter<std::vector<int>*>>(v3, v4, v5, v6);
  }
  return result;
}

_QWORD *std::vector<std::vector<int>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::vector<int>*>,std::__wrap_iter<std::vector<int>*>>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int>*,std::vector<int>*,std::vector<int>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_191CD25B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(uint64_t a1, char *__src, int *a3, int *a4, uint64_t a5)
{
  char *v5;
  int *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int *v20;
  char *v21;
  int *v22;
  float *v23;
  int v24;
  char *v25;
  char *v26;
  char *v27;
  int v28;
  float *v29;
  int v30;
  float *v31;
  uint64_t v32;
  float *v33;
  int v34;
  void *__p;
  float *v37;
  float *v38;
  char *v39;
  uint64_t v40;

  v5 = __src;
  if (a5 < 1)
    return v5;
  v7 = a3;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    v13 = *(_BYTE **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 2);
    if (v14 >> 62)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v15 = (__src - v13) >> 2;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v40 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v9, v17);
    else
      v18 = 0;
    v31 = (float *)&v18[4 * v15];
    __p = v18;
    v37 = v31;
    v39 = &v18[4 * v17];
    v32 = 4 * a5;
    v33 = &v31[a5];
    do
    {
      v34 = *v7++;
      *v31++ = (float)v34;
      v32 -= 4;
    }
    while (v32);
    v38 = v33;
    v5 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v38 != v37)
      v38 = (float *)((char *)v38 + (((char *)v37 - (char *)v38 + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = (uint64_t)(v12 - (_QWORD)__src) >> 2;
  if (v19 >= a5)
  {
    v20 = &a3[a5];
    v21 = *(char **)(v9 - 8);
LABEL_18:
    v25 = &__src[4 * a5];
    v26 = &v21[-4 * a5];
    v27 = v21;
    if ((unint64_t)v26 < v12)
    {
      v27 = v21;
      do
      {
        v28 = *(_DWORD *)v26;
        v26 += 4;
        *(_DWORD *)v27 = v28;
        v27 += 4;
      }
      while ((unint64_t)v26 < v12);
    }
    *(_QWORD *)(a1 + 8) = v27;
    if (v21 != v25)
      memmove(&v21[-4 * ((v21 - v25) >> 2)], __src, v21 - v25);
    if (v20 != v7)
    {
      v29 = (float *)v5;
      do
      {
        v30 = *v7++;
        *v29++ = (float)v30;
      }
      while (v7 != v20);
    }
    return v5;
  }
  v20 = &a3[v19];
  v21 = *(char **)(v9 - 8);
  if (v20 != a4)
  {
    v22 = v20;
    v23 = *(float **)(v9 - 8);
    do
    {
      v24 = *v22++;
      *v23++ = (float)v24;
      v21 += 4;
    }
    while (v22 != a4);
  }
  *(_QWORD *)(a1 + 8) = v21;
  if ((uint64_t)(v12 - (_QWORD)__src) >= 1)
    goto LABEL_18;
  return v5;
}

void sub_191CD27C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_191CD2844(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<int>>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;

  v8 = a1[2];
  result = a1 + 2;
  v7 = v8;
  v9 = (_QWORD *)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = &v9[3 * a2];
      v16 = 24 * a2;
      do
      {
        *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v9, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    v21 = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)result, v13);
    else
      v14 = 0;
    v17 = v14;
    v18 = &v14[24 * v10];
    v19 = v18;
    v20 = &v14[24 * v13];
    std::__split_buffer<std::vector<int>>::__construct_at_end(&v17, a2, a3);
    std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, &v17);
    return (_QWORD *)std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_191CD299C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__split_buffer<std::vector<int>>::__construct_at_end(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;

  v3 = result;
  v4 = (_QWORD *)result[2];
  if (a2)
  {
    v6 = &v4[3 * a2];
    v7 = 24 * a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v4 += 3;
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_191CD2A34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,MRLNeuralNetworkNodeParameter>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::string,MRLNeuralNetworkNodeParameter>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<std::string,MRLNeuralNetworkNodeParameter>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = v2 - 728;
    do
    {
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      v4 -= 728;
    }
    while (v4 + 728 != v3);
  }
  a1[1] = v3;
}

uint64_t std::vector<std::pair<std::string,MRLNeuralNetworkNodeParameter>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,MRLNeuralNetworkNodeParameter>>,std::reverse_iterator<std::pair<std::string,MRLNeuralNetworkNodeParameter>*>,std::reverse_iterator<std::pair<std::string,MRLNeuralNetworkNodeParameter>*>,std::reverse_iterator<std::pair<std::string,MRLNeuralNetworkNodeParameter>*>>((uint64_t)(a1 + 2), a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,MRLNeuralNetworkNodeParameter>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x5A05A05A05A05BLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(728 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,MRLNeuralNetworkNodeParameter>>,std::reverse_iterator<std::pair<std::string,MRLNeuralNetworkNodeParameter>*>,std::reverse_iterator<std::pair<std::string,MRLNeuralNetworkNodeParameter>*>,std::reverse_iterator<std::pair<std::string,MRLNeuralNetworkNodeParameter>*>>(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  BOOL v13;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __int128 v18;

  v7 = a7;
  *(_QWORD *)&v18 = a6;
  *((_QWORD *)&v18 + 1) = a7;
  v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  if (a3 != a5)
  {
    v10 = a7 - 728;
    v11 = (__int128 *)((char *)a3 - 728);
    do
    {
      v12 = *v11;
      *(_QWORD *)(v10 + 16) = *((_QWORD *)v11 + 2);
      *(_OWORD *)v10 = v12;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = 0;
      *(_QWORD *)v11 = 0;
      memcpy((void *)(v10 + 24), (char *)v11 + 24, 0x2C0uLL);
      v7 -= 728;
      v10 -= 728;
      v13 = v11 == a5;
      v11 = (__int128 *)((char *)v11 - 728);
    }
    while (!v13);
    *((_QWORD *)&v18 + 1) = v10 + 728;
  }
  v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,MRLNeuralNetworkNodeParameter>>,std::reverse_iterator<std::pair<std::string,MRLNeuralNetworkNodeParameter>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,MRLNeuralNetworkNodeParameter>>,std::reverse_iterator<std::pair<std::string,MRLNeuralNetworkNodeParameter>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,MRLNeuralNetworkNodeParameter>>,std::reverse_iterator<std::pair<std::string,MRLNeuralNetworkNodeParameter>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,MRLNeuralNetworkNodeParameter>>,std::reverse_iterator<std::pair<std::string,MRLNeuralNetworkNodeParameter>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 728;
  }
}

uint64_t std::__split_buffer<std::pair<std::string,MRLNeuralNetworkNodeParameter>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::pair<std::string,MRLNeuralNetworkNodeParameter>>::__destruct_at_end[abi:ne180100](a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::pair<std::string,MRLNeuralNetworkNodeParameter>>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 91;
      *(_QWORD *)(a1 + 16) = v2 - 91;
      if (*((char *)v2 - 705) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::map<std::string,float>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,float> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_191CD2DC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,float> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__construct_node<std::pair<std::string,float> &>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_191CD2F58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long>>,std::reverse_iterator<std::vector<long>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::vector<std::vector<MLCTensorData *>>::__push_back_slow_path<std::vector<MLCTensorData *> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<MLCTensorData *>::__init_with_size[abi:ne180100]<MLCTensorData **,MLCTensorData **>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<MLCTensorData *>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_191CD31B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<MLCTensorData *>::__init_with_size[abi:ne180100]<MLCTensorData **,MLCTensorData **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_191CD3224(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<MLCTensorData *>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<MLCTensorData *>>,std::reverse_iterator<std::vector<MLCTensorData *>*>,std::reverse_iterator<std::vector<MLCTensorData *>*>,std::reverse_iterator<std::vector<MLCTensorData *>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<MLCTensorData *>>,std::reverse_iterator<std::vector<MLCTensorData *>*>,std::reverse_iterator<std::vector<MLCTensorData *>*>,std::reverse_iterator<std::vector<MLCTensorData *>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MLCTensorData *>>,std::reverse_iterator<std::vector<MLCTensorData *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MLCTensorData *>>,std::reverse_iterator<std::vector<MLCTensorData *>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long>>,std::reverse_iterator<std::vector<long>*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::vector<void *>::__init_with_size[abi:ne180100]<void **,void **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_191CD33E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::pair<float,float>>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_191CD3464(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *std::map<int,int>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<int,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,int>,std::__tree_node<std::__value_type<int,int>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_191CD3578(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<int,int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,int>,std::__tree_node<std::__value_type<int,int>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_hint_unique_key_args<int,std::pair<int const,int> const&>(v5, v6, v4 + 7, (uint64_t *)(v4 + 7));
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_hint_unique_key_args<int,std::pair<int const,int> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__find_equal<int>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__find_equal<int>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 2u);
}

_BYTE *OUTLINED_FUNCTION_2_1(_BYTE *result, _BYTE *a2)
{
  *result = 0;
  *a2 = 0;
  return result;
}

void OUTLINED_FUNCTION_3_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 8u);
}

_QWORD *CoreNLP::_CFInit_ModelContainerWrapper(_QWORD *this, const void *a2)
{
  this[3] = 0;
  this[4] = 0;
  this[2] = &unk_1E2DF2B08;
  return this;
}

uint64_t CoreNLP::createModelContainerWrapper(uint64_t *a1)
{
  unsigned __int8 v2;
  uint64_t Instance;

  CFAllocatorGetDefault();
  if ((v2 & 1) == 0
  {
    qword_1EE21AD60 = 0;
    unk_1EE21AD70 = 0u;
    unk_1EE21AD80 = 0u;
    CoreNLP::_CFGetTypeID_ModelContainerWrapper(void)::typeID = _CFRuntimeRegisterClass();
  }
  Instance = _CFRuntimeCreateInstance();
  std::shared_ptr<CoreNLP::NLModelTrainer>::operator=[abi:ne180100]((_QWORD *)(Instance + 24), a1);
  return Instance;
}

void sub_191CD3934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreNLP::ModelContainerWrapper::~ModelContainerWrapper(CoreNLP::ModelContainerWrapper *this)
{
  *(_QWORD *)this = &unk_1E2DF2B08;
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
}

{
  *(_QWORD *)this = &unk_1E2DF2B08;
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
  JUMPOUT(0x19401E994);
}

uint64_t CoreNLP::WordEmbedding::fillWordVectors(CoreNLP::WordEmbedding *this, const __CFArray *a2, unsigned int a3, unsigned int a4, float *a5, const float *a6, const float *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  float *v27;
  float *v28;
  uint64_t v29;
  float *v30;
  float v31;
  unint64_t v32;
  char *v33;
  uint64_t v35;
  uint64_t v36;
  unint64_t v38;
  uint64_t v39;
  float *v40;
  int v42;

  v12 = (*(int (**)(CoreNLP::WordEmbedding *))(*(_QWORD *)this + 64))(this);
  bzero(a5, 4 * a4 * a3 * v12);
  if (a3)
  {
    v13 = 0;
    v14 = 0;
    v15 = a4;
    v16 = 4 * v12;
    v35 = 4 * v12 * v15;
    v36 = a3;
    v40 = a5;
    v38 = v15;
    do
    {
      v39 = v14;
      v17 = (void *)-[__CFArray objectAtIndexedSubscript:](a2, "objectAtIndexedSubscript:");
      v18 = v15;
      if (objc_msgSend(v17, "count") <= v15)
        v18 = objc_msgSend(v17, "count");
      if (v18)
      {
        v19 = 0;
        v20 = v40;
        do
        {
          v42 = 0;
          if (CoreNLP::WordEmbedding::getWordID(this, (const char *)objc_msgSend((id)objc_msgSend(v17, "objectAtIndexedSubscript:", v19), "UTF8String"), &v42))
          {
            v21 = *((unsigned int *)this + 672);
            if ((int)v21 >= 1)
            {
              v22 = 0;
              v23 = *((_QWORD *)this + 340) + v42 * (uint64_t)(int)v21;
              v24 = *((_QWORD *)this + 337);
              v25 = *((_DWORD *)this + 671);
              v26 = *((unsigned int *)this + 9);
              v27 = v20;
              do
              {
                if ((int)v26 >= 1)
                {
                  v28 = (float *)(v24 + 4 * v25 * (*(unsigned __int8 *)(v23 + v22) | ((_DWORD)v22 << 8)));
                  v29 = v26;
                  v30 = v27;
                  do
                  {
                    v31 = *v28++;
                    *v30 = v31 + *v30;
                    ++v30;
                    --v29;
                  }
                  while (v29);
                }
                ++v22;
                v27 += (int)v26;
              }
              while (v22 != v21);
            }
          }
          else
          {
            memcpy(&a5[(v19 + v39 * v38) * v12], a6, 4 * v12);
          }
          ++v19;
          v20 = (float *)((char *)v20 + v16);
        }
        while (v19 != v18);
      }
      v15 = v38;
      v32 = v38 - v18;
      if (v38 > v18)
      {
        v33 = (char *)a5 + v16 * (v18 + v13);
        do
        {
          memcpy(v33, a7, 4 * v12);
          v33 += v16;
          --v32;
        }
        while (v32);
      }
      v14 = v39 + 1;
      v40 = (float *)((char *)v40 + v35);
      v13 += v38;
    }
    while (v39 + 1 != v36);
  }
  return 1;
}

uint64_t CoreNLP::WordEmbedding::fillTokenVectors(CoreNLP::WordEmbedding *this, const __CFArray *a2, uint64_t a3, uint64_t a4, float *a5, const float *a6, const float *a7)
{
  void *v13;

  v13 = CoreNLP::AbstractEmbedding::tokenizeSentences(this, a2);
  (*(void (**)(CoreNLP::WordEmbedding *, void *, uint64_t, uint64_t, float *, const float *, const float *))(*(_QWORD *)this + 16))(this, v13, a3, a4, a5, a6, a7);
  return 1;
}

uint64_t CoreNLP::WordEmbedding::fillStringVector(CoreNLP::WordEmbedding *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t AverageEmbedding;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string **v10;
  char v11;
  std::string v12;
  __int128 v13;

  *(_QWORD *)&v13 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v12 = *(std::string *)a2;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = &v7;
  v11 = 0;
  v7 = (std::string *)operator new(0x18uLL);
  v8 = v7;
  v9 = v7 + 1;
  v8 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v9, (__int128 *)&v12, &v13, v7);
  AverageEmbedding = CoreNLP::WordEmbedding::getAverageEmbedding(a1, (uint64_t *)&v7, (uint64_t)a3);
  v10 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    if ((AverageEmbedding & 1) != 0)
      return AverageEmbedding;
    goto LABEL_6;
  }
  if ((AverageEmbedding & 1) == 0)
LABEL_6:
    a3[1] = *a3;
  return AverageEmbedding;
}

void sub_191CD3DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::WordEmbedding::version(CoreNLP::WordEmbedding *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t CoreNLP::WordEmbedding::dimension(CoreNLP::WordEmbedding *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t CoreNLP::WordEmbedding::modelLanguage(CoreNLP::WordEmbedding *this)
{
  return *((unsigned int *)this + 20);
}

void CoreNLP::NLModelTrainer::~NLModelTrainer(CoreNLP::NLModelTrainer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)this + 19, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 18, 0);
  nlp::CFScopedPtr<__CFArray const*>::reset((const void **)this + 17, 0);
  nlp::CFScopedPtr<__CFData const*>::reset((const void **)this + 16, 0);
  CoreNLP::TaggerContext::~TaggerContext((CoreNLP::NLModelTrainer *)((char *)this + 56));
  std::__list_imp<CoreNLP::NLAttributedToken>::clear((uint64_t *)this + 4);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

CoreNLP::NLModelTrainer *CoreNLP::NLModelTrainer::NLModelTrainer(CoreNLP::NLModelTrainer *this, const __CFData *a2)
{
  CoreNLP::TaggerContext *v4;
  CoreNLP::TaggingFeatureExtractor *v5;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v13;
  unsigned int v14;
  CFLocaleRef v15;
  const __CFArray *v16;
  CoreNLP::CompositeTagger *v17;
  uint64_t v18;
  char **v20;
  char *v21[2];

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = (char *)this + 32;
  *((_QWORD *)this + 5) = (char *)this + 32;
  *((_QWORD *)this + 6) = 0;
  v4 = (CoreNLP::NLModelTrainer *)((char *)this + 56);
  CoreNLP::TaggerContext::TaggerContext((CoreNLP::NLModelTrainer *)((char *)this + 56));
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 42) = 1;
  v5 = (CoreNLP::TaggingFeatureExtractor *)operator new();
  CoreNLP::TaggingFeatureExtractor::TaggingFeatureExtractor(v5);
  v6 = *(_QWORD *)this;
  *(_QWORD *)this = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (!a2)
  {
LABEL_9:
    v13 = *((_QWORD *)this + 1);
    v20 = 0;
    if (!v13)
      goto LABEL_14;
    goto LABEL_12;
  }
  v7 = CFRetain(a2);
  nlp::CFScopedPtr<__CFData const*>::reset((const void **)this + 16, v7);
  v8 = operator new();
  v21[0] = 0;
  v21[1] = 0;
  v20 = v21;
  CoreNLP::CRFModel::CRFModel(v8, &v20);
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  std::__tree<std::string>::destroy((uint64_t)&v20, v21[0]);
  v10 = *((_QWORD *)this + 1);
  BytePtr = CFDataGetBytePtr(*((CFDataRef *)this + 16));
  Length = CFDataGetLength(*((CFDataRef *)this + 16));
  (*(void (**)(uint64_t, const UInt8 *, CFIndex, _QWORD))(*(_QWORD *)v10 + 56))(v10, BytePtr, Length, 0);
  v13 = *((_QWORD *)this + 1);
  v14 = *(_DWORD *)(v13 + 12);
  if (v14 > 1)
  {
    if (!*((_QWORD *)this + 19))
    {
      v15 = CoreNLP::copyLocaleForLanguageID(v14);
      nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)this + 19, v15);
    }
    goto LABEL_9;
  }
  v20 = 0;
LABEL_12:
  if (*(_BYTE *)(v13 + 68))
  {
    v16 = CFArrayCreate(0, (const void **)kNLTagSchemeLexicalClass, 1, MEMORY[0x1E0C9B378]);
    v20 = (char **)v16;
    goto LABEL_15;
  }
LABEL_14:
  v16 = 0;
LABEL_15:
  v17 = (CoreNLP::CompositeTagger *)operator new();
  CoreNLP::CompositeTagger::CompositeTagger(v17, v4, v16, 0);
  v18 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v17;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (v16)
    CFRelease(v16);
  return this;
}

void sub_191CD4128(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  CoreNLP::TaggerContext *v3;
  const void **v4;
  const void **v5;
  const void **v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = v1[20];
  v1[20] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  nlp::CFScopedPtr<__CFLocale const*>::reset(v6, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset(v5, 0);
  nlp::CFScopedPtr<__CFArray const*>::reset(v4 + 1, 0);
  nlp::CFScopedPtr<__CFData const*>::reset(v4, 0);
  CoreNLP::TaggerContext::~TaggerContext(v3);
  std::__list_imp<CoreNLP::NLAttributedToken>::clear(v2);
  v9 = v1[2];
  v1[2] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = v1[1];
  v1[1] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *v1;
  *v1 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(a1);
}

CoreNLP::NLModelTrainer *CoreNLP::NLModelTrainer::NLModelTrainer(CoreNLP::NLModelTrainer *this, const __CFDictionary *a2)
{
  CoreNLP::TaggerContext *v4;
  _DWORD *v5;
  const __CFString *v6;
  const __CFNumber *Value;
  int v8;
  CFAllocatorRef *v9;
  const __CFString *v10;
  int v11;
  CFLocaleRef v12;
  const void *v13;
  CFTypeRef v14;
  const void *v15;
  CFTypeRef v16;
  const void *v17;
  CFTypeRef v18;
  CoreNLP::TaggingFeatureExtractor *v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  _OWORD *v23;
  _OWORD *v24;
  _OWORD *v25;
  _OWORD *v26;
  _OWORD *v27;
  _OWORD *v28;
  _OWORD *v29;
  _OWORD *v30;
  _OWORD *v31;
  const __CFNumber *v32;
  _OWORD *v33;
  void **v34;
  const __CFNumber *v35;
  _OWORD *v36;
  void **v37;
  const __CFNumber *v38;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v40;
  uint64_t *v41;
  CFNumberRef v42;
  CFNumberRef v43;
  const void *v44;
  const void *v45;
  CFTypeID v46;
  const void *v47;
  const void *v48;
  CFTypeID v49;
  const void *v50;
  const void *v51;
  CFTypeID v52;
  const __CFString *v53;
  const __CFString *v54;
  CFTypeID v55;
  const __CFArray *v56;
  CFIndex Count;
  CFIndex i;
  const __CFString *ValueAtIndex;
  char *CStringPtr;
  uint64_t v61;
  void **v62;
  CoreNLP::TaggerContext *v63;
  uint64_t v64;
  const __CFArray *v65;
  CoreNLP::CompositeTagger *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const __CFArray *v70;
  CoreNLP::CompositeTagger *v71;
  uint64_t v72;
  const void *v74;
  const void *v75;
  CFTypeID v76;
  std::runtime_error *v77;
  std::runtime_error *exception;
  std::runtime_error *v79;
  std::runtime_error *v80;
  std::runtime_error *v81;
  const void **v82;
  const void **v83;
  CoreNLP::TaggerContext *v84;
  void **v85;
  void *v86[2];
  char v87;
  std::string __p;
  char **v89;
  char *v90;
  uint64_t v91;
  const __CFString *v92;
  void **v93;
  int valuePtr[3];

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = (char *)this + 32;
  *((_QWORD *)this + 5) = (char *)this + 32;
  *((_QWORD *)this + 6) = 0;
  v4 = CoreNLP::TaggerContext::TaggerContext((CoreNLP::NLModelTrainer *)((char *)this + 56));
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  v82 = (const void **)((char *)this + 144);
  *((_DWORD *)this + 42) = 1;
  v5 = (_DWORD *)((char *)this + 168);
  *((_QWORD *)this + 20) = 0;
  v83 = (const void **)((char *)this + 136);
  v84 = v4;
  v6 = CFSTR("en");
  v92 = CFSTR("en");
  if (a2)
  {
    if (CFDictionaryContainsKey(a2, kNLModelTrainerModelMethodTypeKey))
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(a2, kNLModelTrainerModelMethodTypeKey);
      CFNumberGetValue(Value, kCFNumberCFIndexType, (char *)this + 168);
    }
    v8 = CFDictionaryContainsKey(a2, kNLModelTrainerLanguageKey);
    v9 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (v8)
    {
      v6 = (const __CFString *)CFDictionaryGetValue(a2, kNLModelTrainerLanguageKey);
      CFRelease(CFSTR("en"));
      v92 = v6;
      v11 = CoreNLP::languageIdForLanguage((uint64_t)v6, v10);
      v12 = CFLocaleCreate(*v9, v6);
      nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)this + 19, v12);
    }
    else
    {
      v11 = 0;
    }
    if (CFDictionaryContainsKey(a2, kNLModelTrainerModelMetadataKey))
    {
      v13 = CFDictionaryGetValue(a2, kNLModelTrainerModelMetadataKey);
      v14 = CFRetain(v13);
      nlp::CFScopedPtr<__CFDictionary const*>::reset(v82, v14);
    }
    if (CFDictionaryContainsKey(a2, kNLModelTrainerModelDataKey))
    {
      v15 = CFDictionaryGetValue(a2, kNLModelTrainerModelDataKey);
      v16 = CFRetain(v15);
      nlp::CFScopedPtr<__CFData const*>::reset((const void **)this + 16, v16);
    }
    if (CFDictionaryContainsKey(a2, kNLModelTrainerModelDataArrayKey))
    {
      v17 = CFDictionaryGetValue(a2, kNLModelTrainerModelDataArrayKey);
      v18 = CFRetain(v17);
      nlp::CFScopedPtr<__CFArray const*>::reset(v83, v18);
    }
    if (*v5 == 9)
    {
      Mutable = CFDictionaryCreateMutable(*v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v93, Mutable);
      v40 = (__CFDictionary *)v93;
      LODWORD(__p.__r_.__value_.__l.__data_) = 32;
      v41 = (uint64_t *)CFNumberCreate(0, kCFNumberIntType, &__p);
      v89 = (char **)v41;
      if (!v41)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      LODWORD(v86[0]) = 30;
      v42 = CFNumberCreate(0, kCFNumberIntType, v86);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      if (!v42)
      {
        v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v79, "Could not construct");
        __cxa_throw(v79, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      valuePtr[0] = 25;
      v43 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
      v86[0] = v43;
      if (!v43)
      {
        v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v80, "Could not construct");
        __cxa_throw(v80, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      CFDictionarySetValue(v40, CFSTR("batchSize"), v41);
      CFDictionarySetValue(v40, CFSTR("maxLength"), v42);
      CFDictionarySetValue(v40, kNLModelTrainerMaxIterationNumberKey, v43);
      if (CFDictionaryContainsKey(a2, kNLModelTrainerMaxIterationNumberKey))
      {
        v44 = CFDictionaryGetValue(a2, kNLModelTrainerMaxIterationNumberKey);
        v45 = v44;
        if (v44)
        {
          v46 = CFGetTypeID(v44);
          if (v46 == CFNumberGetTypeID())
            CFDictionarySetValue(v40, kNLModelTrainerMaxIterationNumberKey, v45);
        }
      }
      if (CFDictionaryContainsKey(a2, kNLModelTrainerModelDeviceTypeKey))
      {
        v47 = CFDictionaryGetValue(a2, kNLModelTrainerModelDeviceTypeKey);
        v48 = v47;
        if (v47)
        {
          v49 = CFGetTypeID(v47);
          if (v49 == CFNumberGetTypeID())
            CFDictionarySetValue(v40, kNLModelTrainerModelDeviceTypeKey, v48);
        }
      }
      CFDictionarySetValue(v40, kNLModelTrainerLanguageKey, v6);
      if (CFDictionaryContainsKey(a2, kNLModelTrainerLanguageKey))
      {
        v50 = CFDictionaryGetValue(a2, kNLModelTrainerLanguageKey);
        v51 = v50;
        if (v50)
        {
          v52 = CFGetTypeID(v50);
          if (v52 == CFStringGetTypeID())
            CFDictionarySetValue(v40, kNLModelTrainerLanguageKey, v51);
        }
      }
      CFDictionarySetValue(v40, kNLModelTrainerEmbeddingArchitectureKey, kNLModelTrainerEmbeddingArchitectureELMo);
      if (CFDictionaryContainsKey(a2, kNLModelTrainerEmbeddingArchitectureKey))
      {
        v53 = (const __CFString *)CFDictionaryGetValue(a2, kNLModelTrainerEmbeddingArchitectureKey);
        v54 = v53;
        if (v53)
        {
          v55 = CFGetTypeID(v53);
          if (v55 == CFStringGetTypeID()
            && CFStringCompare(v54, kNLModelTrainerEmbeddingArchitectureMultilingualBERT, 0) == kCFCompareEqualTo)
          {
            CFDictionarySetValue(v40, kNLModelTrainerEmbeddingArchitectureKey, kNLModelTrainerEmbeddingArchitectureMultilingualBERT);
            CFDictionarySetValue(v40, kNLModelTrainerMultilingualEmbeddingLocaleIdentifierKey, CFSTR("mul_Latn"));
            if (CFDictionaryContainsKey(a2, kNLModelTrainerMultilingualEmbeddingLocaleIdentifierKey))
            {
              v74 = CFDictionaryGetValue(a2, kNLModelTrainerMultilingualEmbeddingLocaleIdentifierKey);
              v75 = v74;
              if (v74)
              {
                v76 = CFGetTypeID(v74);
                if (v76 == CFStringGetTypeID())
                  CFDictionarySetValue(v40, kNLModelTrainerMultilingualEmbeddingLocaleIdentifierKey, v75);
              }
            }
          }
        }
      }
      CFRelease(v43);
      CFRelease(v42);
      CFRelease(v41);
      v90 = 0;
      v91 = 0;
      v89 = &v90;
      if (CFDictionaryContainsKey(a2, kNLModelSampleDataLabelTypesArrayKey))
      {
        v56 = (const __CFArray *)CFDictionaryGetValue(a2, kNLModelSampleDataLabelTypesArrayKey);
        Count = CFArrayGetCount(v56);
        if (Count >= 1)
        {
          for (i = 0; i != Count; ++i)
          {
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v56, i);
            CStringPtr = (char *)CFStringGetCStringPtr(ValueAtIndex, 0x8000100u);
            std::string::basic_string[abi:ne180100]<0>(&__p, CStringPtr);
            v86[0] = &__p;
            *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v89, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)v86)+ 14) = i;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
      v61 = operator new();
      CoreNLP::TransferSeqTagModel::TransferSeqTagModel(v61, &v89);
      v62 = v93;
      if (v93)
        CFRetain(v93);
      v85 = v62;
      CoreNLP::TransferSeqTagModel::initTrainer(v61, (const void **)&v85);
      v63 = v84;
      if (v85)
        CFRelease(v85);
      v64 = *((_QWORD *)this + 20);
      *((_QWORD *)this + 20) = v61;
      if (v64)
        (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
      if (*v83)
      {
        if (*v82)
        {
          v63 = v84;
          if ((CoreNLP::TransferSeqTagModel::load(*((CoreNLP::TransferSeqTagModel **)this + 20), (const __CFDictionary *)*v82, (const __CFArray *)*v83) & 1) == 0)
          {
            v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v81, "Unable to load Transfer Tagging model");
            __cxa_throw(v81, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
        }
      }
      v65 = CFArrayCreate(0, (const void **)kNLTagSchemeTokenType, 1, MEMORY[0x1E0C9B378]);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v65;
      v66 = (CoreNLP::CompositeTagger *)operator new();
      CoreNLP::CompositeTagger::CompositeTagger(v66, v63, v65, 0);
      v67 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v66;
      if (v67)
        (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
      if (v65)
        CFRelease(v65);
      std::__tree<std::string>::destroy((uint64_t)&v89, v90);
      if (v93)
        CFRelease(v93);
      if (v6)
        goto LABEL_105;
      return this;
    }
    if (*v5 != 1)
    {
      v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v77, "Unsupported Model Method Type");
      __cxa_throw(v77, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  else
  {
    v11 = 0;
  }
  v19 = (CoreNLP::TaggingFeatureExtractor *)operator new();
  CoreNLP::TaggingFeatureExtractor::TaggingFeatureExtractor(v19);
  v20 = *(_QWORD *)this;
  *(_QWORD *)this = v19;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v90 = 0;
  v91 = 0;
  v89 = &v90;
  std::string::basic_string[abi:ne180100]<0>(&__p, "feature.minfreq");
  v86[0] = &__p;
  v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v89, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v86);
  MEMORY[0x19401E64C]((char *)v21 + 56, "1");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "feature.possible_states");
  v86[0] = &__p;
  v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v89, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v86);
  MEMORY[0x19401E64C]((char *)v22 + 56, "0");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "feature.possible_transitions");
  v86[0] = &__p;
  v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v89, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v86);
  MEMORY[0x19401E64C]((char *)v23 + 56, "0");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "c2");
  v86[0] = &__p;
  v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v89, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v86);
  MEMORY[0x19401E64C]((char *)v24 + 56, "1.0");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "max_iterations");
  v86[0] = &__p;
  v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v89, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v86);
  MEMORY[0x19401E64C]((char *)v25 + 56, "3000");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_memories");
  v86[0] = &__p;
  v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v89, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v86);
  MEMORY[0x19401E64C]((char *)v26 + 56, "10");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "epsilon");
  v86[0] = &__p;
  v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v89, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v86);
  MEMORY[0x19401E64C]((char *)v27 + 56, "1e-5");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "period");
  v86[0] = &__p;
  v28 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v89, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v86);
  MEMORY[0x19401E64C]((char *)v28 + 56, "10");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "delta");
  v86[0] = &__p;
  v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v89, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v86);
  MEMORY[0x19401E64C]((char *)v29 + 56, "1e-5");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "linesearch");
  v86[0] = &__p;
  v30 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v89, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v86);
  MEMORY[0x19401E64C]((char *)v30 + 56, "MoreThuente");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "max_linesearch");
  v86[0] = &__p;
  v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v89, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)v86);
  MEMORY[0x19401E64C]((char *)v31 + 56, "20");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (a2)
      goto LABEL_40;
LABEL_97:
    LODWORD(v86[0]) = 0;
    goto LABEL_98;
  }
  if (!a2)
    goto LABEL_97;
LABEL_40:
  if (CFDictionaryContainsKey(a2, kNLModelTrainerRegularizationCoefficientKey))
  {
    valuePtr[0] = 1036831949;
    v32 = (const __CFNumber *)CFDictionaryGetValue(a2, kNLModelTrainerRegularizationCoefficientKey);
    CFNumberGetValue(v32, kCFNumberFloatType, valuePtr);
    std::to_string(&__p, *(float *)valuePtr);
    std::string::basic_string[abi:ne180100]<0>(v86, "c2");
    v93 = v86;
    v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v89, (const void **)v86, (uint64_t)&std::piecewise_construct, (_OWORD **)&v93);
    v34 = (void **)v33 + 7;
    if (*((char *)v33 + 79) < 0)
      operator delete(*v34);
    *(std::string *)v34 = __p;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    if (v87 < 0)
    {
      operator delete(v86[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (CFDictionaryContainsKey(a2, kNLModelTrainerMaxIterationNumberKey))
  {
    valuePtr[0] = 3000;
    v35 = (const __CFNumber *)CFDictionaryGetValue(a2, kNLModelTrainerMaxIterationNumberKey);
    CFNumberGetValue(v35, kCFNumberCFIndexType, valuePtr);
    std::to_string(&__p, valuePtr[0]);
    std::string::basic_string[abi:ne180100]<0>(v86, "max_iterations");
    v93 = v86;
    v36 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v89, (const void **)v86, (uint64_t)&std::piecewise_construct, (_OWORD **)&v93);
    v37 = (void **)v36 + 7;
    if (*((char *)v36 + 79) < 0)
      operator delete(*v37);
    *(std::string *)v37 = __p;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    if (v87 < 0)
    {
      operator delete(v86[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  LODWORD(v86[0]) = 0;
  if (CFDictionaryContainsKey(a2, kNLModelTrainerFeatureCategoryKey))
  {
    v38 = (const __CFNumber *)CFDictionaryGetValue(a2, kNLModelTrainerFeatureCategoryKey);
    CFNumberGetValue(v38, kCFNumberCFIndexType, v86);
  }
LABEL_98:
  v68 = operator new();
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  CoreNLP::CRFModel::CRFModel(v68, &__p);
  std::__tree<std::string>::destroy((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
  *(_DWORD *)(v68 + 64) = v86[0];
  *(_DWORD *)(v68 + 12) = v11;
  CoreNLP::CRFModel::initTrainer(v68, &v89);
  v69 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v68;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v70 = CFArrayCreate(0, (const void **)kNLTagSchemeLexicalClass, 1, MEMORY[0x1E0C9B378]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
  v71 = (CoreNLP::CompositeTagger *)operator new();
  CoreNLP::CompositeTagger::CompositeTagger(v71, v84, v70, 0);
  v72 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v71;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  if (v70)
    CFRelease(v70);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v89, v90);
  if (v6)
LABEL_105:
    CFRelease(v6);
  return this;
}

void sub_191CD5110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, const void **a11, const void **a12, const void **a13, const void **a14, CoreNLP::TaggerContext *a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,const void *a29,uint64_t a30)
{
  uint64_t *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  applesauce::CF::NumberRef::~NumberRef((const void **)&__p);
  applesauce::CF::NumberRef::~NumberRef((const void **)&a23);
  applesauce::CF::NumberRef::~NumberRef(&a29);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v31 - 104));
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v31 - 120), 0);
  v33 = v30[20];
  v30[20] = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  nlp::CFScopedPtr<__CFLocale const*>::reset(a12, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset(a13, 0);
  nlp::CFScopedPtr<__CFArray const*>::reset(a14, 0);
  nlp::CFScopedPtr<__CFData const*>::reset(a11, 0);
  CoreNLP::TaggerContext::~TaggerContext(a15);
  std::__list_imp<CoreNLP::NLAttributedToken>::clear(a10);
  v34 = v30[2];
  v30[2] = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = v30[1];
  v30[1] = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *v30;
  *v30 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  _Unwind_Resume(a1);
}

void CoreNLP::NLModelTrainer::readSample(uint64_t a1, const __CFString *a2, _QWORD *a3, _QWORD *a4, int a5)
{
  uint64_t v5;
  unint64_t v7;
  const __CFLocale *v12;
  CoreNLP::CompositeTagger *v13;
  uint64_t v14;
  CFIndex Length;
  _QWORD v16[10];
  int v17;
  _QWORD v18[4];
  CFRange v19;

  v5 = a4[1] - *a4;
  if (v5 >= 24)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    if (v7 == (uint64_t)(a3[1] - *a3) >> 4)
    {
      v18[0] = 0;
      v18[1] = v18;
      v18[2] = 0x2000000000;
      v18[3] = 0;
      std::__list_imp<CoreNLP::NLAttributedToken>::clear((uint64_t *)(a1 + 32));
      CoreNLP::CompositeTagger::setString(*(CoreNLP::CompositeTagger **)(a1 + 16), a2);
      v12 = *(const __CFLocale **)(a1 + 152);
      if (v12)
      {
        v13 = *(CoreNLP::CompositeTagger **)(a1 + 16);
        v19.length = CFStringGetLength(a2);
        v19.location = 0;
        CoreNLP::CompositeTagger::setLocaleForRange(v13, v12, v19);
      }
      v14 = *(_QWORD *)(a1 + 16);
      Length = CFStringGetLength(a2);
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 0x40000000;
      v16[2] = ___ZN7CoreNLP14NLModelTrainer10readSampleEPK10__CFStringRKNSt3__16vectorI7CFRangeNS4_9allocatorIS6_EEEERKNS5_INS4_12basic_stringIcNS4_11char_traitsIcEENS7_IcEEEENS7_ISG_EEEENS_17NLTrainerDataTypeE_block_invoke;
      v16[3] = &unk_1E2DF38D8;
      v16[4] = v18;
      v16[5] = a1;
      v16[6] = a2;
      v16[7] = v7;
      v16[8] = a3;
      v16[9] = a4;
      v17 = a5;
      CoreNLP::CompositeTagger::enumerateTokens(v14, 2u, 0, Length, (CoreNLP::NLAttributedToken *)4, (uint64_t)v16);
      _Block_object_dispose(v18, 8);
    }
  }
}

void sub_191CD55E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN7CoreNLP14NLModelTrainer10readSampleEPK10__CFStringRKNSt3__16vectorI7CFRangeNS4_9allocatorIS6_EEEERKNS5_INS4_12basic_stringIcNS4_11char_traitsIcEENS7_IcEEEENS7_ISG_EEEENS_17NLTrainerDataTypeE_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  std::string *v25;
  std::string *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void **p_data;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  CFRange **v48;
  CFRange **v49;
  CFStringRef v50;
  const __CFString *v51;
  CFTypeID TypeID;
  std::vector<std::string>::pointer v53;
  __int128 v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  std::string *v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  int location;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  int v72;
  int length;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  int v83;
  std::runtime_error *exception;
  void *v85[2];
  std::string *v86;
  CFTypeRef cf;
  void *__p[2];
  std::__split_buffer<std::string>::pointer end;
  void *v90;
  char *v91;
  char *v92;
  void *v93;
  char *v94;
  char *v95;
  std::vector<std::string> v96;
  __int128 v97;
  uint64_t v98;
  __int128 *v99;
  std::string::__raw *v100;
  unint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  std::__split_buffer<std::string> v105;

  v2 = *(_QWORD **)(a1 + 40);
  v3 = v2[2];
  v4 = v3 + 872;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v5 = *(_QWORD *)(v3 + 880);
  if (v5 != v3 + 872)
  {
    while (1)
    {
      v6 = (__int128 *)(v5 + 16);
      if (!CoreNLP::skipTokenForOptions((CoreNLP *)(v5 + 16), (CoreNLP::NLAttributedToken *)4))
        break;
      v5 = *(_QWORD *)(v5 + 8);
LABEL_63:
      if (v5 == v4)
        goto LABEL_64;
    }
    if (*(char *)(v5 + 119) < 0)
    {
      if (*(_QWORD *)(v5 + 104))
        goto LABEL_11;
    }
    else if (*(_BYTE *)(v5 + 119))
    {
      goto LABEL_11;
    }
    v7 = *v6;
    v98 = *(_QWORD *)(v5 + 32);
    v97 = v7;
    CoreNLP::extractLowercaseUTF8(*(CFStringRef *)(a1 + 48), (CFIndex *)&v97, *(_DWORD *)(v2[2] + 936), (std::string *)&v105);
    v8 = (void **)(v5 + 96);
    if (*(char *)(v5 + 119) < 0)
      operator delete(*v8);
    *(_OWORD *)v8 = *(_OWORD *)&v105.__first_;
    *(_QWORD *)(v5 + 112) = v105.__end_;
LABEL_11:
    v9 = v2[1];
    if (v9)
    {
      if (!*(_BYTE *)(v9 + 68))
      {
        v16 = *(_QWORD *)(v5 + 48);
        if (v16)
        {
          v17 = v5 + 48;
          do
          {
            v18 = *(_DWORD *)(v16 + 32);
            v19 = v18 < 6;
            if (v18 >= 6)
              v20 = (uint64_t *)v16;
            else
              v20 = (uint64_t *)(v16 + 8);
            if (!v19)
              v17 = v16;
            v16 = *v20;
          }
          while (*v20);
          if (v17 != v5 + 48 && *(int *)(v17 + 32) <= 6)
            *(_BYTE *)(v9 + 68) = 1;
        }
      }
    }
    v10 = v103;
    if (v103 >= v104)
    {
      v12 = (v103 - v102) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
      v13 = (v104 - v102) >> 2;
      if (v13 <= v12 + 1)
        v13 = v12 + 1;
      if ((unint64_t)(v104 - v102) >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v104, v14);
      else
        v15 = 0;
      v21 = &v15[8 * v12];
      *(_QWORD *)v21 = v6;
      v11 = v21 + 8;
      v23 = v102;
      v22 = v103;
      if (v103 != v102)
      {
        do
        {
          v24 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *((_QWORD *)v21 - 1) = v24;
          v21 -= 8;
        }
        while (v22 != v23);
        v22 = v102;
      }
      v102 = v21;
      v103 = v11;
      v104 = &v15[8 * v14];
      if (v22)
        operator delete(v22);
    }
    else
    {
      *(_QWORD *)v103 = v6;
      v11 = v10 + 8;
    }
    v103 = v11;
    v5 = *(_QWORD *)(v5 + 8);
    v25 = (std::string *)v100;
    if ((unint64_t)v100 >= v101)
    {
      v26 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<char const(&)[9]>((uint64_t *)&v99, "SYS_NONE");
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v100, "SYS_NONE");
      v26 = v25 + 1;
    }
    v100 = (std::string::__raw *)v26;
    v27 = *(_QWORD *)(a1 + 32);
    v28 = *(_QWORD *)(v27 + 8);
    v31 = *(_QWORD *)(v28 + 24);
    v29 = (_QWORD *)(v28 + 24);
    v30 = v31;
    if (v31 < *(_QWORD *)(a1 + 56))
    {
      v32 = **(_QWORD **)(a1 + 64);
      v33 = (uint64_t *)*((_QWORD *)v103 - 1);
      while (1)
      {
        v34 = (uint64_t *)(v32 + 16 * v30);
        v35 = *v34;
        v36 = v34[1];
        v37 = *v33;
        if (v33[1] + *v33 <= v36 + v35)
          break;
        *v29 = v30 + 1;
        v27 = *(_QWORD *)(a1 + 32);
        v38 = *(_QWORD *)(v27 + 8);
        v39 = *(_QWORD *)(v38 + 24);
        v29 = (_QWORD *)(v38 + 24);
        v30 = v39;
        if (v39 >= *(_QWORD *)(a1 + 56))
          goto LABEL_63;
      }
      if (v35 != -1 && v37 != -1 && v37 >= v35)
      {
        p_data = (void **)&v26[-1].__r_.__value_.__l.__data_;
        if (SHIBYTE(v26[-1].__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(*p_data);
          v27 = *(_QWORD *)(a1 + 32);
        }
        v100 = (std::string::__raw *)&v26[-1];
        v43 = **(_QWORD **)(a1 + 72) + 24 * *(_QWORD *)(*(_QWORD *)(v27 + 8) + 24);
        if ((unint64_t)p_data >= v101)
        {
          v26 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v99, (__int128 *)v43);
        }
        else if (*(char *)(v43 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v26 - 1, *(const std::string::value_type **)v43, *(_QWORD *)(v43 + 8));
        }
        else
        {
          v44 = *(_OWORD *)v43;
          v26[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v43 + 16);
          *(_OWORD *)p_data = v44;
        }
        v100 = (std::string::__raw *)v26;
      }
    }
    goto LABEL_63;
  }
LABEL_64:
  v45 = v2[1];
  if (v45)
  {
    memset(&v105, 0, 24);
    if (v103 != v102)
    {
      v46 = 0;
      do
      {
        (*(void (**)(std::vector<std::string> *__return_ptr, _QWORD, _QWORD, _QWORD, char **, unint64_t, _QWORD))(*(_QWORD *)*v2 + 24))(&v96, *v2, *(unsigned int *)(v2[1] + 64), *(unsigned int *)(v2[2] + 936), &v102, v46, *(_QWORD *)(a1 + 48));
        std::vector<std::vector<std::string>>::push_back[abi:ne180100]((uint64_t *)&v105, (uint64_t)&v96);
        v93 = &v96;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
        ++v46;
      }
      while (v46 < (v103 - v102) >> 3);
      v45 = v2[1];
    }
    (*(void (**)(uint64_t, std::__split_buffer<std::string> *, __int128 **, _QWORD))(*(_QWORD *)v45 + 16))(v45, &v105, &v99, *(unsigned int *)(a1 + 80));
    v96.__begin_ = (std::vector<std::string>::pointer)&v105;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
  }
  else
  {
    v47 = v2[20];
    if (v47)
    {
      memset(&v96, 0, sizeof(v96));
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v90 = 0;
      v91 = 0;
      v92 = 0;
      v48 = (CFRange **)v102;
      v49 = (CFRange **)v103;
      if (v102 != v103)
      {
        do
        {
          v50 = CFStringCreateWithSubstring(0, *(CFStringRef *)(a1 + 48), **v48);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v50);
          if (!cf)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          std::string::basic_string[abi:ne180100]<0>(v85, "");
          v51 = (const __CFString *)cf;
          if (SHIBYTE(v86) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v105, (const std::string::value_type *)v85[0], (std::string::size_type)v85[1]);
          }
          else
          {
            *(_OWORD *)&v105.__first_ = *(_OWORD *)v85;
            v105.__end_ = v86;
          }
          if (v51 && (TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(v51)))
          {
            applesauce::CF::details::CFString_get_value<false>(v51, (uint64_t)__p);
            if (SHIBYTE(v105.__end_) < 0)
              operator delete(v105.__first_);
          }
          else
          {
            *(_OWORD *)__p = *(_OWORD *)&v105.__first_;
            end = v105.__end_;
          }
          v53 = v96.__end_;
          if (v96.__end_ >= v96.__end_cap_.__value_)
          {
            v55 = 0xAAAAAAAAAAAAAAABLL * (((char *)v96.__end_ - (char *)v96.__begin_) >> 3);
            v56 = v55 + 1;
            if (v55 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v96.__end_cap_.__value_ - (char *)v96.__begin_) >> 3) > v56)
              v56 = 0x5555555555555556 * (((char *)v96.__end_cap_.__value_ - (char *)v96.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v96.__end_cap_.__value_ - (char *)v96.__begin_) >> 3) >= 0x555555555555555)
              v57 = 0xAAAAAAAAAAAAAAALL;
            else
              v57 = v56;
            v105.__end_cap_.__value_ = (std::allocator<std::string> *)&v96.__end_cap_;
            if (v57)
              v58 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v96.__end_cap_, v57);
            else
              v58 = 0;
            v59 = v58 + v55;
            v105.__first_ = v58;
            v105.__begin_ = v59;
            v105.__end_cap_.__value_ = &v58[v57];
            v60 = *(_OWORD *)__p;
            v59->__r_.__value_.__r.__words[2] = (std::string::size_type)end;
            *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v60;
            __p[1] = 0;
            end = 0;
            __p[0] = 0;
            v105.__end_ = v59 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v96, &v105);
            v61 = v96.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&v105);
            v96.__end_ = v61;
            if (SHIBYTE(end) < 0)
              operator delete(__p[0]);
          }
          else
          {
            v54 = *(_OWORD *)__p;
            v96.__end_->__r_.__value_.__r.__words[2] = (std::string::size_type)end;
            *(_OWORD *)&v53->__r_.__value_.__l.__data_ = v54;
            __p[1] = 0;
            end = 0;
            __p[0] = 0;
            v96.__end_ = v53 + 1;
          }
          if (SHIBYTE(v86) < 0)
            operator delete(v85[0]);
          if (cf)
            CFRelease(cf);
          location = (*v48)->location;
          v63 = v94;
          if (v94 >= v95)
          {
            v65 = (char *)v93;
            v66 = (v94 - (_BYTE *)v93) >> 2;
            v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) >> 62)
              std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
            v68 = v95 - (_BYTE *)v93;
            if ((v95 - (_BYTE *)v93) >> 1 > v67)
              v67 = v68 >> 1;
            if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
              v69 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v69 = v67;
            if (v69)
            {
              v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v95, v69);
              v65 = (char *)v93;
              v63 = v94;
            }
            else
            {
              v70 = 0;
            }
            v71 = &v70[4 * v66];
            *(_DWORD *)v71 = location;
            v64 = v71 + 4;
            while (v63 != v65)
            {
              v72 = *((_DWORD *)v63 - 1);
              v63 -= 4;
              *((_DWORD *)v71 - 1) = v72;
              v71 -= 4;
            }
            v93 = v71;
            v94 = v64;
            v95 = &v70[4 * v69];
            if (v65)
              operator delete(v65);
          }
          else
          {
            *(_DWORD *)v94 = location;
            v64 = v63 + 4;
          }
          v94 = v64;
          length = (*v48)->length;
          v74 = v91;
          if (v91 >= v92)
          {
            v76 = (char *)v90;
            v77 = (v91 - (_BYTE *)v90) >> 2;
            v78 = v77 + 1;
            if ((unint64_t)(v77 + 1) >> 62)
              std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
            v79 = v92 - (_BYTE *)v90;
            if ((v92 - (_BYTE *)v90) >> 1 > v78)
              v78 = v79 >> 1;
            if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
              v80 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v80 = v78;
            if (v80)
            {
              v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v92, v80);
              v76 = (char *)v90;
              v74 = v91;
            }
            else
            {
              v81 = 0;
            }
            v82 = &v81[4 * v77];
            *(_DWORD *)v82 = length;
            v75 = v82 + 4;
            while (v74 != v76)
            {
              v83 = *((_DWORD *)v74 - 1);
              v74 -= 4;
              *((_DWORD *)v82 - 1) = v83;
              v82 -= 4;
            }
            v90 = v82;
            v91 = v75;
            v92 = &v81[4 * v80];
            if (v76)
              operator delete(v76);
          }
          else
          {
            *(_DWORD *)v91 = length;
            v75 = v74 + 4;
          }
          v91 = v75;
          ++v48;
        }
        while (v48 != v49);
        v47 = v2[20];
      }
      CoreNLP::TransferSeqTagModel::readSample(v47, (__int128 **)&v96, &v99, (uint64_t)&v93, (uint64_t)&v90, *(_DWORD *)(a1 + 80));
      if (v90)
      {
        v91 = (char *)v90;
        operator delete(v90);
      }
      if (v93)
      {
        v94 = (char *)v93;
        operator delete(v93);
      }
      v105.__first_ = (std::__split_buffer<std::string>::pointer)&v96;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
    }
  }
  v105.__first_ = (std::__split_buffer<std::string>::pointer)&v99;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
  if (v102)
  {
    v103 = v102;
    operator delete(v102);
  }
}

void sub_191CD5E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,uint64_t a26,char **a27,char **a28,uint64_t a29,char *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38)
{
  uint64_t v38;
  void *v40;

  if (__p)
    operator delete(__p);
  if (a27)
  {
    a28 = a27;
    operator delete(a27);
  }
  a27 = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  a30 = &a37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  v40 = *(void **)(v38 - 152);
  if (v40)
  {
    *(_QWORD *)(v38 - 144) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(a1);
}

__CFData *CoreNLP::NLModelTrainer::copyTrainedModelData(CoreNLP::NLModelTrainer *this)
{
  FILE *v2;
  __CFData *Mutable;
  FILE *v4;
  uint64_t v5;
  void *v6;

  v2 = tmpfile();
  if (*((_DWORD *)this + 42) == 9)
    return 0;
  v4 = v2;
  (*(void (**)(_QWORD, FILE *))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), v2);
  Mutable = CFDataCreateMutable(0, 0);
  fseek(v4, 0, 2);
  v5 = MEMORY[0x19401ED3C](v4);
  fseek(v4, 0, 0);
  v6 = malloc_type_malloc(v5, 0xB7ACD013uLL);
  fread(v6, v5, 1uLL, v4);
  CFDataAppendBytes(Mutable, (const UInt8 *)v6, v5);
  free(v6);
  fclose(v4);
  return Mutable;
}

const __CFDictionary *CoreNLP::NLModelTrainer::copyTrainedModelDict(CoreNLP::NLModelTrainer *this)
{
  const __CFDictionary *v2;
  const __CFDictionary *Mutable;
  const void *Value;
  CFTypeRef v5;
  const void *v6;
  CFTypeRef v7;
  __CFData *v8;
  const void *v9;
  CFDictionaryRef CFDictionaryRef;
  const void *v11;
  CFTypeRef v12;
  _QWORD v14[3];

  if (*((_DWORD *)this + 42) == 9)
  {
    v2 = CoreNLP::TransferSeqTagModel::copyTrainedDict(*((CoreNLP::TransferSeqTagModel **)this + 20));
    Mutable = v2;
    if (v2)
    {
      Value = CFDictionaryGetValue(v2, kNLModelTrainerModelMetadataKey);
      v5 = CFRetain(Value);
      nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)this + 18, v5);
      v6 = CFDictionaryGetValue(Mutable, kNLModelTrainerModelDataArrayKey);
      v7 = CFRetain(v6);
      nlp::CFScopedPtr<__CFArray const*>::reset((const void **)this + 17, v7);
    }
  }
  else
  {
    v8 = CoreNLP::NLModelTrainer::copyTrainedModelData(this);
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionaryAddValue(Mutable, kNLModelTrainerModelDataKey, v8);
    v9 = (const void *)kNLModelTrainerModelMetadataKey;
    v14[0] = 0;
    v14[1] = 0;
    CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v14);
    v14[2] = CFDictionaryRef;
    CFDictionaryAddValue(Mutable, v9, CFDictionaryRef);
    if (CFDictionaryRef)
      CFRelease(CFDictionaryRef);
    CFRelease(v8);
    v11 = CFDictionaryGetValue(Mutable, kNLModelTrainerModelDataKey);
    v12 = CFRetain(v11);
    nlp::CFScopedPtr<__CFData const*>::reset((const void **)this + 16, v12);
  }
  return Mutable;
}

void sub_191CD6188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

__CFDictionary *CoreNLP::NLModelTrainer::copyPredictedLabels(CoreNLP::NLModelTrainer *this, const __CFString *a2, int a3, uint64_t a4)
{
  __CFDictionary *Mutable;
  const CFArrayCallBacks *v8;
  CFMutableArrayRef v9;
  CFMutableArrayRef v10;
  CFMutableArrayRef v11;
  CFMutableArrayRef v12;
  const __CFLocale *v13;
  CoreNLP::CompositeTagger *v14;
  uint64_t v15;
  CFIndex Length;
  _QWORD v19[11];
  char v20;
  CFRange v21;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  v8 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  v9 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v10 = CFArrayCreateMutable(0, 0, v8);
  v11 = CFArrayCreateMutable(0, 0, v8);
  v12 = 0;
  if (a3)
    v12 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  std::__list_imp<CoreNLP::NLAttributedToken>::clear((uint64_t *)this + 4);
  CoreNLP::CompositeTagger::setString(*((CoreNLP::CompositeTagger **)this + 2), a2);
  v13 = (const __CFLocale *)*((_QWORD *)this + 19);
  if (v13)
  {
    v14 = (CoreNLP::CompositeTagger *)*((_QWORD *)this + 2);
    v21.length = CFStringGetLength(a2);
    v21.location = 0;
    CoreNLP::CompositeTagger::setLocaleForRange(v14, v13, v21);
  }
  v15 = *((_QWORD *)this + 2);
  Length = CFStringGetLength(a2);
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 0x40000000;
  v19[2] = ___ZN7CoreNLP14NLModelTrainer19copyPredictedLabelsEPK10__CFStringbm_block_invoke;
  v19[3] = &__block_descriptor_tmp_26;
  v19[4] = this;
  v19[5] = a2;
  v20 = a3;
  v19[6] = a4;
  v19[7] = v9;
  v19[8] = v10;
  v19[9] = v11;
  v19[10] = v12;
  CoreNLP::CompositeTagger::enumerateTokens(v15, 2u, 0, Length, (CoreNLP::NLAttributedToken *)4, (uint64_t)v19);
  if (a3)
  {
    CFDictionaryAddValue(Mutable, kNLModelSampleDataLabelsArrayKey, v9);
    CFDictionaryAddValue(Mutable, kNLModelSampleDataProbabilitiesArrayKey, v12);
    CFRelease(v12);
  }
  else
  {
    CFDictionaryAddValue(Mutable, kNLModelSampleDataLabelArrayKey, v9);
  }
  CFDictionaryAddValue(Mutable, kNLModelSampleDataRangeLocationArrayKey, v10);
  CFDictionaryAddValue(Mutable, kNLModelSampleDataRangeLengthArrayKey, v11);
  CFRelease(v9);
  CFRelease(v10);
  CFRelease(v11);
  return Mutable;
}

void ___ZN7CoreNLP14NLModelTrainer19copyPredictedLabelsEPK10__CFStringbm_block_invoke(uint64_t a1, CFIndex *a2)
{
  _QWORD *v3;
  CoreNLP::CompositeTagger *v4;
  _QWORD *v5;
  _QWORD *i;
  uint64_t v7;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  CFRange **v13;
  CFRange **v14;
  CFStringRef v15;
  const __CFString *v16;
  CFTypeID TypeID;
  std::vector<std::string>::pointer v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  std::string *v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 *begin;
  __int128 *v28;
  uint64_t v29;
  const CFArrayCallBacks *v30;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v32;
  std::string::pointer data;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  const char *first;
  CFStringRef v39;
  std::string *v40;
  std::string *v41;
  std::string *v42;
  _QWORD *v43;
  int v44;
  _QWORD *v45;
  __int128 v46;
  void **v47;
  const void **v48;
  const void **v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  const void **v54;
  const void **v55;
  const void **v56;
  const void *v57;
  std::runtime_error *exception;
  _QWORD *v59;
  _QWORD *v60;
  __int128 v61;
  uint64_t v62;
  std::string v63;
  void *v64[2];
  std::string *v65;
  CFTypeRef cf;
  void *__p[2];
  std::__split_buffer<std::string>::pointer end;
  std::vector<std::string> v69;
  std::vector<std::string> v70;
  __int128 v71;
  std::__split_buffer<std::string>::pointer v72;
  _QWORD v73[3];
  const void **v74;
  const void **v75;
  const void **v76;
  std::__split_buffer<std::string> v77;

  v3 = *(_QWORD **)(a1 + 32);
  v4 = (CoreNLP::CompositeTagger *)v3[2];
  v74 = 0;
  v75 = 0;
  v76 = 0;
  memset(v73, 0, sizeof(v73));
  v5 = (_QWORD *)*((_QWORD *)v4 + 110);
  v71 = 0uLL;
  v72 = 0;
  CoreNLP::CompositeTagger::getTokenAtIndex(v4, 1u, *a2, (uint64_t)&v71);
  v59 = (_QWORD *)((char *)v4 + 872);
  for (i = v5; ; i = (_QWORD *)v45[1])
  {
    v60 = i;
    if (i == v59)
      break;
    v7 = i[2];
    if (v7 == -1 || (_QWORD)v71 == -1)
      break;
    if (v7 < (uint64_t)v71 || i[3] + v7 > *((_QWORD *)&v71 + 1) + (_QWORD)v71)
      break;
LABEL_86:
    v43 = i + 2;
    v44 = CoreNLP::skipTokenForOptions((CoreNLP *)(i + 2), (CoreNLP::NLAttributedToken *)4);
    v45 = v60;
    if (v44)
      continue;
    if (*((char *)v60 + 119) < 0)
    {
      if (!v60[13])
      {
LABEL_91:
        v46 = *(_OWORD *)v43;
        v62 = v43[2];
        v61 = v46;
        CoreNLP::extractLowercaseUTF8(*(CFStringRef *)(a1 + 40), (CFIndex *)&v61, *(_DWORD *)(v3[2] + 936), (std::string *)&v77);
        v47 = (void **)(v60 + 12);
        if (*((char *)v60 + 119) < 0)
          operator delete(*v47);
        *(_OWORD *)v47 = *(_OWORD *)&v77.__first_;
        v60[14] = v77.__end_;
      }
    }
    else if (!*((_BYTE *)v60 + 119))
    {
      goto LABEL_91;
    }
    v48 = v75;
    if (v75 >= v76)
    {
      v50 = v75 - v74;
      if ((unint64_t)(v50 + 1) >> 61)
        std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
      v51 = ((char *)v76 - (char *)v74) >> 2;
      if (v51 <= v50 + 1)
        v51 = v50 + 1;
      if ((unint64_t)((char *)v76 - (char *)v74) >= 0x7FFFFFFFFFFFFFF8)
        v52 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v52 = v51;
      if (v52)
        v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v76, v52);
      else
        v53 = 0;
      v54 = (const void **)&v53[8 * v50];
      *v54 = v43;
      v49 = v54 + 1;
      v56 = v74;
      v55 = v75;
      if (v75 != v74)
      {
        do
        {
          v57 = *--v55;
          *--v54 = v57;
        }
        while (v55 != v56);
        v55 = v74;
      }
      v74 = v54;
      v75 = v49;
      v76 = (const void **)&v53[8 * v52];
      if (v55)
        operator delete(v55);
    }
    else
    {
      *v75 = v43;
      v49 = v48 + 1;
    }
    v75 = v49;
    v45 = v60;
  }
  memset(&v70, 0, sizeof(v70));
  v10 = v3[1];
  if (v10)
  {
    memset(&v77, 0, 24);
    if (v75 != v74)
    {
      v11 = 0;
      do
      {
        (*(void (**)(std::vector<std::string> *__return_ptr, _QWORD, _QWORD, _QWORD, const void ***, unint64_t, _QWORD))(*(_QWORD *)*v3 + 24))(&v69, *v3, *(unsigned int *)(v3[1] + 64), *(unsigned int *)(v3[2] + 936), &v74, v11, *(_QWORD *)(a1 + 40));
        std::vector<std::vector<std::string>>::push_back[abi:ne180100]((uint64_t *)&v77, (uint64_t)&v69);
        __p[0] = &v69;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        ++v11;
      }
      while (v11 < v75 - v74);
      v10 = v3[1];
    }
    (*(void (**)(std::vector<std::string> *__return_ptr, uint64_t, std::__split_buffer<std::string> *, _QWORD))(*(_QWORD *)v10 + 88))(&v69, v10, &v77, *(_QWORD *)(a1 + 48));
    std::vector<std::vector<int>>::__vdeallocate((uint64_t *)&v70);
    v70 = v69;
    memset(&v69, 0, sizeof(v69));
    __p[0] = &v69;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v69.__begin_ = (std::vector<std::string>::pointer)&v77;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  }
  else
  {
    v12 = v3[20];
    if (v12)
    {
      memset(&v69, 0, sizeof(v69));
      v13 = (CFRange **)v74;
      v14 = (CFRange **)v75;
      if (v74 == v75)
      {
        v28 = 0;
        begin = 0;
      }
      else
      {
        do
        {
          v15 = CFStringCreateWithSubstring(0, *(CFStringRef *)(a1 + 40), **v13);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v15);
          if (!cf)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          std::string::basic_string[abi:ne180100]<0>(v64, "");
          v16 = (const __CFString *)cf;
          if (SHIBYTE(v65) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v77, (const std::string::value_type *)v64[0], (std::string::size_type)v64[1]);
          }
          else
          {
            *(_OWORD *)&v77.__first_ = *(_OWORD *)v64;
            v77.__end_ = v65;
          }
          if (v16 && (TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(v16)))
          {
            applesauce::CF::details::CFString_get_value<false>(v16, (uint64_t)__p);
            if (SHIBYTE(v77.__end_) < 0)
              operator delete(v77.__first_);
          }
          else
          {
            *(_OWORD *)__p = *(_OWORD *)&v77.__first_;
            end = v77.__end_;
          }
          v18 = v69.__end_;
          if (v69.__end_ >= v69.__end_cap_.__value_)
          {
            v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v69.__end_ - (char *)v69.__begin_) >> 3);
            v21 = v20 + 1;
            if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v69.__end_cap_.__value_ - (char *)v69.__begin_) >> 3) > v21)
              v21 = 0x5555555555555556 * (((char *)v69.__end_cap_.__value_ - (char *)v69.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v69.__end_cap_.__value_ - (char *)v69.__begin_) >> 3) >= 0x555555555555555)
              v22 = 0xAAAAAAAAAAAAAAALL;
            else
              v22 = v21;
            v77.__end_cap_.__value_ = (std::allocator<std::string> *)&v69.__end_cap_;
            if (v22)
              v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v69.__end_cap_, v22);
            else
              v23 = 0;
            v24 = v23 + v20;
            v77.__first_ = v23;
            v77.__begin_ = v24;
            v77.__end_cap_.__value_ = &v23[v22];
            v25 = *(_OWORD *)__p;
            v24->__r_.__value_.__r.__words[2] = (std::string::size_type)end;
            *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
            __p[1] = 0;
            end = 0;
            __p[0] = 0;
            v77.__end_ = v24 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v69, &v77);
            v26 = v69.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&v77);
            v69.__end_ = v26;
            if (SHIBYTE(end) < 0)
              operator delete(__p[0]);
          }
          else
          {
            v19 = *(_OWORD *)__p;
            v69.__end_->__r_.__value_.__r.__words[2] = (std::string::size_type)end;
            *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
            __p[1] = 0;
            end = 0;
            __p[0] = 0;
            v69.__end_ = v18 + 1;
          }
          if (SHIBYTE(v65) < 0)
            operator delete(v64[0]);
          if (cf)
            CFRelease(cf);
          ++v13;
        }
        while (v13 != v14);
        v12 = v3[20];
        begin = (__int128 *)v69.__begin_;
        v28 = (__int128 *)v69.__end_;
      }
      memset(&v63, 0, sizeof(v63));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v63, begin, v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)begin) >> 3));
      CoreNLP::TransferSeqTagModel::inference(v12, (uint64_t *)&v63, *(CoreNLP **)(a1 + 48), (uint64_t *)&v77);
      std::vector<std::vector<int>>::__vdeallocate((uint64_t *)&v70);
      *(_OWORD *)&v70.__begin_ = *(_OWORD *)&v77.__first_;
      v70.__end_cap_.__value_ = v77.__end_;
      memset(&v77, 0, 24);
      __p[0] = &v77;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = &v63;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v77.__first_ = (std::__split_buffer<std::string>::pointer)&v69;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
    }
  }
  if (v70.__end_ != v70.__begin_)
  {
    v29 = 0;
    while (1)
    {
      v30 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      v32 = CFArrayCreateMutable(0, 0, v30);
      data = v70.__begin_[v29].__r_.__value_.__l.__data_;
      if ((std::string::pointer)v70.__begin_[v29].__r_.__value_.__l.__size_ != data)
        break;
LABEL_73:
      v41 = (std::string *)CFNumberCreate(0, kCFNumberCFIndexType, v74[v29]);
      v77.__first_ = v41;
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 64), v41);
      v42 = (std::string *)CFNumberCreate(0, kCFNumberCFIndexType, (char *)v74[v29] + 8);
      v69.__begin_ = v42;
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 72), v42);
      if (*(_BYTE *)(a1 + 88))
      {
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), Mutable);
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 80), v32);
      }
      if (v42)
        CFRelease(v42);
      if (v41)
        CFRelease(v41);
      if (v32)
        CFRelease(v32);
      if (Mutable)
        CFRelease(Mutable);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_ - (char *)v70.__begin_) >> 3) <= ++v29)
        goto LABEL_84;
    }
    v34 = 0;
    v35 = 0;
    while (2)
    {
      v36 = v3[1];
      if (v36)
        (*(void (**)(std::__split_buffer<std::string> *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v36 + 72))(&v77, v36, *(unsigned int *)&data[v34]);
      else
        CoreNLP::TransferSeqTagModel::tagToLabel((std::string *)v3[20], *(_DWORD *)&data[v34], (std::string *)&v77);
      if (SHIBYTE(v77.__end_) < 0)
      {
        first = (const char *)v77.__first_;
        if (v77.__begin_ != (std::__split_buffer<std::string>::pointer)8
          || v77.__first_->__r_.__value_.__r.__words[0] != 0x454E4F4E5F535953)
        {
LABEL_64:
          v39 = CFStringCreateWithCString(0, first, 0x8000100u);
          if (*(_BYTE *)(a1 + 88))
          {
            CFArrayAppendValue(Mutable, v39);
            v40 = (std::string *)CFNumberCreate(0, kCFNumberDoubleType, (const void *)(v70.__begin_[v29].__r_.__value_.__r.__words[0] + v34 + 8));
            v69.__begin_ = v40;
            CFArrayAppendValue(v32, v40);
            if (v40)
              CFRelease(v40);
          }
          else
          {
            CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), v39);
          }
          if (v39)
            CFRelease(v39);
        }
      }
      else if (SHIBYTE(v77.__end_) != 8
             || v77.__first_ != (std::__split_buffer<std::string>::pointer)0x454E4F4E5F535953)
      {
        first = (const char *)&v77;
        goto LABEL_64;
      }
      if (SHIBYTE(v77.__end_) < 0)
        operator delete(v77.__first_);
      ++v35;
      data = v70.__begin_[v29].__r_.__value_.__l.__data_;
      v34 += 16;
      if (v35 >= (uint64_t)(v70.__begin_[v29].__r_.__value_.__l.__size_ - (_QWORD)data) >> 4)
        goto LABEL_73;
      continue;
    }
  }
LABEL_84:
  v75 = v74;
  if (v60 != v59)
  {
    CoreNLP::CompositeTagger::getTokenAtIndex((CoreNLP::CompositeTagger *)v3[2], 1u, v60[2], (uint64_t)&v77);
    v71 = *(_OWORD *)&v77.__first_;
    v72 = v77.__end_;
    v77.__first_ = (std::__split_buffer<std::string>::pointer)&v70;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
    i = v60;
    goto LABEL_86;
  }
  v77.__first_ = (std::__split_buffer<std::string>::pointer)&v70;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
  v77.__first_ = (std::__split_buffer<std::string>::pointer)v73;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
  if (v74)
  {
    v75 = v74;
    operator delete(v74);
  }
}

void sub_191CD6C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;
  void *v43;

  a41 = v41 - 176;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  v43 = *(void **)(v41 - 152);
  if (v43)
  {
    *(_QWORD *)(v41 - 144) = v43;
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::NLModelTrainer::setLogBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 80))(v3);
  result = *(_QWORD *)(a1 + 160);
  if (result)
    return CoreNLP::TransferSeqTagModel::setTrainingLogBlock(result, a2);
  return result;
}

CFTypeRef CoreNLP::NLModelTrainer::copyModelData(CoreNLP::NLModelTrainer *this)
{
  CFTypeRef result;

  result = (CFTypeRef)*((_QWORD *)this + 16);
  if (result)
    return CFRetain(result);
  return result;
}

__CFDictionary *CoreNLP::NLModelTrainer::copyModelDict(CoreNLP::NLModelTrainer *this)
{
  __CFDictionary *Mutable;
  const __CFData *v3;
  CFDataRef Copy;
  const __CFArray *v5;
  CFArrayRef v6;
  const __CFDictionary *v7;
  CFDictionaryRef v8;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = (const __CFData *)*((_QWORD *)this + 16);
  if (v3)
  {
    Copy = CFDataCreateCopy(0, v3);
    CFDictionaryAddValue(Mutable, kNLModelTrainerModelDataKey, Copy);
    if (Copy)
      CFRelease(Copy);
  }
  v5 = (const __CFArray *)*((_QWORD *)this + 17);
  if (v5)
  {
    v6 = CFArrayCreateCopy(0, v5);
    CFDictionaryAddValue(Mutable, kNLModelTrainerModelDataArrayKey, v6);
    if (v6)
      CFRelease(v6);
  }
  v7 = (const __CFDictionary *)*((_QWORD *)this + 18);
  if (v7)
  {
    v8 = CFDictionaryCreateCopy(0, v7);
    CFDictionaryAddValue(Mutable, kNLModelTrainerModelMetadataKey, v8);
    if (v8)
      CFRelease(v8);
  }
  return Mutable;
}

void sub_191CD6FA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void CoreNLP::NLModelTrainer::endReadSamples(CoreNLP::NLModelTrainer *this)
{
  CoreNLP::TransferSeqTagModel *v1;

  v1 = (CoreNLP::TransferSeqTagModel *)*((_QWORD *)this + 20);
  if (v1)
    CoreNLP::TransferSeqTagModel::endReadSamples(v1);
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 7) = 0;
    v13 = 1;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<char const(&)[9]>(uint64_t *a1, char *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  uint64_t v11;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  __v.__first_ = v10;
  __v.__begin_ = v10 + v4;
  __v.__end_cap_.__value_ = &v10[v9];
  std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v11 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v11;
}

void sub_191CD71AC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_191CD72CC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void CoreNLP::SmartTokenizer::~SmartTokenizer(CoreNLP::SmartTokenizer *this)
{
  const void *v2;
  void **v3;

  v2 = (const void *)*((_QWORD *)this + 9);
  if (v2)
    CFRelease(v2);
  v3 = (void **)((char *)this + 480);
  std::vector<CoreNLP::NLAttributedToken>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 456);
  std::vector<CoreNLP::NLAttributedToken>::__destroy_vector::operator()[abi:ne180100](&v3);
  CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::SmartTokenizer *)((char *)this + 328));
  CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::SmartTokenizer *)((char *)this + 216));
  CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::SmartTokenizer *)((char *)this + 104));
  std::unique_ptr<CoreNLP::PunctClassifier>::reset[abi:ne180100]((CoreNLP::PunctClassifier **)this + 8, 0);
  std::unique_ptr<CoreNLP::SmartWordBreak>::reset[abi:ne180100]((CoreNLP::SmartWordBreak **)this + 7, 0);
  std::__hash_table<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>>>::~__hash_table((uint64_t)this + 16);
}

CFTypeRef *CoreNLP::SmartTokenizer::setString(CoreNLP::SmartTokenizer *this, const __CFString *a2, CFRange a3)
{
  CFIndex length;
  CFIndex location;
  const void *v7;
  CFTypeRef v8;
  CoreNLP::PunctClassifier *v9;
  CFTypeRef *result;
  uint64_t **i;

  length = a3.length;
  location = a3.location;
  CoreNLP::SmartTokenizer::clearAll(this);
  *((_QWORD *)this + 13) = -1;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 27) = -1;
  v7 = (const void *)*((_QWORD *)this + 9);
  if (v7)
  {
    CFRelease(v7);
    *((_QWORD *)this + 9) = 0;
  }
  if (a2)
  {
    v8 = CFRetain(a2);
    *((_QWORD *)this + 9) = v8;
  }
  else
  {
    v8 = 0;
  }
  *((_QWORD *)this + 10) = location;
  *((_QWORD *)this + 11) = length;
  *(_OWORD *)((char *)this + 104) = *((_OWORD *)this + 5);
  *((_QWORD *)this + 15) = 0;
  v9 = (CoreNLP::PunctClassifier *)*((_QWORD *)this + 8);
  if (v9)
    CoreNLP::PunctClassifier::setString(v9, v8);
  result = (CFTypeRef *)*((_QWORD *)this + 7);
  if (result)
    result = CoreNLP::SmartWordBreak::setString(result, *((CFTypeRef *)this + 9), *((CFRange *)this + 5));
  for (i = (uint64_t **)*((_QWORD *)this + 4); i; i = (uint64_t **)*i)
    result = (CFTypeRef *)(*(uint64_t (**)(uint64_t *, _QWORD, _QWORD, _QWORD, _QWORD))(*i[3] + 40))(i[3], *((_QWORD *)this + 9), *((_QWORD *)this + 10), *((_QWORD *)this + 11), 0);
  return result;
}

void CoreNLP::SmartTokenizer::clearAll(CoreNLP::SmartTokenizer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;

  v2 = *((_QWORD *)this + 61);
  v3 = *((_QWORD *)this + 60);
  while (v2 != v3)
    CoreNLP::NLAttributedToken::~NLAttributedToken((CoreNLP::NLAttributedToken *)(v2 - 112));
  *((_QWORD *)this + 61) = v3;
  v5 = *((_QWORD *)this + 57);
  for (i = *((_QWORD *)this + 58);
        i != v5;
  *((_QWORD *)this + 58) = v5;
  *((_QWORD *)this + 12) = 0;
}

CoreNLP::SmartWordBreak *std::unique_ptr<CoreNLP::SmartWordBreak>::reset[abi:ne180100](CoreNLP::SmartWordBreak **a1, CoreNLP::SmartWordBreak *a2)
{
  CoreNLP::SmartWordBreak *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CoreNLP::SmartWordBreak::~SmartWordBreak(result);
    JUMPOUT(0x19401E994);
  }
  return result;
}

CoreNLP::PunctClassifier *std::unique_ptr<CoreNLP::PunctClassifier>::reset[abi:ne180100](CoreNLP::PunctClassifier **a1, CoreNLP::PunctClassifier *a2)
{
  CoreNLP::PunctClassifier *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CoreNLP::PunctClassifier::~PunctClassifier(result);
    JUMPOUT(0x19401E994);
  }
  return result;
}

void CoreNLP::DepParserManager::DepParserManager(CoreNLP::DepParserManager *this, const __CFDictionary *a2)
{
  const void **v4;
  const __CFArray *v5;
  const void *v6;
  const __CFBoolean *Value;
  const void *v8;
  __CFBundle *BundleWithIdentifier;
  CFURLRef v10;
  std::runtime_error *exception;
  void *v12[4];
  _QWORD v13[4];
  _QWORD v14[4];
  __CFString *v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 1) = 0;
  v4 = (const void **)((char *)this + 8);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)this = 0;
  v17[0] = kNLTagSchemeTokenType[0];
  v5 = (const __CFArray *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v17, 1);
  v15 = kNLStringEmbeddingModelLocale[0];
  v16 = objc_msgSend(MEMORY[0x1E0C99DC8], "localeWithLocaleIdentifier:", CFSTR("en"));
  v6 = (const void *)NLTaggerCreate(v5, (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1));
  nlp::CFScopedPtr<void *>::reset(v4, v6);
  if (a2)
  {
    if (CFDictionaryContainsKey(a2, kNLStringEmbeddingModelUseANE[0]))
    {
      Value = (const __CFBoolean *)CFDictionaryGetValue(a2, kNLStringEmbeddingModelUseANE[0]);
      LODWORD(a2) = CFBooleanGetValue(Value);
    }
    else
    {
      LODWORD(a2) = 0;
    }
  }
  v14[0] = kNLStringEmbeddingModelTypeContextualWordEmbedding[0];
  v13[0] = kNLStringEmbeddingModelType[0];
  v13[1] = kNLStringEmbeddingModelLocale[0];
  v14[1] = objc_msgSend(MEMORY[0x1E0C99DC8], "localeWithLocaleIdentifier:", CFSTR("en"));
  v14[2] = kNLStringEmbeddingBERTPlusParser[0];
  v13[2] = kNLStringEmbeddingContextualModelArchitecture[0];
  v13[3] = kNLStringEmbeddingModelUseANE[0];
  v14[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", (_DWORD)a2 != 0);
  v8 = (const void *)NLStringEmbeddingCreateWithOptions((const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, v13, 4));
  nlp::CFScopedPtr<void *>::reset((const void **)this, v8);
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.CoreNLP"));
  v10 = CFBundleCopyResourceURL(BundleWithIdentifier, CFSTR("UniversalDependencies"), CFSTR("bundle"), 0);
  v12[3] = v10;
  if (v10)
    CoreNLP::getFileSystemRepresentationFromCFURL(v10, v12);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Unable to locate UniversalDepencies resources");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_191CD79D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,const void *a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  const void **v35;
  const void **v36;
  CoreNLP::MontrealModel ***v37;
  CoreNLP::MontrealModel ***v38;
  uint64_t v39;

  MEMORY[0x19401E994](v39, 0x1020C402EB40689);
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a28 < 0)
    operator delete(a23);
  nlp::CFScopedPtr<__CFURL const*>::reset(&a29, 0);
  std::unique_ptr<CoreNLP::PosTagger>::reset[abi:ne180100](v37, 0);
  std::unique_ptr<CoreNLP::Parser>::reset[abi:ne180100](v38, 0);
  nlp::CFScopedPtr<void *>::reset(v36, 0);
  nlp::CFScopedPtr<void *>::reset(v35, 0);
  _Unwind_Resume(a1);
}

void CoreNLP::DepParserManager::getParse(CoreNLP **this@<X0>, __CFString *a2@<X1>, std::string *a3@<X8>)
{
  void *v5;
  void *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  CoreNLP *v13;
  CFIndex v14;
  CFMutableDictionaryRef Mutable;
  const void *v16;
  uint64_t v17;
  const __CFArray *Value;
  const __CFArray *ValueAtIndex;
  int Count;
  CFIndex i;
  int v22;
  int v23;
  int v24;
  int v25;
  char *v26;
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  uint64_t *v48;
  std::vector<std::string>::value_type __x;
  std::vector<std::string> v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  _BYTE *v56;
  void *v57;
  _BYTE *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  _BYTE *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *v67;
  _BYTE *v68;
  void *__p;
  char *v70;
  char *v71;
  int v72;
  void *v73;
  void *v74;
  uint64_t v75;
  void *v76;
  CFMutableDictionaryRef v77;
  _QWORD v78[7];
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  __n128 (*v82)(__n128 *, __n128 *);
  void (*v83)(uint64_t);
  const char *v84;
  char *v85;
  char *v86;
  char *v87;

  NLTaggerSetString(this[1], a2);
  v5 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v6 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v79 = 0;
  v80 = &v79;
  v82 = __Block_byref_object_copy__3;
  v83 = __Block_byref_object_dispose__3;
  v81 = 0x4812000000;
  v84 = "";
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>((uint64_t)&v87, 1uLL);
  v8 = v85;
  v9 = v86;
  v11 = &v7[16 * v10];
  *(_OWORD *)v7 = xmmword_191D40610;
  v12 = v7 + 16;
  if (v9 != v8)
  {
    do
    {
      *((_OWORD *)v7 - 1) = *((_OWORD *)v9 - 1);
      v7 -= 16;
      v9 -= 16;
    }
    while (v9 != v8);
    v8 = v85;
  }
  v85 = v7;
  v86 = v12;
  v87 = v11;
  if (v8)
    operator delete(v8);
  v86 = v12;
  v13 = this[1];
  v14 = -[__CFString length](a2, "length");
  v78[0] = MEMORY[0x1E0C809B0];
  v78[1] = 3221225472;
  v78[2] = ___ZN7CoreNLP16DepParserManager8getParseEPK10__CFString_block_invoke;
  v78[3] = &unk_1E2DF4E30;
  v78[4] = v6;
  v78[5] = &v79;
  v78[6] = a2;
  NLTaggerEnumerateTokens(v13, 0, 0, v14, (CoreNLP::NLAttributedToken *)4, (uint64_t)v78);
  objc_msgSend(v5, "addObject:", v6);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v77 = Mutable;
  v76 = (void *)NLStringEmbeddingCopyDataForTokenizedBatch(*this, v5, 0, (uint64_t)Mutable, 0);
  v16 = (const void *)objc_msgSend(v76, "bytes");
  v17 = objc_msgSend(v76, "length");
  v73 = 0;
  v74 = 0;
  v75 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(&v73, v16, (uint64_t)v16 + (v17 & 0xFFFFFFFFFFFFFFFCLL), v17 >> 2);
  Value = (const __CFArray *)CFDictionaryGetValue(Mutable, kNLStringEmbeddingTokenizedBatchComponentRanges[0]);
  ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(Value, 0);
  Count = CFArrayGetCount(ValueAtIndex);
  v72 = Count;
  __p = 0;
  v70 = 0;
  v71 = 0;
  if (Count < 1)
  {
    v27 = 0;
    v37 = 0;
  }
  else
  {
    for (i = 0; i < Count; ++i)
    {
      v22 = objc_msgSend((id)CFArrayGetValueAtIndex(ValueAtIndex, i), "rangeValue");
      v24 = v22;
      v25 = v23;
      v26 = v70;
      if (v70 >= v71)
      {
        v28 = (char *)__p;
        v29 = (v70 - (_BYTE *)__p) >> 3;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 61)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v31 = v71 - (_BYTE *)__p;
        if ((v71 - (_BYTE *)__p) >> 2 > v30)
          v30 = v31 >> 2;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
          v32 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
        {
          v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v71, v32);
          v28 = (char *)__p;
          v26 = v70;
        }
        else
        {
          v33 = 0;
        }
        v34 = (uint64_t *)&v33[8 * v29];
        *(_DWORD *)v34 = v24;
        *((_DWORD *)v34 + 1) = v25;
        v35 = v34;
        if (v26 != v28)
        {
          do
          {
            v36 = *((_QWORD *)v26 - 1);
            v26 -= 8;
            *--v35 = v36;
          }
          while (v26 != v28);
          v28 = (char *)__p;
        }
        v27 = v34 + 1;
        __p = v35;
        v70 = (char *)(v34 + 1);
        v71 = &v33[8 * v32];
        if (v28)
        {
          operator delete(v28);
          Count = v72;
        }
      }
      else
      {
        *(_DWORD *)v70 = v22;
        *((_DWORD *)v26 + 1) = v23;
        v27 = (uint64_t *)(v26 + 8);
      }
      v70 = (char *)v27;
    }
    v37 = (uint64_t *)__p;
  }
  v38 = (uint64_t)v73;
  v65 = 0;
  v66 = 0;
  v64 = 0;
  std::vector<std::tuple<int,int>>::__init_with_size[abi:ne180100]<std::tuple<int,int>*,std::tuple<int,int>*>((char *)&v64, v37, v27, v27 - v37);
  CoreNLP::DepParserManager::fillWordEmbeddingsAveragedTokenEmbeddings((uint64_t)this, v38, (uint64_t *)&v64, (unsigned int *)&v72, (uint64_t *)&v67);
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  v39 = (uint64_t)this[4];
  v60 = 0;
  v61 = 0;
  v59 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v59, v67, (uint64_t)v68, (v68 - (_BYTE *)v67) >> 2);
  v40 = v72;
  CoreNLP::PosTagger::GetPosTags(v39, &v59, v72, (char **)&v62);
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
  v41 = (uint64_t)this[3];
  v53 = 0;
  v54 = 0;
  v52 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v52, v67, (uint64_t)v68, (v68 - (_BYTE *)v67) >> 2);
  CoreNLP::Parser::getParseTree(v41, (uint64_t *)&v52, v40, &v55);
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v42 = (v40 + 1);
  std::vector<std::string>::vector(&v51, (int)v42, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__x.__r_.__value_.__l.__data_);
  MEMORY[0x19401E64C](v51.__begin_, "ROOT");
  if (v40 >= 1)
  {
    v43 = 0;
    v44 = v42 - 1;
    v45 = 47;
    do
    {
      applesauce::CF::convert_to<std::string,0>((const __CFString *)objc_msgSend(v6, "objectAtIndex:", v43), (uint64_t)&__x);
      v46 = (char *)v51.__begin_ + v45 - 23;
      if (v51.__begin_->__r_.__value_.__s.__data_[v45] < 0)
        operator delete(*(void **)v46);
      v47 = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
      *((_QWORD *)v46 + 2) = *((_QWORD *)&__x.__r_.__value_.__l + 2);
      *(_OWORD *)v46 = v47;
      ++v43;
      v45 += 24;
    }
    while (v44 != v43);
  }
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a3, (__int128 *)v51.__begin_, (__int128 *)v51.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v51.__end_ - (char *)v51.__begin_) >> 3));
  a3[1].__r_.__value_.__r.__words[0] = 0;
  v48 = v80;
  a3[1].__r_.__value_.__l.__size_ = 0;
  a3[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(a3[1].__r_.__value_.__r.__words, (const void *)v48[6], v48[7], (v48[7] - v48[6]) >> 4);
  a3[2].__r_.__value_.__r.__words[0] = 0;
  a3[2].__r_.__value_.__l.__size_ = 0;
  a3[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<NLPosTag>::__init_with_size[abi:ne180100]<NLPosTag*,NLPosTag*>(a3[2].__r_.__value_.__r.__words, v62, (uint64_t)v63, (v63 - (_BYTE *)v62) >> 2);
  a3[3].__r_.__value_.__r.__words[0] = 0;
  a3[3].__r_.__value_.__l.__size_ = 0;
  a3[3].__r_.__value_.__r.__words[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a3[3].__r_.__value_.__r.__words, v57, (uint64_t)v58, (v58 - (_BYTE *)v57) >> 2);
  a3[4].__r_.__value_.__r.__words[0] = 0;
  a3[4].__r_.__value_.__l.__size_ = 0;
  a3[4].__r_.__value_.__r.__words[2] = 0;
  std::vector<NLDepLabel>::__init_with_size[abi:ne180100]<NLDepLabel*,NLDepLabel*>(a3[4].__r_.__value_.__r.__words, v55, (uint64_t)v56, (v56 - (_BYTE *)v55) >> 2);
  __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__x);
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  if (__p)
  {
    v70 = (char *)__p;
    operator delete(__p);
  }
  if (v73)
  {
    v74 = v73;
    operator delete(v73);
  }
  if (v76)
    CFRelease(v76);
  if (v77)
    CFRelease(v77);
  _Block_object_dispose(&v79, 8);
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
}

void sub_191CD8120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  void **v43;
  void **v44;
  void **v45;
  char *v46;
  uint64_t v47;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;

  v49 = *v45;
  if (*v45)
  {
    *((_QWORD *)v46 + 10) = v49;
    operator delete(v49);
  }
  v50 = *v44;
  if (*v44)
  {
    *((_QWORD *)v46 + 7) = v50;
    operator delete(v50);
  }
  v51 = *v43;
  if (*v43)
  {
    *((_QWORD *)v46 + 4) = v51;
    operator delete(v51);
  }
  a12 = v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a12 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  CoreNLP::Dependency::~Dependency((CoreNLP::Dependency *)&a24);
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a39)
  {
    a40 = (uint64_t)a39;
    operator delete(a39);
  }
  if (a42)
  {
    a43 = (uint64_t)a42;
    operator delete(a42);
  }
  v52 = *(void **)(v47 - 256);
  if (v52)
  {
    *(_QWORD *)(v47 - 248) = v52;
    operator delete(v52);
  }
  nlp::CFScopedPtr<__CFData const*>::reset((const void **)(v47 - 232), 0);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)(v47 - 224), 0);
  _Block_object_dispose((const void *)(v47 - 160), 8);
  v53 = *(void **)(v47 - 112);
  if (v53)
  {
    *(_QWORD *)(v47 - 104) = v53;
    operator delete(v53);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN7CoreNLP16DepParserManager8getParseEPK10__CFString_block_invoke(uint64_t a1, CFRange *a2)
{
  CFStringRef v4;
  _QWORD *v5;
  CFIndex length;
  CFIndex location;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  CFIndex *v17;
  char *v18;

  v4 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFStringRef *)(a1 + 48), *a2);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
  v5 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
  location = a2->location;
  length = a2->length;
  v8 = (char *)v5[7];
  v9 = v5[8];
  if ((unint64_t)v8 >= v9)
  {
    v11 = (char *)v5[6];
    v12 = (v8 - v11) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v14 = v9 - (_QWORD)v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>((uint64_t)(v5 + 8), v15);
      v11 = (char *)v5[6];
      v8 = (char *)v5[7];
    }
    else
    {
      v16 = 0;
    }
    v17 = (CFIndex *)&v16[16 * v12];
    v18 = &v16[16 * v15];
    *v17 = location;
    v17[1] = length;
    v10 = v17 + 2;
    if (v8 != v11)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v8 - 1);
        v17 -= 2;
        v8 -= 16;
      }
      while (v8 != v11);
      v11 = (char *)v5[6];
    }
    v5[6] = v17;
    v5[7] = v10;
    v5[8] = v18;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *(_QWORD *)v8 = location;
    *((_QWORD *)v8 + 1) = length;
    v10 = v8 + 16;
  }
  v5[7] = v10;
  if (v4)
    CFRelease(v4);
}

void sub_191CD8460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void CoreNLP::DepParserManager::fillWordEmbeddingsAveragedTokenEmbeddings(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, unsigned int *a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  float *v24;
  float v25;
  int v26;

  v10 = *(int *)(a1 + 16) + *(int *)(a1 + 16) * (uint64_t)(int)*a4;
  v26 = 0;
  std::vector<float>::vector(a5, v10, &v26);
  v11 = *a4;
  if ((int)v11 >= 1)
  {
    v12 = 0;
    v13 = *a3;
    v14 = *a5;
    while (1)
    {
      v15 = (int *)(v13 + 8 * v12);
      v16 = v15[1];
      if (!(_DWORD)v16)
        break;
      ++v12;
      if ((int)v16 >= 1)
      {
        v17 = *(int *)(a1 + 16);
        v18 = (float *)(v14 + 4 * (int)v17 * (int)v12);
        v19 = *v15;
        v20 = v19 + v16;
        v21 = 4 * v17;
        do
        {
          if ((_DWORD)v17)
          {
            v22 = (float *)(a2 + 4 * v19 * v17);
            v23 = 4 * v17;
            v24 = (float *)(v14 + 4 * (int)v17 * (int)v12);
            do
            {
              v25 = *v22++;
              *v24 = *v24 + v25;
              ++v24;
              v23 -= 4;
            }
            while (v23);
          }
          ++v19;
        }
        while (v19 < v20);
        if ((int)v16 >= 2 && (_DWORD)v17)
        {
          do
          {
            *v18 = *v18 / (float)(int)v16;
            ++v18;
            v21 -= 4;
          }
          while (v21);
        }
      }
      if (v12 == v11)
        return;
    }
    *a4 = v12;
    std::vector<float>::resize((uint64_t)a5, *(int *)(a1 + 16) + *(int *)(a1 + 16) * (uint64_t)(int)v12);
  }
}

void sub_191CD85A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CoreNLP::DepParserManager::getNounPhrases(const CoreNLP::ParseStructure *a1@<X1>, uint64_t *a2@<X8>)
{
  CoreNLP::chunkNounPhrases(a1, a2);
}

CoreNLP::MontrealModel ***std::unique_ptr<CoreNLP::Parser>::reset[abi:ne180100](CoreNLP::MontrealModel ***result, CoreNLP::MontrealModel **a2)
{
  CoreNLP::MontrealModel **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100](v2, 0);
    JUMPOUT(0x19401E994);
  }
  return result;
}

CoreNLP::MontrealModel ***std::unique_ptr<CoreNLP::PosTagger>::reset[abi:ne180100](CoreNLP::MontrealModel ***result, CoreNLP::MontrealModel **a2)
{
  CoreNLP::MontrealModel **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100](v2, 0);
    JUMPOUT(0x19401E994);
  }
  return result;
}

void nlp::CFScopedPtr<__CFURL const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

char *std::vector<std::tuple<int,int>>::__init_with_size[abi:ne180100]<std::tuple<int,int>*,std::tuple<int,int>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_191CD86F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<CFRange>::__init_with_size[abi:ne180100]<CFRange*,CFRange*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<float,unsigned long>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_191CD8768(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<NLPosTag>::__init_with_size[abi:ne180100]<NLPosTag*,NLPosTag*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_191CD87E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *CoreNLP::getUTF8StringFromCFString@<X0>(const __CFString *this@<X0>, _QWORD *a2@<X8>)
{
  CFIndex Length;
  CFIndex v6;
  char *v7;

  if (this)
  {
    Length = CFStringGetLength(this);
    v6 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    v7 = (char *)operator new[]();
    CFStringGetCString(this, v7, v6, 0x8000100u);
    std::string::basic_string[abi:ne180100]<0>(a2, v7);
    JUMPOUT(0x19401E970);
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

void sub_191CD88AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E970](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void CoreNLP::getUTF8StringFromCFStringInRange(CFStringRef str@<X0>, const __CFString *a2@<X1>, CFRange a3@<0:X2, 8:X3>, uint64_t a4@<X8>)
{
  const __CFString *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[15];
  char v11;
  _QWORD v12[3];
  CFRange v13;

  v12[2] = *MEMORY[0x1E0C80C00];
  if (str)
  {
    v13.length = a3.location;
    v13.location = (CFIndex)a2;
    v5 = CFStringCreateWithSubstring(0, str, v13);
    CoreNLP::getUTF8StringFromCFString(v5, &v9);
    v6 = v9;
    v12[0] = *(_QWORD *)v10;
    *(_QWORD *)((char *)v12 + 7) = *(_QWORD *)&v10[7];
    v7 = v11;
    if (v5)
      CFRelease(v5);
    v8 = v12[0];
    *(_QWORD *)a4 = v6;
    *(_QWORD *)(a4 + 8) = v8;
    *(_QWORD *)(a4 + 15) = *(_QWORD *)((char *)v12 + 7);
    *(_BYTE *)(a4 + 23) = v7;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a4, "");
  }
}

void sub_191CD89B8(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;

  if (v2 < 0)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void CoreNLP::getFileSystemRepresentationFromCFURL(CoreNLP *this@<X0>, _QWORD *a2@<X8>)
{
  UInt8 *v5;

  v5 = (UInt8 *)operator new[]();
  CFURLGetFileSystemRepresentation(this, 1u, v5, 1024);
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)v5);
  JUMPOUT(0x19401E970);
}

void sub_191CD8A50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E970](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void CoreNLP::getPathRelativeToPlatformRoot(CoreNLP *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  void *__p[2];
  uint64_t v6;

  if (this)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)this);
    v4 = (void *)HIBYTE(v6);
    if (v6 < 0)
      v4 = __p[1];
    if (v4)
    {
      *(_OWORD *)a2 = *(_OWORD *)__p;
      a2[2] = v6;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(a2, "");
      if (SHIBYTE(v6) < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

void sub_191CD8B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *CoreNLP::convertLanguageIDToCode(int a1)
{
  uint64_t *v1;
  int v3;

  v3 = a1;
  if (CoreNLP::convertLanguageIDToCode(NLLanguageID)::onceToken != -1)
    dispatch_once(&CoreNLP::convertLanguageIDToCode(NLLanguageID)::onceToken, &__block_literal_global_46);
  v1 = std::__hash_table<std::__hash_value_type<NLLanguageID,char const*>,std::__unordered_map_hasher<NLLanguageID,std::__hash_value_type<NLLanguageID,char const*>,std::hash<int>,std::equal_to<NLLanguageID>,true>,std::__unordered_map_equal<NLLanguageID,std::__hash_value_type<NLLanguageID,char const*>,std::equal_to<NLLanguageID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLLanguageID,char const*>>>::find<NLLanguageID>((_QWORD *)CoreNLP::convertLanguageIDToCode(NLLanguageID)::langIdToCode, &v3);
  if (v1)
    return (const char *)v1[3];
  else
    return "--";
}

uint64_t ___ZN7CoreNLP23convertLanguageIDToCodeE12NLLanguageID_block_invoke()
{
  uint64_t v0;
  uint64_t result;
  int __dst[136];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  memcpy(__dst, &unk_1E2DF4E90, sizeof(__dst));
  result = std::unordered_map<NLLanguageID,char const*>::unordered_map(v0, __dst, 34);
  CoreNLP::convertLanguageIDToCode(NLLanguageID)::langIdToCode = v0;
  return result;
}

void sub_191CD8C30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10A0C408EF24B1CLL);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::paddingOffset(CoreNLP *this, unsigned int *a2)
{
  uint64_t v2;

  v2 = -*(_DWORD *)this & 7;
  *(_DWORD *)this += v2;
  return v2;
}

uint64_t CoreNLP::getUNormalizer2(int a1)
{
  uint64_t *v1;

  if (a1 == 5)
  {
    if (CoreNLP::getNFKCNormalizer(void)::onceToken != -1)
      dispatch_once(&CoreNLP::getNFKCNormalizer(void)::onceToken, &__block_literal_global_53);
    v1 = &CoreNLP::getNFKCNormalizer(void)::norm2;
    return *v1;
  }
  if (a1 == 3)
  {
    if (CoreNLP::getNFKDNormalizer(void)::onceToken != -1)
      dispatch_once(&CoreNLP::getNFKDNormalizer(void)::onceToken, &__block_literal_global_51);
    v1 = &CoreNLP::getNFKDNormalizer(void)::norm2;
    return *v1;
  }
  return 0;
}

uint64_t ___ZN7CoreNLPL17getNFKDNormalizerEv_block_invoke()
{
  uint64_t result;

  result = unorm2_getNFKDInstance();
  CoreNLP::getNFKDNormalizer(void)::norm2 = result;
  return result;
}

uint64_t ___ZN7CoreNLPL17getNFKCNormalizerEv_block_invoke()
{
  uint64_t result;

  result = unorm2_getNFKCInstance();
  CoreNLP::getNFKCNormalizer(void)::norm2 = result;
  return result;
}

uint64_t std::map<std::string,NLLanguageID>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,int> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_191CD8DD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<NLLanguageID,char const*>::unordered_map(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 16 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<NLLanguageID,char const*>,std::__unordered_map_hasher<NLLanguageID,std::__hash_value_type<NLLanguageID,char const*>,std::hash<int>,std::equal_to<NLLanguageID>,true>,std::__unordered_map_equal<NLLanguageID,std::__hash_value_type<NLLanguageID,char const*>,std::equal_to<NLLanguageID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLLanguageID,char const*>>>::__emplace_unique_key_args<NLLanguageID,std::pair<NLLanguageID const,char const*> const&>(a1, a2, a2);
      a2 += 4;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_191CD8E4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<NLLanguageID,char const*>,std::__unordered_map_hasher<NLLanguageID,std::__hash_value_type<NLLanguageID,char const*>,std::hash<int>,std::equal_to<NLLanguageID>,true>,std::__unordered_map_equal<NLLanguageID,std::__hash_value_type<NLLanguageID,char const*>,std::equal_to<NLLanguageID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLLanguageID,char const*>>>::__emplace_unique_key_args<NLLanguageID,std::pair<NLLanguageID const,char const*> const&>(uint64_t a1, int *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_OWORD *)v10 + 1) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<long,std::hash<long>,std::equal_to<long>,std::allocator<long>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_191CD9064(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<NLLanguageID,char const*>,std::__unordered_map_hasher<NLLanguageID,std::__hash_value_type<NLLanguageID,char const*>,std::hash<int>,std::equal_to<NLLanguageID>,true>,std::__unordered_map_equal<NLLanguageID,std::__hash_value_type<NLLanguageID,char const*>,std::equal_to<NLLanguageID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLLanguageID,char const*>>>::find<NLLanguageID>(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

void CoreNLP::EmotionModel::CreateModel(int a1@<W0>, _QWORD *a2@<X8>)
{
  const __CFLocale *v4;
  id v5;
  _DWORD *v6;
  NSObject *v7;
  void *__p[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = CoreNLP::copyLocaleForLanguageID(a1);
  v5 = +[NLResourceWrapper copyAssetURLWithLocale:contentType:contentName:](NLResourceWrapper, "copyAssetURLWithLocale:contentType:contentName:", v4, CFSTR("Emotion"), CFSTR("emotion.dat"));
  if (v5)
  {
    v6 = (_DWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v5, "fileSystemRepresentation"));
    CoreNLP::EmotionModel::EmotionModel((uint64_t)v6, (uint64_t)__p, v4);
    *a2 = v6;
    if (v9 < 0)
      operator delete(__p[0]);
    v6[16] = 109;
    v6[2] = 12;
    v6[3] = a1;

    if (!v4)
      return;
LABEL_11:
    CFRelease(v4);
    return;
  }
  if (CoreNLP::logger(void)::sOnce != -1)
    dispatch_once(&CoreNLP::logger(void)::sOnce, &__block_literal_global_13);
  v7 = CoreNLP::logger(void)::sLogger;
  if (os_log_type_enabled((os_log_t)CoreNLP::logger(void)::sLogger, OS_LOG_TYPE_ERROR))
    CoreNLP::EmotionModel::CreateModel(objc_msgSend((id)-[__CFLocale localeIdentifier](v4, "localeIdentifier"), "UTF8String"), (uint64_t)__p, v7);
  *a2 = 0;
  if (v4)
    goto LABEL_11;
}

void sub_191CD929C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::EmotionModel::EmotionModel(uint64_t a1, uint64_t a2, const __CFLocale *a3)
{
  uint64_t v6;
  const void *v7;
  _QWORD v9[2];
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)CoreNLP::AbstractModel::AbstractModel(a1) = &off_1E2DF1C90;
  v6 = operator new();
  CoreNLP::MontrealModel::MontrealModel(v6, a2);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 80) = NLTokenizerCreate(0, 0, a3);
  v9[0] = kNLStringEmbeddingModelLocale[0];
  v9[1] = kNLStringEmbeddingModelType[0];
  v10[0] = a3;
  v10[1] = kNLStringEmbeddingModelTypeContextualWordEmbedding[0];
  v7 = (const void *)NLStringEmbeddingCreateWithOptions((const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, v9, 2));
  nlp::CFScopedPtr<void *>::reset((const void **)(a1 + 88), v7);
  return a1;
}

void sub_191CD943C(_Unwind_Exception *a1)
{
  CoreNLP::AbstractModel *v1;
  CoreNLP::MontrealModel **v2;
  const void **v3;

  nlp::CFScopedPtr<void *>::reset(v3, 0);
  std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100](v2, 0);
  CoreNLP::AbstractModel::~AbstractModel(v1);
  _Unwind_Resume(a1);
}

void CoreNLP::EmotionModel::~EmotionModel(CoreNLP::EmotionModel *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E2DF1C90;
  v2 = (_QWORD *)*((_QWORD *)this + 10);
  if (v2)
    NLTokenizerRelease(v2);
  nlp::CFScopedPtr<void *>::reset((const void **)this + 11, 0);
  std::unique_ptr<CoreNLP::MontrealModel>::reset[abi:ne180100]((CoreNLP::MontrealModel **)this + 9, 0);
  CoreNLP::AbstractModel::~AbstractModel(this);
}

{
  CoreNLP::EmotionModel::~EmotionModel(this);
  JUMPOUT(0x19401E994);
}

uint64_t CoreNLP::EmotionModel::train()
{
  return 0;
}

void CoreNLP::EmotionModel::vinference(uint64_t a1@<X0>, uint64_t a2@<X1>, CoreNLP *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t **v6;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  void *v14;
  unint64_t Dimension;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  float *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  char *v26;
  __int128 *v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  __int128 *v34;
  __int128 *v35;
  __int128 *v36;
  __int128 *v37;
  NSObject *v38;
  double v39;
  NSObject *v40;
  __int128 *v41;
  __int128 *v42;
  char *v43;
  CFLocaleRef v44;
  NSObject *v45;
  char *v46;
  char *v47;
  void *__p;
  uint64_t *v49;
  _DWORD v50[4];
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  _QWORD v55[6];
  void *v56;
  char *v57;
  _QWORD v58[2];
  char v59;
  uint8_t buf[24];
  __int128 *v61;
  void *v62[3];
  id v63;
  uint8_t v64[16];
  uint8_t v65[8];
  id *v66;
  uint64_t v67;
  __int128 *v68[2];
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v56 = 0;
  v57 = 0;
  v58[0] = 0;
  if (*(_QWORD *)(a1 + 88))
  {
    v6 = *(uint64_t ***)a2;
    if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2 || (v8 = *v6, v6[1] == *v6))
    {
      if (CoreNLP::logger(void)::sOnce != -1)
        dispatch_once(&CoreNLP::logger(void)::sOnce, &__block_literal_global_13);
      v40 = CoreNLP::logger(void)::sLogger;
      if (os_log_type_enabled((os_log_t)CoreNLP::logger(void)::sLogger, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v65 = 0;
        _os_log_error_impl(&dword_191C5D000, v40, OS_LOG_TYPE_ERROR, "Empty input", v65, 2u);
        v42 = (__int128 *)v56;
        v41 = (__int128 *)v57;
      }
      else
      {
        v41 = 0;
        v42 = 0;
      }
      *(_QWORD *)v65 = 0;
      v66 = 0;
      v67 = 0;
      std::vector<std::pair<int,double>>::__init_with_size[abi:ne180100]<std::pair<int,double>*,std::pair<int,double>*>((char *)v65, v42, v41, v41 - v42);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v53 = a4;
      LOBYTE(v54) = 0;
      v43 = (char *)operator new(0x18uLL);
      *a4 = v43;
      a4[1] = v43;
      a4[2] = v43 + 24;
      a4[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,double>>>,std::vector<std::pair<int,double>> const*,std::vector<std::pair<int,double>> const*,std::vector<std::pair<int,double>>*>((uint64_t)(a4 + 2), (__int128 **)v65, v68, (uint64_t)v43);
      if (*(_QWORD *)v65)
      {
        v66 = *(id **)v65;
        operator delete(*(void **)v65);
      }
    }
    else
    {
      if (*((char *)v8 + 23) < 0)
        v8 = (uint64_t *)*v8;
      v9 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8);
      *(_QWORD *)v65 = 0;
      v66 = (id *)v65;
      v67 = 0x3052000000;
      v68[0] = (__int128 *)__Block_byref_object_copy__4;
      v68[1] = (__int128 *)__Block_byref_object_dispose__4;
      v69 = 0;
      v69 = objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 50);
      v10 = *(_QWORD *)(a1 + 80);
      objc_msgSend(v9, "length");
      NLTokenizerSetString(v10);
      v11 = *(_QWORD *)(a1 + 80);
      v55[0] = MEMORY[0x1E0C809B0];
      v55[1] = 3221225472;
      v55[2] = ___ZN7CoreNLP12EmotionModel10vinferenceERKNSt3__16vectorINS2_INS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEENS6_ISA_EEEEm_block_invoke;
      v55[3] = &unk_1E2DF5138;
      v55[4] = v9;
      v55[5] = v65;
      NLTokenizerEnumerateTokens(v11, (uint64_t)v55);
      if (CoreNLP::logger(void)::sOnce != -1)
        dispatch_once(&CoreNLP::logger(void)::sOnce, &__block_literal_global_13);
      v12 = CoreNLP::logger(void)::sLogger;
      if (os_log_type_enabled((os_log_t)CoreNLP::logger(void)::sLogger, OS_LOG_TYPE_DEBUG))
        CoreNLP::EmotionModel::vinference(objc_msgSend((id)objc_msgSend(v66[5], "componentsJoinedByString:", CFSTR(" ")), "UTF8String"), v64, v12);
      v63 = v66[5];
      v13 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v63, 1);
      Dimension = (unint64_t)NLStringEmbeddingGetDimension(*(CoreNLP **)(a1 + 88), v14);
      LODWORD(v62[0]) = 0;
      std::vector<float>::vector(&v53, 50 * Dimension, v62);
      LODWORD(__p) = 0;
      std::vector<float>::vector(v62, Dimension, &__p);
      NLStringEmbeddingFillWordVectors(*(CoreNLP **)(a1 + 88), v13, 1, 50, (char *)v53, (uint64_t)v62[0], (uint64_t)v62[0]);
      v16 = *(_QWORD *)(a1 + 72);
      v52 = 0x100000001;
      v50[2] = 1;
      v18 = NLStringEmbeddingGetDimension(*(CoreNLP **)(a1 + 88), v17);
      v51 = 0x3200000001;
      v50[3] = v18;
      v50[1] = 5;
      LOWORD(v50[0]) = 256;
      CoreNLP::MontrealModel::setInputTensor(v16, v50, (uint64_t)v53, 0);
      CoreNLP::MontrealModel::predict(*(CoreNLP::MontrealModel **)(a1 + 72));
      v19 = (float *)CoreNLP::MontrealModel::output(*(CoreNLP::MontrealModel **)(a1 + 72), 0);
      v20 = CoreNLP::MontrealModel::outputSize(*(CoreNLP::MontrealModel **)(a1 + 72));
      CoreNLP::getTopNIndices(a3, v20, v19, (uint64_t **)&__p);
      v22 = (uint64_t *)__p;
      v21 = v49;
      if (__p != v49)
      {
        do
        {
          v23 = *v22;
          v24 = *v22 + 237;
          v25 = v19[*v22];
          v26 = v57;
          if ((unint64_t)v57 >= v58[0])
          {
            v28 = (v57 - (_BYTE *)v56) >> 4;
            v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 60)
              std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
            v30 = v58[0] - (_QWORD)v56;
            if ((uint64_t)(v58[0] - (_QWORD)v56) >> 3 > v29)
              v29 = v30 >> 3;
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
              v31 = 0xFFFFFFFFFFFFFFFLL;
            else
              v31 = v29;
            v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>((uint64_t)v58, v31);
            v34 = (__int128 *)&v32[16 * v28];
            *(_DWORD *)v34 = v24;
            *((double *)v34 + 1) = v25;
            v36 = (__int128 *)v56;
            v35 = (__int128 *)v57;
            v37 = v34;
            if (v57 != v56)
            {
              do
                *--v37 = *--v35;
              while (v35 != v36);
              v35 = (__int128 *)v56;
            }
            v27 = v34 + 1;
            v56 = v37;
            v57 = (char *)(v34 + 1);
            v58[0] = &v32[16 * v33];
            if (v35)
              operator delete(v35);
          }
          else
          {
            *(_DWORD *)v57 = v24;
            *((double *)v26 + 1) = v25;
            v27 = (__int128 *)(v26 + 16);
          }
          v57 = (char *)v27;
          if (CoreNLP::logger(void)::sOnce != -1)
            dispatch_once(&CoreNLP::logger(void)::sOnce, &__block_literal_global_13);
          v38 = CoreNLP::logger(void)::sLogger;
          if (os_log_type_enabled((os_log_t)CoreNLP::logger(void)::sLogger, OS_LOG_TYPE_DEBUG))
          {
            v39 = v19[v23];
            *(_DWORD *)buf = 134218240;
            *(_QWORD *)&buf[4] = v23;
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = v39;
            _os_log_debug_impl(&dword_191C5D000, v38, OS_LOG_TYPE_DEBUG, "Model assigned %lu label with %.2f score", buf, 0x16u);
          }
          ++v22;
        }
        while (v22 != v21);
      }
      CoreNLP::MontrealModel::clear(*(const void ***)(a1 + 72));
      memset(buf, 0, sizeof(buf));
      std::vector<std::pair<int,double>>::__init_with_size[abi:ne180100]<std::pair<int,double>*,std::pair<int,double>*>((char *)buf, (__int128 *)v56, (__int128 *)v57, (v57 - (_BYTE *)v56) >> 4);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v58[1] = a4;
      v59 = 0;
      v47 = (char *)operator new(0x18uLL);
      *a4 = v47;
      a4[1] = v47;
      a4[2] = v47 + 24;
      a4[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,double>>>,std::vector<std::pair<int,double>> const*,std::vector<std::pair<int,double>> const*,std::vector<std::pair<int,double>>*>((uint64_t)(a4 + 2), (__int128 **)buf, &v61, (uint64_t)v47);
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      if (__p)
      {
        v49 = (uint64_t *)__p;
        operator delete(__p);
      }
      if (v62[0])
      {
        v62[1] = v62[0];
        operator delete(v62[0]);
      }
      if (v53)
      {
        v54 = v53;
        operator delete(v53);
      }
      _Block_object_dispose(v65, 8);
    }
  }
  else
  {
    v44 = CoreNLP::copyLocaleForLanguageID(*(_DWORD *)(a1 + 12));
    __p = v44;
    if (CoreNLP::logger(void)::sOnce != -1)
      dispatch_once(&CoreNLP::logger(void)::sOnce, &__block_literal_global_13);
    v45 = CoreNLP::logger(void)::sLogger;
    if (os_log_type_enabled((os_log_t)CoreNLP::logger(void)::sLogger, OS_LOG_TYPE_ERROR))
      CoreNLP::EmotionModel::vinference(objc_msgSend((id)-[__CFLocale localeIdentifier](v44, "localeIdentifier"), "UTF8String"), (uint64_t)v62, v45);
    *(_QWORD *)v65 = 0;
    v66 = 0;
    v67 = 0;
    std::vector<std::pair<int,double>>::__init_with_size[abi:ne180100]<std::pair<int,double>*,std::pair<int,double>*>((char *)v65, (__int128 *)v56, (__int128 *)v57, (v57 - (_BYTE *)v56) >> 4);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v53 = a4;
    LOBYTE(v54) = 0;
    v46 = (char *)operator new(0x18uLL);
    *a4 = v46;
    a4[1] = v46;
    a4[2] = v46 + 24;
    a4[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::pair<int,double>>>,std::vector<std::pair<int,double>> const*,std::vector<std::pair<int,double>> const*,std::vector<std::pair<int,double>>*>((uint64_t)(a4 + 2), (__int128 **)v65, v68, (uint64_t)v46);
    if (*(_QWORD *)v65)
    {
      v66 = *(id **)v65;
      operator delete(*(void **)v65);
    }
    if (v44)
      CFRelease(v44);
  }
  if (v56)
  {
    v57 = (char *)v56;
    operator delete(v56);
  }
}

void sub_191CD9C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

unint64_t ___ZN7CoreNLP12EmotionModel10vinferenceERKNSt3__16vectorINS2_INS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEENS6_ISA_EEEEm_block_invoke(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  unint64_t result;

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObject:", objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", *a2, a2[1]));
  result = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "count");
  if (result >= 0x32)
    *a3 = 1;
  return result;
}

os_log_t ___ZN7CoreNLPL6loggerEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.CoreNLP", "EmotionModel");
  CoreNLP::logger(void)::sLogger = (uint64_t)result;
  return result;
}

void OUTLINED_FUNCTION_0_2(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void CoreNLP::TaggerManagerWrapper::~TaggerManagerWrapper(CoreNLP::TaggerManagerWrapper *this)
{
  *(_QWORD *)this = &unk_1E2DF2958;
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
}

{
  *(_QWORD *)this = &unk_1E2DF2958;
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
  JUMPOUT(0x19401E994);
}

void CoreNLP::L2Normalize(uint64_t a1)
{
  float __C;

  __C = 0.0;
  vDSP_dotpr(*(const float **)a1, 1, *(const float **)a1, 1, &__C, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  if (fabsf(__C) > 0.00000011921)
    vDSP_vsdiv(*(const float **)a1, 1, &__C, *(float **)a1, 1, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
}

_DWORD *CoreNLP::Serializer::getSerialized(int *a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v4 = (_DWORD *)operator new[]();
  v5 = v4;
  v6 = 0;
  *v4 = *(_DWORD *)a2;
  v8[0] = 0x100000000;
  do
  {
    v4[*(int *)((char *)v8 + v6) + 1] = *(_DWORD *)(a2 + 4 + 4 * *(int *)((char *)v8 + v6));
    v6 += 4;
  }
  while (v6 != 8);
  memcpy(v4 + 3, *(const void **)(a2 + 16), 4 * *a1);
  return v5;
}

uint64_t CoreNLP::Serializer::getSerialized(int *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *Serialized;

  v4 = operator new[]();
  v5 = a2[1] - *a2;
  if (v5)
  {
    v6 = 0;
    v7 = v5 >> 3;
    do
    {
      Serialized = CoreNLP::Serializer::getSerialized(a1, *(_QWORD *)(*a2 + 8 * v6));
      memcpy((void *)(v4 + v6 * a1[1]), Serialized, a1[1]);
      MEMORY[0x19401E970](Serialized, 0x1000C8077774924);
      ++v6;
    }
    while (v7 != v6);
  }
  return v4;
}

uint64_t CoreNLP::KDTree::KDTree(uint64_t this)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)(this + 48) = 0u;
  *(_QWORD *)(this + 64) = 0;
  v1 = 999;
  v2 = 1;
  v3 = 23;
  *(_DWORD *)(this + 88) = 999;
  do
  {
    v4 = 1812433253 * (v1 ^ (v1 >> 30));
    v1 = v4 + v2;
    *(_DWORD *)(this + 4 * v3) = v3 + v4 - 22;
    ++v2;
    ++v3;
  }
  while (v3 != 646);
  *(_QWORD *)(this + 2584) = 0;
  return this;
}

void CoreNLP::KDTree::~KDTree(uint64_t **this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t *v6;

  v2 = *this;
  v3 = this[1];
  if (*this != v3)
  {
    do
    {
      v4 = *v2;
      if (*v2)
      {
        v5 = *(void **)(v4 + 16);
        if (v5)
        {
          *(_QWORD *)(v4 + 24) = v5;
          operator delete(v5);
        }
        MEMORY[0x19401E994](v4, 0x1080C4054FDDD16);
      }
      ++v2;
    }
    while (v2 != v3);
    v2 = *this;
    this[1] = *this;
  }
  v6 = this[5];
  if (v6)
  {
    this[6] = v6;
    operator delete(v6);
    v2 = *this;
  }
  if (v2)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

_DWORD *CoreNLP::KDTree::initialize(_DWORD *this, int a2)
{
  this[17] = a2;
  this[18] = a2;
  this[19] = 4 * a2 + 12;
  this[20] = a2 + 2;
  return this;
}

BOOL CoreNLP::KDTree::loadFromBuffer(CoreNLP::KDTree *this, int a2, const char *a3, int a4)
{
  uint64_t v4;
  const char *v5;
  int v6;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t v10;

  v4 = *((unsigned int *)this + 19);
  if ((int)v4 >= 1)
  {
    *((_DWORD *)this + 16) = a2;
    *((_QWORD *)this + 3) = a3;
    *((_DWORD *)this + 8) = a4 / (int)v4;
    *((_DWORD *)this + 9) = v4;
    v5 = &a3[(a4 / (int)v4 - 1) * v4];
    v6 = *(_DWORD *)v5;
    v7 = (uint64_t *)((char *)this + 40);
    std::vector<int>::resize((std::vector<int> *)((char *)this + 40), *(int *)v5);
    v8 = v6 & ~(v6 >> 31);
    if (v8)
    {
      v9 = 0;
      v10 = *v7;
      do
      {
        *(_DWORD *)(v10 + 4 * v9) = *(_DWORD *)&v5[4 * v9 + 4];
        ++v9;
      }
      while (v8 != v9);
    }
  }
  return (int)v4 > 0;
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void CoreNLP::KDTree::buildForest(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v8;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const void *v21;
  void *__p;
  void *v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void **v30;

  std::vector<int>::vector<CoreNLP::NumRange<int>::iterator,0>((uint64_t)&v25, 0x100000000, 0, *(_DWORD *)(a1 + 64) & ~(*(int *)(a1 + 64) >> 31) | 0x100000000, 0);
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v8 = v25;
  v9 = v26;
  v30 = &v27;
  if (v25 != v26)
  {
    v10 = (_QWORD *)(a3 + 8);
    do
    {
      v11 = *v10;
      if (!*v10)
        goto LABEL_13;
      v12 = *v8;
      v13 = v10;
      do
      {
        v14 = *(_DWORD *)(v11 + 28);
        v15 = v14 < v12;
        if (v14 >= v12)
          v16 = (uint64_t *)v11;
        else
          v16 = (uint64_t *)(v11 + 8);
        if (!v15)
          v13 = (_QWORD *)v11;
        v11 = *v16;
      }
      while (*v16);
      if (v13 == v10 || *((_DWORD *)v13 + 7) > v12)
LABEL_13:
        std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100]((uint64_t *)&v30, v8);
      ++v8;
    }
    while (v8 != v9);
    v8 = v25;
  }
  if (v8)
  {
    v26 = v8;
    operator delete(v8);
  }
  v17 = (const void **)(a1 + 40);
  std::vector<int>::resize((std::vector<int> *)(a1 + 40), a2);
  if (a2 <= 0)
  {
    v21 = *v17;
  }
  else
  {
    v18 = 0;
    v19 = 4 * a2;
    do
    {
      v20 = CoreNLP::KDTree::buildTree(a1, (uint64_t)&v27, a4);
      v21 = *v17;
      *(_DWORD *)((char *)*v17 + v18) = v20;
      v18 += 4;
    }
    while (v19 != v18);
  }
  __p = 0;
  v23 = 0;
  v24 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v21, *(_QWORD *)(a1 + 48), (uint64_t)(*(_QWORD *)(a1 + 48) - (_QWORD)v21) >> 2);
  CoreNLP::KDTree::createGroupNode(a1, (uint64_t)&__p);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
}

void sub_191CDA418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::KDTree::buildTree(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  std::vector<int>::pointer end;
  int *begin;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  std::vector<int>::size_type v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int *v24;
  int *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  std::vector<int> v35;
  std::vector<int> v36;
  void *__p;
  void *v38;
  uint64_t v39;
  void *v40;
  int *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;

  v5 = *(const void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = (v6 - (uint64_t)v5) >> 2;
  v9 = 1055531163 * *(_DWORD *)(a1 + 64);
  if (v8 <= (int)((v9 >> 45) + ((unint64_t)v9 >> 63)))
    return 0xFFFFFFFFLL;
  if (v8 <= *(int *)(a1 + 80))
  {
    v40 = 0;
    v41 = 0;
    v42 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v40, v5, v6, v8);
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v24 = (int *)v40;
    v25 = v41;
    v36.__begin_ = (std::vector<int>::pointer)&v43;
    if (v40 != v41)
    {
      v26 = (_QWORD *)(a3 + 8);
      do
      {
        v27 = *v24;
        v28 = *v26;
        if (!*v26)
          goto LABEL_35;
        v29 = v26;
        do
        {
          v30 = *(_DWORD *)(v28 + 28);
          v31 = v30 < v27;
          if (v30 >= v27)
            v32 = (uint64_t *)v28;
          else
            v32 = (uint64_t *)(v28 + 8);
          if (!v31)
            v29 = (_QWORD *)v28;
          v28 = *v32;
        }
        while (*v32);
        if (v29 == v26 || *((_DWORD *)v29 + 7) > v27)
LABEL_35:
          v29 = v26;
        if (v29 != v26)
          v27 = -v27;
        LODWORD(v35.__begin_) = v27;
        std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100]((uint64_t *)&v36, &v35);
        ++v24;
      }
      while (v24 != v25);
    }
    CoreNLP::KDTree::createGroupNode(a1, (uint64_t)&v43);
    if (v43)
    {
      v44 = v43;
      operator delete(v43);
    }
    if (v40)
    {
      v41 = (int *)v40;
      operator delete(v40);
    }
    LODWORD(v33) = *(_DWORD *)(a1 + 32);
    if (!(_DWORD)v33)
      v33 = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
    return (v33 - 1);
  }
  else
  {
    LODWORD(v36.__begin_) = (unint64_t)(v6 - (_QWORD)v5) >> 2;
    LODWORD(v35.__begin_) = *(_DWORD *)(a1 + 68);
    v11 = CoreNLP::KDTree::createNode<int &,int>((void **)a1, &v36, (int *)&v35);
    LODWORD(v12) = *(_DWORD *)(a1 + 32);
    if (!(_DWORD)v12)
      v12 = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
    __p = 0;
    v38 = 0;
    v39 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    CoreNLP::KDTree::calculateHyperplane((_QWORD *)a1, (unint64_t *)&__p, (_QWORD *)v11);
    if (__p)
    {
      v38 = __p;
      operator delete(__p);
    }
    memset(&v36, 0, sizeof(v36));
    memset(&v35, 0, sizeof(v35));
    CoreNLP::KDTree::assignSplits((_QWORD *)a1, &v36, &v35, (int **)a2, v11);
    begin = v36.__begin_;
    end = v36.__end_;
    if (v36.__begin_ == v36.__end_ || v35.__begin_ == v35.__end_)
    {
      v15 = *(void **)(v11 + 16);
      v16 = *(_QWORD *)(v11 + 24) - (_QWORD)v15;
      if (v16 >= 1)
        bzero(v15, 4 * (((unint64_t)v16 >> 2) - ((unint64_t)v16 > 3)) + 4);
      v36.__end_ = begin;
      v35.__end_ = v35.__begin_;
      CoreNLP::KDTree::assignSplits((_QWORD *)a1, &v36, &v35, (int **)a2, v11);
      begin = v36.__begin_;
      end = v36.__end_;
    }
    v17 = end - begin;
    v18 = *(_DWORD *)(a1 + 80);
    v19 = v18;
    if (v17 > v18 && v17 < 3 * *(_DWORD *)(a1 + 64) / 100000 + v18)
    {
      std::vector<int>::resize(&v36, v18);
      v18 = *(_DWORD *)(a1 + 80);
      v19 = v18;
    }
    v20 = v35.__end_ - v35.__begin_;
    if (v20 > v19 && v20 < 3 * *(_DWORD *)(a1 + 64) / 100000 + v18)
      std::vector<int>::resize(&v35, v19);
    v21 = CoreNLP::KDTree::buildTree(a1, &v36, a3);
    v22 = CoreNLP::KDTree::buildTree(a1, &v35, a3);
    *(_DWORD *)(v11 + 4) = v21;
    *(_DWORD *)(v11 + 8) = v22;
    if (v35.__begin_)
    {
      v35.__end_ = v35.__begin_;
      operator delete(v35.__begin_);
    }
    v23 = (v12 - 1);
    if (v36.__begin_)
    {
      v36.__end_ = v36.__begin_;
      operator delete(v36.__begin_);
    }
  }
  return v23;
}

void sub_191CDA7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v20;
  void *v22;

  v22 = *(void **)(v20 - 72);
  if (v22)
  {
    *(_QWORD *)(v20 - 64) = v22;
    operator delete(v22);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::KDTree::createGroupNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  int v8;

  v4 = (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
  v7 = *(_DWORD *)(a1 + 68);
  v8 = v4;
  v5 = CoreNLP::KDTree::createNode<int,int>((void **)a1, &v8, &v7);
  CoreNLP::KDTree::fillGroupNode(a1, v5, (int **)a2);
  return v5;
}

void CoreNLP::KDTree::calculateHyperplane(_QWORD *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float *v17;
  unint64_t v18;
  float *v19;
  uint64_t v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  void *v25;
  float *__B[2];
  uint64_t v27;
  void *__p;
  _BYTE *v29;
  uint64_t v30;
  void *v31;
  _BYTE *v32;
  uint64_t v33;
  float __C;

  v6 = a2[1];
  if ((int)((v6 - *a2) >> 2) >= 200)
    v7 = 200;
  else
    v7 = (v6 - *a2) >> 2;
  std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u> &>(*a2, v6, (uint64_t)(a1 + 11));
  v8 = *(_QWORD *)(*a1 + 8 * *(int *)*a2);
  v32 = 0;
  v33 = 0;
  v31 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v31, *(const void **)(v8 + 16), *(_QWORD *)(v8 + 24), (uint64_t)(*(_QWORD *)(v8 + 24) - *(_QWORD *)(v8 + 16)) >> 2);
  v9 = *(_QWORD *)(*a1 + 8 * *(int *)(*a2 + 4));
  v29 = 0;
  v30 = 0;
  __p = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)(v9 + 16), *(_QWORD *)(v9 + 24), (uint64_t)(*(_QWORD *)(v9 + 24) - *(_QWORD *)(v9 + 16)) >> 2);
  CoreNLP::L2Normalize((uint64_t)&v31);
  CoreNLP::L2Normalize((uint64_t)&__p);
  if (v7 >= 3)
  {
    v10 = 4 * v7;
    v11 = 1;
    v12 = 8;
    v13 = 1;
    do
    {
      v14 = *(_QWORD *)(*a1 + 8 * *(int *)(*a2 + v12));
      __B[1] = 0;
      v27 = 0;
      __B[0] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(__B, *(const void **)(v14 + 16), *(_QWORD *)(v14 + 24), (uint64_t)(*(_QWORD *)(v14 + 24) - *(_QWORD *)(v14 + 16)) >> 2);
      CoreNLP::L2Normalize((uint64_t)__B);
      __C = 0.0;
      vDSP_distancesq((const float *)v31, 1, __B[0], 1, &__C, (v32 - (_BYTE *)v31) >> 2);
      v15 = __C;
      __C = 0.0;
      vDSP_distancesq((const float *)__p, 1, __B[0], 1, &__C, (v29 - (_BYTE *)__p) >> 2);
      if ((float)(v15 * (float)v13) >= (float)(__C * (float)v11))
        CoreNLP::KDTree::updateCentroid(v16, (uint64_t)&__p, (const float **)__B, v11++);
      else
        CoreNLP::KDTree::updateCentroid(v16, (uint64_t)&v31, (const float **)__B, v13++);
      if (__B[0])
      {
        __B[1] = __B[0];
        operator delete(__B[0]);
      }
      v12 += 4;
    }
    while (v10 != v12);
  }
  std::vector<float>::vector(__B, (v32 - (_BYTE *)v31) >> 2);
  v17 = (float *)v31;
  if (v32 != v31)
  {
    v18 = (v32 - (_BYTE *)v31) >> 2;
    v19 = (float *)__p;
    v20 = (v29 - (_BYTE *)__p) >> 2;
    v21 = __B[0];
    if (v18 <= 1)
      v18 = 1;
    do
    {
      if (!v20)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v22 = *v17++;
      v23 = v22;
      v24 = *v19++;
      *v21++ = v23 - v24;
      --v20;
      --v18;
    }
    while (v18);
  }
  v25 = (void *)a3[2];
  if (v25)
  {
    a3[3] = v25;
    operator delete(v25);
    a3[2] = 0;
    a3[3] = 0;
    a3[4] = 0;
  }
  *((_OWORD *)a3 + 1) = *(_OWORD *)__B;
  a3[4] = v27;
  CoreNLP::L2Normalize((uint64_t)(a3 + 2));
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
}

void sub_191CDAB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void CoreNLP::KDTree::assignSplits(_QWORD *a1, std::vector<int> *this, std::vector<int> *a3, int **a4, uint64_t a5)
{
  int *v10;
  int *v11;
  char v12;
  int v13;
  float *v14;
  float *v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  int *value;
  std::vector<int>::pointer end;
  std::vector<int>::pointer begin;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  int *v29;
  std::vector<int>::pointer v30;
  std::vector<int>::pointer v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  int *v37;
  int *v38;
  int *v39;
  int *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int *v47;
  int v48;
  int *v49;
  int v50;
  int v51;
  int v52;
  uint64_t p_end_cap;
  std::__compressed_pair<int *> *v54;

  std::vector<int>::reserve(this, (unint64_t)(a4[1] - *a4) >> 1);
  std::vector<int>::reserve(a3, (unint64_t)(a4[1] - *a4) >> 1);
  v10 = *a4;
  v11 = a4[1];
  if (*a4 != v11)
  {
    v12 = 0;
    p_end_cap = (uint64_t)&a3->__end_cap_;
    v54 = &this->__end_cap_;
    do
    {
      v13 = *v10;
      if (*v10 >= (unint64_t)((uint64_t)(a1[1] - *a1) >> 3))
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v14 = *(float **)(a5 + 16);
      v15 = *(float **)(a5 + 24);
      if (v14 != v15)
      {
        v16 = *(float **)(*(_QWORD *)(*a1 + 8 * v13) + 16);
        v17 = 0.0;
        do
        {
          v18 = *v14++;
          v19 = v18;
          v20 = *v16++;
          v17 = v17 + (float)(v19 * v20);
        }
        while (v14 != v15);
        if (v17 < -0.00000011921)
        {
          end = this->__end_;
          value = this->__end_cap_.__value_;
          if (end >= value)
          {
            begin = this->__begin_;
            v24 = end - this->__begin_;
            v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 62)
              goto LABEL_73;
            v26 = (char *)value - (char *)begin;
            if (v26 >> 1 > v25)
              v25 = v26 >> 1;
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
              v27 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v27 = v25;
            if (v27)
            {
              v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v54, v27);
              begin = this->__begin_;
              end = this->__end_;
            }
            else
            {
              v28 = 0;
            }
            v47 = (int *)&v28[4 * v24];
            *v47 = v13;
            v40 = v47 + 1;
            while (end != begin)
            {
              v48 = *--end;
              *--v47 = v48;
            }
LABEL_60:
            this->__begin_ = v47;
            this->__end_ = v40;
            this->__end_cap_.__value_ = (int *)&v28[4 * v27];
            if (begin)
              operator delete(begin);
            goto LABEL_62;
          }
          goto LABEL_31;
        }
        if (v17 > 0.00000011921)
        {
          v30 = a3->__end_;
          v29 = a3->__end_cap_.__value_;
          if (v30 < v29)
            goto LABEL_29;
          v31 = a3->__begin_;
          v32 = v30 - a3->__begin_;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 62)
            goto LABEL_74;
          v34 = (char *)v29 - (char *)v31;
          if (v34 >> 1 > v33)
            v33 = v34 >> 1;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
            v35 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v35 = v33;
          if (v35)
          {
            v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(p_end_cap, v35);
            v31 = a3->__begin_;
            v30 = a3->__end_;
          }
          else
          {
            v36 = 0;
          }
          v49 = (int *)&v36[4 * v32];
          *v49 = v13;
          v38 = v49 + 1;
          while (v30 != v31)
          {
            v52 = *--v30;
            *--v49 = v52;
          }
          goto LABEL_67;
        }
      }
      if ((v12 & 1) == 0)
      {
        v30 = a3->__end_;
        v37 = a3->__end_cap_.__value_;
        if (v30 < v37)
        {
LABEL_29:
          *v30 = v13;
          v38 = v30 + 1;
LABEL_69:
          a3->__end_ = v38;
          goto LABEL_70;
        }
        v31 = a3->__begin_;
        v41 = v30 - a3->__begin_;
        v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 62)
LABEL_74:
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v43 = (char *)v37 - (char *)v31;
        if (v43 >> 1 > v42)
          v42 = v43 >> 1;
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
          v35 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v35 = v42;
        if (v35)
        {
          v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(p_end_cap, v35);
          v31 = a3->__begin_;
          v30 = a3->__end_;
        }
        else
        {
          v36 = 0;
        }
        v49 = (int *)&v36[4 * v41];
        *v49 = v13;
        v38 = v49 + 1;
        while (v30 != v31)
        {
          v50 = *--v30;
          *--v49 = v50;
        }
LABEL_67:
        a3->__begin_ = v49;
        a3->__end_ = v38;
        a3->__end_cap_.__value_ = (int *)&v36[4 * v35];
        if (v31)
          operator delete(v31);
        goto LABEL_69;
      }
      end = this->__end_;
      v39 = this->__end_cap_.__value_;
      if (end >= v39)
      {
        begin = this->__begin_;
        v44 = end - this->__begin_;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 62)
LABEL_73:
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v46 = (char *)v39 - (char *)begin;
        if (v46 >> 1 > v45)
          v45 = v46 >> 1;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
          v27 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v27 = v45;
        if (v27)
        {
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v54, v27);
          begin = this->__begin_;
          end = this->__end_;
        }
        else
        {
          v28 = 0;
        }
        v47 = (int *)&v28[4 * v44];
        *v47 = v13;
        v40 = v47 + 1;
        while (end != begin)
        {
          v51 = *--end;
          *--v47 = v51;
        }
        goto LABEL_60;
      }
LABEL_31:
      *end = v13;
      v40 = end + 1;
LABEL_62:
      this->__end_ = v40;
LABEL_70:
      ++v12;
      ++v10;
    }
    while (v10 != v11);
  }
}

void CoreNLP::KDTree::updateCentroid(uint64_t a1, uint64_t a2, const float **a3, int a4)
{
  float __B;

  __B = (float)a4;
  vDSP_vsmul(*(const float **)a2, 1, &__B, *(float **)a2, 1, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  vDSP_vadd(*(const float **)a2, 1, *a3, 1, *(float **)a2, 1, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  __B = __B + 1.0;
  vDSP_vsdiv(*(const float **)a2, 1, &__B, *(float **)a2, 1, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  CoreNLP::L2Normalize(a2);
}

void CoreNLP::KDTree::getPossibleNNs(uint64_t a1, float *a2, unsigned int **a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  void *v23;
  float v24;
  int v25;
  float *v26;
  unint64_t v27;
  float *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  float v35;
  float *v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  float v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  float v61;
  char *v62;
  char *v63;
  uint64_t v64;
  float v65;
  unsigned int v66;
  float v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  float v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v81;
  float *v82;
  _QWORD v83[2];
  char v84;

  if (*(_DWORD *)(a1 + 32))
  {
    v6 = *(_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 48);
    v7 = (v5 - v6) >> 2;
    v81 = 0;
    v82 = 0;
    v83[0] = 0;
    if (v5 != v6)
    {
      v8 = 0;
      do
      {
        v9 = *(_QWORD *)(a1 + 40);
        if ((unint64_t)v82 >= v83[0])
        {
          v11 = ((uint64_t)v82 - v81) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
          v13 = v83[0] - v81;
          if ((v83[0] - v81) >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v83, v14);
          v17 = &v15[8 * v11];
          *(_DWORD *)v17 = 2139095040;
          *((_DWORD *)v17 + 1) = *(_DWORD *)(v9 + 4 * v8);
          v18 = (char *)v82;
          v19 = v17;
          if (v82 != (float *)v81)
          {
            do
            {
              v20 = *((_QWORD *)v18 - 1);
              v18 -= 8;
              *((_QWORD *)v19 - 1) = v20;
              v19 -= 8;
            }
            while (v18 != (char *)v81);
            v18 = (char *)v81;
          }
          v10 = (uint64_t)(v17 + 8);
          v81 = (uint64_t)v19;
          v83[0] = &v15[8 * v16];
          if (v18)
            operator delete(v18);
        }
        else
        {
          *v82 = INFINITY;
          v82[1] = *(float *)(v9 + 4 * v8);
          v10 = (uint64_t)(v82 + 2);
        }
        v82 = (float *)v10;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<std::pair<float,int>> &,std::__wrap_iter<std::pair<float,int>*>>(v81, v10, (uint64_t)&v84, (v10 - v81) >> 3);
        ++v8;
      }
      while (v8 != v7);
    }
    v21 = 5 * v7;
    if (5 * (int)v7 >= 1)
    {
      v22 = a3 + 2;
      do
      {
        if ((unint64_t)((char *)a3[1] - (char *)*a3) >> 6 > 0x7C)
          break;
        v23 = (void *)v81;
        if ((float *)v81 == v82)
          goto LABEL_97;
        v24 = *(float *)v81;
        v25 = *(_DWORD *)(v81 + 4);
        if ((uint64_t)v82 - v81 >= 9)
        {
          std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::less<std::pair<float,int>> &,std::__wrap_iter<std::pair<float,int>*>>(v81, (uint64_t)&v84, ((unint64_t)v82 - v81) >> 3);
          if (v82 - 2 == v26)
          {
            *v26 = v24;
            *((_DWORD *)v26 + 1) = v25;
          }
          else
          {
            *v26 = *(v82 - 2);
            v26[1] = *(v82 - 1);
            *(v82 - 2) = v24;
            *((_DWORD *)v82 - 1) = v25;
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<std::pair<float,int>> &,std::__wrap_iter<std::pair<float,int>*>>(v81, (uint64_t)(v26 + 2), (uint64_t)&v84, ((uint64_t)v26 - v81 + 8) >> 3);
          }
        }
        v27 = (unint64_t)v82;
        v28 = v82 - 2;
        v82 -= 2;
        v29 = (v25 - *(_DWORD *)(a1 + 64));
        if ((int)v29 >= 0)
        {
          LODWORD(v30) = *(_DWORD *)(a1 + 32);
          if (!(_DWORD)v30)
            v30 = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
          if ((int)v29 < (int)v30)
          {
            v31 = (unsigned int *)(*(_QWORD *)(a1 + 24) + *(int *)(a1 + 36) * v29);
            v32 = *v31;
            if ((int)v32 <= *(_DWORD *)(a1 + 80))
            {
              if ((int)v32 >= 1)
              {
                v40 = 0;
                v41 = a3[1];
                do
                {
                  v42 = v31[(int)v40 + 1];
                  if ((unint64_t)v41 >= *v22)
                  {
                    v44 = *a3;
                    v45 = v41 - *a3;
                    v46 = v45 + 1;
                    if ((unint64_t)(v45 + 1) >> 62)
                      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
                    v47 = *v22 - (_QWORD)v44;
                    if (v47 >> 1 > v46)
                      v46 = v47 >> 1;
                    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
                      v48 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v48 = v46;
                    if (v48)
                    {
                      v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v48);
                      v44 = *a3;
                      v41 = a3[1];
                    }
                    else
                    {
                      v49 = 0;
                    }
                    v50 = (unsigned int *)&v49[4 * v45];
                    *v50 = v42;
                    v43 = v50 + 1;
                    while (v41 != v44)
                    {
                      v51 = *--v41;
                      *--v50 = v51;
                    }
                    *a3 = v50;
                    a3[1] = v43;
                    a3[2] = (unsigned int *)&v49[4 * v48];
                    if (v44)
                      operator delete(v44);
                  }
                  else
                  {
                    *v41 = v42;
                    v43 = v41 + 1;
                  }
                  a3[1] = v43;
                  ++v40;
                  v41 = v43;
                }
                while (v40 != v32);
              }
              --v21;
            }
            else
            {
              v33 = *(int *)(a1 + 68);
              if ((_DWORD)v33)
              {
                v34 = (float *)(v31 + 3);
                v35 = 0.0;
                v36 = a2;
                do
                {
                  v37 = *v34++;
                  v38 = v37;
                  v39 = *v36++;
                  v35 = v35 + (float)(v38 * v39);
                  --v33;
                }
                while (v33);
              }
              else
              {
                v35 = 0.0;
              }
              v52 = v31[2];
              if ((unint64_t)v28 >= v83[0])
              {
                v54 = ((uint64_t)v28 - v81) >> 3;
                v55 = v54 + 1;
                if ((unint64_t)(v54 + 1) >> 61)
                  std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
                v56 = v83[0] - v81;
                if ((v83[0] - v81) >> 2 > v55)
                  v55 = v56 >> 2;
                if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
                  v57 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v57 = v55;
                v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v83, v57);
                v60 = &v58[8 * v54];
                if (v35 >= v24)
                  v61 = v24;
                else
                  v61 = v35;
                *(float *)v60 = v61;
                *((_DWORD *)v60 + 1) = v52;
                v62 = (char *)v82;
                v63 = &v58[8 * v54];
                if (v82 != (float *)v81)
                {
                  do
                  {
                    v64 = *((_QWORD *)v62 - 1);
                    v62 -= 8;
                    *((_QWORD *)v63 - 1) = v64;
                    v63 -= 8;
                  }
                  while (v62 != (char *)v81);
                  v62 = (char *)v81;
                }
                v27 = (unint64_t)(v60 + 8);
                v81 = (uint64_t)v63;
                v83[0] = &v58[8 * v59];
                if (v62)
                  operator delete(v62);
              }
              else
              {
                if (v35 >= v24)
                  v53 = v24;
                else
                  v53 = v35;
                *(float *)(v27 - 8) = v53;
                *(_DWORD *)(v27 - 4) = v52;
              }
              std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<std::pair<float,int>> &,std::__wrap_iter<std::pair<float,int>*>>(v81, v27, (uint64_t)&v84, (uint64_t)(v27 - v81) >> 3);
              v65 = -v35;
              v66 = v31[1];
              if (v27 >= v83[0])
              {
                v69 = (uint64_t)(v27 - v81) >> 3;
                v70 = v69 + 1;
                if ((unint64_t)(v69 + 1) >> 61)
                  std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
                v71 = v83[0] - v81;
                if ((v83[0] - v81) >> 2 > v70)
                  v70 = v71 >> 2;
                if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
                  v72 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v72 = v70;
                v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v83, v72);
                v75 = &v73[8 * v69];
                if (v24 <= v65)
                  v76 = v24;
                else
                  v76 = v65;
                *(float *)v75 = v76;
                *((_DWORD *)v75 + 1) = v66;
                v77 = (char *)v27;
                v78 = &v73[8 * v69];
                if (v27 != v81)
                {
                  do
                  {
                    v79 = *((_QWORD *)v77 - 1);
                    v77 -= 8;
                    *((_QWORD *)v78 - 1) = v79;
                    v78 -= 8;
                  }
                  while (v77 != (char *)v81);
                  v77 = (char *)v81;
                }
                v68 = (uint64_t)(v75 + 8);
                v81 = (uint64_t)v78;
                v83[0] = &v73[8 * v74];
                if (v77)
                  operator delete(v77);
              }
              else
              {
                if (v24 <= v65)
                  v67 = v24;
                else
                  v67 = v65;
                *(float *)v27 = v67;
                *(_DWORD *)(v27 + 4) = v66;
                v68 = v27 + 8;
              }
              v82 = (float *)v68;
              std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<std::pair<float,int>> &,std::__wrap_iter<std::pair<float,int>*>>(v81, v68, (uint64_t)&v84, (v68 - v81) >> 3);
            }
          }
        }
      }
      while (v21 > 0);
    }
    v23 = (void *)v81;
LABEL_97:
    if (v23)
      operator delete(v23);
  }
}

void sub_191CDB4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreNLP::KDTree::readDataPoint(CoreNLP::KDTree *this, const float *a2)
{
  unint64_t v3;
  void *__p;
  void *v5;
  uint64_t v6;
  int v7;

  v3 = *((int *)this + 17);
  ++*((_DWORD *)this + 16);
  v5 = 0;
  v6 = 0;
  __p = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(&__p, a2, (uint64_t)&a2[v3], v3);
  v7 = 1;
  CoreNLP::KDTree::createNode<int,std::vector<float> &>((void **)this, &v7, (uint64_t)&__p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

void sub_191CDB59C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::KDTree::createNode<int,int>(void **a1, _DWORD *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = operator new();
  v7 = *a3;
  *(_DWORD *)v6 = *a2;
  *(_QWORD *)(v6 + 4) = -1;
  std::vector<float>::vector((_QWORD *)(v6 + 16), v7);
  v9 = (uint64_t *)a1[1];
  v8 = (unint64_t)a1[2];
  if ((unint64_t)v9 >= v8)
  {
    v11 = ((char *)v9 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v12 = v8 - (_QWORD)*a1;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), v14);
    else
      v15 = 0;
    v16 = (uint64_t *)&v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = v6;
    v10 = v16 + 1;
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *--v16 = v20;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v10;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v9 = v6;
    v10 = v9 + 1;
  }
  a1[1] = v10;
  return *(v10 - 1);
}

void sub_191CDB6CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x1080C4054FDDD16);
  _Unwind_Resume(a1);
}

void *CoreNLP::KDTree::fillGroupNode(uint64_t a1, uint64_t a2, int **a3)
{
  int *v3;
  int *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  void *result;

  v3 = *a3;
  v4 = a3[1];
  if (*a3 != v4)
  {
    v5 = (char *)v4 - (char *)v3;
    v6 = *v3;
    if (v5 == 4)
    {
      *(_DWORD *)(a2 + 4) = v6;
    }
    else
    {
      v7 = v3[1];
      *(_DWORD *)(a2 + 4) = v6;
      *(_DWORD *)(a2 + 8) = v7;
      v8 = (char *)a3[1] - (char *)*a3;
      if (v8 != 8)
        return memcpy(*(void **)(a2 + 16), *a3 + 2, v8 - 8);
    }
  }
  return result;
}

uint64_t CoreNLP::KDTree::createNode<int &,int>(void **a1, _DWORD *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = operator new();
  v7 = *a3;
  *(_DWORD *)v6 = *a2;
  *(_QWORD *)(v6 + 4) = -1;
  std::vector<float>::vector((_QWORD *)(v6 + 16), v7);
  v9 = (uint64_t *)a1[1];
  v8 = (unint64_t)a1[2];
  if ((unint64_t)v9 >= v8)
  {
    v11 = ((char *)v9 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v12 = v8 - (_QWORD)*a1;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), v14);
    else
      v15 = 0;
    v16 = (uint64_t *)&v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = v6;
    v10 = v16 + 1;
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *--v16 = v20;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v10;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v9 = v6;
    v10 = v9 + 1;
  }
  a1[1] = v10;
  return *(v10 - 1);
}

void sub_191CDB850(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x1080C4054FDDD16);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::KDTree::createNode<int,std::vector<float> &>(void **a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v21;
  uint64_t v22;

  v6 = operator new();
  LODWORD(a2) = *a2;
  v22 = 0;
  v21 = 0uLL;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v21, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  *(_DWORD *)v6 = (_DWORD)a2;
  *(_QWORD *)(v6 + 4) = -1;
  *(_OWORD *)(v6 + 16) = v21;
  *(_QWORD *)(v6 + 32) = v22;
  v21 = 0uLL;
  v22 = 0;
  v8 = (uint64_t *)a1[1];
  v7 = (unint64_t)a1[2];
  if ((unint64_t)v8 >= v7)
  {
    v10 = ((char *)v8 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v11 = v7 - (_QWORD)*a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), v13);
    else
      v14 = 0;
    v15 = (uint64_t *)&v14[8 * v10];
    v16 = &v14[8 * v13];
    *v15 = v6;
    v9 = v15 + 1;
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *--v15 = v19;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v8 = v6;
    v9 = v8 + 1;
  }
  a1[1] = v9;
  return *(v9 - 1);
}

void sub_191CDB9B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x1080C4054FDDD16);
  _Unwind_Resume(a1);
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v5;
  int *value;
  int *end;
  std::vector<int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

uint64_t std::vector<int>::vector<CoreNLP::NumRange<int>::iterator,0>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  unint64_t v6;
  int v7;
  int v8;

  v6 = 0;
  v7 = HIDWORD(a4) * a5 + a4;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if ((_DWORD)a2 + HIDWORD(a2) * a3 != v7)
  {
    v6 = 0;
    v8 = v7 - (a2 + a3 * HIDWORD(a2));
    do
    {
      ++v6;
      v8 -= HIDWORD(a2);
    }
    while (v8);
  }
  std::vector<int>::__init_with_size[abi:ne180100]<CoreNLP::NumRange<int>::iterator,CoreNLP::NumRange<int>::iterator>((char *)a1, a2, a3, a4, a5, v6);
  return a1;
}

char *std::vector<int>::__init_with_size[abi:ne180100]<CoreNLP::NumRange<int>::iterator,CoreNLP::NumRange<int>::iterator>(char *result, uint64_t a2, int a3, uint64_t a4, int a5, unint64_t a6)
{
  char *v10;
  _DWORD *v11;
  int v12;
  int i;

  if (a6)
  {
    v10 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a6);
    v11 = (_DWORD *)*((_QWORD *)v10 + 1);
    v12 = a4 + HIDWORD(a4) * a5;
    for (i = a2 + HIDWORD(a2) * a3; v12 != i; i += HIDWORD(a2))
      *v11++ = i;
    *((_QWORD *)v10 + 1) = v11;
  }
  return result;
}

void sub_191CDBBC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = *a1;
  v5 = *(_DWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_DWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v6, v12);
      v8 = *(_DWORD **)v4;
      v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<std::pair<float,int>> &,std::__wrap_iter<std::pair<float,int>*>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  int v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = result + 8 * (v4 >> 1);
    v7 = *(float *)v6;
    v8 = *(float *)(a2 - 8);
    if (*(float *)v6 >= v8)
    {
      if (v8 < v7)
        return result;
      v10 = *(_DWORD *)(result + 8 * v5 + 4);
      v9 = *(_DWORD *)(a2 - 4);
      if (v10 >= v9)
        return result;
    }
    else
    {
      v9 = *(_DWORD *)(a2 - 4);
      v10 = *(_DWORD *)(v6 + 4);
    }
    *(float *)(a2 - 8) = v7;
    *(_DWORD *)(a2 - 4) = v10;
    if (v4 >= 2)
    {
      while (1)
      {
        v12 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v11 = result + 8 * v5;
        v13 = *(float *)v11;
        if (*(float *)v11 >= v8)
        {
          if (v8 < v13)
            break;
          v14 = *(_DWORD *)(result + 8 * v5 + 4);
          if (v14 >= v9)
            break;
        }
        else
        {
          v14 = *(_DWORD *)(v11 + 4);
        }
        *(float *)v6 = v13;
        *(_DWORD *)(v6 + 4) = v14;
        v6 = result + 8 * v5;
        if (v12 <= 1)
          goto LABEL_13;
      }
    }
    v11 = v6;
LABEL_13:
    *(float *)v11 = v8;
    *(_DWORD *)(v11 + 4) = v9;
  }
  return result;
}

float std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::less<std::pair<float,int>> &,std::__wrap_iter<std::pair<float,int>*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float result;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = (_DWORD *)a1;
    v7 = v3 + 1;
    a1 += 8 * (v3 + 1);
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = *(float *)(a1 + 8);
      if (*(float *)a1 < v10 || v10 >= *(float *)a1 && v6[2 * v7 + 1] < *(_DWORD *)(a1 + 12))
      {
        a1 += 8;
        v3 = v9;
      }
    }
    result = *(float *)a1;
    *v6 = *(_DWORD *)a1;
    v6[1] = *(_DWORD *)(a1 + 4);
  }
  while (v3 <= v5);
  return result;
}

uint64_t NLModelContainerCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v10 = operator new();
  CoreNLP::ModelContainer::ModelContainer(v10, a1, a2, a3, a4, a5);
  std::shared_ptr<CoreNLP::ModelContainer>::shared_ptr[abi:ne180100]<CoreNLP::ModelContainer,void>(&v16, v10);
  if (v16)
    v11 = CoreNLP::createModelContainerWrapper(&v16);
  else
    v11 = 0;
  v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

void sub_191CDBF00(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFErrorRef *v9;

  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  __cxa_begin_catch(a1);
  if (a2 == 2 && v9)
    *v9 = CFErrorCreate(0, (CFErrorDomain)kNLModelContainerErrorDomain, 3, 0);
  __cxa_end_catch();
  JUMPOUT(0x191CDBEE0);
}

void sub_191CDBF7C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t NLModelContainerCreateWithContentsOfURL(const __CFURL *a1, unint64_t a2)
{
  CoreNLP::ModelContainer *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (CoreNLP::ModelContainer *)operator new();
  CoreNLP::ModelContainer::ModelContainer(v4, a1, a2);
  std::shared_ptr<CoreNLP::ModelContainer>::shared_ptr[abi:ne180100]<CoreNLP::ModelContainer,void>(&v10, (uint64_t)v4);
  if (v10)
    v5 = CoreNLP::createModelContainerWrapper(&v10);
  else
    v5 = 0;
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_191CDC050(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFErrorRef *v9;
  CFErrorRef v12;

  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 4)
  {
    __cxa_begin_catch(a1);
    if (v9)
    {
      v12 = CFErrorCreate(0, (CFErrorDomain)kNLModelContainerErrorDomain, 1, 0);
LABEL_10:
      *v9 = v12;
    }
  }
  else if (a2 == 3)
  {
    __cxa_begin_catch(a1);
    if (v9)
    {
      v12 = CFErrorCreate(0, (CFErrorDomain)kNLModelContainerErrorDomain, 2, 0);
      goto LABEL_10;
    }
  }
  else
  {
    __cxa_begin_catch(a1);
    if (a2 == 2 && v9)
    {
      v12 = CFErrorCreate(0, (CFErrorDomain)kNLModelContainerErrorDomain, 5, 0);
      goto LABEL_10;
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x191CDC038);
}

void sub_191CDC128(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t NLModelContainerCreateWithContainerData(const __CFData *a1)
{
  CoreNLP::ModelContainer *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (CoreNLP::ModelContainer *)operator new();
  CoreNLP::ModelContainer::ModelContainer(v2, a1);
  std::shared_ptr<CoreNLP::ModelContainer>::shared_ptr[abi:ne180100]<CoreNLP::ModelContainer,void>(&v8, (uint64_t)v2);
  if (v8)
    v3 = CoreNLP::createModelContainerWrapper(&v8);
  else
    v3 = 0;
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_191CDC20C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFErrorRef *v9;
  CFErrorRef v12;

  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  switch(a2)
  {
    case 5:
      __cxa_begin_catch(a1);
      if (v9)
      {
        v12 = CFErrorCreate(0, (CFErrorDomain)kNLModelContainerErrorDomain, 3, 0);
LABEL_13:
        *v9 = v12;
      }
      break;
    case 4:
      __cxa_begin_catch(a1);
      if (v9)
      {
        v12 = CFErrorCreate(0, (CFErrorDomain)kNLModelContainerErrorDomain, 1, 0);
        goto LABEL_13;
      }
      break;
    case 3:
      __cxa_begin_catch(a1);
      if (v9)
      {
        v12 = CFErrorCreate(0, (CFErrorDomain)kNLModelContainerErrorDomain, 2, 0);
        goto LABEL_13;
      }
      break;
    default:
      __cxa_begin_catch(a1);
      if (a2 == 2 && v9)
      {
        v12 = CFErrorCreate(0, (CFErrorDomain)kNLModelContainerErrorDomain, 5, 0);
        goto LABEL_13;
      }
      break;
  }
  __cxa_end_catch();
  JUMPOUT(0x191CDC1F4);
}

void sub_191CDC310(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t NLModelContainerCreateWithSplitContainerData(const __CFArray *a1)
{
  CoreNLP::ModelContainer *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (CoreNLP::ModelContainer *)operator new();
  CoreNLP::ModelContainer::ModelContainer(v2, a1);
  std::shared_ptr<CoreNLP::ModelContainer>::shared_ptr[abi:ne180100]<CoreNLP::ModelContainer,void>(&v8, (uint64_t)v2);
  if (v8)
    v3 = CoreNLP::createModelContainerWrapper(&v8);
  else
    v3 = 0;
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_191CDC400(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFErrorRef *v9;
  CFErrorRef v12;

  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  switch(a2)
  {
    case 5:
      __cxa_begin_catch(a1);
      if (v9)
      {
        v12 = CFErrorCreate(0, (CFErrorDomain)kNLModelContainerErrorDomain, 3, 0);
LABEL_13:
        *v9 = v12;
      }
      break;
    case 4:
      __cxa_begin_catch(a1);
      if (v9)
      {
        v12 = CFErrorCreate(0, (CFErrorDomain)kNLModelContainerErrorDomain, 1, 0);
        goto LABEL_13;
      }
      break;
    case 3:
      __cxa_begin_catch(a1);
      if (v9)
      {
        v12 = CFErrorCreate(0, (CFErrorDomain)kNLModelContainerErrorDomain, 2, 0);
        goto LABEL_13;
      }
      break;
    default:
      __cxa_begin_catch(a1);
      if (a2 == 2 && v9)
      {
        v12 = CFErrorCreate(0, (CFErrorDomain)kNLModelContainerErrorDomain, 5, 0);
        goto LABEL_13;
      }
      break;
  }
  __cxa_end_catch();
  JUMPOUT(0x191CDC3E8);
}

void sub_191CDC504(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

CoreNLP *NLModelContainerWriteToURL(CoreNLP *result, void *a2, char a3)
{
  CoreNLP::ModelContainer *v5;

  if (result)
  {
    v5 = (CoreNLP::ModelContainer *)CoreNLP::unwrapGazetteer(result, a2);
    return (CoreNLP *)CoreNLP::ModelContainer::writeToURL(v5, (CFURLRef)a2, a3);
  }
  return result;
}

CoreNLP *NLModelContainerCopyContainerData(CoreNLP *result, void *a2)
{
  CoreNLP::ModelContainer *v2;

  if (result)
  {
    v2 = (CoreNLP::ModelContainer *)CoreNLP::unwrapGazetteer(result, a2);
    return CoreNLP::ModelContainer::copyContainerData(v2);
  }
  return result;
}

void sub_191CDC620(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x191CDC618);
}

CoreNLP *NLModelContainerCopySplitContainerData(CoreNLP *result, void *a2)
{
  CoreNLP::ModelContainer *v3;

  if (result)
  {
    v3 = (CoreNLP::ModelContainer *)CoreNLP::unwrapGazetteer(result, a2);
    return CoreNLP::ModelContainer::copySplitContainerData(v3, (int64_t)a2);
  }
  return result;
}

CoreNLP *NLModelContainerGetType(CoreNLP *result, void *a2)
{
  CoreNLP::ModelContainer *v2;

  if (result)
  {
    v2 = (CoreNLP::ModelContainer *)CoreNLP::unwrapGazetteer(result, a2);
    return (CoreNLP *)CoreNLP::ModelContainer::getType(v2);
  }
  return result;
}

CoreNLP *NLModelContainerGetSubtype(CoreNLP *result, void *a2)
{
  CoreNLP::ModelContainer *v2;

  if (result)
  {
    v2 = (CoreNLP::ModelContainer *)CoreNLP::unwrapGazetteer(result, a2);
    return (CoreNLP *)CoreNLP::ModelContainer::getSubtype(v2);
  }
  return result;
}

uint64_t NLModelContainerGetRevision(CoreNLP *a1, void *a2)
{
  CoreNLP::ModelContainer *v2;

  if (!a1)
    return kNLModelUnknownRevision;
  v2 = (CoreNLP::ModelContainer *)CoreNLP::unwrapGazetteer(a1, a2);
  return CoreNLP::ModelContainer::getRevision(v2);
}

CoreNLP *NLModelContainerCopyInfoDictionary(CoreNLP *result, void *a2)
{
  CFDictionaryRef *v2;

  if (result)
  {
    v2 = (CFDictionaryRef *)CoreNLP::unwrapGazetteer(result, a2);
    return CoreNLP::ModelContainer::copyInfoDictionary(v2);
  }
  return result;
}

CoreNLP *NLModelContainerGetModelDataCount(CoreNLP *result, void *a2)
{
  CFArrayRef *v2;

  if (result)
  {
    v2 = (CFArrayRef *)CoreNLP::unwrapGazetteer(result, a2);
    return (CoreNLP *)CoreNLP::ModelContainer::getModelDataCount(v2);
  }
  return result;
}

CoreNLP *NLModelContainerCopyModelDataAtIndex(CoreNLP *result, void *a2)
{
  CoreNLP::ModelContainer *v3;

  if (result)
  {
    v3 = (CoreNLP::ModelContainer *)CoreNLP::unwrapGazetteer(result, a2);
    return CoreNLP::ModelContainer::copyModelDataAtIndex(v3, (unint64_t)a2);
  }
  return result;
}

void sub_191CDC7E4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x191CDC7D8);
}

_QWORD *std::shared_ptr<CoreNLP::ModelContainer>::shared_ptr[abi:ne180100]<CoreNLP::ModelContainer,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E2DF3660;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_191CDC854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<CoreNLP::ModelContainer>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<CoreNLP::ModelContainer *,std::shared_ptr<CoreNLP::ModelContainer>::__shared_ptr_default_delete<CoreNLP::ModelContainer,CoreNLP::ModelContainer>,std::allocator<CoreNLP::ModelContainer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401E994);
}

void std::__shared_ptr_pointer<CoreNLP::ModelContainer *,std::shared_ptr<CoreNLP::ModelContainer>::__shared_ptr_default_delete<CoreNLP::ModelContainer,CoreNLP::ModelContainer>,std::allocator<CoreNLP::ModelContainer>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<CoreNLP::ModelContainer>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<CoreNLP::ModelContainer *,std::shared_ptr<CoreNLP::ModelContainer>::__shared_ptr_default_delete<CoreNLP::ModelContainer,CoreNLP::ModelContainer>,std::allocator<CoreNLP::ModelContainer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<CoreNLP::ModelContainer>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  const void *v4;
  const void *v5;

  if (a2)
  {
    std::unique_ptr<CoreNLP::ModelContainerMMap>::reset[abi:ne180100]((CoreNLP::ModelContainerMMap **)(a2 + 80), 0);
    v3 = *(void **)(a2 + 56);
    if (v3)
    {
      *(_QWORD *)(a2 + 64) = v3;
      operator delete(v3);
    }
    if (*(char *)(a2 + 55) < 0)
      operator delete(*(void **)(a2 + 32));
    v4 = *(const void **)(a2 + 24);
    if (v4)
      CFRelease(v4);
    v5 = *(const void **)(a2 + 16);
    if (v5)
      CFRelease(v5);
    JUMPOUT(0x19401E994);
  }
}

void CoreNLP::TaggerManager::setString(CoreNLP::TaggerManager *this, CFStringRef theString)
{
  const void *v4;
  _QWORD *i;
  uint64_t v6;
  CFIndex Length;

  v4 = (const void *)*((_QWORD *)this + 6);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 6) = 0;
  }
  if (theString)
    *((_QWORD *)this + 6) = CFRetain(theString);
  if (*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 18) = 0;
    *((_OWORD *)this + 8) = xmmword_191D40610;
  }
  for (i = (_QWORD *)*((_QWORD *)this + 2); i; i = (_QWORD *)*i)
  {
    v6 = i[3];
    Length = CFStringGetLength(theString);
    (*(void (**)(uint64_t, CFStringRef, _QWORD, CFIndex, _QWORD))(*(_QWORD *)v6 + 40))(v6, theString, 0, Length, 0);
  }
}

uint64_t CoreNLP::TaggerManager::setLocaleForRange(uint64_t this, const __CFLocale *a2, CFRange a3)
{
  if (!*(_BYTE *)(this + 57))
    return CoreNLP::CompositeTagger::setLocaleForRange(*(CoreNLP::CompositeTagger **)(this + 40), a2, a3);
  return this;
}

void CoreNLP::TaggerManager::setStringEditedInRange(CFStringRef *this, CFRange a2)
{
  CoreNLP::TaggerManager::setString((CoreNLP::TaggerManager *)this, this[6]);
}

void CoreNLP::TaggerManager::loadStringForCompositeTagger(CoreNLP::TaggerManager *this, CFRange a2)
{
  CFIndex length;
  CFIndex location;
  CFIndex v5;
  BOOL v6;
  CFIndex v7;
  uint64_t v8;
  uint64_t v9;
  CFIndex v10;
  CFIndex v11;
  CFIndex v12;
  const __CFString *v13;
  CFRange v14;

  length = a2.length;
  location = a2.location;
  if (a2.location == -1
    || (v5 = *((_QWORD *)this + 16), v5 == -1)
    || (a2.location >= v5 ? (v6 = a2.location + a2.length <= *((_QWORD *)this + 17) + v5) : (v6 = 0), !v6))
  {
    v7 = CFStringGetLength(*((CFStringRef *)this + 6));
    v8 = length + location + 1024;
    if (v8 >= v7)
      v8 = v7;
    v9 = 1024;
    if (location > 1024)
      v9 = location;
    v10 = v9 - 1024;
    v11 = *((_QWORD *)this + 16);
    if (v11 == -1 || v10 < v11 || v8 > *((_QWORD *)this + 17) + v11)
    {
      v12 = v8 - v10;
      if (v10 || v12 != CFStringGetLength(*((CFStringRef *)this + 6)))
      {
        v14.location = v10;
        v14.length = v12;
        v13 = CFStringCreateWithSubstring(0, *((CFStringRef *)this + 6), v14);
        CoreNLP::CompositeTagger::setString(*((CoreNLP::CompositeTagger **)this + 5), v13);
        if (v13)
          CFRelease(v13);
      }
      else
      {
        CoreNLP::CompositeTagger::setString(*((CoreNLP::CompositeTagger **)this + 5), *((CFStringRef *)this + 6));
      }
      *((_QWORD *)this + 16) = v10;
      *((_QWORD *)this + 17) = v12;
    }
  }
}

const __CFString *CoreNLP::TaggerManager::enumerateTokens(uint64_t a1, unsigned int a2, CFIndex a3, CFIndex a4, CoreNLP::NLAttributedToken *a5, uint64_t a6)
{
  const __CFString *result;
  const __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  CFIndex v16;
  uint64_t v17;
  _QWORD v18[8];
  _QWORD v19[7];
  CFRange v20;

  result = *(const __CFString **)(a1 + 48);
  if (result)
  {
    if ((a3 & 0x8000000000000000) == 0 && (a4 & 0x8000000000000000) == 0)
    {
      result = (const __CFString *)CFStringGetLength(result);
      if (result)
      {
        result = (const __CFString *)CFStringGetLength(*(CFStringRef *)(a1 + 48));
        v13 = result;
        if (*(_BYTE *)(a1 + 57))
        {
          v14 = *CoreNLP::TaggerManager::getRuleBasedTagger(a1, a2);
          v19[0] = MEMORY[0x1E0C809B0];
          v19[1] = 0x40000000;
          v19[2] = ___ZN7CoreNLP13TaggerManager15enumerateTokensE15NLTokenizerUnit7CFRangemU13block_pointerFv7NLTokenPbE_block_invoke;
          v19[3] = &unk_1E2DF3920;
          v19[5] = 0;
          v19[6] = v13;
          v19[4] = a6;
          return (const __CFString *)(*(uint64_t (**)(uint64_t, CFIndex, CFIndex, CoreNLP::NLAttributedToken *, _QWORD *))(*(_QWORD *)v14 + 56))(v14, a3, a4, a5, v19);
        }
        v15 = *(_QWORD *)(a1 + 144);
        if (v15 <= 0)
        {
          v20.location = a3;
          v20.length = a4;
          CoreNLP::TaggerManager::loadStringForCompositeTagger((CoreNLP::TaggerManager *)a1, v20);
          v15 = *(_QWORD *)(a1 + 144);
          v16 = *(_QWORD *)(a1 + 128);
        }
        else
        {
          v16 = *(_QWORD *)(a1 + 128);
          if (v16 == -1 || a3 < v16 || a3 + a4 > *(_QWORD *)(a1 + 136) + v16)
            return result;
        }
        *(_QWORD *)(a1 + 144) = v15 + 1;
        v17 = *(_QWORD *)(a1 + 40);
        v18[0] = MEMORY[0x1E0C809B0];
        v18[1] = 0x40000000;
        v18[2] = ___ZN7CoreNLP13TaggerManager15enumerateTokensE15NLTokenizerUnit7CFRangemU13block_pointerFv7NLTokenPbE_block_invoke_2;
        v18[3] = &unk_1E2DF5160;
        v18[6] = 0;
        v18[7] = v13;
        v18[4] = a6;
        v18[5] = a1;
        result = (const __CFString *)CoreNLP::CompositeTagger::enumerateTokens(v17, a2, a3 - v16, a4, a5, (uint64_t)v18);
        --*(_QWORD *)(a1 + 144);
      }
    }
  }
  return result;
}

_QWORD *CoreNLP::TaggerManager::getRuleBasedTagger(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  CoreNLP::TaggerContext *v5;
  CoreNLP::LineBreakTagger *WordTagger;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *v11;
  CFIndex Length;
  unint64_t v14;
  unint64_t v15;

  v4 = a2;
  v15 = a2;
  if (std::__hash_table<long,std::hash<long>,std::equal_to<long>,std::allocator<long>>::find<long>((_QWORD *)a1, &v15))
    goto LABEL_14;
  switch(a2)
  {
    case 0u:
      if (*(_BYTE *)(a1 + 56))
        *(_QWORD *)(a1 + 64) = 4;
      WordTagger = CoreNLP::WordTagger::createWordTagger((CoreNLP::WordTagger *)(a1 + 64), v5);
      v14 = v4;
      v15 = (unint64_t)&v14;
      v7 = std::__hash_table<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long &&>,std::tuple<>>(a1, &v14, (uint64_t)&std::piecewise_construct, (_QWORD **)&v15);
      goto LABEL_10;
    case 1u:
      WordTagger = CoreNLP::SentenceTagger::createSentenceTagger((const __CFLocale **)(a1 + 64), v5);
      v14 = v4;
      v15 = (unint64_t)&v14;
      v7 = std::__hash_table<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long &&>,std::tuple<>>(a1, &v14, (uint64_t)&std::piecewise_construct, (_QWORD **)&v15);
LABEL_10:
      v8 = v7;
      v9 = v7[3];
      v8[3] = WordTagger;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      break;
    case 2u:
      WordTagger = CoreNLP::ParagraphTagger::createParagraphTagger((CoreNLP::ParagraphTagger *)(a1 + 64), v5);
      v14 = v4;
      v15 = (unint64_t)&v14;
      v7 = std::__hash_table<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long &&>,std::tuple<>>(a1, &v14, (uint64_t)&std::piecewise_construct, (_QWORD **)&v15);
      goto LABEL_10;
  }
  if (*(_QWORD *)(a1 + 48))
  {
    v14 = v4;
    v15 = (unint64_t)&v14;
    v10 = std::__hash_table<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long &&>,std::tuple<>>(a1, &v14, (uint64_t)&std::piecewise_construct, (_QWORD **)&v15)[3];
    v11 = *(const __CFString **)(a1 + 48);
    Length = CFStringGetLength(v11);
    (*(void (**)(uint64_t, const __CFString *, _QWORD, CFIndex, _QWORD))(*(_QWORD *)v10 + 40))(v10, v11, 0, Length, 0);
  }
LABEL_14:
  v14 = v4;
  v15 = (unint64_t)&v14;
  return std::__hash_table<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long &&>,std::tuple<>>(a1, &v14, (uint64_t)&std::piecewise_construct, (_QWORD **)&v15)+ 3;
}

void sub_191CDCE6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *___ZN7CoreNLP13TaggerManager15enumerateTokensE15NLTokenizerUnit7CFRangemU13block_pointerFv7NLTokenPbE_block_invoke(_QWORD *result, uint64_t *a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v3 = *a2;
  v4 = result[5];
  v5 = *a2 == -1 || v4 == -1;
  if (!v5 && (v3 >= v4 ? (v6 = a2[1] + v3 <= result[6] + v4) : (v6 = 0), v6))
  {
    v7 = result[4];
    v9 = a2[2];
    v8 = *(_OWORD *)a2;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, __int128 *, _BYTE *))(v7 + 16))(v7, &v8, a3);
  }
  else if (a3)
  {
    *a3 = 1;
  }
  return result;
}

_QWORD *___ZN7CoreNLP13TaggerManager15enumerateTokensE15NLTokenizerUnit7CFRangemU13block_pointerFv7NLTokenPbE_block_invoke_2(_QWORD *result, __int128 *a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  if (*(_QWORD *)a2 == -1
    || ((v3 = *(_QWORD *)(result[5] + 128) + *(_QWORD *)a2, *(_QWORD *)a2 = v3, v4 = result[6], v3 != -1)
      ? (v5 = v4 == -1)
      : (v5 = 1),
        v5 || (v3 >= v4 ? (v6 = *((_QWORD *)a2 + 1) + v3 <= result[7] + v4) : (v6 = 0), !v6)))
  {
    if (a3)
      *a3 = 1;
  }
  else
  {
    v7 = result[4];
    v9 = *((_QWORD *)a2 + 2);
    v8 = *a2;
    return (_QWORD *)(*(uint64_t (**)(uint64_t, __int128 *, _BYTE *))(v7 + 16))(v7, &v8, a3);
  }
  return result;
}

__CFString *CoreNLP::TaggerManager::copyTagForCurrentToken(CoreNLP::CompositeTagger **this, const __CFString *a2)
{
  if (*((_BYTE *)this + 57))
    return 0;
  else
    return CoreNLP::CompositeTagger::copyTagForCurrentToken(this[5], a2);
}

__CFDictionary *CoreNLP::TaggerManager::copyTagAndProbabilityForCurrentToken(CoreNLP::CompositeTagger **this, const __CFString *a2)
{
  if (*((_BYTE *)this + 57))
    return 0;
  else
    return CoreNLP::CompositeTagger::copyTagAndProbabilityForCurrentToken(this[5], a2);
}

const __CFString *CoreNLP::TaggerManager::getTokenAtIndex@<X0>(const __CFString *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  const __CFString *v8;
  CoreNLP::Tagger **RuleBasedTagger;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  CFRange v15;

  if (a3 < 0)
    goto LABEL_22;
  v5 = (uint64_t)result;
  result = (const __CFString *)result[1].data;
  if (!result)
    goto LABEL_22;
  result = (const __CFString *)CFStringGetLength(result);
  if ((uint64_t)result <= a3)
    goto LABEL_22;
  if (*(_BYTE *)(v5 + 57))
  {
    if (a2 == 3)
    {
      v8 = *(const __CFString **)(v5 + 48);
      if (v8)
      {
        *a4 = 0;
        result = (const __CFString *)CFStringGetLength(v8);
        a4[1] = result;
        a4[2] = 0;
        return result;
      }
    }
    v13 = 0uLL;
    v14 = 0;
    RuleBasedTagger = (CoreNLP::Tagger **)CoreNLP::TaggerManager::getRuleBasedTagger(v5, a2);
    CoreNLP::Tagger::getTokenAtIndex(*RuleBasedTagger, a3, (uint64_t)&v13);
    v11 = *((_QWORD *)&v13 + 1);
    v10 = v13;
  }
  else
  {
    if (*(uint64_t *)(v5 + 144) <= 0)
    {
      v15.location = a3;
      v15.length = 1;
      CoreNLP::TaggerManager::loadStringForCompositeTagger((CoreNLP::TaggerManager *)v5, v15);
      v12 = *(_QWORD *)(v5 + 128);
    }
    else
    {
      v12 = *(_QWORD *)(v5 + 128);
      if (v12 > a3 || *(_QWORD *)(v5 + 136) + v12 <= a3)
        goto LABEL_22;
    }
    v13 = 0uLL;
    v14 = 0;
    CoreNLP::CompositeTagger::getTokenAtIndex(*(CoreNLP::CompositeTagger **)(v5 + 40), a2, a3 - v12, (uint64_t)&v13);
    if ((_QWORD)v13 == -1)
    {
      v10 = -1;
    }
    else
    {
      v10 = *(_QWORD *)(v5 + 128) + v13;
      *(_QWORD *)&v13 = v10;
    }
    v11 = *((_QWORD *)&v13 + 1);
  }
  result = (const __CFString *)CFStringGetLength(*(CFStringRef *)(v5 + 48));
  if (v10 != -1 && (v10 & 0x8000000000000000) == 0 && v11 + v10 <= (uint64_t)result)
  {
    *(_OWORD *)a4 = v13;
    a4[2] = v14;
    return result;
  }
LABEL_22:
  a4[1] = 0;
  a4[2] = 0;
  *a4 = -1;
  return result;
}

__CFString *CoreNLP::TaggerManager::copyTagAtIndex(uint64_t a1, unsigned int a2, CFIndex a3, const __CFString *a4)
{
  const __CFString *v5;
  CFIndex v10;
  CFRange v11;

  if (a3 < 0)
    return 0;
  v5 = *(const __CFString **)(a1 + 48);
  if (!v5 || CFStringGetLength(v5) <= a3 || *(_BYTE *)(a1 + 57))
    return 0;
  if (*(uint64_t *)(a1 + 144) <= 0)
  {
    v11.location = a3;
    v11.length = 1;
    CoreNLP::TaggerManager::loadStringForCompositeTagger((CoreNLP::TaggerManager *)a1, v11);
    v10 = *(_QWORD *)(a1 + 128);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 128);
    if (v10 > a3 || *(_QWORD *)(a1 + 136) + v10 <= a3)
      return 0;
  }
  return CoreNLP::CompositeTagger::copyTagAtIndex(*(CoreNLP::CompositeTagger **)(a1 + 40), a2, a3 - v10, a4);
}

__CFDictionary *CoreNLP::TaggerManager::copyTagAndProbabilityAtIndex(uint64_t a1, unsigned int a2, CFIndex a3, CFStringRef theString1, uint64_t a5)
{
  int v10;
  uint64_t v11;
  __CFString *v12;
  __CFString *v13;
  CoreNLP::NLAttributedToken *AttributedTokenAtIndex;
  const __CFAllocator *v15;
  __CFDictionary *Mutable;
  uint64_t **v17;
  int *v18;
  int *v19;
  __CFString *EmotionLabelFromTagID;
  int *v21;
  CFNumberRef v22;
  void *v23;
  CFNumberRef v24;
  uint64_t *v26;
  char *v27;
  int i;
  int v29;
  char *v30;
  int v31;
  uint64_t j;
  int v33;
  int v34;
  char *v35;
  int v36;
  char *v37;
  int v38;
  BOOL v39;
  char **v40;
  int *v41;
  int *v42;
  uint64_t v43;
  uint64_t valuePtr;
  void *key;
  int v46;
  int *v47;

  v10 = CoreNLP::CompositeTagger::schemeType(*(CoreNLP::CompositeTagger **)(a1 + 40), theString1);
  v46 = v10;
  v11 = *(_QWORD *)(a1 + 40);
  if (a5 >= 2 && v10 == 12)
    *(_DWORD *)(v11 + 844) = a5;
  v12 = CoreNLP::TaggerManager::copyTagAtIndex(a1, a2, a3, theString1);
  key = v12;
  if (!v12)
    return 0;
  v13 = v12;
  AttributedTokenAtIndex = CoreNLP::CompositeTagger::getAttributedTokenAtIndex(*(CoreNLP::CompositeTagger **)(a1 + 40), a2, a3);
  valuePtr = 0x3FF0000000000000;
  if ((v46 - 5) > 0xFFFFFFFD || CFEqual(theString1, kNLTagSchemeLemma[0]))
    goto LABEL_7;
  v27 = (char *)AttributedTokenAtIndex + 32;
  v26 = (uint64_t *)*((_QWORD *)AttributedTokenAtIndex + 4);
  for (i = v46; v26; v26 = (uint64_t *)*v26)
  {
    v29 = *((_DWORD *)v26 + 8);
    if (v46 >= v29)
    {
      if (v29 >= v46)
      {
        v41 = &v46;
        valuePtr = (uint64_t)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)AttributedTokenAtIndex + 3, &v46, (uint64_t)&std::piecewise_construct, &v41)[6];
        i = v46;
        break;
      }
      ++v26;
    }
  }
  if (i != 7)
    goto LABEL_39;
  v30 = *(char **)v27;
  if (!*(_QWORD *)v27)
    goto LABEL_39;
  while (1)
  {
    v31 = *((_DWORD *)v30 + 8);
    if (v31 <= 6)
      break;
LABEL_35:
    v30 = *(char **)v30;
    if (!v30)
      goto LABEL_39;
  }
  if (v31 != 6)
  {
    v30 += 8;
    goto LABEL_35;
  }
  if (!CoreNLP::CompositeTagger::isNERTag(*(CoreNLP::CompositeTagger **)(a1 + 40), v13))
  {
    LODWORD(v47) = 6;
    v41 = (int *)&v47;
    valuePtr = (uint64_t)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)AttributedTokenAtIndex + 3, (int *)&v47, (uint64_t)&std::piecewise_construct, &v41)[6];
  }
LABEL_39:
  if (*(_DWORD *)(v11 + 936) == 4)
  {
    valuePtr = 0x3FF0000000000000;
    if (v46 == 7)
    {
      for (j = *(_QWORD *)(v11 + 912); j != *(_QWORD *)(v11 + 920); j += 112)
      {
        if (*(_QWORD *)j <= a3 && *(_QWORD *)(j + 8) + *(_QWORD *)j > a3)
        {
          v41 = &v46;
          valuePtr = (uint64_t)std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)(j + 24), &v46, (uint64_t)&std::piecewise_construct, &v41)[6];
          break;
        }
      }
    }
  }
  if (CFEqual(theString1, kNLTagSchemeNamedEntityOrLexicalClass[0]))
  {
    v33 = 11;
  }
  else
  {
    v34 = CFEqual(theString1, kNLTagSchemeLemma[0]);
    v33 = v46;
    if (v34)
      v33 = 10;
  }
  v35 = *(char **)v27;
  if (*(_QWORD *)v27)
  {
    v36 = v33 + 201;
    v37 = (char *)AttributedTokenAtIndex + 32;
    do
    {
      v38 = *((_DWORD *)v35 + 8);
      v39 = v38 < v36;
      if (v38 >= v36)
        v40 = (char **)v35;
      else
        v40 = (char **)(v35 + 8);
      if (!v39)
        v37 = v35;
      v35 = *v40;
    }
    while (*v40);
    if (v37 != v27 && v36 >= *((_DWORD *)v37 + 8))
      valuePtr = 0x3FF0000000000000;
  }
LABEL_7:
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (a5 >= 2 && v46 == 12)
  {
    v47 = &v46;
    v17 = std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)AttributedTokenAtIndex + 6, &v46, (uint64_t)&std::piecewise_construct, &v47);
    v42 = 0;
    v43 = 0;
    v41 = 0;
    std::vector<std::pair<int,double>>::__init_with_size[abi:ne180100]<std::pair<int,double>*,std::pair<int,double>*>((char *)&v41, (__int128 *)v17[5], (__int128 *)v17[6], ((char *)v17[6] - (char *)v17[5]) >> 4);
    v18 = v41;
    v19 = v42;
    if (v41 != v42)
    {
      do
      {
        EmotionLabelFromTagID = CoreNLP::CompositeTagger::getEmotionLabelFromTagID(*(CoreNLP::CompositeTagger **)(a1 + 40), *v18);
        v21 = v18 + 2;
        v22 = CFNumberCreate(v15, kCFNumberDoubleType, v21);
        v47 = (int *)v22;
        CFDictionaryAddValue(Mutable, EmotionLabelFromTagID, v22);
        if (v22)
          CFRelease(v22);
        v18 = v21 + 2;
      }
      while (v18 != v19);
      v18 = v41;
    }
    if (v18)
    {
      v42 = v18;
      operator delete(v18);
    }
    v23 = key;
  }
  else
  {
    v24 = CFNumberCreate(v15, kCFNumberDoubleType, &valuePtr);
    v41 = (int *)v24;
    v23 = key;
    CFDictionaryAddValue(Mutable, key, v24);
    if (v24)
      CFRelease(v24);
  }
  if (v23)
    CFRelease(v23);
  return Mutable;
}

void sub_191CDD5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, uint64_t a15, char a16)
{
  nlp::CFScopedPtr<__CFString const*>::reset(&a14, 0);
  _Unwind_Resume(a1);
}

__CFDictionary *CoreNLP::TaggerManager::copyLanguageMapAtIndex(uint64_t a1, unsigned int a2, CFIndex a3)
{
  const __CFString *v4;
  CFIndex v8;
  CFRange v9;

  if (a3 < 0)
    return 0;
  v4 = *(const __CFString **)(a1 + 48);
  if (!v4 || CFStringGetLength(v4) <= a3 || *(_BYTE *)(a1 + 57))
    return 0;
  if (*(uint64_t *)(a1 + 144) <= 0)
  {
    v9.location = a3;
    v9.length = 1;
    CoreNLP::TaggerManager::loadStringForCompositeTagger((CoreNLP::TaggerManager *)a1, v9);
    v8 = *(_QWORD *)(a1 + 128);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 128);
    if (v8 > a3 || *(_QWORD *)(a1 + 136) + v8 <= a3)
      return 0;
  }
  return CoreNLP::CompositeTagger::copyLanguageMapAtIndex(*(CoreNLP::CompositeTagger **)(a1 + 40), a2, a3 - v8);
}

void CoreNLP::TaggerManager::~TaggerManager(CoreNLP::TaggerManager *this)
{
  const void *v2;
  uint64_t v3;

  v2 = (const void *)*((_QWORD *)this + 6);
  if (v2)
    CFRelease(v2);
  CoreNLP::TaggerContext::~TaggerContext((CoreNLP::TaggerManager *)((char *)this + 64));
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__hash_table<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::__unordered_map_hasher<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,std::unique_ptr<CoreNLP::SubWordTagger>>>>::~__hash_table((uint64_t)this);
}

CoreNLP::CompositeTagger *CoreNLP::TaggerManager::setGazetteers(CoreNLP::TaggerManager *this, const __CFArray *a2, const __CFString *a3)
{
  CoreNLP::CompositeTagger *result;

  result = (CoreNLP::CompositeTagger *)*((_QWORD *)this + 5);
  if (result)
    return (CoreNLP::CompositeTagger *)CoreNLP::CompositeTagger::setGazetteers(result, a2, a3);
  return result;
}

void corelm::modelPathToOptions(uint64_t a1@<X0>, uint64_t a2@<X1>, CFDictionaryRef *a3@<X8>)
{
  const void **v6;
  void *v7;
  const void *v8;
  int v9;
  const UInt8 *v10;
  CFIndex v11;
  const void **v12;
  void *v13;
  const void *v14;
  int v15;
  const UInt8 *v16;
  CFIndex v17;
  uint64_t v18;
  const void *v19;
  const void *v20;
  std::runtime_error *exception;
  std::runtime_error *v22;
  _QWORD v23[2];
  CFTypeRef cf;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD v31[2];

  v31[1] = *MEMORY[0x1E0C80C00];
  v28 = 0;
  v29 = &v28;
  v30 = 0x2020000000;
  v6 = (const void **)getkMRLNeuralNetworkOptionModelURLKeySymbolLoc(void)::ptr;
  v31[0] = getkMRLNeuralNetworkOptionModelURLKeySymbolLoc(void)::ptr;
  if (!getkMRLNeuralNetworkOptionModelURLKeySymbolLoc(void)::ptr)
  {
    v7 = (void *)MontrealLibrary();
    v6 = (const void **)dlsym(v7, "kMRLNeuralNetworkOptionModelURLKey");
    v29[3] = (uint64_t)v6;
    getkMRLNeuralNetworkOptionModelURLKeySymbolLoc(void)::ptr = (uint64_t)v6;
  }
  _Block_object_dispose(&v28, 8);
  if (!v6)
  {
    _MRLNeuralNetworkGetOutput();
    goto LABEL_44;
  }
  v8 = *v6;
  if (v8)
    CFRetain(v8);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v27, v8);
  v9 = *(char *)(a1 + 23);
  if (v9 >= 0)
    v10 = (const UInt8 *)a1;
  else
    v10 = *(const UInt8 **)a1;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a1 + 23);
  else
    v11 = *(_QWORD *)(a1 + 8);
  v26 = CFURLCreateWithBytes(0, v10, v11, 0, 0);
  if (!v26)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v28 = 0;
  v29 = &v28;
  v30 = 0x2020000000;
  v12 = (const void **)getkMRLNeuralNetworkOptionEngineKeySymbolLoc(void)::ptr;
  v31[0] = getkMRLNeuralNetworkOptionEngineKeySymbolLoc(void)::ptr;
  if (!getkMRLNeuralNetworkOptionEngineKeySymbolLoc(void)::ptr)
  {
    v13 = (void *)MontrealLibrary();
    v12 = (const void **)dlsym(v13, "kMRLNeuralNetworkOptionEngineKey");
    v29[3] = (uint64_t)v12;
    getkMRLNeuralNetworkOptionEngineKeySymbolLoc(void)::ptr = (uint64_t)v12;
  }
  _Block_object_dispose(&v28, 8);
  if (!v12)
  {
    dlerror();
    abort_report_np();
LABEL_44:
    __break(1u);
  }
  v14 = *v12;
  if (v14)
    CFRetain(v14);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v25, v14);
  v15 = *(char *)(a2 + 23);
  if (v15 >= 0)
    v16 = (const UInt8 *)a2;
  else
    v16 = *(const UInt8 **)a2;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a2 + 23);
  else
    v17 = *(_QWORD *)(a2 + 8);
  cf = CFStringCreateWithBytes(0, v16, v17, 0x8000100u, 0);
  if (!cf)
  {
    v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "Could not construct");
    __cxa_throw(v22, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef &,applesauce::CF::URLRef &>(&v28, &v27, &v26);
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef &,applesauce::CF::URLRef &>(&v30, &v25, &cf);
  v23[0] = &v28;
  v23[1] = 2;
  v18 = 0;
  *a3 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v23);
  do
  {
    v19 = (const void *)v31[v18];
    if (v19)
      CFRelease(v19);
    v20 = (const void *)v31[v18 - 1];
    if (v20)
      CFRelease(v20);
    v18 -= 2;
  }
  while (v18 != -4);
  if (cf)
    CFRelease(cf);
  if (v25)
    CFRelease(v25);
  if (v26)
    CFRelease(v26);
  if (v27)
    CFRelease(v27);
}

void sub_191CDDA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, const void *a14, CFTypeRef cf, const void *a16, __int16 a17, char a18, char a19)
{
  applesauce::CF::StringRef::~StringRef(&a14);
  applesauce::CF::URLRef::~URLRef(&cf);
  applesauce::CF::StringRef::~StringRef(&a16);
  _Unwind_Resume(a1);
}

uint64_t corelm::NeuralNetwork::NeuralNetwork(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFDictionary *v4;
  __CFError **v5;
  const void *v6;
  __CFDictionary *v8;

  corelm::modelPathToOptions(a2, a3, &v8);
  v4 = v8;
  v6 = (const void *)_MRLNeuralNetworkCreate(v8, v5);
  corelm::NeuralNetwork::NeuralNetwork(a1, v6);
  if (v4)
    CFRelease(v4);
  return a1;
}

void sub_191CDDBB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t corelm::NeuralNetwork::NeuralNetwork(uint64_t a1, const __CFDictionary **a2)
{
  const void *v3;

  v3 = (const void *)_MRLNeuralNetworkCreate(*a2, a2);
  return corelm::NeuralNetwork::NeuralNetwork(a1, v3);
}

uint64_t _MRLNeuralNetworkCreate(const __CFDictionary *a1, __CFError **a2)
{
  void *v3;
  void *v4;
  _Unwind_Exception *Output;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v3 = getMRLNeuralNetworkCreateSymbolLoc(void)::ptr;
  v10 = getMRLNeuralNetworkCreateSymbolLoc(void)::ptr;
  if (!getMRLNeuralNetworkCreateSymbolLoc(void)::ptr)
  {
    v4 = (void *)MontrealLibrary();
    v3 = dlsym(v4, "MRLNeuralNetworkCreate");
    v8[3] = (uint64_t)v3;
    getMRLNeuralNetworkCreateSymbolLoc(void)::ptr = v3;
  }
  _Block_object_dispose(&v7, 8);
  if (!v3)
  {
    Output = (_Unwind_Exception *)_MRLNeuralNetworkGetOutput();
    _Block_object_dispose(&v7, 8);
    _Unwind_Resume(Output);
  }
  return ((uint64_t (*)(const __CFDictionary *, _QWORD))v3)(a1, 0);
}

uint64_t corelm::NeuralNetwork::NeuralNetwork(uint64_t a1, const void *a2)
{
  std::vector<std::string> *v4;
  std::vector<std::string> *v5;
  std::runtime_error *exception;
  __int128 v8;
  uint64_t v9;
  void **v10;

  *(_OWORD *)(a1 + 32) = 0u;
  v4 = (std::vector<std::string> *)(a1 + 32);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  v5 = (std::vector<std::string> *)(a1 + 8);
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  nlp::CFScopedPtr<MontrealNeuralNetwork *>::reset((const void **)a1, a2);
  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "MRLNeuralNetworkCreate returned nullptr");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  corelm::getNames<__CFDictionary const* (*)(MontrealNeuralNetwork *)>(_MRLNeuralNetworkCopyInputNamesAndDimensions, *(_QWORD *)a1, (uint64_t *)&v8);
  std::vector<std::string>::__vdeallocate(v5);
  *(_OWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  v9 = 0;
  v8 = 0uLL;
  v10 = (void **)&v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
  corelm::getNames<__CFDictionary const* (*)(MontrealNeuralNetwork *)>(_MRLNeuralNetworkCopyOutputNamesAndDimensions, *(_QWORD *)a1, (uint64_t *)&v8);
  std::vector<std::string>::__vdeallocate(v4);
  *(_OWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  v9 = 0;
  v8 = 0uLL;
  v10 = (void **)&v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
  return a1;
}

void sub_191CDDDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  std::__tree<std::string>::destroy(v11, *(char **)(v9 + 88));
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v10, *(_QWORD **)(v9 + 64));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  nlp::CFScopedPtr<MontrealNeuralNetwork *>::reset((const void **)v9, 0);
  _Unwind_Resume(a1);
}

void corelm::getNames<__CFDictionary const* (*)(MontrealNeuralNetwork *)>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  const void *v4;
  CFTypeRef v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10[2];
  uint64_t v11;
  void *__p;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _BYTE *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  void *v24;
  void *v25;
  CFTypeRef v26;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = (const void *)a1(a2);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v26, v4);
  v5 = v26;
  if (v26)
  {
    CFRetain(v26);
    CFRelease(v5);
  }
  applesauce::CF::DictionaryRef_iterator<std::string,std::vector<long>>::DictionaryRef_iterator((uint64_t)&v20, (CFDictionaryRef)v5);
  applesauce::CF::DictionaryRef_iterator<std::string,std::vector<long>>::DictionaryRef_iterator((uint64_t)&v14, (CFDictionaryRef)v5);
  v15 = (v17 - (_BYTE *)v16) >> 3;
  while (1)
  {
    if (v20 && v21 != (v23 - v22) >> 3)
    {
      v6 = v14;
      goto LABEL_10;
    }
    v6 = v14;
    if (!v14 || v15 == (v17 - (_BYTE *)v16) >> 3)
      break;
LABEL_10:
    if (v20 == v6 && v21 == v15)
      break;
    applesauce::CF::DictionaryRef_iterator<std::string,std::vector<long>>::dereference(&v20, (uint64_t)v10);
    v7 = a3[1];
    if (v7 >= a3[2])
    {
      v9 = std::vector<std::string>::__emplace_back_slow_path<std::string&>(a3, (__int128 *)v10);
    }
    else
    {
      if (SHIBYTE(v11) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3[1], (const std::string::value_type *)v10[0], (std::string::size_type)v10[1]);
      }
      else
      {
        v8 = *(_OWORD *)v10;
        *(_QWORD *)(v7 + 16) = v11;
        *(_OWORD *)v7 = v8;
      }
      v9 = v7 + 24;
      a3[1] = v7 + 24;
    }
    a3[1] = v9;
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v11) < 0)
      operator delete(v10[0]);
    ++v21;
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (v26)
    CFRelease(v26);
}

void sub_191CDE008(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 88) = v1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 88));
  _Unwind_Resume(a1);
}

uint64_t _MRLNeuralNetworkCopyInputNamesAndDimensions(uint64_t a1)
{
  void *v2;
  void *v3;
  _Unwind_Exception *Output;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v2 = getMRLNeuralNetworkCopyInputNamesAndDimensionsSymbolLoc(void)::ptr;
  v9 = getMRLNeuralNetworkCopyInputNamesAndDimensionsSymbolLoc(void)::ptr;
  if (!getMRLNeuralNetworkCopyInputNamesAndDimensionsSymbolLoc(void)::ptr)
  {
    v3 = (void *)MontrealLibrary();
    v2 = dlsym(v3, "MRLNeuralNetworkCopyInputNamesAndDimensions");
    v7[3] = (uint64_t)v2;
    getMRLNeuralNetworkCopyInputNamesAndDimensionsSymbolLoc(void)::ptr = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    Output = (_Unwind_Exception *)_MRLNeuralNetworkGetOutput();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(Output);
  }
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

uint64_t _MRLNeuralNetworkCopyOutputNamesAndDimensions(uint64_t a1)
{
  void *v2;
  void *v3;
  _Unwind_Exception *Output;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v2 = getMRLNeuralNetworkCopyOutputNamesAndDimensionsSymbolLoc(void)::ptr;
  v9 = getMRLNeuralNetworkCopyOutputNamesAndDimensionsSymbolLoc(void)::ptr;
  if (!getMRLNeuralNetworkCopyOutputNamesAndDimensionsSymbolLoc(void)::ptr)
  {
    v3 = (void *)MontrealLibrary();
    v2 = dlsym(v3, "MRLNeuralNetworkCopyOutputNamesAndDimensions");
    v7[3] = (uint64_t)v2;
    getMRLNeuralNetworkCopyOutputNamesAndDimensionsSymbolLoc(void)::ptr = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    Output = (_Unwind_Exception *)_MRLNeuralNetworkGetOutput();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(Output);
  }
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

void corelm::NeuralNetwork::predict(corelm::NeuralNetwork *this)
{
  uint64_t v1;

  v1 = 0;
  corelm::NeuralNetwork::predict((uint64_t *)this, &v1);
}

void sub_191CDE1DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)va);
  _Unwind_Resume(a1);
}

void corelm::NeuralNetwork::predict(uint64_t *a1, uint64_t *a2)
{
  _MRLNeuralNetworkPredict(*a1, *a2);
  corelm::NeuralNetwork::releaseInputTensor((corelm::NeuralNetwork *)a1);
}

uint64_t _MRLNeuralNetworkPredict(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  _Unwind_Exception *Output;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v4 = getMRLNeuralNetworkPredictSymbolLoc(void)::ptr;
  v11 = getMRLNeuralNetworkPredictSymbolLoc(void)::ptr;
  if (!getMRLNeuralNetworkPredictSymbolLoc(void)::ptr)
  {
    v5 = (void *)MontrealLibrary();
    v4 = dlsym(v5, "MRLNeuralNetworkPredict");
    v9[3] = (uint64_t)v4;
    getMRLNeuralNetworkPredictSymbolLoc(void)::ptr = v4;
  }
  _Block_object_dispose(&v8, 8);
  if (!v4)
  {
    Output = (_Unwind_Exception *)_MRLNeuralNetworkGetOutput();
    _Block_object_dispose(&v8, 8);
    _Unwind_Resume(Output);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v4)(a1, a2, 0);
}

void corelm::NeuralNetwork::clear(corelm::NeuralNetwork *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  _Unwind_Exception *Output;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v2 = *(_QWORD *)this;
  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v3 = getMRLNeuralNetworkClearSymbolLoc(void)::ptr;
  v9 = getMRLNeuralNetworkClearSymbolLoc(void)::ptr;
  if (!getMRLNeuralNetworkClearSymbolLoc(void)::ptr)
  {
    v4 = (void *)MontrealLibrary();
    v3 = dlsym(v4, "MRLNeuralNetworkClear");
    v7[3] = (uint64_t)v3;
    getMRLNeuralNetworkClearSymbolLoc(void)::ptr = v3;
  }
  _Block_object_dispose(&v6, 8);
  if (!v3)
  {
    Output = (_Unwind_Exception *)_MRLNeuralNetworkGetOutput();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(Output);
  }
  ((void (*)(uint64_t, _QWORD))v3)(v2, 0);
  corelm::NeuralNetwork::releaseInputTensor(this);
}

uint64_t corelm::NeuralNetwork::outputDimension(uint64_t *a1, const UInt8 *a2)
{
  uint64_t v2;
  CFIndex v3;
  CFIndex v4;
  CFStringRef v5;
  CFStringRef v6;
  uint64_t OutputDimension;
  std::runtime_error *exception;

  v2 = *a1;
  v3 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v4 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v4 = v3;
  }
  v5 = CFStringCreateWithBytes(0, a2, v4, 0x8000100u, 0);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = v5;
  OutputDimension = _MRLNeuralNetworkGetOutputDimension(v2, (uint64_t)v5);
  CFRelease(v6);
  return OutputDimension;
}

void sub_191CDE430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t _MRLNeuralNetworkGetOutputDimension(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  _Unwind_Exception *Output;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v4 = getMRLNeuralNetworkGetOutputDimensionSymbolLoc(void)::ptr;
  v11 = getMRLNeuralNetworkGetOutputDimensionSymbolLoc(void)::ptr;
  if (!getMRLNeuralNetworkGetOutputDimensionSymbolLoc(void)::ptr)
  {
    v5 = (void *)MontrealLibrary();
    v4 = dlsym(v5, "MRLNeuralNetworkGetOutputDimension");
    v9[3] = (uint64_t)v4;
    getMRLNeuralNetworkGetOutputDimensionSymbolLoc(void)::ptr = v4;
  }
  _Block_object_dispose(&v8, 8);
  if (!v4)
  {
    Output = (_Unwind_Exception *)_MRLNeuralNetworkGetOutput();
    _Block_object_dispose(&v8, 8);
    _Unwind_Resume(Output);
  }
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t corelm::NeuralNetwork::outputDimension(corelm::NeuralNetwork *this)
{
  return _MRLNeuralNetworkGetOutputDimension(*(_QWORD *)this, 0);
}

applesauce::CF::ArrayRef *corelm::NeuralNetwork::copyStates@<X0>(corelm::NeuralNetwork *this@<X0>, applesauce::CF::ArrayRef *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  void *v5;
  const void *v6;
  _Unwind_Exception *Output;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;

  v3 = *(_QWORD *)this;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v4 = getMRLNeuralNetworkCopyStatesSymbolLoc(void)::ptr;
  v12 = getMRLNeuralNetworkCopyStatesSymbolLoc(void)::ptr;
  if (!getMRLNeuralNetworkCopyStatesSymbolLoc(void)::ptr)
  {
    v5 = (void *)MontrealLibrary();
    v4 = dlsym(v5, "MRLNeuralNetworkCopyStates");
    v10[3] = (uint64_t)v4;
    getMRLNeuralNetworkCopyStatesSymbolLoc(void)::ptr = v4;
  }
  _Block_object_dispose(&v9, 8);
  if (!v4)
  {
    Output = (_Unwind_Exception *)_MRLNeuralNetworkGetOutput();
    _Block_object_dispose(&v9, 8);
    _Unwind_Resume(Output);
  }
  v6 = (const void *)((uint64_t (*)(uint64_t, _QWORD))v4)(v3, 0);
  return applesauce::CF::ArrayRef::ArrayRef(a2, v6);
}

_QWORD *applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef &,applesauce::CF::URLRef &>(_QWORD *a1, CFTypeRef *a2, const void **a3)
{
  CFTypeRef v5;
  const void *v6;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v5;
  v6 = *a3;
  if (v6)
    CFRetain(v6);
  a1[1] = v6;
  return a1;
}

_QWORD *applesauce::CF::DictionaryRef_iterator<std::string,std::vector<long>>::~DictionaryRef_iterator(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t applesauce::CF::DictionaryRef_iterator<std::string,std::vector<long>>::DictionaryRef_iterator(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v3;
  CFIndex Count;

  *(_QWORD *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  v3 = a1 + 40;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  if (theDict)
  {
    Count = CFDictionaryGetCount(theDict);
    std::vector<NLLanguageHypothesis>::resize(a1 + 16, Count);
    std::vector<NLLanguageHypothesis>::resize(v3, Count);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), *(const void ***)(a1 + 40));
  }
  return a1;
}

double applesauce::CF::DictionaryRef_iterator<std::string,std::vector<long>>::dereference@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v5;
  double result;
  std::logic_error *exception;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v3 = a1[1];
  if ((v3 & 0x8000000000000000) != 0 || (v5 = a1[2], v3 >= (a1[3] - v5) >> 3))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "DictionaryRef_iterator iterator out of range.");
    __cxa_throw(exception, (struct type_info *)off_1E2DEE998, (void (*)(void *))MEMORY[0x1E0DE42E0]);
  }
  applesauce::CF::convert_to<std::string,0>(*(const __CFString **)(v5 + 8 * v3), (uint64_t)&v10);
  applesauce::CF::convert_to<std::vector<long>,0>(*(const void **)(a1[5] + 8 * a1[1]), (uint64_t)&v8);
  *(_OWORD *)a2 = v10;
  *(_QWORD *)(a2 + 16) = v11;
  result = *(double *)&v8;
  *(_OWORD *)(a2 + 24) = v8;
  *(_QWORD *)(a2 + 40) = v9;
  return result;
}

void sub_191CDE84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::mecab::KoreanWordConnector::connect(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (!a2)
    return 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (!v3
    || *(_BYTE *)(v3 + 91) == 3
    || a1
    && ((*(_QWORD *)(a2 + 64) - a1) >> 1) + ((unint64_t)*(unsigned __int16 *)(a2 + 80) >> 1) != (*(_QWORD *)(v3 + 64) - a1) >> 1)
  {
    return 0;
  }
  v4 = 0;
  do
  {
    if ((result & 1) != 0)
      break;
  }
  while (v4++ != 23);
  return result;
}

BOOL CoreNLP::mecab::`anonymous namespace'::PosRule1(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;

  v2 = *(unsigned __int16 *)(a2 + 88);
  v3 = v2 - 8;
  v4 = v2 - 2048;
  return v3 < 9 || v4 < 0x900;
}

BOOL CoreNLP::mecab::`anonymous namespace'::PosRule2(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;

  v2 = *(unsigned __int16 *)(a2 + 88);
  v3 = v2 - 1;
  v4 = v2 - 256;
  return v3 < 6 || v4 < 0x600;
}

BOOL CoreNLP::mecab::`anonymous namespace'::PosRule3(uint64_t a1, uint64_t a2)
{
  return *(_WORD *)(a1 + 88) == 29 && *(unsigned __int16 *)(a2 + 88) == 41;
}

BOOL CoreNLP::mecab::`anonymous namespace'::PosRule4(uint64_t a1, uint64_t a2)
{
  return *(_WORD *)(a1 + 88) == 28 && *(unsigned __int16 *)(a2 + 88) == 41;
}

BOOL CoreNLP::mecab::`anonymous namespace'::PosRule5(uint64_t a1, uint64_t a2)
{
  return *(_WORD *)(a1 + 88) == 29 && *(unsigned __int16 *)(a2 + 86) - 748 < 0x159;
}

BOOL CoreNLP::mecab::`anonymous namespace'::PosRule6(uint64_t a1, uint64_t a2)
{
  return *(_WORD *)(a1 + 88) == 38 && *(unsigned __int16 *)(a2 + 88) - 20 < 6;
}

BOOL CoreNLP::mecab::`anonymous namespace'::PosRule7(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (*(_WORD *)(a1 + 88) != 39)
    return 0;
  v2 = *(unsigned __int16 *)(a2 + 88);
  v4 = (v2 - 40) >= 3;
  v3 = v2 - 10240;
  v4 = v4 && v3 >= 0x300;
  return !v4;
}

BOOL CoreNLP::mecab::`anonymous namespace'::PosRule8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  int v3;
  uint64_t v4;
  _WORD *i;
  int v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  int v19;

  v2 = 0;
  v18 = 5636182;
  v19 = 4259926;
  v17 = 5767254;
  v3 = *(unsigned __int16 *)(a1 + 88);
  if ((v3 - 8) < 9 || (v3 - 2048) < 0x900)
    return v2;
  v4 = *(_QWORD *)(a2 + 72);
  for (i = (_WORD *)(v4 + 2); ; ++i)
  {
    v6 = (unsigned __int16)*(i - 1);
    if (v6 == 43)
      break;
    if (!*(i - 1) || v6 == 44)
      return 0;
LABEL_9:
    ;
  }
  if (*i != 69)
    goto LABEL_9;
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = *(unsigned __int16 *)(v4 + v7);
    if (!*(_WORD *)(v4 + v7))
      break;
    if (v9 == 44)
      break;
    if (v9 != *(unsigned __int16 *)((char *)&v19 + v7))
      break;
    v8 = v7 != 0;
    v7 += 2;
  }
  while (v7 != 4);
  if (v8)
    return 0;
  v10 = 0;
  v11 = 0;
  do
  {
    v12 = *(unsigned __int16 *)(v4 + v10);
    if (!*(_WORD *)(v4 + v10))
      break;
    if (v12 == 44)
      break;
    if (v12 != *(unsigned __int16 *)((char *)&v18 + v10))
      break;
    v11 = v10 != 0;
    v10 += 2;
  }
  while (v10 != 4);
  if (v11)
    return 0;
  v14 = 0;
  v15 = 0;
  do
  {
    v16 = *(unsigned __int16 *)(v4 + v14);
    if (!*(_WORD *)(v4 + v14))
      break;
    if (v16 == 44)
      break;
    if (v16 != *(unsigned __int16 *)((char *)&v17 + v14))
      break;
    v15 = v14 != 0;
    v14 += 2;
  }
  while (v14 != 4);
  return !v15;
}

BOOL CoreNLP::mecab::`anonymous namespace'::PosRule9(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (*(_WORD *)(a1 + 86) != 1093)
    return 0;
  v2 = *(unsigned __int16 *)(a2 + 88);
  v4 = (v2 - 40) >= 3;
  v3 = v2 - 10240;
  v4 = v4 && v3 >= 0x300;
  return !v4;
}

BOOL CoreNLP::mecab::`anonymous namespace'::PosRule10(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *(unsigned __int16 *)(a2 + 88);
  if (v2 == 35 || (v2 & 0xFF00) == 8960)
  {
    return 1;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = *(_QWORD *)(a2 + 72);
    do
    {
      v8 = *(unsigned __int16 *)(v7 + 2 * v6);
      if (!*(_WORD *)(v7 + 2 * v6))
        break;
      if (v8 == 44)
        break;
      if (v8 != (unsigned __int16)aVcpvcn[v6])
        break;
      v5 = v6++ > 1;
    }
    while (v6 != 3);
  }
  return v5;
}

uint64_t CoreNLP::mecab::`anonymous namespace'::LexicalRule1(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int16 *v3;
  int v4;
  int v5;
  int v6;

  v2 = (unint64_t)*(unsigned __int16 *)(a2 + 80) >> 1;
  v3 = *(unsigned __int16 **)(a2 + 64);
  if (v2 == 3)
  {
    v6 = *v3;
    if (v6 == 51060)
    {
      if (v3[1] == 45768)
      {
        v4 = v3[2];
        v5 = 44620;
        return v4 == v5;
      }
    }
    else if (v6 == 51064 && v3[1] == 45936 && v3[2] == 50836)
    {
      return 1;
    }
  }
  else if (v2 == 2 && *v3 == 51064)
  {
    v4 = v3[1];
    v5 = 45936;
    return v4 == v5;
  }
  return 0;
}

BOOL CoreNLP::mecab::`anonymous namespace'::LexicalRule2(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int16 *v3;
  int v4;
  int v5;

  v2 = (unint64_t)*(unsigned __int16 *)(a2 + 80) >> 1;
  v3 = *(unsigned __int16 **)(a2 + 64);
  if (v2 == 3)
  {
    if (*v3 != 51064 || v3[1] != 44032)
      return 0;
    v4 = v3[2];
    v5 = 50836;
  }
  else
  {
    if (v2 != 2 || *v3 != 51064)
      return 0;
    v4 = v3[1];
    v5 = 44032;
  }
  if (v4 == v5)
    return *(unsigned __int16 *)(a2 + 88) - 20 < 6;
  return 0;
}

BOOL CoreNLP::mecab::`anonymous namespace'::LexicalRule3(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int16 *v3;
  int v4;

  v2 = (unint64_t)*(unsigned __int16 *)(a2 + 80) >> 1;
  if (v2 - 4 < 0xFFFFFFFFFFFFFFFDLL)
    return 0;
  v3 = *(unsigned __int16 **)(a2 + 64);
  v4 = *v3;
  if ((_DWORD)v2 != 1)
  {
    if (v4 != 44032 || v3[1] != 50836)
      return 0;
    return *(unsigned __int16 *)(a2 + 88) - 20 < 6;
  }
  if (v4 == 51424)
    return *(unsigned __int16 *)(a2 + 88) - 20 < 6;
  return 0;
}

BOOL CoreNLP::mecab::`anonymous namespace'::LexicalRule4(uint64_t a1, uint64_t a2)
{
  int v2;
  _WORD *v4;
  BOOL v5;
  unint64_t i;
  int v7;

  v2 = *(unsigned __int16 *)(a1 + 88);
  if (v2 == 34 || (v2 - 38) <= 0xFFFFFFFA)
  {
    v4 = *(_WORD **)(a1 + 72);
    if (*v4 != 86)
      return 0;
    v5 = 0;
    for (i = 0; i != 3; ++i)
    {
      v7 = (unsigned __int16)v4[i];
      if (!v4[i])
        break;
      if (v7 == 44)
        break;
      if (v7 != (unsigned __int16)aVcpvcn[i + 3])
        break;
      v5 = i > 1;
    }
    if (v5)
      return 0;
  }
  return (*(_WORD *)(a2 + 80) & 0xFFFE) == 2 && **(unsigned __int16 **)(a2 + 64) == 47564;
}

BOOL CoreNLP::mecab::`anonymous namespace'::LexicalRule5(uint64_t a1, uint64_t a2)
{
  return *(_WORD *)(a1 + 86) == 1093 && (*(_WORD *)(a2 + 80) & 0xFFFE) == 2 && **(unsigned __int16 **)(a2 + 64) == 54620;
}

BOOL CoreNLP::mecab::`anonymous namespace'::LexicalRule6(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v2;

  if ((*(_WORD *)(a1 + 80) & 0xFFFE) == 4 && (v2 = *(unsigned __int16 **)(a1 + 64), *v2 == 54596) && v2[1] == 50836)
    return *(unsigned __int16 *)(a2 + 88) == 33;
  else
    return 0;
}

BOOL CoreNLP::mecab::`anonymous namespace'::LexicalRule7(uint64_t a1, uint64_t a2)
{
  return (*(_WORD *)(a2 + 80) & 0xFFFE) == 2
      && **(unsigned __int16 **)(a2 + 64) == 50836
      && *(unsigned __int16 *)(a2 + 88) == 39;
}

uint64_t CoreNLP::mecab::`anonymous namespace'::LexicalRule8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  _WORD *v5;
  BOOL v6;
  unint64_t i;
  int v8;
  unsigned __int16 *v9;
  int v10;
  int v11;
  int v12;

  if (*(_WORD *)(a2 + 88) != 37)
    return 0;
  v2 = 0;
  v3 = *(unsigned __int16 *)(a1 + 88);
  if ((v3 - 1) >= 6 && (v3 - 256) >= 0x600)
  {
    if (v3 != 34 && (v3 - 38) > 0xFFFFFFFA)
      return 0;
    v5 = *(_WORD **)(a1 + 72);
    if (*v5 == 86)
    {
      v6 = 0;
      for (i = 0; i != 3; ++i)
      {
        v8 = (unsigned __int16)v5[i];
        if (!v5[i])
          break;
        if (v8 == 44)
          break;
        if (v8 != (unsigned __int16)aVcpvcn[i + 3])
          break;
        v6 = i > 1;
      }
      if (!v6)
        return 0;
    }
    v2 = 0;
    if ((v3 - 40) >= 3 && (v3 - 10240) >= 0x300)
    {
      v2 = 0;
      if ((v3 - 8) >= 9 && (v3 - 2048) >= 0x900)
      {
        v2 = 0;
        if (v3 != 7 && v3 != 17)
        {
          if ((*(_WORD *)(a1 + 80) & 0xFFFE) != 4)
            return 0;
          v9 = *(unsigned __int16 **)(a1 + 64);
          v10 = *v9;
          if (v10 != 51652)
          {
            if (v10 == 51228)
            {
              v11 = v9[1];
              v12 = 51068;
            }
            else
            {
              if (v10 != 51221)
                return 1;
              v11 = v9[1];
              v12 = 47568;
            }
            return v11 != v12;
          }
          return v9[1] != 51676;
        }
      }
    }
  }
  return v2;
}

BOOL CoreNLP::mecab::`anonymous namespace'::LexicalRule9(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v3;
  int v4;
  _BOOL8 result;
  int v7;
  int v9;
  int v10;

  if (*(unsigned __int16 *)(a2 + 88) - 38 > 4)
    return 0;
  v3 = *(unsigned __int16 **)(a2 + 64);
  v4 = *v3;
  if (v4 == 12622)
    return 0;
  result = 0;
  v7 = *(unsigned __int16 *)(a1 + 88);
  if ((v7 - 26) >= 6 && (v7 - 8) >= 9 && (v7 - 2048) >= 0x900)
  {
    result = 0;
    if ((v7 - 1) >= 6 && (v7 - 256) >= 0x600)
    {
      result = 0;
      if ((v7 - 40) >= 3 && (v7 - 10240) >= 0x300)
      {
          return 0;
        result = 0;
        if (v7 != 7 && v7 != 17)
        {
          if ((*(_WORD *)(a2 + 80) & 0xFFFE) == 4)
          {
            switch(v4)
            {
              case 51652:
                return v3[1] != 51676;
              case 51228:
                v9 = v3[1];
                v10 = 51068;
                break;
              case 51221:
                v9 = v3[1];
                v10 = 47568;
                break;
              default:
                return 1;
            }
            if (v9 != v10)
              return 1;
          }
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL CoreNLP::mecab::`anonymous namespace'::LexicalRule10(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  unsigned __int16 *v6;
  int v7;
  int v8;
  int v9;

  v2 = *(unsigned __int16 *)(a2 + 88);
  if ((v2 - 1) >= 6 && (v2 - 256) > 0x5FF)
    return 0;
  v3 = 0;
  v4 = *(unsigned __int16 *)(a1 + 88);
  if ((v4 - 8) >= 9 && (v4 - 2048) >= 0x900)
  {
    v5 = v4 == 7 || v4 == 17;
    if (v5 || (*(_WORD *)(a1 + 80) & 0xFFFE) != 4)
      return 0;
    v6 = *(unsigned __int16 **)(a1 + 64);
    v7 = *v6;
    switch(v7)
    {
      case 51652:
        v8 = v6[1];
        v9 = 51676;
        break;
      case 51228:
        v8 = v6[1];
        v9 = 51068;
        break;
      case 51221:
        v8 = v6[1];
        v9 = 47568;
        break;
      default:
        return v4 != 29;
    }
    if (v8 == v9)
      return 0;
    return v4 != 29;
  }
  return v3;
}

uint64_t CoreNLP::mecab::`anonymous namespace'::LexicalRule11(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  int v11;
  int v12;
  int v13;

  v2 = *(unsigned __int16 *)(a2 + 88);
  if (v2 != 35 && (v2 & 0xFF00) != 8960)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 72);
    do
    {
      v7 = *(unsigned __int16 *)(v6 + 2 * v5);
      if (!*(_WORD *)(v6 + 2 * v5))
        break;
      if (v7 == 44)
        break;
      if (v7 != (unsigned __int16)aVcpvcn[v5])
        break;
      v4 = v5++ > 1;
    }
    while (v5 != 3);
    if (!v4)
      return 0;
  }
  v8 = 0;
  v9 = *(unsigned __int16 *)(a1 + 88);
  if ((v9 - 8) >= 9 && (v9 - 2048) >= 0x900)
  {
    v8 = 0;
    if ((v9 - 1) >= 6 && (v9 - 256) >= 0x600)
    {
      v8 = 0;
      if (v9 != 7 && v9 != 17)
      {
        if ((*(_WORD *)(a1 + 80) & 0xFFFE) != 4)
          return 0;
        v10 = *(unsigned __int16 **)(a1 + 64);
        v11 = *v10;
        if (v11 != 51652)
        {
          if (v11 == 51228)
          {
            v12 = v10[1];
            v13 = 51068;
          }
          else
          {
            if (v11 != 51221)
              return 1;
            v12 = v10[1];
            v13 = 47568;
          }
          return v12 != v13;
        }
        return v10[1] != 51676;
      }
    }
  }
  return v8;
}

BOOL CoreNLP::mecab::`anonymous namespace'::LexicalRule12(uint64_t a1, uint64_t a2)
{
  int v2;

  if (*(_WORD *)(a2 + 88) != 36 || (*(_WORD *)(a2 + 80) & 0xFFFE) != 2)
    return 0;
  v2 = **(unsigned __int16 **)(a2 + 64);
  return v2 == 51064 || v2 == 51077;
}

BOOL CoreNLP::mecab::`anonymous namespace'::LexicalRule13(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v2;

  if ((*(_WORD *)(a2 + 80) & 0xFFFE) == 6 && (v2 = *(unsigned __int16 **)(a2 + 64), *v2 == 51077) && v2[1] == 45768)
    return v2[2] == 45796;
  else
    return 0;
}

BOOL CoreNLP::mecab::`anonymous namespace'::LexicalRule14(uint64_t a1, uint64_t a2)
{
  return (*(_WORD *)(a2 + 80) & 0xFFFE) == 2
      && **(unsigned __int16 **)(a2 + 64) == 54644
      && *(unsigned __int16 *)(a1 + 88) - 20 <= 5
      && *(unsigned __int16 *)(a1 + 86) - 1093 < 0xFFFFFEA7;
}

uint64_t CoreNLP::mecab::`anonymous namespace'::IsTagStartsWithVExceptVCN(uint64_t a1)
{
  int v1;
  _WORD *v3;
  BOOL v4;
  unint64_t i;
  int v6;
  char v7;

  v1 = *(unsigned __int16 *)(a1 + 88);
  if (v1 != 34 && (v1 - 38) > 0xFFFFFFFA)
  {
    v7 = 1;
  }
  else
  {
    v3 = *(_WORD **)(a1 + 72);
    if (*v3 == 86)
    {
      v4 = 0;
      for (i = 0; i != 3; ++i)
      {
        v6 = (unsigned __int16)v3[i];
        if (!v3[i])
          break;
        if (v6 == 44)
          break;
        if (v6 != (unsigned __int16)aVcpvcn[i + 3])
          break;
        v4 = i > 1;
      }
      v7 = !v4;
    }
    else
    {
      v7 = 0;
    }
  }
  return v7 & 1;
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

uint64_t CoreNLP::ICUTextBreakWithCustomizedRules::fastEnumerateTokensWithSpecifiedStop(uint64_t result, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _QWORD v11[2];
  unint64_t v12;
  unint64_t v13;

  if (*(_QWORD *)(result + 8))
  {
    v6 = result;
    v7 = 0;
    v13 = 0;
    v10 = 0;
    while (1)
    {
      result = MEMORY[0x19401F228](*(_QWORD *)(v6 + 8), 1, v11, &v13);
      if (!(_DWORD)result)
        return result;
      v11[0] += *(_QWORD *)(v6 + 16);
      if (*(_BYTE *)(v6 + 97))
        break;
      if (*(_BYTE *)(v6 + 96))
      {
        CoreNLP::ICUTextBreakWithCustomizedRules::setTokenAttributes(v6, v13, &v12, &v10);
        v7 = v10;
      }
      if (!v7)
        goto LABEL_14;
      v9 = *(_QWORD *)(v6 + 88);
      if (!v9)
        goto LABEL_14;
      result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _BYTE *, uint64_t))(v9 + 16))(v9, v11[0], v11[1], a3, a4);
LABEL_15:
      if (*a3)
        return result;
    }
    v12 = v13 | 0x20000000;
    v8 = *(_QWORD *)(v6 + 112);
    if ((v8 & 2) != 0 && ((v8 & 8) != 0 || *(_DWORD *)(*(_QWORD *)(v6 + 56) + 60) == 13))
      v12 = v13 | 0x20000600;
LABEL_14:
    result = (*(uint64_t (**)(uint64_t, _QWORD *, _BYTE *))(a4 + 16))(a4, v11, a3);
    goto LABEL_15;
  }
  return result;
}

uint64_t CoreNLP::ICUTextBreakWithCustomizedRules::enumerateTokensWithSpecifiedStop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a4, a5, a6);
}

uint64_t CoreNLP::ICUTextBreakWithCustomizedRules::goToTokenAtIndex(CoreNLP::ICUTextBreakWithCustomizedRules *this, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = 0;
  return (*(uint64_t (**)(CoreNLP::ICUTextBreakWithCustomizedRules *, uint64_t, uint64_t, char *))(*(_QWORD *)this + 48))(this, a2, a3, &v4);
}

char *CoreNLP::ICUTextBreakWithCustomizedRules::goToTokenAtIndex(CoreNLP::ICUTextBreakWithCustomizedRules *this, unint64_t a2, uint64_t a3, BOOL *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t StringBufferPtr;
  unsigned __int16 *v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;

  if (*((_QWORD *)this + 1))
  {
    v5 = *((_QWORD *)this + 2);
    v6 = a3 - v5;
    if (a3 >= v5 && *((_QWORD *)this + 3) + v5 > a3)
    {
      StringBufferPtr = CoreNLP::ICUTextBreak::getStringBufferPtr(this);
      v9 = (unsigned __int16 *)(StringBufferPtr + 2 * v6);
      if (v6 >= 1)
      {
        while (1)
        {
          v10 = *v9;
          if (v10 < 0x21)
            break;
          if (v10 == 65292 || v10 - 12288 <= 2)
            break;
          if ((unint64_t)--v9 <= StringBufferPtr)
            goto LABEL_14;
        }
        ++v9;
      }
LABEL_14:
      v12 = (uint64_t)((uint64_t)v9 - StringBufferPtr) >> 1;
      if (v12 >= v6)
        v13 = v6;
      else
        v13 = v12;
      *((_QWORD *)this + 13) = v13;
      v21 = 0;
      ubrk_setText();
      v20 = 0;
      while (MEMORY[0x19401F228](*((_QWORD *)this + 1), 1, &v18, &v20))
      {
        v16 = v18 + *((_QWORD *)this + 13);
        v18 = v16;
        if (v6 >= v16)
        {
          v17 = v19;
          if (v6 < v19 + v16)
          {
            *((_QWORD *)this + 4) = *((_QWORD *)this + 2) + v16;
            *((_QWORD *)this + 5) = v17;
            v14 = (char *)this + 32;
            if (*((_BYTE *)this + 96))
              CoreNLP::ICUTextBreakWithCustomizedRules::setTokenAttributes((uint64_t)this, v20, (unint64_t *)this + 6, a4);
            return v14;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t CoreNLP::ICUTextBreakWithCustomizedRules::getCurrentICUTokenFlag(CoreNLP::ICUTextBreakWithCustomizedRules *this)
{
  return *((_QWORD *)this + 14);
}

uint64_t CoreNLP::EnglishCompoundWord::enumerateDecomposedTokensWithSpecifiedStop(CoreNLP::StringBuffer **a1, CFRange a2, _BYTE *a3, uint64_t a4)
{
  CFIndex length;
  uint64_t result;
  CFIndex v6;
  CFIndex v7;
  uint64_t v8;
  _WORD *v9;
  int64x2_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  int64x2_t v32;
  int64x2_t v33;
  CFIndex location;
  CFIndex v38;
  int64x2_t v39;

  length = a2.length;
  location = a2.location;
  result = CoreNLP::StringBuffer::getSubStringCharsOfRange(a1[1], a2);
  v6 = length - 1;
  if (length < 1)
    return result;
  v7 = 0;
  v8 = 0;
  v9 = (_WORD *)(result + 2);
  v32 = vdupq_n_s64(0x80000000uLL);
  v10.i64[1] = 8;
  v33 = vdupq_n_s64(8uLL);
  v11 = 1;
  do
  {
    result = (unsigned __int16)*(v9 - 1);
    if ((_DWORD)result == 8217)
      v12 = 39;
    else
      v12 = (unsigned __int16)*(v9 - 1);
    if (v12 > 0xFF)
    {
      result = u_charType(result);
      if (((1 << result) & 0x3FF97000) != 0)
        v13 = 2;
      else
        v13 = 4;
    }
    else
    {
      if ((result | 2) == 0x2E)
      {
        if (v7 && v7 < v6)
        {
          v14 = *(v9 - 2) == 8217 ? 39 : (unsigned __int16)*(v9 - 2);
          if (v14 <= 0xFF)
          {
            v15 = *v9 == 8217 ? 39 : (unsigned __int16)*v9;
            v16 = v14 - 48;
            v17 = (unint64_t)(v15 - 48) >= 0xA ? v13 : 16;
            v18 = v16 <= 9 ? v17 : v13;
            if (v15 <= 0xFF)
              v13 = v18;
          }
        }
      }
      else if (v7)
      {
        if (v12 == 39 && v7 < v6)
        {
          v22 = *(v9 - 2) == 8217 ? 39 : (unsigned __int16)*(v9 - 2);
          if (v22 <= 0xFF)
          {
            v23 = *v9 == 8217 ? 39 : (unsigned __int16)*v9;
            if (v23 <= 0xFF)
            {
              v25 = v22 - 65;
              v26 = v24 != 4 && v25 > 0x19;
              if (!v26
                 || (unint64_t)(v23 - 65) < 0x1A))
              {
                if (v11 == 4)
                  goto LABEL_30;
                v13 = 4;
                goto LABEL_35;
              }
            }
          }
        }
      }
    }
    if (v13 == v11)
    {
      if (v11 == 2)
        goto LABEL_90;
LABEL_30:
      ++v39.i64[0];
      goto LABEL_90;
    }
    if (v13 == 2)
    {
      v11 = 2;
      goto LABEL_90;
    }
    if ((v13 & 0x10) != 0)
    {
      if ((v11 - 1) <= 1)
      {
        if (v8)
        {
          v27 = v39.i64[1];
          if ((v39.i32[2] & 0x80000008) != 0)
          {
            v27 = v39.i64[1] | 2;
            v39.i64[1] |= 2uLL;
          }
          if ((v27 & 0x40000000) != 0 && *((_DWORD *)*a1 + 9) == 13)
            v39.i64[1] = v27 | 4;
          result = (*(uint64_t (**)(uint64_t, CFIndex *, _BYTE *))(a4 + 16))(a4, &v38, a3);
          if (*a3)
            return result;
        }
        ++v8;
        v38 = location + v7;
        v20 = xmmword_191D42540;
        goto LABEL_84;
      }
      v29 = (int8x16_t)v39;
      v10.i64[0] = 1;
      v10.i64[0] = vaddq_s64(v39, v10).u64[0];
      v30 = (int8x16_t)v33;
      goto LABEL_88;
    }
    if ((v13 & 8) != 0)
    {
      if ((v11 - 1) <= 1)
      {
        if (v8)
        {
          v28 = v39.i64[1];
          if ((v39.i32[2] & 0x80000008) != 0)
          {
            v28 = v39.i64[1] | 2;
            v39.i64[1] |= 2uLL;
          }
          if ((v28 & 0x40000000) != 0 && *((_DWORD *)*a1 + 9) == 13)
            v39.i64[1] = v28 | 4;
          result = (*(uint64_t (**)(uint64_t, CFIndex *, _BYTE *))(a4 + 16))(a4, &v38, a3);
          if (*a3)
            return result;
        }
        ++v8;
        v38 = location + v7;
        v20 = xmmword_191D42550;
        goto LABEL_84;
      }
      v29 = (int8x16_t)v39;
      v10.i64[0] = 1;
      v10.i64[0] = vaddq_s64(v39, v10).u64[0];
      v30 = (int8x16_t)v32;
LABEL_88:
      v10.i64[1] = vorrq_s8(v29, v30).i64[1];
      v39 = v10;
      goto LABEL_89;
    }
LABEL_35:
    if ((v11 - 1) > 1)
    {
      ++v39.i64[0];
      goto LABEL_89;
    }
    if (v8)
    {
      v19 = v39.i64[1];
      if ((v39.i32[2] & 0x80000008) != 0)
      {
        v19 = v39.i64[1] | 2;
        v39.i64[1] |= 2uLL;
      }
      if ((v19 & 0x40000000) != 0 && *((_DWORD *)*a1 + 9) == 13)
        v39.i64[1] = v19 | 4;
      result = (*(uint64_t (**)(uint64_t, CFIndex *, _BYTE *))(a4 + 16))(a4, &v38, a3);
      if (*a3)
        return result;
    }
    ++v8;
    v38 = location + v7;
    v20 = xmmword_191D40700;
LABEL_84:
    v39 = (int64x2_t)v20;
LABEL_89:
    v11 = v13;
LABEL_90:
    ++v7;
    ++v9;
  }
  while (length != v7);
  if (v8)
  {
    v31 = v39.i64[1];
    if ((v39.i32[2] & 0x80000008) != 0)
    {
      v31 = v39.i64[1] | 2;
      v39.i64[1] |= 2uLL;
    }
    if ((v31 & 0x40000000) != 0 && *((_DWORD *)*a1 + 9) == 13)
      v39.i64[1] = v31 | 4;
    return (*(uint64_t (**)(uint64_t, CFIndex *, _BYTE *))(a4 + 16))(a4, &v38, a3);
  }
  return result;
}

void ___ZN12_GLOBAL__N_115GetCompoundTrieEv_block_invoke()
{
  const char *p_p;
  int v1;
  _DWORD *v2;
  off_t st_size;
  _QWORD *v4;
  unint64_t v5;
  int v6;
  stat __p;

  CoreNLP::getPathRelativeToPlatformRoot((CoreNLP *)"/System/Library/LinguisticData/en/tokcompound.dat", &__p);
  if ((__p.st_gid & 0x80000000) == 0)
    p_p = (const char *)&__p;
  else
    p_p = *(const char **)&__p.st_dev;
  v1 = open(p_p, 0);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  if (v1 != -1)
  {
    fstat(v1, &__p);
    v2 = mmap(0, __p.st_size, 1, 1, v1, 0);
    close(v1);
    if (v2 == (_DWORD *)-1)
    {
      v4 = 0;
    }
    else
    {
      st_size = __p.st_size;
      v4 = malloc_type_malloc(0x58uLL, 0x10B0040A3C4D6A3uLL);
      if (v4)
      {
        v4[4] = 0;
        v4[5] = 0;
        *v4 = v2 + 4;
        *((_DWORD *)v4 + 20) = 0;
        if ((st_size & 0xFFFFFFFFFFFFFFF0) == 0x10)
        {
          v5 = 0;
          v4[1] = 0;
          *((_DWORD *)v4 + 4) = 0;
        }
        else
        {
          v4[1] = v2 + 8;
          if (v2[4] == 1953655141)
            v6 = v2[7];
          else
            v6 = 0;
          *((_DWORD *)v4 + 4) = v6;
          v5 = (unint64_t)(st_size - 32) >> 3;
        }
        v4[3] = v5;
      }
    }
  }
}

void sub_191CDFDAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CoreNLP::Orthography *CoreNLP::Orthography::createOrthography(const __CFString *this, const __CFString *a2, CFRange a3)
{
  char length;
  CFIndex location;
  CoreNLP::Orthography *v7;
  CFRange v9;

  length = a3.length;
  location = a3.location;
  v7 = (CoreNLP::Orthography *)operator new();
  v9.location = (CFIndex)a2;
  v9.length = location;
  CoreNLP::Orthography::Orthography(v7, this, v9, length);
  return v7;
}

void sub_191CDFE34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10A1C4015D6C774);
  _Unwind_Resume(a1);
}

CoreNLP::Orthography *CoreNLP::Orthography::Orthography(CoreNLP::Orthography *this, const __CFString *a2, CFRange a3, char a4)
{
  CFIndex length;
  CFIndex location;
  char *v8;
  char v9;
  unsigned __int16 v10;
  CFIndex v11;
  int v12;
  CoreNLP *CharacterAtIndex;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _WORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int16 v34;
  unsigned __int16 *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _WORD *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  __int16 v62;
  NSObject *v63;
  uint64_t *v64;
  unsigned int v65;
  unsigned int v66;
  char *v68;
  _QWORD block[5];
  _BYTE v70[44];
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  _OWORD v76[2];
  int v77;
  _DWORD *v78[2];

  length = a3.length;
  location = a3.location;
  *(_QWORD *)this = &unk_1E2DF1C70;
  *((_DWORD *)this + 2) = 28;
  *((_OWORD *)this + 1) = 0u;
  v68 = (char *)this + 16;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  v8 = (char *)this + 56;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_BYTE *)this + 96) = a4;
  memset(v76, 0, sizeof(v76));
  v77 = 1065353216;
  v75 = 4;
  v78[0] = &v75;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)this + 56, &v75, (uint64_t)&std::piecewise_construct, v78)+ 5) = 1;
  v74 = 3;
  v78[0] = &v74;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)v8, &v74, (uint64_t)&std::piecewise_construct, v78)+ 5) = 1;
  v73 = 2;
  v78[0] = &v73;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)v8, &v73, (uint64_t)&std::piecewise_construct, v78)+ 5) = 1;
  v72 = 1;
  v78[0] = &v72;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)v8, &v72, (uint64_t)&std::piecewise_construct, v78)+ 5) = 1;
  v71 = 0;
  v78[0] = &v71;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)v8, &v71, (uint64_t)&std::piecewise_construct, v78)+ 5) = 1;
  if (length < 1)
    goto LABEL_68;
  v9 = 0;
  v10 = 0;
  v11 = location + length;
  v12 = 28;
  do
  {
    CharacterAtIndex = (CoreNLP *)CFStringGetCharacterAtIndex(a2, location);
    v14 = (int)CharacterAtIndex;
    if ((unsigned __int16)((unsigned __int16)((_WORD)CharacterAtIndex + 9216) >> 10) > 0x3Eu)
      goto LABEL_63;
    v75 = CoreNLP::_scriptIDForCharacter(CharacterAtIndex, v10);
    if (v75 != 28)
    {
      v78[0] = &v75;
      v16 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)v68, &v75, (uint64_t)&std::piecewise_construct, v78);
      ++*((_DWORD *)v16 + 5);
      v15 = v75;
LABEL_10:
      if (v15 <= 4)
      {
        v78[0] = &v75;
        v17 = std::__hash_table<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID const&>,std::tuple<>>((uint64_t)v76, &v75, (uint64_t)&std::piecewise_construct, v78);
        v18 = v17;
        if (v75 != v12)
        {
          v19 = (char *)v17[3];
          v20 = (char *)v17[4];
          v21 = v20 - v19;
          if (v20 != v19 && (unint64_t)v21 <= 0xC7)
          {
            v22 = (uint64_t)(v17 + 5);
            v23 = v18[5];
            if ((unint64_t)v20 >= v23)
            {
              v25 = v21 >> 1;
              v26 = v23 - (_QWORD)v19;
              if (v26 <= (v21 >> 1) + 1)
                v27 = v25 + 1;
              else
                v27 = v26;
              if (v26 >= 0x7FFFFFFFFFFFFFFELL)
                v28 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v28 = v27;
              v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v22, v28);
              v31 = (char *)v18[3];
              v32 = (char *)v18[4];
              v33 = &v30[2 * v25];
              *(_WORD *)v33 = 32;
              v24 = v33 + 2;
              while (v32 != v31)
              {
                v34 = *((_WORD *)v32 - 1);
                v32 -= 2;
                *((_WORD *)v33 - 1) = v34;
                v33 -= 2;
              }
              v18[3] = v33;
              v18[4] = v24;
              v18[5] = &v30[2 * v29];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *(_WORD *)v20 = 32;
              v24 = v20 + 2;
            }
            v18[4] = v24;
          }
        }
        v35 = (unsigned __int16 *)v18[4];
        if (v10)
        {
          v36 = v18[3];
          v37 = (uint64_t)v35 - v36;
          if ((unint64_t)v35 - v36 <= 0xC7)
          {
            v38 = v18[5];
            if ((unint64_t)v35 >= v38)
            {
              v39 = v37 >> 1;
              v40 = v38 - v36;
              if (v40 <= (v37 >> 1) + 1)
                v41 = v39 + 1;
              else
                v41 = v40;
              if (v40 >= 0x7FFFFFFFFFFFFFFELL)
                v42 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v42 = v41;
              v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(v18 + 5), v42);
              v45 = (char *)v18[3];
              v46 = (char *)v18[4];
              v47 = &v44[2 * v39];
              *(_WORD *)v47 = v10;
              v35 = (unsigned __int16 *)(v47 + 2);
              while (v46 != v45)
              {
                v48 = *((_WORD *)v46 - 1);
                v46 -= 2;
                *((_WORD *)v47 - 1) = v48;
                v47 -= 2;
              }
              v18[3] = v47;
              v18[4] = v35;
              v18[5] = &v44[2 * v43];
              if (v45)
                operator delete(v45);
            }
            else
            {
              *v35++ = v10;
            }
            v18[4] = v35;
          }
        }
        v49 = v18[3];
        v50 = (uint64_t)v35 - v49;
        if ((unint64_t)v35 - v49 <= 0xC7)
        {
          v51 = v18[5];
          if ((unint64_t)v35 >= v51)
          {
            v53 = v50 >> 1;
            v54 = v51 - v49;
            if (v54 <= (v50 >> 1) + 1)
              v55 = v53 + 1;
            else
              v55 = v54;
            if (v54 >= 0x7FFFFFFFFFFFFFFELL)
              v56 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v56 = v55;
            v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(v18 + 5), v56);
            v59 = (char *)v18[3];
            v60 = (char *)v18[4];
            v61 = &v58[2 * v53];
            *(_WORD *)v61 = v14;
            v52 = v61 + 2;
            while (v60 != v59)
            {
              v62 = *((_WORD *)v60 - 1);
              v60 -= 2;
              *((_WORD *)v61 - 1) = v62;
              v61 -= 2;
            }
            v18[3] = v61;
            v18[4] = v52;
            v18[5] = &v58[2 * v57];
            if (v59)
              operator delete(v59);
          }
          else
          {
            *v35 = v14;
            v52 = v35 + 1;
          }
          v18[4] = v52;
        }
        v9 = 1;
      }
      goto LABEL_62;
    }
    if (v12 != 3
      && ((v14 - 39) <= 0x38 && ((1 << (v14 - 39)) & 0x1000000000800C1) != 0
       || v14 == 8217))
    {
      v75 = v12;
      v15 = v12;
      goto LABEL_10;
    }
LABEL_62:
    LOWORD(v14) = 0;
    v12 = v75;
LABEL_63:
    ++location;
    v10 = v14;
  }
  while (location < v11);
  if ((v9 & 1) != 0)
  {
    if (CoreNLP::_getOrthographyQueue(void)::onceToken != -1)
      dispatch_once(&CoreNLP::_getOrthographyQueue(void)::onceToken, &__block_literal_global_175);
    v63 = CoreNLP::_getOrthographyQueue(void)::queue;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZN7CoreNLP11OrthographyC2EPK10__CFString7CFRangeb_block_invoke;
    block[3] = &__block_descriptor_tmp_18;
    block[4] = this;
    std::unordered_map<NLScriptID,std::vector<unsigned short>>::unordered_map((uint64_t)v70, (uint64_t)v76);
    dispatch_sync(v63, block);
    std::__hash_table<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>>>::~__hash_table((uint64_t)v70);
  }
LABEL_68:
  v64 = (uint64_t *)*((_QWORD *)this + 4);
  if (v64)
  {
    v65 = 0;
    do
    {
      v66 = *((_DWORD *)v64 + 5);
      if (v66 > v65)
      {
        *((_DWORD *)this + 2) = *((_DWORD *)v64 + 4);
        v65 = v66;
      }
      v64 = (uint64_t *)*v64;
    }
    while (v64);
  }
  std::__hash_table<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>>>::~__hash_table((uint64_t)v76);
  return this;
}

void sub_191CE03A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  std::__hash_table<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::~__hash_table(v15);
  std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::~__hash_table(a2);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::_scriptIDForCharacter(CoreNLP *this, int a2)
{
  __int16 v2;
  uint64_t result;
  unsigned int v4;
  int v5;
  int16x4_t v6;
  int v7;
  int v8;

  v2 = (unsigned __int16)this & 0xFFDF;
  if ((unsigned __int16)(((unsigned __int16)this & 0xFFDF) - 65) < 0x1Au)
    return 4;
  v4 = this;
  result = 28;
  if ((v4 > 0x2E || ((1 << v4) & 0x708000000000) == 0)
    && v4 != 173
    && v4 - 48 >= 0xA
    && (unsigned __int16)(v4 - 188) >= 3u
    && v4 >= 0x20
    && (unsigned __int16)(v4 - 127) >= 0x21u
    && v4 >= 0xC0
    && v2 != 215)
  {
    if (v4 < 0x2B0)
      return 4;
    if (v4 >= 0x370)
    {
      if (v4 >= 0x400)
      {
        result = 1;
        if (v4 >= 0x530 && v4 != 7467)
        {
          result = 9;
          if (v4 >= 0x590 && (unsigned __int16)(v4 + 1261) >= 5u)
          {
            result = 5;
            if (v4 >= 0x600 && (unsigned __int16)(v4 + 1251) >= 0x33u)
            {
              result = 0;
              if ((unsigned __int16)(v4 + 400) >= 0x8Fu && v4 >= 0x700 && (unsigned __int16)(v4 + 1200) >= 0x2B0u)
              {
                v5 = v4 & 0xFF80;
                result = 10;
                switch((unsigned __int16)((v4 & 0xFF80) - 2304) >> 7)
                {
                  case 0:
                    if ((v4 & 0xFFFE) == 0x964)
                      result = 28;
                    else
                      result = 2;
                    break;
                  case 1:
                    return result;
                  case 2:
                    result = 11;
                    break;
                  case 3:
                    result = 12;
                    break;
                  case 4:
                    result = 13;
                    break;
                  case 5:
                    result = 14;
                    break;
                  case 6:
                    result = 15;
                    break;
                  case 7:
                    result = 16;
                    break;
                  case 8:
                    result = 17;
                    break;
                  case 9:
                    result = 18;
                    break;
                  case 10:
                    result = 7;
                    break;
                  case 11:
                    result = 19;
                    break;
                  default:
                    v6 = vdup_n_s16(v4);
                    result = 8;
                    if ((vmaxv_u16(vcgt_u16((uint16x4_t)0x40005000602C00, (uint16x4_t)vadd_s16(v6, (int16x4_t)0x602850CED05400))) & 1) == 0)
                    {
                      v7 = v4 & 0xFF00;
                      if (v7 != 4352)
                      {
                        v8 = v4 & 0xFFE0;
                        if (v8 != 43360)
                        {
                          if ((vmaxv_u16(vcgt_u16((uint16x4_t)0xFC006071800200, (uint16x4_t)vadd_s16(v6, (int16x4_t)0x10001F0D1800700))) & 1) != 0)
                          {
                            result = 3;
                          }
                          else if (v4 - 8204 < 0xE && ((0x203Fu >> (v4 - 12)) & 1) != 0)
                          {
                            result = 28;
                          }
                          else
                          {
                            result = 28;
                            if (v4 - 8234 >= 5 && (v4 & 0xFFF0) != 0x2060 && v4 != 65279 && (v4 & 0xFFF0) != 0xFE00)
                            {
                              result = 4;
                              if ((vmaxv_u16(vcgt_u16((uint16x4_t)0x700E000260030, (uint16x4_t)vadd_s16(v6, (int16x4_t)0x50058E0E300E295))) & 1) == 0&& v7 != 7680&& v8 != 11360)
                              {
                                result = 6;
                                if (v4 - 7462 >= 5 && v7 != 7936)
                                {
                                  result = 28;
                                  if ((vmaxv_u16(vcgt_u16((uint16x4_t)0x300030003F0065, (uint16x4_t)vadd_s16(v6, (int16x4_t)0xDF30DF90E2D4E265))) & 1) == 0&& (unsigned __int16)(v4 - 0x2000) >= 0xC00u&& v8 != 42752&& v4 <= 0xFFFB&& v5 != 11776)
                                  {
                                    if (v7 == 3840)
                                    {
                                      result = 20;
                                    }
                                    else if (v4 - 4096 >= 0xA0)
                                    {
                                      if (v4 - 4256 >= 0x60)
                                      {
                                        if (v4 - 4608 >= 0x1A0)
                                        {
                                          if (v4 - 5024 >= 0x60)
                                          {
                                            if (v4 - 5120 >= 0x280)
                                            {
                                              if (v5 == 6016)
                                              {
                                                result = 26;
                                              }
                                              else if (v4 - 6144 >= 0xB0)
                                              {
                                                if (v4 >> 10 == 55 && (a2 & 0xFC00) == 0xD800)
                                                {
                                                  if (v4 + (a2 << 10) - 56744960 >= 0x10000)
                                                    result = 28;
                                                  else
                                                    result = 3;
                                                }
                                              }
                                              else
                                              {
                                                result = 27;
                                              }
                                            }
                                            else
                                            {
                                              result = 25;
                                            }
                                          }
                                          else
                                          {
                                            result = 24;
                                          }
                                        }
                                        else
                                        {
                                          result = 23;
                                        }
                                      }
                                      else
                                      {
                                        result = 22;
                                      }
                                    }
                                    else
                                    {
                                      result = 21;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    break;
                }
              }
            }
          }
        }
      }
      else
      {
        return 6;
      }
    }
  }
  return result;
}

void ___ZN7CoreNLP11OrthographyC2EPK10__CFString7CFRangeb_block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  const __CFAllocator *v3;
  unsigned __int8 v4;
  int TopHypothesis;
  CoreNLP::NLLangid *v6;
  CFStringRef v7;
  void *__p;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  void *value;
  _DWORD *v13[5];
  CFRange v14;

  v13[4] = *(_DWORD **)MEMORY[0x1E0C80C00];
  v1 = *(uint64_t **)(a1 + 56);
  if (v1)
  {
    v2 = *(_QWORD *)(a1 + 32);
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    do
    {
      v11 = *((_DWORD *)v1 + 4);
      __p = 0;
      v9 = 0;
      v10 = 0;
      std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&__p, (const void *)v1[3], v1[4], (v1[4] - v1[3]) >> 1);
      if (*(_BYTE *)(v2 + 96))
      {
        v4 = atomic_load((unsigned __int8 *)&_ZGVZZN7CoreNLP11OrthographyC1EPK10__CFString7CFRangebEUb_E10identifier);
        if ((v4 & 1) == 0
          && __cxa_guard_acquire(&_ZGVZZN7CoreNLP11OrthographyC1EPK10__CFString7CFRangebEUb_E10identifier))
        {
          _ZZZN7CoreNLP11OrthographyC1EPK10__CFString7CFRangebEUb_E10identifier = (uint64_t)NLLanguageIdentifierCreate();
          __cxa_guard_release(&_ZGVZZN7CoreNLP11OrthographyC1EPK10__CFString7CFRangebEUb_E10identifier);
        }
        NLLanguageIdentifierConsumeCharacters((CoreNLP::MontrealModel **)_ZZZN7CoreNLP11OrthographyC1EPK10__CFString7CFRangebEUb_E10identifier, (const unsigned __int16 *)__p, (v9 - (_BYTE *)__p) >> 1);
        TopHypothesis = NLLanguageIdentifierGetTopHypothesis((LanguageIdentifierModel *)_ZZZN7CoreNLP11OrthographyC1EPK10__CFString7CFRangebEUb_E10identifier);
        NLLanguageIdentifierReset((_DWORD *)_ZZZN7CoreNLP11OrthographyC1EPK10__CFString7CFRangebEUb_E10identifier);
      }
      else
      {
        v6 = (CoreNLP::NLLangid *)CFStringCreateWithCharactersNoCopy(0, (const UniChar *)__p, (v9 - (_BYTE *)__p) >> 1, v3);
        v14.location = (v9 - (_BYTE *)__p) >> 1;
        v7 = CoreNLP::NLLangid::copyLanguageString(v6, 0, v14);
        if (v7)
        {
          if (CoreNLP::_languageIDForTag(__CFString const*)::onceToken != -1)
            dispatch_once(&CoreNLP::_languageIDForTag(__CFString const*)::onceToken, &__block_literal_global_16);
          value = 0;
          if (CFDictionaryGetValueIfPresent((CFDictionaryRef)CoreNLP::_languageIDForTag(__CFString const*)::dictionary, v7, (const void **)&value))
          {
            TopHypothesis = (int)value;
          }
          else
          {
            TopHypothesis = 1;
          }
          CFRelease(v7);
        }
        else
        {
          TopHypothesis = 1;
        }
        CFRelease(v6);
      }
      v13[0] = &v11;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>(v2 + 56, &v11, (uint64_t)&std::piecewise_construct, v13)+ 5) = TopHypothesis;
      if (__p)
      {
        v9 = __p;
        operator delete(__p);
      }
      v1 = (uint64_t *)*v1;
    }
    while (v1);
  }
}

void sub_191CE0AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c127_ZTSNSt3__113unordered_mapI10NLScriptIDNS_6vectorItNS_9allocatorItEEEENS_4hashIiEENS_8equal_toIS1_EENS3_INS_4pairIKS1_S5_EEEEEE(uint64_t a1, uint64_t a2)
{
  return std::unordered_map<NLScriptID,std::vector<unsigned short>>::unordered_map(a1 + 40, a2 + 40);
}

uint64_t __destroy_helper_block_e8_40c127_ZTSNSt3__113unordered_mapI10NLScriptIDNS_6vectorItNS_9allocatorItEEEENS_4hashIiEENS_8equal_toIS1_EENS3_INS_4pairIKS1_S5_EEEEEE(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>>>::~__hash_table(a1 + 40);
}

uint64_t CoreNLP::Orthography::dominantScriptIDForString(CFStringRef theString, CFIndex idx, CFRange a3)
{
  CFIndex v3;
  unsigned __int16 v5;
  CFIndex v6;
  CoreNLP *CharacterAtIndex;
  _QWORD *v8;
  uint64_t *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  int v17;
  unsigned int *v18;

  v15 = 0u;
  v16 = 0u;
  v17 = 1065353216;
  v14 = 28;
  if (a3.location >= 1)
  {
    v3 = idx;
    v5 = 0;
    v6 = idx + a3.location;
    do
    {
      CharacterAtIndex = (CoreNLP *)CFStringGetCharacterAtIndex(theString, v3);
      if ((unsigned __int16)((unsigned __int16)((_WORD)CharacterAtIndex + 9216) >> 10) <= 0x3Eu)
      {
        v14 = CoreNLP::_scriptIDForCharacter(CharacterAtIndex, v5);
        if (v14 == 28)
        {
          LOWORD(CharacterAtIndex) = 0;
        }
        else
        {
          v18 = &v14;
          v8 = std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID&&>,std::tuple<>>((uint64_t)&v15, (int *)&v14, (uint64_t)&std::piecewise_construct, &v18);
          LOWORD(CharacterAtIndex) = 0;
          ++*((_DWORD *)v8 + 5);
        }
      }
      ++v3;
      v5 = (unsigned __int16)CharacterAtIndex;
    }
    while (v3 < v6);
    v9 = (uint64_t *)v16;
    if ((_QWORD)v16)
    {
      v10 = 0;
      do
      {
        v11 = *((_DWORD *)v9 + 5);
        if (v11 > v10)
        {
          v14 = *((_DWORD *)v9 + 4);
          v10 = v11;
        }
        v9 = (uint64_t *)*v9;
      }
      while (v9);
    }
  }
  v12 = v14;
  std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::~__hash_table((uint64_t)&v15);
  return v12;
}

void sub_191CE0C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::Orthography::dominantLanguageID(CoreNLP::Orthography *this)
{
  return CoreNLP::Orthography::dominantLanguageIDForScriptID((uint64_t)this, *((_DWORD *)this + 2));
}

uint64_t CoreNLP::Orthography::dominantScriptID(CoreNLP::Orthography *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t CoreNLP::Orthography::dominantLanguageIDForScriptID(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  unsigned int *v3;
  unsigned int v5;

  v5 = a2;
  if (a2 > 4)
  {
    if (a2 <= 0x1B)
    {
      v3 = (unsigned int *)((char *)&CoreNLP::_defaultLanguageID(NLScriptID)::defaultLanguageIDs + 4 * a2);
      return *v3;
    }
  }
  else
  {
    v2 = std::__hash_table<std::__hash_value_type<NLLanguageID,char const*>,std::__unordered_map_hasher<NLLanguageID,std::__hash_value_type<NLLanguageID,char const*>,std::hash<int>,std::equal_to<NLLanguageID>,true>,std::__unordered_map_equal<NLLanguageID,std::__hash_value_type<NLLanguageID,char const*>,std::equal_to<NLLanguageID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLLanguageID,char const*>>>::find<NLLanguageID>((_QWORD *)(a1 + 56), (int *)&v5);
    if (v2)
    {
      v3 = (unsigned int *)v2 + 5;
      return *v3;
    }
  }
  return 1;
}

const __CFString *CoreNLP::Orthography::getDominantLanguageTag(CoreNLP::Orthography *this)
{
  unsigned int v1;
  int v2;

  v1 = *((_DWORD *)this + 2);
  v2 = CoreNLP::Orthography::dominantLanguageIDForScriptID((uint64_t)this, v1);
  if ((v2 - 2) <= 0x36)
    return CoreNLP::_languageTags[v2 - 2];
  if (v2 != 1 || v1 == 28)
    return 0;
  else
    return CFSTR("und");
}

const __CFString *CoreNLP::Orthography::getDominantScriptTag(CoreNLP::Orthography *this)
{
  uint64_t v1;
  int v2;

  v1 = *((unsigned int *)this + 2);
  v2 = CoreNLP::Orthography::dominantLanguageIDForScriptID((uint64_t)this, *((_DWORD *)this + 2));
  if ((_DWORD)v1 == 3)
  {
    switch(v2)
    {
      case 5:
        return CFSTR("Hant");
      case 20:
        return CFSTR("Jpan");
      case 54:
        return CFSTR("Hant");
      default:
        return CFSTR("Hans");
    }
  }
  else if (v1 > 0x1B)
  {
    return 0;
  }
  else
  {
    return CoreNLP::_scriptTags[v1];
  }
}

const __CFString *CoreNLP::Orthography::getLanguageTagForString(CoreNLP::Orthography *this, CFStringRef theString, CFRange a3)
{
  CFIndex location;
  unsigned int v6;
  int v7;

  location = a3.location;
  a3.location = a3.length;
  v6 = CoreNLP::Orthography::dominantScriptIDForString(theString, location, a3);
  v7 = CoreNLP::Orthography::dominantLanguageIDForScriptID((uint64_t)this, v6);
  if ((v7 - 2) <= 0x36)
    return CoreNLP::_languageTags[v7 - 2];
  if (v7 != 1 || v6 == 28)
    return 0;
  else
    return CFSTR("und");
}

const __CFString *CoreNLP::Orthography::getScriptTagForString(CoreNLP::Orthography *this, CFStringRef theString, CFRange a3)
{
  CFIndex location;
  unsigned int v6;
  int v7;

  location = a3.location;
  a3.location = a3.length;
  v6 = CoreNLP::Orthography::dominantScriptIDForString(theString, location, a3);
  v7 = CoreNLP::Orthography::dominantLanguageIDForScriptID((uint64_t)this, v6);
  if (v6 == 3)
  {
    switch(v7)
    {
      case 5:
        return CFSTR("Hant");
      case 20:
        return CFSTR("Jpan");
      case 54:
        return CFSTR("Hant");
      default:
        return CFSTR("Hans");
    }
  }
  else if (v6 > 0x1B)
  {
    return 0;
  }
  else
  {
    return CoreNLP::_scriptTags[v6];
  }
}

__CFDictionary *CoreNLP::Orthography::copyLanguageMap(CoreNLP::Orthography *this)
{
  __CFDictionary *Mutable;
  uint64_t *v3;
  const CFArrayCallBacks *v4;
  uint64_t v5;
  int v6;
  const __CFString *v7;
  int v8;
  __CFString *v10;
  CFArrayRef v11;
  void *values;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  v3 = (uint64_t *)*((_QWORD *)this + 4);
  if (v3)
  {
    v4 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    while (!*((_DWORD *)v3 + 5))
    {
LABEL_23:
      v3 = (uint64_t *)*v3;
      if (!v3)
        return Mutable;
    }
    v5 = *((unsigned int *)v3 + 4);
    v6 = CoreNLP::Orthography::dominantLanguageIDForScriptID((uint64_t)this, *((_DWORD *)v3 + 4));
    if ((_DWORD)v5 == 3)
    {
      if (v6 == 5)
        goto LABEL_8;
      if (v6 == 20)
      {
        v7 = CFSTR("Jpan");
        goto LABEL_20;
      }
      v7 = CFSTR("Hans");
      if (v6 == 54)
      {
LABEL_8:
        v7 = CFSTR("Hant");
LABEL_20:
        v8 = v6 - 2;
        goto LABEL_21;
      }
    }
    else if (v5 > 0x1B)
    {
      v7 = 0;
    }
    else
    {
      v7 = CoreNLP::_scriptTags[v5];
    }
    v8 = v6 - 2;
    if ((v6 - 2) > 0x36)
    {
      if (v6 != 1 || (_DWORD)v5 == 28)
        v10 = 0;
      else
        v10 = CFSTR("und");
      goto LABEL_22;
    }
LABEL_21:
    v10 = CoreNLP::_languageTags[v8];
LABEL_22:
    values = v10;
    v11 = CFArrayCreate(0, (const void **)&values, 1, v4);
    CFDictionaryAddValue(Mutable, v7, v11);
    CFRelease(v11);
    goto LABEL_23;
  }
  return Mutable;
}

void CoreNLP::Orthography::~Orthography(CoreNLP::Orthography *this)
{
  char *v1;

  *(_QWORD *)this = &unk_1E2DF1C70;
  v1 = (char *)this + 16;
  std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::~__hash_table((uint64_t)this + 56);
  std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::~__hash_table((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_1E2DF1C70;
  v1 = (char *)this + 16;
  std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::~__hash_table((uint64_t)this + 56);
  std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::~__hash_table((uint64_t)v1);
  JUMPOUT(0x19401E994);
}

void ___ZN7CoreNLPL17_languageIDForTagEPK10__CFString_block_invoke()
{
  uint64_t *v0;
  uint64_t i;
  const void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  const void **__p;
  uint64_t *v12;
  uint64_t *v13;

  v0 = 0;
  __p = 0;
  v12 = 0;
  v13 = 0;
  for (i = 2; i != 57; ++i)
  {
    if (v0 >= v13)
    {
      v2 = __p;
      v3 = ((char *)v0 - (char *)__p) >> 3;
      v4 = v3 + 1;
      if ((unint64_t)(v3 + 1) >> 61)
        std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
      v5 = (char *)v13 - (char *)__p;
      if (((char *)v13 - (char *)__p) >> 2 > v4)
        v4 = v5 >> 2;
      if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8)
        v6 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v6 = v4;
      if (v6)
      {
        v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v13, v6);
        v2 = __p;
        v0 = v12;
      }
      else
      {
        v7 = 0;
      }
      v8 = (uint64_t *)&v7[8 * v3];
      *v8 = i;
      v9 = v8 + 1;
      while (v0 != (uint64_t *)v2)
      {
        v10 = *--v0;
        *--v8 = v10;
      }
      __p = (const void **)v8;
      v13 = (uint64_t *)&v7[8 * v6];
      if (v2)
        operator delete(v2);
      v0 = v9;
    }
    else
    {
      *v0++ = i;
    }
    v12 = v0;
  }
  CoreNLP::_languageIDForTag(__CFString const*)::dictionary = (uint64_t)CFDictionaryCreate(0, (const void **)CoreNLP::_languageTags, __p, ((char *)v0 - (char *)__p) >> 3, MEMORY[0x1E0C9AEB8], 0);
  if (__p)
    operator delete(__p);
}

void sub_191CE11E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

dispatch_queue_t ___ZN7CoreNLPL20_getOrthographyQueueEv_block_invoke()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("com.apple.CoreNLP.Orthography", 0);
  CoreNLP::_getOrthographyQueue(void)::queue = (uint64_t)result;
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>>>::__emplace_unique_key_args<NLScriptID,std::piecewise_construct_t const&,std::tuple<NLScriptID const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<long,std::hash<long>,std::equal_to<long>,std::allocator<long>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    v22 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_191CE14E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::unordered_map<NLScriptID,std::vector<unsigned short>>::unordered_map(uint64_t a1, uint64_t a2)
{
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<long,std::hash<long>,std::equal_to<long>,std::allocator<long>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    std::__hash_table<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>>>::__emplace_unique_key_args<NLScriptID,std::pair<NLScriptID const,std::vector<unsigned short>> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_191CE15A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>>>::__emplace_unique_key_args<NLScriptID,std::pair<NLScriptID const,std::vector<unsigned short>> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t **v8;
  uint64_t *result;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD v19[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      for (result = *v8; result; result = (uint64_t *)*result)
      {
        v10 = result[1];
        if (v10 == v5)
        {
          if (*((_DWORD *)result + 4) == (_DWORD)v5)
            return result;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6)
              v10 %= v6;
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>>>::__construct_node_hash<std::pair<NLScriptID const,std::vector<unsigned short>> const&>(a1, *a2, a3, (uint64_t)v19);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    std::__hash_table<long,std::hash<long>,std::equal_to<long>,std::allocator<long>>::__rehash<true>(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *(_QWORD *)v19[0] = *v17;
    *v17 = v19[0];
  }
  else
  {
    *(_QWORD *)v19[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v19[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v19[0])
    {
      v18 = *(_QWORD *)(*(_QWORD *)v19[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v19[0];
    }
  }
  result = (uint64_t *)v19[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_191CE17D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>>>::__construct_node_hash<std::pair<NLScriptID const,std::vector<unsigned short>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  *((_DWORD *)v8 + 4) = *(_DWORD *)a3;
  v8[4] = 0;
  v8[5] = 0;
  v8[3] = 0;
  result = std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(v8 + 3, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 1);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_191CE1874(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NLScriptID,std::vector<unsigned short>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::CNNModel::CreateCNNModel@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, const void **a3@<X2>, __int128 **a4@<X3>, CoreNLP::CNNModel **a5@<X8>)
{
  CoreNLP::CNNModel *v9;
  size_t v10;
  std::string *v11;
  const void *v12;
  std::string *v13;
  size_t v14;
  std::string *v15;
  const void *v16;
  std::string *v17;
  void *v18;
  size_t v19;
  std::string *v20;
  const void *v21;
  std::string *v22;
  size_t v23;
  std::string *p_p;
  const void *v25;
  std::string *v26;
  std::string __p;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;

  *a5 = 0;
  if ((_DWORD)result == 2)
  {
    v9 = (CoreNLP::CNNModel *)operator new();
    if (*((char *)a3 + 23) >= 0)
      v19 = *((unsigned __int8 *)a3 + 23);
    else
      v19 = (size_t)a3[1];
    v20 = &v30;
    std::string::basic_string[abi:ne180100]((uint64_t)&v30, v19 + 1);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v20 = (std::string *)v30.__r_.__value_.__r.__words[0];
    if (v19)
    {
      if (*((char *)a3 + 23) >= 0)
        v21 = a3;
      else
        v21 = *a3;
      memmove(v20, v21, v19);
    }
    *(_WORD *)((char *)&v20->__r_.__value_.__l.__data_ + v19) = 47;
    v22 = std::string::append(&v30, "model.espresso.net");
    v31 = *v22;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v29, "");
    if (*((char *)a3 + 23) >= 0)
      v23 = *((unsigned __int8 *)a3 + 23);
    else
      v23 = (size_t)a3[1];
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v23 + 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v23)
    {
      if (*((char *)a3 + 23) >= 0)
        v25 = a3;
      else
        v25 = *a3;
      memmove(p_p, v25, v23);
    }
    *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v23) = 47;
    v26 = std::string::append(&__p, "embedding_annex.json");
    v28 = *v26;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    CoreNLP::CNNModel::CNNModel((uint64_t)v9, 2, a2, (__int128 *)&v31, (__int128 *)&v29, (__int128 *)&v28, a4);
    *a5 = v9;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_56;
    v18 = (void *)v29.__r_.__value_.__r.__words[0];
    goto LABEL_55;
  }
  if ((_DWORD)result != 1)
    return result;
  v9 = (CoreNLP::CNNModel *)operator new();
  if (*((char *)a3 + 23) >= 0)
    v10 = *((unsigned __int8 *)a3 + 23);
  else
    v10 = (size_t)a3[1];
  v11 = &v30;
  std::string::basic_string[abi:ne180100]((uint64_t)&v30, v10 + 1);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if (v10)
  {
    if (*((char *)a3 + 23) >= 0)
      v12 = a3;
    else
      v12 = *a3;
    memmove(v11, v12, v10);
  }
  *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 47;
  v13 = std::string::append(&v30, "model.espresso.net");
  v31 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)a3 + 23) >= 0)
    v14 = *((unsigned __int8 *)a3 + 23);
  else
    v14 = (size_t)a3[1];
  v15 = &v28;
  std::string::basic_string[abi:ne180100]((uint64_t)&v28, v14 + 1);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v15 = (std::string *)v28.__r_.__value_.__r.__words[0];
  if (v14)
  {
    if (*((char *)a3 + 23) >= 0)
      v16 = a3;
    else
      v16 = *a3;
    memmove(v15, v16, v14);
  }
  *(_WORD *)((char *)&v15->__r_.__value_.__l.__data_ + v14) = 47;
  v17 = std::string::append(&v28, "char_id.json");
  v29 = *v17;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  CoreNLP::CNNModel::CNNModel((uint64_t)v9, 1, a2, (__int128 *)&v31, (__int128 *)&v29, (__int128 *)&__p, a4);
  *a5 = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    v18 = (void *)v28.__r_.__value_.__r.__words[0];
LABEL_55:
    operator delete(v18);
  }
LABEL_56:
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  result = CoreNLP::CNNModel::loadModel(v9);
  if ((result & 1) == 0)
  {
    *a5 = 0;
    return (*(uint64_t (**)(CoreNLP::CNNModel *))(*(_QWORD *)v9 + 8))(v9);
  }
  return result;
}

void sub_191CE1C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v36 - 73) < 0)
    operator delete(*(void **)(v36 - 96));
  if (a34 < 0)
    operator delete(a29);
  MEMORY[0x19401E994](v35, 0x10F3C405A2BBF4ALL);
  *v34 = 0;
  _Unwind_Resume(a1);
}

void sub_191CE1D48()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x191CE1D38);
}

BOOL CoreNLP::CNNModel::loadModel(CoreNLP::CNNModel *this)
{
  const std::string::value_type **v2;
  std::string::size_type v3;
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  int v9;
  _BOOL8 WordBasedModel;
  _BOOL8 v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  std::string v17;

  if (CoreNLP::loadEspressoAPI(void)::onceToken != -1)
    dispatch_once(&CoreNLP::loadEspressoAPI(void)::onceToken, &__block_literal_global_17);
  if (!CoreNLP::loadEspressoAPI(void)::isSoftlinked)
    return 0;
  if (*((_QWORD *)this + 2) && CoreNLP::_espresso_plan_destroy)
    CoreNLP::_espresso_plan_destroy();
  if (*((_QWORD *)this + 1) && CoreNLP::_espresso_context_destroy)
    CoreNLP::_espresso_context_destroy();
  v2 = (const std::string::value_type **)((char *)this + 56);
  if ((*((char *)this + 79) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 79))
    {
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *(_OWORD *)v2;
      v17.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 9);
      goto LABEL_15;
    }
    return 0;
  }
  v3 = *((_QWORD *)this + 8);
  if (!v3)
    return 0;
  std::string::__init_copy_ctor_external(&v17, *v2, v3);
LABEL_15:
  std::string::basic_string[abi:ne180100]<0>(v15, ".net");
  std::string::basic_string[abi:ne180100]<0>(__p, ".shape");
  CoreNLP::stringReplace(&v17, (char *)v15, (uint64_t)__p);
  if (v14 < 0)
    operator delete(__p[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v17;
  else
    v4 = (std::string *)v17.__r_.__value_.__r.__words[0];
  v5 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v4);
  v6 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:", v5);
  v7 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v6, 0, 0), "copy");
  *((_QWORD *)this + 24) = v7;
  v8 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("layer_shapes")), "objectForKeyedSubscript:", CFSTR("input1")), "objectForKeyedSubscript:", CFSTR("seq")), "unsignedIntegerValue");
  v9 = *((_DWORD *)this + 11);
  if (v9 == 2)
  {
    *((_DWORD *)this + 10) = v8;
    NSLog(CFSTR("Loading a word based CNN Model"));
    WordBasedModel = CoreNLP::CNNModel::loadWordBasedModel(this);
    goto LABEL_27;
  }
  if (v9 == 1)
  {
    *((_DWORD *)this + 10) = v8;
    NSLog(CFSTR("Loading a character based CNN Model"));
    WordBasedModel = CoreNLP::CNNModel::loadCharacterBasedModel(this);
LABEL_27:
    v11 = WordBasedModel;
    goto LABEL_29;
  }
  v11 = 0;
LABEL_29:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return v11;
}

void sub_191CE1F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::CNNModel::CNNModel(uint64_t a1, int a2, uint64_t a3, __int128 *a4, __int128 *a5, __int128 *a6, __int128 **a7)
{
  __int128 v11;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E2DF3020;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v11 = *a4;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 56) = v11;
  }
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v12 = *a5;
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(a1 + 80) = v12;
  }
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 104), *(const std::string::value_type **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v13 = *a6;
    *(_QWORD *)(a1 + 120) = *((_QWORD *)a6 + 2);
    *(_OWORD *)(a1 + 104) = v13;
  }
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 128), *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a7[1] - (char *)*a7) >> 3));
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  return a1;
}

void sub_191CE20D4(_Unwind_Exception *a1)
{
  const void **v1;
  uint64_t v2;
  void **v3;
  void **v4;

  if (*(char *)(v2 + 103) < 0)
    operator delete(*v4);
  if (*(char *)(v2 + 79) < 0)
    operator delete(*v3);
  nlp::CFScopedPtr<__CFLocale const*>::reset(v1, 0);
  _Unwind_Resume(a1);
}

void CoreNLP::CNNModel::~CNNModel(CoreNLP::CNNModel *this)
{
  BOOL v2;
  BOOL v3;
  const void *v4;
  const void *v5;
  uint64_t v6;
  void **v7;

  *(_QWORD *)this = &off_1E2DF3020;
  if (*((_QWORD *)this + 2))
    v2 = CoreNLP::_espresso_plan_destroy == 0;
  else
    v2 = 1;
  if (!v2)
    CoreNLP::_espresso_plan_destroy();
  if (*((_QWORD *)this + 1))
    v3 = CoreNLP::_espresso_context_destroy == 0;
  else
    v3 = 1;
  if (!v3)
    CoreNLP::_espresso_context_destroy();
  v4 = (const void *)*((_QWORD *)this + 24);
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 23);
  if (v5)
    CFRelease(v5);
  std::__tree<std::string>::destroy((uint64_t)this + 160, *((char **)this + 21));
  v6 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (void **)((char *)this + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)this + 6, 0);
}

{
  CoreNLP::CNNModel::~CNNModel(this);
  JUMPOUT(0x19401E994);
}

CFDictionaryRef CoreNLP::CNNModel::copyFeatureRepresentationLayers(id *this)
{
  return CFDictionaryCreateCopy(0, (CFDictionaryRef)objc_msgSend(this[24], "objectForKeyedSubscript:", CFSTR("layer_shapes")));
}

std::string *CoreNLP::stringReplace(std::string *this, char *a2, uint64_t a3)
{
  std::string *v4;
  std::string::size_type v5;
  std::string::size_type size;
  std::string *v7;
  int v8;
  std::string::size_type v9;
  std::string::size_type v10;
  char *v11;
  int64_t v12;
  std::string *v13;
  int64_t v14;
  int v15;
  int64_t v16;
  std::string *v17;
  std::string::size_type v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  uint64_t v22;
  int v23;
  BOOL v25;

  v4 = this;
  v5 = 0;
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v7 = this;
  else
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  v8 = a2[23];
  v25 = v8 < 0;
  v9 = *((_QWORD *)a2 + 1);
  v10 = a2[23];
  if (v8 >= 0)
    v11 = a2;
  else
    v11 = *(char **)a2;
  if (v8 >= 0)
    v12 = a2[23];
  else
    v12 = *((_QWORD *)a2 + 1);
  while (!v12)
  {
LABEL_22:
    if (v5 != -1)
    {
      if (v25)
        v18 = v9;
      else
        v18 = v10;
      v19 = *(char *)(a3 + 23);
      if (v19 >= 0)
        v20 = (const std::string::value_type *)a3;
      else
        v20 = *(const std::string::value_type **)a3;
      if (v19 >= 0)
        v21 = *(unsigned __int8 *)(a3 + 23);
      else
        v21 = *(_QWORD *)(a3 + 8);
      this = std::string::replace(v4, v5, v18, v20, v21);
      v22 = *(unsigned __int8 *)(a3 + 23);
      if ((v22 & 0x80u) != 0)
        v22 = *(_QWORD *)(a3 + 8);
      v5 += v22;
      size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
      if ((size & 0x80u) == 0)
        v7 = v4;
      else
        v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
      if ((size & 0x80u) != 0)
        size = v4->__r_.__value_.__l.__size_;
      v23 = a2[23];
      v25 = v23 < 0;
      v9 = *((_QWORD *)a2 + 1);
      v10 = a2[23];
      v11 = v23 >= 0 ? a2 : *(char **)a2;
      v12 = v23 >= 0 ? a2[23] : *((_QWORD *)a2 + 1);
      if (size >= v5)
        continue;
    }
    return this;
  }
  this = (std::string *)((char *)v7 + v5);
  v13 = (std::string *)((char *)v7 + size);
  v14 = size - v5;
  if (v14 >= v12)
  {
    v15 = *v11;
    do
    {
      v16 = v14 - v12;
      if (v16 == -1)
        break;
      this = (std::string *)memchr(this, v15, v16 + 1);
      if (!this)
        break;
      v17 = this;
      this = (std::string *)memcmp(this, v11, v12);
      if (!(_DWORD)this)
      {
        if (v17 == v13)
          return this;
        v5 = (char *)v17 - (char *)v7;
        goto LABEL_22;
      }
      this = (std::string *)((char *)&v17->__r_.__value_.__l.__data_ + 1);
      v14 = (char *)v13 - ((char *)&v17->__r_.__value_.__l.__data_ + 1);
    }
    while (v14 >= v12);
  }
  return this;
}

BOOL CoreNLP::CNNModel::loadCharacterBasedModel(CoreNLP::CNNModel *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  int v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *__p[2];
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void **v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*((char *)this + 103) >= 0)
    v2 = (char *)this + 80;
  else
    v2 = (char *)*((_QWORD *)this + 10);
  v3 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v2);
  v4 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:", v3);
  v5 = (void *)objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v4, 0, 0);
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v18 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
        v10 = objc_msgSend((id)objc_msgSend(v5, "objectForKeyedSubscript:", v9), "unsignedIntegerValue");
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v9, "UTF8String"));
        v21 = __p;
        *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v21)+ 14) = v10;
        if (v16 < 0)
          operator delete(__p[0]);
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
    }
    while (v6);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "PAD");
  v11 = std::__tree<std::string>::find<std::string>((uint64_t)this + 160, (const void **)__p);
  v12 = (char *)this + 168;
  if (v16 < 0)
    operator delete(__p[0]);
  if (v12 == (char *)v11)
  {
    NSLog(CFSTR("Cannot find the PAD mapping"));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "UNK");
    v13 = std::__tree<std::string>::find<std::string>((uint64_t)this + 160, (const void **)__p);
    if (v16 < 0)
      operator delete(__p[0]);
    if (v12 != (char *)v13)
      return CoreNLP::CNNModel::initInference(this);
    NSLog(CFSTR("Cannot find the UNK mapping"));
  }
  return 0;
}

void sub_191CE2640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL CoreNLP::CNNModel::loadWordBasedModel(CoreNLP::CNNModel *this)
{
  CoreNLP::WordEmbedding *v2;
  uint64_t v3;
  _BOOL8 inited;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  const __CFDictionary *v8;

  v2 = (CoreNLP::WordEmbedding *)operator new();
  CoreNLP::WordEmbedding::WordEmbedding(v2);
  v3 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = v2;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v2 = (CoreNLP::WordEmbedding *)*((_QWORD *)this + 19);
  }
  if (!CoreNLP::WordEmbedding::loadModel(v2, *((const __CFLocale **)this + 6), CFSTR("embedding.dat")))
    return 0;
  inited = CoreNLP::CNNModel::initInference(this);
  if (inited)
  {
    if (*((char *)this + 127) >= 0)
      v5 = (char *)this + 104;
    else
      v5 = (char *)*((_QWORD *)this + 13);
    v6 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
    v7 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:", v6);
    v8 = (const __CFDictionary *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v7, 0, 0), "copy");
    *((_QWORD *)this + 23) = v8;
  }
  else
  {
    v8 = (const __CFDictionary *)*((_QWORD *)this + 23);
  }
  if (!CFDictionaryGetValue(v8, CFSTR("PAD")))
  {
    NSLog(CFSTR("Cannot find the PAD mapping in annex"));
    return 0;
  }
  if (!CFDictionaryGetValue(*((CFDictionaryRef *)this + 23), CFSTR("UNK")))
  {
    NSLog(CFSTR("Cannot find the UNK mapping in annex"));
    return 0;
  }
  return inited;
}

void sub_191CE2790(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10F3C40D85B6A7BLL);
  _Unwind_Resume(a1);
}

BOOL CoreNLP::CNNModel::initInference(CoreNLP::CNNModel *this)
{
  int v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;

  *((_QWORD *)this + 1) = CoreNLP::_espresso_create_context(0, 0xFFFFFFFFLL);
  *((_QWORD *)this + 2) = CoreNLP::_espresso_create_plan();
  v2 = CoreNLP::_espresso_plan_add_network();
  CoreNLP::_espresso_network_declare_input(*((_QWORD *)this + 3), *((_QWORD *)this + 4), "input1");
  CoreNLP::_espresso_network_declare_output(*((_QWORD *)this + 3), *((_QWORD *)this + 4), "output1");
  v3 = (uint64_t *)*((_QWORD *)this + 16);
  v4 = (uint64_t *)*((_QWORD *)this + 17);
  while (v3 != v4)
  {
    v5 = v3;
    if (*((char *)v3 + 23) < 0)
      v5 = (uint64_t *)*v3;
    CoreNLP::_espresso_network_declare_output(*((_QWORD *)this + 3), *((_QWORD *)this + 4), v5);
    v3 += 3;
  }
  return (v2 | CoreNLP::_espresso_plan_build(*((_QWORD *)this + 2))) == 0;
}

void CoreNLP::CNNModel::prepareCharacterFeatureVector(uint64_t a1, std::vector<std::string> *this)
{
  std::vector<std::string>::const_iterator v3;
  unint64_t v5;
  unint64_t v6;
  std::vector<std::string>::const_iterator v7;
  uint64_t i;
  std::vector<std::string>::const_iterator v10;
  std::vector<std::string>::value_type __x;

  v3.__i_ = this->__begin_;
  v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)v3.__i_) >> 3);
  v6 = *(unsigned int *)(a1 + 40);
  if (v5 <= v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&__x, "PAD");
    for (i = *(unsigned int *)(a1 + 40) + 0x5555555555555555 * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
          i;
          --i)
    {
      v10.__i_ = this->__begin_;
      std::vector<std::string>::insert(this, v10, &__x);
    }
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__x.__r_.__value_.__l.__data_);
  }
  else
  {
    v7.__i_ = v3.__i_ + v5 - v6;
    std::vector<std::string>::erase(this, v3, v7);
  }
}

void sub_191CE2978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::vector<std::string>::iterator std::vector<std::string>::erase(std::vector<std::string> *this, std::vector<std::string>::const_iterator __first, std::vector<std::string>::const_iterator __last)
{
  std::string *v5;
  std::string *v6;
  std::vector<std::string>::pointer end;
  char v9;

  if (__first.__i_ != __last.__i_)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v9, (__int128 *)__last.__i_, (__int128 *)this->__end_, (uint64_t)__first.__i_);
    v6 = v5;
    end = this->__end_;
    if (end != v5)
    {
      do
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(end[-1].__r_.__value_.__l.__data_);
        --end;
      }
      while (end != v6);
    }
    this->__end_ = v6;
  }
  return (std::vector<std::string>::iterator)__first.__i_;
}

std::vector<std::string>::iterator std::vector<std::string>::insert(std::vector<std::string> *this, std::vector<std::string>::const_iterator __position, std::vector<std::string>::const_reference __x)
{
  std::string *i;
  std::vector<std::string>::pointer end;
  std::allocator<std::string> *p_end_cap;
  std::string *v8;
  std::string *value;
  std::vector<std::string>::pointer begin;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::string *v16;
  std::__split_buffer<std::string> __v;

  i = (std::string *)__position.__i_;
  end = this->__end_;
  value = this->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&this->__end_cap_;
  v8 = value;
  if (end >= value)
  {
    begin = this->__begin_;
    v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3) + 1;
    if (v11 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)__position.__i_ - (char *)begin) >> 3);
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)begin) >> 3);
    v14 = 2 * v13;
    if (2 * v13 <= v11)
      v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3) + 1;
    if (v13 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v14;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v15)
      v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v15);
    else
      v16 = 0;
    __v.__first_ = v16;
    __v.__begin_ = v16 + v12;
    __v.__end_ = __v.__begin_;
    __v.__end_cap_.__value_ = &v16[v15];
    std::__split_buffer<std::string>::push_back[abi:ne180100]((uint64_t)&__v, (__int128 *)__x);
    i = std::vector<std::string>::__swap_out_circular_buffer(this, &__v, i);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else if (__position.__i_ == end)
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)this, (__int128 *)__x);
  }
  else
  {
    std::vector<std::string>::__move_range(this, (std::vector<std::string>::pointer)__position.__i_, end, (std::vector<std::string>::pointer)&__position.__i_[1]);
    if (i <= __x)
      __x += this->__end_ > __x;
    std::string::operator=(i, __x);
  }
  return (std::vector<std::string>::iterator)i;
}

void sub_191CE2B74(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void CoreNLP::CNNModel::fillCharacterInput(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  void *__p[2];
  char v13;
  std::string v14;
  void **v15;

  if (*(_DWORD *)(a1 + 40))
  {
    v6 = 0;
    v7 = 0;
    v8 = (uint64_t **)(a1 + 160);
    v9 = a1 + 168;
    do
    {
      v10 = (__int128 *)(*a2 + v6);
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v11 = *v10;
        v14.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v11;
      }
      if (v9 == std::__tree<std::string>::find<std::string>((uint64_t)v8, (const void **)&v14.__r_.__value_.__l.__data_))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "UNK");
        v15 = __p;
        *(float *)(*a3 + 4 * v7) = (float)*((unsigned int *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v15)+ 14);
        if (v13 < 0)
          operator delete(__p[0]);
      }
      else
      {
        __p[0] = &v14;
        *(float *)(*a3 + 4 * v7) = (float)*((unsigned int *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (const void **)&v14.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 14);
      }
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
      ++v7;
      v6 += 24;
    }
    while (v7 < *(unsigned int *)(a1 + 40));
  }
}

void sub_191CE2CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void CoreNLP::CNNModel::prepareWordFeatureData(uint64_t a1, uint64_t *a2)
{
  std::vector<std::string> *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t i;
  std::vector<std::string>::value_type __p;
  std::vector<std::string> v10;

  v3 = (std::vector<std::string> *)*a2;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - (uint64_t)v3) >> 3);
  v6 = *(unsigned int *)(a1 + 40);
  if (v5 <= v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "PAD");
    std::vector<std::string>::vector(&v10, 1uLL, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    for (i = *(unsigned int *)(a1 + 40) + 0x5555555555555555 * ((a2[1] - *a2) >> 3); i; --i)
      std::vector<std::vector<std::string>>::insert(a2, (std::vector<std::string> *)*a2, (__int128 **)&v10);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  else
  {
    std::vector<std::vector<std::string>>::erase((uint64_t)a2, v3, v3 + v5 - v6);
  }
}

void sub_191CE2E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::vector<std::string> *std::vector<std::vector<std::string>>::erase(uint64_t a1, std::vector<std::string> *this, std::vector<std::string> *a3)
{
  void **v5;
  void **v6;
  void **v7;
  char v9;
  void **v10;

  if (this != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>((int)&v9, (uint64_t)a3, *(_QWORD *)(a1 + 8), this);
    v6 = v5;
    v7 = *(void ***)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 3;
        v10 = v7;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return this;
}

std::vector<std::string> *std::vector<std::vector<std::string>>::insert(uint64_t *a1, std::vector<std::string> *a2, __int128 **a3)
{
  std::vector<std::string> *v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  void *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = a2;
  v6 = a1[1];
  v9 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v8 = v9;
  if (v6 >= v9)
  {
    v10 = *a1;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v11 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v10) >> 3);
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v10) >> 3);
    v14 = 2 * v13;
    if (2 * v13 <= v11)
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v13 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v14;
    v22 = v7;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v15);
    else
      v16 = 0;
    v18 = v16;
    v19 = &v16[24 * v12];
    v20 = v19;
    v21 = &v16[24 * v15];
    std::__split_buffer<std::vector<std::string>>::push_back[abi:ne180100](&v18, a3);
    v4 = (std::vector<std::string> *)std::vector<std::vector<std::string>>::__swap_out_circular_buffer(a1, &v18, v4);
    std::__split_buffer<std::vector<std::string>>::~__split_buffer(&v18);
  }
  else if (a2 == (std::vector<std::string> *)v6)
  {
    std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)a1, a3);
  }
  else
  {
    std::vector<std::vector<std::string>>::__move_range((uint64_t)a1, a2, v6, (uint64_t)&a2[1]);
    if (v4 <= (std::vector<std::string> *)a3)
      a3 += 3 * (a1[1] > (unint64_t)a3);
    if (v4 != (std::vector<std::string> *)a3)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v4, (std::string *)*a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  }
  return v4;
}

void sub_191CE302C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void CoreNLP::CNNModel::fillWordInput(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  __int128 *v8;
  __int128 v9;
  unint64_t v10;
  std::string *v11;
  int *v12;
  unint64_t v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  std::string *v21;
  std::string *v22;
  std::string *v23;
  void *v24;
  _BYTE *v25;
  std::string v26;
  std::string **v27;
  char v28;
  void *__p[2];
  char v30;
  __int128 v31;

  *(_QWORD *)&v31 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 40))
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *(__int128 **)(*a2 + 24 * v7);
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v9 = *v8;
        v26.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v9;
      }
      v10 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 192), "objectForKeyedSubscript:", CFSTR("layer_shapes")), "objectForKeyedSubscript:", CFSTR("input1")), "objectForKeyedSubscript:", CFSTR("k")), "unsignedIntegerValue");
      LODWORD(v21) = 0;
      std::vector<float>::vector(&v24, v10, &v21);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v26;
      else
        v11 = (std::string *)v26.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v11), "lowercaseString"), "UTF8String"));
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v27 = &v21;
      v28 = 0;
      v21 = (std::string *)operator new(0x18uLL);
      v22 = v21;
      v23 = v21 + 1;
      v22 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v23, (__int128 *)__p, &v31, v21);
      if (v30 < 0)
        operator delete(__p[0]);
      if (CoreNLP::WordEmbedding::getAverageEmbedding(*(CoreNLP::WordEmbedding **)(a1 + 152), (uint64_t *)&v21, (uint64_t)&v24))
      {
        v12 = (int *)v24;
        if (v25 != v24)
        {
          v13 = (v25 - (_BYTE *)v24) >> 2;
          if (v13 <= 1)
            v13 = 1;
          v14 = (_DWORD *)(*a3 + v10 * v6);
          do
          {
            v15 = *v12++;
            *v14++ = v15;
            --v13;
          }
          while (v13);
        }
      }
      else
      {
        v16 = objc_msgSend(*(id *)(a1 + 184), "objectForKey:", CFSTR("UNK"));
        if (v25 != v24)
        {
          v17 = (void *)v16;
          v18 = 0;
          v19 = v10 * v6;
          do
          {
            objc_msgSend((id)objc_msgSend(v17, "objectAtIndex:", v18), "floatValue");
            *(_DWORD *)(*a3 + v19 + 4 * v18++) = v20;
          }
          while (v18 < (v25 - (_BYTE *)v24) >> 2);
        }
      }
      __p[0] = &v21;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (v24)
      {
        v25 = v24;
        operator delete(v24);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      ++v7;
      v6 += 4;
    }
    while (v7 < *(unsigned int *)(a1 + 40));
  }
}

void sub_191CE32C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::CNNModel::featureRepresentation(uint64_t a1, uint64_t *a2)
{
  void *v4;
  int v5;
  __int128 **v6;
  uint64_t v7;
  std::string v9;
  std::string *v10;

  v4 = (void *)MEMORY[0x19401EF04]();
  v5 = *(_DWORD *)(a1 + 44);
  if (v5 == 2)
  {
    CoreNLP::CNNModel::prepareWordFeatureData(a1, a2);
    v7 = CoreNLP::CNNModel::computeFeatureVectorWordBased((_QWORD *)a1, a2);
  }
  else if (v5 == 1)
  {
    v6 = (__int128 **)*a2;
    memset(&v9, 0, sizeof(v9));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v9, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v6[1] - (char *)*v6) >> 3));
    CoreNLP::CNNModel::prepareCharacterFeatureVector(a1, (std::vector<std::string> *)&v9);
    v7 = CoreNLP::CNNModel::computeFeatureVectorCharBased((_QWORD *)a1, &v9);
    v10 = &v9;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  }
  else
  {
    v7 = 0;
  }
  objc_autoreleasePoolPop(v4);
  return v7;
}

void sub_191CE3430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::CNNModel::computeFeatureVectorCharBased(_QWORD *a1, _QWORD *a2)
{
  __int128 *v4;
  uint64_t *i;
  __int128 *v6;
  void (*v7)(uint64_t, uint64_t, __int128 *, uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 *v13[21];
  char **v14;
  char *v15[2];

  v15[0] = 0;
  v15[1] = 0;
  v14 = v15;
  v4 = (__int128 *)a1[16];
  for (i = (uint64_t *)a1[17]; v4 != (__int128 *)i; v4 = (__int128 *)((char *)v4 + 24))
  {
    v13[0] = v4;
    std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v14, (const void **)v4, (uint64_t)&std::piecewise_construct, v13);
    v6 = v4;
    if (*((char *)v4 + 23) < 0)
      v6 = *(__int128 **)v4;
    v7 = (void (*)(uint64_t, uint64_t, __int128 *, uint64_t *, uint64_t, uint64_t, uint64_t))CoreNLP::_espresso_network_bind_buffer;
    v8 = a1[3];
    v9 = a1[4];
    v13[0] = v4;
    v10 = std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v14, (const void **)v4, (uint64_t)&std::piecewise_construct, v13);
    v7(v8, v9, v6, v10 + 7, 0x20000, 0x10000, 0x10000);
  }
  CoreNLP::_espresso_network_bind_buffer(a1[3], a1[4], "input1", v13, 0x10000, 0x10000, 0x10000);
  CoreNLP::CNNModel::fillCharacterInput((uint64_t)a1, a2, v13);
  if (CoreNLP::_espresso_plan_execute_sync(a1[2]))
  {
    NSLog(CFSTR("Failed to execute the plan to extract from char CNN"));
    v11 = 0;
  }
  else
  {
    v11 = CoreNLP::CNNModel::fillTheResults((uint64_t)a1, &v14);
  }
  std::__tree<std::string>::destroy((uint64_t)&v14, v15[0]);
  return v11;
}

void sub_191CE35B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1 - 120, *(char **)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::CNNModel::computeFeatureVectorWordBased(_QWORD *a1, _QWORD *a2)
{
  __int128 *v4;
  uint64_t *i;
  __int128 *v6;
  void (*v7)(uint64_t, uint64_t, __int128 *, uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 *v13[21];
  char **v14;
  char *v15[2];

  v15[0] = 0;
  v15[1] = 0;
  v14 = v15;
  v4 = (__int128 *)a1[16];
  for (i = (uint64_t *)a1[17]; v4 != (__int128 *)i; v4 = (__int128 *)((char *)v4 + 24))
  {
    v13[0] = v4;
    std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v14, (const void **)v4, (uint64_t)&std::piecewise_construct, v13);
    v6 = v4;
    if (*((char *)v4 + 23) < 0)
      v6 = *(__int128 **)v4;
    v7 = (void (*)(uint64_t, uint64_t, __int128 *, uint64_t *, uint64_t, uint64_t, uint64_t))CoreNLP::_espresso_network_bind_buffer;
    v8 = a1[3];
    v9 = a1[4];
    v13[0] = v4;
    v10 = std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v14, (const void **)v4, (uint64_t)&std::piecewise_construct, v13);
    v7(v8, v9, v6, v10 + 7, 0x20000, 0x10000, 0x10000);
  }
  CoreNLP::_espresso_network_bind_buffer(a1[3], a1[4], "input1", v13, 0x10000, 0x10000, 0x10000);
  CoreNLP::CNNModel::fillWordInput((uint64_t)a1, a2, v13);
  if (CoreNLP::_espresso_plan_execute_sync(a1[2]))
  {
    NSLog(CFSTR("Failed to execute the plan to extract from word CNN"));
    v11 = 0;
  }
  else
  {
    v11 = CoreNLP::CNNModel::fillTheResults((uint64_t)a1, &v14);
  }
  std::__tree<std::string>::destroy((uint64_t)&v14, v15[0]);
  return v11;
}

void sub_191CE3740(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1 - 120, *(char **)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::CNNModel::fillTheResults(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  uint64_t v20;
  uint64_t v21;
  void *v25;
  double v26;
  uint64_t v27;
  uint64_t i;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  double v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v45;
  _QWORD *v46;
  _QWORD *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;

  v3 = objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v4 = (void *)v3;
  v7 = (_QWORD *)*a2;
  v5 = a2 + 1;
  v6 = v7;
  if (v7 == v5)
    return objc_msgSend(v4, "copy");
  v45 = (void *)v3;
  v46 = v5;
  while (1)
  {
    v8 = (void *)objc_msgSend(*(id *)(a1 + 192), "objectForKeyedSubscript:", CFSTR("layer_shapes"));
    v9 = v6 + 4;
    if (*((char *)v6 + 55) < 0)
      v9 = (_QWORD *)v6[4];
    v10 = (void *)objc_msgSend(v8, "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9));
    v11 = objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("k")), "unsignedIntegerValue");
    v12 = objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("w")), "unsignedIntegerValue");
    v13 = objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("n")), "unsignedIntegerValue");
    v14 = v10;
    v15 = v11;
    v16 = objc_msgSend((id)objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("h")), "unsignedIntegerValue");
    v17 = !v11 || v12 == 0;
    v18 = v17 || v13 == 0;
    if (v18 || v16 == 0)
      break;
    v20 = v16;
    v48 = v6 + 4;
    v21 = v16 * v13 * v15;
    if (v16 * v13 * v12 == 1 || v13 * v12 * v15 == 1 || v16 * v12 * v15 == 1 || v21 == 1)
    {
      v25 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v27 = v21 * v12;
      if (v27)
      {
        for (i = 0; i != v27; ++i)
        {
          LODWORD(v26) = *(_DWORD *)(v6[7] + 4 * i);
          objc_msgSend(v25, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v26));
        }
      }
      if (*((char *)v6 + 55) < 0)
        v29 = (_QWORD *)*v48;
      else
        v29 = v6 + 4;
      v30 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v29);
      v31 = v4;
      v32 = v25;
    }
    else
    {
      v52 = v12;
      v49 = v15;
      v50 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v33 = 0;
      v34 = 0;
      do
      {
        v51 = v33;
        v53 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v35 = 0;
        do
        {
          v36 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
          v37 = 0;
          do
          {
            v38 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
            v40 = v20;
            do
            {
              LODWORD(v39) = *(_DWORD *)(v6[7] + 4 * v34++);
              objc_msgSend(v38, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v39));
              --v40;
            }
            while (v40);
            objc_msgSend(v36, "addObject:", v38);
            ++v37;
          }
          while (v37 != v13);
          objc_msgSend(v53, "addObject:", v36);
          ++v35;
        }
        while (v35 != v52);
        objc_msgSend(v50, "addObject:", v53);
        v33 = v51 + 1;
      }
      while (v51 + 1 != v49);
      if (*((char *)v6 + 55) < 0)
      {
        v41 = (_QWORD *)*v48;
        v4 = v45;
        v5 = v46;
      }
      else
      {
        v4 = v45;
        v5 = v46;
        v41 = v6 + 4;
      }
      v30 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v41);
      v31 = v4;
      v32 = v50;
    }
    objc_msgSend(v31, "setObject:forKeyedSubscript:", v32, v30);
    v42 = (_QWORD *)v6[1];
    if (v42)
    {
      do
      {
        v43 = v42;
        v42 = (_QWORD *)*v42;
      }
      while (v42);
    }
    else
    {
      do
      {
        v43 = (_QWORD *)v6[2];
        v17 = *v43 == (_QWORD)v6;
        v6 = v43;
      }
      while (!v17);
    }
    v6 = v43;
    if (v43 == v5)
      return objc_msgSend(v4, "copy");
  }
  NSLog(CFSTR("Cannot extract one of the dimensions"));
  return 0;
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<std::string>::__move_range(std::vector<std::string> *this, std::vector<std::string>::pointer __from_s, std::vector<std::string>::pointer __from_e, std::vector<std::string>::pointer __to)
{
  std::vector<std::string>::pointer end;
  char *v7;
  std::vector<std::string>::pointer v8;
  unint64_t v9;
  __int128 v10;
  char v11;

  end = this->__end_;
  v7 = (char *)__from_s + (char *)end - (char *)__to;
  v8 = end;
  if (v7 < (char *)__from_e)
  {
    v9 = (unint64_t)v7;
    v8 = this->__end_;
    do
    {
      v10 = *(_OWORD *)v9;
      v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
      ++v8;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = 0;
      v9 += 24;
    }
    while (v9 < (unint64_t)__from_e);
  }
  this->__end_ = v8;
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v11, (uint64_t)__from_s, (uint64_t)v7, (uint64_t)end);
}

void std::__split_buffer<std::string>::push_back[abi:ne180100](uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  std::string *v27;
  __int128 v28;
  std::__split_buffer<std::string> v29;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 == *(_QWORD *)(a1 + 24))
  {
    v5 = *(__int128 **)(a1 + 8);
    if ((unint64_t)v5 <= *(_QWORD *)a1)
    {
      v11 = v4 - *(_QWORD *)a1;
      v10 = v11 == 0;
      v12 = 0x5555555555555556 * (v11 >> 3);
      if (v10)
        v13 = 1;
      else
        v13 = v12;
      v14 = v13 >> 2;
      v15 = *(_QWORD *)(a1 + 32);
      v29.__end_cap_.__value_ = *(std::allocator<std::string> **)(a1 + 32);
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v15, v13);
      v18 = &v16[24 * v14];
      v19 = *(_QWORD *)(a1 + 8);
      v20 = *(_QWORD *)(a1 + 16) - v19;
      if (v20)
      {
        v21 = v20 / 24;
        v22 = &v18[24 * v21];
        v23 = 24 * v21;
        v24 = &v16[24 * v14];
        do
        {
          v25 = *(_OWORD *)v19;
          *((_QWORD *)v24 + 2) = *(_QWORD *)(v19 + 16);
          *(_OWORD *)v24 = v25;
          v24 += 24;
          *(_QWORD *)(v19 + 8) = 0;
          *(_QWORD *)(v19 + 16) = 0;
          *(_QWORD *)v19 = 0;
          v19 += 24;
          v23 -= 24;
        }
        while (v23);
        v26 = *(int64x2_t *)(a1 + 8);
      }
      else
      {
        v26 = vdupq_n_s64(v19);
        v22 = &v16[24 * v14];
      }
      v29.__first_ = *(std::__split_buffer<std::string>::pointer *)a1;
      *(_QWORD *)a1 = v16;
      *(_QWORD *)(a1 + 8) = v18;
      *(int64x2_t *)&v29.__begin_ = v26;
      v27 = *(std::string **)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v22;
      *(_QWORD *)(a1 + 24) = &v16[24 * v17];
      v29.__end_cap_.__value_ = v27;
      std::__split_buffer<std::string>::~__split_buffer(&v29);
      v4 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
      if (v6 >= -1)
        v7 = v6 + 1;
      else
        v7 = v6 + 2;
      v8 = -3 * (v7 >> 1);
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v29, v5, (__int128 *)v4, (uint64_t)v5 - 24 * (v7 >> 1));
      v4 = v9;
      *(_QWORD *)(a1 + 8) += 8 * v8;
      *(_QWORD *)(a1 + 16) = v9;
    }
  }
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v4, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v28 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v28;
  }
  *(_QWORD *)(a1 + 16) += 24;
}

std::vector<std::string>::pointer std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v, std::vector<std::string>::pointer __p)
{
  std::string *begin;
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *v8;
  std::string *v9;
  std::string *end;
  std::string *value;

  begin = __v->__begin_;
  p_end_cap = &this->__end_cap_;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)__p, (uint64_t)__p, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)begin, (uint64_t)begin);
  __v->__begin_ = v8;
  __v->__end_ = (std::__split_buffer<std::string>::pointer)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)__p, (__int128 *)this->__end_, (uint64_t)__v->__end_);
  v9 = this->__begin_;
  this->__begin_ = __v->__begin_;
  __v->__begin_ = v9;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  if (a3 != a2)
  {
    v6 = a3;
    do
    {
      v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0)
        operator delete(*(void **)v7);
      v8 = *(_OWORD *)(v6 - 24);
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 - 8);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v6 - 1) = 0;
      *(_BYTE *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a4;
  v10 = a4;
  v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      v5 = *a2;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v4 = v5;
      v4 += 24;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    while (a2 != a3);
    v10 = v4;
  }
  v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>(int a1, uint64_t a2, uint64_t a3, std::vector<std::string> *this)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    std::vector<std::string>::__vdeallocate(this);
    *(_OWORD *)&this->__begin_ = *(_OWORD *)v5;
    this->__end_cap_.__value_ = *(std::string **)(v5 + 16);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    ++this;
    v5 += 24;
  }
  while (v5 != v6);
  return v6;
}

_QWORD *std::vector<std::vector<std::string>>::__move_range(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v11;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)((char *)a2 + v6 - a4);
  v8 = (_QWORD *)v6;
  if ((unint64_t)v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD **)(a1 + 8);
    do
    {
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      *(_OWORD *)v8 = *(_OWORD *)v9;
      v8[2] = v9[2];
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      v8 += 3;
      v9 += 3;
    }
    while ((unint64_t)v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>((uint64_t)&v11, a2, v7, v6);
}

std::string *std::__split_buffer<std::vector<std::string>>::push_back[abi:ne180100](_QWORD *a1, __int128 **a2)
{
  std::string *v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int64x2_t v23;
  uint64_t v24;
  std::string *result;
  void *v26;
  int64x2_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = (std::string *)a1[2];
  if (v4 == (std::string *)a1[3])
  {
    v5 = a1[1];
    if (v5 <= *a1)
    {
      v11 = (uint64_t)v4 - *a1;
      v10 = v11 == 0;
      v12 = 0x5555555555555556 * (v11 >> 3);
      if (v10)
        v13 = 1;
      else
        v13 = v12;
      v14 = v13 >> 2;
      v15 = a1[4];
      v29 = a1[4];
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v15, v13);
      v18 = &v16[24 * v14];
      v19 = a1[1];
      v20 = a1[2] - v19;
      if (v20)
      {
        v21 = &v18[v20];
        v22 = &v16[24 * v14];
        do
        {
          *(_QWORD *)v22 = 0;
          *((_QWORD *)v22 + 1) = 0;
          *((_QWORD *)v22 + 2) = 0;
          *(_OWORD *)v22 = *(_OWORD *)v19;
          *((_QWORD *)v22 + 2) = *(_QWORD *)(v19 + 16);
          *(_QWORD *)v19 = 0;
          *(_QWORD *)(v19 + 8) = 0;
          *(_QWORD *)(v19 + 16) = 0;
          v22 += 24;
          v19 += 24;
        }
        while (v22 != v21);
        v23 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        v23 = vdupq_n_s64(v19);
        v21 = &v16[24 * v14];
      }
      v26 = (void *)*a1;
      *a1 = v16;
      a1[1] = v18;
      v27 = v23;
      v24 = a1[3];
      a1[2] = v21;
      a1[3] = &v16[24 * v17];
      v28 = v24;
      std::__split_buffer<std::vector<std::string>>::~__split_buffer(&v26);
      v4 = (std::string *)a1[2];
    }
    else
    {
      v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
      if (v6 >= -1)
        v7 = v6 + 1;
      else
        v7 = v6 + 2;
      v8 = -3 * (v7 >> 1);
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>((int)&v26, v5, (uint64_t)v4, (std::vector<std::string> *)(v5 - 24 * (v7 >> 1)));
      v4 = v9;
      a1[1] += 8 * v8;
      a1[2] = v9;
    }
  }
  v4->__r_.__value_.__r.__words[0] = 0;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v4, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  a1[2] += 24;
  return result;
}

uint64_t std::vector<std::vector<std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (_QWORD *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>(v7, (uint64_t)a3, a1[1], (_QWORD *)a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

_QWORD *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  std::vector<std::string> *v6;
  _QWORD *v7;
  __int128 v8;

  if (a3 != a2)
  {
    v6 = (std::vector<std::string> *)(a4 - 24);
    v7 = a3;
    do
    {
      std::vector<std::string>::__vdeallocate(v6);
      v8 = *(_OWORD *)(v7 - 3);
      v7 -= 3;
      *(_OWORD *)&v6->__begin_ = v8;
      v6->__end_cap_.__value_ = (std::string *)v7[2];
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      --v6;
    }
    while (v7 != a2);
  }
  return a3;
}

_QWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD v6[3];
  char v7;
  _QWORD *v8;
  _QWORD *v9;

  v4 = a4;
  v9 = a4;
  v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      *(_OWORD *)v4 = *(_OWORD *)a2;
      v4[2] = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v4 += 3;
      a2 += 24;
    }
    while (a2 != a3);
    v9 = v4;
  }
  v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

uint64_t *std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

double std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;
  double result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0xE0uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_QWORD *)v6 + 27) = 0;
  result = 0.0;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_191CE45BC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::isChineseCompoundLastName(CoreNLP *this, const CoreNLP::UStringPiece *a2)
{
  unsigned __int16 *v2;
  BOOL v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (unsigned __int16 *)*((_QWORD *)this + 1);
  if (v2)
    v3 = *((_QWORD *)this + 3) >= 2uLL;
  else
    v3 = 0;
  if (!v3)
    return 0;
  v4 = 0;
  v5 = *v2;
  v6 = 29;
  v7 = 14;
  while (1)
  {
    v8 = (unsigned __int16 *)((char *)&CoreNLP::kChineseCompoundLastNames + 4 * v7);
    v9 = *v8;
    if (v9 > v5)
      goto LABEL_8;
    if (v9 != v5)
      break;
    v10 = v8[1];
    v11 = v2[1];
    if (v10 <= v11)
    {
      if (v11 <= v10)
        return 1;
      goto LABEL_14;
    }
LABEL_8:
    v6 = v7 - 1;
LABEL_15:
    v12 = v6 + v4;
    if (v6 + v4 < 0 != __OFADD__(v6, v4))
      ++v12;
    v7 = v12 >> 1;
    if (v4 > v6)
      return 0;
  }
  if (v5 > v9)
  {
LABEL_14:
    v4 = v7 + 1;
    goto LABEL_15;
  }
  return 1;
}

uint64_t CoreNLP::_CFInit_DepParserWrapper(uint64_t this, const void *a2)
{
  *(_QWORD *)(this + 16) = &unk_1E2DF2358;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreNLP::createParserWrapper(uint64_t *a1)
{
  unsigned __int8 v2;
  uint64_t Instance;
  uint64_t v4;
  uint64_t v5;

  CFAllocatorGetDefault();
  {
    qword_1EE21AC20 = 0;
    unk_1EE21AC30 = 0u;
    unk_1EE21AC40 = 0u;
    CoreNLP::_CFGetTypeID_DepParserWrapper(void)::typeID = _CFRuntimeRegisterClass();
  }
  Instance = _CFRuntimeCreateInstance();
  v4 = *a1;
  *a1 = 0;
  v5 = *(_QWORD *)(Instance + 24);
  *(_QWORD *)(Instance + 24) = v4;
  if (v5)
    std::default_delete<CoreNLP::DepParserManager>::operator()[abi:ne180100](Instance + 24, v5);
  return Instance;
}

void sub_191CE4740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreNLP::DepParserWrapper::~DepParserWrapper(CoreNLP::DepParserWrapper *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &unk_1E2DF2358;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<CoreNLP::DepParserManager>::operator()[abi:ne180100]((uint64_t)v2, v3);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &unk_1E2DF2358;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<CoreNLP::DepParserManager>::operator()[abi:ne180100]((uint64_t)v2, v3);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
  JUMPOUT(0x19401E994);
}

void std::default_delete<CoreNLP::DepParserManager>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::unique_ptr<CoreNLP::PosTagger>::reset[abi:ne180100]((CoreNLP::MontrealModel ***)(a2 + 32), 0);
    std::unique_ptr<CoreNLP::Parser>::reset[abi:ne180100]((CoreNLP::MontrealModel ***)(a2 + 24), 0);
    nlp::CFScopedPtr<void *>::reset((const void **)(a2 + 8), 0);
    nlp::CFScopedPtr<void *>::reset((const void **)a2, 0);
    JUMPOUT(0x19401E994);
  }
}

uint64_t MurmurHash3_x86_32(uint64_t result, int a2, int a3, unsigned int *a4)
{
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;
  int v9;
  int v10;
  unsigned int v11;

  if (a2 >= 0)
    v4 = a2;
  else
    v4 = a2 + 3;
  v5 = (unsigned __int8 *)(result + (int)(v4 & 0xFFFFFFFC));
  if ((a2 + 3) >= 7)
  {
    v6 = -(v4 >> 2);
    do
    {
      HIDWORD(v7) = (461845907
                   * ((380141568 * *(_DWORD *)&v5[4 * v6]) | ((-862048943 * *(_DWORD *)&v5[4 * v6]) >> 17))) ^ a3;
      LODWORD(v7) = HIDWORD(v7);
      a3 = 5 * (v7 >> 19) - 430675100;
    }
    while (!__CFADD__(v6++, 1));
  }
  v9 = 0;
  v10 = a2 & 3;
  switch(v10)
  {
    case 1:
      goto LABEL_13;
    case 2:
LABEL_12:
      v9 |= v5[1] << 8;
LABEL_13:
      a3 ^= 461845907 * ((380141568 * (v9 ^ *v5)) | ((-862048943 * (v9 ^ *v5)) >> 17));
      break;
    case 3:
      v9 = v5[2] << 16;
      goto LABEL_12;
  }
  v11 = -2048144789 * (a3 ^ a2 ^ ((a3 ^ a2) >> 16));
  *a4 = (-1028477387 * (v11 ^ (v11 >> 13))) ^ ((-1028477387 * (v11 ^ (v11 >> 13))) >> 16);
  return result;
}

uint64_t MurmurHash3_x64_128(uint64_t result, int a2, unsigned int a3, unint64_t *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v4 = a3;
  if (a2 < 16)
  {
    v7 = a3;
  }
  else
  {
    v5 = (_QWORD *)(result + 8);
    v6 = (a2 / 16);
    v7 = v4;
    do
    {
      v4 = 5
         * (__ROR8__((0x4CF5AD432745937FLL * ((0x88A129EA80000000 * *(v5 - 1)) | ((0x87C37B91114253D5 * *(v5 - 1)) >> 33))) ^ v4, 37)+ v7)+ 1390208809;
      v7 = 5
         * (v4
          + __ROR8__((0x87C37B91114253D5* ((0x4E8B26FE00000000 * *v5) | ((unint64_t)(0x4CF5AD432745937FLL * *v5) >> 31))) ^ v7, 33))+ 944331445;
      v5 += 2;
      --v6;
    }
    while (v6);
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = (unsigned __int8 *)(result + 16 * (a2 / 16));
  switch(a2 & 0xF)
  {
    case 1:
      goto LABEL_21;
    case 2:
      goto LABEL_20;
    case 3:
      goto LABEL_19;
    case 4:
      goto LABEL_18;
    case 5:
      goto LABEL_17;
    case 6:
      goto LABEL_16;
    case 7:
      goto LABEL_15;
    case 8:
      goto LABEL_14;
    case 9:
      goto LABEL_13;
    case 0xA:
      goto LABEL_12;
    case 0xB:
      goto LABEL_11;
    case 0xC:
      goto LABEL_10;
    case 0xD:
      goto LABEL_9;
    case 0xE:
      goto LABEL_8;
    case 0xF:
      v8 = (unint64_t)v21[14] << 48;
LABEL_8:
      v9 = v8 | ((unint64_t)v21[13] << 40);
LABEL_9:
      v10 = v9 ^ ((unint64_t)v21[12] << 32);
LABEL_10:
      v11 = v10 ^ ((unint64_t)v21[11] << 24);
LABEL_11:
      v12 = v11 ^ ((unint64_t)v21[10] << 16);
LABEL_12:
      v13 = v12 ^ ((unint64_t)v21[9] << 8);
LABEL_13:
      v7 ^= 0x87C37B91114253D5
          * ((0x4E8B26FE00000000 * (v13 ^ v21[8])) | ((0x4CF5AD432745937FLL * (v13 ^ v21[8])) >> 31));
LABEL_14:
      v14 = (unint64_t)v21[7] << 56;
LABEL_15:
      v15 = v14 | ((unint64_t)v21[6] << 48);
LABEL_16:
      v16 = v15 ^ ((unint64_t)v21[5] << 40);
LABEL_17:
      v17 = v16 ^ ((unint64_t)v21[4] << 32);
LABEL_18:
      v18 = v17 ^ ((unint64_t)v21[3] << 24);
LABEL_19:
      v19 = v18 ^ ((unint64_t)v21[2] << 16);
LABEL_20:
      v20 = v19 ^ ((unint64_t)v21[1] << 8);
LABEL_21:
      v4 ^= 0x4CF5AD432745937FLL
          * ((0x88A129EA80000000 * (v20 ^ *v21)) | ((0x87C37B91114253D5 * (v20 ^ *v21)) >> 33));
      break;
    default:
      break;
  }
  v22 = v7 ^ a2;
  v23 = (v4 ^ a2) + v22;
  v24 = v23 + v22;
  v25 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v23 ^ (v23 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v23 ^ (v23 >> 33))) >> 33));
  v26 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v24 ^ (v24 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v24 ^ (v24 >> 33))) >> 33));
  v27 = v26 ^ (v26 >> 33);
  v28 = v27 + (v25 ^ (v25 >> 33));
  *a4 = v28;
  a4[1] = v28 + v27;
  return result;
}

_QWORD *CoreNLP::_CFInit_CNNModelWrapper(_QWORD *this, const void *a2)
{
  this[3] = 0;
  this[4] = 0;
  this[2] = &unk_1E2DF2108;
  return this;
}

uint64_t CoreNLP::createCNNModelWrapper(uint64_t *a1)
{
  unsigned __int8 v2;
  uint64_t Instance;

  CFAllocatorGetDefault();
  {
    qword_1EE21ABC0 = 0;
    unk_1EE21ABD0 = 0u;
    unk_1EE21ABE0 = 0u;
    CoreNLP::_CFGetTypeID_CNNModelWrapper(void)::typeID = _CFRuntimeRegisterClass();
  }
  Instance = _CFRuntimeCreateInstance();
  std::shared_ptr<CoreNLP::NLModelTrainer>::operator=[abi:ne180100]((_QWORD *)(Instance + 24), a1);
  return Instance;
}

void sub_191CE4C74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CoreNLP::CNNModelWrapper::~CNNModelWrapper(CoreNLP::CNNModelWrapper *this)
{
  *(_QWORD *)this = &unk_1E2DF2108;
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
}

{
  *(_QWORD *)this = &unk_1E2DF2108;
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  CoreNLP::SubWordTagger::~SubWordTagger(this);
  JUMPOUT(0x19401E994);
}

void NLDependencyParserCreateWithOptions(const __CFDictionary *a1)
{
  CoreNLP::DepParserManager *v2;

  v2 = (CoreNLP::DepParserManager *)operator new();
  CoreNLP::DepParserManager::DepParserManager(v2, a1);
}

uint64_t sub_191CE4D40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = v0;
  v6 = 0;
  v1 = CoreNLP::createParserWrapper(&v5);
  v2 = v5;
  v5 = 0;
  if (v2)
    std::default_delete<CoreNLP::DepParserManager>::operator()[abi:ne180100]((uint64_t)&v5, v2);
  v3 = v6;
  v6 = 0;
  if (v3)
    std::default_delete<CoreNLP::DepParserManager>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  return v1;
}

void sub_191CE4D8C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t v12;

  v11 = a9;
  a9 = 0;
  if (v11)
    std::default_delete<CoreNLP::DepParserManager>::operator()[abi:ne180100]((uint64_t)&a9, v11);
  v12 = a10;
  a10 = 0;
  if (v12)
    std::default_delete<CoreNLP::DepParserManager>::operator()[abi:ne180100]((uint64_t)&a10, v12);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x191CE4D78);
}

__CFArray *NLDependencyParserCopyParseFromSentence(__CFString *a1, CoreNLP *a2)
{
  __CFArray *Mutable;
  void *v5;
  CoreNLP **v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void **v10;
  const void *v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  _QWORD v16[2];
  _QWORD v17[2];
  uint64_t valuePtr;
  std::string v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *__p;
  void *v27;
  std::string *v28;

  if (!a2)
    return 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v6 = (CoreNLP **)CoreNLP::unwrapGazetteer(a2, v5);
  CoreNLP::DepParserManager::getParse(v6, a1, &v19);
  if (v19.__r_.__value_.__l.__size_ != v19.__r_.__value_.__r.__words[0])
  {
    v7 = 0;
    v8 = 0;
    if ((unint64_t)((int64_t)(v19.__r_.__value_.__l.__size_ - v19.__r_.__value_.__r.__words[0]) / 24) <= 1)
      v9 = 1;
    else
      v9 = (int64_t)(v19.__r_.__value_.__l.__size_ - v19.__r_.__value_.__r.__words[0]) / 24;
    do
    {
      v10 = (void **)CFArrayCreateMutable(0, 4, MEMORY[0x1E0C9B378]);
      v28 = (std::string *)v10;
      v11 = (const void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:");
      valuePtr = 0;
      valuePtr = *((int *)v24 + v8);
      v12 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
      v17[0] = 0;
      v17[1] = v12;
      v17[0] = *((unsigned int *)__p + v8);
      v13 = CFNumberCreate(0, kCFNumberCFIndexType, v17);
      v16[0] = 0;
      v16[1] = v13;
      v16[0] = *((unsigned int *)v22 + v8);
      v14 = CFNumberCreate(0, kCFNumberCFIndexType, v16);
      CFArraySetValueAtIndex((CFMutableArrayRef)v10, 0, v11);
      CFArraySetValueAtIndex((CFMutableArrayRef)v10, 1, v14);
      CFArraySetValueAtIndex((CFMutableArrayRef)v10, 2, v12);
      CFArraySetValueAtIndex((CFMutableArrayRef)v10, 3, v13);
      CFArrayAppendValue(Mutable, v10);
      if (v14)
        CFRelease(v14);
      if (v13)
        CFRelease(v13);
      if (v12)
        CFRelease(v12);
      if (v10)
        CFRelease(v10);
      ++v8;
      v7 += 24;
    }
    while (v9 != v8);
  }
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  v28 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  return Mutable;
}

void sub_191CE5048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  const void *v6;
  va_list va;
  uint64_t v8;
  const void *v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, const void *);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, const void *);
  v11 = va_arg(va2, _QWORD);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFNumber const*>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)(v4 - 96), 0);
  CoreNLP::ParseStructure::~ParseStructure((CoreNLP::ParseStructure *)va2);
  _Unwind_Resume(a1);
}

void CoreNLP::ParseStructure::~ParseStructure(CoreNLP::ParseStructure *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 7) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 4) = v5;
    operator delete(v5);
  }
  v6 = (void **)this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
}

__CFArray *NLDependencyParserCopyNounPhrasesFromSentence(__CFString *a1, CoreNLP *a2)
{
  __CFArray *Mutable;
  void *v5;
  CoreNLP **v6;
  uint64_t v7;
  unint64_t v8;
  const CFArrayCallBacks *v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  CFNumberRef v14;
  CFNumberRef v15;
  uint64_t v17;
  uint64_t valuePtr;
  std::string *v19;
  void **v20;
  std::string v21;
  void *v22;
  _BYTE *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;
  void ***v30;

  if (!a2)
    return 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v6 = (CoreNLP **)CoreNLP::unwrapGazetteer(a2, v5);
  CoreNLP::DepParserManager::getParse(v6, a1, &v21);
  CoreNLP::DepParserManager::getNounPhrases((const CoreNLP::ParseStructure *)&v21, (uint64_t *)&v19);
  if (v20 != (void **)v19)
  {
    v7 = 0;
    v8 = 0;
    v9 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    do
    {
      v10 = (void **)CFArrayCreateMutable(0, 3, v9);
      v30 = (void ***)v10;
      if (0xCCCCCCCCCCCCCCCDLL * (((char *)v20 - (char *)v19) >> 3) <= v8)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v11 = v19->__r_.__value_.__r.__words[v7];
      v12 = (v23 - (_BYTE *)v22) >> 4;
      if (v12 <= v11)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v13 = v11 + *(std::string::size_type *)((char *)&v19->__r_.__value_.__l.__size_ + v7 * 8) - 1;
      if (v12 <= v13)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      valuePtr = 0;
      valuePtr = *((_QWORD *)v22 + 2 * v11);
      v17 = *((_QWORD *)v22 + 2 * v13 + 1) - valuePtr + *((_QWORD *)v22 + 2 * v13);
      v14 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
      v15 = CFNumberCreate(0, kCFNumberCFIndexType, &v17);
      CFArraySetValueAtIndex((CFMutableArrayRef)v10, 0, v14);
      CFArraySetValueAtIndex((CFMutableArrayRef)v10, 1, v15);
      CFArraySetValueAtIndex((CFMutableArrayRef)v10, 2, (const void *)-[__CFString substringWithRange:](a1, "substringWithRange:", valuePtr, v17, v15, v14));
      CFArrayAppendValue(Mutable, v10);
      if (v15)
        CFRelease(v15);
      if (v14)
        CFRelease(v14);
      if (v10)
        CFRelease(v10);
      ++v8;
      v7 += 5;
    }
    while (0xCCCCCCCCCCCCCCCDLL * (((char *)v20 - (char *)v19) >> 3) > v8);
  }
  v30 = (void ***)&v19;
  std::vector<CoreNLP::NounPhrase>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  v19 = &v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  return Mutable;
}

void sub_191CE53AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  CoreNLP::ParseStructure::~ParseStructure((CoreNLP::ParseStructure *)va);
  _Unwind_Resume(a1);
}

uint64_t toVector@<X0>(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::string *v15;
  std::string *v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  void *__p[2];
  std::string::size_type v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  std::__split_buffer<std::string> __v;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  result = -[__CFArray countByEnumeratingWithState:objects:count:](a1, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
  v5 = result;
  if (result)
  {
    v6 = *(_QWORD *)v23;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v23 != v6)
          objc_enumerationMutation(a1);
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(*(id *)(*((_QWORD *)&v22 + 1) + 8 * v7), "UTF8String"));
        v9 = *(_QWORD *)(a2 + 8);
        v8 = *(_QWORD *)(a2 + 16);
        if (v9 >= v8)
        {
          v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *(_QWORD *)a2) >> 3);
          v12 = v11 + 1;
          if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
          v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *(_QWORD *)a2) >> 3);
          if (2 * v13 > v12)
            v12 = 2 * v13;
          if (v13 >= 0x555555555555555)
            v14 = 0xAAAAAAAAAAAAAAALL;
          else
            v14 = v12;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
          if (v14)
            v15 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v14);
          else
            v15 = 0;
          v16 = v15 + v11;
          __v.__first_ = v15;
          __v.__begin_ = v16;
          __v.__end_cap_.__value_ = &v15[v14];
          v17 = *(_OWORD *)__p;
          v16->__r_.__value_.__r.__words[2] = v21;
          *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
          __p[1] = 0;
          v21 = 0;
          __p[0] = 0;
          __v.__end_ = v16 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
          v18 = *(_QWORD *)(a2 + 8);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v19 = SHIBYTE(v21);
          *(_QWORD *)(a2 + 8) = v18;
          if (v19 < 0)
            operator delete(__p[0]);
        }
        else
        {
          v10 = *(_OWORD *)__p;
          *(_QWORD *)(v9 + 16) = v21;
          *(_OWORD *)v9 = v10;
          *(_QWORD *)(a2 + 8) = v9 + 24;
        }
        ++v7;
      }
      while (v5 != v7);
      result = -[__CFArray countByEnumeratingWithState:objects:count:](a1, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

void sub_191CE5630(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *__pa, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__split_buffer<std::string> *a17)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

uint64_t NLCNNModelCreateWithModel(uint64_t a1, uint64_t a2, CFURLRef anURL, const __CFArray *a4)
{
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _BYTE v13[24];
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p[2];
  char v17;
  __CFString *v18;
  void **v19;

  v18 = (__CFString *)CFURLCopyPath(anURL);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)-[__CFString UTF8String](v18, "UTF8String"));
  v7 = operator new();
  toVector(a4, (uint64_t)v13);
  CoreNLP::CNNModelHandler::CNNModelHandler(v7, a1, a2, __p, v13);
  std::shared_ptr<CoreNLP::CNNModelHandler>::shared_ptr[abi:ne180100]<CoreNLP::CNNModelHandler,void>(&v14, v7);
  v19 = (void **)v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (v14)
    v8 = CoreNLP::createCNNModelWrapper(&v14);
  else
    v8 = 0;
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v17 < 0)
    operator delete(__p[0]);
  if (v18)
    CFRelease(v18);
  return v8;
}

void sub_191CE57A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (a19 < 0)
    operator delete(__p);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)(v19 - 48), 0);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x191CE578CLL);
}

uint64_t NLCNNModelCreateCharacterBasedModel(uint64_t a1, CFURLRef anURL, const __CFArray *a3)
{
  return NLCNNModelCreateWithModel(1, a1, anURL, a3);
}

uint64_t NLCNNModelCreateWordBasedModel(uint64_t a1, CFURLRef anURL, const __CFArray *a3)
{
  return NLCNNModelCreateWithModel(2, a1, anURL, a3);
}

CoreNLP *NLCNNModelCopyFeatureRepresentation(CoreNLP *result, __CFString *a2)
{
  CoreNLP::CNNModelHandler *v3;

  if (result)
  {
    v3 = (CoreNLP::CNNModelHandler *)CoreNLP::unwrapGazetteer(result, a2);
    return (CoreNLP *)CoreNLP::CNNModelHandler::copyFeatureRepresentation(v3, a2);
  }
  return result;
}

void sub_191CE589C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x191CE5890);
}

CoreNLP *NLCNNModelCopyFeatureRepresentationLayers(CoreNLP *result, void *a2)
{
  id **v2;

  if (result)
  {
    v2 = (id **)CoreNLP::unwrapGazetteer(result, a2);
    return CoreNLP::CNNModelHandler::copyFeatureRepresentationLayers(v2);
  }
  return result;
}

void sub_191CE58C8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x191CE58C0);
}

_QWORD *std::shared_ptr<CoreNLP::CNNModelHandler>::shared_ptr[abi:ne180100]<CoreNLP::CNNModelHandler,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E2DF36D0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_191CE593C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<CoreNLP::CNNModelHandler>::reset[abi:ne180100]((CoreNLP::CNNModelHandler **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<CoreNLP::CNNModelHandler *,std::shared_ptr<CoreNLP::CNNModelHandler>::__shared_ptr_default_delete<CoreNLP::CNNModelHandler,CoreNLP::CNNModelHandler>,std::allocator<CoreNLP::CNNModelHandler>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401E994);
}

CoreNLP::CNNModelHandler *std::__shared_ptr_pointer<CoreNLP::CNNModelHandler *,std::shared_ptr<CoreNLP::CNNModelHandler>::__shared_ptr_default_delete<CoreNLP::CNNModelHandler,CoreNLP::CNNModelHandler>,std::allocator<CoreNLP::CNNModelHandler>>::__on_zero_shared(uint64_t a1)
{
  CoreNLP::CNNModelHandler *result;

  result = *(CoreNLP::CNNModelHandler **)(a1 + 24);
  if (result)
  {
    CoreNLP::CNNModelHandler::~CNNModelHandler(result);
    JUMPOUT(0x19401E994);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<CoreNLP::CNNModelHandler *,std::shared_ptr<CoreNLP::CNNModelHandler>::__shared_ptr_default_delete<CoreNLP::CNNModelHandler,CoreNLP::CNNModelHandler>,std::allocator<CoreNLP::CNNModelHandler>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

CoreNLP::CNNModelHandler *std::unique_ptr<CoreNLP::CNNModelHandler>::reset[abi:ne180100](CoreNLP::CNNModelHandler **a1, CoreNLP::CNNModelHandler *a2)
{
  CoreNLP::CNNModelHandler *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CoreNLP::CNNModelHandler::~CNNModelHandler(result);
    JUMPOUT(0x19401E994);
  }
  return result;
}

void corelm::TokenListVocabulary::determineUnkTokenID(corelm::TokenListVocabulary *this)
{
  char *v2;
  std::string *p_p;
  std::string::size_type size;
  BOOL Token;
  uint64_t v6;
  uint64_t v7;
  std::string __p;

  v2 = (char *)this + 104;
  if (*((char *)this + 79) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 7), *((_QWORD *)this + 8));
  else
    __p = *(std::string *)((char *)this + 56);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  Token = corelm::TokenIDMap::queryToken((uint64_t)v2, (std::string::value_type *)p_p, size);
  v7 = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)this + 200) = Token;
  *((_QWORD *)this + 24) = v7;
}

void corelm::AbstractVocabulary::~AbstractVocabulary(void **this)
{
  *this = &unk_1E2DF16A0;
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t corelm::TokenListVocabulary::TokenListVocabulary(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *i;
  unint64_t v13;
  uint64_t v14;
  std::vector<std::string>::pointer begin;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  std::vector<std::string> v20;
  void *v21;
  std::string v22;
  __int128 *v23;
  __int128 *v24;
  _QWORD v25[2];
  _BYTE v26[16];
  uint64_t v27;
  void *v28;
  std::string __p;
  _QWORD v30[3];
  char v31;
  uint64_t v32;
  __int128 *v33[2];

  *(_QWORD *)a1 = &unk_1E2DF16A0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "<s>");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 32), "</s>");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 56), "<unk>");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 80), "<pad>");
  *(_QWORD *)a1 = &off_1E2DF1848;
  *(_QWORD *)(a1 + 112) = a1 + 136;
  v8 = operator new(0x50uLL);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 176;
  *(_QWORD *)(a1 + 128) = v8;
  v8[4] = 0;
  v8[5] = v8 + 4;
  v8[6] = v8 + 4;
  v8[7] = 0;
  v8[8] = v8 + 7;
  v8[9] = v8 + 7;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 136;
  *(_QWORD *)(a1 + 160) = a1 + 136;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  v28 = &unk_1E2DF1AB8;
  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    __p = *(std::string *)(a2 + 8);
  corelm::util::InFile::InFile<corelm::util::Path>(v30, (uint64_t)&v28);
  v28 = &unk_1E2DF1AB8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  corelm::util::InFile::getLines((corelm::util::InFile *)v30, (uint64_t *)&v23);
  corelm::TokenIDMap::TokenIDMap(v25, &v23);
  boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::operator=(a1 + 120, (uint64_t)v26);
  boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~multi_index_container((uint64_t)v26);
  v20.__begin_ = (std::vector<std::string>::pointer)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  v9 = *a3;
  *a3 = 0;
  v10 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (corelm::util::Path::exists((corelm::util::Path *)a4))
  {
    v21 = &unk_1E2DF1AB8;
    if (*(char *)(a4 + 31) < 0)
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(a4 + 8), *(_QWORD *)(a4 + 16));
    else
      v22 = *(std::string *)(a4 + 8);
    corelm::util::InFile::InFile<corelm::util::Path>(v25, (uint64_t)&v21);
    v21 = &unk_1E2DF1AB8;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    corelm::util::InFile::getLines((corelm::util::InFile *)v25, (uint64_t *)&v23);
    v11 = v23;
    for (i = v24; v11 != i; v11 = (__int128 *)((char *)v11 + 24))
    {
      if (*((char *)v11 + 23) < 0)
      {
        v14 = *(_QWORD *)v11;
        v13 = *((_QWORD *)v11 + 1);
      }
      else
      {
        v13 = *((unsigned __int8 *)v11 + 23);
        v14 = (uint64_t)v11;
      }
      corelm::util::split(v14, v13, "\t", 1, &v20);
      begin = v20.__begin_;
      v33[0] = (__int128 *)v20.__begin_;
      v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 168), (const void **)&v20.__begin_->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v33);
      std::string::operator=((std::string *)(v16 + 7), begin + 1);
      v33[0] = (__int128 *)&v20;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v33);
    }
    v20.__begin_ = (std::vector<std::string>::pointer)&v23;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
    v17 = v27;
    v25[0] = &unk_1E2DF1A90;
    v27 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v25[0] = &unk_1E2DF1AB8;
    if ((v26[15] & 0x80000000) != 0)
      operator delete((void *)v25[1]);
  }
  corelm::TokenListVocabulary::determineUnkTokenID((corelm::TokenListVocabulary *)a1);
  v18 = v32;
  v30[0] = &unk_1E2DF1A90;
  v32 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v30[0] = &unk_1E2DF1AB8;
  if (v31 < 0)
    operator delete((void *)v30[1]);
  return a1;
}

void sub_191CE5EA4(void *a1)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[79] < 0)
    operator delete(*v4);
  if (v1[55] < 0)
    operator delete(*v3);
  if (v1[31] < 0)
    operator delete(*v2);
  __clang_call_terminate(a1);
}

BOOL corelm::TokenIDMap::queryToken(uint64_t a1, std::string::value_type *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v6;
  const void **v7;
  std::string v9;

  memset(&v9, 0, sizeof(v9));
  if (a3)
  {
    v4 = a3;
    do
    {
      std::string::push_back(&v9, *a2++);
      --v4;
    }
    while (v4);
  }
  v6 = (_QWORD *)(a1 + 48);
  v7 = boost::bimaps::container_adaptor::associative_container_adaptor<boost::multi_index::detail::ordered_index<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>::left>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::left,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>,boost::bimaps::detail::map_view_iterator<boost::bimaps::relation::member_at::left,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>>,boost::bimaps::detail::const_map_view_iterator<boost::bimaps::relation::member_at::left,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>>,std::string const,boost::bimaps::container_adaptor::support::iterator_facade_to_base<boost::bimaps::detail::map_view_iterator<boost::bimaps::relation::member_at::left,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>>,boost::bimaps::detail::const_map_view_iterator<boost::bimaps::relation::member_at::left,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>>>,mpl_::na,boost::bimaps::relation::detail::pair_to_relation_functor<boost::bimaps::relation::member_at::left,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>,boost::bimaps::relation::support::get_pair_functor<boost::bimaps::relation::member_at::left,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>,mpl_::na,boost::mpl::v_item<boost::bimaps::container_adaptor::detail::iterator_from_base_identity<boost::iterators::reverse_iterator<boost::multi_index::detail::bidir_node_iterator<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>>,boost::bimaps::detail::reverse_map_view_iterator<boost::bimaps::relation::member_at::left,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>>,boost::iterators::reverse_iterator<boost::multi_index::detail::bidir_node_iterator<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>>,boost::bimaps::detail::const_reverse_map_view_iterator<boost::bimaps::relation::member_at::left,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>>>,boost::mpl::vector<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,1>>::find<std::string>((uint64_t *)(a1 + 48), (uint64_t)&v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return *(_QWORD *)(*v6 - 8) != (_QWORD)v7;
}

void sub_191CE5FA0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __clang_call_terminate(a1);
}

void corelm::TokenListVocabulary::idToToken(corelm::TokenListVocabulary *this@<X0>, std::logic_error_vtbl *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6;
  _QWORD *exception;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11[2];
  unsigned __int8 v12;
  std::logic_error_vtbl *v13;

  v13 = a2;
  v6 = *((_QWORD *)this + 20);
  v11[0] = (uint64_t)a2;
  if (*(_QWORD *)(*((_QWORD *)this + 20) - 8) == boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>,long,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<long>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::find<long>(v6, v11))
  {
    corelm::util::strCat<char [18],long>("Unknown TokenID: ", (const char *)&v13);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      corelm::TokenListVocabulary::idToToken();
    exception = __cxa_allocate_exception(0x20uLL);
    v8 = exception;
    if ((v12 & 0x80u) == 0)
      v9 = v11;
    else
      v9 = (uint64_t *)v11[0];
    if ((v12 & 0x80u) == 0)
      v10 = v12;
    else
      v10 = v11[1];
    corelm::OutOfVocabularyError::OutOfVocabularyError(exception, (uint64_t)v9, v10);
  }
  corelm::TokenIDMap::idToToken((corelm::TokenListVocabulary *)((char *)this + 104), a2, a3);
}

void sub_191CE60A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t corelm::util::strCat<char [18],long>(const char *a1, const char *a2)
{
  _QWORD *v5;
  const char *v6[2];
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  v6[0] = a1;
  v6[1] = a2;
  v5 = v7;
  corelm::util::tuple_for_each<std::tuple<char const(&)[18],long const&>,std::string corelm::util::strCat<char [18],long>(char [18],long const&)::{lambda(std::tuple<char const(&)[18],long const&> const&)#1},0ul>(v6, &v5);
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19401E928](&v9);
}

void sub_191CE6198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void corelm::OutOfVocabularyError::~OutOfVocabularyError(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_1E2DF1920;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)&unk_1E2DF1920;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x19401E994);
}

void corelm::TokenIDMap::idToToken(corelm::TokenIDMap *this@<X0>, std::logic_error_vtbl *a2@<X1>, std::string *a3@<X8>)
{
  unint64_t v4;
  __int128 v5;
  std::logic_error_vtbl *v6;

  v6 = a2;
  v4 = boost::bimaps::detail::non_mutable_data_unique_map_view_access<boost::bimaps::views::map_view<boost::bimaps::relation::member_at::right,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>>,boost::bimaps::relation::member_at::right,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>>::at<long>((uint64_t *)this + 7, &v6);
  if (*(char *)(v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
  }
  else
  {
    v5 = *(_OWORD *)v4;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v5;
  }
}

uint64_t corelm::TokenListVocabulary::tokenToID(uint64_t a1, char *__s, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *exception;
  void *v9;
  std::string *p_p;
  std::string::size_type size;
  std::string *v12;
  std::string::size_type v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  unsigned __int8 v22;
  std::string __p;
  _QWORD v24[2];

  v24[0] = __s;
  v24[1] = a3;
  if (!*(_QWORD *)(a1 + 184))
    goto LABEL_42;
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  v6 = std::__tree<std::string>::find<std::string>(a1 + 168, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (a1 + 176 == v6)
  {
LABEL_42:
    if (corelm::TokenIDMap::queryToken(a1 + 104, __s, a3))
    {
      return v7;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 200))
      {
        corelm::util::strCat<char [16],std::string_view>((uint64_t)"Unknown Token: ", (uint64_t)v24);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          corelm::TokenListVocabulary::idToToken();
        exception = __cxa_allocate_exception(0x20uLL);
        v9 = exception;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        corelm::OutOfVocabularyError::OutOfVocabularyError(exception, (uint64_t)p_p, size);
      }
      return *(_QWORD *)(a1 + 192);
    }
  }
  else
  {
    if (*(char *)(v6 + 79) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v6 + 56), *(_QWORD *)(v6 + 64));
    else
      __p = *(std::string *)(v6 + 56);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &__p;
    else
      v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v13 = __p.__r_.__value_.__l.__size_;
    if (!corelm::TokenIDMap::queryToken(a1 + 104, (std::string::value_type *)v12, v13))
    {
      corelm::util::strCat<char [15],std::string,char [21]>("Special token ", (const char *)&__p, " not found in vocab!");
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        corelm::TokenListVocabulary::idToToken();
      v15 = __cxa_allocate_exception(0x20uLL);
      v16 = v15;
      if ((v22 & 0x80u) == 0)
        v17 = v21;
      else
        v17 = (_QWORD *)v21[0];
      if ((v22 & 0x80u) == 0)
        v18 = v22;
      else
        v18 = v21[1];
      corelm::OutOfVocabularyError::OutOfVocabularyError(v15, (uint64_t)v17, v18);
    }
    v19 = v14;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v19;
}

void sub_191CE645C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t corelm::util::strCat<char [15],std::string,char [21]>(const char *a1, const char *a2, const char *a3)
{
  _QWORD *v7;
  const char *v8[3];
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  v8[0] = a1;
  v8[1] = a2;
  v8[2] = a3;
  v7 = v9;
  corelm::util::tuple_for_each<std::tuple<char const(&)[15],std::string const&,char const(&)[21]>,std::string corelm::util::strCat<char [15],std::string,char [21]>(char [15],std::string,char [21] const&)::{lambda(std::tuple<char const(&)[15],std::string const&,char const(&)[21]> const&)#1},0ul>(v8, &v7);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19401E928](&v11);
}

void sub_191CE6588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t corelm::util::strCat<char [16],std::string_view>(uint64_t a1, uint64_t a2)
{
  _QWORD *v5;
  _QWORD v6[2];
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  v6[0] = a1;
  v6[1] = a2;
  v5 = v7;
  corelm::util::tuple_for_each<std::tuple<char const(&)[23],std::string_view const&>,std::string corelm::util::strCat<char [23],std::string_view>(char [23],std::string_view const&)::{lambda(std::tuple<char const(&)[23],std::string_view const&> const&)#1},0ul>((uint64_t)v6, &v5);
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19401E928](&v9);
}

void sub_191CE6668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void corelm::TokenListVocabulary::idsToText(_QWORD *a1)
{
  uint64_t v1;
  _QWORD v2[3];
  void **v3;

  v1 = a1[26];
  (*(void (**)(_QWORD *__return_ptr))(*a1 + 80))(v2);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v2);
  v3 = (void **)v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void sub_191CE66E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void corelm::TokenListVocabulary::textToIDs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  const std::vector<std::string>::value_type *v8;
  int64_t v9;
  char *v10;
  std::vector<std::string>::const_iterator v11;
  std::logic_error *exception;
  std::vector<std::string> __position;
  std::vector<std::string> *p_position;

  v8 = (const std::vector<std::string>::value_type *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    v10 = *(char **)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v9 = *(unsigned __int8 *)(a1 + 31);
    v10 = (char *)(a1 + 8);
  }
  if (corelm::util::startsWith(a2, a3, v10, v9))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Input text should not contain BOS token!");
    __cxa_throw(exception, (struct type_info *)off_1E2DEE9A8, MEMORY[0x1E0DE4360]);
  }
  (*(void (**)(std::vector<std::string> *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 208)
                                                                                           + 16))(&__position, *(_QWORD *)(a1 + 208), a2, a3);
  if (a4)
  {
    v11.__i_ = __position.__begin_;
    std::vector<std::string>::insert(&__position, v11, v8);
  }
  (*(void (**)(uint64_t, std::vector<std::string> *))(*(_QWORD *)a1 + 88))(a1, &__position);
  p_position = &__position;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_position);
}

void sub_191CE67F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

_QWORD *corelm::Custom1PreProcessor::preProcess@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v14[9];

  v6 = (_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v6 = (_QWORD *)*v6;
  v7 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
  if (*((char *)a2 + 23) >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  v9 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8);
  v10 = *(_QWORD *)(a1 + 56);
  objc_msgSend(v9, "length");
  NLTokenizerSetString(v10);
  v11 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v12 = *(_QWORD *)(a1 + 56);
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = ___ZNK6corelm19Custom1PreProcessor10preProcessERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
  v14[3] = &unk_1E2DF5348;
  v14[4] = v9;
  v14[5] = v11;
  v14[6] = v7;
  v14[7] = CFSTR(" ");
  v14[8] = a1;
  NLTokenizerEnumerateTokens(v12, (uint64_t)v14);
  return std::string::basic_string[abi:ne180100]<0>(a3, (char *)objc_msgSend(v11, "UTF8String"));
}

uint64_t ___ZNK6corelm19Custom1PreProcessor10preProcessERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  void *__p[2];
  char v9;

  v3 = *(_QWORD *)(a1 + 64);
  v4 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", *a2, a2[1]), "stringByReplacingOccurrencesOfString:withString:", CFSTR(" "), &stru_1E2DF6418);
  result = objc_msgSend(v4, "length");
  if (result)
  {
    if (objc_msgSend((id)objc_msgSend(v4, "capitalizedString"), "isEqual:", v4)
      && (objc_msgSend((id)objc_msgSend(v4, "lowercaseString"), "isEqual:", v4) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v4, "UTF8String"));
      v6 = std::__tree<std::string>::find<std::string>(v3 + 8, (const void **)__p);
      v7 = v3 + 16;
      if (v9 < 0)
        operator delete(__p[0]);
      if (v7 == v6)
      {
        objc_msgSend(*(id *)(a1 + 40), "appendString:", *(_QWORD *)(a1 + 48));
        v4 = (void *)objc_msgSend(v4, "lowercaseString");
      }
    }
    objc_msgSend(*(id *)(a1 + 40), "appendString:", v4);
    return objc_msgSend(*(id *)(a1 + 40), "appendString:", *(_QWORD *)(a1 + 56));
  }
  return result;
}

void sub_191CE6A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void corelm::Custom1PreProcessor::postProcess(std::string *__str@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  uint64_t v4;
  char *v6;
  int64_t size;
  std::string *v8;
  int v9;
  char *v10;
  int64_t v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  uint64_t v16;
  std::string::size_type v17;
  std::string::size_type v18;
  int v19;
  std::string *v20;
  std::string::value_type v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  int v25;
  char *v26;
  int64_t v27;
  char *v28;
  char *v29;
  int64_t v30;
  int v31;
  int64_t v32;
  char *v33;
  char *v34;
  std::string *v35;
  std::string::size_type v36;
  char *v38;
  int v39;
  std::string *v40;
  int64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::string v45;
  char v46;

  v4 = a2;
  v6 = (char *)(a2 + 32);
  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v8 = __str;
  else
    v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
  v9 = *(char *)(a2 + 55);
  if (v9 >= 0)
    v10 = (char *)(a2 + 32);
  else
    v10 = *(char **)(a2 + 32);
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 55);
  else
    v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    if ((size & 0x80u) != 0)
      size = __str->__r_.__value_.__l.__size_;
    if (size >= v11)
    {
      v38 = (char *)v8 + size;
      v39 = *v10;
      v40 = v8;
      do
      {
        v41 = size - v11;
        if (v41 == -1)
          break;
        v42 = (char *)memchr(v40, v39, v41 + 1);
        if (!v42)
          break;
        v43 = v42;
        if (!memcmp(v42, v10, v11))
        {
          if (v43 == v38)
            break;
          v13 = v43 - (char *)v8;
          a3->__r_.__value_.__r.__words[0] = 0;
          a3->__r_.__value_.__l.__size_ = 0;
          a3->__r_.__value_.__r.__words[2] = 0;
          v4 = a2;
          if (v13 == -1)
          {
            v12 = 0;
            goto LABEL_59;
          }
          goto LABEL_16;
        }
        v40 = (std::string *)(v43 + 1);
        size = v38 - (v43 + 1);
      }
      while (size >= v11);
    }
    v12 = 0;
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    v13 = 0;
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
LABEL_16:
    v12 = 0;
    v44 = v4;
    while (1)
    {
      std::string::basic_string(&v45, __str, v12, v13 - v12, (std::allocator<char> *)&v46);
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v45;
      else
        v14 = (std::string *)v45.__r_.__value_.__r.__words[0];
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      else
        v15 = v45.__r_.__value_.__l.__size_;
      std::string::append(a3, (const std::string::value_type *)v14, v15);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      if (*(char *)(v4 + 55) < 0)
        v16 = *(_QWORD *)(v4 + 40);
      else
        v16 = *(unsigned __int8 *)(v4 + 55);
      v17 = v16 + v13;
      v18 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      v19 = (char)v18;
      if ((v18 & 0x80u) != 0)
        v18 = __str->__r_.__value_.__l.__size_;
      if (v17 >= v18)
        break;
      if (v19 >= 0)
        v20 = __str;
      else
        v20 = (std::string *)__str->__r_.__value_.__r.__words[0];
      v21 = __toupper(v20->__r_.__value_.__s.__data_[v17]);
      std::string::push_back(a3, v21);
      v22 = a3;
      v12 = v17 + 1;
      v23 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      if ((v23 & 0x80u) == 0)
        v24 = __str;
      else
        v24 = (std::string *)__str->__r_.__value_.__r.__words[0];
      if ((v23 & 0x80u) != 0)
        v23 = __str->__r_.__value_.__l.__size_;
      v25 = *(char *)(v4 + 55);
      if (v25 >= 0)
        v26 = v6;
      else
        v26 = *(char **)(v4 + 32);
      if (v25 >= 0)
        v27 = *(unsigned __int8 *)(v4 + 55);
      else
        v27 = *(_QWORD *)(v4 + 40);
      if (v23 <= v17)
        goto LABEL_58;
      v13 = v17 + 1;
      if (v27)
      {
        v28 = (char *)v24 + v12;
        v29 = (char *)v24 + v23;
        v30 = v23 - v12;
        if (v30 >= v27)
        {
          v31 = *v26;
          do
          {
            v32 = v30 - v27;
            if (v32 == -1)
              break;
            v33 = (char *)memchr(v28, v31, v32 + 1);
            if (!v33)
              break;
            v34 = v33;
            if (!memcmp(v33, v26, v27))
            {
              if (v34 == v29)
                break;
              v13 = v34 - (char *)v24;
              v4 = v44;
              goto LABEL_56;
            }
            v28 = v34 + 1;
            v30 = v29 - (v34 + 1);
          }
          while (v30 >= v27);
        }
LABEL_58:
        a3 = v22;
        goto LABEL_59;
      }
LABEL_56:
      a3 = v22;
      if (v13 == -1)
        goto LABEL_59;
    }
    v12 = v17;
  }
LABEL_59:
  std::string::basic_string(&v45, __str, v12, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v46);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v45;
  else
    v35 = (std::string *)v45.__r_.__value_.__r.__words[0];
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  else
    v36 = v45.__r_.__value_.__l.__size_;
  std::string::append(a3, (const std::string::value_type *)v35, v36);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
}

void sub_191CE6D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v16 + 23) < 0)
    operator delete(*(void **)v16);
  _Unwind_Resume(exception_object);
}

_QWORD *corelm::Custom2PreProcessor::preProcess@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v14[9];

  v6 = (_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v6 = (_QWORD *)*v6;
  v7 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
  if (*((char *)a2 + 23) >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  v9 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8);
  v10 = *(_QWORD *)(a1 + 80);
  objc_msgSend(v9, "length");
  NLTokenizerSetString(v10);
  v11 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v12 = *(_QWORD *)(a1 + 80);
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = ___ZNK6corelm19Custom2PreProcessor10preProcessERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
  v14[3] = &unk_1E2DF5348;
  v14[4] = v9;
  v14[5] = v11;
  v14[6] = v7;
  v14[7] = CFSTR(" ");
  v14[8] = a1;
  NLTokenizerEnumerateTokens(v12, (uint64_t)v14);
  return std::string::basic_string[abi:ne180100]<0>(a3, (char *)objc_msgSend(v11, "UTF8String"));
}

unint64_t ___ZNK6corelm19Custom2PreProcessor10preProcessERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  unint64_t result;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *__p[2];
  char v18;

  v3 = *(_QWORD *)(a1 + 64);
  v4 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", *a2, a2[1]), "stringByReplacingOccurrencesOfString:withString:", CFSTR(" "), &stru_1E2DF6418);
  v5 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  result = objc_msgSend(v4, "length");
  if (result)
  {
    if ((objc_msgSend(v4, "hasSuffix:", CFSTR("'s")) & 1) != 0
      || objc_msgSend(v4, "hasSuffix:", CFSTR("’s")))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend((id)objc_msgSend(v4, "lowercaseString"), "UTF8String"));
      v7 = std::__tree<std::string>::find<std::string>(v3 + 56, (const void **)__p);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v3 + 64 == v7)
      {
        objc_msgSend(v5, "insertObject:atIndex:", objc_msgSend(v4, "substringFromIndex:", objc_msgSend(v4, "length") - 2), 0);
        v4 = (void *)objc_msgSend(v4, "substringToIndex:", objc_msgSend(v4, "length") - 2);
      }
    }
    if (objc_msgSend(v4, "containsString:", CFSTR("."))
      && (unint64_t)objc_msgSend(v4, "length") >= 2)
    {
      v8 = (void *)objc_msgSend(v4, "componentsSeparatedByString:", CFSTR("."));
      if (objc_msgSend(v8, "count"))
      {
        v9 = 0;
        v10 = 0;
        do
        {
          v11 = (void *)objc_msgSend(v8, "objectAtIndexedSubscript:", v9);
          if (objc_msgSend(v11, "length"))
            objc_msgSend(v5, "insertObject:atIndex:", v11, v10++);
          if (objc_msgSend(v8, "count") > ++v9)
            objc_msgSend(v5, "insertObject:atIndex:", CFSTR("."), v10++);
        }
        while (objc_msgSend(v8, "count") > v9);
      }
    }
    else if (objc_msgSend(v4, "length"))
    {
      objc_msgSend(v5, "insertObject:atIndex:", v4, 0);
    }
    result = objc_msgSend(v5, "count");
    if (result)
    {
      v12 = 0;
      v13 = v3 + 8;
      v14 = v3 + 16;
      do
      {
        v15 = (void *)objc_msgSend(v5, "objectAtIndexedSubscript:", v12);
        if (objc_msgSend((id)objc_msgSend(v15, "capitalizedString"), "isEqual:", v15)
          && (objc_msgSend((id)objc_msgSend(v15, "lowercaseString"), "isEqual:", v15) & 1) == 0
          && (unint64_t)objc_msgSend(v15, "length") >= 2)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v15, "UTF8String"));
          v16 = std::__tree<std::string>::find<std::string>(v13, (const void **)__p);
          if (v18 < 0)
            operator delete(__p[0]);
          if (v14 == v16)
          {
            objc_msgSend(*(id *)(a1 + 40), "appendString:", *(_QWORD *)(a1 + 48));
            v15 = (void *)objc_msgSend(v15, "lowercaseString");
          }
        }
        if (objc_msgSend(v15, "isEqualToString:", CFSTR("s"))
          && (unint64_t)objc_msgSend(*(id *)(a1 + 40), "length") >= 3)
        {
          if (objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "substringFromIndex:", objc_msgSend(*(id *)(a1 + 40), "length") - 3), "isEqualToString:", CFSTR(" ' ")))objc_msgSend(*(id *)(a1 + 40), "deleteCharactersInRange:", objc_msgSend(*(id *)(a1 + 40), "length") - 1, 1);
        }
        objc_msgSend(*(id *)(a1 + 40), "appendString:", v15);
        objc_msgSend(*(id *)(a1 + 40), "appendString:", *(_QWORD *)(a1 + 56));
        ++v12;
        result = objc_msgSend(v5, "count");
      }
      while (result > v12);
    }
  }
  return result;
}

void sub_191CE71CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void corelm::Custom2PreProcessor::postProcess(std::string *__str@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  uint64_t v4;
  char *v6;
  int64_t size;
  std::string *v8;
  int v9;
  char *v10;
  int64_t v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  uint64_t v16;
  std::string::size_type v17;
  std::string::size_type v18;
  int v19;
  std::string *v20;
  std::string::value_type v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  int v25;
  char *v26;
  int64_t v27;
  char *v28;
  char *v29;
  int64_t v30;
  int v31;
  int64_t v32;
  char *v33;
  char *v34;
  std::string *v35;
  std::string::size_type v36;
  char *v38;
  int v39;
  std::string *v40;
  int64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::string v45;
  char v46;

  v4 = a2;
  v6 = (char *)(a2 + 32);
  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v8 = __str;
  else
    v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
  v9 = *(char *)(a2 + 55);
  if (v9 >= 0)
    v10 = (char *)(a2 + 32);
  else
    v10 = *(char **)(a2 + 32);
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 55);
  else
    v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    if ((size & 0x80u) != 0)
      size = __str->__r_.__value_.__l.__size_;
    if (size >= v11)
    {
      v38 = (char *)v8 + size;
      v39 = *v10;
      v40 = v8;
      do
      {
        v41 = size - v11;
        if (v41 == -1)
          break;
        v42 = (char *)memchr(v40, v39, v41 + 1);
        if (!v42)
          break;
        v43 = v42;
        if (!memcmp(v42, v10, v11))
        {
          if (v43 == v38)
            break;
          v13 = v43 - (char *)v8;
          a3->__r_.__value_.__r.__words[0] = 0;
          a3->__r_.__value_.__l.__size_ = 0;
          a3->__r_.__value_.__r.__words[2] = 0;
          v4 = a2;
          if (v13 == -1)
          {
            v12 = 0;
            goto LABEL_59;
          }
          goto LABEL_16;
        }
        v40 = (std::string *)(v43 + 1);
        size = v38 - (v43 + 1);
      }
      while (size >= v11);
    }
    v12 = 0;
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    v13 = 0;
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
LABEL_16:
    v12 = 0;
    v44 = v4;
    while (1)
    {
      std::string::basic_string(&v45, __str, v12, v13 - v12, (std::allocator<char> *)&v46);
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v45;
      else
        v14 = (std::string *)v45.__r_.__value_.__r.__words[0];
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      else
        v15 = v45.__r_.__value_.__l.__size_;
      std::string::append(a3, (const std::string::value_type *)v14, v15);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      if (*(char *)(v4 + 55) < 0)
        v16 = *(_QWORD *)(v4 + 40);
      else
        v16 = *(unsigned __int8 *)(v4 + 55);
      v17 = v16 + v13;
      v18 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      v19 = (char)v18;
      if ((v18 & 0x80u) != 0)
        v18 = __str->__r_.__value_.__l.__size_;
      if (v17 >= v18)
        break;
      if (v19 >= 0)
        v20 = __str;
      else
        v20 = (std::string *)__str->__r_.__value_.__r.__words[0];
      v21 = __toupper(v20->__r_.__value_.__s.__data_[v17]);
      std::string::push_back(a3, v21);
      v22 = a3;
      v12 = v17 + 1;
      v23 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      if ((v23 & 0x80u) == 0)
        v24 = __str;
      else
        v24 = (std::string *)__str->__r_.__value_.__r.__words[0];
      if ((v23 & 0x80u) != 0)
        v23 = __str->__r_.__value_.__l.__size_;
      v25 = *(char *)(v4 + 55);
      if (v25 >= 0)
        v26 = v6;
      else
        v26 = *(char **)(v4 + 32);
      if (v25 >= 0)
        v27 = *(unsigned __int8 *)(v4 + 55);
      else
        v27 = *(_QWORD *)(v4 + 40);
      if (v23 <= v17)
        goto LABEL_58;
      v13 = v17 + 1;
      if (v27)
      {
        v28 = (char *)v24 + v12;
        v29 = (char *)v24 + v23;
        v30 = v23 - v12;
        if (v30 >= v27)
        {
          v31 = *v26;
          do
          {
            v32 = v30 - v27;
            if (v32 == -1)
              break;
            v33 = (char *)memchr(v28, v31, v32 + 1);
            if (!v33)
              break;
            v34 = v33;
            if (!memcmp(v33, v26, v27))
            {
              if (v34 == v29)
                break;
              v13 = v34 - (char *)v24;
              v4 = v44;
              goto LABEL_56;
            }
            v28 = v34 + 1;
            v30 = v29 - (v34 + 1);
          }
          while (v30 >= v27);
        }
LABEL_58:
        a3 = v22;
        goto LABEL_59;
      }
LABEL_56:
      a3 = v22;
      if (v13 == -1)
        goto LABEL_59;
    }
    v12 = v17;
  }
LABEL_59:
  std::string::basic_string(&v45, __str, v12, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v46);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v45;
  else
    v35 = (std::string *)v45.__r_.__value_.__r.__words[0];
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  else
    v36 = v45.__r_.__value_.__l.__size_;
  std::string::append(a3, (const std::string::value_type *)v35, v36);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
}

void sub_191CE74E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v16 + 23) < 0)
    operator delete(*(void **)v16);
  _Unwind_Resume(exception_object);
}

void corelm::Custom2ASRPreProcessor::preProcess(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  size_t v6;
  std::string *p_str;
  const void *v8;
  std::string::size_type v9;
  BOOL v10;
  std::string::size_type v11;
  std::string::size_type size;
  int64_t v13;
  std::string *v14;
  _BYTE *v15;
  std::string *v16;
  _BYTE *v17;
  uint64_t v18;
  std::string::size_type v19;
  std::string *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  std::string *v30;
  std::string::size_type v31;
  char *v32;
  _BYTE *v33;
  _BYTE *v34;
  int v35;
  std::string v36;
  std::string __str;
  char v38;

  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v6 + 1);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = *a2;
    memmove(p_str, v8, v6);
  }
  *(_WORD *)((char *)&p_str->__r_.__value_.__l.__data_ + v6) = 32;
  v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  v10 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  size = __str.__r_.__value_.__l.__size_;
  v11 = __str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    v13 = __str.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &__str;
  else
    v14 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v13 >= 1)
  {
    v15 = (char *)v14 + v13;
    v16 = v14;
    while (1)
    {
      v17 = memchr(v16, 32, v13);
      if (!v17)
        goto LABEL_76;
      if (*v17 == 32)
        break;
      v16 = (std::string *)(v17 + 1);
      v13 = v15 - (_BYTE *)v16;
      if (v15 - (_BYTE *)v16 < 1)
        goto LABEL_76;
    }
    if (v17 == v15)
      goto LABEL_76;
    v18 = v17 - (_BYTE *)v14;
    if (v17 - (_BYTE *)v14 == -1)
      goto LABEL_76;
    v19 = 0;
LABEL_27:
    v20 = &__str;
    if (v10)
      v20 = (std::string *)v11;
    v21 = v20->__r_.__value_.__s.__data_[v19];
    if (v21 != 39)
    {
      if (v21 == 95)
      {
        v20->__r_.__value_.__s.__data_[v19++] = 32;
        goto LABEL_57;
      }
      if (v21 == 92)
      {
        std::string::basic_string(&v36, &__str, v19, v18 - v19, (std::allocator<char> *)&v38);
        v22 = std::__tree<std::string>::find<std::string>(a1 + 88, (const void **)&v36.__r_.__value_.__l.__data_);
        v23 = v22;
        if (a1 + 96 == v22)
        {
          std::string::replace(&__str, v19, v18 - v19, "");
        }
        else
        {
          v24 = *(char *)(v22 + 79);
          v25 = v24 >= 0 ? (const std::string::value_type *)(v22 + 56) : *(const std::string::value_type **)(v22 + 56);
          v26 = v24 >= 0 ? *(unsigned __int8 *)(v22 + 79) : *(_QWORD *)(v22 + 64);
          std::string::replace(&__str, v19, v18 - v19, v25, v26);
          v27 = *(char *)(v23 + 79) < 0 ? *(_QWORD *)(v23 + 64) : *(unsigned __int8 *)(v23 + 79);
          v19 += v27;
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        {
          v29 = (void *)v36.__r_.__value_.__r.__words[0];
LABEL_56:
          operator delete(v29);
          goto LABEL_57;
        }
      }
      goto LABEL_57;
    }
    if (!v19)
      goto LABEL_57;
    v28 = v10 ? size : v9;
    if (v19 + 2 >= v28)
      goto LABEL_57;
    std::string::basic_string(&v36, &__str, v19 - 1, 4uLL, (std::allocator<char> *)&v38);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      v29 = (void *)v36.__r_.__value_.__r.__words[0];
      if (v36.__r_.__value_.__l.__size_ != 4)
        goto LABEL_56;
      v35 = *(_DWORD *)v36.__r_.__value_.__l.__data_;
      operator delete(v36.__r_.__value_.__l.__data_);
      if (v35 != 1551050528)
      {
LABEL_57:
        ++v19;
        v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        v10 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
        size = __str.__r_.__value_.__l.__size_;
        v11 = __str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = &__str;
        else
          v30 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v31 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v31 = __str.__r_.__value_.__l.__size_;
        if (v31 >= v19)
        {
          v32 = (char *)v30 + v19;
          v33 = (char *)v30 + v31;
          while (v33 - v32 >= 1)
          {
            v34 = memchr(v32, 32, v33 - v32);
            if (!v34)
              break;
            if (*v34 == 32)
            {
              if (v19 < v31 && v34 != v33)
              {
                v18 = v34 - (_BYTE *)v30;
                if (v18 != -1)
                  goto LABEL_27;
              }
              goto LABEL_76;
            }
            v32 = v34 + 1;
          }
        }
        goto LABEL_76;
      }
    }
    else if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) != 4 || LODWORD(v36.__r_.__value_.__l.__data_) != 1551050528)
    {
      goto LABEL_57;
    }
    std::string::replace(&__str, v19 - 1, v18 - v19 + 1, "'s");
    v19 += 2;
    goto LABEL_57;
  }
LABEL_76:
  corelm::Custom2PreProcessor::preProcess(a1, (uint64_t *)&__str, a3);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_191CE7870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *corelm::SentencePieceVocabulary::SentencePieceVocabulary(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::runtime_error *exception;
  std::string *v12;
  std::string v13;
  uint64_t v14;

  *a1 = &unk_1E2DF16A0;
  v4 = a1 + 4;
  std::string::basic_string[abi:ne180100]<0>(a1 + 1, "<s>");
  std::string::basic_string[abi:ne180100]<0>(v4, "</s>");
  std::string::basic_string[abi:ne180100]<0>(a1 + 7, "<unk>");
  std::string::basic_string[abi:ne180100]<0>(a1 + 10, "<pad>");
  *a1 = &off_1E2DF1A18;
  sentencepiece::SentencePieceProcessor::SentencePieceProcessor((sentencepiece::SentencePieceProcessor *)(a1 + 13));
  a1[28] = 0;
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  sentencepiece::SentencePieceProcessor::Load((uint64_t)(a1 + 13), v6, v7, (sentencepiece::util::Status *)&v14);
  if (v14)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sentencepiece::util::Status::ToString((sentencepiece::util::Status *)&v14, &v13);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v13;
    else
      v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(exception, (const char *)v12);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v14);
  v8 = (_QWORD *)operator new();
  *v8 = &unk_1E2DF18F0;
  v9 = a1[28];
  a1[28] = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return a1;
}

void sub_191CE7A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;
  sentencepiece::SentencePieceProcessor *v16;
  uint64_t v18;

  v18 = *(_QWORD *)(v15 + 224);
  *(_QWORD *)(v15 + 224) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  sentencepiece::SentencePieceProcessor::~SentencePieceProcessor(v16);
  corelm::AbstractVocabulary::~AbstractVocabulary((void **)v15);
  _Unwind_Resume(a1);
}

uint64_t corelm::SentencePieceVocabulary::setPreProcessor(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void *corelm::SentencePieceVocabulary::idToToken@<X0>(corelm::SentencePieceVocabulary *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *result;
  unint64_t v7;
  const void *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *exception;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v16[2];
  unsigned __int8 v17;
  unint64_t v18;

  v18 = a2;
  if ((a2 & 0x8000000000000000) != 0
    || (*(uint64_t (**)(corelm::SentencePieceVocabulary *))(*(_QWORD *)this + 96))(this) <= a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    corelm::util::strCat<long>();
    if ((v17 & 0x80u) == 0)
      v14 = v16;
    else
      v14 = (_QWORD *)v16[0];
    if ((v17 & 0x80u) == 0)
      v15 = v17;
    else
      v15 = v16[1];
    corelm::OutOfVocabularyError::OutOfVocabularyError(exception, (uint64_t)v14, v15);
  }
  result = (void *)sentencepiece::SentencePieceProcessor::IdToPiece((corelm::SentencePieceVocabulary *)((char *)this + 104), a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = result;
  v9 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v12 = operator new(v10 + 1);
    a3[1] = v9;
    a3[2] = v11 | 0x8000000000000000;
    *a3 = v12;
    a3 = v12;
  }
  else
  {
    *((_BYTE *)a3 + 23) = v7;
    if (!v7)
      goto LABEL_11;
  }
  result = memmove(a3, v8, v9);
LABEL_11:
  *((_BYTE *)a3 + v9) = 0;
  return result;
}

void sub_191CE7C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t corelm::util::strCat<long>()
{
  _QWORD v1[11];
  char v2;
  uint64_t v3;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v1[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v2 < 0)
    operator delete((void *)v1[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19401E928](&v3);
}

void sub_191CE7D40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t corelm::SentencePieceVocabulary::tokenToID(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  std::string::value_type *v7;
  std::string *v8;
  std::string::size_type size;
  int v10;
  _QWORD **v11;
  std::string *v12;
  std::string::size_type v13;
  _BYTE *v14;
  uint64_t v15;
  std::string *v17;
  std::string *v18;
  std::runtime_error *exception;
  std::string *p_buf;
  void *v21[2];
  char v22;
  std::string v23;
  void *__p;
  _BYTE *v25;
  uint64_t v26;
  std::string v27;
  std::string buf;
  std::string *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  memset(&v27, 0, sizeof(v27));
  if (a3)
  {
    v6 = a3;
    v7 = (std::string::value_type *)a2;
    do
    {
      std::string::push_back(&v27, *v7++);
      --v6;
    }
    while (v6);
  }
  if (corelm::util::startsWith(a2, a3, "<", 1) && corelm::util::endsWith(a2, a3, ">", 1uLL))
  {
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v27;
    else
      v8 = (std::string *)v27.__r_.__value_.__r.__words[0];
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    else
      size = v27.__r_.__value_.__l.__size_;
    v10 = sentencepiece::SentencePieceProcessor::PieceToId((_QWORD **)(a1 + 104), (uint64_t)v8, size);
    goto LABEL_25;
  }
  __p = 0;
  v25 = 0;
  v26 = 0;
  v11 = (_QWORD **)(a1 + 104);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v27;
  else
    v12 = (std::string *)v27.__r_.__value_.__r.__words[0];
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  else
    v13 = v27.__r_.__value_.__l.__size_;
  sentencepiece::SentencePieceProcessor::Encode((uint64_t)v11, (uint64_t)v12, v13, (char **)&__p, (sentencepiece::util::Status *)&v23);
  if (v23.__r_.__value_.__r.__words[0])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sentencepiece::util::Status::ToString((sentencepiece::util::Status *)&v23, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(exception, (const char *)p_buf);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v23);
  v14 = __p;
  v15 = v25 - (_BYTE *)__p;
  if (v25 - (_BYTE *)__p == 4)
  {
    v10 = *(_DWORD *)__p;
LABEL_24:
    v25 = v14;
    operator delete(v14);
    goto LABEL_25;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v27;
    else
      v17 = (std::string *)v27.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(v21, " ");
    corelm::util::join<std::vector<int> &>((uint64_t *)&__p, (std::string::size_type)v21, &v23);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v23;
    else
      v18 = (std::string *)v23.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v15 >> 2;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    v29 = v18;
    _os_log_error_impl(&dword_191C5D000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Expected token=%s to get converted into single TokenID, but got %zu tokenIDs: %s. Returning UNK TokenID as fallback.", (uint8_t *)&buf, 0x20u);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (v22 < 0)
      operator delete(v21[0]);
  }
  v10 = sentencepiece::SentencePieceProcessor::PieceToId(v11, (uint64_t)"<unk>", 5);
  v14 = __p;
  if (__p)
    goto LABEL_24;
LABEL_25:
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  return v10;
}

void sub_191CE8018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t corelm::util::join<std::vector<int> &>@<X0>(uint64_t *a1@<X0>, std::string::size_type a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string::size_type v9;
  std::string::size_type size;
  uint64_t v11;
  std::string __str;
  _QWORD v14[11];
  char v15;
  uint64_t v16;
  char v17;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  v6 = *a1;
  v7 = a1[1];
  v8 = (v7 - v6) >> 2;
  if (v8 == 1)
  {
    std::ostream::operator<<();
    std::stringbuf::str();
  }
  else if (v8)
  {
    if (*(char *)(a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *(_QWORD *)a2;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
    __str.__r_.__value_.__l.__size_ = v9;
    while (v6 != v7)
    {
      std::ostream_iterator<int &,char,std::char_traits<char>>::operator=[abi:ne180100]((uint64_t)&__str);
      v6 += 4;
    }
    std::stringbuf::str();
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    v11 = *(unsigned __int8 *)(a2 + 23);
    if ((v11 & 0x80u) != 0)
      v11 = *(_QWORD *)(a2 + 8);
    std::string::basic_string(a3, &__str, 0, size - v11, (std::allocator<char> *)&v17);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  else
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
  v14[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v14[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v15 < 0)
    operator delete((void *)v14[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19401E928](&v16);
}

void sub_191CE8224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void corelm::SentencePieceVocabulary::copyTokenToID(corelm::SentencePieceVocabulary *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  void **v9;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v4 = (*(uint64_t (**)(corelm::SentencePieceVocabulary *))(*(_QWORD *)this + 96))(this);
  if (v4 >= 1)
  {
    v5 = 0;
    v6 = v4 & ~(v4 >> 63);
    do
    {
      (*(void (**)(void **__return_ptr, corelm::SentencePieceVocabulary *, uint64_t))(*(_QWORD *)this + 40))(__p, this, v5);
      v9 = __p;
      *((_QWORD *)std::__tree<std::__value_type<std::string,long>,std::__map_value_compare<std::string,std::__value_type<std::string,long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v9)+ 7) = v5;
      if (v8 < 0)
        operator delete(__p[0]);
      ++v5;
    }
    while (v6 != v5);
  }
}

void sub_191CE831C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  std::__tree<std::string>::destroy(v15, *(char **)(v15 + 8));
  _Unwind_Resume(a1);
}

__n128 corelm::SentencePieceVocabulary::copyIDToToken@<Q0>(corelm::SentencePieceVocabulary *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __n128 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v4 = (*(uint64_t (**)(corelm::SentencePieceVocabulary *))(*(_QWORD *)this + 96))(this);
  if (v4 >= 1)
  {
    v6 = 0;
    v7 = v4 & ~(v4 >> 63);
    do
    {
      v12 = v6;
      (*(void (**)(__n128 *__return_ptr, corelm::SentencePieceVocabulary *, uint64_t))(*(_QWORD *)this + 40))(&v10, this, v6);
      v13 = &v12;
      v8 = std::__tree<std::__value_type<long,std::string>,std::__map_value_compare<long,std::__value_type<long,std::string>,std::less<long>,true>,std::allocator<std::__value_type<long,std::string>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t **)a2, &v12, (uint64_t)&std::piecewise_construct, &v13);
      v9 = v8 + 5;
      if (*((char *)v8 + 63) < 0)
        operator delete((void *)*v9);
      result = v10;
      *(__n128 *)v9 = v10;
      v9[2] = v11;
      ++v6;
    }
    while (v7 != v6);
  }
  return result;
}

void sub_191CE842C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  std::__tree<std::__value_type<long,std::string>,std::__map_value_compare<long,std::__value_type<long,std::string>,std::less<long>,true>,std::allocator<std::__value_type<long,std::string>>>::destroy(v14, *(char **)(v14 + 8));
  _Unwind_Resume(a1);
}

void corelm::SentencePieceVocabulary::textToIDs(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  std::string::value_type *v7;
  uint64_t v10;
  int64_t v11;
  char *v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  const int *begin;
  std::vector<int>::const_iterator v18;
  std::vector<int>::pointer v19;
  std::vector<int>::pointer end;
  _QWORD *v21;
  uint64_t v22;
  std::runtime_error *v23;
  std::string *v24;
  std::logic_error *exception;
  uint64_t v26;
  std::string v27;
  void *__p[2];
  unsigned __int8 v29;
  std::vector<int> v30;

  v7 = (std::string::value_type *)a2;
  v10 = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
  {
    v12 = *(char **)(a1 + 8);
    v11 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v11 = *(unsigned __int8 *)(a1 + 31);
    v12 = (char *)(a1 + 8);
  }
  if (corelm::util::startsWith(a2, a3, v12, v11))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Input text should not contain BOS token!");
    __cxa_throw(exception, (struct type_info *)off_1E2DEE9A8, MEMORY[0x1E0DE4360]);
  }
  memset(&v30, 0, sizeof(v30));
  v13 = *(_QWORD *)(a1 + 224);
  memset(&v27, 0, sizeof(v27));
  for (; a3; --a3)
    std::string::push_back(&v27, *v7++);
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v13 + 16))(__p, v13, &v27);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if ((v29 & 0x80u) == 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if ((v29 & 0x80u) == 0)
    v15 = v29;
  else
    v15 = (uint64_t)__p[1];
  sentencepiece::SentencePieceProcessor::Encode(a1 + 104, (uint64_t)v14, v15, (char **)&v30, (sentencepiece::util::Status *)&v26);
  if (v26)
  {
    v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sentencepiece::util::Status::ToString((sentencepiece::util::Status *)&v26, &v27);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v27;
    else
      v24 = (std::string *)v27.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(v23, (const char *)v24);
    __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v26);
  if (a4)
  {
    if (*(char *)(a1 + 31) < 0)
    {
      v10 = *(_QWORD *)(a1 + 8);
      v16 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v16 = *(unsigned __int8 *)(a1 + 31);
    }
    begin = v30.__begin_;
    LODWORD(v27.__r_.__value_.__l.__data_) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v10, v16);
    v18.__i_ = begin;
    std::vector<int>::insert(&v30, v18, (std::vector<int>::value_type *)&v27);
  }
  std::vector<long>::vector(a5, v30.__end_ - v30.__begin_);
  v19 = v30.__begin_;
  end = v30.__end_;
  if (v30.__begin_ != v30.__end_)
  {
    v21 = (_QWORD *)*a5;
    do
    {
      v22 = *v19++;
      *v21++ = v22;
    }
    while (v19 != end);
  }
  if ((char)v29 < 0)
    operator delete(__p[0]);
  if (v30.__begin_)
  {
    v30.__end_ = v30.__begin_;
    operator delete(v30.__begin_);
  }
}

void sub_191CE868C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23)
{
  void *v23;

  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

std::vector<int>::iterator std::vector<int>::insert(std::vector<int> *this, std::vector<int>::const_iterator __position, std::vector<int>::value_type *__x)
{
  int *i;
  const int *end;
  std::__compressed_pair<int *> *p_end_cap;
  int *v8;
  int *value;
  std::__wrap_iter<const int *>::iterator_type v10;
  const int *v11;
  int *v12;
  int v13;
  std::vector<int>::pointer begin;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int *v19;
  std::__split_buffer<int> __v;

  i = (int *)__position.__i_;
  end = this->__end_;
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v8 = value;
  if (end >= value)
  {
    begin = this->__begin_;
    v15 = end - this->__begin_ + 1;
    if (v15 >> 62)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v16 = __position.__i_ - begin;
    v17 = (char *)v8 - (char *)begin;
    if (v17 >> 1 > v15)
      v15 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v15;
    __v.__end_cap_.__value_ = (std::allocator<int> *)p_end_cap;
    if (v18)
      v19 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v18);
    else
      v19 = 0;
    __v.__first_ = v19;
    __v.__begin_ = &v19[v16];
    __v.__end_ = __v.__begin_;
    __v.__end_cap_.__value_ = &v19[v18];
    std::__split_buffer<int>::push_back(&__v, __x);
    i = std::vector<int>::__swap_out_circular_buffer(this, &__v, i);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
  }
  else if (__position.__i_ == end)
  {
    *__position.__i_ = *__x;
    this->__end_ = (std::vector<int>::pointer)(__position.__i_ + 1);
  }
  else
  {
    v10 = __position.__i_ + 1;
    v11 = end - 1;
    v12 = (int *)end;
    while (v11 < end)
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    this->__end_ = v12;
    if (end != v10)
      memmove((void *)&end[-(end - v10)], __position.__i_, (char *)end - (char *)v10);
    *i = *__x;
  }
  return (std::vector<int>::iterator)i;
}

void sub_191CE888C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void corelm::SentencePieceVocabulary::idsToText(uint64_t a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  std::vector<int>::pointer begin;
  uint64_t v7;
  std::runtime_error *exception;
  const char *v9;
  std::vector<int> v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;

  __p[0] = 0;
  __p[1] = 0;
  v13 = 0;
  std::vector<int>::vector(&v10, a2[1] - *a2);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    begin = v10.__begin_;
    do
    {
      v7 = *v4++;
      *begin++ = v7;
    }
    while (v4 != v5);
  }
  sentencepiece::SentencePieceProcessor::Decode(a1 + 104, (uint64_t)&v10, (uint64_t)__p, (sentencepiece::util::Status *)&v11);
  if (v10.__begin_)
  {
    v10.__end_ = v10.__begin_;
    operator delete(v10.__begin_);
  }
  if (v11)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sentencepiece::util::Status::ToString((sentencepiece::util::Status *)&v11, (std::string *)&v10);
    if (SHIBYTE(v10.__end_cap_.__value_) >= 0)
      v9 = (const char *)&v10;
    else
      v9 = (const char *)v10.__begin_;
    std::runtime_error::runtime_error(exception, v9);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v11);
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 224) + 24))(*(_QWORD *)(a1 + 224), __p);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
}

void sub_191CE89E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void corelm::Custom1PreProcessor::~Custom1PreProcessor(corelm::Custom1PreProcessor *this)
{
  corelm::Custom1PreProcessor::~Custom1PreProcessor(this);
  JUMPOUT(0x19401E994);
}

{
  *(_QWORD *)this = &off_1E2DF1748;
  NLTokenizerRelease(*((_QWORD **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  std::__tree<std::string>::destroy((uint64_t)this + 8, *((char **)this + 2));
}

void corelm::Custom2ASRPreProcessor::~Custom2ASRPreProcessor(corelm::Custom2ASRPreProcessor *this)
{
  *(_QWORD *)this = &off_1E2DF1948;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 88, *((_QWORD **)this + 12));
  corelm::Custom2PreProcessor::~Custom2PreProcessor(this);
}

{
  *(_QWORD *)this = &off_1E2DF1948;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 88, *((_QWORD **)this + 12));
  corelm::Custom2PreProcessor::~Custom2PreProcessor(this);
  JUMPOUT(0x19401E994);
}

void corelm::TokenListVocabulary::~TokenListVocabulary(corelm::TokenListVocabulary *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DF1848;
  v2 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 168, *((_QWORD **)this + 22));
  boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~multi_index_container((uint64_t)this + 120);
  corelm::AbstractVocabulary::~AbstractVocabulary((void **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DF1848;
  v2 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 168, *((_QWORD **)this + 22));
  boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~multi_index_container((uint64_t)this + 120);
  corelm::AbstractVocabulary::~AbstractVocabulary((void **)this);
  JUMPOUT(0x19401E994);
}

uint64_t corelm::TokenListVocabulary::copyTokenToID@<X0>(corelm::TokenListVocabulary *this@<X0>, uint64_t a2@<X8>)
{
  return corelm::TokenIDMap::copyTokenToID((uint64_t)this + 104, a2);
}

uint64_t corelm::TokenListVocabulary::copyIDToToken@<X0>(corelm::TokenListVocabulary *this@<X0>, _QWORD *a2@<X8>)
{
  return corelm::TokenIDMap::copyIDToToken((uint64_t)this + 104, a2);
}

void corelm::AbstractVocabulary::preProcess(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

void corelm::AbstractVocabulary::idsToTokens(uint64_t a1@<X0>, uint64_t a2@<X1>, std::vector<std::string> *a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  void *__p[2];
  char v11;
  std::vector<std::string> *v12;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(&v7, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  v5 = v7;
  v6 = v8;
  v12 = a3;
  if (v7 != v8)
  {
    do
    {
      (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 40))(__p, a1, *v5);
      std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&v12, (__int128 *)__p);
      if (v11 < 0)
        operator delete(__p[0]);
      ++v5;
    }
    while (v5 != v6);
    v5 = v7;
  }
  if (v5)
  {
    v8 = v5;
    operator delete(v5);
  }
}

void sub_191CE8CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  uint64_t v18;

  if (a17 < 0)
    operator delete(__p);
  *(_QWORD *)(v18 - 40) = v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 40));
  if (a9)
    operator delete(a9);
  _Unwind_Resume(a1);
}

void corelm::AbstractVocabulary::tokensToIDs(uint64_t a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  std::string v5;
  std::string *v6;

  memset(&v5, 0, sizeof(v5));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  corelm::util::mapFn<std::vector<std::string>,corelm::AbstractVocabulary::tokensToIDs(std::vector<std::string> const&)::{lambda(std::vector<std::string>)#1}>((__int128 **)&v5, a1, a3);
  v6 = &v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
}

void sub_191CE8DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t corelm::TokenListVocabulary::size(corelm::TokenListVocabulary *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 14) + 8);
}

void corelm::SentencePieceVocabulary::~SentencePieceVocabulary(corelm::SentencePieceVocabulary *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DF1A18;
  v2 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sentencepiece::SentencePieceProcessor::~SentencePieceProcessor((corelm::SentencePieceVocabulary *)((char *)this + 104));
  corelm::AbstractVocabulary::~AbstractVocabulary((void **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DF1A18;
  v2 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sentencepiece::SentencePieceProcessor::~SentencePieceProcessor((corelm::SentencePieceVocabulary *)((char *)this + 104));
  corelm::AbstractVocabulary::~AbstractVocabulary((void **)this);
  JUMPOUT(0x19401E994);
}

uint64_t corelm::SentencePieceVocabulary::preProcess(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 224) + 16))(*(_QWORD *)(a1 + 224));
}

uint64_t corelm::SentencePieceVocabulary::size(corelm::SentencePieceVocabulary *this)
{
  return (int)sentencepiece::SentencePieceProcessor::GetPieceSize((corelm::SentencePieceVocabulary *)((char *)this + 104));
}

_QWORD *corelm::TokenIDMap::TokenIDMap(_QWORD *a1, __int128 **a2)
{
  _QWORD *v4;
  _QWORD *v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  std::string __p;
  uint64_t v12;

  v4 = a1 + 4;
  a1[1] = a1 + 4;
  v5 = operator new(0x50uLL);
  a1[3] = v5;
  v5[4] = 0;
  v5[5] = v5 + 4;
  v5[6] = v5 + 4;
  v5[7] = 0;
  v5[8] = v5 + 7;
  v5[9] = v5 + 7;
  a1[5] = 0;
  a1[6] = v4;
  a1[7] = v4;
  v7 = *a2;
  v6 = a2[1];
  if (v7 != v6)
  {
    v8 = 0;
    do
    {
      if (*((char *)v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
      }
      else
      {
        v9 = *v7;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
      }
      v12 = v8;
      boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(a1[1] - 16, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v8;
      v7 = (__int128 *)((char *)v7 + 24);
    }
    while (v7 != v6);
  }
  return a1;
}

void sub_191CE8F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~multi_index_container(v14 + 16);
  _Unwind_Resume(a1);
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~multi_index_container(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
  v3 = a1 + 16;
  if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v4 = (v2 & 0xFFFFFFFFFFFFFFFELL) - 56;
  else
    v4 = 0;
  boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>,long,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<long>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes(v3, v4);
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>,long,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<long>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v4 = *(_QWORD *)(a2 + 64);
    if (v4)
      v5 = v4 - 56;
    else
      v5 = 0;
    boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>,long,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<long>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes(a1, v5);
    v6 = *(_QWORD *)(a2 + 72);
    if (v6)
      v7 = v6 - 56;
    else
      v7 = 0;
    boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>,long,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<long>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes(a1, v7);
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::delete_node_(a1 - 16, (void **)a2);
  }
}

void boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::delete_node_(int a1, void **__p)
{
  if (*((char *)__p + 23) < 0)
    operator delete(*__p);
  operator delete(__p);
}

std::string *boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t a1, uint64_t a2)
{
  std::string *result;
  std::string *v4;

  v4 = 0;
  result = (std::string *)boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>,long,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<long>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::insert_<boost::multi_index::detail::lvalue_tag>(a1 + 16, a2, &v4);
  if (result == v4)
    ++*(_QWORD *)(a1 + 24);
  return result;
}

unint64_t *boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>,long,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<long>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t a1, uint64_t a2, std::string **a3)
{
  unint64_t *v6;
  unint64_t *v7;
  int v9;
  unint64_t *v10;

  v9 = 0;
  if ((boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>,long,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<long>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::link_point(a1, *(_QWORD *)(a2 + 24), (uint64_t)&v9) & 1) != 0)
  {
    v6 = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>::left>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::left,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::insert_<boost::multi_index::detail::lvalue_tag>(a1, (const void **)a2, a3);
    v7 = v6;
    if (v6 == (unint64_t *)*a3)
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t)(v6 + 7), v9, v10, (unint64_t *)(*(_QWORD *)(a1 - 8) + 56));
  }
  else if (v10)
  {
    return v10 - 7;
  }
  else
  {
    return 0;
  }
  return v7;
}

uint64_t boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>,long,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<long>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::link_point(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t result;
  unint64_t v16;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = v5;
  v7 = *(_QWORD *)(v5 + 56) & 0xFFFFFFFFFFFFFFFELL;
  if (!v7)
    goto LABEL_7;
  do
  {
    v6 = v7 - 56;
    v8 = *(_QWORD *)(v7 - 32);
    if (v8 <= a2)
      v9 = 72;
    else
      v9 = 64;
    v7 = *(_QWORD *)(v6 + v9);
  }
  while (v7);
  if (v8 <= a2)
  {
    v13 = 1;
    v14 = v6;
  }
  else
  {
LABEL_7:
    v10 = *(_QWORD *)(v5 + 64);
    v11 = v10 - 56;
    if (!v10)
      v11 = 0;
    v12 = v6 + 56;
    if (v6 == v11)
    {
      *(_DWORD *)a3 = 0;
      goto LABEL_18;
    }
    v16 = v6 + 56;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement(&v16);
    v13 = 0;
    if (v16)
      v14 = v16 - 56;
    else
      v14 = 0;
  }
  if (*(_QWORD *)(v14 + 24) < a2)
  {
    *(_DWORD *)a3 = v13;
    v12 = v6 + 56;
LABEL_18:
    result = 1;
    goto LABEL_19;
  }
  result = 0;
  v12 = v14 + 56;
LABEL_19:
  *(_QWORD *)(a3 + 8) = v12;
  return result;
}

unint64_t *boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>::left>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::left,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t a1, const void **a2, std::string **a3)
{
  std::string *v6;
  std::string *v7;
  int v9;
  unint64_t *v10;

  v9 = 0;
  if (boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>::left>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::left,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::link_point(a1, a2, (uint64_t)&v9))
  {
    v6 = boost::multi_index::detail::index_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_(a1, (uint64_t)a2, a3);
    v7 = v6;
    if (v6 == *a3)
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t)&v6[1].__r_.__value_.__l.__size_, v9, v10, (unint64_t *)(*(_QWORD *)(a1 - 8) + 32));
  }
  else if (v10)
  {
    return v10 - 4;
  }
  else
  {
    return 0;
  }
  return (unint64_t *)v7;
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link(unint64_t a1, int a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t *v8;

  if (a2)
  {
    a3[2] = a1;
    v4 = a4 + 2;
    v5 = (unint64_t *)a4[2];
  }
  else
  {
    a3[1] = a1;
    if (a3 == a4)
    {
      *a3 = *a3 & 1 | a1;
      v4 = a3 + 2;
LABEL_8:
      *v4 = a1;
      goto LABEL_9;
    }
    v4 = a4 + 1;
    v5 = (unint64_t *)a4[1];
  }
  if (v5 == a3)
    goto LABEL_8;
LABEL_9:
  v6 = *(_QWORD *)a1 & 1 | (unint64_t)a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v6;
  v8 = a4;
  return boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rebalance((unint64_t *)a1, &v8);
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement(unint64_t *result)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  BOOL v6;

  v1 = (_QWORD *)*result;
  v2 = *(_QWORD *)*result;
  if ((v2 & 1) == 0 && v1 == (_QWORD *)(*(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL))
  {
    v4 = v1[2];
  }
  else
  {
    v3 = v1[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
    }
    else
    {
      v4 = v2 & 0xFFFFFFFFFFFFFFFELL;
      if (v1 == *(_QWORD **)(v4 + 8))
      {
        v5 = (_QWORD *)v4;
        do
        {
          *result = (unint64_t)v5;
          v4 = *v5 & 0xFFFFFFFFFFFFFFFELL;
          v6 = v5 == *(_QWORD **)(v4 + 8);
          v5 = (_QWORD *)v4;
        }
        while (v6);
      }
    }
  }
  *result = v4;
  return result;
}

BOOL boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>::left>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::left,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::link_point(uint64_t a1, const void **a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void **v12;
  int v13;
  const void **v14;
  _BOOL8 result;
  unint64_t v16;

  v6 = *(_QWORD *)(a1 - 8);
  v7 = *(_QWORD *)(v6 + 32) & 0xFFFFFFFFFFFFFFFELL;
  if (!v7)
    goto LABEL_7;
  do
  {
    v6 = v7 - 32;
    v8 = std::less<std::string>::operator()[abi:ne180100](a1 + 1, a2, (const void **)(v7 - 32));
    if (v8)
      v9 = 40;
    else
      v9 = 48;
    v7 = *(_QWORD *)(v6 + v9);
  }
  while (v7);
  if (!v8)
  {
    v13 = 1;
    v14 = (const void **)v6;
  }
  else
  {
LABEL_7:
    v10 = *(_QWORD *)(*(_QWORD *)(a1 - 8) + 40);
    v11 = v10 - 32;
    if (!v10)
      v11 = 0;
    v12 = (const void **)(v6 + 32);
    if (v6 == v11)
    {
      *(_DWORD *)a3 = 0;
      goto LABEL_18;
    }
    v16 = v6 + 32;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement(&v16);
    v13 = 0;
    if (v16)
      v14 = (const void **)(v16 - 32);
    else
      v14 = 0;
  }
  result = std::less<std::string>::operator()[abi:ne180100](a1 + 1, v14, a2);
  if (result)
  {
    *(_DWORD *)a3 = v13;
    v12 = (const void **)(v6 + 32);
LABEL_18:
    result = 1;
    goto LABEL_19;
  }
  v12 = v14 + 4;
LABEL_19:
  *(_QWORD *)(a3 + 8) = v12;
  return result;
}

std::string *boost::multi_index::detail::index_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_(uint64_t a1, uint64_t a2, std::string **a3)
{
  std::string *result;
  std::string *v6;
  std::string::size_type v7;

  result = (std::string *)operator new(0x50uLL);
  v6 = result;
  *a3 = result;
  v7 = *(_QWORD *)(a2 + 24);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(result, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    result = *a3;
  }
  else
  {
    *(_OWORD *)&result->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    result->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v6[1].__r_.__value_.__r.__words[0] = v7;
  return result;
}

void sub_191CE9550(void *a1)
{
  void **v1;

  __cxa_begin_catch(a1);
  operator delete(*v1);
  __cxa_rethrow();
}

void sub_191CE9564(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rebalance(unint64_t *result, unint64_t **a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t i;
  unint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t *v17;

  v2 = result;
  v3 = *result & 0xFFFFFFFFFFFFFFFELL;
  *result = v3;
  v4 = *a2;
  v5 = **a2 & 0xFFFFFFFFFFFFFFFELL;
  if ((unint64_t *)v5 != result)
  {
    v6 = (unint64_t *)(*result & 0xFFFFFFFFFFFFFFFELL);
    for (i = *v6; (*v6 & 1) == 0; i = *v6)
    {
      v9 = *(unint64_t **)((i & 0xFFFFFFFFFFFFFFFELL) + 8);
      if (v9 == v6)
      {
        v9 = *(unint64_t **)((i & 0xFFFFFFFFFFFFFFFELL) + 16);
        if (!v9 || (*(_BYTE *)v9 & 1) != 0)
        {
          if (v2 == (unint64_t *)v6[2])
          {
            v17 = v4;
            boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left(v6, &v17);
            v4 = *a2;
            v11 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
            v2 = v6;
          }
          else
          {
            v11 = v6;
            v6 = v2;
          }
          *v11 |= 1uLL;
          *(_QWORD *)(*(_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
          v13 = (unint64_t *)(*(_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL);
          v16 = v4;
          result = boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right(v13, &v16);
          goto LABEL_17;
        }
      }
      else if (!v9 || (*(_BYTE *)v9 & 1) != 0)
      {
        if (v2 == (unint64_t *)v6[1])
        {
          v15 = v4;
          boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right(v6, &v15);
          v4 = *a2;
          v10 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
          v2 = v6;
        }
        else
        {
          v10 = v6;
          v6 = v2;
        }
        *v10 |= 1uLL;
        *(_QWORD *)(*(_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
        v12 = (unint64_t *)(*(_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL);
        v14 = v4;
        result = boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left(v12, &v14);
        goto LABEL_17;
      }
      *v6 = i | 1;
      *v9 |= 1uLL;
      *(_QWORD *)(*(_QWORD *)(*v2 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
      v2 = (unint64_t *)(*(_QWORD *)(*v2 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL);
LABEL_17:
      v4 = *a2;
      v5 = **a2 & 0xFFFFFFFFFFFFFFFELL;
      if (v2 == (unint64_t *)v5)
        goto LABEL_20;
      v6 = (unint64_t *)(*v2 & 0xFFFFFFFFFFFFFFFELL);
    }
    v2 = (unint64_t *)v5;
LABEL_20:
    v3 = *v2;
  }
  *v2 = v3 | 1;
  return result;
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left(unint64_t *result, unint64_t **a2)
{
  unint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  v2 = result[2];
  result[2] = *(_QWORD *)(v2 + 8);
  v3 = *(unint64_t **)(v2 + 8);
  if (v3)
    *v3 = *v3 & 1 | (unint64_t)result;
  *(_QWORD *)v2 = *result & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v2 & 1;
  if ((unint64_t *)(**a2 & 0xFFFFFFFFFFFFFFFELL) == result)
  {
    **a2 = **a2 & 1 | v2;
    v4 = *result;
  }
  else
  {
    v4 = *result;
    v5 = *result & 0xFFFFFFFFFFFFFFFELL;
    if (*(unint64_t **)(v5 + 8) == result)
      *(_QWORD *)(v5 + 8) = v2;
    else
      *(_QWORD *)(v5 + 16) = v2;
  }
  *(_QWORD *)(v2 + 8) = result;
  *result = v4 & 1 | v2;
  return result;
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right(unint64_t *result, unint64_t **a2)
{
  unint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  v2 = result[1];
  result[1] = *(_QWORD *)(v2 + 16);
  v3 = *(unint64_t **)(v2 + 16);
  if (v3)
    *v3 = *v3 & 1 | (unint64_t)result;
  *(_QWORD *)v2 = *result & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v2 & 1;
  if ((unint64_t *)(**a2 & 0xFFFFFFFFFFFFFFFELL) == result)
  {
    **a2 = **a2 & 1 | v2;
    v4 = *result;
  }
  else
  {
    v4 = *result;
    v5 = *result & 0xFFFFFFFFFFFFFFFELL;
    if (*(unint64_t **)(v5 + 16) == result)
      *(_QWORD *)(v5 + 16) = v2;
    else
      *(_QWORD *)(v5 + 8) = v2;
  }
  *(_QWORD *)(v2 + 16) = result;
  *result = v4 & 1 | v2;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[8];
  uint64_t v8;
  uint64_t v9;

  boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)v7, a2);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = v9;
  *(_QWORD *)(a1 + 8) = v8;
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  v8 = v3;
  v9 = v5;
  boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~multi_index_container((uint64_t)v7);
  return a1;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = operator new(0x50uLL);
  *(_QWORD *)(a1 + 24) = 0;
  boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::copy_construct_from(a1, a2);
  return a1;
}

void sub_191CE9934(_Unwind_Exception *a1)
{
  uint64_t v1;

  operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::copy_construct_from(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t i;
  uint64_t v9;
  _QWORD v11[8];
  char v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 8);
  v11[1] = v4;
  v11[3] = v4;
  if (v4)
  {
    if (v4 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = operator new(16 * v4);
  }
  else
  {
    v7 = 0;
  }
  v11[4] = v7;
  v11[5] = 0;
  v11[6] = v5;
  v11[7] = v6;
  v12 = 0;
  for (i = *(_QWORD *)(v5 + 64); ; i = v13)
  {
    v9 = i ? i - 56 : 0;
    if (v9 == v5)
      break;
    boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::clone<boost::multi_index::detail::copy_map_value_copier>((uint64_t)v11, v9);
    v13 = v9 + 56;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v13);
  }
  boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>,long,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<long>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::copy_(a1 + 16, a2 + 16, v11);
  v12 = 1;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)v11);
}

void sub_191CE9A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>,long,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<long>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::copy_(unint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;

  v3 = *(_QWORD *)(a2 - 8);
  v4 = *(_QWORD *)(v3 + 56);
  v5 = *(_QWORD *)(result - 8);
  v6 = (unint64_t *)(v5 + 56);
  if (v4 > 1)
  {
    *v6 = *v6 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v3 + 56) & 1;
    v7 = *(_QWORD *)(v3 + 56);
    v8 = (v7 & 0xFFFFFFFFFFFFFFFELL) - 56;
    v9 = (v7 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v10 = v4 & 1;
    if (v9)
      v11 = 0;
    else
      v11 = v8;
    v12 = a3[6];
    if (v12 == v11)
    {
      v19 = a3 + 7;
    }
    else
    {
      v13 = (_QWORD *)a3[4];
      v14 = a3[5];
      while (v14)
      {
        v15 = v14 >> 1;
        v16 = &v13[2 * (v14 >> 1)];
        v18 = *v16;
        v17 = v16 + 2;
        v14 += ~(v14 >> 1);
        if (v18 < v11)
          v13 = v17;
        else
          v14 = v15;
      }
      v19 = v13 + 1;
    }
    *v6 = v10 | (*v19 + 56);
    v20 = *(_QWORD *)(v3 + 64);
    v21 = v20 - 56;
    if (!v20)
      v21 = 0;
    if (v12 == v21)
    {
      v28 = a3 + 7;
    }
    else
    {
      v22 = (_QWORD *)a3[4];
      v23 = a3[5];
      while (v23)
      {
        v24 = v23 >> 1;
        v25 = &v22[2 * (v23 >> 1)];
        v27 = *v25;
        v26 = v25 + 2;
        v23 += ~(v23 >> 1);
        if (v27 < v21)
          v22 = v26;
        else
          v23 = v24;
      }
      v28 = v22 + 1;
    }
    *(_QWORD *)(v5 + 64) = *v28 + 56;
    v29 = *(_QWORD *)(*(_QWORD *)(a2 - 8) + 72);
    if (v29)
      v30 = v29 - 56;
    else
      v30 = 0;
    if (a3[6] == v30)
    {
      v38 = a3 + 7;
      v32 = a3[5];
    }
    else
    {
      v31 = (_QWORD *)a3[4];
      v32 = a3[5];
      if (v32)
      {
        v33 = a3[5];
        do
        {
          v34 = v33 >> 1;
          v35 = &v31[2 * (v33 >> 1)];
          v37 = *v35;
          v36 = v35 + 2;
          v33 += ~(v33 >> 1);
          if (v37 < v30)
            v31 = v36;
          else
            v33 = v34;
        }
        while (v33);
      }
      v38 = v31 + 1;
    }
    *(_QWORD *)(*(_QWORD *)(result - 8) + 72) = *v38 + 56;
    if (v32)
    {
      v39 = (_QWORD *)a3[4];
      v40 = &v39[2 * v32];
      do
      {
        v42 = *v39;
        v41 = (_QWORD *)v39[1];
        v43 = (_QWORD *)(*v39 + 56);
        v44 = v41 + 7;
        v45 = *v43 & 1;
        v41[7] = v41[7] & 0xFFFFFFFFFFFFFFFELL | v45;
        v46 = *v43 & 0xFFFFFFFFFFFFFFFELL;
        if (v46)
        {
          v47 = a3 + 7;
          if (a3[6] != v46 - 56)
          {
            v48 = (_QWORD *)a3[4];
            v49 = a3[5];
            while (v49)
            {
              v50 = v49 >> 1;
              v51 = &v48[2 * (v49 >> 1)];
              v53 = *v51;
              v52 = v51 + 2;
              v49 += ~(v49 >> 1);
              if (v53 < v46 - 56)
                v48 = v52;
              else
                v49 = v50;
            }
            v47 = v48 + 1;
          }
          v54 = *v47;
          *v44 = v45 | (v54 + 56);
          if (*(_QWORD **)(v46 + 8) == v43)
          {
            *(_QWORD *)(v54 + 64) = v44;
          }
          else if (*(_QWORD **)(v46 + 16) == v43)
          {
            *(_QWORD *)(v54 + 72) = v44;
          }
        }
        else
        {
          *v44 = v45;
        }
        if (!*(_QWORD *)(v42 + 64))
          v41[8] = 0;
        if (!*(_QWORD *)(v42 + 72))
          v41[9] = 0;
        v39 += 2;
      }
      while (v39 != v40);
    }
  }
  else
  {
    *(_QWORD *)(v5 + 56) = 0;
    *(_QWORD *)(v5 + 64) = v6;
    *(_QWORD *)(*(_QWORD *)(result - 8) + 72) = *(_QWORD *)(result - 8) + 56;
  }
  return boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>::left>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::left,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::copy_(result, a2, a3);
}

void boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::clone<boost::multi_index::detail::copy_map_value_copier>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  std::string *v6;
  std::string *v7;
  std::string::size_type v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v4);
  *v5 = a2;
  v6 = (std::string *)operator new(0x50uLL);
  v7 = v6;
  v5[1] = v6;
  v8 = *(_QWORD *)(a2 + 24);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v4 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v7[1].__r_.__value_.__r.__words[0] = v8;
  v9 = v4 + 1;
  *(_QWORD *)(a1 + 40) = v4 + 1;
  if (v4 + 1 == *(_QWORD *)(a1 + 8))
  {
    v10 = 126 - 2 * __clz(v9);
    if (v4 == -1)
      v11 = 0;
    else
      v11 = v10;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(*(unint64_t **)(a1 + 32), (unint64_t *)(*(_QWORD *)(a1 + 32) + 16 * v9), (uint64_t)&v12, v11, 1);
  }
}

void sub_191CE9D84(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  operator delete(*(void **)(*(_QWORD *)(v1 + 32) + 16 * *(_QWORD *)(v1 + 40) + 8));
  __cxa_rethrow();
}

void sub_191CE9DA0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  __int128 *v16;
  char v17;
  BOOL v18;
  __int128 *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;

unint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = v4[2];
        if (v6 < *v4)
        {
          v7 = v4[3];
          v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8)
              break;
            v9 = *(unint64_t *)((char *)result + v8 - 16);
            v8 -= 16;
            if (v6 >= v9)
            {
              v10 = (unint64_t *)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *v10 = v6;
          v10[1] = v7;
        }
        v2 = v5 + 2;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(__int128 *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = *a2;
  v4 = *a3;
  if (*a2 < *(_QWORD *)a1)
  {
    if (v4 < v3)
    {
      v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (*a3 >= *a2)
      return 1;
    v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (*a2 >= *(_QWORD *)a1)
      return 1;
    v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  __int128 v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v11;

  v2 = *(_OWORD *)a1;
  v3 = *a1;
  if (*a1 >= *(a2 - 2))
  {
    v6 = a1 + 2;
    do
    {
      v4 = v6;
      if (v6 >= a2)
        break;
      v6 += 2;
    }
    while (v3 >= *v4);
  }
  else
  {
    v4 = a1;
    do
    {
      v5 = v4[2];
      v4 += 2;
    }
    while (v3 >= v5);
  }
  if (v4 < a2)
  {
    do
    {
      v7 = *(a2 - 2);
      a2 -= 2;
    }
    while (v3 < v7);
  }
  while (v4 < a2)
  {
    v11 = *(_OWORD *)v4;
    *(_OWORD *)v4 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v11;
    do
    {
      v8 = v4[2];
      v4 += 2;
    }
    while (v3 >= v8);
    do
    {
      v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (v3 < v9);
  }
  if (v4 - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v4 - 1);
  *((_OWORD *)v4 - 1) = v2;
  return v4;
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,std::__less<void,void> &>(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  unint64_t v4;
  unint64_t v5;
  __int128 *v6;
  __int128 *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;

  v2 = 0;
  v3 = *a1;
  v4 = *(_QWORD *)a1;
  do
    v5 = *(_QWORD *)&a1[++v2];
  while (v5 < v4);
  v6 = &a1[v2];
  v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v6 >= a2)
        break;
      v9 = *((_QWORD *)a2-- - 2);
    }
    while (v9 >= v4);
  }
  else
  {
    do
      v8 = *((_QWORD *)a2-- - 2);
    while (v8 >= v4);
  }
  if (v6 < a2)
  {
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      v12 = *v10;
      *v10 = *v11;
      *v11 = v12;
      do
        v13 = *((_QWORD *)v10++ + 2);
      while (v13 < v4);
      do
        v14 = *((_QWORD *)v11-- - 2);
      while (v14 >= v4);
    }
    while (v10 < v11);
    v7 = v10 - 1;
  }
  if (v7 != a1)
    *a1 = *v7;
  *v7 = v3;
  return v7;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (*(a2 - 2) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (*v9 < *v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (unint64_t *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(__int128 *a1, unint64_t *a2, unint64_t *a3, _OWORD *a4)
{
  __n128 result;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, a2, a3);
  if (*(_QWORD *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < *a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(_QWORD *)a1)
      {
        result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(__int128 *a1, unint64_t *a2, unint64_t *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, a2, a3, a4).n128_u64[0];
  if (a5->n128_u64[0] < a4->n128_u64[0])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (a4->n128_u64[0] < *a3)
    {
      result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (*a3 < *a2)
      {
        result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (*a2 < *(_QWORD *)a1)
        {
          result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  __int128 v30;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*v14 < *a1)
        {
          v15 = *(_OWORD *)v14;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      do
      {
        v17 = 0;
        v30 = *(_OWORD *)a1;
        v18 = a1;
        do
        {
          v19 = &v18[2 * v17 + 2];
          v20 = (2 * v17) | 1;
          v21 = 2 * v17 + 2;
          if (v21 < v16 && *v19 < v19[2])
          {
            v19 += 2;
            v20 = v21;
          }
          *(_OWORD *)v18 = *(_OWORD *)v19;
          v18 = v19;
          v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_OWORD *)v19 = v30;
        }
        else
        {
          *(_OWORD *)v19 = *(_OWORD *)v6;
          *(_OWORD *)v6 = v30;
          v22 = (char *)v19 - (char *)a1 + 16;
          if (v22 >= 17)
          {
            v23 = (((unint64_t)v22 >> 4) - 2) >> 1;
            v24 = &a1[2 * v23];
            v25 = *v19;
            if (*v24 < *v19)
            {
              v26 = v19[1];
              do
              {
                v27 = v19;
                v19 = v24;
                *(_OWORD *)v27 = *(_OWORD *)v24;
                if (!v23)
                  break;
                v23 = (v23 - 1) >> 1;
                v24 = &a1[2 * v23];
              }
              while (*v24 < v25);
              *v19 = v25;
              v19[1] = v26;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (unint64_t *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        if (*v8 < v8[2])
        {
          v10 = v8[2];
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *a4;
      if (v10 >= *a4)
      {
        v12 = a4[1];
        do
        {
          v13 = a4;
          a4 = v8;
          *(_OWORD *)v13 = *(_OWORD *)v8;
          if (v5 < v7)
            break;
          v14 = (2 * v7) | 1;
          v8 = (unint64_t *)(result + 16 * v14);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v15 = *v8;
            v7 = v14;
          }
          else
          {
            v15 = *v8;
            if (*v8 >= v8[2])
            {
              v7 = v14;
            }
            else
            {
              v15 = v8[2];
              v8 += 2;
            }
          }
        }
        while (v15 >= v11);
        *a4 = v11;
        a4[1] = v12;
      }
    }
  }
  return result;
}

uint64_t boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *(_QWORD **)result;
  v2 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v2)
  {
    do
    {
      *(_QWORD *)result = v2;
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2);
  }
  else
  {
    v3 = (_QWORD *)(*v1 & 0xFFFFFFFFFFFFFFFELL);
    if (v1 == (_QWORD *)v3[2])
    {
      do
      {
        v5 = v3;
        *(_QWORD *)result = v3;
        v3 = (_QWORD *)(*v3 & 0xFFFFFFFFFFFFFFFELL);
      }
      while (v5 == (_QWORD *)v3[2]);
      v4 = (_QWORD *)v5[2];
    }
    else
    {
      v4 = 0;
    }
    if (v4 != v3)
      *(_QWORD *)result = v3;
  }
  return result;
}

unint64_t boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>::left>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::left,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::copy_(unint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  _QWORD *v52;
  unint64_t v53;

  v3 = *(_QWORD *)(a2 - 8);
  v4 = *(_QWORD *)(v3 + 32);
  v5 = *(_QWORD *)(result - 8);
  v6 = (unint64_t *)(v5 + 32);
  if (v4 > 1)
  {
    *v6 = *v6 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v3 + 32) & 1;
    v7 = *(_QWORD *)(v3 + 32);
    v8 = (v7 & 0xFFFFFFFFFFFFFFFELL) - 32;
    v9 = (v7 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v10 = v4 & 1;
    if (v9)
      v11 = 0;
    else
      v11 = v8;
    v12 = a3[6];
    if (v12 == v11)
    {
      v19 = a3 + 7;
    }
    else
    {
      v13 = (_QWORD *)a3[4];
      v14 = a3[5];
      while (v14)
      {
        v15 = v14 >> 1;
        v16 = &v13[2 * (v14 >> 1)];
        v18 = *v16;
        v17 = v16 + 2;
        v14 += ~(v14 >> 1);
        if (v18 < v11)
          v13 = v17;
        else
          v14 = v15;
      }
      v19 = v13 + 1;
    }
    *v6 = v10 | (*v19 + 32);
    v20 = *(_QWORD *)(v3 + 40);
    v21 = v20 - 32;
    if (!v20)
      v21 = 0;
    if (v12 == v21)
    {
      v28 = a3 + 7;
    }
    else
    {
      v22 = (_QWORD *)a3[4];
      v23 = a3[5];
      while (v23)
      {
        v24 = v23 >> 1;
        v25 = &v22[2 * (v23 >> 1)];
        v27 = *v25;
        v26 = v25 + 2;
        v23 += ~(v23 >> 1);
        if (v27 < v21)
          v22 = v26;
        else
          v23 = v24;
      }
      v28 = v22 + 1;
    }
    *(_QWORD *)(v5 + 40) = *v28 + 32;
    v29 = *(_QWORD *)(*(_QWORD *)(a2 - 8) + 48);
    if (v29)
      v30 = v29 - 32;
    else
      v30 = 0;
    if (a3[6] == v30)
    {
      v38 = a3 + 7;
      v32 = a3[5];
    }
    else
    {
      v31 = (_QWORD *)a3[4];
      v32 = a3[5];
      if (v32)
      {
        v33 = a3[5];
        do
        {
          v34 = v33 >> 1;
          v35 = &v31[2 * (v33 >> 1)];
          v37 = *v35;
          v36 = v35 + 2;
          v33 += ~(v33 >> 1);
          if (v37 < v30)
            v31 = v36;
          else
            v33 = v34;
        }
        while (v33);
      }
      v38 = v31 + 1;
    }
    *(_QWORD *)(*(_QWORD *)(result - 8) + 48) = *v38 + 32;
    if (v32)
    {
      v39 = (_QWORD *)a3[4];
      v40 = &v39[2 * v32];
      do
      {
        v42 = *v39;
        v41 = (_QWORD *)v39[1];
        v43 = (_QWORD *)(*v39 + 32);
        v44 = v41 + 4;
        v45 = *v43 & 1;
        result = v41[4] & 0xFFFFFFFFFFFFFFFELL | v45;
        v41[4] = result;
        v46 = *v43 & 0xFFFFFFFFFFFFFFFELL;
        if (v46)
        {
          v47 = a3 + 7;
          if (a3[6] != v46 - 32)
          {
            v48 = (_QWORD *)a3[4];
            v49 = a3[5];
            while (v49)
            {
              v50 = v49 >> 1;
              v51 = &v48[2 * (v49 >> 1)];
              v53 = *v51;
              v52 = v51 + 2;
              v49 += ~(v49 >> 1);
              if (v53 < v46 - 32)
                v48 = v52;
              else
                v49 = v50;
            }
            v47 = v48 + 1;
          }
          result = *v47;
          *v44 = v45 | (result + 32);
          if (*(_QWORD **)(v46 + 8) == v43)
          {
            *(_QWORD *)(result + 40) = v44;
          }
          else if (*(_QWORD **)(v46 + 16) == v43)
          {
            *(_QWORD *)(result + 48) = v44;
          }
        }
        else
        {
          *v44 = v45;
        }
        if (!*(_QWORD *)(v42 + 40))
          v41[5] = 0;
        if (!*(_QWORD *)(v42 + 48))
          v41[6] = 0;
        v39 += 2;
      }
      while (v39 != v40);
    }
  }
  else
  {
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = v6;
    *(_QWORD *)(*(_QWORD *)(result - 8) + 48) = *(_QWORD *)(result - 8) + 32;
  }
  return result;
}

uint64_t boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 64) && *(_QWORD *)(a1 + 40))
  {
    v2 = 0;
    v3 = 8;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v3);
      if (*(char *)(v4 + 23) < 0)
      {
        operator delete(*(void **)v4);
        v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v3);
      }
      operator delete((void *)v4);
      ++v2;
      v3 += 16;
    }
    while (v2 < *(_QWORD *)(a1 + 40));
  }
  if (*(_QWORD *)(a1 + 24))
    operator delete(*(void **)(a1 + 32));
  return a1;
}

const void **boost::bimaps::container_adaptor::associative_container_adaptor<boost::multi_index::detail::ordered_index<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>::left>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::left,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>,boost::bimaps::detail::map_view_iterator<boost::bimaps::relation::member_at::left,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>>,boost::bimaps::detail::const_map_view_iterator<boost::bimaps::relation::member_at::left,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>>,std::string const,boost::bimaps::container_adaptor::support::iterator_facade_to_base<boost::bimaps::detail::map_view_iterator<boost::bimaps::relation::member_at::left,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>>,boost::bimaps::detail::const_map_view_iterator<boost::bimaps::relation::member_at::left,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>>>,mpl_::na,boost::bimaps::relation::detail::pair_to_relation_functor<boost::bimaps::relation::member_at::left,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>,boost::bimaps::relation::support::get_pair_functor<boost::bimaps::relation::member_at::left,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>,mpl_::na,boost::mpl::v_item<boost::bimaps::container_adaptor::detail::iterator_from_base_identity<boost::iterators::reverse_iterator<boost::multi_index::detail::bidir_node_iterator<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>>,boost::bimaps::detail::reverse_map_view_iterator<boost::bimaps::relation::member_at::left,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>>,boost::iterators::reverse_iterator<boost::multi_index::detail::bidir_node_iterator<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>>,boost::bimaps::detail::const_reverse_map_view_iterator<boost::bimaps::relation::member_at::left,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>>>,boost::mpl::vector<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,1>>::find<std::string>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  const void **v3;
  std::string __p;

  v2 = *a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v3 = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>::left>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::left,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::find<std::string>(v2, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v3;
}

void sub_191CEADA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const void **boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>::left>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::left,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  const void **v6;
  const void **v7;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = *(_QWORD *)(v2 + 32) & 0xFFFFFFFFFFFFFFFELL;
  if (v3)
  {
    v5 = a1 + 1;
    v6 = *(const void ***)(a1 - 8);
    do
    {
      while (1)
      {
        v7 = (const void **)(v3 - 32);
        if (std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 - 32), a2))
          break;
        v3 = *(_QWORD *)(v3 + 8);
        v6 = v7;
        if (!v3)
          goto LABEL_7;
      }
      v3 = *(_QWORD *)(v3 + 16);
    }
    while (v3);
    v7 = v6;
LABEL_7:
    if (v7 != (const void **)v2 && !std::less<std::string>::operator()[abi:ne180100](v5, a2, v7))
      return v7;
  }
  return (const void **)v2;
}

unint64_t boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>,long,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<long>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::find<long>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  result = *(_QWORD *)(a1 - 8);
  v3 = *(_QWORD *)(result + 56) & 0xFFFFFFFFFFFFFFFELL;
  if (v3)
  {
    v4 = *a2;
    v5 = result;
    do
    {
      while (*(_QWORD *)(v3 - 32) < v4)
      {
        v3 = *(_QWORD *)(v3 + 16);
        if (!v3)
          goto LABEL_7;
      }
      v5 = v3 - 56;
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3);
LABEL_7:
    if (v5 != result && v4 >= *(_QWORD *)(v5 + 24))
      return v5;
  }
  return result;
}

_QWORD *corelm::OutOfVocabularyError::OutOfVocabularyError(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  *a1 = &unk_1E2DF1920;
  corelm::util::strCat<char [23],std::string_view>((uint64_t)"OutOfVocabularyError: ", (uint64_t)v5);
  return a1;
}

void sub_191CEAF08(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t corelm::util::strCat<char [23],std::string_view>(uint64_t a1, uint64_t a2)
{
  _QWORD *v5;
  _QWORD v6[2];
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  v6[0] = a1;
  v6[1] = a2;
  v5 = v7;
  corelm::util::tuple_for_each<std::tuple<char const(&)[23],std::string_view const&>,std::string corelm::util::strCat<char [23],std::string_view>(char [23],std::string_view const&)::{lambda(std::tuple<char const(&)[23],std::string_view const&> const&)#1},0ul>((uint64_t)v6, &v5);
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19401E928](&v9);
}

void sub_191CEAFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t corelm::OutOfVocabularyError::what(corelm::OutOfVocabularyError *this)
{
  uint64_t result;

  result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

_QWORD *corelm::util::tuple_for_each<std::tuple<char const(&)[23],std::string_view const&>,std::string corelm::util::strCat<char [23],std::string_view>(char [23],std::string_view const&)::{lambda(std::tuple<char const(&)[23],std::string_view const&> const&)#1},0ul>(uint64_t a1, _QWORD **a2)
{
  const char *v4;
  _QWORD *v5;
  size_t v6;

  v4 = *(const char **)a1;
  v5 = *a2;
  v6 = strlen(*(const char **)a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v4, v6);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
}

unint64_t boost::bimaps::detail::non_mutable_data_unique_map_view_access<boost::bimaps::views::map_view<boost::bimaps::relation::member_at::right,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>>,boost::bimaps::relation::member_at::right,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>>::at<long>(uint64_t *a1, std::logic_error_vtbl **a2)
{
  uint64_t v3;
  unint64_t result;
  std::logic_error v5;

  v3 = *a1;
  v5.__vftable = *a2;
  result = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>,long,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<long>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<std::string,long,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<long const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::find<long>(v3, (uint64_t *)&v5);
  if (*(_QWORD *)(*a1 - 8) == result)
  {
    std::logic_error::logic_error(&v5, "bimap<>: invalid key");
    v5.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
    boost::throw_exception<std::out_of_range>(&v5);
  }
  return result;
}

void boost::throw_exception<std::out_of_range>(const std::logic_error *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::out_of_range>::wrapexcept((uint64_t)exception, a1);
}

void sub_191CEB184(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<std::out_of_range>::wrapexcept(uint64_t a1, const std::logic_error *a2)
{
  *(_QWORD *)a1 = &unk_1E2DF1600;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &unk_1E2DF1588;
  *(_QWORD *)(a1 + 8) = &unk_1E2DF15B8;
  *(_QWORD *)(a1 + 24) = &unk_1E2DF15E0;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t boost::wrapexcept<std::out_of_range>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E2DF1630;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x19401E5A4](a1 + 8);
  return a1;
}

uint64_t boost::wrapexcept<std::out_of_range>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E2DF1600;
  std::logic_error::logic_error((std::logic_error *)(v2 + 8), (const std::logic_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = MEMORY[0x1E0DE5028] + 16;
  *(_QWORD *)(v2 + 24) = &unk_1E2DF1630;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &unk_1E2DF1588;
  *(_QWORD *)(v2 + 8) = &unk_1E2DF15B8;
  *(_QWORD *)(v2 + 24) = &unk_1E2DF15E0;
  boost::exception_detail::copy_boost_exception(v2 + 24, a1 + 24);
  return v2;
}

void boost::wrapexcept<std::out_of_range>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::out_of_range>::wrapexcept((uint64_t)exception, a1);
}

void sub_191CEB38C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::out_of_range>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E2DF1630;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x19401E5A4](a1 + 8);
  JUMPOUT(0x19401E994);
}

void `non-virtual thunk to'boost::wrapexcept<std::out_of_range>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E2DF1630;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  JUMPOUT(0x19401E5A4);
}

{
  *(_QWORD *)(a1 + 16) = &unk_1E2DF1630;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  MEMORY[0x19401E5A4](a1);
  JUMPOUT(0x19401E994);
}

void `non-virtual thunk to'boost::wrapexcept<std::out_of_range>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1E2DF1630;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  JUMPOUT(0x19401E5A4);
}

{
  *a1 = &unk_1E2DF1630;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  MEMORY[0x19401E5A4](a1 - 2);
  JUMPOUT(0x19401E994);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *a1 = 0;
  return a1;
}

uint64_t boost::wrapexcept<std::out_of_range>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E2DF1600;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE5028] + 16;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_1E2DF1630;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &unk_1E2DF1588;
  *(_QWORD *)(a1 + 8) = &unk_1E2DF15B8;
  *(_QWORD *)(a1 + 24) = &unk_1E2DF15E0;
  return a1;
}

uint64_t boost::exception_detail::copy_boost_exception(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v7);
    v5 = v7;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_191CEB6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  _Unwind_Resume(exception_object);
}

uint64_t corelm::TokenIDMap::copyTokenToID@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  std::string::size_type v5;
  __int128 v6;
  std::string __p;
  uint64_t v8;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v3 = *(_QWORD *)(*(_QWORD *)(this + 48) - 8);
  v4 = *(_QWORD *)(v3 + 40);
  if (v4)
    v5 = v4 - 32;
  else
    v5 = 0;
  while (v5 != v3)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
    }
    else
    {
      v6 = *(_OWORD *)v5;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
    }
    v8 = *(_QWORD *)(v5 + 24);
    std::__tree<std::__value_type<std::string,long>,std::__map_value_compare<std::string,std::__value_type<std::string,long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long>>>::__emplace_unique_key_args<std::string,std::string const&,long const&>((uint64_t **)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p, &v8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = v5 + 32;
    this = boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&__p);
    if (__p.__r_.__value_.__r.__words[0])
      v5 = __p.__r_.__value_.__r.__words[0] - 32;
    else
      v5 = 0;
  }
  return this;
}

void sub_191CEB858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  std::__tree<std::string>::destroy(v14, *(char **)(v14 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,long>,std::__map_value_compare<std::string,std::__value_type<std::string,long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long>>>::__emplace_unique_key_args<std::string,std::string const&,long const&>(uint64_t **a1, const void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t **v7;
  uint64_t *result;
  uint64_t *v9;
  uint64_t v10;

  v7 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  result = *v7;
  if (!*v7)
  {
    std::__tree<std::__value_type<std::string,long>,std::__map_value_compare<std::string,std::__value_type<std::string,long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long>>>::__construct_node<std::string const&,long const&>((uint64_t)a1, a3, a4, (uint64_t)&v9);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,long>,std::__map_value_compare<std::string,std::__value_type<std::string,long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long>>>::__construct_node<std::string const&,long const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;

  v7 = a1 + 8;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  v9 = (std::string *)(v8 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v8 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_QWORD *)v8 + 7) = *a3;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_191CEB99C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t corelm::TokenIDMap::copyIDToToken@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  std::string::size_type v5;
  __int128 v6;
  std::string __p;
  uint64_t v8;

  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  v3 = *(_QWORD *)(*(_QWORD *)(this + 48) - 8);
  v4 = *(_QWORD *)(v3 + 40);
  if (v4)
    v5 = v4 - 32;
  else
    v5 = 0;
  while (v5 != v3)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
    }
    else
    {
      v6 = *(_OWORD *)v5;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
    }
    v8 = *(_QWORD *)(v5 + 24);
    std::__tree<std::__value_type<long,std::string>,std::__map_value_compare<long,std::__value_type<long,std::string>,std::less<long>,true>,std::allocator<std::__value_type<long,std::string>>>::__emplace_unique_key_args<long,long const&,std::string const&>((uint64_t)a2, &v8, &v8, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = v5 + 32;
    this = boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&__p);
    if (__p.__r_.__value_.__r.__words[0])
      v5 = __p.__r_.__value_.__r.__words[0] - 32;
    else
      v5 = 0;
  }
  return this;
}

void sub_191CEBA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  std::__tree<std::__value_type<long,std::string>,std::__map_value_compare<long,std::__value_type<long,std::string>,std::less<long>,true>,std::allocator<std::__value_type<long,std::string>>>::destroy(v14, *(char **)(v14 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<long,std::string>,std::__map_value_compare<long,std::__value_type<long,std::string>,std::less<long>,true>,std::allocator<std::__value_type<long,std::string>>>::__emplace_unique_key_args<long,long const&,std::string const&>(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v11;

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<long,std::string>,std::__map_value_compare<long,std::__value_type<long,std::string>,std::less<long>,true>,std::allocator<std::__value_type<long,std::string>>>::__construct_node<long const&,std::string const&>(a1, a3, a4, (uint64_t)&v11);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

void std::__tree<std::__value_type<long,std::string>,std::__map_value_compare<long,std::__value_type<long,std::string>,std::less<long>,true>,std::allocator<std::__value_type<long,std::string>>>::__construct_node<long const&,std::string const&>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;

  v7 = a1 + 8;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *((_QWORD *)v8 + 4) = *a2;
  v9 = (std::string *)(v8 + 40);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_191CEBC08(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long,std::string>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long,std::string>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 63) < 0)
      operator delete(__p[5]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

std::vector<std::string> **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](std::vector<std::string> **a1, __int128 *a2)
{
  std::vector<std::string> *v4;
  std::vector<std::string>::pointer end;
  std::vector<std::string> *v6;
  std::allocator<std::string> *p_end_cap;
  std::string *v8;
  std::string *value;
  __int128 v10;
  std::string *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::string *v16;
  std::string *v17;
  __int128 v18;
  std::__split_buffer<std::string> __v;

  v4 = *a1;
  end = (*a1)->__end_;
  v6 = *a1;
  value = v6->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&v6->__end_cap_;
  v8 = value;
  if (end >= value)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v4->__begin_) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v4->__begin_) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v15)
      v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v15);
    else
      v16 = 0;
    v17 = v16 + v12;
    __v.__first_ = v16;
    __v.__begin_ = v17;
    __v.__end_cap_.__value_ = &v16[v15];
    v18 = *a2;
    v17->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    __v.__end_ = v17 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(v4, &__v);
    v11 = v4->__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    v10 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v11 = end + 1;
    v4->__end_ = end + 1;
  }
  v4->__end_ = v11;
  return a1;
}

void sub_191CEBDA0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void corelm::util::mapFn<std::vector<std::string>,corelm::AbstractVocabulary::tokensToIDs(std::vector<std::string> const&)::{lambda(std::vector<std::string>)#1}>(__int128 **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v3;
  __int128 *v4;
  __int128 v6;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  uint64_t v10;
  _QWORD *i;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *a1;
  v4 = a1[1];
  for (i = a3; v3 != v4; v3 = (__int128 *)((char *)v3 + 24))
  {
    if (*((char *)v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
    }
    else
    {
      v6 = *v3;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v10 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)a2 + 32))(a2, p_p, size);
    std::back_insert_iterator<std::vector<long>>::operator=[abi:ne180100]((uint64_t *)&i, &v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_191CEBE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void *v16;

  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::back_insert_iterator<std::vector<long>>::operator=[abi:ne180100](uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = *a1;
  v5 = *(_QWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_QWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v6, v12);
      v8 = *(_QWORD **)v4;
      v5 = *(_QWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v7 = v14 + 8;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

_QWORD *corelm::util::InFile::InFile<corelm::util::Path>(_QWORD *a1, uint64_t a2)
{
  void *v4;
  std::string __p;

  v4 = &unk_1E2DF1AB8;
  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    __p = *(std::string *)(a2 + 8);
  corelm::util::File::File((uint64_t)a1, (uint64_t)&v4, MEMORY[0x1E0DE4C48]);
  v4 = &unk_1E2DF1AB8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = &unk_1E2DF1AD0;
  return a1;
}

void sub_191CEC04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t corelm::util::File::File(uint64_t a1, uint64_t a2, std::ios_base::openmode *a3)
{
  __int128 *v6;
  __int128 v7;
  std::fstream *v8;
  std::string __p;

  *(_QWORD *)a1 = &unk_1E2DF1AB8;
  v6 = (__int128 *)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v7 = *v6;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v7;
  }
  *(_QWORD *)a1 = &unk_1E2DF1A90;
  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    __p = *(std::string *)v6;
  v8 = (std::fstream *)operator new();
  std::fstream::basic_fstream(v8, &__p, *a3);
  *(_QWORD *)(a1 + 32) = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_191CEC164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;
  uint64_t v16;

  *(_QWORD *)v14 = v16 + 16;
  if (*(char *)(v14 + 31) < 0)
    operator delete(*v15);
  _Unwind_Resume(exception_object);
}

std::fstream *__cdecl std::fstream::basic_fstream(std::fstream *this, const std::string *__s, std::ios_base::openmode __mode)
{
  char *extbuf_min;

  extbuf_min = this->__sb_.__extbuf_min_;
  *(&this[1].__sb_.__st_._mbstateL + 2) = (uint64_t)&unk_1E2DEF370;
  this->__sb_.__extbuf_ = (char *)&unk_1E2DEF348;
  this->__sb_.__extbufnext_ = 0;
  std::ios_base::init((std::ios_base *)(&this[1].__sb_.__st_._mbstateL + 2), this->__sb_.__extbuf_min_);
  *(&this[1].__sb_.__st_last_._mbstateL + 3) = 0;
  *((_DWORD *)&this[1].__sb_.__st_last_._mbstateL + 8) = -1;
  MEMORY[0x19401E700](extbuf_min);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)this + *((_QWORD *)this->__sb_.__extbuf_ - 3)), *(_DWORD *)&this->__sb_.__extbuf_min_[*((_QWORD *)this->__sb_.__extbuf_ - 3) + 8] | 4);
  return this;
}

void sub_191CEC29C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x19401E928](v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this)))(std::fstream *__hidden this)
{
  _QWORD *v2;

  v2 = a1 + 54;
  MEMORY[0x19401E70C](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x19401E928](v2);
  return a1;
}

void std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  _QWORD *v1;

  v1 = a1 + 54;
  MEMORY[0x19401E70C](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x19401E928](v1);
  JUMPOUT(0x19401E994);
}

void `non-virtual thunk to'std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  MEMORY[0x19401E70C](a1 + 1);
  std::iostream::~basic_iostream();
  JUMPOUT(0x19401E928);
}

{
  _QWORD *v1;

  v1 = a1 + 52;
  MEMORY[0x19401E70C](a1 + 1);
  std::iostream::~basic_iostream();
  MEMORY[0x19401E928](v1);
  JUMPOUT(0x19401E994);
}

void `virtual thunk to'std::fstream::~fstream(_QWORD *a1)
{
  void (__cdecl ***v1)(std::fstream *__hidden);

  v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(_QWORD *)(*a1 - 24));
  MEMORY[0x19401E70C](v1 + 3);
  std::iostream::~basic_iostream();
  JUMPOUT(0x19401E928);
}

{
  void (__cdecl ***v1)(std::fstream *__hidden);

  v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(_QWORD *)(*a1 - 24));
  MEMORY[0x19401E70C](v1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x19401E928](v1 + 54);
  JUMPOUT(0x19401E994);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_191CEC698(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void corelm::CharacterTokenizer::~CharacterTokenizer(corelm::CharacterTokenizer *this)
{
  JUMPOUT(0x19401E994);
}

void corelm::CharacterTokenizer::tokenize(std::string::value_type *a1@<X1>, uint64_t a2@<X2>, std::string *a3@<X8>)
{
  uint64_t v4;
  std::string v6;

  memset(&v6, 0, sizeof(v6));
  if (a2)
  {
    v4 = a2;
    do
    {
      std::string::push_back(&v6, *a1++);
      --v4;
    }
    while (v4);
  }
  corelm::util::getChars((uint64_t *)&v6, a3);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_191CEC73C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void corelm::CharacterTokenizer::detokenize(uint64_t *a1@<X1>, std::string *a2@<X8>)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "");
  corelm::util::join<std::vector<std::string> const&>(a1, (uint64_t)__p, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_191CEC7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t corelm::util::join<std::vector<std::string> const&>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string::size_type size;
  uint64_t v14;
  _QWORD v16[11];
  char v17;
  uint64_t v18;
  std::string __str;
  char v20;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v6 = *a1;
  v7 = a1[1];
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
  if (v8 == 1)
  {
    v9 = *(char *)(v6 + 23);
    if (v9 >= 0)
      v10 = *a1;
    else
      v10 = *(_QWORD *)v6;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(v6 + 23);
    else
      v11 = *(_QWORD *)(v6 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v10, v11);
    std::stringbuf::str();
  }
  else if (v8)
  {
    if (*(char *)(a2 + 23) >= 0)
      v12 = a2;
    else
      v12 = *(_QWORD *)a2;
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>,std::ostream_iterator<std::string const&,char,std::char_traits<char>>,0>(v6, v7, (uint64_t)v16, v12, (uint64_t *)&__str);
    std::stringbuf::str();
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    v14 = *(unsigned __int8 *)(a2 + 23);
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(a2 + 8);
    std::string::basic_string(a3, &__str, 0, size - v14, (std::allocator<char> *)&v20);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  else
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
  v16[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v16[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19401E928](&v18);
}

void sub_191CEC94C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 - 41) < 0)
    operator delete(*(void **)(v2 - 64));
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>,std::ostream_iterator<std::string const&,char,std::char_traits<char>>,0>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;

  v5 = result;
  v8 = a3;
  v9 = a4;
  if (result != a2)
  {
    do
    {
      result = std::ostream_iterator<std::string const&,char,std::char_traits<char>>::operator=[abi:ne180100]((uint64_t)&v8, v5);
      v5 += 24;
    }
    while (v5 != a2);
    a3 = v8;
    a4 = v9;
    v5 = a2;
  }
  *a5 = v5;
  a5[1] = a3;
  a5[2] = a4;
  return result;
}

uint64_t std::ostream_iterator<std::string const&,char,std::char_traits<char>>::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, a2, v5);
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = strlen(*(const char **)(a1 + 8));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)a1, v6, v7);
  }
  return a1;
}

void corelm::WhitespaceTokenizer::~WhitespaceTokenizer(corelm::WhitespaceTokenizer *this)
{
  JUMPOUT(0x19401E994);
}

void corelm::WhitespaceTokenizer::tokenize(uint64_t a1@<X1>, unint64_t a2@<X2>, std::vector<std::string> *a3@<X8>)
{
  std::string::size_type v4;
  std::string::size_type size;
  uint64_t v6;
  std::string::value_type *v7;
  std::string v8;
  std::vector<std::string> v9;
  std::string v10;
  std::vector<std::string> *v11;

  corelm::util::split(a1, a2, " ", 1, &v9);
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, (__int128 *)v9.__begin_, (__int128 *)v9.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v9.__end_ - (char *)v9.__begin_) >> 3));
  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  size = v8.__r_.__value_.__l.__size_;
  v4 = v8.__r_.__value_.__r.__words[0];
  v11 = a3;
  while (v4 != size)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      v7 = *(std::string::value_type **)v4;
      v6 = *(_QWORD *)(v4 + 8);
    }
    else
    {
      v6 = *(unsigned __int8 *)(v4 + 23);
      v7 = (std::string::value_type *)v4;
    }
    memset(&v10, 0, sizeof(v10));
    for (; v6; --v6)
      std::string::push_back(&v10, *v7++);
    std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&v11, (__int128 *)&v10);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    v4 += 24;
  }
  v10.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  v10.__r_.__value_.__r.__words[0] = (std::string::size_type)&v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
}

void sub_191CECB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  *(_QWORD *)(v21 - 56) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 56));
  _Unwind_Resume(a1);
}

void corelm::WhitespaceTokenizer::detokenize(uint64_t *a1@<X1>, std::string *a2@<X8>)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, " ");
  corelm::util::join<std::vector<std::string> const&>(a1, (uint64_t)__p, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_191CECC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t corelm::util::tuple_for_each<std::tuple<char const(&)[18],long const&>,std::string corelm::util::strCat<char [18],long>(char [18],long const&)::{lambda(std::tuple<char const(&)[18],long const&> const&)#1},0ul>(const char **a1, _QWORD **a2)
{
  const char *v2;
  _QWORD *v3;
  size_t v4;

  v2 = *a1;
  v3 = *a2;
  v4 = strlen(*a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v2, v4);
  return std::ostream::operator<<();
}

_QWORD *corelm::util::tuple_for_each<std::tuple<char const(&)[15],std::string const&,char const(&)[21]>,std::string corelm::util::strCat<char [15],std::string,char [21]>(char [15],std::string,char [21] const&)::{lambda(std::tuple<char const(&)[15],std::string const&,char const(&)[21]> const&)#1},0ul>(const char **a1, _QWORD **a2)
{
  const char *v4;
  _QWORD *v5;
  size_t v6;

  v4 = *a1;
  v5 = *a2;
  v6 = strlen(*a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v4, v6);
  return corelm::util::tuple_for_each<std::tuple<char const(&)[15],std::string const&,char const(&)[21]>,std::string corelm::util::strCat<char [15],std::string,char [21]>(char [15],std::string,char [21] const&)::{lambda(std::tuple<char const(&)[15],std::string const&,char const(&)[21]> const&)#1},1ul>((uint64_t)a1, a2);
}

_QWORD *corelm::util::tuple_for_each<std::tuple<char const(&)[15],std::string const&,char const(&)[21]>,std::string corelm::util::strCat<char [15],std::string,char [21]>(char [15],std::string,char [21] const&)::{lambda(std::tuple<char const(&)[15],std::string const&,char const(&)[21]> const&)#1},1ul>(uint64_t a1, _QWORD **a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  size_t v10;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *a2;
  v6 = *(char *)(v4 + 23);
  if (v6 >= 0)
    v7 = v4;
  else
    v7 = *(_QWORD *)v4;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v4 + 23);
  else
    v8 = *(_QWORD *)(v4 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
  v9 = *(const char **)(a1 + 16);
  v10 = strlen(v9);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)v9, v10);
}

void corelm::AbstractPreProcessor::~AbstractPreProcessor(corelm::AbstractPreProcessor *this)
{
  JUMPOUT(0x19401E994);
}

void corelm::AbstractPreProcessor::preProcess(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

void corelm::AbstractPreProcessor::postProcess(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

uint64_t std::ostream_iterator<int &,char,std::char_traits<char>>::operator=[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  size_t v3;

  std::ostream::operator<<();
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = strlen(*(const char **)(a1 + 8));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)a1, v2, v3);
  }
  return a1;
}

_OWORD *std::__tree<std::__value_type<std::string,long>,std::__map_value_compare<std::string,std::__value_type<std::string,long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void std::__split_buffer<int>::push_back(std::__split_buffer<int> *this, std::__split_buffer<int>::value_type *__x)
{
  std::__split_buffer<int>::pointer end;
  std::__split_buffer<int>::pointer begin;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int64_t v14;
  int *v15;
  unint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;
  std::__split_buffer<int>::pointer v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  std::__split_buffer<int>::pointer first;

  end = this->__end_;
  if (end == this->__end_cap_.__value_)
  {
    begin = this->__begin_;
    v6 = (char *)begin - (char *)this->__first_;
    if (begin <= this->__first_)
    {
      if (end == this->__first_)
        v16 = 1;
      else
        v16 = ((char *)end - (char *)this->__first_) >> 1;
      v17 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this->__end_cap_.__value_, v16);
      v19 = (int *)((char *)v17 + (v16 & 0xFFFFFFFFFFFFFFFCLL));
      v20 = this->__begin_;
      end = v19;
      v21 = (char *)this->__end_ - (char *)v20;
      if (v21)
      {
        end = (int *)((char *)v19 + (v21 & 0xFFFFFFFFFFFFFFFCLL));
        v22 = 4 * (v21 >> 2);
        v23 = (int *)((char *)v17 + (v16 & 0xFFFFFFFFFFFFFFFCLL));
        do
        {
          v24 = *v20++;
          *v23++ = v24;
          v22 -= 4;
        }
        while (v22);
      }
      first = this->__first_;
      this->__first_ = v17;
      this->__begin_ = v19;
      this->__end_ = end;
      this->__end_cap_.__value_ = &v17[v18];
      if (first)
      {
        operator delete(first);
        end = this->__end_;
      }
    }
    else
    {
      v7 = v6 >> 2;
      v8 = v6 >> 2 < -1;
      v9 = (v6 >> 2) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &begin[-v12];
      v14 = (char *)end - (char *)begin;
      if (end != begin)
      {
        memmove(&begin[-v12], begin, (char *)end - (char *)begin);
        end = this->__begin_;
      }
      v15 = &end[v11];
      end = (int *)((char *)v13 + v14);
      this->__begin_ = v15;
    }
  }
  *end = *__x;
  this->__end_ = end + 1;
}

std::vector<int>::pointer std::vector<int>::__swap_out_circular_buffer(std::vector<int> *this, std::__split_buffer<int> *__v, std::vector<int>::pointer __p)
{
  int *begin;
  std::vector<int>::pointer v6;
  int *v7;
  std::vector<int>::pointer v8;
  int v9;
  int *end;
  std::__split_buffer<int>::pointer v11;
  int64_t v12;
  int *v13;
  int *v14;
  int *value;

  begin = __v->__begin_;
  v6 = this->__begin_;
  v7 = begin;
  if (this->__begin_ != __p)
  {
    v8 = __p;
    v7 = __v->__begin_;
    do
    {
      v9 = *--v8;
      *--v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  end = this->__end_;
  v11 = __v->__end_;
  v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<int>::pointer)((char *)v11 + v12);
  v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

_QWORD *std::vector<long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_191CED0D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_191CED148(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

CoreNLP::CNNModel **CoreNLP::CNNModelHandler::CNNModelHandler(CoreNLP::CNNModel **a1, uint64_t a2, uint64_t a3, const void **a4, __int128 **a5)
{
  CoreNLP::CNNModel *v6;
  CoreNLP::CNNModel *v7;
  CoreNLP::CNNModel *v8;
  std::logic_error *exception;
  CoreNLP::CNNModel *v11;

  *a1 = 0;
  *((_DWORD *)a1 + 2) = a2;
  CoreNLP::CNNModel::CreateCNNModel(a2, a3, a4, a5, &v11);
  v6 = v11;
  v11 = 0;
  v7 = *a1;
  *a1 = v6;
  if (v7)
  {
    (*(void (**)(CoreNLP::CNNModel *))(*(_QWORD *)v7 + 8))(v7);
    v8 = v11;
    v11 = 0;
    if (v8)
      (*(void (**)(CoreNLP::CNNModel *))(*(_QWORD *)v8 + 8))(v8);
    v6 = *a1;
  }
  if (!v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Cannot load the given model files");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2DEE9A8, MEMORY[0x1E0DE4360]);
  }
  return a1;
}

void sub_191CED238(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

void CoreNLP::CNNModelHandler::~CNNModelHandler(CoreNLP::CNNModelHandler *this)
{
  uint64_t v2;

  NSLog(CFSTR("Dealloced FeatureExtraction"));
  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t CoreNLP::CNNModelHandler::copyFeatureRepresentation(CoreNLP::CNNModelHandler *this, __CFString *a2)
{
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (void *)MEMORY[0x19401EF04]();
  v5 = *(_DWORD *)(*(_QWORD *)this + 44);
  if (v5 == 2)
  {
    v6 = CoreNLP::CNNModelHandler::copyFeatureRepresentationWordBased(this, a2);
  }
  else
  {
    if (v5 != 1)
    {
      v7 = 0;
      goto LABEL_7;
    }
    v6 = CoreNLP::CNNModelHandler::copyFeatureRepresentationCharBased(this, a2);
  }
  v7 = v6;
LABEL_7:
  objc_autoreleasePoolPop(v4);
  return v7;
}

uint64_t CoreNLP::CNNModelHandler::copyFeatureRepresentationCharBased(CoreNLP::CNNModelHandler *this, __CFString *a2)
{
  void **v2;
  unint64_t v3;
  std::vector<std::string>::pointer end;
  std::string::size_type v5;
  std::string::size_type v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  uint64_t v13;
  uint64_t v14;
  std::string v17;
  std::vector<std::string> v18;
  void *__p[2];
  unsigned __int8 v20;
  std::__split_buffer<std::string> __v;
  _BYTE v22[15];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)-[__CFString UTF8String](a2, "UTF8String"));
  memset(&v18, 0, sizeof(v18));
  if ((v20 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v20 & 0x80u) == 0)
    v3 = v20;
  else
    v3 = (unint64_t)__p[1];
  if (v3)
  {
    end = 0;
    do
    {
      v5 = *(unsigned __int8 *)v2;
      if (end >= v18.__end_cap_.__value_)
      {
        v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v18.__begin_) >> 3);
        v8 = v7 + 1;
        if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v18.__end_cap_.__value_ - (char *)v18.__begin_) >> 3) > v8)
          v8 = 0x5555555555555556 * (((char *)v18.__end_cap_.__value_ - (char *)v18.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v18.__end_cap_.__value_ - (char *)v18.__begin_) >> 3) >= 0x555555555555555)
          v9 = 0xAAAAAAAAAAAAAAALL;
        else
          v9 = v8;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v18.__end_cap_;
        if (v9)
          v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v18.__end_cap_, v9);
        else
          v10 = 0;
        v11 = v10 + v7;
        __v.__first_ = v10;
        __v.__begin_ = v11;
        __v.__end_cap_.__value_ = &v10[v9];
        v11->__r_.__value_.__r.__words[0] = v5;
        *((_BYTE *)&v11->__r_.__value_.__s + 23) = 1;
        __v.__end_ = v11 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v18, &__v);
        end = v18.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
      }
      else
      {
        end->__r_.__value_.__r.__words[0] = v5;
        v6 = *(_QWORD *)&v22[7];
        end->__r_.__value_.__l.__size_ = *(_QWORD *)v22;
        *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = v6;
        *((_BYTE *)&end->__r_.__value_.__s + 23) = 1;
        ++end;
      }
      v18.__end_ = end;
      v2 = (void **)((char *)v2 + 1);
      --v3;
    }
    while (v3);
  }
  memset(&__v, 0, 24);
  v12 = (std::string *)std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>((uint64_t *)&__v, (__int128 **)&v18);
  v13 = *(_QWORD *)this;
  __v.__begin_ = v12;
  memset(&v17, 0, sizeof(v17));
  std::vector<std::vector<std::string>>::__init_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>(&v17, (__int128 **)__v.__first_, (__int128 **)v12, 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)__v.__first_) >> 3));
  v14 = CoreNLP::CNNModel::featureRepresentation(v13, (uint64_t *)&v17);
  *(_QWORD *)v22 = &v17;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
  *(_QWORD *)v22 = &__v;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if ((char)v20 < 0)
    operator delete(__p[0]);
  return v14;
}

void sub_191CED58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, void *__p, uint64_t a9, int a10, __int16 a11, char a12, char a13, std::__split_buffer<std::string> *a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__pa, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(v26 - 104) = v25;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 104));
  *(_QWORD *)(v26 - 104) = &a25;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 104));
  *(_QWORD *)(v26 - 104) = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 104));
  if (a24 < 0)
    operator delete(__pa);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::CNNModelHandler::copyFeatureRepresentationWordBased(CoreNLP::CNNModelHandler *this, const __CFString *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  uint64_t v13;

  v8 = 0;
  v9 = &v8;
  v10 = 0x3052000000;
  v11 = __Block_byref_object_copy__5;
  v12 = __Block_byref_object_dispose__5;
  v13 = 0;
  v13 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v4 = NLTokenizerCreate(0, 0, 0);
  CFStringGetLength(a2);
  NLTokenizerSetString((uint64_t)v4);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___ZN7CoreNLP15CNNModelHandler34copyFeatureRepresentationWordBasedEPK10__CFString_block_invoke;
  v7[3] = &unk_1E2DF5138;
  v7[4] = a2;
  v7[5] = &v8;
  NLTokenizerEnumerateTokens((uint64_t)v4, (uint64_t)v7);
  NLTokenizerRelease(v4);
  v5 = CoreNLP::CNNModelHandler::copyFeatureRepresentationWithTokens(this, (const __CFArray *)v9[5]);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_191CED710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::CNNModelHandler::copyFeatureRepresentationWithTokens(CoreNLP::CNNModelHandler *this, const __CFArray *a2)
{
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (void *)MEMORY[0x19401EF04]();
  v5 = *(_DWORD *)(*(_QWORD *)this + 44);
  if (v5 == 2)
  {
    v6 = CoreNLP::CNNModelHandler::copyFeatureRepresentationForTokens(this, a2);
  }
  else
  {
    if (v5 != 1)
    {
      v7 = 0;
      goto LABEL_7;
    }
    v6 = CoreNLP::CNNModelHandler::copyFeatureRepresentationCharBased(this, (__CFString *)-[__CFArray componentsJoinedByString:](a2, "componentsJoinedByString:", CFSTR(" ")));
  }
  v7 = v6;
LABEL_7:
  objc_autoreleasePoolPop(v4);
  return v7;
}

uint64_t CoreNLP::CNNModelHandler::copyFeatureRepresentationForTokens(CoreNLP::CNNModelHandler *this, const __CFArray *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  __int128 **v8;
  uint64_t v9;
  uint64_t v10;
  std::string v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t v15;
  void *__p[2];
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 **v22;
  __int128 **v23;
  unint64_t v24;
  __int128 **v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v4 = -[__CFArray countByEnumeratingWithState:objects:count:](a2, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v19;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v19 != v5)
          objc_enumerationMutation(a2);
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * v6), "UTF8String"));
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v14 = (__int128 *)std::vector<std::string>::__emplace_back_slow_path<std::string&>((uint64_t *)&v13, (__int128 *)__p);
        v7 = (std::string *)v23;
        if ((unint64_t)v23 >= v24)
        {
          v8 = (__int128 **)std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>((uint64_t *)&v22, &v13);
        }
        else
        {
          *v23 = 0;
          v7->__r_.__value_.__l.__size_ = 0;
          v7->__r_.__value_.__r.__words[2] = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v7, v13, v14, 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v13) >> 3));
          v8 = (__int128 **)&v7[1];
        }
        v23 = v8;
        v25 = &v13;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
        if (v17 < 0)
          operator delete(__p[0]);
        ++v6;
      }
      while (v4 != v6);
      v4 = -[__CFArray countByEnumeratingWithState:objects:count:](a2, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
    }
    while (v4);
  }
  v9 = *(_QWORD *)this;
  memset(&v12, 0, sizeof(v12));
  std::vector<std::vector<std::string>>::__init_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>(&v12, v22, v23, 0xAAAAAAAAAAAAAAABLL * (v23 - v22));
  v10 = CoreNLP::CNNModel::featureRepresentation(v9, (uint64_t *)&v12);
  __p[0] = &v12;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v22;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v10;
}

void sub_191CED9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a31;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t ___ZN7CoreNLP15CNNModelHandler34copyFeatureRepresentationWordBasedEPK10__CFString_block_invoke(uint64_t a1, _QWORD *a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObject:", objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", *a2, a2[1]));
}

CFDictionaryRef CoreNLP::CNNModelHandler::copyFeatureRepresentationLayers(id **this)
{
  return CoreNLP::CNNModel::copyFeatureRepresentationLayers(*this);
}

std::string *CoreNLP::WordEmbedding::WordEmbedding(std::string *this)
{
  int v2;
  void *__p[2];
  std::string::size_type v5;

  this->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E2DF1F50;
  this->__r_.__value_.__r.__words[2] = 0;
  this->__r_.__value_.__l.__size_ = (std::string::size_type)&this->__r_.__value_.__r.__words[2];
  this[1].__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = xmmword_191D42DF0;
  if (SHIBYTE(v5) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v2 = SHIBYTE(v5);
    this[3].__r_.__value_.__r.__words[0] = 0;
    LODWORD(this[3].__r_.__value_.__r.__words[1]) = 0;
    if (v2 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    this[2].__r_.__value_.__r.__words[2] = v5;
    this[3].__r_.__value_.__r.__words[0] = 0;
    LODWORD(this[3].__r_.__value_.__r.__words[1]) = 0;
  }
  CoreNLP::KDTree::KDTree((uint64_t)&this[3].__r_.__value_.__r.__words[2]);
  CoreNLP::ProductQuantizer::ProductQuantizer((uint64_t)&this[111].__r_.__value_.__r.__words[2]);
  this[115].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)&this[114].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[114].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[113].__r_.__value_.__r.__words[1] = 0u;
  return this;
}

void sub_191CEDB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  _QWORD **v16;

  if (a15 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(v15, *v16);
  _Unwind_Resume(a1);
}

BOOL CoreNLP::WordEmbedding::initModel(CoreNLP::WordEmbedding *this, const char *a2, const __CFLocale *a3, unint64_t a4)
{
  _BOOL8 result;
  uint64_t v8;
  float *v9;
  const char *v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  const __CFLocale *v17;
  int LocaleLanguage;
  void **v19;
  int v20;
  int v21;
  std::string __p;
  __int128 v23;
  std::string v24;
  uint64_t v25;
  int v26;

  result = 0;
  if (a2 && a4 >= 0x3C)
  {
    if (*(_DWORD *)a2 != 200 && *(_DWORD *)a2 != 100)
      return 0;
    v8 = *((unsigned int *)a2 + 13);
    if ((*((_DWORD *)a2 + 14) + v8) > a4)
      return 0;
    *((_DWORD *)this + 678) = *((_DWORD *)a2 + 2);
    v9 = (float *)&a2[*((unsigned int *)a2 + 5)];
    *((_QWORD *)this + 340) = &a2[*((unsigned int *)a2 + 7)];
    v10 = &a2[v8];
    *((_QWORD *)this + 341) = &a2[*((unsigned int *)a2 + 9)];
    v11 = *((unsigned int *)a2 + 11);
    *((_QWORD *)this + 342) = &a2[v11];
    *((_QWORD *)this + 343) = &a2[(v11 + *((_DWORD *)a2 + 12) - 4)];
    CoreNLP::ProductQuantizer::initialize((uint64_t)this + 2680, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 4), v9);
    CoreNLP::KDTree::initialize((_DWORD *)this + 22, *((_DWORD *)a2 + 3));
    v12 = CoreNLP::KDTree::loadFromBuffer((CoreNLP::WordEmbedding *)((char *)this + 88), *((_DWORD *)a2 + 2), v10, *((_DWORD *)a2 + 14));
    v13 = *(_QWORD *)(a2 + 12);
    v14 = *((_DWORD *)a2 + 1);
    v16 = *((_QWORD *)this + 16);
    v15 = *((_QWORD *)this + 17);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    LocaleLanguage = CoreNLP::getLocaleLanguage(a3, v17);
    *(_QWORD *)&v23 = v13;
    DWORD2(v23) = v14;
    HIDWORD(v23) = (unint64_t)(v15 - v16) >> 2;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v24, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v24 = __p;
    v25 = 0;
    v26 = LocaleLanguage;
    *((_OWORD *)this + 2) = v23;
    v19 = (void **)((char *)this + 48);
    if (*((char *)this + 71) < 0)
      operator delete(*v19);
    *(_OWORD *)v19 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 8) = *((_QWORD *)&v24.__r_.__value_.__l + 2);
    *((_BYTE *)&v24.__r_.__value_.__s + 23) = 0;
    v24.__r_.__value_.__s.__data_[0] = 0;
    *((_QWORD *)this + 9) = v25;
    *((_DWORD *)this + 20) = v26;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (*(_DWORD *)a2 == 200)
      *((_DWORD *)this + 20) = *((_DWORD *)a2 + 15);
    if (v12)
    {
      result = 0;
      v21 = *((_DWORD *)a2 + 3);
      v20 = *((_DWORD *)a2 + 4);
      if (!(v21 % v20) && v21 >= v20 && v21 >= 1 && v20 >= 1)
        return *((_DWORD *)this + 678) > 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_191CEDDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL CoreNLP::WordEmbedding::loadModel(CoreNLP::WordEmbedding *a1, uint64_t a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  const char *v8;
  unint64_t v9;
  __int128 v11;

  CoreNLP::ReadOnlyFile<char>::open(a2, (uint64_t)"r", 1, &v11);
  v3 = (uint64_t *)((char *)a1 + 2752);
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::operator=[abi:ne180100]((uint64_t)a1 + 2752, &v11);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *v3;
  if (*v3)
  {
    v8 = *(const char **)v7;
    v9 = *(_QWORD *)(v7 + 8);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  return CoreNLP::WordEmbedding::initModel(a1, v8, 0, v9);
}

BOOL CoreNLP::WordEmbedding::loadModel(CoreNLP::WordEmbedding *this, const __CFLocale *a2, const __CFString *a3)
{
  uint64_t PersistentResource;
  const char *v7;
  unint64_t v8;
  _QWORD v10[6];
  int v11;
  int LocaleLanguage;

  LocaleLanguage = CoreNLP::getLocaleLanguage(a2, a2);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZN7CoreNLP13WordEmbedding9loadModelEPK10__CFLocalePK10__CFString_block_invoke;
  v10[3] = &__block_descriptor_tmp_19;
  v11 = LocaleLanguage;
  v10[4] = a2;
  v10[5] = a3;
  PersistentResource = CoreNLP::SingletonResourceManager<NLLanguageID,CoreNLP::ReadOnlyFile<char>>::getPersistentResource((uint64_t)&LocaleLanguage, (uint64_t)v10);
  if (PersistentResource)
  {
    v7 = *(const char **)PersistentResource;
    v8 = *(_QWORD *)(PersistentResource + 8);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  return CoreNLP::WordEmbedding::initModel(this, v7, a2, v8);
}

uint64_t CoreNLP::SingletonResourceManager<NLLanguageID,CoreNLP::ReadOnlyFile<char>>::getPersistentResource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD block[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  if (CoreNLP::SingletonResourceManager<NLLanguageID,CoreNLP::ReadOnlyFile<char>>::getQueue(void)::onceToken != -1)
    dispatch_once(&CoreNLP::SingletonResourceManager<NLLanguageID,CoreNLP::ReadOnlyFile<char>>::getQueue(void)::onceToken, &__block_literal_global_24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7CoreNLP24SingletonResourceManagerI12NLLanguageIDNS_12ReadOnlyFileIcEEE21getPersistentResourceERKS1_U13block_pointerFPS3_vE_block_invoke;
  block[3] = &unk_1E2DF5370;
  block[5] = &v7;
  block[6] = a1;
  block[4] = a2;
  dispatch_sync((dispatch_queue_t)CoreNLP::SingletonResourceManager<NLLanguageID,CoreNLP::ReadOnlyFile<char>>::getQueue(void)::queue, block);
  v4 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t ___ZN7CoreNLP13WordEmbedding9loadModelEPK10__CFLocalePK10__CFString_block_invoke(uint64_t a1)
{
  CoreNLP::Resource *v2;
  uint64_t v3;
  CoreNLP::Resource *v4;
  void *__p[2];
  char v7;
  CoreNLP::Resource *v8;

  if (*(_DWORD *)(a1 + 48) == 4)
  {
    v2 = CoreNLP::copyLocaleForLanguageID(4);
    CoreNLP::Resource::getAssetResource(v2, (const __CFLocale *)CFSTR("Embedding"), *(const __CFString **)(a1 + 40), 0, &v8);
    if (v2)
      CFRelease(v2);
  }
  else
  {
    CoreNLP::Resource::getAssetResource(*(CoreNLP::Resource **)(a1 + 32), (const __CFLocale *)CFSTR("Embedding"), *(const __CFString **)(a1 + 40), 0, &v8);
  }
  if (!v8)
    return 0;
  CoreNLP::Resource::path((CoreNLP **)v8, __p);
  v3 = CoreNLP::ReadOnlyFile<char>::create((__int128 *)__p, "r", 1);
  if (v7 < 0)
    operator delete(__p[0]);
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    CoreNLP::Resource::~Resource(v4);
    MEMORY[0x19401E994]();
  }
  return v3;
}

void sub_191CEE10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CoreNLP::Resource *a15)
{
  std::unique_ptr<CoreNLP::Resource>::reset[abi:ne180100](&a15, 0);
  _Unwind_Resume(a1);
}

BOOL CoreNLP::WordEmbedding::loadModel(const void **this, const __CFData *a2)
{
  const char *BytePtr;
  CFIndex Length;

  nlp::CFScopedPtr<__CFData const*>::acquire(this + 346, a2);
  BytePtr = (const char *)CFDataGetBytePtr((CFDataRef)this[346]);
  Length = CFDataGetLength(a2);
  return CoreNLP::WordEmbedding::initModel((CoreNLP::WordEmbedding *)this, BytePtr, 0, Length);
}

void nlp::CFScopedPtr<__CFData const*>::acquire(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    nlp::CFScopedPtr<__CFData const*>::reset(a1, cf);
  }
}

uint64_t CoreNLP::WordEmbedding::buildModelFromEmbeddingMap(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  BOOL v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  const UInt8 *v21;
  const UInt8 *v23;
  const UInt8 *v24;
  void *__p[3];
  std::string v26;
  uint64_t *v27;
  _QWORD *v28[2];
  uint64_t *v29;
  _QWORD *v30[2];
  int v31;

  std::vector<std::string>::__clear[abi:ne180100](a6);
  v13 = (__int128 *)*a2;
  v11 = (__int128 *)(a2 + 1);
  v12 = v13;
  v29 = a6;
  if (v13 != v11)
  {
    do
    {
      if (a1 + 16 == std::__tree<std::string>::find<std::string>(a1 + 8, (const void **)v12 + 4))
        std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&v29, v12 + 2);
      v14 = (__int128 *)*((_QWORD *)v12 + 1);
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = *(__int128 **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (__int128 *)*((_QWORD *)v12 + 2);
          v16 = *(_QWORD *)v15 == (_QWORD)v12;
          v12 = v15;
        }
        while (!v16);
      }
      v12 = v15;
    }
    while (v15 != v11);
  }
  v31 = 0;
  v30[0] = 0;
  v30[1] = 0;
  v28[1] = 0;
  v29 = (uint64_t *)v30;
  v27 = (uint64_t *)v28;
  v28[0] = 0;
  v17 = *(_QWORD **)(a1 + 8);
  if (v17 != (_QWORD *)(a1 + 16))
  {
    do
    {
      if (*((char *)v17 + 55) < 0)
        std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)v17[4], v17[5]);
      else
        v26 = *(std::string *)(v17 + 4);
      if (a3 + 8 != std::__tree<std::string>::find<std::string>(a3, (const void **)&v26.__r_.__value_.__l.__data_))
        std::__tree<CoreNLP::NLTagSchemeType>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,CoreNLP::NLTagSchemeType const&>(&v29, &v31, &v31);
      if (a4 + 8 != std::__tree<std::string>::find<std::string>(a4, (const void **)&v26.__r_.__value_.__l.__data_))
        std::__tree<CoreNLP::NLTagSchemeType>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,CoreNLP::NLTagSchemeType const&>(&v27, &v31, &v31);
      ++v31;
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      v18 = (_QWORD *)v17[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v17[2];
          v16 = *v19 == (_QWORD)v17;
          v17 = v19;
        }
        while (!v16);
      }
      v17 = v19;
    }
    while (v19 != (_QWORD *)(a1 + 16));
  }
  memset(&v26, 0, sizeof(v26));
  CoreNLP::WordEmbedding::moveToFlattenedEmbeddings(a1, (_QWORD *)(a1 + 8), (void **)&v26.__r_.__value_.__l.__data_);
  CoreNLP::WordEmbedding::runQuantization((int *)a1, (const float **)&v26, (unsigned __int8 **)__p);
  v20 = (void *)v26.__r_.__value_.__r.__words[0];
  memset(&v26, 0, sizeof(v26));
  if (v20)
    operator delete(v20);
  *(void **)(a1 + 2720) = __p[0];
  CoreNLP::WordEmbedding::readQuantizedVectorsIntoKDTree(a1, __p);
  CoreNLP::KDTree::buildForest(a1 + 88, *(_DWORD *)(a1 + 44), (uint64_t)&v29, (uint64_t)&v27);
  CoreNLP::WordEmbedding::buildHeader((CoreNLP::WordEmbedding *)a1, (uint64_t *)&v24);
  v21 = v24;
  v23 = v24;
  CoreNLP::WordEmbedding::saveCompressedModel(a1, &v23);
  if (v21)
    MEMORY[0x19401E994](v21, 0x1000C40565EDBD2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v26.__r_.__value_.__r.__words[0])
  {
    v26.__r_.__value_.__l.__size_ = v26.__r_.__value_.__r.__words[0];
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v27, v28[0]);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v29, v30[0]);
  return 1;
}

void sub_191CEE488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,_QWORD *a22,uint64_t a23,char a24,_QWORD *a25)
{
  uint64_t v25;

  if (v25)
    MEMORY[0x19401E994](v25, 0x1000C40565EDBD2);
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&a21, a22);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&a24, a25);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::WordEmbedding::buildModelFromDictionary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v5;
  int v6;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v16[3];
  void **v17;
  _QWORD *v18[2];
  uint64_t v19[3];
  char **v20;
  char *v21[2];
  char **v22;
  char *v23[2];
  char **v24;
  char *v25[2];

  v5 = (uint64_t **)(a1 + 8);
  if (v5 != (uint64_t **)a2)
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<float>>,std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *> *,long>>(v5, *(__int128 **)a2, (__int128 *)(a2 + 8));
  *(_DWORD *)(a1 + 2712) = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a3 + 4);
  v9 = *(int *)a3 > 0 && v6 > 0 && *(_DWORD *)a3 >= v6 && *(_DWORD *)a3 % v6 == 0;
  v10 = v9;
  if (v9)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)a3;
    std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a3 + 16));
    v11 = *(_QWORD *)(a3 + 40);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a3 + 48);
    *(_QWORD *)(a1 + 72) = v11;
    v12 = *(_QWORD *)a1;
    *(_DWORD *)(a1 + 32) = (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)) >> 2;
    v13 = (*(uint64_t (**)(uint64_t))(v12 + 64))(a1);
    CoreNLP::KDTree::initialize((_DWORD *)(a1 + 88), v13);
    v25[0] = 0;
    v25[1] = 0;
    v23[1] = 0;
    v24 = v25;
    v22 = v23;
    v23[0] = 0;
    v21[0] = 0;
    v21[1] = 0;
    v20 = v21;
    memset(v19, 0, sizeof(v19));
    v18[0] = 0;
    v18[1] = 0;
    v17 = (void **)v18;
    std::set<std::string>::set[abi:ne180100](v16, (const void ***)&v24);
    CoreNLP::WordEmbedding::buildModelFromEmbeddingMap(a1, v16, (uint64_t)&v22, (uint64_t)&v20, v14, v19);
    std::__tree<std::string>::destroy((uint64_t)v16, (char *)v16[1]);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v17, v18[0]);
    v17 = (void **)v19;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
    std::__tree<std::string>::destroy((uint64_t)&v20, v21[0]);
    std::__tree<std::string>::destroy((uint64_t)&v22, v23[0]);
    std::__tree<std::string>::destroy((uint64_t)&v24, v25[0]);
  }
  return v10;
}

void sub_191CEE6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, void **a12, _QWORD *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, char *a19)
{
  uint64_t v19;

  std::__tree<std::string>::destroy((uint64_t)&a9, a10);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a12, a13);
  a12 = (void **)&a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::__tree<std::string>::destroy((uint64_t)&a18, a19);
  std::__tree<std::string>::destroy(v19 - 80, *(char **)(v19 - 72));
  std::__tree<std::string>::destroy(v19 - 56, *(char **)(v19 - 48));
  _Unwind_Resume(a1);
}

void CoreNLP::WordEmbedding::moveToFlattenedEmbeddings(uint64_t a1, _QWORD *a2, void **a3)
{
  uint64_t v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  v5 = a2[2];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  std::vector<float>::reserve(a3, v5 * v6);
  v9 = (_QWORD *)*a2;
  v7 = a2 + 1;
  v8 = v9;
  if (v9 != v7)
  {
    do
    {
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::back_insert_iterator<std::vector<float>>,0>((_DWORD *)v8[7], (_DWORD *)v8[8], (uint64_t)a3);
      v10 = (void *)v8[7];
      v8[8] = 0;
      v8[9] = 0;
      v8[7] = 0;
      if (v10)
        operator delete(v10);
      v11 = (_QWORD *)v8[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v8[2];
          v13 = *v12 == (_QWORD)v8;
          v8 = v12;
        }
        while (!v13);
      }
      v8 = v12;
    }
    while (v12 != v7);
  }
}

void CoreNLP::WordEmbedding::runQuantization(int *a1@<X0>, const float **a2@<X1>, unsigned __int8 **a3@<X8>)
{
  CoreNLP::ProductQuantizer *v6;
  int v7;
  size_t v8;
  char v9;

  v6 = (CoreNLP::ProductQuantizer *)(a1 + 670);
  v7 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 64))(a1);
  CoreNLP::ProductQuantizer::initialize((uint64_t)v6, v7, a1[9], 0);
  CoreNLP::ProductQuantizer::runCompressing(v6, a1[678], *a2);
  v8 = a1[678] * (uint64_t)((*(int (**)(int *))(*(_QWORD *)a1 + 64))(a1) / a1[9]);
  v9 = 0;
  std::vector<unsigned char>::vector(a3, v8, &v9);
  CoreNLP::ProductQuantizer::quantizeVectors(v6, *a2, *a3, a1[678]);
}

void sub_191CEE858(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CoreNLP::WordEmbedding::readQuantizedVectorsIntoKDTree(uint64_t a1, _QWORD *a2)
{
  int v4;
  CoreNLP::KDTree *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const float *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  float *v14;
  int *v15;
  int v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  if (*(int *)(a1 + 2712) >= 1)
  {
    v4 = 0;
    v5 = (CoreNLP::KDTree *)(a1 + 88);
    do
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
      MEMORY[0x1E0C80A78](v6, v7);
      v9 = (const float *)((char *)v17 - v8);
      if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) / *(_DWORD *)(a1 + 36) >= 1)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
          v13 = *(unsigned int *)(a1 + 36);
          if ((int)v13 >= 1)
          {
            v14 = (float *)&v9[(int)v13 * v11];
            v15 = (int *)(*(_QWORD *)(a1 + 2696)
                        + 4 * *(_DWORD *)(a1 + 2684) * (v10 + *(unsigned __int8 *)(*a2 + v11 + v12 / (int)v13 * v4)));
            do
            {
              v16 = *v15++;
              *(_DWORD *)v14++ = v16;
              --v13;
            }
            while (v13);
          }
          ++v11;
          v10 += 256;
        }
        while (v11 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) / *(_DWORD *)(a1 + 36));
      }
      CoreNLP::KDTree::readDataPoint(v5, v9);
      ++v4;
    }
    while (v4 < *(_DWORD *)(a1 + 2712));
  }
}

uint64_t CoreNLP::WordEmbedding::buildHeader@<X0>(CoreNLP::WordEmbedding *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int *v7;
  int v8;
  unsigned int *v9;
  int v10;
  unsigned int *v11;
  unsigned int *v12;
  int v13;
  CoreNLP::WordEmbedding *v14;
  int v15;
  uint64_t v16;
  CoreNLP::WordEmbedding *v17;
  CoreNLP::WordEmbedding *v18;
  BOOL v19;
  int v20;
  int v21;
  unsigned int *v22;
  uint64_t result;
  uint64_t v24;
  int v25;

  v4 = operator new();
  *a2 = v4;
  *(_OWORD *)(v4 + 4) = 0u;
  *(_OWORD *)(v4 + 20) = 0u;
  *(_OWORD *)(v4 + 36) = 0u;
  *(_OWORD *)(v4 + 52) = 0u;
  *(_OWORD *)(v4 + 68) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_DWORD *)v4 = 200;
  *(_DWORD *)(v4 + 4) = (*(uint64_t (**)(CoreNLP::WordEmbedding *))(*(_QWORD *)this + 56))(this);
  *(_DWORD *)(v4 + 60) = (*(uint64_t (**)(CoreNLP::WordEmbedding *))(*(_QWORD *)this + 72))(this);
  v5 = (*(uint64_t (**)(CoreNLP::WordEmbedding *))(*(_QWORD *)this + 64))(this);
  v6 = *((_DWORD *)this + 9);
  *(_DWORD *)(v4 + 12) = v5;
  *(_DWORD *)(v4 + 16) = v6;
  *(_DWORD *)(v4 + 8) = *((_DWORD *)this + 678);
  v25 = 96;
  CoreNLP::paddingOffset((CoreNLP *)&v25, v7);
  *(_DWORD *)(v4 + 20) = v25;
  v8 = (*(uint64_t (**)(CoreNLP::WordEmbedding *))(*(_QWORD *)this + 64))(this);
  *(_DWORD *)(v4 + 24) = v8 << 10;
  v25 += v8 << 10;
  CoreNLP::paddingOffset((CoreNLP *)&v25, v9);
  *(_DWORD *)(v4 + 28) = v25;
  v10 = *((_DWORD *)this + 678)
      * ((*(int (**)(CoreNLP::WordEmbedding *))(*(_QWORD *)this + 64))(this)
       / *((_DWORD *)this + 9));
  *(_DWORD *)(v4 + 32) = v10;
  v25 += v10;
  CoreNLP::paddingOffset((CoreNLP *)&v25, v11);
  v13 = v25;
  *(_DWORD *)(v4 + 36) = v25;
  v14 = (CoreNLP::WordEmbedding *)*((_QWORD *)this + 1);
  v15 = *(_DWORD *)(v4 + 40);
  if (v14 != (CoreNLP::WordEmbedding *)((char *)this + 16))
  {
    do
    {
      if (*((char *)v14 + 55) < 0)
        v16 = *((_QWORD *)v14 + 5);
      else
        LODWORD(v16) = *((unsigned __int8 *)v14 + 55);
      v15 += v16 + 1;
      *(_DWORD *)(v4 + 40) = v15;
      v17 = (CoreNLP::WordEmbedding *)*((_QWORD *)v14 + 1);
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = *(CoreNLP::WordEmbedding **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (CoreNLP::WordEmbedding *)*((_QWORD *)v14 + 2);
          v19 = *(_QWORD *)v18 == (_QWORD)v14;
          v14 = v18;
        }
        while (!v19);
      }
      v14 = v18;
    }
    while (v18 != (CoreNLP::WordEmbedding *)((char *)this + 16));
  }
  v25 = v15 + v13;
  CoreNLP::paddingOffset((CoreNLP *)&v25, v12);
  v20 = v25;
  v21 = 4 * *((_DWORD *)this + 678) + 4;
  *(_DWORD *)(v4 + 44) = v25;
  *(_DWORD *)(v4 + 48) = v21;
  v25 = v21 + v20;
  result = CoreNLP::paddingOffset((CoreNLP *)&v25, v22);
  *(_DWORD *)(v4 + 52) = v25;
  LODWORD(v24) = *((_DWORD *)this + 30);
  if (!(_DWORD)v24)
    v24 = (*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 3;
  *(_DWORD *)(v4 + 56) = (v24 - *((_DWORD *)this + 38)) * *((_DWORD *)this + 41);
  return result;
}

void sub_191CEEC0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  *v2 = 0;
  MEMORY[0x19401E994](v1, 0x1000C40565EDBD2);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::WordEmbedding::saveCompressedModel(uint64_t a1, const UInt8 **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  const UInt8 *v10;
  unsigned int *v11;
  unsigned int *v12;
  int v13;
  __CFData *v14;
  CFIndex v15;
  const UInt8 *v16;
  unsigned int *v17;
  int v18;
  __CFData *v19;
  CFIndex v20;
  const UInt8 *v21;
  int v22;
  __CFData *v23;
  _QWORD *v24;
  int v25;
  UInt8 *v26;
  UInt8 *v27;
  UInt8 *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  unint64_t v36;
  CFIndex v37;
  __CFData *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  BOOL v42;
  UInt8 *v43;
  UInt8 *v44;
  UInt8 *v45;
  UInt8 *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  int v53;
  const UInt8 *begin;
  unsigned int *v55;
  CFIndex v56;
  __CFData *v57;
  UInt8 *v58;
  const UInt8 *v59;
  int v60;
  __CFData *v61;
  uint64_t v62;
  __CFData *v63;
  std::vector<char>::value_type __x[8];
  UInt8 *v66;
  UInt8 *v67;
  int v68;
  std::vector<char> v69;
  uint64_t v70;
  _BYTE v71[120];
  uint64_t v72;
  _QWORD v73[21];

  v73[19] = *MEMORY[0x1E0C80C00];
  v4 = MEMORY[0x1E0DE4FB0];
  v5 = MEMORY[0x1E0DE4FB0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F48];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  v73[0] = MEMORY[0x1E0DE4FB0] + 64;
  v70 = v7;
  *(_QWORD *)&v71[*(_QWORD *)(v7 - 24) - 8] = v8;
  v9 = (std::ios_base *)&v71[*(_QWORD *)(v70 - 24) - 8];
  std::ios_base::init(v9, v71);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v70 = v4 + 24;
  v73[0] = v5;
  MEMORY[0x19401E700](v71);
  if (!*(_QWORD *)(a1 + 72))
  {
    if (*(char *)(a1 + 71) < 0)
    {
      if (!*(_QWORD *)(a1 + 56))
        goto LABEL_7;
    }
    else if (!*(_BYTE *)(a1 + 71))
    {
      goto LABEL_7;
    }
    std::ofstream::open();
  }
LABEL_7:
  __x[0] = 0;
  std::vector<char>::vector(&v69, 8uLL, __x);
  v68 = 96;
  v10 = *a2;
  v13 = CoreNLP::paddingOffset((CoreNLP *)&v68, v11);
  v14 = *(__CFData **)(a1 + 72);
  if (v14)
  {
    CFDataAppendBytes(v14, v10, 96);
    CFDataAppendBytes(*(CFMutableDataRef *)(a1 + 72), (const UInt8 *)v69.__begin_, v13);
  }
  else if (v72)
  {
    std::ostream::write();
    std::ostream::write();
  }
  v15 = *((unsigned int *)*a2 + 6);
  v68 += v15;
  v16 = *(const UInt8 **)(a1 + 2696);
  v18 = CoreNLP::paddingOffset((CoreNLP *)&v68, v12);
  v19 = *(__CFData **)(a1 + 72);
  if (v19)
  {
    CFDataAppendBytes(v19, v16, v15);
    CFDataAppendBytes(*(CFMutableDataRef *)(a1 + 72), (const UInt8 *)v69.__begin_, v18);
  }
  else if (v72)
  {
    std::ostream::write();
    std::ostream::write();
  }
  v20 = *((unsigned int *)*a2 + 8);
  v68 += v20;
  v21 = *(const UInt8 **)(a1 + 2720);
  v22 = CoreNLP::paddingOffset((CoreNLP *)&v68, v17);
  v23 = *(__CFData **)(a1 + 72);
  if (v23)
  {
    CFDataAppendBytes(v23, v21, v20);
    CFDataAppendBytes(*(CFMutableDataRef *)(a1 + 72), (const UInt8 *)v69.__begin_, v22);
  }
  else if (v72)
  {
    std::ostream::write();
    std::ostream::write();
  }
  *(_QWORD *)__x = 0;
  v66 = 0;
  v67 = 0;
  v24 = *(_QWORD **)(a1 + 8);
  if (v24 == (_QWORD *)(a1 + 16))
  {
    v44 = 0;
    v43 = 0;
  }
  else
  {
    v25 = 0;
    do
    {
      v26 = v66;
      if (v66 >= v67)
      {
        v28 = *(UInt8 **)__x;
        v29 = (uint64_t)&v66[-*(_QWORD *)__x] >> 2;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 62)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v31 = (uint64_t)&v67[-*(_QWORD *)__x];
        if ((uint64_t)&v67[-*(_QWORD *)__x] >> 1 > v30)
          v30 = v31 >> 1;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
          v32 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
        {
          v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v67, v32);
          v28 = *(UInt8 **)__x;
          v26 = v66;
        }
        else
        {
          v33 = 0;
        }
        v34 = &v33[4 * v29];
        *(_DWORD *)v34 = v25;
        v27 = (UInt8 *)(v34 + 4);
        while (v26 != v28)
        {
          v35 = *((_DWORD *)v26 - 1);
          v26 -= 4;
          *((_DWORD *)v34 - 1) = v35;
          v34 -= 4;
        }
        *(_QWORD *)__x = v34;
        v66 = v27;
        v67 = (UInt8 *)&v33[4 * v32];
        if (v28)
          operator delete(v28);
      }
      else
      {
        *(_DWORD *)v66 = v25;
        v27 = v26 + 4;
      }
      v66 = v27;
      if (*((char *)v24 + 55) < 0)
      {
        v36 = v24[4];
        v37 = v24[5];
      }
      else
      {
        v36 = (unint64_t)(v24 + 4);
        v37 = *((unsigned __int8 *)v24 + 55);
      }
      v38 = *(__CFData **)(a1 + 72);
      if (v38)
      {
        CFDataAppendBytes(v38, (const UInt8 *)v36, v37);
        CFDataAppendBytes(*(CFMutableDataRef *)(a1 + 72), (const UInt8 *)v69.__begin_, 1);
      }
      else if (v72)
      {
        std::ostream::write();
        std::ostream::write();
      }
      if (*((char *)v24 + 55) < 0)
        v39 = v24[5];
      else
        LODWORD(v39) = *((unsigned __int8 *)v24 + 55);
      v40 = (_QWORD *)v24[1];
      if (v40)
      {
        do
        {
          v41 = v40;
          v40 = (_QWORD *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          v41 = (_QWORD *)v24[2];
          v42 = *v41 == (_QWORD)v24;
          v24 = v41;
        }
        while (!v42);
      }
      v25 += v39 + 1;
      v24 = v41;
    }
    while (v41 != (_QWORD *)(a1 + 16));
    v44 = v66;
    v43 = v67;
    if (v66 < v67)
    {
      *(_DWORD *)v66 = 0;
      v45 = v44 + 4;
      v6 = (uint64_t *)MEMORY[0x1E0DE4F48];
      goto LABEL_71;
    }
    v6 = (uint64_t *)MEMORY[0x1E0DE4F48];
  }
  v46 = *(UInt8 **)__x;
  v47 = (uint64_t)&v44[-*(_QWORD *)__x] >> 2;
  v48 = v47 + 1;
  if ((unint64_t)(v47 + 1) >> 62)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v49 = (uint64_t)&v43[-*(_QWORD *)__x];
  if (v49 >> 1 > v48)
    v48 = v49 >> 1;
  if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
    v36 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v36 = v48;
  if (v36)
  {
    v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v67, v36);
    v46 = *(UInt8 **)__x;
    v44 = v66;
  }
  else
  {
    v50 = 0;
  }
  v51 = &v50[4 * v47];
  v52 = &v50[4 * v36];
  *(_DWORD *)v51 = 0;
  v45 = (UInt8 *)(v51 + 4);
  while (v44 != v46)
  {
    v53 = *((_DWORD *)v44 - 1);
    v44 -= 4;
    *((_DWORD *)v51 - 1) = v53;
    v51 -= 4;
  }
  *(_QWORD *)__x = v51;
  v66 = v45;
  v67 = (UInt8 *)v52;
  if (v46)
    operator delete(v46);
LABEL_71:
  v66 = v45;
  v68 += *((_DWORD *)*a2 + 10);
  begin = (const UInt8 *)v69.__begin_;
  v56 = (int)CoreNLP::paddingOffset((CoreNLP *)&v68, (unsigned int *)v36);
  v57 = *(__CFData **)(a1 + 72);
  if (v57)
  {
    CFDataAppendBytes(v57, begin, v56);
    CFDataAppendBytes(*(CFMutableDataRef *)(a1 + 72), (const UInt8 *)v69.__begin_, 0);
  }
  else if (v72)
  {
    std::ostream::write();
    std::ostream::write();
  }
  v68 += *((_DWORD *)*a2 + 12);
  v59 = *(const UInt8 **)__x;
  v58 = v66;
  v60 = CoreNLP::paddingOffset((CoreNLP *)&v68, v55);
  v61 = *(__CFData **)(a1 + 72);
  if (v61)
  {
    CFDataAppendBytes(v61, v59, v58 - v59);
    CFDataAppendBytes(*(CFMutableDataRef *)(a1 + 72), (const UInt8 *)v69.__begin_, v60);
  }
  else if (v72)
  {
    std::ostream::write();
    std::ostream::write();
  }
  v62 = CoreNLP::KDTree::builtNodes((CoreNLP::KDTree *)(a1 + 88));
  v63 = *(__CFData **)(a1 + 72);
  if (v63)
  {
    CFDataAppendBytes(v63, (const UInt8 *)(v62 + *(int *)(a1 + 2712) * (uint64_t)*(int *)(a1 + 164)), *((unsigned int *)*a2 + 14));
    CFDataAppendBytes(*(CFMutableDataRef *)(a1 + 72), (const UInt8 *)v69.__begin_, 0);
  }
  else if (v72)
  {
    std::ostream::write();
    std::ostream::write();
  }
  if (v72 && !std::filebuf::close())
    std::ios_base::clear((std::ios_base *)&v71[*(_QWORD *)(v70 - 24) - 8], *(_DWORD *)&v71[*(_QWORD *)(v70 - 24) + 24] | 4);
  if (v62)
    MEMORY[0x19401E970](v62, 0x1000C8077774924);
  if (*(_QWORD *)__x)
  {
    v66 = *(UInt8 **)__x;
    operator delete(*(void **)__x);
  }
  if (v69.__begin_)
  {
    v69.__end_ = v69.__begin_;
    operator delete(v69.__begin_);
  }
  v70 = *v6;
  *(_QWORD *)&v71[*(_QWORD *)(v70 - 24) - 8] = v6[3];
  MEMORY[0x19401E70C](v71);
  std::ostream::~ostream();
  return MEMORY[0x19401E928](v73);
}

void sub_191CEF2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::ofstream::~ofstream(&a18);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::KDTree::builtNodes(CoreNLP::KDTree *this)
{
  int *v1;
  uint64_t Serialized;
  void *__p;
  void *v5;
  uint64_t v6;

  v1 = (int *)((char *)this + 72);
  __p = 0;
  v5 = 0;
  v6 = 0;
  std::vector<CoreNLP::Node *>::__init_with_size[abi:ne180100]<CoreNLP::Node **,CoreNLP::Node **>(&__p, *(const void **)this, *((_QWORD *)this + 1), (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  Serialized = CoreNLP::Serializer::getSerialized(v1, &__p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  return Serialized;
}

void sub_191CEF3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::WordEmbedding::getAverageEmbedding(CoreNLP::WordEmbedding *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  float *v22;
  float *v23;
  uint64_t v24;
  float *v25;
  float v26;
  uint64_t v27;
  int v29;

  v6 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if ((*(int (**)(CoreNLP::WordEmbedding *))(*(_QWORD *)a1 + 64))(a1) != v6 >> 2)
  {
    v7 = (*(uint64_t (**)(CoreNLP::WordEmbedding *))(*(_QWORD *)a1 + 64))(a1);
    std::vector<float>::resize(a3, v7);
    v8 = *(_QWORD *)(a3 + 8);
    if (*(_QWORD *)a3 != v8)
      bzero(*(void **)a3, ((v8 - *(_QWORD *)a3 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  v9 = *a2;
  v10 = (a2[1] - *a2) / 24;
  if (a2[1] == *a2)
  {
    v12 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    if (v10 <= 1)
      v13 = 1;
    else
      v13 = (a2[1] - *a2) / 24;
    do
    {
      v29 = 0;
      v14 = v9 + 24 * v11;
      if (*(char *)(v14 + 23) >= 0)
        v15 = (const char *)(v9 + 24 * v11);
      else
        v15 = *(const char **)v14;
      if (CoreNLP::WordEmbedding::getWordID(a1, v15, &v29))
      {
        v16 = *((unsigned int *)a1 + 672);
        if ((int)v16 >= 1)
        {
          v17 = 0;
          v18 = *((_QWORD *)a1 + 340) + v29 * (uint64_t)(int)v16;
          v19 = *((_QWORD *)a1 + 337);
          v20 = *((_DWORD *)a1 + 671);
          v21 = *((unsigned int *)a1 + 9);
          v22 = *(float **)a3;
          do
          {
            if ((int)v21 >= 1)
            {
              v23 = (float *)(v19 + 4 * v20 * (*(unsigned __int8 *)(v18 + v17) | ((_DWORD)v17 << 8)));
              v24 = v21;
              v25 = v22;
              do
              {
                v26 = *v23++;
                *v25 = v26 + *v25;
                ++v25;
                --v24;
              }
              while (v24);
            }
            ++v17;
            v22 += (int)v21;
          }
          while (v17 != v16);
        }
        v12 = 1;
      }
      ++v11;
    }
    while (v11 != v13);
  }
  if (v10 >= 2 && (*(int (**)(CoreNLP::WordEmbedding *))(*(_QWORD *)a1 + 64))(a1) >= 1)
  {
    v27 = 0;
    do
    {
      *(float *)(*(_QWORD *)a3 + 4 * v27) = *(float *)(*(_QWORD *)a3 + 4 * v27)
                                          / (float)(0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
      ++v27;
    }
    while (v27 < (*(int (**)(CoreNLP::WordEmbedding *))(*(_QWORD *)a1 + 64))(a1));
  }
  return v12 & 1;
}

void CoreNLP::WordEmbedding::getAllEmbeddings(CoreNLP::WordEmbedding *a1, uint64_t *a2, uint64_t *a3)
{
  unsigned int *v3;
  int v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  void *__p[3];

  v3 = (unsigned int *)*((_QWORD *)a1 + 342);
  if (v3 != *((unsigned int **)a1 + 343))
  {
    v7 = 0;
    do
    {
      v8 = (void *)(*((_QWORD *)a1 + 341) + *v3);
      __p[0] = v8;
      v9 = a2[1];
      if (v9 >= a2[2])
      {
        v10 = std::vector<std::string>::__emplace_back_slow_path<char const*>(a2, (char **)__p);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2[1], (char *)v8);
        v10 = v9 + 24;
        a2[1] = v9 + 24;
      }
      a2[1] = v10;
      CoreNLP::WordEmbedding::getEmbedding(a1, v7, __p);
      std::vector<std::vector<float>>::emplace_back<std::vector<float>>(a3, (uint64_t)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v7;
      ++v3;
    }
    while (v3 != *((unsigned int **)a1 + 343));
  }
}

void sub_191CEF6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<float>>::emplace_back<std::vector<float>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v17[4] = v4;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v12);
    v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v17);
    v8 = (_QWORD *)a1[1];
    std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_191CEF824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void CoreNLP::WordEmbedding::getEmbedding(CoreNLP::WordEmbedding *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  int *v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if ((a2 & 0x80000000) == 0 && *((_DWORD *)this + 678) >= a2)
  {
    v6 = (*(uint64_t (**)(CoreNLP::WordEmbedding *))(*(_QWORD *)this + 64))(this);
    std::vector<float>::resize((uint64_t)a3, v6);
    v7 = *((unsigned int *)this + 672);
    if ((int)v7 >= 1)
    {
      v8 = 0;
      v9 = *((_QWORD *)this + 340) + (int)v7 * a2;
      v10 = *((_QWORD *)this + 337);
      v11 = *((_DWORD *)this + 671);
      v12 = *((unsigned int *)this + 9);
      v13 = (_DWORD *)*a3;
      do
      {
        if ((int)v12 >= 1)
        {
          v14 = (int *)(v10 + 4 * v11 * (*(unsigned __int8 *)(v9 + v8) | ((_DWORD)v8 << 8)));
          v15 = v12;
          v16 = v13;
          do
          {
            v17 = *v14++;
            *v16++ = v17;
            --v15;
          }
          while (v15);
        }
        ++v8;
        v13 += (int)v12;
      }
      while (v8 != v7);
    }
  }
}

void sub_191CEF90C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void CoreNLP::WordEmbedding::getNearestNeighborsForVector(CoreNLP::WordEmbedding *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>, float a5@<S0>)
{
  uint64_t v10;
  float *v11;
  int *v12;
  unint64_t v13;
  int v14;
  int v15;
  float v16;
  BOOL v17;
  float v18;
  float *v19;
  float *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  float v24;
  int v25;
  float *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  float *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  float *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  float v51;
  int v52;
  float *v53;
  float *v54;
  float *__p;
  float *v56;
  float *v57;
  _QWORD v58[2];
  void *v59;
  _BYTE *v60;
  uint64_t v61;
  char v62;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v11 = *(float **)a2;
  v10 = *(_QWORD *)(a2 + 8);
  if ((*(int (**)(CoreNLP::WordEmbedding *))(*(_QWORD *)a1 + 64))(a1) == (v10 - (uint64_t)v11) >> 2)
  {
    v59 = 0;
    v60 = 0;
    v61 = 0;
    CoreNLP::KDTree::getPossibleNNs((uint64_t)a1 + 88, *(float **)a2, (unsigned int **)&v59);
    std::__sort<std::__less<int,int> &,int *>();
    __p = 0;
    v56 = 0;
    v58[0] = 0;
    v12 = (int *)v59;
    if (v60 != v59)
    {
      v13 = 0;
      while (v13)
      {
        v14 = v12[v13];
        if (v14 > v12[(v13 - 1)])
          goto LABEL_8;
LABEL_56:
        ++v13;
        v12 = (int *)v59;
        if (v13 >= (v60 - (_BYTE *)v59) >> 2)
        {
          v45 = (char *)v56 - (char *)__p;
          goto LABEL_59;
        }
      }
      v14 = *v12;
LABEL_8:
      if (v14 >= 0)
        v15 = v14;
      else
        v15 = -v14;
      v16 = CoreNLP::WordEmbedding::computeCosineDistance(a1, *(const float **)a2, v15);
      v17 = v16 > a5 || v16 < 0.00000011921;
      if (!v17 && (v14 & 0x80000000) == 0)
      {
        v18 = v16;
        v19 = __p;
        v20 = v56;
        v21 = (char *)v56 - (char *)__p;
        v22 = ((char *)v56 - (char *)__p) >> 3;
        if (v22 >= a3)
        {
          v24 = *__p;
          if (v16 < *__p)
          {
            if (v21 >= 9)
            {
              v25 = *((_DWORD *)__p + 1);
              std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::less<std::pair<float,int>> &,std::__wrap_iter<std::pair<float,int>*>>((uint64_t)__p, (uint64_t)&v62, (unint64_t)v21 >> 3);
              if (v56 - 2 == v26)
              {
                *v26 = v24;
                *((_DWORD *)v26 + 1) = v25;
              }
              else
              {
                *v26 = *(v56 - 2);
                v26[1] = *(v56 - 1);
                *(v56 - 2) = v24;
                *((_DWORD *)v56 - 1) = v25;
                std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<std::pair<float,int>> &,std::__wrap_iter<std::pair<float,int>*>>((uint64_t)__p, (uint64_t)(v26 + 2), (uint64_t)&v62, ((char *)(v26 + 2) - (char *)__p) >> 3);
              }
            }
            v34 = (uint64_t)v56;
            v35 = v56 - 2;
            v57 = v35;
            if ((unint64_t)v35 >= v58[0])
            {
              v36 = __p;
              v37 = ((char *)v35 - (char *)__p) >> 3;
              v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 61)
                std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
              v39 = v58[0] - (_QWORD)__p;
              if ((uint64_t)(v58[0] - (_QWORD)__p) >> 2 > v38)
                v38 = v39 >> 2;
              if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
                v40 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v40 = v38;
              if (v40)
              {
                v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v58, v40);
                v36 = __p;
                v35 = v57;
              }
              else
              {
                v41 = 0;
              }
              v42 = &v41[8 * v37];
              *(float *)v42 = v18;
              *((_DWORD *)v42 + 1) = v14;
              v43 = v42;
              if (v35 != v36)
              {
                do
                {
                  v44 = *((_QWORD *)v35 - 1);
                  v35 -= 2;
                  *((_QWORD *)v43 - 1) = v44;
                  v43 -= 8;
                }
                while (v35 != v36);
                v36 = __p;
              }
              v34 = (uint64_t)(v42 + 8);
              __p = (float *)v43;
              v58[0] = &v41[8 * v40];
              if (v36)
                operator delete(v36);
            }
            else
            {
              *(float *)(v34 - 8) = v18;
              *(_DWORD *)(v34 - 4) = v14;
            }
            v56 = (float *)v34;
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<std::pair<float,int>> &,std::__wrap_iter<std::pair<float,int>*>>((uint64_t)__p, v34, (uint64_t)&v62, (v34 - (uint64_t)__p) >> 3);
          }
        }
        else
        {
          if ((unint64_t)v56 >= v58[0])
          {
            v27 = v22 + 1;
            if ((v22 + 1) >> 61)
              std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
            v28 = v58[0] - (_QWORD)__p;
            if ((uint64_t)(v58[0] - (_QWORD)__p) >> 2 > v27)
              v27 = v28 >> 2;
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
              v29 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v29 = v27;
            if (v29)
            {
              v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v58, v29);
              v19 = __p;
              v20 = v56;
            }
            else
            {
              v30 = 0;
            }
            v31 = &v30[8 * v22];
            *(float *)v31 = v18;
            *((_DWORD *)v31 + 1) = v14;
            v32 = v31;
            if (v20 != v19)
            {
              do
              {
                v33 = *((_QWORD *)v20 - 1);
                v20 -= 2;
                *((_QWORD *)v32 - 1) = v33;
                v32 -= 8;
              }
              while (v20 != v19);
              v19 = __p;
            }
            v23 = (uint64_t)(v31 + 8);
            __p = (float *)v32;
            v58[0] = &v30[8 * v29];
            if (v19)
              operator delete(v19);
          }
          else
          {
            *v56 = v16;
            *((_DWORD *)v56 + 1) = v14;
            v23 = (uint64_t)(v56 + 2);
          }
          v56 = (float *)v23;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<std::pair<float,int>> &,std::__wrap_iter<std::pair<float,int>*>>((uint64_t)__p, v23, (uint64_t)&v62, (v23 - (uint64_t)__p) >> 3);
        }
      }
      goto LABEL_56;
    }
    v45 = 0;
LABEL_59:
    v46 = (int)(v45 >> 3);
    std::vector<std::pair<std::string,float>>::resize(a4, v46);
    v47 = __p;
    if (__p == v56)
    {
      v46 = (unint64_t)v45 >> 3;
    }
    else
    {
      v48 = 32 * v46 - 8;
      do
      {
        v49 = *(_DWORD *)v47;
        v50 = *a4;
        MEMORY[0x19401E64C](*a4 + v48 - 24, *((_QWORD *)a1 + 341) + *(unsigned int *)(*((_QWORD *)a1 + 342) + 4 * *((int *)v47 + 1)));
        *(_DWORD *)(v50 + v48) = v49;
        if ((char *)v56 - (char *)__p >= 9)
        {
          v51 = *__p;
          v52 = *((_DWORD *)__p + 1);
          std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::less<std::pair<float,int>> &,std::__wrap_iter<std::pair<float,int>*>>((uint64_t)__p, (uint64_t)&v62, (unint64_t)((char *)v56 - (char *)__p) >> 3);
          if (v56 - 2 == v53)
          {
            *v53 = v51;
            *((_DWORD *)v53 + 1) = v52;
          }
          else
          {
            *v53 = *(v56 - 2);
            v53[1] = *(v56 - 1);
            *(v56 - 2) = v51;
            *((_DWORD *)v56 - 1) = v52;
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<std::pair<float,int>> &,std::__wrap_iter<std::pair<float,int>*>>((uint64_t)__p, (uint64_t)(v53 + 2), (uint64_t)&v62, ((char *)(v53 + 2) - (char *)__p) >> 3);
          }
        }
        v47 = __p;
        v54 = v56 - 2;
        v56 = v54;
        v48 -= 32;
        LODWORD(v46) = v46 - 1;
      }
      while (__p != v54);
      v47 = v54;
    }
    if ((int)v46 >= 1)
    {
      std::vector<std::pair<std::string,float>>::erase((uint64_t)a4, *a4, (__int128 *)(*a4 + 32 * v46));
      v47 = __p;
    }
    if (v47)
      operator delete(v47);
    if (v59)
    {
      v60 = v59;
      operator delete(v59);
    }
  }
}

void sub_191CEFDC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
  {
    a10 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a13)
  {
    a14 = (uint64_t)a13;
    operator delete(a13);
  }
  std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

float CoreNLP::WordEmbedding::computeCosineDistance(CoreNLP::WordEmbedding *this, const float *a2, int a3)
{
  uint64_t v3;
  float v4;
  uint64_t v5;
  int v6;
  float v7;
  float v8;
  float v9;
  float *v10;
  int v11;
  const float *v12;
  float v13;
  float v14;
  float v15;
  float v16;

  if (a3 < 0 || *((_DWORD *)this + 678) <= a3)
    return 2.0;
  v3 = *((unsigned int *)this + 672);
  v4 = 2.0;
  if ((int)v3 >= 1)
  {
    v5 = 0;
    v6 = *((_DWORD *)this + 9);
    v7 = 0.0;
    v8 = 0.0;
    v9 = 0.0;
    do
    {
      if (v6 >= 1)
      {
        v10 = (float *)(*((_QWORD *)this + 337)
                      + 4
                      * *((_DWORD *)this + 671)
                      * (*(unsigned __int8 *)(*((_QWORD *)this + 340) + (int)v3 * a3 + v5) | ((_DWORD)v5 << 8)));
        v11 = *((_DWORD *)this + 9);
        v12 = a2;
        do
        {
          v13 = *v12++;
          v14 = v13;
          v8 = v8 + (float)(v14 * v14);
          v15 = *v10++;
          v9 = v9 + (float)(v15 * v15);
          v7 = v7 + (float)(v14 * v15);
          --v11;
        }
        while (v11);
        a2 += (v6 - 1) + 1;
      }
      ++v5;
    }
    while (v5 != v3);
    v16 = v9 * v8;
    if (v16 > 0.0)
      v4 = 2.0 - (v7 + v7) / sqrtf(v16);
  }
  return sqrtf(fmaxf(v4, 0.0));
}

void std::vector<std::pair<std::string,float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 32 * a2;
      while (v3 != v5)
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
        v3 -= 32;
      }
      a1[1] = v5;
    }
  }
  else
  {
    std::vector<std::pair<std::string,float>>::__append(a1, a2 - v4);
  }
}

uint64_t std::vector<std::pair<std::string,float>>::erase(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  if ((__int128 *)a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,float> *,std::pair<std::string,float> *,std::pair<std::string,float> *>((uint64_t)&v9, a3, *(__int128 **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        if (*(char *)(v7 - 9) < 0)
          operator delete(*(void **)(v7 - 32));
        v7 -= 32;
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

void CoreNLP::WordEmbedding::getNearestNeighbors(CoreNLP::WordEmbedding *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>, float a5@<S0>)
{
  BOOL v10;
  int v11;
  int v12;
  char AverageEmbedding;
  void *__p;
  void *v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  void *v20;
  _BYTE *v21;
  __int128 v22;
  uint64_t v23;
  std::string **v24;
  char v25;
  std::string v26;
  __int128 v27;

  *(_QWORD *)&v27 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(CoreNLP::WordEmbedding *))(*(_QWORD *)a1 + 72))(a1) == 10
    || (*(unsigned int (**)(CoreNLP::WordEmbedding *))(*(_QWORD *)a1 + 72))(a1) == 4)
  {
    v10 = a3 < 50;
    v11 = 50;
  }
  else
  {
    v10 = a3 < 20;
    v11 = 20;
  }
  if (!v10)
    a3 = v11;
  v22 = 0uLL;
  v23 = 0;
  v12 = (*(uint64_t (**)(CoreNLP::WordEmbedding *))(*(_QWORD *)a1 + 64))(a1);
  LODWORD(v17) = 0;
  std::vector<float>::vector(&v20, v12, &v17);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v26 = *(std::string *)a2;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v24 = &v17;
  v25 = 0;
  v17 = (std::string *)operator new(0x18uLL);
  v18 = v17;
  v19 = v17 + 1;
  v18 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v19, (__int128 *)&v26, &v27, v17);
  AverageEmbedding = CoreNLP::WordEmbedding::getAverageEmbedding(a1, (uint64_t *)&v17, (uint64_t)&v20);
  v24 = &v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((AverageEmbedding & 1) != 0)
      goto LABEL_12;
LABEL_15:
    *(_OWORD *)a4 = v22;
    a4[2] = v23;
    v23 = 0;
    v22 = 0uLL;
    goto LABEL_16;
  }
  operator delete(v26.__r_.__value_.__l.__data_);
  if ((AverageEmbedding & 1) == 0)
    goto LABEL_15;
LABEL_12:
  __p = 0;
  v15 = 0;
  v16 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v20, (uint64_t)v21, (v21 - (_BYTE *)v20) >> 2);
  CoreNLP::WordEmbedding::getNearestNeighborsForVector(a1, (uint64_t)&__p, a3, a4, a5);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
LABEL_16:
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  v20 = &v22;
  std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_191CF022C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *__p, char *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p)
  {
    a17 = __p;
    operator delete(__p);
  }
  __p = &a19;
  std::vector<std::pair<std::string,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::WordEmbedding::getWordID(CoreNLP::WordEmbedding *this, const char *__s2, int *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;

  v3 = *((_QWORD *)this + 341);
  if (!v3)
    return 0;
  v4 = (unsigned int *)*((_QWORD *)this + 342);
  if (!v4)
    return 0;
  v5 = (unsigned int *)*((_QWORD *)this + 343);
  if (!v5 || v5 == v4)
    return 0;
  v9 = v5 - v4;
  v10 = (unsigned int *)*((_QWORD *)this + 342);
  do
  {
    v11 = &v10[v9 >> 1];
    v13 = *v11;
    v12 = v11 + 1;
    v14 = strcmp((const char *)(v3 + v13), __s2);
    if (v14 >= 0)
      v9 >>= 1;
    else
      v9 += ~(v9 >> 1);
    if (v14 < 0)
      v10 = v12;
  }
  while (v9);
  if (v10 == v5 || strcmp((const char *)(v3 + *v10), __s2))
    return 0;
  *a3 = (unint64_t)((char *)v10 - (char *)v4) >> 2;
  return 1;
}

float CoreNLP::WordEmbedding::getDistance(CoreNLP::WordEmbedding *a1, const char *a2, uint64_t a3)
{
  const char *v5;
  int v7[2];

  *(_QWORD *)v7 = 0;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  if (CoreNLP::WordEmbedding::getWordID(a1, a2, &v7[1])
    && (*(char *)(a3 + 23) >= 0 ? (v5 = (const char *)a3) : (v5 = *(const char **)a3),
        CoreNLP::WordEmbedding::getWordID(a1, v5, v7)))
  {
    return CoreNLP::WordEmbedding::computeCosineDistance(a1, v7[1], v7[0]);
  }
  else
  {
    return 2.0;
  }
}

float CoreNLP::WordEmbedding::computeCosineDistance(CoreNLP::WordEmbedding *this, int a2, int a3)
{
  int v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float *v15;
  float *v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;

  if (a2 < 0)
    return 2.0;
  v3 = *((_DWORD *)this + 678);
  if (v3 <= a3 || a3 < 0 || v3 <= a2)
    return 2.0;
  v4 = *((unsigned int *)this + 672);
  v5 = 2.0;
  if ((int)v4 >= 1)
  {
    v6 = 0;
    v7 = *((_QWORD *)this + 340);
    v8 = v7 + (int)v4 * a2;
    v9 = v7 + (int)v4 * a3;
    v10 = *((_QWORD *)this + 337);
    v11 = *((_DWORD *)this + 671);
    v12 = 0.0;
    v13 = 0.0;
    v14 = 0.0;
    do
    {
      if (*((int *)this + 9) >= 1)
      {
        v15 = (float *)(v10 + 4 * (*(unsigned __int8 *)(v9 + v6) | ((_DWORD)v6 << 8)) * v11);
        v16 = (float *)(v10 + 4 * v11 * (*(unsigned __int8 *)(v8 + v6) | ((_DWORD)v6 << 8)));
        v17 = *((_DWORD *)this + 9);
        do
        {
          v18 = *v16++;
          v19 = v18;
          v13 = v13 + (float)(v19 * v19);
          v20 = *v15++;
          v14 = v14 + (float)(v20 * v20);
          v12 = v12 + (float)(v19 * v20);
          --v17;
        }
        while (v17);
      }
      ++v6;
    }
    while (v6 != v4);
    v21 = v14 * v13;
    if (v21 > 0.0)
      v5 = 2.0 - (v12 + v12) / sqrtf(v21);
  }
  return sqrtf(fmaxf(v5, 0.0));
}

void CoreNLP::SingletonResourceManager<NLLanguageID,CoreNLP::ReadOnlyFile<char>>::clearEmptyResources()
{
  if (CoreNLP::SingletonResourceManager<NLLanguageID,CoreNLP::ReadOnlyFile<char>>::getQueue(void)::onceToken != -1)
    dispatch_once(&CoreNLP::SingletonResourceManager<NLLanguageID,CoreNLP::ReadOnlyFile<char>>::getQueue(void)::onceToken, &__block_literal_global_24);
  dispatch_sync((dispatch_queue_t)CoreNLP::SingletonResourceManager<NLLanguageID,CoreNLP::ReadOnlyFile<char>>::getQueue(void)::queue, &__block_literal_global_29);
}

_QWORD *CoreNLP::WordEmbedding::getCentroids@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  unint64_t v6;
  char *v7;
  int v8;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v8 = 0;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  result = (_QWORD *)CoreNLP::WordEmbedding::getWordID((CoreNLP::WordEmbedding *)a1, a2, &v8);
  if ((_DWORD)result)
  {
    v6 = *(int *)(a1 + 2688);
    v7 = (char *)(*(_QWORD *)(a1 + 2720) + (int)v6 * (uint64_t)v8);
    return std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a3, v7, &v7[v6], v6);
  }
  return result;
}

void sub_191CF05B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const std::locale::facet *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::locale v19;
  char v20;

  MEMORY[0x19401E73C](&v20, a1, 0);
  if (!v20)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v4 = *(_QWORD *)(*a1 - 24);
  v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  v7 = std::locale::use_facet(&v19, MEMORY[0x1E0DE4A90]);
  std::locale::~locale(&v19);
  v8 = 0;
  v9 = a1 + 5;
  if (v5 >= 1)
    v10 = v6;
  else
    v10 = 0x7FFFFFFFFFFFFFF7;
  while (1)
  {
    v11 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v12 = (_BYTE *)v11[3];
    if (v12 == (_BYTE *)v11[4])
      break;
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    v14 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v15 = v14[3];
    if (v15 == v14[4])
      (*(void (**)(_QWORD *))(*v14 + 80))(v14);
    else
      v14[3] = v15 + 1;
    if (v10 == ++v8)
    {
      v16 = 0;
      v17 = *a1;
      *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
      goto LABEL_25;
    }
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*v11 + 72))(v11);
  if (v13 != -1)
    goto LABEL_14;
  v16 = 2;
LABEL_23:
  v17 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  if (!v8)
    v16 |= 4u;
LABEL_25:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_191CF0788(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  _QWORD *v9;
  uint64_t v11;

  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  v11 = *v9;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v9 + *(_QWORD *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x191CF0754);
  }
  __cxa_rethrow();
}

void sub_191CF07EC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::vector<CoreNLP::Node *>::__init_with_size[abi:ne180100]<CoreNLP::Node **,CoreNLP::Node **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_191CF085C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN7CoreNLP24SingletonResourceManagerI12NLLanguageIDNS_12ReadOnlyFileIcEEE21getPersistentResourceERKS1_U13block_pointerFPS3_vE_block_invoke(uint64_t a1)
{
  uint64_t **v2;
  char *v3;
  int v4;
  char *v5;
  int v6;
  BOOL v7;
  char **v8;
  _DWORD *v9;
  uint64_t *v10;
  _DWORD *v11;

  if (CoreNLP::SingletonResourceManager<NLLanguageID,CoreNLP::ReadOnlyFile<char>>::getPersistentCache(void)::onceToken != -1)
    dispatch_once(&CoreNLP::SingletonResourceManager<NLLanguageID,CoreNLP::ReadOnlyFile<char>>::getPersistentCache(void)::onceToken, &__block_literal_global_26);
  v2 = (uint64_t **)CoreNLP::SingletonResourceManager<NLLanguageID,CoreNLP::ReadOnlyFile<char>>::getPersistentCache(void)::cache;
  v3 = (char *)*((_QWORD *)CoreNLP::SingletonResourceManager<NLLanguageID,CoreNLP::ReadOnlyFile<char>>::getPersistentCache(void)::cache
               + 1);
  if (!v3)
    goto LABEL_13;
  v4 = **(_DWORD **)(a1 + 48);
  v5 = (char *)CoreNLP::SingletonResourceManager<NLLanguageID,CoreNLP::ReadOnlyFile<char>>::getPersistentCache(void)::cache
     + 8;
  do
  {
    v6 = *((_DWORD *)v3 + 8);
    v7 = v6 < v4;
    if (v6 >= v4)
      v8 = (char **)v3;
    else
      v8 = (char **)(v3 + 8);
    if (!v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 != (char *)CoreNLP::SingletonResourceManager<NLLanguageID,CoreNLP::ReadOnlyFile<char>>::getPersistentCache(void)::cache
           + 8
    && v4 >= *((_DWORD *)v5 + 8))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *((_QWORD *)v5 + 5);
  }
  else
  {
LABEL_13:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    v9 = *(_DWORD **)(a1 + 48);
    v10 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v11 = v9;
    std::__tree<std::__value_type<NLLanguageID,_LXLemmatizer const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,_LXLemmatizer const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,_LXLemmatizer const*>>>::__emplace_unique_key_args<NLLanguageID,std::piecewise_construct_t const&,std::tuple<NLLanguageID const&>,std::tuple<>>(v2, v9, (uint64_t)&std::piecewise_construct, &v11)[5] = v10;
  }
}

void sub_191CF096C(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 24) = 0;
  __cxa_end_catch();
  JUMPOUT(0x191CF0904);
}

void ___ZN7CoreNLP24SingletonResourceManagerI12NLLanguageIDNS_12ReadOnlyFileIcEEE8getQueueEv_block_invoke()
{
  NSObject *v0;
  NSObject *global_queue;

  v0 = dispatch_queue_create("com.apple.CoreNLP.SingletonResourceManager", 0);
  CoreNLP::SingletonResourceManager<NLLanguageID,CoreNLP::ReadOnlyFile<char>>::getQueue(void)::queue = (uint64_t)v0;
  global_queue = dispatch_get_global_queue(-32768, 0);
  dispatch_set_target_queue(v0, global_queue);
}

uint64_t ___ZN7CoreNLP24SingletonResourceManagerI12NLLanguageIDNS_12ReadOnlyFileIcEEE18getPersistentCacheEv_block_invoke()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)result = result + 8;
  CoreNLP::SingletonResourceManager<NLLanguageID,CoreNLP::ReadOnlyFile<char>>::getPersistentCache(void)::cache = (_UNKNOWN *)result;
  return result;
}

uint64_t *std::set<std::string>::set[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_191CF0A48(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<float>>,std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,std::vector<float> &>::operator=[abi:ne180100]<std::string const,std::vector<float>,(void *)0>((uint64_t)v18, (const std::string *)(v9 + 2));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(v5, v18[0], leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<unsigned long,std::vector<unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<unsigned long>>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_multi<std::pair<std::string const,std::vector<float>> const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_191CF0C5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,std::vector<float> &>::operator=[abi:ne180100]<std::string const,std::vector<float>,(void *)0>(uint64_t a1, const std::string *a2)
{
  char *v4;

  std::string::operator=(*(std::string **)a1, a2);
  v4 = *(char **)(a1 + 8);
  if (v4 != (char *)&a2[1])
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v4, a2[1].__r_.__value_.__l.__data_, a2[1].__r_.__value_.__l.__size_, (uint64_t)(a2[1].__r_.__value_.__l.__size_ - a2[1].__r_.__value_.__r.__words[0]) >> 2);
  return a1;
}

_QWORD *std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__find_leaf_high(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v5 = (_QWORD *)v4;
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v5;
        result = v5;
        if (!*v5)
          goto LABEL_9;
      }
      v4 = v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_multi<std::pair<std::string const,std::vector<float>> const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__construct_node<std::pair<std::string const,std::vector<float>> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_191CF0DF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__construct_node<std::pair<std::string const,std::vector<float>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::vector<float>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_191CF0E58(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<float>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void sub_191CF0ED8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](uint64_t **a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = *a1;
  v5 = (*a1)[1];
  v4 = (*a1)[2];
  v6 = *a1;
  if (v5 >= v4)
  {
    v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v6, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v6, a2);
    v7 = v5 + 24;
  }
  v3[1] = v7;
  return a1;
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<char const*>(uint64_t *a1, char **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  uint64_t v11;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  __v.__first_ = v10;
  __v.__begin_ = v10 + v4;
  __v.__end_ = __v.__begin_;
  __v.__end_cap_.__value_ = &v10[v9];
  std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, *a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v11 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v11;
}

void sub_191CF1034(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD v19[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      v14 = 32 * a2;
      v15 = v7 + 32 * a2;
      do
      {
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        v7 += 32;
        v14 -= 32;
      }
      while (v14);
      v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - *a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v19[4] = result;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>>(result, v12);
    else
      v13 = 0;
    v16 = &v13[32 * v10];
    v19[0] = v13;
    v19[1] = v16;
    v19[3] = &v13[32 * v12];
    v17 = 32 * a2;
    v18 = &v16[32 * a2];
    do
    {
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_DWORD *)v16 + 6) = 0;
      *((_QWORD *)v16 + 2) = 0;
      v16 += 32;
      v17 -= 32;
    }
    while (v17);
    v19[2] = v18;
    std::vector<std::pair<std::string,float>>::__swap_out_circular_buffer(a1, v19);
    return std::__split_buffer<std::pair<std::string,float>>::~__split_buffer((uint64_t)v19);
  }
  return result;
}

void sub_191CF1158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,float>>,std::reverse_iterator<std::pair<std::string,float>*>,std::reverse_iterator<std::pair<std::string,float>*>,std::reverse_iterator<std::pair<std::string,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,float>>,std::reverse_iterator<std::pair<std::string,float>*>,std::reverse_iterator<std::pair<std::string,float>*>,std::reverse_iterator<std::pair<std::string,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,float>>,std::reverse_iterator<std::pair<std::string,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,float>>,std::reverse_iterator<std::pair<std::string,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,float>>,std::reverse_iterator<std::pair<std::string,float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,float>>,std::reverse_iterator<std::pair<std::string,float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 32;
  }
}

uint64_t std::__split_buffer<std::pair<std::string,float>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::pair<std::string,float>>::__destruct_at_end[abi:ne180100](a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::pair<std::string,float>>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,float> *,std::pair<std::string,float> *,std::pair<std::string,float> *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      *(_DWORD *)(a4 + 24) = *((_DWORD *)v5 + 6);
      a4 += 32;
      v5 += 2;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void ___ZN7CoreNLP24SingletonResourceManagerI12NLLanguageIDNS_12ReadOnlyFileIcEEE19clearEmptyResourcesEv_block_invoke()
{
  uint64_t **v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  if (CoreNLP::SingletonResourceManager<NLLanguageID,CoreNLP::ReadOnlyFile<char>>::getPersistentCache(void)::onceToken != -1)
    dispatch_once(&CoreNLP::SingletonResourceManager<NLLanguageID,CoreNLP::ReadOnlyFile<char>>::getPersistentCache(void)::onceToken, &__block_literal_global_26);
  v0 = (uint64_t **)CoreNLP::SingletonResourceManager<NLLanguageID,CoreNLP::ReadOnlyFile<char>>::getPersistentCache(void)::cache;
  v2 = (uint64_t *)((char *)CoreNLP::SingletonResourceManager<NLLanguageID,CoreNLP::ReadOnlyFile<char>>::getPersistentCache(void)::cache
                 + 8);
  v1 = *(uint64_t **)CoreNLP::SingletonResourceManager<NLLanguageID,CoreNLP::ReadOnlyFile<char>>::getPersistentCache(void)::cache;
  if (*(_UNKNOWN **)CoreNLP::SingletonResourceManager<NLLanguageID,CoreNLP::ReadOnlyFile<char>>::getPersistentCache(void)::cache != (_UNKNOWN *)((char *)CoreNLP::SingletonResourceManager<NLLanguageID,CoreNLP::ReadOnlyFile<char>>::getPersistentCache(void)::cache + 8))
  {
    do
    {
      v3 = (uint64_t *)v1[1];
      if (v1[5])
      {
        if (v3)
        {
          do
          {
            v4 = v3;
            v3 = (uint64_t *)*v3;
          }
          while (v3);
        }
        else
        {
          do
          {
            v4 = (uint64_t *)v1[2];
            v5 = *v4 == (_QWORD)v1;
            v1 = v4;
          }
          while (!v5);
        }
      }
      else
      {
        v6 = v1;
        if (v3)
        {
          do
          {
            v4 = v3;
            v3 = (uint64_t *)*v3;
          }
          while (v3);
        }
        else
        {
          do
          {
            v4 = (uint64_t *)v6[2];
            v5 = *v4 == (_QWORD)v6;
            v6 = v4;
          }
          while (!v5);
        }
        std::__tree<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char> *>,std::__map_value_compare<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char> *>,std::less<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>>,true>,std::allocator<std::__value_type<std::pair<CoreNLP::NLTagSchemeType,NLLanguageID>,CoreNLP::ReadOnlyFile<char> *>>>::__remove_node_pointer(v0, v1);
        operator delete(v1);
      }
      v1 = v4;
    }
    while (v4 != v2);
  }
}

_QWORD *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<char>::__vallocate[abi:ne180100](v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v16 = a3 - __src;
    if (v16)
      result = memmove(v9, __src, v16);
    v15 = &v9[v16];
    goto LABEL_20;
  }
  v14 = &__src[v13];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v13);
    v9 = (char *)v7[1];
  }
  if (a3 != v14)
    result = memmove(v9, v14, a3 - v14);
  v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

_DWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::back_insert_iterator<std::vector<float>>,0>(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
    std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100](&v6, v3++);
  while (v3 != v4);
  return v4;
}

uint64_t *std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = *a1;
  v5 = *(_DWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_DWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v6, v12);
      v8 = *(_DWORD **)v4;
      v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

void CoreNLP::logBlock(int a1, const __CFString *this)
{
  void **v2;
  uint64_t v3;
  void *__p[2];
  unsigned __int8 v5;

  CoreNLP::getUTF8StringFromCFString(this, __p);
  if ((v5 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v5 & 0x80u) == 0)
    v3 = v5;
  else
    v3 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)v2, v3);
  if ((char)v5 < 0)
    operator delete(__p[0]);
}

void sub_191CF17AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreNLP::annotationToTrainingLabel(int a1@<W1>, unsigned __int16 *a2@<X2>, std::string *a3@<X8>)
{
  int v6;
  int v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  const std::string::value_type *v13;
  const char *v15;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
  }
  if (a1 == 6)
  {
    v6 = *((unsigned __int8 *)a2 + 23);
    if (*((char *)a2 + 23) < 0)
    {
      v10 = *((_QWORD *)a2 + 1);
      if (v10 == 3)
      {
        if (**(_WORD **)a2 == 21072 && *(_BYTE *)(*(_QWORD *)a2 + 2) == 80)
          goto LABEL_42;
        v10 = *((_QWORD *)a2 + 1);
      }
      else if (v10 == 7 && **(_DWORD **)a2 == 1852797520 && *(_DWORD *)(*(_QWORD *)a2 + 3) == 1853189998)
      {
        goto LABEL_42;
      }
      if (v10 != 4)
        goto LABEL_38;
      if (**(_DWORD **)a2 == 1146114640)
        goto LABEL_42;
      if (*((_QWORD *)a2 + 1) != 4)
        goto LABEL_38;
      v13 = *(const std::string::value_type **)a2;
      if (**(_DWORD **)a2 == 1380995664)
        goto LABEL_42;
      if ((v6 & 0x80) == 0)
      {
        v13 = (const std::string::value_type *)a2;
        if (v6 != 4)
          goto LABEL_38;
      }
    }
    else
    {
      if (v6 == 3)
      {
        v7 = *((unsigned __int8 *)a2 + 2);
        v8 = *a2 == 21072;
        v9 = 80;
LABEL_34:
        if (v8 && v7 == v9)
          goto LABEL_42;
        goto LABEL_38;
      }
      if (v6 != 4)
      {
        if (v6 == 7)
        {
          v7 = *(_DWORD *)((char *)a2 + 3);
          v8 = *(_DWORD *)a2 == 1852797520;
          v9 = 1853189998;
          goto LABEL_34;
        }
LABEL_38:
        if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "PRPT")
          && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "WP")
          && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "EX")
          && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "WRB"))
        {
          v15 = "NN";
          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "NNS")
            && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "NN"))
          {
            v15 = "NNP";
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "NNPS")
              && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "NNP"))
            {
              v15 = "JJ";
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "Adjective")
                && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "JJ")
                && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "JJS")
                && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "JJR"))
              {
                v15 = "RB";
                if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "Adverb")
                  && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "RB")
                  && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "RBC")
                  && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "RBN")
                  && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "RBS")
                  && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "RBW"))
                {
                  v15 = "DT";
                  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "Determiner")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "DT")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "DTO")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "DTP")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "DTW"))
                  {
                    v15 = "RP";
                    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "Particle")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "RP")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "RPP")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "RBP")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "TO")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "PRE"))
                    {
                      v15 = "IN";
                      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "Preposition")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "IN"))
                      {
                        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "Number")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "LS"))
                        {
                          v15 = "CD";
                        }
                        else
                        {
                          v15 = "CD";
                          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "CD"))
                          {
                            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "Conjunction")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "CS"))
                            {
                              v15 = "CC";
                            }
                            else
                            {
                              v15 = "CC";
                              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "CC"))
                              {
                                v15 = "UH";
                                if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "Interjection")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "UH"))
                                {
                                  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "VB")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "VBC")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "VBD")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "VBF")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "VBG")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "VBI")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2,
                                         "VBM")
                                    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "VBN")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "VBP")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "VBR")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "VBS")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "VBT")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "VBZ"))
                                  {
                                    std::string::operator=(a3, (const std::string *)a2);
                                    return;
                                  }
                                  v15 = "Other";
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          goto LABEL_43;
        }
LABEL_42:
        v15 = "PRP";
LABEL_43:
        MEMORY[0x19401E64C](a3, v15);
        return;
      }
      if (*(_DWORD *)a2 == 1146114640)
        goto LABEL_42;
      v13 = (const std::string::value_type *)a2;
      if (*(_DWORD *)a2 == 1380995664)
        goto LABEL_42;
    }
    if (*(_DWORD *)v13 == 1397772880)
      goto LABEL_42;
    goto LABEL_38;
  }
}

void sub_191CF1E0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void CoreNLP::tagToEvaluationLabel(_QWORD *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  std::string v10;

  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a5, "Other");
  if (a4 == 6)
  {
    switch(a3)
    {
      case 16:
      case 18:
        CoreNLP::getUTF8StringFromCFString(NLLexicalClassConjunction[0], &v10);
        goto LABEL_23;
      case 17:
      case 29:
        CoreNLP::getUTF8StringFromCFString(NLLexicalClassNumber[0], &v10);
        goto LABEL_23;
      case 19:
      case 20:
      case 21:
      case 22:
        CoreNLP::getUTF8StringFromCFString(NLLexicalClassDeterminer[0], &v10);
        goto LABEL_23;
      case 23:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 65:
      case 66:
        CoreNLP::getUTF8StringFromCFString(NLLexicalClassPronoun[0], &v10);
        goto LABEL_23;
      case 25:
        CoreNLP::getUTF8StringFromCFString(NLLexicalClassPreposition[0], &v10);
        goto LABEL_23;
      case 26:
      case 27:
      case 28:
        CoreNLP::getUTF8StringFromCFString(NLLexicalClassAdjective[0], &v10);
        goto LABEL_23;
      case 30:
      case 31:
      case 32:
      case 33:
        CoreNLP::getUTF8StringFromCFString(NLLexicalClassNoun[0], &v10);
        goto LABEL_23;
      case 34:
      case 43:
      case 47:
      case 48:
      case 49:
        CoreNLP::getUTF8StringFromCFString(NLLexicalClassParticle[0], &v10);
        goto LABEL_23;
      case 40:
      case 41:
      case 42:
      case 45:
      case 46:
        CoreNLP::getUTF8StringFromCFString(NLLexicalClassAdverb[0], &v10);
        goto LABEL_23;
      case 50:
        CoreNLP::getUTF8StringFromCFString(NLLexicalClassInterjection[0], &v10);
        goto LABEL_23;
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
        CoreNLP::getUTF8StringFromCFString(NLLexicalClassVerb[0], &v10);
        goto LABEL_23;
      default:
        MEMORY[0x19401E64C](a5, "Other");
        break;
    }
  }
  else
  {
    if (a4 != 7)
      return;
    if (a2 == 4)
    {
      CoreNLP::TaggingModelManager::tagToLabel(a1, a3, 7, 4, &v10);
    }
    else
    {
      switch(a3)
      {
        case 'E':
          CoreNLP::getUTF8StringFromCFString(NLNamedEntityOrganizationName[0], &v10);
          break;
        case 'D':
          CoreNLP::getUTF8StringFromCFString(NLNamedEntityPlaceName[0], &v10);
          break;
        case 'C':
          CoreNLP::getUTF8StringFromCFString(NLNamedEntityPersonalName[0], &v10);
          break;
        default:
          return;
      }
    }
LABEL_23:
    if (*(char *)(a5 + 23) < 0)
      operator delete(*(void **)a5);
    *(std::string *)a5 = v10;
  }
}

void sub_191CF206C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void CoreNLP::tokenizeGazetteerList(uint64_t a1, int a2, uint64_t **a3)
{
  __CFArray *Mutable;
  CoreNLP *v6;
  std::locale::id *v7;
  const std::locale::facet *v8;
  unsigned __int8 v9;
  _QWORD *v10;
  std::string::size_type v11;
  uint64_t *v12;
  std::string *v13;
  __CFString *v14;
  CFIndex Length;
  CFIndex v16;
  uint64_t *v17;
  __CFString *v18;
  CFIndex v19[3];
  _QWORD v20[6];
  std::string v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  CFMutableStringRef v25;
  std::string v26;
  std::string __p;
  std::string __str;
  std::string *p_p;
  _QWORD v30[2];
  _BYTE v31[408];
  _QWORD v32[21];
  CFRange v33;

  v32[19] = *MEMORY[0x1E0C80C00];
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(Mutable, kNLTagSchemeTokenType[0]);
  v6 = (CoreNLP *)NLTaggerCreate(Mutable, 0);
  memset(&__str, 0, sizeof(__str));
  std::ifstream::basic_ifstream(v30);
  if ((v31[*(_QWORD *)(v30[0] - 24) + 16] & 5) == 0)
  {
    memset(&__p, 0, sizeof(__p));
    memset(&v26, 0, sizeof(v26));
    v22 = 0;
    v23 = &v22;
    v24 = 0x2000000000;
    v25 = 0;
    v25 = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    v7 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(_QWORD *)(v30[0] - 24)));
      v8 = std::locale::use_facet((const std::locale *)&v21, v7);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
      std::locale::~locale((std::locale *)&v21);
      v10 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v30, (uint64_t)&__str, v9);
      if ((*((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 32) & 5) != 0)
        break;
      v11 = std::string::find(&__str, 9, 0);
      std::string::basic_string(&v21, &__str, 0, v11, (std::allocator<char> *)&p_p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v21;
      std::string::basic_string(&v21, &__str, v11 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&p_p);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      v26 = v21;
      if (a2 == 4)
      {
        v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        v12 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)v12 + 7, (const void **)&v26.__r_.__value_.__l.__data_, (uint64_t)&v26);
      }
      else
      {
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v13 = &v26;
        else
          v13 = (std::string *)v26.__r_.__value_.__r.__words[0];
        v14 = (__CFString *)CFStringCreateWithCString(0, (const char *)v13, 0x8000100u);
        NLTaggerSetString(v6, v14);
        Length = CFStringGetLength(v14);
        v20[0] = MEMORY[0x1E0C809B0];
        v20[1] = 0x40000000;
        v20[2] = ___ZN7CoreNLP21tokenizeGazetteerListERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE12NLLanguageIDRNS0_3mapIS6_NS0_3setIS6_NS0_4lessIS6_EENS4_IS6_EEEESD_NS4_INS0_4pairIS7_SF_EEEEEE_block_invoke;
        v20[3] = &unk_1E2DF5438;
        v20[4] = &v22;
        v20[5] = v14;
        NLTaggerEnumerateTokens(v6, 0, 0, Length, (CoreNLP::NLAttributedToken *)4, (uint64_t)v20);
        CFRelease(v14);
        v16 = CFStringGetLength((CFStringRef)v23[3]);
        v19[0] = 0;
        v19[1] = v16;
        v19[2] = 0;
        CoreNLP::extractLowercaseUTF8((CFStringRef)v23[3], v19, 1, &v21);
        p_p = &__p;
        v17 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)v17 + 7, (const void **)&v21.__r_.__value_.__l.__data_, (uint64_t)&v21);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
      }
      v18 = (__CFString *)v23[3];
      v33.length = CFStringGetLength(v18);
      v33.location = 0;
      CFStringDelete(v18, v33);
    }
    CFRelease(Mutable);
    CFRelease(v6);
    CFRelease((CFTypeRef)v23[3]);
    _Block_object_dispose(&v22, 8);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v30[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x19401E70C](v31);
  std::istream::~istream();
  MEMORY[0x19401E928](v32);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_191CF24F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::locale a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  if (a35 < 0)
    operator delete(__p);
  if (a42 < 0)
    operator delete(a37);
  std::ifstream::~ifstream(&a51);
  if (a48 < 0)
    operator delete(a43);
  _Unwind_Resume(a1);
}

void ___ZN7CoreNLP21tokenizeGazetteerListERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE12NLLanguageIDRNS0_3mapIS6_NS0_3setIS6_NS0_4lessIS6_EENS4_IS6_EEEESD_NS4_INS0_4pairIS7_SF_EEEEEE_block_invoke(uint64_t a1, CFRange *a2)
{
  const __CFString *v3;

  v3 = CFStringCreateWithSubstring(0, *(CFStringRef *)(a1 + 40), *a2);
  if (CFStringGetLength(*(CFStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)) >= 1)
    CFStringAppend(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), CFSTR(" "));
  CFStringAppend(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), v3);
  CFRelease(v3);
}

char *CoreNLP::createNERGazetteerBF(uint64_t a1, int a2, size_t *a3, long double a4)
{
  uint64_t *v6;
  BOOL v7;
  std::string *v9;
  int data_low;
  int v13;
  std::string *v16;
  unsigned int v18;
  int v19;
  void **v20;
  char *v21;
  char **v22;
  const char *v23;
  char *v24;
  char *v25;
  char **v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  size_t *v38;
  std::string __p;
  std::string v40;
  std::string v41;
  char **v42;
  char *v43[2];
  void *v44[9];
  char v45;
  void *v46;
  char v47;
  void *v48[9];
  char v49;
  void *v50;
  char v51;
  void *v52[9];
  char v53;
  void *v54;
  char v55;
  uint64_t *v56;
  _QWORD *v57[3];

  *a3 = 0;
  v57[0] = 0;
  v57[1] = 0;
  v56 = (uint64_t *)v57;
  CoreNLP::tokenizeGazetteerList(a1, a2, &v56);
  BloomFilter::BloomFilter((BloomFilter *)v52);
  BloomFilter::BloomFilter((BloomFilter *)v48);
  v38 = a3;
  BloomFilter::BloomFilter((BloomFilter *)v44);
  v6 = v56;
  if (v56 != (uint64_t *)v57)
  {
    do
    {
      std::pair<std::string const,std::set<std::string>>::pair[abi:ne180100](&v41, (__int128 *)v6 + 2);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v41.__r_.__value_.__l.__size_ != 3)
          goto LABEL_65;
        v9 = (std::string *)v41.__r_.__value_.__r.__words[0];
        if (*(_WORD *)v41.__r_.__value_.__l.__data_ == 17744 && *(_BYTE *)(v41.__r_.__value_.__r.__words[0] + 2) == 82)
        {
LABEL_27:
          if ((*((_BYTE *)&v41.__r_.__value_.__s + 23) & 0x80) != 0)
          {
LABEL_34:
            if (v41.__r_.__value_.__l.__size_ == 3)
            {
              if (*(_WORD *)v41.__r_.__value_.__l.__data_ == 17744
                && *(_BYTE *)(v41.__r_.__value_.__r.__words[0] + 2) == 82)
              {
                goto LABEL_43;
              }
              v16 = (std::string *)v41.__r_.__value_.__r.__words[0];
LABEL_40:
              v18 = bswap32(LOWORD(v16->__r_.__value_.__l.__data_)) >> 16;
              if (v18 == 19535)
              {
                v19 = v16->__r_.__value_.__s.__data_[2] - 67;
              }
              else if (v18 < 0x4C4F)
              {
                v19 = -1;
              }
              else
              {
                v19 = 1;
              }
              if (v19)
                v20 = v44;
              else
                v20 = v48;
LABEL_50:
              v21 = v43[1];
              std::string::basic_string[abi:ne180100]<0>(&v40, "");
              std::string::basic_string[abi:ne180100]<0>(&__p, "");
              BloomFilter::init((uint64_t)v20, (unint64_t)v21, &v40, &__p, a4);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v40.__r_.__value_.__l.__data_);
              v22 = v42;
              if (v42 != v43)
              {
                do
                {
                  if (*((char *)v22 + 55) < 0)
                  {
                    v23 = v22[4];
                    v24 = v22[5];
                  }
                  else
                  {
                    v23 = (const char *)(v22 + 4);
                    LODWORD(v24) = *((unsigned __int8 *)v22 + 55);
                  }
                  BloomFilter::add((uint64_t)v20, v23, (int)v24);
                  v25 = v22[1];
                  if (v25)
                  {
                    do
                    {
                      v26 = (char **)v25;
                      v25 = *(char **)v25;
                    }
                    while (v25);
                  }
                  else
                  {
                    do
                    {
                      v26 = (char **)v22[2];
                      v7 = *v26 == (char *)v22;
                      v22 = v26;
                    }
                    while (!v7);
                  }
                  v22 = v26;
                }
                while (v26 != v43);
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"\nINFO: Created BF Number of Elements: ", 38);
              v27 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" False PositiveRate: ", 21);
              v28 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" Number of Hashes: ", 19);
              v29 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" Size of bitmap(Byte): ", 23);
              BloomFilter::bufferSize((BloomFilter *)v20);
              v30 = (_QWORD *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(_QWORD *)(*v30 - 24)));
              v31 = std::locale::use_facet((const std::locale *)&v40, MEMORY[0x1E0DE4A90]);
              ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
              std::locale::~locale((std::locale *)&v40);
              std::ostream::put();
              std::ostream::flush();
              goto LABEL_65;
            }
          }
          else if (HIBYTE(v41.__r_.__value_.__r.__words[2]) == 3)
          {
LABEL_29:
            if (LOWORD(v41.__r_.__value_.__l.__data_) != 17744 || v41.__r_.__value_.__s.__data_[2] != 82)
            {
              v16 = &v41;
              goto LABEL_40;
            }
LABEL_43:
            v20 = v52;
            goto LABEL_50;
          }
          v20 = v44;
          goto LABEL_50;
        }
        if (*(_WORD *)v41.__r_.__value_.__l.__data_ == 20300 && *(_BYTE *)(v41.__r_.__value_.__r.__words[0] + 2) == 67)
          goto LABEL_34;
      }
      else
      {
        if (HIBYTE(v41.__r_.__value_.__r.__words[2]) != 3)
          goto LABEL_65;
        v7 = LOWORD(v41.__r_.__value_.__l.__data_) == 17744 && v41.__r_.__value_.__s.__data_[2] == 82;
        if (v7)
          goto LABEL_29;
        if (LOWORD(v41.__r_.__value_.__l.__data_) == 20300 && v41.__r_.__value_.__s.__data_[2] == 67)
          goto LABEL_27;
        v9 = &v41;
      }
      data_low = LOWORD(v9->__r_.__value_.__l.__data_);
      v13 = v9->__r_.__value_.__s.__data_[2];
      if (data_low == 21071 && v13 == 71)
        goto LABEL_27;
LABEL_65:
      std::__tree<std::string>::destroy((uint64_t)&v42, v43[0]);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      v32 = (uint64_t *)v6[1];
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = (uint64_t *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (uint64_t *)v6[2];
          v7 = *v33 == (_QWORD)v6;
          v6 = v33;
        }
        while (!v7);
      }
      v6 = v33;
    }
    while (v33 != (uint64_t *)v57);
  }
  v34 = BloomFilter::bufferSize((BloomFilter *)v52);
  v35 = BloomFilter::bufferSize((BloomFilter *)v48);
  *v38 = v34 + v35 + BloomFilter::bufferSize((BloomFilter *)v44) + 28;
  v36 = (char *)operator new[]();
  bzero(v36, *v38);
  *(_QWORD *)v36 = 0x1C000007D0;
  *((_DWORD *)v36 + 2) = BloomFilter::bufferSize((BloomFilter *)v52);
  *((_DWORD *)v36 + 3) = BloomFilter::bufferSize((BloomFilter *)v52) + 28;
  *((_DWORD *)v36 + 4) = BloomFilter::bufferSize((BloomFilter *)v48);
  LODWORD(v34) = BloomFilter::bufferSize((BloomFilter *)v52);
  *((_DWORD *)v36 + 5) = v34 + BloomFilter::bufferSize((BloomFilter *)v48) + 28;
  *((_DWORD *)v36 + 6) = BloomFilter::bufferSize((BloomFilter *)v44);
  BloomFilter::saveToBuffer((BloomFilter *)v52, v36 + 28);
  BloomFilter::saveToBuffer((BloomFilter *)v48, &v36[*((unsigned int *)v36 + 3)]);
  BloomFilter::saveToBuffer((BloomFilter *)v44, &v36[*((unsigned int *)v36 + 5)]);
  if (v47 < 0)
    operator delete(v46);
  if (v45 < 0)
    operator delete(v44[7]);
  if (v44[0])
    operator delete(v44[0]);
  if (v51 < 0)
    operator delete(v50);
  if (v49 < 0)
    operator delete(v48[7]);
  if (v48[0])
    operator delete(v48[0]);
  if (v55 < 0)
    operator delete(v54);
  if (v53 < 0)
    operator delete(v52[7]);
  if (v52[0])
    operator delete(v52[0]);
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&v56, v57[0]);
  return v36;
}

void sub_191CF2B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::locale a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  uint64_t v43;

  BloomFilter::~BloomFilter(&a29);
  BloomFilter::~BloomFilter(&a43);
  BloomFilter::~BloomFilter((void **)(v43 - 240));
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v43 - 128, *(_QWORD **)(v43 - 120));
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::set<std::string>>::~pair(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void BloomFilter::~BloomFilter(void **this)
{
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*this)
    operator delete(*this);
}

uint64_t CoreNLP::printTokens(_QWORD *a1, int a2, const __CFString *this, uint64_t *a4, uint64_t *a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *locale;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFString *v22;
  std::locale *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  void **v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t **v38;
  uint64_t **v39;
  void *v40;
  unint64_t v41;
  void *v42;
  void *v43;
  uint64_t **v44;
  uint64_t **v45;
  uint64_t v46;
  void *v47;
  void **v48;
  void **v49;
  _QWORD *v50;
  void **v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  BOOL v56;
  const std::locale::facet *v57;
  const std::locale::facet *v58;
  const __CFAllocator *v60;
  __int128 v64;
  unint64_t v65;
  void *v66[2];
  int64_t v67;
  void *__p[2];
  uint64_t v69;
  std::locale v70[2];
  uint64_t v71;
  std::locale v72;
  uint64_t v73;
  unsigned __int8 v74;
  std::locale *v75;

  v10 = *a4;
  v9 = a4[1];
  v12 = *a5;
  v11 = a5[1];
  CoreNLP::getUTF8StringFromCFString(this, &v72);
  if ((v74 & 0x80u) == 0)
    locale = &v72;
  else
    locale = v72.__locale_;
  if ((v74 & 0x80u) == 0)
    v14 = v74;
  else
    v14 = v73;
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)locale, v14);
  std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
  v16 = std::locale::use_facet(v70, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale(v70);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v74 < 0)
    operator delete(v72.__locale_);
  v17 = *a4;
  if (a4[1] != *a4)
  {
    v18 = v11;
    v19 = 0;
    v20 = v9 - v10;
    v21 = v18 - v12;
    v60 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      v22 = CFStringCreateWithSubstring(v60, this, *(CFRange *)*(_QWORD *)(v17 + 8 * v19));
      CoreNLP::getUTF8StringFromCFString(v22, &v72);
      CFRelease(v22);
      v23 = (v74 & 0x80u) == 0 ? &v72 : (std::locale *)v72.__locale_;
      v24 = (v74 & 0x80u) == 0 ? v74 : v73;
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)v23, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" ", 1);
      v26 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)":", 1);
      v27 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" ", 1);
      v28 = *(_QWORD *)(v17 + 8 * v19);
      v29 = *(_QWORD **)(v28 + 24);
      v30 = (_QWORD *)(v28 + 32);
      if (v29 != (_QWORD *)(v28 + 32))
        break;
LABEL_73:
      std::ios_base::getloc((const std::ios_base *)(MEMORY[0x1E0DE4A60] + *(_QWORD *)(*MEMORY[0x1E0DE4A60] - 24)));
      v57 = std::locale::use_facet(v70, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
      std::locale::~locale(v70);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v74 < 0)
        operator delete(v72.__locale_);
      ++v19;
      v17 = *a4;
      if (v19 >= (a4[1] - *a4) >> 3)
        goto LABEL_76;
    }
    while (1)
    {
      *(_OWORD *)&v70[0].__locale_ = *((_OWORD *)v29 + 2);
      v71 = v29[6];
      CoreNLP::tagToEvaluationLabel(a1, a2, (int)v70[1].__locale_, (int)v70[0].__locale_, (uint64_t)__p);
      v31 = HIBYTE(v69);
      LOBYTE(v32) = HIBYTE(v69);
      v33 = __p[1];
      if (v69 >= 0)
        v34 = (void *)HIBYTE(v69);
      else
        v34 = __p[1];
      if (!v34)
      {
        CoreNLP::tagToEvaluationLabel(a1, a2, (int)v70[1].__locale_, (int)v70[0].__locale_, (uint64_t)v66);
        if (SHIBYTE(v69) < 0)
          operator delete(__p[0]);
        v69 = v67;
        *(_OWORD *)__p = *(_OWORD *)v66;
        v31 = HIBYTE(v67);
        v33 = v66[1];
        v32 = HIBYTE(v67);
      }
      if ((v32 & 0x80u) == 0)
        v35 = __p;
      else
        v35 = (void **)__p[0];
      if ((v32 & 0x80u) == 0)
        v36 = v31;
      else
        v36 = (uint64_t)v33;
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)v35, v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" ", 1);
      if (LODWORD(v70[0].__locale_) != a6 || v20 != v21)
        goto LABEL_65;
      v38 = (uint64_t **)(*(_QWORD *)(*a5 + 8 * v19) + 24);
      *(_QWORD *)&v64 = v70;
      v39 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v38, (int *)v70, (uint64_t)&std::piecewise_construct, (_DWORD **)&v64);
      CoreNLP::tagToEvaluationLabel(a1, a2, *((_DWORD *)v39 + 10), (int)v70[0].__locale_, (uint64_t)v66);
      v40 = (void *)HIBYTE(v67);
      LOBYTE(v41) = HIBYTE(v67);
      v42 = v66[1];
      if (v67 >= 0)
        v43 = (void *)HIBYTE(v67);
      else
        v43 = v66[1];
      if (!v43)
      {
        v44 = (uint64_t **)(*(_QWORD *)(*a5 + 8 * v19) + 24);
        v75 = v70;
        v45 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v44, (int *)v70, (uint64_t)&std::piecewise_construct, (_DWORD **)&v75);
        CoreNLP::tagToEvaluationLabel(a1, a2, *((_DWORD *)v45 + 10), (int)v70[0].__locale_, (uint64_t)&v64);
        if (SHIBYTE(v67) < 0)
          operator delete(v66[0]);
        v67 = v65;
        *(_OWORD *)v66 = v64;
        v40 = (void *)HIBYTE(v65);
        v42 = (void *)*((_QWORD *)&v64 + 1);
        v41 = HIBYTE(v65);
      }
      v46 = HIBYTE(v69);
      if (v69 >= 0)
        v47 = (void *)HIBYTE(v69);
      else
        v47 = __p[1];
      if ((v41 & 0x80u) != 0)
        v40 = v42;
      if (v47 == v40)
      {
        if ((v41 & 0x80u) == 0)
          v48 = v66;
        else
          v48 = (void **)v66[0];
        if (v69 < 0)
        {
          if (!memcmp(__p[0], v48, (size_t)__p[1]))
            goto LABEL_63;
        }
        else
        {
          if (!HIBYTE(v69))
            goto LABEL_63;
          v49 = __p;
          while (*(unsigned __int8 *)v49 == *(unsigned __int8 *)v48)
          {
            v49 = (void **)((char *)v49 + 1);
            v48 = (void **)((char *)v48 + 1);
            if (!--v46)
              goto LABEL_63;
          }
        }
      }
      v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"--> expected: ", 14);
      if (v67 >= 0)
        v51 = v66;
      else
        v51 = (void **)v66[0];
      if (v67 >= 0)
        v52 = HIBYTE(v67);
      else
        v52 = (uint64_t)v66[1];
      v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" ", 1);
      LOBYTE(v41) = HIBYTE(v67);
LABEL_63:
      if ((v41 & 0x80) != 0)
        operator delete(v66[0]);
LABEL_65:
      if (SHIBYTE(v69) < 0)
        operator delete(__p[0]);
      v54 = (_QWORD *)v29[1];
      if (v54)
      {
        do
        {
          v55 = v54;
          v54 = (_QWORD *)*v54;
        }
        while (v54);
      }
      else
      {
        do
        {
          v55 = (_QWORD *)v29[2];
          v56 = *v55 == (_QWORD)v29;
          v29 = v55;
        }
        while (!v56);
      }
      v29 = v55;
      if (v55 == v30)
        goto LABEL_73;
    }
  }
LABEL_76:
  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x1E0DE4A60] + *(_QWORD *)(*MEMORY[0x1E0DE4A60] - 24)));
  v58 = std::locale::use_facet(&v72, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10);
  std::locale::~locale(&v72);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_191CF3224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,std::locale a31)
{
  uint64_t v31;

  std::locale::~locale((std::locale *)(v31 - 128));
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::readAnnotatedToken(uint64_t a1, int a2, int a3, __CFString *a4, uint64_t a5)
{
  uint64_t v10;
  char *v11;
  char *v12;
  int64_t v13;
  std::string::size_type v14;
  std::vector<std::string>::pointer v15;
  __int128 v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  std::string *v21;
  char *v22;
  std::vector<std::string>::pointer end;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  std::string *v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type v32;
  char *v33;
  int64_t v34;
  void **v35;
  char *v36;
  char *v37;
  int64_t v38;
  int v39;
  int64_t v40;
  char *v41;
  char *v42;
  char *v43;
  int v44;
  void *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  std::vector<std::string>::pointer v52;
  const __CFString *v53;
  uint64_t v54;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD v61[3];
  void *__p[2];
  __int128 v63;
  uint64_t *v64[3];
  char v65;
  std::string v66;
  void *p_v;
  int64_t v68;
  unsigned __int8 v69;
  std::vector<std::string> v70;
  uint64_t v71[12];
  char v72;
  uint64_t v73;
  std::__split_buffer<std::string> __v;

  std::istringstream::basic_istringstream[abi:ne180100](v71, (const std::string *)a1, 8);
  memset(&v70, 0, sizeof(v70));
  if (a2 == 7 && a3 == 4)
  {
    std::string::basic_string[abi:ne180100]<0>(&p_v, "\t");
    v10 = *(unsigned __int8 *)(a1 + 23);
    if ((v10 & 0x80u) == 0)
      v11 = (char *)a1;
    else
      v11 = *(char **)a1;
    if ((v69 & 0x80u) == 0)
      v12 = (char *)&p_v;
    else
      v12 = (char *)p_v;
    if ((v69 & 0x80u) == 0)
      v13 = v69;
    else
      v13 = v68;
    if (v13)
    {
      if ((v10 & 0x80u) != 0)
        v10 = *(_QWORD *)(a1 + 8);
      if (v10 >= v13)
      {
        v43 = &v11[v10];
        v44 = *v12;
        v45 = v11;
        do
        {
          v46 = v10 - v13;
          if (v46 == -1)
            break;
          v47 = (char *)memchr(v45, v44, v46 + 1);
          if (!v47)
            break;
          v48 = v47;
          if (!memcmp(v47, v12, v13))
          {
            v14 = 0;
            if (v48 != v43)
            {
              v22 = (char *)(v48 - v11);
              if (v22 != (char *)-1)
                goto LABEL_32;
            }
            goto LABEL_17;
          }
          v45 = v48 + 1;
          v10 = v43 - (v48 + 1);
        }
        while (v10 >= v13);
      }
      v14 = 0;
    }
    else
    {
      v22 = 0;
LABEL_32:
      v14 = 0;
      do
      {
        std::string::basic_string(&v66, (const std::string *)a1, v14, (std::string::size_type)&v22[-v14], (std::allocator<char> *)&__v);
        end = v70.__end_;
        if (v70.__end_ >= v70.__end_cap_.__value_)
        {
          v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_ - (char *)v70.__begin_) >> 3);
          v26 = v25 + 1;
          if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3) > v26)
            v26 = 0x5555555555555556 * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3) >= 0x555555555555555)
            v27 = 0xAAAAAAAAAAAAAAALL;
          else
            v27 = v26;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v70.__end_cap_;
          if (v27)
            v28 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v70.__end_cap_, v27);
          else
            v28 = 0;
          v29 = v28 + v25;
          __v.__first_ = v28;
          __v.__begin_ = v29;
          __v.__end_cap_.__value_ = &v28[v27];
          v30 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
          v29->__r_.__value_.__r.__words[2] = v66.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v30;
          memset(&v66, 0, sizeof(v66));
          __v.__end_ = v29 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v70, &__v);
          v31 = v70.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v70.__end_ = v31;
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v66.__r_.__value_.__l.__data_);
        }
        else
        {
          v24 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
          v70.__end_->__r_.__value_.__r.__words[2] = v66.__r_.__value_.__r.__words[2];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v24;
          v70.__end_ = end + 1;
        }
        v32 = *(unsigned __int8 *)(a1 + 23);
        if ((v32 & 0x80u) == 0)
          v33 = (char *)a1;
        else
          v33 = *(char **)a1;
        if ((v32 & 0x80u) != 0)
          v32 = *(_QWORD *)(a1 + 8);
        v34 = (v69 & 0x80u) == 0 ? v69 : v68;
        v14 = (std::string::size_type)&v22[v34];
        v35 = (v69 & 0x80u) == 0 ? &p_v : (void **)p_v;
        if (v32 < v14)
          break;
        v22 += v34;
        if (v34)
        {
          v36 = &v33[v14];
          v37 = &v33[v32];
          v38 = v32 - v14;
          if (v38 >= v34)
          {
            v39 = *(char *)v35;
            while (1)
            {
              v40 = v38 - v34;
              if (v40 == -1)
                break;
              v41 = (char *)memchr(v36, v39, v40 + 1);
              if (!v41)
                break;
              v42 = v41;
              if (!memcmp(v41, v35, v34))
              {
                if (v42 == v37)
                  goto LABEL_17;
                v22 = (char *)(v42 - v33);
                goto LABEL_68;
              }
              v36 = v42 + 1;
              v38 = v37 - (v42 + 1);
              if (v38 < v34)
                goto LABEL_17;
            }
          }
          break;
        }
LABEL_68:
        ;
      }
      while (v22 != (char *)-1);
    }
LABEL_17:
    std::string::basic_string(&v66, (const std::string *)a1, v14, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__v);
    v15 = v70.__end_;
    a2 = 7;
    if (v70.__end_ >= v70.__end_cap_.__value_)
    {
      v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_ - (char *)v70.__begin_) >> 3);
      v19 = v18 + 1;
      if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3) > v19)
        v19 = 0x5555555555555556 * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3) >= 0x555555555555555)
        v20 = 0xAAAAAAAAAAAAAAALL;
      else
        v20 = v19;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v70.__end_cap_;
      if (v20)
        v21 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v70.__end_cap_, v20);
      else
        v21 = 0;
      v49 = v21 + v18;
      __v.__first_ = v21;
      __v.__begin_ = v49;
      __v.__end_cap_.__value_ = &v21[v20];
      v50 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
      v49->__r_.__value_.__r.__words[2] = v66.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v50;
      memset(&v66, 0, sizeof(v66));
      __v.__end_ = v49 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v70, &__v);
      v51 = v70.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v70.__end_ = v51;
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
    }
    else
    {
      v16 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
      v70.__end_->__r_.__value_.__r.__words[2] = v66.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
      v70.__end_ = v15 + 1;
    }
    if ((char)v69 < 0)
    {
      v17 = (uint64_t *)p_v;
      goto LABEL_81;
    }
  }
  else
  {
    std::istream_iterator<std::string,char,std::char_traits<char>,long>::istream_iterator[abi:ne180100](v64, v71);
    *(_OWORD *)__p = 0u;
    v63 = 0u;
    std::vector<std::string>::vector<std::istream_iterator<std::string,char,std::char_traits<char>,long>,0>((uint64_t *)&__v, (uint64_t)v64, (uint64_t)__p);
    std::vector<std::string>::__vdeallocate(&v70);
    *(_OWORD *)&v70.__begin_ = *(_OWORD *)&__v.__first_;
    v70.__end_cap_.__value_ = __v.__end_;
    memset(&__v, 0, 24);
    p_v = &__v;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_v);
    if (SHIBYTE(v63) < 0)
      operator delete(__p[1]);
    if (v65 < 0)
    {
      v17 = v64[1];
LABEL_81:
      operator delete(v17);
    }
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_ - (char *)v70.__begin_) >> 3) <= 1)
  {
    v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"\nERROR: Unexpected Annotation (needs at least two columns): ", 60);
    v57 = *(char *)(a1 + 23);
    if (v57 >= 0)
      v58 = a1;
    else
      v58 = *(_QWORD *)a1;
    if (v57 >= 0)
      v59 = *(unsigned __int8 *)(a1 + 23);
    else
      v59 = *(_QWORD *)(a1 + 8);
    v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, v58, v59);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v60);
    exit(1);
  }
  if (CFStringGetLength(a4) >= 1)
    CFStringAppend(a4, CFSTR(" "));
  v52 = v70.__end_ - 1;
  if (SHIBYTE(v70.__end_[-1].__r_.__value_.__r.__words[2]) < 0)
    v52 = (std::vector<std::string>::pointer)v52->__r_.__value_.__r.__words[0];
  v53 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v52, 0x8000100u);
  v54 = operator new();
  v61[0] = CFStringGetLength(a4);
  v61[1] = CFStringGetLength(v53);
  v61[2] = 0;
  CoreNLP::NLAttributedToken::NLAttributedToken(v54, (uint64_t)v61);
  if (a2 == 6)
  {
    CoreNLP::annotationToTrainingLabel(6, (unsigned __int16 *)v70.__begin_, (std::string *)&__v);
    if (*(char *)(a5 + 23) < 0)
      operator delete(*(void **)a5);
    *(_OWORD *)a5 = *(_OWORD *)&__v.__first_;
    *(_QWORD *)(a5 + 16) = __v.__end_;
  }
  else
  {
    std::string::operator=((std::string *)a5, v70.__begin_);
  }
  CFStringAppend(a4, v53);
  CFRelease(v53);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  v71[0] = *MEMORY[0x1E0DE4F58];
  *(uint64_t *)((char *)v71 + *(_QWORD *)(v71[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  v71[2] = MEMORY[0x1E0DE4FB8] + 16;
  if (v72 < 0)
    operator delete((void *)v71[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x19401E928](&v73);
  return v54;
}

void sub_191CF3958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a34 < 0)
    operator delete(__p);
  if (a40 < 0)
    operator delete(a35);
  a35 = &a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  std::istringstream::~istringstream((uint64_t)&a45);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::parseDir@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  const char *v4;
  DIR *v5;
  dirent *v6;
  dirent *v7;
  size_t v8;
  std::string *p_p;
  const char *v10;
  std::string *v11;
  std::string::size_type v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  std::string *v22;
  std::string *v23;
  std::string::size_type v24;
  unint64_t v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  std::string __p;
  stat v33;
  std::__split_buffer<std::string> __v;
  _QWORD v35[4];

  v2 = result;
  v35[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (*(char *)(result + 23) < 0)
  {
    if (!*(_QWORD *)(result + 8))
      return result;
    result = *(_QWORD *)result;
  }
  else if (!*(_BYTE *)(result + 23))
  {
    return result;
  }
  stat((const char *)result, &v33);
  if ((v33.st_mode & 0xF000) == 0x4000)
  {
    if (*(char *)(v2 + 23) >= 0)
      v4 = (const char *)v2;
    else
      v4 = *(const char **)v2;
    v5 = opendir(v4);
    if (v5)
    {
      while (1)
      {
        v6 = readdir(v5);
        v7 = v6;
        if (!v6)
          break;
        if (v6->d_type != 4)
        {
          if (*(char *)(v2 + 23) >= 0)
            v8 = *(unsigned __int8 *)(v2 + 23);
          else
            v8 = *(_QWORD *)(v2 + 8);
          std::string::basic_string[abi:ne180100]((uint64_t)&__p, v8 + 1);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (v8)
          {
            if (*(char *)(v2 + 23) >= 0)
              v10 = (const char *)v2;
            else
              v10 = *(const char **)v2;
            memmove(p_p, v10, v8);
          }
          *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v8) = 47;
          v11 = std::string::append(&__p, v7->d_name);
          v12 = v11->__r_.__value_.__r.__words[0];
          v35[0] = v11->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v35 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
          v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
          v11->__r_.__value_.__l.__size_ = 0;
          v11->__r_.__value_.__r.__words[2] = 0;
          v11->__r_.__value_.__r.__words[0] = 0;
          v14 = *(_QWORD *)(a2 + 8);
          v15 = *(_QWORD *)(a2 + 16);
          if (v14 >= v15)
          {
            v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *(_QWORD *)a2) >> 3);
            v19 = v18 + 1;
            if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
            v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(_QWORD *)a2) >> 3);
            if (2 * v20 > v19)
              v19 = 2 * v20;
            if (v20 >= 0x555555555555555)
              v21 = 0xAAAAAAAAAAAAAAALL;
            else
              v21 = v19;
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
            if (v21)
              v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v21);
            else
              v22 = 0;
            v23 = v22 + v18;
            __v.__first_ = v22;
            __v.__begin_ = v23;
            __v.__end_cap_.__value_ = &v22[v21];
            v24 = v35[0];
            v23->__r_.__value_.__r.__words[0] = v12;
            v23->__r_.__value_.__l.__size_ = v24;
            *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v35 + 7);
            *((_BYTE *)&v23->__r_.__value_.__s + 23) = v13;
            __v.__end_ = v23 + 1;
            std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
            v17 = *(_QWORD *)(a2 + 8);
            std::__split_buffer<std::string>::~__split_buffer(&__v);
          }
          else
          {
            v16 = v35[0];
            *(_QWORD *)v14 = v12;
            *(_QWORD *)(v14 + 8) = v16;
            *(_QWORD *)(v14 + 15) = *(_QWORD *)((char *)v35 + 7);
            *(_BYTE *)(v14 + 23) = v13;
            v17 = v14 + 24;
            *(_QWORD *)(a2 + 8) = v14 + 24;
          }
          *(_QWORD *)(a2 + 8) = v17;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      return closedir(v5);
    }
    else
    {
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"\nERROR: could not open directory ", 33);
      v27 = *(char *)(v2 + 23);
      if (v27 >= 0)
        v28 = v2;
      else
        v28 = *(_QWORD *)v2;
      if (v27 >= 0)
        v29 = *(unsigned __int8 *)(v2 + 23);
      else
        v29 = *(_QWORD *)(v2 + 8);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
      std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(_QWORD *)(*v30 - 24)));
      v31 = std::locale::use_facet((const std::locale *)&__v, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
      std::locale::~locale((std::locale *)&__v);
      std::ostream::put();
      return std::ostream::flush();
    }
  }
  else
  {
    v25 = *(_QWORD *)(a2 + 8);
    if (v25 >= *(_QWORD *)(a2 + 16))
    {
      result = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, (__int128 *)v2);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a2, (__int128 *)v2);
      result = v25 + 24;
    }
    *(_QWORD *)(a2 + 8) = result;
  }
  return result;
}

void sub_191CF3D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  uint64_t v15;

  std::locale::~locale((std::locale *)(v15 - 152));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void CoreNLP::NLTaggerTrainCollectFeatures(uint64_t *a1, uint64_t a2, _QWORD *a3, int a4, int a5)
{
  CFMutableStringRef Mutable;
  _QWORD *v11;
  std::locale::id *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  const std::locale::facet *v28;
  unsigned __int8 v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t AnnotatedToken;
  uint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  CoreNLP::NLAttributedToken **v39;
  CoreNLP::NLAttributedToken **v40;
  std::string *v41;
  std::string *i;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  BOOL v57;
  _QWORD *v58;
  _QWORD *v59;
  void **v60;
  void **v61;
  uint64_t v62;
  std::locale v63[2];
  std::string::size_type v64;
  uint64_t v65[3];
  std::string *v66;
  std::string *v67;
  unint64_t v68;
  void *__p;
  char *v70;
  char *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  void **v75[2];
  _BYTE v76[408];
  _QWORD v77[21];
  CFRange v78;

  v77[19] = *MEMORY[0x1E0C80C00];
  v72 = 0;
  v73 = 0;
  v74 = 0;
  __p = 0;
  v70 = 0;
  v71 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CoreNLP::TaggingModelManager::labelMap(a1, a4, a5, v65);
  v11 = (_QWORD *)*a3;
  v58 = a3 + 1;
  if ((_QWORD *)*a3 != a3 + 1)
  {
    v60 = *(void ***)(MEMORY[0x1E0DE4F40] + 24);
    v61 = (void **)*MEMORY[0x1E0DE4F40];
    v12 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      v14 = v11[5];
      v13 = v11[6];
      v59 = v11;
      v62 = v13;
      while (v14 != v13)
      {
        std::ifstream::basic_ifstream(v75);
        if ((v76[(unint64_t)*(v75[0] - 3) + 16] & 5) != 0)
        {
          v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"\nERROR: cannot open ", 20);
          v16 = *(char *)(v14 + 23);
          if (v16 >= 0)
            v17 = v14;
          else
            v17 = *(_QWORD *)v14;
          if (v16 >= 0)
            v18 = *(unsigned __int8 *)(v14 + 23);
          else
            v18 = *(_QWORD *)(v14 + 8);
          v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
          std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
          v20 = std::locale::use_facet(v63, v12);
          ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
          std::locale::~locale(v63);
          std::ostream::put();
          std::ostream::flush();
        }
        else
        {
          v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"\nINFO: Reading data from", 24);
          v22 = *(char *)(v14 + 23);
          if (v22 >= 0)
            v23 = v14;
          else
            v23 = *(_QWORD *)v14;
          if (v22 >= 0)
            v24 = *(unsigned __int8 *)(v14 + 23);
          else
            v24 = *(_QWORD *)(v14 + 8);
          v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
          v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"...", 3);
          std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
          v27 = std::locale::use_facet(v63, v12);
          ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
          std::locale::~locale(v63);
          std::ostream::put();
          std::ostream::flush();
          while (1)
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v75 + (unint64_t)*(v75[0] - 3)));
            v28 = std::locale::use_facet(v63, v12);
            v29 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
            std::locale::~locale(v63);
            v30 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v75, (uint64_t)&v72, v29);
            if ((*((_BYTE *)v30 + *(_QWORD *)(*v30 - 24) + 32) & 5) != 0)
              break;
            if (v74 >= 0)
              v31 = (char *)&v72;
            else
              v31 = (char *)v72;
            if (v74 >= 0)
              v32 = HIBYTE(v74);
            else
              v32 = v73;
            if (!v32)
              goto LABEL_36;
            v33 = 0;
            while (memchr(" \t\n\v\f\r", v31[v33], 6uLL))
            {
              if (v32 == ++v33)
                goto LABEL_36;
            }
            if (v33 == -1)
            {
LABEL_36:
              if (__p != v70)
              {
                CoreNLP::TaggingFeatureExtractor::extractSharedData(a2, (uint64_t *)&__p, Mutable, a5);
                if (v70 != __p)
                {
                  v38 = 0;
                  do
                    CoreNLP::TaggingFeatureExtractor::collectFeatures(a2, a4, a5, (uint64_t)&__p, v38++);
                  while (v38 < (v70 - (_BYTE *)__p) >> 3);
                }
                v78.length = CFStringGetLength(Mutable);
                v78.location = 0;
                CFStringDelete(Mutable, v78);
                v39 = (CoreNLP::NLAttributedToken **)__p;
                v40 = (CoreNLP::NLAttributedToken **)v70;
                if (__p != v70)
                {
                  do
                  {
                    if (*v39)
                    {
                      CoreNLP::NLAttributedToken::~NLAttributedToken(*v39);
                      MEMORY[0x19401E994]();
                    }
                    ++v39;
                  }
                  while (v39 != v40);
                  v39 = (CoreNLP::NLAttributedToken **)__p;
                }
                v70 = (char *)v39;
                v41 = v66;
                for (i = v67; i != v41; --i)
                {
                  if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
                    operator delete(i[-1].__r_.__value_.__l.__data_);
                }
                v67 = v41;
              }
            }
            else
            {
              v63[0].__locale_ = 0;
              v63[1].__locale_ = 0;
              v64 = 0;
              AnnotatedToken = CoreNLP::readAnnotatedToken((uint64_t)&v72, a4, a5, Mutable, (uint64_t)v63);
              v35 = AnnotatedToken;
              v36 = v70;
              if (v70 >= v71)
              {
                v43 = (v70 - (_BYTE *)__p) >> 3;
                if ((unint64_t)(v43 + 1) >> 61)
                  std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
                v44 = (v71 - (_BYTE *)__p) >> 2;
                if (v44 <= v43 + 1)
                  v44 = v43 + 1;
                if ((unint64_t)(v71 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
                  v45 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v45 = v44;
                if (v45)
                  v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v71, v45);
                else
                  v46 = 0;
                v47 = (uint64_t *)&v46[8 * v43];
                *v47 = v35;
                v37 = (char *)(v47 + 1);
                v49 = (char *)__p;
                v48 = v70;
                if (v70 != __p)
                {
                  do
                  {
                    v50 = *((_QWORD *)v48 - 1);
                    v48 -= 8;
                    *--v47 = v50;
                  }
                  while (v48 != v49);
                  v48 = (char *)__p;
                }
                __p = v47;
                v70 = v37;
                v71 = &v46[8 * v45];
                if (v48)
                  operator delete(v48);
              }
              else
              {
                *(_QWORD *)v70 = AnnotatedToken;
                v37 = v36 + 8;
              }
              v70 = v37;
              v51 = v67;
              if ((unint64_t)v67 >= v68)
              {
                v53 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v66, (__int128 *)v63);
              }
              else
              {
                if (SHIBYTE(v64) < 0)
                {
                  std::string::__init_copy_ctor_external(v67, (const std::string::value_type *)v63[0].__locale_, (std::string::size_type)v63[1].__locale_);
                }
                else
                {
                  v52 = *(_OWORD *)&v63[0].__locale_;
                  v67->__r_.__value_.__r.__words[2] = v64;
                  *(_OWORD *)&v51->__r_.__value_.__l.__data_ = v52;
                }
                v53 = v51 + 1;
              }
              v67 = v53;
              if (SHIBYTE(v64) < 0)
                operator delete(v63[0].__locale_);
            }
          }
        }
        v75[0] = v61;
        *(void ***)((char *)v75 + (_QWORD)*(v61 - 3)) = v60;
        MEMORY[0x19401E70C](v76);
        std::istream::~istream();
        MEMORY[0x19401E928](v77);
        v14 += 24;
        v13 = v62;
      }
      v54 = v59;
      v55 = (_QWORD *)v59[1];
      if (v55)
      {
        do
        {
          v56 = v55;
          v55 = (_QWORD *)*v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          v56 = (_QWORD *)v54[2];
          v57 = *v56 == (_QWORD)v54;
          v54 = v56;
        }
        while (!v57);
      }
      v11 = v56;
    }
    while (v56 != v58);
  }
  CFRelease(Mutable);
  std::__tree<std::string>::destroy((uint64_t)v65, (char *)v65[1]);
  v75[0] = (void **)&v66;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v75);
  if (__p)
  {
    v70 = (char *)__p;
    operator delete(__p);
  }
  if (SHIBYTE(v74) < 0)
    operator delete(v72);
}

void sub_191CF440C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,char *a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char *a39)
{
  std::__tree<std::string>::destroy((uint64_t)&a24, a25);
  a39 = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a38 < 0)
    operator delete(a33);
  _Unwind_Resume(a1);
}

void NLTaggerTrainModel(char *a1, const char *a2, char *a3, char *a4, char *a5, char *a6, char *a7, double a8, long double a9)
{
  CFStringRef v17;
  const __CFString *v18;
  int v19;
  void **v20;
  int v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  __darwin_ino64_t st_ino;
  _OWORD *v31;
  _OWORD *v32;
  _OWORD *v33;
  _OWORD *v34;
  _OWORD *v35;
  _OWORD *v36;
  _OWORD *v37;
  _OWORD *v38;
  _OWORD *v39;
  _OWORD *v40;
  _OWORD *v41;
  CFMutableStringRef Mutable;
  __int128 *v43;
  __int128 *i;
  __int128 v45;
  uint64_t **v46;
  uint64_t **v47;
  uint64_t *v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  __int128 *v52;
  __int128 *v53;
  __int128 v54;
  uint64_t **v55;
  uint64_t **v56;
  uint64_t *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t *v60;
  double v61;
  std::locale::id *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  const std::locale::facet *v70;
  _QWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  const std::locale::facet *v77;
  const std::locale::facet *v78;
  unsigned __int8 v79;
  _QWORD *v80;
  std::string *v81;
  std::string::size_type size;
  uint64_t v83;
  uint64_t AnnotatedToken;
  uint64_t v85;
  char *v86;
  char *v87;
  CoreNLP::NLAttributedToken **v88;
  CoreNLP::NLAttributedToken **v89;
  std::string *v90;
  std::string *k;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  std::string *v100;
  __int128 v101;
  std::string *v102;
  CoreNLP::NLAttributedToken *v103;
  std::locale::__imp *v104;
  std::locale::__imp *locale;
  char v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  BOOL v111;
  uint64_t *v112;
  const __CFString **v113;
  const __CFString **v114;
  CFIndex Length;
  unint64_t v116;
  char *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  CoreNLP::NLAttributedToken **v123;
  CoreNLP::NLAttributedToken **v124;
  std::string *v125;
  std::string *j;
  char *v127;
  char **v128;
  _QWORD *v129;
  const std::locale::facet *v130;
  std::string *v131;
  __int128 v132;
  _QWORD *v133;
  const std::locale::facet *v134;
  char *v135;
  char *v136;
  char v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  unsigned int v144;
  void **v145[3];
  void *v146[2];
  uint64_t v147;
  std::locale v148[2];
  std::string::size_type v149;
  __int128 *v150;
  __int128 *v151;
  __int128 *v152;
  __int128 *v153;
  uint64_t v154;
  int v155;
  char **v156;
  char *v157[2];
  std::string *v158;
  std::string *v159;
  unint64_t v160;
  void *p_str;
  char *v162;
  char *v163;
  std::string __str;
  uint64_t v165[3];
  size_t v166;
  CFStringRef v167[8];
  _QWORD v168[52];
  void *v169[2];
  char v170;
  uint64_t v171;
  void ***v172;
  stat __p[2];
  uint64_t v174;
  _QWORD v175[21];
  CFRange v176;
  CFRange v177;

  v175[19] = *MEMORY[0x1E0C80C00];
  v17 = CFStringCreateWithCString(0, a2, 0x8000100u);
  v19 = CoreNLP::languageIdForLanguage((uint64_t)v17, v18);
  CFRelease(v17);
  std::string::basic_string[abi:ne180100]<0>(v169, a1);
  if (v170 < 0)
  {
    if (v169[1] != (void *)3)
      goto LABEL_10;
    v20 = (void **)v169[0];
  }
  else
  {
    if (v170 != 3)
      goto LABEL_10;
    v20 = v169;
  }
  v21 = *(unsigned __int16 *)v20;
  v22 = *((unsigned __int8 *)v20 + 2);
  v23 = v21 == 28528 && v22 == 115;
  if (v23)
  {
    v28 = 6;
    if ((v170 & 0x80) == 0)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_10:
  std::string::basic_string[abi:ne180100]<0>(__p, a1);
  if (SHIBYTE(__p[0].st_gid) < 0)
  {
    if (__p[0].st_ino == 3)
    {
      v26 = bswap32(**(unsigned __int16 **)&__p[0].st_dev) >> 16;
      if (v26 == 28261)
      {
        v27 = *(unsigned __int8 *)(*(_QWORD *)&__p[0].st_dev + 2) - 114;
      }
      else if (v26 < 0x6E65)
      {
        v27 = -1;
      }
      else
      {
        v27 = 1;
      }
      if (v27)
        v28 = 0;
      else
        v28 = 7;
    }
    else
    {
      v28 = 0;
    }
    operator delete(*(void **)&__p[0].st_dev);
  }
  else if (SHIBYTE(__p[0].st_gid) == 3)
  {
    v24 = bswap32(LOWORD(__p[0].st_dev)) >> 16;
    if (v24 == 28261)
    {
      v25 = BYTE2(__p[0].st_dev) - 114;
    }
    else if (v24 < 0x6E65)
    {
      v25 = -1;
    }
    else
    {
      v25 = 1;
    }
    if (v25)
      v28 = 0;
    else
      v28 = 7;
  }
  else
  {
    v28 = 0;
  }
  if (v170 < 0)
LABEL_35:
    operator delete(v169[0]);
LABEL_36:
  if (v19 == 4)
    v29 = 104;
  else
    v29 = 106;
  if (v28 != 7)
    v29 = 0;
  if (v28 == 6)
    v29 = 105;
  v144 = v29;
  CoreNLP::TaggingModelManager::TaggingModelManager((CoreNLP::TaggingModelManager *)v169);
  CoreNLP::TaggingFeatureExtractor::TaggingFeatureExtractor((CoreNLP::TaggingFeatureExtractor *)v168);
  CoreNLP::TaggerContext::TaggerContext((CoreNLP::TaggerContext *)v167);
  v166 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, a7);
  if (SHIBYTE(__p[0].st_gid) < 0)
  {
    st_ino = __p[0].st_ino;
    operator delete(*(void **)&__p[0].st_dev);
    if (st_ino)
      goto LABEL_45;
LABEL_49:
    v136 = 0;
    goto LABEL_50;
  }
  if (!HIBYTE(__p[0].st_gid))
    goto LABEL_49;
LABEL_45:
  std::string::basic_string[abi:ne180100]<0>(__p, a7);
  v136 = CoreNLP::createNERGazetteerBF((uint64_t)__p, v19, &v166, a9);
  if (SHIBYTE(__p[0].st_gid) < 0)
    operator delete(*(void **)&__p[0].st_dev);
  CoreNLP::TaggingFeatureExtractor::useModel((uint64_t)v168, v136, v166, v28, v19);
LABEL_50:
  CoreNLP::TaggingModelManager::labelMap((uint64_t *)v169, v28, v19, v165);
  v138 = operator new();
  CoreNLP::CRFModel::CRFModel(v138, v165);
  *(_QWORD *)&__p[0].st_uid = 0;
  __p[0].st_ino = 0;
  *(_QWORD *)&__p[0].st_dev = &__p[0].st_ino;
  std::string::basic_string[abi:ne180100]<0>(&__str, "feature.minfreq");
  p_str = &__str;
  v31 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)__p, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_str);
  MEMORY[0x19401E64C]((char *)v31 + 56, "1");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "feature.possible_states");
  p_str = &__str;
  v32 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)__p, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_str);
  MEMORY[0x19401E64C]((char *)v32 + 56, "0");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "feature.possible_transitions");
  p_str = &__str;
  v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)__p, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_str);
  MEMORY[0x19401E64C]((char *)v33 + 56, "0");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "c2");
  p_str = &__str;
  v34 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)__p, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_str);
  MEMORY[0x19401E64C]((char *)v34 + 56, "0.1");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "max_iterations");
  p_str = &__str;
  v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)__p, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_str);
  MEMORY[0x19401E64C]((char *)v35 + 56, "3000");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "num_memories");
  p_str = &__str;
  v36 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)__p, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_str);
  MEMORY[0x19401E64C]((char *)v36 + 56, "10");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "epsilon");
  p_str = &__str;
  v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)__p, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_str);
  MEMORY[0x19401E64C]((char *)v37 + 56, "1e-5");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "period");
  p_str = &__str;
  v38 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)__p, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_str);
  MEMORY[0x19401E64C]((char *)v38 + 56, "10");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "delta");
  p_str = &__str;
  v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)__p, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_str);
  MEMORY[0x19401E64C]((char *)v39 + 56, "1e-5");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "linesearch");
  p_str = &__str;
  v40 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)__p, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_str);
  MEMORY[0x19401E64C]((char *)v40 + 56, "MoreThuente");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "max_linesearch");
  p_str = &__str;
  v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)__p, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_str);
  MEMORY[0x19401E64C]((char *)v41 + 56, "20");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, a1);
  std::string::operator=((std::string *)(v138 + 40), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_DWORD *)(v138 + 64) = v144;
  *(_DWORD *)(v138 + 12) = v19;
  CoreNLP::CRFModel::initTrainer(v138, __p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)__p, (_QWORD *)__p[0].st_ino);
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  memset(&__str, 0, sizeof(__str));
  p_str = 0;
  v162 = 0;
  v163 = 0;
  v158 = 0;
  v159 = 0;
  v160 = 0;
  v157[0] = 0;
  v157[1] = 0;
  v156 = v157;
  v154 = 0x6400000001;
  v155 = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, a4);
  v143 = v28;
  CoreNLP::parseDir((uint64_t)__p, (uint64_t)&v152);
  v135 = a3;
  if (SHIBYTE(__p[0].st_gid) < 0)
    operator delete(*(void **)&__p[0].st_dev);
  v43 = v152;
  for (i = v153; v43 != i; v43 = (__int128 *)((char *)v43 + 24))
  {
    if (*((char *)v43 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v43, *((_QWORD *)v43 + 1));
    }
    else
    {
      v45 = *v43;
      *(_QWORD *)&__p[0].st_uid = *((_QWORD *)v43 + 2);
      *(_OWORD *)&__p[0].st_dev = v45;
    }
    LODWORD(v150) = 0;
    v148[0].__locale_ = (std::locale::__imp *)&v150;
    v46 = std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v156, (int *)&v150, (uint64_t)&std::piecewise_construct, v148);
    v47 = v46;
    v48 = v46[6];
    if (v48 >= v46[7])
    {
      v50 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v46 + 5, (__int128 *)&__p[0].st_dev);
    }
    else
    {
      if (SHIBYTE(__p[0].st_gid) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v46[6], *(const std::string::value_type **)&__p[0].st_dev, __p[0].st_ino);
      }
      else
      {
        v49 = *(_OWORD *)&__p[0].st_dev;
        v48[2] = *(_QWORD *)&__p[0].st_uid;
        *(_OWORD *)v48 = v49;
      }
      v50 = (uint64_t)(v48 + 3);
      v47[6] = v48 + 3;
    }
    v47[6] = (uint64_t *)v50;
    if (SHIBYTE(__p[0].st_gid) < 0)
      operator delete(*(void **)&__p[0].st_dev);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a5);
  CoreNLP::parseDir((uint64_t)__p, (uint64_t)&v150);
  v51 = v143;
  if (SHIBYTE(__p[0].st_gid) < 0)
    operator delete(*(void **)&__p[0].st_dev);
  v52 = v150;
  v53 = v151;
  if (v150 == v151)
    goto LABEL_106;
  do
  {
    if (*((char *)v52 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v52, *((_QWORD *)v52 + 1));
    }
    else
    {
      v54 = *v52;
      *(_QWORD *)&__p[0].st_uid = *((_QWORD *)v52 + 2);
      *(_OWORD *)&__p[0].st_dev = v54;
    }
    LODWORD(v146[0]) = 1;
    v148[0].__locale_ = (std::locale::__imp *)v146;
    v55 = std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v156, (int *)v146, (uint64_t)&std::piecewise_construct, v148);
    v56 = v55;
    v57 = v55[6];
    if (v57 >= v55[7])
    {
      v59 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v55 + 5, (__int128 *)&__p[0].st_dev);
    }
    else
    {
      if (SHIBYTE(__p[0].st_gid) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v55[6], *(const std::string::value_type **)&__p[0].st_dev, __p[0].st_ino);
      }
      else
      {
        v58 = *(_OWORD *)&__p[0].st_dev;
        v57[2] = *(_QWORD *)&__p[0].st_uid;
        *(_OWORD *)v57 = v58;
      }
      v59 = (uint64_t)(v57 + 3);
      v56[6] = v57 + 3;
    }
    v56[6] = (uint64_t *)v59;
    if (SHIBYTE(__p[0].st_gid) < 0)
      operator delete(*(void **)&__p[0].st_dev);
    v52 = (__int128 *)((char *)v52 + 24);
  }
  while (v52 != v53);
  v51 = v143;
  if (v150 == v151)
  {
LABEL_106:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"\nWARN: will use 1% of training data for evaluation.\n", 52);
    v137 = 1;
  }
  else
  {
    v137 = 0;
  }
  if (v19 == 4 && v51 == 7)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, a6);
    CoreNLP::TaggingFeatureExtractor::setConstrainFeaturePath((uint64_t)v168, (uint64_t)__p);
    if (SHIBYTE(__p[0].st_gid) < 0)
      operator delete(*(void **)&__p[0].st_dev);
    std::string::basic_string[abi:ne180100]<0>(__p, a6);
    CoreNLP::TaggingFeatureExtractor::setConstrainFeaturePath((uint64_t)&v171, (uint64_t)__p);
    if (SHIBYTE(__p[0].st_gid) < 0)
      operator delete(*(void **)&__p[0].st_dev);
    CoreNLP::NLTaggerTrainCollectFeatures((uint64_t *)v169, (uint64_t)v168, &v156, 7, 4);
  }
  v60 = (uint64_t *)v156;
  if (v156 != v157)
  {
    v139 = 0;
    v61 = a8 * 100.0;
    v140 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
    v141 = *MEMORY[0x1E0DE4F40];
    v62 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      v64 = v60[5];
      v63 = v60[6];
      v142 = v63;
      while (v64 != v63)
      {
        std::ifstream::basic_ifstream(__p);
        if ((*((_BYTE *)&__p[0].st_atimespec.tv_sec + *(_QWORD *)(*(_QWORD *)&__p[0].st_dev - 24)) & 5) != 0)
        {
          v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"\nERROR: cannot open ", 20);
          v66 = *(char *)(v64 + 23);
          if (v66 >= 0)
            v67 = v64;
          else
            v67 = *(_QWORD *)v64;
          if (v66 >= 0)
            v68 = *(unsigned __int8 *)(v64 + 23);
          else
            v68 = *(_QWORD *)(v64 + 8);
          v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, v67, v68);
          std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(_QWORD *)(*v69 - 24)));
          v70 = std::locale::use_facet(v148, v62);
          ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
          std::locale::~locale(v148);
          std::ostream::put();
          std::ostream::flush();
        }
        else
        {
          v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"\nINFO: Reading data from", 24);
          v72 = *(char *)(v64 + 23);
          if (v72 >= 0)
            v73 = v64;
          else
            v73 = *(_QWORD *)v64;
          if (v72 >= 0)
            v74 = *(unsigned __int8 *)(v64 + 23);
          else
            v74 = *(_QWORD *)(v64 + 8);
          v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, v73, v74);
          v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"...", 3);
          std::ios_base::getloc((const std::ios_base *)((char *)v76 + *(_QWORD *)(*v76 - 24)));
          v77 = std::locale::use_facet(v148, v62);
          ((void (*)(const std::locale::facet *, uint64_t))v77->__vftable[2].~facet_0)(v77, 10);
          std::locale::~locale(v148);
          std::ostream::put();
          std::ostream::flush();
          while (1)
          {
            std::ios_base::getloc((const std::ios_base *)((char *)__p + *(_QWORD *)(*(_QWORD *)&__p[0].st_dev - 24)));
            v78 = std::locale::use_facet(v148, v62);
            v79 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v78->__vftable[2].~facet_0)(v78, 10);
            std::locale::~locale(v148);
            v80 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (uint64_t)&__str, v79);
            if ((*((_BYTE *)v80 + *(_QWORD *)(*v80 - 24) + 32) & 5) != 0)
              break;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v81 = &__str;
            else
              v81 = (std::string *)__str.__r_.__value_.__r.__words[0];
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            else
              size = __str.__r_.__value_.__l.__size_;
            if (!size)
              goto LABEL_149;
            v83 = 0;
            while (memchr(" \t\n\v\f\r", v81->__r_.__value_.__s.__data_[v83], 6uLL))
            {
              if (size == ++v83)
                goto LABEL_149;
            }
            if (v83 == -1)
            {
LABEL_149:
              if (p_str != v162)
              {
                if (*((_DWORD *)v60 + 8)
                  || v61 >= (double)(int)std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>((uint64_t)&v154, (uint64_t)&v155, &v154))
                {
                  CoreNLP::TaggingFeatureExtractor::dependency(v144, (void **)&v148[0].__locale_);
                  locale = v148[0].__locale_;
                  v104 = v148[1].__locale_;
                  if (v148[0].__locale_ == v148[1].__locale_)
                  {
                    v106 = 0;
                  }
                  else
                  {
                    v106 = 0;
                    do
                    {
                      v107 = *(_DWORD *)locale;
                      v108 = *(_QWORD *)(*(_QWORD *)p_str + 32);
                      if (!v108)
                        goto LABEL_197;
                      v109 = *(_QWORD *)p_str + 32;
                      do
                      {
                        v110 = *(_DWORD *)(v108 + 32);
                        v111 = v110 < v107;
                        if (v110 >= v107)
                          v112 = (uint64_t *)v108;
                        else
                          v112 = (uint64_t *)(v108 + 8);
                        if (!v111)
                          v109 = v108;
                        v108 = *v112;
                      }
                      while (*v112);
                      if (v109 == *(_QWORD *)p_str + 32 || v107 < *(_DWORD *)(v109 + 32))
                      {
LABEL_197:
                        CoreNLP::TaggingModelManager::addTask((CoreNLP::TaggingModelManager *)v169, v107, v19);
                        v106 = 1;
                      }
                      locale = (std::locale::__imp *)((char *)locale + 4);
                    }
                    while (locale != v104);
                  }
                  v113 = (const __CFString **)p_str;
                  v114 = (const __CFString **)v162;
                  while (v113 != v114)
                    CoreNLP::extractTokenExtendedAttributes((uint64_t)Mutable, *v113++, v103);
                  if ((v106 & 1) != 0)
                  {
                    Length = CFStringGetLength(Mutable);
                    CoreNLP::TaggerContext::setString((uint64_t)v167, Mutable, 0, Length, v19);
                    CoreNLP::TaggingModelManager::tagInstance(v169, (uint64_t *)&p_str, v167, 0);
                  }
                  else
                  {
                    CoreNLP::TaggingFeatureExtractor::extractSharedData((int)v168, (uint64_t *)&p_str, Mutable, v19);
                  }
                  v146[0] = 0;
                  v146[1] = 0;
                  v147 = 0;
                  if (v162 == p_str)
                  {
                    v119 = 0;
                    v118 = (v162 - (_BYTE *)p_str) >> 3;
                  }
                  else
                  {
                    v116 = 0;
                    do
                    {
                      CoreNLP::TaggingFeatureExtractor::extractFeatures(v168, v144, v19, (uint64_t *)&p_str, v116, Mutable, (uint64_t)v145);
                      std::vector<std::vector<std::string>>::push_back[abi:ne180100]((uint64_t *)v146, (uint64_t)v145);
                      v172 = v145;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
                      ++v116;
                      v117 = (char *)p_str;
                      v118 = (v162 - (_BYTE *)p_str) >> 3;
                    }
                    while (v118 > v116);
                    if (p_str == v162)
                    {
                      v119 = 0;
                    }
                    else
                    {
                      v119 = 0;
                      do
                      {
                        v120 = *(_QWORD *)v117;
                        v117 += 8;
                        v119 += (*(_QWORD *)(v120 + 72) >> 11) & 1;
                      }
                      while (v117 != v162);
                    }
                  }
                  if (v143 != 7 || v118 >> 1 >= v119)
                  {
                    if ((v137 & 1) != 0)
                    {
                      HIDWORD(v121) = -1030792151 * v139 + 85899344;
                      LODWORD(v121) = HIDWORD(v121);
                      v122 = (v121 >> 2) < 0x28F5C29;
                    }
                    else
                    {
                      v122 = *((unsigned int *)v60 + 8);
                    }
                    (*(void (**)(uint64_t, void **, std::string **, uint64_t))(*(_QWORD *)v138 + 16))(v138, v146, &v158, v122);
                    ++v139;
                  }
                  v177.length = CFStringGetLength(Mutable);
                  v177.location = 0;
                  CFStringDelete(Mutable, v177);
                  v123 = (CoreNLP::NLAttributedToken **)p_str;
                  v124 = (CoreNLP::NLAttributedToken **)v162;
                  if (p_str != v162)
                  {
                    do
                    {
                      if (*v123)
                      {
                        CoreNLP::NLAttributedToken::~NLAttributedToken(*v123);
                        MEMORY[0x19401E994]();
                      }
                      ++v123;
                    }
                    while (v123 != v124);
                    v123 = (CoreNLP::NLAttributedToken **)p_str;
                  }
                  v162 = (char *)v123;
                  v125 = v158;
                  for (j = v159; j != v125; --j)
                  {
                    if (SHIBYTE(j[-1].__r_.__value_.__r.__words[2]) < 0)
                      operator delete(j[-1].__r_.__value_.__l.__data_);
                  }
                  v159 = v125;
                  v145[0] = v146;
                  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](v145);
                  if (v148[0].__locale_)
                  {
                    v148[1] = v148[0];
                    operator delete(v148[0].__locale_);
                  }
                }
                else
                {
                  v176.length = CFStringGetLength(Mutable);
                  v176.location = 0;
                  CFStringDelete(Mutable, v176);
                  v88 = (CoreNLP::NLAttributedToken **)p_str;
                  v89 = (CoreNLP::NLAttributedToken **)v162;
                  if (p_str != v162)
                  {
                    do
                    {
                      if (*v88)
                      {
                        CoreNLP::NLAttributedToken::~NLAttributedToken(*v88);
                        MEMORY[0x19401E994]();
                      }
                      ++v88;
                    }
                    while (v88 != v89);
                    v88 = (CoreNLP::NLAttributedToken **)p_str;
                  }
                  v162 = (char *)v88;
                  v90 = v158;
                  for (k = v159; k != v90; --k)
                  {
                    if (SHIBYTE(k[-1].__r_.__value_.__r.__words[2]) < 0)
                      operator delete(k[-1].__r_.__value_.__l.__data_);
                  }
                  v159 = v90;
                }
              }
            }
            else
            {
              v148[0].__locale_ = 0;
              v148[1].__locale_ = 0;
              v149 = 0;
              AnnotatedToken = CoreNLP::readAnnotatedToken((uint64_t)&__str, v143, v19, Mutable, (uint64_t)v148);
              v85 = AnnotatedToken;
              v86 = v162;
              if (v162 >= v163)
              {
                v92 = (v162 - (_BYTE *)p_str) >> 3;
                if ((unint64_t)(v92 + 1) >> 61)
                  std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
                v93 = (v163 - (_BYTE *)p_str) >> 2;
                if (v93 <= v92 + 1)
                  v93 = v92 + 1;
                if ((unint64_t)(v163 - (_BYTE *)p_str) >= 0x7FFFFFFFFFFFFFF8)
                  v94 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v94 = v93;
                if (v94)
                  v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v163, v94);
                else
                  v95 = 0;
                v96 = (uint64_t *)&v95[8 * v92];
                *v96 = v85;
                v87 = (char *)(v96 + 1);
                v98 = (char *)p_str;
                v97 = v162;
                if (v162 != p_str)
                {
                  do
                  {
                    v99 = *((_QWORD *)v97 - 1);
                    v97 -= 8;
                    *--v96 = v99;
                  }
                  while (v97 != v98);
                  v97 = (char *)p_str;
                }
                p_str = v96;
                v162 = v87;
                v163 = &v95[8 * v94];
                if (v97)
                  operator delete(v97);
              }
              else
              {
                *(_QWORD *)v162 = AnnotatedToken;
                v87 = v86 + 8;
              }
              v162 = v87;
              v100 = v159;
              if ((unint64_t)v159 >= v160)
              {
                v102 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v158, (__int128 *)v148);
              }
              else
              {
                if (SHIBYTE(v149) < 0)
                {
                  std::string::__init_copy_ctor_external(v159, (const std::string::value_type *)v148[0].__locale_, (std::string::size_type)v148[1].__locale_);
                }
                else
                {
                  v101 = *(_OWORD *)&v148[0].__locale_;
                  v159->__r_.__value_.__r.__words[2] = v149;
                  *(_OWORD *)&v100->__r_.__value_.__l.__data_ = v101;
                }
                v102 = v100 + 1;
              }
              v159 = v102;
              if (SHIBYTE(v149) < 0)
                operator delete(v148[0].__locale_);
            }
          }
        }
        *(_QWORD *)&__p[0].st_dev = v141;
        *(_QWORD *)((char *)&__p[0].st_dev + *(_QWORD *)(v141 - 24)) = v140;
        MEMORY[0x19401E70C](&__p[0].st_uid);
        std::istream::~istream();
        MEMORY[0x19401E928](v175);
        v64 += 24;
        v63 = v142;
      }
      v127 = (char *)v60[1];
      if (v127)
      {
        do
        {
          v128 = (char **)v127;
          v127 = *(char **)v127;
        }
        while (v127);
      }
      else
      {
        do
        {
          v128 = (char **)v60[2];
          v23 = *v128 == (char *)v60;
          v60 = (uint64_t *)v128;
        }
        while (!v23);
      }
      v60 = (uint64_t *)v128;
    }
    while (v128 != v157);
  }
  CFRelease(Mutable);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"\nINFO: total number of sentences: ", 34);
  v129 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v129 + *(_QWORD *)(*v129 - 24)));
  v130 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v130->__vftable[2].~facet_0)(v130, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v138 + 80))(v138, CoreNLP::logBlock);
  std::string::basic_string[abi:ne180100]<0>(__p, v135);
  (*(void (**)(uint64_t, stat *))(*(_QWORD *)v138 + 24))(v138, __p);
  if (SHIBYTE(__p[0].st_gid) < 0)
    operator delete(*(void **)&__p[0].st_dev);
  if (v136)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, v135);
    v131 = std::string::append((std::string *)__p, ".extractorData");
    v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
    v149 = v131->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v148[0].__locale_ = v132;
    v131->__r_.__value_.__l.__size_ = 0;
    v131->__r_.__value_.__r.__words[2] = 0;
    v131->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[0].st_gid) < 0)
      operator delete(*(void **)&__p[0].st_dev);
    std::ofstream::basic_ofstream(__p);
    std::ostream::write();
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)__p + *(_QWORD *)(*(_QWORD *)&__p[0].st_dev - 24)), *(_DWORD *)((char *)&__p[0].st_atimespec.tv_sec + *(_QWORD *)(*(_QWORD *)&__p[0].st_dev - 24)) | 4);
    std::string::basic_string[abi:ne180100]<0>(v146, v135);
    CoreNLP::CRFModel::setUserData();
    if (SHIBYTE(v147) < 0)
      operator delete(v146[0]);
    MEMORY[0x19401E970](v136, 0x1000C8077774924);
    *(_QWORD *)&__p[0].st_dev = *MEMORY[0x1E0DE4F48];
    *(_QWORD *)((char *)&__p[0].st_dev + *(_QWORD *)(*(_QWORD *)&__p[0].st_dev - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
    MEMORY[0x19401E70C](&__p[0].st_ino);
    std::ostream::~ostream();
    MEMORY[0x19401E928](&v174);
    if (SHIBYTE(v149) < 0)
      operator delete(v148[0].__locale_);
  }
  stat(v135, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"\nInfo: Model Size(bytes) ", 25);
  v133 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v133 + *(_QWORD *)(*v133 - 24)));
  v134 = std::locale::use_facet(v148, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v134->__vftable[2].~facet_0)(v134, 10);
  std::locale::~locale(v148);
  std::ostream::put();
  std::ostream::flush();
  *(_QWORD *)&__p[0].st_dev = &v150;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  *(_QWORD *)&__p[0].st_dev = &v152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__tree<std::__value_type<CoreNLP::NLTrainerDataType,std::vector<std::string>>,std::__map_value_compare<CoreNLP::NLTrainerDataType,std::__value_type<CoreNLP::NLTrainerDataType,std::vector<std::string>>,std::less<CoreNLP::NLTrainerDataType>,true>,std::allocator<std::__value_type<CoreNLP::NLTrainerDataType,std::vector<std::string>>>>::destroy((uint64_t)&v156, v157[0]);
  *(_QWORD *)&__p[0].st_dev = &v158;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (p_str)
  {
    v162 = (char *)p_str;
    operator delete(p_str);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
  std::__tree<std::string>::destroy((uint64_t)v165, (char *)v165[1]);
  CoreNLP::TaggerContext::~TaggerContext((CoreNLP::TaggerContext *)v167);
  CoreNLP::TaggingFeatureExtractor::~TaggingFeatureExtractor((CoreNLP::TaggingFeatureExtractor *)v168);
  CoreNLP::TaggingModelManager::~TaggingModelManager((CoreNLP::TaggingModelManager *)v169);
}

void sub_191CF59B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,std::locale a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a69;

  if (SLOBYTE(STACK[0x607]) < 0)
    operator delete((void *)STACK[0x5F0]);
  a28 = &a34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a34 = (uint64_t)&a37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  std::__tree<std::__value_type<CoreNLP::NLTrainerDataType,std::vector<std::string>>,std::__map_value_compare<CoreNLP::NLTrainerDataType,std::__value_type<CoreNLP::NLTrainerDataType,std::vector<std::string>>,std::less<CoreNLP::NLTrainerDataType>,true>,std::allocator<std::__value_type<CoreNLP::NLTrainerDataType,std::vector<std::string>>>>::destroy((uint64_t)&a42, (char *)a43);
  a42 = (uint64_t)&a45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a42);
  if (a48)
  {
    a49 = (uint64_t)a48;
    operator delete(a48);
  }
  if (a56 < 0)
    operator delete(a51);
  (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  std::__tree<std::string>::destroy((uint64_t)&a57, (char *)a58);
  CoreNLP::TaggerContext::~TaggerContext((CoreNLP::TaggerContext *)&a61);
  CoreNLP::TaggingFeatureExtractor::~TaggingFeatureExtractor((CoreNLP::TaggingFeatureExtractor *)&a69);
  CoreNLP::TaggingModelManager::~TaggingModelManager((CoreNLP::TaggingModelManager *)&STACK[0x368]);
  _Unwind_Resume(a1);
}

void NLTaggerTestModel(char *a1, const char *a2, char *a3, char *a4, char *a5)
{
  CFStringRef v9;
  const __CFString *v10;
  int v11;
  void **v12;
  int v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  std::string::size_type size;
  int v22;
  CFMutableStringRef Mutable;
  int v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  const std::locale::facet *v32;
  unsigned __int8 v33;
  _QWORD *v34;
  CoreNLP::NLAttributedToken *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t AnnotatedToken;
  uint64_t v40;
  int v41;
  uint64_t **v42;
  const __CFString **v43;
  const __CFString **v44;
  CFIndex Length;
  CoreNLP::NLAttributedToken **v46;
  CoreNLP::NLAttributedToken **v47;
  unint64_t v48;
  uint64_t **v49;
  uint64_t **v50;
  uint64_t **v51;
  uint64_t **v52;
  uint64_t *v53;
  void *v54;
  uint64_t *v55;
  void *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  std::locale::__imp *locale;
  std::string::size_type v61;
  char v62;
  std::string *v63;
  std::locale *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  CoreNLP::NLAttributedToken **v88;
  CoreNLP::NLAttributedToken **v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  const std::locale::facet *v93;
  _QWORD *v94;
  const std::locale::facet *v95;
  uint64_t *v96;
  int v97;
  int v98;
  int v99;
  _QWORD *v100;
  std::string *p_p;
  std::string::size_type v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  const std::locale::facet *v111;
  uint64_t *v112;
  uint64_t *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  const std::locale::facet *v118;
  _QWORD *v119;
  void *v120;
  uint64_t v121;
  _QWORD *v122;
  std::string::size_type v123;
  std::string::size_type v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  std::vector<int> v128;
  __int128 v129;
  uint64_t v130;
  std::string v131;
  std::locale v132[2];
  int64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  _QWORD *v137[2];
  void *v138;
  uint64_t *v139;
  uint64_t *v140;
  void *v141;
  uint64_t *v142;
  uint64_t *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148[2];
  CFStringRef v149[8];
  _BYTE v150[416];
  void *v151[2];
  char v152;
  uint64_t v153;
  int v154;
  std::locale *v155;
  std::string __p;
  void *v157;
  void *v158;
  _QWORD v159[21];
  CFRange v160;

  v159[19] = *MEMORY[0x1E0C80C00];
  v9 = CFStringCreateWithCString(0, a2, 0x8000100u);
  v11 = CoreNLP::languageIdForLanguage((uint64_t)v9, v10);
  CFRelease(v9);
  v154 = 0;
  std::string::basic_string[abi:ne180100]<0>(v151, a1);
  if (v152 < 0)
  {
    if (v151[1] != (void *)3)
      goto LABEL_10;
    v12 = (void **)v151[0];
  }
  else
  {
    if (v152 != 3)
      goto LABEL_10;
    v12 = v151;
  }
  v13 = *(unsigned __int16 *)v12;
  v14 = *((unsigned __int8 *)v12 + 2);
  v15 = v13 == 28528 && v14 == 115;
  if (v15)
  {
    v20 = 6;
    if ((v152 & 0x80) == 0)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_10:
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_ == 3)
    {
      v18 = bswap32(*(unsigned __int16 *)__p.__r_.__value_.__l.__data_) >> 16;
      if (v18 == 28261)
      {
        v19 = *(unsigned __int8 *)(__p.__r_.__value_.__r.__words[0] + 2) - 114;
      }
      else if (v18 < 0x6E65)
      {
        v19 = -1;
      }
      else
      {
        v19 = 1;
      }
      if (v19)
        v20 = 0;
      else
        v20 = 7;
    }
    else
    {
      v20 = 0;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 3)
  {
    v16 = bswap32(LOWORD(__p.__r_.__value_.__l.__data_)) >> 16;
    if (v16 == 28261)
    {
      v17 = __p.__r_.__value_.__s.__data_[2] - 114;
    }
    else if (v16 < 0x6E65)
    {
      v17 = -1;
    }
    else
    {
      v17 = 1;
    }
    if (v17)
      v20 = 0;
    else
      v20 = 7;
  }
  else
  {
    v20 = 0;
  }
  if (v152 < 0)
LABEL_35:
    operator delete(v151[0]);
LABEL_36:
  v154 = v20;
  CoreNLP::TaggingModelManager::TaggingModelManager((CoreNLP::TaggingModelManager *)v151);
  CoreNLP::TaggingFeatureExtractor::TaggingFeatureExtractor((CoreNLP::TaggingFeatureExtractor *)v150);
  CoreNLP::TaggerContext::TaggerContext((CoreNLP::TaggerContext *)v149);
  CoreNLP::TaggingModelManager::labelMap((uint64_t *)v151, v154, v11, &v147);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!size)
      goto LABEL_42;
  }
  else if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
  {
    goto LABEL_42;
  }
  v22 = v154;
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  CoreNLP::TaggingModelManager::setCustomModelPath((uint64_t)v151, v11, v22, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_42:
  v144 = 0;
  v145 = 0;
  v146 = 0;
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v141 = 0;
  v142 = 0;
  v143 = 0;
  v138 = 0;
  v139 = 0;
  v140 = 0;
  v137[0] = 0;
  v137[1] = 0;
  v136 = (uint64_t *)v137;
  if (v11 == 4 && v154 == 7)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, a5);
    CoreNLP::TaggingFeatureExtractor::setConstrainFeaturePath((uint64_t)v150, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, a5);
    CoreNLP::TaggingFeatureExtractor::setConstrainFeaturePath((uint64_t)&v153, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, a4);
  CoreNLP::parseDir((uint64_t)&__p, (uint64_t)&v134);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v126 = v134;
  v125 = v135;
  if (v134 != v135)
  {
    v24 = 0;
    v127 = 0;
    v123 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
    v124 = *MEMORY[0x1E0DE4F40];
    do
    {
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"\nINFO: Testing token data from", 30);
      v26 = *(char *)(v126 + 23);
      if (v26 >= 0)
        v27 = v126;
      else
        v27 = *(_QWORD *)v126;
      if (v26 >= 0)
        v28 = *(unsigned __int8 *)(v126 + 23);
      else
        v28 = *(_QWORD *)(v126 + 8);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"...", 3);
      std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(_QWORD *)(*v30 - 24)));
      v31 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
      std::locale::~locale((std::locale *)&__p);
      std::ostream::put();
      std::ostream::flush();
      std::ifstream::basic_ifstream(&__p);
      while (1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)&__p + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)));
        v32 = std::locale::use_facet(v132, MEMORY[0x1E0DE4A90]);
        v33 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
        std::locale::~locale(v132);
        v34 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, (uint64_t)&v144, v33);
        if ((*((_BYTE *)v34 + *(_QWORD *)(*v34 - 24) + 32) & 5) != 0)
          break;
        if (v146 >= 0)
          v36 = (char *)&v144;
        else
          v36 = (char *)v144;
        if (v146 >= 0)
          v37 = HIBYTE(v146);
        else
          v37 = v145;
        if (!v37)
          goto LABEL_78;
        v38 = 0;
        while (memchr(" \t\n\v\f\r", v36[v38], 6uLL))
        {
          if (v37 == ++v38)
            goto LABEL_78;
        }
        if (v38 == -1)
        {
LABEL_78:
          v43 = (const __CFString **)v138;
          v44 = (const __CFString **)v139;
          if (v138 != v139)
          {
            do
              CoreNLP::extractTokenExtendedAttributes((uint64_t)Mutable, *v43++, v35);
            while (v43 != v44);
            CoreNLP::TaggingModelManager::addTask((CoreNLP::TaggingModelManager *)v151, v154, v11);
            Length = CFStringGetLength(Mutable);
            CoreNLP::TaggerContext::setString((uint64_t)v149, Mutable, 0, Length, v11);
            if ((CoreNLP::TaggingModelManager::tagInstance(v151, (uint64_t *)&v138, v149, 0) & 1) == 0)
              exit(1);
            CoreNLP::printTokens(v151, v11, Mutable, (uint64_t *)&v138, (uint64_t *)&v141, v154);
            v160.length = CFStringGetLength(Mutable);
            v160.location = 0;
            CFStringDelete(Mutable, v160);
            v46 = (CoreNLP::NLAttributedToken **)v141;
            v47 = (CoreNLP::NLAttributedToken **)v142;
            if (v142 != v141)
            {
              v48 = 0;
              while (1)
              {
                v49 = (uint64_t **)((char *)v46[v48] + 24);
                v128.__begin_ = &v154;
                v50 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v49, &v154, (uint64_t)&std::piecewise_construct, &v128.__begin_);
                CoreNLP::tagToEvaluationLabel(v151, v11, *((_DWORD *)v50 + 10), v154, (uint64_t)v132);
                v51 = (uint64_t **)(*((_QWORD *)v138 + v48) + 24);
                v128.__begin_ = &v154;
                v52 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>(v51, &v154, (uint64_t)&std::piecewise_construct, &v128.__begin_);
                CoreNLP::tagToEvaluationLabel(v151, v11, *((_DWORD *)v52 + 10), v154, (uint64_t)&v131);
                if (v137 == (_QWORD **)std::__tree<std::string>::find<std::string>((uint64_t)&v136, (const void **)&v132[0].__locale_))
                {
                  std::vector<int>::vector(&v128, 3uLL);
                  v155 = v132;
                  v53 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v136, (const void **)&v132[0].__locale_, (uint64_t)&std::piecewise_construct, (__int128 **)&v155);
                  v54 = (void *)v53[7];
                  if (v54)
                  {
                    v53[8] = (uint64_t)v54;
                    operator delete(v54);
                    v53[7] = 0;
                    v53[8] = 0;
                    v53[9] = 0;
                  }
                  *(std::vector<int> *)(v53 + 7) = v128;
                }
                if (v137 == (_QWORD **)std::__tree<std::string>::find<std::string>((uint64_t)&v136, (const void **)&v131.__r_.__value_.__l.__data_))
                {
                  std::vector<int>::vector(&v128, 3uLL);
                  v155 = (std::locale *)&v131;
                  v55 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v136, (const void **)&v131.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v155);
                  v56 = (void *)v55[7];
                  if (v56)
                  {
                    v55[8] = (uint64_t)v56;
                    operator delete(v56);
                    v55[7] = 0;
                    v55[8] = 0;
                    v55[9] = 0;
                  }
                  *(std::vector<int> *)(v55 + 7) = v128;
                }
                v128.__begin_ = (std::vector<int>::pointer)v132;
                v57 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v136, (const void **)&v132[0].__locale_, (uint64_t)&std::piecewise_construct, (__int128 **)&v128);
                ++*(_DWORD *)(v57[7] + 8);
                v128.__begin_ = (std::vector<int>::pointer)&v131;
                v58 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v136, (const void **)&v131.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v128);
                ++*(_DWORD *)(v58[7] + 4);
                v59 = HIBYTE(v133);
                if (v133 >= 0)
                  locale = (std::locale::__imp *)HIBYTE(v133);
                else
                  locale = v132[1].__locale_;
                v61 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
                v62 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
                if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v61 = v131.__r_.__value_.__l.__size_;
                if (locale != (std::locale::__imp *)v61)
                  goto LABEL_108;
                v63 = (v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                    ? &v131
                    : (std::string *)v131.__r_.__value_.__r.__words[0];
                if ((v133 & 0x8000000000000000) == 0)
                  break;
                if (!memcmp(v132[0].__locale_, v63, (size_t)v132[1].__locale_))
                  goto LABEL_107;
LABEL_108:
                if (v62 < 0)
                  operator delete(v131.__r_.__value_.__l.__data_);
                if (SHIBYTE(v133) < 0)
                  operator delete(v132[0].__locale_);
                ++v24;
                ++v48;
                v46 = (CoreNLP::NLAttributedToken **)v141;
                v47 = (CoreNLP::NLAttributedToken **)v142;
                if (v48 >= ((char *)v142 - (_BYTE *)v141) >> 3)
                  goto LABEL_153;
              }
              if (HIBYTE(v133))
              {
                v64 = v132;
                while (LOBYTE(v64->__locale_) == v63->__r_.__value_.__s.__data_[0])
                {
                  v64 = (std::locale *)((char *)v64 + 1);
                  v63 = (std::string *)((char *)v63 + 1);
                  if (!--v59)
                    goto LABEL_107;
                }
                goto LABEL_108;
              }
LABEL_107:
              v128.__begin_ = (std::vector<int>::pointer)v132;
              v65 = std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v136, (const void **)&v132[0].__locale_, (uint64_t)&std::piecewise_construct, (__int128 **)&v128);
              ++v127;
              ++*(_DWORD *)v65[7];
              v62 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
              goto LABEL_108;
            }
            v46 = (CoreNLP::NLAttributedToken **)v142;
LABEL_153:
            v89 = (CoreNLP::NLAttributedToken **)v138;
            v88 = (CoreNLP::NLAttributedToken **)v139;
            if (v138 != v139)
            {
              do
              {
                if (*v89)
                {
                  CoreNLP::NLAttributedToken::~NLAttributedToken(*v89);
                  MEMORY[0x19401E994]();
                }
                ++v89;
              }
              while (v89 != v88);
              v46 = (CoreNLP::NLAttributedToken **)v141;
              v47 = (CoreNLP::NLAttributedToken **)v142;
            }
            if (v46 != v47)
            {
              do
              {
                if (*v46)
                {
                  CoreNLP::NLAttributedToken::~NLAttributedToken(*v46);
                  MEMORY[0x19401E994]();
                }
                ++v46;
              }
              while (v46 != v47);
              v47 = (CoreNLP::NLAttributedToken **)v141;
            }
            v139 = (uint64_t *)v138;
            v142 = (uint64_t *)v47;
          }
        }
        else
        {
          v132[0].__locale_ = 0;
          v132[1].__locale_ = 0;
          v133 = 0;
          AnnotatedToken = CoreNLP::readAnnotatedToken((uint64_t)&v144, v154, v11, Mutable, (uint64_t)v132);
          if (v154 == 6)
          {
            CoreNLP::annotationToTrainingLabel(6, (unsigned __int16 *)v132, &v131);
            if (SHIBYTE(v133) < 0)
              operator delete(v132[0].__locale_);
            *(_OWORD *)&v132[0].__locale_ = *(_OWORD *)&v131.__r_.__value_.__l.__data_;
            v133 = v131.__r_.__value_.__r.__words[2];
          }
          v40 = std::__tree<std::string>::find<std::string>((uint64_t)&v147, (const void **)&v132[0].__locale_);
          if (v148 == (char **)v40)
          {
            std::string::basic_string[abi:ne180100]<0>(&v131, "NONE");
            v66 = std::__tree<std::string>::find<std::string>((uint64_t)&v147, (const void **)&v131.__r_.__value_.__l.__data_);
            if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v131.__r_.__value_.__l.__data_);
            if (v148 == (char **)v66)
            {
              v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"\nERROR: Not able to determine the expected tag for unexposed label: ", 68);
              if (v133 >= 0)
                v120 = v132;
              else
                v120 = v132[0].__locale_;
              if (v133 >= 0)
                v121 = HIBYTE(v133);
              else
                v121 = (uint64_t)v132[1].__locale_;
              v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)v120, v121);
              std::endl[abi:ne180100]<char,std::char_traits<char>>(v122);
              exit(1);
            }
            v41 = *(_DWORD *)(v66 + 56);
            v128.__begin_ = &v154;
            v42 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)(AnnotatedToken + 24), &v154, (uint64_t)&std::piecewise_construct, &v128.__begin_);
          }
          else
          {
            v41 = *(_DWORD *)(v40 + 56);
            v128.__begin_ = &v154;
            v42 = std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__emplace_unique_key_args<CoreNLP::NLTagSchemeType,std::piecewise_construct_t const&,std::tuple<CoreNLP::NLTagSchemeType&&>,std::tuple<>>((uint64_t **)(AnnotatedToken + 24), &v154, (uint64_t)&std::piecewise_construct, &v128.__begin_);
          }
          *((_DWORD *)v42 + 10) = v41;
          v67 = operator new();
          v129 = *(_OWORD *)AnnotatedToken;
          v130 = 0;
          CoreNLP::NLAttributedToken::NLAttributedToken(v67, (uint64_t)&v129);
          v68 = v142;
          if (v142 >= v143)
          {
            v70 = ((char *)v142 - (_BYTE *)v141) >> 3;
            if ((unint64_t)(v70 + 1) >> 61)
              goto LABEL_194;
            v71 = ((char *)v143 - (_BYTE *)v141) >> 2;
            if (v71 <= v70 + 1)
              v71 = v70 + 1;
            if ((unint64_t)((char *)v143 - (_BYTE *)v141) >= 0x7FFFFFFFFFFFFFF8)
              v72 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v72 = v71;
            if (v72)
              v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v143, v72);
            else
              v73 = 0;
            v74 = (uint64_t *)&v73[8 * v70];
            *v74 = AnnotatedToken;
            v69 = v74 + 1;
            v76 = (char *)v141;
            v75 = (char *)v142;
            if (v142 != v141)
            {
              do
              {
                v77 = *((_QWORD *)v75 - 1);
                v75 -= 8;
                *--v74 = v77;
              }
              while (v75 != v76);
              v75 = (char *)v141;
            }
            v141 = v74;
            v142 = v69;
            v143 = (uint64_t *)&v73[8 * v72];
            if (v75)
              operator delete(v75);
          }
          else
          {
            *v142 = AnnotatedToken;
            v69 = v68 + 1;
          }
          v142 = v69;
          v78 = v139;
          if (v139 >= v140)
          {
            v80 = ((char *)v139 - (_BYTE *)v138) >> 3;
            if ((unint64_t)(v80 + 1) >> 61)
LABEL_194:
              std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
            v81 = ((char *)v140 - (_BYTE *)v138) >> 2;
            if (v81 <= v80 + 1)
              v81 = v80 + 1;
            if ((unint64_t)((char *)v140 - (_BYTE *)v138) >= 0x7FFFFFFFFFFFFFF8)
              v82 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v82 = v81;
            if (v82)
              v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v140, v82);
            else
              v83 = 0;
            v84 = (uint64_t *)&v83[8 * v80];
            *v84 = v67;
            v79 = v84 + 1;
            v86 = (char *)v138;
            v85 = (char *)v139;
            if (v139 != v138)
            {
              do
              {
                v87 = *((_QWORD *)v85 - 1);
                v85 -= 8;
                *--v84 = v87;
              }
              while (v85 != v86);
              v85 = (char *)v138;
            }
            v138 = v84;
            v139 = v79;
            v140 = (uint64_t *)&v83[8 * v82];
            if (v85)
              operator delete(v85);
          }
          else
          {
            *v139 = v67;
            v79 = v78 + 1;
          }
          v139 = v79;
          if (SHIBYTE(v133) < 0)
            operator delete(v132[0].__locale_);
        }
      }
      __p.__r_.__value_.__r.__words[0] = v124;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v124 - 24)) = v123;
      MEMORY[0x19401E70C](&__p.__r_.__value_.__r.__words[2]);
      std::istream::~istream();
      MEMORY[0x19401E928](v159);
      v126 += 24;
    }
    while (v126 != v125);
  }
  CFRelease(Mutable);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"\nINFO: item accuracy: ", 22);
  v90 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"/", 1);
  v91 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)" = ", 3);
  v92 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v92 + *(_QWORD *)(*v92 - 24)));
  v93 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v93->__vftable[2].~facet_0)(v93, 10);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put();
  std::ostream::flush();
  v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"\nINFO: Performance by label (#match, #model, #ref) (precision, recall, F1):", 75);
  std::ios_base::getloc((const std::ios_base *)((char *)v94 + *(_QWORD *)(*v94 - 24)));
  v95 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v95->__vftable[2].~facet_0)(v95, 10);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put();
  std::ostream::flush();
  v96 = v136;
  if (v136 != (uint64_t *)v137)
  {
    v97 = 0;
    v98 = 0;
    v99 = 0;
    do
    {
      std::pair<std::string const,std::vector<int>>::pair[abi:ne180100](&__p, (__int128 *)v96 + 2);
      if (std::string::compare(&__p, "Other") && std::string::compare(&__p, "NONE") && std::string::compare(&__p, "O"))
      {
        v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"\t", 1);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v102 = __p.__r_.__value_.__l.__size_;
        v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)p_p, v102);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)": (", 3);
        v104 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)", ", 2);
        v105 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)", ", 2);
        v106 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)") (", 3);
        v107 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)", ", 2);
        v108 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)", ", 2);
        v109 = (_QWORD *)std::ostream::operator<<();
        v110 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)")", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)v110 + *(_QWORD *)(*v110 - 24)));
        v111 = std::locale::use_facet(v132, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v111->__vftable[2].~facet_0)(v111, 10);
        std::locale::~locale(v132);
        std::ostream::put();
        std::ostream::flush();
        v99 += *(_DWORD *)v157;
        v98 += *((_DWORD *)v157 + 1);
        v97 += *((_DWORD *)v157 + 2);
      }
      if (v157)
      {
        v158 = v157;
        operator delete(v157);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v112 = (uint64_t *)v96[1];
      if (v112)
      {
        do
        {
          v113 = v112;
          v112 = (uint64_t *)*v112;
        }
        while (v112);
      }
      else
      {
        do
        {
          v113 = (uint64_t *)v96[2];
          v15 = *v113 == (_QWORD)v96;
          v96 = v113;
        }
        while (!v15);
      }
      v96 = v113;
    }
    while (v113 != (uint64_t *)v137);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"\nINFO: Average precision, recall, F1: (", 39);
  v114 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)", ", 2);
  v115 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)", ", 2);
  v116 = (_QWORD *)std::ostream::operator<<();
  v117 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)")", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v117 + *(_QWORD *)(*v117 - 24)));
  v118 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v118->__vftable[2].~facet_0)(v118, 10);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put();
  std::ostream::flush();
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v134;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy((uint64_t)&v136, v137[0]);
  if (v138)
  {
    v139 = (uint64_t *)v138;
    operator delete(v138);
  }
  if (v141)
  {
    v142 = (uint64_t *)v141;
    operator delete(v141);
  }
  if (SHIBYTE(v146) < 0)
    operator delete(v144);
  std::__tree<std::string>::destroy((uint64_t)&v147, v148[0]);
  CoreNLP::TaggerContext::~TaggerContext((CoreNLP::TaggerContext *)v149);
  CoreNLP::TaggingFeatureExtractor::~TaggingFeatureExtractor((CoreNLP::TaggingFeatureExtractor *)v150);
  CoreNLP::TaggingModelManager::~TaggingModelManager((CoreNLP::TaggingModelManager *)v151);
}

void sub_191CF6E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,std::locale a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (SLOBYTE(STACK[0x5D7]) < 0)
    operator delete((void *)STACK[0x5C0]);
  std::__tree<std::__value_type<std::string,std::vector<float>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<float>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<float>>>>::destroy((uint64_t)&a36, (_QWORD *)a37);
  if (a39)
  {
    a40 = (uint64_t)a39;
    operator delete(a39);
  }
  if (a42)
  {
    a43 = (uint64_t)a42;
    operator delete(a42);
  }
  if (a50 < 0)
    operator delete(a45);
  std::__tree<std::string>::destroy((uint64_t)&a51, (char *)a52);
  CoreNLP::TaggerContext::~TaggerContext((CoreNLP::TaggerContext *)&a54);
  CoreNLP::TaggingFeatureExtractor::~TaggingFeatureExtractor((CoreNLP::TaggingFeatureExtractor *)&a62);
  CoreNLP::TaggingModelManager::~TaggingModelManager((CoreNLP::TaggingModelManager *)&STACK[0x330]);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::set<std::string>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[1], (const void ***)a2 + 3);
  return this;
}

void sub_191CF7120(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string const,std::vector<int>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(this[1].__r_.__value_.__r.__words, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 2);
  return this;
}

void sub_191CF71A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_191CF72E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t **std::istream_iterator<std::string,char,std::char_traits<char>,long>::istream_iterator[abi:ne180100](uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;

  *a1 = a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  v3 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)(a1 + 1));
  if ((*((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 32) & 5) != 0)
    *a1 = 0;
  return a1;
}

void sub_191CF742C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::string>::vector<std::istream_iterator<std::string,char,std::char_traits<char>,long>,0>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  std::string __p;
  uint64_t *v8;
  std::string v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v8 = *(uint64_t **)a2;
  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    v9 = *(std::string *)(a2 + 8);
  v6 = *(uint64_t **)a3;
  if (*(char *)(a3 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  else
    __p = *(std::string *)(a3 + 8);
  std::vector<std::string>::__init_with_sentinel[abi:ne180100]<std::istream_iterator<std::string,char,std::char_traits<char>,long>,std::istream_iterator<std::string,char,std::char_traits<char>,long>>(a1, &v8, &v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return a1;
}

void sub_191CF7520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::string>::__init_with_sentinel[abi:ne180100]<std::istream_iterator<std::string,char,std::char_traits<char>,long>,std::istream_iterator<std::string,char,std::char_traits<char>,long>>(uint64_t *result, uint64_t **a2, uint64_t **a3)
{
  uint64_t *v5;
  __int128 *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  if (*a2 != *a3)
  {
    v5 = result;
    v6 = (__int128 *)(a2 + 1);
    do
    {
      v7 = v5[1];
      if (v7 >= v5[2])
      {
        v8 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v5, v6);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v5, v6);
        v8 = v7 + 24;
      }
      v5[1] = v8;
      result = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*a2, (uint64_t)v6);
      if ((*((_BYTE *)result + *(_QWORD *)(*result - 24) + 32) & 5) != 0)
      {
        v9 = 0;
        *a2 = 0;
      }
      else
      {
        v9 = *a2;
      }
    }
    while (v9 != *a3);
  }
  return result;
}

void sub_191CF7620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<CoreNLP::NLTrainerDataType,std::vector<std::string>>,std::__map_value_compare<CoreNLP::NLTrainerDataType,std::__value_type<CoreNLP::NLTrainerDataType,std::vector<std::string>>,std::less<CoreNLP::NLTrainerDataType>,true>,std::allocator<std::__value_type<CoreNLP::NLTrainerDataType,std::vector<std::string>>>>::destroy(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    std::__tree<std::__value_type<CoreNLP::NLTrainerDataType,std::vector<std::string>>,std::__map_value_compare<CoreNLP::NLTrainerDataType,std::__value_type<CoreNLP::NLTrainerDataType,std::vector<std::string>>,std::less<CoreNLP::NLTrainerDataType>,true>,std::allocator<std::__value_type<CoreNLP::NLTrainerDataType,std::vector<std::string>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<CoreNLP::NLTrainerDataType,std::vector<std::string>>,std::__map_value_compare<CoreNLP::NLTrainerDataType,std::__value_type<CoreNLP::NLTrainerDataType,std::vector<std::string>>,std::less<CoreNLP::NLTrainerDataType>,true>,std::allocator<std::__value_type<CoreNLP::NLTrainerDataType,std::vector<std::string>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 40);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

uint64_t std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;
  int64x2_t v12;
  __int128 v13;

  result = a3[1];
  v4 = result - *a3;
  if ((_DWORD)result != *a3)
  {
    v5 = v4 + 1;
    if (v4 == -1)
    {
      v10 = a2;
      v11 = xmmword_191D42E40;
      v12 = vdupq_n_s64(2uLL);
      v13 = xmmword_191D42E50;
      return std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval((uint64_t)&v10);
    }
    else
    {
      v7 = __clz(v5);
      v8 = 31;
      if (((v5 << v7) & 0x7FFFFFFF) != 0)
        v8 = 32;
      std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__independent_bits_engine((uint64_t)&v10, a2, v8 - v7);
      do
        v9 = std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval((uint64_t)&v10);
      while (v9 >= v5);
      return *a3 + v9;
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (a3 % 0x1E)
    v3 = a3 / 0x1E + 1;
  else
    v3 = a3 / 0x1E;
  v4 = a3 / v3;
  *(_QWORD *)(result + 16) = a3 / v3;
  *(_QWORD *)(result + 24) = v3;
  LODWORD(v5) = (-1 << (a3 / v3)) & 0x7FFFFFFE;
  if (a3 / v3 >= 0x20)
    v5 = 0;
  else
    v5 = v5;
  *(_DWORD *)(result + 40) = v5;
  if (v5 / v3 < (v5 ^ 0x7FFFFFFE))
  {
    ++v3;
    v4 = a3 / v3;
    *(_QWORD *)(result + 16) = a3 / v3;
    *(_QWORD *)(result + 24) = v3;
    if (a3 / v3 > 0x1F)
    {
      *(_DWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 32) = v3 + v4 * v3 - a3;
      goto LABEL_13;
    }
    *(_DWORD *)(result + 40) = (-1 << v4) & 0x7FFFFFFE;
  }
  *(_QWORD *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 <= 0x1E)
  {
    *(_DWORD *)(result + 44) = (-2 << v4) & 0x7FFFFFFE;
    v6 = 1;
    goto LABEL_14;
  }
LABEL_13:
  v6 = 0;
  *(_DWORD *)(result + 44) = 0;
LABEL_14:
  v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4)
    v7 = 0;
  v8 = 0xFFFFFFFF >> ~(_BYTE)v4;
  if (!v6)
    v8 = -1;
  *(_DWORD *)(result + 48) = v7;
  *(_DWORD *)(result + 52) = v8;
  return result;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval(uint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  int v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    LODWORD(result) = 0;
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 16);
    v6 = **(_DWORD **)a1;
    do
    {
      do
      {
        v7 = v6 / 0xADC8;
        v8 = 48271 * (v6 % 0xADC8);
        v7 *= 3399;
        v9 = v8 >= v7;
        v10 = v8 - v7;
        if (v9)
          v11 = 0;
        else
          v11 = 0x7FFFFFFF;
        v6 = v11 + v10;
      }
      while (v6 - 1 >= *(_DWORD *)(a1 + 40));
      v12 = (_DWORD)result << v5;
      if (v5 >= 0x20)
        v12 = 0;
      result = v12 + (*(_DWORD *)(a1 + 48) & (v6 - 1));
      ++v4;
    }
    while (v4 != v2);
    **(_DWORD **)a1 = v6;
  }
  else
  {
    result = 0;
  }
  v13 = *(_QWORD *)(a1 + 24);
  if (v2 < v13)
  {
    v14 = *(unsigned int **)a1;
    v15 = *(_DWORD *)(a1 + 44);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_DWORD *)(a1 + 52);
    v18 = *v14;
    while (1)
    {
      v19 = v18 / 0xADC8;
      v20 = 48271 * (v18 % 0xADC8);
      v19 *= 3399;
      v9 = v20 >= v19;
      v21 = v20 - v19;
      if (v9)
        v22 = 0;
      else
        v22 = 0x7FFFFFFF;
      v18 = v22 + v21;
      if (v18 - 1 < v15)
      {
        v23 = (_DWORD)result << (v16 + 1);
        if (v16 >= 0x1F)
          v23 = 0;
        result = v23 + (v17 & (v18 - 1));
        if (++v2 == v13)
          break;
      }
    }
    *v14 = v18;
  }
  return result;
}

CoreNLP::ThaiSubWordTagger *CoreNLP::ThaiSubWordTagger::ThaiSubWordTagger(CoreNLP::ThaiSubWordTagger *this, const CoreNLP::TaggerContext *a2, const CoreNLP::StringBuffer *a3)
{
  *CoreNLP::SubWordTagger::SubWordTagger(this, (uint64_t)a2, (uint64_t)a3) = &off_1E2DF2550;
  *((_QWORD *)this + 6) = ThaiTokenizerCreate();
  return this;
}

void sub_191CF7988(_Unwind_Exception *a1)
{
  CoreNLP::SubWordTagger *v1;

  CoreNLP::SubWordTagger::~SubWordTagger(v1);
  _Unwind_Resume(a1);
}

void CoreNLP::ThaiSubWordTagger::~ThaiSubWordTagger(CoreNLP::ThaiSubWordTagger *this)
{
  *(_QWORD *)this = &off_1E2DF2550;
  if (*((_QWORD *)this + 6))
    ThaiTokenizerDestroy();
  CoreNLP::SubWordTagger::~SubWordTagger(this);
}

{
  CoreNLP::ThaiSubWordTagger::~ThaiSubWordTagger(this);
  JUMPOUT(0x19401E994);
}

uint64_t CoreNLP::ThaiSubWordTagger::setString(CoreNLP::ThaiSubWordTagger *this, const __CFString *a2, CFRange a3)
{
  uint64_t result;

  CoreNLP::SubWordTagger::setString(this, a2, a3);
  result = *((_QWORD *)this + 6);
  if (result)
    return ThaiTokenizerSetStringWithRange();
  return result;
}

uint64_t CoreNLP::ThaiSubWordTagger::fastEnumerateTokensWithSpecifiedStop(uint64_t result, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  char v6;
  uint64_t v7;
  _QWORD v8[3];

  if (*(_QWORD *)(result + 48))
  {
    do
    {
      result = ThaiTokenizerAdvanceToNextToken();
      if (!(_DWORD)result)
        break;
      v6 = result;
      v8[0] = ThaiTokenizerGetCurrentTokenRange();
      v8[1] = v7;
      v8[2] = 32 * ((v6 & 6) != 0);
      result = (*(uint64_t (**)(uint64_t, _QWORD *, _BYTE *))(a4 + 16))(a4, v8, a3);
    }
    while (!*a3);
  }
  return result;
}

uint64_t CoreNLP::ThaiSubWordTagger::enumeratePossiblePersonNameSequences(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = 0;
  return (*(uint64_t (**)(uint64_t, char *))(a2 + 16))(a2, &v3);
}

uint64_t CoreNLP::ThaiSubWordTagger::enumeratePersonNamesOfCurrentSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int128 *v5;
  int v6;
  CFIndex v7;
  uint64_t v8;
  CFRange v10;
  __int128 v11;
  uint64_t v12;
  char v13;

  v13 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = (__int128 *)(v4 + 16);
  v6 = CFStringFindWithOptions(*(CFStringRef *)(v4 + 8), CFSTR(" "), *(CFRange *)(v4 + 16), 0, &v10);
  v12 = 0x10000;
  if (!v6)
  {
    v11 = *v5;
    goto LABEL_5;
  }
  v7 = v10.location - *(_QWORD *)v5;
  *(_QWORD *)&v11 = *(_QWORD *)v5;
  *((_QWORD *)&v11 + 1) = v7;
  (*(void (**)(uint64_t, __int128 *, char *))(a3 + 16))(a3, &v11, &v13);
  if (!v13)
  {
    v12 = 0x40000;
    v8 = *(_QWORD *)(v4 + 24) + ~*((_QWORD *)&v11 + 1);
    *(_QWORD *)&v11 = v10.location + 1;
    *((_QWORD *)&v11 + 1) = v8;
LABEL_5:
    (*(void (**)(uint64_t, __int128 *, char *))(a3 + 16))(a3, &v11, &v13);
  }
  return 1;
}

char *CoreNLP::ThaiSubWordTagger::goToTokenAtIndex(CoreNLP::ThaiSubWordTagger *this, unint64_t a2, uint64_t a3, CFRange *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  char v11;
  CFIndex CurrentTokenRange;
  CFIndex v14;

  if (a4)
    *a4 = (CFRange)xmmword_191D40610;
  if (!*((_QWORD *)this + 6))
    return 0;
  v6 = *((_QWORD *)this + 1);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7 > a3 || *(_QWORD *)(v6 + 24) + v7 <= a3)
    return 0;
  v9 = (char *)this + 24;
  v8 = *((_QWORD *)this + 3);
  if (v8 > a3 || *((_QWORD *)this + 4) + v8 <= a3)
  {
    v10 = ThaiTokenizerGoToTokenAtIndex();
    if (!v10)
      return 0;
    v11 = v10;
    if ((v10 & 4) != 0 && (**((_QWORD **)this + 1) & 0x10000) == 0)
      return 0;
    CurrentTokenRange = ThaiTokenizerGetCurrentTokenRange();
    if (a4 && (v11 & 8) != 0)
    {
      v9 = 0;
      a4->location = CurrentTokenRange;
      a4->length = v14;
    }
    else
    {
      *((_QWORD *)this + 3) = CurrentTokenRange;
      *((_QWORD *)this + 4) = v14;
      *((_QWORD *)this + 5) = 32 * ((v11 & 6) != 0);
    }
  }
  return v9;
}

uint64_t CoreNLP::ThaiSubWordTagger::copyTranscriptionOfCurrentToken()
{
  return 0;
}

uint64_t CoreNLP::ThaiSubWordTagger::getTranscriptionCharactersPtrOfCurrentToken()
{
  return 0;
}

char *CoreNLP::ThaiSubWordTagger::getNextToken(CoreNLP::ThaiSubWordTagger *this, CFRange *a2)
{
  int Token;
  char v5;
  CFIndex CurrentTokenRange;
  CFIndex v7;
  char *v8;

  if (!*((_QWORD *)this + 6))
    return 0;
  do
  {
    Token = ThaiTokenizerAdvanceToNextToken();
    v5 = Token;
  }
  while ((*(_BYTE *)(*((_QWORD *)this + 1) + 2) & 1) == 0 && (Token & 4) != 0);
  if (!Token)
    return 0;
  CurrentTokenRange = ThaiTokenizerGetCurrentTokenRange();
  if (a2 && (v5 & 8) != 0)
  {
    v8 = 0;
    a2->location = CurrentTokenRange;
    a2->length = v7;
  }
  else
  {
    *((_QWORD *)this + 3) = CurrentTokenRange;
    *((_QWORD *)this + 4) = v7;
    v8 = (char *)this + 24;
    *((_QWORD *)v8 + 2) = 32 * ((v5 & 6) != 0);
  }
  return v8;
}

uint64_t CoreNLP::SentenceEmbedding::version(CoreNLP::SentenceEmbedding *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t CoreNLP::SentenceEmbedding::dimension(CoreNLP::SentenceEmbedding *this)
{
  if (*((_DWORD *)this + 4) == 10)
    return 512;
  else
    return 640;
}

uint64_t CoreNLP::SentenceEmbedding::modelLanguage(CoreNLP::SentenceEmbedding *this)
{
  return *((unsigned int *)this + 4);
}

void CoreNLP::Resource::getAssetResource(CoreNLP::Resource *this@<X0>, const __CFLocale *a2@<X1>, const __CFString *a3@<X2>, const __CFString *a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned int v5;
  _QWORD v10[7];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = a4;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  if (CoreNLP::load(void)::onceToken != -1)
    dispatch_once(&CoreNLP::load(void)::onceToken, &__block_literal_global_19);
  if (CoreNLP::isSoftlinked)
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 0x40000000;
    v10[2] = ___ZN7CoreNLP8Resource16getAssetResourceEPK10__CFLocalePK10__CFStringS6_b_block_invoke;
    v10[3] = &unk_1E2DF3A08;
    v10[5] = a2;
    v10[6] = a3;
    v10[4] = &v11;
    CoreNLP::_LDEnumerateAssetDataItems(this, v5, v10);
  }
  *a5 = v12[3];
  _Block_object_dispose(&v11, 8);
}

void sub_191CF7E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN7CoreNLP8Resource16getAssetResourceEPK10__CFLocalePK10__CFStringS6_b_block_invoke(uint64_t a1, const __CFURL *a2, int a3, const void *a4, CFStringRef theString1, _BYTE *a6)
{
  CFStringRef PathComponent;
  CoreNLP::Resource *v11;

  if (CFStringCompare(theString1, *(CFStringRef *)(a1 + 40), 0) == kCFCompareEqualTo)
  {
    PathComponent = CFURLCopyLastPathComponent(a2);
    if (CFStringCompare(PathComponent, *(CFStringRef *)(a1 + 48), 0) == kCFCompareEqualTo)
    {
      v11 = (CoreNLP::Resource *)operator new();
      CoreNLP::Resource::Resource(v11, a2, a4, PathComponent);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v11;
      *a6 = 1;
    }
    CFRelease(PathComponent);
  }
}

void sub_191CF7F58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x60C4045F868BCLL);
  _Unwind_Resume(a1);
}

void CoreNLP::Resource::enumerateAssetResources(uint64_t a1, uint64_t a2)
{
  _QWORD v4[6];
  _QWORD v5[3];
  char v6;

  if (CoreNLP::load(void)::onceToken != -1)
    dispatch_once(&CoreNLP::load(void)::onceToken, &__block_literal_global_19);
  if (CoreNLP::isSoftlinked)
  {
    v5[0] = 0;
    v5[1] = v5;
    v5[2] = 0x2000000000;
    v6 = 0;
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 0x40000000;
    v4[2] = ___ZN7CoreNLP8Resource23enumerateAssetResourcesEPK10__CFLocaleU13block_pointerFvNSt3__110unique_ptrIS0_NS4_14default_deleteIS0_EEEEPK10__CFStringPbE_block_invoke;
    v4[3] = &unk_1E2DF5460;
    v4[4] = a2;
    v4[5] = v5;
    CoreNLP::_LDEnumerateAssetDataItems(a1, 0, v4);
    _Block_object_dispose(v5, 8);
  }
}

void sub_191CF8044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN7CoreNLP8Resource23enumerateAssetResourcesEPK10__CFLocaleU13block_pointerFvNSt3__110unique_ptrIS0_NS4_14default_deleteIS0_EEEEPK10__CFStringPbE_block_invoke(uint64_t a1, CFURLRef url, uint64_t a3, const void *a4, uint64_t a5, _BYTE *a6)
{
  CFStringRef PathComponent;
  CoreNLP::Resource *v11;

  PathComponent = CFURLCopyLastPathComponent(url);
  v11 = (CoreNLP::Resource *)operator new();
  CoreNLP::Resource::Resource(v11, url, a4, PathComponent);
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (v11)
  {
    CoreNLP::Resource::~Resource(v11);
    MEMORY[0x19401E994]();
  }
  if (PathComponent)
    CFRelease(PathComponent);
  *a6 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
}

void sub_191CF8140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<CoreNLP::Resource>::reset[abi:ne180100]((CoreNLP::Resource **)va, 0);
  _Unwind_Resume(a1);
}

CoreNLP::Resource *CoreNLP::Resource::Resource(CoreNLP::Resource *this, CFTypeRef cf, CFTypeRef a3, CFTypeRef a4)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (cf)
    *(_QWORD *)this = CFRetain(cf);
  if (a3)
    *((_QWORD *)this + 1) = CFRetain(a3);
  if (a4)
    *((_QWORD *)this + 2) = CFRetain(a4);
  return this;
}

void CoreNLP::Resource::~Resource(CoreNLP::Resource *this)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = *(const void **)this;
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 1);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 2);
  if (v4)
    CFRelease(v4);
}

uint64_t CoreNLP::Resource::URL(CoreNLP::Resource *this)
{
  return *(_QWORD *)this;
}

_QWORD *CoreNLP::Resource::path@<X0>(CoreNLP **this@<X0>, _QWORD *a2@<X8>)
{
  CoreNLP *v2;

  v2 = *this;
  if (v2)
    CoreNLP::getFileSystemRepresentationFromCFURL(v2, a2);
  return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

BOOL CoreNLP::Resource::exists(CoreNLP **this)
{
  void **v1;
  int v2;
  int v3;
  void *__p[2];
  char v6;

  CoreNLP::Resource::path(this, __p);
  if (v6 >= 0)
    v1 = __p;
  else
    v1 = (void **)__p[0];
  v2 = open((const char *)v1, 0);
  v3 = v2;
  if ((v2 & 0x80000000) == 0)
    close(v2);
  if (v6 < 0)
    operator delete(__p[0]);
  return v3 >= 0;
}

void sub_191CF82BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *tokenTypeToTokenizer@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  char *v4;

  if (a1 == 1)
  {
    result = (_QWORD *)operator new();
  }
  else
  {
    if (a1)
    {
      result = 0;
      goto LABEL_7;
    }
    result = (_QWORD *)operator new();
  }
  *result = v4 + 16;
LABEL_7:
  *a2 = result;
  return result;
}

void corelm::VocabularyBuilder::makeVocabulary(uint64_t a1@<X0>, int a2@<W1>, void **a3@<X8>)
{
  _BOOL4 hasFile;
  _BOOL4 v7;
  _BOOL4 v8;
  uint64_t v9;
  void *v10;
  std::runtime_error *exception;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  std::string v16;
  void *__p;
  std::string v18;
  std::string v19;

  std::string::basic_string[abi:ne180100]<0>(&__p, "vocab.txt");
  hasFile = corelm::util::Directory::hasFile(a1, (uint64_t)&__p);
  v7 = hasFile;
  if (v18.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(__p);
    if (v7)
      goto LABEL_3;
  }
  else if (hasFile)
  {
LABEL_3:
    std::string::basic_string[abi:ne180100]<0>(&v16, "vocab.txt");
    corelm::util::Directory::getFilePath(a1, (uint64_t)&v16, (uint64_t)&__p);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v19, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      __p = &unk_1E2DF1AB8;
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
    }
    else
    {
      v19 = v18;
      __p = &unk_1E2DF1AB8;
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(v14, "special_map.txt");
    if (corelm::util::Directory::hasFile(a1, (uint64_t)v14))
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "special_map.txt");
      corelm::util::Directory::getFilePath(a1, (uint64_t)v12, (uint64_t)&__p);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v16, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
        __p = &unk_1E2DF1AB8;
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v18.__r_.__value_.__l.__data_);
      }
      else
      {
        v16 = v18;
        __p = &unk_1E2DF1AB8;
      }
      if (v13 < 0)
        operator delete(v12[0]);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v16, "");
    }
    if (v15 < 0)
      operator delete(v14[0]);
    tokenTypeToTokenizer(a2, &__p);
    std::make_unique[abi:ne180100]<corelm::TokenListVocabulary,std::string &,std::unique_ptr<corelm::AbstractTokenizer>,std::string &>((uint64_t)&v19, (uint64_t *)&__p, (uint64_t)&v16, (uint64_t *)v14);
    *a3 = v14[0];
    v10 = __p;
    __p = 0;
    if (v10)
      (*(void (**)(void *))(*(_QWORD *)v10 + 8))(v10);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    goto LABEL_34;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "sp.dat");
  v8 = corelm::util::Directory::hasFile(a1, (uint64_t)&__p);
  if (v18.__r_.__value_.__s.__data_[15] < 0)
    operator delete(__p);
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to find vocab file.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v16, "sp.dat");
  corelm::util::Directory::getFilePath(a1, (uint64_t)&v16, (uint64_t)&__p);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
    __p = &unk_1E2DF1AB8;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  else
  {
    v19 = v18;
    __p = &unk_1E2DF1AB8;
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v9 = operator new();
  corelm::SentencePieceVocabulary::SentencePieceVocabulary(v9, &v19);
  *a3 = (void *)v9;
LABEL_34:
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void sub_191CF8704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *__p,int a30,__int16 a31,char a32,char a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (a37 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v37 - 41) < 0)
    operator delete(*(void **)(v37 - 64));
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<corelm::TokenListVocabulary,std::string &,std::unique_ptr<corelm::AbstractTokenizer>,std::string &>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string v11;
  void *v12;
  std::string __p;
  uint64_t v14;
  std::string v15;
  void *v16;
  std::string v17;

  v8 = operator new();
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v15 = *(std::string *)a1;
  v16 = &unk_1E2DF1AB8;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v17, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  else
    v17 = v15;
  v9 = *a2;
  *a2 = 0;
  v14 = v9;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v11 = *(std::string *)a3;
  v12 = &unk_1E2DF1AB8;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    __p = v11;
  corelm::TokenListVocabulary::TokenListVocabulary(v8, &v16, &v14, &v12);
  *a4 = v8;
  v12 = &unk_1E2DF1AB8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v10 = v14;
  v14 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v16 = &unk_1E2DF1AB8;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_191CF89EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  *(_QWORD *)(v28 - 80) = v27 + 16;
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  if (a25 < 0)
    operator delete(a20);
  MEMORY[0x19401E994](v25, 0x10B3C40BE872BD8);
  _Unwind_Resume(a1);
}

void CoreNLP::GermanCompoundWord::enumerateDerivedSubTokensOfToken(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  CFRange *v7;
  CFRange *v8;
  uint64_t v9;
  CFMutableStringRef Mutable;
  const __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  CFIndex *v14;
  char *v15;
  uint64_t *v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  CFRange v20;
  const __CFString *v21;
  CFStringRef v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  _QWORD v30[258];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = v2;
  v30[256] = *MEMORY[0x1E0C80C00];
  Mutable = CFStringCreateMutable(0, 0);
  if (Mutable)
  {
    v11 = Mutable;
    v23 = v9;
    CoreNLP::StringBuffer::getSubStringCharsOfRange(*(CoreNLP::StringBuffer **)(v9 + 8), *v8);
    v26 = 0;
    v12 = germantok_tokenize();
    v13 = v12 - 1;
    if (v12 >= 1)
    {
      v14 = &v28;
      v15 = &v27;
      v16 = (uint64_t *)&v29;
      v17 = (__int128 *)v30;
      do
      {
        v18 = v13;
        v24 = *v17;
        if (v6)
          v19 = *v16;
        else
          v19 = 0;
        v25 = v19;
        v20.length = *v14;
        if (*v14)
        {
          v20.location = *(v14 - 1);
          v21 = v11;
        }
        else
        {
          v20.length = *((_QWORD *)&v24 + 1);
          v20.location = v8->location + v24;
          v21 = *(const __CFString **)(*(_QWORD *)v23 + 8);
        }
        v22 = CFStringCreateWithSubstring(0, v21, v20);
        (*(void (**)(uint64_t, __int128 *, CFStringRef, _QWORD, char *))(v4 + 16))(v4, &v24, v22, *(_QWORD *)v15, &v26);
        if (v22)
          CFRelease(v22);
        if (v26)
          break;
        v13 = v18 - 1;
        v15 += 8;
        v14 += 2;
        ++v16;
        ++v17;
      }
      while (v18);
    }
    CFRelease(v11);
  }
}

uint64_t *CoreNLP::CRFModel::CRFModel(uint64_t *a1, const void ***a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t **v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t *v10;
  unint64_t v11;
  __int128 *v12;
  char *v13;
  char **v14;
  char **v16;
  char *v17[2];
  _DWORD *v18;

  v3 = CoreNLP::AbstractModel::AbstractModel((uint64_t)a1, a2);
  *(_QWORD *)v3 = &off_1E2DF3068;
  *(_QWORD *)(v3 + 72) = &off_1E2DF30D8;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_DWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 216) = v3 + 224;
  *(_QWORD *)(v3 + 232) = 0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  v17[0] = 0;
  v17[1] = 0;
  v16 = v17;
  v4 = (_QWORD *)(v3 + 24);
  v5 = *(_QWORD **)(v3 + 16);
  if (v5 != (_QWORD *)(v3 + 24))
  {
    do
    {
      v18 = v5 + 7;
      v6 = std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v16, (int *)v5 + 14, (uint64_t)&std::piecewise_construct, &v18);
      std::string::operator=((std::string *)(v6 + 5), (const std::string *)(v5 + 4));
      v7 = (_QWORD *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v5[2];
          v9 = *v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v4);
    v10 = (uint64_t *)v16;
    if (v16 != v17)
    {
      v11 = a1[25];
      do
      {
        v12 = (__int128 *)(v10 + 5);
        if (v11 >= a1[26])
        {
          v11 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a1 + 24, v12);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)(a1 + 24), v12);
          v11 += 24;
        }
        a1[25] = v11;
        v13 = (char *)v10[1];
        if (v13)
        {
          do
          {
            v14 = (char **)v13;
            v13 = *(char **)v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (char **)v10[2];
            v9 = *v14 == (char *)v10;
            v10 = (uint64_t *)v14;
          }
          while (!v9);
        }
        v10 = (uint64_t *)v14;
      }
      while (v14 != v17);
    }
  }
  std::__tree<std::__value_type<long,std::string>,std::__map_value_compare<long,std::__value_type<long,std::string>,std::less<long>,true>,std::allocator<std::__value_type<long,std::string>>>::destroy((uint64_t)&v16, v17[0]);
  return a1;
}

void sub_191CF8DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, char *a11)
{
  CoreNLP::AbstractModel *v11;
  CoreNLP::crfsuite::Instance *v12;
  uint64_t v13;

  std::__tree<std::__value_type<long,std::string>,std::__map_value_compare<long,std::__value_type<long,std::string>,std::less<long>,true>,std::allocator<std::__value_type<long,std::string>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<unsigned int,std::set<std::string>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<std::string>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<std::string>>>>::destroy(v13, *((_QWORD **)v11 + 28));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  CoreNLP::crfsuite::Instance::~Instance(v12);
  CoreNLP::AbstractModel::~AbstractModel(v11);
  _Unwind_Resume(a1);
}

void CoreNLP::CRFModel::~CRFModel(CoreNLP::CRFModel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2DF3068;
  CoreNLP::CRFModel::releaseModel(this);
  CoreNLP::CRFModel::releaseTrainer(this);
  std::__tree<std::__value_type<unsigned int,std::set<std::string>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<std::string>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<std::string>>>>::destroy((uint64_t)this + 216, *((_QWORD **)this + 28));
  v2 = (void **)((char *)this + 192);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  CoreNLP::crfsuite::Instance::~Instance((CoreNLP::CRFModel *)((char *)this + 72));
  CoreNLP::AbstractModel::~AbstractModel(this);
}

{
  CoreNLP::CRFModel::~CRFModel(this);
  JUMPOUT(0x19401E994);
}

uint64_t CoreNLP::CRFModel::releaseModel(CoreNLP::CRFModel *this)
{
  uint64_t result;

  *((_QWORD *)this + 18) = 0;
  if (*((_QWORD *)this + 17))
  {
    crfsuite_model_release();
    *((_QWORD *)this + 17) = 0;
  }
  result = *((_QWORD *)this + 15);
  if (result)
  {
    result = CFBurstTrieRelease();
    *((_QWORD *)this + 15) = 0;
  }
  return result;
}

uint64_t CoreNLP::CRFModel::releaseTrainer(CoreNLP::CRFModel *this)
{
  uint64_t v2;
  uint64_t result;

  if (*((_QWORD *)this + 20))
  {
    crfsuite_dictionary_release();
    crfsuite_data_finish();
    v2 = *((_QWORD *)this + 20);
    if (v2)
      MEMORY[0x19401E994](v2, 0x1020C405E66F15BLL);
  }
  result = *((_QWORD *)this + 19);
  if (result)
    return crfsuite_trainer_release();
  return result;
}

BOOL CoreNLP::CRFModel::load(uint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  std::string *v29;
  std::string *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t tagger;
  _QWORD *v42;
  _QWORD *exception;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  void *__p[2];
  std::string::size_type v61;
  std::__split_buffer<std::string> __v;

  CoreNLP::CRFModel::releaseModel((CoreNLP::CRFModel *)a1);
  if (!a2)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_1E2DF3040;
  }
  v8 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 == 300)
  {
    v14 = *((_DWORD *)a2 + 7);
    v15 = *((_DWORD *)a2 + 5) + *((_DWORD *)a2 + 3) + v14 + 68;
    if (a3 < v15)
    {
      if (CoreNLP::logger(void)::token != -1)
        dispatch_once(&CoreNLP::logger(void)::token, &__block_literal_global_20);
      v52 = CoreNLP::logger(void)::log;
      if (os_log_type_enabled((os_log_t)CoreNLP::logger(void)::log, OS_LOG_TYPE_ERROR))
        CoreNLP::CRFModel::load(a4, v52, v53, v54, v55, v56, v57, v58);
      v59 = __cxa_allocate_exception(8uLL);
      *v59 = &unk_1E2DF3040;
    }
    v16 = v15;
    v12 = a3 >= v15;
    v17 = a3 - v15;
    if (v17 != 0 && v12)
    {
      *(_QWORD *)(a1 + 168) = &a2[v16];
      *(_QWORD *)(a1 + 176) = v17;
    }
    v18 = *((unsigned int *)a2 + 6);
    v19 = (_QWORD *)(a1 + 192);
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 192));
    if (v14 >= 0x20)
    {
      v20 = v14 >> 5;
      v21 = &a2[v18];
      do
      {
        std::string::basic_string[abi:ne180100]<0>(__p, v21);
        v23 = *(_QWORD *)(a1 + 200);
        v22 = *(_QWORD *)(a1 + 208);
        if (v23 >= v22)
        {
          v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *v19) >> 3);
          v26 = v25 + 1;
          if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
          v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v19) >> 3);
          if (2 * v27 > v26)
            v26 = 2 * v27;
          if (v27 >= 0x555555555555555)
            v28 = 0xAAAAAAAAAAAAAAALL;
          else
            v28 = v26;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 208);
          if (v28)
            v29 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a1 + 208, v28);
          else
            v29 = 0;
          v30 = v29 + v25;
          __v.__first_ = v29;
          __v.__begin_ = v30;
          __v.__end_cap_.__value_ = &v29[v28];
          v31 = *(_OWORD *)__p;
          v30->__r_.__value_.__r.__words[2] = v61;
          *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
          __p[1] = 0;
          v61 = 0;
          __p[0] = 0;
          __v.__end_ = v30 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(a1 + 192), &__v);
          v32 = *(_QWORD *)(a1 + 200);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v33 = SHIBYTE(v61);
          *(_QWORD *)(a1 + 200) = v32;
          if (v33 < 0)
            operator delete(__p[0]);
        }
        else
        {
          v24 = *(_OWORD *)__p;
          *(_QWORD *)(v23 + 16) = v61;
          *(_OWORD *)v23 = v24;
          *(_QWORD *)(a1 + 200) = v23 + 24;
        }
        v21 += 32;
        --v20;
      }
      while (v20);
    }
    std::string::basic_string[abi:ne180100]<0>(&__v, a2 + 36);
    std::string::operator=((std::string *)(a1 + 40), (const std::string *)&__v);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    v34 = *((_DWORD *)a2 + 8);
    *(_DWORD *)(a1 + 64) = v34;
    v35 = 500000;
    switch(v34)
    {
      case 0:
      case 2:
        v35 = 50000;
        goto LABEL_40;
      case 1:
        goto LABEL_39;
      case 3:
        goto LABEL_40;
      default:
        if ((v34 - 105) < 2)
        {
LABEL_39:
          v35 = 10000;
LABEL_40:
          *(_DWORD *)(a1 + 128) = v35;
        }
        v36 = *((_DWORD *)a2 + 1);
        *(_DWORD *)(a1 + 12) = v36 & 0x7F;
        *(_BYTE *)(a1 + 68) = (v36 & 0x80) != 0;
        break;
    }
  }
  else
  {
    if (v8 != 200)
    {
      if (v8 != 100)
        goto LABEL_51;
      if ((_DWORD)a4 == 7)
      {
        v9 = 102;
      }
      else
      {
        if ((_DWORD)a4 != 6)
          goto LABEL_44;
        v9 = 101;
      }
      goto LABEL_43;
    }
    v10 = *((_DWORD *)a2 + 5) + *((_DWORD *)a2 + 3) + 56;
    if (a3 < v10)
    {
      if (CoreNLP::logger(void)::token != -1)
        dispatch_once(&CoreNLP::logger(void)::token, &__block_literal_global_20);
      v44 = CoreNLP::logger(void)::log;
      if (os_log_type_enabled((os_log_t)CoreNLP::logger(void)::log, OS_LOG_TYPE_ERROR))
        CoreNLP::CRFModel::load(a4, v44, v45, v46, v47, v48, v49, v50);
      v51 = __cxa_allocate_exception(8uLL);
      *v51 = &unk_1E2DF3040;
    }
    v11 = v10;
    v12 = a3 >= v10;
    v13 = a3 - v10;
    if (v13 != 0 && v12)
    {
      *(_QWORD *)(a1 + 168) = &a2[v11];
      *(_QWORD *)(a1 + 176) = v13;
    }
    if ((_DWORD)a4 == 7)
    {
      v9 = 103;
LABEL_43:
      *(_DWORD *)(a1 + 64) = v9;
    }
  }
LABEL_44:
  v37 = *(_DWORD *)(a1 + 64);
  if (v37 >= 4 && v37 - 105 >= 2 && (v38 = CFBurstTrieCreateFromMapBytes(), (*(_QWORD *)(a1 + 120) = v38) == 0)
    || (v39 = crfsuite_model_create_from_buffer(), (*(_QWORD *)(a1 + 136) = v39) == 0)
    || (tagger = crfsuite_model_get_tagger(), (*(_QWORD *)(a1 + 144) = tagger) == 0))
  {
LABEL_51:
    v42 = __cxa_allocate_exception(8uLL);
    *v42 = &unk_1E2DF3040;
  }
  return *(_QWORD *)(a1 + 136) != 0;
}

void sub_191CF93FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  CoreNLP::CRFModel *v22;

  if (a22 < 0)
    operator delete(__p);
  if (a2 == 1)
  {
    __cxa_get_exception_ptr(exception_object);
    a11.__vftable = (std::exception_vtbl *)&unk_1E2DF3040;
    __cxa_begin_catch(exception_object);
    CoreNLP::CRFModel::releaseModel(v22);
    std::exception::~exception(&a11);
    __cxa_end_catch();
    JUMPOUT(0x191CF926CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::CRFModel::acceptFeatures(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = result;
    do
    {
      LODWORD(v5) = *(unsigned __int8 *)(v2 + 23);
      if (*(char *)(v2 + 23) < 0)
      {
        if (!*(_QWORD *)(v2 + 8))
          goto LABEL_14;
      }
      else if (!*(_BYTE *)(v2 + 23))
      {
        goto LABEL_14;
      }
      v9 = 0;
      v6 = *(_DWORD *)(v4 + 64);
      if (v6 >= 4 && v6 - 105 > 1)
      {
        result = CFBurstTrieContainsUTF8String();
        if (!v9)
          goto LABEL_14;
        v8 = v9 - 1;
      }
      else
      {
        if ((v5 & 0x80) != 0)
        {
          v7 = *(_QWORD *)v2;
          v5 = *(_QWORD *)(v2 + 8);
        }
        else
        {
          v7 = v2;
        }
        MurmurHash3_x86_32(v7, v5, 0, &v9);
        v8 = v9 % *(_DWORD *)(v4 + 128);
      }
      v9 = v8;
      result = crfsuite_item_append_attribute();
LABEL_14:
      v2 += 24;
    }
    while (v2 != v3);
  }
  return result;
}

void CoreNLP::CRFModel::vinference(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int64x2_t *a3@<X8>)
{
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  char **v12;
  uint64_t v13;
  char *v14;
  void **v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int **v31;
  unsigned int **v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned int *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v39;
  int64x2_t v40;
  int64x2_t *v41;
  std::vector<int>::value_type __x[2];
  char v43;
  std::vector<int> v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;

  if (!a1[18] || (v5 = a2[1], *a2 == v5))
  {
    a3->i64[0] = 0;
    a3->i64[1] = 0;
    a3[1].i64[0] = 0;
  }
  else
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 3);
    std::vector<std::vector<std::pair<int,double>>>::vector(&v46, v7);
    CoreNLP::crfsuite::Instance::init((CoreNLP::crfsuite::Instance *)(a1 + 9));
    v8 = 0;
    v9 = 0;
    if (v7 <= 1)
      v10 = 1;
    else
      v10 = v7;
    do
    {
      CoreNLP::CRFModel::acceptFeatures((uint64_t)a1, (uint64_t *)(*a2 + v8));
      ++v9;
      v8 += 24;
    }
    while (v10 != v9);
    if ((crfsuite_tagger_set_instance() & 0x80000000) != 0)
    {
      CoreNLP::crfsuite::Instance::finish((CoreNLP::crfsuite::Instance *)(a1 + 9));
      *a3 = (int64x2_t)v46;
      a3[1].i64[0] = v47;
      v47 = 0;
      v46 = 0uLL;
    }
    else
    {
      v41 = a3;
      v45 = 0xBFF0000000000000;
      __x[0] = -1;
      std::vector<int>::vector(&v44, v7, __x);
      crfsuite_tagger_viterbi();
      for (i = 0; i != v10; ++i)
      {
        v12 = (char **)(v46 + 24 * i);
        v13 = v44.__begin_[i];
        v15 = (void **)(v12 + 1);
        v14 = v12[1];
        v17 = v12 + 2;
        v16 = (unint64_t)v12[2];
        if ((unint64_t)v14 >= v16)
        {
          v19 = (v14 - *v12) >> 4;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 60)
            std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
          v21 = v16 - (_QWORD)*v12;
          if (v21 >> 3 > v20)
            v20 = v21 >> 3;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
            v22 = 0xFFFFFFFFFFFFFFFLL;
          else
            v22 = v20;
          if (v22)
            v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>((uint64_t)v17, v22);
          else
            v23 = 0;
          v24 = &v23[16 * v19];
          *(_QWORD *)v24 = v13;
          *((_QWORD *)v24 + 1) = 0;
          v25 = (char *)*v15;
          v26 = *v12;
          v27 = v24;
          if (*v15 != *v12)
          {
            do
            {
              *((_OWORD *)v27 - 1) = *((_OWORD *)v25 - 1);
              v27 -= 16;
              v25 -= 16;
            }
            while (v25 != v26);
            v25 = *v12;
          }
          *v12 = v27;
          v18 = v24 + 16;
          *v15 = v24 + 16;
          *v17 = &v23[16 * v22];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *(_QWORD *)v14 = v13;
          *((_QWORD *)v14 + 1) = 0;
          v18 = v14 + 16;
        }
        *v15 = v18;
        crfsuite_tagger_marginal_point();
      }
      CoreNLP::crfsuite::Instance::finish((CoreNLP::crfsuite::Instance *)(a1 + 9));
      if (!a1[4] || (v28 = a1[24], v29 = a1[25], v28 == v29))
      {
        v41->i64[0] = 0;
        v41->i64[1] = 0;
        v41[1].i64[0] = 0;
        std::vector<std::vector<std::pair<int,double>>>::__init_with_size[abi:ne180100]<std::vector<std::pair<int,double>>*,std::vector<std::pair<int,double>>*>(v41, (__int128 **)v46, *((__int128 ***)&v46 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v46 + 1) - v46) >> 3));
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__x, "NONE");
        v30 = std::__tree<std::string>::find<std::string>((uint64_t)(a1 + 2), (const void **)__x);
        if (v43 < 0)
          operator delete(*(void **)__x);
        v32 = (unsigned int **)*((_QWORD *)&v46 + 1);
        v31 = (unsigned int **)v46;
        if ((_QWORD)v46 == *((_QWORD *)&v46 + 1))
        {
          v40 = vdupq_n_s64(v46);
        }
        else
        {
          v33 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v28) >> 3);
          v34 = a1 + 3;
          do
          {
            v35 = *v31;
            v36 = **v31;
            if ((v36 & 0x80000000) == 0 && v33 > v36)
            {
              v37 = std::__tree<std::string>::find<std::string>((uint64_t)(a1 + 2), (const void **)(a1[24] + 24 * v36));
              if (v34 != (_QWORD *)v37 || v34 != (_QWORD *)v30)
              {
                if (v34 == (_QWORD *)v37)
                  v39 = v30;
                else
                  v39 = v37;
                *v35 = *(_DWORD *)(v39 + 56);
              }
            }
            v31 += 3;
          }
          while (v31 != v32);
          v40 = (int64x2_t)v46;
        }
        *v41 = v40;
        v41[1].i64[0] = v47;
        v47 = 0;
        v46 = 0uLL;
      }
      if (v44.__begin_)
      {
        v44.__end_ = v44.__begin_;
        operator delete(v44.__begin_);
      }
    }
    v44.__begin_ = (std::vector<int>::pointer)&v46;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  }
}

void sub_191CF9994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char *a18, char *a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a17 < 0)
    operator delete(__p);
  if (a18)
  {
    a19 = a18;
    operator delete(a18);
  }
  a18 = &a22;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::CRFModel::saveFeatures(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t **v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12[2];
  unsigned int v13;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = result;
    v5 = (uint64_t **)(result + 216);
    do
    {
      LODWORD(v6) = *(unsigned __int8 *)(v2 + 23);
      if (*(char *)(v2 + 23) < 0)
      {
        if (*(_QWORD *)(v2 + 8))
        {
LABEL_7:
          v13 = 0;
          v7 = *(_DWORD *)(v4 + 64);
          if (v7 >= 4 && v7 - 105 > 1)
          {
            CFBurstTrieContainsUTF8String();
            v11 = v13;
            if (!v13)
            {
              ++*(_DWORD *)(v4 + 128);
              CFBurstTrieAddUTF8String();
              v11 = *(_DWORD *)(v4 + 128);
            }
            v10 = v11 - 1;
            v13 = v10;
          }
          else
          {
            if ((v6 & 0x80) != 0)
            {
              v8 = *(_QWORD *)v2;
              v6 = *(_QWORD *)(v2 + 8);
            }
            else
            {
              v8 = v2;
            }
            MurmurHash3_x86_32(v8, v6, 0, &v13);
            v13 %= *(_DWORD *)(v4 + 128);
            v12[0] = &v13;
            v9 = std::__tree<std::__value_type<unsigned int,std::set<std::string>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<std::string>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<std::string>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5, &v13, (uint64_t)&std::piecewise_construct, v12);
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v9 + 5, (const void **)v2, v2);
            v10 = v13;
          }
          v12[1] = (_DWORD *)0x3FF0000000000000;
          v12[0] = (_DWORD *)v10;
          result = crfsuite_item_append_attribute();
        }
      }
      else if (*(_BYTE *)(v2 + 23))
      {
        goto LABEL_7;
      }
      v2 += 24;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t CoreNLP::CRFModel::readSample(uint64_t result, _QWORD *a2, _QWORD *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int id_for_string;
  unint64_t v11;
  __int128 *v12;
  uint64_t *v13;
  uint64_t v14;
  CoreNLP::crfsuite::Instance *v15;

  if (*a2 != a2[1] && *(_QWORD *)*a2 != *(_QWORD *)(*a2 + 8))
  {
    v7 = result;
    v15 = (CoreNLP::crfsuite::Instance *)(result + 72);
    CoreNLP::crfsuite::Instance::init((CoreNLP::crfsuite::Instance *)(result + 72));
    if (a2[1] != *a2)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        id_for_string = crfsuite_dictionary_get_id_for_string();
        CoreNLP::CRFModel::saveFeatures(v7, (uint64_t *)(*a2 + v8));
        if (v9 < *(unsigned int *)(v7 + 88))
          *(_DWORD *)(*(_QWORD *)(v7 + 104) + 4 * v9) = id_for_string;
        v11 = *(_QWORD *)(v7 + 200);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *(_QWORD *)(v7 + 192)) >> 3) == id_for_string)
        {
          v12 = (__int128 *)(*a3 + v8);
          v13 = (uint64_t *)(v7 + 192);
          if (v11 >= *(_QWORD *)(v7 + 208))
          {
            v14 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v13, v12);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v13, v12);
            v14 = v11 + 24;
          }
          *(_QWORD *)(v7 + 200) = v14;
        }
        ++v9;
        v8 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) > v9);
    }
    *(_DWORD *)(v7 + 112) = a4;
    crfsuite_data_append();
    return CoreNLP::crfsuite::Instance::finish(v15);
  }
  return result;
}

uint64_t CoreNLP::CRFModel::initTrainer(uint64_t a1, _QWORD *a2)
{
  _OWORD *v4;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  int v15;
  int v16;
  char v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = (_OWORD *)operator new();
  *v4 = 0u;
  v4[1] = 0u;
  *(_QWORD *)(a1 + 160) = v4;
  crfsuite_data_init();
  *(_QWORD *)(a1 + 120) = CFBurstTrieCreate();
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 192));
  crfsuite_create_instance();
  sprintf(v17, "train/%s/%s", "crf1d", "lbfgs");
  crfsuite_create_instance();
  result = crfsuite_trainer_get_params();
  v8 = (_QWORD *)*a2;
  v6 = a2 + 1;
  v7 = v8;
  if (v8 != v6)
  {
    v9 = result;
    do
    {
      v10 = v7 + 4;
      if (*((char *)v7 + 55) < 0)
        v10 = (_QWORD *)*v10;
      v11 = v7 + 7;
      if (*((char *)v7 + 79) < 0)
        v11 = (_QWORD *)*v11;
      result = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(v9 + 48))(v9, v10, v11);
      v12 = (_QWORD *)v7[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v7[2];
          v14 = *v13 == (_QWORD)v7;
          v7 = v13;
        }
        while (!v14);
      }
      v7 = v13;
    }
    while (v13 != v6);
  }
  v15 = *(_DWORD *)(a1 + 64);
  v16 = 500000;
  switch(v15)
  {
    case 0:
    case 2:
      v16 = 50000;
      goto LABEL_17;
    case 1:
      goto LABEL_16;
    case 3:
      goto LABEL_17;
    default:
      if ((v15 - 105) < 2)
      {
LABEL_16:
        v16 = 10000;
LABEL_17:
        *(_DWORD *)(a1 + 128) = v16;
      }
      return result;
  }
}

uint64_t CoreNLP::CRFModel::message_callback(void (**this)(CoreNLP::CRFModel *, CFStringRef, char *), const char *a2, va_list a3, char *a4)
{
  char *v7;
  CFStringRef v8;
  char v10;

  if (this)
  {
    v10 = 0;
    v7 = (char *)operator new[]();
    vsnprintf(v7, 0x200uLL, a2, a3);
    v8 = CFStringCreateWithCString(0, v7, 0x8000100u);
    this[2]((CoreNLP::CRFModel *)this, v8, &v10);
    MEMORY[0x19401E970](v7, 0x1000C8077774924);
    CFRelease(v8);
  }
  return 0;
}

uint64_t CoreNLP::CRFModel::train(uint64_t a1, uint64_t a2)
{
  const char *v3;
  FILE *v4;
  uint64_t v5;

  if (*(char *)(a2 + 23) >= 0)
    v3 = (const char *)a2;
  else
    v3 = *(const char **)a2;
  v4 = fopen(v3, "wb");
  v5 = (*(uint64_t (**)(uint64_t, FILE *))(*(_QWORD *)a1 + 32))(a1, v4);
  fclose(v4);
  return v5;
}

BOOL CoreNLP::CRFModel::train(CoreNLP::CRFModel *this, __sFILE *a2)
{
  int v4;
  int v5;
  _OWORD *v6;
  _BYTE *v7;
  size_t v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  std::string __p;
  _BYTE __dst[32];
  int __buf;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  _OWORD v30[2];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  CoreNLP::CRFModel::logHashCollision(this);
  v4 = fileno(a2);
  crfsuite_dictionary_get_count();
  crfsuite_trainer_set_message_callback();
  __buf = 300;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v5 = *((_DWORD *)this + 16);
  v28 = 0;
  v29 = v5;
  memset(v30, 0, sizeof(v30));
  v6 = (_OWORD *)((char *)this + 40);
  if ((*((char *)this + 63) & 0x80000000) == 0)
  {
    *(_QWORD *)&__dst[16] = *((_QWORD *)this + 7);
    *(_OWORD *)__dst = *v6;
    if (__dst[23] >= 0)
      v7 = __dst;
    else
      v7 = *(_BYTE **)__dst;
LABEL_8:
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v6;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 7);
    goto LABEL_9;
  }
  v7 = __dst;
  std::string::__init_copy_ctor_external((std::string *)__dst, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
  if (__dst[23] < 0)
    v7 = *(_BYTE **)__dst;
  if ((*((char *)this + 63) & 0x80000000) == 0)
    goto LABEL_8;
  std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
LABEL_9:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = __p.__r_.__value_.__r.__words[1];
    if (SLODWORD(__p.__r_.__value_.__r.__words[1]) >= 31)
      v9 = 31;
    memcpy(v30, v7, v9);
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    if (HIBYTE(__p.__r_.__value_.__r.__words[2]) >= 0x1Fu)
      v8 = 31;
    else
      v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    memcpy(v30, v7, v8);
  }
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  v10 = *((_DWORD *)this + 3) & 0x7F;
  LODWORD(v25) = v10;
  if (*((_BYTE *)this + 68))
    LODWORD(v25) = v10 | 0x80;
  v11 = lseek(v4, 0, 0);
  write(v4, &__buf, 0x44uLL);
  HIDWORD(v25) = lseek(v4, 0, 1);
  v12 = *((_DWORD *)this + 16);
  if (v12 >= 4 && v12 - 105 >= 2)
    CFBurstTrieSerializeWithFileDescriptor();
  v13 = lseek(v4, 0, 1);
  LODWORD(v26) = v13 - HIDWORD(v25);
  HIDWORD(v26) = v13;
  v14 = crfsuite_trainer_train_model_to_file_pointer();
  v15 = lseek(v4, 0, 1);
  LODWORD(v27) = v15 - HIDWORD(v26);
  HIDWORD(v27) = v15;
  v16 = (char *)*((_QWORD *)this + 24);
  v17 = (char *)*((_QWORD *)this + 25);
  if (v16 == v17)
  {
    v20 = *((_QWORD *)this + 24);
  }
  else
  {
    do
    {
      memset(__dst, 0, sizeof(__dst));
      if (v16[23] < 0)
      {
        v19 = *(char **)v16;
        v18 = *((_QWORD *)v16 + 1);
      }
      else
      {
        LODWORD(v18) = v16[23];
        v19 = v16;
      }
      if ((int)v18 >= 31)
        LODWORD(v18) = 31;
      memcpy(__dst, v19, (int)v18);
      fwrite(__dst, 1uLL, 0x20uLL, a2);
      v16 += 24;
    }
    while (v16 != v17);
    v16 = (char *)*((_QWORD *)this + 24);
    v20 = *((_QWORD *)this + 25);
  }
  v28 = 1431655776 * ((v20 - (_DWORD)v16) >> 3);
  pwrite(v4, &__buf, 0x44uLL, v11);
  return v14 == 0;
}

void sub_191CFA300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreNLP::CRFModel::logHashCollision(CoreNLP::CRFModel *this)
{
  char *v1;
  char *v2;
  int v3;
  unint64_t v4;
  uint64_t **v5;
  char *v6;
  char *v7;
  BOOL v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  uint64_t *v19;
  std::locale::id *v20;
  _QWORD *v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  _QWORD *v28[2];
  std::locale v29;

  if (*((_QWORD *)this + 29) && (*((_DWORD *)this + 16) - 105) <= 1)
  {
    v28[0] = 0;
    v28[1] = 0;
    v27 = (uint64_t *)v28;
    v1 = (char *)*((_QWORD *)this + 27);
    v2 = (char *)this + 224;
    if (v1 != (char *)this + 224)
    {
      v3 = 0;
      do
      {
        v4 = *((_QWORD *)v1 + 7);
        v26 = v4;
        v29.__locale_ = (std::locale::__imp *)&v26;
        v5 = std::__tree<std::__value_type<unsigned long,int>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,int>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,int>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v27, &v26, (uint64_t)&std::piecewise_construct, &v29);
        ++*((_DWORD *)v5 + 10);
        v6 = (char *)*((_QWORD *)v1 + 1);
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = *(char **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (char *)*((_QWORD *)v1 + 2);
            v8 = *(_QWORD *)v7 == (_QWORD)v1;
            v1 = v7;
          }
          while (!v8);
        }
        v3 += v4;
        v1 = v7;
      }
      while (v7 != v2);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"Raw Attribute Nb :", 18);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
    v10 = std::locale::use_facet(&v29, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v29);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"Hashed Attribute Nb :", 21);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
    v12 = std::locale::use_facet(&v29, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v29);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"Average collisionRate :", 23);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
    v14 = std::locale::use_facet(&v29, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v29);
    std::ostream::put();
    std::ostream::flush();
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"Mixed-Attribute", 15);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\t", 1);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Occurrence", 10);
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
    v18 = std::locale::use_facet(&v29, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale(&v29);
    std::ostream::put();
    std::ostream::flush();
    v19 = v27;
    if (v27 != (uint64_t *)v28)
    {
      v20 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      do
      {
        v21 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\t", 1);
        v22 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
        v23 = std::locale::use_facet(&v29, v20);
        ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale(&v29);
        std::ostream::put();
        std::ostream::flush();
        v24 = (uint64_t *)v19[1];
        if (v24)
        {
          do
          {
            v25 = v24;
            v24 = (uint64_t *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            v25 = (uint64_t *)v19[2];
            v8 = *v25 == (_QWORD)v19;
            v19 = v25;
          }
          while (!v8);
        }
        v19 = v25;
      }
      while (v25 != (uint64_t *)v28);
    }
    std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v27, v28[0]);
  }
}

void sub_191CFA708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, uint64_t a13, std::locale a14)
{
  std::locale::~locale(&a14);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

BOOL CoreNLP::CRFModel::setUserData()
{
  uint64_t *v0;
  const void *v1;
  char *v2;
  unsigned int *v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  _OWORD v13[8];
  size_t v14;
  uint64_t v15;
  _QWORD v16[17];
  __int128 v17;
  __int128 v18;
  _OWORD v19[6];
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  _QWORD v23[51];
  _QWORD v24[20];

  v24[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v22);
  v0 = (uint64_t *)MEMORY[0x1E0DE4F40];
  if ((*((_BYTE *)&v23[2] + *(_QWORD *)(v22[0] - 24)) & 5) != 0)
  {
    v1 = 0;
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = *MEMORY[0x1E0DE4F40];
    v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
    goto LABEL_17;
  }
  (*(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD, uint64_t, uint64_t))(v23[0] + 32))(&v17, v23, 0, 2, 8);
  v7 = v20;
  memset(v19, 0, sizeof(v19));
  v17 = 0u;
  v18 = 0u;
  v20 = 0;
  (*(void (**)(_OWORD *__return_ptr, _QWORD *, __int128 *, uint64_t))(v23[0] + 40))(v13, v23, &v17, 8);
  v3 = (unsigned int *)operator new[]();
  (*(void (**)(_QWORD *, unsigned int *, uint64_t))(v23[0] + 64))(v23, v3, v7);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v22 + *(_QWORD *)(v22[0] - 24)), *(_DWORD *)((char *)&v23[2] + *(_QWORD *)(v22[0] - 24)) | 4);
  std::ifstream::basic_ifstream(&v17);
  if ((*((_BYTE *)v19 + *(_QWORD *)(v17 - 24)) & 5) != 0)
  {
    v1 = 0;
  }
  else
  {
    (*(void (**)(_OWORD *__return_ptr, __int128 *, _QWORD, uint64_t, uint64_t))(v18 + 32))(v13, &v18, 0, 2, 8);
    v8 = v14;
    memset(v13, 0, sizeof(v13));
    v14 = 0;
    (*(void (**)(_QWORD *__return_ptr, __int128 *, _OWORD *, uint64_t))(v18 + 40))(v16, &v18, v13, 8);
    v1 = (const void *)operator new[]();
    (*(void (**)(__int128 *, const void *, size_t))(v18 + 64))(&v18, v1, v8);
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)&v17 + *(_QWORD *)(v17 - 24)), *(_DWORD *)((char *)v19 + *(_QWORD *)(v17 - 24)) | 4);
    if (*v3 == 300)
    {
      v2 = (char *)operator new[]();
      v9 = v3[3] + (unint64_t)v3[5] + v3[7] + 68;
      memcpy(v2, v3, v9);
      memcpy(&v2[v9], v1, v8);
      std::ofstream::basic_ofstream(v13);
      v4 = (*(_DWORD *)((_BYTE *)&v13[2] + *(_QWORD *)(*(_QWORD *)&v13[0] - 24)) & 5) == 0;
      if ((*(_DWORD *)((_BYTE *)&v13[2] + *(_QWORD *)(*(_QWORD *)&v13[0] - 24)) & 5) == 0)
      {
        std::ostream::write();
        if (!std::filebuf::close())
          std::ios_base::clear((std::ios_base *)((char *)v13 + *(_QWORD *)(*(_QWORD *)&v13[0] - 24)), *(_DWORD *)((char *)&v13[2] + *(_QWORD *)(*(_QWORD *)&v13[0] - 24)) | 4);
      }
      *(_QWORD *)&v13[0] = *MEMORY[0x1E0DE4F48];
      *(_QWORD *)((char *)v13 + *(_QWORD *)(*(_QWORD *)&v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
      MEMORY[0x19401E70C]((char *)v13 + 8);
      std::ostream::~ostream();
      MEMORY[0x19401E928](&v15);
      goto LABEL_16;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"\nERROR: Not supported CRF model version for setData: ", 53);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
    v11 = std::locale::use_facet((const std::locale *)v13, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale((std::locale *)v13);
    std::ostream::put();
    std::ostream::flush();
  }
  v2 = 0;
  v4 = 0;
LABEL_16:
  v5 = *v0;
  *(_QWORD *)&v17 = v5;
  v6 = v0[3];
  *(_QWORD *)((char *)&v17 + *(_QWORD *)(v5 - 24)) = v6;
  MEMORY[0x19401E70C](&v18);
  std::istream::~istream();
  MEMORY[0x19401E928](&v21);
LABEL_17:
  v22[0] = v5;
  *(_QWORD *)((char *)v22 + *(_QWORD *)(v5 - 24)) = v6;
  MEMORY[0x19401E70C](v23);
  std::istream::~istream();
  MEMORY[0x19401E928](v24);
  if (v1)
    MEMORY[0x19401E970](v1, 0x1000C8077774924);
  if (v2)
    MEMORY[0x19401E970](v2, 0x1000C8077774924);
  if (v3)
    MEMORY[0x19401E970](v3, 0x1000C8077774924);
  return v4;
}

void sub_191CFAC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  std::ofstream::~ofstream(&a9);
  std::ifstream::~ifstream(&STACK[0x2C0]);
  std::ifstream::~ifstream(&STACK[0x508]);
  if (v10)
    MEMORY[0x19401E970](v10, 0x1000C8077774924);
  if (v11)
    MEMORY[0x19401E970](v11, 0x1000C8077774924);
  MEMORY[0x19401E970](v9, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void CoreNLP::CRFModel::tagToLabel(CoreNLP::CRFModel *this@<X0>, unsigned int a2@<W1>, std::string *a3@<X8>)
{
  _QWORD *v5;
  char *v6;
  char *v7;
  char *v8;
  BOOL v9;
  uint64_t v10;
  std::string __p;
  int v12;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (*((_QWORD *)this + 4))
  {
    v5 = (_QWORD *)*((_QWORD *)this + 2);
    v6 = (char *)this + 24;
    if (v5 != (_QWORD *)((char *)this + 24))
    {
      while (1)
      {
        if (*((char *)v5 + 55) < 0)
          std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v5[4], v5[5]);
        else
          __p = *(std::string *)(v5 + 4);
        v12 = *((_DWORD *)v5 + 14);
        if (v12 == a2)
          break;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v7 = (char *)v5[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = *(char **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (char *)v5[2];
            v9 = *(_QWORD *)v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
        if (v8 == v6)
          return;
      }
      std::string::operator=(a3, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else if ((a2 & 0x80000000) == 0)
  {
    v10 = *((_QWORD *)this + 24);
    if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 25) - v10) >> 3) > a2)
      std::string::operator=(a3, (const std::string *)(v10 + 24 * a2));
  }
}

void sub_191CFAE50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

uint64_t CoreNLP::CRFModel::setTrainingLogBlock(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 184) = a2;
  return result;
}

uint64_t CoreNLP::CRFModel::userData(CoreNLP::CRFModel *this)
{
  return *((_QWORD *)this + 21);
}

uint64_t CoreNLP::CRFModel::userDataSize(CoreNLP::CRFModel *this)
{
  return *((_QWORD *)this + 22);
}

void CoreNLP::CRFModel::modelLoadException::~modelLoadException(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x19401E994);
}

os_log_t ___ZN7CoreNLPL6loggerEv_block_invoke_0()
{
  const char *v0;
  os_log_t result;

  v0 = _nlpLoggingSubsystem();
  result = os_log_create(v0, "CRFModel");
  CoreNLP::logger(void)::log = (uint64_t)result;
  return result;
}

void std::__tree<std::__value_type<unsigned int,std::set<std::string>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<std::string>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<std::string>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,std::set<std::string>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<std::string>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,std::set<std::string>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<std::string>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<std::string>>>>::destroy(a1, a2[1]);
    std::__tree<std::string>::destroy((uint64_t)(a2 + 5), (char *)a2[6]);
    operator delete(a2);
  }
}

_QWORD *std::vector<std::vector<std::pair<int,double>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_191CFAFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned int,std::set<std::string>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::set<std::string>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::set<std::string>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 5) = v11 + 12;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<std::__value_type<unsigned long,int>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,int>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,int>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void OUTLINED_FUNCTION_0_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

CoreNLP::Gazetteer *CoreNLP::Gazetteer::Gazetteer(CoreNLP::Gazetteer *this, CFDictionaryRef theDict)
{
  const char ***v4;
  const void **v5;
  const void **v6;
  const void *Value;
  const __CFURL *v8;
  CFStringRef v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  const void *v13;
  const char *BytePtr;
  CFIndex Length;
  _QWORD *v16;
  const __CFNumber *v17;
  const __CFDictionary *v18;
  _QWORD *exception;
  __int128 v21;
  void *__p[2];
  char v23;
  CFTypeRef cf;

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *(_OWORD *)((char *)this + 24) = 0u;
  v4 = (const char ***)((char *)this + 24);
  *(_OWORD *)((char *)this + 40) = 0u;
  v5 = (const void **)((char *)this + 40);
  v6 = (const void **)((char *)this + 48);
  *(_OWORD *)((char *)this + 52) = 0u;
  *((_DWORD *)this + 17) = 953267991;
  if (CFDictionaryContainsKey(theDict, kNLGazetteerLocale[0]))
  {
    Value = CFDictionaryGetValue(theDict, kNLGazetteerLocale[0]);
    if (Value)
      nlp::CFScopedPtr<__CFLocale const*>::acquire(v6, Value);
  }
  if (CFDictionaryContainsKey(theDict, kNLGazetteerCompressedModelURL))
  {
    v8 = (const __CFURL *)CFDictionaryGetValue(theDict, kNLGazetteerCompressedModelURL);
    v9 = CFURLCopyFileSystemPath(v8, kCFURLPOSIXPathStyle);
    cf = v9;
    if (v9)
    {
      CoreNLP::getUTF8StringFromCFString(v9, __p);
      CoreNLP::ReadOnlyFile<char>::open((uint64_t)__p, (uint64_t)"r", 1, &v21);
      std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::operator=[abi:ne180100]((uint64_t)v4, &v21);
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      if (*((_QWORD *)&v21 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if (*v4 && (CoreNLP::Gazetteer::loadBloomFilters((uint64_t **)this, **v4, (unint64_t)(*v4)[1]) & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v21, "Failed to load bloom filter from file");
        CoreNLP::ResourceCreationException::ResourceCreationException(exception, &v21);
      }
      if (v23 < 0)
        operator delete(__p[0]);
      if (cf)
        CFRelease(cf);
    }
  }
  else if (CFDictionaryContainsKey(theDict, kNLGazetteerCompressedModelData[0]))
  {
    v13 = CFDictionaryGetValue(theDict, kNLGazetteerCompressedModelData[0]);
    if (v13)
    {
      nlp::CFScopedPtr<__CFData const*>::acquire(v5, v13);
      BytePtr = (const char *)CFDataGetBytePtr((CFDataRef)*v5);
      Length = CFDataGetLength((CFDataRef)*v5);
      if ((CoreNLP::Gazetteer::loadBloomFilters((uint64_t **)this, BytePtr, Length) & 1) == 0)
      {
        v16 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "Failed to load bloom filter from data");
        CoreNLP::ResourceCreationException::ResourceCreationException(v16, (__int128 *)__p);
      }
    }
  }
  else if (CFDictionaryContainsKey(theDict, kNLGazetteerEntities[0]))
  {
    LODWORD(__p[0]) = *((_DWORD *)this + 17);
    if (CFDictionaryContainsKey(theDict, kNLGazetteerFalsePositiveRate[0]))
    {
      v17 = (const __CFNumber *)CFDictionaryGetValue(theDict, kNLGazetteerFalsePositiveRate[0]);
      CFNumberGetValue(v17, kCFNumberFloat32Type, __p);
    }
    v18 = (const __CFDictionary *)CFDictionaryGetValue(theDict, kNLGazetteerEntities[0]);
    CoreNLP::Gazetteer::createBloomFilters(this, v18, *(float *)__p);
  }
  return this;
}

void sub_191CFB454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  const void **v24;
  const void **v25;
  void *v26;
  int v27;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
    {
LABEL_6:
      nlp::CFScopedPtr<void *>::reset((const void **)(v22 + 56), 0);
      nlp::CFScopedPtr<__CFLocale const*>::reset(v25, 0);
      nlp::CFScopedPtr<__CFData const*>::reset(v24, 0);
      std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100](v23);
      std::__tree<std::__value_type<std::string,BloomFilter>,std::__map_value_compare<std::string,std::__value_type<std::string,BloomFilter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BloomFilter>>>::destroy(v22, *(_QWORD **)(v22 + 8));
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

void nlp::CFScopedPtr<__CFLocale const*>::acquire(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    nlp::CFScopedPtr<__CFLocale const*>::reset(a1, cf);
  }
}

uint64_t CoreNLP::Gazetteer::loadBloomFilters(uint64_t **this, const char *a2, unint64_t a3)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  const void **v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  std::vector<char>::pointer begin;
  __int128 v14;
  NSObject *v15;
  uint64_t v16;
  unint64_t v17;
  NSObject *v18;
  std::string::size_type size;
  char v21;
  std::string::size_type v22;
  std::string *p_x;
  const __CFString *v24;
  CFLocaleRef v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  std::string __x;
  void *v31;
  void *v32;
  char v33;
  void *__p;
  char v35;
  const __CFString *v36;
  std::string v37;
  void *v38[6];
  unsigned int v39;
  std::string v40;
  std::string v41;
  uint8_t v42;
  _BYTE v43[15];
  uint8_t v44;
  _BYTE v45[15];
  std::vector<char> v46;

  if (a3 <= 3)
  {
    if (CoreNLP::logger(void)::token != -1)
      dispatch_once(&CoreNLP::logger(void)::token, &__block_literal_global_21);
    v3 = CoreNLP::logger(void)::log;
    if (os_log_type_enabled((os_log_t)CoreNLP::logger(void)::log, OS_LOG_TYPE_ERROR))
      CoreNLP::Gazetteer::loadBloomFilters(v3, v4, v5);
    return 0;
  }
  if (!*(_DWORD *)a2)
    return 1;
  v9 = (const void **)(this + 6);
  v10 = *(_DWORD *)a2 - 1;
  v11 = 4;
  while (1)
  {
    v12 = v11 + 32;
    if (v11 + 32 > a3)
      break;
    __x.__r_.__value_.__s.__data_[0] = 0;
    std::vector<char>::vector(&v46, 0x20uLL, (const std::vector<char>::value_type *)&__x);
    begin = v46.__begin_;
    v14 = *(_OWORD *)&a2[v11];
    *(_OWORD *)(v46.__begin_ + 15) = *(_OWORD *)&a2[v11 + 15];
    *(_OWORD *)begin = v14;
    v11 += 36;
    if (v11 <= a3)
    {
      v17 = *(unsigned int *)&a2[v12];
      v12 = v11 + v17;
      if (v11 + v17 > a3)
      {
        if (CoreNLP::logger(void)::token != -1)
          dispatch_once(&CoreNLP::logger(void)::token, &__block_literal_global_21);
        v18 = CoreNLP::logger(void)::log;
        if (os_log_type_enabled((os_log_t)CoreNLP::logger(void)::log, OS_LOG_TYPE_ERROR))
          CoreNLP::Gazetteer::loadBloomFilters(&v42, v43, v18);
        v16 = 0;
        goto LABEL_51;
      }
      BloomFilter::BloomFilter((BloomFilter *)v38);
      BloomFilter::loadFromBuffer((uint64_t)v38, &a2[v11], v17);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v37, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
      else
        v37 = v41;
      size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v37.__r_.__value_.__l.__size_;
      if (!size)
      {
        std::string::basic_string[abi:ne180100]<0>(&__x, v46.__begin_);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
        v37 = __x;
      }
      if (!*v9)
      {
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__x, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
        else
          __x = v40;
        if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = HIBYTE(__x.__r_.__value_.__r.__words[2]);
        else
          v22 = __x.__r_.__value_.__l.__size_;
        if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__x.__r_.__value_.__l.__data_);
        if (v22)
        {
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__x, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
          else
            __x = v40;
          if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_x = &__x;
          else
            p_x = (std::string *)__x.__r_.__value_.__r.__words[0];
          v24 = CFStringCreateWithCString(0, (const char *)p_x, 0x8000100u);
          v36 = v24;
          if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__x.__r_.__value_.__l.__data_);
          v25 = CFLocaleCreate(0, v24);
          nlp::CFScopedPtr<__CFLocale const*>::reset(v9, v25);
          if (v24)
            CFRelease(v24);
        }
      }
      std::pair<std::string,BloomFilter>::pair[abi:ne180100]<std::string&,BloomFilter&,0>(&__x, (__int128 *)&v37, (uint64_t)v38);
      std::__tree<std::__value_type<std::string,BloomFilter>,std::__map_value_compare<std::string,std::__value_type<std::string,BloomFilter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BloomFilter>>>::__emplace_unique_key_args<std::string,std::pair<std::string,BloomFilter>>(this, (const void **)&__x.__r_.__value_.__l.__data_, (uint64_t)&__x);
      if (v35 < 0)
        operator delete(__p);
      if (v33 < 0)
        operator delete(v32);
      if (v31)
        operator delete(v31);
      if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__x.__r_.__value_.__l.__data_);
      if (*((_DWORD *)this + 16) < v39)
        *((_DWORD *)this + 16) = v39;
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      if (v38[0])
        operator delete(v38[0]);
      v16 = 1;
    }
    else
    {
      if (CoreNLP::logger(void)::token != -1)
        dispatch_once(&CoreNLP::logger(void)::token, &__block_literal_global_21);
      v15 = CoreNLP::logger(void)::log;
      if (os_log_type_enabled((os_log_t)CoreNLP::logger(void)::log, OS_LOG_TYPE_ERROR))
        CoreNLP::Gazetteer::loadBloomFilters(&v44, v45, v15);
      v16 = 0;
    }
    v11 = v12;
LABEL_51:
    if (v46.__begin_)
    {
      v46.__end_ = v46.__begin_;
      operator delete(v46.__begin_);
    }
    if (v10-- != 0)
      v21 = v16;
    else
      v21 = 0;
    if ((v21 & 1) == 0)
      return v16;
  }
  if (CoreNLP::logger(void)::token != -1)
    dispatch_once(&CoreNLP::logger(void)::token, &__block_literal_global_21);
  v26 = CoreNLP::logger(void)::log;
  if (os_log_type_enabled((os_log_t)CoreNLP::logger(void)::log, OS_LOG_TYPE_ERROR))
    CoreNLP::Gazetteer::loadBloomFilters(v26, v27, v28);
  return 0;
}

void sub_191CFBA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41)
{
  uint64_t v41;
  void *v43;

  if (a39 < 0)
    operator delete(__p);
  BloomFilter::~BloomFilter(&a41);
  v43 = *(void **)(v41 - 112);
  if (v43)
  {
    *(_QWORD *)(v41 - 104) = v43;
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

void sub_191CFBAA0()
{
  JUMPOUT(0x191CFBA88);
}

void CoreNLP::Gazetteer::createBloomFilters(CoreNLP::Gazetteer *this, CFDictionaryRef theDict, float a3)
{
  CFIndex Count;
  size_t v7;
  const __CFString *v8;
  const void **v9;
  const void **v10;
  uint64_t v11;
  long double v12;
  const __CFArray *v13;
  int v14;
  uint64_t v15;
  CFIndex v16;
  unsigned int v17;
  __CFString *ValueAtIndex;
  std::string *p_p;
  int v20;
  std::string __p;
  void *v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  void *v27[6];
  unsigned int v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  std::string __str;
  std::string v34;

  Count = CFDictionaryGetCount(theDict);
  if (Count >= 1)
  {
    v7 = Count;
    memset(&v34, 0, sizeof(v34));
    if (*((_QWORD *)this + 6))
    {
      v8 = (const __CFString *)MEMORY[0x19401E1F0]();
      CoreNLP::getUTF8StringFromCFString(v8, &__p);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      v34 = __p;
    }
    v9 = (const void **)malloc_type_calloc(v7, 8uLL, 0x6004044C4A2DFuLL);
    v10 = (const void **)malloc_type_calloc(v7, 8uLL, 0x6004044C4A2DFuLL);
    CFDictionaryGetKeysAndValues(theDict, v9, v10);
    v11 = 0;
    v12 = a3;
    do
    {
      CoreNLP::getUTF8StringFromCFString((const __CFString *)v9[v11], &__str);
      v13 = (const __CFArray *)v10[v11];
      v14 = CFArrayGetCount(v13);
      if (v14 >= 1)
      {
        BloomFilter::BloomFilter((BloomFilter *)v27);
        BloomFilter::init((uint64_t)v27, v14 + 10000, &__str, &v34, v12);
        v15 = v14;
        v16 = 0;
        v17 = 0;
        do
        {
          ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(v13, v16);
          CoreNLP::Gazetteer::normalizeEntity(this, ValueAtIndex, (uint64_t)&__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v20 = __p.__r_.__value_.__r.__words[1];
          BloomFilter::add((uint64_t)v27, (const char *)p_p, v20);
          if (v17 <= v22)
            v17 = v22;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          ++v16;
        }
        while (v15 != v16);
        v28 = v17;
        if (*((_DWORD *)this + 16) < v17)
          *((_DWORD *)this + 16) = v17;
        std::pair<std::string,BloomFilter>::pair[abi:ne180100]<std::string&,BloomFilter&,0>(&__p, (__int128 *)&__str, (uint64_t)v27);
        std::__tree<std::__value_type<std::string,BloomFilter>,std::__map_value_compare<std::string,std::__value_type<std::string,BloomFilter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BloomFilter>>>::__emplace_unique_key_args<std::string,std::pair<std::string,BloomFilter>>((uint64_t **)this, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
        if (v26 < 0)
          operator delete(v25);
        if (v24 < 0)
          operator delete(v23);
        if (v22)
          operator delete(v22);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v32 < 0)
          operator delete(v31);
        if (v30 < 0)
          operator delete(v29);
        if (v27[0])
          operator delete(v27[0]);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      ++v11;
    }
    while (v11 != v7);
    free(v9);
    free(v10);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
  }
}

void sub_191CFBD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (*(char *)(v29 - 105) < 0)
    operator delete(*(void **)(v29 - 128));
  _Unwind_Resume(exception_object);
}

void CoreNLP::Gazetteer::label(_QWORD *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  int v7;
  const char *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  __int128 v13;

  v4 = a1 + 1;
  v5 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 == a1 + 1)
  {
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else
  {
    while (1)
    {
      v7 = *(char *)(a2 + 23);
      v8 = v7 >= 0 ? (const char *)a2 : *(const char **)a2;
      v9 = v7 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
      if (BloomFilter::possiblyContains((BloomFilter *)(v5 + 7), v8, v9))
        break;
      v10 = (_QWORD *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v5[2];
          v12 = *v11 == (_QWORD)v5;
          v5 = v11;
        }
        while (!v12);
      }
      v5 = v11;
      if (v11 == v4)
        goto LABEL_15;
    }
    if (*((char *)v5 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v5[4], v5[5]);
    }
    else
    {
      v13 = *((_OWORD *)v5 + 2);
      a3->__r_.__value_.__r.__words[2] = v5[6];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v13;
    }
  }
}

void CoreNLP::Gazetteer::label(CoreNLP::Gazetteer *this@<X0>, __CFString *a2@<X1>, std::string *a3@<X8>)
{
  void *__p[2];
  char v6;

  CoreNLP::Gazetteer::normalizeEntity(this, a2, (uint64_t)__p);
  CoreNLP::Gazetteer::label(this, (uint64_t)__p, a3);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_191CFBF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreNLP::Gazetteer::normalizeEntity(CoreNLP::Gazetteer *this@<X0>, __CFString *a2@<X1>, uint64_t a3@<X8>)
{
  const void **v6;
  __CFArray *Mutable;
  const void *v8;
  const __CFLocale *v9;
  CoreNLP *v10;
  int LocaleLanguage;
  void *v12;
  CoreNLP *v13;
  CFIndex Length;
  CoreNLP *v15;
  CFIndex v16;
  CFIndex v17;
  uint64_t *v18;
  int v19;
  CFIndex v20[3];
  std::string __p;
  _QWORD v22[7];
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  __CFArray *v27;
  __CFArray **v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  CFMutableStringRef v32;

  v6 = (const void **)((char *)this + 56);
  if (!*((_QWORD *)this + 7))
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v27 = Mutable;
    CFArrayAppendValue(Mutable, kNLTagSchemeTokenType[0]);
    v8 = (const void *)NLTaggerCreate(Mutable, 0);
    nlp::CFScopedPtr<void *>::reset(v6, v8);
    if (Mutable)
      CFRelease(Mutable);
  }
  v27 = 0;
  v28 = &v27;
  v29 = 0x3002000000;
  v30 = __Block_byref_object_copy__6;
  v31 = __Block_byref_object_dispose__6;
  v32 = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  v10 = (CoreNLP *)*((_QWORD *)this + 6);
  if (v10)
    LocaleLanguage = CoreNLP::getLocaleLanguage(v10, v9);
  else
    LocaleLanguage = 0;
  NLTaggerSetString((CoreNLP *)*v6, a2);
  v12 = (void *)*((_QWORD *)this + 6);
  if (v12)
  {
    v13 = (CoreNLP *)*v6;
    Length = CFStringGetLength(a2);
    NLTaggerSetLocaleForRange(v13, v12, 0, Length);
  }
  v15 = (CoreNLP *)*v6;
  v16 = CFStringGetLength(a2);
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 0x40000000;
  v22[2] = ___ZN7CoreNLP9Gazetteer15normalizeEntityEPK10__CFString_block_invoke;
  v22[3] = &unk_1E2DF3A50;
  v22[4] = &v27;
  v22[5] = &v23;
  v22[6] = a2;
  NLTaggerEnumerateTokens(v15, 0, 0, v16, (CoreNLP::NLAttributedToken *)4, (uint64_t)v22);
  v17 = CFStringGetLength((CFStringRef)v28[5]);
  v20[0] = 0;
  v20[1] = v17;
  v20[2] = 0;
  CoreNLP::extractLowercaseUTF8((CFStringRef)v28[5], v20, LocaleLanguage, &__p);
  v18 = v24;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a3, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v19 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_DWORD *)(a3 + 24) = *((_DWORD *)v18 + 6);
    if (v19 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::string *)a3 = __p;
    *(_DWORD *)(a3 + 24) = *((_DWORD *)v18 + 6);
  }
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
  if (v32)
    CFRelease(v32);
}

void sub_191CFC170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  if (a18 < 0)
    operator delete(__p);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  nlp::CFScopedPtr<__CFString *>::reset((const void **)(v26 + 40), 0);
  _Unwind_Resume(a1);
}

uint64_t CoreNLP::Gazetteer::getLocale(CoreNLP::Gazetteer *this)
{
  return *((_QWORD *)this + 6);
}

const void *CoreNLP::Gazetteer::getModelData(CoreNLP::Gazetteer *this)
{
  const void *result;
  const void **v3;
  __CFData *Mutable;
  char *v5;
  char *v6;
  char *v7;
  __CFData *v8;
  char *v9;
  char *v10;
  char *v11;
  BOOL v12;
  UInt8 v13[4];
  CFMutableDataRef theData;
  UInt8 bytes[4];
  UInt8 v16[32];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = (const void **)((char *)this + 40);
  result = (const void *)*((_QWORD *)this + 5);
  if (!result)
  {
    if (*((_QWORD *)this + 2))
    {
      *(_DWORD *)bytes = *((_QWORD *)this + 2);
      Mutable = CFDataCreateMutable(0, 0);
      theData = Mutable;
      CFDataAppendBytes(Mutable, bytes, 4);
      v7 = *(char **)this;
      v5 = (char *)this + 8;
      v6 = v7;
      if (v7 != v5)
      {
        do
        {
          *(_DWORD *)v13 = 0;
          *(_DWORD *)v13 = BloomFilter::bufferSize((BloomFilter *)(v6 + 56));
          v8 = theData;
          CFDataAppendBytes(theData, v16, 32);
          CFDataAppendBytes(v8, v13, 4);
          v9 = (char *)operator new[]();
          BloomFilter::saveToBuffer((BloomFilter *)(v6 + 56), v9);
          Mutable = theData;
          CFDataAppendBytes(theData, (const UInt8 *)v9, *(unsigned int *)v13);
          MEMORY[0x19401E970](v9, 0x1000C8077774924);
          v10 = (char *)*((_QWORD *)v6 + 1);
          if (v10)
          {
            do
            {
              v11 = v10;
              v10 = *(char **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              v11 = (char *)*((_QWORD *)v6 + 2);
              v12 = *(_QWORD *)v11 == (_QWORD)v6;
              v6 = v11;
            }
            while (!v12);
          }
          v6 = v11;
        }
        while (v11 != v5);
      }
      nlp::CFScopedPtr<__CFData const*>::acquire(v3, Mutable);
      if (Mutable)
        CFRelease(Mutable);
      return *v3;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_191CFC36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,BloomFilter>::~pair(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  v2 = *(void **)(a1 + 24);
  if (v2)
    operator delete(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
  nlp::CFScopedPtr<__CFString *>::reset((const void **)(a1 + 40), 0);
}

void ___ZN7CoreNLP9Gazetteer15normalizeEntityEPK10__CFString_block_invoke(uint64_t a1, CFRange *a2)
{
  const __CFString *v3;

  v3 = CFStringCreateWithSubstring(0, *(CFStringRef *)(a1 + 48), *a2);
  if (CFStringGetLength(*(CFStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40)) >= 1)
    CFStringAppend(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), CFSTR(" "));
  CFStringAppend(*(CFMutableStringRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v3);
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (v3)
    CFRelease(v3);
}

void sub_191CFC4BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void CoreNLP::Gazetteer::availableLabels(CoreNLP::Gazetteer **this@<X0>, uint64_t *a2@<X8>)
{
  CoreNLP::Gazetteer **v2;
  CoreNLP::Gazetteer *v3;
  unint64_t v5;
  __int128 *v6;
  CoreNLP::Gazetteer *v7;
  CoreNLP::Gazetteer **v8;
  BOOL v9;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = this + 1;
  v3 = *this;
  if (*this != (CoreNLP::Gazetteer *)(this + 1))
  {
    v5 = 0;
    do
    {
      v6 = (__int128 *)((char *)v3 + 32);
      if (v5 >= a2[2])
      {
        v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, v6);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v6);
        v5 += 24;
      }
      a2[1] = v5;
      v7 = (CoreNLP::Gazetteer *)*((_QWORD *)v3 + 1);
      if (v7)
      {
        do
        {
          v8 = (CoreNLP::Gazetteer **)v7;
          v7 = *(CoreNLP::Gazetteer **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (CoreNLP::Gazetteer **)*((_QWORD *)v3 + 2);
          v9 = *v8 == v3;
          v3 = (CoreNLP::Gazetteer *)v8;
        }
        while (!v9);
      }
      v3 = (CoreNLP::Gazetteer *)v8;
    }
    while (v8 != v2);
  }
}

void sub_191CFC584(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

os_log_t ___ZN7CoreNLPL6loggerEv_block_invoke_1()
{
  const char *v0;
  os_log_t result;

  v0 = _nlpLoggingSubsystem();
  result = os_log_create(v0, "Gazetteer");
  CoreNLP::logger(void)::log = (uint64_t)result;
  return result;
}

std::string *std::pair<std::string,BloomFilter>::pair[abi:ne180100]<std::string&,BloomFilter&,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::vector<BOOL>::vector(this[1].__r_.__value_.__r.__words, a3);
  v6 = *(_OWORD *)(a3 + 24);
  *(_OWORD *)((char *)&this[2].__r_.__value_.__r.__words[1] + 4) = *(_OWORD *)(a3 + 36);
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  if (*(char *)(a3 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 80), *(const std::string::value_type **)(a3 + 56), *(_QWORD *)(a3 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a3 + 56);
    this[4].__r_.__value_.__r.__words[0] = *(_QWORD *)(a3 + 72);
    *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = v7;
  }
  v8 = (std::string *)((char *)this + 104);
  if (*(char *)(a3 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a3 + 80), *(_QWORD *)(a3 + 88));
  }
  else
  {
    v9 = *(_OWORD *)(a3 + 80);
    this[5].__r_.__value_.__r.__words[0] = *(_QWORD *)(a3 + 96);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  LODWORD(this[5].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a3 + 104);
  return this;
}

void sub_191CFC6A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 103) < 0)
    operator delete(*v3);
  if (*v2)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(a1, *(_QWORD **)a2, 0, (_QWORD *)(*(_QWORD *)a2 + 8 * (*(_QWORD *)(a2 + 8) >> 6)), *(_QWORD *)(a2 + 8) & 0x3F, *(_QWORD *)(a2 + 8));
  }
  return a1;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(_QWORD *a1, _QWORD *a2, unint64_t a3, _QWORD *a4, int a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE v11[32];

  v6 = a1[1];
  v7 = v6 + a6;
  a1[1] = v6 + a6;
  if (!v6 || ((v7 - 1) ^ (v6 - 1)) >= 0x40)
  {
    if (v7 >= 0x41)
      v8 = (v7 - 1) >> 6;
    else
      v8 = 0;
    *(_QWORD *)(*a1 + 8 * v8) = 0;
  }
  v9 = *a1 + 8 * (v6 >> 6);
  v10 = v6 & 0x3F;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(a2, a3, a4, a5, (uint64_t)&v9, (uint64_t)v11);
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1@<X1>, unint64_t a2@<X2>, _QWORD *a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _BOOL4 v12;

  LODWORD(v6) = a2;
  v7 = *(uint64_t **)a5;
  v8 = *(_DWORD *)(a5 + 8);
  if (a1 != a3 || (_DWORD)a2 != a4)
  {
    do
    {
      v9 = 1 << v8;
      if (((*a1 >> a2) & 1) != 0)
        v10 = *v7 | v9;
      else
        v10 = *v7 & ~v9;
      *v7 = v10;
      v11 = (_DWORD)v6 == 63;
      v12 = v6 == 63;
      v6 = (a2 + 1);
      if (v11)
        v6 = 0;
      if (v8 == 63)
      {
        v8 = 0;
        *(_QWORD *)a5 = ++v7;
      }
      else
      {
        ++v8;
      }
      a1 += v12;
      a2 = v6 | a2 & 0xFFFFFFFF00000000;
      *(_DWORD *)(a5 + 8) = v8;
    }
    while (a1 != a3 || (_DWORD)v6 != a4);
    a1 = a3;
  }
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = v7;
  *(_DWORD *)(a6 + 24) = v8;
}

_OWORD *std::__tree<std::__value_type<std::string,BloomFilter>,std::__map_value_compare<std::string,std::__value_type<std::string,BloomFilter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BloomFilter>>>::__emplace_unique_key_args<std::string,std::pair<std::string,BloomFilter>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[2];
  char v16;
  uint64_t v17;

  v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v17, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0xA8uLL);
    v15[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v8 = *(_QWORD *)(a3 + 16);
    v9 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *((_QWORD *)v6 + 6) = v8;
    *((_QWORD *)v6 + 7) = v9;
    *(_OWORD *)((char *)v6 + 92) = *(_OWORD *)(a3 + 60);
    v10 = *(_OWORD *)(a3 + 32);
    v11 = *(_OWORD *)(a3 + 48);
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    v6[4] = v10;
    v6[5] = v11;
    v12 = *(_OWORD *)(a3 + 80);
    *((_QWORD *)v6 + 16) = *(_QWORD *)(a3 + 96);
    v6[7] = v12;
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    v13 = *(_OWORD *)(a3 + 104);
    *((_QWORD *)v6 + 19) = *(_QWORD *)(a3 + 120);
    *(_OWORD *)((char *)v6 + 136) = v13;
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(a3 + 104) = 0;
    *(_QWORD *)(a3 + 112) = 0;
    *(_QWORD *)(a3 + 120) = 0;
    *((_DWORD *)v6 + 40) = *(_DWORD *)(a3 + 128);
    v16 = 1;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v17, v7, (uint64_t *)v6);
    v15[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,BloomFilter>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BloomFilter>,void *>>>>::reset[abi:ne180100]((uint64_t)v15, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,BloomFilter>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BloomFilter>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,BloomFilter>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void OUTLINED_FUNCTION_0_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

uint64_t NLModelTrainerCreate(const __CFDictionary *a1)
{
  CoreNLP::NLModelTrainer *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (CoreNLP::NLModelTrainer *)operator new();
  CoreNLP::NLModelTrainer::NLModelTrainer(v2, a1);
  std::shared_ptr<CoreNLP::NLModelTrainer>::shared_ptr[abi:ne180100]<CoreNLP::NLModelTrainer,void>(&v8, (uint64_t)v2);
  v3 = CoreNLP::createModelTrainerWrapper(&v8);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_191CFCA50(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x191CFCA3CLL);
}

uint64_t NLModelTrainerTrainAndCopyContainer(CoreNLP *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v10;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  const void *Value;
  CFArrayRef Copy;
  const __CFArray *v16;
  CFArrayRef v17;
  uint64_t v18;
  void *values;

  v10 = CoreNLP::unwrapGazetteer(a1, a2);
  v11 = NLModelTrainerTrainAndCopyModelDict(a1, (const __CFDictionary *(*)(void *, BOOL *))a2, a3, a4, a5);
  if (!v11)
    return NLModelContainerCreate(*(unsigned int *)(v10 + 168), 0, 0, 0, 0);
  v12 = v11;
  Value = CFDictionaryGetValue(v11, kNLModelTrainerModelMetadataKey);
  if (CFDictionaryContainsKey(v12, kNLModelTrainerModelDataKey))
  {
    values = (void *)CFDictionaryGetValue(v12, kNLModelTrainerModelDataKey);
    Copy = CFArrayCreate(0, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    goto LABEL_7;
  }
  if (CFDictionaryContainsKey(v12, kNLModelTrainerModelDataArrayKey))
  {
    v16 = (const __CFArray *)CFDictionaryGetValue(v12, kNLModelTrainerModelDataArrayKey);
    Copy = CFArrayCreateCopy(0, v16);
LABEL_7:
    v17 = Copy;
    v18 = NLModelContainerCreate(*(unsigned int *)(v10 + 168), 0, 0, (uint64_t)Value, (uint64_t)Copy);
    if (v17)
      CFRelease(v17);
    goto LABEL_10;
  }
  v18 = NLModelContainerCreate(*(unsigned int *)(v10 + 168), 0, 0, (uint64_t)Value, 0);
LABEL_10:
  CFRelease(v12);
  return v18;
}

const __CFDictionary *NLModelTrainerTrainAndCopyModelDict(CoreNLP *a1, const __CFDictionary *(*a2)(void *, BOOL *), void *a3, void *a4, uint64_t a5)
{
  void *v7;
  CoreNLP::NLModelTrainer *v8;

  if (!a2 || !a1 || !a3)
    return 0;
  NLModelReadSamplesIntoTrainer(a1, a2, a3, a4);
  v8 = (CoreNLP::NLModelTrainer *)CoreNLP::unwrapGazetteer(a1, v7);
  CoreNLP::NLModelTrainer::endReadSamples(v8);
  CoreNLP::NLModelTrainer::setLogBlock((uint64_t)v8, a5);
  return CoreNLP::NLModelTrainer::copyTrainedModelDict(v8);
}

uint64_t NLModelTrainerTrainAndCopyContainerAndPredictedLabels(CoreNLP *a1, void *a2, void *a3, void *a4, __CFDictionary **a5, uint64_t a6)
{
  uint64_t v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  const void *Value;
  CFArrayRef Copy;
  const __CFArray *v18;
  CFArrayRef v19;
  __CFDictionary *Mutable;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  uint64_t v33;
  void *values;

  v12 = CoreNLP::unwrapGazetteer(a1, a2);
  v13 = NLModelTrainerTrainAndCopyModelDict(a1, (const __CFDictionary *(*)(void *, BOOL *))a2, a3, a4, a6);
  if (!v13)
    return NLModelContainerCreate(*(unsigned int *)(v12 + 168), 0, 0, 0, 0);
  v14 = v13;
  Value = CFDictionaryGetValue(v13, kNLModelTrainerModelMetadataKey);
  if (CFDictionaryContainsKey(v14, kNLModelTrainerModelDataKey))
  {
    values = (void *)CFDictionaryGetValue(v14, kNLModelTrainerModelDataKey);
    Copy = CFArrayCreate(0, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  }
  else
  {
    if (!CFDictionaryContainsKey(v14, kNLModelTrainerModelDataArrayKey))
    {
      v19 = 0;
      if (a5)
        goto LABEL_8;
      goto LABEL_33;
    }
    v18 = (const __CFArray *)CFDictionaryGetValue(v14, kNLModelTrainerModelDataArrayKey);
    Copy = CFArrayCreateCopy(0, v18);
  }
  v19 = Copy;
  if (a5)
  {
LABEL_8:
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (CFDictionaryContainsKey(v14, kNLModelTrainingSentencesKey))
    {
      v21 = CFDictionaryGetValue(v14, kNLModelTrainingSentencesKey);
      CFDictionaryAddValue(Mutable, kNLModelTrainingSentencesKey, v21);
    }
    if (CFDictionaryContainsKey(v14, kNLModelValidationSentencesKey))
    {
      v22 = CFDictionaryGetValue(v14, kNLModelValidationSentencesKey);
      CFDictionaryAddValue(Mutable, kNLModelValidationSentencesKey, v22);
    }
    if (CFDictionaryContainsKey(v14, kNLModelTrainingSentenceIdsKey))
    {
      v23 = CFDictionaryGetValue(v14, kNLModelTrainingSentenceIdsKey);
      CFDictionaryAddValue(Mutable, kNLModelTrainingSentenceIdsKey, v23);
    }
    if (CFDictionaryContainsKey(v14, kNLModelValidationSentenceIdsKey))
    {
      v24 = CFDictionaryGetValue(v14, kNLModelValidationSentenceIdsKey);
      CFDictionaryAddValue(Mutable, kNLModelValidationSentenceIdsKey, v24);
    }
    if (CFDictionaryContainsKey(v14, kNLModelTrainingTokenLocationsKey))
    {
      v25 = CFDictionaryGetValue(v14, kNLModelTrainingTokenLocationsKey);
      CFDictionaryAddValue(Mutable, kNLModelTrainingTokenLocationsKey, v25);
    }
    if (CFDictionaryContainsKey(v14, kNLModelValidationTokenLocationsKey))
    {
      v26 = CFDictionaryGetValue(v14, kNLModelValidationTokenLocationsKey);
      CFDictionaryAddValue(Mutable, kNLModelValidationTokenLocationsKey, v26);
    }
    if (CFDictionaryContainsKey(v14, kNLModelTrainingTokenLengthsKey))
    {
      v27 = CFDictionaryGetValue(v14, kNLModelTrainingTokenLengthsKey);
      CFDictionaryAddValue(Mutable, kNLModelTrainingTokenLengthsKey, v27);
    }
    if (CFDictionaryContainsKey(v14, kNLModelValidationTokenLengthsKey))
    {
      v28 = CFDictionaryGetValue(v14, kNLModelValidationTokenLengthsKey);
      CFDictionaryAddValue(Mutable, kNLModelValidationTokenLengthsKey, v28);
    }
    if (CFDictionaryContainsKey(v14, kNLModelGoldTrainingLabelsKey))
    {
      v29 = CFDictionaryGetValue(v14, kNLModelGoldTrainingLabelsKey);
      CFDictionaryAddValue(Mutable, kNLModelGoldTrainingLabelsKey, v29);
    }
    if (CFDictionaryContainsKey(v14, kNLModelGoldValidationLabelsKey))
    {
      v30 = CFDictionaryGetValue(v14, kNLModelGoldValidationLabelsKey);
      CFDictionaryAddValue(Mutable, kNLModelGoldValidationLabelsKey, v30);
    }
    if (CFDictionaryContainsKey(v14, kNLModelPredictedTrainingLabelsKey))
    {
      v31 = CFDictionaryGetValue(v14, kNLModelPredictedTrainingLabelsKey);
      CFDictionaryAddValue(Mutable, kNLModelPredictedTrainingLabelsKey, v31);
    }
    if (CFDictionaryContainsKey(v14, kNLModelPredictedValidationLabelsKey))
    {
      v32 = CFDictionaryGetValue(v14, kNLModelPredictedValidationLabelsKey);
      CFDictionaryAddValue(Mutable, kNLModelPredictedValidationLabelsKey, v32);
    }
    *a5 = Mutable;
  }
LABEL_33:
  v33 = NLModelContainerCreate(*(unsigned int *)(v12 + 168), 0, 0, (uint64_t)Value, (uint64_t)v19);
  if (v19)
    CFRelease(v19);
  CFRelease(v14);
  return v33;
}

__CFData *NLModelTrainerTrainAndCopyModelData(CoreNLP *a1, const __CFDictionary *(*a2)(void *, BOOL *), void *a3, void *a4, uint64_t a5)
{
  void *v7;
  CoreNLP::NLModelTrainer *v8;

  if (!a2 || !a1 || !a3)
    return 0;
  NLModelReadSamplesIntoTrainer(a1, a2, a3, a4);
  v8 = (CoreNLP::NLModelTrainer *)CoreNLP::unwrapGazetteer(a1, v7);
  CoreNLP::NLModelTrainer::setLogBlock((uint64_t)v8, a5);
  return CoreNLP::NLModelTrainer::copyTrainedModelData(v8);
}

void NLModelReadSamplesIntoTrainer(CoreNLP *a1, const __CFDictionary *(*a2)(void *, BOOL *), void *a3, void *a4)
{
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::string *begin;
  std::vector<std::string>::pointer i;
  const __CFDictionary *v21;
  const __CFDictionary *v22;
  const __CFArray *v23;
  const __CFArray *v24;
  const __CFArray *v25;
  CFIndex Count;
  CFIndex v27;
  CFIndex v28;
  CFIndex j;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  const __CFString *v43;
  std::vector<std::string>::pointer end;
  __int128 v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  std::string *v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  int v53;
  char *v54;
  uint64_t v55;
  uint64_t v58;
  char *v59;
  const __CFString *Value;
  void *v61[2];
  std::string::size_type v62;
  __int128 valuePtr;
  char v64;
  void *__p;
  char *v66;
  char *v67;
  std::vector<std::string> v68;
  char *v69;
  char *v70;
  char *v71;
  std::__split_buffer<std::string> __v;

  v55 = CoreNLP::unwrapGazetteer(a1, a2);
  v69 = 0;
  v70 = 0;
  v71 = 0;
  memset(&v68, 0, sizeof(v68));
  __p = 0;
  v66 = 0;
  v67 = 0;
  v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>((uint64_t)&v67, 1uLL);
  *(_QWORD *)v6 = a3;
  *((_DWORD *)v6 + 2) = 0;
  v7 = v6 + 16;
  v9 = (char *)__p;
  v8 = v66;
  v10 = v6;
  if (v66 != __p)
  {
    do
    {
      *((_OWORD *)v10 - 1) = *((_OWORD *)v8 - 1);
      v10 -= 16;
      v8 -= 16;
    }
    while (v8 != v9);
    v8 = (char *)__p;
  }
  __p = v10;
  v66 = v6 + 16;
  v67 = &v6[16 * v5];
  if (v8)
    operator delete(v8);
  v66 = v6 + 16;
  if (a4)
  {
    if (v7 >= v67)
    {
      v11 = (v7 - (_BYTE *)__p) >> 4;
      if ((unint64_t)(v11 + 1) >> 60)
        std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
      v12 = (v67 - (_BYTE *)__p) >> 3;
      if (v12 <= v11 + 1)
        v12 = v11 + 1;
      if ((unint64_t)(v67 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF0)
        v13 = 0xFFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>((uint64_t)&v67, v13);
      else
        v14 = 0;
      v15 = &v14[16 * v11];
      v16 = &v14[16 * v13];
      *(_QWORD *)v15 = a4;
      *((_DWORD *)v15 + 2) = 1;
      v7 = v15 + 16;
      v18 = (char *)__p;
      v17 = v66;
      if (v66 != __p)
      {
        do
        {
          *((_OWORD *)v15 - 1) = *((_OWORD *)v17 - 1);
          v15 -= 16;
          v17 -= 16;
        }
        while (v17 != v18);
        v17 = (char *)__p;
      }
      __p = v15;
      v66 = v7;
      v67 = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *((_QWORD *)v6 + 2) = a4;
      *((_DWORD *)v6 + 6) = 1;
      v7 = v6 + 32;
    }
    v66 = v7;
  }
  v59 = (char *)__p;
  if (__p == v7)
    goto LABEL_74;
  v54 = v7;
  v58 = 0;
  do
  {
    v64 = 0;
    do
    {
      v70 = v69;
      begin = v68.__begin_;
      for (i = v68.__end_; i != begin; --i)
      {
        if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(i[-1].__r_.__value_.__l.__data_);
      }
      v68.__end_ = begin;
      v21 = a2(*(void **)v59, (BOOL *)&v64);
      v22 = v21;
      if (!v21)
        break;
      Value = (const __CFString *)CFDictionaryGetValue(v21, (const void *)kNLModelSampleDataTextKey);
      v23 = (const __CFArray *)CFDictionaryGetValue(v22, kNLModelSampleDataLabelArrayKey);
      v24 = (const __CFArray *)CFDictionaryGetValue(v22, kNLModelSampleDataRangeLocationArrayKey);
      v25 = (const __CFArray *)CFDictionaryGetValue(v22, kNLModelSampleDataRangeLengthArrayKey);
      Count = CFArrayGetCount(v23);
      v27 = CFArrayGetCount(v24);
      v28 = CFArrayGetCount(v25);
      if (Count == v27 && Count == v28)
      {
        if (Count >= 1)
        {
          for (j = 0; j != Count; ++j)
          {
            ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v24, j);
            CFNumberGetValue(ValueAtIndex, kCFNumberCFIndexType, &valuePtr);
            v31 = (const __CFNumber *)CFArrayGetValueAtIndex(v25, j);
            CFNumberGetValue(v31, kCFNumberCFIndexType, (char *)&valuePtr + 8);
            v32 = v70;
            if (v70 >= v71)
            {
              v34 = (v70 - v69) >> 4;
              v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 60)
                std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
              v36 = v71 - v69;
              if ((v71 - v69) >> 3 > v35)
                v35 = v36 >> 3;
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
                v37 = 0xFFFFFFFFFFFFFFFLL;
              else
                v37 = v35;
              if (v37)
                v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>((uint64_t)&v71, v37);
              else
                v38 = 0;
              v39 = &v38[16 * v34];
              *(_OWORD *)v39 = valuePtr;
              v41 = v69;
              v40 = v70;
              v42 = v39;
              if (v70 != v69)
              {
                do
                {
                  *((_OWORD *)v42 - 1) = *((_OWORD *)v40 - 1);
                  v42 -= 16;
                  v40 -= 16;
                }
                while (v40 != v41);
                v40 = v69;
              }
              v33 = v39 + 16;
              v69 = v42;
              v70 = v39 + 16;
              v71 = &v38[16 * v37];
              if (v40)
                operator delete(v40);
            }
            else
            {
              *(_OWORD *)v70 = valuePtr;
              v33 = v32 + 16;
            }
            v70 = v33;
            v43 = (const __CFString *)CFArrayGetValueAtIndex(v23, j);
            CoreNLP::getUTF8StringFromCFString(v43, v61);
            end = v68.__end_;
            if (v68.__end_ >= v68.__end_cap_.__value_)
            {
              v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v68.__end_ - (char *)v68.__begin_) >> 3);
              v47 = v46 + 1;
              if (v46 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v68.__end_cap_.__value_ - (char *)v68.__begin_) >> 3) > v47)
                v47 = 0x5555555555555556 * (((char *)v68.__end_cap_.__value_ - (char *)v68.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v68.__end_cap_.__value_ - (char *)v68.__begin_) >> 3) >= 0x555555555555555)
                v48 = 0xAAAAAAAAAAAAAAALL;
              else
                v48 = v47;
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v68.__end_cap_;
              if (v48)
                v49 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v68.__end_cap_, v48);
              else
                v49 = 0;
              v50 = v49 + v46;
              __v.__first_ = v49;
              __v.__begin_ = v50;
              __v.__end_cap_.__value_ = &v49[v48];
              v51 = *(_OWORD *)v61;
              v50->__r_.__value_.__r.__words[2] = v62;
              *(_OWORD *)&v50->__r_.__value_.__l.__data_ = v51;
              v61[1] = 0;
              v62 = 0;
              v61[0] = 0;
              __v.__end_ = v50 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v68, &__v);
              v52 = v68.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&__v);
              v68.__end_ = v52;
              if (SHIBYTE(v62) < 0)
                operator delete(v61[0]);
            }
            else
            {
              v45 = *(_OWORD *)v61;
              v68.__end_->__r_.__value_.__r.__words[2] = v62;
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v45;
              v68.__end_ = end + 1;
            }
          }
        }
        if (a4)
          v53 = *((_DWORD *)v59 + 2);
        else
          v53 = __ROR8__(0xCCCCCCCCCCCCCCCDLL * v58 + 0x1999999999999998, 1) < 0x1999999999999999uLL;
        CoreNLP::NLModelTrainer::readSample(v55, Value, &v69, &v68, v53);
        CFRelease(v22);
        ++v58;
      }
    }
    while (!v64);
    v59 += 16;
  }
  while (v59 != v54);
  v7 = (char *)__p;
  if (__p)
  {
LABEL_74:
    v66 = v7;
    operator delete(v7);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v68;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
}

void sub_191CFD644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char *__p,char *a28,uint64_t a29,char a30)
{
  uint64_t v30;
  void *v32;

  if (__p)
  {
    a28 = __p;
    operator delete(__p);
  }
  __p = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v32 = *(void **)(v30 - 152);
  if (v32)
  {
    *(_QWORD *)(v30 - 144) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

uint64_t NLModelCreateWithContainer(CoreNLP *a1, void *a2)
{
  void *v3;
  CoreNLP *v4;
  uint64_t v5;
  void *v6;
  CFIndex ModelDataCount;
  void *v8;
  __CFArray *Mutable;
  char *i;
  CoreNLP *v11;
  const __CFString *Value;
  __CFDictionary *MutableCopy;
  __CFDictionary *v14;
  CFNumberRef v15;
  int valuePtr;
  __CFDictionary *v18;
  const __CFString *v19;
  CFDictionaryRef theDict;
  CoreNLP *v21;

  if (NLModelContainerGetType(a1, a2) == 1)
  {
    v4 = NLModelContainerCopyModelDataAtIndex(a1, 0);
    v21 = v4;
    v5 = NLModelCreate(v4);
    if (v4)
      CFRelease(v4);
  }
  else if (NLModelContainerGetType(a1, v3) == 9)
  {
    ModelDataCount = (CFIndex)NLModelContainerGetModelDataCount(a1, v6);
    Mutable = CFArrayCreateMutable(0, ModelDataCount, MEMORY[0x1E0C9B378]);
    v21 = Mutable;
    if (ModelDataCount >= 1)
    {
      for (i = 0; i != (char *)ModelDataCount; ++i)
      {
        v11 = NLModelContainerCopyModelDataAtIndex(a1, i);
        theDict = v11;
        CFArrayAppendValue(Mutable, v11);
        if (v11)
          CFRelease(v11);
      }
    }
    v19 = CFSTR("en");
    theDict = NLModelContainerCopyInfoDictionary(a1, v8);
    if (CFDictionaryContainsKey(theDict, kNLModelTrainerLanguageKey))
    {
      Value = (const __CFString *)CFDictionaryGetValue(theDict, kNLModelTrainerLanguageKey);
      CFRelease(CFSTR("en"));
      v19 = Value;
    }
    else
    {
      MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
      v18 = MutableCopy;
      CFDictionaryAddValue(MutableCopy, kNLModelTrainerLanguageKey, CFSTR("en"));
      nlp::CFScopedPtr<__CFDictionary const*>::acquire((const void **)&theDict, MutableCopy);
      if (MutableCopy)
        CFRelease(MutableCopy);
      Value = CFSTR("en");
    }
    v14 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v18 = v14;
    CFDictionaryAddValue(v14, kNLModelTrainerModelDataArrayKey, Mutable);
    CFDictionaryAddValue(v14, kNLModelTrainerModelMetadataKey, theDict);
    CFDictionaryAddValue(v14, kNLModelTrainerLanguageKey, Value);
    valuePtr = 9;
    v15 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(v14, kNLModelTrainerModelMethodTypeKey, v15);
    v5 = NLModelTrainerCreate(v14);
    if (v15)
      CFRelease(v15);
    if (v14)
      CFRelease(v14);
    if (Value)
      CFRelease(Value);
    if (theDict)
      CFRelease(theDict);
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    return 0;
  }
  return v5;
}

void sub_191CFD940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v4;
  va_list va;
  const void *v6;
  va_list va1;
  const void *v8;
  va_list va2;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v6 = va_arg(va2, const void *);
  va_copy(va3, va2);
  v8 = va_arg(va3, const void *);
  nlp::CFScopedPtr<__CFDictionary *>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset((const void **)va2, 0);
  nlp::CFScopedPtr<__CFArray *>::reset((const void **)va3, 0);
  _Unwind_Resume(a1);
}

uint64_t NLModelCreate(const __CFData *a1)
{
  CoreNLP::NLModelTrainer *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (CoreNLP::NLModelTrainer *)operator new();
  CoreNLP::NLModelTrainer::NLModelTrainer(v2, a1);
  std::shared_ptr<CoreNLP::NLModelTrainer>::shared_ptr[abi:ne180100]<CoreNLP::NLModelTrainer,void>(&v8, (uint64_t)v2);
  v3 = CoreNLP::createModelTrainerWrapper(&v8);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_191CFDA98(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x191CFDA84);
}

void nlp::CFScopedPtr<__CFDictionary const*>::acquire(const void **a1, CFTypeRef cf)
{
  if (*a1 != cf)
  {
    CFRetain(cf);
    nlp::CFScopedPtr<__CFDictionary const*>::reset(a1, cf);
  }
}

__CFDictionary *NLModelCopyPredictedLabels(CoreNLP *a1, __CFString *a2)
{
  CoreNLP::NLModelTrainer *v3;

  if (!a1 || !a2)
    return 0;
  v3 = (CoreNLP::NLModelTrainer *)CoreNLP::unwrapGazetteer(a1, a2);
  return CoreNLP::NLModelTrainer::copyPredictedLabels(v3, a2, 0, 1);
}

__CFDictionary *NLModelCopyPredictedLabelsAndProbabilities(CoreNLP *a1, __CFString *a2, uint64_t a3)
{
  CoreNLP::NLModelTrainer *v5;

  if (!a1 || !a2)
    return 0;
  v5 = (CoreNLP::NLModelTrainer *)CoreNLP::unwrapGazetteer(a1, a2);
  return CoreNLP::NLModelTrainer::copyPredictedLabels(v5, a2, 1, a3);
}

uint64_t NLModelCopyContainer(CoreNLP *a1, void *a2)
{
  unsigned int *v2;
  __CFDictionary *v3;
  void *Value;
  CFDictionaryRef CFDictionaryRef;
  const void *v6;
  uint64_t v7;
  const void *v8;
  void *values[2];
  CFTypeRef cf;

  if (!a1)
    return 0;
  v2 = (unsigned int *)CoreNLP::unwrapGazetteer(a1, a2);
  v3 = CoreNLP::NLModelTrainer::copyModelDict((CoreNLP::NLModelTrainer *)v2);
  Value = (void *)CFDictionaryGetValue(v3, kNLModelTrainerModelMetadataKey);
  values[0] = 0;
  values[1] = 0;
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)values);
  cf = CFDictionaryRef;
  if (!Value)
    Value = CFDictionaryRef;
  if (CFDictionaryContainsKey(v3, kNLModelTrainerModelDataKey))
  {
    values[0] = (void *)CFDictionaryGetValue(v3, kNLModelTrainerModelDataKey);
    v6 = CFArrayCreate(0, (const void **)values, 1, MEMORY[0x1E0C9B378]);
  }
  else
  {
    v6 = 0;
  }
  if (CFDictionaryContainsKey(v3, kNLModelTrainerModelDataArrayKey))
  {
    v8 = CFDictionaryGetValue(v3, kNLModelTrainerModelDataArrayKey);
    v6 = CFRetain(v8);
  }
  if (v6)
  {
    v7 = NLModelContainerCreate(v2[42], 0, 0, (uint64_t)Value, (uint64_t)v6);
    CFRelease(v6);
  }
  else
  {
    v7 = 0;
  }
  CFRelease(v3);
  if (cf)
    CFRelease(cf);
  return v7;
}

void sub_191CFDCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

CoreNLP *NLModelCopyModelData(CoreNLP *result, void *a2)
{
  CoreNLP::NLModelTrainer *v2;

  if (result)
  {
    v2 = (CoreNLP::NLModelTrainer *)CoreNLP::unwrapGazetteer(result, a2);
    return (CoreNLP *)CoreNLP::NLModelTrainer::copyModelData(v2);
  }
  return result;
}

_QWORD *std::shared_ptr<CoreNLP::NLModelTrainer>::shared_ptr[abi:ne180100]<CoreNLP::NLModelTrainer,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E2DF3698;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_191CFDD84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<CoreNLP::NLModelTrainer>::reset[abi:ne180100]((CoreNLP::NLModelTrainer **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<CoreNLP::NLModelTrainer *,std::shared_ptr<CoreNLP::NLModelTrainer>::__shared_ptr_default_delete<CoreNLP::NLModelTrainer,CoreNLP::NLModelTrainer>,std::allocator<CoreNLP::NLModelTrainer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401E994);
}

CoreNLP::NLModelTrainer *std::__shared_ptr_pointer<CoreNLP::NLModelTrainer *,std::shared_ptr<CoreNLP::NLModelTrainer>::__shared_ptr_default_delete<CoreNLP::NLModelTrainer,CoreNLP::NLModelTrainer>,std::allocator<CoreNLP::NLModelTrainer>>::__on_zero_shared(uint64_t a1)
{
  CoreNLP::NLModelTrainer *result;

  result = *(CoreNLP::NLModelTrainer **)(a1 + 24);
  if (result)
  {
    CoreNLP::NLModelTrainer::~NLModelTrainer(result);
    JUMPOUT(0x19401E994);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<CoreNLP::NLModelTrainer *,std::shared_ptr<CoreNLP::NLModelTrainer>::__shared_ptr_default_delete<CoreNLP::NLModelTrainer,CoreNLP::NLModelTrainer>,std::allocator<CoreNLP::NLModelTrainer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

CoreNLP::NLModelTrainer *std::unique_ptr<CoreNLP::NLModelTrainer>::reset[abi:ne180100](CoreNLP::NLModelTrainer **a1, CoreNLP::NLModelTrainer *a2)
{
  CoreNLP::NLModelTrainer *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CoreNLP::NLModelTrainer::~NLModelTrainer(result);
    JUMPOUT(0x19401E994);
  }
  return result;
}

_QWORD *Darts::DoubleArrayImpl<void,void,int,void>::~DoubleArrayImpl(_QWORD *a1)
{
  uint64_t v2;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2DF1540;
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x19401E970](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  return a1;
}

uint64_t sentencepiece::ModelInterface::ModelInterface(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t *v7;
  _DWORD *v9;

  *(_QWORD *)a1 = off_1E2DF08E8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &off_1E2DF1540;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = &off_1E2DF1540;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = (uint64_t *)(a1 + 96);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sentencepiece::util::Status::Status((_QWORD *)(a1 + 96));
  sentencepiece::ModelInterface::InitFromMMappedFile(a1, a3, a4, (sentencepiece::util::Status *)&v9);
  sentencepiece::util::Status::operator=(v7, &v9);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v9);
  return a1;
}

void sub_191CFDF80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t **v3;
  sentencepiece::util::Status *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  sentencepiece::util::Status::~Status(v4);
  v2[7] = v6;
  *v7 = 0;
  v7[1] = 0;
  v9 = v2[10];
  if (v9)
  {
    MEMORY[0x19401E970](v9, 0x1000C8052888210);
    v2[10] = 0;
  }
  v2[3] = v6;
  *v5 = 0;
  v5[1] = 0;
  v10 = v2[6];
  if (v10)
  {
    MEMORY[0x19401E970](v10, 0x1000C8052888210);
    v2[6] = 0;
  }
  std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100](v3, 0);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::InitFromMMappedFile(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  sentencepiece::mmap_util *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _DWORD *v23;
  _QWORD v24[33];
  uint64_t *v25;
  unsigned int v26;
  _DWORD *v27;
  unint64_t v28;

  v27 = a2;
  v28 = a3;
  sentencepiece::mmap_util::DecodePrefix<int>(a2, a3, (_DWORD *)(a1 + 88), a4);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
    if (!*(_QWORD *)a4)
    {
      sentencepiece::util::Status::~Status(a4);
      sentencepiece::mmap_util::DecodePrefix<int>(v27, v28, (_DWORD *)(a1 + 92), a4);
      if (!*(_QWORD *)a4)
      {
        sentencepiece::util::Status::~Status(a4);
        sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
        if (!*(_QWORD *)a4)
        {
          sentencepiece::util::Status::~Status(a4);
          v26 = 0;
          sentencepiece::mmap_util::DecodePrefix<unsigned int>(v27, v28, &v26, a4);
          if (!*(_QWORD *)a4)
          {
            sentencepiece::util::Status::~Status(a4);
            sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
            if (!*(_QWORD *)a4)
            {
              sentencepiece::util::Status::~Status(a4);
              v6 = v26;
              if (v28 < v26)
                v6 = v28;
              v23 = v27;
              v24[0] = v6;
              absl::make_unique<sentencepiece::normalizer::PrefixMatcher,std::string_view>(&v23, (uint64_t *)&v25);
              v7 = v25;
              v25 = 0;
              std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100]((uint64_t **)(a1 + 16), v7);
              std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100](&v25, 0);
              v8 = sentencepiece::mmap_util::RoundUp((sentencepiece::mmap_util *)v26, 4uLL);
              sentencepiece::mmap_util::RemovePrefix(&v27, v8, a4);
              if (!*(_QWORD *)a4)
              {
                sentencepiece::util::Status::~Status(a4);
                LODWORD(v25) = 0;
                sentencepiece::mmap_util::DecodePrefix<unsigned int>(v27, v28, &v25, a4);
                if (!*(_QWORD *)a4)
                {
                  sentencepiece::util::Status::~Status(a4);
                  sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
                  if (!*(_QWORD *)a4)
                  {
                    sentencepiece::util::Status::~Status(a4);
                    v9 = (sentencepiece::mmap_util *)v25;
                    if (!(_DWORD)v25)
                    {
                      LODWORD(v23) = 13;
                      v11 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(pieces_blob_size) > (0)", 24);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                      goto LABEL_18;
                    }
                    if (v28 < v25)
                    {
                      LODWORD(v23) = 13;
                      v10 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(blob.size()) >= (pieces_blob_size)", 35);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
LABEL_18:
                      sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&v23);
                      return;
                    }
                    if ((v25 & 3) != 0)
                    {
                      LODWORD(v23) = 13;
                      v12 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(pieces_blob_size % pieces_.unit_size()) == (0)", 47);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                      goto LABEL_18;
                    }
                    v13 = v27;
                    v14 = v25 >> 2;
                    *(_QWORD *)(a1 + 32) = 0;
                    *(_QWORD *)(a1 + 40) = 0;
                    if (*(_QWORD *)(a1 + 48))
                    {
                      MEMORY[0x19401E970](*(_QWORD *)(a1 + 48), 0x1000C8052888210);
                      *(_QWORD *)(a1 + 48) = 0;
                      v9 = (sentencepiece::mmap_util *)v25;
                    }
                    *(_QWORD *)(a1 + 32) = v14;
                    *(_QWORD *)(a1 + 40) = v13;
                    v15 = sentencepiece::mmap_util::RoundUp(v9, 4uLL);
                    sentencepiece::mmap_util::RemovePrefix(&v27, v15, a4);
                    if (!*(_QWORD *)a4)
                    {
                      sentencepiece::util::Status::~Status(a4);
                      v22 = 0;
                      sentencepiece::mmap_util::DecodePrefix<unsigned int>(v27, v28, &v22, a4);
                      if (!*(_QWORD *)a4)
                      {
                        sentencepiece::util::Status::~Status(a4);
                        sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
                        if (!*(_QWORD *)a4)
                        {
                          sentencepiece::util::Status::~Status(a4);
                          if (!v22)
                          {
                            LODWORD(v23) = 13;
                            v17 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(reserved_id_map_size) > (0)", 28);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                            goto LABEL_18;
                          }
                          if (v28 < v22)
                          {
                            LODWORD(v23) = 13;
                            v16 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(blob.size()) >= (reserved_id_map_size)", 39);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                            goto LABEL_18;
                          }
                          if ((v22 & 3) != 0)
                          {
                            LODWORD(v23) = 13;
                            v18 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(reserved_id_map_size % reserved_id_map_.unit_size()) == (0)", 60);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                            goto LABEL_18;
                          }
                          v19 = v27;
                          v20 = v22 >> 2;
                          *(_QWORD *)(a1 + 64) = 0;
                          *(_QWORD *)(a1 + 72) = 0;
                          v21 = *(_QWORD *)(a1 + 80);
                          if (v21)
                          {
                            MEMORY[0x19401E970](v21, 0x1000C8052888210);
                            *(_QWORD *)(a1 + 80) = 0;
                          }
                          *(_QWORD *)(a1 + 64) = v20;
                          *(_QWORD *)(a1 + 72) = v19;
                          sentencepiece::util::Status::Status(a4);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_191CFE658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::mmap_util::DecodePrefix<int>@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v8[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x19401E928](&v10);
  }
  else
  {
    *a3 = *a1;
    return sentencepiece::util::Status::Status(a4);
  }
}

void sub_191CFE7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::mmap_util::DecodePrefix<unsigned int>@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v8[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x19401E928](&v10);
  }
  else
  {
    *a3 = *a1;
    return sentencepiece::util::Status::Status(a4);
  }
}

void sub_191CFE958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::normalizer::PrefixMatcher,std::string_view>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sentencepiece::normalizer::PrefixMatcher::PrefixMatcher(v4, *a1, a1[1]);
  *a2 = v4;
  return result;
}

void sub_191CFE9C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void **v4;
  unint64_t v5;
  void *__p[2];
  unsigned __int8 v7;

  v3 = *a1;
  std::stringbuf::str();
  if ((v7 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v5 = v7;
  else
    v5 = (unint64_t)__p[1];
  sentencepiece::util::Status::Status(a2, v3, v4, v5);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_191CFEA54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::util::StatusBuilder::~StatusBuilder(sentencepiece::util::StatusBuilder *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *((_QWORD *)this + 1) = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 8) = *(_QWORD *)(v2 + 24);
  *((_QWORD *)this + 2) = MEMORY[0x1E0DE4FB8] + 16;
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19401E928]((char *)this + 120);
}

void **sentencepiece::ModelInterface::model_proto(sentencepiece::ModelInterface *this)
{
  void **v1;
  void **result;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;

  v1 = (void **)*((_QWORD *)this + 1);
  if (!v1 || (v3 = *v1, result = v1 - 2, v3 != &unk_1E2DF06B0))
  {
    v8 = 1;
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.cc", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") [", 3);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(model_proto = dynamic_cast<const ModelProto *>(model_proto_))", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"] ", 2);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v8);
    return 0;
  }
  return result;
}

void sub_191CFEBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::~ModelInterface(sentencepiece::ModelInterface *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E2DF08E8;
  sentencepiece::util::Status::~Status((sentencepiece::ModelInterface *)((char *)this + 96));
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = &off_1E2DF1540;
  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    MEMORY[0x19401E970](v2, 0x1000C8052888210);
    *((_QWORD *)this + 10) = 0;
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = &off_1E2DF1540;
  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    MEMORY[0x19401E970](v3, 0x1000C8052888210);
    *((_QWORD *)this + 6) = 0;
  }
  std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100]((uint64_t **)this + 2, 0);
}

const char *sentencepiece::ModelInterface::unk_piece(sentencepiece::ModelInterface *this)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  else
    return "<unk>";
}

const char *sentencepiece::ModelInterface::bos_piece(sentencepiece::ModelInterface *this)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  else
    return "<s>";
}

const char *sentencepiece::ModelInterface::eos_piece(sentencepiece::ModelInterface *this)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
  else
    return "</s>";
}

const char *sentencepiece::ModelInterface::pad_piece(sentencepiece::ModelInterface *this)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
  else
    return "<pad>";
}

uint64_t sentencepiece::ModelInterface::PieceToId(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v7;

  v7 = 0;
  Darts::DoubleArrayImpl<void,void,int,void>::exactMatchSearch<int>(a1 + 56, a2, (int *)&v7, a3, 0);
  result = v7;
  if (v7 == -1)
  {
    Darts::DoubleArrayImpl<void,void,int,void>::exactMatchSearch<int>(a1 + 24, a2, (int *)&v7, a3, 0);
    result = v7;
    if (v7 == -1)
      return *(unsigned int *)(a1 + 88);
  }
  return result;
}

uint64_t Darts::DoubleArrayImpl<void,void,int,void>::exactMatchSearch<int>(uint64_t result, _BYTE *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  int v11;

  v5 = *(_QWORD *)(result + 16);
  v6 = *(_DWORD *)(v5 + 4 * a5);
  if (a4)
  {
    while (1)
    {
      v7 = *a2++;
      a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v7;
      v6 = *(_DWORD *)(v5 + 4 * a5);
      if ((v6 & 0x800000FF) != v7)
        break;
      if (!--a4)
        goto LABEL_9;
    }
  }
  else
  {
    v8 = *a2;
    if (*a2)
    {
      v9 = a2 + 1;
      while (1)
      {
        a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v8;
        v6 = *(_DWORD *)(v5 + 4 * a5);
        if ((v6 & 0x800000FF) != v8)
          break;
        v10 = *v9++;
        v8 = v10;
        if (!v10)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      if ((v6 & 0x100) != 0)
      {
        v11 = *(_DWORD *)(v5 + 4 * (a5 ^ (v6 >> 10 << ((v6 >> 6) & 8)))) & 0x7FFFFFFF;
        goto LABEL_12;
      }
    }
  }
  v11 = -1;
LABEL_12:
  *a3 = v11;
  return result;
}

uint64_t sentencepiece::ModelInterface::LookupPredictive@<X0>(sentencepiece::logging *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v10;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v10 = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.cc", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v10);
  }
  return sentencepiece::util::Status::Status(a2, 12, "Not implemented.", 16);
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v10;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v10 = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.cc", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v10);
  }
  return sentencepiece::util::Status::Status(a2, 12, "Not implemented.", 16);
}

void sub_191CFEFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sub_191CFF088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::InitializePieces(sentencepiece::ModelInterface *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  uint64_t **v13;
  unint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  size_t v22;
  void *v23;
  unsigned int v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  size_t v30;
  __int128 *v31;
  const void *v32;
  const char *v33;
  size_t v34;
  void *v35;
  std::string *v36;
  __int128 v37;
  const char *v38;
  std::string *v39;
  __int128 v40;
  size_t v41;
  std::string v42;
  _DWORD *v43;
  void *__p;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47[2];
  _QWORD **v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD **v51;
  _QWORD *v52;
  uint64_t v53;
  __int128 v54;
  int64_t v55;

  v52 = 0;
  v53 = 0;
  v50 = 0;
  v51 = &v52;
  v48 = &v49;
  v49 = 0;
  *((_DWORD *)this + 22) = -1;
  v47[0] = 0;
  v47[1] = 0;
  v46 = (uint64_t *)v47;
  LOBYTE(v54) = 0;
  std::vector<BOOL>::vector(&__p, 0x100uLL, (unsigned __int8 *)&v54);
  v2 = *((_QWORD *)this + 1);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  if (*(int *)(v3 + 64) < 1)
  {
LABEL_38:
    if (*((_DWORD *)this + 22) == -1)
    {
      sentencepiece::util::Status::Status(&v54, 13, "unk is not defined.", 19);
      sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54);
    }
    else
    {
      v25 = *(_BYTE **)(v3 + 80);
      if (!v25)
        v25 = &sentencepiece::_TrainerSpec_default_instance_;
      if (!v25[248]
        || (*(_QWORD *)&v54 = __p,
            DWORD2(v54) = 0,
            std::__find_BOOL[abi:ne180100]<false,std::vector<BOOL>,false>((uint64_t)&v54, v45, (uint64_t)&v42),
            v42.__r_.__value_.__l.__data_ == (char *)__p + 8 * (v45 >> 6))
        && LODWORD(v42.__r_.__value_.__r.__words[1]) == (v45 & 0x3F))
      {
        if (!v53
          || (sentencepiece::BuildTrie((_QWORD *)this + 3, &v51, (int *)this + 23, &v54),
              sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54),
              sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54),
              (*(void (**)(__int128 *__return_ptr, sentencepiece::ModelInterface *))(*(_QWORD *)this + 16))(&v54, this), v26 = v54, sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54), !v26))
        {
          if (!v50
            || (sentencepiece::BuildTrie((_QWORD *)this + 7, &v48, 0, &v54),
                sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54),
                sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54),
                (*(void (**)(__int128 *__return_ptr, sentencepiece::ModelInterface *))(*(_QWORD *)this + 16))(&v54, this), v27 = v54, sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54), !v27))
          {
            absl::make_unique<sentencepiece::normalizer::PrefixMatcher,std::set<std::string_view> &>((uint64_t)&v46, (uint64_t *)&v54);
            v28 = (uint64_t *)v54;
            *(_QWORD *)&v54 = 0;
            std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100]((uint64_t **)this + 2, v28);
            std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100]((uint64_t **)&v54, 0);
          }
        }
        goto LABEL_69;
      }
      sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54);
    }
LABEL_68:
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54);
    goto LABEL_69;
  }
  v4 = 0;
  while (1)
  {
    v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(v3 + 56, v4);
    v6 = v5;
    v7 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFFELL;
    v8 = *(unsigned __int8 *)(v7 + 23);
    if (*(char *)(v7 + 23) < 0)
    {
      if (!*(_QWORD *)(v7 + 8))
      {
LABEL_50:
        sentencepiece::util::Status::Status(&v54, 13, "piece must not be empty.", 24);
        sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54);
        goto LABEL_68;
      }
    }
    else if (!*(_BYTE *)(v7 + 23))
    {
      goto LABEL_50;
    }
    v9 = *(_DWORD *)(v5 + 60);
    v10 = v9 > 5;
    v11 = (1 << v9) & 0x32;
    v12 = v10 || v11 == 0;
    v13 = (uint64_t **)(v12 ? &v48 : &v51);
    if ((v8 & 0x80) != 0)
    {
      v14 = *(_QWORD *)v7;
      v8 = *(_QWORD *)(v7 + 8);
    }
    else
    {
      v14 = v7;
    }
    *(_QWORD *)&v54 = v14;
    *((_QWORD *)&v54 + 1) = v8;
    LODWORD(v55) = v4;
    std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__emplace_unique_key_args<std::string_view,std::pair<std::string_view const,int> const&>(v13, (uint64_t)&v54, (uint64_t)&v54);
    if ((v15 & 1) == 0)
      break;
    v16 = *(_DWORD *)(v6 + 60);
    if (v16 == 4)
    {
      v17 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v17 + 23) < 0)
      {
        v19 = *(_QWORD *)v17;
        v18 = *(_QWORD *)(v17 + 8);
      }
      else
      {
        v18 = *(unsigned __int8 *)(v17 + 23);
        v19 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      }
      *(_QWORD *)&v54 = v19;
      *((_QWORD *)&v54 + 1) = v18;
      std::__tree<std::string_view>::__emplace_unique_key_args<std::string_view,std::string_view>(&v46, (uint64_t)&v54, &v54);
      v16 = *(_DWORD *)(v6 + 60);
    }
    if (v16 == 6)
    {
      v20 = *(_BYTE **)(v3 + 80);
      if (!v20)
        v20 = &sentencepiece::_TrainerSpec_default_instance_;
      if (!v20[248])
      {
        std::operator+<char>();
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v55 = v36->__r_.__value_.__r.__words[2];
        v54 = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        if (v55 >= 0)
          v38 = (const char *)&v54;
        else
          v38 = (const char *)v54;
LABEL_78:
        v41 = strlen(v38);
        sentencepiece::util::Status::Status(&v43, 13, v38, v41);
        sentencepiece::util::Status::operator=((uint64_t *)this + 12, &v43);
        sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v43);
        if (SHIBYTE(v55) < 0)
          operator delete((void *)v54);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        {
          v35 = (void *)v42.__r_.__value_.__r.__words[0];
          goto LABEL_82;
        }
        goto LABEL_69;
      }
      v21 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v21 + 23) < 0)
      {
        v23 = *(void **)v21;
        v22 = *(_QWORD *)(v21 + 8);
      }
      else
      {
        v22 = *(unsigned __int8 *)(v21 + 23);
        v23 = (void *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      v24 = sentencepiece::PieceToByte(v23, v22);
      if ((v24 & 0x80000000) != 0)
      {
        std::operator+<char>();
        v39 = std::string::append(&v42, " is invalid.");
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v55 = v39->__r_.__value_.__r.__words[2];
        v54 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (v55 >= 0)
          v38 = (const char *)&v54;
        else
          v38 = (const char *)v54;
        goto LABEL_78;
      }
      *(_QWORD *)((char *)__p + (((unint64_t)v24 >> 3) & 0x1FFFFFF8)) |= 1 << v24;
    }
    else if (v16 == 2)
    {
      if ((*((_DWORD *)this + 22) & 0x80000000) == 0)
      {
        sentencepiece::util::Status::Status(&v54, 13, "unk is already defined.", 23);
        sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54);
        goto LABEL_68;
      }
      *((_DWORD *)this + 22) = v4;
    }
    if (++v4 >= *(_DWORD *)(v3 + 64))
      goto LABEL_38;
  }
  v29 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v29 + 23) >= 0)
    v30 = *(unsigned __int8 *)(v29 + 23);
  else
    v30 = *(_QWORD *)(v29 + 8);
  v31 = &v54;
  std::string::basic_string[abi:ne180100]((uint64_t)&v54, v30 + 20);
  if (v55 < 0)
    v31 = (__int128 *)v54;
  if (v30)
  {
    if (*(char *)(v29 + 23) >= 0)
      v32 = (const void *)v29;
    else
      v32 = *(const void **)v29;
    memmove(v31, v32, v30);
  }
  strcpy((char *)v31 + v30, " is already defined.");
  if (v55 >= 0)
    v33 = (const char *)&v54;
  else
    v33 = (const char *)v54;
  v34 = strlen(v33);
  sentencepiece::util::Status::Status(&v42, 13, v33, v34);
  sentencepiece::util::Status::operator=((uint64_t *)this + 12, &v42);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v42);
  if (SHIBYTE(v55) < 0)
  {
    v35 = (void *)v54;
LABEL_82:
    operator delete(v35);
  }
LABEL_69:
  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v46, v47[0]);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v48, v49);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v51, v52);
}

void sub_191CFF6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20,uint64_t a21,char a22,_QWORD *a23,uint64_t a24,char a25,_QWORD *a26)
{
  uint64_t v26;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a15);
  if (*(char *)(v26 - 89) < 0)
    operator delete(*(void **)(v26 - 112));
  if (a14 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&a19, a20);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&a22, a23);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::PieceToByte(void *__src, size_t __len)
{
  unsigned __int8 v4;
  _QWORD *v5;
  void **v6;
  size_t v7;
  size_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  void *__dst[2];
  unint64_t v13;

  {
    sentencepiece::PieceToByte(std::string_view)::kMap = sentencepiece::PieceToByte(std::string_view)::$_0::operator()();
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (_QWORD *)sentencepiece::PieceToByte(std::string_view)::kMap;
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = (void *)__len;
    v13 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_9;
  }
  HIBYTE(v13) = __len;
  v6 = __dst;
  if (__len)
LABEL_9:
    memmove(v6, __src, __len);
  *((_BYTE *)v6 + __len) = 0;
  v9 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v5, (unsigned __int8 *)__dst);
  v10 = v9;
  if (SHIBYTE(v13) < 0)
  {
    operator delete(__dst[0]);
    if (v10)
      return v10[40];
  }
  else if (v9)
  {
    return v10[40];
  }
  return 0xFFFFFFFFLL;
}

void sub_191CFF8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sentencepiece::BuildTrie(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  unint64_t v32;
  _DWORD *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  char *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  char *v47;
  int v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v55;
  _BYTE *v56;
  void *__p;
  char *v58;
  char *v59;
  void *v60;
  char *v61;
  char *v62;

  if (a2[2])
  {
    v60 = 0;
    v61 = 0;
    v62 = 0;
    __p = 0;
    v58 = 0;
    v59 = 0;
    v5 = a2 + 1;
    v4 = (_QWORD *)*a2;
    do
    {
      v6 = v4[4];
      v7 = v61;
      if (v61 >= v62)
      {
        v9 = (v61 - (_BYTE *)v60) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v10 = (v62 - (_BYTE *)v60) >> 2;
        if (v10 <= v9 + 1)
          v10 = v9 + 1;
        if ((unint64_t)(v62 - (_BYTE *)v60) >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v62, v11);
        else
          v12 = 0;
        v13 = &v12[8 * v9];
        *(_QWORD *)v13 = v6;
        v8 = v13 + 8;
        v15 = (char *)v60;
        v14 = v61;
        if (v61 != v60)
        {
          do
          {
            v16 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          v14 = (char *)v60;
        }
        v60 = v13;
        v61 = v8;
        v62 = &v12[8 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v61 = v6;
        v8 = v7 + 8;
      }
      v61 = v8;
      v17 = v58;
      if (v58 >= v59)
      {
        v19 = (char *)__p;
        v20 = (v58 - (_BYTE *)__p) >> 2;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v22 = v59 - (_BYTE *)__p;
        if ((v59 - (_BYTE *)__p) >> 1 > v21)
          v21 = v22 >> 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
          v23 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v59, v23);
          v19 = (char *)__p;
          v17 = v58;
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[4 * v20];
        *(_DWORD *)v25 = *((_DWORD *)v4 + 12);
        v18 = v25 + 4;
        while (v17 != v19)
        {
          v26 = *((_DWORD *)v17 - 1);
          v17 -= 4;
          *((_DWORD *)v25 - 1) = v26;
          v25 -= 4;
        }
        __p = v25;
        v58 = v18;
        v59 = &v24[4 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_DWORD *)v58 = *((_DWORD *)v4 + 12);
        v18 = v17 + 4;
      }
      v58 = v18;
      v27 = (_QWORD *)v4[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v4[2];
          v29 = *v28 == (_QWORD)v4;
          v4 = v28;
        }
        while (!v29);
      }
      v4 = v28;
    }
    while (v28 != v5);
    if (Darts::DoubleArrayImpl<void,void,int,void>::build(a1, (v61 - (_BYTE *)v60) >> 3, (unint64_t)v60, 0, (unint64_t)__p, 0))
    {
      sentencepiece::util::Status::Status(a4, 13, "cannot build double-array.", 26);
    }
    else if (a3)
    {
      std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::vector(&v55, 0x400uLL);
      *a3 = 0;
      v30 = (_QWORD *)*a2;
      if ((_QWORD *)*a2 == v5)
        goto LABEL_81;
      v31 = (char *)v55;
      v32 = (v56 - (_BYTE *)v55) >> 4;
      v33 = (_DWORD *)a1[2];
      do
      {
        v34 = (_BYTE *)v30[4];
        v35 = v30[5];
        v36 = (*v33 >> 10 << ((*v33 >> 6) & 8));
        if (v35)
        {
          v37 = 0;
          v38 = 0;
          do
          {
            v39 = v34[v37];
            v40 = v36 ^ v39;
            v41 = v33[v40];
            if ((v41 & 0x800000FF) != (_DWORD)v39)
              break;
            v36 = v40 ^ (v41 >> 10 << ((v41 >> 6) & 8));
            if ((v41 & 0x100) != 0)
            {
              if (v38 < v32)
              {
                v42 = &v31[16 * v38];
                *(_DWORD *)v42 = v33[v36] & 0x7FFFFFFF;
                *((_QWORD *)v42 + 1) = v37 + 1;
              }
              ++v38;
            }
            ++v37;
          }
          while (v35 != v37);
        }
        else
        {
          v43 = *v34;
          if (*v34)
          {
            v38 = 0;
            v44 = 1;
            do
            {
              v45 = v36 ^ v43;
              v46 = v33[v45];
              if ((v46 & 0x800000FF) != v43)
                break;
              v36 = v45 ^ (v46 >> 10 << ((v46 >> 6) & 8));
              if ((v46 & 0x100) != 0)
              {
                if (v38 < v32)
                {
                  v47 = &v31[16 * v38];
                  *(_DWORD *)v47 = v33[v36] & 0x7FFFFFFF;
                  *((_QWORD *)v47 + 1) = v44;
                }
                ++v38;
              }
              v43 = v34[v44++];
            }
            while (v43);
          }
          else
          {
            LODWORD(v38) = 0;
          }
        }
        v48 = *a3;
        if (*a3 <= (int)v38)
          v48 = v38;
        *a3 = v48;
        v49 = (_QWORD *)v30[1];
        if (v49)
        {
          do
          {
            v50 = v49;
            v49 = (_QWORD *)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            v50 = (_QWORD *)v30[2];
            v29 = *v50 == (_QWORD)v30;
            v30 = v50;
          }
          while (!v29);
        }
        v30 = v50;
      }
      while (v50 != v5);
      if (!v48)
LABEL_81:
        sentencepiece::util::Status::Status(a4, 13, "no entry is found in the trie.", 30);
      else
        sentencepiece::util::Status::Status(a4);
      if (v55)
      {
        v56 = v55;
        operator delete(v55);
      }
    }
    else
    {
      sentencepiece::util::Status::Status(a4);
    }
    if (__p)
    {
      v58 = (char *)__p;
      operator delete(__p);
    }
    if (v60)
    {
      v61 = (char *)v60;
      operator delete(v60);
    }
  }
  else
  {
    sentencepiece::util::Status::Status(a4, 13, "no pieces are loaded.", 21);
  }
}

void sub_191CFFD98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t absl::make_unique<sentencepiece::normalizer::PrefixMatcher,std::set<std::string_view> &>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sentencepiece::normalizer::PrefixMatcher::PrefixMatcher(v4, a1);
  *a2 = v4;
  return result;
}

void sub_191CFFE40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::MemoryMappableString(sentencepiece::ModelInterface *this@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string *v8;
  std::string::size_type v9;
  int v10;
  int v11;
  int v12;
  std::string *p_p;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  const std::string::value_type *v18;
  uint64_t v19;
  std::string::size_type v20;
  std::string *v21;
  std::string *v22;
  std::string::size_type v23;
  uint64_t v24;
  const std::string::value_type *v25;
  char *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string *v29;
  std::string::size_type v30;
  std::string __p;
  std::string v32;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v32;
  else
    v4 = (std::string *)v32.__r_.__value_.__r.__words[0];
  LODWORD(v4->__r_.__value_.__l.__data_) = *((_DWORD *)this + 22);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v32;
  else
    v5 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    size = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v32;
  else
    v7 = (std::string *)v32.__r_.__value_.__r.__words[0];
  LODWORD(v7->__r_.__value_.__l.__data_) = *((_DWORD *)this + 23);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v32;
  else
    v8 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    v9 = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  sentencepiece::normalizer::PrefixMatcher::MemoryMappableString(*((sentencepiece::normalizer::PrefixMatcher **)this + 2), &v32);
  v10 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  v11 = v32.__r_.__value_.__r.__words[1];
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((v10 & 0x80u) == 0)
    v12 = v10;
  else
    v12 = v11;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(p_p->__r_.__value_.__l.__data_) = v12;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &__p;
  else
    v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v15 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v32;
  else
    v16 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    v17 = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v16, v17);
  sentencepiece::mmap_util::Padding(a2);
  v19 = *((_QWORD *)this + 4);
  v18 = (const std::string::value_type *)*((_QWORD *)this + 5);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  v20 = 4 * v19;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &__p;
  else
    v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v21->__r_.__value_.__l.__data_) = v20;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &__p;
  else
    v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v23 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::append(a2, v18, v20);
  sentencepiece::mmap_util::Padding(a2);
  v26 = (char *)this + 64;
  v24 = *((_QWORD *)this + 8);
  v25 = (const std::string::value_type *)*((_QWORD *)v26 + 1);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  v27 = 4 * v24;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &__p;
  else
    v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v28->__r_.__value_.__l.__data_) = v27;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &__p;
  else
    v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v30 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v29, v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::append(a2, v25, v27);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_191D00128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SplitIntoWords(unsigned __int8 *__s1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, unsigned __int8 ***a5@<X8>)
{
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 **v13;
  char *v14;
  char *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unsigned __int8 **v26;
  char *v27;
  char *v28;
  unsigned __int8 **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned __int8 **v36;
  char *v37;
  char *v38;
  unsigned __int8 **v39;
  unsigned __int8 **v40;
  int v41;
  _QWORD *v42;
  unsigned __int8 *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unsigned __int8 **v54;
  char *v55;
  char *v56;
  unsigned __int8 **v57;

  v6 = __s1;
  v8 = &__s1[a2];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((a3 & 1) == 0)
  {
    if (a2 < 1)
      return;
    v40 = 0;
    v41 = 0;
    v42 = a5 + 2;
    v43 = __s1;
    while (1)
    {
      v44 = asc_191D57358[(unint64_t)*v43 >> 4];
      if ((int)v8 - (int)v43 < v44)
        v44 = (_DWORD)v8 - (_DWORD)v43;
      v45 = v44;
      if (v44 == 3)
      {
        v46 = memcmp(v43, "▁", 3uLL);
        v47 = v46 == 0;
        if (v43 == v6)
          goto LABEL_62;
        if ((v41 & a4 & 1) == 0 && !v46)
        {
          v47 = 1;
LABEL_62:
          if ((unint64_t)v40 >= *v42)
          {
            v48 = ((char *)v40 - (char *)*a5) >> 4;
            if ((unint64_t)(v48 + 1) >> 60)
              std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
            v49 = *v42 - (_QWORD)*a5;
            v50 = v49 >> 3;
            if (v49 >> 3 <= (unint64_t)(v48 + 1))
              v50 = v48 + 1;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
              v51 = 0xFFFFFFFFFFFFFFFLL;
            else
              v51 = v50;
            v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>((uint64_t)(a5 + 2), v51);
            v54 = (unsigned __int8 **)&v52[16 * v48];
            *v54 = v43;
            v54[1] = 0;
            v56 = (char *)*a5;
            v55 = (char *)a5[1];
            v57 = v54;
            if (v55 != (char *)*a5)
            {
              do
              {
                *((_OWORD *)v57 - 1) = *((_OWORD *)v55 - 1);
                v57 -= 2;
                v55 -= 16;
              }
              while (v55 != v56);
              v55 = (char *)*a5;
            }
            v40 = v54 + 2;
            *a5 = v57;
            a5[1] = v54 + 2;
            a5[2] = (unsigned __int8 **)&v52[16 * v53];
            if (v55)
              operator delete(v55);
          }
          else
          {
            *v40 = v43;
            v40[1] = 0;
            v40 += 2;
          }
          a5[1] = v40;
          goto LABEL_76;
        }
        if ((v41 & 1) != 0)
        {
          v47 = v41 & (v46 == 0);
          goto LABEL_76;
        }
      }
      else if (v43 == v6)
      {
        v47 = 0;
        goto LABEL_62;
      }
      v47 = 0;
LABEL_76:
      *(v40 - 1) += v45;
      v43 += v45;
      v41 = v47;
      if (v43 >= v8)
        return;
    }
  }
  if (a2 >= 1)
  {
    v9 = a5 + 2;
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>((uint64_t)(a5 + 2), 1uLL);
    v12 = (unsigned __int8 **)&v10[2 * v11];
    *v10 = v6;
    v10[1] = 0;
    v13 = (unsigned __int8 **)(v10 + 2);
    v15 = (char *)*a5;
    v14 = (char *)a5[1];
    if (v14 != (char *)*a5)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v14 - 1);
        v10 -= 2;
        v14 -= 16;
      }
      while (v14 != v15);
      v14 = (char *)*a5;
    }
    *a5 = (unsigned __int8 **)v10;
    a5[1] = v13;
    a5[2] = v12;
    if (v14)
      operator delete(v14);
    v16 = 0;
    a5[1] = v13;
    do
    {
      v17 = asc_191D57358[(unint64_t)*v6 >> 4];
      if ((int)v8 - (int)v6 < v17)
        v17 = (_DWORD)v8 - (_DWORD)v6;
      v18 = v17;
      if (v17 == 3)
      {
        v19 = memcmp(v6, "▁", 3uLL) == 0;
        if (v19)
          goto LABEL_18;
      }
      else
      {
        v19 = 0;
      }
      if ((v16 & a4) != 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          v20 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v20 + 1) >> 60)
            std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
          v21 = *v9 - (_QWORD)*a5;
          v22 = v21 >> 3;
          if (v21 >> 3 <= (unint64_t)(v20 + 1))
            v22 = v20 + 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>((uint64_t)(a5 + 2), v23);
          v26 = (unsigned __int8 **)&v24[16 * v20];
          *v26 = v6;
          v26[1] = 0;
          v28 = (char *)*a5;
          v27 = (char *)a5[1];
          v29 = v26;
          if (v27 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v29 - 1) = *((_OWORD *)v27 - 1);
              v29 -= 2;
              v27 -= 16;
            }
            while (v27 != v28);
            v27 = (char *)*a5;
          }
          v13 = v26 + 2;
          *a5 = v29;
          a5[1] = v26 + 2;
          a5[2] = (unsigned __int8 **)&v24[16 * v25];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        v16 = 0;
        a5[1] = v13;
        goto LABEL_31;
      }
LABEL_18:
      v16 = v19;
LABEL_31:
      *(v13 - 1) += v18;
      v6 += v18;
      if (v6 < v8 && v19 && (a4 & 1) == 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          v30 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v30 + 1) >> 60)
            std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
          v31 = *v9 - (_QWORD)*a5;
          v32 = v31 >> 3;
          if (v31 >> 3 <= (unint64_t)(v30 + 1))
            v32 = v30 + 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
            v33 = 0xFFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>((uint64_t)(a5 + 2), v33);
          v36 = (unsigned __int8 **)&v34[16 * v30];
          *v36 = v6;
          v36[1] = 0;
          v38 = (char *)*a5;
          v37 = (char *)a5[1];
          v39 = v36;
          if (v37 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v39 - 1) = *((_OWORD *)v37 - 1);
              v39 -= 2;
              v37 -= 16;
            }
            while (v37 != v38);
            v37 = (char *)*a5;
          }
          v13 = v36 + 2;
          *a5 = v39;
          a5[1] = v36 + 2;
          a5[2] = (unsigned __int8 **)&v34[16 * v35];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        a5[1] = v13;
      }
    }
    while (v6 < v8);
  }
}

void sub_191D005E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::ByteToPiece@<X0>(sentencepiece *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;

  v3 = this;
  return absl::StrFormat<unsigned char>("<0x%02X>", &v3, a2);
}

uint64_t absl::StrFormat<unsigned char>@<X0>(char *__format@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  char *v8;

  v6 = snprintf(0, 0, __format, *a2);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  std::string::resize((std::string *)a3, v6, 0);
  v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (char *)a3;
  else
    v8 = *(char **)a3;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a3 + 8);
  return snprintf(v8, v7 + 1, __format, *a2);
}

void sub_191D006D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::PieceToByte(std::string_view)::$_0::operator()()
{
  uint64_t v0;
  int v1;
  void *__p[2];
  char v4;
  void **v5;

  v0 = operator new();
  v1 = 0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_DWORD *)(v0 + 32) = 1065353216;
  do
  {
    LOBYTE(v5) = v1;
    absl::StrFormat<unsigned char>("<0x%02X>", (unsigned __int8 *)&v5, (uint64_t)__p);
    v5 = __p;
    *((_BYTE *)std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v5)+ 40) = v1;
    if (v4 < 0)
      operator delete(__p[0]);
    ++v1;
  }
  while (v1 != 256);
  return v0;
}

void sub_191D007B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Darts::DoubleArrayImpl<void,void,int,void>::build(_QWORD *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, void (*a6)(unint64_t, uint64_t))
{
  uint64_t v9;
  size_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  int *v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  void (*v19)(unint64_t, uint64_t);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  unint64_t v25[4];

  v25[0] = a2;
  v25[1] = a3;
  v25[2] = a4;
  v25[3] = a5;
  v19 = a6;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  Darts::Details::DoubleArrayBuilder::build<int>(&v19, v25);
  v9 = *((_QWORD *)&v20 + 1);
  v10 = 4 * *((_QWORD *)&v20 + 1);
  v11 = (_DWORD *)operator new[]();
  v12 = v11;
  if (v9)
    bzero(v11, v10);
  v13 = *((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v14 = (int *)v20;
    v15 = v12;
    do
    {
      v16 = *v14++;
      *v15++ = v16;
      --v13;
    }
    while (v13);
  }
  a1[1] = 0;
  a1[2] = 0;
  v17 = a1[3];
  if (v17)
  {
    MEMORY[0x19401E970](v17, 0x1000C8052888210);
    a1[3] = 0;
  }
  a1[1] = v9;
  a1[2] = v12;
  a1[3] = v12;
  if (a6)
    a6(a2 + 1, a2 + 1);
  Darts::Details::DoubleArrayBuilder::~DoubleArrayBuilder((Darts::Details::DoubleArrayBuilder *)&v19);
  return 0;
}

void sub_191D008E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Darts::Details::DoubleArrayBuilder::~DoubleArrayBuilder((Darts::Details::DoubleArrayBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::ModelInterface::status@<X0>(sentencepiece::ModelInterface *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  return sentencepiece::util::Status::Status(a2, (sentencepiece::ModelInterface *)((char *)this + 96));
}

uint64_t sentencepiece::ModelInterface::prefix_matcher(sentencepiece::ModelInterface *this)
{
  return *((_QWORD *)this + 2);
}

void sentencepiece::ModelInterface::NBestEncode(sentencepiece::logging *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v9 = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.h", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v9);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_191D009D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::SampleEncode(sentencepiece::logging *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v9 = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.h", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v9);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_191D00AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::SampleEncodeAndScore(sentencepiece::logging *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  void *__p;
  void *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    LOBYTE(__p) = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.h", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&__p);
  }
  __p = 0;
  v11 = 0;
  v13 = 0;
  v12 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v9 = (char *)operator new(0x20uLL);
  *a2 = v9;
  a2[1] = v9;
  a2[2] = v9 + 32;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v14, (uint64_t)v9);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_191D00C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = v14;
  *(_QWORD *)(v13 + 8) = v15;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float sentencepiece::ModelInterface::CalculateEntropy(sentencepiece::logging *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v8;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v8 = 0;
    v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.h", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"(", 1);
    v2 = (_QWORD *)std::ostream::operator<<();
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)") ", 2);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"LOG(", 4);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"ERROR", 5);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v8);
  }
  return 0.0;
}

void sub_191D00D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::ModelInterface::IsSampleEncodeAvailable(sentencepiece::ModelInterface *this)
{
  return 0;
}

uint64_t sentencepiece::ModelInterface::IsNBestEncodeAvailable(sentencepiece::ModelInterface *this)
{
  return 0;
}

uint64_t sentencepiece::ModelInterface::IsSampleEncodeAndScoreAvailable(sentencepiece::ModelInterface *this)
{
  return 0;
}

uint64_t sentencepiece::ModelInterface::IsCalculateEntropyAvailable(sentencepiece::ModelInterface *this)
{
  return 0;
}

uint64_t sentencepiece::ModelInterface::IdToPiece(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::GetPieceSize(sentencepiece::ModelInterface *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sentencepiece::ModelInterface::GetScore(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::IsUnknown(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::IsControl(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 120))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::IsUnused(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 128))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::IsUserDefined(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::IsByte(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::ByteFallbackEnabled(sentencepiece::ModelInterface *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

BOOL sentencepiece::ModelInterface::VerifyOutputsEquivalent(int a1, void *__s1, size_t a3, void *__s2, uint64_t a5)
{
  return a3 == a5 && memcmp(__s1, __s2, a3) == 0;
}

void sentencepiece::error::Die::~Die(sentencepiece::error::Die *this)
{
  const std::locale::facet *v2;
  sentencepiece::error *v3;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x1E0DE4A50] + *(_QWORD *)(*MEMORY[0x1E0DE4A50] - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  v3 = (sentencepiece::error *)std::ostream::flush();
  if (*(_BYTE *)this)
    sentencepiece::error::Abort(v3);
}

void sub_191D00EA8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  __clang_call_terminate(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_191D00F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_BYTE *)i + 40) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<long,std::hash<long>,std::equal_to<long>,std::allocator<long>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_191D0120C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>((char *)v4, *(__int128 **)v6, *(__int128 **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_191D012D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_191D0134C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 32);
      v3 -= 32;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 24) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

void std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 32);
      v4 -= 32;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 24) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void Darts::DoubleArrayImpl<void,void,int,void>::~DoubleArrayImpl(_QWORD *a1)
{
  uint64_t v2;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2DF1540;
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x19401E970](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  JUMPOUT(0x19401E994);
}

uint64_t **std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    JUMPOUT(0x19401E994);
  }
  return result;
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

_OWORD *std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__emplace_unique_key_args<std::string_view,std::pair<std::string_view const,int> const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

_QWORD *std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (uint64_t)(v4 + 4);
        if (!std::less<std::string_view>::operator()[abi:ne180100](v7, a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string_view>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t std::less<std::string_view>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  size_t v4;
  const void *v5;
  size_t v6;
  size_t v7;
  int v8;
  unsigned int v9;

  v3 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(const void **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  if (v6 >= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(a3 + 8);
  v8 = memcmp(v3, v5, v7);
  if (v4 < v6)
    v9 = -1;
  else
    v9 = 1;
  if (v4 == v6)
    v9 = 0;
  if (v8)
    v9 = v8;
  return v9 >> 31;
}

uint64_t *std::__tree<std::string_view>::__emplace_unique_key_args<std::string_view,std::string_view>(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t std::__find_BOOL[abi:ne180100]<false,std::vector<BOOL>,false>@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = *(unsigned int *)(result + 8);
  v4 = *(_QWORD **)result;
  if (!(_DWORD)v3)
    goto LABEL_9;
  v5 = (64 - v3);
  if (v5 >= a2)
    v6 = a2;
  else
    v6 = (64 - v3);
  if (((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4) != 0)
  {
    v7 = __rbit64((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4);
LABEL_22:
    *(_QWORD *)a3 = v4;
    *(_DWORD *)(a3 + 8) = __clz(v7);
    return result;
  }
  if (v5 < a2)
  {
    a2 -= v6;
    *(_QWORD *)result = ++v4;
LABEL_9:
    if (a2 < 0x40)
    {
LABEL_12:
      if (!a2 || (v8 = (0xFFFFFFFFFFFFFFFFLL >> -(char)a2) & ~*v4) == 0)
      {
        *(_QWORD *)a3 = v4;
        *(_DWORD *)(a3 + 8) = a2;
        return result;
      }
    }
    else
    {
      while (*v4 == -1)
      {
        *(_QWORD *)result = ++v4;
        a2 -= 64;
        if (a2 <= 0x3F)
          goto LABEL_12;
      }
      v8 = ~*v4;
    }
    v7 = __rbit64(v8);
    goto LABEL_22;
  }
  v9 = v3 + a2 - 63;
  if (v9 < 0)
    v9 = v3 + a2;
  v10 = v9 >> 6;
  v11 = (v3 + a2) >> 6;
  if ((a2 & 0x8000000000000000) != 0)
    v11 = v10;
  *(_QWORD *)a3 = &v4[v11];
  *(_DWORD *)(a3 + 8) = ((_BYTE)v3 + (_BYTE)a2) & 0x3F;
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void Darts::Details::DoubleArrayBuilder::build<int>(void (**a1)(unint64_t, uint64_t), unint64_t *a2)
{
  _OWORD v3[3];
  _OWORD v4[6];
  _OWORD v5[3];
  uint64_t v6;

  if (a2[3])
  {
    v6 = 0;
    memset(v5, 0, sizeof(v5));
    memset(v4, 0, sizeof(v4));
    memset(v3, 0, sizeof(v3));
    Darts::Details::DoubleArrayBuilder::build_dawg<int>(a1, a2, (Darts::Details::DawgBuilder *)v3);
    Darts::Details::DoubleArrayBuilder::build_from_dawg((Darts::Details::DoubleArrayBuilder *)a1, (const Darts::Details::DawgBuilder *)v3);
    Darts::Details::AutoPool<Darts::Details::DawgNode>::clear((uint64_t *)v3);
    Darts::Details::AutoPool<Darts::Details::DawgUnit>::clear((uint64_t *)&v3[1] + 1);
    Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)v4);
    Darts::Details::BitVector::clear((Darts::Details::BitVector *)((char *)&v4[1] + 8));
    Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)&v4[4] + 1);
    Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)v5);
    Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)&v5[1] + 1);
    v6 = 0;
    Darts::Details::DawgBuilder::~DawgBuilder((Darts::Details::DawgBuilder *)v3);
  }
  else
  {
    Darts::Details::DoubleArrayBuilder::build_from_keyset<int>((uint64_t)a1, a2);
  }
}

void sub_191D01AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Darts::Details::DawgBuilder::~DawgBuilder((Darts::Details::DawgBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *Darts::Details::AutoPool<unsigned char>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<unsigned char>::clear(a1);
  if (*a1)
  {
    MEMORY[0x19401E970](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t Darts::Details::AutoPool<unsigned char>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<unsigned char>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x19401E970](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *Darts::Details::AutoPool<unsigned char>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned char>::resize_buf(result, a2);
    v4 = v3[1];
  }
  if (v4 < a2)
    v3[1] = a2;
  return result;
}

uint64_t Darts::Details::AutoPool<unsigned char>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_BYTE *)(v5 + i) = *(_BYTE *)(result + i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x19401E970);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

void Darts::Details::Exception::~Exception(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x19401E994);
}

const char *Darts::Details::Exception::what(Darts::Details::Exception *this)
{
  if (*((_QWORD *)this + 1))
    return (const char *)*((_QWORD *)this + 1);
  else
    return "";
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::clear(a1);
  if (*a1)
  {
    MEMORY[0x19401E970](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x19401E970](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;

  v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    v4 = a2;
  }
  if (a1[2] < a2)
  {
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize_buf(a1, a2);
    v4 = a1[1];
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

uint64_t Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x19401E970);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t Darts::Details::DoubleArrayBuilder::build_dawg<int>(void (**a1)(unint64_t, uint64_t), unint64_t *a2, Darts::Details::DawgBuilder *this)
{
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  unint64_t v11;
  int v12;
  int *v13;
  char v14;
  int v15;
  int v16;

  Darts::Details::DawgBuilder::init(this);
  if (*a2)
  {
    v6 = 0;
    do
    {
      v7 = a2[2];
      v8 = *(const char **)(a2[1] + 8 * v6);
      if (v7)
      {
        v9 = *(_QWORD *)(v7 + 8 * v6);
      }
      else
      {
        while (v8[v7++])
          ;
        v9 = v7 - 1;
      }
      v11 = a2[3];
      if (v11)
        v12 = *(_DWORD *)(v11 + 4 * v6);
      else
        v12 = v6;
      Darts::Details::DawgBuilder::insert(this, v8, v9, v12);
      ++v6;
      if (*a1)
        (*a1)(v6, *a2 + 1);
    }
    while (v6 < *a2);
  }
  Darts::Details::DawgBuilder::flush((uint64_t)this, 0);
  v13 = *(int **)this;
  v14 = *(_BYTE *)(*(_QWORD *)this + 8);
  v15 = **(_DWORD **)this;
  if (v14)
    v16 = (2 * *((unsigned __int8 *)v13 + 9)) | (4 * v15);
  else
    v16 = 2 * v15;
  **((_DWORD **)this + 3) = v16 | *((unsigned __int8 *)v13 + 10);
  **((_BYTE **)this + 6) = v14;
  Darts::Details::AutoPool<Darts::Details::DawgNode>::clear((uint64_t *)this);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 15);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 18);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 21);
  return Darts::Details::BitVector::build((Darts::Details::DawgBuilder *)((char *)this + 72));
}

uint64_t Darts::Details::DoubleArrayBuilder::build_from_dawg(Darts::Details::DoubleArrayBuilder *this, const Darts::Details::DawgBuilder *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  char v23;
  int j;
  int *v25;
  _DWORD *v26;
  uint64_t v27;
  unsigned int v28;
  int *v29;
  int v30;
  uint64_t result;
  uint64_t v32;

  v4 = *((_QWORD *)a2 + 4);
  v5 = 1;
  do
  {
    v6 = v5;
    v5 *= 2;
  }
  while (v6 < v4);
  v7 = (unsigned int **)((char *)this + 8);
  if (*((_QWORD *)this + 3) < v6)
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize_buf((uint64_t *)this + 1, v6);
  v8 = operator new[]();
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v8;
  if (v9)
    MEMORY[0x19401E970](v9, 0x1000C8052888210);
  v10 = *((_QWORD *)a2 + 13);
  if (v10)
    bzero(*((void **)this + 8), 4 * v10);
  v11 = operator new[]();
  for (i = 0; i != 49152; i += 12)
  {
    v13 = v11 + i;
    *(_WORD *)(v13 + 8) = 0;
    *(_QWORD *)v13 = 0;
  }
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v11;
  if (v14)
    MEMORY[0x19401E970](v14, 0x1000C80CBA68D63);
  if (!*((_QWORD *)this + 2))
    Darts::Details::DoubleArrayBuilder::expand_units(this);
  v15 = (int *)*((_QWORD *)this + 4);
  v16 = v15[1];
  if (!*((_DWORD *)this + 18))
  {
    *((_DWORD *)this + 18) = v16;
    if (!v16)
      *((_DWORD *)this + 18) = *((_QWORD *)this + 2);
  }
  v17 = *v15;
  v15[3 * (*v15 & 0xFFF) + 1] = v16;
  v15[3 * (v15[1] & 0xFFF)] = v17;
  *((_WORD *)v15 + 4) = 257;
  **v7 = **v7 & 0x80000100 | 0x400;
  if (**((_DWORD **)a2 + 3) >= 4u)
  {
    Darts::Details::DoubleArrayBuilder::build_from_dawg(this, a2, 0, 0);
    v15 = (int *)*((_QWORD *)this + 4);
  }
  v18 = *((_QWORD *)this + 2) >> 8;
  if (v18 <= 0x10)
    v19 = 0;
  else
    v19 = v18 - 16;
  v32 = *((_QWORD *)this + 2) >> 8;
  if (v19 != (_DWORD)v18)
  {
    v20 = v19 << 8;
    do
    {
      v21 = 0;
      v22 = (v19 << 8);
      while (1)
      {
        v23 = v20 + v21;
        if (!BYTE1(v15[3 * ((v20 + v21) & 0xFFF) + 2]))
          break;
        if (++v21 == 256)
        {
          v23 = 0;
          break;
        }
      }
      for (j = 0; j != 256; ++j)
      {
        if (!LOBYTE(v15[3 * (v22 & 0xFFF) + 2]))
        {
          if (*((_QWORD *)this + 2) <= v22)
          {
            Darts::Details::DoubleArrayBuilder::expand_units(this);
            v15 = (int *)*((_QWORD *)this + 4);
          }
          v25 = &v15[3 * (v22 & 0xFFF)];
          v28 = v25[1];
          v26 = v25 + 1;
          v27 = v28;
          if (v22 == *((_DWORD *)this + 18))
          {
            *((_DWORD *)this + 18) = v27;
            if (v22 == v27)
              *((_DWORD *)this + 18) = *((_QWORD *)this + 2);
          }
          v29 = &v15[3 * (v22 & 0xFFF)];
          v30 = *v29;
          v15[3 * (v30 & 0xFFF) + 1] = v27;
          v15[3 * (*v26 & 0xFFF)] = v30;
          *((_BYTE *)v29 + 8) = 1;
          LOBYTE((*v7)[v22]) = v23 ^ (v20 + j);
        }
        ++v22;
      }
      ++v19;
      v20 += 256;
    }
    while (v19 != (_DWORD)v32);
  }
  if (v15)
  {
    MEMORY[0x19401E970](v15, 0x1000C80CBA68D63);
    *((_QWORD *)this + 4) = 0;
  }
  Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)this + 5);
  result = *((_QWORD *)this + 8);
  if (result)
  {
    result = MEMORY[0x19401E970](result, 0x1000C8052888210);
    *((_QWORD *)this + 8) = 0;
  }
  return result;
}

uint64_t Darts::Details::DoubleArrayBuilder::build_from_keyset<int>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int **v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  char v20;
  int j;
  int *v22;
  _DWORD *v23;
  uint64_t v24;
  unsigned int v25;
  int *v26;
  int v27;
  uint64_t v29;

  v4 = *a2;
  v5 = 1;
  do
  {
    v6 = v5;
    v5 *= 2;
  }
  while (v6 < v4);
  v7 = (unsigned int **)(a1 + 8);
  if (*(_QWORD *)(a1 + 24) < v6)
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize_buf((uint64_t *)(a1 + 8), v6);
  v8 = operator new[]();
  for (i = 0; i != 49152; i += 12)
  {
    v10 = v8 + i;
    *(_WORD *)(v10 + 8) = 0;
    *(_QWORD *)v10 = 0;
  }
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  if (v11)
    MEMORY[0x19401E970](v11, 0x1000C80CBA68D63);
  if (!*(_QWORD *)(a1 + 16))
    Darts::Details::DoubleArrayBuilder::expand_units((Darts::Details::DoubleArrayBuilder *)a1);
  v12 = *(int **)(a1 + 32);
  v13 = v12[1];
  if (!*(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 72) = v13;
    if (!v13)
      *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
  }
  v14 = *v12;
  v12[3 * (*v12 & 0xFFF) + 1] = v13;
  v12[3 * (v12[1] & 0xFFF)] = v14;
  *((_WORD *)v12 + 4) = 257;
  **v7 = **v7 & 0x80000100 | 0x400;
  if (*a2)
  {
    Darts::Details::DoubleArrayBuilder::build_from_keyset<int>(a1, a2, 0, *a2, 0, 0);
    v12 = *(int **)(a1 + 32);
  }
  v15 = *(_QWORD *)(a1 + 16) >> 8;
  if (v15 <= 0x10)
    v16 = 0;
  else
    v16 = v15 - 16;
  v29 = *(_QWORD *)(a1 + 16) >> 8;
  if (v16 != (_DWORD)v15)
  {
    v17 = v16 << 8;
    do
    {
      v18 = 0;
      v19 = (v16 << 8);
      while (1)
      {
        v20 = v17 + v18;
        if (!BYTE1(v12[3 * ((v17 + v18) & 0xFFF) + 2]))
          break;
        if (++v18 == 256)
        {
          v20 = 0;
          break;
        }
      }
      for (j = 0; j != 256; ++j)
      {
        if (!LOBYTE(v12[3 * (v19 & 0xFFF) + 2]))
        {
          if (*(_QWORD *)(a1 + 16) <= v19)
          {
            Darts::Details::DoubleArrayBuilder::expand_units((Darts::Details::DoubleArrayBuilder *)a1);
            v12 = *(int **)(a1 + 32);
          }
          v22 = &v12[3 * (v19 & 0xFFF)];
          v25 = v22[1];
          v23 = v22 + 1;
          v24 = v25;
          if (v19 == *(_DWORD *)(a1 + 72))
          {
            *(_DWORD *)(a1 + 72) = v24;
            if (v19 == v24)
              *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          }
          v26 = &v12[3 * (v19 & 0xFFF)];
          v27 = *v26;
          v12[3 * (v27 & 0xFFF) + 1] = v24;
          v12[3 * (*v23 & 0xFFF)] = v27;
          *((_BYTE *)v26 + 8) = 1;
          LOBYTE((*v7)[v19]) = v20 ^ (v17 + j);
        }
        ++v19;
      }
      ++v16;
      v17 += 256;
    }
    while (v16 != (_DWORD)v29);
  }
  if (v12)
  {
    MEMORY[0x19401E970](v12, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 32) = 0;
  }
  return Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)(a1 + 40));
}

uint64_t *Darts::Details::AutoStack<unsigned int>::~AutoStack(uint64_t *a1)
{
  Darts::Details::AutoPool<unsigned int>::clear(a1);
  return Darts::Details::AutoPool<unsigned int>::~AutoPool(a1);
}

uint64_t Darts::Details::AutoPool<unsigned int>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<unsigned int>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x19401E970](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *Darts::Details::AutoPool<unsigned int>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned int>::resize_buf(result, a2);
    v4 = v3[1];
  }
  if (v4 < a2)
    v3[1] = a2;
  return result;
}

uint64_t Darts::Details::AutoPool<unsigned int>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x19401E970);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *Darts::Details::AutoPool<unsigned int>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<unsigned int>::clear(a1);
  if (*a1)
  {
    MEMORY[0x19401E970](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

void Darts::Details::BitVector::~BitVector(Darts::Details::BitVector *this)
{
  uint64_t v2;

  Darts::Details::BitVector::clear(this);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    MEMORY[0x19401E970](v2, 0x1000C8052888210);
    *((_QWORD *)this + 3) = 0;
  }
  Darts::Details::AutoPool<unsigned int>::~AutoPool((uint64_t *)this);
}

uint64_t Darts::Details::BitVector::clear(Darts::Details::BitVector *this)
{
  uint64_t result;

  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this);
  result = *((_QWORD *)this + 3);
  if (result)
  {
    result = MEMORY[0x19401E970](result, 0x1000C8052888210);
    *((_QWORD *)this + 3) = 0;
  }
  return result;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgUnit>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<Darts::Details::DawgUnit>::clear(a1);
  if (*a1)
  {
    MEMORY[0x19401E970](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t Darts::Details::AutoPool<Darts::Details::DawgUnit>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x19401E970](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;

  v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    v4 = a2;
  }
  if (a1[2] < a2)
  {
    Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize_buf(a1, a2);
    v4 = a1[1];
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

uint64_t Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x19401E970);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgNode>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<Darts::Details::DawgNode>::clear(a1);
  if (*a1)
  {
    MEMORY[0x19401E970](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t Darts::Details::AutoPool<Darts::Details::DawgNode>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<Darts::Details::DawgNode>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x19401E970](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgNode>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)Darts::Details::AutoPool<Darts::Details::DawgNode>::resize_buf(result, a2);
    v4 = v3[1];
  }
  for (; v4 < a2; v4 = v3[1])
  {
    v3[1] = v4 + 1;
    v5 = *v3 + 12 * v4;
    *(_DWORD *)(v5 + 7) = 0;
    *(_QWORD *)v5 = 0;
  }
  return result;
}

uint64_t Darts::Details::AutoPool<Darts::Details::DawgNode>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    v8 = 0;
    do
    {
      v9 = v5 + v8;
      v10 = *(_QWORD *)(result + v8);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(result + v8 + 8);
      *(_QWORD *)v9 = v10;
      v8 += 12;
      --v7;
    }
    while (v7);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x19401E970);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *Darts::Details::DawgBuilder::init(Darts::Details::DawgBuilder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;

  v7 = 0;
  Darts::Details::AutoPool<unsigned int>::resize((uint64_t *)this + 15, 0x400uLL, &v7);
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    v3 = *(_QWORD *)this + 12 * *(unsigned int *)(*((_QWORD *)this + 21) + 4 * v2 - 4);
    *(_DWORD *)(v3 + 7) = 0;
    *(_QWORD *)v3 = 0;
    --*((_QWORD *)this + 22);
  }
  else
  {
    Darts::Details::AutoPool<Darts::Details::DawgNode>::append((uint64_t *)this);
  }
  Darts::Details::BitVector::append((uint64_t *)this + 9);
  Darts::Details::AutoPool<Darts::Details::DawgUnit>::append((uint64_t *)this + 3);
  v4 = *((_QWORD *)this + 7);
  if (v4 == *((_QWORD *)this + 8))
  {
    Darts::Details::AutoPool<unsigned char>::resize_buf((uint64_t *)this + 6, v4 + 1);
    v4 = *((_QWORD *)this + 7);
  }
  *((_QWORD *)this + 7) = v4 + 1;
  *((_QWORD *)this + 24) = 1;
  *(_BYTE *)(*(_QWORD *)this + 8) = -1;
  v6 = 0;
  return Darts::Details::AutoPool<unsigned int>::append((uint64_t *)this + 18, &v6);
}

_QWORD *Darts::Details::DawgBuilder::insert(_QWORD *this, const char *a2, unint64_t a3, int a4)
{
  int v5;
  _QWORD *v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  unsigned int v21;
  _QWORD *exception;
  const char *v23;
  int v24;
  unsigned int v25;

  if (a4 < 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1106: exception: failed to"
          " insert key: negative value";
    goto LABEL_27;
  }
  if (!a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1108: exception: failed to"
          " insert key: zero-length key";
LABEL_27:
    *exception = &off_1E2DF1560;
    exception[1] = v23;
  }
  v5 = a4;
  v7 = this;
  v8 = 0;
  v9 = 0;
  v10 = *this;
  while (1)
  {
    v11 = *(_DWORD *)(v10 + 12 * v9);
    if (!v11)
      goto LABEL_12;
    v12 = a2[v8];
    if (v8 < a3 && !a2[v8])
    {
      exception = __cxa_allocate_exception(0x10uLL);
      v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1122: exception: failed "
            "to insert key: invalid null character";
      goto LABEL_27;
    }
    v13 = *(unsigned __int8 *)(v10 + 12 * v11 + 8);
    if (v12 < v13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1127: exception: failed "
            "to insert key: wrong key order";
      goto LABEL_27;
    }
    if (v12 > v13)
      break;
    ++v8;
    v9 = *(_DWORD *)(v10 + 12 * v9);
    if (v8 > a3)
      return this;
  }
  *(_BYTE *)(v10 + 12 * v11 + 10) = 1;
  this = (_QWORD *)Darts::Details::DawgBuilder::flush((uint64_t)this, v11);
LABEL_12:
  if (v8 <= a3)
  {
    v24 = v5;
    do
    {
      if (v8 >= a3)
        v14 = 0;
      else
        v14 = a2[v8];
      v25 = 0;
      v15 = v7[22];
      if (v15)
      {
        v16 = *(_DWORD *)(v7[21] + 4 * v15 - 4);
        v17 = *v7 + 12 * v16;
        *(_DWORD *)(v17 + 7) = 0;
        *(_QWORD *)v17 = 0;
        --v7[22];
      }
      else
      {
        v16 = *((_DWORD *)v7 + 2);
        Darts::Details::AutoPool<Darts::Details::DawgNode>::append(v7);
      }
      v25 = v16;
      v18 = *v7;
      v19 = (int *)(*v7 + 12 * v9);
      v20 = *v19;
      if (!*v19)
        *(_BYTE *)(v18 + 12 * v16 + 9) = 1;
      *(_DWORD *)(v18 + 12 * v16 + 4) = v20;
      v21 = v25;
      *(_BYTE *)(v18 + 12 * v25 + 8) = v14;
      *v19 = v21;
      this = Darts::Details::AutoPool<unsigned int>::append(v7 + 18, &v25);
      v9 = v25;
      ++v8;
    }
    while (v8 <= a3);
    v5 = v24;
  }
  *(_DWORD *)(*v7 + 12 * v9) = v5;
  return this;
}

uint64_t *Darts::Details::AutoPool<unsigned int>::resize(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v5 = result;
  v6 = result[1];
  if (v6 > a2)
  {
    result[1] = a2;
    v6 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned int>::resize_buf(result, a2);
    v6 = v5[1];
  }
  if (v6 < a2)
  {
    v7 = *v5;
    do
      *(_DWORD *)(v7 + 4 * v6++) = *a3;
    while (a2 != v6);
    v5[1] = a2;
  }
  return result;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgNode>::append(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  v2 = result[1];
  if (v2 == result[2])
  {
    result = (uint64_t *)Darts::Details::AutoPool<Darts::Details::DawgNode>::resize_buf(result, v2 + 1);
    v2 = v1[1];
  }
  v1[1] = v2 + 1;
  v3 = *v1 + 12 * v2;
  *(_DWORD *)(v3 + 7) = 0;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t *Darts::Details::BitVector::append(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;

  v1 = this;
  v2 = this[5];
  if ((v2 & 0x1F) == 0)
  {
    v3 = 0;
    this = Darts::Details::AutoPool<unsigned int>::append(this, &v3);
    v2 = v1[5];
  }
  v1[5] = v2 + 1;
  return this;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgUnit>::append(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = result;
  v2 = result[1];
  if (v2 == result[2])
  {
    result = (uint64_t *)Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize_buf(result, v2 + 1);
    v2 = v1[1];
  }
  v1[1] = v2 + 1;
  *(_DWORD *)(*v1 + 4 * v2) = 0;
  return result;
}

uint64_t *Darts::Details::AutoPool<unsigned int>::append(uint64_t *result, _DWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 == result[2])
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned int>::resize_buf(result, v4 + 1);
    v4 = v3[1];
  }
  v3[1] = v4 + 1;
  *(_DWORD *)(*v3 + 4 * v4) = *a2;
  return result;
}

uint64_t Darts::Details::DawgBuilder::flush(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned int v37;
  int v38;
  unsigned int v39;

  v2 = this;
  v3 = *(_QWORD *)(this + 152) - 1;
  v4 = *(_DWORD *)(*(_QWORD *)(this + 144) + 4 * v3);
  if (v4 != a2)
  {
    v35 = (uint64_t *)(this + 120);
    v5 = (_QWORD *)(this + 24);
    v6 = (_QWORD *)(this + 72);
    while (1)
    {
      *(_QWORD *)(v2 + 152) = v3;
      v7 = *(_QWORD *)(v2 + 128);
      if (*(_QWORD *)(v2 + 192) >= v7 - (v7 >> 2))
      {
        v8 = 2 * v7;
        Darts::Details::AutoPool<unsigned int>::clear(v35);
        v38 = 0;
        Darts::Details::AutoPool<unsigned int>::resize(v35, v8, &v38);
        v9 = *(_QWORD *)(v2 + 32);
        if (v9 >= 2)
        {
          v10 = *(_QWORD *)(v2 + 48);
          for (i = 1; i != v9; ++i)
          {
            if (!*(_BYTE *)(v10 + i) || (*(_DWORD *)(*v5 + 4 * i) & 2) != 0)
            {
              v12 = 0;
              if ((_DWORD)i)
              {
                v13 = i;
                do
                {
                  v14 = *(_DWORD *)(*v5 + 4 * v13);
                  v15 = (v14 ^ ~(*(unsigned __int8 *)(v10 + v13) << 24)) + (v14 << 15);
                  v16 = 2057 * ((5 * (v15 ^ (v15 >> 12))) ^ ((5 * (v15 ^ (v15 >> 12))) >> 4));
                  v12 ^= HIWORD(v16) ^ v16;
                  v17 = __CFADD__(v13++, 1);
                }
                while (!v17 && (v14 & 1) != 0);
              }
              v18 = *(_QWORD *)(v2 + 120);
              do
              {
                v19 = (unint64_t)v12 % *(_QWORD *)(v2 + 128);
                v12 = v19 + 1;
              }
              while (*(_DWORD *)(v18 + 4 * v19));
              *(_DWORD *)(v18 + 4 * v19) = i;
            }
          }
        }
      }
      v20 = 0;
      if (v4)
      {
        v21 = v4;
        do
        {
          ++v20;
          v21 = *(_DWORD *)(*(_QWORD *)v2 + 12 * v21 + 4);
        }
        while (v21);
      }
      v37 = 0;
      this = Darts::Details::DawgBuilder::find_node((Darts::Details::DawgBuilder *)v2, v4, &v37);
      if ((_DWORD)this)
      {
        v22 = this;
        *(_DWORD *)(*v6 + 4 * (this >> 5)) |= 1 << this;
        if (v4)
          goto LABEL_22;
        goto LABEL_23;
      }
      if (!v20)
        break;
      do
      {
        Darts::Details::BitVector::append((uint64_t *)(v2 + 72));
        this = (uint64_t)Darts::Details::AutoPool<Darts::Details::DawgUnit>::append((uint64_t *)(v2 + 24));
        v25 = *(_QWORD *)(v2 + 56);
        if (v25 == *(_QWORD *)(v2 + 64))
        {
          this = Darts::Details::AutoPool<unsigned char>::resize_buf((uint64_t *)(v2 + 48), v25 + 1);
          v25 = *(_QWORD *)(v2 + 56);
        }
        *(_QWORD *)(v2 + 56) = v25 + 1;
        --v20;
      }
      while (v20);
      v26 = *(_DWORD *)(v2 + 112) - 1;
      if (v4)
        goto LABEL_32;
LABEL_37:
      v22 = v26 + 1;
      *(_DWORD *)(*(_QWORD *)(v2 + 120) + 4 * v37) = v26 + 1;
      ++*(_QWORD *)(v2 + 192);
      if (v4)
      {
        do
        {
LABEL_22:
          v23 = *(_DWORD *)(*(_QWORD *)v2 + 12 * v4 + 4);
          v39 = v4;
          this = (uint64_t)Darts::Details::AutoPool<unsigned int>::append((uint64_t *)(v2 + 168), &v39);
          v4 = v23;
        }
        while (v23);
      }
LABEL_23:
      v24 = *(_QWORD *)(v2 + 144);
      v3 = *(_QWORD *)(v2 + 152) - 1;
      *(_DWORD *)(*(_QWORD *)v2 + 12 * *(unsigned int *)(v24 + 4 * v3)) = v22;
      v4 = *(_DWORD *)(v24 + 4 * v3);
      if (v4 == a2)
        goto LABEL_2;
    }
    v26 = 0;
    if (!v4)
      goto LABEL_37;
LABEL_32:
    v27 = *(_QWORD *)v2;
    v28 = v4;
    do
    {
      v29 = v28;
      v30 = (int *)(v27 + 12 * v28);
      v31 = *((unsigned __int8 *)v30 + 8);
      v32 = *v30;
      if (v31)
        v33 = (2 * *(unsigned __int8 *)(v27 + 12 * v29 + 9)) | (4 * v32);
      else
        v33 = 2 * v32;
      v34 = 3 * v29;
      *(_DWORD *)(*(_QWORD *)(v2 + 24) + 4 * v26) = v33 | *(unsigned __int8 *)(v27 + 4 * v34 + 10);
      *(_BYTE *)(*(_QWORD *)(v2 + 48) + v26--) = v31;
      v27 = *(_QWORD *)v2;
      v28 = *(_DWORD *)(*(_QWORD *)v2 + 4 * v34 + 4);
    }
    while (v28);
    goto LABEL_37;
  }
LABEL_2:
  *(_QWORD *)(v2 + 152) = v3;
  return this;
}

uint64_t Darts::Details::DawgBuilder::find_node(Darts::Details::DawgBuilder *this, unsigned int a2, unsigned int *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int *v24;
  int v25;
  int v26;
  int v27;

  v3 = a2;
  if (a2)
  {
    LODWORD(v4) = 0;
    v5 = *(_QWORD *)this;
    v6 = a2;
    do
    {
      v7 = (int *)(v5 + 12 * v6);
      v8 = *((unsigned __int8 *)v7 + 8);
      v9 = *v7;
      if (v8)
        v10 = (2 * *(unsigned __int8 *)(v5 + 12 * v6 + 9)) | (4 * v9);
      else
        v10 = 2 * v9;
      v11 = v5 + 12 * v6;
      v12 = ((v10 | *(unsigned __int8 *)(v11 + 10)) ^ ~(v8 << 24)) + ((v10 | *(unsigned __int8 *)(v11 + 10)) << 15);
      v13 = 2057 * ((5 * (v12 ^ (v12 >> 12))) ^ ((5 * (v12 ^ (v12 >> 12))) >> 4));
      v4 = v4 ^ HIWORD(v13) ^ v13;
      v6 = *(unsigned int *)(v11 + 4);
    }
    while ((_DWORD)v6);
  }
  else
  {
    v4 = 0;
  }
  v15 = *((_QWORD *)this + 15);
  v14 = *((_QWORD *)this + 16);
  v16 = v4 % v14;
  *a3 = v4 % v14;
  v17 = *(unsigned int *)(v15 + 4 * (v4 % v14));
  if ((_DWORD)v17)
  {
    v18 = *(_QWORD *)this;
    v19 = (unsigned int *)(*(_QWORD *)this + 12 * a2 + 4);
    v20 = *((_QWORD *)this + 3);
    do
    {
      v21 = *v19;
      v22 = v17;
      if ((_DWORD)v21)
      {
        v22 = v17;
        while ((*(_DWORD *)(v20 + 4 * v22) & 1) != 0)
        {
          ++v22;
          LODWORD(v21) = *(_DWORD *)(v18 + 12 * v21 + 4);
          if (!(_DWORD)v21)
            goto LABEL_15;
        }
      }
      else
      {
LABEL_15:
        if ((*(_DWORD *)(v20 + 4 * v22) & 1) == 0)
        {
          if (!v3)
            return v17;
          v23 = v3;
          while (1)
          {
            v24 = (int *)(v18 + 12 * v23);
            v25 = *((unsigned __int8 *)v24 + 8);
            v26 = *v24;
            v27 = v25 ? (2 * *(unsigned __int8 *)(v18 + 12 * v23 + 9)) | (4 * v26) : 2 * v26;
            if ((v27 | *(unsigned __int8 *)(v18 + 12 * v23 + 10)) != *(_DWORD *)(v20 + 4 * v22)
              || v25 != *(unsigned __int8 *)(*((_QWORD *)this + 6) + v22))
            {
              break;
            }
            v23 = *(unsigned int *)(v18 + 12 * v23 + 4);
            --v22;
            if (!(_DWORD)v23)
              return v17;
          }
        }
      }
      v16 = (v16 + 1) % v14;
      *a3 = v16;
      v17 = *(unsigned int *)(v15 + 4 * v16);
    }
    while ((_DWORD)v17);
  }
  return v17;
}

uint64_t Darts::Details::BitVector::build(Darts::Details::BitVector *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = operator new[]();
  result = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v2;
  if (result)
    result = MEMORY[0x19401E970](result, 0x1000C8052888210);
  *((_QWORD *)this + 4) = 0;
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = 0;
    v6 = (_DWORD *)*((_QWORD *)this + 3);
    v7 = *(unsigned int **)this;
    do
    {
      *v6++ = v5;
      v8 = *v7++;
      v9 = ((((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) >> 2) & 0x33333333)
          + ((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) & 0x33333333)
          + (((((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) >> 2) & 0x33333333)
            + ((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
      v5 += ((_BYTE)v9 + BYTE1(v9) + ((v9 + (v9 >> 8)) >> 16)) & 0x3F;
      --v4;
    }
    while (v4);
    *((_QWORD *)this + 4) = v5;
  }
  return result;
}

unsigned int *Darts::Details::DoubleArrayBuilderUnit::set_offset(unsigned int *this, unsigned int a2)
{
  int v2;
  _QWORD *exception;

  if (a2 >> 29)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = &off_1E2DF1560;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1339: exception: "
                   "failed to modify unit: too large offset";
  }
  v2 = (4 * a2) | 0x200;
  if (a2 < 0x200000)
    v2 = a2 << 10;
  *this = *this & 0x800001FF | v2;
  return this;
}

unsigned int *Darts::Details::DoubleArrayBuilder::build_from_dawg(Darts::Details::DoubleArrayBuilder *this, const Darts::Details::DawgBuilder *a2, unsigned int a3, unsigned int a4)
{
  Darts::Details::BitVector *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *result;
  int v19;
  int v20;

  v8 = (const Darts::Details::DawgBuilder *)((char *)a2 + 72);
  v9 = *(unsigned int *)(*((_QWORD *)a2 + 3) + 4 * a3);
  v10 = v9 >> 2;
  v11 = v9 >> 7;
  v12 = 1 << (v9 >> 2);
  if ((v12 & *(_DWORD *)(*((_QWORD *)a2 + 9) + 4 * (v9 >> 7))) != 0
    && (v13 = *(_DWORD *)(*((_QWORD *)this + 8)
                        + 4
                        * (Darts::Details::BitVector::rank((const Darts::Details::DawgBuilder *)((char *)a2 + 72), v10)- 1))) != 0&& ((v14 = v13 ^ a4, ((v13 ^ a4) & 0x1FE00000) != 0) ? (v15 = (v13 ^ a4) == 0) : (v15 = 1), v15))
  {
    if (*(_BYTE *)(*((_QWORD *)a2 + 6) + v10))
    {
      v16 = *((_QWORD *)this + 1);
      v17 = a4;
    }
    else
    {
      v17 = a4;
      v16 = *((_QWORD *)this + 1);
      *(_DWORD *)(v16 + 4 * a4) |= 0x100u;
    }
    return Darts::Details::DoubleArrayBuilderUnit::set_offset((unsigned int *)(v16 + 4 * v17), v14);
  }
  else
  {
    result = (unsigned int *)Darts::Details::DoubleArrayBuilder::arrange_from_dawg(this, a2, a3, a4);
    v19 = (int)result;
    if ((*(_DWORD *)(*((_QWORD *)a2 + 9) + 4 * v11) & v12) != 0)
    {
      result = (unsigned int *)Darts::Details::BitVector::rank(v8, v10);
      *(_DWORD *)(*((_QWORD *)this + 8) + 4 * ((_DWORD)result - 1)) = v19;
    }
    do
    {
      if (*(_BYTE *)(*((_QWORD *)a2 + 6) + v10))
        result = (unsigned int *)Darts::Details::DoubleArrayBuilder::build_from_dawg(this, a2, v10, v19 ^ *(unsigned __int8 *)(*((_QWORD *)a2 + 6) + v10));
      if ((_DWORD)v10 == -1)
        break;
      v20 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v10);
      LODWORD(v10) = v10 + 1;
    }
    while ((v20 & 1) != 0);
  }
  return result;
}

void Darts::Details::DoubleArrayBuilder::expand_units(Darts::Details::DoubleArrayBuilder *this)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int i;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v2 = (uint64_t *)((char *)this + 8);
  v3 = *((_QWORD *)this + 2);
  v4 = (v3 + 256);
  v5 = (v3 >> 8) - 16;
  if (v5 >= 0xFFFFFFEF)
  {
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize((uint64_t *)this + 1, (v3 + 256));
  }
  else
  {
    v6 = 0;
    v7 = v5 << 8;
    v8 = *((_QWORD *)this + 4);
    while (1)
    {
      v9 = v7 + v6;
      if (!*(_BYTE *)(v8 + 12 * (((_DWORD)v7 + v6) & 0xFFF) + 9))
        break;
      if (++v6 == 256)
      {
        v9 = 0;
        break;
      }
    }
    v10 = 0;
    v11 = 3072 * ((v3 >> 8) & 0xF);
    do
    {
      if (!*(_BYTE *)(v8 + v11 + v10 + 8))
      {
        if (*((_QWORD *)this + 2) <= v7)
        {
          Darts::Details::DoubleArrayBuilder::expand_units(this);
          v8 = *((_QWORD *)this + 4);
        }
        v12 = (int *)(v8 + v11 + v10);
        v13 = v12[1];
        if (v7 == *((_DWORD *)this + 18))
        {
          *((_DWORD *)this + 18) = v13;
          if (v7 == v13)
            *((_DWORD *)this + 18) = *((_QWORD *)this + 2);
        }
        v14 = *v12;
        *(_DWORD *)(v8 + 12 * (*v12 & 0xFFF) + 4) = v13;
        *(_DWORD *)(v8 + 12 * (v12[1] & 0xFFF)) = v14;
        *((_BYTE *)v12 + 8) = 1;
        *(_BYTE *)(*v2 + 4 * v7) = v9 ^ v7;
      }
      ++v7;
      v10 += 12;
    }
    while ((_DWORD)v10 != 3072);
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize(v2, (v3 + 256));
    v15 = v3;
    if (v3 < (unint64_t)v4)
    {
      v16 = *((_QWORD *)this + 4);
      do
        *(_WORD *)(v16 + 12 * (v15++ & 0xFFF) + 8) = 0;
      while (v4 != v15);
    }
  }
  v17 = *((_QWORD *)this + 4);
  if ((int)v3 + 1 < v4)
  {
    for (i = 0; i != 255; ++i)
    {
      v19 = v3 + i;
      *(_DWORD *)(v17 + 12 * (v19 & 0xFFF) + 4) = v19 + 1;
      *(_DWORD *)(v17 + 12 * ((v19 + 1) & 0xFFF)) = v19;
    }
  }
  v20 = 12 * (v3 & 0xFFF);
  *(_DWORD *)(v17 + v20) = v3 + 255;
  v21 = *((_DWORD *)this + 18);
  v22 = 12 * (v21 & 0xFFF);
  *(_DWORD *)(v17 + v20) = *(_DWORD *)(v17 + v22);
  LOWORD(v20) = *(_DWORD *)(v17 + v22);
  *(_DWORD *)(v17 + 12 * (((_DWORD)v3 + 255) & 0xFFF) + 4) = v21;
  *(_DWORD *)(v17 + 12 * (v20 & 0xFFF) + 4) = v3;
  *(_DWORD *)(v17 + v22) = v3 + 255;
}

uint64_t Darts::Details::DoubleArrayBuilder::arrange_from_dawg(Darts::Details::DoubleArrayBuilder *this, const Darts::Details::DawgBuilder *a2, unsigned int a3, unsigned int a4)
{
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _BOOL4 v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int *v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  char v35;

  v8 = (uint64_t *)((char *)this + 40);
  Darts::Details::AutoPool<unsigned char>::resize((uint64_t *)this + 5, 0);
  v9 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * a3);
  if (v9 >= 4)
  {
    v10 = v9 >> 2;
    do
    {
      v35 = *(_BYTE *)(*((_QWORD *)a2 + 6) + v10);
      Darts::Details::AutoPool<unsigned char>::append(v8, &v35);
      v11 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v10);
      v13 = __CFADD__(v10++, 1);
    }
    while ((v11 & 1) != 0 && !v13);
  }
  v14 = *((unsigned int *)this + 18);
  v15 = *((_QWORD *)this + 2);
  if (v15 <= v14)
  {
LABEL_20:
    v19 = a4 | v15;
  }
  else
  {
    v17 = *((_QWORD *)this + 4);
    v16 = (unsigned __int8 *)*((_QWORD *)this + 5);
    v18 = *((_DWORD *)this + 18);
    while (1)
    {
      v19 = v18 ^ *v16;
      v20 = ((unsigned __int16)v18 ^ *v16) & 0xFFF;
      if (!*(_BYTE *)(v17 + 12 * (((unsigned __int16)v18 ^ *v16) & 0xFFF) + 9)
        && (!((v18 ^ *v16) ^ a4) || ((v19 ^ a4) & 0x1FE00000) == 0))
      {
        v21 = *((_QWORD *)this + 6);
        if (v21 < 2)
          goto LABEL_21;
        if (!*(_BYTE *)(v17 + 12 * (v20 ^ v16[1]) + 8))
          break;
      }
LABEL_19:
      v18 = *(_DWORD *)(v17 + 12 * (v18 & 0xFFF) + 4);
      if (v18 == (_DWORD)v14)
        goto LABEL_20;
    }
    v22 = 2;
    while (v21 != v22)
    {
      if (*(unsigned __int8 *)(v17 + 12 * (v20 ^ v16[v22++]) + 8))
      {
        if (v22 - 1 >= v21)
          break;
        goto LABEL_19;
      }
    }
  }
LABEL_21:
  Darts::Details::DoubleArrayBuilderUnit::set_offset((unsigned int *)(*((_QWORD *)this + 1) + 4 * a4), v19 ^ a4);
  if (*((_QWORD *)this + 6))
  {
    v24 = 0;
    v25 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * a3) >> 2;
    do
    {
      v26 = v19 ^ *(unsigned __int8 *)(*((_QWORD *)this + 5) + v24);
      if (*((_QWORD *)this + 2) <= v26)
        Darts::Details::DoubleArrayBuilder::expand_units(this);
      if (*((_DWORD *)this + 18) == (_DWORD)v26)
      {
        v27 = v26 & 0xFFF;
        v28 = *((_QWORD *)this + 4);
        v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
        *((_DWORD *)this + 18) = v29;
        if (v29 == (_DWORD)v26)
        {
          *((_DWORD *)this + 18) = *((_QWORD *)this + 2);
          v29 = v26;
        }
      }
      else
      {
        v28 = *((_QWORD *)this + 4);
        v27 = v26 & 0xFFF;
        v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
      }
      v30 = (int *)(v28 + 12 * v27);
      v31 = *v30;
      *(_DWORD *)(v28 + 12 * (*v30 & 0xFFF) + 4) = v29;
      *(_DWORD *)(v28 + 12 * (v30[1] & 0xFFF)) = v31;
      *((_BYTE *)v30 + 8) = 1;
      v32 = *((_QWORD *)this + 1);
      if (*(_BYTE *)(*((_QWORD *)a2 + 6) + v25))
      {
        *(_BYTE *)(v32 + 4 * v26) = *(_BYTE *)(*v8 + v24);
        v33 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v25);
      }
      else
      {
        *(_DWORD *)(v32 + 4 * a4) |= 0x100u;
        v33 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v25);
        *(_DWORD *)(v32 + 4 * v26) = (v33 >> 1) | 0x80000000;
      }
      v25 = ((int)(v33 << 31) >> 31) & (v25 + 1);
      ++v24;
    }
    while (v24 < *((_QWORD *)this + 6));
  }
  else
  {
    v28 = *((_QWORD *)this + 4);
  }
  *(_BYTE *)(v28 + 12 * (v19 & 0xFFF) + 9) = 1;
  return v19;
}

uint64_t Darts::Details::BitVector::rank(Darts::Details::BitVector *this, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = (a2 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
  v3 = *(_DWORD *)(*((_QWORD *)this + 3) + v2);
  LODWORD(v2) = *(_DWORD *)(*(_QWORD *)this + v2) & (0xFFFFFFFF >> ~(_BYTE)a2);
  LODWORD(v2) = ((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
               + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)
               + (((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
                 + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
  return (((_BYTE)v2 + BYTE1(v2) + ((v2 + (v2 >> 8)) >> 16)) & 0x3Fu) + v3;
}

uint64_t *Darts::Details::AutoPool<unsigned char>::append(uint64_t *result, _BYTE *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 == result[2])
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned char>::resize_buf(result, v4 + 1);
    v4 = v3[1];
  }
  v3[1] = v4 + 1;
  *(_BYTE *)(*v3 + v4) = *a2;
  return result;
}

void Darts::Details::DawgBuilder::~DawgBuilder(Darts::Details::DawgBuilder *this)
{
  Darts::Details::AutoPool<Darts::Details::DawgNode>::clear((uint64_t *)this);
  Darts::Details::AutoPool<Darts::Details::DawgUnit>::clear((uint64_t *)this + 3);
  Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)this + 6);
  Darts::Details::BitVector::clear((Darts::Details::DawgBuilder *)((char *)this + 72));
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 15);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 18);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 21);
  *((_QWORD *)this + 24) = 0;
  Darts::Details::AutoStack<unsigned int>::~AutoStack((uint64_t *)this + 21);
  Darts::Details::AutoStack<unsigned int>::~AutoStack((uint64_t *)this + 18);
  Darts::Details::AutoPool<unsigned int>::~AutoPool((uint64_t *)this + 15);
  Darts::Details::BitVector::~BitVector((Darts::Details::DawgBuilder *)((char *)this + 72));
  Darts::Details::AutoPool<unsigned char>::~AutoPool((uint64_t *)this + 6);
  Darts::Details::AutoPool<Darts::Details::DawgUnit>::~AutoPool((uint64_t *)this + 3);
  Darts::Details::AutoPool<Darts::Details::DawgNode>::~AutoPool((uint64_t *)this);
}

uint64_t Darts::Details::DoubleArrayBuilder::build_from_keyset<int>(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t result;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  int v17;

  while (1)
  {
    result = Darts::Details::DoubleArrayBuilder::arrange_from_keyset<int>(a1, a2, a3, a4, a5, a6);
    v12 = result;
    if (a3 < a4)
    {
      v13 = a2[2];
      while (v13 && *(_QWORD *)(v13 + 8 * a3) <= a5 || !*(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5))
      {
        if (a4 == ++a3)
          return result;
      }
    }
    if (a3 == a4)
      break;
    v14 = a2[2];
    if (v14 && *(_QWORD *)(v14 + 8 * a3) <= a5)
      v15 = 0;
    else
      v15 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
    v16 = a3 + 1;
    if (a3 + 1 < a4)
    {
      do
      {
        if (v14 && *(_QWORD *)(v14 + 8 * v16) <= a5)
          v17 = 0;
        else
          v17 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * v16) + a5);
        if (v17 != v15)
        {
          Darts::Details::DoubleArrayBuilder::build_from_keyset<int>(a1, a2, a3, v16, a5 + 1, v12 ^ v15);
          v14 = a2[2];
          if (v14 && *(_QWORD *)(v14 + 8 * v16) <= a5)
            v15 = 0;
          else
            v15 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * v16) + a5);
          a3 = v16;
        }
        ++v16;
      }
      while (a4 != v16);
    }
    a6 = v12 ^ v15;
    ++a5;
  }
  return result;
}

uint64_t Darts::Details::DoubleArrayBuilder::arrange_from_keyset<int>(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int *v35;
  int v36;
  uint64_t v37;
  _QWORD *exception;
  const char *v40;
  unsigned __int8 v41;

  v12 = (uint64_t *)(a1 + 40);
  Darts::Details::AutoPool<unsigned char>::resize((uint64_t *)(a1 + 40), 0);
  v13 = -1;
  if (a3 < a4)
  {
    do
    {
      v41 = 0;
      v14 = a2[2];
      if (v14)
      {
        if (*(_QWORD *)(v14 + 8 * a3) > a5)
        {
          v41 = *(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
          if (!v41)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1675: exception: f"
                  "ailed to build double-array: invalid null character";
            goto LABEL_52;
          }
          goto LABEL_17;
        }
      }
      else
      {
        v41 = *(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
        if (v41)
          goto LABEL_17;
      }
      v15 = a2[3];
      if (v15)
      {
        if ((*(_DWORD *)(v15 + 4 * a3) & 0x80000000) != 0)
          goto LABEL_51;
      }
      else if ((a3 & 0x80000000) != 0)
      {
LABEL_51:
        exception = __cxa_allocate_exception(0x10uLL);
        v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1677: exception: faile"
              "d to build double-array: negative value";
LABEL_52:
        *exception = &off_1E2DF1560;
        exception[1] = v40;
      }
      if (v13 == -1)
      {
        if (v15)
          v13 = *(_DWORD *)(v15 + 4 * a3);
        else
          v13 = a3;
      }
      if (*(_QWORD *)a1)
        (*(void (**)(unint64_t, uint64_t))a1)(a3 + 1, *a2 + 1);
LABEL_17:
      v16 = *(_QWORD *)(a1 + 48);
      if (!v16)
        goto LABEL_21;
      v17 = *(unsigned __int8 *)(v16 + *v12 - 1);
      if (v41 != v17)
      {
        if (v41 < v17)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1692: exception: fai"
                "led to build double-array: wrong key order";
          goto LABEL_52;
        }
LABEL_21:
        Darts::Details::AutoPool<unsigned char>::append(v12, &v41);
      }
      ++a3;
    }
    while (a4 != a3);
  }
  v18 = *(unsigned int *)(a1 + 72);
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 <= v18)
  {
LABEL_35:
    v23 = a6 | v19;
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 32);
    v20 = *(unsigned __int8 **)(a1 + 40);
    v22 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      v23 = v22 ^ *v20;
      v24 = ((unsigned __int16)v22 ^ *v20) & 0xFFF;
      if (!*(_BYTE *)(v21 + 12 * (((unsigned __int16)v22 ^ *v20) & 0xFFF) + 9)
        && (!((v22 ^ *v20) ^ a6) || ((v23 ^ a6) & 0x1FE00000) == 0))
      {
        v25 = *(_QWORD *)(a1 + 48);
        if (v25 < 2)
          goto LABEL_36;
        if (!*(_BYTE *)(v21 + 12 * (v24 ^ v20[1]) + 8))
          break;
      }
LABEL_34:
      v22 = *(_DWORD *)(v21 + 12 * (v22 & 0xFFF) + 4);
      if (v22 == (_DWORD)v18)
        goto LABEL_35;
    }
    v26 = 2;
    while (v25 != v26)
    {
      if (*(unsigned __int8 *)(v21 + 12 * (v24 ^ v20[v26++]) + 8))
      {
        if (v26 - 1 >= v25)
          break;
        goto LABEL_34;
      }
    }
  }
LABEL_36:
  Darts::Details::DoubleArrayBuilderUnit::set_offset((unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * a6), v23 ^ a6);
  if (*(_QWORD *)(a1 + 48))
  {
    v28 = 0;
    v29 = v13 | 0x80000000;
    v30 = *v12;
    do
    {
      v31 = v23 ^ *(unsigned __int8 *)(v30 + v28);
      if (*(_QWORD *)(a1 + 16) <= v31)
        Darts::Details::DoubleArrayBuilder::expand_units((Darts::Details::DoubleArrayBuilder *)a1);
      if (*(_DWORD *)(a1 + 72) == (_DWORD)v31)
      {
        v32 = v31 & 0xFFF;
        v33 = *(_QWORD *)(a1 + 32);
        v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
        *(_DWORD *)(a1 + 72) = v34;
        if (v34 == (_DWORD)v31)
        {
          *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          v34 = v31;
        }
      }
      else
      {
        v33 = *(_QWORD *)(a1 + 32);
        v32 = v31 & 0xFFF;
        v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
      }
      v35 = (int *)(v33 + 12 * v32);
      v36 = *v35;
      *(_DWORD *)(v33 + 12 * (*v35 & 0xFFF) + 4) = v34;
      *(_DWORD *)(v33 + 12 * (v35[1] & 0xFFF)) = v36;
      *((_BYTE *)v35 + 8) = 1;
      v30 = *(_QWORD *)(a1 + 40);
      v37 = *(_QWORD *)(a1 + 8);
      if (*(_BYTE *)(v30 + v28))
      {
        *(_BYTE *)(v37 + 4 * v31) = *(_BYTE *)(v30 + v28);
      }
      else
      {
        *(_DWORD *)(v37 + 4 * a6) |= 0x100u;
        *(_DWORD *)(v37 + 4 * v31) = v29;
      }
      ++v28;
    }
    while (v28 < *(_QWORD *)(a1 + 48));
  }
  else
  {
    v33 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(v33 + 12 * (v23 & 0xFFF) + 9) = 1;
  return v23;
}

void Darts::Details::DoubleArrayBuilder::~DoubleArrayBuilder(Darts::Details::DoubleArrayBuilder *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)((char *)this + 8);
  Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::clear((uint64_t *)this + 1);
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    MEMORY[0x19401E970](v3, 0x1000C80CBA68D63);
    *((_QWORD *)this + 4) = 0;
  }
  Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)this + 5);
  v4 = *((_QWORD *)this + 8);
  if (v4)
  {
    MEMORY[0x19401E970](v4, 0x1000C8052888210);
    *((_QWORD *)this + 8) = 0;
  }
  *((_DWORD *)this + 18) = 0;
  Darts::Details::AutoPool<unsigned char>::~AutoPool((uint64_t *)this + 5);
  v5 = *((_QWORD *)this + 4);
  if (v5)
  {
    MEMORY[0x19401E970](v5, 0x1000C80CBA68D63);
    *((_QWORD *)this + 4) = 0;
  }
  Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::~AutoPool(v2);
}

_QWORD *std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<float,unsigned long>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_191D044CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

sentencepiece::normalizer::Normalizer *sentencepiece::normalizer::Normalizer::Normalizer(sentencepiece::normalizer::Normalizer *this, const sentencepiece::NormalizerSpec *a2, const sentencepiece::TrainerSpec *a3)
{
  unint64_t v5;
  unint64_t v6;

  *(_QWORD *)this = &off_1E2DF07A0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = (char *)a2 + 16;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = *((_BYTE *)a3 + 245);
  sentencepiece::util::Status::Status((_QWORD *)this + 7);
  v5 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    v5 = *(_QWORD *)v5;
    v6 = *(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v6 = *(unsigned __int8 *)(v5 + 23);
  }
  sentencepiece::normalizer::Normalizer::Init((uint64_t)this, (unsigned int *)v5, v6);
  return this;
}

void sub_191D0456C(_Unwind_Exception *a1)
{
  sentencepiece::util::Status *v1;
  uint64_t *v2;
  uint64_t v4;

  sentencepiece::util::Status::~Status(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void sentencepiece::normalizer::Normalizer::Init(uint64_t a1, unsigned int *a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  __int128 v11;
  unsigned int *v12;
  unint64_t v13;

  if (a3)
  {
    v12 = 0;
    v13 = 0;
    v11 = 0uLL;
    sentencepiece::normalizer::Normalizer::DecodePrecompiledCharsMap(a2, a3, &v12, &v11, &v10);
    sentencepiece::util::Status::operator=((uint64_t *)(a1 + 56), &v10);
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
    if (!*(_QWORD *)(a1 + 56))
    {
      v4 = (_QWORD *)operator new();
      *v4 = &off_1E2DF1540;
      v4[1] = 0;
      v4[2] = 0;
      v4[3] = 0;
      v5 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v4;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      if (!v13 || (v13 & 3) != 0)
      {
        sentencepiece::util::Status::Status(&v10, 13, "Trie blob is wrongly formatted.", 31);
        sentencepiece::util::Status::operator=((uint64_t *)(a1 + 56), &v10);
        sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
      }
      else
      {
        v6 = *(_QWORD **)(a1 + 8);
        v7 = v12;
        v8 = v13 >> 2;
        v6[1] = 0;
        v6[2] = 0;
        v9 = v6[3];
        if (v9)
        {
          MEMORY[0x19401E970](v9, 0x1000C8052888210);
          v6[3] = 0;
        }
        v6[1] = v8;
        v6[2] = v7;
        *(_OWORD *)(a1 + 16) = v11;
      }
    }
  }
}

void sub_191D046D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  _Unwind_Resume(a1);
}

sentencepiece::normalizer::Normalizer *sentencepiece::normalizer::Normalizer::Normalizer(sentencepiece::normalizer::Normalizer *this, const sentencepiece::NormalizerSpec *a2)
{
  unint64_t v4;
  unint64_t v5;

  *(_QWORD *)this = &off_1E2DF07A0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = (char *)a2 + 16;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  sentencepiece::util::Status::Status((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    v4 = *(_QWORD *)v4;
    v5 = *(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = *(unsigned __int8 *)(v4 + 23);
  }
  sentencepiece::normalizer::Normalizer::Init((uint64_t)this, (unsigned int *)v4, v5);
  return this;
}

void sub_191D04770(_Unwind_Exception *a1)
{
  sentencepiece::util::Status *v1;
  uint64_t *v2;
  uint64_t v4;

  sentencepiece::util::Status::~Status(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::normalizer::Normalizer::Normalizer(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t *v7;
  _DWORD *v8;
  _DWORD *v10;
  int v11;

  *(_QWORD *)a1 = &off_1E2DF07A0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  v7 = (uint64_t *)(a1 + 56);
  *(_BYTE *)(a1 + 48) = 0;
  sentencepiece::util::Status::Status((_QWORD *)(a1 + 56));
  v11 = 0;
  sentencepiece::mmap_util::DecodePrefix<unsigned int>(a3, a4, &v11, &v10);
  sentencepiece::util::Status::operator=(v7, &v10);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
  (*(void (**)(_DWORD **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v10, a1);
  v8 = v10;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
  if (!v8)
  {
    *(_BYTE *)(a1 + 48) = v11 != 0;
    sentencepiece::normalizer::Normalizer::Init(a1, a3 + 1, a4 - 4);
  }
  return a1;
}

void sub_191D04884(_Unwind_Exception *a1)
{
  sentencepiece::util::Status *v1;
  uint64_t *v2;
  uint64_t v4;

  sentencepiece::util::Status::~Status(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void sentencepiece::normalizer::Normalizer::~Normalizer(sentencepiece::normalizer::Normalizer *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DF07A0;
  sentencepiece::util::Status::~Status((sentencepiece::normalizer::Normalizer *)((char *)this + 56));
  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DF07A0;
  sentencepiece::util::Status::~Status((sentencepiece::normalizer::Normalizer *)((char *)this + 56));
  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x19401E994);
}

_QWORD *sentencepiece::normalizer::Normalizer::DecodePrecompiledCharsMap@<X0>(unsigned int *a1@<X0>, unint64_t a2@<X1>, unsigned int **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned int *v7;
  unsigned int *v8;
  const char *v10;
  uint64_t v11;

  if (a2 < 5 || (v7 = (unsigned int *)*a1, a2 <= (unint64_t)v7))
  {
    v10 = "Blob for normalization rule is broken.";
    v11 = 38;
  }
  else
  {
    if ((unint64_t)(v7 + 1) < a2)
    {
      v8 = a1 + 1;
      *a3 = v8;
      a3[1] = v7;
      *a4 = (char *)v7 + (_QWORD)v8;
      a4[1] = a2 - (_QWORD)v7 - 4;
      return sentencepiece::util::Status::Status(a5);
    }
    v10 = "Trie data size exceeds the input blob size.";
    v11 = 43;
  }
  return (_QWORD *)sentencepiece::util::Status::Status(a5, 13, v10, v11);
}

_QWORD *sentencepiece::normalizer::Normalizer::Normalize@<X0>(uint64_t a1@<X0>, sentencepiece::string_util *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, sentencepiece::util::Status *a6@<X8>)
{
  unint64_t v6;
  _QWORD *result;
  unint64_t *v11;
  sentencepiece::util::Status *v12;
  unint64_t *v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  std::string::size_type i;
  void **v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  int v47;
  size_t v48;
  const char *v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  std::string::size_type size;
  BOOL v54;
  std::string::size_type v55;
  void **v56;
  uint64_t v57;
  char *v58;
  char *v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  std::string::size_type v71;
  _QWORD *v72;
  sentencepiece::util::Status *v73;
  sentencepiece::string_util *v74;
  unint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  void *__p;
  char v80;
  uint64_t v81;
  _QWORD v82[5];
  const std::string::value_type *v83;
  std::string::size_type v84;
  int v85;
  void **v86;
  std::string *v87;

  v6 = a3;
  v86 = (void **)a5;
  v87 = (std::string *)a4;
  *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
  if (*(char *)(a4 + 23) < 0)
  {
    **(_BYTE **)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    if (a3)
      goto LABEL_3;
    return sentencepiece::util::Status::Status(a6);
  }
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 23) = 0;
  if (!a3)
    return sentencepiece::util::Status::Status(a6);
LABEL_3:
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (*(_QWORD *)a6)
    return result;
  sentencepiece::util::Status::~Status(a6);
  v85 = 0;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32)))
  {
    do
    {
      sentencepiece::normalizer::Normalizer::NormalizePrefix(a2, a1, v6, v11, (uint64_t)&v76);
      if (v77 != 1 || *v76 != 32)
        goto LABEL_11;
      a2 = (sentencepiece::string_util *)((char *)a2 + (int)v78);
      v85 += v78;
      v6 -= (int)v78;
    }
    while (v6);
    v12 = a6;
    return sentencepiece::util::Status::Status(v12);
  }
LABEL_11:
  v73 = a6;
  std::string::reserve(v87, 3 * v6);
  std::vector<unsigned long>::reserve(v86, 3 * v6);
  v83 = "▁";
  v84 = 3;
  v82[0] = a1;
  v82[1] = &v85;
  v82[2] = &v87;
  v82[3] = &v86;
  v82[4] = &v83;
  if (!*(_BYTE *)(a1 + 48)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32)))
  {
    sentencepiece::normalizer::Normalizer::Normalize(std::string_view,std::string *,std::vector<unsigned long> *)const::$_0::operator()((uint64_t)v82);
  }
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  do
  {
    sentencepiece::normalizer::Normalizer::NormalizePrefix(a2, a1, v6, v13, (uint64_t)&v76);
    v15 = v76;
    v16 = v77;
    if ((v14 & 1) != 0)
    {
      if (!v77)
        goto LABEL_64;
      while (*v15 == 32)
      {
        ++v15;
        if (!--v16)
          goto LABEL_64;
      }
    }
    else if (!v77)
    {
      v14 = 0;
      goto LABEL_64;
    }
    v74 = a2;
    v75 = v6;
    v17 = 0;
    do
    {
      v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
      v19 = v15[v17];
      if (v18 && v19 == 32)
      {
        std::string::append(v87, v83, v84);
        if (v84)
        {
          for (i = 0; i < v84; ++i)
          {
            v21 = v86;
            v22 = v85;
            v23 = (char *)v86[1];
            v24 = (char *)v86[2];
            if (v23 >= v24)
            {
              v26 = (char *)*v86;
              v27 = (v23 - (_BYTE *)*v86) >> 3;
              v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) >> 61)
                goto LABEL_114;
              v29 = v24 - v26;
              if (v29 >> 2 > v28)
                v28 = v29 >> 2;
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
                v30 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v30 = v28;
              if (v30)
              {
                v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v86 + 2), v30);
                v26 = (char *)*v21;
                v23 = (char *)v21[1];
              }
              else
              {
                v31 = 0;
              }
              v32 = &v31[8 * v27];
              *(_QWORD *)v32 = v22;
              v25 = v32 + 8;
              while (v23 != v26)
              {
                v33 = *((_QWORD *)v23 - 1);
                v23 -= 8;
                *((_QWORD *)v32 - 1) = v33;
                v32 -= 8;
              }
              *v21 = v32;
              v21[1] = v25;
              v21[2] = &v31[8 * v30];
              if (v26)
                operator delete(v26);
            }
            else
            {
              *(_QWORD *)v23 = v85;
              v25 = v23 + 8;
            }
            v21[1] = v25;
          }
        }
      }
      else
      {
        std::string::push_back(v87, v19);
        v34 = v86;
        v35 = v85;
        v36 = (char *)v86[1];
        v37 = (char *)v86[2];
        if (v36 >= v37)
        {
          v39 = (char *)*v86;
          v40 = (v36 - (_BYTE *)*v86) >> 3;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61)
LABEL_114:
            std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
          v42 = v37 - v39;
          if (v42 >> 2 > v41)
            v41 = v42 >> 2;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
            v43 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
          {
            v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v86 + 2), v43);
            v39 = (char *)*v34;
            v36 = (char *)v34[1];
          }
          else
          {
            v44 = 0;
          }
          v45 = &v44[8 * v40];
          *(_QWORD *)v45 = v35;
          v38 = v45 + 8;
          while (v36 != v39)
          {
            v46 = *((_QWORD *)v36 - 1);
            v36 -= 8;
            *((_QWORD *)v45 - 1) = v46;
            v45 -= 8;
          }
          *v34 = v45;
          v34[1] = v38;
          v34[2] = &v44[8 * v43];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_QWORD *)v36 = v85;
          v38 = v36 + 8;
        }
        v34[1] = v38;
      }
      ++v17;
    }
    while (v17 != v16);
    v14 = v15[v16 - 1] == 32;
    a2 = v74;
    v6 = v75;
LABEL_64:
    v85 += v78;
    a2 = (sentencepiece::string_util *)((char *)a2 + (int)v78);
    v6 -= (int)v78;
    v14 &= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  }
  while (v6);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32)))
  {
    v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
    if (v47)
      v48 = v84;
    else
      v48 = 1;
    if (v47)
      v49 = v83;
    else
      v49 = " ";
    while (1)
    {
      v50 = v87;
      LODWORD(v51) = HIBYTE(v87->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v87->__r_.__value_.__r.__words[2]) < 0)
      {
        v52 = (std::string *)v87->__r_.__value_.__r.__words[0];
        size = v87->__r_.__value_.__l.__size_;
        if (!v48)
          goto LABEL_79;
      }
      else
      {
        v52 = v87;
        size = HIBYTE(v87->__r_.__value_.__r.__words[2]);
        if (!v48)
          goto LABEL_79;
      }
      v54 = size >= v48;
      v55 = size - v48;
      if (!v54 || memcmp((char *)v52 + v55, v49, v48))
        break;
LABEL_79:
      if ((v51 & 0x80) != 0)
        v51 = v50->__r_.__value_.__l.__size_;
      if ((_DWORD)v51 - (_DWORD)v48 < 0)
      {
        LODWORD(v76) = 13;
        v67 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v77);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"(length) >= (0)", 15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v76, (uint64_t)v73);
        goto LABEL_110;
      }
      v85 = *((_QWORD *)*v86 + (v51 - v48));
      std::string::resize(v50, (v51 - v48), 0);
      std::vector<unsigned long>::resize((uint64_t)v86, (v51 - v48));
    }
  }
  if (*(_BYTE *)(a1 + 48)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32)))
  {
    sentencepiece::normalizer::Normalizer::Normalize(std::string_view,std::string *,std::vector<unsigned long> *)const::$_0::operator()((uint64_t)v82);
  }
  v56 = v86;
  v57 = v85;
  v58 = (char *)v86[1];
  v59 = (char *)v86[2];
  if (v58 >= v59)
  {
    v61 = (char *)*v86;
    v62 = (v58 - (_BYTE *)*v86) >> 3;
    v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v64 = v59 - v61;
    if (v64 >> 2 > v63)
      v63 = v64 >> 2;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
      v65 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v65 = v63;
    if (v65)
    {
      v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v86 + 2), v65);
      v61 = (char *)*v56;
      v58 = (char *)v56[1];
    }
    else
    {
      v66 = 0;
    }
    v68 = &v66[8 * v62];
    v69 = &v66[8 * v65];
    *(_QWORD *)v68 = v57;
    v60 = v68 + 8;
    while (v58 != v61)
    {
      v70 = *((_QWORD *)v58 - 1);
      v58 -= 8;
      *((_QWORD *)v68 - 1) = v70;
      v68 -= 8;
    }
    *v56 = v68;
    v56[1] = v60;
    v56[2] = v69;
    if (v61)
      operator delete(v61);
  }
  else
  {
    *(_QWORD *)v58 = v85;
    v60 = v58 + 8;
  }
  v56[1] = v60;
  if (SHIBYTE(v87->__r_.__value_.__r.__words[2]) < 0)
    v71 = v87->__r_.__value_.__l.__size_;
  else
    v71 = HIBYTE(v87->__r_.__value_.__r.__words[2]);
  if (((_BYTE *)v86[1] - (_BYTE *)*v86) >> 3 == v71 + 1)
  {
    v12 = v73;
    return sentencepiece::util::Status::Status(v12);
  }
  LODWORD(v76) = 13;
  v72 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v77);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"(", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)") [", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"(norm_to_orig->size()) == (normalized->size() + 1)", 50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"] ", 2);
  sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v76, (uint64_t)v73);
LABEL_110:
  v77 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v77 + *(_QWORD *)(v77 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v78 = MEMORY[0x1E0DE4FB8] + 16;
  if (v80 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x19401E928](&v81);
}

void sub_191D0516C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::normalizer::Normalizer::NormalizePrefix@<X0>(sentencepiece::string_util *this@<X1>, uint64_t result@<X0>, unint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  unint64_t v20;
  int v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  char v27[8];
  _QWORD v28[64];

  v28[63] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v7 = (char *)this;
    v8 = result;
    v9 = *(_QWORD *)(result + 40);
    if (v9
      && (v27[0] = 0, result = sentencepiece::normalizer::PrefixMatcher::PrefixMatch(v9, this, a3, (BOOL *)v27), v27[0]))
    {
      v10 = (int)result;
      if (a3 < (int)result)
        v10 = a3;
      *(_QWORD *)a5 = v7;
      *(_QWORD *)(a5 + 8) = v10;
      *(_DWORD *)(a5 + 16) = result;
    }
    else
    {
      v11 = *(_QWORD *)(v8 + 8);
      if (!v11)
        goto LABEL_24;
      v12 = 0;
      v13 = 0;
      v14 = *(_DWORD **)(v11 + 16);
      v15 = (*v14 >> 10 << ((*v14 >> 6) & 8));
      do
      {
        v16 = v7[v12];
        v17 = v15 ^ v16;
        v18 = v14[v17];
        if ((v18 & 0x800000FF) != (_DWORD)v16)
          break;
        v15 = v17 ^ (v18 >> 10 << ((v18 >> 6) & 8));
        if ((v18 & 0x100) != 0)
        {
          if (v13 <= 0x1F)
          {
            v19 = &v27[16 * v13];
            *(_DWORD *)v19 = v14[v15] & 0x7FFFFFFF;
            *((_QWORD *)v19 + 1) = v12 + 1;
          }
          ++v13;
        }
        ++v12;
      }
      while (a3 != v12);
      if (!v13)
        goto LABEL_24;
      v20 = 0;
      v21 = 0;
      v22 = v28;
      v23 = v28;
      do
      {
        v25 = *v23;
        v23 += 2;
        v24 = v25;
        if (!v20 || v24 > v20)
        {
          v21 = *((_DWORD *)v22 - 2);
          v20 = v24;
        }
        v22 = v23;
        --v13;
      }
      while (v13);
      if (v20)
      {
        v7 = (char *)(*(_QWORD *)(v8 + 16) + v21);
        result = strlen(v7);
      }
      else
      {
LABEL_24:
        *(_QWORD *)v27 = 0;
        v26 = sentencepiece::string_util::DecodeUTF8((sentencepiece::string_util *)v7, &v7[a3], v27, a4) != 65533
           || *(_QWORD *)v27 == 3;
        if (v26)
          LODWORD(v20) = *(_DWORD *)v27;
        else
          LODWORD(v20) = 1;
        if (v26)
          result = *(int *)v27;
        else
          result = 3;
        if (!v26)
          v7 = (char *)&sentencepiece::normalizer::Normalizer::NormalizePrefix(std::string_view)const::kReplacementChar;
      }
      *(_QWORD *)a5 = v7;
      *(_QWORD *)(a5 + 8) = result;
      *(_DWORD *)(a5 + 16) = v20;
    }
  }
  else
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = 0;
  }
  return result;
}

void sentencepiece::normalizer::Normalizer::Normalize(std::string_view,std::string *,std::vector<unsigned long> *)const::$_0::operator()(uint64_t a1)
{
  int v2;
  std::string *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 32) + 32))(*(_QWORD *)(*(_QWORD *)a1 + 32));
  v3 = **(std::string ***)(a1 + 16);
  if (v2)
  {
    std::string::append(v3, **(const std::string::value_type ***)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
    {
      v4 = 0;
      do
      {
        v5 = **(_QWORD **)(a1 + 24);
        v6 = **(int **)(a1 + 8);
        v7 = *(_QWORD **)(v5 + 8);
        v8 = *(_QWORD *)(v5 + 16);
        if ((unint64_t)v7 >= v8)
        {
          v10 = *(_QWORD **)v5;
          v11 = ((uint64_t)v7 - *(_QWORD *)v5) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            goto LABEL_40;
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5 + 16, v14);
            v10 = *(_QWORD **)v5;
            v7 = *(_QWORD **)(v5 + 8);
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[8 * v11];
          *(_QWORD *)v16 = v6;
          v9 = v16 + 8;
          while (v7 != v10)
          {
            v17 = *--v7;
            *((_QWORD *)v16 - 1) = v17;
            v16 -= 8;
          }
          *(_QWORD *)v5 = v16;
          *(_QWORD *)(v5 + 8) = v9;
          *(_QWORD *)(v5 + 16) = &v15[8 * v14];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *v7 = v6;
          v9 = v7 + 1;
        }
        *(_QWORD *)(v5 + 8) = v9;
        ++v4;
      }
      while (v4 < *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    }
  }
  else
  {
    std::string::append(v3, " ");
    v18 = **(_QWORD **)(a1 + 24);
    v19 = **(int **)(a1 + 8);
    v20 = *(_QWORD **)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 16);
    if ((unint64_t)v20 >= v21)
    {
      v23 = *(_QWORD **)v18;
      v24 = ((uint64_t)v20 - *(_QWORD *)v18) >> 3;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61)
LABEL_40:
        std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
      v26 = v21 - (_QWORD)v23;
      if (v26 >> 2 > v25)
        v25 = v26 >> 2;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v18 + 16, v27);
        v23 = *(_QWORD **)v18;
        v20 = *(_QWORD **)(v18 + 8);
      }
      else
      {
        v28 = 0;
      }
      v29 = &v28[8 * v24];
      v30 = &v28[8 * v27];
      *(_QWORD *)v29 = v19;
      v22 = v29 + 8;
      while (v20 != v23)
      {
        v31 = *--v20;
        *((_QWORD *)v29 - 1) = v31;
        v29 -= 8;
      }
      *(_QWORD *)v18 = v29;
      *(_QWORD *)(v18 + 8) = v22;
      *(_QWORD *)(v18 + 16) = v30;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v20 = v19;
      v22 = v20 + 1;
    }
    *(_QWORD *)(v18 + 8) = v22;
  }
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

void sentencepiece::normalizer::Normalizer::Normalize(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *__p;
  void *v4;
  uint64_t v5;

  __p = 0;
  v4 = 0;
  v5 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 32))(&v2);
  CoreNLP::SubWordTagger::~SubWordTagger((CoreNLP::SubWordTagger *)&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_191D05624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a9);
  if (*(char *)(v11 + 23) < 0)
    operator delete(*(void **)v11);
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::normalizer::PrefixMatcher::PrefixMatch(uint64_t a1, _BYTE *a2, uint64_t a3, BOOL *a4)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  uint64_t result;
  int *v18;
  unsigned int v19;
  int v20;
  int v21;
  _BYTE v22[1024];
  _QWORD v23[128];

  v23[127] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)a1)
  {
    if (a4)
      *a4 = 0;
    goto LABEL_33;
  }
  v4 = *(_DWORD **)(*(_QWORD *)a1 + 16);
  v5 = (*v4 >> 10 << ((*v4 >> 6) & 8));
  if (a3)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = a2[v6];
      v9 = v5 ^ v8;
      v10 = v4[v9];
      if ((v10 & 0x800000FF) != (_DWORD)v8)
        break;
      v5 = v9 ^ (v10 >> 10 << ((v10 >> 6) & 8));
      if ((v10 & 0x100) != 0)
      {
        if (v7 <= 0x3F)
        {
          v11 = &v22[16 * v7];
          *(_DWORD *)v11 = v4[v5] & 0x7FFFFFFF;
          *((_QWORD *)v11 + 1) = v6 + 1;
        }
        ++v7;
      }
      ++v6;
    }
    while (a3 != v6);
  }
  else
  {
    v12 = *a2;
    if (*a2)
    {
      v7 = 0;
      v13 = 1;
      do
      {
        v14 = v5 ^ v12;
        v15 = v4[v14];
        if ((v15 & 0x800000FF) != v12)
          break;
        v5 = v14 ^ (v15 >> 10 << ((v15 >> 6) & 8));
        if ((v15 & 0x100) != 0)
        {
          if (v7 <= 0x3F)
          {
            v16 = &v22[16 * v7];
            *(_DWORD *)v16 = v4[v5] & 0x7FFFFFFF;
            *((_QWORD *)v16 + 1) = v13;
          }
          ++v7;
        }
        v12 = a2[v13++];
      }
      while (v12);
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
  if (a4)
    *a4 = (int)v7 > 0;
  if (!(_DWORD)v7)
  {
LABEL_33:
    v21 = asc_191D57358[(unint64_t)*a2 >> 4];
    if (v21 >= (int)a3)
      return a3;
    else
      return v21;
  }
  if ((int)v7 < 1)
    return 0;
  LODWORD(result) = 0;
  v7 = v7;
  v18 = (int *)v23;
  do
  {
    v20 = *v18;
    v18 += 4;
    v19 = v20;
    if ((int)result <= v20)
      result = v19;
    else
      result = result;
    --v7;
  }
  while (v7);
  return result;
}

void sentencepiece::normalizer::Normalizer::MemoryMappableString(sentencepiece::normalizer::Normalizer *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _DWORD *v5;
  uint64_t v6;
  const std::string::value_type *v7;
  uint64_t v8;
  std::string::size_type v9;
  std::string *v10;
  std::string *v11;
  std::string::size_type size;
  std::string v13;

  v4 = *((unsigned __int8 *)this + 48);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  std::string::resize((std::string *)a2, 4uLL, 0);
  if (*(char *)(a2 + 23) >= 0)
    v5 = (_DWORD *)a2;
  else
    v5 = *(_DWORD **)a2;
  *v5 = v4;
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    v8 = *(_QWORD *)(v6 + 8);
    v7 = *(const std::string::value_type **)(v6 + 16);
    memset(&v13, 0, sizeof(v13));
    std::string::resize(&v13, 4uLL, 0);
    v9 = 4 * v8;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v13;
    else
      v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
    LODWORD(v10->__r_.__value_.__l.__data_) = v9;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v13;
    else
      v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    else
      size = v13.__r_.__value_.__l.__size_;
    std::string::append((std::string *)a2, (const std::string::value_type *)v11, size);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    std::string::append((std::string *)a2, v7, v9);
    std::string::append((std::string *)a2, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
  }
}

void sub_191D05920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

_QWORD *sentencepiece::normalizer::PrefixMatcher::PrefixMatcher(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  char v28;
  void *__p;
  char *v30;
  char *v31;

  *a1 = 0;
  v4 = a2[2];
  if (v4)
  {
    __p = 0;
    v30 = 0;
    v31 = 0;
    std::vector<void const*>::reserve(&__p, v4);
    v7 = (_QWORD *)*a2;
    v5 = a2 + 1;
    v6 = v7;
    if (v7 != v5)
    {
      v8 = v30;
      do
      {
        v9 = v6[4];
        if (v8 >= v31)
        {
          v10 = (v8 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v10 + 1) >> 61)
            std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
          v11 = (v31 - (_BYTE *)__p) >> 2;
          if (v11 <= v10 + 1)
            v11 = v10 + 1;
          if ((unint64_t)(v31 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v12 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v12 = v11;
          if (v12)
            v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v31, v12);
          else
            v13 = 0;
          v14 = &v13[8 * v10];
          *(_QWORD *)v14 = v9;
          v8 = v14 + 8;
          v16 = (char *)__p;
          v15 = v30;
          if (v30 != __p)
          {
            do
            {
              v17 = *((_QWORD *)v15 - 1);
              v15 -= 8;
              *((_QWORD *)v14 - 1) = v17;
              v14 -= 8;
            }
            while (v15 != v16);
            v15 = (char *)__p;
          }
          __p = v14;
          v30 = v8;
          v31 = &v13[8 * v12];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_QWORD *)v8 = v9;
          v8 += 8;
        }
        v30 = v8;
        v18 = (_QWORD *)v6[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v6[2];
            v20 = *v19 == (_QWORD)v6;
            v6 = v19;
          }
          while (!v20);
        }
        v6 = v19;
      }
      while (v19 != v5);
    }
    v21 = (_QWORD *)operator new();
    *v21 = &off_1E2DF1540;
    v21[1] = 0;
    v21[2] = 0;
    v21[3] = 0;
    v22 = (_QWORD *)*a1;
    *a1 = v21;
    if (v22)
    {
      (*(void (**)(_QWORD *))(*v22 + 8))(v22);
      v21 = (_QWORD *)*a1;
    }
    if (Darts::DoubleArrayImpl<void,void,int,void>::build(v21, (v30 - (_BYTE *)__p) >> 3, (unint64_t)__p, 0, 0, 0))
    {
      v28 = 1;
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"normalizer.cc", 13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"(", 1);
      v24 = (_QWORD *)std::ostream::operator<<();
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(0) == (trie_->build(key.size(), const_cast<char **>(&key[0]), nullptr, nullptr))", 81);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"] ", 2);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v28);
    }
    if (__p)
    {
      v30 = (char *)__p;
      operator delete(__p);
    }
  }
  return a1;
}

void sub_191D05BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14)
{
  uint64_t *v14;
  uint64_t v16;

  if (__p)
    operator delete(__p);
  v16 = *v14;
  *v14 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(exception_object);
}

_QWORD *sentencepiece::normalizer::PrefixMatcher::PrefixMatcher(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;

  *a1 = 0;
  if (a3)
  {
    v6 = (_QWORD *)operator new();
    *v6 = &off_1E2DF1540;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = 0;
    v7 = (_QWORD *)*a1;
    *a1 = v6;
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    if ((a3 & 3) == 0)
    {
      v8 = (_QWORD *)*a1;
      v9 = a3 >> 2;
      v8[1] = 0;
      v8[2] = 0;
      v10 = v8[3];
      if (v10)
      {
        MEMORY[0x19401E970](v10, 0x1000C8052888210);
        v8[3] = 0;
      }
      v8[1] = v9;
      v8[2] = a2;
    }
  }
  return a1;
}

void sub_191D05CB4(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

_QWORD *sentencepiece::normalizer::PrefixMatcher::MemoryMappableString@<X0>(sentencepiece::normalizer::PrefixMatcher *this@<X0>, _QWORD *a2@<X8>)
{
  if (*(_QWORD *)this)
    return std::string::basic_string[abi:ne180100](a2, *(void **)(*(_QWORD *)this + 16), 4 * *(_QWORD *)(*(_QWORD *)this + 8));
  else
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

uint64_t sentencepiece::normalizer::Normalizer::SetPrefixMatcher(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = a2;
  return result;
}

uint64_t sentencepiece::normalizer::Normalizer::status@<X0>(sentencepiece::normalizer::Normalizer *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  return sentencepiece::util::Status::Status(a2, (sentencepiece::normalizer::Normalizer *)((char *)this + 56));
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sentencepiece::ModelFactory::Create(sentencepiece::ModelFactory *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  sentencepiece::unigram::Model *v11;

  if (*((_QWORD *)this + 10))
    v4 = (_DWORD *)*((_QWORD *)this + 10);
  else
    v4 = &sentencepiece::_TrainerSpec_default_instance_;
  switch(v4[68])
  {
    case 1:
      absl::make_unique<sentencepiece::unigram::Model,sentencepiece::ModelProto const&>(this, &v11);
      goto LABEL_12;
    case 2:
      absl::make_unique<sentencepiece::bpe::Model,sentencepiece::ModelProto const&>(this, &v11);
      goto LABEL_12;
    case 3:
      absl::make_unique<sentencepiece::word::Model,sentencepiece::ModelProto const&>(this, &v11);
      goto LABEL_12;
    case 4:
      absl::make_unique<sentencepiece::character::Model,sentencepiece::ModelProto const&>(this, &v11);
LABEL_12:
      *a2 = v11;
      break;
    default:
      if ((int)sentencepiece::logging::GetMinLogLevel(this) <= 2)
      {
        LOBYTE(v11) = 0;
        v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"model_factory.cc", 16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(", 1);
        v6 = (_QWORD *)std::ostream::operator<<();
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)") ", 2);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"LOG(", 4);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ERROR", 5);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)") ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Unknown model_type: ", 20);
        std::ostream::operator<<();
        sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v11);
      }
      *a2 = 0;
      break;
  }
}

void sub_191D06004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)va);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::unigram::Model,sentencepiece::ModelProto const&>@<X0>(const sentencepiece::ModelProto *a1@<X0>, sentencepiece::unigram::Model **a2@<X8>)
{
  sentencepiece::unigram::Model *v4;
  uint64_t result;

  v4 = (sentencepiece::unigram::Model *)operator new();
  result = sentencepiece::unigram::Model::Model(v4, a1);
  *a2 = v4;
  return result;
}

void sub_191D06068(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::bpe::Model,sentencepiece::ModelProto const&>@<X0>(const sentencepiece::ModelProto *a1@<X0>, sentencepiece::bpe::Model **a2@<X8>)
{
  sentencepiece::bpe::Model *v4;
  uint64_t result;

  v4 = (sentencepiece::bpe::Model *)operator new();
  result = sentencepiece::bpe::Model::Model(v4, a1);
  *a2 = v4;
  return result;
}

void sub_191D060DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::word::Model,sentencepiece::ModelProto const&>@<X0>(const sentencepiece::ModelProto *a1@<X0>, sentencepiece::word::Model **a2@<X8>)
{
  sentencepiece::word::Model *v4;
  uint64_t result;

  v4 = (sentencepiece::word::Model *)operator new();
  result = sentencepiece::word::Model::Model(v4, a1);
  *a2 = v4;
  return result;
}

void sub_191D06150(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::character::Model,sentencepiece::ModelProto const&>@<X0>(const sentencepiece::ModelProto *a1@<X0>, sentencepiece::character::Model **a2@<X8>)
{
  sentencepiece::character::Model *v4;
  uint64_t result;

  v4 = (sentencepiece::character::Model *)operator new();
  result = sentencepiece::character::Model::Model(v4, a1);
  *a2 = v4;
  return result;
}

void sub_191D061C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelFactory::Create(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  sentencepiece::logging *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[2];

  v14[0] = a2;
  v14[1] = a3;
  v6 = (sentencepiece::logging *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  if ((_DWORD)v6 == 1)
  {
    absl::make_unique<sentencepiece::bpe::Model,sentencepiece::MemoryMappedModelProto const&,std::string_view &>(a1, (uint64_t)v14, &v13);
    goto LABEL_5;
  }
  if (!(_DWORD)v6)
  {
    absl::make_unique<sentencepiece::unigram::Model,sentencepiece::MemoryMappedModelProto const&,std::string_view &>(a1, v14, &v13);
LABEL_5:
    *a4 = v13;
    return;
  }
  if ((int)sentencepiece::logging::GetMinLogLevel(v6) <= 2)
  {
    LOBYTE(v13) = 0;
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"model_factory.cc", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") ", 2);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"LOG(", 4);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ERROR", 5);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Unknown model_type: ", 20);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    std::ostream::operator<<();
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v13);
  }
  *a4 = 0;
}

void sub_191D06320(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)va);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::unigram::Model,sentencepiece::MemoryMappedModelProto const&,std::string_view &>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = sentencepiece::unigram::Model::Model(v6, a1, *a2, a2[1]);
  *a3 = v6;
  return result;
}

void sub_191D06390(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

_QWORD *absl::make_unique<sentencepiece::bpe::Model,sentencepiece::MemoryMappedModelProto const&,std::string_view &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *result;

  v6 = operator new();
  result = sentencepiece::bpe::Model::Model(v6, a1, *(_DWORD **)a2, *(_QWORD *)(a2 + 8));
  *a3 = v6;
  return result;
}

void sub_191D0640C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

void sentencepiece::ImmutableSentencePieceText::~ImmutableSentencePieceText(sentencepiece::ImmutableSentencePieceText *this)
{
  *(_QWORD *)this = &off_1E2DF0FE0;
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &off_1E2DF0FE0;
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x19401E994);
}

uint64_t sentencepiece::ImmutableSentencePieceText::mutable_proto(sentencepiece::ImmutableSentencePieceText *this)
{
  uint64_t result;
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = (char *)this + 16;
  result = *((_QWORD *)this + 2);
  if (!result)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN13sentencepiece17SentencePieceTextENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v7);
    std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::operator=[abi:ne180100]((uint64_t)v3, &v7);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
    if (*((_QWORD *)&v7 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    result = *((_QWORD *)this + 2);
    *((_QWORD *)this + 1) = result;
  }
  return result;
}

void sentencepiece::ImmutableNBestSentencePieceText::~ImmutableNBestSentencePieceText(sentencepiece::ImmutableNBestSentencePieceText *this)
{
  *(_QWORD *)this = &off_1E2DF1040;
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E2DF1040;
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x19401E994);
}

uint64_t sentencepiece::ImmutableNBestSentencePieceText::mutable_proto(sentencepiece::ImmutableNBestSentencePieceText *this)
{
  uint64_t result;
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v2 = (char *)this + 8;
  result = *((_QWORD *)this + 1);
  if (!result)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN13sentencepiece22NBestSentencePieceTextENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v6);
    std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::operator=[abi:ne180100]((uint64_t)v2, &v6);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
    if (*((_QWORD *)&v6 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    return *(_QWORD *)v2;
  }
  return result;
}

_QWORD *sentencepiece::ImmutableNBestSentencePieceText::SerializeAsString@<X0>(sentencepiece::ImmutableNBestSentencePieceText *this@<X0>, _QWORD *a2@<X8>)
{
  google::protobuf::MessageLite *v2;

  v2 = (google::protobuf::MessageLite *)*((_QWORD *)this + 1);
  if (v2)
    return (_QWORD *)google::protobuf::MessageLite::SerializeAsString(v2, (uint64_t)a2);
  else
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

double sentencepiece::SentencePieceProcessor::SentencePieceProcessor(sentencepiece::SentencePieceProcessor *this)
{
  double result;

  *(_QWORD *)this = &off_1E2DF0CF0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void sentencepiece::SentencePieceProcessor::~SentencePieceProcessor(void **this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *this = &off_1E2DF0CF0;
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  v2 = this[11];
  this[11] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  v3 = this[8];
  if (v3)
  {
    this[9] = v3;
    operator delete(v3);
  }
  v4 = this[5];
  if (v4)
  {
    this[6] = v4;
    operator delete(v4);
  }
  v5 = this[4];
  this[4] = 0;
  if (v5)
    (*(void (**)(void *))(*(_QWORD *)v5 + 8))(v5);
  v6 = this[3];
  this[3] = 0;
  if (v6)
    (*(void (**)(void *))(*(_QWORD *)v6 + 8))(v6);
  v7 = this[2];
  this[2] = 0;
  if (v7)
    (*(void (**)(void *))(*(_QWORD *)v7 + 8))(v7);
  v8 = this[1];
  this[1] = 0;
  if (v8)
    (*(void (**)(void *))(*(_QWORD *)v8 + 8))(v8);
}

{
  sentencepiece::SentencePieceProcessor::~SentencePieceProcessor(this);
  JUMPOUT(0x19401E994);
}

uint64_t sentencepiece::IsMMappableFile()
{
  _QWORD v1[2];
  _BYTE v2[408];
  _QWORD v3[20];

  v3[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v1);
  if ((v2[*(_QWORD *)(v1[0] - 24) + 16] & 5) == 0)
    std::istream::read();
  v1[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x19401E70C](v2);
  std::istream::~istream();
  MEMORY[0x19401E928](v3);
  return 0;
}

void sub_191D06850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

sentencepiece::ModelProto *sentencepiece::SentencePieceProcessor::Load@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  sentencepiece::ModelProto *result;
  sentencepiece::ModelProto *v9;
  uint64_t v10;
  uint64_t v11;
  sentencepiece::ModelProto *v12;
  sentencepiece::ModelProto *v13;

  if (sentencepiece::IsMMappableFile())
    return (sentencepiece::ModelProto *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2, a3);
  absl::make_unique<sentencepiece::ModelProto>(&v13);
  sentencepiece::io::LoadModelProto(a2, a3, v13, a4);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    v12 = v13;
    v13 = 0;
    (*(void (**)(uint64_t, sentencepiece::ModelProto **))(*(_QWORD *)a1 + 40))(a1, &v12);
    v9 = v12;
    v12 = 0;
    if (v9)
    {
      sentencepiece::ModelProto::~ModelProto(v9);
      MEMORY[0x19401E994](v10);
    }
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    sentencepiece::ModelProto::~ModelProto(result);
    return (sentencepiece::ModelProto *)MEMORY[0x19401E994](v11, 0x10A1C4047CE62CFLL);
  }
  return result;
}

void sub_191D06974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, sentencepiece::ModelProto *a9, sentencepiece::ModelProto *a10)
{
  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0);
  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a10, 0);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::ModelProto>@<X0>(sentencepiece::ModelProto **a1@<X8>)
{
  sentencepiece::ModelProto *v2;
  uint64_t result;

  v2 = (sentencepiece::ModelProto *)operator new();
  result = sentencepiece::ModelProto::ModelProto(v2, 0);
  *a1 = v2;
  return result;
}

void sub_191D069E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10A1C4047CE62CFLL);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::io::LoadModelProto@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, google::protobuf::MessageLite *a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  char *v6;
  unsigned int v7;
  uint64_t result;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a2)
    return sentencepiece::util::Status::Status(a4, 5, "model file path should not be empty.", 36);
  sentencepiece::filesystem::NewReadableFile(a1, a2, 1, &v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    v13 = 0;
    v14 = 0;
    v15 = 0;
    if (((*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v16 + 32))(v16, &v13) & 1) != 0)
    {
      if (v15 >= 0)
        v6 = (char *)&v13;
      else
        v6 = v13;
      if (v15 >= 0)
        v7 = HIBYTE(v15);
      else
        v7 = v14;
      if ((google::protobuf::MessageLite::ParseFromArray(a3, v6, v7) & 1) != 0)
      {
        sentencepiece::util::Status::Status(a4);
LABEL_18:
        if (SHIBYTE(v15) < 0)
          operator delete(v13);
        goto LABEL_20;
      }
      v9 = 13;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"model_proto->ParseFromArray(serialized.data(), serialized.size())", 65);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a4);
    }
    else
    {
      v9 = 13;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"input->ReadAll(&serialized)", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a4);
    }
    v10[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v10[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v11 < 0)
      operator delete((void *)v10[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19401E928](&v12);
    goto LABEL_18;
  }
LABEL_20:
  result = v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_191D06CB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  v3 = *(_QWORD *)(v1 - 56);
  *(_QWORD *)(v1 - 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::LoadOrDie(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  char v9;
  uint64_t v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v10);
  if (v10)
  {
    v9 = 1;
    v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"(", 1);
    v2 = (_QWORD *)std::ostream::operator<<();
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)") [", 3);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"_status.ok()", 12);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"] ", 2);
    sentencepiece::util::Status::ToString((sentencepiece::util::Status *)&v10, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v9);
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
}

void sub_191D06E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)(v15 - 25));
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)(v15 - 24));
  _Unwind_Resume(a1);
}

sentencepiece::ModelProto *sentencepiece::SentencePieceProcessor::Load(sentencepiece::SentencePieceProcessor *this, const sentencepiece::ModelProto *a2)
{
  sentencepiece::ModelProto *v4;
  uint64_t v5;
  sentencepiece::ModelProto *result;
  uint64_t v7;
  sentencepiece::ModelProto *v8;
  sentencepiece::ModelProto *v9;

  absl::make_unique<sentencepiece::ModelProto>(&v9);
  sentencepiece::ModelProto::CopyFrom(v9, a2);
  v8 = v9;
  v9 = 0;
  (*(void (**)(sentencepiece::SentencePieceProcessor *, sentencepiece::ModelProto **))(*(_QWORD *)this + 40))(this, &v8);
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    sentencepiece::ModelProto::~ModelProto(v4);
    MEMORY[0x19401E994](v5);
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    sentencepiece::ModelProto::~ModelProto(result);
    return (sentencepiece::ModelProto *)MEMORY[0x19401E994](v7, 0x10A1C4047CE62CFLL);
  }
  return result;
}

void sub_191D06EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, sentencepiece::ModelProto *a9, sentencepiece::ModelProto *a10)
{
  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0);
  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a10, 0);
  _Unwind_Resume(a1);
}

sentencepiece::ModelProto *sentencepiece::SentencePieceProcessor::LoadFromSerializedProto@<X0>(uint64_t a1@<X0>, char *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  sentencepiece::ModelProto *v8;
  sentencepiece::ModelProto *v9;
  uint64_t v10;
  sentencepiece::ModelProto *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  sentencepiece::ModelProto *v15;
  unsigned int v16;
  _QWORD v17[11];
  char v18;
  uint64_t v19;
  sentencepiece::ModelProto *v20;

  absl::make_unique<sentencepiece::ModelProto>(&v20);
  if ((google::protobuf::MessageLite::ParseFromArray(v20, a2, a3) & 1) != 0)
  {
    v8 = v20;
    v20 = 0;
    v15 = v8;
    (*(void (**)(uint64_t, sentencepiece::ModelProto **))(*(_QWORD *)a1 + 40))(a1, &v15);
    v9 = v15;
    v15 = 0;
    if (v9)
    {
      sentencepiece::ModelProto::~ModelProto(v9);
      MEMORY[0x19401E994](v10);
    }
  }
  else
  {
    v16 = 13;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"model_proto->ParseFromArray(serialized.data(), serialized.size())", 65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v16, a4);
    v17[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v17[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v18 < 0)
      operator delete((void *)v17[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19401E928](&v19);
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    sentencepiece::ModelProto::~ModelProto(result);
    return (sentencepiece::ModelProto *)MEMORY[0x19401E994](v12, 0x10A1C4047CE62CFLL, v13, v14);
  }
  return result;
}

void sub_191D070E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100]((sentencepiece::ModelProto **)(v1 - 56), 0);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::Load(sentencepiece::logging *a1@<X0>, uint64_t *a2@<X1>, sentencepiece::util::Status *a3@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__split_buffer<std::string>::pointer first;
  uint64_t v23;
  std::__split_buffer<std::string>::pointer v24;
  const sentencepiece::NormalizerSpec *v25;
  const sentencepiece::TrainerSpec *v26;
  std::__split_buffer<std::string>::pointer v27;
  uint64_t v28;
  std::__split_buffer<std::string>::pointer v29;
  const sentencepiece::NormalizerSpec *v30;
  std::string *v31;
  const sentencepiece::NormalizerSpec *v32;
  unint64_t v33;
  std::__split_buffer<std::string>::pointer v34;
  uint64_t v35;
  std::__split_buffer<std::string>::pointer v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  const std::string::value_type *v56;
  std::string::size_type v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  std::string *v61;
  std::string::size_type size;
  sentencepiece::logging *v63;
  unint64_t v64;
  size_t v65;
  void *v66;
  std::vector<std::string>::pointer end;
  __int128 v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  std::string *v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  sentencepiece::logging *MinLogLevel;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  std::string __p;
  std::string v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::vector<std::string> v101;
  std::__split_buffer<std::string> __v;

  v6 = *a2;
  v7 = *(_BYTE **)(*a2 + 88);
  if (!v7)
    v7 = &sentencepiece::_NormalizerSpec_default_instance_;
  if (v7[80])
  {
    if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 0)
    {
      LOBYTE(__v.__first_) = 0;
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
      v9 = (_QWORD *)std::ostream::operator<<();
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)") ", 2);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"LOG(", 4);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"INFO", 4);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Enable Apple addition for backward compatibility", 48);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&__v);
    }
    v6 = *a2;
    *(_DWORD *)(v6 + 48) = *(_DWORD *)(*a2 + 48) | 1;
    v14 = *(_QWORD *)(v6 + 80);
    if (!v14)
    {
      v15 = *(_QWORD *)(v6 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      v14 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>((uint64_t)v16);
      *(_QWORD *)(v6 + 80) = v14;
      v6 = *a2;
    }
    *(_DWORD *)(v14 + 40) |= 0x4000u;
    *(_BYTE *)(v14 + 245) = 1;
    *(_DWORD *)(v6 + 48) |= 2u;
    v17 = *(_QWORD *)(v6 + 88);
    if (!v17)
    {
      v18 = *(_QWORD *)(v6 + 8);
      v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
      if ((v18 & 1) != 0)
        v19 = (_QWORD *)*v19;
      v17 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>((uint64_t)v19);
      *(_QWORD *)(v6 + 88) = v17;
      v6 = *a2;
    }
    *(_DWORD *)(v17 + 48) |= 0x10u;
    *(_BYTE *)(v17 + 81) = 1;
  }
  *a2 = 0;
  if (v6)
    v20 = v6 + 16;
  else
    v20 = 0;
  v21 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = v20;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v20 = *((_QWORD *)a1 + 4);
  }
  sentencepiece::ModelFactory::Create((sentencepiece::ModelFactory *)(v20 - 16), &__v);
  first = __v.__first_;
  __v.__first_ = 0;
  v23 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = first;
  if (v23)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = __v.__first_;
    __v.__first_ = 0;
    if (v24)
      (*(void (**)(std::__split_buffer<std::string>::pointer))(v24->__r_.__value_.__r.__words[0] + 8))(v24);
  }
  if (*(_QWORD *)(v20 + 72))
    v25 = *(const sentencepiece::NormalizerSpec **)(v20 + 72);
  else
    v25 = (const sentencepiece::NormalizerSpec *)&sentencepiece::_NormalizerSpec_default_instance_;
  if (*(_QWORD *)(v20 + 64))
    v26 = *(const sentencepiece::TrainerSpec **)(v20 + 64);
  else
    v26 = (const sentencepiece::TrainerSpec *)&sentencepiece::_TrainerSpec_default_instance_;
  absl::make_unique<sentencepiece::normalizer::Normalizer,sentencepiece::NormalizerSpec const&,sentencepiece::TrainerSpec const&>(v25, v26, (sentencepiece::normalizer::Normalizer **)&__v);
  v27 = __v.__first_;
  __v.__first_ = 0;
  v28 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v27;
  if (v28)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v29 = __v.__first_;
    __v.__first_ = 0;
    if (v29)
      (*(void (**)(std::__split_buffer<std::string>::pointer))(v29->__r_.__value_.__r.__words[0] + 8))(v29);
  }
  if ((*(_DWORD *)(v20 + 32) & 8) != 0)
  {
    v30 = *(const sentencepiece::NormalizerSpec **)(v20 + 88);
    if (!v30)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__v, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4990);
      v31 = google::protobuf::internal::LogMessage::operator<<((std::string *)&__v, "CHECK failed: !value || denormalizer_spec_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v101, (const char **)&v31->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&__v.__first_);
      v30 = *(const sentencepiece::NormalizerSpec **)(v20 + 88);
    }
    if (v30)
      v32 = v30;
    else
      v32 = (const sentencepiece::NormalizerSpec *)&sentencepiece::_NormalizerSpec_default_instance_;
    v33 = *((_QWORD *)v32 + 8) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v33 + 23) < 0)
    {
      if (!*(_QWORD *)(v33 + 8))
        goto LABEL_45;
    }
    else if (!*(_BYTE *)(v33 + 23))
    {
      goto LABEL_45;
    }
    absl::make_unique<sentencepiece::normalizer::Normalizer,sentencepiece::NormalizerSpec const&>(v32, (sentencepiece::normalizer::Normalizer **)&__v);
    v34 = __v.__first_;
    __v.__first_ = 0;
    v35 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 3) = v34;
    if (v35)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      v36 = __v.__first_;
      __v.__first_ = 0;
      if (v36)
        (*(void (**)(std::__split_buffer<std::string>::pointer))(v36->__r_.__value_.__r.__words[0] + 8))(v36);
    }
  }
LABEL_45:
  v37 = *((_QWORD *)a1 + 2);
  v38 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 1) + 32))(*((_QWORD *)a1 + 1));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v38);
  (*(void (**)(sentencepiece::logging *))(*(_QWORD *)a1 + 88))(a1);
  if (!*(_QWORD *)a3)
  {
    sentencepiece::util::Status::~Status(a3);
    memset(&v101, 0, sizeof(v101));
    v98 = 0;
    v99 = 0;
    v100 = 0;
    v39 = *(int **)(v20 + 80);
    if (!v39)
      v39 = (int *)&sentencepiece::_SelfTestData_default_instance_;
    v40 = *((_QWORD *)v39 + 7);
    if (v40)
      v41 = (uint64_t *)(v40 + 8);
    else
      v41 = 0;
    v42 = v39[12];
    if ((_DWORD)v42)
    {
      v43 = &v41[v42];
      while (1)
      {
        v44 = *v41;
        v45 = *(_QWORD *)(*v41 + 24) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v45 + 23) < 0)
        {
          v47 = *(_QWORD *)v45;
          v46 = *(_QWORD *)(v45 + 8);
        }
        else
        {
          v46 = *(unsigned __int8 *)(v45 + 23);
          v47 = *(_QWORD *)(*v41 + 24) & 0xFFFFFFFFFFFFFFFELL;
        }
        (*(void (**)(sentencepiece::logging *, unint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v47, v46, &v98);
        if (*(_QWORD *)a3)
          break;
        sentencepiece::util::Status::~Status(a3);
        memset(&v97, 0, sizeof(v97));
        v48 = v98;
        if (v98 == v99)
        {
          v52 = v98;
        }
        else
        {
          v49 = *(char *)(v98 + 23);
          if (v49 >= 0)
            v50 = (const std::string::value_type *)v98;
          else
            v50 = *(const std::string::value_type **)v98;
          if (v49 >= 0)
            v51 = *(unsigned __int8 *)(v98 + 23);
          else
            v51 = *(_QWORD *)(v98 + 8);
          std::string::append(&v97, v50, v51);
          v48 = v98;
          v52 = v99;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v52 - v48) >> 3) >= 2)
        {
          v53 = 0;
          v54 = 1;
          do
          {
            std::string::append(&v97, " ", 1uLL);
            v55 = *(char *)(v98 + v53 + 47);
            if (v55 >= 0)
              v56 = (const std::string::value_type *)(v98 + v53 + 24);
            else
              v56 = *(const std::string::value_type **)(v98 + v53 + 24);
            if (v55 >= 0)
              v57 = *(unsigned __int8 *)(v98 + v53 + 47);
            else
              v57 = *(_QWORD *)(v98 + v53 + 32);
            std::string::append(&v97, v56, v57);
            ++v54;
            v53 += 24;
          }
          while (v54 < 0xAAAAAAAAAAAAAAABLL * ((v99 - v98) >> 3));
        }
        v58 = *(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v58 + 23) < 0)
        {
          v60 = *(_QWORD *)v58;
          v59 = *(_QWORD *)(v58 + 8);
        }
        else
        {
          v59 = *(unsigned __int8 *)(v58 + 23);
          v60 = *(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFFELL;
        }
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = &v97;
        else
          v61 = (std::string *)v97.__r_.__value_.__r.__words[0];
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v97.__r_.__value_.__r.__words[2]);
        else
          size = v97.__r_.__value_.__l.__size_;
        v63 = (sentencepiece::logging *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t, std::string *, std::string::size_type))(**((_QWORD **)a1 + 1) + 192))(*((_QWORD *)a1 + 1), v60, v59, v61, size);
        if ((v63 & 1) == 0)
        {
          v64 = *(_QWORD *)(v44 + 24) & 0xFFFFFFFFFFFFFFFELL;
          if (*(char *)(v64 + 23) < 0)
          {
            v66 = *(void **)v64;
            v65 = *(_QWORD *)(v64 + 8);
          }
          else
          {
            v65 = *(unsigned __int8 *)(v64 + 23);
            v66 = (void *)(*(_QWORD *)(v44 + 24) & 0xFFFFFFFFFFFFFFFELL);
          }
          absl::StrCat<char [2],std::string,char [2],std::string>(v66, v65, "\t", (void **)(*(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFFELL), "\t", (void **)&v97.__r_.__value_.__l.__data_, &__p);
          end = v101.__end_;
          if (v101.__end_ >= v101.__end_cap_.__value_)
          {
            v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v101.__end_ - (char *)v101.__begin_) >> 3);
            v70 = v69 + 1;
            if (v69 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v101.__end_cap_.__value_ - (char *)v101.__begin_) >> 3) > v70)
              v70 = 0x5555555555555556 * (((char *)v101.__end_cap_.__value_ - (char *)v101.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v101.__end_cap_.__value_ - (char *)v101.__begin_) >> 3) >= 0x555555555555555)
              v71 = 0xAAAAAAAAAAAAAAALL;
            else
              v71 = v70;
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v101.__end_cap_;
            if (v71)
              v72 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v101.__end_cap_, v71);
            else
              v72 = 0;
            v73 = v72 + v69;
            __v.__first_ = v72;
            __v.__begin_ = v73;
            __v.__end_cap_.__value_ = &v72[v71];
            v74 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            v73->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v73->__r_.__value_.__l.__data_ = v74;
            memset(&__p, 0, sizeof(__p));
            __v.__end_ = v73 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v101, &__v);
            v75 = v101.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&__v);
            v101.__end_ = v75;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
            v68 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            v101.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v68;
            v101.__end_ = end + 1;
          }
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v97.__r_.__value_.__l.__data_);
        if (++v41 == v43)
        {
          if (v101.__begin_ == v101.__end_)
            goto LABEL_119;
          MinLogLevel = (sentencepiece::logging *)sentencepiece::logging::GetMinLogLevel(v63);
          if ((int)MinLogLevel <= 0)
          {
            LOBYTE(__v.__first_) = 0;
            v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"(", 1);
            v78 = (_QWORD *)std::ostream::operator<<();
            v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)") ", 2);
            v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"LOG(", 4);
            v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"INFO", 4);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)") ", 2);
            v82 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"/", 1);
            v83 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" samples did not pass the test.", 31);
            sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&__v);
          }
          begin = v101.__begin_;
          v85 = v101.__end_;
          if (v101.__begin_ != v101.__end_)
          {
            v86 = (_QWORD *)MEMORY[0x1E0DE4A50];
            do
            {
              MinLogLevel = (sentencepiece::logging *)sentencepiece::logging::GetMinLogLevel(MinLogLevel);
              if ((int)MinLogLevel <= 0)
              {
                LOBYTE(__v.__first_) = 0;
                v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"sentencepiece_processor.cc", 26);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"(", 1);
                v88 = (_QWORD *)std::ostream::operator<<();
                v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)") ", 2);
                v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"LOG(", 4);
                v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"INFO", 4);
                v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)") ", 2);
                v93 = SHIBYTE(begin->__r_.__value_.__r.__words[2]);
                if (v93 >= 0)
                  v94 = (uint64_t)begin;
                else
                  v94 = begin->__r_.__value_.__r.__words[0];
                if (v93 >= 0)
                  v95 = HIBYTE(begin->__r_.__value_.__r.__words[2]);
                else
                  v95 = begin->__r_.__value_.__l.__size_;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, v94, v95);
                sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&__v);
              }
              ++begin;
            }
            while (begin != v85);
          }
          sentencepiece::util::Status::Status(a3, 13, "Self-test failures. See LOG(INFO).", 34);
          break;
        }
      }
    }
    else
    {
LABEL_119:
      sentencepiece::util::Status::Status(a3);
    }
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v98;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v101;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  }
}

void sub_191D07990(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, void *a8, uint64_t a9, int __pa, __int16 __p_4, char __p_6, char __p_7, uint64_t a14, uint64_t a15, void *a16, char a17, uint64_t a18, uint64_t a19, std::__split_buffer<std::string> *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  google::protobuf::internal::LogMessage::~LogMessage((void **)&a25);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::normalizer::Normalizer,sentencepiece::NormalizerSpec const&,sentencepiece::TrainerSpec const&>@<X0>(const sentencepiece::NormalizerSpec *a1@<X0>, const sentencepiece::TrainerSpec *a2@<X1>, sentencepiece::normalizer::Normalizer **a3@<X8>)
{
  sentencepiece::normalizer::Normalizer *v6;
  uint64_t result;

  v6 = (sentencepiece::normalizer::Normalizer *)operator new();
  result = sentencepiece::normalizer::Normalizer::Normalizer(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_191D07AA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::normalizer::Normalizer,sentencepiece::NormalizerSpec const&>@<X0>(const sentencepiece::NormalizerSpec *a1@<X0>, sentencepiece::normalizer::Normalizer **a2@<X8>)
{
  sentencepiece::normalizer::Normalizer *v4;
  uint64_t result;

  v4 = (sentencepiece::normalizer::Normalizer *)operator new();
  result = sentencepiece::normalizer::Normalizer::Normalizer(v4, a1);
  *a2 = v4;
  return result;
}

void sub_191D07B18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

void absl::StrCat<char [2],std::string,char [2],std::string>(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, char *a5@<X4>, void **a6@<X5>, std::string *a7@<X8>)
{
  size_t v12;
  std::string *p_p;
  std::string::size_type size;
  std::string *v15;
  std::string __p;
  std::string __dst;

  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  v12 = strlen(a3);
  absl::StrCat<std::string,char [2],std::string>(a3, v12, a4, a5, a6, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a7 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_191D07C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::SetEncodeExtraOptions(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  sentencepiece::SentencePieceProcessor::ParseExtraOptions((sentencepiece::ModelInterface **)a1, a2, a3, (char **)(a1 + 40), a4);
}

void sentencepiece::SentencePieceProcessor::ParseExtraOptions(sentencepiece::ModelInterface **a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char **a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  const char *v27;
  size_t v28;
  uint64_t v29;
  const char *v30;
  size_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *__p[2];
  __int128 v45;
  uint64_t v46;
  _QWORD v47[21];

  v47[19] = *MEMORY[0x1E0C80C00];
  a4[1] = *a4;
  if (a3)
  {
    (*((void (**)(sentencepiece::ModelInterface **))*a1 + 11))(a1);
    if (!*(_QWORD *)a5)
    {
      sentencepiece::util::Status::~Status(a5);
      if ((v10 & 1) == 0
      {
        v43 = xmmword_1E2DF5500;
        *(_OWORD *)__p = unk_1E2DF5510;
        v45 = xmmword_1E2DF5520;
        v46 = 3;
        v39 = xmmword_1E2DF54C0;
        v40 = unk_1E2DF54D0;
        v41 = xmmword_1E2DF54E0;
        v42 = *(_OWORD *)&off_1E2DF54F0;
        std::map<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>::map[abi:ne180100]((uint64_t)&sentencepiece::SentencePieceProcessor::ParseExtraOptions(std::string_view,std::vector<sentencepiece::SentencePieceProcessor::ExtraOption> *)const::extra_option_map, (uint64_t)&v39, 5);
        __cxa_atexit((void (*)(void *))std::map<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>::~map[abi:ne180100], &sentencepiece::SentencePieceProcessor::ParseExtraOptions(std::string_view,std::vector<sentencepiece::SentencePieceProcessor::ExtraOption> *)const::extra_option_map, &dword_191C5D000);
      }
      absl::internal::Splitter::Splitter((char **)&v37, a2, a3, ":", 1, 0);
      v11 = (uint64_t *)v37;
      v12 = v38;
      if (v37 == v38)
      {
LABEL_29:
        if (v11)
        {
          v38 = v11;
          operator delete(v11);
        }
        sentencepiece::util::Status::Status(a5);
      }
      else
      {
        while (1)
        {
          v13 = std::__tree<std::string_view>::find<std::string_view>((uint64_t)&sentencepiece::SentencePieceProcessor::ParseExtraOptions(std::string_view,std::vector<sentencepiece::SentencePieceProcessor::ExtraOption> *)const::extra_option_map, (uint64_t)v11);
          v14 = v13;
          if (v13 == (_QWORD *)&unk_1EE21C6C0)
            break;
          v16 = a4[1];
          v15 = (unint64_t)a4[2];
          if ((unint64_t)v16 >= v15)
          {
            v18 = *a4;
            v19 = (v16 - *a4) >> 2;
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 62)
              std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
            v21 = v15 - (_QWORD)v18;
            if (v21 >> 1 > v20)
              v20 = v21 >> 1;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
              v22 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v22 = v20;
            if (v22)
            {
              v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a4 + 2), v22);
              v18 = *a4;
              v16 = a4[1];
            }
            else
            {
              v23 = 0;
            }
            v24 = &v23[4 * v19];
            *(_DWORD *)v24 = *((_DWORD *)v14 + 12);
            v17 = v24 + 4;
            while (v16 != v18)
            {
              v25 = *((_DWORD *)v16 - 1);
              v16 -= 4;
              *((_DWORD *)v24 - 1) = v25;
              v24 -= 4;
            }
            *a4 = v24;
            a4[1] = v17;
            a4[2] = &v23[4 * v22];
            if (v18)
              operator delete(v18);
          }
          else
          {
            *(_DWORD *)v16 = *((_DWORD *)v13 + 12);
            v17 = v16 + 4;
          }
          a4[1] = v17;
          v26 = *((_DWORD *)v14 + 12);
          if (v26 == 1)
          {
            v27 = sentencepiece::ModelInterface::bos_piece(a1[1]);
            v28 = strlen(v27);
            v29 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*a1 + 63))(a1, v27, v28);
            if (((*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 66))(a1, v29) & 1) != 0)
            {
              LODWORD(v39) = 13;
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39 + 8);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)") [", 3);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->bos_piece().data())))", 68);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"] ", 2);
              v33 = sentencepiece::ModelInterface::bos_piece(a1[1]);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)v33, v34);
              sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a5);
              goto LABEL_38;
            }
            v26 = *((_DWORD *)v14 + 12);
          }
          if (v26 == 2)
          {
            v30 = sentencepiece::ModelInterface::eos_piece(a1[1]);
            v31 = strlen(v30);
            v32 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*a1 + 63))(a1, v30, v31);
            if (((*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 66))(a1, v32) & 1) != 0)
            {
              LODWORD(v39) = 13;
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39 + 8);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)") [", 3);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->eos_piece().data())))", 68);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"] ", 2);
              v35 = sentencepiece::ModelInterface::eos_piece(a1[1]);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)v35, v36);
              sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a5);
LABEL_38:
              *((_QWORD *)&v39 + 1) = *MEMORY[0x1E0DE4F60];
              *(_QWORD *)((char *)&v39 + *(_QWORD *)(*((_QWORD *)&v39 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
              *(_QWORD *)&v40 = MEMORY[0x1E0DE4FB8] + 16;
              if (SBYTE7(v45) < 0)
                operator delete(__p[0]);
              goto LABEL_40;
            }
          }
          v11 += 2;
          if (v11 == v12)
          {
            v11 = (uint64_t *)v37;
            goto LABEL_29;
          }
        }
        LODWORD(v39) = 13;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"it != extra_option_map.end()", 28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"option \"", 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, *v11, v11[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"\" is not available.", 19);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a5);
        *((_QWORD *)&v39 + 1) = *MEMORY[0x1E0DE4F60];
        *(_QWORD *)((char *)&v39 + *(_QWORD *)(*((_QWORD *)&v39 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x1E0DE4F60]
                                                                                              + 24);
        *(_QWORD *)&v40 = MEMORY[0x1E0DE4FB8] + 16;
        if (SBYTE7(v45) < 0)
          operator delete(__p[0]);
LABEL_40:
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x19401E928](v47);
        if (v37)
        {
          v38 = (uint64_t *)v37;
          operator delete(v37);
        }
      }
    }
  }
  else
  {
    sentencepiece::util::Status::Status(a5);
  }
}

void sub_191D082F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SetDecodeExtraOptions(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  sentencepiece::SentencePieceProcessor::ParseExtraOptions((sentencepiece::ModelInterface **)a1, a2, a3, (char **)(a1 + 64), a4);
}

_QWORD *sentencepiece::SentencePieceProcessor::status@<X0>(sentencepiece::SentencePieceProcessor *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    if (*((_QWORD *)this + 2))
    {
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      if (!*(_QWORD *)a2)
      {
        sentencepiece::util::Status::~Status(a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
        if (!*(_QWORD *)a2)
        {
          sentencepiece::util::Status::~Status(a2);
          return sentencepiece::util::Status::Status(v6);
        }
      }
      return result;
    }
    v9 = 13;
    v8 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"normalizer_", 11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Normalizer is not initialized.", 30);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a2);
  }
  else
  {
    v9 = 13;
    v7 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"model_", 6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Model is not initialized.", 25);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a2);
  }
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x19401E928](&v12);
}

void sub_191D085CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SetVocabulary(_QWORD *a1@<X0>, _OWORD **a2@<X1>, sentencepiece::util::Status *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  _QWORD *v19;
  _QWORD v20[2];
  unsigned int v21;
  _QWORD *v22[11];
  char v23;
  uint64_t v24;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*a1 + 88))(a3);
  if (*(_QWORD *)a3)
    return;
  sentencepiece::util::Status::~Status(a3);
  v6 = a1[4];
  if (!v6 || *(_UNKNOWN **)v6 != &unk_1E2DF06B0)
  {
    v21 = 13;
    v7 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"SetVocabulary is not supported when mmap-based model is loaded.", 63);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v21, (uint64_t)a3);
LABEL_5:
    v22[0] = *(_QWORD **)MEMORY[0x1E0DE4F60];
    *(_QWORD **)((char *)v22 + *(v22[0] - 3)) = *(_QWORD **)(MEMORY[0x1E0DE4F60] + 24);
    v22[1] = (_QWORD *)(MEMORY[0x1E0DE4FB8] + 16);
    if (v23 < 0)
      operator delete(v22[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19401E928](&v24);
    return;
  }
  v8 = &sentencepiece::_TrainerSpec_default_instance_;
  if (*(_QWORD *)(v6 + 64))
    v8 = *(_DWORD **)(v6 + 64);
  if ((v8[68] - 1) >= 2)
  {
    v21 = 13;
    v19 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"type == TrainerSpec::UNIGRAM || type == TrainerSpec::BPE", 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Vocabulary constraint is only enabled in subword units.", 55);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v21, (uint64_t)a3);
    goto LABEL_5;
  }
  std::set<std::string_view>::set[abi:ne180100]<std::__wrap_iter<std::string_view const*>>((uint64_t)&v21, *a2, a2[1]);
  if (*(int *)(v6 + 48) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(v6 + 40, v9);
      v11 = v10;
      if ((*(_DWORD *)(v10 + 60) - 2) >= 3)
      {
        v12 = *(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v12 + 23) < 0)
        {
          v14 = *(_QWORD *)v12;
          v13 = *(_QWORD *)(v12 + 8);
        }
        else
        {
          v13 = *(unsigned __int8 *)(v12 + 23);
          v14 = *(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFFELL;
        }
        v20[0] = v14;
        v20[1] = v13;
        if (v22 == std::__tree<std::string_view>::find<std::string_view>((uint64_t)&v21, (uint64_t)v20)
          && ((v15 = *(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL, *(char *)(v15 + 23) < 0)
            ? (unsigned __int8 *)(v17 = *(unsigned __int8 **)v15, v16 = *(_QWORD *)(v15 + 8))
            : (v16 = *(unsigned __int8 *)(v15 + 23),
               v17 = (unsigned __int8 *)(*(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL)),
              v16 != asc_191D57358[(unint64_t)*v17 >> 4]))
        {
          if (!sentencepiece::ModelProto_SentencePiece_Type_IsValid((sentencepiece *)5))
LABEL_32:
            __assert_rtn("_internal_set_type", "sentencepiece_model.pb.h", 4686, "::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value)");
          v18 = 5;
        }
        else
        {
          if (!sentencepiece::ModelProto_SentencePiece_Type_IsValid((sentencepiece *)1))
            goto LABEL_32;
          v18 = 1;
        }
        *(_DWORD *)(v11 + 40) |= 4u;
        *(_DWORD *)(v11 + 60) = v18;
      }
      ++v9;
    }
    while (v9 < *(_DWORD *)(v6 + 48));
  }
  sentencepiece::util::Status::Status(a3);
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&v21, v22[0]);
}

void sub_191D0898C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::SentencePieceProcessor::ResetVocabulary@<X0>(sentencepiece::SentencePieceProcessor *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  result = (*(_QWORD *(**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)this + 88))(a2);
  if (!*(_QWORD *)a2)
  {
    sentencepiece::util::Status::~Status(a2);
    v5 = *((_QWORD *)this + 4);
    if (v5 && *(_UNKNOWN **)v5 == &unk_1E2DF06B0)
    {
      v7 = *(_QWORD *)(v5 + 56);
      if (v7)
        v8 = (uint64_t *)(v7 + 8);
      else
        v8 = 0;
      v9 = *(int *)(v5 + 48);
      if ((_DWORD)v9)
      {
        v10 = 8 * v9;
        do
        {
          v11 = *v8;
          if (*(_DWORD *)(*v8 + 60) == 5)
          {
            if (!sentencepiece::ModelProto_SentencePiece_Type_IsValid((sentencepiece *)1))
              sentencepiece::SentencePieceProcessor::ResetVocabulary();
            *(_DWORD *)(v11 + 40) |= 4u;
            *(_DWORD *)(v11 + 60) = 1;
          }
          ++v8;
          v10 -= 8;
        }
        while (v10);
      }
      return sentencepiece::util::Status::Status(a2);
    }
    else
    {
      v12 = 13;
      v6 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"ResetVocabulary is not supported when mmap-based model is loaded.", 65);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v12, (uint64_t)a2);
      v13[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v13[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v14 < 0)
        operator delete((void *)v13[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x19401E928](&v15);
    }
  }
  return result;
}

void sub_191D08BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::LoadVocabulary@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, sentencepiece::util::Status *a5@<X8>)
{
  void **v8;
  unint64_t v9;
  std::vector<std::string>::pointer end;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  std::vector<std::string>::pointer v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  const char *data;
  uint64_t size;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  uint64_t result;
  void *__p;
  _QWORD v25[11];
  char v26;
  uint64_t v27;
  std::vector<std::string> v28;
  uint64_t v29;
  std::string *v30;
  unint64_t v31;
  void **v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36[4];

  sentencepiece::filesystem::NewReadableFile(a2, a3, 0, &v35);
  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
  if (!*(_QWORD *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    while ((*(unsigned int (**)(uint64_t, void ***))(*(_QWORD *)v35 + 24))(v35, &v32))
    {
      if (v34 >= 0)
        v8 = (void **)&v32;
      else
        v8 = v32;
      if (v34 >= 0)
        v9 = HIBYTE(v34);
      else
        v9 = v33;
      absl::internal::Splitter::Splitter((char **)&__p, (uint64_t)v8, v9, "\t", 1, 0);
      std::vector<std::string>::vector(&v28, (uint64_t)(v25[0] - (_QWORD)__p) >> 4);
      end = v28.__end_;
      if (v28.__end_ == v28.__begin_)
      {
        v14 = v28.__end_;
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        end = v28.__begin_;
        do
        {
          MEMORY[0x19401E658](&end[v11], *(_QWORD *)((char *)__p + v12), *(_QWORD *)((char *)__p + v12 + 8));
          ++v13;
          end = v28.__begin_;
          v14 = v28.__end_;
          ++v11;
          v12 += 16;
        }
        while (v13 < 0xAAAAAAAAAAAAAAABLL * (((char *)v28.__end_ - (char *)v28.__begin_) >> 3));
      }
      if (__p)
      {
        v25[0] = __p;
        operator delete(__p);
        end = v28.__begin_;
        v14 = v28.__end_;
      }
      v15 = (char *)v14 - (char *)end;
      if (!v15)
      {
        LODWORD(__p) = 13;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v25);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(v.size()) >= (1)", 17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&__p, (uint64_t)a5);
LABEL_42:
        v25[0] = *MEMORY[0x1E0DE4F60];
        *(_QWORD *)((char *)v25 + *(_QWORD *)(v25[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
        v25[1] = MEMORY[0x1E0DE4FB8] + 16;
        if (v26 < 0)
          operator delete((void *)v25[9]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x19401E928](&v27);
        __p = &v28;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        goto LABEL_45;
      }
      if (SHIBYTE(end->__r_.__value_.__r.__words[2]) < 0)
      {
        if (!end->__r_.__value_.__l.__size_)
        {
LABEL_40:
          LODWORD(__p) = 13;
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v25);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(", 1);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)") [", 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"!v[0].empty()", 13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"] ", 2);
          sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&__p, (uint64_t)a5);
          goto LABEL_42;
        }
      }
      else if (!*((_BYTE *)&end->__r_.__value_.__s + 23))
      {
        goto LABEL_40;
      }
      v16 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 3);
      v17 = 1;
      v36[0] = 1;
      if (v16 >= 2)
      {
        if (SHIBYTE(end[1].__r_.__value_.__r.__words[2]) < 0)
        {
          data = end[1].__r_.__value_.__l.__data_;
          size = end[1].__r_.__value_.__l.__size_;
        }
        else
        {
          data = (const char *)&end[1];
          size = HIBYTE(end[1].__r_.__value_.__r.__words[2]);
        }
        if (!absl::SimpleAtoi<int>(data, size, (uint64_t)v36))
        {
          LODWORD(__p) = 13;
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v25);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(", 1);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)") [", 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"absl::SimpleAtoi(v[1], &freq)", 29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"] ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Could not parse the frequency", 29);
          sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&__p, (uint64_t)a5);
          goto LABEL_42;
        }
        v17 = v36[0];
      }
      if (v17 >= a4)
      {
        v20 = v30;
        if ((unint64_t)v30 >= v31)
        {
          v22 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>(&v29, (__int128 *)v28.__begin_);
        }
        else
        {
          if (SHIBYTE(v28.__begin_->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v30, v28.__begin_->__r_.__value_.__l.__data_, v28.__begin_->__r_.__value_.__l.__size_);
          }
          else
          {
            v21 = *(_OWORD *)&v28.__begin_->__r_.__value_.__l.__data_;
            v30->__r_.__value_.__r.__words[2] = v28.__begin_->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
          }
          v22 = v20 + 1;
        }
        v30 = v22;
      }
      __p = &v28;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 112))(a1, &__p);
    if (__p)
    {
      v25[0] = __p;
      operator delete(__p);
    }
LABEL_45:
    __p = &v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v34) < 0)
      operator delete(v32);
  }
  result = v35;
  v35 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_191D090E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  uint64_t v12;

  __p = (void *)(v10 - 176);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (void *)(v10 - 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v10 - 105) < 0)
    operator delete(*(void **)(v10 - 128));
  v12 = *(_QWORD *)(v10 - 104);
  *(_QWORD *)(v10 - 104) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  _Unwind_Resume(a1);
}

BOOL absl::SimpleAtoi<int>(const char *a1, uint64_t a2, uint64_t a3)
{
  size_t v5;
  _QWORD *v6;
  _BOOL8 v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11);
  v5 = strlen(a1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)a1, v5);
  if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
  {
    v7 = 0;
  }
  else
  {
    v8 = (_QWORD *)MEMORY[0x19401E754](v11, a3);
    v7 = (*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) == 0;
  }
  v11[0] = *MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v12[0] = v9;
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19401E928](&v14);
  return v7;
}

void sub_191D092CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::`anonymous namespace'::ToPieceArray@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  result = std::vector<std::string_view>::vector(a2, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  v4 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (_QWORD *)(v4 + v5);
      LODWORD(v4) = *(char *)(v4 + v5 + 23);
      if ((v4 & 0x80000000) != 0)
      {
        v9 = (_QWORD *)*v8;
        v4 = v8[1];
      }
      else
      {
        v4 = v4;
        v9 = v8;
      }
      v10 = (_QWORD *)(*result + v6);
      *v10 = v9;
      v10[1] = v4;
      ++v7;
      v4 = *a1;
      v6 += 16;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v7);
  }
  return result;
}

void sentencepiece::SentencePieceProcessor::Encode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD v16[6];
  int v17;
  uint64_t v18;
  void *__p;
  char v20;
  uint64_t v21;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a5);
  if (!*(_QWORD *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    if (a4)
    {
      std::vector<std::string>::__clear[abi:ne180100](a4);
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v15, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 232))(a1, a2, a3, &v15);
      if (!*(_QWORD *)a5)
      {
        sentencepiece::util::Status::~Status(a5);
        if (v18)
          v10 = v18 + 8;
        else
          v10 = 0;
        if (v17)
        {
          v11 = a4[1];
          v12 = 8 * v17;
          do
          {
            v13 = (__int128 *)(*(_QWORD *)(*(_QWORD *)v10 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v11 >= a4[2])
            {
              v11 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a4, v13);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a4, v13);
              v11 += 24;
            }
            a4[1] = v11;
            v10 += 8;
            v12 -= 8;
          }
          while (v12);
        }
        sentencepiece::util::Status::Status(a5);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v15);
    }
    else
    {
      v15 = 13;
      v14 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v15, (uint64_t)a5);
      v16[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v16[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v20 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x19401E928](&v21);
    }
  }
}

void sub_191D095AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::Encode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  _QWORD *v24;
  unsigned int v25;
  _QWORD v26[6];
  int v27;
  uint64_t v28;
  void *__p;
  char v30;
  uint64_t v31;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a5);
  if (!*(_QWORD *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    if (a4)
    {
      a4[1] = *a4;
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v25, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 232))(a1, a2, a3, &v25);
      if (!*(_QWORD *)a5)
      {
        sentencepiece::util::Status::~Status(a5);
        if (v28)
          v10 = v28 + 8;
        else
          v10 = 0;
        if (v27)
        {
          v11 = a4 + 2;
          v12 = a4[1];
          v13 = v10 + 8 * v27;
          do
          {
            v14 = *(_DWORD *)(*(_QWORD *)v10 + 64);
            if ((unint64_t)v12 >= *v11)
            {
              v16 = *a4;
              v17 = (v12 - *a4) >> 2;
              v18 = v17 + 1;
              if ((unint64_t)(v17 + 1) >> 62)
                std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
              v19 = *v11 - (_QWORD)v16;
              if (v19 >> 1 > v18)
                v18 = v19 >> 1;
              if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
                v20 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v20 = v18;
              if (v20)
              {
                v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a4 + 2), v20);
                v16 = *a4;
                v12 = a4[1];
              }
              else
              {
                v21 = 0;
              }
              v22 = &v21[4 * v17];
              *(_DWORD *)v22 = v14;
              v15 = v22 + 4;
              while (v12 != v16)
              {
                v23 = *((_DWORD *)v12 - 1);
                v12 -= 4;
                *((_DWORD *)v22 - 1) = v23;
                v22 -= 4;
              }
              *a4 = v22;
              a4[1] = v15;
              a4[2] = &v21[4 * v20];
              if (v16)
                operator delete(v16);
            }
            else
            {
              *(_DWORD *)v12 = v14;
              v15 = v12 + 4;
            }
            a4[1] = v15;
            v10 += 8;
            v12 = v15;
          }
          while (v10 != v13);
        }
        sentencepiece::util::Status::Status(a5);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v25);
    }
    else
    {
      v25 = 13;
      v24 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v25, (uint64_t)a5);
      v26[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v26 + *(_QWORD *)(v26[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v26[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v30 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x19401E928](&v31);
    }
  }
}

void sub_191D0989C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::Decode(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void *__p[3];

  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 160))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

{
  void *__p[3];

  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 272))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_191D09938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::Decode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  _QWORD *v8;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a4);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(_BYTE **)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 23) = 0;
      }
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v9, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 272))(a1, a2, &v9);
      if (!*(_QWORD *)a4)
      {
        sentencepiece::util::Status::~Status(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v10[8] & 0xFFFFFFFFFFFFFFFELL));
        sentencepiece::util::Status::Status(a4);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v9);
    }
    else
    {
      v9 = 13;
      v8 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"detokenized", 11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a4);
      v10[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v10[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v11 < 0)
        operator delete((void *)v10[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x19401E928](&v12);
    }
  }
}

{
  _QWORD *v8;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a4);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(_BYTE **)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 23) = 0;
      }
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v9, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 280))(a1, a2, &v9);
      if (!*(_QWORD *)a4)
      {
        sentencepiece::util::Status::~Status(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v10[8] & 0xFFFFFFFFFFFFFFFELL));
        sentencepiece::util::Status::Status(a4);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v9);
    }
    else
    {
      v9 = 13;
      v8 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"detokenized", 11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a4);
      v10[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v10[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v11 < 0)
        operator delete((void *)v10[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x19401E928](&v12);
    }
  }
}

void sub_191D09B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sub_191D09D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::NBestEncode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, sentencepiece::util::Status *a6@<X8>)
{
  uint64_t v12;
  void **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  std::string *v28;
  unint64_t v29;
  void **v30;
  _QWORD v31[2];
  int v32;
  uint64_t v33;
  void *__p;
  char v35;
  uint64_t v36;
  __int128 **v37;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*(_QWORD *)a6)
  {
    sentencepiece::util::Status::~Status(a6);
    if (a5)
    {
      v12 = *a5;
      v13 = (void **)a5[1];
      while (v13 != (void **)v12)
      {
        v13 -= 3;
        v30 = v13;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v30);
      }
      a5[1] = v12;
      sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v30, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void ***))(*(_QWORD *)a1 + 240))(a1, a2, a3, a4, &v30);
      if (!*(_QWORD *)a6)
      {
        sentencepiece::util::Status::~Status(a6);
        if (v33)
          v14 = (uint64_t *)(v33 + 8);
        else
          v14 = 0;
        if (v32)
        {
          v15 = &v14[v32];
          do
          {
            v16 = *v14;
            v27 = 0;
            v28 = 0;
            v29 = 0;
            v17 = *(_QWORD *)(v16 + 64);
            if (v17)
              v18 = v17 + 8;
            else
              v18 = 0;
            v19 = *(int *)(v16 + 56);
            if ((_DWORD)v19)
            {
              v20 = 0;
              v21 = 8 * v19;
              do
              {
                v22 = *(_QWORD *)(*(_QWORD *)v18 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if ((unint64_t)v20 >= v29)
                {
                  v20 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v27, (__int128 *)v22);
                }
                else
                {
                  if (*(char *)(v22 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)v22, *(_QWORD *)(v22 + 8));
                  }
                  else
                  {
                    v23 = *(_OWORD *)v22;
                    v20->__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 16);
                    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v23;
                  }
                  ++v20;
                }
                v28 = v20;
                v18 += 8;
                v21 -= 8;
              }
              while (v21);
            }
            v24 = a5[1];
            if (v24 >= a5[2])
            {
              v25 = std::vector<std::vector<std::string>>::__emplace_back_slow_path<std::vector<std::string>&>(a5, &v27);
            }
            else
            {
              std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string>&>((uint64_t)a5, &v27);
              v25 = v24 + 24;
            }
            a5[1] = v25;
            v37 = &v27;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
            ++v14;
          }
          while (v14 != v15);
        }
        sentencepiece::util::Status::Status(a6);
      }
      sentencepiece::NBestSentencePieceText::~NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v30);
    }
    else
    {
      LODWORD(v30) = 13;
      v26 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v30, (uint64_t)a6);
      v31[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v31 + *(_QWORD *)(v31[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v31[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v35 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x19401E928](&v36);
    }
  }
}

{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  void *__p;
  char *v34;
  char *v35;
  unsigned int v36;
  _QWORD v37[2];
  int v38;
  uint64_t v39;
  void *v40;
  char v41;
  uint64_t v42;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*(_QWORD *)a6)
  {
    sentencepiece::util::Status::~Status(a6);
    if (a5)
    {
      std::vector<std::vector<int>>::__clear[abi:ne180100](a5);
      sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v36, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 240))(a1, a2, a3, a4, &v36);
      if (!*(_QWORD *)a6)
      {
        sentencepiece::util::Status::~Status(a6);
        if (v39)
          v12 = (uint64_t *)(v39 + 8);
        else
          v12 = 0;
        if (v38)
        {
          v32 = &v12[v38];
          do
          {
            v13 = *v12;
            __p = 0;
            v34 = 0;
            v35 = 0;
            v14 = *(_QWORD *)(v13 + 64);
            if (v14)
              v15 = v14 + 8;
            else
              v15 = 0;
            v16 = *(int *)(v13 + 56);
            if ((_DWORD)v16)
            {
              v17 = 0;
              v18 = v15 + 8 * v16;
              do
              {
                v19 = *(_DWORD *)(*(_QWORD *)v15 + 64);
                if (v17 >= v35)
                {
                  v21 = (char *)__p;
                  v22 = (v17 - (_BYTE *)__p) >> 2;
                  v23 = v22 + 1;
                  if ((unint64_t)(v22 + 1) >> 62)
                    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
                  v24 = v35 - (_BYTE *)__p;
                  if ((v35 - (_BYTE *)__p) >> 1 > v23)
                    v23 = v24 >> 1;
                  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
                    v25 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v25 = v23;
                  if (v25)
                  {
                    v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v35, v25);
                    v21 = (char *)__p;
                    v17 = v34;
                  }
                  else
                  {
                    v26 = 0;
                  }
                  v27 = &v26[4 * v22];
                  *(_DWORD *)v27 = v19;
                  v20 = v27 + 4;
                  while (v17 != v21)
                  {
                    v28 = *((_DWORD *)v17 - 1);
                    v17 -= 4;
                    *((_DWORD *)v27 - 1) = v28;
                    v27 -= 4;
                  }
                  __p = v27;
                  v34 = v20;
                  v35 = &v26[4 * v25];
                  if (v21)
                    operator delete(v21);
                }
                else
                {
                  *(_DWORD *)v17 = v19;
                  v20 = v17 + 4;
                }
                v34 = v20;
                v15 += 8;
                v17 = v20;
              }
              while (v15 != v18);
            }
            v29 = a5[1];
            if (v29 >= a5[2])
            {
              v30 = std::vector<std::vector<int>>::__emplace_back_slow_path<std::vector<int>&>(a5, (uint64_t)&__p);
            }
            else
            {
              std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&>((uint64_t)a5, (uint64_t)&__p);
              v30 = v29 + 24;
            }
            a5[1] = v30;
            if (__p)
            {
              v34 = (char *)__p;
              operator delete(__p);
            }
            ++v12;
          }
          while (v12 != v32);
        }
        sentencepiece::util::Status::Status(a6);
      }
      sentencepiece::NBestSentencePieceText::~NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v36);
    }
    else
    {
      v36 = 13;
      v31 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v36, (uint64_t)a6);
      v37[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v37 + *(_QWORD *)(v37[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v37[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v41 < 0)
        operator delete(v40);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x19401E928](&v42);
    }
  }
}

void sub_191D0A06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

void sub_191D0A408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a14);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, sentencepiece::util::Status *a6@<X8>, float a7@<S0>)
{
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 *v17;
  _QWORD *v18;
  unsigned int v19;
  _QWORD v20[6];
  int v21;
  uint64_t v22;
  void *__p;
  char v24;
  uint64_t v25;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*(_QWORD *)a6)
  {
    sentencepiece::util::Status::~Status(a6);
    if (a5)
    {
      std::vector<std::string>::__clear[abi:ne180100](a5);
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v19, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)a1 + 248))(a1, a2, a3, a4, &v19, a7);
      if (!*(_QWORD *)a6)
      {
        sentencepiece::util::Status::~Status(a6);
        if (v22)
          v14 = v22 + 8;
        else
          v14 = 0;
        if (v21)
        {
          v15 = a5[1];
          v16 = 8 * v21;
          do
          {
            v17 = (__int128 *)(*(_QWORD *)(*(_QWORD *)v14 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v15 >= a5[2])
            {
              v15 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a5, v17);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a5, v17);
              v15 += 24;
            }
            a5[1] = v15;
            v14 += 8;
            v16 -= 8;
          }
          while (v16);
        }
        sentencepiece::util::Status::Status(a6);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v19);
    }
    else
    {
      v19 = 13;
      v18 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v19, (uint64_t)a6);
      v20[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v20[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v24 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x19401E928](&v25);
    }
  }
}

void sub_191D0A69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X4>, sentencepiece::util::Status *a6@<X8>, float a7@<S0>)
{
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  _QWORD *v28;
  unsigned int v29;
  _QWORD v30[6];
  int v31;
  uint64_t v32;
  void *__p;
  char v34;
  uint64_t v35;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*(_QWORD *)a6)
  {
    sentencepiece::util::Status::~Status(a6);
    if (a5)
    {
      a5[1] = *a5;
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v29, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)a1 + 248))(a1, a2, a3, a4, &v29, a7);
      if (!*(_QWORD *)a6)
      {
        sentencepiece::util::Status::~Status(a6);
        if (v32)
          v14 = v32 + 8;
        else
          v14 = 0;
        if (v31)
        {
          v15 = a5 + 2;
          v16 = a5[1];
          v17 = v14 + 8 * v31;
          do
          {
            v18 = *(_DWORD *)(*(_QWORD *)v14 + 64);
            if ((unint64_t)v16 >= *v15)
            {
              v20 = *a5;
              v21 = (v16 - *a5) >> 2;
              v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 62)
                std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
              v23 = *v15 - (_QWORD)v20;
              if (v23 >> 1 > v22)
                v22 = v23 >> 1;
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
                v24 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v24 = v22;
              if (v24)
              {
                v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a5 + 2), v24);
                v20 = *a5;
                v16 = a5[1];
              }
              else
              {
                v25 = 0;
              }
              v26 = &v25[4 * v21];
              *(_DWORD *)v26 = v18;
              v19 = v26 + 4;
              while (v16 != v20)
              {
                v27 = *((_DWORD *)v16 - 1);
                v16 -= 4;
                *((_DWORD *)v26 - 1) = v27;
                v26 -= 4;
              }
              *a5 = v26;
              a5[1] = v19;
              a5[2] = &v25[4 * v24];
              if (v20)
                operator delete(v20);
            }
            else
            {
              *(_DWORD *)v16 = v18;
              v19 = v16 + 4;
            }
            a5[1] = v19;
            v14 += 8;
            v16 = v19;
          }
          while (v14 != v17);
        }
        sentencepiece::util::Status::Status(a6);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v29);
    }
    else
    {
      v29 = 13;
      v28 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v29, (uint64_t)a6);
      v30[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v30[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v34 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x19401E928](&v35);
    }
  }
}

void sub_191D0A9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScore(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, sentencepiece::util::Status *a8@<X8>, float a9@<S0>)
{
  uint64_t v18;
  void **v19;
  std::string *v20;
  std::string *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string *end;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  std::vector<std::string> v35;
  void **v36;
  _QWORD v37[2];
  int v38;
  uint64_t v39;
  void *__p;
  char v41;
  uint64_t v42;
  void **v43[2];

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a8);
  if (!*(_QWORD *)a8)
  {
    sentencepiece::util::Status::~Status(a8);
    if (a7)
    {
      v18 = *a7;
      v19 = (void **)a7[1];
      while (v19 != (void **)v18)
      {
        v19 -= 4;
        v36 = v19;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v36);
      }
      a7[1] = v18;
      sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v36, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void ***, float))(*(_QWORD *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v36, a9);
      if (!*(_QWORD *)a8)
      {
        sentencepiece::util::Status::~Status(a8);
        v20 = (std::string *)*a7;
        v21 = (std::string *)a7[1];
        while (v21 != v20)
        {
          v21 = (std::string *)((char *)v21 - 32);
          v35.__begin_ = v21;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
        }
        a7[1] = (uint64_t)v20;
        std::vector<std::pair<std::vector<std::string>,float>>::reserve(a7, v38);
        if (v39)
          v23 = (uint64_t *)(v39 + 8);
        else
          v23 = 0;
        if (v38)
        {
          v24 = &v23[v38];
          do
          {
            v25 = *v23;
            memset(&v35, 0, sizeof(v35));
            std::vector<std::string>::reserve(&v35, *(int *)(v25 + 56));
            v26 = *(_QWORD *)(v25 + 64);
            if (v26)
              v27 = v26 + 8;
            else
              v27 = 0;
            v28 = *(int *)(v25 + 56);
            if ((_DWORD)v28)
            {
              end = v35.__end_;
              v30 = 8 * v28;
              do
              {
                v31 = *(_QWORD *)(*(_QWORD *)v27 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (end >= v35.__end_cap_.__value_)
                {
                  end = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v35, (__int128 *)v31);
                }
                else
                {
                  if (*(char *)(v31 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)v31, *(_QWORD *)(v31 + 8));
                  }
                  else
                  {
                    v32 = *(_OWORD *)v31;
                    end->__r_.__value_.__r.__words[2] = *(_QWORD *)(v31 + 16);
                    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v32;
                  }
                  ++end;
                }
                v35.__end_ = end;
                v27 += 8;
                v30 -= 8;
              }
              while (v30);
            }
            LODWORD(v43[0]) = *(_DWORD *)(v25 + 80);
            v33 = a7[1];
            if (v33 >= a7[2])
            {
              v34 = std::vector<std::pair<std::vector<std::string>,float>>::__emplace_back_slow_path<std::vector<std::string>&,float>(a7, (__int128 **)&v35, v43);
            }
            else
            {
              std::vector<std::pair<std::vector<std::string>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string>&,float>((uint64_t)a7, (__int128 **)&v35, (float *)v43);
              v34 = v33 + 32;
            }
            a7[1] = v34;
            v43[0] = (void **)&v35;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v43);
            ++v23;
          }
          while (v23 != v24);
        }
        sentencepiece::util::Status::Status(a8);
      }
      sentencepiece::NBestSentencePieceText::~NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v36);
    }
    else
    {
      LODWORD(v36) = 13;
      v22 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v36, (uint64_t)a8);
      v37[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v37 + *(_QWORD *)(v37[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v37[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v41 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x19401E928](&v42);
    }
  }
}

{
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::vector<int>::pointer end;
  int v25;
  int *v26;
  std::vector<int>::pointer begin;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  int *v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  sentencepiece::util::Status *v38;
  uint64_t *v39;
  int v40;
  std::vector<int> v41;
  unsigned int v42;
  _QWORD v43[2];
  int v44;
  uint64_t v45;
  void *__p;
  char v47;
  uint64_t v48;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a8);
  if (!*(_QWORD *)a8)
  {
    sentencepiece::util::Status::~Status(a8);
    if (a7)
    {
      std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__clear[abi:ne180100](a7);
      sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v42, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v42, a9);
      if (!*(_QWORD *)a8)
      {
        v38 = a8;
        sentencepiece::util::Status::~Status(a8);
        std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__clear[abi:ne180100](a7);
        std::vector<std::pair<std::vector<int>,float>>::reserve(a7, v44);
        if (v45)
          v18 = (uint64_t *)(v45 + 8);
        else
          v18 = 0;
        if (v44)
        {
          v39 = &v18[v44];
          do
          {
            v19 = *v18;
            memset(&v41, 0, sizeof(v41));
            std::vector<int>::reserve(&v41, *(int *)(v19 + 56));
            v20 = *(_QWORD *)(v19 + 64);
            if (v20)
              v21 = v20 + 8;
            else
              v21 = 0;
            v22 = *(int *)(v19 + 56);
            if ((_DWORD)v22)
            {
              v23 = v21 + 8 * v22;
              end = v41.__end_;
              do
              {
                v25 = *(_DWORD *)(*(_QWORD *)v21 + 64);
                if (end >= v41.__end_cap_.__value_)
                {
                  begin = v41.__begin_;
                  v28 = end - v41.__begin_;
                  v29 = v28 + 1;
                  if ((unint64_t)(v28 + 1) >> 62)
                    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
                  v30 = (char *)v41.__end_cap_.__value_ - (char *)v41.__begin_;
                  if (((char *)v41.__end_cap_.__value_ - (char *)v41.__begin_) >> 1 > v29)
                    v29 = v30 >> 1;
                  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
                    v31 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v31 = v29;
                  if (v31)
                  {
                    v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v41.__end_cap_, v31);
                    begin = v41.__begin_;
                    end = v41.__end_;
                  }
                  else
                  {
                    v32 = 0;
                  }
                  v33 = (int *)&v32[4 * v28];
                  *v33 = v25;
                  v26 = v33 + 1;
                  while (end != begin)
                  {
                    v34 = *--end;
                    *--v33 = v34;
                  }
                  v41.__begin_ = v33;
                  v41.__end_ = v26;
                  v41.__end_cap_.__value_ = (int *)&v32[4 * v31];
                  if (begin)
                    operator delete(begin);
                }
                else
                {
                  *end = v25;
                  v26 = end + 1;
                }
                v41.__end_ = v26;
                v21 += 8;
                end = v26;
              }
              while (v21 != v23);
            }
            v40 = *(_DWORD *)(v19 + 80);
            v35 = a7[1];
            if (v35 >= a7[2])
            {
              v36 = std::vector<std::pair<std::vector<int>,float>>::__emplace_back_slow_path<std::vector<int>&,float>(a7, (uint64_t)&v41, &v40);
            }
            else
            {
              std::vector<std::pair<std::vector<int>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&,float>((uint64_t)a7, (uint64_t)&v41, (float *)&v40);
              v36 = v35 + 32;
            }
            a7[1] = v36;
            if (v41.__begin_)
            {
              v41.__end_ = v41.__begin_;
              operator delete(v41.__begin_);
            }
            ++v18;
          }
          while (v18 != v39);
        }
        sentencepiece::util::Status::Status(v38);
      }
      sentencepiece::NBestSentencePieceText::~NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v42);
    }
    else
    {
      v42 = 13;
      v37 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v42, (uint64_t)a8);
      v43[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v43 + *(_QWORD *)(v43[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v43[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v47 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x19401E928](&v48);
    }
  }
}

void sub_191D0AD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<std::vector<std::string>,float>>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 32 * v6;
    std::vector<std::pair<std::vector<std::string>,float>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer(v7);
  }
  return result;
}

void sub_191D0AE08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::allocator<std::string> *p_end_cap;
  std::string *value;
  int64_t v5;
  uint64_t v6;
  std::__split_buffer<std::string> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_191D0AEB8(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void sub_191D0B270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a16);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<int>,float>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    std::vector<std::pair<std::vector<int>,float>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_191D0B338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::SentencePieceProcessor::PopulateSentencePieceText@<X0>(sentencepiece::ModelInterface **a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X5>, unsigned __int8 ***a6@<X6>, uint64_t a7@<X7>, sentencepiece::util::Status *a8@<X8>)
{
  unsigned __int8 **v10;
  uint64_t *v11;
  unint64_t v12;
  char v13;
  size_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  size_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  char *v28;
  size_t v29;
  sentencepiece *v30;
  unsigned int v31;
  int *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string *p_dst;
  std::string::size_type size;
  int v40;
  std::string *v41;
  std::string::size_type v42;
  uint64_t v43;
  google::protobuf::internal::ArenaImpl *v44;
  int v45;
  uint64_t v46;
  google::protobuf::internal::ArenaImpl *v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  google::protobuf::internal::ArenaImpl *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::string *v59;
  int *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  google::protobuf::internal::ArenaImpl *v66;
  int v67;
  uint64_t v68;
  google::protobuf::internal::ArenaImpl *v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  const std::string::value_type *v74;
  std::string::size_type v75;
  std::string *v76;
  __int128 v77;
  uint64_t v78;
  google::protobuf::internal::ArenaImpl *v79;
  size_t v80;
  uint64_t v81;
  std::string *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  const std::string::value_type *v87;
  std::string::size_type v88;
  std::string *v89;
  __int128 v90;
  uint64_t v91;
  google::protobuf::internal::ArenaImpl *v92;
  _QWORD *result;
  uint64_t v94;
  google::protobuf::internal::ArenaImpl *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  google::protobuf::internal::ArenaStringPtr *v104;
  unsigned __int8 **v110;
  int v111;
  unsigned int *v112;
  char *__src;
  size_t __len;
  std::string __dst;
  void *__p[2];
  uint64_t v117;
  void *v118;
  char v119;
  uint64_t v120;

  v10 = *a6;
  v110 = a6[1];
  if (*a6 != v110)
  {
    v11 = a5;
    v12 = 0;
    v13 = 0;
    v112 = (unsigned int *)(a7 + 48);
    while (1)
    {
      v14 = (size_t)v10[1];
      if (!v14)
      {
        LODWORD(__p[0]) = 13;
        v97 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"!w.empty()", 10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"Empty piece is not allowed.", 27);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v15 = *v10;
      v16 = *((unsigned int *)v10 + 4);
      v111 = (*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 66))(a1, v16);
      if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 67))(a1, v16))
      {
        v17 = *(int **)(a7 + 64);
        if (v17)
        {
          v18 = *(int *)(a7 + 56);
          v19 = *v17;
          if ((int)v18 < *v17)
          {
            *(_DWORD *)(a7 + 56) = v18 + 1;
            v20 = *(_QWORD *)&v17[2 * v18 + 2];
LABEL_58:
            *(_DWORD *)(v20 + 40) |= 1u;
            std::string::basic_string[abi:ne180100](__p, v15, v14);
            v53 = *(_QWORD *)(v20 + 8);
            v54 = (google::protobuf::internal::ArenaImpl *)(v53 & 0xFFFFFFFFFFFFFFFELL);
            if ((v53 & 1) != 0)
              v54 = *(google::protobuf::internal::ArenaImpl **)v54;
            google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v20 + 48), (__int128 *)__p, v54);
            if (SHIBYTE(v117) < 0)
              operator delete(__p[0]);
            v55 = *(_DWORD *)(v20 + 40);
            *(_DWORD *)(v20 + 64) = v16;
            v56 = *(_QWORD *)(*v11 + 8 * v12);
            *(_DWORD *)(v20 + 68) = v56;
            *(_DWORD *)(v20 + 40) = v55 | 0x1C;
            goto LABEL_83;
          }
          if (v19 != *(_DWORD *)(a7 + 60))
          {
LABEL_57:
            *v17 = v19 + 1;
            v20 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(_QWORD *)(a7 + 48));
            v51 = *(_QWORD *)(a7 + 64);
            v52 = *(int *)(a7 + 56);
            *(_DWORD *)(a7 + 56) = v52 + 1;
            *(_QWORD *)(v51 + 8 * v52 + 8) = v20;
            goto LABEL_58;
          }
        }
        else
        {
          v19 = *(_DWORD *)(a7 + 60);
        }
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v112, v19 + 1);
        v17 = *(int **)(a7 + 64);
        v19 = *v17;
        goto LABEL_57;
      }
      v21 = *v11;
      v22 = v11[1] - *v11;
      if (v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        v98 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(begin) < (norm_to_orig.size())", 31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v23 = v14 + v12;
      if (v14 + v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        v99 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(end) < (norm_to_orig.size())", 29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v24 = *(_QWORD *)(v21 + 8 * v12);
      if (v24 > a3)
      {
        LODWORD(__p[0]) = 13;
        v100 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(orig_begin) <= (input.size())", 30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v25 = *(_QWORD *)(v21 + 8 * v23);
      if (v25 > a3)
      {
        LODWORD(__p[0]) = 13;
        v101 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(orig_end) <= (input.size())", 28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v26 = v25 - v24;
      if (v25 < v24)
      {
        LODWORD(__p[0]) = 13;
        v102 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(orig_begin) <= (orig_end)", 26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      if (a3 >= v24)
        v27 = v24;
      else
        v27 = a3;
      v28 = &a2[v27];
      v29 = a3 - v27;
      if (v29 < v26)
        v26 = v29;
      __src = v28;
      __len = v26;
      if (v111)
      {
        if ((*(unsigned int (**)(sentencepiece::ModelInterface *))(*(_QWORD *)a1[1] + 184))(a1[1]))
        {
          while (1)
          {
            v31 = *v15++;
            v30 = (sentencepiece *)v31;
            v32 = *(int **)(a7 + 64);
            if (!v32)
              break;
            v33 = *(int *)(a7 + 56);
            v34 = *v32;
            if ((int)v33 >= *v32)
            {
              if (v34 == *(_DWORD *)(a7 + 60))
              {
LABEL_25:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v112, v34 + 1);
                v32 = *(int **)(a7 + 64);
                v34 = *v32;
              }
              *v32 = v34 + 1;
              v35 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(_QWORD *)(a7 + 48));
              v36 = *(_QWORD *)(a7 + 64);
              v37 = *(int *)(a7 + 56);
              *(_DWORD *)(a7 + 56) = v37 + 1;
              *(_QWORD *)(v36 + 8 * v37 + 8) = v35;
              goto LABEL_27;
            }
            *(_DWORD *)(a7 + 56) = v33 + 1;
            v35 = *(_QWORD *)&v32[2 * v33 + 2];
LABEL_27:
            sentencepiece::ByteToPiece(v30, (uint64_t)&__dst);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_dst = &__dst;
            else
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              size = __dst.__r_.__value_.__l.__size_;
            v40 = (*(uint64_t (**)(sentencepiece::ModelInterface *, std::string *, std::string::size_type))(*(_QWORD *)a1[1] + 112))(a1[1], p_dst, size);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v41 = &__dst;
            else
              v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v42 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              v42 = __dst.__r_.__value_.__l.__size_;
            *(_DWORD *)(v35 + 40) |= 1u;
            std::string::basic_string[abi:ne180100](__p, v41, v42);
            v43 = *(_QWORD *)(v35 + 8);
            v44 = (google::protobuf::internal::ArenaImpl *)(v43 & 0xFFFFFFFFFFFFFFFELL);
            if ((v43 & 1) != 0)
              v44 = *(google::protobuf::internal::ArenaImpl **)v44;
            google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v35 + 48), (__int128 *)__p, v44);
            if (SHIBYTE(v117) < 0)
              operator delete(__p[0]);
            v45 = *(_DWORD *)(v35 + 40);
            *(_DWORD *)(v35 + 40) = v45 | 4;
            *(_DWORD *)(v35 + 64) = v40;
            if (v14 == 1)
            {
              *(_DWORD *)(v35 + 40) = v45 | 6;
              std::string::basic_string[abi:ne180100](__p, __src, __len);
              v46 = *(_QWORD *)(v35 + 8);
              v47 = (google::protobuf::internal::ArenaImpl *)(v46 & 0xFFFFFFFFFFFFFFFELL);
              if ((v46 & 1) != 0)
                v47 = *(google::protobuf::internal::ArenaImpl **)v47;
              google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v35 + 56), (__int128 *)__p, v47);
              if (SHIBYTE(v117) < 0)
                operator delete(__p[0]);
              v48 = *(_DWORD *)(v35 + 40);
              *(_DWORD *)(v35 + 68) = v24;
              v49 = v48 | 0x18;
              v50 = v25;
            }
            else
            {
              *(_DWORD *)(v35 + 68) = v24;
              v49 = v45 | 0x1C;
              v50 = v24;
            }
            *(_DWORD *)(v35 + 40) = v49;
            *(_DWORD *)(v35 + 72) = v50;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            if (!--v14)
            {
              v12 = v23;
              v11 = a5;
              goto LABEL_84;
            }
          }
          v34 = *(_DWORD *)(a7 + 60);
          goto LABEL_25;
        }
        if ((v13 & 1) != 0)
        {
          v57 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t)v112, *(_DWORD *)(a7 + 56) - 1);
          if (v14 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_141;
          v20 = v57;
          v58 = *(_QWORD *)(v57 + 48);
          v104 = (google::protobuf::internal::ArenaStringPtr *)(v57 + 48);
          if (v14 >= 0x17)
          {
            v71 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17)
              v71 = v14 | 7;
            v103 = v71 + 1;
            v59 = (std::string *)operator new(v71 + 1);
            __dst.__r_.__value_.__l.__size_ = v14;
            __dst.__r_.__value_.__r.__words[2] = v103 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
            v59 = &__dst;
          }
          v72 = v58 & 0xFFFFFFFFFFFFFFFELL;
          memmove(v59, v15, v14);
          v59->__r_.__value_.__s.__data_[v14] = 0;
          v73 = *(char *)(v72 + 23);
          if (v73 >= 0)
            v74 = (const std::string::value_type *)v72;
          else
            v74 = *(const std::string::value_type **)v72;
          if (v73 >= 0)
            v75 = *(unsigned __int8 *)(v72 + 23);
          else
            v75 = *(_QWORD *)(v72 + 8);
          v76 = std::string::insert(&__dst, 0, v74, v75);
          v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          v117 = v76->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 1u;
          v78 = *(_QWORD *)(v20 + 8);
          v79 = (google::protobuf::internal::ArenaImpl *)(v78 & 0xFFFFFFFFFFFFFFFELL);
          v80 = __len;
          if ((v78 & 1) != 0)
            v79 = *(google::protobuf::internal::ArenaImpl **)v79;
          google::protobuf::internal::ArenaStringPtr::Set(v104, (__int128 *)__p, v79);
          if (SHIBYTE(v117) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          if (__len > 0x7FFFFFFFFFFFFFF7)
LABEL_141:
            std::string::__throw_length_error[abi:ne180100]();
          v81 = *(_QWORD *)(v20 + 56);
          if (__len >= 0x17)
          {
            v83 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((__len | 7) != 0x17)
              v83 = __len | 7;
            v84 = v83 + 1;
            v82 = (std::string *)operator new(v83 + 1);
            v85 = v84 | 0x8000000000000000;
            v80 = __len;
            __dst.__r_.__value_.__l.__size_ = __len;
            __dst.__r_.__value_.__r.__words[2] = v85;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
            v82 = &__dst;
            if (!__len)
              goto LABEL_109;
          }
          memmove(v82, __src, v80);
LABEL_109:
          v82->__r_.__value_.__s.__data_[v80] = 0;
          v86 = *(char *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          if (v86 >= 0)
            v87 = (const std::string::value_type *)(v81 & 0xFFFFFFFFFFFFFFFELL);
          else
            v87 = *(const std::string::value_type **)(v81 & 0xFFFFFFFFFFFFFFFELL);
          if (v86 >= 0)
            v88 = *(unsigned __int8 *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          else
            v88 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 8);
          v89 = std::string::insert(&__dst, 0, v87, v88);
          v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          v117 = v89->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 2u;
          v91 = *(_QWORD *)(v20 + 8);
          v92 = (google::protobuf::internal::ArenaImpl *)(v91 & 0xFFFFFFFFFFFFFFFELL);
          v11 = a5;
          if ((v91 & 1) != 0)
            v92 = *(google::protobuf::internal::ArenaImpl **)v92;
          google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v20 + 56), (__int128 *)__p, v92);
          if (SHIBYTE(v117) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          *(_DWORD *)(v20 + 40) |= 0x10u;
          LODWORD(v56) = v25;
          v12 = v23;
          goto LABEL_83;
        }
      }
      v60 = *(int **)(a7 + 64);
      if (!v60)
        break;
      v61 = *(int *)(a7 + 56);
      v62 = *v60;
      if ((int)v61 >= *v60)
      {
        if (v62 == *(_DWORD *)(a7 + 60))
        {
LABEL_72:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v112, v62 + 1);
          v60 = *(int **)(a7 + 64);
          v62 = *v60;
        }
        *v60 = v62 + 1;
        v20 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(_QWORD *)(a7 + 48));
        v63 = *(_QWORD *)(a7 + 64);
        v64 = *(int *)(a7 + 56);
        *(_DWORD *)(a7 + 56) = v64 + 1;
        *(_QWORD *)(v63 + 8 * v64 + 8) = v20;
        goto LABEL_74;
      }
      *(_DWORD *)(a7 + 56) = v61 + 1;
      v20 = *(_QWORD *)&v60[2 * v61 + 2];
LABEL_74:
      *(_DWORD *)(v20 + 40) |= 1u;
      std::string::basic_string[abi:ne180100](__p, v15, v14);
      v65 = *(_QWORD *)(v20 + 8);
      v66 = (google::protobuf::internal::ArenaImpl *)(v65 & 0xFFFFFFFFFFFFFFFELL);
      if ((v65 & 1) != 0)
        v66 = *(google::protobuf::internal::ArenaImpl **)v66;
      google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v20 + 48), (__int128 *)__p, v66);
      if (SHIBYTE(v117) < 0)
        operator delete(__p[0]);
      v67 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 64) = v16;
      *(_DWORD *)(v20 + 40) = v67 | 6;
      std::string::basic_string[abi:ne180100](__p, __src, __len);
      v68 = *(_QWORD *)(v20 + 8);
      v69 = (google::protobuf::internal::ArenaImpl *)(v68 & 0xFFFFFFFFFFFFFFFELL);
      if ((v68 & 1) != 0)
        v69 = *(google::protobuf::internal::ArenaImpl **)v69;
      google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v20 + 56), (__int128 *)__p, v69);
      if (SHIBYTE(v117) < 0)
        operator delete(__p[0]);
      v70 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 68) = v24;
      *(_DWORD *)(v20 + 40) = v70 | 0x18;
      LODWORD(v56) = v25;
      v12 = v23;
      v11 = a5;
LABEL_83:
      *(_DWORD *)(v20 + 72) = v56;
      v23 = v12;
LABEL_84:
      v10 += 3;
      v13 = v111;
      if (v10 == v110)
        goto LABEL_123;
    }
    v62 = *(_DWORD *)(a7 + 60);
    goto LABEL_72;
  }
  v23 = 0;
LABEL_123:
  if (v23 == a4)
  {
    result = sentencepiece::SentencePieceProcessor::ApplyExtraOptions(a1, (uint64_t)(a1 + 5), a7, a8);
    if (!*(_QWORD *)a8)
    {
      sentencepiece::util::Status::~Status(a8);
      *(_DWORD *)(a7 + 40) |= 1u;
      std::string::basic_string[abi:ne180100](__p, a2, a3);
      v94 = *(_QWORD *)(a7 + 8);
      v95 = (google::protobuf::internal::ArenaImpl *)(v94 & 0xFFFFFFFFFFFFFFFELL);
      if ((v94 & 1) != 0)
        v95 = *(google::protobuf::internal::ArenaImpl **)v95;
      google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(a7 + 72), (__int128 *)__p, v95);
      if (SHIBYTE(v117) < 0)
        operator delete(__p[0]);
      return sentencepiece::util::Status::Status(a8);
    }
    return result;
  }
  LODWORD(__p[0]) = 13;
  v96 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(consumed) == (normalized.size())", 33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"all normalized characters are not consumed.", 43);
  sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
LABEL_137:
  __p[1] = *(void **)MEMORY[0x1E0DE4F60];
  *(void **)((char *)&__p[1] + *((_QWORD *)__p[1] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  v117 = MEMORY[0x1E0DE4FB8] + 16;
  if (v119 < 0)
    operator delete(v118);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x19401E928](&v120);
}

void sub_191D0C018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sentencepiece::SentencePieceProcessor::ApplyExtraOptions@<X0>(sentencepiece::ModelInterface **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _DWORD *v5;
  _DWORD *v6;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  sentencepiece::SentencePieceText_SentencePiece **v13;
  BOOL v14;
  unint64_t v15;
  sentencepiece::SentencePieceText_SentencePiece *v16;
  BOOL v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  int *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  google::protobuf::internal::ArenaImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string *v38;
  uint64_t v39;
  const char *v40;
  size_t v41;
  int v42;
  char *v43;
  size_t v44;
  uint64_t v45;
  google::protobuf::internal::ArenaImpl *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  size_t v50;
  int v51;
  char *v52;
  size_t v53;
  uint64_t v54;
  google::protobuf::internal::ArenaImpl *v55;
  char v57;
  std::string __p[2];

  v6 = *(_DWORD **)a2;
  v5 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v5)
  {
    v9 = (unsigned int *)(a3 + 48);
    while (1)
    {
      switch(*v6)
      {
        case 0:
          v10 = *(_QWORD *)(a3 + 64);
          if (v10)
            v11 = v10 + 8;
          else
            v11 = 0;
          v12 = *(int *)(a3 + 56);
          v13 = (sentencepiece::SentencePieceText_SentencePiece **)(v11 + 8 * v12 - 8);
          if ((_DWORD)v12)
            v14 = (unint64_t)v13 > v11;
          else
            v14 = 0;
          if (v14)
          {
            v15 = v11 + 8;
            do
            {
              v16 = *v13--;
              sentencepiece::swap(*(uint64_t **)(v15 - 8), v16, (sentencepiece::SentencePieceText_SentencePiece *)a3);
              v17 = v15 >= (unint64_t)v13;
              v15 += 8;
            }
            while (!v17);
          }
          goto LABEL_52;
        case 1:
          v18 = *(int **)(a3 + 64);
          if (!v18)
          {
            v20 = *(_DWORD *)(a3 + 60);
LABEL_34:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v20 + 1);
            v18 = *(int **)(a3 + 64);
            v20 = *v18;
            goto LABEL_35;
          }
          v19 = *(_DWORD *)(a3 + 56);
          v20 = *v18;
          if (v19 < *v18)
          {
            v21 = v19 + 1;
            *(_DWORD *)(a3 + 56) = v19 + 1;
            goto LABEL_36;
          }
          if (v20 == *(_DWORD *)(a3 + 60))
            goto LABEL_34;
LABEL_35:
          *v18 = v20 + 1;
          v32 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(_QWORD *)(a3 + 48));
          v33 = *(_QWORD *)(a3 + 64);
          v34 = *(int *)(a3 + 56);
          v21 = v34 + 1;
          *(_DWORD *)(a3 + 56) = v34 + 1;
          *(_QWORD *)(v33 + 8 * v34 + 8) = v32;
LABEL_36:
          if (v21 > 1)
          {
            v35 = v21;
            do
            {
              v36 = *(_QWORD *)(a3 + 64) + 8;
              v37 = *(_QWORD *)(v36 + 8 * (v35 - 2));
              *(_QWORD *)(v36 + 8 * (v35 - 2)) = *(_QWORD *)(v36 + 8 * (v35 - 1));
              *(_QWORD *)(v36 + 8 * (v35 - 1)) = v37;
              v14 = v35-- > 2;
            }
            while (v14);
          }
          if (v21 < 1)
          {
            google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
            v38 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: (index) < (current_size_): ");
            google::protobuf::internal::LogFinisher::operator=((int)&v57, (const char **)&v38->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
          }
          v39 = *(_QWORD *)(*(_QWORD *)(a3 + 64) + 8);
          v40 = sentencepiece::ModelInterface::bos_piece(a1[1]);
          v41 = strlen(v40);
          v42 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*a1 + 63))(a1, v40, v41);
          *(_DWORD *)(v39 + 40) |= 4u;
          *(_DWORD *)(v39 + 64) = v42;
          v43 = (char *)sentencepiece::ModelInterface::bos_piece(a1[1]);
          sentencepiece::ModelInterface::bos_piece(a1[1]);
          *(_DWORD *)(v39 + 40) |= 1u;
          std::string::basic_string[abi:ne180100](__p, v43, v44);
          v45 = *(_QWORD *)(v39 + 8);
          v46 = (google::protobuf::internal::ArenaImpl *)(v45 & 0xFFFFFFFFFFFFFFFELL);
          if ((v45 & 1) != 0)
            v46 = *(google::protobuf::internal::ArenaImpl **)v46;
          google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v39 + 48), (__int128 *)__p, v46);
          goto LABEL_50;
        case 2:
          v22 = *(int **)(a3 + 64);
          if (!v22)
          {
            v24 = *(_DWORD *)(a3 + 60);
LABEL_45:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v24 + 1);
            v22 = *(int **)(a3 + 64);
            v24 = *v22;
            goto LABEL_46;
          }
          v23 = *(int *)(a3 + 56);
          v24 = *v22;
          if ((int)v23 < *v22)
          {
            *(_DWORD *)(a3 + 56) = v23 + 1;
            v25 = *(_QWORD *)&v22[2 * v23 + 2];
            goto LABEL_47;
          }
          if (v24 == *(_DWORD *)(a3 + 60))
            goto LABEL_45;
LABEL_46:
          *v22 = v24 + 1;
          v25 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(_QWORD *)(a3 + 48));
          v47 = *(_QWORD *)(a3 + 64);
          v48 = *(int *)(a3 + 56);
          *(_DWORD *)(a3 + 56) = v48 + 1;
          *(_QWORD *)(v47 + 8 * v48 + 8) = v25;
LABEL_47:
          v49 = sentencepiece::ModelInterface::eos_piece(a1[1]);
          v50 = strlen(v49);
          v51 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*a1 + 63))(a1, v49, v50);
          *(_DWORD *)(v25 + 40) |= 4u;
          *(_DWORD *)(v25 + 64) = v51;
          v52 = (char *)sentencepiece::ModelInterface::eos_piece(a1[1]);
          sentencepiece::ModelInterface::eos_piece(a1[1]);
          *(_DWORD *)(v25 + 40) |= 1u;
          std::string::basic_string[abi:ne180100](__p, v52, v53);
          v54 = *(_QWORD *)(v25 + 8);
          v55 = (google::protobuf::internal::ArenaImpl *)(v54 & 0xFFFFFFFFFFFFFFFELL);
          if ((v54 & 1) != 0)
            v55 = *(google::protobuf::internal::ArenaImpl **)v55;
          google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v25 + 48), (__int128 *)__p, v55);
LABEL_50:
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_52:
          if (++v6 == v5)
            return sentencepiece::util::Status::Status(a4);
          break;
        case 3:
          if (*(int *)(a3 + 56) >= 1)
          {
            v26 = 0;
            do
            {
              v27 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t)v9, v26);
              if ((*((unsigned int (**)(sentencepiece::ModelInterface **, _QWORD))*a1 + 66))(a1, *(unsigned int *)(v27 + 64)))
              {
                v28 = (char *)sentencepiece::ModelInterface::unk_piece(a1[1]);
                sentencepiece::ModelInterface::unk_piece(a1[1]);
                *(_DWORD *)(v27 + 40) |= 1u;
                std::string::basic_string[abi:ne180100](__p, v28, v29);
                v30 = *(_QWORD *)(v27 + 8);
                v31 = (google::protobuf::internal::ArenaImpl *)(v30 & 0xFFFFFFFFFFFFFFFELL);
                if ((v30 & 1) != 0)
                  v31 = *(google::protobuf::internal::ArenaImpl **)v31;
                google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v27 + 48), (__int128 *)__p, v31);
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p[0].__r_.__value_.__l.__data_);
              }
              ++v26;
            }
            while (v26 < *(_DWORD *)(a3 + 56));
          }
          goto LABEL_52;
        default:
          return (_QWORD *)sentencepiece::util::Status::Status(a4, 13, "unknown extra_option type.", 26);
      }
    }
  }
  return sentencepiece::util::Status::Status(a4);
}

void sub_191D0C50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  google::protobuf::internal::LogMessage::~LogMessage(&__p);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::Encode(sentencepiece::ModelInterface **a1@<X0>, char *a2@<X1>, size_t a3@<X2>, sentencepiece::SentencePieceText *a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *__p[3];
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;

  (*((void (**)(sentencepiece::util::Status *__return_ptr))*a1 + 11))(a5);
  if (!*(_QWORD *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    if (a4)
    {
      sentencepiece::SentencePieceText::Clear(a4);
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      (*(void (**)(sentencepiece::ModelInterface *, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v17, &v14);
      if (!*(_QWORD *)a5)
      {
        sentencepiece::util::Status::~Status(a5);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)a1[1] + 40))(__p);
        if (v19 >= 0)
          v10 = HIBYTE(v19);
        else
          v10 = v18;
        sentencepiece::SentencePieceProcessor::PopulateSentencePieceText(a1, a2, a3, v10, (uint64_t *)&v14, (unsigned __int8 ***)__p, (uint64_t)a4, a5);
        if (!*(_QWORD *)a5)
        {
          sentencepiece::util::Status::~Status(a5);
          sentencepiece::util::Status::Status(v11);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      if (v14)
      {
        v15 = v14;
        operator delete(v14);
      }
      if (SHIBYTE(v19) < 0)
        operator delete(v17);
    }
    else
    {
      LODWORD(v17) = 13;
      v12 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"spt", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"output proto is null", 20);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v17, (uint64_t)a5);
      v18 = *MEMORY[0x1E0DE4F60];
      *(uint64_t *)((char *)&v18 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v19 = MEMORY[0x1E0DE4FB8] + 16;
      if (v21 < 0)
        operator delete(v20);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x19401E928](&v22);
    }
  }
}

void sub_191D0C7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::NBestEncode(sentencepiece::ModelInterface **a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, sentencepiece::util::Status *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  void *__p;
  char v33;
  _BYTE v34[152];

  (*((void (**)(sentencepiece::util::Status *__return_ptr))*a1 + 11))(a5);
  if (*(_QWORD *)a5)
    return;
  sentencepiece::util::Status::~Status(a5);
  if (a4)
  {
    sentencepiece::NBestSentencePieceText::Clear((sentencepiece::NBestSentencePieceText *)a4);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    (*(void (**)(sentencepiece::ModelInterface *, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v26, &v23);
    if (!*(_QWORD *)a5)
    {
      sentencepiece::util::Status::~Status(a5);
      if (((*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)a1[1] + 88))(a1[1]) & 1) != 0)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1[1] + 48))(&v21);
        v10 = v21;
        v11 = v22;
        if (v21 != v22)
        {
          while (1)
          {
            v12 = *(int **)(a4 + 32);
            if (!v12)
              break;
            v13 = *(int *)(a4 + 24);
            v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *(_DWORD *)(a4 + 28))
              {
LABEL_12:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a4 + 16), v14 + 1);
                v12 = *(int **)(a4 + 32);
                v14 = *v12;
              }
              *v12 = v14 + 1;
              v15 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(*(_QWORD *)(a4 + 16));
              v16 = *(_QWORD *)(a4 + 32);
              v17 = *(int *)(a4 + 24);
              *(_DWORD *)(a4 + 24) = v17 + 1;
              *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
              goto LABEL_14;
            }
            *(_DWORD *)(a4 + 24) = v13 + 1;
            v15 = *(_QWORD *)&v12[2 * v13 + 2];
LABEL_14:
            v18 = *(_DWORD *)(v10 + 24);
            *(_DWORD *)(v15 + 40) |= 2u;
            *(_DWORD *)(v15 + 80) = v18;
            if (v28 >= 0)
              v19 = HIBYTE(v28);
            else
              v19 = v27;
            sentencepiece::SentencePieceProcessor::PopulateSentencePieceText(a1, a2, a3, v19, (uint64_t *)&v23, (unsigned __int8 ***)v10, v15, a5);
            if (*(_QWORD *)a5)
              goto LABEL_29;
            sentencepiece::util::Status::~Status(a5);
            v10 += 32;
            if (v10 == v11)
            {
              sentencepiece::util::Status::Status(a5);
              goto LABEL_29;
            }
          }
          v14 = *(_DWORD *)(a4 + 28);
          goto LABEL_12;
        }
        LODWORD(v29) = 13;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"!nbests.empty()", 15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"NBestEncode returns empty result.", 33);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v29, (uint64_t)a5);
        v30 = *MEMORY[0x1E0DE4F60];
        *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
        v31 = MEMORY[0x1E0DE4FB8] + 16;
        if (v33 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x19401E928](v34);
LABEL_29:
        v29 = (void **)&v21;
        std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&v29);
      }
      else
      {
        LODWORD(v29) = 13;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"model_->IsNBestEncodeAvailable()", 32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"NBestEncode is not available for the current model.", 51);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v29, (uint64_t)a5);
        v30 = *MEMORY[0x1E0DE4F60];
        *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
        v31 = MEMORY[0x1E0DE4FB8] + 16;
        if (v33 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x19401E928](v34);
      }
    }
    if (v23)
    {
      v24 = v23;
      operator delete(v23);
    }
    if (SHIBYTE(v28) < 0)
      operator delete(v26);
  }
  else
  {
    LODWORD(v29) = 13;
    v20 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"nbest_spt", 9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"output proto is null", 20);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v29, (uint64_t)a5);
    v30 = *MEMORY[0x1E0DE4F60];
    *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v31 = MEMORY[0x1E0DE4FB8] + 16;
    if (v33 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19401E928](v34);
  }
}

void sub_191D0CD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncode(sentencepiece::ModelInterface **a1@<X0>, char *a2@<X1>, size_t a3@<X2>, int a4@<W3>, sentencepiece::SentencePieceText *a5@<X4>, sentencepiece::util::Status *a6@<X8>, float a7@<S0>)
{
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  char v17;
  uint64_t v18;
  sentencepiece::random *v19;
  float *v20;
  uint64_t v21;
  float *v22;
  float v23;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *RandomGenerator;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30[3];
  uint64_t v31;
  uint64_t v32;
  void *__p;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  float *v40[11];
  char v41;
  uint64_t v42;

  (*((void (**)(sentencepiece::util::Status *__return_ptr))*a1 + 11))(a6);
  if (*(_QWORD *)a6)
    return;
  sentencepiece::util::Status::~Status(a6);
  if (a5)
  {
    sentencepiece::SentencePieceText::Clear(a5);
    if (a4 < 513)
    {
      v36 = 0;
      v37 = 0;
      v38 = 0;
      __p = 0;
      v34 = 0;
      v35 = 0;
      (*(void (**)(sentencepiece::ModelInterface *, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v36, &__p);
      if (*(_QWORD *)a6)
      {
LABEL_5:
        if (__p)
        {
          v34 = __p;
          operator delete(__p);
        }
        if (SHIBYTE(v38) < 0)
          operator delete(v36);
        return;
      }
      sentencepiece::util::Status::~Status(a6);
      v16 = (*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)a1[1] + 88))(a1[1]);
      if (a4 >= 0)
        v17 = v16;
      else
        v17 = 0;
      if ((v17 & 1) != 0)
      {
        if (a4 > 1)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1[1] + 48))(&v31);
          if (v31 == v32)
          {
            LODWORD(v39) = 13;
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(", 1);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") [", 3);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"!nbests.empty()", 15);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"NBestEncode returns empty result.", 33);
            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a6);
            sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&v39);
            v39 = &v31;
            std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
            goto LABEL_5;
          }
          LODWORD(v30[0]) = 0;
          v19 = (sentencepiece::random *)std::vector<float>::vector(&v39, (v32 - v31) >> 5, v30);
          if (v32 != v31)
          {
            v20 = (float *)v39;
            if ((unint64_t)((v32 - v31) >> 5) <= 1)
              v21 = 1;
            else
              v21 = (v32 - v31) >> 5;
            v22 = (float *)(v31 + 24);
            do
            {
              v23 = *v22;
              v22 += 8;
              *v20++ = expf(v23 * a7);
              --v21;
            }
            while (v21);
          }
          RandomGenerator = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)sentencepiece::random::GetRandomGenerator(v19);
          std::discrete_distribution<int>::param_type::param_type[abi:ne180100]<std::__wrap_iter<float *>>((uint64_t)v30, (float *)v39, v40[0]);
          v25 = HIBYTE(v38);
          v26 = v37;
          v27 = std::discrete_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((int)v30, RandomGenerator, (double **)v30);
          if ((v25 & 0x80u) == 0)
            v28 = v25;
          else
            v28 = v26;
          sentencepiece::SentencePieceProcessor::PopulateSentencePieceText(a1, a2, a3, v28, (uint64_t *)&__p, (unsigned __int8 ***)(v31 + 32 * v27), (uint64_t)a5, a6);
          v29 = *(_QWORD *)a6;
          if (!*(_QWORD *)a6)
            sentencepiece::util::Status::~Status(a6);
          if (v30[0])
          {
            v30[1] = v30[0];
            operator delete(v30[0]);
          }
          if (v39)
          {
            v40[0] = (float *)v39;
            operator delete(v39);
          }
          v39 = &v31;
          std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
          if (v29)
            goto LABEL_5;
          goto LABEL_51;
        }
        (*(void (**)(void **__return_ptr))(*(_QWORD *)a1[1] + 40))(&v39);
        if (v38 >= 0)
          v18 = HIBYTE(v38);
        else
          v18 = v37;
      }
      else
      {
        if (((*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)a1[1] + 80))(a1[1]) & 1) == 0)
        {
          LODWORD(v39) = 13;
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(", 1);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") [", 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"model_->IsSampleEncodeAvailable()", 33);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"SampleEncode is not available for the current model.", 52);
          sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a6);
          sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&v39);
          goto LABEL_5;
        }
        (*(void (**)(void **__return_ptr, float))(*(_QWORD *)a1[1] + 56))(&v39, a7);
        if (v38 >= 0)
          v18 = HIBYTE(v38);
        else
          v18 = v37;
      }
      sentencepiece::SentencePieceProcessor::PopulateSentencePieceText(a1, a2, a3, v18, (uint64_t *)&__p, (unsigned __int8 ***)&v39, (uint64_t)a5, a6);
      if (*(_QWORD *)a6)
      {
        if (v39)
        {
          v40[0] = (float *)v39;
          operator delete(v39);
        }
        goto LABEL_5;
      }
      sentencepiece::util::Status::~Status(a6);
      if (v39)
      {
        v40[0] = (float *)v39;
        operator delete(v39);
      }
LABEL_51:
      sentencepiece::util::Status::Status(a6);
      goto LABEL_5;
    }
    LODWORD(v39) = 13;
    v15 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(nbest_size) <= (512)", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"nbest_size must be nbest_size <= 512", 36);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a6);
  }
  else
  {
    LODWORD(v39) = 13;
    v14 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"spt", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"output proto is null", 20);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a6);
  }
  v40[0] = *(float **)MEMORY[0x1E0DE4F60];
  *(float **)((char *)v40 + *((_QWORD *)v40[0] - 3)) = *(float **)(MEMORY[0x1E0DE4F60] + 24);
  v40[1] = (float *)(MEMORY[0x1E0DE4FB8] + 16);
  if (v41 < 0)
    operator delete(v40[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19401E928](&v42);
}

void sub_191D0D4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char *a24,uint64_t a25)
{
  a24 = &a12;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScore(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X6>, sentencepiece::util::Status *a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *__p;
  char v35;
  _BYTE v36[152];

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8)) & 1) != 0)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    (*(void (**)(_QWORD, char *, size_t, void **, void **))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, &v28, &v25);
    if (!*(_QWORD *)a5)
    {
      sentencepiece::util::Status::~Status(a5);
      (*(void (**)(uint64_t *__return_ptr, float))(**(_QWORD **)(a1 + 8) + 64))(&v23, a6);
      v12 = v23;
      v13 = v24;
      if (v23 != v24)
      {
        while (1)
        {
          v14 = *(int **)(a4 + 32);
          if (!v14)
            break;
          v15 = *(int *)(a4 + 24);
          v16 = *v14;
          if ((int)v15 >= *v14)
          {
            if (v16 == *(_DWORD *)(a4 + 28))
            {
LABEL_9:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a4 + 16), v16 + 1);
              v14 = *(int **)(a4 + 32);
              v16 = *v14;
            }
            *v14 = v16 + 1;
            v17 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(*(_QWORD *)(a4 + 16));
            v18 = *(_QWORD *)(a4 + 32);
            v19 = *(int *)(a4 + 24);
            *(_DWORD *)(a4 + 24) = v19 + 1;
            *(_QWORD *)(v18 + 8 * v19 + 8) = v17;
            goto LABEL_11;
          }
          *(_DWORD *)(a4 + 24) = v15 + 1;
          v17 = *(_QWORD *)&v14[2 * v15 + 2];
LABEL_11:
          v20 = *(_DWORD *)(v12 + 24);
          *(_DWORD *)(v17 + 40) |= 2u;
          *(_DWORD *)(v17 + 80) = v20;
          if (v30 >= 0)
            v21 = HIBYTE(v30);
          else
            v21 = v29;
          sentencepiece::SentencePieceProcessor::PopulateSentencePieceText((sentencepiece::ModelInterface **)a1, a2, a3, v21, (uint64_t *)&v25, (unsigned __int8 ***)v12, v17, a5);
          if (*(_QWORD *)a5)
            goto LABEL_23;
          sentencepiece::util::Status::~Status(a5);
          v12 += 32;
          if (v12 == v13)
          {
            sentencepiece::util::Status::Status(a5);
            goto LABEL_23;
          }
        }
        v16 = *(_DWORD *)(a4 + 28);
        goto LABEL_9;
      }
      LODWORD(v31) = 13;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"!results.empty()", 16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"SampleEncodeAndScore returns empty result.", 42);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v31, (uint64_t)a5);
      v32 = *MEMORY[0x1E0DE4F60];
      *(uint64_t *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v33 = MEMORY[0x1E0DE4FB8] + 16;
      if (v35 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x19401E928](v36);
LABEL_23:
      v31 = (void **)&v23;
      std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&v31);
    }
    if (v25)
    {
      v26 = v25;
      operator delete(v25);
    }
    if (SHIBYTE(v30) < 0)
      operator delete(v28);
  }
  else
  {
    LODWORD(v31) = 13;
    v22 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"model_->IsSampleEncodeAndScoreAvailable()", 41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"SampleEncodeAndScore is not available for the current model.", 60);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v31, (uint64_t)a5);
    v32 = *MEMORY[0x1E0DE4F60];
    *(uint64_t *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v33 = MEMORY[0x1E0DE4FB8] + 16;
    if (v35 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19401E928](v36);
  }
}

void sub_191D0DA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::CalculateEntropy(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float *a4@<X3>, sentencepiece::util::Status *a5@<X8>, float a6@<S0>)
{
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  void *__p;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint64_t v23;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8)) & 1) != 0)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    __p = 0;
    v16 = 0;
    v17 = 0;
    (*(void (**)(_QWORD, uint64_t, uint64_t, void **, void **))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, &v18, &__p);
    if (!*(_QWORD *)a5)
    {
      sentencepiece::util::Status::~Status(a5);
      if (v20 >= 0)
        v12 = &v18;
      else
        v12 = v18;
      if (v20 >= 0)
        v13 = HIBYTE(v20);
      else
        v13 = v19;
      *a4 = (*(float (**)(_QWORD, void *, uint64_t, float))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8), v12, v13, a6);
      sentencepiece::util::Status::Status(a5);
    }
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v20) < 0)
      operator delete(v18);
  }
  else
  {
    LODWORD(v18) = 13;
    v14 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"model_->IsCalculateEntropyAvailable()", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"CalculateEntropy is not available for the current model.", 56);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v18, (uint64_t)a5);
    v19 = *MEMORY[0x1E0DE4F60];
    *(uint64_t *)((char *)&v19 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v20 = MEMORY[0x1E0DE4FB8] + 16;
    if (v22 < 0)
      operator delete(v21);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19401E928](&v23);
  }
}

void sub_191D0DC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void sub_191D0DD44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::Decode(sentencepiece::ModelInterface **a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  uint64_t v4;
  sentencepiece::ModelInterface *v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  google::protobuf::internal::ArenaImpl *v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  google::protobuf::internal::ArenaImpl *v26;
  int v27;
  _BOOL4 v28;
  int v29;
  int v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  size_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  __int128 *p_dst;
  sentencepiece::ModelInterface *v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  size_t v47;
  _BOOL4 v49;
  sentencepiece::ModelInterface *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  sentencepiece::ModelInterface *v54;
  uint64_t *v55;
  __int128 v56;
  void *__p[2];
  uint64_t v58;
  _QWORD v59[2];
  _QWORD *v60[2];
  uint64_t *v61;
  __int128 v62;
  uint64_t v63;
  BOOL v64;
  void *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  _QWORD *v71;
  __int128 __dst;
  unint64_t v73;

  v4 = a3;
  v68 = a3;
  (*((void (**)(sentencepiece::util::Status *__return_ptr))*a1 + 11))(a4);
  if (*(_QWORD *)a4)
    return;
  sentencepiece::util::Status::~Status(a4);
  if (v4)
  {
    sentencepiece::SentencePieceText::Clear((sentencepiece::SentencePieceText *)v4);
    v8 = a1[4];
    if (v8 && (*(unsigned int (**)(sentencepiece::ModelInterface *))(*(_QWORD *)v8 + 72))(v8))
      v9 = (char *)(*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)a1[4] + 24))(a1[4]);
    else
    v10 = *a2;
    v11 = a2[1];
    if (*a2 != v11)
    {
      while (1)
      {
        v12 = *v10;
        v13 = v10[1];
        v14 = v68;
        v15 = *(int **)(v68 + 64);
        if (!v15)
          break;
        v16 = *(int *)(v68 + 56);
        v17 = *v15;
        if ((int)v16 >= *v15)
        {
          if (v17 == *(_DWORD *)(v68 + 60))
          {
LABEL_14:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v68 + 48), v17 + 1);
            v15 = *(int **)(v68 + 64);
            v17 = *v15;
          }
          *v15 = v17 + 1;
          v18 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(_QWORD *)(v14 + 48));
          v19 = *(_QWORD *)(v14 + 64);
          v20 = *(int *)(v14 + 56);
          *(_DWORD *)(v14 + 56) = v20 + 1;
          *(_QWORD *)(v19 + 8 * v20 + 8) = v18;
          goto LABEL_16;
        }
        *(_DWORD *)(v68 + 56) = v16 + 1;
        v18 = *(_QWORD *)&v15[2 * v16 + 2];
LABEL_16:
        *(_DWORD *)(v18 + 40) |= 1u;
        v21 = *(_QWORD *)(v18 + 8);
        v22 = (google::protobuf::internal::ArenaImpl *)(v21 & 0xFFFFFFFFFFFFFFFELL);
        if ((v21 & 1) != 0)
          v22 = *(google::protobuf::internal::ArenaImpl **)v22;
        v23 = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)(v18 + 48), v22);
        MEMORY[0x19401E658](v23, v12, v13);
        v24 = (*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t, uint64_t))*a1 + 63))(a1, v12, v13);
        *(_DWORD *)(v18 + 40) |= 4u;
        *(_DWORD *)(v18 + 64) = v24;
        v10 += 2;
        if (v10 == v11)
        {
          v4 = v68;
          goto LABEL_20;
        }
      }
      v17 = *(_DWORD *)(v68 + 60);
      goto LABEL_14;
    }
LABEL_20:
    sentencepiece::SentencePieceProcessor::ApplyExtraOptions(a1, (uint64_t)(a1 + 8), v4, a4);
    if (*(_QWORD *)a4)
      return;
    sentencepiece::util::Status::~Status(a4);
    v61 = 0;
    *(_DWORD *)(v4 + 40) |= 1u;
    v25 = *(_QWORD *)(v4 + 8);
    v26 = (google::protobuf::internal::ArenaImpl *)(v25 & 0xFFFFFFFFFFFFFFFELL);
    if ((v25 & 1) != 0)
      v26 = *(google::protobuf::internal::ArenaImpl **)v26;
    v60[1] = &v61;
    v61 = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)(v4 + 72), v26);
    v58 = 0;
    v59[0] = &v68;
    v59[1] = v60;
    v60[0] = &v68;
    __p[0] = 0;
    __p[1] = 0;
    v27 = *(_DWORD *)(v4 + 56);
    if (v27 >= 1)
    {
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 1;
      while (1)
      {
        v32 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(v4 + 48, v30);
        if (!(*((unsigned int (**)(sentencepiece::ModelInterface **, _QWORD))*a1 + 69))(a1, *(unsigned int *)(v32 + 64)))break;
        ++v30;
LABEL_68:
        v4 = v68;
        v27 = *(_DWORD *)(v68 + 56);
        if (v30 >= v27)
          goto LABEL_89;
      }
      sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_2::operator()((uint64_t)v59, v29, v30, a4);
      if (*(_QWORD *)a4)
        goto LABEL_95;
      sentencepiece::util::Status::~Status(a4);
      if (!v28)
      {
        if (*((char *)v61 + 23) < 0)
        {
          if (!v61[1])
          {
LABEL_32:
            v33 = *(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL;
            if (*(char *)(v33 + 23) < 0)
            {
              v35 = *(unsigned __int8 **)v33;
              v34 = *(_QWORD *)(v33 + 8);
            }
            else
            {
              v34 = *(unsigned __int8 *)(v33 + 23);
              v35 = (unsigned __int8 *)(*(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL);
            }
            v36 = *(unsigned int *)(v32 + 64);
            if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 67))(a1, v36))
            {
              std::string::basic_string[abi:ne180100]<0>(&v62, "");
LABEL_58:
              v64 = 0;
LABEL_59:
              if (SHIBYTE(v58) < 0)
                operator delete(__p[0]);
              v58 = v63;
              *(_OWORD *)__p = v62;
              v28 = v64;
              if (v63 >= 0)
                v46 = __p;
              else
                v46 = (void **)v62;
              if (v63 >= 0)
                v47 = HIBYTE(v63);
              else
                v47 = *((_QWORD *)&v62 + 1);
              sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_1::operator()(v60, v30++, v46, v47);
              v29 = v30;
              goto LABEL_68;
            }
            if (!(*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 66))(a1, v36))
            {
              if ((v31 & 1) != 0
                && ((v40 = a1[4]) == 0
                 || (v41 = (*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)v40 + 152))(v40),
                     ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41) & 1) != 0)
                 || (v42 = (*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)a1[4] + 152))(a1[4]),
                     (*(unsigned int (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42))))
              {
                if (v34 >= 3)
                {
                  v49 = *(unsigned __int16 *)v35 != 38626 || v35[2] != 129;
                  if (!v49)
                  {
                    v35 += 3;
                    v34 -= 3;
                  }
                  v43 = !v49;
                }
                else
                {
                  v43 = 0;
                }
                v50 = a1[4];
                if (v50)
                {
                  v51 = (*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)v50 + 152))(v50);
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51))
                    v43 = 0;
                }
              }
              else
              {
                v43 = 0;
              }
              v52 = operator new(0x20uLL);
              v70 = v52 + 4;
              v71 = v52 + 4;
              v52[1] = 3;
              v52[2] = " ";
              v52[3] = 1;
              v69 = v52;
              absl::StrReplaceAll(v35, v34, (uint64_t *)&v69, (uint64_t)&__dst);
              v62 = __dst;
              v63 = v73;
              v73 = 0;
              __dst = 0uLL;
              v64 = v43;
              if (v69)
              {
                v70 = v69;
                operator delete(v69);
              }
              goto LABEL_59;
            }
            v37 = (const void *)(*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 64))(a1, v36);
            if (v38 == v34 && !memcmp(v37, v35, v34))
            {
              std::string::basic_string[abi:ne180100]<0>(&v62, v9);
              goto LABEL_58;
            }
            if (v34 >= 0x7FFFFFFFFFFFFFF8)
              std::string::__throw_length_error[abi:ne180100]();
            if (v34 >= 0x17)
            {
              v44 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v34 | 7) != 0x17)
                v44 = v34 | 7;
              v45 = v44 + 1;
              p_dst = (__int128 *)operator new(v44 + 1);
              *((_QWORD *)&__dst + 1) = v34;
              v73 = v45 | 0x8000000000000000;
              *(_QWORD *)&__dst = p_dst;
            }
            else
            {
              HIBYTE(v73) = v34;
              p_dst = &__dst;
              if (!v34)
                goto LABEL_57;
            }
            memmove(p_dst, v35, v34);
LABEL_57:
            *((_BYTE *)p_dst + v34) = 0;
            v62 = __dst;
            v63 = v73;
            goto LABEL_58;
          }
        }
        else if (!*((_BYTE *)v61 + 23))
        {
          goto LABEL_32;
        }
      }
      v31 = 0;
      goto LABEL_32;
    }
    v29 = 0;
LABEL_89:
    sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_2::operator()((uint64_t)v59, v29, v27, a4);
    if (!*(_QWORD *)a4)
    {
      sentencepiece::util::Status::~Status(a4);
      v54 = a1[3];
      if (v54)
      {
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v54 + 40))(&v62);
        v55 = v61;
        if (*((char *)v61 + 23) < 0)
          operator delete((void *)*v61);
        v56 = v62;
        v55[2] = v63;
        *(_OWORD *)v55 = v56;
      }
      sentencepiece::util::Status::Status(a4);
    }
LABEL_95:
    if (SHIBYTE(v58) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LODWORD(v62) = 13;
    v53 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v62 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v62 + 1, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v62 + 1, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v62 + 1, (uint64_t)"spt", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v62 + 1, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v62 + 1, (uint64_t)"output proto is null", 20);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v62, (uint64_t)a4);
    *((_QWORD *)&v62 + 1) = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)&v62 + *(_QWORD *)(*((_QWORD *)&v62 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v63 = MEMORY[0x1E0DE4FB8] + 16;
    if (v66 < 0)
      operator delete(v65);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19401E928](&v67);
  }
}

void sub_191D0E490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_2::operator()(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, sentencepiece::util::Status *a4@<X8>)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  int v13;
  unint64_t *v14;
  int v15;
  int v16;
  std::string::size_type size;
  unint64_t v18;
  std::string *v19;
  int v20;
  std::string::size_type v21;
  size_t v22;
  size_t v23;
  std::string *v24;
  size_t v25;
  unint64_t v26;
  const char *v27;
  int v28;
  size_t v29;
  const char *v30;
  size_t v31;
  sentencepiece::util::Status *v32;
  char v33[8];
  unsigned int v34;
  _QWORD v35[11];
  char v36;
  uint64_t v37;
  std::string v38;

  if (a2 >= a3)
  {
    sentencepiece::util::Status::Status(a4);
  }
  else
  {
    memset(&v38, 0, sizeof(v38));
    v8 = a2;
    do
    {
      v9 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(**(_QWORD **)a1 + 48, v8);
      v10 = *(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v10 + 23) < 0)
      {
        v12 = *(void **)v10;
        v11 = *(_QWORD *)(v10 + 8);
      }
      else
      {
        v11 = *(unsigned __int8 *)(v10 + 23);
        v12 = (void *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      v13 = sentencepiece::PieceToByte(v12, v11);
      if (v13 < 0)
      {
        v34 = 13;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(0) <= (byte)", 13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v34, (uint64_t)a4);
        goto LABEL_50;
      }
      std::string::append(&v38, 1uLL, v13);
      ++v8;
    }
    while (a3 != v8);
    v32 = a4;
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    else
      v15 = v38.__r_.__value_.__r.__words[1];
    if (v15 >= 1)
    {
      v16 = 0;
      while (1)
      {
        *(_QWORD *)v33 = 0;
        size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v38.__r_.__value_.__l.__size_;
        if (size < v16)
          std::__throw_out_of_range[abi:ne180100]("string_view::substr");
        v18 = v16;
        v19 = (std::string *)v38.__r_.__value_.__r.__words[0];
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = &v38;
        if (sentencepiece::string_util::DecodeUTF8((sentencepiece::string_util *)((char *)v19 + v18), (const char *)v19 + size, v33, v14) != 65533)break;
        v20 = v18 + a2;
        if (*(_QWORD *)v33 != 1)
        {
          if (*(_QWORD *)v33 != 3)
          {
            v34 = 13;
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v35);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)") [", 3);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(consumed) == (1)", 17);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"] ", 2);
            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v34, (uint64_t)v32);
            goto LABEL_50;
          }
          goto LABEL_23;
        }
        LODWORD(v23) = *(_DWORD *)v33;
LABEL_42:
        v16 = v18 + v23;
        if (v16 >= v15)
          goto LABEL_47;
      }
      v20 = v18 + a2;
LABEL_23:
      v21 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v21 = v38.__r_.__value_.__l.__size_;
      v22 = v21 - v18;
      if (v21 < v18)
        std::__throw_out_of_range[abi:ne180100]("string_view::substr");
      v23 = *(_QWORD *)v33;
      v24 = &v38;
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v24 = (std::string *)v38.__r_.__value_.__r.__words[0];
      if (v22 >= *(_QWORD *)v33)
        v25 = *(_QWORD *)v33;
      else
        v25 = v22;
      if (*(_QWORD *)v33)
      {
        v26 = 0;
        v27 = (char *)v24 + v18;
        v28 = v20;
        do
        {
          v29 = v23 - 1;
          if (v26 == v29)
            v30 = v27;
          else
            v30 = "";
          if (v26 == v29)
            v31 = v25;
          else
            v31 = 0;
          sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_1::operator()(*(_QWORD ***)(a1 + 8), v28 + v26++, v30, v31);
          v23 = *(_QWORD *)v33;
        }
        while (*(_QWORD *)v33 > v26);
      }
      goto LABEL_42;
    }
    v16 = 0;
LABEL_47:
    if (v16 + a2 == a3)
    {
      sentencepiece::util::Status::Status(v32);
      goto LABEL_53;
    }
    v34 = 13;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(token_index_begin + offset) == (token_index_end)", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v34, (uint64_t)v32);
LABEL_50:
    v35[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v35 + *(_QWORD *)(v35[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v35[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v36 < 0)
      operator delete((void *)v35[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19401E928](&v37);
LABEL_53:
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
  }
}

void sub_191D0E988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  if (*(char *)(v11 - 89) < 0)
    operator delete(*(void **)(v11 - 112));
  _Unwind_Resume(exception_object);
}

std::string *sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_1::operator()(_QWORD **a1, int a2, const void *a3, size_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  google::protobuf::internal::ArenaImpl *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 __dst;
  unint64_t v20;

  v7 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(**a1 + 48, a2);
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (a4 >= 0x17)
  {
    v10 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v10 = a4 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = a4;
    v20 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v20) = a4;
  p_dst = &__dst;
  if (a4)
LABEL_8:
    memmove(p_dst, a3, a4);
  *((_BYTE *)p_dst + a4) = 0;
  *(_DWORD *)(v8 + 40) |= 2u;
  v12 = *(_QWORD *)(v8 + 8);
  v13 = (google::protobuf::internal::ArenaImpl *)(v12 & 0xFFFFFFFFFFFFFFFELL);
  if ((v12 & 1) != 0)
    v13 = *(google::protobuf::internal::ArenaImpl **)v13;
  google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v8 + 56), &__dst, v13);
  if (SHIBYTE(v20) < 0)
    operator delete((void *)__dst);
  v14 = *a1[1];
  if (*(char *)(v14 + 23) < 0)
    v15 = *(_QWORD *)(v14 + 8);
  else
    LODWORD(v15) = *(unsigned __int8 *)(v14 + 23);
  v16 = *(_DWORD *)(v8 + 40);
  *(_DWORD *)(v8 + 40) = v16 | 8;
  *(_DWORD *)(v8 + 68) = v15;
  if (*(char *)(v14 + 23) < 0)
    v17 = *(_QWORD *)(v14 + 8);
  else
    LODWORD(v17) = *(unsigned __int8 *)(v14 + 23);
  *(_DWORD *)(v8 + 40) = v16 | 0x18;
  *(_DWORD *)(v8 + 72) = v17 + a4;
  return std::string::append((std::string *)v14, (const std::string::value_type *)a3, a4);
}

void sub_191D0EB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::Decode(uint64_t a1@<X0>, int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  int *v9;
  int *v10;
  int v11;
  std::string::size_type v12;
  std::vector<std::string>::pointer end;
  std::string *v14;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  int v18;
  std::vector<std::string> v19;

  memset(&v19, 0, sizeof(v19));
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 496))(a1);
  std::vector<std::string>::reserve(&v19, a2[1] - *a2);
  v9 = *a2;
  v10 = a2[1];
  if (*a2 == v10)
  {
LABEL_8:
    (*(void (**)(uint64_t, std::vector<std::string> *, uint64_t))(*(_QWORD *)a1 + 264))(a1, &v19, a3);
  }
  else
  {
    while (1)
    {
      v11 = *v9;
      v18 = v11;
      if (v11 < 0 || v11 >= v8)
        break;
      __p.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 512))(a1);
      __p.__r_.__value_.__l.__size_ = v12;
      end = v19.__end_;
      if (v19.__end_ >= v19.__end_cap_.__value_)
      {
        v14 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string_view>((uint64_t)&v19, (uint64_t)&__p);
      }
      else
      {
        std::allocator<std::string>::construct[abi:ne180100]<std::string,std::string_view>((int)&v19.__end_cap_, v19.__end_, (uint64_t)&__p);
        v14 = end + 1;
      }
      v19.__end_ = v14;
      if (++v9 == v10)
        goto LABEL_8;
    }
    absl::StrCat<int>("Invalid id: ", 0xCuLL, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sentencepiece::util::Status::Status(a4, 11, p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_191D0ECD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18)
{
  if (a15 < 0)
    operator delete(__p);
  __p = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void absl::StrCat<int>(void *__src@<X0>, size_t __len@<X1>, std::string *a3@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  void *v7[2];
  unsigned __int8 v8;
  std::string __dst;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  std::ostream::operator<<();
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19401E928](&v12);
  if ((v8 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (void **)v7[0];
  if ((v8 & 0x80u) == 0)
    v5 = v8;
  else
    v5 = (std::string::size_type)v7[1];
  v6 = std::string::append(&__dst, (const std::string::value_type *)v4, v5);
  *a3 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_191D0EE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::SentencePieceProcessor::GetPieceSize(sentencepiece::SentencePieceProcessor *this)
{
  uint64_t v2;
  sentencepiece::logging *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const char *v10;
  size_t v11;
  _QWORD *v12;
  char v14;
  uint64_t v15;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v15);
  v2 = v15;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v15);
  if (!v2)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 128))(*((_QWORD *)this + 1));
  if ((int)sentencepiece::logging::GetMinLogLevel(v3) <= 2)
  {
    v14 = 0;
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") ", 2);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"LOG(", 4);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ERROR", 5);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v15, this);
    v10 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v15);
    v11 = strlen(v10);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v15);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v14);
  }
  return 0;
}

void sub_191D0EFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::PieceToId(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  sentencepiece::logging *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  size_t v15;
  _QWORD *v16;
  char v18;
  uint64_t v19;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v19);
  v6 = v19;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v19);
  if (!v6)
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1[1] + 112))(a1[1], a2, a3);
  if ((int)sentencepiece::logging::GetMinLogLevel(v7) <= 2)
  {
    v18 = 0;
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
    v9 = (_QWORD *)std::ostream::operator<<();
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)") ", 2);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"LOG(", 4);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"ERROR", 5);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v19, a1);
    v14 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v19);
    v15 = strlen(v14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v19);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v18);
  }
  return 0;
}

void sub_191D0F144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

const char *sentencepiece::SentencePieceProcessor::IdToPiece(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  uint64_t v4;
  sentencepiece::logging *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char v17;
  uint64_t v18;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v18);
  v4 = v18;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v18);
  if (!v4)
    return (const char *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 120))(*((_QWORD *)this + 1), a2);
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    v17 = 0;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v18, this);
    v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v18);
    v13 = strlen(v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"", 0);
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v18);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v17);
  }
  return "";
}

void sub_191D0F2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

float sentencepiece::SentencePieceProcessor::GetScore(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  uint64_t v4;
  sentencepiece::logging *v5;
  float v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  char v17;
  uint64_t v18;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v18);
  v4 = v18;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v18);
  if (!v4)
    return (*(float (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1), a2);
  v6 = 0.0;
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    v17 = 0;
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") ", 2);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"LOG(", 4);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ERROR", 5);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v18, this);
    v13 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v18);
    v14 = strlen(v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v18);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v17);
  }
  return v6;
}

void sub_191D0F44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::IsControl(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  uint64_t v4;
  sentencepiece::logging *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v17);
  v4 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v4)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 152))(*((_QWORD *)this + 1), a2);
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    v16 = 0;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v17, this);
    v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v17);
    v13 = strlen(v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v16);
  }
  return 0;
}

void sub_191D0F5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::IsUnknown(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  uint64_t v4;
  sentencepiece::logging *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v17);
  v4 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v4)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1), a2);
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    v16 = 0;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v17, this);
    v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v17);
    v13 = strlen(v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v16);
  }
  return 0;
}

void sub_191D0F734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::IsUnused(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  uint64_t v4;
  sentencepiece::logging *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v17);
  v4 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v4)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 160))(*((_QWORD *)this + 1), a2);
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    v16 = 0;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v17, this);
    v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v17);
    v13 = strlen(v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v16);
  }
  return 0;
}

void sub_191D0F8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::IsByte(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  uint64_t v4;
  sentencepiece::logging *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v17);
  v4 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v4)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 176))(*((_QWORD *)this + 1), a2);
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    v16 = 0;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v17, this);
    v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v17);
    v13 = strlen(v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v16);
  }
  return 0;
}

void sub_191D0FA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::unk_id(sentencepiece::ModelInterface **this)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sentencepiece::ModelInterface::unk_piece(this[1]);
  v3 = strlen(v2);
  v4 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*this + 63))(this, v2, v3);
  if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*this + 66))(this, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sentencepiece::SentencePieceProcessor::bos_id(sentencepiece::ModelInterface **this)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sentencepiece::ModelInterface::bos_piece(this[1]);
  v3 = strlen(v2);
  v4 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*this + 63))(this, v2, v3);
  if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*this + 67))(this, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sentencepiece::SentencePieceProcessor::eos_id(sentencepiece::ModelInterface **this)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sentencepiece::ModelInterface::eos_piece(this[1]);
  v3 = strlen(v2);
  v4 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*this + 63))(this, v2, v3);
  if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*this + 67))(this, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sentencepiece::SentencePieceProcessor::pad_id(sentencepiece::ModelInterface **this)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sentencepiece::ModelInterface::pad_piece(this[1]);
  v3 = strlen(v2);
  v4 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*this + 63))(this, v2, v3);
  if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*this + 67))(this, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

_QWORD *sentencepiece::SentencePieceProcessor::LookupPredictive@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  _QWORD *result;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  result = ((_QWORD *(*)(sentencepiece::util::Status *__return_ptr))(*a1)[11])(a5);
  if (!*(_QWORD *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    if (a4)
    {
      std::vector<std::string>::__clear[abi:ne180100](a4);
      v11 = *((char *)a2 + 23);
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = (uint64_t *)*a2;
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)a2 + 23);
      else
        v13 = a2[1];
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t, uint64_t *))(*a1[1] + 200))(a1[1], v12, v13, a3, a4);
    }
    else
    {
      v15 = 13;
      v14 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v15, (uint64_t)a5);
      v16[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v16[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v17 < 0)
        operator delete((void *)v16[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x19401E928](&v18);
    }
  }
  return result;
}

void sub_191D0FD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::SentencePieceProcessor::LookupPredictive@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  _QWORD *result;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  result = ((_QWORD *(*)(sentencepiece::util::Status *__return_ptr))(*a1)[11])(a5);
  if (!*(_QWORD *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    if (a4)
    {
      a4[1] = *a4;
      v11 = *((char *)a2 + 23);
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = (uint64_t *)*a2;
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)a2 + 23);
      else
        v13 = a2[1];
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t, _QWORD *))(*a1[1] + 208))(a1[1], v12, v13, a3, a4);
    }
    else
    {
      v15 = 13;
      v14 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v15, (uint64_t)a5);
      v16[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v16[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v17 < 0)
        operator delete((void *)v16[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x19401E928](&v18);
    }
  }
  return result;
}

void sub_191D0FF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sentencepiece::SentencePieceProcessor::LoadFromMemoryMappedFile(sentencepiece::SentencePieceProcessor *this@<X0>, const char *a2@<X1>, unint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v9;
  _QWORD *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  _QWORD *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  _QWORD *v40;
  uint64_t v41;
  const char *v42;
  _QWORD v43[11];
  char v44;
  uint64_t v45;
  const char *v46;
  unint64_t v47;

  v46 = a2;
  v47 = a3;
  if (a3 <= 0x13)
  {
    LODWORD(v42) = 13;
    v7 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(size) >= (sizeof(MMapHeader))", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
    goto LABEL_5;
  }
  if (*(_DWORD *)a2)
  {
    LODWORD(v42) = 13;
    v6 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"header->sentinel == 0", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"This file format is not for mmap-based loading.", 47);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
LABEL_5:
    v43[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v43 + *(_QWORD *)(v43[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v43[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v44 < 0)
      operator delete((void *)v43[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19401E928](&v45);
    return;
  }
  sentencepiece::mmap_util::RemovePrefix(&v46, 0x14uLL, a4);
  if (*(_QWORD *)a4)
    return;
  sentencepiece::util::Status::~Status(a4);
  v9 = *((unsigned int *)a2 + 1);
  if (v47 < v9)
  {
    LODWORD(v42) = 13;
    v10 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(blob.size()) >= (header->model_proto_size)", 43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
    goto LABEL_5;
  }
  v11 = v46;
  v12 = operator new();
  sentencepiece::MemoryMappedModelProto::MemoryMappedModelProto(v12, v11, v9);
  v13 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v12 = *((_QWORD *)this + 4);
  }
  sentencepiece::util::Status::Status((sentencepiece::util::Status *)&v42, (const sentencepiece::util::Status *)(v12 + 88));
  v14 = v42;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v42);
  if (v14)
  {
    LODWORD(v42) = 13;
    v15 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"model_proto->status().ok()", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Failed to initialize ModelProto.", 32);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
    goto LABEL_5;
  }
  sentencepiece::mmap_util::RemovePrefix(&v46, *((unsigned int *)a2 + 1), a4);
  if (*(_QWORD *)a4)
    return;
  sentencepiece::util::Status::~Status(a4);
  if (v47 >= *((unsigned int *)a2 + 2))
    v16 = *((unsigned int *)a2 + 2);
  else
    v16 = v47;
  sentencepiece::ModelFactory::Create(v12, (uint64_t)v46, v16, &v42);
  v17 = v42;
  v42 = 0;
  v18 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v17;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = v42;
    v42 = 0;
    if (v19)
      (*(void (**)(const char *))(*(_QWORD *)v19 + 8))(v19);
    v17 = (const char *)*((_QWORD *)this + 1);
  }
  if (!v17)
  {
    LODWORD(v42) = 13;
    v21 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"model_", 6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Failed to initialize Model.", 27);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
    goto LABEL_28;
  }
  (*(void (**)(const char **__return_ptr))(*(_QWORD *)v17 + 16))(&v42);
  v20 = v42;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v42);
  if (v20)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
    return;
  }
  sentencepiece::mmap_util::RemovePrefix(&v46, *((unsigned int *)a2 + 2), a4);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    v22 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v22)
    {
      if (v47 >= v22)
      {
        v25 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 152))(*((_QWORD *)this + 4));
        v26 = *((unsigned int *)a2 + 3);
        if (v47 < v26)
          v26 = v47;
        v42 = v46;
        v43[0] = v26;
        std::make_unique[abi:ne180100]<sentencepiece::normalizer::Normalizer,sentencepiece::MemoryMappedNormalizerSpec const&,std::string_view>(v25, &v42, &v41);
        v27 = v41;
        v41 = 0;
        v28 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v27;
        if (v28)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          v29 = v41;
          v41 = 0;
          if (v29)
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        }
        (*(void (**)(const char **__return_ptr))(**((_QWORD **)this + 2) + 24))(&v42);
        v30 = v42;
        sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v42);
        if (!v30)
        {
          sentencepiece::mmap_util::RemovePrefix(&v46, *((unsigned int *)a2 + 3), a4);
          if (*(_QWORD *)a4)
            return;
          sentencepiece::util::Status::~Status(a4);
          v32 = *((_QWORD *)this + 2);
          v33 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(v32, v33);
          if (*((_DWORD *)a2 + 4))
          {
            v34 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 160))(*((_QWORD *)this + 4));
            v35 = *((unsigned int *)a2 + 4);
            if (v47 < v35)
              v35 = v47;
            v42 = v46;
            v43[0] = v35;
            std::make_unique[abi:ne180100]<sentencepiece::normalizer::Normalizer,sentencepiece::MemoryMappedNormalizerSpec const&,std::string_view>(v34, &v42, &v41);
            v36 = v41;
            v41 = 0;
            v37 = *((_QWORD *)this + 3);
            *((_QWORD *)this + 3) = v36;
            if (v37)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
              v38 = v41;
              v41 = 0;
              if (v38)
                (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
            }
            (*(void (**)(const char **__return_ptr))(**((_QWORD **)this + 3) + 24))(&v42);
            v39 = v42;
            sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v42);
            if (v39)
            {
              LODWORD(v42) = 13;
              v40 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
              std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"denormalizer_->status().ok()", 28);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Failed to initialize Denormalizer.", 34);
              sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
              goto LABEL_28;
            }
            sentencepiece::mmap_util::RemovePrefix(&v46, *((unsigned int *)a2 + 4), a4);
            if (*(_QWORD *)a4)
              return;
            sentencepiece::util::Status::~Status(a4);
          }
          sentencepiece::util::Status::Status(a4);
          return;
        }
        LODWORD(v42) = 13;
        v31 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"normalizer_->status().ok()", 26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Failed to initialize Normalizer.", 32);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
      }
      else
      {
        LODWORD(v42) = 13;
        v23 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(blob.size()) >= (header->normalizer_size)", 42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
      }
    }
    else
    {
      LODWORD(v42) = 13;
      v24 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(header->normalizer_size) > (0)", 31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
    }
LABEL_28:
    sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&v42);
  }
}

void sub_191D10928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<sentencepiece::normalizer::Normalizer,sentencepiece::MemoryMappedNormalizerSpec const&,std::string_view>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = sentencepiece::normalizer::Normalizer::Normalizer(v6, a1, *a2, a2[1]);
  *a3 = v6;
  return result;
}

void sub_191D109F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::CopyAndLoadFromMemoryMappedFile(sentencepiece::SentencePieceProcessor *this, const char *a2)
{
  char *v3;
  uint64_t v4;

  v3 = (char *)this + 96;
  MEMORY[0x19401E658]((char *)this + 96, a2);
  if (*((char *)this + 119) < 0)
  {
    v3 = (char *)*((_QWORD *)this + 12);
    v4 = *((_QWORD *)this + 13);
  }
  else
  {
    v4 = *((unsigned __int8 *)this + 119);
  }
  return (*(uint64_t (**)(sentencepiece::SentencePieceProcessor *, char *, uint64_t))(*(_QWORD *)this + 48))(this, v3, v4);
}

void sentencepiece::SentencePieceProcessor::MMap(_QWORD *a1@<X0>, char *a2@<X1>, sentencepiece::util::Status *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::string __p;

  v6 = operator new();
  *(_QWORD *)v6 = &off_1E2DF11D0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 24) = -1;
  v7 = a1[11];
  a1[11] = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v6 = a1[11];
  }
  v8 = a2;
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__p, &v8);
  sentencepiece::Mmap<char>::open(v6, (uint64_t)&__p, 0, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*(_QWORD *)a3)
  {
    sentencepiece::util::Status::~Status(a3);
    (*(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 48))(a1, *(_QWORD *)(a1[11] + 8), *(_QWORD *)(a1[11] + 16));
  }
}

void sub_191D10B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::Mmap<char>::open(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  std::string *v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  std::string::value_type *v13;
  std::string *v14;
  int v15;
  int v16;
  std::string::size_type size;
  std::__fs::filesystem::path *v18;
  std::string *v19;
  off_t st_size;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  std::string __p[3];
  void *v27;
  char v28;
  _BYTE v29[152];
  std::string v30;
  std::__fs::filesystem::path v31;
  stat v32;

  sentencepiece::Mmap<char>::close(a1);
  if (!a3)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p[0] = *(std::string *)a2;
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = __p;
    else
      v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    v9 = open((const char *)v8, 0, __p[0].__r_.__value_.__r.__words[0], __p[0].__r_.__value_.__l.__size_, __p[0].__r_.__value_.__r.__words[2]);
    v10 = v9;
    *(_DWORD *)(a1 + 24) = v9;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0)
        goto LABEL_52;
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_52;
    }
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
    v11 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(fd = ::open(filename.string().data(), mode)) >= 0", 50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    v12 = *(unsigned __int8 *)(a2 + 23);
    if ((v12 & 0x80u) == 0)
      v13 = (std::string::value_type *)a2;
    else
      v13 = *(std::string::value_type **)a2;
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(a2 + 8);
LABEL_66:
    std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, v13, &v13[v12], 0x22u, 0x5Cu);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a4);
    __p[0].__r_.__value_.__l.__size_ = *MEMORY[0x1E0DE4F60];
    *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1]
                              + *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60]
                                                                                                + 24);
    __p[0].__r_.__value_.__r.__words[2] = MEMORY[0x1E0DE4FB8] + 16;
    if (v28 < 0)
      operator delete(v27);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19401E928](v29);
    return;
  }
  std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)a2, (uint64_t)&v31);
  std::__fs::filesystem::path::filename[abi:ne180100]((const std::__fs::filesystem::path *)a2, (uint64_t)&v30);
  std::__fs::filesystem::__status(&v31, 0);
  if (__p[0].__r_.__value_.__s.__data_[0] != 2)
    goto LABEL_30;
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(__p, v31.__pn_.__r_.__value_.__l.__data_, v31.__pn_.__r_.__value_.__l.__size_);
  else
    __p[0] = v31.__pn_;
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = __p;
  else
    v14 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  v15 = open((const char *)v14, 0, __p[0].__r_.__value_.__r.__words[0], __p[0].__r_.__value_.__l.__size_, __p[0].__r_.__value_.__r.__words[2]);
  v16 = v15;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0)
      goto LABEL_27;
LABEL_30:
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"std::filesystem::is_directory(dir) && (dirfd = ::open(dir.string().data(), mode)) >= 0", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    size = HIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]);
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v31;
    else
      v18 = (std::__fs::filesystem::path *)v31.__pn_.__r_.__value_.__r.__words[0];
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v31.__pn_.__r_.__value_.__l.__size_;
    std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, v18, (_BYTE *)v18 + size, 0x22u, 0x5Cu);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a4);
    __p[0].__r_.__value_.__l.__size_ = *MEMORY[0x1E0DE4F60];
    *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1]
                              + *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60]
                                                                                                + 24);
    __p[0].__r_.__value_.__r.__words[2] = MEMORY[0x1E0DE4FB8] + 16;
    if (v28 < 0)
      operator delete(v27);
    goto LABEL_37;
  }
  if (v15 < 0)
    goto LABEL_30;
LABEL_27:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(__p, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  else
    __p[0] = v30;
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = __p;
  else
    v19 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  *(_DWORD *)(a1 + 24) = openat_authenticated_np(v16, (const char *)v19, 0, -1);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  close(v16);
  if ((*(_DWORD *)(a1 + 24) & 0x80000000) == 0)
  {
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__pn_.__r_.__value_.__l.__data_);
LABEL_52:
    if (fstat(*(_DWORD *)(a1 + 24), &v32) < 0)
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
      v22 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"::fstat(fd, &st) >= 0", 21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"failed to get file size: ", 25);
      v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0)
        v13 = (std::string::value_type *)a2;
      else
        v13 = *(std::string::value_type **)a2;
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      st_size = v32.st_size;
      *(_QWORD *)(a1 + 16) = v32.st_size;
      v21 = mmap(0, st_size, 1, 1, *(_DWORD *)(a1 + 24), 0);
      if (v21 != (void *)-1)
      {
        *(_QWORD *)(a1 + 8) = v21;
        close(*(_DWORD *)(a1 + 24));
        *(_DWORD *)(a1 + 24) = -1;
        sentencepiece::util::Status::Status(a4);
        return;
      }
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
      v23 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(p = reinterpret_cast<char*>( ::mmap(0, length, PROT_READ, MAP_SHARED, fd, 0))) != MAP_FAILED", 93);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"mmap() failed: ", 15);
      v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0)
        v13 = (std::string::value_type *)a2;
      else
        v13 = *(std::string::value_type **)a2;
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(a2 + 8);
    }
    goto LABEL_66;
  }
  LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"fd >= 0", 7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
  v24 = *(unsigned __int8 *)(a2 + 23);
  if ((v24 & 0x80u) == 0)
    v25 = (_BYTE *)a2;
  else
    v25 = *(_BYTE **)a2;
  if ((v24 & 0x80u) != 0)
    v24 = *(_QWORD *)(a2 + 8);
  std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, v25, &v25[v24], 0x22u, 0x5Cu);
  sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a4);
  __p[0].__r_.__value_.__l.__size_ = *MEMORY[0x1E0DE4F60];
  *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1]
                            + *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60]
                                                                                              + 24);
  __p[0].__r_.__value_.__r.__words[2] = MEMORY[0x1E0DE4FB8] + 16;
  if (v28 < 0)
    operator delete(v27);
LABEL_37:
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19401E928](v29);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__pn_.__r_.__value_.__l.__data_);
}

void sub_191D11314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 - 217) < 0)
    operator delete(*(void **)(v14 - 240));
  if (*(char *)(v14 - 193) < 0)
    operator delete(*(void **)(v14 - 216));
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::MMapAuthenticated(_QWORD *a1@<X0>, char *a2@<X1>, sentencepiece::util::Status *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::string __p;

  v6 = operator new();
  *(_QWORD *)v6 = &off_1E2DF11D0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 24) = -1;
  v7 = a1[11];
  a1[11] = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v6 = a1[11];
  }
  v8 = a2;
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__p, &v8);
  sentencepiece::Mmap<char>::open(v6, (uint64_t)&__p, 1, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*(_QWORD *)a3)
  {
    sentencepiece::util::Status::~Status(a3);
    (*(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 48))(a1, *(_QWORD *)(a1[11] + 8), *(_QWORD *)(a1[11] + 16));
  }
}

void sub_191D114AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::EncodeAsPieces(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 136))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_191D11510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::EncodeAsIds(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 144))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_191D11570(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::NBestEncodeAsPieces(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 176))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_191D115D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::NBestEncodeAsIds(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 184))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_191D11634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAsPieces(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 192))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_191D11694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAsIds(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 200))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_191D116F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScoreAsPieces(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 208))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_191D11758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::vector<std::string>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScoreAsIds(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 216))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_191D117B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::DecodePieces(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 152))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_191D11818(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_191D1187C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::DecodeIds(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 168))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_191D118E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

float sentencepiece::SentencePieceProcessor::CalculateEntropy(uint64_t a1)
{
  float v1;
  uint64_t v3;
  float v4;

  v4 = 0.0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 224))(&v3);
  v1 = v4;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v3);
  return v1;
}

void sentencepiece::SentencePieceProcessor::EncodeAsSerializedProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  void (**v13)(sentencepiece::ImmutableSentencePieceText *__hidden);
  google::protobuf::MessageLite *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v13 = &off_1E2DF0FE0;
  v15 = 0;
  v16 = 0;
  v14 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  v8 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v13);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(&v12, a1, a2, a3, v8);
  google::protobuf::MessageLite::SerializeAsString(v14, a4);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v12);
  v13 = &off_1E2DF0FE0;
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_191D11A18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100](v2 + 16);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAsSerializedProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  void (**v17)(sentencepiece::ImmutableSentencePieceText *__hidden);
  google::protobuf::MessageLite *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v17 = &off_1E2DF0FE0;
  v19 = 0;
  v20 = 0;
  v18 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  v12 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v17);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 248))(&v16, a1, a2, a3, a4, v12, a6);
  google::protobuf::MessageLite::SerializeAsString(v18, a5);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v16);
  v17 = &off_1E2DF0FE0;
  v13 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_191D11B34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100](v2 + 16);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::NBestEncodeAsSerializedProto(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  std::__shared_weak_count *v16;

  v15[1] = 0;
  v16 = 0;
  v15[0] = &off_1E2DF1040;
  v10 = sentencepiece::ImmutableNBestSentencePieceText::mutable_proto((sentencepiece::ImmutableNBestSentencePieceText *)v15);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(&v14, a1, a2, a3, a4, v10);
  sentencepiece::ImmutableNBestSentencePieceText::SerializeAsString((sentencepiece::ImmutableNBestSentencePieceText *)v15, a5);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v14);
  v15[0] = &off_1E2DF1040;
  v11 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_191D11C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a9);
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100](v10 + 8);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScoreAsSerializedProto(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>, float a8@<S0>)
{
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  std::__shared_weak_count *v22;

  v21[1] = 0;
  v22 = 0;
  v21[0] = &off_1E2DF1040;
  v16 = sentencepiece::ImmutableNBestSentencePieceText::mutable_proto((sentencepiece::ImmutableNBestSentencePieceText *)v21);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 256))(&v20, a1, a2, a3, a4, a5, a6, v16, a8);
  sentencepiece::ImmutableNBestSentencePieceText::SerializeAsString((sentencepiece::ImmutableNBestSentencePieceText *)v21, a7);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v20);
  v21[0] = &off_1E2DF1040;
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_191D11D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a9);
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100](v10 + 8);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::DecodePiecesAsSerializedProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  void (**v11)(sentencepiece::ImmutableSentencePieceText *__hidden);
  google::protobuf::MessageLite *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v11 = &off_1E2DF0FE0;
  v13 = 0;
  v14 = 0;
  v12 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v11);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(_QWORD *)a1 + 264))(&v10, a1, a2, v6);
  google::protobuf::MessageLite::SerializeAsString(v12, a3);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
  v11 = &off_1E2DF0FE0;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  void (**v11)(sentencepiece::ImmutableSentencePieceText *__hidden);
  google::protobuf::MessageLite *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v11 = &off_1E2DF0FE0;
  v13 = 0;
  v14 = 0;
  v12 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v11);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(_QWORD *)a1 + 272))(&v10, a1, a2, v6);
  google::protobuf::MessageLite::SerializeAsString(v12, a3);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
  v11 = &off_1E2DF0FE0;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_191D11E58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100](v2 + 16);
  _Unwind_Resume(a1);
}

void sub_191D11F4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100](v2 + 16);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::DecodeIdsAsSerializedProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  void (**v11)(sentencepiece::ImmutableSentencePieceText *__hidden);
  google::protobuf::MessageLite *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v11 = &off_1E2DF0FE0;
  v13 = 0;
  v14 = 0;
  v12 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v11);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(&v10, a1, a2, v6);
  google::protobuf::MessageLite::SerializeAsString(v12, a3);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
  v11 = &off_1E2DF0FE0;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_191D12040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100](v2 + 16);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::EncodeAsImmutableProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, sentencepiece::ImmutableSentencePieceText *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a4 = &off_1E2DF0FE0;
  *((_QWORD *)a4 + 1) = sentencepiece::SentencePieceText::default_instance(a1);
  *((_QWORD *)a4 + 2) = 0;
  *((_QWORD *)a4 + 3) = 0;
  v8 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a4);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(&v9, a1, a2, a3, v8);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v9);
}

void sub_191D120F8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAsImmutableProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, sentencepiece::ImmutableSentencePieceText *a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a5 = &off_1E2DF0FE0;
  *((_QWORD *)a5 + 1) = sentencepiece::SentencePieceText::default_instance(a1);
  *((_QWORD *)a5 + 2) = 0;
  *((_QWORD *)a5 + 3) = 0;
  v12 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a5);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 248))(&v13, a1, a2, a3, a4, v12, a6);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v13);
}

void sub_191D121C0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::NBestEncodeAsImmutableProto(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, sentencepiece::ImmutableNBestSentencePieceText *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a5 = &off_1E2DF1040;
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  v9 = sentencepiece::ImmutableNBestSentencePieceText::mutable_proto(a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(&v10, a1, a2, a3, a4, v9);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
}

void sub_191D12270(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = v3;
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScoreAsImmutableProto(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, sentencepiece::ImmutableNBestSentencePieceText *a7@<X8>, float a8@<S0>)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a7 = &off_1E2DF1040;
  *((_QWORD *)a7 + 1) = 0;
  *((_QWORD *)a7 + 2) = 0;
  v15 = sentencepiece::ImmutableNBestSentencePieceText::mutable_proto(a7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 256))(&v16, a1, a2, a3, a4, a5, a6, v15, a8);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v16);
}

void sub_191D12348(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::DecodePiecesAsImmutableProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, sentencepiece::ImmutableSentencePieceText *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a3 = &off_1E2DF0FE0;
  *((_QWORD *)a3 + 1) = sentencepiece::SentencePieceText::default_instance(a1);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a3);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(_QWORD *)a1 + 264))(&v7, a1, a2, v6);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v7);
}

{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a3 = &off_1E2DF0FE0;
  *((_QWORD *)a3 + 1) = sentencepiece::SentencePieceText::default_instance(a1);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a3);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(_QWORD *)a1 + 272))(&v7, a1, a2, v6);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v7);
}

void sub_191D123E8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sub_191D12488(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::DecodeIdsAsImmutableProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, sentencepiece::ImmutableSentencePieceText *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a3 = &off_1E2DF0FE0;
  *((_QWORD *)a3 + 1) = sentencepiece::SentencePieceText::default_instance(a1);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a3);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(&v7, a1, a2, v6);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v7);
}

void sub_191D12528(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  std::shared_ptr<CoreNLP::ReadOnlyFile<char>>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_191D125FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_191D126D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_191D127B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char **absl::internal::Splitter::Splitter(char **a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5, int a6)
{
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  _BOOL4 v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  BOOL v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;

  v9 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v10 = 0;
  if (a5)
  {
    v11 = a6;
    if (a3)
    {
      v9 = 0;
      v10 = 0;
      v14 = (unsigned __int8 *)(a2 + a3);
      v15 = a1 + 2;
      while (2)
      {
        v16 = &v10[a2];
        v17 = &v10[a2];
LABEL_5:
        v18 = a5;
        v19 = a4;
        while (*v17 != *v19)
        {
          ++v19;
          if (!--v18)
          {
            if (++v17 != v14)
              goto LABEL_5;
            goto LABEL_37;
          }
        }
        if (v17 != v14)
        {
          v20 = &v17[-a2];
          if (&v17[-a2] != (unsigned __int8 *)-1)
          {
            v21 = (unsigned __int8 *)(v20 - v10);
            v22 = v20 >= v10;
            if (!v11)
              v22 = v20 > v10;
            if (v22)
            {
              v23 = (unsigned __int8 *)(a3 - (_QWORD)v10);
              if (v23 >= v21)
                v24 = v21;
              else
                v24 = v23;
              if ((unint64_t)v9 >= *v15)
              {
                v25 = ((char *)v9 - *a1) >> 4;
                if ((unint64_t)(v25 + 1) >> 60)
                  std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
                v26 = *v15 - (_QWORD)*a1;
                v27 = v26 >> 3;
                if (v26 >> 3 <= (unint64_t)(v25 + 1))
                  v27 = v25 + 1;
                if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
                  v28 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v28 = v27;
                if (v28)
                  v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>((uint64_t)v15, v28);
                else
                  v29 = 0;
                v30 = &v29[16 * v25];
                *(_QWORD *)v30 = v16;
                *((_QWORD *)v30 + 1) = v24;
                v32 = *a1;
                v31 = a1[1];
                v33 = v30;
                if (v31 != *a1)
                {
                  do
                  {
                    *((_OWORD *)v33 - 1) = *((_OWORD *)v31 - 1);
                    v33 -= 16;
                    v31 -= 16;
                  }
                  while (v31 != v32);
                  v31 = *a1;
                }
                v9 = (unsigned __int8 **)(v30 + 16);
                *a1 = v33;
                a1[1] = v30 + 16;
                a1[2] = &v29[16 * v28];
                if (v31)
                  operator delete(v31);
                v11 = a6;
                v15 = a1 + 2;
              }
              else
              {
                *v9 = v16;
                v9[1] = v24;
                v9 += 2;
              }
              a1[1] = (char *)v9;
            }
            v10 = v20 + 1;
            if (a3 > (unint64_t)(v20 + 1))
              continue;
          }
        }
        break;
      }
    }
  }
LABEL_37:
  v34 = a3 > (unint64_t)v10;
  v35 = a3 - (_QWORD)v10;
  if (v34)
  {
    v36 = &v10[a2];
    v37 = (unint64_t)a1[2];
    if ((unint64_t)v9 >= v37)
    {
      v39 = ((char *)v9 - *a1) >> 4;
      if ((unint64_t)(v39 + 1) >> 60)
        std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
      v40 = v37 - (_QWORD)*a1;
      v41 = v40 >> 3;
      if (v40 >> 3 <= (unint64_t)(v39 + 1))
        v41 = v39 + 1;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
        v42 = 0xFFFFFFFFFFFFFFFLL;
      else
        v42 = v41;
      if (v42)
        v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>((uint64_t)(a1 + 2), v42);
      else
        v43 = 0;
      v44 = &v43[16 * v39];
      v45 = &v43[16 * v42];
      *(_QWORD *)v44 = v36;
      *((_QWORD *)v44 + 1) = v35;
      v38 = v44 + 16;
      v47 = *a1;
      v46 = a1[1];
      if (v46 != *a1)
      {
        do
        {
          *((_OWORD *)v44 - 1) = *((_OWORD *)v46 - 1);
          v44 -= 16;
          v46 -= 16;
        }
        while (v46 != v47);
        v46 = *a1;
      }
      *a1 = v44;
      a1[1] = v38;
      a1[2] = v45;
      if (v46)
        operator delete(v46);
    }
    else
    {
      *v9 = v36;
      v9[1] = (unsigned __int8 *)v35;
      v38 = (char *)(v9 + 2);
    }
    a1[1] = v38;
  }
  return a1;
}

void sub_191D12A78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::vector<std::string>::pointer end;
  size_t v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(end, v5);
    this->__end_ = (std::vector<std::string>::pointer)((char *)end + v5);
  }
  return this;
}

void sub_191D12B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::string_view>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<float,unsigned long>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_191D12B94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void absl::StrReplaceAll(void *__src@<X0>, size_t __len@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::string *p_dst;
  std::string::size_type size;
  char *v10;
  int64_t v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string __dst;
  std::string *v18;
  std::string::size_type v19;

  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v6 = *a3;
  v7 = a3[1];
  while (v6 != v7)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v10 = *(char **)v6;
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(const std::string::value_type **)(v6 + 16);
    v13 = *(_QWORD *)(v6 + 24);
    v18 = p_dst;
    v19 = size;
    if (v11)
    {
      v14 = std::string_view::find[abi:ne180100]((uint64_t *)&v18, v10, v11, 0);
      if (v14 == -1)
      {
        v16 = 0;
      }
      else
      {
        v15 = v14;
        v16 = 0;
        do
        {
          std::string::append((std::string *)a4, (const std::string::value_type *)v18 + v16, v15 - v16);
          std::string::append((std::string *)a4, v12, v13);
          v16 = v15 + v11;
          v15 = std::string_view::find[abi:ne180100]((uint64_t *)&v18, v10, v11, v15 + v11);
        }
        while (v15 != -1);
      }
      p_dst = (std::string *)((char *)v18 + v16);
      size = v19 - v16;
    }
    std::string::append((std::string *)a4, (const std::string::value_type *)p_dst, size);
    std::string::operator=(&__dst, (const std::string *)a4);
    v6 += 32;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_191D12D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::vector<std::string>,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_191D12E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN13sentencepiece17SentencePieceTextENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x70uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN13sentencepiece17SentencePieceTextENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_191D12EC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN13sentencepiece17SentencePieceTextENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2DF3580;
  sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)(a1 + 3), 0);
  return a1;
}

void sub_191D12F10(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<sentencepiece::SentencePieceText>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DF3580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<sentencepiece::SentencePieceText>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DF3580;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401E994);
}

void std::__shared_ptr_emplace<sentencepiece::SentencePieceText>::__on_zero_shared(uint64_t a1)
{
  sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)(a1 + 24));
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN13sentencepiece22NBestSentencePieceTextENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x48uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN13sentencepiece22NBestSentencePieceTextENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_191D12FA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN13sentencepiece22NBestSentencePieceTextENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2DF35B8;
  sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)(a1 + 3), 0);
  return a1;
}

void sub_191D12FF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<sentencepiece::NBestSentencePieceText>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DF35B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<sentencepiece::NBestSentencePieceText>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DF35B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401E994);
}

void std::__shared_ptr_emplace<sentencepiece::NBestSentencePieceText>::__on_zero_shared(uint64_t a1)
{
  sentencepiece::NBestSentencePieceText::~NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)(a1 + 24));
}

sentencepiece::ModelProto *std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](sentencepiece::ModelProto **a1, sentencepiece::ModelProto *a2)
{
  sentencepiece::ModelProto *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sentencepiece::ModelProto::~ModelProto(result);
    JUMPOUT(0x19401E994);
  }
  return result;
}

void absl::StrCat<std::string,char [2],std::string>(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, char *a4@<X3>, void **a5@<X4>, std::string *a6@<X8>)
{
  int v10;
  void *v11;
  size_t v12;
  std::string *p_p;
  std::string::size_type size;
  std::string *v15;
  std::string __p;
  std::string __dst;

  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  v10 = *((char *)a3 + 23);
  if (v10 >= 0)
    v11 = a3;
  else
    v11 = *a3;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a3 + 23);
  else
    v12 = (size_t)a3[1];
  absl::StrCat<char [2],std::string>(v11, v12, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a6 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_191D13158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void absl::StrCat<char [2],std::string>(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, std::string *a5@<X8>)
{
  size_t v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  std::string __p;
  std::string __dst;

  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  v8 = strlen(a3);
  absl::StrCat<std::string>(a3, v8, a4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v11 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a5 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_191D13248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void absl::StrCat<std::string>(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, std::string *a4@<X8>)
{
  int v6;
  void *v7;
  size_t v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  void *__p[2];
  unsigned __int8 v13;
  std::string __dst;

  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  v6 = *((char *)a3 + 23);
  if (v6 >= 0)
    v7 = a3;
  else
    v7 = *a3;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)a3 + 23);
  else
    v8 = (size_t)a3[1];
  std::string::basic_string[abi:ne180100](__p, v7, v8);
  if ((v13 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v10 = v13;
  else
    v10 = (std::string::size_type)__p[1];
  v11 = std::string::append(&__dst, (const std::string::value_type *)v9, v10);
  *a4 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if ((char)v13 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_191D13330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t std::set<std::string_view>::set[abi:ne180100]<std::__wrap_iter<std::string_view const*>>(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  _QWORD *v4;
  _OWORD *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::string_view>::__emplace_hint_unique_key_args<std::string_view,std::string_view const&>((uint64_t **)a1, v4, (uint64_t)v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_191D133CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string_view>::__emplace_hint_unique_key_args<std::string_view,std::string_view const&>(uint64_t **a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = std::__tree<std::string_view>::__find_equal<std::string_view>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::string_view>::__find_equal<std::string_view>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2
    || std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (uint64_t)(a2 + 4)))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(v12 + 4), a5))
      goto LABEL_16;
    return std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(a2 + 4), a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (uint64_t)(v15 + 4)))return std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

_QWORD *std::__tree<std::string_view>::find<std::string_view>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = std::less<std::string_view>::operator()[abi:ne180100](v5, (uint64_t)(v3 + 4), a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string_view>::operator()[abi:ne180100](v5, a2, (uint64_t)(v6 + 4)))
    return v2;
  return v6;
}

std::string *std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string>&>(uint64_t a1, __int128 **a2)
{
  std::string *v3;
  std::string *result;

  v3 = *(std::string **)(a1 + 8);
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 1;
  return result;
}

void sub_191D136E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::string>>::__emplace_back_slow_path<std::vector<std::string>&>(uint64_t *a1, __int128 **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  uint64_t v12;
  void *v14[2];
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  ++v15;
  std::vector<std::vector<std::string>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<std::string>>::~__split_buffer(v14);
  return v12;
}

void sub_191D137F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_191D13850(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<int>>::__emplace_back_slow_path<std::vector<int>&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_191D13958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<std::string>,float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 4;
  }
}

void **std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::pair<std::vector<std::string>,float>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::pair<std::vector<std::string>,float>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 32);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

float std::vector<std::pair<std::vector<std::string>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string>&,float>(uint64_t a1, __int128 **a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_191D13BEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<std::string>,float>>::__emplace_back_slow_path<std::vector<std::string>&,float>(uint64_t *a1, __int128 **a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  uint64_t v14;
  void *v16[2];
  std::string *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>>(v9, v11);
  else
    v12 = 0;
  v13 = (std::string *)&v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  v13->__r_.__value_.__r.__words[0] = 0;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  LODWORD(v13[1].__r_.__value_.__l.__data_) = *a3;
  v17 = (std::string *)((char *)v17 + 32);
  std::vector<std::pair<std::vector<std::string>,float>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer(v16);
  return v14;
}

void sub_191D13CEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<int>,float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::pair<std::vector<int>,float>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::pair<std::vector<int>,float>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 32);
    *(_QWORD *)(a1 + 16) = v2 - 32;
    if (v5)
    {
      *(_QWORD *)(v2 - 24) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

float std::vector<std::pair<std::vector<int>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&,float>(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v5, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_191D13F7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<int>,float>>::__emplace_back_slow_path<std::vector<int>&,float>(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>>(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v13, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  std::vector<std::pair<std::vector<int>,float>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_191D14070(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t std::discrete_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(int a1, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this, double **a3)
{
  double *v5;
  double *v6;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v7;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8;
  unint64_t v9;
  unint64_t v10;
  double *v11;
  double *v12;
  double v13;

  v5 = *a3;
  v6 = a3[1];
  v7 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this);
  v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this);
  if (v6 != v5)
  {
    v9 = v6 - v5;
    do
    {
      v10 = v9 >> 1;
      v11 = &v5[v9 >> 1];
      v13 = *v11;
      v12 = v11 + 1;
      v9 += ~(v9 >> 1);
      if (((double)v7 + (double)v8 * 4294967300.0) * 5.42101086e-20 + 0.0 < v13)
        v9 = v10;
      else
        v5 = v12;
    }
    while (v9);
    v6 = v5;
  }
  return (unint64_t)((char *)v6 - (char *)*a3) >> 3;
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string_view>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  std::string *v7;
  uint64_t v8;
  std::__split_buffer<std::string> __v;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
  if (v6)
    v7 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a1 + 16, v6);
  else
    v7 = 0;
  __v.__first_ = v7;
  __v.__begin_ = v7 + v3;
  __v.__end_cap_.__value_ = &v7[v6];
  std::allocator<std::string>::construct[abi:ne180100]<std::string,std::string_view>(a1 + 16, __v.__begin_, a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v8 = *(_QWORD *)(a1 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v8;
}

void sub_191D14230(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::allocator<std::string>::construct[abi:ne180100]<std::string,std::string_view>(int a1, _BYTE *__dst, uint64_t a3)
{
  _QWORD *v3;
  size_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = __dst;
  v4 = *(_QWORD *)(a3 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = *(const void **)a3;
  if (v4 >= 0x17)
  {
    v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v6 = v4 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v3[1] = v4;
    v3[2] = v7 | 0x8000000000000000;
    *v3 = v8;
    v3 = v8;
  }
  else
  {
    __dst[23] = v4;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v3, v5, v4);
LABEL_9:
  *((_BYTE *)v3 + v4) = 0;
}

uint64_t *sentencepiece::swap(uint64_t *this, sentencepiece::SentencePieceText_SentencePiece *a2, sentencepiece::SentencePieceText_SentencePiece *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  if (a2 != (sentencepiece::SentencePieceText_SentencePiece *)this)
  {
    v3 = this[1];
    v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFFELL);
    if ((v3 & 1) != 0)
      v4 = (_QWORD *)*v4;
    v5 = *((_QWORD *)a2 + 1);
    v6 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL);
    if ((v5 & 1) != 0)
      v6 = (_QWORD *)*v6;
    if (v4 == v6)
      return sentencepiece::SentencePieceText_SentencePiece::InternalSwap((sentencepiece::SentencePieceText_SentencePiece *)this, a2);
    else
      return (uint64_t *)google::protobuf::internal::GenericSwap((google::protobuf::internal *)this, a2, a3);
  }
  return this;
}

uint64_t std::map<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>::map[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 24 * a3;
    do
    {
      std::__tree<std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,sentencepiece::SentencePieceProcessor::ExtraOption> const&>((uint64_t **)a1, v4, a2, a2);
      a2 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_191D14388(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,sentencepiece::SentencePieceProcessor::ExtraOption> const&>(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = std::__tree<std::string_view>::__find_equal<std::string_view>(a1, a2, &v11, &v10, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *sentencepiece::Mmap<char>::~Mmap(_QWORD *a1)
{
  *a1 = &off_1E2DF11D0;
  sentencepiece::Mmap<char>::close((uint64_t)a1);
  return a1;
}

void sentencepiece::Mmap<char>::~Mmap(_QWORD *a1)
{
  *a1 = &off_1E2DF11D0;
  sentencepiece::Mmap<char>::close((uint64_t)a1);
  JUMPOUT(0x19401E994);
}

void *sentencepiece::Mmap<char>::close(uint64_t a1)
{
  int v2;
  void *result;

  v2 = *(_DWORD *)(a1 + 24);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(a1 + 24) = -1;
  }
  result = *(void **)(a1 + 8);
  if (result)
    result = (void *)munmap(result, *(_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

double std::__fs::filesystem::path::parent_path[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__parent_path(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

double std::__fs::filesystem::path::filename[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__filename(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

_QWORD *std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, _BYTE *a2, _BYTE *a3, unsigned __int8 __c, unsigned __int8 a5)
{
  int v10;
  std::string *v11;
  std::string::size_type size;
  _QWORD *v13;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  std::string::push_back(&v15, __c);
  while (a2 != a3)
  {
    v10 = *a2;
    if (v10 == a5 || v10 == __c)
    {
      std::string::push_back(&v15, a5);
      LOBYTE(v10) = *a2;
    }
    std::string::push_back(&v15, v10);
    ++a2;
  }
  std::string::push_back(&v15, __c);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v15;
  else
    v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v11, size);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v13;
}

void sub_191D14748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, char **a2)
{
  char *v3;
  char *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *a2;
  v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_191D147A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

void sentencepiece::SentencePieceProcessor::ResetVocabulary()
{
  __assert_rtn("_internal_set_type", "sentencepiece_model.pb.h", 4686, "::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value)");
}

void sentencepiece::unigram::Lattice::~Lattice(sentencepiece::unigram::Lattice *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E2DF1430;
  sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::~FreeList((_QWORD *)this + 12);
  v3 = (void **)((char *)this + 72);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 48);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  sentencepiece::unigram::Lattice::~Lattice(this);
  JUMPOUT(0x19401E994);
}

uint64_t sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Allocate(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t result;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 >= v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  v6 = (char **)(a1 + 1);
  if (v2 == (a1[2] - v5) >> 3)
  {
    v7 = 48 * v3;
    is_mul_ok(v3, 0x30uLL);
    v8 = (_QWORD *)operator new[]();
    v9 = v8;
    if (v3)
    {
      v10 = v8;
      do
      {
        *v10 = 0;
        v10[1] = 0;
        v10 += 6;
        v7 -= 48;
      }
      while (v7);
    }
    bzero(v8, 48 * a1[6]);
    v11 = a1[3];
    v12 = (_QWORD *)a1[2];
    if ((unint64_t)v12 >= v11)
    {
      v14 = ((char *)v12 - *v6) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
      v15 = v11 - (_QWORD)*v6;
      v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1))
        v16 = v14 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v17);
      else
        v18 = 0;
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *(_QWORD *)v19 = v9;
      v13 = v19 + 8;
      v22 = (char *)a1[1];
      v21 = (char *)a1[2];
      if (v21 != v22)
      {
        do
        {
          v23 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *((_QWORD *)v19 - 1) = v23;
          v19 -= 8;
        }
        while (v21 != v22);
        v21 = *v6;
      }
      a1[1] = v19;
      a1[2] = v13;
      a1[3] = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v12 = v9;
      v13 = v12 + 1;
    }
    a1[2] = v13;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  result = *(_QWORD *)(v5 + 8 * v2) + 48 * v4;
  a1[4] = v4 + 1;
  return result;
}

void sentencepiece::unigram::Lattice::Clear(sentencepiece::unigram::Lattice *this)
{
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)this + 6);
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)this + 9);
  *((_QWORD *)this + 1) = "";
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = *((_QWORD *)this + 3);
  sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Free((uint64_t)this + 96);
}

void sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Free(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2 + 1 < (int)((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3))
    v3 = v2 + 1;
  else
    v3 = (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = 8 * v3;
    do
    {
      bzero(*(void **)(*(_QWORD *)(a1 + 8) + v4), 48 * *(_QWORD *)(a1 + 48));
      v4 += 8;
    }
    while (v5 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
}

void sentencepiece::unigram::Lattice::SetSentence(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  char **v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  _DWORD *v34;
  void **v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD *v50;
  void **v51;
  void **v52;
  _QWORD *v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;

  sentencepiece::unigram::Lattice::Clear((sentencepiece::unigram::Lattice *)a1);
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  v6 = (char **)(a1 + 24);
  std::vector<void const*>::reserve((void **)(a1 + 24), a3 + 1);
  if (a3)
  {
    v7 = (_QWORD *)(a1 + 40);
    v8 = *(_QWORD **)(a1 + 32);
    do
    {
      if ((int)a3 >= asc_191D57358[(unint64_t)*a2 >> 4])
        v9 = asc_191D57358[(unint64_t)*a2 >> 4];
      else
        v9 = a3;
      if ((unint64_t)v8 >= *v7)
      {
        v10 = ((char *)v8 - *v6) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          goto LABEL_76;
        v11 = *v7 - (_QWORD)*v6;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 40, v13);
        else
          v14 = 0;
        v15 = &v14[8 * v10];
        *(_QWORD *)v15 = a2;
        v8 = v15 + 8;
        v17 = *(char **)(a1 + 24);
        v16 = *(char **)(a1 + 32);
        if (v16 != v17)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *((_QWORD *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          v16 = *v6;
        }
        *(_QWORD *)(a1 + 24) = v15;
        *(_QWORD *)(a1 + 32) = v8;
        *(_QWORD *)(a1 + 40) = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v8++ = a2;
      }
      *(_QWORD *)(a1 + 32) = v8;
      a2 += v9;
      a3 -= v9;
    }
    while (a3);
  }
  else
  {
    v8 = *(_QWORD **)(a1 + 32);
  }
  v19 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v8 >= v19)
  {
    v21 = ((char *)v8 - *v6) >> 3;
    if ((unint64_t)(v21 + 1) >> 61)
LABEL_76:
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v22 = v19 - (_QWORD)*v6;
    v23 = v22 >> 2;
    if (v22 >> 2 <= (unint64_t)(v21 + 1))
      v23 = v21 + 1;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v23;
    if (v24)
      v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 40, v24);
    else
      v25 = 0;
    v26 = &v25[8 * v21];
    v27 = &v25[8 * v24];
    *(_QWORD *)v26 = a2;
    v20 = v26 + 8;
    v29 = *(char **)(a1 + 24);
    v28 = *(char **)(a1 + 32);
    if (v28 != v29)
    {
      do
      {
        v30 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *((_QWORD *)v26 - 1) = v30;
        v26 -= 8;
      }
      while (v28 != v29);
      v28 = *v6;
    }
    *(_QWORD *)(a1 + 24) = v26;
    *(_QWORD *)(a1 + 32) = v20;
    *(_QWORD *)(a1 + 40) = v27;
    if (v28)
      operator delete(v28);
  }
  else
  {
    *v8 = a2;
    v20 = v8 + 1;
  }
  *(_QWORD *)(a1 + 32) = v20;
  v31 = (((unint64_t)v20 - *(_QWORD *)(a1 + 24)) >> 3) - 1;
  v32 = v31 & ~(v31 >> 31);
  std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::resize((uint64_t *)(a1 + 48), v32 + 1);
  std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::resize((uint64_t *)(a1 + 72), v32 + 1);
  v33 = 0;
  do
  {
    std::vector<void const*>::reserve((void **)(*(_QWORD *)(a1 + 48) + v33), 0x10uLL);
    std::vector<void const*>::reserve((void **)(*(_QWORD *)(a1 + 72) + v33), 0x10uLL);
    v33 += 24;
  }
  while (24 * v32 + 24 != v33);
  v34 = (_DWORD *)sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Allocate((_QWORD *)(a1 + 96));
  v34[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v34[7] = -1;
  v34[4] = 0;
  v35 = *(void ***)(a1 + 72);
  v36 = v35[1];
  v37 = (unint64_t)v35[2];
  if ((unint64_t)v36 >= v37)
  {
    v39 = ((char *)v36 - (_BYTE *)*v35) >> 3;
    if ((unint64_t)(v39 + 1) >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v40 = v37 - (_QWORD)*v35;
    v41 = v40 >> 2;
    if (v40 >> 2 <= (unint64_t)(v39 + 1))
      v41 = v39 + 1;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
      v42 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v42 = v41;
    if (v42)
      v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v35 + 2), v42);
    else
      v43 = 0;
    v44 = &v43[8 * v39];
    v45 = &v43[8 * v42];
    *(_QWORD *)v44 = v34;
    v38 = v44 + 8;
    v47 = (char *)*v35;
    v46 = (char *)v35[1];
    if (v46 != *v35)
    {
      do
      {
        v48 = *((_QWORD *)v46 - 1);
        v46 -= 8;
        *((_QWORD *)v44 - 1) = v48;
        v44 -= 8;
      }
      while (v46 != v47);
      v46 = (char *)*v35;
    }
    *v35 = v44;
    v35[1] = v38;
    v35[2] = v45;
    if (v46)
      operator delete(v46);
  }
  else
  {
    *v36 = v34;
    v38 = v36 + 1;
  }
  v35[1] = v38;
  v49 = (_DWORD *)sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Allocate((_QWORD *)(a1 + 96));
  v50 = v49;
  v49[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v49[7] = -1;
  v49[4] = v32;
  v51 = (void **)(*(_QWORD *)(a1 + 48) + 24 * v32);
  v52 = v51 + 1;
  v53 = v51[1];
  v54 = (unint64_t)v51[2];
  if ((unint64_t)v53 >= v54)
  {
    v56 = ((char *)v53 - (_BYTE *)*v51) >> 3;
    if ((unint64_t)(v56 + 1) >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v57 = v54 - (_QWORD)*v51;
    v58 = v57 >> 2;
    if (v57 >> 2 <= (unint64_t)(v56 + 1))
      v58 = v56 + 1;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
      v59 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v59 = v58;
    if (v59)
      v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v51 + 2), v59);
    else
      v60 = 0;
    v61 = &v60[8 * v56];
    v62 = &v60[8 * v59];
    *(_QWORD *)v61 = v50;
    v55 = v61 + 8;
    v63 = (char *)*v52;
    v64 = (char *)*v51;
    if (*v52 != *v51)
    {
      do
      {
        v65 = *((_QWORD *)v63 - 1);
        v63 -= 8;
        *((_QWORD *)v61 - 1) = v65;
        v61 -= 8;
      }
      while (v63 != v64);
      v63 = (char *)*v51;
    }
    *v51 = v61;
    *v52 = v55;
    v51[2] = v62;
    if (v63)
      operator delete(v63);
  }
  else
  {
    *v53 = v49;
    v55 = v53 + 1;
  }
  *v52 = v55;
}

void std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t sentencepiece::unigram::Lattice::Insert(sentencepiece::unigram::Lattice *this, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  void **v13;
  uint64_t *v14;
  unint64_t v15;
  char **v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void **v28;
  void **v29;
  uint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v6 = sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Allocate((_QWORD *)this + 12);
  v7 = v6;
  v8 = *((_DWORD *)this + 32) + *((_DWORD *)this + 34) * *((_DWORD *)this + 36) - 1;
  *(_DWORD *)(v6 + 20) = a3;
  *(_DWORD *)(v6 + 24) = v8;
  *(_DWORD *)(v6 + 16) = a2;
  v9 = *((_QWORD *)this + 3);
  v10 = *(_QWORD *)(v9 + 8 * (a3 + a2));
  v11 = *(_QWORD *)(v9 + 8 * a2);
  *(_QWORD *)v6 = v11;
  *(_QWORD *)(v6 + 8) = (int)v10 - (int)v11;
  v12 = (uint64_t **)(*((_QWORD *)this + 6) + 24 * a2);
  v13 = (void **)(v12 + 1);
  v14 = v12[1];
  v16 = (char **)(v12 + 2);
  v15 = (unint64_t)v12[2];
  if ((unint64_t)v14 >= v15)
  {
    v18 = v14 - *v12;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v19 = v15 - (_QWORD)*v12;
    v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1))
      v20 = v18 + 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    if (v21)
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v16, v21);
    else
      v22 = 0;
    v23 = (uint64_t *)&v22[8 * v18];
    v24 = &v22[8 * v21];
    *v23 = v7;
    v17 = v23 + 1;
    v25 = (char *)*v13;
    v26 = (char *)*v12;
    if (*v13 != *v12)
    {
      do
      {
        v27 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *--v23 = v27;
      }
      while (v25 != v26);
      v25 = (char *)*v12;
    }
    *v12 = v23;
    *v13 = v17;
    *v16 = v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v14 = v6;
    v17 = v14 + 1;
  }
  *v13 = v17;
  v28 = (void **)(*((_QWORD *)this + 9) + 24 * (*(_DWORD *)(v7 + 20) + a2));
  v29 = v28 + 1;
  v30 = (uint64_t *)v28[1];
  v31 = (unint64_t)v28[2];
  if ((unint64_t)v30 >= v31)
  {
    v33 = ((char *)v30 - (_BYTE *)*v28) >> 3;
    if ((unint64_t)(v33 + 1) >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v34 = v31 - (_QWORD)*v28;
    v35 = v34 >> 2;
    if (v34 >> 2 <= (unint64_t)(v33 + 1))
      v35 = v33 + 1;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v35;
    if (v36)
      v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v28 + 2), v36);
    else
      v37 = 0;
    v38 = (uint64_t *)&v37[8 * v33];
    v39 = &v37[8 * v36];
    *v38 = v7;
    v32 = v38 + 1;
    v40 = (char *)*v29;
    v41 = (char *)*v28;
    if (*v29 != *v28)
    {
      do
      {
        v42 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        *--v38 = v42;
      }
      while (v40 != v41);
      v40 = (char *)*v28;
    }
    *v28 = v38;
    *v29 = v32;
    v28[2] = v39;
    if (v40)
      operator delete(v40);
  }
  else
  {
    *v30 = v7;
    v32 = v30 + 1;
  }
  *v29 = v32;
  return v7;
}

void sentencepiece::unigram::Lattice::Viterbi(sentencepiece::unigram::Lattice *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  char *v36;
  uint64_t v37;
  BOOL v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *__p;
  char *v46;
  char *v47;

  v3 = 0;
  v4 = ((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) - 1;
  v5 = v4 & ~(v4 >> 31);
  v6 = *((_QWORD *)this + 6);
  while (1)
  {
    v7 = (uint64_t **)(v6 + 24 * v3);
    v8 = *v7;
    v9 = v7[1];
    if (v8 != v9)
      break;
LABEL_14:
    if (++v3 == v5 + 1)
    {
      __p = 0;
      v46 = 0;
      v47 = 0;
      v21 = **(_QWORD **)(v6 + 24 * v5);
      v22 = *(_DWORD *)(v21 + 36);
      v23 = *(_QWORD *)(v21 + 40);
      if (*(_QWORD *)(v23 + 40))
      {
        v24 = 0;
        do
        {
          if (v24 >= v47)
          {
            v25 = (v24 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v25 + 1) >> 61)
              std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
            v26 = (v47 - (_BYTE *)__p) >> 2;
            if (v26 <= v25 + 1)
              v26 = v25 + 1;
            if ((unint64_t)(v47 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v27 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v27 = v26;
            if (v27)
              v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v47, v27);
            else
              v28 = 0;
            v29 = &v28[8 * v25];
            *(_QWORD *)v29 = v23;
            v24 = v29 + 8;
            v31 = (char *)__p;
            v30 = v46;
            if (v46 != __p)
            {
              do
              {
                v32 = *((_QWORD *)v30 - 1);
                v30 -= 8;
                *((_QWORD *)v29 - 1) = v32;
                v29 -= 8;
              }
              while (v30 != v31);
              v30 = (char *)__p;
            }
            __p = v29;
            v46 = v24;
            v47 = &v28[8 * v27];
            if (v30)
              operator delete(v30);
          }
          else
          {
            *(_QWORD *)v24 = v23;
            v24 += 8;
          }
          v46 = v24;
          v23 = *(_QWORD *)(v23 + 40);
        }
        while (*(_QWORD *)(v23 + 40));
        v33 = __p;
        v34 = v24 - 8;
        if (__p != v24 && v34 > __p)
        {
          v36 = (char *)__p + 8;
          do
          {
            v37 = *((_QWORD *)v36 - 1);
            *((_QWORD *)v36 - 1) = *(_QWORD *)v34;
            *(_QWORD *)v34 = v37;
            v34 -= 8;
            v38 = v36 >= v34;
            v36 += 8;
          }
          while (!v38);
          v33 = __p;
          v24 = v46;
        }
      }
      else
      {
        v24 = 0;
        v33 = 0;
      }
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      std::vector<sentencepiece::unigram::Lattice::Node *>::__init_with_size[abi:ne180100]<sentencepiece::unigram::Lattice::Node **,sentencepiece::unigram::Lattice::Node **>((_QWORD *)a2, v33, (uint64_t)v24, (v24 - (_BYTE *)v33) >> 3);
      *(_DWORD *)(a2 + 24) = v22;
      if (__p)
      {
        v46 = (char *)__p;
        operator delete(__p);
      }
      return;
    }
  }
  v10 = (uint64_t **)(*((_QWORD *)this + 9) + 24 * v3);
  v11 = *v10;
  v12 = v10[1];
  while (1)
  {
    v13 = *v8;
    *(_QWORD *)(*v8 + 40) = 0;
    if (v11 == v12)
      break;
    v14 = 0;
    v15 = 0.0;
    v16 = v11;
    do
    {
      v18 = *v16++;
      v17 = v18;
      v19 = *(float *)(v18 + 36) + *(float *)(v13 + 32);
      if (v19 > v15 || v14 == 0)
      {
        v15 = v19;
        v14 = v17;
      }
    }
    while (v16 != v12);
    if (!v14)
      break;
    *(_QWORD *)(v13 + 40) = v14;
    *(float *)(v13 + 36) = v15;
    if (++v8 == v9)
      goto LABEL_14;
  }
  if ((int)sentencepiece::logging::GetMinLogLevel(this) <= 2)
  {
    LOBYTE(__p) = 0;
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"(", 1);
    v40 = (_QWORD *)std::ostream::operator<<();
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") ", 2);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"LOG(", 4);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"ERROR", 5);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Failed to find the best path in Viterbi.", 40);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&__p);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = 0;
}

void sub_191D1554C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Lattice::ForwardAlgorithm(sentencepiece::unigram::Lattice *this@<X0>, float a2@<S0>, uint64_t *a3@<X8>)
{
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  _QWORD *v20;
  float v21;
  float v22;
  double v23;
  long double v24;
  uint64_t *v25;
  sentencepiece::unigram::Lattice *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v6 = ((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) - 1;
  v7 = v6 & ~(v6 >> 31);
  v8 = *((_QWORD *)this + 16) + *((_QWORD *)this + 17) * *((_QWORD *)this + 18);
  v29 = 0;
  v25 = a3;
  std::vector<float>::vector(a3, v8, &v29);
  v9 = 0;
  v28 = *((_QWORD *)this + 6);
  v26 = this;
  v27 = (v7 + 1);
  do
  {
    v10 = (uint64_t *)(v28 + 24 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 != v12)
    {
      v13 = *((_QWORD *)v26 + 9) + 24 * v9;
      v15 = *(_QWORD **)v13;
      v14 = *(_QWORD **)(v13 + 8);
      v16 = *v25;
      do
      {
        if (v15 != v14)
        {
          v17 = *(unsigned int *)(*(_QWORD *)v11 + 24);
          v18 = *v15;
          v19 = *(float *)(v16 + 4 * v17);
          v20 = v15;
          do
          {
            v21 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a2 * *(float *)(*v20 + 32));
            if (*v20 != v18)
            {
              if (v21 >= v19)
                v22 = v19;
              else
                v22 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a2 * *(float *)(*v20 + 32));
              if (v19 >= v21)
                v21 = v19;
              if (v21 <= (float)(v22 + 50.0))
              {
                v23 = v21;
                v24 = exp((float)(v22 - v21));
                v21 = log(v24 + 1.0) + v23;
              }
            }
            *(float *)(v16 + 4 * v17) = v21;
            ++v20;
            v19 = v21;
          }
          while (v20 != v14);
        }
        v11 += 8;
      }
      while (v11 != v12);
    }
    ++v9;
  }
  while (v9 != v27);
}

float sentencepiece::unigram::Lattice::CalculateEntropy(sentencepiece::unigram::Lattice *this, float a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  float *v14;
  float *v15;
  uint64_t v16;
  float v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  void *v22;
  float v23;
  unsigned int v25;
  sentencepiece::unigram::Lattice *v26;
  uint64_t v27;
  void *__p[3];
  void *v29[3];

  v5 = *((_QWORD *)this + 3);
  v4 = *((_QWORD *)this + 4);
  v6 = *((_QWORD *)this + 16) + *((_QWORD *)this + 17) * *((_QWORD *)this + 18);
  LODWORD(__p[0]) = 0;
  std::vector<float>::vector(v29, v6, __p);
  sentencepiece::unigram::Lattice::ForwardAlgorithm(this, a2, (uint64_t *)__p);
  v7 = 0;
  v27 = *((_QWORD *)this + 6);
  v25 = (((unint64_t)(v4 - v5) >> 3) - 1) & ~((int)(((unint64_t)(v4 - v5) >> 3) - 1) >> 31);
  v26 = this;
  do
  {
    v8 = (uint64_t *)(v27 + 24 * v7);
    v9 = *v8;
    v10 = v8[1];
    if (*v8 != v10)
    {
      v11 = (uint64_t **)(*((_QWORD *)v26 + 9) + 24 * v7);
      v12 = *v11;
      v13 = v11[1];
      v14 = (float *)__p[0];
      v15 = (float *)v29[0];
      do
      {
        if (v12 != v13)
        {
          v16 = *(unsigned int *)(*(_QWORD *)v9 + 24);
          v17 = v15[v16];
          v18 = v12;
          do
          {
            v19 = *v18++;
            v20 = *(unsigned int *)(v19 + 24);
            v21 = (float)(v14[v20] + (float)(a2 * *(float *)(v19 + 32))) - v14[v16];
            v17 = v17 + (float)(expf(v21) * (float)(v21 + v15[v20]));
            v15[v16] = v17;
          }
          while (v18 != v13);
        }
        v9 += 8;
      }
      while (v9 != v10);
    }
    ++v7;
  }
  while (v7 != v25 + 1);
  v22 = v29[0];
  v23 = *((float *)v29[0] + *(unsigned int *)(**(_QWORD **)(v27 + 24 * v25) + 24));
  if (!__p[0] || (__p[1] = __p[0], operator delete(__p[0]), (v22 = v29[0]) != 0))
  {
    v29[1] = v22;
    operator delete(v22);
  }
  return -v23;
}

void sub_191D158A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Lattice::NBest(sentencepiece::unigram::Lattice *this@<X0>, float a2@<S0>, uint64_t a3@<X1>, int a4@<W2>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  sentencepiece::random *v18;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *RandomGenerator;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v20;
  float v21;
  float v22;
  int v23;
  int v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD **v34;
  _QWORD *i;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  sentencepiece::random *MinLogLevel;
  int v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  unint64_t v57;
  float v58;
  float v59;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v60;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v61;
  float v62;
  float v63;
  int v64;
  double *v65;
  float v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  void *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  int v96;
  unint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint8x8_t v103;
  unint64_t v104;
  _QWORD *v105;
  _QWORD *j;
  unint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint8x8_t v110;
  _QWORD *v111;
  _QWORD *k;
  unint64_t v113;
  _QWORD *v114;
  float v115;
  _BOOL4 v116;
  unint64_t v117;
  unint64_t v118;
  int8x8_t prime;
  void *v120;
  void *v121;
  uint64_t v122;
  _QWORD **v123;
  unint64_t v124;
  uint8x8_t v125;
  unint64_t v126;
  uint8x8_t v127;
  uint64_t v128;
  _QWORD *m;
  unint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  void *v147;
  int v148;
  char v149;
  int v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v155;
  void *v156[2];
  __int128 v157;
  float v158;
  _BYTE v159[48];
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  void *v163;
  _BYTE *v164;
  void *v165[3];
  void *v166[3];
  void *v167[4];
  void *__p[3];
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t (**v173)();
  __int128 v174;
  _QWORD v175[3];
  uint64_t v176;
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  if (a3 == 1)
  {
    if ((a4 & 1) == 0)
    {
      sentencepiece::unigram::Lattice::Viterbi(this, (uint64_t)&v173);
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      *(_QWORD *)v159 = a5;
      v159[8] = 0;
      v147 = operator new(0x20uLL);
      *a5 = (uint64_t)v147;
      a5[1] = (uint64_t)v147;
      a5[2] = (uint64_t)v147 + 32;
      a5[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> const*,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> const*,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>((uint64_t)(a5 + 2), (uint64_t)&v173, (uint64_t)&v175[1], (uint64_t)v147);
      if (v173)
      {
        *(_QWORD *)&v174 = v173;
        operator delete(v173);
      }
      return;
    }
  }
  else if (!a3)
  {
    if ((int)sentencepiece::logging::GetMinLogLevel(this) <= 1)
    {
      LOBYTE(v173) = 0;
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"(", 1);
      v10 = (_QWORD *)std::ostream::operator<<();
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"LOG(", 4);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"WARNING", 7);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)") ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"nbest_size >= 1. Returns empty result.", 38);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v173);
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  v174 = 0u;
  memset(v175, 0, sizeof(v175));
  v173 = &off_1E2DF12E0;
  v176 = 512;
  v170 = 0uLL;
  v171 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  v169 = v15;
  v16 = ((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) - 1;
  *(_QWORD *)v15 = **(_QWORD **)(*((_QWORD *)this + 6) + 24 * (v16 & ~(v16 >> 31)));
  *(_QWORD *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 20) = 0;
  v17 = *((_QWORD *)this + 16) + *((_QWORD *)this + 17) * *((_QWORD *)this + 18);
  *(_DWORD *)v159 = 0;
  std::vector<float>::vector(__p, v17, v159);
  if (a4)
  {
    sentencepiece::unigram::Lattice::ForwardAlgorithm(this, a2, (uint64_t *)v159);
    v18 = (sentencepiece::random *)__p[0];
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)v159;
    __p[2] = *(void **)&v159[16];
    RandomGenerator = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)sentencepiece::random::GetRandomGenerator(v18);
    v20 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(RandomGenerator);
    v21 = logf((float)((float)((float)v20 * 2.3283e-10) + 0.0) + 0.0000001);
    v22 = -logf(-v21);
  }
  else
  {
    sentencepiece::unigram::Lattice::Viterbi(this, (uint64_t)v167);
    if (v167[0])
    {
      v167[1] = v167[0];
      operator delete(v167[0]);
    }
    v22 = *(float *)(*(_QWORD *)v15 + 36);
  }
  *(float *)(v15 + 16) = v22;
  v148 = 0;
  v149 = 0;
  if (10 * (int)a3 >= 512)
    v23 = 512;
  else
    v23 = 10 * a3;
  if (v23 <= 1)
    v24 = 1;
  else
    v24 = v23;
  v150 = v24;
  while (1)
  {
    v25 = v170;
    if ((_QWORD)v170 == *((_QWORD *)&v170 + 1))
      break;
    v26 = *(uint64_t **)v170;
    if ((uint64_t)(*((_QWORD *)&v170 + 1) - v170) >= 9)
    {
      v27 = 0;
      v28 = (uint64_t)(*((_QWORD *)&v170 + 1) - v170) >> 3;
      v29 = (_QWORD *)v170;
      do
      {
        v30 = v29;
        v29 += v27 + 1;
        v31 = 2 * v27;
        v27 = (2 * v27) | 1;
        v32 = v31 + 2;
        if (v32 < v28 && *(float *)(*v29 + 16) < *(float *)(v29[1] + 16))
        {
          ++v29;
          v27 = v32;
        }
        *v30 = *v29;
      }
      while (v27 <= (uint64_t)((unint64_t)(v28 - 2) >> 1));
      if (v29 == (_QWORD *)(*((_QWORD *)&v25 + 1) - 8))
      {
        *v29 = v26;
      }
      else
      {
        *v29 = **((_QWORD **)&v25 + 1);
        **((_QWORD **)&v25 + 1) = v26;
      }
    }
    *((_QWORD *)&v170 + 1) -= 8;
    v33 = *v26;
    v34 = (_QWORD **)*((_QWORD *)this + 9);
    if (*v26 == **v34)
    {
      std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::resize(a5, ((a5[1] - *a5) >> 5) + 1);
      for (i = (_QWORD *)v26[1]; i[1]; i = (_QWORD *)i[1])
      {
        v36 = a5[1];
        v37 = *(_QWORD **)(v36 - 24);
        v38 = *(_QWORD *)(v36 - 16);
        if ((unint64_t)v37 >= v38)
        {
          v40 = *(_QWORD *)(v36 - 32);
          v41 = ((uint64_t)v37 - v40) >> 3;
          if ((unint64_t)(v41 + 1) >> 61)
            std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
          v42 = v38 - v40;
          v43 = v42 >> 2;
          if (v42 >> 2 <= (unint64_t)(v41 + 1))
            v43 = v41 + 1;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
            v44 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          if (v44)
            v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v36 - 16, v44);
          else
            v45 = 0;
          v46 = &v45[8 * v41];
          *(_QWORD *)v46 = *i;
          v39 = v46 + 8;
          v48 = *(char **)(v36 - 32);
          v47 = *(char **)(v36 - 24);
          if (v47 != v48)
          {
            do
            {
              v49 = *((_QWORD *)v47 - 1);
              v47 -= 8;
              *((_QWORD *)v46 - 1) = v49;
              v46 -= 8;
            }
            while (v47 != v48);
            v47 = *(char **)(v36 - 32);
          }
          *(_QWORD *)(v36 - 32) = v46;
          *(_QWORD *)(v36 - 24) = v39;
          *(_QWORD *)(v36 - 16) = &v45[8 * v44];
          if (v47)
            operator delete(v47);
        }
        else
        {
          *v37 = *i;
          v39 = v37 + 1;
        }
        *(_QWORD *)(v36 - 24) = v39;
      }
      v50 = a5[1];
      *(_DWORD *)(v50 - 8) = *((_DWORD *)v26 + 4);
      if (a3 == (v50 - *a5) >> 5)
        break;
    }
    else
    {
      v51 = (int)(v34[3 * *(int *)(v33 + 16) + 1] - v34[3 * *(int *)(v33 + 16)]);
      *(_DWORD *)v159 = 0;
      std::vector<float>::vector(v166, v51, v159);
      *(_DWORD *)v159 = 0;
      std::vector<float>::vector(v165, v51, v159);
      *(_QWORD *)v159 = 0;
      MinLogLevel = (sentencepiece::random *)std::vector<double>::vector(&v163, v51, v159);
      v53 = *(_DWORD *)(v33 + 16);
      v54 = *((_QWORD *)this + 9);
      if (a4)
      {
        v55 = *(_QWORD *)(v54 + 24 * v53);
        v56 = -100000000.0;
        if (*(_QWORD *)(v54 + 24 * v53 + 8) != v55)
        {
          v57 = 0;
          v58 = *((float *)__p[0] + *(unsigned int *)(v33 + 24));
          v56 = -100000000.0;
          do
          {
            v59 = (float)((float)(*((float *)v26 + 5)
                                + *((float *)__p[0] + *(unsigned int *)(*(_QWORD *)(v55 + 8 * v57) + 24)))
                        + (float)(a2 * *(float *)(*(_QWORD *)(v55 + 8 * v57) + 32)))
                - v58;
            *((float *)v166[0] + v57) = v59;
            v60 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)sentencepiece::random::GetRandomGenerator(MinLogLevel);
            v61 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v60);
            v62 = logf((float)((float)((float)v61 * 2.3283e-10) + 0.0) + 0.0000001);
            v63 = v59 - logf(-v62);
            *((float *)v165[0] + v57) = v63;
            if (v63 > v56)
              v56 = v63;
            ++v57;
            v64 = *(_DWORD *)(v33 + 16);
            v54 = *((_QWORD *)this + 9);
            v55 = *(_QWORD *)(v54 + 24 * v64);
          }
          while (v57 < (*(_QWORD *)(v54 + 24 * v64 + 8) - v55) >> 3);
          v53 = *(_DWORD *)(v33 + 16);
        }
        v65 = (double *)v163;
        if (v164 != v163)
        {
          v66 = *((float *)v26 + 4);
          v67 = (float *)v165[0];
          if ((unint64_t)((v164 - (_BYTE *)v163) >> 3) <= 1)
            v5 = 1;
          else
            v5 = (v164 - (_BYTE *)v163) >> 3;
          do
          {
            v68 = *v67++;
            v69 = expf(v68 - v56);
            v70 = (float)(v66 - v68) + log1pf(-v69);
            v71 = v66 - fmaxf(v70, 0.0);
            v72 = expf(-fabsf(v70));
            *v65++ = (float)(v71 - log1pf(v72));
            --v5;
          }
          while (v5);
        }
      }
      v73 = *(_QWORD *)(v54 + 24 * v53);
      if (*(_QWORD *)(v54 + 24 * v53 + 8) != v73)
      {
        v74 = 0;
        do
        {
          v75 = *(_QWORD *)(v73 + 8 * v74);
          *(_QWORD *)v159 = v76;
          *(_QWORD *)v76 = v75;
          if (a4)
          {
            *(_DWORD *)(v76 + 20) = *((_DWORD *)v166[0] + v74);
            v77 = *((double *)v163 + v74);
          }
          else
          {
            *(float *)(v76 + 20) = *(float *)(v75 + 32) + *((float *)v26 + 5);
            v77 = *(float *)(v75 + 36) + *((float *)v26 + 5);
          }
          *(float *)(v76 + 16) = v77;
          *(_QWORD *)(v76 + 8) = v26;
          ++v74;
          v73 = *(_QWORD *)(*((_QWORD *)this + 9) + 24 * *(int *)(v33 + 16));
        }
        while (v74 < (*(_QWORD *)(*((_QWORD *)this + 9) + 24 * *(int *)(v33 + 16) + 8) - v73) >> 3);
      }
      if (!(((unint64_t)(v175[1] + v175[2] * v176) < 0x3B9ACA00) | v149 & 1))
      {
        MinLogLevel = (sentencepiece::random *)sentencepiece::logging::GetMinLogLevel(MinLogLevel);
        if ((int)MinLogLevel <= 1)
        {
          v159[0] = 0;
          v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"(", 1);
          v79 = (_QWORD *)std::ostream::operator<<();
          v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)") ", 2);
          v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"LOG(", 4);
          v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"WARNING", 7);
          v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)") ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"Allocator size exceeds ", 23);
          v84 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)" with an example of length ", 27);
          std::ostream::operator<<();
          sentencepiece::error::Die::~Die((sentencepiece::error::Die *)v159);
        }
        v149 = 1;
      }
      v85 = *((_QWORD *)&v170 + 1);
      v86 = (void *)v170;
      if (*((_QWORD *)&v170 + 1) - (_QWORD)v170 >= 0x13879uLL)
      {
        v161 = 0uLL;
        v162 = 0;
        memset(&v159[8], 0, 40);
        *(_QWORD *)v159 = &off_1E2DF12E0;
        v160 = 512;
        *(_OWORD *)v156 = 0u;
        v157 = 0u;
        v158 = 1.0;
        ++v148;
        if ((int)sentencepiece::logging::GetMinLogLevel(MinLogLevel) <= 1)
        {
          LOBYTE(v172) = 0;
          v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"(", 1);
          v88 = (_QWORD *)std::ostream::operator<<();
          v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)") ", 2);
          v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"LOG(", 4);
          v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"WARNING", 7);
          v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)") ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"Too big agenda size ", 20);
          v93 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)". Shrinking (round ", 19);
          v94 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)") down to ", 10);
          v95 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)".", 1);
          sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v172);
        }
        if (10 * (int)a3 >= 1)
        {
          v96 = 0;
          while (1)
          {
            v151 = (_QWORD *)v170;
            v152 = v85;
            v97 = *(_QWORD *)v170;
            v155 = 0;
            v172 = 0;
            if (!v97)
              goto LABEL_181;
            v98 = &v172;
            v99 = (unint64_t)v156[1];
            do
            {
              v100 = 0x9DDFEA08EB382D69 * (((8 * v97) + 8) ^ HIDWORD(v97));
              v101 = 0x9DDFEA08EB382D69 * (HIDWORD(v97) ^ (v100 >> 47) ^ v100);
              v102 = 0x9DDFEA08EB382D69 * (v101 ^ (v101 >> 47));
              if (v99)
              {
                v103 = (uint8x8_t)vcnt_s8((int8x8_t)v99);
                v103.i16[0] = vaddlv_u8(v103);
                if (v103.u32[0] > 1uLL)
                {
                  v104 = 0x9DDFEA08EB382D69 * (v101 ^ (v101 >> 47));
                  if (v102 >= v99)
                    v104 = v102 % v99;
                }
                else
                {
                  v104 = v102 & (v99 - 1);
                }
                v105 = (_QWORD *)*((_QWORD *)v156[0] + v104);
                if (v105)
                {
                  for (j = (_QWORD *)*v105; j; j = (_QWORD *)*j)
                  {
                    v107 = j[1];
                    if (v107 == v102)
                    {
                      if (j[2] == v97)
                      {
                        *v98 = j[3];
                        goto LABEL_181;
                      }
                    }
                    else
                    {
                      if (v103.u32[0] > 1uLL)
                      {
                        if (v107 >= v99)
                          v107 %= v99;
                      }
                      else
                      {
                        v107 &= v99 - 1;
                      }
                      if (v107 != v104)
                        break;
                    }
                  }
                }
              }
              v109 = *(_OWORD *)v97;
              *(_QWORD *)(v108 + 16) = *(_QWORD *)(v97 + 16);
              *(_OWORD *)v108 = v109;
              *v98 = v108;
              v99 = (unint64_t)v156[1];
              if (v156[1])
              {
                v110 = (uint8x8_t)vcnt_s8((int8x8_t)v156[1]);
                v110.i16[0] = vaddlv_u8(v110);
                if (v110.u32[0] > 1uLL)
                {
                  v5 = v102;
                  if ((void *)v102 >= v156[1])
                    v5 = v102 % (unint64_t)v156[1];
                }
                else
                {
                  v5 = ((unint64_t)v156[1] - 1) & v102;
                }
                v111 = (_QWORD *)*((_QWORD *)v156[0] + v5);
                if (v111)
                {
                  for (k = (_QWORD *)*v111; k; k = (_QWORD *)*k)
                  {
                    v113 = k[1];
                    if (v113 == v102)
                    {
                      if (k[2] == v97)
                        goto LABEL_170;
                    }
                    else
                    {
                      if (v110.u32[0] > 1uLL)
                      {
                        if ((void *)v113 >= v156[1])
                          v113 %= (unint64_t)v156[1];
                      }
                      else
                      {
                        v113 &= (unint64_t)v156[1] - 1;
                      }
                      if (v113 != v5)
                        break;
                    }
                  }
                }
              }
              v114 = operator new(0x20uLL);
              *v114 = 0;
              v114[1] = v102;
              v114[2] = v97;
              v114[3] = v108;
              v115 = (float)(unint64_t)(*((_QWORD *)&v157 + 1) + 1);
              if (!v99 || (float)(v158 * (float)v99) < v115)
              {
                v116 = (v99 & (v99 - 1)) == 0;
                if (v99 < 3)
                  v116 = 0;
                v117 = (2 * v99) | !v116;
                v118 = vcvtps_u32_f32(v115 / v158);
                if (v117 <= v118)
                  prime = (int8x8_t)v118;
                else
                  prime = (int8x8_t)v117;
                if (*(_QWORD *)&prime == 1)
                {
                  prime = (int8x8_t)2;
                }
                else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
                {
                  prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                  v99 = (unint64_t)v156[1];
                }
                if (*(_QWORD *)&prime <= v99)
                {
                  if (*(_QWORD *)&prime < v99)
                  {
                    v126 = vcvtps_u32_f32((float)*((unint64_t *)&v157 + 1) / v158);
                    if (v99 < 3
                      || (v127 = (uint8x8_t)vcnt_s8((int8x8_t)v99), v127.i16[0] = vaddlv_u8(v127), v127.u32[0] > 1uLL))
                    {
                      v126 = std::__next_prime(v126);
                    }
                    else
                    {
                      v128 = 1 << -(char)__clz(v126 - 1);
                      if (v126 >= 2)
                        v126 = v128;
                    }
                    if (*(_QWORD *)&prime <= v126)
                      prime = (int8x8_t)v126;
                    if (*(_QWORD *)&prime >= v99)
                    {
                      v99 = (unint64_t)v156[1];
                    }
                    else
                    {
                      if (prime)
                        goto LABEL_126;
                      v134 = v156[0];
                      v156[0] = 0;
                      if (v134)
                        operator delete(v134);
                      v99 = 0;
                      v156[1] = 0;
                    }
                  }
                }
                else
                {
LABEL_126:
                  if (*(_QWORD *)&prime >> 61)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v120 = operator new(8 * *(_QWORD *)&prime);
                  v121 = v156[0];
                  v156[0] = v120;
                  if (v121)
                    operator delete(v121);
                  v122 = 0;
                  v156[1] = (void *)prime;
                  do
                    *((_QWORD *)v156[0] + v122++) = 0;
                  while (*(_QWORD *)&prime != v122);
                  v123 = (_QWORD **)v157;
                  if ((_QWORD)v157)
                  {
                    v124 = *(_QWORD *)(v157 + 8);
                    v125 = (uint8x8_t)vcnt_s8(prime);
                    v125.i16[0] = vaddlv_u8(v125);
                    if (v125.u32[0] > 1uLL)
                    {
                      if (v124 >= *(_QWORD *)&prime)
                        v124 %= *(_QWORD *)&prime;
                    }
                    else
                    {
                      v124 &= *(_QWORD *)&prime - 1;
                    }
                    *((_QWORD *)v156[0] + v124) = &v157;
                    for (m = *v123; m; v124 = v130)
                    {
                      v130 = m[1];
                      if (v125.u32[0] > 1uLL)
                      {
                        if (v130 >= *(_QWORD *)&prime)
                          v130 %= *(_QWORD *)&prime;
                      }
                      else
                      {
                        v130 &= *(_QWORD *)&prime - 1;
                      }
                      if (v130 != v124)
                      {
                        if (!*((_QWORD *)v156[0] + v130))
                        {
                          *((_QWORD *)v156[0] + v130) = v123;
                          goto LABEL_151;
                        }
                        *v123 = (_QWORD *)*m;
                        *m = **((_QWORD **)v156[0] + v130);
                        **((_QWORD **)v156[0] + v130) = m;
                        m = v123;
                      }
                      v130 = v124;
LABEL_151:
                      v123 = (_QWORD **)m;
                      m = (_QWORD *)*m;
                    }
                  }
                  v99 = (unint64_t)prime;
                }
                if ((v99 & (v99 - 1)) != 0)
                {
                  if (v102 >= v99)
                    v5 = v102 % v99;
                  else
                    v5 = v102;
                }
                else
                {
                  v5 = (v99 - 1) & v102;
                }
              }
              v131 = v156[0];
              v132 = (_QWORD *)*((_QWORD *)v156[0] + v5);
              if (v132)
              {
                *v114 = *v132;
LABEL_168:
                *v132 = v114;
                goto LABEL_169;
              }
              *v114 = v157;
              *(_QWORD *)&v157 = v114;
              v131[v5] = &v157;
              if (*v114)
              {
                v133 = *(_QWORD *)(*v114 + 8);
                if ((v99 & (v99 - 1)) != 0)
                {
                  if (v133 >= v99)
                    v133 %= v99;
                }
                else
                {
                  v133 &= v99 - 1;
                }
                v132 = (char *)v156[0] + 8 * v133;
                goto LABEL_168;
              }
LABEL_169:
              ++*((_QWORD *)&v157 + 1);
LABEL_170:
              v97 = *(_QWORD *)(v97 + 8);
              v98 = (uint64_t *)(v108 + 8);
            }
            while (v97);
LABEL_181:
            v155 = v172;
            if (v152 - (uint64_t)v151 >= 9)
            {
              v135 = 0;
              v136 = (v152 - (uint64_t)v151) >> 3;
              v137 = *v151;
              v138 = v151;
              do
              {
                v139 = v138;
                v138 += v135 + 1;
                v140 = 2 * v135;
                v135 = (2 * v135) | 1;
                v141 = v140 + 2;
                if (v141 < v136 && *(float *)(*v138 + 16) < *(float *)(v138[1] + 16))
                {
                  ++v138;
                  v135 = v141;
                }
                *v139 = *v138;
              }
              while (v135 <= (uint64_t)((unint64_t)(v136 - 2) >> 1));
              v142 = (_QWORD *)(v152 - 8);
              if (v138 == (_QWORD *)(v152 - 8))
              {
                *v138 = v137;
              }
              else
              {
                *v138 = *v142;
                *v142 = v137;
              }
            }
            v85 = *((_QWORD *)&v170 + 1) - 8;
            *((_QWORD *)&v170 + 1) -= 8;
            if (++v96 == v150)
            {
              v86 = (void *)v170;
              break;
            }
          }
        }
        if (v86)
        {
          *((_QWORD *)&v170 + 1) = v86;
          operator delete(v86);
        }
        v170 = v161;
        v171 = v162;
        v143 = v174;
        v174 = *(_OWORD *)&v159[8];
        *(_OWORD *)&v159[8] = v143;
        v144 = *(_QWORD *)&v159[24];
        v145 = v176;
        *(_QWORD *)&v159[24] = v175[0];
        v146 = *(_OWORD *)&v175[1];
        *(_OWORD *)&v175[1] = *(_OWORD *)&v159[32];
        *(_OWORD *)&v159[32] = v146;
        v175[0] = v144;
        v176 = v160;
        v160 = v145;
        std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::~__hash_table((uint64_t)v156);
      }
      if (v163)
      {
        v164 = v163;
        operator delete(v163);
      }
      if (v165[0])
      {
        v165[1] = v165[0];
        operator delete(v165[0]);
      }
      if (v166[0])
      {
        v166[1] = v166[0];
        operator delete(v166[0]);
      }
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((_QWORD)v170)
    operator delete((void *)v170);
}

void sub_191D16910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  uint64_t v57;
  void *v59;

  std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::~__hash_table((uint64_t)&a21);
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  v59 = a57;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  if (v59)
    operator delete(v59);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::model::FreeList<sentencepiece::unigram::`anonymous namespace'::Hypothesis>::Allocate(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t result;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 >= v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x18uLL);
    v6 = (void *)operator new[]();
    bzero(v6, 24 * a1[6]);
    v8 = (_QWORD *)a1[2];
    v7 = a1[3];
    if ((unint64_t)v8 >= v7)
    {
      v10 = (_QWORD *)a1[1];
      v11 = v8 - v10;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
      v13 = v7 - (_QWORD)v10;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = (char *)operator new(8 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * v11];
      *(_QWORD *)v16 = v6;
      v9 = v16 + 8;
      if (v8 != v10)
      {
        do
        {
          v17 = *--v8;
          *((_QWORD *)v16 - 1) = v17;
          v16 -= 8;
        }
        while (v8 != v10);
        v8 = (_QWORD *)a1[1];
      }
      a1[1] = v16;
      a1[2] = v9;
      a1[3] = &v15[8 * v14];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v8 = v6;
      v9 = v8 + 1;
    }
    a1[2] = v9;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  result = *(_QWORD *)(v5 + 8 * v2) + 24 * v4;
  a1[4] = v4 + 1;
  return result;
}

uint64_t std::priority_queue<sentencepiece::unigram::`anonymous namespace'::Hypothesis *,std::vector<sentencepiece::unigram::`anonymous namespace'::Hypothesis *>,sentencepiece::unigram::Lattice::NBest(unsigned long,BOOL,float)::HypothesisComparator>::push(uint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = (_QWORD *)a1[1];
  v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = ((uint64_t)v5 - *a1) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v10 = v4 - v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = *a2;
    v6 = (uint64_t)(v13 + 8);
    if (v5 != (_QWORD *)v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != (_QWORD *)v7);
      v5 = (_QWORD *)*a1;
    }
    *a1 = (uint64_t)v13;
    a1[1] = v6;
    a1[2] = (uint64_t)&v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = *a2;
    v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
}

void std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 32 * a2;
      if (v3 != v5)
      {
        v6 = a1[1];
        do
        {
          v8 = *(void **)(v6 - 32);
          v6 -= 32;
          v7 = v8;
          if (v8)
          {
            *(_QWORD *)(v3 - 24) = v7;
            operator delete(v7);
          }
          v3 = v6;
        }
        while (v6 != v5);
      }
      a1[1] = v5;
    }
  }
  else
  {
    std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::__append(a1, a2 - v4);
  }
}

_QWORD *sentencepiece::model::FreeList<sentencepiece::unigram::`anonymous namespace'::Hypothesis>::~FreeList(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E2DF12E0;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x19401E970](*v2, 0x1020C8062D53EE8);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sentencepiece::unigram::Lattice::Sample(sentencepiece::unigram::Lattice *this@<X0>, float a2@<S0>, void **a3@<X8>)
{
  unint64_t v6;
  sentencepiece::random *v7;
  int v8;
  uint64_t v9;
  float v10;
  float *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float v16;
  float *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  float *v23;
  void *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  BOOL v46;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *RandomGenerator;
  void *v48[3];
  void *v49[2];
  float *v50;
  void *__p[2];
  float *v52;

  if ((int)(((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) - 1) <= 0)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    v6 = *((_QWORD *)this + 16) + *((_QWORD *)this + 17) * *((_QWORD *)this + 18);
    LODWORD(v49[0]) = 0;
    std::vector<float>::vector(__p, v6, v49);
    sentencepiece::unigram::Lattice::ForwardAlgorithm(this, a2, (uint64_t *)v49);
    v7 = (sentencepiece::random *)__p[0];
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)v49;
    v52 = v50;
    RandomGenerator = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)sentencepiece::random::GetRandomGenerator(v7);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v49[0] = 0;
    v49[1] = 0;
    v50 = 0;
    v8 = ((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) - 1;
    v9 = **(_QWORD **)(*((_QWORD *)this + 6) + 24 * (v8 & ~(v8 >> 31)));
    v10 = *((float *)__p[0] + *(unsigned int *)(v9 + 24));
    do
    {
      v11 = (float *)v49[0];
      v49[1] = v49[0];
      v12 = (uint64_t *)(*((_QWORD *)this + 9) + 24 * *(unsigned int *)(v9 + 16));
      v14 = *v12;
      v13 = v12[1];
      v15 = (float *)v49[0];
      if (*v12 != v13)
      {
        do
        {
          v16 = exp((float)((float)(*((float *)__p[0] + *(unsigned int *)(*(_QWORD *)v14 + 24))
                                  + (float)(a2 * *(float *)(*(_QWORD *)v14 + 32)))
                          - v10));
          if (v11 >= v50)
          {
            v17 = (float *)v49[0];
            v18 = ((char *)v11 - (char *)v49[0]) >> 2;
            v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 62)
              std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
            v20 = (char *)v50 - (char *)v49[0];
            if (((char *)v50 - (char *)v49[0]) >> 1 > v19)
              v19 = v20 >> 1;
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
              v21 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v21 = v19;
            if (v21)
            {
              v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v50, v21);
              v17 = (float *)v49[0];
              v11 = (float *)v49[1];
            }
            else
            {
              v22 = 0;
            }
            v23 = (float *)&v22[4 * v18];
            *v23 = v16;
            v24 = v23 + 1;
            while (v11 != v17)
            {
              v25 = *((_DWORD *)v11-- - 1);
              *((_DWORD *)v23-- - 1) = v25;
            }
            v49[0] = v23;
            v49[1] = v24;
            v50 = (float *)&v22[4 * v21];
            if (v17)
              operator delete(v17);
            v11 = (float *)v24;
          }
          else
          {
            *v11++ = v16;
          }
          v49[1] = v11;
          v14 += 8;
        }
        while (v14 != v13);
        v15 = (float *)v49[0];
      }
      std::discrete_distribution<int>::param_type::param_type[abi:ne180100]<std::__wrap_iter<float *>>((uint64_t)v48, v15, v11);
      v26 = *(_DWORD *)(v9 + 16);
      v27 = *((_QWORD *)this + 9);
      v9 = *(_QWORD *)(*(_QWORD *)(v27 + 24 * v26)
                     + 8
                     * (int)std::discrete_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((int)v48, RandomGenerator, (double **)v48));
      v28 = ***((_QWORD ***)this + 9);
      if (v9 != v28)
      {
        v10 = *((float *)__p[0] + *(unsigned int *)(v9 + 24));
        v30 = a3[1];
        v29 = (unint64_t)a3[2];
        if ((unint64_t)v30 >= v29)
        {
          v32 = ((char *)v30 - (_BYTE *)*a3) >> 3;
          if ((unint64_t)(v32 + 1) >> 61)
            std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
          v33 = v29 - (_QWORD)*a3;
          v34 = v33 >> 2;
          if (v33 >> 2 <= (unint64_t)(v32 + 1))
            v34 = v32 + 1;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
            v35 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v35 = v34;
          if (v35)
            v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a3 + 2), v35);
          else
            v36 = 0;
          v37 = &v36[8 * v32];
          *(_QWORD *)v37 = v9;
          v31 = v37 + 8;
          v39 = (char *)*a3;
          v38 = (char *)a3[1];
          if (v38 != *a3)
          {
            do
            {
              v40 = *((_QWORD *)v38 - 1);
              v38 -= 8;
              *((_QWORD *)v37 - 1) = v40;
              v37 -= 8;
            }
            while (v38 != v39);
            v38 = (char *)*a3;
          }
          *a3 = v37;
          a3[1] = v31;
          a3[2] = &v36[8 * v35];
          if (v38)
            operator delete(v38);
        }
        else
        {
          *v30 = v9;
          v31 = v30 + 1;
        }
        a3[1] = v31;
      }
      if (v48[0])
      {
        v48[1] = v48[0];
        operator delete(v48[0]);
      }
    }
    while (v9 != v28);
    v42 = (unint64_t)*a3;
    v41 = (char *)a3[1];
    if (*a3 != v41)
    {
      v43 = v41 - 8;
      if ((unint64_t)v43 > v42)
      {
        v44 = v42 + 8;
        do
        {
          v45 = *(_QWORD *)(v44 - 8);
          *(_QWORD *)(v44 - 8) = *(_QWORD *)v43;
          *(_QWORD *)v43 = v45;
          v43 -= 8;
          v46 = v44 >= (unint64_t)v43;
          v44 += 8;
        }
        while (!v46);
      }
    }
    if (v49[0])
    {
      v49[1] = v49[0];
      operator delete(v49[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_191D171A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Model::PopulateNodes(sentencepiece::unigram::Model *this, sentencepiece::unigram::Lattice *a2)
{
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  _BYTE *v10;
  char *v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  unint64_t *v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void *__p;
  _BYTE *v46;

  v4 = *((float *)this + 26);
  v5 = ((*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3) - 1;
  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a2 + 2);
  std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::vector(&__p, *((int *)this + 23) + 1);
  v42 = v5;
  if ((int)v5 < 1)
    goto LABEL_40;
  v43 = 0;
  v8 = 0;
  v9 = v4 + -10.0;
  v41 = v6 + (int)v7;
  do
  {
    v10 = *(_BYTE **)(*((_QWORD *)a2 + 3) + 8 * v8);
    v11 = (char *)__p;
    v12 = (v46 - (_BYTE *)__p) >> 4;
    v13 = (_DWORD *)*((_QWORD *)this + 5);
    v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
    if ((v41 - (_QWORD)v10) << 32)
    {
      v15 = 0;
      v16 = 0;
      do
      {
        v17 = v10[v15];
        v18 = v14 ^ v17;
        v19 = v13[v18];
        if ((v19 & 0x800000FF) != (_DWORD)v17)
          break;
        v14 = v18 ^ (v19 >> 10 << ((v19 >> 6) & 8));
        if ((v19 & 0x100) != 0)
        {
          if (v16 < v12)
          {
            v20 = &v11[16 * v16];
            *(_DWORD *)v20 = v13[v14] & 0x7FFFFFFF;
            *((_QWORD *)v20 + 1) = v15 + 1;
          }
          ++v16;
        }
        ++v15;
      }
      while ((_DWORD)v41 - (_DWORD)v10 != v15);
    }
    else
    {
      v21 = *v10;
      if (*v10)
      {
        v16 = 0;
        v22 = 1;
        do
        {
          v23 = v14 ^ v21;
          v24 = v13[v23];
          if ((v24 & 0x800000FF) != v21)
            break;
          v14 = v23 ^ (v24 >> 10 << ((v24 >> 6) & 8));
          if ((v24 & 0x100) != 0)
          {
            if (v16 < v12)
            {
              v25 = &v11[16 * v16];
              *(_DWORD *)v25 = v13[v14] & 0x7FFFFFFF;
              *((_QWORD *)v25 + 1) = v22;
            }
            ++v16;
          }
          v21 = v10[v22++];
        }
        while (v21);
      }
      else
      {
        v16 = 0;
      }
    }
    if (v16 >= v12)
    {
      v44 = 1;
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
      v27 = (_QWORD *)std::ostream::operator<<();
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)") [", 3);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"(num_nodes) < (trie_results.size())", 35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"] ", 2);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v44);
    }
    if (!v16)
    {
LABEL_38:
      v40 = sentencepiece::unigram::Lattice::Insert(a2, v8, 1);
      *(_DWORD *)(v40 + 28) = *((_DWORD *)this + 22);
      *(float *)(v40 + 32) = v9;
      goto LABEL_39;
    }
    v30 = 0;
    v31 = 0;
    do
    {
      while (1)
      {
        v32 = (unint64_t *)(*((_QWORD *)a2 + 3) + v43);
        v33 = -1;
        do
        {
          v34 = *v32++;
          ++v33;
        }
        while (v34 < (unint64_t)&v10[*((_QWORD *)__p + 2 * v30 + 1)]);
        v35 = *((unsigned int *)__p + 4 * v30);
        if (((*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 128))(*((_QWORD *)this + 1), v35) & 1) != 0)
          break;
        v36 = v8;
        v37 = sentencepiece::unigram::Lattice::Insert(a2, v8, v33);
        *(_DWORD *)(v37 + 28) = v35;
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1), v35))
        {
          v38 = (float)(*((float *)this + 27) * (float)v33) + -0.1;
        }
        else
        {
          v38 = (*(float (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1), v35);
        }
        v39 = v38;
        *(float *)(v37 + 32) = v39;
        if (!v31)
        {
          v31 = *(_DWORD *)(v37 + 20) == 1;
          v8 = v36;
          break;
        }
        ++v30;
        v31 = 1;
        v8 = v36;
        if (v30 == v16)
          goto LABEL_39;
      }
      ++v30;
    }
    while (v30 != v16);
    if (!v31)
      goto LABEL_38;
LABEL_39:
    ++v8;
    v43 += 8;
  }
  while (v8 != v42);
LABEL_40:
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
}

void sub_191D17598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Model::LookupPredictive(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, sentencepiece::util::Status *a6@<X8>)
{
  void *v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  void *__p;
  unsigned int *v22;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(&__p);
  v12 = __p;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&__p);
  if (v12)
  {
    sentencepiece::util::Status::Status(a6, (const sentencepiece::util::Status *)(a1 + 96));
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
    v14 = (unsigned int *)__p;
    v15 = v22;
    if (__p != v22)
    {
      do
      {
        v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, v16) & 1) == 0)
        {
          v20[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, v16);
          v20[1] = v17;
          v18 = *(_QWORD *)(a5 + 8);
          if (v18 >= *(_QWORD *)(a5 + 16))
          {
            v19 = std::vector<std::string>::__emplace_back_slow_path<std::string_view>(a5, (uint64_t)v20);
          }
          else
          {
            std::allocator<std::string>::construct[abi:ne180100]<std::string,std::string_view>(a5 + 16, *(_BYTE **)(a5 + 8), (uint64_t)v20);
            v19 = v18 + 24;
            *(_QWORD *)(a5 + 8) = v18 + 24;
          }
          *(_QWORD *)(a5 + 8) = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sentencepiece::util::Status::Status(a6, (const sentencepiece::util::Status *)(a1 + 96));
    if (__p)
    {
      v22 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

{
  void *v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  void *__p;
  unsigned int *v29;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(&__p);
  v12 = __p;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&__p);
  if (v12)
  {
    sentencepiece::util::Status::Status(a6, (const sentencepiece::util::Status *)(a1 + 96));
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
    v14 = (unsigned int *)__p;
    v15 = v29;
    if (__p != v29)
    {
      do
      {
        v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, v16) & 1) == 0)
        {
          v18 = *(_DWORD **)(a5 + 8);
          v17 = *(_QWORD *)(a5 + 16);
          if ((unint64_t)v18 >= v17)
          {
            v20 = *(_DWORD **)a5;
            v21 = ((uint64_t)v18 - *(_QWORD *)a5) >> 2;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62)
              std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
            v23 = v17 - (_QWORD)v20;
            if (v23 >> 1 > v22)
              v22 = v23 >> 1;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
              v24 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v24 = v22;
            if (v24)
            {
              v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a5 + 16, v24);
              v20 = *(_DWORD **)a5;
              v18 = *(_DWORD **)(a5 + 8);
            }
            else
            {
              v25 = 0;
            }
            v26 = &v25[4 * v21];
            *(_DWORD *)v26 = v16;
            v19 = v26 + 4;
            while (v18 != v20)
            {
              v27 = *--v18;
              *((_DWORD *)v26 - 1) = v27;
              v26 -= 4;
            }
            *(_QWORD *)a5 = v26;
            *(_QWORD *)(a5 + 8) = v19;
            *(_QWORD *)(a5 + 16) = &v25[4 * v24];
            if (v20)
              operator delete(v20);
          }
          else
          {
            *v18 = v16;
            v19 = v18 + 1;
          }
          *(_QWORD *)(a5 + 8) = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sentencepiece::util::Status::Status(a6, (const sentencepiece::util::Status *)(a1 + 96));
    if (__p)
    {
      v29 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_191D17738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::`anonymous namespace'::LookupPredictiveInternal(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  unint64_t v12;

  if (a4 != -1)
    a5 = a4;
  std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::vector(a6, a5);
  v12 = Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(a1, a2, *a6, (a6[1] - *a6) >> 4, a3, a4);
  std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::resize((uint64_t)a6, v12);
}

void sub_191D177E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_191D179D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

sentencepiece::unigram::Model *sentencepiece::unigram::Model::Model(sentencepiece::unigram::Model *this, const sentencepiece::ModelProto *a2)
{
  sentencepiece::ModelInterface *v4;
  unint64_t v5;
  float v6;
  float v7;

  v4 = sentencepiece::ModelInterface::ModelInterface(this);
  *((_QWORD *)v4 + 13) = 0;
  *((_DWORD *)v4 + 28) = 0;
  *(_QWORD *)v4 = &off_1E2DF1340;
  *((_QWORD *)v4 + 1) = (char *)a2 + 16;
  sentencepiece::ModelInterface::InitializePieces(v4);
  v5 = 0;
  *((_QWORD *)this + 13) = 0x8000007F7FFFFFLL;
  while (v5 < (*(int (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1)))
  {
    if ((*(unsigned int (**)(_QWORD, unint64_t))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1), v5))
    {
      v6 = (*(float (**)(_QWORD, unint64_t))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1), v5);
      if (v6 >= *((float *)this + 26))
        v6 = *((float *)this + 26);
      *((float *)this + 26) = v6;
      v7 = (*(float (**)(_QWORD, unint64_t))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1), v5);
      if (*((float *)this + 27) >= v7)
        v7 = *((float *)this + 27);
      *((float *)this + 27) = v7;
    }
    ++v5;
  }
  return this;
}

void sub_191D17ACC(_Unwind_Exception *a1)
{
  sentencepiece::ModelInterface *v1;

  sentencepiece::ModelInterface::~ModelInterface(v1);
  _Unwind_Resume(a1);
}

sentencepiece::ModelInterface *sentencepiece::ModelInterface::ModelInterface(sentencepiece::ModelInterface *this)
{
  *(_QWORD *)this = off_1E2DF08E8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &off_1E2DF1540;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = &off_1E2DF1540;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  sentencepiece::util::Status::Status((_QWORD *)this + 12);
  return this;
}

void sub_191D17B58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v5 = v2;
  *(_QWORD *)(v1 + 56) = v5;
  *v4 = 0;
  v4[1] = 0;
  v7 = *(_QWORD *)(v1 + 80);
  if (v7)
  {
    MEMORY[0x19401E970](v7, 0x1000C8052888210);
    *(_QWORD *)(v1 + 80) = 0;
  }
  *(_QWORD *)(v1 + 24) = &off_1E2DF1540;
  *v3 = 0;
  v3[1] = 0;
  v8 = *(_QWORD *)(v1 + 48);
  if (v8)
  {
    MEMORY[0x19401E970](v8, 0x1000C8052888210);
    *(_QWORD *)(v1 + 48) = 0;
  }
  std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100]((uint64_t **)(v1 + 16), 0);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::unigram::Model::Model(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  BOOL v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v17;

  v7 = a4 > 7;
  if (a4 <= 7)
    v8 = 0;
  else
    v8 = a4 - 8;
  if (v7)
    v9 = (char *)(a3 + 2);
  else
    v9 = "";
  v10 = sentencepiece::ModelInterface::ModelInterface(a1, a2, v9, v8);
  *(_DWORD *)(v10 + 104) = 0;
  v11 = (_DWORD *)(v10 + 104);
  *(_QWORD *)v10 = &off_1E2DF1340;
  *(_DWORD *)(v10 + 108) = 0;
  v12 = (_DWORD *)(v10 + 108);
  *(_DWORD *)(v10 + 112) = 0;
  v13 = (uint64_t *)(v10 + 96);
  sentencepiece::util::Status::Status((sentencepiece::util::Status *)&v17, (const sentencepiece::util::Status *)(v10 + 96));
  v14 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v14)
  {
    sentencepiece::mmap_util::DecodePrefix<float>(a3, a4, v11, &v17);
    sentencepiece::util::Status::operator=(v13, &v17);
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    (*(void (**)(_DWORD **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v17, a1);
    v15 = v17;
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    if (!v15)
    {
      sentencepiece::mmap_util::DecodePrefix<float>(a3 + 1, a4 - 4, v12, &v17);
      sentencepiece::util::Status::operator=(v13, &v17);
      sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    }
  }
  return a1;
}

void sub_191D17CEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  sentencepiece::ModelInterface *v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  sentencepiece::ModelInterface::~ModelInterface(v2);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::mmap_util::DecodePrefix<float>@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v8[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x19401E928](&v10);
  }
  else
  {
    *a3 = *a1;
    return sentencepiece::util::Status::Status(a4);
  }
}

void sub_191D17E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::unigram::Model::~Model(sentencepiece::unigram::Model *this)
{
  sentencepiece::ModelInterface::~ModelInterface(this);
  JUMPOUT(0x19401E994);
}

void sentencepiece::unigram::Model::Encode(sentencepiece::unigram::Model *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD *v24;
  void (**v25)(sentencepiece::unigram::Lattice *__hidden);
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  if (*((_DWORD *)a1 + 28))
  {
    (*(void (**)(void (***__return_ptr)(sentencepiece::unigram::Lattice *__hidden), sentencepiece::unigram::Model *))(*(_QWORD *)a1 + 16))(&v25, a1);
    if (v25)
    {
      sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v25);
LABEL_4:
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      return;
    }
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v25);
    if (!a3)
      goto LABEL_4;
    v25 = &off_1E2DF1430;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0;
    v32 = &off_1E2DF1300;
    v33 = 0u;
    v34 = 0u;
    v35 = 0;
    v36 = 1024;
    sentencepiece::unigram::Lattice::SetSentence((uint64_t)&v25, a2, a3);
    sentencepiece::unigram::Model::PopulateNodes(a1, (sentencepiece::unigram::Lattice *)&v25);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sentencepiece::unigram::Lattice::Viterbi((sentencepiece::unigram::Lattice *)&v25, (uint64_t)&v23);
    v8 = v23;
    v9 = v24;
    if (v23 != v24)
    {
      v10 = a4 + 2;
      v11 = (char *)a4[1];
      do
      {
        v12 = *v8;
        if ((unint64_t)v11 >= *v10)
        {
          v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v11[-*a4] >> 3);
          v14 = v13 + 1;
          if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3) > v14)
            v14 = 0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v10 - *a4) >> 3) >= 0x555555555555555)
            v15 = 0xAAAAAAAAAAAAAAALL;
          else
            v15 = v14;
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a4 + 2), v15);
          v18 = &v16[24 * v13];
          *(_OWORD *)v18 = *(_OWORD *)v12;
          *((_DWORD *)v18 + 4) = *(_DWORD *)(v12 + 28);
          v20 = (char *)*a4;
          v19 = (char *)a4[1];
          v21 = v18;
          if (v19 != (char *)*a4)
          {
            do
            {
              v22 = *(_OWORD *)(v19 - 24);
              *((_QWORD *)v21 - 1) = *((_QWORD *)v19 - 1);
              *(_OWORD *)(v21 - 24) = v22;
              v21 -= 24;
              v19 -= 24;
            }
            while (v19 != v20);
            v19 = (char *)*a4;
          }
          v11 = v18 + 24;
          *a4 = v21;
          a4[1] = v18 + 24;
          a4[2] = &v16[24 * v17];
          if (v19)
            operator delete(v19);
        }
        else
        {
          *(_OWORD *)v11 = *(_OWORD *)v12;
          *((_DWORD *)v11 + 4) = *(_DWORD *)(v12 + 28);
          v11 += 24;
        }
        a4[1] = v11;
        ++v8;
      }
      while (v8 != v9);
      v8 = v23;
    }
    if (v8)
    {
      v24 = v8;
      operator delete(v8);
    }
    sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&v25);
  }
  else
  {
    sentencepiece::unigram::Model::EncodeOptimized((uint64_t)a1, (uint64_t)a2, a3, a4);
  }
}

void sub_191D1812C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::unigram::Model::EncodeOptimized(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float *v13;
  int v14;
  float v15;
  unint64_t v16;
  float v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  double v29;
  double v30;
  float v31;
  float *v32;
  int *v33;
  int v34;
  float v35;
  char *v37;
  _QWORD *v38;
  unsigned int v39;
  float *v40;
  unint64_t v41;
  unsigned int *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  char **v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  __int128 *v57;
  char *i;
  __int128 v59;
  int v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  float *v64;
  _QWORD *v65;
  uint64_t v66;
  __int128 v67;

  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 16))(&v67);
  if ((_QWORD)v67)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v67);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v67);
  if (!a3)
    goto LABEL_3;
  v8 = *(float *)(a1 + 104);
  v9 = (a3 << 32) + 0x100000000;
  v66 = a2;
  if (a3 << 32 == 0xFFFFFFFF00000000)
  {
    v12 = 0;
  }
  else
  {
    if (v9 < 0)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v10 = v9 >> 32;
    v11 = 3 * v10;
    v12 = (float *)operator new(12 * v10);
    v13 = v12;
    do
    {
      *(_QWORD *)v13 = 0xFFFFFFFFLL;
      v13[2] = NAN;
      v13 += 3;
    }
    while (v13 != &v12[v11]);
    a2 = v66;
  }
  if ((int)a3 <= 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    v65 = a4;
    v14 = 0;
    v15 = v8 + -10.0;
    v16 = (int)a3;
    v62 = (char *)(v12 + 5);
    v63 = a3;
    v64 = v12;
    v61 = (int)a3;
    do
    {
      v17 = v12[3 * v14 + 1];
      if ((int)a3 - v14 >= asc_191D57358[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4])
        v18 = asc_191D57358[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4];
      else
        v18 = a3 - v14;
      if (v16 <= v14)
        goto LABEL_31;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = a2 + v14;
      v23 = v16 - v14;
      v24 = (int *)&v62[12 * v14];
      do
      {
        v25 = *(_QWORD *)(a1 + 40);
        v26 = *(unsigned __int8 *)(v22 + v19);
        LODWORD(v21) = (*(_DWORD *)(v25 + 4 * v21) >> 10 << ((*(_DWORD *)(v25 + 4 * v21) >> 6) & 8)) ^ v21 ^ v26;
        v27 = *(_DWORD *)(v25 + 4 * v21);
        if ((v27 & 0x800000FF) != v26)
          break;
        if ((v27 & 0x100) != 0)
        {
          v28 = *(_DWORD *)(v25 + 4 * ((v27 >> 10 << ((v27 >> 6) & 8)) ^ v21)) & 0x7FFFFFFF;
          if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), v28) & 1) == 0)
          {
            if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v28))
            {
              v29 = (float)(*(float *)(a1 + 108) * (float)(unint64_t)(v19 + 1)) + -0.1;
            }
            else
            {
              v29 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v28);
            }
            v30 = v29 + v17;
            if (*v24 == -1 || v30 > *((float *)v24 - 1))
            {
              v31 = v30;
              *((float *)v24 - 1) = v31;
              *v24 = v14;
              *(v24 - 2) = v28;
            }
            v20 |= v18 - 1 == v19;
          }
        }
        ++v19;
        v24 += 3;
      }
      while (v23 != v19);
      LODWORD(a3) = v63;
      v12 = v64;
      a2 = v66;
      v16 = v61;
      if ((v20 & 1) == 0)
      {
LABEL_31:
        v32 = &v12[3 * v18 + 3 * v14];
        v34 = *((_DWORD *)v32 + 2);
        v33 = (int *)(v32 + 2);
        v35 = v15 + v17;
        if (v34 == -1 || v35 > *((float *)v33 - 1))
        {
          *((float *)v33 - 1) = v35;
          *v33 = v14;
          v12[3 * v18 + 3 * v14] = *(float *)(a1 + 88);
        }
      }
      v14 += v18;
    }
    while (v14 < (int)a3);
    v37 = 0;
    v65[2] = 0;
    v38 = v65 + 2;
    *v65 = 0;
    v65[1] = 0;
    v39 = a3;
    do
    {
      v40 = &v12[3 * v39];
      v42 = (unsigned int *)(v40 + 2);
      v41 = *((int *)v40 + 2);
      if (v63 < v41)
        std::__throw_out_of_range[abi:ne180100]("string_view::substr");
      v43 = v39 - v41;
      v44 = v66 + v41;
      if (v63 - v41 >= v43)
        v45 = v43;
      else
        v45 = v63 - v41;
      if ((unint64_t)v37 >= *v38)
      {
        v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v37[-*v65] >> 3);
        v48 = v47 + 1;
        if (v47 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3) > v48)
          v48 = 0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v38 - *v65) >> 3) >= 0x555555555555555)
          v49 = 0xAAAAAAAAAAAAAAALL;
        else
          v49 = v48;
        v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v38, v49);
        v52 = &v50[24 * v47];
        *(_QWORD *)v52 = v44;
        *((_QWORD *)v52 + 1) = v45;
        *((float *)v52 + 4) = *v40;
        v46 = (char **)v65;
        v54 = (char *)*v65;
        v53 = (char *)v65[1];
        v55 = v52;
        if (v53 == (char *)*v65)
        {
          v12 = v64;
        }
        else
        {
          v12 = v64;
          do
          {
            v56 = *(_OWORD *)(v53 - 24);
            *((_QWORD *)v55 - 1) = *((_QWORD *)v53 - 1);
            *(_OWORD *)(v55 - 24) = v56;
            v55 -= 24;
            v53 -= 24;
          }
          while (v53 != v54);
          v53 = (char *)*v65;
        }
        v37 = v52 + 24;
        *v65 = v55;
        v65[1] = v52 + 24;
        v65[2] = &v50[24 * v51];
        if (v53)
          operator delete(v53);
      }
      else
      {
        *(_QWORD *)v37 = v44;
        *((_QWORD *)v37 + 1) = v45;
        *((float *)v37 + 4) = *v40;
        v37 += 24;
        v12 = v64;
        v46 = (char **)v65;
      }
      v46[1] = v37;
      v39 = *v42;
    }
    while ((int)*v42 > 0);
    v57 = (__int128 *)*v46;
    if (*v46 != v37)
    {
      for (i = v37 - 24; v57 < (__int128 *)i; i -= 24)
      {
        v67 = *v57;
        v59 = v67;
        *v57 = *(_OWORD *)i;
        *(_OWORD *)i = v59;
        v60 = *((_DWORD *)v57 + 4);
        *((_DWORD *)v57 + 4) = *((_DWORD *)i + 4);
        *((_DWORD *)i + 4) = v60;
        v57 = (__int128 *)((char *)v57 + 24);
      }
    }
  }
  if (v12)
    operator delete(v12);
}

void sub_191D1864C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v15;

  v15 = *(void **)a14;
  if (*(_QWORD *)a14)
  {
    *(_QWORD *)(a14 + 8) = v15;
    operator delete(v15);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Model::NBestEncode(sentencepiece::unigram::Model *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  char *v10;
  void *v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t i;
  uint64_t *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  float *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  void *v35;
  char *v36;
  char *v37;
  __int128 v38;
  void *v39;
  void *__p[13];
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(__p);
  if (__p[0])
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)__p);
LABEL_3:
    memset(__p, 0, 24);
    std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>((char *)__p, 0, 0, 0);
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    *(_QWORD *)&v38 = a5;
    BYTE8(v38) = 0;
    v10 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v10;
    a5[1] = (uint64_t)v10;
    a5[2] = (uint64_t)(v10 + 32);
    a5[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v10);
    v11 = __p[0];
    if (!__p[0])
      return;
    __p[1] = __p[0];
    goto LABEL_5;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)__p);
  if (!a3)
    goto LABEL_3;
  if (a4 >= 1024)
    v12 = 1024;
  else
    v12 = a4;
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = v12;
  if (v13 > 1)
  {
    __p[0] = &off_1E2DF1430;
    memset(&__p[1], 0, 88);
    __p[12] = &off_1E2DF1300;
    v41 = 0u;
    v42 = 0u;
    v43 = 0;
    v44 = 1024;
    sentencepiece::unigram::Lattice::SetSentence((uint64_t)__p, a2, a3);
    sentencepiece::unigram::Model::PopulateNodes(a1, (sentencepiece::unigram::Lattice *)__p);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    v34 = a5;
    sentencepiece::unigram::Lattice::NBest((sentencepiece::unigram::Lattice *)__p, 0.0, v13, 0, (uint64_t *)&v38);
    v33 = *((_QWORD *)&v38 + 1);
    for (i = v38; i != v33; i += 32)
    {
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v16 = *(uint64_t **)i;
      v17 = *(uint64_t **)(i + 8);
      if (*(uint64_t **)i != v17)
      {
        v18 = 0;
        do
        {
          v19 = *v16;
          if (v18 >= v37)
          {
            v20 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (_BYTE *)v35) >> 3);
            v21 = v20 + 1;
            if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((v37 - (_BYTE *)v35) >> 3) > v21)
              v21 = 0x5555555555555556 * ((v37 - (_BYTE *)v35) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v37 - (_BYTE *)v35) >> 3) >= 0x555555555555555)
              v22 = 0xAAAAAAAAAAAAAAALL;
            else
              v22 = v21;
            v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v37, v22);
            v25 = &v23[24 * v20];
            *(_OWORD *)v25 = *(_OWORD *)v19;
            *((_DWORD *)v25 + 4) = *(_DWORD *)(v19 + 28);
            v27 = (char *)v35;
            v26 = v36;
            v28 = v25;
            if (v36 != v35)
            {
              do
              {
                v29 = *(_OWORD *)(v26 - 24);
                *((_QWORD *)v28 - 1) = *((_QWORD *)v26 - 1);
                *(_OWORD *)(v28 - 24) = v29;
                v28 -= 24;
                v26 -= 24;
              }
              while (v26 != v27);
              v26 = (char *)v35;
            }
            v18 = v25 + 24;
            v35 = v28;
            v36 = v25 + 24;
            v37 = &v23[24 * v24];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *(_OWORD *)v18 = *(_OWORD *)v19;
            *((_DWORD *)v18 + 4) = *(_DWORD *)(v19 + 28);
            v18 += 24;
          }
          v36 = v18;
          ++v16;
        }
        while (v16 != v17);
      }
      v30 = (float *)(i + 24);
      v31 = v34[1];
      if (v31 >= v34[2])
      {
        v32 = std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,float const&>(v34, (__int128 **)&v35, v30);
      }
      else
      {
        std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<std::string_view,int>>&,float const&>((uint64_t)v34, (__int128 **)&v35, v30);
        v32 = v31 + 32;
      }
      v34[1] = v32;
      if (v35)
      {
        v36 = (char *)v35;
        operator delete(v35);
      }
    }
    v35 = &v38;
    std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
    sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)__p);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, sentencepiece::unigram::Model *, unsigned __int8 *, uint64_t))(*(_QWORD *)a1 + 40))(&v38, a1, a2, a3);
    *(_OWORD *)__p = v38;
    __p[2] = v39;
    v39 = 0;
    v38 = 0uLL;
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    v35 = a5;
    LOBYTE(v36) = 0;
    v14 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v14;
    a5[1] = (uint64_t)v14;
    a5[2] = (uint64_t)(v14 + 32);
    a5[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v14);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v11 = (void *)v38;
    if ((_QWORD)v38)
    {
      *((_QWORD *)&v38 + 1) = v38;
LABEL_5:
      operator delete(v11);
    }
  }
}

void sub_191D18A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  a12 = a11;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&__p);
  _Unwind_Resume(a1);
}

void sentencepiece::unigram::Model::SampleEncode(sentencepiece::unigram::Model *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>, float a5@<S0>)
{
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  _QWORD *v25;
  _QWORD *v26;
  void (**v27)(sentencepiece::unigram::Lattice *__hidden);
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t (**v34)();
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 16))(&v27);
  if (v27)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v27);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v27);
  if (!a3)
    goto LABEL_3;
  v27 = &off_1E2DF1430;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0;
  v34 = &off_1E2DF1300;
  v35 = 0u;
  v36 = 0u;
  v37 = 0;
  v38 = 1024;
  sentencepiece::unigram::Lattice::SetSentence((uint64_t)&v27, a2, a3);
  sentencepiece::unigram::Model::PopulateNodes(a1, (sentencepiece::unigram::Lattice *)&v27);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sentencepiece::unigram::Lattice::Sample((sentencepiece::unigram::Lattice *)&v27, a5, (void **)&v25);
  v10 = v25;
  v11 = v26;
  if (v25 != v26)
  {
    v12 = 0;
    v13 = a4 + 2;
    do
    {
      v14 = *v10;
      if ((unint64_t)v12 >= *v13)
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v12[-*a4] >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(*v13 - *a4) >> 3) > v16)
          v16 = 0x5555555555555556 * ((uint64_t)(*v13 - *a4) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v13 - *a4) >> 3) >= 0x555555555555555)
          v17 = 0xAAAAAAAAAAAAAAALL;
        else
          v17 = v16;
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a4 + 2), v17);
        v20 = &v18[24 * v15];
        *(_OWORD *)v20 = *(_OWORD *)v14;
        *((_DWORD *)v20 + 4) = *(_DWORD *)(v14 + 28);
        v22 = (char *)*a4;
        v21 = (char *)a4[1];
        v23 = v20;
        if (v21 != (char *)*a4)
        {
          do
          {
            v24 = *(_OWORD *)(v21 - 24);
            *((_QWORD *)v23 - 1) = *((_QWORD *)v21 - 1);
            *(_OWORD *)(v23 - 24) = v24;
            v23 -= 24;
            v21 -= 24;
          }
          while (v21 != v22);
          v21 = (char *)*a4;
        }
        v12 = v20 + 24;
        *a4 = v23;
        a4[1] = v20 + 24;
        a4[2] = &v18[24 * v19];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *(_OWORD *)v12 = *(_OWORD *)v14;
        *((_DWORD *)v12 + 4) = *(_DWORD *)(v14 + 28);
        v12 += 24;
      }
      a4[1] = v12;
      ++v10;
    }
    while (v10 != v11);
    v10 = v25;
  }
  if (v10)
  {
    v26 = v10;
    operator delete(v10);
  }
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&v27);
}

void sub_191D18DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::unigram::Model::SampleEncodeAndScore(sentencepiece::unigram::Model *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, int a6@<W5>, uint64_t *j@<X8>, float a8@<S0>)
{
  sentencepiece::unigram::Model *v14;
  sentencepiece::logging *v16;
  float v17;
  uint64_t *v18;
  uint64_t *v19;
  __int128 *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  __int128 *v28;
  __int128 *v29;
  __int128 *v30;
  __int128 v31;
  char *v32;
  float v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  __int128 *v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  __int128 *v49;
  char *v50;
  uint64_t v51;
  double v52;
  double v53;
  float v54;
  __int128 *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  __int128 *v63;
  __int128 *v64;
  __int128 *v65;
  __int128 v66;
  char *v67;
  uint64_t v68;
  __int128 *v69;
  __int128 *v70;
  __int128 *v71;
  void *v72;
  void *v73;
  void *v74;
  float v75;
  __int128 *i;
  uint64_t *v77;
  uint64_t *v78;
  char *v79;
  float v80;
  uint64_t v81;
  float v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  __int128 v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  float v97;
  double v98;
  long double v99;
  long double v100;
  double v101;
  float v102;
  uint64_t *v103;
  int v104;
  int v105;
  sentencepiece::unigram::Model *v106;
  sentencepiece::unigram::Model *v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  uint64_t v110;
  uint64_t v111;
  __int128 *v112;
  float v113;
  void *__p[13];
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  double v120;
  __int128 *v121;
  __int128 *v122;
  char *v123;
  void *v124[3];
  void **v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t (**v132)();
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  unint64_t v139;

  v14 = a1;
  (*(void (**)(void ***__return_ptr))(*(_QWORD *)a1 + 16))(&v125);
  if (v125)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v125);
LABEL_3:
    *j = 0;
    j[1] = 0;
    j[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v125);
  if (!a3)
    goto LABEL_3;
  v137 = 0;
  v138 = 0;
  v139 = 0;
  v125 = (void **)&off_1E2DF1430;
  v126 = 0u;
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v130 = 0u;
  v131 = 0;
  v132 = &off_1E2DF1300;
  v133 = 0u;
  v134 = 0u;
  v135 = 0;
  v136 = 1024;
  sentencepiece::unigram::Lattice::SetSentence((uint64_t)&v125, a2, a3);
  sentencepiece::unigram::Model::PopulateNodes(v14, (sentencepiece::unigram::Lattice *)&v125);
  sentencepiece::unigram::Lattice::ForwardAlgorithm((sentencepiece::unigram::Lattice *)&v125, a8, (uint64_t *)v124);
  v17 = *((float *)v124[0]
        + *(unsigned int *)(**(_QWORD **)(*((_QWORD *)&v128 + 1)
                                        + 24
                                        * ((((*((_QWORD *)&v127 + 1) - (_QWORD)v127) >> 3) - 1) & ~((int)(((*((_QWORD *)&v127 + 1) - (_QWORD)v127) >> 3) - 1) >> 31)))
                          + 24));
  if (a6)
  {
    if ((a5 & 1) == 0)
    {
      if ((int)sentencepiece::logging::GetMinLogLevel(v16) <= 2)
      {
        LOBYTE(__p[0]) = 0;
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
        v36 = (_QWORD *)std::ostream::operator<<();
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)") ", 2);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"LOG(", 4);
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"ERROR", 5);
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)") ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"include_best not supported for wor false", 40);
        sentencepiece::error::Die::~Die((sentencepiece::error::Die *)__p);
      }
      goto LABEL_113;
    }
    v104 = a4;
    v105 = a6;
    v106 = v14;
    v108 = a2;
    v110 = a3;
    v121 = 0;
    v122 = 0;
    v123 = 0;
    sentencepiece::unigram::Lattice::Viterbi((sentencepiece::unigram::Lattice *)&v125, (uint64_t)__p);
    v18 = (uint64_t *)__p[0];
    v19 = (uint64_t *)__p[1];
    if (__p[0] != __p[1])
    {
      v20 = v122;
      do
      {
        v21 = *v18;
        if (v20 >= (__int128 *)v123)
        {
          v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v121) >> 3);
          v23 = v22 + 1;
          if (v22 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((v123 - (char *)v121) >> 3) > v23)
            v23 = 0x5555555555555556 * ((v123 - (char *)v121) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v123 - (char *)v121) >> 3) >= 0x555555555555555)
            v24 = 0xAAAAAAAAAAAAAAALL;
          else
            v24 = v23;
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v123, v24);
          v27 = &v25[24 * v22];
          *(_OWORD *)v27 = *(_OWORD *)v21;
          *((_DWORD *)v27 + 4) = *(_DWORD *)(v21 + 28);
          v29 = v121;
          v28 = v122;
          v30 = (__int128 *)v27;
          if (v122 != v121)
          {
            do
            {
              v31 = *(__int128 *)((char *)v28 - 24);
              *((_QWORD *)v30 - 1) = *((_QWORD *)v28 - 1);
              *(__int128 *)((char *)v30 - 24) = v31;
              v30 = (__int128 *)((char *)v30 - 24);
              v28 = (__int128 *)((char *)v28 - 24);
            }
            while (v28 != v29);
            v28 = v121;
          }
          v20 = (__int128 *)(v27 + 24);
          v121 = v30;
          v122 = (__int128 *)(v27 + 24);
          v123 = &v25[24 * v26];
          if (v28)
            operator delete(v28);
        }
        else
        {
          *v20 = *(_OWORD *)v21;
          *((_DWORD *)v20 + 4) = *(_DWORD *)(v21 + 28);
          v20 = (__int128 *)((char *)v20 + 24);
        }
        v122 = v20;
        ++v18;
      }
      while (v18 != v19);
    }
    v119 = 0.0;
    v32 = v138;
    if ((unint64_t)v138 >= v139)
    {
      v34 = std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,double>(&v137, &v121, &v119);
      a2 = v108;
      a3 = v110;
    }
    else
    {
      *(_QWORD *)v138 = 0;
      *((_QWORD *)v32 + 1) = 0;
      *((_QWORD *)v32 + 2) = 0;
      std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v32, v121, v122, 0xAAAAAAAAAAAAAAABLL * (((char *)v122 - (char *)v121) >> 3));
      a2 = v108;
      a3 = v110;
      v33 = v119;
      *((float *)v32 + 6) = v33;
      v34 = (uint64_t)(v32 + 32);
    }
    a4 = v104;
    v14 = v106;
    a6 = v105;
    v138 = (char *)v34;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v121)
    {
      v122 = v121;
      operator delete(v121);
    }
  }
  if ((a5 & 1) != 0)
  {
    sentencepiece::unigram::Lattice::NBest((sentencepiece::unigram::Lattice *)&v125, a8, a4 + 1, 1, (uint64_t *)&v121);
    v103 = j;
    if (a6)
    {
      std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::vector(&v119, ((char *)v122 - (char *)v121) >> 5);
      v42 = v121;
      v41 = v122;
      if (v122 != v121)
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        do
        {
          if (&v42[v43] != (__int128 *)(*(_QWORD *)&v119 + v44))
          {
            std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)(*(_QWORD *)&v119 + v44), *(char **)&v42[v43], *((_QWORD *)&v42[v43] + 1), (uint64_t)(*((_QWORD *)&v42[v43] + 1) - *(_QWORD *)&v42[v43]) >> 3);
            v42 = v121;
            v41 = v122;
          }
          ++v45;
          v44 += 24;
          v43 += 2;
        }
        while (v45 < ((char *)v41 - (char *)v42) >> 5);
      }
      sentencepiece::unigram::Lattice::Viterbi((sentencepiece::unigram::Lattice *)&v125, (uint64_t)__p);
      v46 = std::__find_impl[abi:ne180100]<std::vector<sentencepiece::unigram::Lattice::Node *> *,std::vector<sentencepiece::unigram::Lattice::Node *> *,std::vector<sentencepiece::unigram::Lattice::Node *>,std::__identity>(*(uint64_t *)&v119, *(uint64_t *)&v120, (uint64_t)__p);
      v47 = (int)(-1431655765 * ((unint64_t)(v46 - *(_QWORD *)&v119) >> 3));
      if (v47 == ((char *)v122 - (char *)v121) >> 5)
      {
        v49 = v122 - 2;
        v48 = (void *)*((_QWORD *)v122 - 4);
        if (v48)
        {
          *((_QWORD *)v122 - 3) = v48;
          operator delete(v48);
        }
      }
      else
      {
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,0>((std::vector<int> *)&v121[2 * v47 + 2], (std::vector<int> *)v122, (std::vector<int> *)&v121[2 * v47]);
        v49 = v69;
        v70 = v122;
        if (v122 != v69)
        {
          v71 = v122;
          do
          {
            v73 = (void *)*((_QWORD *)v71 - 4);
            v71 -= 2;
            v72 = v73;
            if (v73)
            {
              *((_QWORD *)v70 - 3) = v72;
              operator delete(v72);
            }
            v70 = v71;
          }
          while (v71 != v49);
        }
      }
      v122 = v49;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      __p[0] = &v119;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
    v74 = (void *)*((_QWORD *)v122 - 4);
    v112 = v122 - 2;
    v75 = *((float *)v122 - 2);
    if (v74)
    {
      *((_QWORD *)v122 - 3) = v74;
      operator delete(v74);
    }
    v122 = v112;
    for (i = v121; i != v112; i += 2)
    {
      memset(__p, 0, 24);
      v77 = *(uint64_t **)i;
      v78 = (uint64_t *)*((_QWORD *)i + 1);
      if (*(uint64_t **)i == v78)
      {
        v80 = 0.0;
      }
      else
      {
        v79 = 0;
        v80 = 0.0;
        do
        {
          v81 = *v77;
          v82 = *(float *)(*v77 + 32);
          if (v79 >= __p[2])
          {
            v83 = 0xAAAAAAAAAAAAAAABLL * ((v79 - (char *)__p[0]) >> 3);
            v84 = v83 + 1;
            if (v83 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3) > v84)
              v84 = 0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[2] - (char *)__p[0]) >> 3) >= 0x555555555555555)
              v85 = 0xAAAAAAAAAAAAAAALL;
            else
              v85 = v84;
            v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[2], v85);
            v88 = &v86[24 * v83];
            *(_OWORD *)v88 = *(_OWORD *)v81;
            *((_DWORD *)v88 + 4) = *(_DWORD *)(v81 + 28);
            v90 = (char *)__p[0];
            v89 = (char *)__p[1];
            v91 = v88;
            if (__p[1] != __p[0])
            {
              do
              {
                v92 = *(_OWORD *)(v89 - 24);
                *((_QWORD *)v91 - 1) = *((_QWORD *)v89 - 1);
                *(_OWORD *)(v91 - 24) = v92;
                v91 -= 24;
                v89 -= 24;
              }
              while (v89 != v90);
              v89 = (char *)__p[0];
            }
            v79 = v88 + 24;
            __p[0] = v91;
            __p[1] = v88 + 24;
            __p[2] = &v86[24 * v87];
            if (v89)
              operator delete(v89);
          }
          else
          {
            *(_OWORD *)v79 = *(_OWORD *)v81;
            *((_DWORD *)v79 + 4) = *(_DWORD *)(v81 + 28);
            v79 += 24;
          }
          __p[1] = v79;
          v80 = v80 + (float)(a8 * v82);
          ++v77;
        }
        while (v77 != v78);
      }
      *(float *)&v119 = v80 - v17;
      v93 = v138;
      if ((unint64_t)v138 >= v139)
      {
        v94 = std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,float>(&v137, (__int128 **)__p, &v119);
      }
      else
      {
        *(_QWORD *)v138 = 0;
        *((_QWORD *)v93 + 1) = 0;
        *((_QWORD *)v93 + 2) = 0;
        std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v93, (__int128 *)__p[0], (__int128 *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        *((_DWORD *)v93 + 6) = LODWORD(v119);
        v94 = (uint64_t)(v93 + 32);
      }
      v138 = (char *)v94;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    v95 = v137;
    v96 = v138;
    for (j = v103; (char *)v95 != v96; v95 += 32)
    {
      v97 = *(float *)(v95 + 24);
      if (v97 != 0.0)
      {
        v98 = v97 - v75;
        v99 = exp(v98);
        if (v98 <= -10.0)
        {
          v101 = v98 + v99 * -0.5 + v99 * v99 / 24.0 + pow(v99, 4.0) / -2880.0;
        }
        else
        {
          v100 = expm1(-v99);
          v101 = log(-v100);
        }
        v102 = v101;
        *(float *)(v95 + 24) = v102;
      }
    }
    __p[0] = &v121;
    std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v51 = v137;
    v50 = v138;
  }
  else
  {
    v51 = v137;
    v50 = v138;
    if (a4 > (unint64_t)((uint64_t)&v138[-v137] >> 5))
    {
      v109 = a2;
      v111 = a3;
      v107 = v14;
      do
      {
        memset(&__p[1], 0, 88);
        __p[0] = &off_1E2DF1430;
        __p[12] = &off_1E2DF1300;
        v115 = 0u;
        v116 = 0u;
        v117 = 0;
        v118 = 1024;
        sentencepiece::unigram::Lattice::SetSentence((uint64_t)__p, a2, a3);
        sentencepiece::unigram::Model::PopulateNodes(v14, (sentencepiece::unigram::Lattice *)__p);
        v121 = 0;
        v122 = 0;
        v123 = 0;
        sentencepiece::unigram::Lattice::Sample((sentencepiece::unigram::Lattice *)__p, a8, (void **)&v119);
        v53 = v119;
        v52 = v120;
        v54 = 0.0;
        if (*(_QWORD *)&v119 != *(_QWORD *)&v120)
        {
          v55 = v122;
          do
          {
            v56 = **(_QWORD **)&v53;
            if (v55 >= (__int128 *)v123)
            {
              v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (char *)v121) >> 3);
              v58 = v57 + 1;
              if (v57 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((v123 - (char *)v121) >> 3) > v58)
                v58 = 0x5555555555555556 * ((v123 - (char *)v121) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v123 - (char *)v121) >> 3) >= 0x555555555555555)
                v59 = 0xAAAAAAAAAAAAAAALL;
              else
                v59 = v58;
              v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v123, v59);
              v62 = &v60[24 * v57];
              *(_OWORD *)v62 = *(_OWORD *)v56;
              *((_DWORD *)v62 + 4) = *(_DWORD *)(v56 + 28);
              v64 = v121;
              v63 = v122;
              v65 = (__int128 *)v62;
              if (v122 != v121)
              {
                do
                {
                  v66 = *(__int128 *)((char *)v63 - 24);
                  *((_QWORD *)v65 - 1) = *((_QWORD *)v63 - 1);
                  *(__int128 *)((char *)v65 - 24) = v66;
                  v65 = (__int128 *)((char *)v65 - 24);
                  v63 = (__int128 *)((char *)v63 - 24);
                }
                while (v63 != v64);
                v63 = v121;
              }
              v55 = (__int128 *)(v62 + 24);
              v121 = v65;
              v122 = (__int128 *)(v62 + 24);
              v123 = &v60[24 * v61];
              if (v63)
                operator delete(v63);
            }
            else
            {
              *v55 = *(_OWORD *)v56;
              *((_DWORD *)v55 + 4) = *(_DWORD *)(v56 + 28);
              v55 = (__int128 *)((char *)v55 + 24);
            }
            v122 = v55;
            v54 = v54 + (float)(a8 * *(float *)(v56 + 32));
            *(_QWORD *)&v53 += 8;
          }
          while (*(_QWORD *)&v53 != *(_QWORD *)&v52);
        }
        v113 = v54 - v17;
        v67 = v138;
        if ((unint64_t)v138 >= v139)
        {
          v68 = std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,float>(&v137, &v121, &v113);
        }
        else
        {
          *(_QWORD *)v138 = 0;
          *((_QWORD *)v67 + 1) = 0;
          *((_QWORD *)v67 + 2) = 0;
          std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v67, v121, v122, 0xAAAAAAAAAAAAAAABLL * (((char *)v122 - (char *)v121) >> 3));
          *((float *)v67 + 6) = v113;
          v68 = (uint64_t)(v67 + 32);
        }
        a2 = v109;
        a3 = v111;
        v14 = v107;
        v138 = (char *)v68;
        if (v119 != 0.0)
        {
          v120 = v119;
          operator delete(*(void **)&v119);
        }
        if (v121)
        {
          v122 = v121;
          operator delete(v121);
        }
        sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)__p);
        v51 = v137;
        v50 = v138;
      }
      while (a4 > (unint64_t)((uint64_t)&v138[-v137] >> 5));
    }
  }
  *j = v51;
  j[1] = (uint64_t)v50;
  j[2] = v139;
  j = &v137;
LABEL_113:
  *j = 0;
  j[1] = 0;
  j[2] = 0;
  if (v124[0])
  {
    v124[1] = v124[0];
    operator delete(v124[0]);
  }
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&v125);
  v125 = (void **)&v137;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&v125);
}

void sub_191D19894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *__p, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void **a44)
{
  uint64_t v44;
  uint64_t v45;
  void *v47;

  if (__p)
  {
    a17 = __p;
    operator delete(__p);
  }
  __p = &a35;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a38;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v47 = *(void **)(v44 + 200);
  if (v47)
  {
    *(_QWORD *)(v44 + 208) = v47;
    operator delete(v47);
  }
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&a44);
  a44 = (void **)(v45 - 160);
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&a44);
  _Unwind_Resume(a1);
}

float sentencepiece::unigram::Model::CalculateEntropy(sentencepiece::unigram::Model *a1, unsigned __int8 *a2, uint64_t a3, float a4)
{
  float v6;
  void (**v8)(sentencepiece::unigram::Lattice *__hidden);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v8 = &off_1E2DF1430;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  v15 = &off_1E2DF1300;
  v16 = 0u;
  v17 = 0u;
  v18 = 0;
  v19 = 1024;
  sentencepiece::unigram::Lattice::SetSentence((uint64_t)&v8, a2, a3);
  sentencepiece::unigram::Model::PopulateNodes(a1, (sentencepiece::unigram::Lattice *)&v8);
  v6 = sentencepiece::unigram::Lattice::CalculateEntropy((sentencepiece::unigram::Lattice *)&v8, a4);
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&v8);
  return v6;
}

void sub_191D19A98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)va);
  _Unwind_Resume(a1);
}

BOOL sentencepiece::unigram::Model::VerifyOutputsEquivalent(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  sentencepiece::logging *v26;
  float v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  _BYTE *v45;
  void *__p;
  _QWORD *v47;
  uint64_t v48;
  char __s[2];

  strcpy(__s, " ");
  v10 = strlen(__s);
  absl::internal::Splitter::Splitter((char **)&v44, a2, a3, (unsigned __int8 *)__s, v10, 0);
  v47 = 0;
  v48 = 0;
  __p = 0;
  std::vector<std::string_view>::__init_with_size[abi:ne180100]<std::string_view*,std::string_view*>(&__p, v44, (uint64_t)v45, (v45 - (_BYTE *)v44) >> 4);
  v11 = __p;
  v12 = v47;
  if (__p == v47)
  {
    v14 = 0.0;
    if (__p)
    {
LABEL_11:
      v47 = v11;
      operator delete(v11);
    }
  }
  else
  {
    v13 = *(float *)(a1 + 104) + -10.0;
    v14 = 0.0;
    do
    {
      v15 = v11[1];
      v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, *v11, v15);
      if ((_DWORD)v16 == *(_DWORD *)(a1 + 88))
      {
        v14 = v13 + v14;
      }
      else
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v16))
          v17 = (float)(*(float *)(a1 + 108) * (float)(int)v15) + -0.1;
        else
          v17 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v16);
        v14 = v17 + v14;
      }
      v11 += 2;
    }
    while (v11 != v12);
    v11 = __p;
    if (__p)
      goto LABEL_11;
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  strcpy(__s, " ");
  v18 = strlen(__s);
  absl::internal::Splitter::Splitter((char **)&v44, a4, a5, (unsigned __int8 *)__s, v18, 0);
  v42 = 0;
  v43 = 0;
  v41 = 0;
  std::vector<std::string_view>::__init_with_size[abi:ne180100]<std::string_view*,std::string_view*>(&v41, v44, (uint64_t)v45, (v45 - (_BYTE *)v44) >> 4);
  v19 = v41;
  v20 = v42;
  if (v41 != v42)
  {
    v21 = *(float *)(a1 + 104) + -10.0;
    v22 = 0.0;
    do
    {
      v23 = v19[1];
      v24 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, *v19, v23);
      if ((_DWORD)v24 == *(_DWORD *)(a1 + 88))
      {
        v22 = v21 + v22;
      }
      else
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v24))
          v25 = (float)(*(float *)(a1 + 108) * (float)(int)v23) + -0.1;
        else
          v25 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v24);
        v22 = v25 + v22;
      }
      v19 += 2;
    }
    while (v19 != v20);
    v19 = v41;
    if (!v41)
      goto LABEL_25;
    goto LABEL_24;
  }
  v22 = 0.0;
  if (v41)
  {
LABEL_24:
    v42 = v19;
    operator delete(v19);
  }
LABEL_25:
  v26 = (sentencepiece::logging *)v44;
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  v27 = vabds_f32(v14, v22);
  if (v27 > 0.0000001 && (int)sentencepiece::logging::GetMinLogLevel(v26) <= 1)
  {
    LOBYTE(v44) = 0;
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"(", 1);
    v29 = (_QWORD *)std::ostream::operator<<();
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)") ", 2);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"LOG(", 4);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"WARNING", 7);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)") ", 2);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Two sentence piece sequences are not equivalent! Left: ", 55);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, a2, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", Score: ", 9);
    v36 = (_QWORD *)std::ostream::operator<<();
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)". Right: ", 9);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, a4, a5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)", Score: ", 9);
    v39 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)".", 1);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v44);
  }
  return v27 <= 0.0000001;
}

void sub_191D19E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Model::MemoryMappableString(sentencepiece::unigram::Model *this@<X0>, std::string *a2@<X8>)
{
  std::string *p_p;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string __p;
  std::string v13;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  sentencepiece::ModelInterface::MemoryMappableString(this, &v13);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(p_p->__r_.__value_.__l.__data_) = *((_DWORD *)this + 26);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &__p;
  else
    v5 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &__p;
  else
    v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v7->__r_.__value_.__l.__data_) = *((_DWORD *)this + 27);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &__p;
  else
    v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v9 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v13;
  else
    v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    v11 = v13.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_191D1A018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::unigram::Model::IsSampleEncodeAvailable(sentencepiece::unigram::Model *this)
{
  return 1;
}

uint64_t sentencepiece::unigram::Model::IsNBestEncodeAvailable(sentencepiece::unigram::Model *this)
{
  return 1;
}

uint64_t sentencepiece::unigram::Model::IsSampleEncodeAndScoreAvailable(sentencepiece::unigram::Model *this)
{
  return 1;
}

uint64_t sentencepiece::unigram::Model::IsCalculateEntropyAvailable(sentencepiece::unigram::Model *this)
{
  return 1;
}

_QWORD *std::vector<sentencepiece::unigram::Lattice::Node *>::__init_with_size[abi:ne180100]<sentencepiece::unigram::Lattice::Node **,sentencepiece::unigram::Lattice::Node **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_191D1A0EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(uint64_t a1, _BYTE *a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  unsigned int *v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  BOOL v31;
  unsigned __int32 v32;
  int i;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  __n128 v41;
  int v42;
  _OWORD v43[2];
  __int128 v44;

  v9 = *(unsigned int **)(a1 + 16);
  v10 = *v9;
  if (a5)
  {
    v11 = *a2;
    v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v11;
    v10 = v9[v12];
    if ((v10 & 0x800000FF) == v11)
    {
      v13 = a5 - 1;
      v14 = a2 + 1;
      while (1)
      {
        v15 = v12;
        if (!v13)
          goto LABEL_16;
        v16 = *v14++;
        v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v16;
        v10 = v9[v12];
        --v13;
        if ((v10 & 0x800000FF) != v16)
          goto LABEL_14;
      }
    }
  }
  else
  {
    v17 = *a2;
    if (!*a2)
    {
      v15 = 0;
      LODWORD(v12) = 0;
LABEL_16:
      if ((v10 & 0x100) != 0)
        v22 = v9[(v10 >> 10 << ((v10 >> 6) & 8)) ^ v12] & 0x7FFFFFFF;
      else
        v22 = -1;
      goto LABEL_19;
    }
    v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v17;
    v10 = v9[v18];
    if ((v10 & 0x800000FF) == v17)
    {
      v19 = a2 + 1;
      LODWORD(v12) = v18;
      while (1)
      {
        v15 = v18;
        v21 = *v19++;
        v20 = v21;
        if (!v21)
          goto LABEL_16;
        v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v20;
        v10 = v9[v18];
        LODWORD(v12) = v18;
        if ((v10 & 0x800000FF) != v20)
          goto LABEL_14;
      }
    }
  }
  v15 = 0;
LABEL_14:
  v22 = -2;
LABEL_19:
  v44 = 0u;
  memset(v43, 0, sizeof(v43));
  v41.n128_u32[0] = 0;
  v41.n128_u64[1] = v15;
  v42 = v22;
  std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::push_back(v43, &v41);
  v23 = *((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v24 = 0;
    do
    {
      v25 = (int *)(*(_QWORD *)(*((_QWORD *)&v43[0] + 1) + 8 * ((unint64_t)v44 / 0xAA))
                  + 24 * ((unint64_t)v44 % 0xAA));
      v26 = *v25;
      v27 = v25[2];
      v28 = v25[4];
      *(_QWORD *)&v44 = v44 + 1;
      *((_QWORD *)&v44 + 1) = v23 - 1;
      if ((unint64_t)v44 >= 0x154)
      {
        operator delete(**((void ***)&v43[0] + 1));
        *((_QWORD *)&v43[0] + 1) += 8;
        *(_QWORD *)&v44 = v44 - 170;
      }
      if ((v28 & 0x80000000) == 0)
      {
        v29 = a3 + 16 * v24;
        *(_DWORD *)v29 = v28;
        *(_QWORD *)(v29 + 8) = a5;
        ++v24;
      }
      v31 = a6 >= 0 && v26 > a6;
      if (v24 >= a4 || v31)
        break;
      if (v28 != -2)
      {
        v32 = v26 + 1;
        for (i = 1; i != 256; ++i)
        {
          v34 = *(_QWORD *)(a1 + 16);
          v35 = (*(_DWORD *)(v34 + 4 * v27) >> 10 << ((*(_DWORD *)(v34 + 4 * v27) >> 6) & 8)) ^ v27 ^ i;
          v36 = *(_DWORD *)(v34 + 4 * v35);
          if (i == (v36 & 0x800000FF))
          {
            if ((v36 & 0x100) != 0)
              v37 = *(_DWORD *)(v34 + 4 * ((v36 >> 10 << ((v36 >> 6) & 8)) ^ v35)) & 0x7FFFFFFF;
            else
              v37 = -1;
            v41.n128_u32[0] = v32;
            v41.n128_u64[1] = v35;
            v42 = v37;
            std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::push_back(v43, &v41);
          }
        }
      }
      v23 = *((_QWORD *)&v44 + 1);
    }
    while (*((_QWORD *)&v44 + 1));
  }
  else
  {
    v24 = 0;
  }
  std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::~deque[abi:ne180100](v43);
  return v24;
}

void sub_191D1A3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::__append((void **)a1, a2 - v2);
  }
}

__n128 std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::push_back(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (__n128 *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *v8 = result;
  ++a1[5];
  return result;
}

void std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_191D1A7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 85;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 170;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<char *>::~__split_buffer((uint64_t)a1);
}

void std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

_QWORD *std::vector<std::string_view>::__init_with_size[abi:ne180100]<std::string_view*,std::string_view*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<float,unsigned long>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_191D1A9F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::~FreeList(_QWORD *a1)
{
  sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::~FreeList(a1);
  JUMPOUT(0x19401E994);
}

_QWORD *sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::~FreeList(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E2DF1300;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x19401E970](*v2, 0x1070C8005A2B047);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_191D1AC04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<sentencepiece::unigram::Lattice::Node *>>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<sentencepiece::unigram::Lattice::Node *>>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<sentencepiece::unigram::Lattice::Node *>>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<sentencepiece::unigram::Lattice::Node *>>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long>>,std::reverse_iterator<std::vector<long>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> const*,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> const*,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<sentencepiece::unigram::Lattice::Node *>::__init_with_size[abi:ne180100]<sentencepiece::unigram::Lattice::Node **,sentencepiece::unigram::Lattice::Node **>((_QWORD *)v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_191D1AE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>::operator()[abi:ne180100](a1);
  return a1;
}

void sentencepiece::model::FreeList<sentencepiece::unigram::`anonymous namespace'::Hypothesis>::~FreeList(_QWORD *a1)
{
  JUMPOUT(0x19401E994);
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,sentencepiece::unigram::Lattice::NBest(unsigned long,BOOL,float)::HypothesisComparator &,std::__wrap_iter<sentencepiece::unigram::`anonymous namespace'::Hypothesis **>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  _QWORD *v10;

  if (a3 >= 2)
  {
    v3 = (unint64_t)(a3 - 2) >> 1;
    v4 = (_QWORD *)(result + 8 * v3);
    v5 = *v4;
    v8 = *(_QWORD *)(a2 - 8);
    v6 = (_QWORD *)(a2 - 8);
    v7 = v8;
    v9 = *(float *)(v8 + 16);
    if (*(float *)(*v4 + 16) < v9)
    {
      do
      {
        v10 = v4;
        *v6 = v5;
        if (!v3)
          break;
        v3 = (v3 - 1) >> 1;
        v4 = (_QWORD *)(result + 8 * v3);
        v5 = *v4;
        v6 = v10;
      }
      while (*(float *)(*v4 + 16) < v9);
      *v10 = v7;
    }
  }
  return result;
}

uint64_t std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD v19[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      v14 = 32 * a2;
      v15 = v7 + 32 * a2;
      do
      {
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        v7 += 32;
        v14 -= 32;
      }
      while (v14);
      v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - *a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v19[4] = result;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>>(result, v12);
    else
      v13 = 0;
    v16 = &v13[32 * v10];
    v19[0] = v13;
    v19[1] = v16;
    v19[3] = &v13[32 * v12];
    v17 = 32 * a2;
    v18 = &v16[32 * a2];
    do
    {
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_DWORD *)v16 + 6) = 0;
      *((_QWORD *)v16 + 2) = 0;
      v16 += 32;
      v17 -= 32;
    }
    while (v17);
    v19[2] = v18;
    std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::__swap_out_circular_buffer(a1, v19);
    return std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v19);
  }
  return result;
}

void sub_191D1AFDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_191D1B1A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<std::string_view,int>>&,float const&>(uint64_t a1, __int128 **a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>((char *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_191D1B228(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,float const&>(uint64_t *a1, __int128 **a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>>(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_191D1B328(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,double>(uint64_t *a1, __int128 **a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  float v14;
  uint64_t v15;
  _QWORD v17[2];
  char *v18;
  char *v19;
  uint64_t *v20;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v20 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>>(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v17[0] = v12;
  v17[1] = v13;
  v18 = v13;
  v19 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v14 = *a3;
  *((float *)v13 + 6) = v14;
  v18 += 32;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_191D1B588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_191D1B628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__find_impl[abi:ne180100]<std::vector<sentencepiece::unigram::Lattice::Node *> *,std::vector<sentencepiece::unigram::Lattice::Node *> *,std::vector<sentencepiece::unigram::Lattice::Node *>,std::__identity>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const void *v5;
  size_t v6;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *(const void **)a3;
    v6 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    while (*(_QWORD *)(v3 + 8) - *(_QWORD *)v3 != v6 || memcmp(*(const void **)v3, v5, v6))
    {
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

std::vector<int> *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,0>(std::vector<int> *__c, std::vector<int> *a2, std::vector<int> *this)
{
  __n128 *v4;
  std::vector<int> *v5;

  v4 = (__n128 *)__c;
  if (__c == a2)
    return __c;
  v5 = a2;
  do
  {
    std::vector<int>::__move_assign((uint64_t)this, v4);
    LODWORD(this[1].__begin_) = v4[1].n128_u32[2];
    this = (std::vector<int> *)((char *)this + 32);
    v4 += 2;
  }
  while (v4 != (__n128 *)v5);
  return v5;
}

uint64_t std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,float>(uint64_t *a1, __int128 **a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<BOOL ()(mecab_node_t const*,mecab_node_t const*,long)>>>(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_191D1B808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

sentencepiece::character::Model *sentencepiece::character::Model::Model(sentencepiece::character::Model *this, const sentencepiece::ModelProto *a2)
{
  sentencepiece::ModelInterface *v4;

  v4 = sentencepiece::ModelInterface::ModelInterface(this);
  *(_QWORD *)v4 = &off_1E2DF1450;
  *((_QWORD *)v4 + 1) = (char *)a2 + 16;
  sentencepiece::ModelInterface::InitializePieces(v4);
  return this;
}

void sub_191D1B858(_Unwind_Exception *a1)
{
  sentencepiece::ModelInterface *v1;

  sentencepiece::ModelInterface::~ModelInterface(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::character::Model::~Model(sentencepiece::character::Model *this)
{
  sentencepiece::ModelInterface::~ModelInterface(this);
  JUMPOUT(0x19401E994);
}

void sentencepiece::character::Model::Encode(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  uint64_t v8;
  int v9;
  int v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 16))(&v25);
  if (v25)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v25);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v25);
  if (!a3)
    goto LABEL_3;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  do
  {
    v8 = (int)sentencepiece::normalizer::PrefixMatcher::PrefixMatch(a1[2], a2, a3, 0);
    v9 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(*a1 + 112))(a1, a2, v8);
    v10 = v9;
    v12 = (char *)a4[1];
    v11 = (char *)a4[2];
    if (v12 >= v11)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (_BYTE *)*a4) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)*a4) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a4 + 2), v17);
      v20 = &v18[24 * v14];
      *(_QWORD *)v20 = a2;
      *((_QWORD *)v20 + 1) = v8;
      *((_DWORD *)v20 + 4) = v10;
      v22 = (char *)*a4;
      v21 = (char *)a4[1];
      v23 = v20;
      if (v21 != *a4)
      {
        do
        {
          v24 = *(_OWORD *)(v21 - 24);
          *((_QWORD *)v23 - 1) = *((_QWORD *)v21 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v23 -= 24;
          v21 -= 24;
        }
        while (v21 != v22);
        v21 = (char *)*a4;
      }
      v13 = v20 + 24;
      *a4 = v23;
      a4[1] = v20 + 24;
      a4[2] = &v18[24 * v19];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_QWORD *)v12 = a2;
      *((_QWORD *)v12 + 1) = v8;
      v13 = v12 + 24;
      *((_DWORD *)v12 + 4) = v9;
    }
    a4[1] = v13;
    a2 += v8;
    a3 -= v8;
  }
  while (a3);
}

void sub_191D1BA58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

sentencepiece::word::Model *sentencepiece::word::Model::Model(sentencepiece::word::Model *this, const sentencepiece::ModelProto *a2)
{
  sentencepiece::ModelInterface *v4;

  v4 = sentencepiece::ModelInterface::ModelInterface(this);
  *(_QWORD *)v4 = &off_1E2DF11F0;
  *((_QWORD *)v4 + 1) = (char *)a2 + 16;
  sentencepiece::ModelInterface::InitializePieces(v4);
  return this;
}

void sub_191D1BAB8(_Unwind_Exception *a1)
{
  sentencepiece::ModelInterface *v1;

  sentencepiece::ModelInterface::~ModelInterface(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::word::Model::~Model(sentencepiece::word::Model *this)
{
  sentencepiece::ModelInterface::~ModelInterface(this);
  JUMPOUT(0x19401E994);
}

void sentencepiece::word::Model::Encode(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  int v10;
  int v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  unsigned __int8 **v26;
  unsigned __int8 **v27;

  (*(void (**)(unsigned __int8 ***__return_ptr))(*(_QWORD *)a1 + 16))(&v26);
  if (v26)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v26);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v26);
  if (!a3)
    goto LABEL_3;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sentencepiece::SplitIntoWords(a2, a3, 0, 0, &v26);
  v8 = v26;
  v9 = v27;
  if (v26 != v27)
  {
    do
    {
      v10 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, unsigned __int8 *))(*(_QWORD *)a1 + 112))(a1, *v8, v8[1]);
      v11 = v10;
      v13 = (char *)a4[1];
      v12 = (char *)a4[2];
      if (v13 >= v12)
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (_BYTE *)*a4) >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
        v17 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (_BYTE *)*a4) >> 3);
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v16;
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a4 + 2), v18);
        v21 = &v19[24 * v15];
        *(_OWORD *)v21 = *(_OWORD *)v8;
        *((_DWORD *)v21 + 4) = v11;
        v23 = (char *)*a4;
        v22 = (char *)a4[1];
        v24 = v21;
        if (v22 != *a4)
        {
          do
          {
            v25 = *(_OWORD *)(v22 - 24);
            *((_QWORD *)v24 - 1) = *((_QWORD *)v22 - 1);
            *(_OWORD *)(v24 - 24) = v25;
            v24 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          v22 = (char *)*a4;
        }
        v14 = v21 + 24;
        *a4 = v24;
        a4[1] = v21 + 24;
        a4[2] = &v19[24 * v20];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_OWORD *)v13 = *(_OWORD *)v8;
        *((_DWORD *)v13 + 4) = v10;
        v14 = v13 + 24;
      }
      a4[1] = v14;
      v8 += 2;
    }
    while (v8 != v9);
    v8 = v26;
  }
  if (v8)
  {
    v27 = v8;
    operator delete(v8);
  }
}

void sub_191D1BCDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void InitDefaultsscc_info_NBestSentencePieceText_sentencepiece_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", a4);
  sentencepiece::NBestSentencePieceText::NBestSentencePieceText((uint64_t)&sentencepiece::_NBestSentencePieceText_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_NBestSentencePieceText_default_instance_, v4);
}

void InitDefaultsscc_info_SentencePieceText_sentencepiece_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", a4);
  sentencepiece::SentencePieceText::SentencePieceText((uint64_t)&sentencepiece::_SentencePieceText_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_SentencePieceText_default_instance_, v4);
}

void InitDefaultsscc_info_SentencePieceText_SentencePiece_sentencepiece_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", a4);
  sentencepiece::SentencePieceText_SentencePiece::SentencePieceText_SentencePiece((uint64_t)&sentencepiece::_SentencePieceText_SentencePiece_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_SentencePieceText_SentencePiece_default_instance_, v4);
}

uint64_t sentencepiece::SentencePieceText_SentencePiece::SentencePieceText_SentencePiece(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E2DF1060;
  *(_QWORD *)(a1 + 8) = a2;
  google::protobuf::internal::ExtensionSet::ExtensionSet(a1 + 16, a2);
  *(_QWORD *)(a1 + 40) = 0;
  if (atomic_load(scc_info_SentencePieceText_SentencePiece_sentencepiece_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SentencePieceText_SentencePiece_sentencepiece_2eproto);
  *(_QWORD *)(a1 + 48) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(a1 + 56) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_191D1BE78(_Unwind_Exception *a1)
{
  google::protobuf::internal::ExtensionSet *v1;

  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceText_SentencePiece::~SentencePieceText_SentencePiece(sentencepiece::SentencePieceText_SentencePiece *this)
{
  sentencepiece::SentencePieceText_SentencePiece::SharedDtor(this);
  google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16));
}

{
  sentencepiece::SentencePieceText_SentencePiece::~SentencePieceText_SentencePiece(this);
  JUMPOUT(0x19401E994);
}

google::protobuf::internal::ArenaStringPtr *sentencepiece::SentencePieceText_SentencePiece::SharedDtor(sentencepiece::SentencePieceText_SentencePiece *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  google::protobuf::internal::ArenaStringPtr *result;
  uint64_t v6;
  uint64_t v7;
  google::protobuf::internal::ArenaStringPtr *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  std::string v13[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 140);
    v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  result = (sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 48);
  if (*((uint64_t **)this + 6) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v6 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(result);
    v7 = v6;
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    result = (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x19401E994](v7, 0x1012C40EC159624);
  }
  v9 = (uint64_t *)*((_QWORD *)this + 7);
  v8 = (sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 56);
  if (v9 != &google::protobuf::internal::fixed_address_empty_string)
  {
    v10 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(v8);
    v11 = v10;
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    return (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x19401E994](v11, 0x1012C40EC159624);
  }
  return result;
}

void sub_191D1BFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *google::protobuf::internal::InternalMetadata::Delete<std::string>(uint64_t *result)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *result;
  if ((*result & 1) != 0)
  {
    v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    if (!*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFFELL) && v2 != 0)
    {
      if (*(char *)(v2 + 31) < 0)
        operator delete(*(void **)(v2 + 8));
      JUMPOUT(0x19401E994);
    }
  }
  return result;
}

void sentencepiece::SentencePieceText_SentencePiece::Clear(sentencepiece::SentencePieceText_SentencePiece *this)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16));
  v2 = *((_DWORD *)this + 10);
  if ((v2 & 3) != 0)
  {
    if ((v2 & 1) != 0)
    {
      v3 = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v3 + 23) < 0)
      {
        **(_BYTE **)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
        if ((v2 & 2) == 0)
          goto LABEL_11;
        goto LABEL_6;
      }
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
    if ((v2 & 2) == 0)
      goto LABEL_11;
LABEL_6:
    v4 = *((_QWORD *)this + 7) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
LABEL_11:
  if ((v2 & 0x1C) != 0)
  {
    *((_DWORD *)this + 18) = 0;
    *((_QWORD *)this + 8) = 0;
  }
  *((_DWORD *)this + 10) = 0;
  v5 = *((_QWORD *)this + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 31) < 0)
    {
      **(_BYTE **)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v6 + 8) = 0;
      *(_BYTE *)(v6 + 31) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::SentencePieceText_SentencePiece::_InternalParse(sentencepiece::SentencePieceText_SentencePiece *this, google::protobuf::internal *a2, int32x2_t *a3)
{
  int v5;
  _QWORD *v7;
  google::protobuf::internal *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  google::protobuf::internal::ArenaImpl *v12;
  uint64_t **v13;
  google::protobuf::internal *v14;
  const char *v15;
  int v16;
  uint64_t v17;
  std::string *v18;
  google::protobuf::internal *v19;
  google::protobuf::internal *v20;
  const char *v21;
  int v22;
  google::protobuf::internal *v23;
  const char *v24;
  int v25;
  BOOL v26;
  google::protobuf::internal *TagFallback;
  unsigned int v28;
  std::string *v29;
  google::protobuf::internal *v30;
  int v31;
  google::protobuf::internal *v32;
  int v33;
  google::protobuf::internal *v34;
  int v35;
  google::protobuf::internal *v36;

  v36 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v36, a3[11].i32[1]) & 1) == 0)
  {
    v7 = (_QWORD *)((char *)this + 8);
    while (1)
    {
      v8 = (google::protobuf::internal *)((char *)v36 + 1);
      v9 = *(unsigned __int8 *)v36;
      if (*(char *)v36 < 0)
      {
        v10 = v9 + (*(unsigned __int8 *)v8 << 7);
        v9 = v10 - 128;
        if (*(char *)v8 < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v36, (const char *)(v10 - 128));
          v36 = TagFallback;
          if (!TagFallback)
            goto LABEL_56;
          v8 = TagFallback;
          v9 = v28;
          goto LABEL_8;
        }
        v8 = (google::protobuf::internal *)((char *)v36 + 2);
      }
      v36 = v8;
LABEL_8:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10)
            goto LABEL_37;
          *((_DWORD *)this + 10) |= 1u;
          v11 = *((_QWORD *)this + 1);
          v12 = (google::protobuf::internal::ArenaImpl *)(v11 & 0xFFFFFFFFFFFFFFFELL);
          if ((v11 & 1) != 0)
            v12 = *(google::protobuf::internal::ArenaImpl **)v12;
          v13 = (uint64_t **)((char *)this + 48);
          goto LABEL_22;
        case 2u:
          if (v9 != 16)
            goto LABEL_37;
          v5 |= 4u;
          v14 = (google::protobuf::internal *)((char *)v8 + 1);
          LODWORD(v15) = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0)
            goto LABEL_17;
          v16 = *(char *)v14;
          v15 = (const char *)(v15 + (v16 << 7) - 128);
          if (v16 < 0)
          {
            v30 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow32(v8, v15);
            v36 = v30;
            *((_DWORD *)this + 16) = v31;
            if (!v30)
              goto LABEL_56;
          }
          else
          {
            v14 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_17:
            v36 = v14;
            *((_DWORD *)this + 16) = (_DWORD)v15;
          }
          goto LABEL_35;
        case 3u:
          if (v9 != 26)
            goto LABEL_37;
          *((_DWORD *)this + 10) |= 2u;
          v17 = *((_QWORD *)this + 1);
          v12 = (google::protobuf::internal::ArenaImpl *)(v17 & 0xFFFFFFFFFFFFFFFELL);
          if ((v17 & 1) != 0)
            v12 = *(google::protobuf::internal::ArenaImpl **)v12;
          v13 = (uint64_t **)((char *)this + 56);
LABEL_22:
          v18 = (std::string *)google::protobuf::internal::ArenaStringPtr::Mutable(v13, v12);
          v19 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v18, (std::string::value_type *)v36, (uint64_t)a3);
          goto LABEL_23;
        case 4u:
          if (v9 != 32)
            goto LABEL_37;
          v5 |= 8u;
          v20 = (google::protobuf::internal *)((char *)v8 + 1);
          LODWORD(v21) = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0)
            goto LABEL_29;
          v22 = *(char *)v20;
          v21 = (const char *)(v21 + (v22 << 7) - 128);
          if (v22 < 0)
          {
            v32 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow32(v8, v21);
            v36 = v32;
            *((_DWORD *)this + 17) = v33;
            if (!v32)
              goto LABEL_56;
          }
          else
          {
            v20 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_29:
            v36 = v20;
            *((_DWORD *)this + 17) = (_DWORD)v21;
          }
          goto LABEL_35;
        case 5u:
          if (v9 != 40)
            goto LABEL_37;
          v5 |= 0x10u;
          v23 = (google::protobuf::internal *)((char *)v8 + 1);
          LODWORD(v24) = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0)
            goto LABEL_34;
          v25 = *(char *)v23;
          v24 = (const char *)(v24 + (v25 << 7) - 128);
          if (v25 < 0)
          {
            v34 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow32(v8, v24);
            v36 = v34;
            *((_DWORD *)this + 18) = v35;
            if (!v34)
              goto LABEL_56;
          }
          else
          {
            v23 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_34:
            v36 = v23;
            *((_DWORD *)this + 18) = (_DWORD)v24;
          }
          goto LABEL_35;
        default:
LABEL_37:
          if (v9)
            v26 = (v9 & 7) == 4;
          else
            v26 = 1;
          if (v26)
          {
            a3[10].i32[0] = v9 - 1;
            goto LABEL_2;
          }
          if (v9 < 0x640)
          {
            if ((*v7 & 1) != 0)
            {
              v29 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else
            {
              v29 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
              v8 = v36;
            }
            v19 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, v29, v8, (google::protobuf::internal::ParseContext *)a3);
          }
          else
          {
            v19 = (google::protobuf::internal *)google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16), v9, v8, (uint64_t)&sentencepiece::_SentencePieceText_SentencePiece_default_instance_, (uint64_t *)this + 1, a3);
          }
LABEL_23:
          v36 = v19;
          if (!v19)
          {
LABEL_56:
            v36 = 0;
            goto LABEL_2;
          }
LABEL_35:
          if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v36, a3[11].i32[1]) & 1) != 0)goto LABEL_2;
          break;
      }
    }
  }
LABEL_2:
  *((_DWORD *)this + 10) |= v5;
  return v36;
}

unsigned __int8 *sentencepiece::SentencePieceText_SentencePiece::_InternalSerialize(sentencepiece::SentencePieceText_SentencePiece *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = a2;
  v6 = *((_DWORD *)this + 10);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 4) == 0)
      goto LABEL_3;
LABEL_11:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v8 = *((_DWORD *)this + 16);
    *v4 = 16;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v10 | 0x80;
          v13 = v10 >> 7;
          ++v4;
          v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        *(v4 - 1) = v13;
        if ((v6 & 2) != 0)
          goto LABEL_27;
      }
      else
      {
        v4[2] = v10;
        v4 += 3;
        if ((v6 & 2) != 0)
          goto LABEL_27;
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
      if ((v6 & 2) != 0)
        goto LABEL_27;
    }
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v6 & 4) != 0)
    goto LABEL_11;
LABEL_3:
  if ((v6 & 2) == 0)
    goto LABEL_4;
LABEL_27:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 7) & 0xFFFFFFFFFFFFFFFELL, v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_39;
    goto LABEL_6;
  }
LABEL_28:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v15 = *((_DWORD *)this + 17);
  *v4 = 32;
  if (v15 > 0x7F)
  {
    v4[1] = v15 | 0x80;
    v16 = v15 >> 7;
    if (v15 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v16 | 0x80;
        v17 = v16 >> 7;
        ++v4;
        v18 = v16 >> 14;
        v16 >>= 7;
      }
      while (v18);
      *(v4 - 1) = v17;
      if ((v6 & 0x10) == 0)
        goto LABEL_39;
    }
    else
    {
      v4[2] = v16;
      v4 += 3;
      if ((v6 & 0x10) == 0)
        goto LABEL_39;
    }
  }
  else
  {
    v4[1] = v15;
    v4 += 2;
    if ((v6 & 0x10) == 0)
      goto LABEL_39;
  }
LABEL_6:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v7 = *((_DWORD *)this + 18);
  *v4 = 40;
  if (v7 > 0x7F)
  {
    v4[1] = v7 | 0x80;
    v9 = v7 >> 7;
    if (v7 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v9 | 0x80;
        v11 = v9 >> 7;
        ++v4;
        v12 = v9 >> 14;
        v9 >>= 7;
      }
      while (v12);
      *(v4 - 1) = v11;
    }
    else
    {
      v4[2] = v9;
      v4 += 3;
    }
  }
  else
  {
    v4[1] = v7;
    v4 += 2;
  }
LABEL_39:
  v19 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16), 200, 0x20000000, (unsigned __int8 *)v4, a3);
  v20 = v19;
  v21 = *((_QWORD *)this + 1);
  if ((v21 & 1) == 0)
    return v20;
  v23 = v21 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v23 + 31) < 0)
  {
    v24 = *(void **)(v23 + 8);
    v25 = *(_QWORD *)(v23 + 16);
  }
  else
  {
    v24 = (void *)(v23 + 8);
    LODWORD(v25) = *(unsigned __int8 *)(v23 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v19 >= (int)v25)
  {
    v26 = (int)v25;
    memcpy(v19, v24, (int)v25);
    v20 += v26;
    return v20;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v24, v25, v19);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(google::protobuf::io::EpsCopyOutputStream *a1, int a2, uint64_t a3, char *a4)
{
  int64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  const void *v16;

  if (*(char *)(a3 + 23) < 0)
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (v4 > 127)
      return google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a1, a2, (void **)a3, a4);
  }
  else
  {
    v4 = *(unsigned __int8 *)(a3 + 23);
  }
  v5 = 8 * a2;
  v6 = 1;
  v7 = 2;
  v8 = 3;
  v9 = 4;
  if ((8 * a2) >> 28)
    v9 = 5;
  if (v5 >= 0x200000)
    v8 = v9;
  if (v5 >= 0x4000)
    v7 = v8;
  if (v5 >= 0x80)
    v6 = v7;
  if ((uint64_t)(*(_QWORD *)a1 + ~(unint64_t)&a4[v6] + 16) < v4)
    return google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a1, a2, (void **)a3, a4);
  v10 = v5 | 2;
  if ((v5 | 2) > 0x7F)
  {
    *a4 = v5 | 0x82;
    v12 = v5 >> 7;
    if (v10 >> 14)
    {
      v11 = (unsigned __int8 *)(a4 + 2);
      do
      {
        *(v11 - 1) = v12 | 0x80;
        v13 = v12 >> 7;
        ++v11;
        v14 = v12 >> 14;
        v12 >>= 7;
      }
      while (v14);
      *(v11 - 1) = v13;
    }
    else
    {
      a4[1] = v12;
      v11 = (unsigned __int8 *)(a4 + 2);
    }
  }
  else
  {
    *a4 = v10;
    v11 = (unsigned __int8 *)(a4 + 1);
  }
  *v11 = v4;
  v15 = (char *)(v11 + 1);
  if (*(char *)(a3 + 23) >= 0)
    v16 = (const void *)a3;
  else
    v16 = *(const void **)a3;
  memcpy(v15, v16, v4);
  return (unsigned __int8 *)&v15[v4];
}

uint64_t sentencepiece::SentencePieceText_SentencePiece::ByteSizeLong(sentencepiece::SentencePieceText_SentencePiece *this)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  result = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16));
  v3 = *((_DWORD *)this + 10);
  if ((v3 & 0x1F) == 0)
    goto LABEL_8;
  if ((v3 & 1) != 0)
  {
    v5 = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v7 = v6;
    result += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 2) == 0)
    {
LABEL_4:
      if ((v3 & 4) == 0)
        goto LABEL_5;
LABEL_16:
      result += ((9 * (__clz(*((_DWORD *)this + 16) | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v3 & 8) == 0)
      {
LABEL_6:
        if ((v3 & 0x10) == 0)
          goto LABEL_8;
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_4;
  }
  v8 = *((_QWORD *)this + 7) & 0xFFFFFFFFFFFFFFFELL;
  v9 = *(unsigned __int8 *)(v8 + 23);
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  result += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 4) != 0)
    goto LABEL_16;
LABEL_5:
  if ((v3 & 8) == 0)
    goto LABEL_6;
LABEL_17:
  result += ((9 * (__clz(*((_DWORD *)this + 17) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 0x10) != 0)
LABEL_7:
    result += ((9 * (__clz(*((_DWORD *)this + 18) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v4 = *((_QWORD *)this + 1);
  if ((v4 & 1) != 0)
  {
    v11 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0)
      v12 = *(_QWORD *)(v11 + 16);
    else
      v12 = *(unsigned __int8 *)(v11 + 31);
    result += v12;
  }
  *((_DWORD *)this + 11) = result;
  return result;
}

void sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom(sentencepiece::SentencePieceText_SentencePiece *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::SentencePieceText_SentencePiece *__hidden))a2 != &off_1E2DF1060)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::SentencePieceText_SentencePiece::MergeFrom(this, a2);
}

void sentencepiece::SentencePieceText_SentencePiece::MergeFrom(sentencepiece::SentencePieceText_SentencePiece *this, const sentencepiece::SentencePieceText_SentencePiece *a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  google::protobuf::internal::ArenaImpl *v16;
  __int128 *v17;
  uint64_t v18;
  google::protobuf::internal::ArenaImpl *v19;
  char v20;
  std::string v21[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 375);
    v4 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16), (const sentencepiece::SentencePieceText_SentencePiece *)((char *)a2 + 16));
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  v13 = *((_DWORD *)a2 + 10);
  if ((v13 & 0x1F) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 10) |= 1u;
      v15 = *((_QWORD *)this + 1);
      v16 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = *(google::protobuf::internal::ArenaImpl **)v16;
      google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 48), v14, v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0)
          goto LABEL_17;
        goto LABEL_28;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    v17 = (__int128 *)(*((_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 10) |= 2u;
    v18 = *((_QWORD *)this + 1);
    v19 = (google::protobuf::internal::ArenaImpl *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if ((v18 & 1) != 0)
      v19 = *(google::protobuf::internal::ArenaImpl **)v19;
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 56), v17, v19);
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0)
        goto LABEL_18;
      goto LABEL_29;
    }
LABEL_28:
    *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
    if ((v13 & 8) == 0)
    {
LABEL_18:
      if ((v13 & 0x10) == 0)
      {
LABEL_20:
        *((_DWORD *)this + 10) |= v13;
        return;
      }
LABEL_19:
      *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
      goto LABEL_20;
    }
LABEL_29:
    *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
    if ((v13 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
}

void sub_191D1CB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceText_SentencePiece::IsInitialized(sentencepiece::SentencePieceText_SentencePiece *this)
{
  return google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16));
}

uint64_t *sentencepiece::SentencePieceText_SentencePiece::InternalSwap(sentencepiece::SentencePieceText_SentencePiece *this, sentencepiece::SentencePieceText_SentencePiece *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  google::protobuf::internal::ArenaImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  google::protobuf::internal::ArenaImpl *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *result;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  google::protobuf::internal::ExtensionSet::Swap((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16), (sentencepiece::SentencePieceText_SentencePiece *)((char *)a2 + 16));
  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      v10 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)a2 + 1);
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
LABEL_21:
      v11 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    v7 = 0;
    v8 = *((_DWORD *)this + 10);
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v8;
    v9 = (google::protobuf::internal::ArenaImpl *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_9;
  }
  v10 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
  if ((v4 & 1) == 0)
    goto LABEL_21;
LABEL_6:
  v11 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
LABEL_7:
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(_OWORD *)v11;
  v14 = *(_QWORD *)(v10 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v10;
  *(_QWORD *)(v11 + 16) = v14;
  *(_OWORD *)v10 = v13;
  *(_QWORD *)(v10 + 16) = v12;
  v15 = *((_QWORD *)this + 1);
  LODWORD(v14) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v14;
  v9 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
  if ((v15 & 1) != 0)
  {
    v16 = *(google::protobuf::internal::ArenaImpl **)v9;
    v7 = 1;
    goto LABEL_10;
  }
  v7 = 0;
LABEL_9:
  v16 = v9;
LABEL_10:
  if (*((uint64_t **)this + 6) != &google::protobuf::internal::fixed_address_empty_string
    || *((uint64_t **)a2 + 6) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v17 = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)this + 6, v16);
    v18 = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)a2 + 6, v16);
    v19 = v17[2];
    v20 = *(_OWORD *)v17;
    v21 = v18[2];
    *(_OWORD *)v17 = *(_OWORD *)v18;
    v17[2] = v21;
    *(_OWORD *)v18 = v20;
    v18[2] = v19;
    v7 = *v5 & 1;
    v9 = (google::protobuf::internal::ArenaImpl *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  result = (uint64_t *)((char *)this + 56);
  if (v7)
    v9 = *(google::protobuf::internal::ArenaImpl **)v9;
  if ((uint64_t *)*result != &google::protobuf::internal::fixed_address_empty_string
    || *((uint64_t **)a2 + 7) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v23 = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)result, v9);
    result = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)a2 + 7, v9);
    v24 = v23[2];
    v25 = *(_OWORD *)v23;
    v26 = result[2];
    *(_OWORD *)v23 = *(_OWORD *)result;
    v23[2] = v26;
    *(_OWORD *)result = v25;
    result[2] = v24;
  }
  v27 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v27;
  LODWORD(v27) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v27;
  return result;
}

_QWORD *sentencepiece::SentencePieceText_SentencePiece::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.SentencePieceText.SentencePiece");
}

uint64_t sentencepiece::SentencePieceText::SentencePieceText(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E2DF0AB8;
  *(_QWORD *)(a1 + 8) = a2;
  google::protobuf::internal::ExtensionSet::ExtensionSet(a1 + 16, a2);
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (atomic_load(scc_info_SentencePieceText_sentencepiece_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SentencePieceText_sentencepiece_2eproto);
  *(_QWORD *)(a1 + 72) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(a1 + 80) = 0;
  return a1;
}

void sub_191D1CDE0(_Unwind_Exception *a1)
{
  google::protobuf::internal::ExtensionSet *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;

  google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField(v2);
  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceText::~SentencePieceText(sentencepiece::SentencePieceText *this)
{
  sentencepiece::SentencePieceText::SharedDtor(this);
  google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1);
  google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((sentencepiece::SentencePieceText *)((char *)this + 48));
  google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::SentencePieceText *)((char *)this + 16));
}

{
  sentencepiece::SentencePieceText::~SentencePieceText(this);
  JUMPOUT(0x19401E994);
}

void sentencepiece::SentencePieceText::SharedDtor(sentencepiece::SentencePieceText *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  google::protobuf::internal::ArenaStringPtr *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  std::string v10[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 486);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  v6 = (uint64_t *)*((_QWORD *)this + 9);
  v5 = (sentencepiece::SentencePieceText *)((char *)this + 72);
  if (v6 != &google::protobuf::internal::fixed_address_empty_string)
  {
    v7 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(v5);
    v8 = v7;
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    MEMORY[0x19401E994](v8, 0x1012C40EC159624);
  }
}

void sub_191D1CF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *sentencepiece::SentencePieceText::default_instance(sentencepiece::SentencePieceText *this)
{
  if (atomic_load(scc_info_SentencePieceText_sentencepiece_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SentencePieceText_sentencepiece_2eproto);
  return &sentencepiece::_SentencePieceText_default_instance_;
}

void sentencepiece::SentencePieceText::Clear(sentencepiece::SentencePieceText *this)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::SentencePieceText *)((char *)this + 16));
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t)this + 48);
  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    v2 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  *((_DWORD *)this + 20) = 0;
  *((_DWORD *)this + 10) = 0;
  v3 = *((_QWORD *)this + 1);
  if ((v3 & 1) != 0)
  {
    v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 31) < 0)
    {
      **(_BYTE **)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v4 + 8) = 0;
      *(_BYTE *)(v4 + 31) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::SentencePieceText::_InternalParse(sentencepiece::SentencePieceText *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  int v5;
  _QWORD *v7;
  google::protobuf::internal *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v13;
  google::protobuf::internal *v14;
  char *v15;
  google::protobuf::internal *v16;
  int *v17;
  uint64_t v18;
  int v19;
  sentencepiece::SentencePieceText_SentencePiece *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  google::protobuf::internal::ArenaImpl *v24;
  std::string *v25;
  google::protobuf::internal *TagFallback;
  unsigned int v27;
  std::string *v28;
  google::protobuf::internal *v29;

  v29 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v29, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    v7 = (_QWORD *)((char *)this + 8);
    while (1)
    {
      v8 = (google::protobuf::internal *)((char *)v29 + 1);
      v9 = *(unsigned __int8 *)v29;
      if ((*(char *)v29 & 0x80000000) == 0)
        goto LABEL_7;
      v10 = v9 + (*(unsigned __int8 *)v8 << 7);
      v9 = v10 - 128;
      if ((*(char *)v8 & 0x80000000) == 0)
        break;
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v29, (const char *)(v10 - 128));
      v29 = TagFallback;
      if (!TagFallback)
        goto LABEL_48;
      v8 = TagFallback;
      v9 = v27;
LABEL_8:
      v11 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 29)
        {
          v5 |= 2u;
          *((_DWORD *)this + 20) = *(_DWORD *)v8;
          v29 = (google::protobuf::internal *)((char *)v8 + 4);
          goto LABEL_44;
        }
        goto LABEL_14;
      }
      if (v11 == 2)
      {
        if (v9 == 18)
        {
          v15 = (char *)v8 - 1;
          while (1)
          {
            v16 = (google::protobuf::internal *)(v15 + 1);
            v29 = (google::protobuf::internal *)(v15 + 1);
            v17 = (int *)*((_QWORD *)this + 8);
            if (!v17)
              break;
            v18 = *((int *)this + 14);
            v19 = *v17;
            if ((int)v18 >= *v17)
            {
              if (v19 == *((_DWORD *)this + 15))
              {
LABEL_29:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 12, v19 + 1);
                v17 = (int *)*((_QWORD *)this + 8);
                v19 = *v17;
              }
              *v17 = v19 + 1;
              v20 = (sentencepiece::SentencePieceText_SentencePiece *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*((_QWORD *)this + 6));
              v21 = *((_QWORD *)this + 8);
              v22 = *((int *)this + 14);
              *((_DWORD *)this + 14) = v22 + 1;
              *(_QWORD *)(v21 + 8 * v22 + 8) = v20;
              v16 = v29;
              goto LABEL_31;
            }
            *((_DWORD *)this + 14) = v18 + 1;
            v20 = *(sentencepiece::SentencePieceText_SentencePiece **)&v17[2 * v18 + 2];
LABEL_31:
            v15 = google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SentencePieceText_SentencePiece>(a3, v20, v16);
            v29 = (google::protobuf::internal *)v15;
            if (!v15)
              goto LABEL_48;
            if (*(_QWORD *)a3 <= (unint64_t)v15 || *v15 != 18)
              goto LABEL_44;
          }
          v19 = *((_DWORD *)this + 15);
          goto LABEL_29;
        }
LABEL_14:
        if (v9)
          v13 = (v9 & 7) == 4;
        else
          v13 = 1;
        if (v13)
        {
          *((_DWORD *)a3 + 20) = v9 - 1;
          goto LABEL_2;
        }
        if (v9 < 0x640)
        {
          if ((*v7 & 1) != 0)
          {
            v28 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            v28 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
            v8 = v29;
          }
          v14 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, v28, v8, a3);
        }
        else
        {
          v14 = (google::protobuf::internal *)google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::SentencePieceText *)((char *)this + 16), v9, v8, (uint64_t)&sentencepiece::_SentencePieceText_default_instance_, (uint64_t *)this + 1, (int32x2_t *)a3);
        }
        goto LABEL_43;
      }
      if (v11 != 1 || v9 != 10)
        goto LABEL_14;
      *((_DWORD *)this + 10) |= 1u;
      v23 = *((_QWORD *)this + 1);
      v24 = (google::protobuf::internal::ArenaImpl *)(v23 & 0xFFFFFFFFFFFFFFFELL);
      if ((v23 & 1) != 0)
        v24 = *(google::protobuf::internal::ArenaImpl **)v24;
      v25 = (std::string *)google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)this + 9, v24);
      v14 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v25, (std::string::value_type *)v29, (uint64_t)a3);
LABEL_43:
      v29 = v14;
      if (!v14)
      {
LABEL_48:
        v29 = 0;
        goto LABEL_2;
      }
LABEL_44:
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v29, *((_DWORD *)a3 + 23)) & 1) != 0)
        goto LABEL_2;
    }
    v8 = (google::protobuf::internal *)((char *)v29 + 2);
LABEL_7:
    v29 = v8;
    goto LABEL_8;
  }
LABEL_2:
  *((_DWORD *)this + 10) |= v5;
  return v29;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SentencePieceText_SentencePiece>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::SentencePieceText_SentencePiece *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)sentencepiece::SentencePieceText_SentencePiece::_InternalParse(a2, (google::protobuf::internal *)v8, (int32x2_t *)this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

unsigned __int8 *sentencepiece::SentencePieceText::_InternalSerialize(sentencepiece::SentencePieceText *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  sentencepiece::SentencePieceText_SentencePiece *v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a2;
  v6 = *((_DWORD *)this + 10);
  if ((v6 & 1) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFFFFELL, a2);
  v7 = *((_DWORD *)this + 14);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if (*(_QWORD *)a3 <= (unint64_t)v4)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v9 = (sentencepiece::SentencePieceText_SentencePiece *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t)this + 48, i);
      *v4 = 18;
      v10 = *((_DWORD *)v9 + 11);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 >> 14)
        {
          v11 = v4 + 3;
          do
          {
            *(v11 - 1) = v12 | 0x80;
            v13 = v12 >> 7;
            ++v11;
            v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - 1) = v13;
        }
        else
        {
          v4[2] = v12;
          v11 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v10;
        v11 = v4 + 2;
      }
      v4 = (char *)sentencepiece::SentencePieceText_SentencePiece::_InternalSerialize(v9, v11, a3);
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v15 = *((_DWORD *)this + 20);
    *v4 = 29;
    *(_DWORD *)(v4 + 1) = v15;
    v4 += 5;
  }
  v16 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::SentencePieceText *)((char *)this + 16), 200, 0x20000000, (unsigned __int8 *)v4, a3);
  v17 = v16;
  v18 = *((_QWORD *)this + 1);
  if ((v18 & 1) == 0)
    return v17;
  v20 = v18 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v20 + 31) < 0)
  {
    v21 = *(void **)(v20 + 8);
    v22 = *(_QWORD *)(v20 + 16);
  }
  else
  {
    v21 = (void *)(v20 + 8);
    LODWORD(v22) = *(unsigned __int8 *)(v20 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v16 >= (int)v22)
  {
    v23 = (int)v22;
    memcpy(v16, v21, (int)v22);
    v17 += v23;
    return v17;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v21, v22, v16);
}

uint64_t sentencepiece::SentencePieceText::ByteSizeLong(sentencepiece::SentencePieceText *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sentencepiece::SentencePieceText_SentencePiece **v6;
  uint64_t v7;
  sentencepiece::SentencePieceText_SentencePiece *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;

  v2 = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::SentencePieceText *)((char *)this + 16));
  v3 = *((int *)this + 14);
  v4 = v2 + v3;
  v5 = *((_QWORD *)this + 8);
  if (v5)
    v6 = (sentencepiece::SentencePieceText_SentencePiece **)(v5 + 8);
  else
    v6 = 0;
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      v9 = sentencepiece::SentencePieceText_SentencePiece::ByteSizeLong(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  v10 = *((_DWORD *)this + 10);
  if ((v10 & 3) != 0)
  {
    if ((v10 & 1) != 0)
    {
      v11 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFFFFELL;
      v12 = *(unsigned __int8 *)(v11 + 23);
      v13 = *(_QWORD *)(v11 + 8);
      if ((v12 & 0x80u) == 0)
        v13 = v12;
      v4 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v10 & 2) != 0)
      v4 += 5;
  }
  v14 = *((_QWORD *)this + 1);
  if ((v14 & 1) != 0)
  {
    v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v16 + 31) < 0)
      v17 = *(_QWORD *)(v16 + 16);
    else
      v17 = *(unsigned __int8 *)(v16 + 31);
    v4 += v17;
  }
  *((_DWORD *)this + 11) = v4;
  return v4;
}

void sentencepiece::SentencePieceText::CheckTypeAndMergeFrom(sentencepiece::SentencePieceText *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::SentencePieceText *__hidden))a2 != &off_1E2DF0AB8)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::SentencePieceText::MergeFrom(this, a2);
}

void sentencepiece::SentencePieceText::MergeFrom(sentencepiece::SentencePieceText *this, const sentencepiece::SentencePieceText *a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  google::protobuf::internal::ArenaImpl *v16;
  char v17;
  std::string v18[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 674);
    v4 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::SentencePieceText *)((char *)this + 16), (const sentencepiece::SentencePieceText *)((char *)a2 + 16));
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t)this + 48, (uint64_t)a2 + 48);
  v13 = *((_DWORD *)a2 + 10);
  if ((v13 & 3) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 10) |= 1u;
      v15 = *((_QWORD *)this + 1);
      v16 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = *(google::protobuf::internal::ArenaImpl **)v16;
      google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::SentencePieceText *)((char *)this + 72), v14, v16);
    }
    if ((v13 & 2) != 0)
      *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
    *((_DWORD *)this + 10) |= v13;
  }
}

void sub_191D1D7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceText::IsInitialized(sentencepiece::SentencePieceText *this)
{
  uint64_t result;

  result = google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::SentencePieceText *)((char *)this + 16));
  if ((_DWORD)result)
    return google::protobuf::internal::AllAreInitialized<sentencepiece::SentencePieceText_SentencePiece>((uint64_t)this + 48);
  return result;
}

BOOL google::protobuf::internal::AllAreInitialized<sentencepiece::SentencePieceText_SentencePiece>(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(a1, v2);
  }
  while ((google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v5 + 16)) & 1) != 0);
  return v3 < 1;
}

_QWORD *sentencepiece::SentencePieceText::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.SentencePieceText");
}

uint64_t sentencepiece::NBestSentencePieceText::NBestSentencePieceText(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E2DF0C70;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if (atomic_load(scc_info_NBestSentencePieceText_sentencepiece_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_NBestSentencePieceText_sentencepiece_2eproto);
  return a1;
}

void sub_191D1D8D0(_Unwind_Exception *a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase *v1;

  google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::~RepeatedPtrField(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::NBestSentencePieceText::~NBestSentencePieceText(sentencepiece::NBestSentencePieceText *this)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v3 = (uint64_t *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  v4 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) != 0)
  {
    if (!*v4)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v4)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 755);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  google::protobuf::internal::InternalMetadata::Delete<std::string>(v3);
  google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::~RepeatedPtrField((sentencepiece::NBestSentencePieceText *)((char *)this + 16));
}

{
  sentencepiece::NBestSentencePieceText::~NBestSentencePieceText(this);
  JUMPOUT(0x19401E994);
}

void sub_191D1D97C(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  __clang_call_terminate(a1);
}

void sentencepiece::NBestSentencePieceText::Clear(sentencepiece::NBestSentencePieceText *this)
{
  uint64_t v2;
  unint64_t v3;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>((uint64_t)this + 16);
  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 31) < 0)
    {
      **(_BYTE **)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v3 + 8) = 0;
      *(_BYTE *)(v3 + 31) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::NBestSentencePieceText::_InternalParse(sentencepiece::NBestSentencePieceText *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  _QWORD *v5;
  google::protobuf::internal *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  std::string *v10;
  char *v11;
  google::protobuf::internal *v12;
  int *v13;
  uint64_t v14;
  int v15;
  sentencepiece::SentencePieceText *v16;
  uint64_t v17;
  uint64_t v18;
  google::protobuf::internal *TagFallback;
  unsigned int v20;
  google::protobuf::internal *v22;

  v22 = a2;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v22, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    v5 = (_QWORD *)((char *)this + 8);
    while (1)
    {
      v6 = (google::protobuf::internal *)((char *)v22 + 1);
      v7 = *(unsigned __int8 *)v22;
      if ((*(char *)v22 & 0x80000000) == 0)
        goto LABEL_6;
      v8 = v7 + (*(unsigned __int8 *)v6 << 7);
      v7 = v8 - 128;
      if ((*(char *)v6 & 0x80000000) == 0)
        break;
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v22, (const char *)(v8 - 128));
      v22 = TagFallback;
      if (!TagFallback)
        return 0;
      v6 = TagFallback;
      v7 = v20;
LABEL_7:
      if (v7 == 10)
      {
        v11 = (char *)v6 - 1;
        while (1)
        {
          v12 = (google::protobuf::internal *)(v11 + 1);
          v22 = (google::protobuf::internal *)(v11 + 1);
          v13 = (int *)*((_QWORD *)this + 4);
          if (!v13)
            break;
          v14 = *((int *)this + 6);
          v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *((_DWORD *)this + 7))
            {
LABEL_22:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 4, v15 + 1);
              v13 = (int *)*((_QWORD *)this + 4);
              v15 = *v13;
            }
            *v13 = v15 + 1;
            v16 = (sentencepiece::SentencePieceText *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(*((_QWORD *)this + 2));
            v17 = *((_QWORD *)this + 4);
            v18 = *((int *)this + 6);
            *((_DWORD *)this + 6) = v18 + 1;
            *(_QWORD *)(v17 + 8 * v18 + 8) = v16;
            v12 = v22;
            goto LABEL_24;
          }
          *((_DWORD *)this + 6) = v14 + 1;
          v16 = *(sentencepiece::SentencePieceText **)&v13[2 * v14 + 2];
LABEL_24:
          v11 = google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SentencePieceText>(a3, v16, v12);
          v22 = (google::protobuf::internal *)v11;
          if (!v11)
            return 0;
          if (*(_QWORD *)a3 <= (unint64_t)v11 || *v11 != 10)
            goto LABEL_27;
        }
        v15 = *((_DWORD *)this + 7);
        goto LABEL_22;
      }
      if (v7)
        v9 = (v7 & 7) == 4;
      else
        v9 = 1;
      if (v9)
      {
        *((_DWORD *)a3 + 20) = v7 - 1;
        return v22;
      }
      if ((*v5 & 1) != 0)
      {
        v10 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v10 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
        v6 = v22;
      }
      v22 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v7, v10, v6, a3);
      if (!v22)
        return 0;
LABEL_27:
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v22, *((_DWORD *)a3 + 23)))return v22;
    }
    v6 = (google::protobuf::internal *)((char *)v22 + 2);
LABEL_6:
    v22 = v6;
    goto LABEL_7;
  }
  return v22;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SentencePieceText>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::SentencePieceText *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)sentencepiece::SentencePieceText::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

unsigned __int8 *sentencepiece::NBestSentencePieceText::_InternalSerialize(sentencepiece::NBestSentencePieceText *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6;
  int i;
  sentencepiece::SentencePieceText *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *((_DWORD *)this + 6);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v8 = (sentencepiece::SentencePieceText *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>((uint64_t)this + 16, i);
      *a2 = 10;
      v9 = *((_DWORD *)v8 + 11);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v10 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v10 - 1) = v11 | 0x80;
            v12 = v11 >> 7;
            ++v10;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          v10 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v9;
        v10 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)sentencepiece::SentencePieceText::_InternalSerialize(v8, (char *)v10, a3);
    }
  }
  v14 = *((_QWORD *)this + 1);
  if ((v14 & 1) == 0)
    return (unsigned __int8 *)a2;
  v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 31) < 0)
  {
    v17 = *(void **)(v16 + 8);
    v18 = *(_QWORD *)(v16 + 16);
  }
  else
  {
    v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)a2 >= (int)v18)
  {
    v19 = (int)v18;
    memcpy(a2, v17, (int)v18);
    a2 += v19;
    return (unsigned __int8 *)a2;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v17, v18, (unsigned __int8 *)a2);
}

uint64_t sentencepiece::NBestSentencePieceText::ByteSizeLong(sentencepiece::NBestSentencePieceText *this)
{
  uint64_t v2;
  uint64_t v3;
  sentencepiece::SentencePieceText **v4;
  uint64_t v5;
  sentencepiece::SentencePieceText *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;

  v2 = *((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (sentencepiece::SentencePieceText **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = sentencepiece::SentencePieceText::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((_QWORD *)this + 1);
  if ((v8 & 1) != 0)
  {
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0)
      v11 = *(_QWORD *)(v10 + 16);
    else
      v11 = *(unsigned __int8 *)(v10 + 31);
    v2 += v11;
  }
  *((_DWORD *)this + 10) = v2;
  return v2;
}

void sentencepiece::NBestSentencePieceText::CheckTypeAndMergeFrom(sentencepiece::NBestSentencePieceText *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::NBestSentencePieceText *__hidden))a2 != &off_1E2DF0C70)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::NBestSentencePieceText::MergeFrom(this, a2);
}

void sentencepiece::NBestSentencePieceText::MergeFrom(sentencepiece::NBestSentencePieceText *this, const sentencepiece::NBestSentencePieceText *a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  char v13;
  std::string v14[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 877);
    v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>((uint64_t)this + 16, (uint64_t)a2 + 16);
}

void sub_191D1DFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL sentencepiece::NBestSentencePieceText::IsInitialized(sentencepiece::NBestSentencePieceText *this)
{
  return google::protobuf::internal::AllAreInitialized<sentencepiece::SentencePieceText>((uint64_t)this + 16);
}

BOOL google::protobuf::internal::AllAreInitialized<sentencepiece::SentencePieceText>(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(a1, v2);
    if (!google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v5 + 16)))
      break;
  }
  while (google::protobuf::internal::AllAreInitialized<sentencepiece::SentencePieceText_SentencePiece>(v5 + 48));
  return v3 < 1;
}

_QWORD *sentencepiece::NBestSentencePieceText::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.NBestSentencePieceText");
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(uint64_t a1)
{
  uint64_t AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x50uLL);
    sentencepiece::SentencePieceText_SentencePiece::SentencePieceText_SentencePiece(AlignedNoHook, a1);
  }
  else
  {
    AlignedNoHook = operator new();
    sentencepiece::SentencePieceText_SentencePiece::SentencePieceText_SentencePiece(AlignedNoHook, 0);
  }
  return AlignedNoHook;
}

void sub_191D1E0D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10A1C40E4A317A1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(uint64_t a1)
{
  uint64_t AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x58uLL);
    sentencepiece::SentencePieceText::SentencePieceText(AlignedNoHook, a1);
  }
  else
  {
    AlignedNoHook = operator new();
    sentencepiece::SentencePieceText::SentencePieceText(AlignedNoHook, 0);
  }
  return AlignedNoHook;
}

void sub_191D1E18C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10A1C40431D3885);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NBestSentencePieceText>(uint64_t a1)
{
  uint64_t AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x30uLL);
    sentencepiece::NBestSentencePieceText::NBestSentencePieceText(AlignedNoHook, a1);
  }
  else
  {
    AlignedNoHook = operator new();
    sentencepiece::NBestSentencePieceText::NBestSentencePieceText(AlignedNoHook, 0);
  }
  return AlignedNoHook;
}

void sub_191D1E240(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceText_SentencePiece::New(sentencepiece::SentencePieceText_SentencePiece *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(0);
}

uint64_t sentencepiece::SentencePieceText_SentencePiece::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(a2);
}

uint64_t sentencepiece::SentencePieceText_SentencePiece::GetCachedSize(sentencepiece::SentencePieceText_SentencePiece *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t google::protobuf::MessageLite::InternalGetTable(google::protobuf::MessageLite *this)
{
  return 0;
}

uint64_t sentencepiece::SentencePieceText::New(sentencepiece::SentencePieceText *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(0);
}

uint64_t sentencepiece::SentencePieceText::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(a2);
}

uint64_t sentencepiece::SentencePieceText::GetCachedSize(sentencepiece::SentencePieceText *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t sentencepiece::NBestSentencePieceText::New(sentencepiece::NBestSentencePieceText *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NBestSentencePieceText>(0);
}

uint64_t sentencepiece::NBestSentencePieceText::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NBestSentencePieceText>(a2);
}

uint64_t sentencepiece::NBestSentencePieceText::GetCachedSize(sentencepiece::NBestSentencePieceText *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(google::protobuf::internal::ArenaStringPtr *this)
{
  uint64_t result;
  std::string *v3;
  std::string *v4;
  char v5;
  std::string v6[2];

  result = *(_QWORD *)this;
  if ((result & 1) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 363);
    v3 = google::protobuf::internal::LogMessage::operator<<(v6, "CHECK failed: !tagged_ptr_.IsTagged(): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
    result = *(_QWORD *)this;
  }
  if (!result)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 364);
    v4 = google::protobuf::internal::LogMessage::operator<<(v6, "CHECK failed: tagged_ptr_.UnsafeGet() != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
    return *(_QWORD *)this;
  }
  return result;
}

void sub_191D1E364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(google::protobuf::internal::EpsCopyInputStream *this, const char **a2, int a3)
{
  unint64_t v6;
  std::string *v7;
  signed int v9;
  std::string *v10;
  char v11;
  char v12;
  std::string v13[2];

  v6 = (unint64_t)*a2;
  if (!*a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 209);
    v7 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: *ptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    v6 = (unint64_t)*a2;
  }
  if (v6 < *(_QWORD *)this)
    return 0;
  v9 = v6 - *((_DWORD *)this + 2);
  if (v9 >= 17)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 212);
    v10 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (overrun) <= (kSlopBytes): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  if (*((_DWORD *)this + 7) == v9)
  {
    if (v9 >= 1 && !*((_QWORD *)this + 2))
      *a2 = 0;
    return 1;
  }
  else
  {
    *a2 = (const char *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(this, v9, a3);
    return v11 & 1;
  }
}

void sub_191D1E4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>(uint64_t *a1)
{
  unint64_t v2;
  uint64_t AlignedAndAddCleanup;

  v2 = *a1 & 0xFFFFFFFFFFFFFFFELL;
  if ((*a1 & 1) != 0)
  {
    v2 = *(_QWORD *)v2;
    if (v2)
      goto LABEL_3;
LABEL_7:
    AlignedAndAddCleanup = operator new();
    goto LABEL_8;
  }
  if (!v2)
    goto LABEL_7;
LABEL_3:
  if ((*(_BYTE *)(v2 + 24) & 1) != 0)
  AlignedAndAddCleanup = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v2, (google::protobuf::internal::SerialArena::Block *)0x20, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::internal::InternalMetadata::Container<std::string>>);
LABEL_8:
  *(_OWORD *)AlignedAndAddCleanup = 0u;
  *(_OWORD *)(AlignedAndAddCleanup + 16) = 0u;
  *a1 = AlignedAndAddCleanup | 1;
  *(_QWORD *)AlignedAndAddCleanup = v2;
  return AlignedAndAddCleanup + 8;
}

void google::protobuf::internal::arena_destruct_object<google::protobuf::internal::InternalMetadata::Container<std::string>>(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  sentencepiece::SentencePieceText_SentencePiece **v3;
  sentencepiece::SentencePieceText_SentencePiece *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (sentencepiece::SentencePieceText_SentencePiece **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      sentencepiece::SentencePieceText_SentencePiece::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_191D1E60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  sentencepiece::SentencePieceText **v3;
  sentencepiece::SentencePieceText *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (sentencepiece::SentencePieceText **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      sentencepiece::SentencePieceText::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_191D1E6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField(google::protobuf::internal::RepeatedPtrFieldBase *a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(_QWORD *a1)
{
  sentencepiece::SentencePieceText_SentencePiece **v2;
  sentencepiece::SentencePieceText_SentencePiece **v3;
  uint64_t v4;

  v2 = (sentencepiece::SentencePieceText_SentencePiece **)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sentencepiece::SentencePieceText_SentencePiece::~SentencePieceText_SentencePiece(*v3);
          MEMORY[0x19401E994]();
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (sentencepiece::SentencePieceText_SentencePiece **)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (v1)
    corelm::util::Matrix<float>::numCols(v1);
}

uint64_t google::protobuf::internal::EpsCopyInputStream::PushLimit(google::protobuf::internal::EpsCopyInputStream *this, const char *a2, unsigned int a3)
{
  int v4;
  std::string *v6;
  uint64_t v7;
  int v8;
  char v10;
  std::string v11[2];

  v4 = (int)a2;
  if (a3 >= 0x7FFFFFF0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 128);
    v6 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v7 = *((_QWORD *)this + 1);
  v8 = v4 - v7 + a3;
  *(_QWORD *)this = v7 + (v8 & (v8 >> 31));
  LODWORD(v7) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = v8;
  return (v7 - v8);
}

void sub_191D1E844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  unsigned int v5;
  sentencepiece::SentencePieceText_SentencePiece **v6;
  unsigned int *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (sentencepiece::SentencePieceText_SentencePiece **)(*(_QWORD *)(a2 + 16) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, v5);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t *)a1, (sentencepiece::SentencePieceText_SentencePiece **)v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_191D1E930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(uint64_t *a1, sentencepiece::SentencePieceText_SentencePiece **a2, sentencepiece::SentencePieceText_SentencePiece **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  sentencepiece::SentencePieceText_SentencePiece **v11;
  sentencepiece::SentencePieceText_SentencePiece **v12;
  sentencepiece::SentencePieceText_SentencePiece *v13;
  sentencepiece::SentencePieceText_SentencePiece *v14;
  sentencepiece::SentencePieceText_SentencePiece *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  sentencepiece::SentencePieceText_SentencePiece **v19;
  sentencepiece::SentencePieceText_SentencePiece **v20;
  sentencepiece::SentencePieceText_SentencePiece *v21;
  sentencepiece::SentencePieceText_SentencePiece *v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<sentencepiece::SentencePieceText_SentencePiece>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (sentencepiece::SentencePieceText_SentencePiece *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(v18);
      google::protobuf::internal::GenericTypeHandler<sentencepiece::SentencePieceText_SentencePiece>::Merge(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void google::protobuf::internal::GenericTypeHandler<sentencepiece::SentencePieceText_SentencePiece>::Merge(sentencepiece::SentencePieceText_SentencePiece *a1, sentencepiece::SentencePieceText_SentencePiece *this)
{
  sentencepiece::SentencePieceText_SentencePiece::MergeFrom(this, a1);
}

void google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::~RepeatedPtrField(google::protobuf::internal::RepeatedPtrFieldBase *a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(_QWORD *a1)
{
  sentencepiece::SentencePieceText **v2;
  sentencepiece::SentencePieceText **v3;
  uint64_t v4;

  v2 = (sentencepiece::SentencePieceText **)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sentencepiece::SentencePieceText::~SentencePieceText(*v3);
          MEMORY[0x19401E994]();
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (sentencepiece::SentencePieceText **)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  unsigned int v5;
  sentencepiece::SentencePieceText **v6;
  unsigned int *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (sentencepiece::SentencePieceText **)(*(_QWORD *)(a2 + 16) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, v5);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>((uint64_t *)a1, (sentencepiece::SentencePieceText **)v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_191D1EB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(uint64_t *a1, sentencepiece::SentencePieceText **a2, sentencepiece::SentencePieceText **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  sentencepiece::SentencePieceText **v11;
  sentencepiece::SentencePieceText **v12;
  sentencepiece::SentencePieceText *v13;
  sentencepiece::SentencePieceText *v14;
  sentencepiece::SentencePieceText *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  sentencepiece::SentencePieceText **v19;
  sentencepiece::SentencePieceText **v20;
  sentencepiece::SentencePieceText *v21;
  sentencepiece::SentencePieceText *v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<sentencepiece::SentencePieceText>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (sentencepiece::SentencePieceText *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(v18);
      google::protobuf::internal::GenericTypeHandler<sentencepiece::SentencePieceText>::Merge(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void google::protobuf::internal::GenericTypeHandler<sentencepiece::SentencePieceText>::Merge(sentencepiece::SentencePieceText *a1, sentencepiece::SentencePieceText *this)
{
  sentencepiece::SentencePieceText::MergeFrom(this, a1);
}

void OUTLINED_FUNCTION_0_5(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 94, a4);
}

void sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_5("down_cast", "casts.h", a3, "f == nullptr || dynamic_cast<To>(f) != nullptr");
}

void InitDefaultsscc_info_ModelProto_sentencepiece_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", a4);
  sentencepiece::ModelProto::ModelProto((uint64_t)&sentencepiece::_ModelProto_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_ModelProto_default_instance_, v4);
}

void InitDefaultsscc_info_ModelProto_SentencePiece_sentencepiece_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", a4);
  sentencepiece::ModelProto_SentencePiece::ModelProto_SentencePiece(sentencepiece::_ModelProto_SentencePiece_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))sentencepiece::_ModelProto_SentencePiece_default_instance_, v4);
}

void InitDefaultsscc_info_NormalizerSpec_sentencepiece_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", a4);
  sentencepiece::NormalizerSpec::NormalizerSpec((uint64_t)&sentencepiece::_NormalizerSpec_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_NormalizerSpec_default_instance_, v4);
}

void InitDefaultsscc_info_SelfTestData_sentencepiece_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", a4);
  sentencepiece::SelfTestData::SelfTestData((uint64_t)&sentencepiece::_SelfTestData_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_SelfTestData_default_instance_, v4);
}

void InitDefaultsscc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", a4);
  sentencepiece::_SelfTestData_Sample_default_instance_ = (uint64_t)&off_1E2DF0B38;
  unk_1EE21C9E0 = 0;
  qword_1EE21C9E8 = 0;
  if (atomic_load(scc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto);
  qword_1EE21C9F0 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EE21C9F8 = &google::protobuf::internal::fixed_address_empty_string;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_SelfTestData_Sample_default_instance_, v4);
}

void InitDefaultsscc_info_TrainerSpec_sentencepiece_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", a4);
  sentencepiece::TrainerSpec::TrainerSpec((uint64_t)&sentencepiece::_TrainerSpec_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_TrainerSpec_default_instance_, v4);
}

BOOL sentencepiece::ModelProto_SentencePiece_Type_IsValid(sentencepiece *this)
{
  return ((_DWORD)this - 1) < 6;
}

uint64_t sentencepiece::TrainerSpec::TrainerSpec(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E2DF07E8;
  *(_QWORD *)(a1 + 8) = a2;
  google::protobuf::internal::ExtensionSet::ExtensionSet(a1 + 16, a2);
  *(_QWORD *)(a1 + 128) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = a2;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a2;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  if (atomic_load(scc_info_TrainerSpec_sentencepiece_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_TrainerSpec_sentencepiece_5fmodel_2eproto);
  *(_QWORD *)(a1 + 152) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(a1 + 160) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(a1 + 168) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 272) = 0x1F4000000001;
  *(_QWORD *)(a1 + 280) = 0xF42403F7FDF3BLL;
  *(_DWORD *)(a1 + 288) = 1061158912;
  *(_OWORD *)(a1 + 292) = xmmword_191D43460;
  *(_DWORD *)(a1 + 308) = 16843009;
  *(_WORD *)(a1 + 312) = 257;
  *(_DWORD *)(a1 + 316) = 1;
  *(_QWORD *)(a1 + 320) = 0xFFFFFFFF00000002;
  return a1;
}

void sub_191D1EFDC(_Unwind_Exception *a1)
{
  google::protobuf::internal::ExtensionSet *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v3);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v5);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v4);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2);
  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::TrainerSpec::~TrainerSpec(sentencepiece::TrainerSpec *this)
{
  sentencepiece::TrainerSpec::SharedDtor(this);
  google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 128);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 104);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 80);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 56);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::TrainerSpec *)((char *)this + 16));
}

{
  sentencepiece::TrainerSpec::~TrainerSpec(this);
  JUMPOUT(0x19401E994);
}

google::protobuf::internal::ArenaStringPtr *sentencepiece::TrainerSpec::SharedDtor(sentencepiece::TrainerSpec *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  google::protobuf::internal::ArenaStringPtr *result;
  uint64_t v20;
  uint64_t v21;
  google::protobuf::internal::ArenaStringPtr *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  std::string v27[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 519);
    v4 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  if (*((uint64_t **)this + 19) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v5 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 152));
    v6 = v5;
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    MEMORY[0x19401E994](v6, 0x1012C40EC159624);
  }
  if (*((uint64_t **)this + 20) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v7 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 160));
    v8 = v7;
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    MEMORY[0x19401E994](v8, 0x1012C40EC159624);
  }
  if (*((uint64_t **)this + 21) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v9 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 168));
    v10 = v9;
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    MEMORY[0x19401E994](v10, 0x1012C40EC159624);
  }
  if (*((_QWORD *)this + 22))
  {
    v11 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 176));
    v12 = v11;
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    MEMORY[0x19401E994](v12, 0x1012C40EC159624);
  }
  if (*((_QWORD *)this + 23))
  {
    v13 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 184));
    v14 = v13;
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    MEMORY[0x19401E994](v14, 0x1012C40EC159624);
  }
  if (*((_QWORD *)this + 24))
  {
    v15 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 192));
    v16 = v15;
    if (*(char *)(v15 + 23) < 0)
      operator delete(*(void **)v15);
    MEMORY[0x19401E994](v16, 0x1012C40EC159624);
  }
  if (*((_QWORD *)this + 25))
  {
    v17 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 200));
    v18 = v17;
    if (*(char *)(v17 + 23) < 0)
      operator delete(*(void **)v17);
    MEMORY[0x19401E994](v18, 0x1012C40EC159624);
  }
  result = (sentencepiece::TrainerSpec *)((char *)this + 208);
  if (*((_QWORD *)this + 26))
  {
    v20 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(result);
    v21 = v20;
    if (*(char *)(v20 + 23) < 0)
      operator delete(*(void **)v20);
    result = (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x19401E994](v21, 0x1012C40EC159624);
  }
  v23 = (uint64_t *)*((_QWORD *)this + 27);
  v22 = (sentencepiece::TrainerSpec *)((char *)this + 216);
  if (v23 != &google::protobuf::internal::fixed_address_empty_string)
  {
    v24 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(v22);
    v25 = v24;
    if (*(char *)(v24 + 23) < 0)
      operator delete(*(void **)v24);
    return (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x19401E994](v25, 0x1012C40EC159624);
  }
  return result;
}

void sub_191D1F320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sentencepiece::TrainerSpec::Clear(sentencepiece::TrainerSpec *this)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::TrainerSpec *)((char *)this + 16));
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 56);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 80);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 104);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 128);
  v2 = *((_DWORD *)this + 10);
  if (!(_BYTE)v2)
    goto LABEL_10;
  if ((v2 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 19) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_16;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_16;
    }
LABEL_4:
    if ((v2 & 4) == 0)
      goto LABEL_5;
LABEL_20:
    v5 = *((_QWORD *)this + 21) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      if ((v2 & 8) != 0)
        goto LABEL_24;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
      if ((v2 & 8) != 0)
        goto LABEL_24;
    }
LABEL_6:
    if ((v2 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
  if ((v2 & 2) == 0)
    goto LABEL_4;
LABEL_16:
  v4 = *((_QWORD *)this + 20) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    **(_BYTE **)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    if ((v2 & 4) != 0)
      goto LABEL_20;
  }
  else
  {
    *(_BYTE *)v4 = 0;
    *(_BYTE *)(v4 + 23) = 0;
    if ((v2 & 4) != 0)
      goto LABEL_20;
  }
LABEL_5:
  if ((v2 & 8) == 0)
    goto LABEL_6;
LABEL_24:
  google::protobuf::internal::ArenaStringPtr::ClearToDefault((std::string *)((char *)this + 176), (unint64_t *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_surface_);
  if ((v2 & 0x10) == 0)
  {
LABEL_7:
    if ((v2 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  google::protobuf::internal::ArenaStringPtr::ClearToDefault((std::string *)((char *)this + 184), (unint64_t *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_piece_);
  if ((v2 & 0x20) == 0)
  {
LABEL_8:
    if ((v2 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  google::protobuf::internal::ArenaStringPtr::ClearToDefault((std::string *)this + 8, (unint64_t *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_bos_piece_);
  if ((v2 & 0x40) != 0)
  {
LABEL_27:
    google::protobuf::internal::ArenaStringPtr::ClearToDefault((std::string *)((char *)this + 200), (unint64_t *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_eos_piece_);
    if ((v2 & 0x80) != 0)
      goto LABEL_28;
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_32;
    goto LABEL_29;
  }
LABEL_9:
  if ((v2 & 0x80) == 0)
    goto LABEL_10;
LABEL_28:
  google::protobuf::internal::ArenaStringPtr::ClearToDefault((std::string *)((char *)this + 208), (unint64_t *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_pad_piece_);
  if ((v2 & 0x100) == 0)
    goto LABEL_32;
LABEL_29:
  v6 = *((_QWORD *)this + 27) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v6 + 23) < 0)
  {
    **(_BYTE **)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
  }
  else
  {
    *(_BYTE *)v6 = 0;
    *(_BYTE *)(v6 + 23) = 0;
  }
LABEL_32:
  if ((v2 & 0xFE00) != 0)
  {
    *((_QWORD *)this + 28) = 0;
    *((_QWORD *)this + 29) = 0;
    *(_QWORD *)((char *)this + 239) = 0;
  }
  if ((v2 & 0xFF0000) != 0)
  {
    *(_QWORD *)((char *)this + 247) = 0;
    *((_BYTE *)this + 271) = 0;
    *(_QWORD *)((char *)this + 255) = 0;
    *(_QWORD *)((char *)this + 263) = 0;
    *((_DWORD *)this + 68) = 1;
  }
  if (HIBYTE(v2))
  {
    *(_QWORD *)((char *)this + 276) = 0x3F7FDF3B00001F40;
    *(_QWORD *)((char *)this + 284) = 0x3F400000000F4240;
    *(_OWORD *)((char *)this + 292) = xmmword_191D43460;
  }
  if (*((_BYTE *)this + 44))
  {
    *((_WORD *)this + 156) = 257;
    *((_DWORD *)this + 77) = 16843009;
    *(_QWORD *)((char *)this + 316) = 0x200000001;
  }
  *((_DWORD *)this + 81) = -1;
  *((_QWORD *)this + 5) = 0;
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) != 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v8 + 31) < 0)
    {
      **(_BYTE **)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v8 + 8) = 0;
      *(_BYTE *)(v8 + 31) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::TrainerSpec::_InternalParse(sentencepiece::TrainerSpec *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  char v5;
  google::protobuf::internal *result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  google::protobuf::internal *v11;
  unsigned int v12;
  unsigned int v13;
  std::string::value_type *v14;
  int *v15;
  uint64_t v16;
  int v17;
  std::string *AlignedAndAddCleanup;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  google::protobuf::internal::ArenaImpl *v24;
  uint64_t **v25;
  google::protobuf::internal *v26;
  unint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  google::protobuf::internal *v31;
  int v32;
  std::string::value_type *v33;
  int *v34;
  uint64_t v35;
  int v36;
  std::string *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  google::protobuf::internal *v42;
  int v43;
  uint64_t v44;
  google::protobuf::internal *v45;
  int v46;
  google::protobuf::internal *v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  google::protobuf::internal *v51;
  int v52;
  unint64_t v53;
  google::protobuf::internal *v54;
  int v55;
  unint64_t v56;
  google::protobuf::internal *v57;
  int v58;
  int v59;
  unint64_t v60;
  google::protobuf::internal *v61;
  int v62;
  unint64_t v63;
  google::protobuf::internal *v64;
  int v65;
  unint64_t v66;
  google::protobuf::internal *v67;
  int v68;
  google::protobuf::internal *v69;
  unint64_t v70;
  int v71;
  unint64_t v72;
  google::protobuf::internal *v73;
  int v74;
  google::protobuf::internal *v75;
  unint64_t v76;
  int v77;
  google::protobuf::internal *v78;
  unint64_t v79;
  int v80;
  google::protobuf::internal *v81;
  unint64_t v82;
  int v83;
  google::protobuf::internal *v84;
  unint64_t v85;
  int v86;
  google::protobuf::internal *v87;
  unint64_t v88;
  int v89;
  google::protobuf::internal *v90;
  unint64_t v91;
  int v92;
  std::string::value_type *v93;
  int *v94;
  uint64_t v95;
  int v96;
  std::string *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::string::value_type *v101;
  int *v102;
  uint64_t v103;
  int v104;
  std::string *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  google::protobuf::internal *v109;
  unint64_t v110;
  int v111;
  google::protobuf::internal *v112;
  unint64_t v113;
  int v114;
  google::protobuf::internal *v115;
  unint64_t v116;
  int v117;
  google::protobuf::internal *v118;
  unint64_t v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  google::protobuf::internal *v123;
  int v124;
  unint64_t v125;
  google::protobuf::internal *v126;
  int v127;
  unint64_t v128;
  google::protobuf::internal *v129;
  int v130;
  unint64_t v131;
  google::protobuf::internal *v132;
  int v133;
  uint64_t v134;
  google::protobuf::Arena *v135;
  char **v136;
  google::protobuf::internal::ArenaStringPtr *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  google::protobuf::internal *v141;
  unint64_t v142;
  int v143;
  google::protobuf::internal *v144;
  unint64_t v145;
  int v146;
  int v147;
  google::protobuf::internal *v148;
  unint64_t v149;
  int v150;
  uint64_t v151;
  std::string *v152;
  uint64_t v153;
  int v154;
  BOOL v155;
  std::string *v156;
  unint64_t v157;
  int v158;
  int v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  std::string *v186;
  uint64_t *v187;
  google::protobuf::internal *v188;

  v188 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v188, *((_DWORD *)a3 + 23));
  result = v188;
  if ((v5 & 1) != 0)
    return result;
  v187 = (uint64_t *)((char *)this + 8);
  v7 = (uint64_t *)((char *)this + 128);
  v8 = (uint64_t *)((char *)this + 104);
  v9 = (uint64_t *)((char *)this + 80);
  v10 = (uint64_t *)((char *)this + 56);
  while (2)
  {
    v11 = (google::protobuf::internal *)((char *)result + 1);
    v12 = *(unsigned __int8 *)result;
    if ((*(char *)result & 0x80000000) == 0)
      goto LABEL_7;
    v13 = v12 + (*(unsigned __int8 *)v11 << 7);
    v12 = v13 - 128;
    if ((*(char *)v11 & 0x80000000) == 0)
    {
      v11 = (google::protobuf::internal *)((char *)result + 2);
LABEL_7:
      v188 = v11;
      goto LABEL_8;
    }
    result = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(result, (const char *)(v13 - 128));
    v188 = result;
    if (!result)
      return result;
    v11 = result;
    v12 = v22;
LABEL_8:
    switch(v12 >> 3)
    {
      case 1u:
        if (v12 != 10)
          goto LABEL_279;
        result = (google::protobuf::internal *)((char *)v11 - 1);
        while (2)
        {
          v14 = (char *)result + 1;
          v188 = (google::protobuf::internal *)((char *)result + 1);
          v15 = (int *)*((_QWORD *)this + 9);
          if (!v15)
          {
            v17 = *((_DWORD *)this + 17);
LABEL_16:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 14, v17 + 1);
            v15 = (int *)*((_QWORD *)this + 9);
            v17 = *v15;
            goto LABEL_17;
          }
          v16 = *((int *)this + 16);
          v17 = *v15;
          if ((int)v16 < *v15)
          {
            *((_DWORD *)this + 16) = v16 + 1;
            AlignedAndAddCleanup = *(std::string **)&v15[2 * v16 + 2];
            goto LABEL_23;
          }
          if (v17 == *((_DWORD *)this + 17))
            goto LABEL_16;
LABEL_17:
          *v15 = v17 + 1;
          v19 = *v10;
          if (*v10)
          {
            if ((*(_BYTE *)(v19 + 24) & 1) != 0)
            AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v19, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
          }
          else
          {
            AlignedAndAddCleanup = (std::string *)operator new();
          }
          AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
          AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
          AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
          v20 = *((_QWORD *)this + 9);
          v21 = *((int *)this + 16);
          *((_DWORD *)this + 16) = v21 + 1;
          *(_QWORD *)(v20 + 8 * v21 + 8) = AlignedAndAddCleanup;
          v14 = (std::string::value_type *)v188;
LABEL_23:
          result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v14, (uint64_t)a3);
          v188 = result;
          if (result)
          {
            if (*(_QWORD *)a3 <= (unint64_t)result || *(_BYTE *)result != 10)
              goto LABEL_277;
            continue;
          }
          return result;
        }
      case 2u:
        if (v12 != 18)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 1u;
        v23 = *((_QWORD *)this + 1);
        v24 = (google::protobuf::internal::ArenaImpl *)(v23 & 0xFFFFFFFFFFFFFFFELL);
        if ((v23 & 1) != 0)
          v24 = *(google::protobuf::internal::ArenaImpl **)v24;
        v25 = (uint64_t **)((char *)this + 152);
        goto LABEL_269;
      case 3u:
        if (v12 != 24)
          goto LABEL_279;
        v26 = (google::protobuf::internal *)((char *)v11 + 1);
        v27 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_37;
        v28 = *(char *)v26;
        v29 = v27 + (v28 << 7);
        v27 = (v29 - 128);
        if (v28 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, (v29 - 128));
          v188 = result;
          if (!result)
            return result;
          v27 = v157;
        }
        else
        {
          v26 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_37:
          v188 = v26;
        }
        if ((v27 - 1) > 3)
        {
          if ((*v187 & 1) != 0)
            v186 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          else
            v186 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>(v187);
          google::protobuf::internal::WriteVarint(3, v27, v186);
        }
        else
        {
          *((_DWORD *)this + 10) |= 0x800000u;
          *((_DWORD *)this + 68) = v27;
        }
        goto LABEL_277;
      case 4u:
        if (v12 != 32)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x1000000u;
        v31 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v30) = *(unsigned __int8 *)v11;
        if ((v30 & 0x80) == 0)
          goto LABEL_44;
        v32 = *(char *)v31;
        v30 = v30 + (v32 << 7) - 128;
        if (v32 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v30);
          v188 = result;
          *((_DWORD *)this + 69) = v158;
          if (!result)
            return result;
        }
        else
        {
          v31 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_44:
          v188 = v31;
          *((_DWORD *)this + 69) = v30;
        }
        goto LABEL_277;
      case 5u:
        if (v12 != 42)
          goto LABEL_279;
        result = (google::protobuf::internal *)((char *)v11 - 1);
        while (1)
        {
          v33 = (char *)result + 1;
          v188 = (google::protobuf::internal *)((char *)result + 1);
          v34 = (int *)*((_QWORD *)this + 12);
          if (!v34)
            break;
          v35 = *((int *)this + 22);
          v36 = *v34;
          if ((int)v35 >= *v34)
          {
            if (v36 == *((_DWORD *)this + 23))
            {
LABEL_52:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 20, v36 + 1);
              v34 = (int *)*((_QWORD *)this + 12);
              v36 = *v34;
            }
            *v34 = v36 + 1;
            v38 = *v9;
            if (*v9)
            {
              if ((*(_BYTE *)(v38 + 24) & 1) != 0)
              v37 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v38, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
            }
            else
            {
              v37 = (std::string *)operator new();
            }
            v37->__r_.__value_.__r.__words[0] = 0;
            v37->__r_.__value_.__l.__size_ = 0;
            v37->__r_.__value_.__r.__words[2] = 0;
            v39 = *((_QWORD *)this + 12);
            v40 = *((int *)this + 22);
            *((_DWORD *)this + 22) = v40 + 1;
            *(_QWORD *)(v39 + 8 * v40 + 8) = v37;
            v33 = (std::string::value_type *)v188;
            goto LABEL_59;
          }
          *((_DWORD *)this + 22) = v35 + 1;
          v37 = *(std::string **)&v34[2 * v35 + 2];
LABEL_59:
          result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v37, v33, (uint64_t)a3);
          v188 = result;
          if (!result)
            return result;
          if (*(_QWORD *)a3 <= (unint64_t)result || *(_BYTE *)result != 42)
            goto LABEL_277;
        }
        v36 = *((_DWORD *)this + 23);
        goto LABEL_52;
      case 6u:
        if (v12 != 48)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x200u;
        v42 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v41) = *(unsigned __int8 *)v11;
        if ((v41 & 0x80) == 0)
          goto LABEL_67;
        v43 = *(char *)v42;
        v41 = v41 + (v43 << 7) - 128;
        if (v43 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v41);
          v188 = result;
          *((_DWORD *)this + 56) = v159;
          if (!result)
            return result;
        }
        else
        {
          v42 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_67:
          v188 = v42;
          *((_DWORD *)this + 56) = v41;
        }
        goto LABEL_277;
      case 7u:
        if (v12 != 58)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 2u;
        v44 = *((_QWORD *)this + 1);
        v24 = (google::protobuf::internal::ArenaImpl *)(v44 & 0xFFFFFFFFFFFFFFFELL);
        if ((v44 & 1) != 0)
          v24 = *(google::protobuf::internal::ArenaImpl **)v24;
        v25 = (uint64_t **)((char *)this + 160);
        goto LABEL_269;
      case 0xAu:
        if (v12 != 85)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x2000000u;
        v46 = *(_DWORD *)v11;
        v45 = (google::protobuf::internal *)((char *)v11 + 4);
        *((_DWORD *)this + 70) = v46;
        goto LABEL_259;
      case 0xBu:
        if (v12 != 88)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x800u;
        v47 = (google::protobuf::internal *)((char *)v11 + 1);
        v48 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_78;
        v49 = *(char *)v47;
        v48 = v48 + (v49 << 7) - 128;
        if (v49 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v48);
          v188 = result;
          *((_QWORD *)this + 29) = v160;
          if (!result)
            return result;
        }
        else
        {
          v47 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_78:
          v188 = v47;
          *((_QWORD *)this + 29) = v48;
        }
        goto LABEL_277;
      case 0xCu:
        if (v12 != 96)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x400u;
        v51 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v50) = *(unsigned __int8 *)v11;
        if ((v50 & 0x80) == 0)
          goto LABEL_83;
        v52 = *(char *)v51;
        v50 = v50 + (v52 << 7) - 128;
        if (v52 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v50);
          v188 = result;
          *((_DWORD *)this + 57) = v161;
          if (!result)
            return result;
        }
        else
        {
          v51 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_83:
          v188 = v51;
          *((_DWORD *)this + 57) = v50;
        }
        goto LABEL_277;
      case 0xDu:
        if (v12 != 104)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x1000u;
        v54 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v53) = *(unsigned __int8 *)v11;
        if ((v53 & 0x80) == 0)
          goto LABEL_88;
        v55 = *(char *)v54;
        v53 = v53 + (v55 << 7) - 128;
        if (v55 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v53);
          v188 = result;
          *((_DWORD *)this + 60) = v162;
          if (!result)
            return result;
        }
        else
        {
          v54 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_88:
          v188 = v54;
          *((_DWORD *)this + 60) = v53;
        }
        goto LABEL_277;
      case 0xEu:
        if (v12 != 112)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x4000000u;
        v57 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v56) = *(unsigned __int8 *)v11;
        if ((v56 & 0x80) == 0)
          goto LABEL_93;
        v58 = *(char *)v57;
        v56 = v56 + (v58 << 7) - 128;
        if (v58 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v56);
          v188 = result;
          *((_DWORD *)this + 71) = v163;
          if (!result)
            return result;
        }
        else
        {
          v57 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_93:
          v188 = v57;
          *((_DWORD *)this + 71) = v56;
        }
        goto LABEL_277;
      case 0xFu:
        if (v12 != 125)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x8000000u;
        v59 = *(_DWORD *)v11;
        v45 = (google::protobuf::internal *)((char *)v11 + 4);
        *((_DWORD *)this + 72) = v59;
        goto LABEL_259;
      case 0x10u:
        if (v12 != 128)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x10000000u;
        v61 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v60) = *(unsigned __int8 *)v11;
        if ((v60 & 0x80) == 0)
          goto LABEL_100;
        v62 = *(char *)v61;
        v60 = v60 + (v62 << 7) - 128;
        if (v62 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v60);
          v188 = result;
          *((_DWORD *)this + 73) = v164;
          if (!result)
            return result;
        }
        else
        {
          v61 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_100:
          v188 = v61;
          *((_DWORD *)this + 73) = v60;
        }
        goto LABEL_277;
      case 0x11u:
        if (v12 != 136)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x20000000u;
        v64 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v63) = *(unsigned __int8 *)v11;
        if ((v63 & 0x80) == 0)
          goto LABEL_105;
        v65 = *(char *)v64;
        v63 = v63 + (v65 << 7) - 128;
        if (v65 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v63);
          v188 = result;
          *((_DWORD *)this + 74) = v165;
          if (!result)
            return result;
        }
        else
        {
          v64 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_105:
          v188 = v64;
          *((_DWORD *)this + 74) = v63;
        }
        goto LABEL_277;
      case 0x12u:
        if (v12 != 144)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x40000000u;
        v67 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v66) = *(unsigned __int8 *)v11;
        if ((v66 & 0x80) == 0)
          goto LABEL_110;
        v68 = *(char *)v67;
        v66 = v66 + (v68 << 7) - 128;
        if (v68 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v66);
          v188 = result;
          *((_DWORD *)this + 75) = v166;
          if (!result)
            return result;
        }
        else
        {
          v67 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_110:
          v188 = v67;
          *((_DWORD *)this + 75) = v66;
        }
        goto LABEL_277;
      case 0x13u:
        if (v12 != 152)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 1u;
        v69 = (google::protobuf::internal *)((char *)v11 + 1);
        v70 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_115;
        v71 = *(char *)v69;
        v70 = v70 + (v71 << 7) - 128;
        if (v71 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v70);
          v188 = result;
          *((_BYTE *)this + 308) = v167 != 0;
          if (!result)
            return result;
        }
        else
        {
          v69 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_115:
          v188 = v69;
          *((_BYTE *)this + 308) = v70 != 0;
        }
        goto LABEL_277;
      case 0x14u:
        if (v12 != 160)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x80000000;
        v73 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v72) = *(unsigned __int8 *)v11;
        if ((v72 & 0x80) == 0)
          goto LABEL_120;
        v74 = *(char *)v73;
        v72 = v72 + (v74 << 7) - 128;
        if (v74 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v72);
          v188 = result;
          *((_DWORD *)this + 76) = v168;
          if (!result)
            return result;
        }
        else
        {
          v73 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_120:
          v188 = v73;
          *((_DWORD *)this + 76) = v72;
        }
        goto LABEL_277;
      case 0x15u:
        if (v12 != 168)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 2u;
        v75 = (google::protobuf::internal *)((char *)v11 + 1);
        v76 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_125;
        v77 = *(char *)v75;
        v76 = v76 + (v77 << 7) - 128;
        if (v77 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v76);
          v188 = result;
          *((_BYTE *)this + 309) = v169 != 0;
          if (!result)
            return result;
        }
        else
        {
          v75 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_125:
          v188 = v75;
          *((_BYTE *)this + 309) = v76 != 0;
        }
        goto LABEL_277;
      case 0x16u:
        if (v12 != 176)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 8u;
        v78 = (google::protobuf::internal *)((char *)v11 + 1);
        v79 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_130;
        v80 = *(char *)v78;
        v79 = v79 + (v80 << 7) - 128;
        if (v80 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v79);
          v188 = result;
          *((_BYTE *)this + 311) = v170 != 0;
          if (!result)
            return result;
        }
        else
        {
          v78 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_130:
          v188 = v78;
          *((_BYTE *)this + 311) = v79 != 0;
        }
        goto LABEL_277;
      case 0x17u:
        if (v12 != 184)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 4u;
        v81 = (google::protobuf::internal *)((char *)v11 + 1);
        v82 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_135;
        v83 = *(char *)v81;
        v82 = v82 + (v83 << 7) - 128;
        if (v83 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v82);
          v188 = result;
          *((_BYTE *)this + 310) = v171 != 0;
          if (!result)
            return result;
        }
        else
        {
          v81 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_135:
          v188 = v81;
          *((_BYTE *)this + 310) = v82 != 0;
        }
        goto LABEL_277;
      case 0x18u:
        if (v12 != 192)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x4000u;
        v84 = (google::protobuf::internal *)((char *)v11 + 1);
        v85 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_140;
        v86 = *(char *)v84;
        v85 = v85 + (v86 << 7) - 128;
        if (v86 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v85);
          v188 = result;
          *((_BYTE *)this + 245) = v172 != 0;
          if (!result)
            return result;
        }
        else
        {
          v84 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_140:
          v188 = v84;
          *((_BYTE *)this + 245) = v85 != 0;
        }
        goto LABEL_277;
      case 0x19u:
        if (v12 != 200)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x10000u;
        v87 = (google::protobuf::internal *)((char *)v11 + 1);
        v88 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_145;
        v89 = *(char *)v87;
        v88 = v88 + (v89 << 7) - 128;
        if (v89 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v88);
          v188 = result;
          *((_BYTE *)this + 247) = v173 != 0;
          if (!result)
            return result;
        }
        else
        {
          v87 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_145:
          v188 = v87;
          *((_BYTE *)this + 247) = v88 != 0;
        }
        goto LABEL_277;
      case 0x1Au:
        if (v12 != 208)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x8000u;
        v90 = (google::protobuf::internal *)((char *)v11 + 1);
        v91 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_150;
        v92 = *(char *)v90;
        v91 = v91 + (v92 << 7) - 128;
        if (v92 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v91);
          v188 = result;
          *((_BYTE *)this + 246) = v174 != 0;
          if (!result)
            return result;
        }
        else
        {
          v90 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_150:
          v188 = v90;
          *((_BYTE *)this + 246) = v91 != 0;
        }
        goto LABEL_277;
      case 0x1Eu:
        if (v12 != 242)
          goto LABEL_279;
        result = (google::protobuf::internal *)((char *)v11 - 2);
        while (1)
        {
          v93 = (char *)result + 2;
          v188 = (google::protobuf::internal *)((char *)result + 2);
          v94 = (int *)*((_QWORD *)this + 15);
          if (!v94)
            break;
          v95 = *((int *)this + 28);
          v96 = *v94;
          if ((int)v95 >= *v94)
          {
            if (v96 == *((_DWORD *)this + 29))
            {
LABEL_158:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 26, v96 + 1);
              v94 = (int *)*((_QWORD *)this + 15);
              v96 = *v94;
            }
            *v94 = v96 + 1;
            v98 = *v8;
            if (*v8)
            {
              if ((*(_BYTE *)(v98 + 24) & 1) != 0)
              v97 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v98, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
            }
            else
            {
              v97 = (std::string *)operator new();
            }
            v97->__r_.__value_.__r.__words[0] = 0;
            v97->__r_.__value_.__l.__size_ = 0;
            v97->__r_.__value_.__r.__words[2] = 0;
            v99 = *((_QWORD *)this + 15);
            v100 = *((int *)this + 28);
            *((_DWORD *)this + 28) = v100 + 1;
            *(_QWORD *)(v99 + 8 * v100 + 8) = v97;
            v93 = (std::string::value_type *)v188;
            goto LABEL_165;
          }
          *((_DWORD *)this + 28) = v95 + 1;
          v97 = *(std::string **)&v94[2 * v95 + 2];
LABEL_165:
          result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v97, v93, (uint64_t)a3);
          v188 = result;
          if (!result)
            return result;
          if (*(_QWORD *)a3 <= (unint64_t)result || *(_WORD *)result != 498)
            goto LABEL_277;
        }
        v96 = *((_DWORD *)this + 29);
        goto LABEL_158;
      case 0x1Fu:
        if (v12 != 250)
          goto LABEL_279;
        result = (google::protobuf::internal *)((char *)v11 - 2);
        break;
      case 0x20u:
        if ((_BYTE)v12)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 0x10u;
        v109 = (google::protobuf::internal *)((char *)v11 + 1);
        v110 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_191;
        v111 = *(char *)v109;
        v110 = v110 + (v111 << 7) - 128;
        if (v111 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v110);
          v188 = result;
          *((_BYTE *)this + 312) = v175 != 0;
          if (!result)
            return result;
        }
        else
        {
          v109 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_191:
          v188 = v109;
          *((_BYTE *)this + 312) = v110 != 0;
        }
        goto LABEL_277;
      case 0x21u:
        if (v12 != 8)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 0x20u;
        v112 = (google::protobuf::internal *)((char *)v11 + 1);
        v113 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_196;
        v114 = *(char *)v112;
        v113 = v113 + (v114 << 7) - 128;
        if (v114 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v113);
          v188 = result;
          *((_BYTE *)this + 313) = v176 != 0;
          if (!result)
            return result;
        }
        else
        {
          v112 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_196:
          v188 = v112;
          *((_BYTE *)this + 313) = v113 != 0;
        }
        goto LABEL_277;
      case 0x22u:
        if (v12 != 16)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x40000u;
        v115 = (google::protobuf::internal *)((char *)v11 + 1);
        v116 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_201;
        v117 = *(char *)v115;
        v116 = v116 + (v117 << 7) - 128;
        if (v117 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v116);
          v188 = result;
          *((_BYTE *)this + 249) = v177 != 0;
          if (!result)
            return result;
        }
        else
        {
          v115 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_201:
          v188 = v115;
          *((_BYTE *)this + 249) = v116 != 0;
        }
        goto LABEL_277;
      case 0x23u:
        if (v12 != 24)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x20000u;
        v118 = (google::protobuf::internal *)((char *)v11 + 1);
        v119 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_206;
        v120 = *(char *)v118;
        v119 = v119 + (v120 << 7) - 128;
        if (v120 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v119);
          v188 = result;
          *((_BYTE *)this + 248) = v178 != 0;
          if (!result)
            return result;
        }
        else
        {
          v118 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_206:
          v188 = v118;
          *((_BYTE *)this + 248) = v119 != 0;
        }
        goto LABEL_277;
      case 0x24u:
        if (v12 != 34)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 4u;
        v121 = *((_QWORD *)this + 1);
        v24 = (google::protobuf::internal::ArenaImpl *)(v121 & 0xFFFFFFFFFFFFFFFELL);
        if ((v121 & 1) != 0)
          v24 = *(google::protobuf::internal::ArenaImpl **)v24;
        v25 = (uint64_t **)((char *)this + 168);
        goto LABEL_269;
      case 0x28u:
        if (v12 != 64)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x100000u;
        v123 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v122) = *(unsigned __int8 *)v11;
        if ((v122 & 0x80) == 0)
          goto LABEL_215;
        v124 = *(char *)v123;
        v122 = v122 + (v124 << 7) - 128;
        if (v124 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v122);
          v188 = result;
          *((_DWORD *)this + 63) = v179;
          if (!result)
            return result;
        }
        else
        {
          v123 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_215:
          v188 = v123;
          *((_DWORD *)this + 63) = v122;
        }
        goto LABEL_277;
      case 0x29u:
        if (v12 != 72)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 0x40u;
        v126 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v125) = *(unsigned __int8 *)v11;
        if ((v125 & 0x80) == 0)
          goto LABEL_220;
        v127 = *(char *)v126;
        v125 = v125 + (v127 << 7) - 128;
        if (v127 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v125);
          v188 = result;
          *((_DWORD *)this + 79) = v180;
          if (!result)
            return result;
        }
        else
        {
          v126 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_220:
          v188 = v126;
          *((_DWORD *)this + 79) = v125;
        }
        goto LABEL_277;
      case 0x2Au:
        if (v12 != 80)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 0x80u;
        v129 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v128) = *(unsigned __int8 *)v11;
        if ((v128 & 0x80) == 0)
          goto LABEL_225;
        v130 = *(char *)v129;
        v128 = v128 + (v130 << 7) - 128;
        if (v130 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v128);
          v188 = result;
          *((_DWORD *)this + 80) = v181;
          if (!result)
            return result;
        }
        else
        {
          v129 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_225:
          v188 = v129;
          *((_DWORD *)this + 80) = v128;
        }
        goto LABEL_277;
      case 0x2Bu:
        if (v12 != 88)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 0x100u;
        v132 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v131) = *(unsigned __int8 *)v11;
        if ((v131 & 0x80) == 0)
          goto LABEL_230;
        v133 = *(char *)v132;
        v131 = v131 + (v133 << 7) - 128;
        if (v133 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v131);
          v188 = result;
          *((_DWORD *)this + 81) = v182;
          if (!result)
            return result;
        }
        else
        {
          v132 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_230:
          v188 = v132;
          *((_DWORD *)this + 81) = v131;
        }
        goto LABEL_277;
      case 0x2Cu:
        if (v12 != 98)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 8u;
        v153 = *((_QWORD *)this + 1);
        v135 = (google::protobuf::Arena *)(v153 & 0xFFFFFFFFFFFFFFFELL);
        if ((v153 & 1) != 0)
          v135 = *(google::protobuf::Arena **)v135;
        v136 = &sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_surface_;
        v137 = (sentencepiece::TrainerSpec *)((char *)this + 176);
        goto LABEL_274;
      case 0x2Du:
        if (v12 != 106)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x10u;
        v134 = *((_QWORD *)this + 1);
        v135 = (google::protobuf::Arena *)(v134 & 0xFFFFFFFFFFFFFFFELL);
        if ((v134 & 1) != 0)
          v135 = *(google::protobuf::Arena **)v135;
        v136 = &sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_piece_;
        v137 = (sentencepiece::TrainerSpec *)((char *)this + 184);
        goto LABEL_274;
      case 0x2Eu:
        if (v12 != 114)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x20u;
        v138 = *((_QWORD *)this + 1);
        v135 = (google::protobuf::Arena *)(v138 & 0xFFFFFFFFFFFFFFFELL);
        if ((v138 & 1) != 0)
          v135 = *(google::protobuf::Arena **)v135;
        v136 = &sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_bos_piece_;
        v137 = (sentencepiece::TrainerSpec *)((char *)this + 192);
        goto LABEL_274;
      case 0x2Fu:
        if (v12 != 122)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x40u;
        v139 = *((_QWORD *)this + 1);
        v135 = (google::protobuf::Arena *)(v139 & 0xFFFFFFFFFFFFFFFELL);
        if ((v139 & 1) != 0)
          v135 = *(google::protobuf::Arena **)v135;
        v136 = &sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_eos_piece_;
        v137 = (sentencepiece::TrainerSpec *)((char *)this + 200);
        goto LABEL_274;
      case 0x30u:
        if (v12 != 130)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x80u;
        v140 = *((_QWORD *)this + 1);
        v135 = (google::protobuf::Arena *)(v140 & 0xFFFFFFFFFFFFFFFELL);
        if ((v140 & 1) != 0)
          v135 = *(google::protobuf::Arena **)v135;
        v136 = &sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_pad_piece_;
        v137 = (sentencepiece::TrainerSpec *)((char *)this + 208);
LABEL_274:
        v152 = google::protobuf::internal::ArenaStringPtr::Mutable(v137, (const google::protobuf::internal::LazyString *)v136, v135);
        goto LABEL_275;
      case 0x31u:
        if (v12 != 136)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x80000u;
        v141 = (google::protobuf::internal *)((char *)v11 + 1);
        v142 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_251;
        v143 = *(char *)v141;
        v142 = v142 + (v143 << 7) - 128;
        if (v143 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v142);
          v188 = result;
          *((_BYTE *)this + 250) = v183 != 0;
          if (!result)
            return result;
        }
        else
        {
          v141 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_251:
          v188 = v141;
          *((_BYTE *)this + 250) = v142 != 0;
        }
        goto LABEL_277;
      case 0x32u:
        if (v12 != 144)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x2000u;
        v144 = (google::protobuf::internal *)((char *)v11 + 1);
        v145 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_256;
        v146 = *(char *)v144;
        v145 = v145 + (v146 << 7) - 128;
        if (v146 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v145);
          v188 = result;
          *((_BYTE *)this + 244) = v184 != 0;
          if (!result)
            return result;
        }
        else
        {
          v144 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_256:
          v188 = v144;
          *((_BYTE *)this + 244) = v145 != 0;
        }
        goto LABEL_277;
      case 0x33u:
        if (v12 != 157)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x200000u;
        v147 = *(_DWORD *)v11;
        v45 = (google::protobuf::internal *)((char *)v11 + 4);
        *((_DWORD *)this + 64) = v147;
LABEL_259:
        v188 = v45;
        goto LABEL_277;
      case 0x34u:
        if (v12 != 160)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x400000u;
        v148 = (google::protobuf::internal *)((char *)v11 + 1);
        v149 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_264;
        v150 = *(char *)v148;
        v149 = v149 + (v150 << 7) - 128;
        if (v150 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v149);
          v188 = result;
          *((_QWORD *)this + 33) = v185;
          if (!result)
            return result;
        }
        else
        {
          v148 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_264:
          v188 = v148;
          *((_QWORD *)this + 33) = v149;
        }
        goto LABEL_277;
      case 0x35u:
        if (v12 != 170)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x100u;
        v151 = *((_QWORD *)this + 1);
        v24 = (google::protobuf::internal::ArenaImpl *)(v151 & 0xFFFFFFFFFFFFFFFELL);
        if ((v151 & 1) != 0)
          v24 = *(google::protobuf::internal::ArenaImpl **)v24;
        v25 = (uint64_t **)((char *)this + 216);
LABEL_269:
        v152 = (std::string *)google::protobuf::internal::ArenaStringPtr::Mutable(v25, v24);
LABEL_275:
        result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v152, (std::string::value_type *)v188, (uint64_t)a3);
        goto LABEL_276;
      default:
LABEL_279:
        if (v12)
          v155 = (v12 & 7) == 4;
        else
          v155 = 1;
        if (v155)
        {
          *((_DWORD *)a3 + 20) = v12 - 1;
          return v11;
        }
        if (v12 < 0x640)
        {
          if ((*v187 & 1) != 0)
          {
            v156 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            v156 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>(v187);
            v11 = v188;
          }
          result = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v12, v156, v11, a3);
        }
        else
        {
          result = (google::protobuf::internal *)google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::TrainerSpec *)((char *)this + 16), v12, v11, (uint64_t)&sentencepiece::_TrainerSpec_default_instance_, v187, (int32x2_t *)a3);
        }
LABEL_276:
        v188 = result;
        if (!result)
          return result;
LABEL_277:
        v154 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v188, *((_DWORD *)a3 + 23));
        result = v188;
        if (v154)
          return result;
        continue;
    }
    break;
  }
  while (1)
  {
    v101 = (char *)result + 2;
    v188 = (google::protobuf::internal *)((char *)result + 2);
    v102 = (int *)*((_QWORD *)this + 18);
    if (!v102)
      break;
    v103 = *((int *)this + 34);
    v104 = *v102;
    if ((int)v103 >= *v102)
    {
      if (v104 == *((_DWORD *)this + 35))
      {
LABEL_176:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 32, v104 + 1);
        v102 = (int *)*((_QWORD *)this + 18);
        v104 = *v102;
      }
      *v102 = v104 + 1;
      v106 = *v7;
      if (*v7)
      {
        if ((*(_BYTE *)(v106 + 24) & 1) != 0)
        v105 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v106, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
      }
      else
      {
        v105 = (std::string *)operator new();
      }
      v105->__r_.__value_.__r.__words[0] = 0;
      v105->__r_.__value_.__l.__size_ = 0;
      v105->__r_.__value_.__r.__words[2] = 0;
      v107 = *((_QWORD *)this + 18);
      v108 = *((int *)this + 34);
      *((_DWORD *)this + 34) = v108 + 1;
      *(_QWORD *)(v107 + 8 * v108 + 8) = v105;
      v101 = (std::string::value_type *)v188;
      goto LABEL_183;
    }
    *((_DWORD *)this + 34) = v103 + 1;
    v105 = *(std::string **)&v102[2 * v103 + 2];
LABEL_183:
    result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v105, v101, (uint64_t)a3);
    v188 = result;
    if (!result)
      return result;
    if (*(_QWORD *)a3 <= (unint64_t)result || *(_WORD *)result != 506)
      goto LABEL_277;
  }
  v104 = *((_DWORD *)this + 35);
  goto LABEL_176;
}

unsigned __int8 *sentencepiece::TrainerSpec::_InternalSerialize(sentencepiece::TrainerSpec *this, unsigned __int8 *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6;
  int i;
  uint64_t v8;
  int64_t v9;
  const void *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int j;
  uint64_t v22;
  int64_t v23;
  const void *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned __int8 v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  unsigned __int8 v65;
  unsigned __int8 v66;
  unsigned __int8 v67;
  int v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  unsigned __int8 v71;
  int v72;
  int k;
  uint64_t v74;
  int64_t v75;
  const void *v76;
  int v77;
  int m;
  uint64_t v79;
  int64_t v80;
  const void *v81;
  int v82;
  unsigned __int8 v83;
  unsigned __int8 v84;
  int v85;
  unsigned __int8 v86;
  unsigned __int8 v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  uint64_t v108;
  unsigned __int8 v110;
  unsigned __int8 v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;

  v6 = *((_DWORD *)this + 16);
  if (v6 >= 1)
  {
    for (i = 0; v6 != i; ++i)
    {
      v8 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 56, i);
      if (*(char *)(v8 + 23) < 0)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9 > 127)
          goto LABEL_13;
      }
      else
      {
        v9 = *(unsigned __int8 *)(v8 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)a2 + 14 >= v9)
      {
        *a2 = 10;
        a2[1] = v9;
        if (*(char *)(v8 + 23) >= 0)
          v10 = (const void *)v8;
        else
          v10 = *(const void **)v8;
        memcpy(a2 + 2, v10, v9);
        a2 += v9 + 2;
        continue;
      }
LABEL_13:
      a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 1, v8, (char *)a2);
    }
  }
  v11 = *((_DWORD *)this + 10);
  if ((v11 & 1) != 0)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 19) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
    if ((v11 & 0x800000) == 0)
    {
LABEL_16:
      if ((v11 & 0x1000000) == 0)
        goto LABEL_38;
      goto LABEL_17;
    }
  }
  else if ((v11 & 0x800000) == 0)
  {
    goto LABEL_16;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v13 = *((int *)this + 68);
  *a2 = 24;
  if (v13 > 0x7F)
  {
    a2[1] = v13 | 0x80;
    v15 = v13 >> 7;
    if (v13 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v15 | 0x80;
        v18 = v15 >> 7;
        ++a2;
        v19 = v15 >> 14;
        v15 >>= 7;
      }
      while (v19);
      *(a2 - 1) = v18;
      if ((v11 & 0x1000000) == 0)
        goto LABEL_38;
    }
    else
    {
      a2[2] = v15;
      a2 += 3;
      if ((v11 & 0x1000000) == 0)
        goto LABEL_38;
    }
  }
  else
  {
    a2[1] = v13;
    a2 += 2;
    if ((v11 & 0x1000000) == 0)
      goto LABEL_38;
  }
LABEL_17:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v12 = *((int *)this + 69);
  *a2 = 32;
  if (v12 > 0x7F)
  {
    a2[1] = v12 | 0x80;
    v14 = v12 >> 7;
    if (v12 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v14 | 0x80;
        v16 = v14 >> 7;
        ++a2;
        v17 = v14 >> 14;
        v14 >>= 7;
      }
      while (v17);
      *(a2 - 1) = v16;
    }
    else
    {
      a2[2] = v14;
      a2 += 3;
    }
  }
  else
  {
    a2[1] = v12;
    a2 += 2;
  }
LABEL_38:
  v20 = *((_DWORD *)this + 22);
  if (v20 >= 1)
  {
    for (j = 0; v20 != j; ++j)
    {
      v22 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 80, j);
      if (*(char *)(v22 + 23) < 0)
      {
        v23 = *(_QWORD *)(v22 + 8);
        if (v23 > 127)
          goto LABEL_50;
      }
      else
      {
        v23 = *(unsigned __int8 *)(v22 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)a2 + 14 >= v23)
      {
        *a2 = 42;
        a2[1] = v23;
        if (*(char *)(v22 + 23) >= 0)
          v24 = (const void *)v22;
        else
          v24 = *(const void **)v22;
        memcpy(a2 + 2, v24, v23);
        a2 += v23 + 2;
        continue;
      }
LABEL_50:
      a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 5, v22, (char *)a2);
    }
  }
  if ((v11 & 0x200) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v26 = *((int *)this + 56);
    *a2 = 48;
    if (v26 > 0x7F)
    {
      a2[1] = v26 | 0x80;
      v28 = v26 >> 7;
      if (v26 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v28 | 0x80;
          v31 = v28 >> 7;
          ++a2;
          v32 = v28 >> 14;
          v28 >>= 7;
        }
        while (v32);
        *(a2 - 1) = v31;
        if ((v11 & 2) != 0)
          goto LABEL_82;
      }
      else
      {
        a2[2] = v28;
        a2 += 3;
        if ((v11 & 2) != 0)
          goto LABEL_82;
      }
    }
    else
    {
      a2[1] = v26;
      a2 += 2;
      if ((v11 & 2) != 0)
        goto LABEL_82;
    }
LABEL_53:
    if ((v11 & 0x2000000) == 0)
      goto LABEL_54;
    goto LABEL_83;
  }
  if ((v11 & 2) == 0)
    goto LABEL_53;
LABEL_82:
  a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((_QWORD *)this + 20) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
  if ((v11 & 0x2000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x800) == 0)
      goto LABEL_55;
    goto LABEL_86;
  }
LABEL_83:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v33 = *((_DWORD *)this + 70);
  *a2 = 85;
  *(_DWORD *)(a2 + 1) = v33;
  a2 += 5;
  if ((v11 & 0x800) == 0)
  {
LABEL_55:
    if ((v11 & 0x400) == 0)
      goto LABEL_56;
LABEL_97:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v38 = *((int *)this + 57);
    *a2 = 96;
    if (v38 > 0x7F)
    {
      a2[1] = v38 | 0x80;
      v39 = v38 >> 7;
      if (v38 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v39 | 0x80;
          v40 = v39 >> 7;
          ++a2;
          v41 = v39 >> 14;
          v39 >>= 7;
        }
        while (v41);
        *(a2 - 1) = v40;
        if ((v11 & 0x1000) != 0)
          goto LABEL_108;
      }
      else
      {
        a2[2] = v39;
        a2 += 3;
        if ((v11 & 0x1000) != 0)
          goto LABEL_108;
      }
    }
    else
    {
      a2[1] = v38;
      a2 += 2;
      if ((v11 & 0x1000) != 0)
        goto LABEL_108;
    }
LABEL_57:
    if ((v11 & 0x4000000) == 0)
      goto LABEL_58;
LABEL_119:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v46 = *((int *)this + 71);
    *a2 = 112;
    if (v46 > 0x7F)
    {
      a2[1] = v46 | 0x80;
      v47 = v46 >> 7;
      if (v46 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v47 | 0x80;
          v48 = v47 >> 7;
          ++a2;
          v49 = v47 >> 14;
          v47 >>= 7;
        }
        while (v49);
        *(a2 - 1) = v48;
        if ((v11 & 0x8000000) != 0)
          goto LABEL_130;
      }
      else
      {
        a2[2] = v47;
        a2 += 3;
        if ((v11 & 0x8000000) != 0)
          goto LABEL_130;
      }
    }
    else
    {
      a2[1] = v46;
      a2 += 2;
      if ((v11 & 0x8000000) != 0)
        goto LABEL_130;
    }
LABEL_59:
    if ((v11 & 0x10000000) == 0)
      goto LABEL_60;
LABEL_133:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v51 = *((int *)this + 73);
    *(_WORD *)a2 = 384;
    if (v51 > 0x7F)
    {
      a2[2] = v51 | 0x80;
      v52 = v51 >> 7;
      if (v51 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v52 | 0x80;
          v53 = v52 >> 7;
          ++a2;
          v54 = v52 >> 14;
          v52 >>= 7;
        }
        while (v54);
        *(a2 - 1) = v53;
        if ((v11 & 0x20000000) != 0)
          goto LABEL_144;
      }
      else
      {
        a2[3] = v52;
        a2 += 4;
        if ((v11 & 0x20000000) != 0)
          goto LABEL_144;
      }
    }
    else
    {
      a2[2] = v51;
      a2 += 3;
      if ((v11 & 0x20000000) != 0)
        goto LABEL_144;
    }
LABEL_61:
    if ((v11 & 0x40000000) == 0)
      goto LABEL_155;
    goto LABEL_62;
  }
LABEL_86:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v34 = *((_QWORD *)this + 29);
  *a2 = 88;
  if (v34 > 0x7F)
  {
    a2[1] = v34 | 0x80;
    v35 = v34 >> 7;
    if (v34 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v35 | 0x80;
        v36 = v35 >> 7;
        ++a2;
        v37 = v35 >> 14;
        v35 >>= 7;
      }
      while (v37);
      *(a2 - 1) = v36;
      if ((v11 & 0x400) != 0)
        goto LABEL_97;
    }
    else
    {
      a2[2] = v35;
      a2 += 3;
      if ((v11 & 0x400) != 0)
        goto LABEL_97;
    }
  }
  else
  {
    a2[1] = v34;
    a2 += 2;
    if ((v11 & 0x400) != 0)
      goto LABEL_97;
  }
LABEL_56:
  if ((v11 & 0x1000) == 0)
    goto LABEL_57;
LABEL_108:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v42 = *((int *)this + 60);
  *a2 = 104;
  if (v42 > 0x7F)
  {
    a2[1] = v42 | 0x80;
    v43 = v42 >> 7;
    if (v42 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v43 | 0x80;
        v44 = v43 >> 7;
        ++a2;
        v45 = v43 >> 14;
        v43 >>= 7;
      }
      while (v45);
      *(a2 - 1) = v44;
      if ((v11 & 0x4000000) != 0)
        goto LABEL_119;
    }
    else
    {
      a2[2] = v43;
      a2 += 3;
      if ((v11 & 0x4000000) != 0)
        goto LABEL_119;
    }
  }
  else
  {
    a2[1] = v42;
    a2 += 2;
    if ((v11 & 0x4000000) != 0)
      goto LABEL_119;
  }
LABEL_58:
  if ((v11 & 0x8000000) == 0)
    goto LABEL_59;
LABEL_130:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v50 = *((_DWORD *)this + 72);
  *a2 = 125;
  *(_DWORD *)(a2 + 1) = v50;
  a2 += 5;
  if ((v11 & 0x10000000) != 0)
    goto LABEL_133;
LABEL_60:
  if ((v11 & 0x20000000) == 0)
    goto LABEL_61;
LABEL_144:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v55 = *((int *)this + 74);
  *(_WORD *)a2 = 392;
  if (v55 > 0x7F)
  {
    a2[2] = v55 | 0x80;
    v56 = v55 >> 7;
    if (v55 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v56 | 0x80;
        v57 = v56 >> 7;
        ++a2;
        v58 = v56 >> 14;
        v56 >>= 7;
      }
      while (v58);
      *(a2 - 1) = v57;
      if ((v11 & 0x40000000) == 0)
        goto LABEL_155;
    }
    else
    {
      a2[3] = v56;
      a2 += 4;
      if ((v11 & 0x40000000) == 0)
        goto LABEL_155;
    }
  }
  else
  {
    a2[2] = v55;
    a2 += 3;
    if ((v11 & 0x40000000) == 0)
      goto LABEL_155;
  }
LABEL_62:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v25 = *((int *)this + 75);
  *(_WORD *)a2 = 400;
  if (v25 > 0x7F)
  {
    a2[2] = v25 | 0x80;
    v27 = v25 >> 7;
    if (v25 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v27 | 0x80;
        v29 = v27 >> 7;
        ++a2;
        v30 = v27 >> 14;
        v27 >>= 7;
      }
      while (v30);
      *(a2 - 1) = v29;
    }
    else
    {
      a2[3] = v27;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v25;
    a2 += 3;
  }
LABEL_155:
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v59 = *((_BYTE *)this + 308);
    *(_WORD *)a2 = 408;
    a2[2] = v59;
    a2 += 3;
  }
  if ((*((_DWORD *)this + 10) & 0x80000000) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v60 = *((int *)this + 76);
    *(_WORD *)a2 = 416;
    if (v60 > 0x7F)
    {
      a2[2] = v60 | 0x80;
      v61 = v60 >> 7;
      if (v60 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v61 | 0x80;
          v62 = v61 >> 7;
          ++a2;
          v63 = v61 >> 14;
          v61 >>= 7;
        }
        while (v63);
        *(a2 - 1) = v62;
      }
      else
      {
        a2[3] = v61;
        a2 += 4;
      }
    }
    else
    {
      a2[2] = v60;
      a2 += 3;
    }
  }
  v64 = *((_DWORD *)this + 11);
  if ((v64 & 2) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v65 = *((_BYTE *)this + 309);
    *(_WORD *)a2 = 424;
    a2[2] = v65;
    a2 += 3;
    if ((v64 & 8) == 0)
    {
LABEL_171:
      if ((v64 & 4) == 0)
        goto LABEL_182;
      goto LABEL_179;
    }
  }
  else if ((v64 & 8) == 0)
  {
    goto LABEL_171;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v66 = *((_BYTE *)this + 311);
  *(_WORD *)a2 = 432;
  a2[2] = v66;
  a2 += 3;
  if ((v64 & 4) != 0)
  {
LABEL_179:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v67 = *((_BYTE *)this + 310);
    *(_WORD *)a2 = 440;
    a2[2] = v67;
    a2 += 3;
  }
LABEL_182:
  v68 = *((_DWORD *)this + 10);
  if ((v68 & 0x4000) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v69 = *((_BYTE *)this + 245);
    *(_WORD *)a2 = 448;
    a2[2] = v69;
    a2 += 3;
    if ((v68 & 0x10000) == 0)
    {
LABEL_184:
      if ((v68 & 0x8000) == 0)
        goto LABEL_195;
      goto LABEL_192;
    }
  }
  else if ((v68 & 0x10000) == 0)
  {
    goto LABEL_184;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v70 = *((_BYTE *)this + 247);
  *(_WORD *)a2 = 456;
  a2[2] = v70;
  a2 += 3;
  if ((v68 & 0x8000) != 0)
  {
LABEL_192:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v71 = *((_BYTE *)this + 246);
    *(_WORD *)a2 = 464;
    a2[2] = v71;
    a2 += 3;
  }
LABEL_195:
  v72 = *((_DWORD *)this + 28);
  if (v72 >= 1)
  {
    for (k = 0; v72 != k; ++k)
    {
      v74 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 104, k);
      if (*(char *)(v74 + 23) < 0)
      {
        v75 = *(_QWORD *)(v74 + 8);
        if (v75 > 127)
          goto LABEL_207;
      }
      else
      {
        v75 = *(unsigned __int8 *)(v74 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)a2 + 13 >= v75)
      {
        *(_WORD *)a2 = 498;
        a2[2] = v75;
        if (*(char *)(v74 + 23) >= 0)
          v76 = (const void *)v74;
        else
          v76 = *(const void **)v74;
        memcpy(a2 + 3, v76, v75);
        a2 += v75 + 3;
        continue;
      }
LABEL_207:
      a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 30, v74, (char *)a2);
    }
  }
  v77 = *((_DWORD *)this + 34);
  if (v77 >= 1)
  {
    for (m = 0; v77 != m; ++m)
    {
      v79 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 128, m);
      if (*(char *)(v79 + 23) < 0)
      {
        v80 = *(_QWORD *)(v79 + 8);
        if (v80 > 127)
          goto LABEL_220;
      }
      else
      {
        v80 = *(unsigned __int8 *)(v79 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)a2 + 13 >= v80)
      {
        *(_WORD *)a2 = 506;
        a2[2] = v80;
        if (*(char *)(v79 + 23) >= 0)
          v81 = (const void *)v79;
        else
          v81 = *(const void **)v79;
        memcpy(a2 + 3, v81, v80);
        a2 += v80 + 3;
        continue;
      }
LABEL_220:
      a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 31, v79, (char *)a2);
    }
  }
  v82 = *((_DWORD *)this + 11);
  if ((v82 & 0x10) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v83 = *((_BYTE *)this + 312);
    *(_WORD *)a2 = 640;
    a2[2] = v83;
    a2 += 3;
  }
  if ((v82 & 0x20) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v84 = *((_BYTE *)this + 313);
    *(_WORD *)a2 = 648;
    a2[2] = v84;
    a2 += 3;
  }
  v85 = *((_DWORD *)this + 10);
  if ((v85 & 0x40000) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v86 = *((_BYTE *)this + 249);
    *(_WORD *)a2 = 656;
    a2[2] = v86;
    a2 += 3;
    if ((v85 & 0x20000) == 0)
    {
LABEL_231:
      if ((v85 & 4) == 0)
        goto LABEL_232;
      goto LABEL_240;
    }
  }
  else if ((v85 & 0x20000) == 0)
  {
    goto LABEL_231;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v87 = *((_BYTE *)this + 248);
  *(_WORD *)a2 = 664;
  a2[2] = v87;
  a2 += 3;
  if ((v85 & 4) == 0)
  {
LABEL_232:
    if ((v85 & 0x100000) == 0)
      goto LABEL_250;
    goto LABEL_241;
  }
LABEL_240:
  a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 36, *((_QWORD *)this + 21) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
  if ((v85 & 0x100000) == 0)
    goto LABEL_250;
LABEL_241:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v88 = *((int *)this + 63);
  *(_WORD *)a2 = 704;
  if (v88 > 0x7F)
  {
    a2[2] = v88 | 0x80;
    v89 = v88 >> 7;
    if (v88 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v89 | 0x80;
        v90 = v89 >> 7;
        ++a2;
        v91 = v89 >> 14;
        v89 >>= 7;
      }
      while (v91);
      *(a2 - 1) = v90;
    }
    else
    {
      a2[3] = v89;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v88;
    a2 += 3;
  }
LABEL_250:
  v92 = *((_DWORD *)this + 11);
  if ((v92 & 0x40) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v94 = *((int *)this + 79);
    *(_WORD *)a2 = 712;
    if (v94 > 0x7F)
    {
      a2[2] = v94 | 0x80;
      v96 = v94 >> 7;
      if (v94 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v96 | 0x80;
          v99 = v96 >> 7;
          ++a2;
          v100 = v96 >> 14;
          v96 >>= 7;
        }
        while (v100);
        *(a2 - 1) = v99;
        if ((v92 & 0x80) != 0)
          goto LABEL_273;
      }
      else
      {
        a2[3] = v96;
        a2 += 4;
        if ((v92 & 0x80) != 0)
          goto LABEL_273;
      }
    }
    else
    {
      a2[2] = v94;
      a2 += 3;
      if ((v92 & 0x80) != 0)
        goto LABEL_273;
    }
LABEL_252:
    if ((v92 & 0x100) == 0)
      goto LABEL_284;
    goto LABEL_253;
  }
  if ((v92 & 0x80) == 0)
    goto LABEL_252;
LABEL_273:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v101 = *((int *)this + 80);
  *(_WORD *)a2 = 720;
  if (v101 > 0x7F)
  {
    a2[2] = v101 | 0x80;
    v102 = v101 >> 7;
    if (v101 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v102 | 0x80;
        v103 = v102 >> 7;
        ++a2;
        v104 = v102 >> 14;
        v102 >>= 7;
      }
      while (v104);
      *(a2 - 1) = v103;
      if ((v92 & 0x100) == 0)
        goto LABEL_284;
    }
    else
    {
      a2[3] = v102;
      a2 += 4;
      if ((v92 & 0x100) == 0)
        goto LABEL_284;
    }
  }
  else
  {
    a2[2] = v101;
    a2 += 3;
    if ((v92 & 0x100) == 0)
      goto LABEL_284;
  }
LABEL_253:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v93 = *((int *)this + 81);
  *(_WORD *)a2 = 728;
  if (v93 > 0x7F)
  {
    a2[2] = v93 | 0x80;
    v95 = v93 >> 7;
    if (v93 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v95 | 0x80;
        v97 = v95 >> 7;
        ++a2;
        v98 = v95 >> 14;
        v95 >>= 7;
      }
      while (v98);
      *(a2 - 1) = v97;
    }
    else
    {
      a2[3] = v95;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v93;
    a2 += 3;
  }
LABEL_284:
  v105 = *((_DWORD *)this + 10);
  if ((v105 & 8) != 0)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 44, *((_QWORD *)this + 22) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
    if ((v105 & 0x10) == 0)
    {
LABEL_286:
      if ((v105 & 0x20) == 0)
        goto LABEL_287;
      goto LABEL_299;
    }
  }
  else if ((v105 & 0x10) == 0)
  {
    goto LABEL_286;
  }
  a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 45, *((_QWORD *)this + 23) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
  if ((v105 & 0x20) == 0)
  {
LABEL_287:
    if ((v105 & 0x40) == 0)
      goto LABEL_288;
    goto LABEL_300;
  }
LABEL_299:
  a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 46, *((_QWORD *)this + 24) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
  if ((v105 & 0x40) == 0)
  {
LABEL_288:
    if ((v105 & 0x80) == 0)
      goto LABEL_289;
    goto LABEL_301;
  }
LABEL_300:
  a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 47, *((_QWORD *)this + 25) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
  if ((v105 & 0x80) == 0)
  {
LABEL_289:
    if ((v105 & 0x80000) == 0)
      goto LABEL_290;
    goto LABEL_302;
  }
LABEL_301:
  a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 48, *((_QWORD *)this + 26) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
  if ((v105 & 0x80000) == 0)
  {
LABEL_290:
    if ((v105 & 0x2000) == 0)
      goto LABEL_291;
    goto LABEL_305;
  }
LABEL_302:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v110 = *((_BYTE *)this + 250);
  *(_WORD *)a2 = 904;
  a2[2] = v110;
  a2 += 3;
  if ((v105 & 0x2000) == 0)
  {
LABEL_291:
    if ((v105 & 0x200000) == 0)
      goto LABEL_292;
    goto LABEL_308;
  }
LABEL_305:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v111 = *((_BYTE *)this + 244);
  *(_WORD *)a2 = 912;
  a2[2] = v111;
  a2 += 3;
  if ((v105 & 0x200000) == 0)
  {
LABEL_292:
    if ((v105 & 0x400000) == 0)
      goto LABEL_293;
    goto LABEL_311;
  }
LABEL_308:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v112 = *((_DWORD *)this + 64);
  *(_WORD *)a2 = 925;
  *(_DWORD *)(a2 + 2) = v112;
  a2 += 6;
  if ((v105 & 0x400000) == 0)
  {
LABEL_293:
    if ((v105 & 0x100) == 0)
      goto LABEL_295;
    goto LABEL_294;
  }
LABEL_311:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v113 = *((_QWORD *)this + 33);
  *(_WORD *)a2 = 928;
  if (v113 <= 0x7F)
  {
    a2[2] = v113;
    a2 += 3;
    if ((v105 & 0x100) == 0)
      goto LABEL_295;
LABEL_294:
    a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 53, *((_QWORD *)this + 27) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
    goto LABEL_295;
  }
  a2[2] = v113 | 0x80;
  v114 = v113 >> 7;
  if (v113 >> 14)
  {
    a2 += 4;
    do
    {
      *(a2 - 1) = v114 | 0x80;
      v115 = v114 >> 7;
      ++a2;
      v116 = v114 >> 14;
      v114 >>= 7;
    }
    while (v116);
    *(a2 - 1) = v115;
    if ((v105 & 0x100) != 0)
      goto LABEL_294;
  }
  else
  {
    a2[3] = v114;
    a2 += 4;
    if ((v105 & 0x100) != 0)
      goto LABEL_294;
  }
LABEL_295:
  v106 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::TrainerSpec *)((char *)this + 16), 200, 0x20000000, a2, a3);
  v107 = v106;
  v108 = *((_QWORD *)this + 1);
  if ((v108 & 1) == 0)
    return v107;
  v117 = v108 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v117 + 31) < 0)
  {
    v118 = *(void **)(v117 + 8);
    v119 = *(_QWORD *)(v117 + 16);
  }
  else
  {
    v118 = (void *)(v117 + 8);
    LODWORD(v119) = *(unsigned __int8 *)(v117 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v106 >= (int)v119)
  {
    v120 = (int)v119;
    memcpy(v106, v118, (int)v119);
    v107 += v120;
    return v107;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v118, v119, v106);
}

uint64_t sentencepiece::TrainerSpec::ByteSizeLong(sentencepiece::TrainerSpec *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;

  v2 = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::TrainerSpec *)((char *)this + 16));
  v3 = *((unsigned int *)this + 16);
  v4 = v2 + v3;
  if ((int)v3 >= 1)
  {
    v5 = 0;
    do
    {
      v6 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 56, v5);
      v7 = *(unsigned __int8 *)(v6 + 23);
      if ((v7 & 0x80u) != 0)
        v7 = *(_QWORD *)(v6 + 8);
      v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      ++v5;
    }
    while ((_DWORD)v3 != v5);
  }
  v8 = *((unsigned int *)this + 22);
  v9 = v4 + v8;
  if ((int)v8 >= 1)
  {
    v10 = 0;
    do
    {
      v11 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 80, v10);
      v12 = *(unsigned __int8 *)(v11 + 23);
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(v11 + 8);
      v9 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      ++v10;
    }
    while ((_DWORD)v8 != v10);
  }
  v13 = *((unsigned int *)this + 28);
  v14 = v9 + 2 * v13;
  if ((int)v13 >= 1)
  {
    v15 = 0;
    do
    {
      v16 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 104, v15);
      v17 = *(unsigned __int8 *)(v16 + 23);
      if ((v17 & 0x80u) != 0)
        v17 = *(_QWORD *)(v16 + 8);
      v14 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6);
      ++v15;
    }
    while ((_DWORD)v13 != v15);
  }
  v18 = *((unsigned int *)this + 34);
  v19 = v14 + 2 * v18;
  if ((int)v18 >= 1)
  {
    v20 = 0;
    do
    {
      v21 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 128, v20);
      v22 = *(unsigned __int8 *)(v21 + 23);
      if ((v22 & 0x80u) != 0)
        v22 = *(_QWORD *)(v21 + 8);
      v19 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6);
      ++v20;
    }
    while ((_DWORD)v18 != v20);
  }
  v23 = *((_DWORD *)this + 10);
  if (!(_BYTE)v23)
    goto LABEL_33;
  if ((v23 & 1) != 0)
  {
    v58 = *((_QWORD *)this + 19) & 0xFFFFFFFFFFFFFFFELL;
    v59 = *(unsigned __int8 *)(v58 + 23);
    v60 = *(_QWORD *)(v58 + 8);
    if ((v59 & 0x80u) == 0)
      v60 = v59;
    v19 += v60 + ((9 * (__clz(v60 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v23 & 2) == 0)
    {
LABEL_24:
      if ((v23 & 4) == 0)
        goto LABEL_25;
      goto LABEL_131;
    }
  }
  else if ((v23 & 2) == 0)
  {
    goto LABEL_24;
  }
  v61 = *((_QWORD *)this + 20) & 0xFFFFFFFFFFFFFFFELL;
  v62 = *(unsigned __int8 *)(v61 + 23);
  v63 = *(_QWORD *)(v61 + 8);
  if ((v62 & 0x80u) == 0)
    v63 = v62;
  v19 += v63 + ((9 * (__clz(v63 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v23 & 4) == 0)
  {
LABEL_25:
    if ((v23 & 8) == 0)
      goto LABEL_26;
    goto LABEL_134;
  }
LABEL_131:
  v64 = *((_QWORD *)this + 21) & 0xFFFFFFFFFFFFFFFELL;
  v65 = *(unsigned __int8 *)(v64 + 23);
  v66 = *(_QWORD *)(v64 + 8);
  if ((v65 & 0x80u) == 0)
    v66 = v65;
  v19 += v66 + ((9 * (__clz(v66 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 8) == 0)
  {
LABEL_26:
    if ((v23 & 0x10) == 0)
      goto LABEL_27;
    goto LABEL_137;
  }
LABEL_134:
  v67 = *((_QWORD *)this + 22) & 0xFFFFFFFFFFFFFFFELL;
  v68 = *(unsigned __int8 *)(v67 + 23);
  v69 = *(_QWORD *)(v67 + 8);
  if ((v68 & 0x80u) == 0)
    v69 = v68;
  v19 += v69 + ((9 * (__clz(v69 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x10) == 0)
  {
LABEL_27:
    if ((v23 & 0x20) == 0)
      goto LABEL_28;
LABEL_140:
    v73 = *((_QWORD *)this + 24) & 0xFFFFFFFFFFFFFFFELL;
    v74 = *(unsigned __int8 *)(v73 + 23);
    v75 = *(_QWORD *)(v73 + 8);
    if ((v74 & 0x80u) == 0)
      v75 = v74;
    v19 += v75 + ((9 * (__clz(v75 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v23 & 0x40) == 0)
    {
LABEL_29:
      if ((v23 & 0x80) == 0)
        goto LABEL_33;
      goto LABEL_30;
    }
    goto LABEL_143;
  }
LABEL_137:
  v70 = *((_QWORD *)this + 23) & 0xFFFFFFFFFFFFFFFELL;
  v71 = *(unsigned __int8 *)(v70 + 23);
  v72 = *(_QWORD *)(v70 + 8);
  if ((v71 & 0x80u) == 0)
    v72 = v71;
  v19 += v72 + ((9 * (__clz(v72 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x20) != 0)
    goto LABEL_140;
LABEL_28:
  if ((v23 & 0x40) == 0)
    goto LABEL_29;
LABEL_143:
  v76 = *((_QWORD *)this + 25) & 0xFFFFFFFFFFFFFFFELL;
  v77 = *(unsigned __int8 *)(v76 + 23);
  v78 = *(_QWORD *)(v76 + 8);
  if ((v77 & 0x80u) == 0)
    v78 = v77;
  v19 += v78 + ((9 * (__clz(v78 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x80) != 0)
  {
LABEL_30:
    v24 = *((_QWORD *)this + 26) & 0xFFFFFFFFFFFFFFFELL;
    v25 = *(unsigned __int8 *)(v24 + 23);
    v26 = *(_QWORD *)(v24 + 8);
    if ((v25 & 0x80u) == 0)
      v26 = v25;
    v19 += v26 + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
LABEL_33:
  if ((v23 & 0xFF00) == 0)
    goto LABEL_50;
  if ((v23 & 0x100) != 0)
  {
    v79 = *((_QWORD *)this + 27) & 0xFFFFFFFFFFFFFFFELL;
    v80 = *(unsigned __int8 *)(v79 + 23);
    v81 = *(_QWORD *)(v79 + 8);
    if ((v80 & 0x80u) == 0)
      v81 = v80;
    v19 += v81 + ((9 * (__clz(v81 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v23 & 0x200) == 0)
    {
LABEL_36:
      if ((v23 & 0x400) == 0)
        goto LABEL_37;
      goto LABEL_154;
    }
  }
  else if ((v23 & 0x200) == 0)
  {
    goto LABEL_36;
  }
  v82 = *((_DWORD *)this + 56);
  v83 = (9 * (__clz(v82 | 1) ^ 0x1F) + 73) >> 6;
  if (v82 >= 0)
    v84 = v83;
  else
    v84 = 10;
  v19 += v84 + 1;
  if ((v23 & 0x400) == 0)
  {
LABEL_37:
    if ((v23 & 0x800) == 0)
      goto LABEL_38;
LABEL_158:
    v19 += ((9 * (__clz(*((_QWORD *)this + 29) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v23 & 0x1000) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
LABEL_154:
  v85 = *((_DWORD *)this + 57);
  v86 = (9 * (__clz(v85 | 1) ^ 0x1F) + 73) >> 6;
  if (v85 >= 0)
    v87 = v86;
  else
    v87 = 10;
  v19 += v87 + 1;
  if ((v23 & 0x800) != 0)
    goto LABEL_158;
LABEL_38:
  if ((v23 & 0x1000) != 0)
  {
LABEL_39:
    v27 = *((_DWORD *)this + 60);
    v28 = (9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6;
    if (v27 >= 0)
      v29 = v28;
    else
      v29 = 10;
    v19 += v29 + 1;
  }
LABEL_43:
  v30 = v19 + 3;
  if ((v23 & 0x2000) == 0)
    v30 = v19;
  if ((v23 & 0x4000) != 0)
    v30 += 3;
  if ((v23 & 0x8000) != 0)
    v19 = v30 + 3;
  else
    v19 = v30;
LABEL_50:
  if ((v23 & 0xFF0000) != 0)
  {
    v31 = v19 + 3;
    if ((v23 & 0x10000) == 0)
      v31 = v19;
    if ((v23 & 0x20000) != 0)
      v31 += 3;
    if ((v23 & 0x40000) != 0)
      v31 += 3;
    if ((v23 & 0x80000) != 0)
      v31 += 3;
    if ((v23 & 0x100000) != 0)
    {
      v32 = *((_DWORD *)this + 63);
      v33 = (9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6;
      if (v32 >= 0)
        v34 = v33;
      else
        v34 = 10;
      v31 += v34 + 2;
    }
    if ((v23 & 0x200000) != 0)
      v19 = v31 + 6;
    else
      v19 = v31;
    if ((v23 & 0x400000) != 0)
      v19 += ((9 * (__clz(*((_QWORD *)this + 33) | 1) ^ 0x3F) + 73) >> 6) + 2;
    if ((v23 & 0x800000) != 0)
    {
      v35 = *((_DWORD *)this + 68);
      v36 = (9 * (__clz(v35 | 1) ^ 0x1F) + 73) >> 6;
      if (v35 >= 0)
        v37 = v36;
      else
        v37 = 10;
      v19 += v37 + 1;
    }
  }
  if (!HIBYTE(v23))
    goto LABEL_94;
  if ((v23 & 0x1000000) != 0)
  {
    v38 = *((_DWORD *)this + 69);
    v39 = (9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6;
    if (v38 >= 0)
      v40 = v39;
    else
      v40 = 10;
    v19 += v40 + 1;
  }
  v41 = v19 + 5;
  if ((v23 & 0x2000000) == 0)
    v41 = v19;
  if ((v23 & 0x4000000) != 0)
  {
    v42 = *((_DWORD *)this + 71);
    v43 = (9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6;
    if (v42 >= 0)
      v44 = v43;
    else
      v44 = 10;
    v41 += v44 + 1;
  }
  if ((v23 & 0x8000000) != 0)
    v19 = v41 + 5;
  else
    v19 = v41;
  if ((v23 & 0x10000000) == 0)
  {
    if ((v23 & 0x20000000) == 0)
      goto LABEL_92;
LABEL_164:
    v91 = *((_DWORD *)this + 74);
    v92 = ((9 * (__clz(v91 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v91 >= 0)
      v93 = v92;
    else
      v93 = 12;
    v19 += v93;
    if ((v23 & 0x40000000) == 0)
    {
LABEL_93:
      if ((v23 & 0x80000000) == 0)
        goto LABEL_94;
      goto LABEL_172;
    }
    goto LABEL_168;
  }
  v88 = *((_DWORD *)this + 73);
  v89 = (9 * (__clz(v88 | 1) ^ 0x1F) + 73) >> 6;
  if (v88 >= 0)
    v90 = v89;
  else
    v90 = 10;
  v19 += v90 + 2;
  if ((v23 & 0x20000000) != 0)
    goto LABEL_164;
LABEL_92:
  if ((v23 & 0x40000000) == 0)
    goto LABEL_93;
LABEL_168:
  v94 = *((_DWORD *)this + 75);
  v95 = ((9 * (__clz(v94 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if (v94 >= 0)
    v96 = v95;
  else
    v96 = 12;
  v19 += v96;
  if ((v23 & 0x80000000) != 0)
  {
LABEL_172:
    v97 = *((_DWORD *)this + 76);
    v98 = ((9 * (__clz(v97 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v97 >= 0)
      v99 = v98;
    else
      v99 = 12;
    v19 += v99;
  }
LABEL_94:
  v45 = *((_DWORD *)this + 11);
  if ((_BYTE)v45)
  {
    v46 = v19 + 3;
    if ((v45 & 1) == 0)
      v46 = v19;
    if ((v45 & 2) != 0)
      v46 += 3;
    if ((v45 & 4) != 0)
      v46 += 3;
    if ((v45 & 8) != 0)
      v46 += 3;
    if ((v45 & 0x10) != 0)
      v46 += 3;
    if ((v45 & 0x20) != 0)
      v19 = v46 + 3;
    else
      v19 = v46;
    if ((v45 & 0x40) != 0)
    {
      v47 = *((_DWORD *)this + 79);
      v48 = ((9 * (__clz(v47 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v47 >= 0)
        v49 = v48;
      else
        v49 = 12;
      v19 += v49;
    }
    if ((v45 & 0x80) != 0)
    {
      v50 = *((_DWORD *)this + 80);
      v51 = ((9 * (__clz(v50 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v50 >= 0)
        v52 = v51;
      else
        v52 = 12;
      v19 += v52;
    }
  }
  if ((v45 & 0x100) != 0)
  {
    v53 = *((_DWORD *)this + 81);
    v54 = ((9 * (__clz(v53 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v53 >= 0)
      v55 = v54;
    else
      v55 = 12;
    v19 += v55;
  }
  v56 = *((_QWORD *)this + 1);
  if ((v56 & 1) != 0)
  {
    v100 = v56 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v100 + 31) < 0)
      v101 = *(_QWORD *)(v100 + 16);
    else
      v101 = *(unsigned __int8 *)(v100 + 31);
    v19 += v101;
  }
  *((_DWORD *)this + 12) = v19;
  return v19;
}

void sentencepiece::TrainerSpec::CheckTypeAndMergeFrom(sentencepiece::TrainerSpec *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::TrainerSpec *__hidden))a2 != &off_1E2DF07E8)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::TrainerSpec::MergeFrom(this, a2);
}

void sentencepiece::TrainerSpec::MergeFrom(sentencepiece::TrainerSpec *this, const sentencepiece::TrainerSpec *a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  unsigned int v13;
  __int128 *v14;
  uint64_t v15;
  google::protobuf::internal::ArenaImpl *v16;
  __int128 *v17;
  uint64_t v18;
  google::protobuf::internal::ArenaImpl *v19;
  __int128 *v20;
  uint64_t v21;
  google::protobuf::internal::ArenaImpl *v22;
  __int128 *v23;
  uint64_t v24;
  google::protobuf::internal::ArenaImpl *v25;
  __int128 *v26;
  uint64_t v27;
  google::protobuf::internal::ArenaImpl *v28;
  __int128 *v29;
  uint64_t v30;
  google::protobuf::internal::ArenaImpl *v31;
  __int128 *v32;
  uint64_t v33;
  google::protobuf::internal::ArenaImpl *v34;
  __int128 *v35;
  uint64_t v36;
  google::protobuf::internal::ArenaImpl *v37;
  int v38;
  int v39;
  __int128 *v40;
  uint64_t v41;
  google::protobuf::internal::ArenaImpl *v42;
  char v43;
  std::string v44[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v44, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 1671);
    v4 = google::protobuf::internal::LogMessage::operator<<(v44, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v43, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v44[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::TrainerSpec *)((char *)this + 16), (const sentencepiece::TrainerSpec *)((char *)a2 + 16));
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 56, (uint64_t)a2 + 56);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 80, (uint64_t)a2 + 80);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 104, (uint64_t)a2 + 104);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 128, (uint64_t)a2 + 128);
  v13 = *((_DWORD *)a2 + 10);
  if (!(_BYTE)v13)
    goto LABEL_47;
  if ((v13 & 1) != 0)
  {
    v14 = (__int128 *)(*((_QWORD *)a2 + 19) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 10) |= 1u;
    v15 = *((_QWORD *)this + 1);
    v16 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
    if ((v15 & 1) != 0)
      v16 = *(google::protobuf::internal::ArenaImpl **)v16;
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 152), v14, v16);
    if ((v13 & 2) == 0)
    {
LABEL_16:
      if ((v13 & 4) == 0)
        goto LABEL_17;
      goto LABEL_29;
    }
  }
  else if ((v13 & 2) == 0)
  {
    goto LABEL_16;
  }
  v17 = (__int128 *)(*((_QWORD *)a2 + 20) & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 10) |= 2u;
  v18 = *((_QWORD *)this + 1);
  v19 = (google::protobuf::internal::ArenaImpl *)(v18 & 0xFFFFFFFFFFFFFFFELL);
  if ((v18 & 1) != 0)
    v19 = *(google::protobuf::internal::ArenaImpl **)v19;
  google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 160), v17, v19);
  if ((v13 & 4) == 0)
  {
LABEL_17:
    if ((v13 & 8) == 0)
      goto LABEL_18;
    goto LABEL_32;
  }
LABEL_29:
  v20 = (__int128 *)(*((_QWORD *)a2 + 21) & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 10) |= 4u;
  v21 = *((_QWORD *)this + 1);
  v22 = (google::protobuf::internal::ArenaImpl *)(v21 & 0xFFFFFFFFFFFFFFFELL);
  if ((v21 & 1) != 0)
    v22 = *(google::protobuf::internal::ArenaImpl **)v22;
  google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 168), v20, v22);
  if ((v13 & 8) == 0)
  {
LABEL_18:
    if ((v13 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_32:
  v23 = (__int128 *)(*((_QWORD *)a2 + 22) & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 10) |= 8u;
  v24 = *((_QWORD *)this + 1);
  v25 = (google::protobuf::internal::ArenaImpl *)(v24 & 0xFFFFFFFFFFFFFFFELL);
  if ((v24 & 1) != 0)
    v25 = *(google::protobuf::internal::ArenaImpl **)v25;
  google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 176), v23, v25);
  if ((v13 & 0x10) == 0)
  {
LABEL_19:
    if ((v13 & 0x20) == 0)
      goto LABEL_20;
LABEL_38:
    v29 = (__int128 *)(*((_QWORD *)a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 10) |= 0x20u;
    v30 = *((_QWORD *)this + 1);
    v31 = (google::protobuf::internal::ArenaImpl *)(v30 & 0xFFFFFFFFFFFFFFFELL);
    if ((v30 & 1) != 0)
      v31 = *(google::protobuf::internal::ArenaImpl **)v31;
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 192), v29, v31);
    if ((v13 & 0x40) == 0)
    {
LABEL_21:
      if ((v13 & 0x80) == 0)
        goto LABEL_47;
      goto LABEL_44;
    }
    goto LABEL_41;
  }
LABEL_35:
  v26 = (__int128 *)(*((_QWORD *)a2 + 23) & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 10) |= 0x10u;
  v27 = *((_QWORD *)this + 1);
  v28 = (google::protobuf::internal::ArenaImpl *)(v27 & 0xFFFFFFFFFFFFFFFELL);
  if ((v27 & 1) != 0)
    v28 = *(google::protobuf::internal::ArenaImpl **)v28;
  google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 184), v26, v28);
  if ((v13 & 0x20) != 0)
    goto LABEL_38;
LABEL_20:
  if ((v13 & 0x40) == 0)
    goto LABEL_21;
LABEL_41:
  v32 = (__int128 *)(*((_QWORD *)a2 + 25) & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 10) |= 0x40u;
  v33 = *((_QWORD *)this + 1);
  v34 = (google::protobuf::internal::ArenaImpl *)(v33 & 0xFFFFFFFFFFFFFFFELL);
  if ((v33 & 1) != 0)
    v34 = *(google::protobuf::internal::ArenaImpl **)v34;
  google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 200), v32, v34);
  if ((v13 & 0x80) != 0)
  {
LABEL_44:
    v35 = (__int128 *)(*((_QWORD *)a2 + 26) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 10) |= 0x80u;
    v36 = *((_QWORD *)this + 1);
    v37 = (google::protobuf::internal::ArenaImpl *)(v36 & 0xFFFFFFFFFFFFFFFELL);
    if ((v36 & 1) != 0)
      v37 = *(google::protobuf::internal::ArenaImpl **)v37;
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 208), v35, v37);
  }
LABEL_47:
  if ((v13 & 0xFF00) == 0)
    goto LABEL_58;
  if ((v13 & 0x100) != 0)
  {
    v40 = (__int128 *)(*((_QWORD *)a2 + 27) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 10) |= 0x100u;
    v41 = *((_QWORD *)this + 1);
    v42 = (google::protobuf::internal::ArenaImpl *)(v41 & 0xFFFFFFFFFFFFFFFELL);
    if ((v41 & 1) != 0)
      v42 = *(google::protobuf::internal::ArenaImpl **)v42;
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 216), v40, v42);
    if ((v13 & 0x200) == 0)
    {
LABEL_50:
      if ((v13 & 0x400) == 0)
        goto LABEL_51;
      goto LABEL_97;
    }
  }
  else if ((v13 & 0x200) == 0)
  {
    goto LABEL_50;
  }
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  if ((v13 & 0x400) == 0)
  {
LABEL_51:
    if ((v13 & 0x800) == 0)
      goto LABEL_52;
    goto LABEL_98;
  }
LABEL_97:
  *((_DWORD *)this + 57) = *((_DWORD *)a2 + 57);
  if ((v13 & 0x800) == 0)
  {
LABEL_52:
    if ((v13 & 0x1000) == 0)
      goto LABEL_53;
    goto LABEL_99;
  }
LABEL_98:
  *((_QWORD *)this + 29) = *((_QWORD *)a2 + 29);
  if ((v13 & 0x1000) == 0)
  {
LABEL_53:
    if ((v13 & 0x2000) == 0)
      goto LABEL_54;
    goto LABEL_100;
  }
LABEL_99:
  *((_DWORD *)this + 60) = *((_DWORD *)a2 + 60);
  if ((v13 & 0x2000) == 0)
  {
LABEL_54:
    if ((v13 & 0x4000) == 0)
      goto LABEL_55;
LABEL_101:
    *((_BYTE *)this + 245) = *((_BYTE *)a2 + 245);
    if ((v13 & 0x8000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
LABEL_100:
  *((_BYTE *)this + 244) = *((_BYTE *)a2 + 244);
  if ((v13 & 0x4000) != 0)
    goto LABEL_101;
LABEL_55:
  if ((v13 & 0x8000) != 0)
LABEL_56:
    *((_BYTE *)this + 246) = *((_BYTE *)a2 + 246);
LABEL_57:
  *((_DWORD *)this + 10) |= v13;
LABEL_58:
  if ((v13 & 0xFF0000) == 0)
    goto LABEL_69;
  if ((v13 & 0x10000) != 0)
  {
    *((_BYTE *)this + 247) = *((_BYTE *)a2 + 247);
    if ((v13 & 0x20000) == 0)
    {
LABEL_61:
      if ((v13 & 0x40000) == 0)
        goto LABEL_62;
      goto LABEL_105;
    }
  }
  else if ((v13 & 0x20000) == 0)
  {
    goto LABEL_61;
  }
  *((_BYTE *)this + 248) = *((_BYTE *)a2 + 248);
  if ((v13 & 0x40000) == 0)
  {
LABEL_62:
    if ((v13 & 0x80000) == 0)
      goto LABEL_63;
    goto LABEL_106;
  }
LABEL_105:
  *((_BYTE *)this + 249) = *((_BYTE *)a2 + 249);
  if ((v13 & 0x80000) == 0)
  {
LABEL_63:
    if ((v13 & 0x100000) == 0)
      goto LABEL_64;
    goto LABEL_107;
  }
LABEL_106:
  *((_BYTE *)this + 250) = *((_BYTE *)a2 + 250);
  if ((v13 & 0x100000) == 0)
  {
LABEL_64:
    if ((v13 & 0x200000) == 0)
      goto LABEL_65;
    goto LABEL_108;
  }
LABEL_107:
  *((_DWORD *)this + 63) = *((_DWORD *)a2 + 63);
  if ((v13 & 0x200000) == 0)
  {
LABEL_65:
    if ((v13 & 0x400000) == 0)
      goto LABEL_66;
LABEL_109:
    *((_QWORD *)this + 33) = *((_QWORD *)a2 + 33);
    if ((v13 & 0x800000) == 0)
      goto LABEL_68;
    goto LABEL_67;
  }
LABEL_108:
  *((_DWORD *)this + 64) = *((_DWORD *)a2 + 64);
  if ((v13 & 0x400000) != 0)
    goto LABEL_109;
LABEL_66:
  if ((v13 & 0x800000) != 0)
LABEL_67:
    *((_DWORD *)this + 68) = *((_DWORD *)a2 + 68);
LABEL_68:
  *((_DWORD *)this + 10) |= v13;
LABEL_69:
  if (!HIBYTE(v13))
    goto LABEL_79;
  if ((v13 & 0x1000000) != 0)
  {
    *((_DWORD *)this + 69) = *((_DWORD *)a2 + 69);
    if ((v13 & 0x2000000) == 0)
    {
LABEL_72:
      if ((v13 & 0x4000000) == 0)
        goto LABEL_73;
      goto LABEL_121;
    }
  }
  else if ((v13 & 0x2000000) == 0)
  {
    goto LABEL_72;
  }
  *((_DWORD *)this + 70) = *((_DWORD *)a2 + 70);
  if ((v13 & 0x4000000) == 0)
  {
LABEL_73:
    if ((v13 & 0x8000000) == 0)
      goto LABEL_74;
    goto LABEL_122;
  }
LABEL_121:
  *((_DWORD *)this + 71) = *((_DWORD *)a2 + 71);
  if ((v13 & 0x8000000) == 0)
  {
LABEL_74:
    if ((v13 & 0x10000000) == 0)
      goto LABEL_75;
    goto LABEL_123;
  }
LABEL_122:
  *((_DWORD *)this + 72) = *((_DWORD *)a2 + 72);
  if ((v13 & 0x10000000) == 0)
  {
LABEL_75:
    if ((v13 & 0x20000000) == 0)
      goto LABEL_76;
    goto LABEL_124;
  }
LABEL_123:
  *((_DWORD *)this + 73) = *((_DWORD *)a2 + 73);
  if ((v13 & 0x20000000) == 0)
  {
LABEL_76:
    if ((v13 & 0x40000000) == 0)
      goto LABEL_77;
LABEL_125:
    *((_DWORD *)this + 75) = *((_DWORD *)a2 + 75);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_78;
LABEL_126:
    *((_DWORD *)this + 76) = *((_DWORD *)a2 + 76);
    goto LABEL_78;
  }
LABEL_124:
  *((_DWORD *)this + 74) = *((_DWORD *)a2 + 74);
  if ((v13 & 0x40000000) != 0)
    goto LABEL_125;
LABEL_77:
  if ((v13 & 0x80000000) != 0)
    goto LABEL_126;
LABEL_78:
  *((_DWORD *)this + 10) |= v13;
LABEL_79:
  v38 = *((_DWORD *)a2 + 11);
  if (!(_BYTE)v38)
    goto LABEL_90;
  if ((v38 & 1) != 0)
  {
    *((_BYTE *)this + 308) = *((_BYTE *)a2 + 308);
    if ((v38 & 2) == 0)
    {
LABEL_82:
      if ((v38 & 4) == 0)
        goto LABEL_83;
      goto LABEL_113;
    }
  }
  else if ((v38 & 2) == 0)
  {
    goto LABEL_82;
  }
  *((_BYTE *)this + 309) = *((_BYTE *)a2 + 309);
  if ((v38 & 4) == 0)
  {
LABEL_83:
    if ((v38 & 8) == 0)
      goto LABEL_84;
    goto LABEL_114;
  }
LABEL_113:
  *((_BYTE *)this + 310) = *((_BYTE *)a2 + 310);
  if ((v38 & 8) == 0)
  {
LABEL_84:
    if ((v38 & 0x10) == 0)
      goto LABEL_85;
    goto LABEL_115;
  }
LABEL_114:
  *((_BYTE *)this + 311) = *((_BYTE *)a2 + 311);
  if ((v38 & 0x10) == 0)
  {
LABEL_85:
    if ((v38 & 0x20) == 0)
      goto LABEL_86;
    goto LABEL_116;
  }
LABEL_115:
  *((_BYTE *)this + 312) = *((_BYTE *)a2 + 312);
  if ((v38 & 0x20) == 0)
  {
LABEL_86:
    if ((v38 & 0x40) == 0)
      goto LABEL_87;
LABEL_117:
    *((_DWORD *)this + 79) = *((_DWORD *)a2 + 79);
    if ((v38 & 0x80) == 0)
      goto LABEL_89;
    goto LABEL_88;
  }
LABEL_116:
  *((_BYTE *)this + 313) = *((_BYTE *)a2 + 313);
  if ((v38 & 0x40) != 0)
    goto LABEL_117;
LABEL_87:
  if ((v38 & 0x80) != 0)
LABEL_88:
    *((_DWORD *)this + 80) = *((_DWORD *)a2 + 80);
LABEL_89:
  *((_DWORD *)this + 11) |= v38;
LABEL_90:
  if ((v38 & 0x100) != 0)
  {
    v39 = *((_DWORD *)a2 + 81);
    *((_DWORD *)this + 11) |= 0x100u;
    *((_DWORD *)this + 81) = v39;
  }
}

void sub_191D22B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::TrainerSpec::IsInitialized(sentencepiece::TrainerSpec *this)
{
  return google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::TrainerSpec *)((char *)this + 16));
}

_QWORD *sentencepiece::TrainerSpec::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.TrainerSpec");
}

uint64_t sentencepiece::NormalizerSpec::NormalizerSpec(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E2DF09D8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_1E2DF0A78;
  google::protobuf::internal::ExtensionSet::ExtensionSet(a1 + 24, a2);
  *(_QWORD *)(a1 + 48) = 0;
  if (atomic_load(scc_info_NormalizerSpec_sentencepiece_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_NormalizerSpec_sentencepiece_5fmodel_2eproto);
  *(_QWORD *)(a1 + 56) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(a1 + 64) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(a1 + 72) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(a1 + 80) = 16843008;
  return a1;
}

void sub_191D22BCC(_Unwind_Exception *a1)
{
  google::protobuf::internal::ExtensionSet *v1;

  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::NormalizerSpec::~NormalizerSpec(sentencepiece::NormalizerSpec *this)
{
  sentencepiece::NormalizerSpec::SharedDtor(this);
  google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::NormalizerSpec *)((char *)this + 24));
}

{
  sentencepiece::NormalizerSpec::~NormalizerSpec(this);
  JUMPOUT(0x19401E994);
}

google::protobuf::internal::ArenaStringPtr *sentencepiece::NormalizerSpec::SharedDtor(sentencepiece::NormalizerSpec *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  google::protobuf::internal::ArenaStringPtr *result;
  uint64_t v8;
  uint64_t v9;
  google::protobuf::internal::ArenaStringPtr *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  std::string v15[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 1972);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  if (*((uint64_t **)this + 7) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v5 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::NormalizerSpec *)((char *)this + 56));
    v6 = v5;
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    MEMORY[0x19401E994](v6, 0x1012C40EC159624);
  }
  result = (sentencepiece::NormalizerSpec *)((char *)this + 64);
  if (*((uint64_t **)this + 8) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v8 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(result);
    v9 = v8;
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    result = (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x19401E994](v9, 0x1012C40EC159624);
  }
  v11 = (uint64_t *)*((_QWORD *)this + 9);
  v10 = (sentencepiece::NormalizerSpec *)((char *)this + 72);
  if (v11 != &google::protobuf::internal::fixed_address_empty_string)
  {
    v12 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(v10);
    v13 = v12;
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    return (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x19401E994](v13, 0x1012C40EC159624);
  }
  return result;
}

void sub_191D22D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'sentencepiece::NormalizerSpec::~NormalizerSpec(sentencepiece::NormalizerSpec *this)
{
  sentencepiece::NormalizerSpec::~NormalizerSpec((sentencepiece::NormalizerSpec *)((char *)this - 16));
}

{
  sentencepiece::NormalizerSpec::~NormalizerSpec((sentencepiece::NormalizerSpec *)((char *)this - 16));
  JUMPOUT(0x19401E994);
}

void sentencepiece::NormalizerSpec::Clear(sentencepiece::NormalizerSpec *this)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::NormalizerSpec *)((char *)this + 24));
  v2 = *((_DWORD *)this + 12);
  if ((v2 & 7) != 0)
  {
    if ((v2 & 1) == 0)
    {
      if ((v2 & 2) == 0)
        goto LABEL_4;
LABEL_10:
      v4 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v4 + 23) < 0)
      {
        **(_BYTE **)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
        if ((v2 & 4) == 0)
          goto LABEL_17;
      }
      else
      {
        *(_BYTE *)v4 = 0;
        *(_BYTE *)(v4 + 23) = 0;
        if ((v2 & 4) == 0)
          goto LABEL_17;
      }
      goto LABEL_14;
    }
    v3 = *((_QWORD *)this + 7) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_10;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_10;
    }
LABEL_4:
    if ((v2 & 4) == 0)
      goto LABEL_17;
LABEL_14:
    v5 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
  }
LABEL_17:
  if ((v2 & 0x78) != 0)
    *((_DWORD *)this + 20) = 16843008;
  *((_DWORD *)this + 12) = 0;
  v6 = *((_QWORD *)this + 1);
  if ((v6 & 1) != 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v7 + 31) < 0)
    {
      **(_BYTE **)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v7 + 8) = 0;
      *(_BYTE *)(v7 + 31) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::NormalizerSpec::_InternalParse(sentencepiece::NormalizerSpec *this, google::protobuf::internal *a2, int32x2_t *a3)
{
  int v5;
  _QWORD *v7;
  google::protobuf::internal *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  google::protobuf::internal::ArenaImpl *v12;
  uint64_t **v13;
  google::protobuf::internal *v14;
  unint64_t v15;
  int v16;
  google::protobuf::internal *TagFallback;
  unsigned int v18;
  uint64_t v19;
  google::protobuf::internal *v20;
  unint64_t v21;
  int v22;
  google::protobuf::internal *v23;
  unint64_t v24;
  int v25;
  google::protobuf::internal *v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  std::string *v30;
  google::protobuf::internal *v31;
  BOOL v32;
  std::string *v33;
  google::protobuf::internal *v34;
  uint64_t v35;
  google::protobuf::internal *v36;
  uint64_t v37;
  google::protobuf::internal *v38;
  uint64_t v39;
  google::protobuf::internal *v40;
  uint64_t v41;
  google::protobuf::internal *v42;

  v42 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v42, a3[11].i32[1]) & 1) == 0)
  {
    v7 = (_QWORD *)((char *)this + 8);
    while (1)
    {
      v8 = (google::protobuf::internal *)((char *)v42 + 1);
      v9 = *(unsigned __int8 *)v42;
      if (*(char *)v42 < 0)
      {
        v10 = v9 + (*(unsigned __int8 *)v8 << 7);
        v9 = v10 - 128;
        if (*(char *)v8 < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v42, (const char *)(v10 - 128));
          v42 = TagFallback;
          if (!TagFallback)
            goto LABEL_67;
          v8 = TagFallback;
          v9 = v18;
          goto LABEL_8;
        }
        v8 = (google::protobuf::internal *)((char *)v42 + 2);
      }
      v42 = v8;
LABEL_8:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10)
            goto LABEL_48;
          *((_DWORD *)this + 12) |= 1u;
          v11 = *((_QWORD *)this + 1);
          v12 = (google::protobuf::internal::ArenaImpl *)(v11 & 0xFFFFFFFFFFFFFFFELL);
          if ((v11 & 1) != 0)
            v12 = *(google::protobuf::internal::ArenaImpl **)v12;
          v13 = (uint64_t **)((char *)this + 56);
          goto LABEL_44;
        case 2u:
          if (v9 != 18)
            goto LABEL_48;
          *((_DWORD *)this + 12) |= 2u;
          v19 = *((_QWORD *)this + 1);
          v12 = (google::protobuf::internal::ArenaImpl *)(v19 & 0xFFFFFFFFFFFFFFFELL);
          if ((v19 & 1) != 0)
            v12 = *(google::protobuf::internal::ArenaImpl **)v12;
          v13 = (uint64_t **)((char *)this + 64);
          goto LABEL_44;
        case 3u:
          if (v9 != 24)
            goto LABEL_48;
          v5 |= 0x10u;
          v20 = (google::protobuf::internal *)((char *)v8 + 1);
          v21 = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0)
            goto LABEL_29;
          v22 = *(char *)v20;
          v21 = v21 + (v22 << 7) - 128;
          if (v22 < 0)
          {
            v36 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v8, v21);
            v42 = v36;
            *((_BYTE *)this + 81) = v37 != 0;
            if (!v36)
              goto LABEL_67;
          }
          else
          {
            v20 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_29:
            v42 = v20;
            *((_BYTE *)this + 81) = v21 != 0;
          }
          goto LABEL_46;
        case 4u:
          if (v9 != 32)
            goto LABEL_48;
          v5 |= 0x20u;
          v23 = (google::protobuf::internal *)((char *)v8 + 1);
          v24 = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0)
            goto LABEL_34;
          v25 = *(char *)v23;
          v24 = v24 + (v25 << 7) - 128;
          if (v25 < 0)
          {
            v38 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v8, v24);
            v42 = v38;
            *((_BYTE *)this + 82) = v39 != 0;
            if (!v38)
              goto LABEL_67;
          }
          else
          {
            v23 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_34:
            v42 = v23;
            *((_BYTE *)this + 82) = v24 != 0;
          }
          goto LABEL_46;
        case 5u:
          if (v9 != 40)
            goto LABEL_48;
          v5 |= 0x40u;
          v26 = (google::protobuf::internal *)((char *)v8 + 1);
          v27 = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0)
            goto LABEL_39;
          v28 = *(char *)v26;
          v27 = v27 + (v28 << 7) - 128;
          if (v28 < 0)
          {
            v40 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v8, v27);
            v42 = v40;
            *((_BYTE *)this + 83) = v41 != 0;
            if (!v40)
              goto LABEL_67;
          }
          else
          {
            v26 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_39:
            v42 = v26;
            *((_BYTE *)this + 83) = v27 != 0;
          }
          goto LABEL_46;
        case 6u:
          if (v9 != 50)
            goto LABEL_48;
          *((_DWORD *)this + 12) |= 4u;
          v29 = *((_QWORD *)this + 1);
          v12 = (google::protobuf::internal::ArenaImpl *)(v29 & 0xFFFFFFFFFFFFFFFELL);
          if ((v29 & 1) != 0)
            v12 = *(google::protobuf::internal::ArenaImpl **)v12;
          v13 = (uint64_t **)((char *)this + 72);
LABEL_44:
          v30 = (std::string *)google::protobuf::internal::ArenaStringPtr::Mutable(v13, v12);
          v31 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v30, (std::string::value_type *)v42, (uint64_t)a3);
          goto LABEL_45;
        default:
          if (v9 >> 3 == 200 && v9 == 64)
          {
            v5 |= 8u;
            v14 = (google::protobuf::internal *)((char *)v8 + 1);
            v15 = *(unsigned __int8 *)v8;
            if ((*(char *)v8 & 0x80000000) == 0)
              goto LABEL_18;
            v16 = *(char *)v14;
            v15 = v15 + (v16 << 7) - 128;
            if ((v16 & 0x80000000) == 0)
            {
              v14 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_18:
              v42 = v14;
              *((_BYTE *)this + 80) = v15 != 0;
              goto LABEL_46;
            }
            v34 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v8, v15);
            v42 = v34;
            *((_BYTE *)this + 80) = v35 != 0;
            if (!v34)
              goto LABEL_67;
          }
          else
          {
LABEL_48:
            if (v9)
              v32 = (v9 & 7) == 4;
            else
              v32 = 1;
            if (v32)
            {
              a3[10].i32[0] = v9 - 1;
              goto LABEL_2;
            }
            if (v9 < 0x648)
            {
              if ((*v7 & 1) != 0)
              {
                v33 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
              }
              else
              {
                v33 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
                v8 = v42;
              }
              v31 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, v33, v8, (google::protobuf::internal::ParseContext *)a3);
            }
            else
            {
              v31 = (google::protobuf::internal *)google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::NormalizerSpec *)((char *)this + 24), v9, v8, (uint64_t)&sentencepiece::_NormalizerSpec_default_instance_, (uint64_t *)this + 1, a3);
            }
LABEL_45:
            v42 = v31;
            if (!v31)
            {
LABEL_67:
              v42 = 0;
              goto LABEL_2;
            }
          }
LABEL_46:
          if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v42, a3[11].i32[1]) & 1) != 0)goto LABEL_2;
          break;
      }
    }
  }
LABEL_2:
  *((_DWORD *)this + 12) |= v5;
  return v42;
}

unsigned __int8 *sentencepiece::NormalizerSpec::_InternalSerialize(sentencepiece::NormalizerSpec *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  char v7;
  char v8;
  char v9;
  char v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a2;
  v6 = *((_DWORD *)this + 12);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 7) & 0xFFFFFFFFFFFFFFFELL, a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFFFFELL, v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_4:
    if ((v6 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_11:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v7 = *((_BYTE *)this + 81);
  *v4 = 24;
  v4[1] = v7;
  v4 += 2;
  if ((v6 & 0x20) == 0)
  {
LABEL_5:
    if ((v6 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_14:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v8 = *((_BYTE *)this + 82);
  *v4 = 32;
  v4[1] = v8;
  v4 += 2;
  if ((v6 & 0x40) == 0)
  {
LABEL_6:
    if ((v6 & 4) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_17:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v9 = *((_BYTE *)this + 83);
  *v4 = 40;
  v4[1] = v9;
  v4 += 2;
  if ((v6 & 4) == 0)
  {
LABEL_7:
    if ((v6 & 8) == 0)
      goto LABEL_24;
    goto LABEL_21;
  }
LABEL_20:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFFFFELL, v4);
  if ((v6 & 8) == 0)
    goto LABEL_24;
LABEL_21:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v10 = *((_BYTE *)this + 80);
  *(_WORD *)v4 = 3264;
  v4[2] = v10;
  v4 += 3;
LABEL_24:
  v11 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::NormalizerSpec *)((char *)this + 24), 201, 0x20000000, (unsigned __int8 *)v4, a3);
  v12 = v11;
  v13 = *((_QWORD *)this + 1);
  if ((v13 & 1) == 0)
    return v12;
  v15 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v15 + 31) < 0)
  {
    v16 = *(void **)(v15 + 8);
    v17 = *(_QWORD *)(v15 + 16);
  }
  else
  {
    v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v11 >= (int)v17)
  {
    v18 = (int)v17;
    memcpy(v11, v16, (int)v17);
    v12 += v18;
    return v12;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v16, v17, v11);
}

uint64_t sentencepiece::NormalizerSpec::ByteSizeLong(sentencepiece::NormalizerSpec *this)
{
  uint64_t result;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  result = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::NormalizerSpec *)((char *)this + 24));
  v3 = *((_DWORD *)this + 12);
  if ((v3 & 0x7F) == 0)
    goto LABEL_17;
  if ((v3 & 1) == 0)
  {
    if ((v3 & 2) == 0)
      goto LABEL_4;
LABEL_22:
    v12 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFFFFELL;
    v13 = *(unsigned __int8 *)(v12 + 23);
    v14 = *(_QWORD *)(v12 + 8);
    if ((v13 & 0x80u) == 0)
      v14 = v13;
    result += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 4) == 0)
      goto LABEL_8;
    goto LABEL_5;
  }
  v9 = *((_QWORD *)this + 7) & 0xFFFFFFFFFFFFFFFELL;
  v10 = *(unsigned __int8 *)(v9 + 23);
  v11 = *(_QWORD *)(v9 + 8);
  if ((v10 & 0x80u) == 0)
    v11 = v10;
  result += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 2) != 0)
    goto LABEL_22;
LABEL_4:
  if ((v3 & 4) != 0)
  {
LABEL_5:
    v4 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFFFFELL;
    v5 = *(unsigned __int8 *)(v4 + 23);
    v6 = *(_QWORD *)(v4 + 8);
    if ((v5 & 0x80u) == 0)
      v6 = v5;
    result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  v7 = result + 3;
  if ((v3 & 8) == 0)
    v7 = result;
  if ((v3 & 0x10) != 0)
    v7 += 2;
  if ((v3 & 0x20) != 0)
    v7 += 2;
  if ((v3 & 0x40) != 0)
    result = v7 + 2;
  else
    result = v7;
LABEL_17:
  v8 = *((_QWORD *)this + 1);
  if ((v8 & 1) != 0)
  {
    v15 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v15 + 31) < 0)
      v16 = *(_QWORD *)(v15 + 16);
    else
      v16 = *(unsigned __int8 *)(v15 + 31);
    result += v16;
  }
  *((_DWORD *)this + 13) = result;
  return result;
}

void sentencepiece::NormalizerSpec::CheckTypeAndMergeFrom(sentencepiece::NormalizerSpec *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::NormalizerSpec *__hidden))a2 != &off_1E2DF09D8)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::NormalizerSpec::MergeFrom(this, a2);
}

void sentencepiece::NormalizerSpec::MergeFrom(sentencepiece::NormalizerSpec *this, const sentencepiece::NormalizerSpec *a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  google::protobuf::internal::ArenaImpl *v16;
  __int128 *v17;
  uint64_t v18;
  google::protobuf::internal::ArenaImpl *v19;
  __int128 *v20;
  uint64_t v21;
  google::protobuf::internal::ArenaImpl *v22;
  char v23;
  std::string v24[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2246);
    v4 = google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::NormalizerSpec *)((char *)this + 24), (const sentencepiece::NormalizerSpec *)((char *)a2 + 24));
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  v13 = *((_DWORD *)a2 + 12);
  if ((v13 & 0x7F) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*((_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 12) |= 1u;
      v15 = *((_QWORD *)this + 1);
      v16 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = *(google::protobuf::internal::ArenaImpl **)v16;
      google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::NormalizerSpec *)((char *)this + 56), v14, v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0)
          goto LABEL_17;
        goto LABEL_30;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    v17 = (__int128 *)(*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 12) |= 2u;
    v18 = *((_QWORD *)this + 1);
    v19 = (google::protobuf::internal::ArenaImpl *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if ((v18 & 1) != 0)
      v19 = *(google::protobuf::internal::ArenaImpl **)v19;
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::NormalizerSpec *)((char *)this + 64), v17, v19);
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0)
        goto LABEL_18;
      goto LABEL_33;
    }
LABEL_30:
    v20 = (__int128 *)(*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 12) |= 4u;
    v21 = *((_QWORD *)this + 1);
    v22 = (google::protobuf::internal::ArenaImpl *)(v21 & 0xFFFFFFFFFFFFFFFELL);
    if ((v21 & 1) != 0)
      v22 = *(google::protobuf::internal::ArenaImpl **)v22;
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::NormalizerSpec *)((char *)this + 72), v20, v22);
    if ((v13 & 8) == 0)
    {
LABEL_18:
      if ((v13 & 0x10) == 0)
        goto LABEL_19;
      goto LABEL_34;
    }
LABEL_33:
    *((_BYTE *)this + 80) = *((_BYTE *)a2 + 80);
    if ((v13 & 0x10) == 0)
    {
LABEL_19:
      if ((v13 & 0x20) == 0)
        goto LABEL_20;
      goto LABEL_35;
    }
LABEL_34:
    *((_BYTE *)this + 81) = *((_BYTE *)a2 + 81);
    if ((v13 & 0x20) == 0)
    {
LABEL_20:
      if ((v13 & 0x40) == 0)
      {
LABEL_22:
        *((_DWORD *)this + 12) |= v13;
        return;
      }
LABEL_21:
      *((_BYTE *)this + 83) = *((_BYTE *)a2 + 83);
      goto LABEL_22;
    }
LABEL_35:
    *((_BYTE *)this + 82) = *((_BYTE *)a2 + 82);
    if ((v13 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
}

void sub_191D23830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::NormalizerSpec::IsInitialized(sentencepiece::NormalizerSpec *this)
{
  return google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::NormalizerSpec *)((char *)this + 24));
}

_QWORD *sentencepiece::NormalizerSpec::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.NormalizerSpec");
}

void sentencepiece::SelfTestData_Sample::~SelfTestData_Sample(sentencepiece::SelfTestData_Sample *this)
{
  sentencepiece::SelfTestData_Sample::SharedDtor(this);
  google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1);
}

{
  sentencepiece::SelfTestData_Sample::~SelfTestData_Sample(this);
  JUMPOUT(0x19401E994);
}

google::protobuf::internal::ArenaStringPtr *sentencepiece::SelfTestData_Sample::SharedDtor(sentencepiece::SelfTestData_Sample *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  google::protobuf::internal::ArenaStringPtr *result;
  uint64_t v6;
  uint64_t v7;
  google::protobuf::internal::ArenaStringPtr *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  std::string v13[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2362);
    v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  result = (sentencepiece::SelfTestData_Sample *)((char *)this + 24);
  if (*((uint64_t **)this + 3) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v6 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(result);
    v7 = v6;
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    result = (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x19401E994](v7, 0x1012C40EC159624);
  }
  v9 = (uint64_t *)*((_QWORD *)this + 4);
  v8 = (sentencepiece::SelfTestData_Sample *)((char *)this + 32);
  if (v9 != &google::protobuf::internal::fixed_address_empty_string)
  {
    v10 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(v8);
    v11 = v10;
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    return (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x19401E994](v11, 0x1012C40EC159624);
  }
  return result;
}

void sub_191D2399C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SelfTestData_Sample::Clear(uint64_t this)
{
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_DWORD *)(this + 16);
  if ((v1 & 3) != 0)
  {
    if ((v1 & 1) != 0)
    {
      v2 = *(_QWORD *)(this + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v2 + 23) < 0)
      {
        **(_BYTE **)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
        if ((v1 & 2) == 0)
          goto LABEL_11;
        goto LABEL_6;
      }
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
    if ((v1 & 2) == 0)
      goto LABEL_11;
LABEL_6:
    v3 = *(_QWORD *)(this + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  *(_DWORD *)(this + 16) = 0;
  v4 = *(_QWORD *)(this + 8);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(_BYTE **)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 31) = 0;
    }
  }
  return this;
}

google::protobuf::internal *sentencepiece::SelfTestData_Sample::_InternalParse(sentencepiece::SelfTestData_Sample *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  _QWORD *v6;
  google::protobuf::internal *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v11;
  std::string *v12;
  google::protobuf::internal *v13;
  uint64_t v14;
  google::protobuf::internal::ArenaImpl *v15;
  uint64_t **v16;
  uint64_t v17;
  std::string *v18;
  google::protobuf::internal *TagFallback;
  unsigned int v20;
  google::protobuf::internal *v21;

  v21 = a2;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v21, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    v6 = (_QWORD *)((char *)this + 8);
    while (1)
    {
      v7 = (google::protobuf::internal *)((char *)v21 + 1);
      v8 = *(unsigned __int8 *)v21;
      if ((*(char *)v21 & 0x80000000) == 0)
        goto LABEL_7;
      v9 = v8 + (*(unsigned __int8 *)v7 << 7);
      v8 = v9 - 128;
      if ((*(char *)v7 & 0x80000000) == 0)
        break;
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v21, (const char *)(v9 - 128));
      v21 = TagFallback;
      if (!TagFallback)
        return 0;
      v7 = TagFallback;
      v8 = v20;
LABEL_8:
      if (v8 >> 3 == 2)
      {
        if (v8 == 18)
        {
          *((_DWORD *)this + 4) |= 2u;
          v14 = *((_QWORD *)this + 1);
          v15 = (google::protobuf::internal::ArenaImpl *)(v14 & 0xFFFFFFFFFFFFFFFELL);
          if ((v14 & 1) != 0)
            v15 = *(google::protobuf::internal::ArenaImpl **)v15;
          v16 = (uint64_t **)((char *)this + 32);
          goto LABEL_27;
        }
      }
      else if (v8 >> 3 == 1 && v8 == 10)
      {
        *((_DWORD *)this + 4) |= 1u;
        v17 = *((_QWORD *)this + 1);
        v15 = (google::protobuf::internal::ArenaImpl *)(v17 & 0xFFFFFFFFFFFFFFFELL);
        if ((v17 & 1) != 0)
          v15 = *(google::protobuf::internal::ArenaImpl **)v15;
        v16 = (uint64_t **)((char *)this + 24);
LABEL_27:
        v18 = (std::string *)google::protobuf::internal::ArenaStringPtr::Mutable(v16, v15);
        v13 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v18, (std::string::value_type *)v21, (uint64_t)a3);
        goto LABEL_28;
      }
      if (v8)
        v11 = (v8 & 7) == 4;
      else
        v11 = 1;
      if (v11)
      {
        *((_DWORD *)a3 + 20) = v8 - 1;
        return v21;
      }
      if ((*v6 & 1) != 0)
      {
        v12 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v12 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
        v7 = v21;
      }
      v13 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, v12, v7, a3);
LABEL_28:
      v21 = v13;
      if (!v13)
        return 0;
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v21, *((_DWORD *)a3 + 23)) & 1) != 0)
        return v21;
    }
    v7 = (google::protobuf::internal *)((char *)v21 + 2);
LABEL_7:
    v21 = v7;
    goto LABEL_8;
  }
  return v21;
}

unsigned __int8 *sentencepiece::SelfTestData_Sample::_InternalSerialize(sentencepiece::SelfTestData_Sample *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (unsigned __int8 *)a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v6 & 2) != 0)
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 4) & 0xFFFFFFFFFFFFFFFELL, (char *)v4);
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) == 0)
    return v4;
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 31) < 0)
  {
    v10 = *(void **)(v9 + 8);
    v11 = *(_QWORD *)(v9 + 16);
  }
  else
  {
    v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v11)
  {
    v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v10, v11, v4);
}

uint64_t sentencepiece::SelfTestData_Sample::ByteSizeLong(sentencepiece::SelfTestData_Sample *this)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) == 0)
  {
    v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v3 = *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFFELL;
  v4 = *(unsigned __int8 *)(v3 + 23);
  v5 = *(_QWORD *)(v3 + 8);
  if ((v4 & 0x80u) == 0)
    v5 = v4;
  v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    v6 = *((_QWORD *)this + 4) & 0xFFFFFFFFFFFFFFFELL;
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) != 0)
  {
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0)
      v12 = *(_QWORD *)(v11 + 16);
    else
      v12 = *(unsigned __int8 *)(v11 + 31);
    v2 += v12;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void sentencepiece::SelfTestData_Sample::CheckTypeAndMergeFrom(sentencepiece::SelfTestData_Sample *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::SelfTestData_Sample *__hidden))a2 != &off_1E2DF0B38)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::SelfTestData_Sample::MergeFrom(this, a2);
}

void sentencepiece::SelfTestData_Sample::MergeFrom(sentencepiece::SelfTestData_Sample *this, const sentencepiece::SelfTestData_Sample *a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  google::protobuf::internal::ArenaImpl *v16;
  __int128 *v17;
  uint64_t v18;
  google::protobuf::internal::ArenaImpl *v19;
  char v20;
  std::string v21[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2516);
    v4 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  v13 = *((_DWORD *)a2 + 4);
  if ((v13 & 3) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*((_QWORD *)a2 + 3) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 4) |= 1u;
      v15 = *((_QWORD *)this + 1);
      v16 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = *(google::protobuf::internal::ArenaImpl **)v16;
      google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::SelfTestData_Sample *)((char *)this + 24), v14, v16);
    }
    if ((v13 & 2) != 0)
    {
      v17 = (__int128 *)(*((_QWORD *)a2 + 4) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 4) |= 2u;
      v18 = *((_QWORD *)this + 1);
      v19 = (google::protobuf::internal::ArenaImpl *)(v18 & 0xFFFFFFFFFFFFFFFELL);
      if ((v18 & 1) != 0)
        v19 = *(google::protobuf::internal::ArenaImpl **)v19;
      google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::SelfTestData_Sample *)((char *)this + 32), v17, v19);
    }
  }
}

void sub_191D23F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SelfTestData_Sample::IsInitialized(sentencepiece::SelfTestData_Sample *this)
{
  return 1;
}

_QWORD *sentencepiece::SelfTestData_Sample::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.SelfTestData.Sample");
}

uint64_t sentencepiece::SelfTestData::SelfTestData(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E2DF0868;
  *(_QWORD *)(a1 + 8) = a2;
  google::protobuf::internal::ExtensionSet::ExtensionSet(a1 + 16, a2);
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  if (atomic_load(scc_info_SelfTestData_sentencepiece_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SelfTestData_sentencepiece_5fmodel_2eproto);
  return a1;
}

void sub_191D23FCC(_Unwind_Exception *a1)
{
  google::protobuf::internal::ExtensionSet *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;

  google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::~RepeatedPtrField(v2);
  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::SelfTestData::~SelfTestData(sentencepiece::SelfTestData *this)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v3 = (uint64_t *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  v4 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) != 0)
  {
    if (!*v4)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v4)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2589);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  google::protobuf::internal::InternalMetadata::Delete<std::string>(v3);
  google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::~RepeatedPtrField((sentencepiece::SelfTestData *)((char *)this + 40));
  google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::SelfTestData *)((char *)this + 16));
}

{
  sentencepiece::SelfTestData::~SelfTestData(this);
  JUMPOUT(0x19401E994);
}

void sub_191D24084(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  __clang_call_terminate(a1);
}

void sentencepiece::SelfTestData::Clear(sentencepiece::SelfTestData *this)
{
  uint64_t v2;
  unint64_t v3;

  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::SelfTestData *)((char *)this + 16));
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>((uint64_t)this + 40);
  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 31) < 0)
    {
      **(_BYTE **)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v3 + 8) = 0;
      *(_BYTE *)(v3 + 31) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::SelfTestData::_InternalParse(sentencepiece::SelfTestData *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  _QWORD *v5;
  google::protobuf::internal *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned __int8 *v10;
  char *v11;
  google::protobuf::internal *v12;
  int *v13;
  uint64_t v14;
  int v15;
  sentencepiece::SelfTestData_Sample *v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  google::protobuf::internal *TagFallback;
  unsigned int v21;
  google::protobuf::internal *v23;

  v23 = a2;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v23, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    v5 = (_QWORD *)((char *)this + 8);
    while (1)
    {
      v6 = (google::protobuf::internal *)((char *)v23 + 1);
      v7 = *(unsigned __int8 *)v23;
      if ((*(char *)v23 & 0x80000000) == 0)
        goto LABEL_6;
      v8 = v7 + (*(unsigned __int8 *)v6 << 7);
      v7 = v8 - 128;
      if ((*(char *)v6 & 0x80000000) == 0)
        break;
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v23, (const char *)(v8 - 128));
      v23 = TagFallback;
      if (!TagFallback)
        return 0;
      v6 = TagFallback;
      v7 = v21;
LABEL_7:
      if (v7 == 10)
      {
        v11 = (char *)v6 - 1;
        while (1)
        {
          v12 = (google::protobuf::internal *)(v11 + 1);
          v23 = (google::protobuf::internal *)(v11 + 1);
          v13 = (int *)*((_QWORD *)this + 7);
          if (!v13)
            break;
          v14 = *((int *)this + 12);
          v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *((_DWORD *)this + 13))
            {
LABEL_20:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 10, v15 + 1);
              v13 = (int *)*((_QWORD *)this + 7);
              v15 = *v13;
            }
            *v13 = v15 + 1;
            v16 = (sentencepiece::SelfTestData_Sample *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData_Sample>(*((_QWORD *)this + 5));
            v17 = *((_QWORD *)this + 7);
            v18 = *((int *)this + 12);
            *((_DWORD *)this + 12) = v18 + 1;
            *(_QWORD *)(v17 + 8 * v18 + 8) = v16;
            v12 = v23;
            goto LABEL_22;
          }
          *((_DWORD *)this + 12) = v14 + 1;
          v16 = *(sentencepiece::SelfTestData_Sample **)&v13[2 * v14 + 2];
LABEL_22:
          v11 = google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SelfTestData_Sample>(a3, v16, v12);
          v23 = (google::protobuf::internal *)v11;
          if (!v11)
            return 0;
          if (*(_QWORD *)a3 <= (unint64_t)v11 || *v11 != 10)
            goto LABEL_30;
        }
        v15 = *((_DWORD *)this + 13);
        goto LABEL_20;
      }
      if (v7)
        v9 = (v7 & 7) == 4;
      else
        v9 = 1;
      if (v9)
      {
        *((_DWORD *)a3 + 20) = v7 - 1;
        return v23;
      }
      if (v7 < 0x640)
      {
        if ((*v5 & 1) != 0)
        {
          v19 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v19 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
          v6 = v23;
        }
        v10 = google::protobuf::internal::UnknownFieldParse(v7, v19, v6, a3);
      }
      else
      {
        v10 = google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::SelfTestData *)((char *)this + 16), v7, v6, (uint64_t)&sentencepiece::_SelfTestData_default_instance_, (uint64_t *)this + 1, (int32x2_t *)a3);
      }
      v23 = (google::protobuf::internal *)v10;
      if (!v10)
        return 0;
LABEL_30:
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v23, *((_DWORD *)a3 + 23)))return v23;
    }
    v6 = (google::protobuf::internal *)((char *)v23 + 2);
LABEL_6:
    v23 = v6;
    goto LABEL_7;
  }
  return v23;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SelfTestData_Sample>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::SelfTestData_Sample *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)sentencepiece::SelfTestData_Sample::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

unsigned __int8 *sentencepiece::SelfTestData::_InternalSerialize(sentencepiece::SelfTestData *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6;
  int i;
  sentencepiece::SelfTestData_Sample *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *((_DWORD *)this + 12);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v8 = (sentencepiece::SelfTestData_Sample *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>((uint64_t)this + 40, i);
      *a2 = 10;
      v9 = *((_DWORD *)v8 + 5);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v10 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v10 - 1) = v11 | 0x80;
            v12 = v11 >> 7;
            ++v10;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          v10 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v9;
        v10 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)sentencepiece::SelfTestData_Sample::_InternalSerialize(v8, (char *)v10, a3);
    }
  }
  v14 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::SelfTestData *)((char *)this + 16), 200, 0x20000000, (unsigned __int8 *)a2, a3);
  v15 = v14;
  v16 = *((_QWORD *)this + 1);
  if ((v16 & 1) == 0)
    return v15;
  v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v18 + 31) < 0)
  {
    v19 = *(void **)(v18 + 8);
    v20 = *(_QWORD *)(v18 + 16);
  }
  else
  {
    v19 = (void *)(v18 + 8);
    LODWORD(v20) = *(unsigned __int8 *)(v18 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v14 >= (int)v20)
  {
    v21 = (int)v20;
    memcpy(v14, v19, (int)v20);
    v15 += v21;
    return v15;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v19, v20, v14);
}

uint64_t sentencepiece::SelfTestData::ByteSizeLong(sentencepiece::SelfTestData *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sentencepiece::SelfTestData_Sample **v6;
  uint64_t v7;
  sentencepiece::SelfTestData_Sample *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;

  v2 = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::SelfTestData *)((char *)this + 16));
  v3 = *((int *)this + 12);
  v4 = v2 + v3;
  v5 = *((_QWORD *)this + 7);
  if (v5)
    v6 = (sentencepiece::SelfTestData_Sample **)(v5 + 8);
  else
    v6 = 0;
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      v9 = sentencepiece::SelfTestData_Sample::ByteSizeLong(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  v10 = *((_QWORD *)this + 1);
  if ((v10 & 1) != 0)
  {
    v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v12 + 31) < 0)
      v13 = *(_QWORD *)(v12 + 16);
    else
      v13 = *(unsigned __int8 *)(v12 + 31);
    v4 += v13;
  }
  *((_DWORD *)this + 16) = v4;
  return v4;
}

void sentencepiece::SelfTestData::CheckTypeAndMergeFrom(sentencepiece::SelfTestData *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::SelfTestData *__hidden))a2 != &off_1E2DF0868)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::SelfTestData::MergeFrom(this, a2);
}

void sentencepiece::SelfTestData::MergeFrom(sentencepiece::SelfTestData *this, const sentencepiece::SelfTestData *a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  char v13;
  std::string v14[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2724);
    v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::SelfTestData *)((char *)this + 16), (const sentencepiece::SelfTestData *)((char *)a2 + 16));
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>((uint64_t)this + 40, (uint64_t)a2 + 40);
}

void sub_191D24728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SelfTestData::IsInitialized(sentencepiece::SelfTestData *this)
{
  return google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::SelfTestData *)((char *)this + 16));
}

_QWORD *sentencepiece::SelfTestData::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.SelfTestData");
}

_QWORD *sentencepiece::ModelProto_SentencePiece::ModelProto_SentencePiece(_QWORD *a1, uint64_t a2)
{
  *a1 = &off_1E2DF0F60;
  a1[1] = a2;
  google::protobuf::internal::ExtensionSet::ExtensionSet((uint64_t)(a1 + 2), a2);
  a1[5] = 0;
  if (atomic_load(scc_info_ModelProto_SentencePiece_sentencepiece_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ModelProto_SentencePiece_sentencepiece_5fmodel_2eproto);
  a1[6] = &google::protobuf::internal::fixed_address_empty_string;
  a1[7] = 0x100000000;
  return a1;
}

void sub_191D247C4(_Unwind_Exception *a1)
{
  google::protobuf::internal::ExtensionSet *v1;

  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelProto_SentencePiece::~ModelProto_SentencePiece(sentencepiece::ModelProto_SentencePiece *this)
{
  sentencepiece::ModelProto_SentencePiece::SharedDtor(this);
  google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16));
}

{
  sentencepiece::ModelProto_SentencePiece::~ModelProto_SentencePiece(this);
  JUMPOUT(0x19401E994);
}

void sentencepiece::ModelProto_SentencePiece::SharedDtor(sentencepiece::ModelProto_SentencePiece *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  google::protobuf::internal::ArenaStringPtr *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  std::string v10[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2813);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  v6 = (uint64_t *)*((_QWORD *)this + 6);
  v5 = (sentencepiece::ModelProto_SentencePiece *)((char *)this + 48);
  if (v6 != &google::protobuf::internal::fixed_address_empty_string)
  {
    v7 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(v5);
    v8 = v7;
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    MEMORY[0x19401E994](v8, 0x1012C40EC159624);
  }
}

void sub_191D248D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelProto_SentencePiece::Clear(sentencepiece::ModelProto_SentencePiece *this)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16));
  v2 = *((_DWORD *)this + 10);
  if ((v2 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  if ((v2 & 6) != 0)
    *((_QWORD *)this + 7) = 0x100000000;
  *((_DWORD *)this + 10) = 0;
  v4 = *((_QWORD *)this + 1);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(_BYTE **)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 31) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::ModelProto_SentencePiece::_InternalParse(sentencepiece::ModelProto_SentencePiece *this, google::protobuf::internal *a2, int32x2_t *a3)
{
  int v5;
  _QWORD *v7;
  google::protobuf::internal *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v13;
  google::protobuf::internal *v14;
  google::protobuf::internal *v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  google::protobuf::internal::ArenaImpl *v20;
  std::string *v21;
  google::protobuf::internal *TagFallback;
  unsigned int v23;
  std::string *v24;
  unint64_t v25;
  std::string *v26;
  google::protobuf::internal *v27;

  v27 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v27, a3[11].i32[1]) & 1) == 0)
  {
    v7 = (_QWORD *)((char *)this + 8);
    while (1)
    {
      v8 = (google::protobuf::internal *)((char *)v27 + 1);
      v9 = *(unsigned __int8 *)v27;
      if ((*(char *)v27 & 0x80000000) == 0)
        goto LABEL_7;
      v10 = v9 + (*(unsigned __int8 *)v8 << 7);
      v9 = v10 - 128;
      if ((*(char *)v8 & 0x80000000) == 0)
        break;
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v27, (const char *)(v10 - 128));
      v27 = TagFallback;
      if (!TagFallback)
        goto LABEL_48;
      v8 = TagFallback;
      v9 = v23;
LABEL_8:
      v11 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 24)
        {
          v15 = (google::protobuf::internal *)((char *)v8 + 1);
          v16 = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0)
            goto LABEL_24;
          v17 = *(char *)v15;
          v18 = v16 + (v17 << 7);
          v16 = (v18 - 128);
          if (v17 < 0)
          {
            v27 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v8, (v18 - 128));
            if (!v27)
            {
LABEL_48:
              v27 = 0;
              goto LABEL_2;
            }
            v16 = v25;
          }
          else
          {
            v15 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_24:
            v27 = v15;
          }
          if ((v16 - 1) > 5)
          {
            if ((*v7 & 1) != 0)
              v26 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
            else
              v26 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
            google::protobuf::internal::WriteVarint(3, v16, v26);
          }
          else
          {
            *((_DWORD *)this + 10) |= 4u;
            *((_DWORD *)this + 15) = v16;
          }
          goto LABEL_38;
        }
      }
      else if (v11 == 2)
      {
        if (v9 == 21)
        {
          v5 |= 2u;
          *((_DWORD *)this + 14) = *(_DWORD *)v8;
          v27 = (google::protobuf::internal *)((char *)v8 + 4);
          goto LABEL_38;
        }
      }
      else if (v11 == 1 && v9 == 10)
      {
        *((_DWORD *)this + 10) |= 1u;
        v19 = *((_QWORD *)this + 1);
        v20 = (google::protobuf::internal::ArenaImpl *)(v19 & 0xFFFFFFFFFFFFFFFELL);
        if ((v19 & 1) != 0)
          v20 = *(google::protobuf::internal::ArenaImpl **)v20;
        v21 = (std::string *)google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)this + 6, v20);
        v14 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v21, (std::string::value_type *)v27, (uint64_t)a3);
        goto LABEL_37;
      }
      if (v9)
        v13 = (v9 & 7) == 4;
      else
        v13 = 1;
      if (v13)
      {
        a3[10].i32[0] = v9 - 1;
        goto LABEL_2;
      }
      if (v9 < 0x640)
      {
        if ((*v7 & 1) != 0)
        {
          v24 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v24 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
          v8 = v27;
        }
        v14 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, v24, v8, (google::protobuf::internal::ParseContext *)a3);
      }
      else
      {
        v14 = (google::protobuf::internal *)google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16), v9, v8, (uint64_t)sentencepiece::_ModelProto_SentencePiece_default_instance_, (uint64_t *)this + 1, a3);
      }
LABEL_37:
      v27 = v14;
      if (!v14)
        goto LABEL_48;
LABEL_38:
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v27, a3[11].i32[1]) & 1) != 0)goto LABEL_2;
    }
    v8 = (google::protobuf::internal *)((char *)v27 + 2);
LABEL_7:
    v27 = v8;
    goto LABEL_8;
  }
LABEL_2:
  *((_DWORD *)this + 10) |= v5;
  return v27;
}

unsigned __int8 *sentencepiece::ModelProto_SentencePiece::_InternalSerialize(sentencepiece::ModelProto_SentencePiece *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a2;
  v6 = *((_DWORD *)this + 10);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFFELL, a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_18;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v7 = *((_DWORD *)this + 14);
  *v4 = 21;
  *(_DWORD *)(v4 + 1) = v7;
  v4 += 5;
  if ((v6 & 4) != 0)
  {
LABEL_9:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v8 = *((int *)this + 15);
    *v4 = 24;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      v9 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v9 | 0x80;
          v10 = v9 >> 7;
          ++v4;
          v11 = v9 >> 14;
          v9 >>= 7;
        }
        while (v11);
        *(v4 - 1) = v10;
      }
      else
      {
        v4[2] = v9;
        v4 += 3;
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
    }
  }
LABEL_18:
  v12 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16), 200, 0x20000000, (unsigned __int8 *)v4, a3);
  v13 = v12;
  v14 = *((_QWORD *)this + 1);
  if ((v14 & 1) == 0)
    return v13;
  v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 31) < 0)
  {
    v17 = *(void **)(v16 + 8);
    v18 = *(_QWORD *)(v16 + 16);
  }
  else
  {
    v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v12 >= (int)v18)
  {
    v19 = (int)v18;
    memcpy(v12, v17, (int)v18);
    v13 += v19;
    return v13;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v17, v18, v12);
}

uint64_t sentencepiece::ModelProto_SentencePiece::ByteSizeLong(sentencepiece::ModelProto_SentencePiece *this)
{
  uint64_t result;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  result = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16));
  v3 = *((_DWORD *)this + 10);
  if ((v3 & 7) != 0)
  {
    if ((v3 & 1) != 0)
    {
      v4 = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFFELL;
      v5 = *(unsigned __int8 *)(v4 + 23);
      v6 = *(_QWORD *)(v4 + 8);
      if ((v5 & 0x80u) == 0)
        v6 = v5;
      result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v3 & 2) != 0)
      result += 5;
    if ((v3 & 4) != 0)
    {
      v7 = *((_DWORD *)this + 15);
      if (v7 < 0)
        v8 = 11;
      else
        v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
      result += v8;
    }
  }
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) != 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0)
      v11 = *(_QWORD *)(v10 + 16);
    else
      v11 = *(unsigned __int8 *)(v10 + 31);
    result += v11;
  }
  *((_DWORD *)this + 11) = result;
  return result;
}

void sentencepiece::ModelProto_SentencePiece::CheckTypeAndMergeFrom(sentencepiece::ModelProto_SentencePiece *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::ModelProto_SentencePiece *__hidden))a2 != &off_1E2DF0F60)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::ModelProto_SentencePiece::MergeFrom(this, a2);
}

void sentencepiece::ModelProto_SentencePiece::MergeFrom(sentencepiece::ModelProto_SentencePiece *this, const sentencepiece::ModelProto_SentencePiece *a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  google::protobuf::internal::ArenaImpl *v16;
  char v17;
  std::string v18[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3001);
    v4 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16), (const sentencepiece::ModelProto_SentencePiece *)((char *)a2 + 16));
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  v13 = *((_DWORD *)a2 + 10);
  if ((v13 & 7) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 10) |= 1u;
      v15 = *((_QWORD *)this + 1);
      v16 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = *(google::protobuf::internal::ArenaImpl **)v16;
      google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::ModelProto_SentencePiece *)((char *)this + 48), v14, v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0)
        {
LABEL_18:
          *((_DWORD *)this + 10) |= v13;
          return;
        }
LABEL_17:
        *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
        goto LABEL_18;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
    if ((v13 & 4) == 0)
      goto LABEL_18;
    goto LABEL_17;
  }
}

void sub_191D25004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::ModelProto_SentencePiece::IsInitialized(sentencepiece::ModelProto_SentencePiece *this)
{
  return google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16));
}

_QWORD *sentencepiece::ModelProto_SentencePiece::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.ModelProto.SentencePiece");
}

uint64_t sentencepiece::ModelProto::ModelProto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E2DF0598;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_1E2DF06B0;
  google::protobuf::internal::ExtensionSet::ExtensionSet(a1 + 24, a2);
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (atomic_load(scc_info_ModelProto_sentencepiece_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ModelProto_sentencepiece_5fmodel_2eproto);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  return a1;
}

void sub_191D250B8(_Unwind_Exception *a1)
{
  google::protobuf::internal::ExtensionSet *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;

  google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::~RepeatedPtrField(v2);
  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelProto::~ModelProto(sentencepiece::ModelProto *this)
{
  sentencepiece::ModelProto::SharedDtor(this);
  google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1);
  google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::~RepeatedPtrField((sentencepiece::ModelProto *)((char *)this + 56));
  google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::ModelProto *)((char *)this + 24));
}

{
  sentencepiece::ModelProto::~ModelProto(this);
  JUMPOUT(0x19401E994);
}

void sentencepiece::ModelProto::SharedDtor(sentencepiece::ModelProto *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  sentencepiece::TrainerSpec *v5;
  sentencepiece::NormalizerSpec *v6;
  sentencepiece::SelfTestData *v7;
  sentencepiece::NormalizerSpec *v8;
  char v9;
  std::string v10[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3145);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  if (this != (sentencepiece::ModelProto *)&sentencepiece::_ModelProto_default_instance_)
  {
    v5 = (sentencepiece::TrainerSpec *)*((_QWORD *)this + 10);
    if (v5)
    {
      sentencepiece::TrainerSpec::~TrainerSpec(v5);
      MEMORY[0x19401E994]();
    }
    v6 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 11);
    if (v6)
    {
      sentencepiece::NormalizerSpec::~NormalizerSpec(v6);
      MEMORY[0x19401E994]();
    }
    v7 = (sentencepiece::SelfTestData *)*((_QWORD *)this + 12);
    if (v7)
    {
      sentencepiece::SelfTestData::~SelfTestData(v7);
      MEMORY[0x19401E994]();
    }
    v8 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 13);
    if (v8)
    {
      sentencepiece::NormalizerSpec::~NormalizerSpec(v8);
      MEMORY[0x19401E994]();
    }
  }
}

void sub_191D25224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'sentencepiece::ModelProto::~ModelProto(sentencepiece::ModelProto *this)
{
  sentencepiece::ModelProto::~ModelProto((sentencepiece::ModelProto *)((char *)this - 16));
}

{
  sentencepiece::ModelProto::~ModelProto((sentencepiece::ModelProto *)((char *)this - 16));
  JUMPOUT(0x19401E994);
}

void sentencepiece::ModelProto::Clear(sentencepiece::ModelProto *this)
{
  int v2;
  sentencepiece::TrainerSpec *v3;
  std::string *v4;
  sentencepiece::NormalizerSpec *v5;
  std::string *v6;
  sentencepiece::SelfTestData *v7;
  std::string *v8;
  sentencepiece::NormalizerSpec *v9;
  std::string *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  std::string v14[2];

  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::ModelProto *)((char *)this + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56);
  v2 = *((_DWORD *)this + 12);
  if ((v2 & 0xF) != 0)
  {
    if ((v2 & 1) != 0)
    {
      v3 = (sentencepiece::TrainerSpec *)*((_QWORD *)this + 10);
      if (!v3)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3178);
        v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: trainer_spec_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
        v3 = (sentencepiece::TrainerSpec *)*((_QWORD *)this + 10);
      }
      sentencepiece::TrainerSpec::Clear(v3);
    }
    if ((v2 & 2) != 0)
    {
      v5 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 11);
      if (!v5)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3182);
        v6 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: normalizer_spec_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v6->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
        v5 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 11);
      }
      sentencepiece::NormalizerSpec::Clear(v5);
    }
    if ((v2 & 4) != 0)
    {
      v7 = (sentencepiece::SelfTestData *)*((_QWORD *)this + 12);
      if (!v7)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3186);
        v8 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: self_test_data_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v8->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
        v7 = (sentencepiece::SelfTestData *)*((_QWORD *)this + 12);
      }
      sentencepiece::SelfTestData::Clear(v7);
    }
    if ((v2 & 8) != 0)
    {
      v9 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 13);
      if (!v9)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3190);
        v10 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: denormalizer_spec_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
        v9 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 13);
      }
      sentencepiece::NormalizerSpec::Clear(v9);
    }
  }
  *((_DWORD *)this + 12) = 0;
  v11 = *((_QWORD *)this + 1);
  if ((v11 & 1) != 0)
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v12 + 31) < 0)
    {
      **(_BYTE **)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 31) = 0;
    }
  }
}

void sub_191D25444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *sentencepiece::ModelProto::_InternalParse(sentencepiece::ModelProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  _QWORD *v6;
  google::protobuf::internal *v7;
  unsigned int v8;
  unsigned int v9;
  char *v10;
  google::protobuf::internal *v11;
  int *v12;
  uint64_t v13;
  int v14;
  sentencepiece::ModelProto_SentencePiece *v15;
  uint64_t v16;
  uint64_t v17;
  sentencepiece::TrainerSpec *v18;
  _QWORD *v19;
  google::protobuf::internal *v20;
  sentencepiece::NormalizerSpec *v21;
  _QWORD *v22;
  sentencepiece::SelfTestData *v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  google::protobuf::internal *TagFallback;
  unsigned int v28;
  std::string *v29;
  google::protobuf::internal *v30;

  v30 = a2;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v30, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    v6 = (_QWORD *)((char *)this + 8);
    while (2)
    {
      v7 = (google::protobuf::internal *)((char *)v30 + 1);
      v8 = *(unsigned __int8 *)v30;
      if (*(char *)v30 < 0)
      {
        v9 = v8 + (*(unsigned __int8 *)v7 << 7);
        v8 = v9 - 128;
        if (*(char *)v7 < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v30, (const char *)(v9 - 128));
          v30 = TagFallback;
          if (!TagFallback)
            return 0;
          v7 = TagFallback;
          v8 = v28;
LABEL_8:
          switch(v8 >> 3)
          {
            case 1u:
              if (v8 != 10)
                goto LABEL_49;
              v10 = (char *)v7 - 1;
              break;
            case 2u:
              if (v8 != 18)
                goto LABEL_49;
              *((_DWORD *)this + 12) |= 1u;
              v18 = (sentencepiece::TrainerSpec *)*((_QWORD *)this + 10);
              if (!v18)
              {
                v19 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
                if ((*v6 & 1) != 0)
                  v19 = (_QWORD *)*v19;
                v18 = (sentencepiece::TrainerSpec *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>((uint64_t)v19);
                *((_QWORD *)this + 10) = v18;
                v7 = v30;
              }
              v20 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::TrainerSpec>(a3, v18, v7);
              goto LABEL_46;
            case 3u:
              if (v8 != 26)
                goto LABEL_49;
              *((_DWORD *)this + 12) |= 2u;
              v21 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 11);
              if (v21)
                goto LABEL_45;
              v22 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
              if ((*v6 & 1) != 0)
                v22 = (_QWORD *)*v22;
              v21 = (sentencepiece::NormalizerSpec *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>((uint64_t)v22);
              *((_QWORD *)this + 11) = v21;
              goto LABEL_44;
            case 4u:
              if (v8 != 34)
                goto LABEL_49;
              *((_DWORD *)this + 12) |= 4u;
              v23 = (sentencepiece::SelfTestData *)*((_QWORD *)this + 12);
              if (!v23)
              {
                v24 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
                if ((*v6 & 1) != 0)
                  v24 = (_QWORD *)*v24;
                v23 = (sentencepiece::SelfTestData *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData>((uint64_t)v24);
                *((_QWORD *)this + 12) = v23;
                v7 = v30;
              }
              v20 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SelfTestData>(a3, v23, v7);
              goto LABEL_46;
            case 5u:
              if (v8 != 42)
                goto LABEL_49;
              *((_DWORD *)this + 12) |= 8u;
              v21 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 13);
              if (v21)
                goto LABEL_45;
              v25 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
              if ((*v6 & 1) != 0)
                v25 = (_QWORD *)*v25;
              v21 = (sentencepiece::NormalizerSpec *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>((uint64_t)v25);
              *((_QWORD *)this + 13) = v21;
LABEL_44:
              v7 = v30;
LABEL_45:
              v20 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::NormalizerSpec>(a3, v21, v7);
              goto LABEL_46;
            default:
LABEL_49:
              if (v8)
                v26 = (v8 & 7) == 4;
              else
                v26 = 1;
              if (v26)
              {
                *((_DWORD *)a3 + 20) = v8 - 1;
                return v30;
              }
              if (v8 < 0x640)
              {
                if ((*v6 & 1) != 0)
                {
                  v29 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
                }
                else
                {
                  v29 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
                  v7 = v30;
                }
                v20 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, v29, v7, a3);
              }
              else
              {
                v20 = (google::protobuf::internal *)google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::ModelProto *)((char *)this + 24), v8, v7, (uint64_t)&sentencepiece::_ModelProto_default_instance_, (uint64_t *)this + 1, (int32x2_t *)a3);
              }
LABEL_46:
              v30 = v20;
              if (!v20)
                return 0;
LABEL_47:
              if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v30, *((_DWORD *)a3 + 23)) & 1) != 0)return v30;
              continue;
          }
          while (1)
          {
            v11 = (google::protobuf::internal *)(v10 + 1);
            v30 = (google::protobuf::internal *)(v10 + 1);
            v12 = (int *)*((_QWORD *)this + 9);
            if (!v12)
              break;
            v13 = *((int *)this + 16);
            v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *((_DWORD *)this + 17))
              {
LABEL_16:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 14, v14 + 1);
                v12 = (int *)*((_QWORD *)this + 9);
                v14 = *v12;
              }
              *v12 = v14 + 1;
              v15 = (sentencepiece::ModelProto_SentencePiece *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto_SentencePiece>(*((_QWORD *)this + 7));
              v16 = *((_QWORD *)this + 9);
              v17 = *((int *)this + 16);
              *((_DWORD *)this + 16) = v17 + 1;
              *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
              v11 = v30;
              goto LABEL_18;
            }
            *((_DWORD *)this + 16) = v13 + 1;
            v15 = *(sentencepiece::ModelProto_SentencePiece **)&v12[2 * v13 + 2];
LABEL_18:
            v10 = google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::ModelProto_SentencePiece>(a3, v15, v11);
            v30 = (google::protobuf::internal *)v10;
            if (!v10)
              return 0;
            if (*(_QWORD *)a3 <= (unint64_t)v10 || *v10 != 10)
              goto LABEL_47;
          }
          v14 = *((_DWORD *)this + 17);
          goto LABEL_16;
        }
        v7 = (google::protobuf::internal *)((char *)v30 + 2);
      }
      break;
    }
    v30 = v7;
    goto LABEL_8;
  }
  return v30;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::ModelProto_SentencePiece>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::ModelProto_SentencePiece *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)sentencepiece::ModelProto_SentencePiece::_InternalParse(a2, (google::protobuf::internal *)v8, (int32x2_t *)this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::TrainerSpec>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::TrainerSpec *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)sentencepiece::TrainerSpec::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::NormalizerSpec>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::NormalizerSpec *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)sentencepiece::NormalizerSpec::_InternalParse(a2, (google::protobuf::internal *)v8, (int32x2_t *)this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SelfTestData>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::SelfTestData *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)sentencepiece::SelfTestData::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

unsigned __int8 *sentencepiece::ModelProto::_InternalSerialize(sentencepiece::ModelProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6;
  int i;
  sentencepiece::ModelProto_SentencePiece *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  sentencepiece::TrainerSpec *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  sentencepiece::NormalizerSpec *v21;
  unsigned int v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  sentencepiece::SelfTestData *v27;
  unsigned int v28;
  unsigned __int8 *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  sentencepiece::NormalizerSpec *v33;
  unsigned int v34;
  unsigned __int8 *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;

  v6 = *((_DWORD *)this + 16);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v8 = (sentencepiece::ModelProto_SentencePiece *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, i);
      *a2 = 10;
      v9 = *((_DWORD *)v8 + 11);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v10 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v10 - 1) = v11 | 0x80;
            v12 = v11 >> 7;
            ++v10;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          v10 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v9;
        v10 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)sentencepiece::ModelProto_SentencePiece::_InternalSerialize(v8, (char *)v10, a3);
    }
  }
  v14 = *((_DWORD *)this + 12);
  if ((v14 & 1) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v15 = (sentencepiece::TrainerSpec *)*((_QWORD *)this + 10);
    *a2 = 18;
    v16 = *((_DWORD *)v15 + 12);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      v18 = v16 >> 7;
      if (v16 >> 14)
      {
        v17 = (unsigned __int8 *)(a2 + 3);
        do
        {
          *(v17 - 1) = v18 | 0x80;
          v19 = v18 >> 7;
          ++v17;
          v20 = v18 >> 14;
          v18 >>= 7;
        }
        while (v20);
        *(v17 - 1) = v19;
      }
      else
      {
        a2[2] = v18;
        v17 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v16;
      v17 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)sentencepiece::TrainerSpec::_InternalSerialize(v15, v17, a3);
    if ((v14 & 2) == 0)
    {
LABEL_15:
      if ((v14 & 4) == 0)
        goto LABEL_16;
      goto LABEL_38;
    }
  }
  else if ((v14 & 2) == 0)
  {
    goto LABEL_15;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v21 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 11);
  *a2 = 26;
  v22 = *((_DWORD *)v21 + 13);
  if (v22 > 0x7F)
  {
    a2[1] = v22 | 0x80;
    v24 = v22 >> 7;
    if (v22 >> 14)
    {
      v23 = (unsigned __int8 *)(a2 + 3);
      do
      {
        *(v23 - 1) = v24 | 0x80;
        v25 = v24 >> 7;
        ++v23;
        v26 = v24 >> 14;
        v24 >>= 7;
      }
      while (v26);
      *(v23 - 1) = v25;
    }
    else
    {
      a2[2] = v24;
      v23 = (unsigned __int8 *)(a2 + 3);
    }
  }
  else
  {
    a2[1] = v22;
    v23 = (unsigned __int8 *)(a2 + 2);
  }
  a2 = (char *)sentencepiece::NormalizerSpec::_InternalSerialize(v21, (char *)v23, a3);
  if ((v14 & 4) == 0)
  {
LABEL_16:
    if ((v14 & 8) == 0)
      goto LABEL_58;
    goto LABEL_48;
  }
LABEL_38:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v27 = (sentencepiece::SelfTestData *)*((_QWORD *)this + 12);
  *a2 = 34;
  v28 = *((_DWORD *)v27 + 16);
  if (v28 > 0x7F)
  {
    a2[1] = v28 | 0x80;
    v30 = v28 >> 7;
    if (v28 >> 14)
    {
      v29 = (unsigned __int8 *)(a2 + 3);
      do
      {
        *(v29 - 1) = v30 | 0x80;
        v31 = v30 >> 7;
        ++v29;
        v32 = v30 >> 14;
        v30 >>= 7;
      }
      while (v32);
      *(v29 - 1) = v31;
    }
    else
    {
      a2[2] = v30;
      v29 = (unsigned __int8 *)(a2 + 3);
    }
  }
  else
  {
    a2[1] = v28;
    v29 = (unsigned __int8 *)(a2 + 2);
  }
  a2 = (char *)sentencepiece::SelfTestData::_InternalSerialize(v27, (char *)v29, a3);
  if ((v14 & 8) != 0)
  {
LABEL_48:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v33 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 13);
    *a2 = 42;
    v34 = *((_DWORD *)v33 + 13);
    if (v34 > 0x7F)
    {
      a2[1] = v34 | 0x80;
      v36 = v34 >> 7;
      if (v34 >> 14)
      {
        v35 = (unsigned __int8 *)(a2 + 3);
        do
        {
          *(v35 - 1) = v36 | 0x80;
          v37 = v36 >> 7;
          ++v35;
          v38 = v36 >> 14;
          v36 >>= 7;
        }
        while (v38);
        *(v35 - 1) = v37;
      }
      else
      {
        a2[2] = v36;
        v35 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v34;
      v35 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)sentencepiece::NormalizerSpec::_InternalSerialize(v33, (char *)v35, a3);
  }
LABEL_58:
  v39 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::ModelProto *)((char *)this + 24), 200, 0x20000000, (unsigned __int8 *)a2, a3);
  v40 = v39;
  v41 = *((_QWORD *)this + 1);
  if ((v41 & 1) == 0)
    return v40;
  v43 = v41 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v43 + 31) < 0)
  {
    v44 = *(void **)(v43 + 8);
    v45 = *(_QWORD *)(v43 + 16);
  }
  else
  {
    v44 = (void *)(v43 + 8);
    LODWORD(v45) = *(unsigned __int8 *)(v43 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v39 >= (int)v45)
  {
    v46 = (int)v45;
    memcpy(v39, v44, (int)v45);
    v40 += v46;
    return v40;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v44, v45, v39);
}

uint64_t sentencepiece::ModelProto::ByteSizeLong(sentencepiece::ModelProto *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sentencepiece::ModelProto_SentencePiece **v6;
  uint64_t v7;
  sentencepiece::ModelProto_SentencePiece *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::ModelProto *)((char *)this + 24));
  v3 = *((int *)this + 16);
  v4 = v2 + v3;
  v5 = *((_QWORD *)this + 9);
  if (v5)
    v6 = (sentencepiece::ModelProto_SentencePiece **)(v5 + 8);
  else
    v6 = 0;
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      v9 = sentencepiece::ModelProto_SentencePiece::ByteSizeLong(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  v10 = *((_DWORD *)this + 12);
  if ((v10 & 0xF) == 0)
    goto LABEL_13;
  if ((v10 & 1) == 0)
  {
    if ((v10 & 2) == 0)
      goto LABEL_10;
LABEL_16:
    v15 = sentencepiece::NormalizerSpec::ByteSizeLong(*((sentencepiece::NormalizerSpec **)this + 11));
    v4 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v10 & 4) == 0)
    {
LABEL_11:
      if ((v10 & 8) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_17;
  }
  v14 = sentencepiece::TrainerSpec::ByteSizeLong(*((sentencepiece::TrainerSpec **)this + 10));
  v4 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 2) != 0)
    goto LABEL_16;
LABEL_10:
  if ((v10 & 4) == 0)
    goto LABEL_11;
LABEL_17:
  v16 = sentencepiece::SelfTestData::ByteSizeLong(*((sentencepiece::SelfTestData **)this + 12));
  v4 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 8) != 0)
  {
LABEL_12:
    v11 = sentencepiece::NormalizerSpec::ByteSizeLong(*((sentencepiece::NormalizerSpec **)this + 13));
    v4 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_13:
  v12 = *((_QWORD *)this + 1);
  if ((v12 & 1) != 0)
  {
    v17 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v17 + 31) < 0)
      v18 = *(_QWORD *)(v17 + 16);
    else
      v18 = *(unsigned __int8 *)(v17 + 31);
    v4 += v18;
  }
  *((_DWORD *)this + 13) = v4;
  return v4;
}

void sentencepiece::ModelProto::CheckTypeAndMergeFrom(sentencepiece::ModelProto *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::ModelProto *__hidden))a2 != &off_1E2DF0598)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::ModelProto::MergeFrom(this, a2);
}

void sentencepiece::ModelProto::MergeFrom(sentencepiece::ModelProto *this, const sentencepiece::ModelProto *a2)
{
  std::string *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  sentencepiece::TrainerSpec *v14;
  _QWORD *v15;
  const sentencepiece::TrainerSpec *v16;
  sentencepiece::NormalizerSpec *v17;
  _QWORD *v18;
  const sentencepiece::NormalizerSpec *v19;
  sentencepiece::SelfTestData *v20;
  _QWORD *v21;
  const sentencepiece::SelfTestData *v22;
  sentencepiece::NormalizerSpec *v23;
  _QWORD *v24;
  const sentencepiece::NormalizerSpec *v25;
  char v26;
  std::string v27[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3397);
    v4 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::ModelProto *)((char *)this + 24), (const sentencepiece::ModelProto *)((char *)a2 + 24));
  v5 = (_QWORD *)((char *)this + 8);
  v6 = *((_QWORD *)a2 + 1);
  if ((v6 & 1) != 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v8 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
    if ((*v5 & 1) != 0)
      v9 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v7 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v8;
    else
      v11 = *(const std::string::value_type **)(v7 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v7 + 31);
    else
      v12 = *(_QWORD *)(v7 + 16);
    std::string::append(v9, v11, v12);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, (uint64_t)a2 + 56);
  v13 = *((_DWORD *)a2 + 12);
  if ((v13 & 0xF) != 0)
  {
    if ((v13 & 1) != 0)
    {
      *((_DWORD *)this + 12) |= 1u;
      v14 = (sentencepiece::TrainerSpec *)*((_QWORD *)this + 10);
      if (!v14)
      {
        v15 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v5 & 1) != 0)
          v15 = (_QWORD *)*v15;
        v14 = (sentencepiece::TrainerSpec *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>((uint64_t)v15);
        *((_QWORD *)this + 10) = v14;
      }
      if (*((_QWORD *)a2 + 10))
        v16 = (const sentencepiece::TrainerSpec *)*((_QWORD *)a2 + 10);
      else
        v16 = (const sentencepiece::TrainerSpec *)&sentencepiece::_TrainerSpec_default_instance_;
      sentencepiece::TrainerSpec::MergeFrom(v14, v16);
    }
    if ((v13 & 2) != 0)
    {
      *((_DWORD *)this + 12) |= 2u;
      v17 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 11);
      if (!v17)
      {
        v18 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v5 & 1) != 0)
          v18 = (_QWORD *)*v18;
        v17 = (sentencepiece::NormalizerSpec *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>((uint64_t)v18);
        *((_QWORD *)this + 11) = v17;
      }
      if (*((_QWORD *)a2 + 11))
        v19 = (const sentencepiece::NormalizerSpec *)*((_QWORD *)a2 + 11);
      else
        v19 = (const sentencepiece::NormalizerSpec *)&sentencepiece::_NormalizerSpec_default_instance_;
      sentencepiece::NormalizerSpec::MergeFrom(v17, v19);
      if ((v13 & 4) == 0)
      {
LABEL_25:
        if ((v13 & 8) == 0)
          return;
        goto LABEL_43;
      }
    }
    else if ((v13 & 4) == 0)
    {
      goto LABEL_25;
    }
    *((_DWORD *)this + 12) |= 4u;
    v20 = (sentencepiece::SelfTestData *)*((_QWORD *)this + 12);
    if (!v20)
    {
      v21 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
      if ((*v5 & 1) != 0)
        v21 = (_QWORD *)*v21;
      v20 = (sentencepiece::SelfTestData *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData>((uint64_t)v21);
      *((_QWORD *)this + 12) = v20;
    }
    if (*((_QWORD *)a2 + 12))
      v22 = (const sentencepiece::SelfTestData *)*((_QWORD *)a2 + 12);
    else
      v22 = (const sentencepiece::SelfTestData *)&sentencepiece::_SelfTestData_default_instance_;
    sentencepiece::SelfTestData::MergeFrom(v20, v22);
    if ((v13 & 8) != 0)
    {
LABEL_43:
      *((_DWORD *)this + 12) |= 8u;
      v23 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 13);
      if (!v23)
      {
        v24 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v5 & 1) != 0)
          v24 = (_QWORD *)*v24;
        v23 = (sentencepiece::NormalizerSpec *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>((uint64_t)v24);
        *((_QWORD *)this + 13) = v23;
      }
      if (*((_QWORD *)a2 + 13))
        v25 = (const sentencepiece::NormalizerSpec *)*((_QWORD *)a2 + 13);
      else
        v25 = (const sentencepiece::NormalizerSpec *)&sentencepiece::_NormalizerSpec_default_instance_;
      sentencepiece::NormalizerSpec::MergeFrom(v23, v25);
    }
  }
}

void sub_191D262C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelProto::CopyFrom(sentencepiece::ModelProto *this, const sentencepiece::ModelProto *a2)
{
  if (a2 != this)
  {
    sentencepiece::ModelProto::Clear(this);
    sentencepiece::ModelProto::MergeFrom(this, a2);
  }
}

uint64_t sentencepiece::ModelProto::IsInitialized(sentencepiece::ModelProto *this)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  std::string *v5;
  uint64_t v6;
  std::string *v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  char v12;
  std::string v13[2];

  result = google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::ModelProto *)((char *)this + 24));
  if (!(_DWORD)result)
    return result;
  result = google::protobuf::internal::AllAreInitialized<sentencepiece::ModelProto_SentencePiece>((uint64_t)this + 56);
  if (!(_DWORD)result)
    return result;
  v3 = *((_DWORD *)this + 12);
  if ((v3 & 1) != 0)
  {
    v4 = *((_QWORD *)this + 10);
    if (!v4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4741);
      v5 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !value || trainer_spec_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v5->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
      v4 = *((_QWORD *)this + 10);
    }
    result = google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v4 + 16));
    if (!(_DWORD)result)
      return result;
    v3 = *((_DWORD *)this + 12);
  }
  if ((v3 & 2) != 0)
  {
    v6 = *((_QWORD *)this + 11);
    if (!v6)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4824);
      v7 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !value || normalizer_spec_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
      v6 = *((_QWORD *)this + 11);
    }
    result = google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v6 + 24));
    if (!(_DWORD)result)
      return result;
    v3 = *((_DWORD *)this + 12);
  }
  if ((v3 & 4) == 0)
  {
LABEL_18:
    if ((v3 & 8) == 0)
      return 1;
    v10 = *((_QWORD *)this + 13);
    if (!v10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4990);
      v11 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !value || denormalizer_spec_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
      v10 = *((_QWORD *)this + 13);
    }
    result = google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v10 + 24));
    if ((_DWORD)result)
      return 1;
    return result;
  }
  v8 = *((_QWORD *)this + 12);
  if (!v8)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4907);
    v9 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !value || self_test_data_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    v8 = *((_QWORD *)this + 12);
  }
  result = google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v8 + 16));
  if ((_DWORD)result)
  {
    v3 = *((_DWORD *)this + 12);
    goto LABEL_18;
  }
  return result;
}

void sub_191D264C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::internal::AllAreInitialized<sentencepiece::ModelProto_SentencePiece>(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(a1, v2);
  }
  while ((google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v5 + 16)) & 1) != 0);
  return v3 < 1;
}

_QWORD *sentencepiece::ModelProto::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.ModelProto");
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>(uint64_t a1)
{
  uint64_t AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x148uLL);
    sentencepiece::TrainerSpec::TrainerSpec(AlignedNoHook, a1);
  }
  else
  {
    AlignedNoHook = operator new();
    sentencepiece::TrainerSpec::TrainerSpec(AlignedNoHook, 0);
  }
  return AlignedNoHook;
}

void sub_191D265E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10A1C4074230EEALL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>(uint64_t a1)
{
  uint64_t AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x58uLL);
    sentencepiece::NormalizerSpec::NormalizerSpec(AlignedNoHook, a1);
  }
  else
  {
    AlignedNoHook = operator new();
    sentencepiece::NormalizerSpec::NormalizerSpec(AlignedNoHook, 0);
  }
  return AlignedNoHook;
}

void sub_191D2669C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10A1C402CDD3876);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData_Sample>(uint64_t a1)
{
  _QWORD *AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = (_QWORD *)google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x28uLL);
    *AlignedNoHook = &off_1E2DF0B38;
    AlignedNoHook[1] = a1;
    AlignedNoHook[2] = 0;
    if (atomic_load(scc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto))
      goto LABEL_7;
  }
  else
  {
    AlignedNoHook = (_QWORD *)operator new();
    *AlignedNoHook = &off_1E2DF0B38;
    AlignedNoHook[1] = 0;
    AlignedNoHook[2] = 0;
    if (atomic_load(scc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto))
LABEL_7:
      google::protobuf::internal::InitSCCImpl(scc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto);
  }
  AlignedNoHook[3] = &google::protobuf::internal::fixed_address_empty_string;
  AlignedNoHook[4] = &google::protobuf::internal::fixed_address_empty_string;
  return AlignedNoHook;
}

void sub_191D267A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x1081C400F7E8713);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData>(uint64_t a1)
{
  uint64_t AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x48uLL);
    sentencepiece::SelfTestData::SelfTestData(AlignedNoHook, a1);
  }
  else
  {
    AlignedNoHook = operator new();
    sentencepiece::SelfTestData::SelfTestData(AlignedNoHook, 0);
  }
  return AlignedNoHook;
}

void sub_191D2685C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10A1C4075D007F8);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto_SentencePiece>(uint64_t a1)
{
  _QWORD *AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = (_QWORD *)google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x40uLL);
    sentencepiece::ModelProto_SentencePiece::ModelProto_SentencePiece(AlignedNoHook, a1);
  }
  else
  {
    AlignedNoHook = (_QWORD *)operator new();
    sentencepiece::ModelProto_SentencePiece::ModelProto_SentencePiece(AlignedNoHook, 0);
  }
  return AlignedNoHook;
}

void sub_191D26910(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10A1C40F497E4DALL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto>(uint64_t a1)
{
  uint64_t AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x70uLL);
    sentencepiece::ModelProto::ModelProto(AlignedNoHook, a1);
  }
  else
  {
    AlignedNoHook = operator new();
    sentencepiece::ModelProto::ModelProto(AlignedNoHook, 0);
  }
  return AlignedNoHook;
}

void sub_191D269C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x10A1C4047CE62CFLL);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::TrainerSpec::New(sentencepiece::TrainerSpec *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>(0);
}

uint64_t sentencepiece::TrainerSpec::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>(a2);
}

uint64_t sentencepiece::TrainerSpec::GetCachedSize(sentencepiece::TrainerSpec *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t sentencepiece::NormalizerSpec::New(sentencepiece::NormalizerSpec *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>(0);
}

uint64_t sentencepiece::NormalizerSpec::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>(a2);
}

uint64_t sentencepiece::NormalizerSpec::GetCachedSize(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned int *)this + 13);
}

uint64_t sentencepiece::NormalizerSpec::add_suffix_space(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 80);
}

uint64_t sentencepiece::NormalizerSpec::add_dummy_prefix(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 81);
}

uint64_t sentencepiece::NormalizerSpec::remove_extra_whitespaces(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 82);
}

uint64_t sentencepiece::NormalizerSpec::escape_whitespaces(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 83);
}

uint64_t `non-virtual thunk to'sentencepiece::NormalizerSpec::add_dummy_prefix(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 65);
}

uint64_t `non-virtual thunk to'sentencepiece::NormalizerSpec::remove_extra_whitespaces(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 66);
}

uint64_t `non-virtual thunk to'sentencepiece::NormalizerSpec::escape_whitespaces(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 67);
}

uint64_t `non-virtual thunk to'sentencepiece::NormalizerSpec::add_suffix_space(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 64);
}

_QWORD *sentencepiece::SelfTestData_Sample::New(sentencepiece::SelfTestData_Sample *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData_Sample>(0);
}

_QWORD *sentencepiece::SelfTestData_Sample::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData_Sample>(a2);
}

uint64_t sentencepiece::SelfTestData_Sample::GetCachedSize(sentencepiece::SelfTestData_Sample *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t sentencepiece::SelfTestData::New(sentencepiece::SelfTestData *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData>(0);
}

uint64_t sentencepiece::SelfTestData::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData>(a2);
}

uint64_t sentencepiece::SelfTestData::GetCachedSize(sentencepiece::SelfTestData *this)
{
  return *((unsigned int *)this + 16);
}

_QWORD *sentencepiece::ModelProto_SentencePiece::New(sentencepiece::ModelProto_SentencePiece *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto_SentencePiece>(0);
}

_QWORD *sentencepiece::ModelProto_SentencePiece::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto_SentencePiece>(a2);
}

uint64_t sentencepiece::ModelProto_SentencePiece::GetCachedSize(sentencepiece::ModelProto_SentencePiece *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t sentencepiece::ModelProto::New(sentencepiece::ModelProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto>(0);
}

uint64_t sentencepiece::ModelProto::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto>(a2);
}

uint64_t sentencepiece::ModelProto::GetCachedSize(sentencepiece::ModelProto *this)
{
  return *((unsigned int *)this + 13);
}

uint64_t sentencepiece::ModelProto::PieceSize(sentencepiece::ModelProto *this)
{
  return *((unsigned int *)this + 16);
}

char *sentencepiece::ModelProto::UnkSurface(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 10);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[22];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EE21B748);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_surface_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sentencepiece::ModelProto::UnkPiece(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 10);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[23];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EE21B6C8);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_piece_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sentencepiece::ModelProto::BosPiece(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 10);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[24];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EE21B6E8);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_bos_piece_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sentencepiece::ModelProto::EosPiece(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 10);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[25];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EE21B708);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_eos_piece_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sentencepiece::ModelProto::PadPiece(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 10);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[26];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EE21B728);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_pad_piece_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

uint64_t sentencepiece::ModelProto::ByteFallback(sentencepiece::ModelProto *this)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 10);
  if (!v1)
    v1 = (unsigned __int8 *)&sentencepiece::_TrainerSpec_default_instance_;
  return v1[248];
}

uint64_t sentencepiece::ModelProto::HasUnkSurface(sentencepiece::ModelProto *this)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)&sentencepiece::_TrainerSpec_default_instance_;
  if (*((_QWORD *)this + 10))
    v1 = (unsigned __int8 *)*((_QWORD *)this + 10);
  return (v1[40] >> 3) & 1;
}

char *sentencepiece::ModelProto::IdToPiece(sentencepiece::ModelProto *this, int a2)
{
  char *result;

  result = (char *)(*(_QWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 48) & 0xFFFFFFFFFFFFFFFELL);
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

float sentencepiece::ModelProto::GetScore(sentencepiece::ModelProto *this, int a2)
{
  return *(float *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 56);
}

BOOL sentencepiece::ModelProto::PieceIsNormal(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 60) == 1;
}

BOOL sentencepiece::ModelProto::PieceIsUnknown(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 60) == 2;
}

BOOL sentencepiece::ModelProto::PieceIsControl(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 60) == 3;
}

BOOL sentencepiece::ModelProto::PieceIsUnused(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 60) == 5;
}

BOOL sentencepiece::ModelProto::PieceIsUserDefined(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 60) == 4;
}

BOOL sentencepiece::ModelProto::PieceIsByte(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 60) == 6;
}

uint64_t sentencepiece::ModelProto::NormalizerSpec(sentencepiece::ModelProto *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 11);
  if (!v1)
    v1 = &sentencepiece::_NormalizerSpec_default_instance_;
  return (uint64_t)v1 + 16;
}

uint64_t sentencepiece::ModelProto::DenormalizerSpec(sentencepiece::ModelProto *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 13);
  if (!v1)
    v1 = &sentencepiece::_NormalizerSpec_default_instance_;
  return (uint64_t)v1 + 16;
}

uint64_t sentencepiece::ModelProto::GetModelType(sentencepiece::ModelProto *this)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (_DWORD *)*((_QWORD *)this + 10);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[68];
  v3 = v2 - 2;
  v4 = v2 - 1;
  if (v3 >= 3)
    return 0;
  else
    return v4;
}

uint64_t `non-virtual thunk to'sentencepiece::ModelProto::PieceSize(sentencepiece::ModelProto *this)
{
  return *((unsigned int *)this + 12);
}

char *`non-virtual thunk to'sentencepiece::ModelProto::UnkSurface(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 8);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[22];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EE21B748);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_surface_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *`non-virtual thunk to'sentencepiece::ModelProto::UnkPiece(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 8);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[23];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EE21B6C8);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_piece_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *`non-virtual thunk to'sentencepiece::ModelProto::BosPiece(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 8);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[24];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EE21B6E8);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_bos_piece_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *`non-virtual thunk to'sentencepiece::ModelProto::EosPiece(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 8);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[25];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EE21B708);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_eos_piece_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *`non-virtual thunk to'sentencepiece::ModelProto::PadPiece(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 8);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[26];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EE21B728);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_pad_piece_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

uint64_t `non-virtual thunk to'sentencepiece::ModelProto::ByteFallback(sentencepiece::ModelProto *this)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 8);
  if (!v1)
    v1 = (unsigned __int8 *)&sentencepiece::_TrainerSpec_default_instance_;
  return v1[248];
}

uint64_t `non-virtual thunk to'sentencepiece::ModelProto::HasUnkSurface(sentencepiece::ModelProto *this)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)&sentencepiece::_TrainerSpec_default_instance_;
  if (*((_QWORD *)this + 8))
    v1 = (unsigned __int8 *)*((_QWORD *)this + 8);
  return (v1[40] >> 3) & 1;
}

uint64_t `non-virtual thunk to'sentencepiece::ModelProto::GetModelType(sentencepiece::ModelProto *this)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (_DWORD *)*((_QWORD *)this + 8);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[68];
  v3 = v2 - 2;
  v4 = v2 - 1;
  if (v3 >= 3)
    return 0;
  else
    return v4;
}

char *`non-virtual thunk to'sentencepiece::ModelProto::IdToPiece(sentencepiece::ModelProto *this, int a2)
{
  char *result;

  result = (char *)(*(_QWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 48) & 0xFFFFFFFFFFFFFFFELL);
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

float `non-virtual thunk to'sentencepiece::ModelProto::GetScore(sentencepiece::ModelProto *this, int a2)
{
  return *(float *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 56);
}

BOOL `non-virtual thunk to'sentencepiece::ModelProto::PieceIsNormal(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 60) == 1;
}

BOOL `non-virtual thunk to'sentencepiece::ModelProto::PieceIsUnknown(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 60) == 2;
}

BOOL `non-virtual thunk to'sentencepiece::ModelProto::PieceIsControl(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 60) == 3;
}

BOOL `non-virtual thunk to'sentencepiece::ModelProto::PieceIsUnused(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 60) == 5;
}

BOOL `non-virtual thunk to'sentencepiece::ModelProto::PieceIsUserDefined(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 60) == 4;
}

BOOL `non-virtual thunk to'sentencepiece::ModelProto::PieceIsByte(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 60) == 6;
}

uint64_t `non-virtual thunk to'sentencepiece::ModelProto::NormalizerSpec(sentencepiece::ModelProto *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 9);
  if (!v1)
    v1 = &sentencepiece::_NormalizerSpec_default_instance_;
  return (uint64_t)v1 + 16;
}

uint64_t `non-virtual thunk to'sentencepiece::ModelProto::DenormalizerSpec(sentencepiece::ModelProto *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 11);
  if (!v1)
    v1 = &sentencepiece::_NormalizerSpec_default_instance_;
  return (uint64_t)v1 + 16;
}

void google::protobuf::internal::arena_destruct_object<std::string>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_191D27338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::string *v4;
  char v5;
  std::string v6[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v4 = google::protobuf::internal::LogMessage::operator<<(v6, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v2 = *(_QWORD *)(a1 + 16) + 8;
    do
    {
      v3 = *(_QWORD *)v2;
      if (*(char *)(*(_QWORD *)v2 + 23) < 0)
      {
        **(_BYTE **)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v3 = 0;
        *(_BYTE *)(v3 + 23) = 0;
      }
      v2 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_191D27400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_191D274D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (uint64_t *)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      sentencepiece::SelfTestData_Sample::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_191D27588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  sentencepiece::ModelProto_SentencePiece **v3;
  sentencepiece::ModelProto_SentencePiece *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (sentencepiece::ModelProto_SentencePiece **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      sentencepiece::ModelProto_SentencePiece::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_191D27634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  int v5;
  const std::string **v6;
  unsigned int *v7;
  int v8;
  int *v9;
  char v10;
  std::string v11[2];

  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (const std::string **)(*(_QWORD *)(a2 + 16) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, v5);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((std::string *)a1, (std::string **)v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    v9 = *(int **)(a1 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_191D27720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(std::string *result, std::string **a2, const std::string **a3, signed int a4, signed int a5)
{
  std::string::__raw *v9;
  uint64_t v10;
  const std::string **v11;
  std::string **v12;
  const std::string *v13;
  const std::string *v14;
  std::string *v15;
  int v16;
  std::string::size_type v17;
  const std::string **v18;
  std::string **v19;
  const std::string *v20;
  std::string *AlignedAndAddCleanup;
  std::string *v22;

  v9 = (std::string::__raw *)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = std::string::operator=(v15, v13);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = v9->__words[0];
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        if ((*(_BYTE *)(v17 + 24) & 1) != 0)
        AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v17, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
      }
      else
      {
        AlignedAndAddCleanup = (std::string *)operator new();
      }
      v22 = AlignedAndAddCleanup;
      AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
      AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
      AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
      result = std::string::operator=(AlignedAndAddCleanup, v20);
      *v19++ = v22;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::~RepeatedPtrField(google::protobuf::internal::RepeatedPtrFieldBase *a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>(_QWORD *a1)
{
  sentencepiece::SelfTestData_Sample **v2;
  sentencepiece::SelfTestData_Sample **v3;
  uint64_t v4;

  v2 = (sentencepiece::SelfTestData_Sample **)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sentencepiece::SelfTestData_Sample::~SelfTestData_Sample(*v3);
          MEMORY[0x19401E994]();
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (sentencepiece::SelfTestData_Sample **)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  unsigned int v5;
  sentencepiece::SelfTestData_Sample **v6;
  unsigned int *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (sentencepiece::SelfTestData_Sample **)(*(_QWORD *)(a2 + 16) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, v5);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>((uint64_t *)a1, (sentencepiece::SelfTestData_Sample **)v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_191D279C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>(uint64_t *a1, sentencepiece::SelfTestData_Sample **a2, sentencepiece::SelfTestData_Sample **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  sentencepiece::SelfTestData_Sample **v11;
  sentencepiece::SelfTestData_Sample **v12;
  sentencepiece::SelfTestData_Sample *v13;
  sentencepiece::SelfTestData_Sample *v14;
  sentencepiece::SelfTestData_Sample *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  sentencepiece::SelfTestData_Sample **v19;
  sentencepiece::SelfTestData_Sample **v20;
  sentencepiece::SelfTestData_Sample *v21;
  sentencepiece::SelfTestData_Sample *v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<sentencepiece::SelfTestData_Sample>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (sentencepiece::SelfTestData_Sample *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData_Sample>(v18);
      google::protobuf::internal::GenericTypeHandler<sentencepiece::SelfTestData_Sample>::Merge(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void google::protobuf::internal::GenericTypeHandler<sentencepiece::SelfTestData_Sample>::Merge(sentencepiece::SelfTestData_Sample *a1, sentencepiece::SelfTestData_Sample *this)
{
  sentencepiece::SelfTestData_Sample::MergeFrom(this, a1);
}

void google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::~RepeatedPtrField(google::protobuf::internal::RepeatedPtrFieldBase *a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(_QWORD *a1)
{
  sentencepiece::ModelProto_SentencePiece **v2;
  sentencepiece::ModelProto_SentencePiece **v3;
  uint64_t v4;

  v2 = (sentencepiece::ModelProto_SentencePiece **)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sentencepiece::ModelProto_SentencePiece::~ModelProto_SentencePiece(*v3);
          MEMORY[0x19401E994]();
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (sentencepiece::ModelProto_SentencePiece **)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  unsigned int v5;
  sentencepiece::ModelProto_SentencePiece **v6;
  unsigned int *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (sentencepiece::ModelProto_SentencePiece **)(*(_QWORD *)(a2 + 16) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, v5);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t *)a1, (sentencepiece::ModelProto_SentencePiece **)v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_191D27C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(uint64_t *a1, sentencepiece::ModelProto_SentencePiece **a2, sentencepiece::ModelProto_SentencePiece **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  sentencepiece::ModelProto_SentencePiece **v11;
  sentencepiece::ModelProto_SentencePiece **v12;
  sentencepiece::ModelProto_SentencePiece *v13;
  sentencepiece::ModelProto_SentencePiece *v14;
  sentencepiece::ModelProto_SentencePiece *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  sentencepiece::ModelProto_SentencePiece **v19;
  sentencepiece::ModelProto_SentencePiece **v20;
  sentencepiece::ModelProto_SentencePiece *v21;
  sentencepiece::ModelProto_SentencePiece *v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<sentencepiece::ModelProto_SentencePiece>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (sentencepiece::ModelProto_SentencePiece *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto_SentencePiece>(v18);
      google::protobuf::internal::GenericTypeHandler<sentencepiece::ModelProto_SentencePiece>::Merge(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void google::protobuf::internal::GenericTypeHandler<sentencepiece::ModelProto_SentencePiece>::Merge(sentencepiece::ModelProto_SentencePiece *a1, sentencepiece::ModelProto_SentencePiece *this)
{
  sentencepiece::ModelProto_SentencePiece::MergeFrom(this, a1);
}

_QWORD *sentencepiece::filesystem::NewReadableFile@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  char v7;
  _QWORD v8[2];

  v8[0] = a1;
  v8[1] = a2;
  v7 = a3;
  result = absl::make_unique<sentencepiece::filesystem::PosixReadableFile,std::string_view &,BOOL &>((uint64_t)v8, &v6);
  *a4 = v6;
  return result;
}

_QWORD *absl::make_unique<sentencepiece::filesystem::PosixReadableFile,std::string_view &,BOOL &>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  result = sentencepiece::filesystem::PosixReadableFile::PosixReadableFile(v4, *(const char **)a1, *(_QWORD *)(a1 + 8));
  *a2 = v4;
  return result;
}

void sub_191D27D84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::filesystem::PosixReadableFile::PosixReadableFile(_QWORD *a1, const char *a2, uint64_t a3)
{
  uint64_t *v6;
  _QWORD *v7;
  size_t v8;
  int *v9;
  void **v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  unsigned int v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;
  _DWORD *v19;

  *a1 = &off_1E2DF0768;
  v6 = a1 + 1;
  sentencepiece::util::Status::Status(a1 + 1);
  if (a3)
  {
    v7 = (_QWORD *)operator new();
    std::ifstream::basic_ifstream(v7);
  }
  else
  {
    v7 = (_QWORD *)MEMORY[0x1E0DE4948];
  }
  a1[2] = v7;
  if ((*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 5) != 0)
  {
    v15 = 5;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\"", 1);
    v8 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)a2, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\": ", 3);
    v9 = __error();
    sentencepiece::util::StrError((sentencepiece::util *)*v9);
    if ((v14 & 0x80u) == 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v11 = v14;
    else
      v11 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v10, v11);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v15, (uint64_t)&v19);
    sentencepiece::util::Status::operator=(v6, &v19);
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v19);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v16[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v16[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v17 < 0)
      operator delete((void *)v16[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19401E928](&v18);
  }
  return a1;
}

void sub_191D27F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sentencepiece::util::Status *v15;
  uint64_t v16;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)(v16 - 56));
  if (a14 < 0)
    operator delete(__p);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a15);
  sentencepiece::util::Status::~Status(v15);
  _Unwind_Resume(a1);
}

void sentencepiece::filesystem::PosixReadableFile::~PosixReadableFile(sentencepiece::filesystem::PosixReadableFile *this)
{
  sentencepiece::filesystem::PosixReadableFile::~PosixReadableFile(this);
  JUMPOUT(0x19401E994);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2DF0768;
  v2 = *((_QWORD *)this + 2);
  if (v2 != MEMORY[0x1E0DE4948] && v2 != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sentencepiece::util::Status::~Status((sentencepiece::filesystem::PosixReadableFile *)((char *)this + 8));
}

uint64_t sentencepiece::filesystem::PosixReadableFile::status@<X0>(sentencepiece::filesystem::PosixReadableFile *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  return sentencepiece::util::Status::Status(a2, (sentencepiece::filesystem::PosixReadableFile *)((char *)this + 8));
}

BOOL sentencepiece::filesystem::PosixReadableFile::ReadLine(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  const std::locale::facet *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  std::locale v8;

  v3 = *(_QWORD **)(a1 + 16);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
  v4 = std::locale::use_facet(&v8, MEMORY[0x1E0DE4A90]);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v8);
  v6 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, a2, v5);
  return (*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) == 0;
}

void sub_191D280C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

BOOL sentencepiece::filesystem::PosixReadableFile::ReadAll(sentencepiece::logging *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v11;

  v2 = (_QWORD *)*((_QWORD *)a1 + 2);
  v3 = (_QWORD *)MEMORY[0x1E0DE4948];
  if (v2 == (_QWORD *)MEMORY[0x1E0DE4948])
  {
    if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
    {
      v11 = 0;
      v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"filesystem.cc", 13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
      v5 = (_QWORD *)std::ostream::operator<<();
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") ", 2);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"LOG(", 4);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ERROR", 5);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ReadAll is not supported for stdin.", 35);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v11);
    }
  }
  else
  {
    std::string::__assign_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(a2, *(_QWORD **)((char *)v2 + *(_QWORD *)(*v2 - 24) + 40), 0);
  }
  return v2 != v3;
}

void sub_191D281D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void std::string::__assign_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;

  std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&__p, a2, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  MEMORY[0x19401E658](a1, p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_191D282A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(std::string *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  std::string::value_type *v5;
  std::string::value_type v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v8 = a3;
  v9 = a2;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  while (1)
  {
    result = std::istreambuf_iterator<char>::equal[abi:ne180100](&v9, &v8);
    if ((result & 1) != 0)
      break;
    v5 = (std::string::value_type *)v9[3];
    if (v5 == (std::string::value_type *)v9[4])
      v6 = (*(uint64_t (**)(_QWORD *))(*v9 + 72))(v9);
    else
      v6 = *v5;
    std::string::push_back(a1, v6);
    v7 = v9[3];
    if (v7 == v9[4])
      (*(void (**)(_QWORD *))(*v9 + 80))(v9);
    else
      v9[3] = v7 + 1;
  }
  return result;
}

void sub_191D28358(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_191D28374(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::istreambuf_iterator<char>::equal[abi:ne180100](_QWORD **a1, _QWORD **a2)
{
  _QWORD *v4;
  _BOOL4 v5;
  _QWORD *v6;
  _BOOL4 v7;

  v4 = *a1;
  if (v4)
  {
    if (v4[3] != v4[4])
    {
      v5 = 0;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD *))(*v4 + 72))(v4) != -1)
    {
      v5 = *a1 == 0;
      goto LABEL_8;
    }
    *a1 = 0;
  }
  v5 = 1;
LABEL_8:
  v6 = *a2;
  if (!*a2)
    goto LABEL_14;
  if (v6[3] == v6[4])
  {
    if ((*(unsigned int (**)(_QWORD *))(*v6 + 72))(v6) != -1)
    {
      v7 = *a2 == 0;
      return v5 ^ v7 ^ 1u;
    }
    *a2 = 0;
LABEL_14:
    v7 = 1;
    return v5 ^ v7 ^ 1u;
  }
  v7 = 0;
  return v5 ^ v7 ^ 1u;
}

uint64_t sentencepiece::GetRandomGeneratorSeed(sentencepiece *this)
{
  unsigned int v1;
  uint64_t v2;
  std::random_device v4;

  if (v1 != -1)
  std::random_device::random_device[abi:ne180100](&v4);
  v2 = MEMORY[0x19401E820](&v4);
  std::random_device::~random_device(&v4);
  return v2;
}

void sub_191D2849C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
  unsigned int *v12;

  std::random_device::~random_device(&a11);
  __cxa_begin_catch(a1);
  atomic_load(v12);
  __cxa_end_catch();
  JUMPOUT(0x191D28488);
}

uint64_t sentencepiece::logging::GetMinLogLevel(sentencepiece::logging *this)
{
}

uint64_t sentencepiece::string_util::DecodeUTF8(sentencepiece::string_util *this, const char *a2, char *a3, unint64_t *a4)
{
  int v4;
  uint64_t result;
  unint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  int v11;
  int v12;
  char v13;
  int v14;

  v4 = *(char *)this;
  if ((v4 & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = 1;
    return *(unsigned __int8 *)this;
  }
  v6 = a2 - (const char *)this;
  if ((unint64_t)(a2 - (const char *)this) >= 2)
  {
    if ((v4 & 0xE0) == 0xC0)
    {
      v7 = *((_BYTE *)this + 1);
      if (v7 <= -65)
      {
        result = v7 & 0x3F | ((v4 & 0x1F) << 6);
        if (result >= 0x80)
        {
          v8 = 2;
LABEL_8:
          *(_QWORD *)a3 = v8;
          return result;
        }
      }
    }
    else if (v6 >= 3)
    {
      if ((v4 & 0xF0) == 0xE0)
      {
        v9 = *((char *)this + 1);
        if (v9 <= -65)
        {
          v10 = *((_BYTE *)this + 2);
          if (v10 <= -65)
          {
            result = v10 & 0x3F | ((v9 & 0x3F) << 6) & 0xFFF | ((v4 & 0xF) << 12);
            if (result >= 0x800
              && (((v4 & 0xF) << 12) - 57344 < 0x102000u || result >> 11 <= 0x1A))
            {
              v8 = 3;
              goto LABEL_8;
            }
          }
        }
      }
      else if (v6 >= 4 && (v4 & 0xF8) == 0xF0)
      {
        v11 = *((char *)this + 1);
        if (v11 <= -65)
        {
          v12 = *((char *)this + 2);
          if (v12 <= -65)
          {
            v13 = *((_BYTE *)this + 3);
            if (v13 <= -65)
            {
              v14 = ((v4 & 7) << 18) | ((v11 & 0x3F) << 12);
              result = v13 & 0x3F | ((v12 & 0x3F) << 6) | v14;
              if (result >= 0x10000 && (v14 - 57344) < 0x102000)
              {
                v8 = 4;
                goto LABEL_8;
              }
            }
          }
        }
      }
    }
  }
  *(_QWORD *)a3 = 1;
  return 65533;
}

uint64_t sentencepiece::random::GetRandomGenerator(sentencepiece::random *this)
{
  uint64_t (*v1)(_QWORD);
  sentencepiece *v2;
  _DWORD *v4;
  uint64_t (*v5)(_QWORD);
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  if ((*(_BYTE *)v2 & 1) == 0)
  {
    sentencepiece::GetRandomGeneratorSeed(v2);
    v4 = (_DWORD *)sentencepiece::random::GetRandomGenerator(void)::mt(&sentencepiece::random::GetRandomGenerator(void)::mt);
    *v4 = v6;
    do
    {
      v7 = v5(&sentencepiece::random::GetRandomGenerator(void)::mt);
      *(_DWORD *)(v7 + 4 * v9) = v8;
    }
    while (v9 != 623);
    *(_QWORD *)(v5(&sentencepiece::random::GetRandomGenerator(void)::mt) + 2496) = 0;
  }
  return sentencepiece::random::GetRandomGenerator(void)::mt(&sentencepiece::random::GetRandomGenerator(void)::mt);
}

uint64_t sentencepiece::util::StrError(sentencepiece::util *this)
{
  size_t v1;
  _QWORD *v2;
  _QWORD v4[11];
  char v5;
  uint64_t v6;
  char __strerrbuf[1024];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  strerror_r((int)this, __strerrbuf, 0x3FFuLL);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  v1 = strlen(__strerrbuf);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)__strerrbuf, v1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" Error #", 8);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v4[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v5 < 0)
    operator delete((void *)v4[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19401E928](&v6);
}

void sub_191D287E0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

unint64_t sentencepiece::mmap_util::RoundUp(sentencepiece::mmap_util *this, unint64_t a2)
{
  if (!a2)
    sentencepiece::mmap_util::RoundUp();
  return ((unint64_t)this + a2 - 1) / a2 * a2;
}

void sentencepiece::mmap_util::Padding(std::string *this)
{
  std::string::size_type size;
  std::string::size_type v3;

  LOBYTE(size) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if ((size & 3) != 0)
  {
    do
    {
      std::string::push_back(this, 0);
      LOBYTE(v3) = *((_BYTE *)&this->__r_.__value_.__s + 23);
      if ((v3 & 0x80u) != 0)
        v3 = this->__r_.__value_.__l.__size_;
    }
    while ((v3 & 3) != 0);
  }
}

_QWORD *sentencepiece::mmap_util::RemovePrefix@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  _QWORD *v7;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  v4 = a1[1];
  v5 = v4 >= a2;
  v6 = v4 - a2;
  if (v5)
  {
    *a1 += a2;
    a1[1] = v6;
    return sentencepiece::util::Status::Status(a3);
  }
  else
  {
    v9 = 13;
    v7 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.cc", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"string.size() >= size", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a3);
    v10[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v10[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v11 < 0)
      operator delete((void *)v10[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x19401E928](&v12);
  }
}

void sub_191D289DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::mmap_util::RoundUp()
{
  __assert_rtn("RoundUp", "util.cc", 276, "multiple");
}

sentencepiece::bpe::Model *sentencepiece::bpe::Model::Model(sentencepiece::bpe::Model *this, const sentencepiece::ModelProto *a2)
{
  sentencepiece::ModelInterface *v4;

  v4 = sentencepiece::ModelInterface::ModelInterface(this);
  *(_QWORD *)v4 = &off_1E2DF10E0;
  *((_QWORD *)v4 + 1) = (char *)a2 + 16;
  sentencepiece::ModelInterface::InitializePieces(v4);
  return this;
}

void sub_191D28A58(_Unwind_Exception *a1)
{
  sentencepiece::ModelInterface *v1;

  sentencepiece::ModelInterface::~ModelInterface(v1);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::bpe::Model::Model(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  _QWORD *result;

  result = (_QWORD *)sentencepiece::ModelInterface::ModelInterface(a1, a2, a3, a4);
  *result = &off_1E2DF10E0;
  return result;
}

void sentencepiece::bpe::Model::~Model(sentencepiece::bpe::Model *this)
{
  sentencepiece::ModelInterface::~ModelInterface(this);
  JUMPOUT(0x19401E994);
}

void sentencepiece::bpe::Model::SampleEncode(uint64_t *a1@<X0>, _BYTE *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>, float a5@<S0>)
{
  int v8;
  int v9;
  int v10;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  unint64_t v25;
  sentencepiece::random *v26;
  char *v27;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *RandomGenerator;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  sentencepiece::random *v32;
  sentencepiece::random *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  sentencepiece::random *v39;
  int v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  __int128 *v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v69[5];
  uint64_t (**v70)();
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD v75[2];
  int v76;
  void *__p;
  char *v78;
  char *v79;
  void *v80;
  char *v81;
  uint64_t v82;
  _QWORD v83[3];
  _QWORD *v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t (***__return_ptr)()))(*a1 + 16))(&v70);
  if (v70)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v70);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v70);
  if (!a3)
    goto LABEL_3;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  __p = 0;
  v78 = 0;
  v79 = 0;
  if (a3 >> 59)
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  v8 = 0;
  __p = operator new(32 * a3);
  v78 = (char *)__p;
  v79 = (char *)__p + 32 * a3;
  memset(v75, 0, sizeof(v75));
  v76 = 1065353216;
  v70 = &off_1E2DF1320;
  v71 = 0u;
  v72 = 0u;
  v73 = 0;
  v74 = 256;
  v69[0] = (uint64_t)a1;
  v69[1] = (uint64_t)&v70;
  v69[2] = (uint64_t)&__p;
  v69[3] = (uint64_t)&v80;
  v69[4] = (uint64_t)v75;
  do
  {
    v86 = 0uLL;
    v9 = sentencepiece::normalizer::PrefixMatcher::PrefixMatch(a1[2], a2, a3, (BOOL *)&v85 + 8);
    *(_QWORD *)&v86 = a2;
    *((_QWORD *)&v86 + 1) = v9;
    a3 -= v9;
    if (a3)
      v10 = v8 + 1;
    else
      v10 = -1;
    LODWORD(v85) = v8 - 1;
    DWORD1(v85) = v10;
    v11 = v78;
    if (v78 >= v79)
    {
      v14 = (char *)__p;
      v15 = (v78 - (_BYTE *)__p) >> 5;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59)
        std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
      v17 = v79 - (_BYTE *)__p;
      if ((v79 - (_BYTE *)__p) >> 4 > v16)
        v16 = v17 >> 4;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
        v18 = 0x7FFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 59)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v19 = (char *)operator new(32 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = v86;
      v21 = &v19[32 * v15];
      *(_OWORD *)v21 = v85;
      *((_OWORD *)v21 + 1) = v20;
      v22 = v21;
      if (v11 != v14)
      {
        do
        {
          v23 = *((_OWORD *)v11 - 1);
          *((_OWORD *)v22 - 2) = *((_OWORD *)v11 - 2);
          *((_OWORD *)v22 - 1) = v23;
          v22 -= 32;
          v11 -= 32;
        }
        while (v11 != v14);
        v11 = v14;
      }
      v24 = &v19[32 * v18];
      v13 = v21 + 32;
      __p = v22;
      v78 = v21 + 32;
      v79 = v24;
      if (v11)
        operator delete(v11);
    }
    else
    {
      v12 = v86;
      *(_OWORD *)v78 = v85;
      *((_OWORD *)v11 + 1) = v12;
      v13 = v11 + 32;
    }
    a2 += v9;
    ++v8;
    v78 = v13;
  }
  while (a3);
  if (__p == v13)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_76;
  }
  if ((unint64_t)(v13 - (_BYTE *)__p) >= 0x21)
  {
    v25 = 1;
    do
    {
      sentencepiece::bpe::Model::SampleEncode(std::string_view,float)const::$_0::operator()(v69, v25 - 1, v25);
      ++v25;
    }
    while (v25 < (v78 - (_BYTE *)__p) >> 5);
  }
  v26 = (sentencepiece::random *)v80;
  v27 = v81;
  if (v80 != v81)
  {
    RandomGenerator = 0;
    do
    {
      v29 = *(int **)v26;
      if (v27 - (char *)v26 >= 9)
      {
        v30 = 0;
        v31 = (v27 - (char *)v26) >> 3;
        v32 = v26;
        do
        {
          v33 = v32;
          v32 = (sentencepiece::random *)((char *)v32 + 8 * v30 + 8);
          v34 = 2 * v30;
          v30 = (2 * v30) | 1;
          v35 = v34 + 2;
          if (v35 < v31)
          {
            v36 = *((_QWORD *)v32 + 1);
            v37 = *(float *)(*(_QWORD *)v32 + 8);
            v38 = *(float *)(v36 + 8);
            if (v37 < v38 || v37 == v38 && **(_DWORD **)v32 > *(_DWORD *)v36)
            {
              v32 = (sentencepiece::random *)((char *)v32 + 8);
              v30 = v35;
            }
          }
          *(_QWORD *)v33 = *(_QWORD *)v32;
        }
        while (v30 <= (uint64_t)((unint64_t)(v31 - 2) >> 1));
        v39 = (sentencepiece::random *)(v27 - 8);
        if (v32 == v39)
        {
          *(_QWORD *)v32 = v29;
        }
        else
        {
          *(_QWORD *)v32 = *(_QWORD *)v39;
          *(_QWORD *)v39 = v29;
          v26 = (sentencepiece::random *)std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPairComparator &,std::__wrap_iter<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair **>>((uint64_t)v26, (uint64_t)v32 + 8, ((sentencepiece::random *)((char *)v32 + 8) - v26) >> 3);
        }
      }
      v81 -= 8;
      v40 = *v29;
      v41 = *v29;
      v42 = __p;
      v43 = *((_QWORD *)__p + 4 * v41 + 3);
      if (!v43)
        goto LABEL_58;
      v44 = v29[1];
      v45 = *((_QWORD *)__p + 4 * v44 + 3);
      if (!v45)
        goto LABEL_58;
      v46 = v45 + v43;
      if (v46 != *((_QWORD *)v29 + 2))
        goto LABEL_58;
      if (a5 > 0.0)
      {
        if (a5 >= 1.0)
          goto LABEL_58;
        if (!RandomGenerator)
          RandomGenerator = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)sentencepiece::random::GetRandomGenerator(v26);
        v47 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(RandomGenerator);
        if (((double)v47
            + (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(RandomGenerator)
            * 4294967300.0)
           * 5.42101086e-20
           + 0.0 < a5)
          goto LABEL_58;
        v42 = __p;
        v40 = *v29;
        v44 = v29[1];
        v41 = *v29;
        v46 = *((_QWORD *)__p + 4 * v44 + 3) + *((_QWORD *)__p + 4 * v41 + 3);
      }
      v48 = (char *)&v42[8 * v41];
      v49 = (char *)&v42[8 * v44];
      *((_QWORD *)v48 + 3) = v46;
      *((_DWORD *)v48 + 1) = *((_DWORD *)v49 + 1);
      v50 = *((unsigned int *)v49 + 1);
      if ((v50 & 0x80000000) == 0)
        v42[8 * v50] = v40;
      *((_QWORD *)v49 + 2) = "";
      *((_QWORD *)v49 + 3) = 0;
      sentencepiece::bpe::Model::SampleEncode(std::string_view,float)const::$_0::operator()(v69, *((_DWORD *)__p + 8 * v41), v40);
      sentencepiece::bpe::Model::SampleEncode(std::string_view,float)const::$_0::operator()(v69, *v29, *((_DWORD *)__p + 8 * *v29 + 1));
LABEL_58:
      v26 = (sentencepiece::random *)v80;
      v27 = v81;
    }
    while (v80 != v81);
  }
  v84 = 0;
  v51 = operator new(0x20uLL);
  *v51 = &off_1E2DF3488;
  v51[1] = a1;
  v51[2] = v83;
  v51[3] = v75;
  *((_QWORD *)&v86 + 1) = v51;
  std::__function::__value_func<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::swap[abi:ne180100](&v85, v83);
  v52 = (__int128 *)*((_QWORD *)&v86 + 1);
  if (*((__int128 **)&v86 + 1) == &v85)
  {
    v53 = 4;
    v52 = &v85;
  }
  else
  {
    if (!*((_QWORD *)&v86 + 1))
      goto LABEL_65;
    v53 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v52 + 8 * v53))();
LABEL_65:
  v54 = 0;
  v55 = (_QWORD *)MEMORY[0x1E0DE4A50];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  do
  {
    if (v54 < 0)
    {
      LOBYTE(v85) = 1;
      v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"bpe_model.cc", 12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"(", 1);
      v57 = (_QWORD *)std::ostream::operator<<();
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)") [", 3);
      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"(index) >= (0)", 14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"] ", 2);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v85);
    }
    v60 = __p;
    if (v54 >= (int)((unint64_t)(v78 - (_BYTE *)__p) >> 5))
    {
      LOBYTE(v85) = 1;
      v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"bpe_model.cc", 12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"(", 1);
      v62 = (_QWORD *)std::ostream::operator<<();
      v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)") [", 3);
      v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"(index) < (static_cast<int>(symbols.size()))", 44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"] ", 2);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v85);
      v60 = __p;
    }
    std::function<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::operator()((uint64_t)v83, v60[4 * v54 + 2], v60[4 * v54 + 3], (uint64_t)a4);
    v54 = *((_DWORD *)__p + 8 * v54 + 1);
  }
  while (v54 != -1);
  v65 = v84;
  if (v84 == v83)
  {
    v66 = 4;
    v65 = v83;
    goto LABEL_75;
  }
  if (v84)
  {
    v66 = 5;
LABEL_75:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
LABEL_76:
  sentencepiece::model::FreeList<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair>::~FreeList(&v70);
  std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::~__hash_table((uint64_t)v75);
  if (__p)
  {
    v78 = (char *)__p;
    operator delete(__p);
  }
  if (v80)
  {
    v81 = (char *)v80;
    operator delete(v80);
  }
}

void sub_191D29198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  sentencepiece::model::FreeList<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair>::~FreeList(&a16);
  std::__hash_table<std::__hash_value_type<NLScriptID,unsigned int>,std::__unordered_map_hasher<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::hash<int>,std::equal_to<NLScriptID>,true>,std::__unordered_map_equal<NLScriptID,std::__hash_value_type<NLScriptID,unsigned int>,std::equal_to<NLScriptID>,std::hash<int>,true>,std::allocator<std::__hash_value_type<NLScriptID,unsigned int>>>::~__hash_table((uint64_t)&a23);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

__n128 sentencepiece::bpe::Model::SampleEncode(std::string_view,float)const::$_0::operator()(uint64_t *a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  char *v55;
  uint64_t v56;
  __n128 result;
  uint64_t v58;
  uint64_t v59;
  __n128 *v60;
  void *v61;
  unsigned int v62;
  uint64_t v63;
  __n128 v64;
  __n128 v65;
  _QWORD v66[2];
  _OWORD *v67;

  if (a2 == -1)
    return result;
  if (a3 == -1)
    return result;
  v6 = a2;
  v7 = *(_QWORD *)a1[2];
  if (*(_BYTE *)(v7 + 32 * a2 + 8))
    return result;
  v8 = a3;
  v9 = v7 + 32 * a3;
  if (*(_BYTE *)(v9 + 8))
    return result;
  v10 = *a1;
  v11 = v7 + 32 * a2;
  v12 = *(_BYTE **)(v11 + 16);
  v13 = *(_QWORD *)(v9 + 24) + *(_QWORD *)(v11 + 24);
  v66[0] = v12;
  v66[1] = v13;
  v14 = *(unsigned int **)(v10 + 40);
  v15 = *v14;
  if (v13)
  {
    v16 = 0;
    v17 = v13;
    while (1)
    {
      v18 = *v12++;
      v16 ^= (v15 >> 10 << ((v15 >> 6) & 8)) ^ v18;
      v15 = v14[v16];
      if ((v15 & 0x800000FF) != v18)
        return result;
      if (!--v17)
        goto LABEL_17;
    }
  }
  v19 = *v12;
  if (*v12)
  {
    v16 = 0;
    v20 = v12 + 1;
    while (1)
    {
      v16 ^= (v15 >> 10 << ((v15 >> 6) & 8)) ^ v19;
      v15 = v14[v16];
      if ((v15 & 0x800000FF) != v19)
        return result;
      v21 = *v20++;
      v19 = v21;
      if (!v21)
        goto LABEL_17;
    }
  }
  v16 = 0;
LABEL_17:
  if ((v15 & 0x100) != 0)
  {
    v22 = v14[v16 ^ (v15 >> 10 << ((v15 >> 6) & 8))];
    v23 = (_QWORD *)a1[1];
    v24 = v23[5];
    v25 = v23[6];
    v26 = v23[4];
    if (v26 >= v25)
    {
      v26 = 0;
      ++v24;
      v23[4] = 0;
      v23[5] = v24;
    }
    v27 = v23[1];
    v63 = v10;
    if (v24 == (v23[2] - v27) >> 3)
    {
      v62 = v22;
      is_mul_ok(v25, 0x18uLL);
      v28 = (void *)operator new[]();
      bzero(v28, 24 * v23[6]);
      v30 = (_QWORD *)v23[2];
      v29 = v23[3];
      if ((unint64_t)v30 >= v29)
      {
        v61 = v28;
        v32 = (_QWORD *)v23[1];
        v33 = v30 - v32;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 61)
          goto LABEL_60;
        v35 = v29 - (_QWORD)v32;
        if (v35 >> 2 > v34)
          v34 = v35 >> 2;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        v37 = v61;
        if (v36)
        {
          if (v36 >> 61)
            goto LABEL_61;
          v38 = (char *)operator new(8 * v36);
          v33 = v30 - v32;
          v37 = v61;
        }
        else
        {
          v38 = 0;
        }
        v39 = &v38[8 * v33];
        v40 = &v38[8 * v36];
        *(_QWORD *)v39 = v37;
        v31 = v39 + 8;
        if (v30 != v32)
        {
          do
          {
            v41 = *--v30;
            *((_QWORD *)v39 - 1) = v41;
            v39 -= 8;
          }
          while (v30 != v32);
          v30 = (_QWORD *)v23[1];
        }
        v23[1] = v39;
        v23[2] = v31;
        v23[3] = v40;
        v22 = v62;
        if (v30)
          operator delete(v30);
      }
      else
      {
        *v30 = v28;
        v31 = v30 + 1;
        v22 = v62;
      }
      v23[2] = v31;
      v27 = v23[1];
      v26 = v23[4];
      v24 = v23[5];
      v10 = v63;
    }
    v42 = *(_QWORD *)(v27 + 8 * v24) + 24 * v26;
    v23[4] = v26 + 1;
    *(_DWORD *)v42 = a2;
    *(_DWORD *)(v42 + 4) = a3;
    v43 = v22 & 0x7FFFFFFF;
    *(float *)(v42 + 8) = (*(float (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
    *(_QWORD *)(v42 + 16) = v13;
    v44 = (uint64_t *)a1[3];
    v46 = (_QWORD *)v44[1];
    v45 = v44[2];
    if ((unint64_t)v46 < v45)
    {
      *v46 = v42;
      v47 = (uint64_t)(v46 + 1);
LABEL_58:
      v44[1] = v47;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPairComparator &,std::__wrap_iter<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair **>>(*v44, v47, (v47 - *v44) >> 3);
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v10 + 8) + 128))(*(_QWORD *)(v10 + 8), v43))
      {
        v58 = *(_QWORD *)a1[2];
        v64 = *(__n128 *)(v58 + 32 * v6 + 16);
        v65 = *(__n128 *)(v58 + 32 * v8 + 16);
        v59 = a1[4];
        v67 = v66;
        v60 = (__n128 *)std::__hash_table<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>(v59, (uint64_t)v66, (uint64_t)&std::piecewise_construct, &v67);
        result = v64;
        v60[2] = v64;
        v60[3] = v65;
      }
      return result;
    }
    v48 = *v44;
    v49 = ((uint64_t)v46 - *v44) >> 3;
    v50 = v49 + 1;
    if (!((unint64_t)(v49 + 1) >> 61))
    {
      v51 = v45 - v48;
      if (v51 >> 2 > v50)
        v50 = v51 >> 2;
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
        v52 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v52 = v50;
      if (!v52)
      {
        v53 = 0;
        goto LABEL_51;
      }
      if (!(v52 >> 61))
      {
        v53 = (char *)operator new(8 * v52);
LABEL_51:
        v54 = (uint64_t *)&v53[8 * v49];
        v55 = &v53[8 * v52];
        *v54 = v42;
        v47 = (uint64_t)(v54 + 1);
        if (v46 == (_QWORD *)v48)
        {
          v10 = v63;
        }
        else
        {
          v10 = v63;
          do
          {
            v56 = *--v46;
            *--v54 = v56;
          }
          while (v46 != (_QWORD *)v48);
          v46 = (_QWORD *)*v44;
        }
        *v44 = (uint64_t)v54;
        v44[1] = v47;
        v44[2] = (uint64_t)v55;
        if (v46)
          operator delete(v46);
        goto LABEL_58;
      }
LABEL_61:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_60:
    std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
  }
  return result;
}

uint64_t std::function<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v6 = a4;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, v7, &v6);
}

_QWORD *sentencepiece::model::FreeList<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair>::~FreeList(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E2DF1320;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x19401E970](*v2, 0x1000C801E56706BLL);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sentencepiece::bpe::Model::Encode(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)a1 + 56))(a1, 0.0);
}

uint64_t sentencepiece::bpe::Model::IsSampleEncodeAvailable(sentencepiece::bpe::Model *this)
{
  return 1;
}

uint64_t sentencepiece::bpe::Model::IsNBestEncodeAvailable(sentencepiece::bpe::Model *this)
{
  return 0;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPairComparator &,std::__wrap_iter<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair **>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  float v13;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v4 = v3 >> 1;
    v5 = result + 8 * (v3 >> 1);
    v6 = *(_DWORD **)v5;
    v7 = *(_QWORD *)(a2 - 8);
    v8 = *(float *)(*(_QWORD *)v5 + 8);
    v9 = *(float *)(v7 + 8);
    if (v8 < v9 || v8 == v9 && *v6 > *(_DWORD *)v7)
    {
      *(_QWORD *)(a2 - 8) = v6;
      if (v3 >= 2)
      {
        while (1)
        {
          v11 = v4 - 1;
          v4 = (v4 - 1) >> 1;
          v10 = result + 8 * v4;
          v12 = *(_DWORD **)v10;
          v13 = *(float *)(*(_QWORD *)v10 + 8);
          if (v13 >= v9 && (v13 != v9 || *v12 <= *(_DWORD *)v7))
            break;
          *(_QWORD *)v5 = v12;
          v5 = result + 8 * v4;
          if (v11 <= 1)
            goto LABEL_11;
        }
      }
      v10 = v5;
LABEL_11:
      *(_QWORD *)v10 = v7;
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *v15;
  uint64_t *v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_view_hash<char>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v18 = a2;
        v16 = *(uint64_t **)a2;
        v17 = *(_QWORD *)(v18 + 8);
        do
        {
          v19 = *((_QWORD *)v15 + 1);
          if (v19 == v10)
          {
            if (*((_QWORD *)v15 + 3) == v17 && !memcmp(*((const void **)v15 + 2), v16, v17))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v19 >= v11)
                v19 %= v11;
            }
            else
            {
              v19 &= v11 - 1;
            }
            if (v19 != v4)
              break;
          }
          v15 = *(void **)v15;
        }
        while (v15);
      }
    }
  }
  v15 = operator new(0x40uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v10;
  *((_OWORD *)v15 + 1) = **a4;
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<long,std::hash<long>,std::equal_to<long>,std::allocator<long>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)v15 = *v27;
LABEL_40:
    *v27 = v15;
    goto LABEL_41;
  }
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v26 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_40;
  }
LABEL_41:
  ++*v8;
  return v15;
}

void sub_191D29A3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__string_view_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  char v4;

  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v4, a2, a3);
}

void sentencepiece::model::FreeList<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair>::~FreeList(_QWORD *a1)
{
  sentencepiece::model::FreeList<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair>::~FreeList(a1);
  JUMPOUT(0x19401E994);
}

void std::__function::__func<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2,std::allocator<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2>,void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::~__func()
{
  JUMPOUT(0x19401E994);
}

__n128 std::__function::__func<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2,std::allocator<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2>,void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E2DF3488;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2,std::allocator<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2>,void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DF3488;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2,std::allocator<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2>,void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::operator()(uint64_t a1, _QWORD *a2, void ***a3)
{
  uint64_t v4;
  void **v5;
  _QWORD **v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;

  v4 = a2[1];
  v5 = *a3;
  *(_QWORD *)&v33 = *a2;
  *((_QWORD *)&v33 + 1) = v4;
  v6 = *(_QWORD ***)(a1 + 8);
  v7 = ((uint64_t (*)(_QWORD **, _QWORD, uint64_t))(*v6)[14])(v6, v33, v4);
  if ((_DWORD)v7 == -1 || ((*(uint64_t (**)(_QWORD *, uint64_t))(*v6[1] + 128))(v6[1], v7) & 1) == 0)
  {
    v10 = (char *)v5[2];
    v11 = (char *)v5[1];
    if (v11 >= v10)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)*v5) >> 3);
      v14 = v13 + 1;
      if (v13 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (_BYTE *)*v5) >> 3);
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0x555555555555555)
          v16 = 0xAAAAAAAAAAAAAAALL;
        else
          v16 = v14;
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(v5 + 2), v16);
        v18 = &v17[24 * v13];
        v20 = &v17[24 * v19];
        *(_OWORD *)v18 = v33;
        *((_DWORD *)v18 + 4) = v7;
        v12 = v18 + 24;
        v22 = (char *)*v5;
        v21 = (char *)v5[1];
        if (v21 == *v5)
          goto LABEL_16;
        do
        {
          v23 = *(_OWORD *)(v21 - 24);
          *((_QWORD *)v18 - 1) = *((_QWORD *)v21 - 1);
          *(_OWORD *)(v18 - 24) = v23;
          v18 -= 24;
          v21 -= 24;
        }
        while (v21 != v22);
        goto LABEL_15;
      }
LABEL_30:
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    }
  }
  else
  {
    v8 = std::__hash_table<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>>>::find<std::string_view>(*(_QWORD **)(a1 + 24), (uint64_t)&v33);
    if (v8)
    {
      v9 = (uint64_t *)v8;
      std::function<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::operator()(*(_QWORD *)(a1 + 16), v9[4], v9[5], (uint64_t)v5);
      std::function<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::operator()(*(_QWORD *)(a1 + 16), v9[6], v9[7], (uint64_t)v5);
      return;
    }
    v24 = (char *)v5[2];
    v11 = (char *)v5[1];
    if (v11 >= v24)
    {
      v25 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)*v5) >> 3);
      v26 = v25 + 1;
      if (v25 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        v27 = 0xAAAAAAAAAAAAAAABLL * ((v24 - (_BYTE *)*v5) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(v5 + 2), v28);
        v18 = &v29[24 * v25];
        v20 = &v29[24 * v30];
        *(_OWORD *)v18 = v33;
        *((_DWORD *)v18 + 4) = v7;
        v12 = v18 + 24;
        v31 = (char *)*v5;
        v21 = (char *)v5[1];
        if (v21 == *v5)
          goto LABEL_16;
        do
        {
          v32 = *(_OWORD *)(v21 - 24);
          *((_QWORD *)v18 - 1) = *((_QWORD *)v21 - 1);
          *(_OWORD *)(v18 - 24) = v32;
          v18 -= 24;
          v21 -= 24;
        }
        while (v21 != v31);
LABEL_15:
        v21 = (char *)*v5;
LABEL_16:
        *v5 = v18;
        v5[1] = v12;
        v5[2] = v20;
        if (v21)
          operator delete(v21);
        goto LABEL_18;
      }
      goto LABEL_30;
    }
  }
  *(_OWORD *)v11 = v33;
  *((_DWORD *)v11 + 4) = v7;
  v12 = v11 + 24;
LABEL_18:
  v5[1] = v12;
}

uint64_t std::__function::__func<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2,std::allocator<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2>,void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2,std::allocator<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2>,void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::target_type()
{
}

uint64_t **std::__hash_table<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>>>::find<std::string_view>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  uint64_t *v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;

  v4 = std::__string_view_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v14 = a2;
    v12 = *(uint64_t **)a2;
    v13 = *(_QWORD *)(v14 + 8);
    do
    {
      v15 = (unint64_t)v11[1];
      if (v15 == v6)
      {
        if (v11[3] == (uint64_t *)v13 && !memcmp(v11[2], v12, v13))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(_QWORD *)&v5)
            v15 %= *(_QWORD *)&v5;
        }
        else
        {
          v15 &= *(_QWORD *)&v5 - 1;
        }
        if (v15 != v9)
          return 0;
      }
      v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

_QWORD *std::__function::__value_func<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_191D2A034(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sentencepiece::error::Abort(sentencepiece::error *this)
{
  _QWORD *v1;
  sentencepiece *v2;

  if (!sentencepiece::error::gTestCounter)
  {
    v1 = std::operator<<[abi:ne180100]<std::char_traits<char>>(MEMORY[0x1E0DE4A50], "Program terminated with an unrecoverable error.");
    v2 = (sentencepiece *)std::endl[abi:ne180100]<char,std::char_traits<char>>(v1);
    sentencepiece::ShutdownLibrary(v2);
    exit(-1);
  }
  sentencepiece::error::gTestCounter = 2;
}

_QWORD *sentencepiece::util::Status::Status(_QWORD *this)
{
  *this = 0;
  return this;
}

void sentencepiece::util::Status::~Status(sentencepiece::util::Status *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<sentencepiece::util::Status::Rep>::operator()[abi:ne180100]((uint64_t)this, v1);
}

uint64_t sentencepiece::util::Status::Status(uint64_t a1, int a2, const void *a3, size_t a4)
{
  uint64_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 __dst;
  unint64_t v16;

  v8 = operator new();
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)v8 = a2;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 >= 0x17)
  {
    v10 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v10 = a4 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = a4;
    v16 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v16) = a4;
  p_dst = &__dst;
  if (a4)
LABEL_8:
    memmove(p_dst, a3, a4);
  *((_BYTE *)p_dst + a4) = 0;
  v12 = *(_QWORD *)a1 + 8;
  if (*(char *)(*(_QWORD *)a1 + 31) < 0)
    operator delete(*(void **)v12);
  v13 = __dst;
  *(_QWORD *)(v12 + 16) = v16;
  *(_OWORD *)v12 = v13;
  return a1;
}

void sub_191D2A1D0(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    std::default_delete<sentencepiece::util::Status::Rep>::operator()[abi:ne180100]((uint64_t)v1, v3);
  _Unwind_Resume(exception_object);
}

sentencepiece::util::Status *sentencepiece::util::Status::Status(sentencepiece::util::Status *this, const sentencepiece::util::Status *a2)
{
  uint64_t v4;
  _DWORD *v5;
  std::string *v6;
  __int128 v7;

  if (*(_QWORD *)a2)
  {
    v4 = operator new();
    v5 = *(_DWORD **)a2;
    *(_DWORD *)v4 = **(_DWORD **)a2;
    v6 = (std::string *)(v4 + 8);
    if (*((char *)v5 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)v5 + 1), *((_QWORD *)v5 + 2));
    }
    else
    {
      v7 = *(_OWORD *)(v5 + 2);
      *(_QWORD *)(v4 + 24) = *((_QWORD *)v5 + 3);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
    }
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)this = v4;
  return this;
}

void sub_191D2A280(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

void sentencepiece::util::Status::operator=(uint64_t *a1, _DWORD **a2)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  std::string *v7;
  __int128 v8;

  v3 = *a1;
  if ((_DWORD *)*a1 != *a2)
  {
    if (*a2)
    {
      v5 = operator new();
      v6 = *a2;
      *(_DWORD *)v5 = **a2;
      v7 = (std::string *)(v5 + 8);
      if (*((char *)v6 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)v6 + 1), *((_QWORD *)v6 + 2));
      }
      else
      {
        v8 = *(_OWORD *)(v6 + 2);
        *(_QWORD *)(v5 + 24) = *((_QWORD *)v6 + 3);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
      }
      v3 = *a1;
    }
    else
    {
      v5 = 0;
    }
    *a1 = v5;
    if (v3)
      std::default_delete<sentencepiece::util::Status::Rep>::operator()[abi:ne180100]((uint64_t)a1, v3);
  }
}

void sub_191D2A358(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

const char *sentencepiece::util::Status::error_message(sentencepiece::util::Status *this)
{
  uint64_t v1;
  const char *result;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return "";
  result = (const char *)(v1 + 8);
  if (*(char *)(v1 + 31) < 0)
    return *(const char **)result;
  return result;
}

std::string *sentencepiece::util::Status::ToString@<X0>(sentencepiece::util::Status *this@<X0>, std::string *a2@<X8>)
{
  _DWORD *v3;
  unsigned int v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;

  v3 = *(_DWORD **)this;
  if (!*(_QWORD *)this)
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "OK");
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v5 = *v3 - 1;
  if (v5 < 0x10)
    MEMORY[0x19401E64C](a2, (&off_1E2DF5538)[v5]);
  std::string::append(a2, ": ");
  v6 = *(char *)(*(_QWORD *)this + 31);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)(*(_QWORD *)this + 8);
  else
    v7 = *(const std::string::value_type **)(*(_QWORD *)this + 8);
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(*(_QWORD *)this + 31);
  else
    v8 = *(_QWORD *)(*(_QWORD *)this + 16);
  return std::string::append(a2, v7, v8);
}

void sub_191D2A44C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::default_delete<sentencepiece::util::Status::Rep>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 31) < 0)
      operator delete(*(void **)(a2 + 8));
    JUMPOUT(0x19401E994);
  }
}

_QWORD *google::protobuf::internal::ArenaImpl::thread_cache(google::protobuf::internal::ArenaImpl *this)
{
  unsigned __int8 v1;
  pthread_key_t *v3;

  if ((v1 & 1) == 0
  {
    v3 = (pthread_key_t *)operator new();
    pthread_key_create(v3, (void (__cdecl *)(void *))google::protobuf::internal::ThreadLocalStorage<google::protobuf::internal::ArenaImpl::ThreadCache>::Delete);
    google::protobuf::internal::ArenaImpl::thread_cache(void)::thread_cache_ = (uint64_t)v3;
  }
  return google::protobuf::internal::ThreadLocalStorage<google::protobuf::internal::ArenaImpl::ThreadCache>::Get((pthread_key_t *)google::protobuf::internal::ArenaImpl::thread_cache(void)::thread_cache_);
}

void sub_191D2A53C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x1000C4000313F17);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::internal::ThreadLocalStorage<google::protobuf::internal::ArenaImpl::ThreadCache>::Get(pthread_key_t *a1)
{
  _QWORD *v2;

  v2 = pthread_getspecific(*a1);
  if (!v2)
  {
    v2 = operator new(0x40uLL, (std::align_val_t)0x40uLL);
    *(_OWORD *)v2 = xmmword_191D438A0;
    v2[2] = 0;
    pthread_setspecific(*a1, v2);
  }
  return v2;
}

uint64_t google::protobuf::internal::SerialArena::Block::Pointer(google::protobuf::internal::SerialArena::Block *this, unint64_t a2)
{
  std::string *v4;
  char v6;
  std::string v7[2];

  if (*((_QWORD *)this + 2) < a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 111);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: n <= size_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  return (uint64_t)this + a2;
}

void sub_191D2A654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::internal::SerialArena::New(google::protobuf::internal::SerialArena *this, google::protobuf::internal::SerialArena::Block *a2, void *a3, google::protobuf::internal::ArenaImpl *a4)
{
  unint64_t v7;
  unint64_t v8;
  std::string *v9;
  _QWORD *v10;
  uint64_t v11;
  char v13;
  std::string v14[2];

  v7 = *((_QWORD *)this + 1);
  v8 = v7 + 72;
  if (v7 + 72 > *((_QWORD *)this + 2))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 398);
    v9 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (pos + ArenaImpl::kSerialArenaSize) <= (b->size()): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  v10 = (_QWORD *)google::protobuf::internal::SerialArena::Block::Pointer(this, v7);
  *((_QWORD *)this + 1) = v8;
  *v10 = a3;
  v10[1] = a2;
  v10[2] = this;
  v10[5] = google::protobuf::internal::SerialArena::Block::Pointer(this, v8);
  v11 = google::protobuf::internal::SerialArena::Block::Pointer(this, *((_QWORD *)this + 2));
  v10[3] = 0;
  v10[7] = 0;
  v10[8] = 0;
  v10[6] = v11;
  return v10;
}

void sub_191D2A758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void *google::protobuf::internal::ArenaImpl::NewBuffer(google::protobuf::internal::ArenaImpl *this, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  size_t v9;
  void *result;
  unint64_t *v11;
  unint64_t v12;
  char v13;
  std::string v14[2];

  v5 = *((_QWORD *)this + 4);
  if (a2 == -1)
  {
    if (v5)
      v7 = *(_QWORD *)v5;
    else
      v7 = 256;
  }
  else
  {
    if (v5)
      v6 = *(_QWORD *)(v5 + 8);
    else
      v6 = 0x2000;
    if (v6 >= 2 * a2)
      v7 = 2 * a2;
    else
      v7 = v6;
  }
  if (a3 >= 0xFFFFFFFFFFFFFFE8)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 245);
    v8 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (min_bytes) <= (std::numeric_limits<size_t>::max() - kBlockHeaderSize): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v8->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
    v5 = *((_QWORD *)this + 4);
  }
  if (v7 <= a3 + 24)
    v9 = a3 + 24;
  else
    v9 = v7;
  if (v5)
    result = (void *)(*(uint64_t (**)(size_t))(v5 + 16))(v9);
  else
    result = operator new(v9);
  v11 = (unint64_t *)((char *)this + 16);
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + v9, v11));
  return result;
}

void sub_191D2A8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal::SerialArena::Block *google::protobuf::internal::SerialArena::NewBlock(google::protobuf::internal::SerialArena *this, google::protobuf::internal::SerialArena::Block *a2, google::protobuf::internal::ArenaImpl *a3, google::protobuf::internal::ArenaImpl *a4)
{
  uint64_t v7;
  google::protobuf::internal::SerialArena::Block *v8;
  uint64_t v9;

  if (this)
    v7 = *((_QWORD *)this + 2);
  else
    v7 = -1;
  v8 = (google::protobuf::internal::SerialArena::Block *)google::protobuf::internal::ArenaImpl::NewBuffer(a3, v7, (unint64_t)a2);
  return google::protobuf::internal::SerialArena::Block::Block(v8, v9, (unint64_t)this, 0, 0);
}

_QWORD *google::protobuf::internal::SerialArena::AddCleanupFallback(google::protobuf::internal::SerialArena *this, void *a2, void (*a3)(void *), google::protobuf::internal::ArenaImpl *a4)
{
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;

  result = (_QWORD *)*((_QWORD *)this + 3);
  do
  {
    if (result)
    {
      if ((unint64_t)(2 * *result) >= 0x40)
        v8 = 64;
      else
        v8 = 2 * *result;
    }
    else
    {
      v8 = 8;
    }
    result = (_QWORD *)google::protobuf::internal::SerialArena::AllocateAligned(this, (google::protobuf::internal::SerialArena::Block *)((16 * (_WORD)v8 + 23) & 0xFF0), (uint64_t)a3, a4);
    v9 = *((_QWORD *)this + 3);
    *result = v8;
    result[1] = v9;
    *((_QWORD *)this + 3) = result;
    *((_QWORD *)this + 7) = result + 2;
    *((_QWORD *)this + 8) = &result[2 * v8 + 2];
  }
  while (!(16 * v8));
  result[2] = a2;
  result[3] = a3;
  *((_QWORD *)this + 7) = result + 4;
  return result;
}

unint64_t google::protobuf::internal::SerialArena::AllocateAligned(google::protobuf::internal::SerialArena *this, google::protobuf::internal::SerialArena::Block *a2, uint64_t a3, google::protobuf::internal::ArenaImpl *a4)
{
  std::string *v6;
  unint64_t result;
  unint64_t v8;
  std::string *v9;
  char v10;
  std::string v11[2];

  if ((google::protobuf::internal::SerialArena::Block *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFF8) != a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 159);
    v6 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (internal::AlignUpTo8(n)) == (n): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  result = *((_QWORD *)this + 5);
  v8 = *((_QWORD *)this + 6);
  if (v8 < result)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 160);
    v9 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (limit_) >= (ptr_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    result = *((_QWORD *)this + 5);
    v8 = *((_QWORD *)this + 6);
  }
  if (v8 - result < (unint64_t)a2)
    return google::protobuf::internal::SerialArena::AllocateAlignedFallback(this, a2, a3, a4);
  *((_QWORD *)this + 5) = (char *)a2 + result;
  return result;
}

void sub_191D2AA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(google::protobuf::internal::ArenaImpl *this, google::protobuf::internal::SerialArena::Block *a2, void (*a3)(void *))
{
  google::protobuf::internal::ArenaImpl *v6;
  google::protobuf::internal::ArenaImpl *v7;
  google::protobuf::internal::SerialArena *v8;
  _QWORD *v10;

  v6 = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  if (*((_QWORD *)v6 + 1) == *((_QWORD *)this + 3))
  {
    v8 = (google::protobuf::internal::SerialArena *)*((_QWORD *)v6 + 2);
    return google::protobuf::internal::SerialArena::AllocateAlignedAndAddCleanup(v8, a2, a3, v7);
  }
  v10 = google::protobuf::internal::ArenaImpl::thread_cache(v6);
  v8 = (google::protobuf::internal::SerialArena *)atomic_load((unint64_t *)this + 1);
  if (v8 && *((_QWORD **)v8 + 1) == v10)
    return google::protobuf::internal::SerialArena::AllocateAlignedAndAddCleanup(v8, a2, a3, v7);
  return google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanupFallback(this, a2, a3);
}

void *google::protobuf::internal::SerialArena::AllocateAlignedAndAddCleanup(google::protobuf::internal::SerialArena *this, google::protobuf::internal::SerialArena::Block *a2, void (*a3)(void *), google::protobuf::internal::ArenaImpl *a4)
{
  void *Aligned;
  google::protobuf::internal::ArenaImpl *v7;
  void *v8;
  _QWORD *v9;

  Aligned = (void *)google::protobuf::internal::SerialArena::AllocateAligned(this, a2, (uint64_t)a3, a4);
  v8 = Aligned;
  v9 = (_QWORD *)*((_QWORD *)this + 7);
  if (v9 == *((_QWORD **)this + 8))
  {
    google::protobuf::internal::SerialArena::AddCleanupFallback(this, Aligned, a3, v7);
  }
  else
  {
    *v9 = Aligned;
    v9[1] = a3;
    *((_QWORD *)this + 7) = v9 + 2;
  }
  return v8;
}

void *google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanupFallback(google::protobuf::internal::ArenaImpl *this, google::protobuf::internal::SerialArena::Block *a2, void (*a3)(void *))
{
  google::protobuf::internal::SerialArena::Block *v6;
  google::protobuf::internal::ArenaImpl *SerialArenaFallback;
  google::protobuf::internal::ArenaImpl *v8;

  v6 = (google::protobuf::internal::SerialArena::Block *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  SerialArenaFallback = google::protobuf::internal::ArenaImpl::GetSerialArenaFallback(this, v6);
  return google::protobuf::internal::SerialArena::AllocateAlignedAndAddCleanup(SerialArenaFallback, a2, a3, v8);
}

unint64_t google::protobuf::internal::ArenaImpl::AllocateAlignedFallback(google::protobuf::internal::ArenaImpl *this, google::protobuf::internal::SerialArena::Block *a2)
{
  google::protobuf::internal::SerialArena::Block *v4;
  google::protobuf::internal::ArenaImpl *SerialArenaFallback;
  uint64_t v6;
  google::protobuf::internal::ArenaImpl *v7;

  v4 = (google::protobuf::internal::SerialArena::Block *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  SerialArenaFallback = google::protobuf::internal::ArenaImpl::GetSerialArenaFallback(this, v4);
  return google::protobuf::internal::SerialArena::AllocateAligned(SerialArenaFallback, a2, v6, v7);
}

google::protobuf::internal::ArenaImpl *google::protobuf::internal::ArenaImpl::GetSerialArenaFallback(google::protobuf::internal::ArenaImpl *this, google::protobuf::internal::SerialArena::Block *a2)
{
  unint64_t *v3;
  google::protobuf::internal::ArenaImpl *v4;
  google::protobuf::internal::SerialArena *v5;
  uint64_t v6;
  google::protobuf::internal::ArenaImpl *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  google::protobuf::internal::ArenaImpl *v12;
  unint64_t v13;

  v3 = (unint64_t *)this;
  v4 = (google::protobuf::internal::ArenaImpl *)atomic_load((unint64_t *)this);
  if (!v4)
  {
LABEL_4:
    v5 = (google::protobuf::internal::SerialArena *)google::protobuf::internal::ArenaImpl::NewBuffer(this, -1, 0x48uLL);
    *(_OWORD *)v5 = xmmword_191D438B0;
    *((_QWORD *)v5 + 2) = v6;
    this = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::SerialArena::New(v5, a2, v3, v7);
    v4 = this;
    v8 = *v3;
    *((_QWORD *)this + 4) = *v3;
    v9 = __ldxr(v3);
    if (v9 == v8)
    {
      if (__stlxr((unint64_t)this, v3))
        goto LABEL_8;
      goto LABEL_14;
    }
    __clrex();
LABEL_8:
    while (1)
    {
      *((_QWORD *)this + 4) = v9;
      v10 = __ldxr(v3);
      if (v10 != v9)
        break;
      if (__stlxr((unint64_t)this, v3))
        goto LABEL_12;
      v11 = 1;
LABEL_13:
      v9 = v10;
      if ((v11 & 1) != 0)
        goto LABEL_14;
    }
    __clrex();
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  while (*((google::protobuf::internal::SerialArena::Block **)v4 + 1) != a2)
  {
    v4 = (google::protobuf::internal::ArenaImpl *)*((_QWORD *)v4 + 4);
    if (!v4)
      goto LABEL_4;
  }
LABEL_14:
  v12 = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  *((_QWORD *)v12 + 2) = v4;
  v13 = v3[3];
  google::protobuf::internal::ArenaImpl::thread_cache(v12)[1] = v13;
  atomic_store((unint64_t)v4, v3 + 1);
  return v4;
}

uint64_t google::protobuf::internal::SerialArena::AllocateAlignedFallback(google::protobuf::internal::SerialArena *this, google::protobuf::internal::SerialArena::Block *a2, uint64_t a3, google::protobuf::internal::ArenaImpl *a4)
{
  google::protobuf::internal::SerialArena *v6;
  unint64_t *v7;

  v6 = (google::protobuf::internal::SerialArena *)*((_QWORD *)this + 2);
  *((_QWORD *)v6 + 1) = *((_QWORD *)v6 + 2) - *((_QWORD *)this + 6) + *((_QWORD *)this + 5);
  v7 = (unint64_t *)google::protobuf::internal::SerialArena::NewBlock(v6, a2, *(google::protobuf::internal::ArenaImpl **)this, a4);
  *((_QWORD *)this + 2) = v7;
  *((_QWORD *)this + 5) = google::protobuf::internal::SerialArena::Block::Pointer((google::protobuf::internal::SerialArena::Block *)v7, v7[1]);
  *((_QWORD *)this + 6) = google::protobuf::internal::SerialArena::Block::Pointer(*((google::protobuf::internal::SerialArena::Block **)this + 2), *(_QWORD *)(*((_QWORD *)this + 2) + 16));
  return google::protobuf::internal::SerialArena::AllocateAligned(this, (unint64_t)a2);
}

unint64_t google::protobuf::internal::ArenaImpl::AllocateAligned(google::protobuf::internal::ArenaImpl *this, google::protobuf::internal::SerialArena::Block *a2)
{
  google::protobuf::internal::ArenaImpl *v4;
  uint64_t v5;
  google::protobuf::internal::ArenaImpl *v6;
  google::protobuf::internal::SerialArena *v7;
  _QWORD *v9;

  v4 = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  if (*((_QWORD *)v4 + 1) == *((_QWORD *)this + 3))
  {
    v7 = (google::protobuf::internal::SerialArena *)*((_QWORD *)v4 + 2);
    return google::protobuf::internal::SerialArena::AllocateAligned(v7, a2, v5, v6);
  }
  v9 = google::protobuf::internal::ArenaImpl::thread_cache(v4);
  v7 = (google::protobuf::internal::SerialArena *)atomic_load((unint64_t *)this + 1);
  if (v7 && *((_QWORD **)v7 + 1) == v9)
    return google::protobuf::internal::SerialArena::AllocateAligned(v7, a2, v5, v6);
  return google::protobuf::internal::ArenaImpl::AllocateAlignedFallback(this, a2);
}

google::protobuf::internal::SerialArena::Block *google::protobuf::internal::SerialArena::Block::Block(google::protobuf::internal::SerialArena::Block *this, uint64_t a2, unint64_t a3, unsigned int a4, int a5)
{
  uint64_t v6;
  std::string *v7;
  char v9;
  std::string v10[2];

  v6 = 2;
  if (!a5)
    v6 = 0;
  *(_QWORD *)this = v6 | a4 | a3;
  *((_QWORD *)this + 1) = 24;
  *((_QWORD *)this + 2) = a2;
  if ((a3 & 3) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 107);
    v7 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (reinterpret_cast<uintptr_t>(next) & 3) == (0u): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_191D2AE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ThreadLocalStorage<google::protobuf::internal::ArenaImpl::ThreadCache>::Delete(uint64_t result)
{
  if (result)
    JUMPOUT(0x19401E988);
  return result;
}

google::protobuf::internal::LazyString *google::protobuf::internal::LazyString::Init(google::protobuf::internal::LazyString *this)
{
  unsigned __int8 v2;
  google::protobuf::internal::LazyString *v3;

  {
    __cxa_atexit((void (*)(void *))google::protobuf::internal::WrappedMutex::~WrappedMutex, &google::protobuf::internal::LazyString::Init(void)const::mu, &dword_191C5D000);
  }
  std::mutex::lock(&google::protobuf::internal::LazyString::Init(void)const::mu);
  v3 = (google::protobuf::internal::LazyString *)atomic_load((unint64_t *)this + 3);
  if (!v3)
  {
    std::string::basic_string[abi:ne180100](this, *(void **)this, *((_QWORD *)this + 1));
    atomic_store((unint64_t)this, (unint64_t *)this + 3);
    v3 = this;
  }
  std::mutex::unlock(&google::protobuf::internal::LazyString::Init(void)const::mu);
  return v3;
}

void google::protobuf::internal::ArenaStringPtr::Set(google::protobuf::internal::ArenaStringPtr *this, uint64_t a2, __int128 *a3, google::protobuf::internal::ArenaImpl *a4)
{
  std::string *AlignedAndAddCleanup;
  std::string *v8;
  __int128 v9;

  if (*(_QWORD *)this != a2)
  {
    google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(this);
    JUMPOUT(0x19401E658);
  }
  if (!a4)
  {
    AlignedAndAddCleanup = (std::string *)operator new();
    v8 = AlignedAndAddCleanup;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&AlignedAndAddCleanup->__r_.__value_.__l.__data_ = *a3;
      AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
      goto LABEL_11;
    }
LABEL_10:
    std::string::__init_copy_ctor_external(AlignedAndAddCleanup, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
    goto LABEL_11;
  }
  if ((*((_BYTE *)a4 + 24) & 1) != 0)
  AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(a4, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  v8 = AlignedAndAddCleanup;
  if (*((char *)a3 + 23) < 0)
    goto LABEL_10;
  v9 = *a3;
  AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)&AlignedAndAddCleanup->__r_.__value_.__l.__data_ = v9;
LABEL_11:
  *(_QWORD *)this = v8;
}

{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t AlignedAndAddCleanup;
  uint64_t v10;
  google::protobuf::internal::ArenaImpl *v11;

  if (*(_QWORD *)this == a2)
  {
    if (a4)
    {
      if ((*((_BYTE *)a4 + 24) & 1) != 0)
      {
        v11 = a4;
        a4 = v11;
      }
      AlignedAndAddCleanup = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(a4, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
      v10 = *((_QWORD *)a3 + 2);
      *(_OWORD *)AlignedAndAddCleanup = *a3;
      *(_QWORD *)(AlignedAndAddCleanup + 16) = v10;
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
      *(_QWORD *)a3 = 0;
    }
    else
    {
      AlignedAndAddCleanup = operator new();
      *(_OWORD *)AlignedAndAddCleanup = *a3;
      *(_QWORD *)(AlignedAndAddCleanup + 16) = *((_QWORD *)a3 + 2);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
    }
    *(_QWORD *)this = AlignedAndAddCleanup;
  }
  else
  {
    v6 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(this);
    v7 = v6;
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    v8 = *a3;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v7 = v8;
    *((_BYTE *)a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
  }
}

void sub_191D2B080(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ArenaStringPtr::Set(google::protobuf::internal::ArenaStringPtr *a1, __int128 *a2, google::protobuf::internal::ArenaImpl *a3)
{
  google::protobuf::internal::ArenaStringPtr::Set(a1, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, a2, a3);
}

{
  google::protobuf::internal::ArenaStringPtr::Set(a1, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, a2, a3);
}

{
  google::protobuf::internal::ArenaStringPtr::Set(a1, 0, a2, a3);
}

uint64_t *google::protobuf::internal::ArenaStringPtr::Mutable(uint64_t **a1, google::protobuf::internal::ArenaImpl *a2)
{
  if (*a1 == &google::protobuf::internal::fixed_address_empty_string)
    return google::protobuf::internal::ArenaStringPtr::MutableSlow<>(a1, a2);
  else
    return (uint64_t *)google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((google::protobuf::internal::ArenaStringPtr *)a1);
}

uint64_t *google::protobuf::internal::ArenaStringPtr::MutableSlow<>(uint64_t **a1, google::protobuf::internal::ArenaImpl *this)
{
  std::string *v4;
  uint64_t *result;
  char v6;
  std::string v7[2];

  if (*a1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arenastring.cc", 147);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: IsDefault(default_value): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  if (this)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    result = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  }
  else
  {
    result = (uint64_t *)operator new();
  }
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  *a1 = result;
  return result;
}

void sub_191D2B2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::ArenaStringPtr::Mutable(google::protobuf::internal::ArenaStringPtr *this, const google::protobuf::internal::LazyString *a2, google::protobuf::Arena *a3)
{
  if (*(_QWORD *)this)
    return (std::string *)google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(this);
  else
    return google::protobuf::internal::ArenaStringPtr::MutableSlow<google::protobuf::internal::LazyString>((std::string **)this, a3, a2);
}

std::string *google::protobuf::internal::ArenaStringPtr::MutableSlow<google::protobuf::internal::LazyString>(std::string **a1, google::protobuf::internal::ArenaImpl *this, google::protobuf::internal::LazyString *a3)
{
  std::string *v6;
  google::protobuf::internal::LazyString *v7;
  std::string *AlignedAndAddCleanup;
  std::string *v9;
  __int128 v10;
  char v12;
  std::string v13[2];

  if (*a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arenastring.cc", 147);
    v6 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: IsDefault(default_value): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  v7 = (google::protobuf::internal::LazyString *)atomic_load((unint64_t *)a3 + 3);
  if (v7)
  {
    if (this)
      goto LABEL_5;
  }
  else
  {
    v7 = google::protobuf::internal::LazyString::Init(a3);
    if (this)
    {
LABEL_5:
      if ((*((_BYTE *)this + 24) & 1) != 0)
      AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
      v9 = AlignedAndAddCleanup;
      if (*((char *)v7 + 23) < 0)
        goto LABEL_8;
LABEL_11:
      v10 = *(_OWORD *)v7;
      v9->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
      goto LABEL_12;
    }
  }
  AlignedAndAddCleanup = (std::string *)operator new();
  v9 = AlignedAndAddCleanup;
  if ((*((char *)v7 + 23) & 0x80000000) == 0)
    goto LABEL_11;
LABEL_8:
  std::string::__init_copy_ctor_external(AlignedAndAddCleanup, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
LABEL_12:
  *a1 = v9;
  return v9;
}

void sub_191D2B458(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401E994](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::ArenaStringPtr::ClearToDefault(std::string *result, unint64_t *a2)
{
  std::string *v3;
  google::protobuf::internal::LazyString *v4;

  if (result->__r_.__value_.__r.__words[0])
  {
    v3 = (std::string *)google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((google::protobuf::internal::ArenaStringPtr *)result);
    v4 = (google::protobuf::internal::LazyString *)atomic_load(a2 + 3);
    if (!v4)
      v4 = google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)a2);
    return std::string::operator=(v3, (const std::string *)v4);
  }
  return result;
}

unint64_t google::protobuf::io::EpsCopyOutputStream::Flush(google::protobuf::io::EpsCopyOutputStream *this, char *a2)
{
  void *v4;
  unint64_t v5;
  int v6;
  std::string *v7;
  std::string *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  char v14;
  std::string v15[2];

  while (1)
  {
    v5 = *(_QWORD *)this;
    v4 = (void *)*((_QWORD *)this + 1);
    if (!v4)
    {
      v10 = v5 - (_QWORD)a2;
      v9 = v10 + 16;
      *((_QWORD *)this + 1) = a2;
      if ((((_DWORD)v10 + 16) & 0x80000000) == 0)
        return v9;
      goto LABEL_12;
    }
    v6 = (_DWORD)a2 - v5;
    if ((unint64_t)a2 <= v5)
      break;
    if (*((_BYTE *)this + 56))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 685);
      v7 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: !had_error_: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    }
    if (v6 >= 17)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 686);
      v8 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: overrun <= kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    }
    a2 = &google::protobuf::io::EpsCopyOutputStream::Next(this)[v6];
    if (*((_BYTE *)this + 56))
      return 0;
  }
  memcpy(v4, (char *)this + 16, a2 - ((char *)this + 16));
  v11 = *(_QWORD *)this;
  *((_QWORD *)this + 1) += a2 - ((char *)this + 16);
  v9 = v11 - (_QWORD)a2;
  if ((((_DWORD)v11 - (_DWORD)a2) & 0x80000000) == 0)
    return v9;
LABEL_12:
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 700);
  v12 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: s >= 0: ");
  google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  return v9;
}

void sub_191D2B654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::io::EpsCopyOutputStream::Next(google::protobuf::io::EpsCopyOutputStream *this)
{
  std::string *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  std::string *v9;
  std::string::size_type v10;
  char v11;
  int v12;
  std::string v13[2];

  if (*((_BYTE *)this + 56))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 788);
    v2 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !had_error_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v2->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  if (*((_QWORD *)this + 6))
  {
    v3 = (char *)this + 16;
    v5 = *(char **)this;
    v4 = (void *)*((_QWORD *)this + 1);
    if (v4)
    {
      memcpy(v4, (char *)this + 16, v5 - v3);
      v12 = 0;
      do
      {
        v13[0].__r_.__value_.__r.__words[0] = 0;
        if (((*(uint64_t (**)(_QWORD, std::string *, int *))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), v13, &v12) & 1) == 0)
        {
          *((_BYTE *)this + 56) = 1;
          goto LABEL_14;
        }
        v6 = v12;
      }
      while (!v12);
      v5 = (char *)v13[0].__r_.__value_.__r.__words[0];
      if (v12 >= 17)
      {
        *(_OWORD *)v13[0].__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)this;
        *(_QWORD *)this = &v5[v6 - 16];
        *((_QWORD *)this + 1) = 0;
        return v5;
      }
      if (v12 <= 0)
      {
        v10 = v13[0].__r_.__value_.__r.__words[0];
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 810);
        v9 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: size > 0: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v9->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
        LODWORD(v6) = v12;
        v5 = (char *)v10;
      }
      *(_OWORD *)v3 = *(_OWORD *)*(_QWORD *)this;
      v7 = &v3[(int)v6];
    }
    else
    {
      *(_OWORD *)v3 = *(_OWORD *)v5;
      v7 = (char *)this + 32;
    }
    *(_QWORD *)this = v7;
    *((_QWORD *)this + 1) = v5;
  }
  else
  {
    *((_BYTE *)this + 56) = 1;
    v3 = (char *)this + 16;
LABEL_14:
    *(_QWORD *)this = (char *)this + 32;
  }
  return v3;
}

void sub_191D2B7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::io::EpsCopyOutputStream::Trim(google::protobuf::io::EpsCopyOutputStream *this, char *a2)
{
  unint64_t v3;

  if (!*((_BYTE *)this + 56))
  {
    v3 = google::protobuf::io::EpsCopyOutputStream::Flush(this, a2);
    if ((_DWORD)v3)
      (*(void (**)(_QWORD, unint64_t))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), v3);
    a2 = (char *)this + 16;
    *(_QWORD *)this = (char *)this + 16;
    *((_QWORD *)this + 1) = (char *)this + 16;
  }
  return a2;
}

char *google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(google::protobuf::io::EpsCopyOutputStream *this, char *a2)
{
  char *v3;
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  while (!*((_BYTE *)this + 56))
  {
    v3 = &a2[-*(_QWORD *)this];
    if ((v3 & 0x80000000) != 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 829);
      v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: overrun >= 0: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
      goto LABEL_6;
    }
    if (v3 > 0x10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 830);
      v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: overrun <= kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
LABEL_6:
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
    }
    a2 = &google::protobuf::io::EpsCopyOutputStream::Next(this)[(int)v3];
    if ((unint64_t)a2 < *(_QWORD *)this)
      return a2;
  }
  return (char *)this + 16;
}

void sub_191D2B954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(google::protobuf::io::EpsCopyOutputStream *this, char *a2, int a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  int i;

  v4 = a4;
  for (i = google::protobuf::io::EpsCopyOutputStream::GetSize(this, a4);
        a3 > i;
        i = google::protobuf::io::EpsCopyOutputStream::GetSize(this, v4))
  {
    memcpy(v4, a2, i);
    a3 -= i;
    a2 += i;
    v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, (char *)&v4[i]);
  }
  memcpy(v4, a2, a3);
  return &v4[a3];
}

uint64_t google::protobuf::io::EpsCopyOutputStream::GetSize(google::protobuf::io::EpsCopyOutputStream *this, unsigned __int8 *a2)
{
  uint64_t v3;
  std::string *v5;
  char v7;
  std::string v8[2];

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this + 16 < (unint64_t)a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 838);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: ptr <= end_ + kSlopBytes: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
    v3 = *(_QWORD *)this;
  }
  return v3 - (_QWORD)a2 + 16;
}

void sub_191D2BA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteAliasedRaw(google::protobuf::io::EpsCopyOutputStream *this, void *a2, uint64_t a3, char *a4)
{
  char *v8;

  if (google::protobuf::io::EpsCopyOutputStream::GetSize(this, (unsigned __int8 *)a4) <= (int)a3)
  {
    v8 = google::protobuf::io::EpsCopyOutputStream::Trim(this, a4);
    if (((*(uint64_t (**)(_QWORD, void *, uint64_t))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), a2, a3) & 1) == 0)
    {
      *((_BYTE *)this + 56) = 1;
      v8 = (char *)this + 16;
      *(_QWORD *)this = (char *)this + 32;
    }
    return (unsigned __int8 *)v8;
  }
  if (*(_QWORD *)this - (_QWORD)a4 >= (int)a3)
  {
    memcpy(a4, a2, (int)a3);
    return (unsigned __int8 *)&a4[(int)a3];
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(this, (char *)a2, a3, (unsigned __int8 *)a4);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(google::protobuf::io::EpsCopyOutputStream *this, int a2, void **a3, char *a4)
{
  char *v4;
  unint64_t v8;
  uint64_t v9;
  std::string *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  void *v18;
  unsigned int v20;
  unsigned int v21;
  char v22;
  std::string v23[2];

  v4 = a4;
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this <= (unint64_t)a4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, a4);
    v8 = *(_QWORD *)this;
  }
  if (*((char *)a3 + 23) >= 0)
    v9 = *((unsigned __int8 *)a3 + 23);
  else
    v9 = *((unsigned int *)a3 + 2);
  if (v8 <= (unint64_t)v4)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 858);
    v10 = google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: ptr < end_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v22, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
  }
  v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    *v4 = (8 * a2) | 0x82;
    v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      v12 = v4 + 2;
      do
      {
        *(v12 - 1) = v13 | 0x80;
        v14 = v13 >> 7;
        ++v12;
        v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - 1) = v14;
    }
    else
    {
      v4[1] = v13;
      v12 = v4 + 2;
    }
  }
  else
  {
    *v4 = v11;
    v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      v16 = v20 >> 7;
      v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v16) = v9;
  }
  *v12 = v16;
  v17 = v12 + 1;
  if (*((char *)a3 + 23) >= 0)
    v18 = a3;
  else
    v18 = *a3;
  return google::protobuf::io::EpsCopyOutputStream::WriteRawMaybeAliased(this, v18, v9, v17);
}

void sub_191D2BCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteRawMaybeAliased(google::protobuf::io::EpsCopyOutputStream *this, void *a2, uint64_t a3, char *a4)
{
  uint64_t v6;

  if (*((_BYTE *)this + 57))
    return google::protobuf::io::EpsCopyOutputStream::WriteAliasedRaw(this, a2, a3, a4);
  if (*(_QWORD *)this - (_QWORD)a4 < (int)a3)
    return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(this, (char *)a2, a3, (unsigned __int8 *)a4);
  v6 = (int)a3;
  memcpy(a4, a2, (int)a3);
  return (unsigned __int8 *)&a4[v6];
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(google::protobuf::io::EpsCopyOutputStream *this, int a2, uint64_t a3, char *a4)
{
  char *v4;
  unint64_t v8;
  uint64_t v9;
  std::string *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 *v17;
  char *v18;
  unsigned int v20;
  unsigned int v21;
  char v22;
  std::string v23[2];

  v4 = a4;
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this <= (unint64_t)a4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, a4);
    v8 = *(_QWORD *)this;
  }
  if (*(char *)(a3 + 23) >= 0)
    LODWORD(v9) = *(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(_QWORD *)(a3 + 8);
  if (v8 <= (unint64_t)v4)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 858);
    v10 = google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: ptr < end_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v22, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
  }
  v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    *v4 = (8 * a2) | 0x82;
    v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      v12 = v4 + 2;
      do
      {
        *(v12 - 1) = v13 | 0x80;
        v14 = v13 >> 7;
        ++v12;
        v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - 1) = v14;
    }
    else
    {
      v4[1] = v13;
      v12 = v4 + 2;
    }
  }
  else
  {
    *v4 = v11;
    v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      v16 = v20 >> 7;
      v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v16) = v9;
  }
  *v12 = v16;
  v17 = v12 + 1;
  if (*(char *)(a3 + 23) >= 0)
    v18 = (char *)a3;
  else
    v18 = *(char **)a3;
  if (*(_QWORD *)this - (_QWORD)v17 < (int)v9)
    return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(this, v18, v9, v17);
  memcpy(v17, v18, (int)v9);
  return &v17[(int)v9];
}

void sub_191D2BF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::VerifyVersion(google::protobuf::internal *this, google::protobuf::internal *a2, const std::string::value_type *a3, const char *a4)
{
  const std::string::value_type *v7;
  std::string::size_type v8;
  const std::string::value_type *p_p;
  std::string::size_type v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  void *__p;
  std::string::size_type v16;
  unsigned __int8 v17;
  void *v18;
  std::string::size_type v19;
  unsigned __int8 v20;
  const char *v21;
  const char *v22;
  int v23;
  std::string v24;
  char __str[127];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if ((int)a2 > 3014000)
  {
    LODWORD(v21) = 3;
    v22 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/common.cc";
    v23 = 76;
    memset(&v24, 0, sizeof(v24));
    std::string::append(&v24, "This program requires version ");
    google::protobuf::internal::VersionString(a2, &v18);
    if ((v20 & 0x80u) == 0)
      v7 = (const std::string::value_type *)&v18;
    else
      v7 = (const std::string::value_type *)v18;
    if ((v20 & 0x80u) == 0)
      v8 = v20;
    else
      v8 = v19;
    std::string::append(&v24, v7, v8);
    std::string::append(&v24, " of the Protocol Buffer runtime library, but the installed version is ");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 14, 0);
    v26 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, __str);
    if ((v17 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v17 & 0x80u) == 0)
      v10 = v17;
    else
      v10 = v16;
    std::string::append(&v24, p_p, v10);
    std::string::append(&v24, ".  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v24, a3);
    std::string::append(&v24, "\".)");
    google::protobuf::internal::LogMessage::Finish(&v21);
    if ((char)v17 < 0)
      operator delete(__p);
    if ((char)v20 < 0)
      operator delete(v18);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  if ((int)this < 3014000)
  {
    LODWORD(v21) = 3;
    v22 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/common.cc";
    v23 = 87;
    memset(&v24, 0, sizeof(v24));
    std::string::append(&v24, "This program was compiled against version ");
    google::protobuf::internal::VersionString(this, &v18);
    if ((v20 & 0x80u) == 0)
      v11 = (const std::string::value_type *)&v18;
    else
      v11 = (const std::string::value_type *)v18;
    if ((v20 & 0x80u) == 0)
      v12 = v20;
    else
      v12 = v19;
    std::string::append(&v24, v11, v12);
    std::string::append(&v24, " of the Protocol Buffer runtime library, which is not compatible with the installed version (");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 14, 0);
    v26 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, __str);
    if ((v17 & 0x80u) == 0)
      v13 = (const std::string::value_type *)&__p;
    else
      v13 = (const std::string::value_type *)__p;
    if ((v17 & 0x80u) == 0)
      v14 = v17;
    else
      v14 = v16;
    std::string::append(&v24, v13, v14);
    std::string::append(&v24, ").  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v24, a3);
    std::string::append(&v24, "\".)");
    google::protobuf::internal::LogMessage::Finish(&v21);
    if ((char)v17 < 0)
      operator delete(__p);
    if ((char)v20 < 0)
      operator delete(v18);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_191D2C218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::internal::LogMessage::LogMessage(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

std::string *google::protobuf::internal::LogMessage::operator<<(std::string *a1, const std::string::value_type *a2)
{
  std::string::append(a1 + 1, a2);
  return a1;
}

{
  std::string *v3;
  std::string::size_type v4;
  std::string::size_type v5;

  v3 = a1 + 1;
  v4 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    v5 = v4;
  }
  std::string::append(v3, a2, v5);
  return a1;
}

_QWORD *google::protobuf::internal::VersionString@<X0>(google::protobuf::internal *this@<X0>, _QWORD *a2@<X8>)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x80uLL, "%d.%d.%d", (int)this / 1000000, (int)this / 1000 % 1000, (int)this % 1000);
  __str[127] = 0;
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

const char **google::protobuf::internal::LogFinisher::operator=(int a1, const char **this)
{
  return google::protobuf::internal::LogMessage::Finish(this);
}

void google::protobuf::internal::LogMessage::~LogMessage(void **this)
{
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

uint64_t google::protobuf::internal::DefaultLogHandler(uint64_t result, const char *a2, int a3, uint64_t a4)
{
  FILE **v4;
  const char *v5;

  if ((result & 0x80000000) == 0)
  {
    v4 = (FILE **)MEMORY[0x1E0C80C10];
    if (*(char *)(a4 + 23) >= 0)
      v5 = (const char *)a4;
    else
      v5 = *(const char **)a4;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "[libprotobuf %s %s:%d] %s\n", (&google::protobuf::internal::DefaultLogHandler(google::protobuf::LogLevel,char const*,int,std::string const&)::level_names)[result], a2, a3, v5);
    return fflush(*v4);
  }
  return result;
}

std::string *google::protobuf::internal::LogMessage::operator<<(std::string *a1, int a2)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x80uLL, "%d", a2);
  __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

std::string *google::protobuf::internal::LogMessage::operator<<(std::string *a1, uint64_t a2)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x80uLL, "%lu", a2);
  __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

const char **google::protobuf::internal::LogMessage::Finish(const char **this)
{
  const char **v1;
  uint64_t v2;
  int v3;
  void *exception;

  v1 = this;
  if (*(_DWORD *)this == 3)
  {
    v2 = 3;
  }
  else
  {
    v3 = atomic_load((unsigned int *)&google::protobuf::internal::log_silencer_count_);
    if (v3 > 0)
      goto LABEL_6;
    v2 = *(unsigned int *)this;
  }
  this = (const char **)google::protobuf::internal::log_handler_(v2, v1[1], *((_DWORD *)v1 + 4), (uint64_t)(v1 + 3));
LABEL_6:
  if (*(_DWORD *)v1 == 3)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException(exception, v1[1], *((unsigned int *)v1 + 4), v1 + 3);
  }
  return this;
}

void sub_191D2C60C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void google::protobuf::FatalException::~FatalException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1E2DF1B10;
  if (SHIBYTE(this[5].__vftable) < 0)
    operator delete(this[3].__vftable);
  std::exception::~exception(this);
}

{
  google::protobuf::FatalException::~FatalException(this);
  JUMPOUT(0x19401E994);
}

uint64_t google::protobuf::FatalException::what(google::protobuf::FatalException *this)
{
  uint64_t result;

  result = (uint64_t)this + 24;
  if (*((char *)this + 47) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t google::protobuf::FatalException::FatalException(uint64_t a1, uint64_t a2, int a3, __int128 *a4)
{
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = &off_1E2DF1B10;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  v5 = (std::string *)(a1 + 24);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v6 = *a4;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_191D2C6FC(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::GeneratedExtensionFinder::Find(uint64_t a1, int a2, _OWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  __int128 v14;

  {
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 8);
      v5 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
      v6 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ (v5 >> 47) ^ v5);
      v7 = (0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47))) ^ a2;
      v8 = (uint8x8_t)vcnt_s8(v3);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        v9 = v7;
        if (v7 >= *(_QWORD *)&v3)
          v9 = v7 % *(_QWORD *)&v3;
      }
      else
      {
        v9 = (*(_QWORD *)&v3 - 1) & v7;
      }
      if (v10)
      {
        for (i = *v10; i; i = (uint64_t *)*i)
        {
          v12 = i[1];
          if (v7 == v12)
          {
            if (i[2] == v4 && *((_DWORD *)i + 6) == a2)
            {
              v14 = *((_OWORD *)i + 3);
              *a3 = *((_OWORD *)i + 2);
              a3[1] = v14;
              return 1;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= *(_QWORD *)&v3)
                v12 %= *(_QWORD *)&v3;
            }
            else
            {
              v12 &= *(_QWORD *)&v3 - 1;
            }
            if (v12 != v9)
              return 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t google::protobuf::internal::ExtensionSet::ExtensionSet(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void google::protobuf::internal::ExtensionSet::~ExtensionSet(google::protobuf::internal::ExtensionSet *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase ***v2;
  uint64_t v3;
  google::protobuf::internal::RepeatedPtrFieldBase **v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_QWORD *)this)
  {
    v2 = (google::protobuf::internal::RepeatedPtrFieldBase ***)*((_QWORD *)this + 2);
    if (*((unsigned __int16 *)this + 4) >= 0x101u)
    {
      google::protobuf::internal::ExtensionSet::ForEach<std::__map_iterator<std::__tree_iterator<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::__tree_node<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,void *> *,long>>,google::protobuf::internal::ExtensionSet::~()::$_0>(*v2, v2 + 1);
    }
    else if (*((_WORD *)this + 5))
    {
      v3 = 32 * *((unsigned __int16 *)this + 5);
      v4 = (google::protobuf::internal::RepeatedPtrFieldBase **)(v2 + 1);
      do
      {
        google::protobuf::internal::ExtensionSet::Extension::Free(v4);
        v4 += 4;
        v3 -= 32;
      }
      while (v3);
    }
    v5 = *((_QWORD *)this + 2);
    if (*((unsigned __int16 *)this + 4) >= 0x101u)
    {
      if (v5)
      {
        v6 = *((_QWORD *)this + 2);
        std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy(v5, *(_QWORD **)(v5 + 8));
        MEMORY[0x19401E994](v6, 0x1020C4062D53EE8);
      }
    }
    else if (v5)
    {
      MEMORY[0x19401E970](v5, 0x1062C802AB6010CLL);
    }
  }
}

void google::protobuf::internal::ExtensionSet::Extension::Clear(google::protobuf::internal::ExtensionSet::Extension *this)
{
  uint64_t v2;
  std::string *v3;
  uint64_t v4;
  std::string *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char v10;
  std::string v11[2];

  if (*((_BYTE *)this + 9))
  {
    v2 = *((unsigned __int8 *)this + 8);
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v3 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v3->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    }
    switch(v2)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
        **(_DWORD **)this = 0;
        break;
      case 9:
      case 12:
        google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(*(_QWORD *)this);
        break;
      case 10:
      case 11:
        google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(*(_QWORD *)this);
        break;
      default:
        return;
    }
  }
  else if ((*((_BYTE *)this + 10) & 1) == 0)
  {
    v4 = *((unsigned __int8 *)this + 8);
    if ((v4 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v5 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    }
    v6 = google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v4];
    if (v6 == 10)
    {
      v8 = **(_QWORD **)this;
      if ((*((_BYTE *)this + 10) & 0x10) != 0)
        v9 = *(void (**)(void))(v8 + 112);
      else
        v9 = *(void (**)(void))(v8 + 40);
      v9();
    }
    else if (v6 == 9)
    {
      v7 = *(_QWORD *)this;
      if (*(char *)(*(_QWORD *)this + 23) < 0)
      {
        **(_BYTE **)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v7 = 0;
        *(_BYTE *)(v7 + 23) = 0;
      }
    }
    *((_BYTE *)this + 10) = *((_BYTE *)this + 10) & 0xF0 | 1;
  }
}

void sub_191D2CA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::SetInt32(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, int a4, uint64_t *a5)
{
  uint64_t **v8;
  uint64_t **v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v8 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v9 = v8;
  v8[2] = a5;
  if (v10)
  {
    *((_BYTE *)v8 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 1)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v12 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT32): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v9 + 9) = 0;
  }
  else
  {
    if (*((_BYTE *)v8 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = *((unsigned __int8 *)v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v14] != 1)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT32): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
  }
  *((_BYTE *)v9 + 10) &= 0xF0u;
  *(_DWORD *)v9 = a4;
}

void sub_191D2CC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddInt32(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, int a4, int a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *AlignedAndAddCleanup;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 1)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v15 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT32): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v16, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<int>>);
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = v16;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = 0;
    }
    *v12 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v18 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v19] != 1)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v21 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT32): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v22 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    google::protobuf::RepeatedField<int>::Reserve(v23, v24 + 1);
    result = google::protobuf::RepeatedField<int>::elements((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    result = google::protobuf::RepeatedField<int>::elements((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_191D2CFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::SetInt64(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t **v8;
  uint64_t **v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v8 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v9 = v8;
  v8[2] = a5;
  if (v10)
  {
    *((_BYTE *)v8 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 2)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v12 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT64): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v9 + 9) = 0;
  }
  else
  {
    if (*((_BYTE *)v8 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = *((unsigned __int8 *)v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v14] != 2)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT64): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
  }
  *((_BYTE *)v9 + 10) &= 0xF0u;
  *v9 = a4;
}

void sub_191D2D1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddInt64(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, int a4, uint64_t a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *AlignedAndAddCleanup;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 2)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v15 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT64): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v16, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<long long>>);
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = v16;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = 0;
    }
    *v12 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v18 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v19] != 2)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v21 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT64): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v22 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    google::protobuf::RepeatedField<long long>::Reserve(v23, v24 + 1);
    result = google::protobuf::RepeatedField<long long>::elements((uint64_t)v23);
    *(_QWORD *)(result + 8 * v24) = a5;
  }
  else
  {
    result = google::protobuf::RepeatedField<long long>::elements((uint64_t)v23);
    *(_QWORD *)(result + 8 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_191D2D4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::SetUInt32(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, int a4, uint64_t *a5)
{
  uint64_t **v8;
  uint64_t **v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v8 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v9 = v8;
  v8[2] = a5;
  if (v10)
  {
    *((_BYTE *)v8 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 3)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v12 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v9 + 9) = 0;
  }
  else
  {
    if (*((_BYTE *)v8 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = *((unsigned __int8 *)v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v14] != 3)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
  }
  *((_BYTE *)v9 + 10) &= 0xF0u;
  *(_DWORD *)v9 = a4;
}

void sub_191D2D6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddUInt32(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, int a4, int a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *AlignedAndAddCleanup;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 3)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v15 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v16, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<unsigned int>>);
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = v16;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = 0;
    }
    *v12 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v18 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v19] != 3)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v21 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v22 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    google::protobuf::RepeatedField<unsigned int>::Reserve(v23, v24 + 1);
    result = google::protobuf::RepeatedField<unsigned int>::elements((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    result = google::protobuf::RepeatedField<unsigned int>::elements((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_191D2DA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::SetUInt64(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t **v8;
  uint64_t **v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v8 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v9 = v8;
  v8[2] = a5;
  if (v10)
  {
    *((_BYTE *)v8 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v12 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v9 + 9) = 0;
  }
  else
  {
    if (*((_BYTE *)v8 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = *((unsigned __int8 *)v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v14] != 4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
  }
  *((_BYTE *)v9 + 10) &= 0xF0u;
  *v9 = a4;
}

void sub_191D2DC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddUInt64(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, int a4, uint64_t a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *AlignedAndAddCleanup;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v15 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v16, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<unsigned long long>>);
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = v16;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = 0;
    }
    *v12 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v18 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v19] != 4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v21 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v22 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    google::protobuf::RepeatedField<unsigned long long>::Reserve(v23, v24 + 1);
    result = google::protobuf::RepeatedField<unsigned long long>::elements((uint64_t)v23);
    *(_QWORD *)(result + 8 * v24) = a5;
  }
  else
  {
    result = google::protobuf::RepeatedField<unsigned long long>::elements((uint64_t)v23);
    *(_QWORD *)(result + 8 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_191D2DF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::SetFloat(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, uint64_t *a4, float a5)
{
  uint64_t **v8;
  uint64_t **v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v8 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v9 = v8;
  v8[2] = a4;
  if (v10)
  {
    *((_BYTE *)v8 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 6)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v12 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v9 + 9) = 0;
  }
  else
  {
    if (*((_BYTE *)v8 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = *((unsigned __int8 *)v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v14] != 6)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
  }
  *((_BYTE *)v9 + 10) &= 0xF0u;
  *(float *)v9 = a5;
}

void sub_191D2E16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddFloat(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, int a4, uint64_t *a5, float a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *AlignedAndAddCleanup;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v12 = v11;
  v11[2] = a5;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 6)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v15 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v16, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<float>>);
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = v16;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = 0;
    }
    *v12 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v18 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v19] != 6)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v21 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v22 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    google::protobuf::RepeatedField<float>::Reserve(v23, v24 + 1);
    result = google::protobuf::RepeatedField<float>::elements((uint64_t)v23);
    *(float *)(result + 4 * v24) = a6;
  }
  else
  {
    result = google::protobuf::RepeatedField<float>::elements((uint64_t)v23);
    *(float *)(result + 4 * v24) = a6;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_191D2E48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::SetDouble(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, uint64_t *a4, double a5)
{
  uint64_t **v8;
  uint64_t **v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v8 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v9 = v8;
  v8[2] = a4;
  if (v10)
  {
    *((_BYTE *)v8 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v12 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v9 + 9) = 0;
  }
  else
  {
    if (*((_BYTE *)v8 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = *((unsigned __int8 *)v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v14] != 5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
  }
  *((_BYTE *)v9 + 10) &= 0xF0u;
  *(double *)v9 = a5;
}

void sub_191D2E6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddDouble(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, int a4, uint64_t *a5, double a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *AlignedAndAddCleanup;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v12 = v11;
  v11[2] = a5;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v15 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v16, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<double>>);
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = v16;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = 0;
    }
    *v12 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v18 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v19] != 5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v21 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v22 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    google::protobuf::RepeatedField<double>::Reserve(v23, v24 + 1);
    result = google::protobuf::RepeatedField<double>::elements((uint64_t)v23);
    *(double *)(result + 8 * v24) = a6;
  }
  else
  {
    result = google::protobuf::RepeatedField<double>::elements((uint64_t)v23);
    *(double *)(result + 8 * v24) = a6;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_191D2E9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::SetBool(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, char a4, uint64_t *a5)
{
  uint64_t **v8;
  _BYTE *v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v8 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v9 = v8;
  v8[2] = a5;
  if (v10)
  {
    *((_BYTE *)v8 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 7)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v12 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v9[9] = 0;
  }
  else
  {
    if (*((_BYTE *)v8 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = v9[8];
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v14] != 7)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
  }
  v9[10] &= 0xF0u;
  *v9 = a4;
}

void sub_191D2EBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddBool(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, int a4, char a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *AlignedAndAddCleanup;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 7)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v15 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v16, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<BOOL>>);
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = v16;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = 0;
    }
    *v12 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v18 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v19] != 7)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v21 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v22 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    google::protobuf::RepeatedField<BOOL>::Reserve(v23, v24 + 1);
    result = google::protobuf::RepeatedField<BOOL>::elements((uint64_t)v23);
    *(_BYTE *)(result + v24) = a5;
  }
  else
  {
    result = google::protobuf::RepeatedField<BOOL>::elements((uint64_t)v23);
    *(_BYTE *)(result + v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_191D2EF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, char a4, uint64_t *a5)
{
  uint64_t **v9;
  uint64_t **v10;
  char v11;
  uint64_t v12;
  void (*v13)(void *);
  uint64_t *AlignedAndAddCleanup;
  uint64_t v15;
  void (*v16)(void *);

  v9 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v10 = v9;
  v9[2] = a5;
  if (v11)
  {
    *((_BYTE *)v9 + 9) = 1;
    *((_BYTE *)v9 + 8) = a3;
    *((_BYTE *)v9 + 11) = a4;
    switch(a3)
    {
      case 1:
        v12 = *(_QWORD *)a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
        v13 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<double>>;
        goto LABEL_31;
      case 2:
        v12 = *(_QWORD *)a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
        v13 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<float>>;
        goto LABEL_31;
      case 3:
      case 16:
      case 18:
        v12 = *(_QWORD *)a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
        v13 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<long long>>;
        goto LABEL_31;
      case 4:
      case 6:
        v12 = *(_QWORD *)a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
        v13 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<unsigned long long>>;
        goto LABEL_31;
      case 5:
      case 14:
      case 15:
      case 17:
        v12 = *(_QWORD *)a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
        v13 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<int>>;
        goto LABEL_31;
      case 7:
      case 13:
        v12 = *(_QWORD *)a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
        v13 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<unsigned int>>;
        goto LABEL_31;
      case 8:
        v12 = *(_QWORD *)a1;
        if (v12)
        {
          if ((*(_BYTE *)(v12 + 24) & 1) != 0)
          v13 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<BOOL>>;
LABEL_31:
          AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v12, (google::protobuf::internal::SerialArena::Block *)0x10, v13);
          *AlignedAndAddCleanup = 0;
          AlignedAndAddCleanup[1] = v12;
        }
        else
        {
LABEL_32:
          AlignedAndAddCleanup = (uint64_t *)operator new();
          *AlignedAndAddCleanup = 0;
          AlignedAndAddCleanup[1] = 0;
        }
        goto LABEL_44;
      case 9:
      case 12:
        v15 = *(_QWORD *)a1;
        if (!v15)
          goto LABEL_42;
        if ((*(_BYTE *)(v15 + 24) & 1) != 0)
        v16 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedPtrField<std::string>>;
        goto LABEL_41;
      case 10:
      case 11:
        v15 = *(_QWORD *)a1;
        if (v15)
        {
          if ((*(_BYTE *)(v15 + 24) & 1) != 0)
          v16 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>>;
LABEL_41:
          AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v15, (google::protobuf::internal::SerialArena::Block *)0x18, v16);
          AlignedAndAddCleanup[2] = 0;
          *AlignedAndAddCleanup = v15;
        }
        else
        {
LABEL_42:
          AlignedAndAddCleanup = (uint64_t *)operator new();
          AlignedAndAddCleanup[2] = 0;
          *AlignedAndAddCleanup = 0;
        }
        AlignedAndAddCleanup[1] = 0;
LABEL_44:
        *v10 = AlignedAndAddCleanup;
        break;
      default:
        return *v10;
    }
  }
  return *v10;
}

void google::protobuf::internal::ExtensionSet::SetEnum(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, int a4, uint64_t *a5)
{
  uint64_t **v8;
  uint64_t **v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v8 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v9 = v8;
  v8[2] = a5;
  if (v10)
  {
    *((_BYTE *)v8 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 8)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 460);
      v12 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v9 + 9) = 0;
  }
  else
  {
    if (*((_BYTE *)v8 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 463);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = *((unsigned __int8 *)v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v14] != 8)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 463);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
  }
  *((_BYTE *)v9 + 10) &= 0xF0u;
  *(_DWORD *)v9 = a4;
}

void sub_191D2F45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddEnum(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, int a4, int a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *AlignedAndAddCleanup;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 8)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 488);
      v15 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v16, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<int>>);
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = v16;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = 0;
    }
    *v12 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 494);
      v18 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v19] != 8)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 494);
      v21 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 495);
      v22 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    google::protobuf::RepeatedField<int>::Reserve(v23, v24 + 1);
    result = google::protobuf::RepeatedField<int>::elements((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    result = google::protobuf::RepeatedField<int>::elements((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_191D2F774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::MutableString(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, uint64_t *a4)
{
  uint64_t **v7;
  unsigned __int8 *v8;
  char v9;
  std::string *v10;
  std::string *v11;
  uint64_t v12;
  _QWORD *AlignedAndAddCleanup;
  std::string *v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  char v19;
  std::string v20[2];

  v7 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v8 = (unsigned __int8 *)v7;
  v7[2] = a4;
  if (v9)
  {
    *((_BYTE *)v7 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v10 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v10->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 9)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 520);
      v11 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_STRING): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    }
    v8[9] = 0;
    v12 = *(_QWORD *)a1;
    if (v12)
    {
      if ((*(_BYTE *)(v12 + 24) & 1) != 0)
      AlignedAndAddCleanup = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v12, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
    }
    else
    {
      AlignedAndAddCleanup = (_QWORD *)operator new();
    }
    *AlignedAndAddCleanup = 0;
    AlignedAndAddCleanup[1] = 0;
    AlignedAndAddCleanup[2] = 0;
    *(_QWORD *)v8 = AlignedAndAddCleanup;
  }
  else
  {
    if (*((_BYTE *)v7 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 524);
      v14 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    }
    v15 = v8[8];
    if ((v15 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v16 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v15] != 9)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 524);
      v17 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_STRING): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v17->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    }
  }
  v8[10] &= 0xF0u;
  return *(_QWORD *)v8;
}

void sub_191D2FA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::internal::ExtensionSet::AddString(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, uint64_t *a4)
{
  uint64_t **v7;
  uint64_t **v8;
  char v9;
  std::string *v10;
  std::string *v11;
  uint64_t v12;
  uint64_t *AlignedAndAddCleanup;
  std::string *v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  uint64_t *v18;
  int *v19;
  uint64_t v20;
  int v21;
  _QWORD *result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  std::string v27[2];

  v7 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v8 = v7;
  v7[2] = a4;
  if (v9)
  {
    *((_BYTE *)v7 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v10 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v10->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 9)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 550);
      v11 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_STRING): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v8 + 9) = 1;
    *((_BYTE *)v8 + 11) = 0;
    v12 = *(_QWORD *)a1;
    if (v12)
    {
      if ((*(_BYTE *)(v12 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v12, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedPtrField<std::string>>);
      AlignedAndAddCleanup[2] = 0;
      *AlignedAndAddCleanup = v12;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      AlignedAndAddCleanup[2] = 0;
      *AlignedAndAddCleanup = 0;
    }
    AlignedAndAddCleanup[1] = 0;
    *v8 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v7 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 556);
      v14 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
    }
    v15 = *((unsigned __int8 *)v8 + 8);
    if ((v15 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v16 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v15] != 9)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 556);
      v17 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_STRING): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v17->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
    }
  }
  v18 = *v8;
  v19 = (int *)v18[2];
  if (!v19)
  {
    v21 = *((_DWORD *)v18 + 3);
LABEL_23:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v18, v21 + 1);
    v19 = (int *)v18[2];
    v21 = *v19;
    goto LABEL_24;
  }
  v20 = *((int *)v18 + 2);
  v21 = *v19;
  if ((int)v20 < *v19)
  {
    *((_DWORD *)v18 + 2) = v20 + 1;
    return *(_QWORD **)&v19[2 * v20 + 2];
  }
  if (v21 == *((_DWORD *)v18 + 3))
    goto LABEL_23;
LABEL_24:
  *v19 = v21 + 1;
  v23 = *v18;
  if (*v18)
  {
    if ((*(_BYTE *)(v23 + 24) & 1) != 0)
    result = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v23, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  }
  else
  {
    result = (_QWORD *)operator new();
  }
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  v24 = v18[2];
  v25 = *((int *)v18 + 2);
  *((_DWORD *)v18 + 2) = v25 + 1;
  *(_QWORD *)(v24 + 8 * v25 + 8) = result;
  return result;
}

void sub_191D2FD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::MutableMessage(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t **v9;
  uint64_t **v10;
  char v11;
  std::string *v12;
  std::string *v13;
  uint64_t result;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  char v19;
  char v20;
  std::string v21[2];

  v9 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v10 = v9;
  v9[2] = a5;
  if (v11)
  {
    *((_BYTE *)v9 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v12 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 591);
      v13 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v10 + 9) = 0;
    *((_BYTE *)v10 + 10) &= 0xFu;
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, *(_QWORD *)a1);
    *v10 = (uint64_t *)result;
    *((_BYTE *)v10 + 10) &= 0xF0u;
  }
  else
  {
    if (*((_BYTE *)v9 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 598);
      v15 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
    }
    v16 = *((unsigned __int8 *)v10 + 8);
    if ((v16 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v17 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v17->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v16] != 10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 598);
      v18 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
    }
    v19 = *((_BYTE *)v10 + 10);
    *((_BYTE *)v10 + 10) = v19 & 0xF0;
    result = (uint64_t)*v10;
    if ((v19 & 0x10) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a4);
  }
  return result;
}

void sub_191D2FFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddMessage(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t **v9;
  unsigned __int8 *v10;
  char v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  _QWORD *AlignedAndAddCleanup;
  std::string *v16;
  uint64_t v17;
  std::string *v18;
  std::string *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  std::string v26[2];

  v9 = google::protobuf::internal::ExtensionSet::Insert(a1, a2);
  v10 = (unsigned __int8 *)v9;
  v9[2] = a5;
  if (v11)
  {
    *((_BYTE *)v9 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v12 = google::protobuf::internal::LogMessage::operator<<(v26, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v25, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v26[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 762);
      v13 = google::protobuf::internal::LogMessage::operator<<(v26, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v25, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v26[0].__r_.__value_.__l.__data_);
    }
    v10[9] = 1;
    v14 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      if ((*(_BYTE *)(v14 + 24) & 1) != 0)
      AlignedAndAddCleanup = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v14, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>>);
      AlignedAndAddCleanup[2] = 0;
      *AlignedAndAddCleanup = v14;
    }
    else
    {
      AlignedAndAddCleanup = (_QWORD *)operator new();
      AlignedAndAddCleanup[2] = 0;
      *AlignedAndAddCleanup = 0;
    }
    AlignedAndAddCleanup[1] = 0;
    *(_QWORD *)v10 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v9 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 767);
      v16 = google::protobuf::internal::LogMessage::operator<<(v26, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v25, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v26[0].__r_.__value_.__l.__data_);
    }
    v17 = v10[8];
    if ((v17 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v18 = google::protobuf::internal::LogMessage::operator<<(v26, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v25, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v26[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v17] != 10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 767);
      v19 = google::protobuf::internal::LogMessage::operator<<(v26, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v25, (const char **)&v19->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v26[0].__r_.__value_.__l.__data_);
    }
  }
  v20 = *(_QWORD *)v10;
  v21 = *(_DWORD **)(*(_QWORD *)v10 + 16);
  if (!v21
    || (v22 = *(int *)(v20 + 8), (int)v22 >= *v21)
    || (*(_DWORD *)(v20 + 8) = v22 + 1, (v23 = *(_QWORD *)&v21[2 * v22 + 2]) == 0))
  {
    v23 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, *(_QWORD *)a1);
    google::protobuf::internal::RepeatedPtrFieldBase::AddAllocatedInternal<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(*(unsigned int **)v10, v23);
  }
  return v23;
}

void sub_191D302B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::Clear(google::protobuf::internal::ExtensionSet *this)
{
  _QWORD *v1;
  uint64_t v2;
  google::protobuf::internal::ExtensionSet::Extension *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v1 = (_QWORD *)*((_QWORD *)this + 2);
  if (*((unsigned __int16 *)this + 4) >= 0x101u)
  {
    v6 = (_QWORD *)*v1;
    v4 = v1 + 1;
    v5 = v6;
    if (v6 != v4)
    {
      do
      {
        google::protobuf::internal::ExtensionSet::Extension::Clear((google::protobuf::internal::ExtensionSet::Extension *)(v5 + 5));
        v7 = (_QWORD *)v5[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v5[2];
            v9 = *v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
      }
      while (v8 != v4);
    }
  }
  else if (*((_WORD *)this + 5))
  {
    v2 = 32 * *((unsigned __int16 *)this + 5);
    v3 = (google::protobuf::internal::ExtensionSet::Extension *)(v1 + 1);
    do
    {
      google::protobuf::internal::ExtensionSet::Extension::Clear(v3);
      v3 = (google::protobuf::internal::ExtensionSet::Extension *)((char *)v3 + 32);
      v2 -= 32;
    }
    while (v2);
  }
}

void google::protobuf::internal::ExtensionSet::MergeFrom(google::protobuf::internal::ExtensionSet *this, const google::protobuf::internal::ExtensionSet *a2)
{
  unsigned int v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char *v13;
  unint64_t v14;
  int *v15;
  int *v16;
  const google::protobuf::internal::ExtensionSet::Extension *v17;
  int v18;

  if (*((unsigned __int16 *)this + 4) <= 0x100u)
  {
    v4 = *((unsigned __int16 *)a2 + 4);
    v5 = (char *)*((_QWORD *)this + 2);
    v6 = *((unsigned __int16 *)this + 5);
    v7 = &v5[32 * v6];
    v8 = *((_QWORD *)a2 + 2);
    if (v4 > 0x100)
    {
    }
    else
    {
      v9 = *((unsigned __int16 *)a2 + 5);
      v10 = v8 + 32 * v9;
      v12 = (_DWORD)v6 == 0;
      v11 = 0;
      v12 = v12 || (_DWORD)v9 == 0;
      if (!v12)
      {
        do
        {
          if (*(_DWORD *)v5 == *(_DWORD *)v8)
            v13 = v5 + 32;
          else
            v13 = v5;
          if (*(_DWORD *)v5 < *(_DWORD *)v8)
          {
            v5 += 32;
          }
          else
          {
            v8 += 32;
            v5 = v13;
          }
          ++v11;
        }
        while (v5 != v7 && v8 != v10);
      }
      v14 = v11 + ((v10 - v8) >> 5) + ((v7 - v5) >> 5);
    }
    google::protobuf::internal::ExtensionSet::GrowCapacity(this, v14);
  }
  v15 = (int *)*((_QWORD *)a2 + 2);
  if (*((unsigned __int16 *)a2 + 4) >= 0x101u)
  {
    google::protobuf::internal::ExtensionSet::ForEach<std::__map_iterator<std::__tree_iterator<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::__tree_node<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,void *> *,long>>,google::protobuf::internal::ExtensionSet::MergeFrom(google::protobuf::internal::ExtensionSet const&)::$_0>(*(_QWORD **)v15, (_QWORD *)v15 + 1, this);
  }
  else if (*((_WORD *)a2 + 5))
  {
    v16 = &v15[8 * *((unsigned __int16 *)a2 + 5)];
    do
    {
      v17 = (const google::protobuf::internal::ExtensionSet::Extension *)(v15 + 2);
      v18 = *v15;
      v15 += 8;
      google::protobuf::internal::ExtensionSet::InternalExtensionMergeFrom(this, v18, v17);
    }
    while (v15 != v16);
  }
}

_QWORD *google::protobuf::internal::ExtensionSet::GrowCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  __int128 v13;
  BOOL v14;
  int v15;
  __int128 v16;
  uint64_t v17;

  v2 = *((unsigned __int16 *)this + 4);
  if (v2 <= 0x100 && v2 < a2)
  {
    v4 = this;
    do
    {
      if ((_WORD)v2)
        LOWORD(v2) = 4 * v2;
      else
        LOWORD(v2) = 1;
    }
    while ((unsigned __int16)v2 < a2);
    v5 = (char *)this[2];
    v6 = *((unsigned __int16 *)this + 5);
    v7 = *this;
    if ((unsigned __int16)v2 < 0x101u)
    {
      v8 = 32 * (unsigned __int16)v2;
      if (v7)
      {
        if ((*(_BYTE *)(v7 + 24) & 1) != 0)
        {
          v8 = 32 * (unsigned __int16)v2;
        }
        this = (_QWORD *)google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)v7, v8);
      }
      else
      {
        this = operator new[](v8);
      }
      v9 = (uint64_t **)this;
      if ((_DWORD)v6)
        this = memmove(this, v5, 32 * v6);
    }
    else
    {
      if (v7)
      {
        if ((*(_BYTE *)(v7 + 24) & 1) != 0)
        this = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v7, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::map<int,google::protobuf::internal::ExtensionSet::Extension>>);
      }
      else
      {
        this = (_QWORD *)operator new();
      }
      v9 = (uint64_t **)this;
      this[1] = 0;
      v10 = this + 1;
      this[2] = 0;
      *this = this + 1;
      if ((_DWORD)v6)
      {
        v11 = &v5[32 * v6];
        v12 = v5;
        do
        {
          v15 = *(_DWORD *)v12;
          v13 = *(_OWORD *)(v12 + 8);
          v17 = *((_QWORD *)v12 + 3);
          v16 = v13;
          this = std::__tree<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::__map_value_compare<int,std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::less<int>,true>,std::allocator<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>>>::__emplace_hint_unique_key_args<int,std::pair<int const,google::protobuf::internal::ExtensionSet::Extension>>(v9, v10, &v15, &v15);
          v10 = this;
          v12 += 32;
        }
        while (v12 != v11);
      }
    }
    if (*v4)
      v14 = 1;
    else
      v14 = v5 == 0;
    if (!v14)
      this = (_QWORD *)MEMORY[0x19401E970](v5, 0x1062C802AB6010CLL);
    *((_WORD *)v4 + 4) = v2;
    v4[2] = v9;
    if ((unsigned __int16)v2 >= 0x101u)
      *((_WORD *)v4 + 5) = 0;
  }
  return this;
}

uint64_t google::protobuf::internal::`anonymous namespace'::SizeOfUnion<google::protobuf::internal::ExtensionSet::KeyValue *,std::__map_iterator<std::__tree_iterator<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::__tree_node<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,void *> *,long>>>(char *a1, char *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  v4 = 0;
  if (a1 != a2 && a3 != a4)
  {
    v4 = 0;
    do
    {
      v5 = *((_DWORD *)a3 + 8);
      if (*(_DWORD *)a1 >= v5)
      {
        if (*(_DWORD *)a1 == v5)
        {
          a1 += 32;
          v6 = (_QWORD *)a3[1];
          if (v6)
          {
            do
            {
              a3 = v6;
              v6 = (_QWORD *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              v7 = a3;
              a3 = (_QWORD *)a3[2];
            }
            while ((_QWORD *)*a3 != v7);
          }
        }
        else
        {
          v8 = (_QWORD *)a3[1];
          if (v8)
          {
            do
            {
              a3 = v8;
              v8 = (_QWORD *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              v9 = a3;
              a3 = (_QWORD *)a3[2];
            }
            while ((_QWORD *)*a3 != v9);
          }
        }
      }
      else
      {
        a1 += 32;
      }
      ++v4;
    }
    while (a1 != a2 && a3 != a4);
  }
  if (a3 == a4)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v11 = (_QWORD *)a3[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)a3[2];
          v13 = *v12 == (_QWORD)a3;
          a3 = v12;
        }
        while (!v13);
      }
      ++v10;
      a3 = v12;
    }
    while (v12 != a4);
  }
  return v4 + ((a2 - a1) >> 5) + v10;
}

void google::protobuf::internal::ExtensionSet::InternalExtensionMergeFrom(google::protobuf::internal::ExtensionSet *this, int a2, const google::protobuf::internal::ExtensionSet::Extension *a3)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int **v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t AlignedAndAddCleanup;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int *v35;
  int v36;
  __int128 *v37;
  __int128 v38;
  uint64_t *v39;
  uint64_t **v40;
  uint64_t **v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  std::string *v53;
  std::string *v54;
  std::string *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::string __p;
  char v62;
  std::string v63[2];

  if (*((_BYTE *)a3 + 9))
  {
    v6 = (uint64_t *)*((_QWORD *)a3 + 2);
    v7 = google::protobuf::internal::ExtensionSet::Insert(this, a2);
    v8 = (unsigned int **)v7;
    v7[2] = v6;
    v10 = v9;
    if (v9)
    {
      *((_BYTE *)v7 + 8) = *((_BYTE *)a3 + 8);
      *((_BYTE *)v7 + 11) = *((_BYTE *)a3 + 11);
      *((_BYTE *)v7 + 9) = 1;
    }
    else
    {
      if (*((unsigned __int8 *)v7 + 8) != *((unsigned __int8 *)a3 + 8))
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 931);
        v13 = google::protobuf::internal::LogMessage::operator<<(v63, "CHECK failed: (extension->type) == (other_extension.type): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v62, (const char **)&v13->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v63[0].__r_.__value_.__l.__data_);
      }
      if (*((unsigned __int8 *)v8 + 11) != *((unsigned __int8 *)a3 + 11))
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 932);
        v14 = google::protobuf::internal::LogMessage::operator<<(v63, "CHECK failed: (extension->is_packed) == (other_extension.is_packed): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v62, (const char **)&v14->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v63[0].__r_.__value_.__l.__data_);
      }
      if (!*((_BYTE *)v8 + 9))
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 933);
        v15 = google::protobuf::internal::LogMessage::operator<<(v63, "CHECK failed: extension->is_repeated: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v62, (const char **)&v15->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v63[0].__r_.__value_.__l.__data_);
      }
    }
    v16 = *((unsigned __int8 *)a3 + 8);
    if ((v16 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v17 = google::protobuf::internal::LogMessage::operator<<(v63, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v62, (const char **)&v17->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v63[0].__r_.__value_.__l.__data_);
    }
    switch(v16)
    {
      case 1:
        if (v10)
        {
          v26 = *(_QWORD *)this;
          if (v26)
          {
            if ((*(_BYTE *)(v26 + 24) & 1) != 0)
            AlignedAndAddCleanup = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v26, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<double>>);
            *(_QWORD *)AlignedAndAddCleanup = 0;
            *(_QWORD *)(AlignedAndAddCleanup + 8) = v26;
          }
          else
          {
            AlignedAndAddCleanup = operator new();
            *(_QWORD *)AlignedAndAddCleanup = 0;
            *(_QWORD *)(AlignedAndAddCleanup + 8) = 0;
          }
          *v8 = (unsigned int *)AlignedAndAddCleanup;
        }
        else
        {
          AlignedAndAddCleanup = (uint64_t)*v8;
        }
        google::protobuf::RepeatedField<double>::MergeFrom((int *)AlignedAndAddCleanup, *(int **)a3);
        break;
      case 2:
        if (v10)
        {
          v28 = *(_QWORD *)this;
          if (v28)
          {
            if ((*(_BYTE *)(v28 + 24) & 1) != 0)
            v29 = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v28, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<float>>);
            *(_QWORD *)v29 = 0;
            *(_QWORD *)(v29 + 8) = v28;
          }
          else
          {
            v29 = operator new();
            *(_QWORD *)v29 = 0;
            *(_QWORD *)(v29 + 8) = 0;
          }
          *v8 = (unsigned int *)v29;
        }
        else
        {
          v29 = (uint64_t)*v8;
        }
        google::protobuf::RepeatedField<float>::MergeFrom((int *)v29, *(int **)a3);
        break;
      case 3:
      case 16:
      case 18:
        if (v10)
        {
          v20 = *(_QWORD *)this;
          if (v20)
          {
            if ((*(_BYTE *)(v20 + 24) & 1) != 0)
            v21 = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v20, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<long long>>);
            *(_QWORD *)v21 = 0;
            *(_QWORD *)(v21 + 8) = v20;
          }
          else
          {
            v21 = operator new();
            *(_QWORD *)v21 = 0;
            *(_QWORD *)(v21 + 8) = 0;
          }
          *v8 = (unsigned int *)v21;
        }
        else
        {
          v21 = (uint64_t)*v8;
        }
        google::protobuf::RepeatedField<long long>::MergeFrom((int *)v21, *(int **)a3);
        break;
      case 4:
      case 6:
        if (v10)
        {
          v24 = *(_QWORD *)this;
          if (v24)
          {
            if ((*(_BYTE *)(v24 + 24) & 1) != 0)
            v25 = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v24, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<unsigned long long>>);
            *(_QWORD *)v25 = 0;
            *(_QWORD *)(v25 + 8) = v24;
          }
          else
          {
            v25 = operator new();
            *(_QWORD *)v25 = 0;
            *(_QWORD *)(v25 + 8) = 0;
          }
          *v8 = (unsigned int *)v25;
        }
        else
        {
          v25 = (uint64_t)*v8;
        }
        google::protobuf::RepeatedField<unsigned long long>::MergeFrom((int *)v25, *(int **)a3);
        break;
      case 5:
      case 14:
      case 15:
      case 17:
        if (v10)
        {
          v18 = *(_QWORD *)this;
          if (v18)
          {
            if ((*(_BYTE *)(v18 + 24) & 1) != 0)
            v19 = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v18, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<int>>);
            *(_QWORD *)v19 = 0;
            *(_QWORD *)(v19 + 8) = v18;
          }
          else
          {
            v19 = operator new();
            *(_QWORD *)v19 = 0;
            *(_QWORD *)(v19 + 8) = 0;
          }
          *v8 = (unsigned int *)v19;
        }
        else
        {
          v19 = (uint64_t)*v8;
        }
        google::protobuf::RepeatedField<int>::MergeFrom((int *)v19, *(int **)a3);
        break;
      case 7:
      case 13:
        if (v10)
        {
          v22 = *(_QWORD *)this;
          if (v22)
          {
            if ((*(_BYTE *)(v22 + 24) & 1) != 0)
            v23 = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v22, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<unsigned int>>);
            *(_QWORD *)v23 = 0;
            *(_QWORD *)(v23 + 8) = v22;
          }
          else
          {
            v23 = operator new();
            *(_QWORD *)v23 = 0;
            *(_QWORD *)(v23 + 8) = 0;
          }
          *v8 = (unsigned int *)v23;
        }
        else
        {
          v23 = (uint64_t)*v8;
        }
        google::protobuf::RepeatedField<unsigned int>::MergeFrom((int *)v23, *(int **)a3);
        break;
      case 8:
        if (v10)
        {
          v30 = *(_QWORD *)this;
          if (v30)
          {
            if ((*(_BYTE *)(v30 + 24) & 1) != 0)
            v31 = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v30, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<BOOL>>);
            *(_QWORD *)v31 = 0;
            *(_QWORD *)(v31 + 8) = v30;
          }
          else
          {
            v31 = operator new();
            *(_QWORD *)v31 = 0;
            *(_QWORD *)(v31 + 8) = 0;
          }
          *v8 = (unsigned int *)v31;
        }
        else
        {
          v31 = (uint64_t)*v8;
        }
        google::protobuf::RepeatedField<BOOL>::MergeFrom((int *)v31, *(int **)a3);
        break;
      case 9:
      case 12:
        if (v10)
        {
          v32 = *(_QWORD *)this;
          if (v32)
          {
            if ((*(_BYTE *)(v32 + 24) & 1) != 0)
            v33 = (unsigned int *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v32, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedPtrField<std::string>>);
            *((_QWORD *)v33 + 2) = 0;
            *(_QWORD *)v33 = v32;
          }
          else
          {
            v33 = (unsigned int *)operator new();
            *((_QWORD *)v33 + 2) = 0;
            *(_QWORD *)v33 = 0;
          }
          *((_QWORD *)v33 + 1) = 0;
          *v8 = v33;
        }
        else
        {
          v33 = *v8;
        }
        google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)v33, *(_QWORD *)a3);
        break;
      case 10:
      case 11:
        if (v10)
        {
          v34 = *(_QWORD *)this;
          if (*(_QWORD *)this)
          {
            if ((*(_BYTE *)(v34 + 24) & 1) != 0)
            v35 = (unsigned int *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v34, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>>);
            *((_QWORD *)v35 + 2) = 0;
            *(_QWORD *)v35 = v34;
          }
          else
          {
            v35 = (unsigned int *)operator new();
            *((_QWORD *)v35 + 2) = 0;
            *(_QWORD *)v35 = 0;
          }
          *((_QWORD *)v35 + 1) = 0;
          *v8 = v35;
        }
        v45 = *(_QWORD *)a3;
        if (*(int *)(v45 + 8) >= 1)
        {
          v46 = 0;
          do
          {
            v47 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(v45, v46);
            v48 = v47;
            v49 = *v8;
            v50 = (_DWORD *)*((_QWORD *)*v8 + 2);
            if (!v50
              || (v51 = (int)v49[2], (int)v51 >= *v50)
              || (v49[2] = v51 + 1, (v52 = *(_QWORD *)&v50[2 * v51 + 2]) == 0))
            {
              v52 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 32))(v47, *(_QWORD *)this);
              google::protobuf::internal::RepeatedPtrFieldBase::AddAllocatedInternal<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(*v8, v52);
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 64))(v52, v48);
            ++v46;
          }
          while (v46 < *(_DWORD *)(v45 + 8));
        }
        break;
      default:
        return;
    }
    return;
  }
  if ((*((_BYTE *)a3 + 10) & 1) != 0)
    return;
  v11 = *((unsigned __int8 *)a3 + 8);
  if ((v11 - 19) <= 0xFFFFFFED)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    v12 = google::protobuf::internal::LogMessage::operator<<(v63, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v62, (const char **)&v12->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v63[0].__r_.__value_.__l.__data_);
  }
  switch(v11)
  {
    case 1:
      google::protobuf::internal::ExtensionSet::SetDouble(this, a2, *((unsigned __int8 *)a3 + 8), *((uint64_t **)a3 + 2), *(double *)a3);
      return;
    case 2:
      google::protobuf::internal::ExtensionSet::SetFloat(this, a2, *((unsigned __int8 *)a3 + 8), *((uint64_t **)a3 + 2), *(float *)a3);
      return;
    case 3:
    case 16:
    case 18:
      google::protobuf::internal::ExtensionSet::SetInt64(this, a2, *((unsigned __int8 *)a3 + 8), *(uint64_t **)a3, *((uint64_t **)a3 + 2));
      return;
    case 4:
    case 6:
      google::protobuf::internal::ExtensionSet::SetUInt64(this, a2, *((unsigned __int8 *)a3 + 8), *(uint64_t **)a3, *((uint64_t **)a3 + 2));
      return;
    case 5:
    case 15:
    case 17:
      google::protobuf::internal::ExtensionSet::SetInt32(this, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, *((uint64_t **)a3 + 2));
      return;
    case 7:
    case 13:
      google::protobuf::internal::ExtensionSet::SetUInt32(this, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, *((uint64_t **)a3 + 2));
      return;
    case 8:
      google::protobuf::internal::ExtensionSet::SetBool(this, a2, *((unsigned __int8 *)a3 + 8), *(_BYTE *)a3, *((uint64_t **)a3 + 2));
      return;
    case 9:
    case 12:
      v36 = *((unsigned __int8 *)a3 + 8);
      v37 = *(__int128 **)a3;
      if (*(char *)(*(_QWORD *)a3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v37, *((_QWORD *)v37 + 1));
      }
      else
      {
        v38 = *v37;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v37 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v38;
      }
      google::protobuf::internal::ExtensionSet::SetString(this, a2, v36, (__n128 *)&__p, *((uint64_t **)a3 + 2));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return;
    case 10:
    case 11:
      v39 = (uint64_t *)*((_QWORD *)a3 + 2);
      v40 = google::protobuf::internal::ExtensionSet::Insert(this, a2);
      v41 = v40;
      v40[2] = v39;
      if (v42)
      {
        *((_BYTE *)v40 + 8) = *((_BYTE *)a3 + 8);
        *((_BYTE *)v40 + 11) = *((_BYTE *)a3 + 11);
        *((_BYTE *)v40 + 9) = 0;
        v43 = *((_BYTE *)v40 + 10) & 0xF;
        if ((*((_BYTE *)a3 + 10) & 0x10) != 0)
        {
          *((_BYTE *)v40 + 10) = v43 | 0x10;
          v59 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a3 + 16))(*(_QWORD *)a3, *(_QWORD *)this);
          *v41 = (uint64_t *)v59;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 104))(v59, *(_QWORD *)a3);
          goto LABEL_135;
        }
        *((_BYTE *)v40 + 10) = v43;
        v44 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a3 + 32))(*(_QWORD *)a3, *(_QWORD *)this);
        *v41 = (uint64_t *)v44;
        goto LABEL_133;
      }
      if (*((unsigned __int8 *)v40 + 8) != *((unsigned __int8 *)a3 + 8))
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1026);
        v53 = google::protobuf::internal::LogMessage::operator<<(v63, "CHECK failed: (extension->type) == (other_extension.type): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v62, (const char **)&v53->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v63[0].__r_.__value_.__l.__data_);
      }
      if (*((unsigned __int8 *)v41 + 11) != *((unsigned __int8 *)a3 + 11))
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1027);
        v54 = google::protobuf::internal::LogMessage::operator<<(v63, "CHECK failed: (extension->is_packed) == (other_extension.is_packed): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v62, (const char **)&v54->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v63[0].__r_.__value_.__l.__data_);
      }
      if (*((_BYTE *)v41 + 9))
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1028);
        v55 = google::protobuf::internal::LogMessage::operator<<(v63, "CHECK failed: !extension->is_repeated: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v62, (const char **)&v55->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v63[0].__r_.__value_.__l.__data_);
      }
      v56 = *v41;
      v57 = *(_QWORD *)a3;
      if ((*((_BYTE *)a3 + 10) & 0x10) == 0)
      {
        v58 = *v56;
        if ((*((_BYTE *)v41 + 10) & 0x10) == 0)
        {
          (*(void (**)(uint64_t *, uint64_t))(v58 + 64))(v56, v57);
          goto LABEL_135;
        }
        v44 = (*(uint64_t (**)(uint64_t *, uint64_t))(v58 + 32))(*v41, v57);
LABEL_133:
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 64))(v44, *(_QWORD *)a3);
        goto LABEL_135;
      }
      if ((*((_BYTE *)v41 + 10) & 0x10) != 0)
      {
        (*(void (**)(uint64_t *, uint64_t))(*v56 + 104))(v56, v57);
      }
      else
      {
        v60 = (*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)v57 + 24))(*(_QWORD *)a3, *v41);
        (*(void (**)(uint64_t *, uint64_t))(*v56 + 64))(v56, v60);
      }
LABEL_135:
      *((_BYTE *)v41 + 10) &= 0xF0u;
      return;
    case 14:
      google::protobuf::internal::ExtensionSet::SetEnum(this, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, *((uint64_t **)a3 + 2));
      return;
    default:
      return;
  }
}

void sub_191D31294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16)
{
  google::protobuf::internal::LogMessage::~LogMessage(&a16);
  _Unwind_Resume(a1);
}

__n128 google::protobuf::internal::ExtensionSet::SetString(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, __n128 *a4, uint64_t *a5)
{
  uint64_t v6;
  __n128 *v7;
  __n128 result;

  v6 = google::protobuf::internal::ExtensionSet::MutableString(a1, a2, a3, a5);
  v7 = (__n128 *)v6;
  if (*(char *)(v6 + 23) < 0)
    operator delete(*(void **)v6);
  result = *a4;
  v7[1].n128_u64[0] = a4[1].n128_u64[0];
  *v7 = result;
  a4[1].n128_u8[7] = 0;
  a4->n128_u8[0] = 0;
  return result;
}

void google::protobuf::internal::ExtensionSet::Swap(google::protobuf::internal::ExtensionSet *this, google::protobuf::internal::ExtensionSet *a2)
{
  __int16 v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  if (*(_QWORD *)this == *(_QWORD *)a2)
  {
    v4 = *((_WORD *)this + 4);
    *((_WORD *)this + 4) = *((_WORD *)a2 + 4);
    *((_WORD *)a2 + 4) = v4;
    v5 = *((_WORD *)this + 5);
    *((_WORD *)this + 5) = *((_WORD *)a2 + 5);
    *((_WORD *)a2 + 5) = v5;
    v6 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    google::protobuf::internal::ExtensionSet::MergeFrom((google::protobuf::internal::ExtensionSet *)&v7, a2);
    google::protobuf::internal::ExtensionSet::Clear(a2);
    google::protobuf::internal::ExtensionSet::MergeFrom(a2, this);
    google::protobuf::internal::ExtensionSet::Clear(this);
    google::protobuf::internal::ExtensionSet::MergeFrom(this, (const google::protobuf::internal::ExtensionSet *)&v7);
    google::protobuf::internal::ExtensionSet::~ExtensionSet((google::protobuf::internal::ExtensionSet *)&v7);
  }
}

void sub_191D31400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((google::protobuf::internal::ExtensionSet *)va);
  _Unwind_Resume(a1);
}

uint64_t **google::protobuf::internal::ExtensionSet::Insert(google::protobuf::internal::ExtensionSet *this, int a2)
{
  unsigned int v3;
  uint64_t **v4;
  uint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t **v11;
  int v12;
  uint64_t **result;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((unsigned __int16 *)this + 4);
  v4 = (uint64_t **)*((_QWORD *)this + 2);
  if (v3 >= 0x101)
  {
    *((_QWORD *)&v14 + 1) = 0;
    v15 = 0;
    v16 = 0;
    LODWORD(v14) = a2;
    return std::__tree<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::__map_value_compare<int,std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::less<int>,true>,std::allocator<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>>>::__emplace_unique_key_args<int,std::pair<int const,google::protobuf::internal::ExtensionSet::Extension>>(v4, (int *)&v14, &v14)+ 5;
  }
  v6 = *((unsigned __int16 *)this + 5);
  v7 = &v4[4 * v6];
  if (!*((_WORD *)this + 5))
  {
    if (!*((_WORD *)this + 4))
      goto LABEL_18;
    LOWORD(v6) = 0;
LABEL_17:
    *((_WORD *)this + 5) = v6 + 1;
    *(_DWORD *)v7 = a2;
    v7[1] = 0;
    result = v7 + 1;
    v7[2] = 0;
    v7[3] = 0;
    return result;
  }
  v8 = *((unsigned __int16 *)this + 5);
  do
  {
    v9 = v8 >> 1;
    v10 = &v4[4 * (v8 >> 1)];
    v12 = *(_DWORD *)v10;
    v11 = v10 + 4;
    v8 += ~(v8 >> 1);
    if (v12 < a2)
      v4 = v11;
    else
      v8 = v9;
  }
  while (v8);
  if (v4 != v7)
  {
    if (*(_DWORD *)v4 == a2)
      return v4 + 1;
    if (v6 < v3)
    {
      memmove(v4 + 4, v4, (char *)v7 - (char *)v4);
      LOWORD(v6) = *((_WORD *)this + 5);
      v7 = v4;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (v6 < v3)
    goto LABEL_17;
LABEL_18:
  google::protobuf::internal::ExtensionSet::GrowCapacity(this, v6 + 1);
  return (uint64_t **)google::protobuf::internal::ExtensionSet::Insert(this, a2);
}

uint64_t google::protobuf::internal::ExtensionSet::IsInitialized(google::protobuf::internal::ExtensionSet *this)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t IsInitialized;
  google::protobuf::internal::ExtensionSet::Extension *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;

  v1 = (_QWORD *)*((_QWORD *)this + 2);
  if (*((unsigned __int16 *)this + 4) >= 0x101u)
  {
    v8 = (_QWORD *)*v1;
    v7 = v1 + 1;
    v6 = v8;
    if (v8 == v7)
    {
      return 1;
    }
    else
    {
      do
      {
        IsInitialized = google::protobuf::internal::ExtensionSet::Extension::IsInitialized((google::protobuf::internal::ExtensionSet::Extension *)(v6 + 5));
        if (!(_DWORD)IsInitialized)
          break;
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v6[2];
            v11 = *v10 == (_QWORD)v6;
            v6 = v10;
          }
          while (!v11);
        }
        v6 = v10;
      }
      while (v10 != v7);
    }
  }
  else
  {
    while (1)
    {
      v3 = *((_QWORD *)this + 2) + 32 * *((unsigned __int16 *)this + 5);
      IsInitialized = v1 == (_QWORD *)v3;
      if (v1 == (_QWORD *)v3)
        break;
      v5 = (google::protobuf::internal::ExtensionSet::Extension *)(v1 + 1);
      if (!google::protobuf::internal::ExtensionSet::Extension::IsInitialized(v5))
        break;
      v1 = (_QWORD *)((char *)v5 + 24);
      if (*((unsigned __int16 *)this + 4) > 0x100u)
        google::protobuf::internal::ExtensionSet::IsInitialized();
    }
  }
  return IsInitialized;
}

uint64_t google::protobuf::internal::ExtensionSet::Extension::IsInitialized(google::protobuf::internal::ExtensionSet::Extension *this)
{
  uint64_t v2;
  std::string *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9;
  std::string v10[2];

  v2 = *((unsigned __int8 *)this + 8);
  if ((v2 - 19) <= 0xFFFFFFED)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    v3 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v3->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v2] != 10)
    return 1;
  if (*((_BYTE *)this + 9))
  {
    v4 = *(_QWORD *)this;
    if (*(int *)(*(_QWORD *)this + 8) >= 1)
    {
      v5 = 0;
      while (1)
      {
        v6 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(v4, v5);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6) & 1) == 0)
          break;
        ++v5;
        v4 = *(_QWORD *)this;
        if (v5 >= *(_DWORD *)(*(_QWORD *)this + 8))
          return 1;
      }
      return 0;
    }
    return 1;
  }
  if ((*((_BYTE *)this + 10) & 1) != 0)
    return 1;
  v7 = **(_QWORD **)this;
  if ((*((_BYTE *)this + 10) & 0x10) != 0)
    return ((*(uint64_t (**)(void))(v7 + 72))() & 1) != 0;
  result = (*(uint64_t (**)(void))(v7 + 48))();
  if ((_DWORD)result)
    return 1;
  return result;
}

void sub_191D31738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::FindExtensionInfoFromFieldNumber(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, _BYTE *a6)
{
  uint64_t result;
  uint64_t v10;
  std::string *v11;
  unsigned int v12;
  std::string *v13;
  char v14;
  std::string v15[2];

  result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)a4 + 16))(a4, a3, a5);
  if ((_DWORD)result)
  {
    v10 = *a5;
    if ((v10 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    }
    v12 = google::protobuf::internal::WireFormatLite::kWireTypeForFieldType[v10];
    *a6 = 0;
    if (a2 == 2 && a5[1])
    {
      if (v12 > 5)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 82);
        v13 = google::protobuf::internal::LogMessage::operator<<(v15, "can't reach here.");
        google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v13->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
      }
      else
      {
        result = 1;
        if (((1 << v12) & 0x1C) == 0)
        {
          *a6 = 1;
          return result;
        }
      }
    }
    return v12 == a2;
  }
  return result;
}

void sub_191D31870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::internal::ExtensionSet::ParseField(google::protobuf::internal::ExtensionSet *a1, unint64_t a2, google::protobuf::internal *a3, uint64_t a4, uint64_t *a5, int32x2_t *a6)
{
  unsigned int v9;
  unint64_t v11;
  std::string *v13;
  unsigned __int8 v14[39];
  unsigned __int8 v15;
  _QWORD v16[2];

  v9 = a2;
  v16[0] = &off_1E2DF1B38;
  v16[1] = a4;
  v11 = a2 >> 3;
  v15 = 0;
  if ((google::protobuf::internal::ExtensionSet::FindExtensionInfoFromFieldNumber((uint64_t)a1, a2 & 7, a2 >> 3, (uint64_t)v16, v14, &v15) & 1) != 0)return (unsigned __int8 *)google::protobuf::internal::ExtensionSet::ParseFieldWithExtensionInfo<std::string>(a1, v11, v15, (uint64_t)v14, a5, a3, a6);
  if ((*a5 & 1) != 0)
    v13 = (std::string *)((*a5 & 0xFFFFFFFFFFFFFFFELL) + 8);
  else
    v13 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>(a5);
  return google::protobuf::internal::UnknownFieldParse(v9, v13, a3, (google::protobuf::internal::ParseContext *)a6);
}

google::protobuf::internal *google::protobuf::internal::ExtensionSet::ParseFieldWithExtensionInfo<std::string>(google::protobuf::internal::ExtensionSet *a1, int a2, int a3, uint64_t a4, uint64_t *a5, google::protobuf::internal *this, int32x2_t *a7)
{
  google::protobuf::internal *v8;
  int v11;
  google::protobuf::internal::ExtensionSet *v12;
  std::string *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  google::protobuf::internal::ParseContext *v17;
  google::protobuf::internal *result;
  uint64_t *v19;
  google::protobuf::internal::ParseContext *v20;
  uint64_t *v21;
  google::protobuf::internal::ParseContext *v22;
  uint64_t *v23;
  google::protobuf::internal::ParseContext *v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  google::protobuf::MessageLite *v28;
  int v29;
  int v30;
  uint64_t *v31;
  int v32;
  unint64_t v33;
  uint64_t *v34;
  google::protobuf::internal::ParseContext *v35;
  uint64_t *v36;
  google::protobuf::internal::ParseContext *v37;
  uint64_t *v38;
  google::protobuf::internal::ParseContext *v39;
  uint64_t *v40;
  google::protobuf::internal::ParseContext *v41;
  uint64_t *v42;
  google::protobuf::internal::ParseContext *v43;
  uint64_t *v44;
  google::protobuf::internal::ParseContext *v45;
  uint64_t *v46;
  google::protobuf::internal::ParseContext *v47;
  uint64_t *v48;
  google::protobuf::internal::ParseContext *v49;
  uint64_t *v50;
  google::protobuf::internal::ParseContext *v51;
  double v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t *v57;
  int v58;
  int v59;
  uint64_t *v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  uint64_t *v68;
  int v69;
  unint64_t v70;
  std::string *v71;
  int v72;
  std::string::value_type *v73;
  char *SizeFallback;
  int v75;
  int v76;
  int v77;
  uint64_t *v78;
  int v79;
  int v80;
  int v81;
  uint64_t *v82;
  int v83;
  uint64_t *v84;
  int v85;
  int v86;
  int v87;
  BOOL v88;
  uint64_t v89;
  __int32 v90;
  int v91;
  uint64_t *v92;
  int v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  std::string *v100;
  char v101;
  std::string v102;
  uint64_t *v103;
  int v104;

  v8 = this;
  v11 = a2;
  v12 = a1;
  if (a3)
  {
    switch(*(_BYTE *)a4)
    {
      case 1:
        v34 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 1, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedDoubleParser((google::protobuf::internal *)v34, v8, (const char *)a7, v35);
        break;
      case 2:
        v36 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 2, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedFloatParser((google::protobuf::internal *)v36, v8, (const char *)a7, v37);
        break;
      case 3:
        v38 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 3, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedInt64Parser((google::protobuf::internal *)v38, v8, (const char *)a7, v39);
        break;
      case 4:
        v40 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 4, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedUInt64Parser((google::protobuf::internal *)v40, v8, (const char *)a7, v41);
        break;
      case 5:
        v16 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 5, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedInt32Parser((google::protobuf::internal *)v16, v8, (const char *)a7, v17);
        break;
      case 6:
        v42 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 6, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedFixed64Parser((google::protobuf::internal *)v42, v8, (const char *)a7, v43);
        break;
      case 7:
        v44 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 7, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedFixed32Parser((google::protobuf::internal *)v44, v8, (const char *)a7, v45);
        break;
      case 8:
        v46 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 8, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedBoolParser((google::protobuf::internal *)v46, v8, (const char *)a7, v47);
        break;
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/extension_set_inl.h", 79);
        v13 = google::protobuf::internal::LogMessage::operator<<(&v102, "Non-primitive types can't be packed.");
        google::protobuf::internal::LogFinisher::operator=((int)&v101, (const char **)&v13->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v102.__r_.__value_.__l.__data_);
        return v8;
      case 0xD:
        v19 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 13, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedUInt32Parser((google::protobuf::internal *)v19, v8, (const char *)a7, v20);
        break;
      case 0xE:
        v102.__r_.__value_.__r.__words[0] = (std::string::size_type)google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 14, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        *(_OWORD *)&v102.__r_.__value_.__r.__words[1] = *(_OWORD *)(a4 + 8);
        v103 = a5;
        v104 = v11;
        return google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::PackedEnumParserArg<std::string>(void *,char const*,google::protobuf::internal::ParseContext *,BOOL (*)(void const*,int),void const*,google::protobuf::internal::InternalMetadata *,int)::{lambda(unsigned long long)#1}>((uint64_t)a7, v8, (uint64_t)&v102);
      case 0xF:
        v21 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 15, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedSFixed32Parser((google::protobuf::internal *)v21, v8, (const char *)a7, v22);
        break;
      case 0x10:
        v48 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 16, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedSFixed64Parser((google::protobuf::internal *)v48, v8, (const char *)a7, v49);
        break;
      case 0x11:
        v23 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 17, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedSInt32Parser((google::protobuf::internal *)v23, v8, (const char *)a7, v24);
        break;
      case 0x12:
        v50 = google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(a1, a2, 18, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (google::protobuf::internal *)google::protobuf::internal::PackedSInt64Parser((google::protobuf::internal *)v50, v8, (const char *)a7, v51);
        break;
      default:
        return v8;
    }
    return result;
  }
  switch(*(_BYTE *)a4)
  {
    case 1:
      v8 = (google::protobuf::internal *)((char *)this + 8);
      v52 = *(double *)this;
      if (*(_BYTE *)(a4 + 1))
        google::protobuf::internal::ExtensionSet::AddDouble(a1, a2, 1, *(unsigned __int8 *)(a4 + 2), *(uint64_t **)(a4 + 24), v52);
      else
        google::protobuf::internal::ExtensionSet::SetDouble(a1, a2, 1, *(uint64_t **)(a4 + 24), v52);
      return v8;
    case 2:
      v8 = (google::protobuf::internal *)((char *)this + 4);
      v53 = *(float *)this;
      if (*(_BYTE *)(a4 + 1))
        google::protobuf::internal::ExtensionSet::AddFloat(a1, a2, 2, *(unsigned __int8 *)(a4 + 2), *(uint64_t **)(a4 + 24), v53);
      else
        google::protobuf::internal::ExtensionSet::SetFloat(a1, a2, 2, *(uint64_t **)(a4 + 24), v53);
      return v8;
    case 3:
      v54 = *(unsigned __int8 *)this;
      if (*(char *)this < 0)
      {
        v80 = v54 + (*((unsigned __int8 *)this + 1) << 7);
        v54 = (v80 - 128);
        if (*((char *)this + 1) < 0)
        {
          v8 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(this, (v80 - 128));
          if (!v8)
            return v8;
          v54 = v97;
        }
        else
        {
          v8 = (google::protobuf::internal *)((char *)this + 2);
        }
      }
      else
      {
        v8 = (google::protobuf::internal *)((char *)this + 1);
      }
      if (*(_BYTE *)(a4 + 1))
      {
        v67 = *(unsigned __int8 *)(a4 + 2);
        v68 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v69 = 3;
        goto LABEL_136;
      }
      v92 = *(uint64_t **)(a4 + 24);
      a1 = v12;
      a2 = v11;
      v93 = 3;
      goto LABEL_138;
    case 4:
      v55 = *(unsigned __int8 *)this;
      if (*(char *)this < 0)
      {
        v81 = v55 + (*((unsigned __int8 *)this + 1) << 7);
        v55 = (v81 - 128);
        if (*((char *)this + 1) < 0)
        {
          v8 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(this, (v81 - 128));
          if (!v8)
            return v8;
          v55 = v98;
        }
        else
        {
          v8 = (google::protobuf::internal *)((char *)this + 2);
        }
      }
      else
      {
        v8 = (google::protobuf::internal *)((char *)this + 1);
      }
      if (*(_BYTE *)(a4 + 1))
      {
        v56 = *(unsigned __int8 *)(a4 + 2);
        v57 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v58 = 4;
        goto LABEL_117;
      }
      v82 = *(uint64_t **)(a4 + 24);
      a1 = v12;
      a2 = v11;
      v83 = 4;
      goto LABEL_119;
    case 5:
      v25 = *(unsigned __int8 *)this;
      if (*(char *)this < 0)
      {
        v76 = v25 + (*((unsigned __int8 *)this + 1) << 7);
        v25 = v76 - 128;
        if (*((char *)this + 1) < 0)
        {
          v8 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(this, (v76 - 128));
          if (!v8)
            return v8;
          v25 = v94;
        }
        else
        {
          v8 = (google::protobuf::internal *)((char *)this + 2);
        }
      }
      else
      {
        v8 = (google::protobuf::internal *)((char *)this + 1);
      }
      if (*(_BYTE *)(a4 + 1))
      {
        v30 = *(unsigned __int8 *)(a4 + 2);
        v31 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v32 = 5;
        goto LABEL_104;
      }
      v78 = *(uint64_t **)(a4 + 24);
      a1 = v12;
      a2 = v11;
      v79 = 5;
      v95 = v25;
      goto LABEL_107;
    case 6:
      v8 = (google::protobuf::internal *)((char *)this + 8);
      v55 = *(_QWORD *)this;
      if (*(_BYTE *)(a4 + 1))
      {
        v56 = *(unsigned __int8 *)(a4 + 2);
        v57 = *(uint64_t **)(a4 + 24);
        v58 = 6;
LABEL_117:
        google::protobuf::internal::ExtensionSet::AddUInt64(a1, a2, v58, v56, v55, v57);
      }
      else
      {
        v82 = *(uint64_t **)(a4 + 24);
        v83 = 6;
LABEL_119:
        google::protobuf::internal::ExtensionSet::SetUInt64(a1, a2, v83, (uint64_t *)v55, v82);
      }
      return v8;
    case 7:
      v8 = (google::protobuf::internal *)((char *)this + 4);
      v29 = *(_DWORD *)this;
      if (*(_BYTE *)(a4 + 1))
      {
        v59 = *(unsigned __int8 *)(a4 + 2);
        v60 = *(uint64_t **)(a4 + 24);
        v61 = 7;
        goto LABEL_98;
      }
      v84 = *(uint64_t **)(a4 + 24);
      v85 = 7;
      v86 = *(_DWORD *)this;
      goto LABEL_100;
    case 8:
      v62 = *(unsigned __int8 *)this;
      if (*(char *)this < 0)
      {
        v62 = v62 + (*((unsigned __int8 *)this + 1) << 7) - 128;
        if (*((char *)this + 1) < 0)
        {
          v8 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(this, v62);
          if (!v8)
            return v8;
        }
        else
        {
          v8 = (google::protobuf::internal *)((char *)this + 2);
        }
      }
      else
      {
        v8 = (google::protobuf::internal *)((char *)this + 1);
      }
      if (*(_BYTE *)(a4 + 1))
        google::protobuf::internal::ExtensionSet::AddBool(v12, v11, 8, *(unsigned __int8 *)(a4 + 2), v62 != 0, *(uint64_t **)(a4 + 24));
      else
        google::protobuf::internal::ExtensionSet::SetBool(v12, v11, 8, v62 != 0, *(uint64_t **)(a4 + 24));
      return v8;
    case 9:
    case 0xC:
      v14 = *(uint64_t **)(a4 + 24);
      if (*(_BYTE *)(a4 + 1))
        v15 = (uint64_t)google::protobuf::internal::ExtensionSet::AddString(a1, a2, 9, v14);
      else
        v15 = google::protobuf::internal::ExtensionSet::MutableString(a1, a2, 9, v14);
      v71 = (std::string *)v15;
      v72 = *(unsigned __int8 *)v8;
      if ((*(char *)v8 & 0x80000000) == 0)
      {
        v73 = (char *)v8 + 1;
        return google::protobuf::internal::EpsCopyInputStream::ReadString((uint64_t)a7, v73, v72, v71);
      }
      SizeFallback = google::protobuf::internal::ReadSizeFallback(v8, (const char *)*(unsigned __int8 *)v8);
      if (SizeFallback)
      {
        v73 = SizeFallback;
        v72 = v75;
        return google::protobuf::internal::EpsCopyInputStream::ReadString((uint64_t)a7, v73, v72, v71);
      }
      return 0;
    case 0xA:
      v63 = *(_QWORD *)(a4 + 8);
      v64 = *(uint64_t **)(a4 + 24);
      if (*(_BYTE *)(a4 + 1))
        v65 = google::protobuf::internal::ExtensionSet::AddMessage(a1, a2, 10, v63, v64);
      else
        v65 = google::protobuf::internal::ExtensionSet::MutableMessage(a1, a2, 10, v63, v64);
      v87 = a7[11].i32[0];
      v88 = __OFSUB__(v87--, 1);
      a7[11].i32[0] = v87;
      if (v87 < 0 != v88)
        return 0;
      ++a7[11].i32[1];
      v89 = (*(uint64_t (**)(uint64_t, google::protobuf::internal *, int32x2_t *))(*(_QWORD *)v65 + 88))(v65, v8, a7);
      a7[11] = vadd_s32(a7[11], (int32x2_t)0xFFFFFFFF00000001);
      v90 = a7[10].i32[0];
      a7[10].i32[0] = 0;
      if (v90 == ((8 * v11) | 3))
        return (google::protobuf::internal *)v89;
      else
        return 0;
    case 0xB:
      v26 = *(_QWORD *)(a4 + 8);
      v27 = *(uint64_t **)(a4 + 24);
      if (*(_BYTE *)(a4 + 1))
        v28 = (google::protobuf::MessageLite *)google::protobuf::internal::ExtensionSet::AddMessage(a1, a2, 11, v26, v27);
      else
        v28 = (google::protobuf::MessageLite *)google::protobuf::internal::ExtensionSet::MutableMessage(a1, a2, 11, v26, v27);
      return (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage((google::protobuf::internal::ParseContext *)a7, v28, (const char *)v8);
    case 0xD:
      v29 = *(unsigned __int8 *)this;
      if (*(char *)this < 0)
      {
        v77 = v29 + (*((unsigned __int8 *)this + 1) << 7);
        v29 = v77 - 128;
        if (*((char *)this + 1) < 0)
        {
          v8 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(this, (v77 - 128));
          if (!v8)
            return v8;
          v29 = v96;
        }
        else
        {
          v8 = (google::protobuf::internal *)((char *)this + 2);
        }
      }
      else
      {
        v8 = (google::protobuf::internal *)((char *)this + 1);
      }
      if (*(_BYTE *)(a4 + 1))
      {
        v59 = *(unsigned __int8 *)(a4 + 2);
        v60 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v61 = 13;
LABEL_98:
        google::protobuf::internal::ExtensionSet::AddUInt32(a1, a2, v61, v59, v29, v60);
      }
      else
      {
        v84 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v85 = 13;
        v86 = v29;
LABEL_100:
        google::protobuf::internal::ExtensionSet::SetUInt32(a1, a2, v85, v86, v84);
      }
      return v8;
    case 0xE:
      v66 = *(unsigned __int8 *)this;
      if (*(char *)this < 0)
      {
        v91 = v66 + (*((unsigned __int8 *)this + 1) << 7);
        v66 = (v91 - 128);
        if (*((char *)this + 1) < 0)
        {
          v8 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(this, (v91 - 128));
          if (!v8)
            return v8;
          v66 = v99;
        }
        else
        {
          v8 = (google::protobuf::internal *)((char *)this + 2);
        }
      }
      else
      {
        v8 = (google::protobuf::internal *)((char *)this + 1);
      }
      if (((*(uint64_t (**)(_QWORD, unint64_t))(a4 + 8))(*(_QWORD *)(a4 + 16), v66) & 1) != 0)
      {
        if (*(_BYTE *)(a4 + 1))
          google::protobuf::internal::ExtensionSet::AddEnum(v12, v11, 14, *(unsigned __int8 *)(a4 + 2), v66, *(uint64_t **)(a4 + 24));
        else
          google::protobuf::internal::ExtensionSet::SetEnum(v12, v11, 14, v66, *(uint64_t **)(a4 + 24));
      }
      else
      {
        if ((*a5 & 1) != 0)
          v100 = (std::string *)((*a5 & 0xFFFFFFFFFFFFFFFELL) + 8);
        else
          v100 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>(a5);
        google::protobuf::internal::WriteVarint(v11, v66, v100);
      }
      return v8;
    case 0xF:
      v8 = (google::protobuf::internal *)((char *)this + 4);
      v25 = *(_DWORD *)this;
      if (*(_BYTE *)(a4 + 1))
      {
        v30 = *(unsigned __int8 *)(a4 + 2);
        v31 = *(uint64_t **)(a4 + 24);
        v32 = 15;
        goto LABEL_104;
      }
      v78 = *(uint64_t **)(a4 + 24);
      v79 = 15;
      goto LABEL_106;
    case 0x10:
      v8 = (google::protobuf::internal *)((char *)this + 8);
      v54 = *(_QWORD *)this;
      if (*(_BYTE *)(a4 + 1))
      {
        v67 = *(unsigned __int8 *)(a4 + 2);
        v68 = *(uint64_t **)(a4 + 24);
        v69 = 16;
        goto LABEL_136;
      }
      v92 = *(uint64_t **)(a4 + 24);
      v93 = 16;
      goto LABEL_138;
    case 0x11:
      LODWORD(v33) = *(unsigned __int8 *)this;
      if (*(char *)this < 0)
      {
        v33 = v33 + (*((unsigned __int8 *)this + 1) << 7) - 128;
        if (*((char *)this + 1) < 0)
        {
          v8 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(this, v33);
          if (!v8)
            return v8;
        }
        else
        {
          v8 = (google::protobuf::internal *)((char *)this + 2);
        }
      }
      else
      {
        v8 = (google::protobuf::internal *)((char *)this + 1);
      }
      v25 = -(v33 & 1) ^ (v33 >> 1);
      if (*(_BYTE *)(a4 + 1))
      {
        v30 = *(unsigned __int8 *)(a4 + 2);
        v31 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v32 = 17;
LABEL_104:
        google::protobuf::internal::ExtensionSet::AddInt32(a1, a2, v32, v30, v25, v31);
      }
      else
      {
        v78 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v79 = 17;
LABEL_106:
        v95 = v25;
LABEL_107:
        google::protobuf::internal::ExtensionSet::SetInt32(a1, a2, v79, v95, v78);
      }
      return v8;
    case 0x12:
      v70 = *(unsigned __int8 *)this;
      if (*(char *)this < 0)
      {
        v70 = v70 + (*((unsigned __int8 *)this + 1) << 7) - 128;
        if (*((char *)this + 1) < 0)
        {
          v8 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(this, v70);
          if (!v8)
            return v8;
        }
        else
        {
          v8 = (google::protobuf::internal *)((char *)this + 2);
        }
      }
      else
      {
        v8 = (google::protobuf::internal *)((char *)this + 1);
      }
      v54 = -(uint64_t)(v70 & 1) ^ (v70 >> 1);
      if (*(_BYTE *)(a4 + 1))
      {
        v67 = *(unsigned __int8 *)(a4 + 2);
        v68 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v69 = 18;
LABEL_136:
        google::protobuf::internal::ExtensionSet::AddInt64(a1, a2, v69, v67, v54, v68);
      }
      else
      {
        v92 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v93 = 18;
LABEL_138:
        google::protobuf::internal::ExtensionSet::SetInt64(a1, a2, v93, (uint64_t *)v54, v92);
      }
      return v8;
    default:
      return v8;
  }
}

void sub_191D324A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::internal::ExtensionSet::_InternalSerialize(google::protobuf::internal::ExtensionSet *this, signed int a2, int a3, unsigned __int8 *a4, google::protobuf::io::EpsCopyOutputStream *a5)
{
  unsigned int *v7;
  unint64_t v8;
  unsigned int *v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  signed int v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  int **v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  BOOL v26;

  v7 = (unsigned int *)*((_QWORD *)this + 2);
  if (*((unsigned __int16 *)this + 4) >= 0x101u)
  {
    v18 = *((_QWORD *)v7 + 1);
    v17 = v7 + 2;
    v16 = v18;
    if (v18)
    {
      v19 = (int **)v17;
      do
      {
        v20 = *(_DWORD *)(v16 + 32);
        v21 = v20 < a2;
        if (v20 >= a2)
          v22 = (uint64_t *)v16;
        else
          v22 = (uint64_t *)(v16 + 8);
        if (!v21)
          v19 = (int **)v16;
        v16 = *v22;
      }
      while (*v22);
      if (v19 != (int **)v17)
      {
        do
        {
          v23 = *((unsigned int *)v19 + 8);
          if ((int)v23 >= a3)
            break;
          a4 = google::protobuf::internal::ExtensionSet::Extension::InternalSerializeFieldWithCachedSizesToArray(v19 + 5, v23, (char *)a4, a5);
          v24 = (unsigned int *)v19[1];
          if (v24)
          {
            do
            {
              v25 = v24;
              v24 = *(unsigned int **)v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              v25 = (unsigned int *)v19[2];
              v26 = *(_QWORD *)v25 == (_QWORD)v19;
              v19 = (int **)v25;
            }
            while (!v26);
          }
          v19 = (int **)v25;
        }
        while (v25 != v17);
      }
    }
  }
  else
  {
    v8 = *((unsigned __int16 *)this + 5);
    if (*((_WORD *)this + 5))
    {
      v9 = &v7[8 * v8];
      do
      {
        v10 = v8 >> 1;
        v11 = &v7[8 * (v8 >> 1)];
        v13 = *v11;
        v12 = v11 + 8;
        v8 += ~(v8 >> 1);
        if (v13 < a2)
          v7 = v12;
        else
          v8 = v10;
      }
      while (v8);
      while (v7 != v9)
      {
        v14 = *v7;
        if ((int)v14 >= a3)
          break;
        a4 = google::protobuf::internal::ExtensionSet::Extension::InternalSerializeFieldWithCachedSizesToArray((int **)v7 + 1, v14, (char *)a4, a5);
        v7 += 8;
      }
    }
  }
  return a4;
}

unsigned __int8 *google::protobuf::internal::ExtensionSet::Extension::InternalSerializeFieldWithCachedSizesToArray(int **this, uint64_t a2, char *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  unsigned int v8;
  _BYTE *v9;
  int v10;
  std::string *v11;
  int *v12;
  unsigned int v13;
  unsigned int v14;
  int **v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  std::string *v19;
  int *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  std::string *v40;
  std::string *v41;
  int *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int *v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int *v54;
  int v55;
  int *v56;
  int v57;
  int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  int *v63;
  int v64;
  int *v65;
  int v66;
  int *v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int *v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int *v79;
  int v80;
  int *v81;
  int v82;
  int *v83;
  int v84;
  int *v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  int *v91;
  int v92;
  int *v93;
  int v94;
  uint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  int *v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  char v105;
  int v106;
  _DWORD *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  int *v111;
  int v112;
  unsigned int v113;
  char v114;
  unsigned int v115;
  unint64_t v116;
  _BYTE *v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int *v124;
  int v125;
  unsigned int v126;
  char v127;
  unsigned int v128;
  unint64_t v129;
  _BYTE *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  int *v137;
  int v138;
  unsigned int v139;
  char v140;
  unsigned int v141;
  unint64_t v142;
  _BYTE *v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  int *v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  char v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  _QWORD *v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  int *v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  char v167;
  int v168;
  _DWORD *v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  int *v173;
  int v174;
  unsigned int v175;
  char v176;
  unsigned int v177;
  char v178;
  _BYTE *v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  uint64_t v183;
  int v184;
  unsigned int v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int64_t v191;
  _BYTE *v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  char *v196;
  const void *v197;
  uint64_t v198;
  int v199;
  unsigned int v200;
  char v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  char v205;
  uint64_t v206;
  char *v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  char *v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t v215;
  int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  char v220;
  uint64_t v221;
  uint64_t v222;
  _BYTE *v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  _BYTE *v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t v232;
  int v233;
  unsigned int v234;
  uint64_t v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int64_t v240;
  _BYTE *v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  char *v245;
  const void *v246;
  int *v247;
  int v248;
  unsigned int v249;
  char v250;
  unsigned int v251;
  unsigned int v252;
  _BYTE *v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  int *v260;
  int v261;
  unsigned int v262;
  char v263;
  unsigned int v264;
  unint64_t v265;
  _BYTE *v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  int *v273;
  int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  char v278;
  int v279;
  _DWORD *v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  int *v284;
  int v285;
  unsigned int v286;
  unsigned int v287;
  char v288;
  unsigned int v289;
  unsigned int v290;
  uint64_t v291;
  _QWORD *v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  int *v296;
  int v297;
  unsigned int v298;
  char v299;
  unsigned int v300;
  int v301;
  _BYTE *v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  int *v310;
  int v311;
  unsigned int v312;
  char v313;
  unsigned int v314;
  uint64_t v315;
  _BYTE *v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unsigned int v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int *v327;
  unsigned int v328;
  unsigned int v329;
  unint64_t v330;
  unsigned int v331;
  char *v332;
  unsigned int v333;
  unsigned int v334;
  unsigned int v335;
  unsigned int v336;
  unsigned int v337;
  unsigned int v338;
  int *v339;
  int64_t v340;
  int *v341;
  unsigned int v342;
  unsigned int v343;
  unsigned int v344;
  char *v345;
  int *v346;
  unsigned int v347;
  _BYTE *v348;
  unsigned int v349;
  unsigned int v350;
  int v351;
  unsigned int v352;
  uint64_t v353;
  unsigned int v354;
  unsigned int v355;
  unsigned int v356;
  unsigned int v357;
  unsigned int v358;
  unsigned int v360;
  unsigned int v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unsigned int v369;
  unsigned int v370;
  _BYTE *v371;
  unsigned int v372;
  unsigned int v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unsigned int v379;
  unsigned int v380;
  unsigned int v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t v384;
  unsigned int v385;
  unsigned int v386;
  unint64_t v387;
  unsigned int v388;
  unsigned int v389;
  unint64_t v390;
  unsigned int v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int v394;
  unsigned int v395;
  unsigned int v396;
  unsigned int v397;
  unsigned int v398;
  unsigned int v399;
  unsigned int v400;
  unsigned int v401;
  unsigned int v402;
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  unsigned int v408;
  unint64_t v409;
  unint64_t v410;
  unsigned int v411;
  unsigned int v412;
  unsigned int v413;
  unint64_t v414;
  unsigned int v415;
  unsigned int v416;
  unint64_t v417;
  unint64_t v418;
  unsigned int v419;
  char *v420;
  unsigned int v421;
  unsigned int v422;
  unsigned int v423;
  _BYTE *v424;
  unsigned int v425;
  unsigned int v426;
  unsigned int v427;
  unsigned int v429;
  unsigned int v430;
  char v431;
  std::string v432[2];

  v5 = a3;
  if (*((_BYTE *)this + 9))
  {
    if (*((_BYTE *)this + 11))
    {
      if (*((_DWORD *)this + 3))
      {
        if (*(_QWORD *)a4 <= (unint64_t)a3)
          v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, a3);
        v8 = (8 * a2) | 2;
        if (v8 > 0x7F)
        {
          *v5 = (8 * a2) | 0x82;
          v32 = (8 * a2) >> 7;
          if (v8 >> 14)
          {
            v9 = v5 + 2;
            do
            {
              *(v9 - 1) = v32 | 0x80;
              v33 = v32 >> 7;
              ++v9;
              v34 = v32 >> 14;
              v32 >>= 7;
            }
            while (v34);
            *(v9 - 1) = v33;
          }
          else
          {
            v5[1] = v32;
            v9 = v5 + 2;
          }
        }
        else
        {
          *v5 = v8;
          v9 = v5 + 1;
        }
        v35 = *((int *)this + 3);
        if (v35 > 0x7F)
        {
          *v9 = v35 | 0x80;
          v36 = v35 >> 7;
          if (v35 >> 14)
          {
            v5 = v9 + 2;
            do
            {
              *(v5 - 1) = v36 | 0x80;
              v37 = v36 >> 7;
              ++v5;
              v38 = v36 >> 14;
              v36 >>= 7;
            }
            while (v38);
            *(v5 - 1) = v37;
          }
          else
          {
            v9[1] = v36;
            v5 = v9 + 2;
          }
        }
        else
        {
          *v9 = v35;
          v5 = v9 + 1;
        }
        v39 = *((unsigned __int8 *)this + 8);
        if ((v39 - 19) <= 0xFFFFFFED)
        {
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
          v40 = google::protobuf::internal::LogMessage::operator<<(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
          google::protobuf::internal::LogFinisher::operator=((int)&v431, (const char **)&v40->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&v432[0].__r_.__value_.__l.__data_);
        }
        switch(v39)
        {
          case 1:
            v63 = *this;
            if (**this >= 1)
            {
              v64 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v63 = *this;
                }
                *(_QWORD *)v5 = *(_QWORD *)google::protobuf::RepeatedField<double>::Get(v63, v64);
                v5 += 8;
                ++v64;
                v63 = *this;
              }
              while (v64 < **this);
            }
            break;
          case 2:
            v65 = *this;
            if (**this >= 1)
            {
              v66 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v65 = *this;
                }
                *(_DWORD *)v5 = *(_DWORD *)google::protobuf::RepeatedField<float>::Get(v65, v66);
                v5 += 4;
                ++v66;
                v65 = *this;
              }
              while (v66 < **this);
            }
            break;
          case 3:
            v67 = *this;
            if (**this >= 1)
            {
              v68 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v67 = *this;
                }
                v69 = *(_QWORD *)google::protobuf::RepeatedField<long long>::Get(v67, v68);
                if (v69 > 0x7F)
                {
                  *v5 = v69 | 0x80;
                  v70 = v69 >> 7;
                  if (v69 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v70 | 0x80;
                      v71 = v70 >> 7;
                      ++v5;
                      v72 = v70 >> 14;
                      v70 >>= 7;
                    }
                    while (v72);
                    *(v5 - 1) = v71;
                  }
                  else
                  {
                    v5[1] = v70;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v69;
                }
                ++v68;
                v67 = *this;
              }
              while (v68 < **this);
            }
            break;
          case 4:
            v73 = *this;
            if (**this >= 1)
            {
              v74 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v73 = *this;
                }
                v75 = *(_QWORD *)google::protobuf::RepeatedField<unsigned long long>::Get(v73, v74);
                if (v75 > 0x7F)
                {
                  *v5 = v75 | 0x80;
                  v76 = v75 >> 7;
                  if (v75 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v76 | 0x80;
                      v77 = v76 >> 7;
                      ++v5;
                      v78 = v76 >> 14;
                      v76 >>= 7;
                    }
                    while (v78);
                    *(v5 - 1) = v77;
                  }
                  else
                  {
                    v5[1] = v76;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v75;
                }
                ++v74;
                v73 = *this;
              }
              while (v74 < **this);
            }
            break;
          case 5:
            v42 = *this;
            if (**this >= 1)
            {
              v43 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v42 = *this;
                }
                v44 = *(int *)google::protobuf::RepeatedField<int>::Get(v42, v43);
                if (v44 > 0x7F)
                {
                  *v5 = v44 | 0x80;
                  v45 = v44 >> 7;
                  if (v44 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v45 | 0x80;
                      v46 = v45 >> 7;
                      ++v5;
                      v47 = v45 >> 14;
                      v45 >>= 7;
                    }
                    while (v47);
                    *(v5 - 1) = v46;
                  }
                  else
                  {
                    v5[1] = v45;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v44;
                }
                ++v43;
                v42 = *this;
              }
              while (v43 < **this);
            }
            break;
          case 6:
            v79 = *this;
            if (**this >= 1)
            {
              v80 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v79 = *this;
                }
                *(_QWORD *)v5 = *(_QWORD *)google::protobuf::RepeatedField<unsigned long long>::Get(v79, v80);
                v5 += 8;
                ++v80;
                v79 = *this;
              }
              while (v80 < **this);
            }
            break;
          case 7:
            v81 = *this;
            if (**this >= 1)
            {
              v82 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v81 = *this;
                }
                *(_DWORD *)v5 = *(_DWORD *)google::protobuf::RepeatedField<unsigned int>::Get(v81, v82);
                v5 += 4;
                ++v82;
                v81 = *this;
              }
              while (v82 < **this);
            }
            break;
          case 8:
            v83 = *this;
            if (**this >= 1)
            {
              v84 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v83 = *this;
                }
                *v5++ = *(_BYTE *)google::protobuf::RepeatedField<BOOL>::Get(v83, v84++);
                v83 = *this;
              }
              while (v84 < **this);
            }
            break;
          case 9:
          case 10:
          case 11:
          case 12:
            google::protobuf::internal::LogMessage::LogMessage((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1966);
            v41 = google::protobuf::internal::LogMessage::operator<<(v432, "Non-primitive types can't be packed.");
            google::protobuf::internal::LogFinisher::operator=((int)&v431, (const char **)&v41->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&v432[0].__r_.__value_.__l.__data_);
            break;
          case 13:
            v48 = *this;
            if (**this >= 1)
            {
              v49 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v48 = *this;
                }
                v50 = *(_DWORD *)google::protobuf::RepeatedField<unsigned int>::Get(v48, v49);
                if (v50 > 0x7F)
                {
                  *v5 = v50 | 0x80;
                  v51 = v50 >> 7;
                  if (v50 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v51 | 0x80;
                      v52 = v51 >> 7;
                      ++v5;
                      v53 = v51 >> 14;
                      v51 >>= 7;
                    }
                    while (v53);
                    *(v5 - 1) = v52;
                  }
                  else
                  {
                    v5[1] = v51;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v50;
                }
                ++v49;
                v48 = *this;
              }
              while (v49 < **this);
            }
            break;
          case 14:
            v85 = *this;
            if (**this >= 1)
            {
              v86 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v85 = *this;
                }
                v87 = *(int *)google::protobuf::RepeatedField<int>::Get(v85, v86);
                if (v87 > 0x7F)
                {
                  *v5 = v87 | 0x80;
                  v88 = v87 >> 7;
                  if (v87 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v88 | 0x80;
                      v89 = v88 >> 7;
                      ++v5;
                      v90 = v88 >> 14;
                      v88 >>= 7;
                    }
                    while (v90);
                    *(v5 - 1) = v89;
                  }
                  else
                  {
                    v5[1] = v88;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v87;
                }
                ++v86;
                v85 = *this;
              }
              while (v86 < **this);
            }
            break;
          case 15:
            v54 = *this;
            if (**this >= 1)
            {
              v55 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v54 = *this;
                }
                *(_DWORD *)v5 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v54, v55);
                v5 += 4;
                ++v55;
                v54 = *this;
              }
              while (v55 < **this);
            }
            break;
          case 16:
            v91 = *this;
            if (**this >= 1)
            {
              v92 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v91 = *this;
                }
                *(_QWORD *)v5 = *(_QWORD *)google::protobuf::RepeatedField<long long>::Get(v91, v92);
                v5 += 8;
                ++v92;
                v91 = *this;
              }
              while (v92 < **this);
            }
            break;
          case 17:
            v56 = *this;
            if (**this >= 1)
            {
              v57 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v56 = *this;
                }
                v58 = (int *)google::protobuf::RepeatedField<int>::Get(v56, v57);
                v59 = (2 * *v58) ^ (*v58 >> 31);
                if (v59 > 0x7F)
                {
                  *v5 = v59 | 0x80;
                  v60 = v59 >> 7;
                  if (v59 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v60 | 0x80;
                      v61 = v60 >> 7;
                      ++v5;
                      v62 = v60 >> 14;
                      v60 >>= 7;
                    }
                    while (v62);
                    *(v5 - 1) = v61;
                  }
                  else
                  {
                    v5[1] = v60;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v59;
                }
                ++v57;
                v56 = *this;
              }
              while (v57 < **this);
            }
            break;
          case 18:
            v93 = *this;
            if (**this >= 1)
            {
              v94 = 0;
              do
              {
                if (*(_QWORD *)a4 <= (unint64_t)v5)
                {
                  v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
                  v93 = *this;
                }
                v95 = (uint64_t *)google::protobuf::RepeatedField<long long>::Get(v93, v94);
                v96 = (2 * *v95) ^ (*v95 >> 63);
                if (v96 > 0x7F)
                {
                  *v5 = v96 | 0x80;
                  v97 = v96 >> 7;
                  if (v96 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v97 | 0x80;
                      v98 = v97 >> 7;
                      ++v5;
                      v99 = v97 >> 14;
                      v97 >>= 7;
                    }
                    while (v99);
                    *(v5 - 1) = v98;
                  }
                  else
                  {
                    v5[1] = v97;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v96;
                }
                ++v94;
                v93 = *this;
              }
              while (v94 < **this);
            }
            break;
          default:
            return (unsigned __int8 *)v5;
        }
      }
      return (unsigned __int8 *)v5;
    }
    v18 = *((unsigned __int8 *)this + 8);
    if ((v18 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v19 = google::protobuf::internal::LogMessage::operator<<(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v431, (const char **)&v19->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v432[0].__r_.__value_.__l.__data_);
    }
    switch(v18)
    {
      case 1:
        v20 = *this;
        if (**this >= 1)
        {
          v21 = 0;
          v22 = 8 * a2;
          v23 = (8 * a2) | 1;
          v24 = (8 * a2) | 0x81;
          v25 = (a2 >> 4) & 0x1FFFFFF;
          v26 = v22 >> 7;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v20 = *this;
            }
            v27 = *(_QWORD *)google::protobuf::RepeatedField<double>::Get(v20, v21);
            if (v23 > 0x7F)
            {
              *v5 = v24;
              if (v23 >= 0x4000)
              {
                v28 = v5 + 2;
                v29 = v25;
                do
                {
                  *((_BYTE *)v28 - 1) = v29 | 0x80;
                  v30 = v29 >> 7;
                  v28 = (_QWORD *)((char *)v28 + 1);
                  v31 = v29 >> 14;
                  v29 >>= 7;
                }
                while (v31);
                *((_BYTE *)v28 - 1) = v30;
              }
              else
              {
                v5[1] = v26;
                v28 = v5 + 2;
              }
            }
            else
            {
              *v5 = v23;
              v28 = v5 + 1;
            }
            *v28 = v27;
            v5 = (char *)(v28 + 1);
            ++v21;
            v20 = *this;
          }
          while (v21 < **this);
        }
        return (unsigned __int8 *)v5;
      case 2:
        v100 = *this;
        if (**this >= 1)
        {
          v101 = 0;
          v102 = (8 * a2) | 5;
          v103 = (a2 >> 4) & 0x1FFFFFF;
          v104 = (8 * a2) >> 7;
          v105 = (8 * a2) | 0x85;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v100 = *this;
            }
            v106 = *(_DWORD *)google::protobuf::RepeatedField<float>::Get(v100, v101);
            if (v102 > 0x7F)
            {
              *v5 = v105;
              if (v102 >= 0x4000)
              {
                v107 = v5 + 2;
                v108 = v103;
                do
                {
                  *((_BYTE *)v107 - 1) = v108 | 0x80;
                  v109 = v108 >> 7;
                  v107 = (_DWORD *)((char *)v107 + 1);
                  v110 = v108 >> 14;
                  v108 >>= 7;
                }
                while (v110);
                *((_BYTE *)v107 - 1) = v109;
              }
              else
              {
                v5[1] = v104;
                v107 = v5 + 2;
              }
            }
            else
            {
              *v5 = v102;
              v107 = v5 + 1;
            }
            *v107 = v106;
            v5 = (char *)(v107 + 1);
            ++v101;
            v100 = *this;
          }
          while (v101 < **this);
        }
        return (unsigned __int8 *)v5;
      case 3:
        v111 = *this;
        if (**this >= 1)
        {
          v112 = 0;
          v113 = 8 * a2;
          v114 = (8 * a2) | 0x80;
          v115 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v111 = *this;
            }
            v116 = *(_QWORD *)google::protobuf::RepeatedField<long long>::Get(v111, v112);
            if (v113 > 0x7F)
            {
              *v5 = v114;
              if (v113 >= 0x4000)
              {
                v117 = v5 + 2;
                v118 = v115;
                do
                {
                  *(v117 - 1) = v118 | 0x80;
                  v119 = v118 >> 7;
                  ++v117;
                  v120 = v118 >> 14;
                  v118 >>= 7;
                }
                while (v120);
                *(v117 - 1) = v119;
              }
              else
              {
                v5[1] = v113 >> 7;
                v117 = v5 + 2;
              }
            }
            else
            {
              v117 = v5 + 1;
              *v5 = v113;
            }
            if (v116 > 0x7F)
            {
              *v117 = v116 | 0x80;
              v121 = v116 >> 7;
              if (v116 >> 14)
              {
                v5 = v117 + 2;
                do
                {
                  *(v5 - 1) = v121 | 0x80;
                  v122 = v121 >> 7;
                  ++v5;
                  v123 = v121 >> 14;
                  v121 >>= 7;
                }
                while (v123);
                *(v5 - 1) = v122;
              }
              else
              {
                v117[1] = v121;
                v5 = v117 + 2;
              }
            }
            else
            {
              *v117 = v116;
              v5 = v117 + 1;
            }
            ++v112;
            v111 = *this;
          }
          while (v112 < **this);
        }
        return (unsigned __int8 *)v5;
      case 4:
        v124 = *this;
        if (**this >= 1)
        {
          v125 = 0;
          v126 = 8 * a2;
          v127 = (8 * a2) | 0x80;
          v128 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v124 = *this;
            }
            v129 = *(_QWORD *)google::protobuf::RepeatedField<unsigned long long>::Get(v124, v125);
            if (v126 > 0x7F)
            {
              *v5 = v127;
              if (v126 >= 0x4000)
              {
                v130 = v5 + 2;
                v131 = v128;
                do
                {
                  *(v130 - 1) = v131 | 0x80;
                  v132 = v131 >> 7;
                  ++v130;
                  v133 = v131 >> 14;
                  v131 >>= 7;
                }
                while (v133);
                *(v130 - 1) = v132;
              }
              else
              {
                v5[1] = v126 >> 7;
                v130 = v5 + 2;
              }
            }
            else
            {
              v130 = v5 + 1;
              *v5 = v126;
            }
            if (v129 > 0x7F)
            {
              *v130 = v129 | 0x80;
              v134 = v129 >> 7;
              if (v129 >> 14)
              {
                v5 = v130 + 2;
                do
                {
                  *(v5 - 1) = v134 | 0x80;
                  v135 = v134 >> 7;
                  ++v5;
                  v136 = v134 >> 14;
                  v134 >>= 7;
                }
                while (v136);
                *(v5 - 1) = v135;
              }
              else
              {
                v130[1] = v134;
                v5 = v130 + 2;
              }
            }
            else
            {
              *v130 = v129;
              v5 = v130 + 1;
            }
            ++v125;
            v124 = *this;
          }
          while (v125 < **this);
        }
        return (unsigned __int8 *)v5;
      case 5:
        v137 = *this;
        if (**this >= 1)
        {
          v138 = 0;
          v139 = 8 * a2;
          v140 = (8 * a2) | 0x80;
          v141 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v137 = *this;
            }
            v142 = *(int *)google::protobuf::RepeatedField<int>::Get(v137, v138);
            if (v139 > 0x7F)
            {
              *v5 = v140;
              if (v139 >= 0x4000)
              {
                v143 = v5 + 2;
                v144 = v141;
                do
                {
                  *(v143 - 1) = v144 | 0x80;
                  v145 = v144 >> 7;
                  ++v143;
                  v146 = v144 >> 14;
                  v144 >>= 7;
                }
                while (v146);
                *(v143 - 1) = v145;
              }
              else
              {
                v5[1] = v139 >> 7;
                v143 = v5 + 2;
              }
            }
            else
            {
              v143 = v5 + 1;
              *v5 = v139;
            }
            if (v142 > 0x7F)
            {
              *v143 = v142 | 0x80;
              v147 = v142 >> 7;
              if (v142 >> 14)
              {
                v5 = v143 + 2;
                do
                {
                  *(v5 - 1) = v147 | 0x80;
                  v148 = v147 >> 7;
                  ++v5;
                  v149 = v147 >> 14;
                  v147 >>= 7;
                }
                while (v149);
                *(v5 - 1) = v148;
              }
              else
              {
                v143[1] = v147;
                v5 = v143 + 2;
              }
            }
            else
            {
              *v143 = v142;
              v5 = v143 + 1;
            }
            ++v138;
            v137 = *this;
          }
          while (v138 < **this);
        }
        return (unsigned __int8 *)v5;
      case 6:
        v150 = *this;
        if (**this >= 1)
        {
          v151 = 0;
          v152 = 8 * a2;
          v153 = (8 * a2) | 1;
          v154 = (8 * a2) | 0x81;
          v155 = (a2 >> 4) & 0x1FFFFFF;
          v156 = v152 >> 7;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v150 = *this;
            }
            v157 = *(_QWORD *)google::protobuf::RepeatedField<unsigned long long>::Get(v150, v151);
            if (v153 > 0x7F)
            {
              *v5 = v154;
              if (v153 >= 0x4000)
              {
                v158 = v5 + 2;
                v159 = v155;
                do
                {
                  *((_BYTE *)v158 - 1) = v159 | 0x80;
                  v160 = v159 >> 7;
                  v158 = (_QWORD *)((char *)v158 + 1);
                  v161 = v159 >> 14;
                  v159 >>= 7;
                }
                while (v161);
                *((_BYTE *)v158 - 1) = v160;
              }
              else
              {
                v5[1] = v156;
                v158 = v5 + 2;
              }
            }
            else
            {
              *v5 = v153;
              v158 = v5 + 1;
            }
            *v158 = v157;
            v5 = (char *)(v158 + 1);
            ++v151;
            v150 = *this;
          }
          while (v151 < **this);
        }
        return (unsigned __int8 *)v5;
      case 7:
        v162 = *this;
        if (**this >= 1)
        {
          v163 = 0;
          v164 = (8 * a2) | 5;
          v165 = (a2 >> 4) & 0x1FFFFFF;
          v166 = (8 * a2) >> 7;
          v167 = (8 * a2) | 0x85;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v162 = *this;
            }
            v168 = *(_DWORD *)google::protobuf::RepeatedField<unsigned int>::Get(v162, v163);
            if (v164 > 0x7F)
            {
              *v5 = v167;
              if (v164 >= 0x4000)
              {
                v169 = v5 + 2;
                v170 = v165;
                do
                {
                  *((_BYTE *)v169 - 1) = v170 | 0x80;
                  v171 = v170 >> 7;
                  v169 = (_DWORD *)((char *)v169 + 1);
                  v172 = v170 >> 14;
                  v170 >>= 7;
                }
                while (v172);
                *((_BYTE *)v169 - 1) = v171;
              }
              else
              {
                v5[1] = v166;
                v169 = v5 + 2;
              }
            }
            else
            {
              *v5 = v164;
              v169 = v5 + 1;
            }
            *v169 = v168;
            v5 = (char *)(v169 + 1);
            ++v163;
            v162 = *this;
          }
          while (v163 < **this);
        }
        return (unsigned __int8 *)v5;
      case 8:
        v173 = *this;
        if (**this >= 1)
        {
          v174 = 0;
          v175 = 8 * a2;
          v176 = (8 * a2) | 0x80;
          v177 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v173 = *this;
            }
            v178 = *(_BYTE *)google::protobuf::RepeatedField<BOOL>::Get(v173, v174);
            if (v175 > 0x7F)
            {
              *v5 = v176;
              if (v175 >= 0x4000)
              {
                v179 = v5 + 2;
                v180 = v177;
                do
                {
                  *(v179 - 1) = v180 | 0x80;
                  v181 = v180 >> 7;
                  ++v179;
                  v182 = v180 >> 14;
                  v180 >>= 7;
                }
                while (v182);
                *(v179 - 1) = v181;
              }
              else
              {
                v5[1] = v175 >> 7;
                v179 = v5 + 2;
              }
            }
            else
            {
              *v5 = v175;
              v179 = v5 + 1;
            }
            *v179 = v178;
            v5 = v179 + 1;
            ++v174;
            v173 = *this;
          }
          while (v174 < **this);
        }
        return (unsigned __int8 *)v5;
      case 9:
        v183 = (uint64_t)*this;
        if ((*this)[2] < 1)
          return (unsigned __int8 *)v5;
        v184 = 0;
        v185 = 8 * a2;
        v186 = 4;
        if (((a2 >> 25) & 0xF) != 0)
          v186 = 5;
        v187 = (8 * a2) | 2;
        v188 = 1;
        if (v185 >= 0x80)
          v188 = 2;
        if (v185 < 0x200000)
          v186 = 3;
        if (v185 >= 0x4000)
          v189 = v186;
        else
          v189 = v188;
        v429 = v185 >> 7;
        while (1)
        {
          if (*(_QWORD *)a4 <= (unint64_t)v5)
          {
            v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
            v183 = (uint64_t)*this;
          }
          v190 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v183, v184);
          if (*(char *)(v190 + 23) < 0)
          {
            v191 = *(_QWORD *)(v190 + 8);
            if (v191 > 127)
              goto LABEL_326;
          }
          else
          {
            v191 = *(unsigned __int8 *)(v190 + 23);
          }
          if ((uint64_t)(*(_QWORD *)a4 + ~(unint64_t)&v5[v189] + 16) >= v191)
          {
            if (v187 > 0x7F)
            {
              *v5 = (8 * a2) | 0x82;
              if (v187 >= 0x4000)
              {
                v192 = v5 + 2;
                v193 = (a2 >> 4) & 0x1FFFFFF;
                do
                {
                  *(v192 - 1) = v193 | 0x80;
                  v194 = v193 >> 7;
                  ++v192;
                  v195 = v193 >> 14;
                  v193 >>= 7;
                }
                while (v195);
                *(v192 - 1) = v194;
              }
              else
              {
                v5[1] = v429;
                v192 = v5 + 2;
              }
            }
            else
            {
              v192 = v5 + 1;
              *v5 = v187;
            }
            *v192 = v191;
            v196 = v192 + 1;
            if (*(char *)(v190 + 23) >= 0)
              v197 = (const void *)v190;
            else
              v197 = *(const void **)v190;
            memcpy(v196, v197, v191);
            v5 = &v196[v191];
            goto LABEL_324;
          }
LABEL_326:
          v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a4, a2, v190, v5);
LABEL_324:
          ++v184;
          v183 = (uint64_t)*this;
          if (v184 >= (*this)[2])
            return (unsigned __int8 *)v5;
        }
      case 10:
        v198 = (uint64_t)*this;
        if ((*this)[2] >= 1)
        {
          v199 = 0;
          v200 = (8 * a2) | 3;
          v201 = (8 * a2) | 0x83;
          v202 = (a2 >> 4) & 0x1FFFFFF;
          v203 = (8 * a2) | 4;
          v204 = (8 * a2) >> 7;
          v205 = (8 * a2) | 0x84;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v198 = (uint64_t)*this;
            }
            v206 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(v198, v199);
            if (v200 > 0x7F)
            {
              *v5 = v201;
              if (v200 >= 0x4000)
              {
                v207 = v5 + 2;
                v208 = v202;
                do
                {
                  *(v207 - 1) = v208 | 0x80;
                  v209 = v208 >> 7;
                  ++v207;
                  v210 = v208 >> 14;
                  v208 >>= 7;
                }
                while (v210);
                *(v207 - 1) = v209;
              }
              else
              {
                v5[1] = v204;
                v207 = v5 + 2;
              }
            }
            else
            {
              v207 = v5 + 1;
              *v5 = v200;
            }
            v211 = (char *)(*(uint64_t (**)(uint64_t, char *, google::protobuf::io::EpsCopyOutputStream *))(*(_QWORD *)v206 + 96))(v206, v207, a4);
            if (*(_QWORD *)a4 <= (unint64_t)v211)
              v211 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v211);
            if (v203 > 0x7F)
            {
              *v211 = v205;
              if (v203 >= 0x4000)
              {
                v5 = v211 + 2;
                v212 = v202;
                do
                {
                  *(v5 - 1) = v212 | 0x80;
                  v213 = v212 >> 7;
                  ++v5;
                  v214 = v212 >> 14;
                  v212 >>= 7;
                }
                while (v214);
                *(v5 - 1) = v213;
              }
              else
              {
                v211[1] = v204;
                v5 = v211 + 2;
              }
            }
            else
            {
              v5 = v211 + 1;
              *v211 = v203;
            }
            ++v199;
            v198 = (uint64_t)*this;
          }
          while (v199 < (*this)[2]);
        }
        return (unsigned __int8 *)v5;
      case 11:
        v215 = (uint64_t)*this;
        if ((*this)[2] >= 1)
        {
          v216 = 0;
          v217 = (8 * a2) | 2;
          v218 = (a2 >> 4) & 0x1FFFFFF;
          v219 = (8 * a2) >> 7;
          v220 = (8 * a2) | 0x82;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v215 = (uint64_t)*this;
            }
            v221 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(v215, v216);
            v222 = v221;
            if (v217 > 0x7F)
            {
              *v5 = v220;
              if (v217 >= 0x4000)
              {
                v223 = v5 + 2;
                v224 = v218;
                do
                {
                  *(v223 - 1) = v224 | 0x80;
                  v225 = v224 >> 7;
                  ++v223;
                  v226 = v224 >> 14;
                  v224 >>= 7;
                }
                while (v226);
                *(v223 - 1) = v225;
              }
              else
              {
                v5[1] = v219;
                v223 = v5 + 2;
              }
            }
            else
            {
              v223 = v5 + 1;
              *v5 = v217;
            }
            v227 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v221 + 80))(v221);
            if (v227 > 0x7F)
            {
              *v223 = v227 | 0x80;
              v229 = v227 >> 7;
              if (v227 >> 14)
              {
                v228 = v223 + 2;
                do
                {
                  *(v228 - 1) = v229 | 0x80;
                  v230 = v229 >> 7;
                  ++v228;
                  v231 = v229 >> 14;
                  v229 >>= 7;
                }
                while (v231);
                *(v228 - 1) = v230;
              }
              else
              {
                v223[1] = v229;
                v228 = v223 + 2;
              }
            }
            else
            {
              *v223 = v227;
              v228 = v223 + 1;
            }
            v5 = (char *)(*(uint64_t (**)(uint64_t, _BYTE *, google::protobuf::io::EpsCopyOutputStream *))(*(_QWORD *)v222 + 96))(v222, v228, a4);
            ++v216;
            v215 = (uint64_t)*this;
          }
          while (v216 < (*this)[2]);
        }
        return (unsigned __int8 *)v5;
      case 12:
        v232 = (uint64_t)*this;
        if ((*this)[2] < 1)
          return (unsigned __int8 *)v5;
        v233 = 0;
        v234 = 8 * a2;
        v235 = 4;
        if (((a2 >> 25) & 0xF) != 0)
          v235 = 5;
        v236 = (8 * a2) | 2;
        v237 = 1;
        if (v234 >= 0x80)
          v237 = 2;
        if (v234 < 0x200000)
          v235 = 3;
        if (v234 >= 0x4000)
          v238 = v235;
        else
          v238 = v237;
        v430 = v234 >> 7;
        break;
      case 13:
        v247 = *this;
        if (**this >= 1)
        {
          v248 = 0;
          v249 = 8 * a2;
          v250 = (8 * a2) | 0x80;
          v251 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v247 = *this;
            }
            v252 = *(_DWORD *)google::protobuf::RepeatedField<unsigned int>::Get(v247, v248);
            if (v249 > 0x7F)
            {
              *v5 = v250;
              if (v249 >= 0x4000)
              {
                v253 = v5 + 2;
                v254 = v251;
                do
                {
                  *(v253 - 1) = v254 | 0x80;
                  v255 = v254 >> 7;
                  ++v253;
                  v256 = v254 >> 14;
                  v254 >>= 7;
                }
                while (v256);
                *(v253 - 1) = v255;
              }
              else
              {
                v5[1] = v249 >> 7;
                v253 = v5 + 2;
              }
            }
            else
            {
              v253 = v5 + 1;
              *v5 = v249;
            }
            if (v252 > 0x7F)
            {
              *v253 = v252 | 0x80;
              v257 = v252 >> 7;
              if (v252 >> 14)
              {
                v5 = v253 + 2;
                do
                {
                  *(v5 - 1) = v257 | 0x80;
                  v258 = v257 >> 7;
                  ++v5;
                  v259 = v257 >> 14;
                  v257 >>= 7;
                }
                while (v259);
                *(v5 - 1) = v258;
              }
              else
              {
                v253[1] = v257;
                v5 = v253 + 2;
              }
            }
            else
            {
              *v253 = v252;
              v5 = v253 + 1;
            }
            ++v248;
            v247 = *this;
          }
          while (v248 < **this);
        }
        return (unsigned __int8 *)v5;
      case 14:
        v260 = *this;
        if (**this >= 1)
        {
          v261 = 0;
          v262 = 8 * a2;
          v263 = (8 * a2) | 0x80;
          v264 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v260 = *this;
            }
            v265 = *(int *)google::protobuf::RepeatedField<int>::Get(v260, v261);
            if (v262 > 0x7F)
            {
              *v5 = v263;
              if (v262 >= 0x4000)
              {
                v266 = v5 + 2;
                v267 = v264;
                do
                {
                  *(v266 - 1) = v267 | 0x80;
                  v268 = v267 >> 7;
                  ++v266;
                  v269 = v267 >> 14;
                  v267 >>= 7;
                }
                while (v269);
                *(v266 - 1) = v268;
              }
              else
              {
                v5[1] = v262 >> 7;
                v266 = v5 + 2;
              }
            }
            else
            {
              v266 = v5 + 1;
              *v5 = v262;
            }
            if (v265 > 0x7F)
            {
              *v266 = v265 | 0x80;
              v270 = v265 >> 7;
              if (v265 >> 14)
              {
                v5 = v266 + 2;
                do
                {
                  *(v5 - 1) = v270 | 0x80;
                  v271 = v270 >> 7;
                  ++v5;
                  v272 = v270 >> 14;
                  v270 >>= 7;
                }
                while (v272);
                *(v5 - 1) = v271;
              }
              else
              {
                v266[1] = v270;
                v5 = v266 + 2;
              }
            }
            else
            {
              *v266 = v265;
              v5 = v266 + 1;
            }
            ++v261;
            v260 = *this;
          }
          while (v261 < **this);
        }
        return (unsigned __int8 *)v5;
      case 15:
        v273 = *this;
        if (**this >= 1)
        {
          v274 = 0;
          v275 = (8 * a2) | 5;
          v276 = (a2 >> 4) & 0x1FFFFFF;
          v277 = (8 * a2) >> 7;
          v278 = (8 * a2) | 0x85;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v273 = *this;
            }
            v279 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v273, v274);
            if (v275 > 0x7F)
            {
              *v5 = v278;
              if (v275 >= 0x4000)
              {
                v280 = v5 + 2;
                v281 = v276;
                do
                {
                  *((_BYTE *)v280 - 1) = v281 | 0x80;
                  v282 = v281 >> 7;
                  v280 = (_DWORD *)((char *)v280 + 1);
                  v283 = v281 >> 14;
                  v281 >>= 7;
                }
                while (v283);
                *((_BYTE *)v280 - 1) = v282;
              }
              else
              {
                v5[1] = v277;
                v280 = v5 + 2;
              }
            }
            else
            {
              *v5 = v275;
              v280 = v5 + 1;
            }
            *v280 = v279;
            v5 = (char *)(v280 + 1);
            ++v274;
            v273 = *this;
          }
          while (v274 < **this);
        }
        return (unsigned __int8 *)v5;
      case 16:
        v284 = *this;
        if (**this >= 1)
        {
          v285 = 0;
          v286 = 8 * a2;
          v287 = (8 * a2) | 1;
          v288 = (8 * a2) | 0x81;
          v289 = (a2 >> 4) & 0x1FFFFFF;
          v290 = v286 >> 7;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v284 = *this;
            }
            v291 = *(_QWORD *)google::protobuf::RepeatedField<long long>::Get(v284, v285);
            if (v287 > 0x7F)
            {
              *v5 = v288;
              if (v287 >= 0x4000)
              {
                v292 = v5 + 2;
                v293 = v289;
                do
                {
                  *((_BYTE *)v292 - 1) = v293 | 0x80;
                  v294 = v293 >> 7;
                  v292 = (_QWORD *)((char *)v292 + 1);
                  v295 = v293 >> 14;
                  v293 >>= 7;
                }
                while (v295);
                *((_BYTE *)v292 - 1) = v294;
              }
              else
              {
                v5[1] = v290;
                v292 = v5 + 2;
              }
            }
            else
            {
              *v5 = v287;
              v292 = v5 + 1;
            }
            *v292 = v291;
            v5 = (char *)(v292 + 1);
            ++v285;
            v284 = *this;
          }
          while (v285 < **this);
        }
        return (unsigned __int8 *)v5;
      case 17:
        v296 = *this;
        if (**this >= 1)
        {
          v297 = 0;
          v298 = 8 * a2;
          v299 = (8 * a2) | 0x80;
          v300 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v296 = *this;
            }
            v301 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v296, v297);
            if (v298 > 0x7F)
            {
              *v5 = v299;
              if (v298 >= 0x4000)
              {
                v302 = v5 + 2;
                v303 = v300;
                do
                {
                  *(v302 - 1) = v303 | 0x80;
                  v304 = v303 >> 7;
                  ++v302;
                  v305 = v303 >> 14;
                  v303 >>= 7;
                }
                while (v305);
                *(v302 - 1) = v304;
              }
              else
              {
                v5[1] = v298 >> 7;
                v302 = v5 + 2;
              }
            }
            else
            {
              v302 = v5 + 1;
              *v5 = v298;
            }
            v306 = (2 * v301) ^ (v301 >> 31);
            if (v306 > 0x7F)
            {
              *v302 = v306 | 0x80;
              v307 = v306 >> 7;
              if (v306 >> 14)
              {
                v5 = v302 + 2;
                do
                {
                  *(v5 - 1) = v307 | 0x80;
                  v308 = v307 >> 7;
                  ++v5;
                  v309 = v307 >> 14;
                  v307 >>= 7;
                }
                while (v309);
                *(v5 - 1) = v308;
              }
              else
              {
                v302[1] = v307;
                v5 = v302 + 2;
              }
            }
            else
            {
              *v302 = v306;
              v5 = v302 + 1;
            }
            ++v297;
            v296 = *this;
          }
          while (v297 < **this);
        }
        return (unsigned __int8 *)v5;
      case 18:
        v310 = *this;
        if (**this >= 1)
        {
          v311 = 0;
          v312 = 8 * a2;
          v313 = (8 * a2) | 0x80;
          v314 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*(_QWORD *)a4 <= (unint64_t)v5)
            {
              v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
              v310 = *this;
            }
            v315 = *(_QWORD *)google::protobuf::RepeatedField<long long>::Get(v310, v311);
            if (v312 > 0x7F)
            {
              *v5 = v313;
              if (v312 >= 0x4000)
              {
                v316 = v5 + 2;
                v317 = v314;
                do
                {
                  *(v316 - 1) = v317 | 0x80;
                  v318 = v317 >> 7;
                  ++v316;
                  v319 = v317 >> 14;
                  v317 >>= 7;
                }
                while (v319);
                *(v316 - 1) = v318;
              }
              else
              {
                v5[1] = v312 >> 7;
                v316 = v5 + 2;
              }
            }
            else
            {
              v316 = v5 + 1;
              *v5 = v312;
            }
            v320 = (2 * v315) ^ (v315 >> 63);
            if (v320 > 0x7F)
            {
              *v316 = v320 | 0x80;
              v321 = v320 >> 7;
              if (v320 >> 14)
              {
                v5 = v316 + 2;
                do
                {
                  *(v5 - 1) = v321 | 0x80;
                  v322 = v321 >> 7;
                  ++v5;
                  v323 = v321 >> 14;
                  v321 >>= 7;
                }
                while (v323);
                *(v5 - 1) = v322;
              }
              else
              {
                v316[1] = v321;
                v5 = v316 + 2;
              }
            }
            else
            {
              *v316 = v320;
              v5 = v316 + 1;
            }
            ++v311;
            v310 = *this;
          }
          while (v311 < **this);
        }
        return (unsigned __int8 *)v5;
      default:
        return (unsigned __int8 *)v5;
    }
    while (1)
    {
      if (*(_QWORD *)a4 <= (unint64_t)v5)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
        v232 = (uint64_t)*this;
      }
      v239 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v232, v233);
      if (*(char *)(v239 + 23) < 0)
      {
        v240 = *(_QWORD *)(v239 + 8);
        if (v240 > 127)
          goto LABEL_399;
      }
      else
      {
        v240 = *(unsigned __int8 *)(v239 + 23);
      }
      if ((uint64_t)(*(_QWORD *)a4 + ~(unint64_t)&v5[v238] + 16) >= v240)
      {
        if (v236 > 0x7F)
        {
          *v5 = (8 * a2) | 0x82;
          if (v236 >= 0x4000)
          {
            v241 = v5 + 2;
            v242 = (a2 >> 4) & 0x1FFFFFF;
            do
            {
              *(v241 - 1) = v242 | 0x80;
              v243 = v242 >> 7;
              ++v241;
              v244 = v242 >> 14;
              v242 >>= 7;
            }
            while (v244);
            *(v241 - 1) = v243;
          }
          else
          {
            v5[1] = v430;
            v241 = v5 + 2;
          }
        }
        else
        {
          v241 = v5 + 1;
          *v5 = v236;
        }
        *v241 = v240;
        v245 = v241 + 1;
        if (*(char *)(v239 + 23) >= 0)
          v246 = (const void *)v239;
        else
          v246 = *(const void **)v239;
        memcpy(v245, v246, v240);
        v5 = &v245[v240];
        goto LABEL_397;
      }
LABEL_399:
      v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a4, a2, v239, v5);
LABEL_397:
      ++v233;
      v232 = (uint64_t)*this;
      if (v233 >= (*this)[2])
        return (unsigned __int8 *)v5;
    }
  }
  if ((*((_BYTE *)this + 10) & 1) != 0)
    return (unsigned __int8 *)v5;
  v10 = *((unsigned __int8 *)this + 8);
  if ((v10 - 19) <= 0xFFFFFFED)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    v11 = google::protobuf::internal::LogMessage::operator<<(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v431, (const char **)&v11->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v432[0].__r_.__value_.__l.__data_);
  }
  switch(v10)
  {
    case 1:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v12 = *this;
      v13 = (8 * a2) | 1;
      if (v13 <= 0x7F)
        goto LABEL_575;
      *v5 = (8 * a2) | 0x81;
      v14 = (8 * a2) >> 7;
      if (!(v13 >> 14))
        goto LABEL_602;
      v15 = (int **)(v5 + 2);
      do
      {
        *((_BYTE *)v15 - 1) = v14 | 0x80;
        v16 = v14 >> 7;
        v15 = (int **)((char *)v15 + 1);
        v17 = v14 >> 14;
        v14 >>= 7;
      }
      while (v17);
      goto LABEL_693;
    case 2:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v324 = *(_DWORD *)this;
      v325 = (8 * a2) | 5;
      if (v325 <= 0x7F)
        goto LABEL_571;
      *v5 = (8 * a2) | 0x85;
      v326 = (8 * a2) >> 7;
      if (!(v325 >> 14))
        goto LABEL_600;
      v327 = (unsigned int *)(v5 + 2);
      do
      {
        *((_BYTE *)v327 - 1) = v326 | 0x80;
        v328 = v326 >> 7;
        v327 = (unsigned int *)((char *)v327 + 1);
        v329 = v326 >> 14;
        v326 >>= 7;
      }
      while (v329);
      goto LABEL_689;
    case 3:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v330 = (unint64_t)*this;
      v331 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v331 | 0x80;
        v355 = v331 >> 7;
        if (v331 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v355 | 0x80;
            v380 = v355 >> 7;
            ++v332;
            v381 = v355 >> 14;
            v355 >>= 7;
          }
          while (v381);
          *(v332 - 1) = v380;
        }
        else
        {
          v5[1] = v355;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v331;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F)
        goto LABEL_684;
      *v332 = v330 | 0x80;
      v382 = v330 >> 7;
      if (!(v330 >> 14))
        goto LABEL_686;
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        v383 = v382 >> 7;
        ++v5;
        v384 = v382 >> 14;
        v382 >>= 7;
      }
      while (v384);
      goto LABEL_718;
    case 4:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v330 = (unint64_t)*this;
      v333 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v333 | 0x80;
        v356 = v333 >> 7;
        if (v333 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v356 | 0x80;
            v385 = v356 >> 7;
            ++v332;
            v386 = v356 >> 14;
            v356 >>= 7;
          }
          while (v386);
          *(v332 - 1) = v385;
        }
        else
        {
          v5[1] = v356;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v333;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F)
        goto LABEL_684;
      *v332 = v330 | 0x80;
      v382 = v330 >> 7;
      if (!(v330 >> 14))
        goto LABEL_686;
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        v383 = v382 >> 7;
        ++v5;
        v387 = v382 >> 14;
        v382 >>= 7;
      }
      while (v387);
      goto LABEL_718;
    case 5:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v330 = *(int *)this;
      v334 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v334 | 0x80;
        v357 = v334 >> 7;
        if (v334 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v357 | 0x80;
            v388 = v357 >> 7;
            ++v332;
            v389 = v357 >> 14;
            v357 >>= 7;
          }
          while (v389);
          *(v332 - 1) = v388;
        }
        else
        {
          v5[1] = v357;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v334;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F)
        goto LABEL_684;
      *v332 = v330 | 0x80;
      v382 = v330 >> 7;
      if (!(v330 >> 14))
        goto LABEL_686;
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        v383 = v382 >> 7;
        ++v5;
        v390 = v382 >> 14;
        v382 >>= 7;
      }
      while (v390);
      goto LABEL_718;
    case 6:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v12 = *this;
      v13 = (8 * a2) | 1;
      if (v13 <= 0x7F)
        goto LABEL_575;
      *v5 = (8 * a2) | 0x81;
      v14 = (8 * a2) >> 7;
      if (!(v13 >> 14))
        goto LABEL_602;
      v15 = (int **)(v5 + 2);
      do
      {
        *((_BYTE *)v15 - 1) = v14 | 0x80;
        v16 = v14 >> 7;
        v15 = (int **)((char *)v15 + 1);
        v335 = v14 >> 14;
        v14 >>= 7;
      }
      while (v335);
      goto LABEL_693;
    case 7:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v324 = *(_DWORD *)this;
      v325 = (8 * a2) | 5;
      if (v325 <= 0x7F)
        goto LABEL_571;
      *v5 = (8 * a2) | 0x85;
      v326 = (8 * a2) >> 7;
      if (!(v325 >> 14))
        goto LABEL_600;
      v327 = (unsigned int *)(v5 + 2);
      do
      {
        *((_BYTE *)v327 - 1) = v326 | 0x80;
        v328 = v326 >> 7;
        v327 = (unsigned int *)((char *)v327 + 1);
        v336 = v326 >> 14;
        v326 >>= 7;
      }
      while (v336);
      goto LABEL_689;
    case 8:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      LOBYTE(v337) = *(_BYTE *)this;
      v338 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v338 | 0x80;
        v358 = v338 >> 7;
        if (v338 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v358 | 0x80;
            v391 = v358 >> 7;
            ++v332;
            v392 = v358 >> 14;
            v358 >>= 7;
          }
          while (v392);
          *(v332 - 1) = v391;
        }
        else
        {
          v5[1] = v358;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v338;
        v332 = v5 + 1;
      }
      goto LABEL_677;
    case 9:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v339 = *this;
      if (*((char *)*this + 23) < 0)
      {
        v340 = *((_QWORD *)v339 + 1);
        if (v340 > 127)
          return google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a4, a2, (uint64_t)v339, v5);
      }
      else
      {
        v340 = *((unsigned __int8 *)*this + 23);
      }
      v364 = 8 * a2;
      v365 = 1;
      v366 = 2;
      v367 = 3;
      v368 = 4;
      if ((8 * a2) >> 28)
        v368 = 5;
      if (v364 >= 0x200000)
        v367 = v368;
      if (v364 >= 0x4000)
        v366 = v367;
      if (v364 >= 0x80)
        v365 = v366;
      if ((uint64_t)(*(_QWORD *)a4 + ~(unint64_t)&v5[v365] + 16) < v340)
        return google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a4, a2, (uint64_t)v339, v5);
      v369 = v364 | 2;
      if ((v364 | 2) <= 0x7F)
        goto LABEL_633;
      *v5 = v364 | 0x82;
      v370 = v364 >> 7;
      if (!(v369 >> 14))
        goto LABEL_635;
      v371 = v5 + 2;
      do
      {
        *(v371 - 1) = v370 | 0x80;
        v372 = v370 >> 7;
        ++v371;
        v373 = v370 >> 14;
        v370 >>= 7;
      }
      while (v373);
      goto LABEL_727;
    case 10:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v341 = *this;
      v342 = 8 * a2;
      v343 = (8 * a2) | 3;
      v344 = (8 * a2) >> 7;
      if (v343 > 0x7F)
      {
        *v5 = (8 * a2) | 0x83;
        if (v343 >> 14)
        {
          v345 = v5 + 2;
          v393 = v342 >> 7;
          do
          {
            *(v345 - 1) = v393 | 0x80;
            v394 = v393 >> 7;
            ++v345;
            v395 = v393 >> 14;
            v393 >>= 7;
          }
          while (v395);
          *(v345 - 1) = v394;
        }
        else
        {
          v5[1] = v344;
          v345 = v5 + 2;
        }
      }
      else
      {
        *v5 = v343;
        v345 = v5 + 1;
      }
      v332 = (char *)(*(uint64_t (**)(int *, char *, google::protobuf::io::EpsCopyOutputStream *))(*(_QWORD *)v341 + 96))(v341, v345, a4);
      if (*(_QWORD *)a4 <= (unint64_t)v332)
        v332 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v332);
      v337 = v342 | 4;
      if ((v342 | 4) <= 0x7F)
        goto LABEL_677;
      *v332 = v342 | 0x84;
      if (!(v337 >> 14))
      {
        v332[1] = v344;
        return (unsigned __int8 *)(v332 + 2);
      }
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v344 | 0x80;
        v411 = v344 >> 7;
        ++v5;
        v412 = v344 >> 14;
        v344 >>= 7;
      }
      while (v412);
      goto LABEL_715;
    case 11:
      if ((*((_BYTE *)this + 10) & 0x10) != 0)
        return (unsigned __int8 *)(*(uint64_t (**)(int *, uint64_t, char *, google::protobuf::io::EpsCopyOutputStream *))(*(_QWORD *)*this + 136))(*this, a2, v5, a4);
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v346 = *this;
      v347 = (8 * a2) | 2;
      if (v347 > 0x7F)
      {
        *v5 = (8 * a2) | 0x82;
        v379 = (8 * a2) >> 7;
        if (v347 >> 14)
        {
          v348 = v5 + 2;
          do
          {
            *(v348 - 1) = v379 | 0x80;
            v421 = v379 >> 7;
            ++v348;
            v422 = v379 >> 14;
            v379 >>= 7;
          }
          while (v422);
          *(v348 - 1) = v421;
        }
        else
        {
          v5[1] = v379;
          v348 = v5 + 2;
        }
      }
      else
      {
        *v5 = v347;
        v348 = v5 + 1;
      }
      v423 = (*(uint64_t (**)(int *))(*(_QWORD *)v346 + 80))(v346);
      if (v423 > 0x7F)
      {
        *v348 = v423 | 0x80;
        v425 = v423 >> 7;
        if (v423 >> 14)
        {
          v424 = v348 + 2;
          do
          {
            *(v424 - 1) = v425 | 0x80;
            v426 = v425 >> 7;
            ++v424;
            v427 = v425 >> 14;
            v425 >>= 7;
          }
          while (v427);
          *(v424 - 1) = v426;
        }
        else
        {
          v348[1] = v425;
          v424 = v348 + 2;
        }
      }
      else
      {
        *v348 = v423;
        v424 = v348 + 1;
      }
      return (unsigned __int8 *)(*(uint64_t (**)(int *, _BYTE *, google::protobuf::io::EpsCopyOutputStream *))(*(_QWORD *)v346 + 96))(v346, v424, a4);
    case 12:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v339 = *this;
      if (*((char *)*this + 23) < 0)
      {
        v340 = *((_QWORD *)v339 + 1);
        if (v340 > 127)
          return google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a4, a2, (uint64_t)v339, v5);
      }
      else
      {
        v340 = *((unsigned __int8 *)*this + 23);
      }
      v374 = 8 * a2;
      v375 = 1;
      v376 = 2;
      v377 = 3;
      v378 = 4;
      if ((8 * a2) >> 28)
        v378 = 5;
      if (v374 >= 0x200000)
        v377 = v378;
      if (v374 >= 0x4000)
        v376 = v377;
      if (v374 >= 0x80)
        v375 = v376;
      if ((uint64_t)(*(_QWORD *)a4 + ~(unint64_t)&v5[v375] + 16) < v340)
        return google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a4, a2, (uint64_t)v339, v5);
      v369 = v374 | 2;
      if ((v374 | 2) > 0x7F)
      {
        *v5 = v374 | 0x82;
        v370 = v374 >> 7;
        if (v369 >> 14)
        {
          v371 = v5 + 2;
          do
          {
            *(v371 - 1) = v370 | 0x80;
            v372 = v370 >> 7;
            ++v371;
            v419 = v370 >> 14;
            v370 >>= 7;
          }
          while (v419);
LABEL_727:
          *(v371 - 1) = v372;
        }
        else
        {
LABEL_635:
          v5[1] = v370;
          v371 = v5 + 2;
        }
      }
      else
      {
LABEL_633:
        *v5 = v369;
        v371 = v5 + 1;
      }
      *v371 = v340;
      v420 = v371 + 1;
      if (*((char *)v339 + 23) < 0)
        v339 = *(int **)v339;
      memcpy(v420, v339, v340);
      return (unsigned __int8 *)&v420[v340];
    case 13:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v337 = *(_DWORD *)this;
      v349 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v349 | 0x80;
        v360 = v349 >> 7;
        if (v349 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v360 | 0x80;
            v396 = v360 >> 7;
            ++v332;
            v397 = v360 >> 14;
            v360 >>= 7;
          }
          while (v397);
          *(v332 - 1) = v396;
        }
        else
        {
          v5[1] = v360;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v349;
        v332 = v5 + 1;
      }
      if (v337 <= 0x7F)
      {
LABEL_677:
        *v332 = v337;
        return (unsigned __int8 *)(v332 + 1);
      }
      *v332 = v337 | 0x80;
      v398 = v337 >> 7;
      if (!(v337 >> 14))
      {
        v332[1] = v398;
        return (unsigned __int8 *)(v332 + 2);
      }
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v398 | 0x80;
        v411 = v398 >> 7;
        ++v5;
        v413 = v398 >> 14;
        v398 >>= 7;
      }
      while (v413);
LABEL_715:
      *(v5 - 1) = v411;
      return (unsigned __int8 *)v5;
    case 14:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v330 = *(int *)this;
      v350 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v350 | 0x80;
        v361 = v350 >> 7;
        if (v350 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v361 | 0x80;
            v399 = v361 >> 7;
            ++v332;
            v400 = v361 >> 14;
            v361 >>= 7;
          }
          while (v400);
          *(v332 - 1) = v399;
        }
        else
        {
          v5[1] = v361;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v350;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F)
      {
LABEL_684:
        *v332 = v330;
        return (unsigned __int8 *)(v332 + 1);
      }
      *v332 = v330 | 0x80;
      v382 = v330 >> 7;
      if (!(v330 >> 14))
      {
LABEL_686:
        v332[1] = v382;
        return (unsigned __int8 *)(v332 + 2);
      }
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        v383 = v382 >> 7;
        ++v5;
        v414 = v382 >> 14;
        v382 >>= 7;
      }
      while (v414);
LABEL_718:
      *(v5 - 1) = v383;
      return (unsigned __int8 *)v5;
    case 15:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v324 = *(_DWORD *)this;
      v325 = (8 * a2) | 5;
      if (v325 > 0x7F)
      {
        *v5 = (8 * a2) | 0x85;
        v326 = (8 * a2) >> 7;
        if (v325 >> 14)
        {
          v327 = (unsigned int *)(v5 + 2);
          do
          {
            *((_BYTE *)v327 - 1) = v326 | 0x80;
            v328 = v326 >> 7;
            v327 = (unsigned int *)((char *)v327 + 1);
            v401 = v326 >> 14;
            v326 >>= 7;
          }
          while (v401);
LABEL_689:
          *((_BYTE *)v327 - 1) = v328;
        }
        else
        {
LABEL_600:
          v5[1] = v326;
          v327 = (unsigned int *)(v5 + 2);
        }
      }
      else
      {
LABEL_571:
        *v5 = v325;
        v327 = (unsigned int *)(v5 + 1);
      }
      *v327 = v324;
      return (unsigned __int8 *)(v327 + 1);
    case 16:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v12 = *this;
      v13 = (8 * a2) | 1;
      if (v13 > 0x7F)
      {
        *v5 = (8 * a2) | 0x81;
        v14 = (8 * a2) >> 7;
        if (v13 >> 14)
        {
          v15 = (int **)(v5 + 2);
          do
          {
            *((_BYTE *)v15 - 1) = v14 | 0x80;
            v16 = v14 >> 7;
            v15 = (int **)((char *)v15 + 1);
            v402 = v14 >> 14;
            v14 >>= 7;
          }
          while (v402);
LABEL_693:
          *((_BYTE *)v15 - 1) = v16;
        }
        else
        {
LABEL_602:
          v5[1] = v14;
          v15 = (int **)(v5 + 2);
        }
      }
      else
      {
LABEL_575:
        *v5 = v13;
        v15 = (int **)(v5 + 1);
      }
      *v15 = v12;
      return (unsigned __int8 *)(v15 + 1);
    case 17:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v351 = *(_DWORD *)this;
      v352 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v352 | 0x80;
        v362 = v352 >> 7;
        if (v352 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v362 | 0x80;
            v403 = v362 >> 7;
            ++v332;
            v404 = v362 >> 14;
            v362 >>= 7;
          }
          while (v404);
          *(v332 - 1) = v403;
        }
        else
        {
          v5[1] = v362;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v352;
        v332 = v5 + 1;
      }
      v405 = (2 * v351) ^ (v351 >> 31);
      if (v405 <= 0x7F)
      {
        *v332 = v405;
        return (unsigned __int8 *)(v332 + 1);
      }
      *v332 = v405 | 0x80;
      v406 = v405 >> 7;
      if (!(v405 >> 14))
      {
        v332[1] = v406;
        return (unsigned __int8 *)(v332 + 2);
      }
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v406 | 0x80;
        v415 = v406 >> 7;
        ++v5;
        v416 = v406 >> 14;
        v406 >>= 7;
      }
      while (v416);
      *(v5 - 1) = v415;
      return (unsigned __int8 *)v5;
    case 18:
      if (*(_QWORD *)a4 <= (unint64_t)v5)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a4, v5);
      v353 = (uint64_t)*this;
      v354 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v354 | 0x80;
        v363 = v354 >> 7;
        if (v354 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v363 | 0x80;
            v407 = v363 >> 7;
            ++v332;
            v408 = v363 >> 14;
            v363 >>= 7;
          }
          while (v408);
          *(v332 - 1) = v407;
        }
        else
        {
          v5[1] = v363;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v354;
        v332 = v5 + 1;
      }
      v409 = (2 * v353) ^ (v353 >> 63);
      if (v409 > 0x7F)
      {
        *v332 = v409 | 0x80;
        v410 = v409 >> 7;
        if (v409 >> 14)
        {
          v5 = v332 + 2;
          do
          {
            *(v5 - 1) = v410 | 0x80;
            v417 = v410 >> 7;
            ++v5;
            v418 = v410 >> 14;
            v410 >>= 7;
          }
          while (v418);
          *(v5 - 1) = v417;
        }
        else
        {
          v332[1] = v410;
          return (unsigned __int8 *)(v332 + 2);
        }
      }
      else
      {
        *v332 = v409;
        return (unsigned __int8 *)(v332 + 1);
      }
      return (unsigned __int8 *)v5;
    default:
      return (unsigned __int8 *)v5;
  }
}

void sub_191D35028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::ByteSize(google::protobuf::internal::ExtensionSet *this)
{
  int *v1;
  uint64_t v2;
  int *v3;
  int **v4;
  int v5;
  int *v6;
  int *v7;
  int *v8;
  unint64_t v9;
  int *v10;
  int *v11;
  BOOL v12;

  v1 = (int *)*((_QWORD *)this + 2);
  if (*((unsigned __int16 *)this + 4) < 0x101u)
  {
    if (*((_WORD *)this + 5))
    {
      v2 = 0;
      v3 = &v1[8 * *((unsigned __int16 *)this + 5)];
      do
      {
        v4 = (int **)(v1 + 2);
        v5 = *v1;
        v1 += 8;
        v2 += google::protobuf::internal::ExtensionSet::Extension::ByteSize(v4, v5);
      }
      while (v1 != v3);
      return v2;
    }
    return 0;
  }
  v8 = *(int **)v1;
  v6 = v1 + 2;
  v7 = v8;
  if (v8 == v6)
    return 0;
  v2 = 0;
  do
  {
    v9 = google::protobuf::internal::ExtensionSet::Extension::ByteSize((int **)v7 + 5, v7[8]);
    v10 = (int *)*((_QWORD *)v7 + 1);
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = *(int **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (int *)*((_QWORD *)v7 + 2);
        v12 = *(_QWORD *)v11 == (_QWORD)v7;
        v7 = v11;
      }
      while (!v12);
    }
    v2 += v9;
    v7 = v11;
  }
  while (v11 != v6);
  return v2;
}

unint64_t google::protobuf::internal::ExtensionSet::Extension::ByteSize(int **this, int a2)
{
  int v4;
  unsigned __int8 v5;
  std::string *v6;
  std::string *v7;
  unint64_t v8;
  int v9;
  unsigned __int8 v10;
  std::string *v11;
  int v12;
  std::string *v13;
  int v14;
  char v15;
  std::string *v16;
  unint64_t v17;
  unsigned int v18;
  char v19;
  std::string *v20;
  uint64_t v21;
  int *v22;
  int v23;
  int *v24;
  int v25;
  int *v26;
  int *v27;
  int v28;
  int *v29;
  int v30;
  int *v31;
  int v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  int v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  int v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  int v51;
  int v52;
  int *v53;
  int v54;
  int v55;
  int *v56;
  int v57;
  int v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  int v82;
  int v83;
  int *v84;
  int v85;
  int v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  int v91;
  int v92;
  int *v93;
  int *v94;
  int v95;
  int v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t (*v99)(void);
  int v100;
  uint64_t v101;
  char v102;
  std::string v103[2];

  if (*((_BYTE *)this + 9))
  {
    v4 = *((unsigned __int8 *)this + 8);
    v5 = v4 - 19;
    if (*((_BYTE *)this + 11))
    {
      if ((v4 - 19) <= 0xEDu)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        v6 = google::protobuf::internal::LogMessage::operator<<(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v102, (const char **)&v6->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v103[0].__r_.__value_.__l.__data_);
      }
      switch(v4)
      {
        case 1:
        case 6:
        case 16:
          v21 = 8 * **this;
          goto LABEL_63;
        case 2:
        case 7:
        case 15:
          v21 = 4 * **this;
          goto LABEL_63;
        case 3:
          v27 = *this;
          if (**this < 1)
            goto LABEL_7;
          v21 = 0;
          v28 = 0;
          do
          {
            v21 += (9 * (__clz(*(_QWORD *)google::protobuf::RepeatedField<long long>::Get(v27, v28++) | 1) ^ 0x3F) + 73) >> 6;
            v27 = *this;
          }
          while (v28 < **this);
          goto LABEL_63;
        case 4:
          v29 = *this;
          if (**this < 1)
            goto LABEL_7;
          v21 = 0;
          v30 = 0;
          do
          {
            v21 += (9
                  * (__clz(*(_QWORD *)google::protobuf::RepeatedField<unsigned long long>::Get(v29, v30++) | 1) ^ 0x3F)
                  + 73) >> 6;
            v29 = *this;
          }
          while (v30 < **this);
          goto LABEL_63;
        case 5:
          v31 = *this;
          if (**this < 1)
            goto LABEL_7;
          v21 = 0;
          v32 = 0;
          do
          {
            v33 = (int *)google::protobuf::RepeatedField<int>::Get(v31, v32);
            v34 = (9 * (__clz(*v33 | 1) ^ 0x1F) + 73) >> 6;
            if (*v33 >= 0)
              v35 = v34;
            else
              v35 = 10;
            v21 += v35;
            ++v32;
            v31 = *this;
          }
          while (v32 < **this);
          goto LABEL_63;
        case 8:
          v21 = **this;
          goto LABEL_63;
        case 9:
        case 10:
        case 11:
        case 12:
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1599);
          v7 = google::protobuf::internal::LogMessage::operator<<(v103, "Non-primitive types can't be packed.");
          google::protobuf::internal::LogFinisher::operator=((int)&v102, (const char **)&v7->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&v103[0].__r_.__value_.__l.__data_);
          goto LABEL_7;
        case 13:
          v22 = *this;
          if (**this < 1)
            goto LABEL_7;
          v21 = 0;
          v23 = 0;
          do
          {
            v21 += (9 * (__clz(*(_DWORD *)google::protobuf::RepeatedField<unsigned int>::Get(v22, v23++) | 1) ^ 0x1F)
                  + 73) >> 6;
            v22 = *this;
          }
          while (v23 < **this);
          goto LABEL_63;
        case 14:
          v36 = *this;
          if (**this < 1)
            goto LABEL_7;
          v21 = 0;
          v37 = 0;
          do
          {
            v38 = (int *)google::protobuf::RepeatedField<int>::Get(v36, v37);
            v39 = (9 * (__clz(*v38 | 1) ^ 0x1F) + 73) >> 6;
            if (*v38 >= 0)
              v40 = v39;
            else
              v40 = 10;
            v21 += v40;
            ++v37;
            v36 = *this;
          }
          while (v37 < **this);
          goto LABEL_63;
        case 17:
          v24 = *this;
          if (**this < 1)
            goto LABEL_7;
          v21 = 0;
          v25 = 0;
          do
          {
            v26 = (int *)google::protobuf::RepeatedField<int>::Get(v24, v25);
            v21 += (9 * (__clz((2 * *v26) ^ (*v26 >> 31) | 1) ^ 0x1F) + 73) >> 6;
            ++v25;
            v24 = *this;
          }
          while (v25 < **this);
          goto LABEL_63;
        case 18:
          v41 = *this;
          if (**this < 1)
            goto LABEL_7;
          v21 = 0;
          v42 = 0;
          do
          {
            v43 = (uint64_t *)google::protobuf::RepeatedField<long long>::Get(v41, v42);
            v21 += (9 * (__clz((2 * *v43) ^ (*v43 >> 63) | 1) ^ 0x3F) + 73) >> 6;
            ++v42;
            v41 = *this;
          }
          while (v42 < **this);
LABEL_63:
          *((_DWORD *)this + 3) = v21;
          v44 = v21 + ((9 * (__clz((8 * a2) | 3) ^ 0x1F) + 73) >> 6) + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6);
          if (v21)
            v8 = v44;
          else
            v8 = 0;
          break;
        default:
LABEL_7:
          v8 = 0;
          *((_DWORD *)this + 3) = 0;
          break;
      }
    }
    else
    {
      if ((v4 - 19) > 0xEDu)
      {
        v14 = *((unsigned __int8 *)this + 8);
      }
      else
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        v13 = google::protobuf::internal::LogMessage::operator<<(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v102, (const char **)&v13->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v103[0].__r_.__value_.__l.__data_);
        v14 = *((unsigned __int8 *)this + 8);
        v5 = v14 - 19;
      }
      v15 = v4 == 10;
      if (v5 <= 0xEDu)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        v16 = google::protobuf::internal::LogMessage::operator<<(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v102, (const char **)&v16->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v103[0].__r_.__value_.__l.__data_);
      }
      v17 = (unint64_t)((9 * (__clz((8 * a2) | 1) ^ 0x1F) + 73) >> 6) << v15;
      switch(v14)
      {
        case 1:
        case 6:
        case 16:
          v18 = v17 + 8;
          goto LABEL_27;
        case 2:
        case 7:
        case 15:
          v18 = v17 + 4;
LABEL_27:
          v8 = v18 * (unint64_t)**this;
          break;
        case 3:
          v50 = *this;
          v51 = **this;
          v8 = v17 * (unint64_t)v51;
          if (v51 >= 1)
          {
            v52 = 0;
            do
            {
              v8 += (9 * (__clz(*(_QWORD *)google::protobuf::RepeatedField<long long>::Get(v50, v52++) | 1) ^ 0x3F)
                   + 73) >> 6;
              v50 = *this;
            }
            while (v52 < **this);
          }
          break;
        case 4:
          v53 = *this;
          v54 = **this;
          v8 = v17 * (unint64_t)v54;
          if (v54 >= 1)
          {
            v55 = 0;
            do
            {
              v8 += (9
                   * (__clz(*(_QWORD *)google::protobuf::RepeatedField<unsigned long long>::Get(v53, v55++) | 1) ^ 0x3F)
                   + 73) >> 6;
              v53 = *this;
            }
            while (v55 < **this);
          }
          break;
        case 5:
          v56 = *this;
          v57 = **this;
          v8 = v17 * (unint64_t)v57;
          if (v57 >= 1)
          {
            v58 = 0;
            do
            {
              v59 = (int *)google::protobuf::RepeatedField<int>::Get(v56, v58);
              v60 = (9 * (__clz(*v59 | 1) ^ 0x1F) + 73) >> 6;
              if (*v59 >= 0)
                v61 = v60;
              else
                v61 = 10;
              v8 += v61;
              ++v58;
              v56 = *this;
            }
            while (v58 < **this);
          }
          break;
        case 8:
          v8 = **this + **this * (unint64_t)v17;
          break;
        case 9:
          v62 = (uint64_t)*this;
          v63 = (*this)[2];
          v8 = v17 * (unint64_t)v63;
          if (v63 >= 1)
          {
            v64 = 0;
            do
            {
              v65 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v62, v64);
              v66 = *(unsigned __int8 *)(v65 + 23);
              if ((v66 & 0x80u) != 0)
                v66 = *(_QWORD *)(v65 + 8);
              v8 += v66 + ((9 * (__clz(v66 | 1) ^ 0x1F) + 73) >> 6);
              ++v64;
              v62 = (uint64_t)*this;
            }
            while (v64 < (*this)[2]);
          }
          break;
        case 10:
          v67 = (uint64_t)*this;
          v68 = (*this)[2];
          v8 = v17 * (unint64_t)v68;
          if (v68 >= 1)
          {
            v69 = 0;
            do
            {
              v70 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(v67, v69);
              v8 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 72))(v70);
              ++v69;
              v67 = (uint64_t)*this;
            }
            while (v69 < (*this)[2]);
          }
          break;
        case 11:
          v71 = (uint64_t)*this;
          v72 = (*this)[2];
          v8 = v17 * (unint64_t)v72;
          if (v72 >= 1)
          {
            v73 = 0;
            do
            {
              v74 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(v71, v73);
              v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 72))(v74);
              v8 += v75 + ((9 * (__clz(v75 | 1) ^ 0x1F) + 73) >> 6);
              ++v73;
              v71 = (uint64_t)*this;
            }
            while (v73 < (*this)[2]);
          }
          break;
        case 12:
          v76 = (uint64_t)*this;
          v77 = (*this)[2];
          v8 = v17 * (unint64_t)v77;
          if (v77 >= 1)
          {
            v78 = 0;
            do
            {
              v79 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v76, v78);
              v80 = *(unsigned __int8 *)(v79 + 23);
              if ((v80 & 0x80u) != 0)
                v80 = *(_QWORD *)(v79 + 8);
              v8 += v80 + ((9 * (__clz(v80 | 1) ^ 0x1F) + 73) >> 6);
              ++v78;
              v76 = (uint64_t)*this;
            }
            while (v78 < (*this)[2]);
          }
          break;
        case 13:
          v81 = *this;
          v82 = **this;
          v8 = v17 * (unint64_t)v82;
          if (v82 >= 1)
          {
            v83 = 0;
            do
            {
              v8 += (9 * (__clz(*(_DWORD *)google::protobuf::RepeatedField<unsigned int>::Get(v81, v83++) | 1) ^ 0x1F)
                   + 73) >> 6;
              v81 = *this;
            }
            while (v83 < **this);
          }
          break;
        case 14:
          v84 = *this;
          v85 = **this;
          v8 = v17 * (unint64_t)v85;
          if (v85 >= 1)
          {
            v86 = 0;
            do
            {
              v87 = (int *)google::protobuf::RepeatedField<int>::Get(v84, v86);
              v88 = (9 * (__clz(*v87 | 1) ^ 0x1F) + 73) >> 6;
              if (*v87 >= 0)
                v89 = v88;
              else
                v89 = 10;
              v8 += v89;
              ++v86;
              v84 = *this;
            }
            while (v86 < **this);
          }
          break;
        case 17:
          v90 = *this;
          v91 = **this;
          v8 = v17 * (unint64_t)v91;
          if (v91 >= 1)
          {
            v92 = 0;
            do
            {
              v93 = (int *)google::protobuf::RepeatedField<int>::Get(v90, v92);
              v8 += (9 * (__clz((2 * *v93) ^ (*v93 >> 31) | 1) ^ 0x1F) + 73) >> 6;
              ++v92;
              v90 = *this;
            }
            while (v92 < **this);
          }
          break;
        case 18:
          v94 = *this;
          v95 = **this;
          v8 = v17 * (unint64_t)v95;
          if (v95 >= 1)
          {
            v96 = 0;
            do
            {
              v97 = (uint64_t *)google::protobuf::RepeatedField<long long>::Get(v94, v96);
              v8 += (9 * (__clz((2 * *v97) ^ (*v97 >> 63) | 1) ^ 0x3F) + 73) >> 6;
              ++v96;
              v94 = *this;
            }
            while (v96 < **this);
          }
          break;
        default:
          return 0;
      }
    }
  }
  else if ((*((_BYTE *)this + 10) & 1) != 0)
  {
    return 0;
  }
  else
  {
    v9 = *((unsigned __int8 *)this + 8);
    v10 = v9 - 19;
    if ((v9 - 19) > 0xEDu)
    {
      v12 = *((unsigned __int8 *)this + 8);
    }
    else
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v102, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v103[0].__r_.__value_.__l.__data_);
      v12 = *((unsigned __int8 *)this + 8);
      v10 = v12 - 19;
    }
    v19 = v9 == 10;
    if (v10 <= 0xEDu)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v102, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v103[0].__r_.__value_.__l.__data_);
    }
    v8 = (unint64_t)((9 * (__clz((8 * a2) | 1) ^ 0x1F) + 73) >> 6) << v19;
    switch(v12)
    {
      case 1:
      case 6:
      case 16:
        v8 += 8;
        return v8;
      case 2:
      case 7:
      case 15:
        v8 += 4;
        return v8;
      case 3:
      case 4:
        v46 = (uint64_t)*this;
        goto LABEL_138;
      case 5:
      case 14:
        v47 = (9 * (__clz(*(_DWORD *)this | 1) ^ 0x1F) + 73) >> 6;
        if (*(int *)this >= 0)
          v48 = v47;
        else
          v48 = 10;
        v8 += v48;
        return v8;
      case 8:
        return ++v8;
      case 9:
      case 12:
        v49 = *((_QWORD *)*this + 1);
        if (*((char *)*this + 23) >= 0)
          v49 = *((unsigned __int8 *)*this + 23);
        v8 += v49 + ((9 * (__clz(v49 | 1) ^ 0x1F) + 73) >> 6);
        return v8;
      case 10:
        v8 += (*(uint64_t (**)(int *))(*(_QWORD *)*this + 72))(*this);
        return v8;
      case 11:
        v98 = *(_QWORD *)*this;
        if ((*((_BYTE *)this + 10) & 0x10) != 0)
          v99 = *(uint64_t (**)(void))(v98 + 88);
        else
          v99 = *(uint64_t (**)(void))(v98 + 72);
        v101 = v99();
        v8 += v101 + ((9 * (__clz(v101 | 1) ^ 0x1F) + 73) >> 6);
        return v8;
      case 13:
        v100 = *(_DWORD *)this;
        goto LABEL_136;
      case 17:
        v100 = (2 * *(_DWORD *)this) ^ (*(int *)this >> 31);
LABEL_136:
        v8 += (9 * (__clz(v100 | 1) ^ 0x1F) + 73) >> 6;
        break;
      case 18:
        v46 = (2 * (_QWORD)*this) ^ ((uint64_t)*this >> 63);
LABEL_138:
        v8 += (9 * (__clz(v46 | 1) ^ 0x3F) + 73) >> 6;
        break;
      default:
        return v8;
    }
  }
  return v8;
}

void sub_191D35C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::Extension::Free(google::protobuf::internal::RepeatedPtrFieldBase **this)
{
  uint64_t v2;
  std::string *v3;
  uint64_t v4;
  std::string *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  google::protobuf::internal::RepeatedPtrFieldBase *v9;
  char v10;
  std::string v11[2];

  v2 = *((unsigned __int8 *)this + 8);
  if (*((_BYTE *)this + 9))
  {
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v3 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v3->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    }
    switch(v2)
    {
      case 1:
        if (*this)
        {
          v4 = google::protobuf::RepeatedField<double>::~RepeatedField();
          goto LABEL_29;
        }
        break;
      case 2:
        if (*this)
        {
          v4 = google::protobuf::RepeatedField<float>::~RepeatedField();
          goto LABEL_29;
        }
        break;
      case 3:
      case 16:
      case 18:
        if (*this)
        {
          v4 = google::protobuf::RepeatedField<long long>::~RepeatedField();
          goto LABEL_29;
        }
        break;
      case 4:
      case 6:
        if (*this)
        {
          v4 = google::protobuf::RepeatedField<unsigned long long>::~RepeatedField();
          goto LABEL_29;
        }
        break;
      case 5:
      case 14:
      case 15:
      case 17:
        if (*this)
        {
          v4 = google::protobuf::RepeatedField<int>::~RepeatedField();
          goto LABEL_29;
        }
        break;
      case 7:
      case 13:
        if (*this)
        {
          v4 = google::protobuf::RepeatedField<unsigned int>::~RepeatedField();
          goto LABEL_29;
        }
        break;
      case 8:
        if (*this)
        {
          v4 = google::protobuf::RepeatedField<BOOL>::~RepeatedField();
LABEL_29:
          v8 = 0x1080C4057E67DB5;
          goto LABEL_35;
        }
        break;
      case 9:
      case 12:
        if (*this)
        {
          v4 = google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField();
          goto LABEL_34;
        }
        break;
      case 10:
      case 11:
        v9 = *this;
        if (v9)
        {
          google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(v9);
          google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(v9);
LABEL_34:
          v8 = 0x1020C4014030ADELL;
          goto LABEL_35;
        }
        break;
      default:
        return;
    }
  }
  else
  {
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v5 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    }
    v6 = google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v2];
    if (v6 == 10)
    {
      if (*this)
        (*(void (**)(google::protobuf::internal::RepeatedPtrFieldBase *))(*(_QWORD *)*this + 8))(*this);
    }
    else if (v6 == 9)
    {
      v7 = (uint64_t)*this;
      if (v7)
      {
        if (*(char *)(v7 + 23) < 0)
          operator delete(*(void **)v7);
        v4 = v7;
        v8 = 0x1012C40EC159624;
LABEL_35:
        MEMORY[0x19401E994](v4, v8);
      }
    }
  }
}

void sub_191D35EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GeneratedExtensionFinder::~GeneratedExtensionFinder(google::protobuf::internal::GeneratedExtensionFinder *this)
{
  JUMPOUT(0x19401E994);
}

void google::protobuf::internal::ExtensionSet::ForEach<std::__map_iterator<std::__tree_iterator<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::__tree_node<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,void *> *,long>>,google::protobuf::internal::ExtensionSet::~()::$_0>(google::protobuf::internal::RepeatedPtrFieldBase **a1, google::protobuf::internal::RepeatedPtrFieldBase ***a2)
{
  google::protobuf::internal::RepeatedPtrFieldBase **v3;
  google::protobuf::internal::RepeatedPtrFieldBase *v4;
  google::protobuf::internal::RepeatedPtrFieldBase ***v5;
  BOOL v6;

  if (a1 != (google::protobuf::internal::RepeatedPtrFieldBase **)a2)
  {
    v3 = a1;
    do
    {
      google::protobuf::internal::ExtensionSet::Extension::Free(v3 + 5);
      v4 = v3[1];
      if (v4)
      {
        do
        {
          v5 = (google::protobuf::internal::RepeatedPtrFieldBase ***)v4;
          v4 = *(google::protobuf::internal::RepeatedPtrFieldBase **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (google::protobuf::internal::RepeatedPtrFieldBase ***)v3[2];
          v6 = *v5 == v3;
          v3 = (google::protobuf::internal::RepeatedPtrFieldBase **)v5;
        }
        while (!v6);
      }
      v3 = (google::protobuf::internal::RepeatedPtrFieldBase **)v5;
    }
    while (v5 != a2);
  }
}

void google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>>(google::protobuf::internal::RepeatedPtrFieldBase *a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_191D36064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned int *google::protobuf::internal::RepeatedPtrFieldBase::AddAllocatedInternal<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(unsigned int *result, uint64_t a2)
{
  int *v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;

  v2 = (int *)*((_QWORD *)result + 2);
  if (!v2)
    return google::protobuf::internal::RepeatedPtrFieldBase::UnsafeArenaAddAllocated<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(result, a2);
  v3 = *v2;
  if ((int)v3 >= (int)result[3])
    return google::protobuf::internal::RepeatedPtrFieldBase::UnsafeArenaAddAllocated<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(result, a2);
  v4 = v2 + 2;
  v5 = (int)result[2];
  if ((int)v5 < (int)v3)
    *(_QWORD *)&v4[2 * v3] = *(_QWORD *)&v4[2 * v5];
  *(_QWORD *)&v4[2 * v5] = a2;
  result[2] = v5 + 1;
  ++**((_DWORD **)result + 2);
  return result;
}

unsigned int *google::protobuf::internal::RepeatedPtrFieldBase::UnsafeArenaAddAllocated<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(unsigned int *result, uint64_t a2)
{
  unsigned int *v3;
  int *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;

  v3 = result;
  v4 = (int *)*((_QWORD *)result + 2);
  if (!v4)
  {
    v5 = result[3];
    goto LABEL_11;
  }
  v5 = result[2];
  v6 = result[3];
  if (v5 == v6)
  {
LABEL_11:
    result = google::protobuf::internal::RepeatedPtrFieldBase::Reserve(result, v5 + 1);
    goto LABEL_12;
  }
  v7 = *v4;
  if ((_DWORD)v7 != v6)
  {
    if (v5 >= (int)v7)
    {
      v9 = v7 + 1;
      goto LABEL_13;
    }
    *(_QWORD *)&v4[2 * v7 + 2] = *(_QWORD *)&v4[2 * v5 + 2];
LABEL_12:
    v4 = (int *)*((_QWORD *)v3 + 2);
    v9 = *v4 + 1;
LABEL_13:
    *v4 = v9;
    goto LABEL_14;
  }
  result = *(unsigned int **)&v4[2 * v5 + 2];
  if (result)
    v8 = *(_QWORD *)v3 == 0;
  else
    v8 = 0;
  if (v8)
  {
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    v4 = (int *)*((_QWORD *)v3 + 2);
  }
LABEL_14:
  v10 = (int)v3[2];
  v3[2] = v10 + 1;
  *(_QWORD *)&v4[2 * v10 + 2] = a2;
  return result;
}

google::protobuf::internal::ExtensionSet *google::protobuf::internal::ExtensionSet::ForEach<std::__map_iterator<std::__tree_iterator<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::__tree_node<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,void *> *,long>>,google::protobuf::internal::ExtensionSet::MergeFrom(google::protobuf::internal::ExtensionSet const&)::$_0>(_QWORD *a1, _QWORD *a2, google::protobuf::internal::ExtensionSet *this)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      google::protobuf::internal::ExtensionSet::InternalExtensionMergeFrom(this, *((_DWORD *)v5 + 8), (const google::protobuf::internal::ExtensionSet::Extension *)(v5 + 5));
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != a2);
  }
  return this;
}

google::protobuf::internal::EpsCopyInputStream *google::protobuf::internal::EpsCopyInputStream::ReadString(uint64_t a1, std::string::value_type *__s, int a3, std::string *a4)
{
  uint64_t v6;

  if (*(_QWORD *)(a1 + 8) - (_QWORD)__s + 16 < a3)
    return google::protobuf::internal::EpsCopyInputStream::ReadStringFallback(a1, __s, a3, a4);
  v6 = a3;
  MEMORY[0x19401E658](a4, __s, a3);
  return (google::protobuf::internal::EpsCopyInputStream *)&__s[v6];
}

google::protobuf::internal *google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::PackedEnumParserArg<std::string>(void *,char const*,google::protobuf::internal::ParseContext *,BOOL (*)(void const*,int),void const*,google::protobuf::internal::InternalMetadata *,int)::{lambda(unsigned long long)#1}>(uint64_t a1, google::protobuf::internal *this, uint64_t a3)
{
  int v5;
  google::protobuf::internal *result;
  int v7;
  unint64_t v8;
  int v9;
  __int128 v10;
  signed int v11;
  std::string *v12;
  int v13;
  std::string *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  std::string *v18;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;
  char v23;
  _OWORD v24[2];
  uint64_t v25;
  std::string v26;
  __int16 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = (google::protobuf::internal *)google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = (google::protobuf::internal *)((char *)this + 1);
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v15 = (unint64_t)result + v5;
    v16 = *(_OWORD *)(a3 + 16);
    v19[0] = *(_OWORD *)a3;
    v19[1] = v16;
    v20 = *(_QWORD *)(a3 + 32);
    result = (google::protobuf::internal *)google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::PackedEnumParserArg<std::string>(void *,char const*,google::protobuf::internal::ParseContext *,BOOL (*)(void const*,int),void const*,google::protobuf::internal::InternalMetadata *,int)::{lambda(unsigned long long)#1}>(result, v15, (unsigned int **)v19);
    if ((google::protobuf::internal *)v15 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      v10 = *(_OWORD *)(a3 + 16);
      v24[0] = *(_OWORD *)a3;
      v24[1] = v10;
      v25 = *(_QWORD *)(a3 + 32);
      result = (google::protobuf::internal *)google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::PackedEnumParserArg<std::string>(void *,char const*,google::protobuf::internal::ParseContext *,BOOL (*)(void const*,int),void const*,google::protobuf::internal::InternalMetadata *,int)::{lambda(unsigned long long)#1}>(result, v8, (unsigned int **)v24);
      if (!result)
        break;
      v11 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v11 >= 0x11)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v12 = google::protobuf::internal::LogMessage::operator<<(&v26, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v12->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v26.__r_.__value_.__l.__data_);
      }
      v13 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v27 = 0;
        v26.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v22 = *(_QWORD *)(a3 + 32);
        v17 = *(_OWORD *)(a3 + 16);
        v21[0] = *(_OWORD *)a3;
        v21[1] = v17;
        v18 = (std::string *)google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::PackedEnumParserArg<std::string>(void *,char const*,google::protobuf::internal::ParseContext *,BOOL (*)(void const*,int),void const*,google::protobuf::internal::InternalMetadata *,int)::{lambda(unsigned long long)#1}>((google::protobuf::internal *)((char *)&v26 + v11), (unint64_t)&v26 + v13, (unsigned int **)v21);
        result = 0;
        if (v18 && v18 == (std::string *)((char *)&v26 + v13))
          return (google::protobuf::internal *)(*(_QWORD *)(a1 + 8) + v13);
        return result;
      }
      v5 = v5 - v9 - v11;
      if (v5 <= 0)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v14 = google::protobuf::internal::LogMessage::operator<<(&v26, "CHECK failed: (size) > (0): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v14->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v26.__r_.__value_.__l.__data_);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = google::protobuf::internal::EpsCopyInputStream::Next((google::protobuf::internal::EpsCopyInputStream *)a1);
      if (!result)
        return result;
      result = (google::protobuf::internal *)((char *)result + v11);
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_191D364A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  google::protobuf::internal::LogMessage::~LogMessage(&a27);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::PackedEnumParserArg<std::string>(void *,char const*,google::protobuf::internal::ParseContext *,BOOL (*)(void const*,int),void const*,google::protobuf::internal::InternalMetadata *,int)::{lambda(unsigned long long)#1}>(google::protobuf::internal *this, unint64_t a2, unsigned int **a3)
{
  unsigned __int8 *v3;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t *v13;
  std::string *v14;

  v3 = (unsigned __int8 *)this;
  if ((unint64_t)this < a2)
  {
    do
    {
      v6 = *v3;
      if ((char)*v3 < 0)
      {
        v7 = v6 + (v3[1] << 7);
        v6 = (v7 - 128);
        if ((char)v3[1] < 0)
        {
          v3 = (unsigned __int8 *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v3, (v7 - 128));
          if (!v3)
            return v3;
          v6 = v8;
        }
        else
        {
          v3 += 2;
        }
      }
      else
      {
        ++v3;
      }
      if (((unsigned int (*)(unsigned int *, unint64_t))a3[1])(a3[2], v6))
      {
        v9 = (int *)*a3;
        v10 = **a3;
        if ((_DWORD)v10 == (*a3)[1])
        {
          v11 = v10 + 1;
          google::protobuf::RepeatedField<int>::Reserve((int *)*a3, v10 + 1);
          *(_DWORD *)(google::protobuf::RepeatedField<int>::elements((uint64_t)v9) + 4 * v10) = v6;
        }
        else
        {
          *(_DWORD *)(google::protobuf::RepeatedField<int>::elements((uint64_t)*a3) + 4 * v10) = v6;
          v11 = v10 + 1;
        }
        *v9 = v11;
      }
      else
      {
        v12 = *((_DWORD *)a3 + 8);
        v13 = (uint64_t *)a3[3];
        if ((*v13 & 1) != 0)
          v14 = (std::string *)((*v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
        else
          v14 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>(v13);
        google::protobuf::internal::WriteVarint(v12, v6, v14);
      }
    }
    while ((unint64_t)v3 < a2);
  }
  return v3;
}

char *google::protobuf::internal::EpsCopyInputStream::InitFrom(uint64_t a1, char *__src, int64_t __n)
{
  char *v6;
  uint64_t v7;
  char *v8;

  *(_DWORD *)(a1 + 84) = 0;
  if (__n >= 17)
  {
    *(_DWORD *)(a1 + 28) = 16;
    v6 = &__src[__n - 16];
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = a1 + 40;
    if (*(_QWORD *)(a1 + 72) != 1)
      return __src;
    v7 = 2;
    v8 = __src;
    goto LABEL_6;
  }
  v8 = (char *)(a1 + 40);
  memcpy((void *)(a1 + 40), __src, __n);
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)a1 = &v8[__n];
  *(_QWORD *)(a1 + 8) = &v8[__n];
  *(_QWORD *)(a1 + 16) = 0;
  if (*(_QWORD *)(a1 + 72) == 1)
  {
    v7 = __src - v8;
LABEL_6:
    *(_QWORD *)(a1 + 72) = v7;
  }
  return v8;
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (uint64_t *)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_191D36740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(_QWORD *a1)
{
  unsigned int *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 2;
    v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
          (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t **std::__tree<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::__map_value_compare<int,std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::less<int>,true>,std::allocator<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>>>::__emplace_unique_key_args<int,std::pair<int const,google::protobuf::internal::ExtensionSet::Extension>>(uint64_t **a1, int *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;
  __int128 v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x40uLL);
    v11 = a3[1];
    *((_OWORD *)v10 + 2) = *a3;
    *((_OWORD *)v10 + 3) = v11;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void google::protobuf::internal::arena_destruct_object<std::map<int,google::protobuf::internal::ExtensionSet::Extension>>(uint64_t a1)
{
  std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::destroy(a1, *(_QWORD **)(a1 + 8));
}

uint64_t *std::__tree<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::__map_value_compare<int,std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::less<int>,true>,std::allocator<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>>>::__emplace_hint_unique_key_args<int,std::pair<int const,google::protobuf::internal::ExtensionSet::Extension>>(uint64_t **a1, uint64_t *a2, int *a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  __int128 v9;
  uint64_t v11;
  uint64_t *v12;

  v6 = std::__tree<std::__value_type<NLLanguageID,__CFString const*>,std::__map_value_compare<NLLanguageID,std::__value_type<NLLanguageID,__CFString const*>,std::less<NLLanguageID>,true>,std::allocator<std::__value_type<NLLanguageID,__CFString const*>>>::__find_equal<NLLanguageID>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x40uLL);
    v9 = a4[1];
    *((_OWORD *)v7 + 2) = *a4;
    *((_OWORD *)v7 + 3) = v9;
    std::__tree<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::__map_value_compare<CoreNLP::NLTagSchemeType,std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>,std::less<CoreNLP::NLTagSchemeType>,true>,std::allocator<std::__value_type<CoreNLP::NLTagSchemeType,std::pair<int,double>>>>::__insert_node_at(a1, (uint64_t)v12, v8, v7);
  }
  return v7;
}

void google::protobuf::internal::ExtensionSet::IsInitialized()
{
  __assert_rtn("flat_end", "extension_set.h", 829, "!is_large()");
}

uint64_t google::protobuf::internal::DestroyMessage(google::protobuf::internal *this, const void *a2)
{
  return (**(uint64_t (***)(google::protobuf::internal *))this)(this);
}

void google::protobuf::internal::DestroyString(void **this, const void *a2)
{
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void google::protobuf::internal::InitProtobufDefaultsSlow(google::protobuf::internal *this)
{
  unsigned __int8 v1;
  const void *v2;

  if ((v1 & 1) == 0)
  {
    {
      google::protobuf::internal::fixed_address_empty_string = 0;
      *(_QWORD *)algn_1EE21C718 = 0;
      qword_1EE21C720 = 0;
      google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyString, (void (*)(const void *))&google::protobuf::internal::fixed_address_empty_string, v2);
      atomic_store(1u, google::protobuf::internal::init_protobuf_defaults_state);
    }
  }
}

void sub_191D369CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::GenericSwap(google::protobuf::internal *this, google::protobuf::MessageLite *a2, google::protobuf::MessageLite *a3)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(google::protobuf::internal *, google::protobuf::MessageLite *, google::protobuf::MessageLite *))(*(_QWORD *)this + 24))(this, a2, a3);
  (*(void (**)(uint64_t, google::protobuf::internal *))(*(_QWORD *)v5 + 64))(v5, this);
  (*(void (**)(google::protobuf::internal *))(*(_QWORD *)this + 40))(this);
  (*(void (**)(google::protobuf::internal *, google::protobuf::MessageLite *))(*(_QWORD *)this + 64))(this, a2);
  (*(void (**)(google::protobuf::MessageLite *))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(google::protobuf::MessageLite *, uint64_t))(*(_QWORD *)a2 + 64))(a2, v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

void sub_191D36A80(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::InitSCCImpl(_DWORD *a1)
{
  unsigned __int8 v2;
  google::protobuf::internal *v3;
  uint64_t v4;
  std::string *v5;
  unsigned __int8 v6;
  char v7;
  std::string v8[2];

  if ((v2 & 1) == 0
  {
    __cxa_atexit((void (*)(void *))google::protobuf::internal::WrappedMutex::~WrappedMutex, &google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase *)::mu, &dword_191C5D000);
  }
  v3 = (google::protobuf::internal *)pthread_self();
  v4 = (uint64_t)v3;
  if (google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase *)::runner)
  {
    if (v3
      && v3 == (google::protobuf::internal *)google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase *)::runner)
    {
      goto LABEL_5;
    }
  }
  else if (!v3)
  {
LABEL_5:
    if (*a1 != 1)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/generated_message_util.cc", 785);
      v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (scc->visit_status.load(std::memory_order_relaxed)) == (SCCInfoBase::kRunning): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
    }
    return;
  }
  v6 = atomic_load(google::protobuf::internal::init_protobuf_defaults_state);
  if ((v6 & 1) == 0)
    google::protobuf::internal::InitProtobufDefaultsSlow(v3);
  std::mutex::lock(&google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase *)::mu);
  google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase *)::runner = v4;
  google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase *)::runner = 0;
  std::mutex::unlock(&google::protobuf::internal::InitSCCImpl(google::protobuf::internal::SCCInfoBase *)::mu);
}

void sub_191D36BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *google::protobuf::internal::`anonymous namespace'::InitSCC_DFS(_DWORD *result)
{
  uint64_t (**v1)(void);
  _DWORD *v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;

  if (*result == -1)
  {
    v1 = (uint64_t (**)(void))result;
    *result = 1;
    v2 = result + 6;
    v3 = result[1];
    if (v3 >= 1)
    {
      for (i = 0; i < v3; ++i)
      {
        if (*(_QWORD *)&v2[2 * i])
        {
          v3 = *((_DWORD *)v1 + 1);
        }
      }
    }
    v5 = v3;
    v6 = *((_DWORD *)v1 + 2);
    if (v6 >= 1)
    {
      v7 = 0;
      v8 = &v2[2 * v5];
      do
      {
        if (**(_QWORD **)&v8[2 * v7])
        {
          v6 = *((_DWORD *)v1 + 2);
        }
        ++v7;
      }
      while (v7 < v6);
    }
    result = (_DWORD *)v1[2]();
    atomic_store(0, (unsigned int *)v1);
  }
  return result;
}

uint64_t google::protobuf::internal::MergeFromImpl<false>(char *__src, int64_t __n, google::protobuf::MessageLite *a3, char a4)
{
  char *v6;
  BOOL v7;
  _BYTE v9[32];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0x7FFFFFFF00000000;
  v14 = google::protobuf::io::CodedInputStream::default_recursion_limit_;
  v15 = 0x80000000;
  v16 = 0;
  v17 = 0;
  v6 = google::protobuf::internal::EpsCopyInputStream::InitFrom((uint64_t)v9, __src, __n);
  if ((*(uint64_t (**)(google::protobuf::MessageLite *, char *, _BYTE *))(*(_QWORD *)a3 + 88))(a3, v6, v9))
    v7 = (_DWORD)v13 == 0;
  else
    v7 = 0;
  if (v7)
  {
    if ((a4 & 2) != 0
      || ((*(uint64_t (**)(google::protobuf::MessageLite *))(*(_QWORD *)a3 + 48))(a3) & 1) != 0)
    {
      return 1;
    }
    google::protobuf::MessageLite::LogInitializationErrorMessage(a3);
  }
  return 0;
}

_QWORD *google::protobuf::MessageLite::InitializationErrorString@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "(cannot determine missing fields for lite message)");
}

void google::protobuf::MessageLite::LogInitializationErrorMessage(google::protobuf::MessageLite *this)
{
  std::string *v2;
  char v3;
  std::string __p;
  std::string v5[2];

  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 133);
  v2 = google::protobuf::internal::LogMessage::operator<<(v5, (const std::string::value_type *)&__p);
  google::protobuf::internal::LogFinisher::operator=((int)&v3, (const char **)&v2->__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
}

void sub_191D36E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  if (a15 < 0)
    operator delete(__p);
  google::protobuf::internal::LogMessage::~LogMessage(&a16);
  _Unwind_Resume(a1);
}

void google::protobuf::`anonymous namespace'::InitializationErrorMessage(const std::string::value_type *this@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  const std::string::value_type *p_p;
  std::string::size_type v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  void *__p;
  std::string::size_type v12;
  unsigned __int8 v13;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a3, "Can't ");
  std::string::append(a3, this);
  std::string::append(a3, " message of type \"");
  (*(void (**)(void **__return_ptr, const char *))(*(_QWORD *)a2 + 16))(&__p, a2);
  if ((v13 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v13 & 0x80u) == 0)
    v8 = v13;
  else
    v8 = v12;
  std::string::append(a3, p_p, v8);
  if ((char)v13 < 0)
    operator delete(__p);
  std::string::append(a3, "\" because it is missing required fields: ");
  (*(void (**)(void **__return_ptr, const char *))(*(_QWORD *)a2 + 56))(&__p, a2);
  if ((v13 & 0x80u) == 0)
    v9 = (const std::string::value_type *)&__p;
  else
    v9 = (const std::string::value_type *)__p;
  if ((v13 & 0x80u) == 0)
    v10 = v13;
  else
    v10 = v12;
  std::string::append(a3, v9, v10);
  if ((char)v13 < 0)
    operator delete(__p);
}

void sub_191D36F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::MessageLite::ParseFromArray(google::protobuf::MessageLite *this, char *a2, unsigned int a3)
{
  int64_t v5;

  if ((a3 & 0x80000000) != 0)
    google::protobuf::MessageLite::ParseFromArray();
  v5 = a3;
  (*(void (**)(google::protobuf::MessageLite *))(*(_QWORD *)this + 40))(this);
  return google::protobuf::internal::MergeFromImpl<false>(a2, v5, this, 1);
}

BOOL google::protobuf::MessageLite::AppendToString(const char *a1, std::string *a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string __p;
  std::string v9[2];

  if (((*(uint64_t (**)(const char *))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 449);
    v4 = google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: IsInitialized(): ");
    v5 = google::protobuf::internal::LogMessage::operator<<(v4, (const std::string::value_type *)&__p);
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::MessageLite::AppendPartialToString((uint64_t)a1, a2);
}

void sub_191D37094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  if (a15 < 0)
    operator delete(__p);
  google::protobuf::internal::LogMessage::~LogMessage(&a16);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::MessageLite::AppendPartialToString(uint64_t a1, std::string *a2)
{
  std::string *v2;
  std::string::size_type size;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  char v14;
  std::string __p[2];
  std::string v16[2];
  uint64_t v17;
  __int16 v18;
  char v19;
  uint64_t v20;

  v2 = a2;
  v20 = *MEMORY[0x1E0C80C00];
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    size = a2->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = v5;
  v7 = v5 >> 31;
  if (v5 >> 31)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 457);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    v10 = google::protobuf::internal::LogMessage::operator<<(v16, (const std::string::value_type *)__p);
    v11 = google::protobuf::internal::LogMessage::operator<<(v10, " exceeded maximum protobuf size of 2GB: ");
    v12 = google::protobuf::internal::LogMessage::operator<<(v11, v6);
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v9 = v16;
    goto LABEL_12;
  }
  std::string::resize(v2, v5 + size, 0);
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
  *(_OWORD *)&v16[0].__r_.__value_.__l.__data_ = (unint64_t)v2 + size + v6;
  v17 = 0;
  v18 = 0;
  v19 = google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ & 1;
  if (v16[0].__r_.__value_.__r.__words[0] != (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 360);
    v8 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: target + size == res: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
    v9 = __p;
LABEL_12:
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9->__r_.__value_.__l.__data_);
  }
  return v7 == 0;
}

void sub_191D37270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  google::protobuf::internal::LogMessage::~LogMessage(&__p);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::MessageLite::SerializeAsString@<W0>(google::protobuf::MessageLite *this@<X0>, uint64_t a2@<X8>)
{
  _BOOL8 result;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = google::protobuf::MessageLite::AppendToString((const char *)this, (std::string *)a2);
  if (!result)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(_BYTE **)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 23) = 0;
    }
  }
  return result;
}

void sub_191D37308(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void google::protobuf::internal::OnShutdownRun(google::protobuf::internal *this, void (*a2)(const void *), const void *a3)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v5 = google::protobuf::internal::ShutdownData::get(this);
  std::mutex::lock((std::mutex *)(v5 + 24));
  v6 = *(_QWORD **)(v5 + 8);
  v7 = *(_QWORD *)(v5 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v9 = ((uint64_t)v6 - *(_QWORD *)v5) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      std::vector<CoreNLP::NLAttributedToken>::__throw_length_error[abi:ne180100]();
    v11 = v7 - *(_QWORD *)v5;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,unsigned long>>>(v5 + 16, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v9];
    v15 = &v13[16 * v12];
    *(_QWORD *)v14 = this;
    *((_QWORD *)v14 + 1) = a2;
    v8 = v14 + 16;
    v17 = *(char **)v5;
    v16 = *(char **)(v5 + 8);
    if (v16 != *(char **)v5)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      v16 = *(char **)v5;
    }
    *(_QWORD *)v5 = v14;
    *(_QWORD *)(v5 + 8) = v8;
    *(_QWORD *)(v5 + 16) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = this;
    v6[1] = a2;
    v8 = v6 + 2;
  }
  *(_QWORD *)(v5 + 8) = v8;
  std::mutex::unlock((std::mutex *)(v5 + 24));
}

void sub_191D37430(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ShutdownData::get(google::protobuf::internal::ShutdownData *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  if ((v1 & 1) == 0
  {
    v3 = operator new();
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 850045863;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_QWORD *)(v3 + 80) = 0;
    google::protobuf::internal::ShutdownData::get(void)::data = v3;
  }
  return google::protobuf::internal::ShutdownData::get(void)::data;
}

void sub_191D374D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

google::protobuf::internal::ShutdownData *google::protobuf::ShutdownProtobufLibrary(google::protobuf::internal::ShutdownData *this)
{
  if ((google::protobuf::ShutdownProtobufLibrary(void)::is_shutdown & 1) == 0)
  {
    this = (google::protobuf::internal::ShutdownData *)google::protobuf::internal::ShutdownData::get(this);
    if (this)
    {
      google::protobuf::internal::ShutdownData::~ShutdownData(this);
      this = (google::protobuf::internal::ShutdownData *)MEMORY[0x19401E994]();
    }
    google::protobuf::ShutdownProtobufLibrary(void)::is_shutdown = 1;
  }
  return this;
}

void google::protobuf::internal::ShutdownData::~ShutdownData(google::protobuf::internal::ShutdownData *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void (*v6)(_QWORD);
  uint64_t v7;
  void *v8;

  v2 = *(_QWORD **)this;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = v3 - 2;
  if (*(_QWORD **)this != v3 && v4 > v2)
  {
    do
    {
      v6 = (void (*)(_QWORD))*v2;
      *v2 = *v4;
      *v4 = v6;
      v7 = v2[1];
      v2[1] = v4[1];
      v4[1] = v7;
      v2 += 2;
      v4 -= 2;
    }
    while (v2 < v4);
    v2 = *(_QWORD **)this;
    v3 = (_QWORD *)*((_QWORD *)this + 1);
  }
  while (v2 != v3)
  {
    ((void (*)(_QWORD))*v2)(v2[1]);
    v2 += 2;
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 24));
  v8 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v8;
    operator delete(v8);
  }
}

void google::protobuf::MessageLite::ParseFromArray()
{
  __assert_rtn("StringPiece", "stringpiece.h", 229, "len >= 0");
}

google::protobuf::internal::EpsCopyInputStream *google::protobuf::internal::EpsCopyInputStream::Next(google::protobuf::internal::EpsCopyInputStream *this)
{
  std::string *v2;
  google::protobuf::internal::EpsCopyInputStream *result;
  uint64_t v4;
  int v5;
  char v6;
  std::string v7[2];

  if (*((int *)this + 7) <= 16)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 158);
    v2 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: limit_ > kSlopBytes: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v2->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  result = google::protobuf::internal::EpsCopyInputStream::NextBuffer(this, 0, -1);
  v4 = *((_QWORD *)this + 1);
  if (result)
  {
    v5 = *((_DWORD *)this + 7) + (_DWORD)result - v4;
    *((_DWORD *)this + 7) = v5;
    v4 += v5 & (v5 >> 31);
  }
  else
  {
    *((_DWORD *)this + 20) = 1;
  }
  *(_QWORD *)this = v4;
  return result;
}

void sub_191D376AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal::EpsCopyInputStream *google::protobuf::internal::EpsCopyInputStream::NextBuffer(google::protobuf::internal::EpsCopyInputStream *this, unsigned int a2, int a3)
{
  google::protobuf::internal::EpsCopyInputStream *v3;
  char *v5;
  int v6;
  std::string *v7;
  int v8;
  std::string *v10;
  std::string *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  BOOL v17;
  const char *v18;
  char *SizeFallback;
  uint64_t v20;
  size_t v21;
  std::string *v22;
  std::string *v23;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char *v28;
  void *v29;
  unint64_t v30;
  char v31;
  void *__src;
  std::string v33[2];

  v3 = (google::protobuf::internal::EpsCopyInputStream *)*((_QWORD *)this + 2);
  if (!v3)
    return v3;
  v5 = (char *)this + 40;
  if (v3 != (google::protobuf::internal::EpsCopyInputStream *)((char *)this + 40))
  {
    v6 = *((_DWORD *)this + 6);
    if (v6 <= 16)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 105);
      v7 = google::protobuf::internal::LogMessage::operator<<(v33, "CHECK failed: size_ > kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((int)&__src, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v33[0].__r_.__value_.__l.__data_);
      v3 = (google::protobuf::internal::EpsCopyInputStream *)*((_QWORD *)this + 2);
      v6 = *((_DWORD *)this + 6);
    }
    *((_QWORD *)this + 1) = (char *)v3 + v6 - 16;
    *((_QWORD *)this + 2) = v5;
    if (*((_QWORD *)this + 9) == 1)
      *((_QWORD *)this + 9) = 2;
    return v3;
  }
  *(_OWORD *)v3 = *(_OWORD *)*((_QWORD *)this + 1);
  if (*((int *)this + 21) < 1)
    goto LABEL_46;
  v8 = a3;
  if (a3 < 0)
    goto LABEL_39;
  if ((a2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 53);
    v11 = google::protobuf::internal::LogMessage::operator<<(v33, "CHECK failed: overrun >= 0: ");
    google::protobuf::internal::LogFinisher::operator=((int)&__src, (const char **)&v11->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v33[0].__r_.__value_.__l.__data_);
LABEL_14:
    v12 = (unsigned __int8 *)this + 56;
    v13 = (unsigned __int8 *)v3 + (int)a2;
    v14 = v13;
    while (2)
    {
      v15 = (char)*v14++;
      v16 = v15;
      if (v15 < 0)
      {
        v16 = v16 + (*v14 << 7) - 128;
        if ((char)*v14 < 0)
        {
          v14 = v13 + 3;
          v20 = -21;
          while (1)
          {
            v16 += (*(v14 - 1) - 1) << (v20 + 35);
            if (((char)*(v14 - 1) & 0x80000000) == 0)
              break;
            ++v14;
            v20 += 7;
            if (!v20)
              goto LABEL_39;
          }
        }
        else
        {
          v14 = v13 + 2;
        }
      }
      if (v14 <= v12)
      {
        if (!v16)
          goto LABEL_46;
        switch(v16 & 7)
        {
          case 0:
            v33[0].__r_.__value_.__r.__words[0] = 0;
            v14 = google::protobuf::internal::VarintParse<unsigned long long>((char *)v14, v33);
            if (!v14)
              goto LABEL_39;
            goto LABEL_38;
          case 1:
            v14 += 8;
            goto LABEL_38;
          case 2:
            v18 = (const char *)*v14;
            if ((char)*v14 < 0)
            {
              SizeFallback = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v14, v18);
              if (!SizeFallback)
                goto LABEL_39;
            }
            else
            {
              SizeFallback = (char *)(v14 + 1);
            }
            if (v12 - (unsigned __int8 *)SizeFallback < (int)v18)
              goto LABEL_39;
            v14 = (unsigned __int8 *)&SizeFallback[(int)v18];
LABEL_38:
            v13 = v14;
            if (v14 >= v12)
              goto LABEL_39;
            continue;
          case 3:
            ++v8;
            goto LABEL_38;
          case 4:
            v17 = __OFSUB__(v8--, 1);
            if (v8 < 0 != v17)
              goto LABEL_46;
            goto LABEL_38;
          case 5:
            v14 += 4;
            goto LABEL_38;
          default:
            goto LABEL_39;
        }
      }
      goto LABEL_39;
    }
  }
  if (a2 >= 0x11)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 54);
    v10 = google::protobuf::internal::LogMessage::operator<<(v33, "CHECK failed: overrun <= kSlopBytes: ");
    google::protobuf::internal::LogFinisher::operator=((int)&__src, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v33[0].__r_.__value_.__l.__data_);
    goto LABEL_39;
  }
  if (a2 != 16)
    goto LABEL_14;
LABEL_39:
  __src = 0;
  if (!(*(unsigned int (**)(_QWORD, void **, char *))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), &__src, (char *)this + 24))
  {
LABEL_45:
    *((_DWORD *)this + 21) = 0;
LABEL_46:
    if (*((_QWORD *)this + 9) == 2)
      *((_QWORD *)this + 9) = *((_QWORD *)this + 1) - (_QWORD)v3;
    *((_QWORD *)this + 1) = (char *)this + 56;
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    return v3;
  }
  while (1)
  {
    v21 = *((unsigned int *)this + 6);
    *((_DWORD *)this + 21) -= v21;
    if ((int)v21 >= 17)
    {
      v27 = *((_QWORD *)this + 9);
      v26 = (_QWORD *)((char *)this + 72);
      v25 = v27;
      v28 = (char *)(v26 - 2);
      v29 = __src;
      *((_OWORD *)v26 - 1) = *(_OWORD *)__src;
      *(v26 - 7) = v29;
      goto LABEL_52;
    }
    if ((int)v21 >= 1)
      break;
    if ((_DWORD)v21)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 137);
      v22 = google::protobuf::internal::LogMessage::operator<<(v33, "CHECK failed: size_ == 0: ");
      v23 = google::protobuf::internal::LogMessage::operator<<(v22, *((_DWORD *)this + 6));
      google::protobuf::internal::LogFinisher::operator=((int)&v31, (const char **)&v23->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v33[0].__r_.__value_.__l.__data_);
    }
    if (((*(uint64_t (**)(_QWORD, void **, char *))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), &__src, (char *)this + 24) & 1) == 0)goto LABEL_45;
  }
  memcpy((char *)this + 56, __src, v21);
  v30 = *((_QWORD *)this + 9);
  v26 = (_QWORD *)((char *)this + 72);
  v25 = v30;
  v28 = (char *)v3 + v21;
  *(v26 - 7) = v3;
LABEL_52:
  *(v26 - 8) = v28;
  if (v25 > 1)
    *v26 = 1;
  return v3;
}

void sub_191D37A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::EpsCopyInputStream::DoneFallback(google::protobuf::internal::EpsCopyInputStream *this, signed int a2, int a3)
{
  int v3;
  signed int v5;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  google::protobuf::internal::EpsCopyInputStream *Buffer;
  uint64_t v14;
  int v15;
  uint64_t result;
  std::string *v17;
  char v18;
  std::string v19[2];

  v3 = *((_DWORD *)this + 7);
  if (v3 < a2)
    return 0;
  v5 = a2;
  if (v3 == a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 175);
    v7 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: overrun != limit_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
    v3 = *((_DWORD *)this + 7);
  }
  if (v3 <= v5)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 176);
    v8 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: overrun < limit_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v8->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
    v3 = *((_DWORD *)this + 7);
  }
  if (*(_QWORD *)this != *((_QWORD *)this + 1) + (v3 & (v3 >> 31)))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 181);
    v9 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: limit_end_ == buffer_end_ + (std::min)(0, limit_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
    v3 = *((_DWORD *)this + 7);
  }
  if (v3 <= 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 183);
    v10 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: limit_ > 0: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  if (*(_QWORD *)this != *((_QWORD *)this + 1))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 184);
    v11 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: limit_end_ == buffer_end_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v11->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  while (1)
  {
    if (v5 < 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 188);
      v12 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: overrun >= 0: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
    }
    Buffer = google::protobuf::internal::EpsCopyInputStream::NextBuffer(this, v5, a3);
    if (!Buffer)
      break;
    v14 = *((_QWORD *)this + 1);
    v15 = *((_DWORD *)this + 7) + (_DWORD)Buffer - v14;
    *((_DWORD *)this + 7) = v15;
    result = (uint64_t)Buffer + v5;
    v5 = result - v14;
    if ((int)result - (int)v14 < 0)
    {
      *(_QWORD *)this = v14 + (v15 & (v15 >> 31));
      return result;
    }
  }
  if (v5)
    return 0;
  if (*((int *)this + 7) <= 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 193);
    v17 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: limit_ > 0: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v17->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  result = *((_QWORD *)this + 1);
  *(_QWORD *)this = result;
  *((_DWORD *)this + 20) = 1;
  return result;
}

void sub_191D37D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal::EpsCopyInputStream *google::protobuf::internal::EpsCopyInputStream::SkipFallback(google::protobuf::internal::EpsCopyInputStream *this, const char *a2, int a3)
{
  int v5;
  BOOL v6;
  std::string *v7;
  google::protobuf::internal::EpsCopyInputStream *result;
  char v9;
  std::string v10[2];

  v5 = *((_DWORD *)this + 2) - (_DWORD)a2 + 16;
  while (1)
  {
    v6 = __OFSUB__(a3, v5);
    a3 -= v5;
    if ((a3 < 0) ^ v6 | (a3 == 0))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      v7 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: size > chunk_size: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
    }
    if (!*((_QWORD *)this + 2) || *((int *)this + 7) < 17)
      break;
    result = google::protobuf::internal::EpsCopyInputStream::Next(this);
    if (!result)
      return result;
    v5 = *((_DWORD *)this + 2) - (_DWORD)result;
    if (a3 <= v5)
      return (google::protobuf::internal::EpsCopyInputStream *)((char *)result + a3 + 16);
  }
  return 0;
}

void sub_191D37E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal::EpsCopyInputStream *google::protobuf::internal::EpsCopyInputStream::ReadStringFallback(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  int v5;
  const std::string::value_type *v6;
  uint64_t v8;
  std::string::size_type size;
  int v10;
  int v11;
  BOOL v12;
  std::string *v13;
  google::protobuf::internal::EpsCopyInputStream *result;
  char v15;
  std::string v16[2];

  v5 = a3;
  v6 = __s;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 - (uint64_t)__s + *(int *)(a1 + 28) >= a3)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      size = this->__r_.__value_.__l.__size_;
    else
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (a3 >= 50000000)
      v10 = 50000000;
    else
      v10 = a3;
    std::string::reserve(this, size + v10);
    v8 = *(_QWORD *)(a1 + 8);
  }
  v11 = v8 - (_DWORD)v6 + 16;
  while (1)
  {
    v12 = __OFSUB__(v5, v11);
    v5 -= v11;
    if ((v5 < 0) ^ v12 | (v5 == 0))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      v13 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: size > chunk_size: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    }
    if (!*(_QWORD *)(a1 + 16))
      break;
    std::string::append(this, v6, v11);
    if (*(int *)(a1 + 28) < 17)
      break;
    result = google::protobuf::internal::EpsCopyInputStream::Next((google::protobuf::internal::EpsCopyInputStream *)a1);
    if (!result)
      return result;
    v6 = (char *)result + 16;
    v11 = *(_DWORD *)(a1 + 8) - (_DWORD)result;
    if (v5 <= v11)
    {
      std::string::append(this, v6, v5);
      return (google::protobuf::internal::EpsCopyInputStream *)&v6[v5];
    }
  }
  return 0;
}

void sub_191D37FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal::EpsCopyInputStream *google::protobuf::internal::EpsCopyInputStream::AppendStringFallback(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  int v5;
  const std::string::value_type *v6;
  uint64_t v8;
  std::string::size_type size;
  int v10;
  int v11;
  BOOL v12;
  std::string *v13;
  google::protobuf::internal::EpsCopyInputStream *result;
  char v15;
  std::string v16[2];

  v5 = a3;
  v6 = __s;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 - (uint64_t)__s + *(int *)(a1 + 28) >= a3)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      size = this->__r_.__value_.__l.__size_;
    else
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (a3 >= 50000000)
      v10 = 50000000;
    else
      v10 = a3;
    std::string::reserve(this, size + v10);
    v8 = *(_QWORD *)(a1 + 8);
  }
  v11 = v8 - (_DWORD)v6 + 16;
  while (1)
  {
    v12 = __OFSUB__(v5, v11);
    v5 -= v11;
    if ((v5 < 0) ^ v12 | (v5 == 0))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      v13 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: size > chunk_size: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    }
    if (!*(_QWORD *)(a1 + 16))
      break;
    std::string::append(this, v6, v11);
    if (*(int *)(a1 + 28) < 17)
      break;
    result = google::protobuf::internal::EpsCopyInputStream::Next((google::protobuf::internal::EpsCopyInputStream *)a1);
    if (!result)
      return result;
    v6 = (char *)result + 16;
    v11 = *(_DWORD *)(a1 + 8) - (_DWORD)result;
    if (v5 <= v11)
    {
      std::string::append(this, v6, v5);
      return (google::protobuf::internal::EpsCopyInputStream *)&v6[v5];
    }
  }
  return 0;
}

void sub_191D38144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::internal::ParseContext::ParseMessage<google::protobuf::MessageLite>(google::protobuf::internal::EpsCopyInputStream *this, uint64_t a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  const char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)(*(uint64_t (**)(uint64_t, const char *, google::protobuf::internal::EpsCopyInputStream *))(*(_QWORD *)a2 + 88))(a2, v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

void google::protobuf::internal::WriteVarint(int a1, unint64_t a2, std::string *this)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v5 = (8 * a1);
  if (v5 < 0x80)
  {
    LOBYTE(v6) = 8 * a1;
  }
  else
  {
    do
    {
      std::string::push_back(this, v5 | 0x80);
      v6 = v5 >> 7;
      v7 = v5 >> 14;
      v5 >>= 7;
    }
    while (v7);
  }
  std::string::push_back(this, v6);
  if (a2 < 0x80)
  {
    LOBYTE(v8) = a2;
  }
  else
  {
    do
    {
      std::string::push_back(this, a2 | 0x80);
      v8 = a2 >> 7;
      v9 = a2 >> 14;
      a2 >>= 7;
    }
    while (v9);
  }
  std::string::push_back(this, v8);
}

uint64_t google::protobuf::internal::VarintParseSlow32(google::protobuf::internal *this, const char *a2)
{
  uint64_t result;
  uint64_t v4;

  result = (uint64_t)this + 3;
  v4 = -21;
  while (1)
  {
    LODWORD(a2) = ((*(unsigned __int8 *)(result - 1) - 1) << (v4 + 35)) + (_DWORD)a2;
    if ((*(char *)(result - 1) & 0x80000000) == 0)
      break;
    ++result;
    v4 += 7;
    if (!v4)
    {
      while (*((char *)this + v4 + 5) < 0)
      {
        result = 0;
        if (++v4 == 5)
          return result;
      }
      return (uint64_t)this + v4 + 6;
    }
  }
  return result;
}

uint64_t google::protobuf::internal::VarintParseSlow64(google::protobuf::internal *this, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  int v6;

  a2 = a2;
  result = (uint64_t)this + 3;
  v4 = (char *)this + 2;
  v5 = 14;
  while (1)
  {
    v6 = *v4++;
    a2 += (v6 - 1) << v5;
    if ((v6 & 0x80000000) == 0)
      break;
    ++result;
    v5 += 7;
    if (v5 == 70)
      return 0;
  }
  return result;
}

uint64_t google::protobuf::internal::ReadTagFallback(google::protobuf::internal *this, const char *a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  int v6;

  result = (uint64_t)this + 3;
  v4 = (char *)this + 2;
  v5 = -21;
  while (1)
  {
    v6 = *v4++;
    LODWORD(a2) = ((v6 - 1) << (v5 + 35)) + (_DWORD)a2;
    if ((v6 & 0x80000000) == 0)
      break;
    ++result;
    v5 += 7;
    if (!v5)
      return 0;
  }
  return result;
}

char *google::protobuf::internal::ReadSizeFallback(google::protobuf::internal *this, const char *a2)
{
  char *result;
  uint64_t v4;
  unsigned int v5;
  char *v6;

  result = (char *)this + 2;
  v4 = -21;
  while (1)
  {
    LODWORD(a2) = ((*(result - 1) - 1) << (v4 + 28)) + (_DWORD)a2;
    if ((*(result - 1) & 0x80000000) == 0)
      break;
    ++result;
    v4 += 7;
    if (!v4)
    {
      v5 = *((unsigned __int8 *)this + 4);
      v6 = (char *)this + 5;
      if (a2 + (v5 << 28) - 0x10000000 > 0x7FFFFFEF)
        v6 = 0;
      if (v5 <= 7)
        return v6;
      else
        return 0;
    }
  }
  return result;
}

char *google::protobuf::internal::InlineGreedyStringParser(std::string *a1, std::string::value_type *this, uint64_t a3)
{
  int v5;
  std::string::value_type *v6;
  char *result;
  int v8;

  v5 = *this;
  if (*this < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)this, (const char *)*this);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = this + 1;
  }
  return (char *)google::protobuf::internal::EpsCopyInputStream::ReadString(a3, v6, v5, a1);
}

unsigned __int8 *google::protobuf::internal::PackedInt32Parser(google::protobuf::internal *this, google::protobuf::internal *a2, const char *a3, google::protobuf::internal::ParseContext *a4)
{
  return google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)a3, a2, (int *)this);
}

unsigned __int8 *google::protobuf::internal::PackedUInt32Parser(google::protobuf::internal *this, google::protobuf::internal *a2, const char *a3, google::protobuf::internal::ParseContext *a4)
{
  return google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<unsigned int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)a3, a2, (int *)this);
}

unsigned __int8 *google::protobuf::internal::PackedInt64Parser(google::protobuf::internal *this, google::protobuf::internal *a2, const char *a3, google::protobuf::internal::ParseContext *a4)
{
  return google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<long long,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)a3, a2, (int *)this);
}

unsigned __int8 *google::protobuf::internal::PackedUInt64Parser(google::protobuf::internal *this, google::protobuf::internal *a2, const char *a3, google::protobuf::internal::ParseContext *a4)
{
  return google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<unsigned long long,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)a3, a2, (int *)this);
}

unsigned __int8 *google::protobuf::internal::PackedSInt32Parser(google::protobuf::internal *this, google::protobuf::internal *a2, const char *a3, google::protobuf::internal::ParseContext *a4)
{
  return google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<int,true>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)a3, a2, (int *)this);
}

unsigned __int8 *google::protobuf::internal::PackedSInt64Parser(google::protobuf::internal *this, google::protobuf::internal *a2, const char *a3, google::protobuf::internal::ParseContext *a4)
{
  return google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<long long,true>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)a3, a2, (int *)this);
}

unsigned __int8 *google::protobuf::internal::PackedBoolParser(google::protobuf::internal *this, google::protobuf::internal *a2, const char *a3, google::protobuf::internal::ParseContext *a4)
{
  return google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<BOOL,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((uint64_t)a3, a2, (int *)this);
}

char *google::protobuf::internal::FixedParser<unsigned int>(int *a1, google::protobuf::internal *this, google::protobuf::internal::EpsCopyInputStream *a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = (char *)this + 1;
  }
  return (char *)google::protobuf::internal::EpsCopyInputStream::ReadPackedFixed<unsigned int>(a3, v6, v5, a1);
}

char *google::protobuf::internal::FixedParser<int>(int *a1, google::protobuf::internal *this, google::protobuf::internal::EpsCopyInputStream *a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = (char *)this + 1;
  }
  return (char *)google::protobuf::internal::EpsCopyInputStream::ReadPackedFixed<int>(a3, v6, v5, a1);
}

char *google::protobuf::internal::FixedParser<unsigned long long>(int *a1, google::protobuf::internal *this, google::protobuf::internal::EpsCopyInputStream *a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = (char *)this + 1;
  }
  return (char *)google::protobuf::internal::EpsCopyInputStream::ReadPackedFixed<unsigned long long>(a3, v6, v5, a1);
}

char *google::protobuf::internal::FixedParser<long long>(int *a1, google::protobuf::internal *this, google::protobuf::internal::EpsCopyInputStream *a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = (char *)this + 1;
  }
  return (char *)google::protobuf::internal::EpsCopyInputStream::ReadPackedFixed<long long>(a3, v6, v5, a1);
}

char *google::protobuf::internal::FixedParser<float>(int *a1, google::protobuf::internal *this, google::protobuf::internal::EpsCopyInputStream *a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = (char *)this + 1;
  }
  return (char *)google::protobuf::internal::EpsCopyInputStream::ReadPackedFixed<float>(a3, v6, v5, a1);
}

char *google::protobuf::internal::FixedParser<double>(int *a1, google::protobuf::internal *this, google::protobuf::internal::EpsCopyInputStream *a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = (char *)this + 1;
  }
  return (char *)google::protobuf::internal::EpsCopyInputStream::ReadPackedFixed<double>(a3, v6, v5, a1);
}

char *google::protobuf::internal::WireFormatParser<google::protobuf::internal::UnknownFieldLiteParserHelper>(google::protobuf::internal::UnknownFieldLiteParserHelper *a1, char *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  char *v5;
  int v6;
  uint64_t v8;
  char *v10;

  v10 = a2;
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v10, *((_DWORD *)this + 23)) & 1) != 0)return v10;
    v5 = v10 + 1;
    v6 = *v10;
    if (*v10 < 0)
    {
      v6 = v6 + (*v5 << 7) - 128;
      if (*v5 < 0)
      {
        v5 = v10 + 3;
        v8 = -21;
        while (1)
        {
          v6 += (*(v5 - 1) - 1) << (v8 + 35);
          if ((*(v5 - 1) & 0x80000000) == 0)
            break;
          ++v5;
          v8 += 7;
          if (!v8)
            return 0;
        }
      }
      else
      {
        v5 = v10 + 2;
      }
    }
    v10 = v5;
    if (!v6 || (v6 & 7) == 4)
      break;
    v10 = (char *)google::protobuf::internal::FieldParser<google::protobuf::internal::UnknownFieldLiteParserHelper>(v6, a1, (google::protobuf::internal *)v5);
    if (!v10)
      return 0;
  }
  *((_DWORD *)this + 20) = v6 - 1;
  return v5;
}

unsigned __int8 *google::protobuf::internal::UnknownFieldParse(unsigned int a1, std::string *a2, google::protobuf::internal *a3, google::protobuf::internal::ParseContext *a4)
{
  std::string *v5;

  v5 = a2;
  return google::protobuf::internal::FieldParser<google::protobuf::internal::UnknownFieldLiteParserHelper>(a1, &v5, a3, a4);
}

unsigned __int8 *google::protobuf::internal::FieldParser<google::protobuf::internal::UnknownFieldLiteParserHelper>(unint64_t a1, std::string **this, google::protobuf::internal *a3, google::protobuf::internal::ParseContext *a4)
{
  unint64_t v4;
  unsigned __int8 *v5;
  std::string *v7;
  unsigned __int8 *v8;
  char v10;
  std::string v11[2];

  v4 = a1 >> 3;
  if (!(a1 >> 3))
    return 0;
  v5 = (unsigned __int8 *)a3;
  switch(a1 & 7)
  {
    case 0uLL:
      v11[0].__r_.__value_.__r.__words[0] = 0;
      v5 = google::protobuf::internal::VarintParse<unsigned long long>((char *)a3, v11);
      if (v5)
        google::protobuf::internal::UnknownFieldLiteParserHelper::AddVarint(this, v4, v11[0].__r_.__value_.__r.__words[0]);
      return v5;
    case 1uLL:
      v5 = (unsigned __int8 *)a3 + 8;
      google::protobuf::internal::UnknownFieldLiteParserHelper::AddFixed64((std::string *)this, v4, *(_QWORD *)a3);
      return v5;
    case 2uLL:
      v8 = (unsigned __int8 *)google::protobuf::internal::UnknownFieldLiteParserHelper::ParseLengthDelimited(this, v4, (std::string::value_type *)a3, a4);
      goto LABEL_10;
    case 3uLL:
      v8 = (unsigned __int8 *)google::protobuf::internal::UnknownFieldLiteParserHelper::ParseGroup(this, v4, (char *)a3, (int32x2_t *)a4);
LABEL_10:
      v5 = v8;
      break;
    case 4uLL:
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 758);
      v7 = google::protobuf::internal::LogMessage::operator<<(v11, "Can't happen");
      google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
      break;
    case 5uLL:
      v5 = (unsigned __int8 *)a3 + 4;
      google::protobuf::internal::UnknownFieldLiteParserHelper::AddFixed32((std::string *)this, v4, *(_DWORD *)a3);
      break;
    default:
      return 0;
  }
  return v5;
}

void sub_191D389A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::internal::VarintParse<unsigned long long>(char *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *result;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if (*a1 < 0)
  {
    v4 = a1[1];
    v5 = (v2 + (v4 << 7) - 128);
    if ((v4 & 0x80) != 0)
    {
      result = (unsigned __int8 *)(a1 + 3);
      v6 = 14;
      while (1)
      {
        v5 += (*(result - 1) - 1) << v6;
        if (((char)*(result - 1) & 0x80000000) == 0)
          break;
        ++result;
        v6 += 7;
        if (v6 == 70)
        {
          result = 0;
          v5 = 0;
          break;
        }
      }
      *a2 = v5;
    }
    else
    {
      *a2 = v5;
      return (unsigned __int8 *)(a1 + 2);
    }
  }
  else
  {
    *a2 = v2;
    return (unsigned __int8 *)(a1 + 1);
  }
  return result;
}

unsigned __int8 *google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(uint64_t a1, google::protobuf::internal *this, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = (unsigned __int8 *)google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = (unsigned __int8 *)this + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = google::protobuf::internal::LogMessage::operator<<(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v18.__r_.__value_.__l.__data_);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = google::protobuf::internal::LogMessage::operator<<(&v18, "CHECK failed: (size) > (0): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v18.__r_.__value_.__l.__data_);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)google::protobuf::internal::EpsCopyInputStream::Next((google::protobuf::internal::EpsCopyInputStream *)a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_191D38C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = google::protobuf::internal::VarintParse<unsigned long long>((char *)i, &v10);
    if (!i)
      break;
    v6 = v10;
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      google::protobuf::RepeatedField<int>::Reserve(a3, v7 + 1);
      *(_DWORD *)(google::protobuf::RepeatedField<int>::elements((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(google::protobuf::RepeatedField<int>::elements((uint64_t)a3) + 4 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<unsigned int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(uint64_t a1, google::protobuf::internal *this, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = (unsigned __int8 *)google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = (unsigned __int8 *)this + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<unsigned int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<unsigned int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = google::protobuf::internal::LogMessage::operator<<(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v18.__r_.__value_.__l.__data_);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<unsigned int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = google::protobuf::internal::LogMessage::operator<<(&v18, "CHECK failed: (size) > (0): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v18.__r_.__value_.__l.__data_);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)google::protobuf::internal::EpsCopyInputStream::Next((google::protobuf::internal::EpsCopyInputStream *)a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_191D38EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<unsigned int,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = google::protobuf::internal::VarintParse<unsigned long long>((char *)i, &v10);
    if (!i)
      break;
    v6 = v10;
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      google::protobuf::RepeatedField<unsigned int>::Reserve(a3, v7 + 1);
      *(_DWORD *)(google::protobuf::RepeatedField<unsigned int>::elements((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(google::protobuf::RepeatedField<unsigned int>::elements((uint64_t)a3) + 4 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<long long,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(uint64_t a1, google::protobuf::internal *this, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = (unsigned __int8 *)google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = (unsigned __int8 *)this + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<long long,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<long long,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = google::protobuf::internal::LogMessage::operator<<(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v18.__r_.__value_.__l.__data_);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<long long,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = google::protobuf::internal::LogMessage::operator<<(&v18, "CHECK failed: (size) > (0): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v18.__r_.__value_.__l.__data_);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)google::protobuf::internal::EpsCopyInputStream::Next((google::protobuf::internal::EpsCopyInputStream *)a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_191D391BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<long long,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = google::protobuf::internal::VarintParse<unsigned long long>((char *)i, &v10);
    if (!i)
      break;
    v6 = v10;
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      google::protobuf::RepeatedField<long long>::Reserve(a3, v7 + 1);
      *(_QWORD *)(google::protobuf::RepeatedField<long long>::elements((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(_QWORD *)(google::protobuf::RepeatedField<long long>::elements((uint64_t)a3) + 8 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::VarintParser<unsigned long long,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(uint64_t a1, google::protobuf::internal *this, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)this;
  if (*(char *)this < 0)
  {
    result = (unsigned __int8 *)google::protobuf::internal::ReadSizeFallback(this, (const char *)*(unsigned __int8 *)this);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = (unsigned __int8 *)this + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<unsigned long long,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<unsigned long long,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = google::protobuf::internal::LogMessage::operator<<(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v18.__r_.__value_.__l.__data_);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = google::protobuf::internal::ReadPackedVarintArray<char const* google::protobuf::internal::VarintParser<unsigned long long,false>(void *,char const*,google::protobuf::internal::ParseContext *)::{lambda(unsigned long long)#1}>((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = google::protobuf::internal::LogMessage::operator<<(&v18, "CHECK failed: (size) > (0): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v18.__r_.__value_.__l.__data_);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)google::protobuf::internal::EpsCopyInputStream::Next((google::protobuf::internal::EpsCopyInputStream *)a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

