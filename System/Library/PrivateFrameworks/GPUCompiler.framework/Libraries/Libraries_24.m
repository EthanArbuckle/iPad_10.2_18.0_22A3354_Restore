uint64_t sub_22EFC3768(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8, char a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v17 = sub_22EFC7430(160, a1, a2, 0);
  v18 = sub_22EFC31D8(v17, 33, 4, a1, a2, a4, a5, a6, a3);
  *(_QWORD *)v18 = &off_24FAC26A8;
  *(_QWORD *)(v18 + 136) = 0;
  *(_QWORD *)(v18 + 144) = 0;
  *(_QWORD *)(v18 + 128) = 0;
  v19 = *(_QWORD *)(v18 + 72);
  v20 = 0x8000000000;
  if (!a7)
    v20 = 0;
  v21 = 0x10000000000;
  if (!a8)
    v21 = 0;
  v22 = 0x20000000000;
  if (!a9)
    v22 = 0;
  *(_QWORD *)(v18 + 72) = v21 | v20 | v22 | v19 & 0xFFFFF800007FFFFFLL;
  *(_DWORD *)(v18 + 152) = 0;
  *(_DWORD *)(v18 + 72) = (*(_QWORD *)(*(_QWORD *)(a1 + 2000) + 20) >> 25) & 0x100000 | v19 & 0x6FFFFF;
  if (!*(_QWORD *)(v18 + 48))
  {
    if (a6)
      *(_QWORD *)(v17 + 48) = *(_QWORD *)(a6 + 48);
    else
      sub_22EF6462C(a1, v17);
  }
  return v17;
}

uint64_t sub_22EFC38A8(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_22E3CD3D4(a1 + 2032, 168, 3);
  *(_DWORD *)v4 = 0;
  *(_DWORD *)(v4 + 4) = a2;
  result = sub_22EFC31D8(v4 + 8, 33, 4, a1, 0, 0, 0, 0, 0);
  *(_QWORD *)(v4 + 8) = &off_24FAC26A8;
  *(_QWORD *)(v4 + 144) = 0;
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 136) = 0;
  v6 = *(_QWORD *)(v4 + 80);
  *(_QWORD *)(v4 + 80) = v6 & 0xFFFFF800007FFFFFLL;
  *(_DWORD *)(v4 + 160) = 0;
  *(_DWORD *)(v4 + 80) = (*(_QWORD *)(*(_QWORD *)(a1 + 2000) + 20) >> 25) & 0x100000 | v6 & 0x6FFFFF;
  return result;
}

uint64_t sub_22EFC395C(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, unsigned __int8 a5)
{
  unint64_t v6;
  uint64_t result;

  if (a1[16] <= 7uLL)
    a1[16] = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFFBLL;
  a1[17] = a3;
  v6 = a1[9] & 0xFFFFFF80007FFFFFLL | (a4 << 23) | ((unint64_t)a5 << 31);
  a1[9] = v6;
  *((_DWORD *)a1 + 18) = v6 & 0xFFFCFFFF | 0x10000;
  result = sub_22EFC8974((unint64_t)a1);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, a1);
  return result;
}

BOOL sub_22EFC39E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if ((*(_BYTE *)(a1 + 29) & 1) != 0 && (sub_22EFC8E88(a1), (v3 = sub_22EFC5B4C(v2)) != 0))
    return *(_DWORD *)(v3 + 36) == 0;
  else
    return 1;
}

unint64_t sub_22EFC3A1C(uint64_t a1)
{
  uint64_t *v1;
  unint64_t result;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  v1 = *(uint64_t **)(a1 + 144);
  if (!v1)
    return 0;
  v3 = *v1;
  if (((((v3 >> 1) & 3) + 1) & 0xFFFFFFFD) == 0)
    return 0;
  v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v5 = v4;
    v6 = *(_QWORD **)(v4 + 144);
    if (!v6)
      break;
    v4 = *v6 & 0xFFFFFFFFFFFFFFF8;
  }
  while (v4);
  result = sub_22EFC3500(v5);
  if (!result)
    return v5;
  return result;
}

BOOL sub_22EFC3A88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  if ((*(_BYTE *)(a1 + 29) & 2) == 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  if ((v3 & 4) != 0)
  {
    v4 = *(_QWORD *)v4;
    if ((*(_WORD *)(v4 + 8) & 0x7Eu) - 34 <= 3)
      return *(_QWORD *)(v4 - 24) == v2;
    return 0;
  }
  if ((*(_WORD *)(v4 + 8) & 0x7Eu) - 34 >= 4)
    return 0;
  return *(_QWORD *)(v4 - 24) == v2;
}

unint64_t sub_22EFC3AEC(unint64_t a1)
{
  unint64_t result;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*(_DWORD *)(a1 + 72) & 0xE000) == 0x4000)
    return 1;
  result = sub_22EFC3500(a1);
  if (result)
  {
    result = sub_22EFC3B90(result);
    if (result)
    {
      v2 = result;
LABEL_6:
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 16) == 45)
        {
          v4 = sub_22F114198(*(_QWORD *)(v3 + 24));
          if ((sub_22EFC3AEC(v4) & 1) != 0)
            return 1;
        }
      }
      while (1)
      {
        v2 = *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v2)
          return 0;
        if ((*(_DWORD *)(v2 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_6;
      }
    }
  }
  return result;
}

unint64_t sub_22EFC3B90(uint64_t a1)
{
  unint64_t result;

  if ((*(_WORD *)(a1 + 72) & 0x80) != 0 && (*(_BYTE *)(a1 + 75) & 8) == 0)
    sub_22F3ACDA4((_QWORD *)a1);
  for (result = *(_QWORD *)(a1 + 80); result; result = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8)
  {
    if ((*(_DWORD *)(result + 28) & 0x7Fu) - 49 < 3)
      break;
  }
  return result;
}

uint64_t sub_22EFC3BF0(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int i;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;

  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 72) & 0xFFFCFFFF | 0x10000;
  v2 = sub_22EFC8974(a1);
  if (v2)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v2 + 16))(v2, a1);
  v3 = a1;
  if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 4) != 0)
      v5 = *(_QWORD *)v5;
    for (i = *(_WORD *)(v5 + 8) & 0x7F; i != 83; i = *(_WORD *)(v5 + 8) & 0x7F)
    {
      v7 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v7 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_21;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_20;
        if (i == 16)
          goto LABEL_10;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_11;
        if (i == 24)
        {
LABEL_10:
          v7 = -48;
        }
        else
        {
LABEL_20:
          if (i != 70)
          {
LABEL_21:
            v9 = i - 52;
            if ((i - 33) >= 5)
              v10 = -48;
            else
              v10 = -64;
            if (v9 >= 6)
              v7 = v10;
            else
              v7 = -72;
            goto LABEL_11;
          }
          v7 = -64;
        }
      }
LABEL_11:
      v8 = *(_QWORD *)(v5 + v7 + 16);
      v5 = v8 & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 4) != 0)
        v5 = *(_QWORD *)v5;
    }
    v3 = v5 - 40;
  }
  result = *(_QWORD *)(v3 + 88);
  if ((*(_QWORD *)(*(_QWORD *)(result + 2000) + 140) & 0x8000000000) != 0)
    return sub_22F0C975C(result, a1);
  return result;
}

BOOL sub_22EFC3D58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 205)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22EFC3DB8(unint64_t a1, int a2)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int i;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  size_t v25;
  unsigned __int8 *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *p_p;
  size_t v33;
  int v34;
  void *__p;
  size_t v36;
  char v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;

  v4 = *(_DWORD *)(a1 + 28) & 0x7F;
  if (!a1 || (v5 = a1, v4 != 83))
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((v6 & 4) != 0)
      v7 = *(_QWORD *)v7;
    for (i = *(_WORD *)(v7 + 8) & 0x7F; i != 83; i = *(_WORD *)(v7 + 8) & 0x7F)
    {
      v9 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v9 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v9 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v10 = i - 52;
            if ((i - 33) >= 5)
              v11 = -48;
            else
              v11 = -64;
            if (v10 >= 6)
              v9 = v11;
            else
              v9 = -72;
            goto LABEL_22;
          }
          v9 = -64;
        }
      }
LABEL_22:
      v12 = *(_QWORD *)(v7 + v9 + 16);
      v7 = v12 & 0xFFFFFFFFFFFFFFF8;
      if ((v12 & 4) != 0)
        v7 = *(_QWORD *)v7;
    }
    v5 = v7 - 40;
  }
  v13 = *(_QWORD **)(v5 + 88);
  v14 = v13[250];
  v15 = *(_QWORD *)(v14 + 256) & 9;
  if (!v15 || (*(_BYTE *)(v14 + 196) & 0xC0) == 0)
    return 0;
  v16 = 0;
  if (a1 && (v4 - 38) >= 0xFFFFFFFD)
  {
    v17 = (uint64_t *)v13[251];
    if (sub_22EFCBD94(a1 + 64, 1))
    {
      v16 = 0;
    }
    else if (sub_22E6A4B04(a1))
    {
      v16 = 1;
    }
    else if ((*(_DWORD *)(a1 + 72) & 0xE000) == 0x4000)
    {
      v16 = 2;
    }
    else if ((sub_22EFD12A8(a1) & 1) != 0)
    {
      v16 = 3;
    }
    else
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      if ((**(_QWORD **)(a1 + 128) & 0x100000000000) != 0)
      {
        v16 = 4;
      }
      else
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
        if ((**(_QWORD **)(a1 + 128) & 0x1000) != 0)
        {
          v16 = 5;
        }
        else if ((sub_22F421FF0(v17, v15, 0, *(_DWORD *)(a1 + 24)) & 1) != 0)
        {
          v16 = 6;
        }
        else
        {
          sub_22EFB9E74(a1, &v38);
          v34 = sub_22F422AE0(*v17, v15, 0);
          if (SHIBYTE(v40) < 0)
            operator delete(v38);
          if (v34)
            v16 = 7;
          else
            v16 = -1;
        }
      }
    }
  }
  if (a2)
  {
    if ((v16 & 0x80000000) != 0)
    {
      v20 = *(_QWORD *)(v13[249] + 8);
      *(_DWORD *)(v20 + 312) = *(_DWORD *)(a1 + 24);
      *(_DWORD *)(v20 + 316) = 2334;
      if (*(char *)(v20 + 311) < 0)
      {
        **(_BYTE **)(v20 + 288) = 0;
        *(_QWORD *)(v20 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v20 + 288) = 0;
        *(_BYTE *)(v20 + 311) = 0;
      }
      v38 = (void *)(v20 + 320);
      v39 = 0;
      v40 = v20;
      v41 = 1;
      *(_BYTE *)(v20 + 320) = 0;
      *(_DWORD *)(v20 + 664) = 0;
      v29 = *(unsigned int *)(v20 + 776);
      if ((_DWORD)v29)
      {
        v30 = *(_QWORD *)(v20 + 768);
        v31 = 56 * v29;
        do
        {
          if (*(char *)(v30 + v31 - 9) < 0)
            operator delete(*(void **)(v30 + v31 - 32));
          v31 -= 56;
        }
        while (v31);
      }
      *(_DWORD *)(v20 + 776) = 0;
      sub_22EFB9E74(a1, &__p);
      if (v37 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v37 >= 0)
        v33 = v37 & 0x7F;
      else
        v33 = v36;
      sub_22E3B89A8((unsigned __int8 **)&v38, p_p, v33);
    }
    else
    {
      v19 = *(_QWORD *)(v13[249] + 8);
      *(_DWORD *)(v19 + 312) = *(_DWORD *)(a1 + 24);
      *(_DWORD *)(v19 + 316) = 2335;
      if (*(char *)(v19 + 311) < 0)
      {
        **(_BYTE **)(v19 + 288) = 0;
        *(_QWORD *)(v19 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v19 + 288) = 0;
        *(_BYTE *)(v19 + 311) = 0;
      }
      v38 = (void *)(v19 + 320);
      v39 = 0;
      v40 = v19;
      v41 = 1;
      *(_BYTE *)(v19 + 320) = 0;
      *(_DWORD *)(v19 + 664) = 0;
      v21 = *(unsigned int *)(v19 + 776);
      if ((_DWORD)v21)
      {
        v22 = *(_QWORD *)(v19 + 768);
        v23 = 56 * v21;
        do
        {
          if (*(char *)(v22 + v23 - 9) < 0)
            operator delete(*(void **)(v22 + v23 - 32));
          v23 -= 56;
        }
        while (v23);
      }
      *(_DWORD *)(v19 + 776) = 0;
      sub_22EFB9E74(a1, &__p);
      if (v37 >= 0)
        v24 = &__p;
      else
        v24 = __p;
      if (v37 >= 0)
        v25 = v37 & 0x7F;
      else
        v25 = v36;
      sub_22E3B89A8((unsigned __int8 **)&v38, v24, v25);
      v26 = (unsigned __int8 *)v38;
      if (!v38)
      {
        v26 = (unsigned __int8 *)sub_22E3B8AAC(v39);
        v38 = v26;
      }
      v26[*v26 + 1] = 2;
      v27 = v38;
      v28 = *(unsigned __int8 *)v38;
      *(_BYTE *)v38 = v28 + 1;
      v27[v28 + 2] = v16;
    }
    if (v37 < 0)
      operator delete(__p);
    sub_22E3BB0B8((uint64_t)&v38);
  }
  return v16 >> 31;
}

unint64_t sub_22EFC4258(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = sub_22EFC3B90(a1);
  if (v1)
  {
LABEL_2:
    if (*(_QWORD *)(v1 + 40) < 8uLL || (*(_QWORD *)(v1 + 40) & 7) != 0)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v3 && *(_BYTE *)(v3 + 16) == 45 && (v4 = sub_22F114198(*(_QWORD *)(v3 + 24)), (v5 = sub_22EFC4258(v4)) != 0))
      {
        return v5;
      }
      else
      {
        while (1)
        {
          v1 = *(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v1)
            break;
          if ((*(_DWORD *)(v1 + 28) & 0x7Fu) - 49 <= 2)
            goto LABEL_2;
        }
      }
    }
  }
  return v1;
}

double sub_22EFC42F4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  double result;

  v3 = sub_22EA41AB8(a1, 1, a2, a3);
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_WORD *)(v3 + 48) = *(_WORD *)(v3 + 48) & 0xE000 | 1;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)v3 = &off_24FAC27A0;
  *(_DWORD *)(v3 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 120) = 0;
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(v3 + 48) & 0xFFF81FFF | 0x8000;
  return result;
}

uint64_t sub_22EFC4364(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v12;
  uint64_t result;

  v12 = sub_22EFC7430(104, a1, a2, 0);
  result = sub_22EA41AB8(v12, 62, a2, a3);
  *(_QWORD *)(result + 40) = a4;
  *(_QWORD *)(result + 48) = a5;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = a3;
  *(_QWORD *)(result + 72) = a1 | 2;
  *(_QWORD *)(result + 80) = result;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)result = &off_24FAC3008;
  *(_DWORD *)(result + 96) = (a6 & 7) << 18;
  *(_DWORD *)(result + 28) |= 0x200u;
  return result;
}

unint64_t sub_22EFC4400(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, uint64_t a6, int a7, char a8, char a9, char a10, int a11, uint64_t a12)
{
  unint64_t v19;
  unint64_t result;
  uint64_t v21;

  v19 = sub_22EFC7430(160, a1, a2, 0);
  result = sub_22EFBF4FC(v19, 52, a1, a2, a3, a4, a5, a6, a7, SHIWORD(a7), a8, a9, a11, a12);
  v21 = 0x200000;
  if (!a10)
    v21 = 0;
  *(_QWORD *)(result + 80) = *(_QWORD *)(result + 80) & 0xFFFFFFFFFFDFFFFFLL | v21;
  return result;
}

unint64_t sub_22EFC44DC(uint64_t a1, int a2)
{
  _DWORD *v4;
  uint64_t v6[3];

  v4 = (_DWORD *)sub_22E3CD3D4(a1 + 2032, 168, 3);
  *v4 = 0;
  v4[1] = a2;
  memset(v6, 0, sizeof(v6));
  return sub_22EFBF4FC((unint64_t)(v4 + 2), 52, a1, 0, 0, v6, 0, 0, 0, 0, 0, 0, 0, 0);
}

_DWORD *sub_22EFC4560(uint64_t a1, int a2)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v6;
  unsigned int v7;
  char v8;

  v3 = (_DWORD *)sub_22E3CD3D4(a1 + 2032, 88, 3);
  v4 = v3 + 2;
  *v3 = 0;
  v3[1] = a2;
  v7 = 1;
  v6 = 0;
  v8 = 0;
  sub_22EFC5AB4((uint64_t)(v3 + 2), 0, 0, 0, 0, 0, (uint64_t)&v6);
  if (v7 >= 0x41 && v6)
    MEMORY[0x2348A0E84](v6, 0x1000C8000313F17);
  return v4;
}

uint64_t sub_22EFC45FC(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t result;

  v12 = sub_22EFC7430(88, a1, a2, 0);
  result = sub_22EA41AB8(v12, 41, a2, a4);
  *(_QWORD *)(result + 40) = a5;
  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 56) = a3;
  *(_QWORD *)(result + 64) = a1 | 2;
  *(_QWORD *)(result + 72) = result;
  *(_QWORD *)(result + 80) = a6 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)result = &off_24FAC2C50;
  return result;
}

uint64_t sub_22EFC4684(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_22E3CD3D4(a1 + 2032, 96, 3);
  *(_DWORD *)v4 = 0;
  *(_DWORD *)(v4 + 4) = a2;
  result = sub_22EA41AB8(v4 + 8, 41, 0, 0);
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_DWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = a1 | 2;
  *(_QWORD *)(v4 + 80) = result;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 8) = &off_24FAC2C50;
  return result;
}

uint64_t sub_22EFC46F8(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t result;

  v12 = sub_22EFC7430(96, a1, a2, 0);
  result = sub_22EA41AB8(v12, 40, a2, a4);
  *(_QWORD *)(result + 40) = a5;
  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 56) = a3;
  *(_QWORD *)(result + 64) = a1 | 2;
  *(_QWORD *)(result + 72) = result;
  *(_QWORD *)result = &off_24FAC2CC8;
  *(_QWORD *)(result + 80) = a6 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(result + 88) = 0;
  return result;
}

uint64_t sub_22EFC4780(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_22E3CD3D4(a1 + 2032, 104, 3);
  *(_DWORD *)v4 = 0;
  *(_DWORD *)(v4 + 4) = a2;
  result = sub_22EA41AB8(v4 + 8, 40, 0, 0);
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_DWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = a1 | 2;
  *(_QWORD *)(v4 + 80) = result;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 8) = &off_24FAC2CC8;
  return result;
}

uint64_t sub_22EFC47F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t result;

  v9 = sub_22EFC7430(56, a1, a2, 4);
  result = sub_22EA41AB8(v9, 10, a2, a3);
  *(_QWORD *)result = &off_24FAC28D8;
  *(_QWORD *)(result + 40) = a4;
  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 56) = a5;
  *(_DWORD *)(result + 28) |= 0x200u;
  return result;
}

uint64_t sub_22EFC4870()
{
  return 0;
}

unint64_t sub_22EFC487C(uint64_t a1)
{
  return sub_22E3CD31C((uint64_t *)(a1 + 72), a1);
}

unint64_t sub_22EFC4888(uint64_t a1)
{
  uint64_t *v2;
  char v3;

  v3 = *(_BYTE *)(a1 + 72);
  v2 = (uint64_t *)(a1 + 72);
  if ((v3 & 3) != 0)
    return 0;
  else
    return sub_22E3CD31C(v2, a1);
}

unint64_t sub_22EFC48A4(uint64_t a1)
{
  return sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 80) + 72), *(_QWORD *)(a1 + 80));
}

unint64_t sub_22EFC48B0(unint64_t a1)
{
  if ((*(_BYTE *)(a1 + 29) & 0x80) != 0)
    return sub_22EFB5D7C(a1);
  return a1;
}

uint64_t sub_22EFC48C0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24FAC2BD8;
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v2 = *(_QWORD *)(a1 + 64);
    if (v2)
      MEMORY[0x2348A0E84](v2, 0x1000C8000313F17);
  }
  return a1;
}

void sub_22EFC4914(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = &off_24FAC2BD8;
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v1 = *(_QWORD *)(a1 + 64);
    if (v1)
      MEMORY[0x2348A0E84](v1, 0x1000C8000313F17);
  }
  JUMPOUT(0x2348A0E9CLL);
}

unint64_t sub_22EFC4978(unint64_t a1)
{
  if ((*(_BYTE *)(a1 + 29) & 0x80) != 0)
    return sub_22EFB5D7C(a1);
  return a1;
}

uint64_t sub_22EFC4988(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

unint64_t sub_22EFC4990(uint64_t a1)
{
  return sub_22E3CD31C((uint64_t *)(a1 + 64), a1);
}

unint64_t sub_22EFC499C(uint64_t a1)
{
  uint64_t *v2;
  char v3;

  v3 = *(_BYTE *)(a1 + 64);
  v2 = (uint64_t *)(a1 + 64);
  if ((v3 & 3) != 0)
    return 0;
  else
    return sub_22E3CD31C(v2, a1);
}

unint64_t sub_22EFC49B8(uint64_t a1)
{
  return sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 72) + 64), *(_QWORD *)(a1 + 72));
}

unint64_t sub_22EFC49C4(uint64_t a1)
{
  return sub_22E3CD31C((uint64_t *)(a1 + 104), a1);
}

unint64_t sub_22EFC49D0(uint64_t a1)
{
  uint64_t *v2;
  char v3;

  v3 = *(_BYTE *)(a1 + 104);
  v2 = (uint64_t *)(a1 + 104);
  if ((v3 & 3) != 0)
    return 0;
  else
    return sub_22E3CD31C(v2, a1);
}

unint64_t sub_22EFC49EC(uint64_t a1)
{
  return sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 112) + 104), *(_QWORD *)(a1 + 112));
}

unint64_t sub_22EFC49F8(uint64_t a1)
{
  uint64_t v2;

  v2 = 0;
  return sub_22EFBF910(a1, &v2);
}

uint64_t sub_22EFC4A1C(uint64_t a1)
{
  uint64_t v2;

  return sub_22EFBF6E8(a1, &v2);
}

unint64_t sub_22EFC4A3C(uint64_t a1)
{
  return sub_22E3CD31C((uint64_t *)(a1 + 96), a1);
}

unint64_t sub_22EFC4A48(uint64_t a1)
{
  uint64_t *v2;
  char v3;

  v3 = *(_BYTE *)(a1 + 96);
  v2 = (uint64_t *)(a1 + 96);
  if ((v3 & 3) != 0)
    return 0;
  else
    return sub_22E3CD31C(v2, a1);
}

unint64_t sub_22EFC4A64(uint64_t a1)
{
  return sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
}

unint64_t sub_22EFC4A70(uint64_t a1)
{
  return sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 80) + 72), *(_QWORD *)(a1 + 80));
}

uint64_t sub_22EFC4A7C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

unint64_t sub_22EFC4A84(unint64_t a1)
{
  if ((*(_BYTE *)(a1 + 29) & 0x80) != 0)
    return sub_22EFB5D7C(a1);
  return a1;
}

uint64_t sub_22EFC4A94(unint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;

  v1 = *(_QWORD *)(a1 + 8) & 6;
  v2 = *(unsigned __int8 *)(a1 + 29);
  if ((v2 & 0x80) != 0)
  {
    if (!v1)
      return v1 & v2;
    v3 = sub_22EFC7594(a1);
    if (v3)
      goto LABEL_4;
LABEL_9:
    LODWORD(v1) = 0;
    return v1 & v2;
  }
  if (!v1)
    return v1 & v2;
  v3 = *(_QWORD *)(a1 - 8);
  if (!v3)
    goto LABEL_9;
LABEL_4:
  v4 = *(_DWORD *)(v3 + 28);
  v5 = v4 > 6;
  v6 = (0x5Au >> v4) & 1;
  LODWORD(v1) = 1;
  if (v5)
    v2 = 0;
  else
    v2 = v6;
  return v1 & v2;
}

BOOL sub_22EFC4AFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 335)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22EFC4B5C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int i;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v30;
  unint64_t v31;
  uint64_t **v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;

  if (a2 || (*(_BYTE *)(a1 + 29) & 1) == 0)
    goto LABEL_11;
  sub_22EFC8E88(a1);
  v4 = *(uint64_t **)v3;
  v5 = *(unsigned int *)(v3 + 8);
  v6 = *(uint64_t **)v3;
  if ((_DWORD)v5)
  {
    v7 = 8 * v5;
    v6 = *(uint64_t **)v3;
    while (*(_WORD *)(*v6 + 32) != 335)
    {
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_11;
    }
  }
  if (v6 == &v4[v5])
  {
LABEL_11:
    if ((*(_BYTE *)(a1 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a1);
      v11 = *(uint64_t **)v10;
      v12 = *(unsigned int *)(v10 + 8);
      v13 = *(uint64_t **)v10;
      if ((_DWORD)v12)
      {
        v14 = 8 * v12;
        v13 = *(uint64_t **)v10;
        while (*(_WORD *)(*v13 + 32) != 346)
        {
          ++v13;
          v14 -= 8;
          if (!v14)
            goto LABEL_21;
        }
      }
      if (v13 != &v11[v12])
      {
        do
        {
          v15 = *v11++;
          v8 = v15;
        }
        while (*(_WORD *)(v15 + 32) != 346);
        goto LABEL_19;
      }
    }
LABEL_21:
    if (!a1 || (v18 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
    {
      v19 = *(_QWORD *)(a1 + 16);
      v20 = v19 & 0xFFFFFFFFFFFFFFF8;
      if ((v19 & 4) != 0)
        v20 = *(_QWORD *)v20;
      for (i = *(_WORD *)(v20 + 8) & 0x7F; i != 83; i = *(_WORD *)(v20 + 8) & 0x7F)
      {
        v22 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v22 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_36;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_35;
          if (i == 16)
            goto LABEL_29;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_42;
          if (i == 24)
          {
LABEL_29:
            v22 = -48;
          }
          else
          {
LABEL_35:
            if (i != 70)
            {
LABEL_36:
              v23 = i - 52;
              if ((i - 33) >= 5)
                v24 = -48;
              else
                v24 = -64;
              if (v23 >= 6)
                v22 = v24;
              else
                v22 = -72;
              goto LABEL_42;
            }
            v22 = -64;
          }
        }
LABEL_42:
        v25 = *(_QWORD *)(v20 + v22 + 16);
        v20 = v25 & 0xFFFFFFFFFFFFFFF8;
        if ((v25 & 4) != 0)
          v20 = *(_QWORD *)v20;
      }
      v18 = v20 - 40;
    }
    v26 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 88) + 15088) + 68);
    v27 = v26 > 0x21;
    v28 = (1 << v26) & 0x3F0000888;
    if (v27 || v28 == 0)
    {
LABEL_78:
      v17 = 0;
      v16 = 0;
      return v16 | v17;
    }
    if ((*(_DWORD *)(a1 + 28) & 0x100) != 0)
    {
      sub_22EFC8E88(a1);
      v30 = *v32;
      if ((*(_BYTE *)(a1 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a1);
        v31 = *(_QWORD *)v33 + 8 * *(unsigned int *)(v33 + 8);
LABEL_58:
        v16 = 2;
        while (1)
        {
          v34 = v30;
          if ((unint64_t)v30 >= v31)
          {
            v35 = (uint64_t *)v31;
            if (v30 == (uint64_t *)v31)
              goto LABEL_78;
            while (*(_WORD *)(*v35 + 32) != 115)
            {
              if (++v35 == v30)
                goto LABEL_78;
            }
            v34 = v30;
          }
          else
          {
            while (*(_WORD *)(*v34 + 32) != 115)
            {
              if (++v34 == (uint64_t *)v31)
                goto LABEL_78;
            }
            v35 = (uint64_t *)v31;
          }
          if (v34 == v35)
            goto LABEL_78;
          do
          {
            v37 = *v30++;
            v36 = v37;
          }
          while (*(_WORD *)(v37 + 32) != 115);
          v38 = *(_QWORD *)(*(_QWORD *)(v36 + 40) + 16);
          if (*(_DWORD *)v38 == 5)
          {
            v39 = *(_DWORD *)(v38 + 16);
            v40 = *(unsigned __int8 *)(v38 + 20);
            if (v39 == 1868783981 && v40 == 115)
              goto LABEL_20;
          }
        }
      }
    }
    else
    {
      v30 = 0;
    }
    v31 = 0;
    goto LABEL_58;
  }
  do
  {
    v9 = *v4++;
    v8 = v9;
  }
  while (*(_WORD *)(v9 + 32) != 335);
LABEL_19:
  v16 = qword_22F4A1860[*(int *)(v8 + 36)];
LABEL_20:
  v17 = 0x100000000;
  return v16 | v17;
}

uint64_t sub_22EFC4E8C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  if (sub_22EFC4F0C(a1, a2, &v6))
    return v6;
  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(unsigned int *)(a1 + 16);
  }
  return v3 + 16 * v4;
}

uint64_t sub_22EFC4F0C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((*a2 >> 9) ^ *a2);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_15:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -1)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -16;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_15;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_QWORD *sub_22EFC4FB4(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22EFC4F0C((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22EFC5024(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_BYTE *)v5 + 8) = v5[1] & 0xC0 | 0x16;
  }
  return v5;
}

_QWORD *sub_22EFC5024(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v8;
  _QWORD *v9;

  v4 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v5 = 8;
  else
    v5 = a1[4];
  if (4 * v4 + 4 >= 3 * v5)
  {
    v5 *= 2;
  }
  else if (v5 + ~v4 - a1[1] > v5 >> 3)
  {
    goto LABEL_5;
  }
  v8 = (uint64_t)a1;
  sub_22EFC50E0((uint64_t)a1, v5);
  v9 = 0;
  sub_22EFC4F0C(v8, a3, &v9);
  a1 = (_DWORD *)v8;
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -1)
    --a1[1];
  return a4;
}

uint64_t sub_22EFC50E0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v15;
    do
    {
      v10 = *(_QWORD *)(a1 + v8 + 8);
      if (v10 != -16 && v10 != -1)
      {
        *(_QWORD *)v9 = v10;
        v9[8] = *(_BYTE *)(a1 + v8 + 16);
        v9 += 16;
      }
      v8 += 16;
    }
    while (v8 != 128);
    if (a2 > 8)
    {
      *(_DWORD *)a1 &= ~1u;
      v12 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v12;
    }
    return sub_22F3AE41C(a1, (uint64_t)v15, (uint64_t)v9);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v14 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F3AE41C(a1, (uint64_t)v6, (uint64_t)v6 + 16 * v7);
    return llvm::deallocate_buffer(v6, (void *)(16 * v7));
  }
}

void sub_22EFC525C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_22EFC52BC()
{
  JUMPOUT(0x22EFC5294);
}

uint64_t sub_22EFC52C4()
{
  uint64_t v0;
  uint64_t v1;

  if ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(v0 + 24)) + 28) & 0x80) == 0)
  {
    v1 = sub_22F114198(*(_QWORD *)(v0 + 24));
    sub_22E496830(v1);
    JUMPOUT(0x22EFC5294);
  }
  return 0;
}

BOOL sub_22EFC586C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v4 = sub_22F10ACF8(a2);
  sub_22EFC525C((uint64_t)a1, v4);
  if (!v5)
    return 0;
  v6 = sub_22F10ACF8(a2);
  v7 = 0;
  if ((sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0), "imageblock", 10, 1, 0) & 1) == 0)
  {
    v8 = sub_22F10ACF8(a2);
    v7 = 1;
    if ((sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0), "matrix", 6, 1, 0) & 1) == 0)
    {
      v9 = sub_22F10ACF8(a2);
      if ((sub_22F10B8E0(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0), "texture2d", 9, 1, 0) & 1) == 0)
      {
        v10 = sub_22F10ACF8(a2);
        if ((sub_22F10B8E0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0), "sampler", 7, 0, 0) & 1) == 0)
        {
          v11 = *a1;
          v12 = sub_22F10ACF8(a2);
          sub_22EF5CDF0(v11, *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0));
          return v13 < 0x81;
        }
      }
    }
  }
  return v7;
}

uint64_t sub_22EFC59B8(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 176);
  if (v2 != (void *)(a1 + 192))
    free(v2);
  v3 = *(void **)(a1 + 24);
  if (v3 != (void *)(a1 + 48))
    free(v3);
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

unint64_t sub_22EFC5A18(unint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, unsigned int a11)
{
  uint64_t v16;
  int v17;

  v16 = sub_22EA41AB8(a1, a2, a3, a5);
  *(_QWORD *)(v16 + 40) = a6;
  *(_QWORD *)(v16 + 48) = a7;
  *(_QWORD *)(v16 + 56) = a8 & 0xFFFFFFFFFFFFFFFBLL;
  *(_QWORD *)v16 = &off_24FAC2F90;
  if (a10)
    v17 = 2;
  else
    v17 = 0;
  *(_DWORD *)(v16 + 64) = a4;
  *(_DWORD *)(v16 + 68) = v17;
  *(_QWORD *)(v16 + 72) = a11;
  if (a9)
    sub_22E670130(a1, a9);
  return a1;
}

uint64_t sub_22EFC5AB4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v12;
  llvm::APInt *v13;
  unsigned int v14;

  v12 = (_QWORD *)sub_22EA41AB8(a1, 67, a2, a3);
  v12[5] = a4;
  v12[6] = a5;
  *v12 = &off_24FAC2BD8;
  v12[7] = a6;
  v13 = (llvm::APInt *)(v12 + 8);
  v14 = *(_DWORD *)(a7 + 8);
  *(_DWORD *)(a1 + 72) = v14;
  if (v14 > 0x40)
    llvm::APInt::initSlowCase(v13, (const llvm::APInt *)a7);
  else
    *(_QWORD *)v13 = *(_QWORD *)a7;
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a7 + 12);
  return a1;
}

uint64_t sub_22EFC5B4C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(uint64_t **)a1;
  v2 = *(unsigned int *)(a1 + 8);
  i = *(uint64_t **)a1;
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    for (i = *(uint64_t **)a1; *(_WORD *)(*i + 32) != 170; ++i)
    {
      v4 -= 8;
      if (!v4)
        return 0;
    }
  }
  if (i == &v1[v2])
    return 0;
  do
  {
    v6 = *v1++;
    result = v6;
  }
  while (*(_WORD *)(v6 + 32) != 170);
  return result;
}

BOOL sub_22EFC5BAC(uint64_t a1, int a2)
{
  return a2 == 68 || (a2 - 49) < 3;
}

uint64_t sub_22EFC5BC0(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  while (1)
  {
    v2 = a1 & 7;
    v3 = v2;
    if (v2 == 7)
    {
      v4 = *(_DWORD *)(a1 & 0xFFFFFFFFFFFFFFF8);
      if (v4 >= 3)
        v4 = 3;
      v3 = v4 | 8;
    }
    v5 = a2 & 7;
    v6 = v5;
    if (v5 == 7)
    {
      v7 = *(_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
      if (v7 >= 3)
        v7 = 3;
      v6 = v7 | 8;
    }
    if (v3 != v6)
      break;
    v8 = a1 & 7;
    if (v2 == 7)
    {
      v9 = *(_DWORD *)(a1 & 0xFFFFFFFFFFFFFFF8);
      if (v9 >= 3)
        v9 = 3;
      v8 = v9 | 8;
    }
    if (v8 != 8)
      __asm { BR              X12 }
    a1 = *(_QWORD *)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) + 40);
    a2 = *(_QWORD *)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16) + 40);
  }
  if (v2 == 7)
  {
    v10 = *(_DWORD *)(a1 & 0xFFFFFFFFFFFFFFF8);
    if (v10 >= 3)
      v10 = 3;
    v2 = v10 | 8;
  }
  if (v5 == 7)
  {
    v11 = *(_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
    if (v11 >= 3)
      v11 = 3;
    v5 = v11 | 8;
  }
  if (v2 < v5)
    return 0xFFFFFFFFLL;
  else
    return 1;
}

void sub_22EFC5F80(_QWORD *a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *a1 & 7;
  if ((_DWORD)v1 == 7)
  {
    v2 = *(_DWORD *)(*a1 & 0xFFFFFFFFFFFFFFF8);
    if (v2 >= 3)
      v2 = 3;
    LODWORD(v1) = v2 | 8;
  }
  __asm { BR              X12 }
}

void sub_22EFC5FFC(uint64_t a1@<X8>)
{
  llvm::raw_ostream *v1;
  uint64_t v2;

  v2 = a1;
  sub_22F1D3D6C(&v2, v1);
}

uint64_t sub_22EFC666C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  BOOL v7;
  BOOL v8;
  uint64_t v10;
  _WORD v11[20];
  _QWORD v12[2];
  uint64_t v13;

  v13 = a1;
  v12[0] = a3 & 0xFFFFFFFFEFBFFBFFLL | 0x400400;
  v12[1] = a4;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v5 && v6 == 45 || (v5 ? (v7 = (a3 & 0x100000) == 0) : (v7 = 1), !v7 ? (v8 = v6 == 27) : (v8 = 0), v8))
  {
    v10 = sub_22F114198(*(_QWORD *)(v5 + 24));
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 88))(v10, a2);
  }
  else
  {
    v11[16] = 257;
    return sub_22F119558(&v13, a2, v12, v11, 0);
  }
}

uint64_t sub_22EFC6724(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6[216];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  sub_22F1D4230((uint64_t)v6);
  sub_22E462F04(&v4, v6);
  sub_22EFC5F80(&v5);
  sub_22E54B4D4((uint64_t)v6);
  return a1;
}

BOOL sub_22EFC67A8(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *a1;
  if ((*a1 & 7) - 3 <= 2)
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v2 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
      return 1;
  }
  if ((~(_BYTE)v1 & 7) != 0)
    return 0;
  v3 = v1 & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_DWORD *)v3;
  if (*(_DWORD *)v3 >= 3u)
    v4 = 3;
  if (v4)
    return 0;
  v6 = *(_QWORD *)(v3 + 16);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 4) != 0)
    v8 = (_QWORD *)*v8;
  return (sub_22EFC7ADC((unint64_t)v8) & 1) != 0;
}

void sub_22EFC683C(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 1;
  v6 = 0;
  v7 = 0;
  v5 = 0;
  v3 = MEMORY[0x24BED83D8] + 16;
  v11 = a2;
  llvm::raw_ostream::SetBufferAndMode();
  sub_22EFC6724((uint64_t)&v3, *a1);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v3);
}

uint64_t sub_22EFC68C0(_QWORD *a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *a1 & 7;
  if ((_DWORD)v1 == 7)
  {
    v2 = *(_DWORD *)(*a1 & 0xFFFFFFFFFFFFFFF8);
    if (v2 >= 3)
      v2 = 3;
    LODWORD(v1) = v2 | 8;
  }
  return ((uint64_t (*)(void))((char *)sub_22EFC6904 + 4 * byte_22F4A189C[(v1 - 3)]))();
}

uint64_t sub_22EFC6904@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16);
}

uint64_t sub_22EFC6930(_QWORD *a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *a1 & 7;
  if ((_DWORD)v1 == 7)
  {
    v2 = *(_DWORD *)(*a1 & 0xFFFFFFFFFFFFFFF8);
    if (v2 >= 3)
      v2 = 3;
    LODWORD(v1) = v2 | 8;
  }
  return ((uint64_t (*)(void))((char *)sub_22EFC6974 + 4 * byte_22F4A18A3[(v1 - 3)]))();
}

void sub_22EFC6974(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16) = a1;
}

_QWORD *sub_22EFC69A0(_QWORD *a1, uint64_t a2)
{
  llvm::FoldingSetBase *v3;
  llvm::FoldingSetBase *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _DWORD *v8;

  *a1 = a2;
  v3 = (llvm::FoldingSetBase *)(a1 + 5);
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 1));
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 3));
  llvm::FoldingSetBase::FoldingSetBase(v3);
  v4 = (llvm::FoldingSetBase *)(a1 + 99);
  v5 = 7;
  do
  {
    v6 = &a1[v5];
    *(_DWORD *)v6 = 0;
    v6[1] = 0;
    v5 += 2;
  }
  while (v6 + 2 != (_QWORD *)v4);
  llvm::FoldingSetBase::FoldingSetBase(v4);
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(a1 + 101));
  v7 = 0;
  v8 = a1 + 7;
  do
  {
    *v8 = v7;
    v8 += 4;
    ++v7;
  }
  while (v7 != 46);
  return a1;
}

uint64_t sub_22EFC6A3C(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t NodeOrInsertPos;

  v3 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0;
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (!NodeOrInsertPos)
  {
    NodeOrInsertPos = sub_22E3CD3D4(*a1 + 2032, 24, 3);
    *(_QWORD *)NodeOrInsertPos = 0;
    *(_QWORD *)(NodeOrInsertPos + 8) = v3;
    *(_QWORD *)(NodeOrInsertPos + 16) = 0;
    llvm::FoldingSetBase::InsertNode();
  }
  return NodeOrInsertPos | 3;
}

uint64_t sub_22EFC6B40(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t NodeOrInsertPos;

  v3 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0;
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (!NodeOrInsertPos)
  {
    NodeOrInsertPos = sub_22E3CD3D4(*a1 + 2032, 24, 3);
    *(_QWORD *)NodeOrInsertPos = 0;
    *(_QWORD *)(NodeOrInsertPos + 8) = v3;
    *(_QWORD *)(NodeOrInsertPos + 16) = 0;
    llvm::FoldingSetBase::InsertNode();
  }
  return NodeOrInsertPos | 4;
}

uint64_t sub_22EFC6C44(_QWORD *a1, uint64_t a2)
{
  uint64_t NodeOrInsertPos;

  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (!NodeOrInsertPos)
  {
    NodeOrInsertPos = sub_22E3CD3D4(*a1 + 2032, 24, 3);
    *(_QWORD *)NodeOrInsertPos = 0;
    *(_QWORD *)(NodeOrInsertPos + 8) = a2;
    *(_QWORD *)(NodeOrInsertPos + 16) = 0;
    llvm::FoldingSetBase::InsertNode();
  }
  return NodeOrInsertPos | 5;
}

uint64_t sub_22EFC6D44(_QWORD *a1, int a2, uint64_t a3)
{
  if (a2 == 5)
    return sub_22EFC6C44(a1, a3);
  if (a2 == 3)
    return sub_22EFC6A3C(a1, a3);
  return sub_22EFC6B40(a1, a3);
}

uint64_t sub_22EFC6D6C(uint64_t result, uint64_t a2)
{
  int v2;
  unsigned int v3;

  v2 = a2 & 7;
  if (v2 == 7)
  {
    v3 = *(_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
    if (v3 >= 3)
      v3 = 3;
    v2 = v3 | 8;
  }
  if ((v2 - 3) < 3)
  {
    *(_QWORD *)result = 0;
    return result;
  }
  if (v2 == 6)
  {
    *(_DWORD *)(result + 4) = 0;
    goto LABEL_11;
  }
  if (v2 == 9)
LABEL_11:
    *(_DWORD *)result = 0;
  return result;
}

uint64_t sub_22EFC6DC8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *a1 & 7;
  if ((_DWORD)v2 == 7)
  {
    v3 = *(_DWORD *)(v1 & 0xFFFFFFFFFFFFFFF8);
    if (v3 >= 3)
      v3 = 3;
    LODWORD(v2) = v3 | 8;
  }
  if ((v2 - 3) > 2)
    return 0;
  v4 = (_QWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 8);
  if (a1[2])
    v4 = (_QWORD *)a1[2];
  return *(_BYTE *)(*(_QWORD *)(*v4 & 0xFFFFFFFFFFFFFFF0) + 17) & 1;
}

uint64_t sub_22EFC6E30(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *a1 & 7;
  if ((_DWORD)v2 == 7)
  {
    v3 = *(_DWORD *)(v1 & 0xFFFFFFFFFFFFFFF8);
    if (v3 >= 3)
      v3 = 3;
    LODWORD(v2) = v3 | 8;
  }
  if ((v2 - 3) > 2)
    return 0;
  v4 = (_QWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 8);
  if (a1[2])
    v4 = (_QWORD *)a1[2];
  return (*(unsigned __int8 *)(*(_QWORD *)(*v4 & 0xFFFFFFFFFFFFFFF0) + 17) >> 1) & 1;
}

void sub_22EFC6E98(__int128 *a1@<X0>, _QWORD *a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 1;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v5 = MEMORY[0x24BED83D8] + 16;
  v13 = a2;
  llvm::raw_ostream::SetBufferAndMode();
  v3 = *a1;
  v4 = *((_QWORD *)a1 + 2);
  sub_22F3AE864((llvm::raw_ostream *)&v5, &v3);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v5);
}

void sub_22EFC6F2C(_QWORD *a1, llvm::raw_ostream *this, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  _BYTE *v10;
  uint64_t v11;
  const char *p_p;
  uint64_t v13;
  __int128 __p;
  uint64_t v15;
  _QWORD v16[2];
  _BYTE v17[864];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v16[0] = a3;
  v16[1] = a4;
  v6 = *a1 & 7;
  v7 = v6;
  if ((_DWORD)v6 == 7)
  {
    v8 = *(_DWORD *)(*a1 & 0xFFFFFFFFFFFFFFF8);
    if (v8 >= 3)
      v8 = 3;
    v7 = v8 | 8;
  }
  if ((v7 - 3) < 3 && (v9 = (uint64_t *)a1[2]) != 0)
  {
    if ((_DWORD)v6 != 7)
    {
      if ((_DWORD)v6 == 5)
      {
        v11 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v11) > 8)
        {
          *(_BYTE *)(v11 + 8) = 32;
          *(_QWORD *)v11 = *(_QWORD *)"operator ";
          *((_QWORD *)this + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(this, "operator ");
        }
      }
      else if ((_DWORD)v6 == 4)
      {
        v10 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v10 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this);
        }
        else
        {
          *((_QWORD *)this + 4) = v10 + 1;
          *v10 = 126;
        }
      }
    }
    sub_22F1D4230((uint64_t)v17);
    v16[0] = a3 & 0xFFFFFFFFEFBFEBFFLL | 0x401400;
    v13 = *v9;
    __p = 0uLL;
    v15 = 0;
    sub_22F119374(&v13, &__p, (uint64_t)v16);
    if (v15 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    llvm::raw_ostream::write(this, p_p);
    if (SHIBYTE(v15) < 0)
      operator delete((void *)__p);
    sub_22E54B4D4((uint64_t)v17);
  }
  else
  {
    sub_22EFC5F80(a1);
  }
}

void sub_22EFC70E8(_QWORD *a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *a1 & 7;
  if ((_DWORD)v1 == 7)
  {
    v2 = *(_DWORD *)(*a1 & 0xFFFFFFFFFFFFFFF8);
    if (v2 >= 3)
      v2 = 3;
    LODWORD(v1) = v2 | 8;
  }
  __asm { BR              X10 }
}

uint64_t sub_22EFC7138(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_22EFC7178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  int v12;
  uint64_t v14;

  v5 = a5;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_DWORD *)(a5 + 8);
  if (v7 >= *(_DWORD *)(a5 + 12))
  {
    v11 = *(_QWORD *)(a2 + 8);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = v11;
    v5 = a5;
    v7 = *(_DWORD *)(a5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v5 + 4 * v7) = v6;
  v8 = *(_DWORD *)(v5 + 12);
  v9 = *(_DWORD *)(v5 + 8) + 1;
  *(_DWORD *)(v5 + 8) = v9;
  if (v9 >= v8)
  {
    v14 = v5;
    v12 = HIDWORD(v6);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    HIDWORD(v6) = v12;
    v5 = v14;
    v9 = *(_DWORD *)(v14 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v5 + 4 * v9) = HIDWORD(v6);
  ++*(_DWORD *)(v5 + 8);
  return llvm::FoldingSetNodeID::operator==();
}

unint64_t sub_22EFC7230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a3 + 8);
  if (v4 >= *(_DWORD *)(a3 + 12))
  {
    v9 = a3;
    v11 = *(_QWORD *)(a2 + 8);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a3 = v9;
    v3 = v11;
    v4 = *(_DWORD *)(v9 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a3 + 4 * v4) = v3;
  v5 = *(_DWORD *)(a3 + 12);
  v6 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v6;
  if (v6 >= v5)
  {
    v10 = a3;
    v12 = HIDWORD(v3);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a3 = v10;
    HIDWORD(v3) = v12;
    v6 = *(_DWORD *)(v10 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a3 + 4 * v6) = HIDWORD(v3);
  v7 = *(_DWORD *)(a3 + 8) + 1;
  *(_DWORD *)(a3 + 8) = v7;
  return sub_22E3D0BF8(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * v7);
}

uint64_t sub_22EFC72E8(unint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  int i;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  if (!a1 || (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
  {
    v1 = *(_QWORD *)(a1 + 16);
    v2 = v1 & 0xFFFFFFFFFFFFFFF8;
    if ((v1 & 4) != 0)
      v2 = *(_QWORD *)v2;
    for (i = *(_WORD *)(v2 + 8) & 0x7F; i != 83; i = *(_WORD *)(v2 + 8) & 0x7F)
    {
      v4 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v4 = -56;
          goto LABEL_10;
        }
        if (i == 81)
          goto LABEL_10;
      }
      else
      {
        if (i <= 0x18)
        {
          if (i == 16)
            goto LABEL_9;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_10;
          if (i == 24)
          {
LABEL_9:
            v4 = -48;
            goto LABEL_10;
          }
        }
        if (i == 70)
        {
          v4 = -64;
          goto LABEL_10;
        }
      }
      v6 = i - 52;
      if ((i - 33) >= 5)
        v7 = -48;
      else
        v7 = -64;
      if (v6 >= 6)
        v4 = v7;
      else
        v4 = -72;
LABEL_10:
      v5 = *(_QWORD *)(v2 + v4 + 16);
      v2 = v5 & 0xFFFFFFFFFFFFFFF8;
      if ((v5 & 4) != 0)
        v2 = *(_QWORD *)v2;
    }
    a1 = v2 - 40;
  }
  return *(_QWORD *)(a1 + 88);
}

_DWORD *sub_22EFC73F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _DWORD *v5;

  v5 = (_DWORD *)sub_22E3CD3D4(a2 + 2032, a1 + a4 + 8, 3);
  *v5 = 0;
  v5[1] = a3;
  return v5 + 2;
}

uint64_t sub_22EFC7430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;

  v5 = *(_QWORD *)(a2 + 2000);
  if ((*(_BYTE *)(v5 + 240) & 0xE0) != 0)
  {
    v6 = a3 == 0;
  }
  else
  {
    v6 = a3 == 0;
    if (a3 && (*(_QWORD *)(v5 + 20) & 0x200000000000000) == 0)
      return sub_22E3CD3D4(a2 + 2032, a4 + a1, 3);
  }
  v7 = (_QWORD *)sub_22E3CD3D4(a2 + 2032, a4 + a1 + 8, 3);
  if (v6)
    goto LABEL_4;
  v9 = *(_WORD *)(a3 + 8) & 0x7F;
  v10 = -40;
  if (v9 > 0x46)
  {
    if (v9 == 83)
      goto LABEL_24;
    if (v9 == 71)
    {
      v10 = -56;
      goto LABEL_24;
    }
    if (v9 != 81)
    {
LABEL_19:
      v12 = v9 - 52;
      v13 = v9 - 33 >= 5;
      v14 = -48;
      if (!v13)
        v14 = -64;
      if (v12 >= 6)
        v10 = v14;
      else
        v10 = -72;
    }
  }
  else
  {
    if (v9 > 0x18)
      goto LABEL_18;
    if (v9 == 16)
    {
LABEL_8:
      v10 = -48;
      goto LABEL_24;
    }
    if (((1 << v9) & 0x1066) == 0)
    {
      if (v9 == 24)
        goto LABEL_8;
LABEL_18:
      if (v9 == 70)
      {
        v10 = -64;
        goto LABEL_24;
      }
      goto LABEL_19;
    }
  }
LABEL_24:
  v15 = a3 + v10;
  if ((*(_BYTE *)(a3 + v10 + 29) & 0x80) != 0)
  {
    v8 = sub_22EFCEBB0(v15);
    goto LABEL_28;
  }
  if ((*(_BYTE *)(v15 + 8) & 6) != 0)
  {
    v8 = *(_QWORD *)(v15 - 8);
    goto LABEL_28;
  }
LABEL_4:
  v8 = 0;
LABEL_28:
  *v7 = v8;
  return (uint64_t)(v7 + 1);
}

uint64_t sub_22EFC7594(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a1 || (v1 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v2 = *(_QWORD *)(a1 + 16);
    v3 = v2 & 0xFFFFFFFFFFFFFFF8;
    if ((v2 & 4) != 0)
      v3 = *(_QWORD *)v3;
    for (i = *(_WORD *)(v3 + 8) & 0x7F; i != 83; i = *(_WORD *)(v3 + 8) & 0x7F)
    {
      v5 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v5 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v5 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v6 = i - 52;
            if ((i - 33) >= 5)
              v7 = -48;
            else
              v7 = -64;
            if (v6 >= 6)
              v5 = v7;
            else
              v5 = -72;
            goto LABEL_22;
          }
          v5 = -64;
        }
      }
LABEL_22:
      v8 = *(_QWORD *)(v3 + v5 + 16);
      v3 = v8 & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 4) != 0)
        v3 = *(_QWORD *)v3;
    }
    v1 = v3 - 40;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v1 + 88) + 16048);
  if ((*(_DWORD *)(a1 + 28) & 0x8000) != 0)
    v10 = *(unsigned int *)(a1 - 8);
  else
    v10 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 88))(v9, v10);
}

uint64_t sub_22EFC76C0(unint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  int i;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!a1 || (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
  {
    v1 = *(_QWORD *)(a1 + 16);
    v2 = v1 & 0xFFFFFFFFFFFFFFF8;
    if ((v1 & 4) != 0)
      v2 = *(_QWORD *)v2;
    for (i = *(_WORD *)(v2 + 8) & 0x7F; i != 83; i = *(_WORD *)(v2 + 8) & 0x7F)
    {
      v4 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v4 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v4 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v5 = i - 52;
            if ((i - 33) >= 5)
              v6 = -48;
            else
              v6 = -64;
            if (v5 >= 6)
              v4 = v6;
            else
              v4 = -72;
            goto LABEL_22;
          }
          v4 = -64;
        }
      }
LABEL_22:
      v7 = *(_QWORD *)(v2 + v4 + 16);
      v2 = v7 & 0xFFFFFFFFFFFFFFF8;
      if ((v7 & 4) != 0)
        v2 = *(_QWORD *)v2;
    }
    a1 = v2 - 40;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 2000);
  if ((*(_BYTE *)(v8 + 240) & 0xE0) != 0)
    return 1;
  else
    return (*(_QWORD *)(v8 + 20) >> 57) & 1;
}

uint64_t sub_22EFC77E8(uint64_t result, int a2)
{
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_DWORD *)(result + 28);
  if (a2)
    v3 = 128;
  else
    v3 = 0;
  v4 = v2 & 0xFFFFFF7F | v3;
  *(_DWORD *)(result + 28) = v4;
  if (a2)
  {
    if ((v2 & 0x7F) != 0x40)
    {
      v4 &= 0xFFFF9FFF;
      *(_DWORD *)(result + 28) = v4;
    }
    if ((v4 & 0x7F) == 0x3D)
    {
      v5 = *(unsigned int *)(result + 100);
      if ((_DWORD)v5)
      {
        v6 = (uint64_t *)(result + 104);
        v7 = 8 * v5;
        do
        {
          v8 = *v6++;
          result = sub_22EFC77E8(v8, 1);
          v7 -= 8;
        }
        while (v7);
      }
    }
  }
  return result;
}

uint64_t sub_22EFC7864(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 28) & 0x7F;
  if (a1 && v1 == 38)
    return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                              + 33) >> 7;
  if (a1 && v1 == 59 || v1 == 32)
    return *(_BYTE *)(a1 + 80) != 0;
  return 0;
}

uint64_t sub_22EFC78D8(uint64_t a1)
{
  if (a1 && (*(_DWORD *)(a1 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
    return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) == 36;
  else
    return sub_22EFC7864(a1);
}

uint64_t sub_22EFC7910(uint64_t result)
{
  if (!result || (*(_DWORD *)(result + 28) & 0x7Eu) - 58 <= 0xFFFFFFF9)
  {
    if ((*(_DWORD *)(result + 28) & 0x7F) == 0x1D)
      return *(_QWORD *)(result + 48);
    else
      return 0;
  }
  return result;
}

unint64_t sub_22EFC7948(unint64_t a1)
{
  unint64_t v1;
  BOOL v2;
  int v3;
  uint64_t v4;

  if (a1 && (*(_DWORD *)(a1 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    v1 = *(_QWORD *)(a1 + 144) & 0xFFFFFFFFFFFFFFF8;
    v2 = (*(_QWORD *)(a1 + 144) & 6) == 0;
    goto LABEL_7;
  }
  v3 = *(_DWORD *)(a1 + 28) & 0x7F;
  if (a1 && (v3 - 38) >= 0xFFFFFFFD)
  {
    v1 = *(_QWORD *)(a1 + 136) & 0xFFFFFFFFFFFFFFF8;
    v2 = (*(_QWORD *)(a1 + 136) & 4) == 0;
LABEL_7:
    if (v2)
      return v1;
    else
      return 0;
  }
  if (!a1 || (v3 - 67) < 0xFFFFFFF9)
  {
    v4 = 0;
    if (a1 && v3 == 40)
      return *(_QWORD *)(a1 + 88);
    return v4;
  }
  return sub_22EFB6870(a1);
}

uint64_t sub_22EFC79C8(unint64_t a1)
{
  int v2;
  unsigned int v3;
  BOOL v4;
  unint64_t v5;
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  _QWORD *v12;

  v2 = *(_DWORD *)(a1 + 28);
  v3 = v2 & 0x7F;
  v4 = v3 > 0x39 || ((1 << (v2 & 0x7F)) & 0x3F0003E01011066) == 0;
  if (!v4 || (v3 - 70 <= 0xD ? (v7 = ((1 << (v3 - 70)) & 0x2803) == 0) : (v7 = 1), !v7 || v3 - 19 <= 4))
  {
    v5 = sub_22EFCAE04(a1);
    return sub_22EFC7ADC(v5);
  }
  v8 = *(_QWORD *)(a1 + 16);
  v9 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v2 & 0x1800000) != 0)
  {
    if ((v8 & 4) == 0)
      goto LABEL_14;
    ++v9;
LABEL_27:
    v9 = (_QWORD *)*v9;
    goto LABEL_14;
  }
  if ((v8 & 4) != 0)
    goto LABEL_27;
LABEL_14:
  v10 = sub_22EFC7ADC((unint64_t)v9);
  result = 1;
  if ((v10 & 1) == 0 && v3 - 26 >= 7)
  {
    v11 = sub_22EFC7948(a1);
    if (v11)
    {
      v12 = (_QWORD *)(v11 + 56);
    }
    else if ((*(_DWORD *)(a1 + 28) & 0x7F) == 0x42)
    {
      v12 = (_QWORD *)(a1 + 424);
    }
    else
    {
      if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x25)
        return 0;
      v12 = (_QWORD *)(a1 + 184);
    }
    return *v12 != 0;
  }
  return result;
}

uint64_t sub_22EFC7ADC(unint64_t a1)
{
  unint64_t v1;
  __int16 v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;

  while (1)
  {
    v1 = 0;
    v2 = *(_WORD *)(a1 + 8);
    v3 = v2 & 0x7F;
    switch(v3)
    {
      case 0x10u:
        return v1;
      case 0x25u:
        return 1;
      case 0x53u:
        return v1;
    }
    if (v3 - 38 >= 0xFFFFFFFD)
    {
      v4 = *(_QWORD *)(a1 + 72);
      if (v4 >= 8 && (v4 & 4) == 0)
        return 1;
      v5 = *(_QWORD *)(a1 + 64);
      if (v5 && ((*(unsigned __int16 *)(v5 + 8) | (*(unsigned __int8 *)(v5 + 10) << 16)) & 0x100000) != 0)
      {
        v1 = *(_DWORD *)(v5 + 104) & 3;
        if ((_DWORD)v1 == 1)
          return v1;
        if ((_DWORD)v1 == 2)
          return 0;
      }
    }
    if ((v2 & 0x7Eu) - 58 < 0xFFFFFFFA)
    {
LABEL_33:
      v9 = -40;
      if ((v2 & 0x7Fu) <= 0x46)
      {
        if (v3 <= 0x18)
        {
          if (v3 == 16)
            goto LABEL_36;
          if (((1 << v3) & 0x1066) != 0)
            goto LABEL_47;
          if (v3 == 24)
            goto LABEL_36;
        }
        if (v3 == 70)
          goto LABEL_45;
LABEL_43:
        if (v3 - 52 >= 6)
        {
          if (v3 - 33 >= 5)
          {
LABEL_36:
            v9 = -48;
            goto LABEL_47;
          }
LABEL_45:
          v9 = -64;
          goto LABEL_47;
        }
        v9 = -72;
        goto LABEL_47;
      }
      if (v3 == 71)
      {
        v9 = -56;
        goto LABEL_47;
      }
      if (v3 != 81)
        goto LABEL_43;
LABEL_47:
      v10 = *(_QWORD *)(a1 + v9 + 16);
      v1 = v10 & 0xFFFFFFFFFFFFFFF8;
      if ((v10 & 4) != 0)
        v1 = *(_QWORD *)v1;
      if (!v1)
        return v1;
      v11 = -40;
      if ((int)v3 > 70)
      {
        if (v3 == 71)
        {
          v11 = -56;
        }
        else if (v3 != 81)
        {
          goto LABEL_60;
        }
      }
      else
      {
        if (v3 > 0x18)
          goto LABEL_59;
        if (v3 == 16)
          goto LABEL_53;
        if (((1 << v3) & 0x1066) != 0)
          goto LABEL_66;
        if (v3 == 24)
        {
LABEL_53:
          v11 = -48;
        }
        else
        {
LABEL_59:
          if (v3 != 70)
          {
LABEL_60:
            v12 = v3 - 52;
            if (v3 - 33 >= 5)
              v13 = -48;
            else
              v13 = -64;
            if (v12 >= 6)
              v11 = v13;
            else
              v11 = -72;
            goto LABEL_66;
          }
          v11 = -64;
        }
      }
LABEL_66:
      v14 = *(_QWORD *)(a1 + v11 + 16);
      a1 = v14 & 0xFFFFFFFFFFFFFFF8;
      if ((v14 & 4) != 0)
LABEL_82:
        a1 = *(_QWORD *)a1;
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 72);
      if (v6 >= 8 && (v6 & 6) == 0)
        return 1;
      v7 = -40;
      if ((v2 & 0x7Fu) <= 0x46)
      {
        if (v3 <= 0x18)
        {
          if (v3 == 16)
            goto LABEL_17;
          if (((1 << v3) & 0x1066) != 0)
            goto LABEL_28;
          if (v3 == 24)
            goto LABEL_17;
        }
        if (v3 == 70)
          goto LABEL_26;
LABEL_24:
        if (v3 - 52 >= 6)
        {
          if (v3 - 33 >= 5)
          {
LABEL_17:
            v7 = -48;
            goto LABEL_28;
          }
LABEL_26:
          v7 = -64;
          goto LABEL_28;
        }
        v7 = -72;
        goto LABEL_28;
      }
      if (v3 == 71)
      {
        v7 = -56;
        goto LABEL_28;
      }
      if (v3 != 81)
        goto LABEL_24;
LABEL_28:
      if ((*(_WORD *)(a1 + v7 + 30) & 0x180) == 0)
        goto LABEL_33;
      v8 = -40;
      if ((v2 & 0x7Fu) > 0x46)
      {
        if (v3 == 71)
        {
          v8 = -56;
        }
        else if (v3 != 81)
        {
          goto LABEL_74;
        }
      }
      else
      {
        if (v3 > 0x18)
          goto LABEL_73;
        if (v3 == 16)
          goto LABEL_32;
        if (((1 << v3) & 0x1066) != 0)
          goto LABEL_80;
        if (v3 == 24)
        {
LABEL_32:
          v8 = -48;
        }
        else
        {
LABEL_73:
          if (v3 != 70)
          {
LABEL_74:
            v15 = v3 - 52;
            if (v3 - 33 >= 5)
              v16 = -48;
            else
              v16 = -64;
            if (v15 >= 6)
              v8 = v16;
            else
              v8 = -72;
            goto LABEL_80;
          }
          v8 = -64;
        }
      }
LABEL_80:
      v17 = *(_QWORD *)(a1 + v8 + 16);
      a1 = v17 & 0xFFFFFFFFFFFFFFF8;
      if ((v17 & 4) != 0)
      {
        a1 += 8;
        goto LABEL_82;
      }
    }
  }
}

uint64_t sub_22EFC7E08(unint64_t a1)
{
  unint64_t v1;
  unsigned int v2;
  BOOL v3;
  int v4;
  unint64_t v5;
  uint64_t *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v14;

  while (1)
  {
    v1 = a1;
    v2 = *(_DWORD *)(a1 + 28) & 0x7F;
    v3 = v2 > 0x39 || ((1 << v2) & 0x3F0003E01011066) == 0;
    if (!v3 || (v2 - 70 <= 0xD ? (v14 = ((1 << (v2 - 70)) & 0x2803) == 0) : (v14 = 1), !v14 || v2 - 19 <= 4))
    {
      v4 = *(_WORD *)(sub_22EFCAE04(a1) + 8) & 0x7F;
      if (v4 == 16 || v4 == 83)
        return 0;
    }
    v5 = sub_22EFC7948(v1);
    if (v5)
    {
      v6 = (uint64_t *)(v5 + 56);
      goto LABEL_9;
    }
    v7 = *(_DWORD *)(v1 + 28);
    v8 = v7 & 0x7F;
    if (v8 == 66)
      break;
    if (v8 == 37)
    {
      v6 = (uint64_t *)(v1 + 184);
      goto LABEL_9;
    }
LABEL_11:
    if ((v8 - 38) >= 0xFFFFFFFD
      && (v9 = *(_QWORD *)(v1 + 128)) != 0
      && ((*(unsigned __int16 *)(v9 + 8) | (*(unsigned __int8 *)(v9 + 10) << 16)) & 0x100000) != 0
      && (*(_DWORD *)(v9 + 104) & 3) == 1)
    {
      a1 = sub_22F3B1CF4(v1);
      if (!a1)
      {
        v7 = *(_DWORD *)(v1 + 28);
        goto LABEL_15;
      }
    }
    else
    {
LABEL_15:
      v10 = *(_QWORD *)(v1 + 16);
      v11 = v10 & 0xFFFFFFFFFFFFFFF8;
      if ((v7 & 0x1800000) != 0)
      {
        if ((v10 & 4) == 0)
          goto LABEL_23;
        v11 += 8;
      }
      else if ((v10 & 4) == 0)
      {
        goto LABEL_23;
      }
      v11 = *(_QWORD *)v11;
LABEL_23:
      v12 = *(_WORD *)(v11 + 8) & 0x7F;
      v13 = -40;
      if (v12 <= 0x46)
      {
        if (v12 <= 0x18)
        {
          if (v12 == 16)
            goto LABEL_26;
          if (((1 << v12) & 0x1066) != 0)
            goto LABEL_46;
          if (v12 == 24)
            goto LABEL_26;
        }
        if (v12 == 70)
          goto LABEL_44;
LABEL_42:
        if (v12 - 52 >= 6)
        {
          if (v12 - 33 >= 5)
          {
LABEL_26:
            v13 = -48;
            goto LABEL_46;
          }
LABEL_44:
          v13 = -64;
          goto LABEL_46;
        }
        v13 = -72;
        goto LABEL_46;
      }
      if (v12 == 83)
        goto LABEL_46;
      if (v12 == 71)
      {
        v13 = -56;
        goto LABEL_46;
      }
      if (v12 != 81)
        goto LABEL_42;
LABEL_46:
      a1 = v11 + v13;
    }
  }
  v6 = (uint64_t *)(v1 + 424);
LABEL_9:
  if (!*v6)
  {
    v7 = *(_DWORD *)(v1 + 28);
    v8 = v7 & 0x7F;
    goto LABEL_11;
  }
  return sub_22EFE90A8(*v6) + 1;
}

unint64_t sub_22EFC8010(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) != 0)
    v2 = *(_QWORD *)v2;
  if (!v2)
    return 0;
  do
  {
    v3 = 0;
    v4 = *(_WORD *)(v2 + 8) & 0x7F;
    if (v4 == 16 || v4 == 83)
      break;
    v6 = v4 > 0x18 || ((1 << v4) & 0x1000006) == 0;
    if (!v6 || v4 - 52 < 6)
      return v2;
    v7 = *(_QWORD *)(sub_22EFCAD5C(v2) + 16);
    v2 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 4) != 0)
      v2 = *(_QWORD *)v2;
    v3 = 0;
  }
  while (v2);
  return v3;
}

uint64_t sub_22EFC80B8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2 & 0xFFFFFFFFFFFFFFFBLL;
  return result;
}

uint64_t sub_22EFC80C4(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;

  v3 = result;
  v4 = *(_QWORD *)(result + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) != 0)
  {
    if (*(_QWORD *)(v5 + 8) == a2)
      return result;
    *(_QWORD *)(v5 + 8) = a2;
  }
  else
  {
    if (v5 == a2)
      return result;
    v6 = result;
    if ((*(_DWORD *)(result + 28) & 0x7F) != 0x53)
    {
      v7 = *(_WORD *)(v5 + 8) & 0x7F;
      v8 = v5;
      if (v7 != 83)
      {
        v8 = v5;
        do
        {
          v9 = -40;
          if (v7 > 70)
          {
            if (v7 == 71)
            {
              v9 = -56;
            }
            else if (v7 != 81)
            {
              goto LABEL_16;
            }
          }
          else
          {
            if (v7 > 0x18)
              goto LABEL_15;
            if (v7 == 16)
              goto LABEL_9;
            if (((1 << v7) & 0x1066) != 0)
              goto LABEL_22;
            if (v7 == 24)
            {
LABEL_9:
              v9 = -48;
            }
            else
            {
LABEL_15:
              if (v7 != 70)
              {
LABEL_16:
                v10 = v7 - 52;
                if ((v7 - 33) >= 5)
                  v11 = -48;
                else
                  v11 = -64;
                if (v10 >= 6)
                  v9 = v11;
                else
                  v9 = -72;
                goto LABEL_22;
              }
              v9 = -64;
            }
          }
LABEL_22:
          v12 = *(_QWORD *)(v8 + v9 + 16);
          v8 = v12 & 0xFFFFFFFFFFFFFFF8;
          if ((v12 & 4) != 0)
            v8 = *(_QWORD *)v8;
          v7 = *(_WORD *)(v8 + 8) & 0x7F;
        }
        while (v7 != 83);
      }
      v6 = v8 - 40;
    }
    result = sub_22E3CD3D4(*(_QWORD *)(v6 + 88) + 2032, 16, 3);
    *(_QWORD *)result = v5;
    *(_QWORD *)(result + 8) = a2;
    *(_QWORD *)(v3 + 16) = result | 4;
  }
  if ((*(_BYTE *)(v3 + 29) & 0x80) == 0)
  {
    result = sub_22EA41B5C(a2);
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF9 | (2 * result);
    if ((result & 3) != 0)
    {
      v13 = *(_WORD *)(a2 + 8) & 0x7F;
      v14 = -40;
      if (v13 > 0x46)
      {
        if (v13 != 83)
        {
          if (v13 == 71)
          {
            v14 = -56;
            goto LABEL_50;
          }
          if (v13 == 81)
            goto LABEL_50;
LABEL_45:
          v15 = v13 - 52;
          v16 = v13 - 33 >= 5;
          v17 = -48;
          if (!v16)
            v17 = -64;
          if (v15 >= 6)
            v14 = v17;
          else
            v14 = -72;
        }
      }
      else
      {
        if (v13 > 0x18)
          goto LABEL_44;
        if (v13 != 16)
        {
          if (((1 << v13) & 0x1066) != 0)
            goto LABEL_50;
          if (v13 != 24)
          {
LABEL_44:
            if (v13 == 70)
            {
              v14 = -64;
              goto LABEL_50;
            }
            goto LABEL_45;
          }
        }
        v14 = -48;
      }
LABEL_50:
      v18 = a2 + v14;
      if ((*(_BYTE *)(a2 + v14 + 29) & 0x80) != 0)
      {
        result = sub_22EFCEBB0(v18);
      }
      else if ((*(_BYTE *)(v18 + 8) & 6) != 0)
      {
        result = *(_QWORD *)(v18 - 8);
      }
      else
      {
        result = 0;
      }
      *(_QWORD *)(v3 - 8) = result;
    }
  }
  return result;
}

uint64_t sub_22EFC8324(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t result;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) != 0)
    v2 = *(_QWORD *)(v2 + 8);
  result = sub_22EFC7ADC(v2);
  if ((_DWORD)result)
  {
    while (1)
    {
      v4 = *(_WORD *)(v2 + 8) & 0x7F;
      v5 = v4 > 0x18 || ((1 << v4) & 0x1000006) == 0;
      if (!v5 || v4 - 52 < 6)
        return 1;
      if (v4 - 33 > 4)
        break;
      if (v4 >= 0x23)
      {
        v6 = *(_QWORD *)(v2 + 64);
        if (v6)
        {
          if (((*(unsigned __int16 *)(v6 + 8) | (*(unsigned __int8 *)(v6 + 10) << 16)) & 0x100000) != 0)
            return 1;
        }
      }
      v7 = *(_QWORD *)(v2 - 48);
      v2 = v7 & 0xFFFFFFFFFFFFFFF8;
      if ((v7 & 4) != 0)
        v2 = *(_QWORD *)(v2 + 8);
    }
    return 0;
  }
  return result;
}

uint64_t sub_22EFC83D8(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) != 0)
    v2 = *(_QWORD *)v2;
  if (v2)
  {
    while (1)
    {
      v3 = *(_WORD *)(v2 + 8) & 0x7F;
      if (v3 == 16)
        break;
      v5 = -40;
      if ((*(_WORD *)(v2 + 8) & 0x7Fu) > 0x46)
      {
        if (v3 != 81 && v3 != 83)
        {
          if (v3 != 71)
            goto LABEL_21;
          v5 = -56;
        }
      }
      else
      {
        if (v3 <= 0x18)
        {
          if (((1 << v3) & 0x1066) != 0)
            goto LABEL_27;
          if (v3 == 24)
            goto LABEL_13;
        }
        if (v3 != 70)
        {
LABEL_21:
          v6 = v3 - 52;
          if (v3 - 33 >= 5)
            v7 = -48;
          else
            v7 = -64;
          if (v6 >= 6)
            v5 = v7;
          else
            v5 = -72;
          goto LABEL_27;
        }
        v5 = -64;
      }
LABEL_27:
      v8 = *(_QWORD *)(v2 + v5 + 16);
      v2 = v8 & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 4) != 0)
        v2 = *(_QWORD *)v2;
      if (!v2)
        return 0;
    }
    if (*(_QWORD *)(v2 - 8) < 8uLL || (*(_QWORD *)(v2 - 8) & 7) != 0)
      return 1;
LABEL_13:
    v5 = -48;
    goto LABEL_27;
  }
  return 0;
}

BOOL sub_22EFC84D4(unint64_t a1)
{
  _BOOL8 result;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v11;

  if ((*(_WORD *)(a1 + 8) & 0x7F) != 0x10)
    return 0;
  v2 = a1;
  while ((*(_BYTE *)(v2 + 56) & 4) != 0)
  {
    v11 = *(_QWORD *)(sub_22EFCAD5C(v2) + 16);
    v2 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 4) != 0)
      v2 = *(_QWORD *)v2;
    result = 0;
    if ((*(_WORD *)(v2 + 8) & 0x7F) != 0x10)
      return result;
  }
  v3 = *(_QWORD *)(v2 - 32);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  if ((*(_WORD *)(sub_22EFCBB30((unint64_t)v4) + 8) & 0x7F) != 0x53)
    return 0;
  result = 0;
  v5 = *(_QWORD *)(v2 - 8);
  if ((v5 & 7) != 0)
    return result;
  v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  if (!v6)
    return result;
  v7 = *(_QWORD *)(v6 + 16);
  if (*(_DWORD *)v7 != 3)
    return 0;
  v8 = *(unsigned __int16 *)(v7 + 16);
  v9 = *(unsigned __int8 *)(v7 + 18);
  return v8 == 29811 && v9 == 100;
}

BOOL sub_22EFC85AC(unint64_t a1)
{
  _BOOL8 result;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v11;

  if ((*(_WORD *)(a1 + 8) & 0x7F) != 0x10)
    return 0;
  v2 = a1;
  while ((*(_BYTE *)(v2 + 56) & 4) != 0)
  {
    v11 = *(_QWORD *)(sub_22EFCAD5C(v2) + 16);
    v2 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 4) != 0)
      v2 = *(_QWORD *)v2;
    result = 0;
    if ((*(_WORD *)(v2 + 8) & 0x7F) != 0x10)
      return result;
  }
  v3 = *(_QWORD *)(v2 - 32);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  if ((*(_WORD *)(sub_22EFCBB30((unint64_t)v4) + 8) & 0x7F) != 0x53)
    return 0;
  result = 0;
  v5 = *(_QWORD *)(v2 - 8);
  if ((v5 & 7) != 0)
    return result;
  v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  if (!v6)
    return result;
  v7 = *(_QWORD *)(v6 + 16);
  if (*(_DWORD *)v7 != 5)
    return 0;
  v8 = *(_DWORD *)(v7 + 16);
  v9 = *(unsigned __int8 *)(v7 + 20);
  return v8 == 1635018093 && v9 == 108;
}

BOOL sub_22EFC8688(unint64_t a1)
{
  _BOOL8 result;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;

  if ((*(_WORD *)(a1 + 8) & 0x7F) != 0x10)
    return 0;
  v2 = a1;
  while ((*(_BYTE *)(v2 + 56) & 4) != 0)
  {
    v12 = *(_QWORD *)(sub_22EFCAD5C(v2) + 16);
    v2 = v12 & 0xFFFFFFFFFFFFFFF8;
    if ((v12 & 4) != 0)
      v2 = *(_QWORD *)v2;
    result = 0;
    if ((*(_WORD *)(v2 + 8) & 0x7F) != 0x10)
      return result;
  }
  v3 = *(_QWORD *)(v2 - 32);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  v5 = sub_22EFCBB30((unint64_t)v4);
  result = sub_22EFC85AC(v5);
  if (result)
  {
    result = 0;
    v6 = *(_QWORD *)(v2 - 8);
    if ((v6 & 7) == 0)
    {
      v7 = v6 & 0xFFFFFFFFFFFFFFF8;
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 16);
        if (*(_DWORD *)v8 != 10)
          return 0;
        v9 = *(_QWORD *)(v8 + 16);
        v10 = *(unsigned __int16 *)(v8 + 24);
        return v9 == 0x6963617274796172 && v10 == 26478;
      }
    }
  }
  return result;
}

unint64_t sub_22EFC8764(unint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  int i;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  if (!result || (*(_DWORD *)(result + 28) & 0x7F) != 0x53)
  {
    v1 = *(_QWORD *)(result + 16);
    v2 = v1 & 0xFFFFFFFFFFFFFFF8;
    if ((v1 & 4) != 0)
      v2 = *(_QWORD *)v2;
    for (i = *(_WORD *)(v2 + 8) & 0x7F; i != 83; i = *(_WORD *)(v2 + 8) & 0x7F)
    {
      v4 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v4 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_20;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_19;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_10;
        if (i == 24)
        {
LABEL_9:
          v4 = -48;
        }
        else
        {
LABEL_19:
          if (i != 70)
          {
LABEL_20:
            v6 = i - 52;
            if ((i - 33) >= 5)
              v7 = -48;
            else
              v7 = -64;
            if (v6 >= 6)
              v4 = v7;
            else
              v4 = -72;
            goto LABEL_10;
          }
          v4 = -64;
        }
      }
LABEL_10:
      v5 = *(_QWORD *)(v2 + v4 + 16);
      v2 = v5 & 0xFFFFFFFFFFFFFFF8;
      if ((v5 & 4) != 0)
        v2 = *(_QWORD *)v2;
    }
    return v2 - 40;
  }
  return result;
}

uint64_t sub_22EFC8868(unint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  int i;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  if (!a1 || (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
  {
    v1 = *(_QWORD *)(a1 + 16);
    v2 = v1 & 0xFFFFFFFFFFFFFFF8;
    if ((v1 & 4) != 0)
      v2 = *(_QWORD *)v2;
    for (i = *(_WORD *)(v2 + 8) & 0x7F; i != 83; i = *(_WORD *)(v2 + 8) & 0x7F)
    {
      v4 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v4 = -56;
          goto LABEL_10;
        }
        if (i == 81)
          goto LABEL_10;
      }
      else
      {
        if (i <= 0x18)
        {
          if (i == 16)
            goto LABEL_9;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_10;
          if (i == 24)
          {
LABEL_9:
            v4 = -48;
            goto LABEL_10;
          }
        }
        if (i == 70)
        {
          v4 = -64;
          goto LABEL_10;
        }
      }
      v6 = i - 52;
      if ((i - 33) >= 5)
        v7 = -48;
      else
        v7 = -64;
      if (v6 >= 6)
        v4 = v7;
      else
        v4 = -72;
LABEL_10:
      v5 = *(_QWORD *)(v2 + v4 + 16);
      v2 = v5 & 0xFFFFFFFFFFFFFFF8;
      if ((v5 & 4) != 0)
        v2 = *(_QWORD *)v2;
    }
    a1 = v2 - 40;
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 88) + 2000);
}

uint64_t sub_22EFC8974(unint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  int i;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  if (!a1 || (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
  {
    v1 = *(_QWORD *)(a1 + 16);
    v2 = v1 & 0xFFFFFFFFFFFFFFF8;
    if ((v1 & 4) != 0)
      v2 = *(_QWORD *)v2;
    for (i = *(_WORD *)(v2 + 8) & 0x7F; i != 83; i = *(_WORD *)(v2 + 8) & 0x7F)
    {
      v4 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v4 = -56;
          goto LABEL_10;
        }
        if (i == 81)
          goto LABEL_10;
      }
      else
      {
        if (i <= 0x18)
        {
          if (i == 16)
            goto LABEL_9;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_10;
          if (i == 24)
          {
LABEL_9:
            v4 = -48;
            goto LABEL_10;
          }
        }
        if (i == 70)
        {
          v4 = -64;
          goto LABEL_10;
        }
      }
      v6 = i - 52;
      if ((i - 33) >= 5)
        v7 = -48;
      else
        v7 = -64;
      if (v6 >= 6)
        v4 = v7;
      else
        v4 = -72;
LABEL_10:
      v5 = *(_QWORD *)(v2 + v4 + 16);
      v2 = v5 & 0xFFFFFFFFFFFFFFF8;
      if ((v5 & 4) != 0)
        v2 = *(_QWORD *)v2;
    }
    a1 = v2 - 40;
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16056);
}

uint64_t sub_22EFC8A80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  int j;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;

  if ((*(_DWORD *)(a1 + 28) & 0x100) != 0)
  {
    v3 = a1;
    v4 = a1;
    if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = v5 & 0xFFFFFFFFFFFFFFF8;
      if ((v5 & 4) != 0)
        v6 = *(_QWORD *)v6;
      for (i = *(_WORD *)(v6 + 8) & 0x7F; i != 83; i = *(_WORD *)(v6 + 8) & 0x7F)
      {
        v8 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v8 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_18;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_17;
          if (i == 16)
            goto LABEL_11;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_24;
          if (i == 24)
          {
LABEL_11:
            v8 = -48;
          }
          else
          {
LABEL_17:
            if (i != 70)
            {
LABEL_18:
              v9 = i - 52;
              if ((i - 33) >= 5)
                v10 = -48;
              else
                v10 = -64;
              if (v9 >= 6)
                v8 = v10;
              else
                v8 = -72;
              goto LABEL_24;
            }
            v8 = -64;
          }
        }
LABEL_24:
        v11 = *(_QWORD *)(v6 + v8 + 16);
        v6 = v11 & 0xFFFFFFFFFFFFFFF8;
        if ((v11 & 4) != 0)
          v6 = *(_QWORD *)v6;
      }
      v4 = v6 - 40;
    }
    v12 = *(_QWORD *)(v4 + 88);
    v47 = a1;
    v13 = *(_DWORD *)(v12 + 1504);
    if (v13)
    {
      v14 = *(_QWORD *)(v12 + 1488);
      v15 = v13 - 1;
      v16 = v15 & ((a1 >> 4) ^ (a1 >> 9));
      v17 = (_QWORD *)(v14 + 16 * v16);
      v18 = *v17;
      if (*v17 == a1)
      {
LABEL_41:
        v23 = (unint64_t *)v17[1];
        if (!v23)
        {
          v23 = (unint64_t *)sub_22E3CD3D4(v12 + 2032, 48, 3);
          *v23 = (unint64_t)(v23 + 2);
          v23[1] = 0x400000000;
          v17[1] = v23;
        }
        if ((*(_DWORD *)(v3 + 28) & 0x7F) != 0x53)
        {
          v24 = *(_QWORD *)(v3 + 16);
          v25 = v24 & 0xFFFFFFFFFFFFFFF8;
          if ((v24 & 4) != 0)
            v25 = *(_QWORD *)v25;
          for (j = *(_WORD *)(v25 + 8) & 0x7F; j != 83; j = *(_WORD *)(v25 + 8) & 0x7F)
          {
            v27 = -40;
            if (j > 70)
            {
              if (j == 71)
              {
                v27 = -56;
              }
              else if (j != 81)
              {
                goto LABEL_57;
              }
            }
            else
            {
              if (j > 0x18)
                goto LABEL_56;
              if (j == 16)
                goto LABEL_50;
              if (((1 << j) & 0x1066) != 0)
                goto LABEL_63;
              if (j == 24)
              {
LABEL_50:
                v27 = -48;
              }
              else
              {
LABEL_56:
                if (j != 70)
                {
LABEL_57:
                  v28 = j - 52;
                  if ((j - 33) >= 5)
                    v29 = -48;
                  else
                    v29 = -64;
                  if (v28 >= 6)
                    v27 = v29;
                  else
                    v27 = -72;
                  goto LABEL_63;
                }
                v27 = -64;
              }
            }
LABEL_63:
            v30 = *(_QWORD *)(v25 + v27 + 16);
            v25 = v30 & 0xFFFFFFFFFFFFFFF8;
            if ((v30 & 4) != 0)
              v25 = *(_QWORD *)v25;
          }
          v3 = v25 - 40;
        }
        v1 = 0;
        v31 = *(_QWORD *)(v3 + 88);
        v32 = *v23;
        v33 = *v23 + 8 * *((unsigned int *)v23 + 2);
        while (1)
        {
          v34 = v32;
          if (v32 >= v33)
          {
            v35 = v33;
            if (v33 == v32)
              return v1;
            while (*(_WORD *)(*(_QWORD *)v35 + 32) != 98)
            {
              v35 += 8;
              if (v35 == v32)
                return v1;
            }
            v34 = v32;
          }
          else
          {
            while (*(_WORD *)(*(_QWORD *)v34 + 32) != 98)
            {
              v34 += 8;
              if (v34 == v33)
                return v1;
            }
            v35 = v33;
          }
          if (v34 == v35)
            return v1;
          v36 = v32 - 8;
          do
          {
            v37 = v36;
            v39 = *(_QWORD *)(v36 + 8);
            v36 += 8;
            v38 = v39;
          }
          while (*(_WORD *)(v39 + 32) != 98);
          v40 = *(unsigned __int8 *)(v38 + 35);
          v41 = *(_QWORD **)(v38 + 40);
          if (v40)
          {
            if (!v41)
              goto LABEL_90;
            v42 = 0x20000;
          }
          else
          {
            v41 = (_QWORD *)(*(_QWORD *)(*v41 & 0xFFFFFFFFFFFFFFF0) + 16);
            v42 = 4096;
          }
          if ((*(_DWORD *)v41 & v42) != 0)
          {
            v37 = v36;
            goto LABEL_89;
          }
          do
          {
LABEL_90:
            v44 = *(_QWORD *)(v37 + 8);
            v37 += 8;
            v43 = v44;
          }
          while (*(_WORD *)(v44 + 32) != 98);
          v45 = sub_22F37CC74(v43, v31);
          if (v1 <= v45)
            v1 = v45;
          else
            v1 = v1;
LABEL_89:
          v32 = v37 + 8;
        }
      }
      v19 = 0;
      v20 = 1;
      while (v18 != -4096)
      {
        if (v19)
          v21 = 0;
        else
          v21 = v18 == -8192;
        if (v21)
          v19 = v17;
        v22 = v16 + v20++;
        v16 = v22 & v15;
        v17 = (_QWORD *)(v14 + 16 * v16);
        v18 = *v17;
        if (*v17 == a1)
          goto LABEL_41;
      }
      if (v19)
        v46 = v19;
      else
        v46 = v17;
    }
    else
    {
      v46 = 0;
    }
    v17 = sub_22EF771BC(v12 + 1488, (uint64_t)&v47, &v47, v46);
    *v17 = v47;
    v17[1] = 0;
    goto LABEL_41;
  }
  return 0;
}

double sub_22EFC8E88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  double result;
  uint64_t v23;

  if (!a1 || (v1 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v2 = *(_QWORD *)(a1 + 16);
    v3 = v2 & 0xFFFFFFFFFFFFFFF8;
    if ((v2 & 4) != 0)
      v3 = *(_QWORD *)v3;
    for (i = *(_WORD *)(v3 + 8) & 0x7F; i != 83; i = *(_WORD *)(v3 + 8) & 0x7F)
    {
      v5 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v5 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_20;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_19;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_10;
        if (i == 24)
        {
LABEL_9:
          v5 = -48;
        }
        else
        {
LABEL_19:
          if (i != 70)
          {
LABEL_20:
            v7 = i - 52;
            if ((i - 33) >= 5)
              v8 = -48;
            else
              v8 = -64;
            if (v7 >= 6)
              v5 = v8;
            else
              v5 = -72;
            goto LABEL_10;
          }
          v5 = -64;
        }
      }
LABEL_10:
      v6 = *(_QWORD *)(v3 + v5 + 16);
      v3 = v6 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 4) != 0)
        v3 = *(_QWORD *)v3;
    }
    v1 = v3 - 40;
  }
  v9 = *(_QWORD *)(v1 + 88);
  v23 = a1;
  v10 = *(_DWORD *)(v9 + 1504);
  if (v10)
  {
    v11 = *(_QWORD *)(v9 + 1488);
    v12 = v10 - 1;
    v13 = v12 & ((a1 >> 4) ^ (a1 >> 9));
    v14 = (_QWORD *)(v11 + 16 * v13);
    v15 = *v14;
    if (*v14 == a1)
      goto LABEL_29;
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = v14;
      v19 = v13 + v17++;
      v13 = v19 & v12;
      v14 = (_QWORD *)(v11 + 16 * v13);
      v15 = *v14;
      if (*v14 == a1)
        goto LABEL_29;
    }
    if (v16)
      v20 = v16;
    else
      v20 = v14;
  }
  else
  {
    v20 = 0;
  }
  v14 = sub_22EF771BC(v9 + 1488, (uint64_t)&v23, &v23, v20);
  *v14 = v23;
  v14[1] = 0;
LABEL_29:
  if (!v14[1])
  {
    v21 = (_QWORD *)sub_22E3CD3D4(v9 + 2032, 48, 3);
    *v21 = v21 + 2;
    *(_QWORD *)&result = 0x400000000;
    v21[1] = 0x400000000;
    v14[1] = v21;
  }
  return result;
}

uint64_t sub_22EFC9084(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) + 29) & 4) != 0)
    return 1;
  if (a2)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    if (sub_22E4671B0(v4))
      return 1;
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  return (*(unsigned __int8 *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5) + 29) >> 2) & 1;
}

uint64_t sub_22EFC9100(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if ((*(_BYTE *)(result + 29) & 4) == 0)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    if ((*(_BYTE *)(result + 29) & 4) == 0)
    {
      v6 = *(_QWORD *)(a2 + 16056);
      if (v6)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 144))(v6, a1);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
      *(_DWORD *)(result + 28) |= 0x400u;
    }
  }
  return result;
}

uint64_t sub_22EFC9194(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;

  if ((*(_BYTE *)(a1 + 29) & 8) != 0)
    return 1;
  v1 = a1;
  do
  {
    v2 = *(_DWORD *)(a1 + 28);
    v3 = (v2 >> 11) & 1;
    if ((v2 & 0x800) != 0)
      break;
    a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  while (a1 != v1 && a1 != 0);
  return v3;
}

BOOL sub_22EFC91E8(uint64_t a1)
{
  return sub_22E6314F8(a1) || sub_22E624934(a1) || sub_22E4C7388(a1) || sub_22E634350(a1);
}

uint64_t sub_22EFC9238(unint64_t a1)
{
  uint64_t result;

  result = sub_22F3B10FC(a1);
  if (!result)
  {
    result = sub_22F3B1140(a1);
    if (!result)
    {
      result = sub_22F3B1184(a1);
      if (!result)
        return sub_22F3B11C8(a1);
    }
  }
  return result;
}

uint64_t sub_22EFC9284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int i;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  __int128 v19;

  if (!a1 || (v7 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    if ((v8 & 4) != 0)
      v9 = *(_QWORD *)v9;
    for (i = *(_WORD *)(v9 + 8) & 0x7F; i != 83; i = *(_WORD *)(v9 + 8) & 0x7F)
    {
      v11 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v11 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v11 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v12 = i - 52;
            if ((i - 33) >= 5)
              v13 = -48;
            else
              v13 = -64;
            if (v12 >= 6)
              v11 = v13;
            else
              v11 = -72;
            goto LABEL_22;
          }
          v11 = -64;
        }
      }
LABEL_22:
      v14 = *(_QWORD *)(v9 + v11 + 16);
      v9 = v14 & 0xFFFFFFFFFFFFFFF8;
      if ((v14 & 4) != 0)
        v9 = *(_QWORD *)v9;
    }
    v7 = v9 - 40;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 15088);
  v16 = *(void **)(v15 + 224);
  v17 = *(_QWORD *)(v15 + 232);
  if (a3 & 0x7FFFFFFFFFFFFFFFLL | a4 & 0x7FFFFFFF00000000 | a4 & 0x7FFFFFFF)
  {
    *(_QWORD *)&v19 = a3;
    *((_QWORD *)&v19 + 1) = a4;
  }
  else
  {
    v19 = *(_OWORD *)(v15 + 240);
  }
  return sub_22EFC93E8(a1, v16, v17, (uint64_t *)&v19, a2, a5);
}

uint64_t sub_22EFC93E8(uint64_t a1, void *__s2, uint64_t a3, uint64_t *a4, uint64_t a5, _QWORD *a6)
{
  void *v10;
  uint64_t v11;
  int v12;
  _BOOL4 v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int i;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  const void *v36;
  size_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t j;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  void *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  char v57;
  uint64_t v58;
  void *v59;
  const void *v60;
  size_t v61;
  _BYTE *v62;
  unsigned int *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v67;
  _QWORD *v68;
  void *v69;
  void *__p;
  char v71;
  uint64_t *v72;
  _BYTE __dst[40];
  uint64_t v74;

  v10 = __s2;
  v11 = a1;
  v74 = *MEMORY[0x24BDAC8D0];
  v12 = *(_DWORD *)(a1 + 28) & 0x7F;
  v13 = a1 == 0;
  if (a1 && v12 == 29)
  {
    do
    {
      v11 = *(_QWORD *)(v11 + 48);
      v12 = *(_DWORD *)(v11 + 28) & 0x7F;
      v13 = v11 == 0;
      if (v11)
        v14 = v12 == 29;
      else
        v14 = 0;
    }
    while (v14);
  }
  v15 = v12 == 83 && !v13;
  v16 = v11;
  if (!v15)
  {
    v17 = *(_QWORD *)(v11 + 16);
    v18 = v17 & 0xFFFFFFFFFFFFFFF8;
    if ((v17 & 4) != 0)
      v18 = *(_QWORD *)v18;
    for (i = *(_WORD *)(v18 + 8) & 0x7F; i != 83; i = *(_WORD *)(v18 + 8) & 0x7F)
    {
      v20 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v20 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_24;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_23;
        if (i == 16)
          goto LABEL_17;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_30;
        if (i == 24)
        {
LABEL_17:
          v20 = -48;
        }
        else
        {
LABEL_23:
          if (i != 70)
          {
LABEL_24:
            v21 = i - 52;
            if ((i - 33) >= 5)
              v22 = -48;
            else
              v22 = -64;
            if (v21 >= 6)
              v20 = v22;
            else
              v20 = -72;
            goto LABEL_30;
          }
          v20 = -64;
        }
      }
LABEL_30:
      v23 = *(_QWORD *)(v18 + v20 + 16);
      v18 = v23 & 0xFFFFFFFFFFFFFFF8;
      if ((v23 & 4) != 0)
        v18 = *(_QWORD *)v18;
    }
    v16 = v18 - 40;
  }
  v24 = *(_QWORD *)(v16 + 88);
  if ((*(_QWORD *)(*(_QWORD *)(v24 + 2000) + 140) & 0x4000000000000) == 0)
  {
    v25 = *(_QWORD *)(v24 + 15088);
    v26 = *(_QWORD *)(v25 + 264);
    v27 = v26 && v26 == a3;
    if (v27 && !memcmp(*(const void **)(v25 + 256), __s2, v26))
      return 0;
  }
  memset(&__dst[24], 0, 15);
  v28 = sub_22F255ABC(v11);
  v72 = v29;
  if ((uint64_t *)v28 == v29)
  {
    v32 = 0;
    v71 = 0;
    v31 = 0;
    if (!a5)
      goto LABEL_123;
    goto LABEL_105;
  }
  v30 = (uint64_t *)v28;
  v31 = 0;
  v71 = 0;
  v32 = 0;
  v69 = v10;
  v67 = a6;
  v68 = (_QWORD *)(a5 + 8);
  do
  {
    v33 = *v30;
    v34 = *(unsigned __int16 *)(*v30 + 32);
    if (*v30 && v34 == 160)
    {
      v35 = (int)v31 <= 1;
      if ((int)v31 <= 1)
        v31 = 2;
      else
        v31 = v31;
      if (!a5 || !v35)
        goto LABEL_101;
      __p = v32;
      v36 = *(const void **)(v33 + 40);
      v37 = *(unsigned int *)(v33 + 36);
      if (v37 >= 0x17)
      {
        v51 = a5;
        v52 = a3;
        v53 = a4;
        if ((v37 | 7) == 0x17)
          v54 = (v37 & 0xFFFFFFF8) + 8;
        else
          v54 = v37 | 7;
        v38 = operator new(v54 + 1);
        v55 = v54 - 0x7FFFFFFFFFFFFFFFLL;
        a4 = v53;
        a3 = v52;
        a5 = v51;
        v10 = v69;
        *(_QWORD *)&__dst[8] = v37;
        *(_QWORD *)&__dst[16] = v55;
        *(_QWORD *)__dst = v38;
      }
      else
      {
        __dst[23] = v37;
        v38 = __dst;
        if (!(_DWORD)v37)
          goto LABEL_98;
      }
      memmove(v38, v36, v37);
LABEL_98:
      v38[v37] = 0;
      if (v71 < 0)
        operator delete(__p);
      *(_QWORD *)&__dst[24] = *(_QWORD *)&__dst[8];
      v32 = *(void **)__dst;
      *(_QWORD *)&__dst[31] = *(_QWORD *)&__dst[15];
      v71 = __dst[23];
      v31 = 2;
      goto LABEL_101;
    }
    if (v33 && v34 == 337)
    {
      if (!a5)
      {
LABEL_122:
        v31 = 3;
        goto LABEL_123;
      }
      v59 = v32;
      v60 = *(const void **)(v33 + 40);
      v61 = *(unsigned int *)(v33 + 36);
      if (v61 >= 0x17)
      {
        if ((v61 | 7) == 0x17)
          v65 = (v61 & 0xFFFFFFF8) + 8;
        else
          v65 = v61 | 7;
        v62 = operator new(v65 + 1);
        *(_QWORD *)&__dst[8] = v61;
        *(_QWORD *)&__dst[16] = v65 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)__dst = v62;
      }
      else
      {
        __dst[23] = v61;
        v62 = __dst;
        if (!(_DWORD)v61)
          goto LABEL_119;
      }
      memmove(v62, v60, v61);
LABEL_119:
      v32 = v59;
      v62[v61] = 0;
      if (*(char *)(a5 + 23) < 0)
        operator delete(*(void **)a5);
      *(_OWORD *)a5 = *(_OWORD *)__dst;
      *(_QWORD *)(a5 + 16) = *(_QWORD *)&__dst[16];
      goto LABEL_122;
    }
    if (!v33 || v34 != 115)
      goto LABEL_101;
    v39 = v11;
    if ((((*(_DWORD *)(v11 + 28) & 0x7F) == 83) & ~v13) != 0)
      goto LABEL_86;
    for (j = *(_QWORD *)(v11 + 16); ; j = *(_QWORD *)(v41 + v43 + 16))
    {
      v41 = j & 0xFFFFFFFFFFFFFFF8;
      if ((j & 4) != 0)
        v41 = *(_QWORD *)v41;
      v42 = *(_WORD *)(v41 + 8) & 0x7F;
      if (v42 == 83)
        break;
      v43 = -40;
      if ((*(_WORD *)(v41 + 8) & 0x7Fu) > 0x46)
      {
        if (v42 == 71)
        {
          v43 = -56;
          continue;
        }
        if (v42 != 81)
          goto LABEL_76;
      }
      else
      {
        if (v42 > 0x18)
          goto LABEL_75;
        if (v42 == 16)
          goto LABEL_69;
        if (((1 << v42) & 0x1066) == 0)
        {
          if (v42 == 24)
          {
LABEL_69:
            v43 = -48;
            continue;
          }
LABEL_75:
          if (v42 == 70)
          {
            v43 = -64;
            continue;
          }
LABEL_76:
          v44 = v42 - 52;
          v45 = v42 - 33 >= 5;
          v46 = -64;
          if (v45)
            v46 = -48;
          v45 = v44 >= 6;
          v43 = -72;
          if (v45)
            v43 = v46;
          continue;
        }
      }
    }
    v39 = v41 - 40;
LABEL_86:
    v47 = sub_22EFC99A4(*(_QWORD *)(*(_QWORD *)(v39 + 88) + 2000), *v30, a5, v10, a3, *a4, a4[1]);
    if ((_DWORD)v47 == 3)
    {
      if (v67)
      {
        v63 = *(unsigned int **)(*(_QWORD *)(v33 + 40) + 16);
        v64 = *v63;
        *v67 = v63 + 4;
        v67[1] = v64;
      }
      goto LABEL_122;
    }
    v48 = (int)v47 <= (int)v31;
    if ((int)v47 <= (int)v31)
      v31 = v31;
    else
      v31 = v47;
    if (a5 && !v48)
    {
      *(_QWORD *)__dst = *(_QWORD *)&__dst[24];
      *(_QWORD *)&__dst[7] = *(_QWORD *)&__dst[31];
      v49 = *(void **)a5;
      *(_QWORD *)&__dst[24] = *v68;
      *(_QWORD *)&__dst[31] = *(_QWORD *)((char *)v68 + 7);
      v50 = *(_BYTE *)(a5 + 23);
      *(_QWORD *)a5 = v32;
      *v68 = *(_QWORD *)__dst;
      *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)&__dst[7];
      *(_BYTE *)(a5 + 23) = v71;
      v32 = v49;
      v71 = v50;
      v31 = v47;
    }
LABEL_101:
    ++v30;
  }
  while (v30 != v72);
  if (!a5)
  {
LABEL_123:
    if (v71 < 0)
      goto LABEL_124;
    return v31;
  }
LABEL_105:
  v56 = *(void **)a5;
  v57 = *(_BYTE *)(a5 + 23);
  v58 = *(_QWORD *)&__dst[24];
  *(_QWORD *)a5 = v32;
  *(_QWORD *)(a5 + 8) = v58;
  *(_QWORD *)(a5 + 15) = *(_QWORD *)&__dst[31];
  *(_BYTE *)(a5 + 23) = v71;
  v32 = v56;
  if (v57 < 0)
LABEL_124:
    operator delete(v32);
  return v31;
}

uint64_t sub_22EFC99A4(uint64_t a1, uint64_t a2, uint64_t a3, void *__s2, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  const void *v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  unint64_t v22;
  size_t v23;
  const void *v24;
  size_t v25;
  uint64_t *v26;
  size_t v27;
  size_t v28;
  size_t v29;
  _OWORD *v30;
  uint64_t *v31;
  void *v32;
  std::string *v33;
  llvm::raw_ostream *v34;
  uint64_t v35;
  uint64_t *v36;
  void *v37;
  _BYTE *v38;
  llvm::raw_ostream *v39;
  std::string *v40;
  uint64_t v41;
  uint64_t *v42;
  void *v43;
  _BYTE *v44;
  _OWORD *v45;
  uint64_t *v46;
  void *v47;
  _BYTE *v48;
  llvm::raw_ostream *v49;
  std::string *v50;
  uint64_t v51;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  std::string v60;
  _QWORD v61[2];

  v61[0] = a6;
  v61[1] = a7;
  if (!(a6 & 0x7FFFFFFFFFFFFFFFLL | a7 & 0x7FFFFFFF7FFFFFFFLL))
    return 0;
  v11 = *(unsigned int **)(*(_QWORD *)(a2 + 40) + 16);
  v14 = *v11;
  v12 = (uint64_t)(v11 + 4);
  v13 = v14;
  v51 = v12;
  v52 = v14;
  v15 = *(_BYTE *)(a1 + 2);
  v16 = (const void *)v12;
  v17 = v14;
  if ((v15 & 8) != 0)
  {
    v18 = llvm::StringRef::rfind();
    if (v18 == -1)
    {
      v16 = (const void *)v51;
      v17 = v52;
    }
    else
    {
      v19 = v18;
      v16 = (const void *)v51;
      if (v52 >= v19)
        v17 = v19;
      else
        v17 = v52;
    }
  }
  if (v17 != a5 || v17 && memcmp(v16, __s2, v17))
    return 0;
  v22 = sub_22E83F9A4(v12, v13);
  if (v23)
    v24 = (const void *)v22;
  else
    v24 = (const void *)v12;
  if (v23)
    v25 = v23;
  else
    v25 = v13;
  memset(&v60, 0, sizeof(v60));
  if (*(_DWORD *)(a2 + 100))
  {
    MEMORY[0x2348A0C14](&v60, " - ");
    std::string::append(&v60, *(const std::string::value_type **)(a2 + 104), *(unsigned int *)(a2 + 100));
  }
  v26 = &v55;
  if (*(_BYTE *)(a2 + 96))
  {
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(_BYTE **)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 23) = 0;
      }
      LODWORD(v52) = 0;
      v56 = 0;
      v57 = 0;
      v58 = 1;
      v54 = 0;
      v55 = 0;
      v53 = 0;
      v51 = MEMORY[0x24BED83D8] + 16;
      v59 = a3;
      llvm::raw_ostream::SetBufferAndMode();
      v30 = (_OWORD *)v55;
      if ((unint64_t)-v55 > 0x10)
      {
        *(_BYTE *)(v55 + 16) = 32;
        *v30 = *(_OWORD *)"not available on ";
        v32 = (void *)(v55 + 17);
        v55 += 17;
        v31 = &v51;
      }
      else
      {
        v31 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)&v51, "not available on ");
        v26 = v31 + 4;
        v32 = (void *)v31[4];
      }
      if (v25 <= v31[3] - (uint64_t)v32)
      {
        if (v25)
        {
          memcpy(v32, v24, v25);
          *v26 += v25;
        }
      }
      else
      {
        v31 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)v31, (const char *)v24);
      }
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = &v60;
      else
        v33 = (std::string *)v60.__r_.__value_.__r.__words[0];
      v34 = (llvm::raw_ostream *)v31;
LABEL_46:
      llvm::raw_ostream::write(v34, (const char *)v33);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v51);
    }
  }
  else
  {
    v27 = *(_QWORD *)(a2 + 56);
    if (*(_QWORD *)(a2 + 48) & 0x7FFFFFFFFFFFFFFFLL | v27 & 0x7FFFFFFF00000000 | v27 & 0x7FFFFFFF)
    {
      v51 = *(_QWORD *)(a2 + 48);
      v52 = v27;
      if (sub_22E3B38EC(v61, &v51))
      {
        if (a3)
        {
          if (*(char *)(a3 + 23) < 0)
          {
            **(_BYTE **)a3 = 0;
            *(_QWORD *)(a3 + 8) = 0;
          }
          else
          {
            *(_BYTE *)a3 = 0;
            *(_BYTE *)(a3 + 23) = 0;
          }
          LODWORD(v52) = 0;
          v56 = 0;
          v57 = 0;
          v58 = 1;
          v54 = 0;
          v55 = 0;
          v53 = 0;
          v51 = MEMORY[0x24BED83D8] + 16;
          v59 = a3;
          llvm::raw_ostream::SetBufferAndMode();
          v35 = v55;
          if ((unint64_t)(v54 - v55) > 0xD)
          {
            *(_QWORD *)v55 = *(_QWORD *)"introduced in ";
            *(_QWORD *)(v35 + 6) = *(_QWORD *)"uced in ";
            v37 = (void *)(v55 + 14);
            v55 += 14;
            v36 = &v51;
          }
          else
          {
            v36 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)&v51, "introduced in ");
            v26 = v36 + 4;
            v37 = (void *)v36[4];
          }
          if (v25 <= v36[3] - (uint64_t)v37)
          {
            if (v25)
            {
              memcpy(v37, v24, v25);
              *v26 += v25;
            }
          }
          else
          {
            v36 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)v36, (const char *)v24);
          }
          v38 = (_BYTE *)v36[4];
          if ((unint64_t)v38 >= v36[3])
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v36);
          }
          else
          {
            v36[4] = (uint64_t)(v38 + 1);
            *v38 = 32;
          }
          v39 = (llvm::raw_ostream *)llvm::operator<<();
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v40 = &v60;
          else
            v40 = (std::string *)v60.__r_.__value_.__r.__words[0];
          llvm::raw_ostream::write(v39, (const char *)v40);
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v51);
        }
        if (*(_BYTE *)(a2 + 112))
          v20 = 3;
        else
          v20 = 1;
        goto LABEL_48;
      }
    }
    v28 = *(_QWORD *)(a2 + 88);
    if (!(*(_QWORD *)(a2 + 80) & 0x7FFFFFFFFFFFFFFFLL | v28 & 0x7FFFFFFF00000000 | v28 & 0x7FFFFFFF)
      || (v51 = *(_QWORD *)(a2 + 80), v52 = v28, (sub_22E3B38EC(v61, &v51) & 1) != 0))
    {
      v29 = *(_QWORD *)(a2 + 72);
      if (*(_QWORD *)(a2 + 64) & 0x7FFFFFFFFFFFFFFFLL | v29 & 0x7FFFFFFF00000000 | v29 & 0x7FFFFFFF
        && (v51 = *(_QWORD *)(a2 + 64), v52 = v29, (sub_22E3B38EC(v61, &v51) & 1) == 0))
      {
        if (a3)
        {
          if (*(char *)(a3 + 23) < 0)
          {
            **(_BYTE **)a3 = 0;
            *(_QWORD *)(a3 + 8) = 0;
          }
          else
          {
            *(_BYTE *)a3 = 0;
            *(_BYTE *)(a3 + 23) = 0;
          }
          LODWORD(v52) = 0;
          v56 = 0;
          v57 = 0;
          v58 = 1;
          v54 = 0;
          v55 = 0;
          v53 = 0;
          v51 = MEMORY[0x24BED83D8] + 16;
          v59 = a3;
          llvm::raw_ostream::SetBufferAndMode();
          v45 = (_OWORD *)v55;
          if ((unint64_t)(v54 - v55) > 0x13)
          {
            *(_DWORD *)(v55 + 16) = 544106784;
            *v45 = *(_OWORD *)"first deprecated in ";
            v47 = (void *)(v55 + 20);
            v55 += 20;
            v46 = &v51;
          }
          else
          {
            v46 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)&v51, "first deprecated in ");
            v26 = v46 + 4;
            v47 = (void *)v46[4];
          }
          if (v25 <= v46[3] - (uint64_t)v47)
          {
            if (v25)
            {
              memcpy(v47, v24, v25);
              *v26 += v25;
            }
          }
          else
          {
            v46 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)v46, (const char *)v24);
          }
          v48 = (_BYTE *)v46[4];
          if ((unint64_t)v48 >= v46[3])
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v46);
          }
          else
          {
            v46[4] = (uint64_t)(v48 + 1);
            *v48 = 32;
          }
          v49 = (llvm::raw_ostream *)llvm::operator<<();
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v50 = &v60;
          else
            v50 = (std::string *)v60.__r_.__value_.__r.__words[0];
          llvm::raw_ostream::write(v49, (const char *)v50);
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v51);
        }
        v20 = 2;
      }
      else
      {
        v20 = 0;
      }
      goto LABEL_48;
    }
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(_BYTE **)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 23) = 0;
      }
      LODWORD(v52) = 0;
      v56 = 0;
      v57 = 0;
      v58 = 1;
      v54 = 0;
      v55 = 0;
      v53 = 0;
      v51 = MEMORY[0x24BED83D8] + 16;
      v59 = a3;
      llvm::raw_ostream::SetBufferAndMode();
      v41 = v55;
      if ((unint64_t)(v54 - v55) > 0xC)
      {
        *(_QWORD *)v55 = *(_QWORD *)"obsoleted in ";
        *(_QWORD *)(v41 + 5) = *(_QWORD *)"eted in ";
        v43 = (void *)(v55 + 13);
        v55 += 13;
        v42 = &v51;
      }
      else
      {
        v42 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)&v51, "obsoleted in ");
        v26 = v42 + 4;
        v43 = (void *)v42[4];
      }
      if (v25 <= v42[3] - (uint64_t)v43)
      {
        if (v25)
        {
          memcpy(v43, v24, v25);
          *v26 += v25;
        }
      }
      else
      {
        v42 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)v42, (const char *)v24);
      }
      v44 = (_BYTE *)v42[4];
      if ((unint64_t)v44 >= v42[3])
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v42);
      }
      else
      {
        v42[4] = (uint64_t)(v44 + 1);
        *v44 = 32;
      }
      v34 = (llvm::raw_ostream *)llvm::operator<<();
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = &v60;
      else
        v33 = (std::string *)v60.__r_.__value_.__r.__words[0];
      goto LABEL_46;
    }
  }
  v20 = 3;
LABEL_48:
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  return v20;
}

BOOL sub_22EFCA12C(unint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int i;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  if (!a1 || (v2 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 4) != 0)
      v4 = *(_QWORD *)v4;
    for (i = *(_WORD *)(v4 + 8) & 0x7F; i != 83; i = *(_WORD *)(v4 + 8) & 0x7F)
    {
      v6 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v6 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_20;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_19;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_10;
        if (i == 24)
        {
LABEL_9:
          v6 = -48;
        }
        else
        {
LABEL_19:
          if (i != 70)
          {
LABEL_20:
            v8 = i - 52;
            if ((i - 33) >= 5)
              v9 = -48;
            else
              v9 = -64;
            if (v8 >= 6)
              v6 = v9;
            else
              v6 = -72;
            goto LABEL_10;
          }
          v6 = -64;
        }
      }
LABEL_10:
      v7 = *(_QWORD *)(v4 + v6 + 16);
      v4 = v7 & 0xFFFFFFFFFFFFFFF8;
      if ((v7 & 4) != 0)
        v4 = *(_QWORD *)v4;
    }
    v2 = v4 - 40;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v2 + 88) + 15088);
  v11 = *(void **)(v10 + 224);
  v12 = *(_QWORD *)(v10 + 232);
  v17 = *(_OWORD *)(v10 + 240);
  if (sub_22EFC93E8(a1, v11, v12, (uint64_t *)&v17, 0, 0) != 3)
    return 0;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EFC8764(a1) + 88) + 2000) + 140) & 0x4000000000000) == 0
    || !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EFC8764(a1) + 88) + 15088) + 264))
  {
    return 1;
  }
  v14 = *(void **)(v10 + 256);
  v15 = *(_QWORD *)(v10 + 264);
  v16 = *(_OWORD *)(v10 + 272);
  return sub_22EFC93E8(a1, v14, v15, (uint64_t *)&v16, 0, 0) == 3;
}

BOOL sub_22EFCA2EC(unint64_t a1, _BYTE *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  _BOOL8 result;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;

  *a2 = 0;
  v3 = *(_DWORD *)(a1 + 28);
  v4 = v3 & 0x7F;
  if (a1 && (v4 - 67) >= 0xFFFFFFF9)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v6 = *(_QWORD *)v6;
    for (i = *(_WORD *)(v6 + 8) & 0x7F; i != 83; i = *(_WORD *)(v6 + 8) & 0x7F)
    {
      v8 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v8 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v8 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v9 = i - 52;
            if ((i - 33) >= 5)
              v10 = -48;
            else
              v10 = -64;
            if (v9 >= 6)
              v8 = v10;
            else
              v8 = -72;
            goto LABEL_22;
          }
          v8 = -64;
        }
      }
LABEL_22:
      v11 = *(_QWORD *)(v6 + v8 + 16);
      v6 = v11 & 0xFFFFFFFFFFFFFFF8;
      if ((v11 & 4) != 0)
        v6 = *(_QWORD *)v6;
    }
    v12 = sub_22EFBBF74(a1, *(_QWORD *)(v6 + 48));
    goto LABEL_32;
  }
  if (!a1 || (v3 & 0x7Eu) - 58 < 0xFFFFFFFA)
  {
    if (v4 != 22)
      return 0;
    v15 = *(_QWORD *)(a1 + 16);
    v16 = v15 & 0xFFFFFFFFFFFFFFF8;
    if ((v15 & 4) != 0)
      v16 = *(_QWORD *)v16;
    v17 = *(_WORD *)(v16 + 8) & 0x7F;
    if (v17 == 83)
      return *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 48) + 2000) + 400) != 1;
    while (1)
    {
      v18 = -40;
      if (v17 > 70)
      {
        if (v17 == 71)
        {
          v18 = -56;
        }
        else if (v17 != 81)
        {
          goto LABEL_48;
        }
      }
      else
      {
        if (v17 > 0x18)
          goto LABEL_47;
        if (v17 == 16)
          goto LABEL_41;
        if (((1 << v17) & 0x1066) != 0)
          goto LABEL_54;
        if (v17 == 24)
        {
LABEL_41:
          v18 = -48;
        }
        else
        {
LABEL_47:
          if (v17 != 70)
          {
LABEL_48:
            v19 = v17 - 52;
            if ((v17 - 33) >= 5)
              v20 = -48;
            else
              v20 = -64;
            if (v19 >= 6)
              v18 = v20;
            else
              v18 = -72;
            goto LABEL_54;
          }
          v18 = -64;
        }
      }
LABEL_54:
      v21 = *(_QWORD *)(v16 + v18 + 16);
      v16 = v21 & 0xFFFFFFFFFFFFFFF8;
      if ((v21 & 4) != 0)
        v16 = *(_QWORD *)v16;
      v17 = *(_WORD *)(v16 + 8) & 0x7F;
      if (v17 == 83)
        return *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 48) + 2000) + 400) != 1;
    }
  }
  v12 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1 + 72))(a1);
LABEL_32:
  v13 = v12;
  result = 1;
  if (!v13)
    return result;
  *a2 = 1;
  return 0;
}

uint64_t sub_22EFCA55C(unint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int i;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t j;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  char v34;

  result = sub_22EFCA2EC(a1, &v34);
  if (!(_DWORD)result)
    return result;
  if (!a1 || (v3 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 4) != 0)
      v5 = *(_QWORD *)v5;
    for (i = *(_WORD *)(v5 + 8) & 0x7F; i != 83; i = *(_WORD *)(v5 + 8) & 0x7F)
    {
      v7 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v7 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_17;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_16;
        if (i == 16)
          goto LABEL_10;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_23;
        if (i == 24)
        {
LABEL_10:
          v7 = -48;
        }
        else
        {
LABEL_16:
          if (i != 70)
          {
LABEL_17:
            v8 = i - 52;
            if ((i - 33) >= 5)
              v9 = -48;
            else
              v9 = -64;
            if (v8 >= 6)
              v7 = v9;
            else
              v7 = -72;
            goto LABEL_23;
          }
          v7 = -64;
        }
      }
LABEL_23:
      v10 = *(_QWORD *)(v5 + v7 + 16);
      v5 = v10 & 0xFFFFFFFFFFFFFFF8;
      if ((v10 & 4) != 0)
        v5 = *(_QWORD *)v5;
    }
    v3 = v5 - 40;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + 15088);
  v12 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1 + 56))(a1);
  v13 = sub_22F255ABC(v12);
  if ((uint64_t *)v13 == v14)
    return 0;
  v15 = (uint64_t *)v13;
  v16 = v14;
LABEL_32:
  v17 = *v15;
  v18 = *(unsigned __int16 *)(*v15 + 32);
  if (v18 == 115)
  {
    v19 = a1;
    if ((*(_DWORD *)(a1 + 28) & 0x7F) == 0x53)
      goto LABEL_60;
    for (j = *(_QWORD *)(a1 + 16); ; j = *(_QWORD *)(v21 + v23 + 16))
    {
      v21 = j & 0xFFFFFFFFFFFFFFF8;
      if ((j & 4) != 0)
        v21 = *(_QWORD *)v21;
      v22 = *(_WORD *)(v21 + 8) & 0x7F;
      if (v22 == 83)
      {
        v19 = v21 - 40;
LABEL_60:
        result = sub_22EFC99A4(*(_QWORD *)(*(_QWORD *)(v19 + 88) + 2000), *v15, 0, *(void **)(v11 + 224), *(_QWORD *)(v11 + 232), *(_QWORD *)(v11 + 240), *(_QWORD *)(v11 + 248));
        if ((_DWORD)result == 1)
          return result;
        v26 = *(_QWORD *)(v11 + 264);
        if (!v26)
          goto LABEL_88;
        v27 = a1;
        if ((*(_DWORD *)(a1 + 28) & 0x7F) == 0x53)
          goto LABEL_87;
        v28 = *(_QWORD *)(a1 + 16);
        while (2)
        {
          v29 = v28 & 0xFFFFFFFFFFFFFFF8;
          if ((v28 & 4) != 0)
            v29 = *(_QWORD *)v29;
          v30 = *(_WORD *)(v29 + 8) & 0x7F;
          if (v30 != 83)
          {
            v31 = -40;
            if ((*(_WORD *)(v29 + 8) & 0x7Fu) > 0x46)
            {
              if (v30 == 71)
              {
                v31 = -56;
              }
              else if (v30 != 81)
              {
                goto LABEL_77;
              }
            }
            else
            {
              if (v30 > 0x18)
                goto LABEL_76;
              if (v30 == 16)
                goto LABEL_70;
              if (((1 << v30) & 0x1066) == 0)
              {
                if (v30 == 24)
                {
LABEL_70:
                  v31 = -48;
                }
                else
                {
LABEL_76:
                  if (v30 == 70)
                  {
                    v31 = -64;
                  }
                  else
                  {
LABEL_77:
                    v32 = v30 - 52;
                    if (v30 - 33 >= 5)
                      v33 = -48;
                    else
                      v33 = -64;
                    if (v32 >= 6)
                      v31 = v33;
                    else
                      v31 = -72;
                  }
                }
              }
            }
            v28 = *(_QWORD *)(v29 + v31 + 16);
            continue;
          }
          break;
        }
        v27 = v29 - 40;
LABEL_87:
        result = sub_22EFC99A4(*(_QWORD *)(*(_QWORD *)(v27 + 88) + 2000), v17, 0, *(void **)(v11 + 256), v26, *(_QWORD *)(v11 + 272), *(_QWORD *)(v11 + 280));
        if ((_DWORD)result == 1)
          return result;
LABEL_88:
        if (++v15 == v16)
          return 0;
        goto LABEL_32;
      }
      v23 = -40;
      if ((*(_WORD *)(v21 + 8) & 0x7Fu) > 0x46)
      {
        if (v22 == 71)
        {
          v23 = -56;
          continue;
        }
        if (v22 != 81)
          goto LABEL_50;
      }
      else
      {
        if (v22 > 0x18)
          goto LABEL_49;
        if (v22 == 16)
          goto LABEL_43;
        if (((1 << v22) & 0x1066) == 0)
        {
          if (v22 == 24)
          {
LABEL_43:
            v23 = -48;
            continue;
          }
LABEL_49:
          if (v22 == 70)
          {
            v23 = -64;
            continue;
          }
LABEL_50:
          v24 = v22 - 52;
          if (v22 - 33 >= 5)
            v25 = -48;
          else
            v25 = -64;
          if (v24 >= 6)
            v23 = v25;
          else
            v23 = -72;
          continue;
        }
      }
    }
  }
  if (v18 != 350)
    goto LABEL_88;
  return 1;
}

uint64_t sub_22EFCA90C(int a1)
{
  return dword_22F4A18D0[a1];
}

uint64_t sub_22EFCA91C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;

  sub_22EF5B13C(a3, a1);
  result = sub_22E828DE4(v5, a2);
  *(_DWORD *)(a1 + 28) |= 0x100u;
  return result;
}

void sub_22EFCA95C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int j;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int i;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33[2];
  _QWORD v34[5];

  v34[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 28);
  if ((v4 & 0x100) != 0)
  {
    v15 = a1;
    if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
    {
      v16 = *(_QWORD *)(a1 + 16);
      v17 = v16 & 0xFFFFFFFFFFFFFFF8;
      if ((v16 & 4) != 0)
        v17 = *(_QWORD *)v17;
      for (i = *(_WORD *)(v17 + 8) & 0x7F; i != 83; i = *(_WORD *)(v17 + 8) & 0x7F)
      {
        v19 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v19 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_48;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_47;
          if (i == 16)
            goto LABEL_37;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_38;
          if (i == 24)
          {
LABEL_37:
            v19 = -48;
          }
          else
          {
LABEL_47:
            if (i != 70)
            {
LABEL_48:
              v21 = i - 52;
              if ((i - 33) >= 5)
                v22 = -48;
              else
                v22 = -64;
              if (v21 >= 6)
                v19 = v22;
              else
                v19 = -72;
              goto LABEL_38;
            }
            v19 = -64;
          }
        }
LABEL_38:
        v20 = *(_QWORD *)(v17 + v19 + 16);
        v17 = v20 & 0xFFFFFFFFFFFFFFF8;
        if ((v20 & 4) != 0)
          v17 = *(_QWORD *)v17;
      }
      v15 = v17 - 40;
    }
    sub_22EF5B13C(*(_QWORD *)(v15 + 88), a1);
    v24 = v23;
    if (((*(unsigned __int16 *)(a2 + 32) | (*(unsigned __int8 *)(a2 + 34) << 16)) & 0x10000) != 0)
    {
      v26 = *v23;
      v27 = *((unsigned int *)v23 + 2);
      v28 = *v23;
      if ((_DWORD)v27)
      {
        v29 = 8 * v27;
        v28 = *v23;
        while (((*(unsigned __int16 *)(*(_QWORD *)v28 + 32) | (*(unsigned __int8 *)(*(_QWORD *)v28 + 34) << 16)) & 0x10000) != 0)
        {
          v28 += 8;
          v29 -= 8;
          if (!v29)
            goto LABEL_62;
        }
      }
      if (v26 + 8 * v27 != v28)
      {
        v30 = (v28 - v26) >> 3;
        if (v27 >= *((_DWORD *)v23 + 3))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v26 = *v24;
          v27 = *((unsigned int *)v24 + 2);
        }
        v31 = (_QWORD *)(v26 + 8 * v30);
        *(_QWORD *)(v26 + 8 * v27) = *(_QWORD *)(v26 + 8 * v27 - 8);
        v32 = *v24 + 8 * v27 - 8;
        if ((_QWORD *)v32 != v31)
        {
          memmove(v31 + 1, v31, v32 - (_QWORD)v31);
          LODWORD(v27) = *((_DWORD *)v24 + 2);
        }
        *((_DWORD *)v24 + 2) = v27 + 1;
        *v31 = a2;
        return;
      }
LABEL_62:
      if (v27 >= *((_DWORD *)v23 + 3))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v26 = *v24;
        v27 = *((unsigned int *)v24 + 2);
      }
      *(_QWORD *)(v26 + 8 * v27) = a2;
    }
    else
    {
      v25 = *((_DWORD *)v23 + 2);
      if (v25 >= *((_DWORD *)v23 + 3))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v25 = *((_DWORD *)v24 + 2);
      }
      *(_QWORD *)(*v24 + 8 * v25) = a2;
    }
    ++*((_DWORD *)v24 + 2);
    return;
  }
  v33[0] = v34;
  v34[0] = a2;
  v33[1] = (void *)0x400000001;
  v5 = v4 & 0x7F;
  v6 = a1;
  if (v5 != 83)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 4) != 0)
      v8 = *(_QWORD *)v8;
    for (j = *(_WORD *)(v8 + 8) & 0x7F; j != 83; j = *(_WORD *)(v8 + 8) & 0x7F)
    {
      v10 = -40;
      if (j > 70)
      {
        if (j == 71)
        {
          v10 = -56;
          goto LABEL_10;
        }
        if (j == 81)
          goto LABEL_10;
      }
      else
      {
        if (j <= 0x18)
        {
          if (j == 16)
            goto LABEL_9;
          if (((1 << j) & 0x1066) != 0)
            goto LABEL_10;
          if (j == 24)
          {
LABEL_9:
            v10 = -48;
            goto LABEL_10;
          }
        }
        if (j == 70)
        {
          v10 = -64;
          goto LABEL_10;
        }
      }
      v12 = j - 52;
      if ((j - 33) >= 5)
        v13 = -48;
      else
        v13 = -64;
      if (v12 >= 6)
        v10 = v13;
      else
        v10 = -72;
LABEL_10:
      v11 = *(_QWORD *)(v8 + v10 + 16);
      v8 = v11 & 0xFFFFFFFFFFFFFFF8;
      if ((v11 & 4) != 0)
        v8 = *(_QWORD *)v8;
    }
    v6 = v8 - 40;
  }
  sub_22EF5B13C(*(_QWORD *)(v6 + 88), a1);
  sub_22E828DE4(v14, (uint64_t)v33);
  *(_DWORD *)(a1 + 28) |= 0x100u;
  if (v33[0] != v34)
    free(v33[0]);
}

uint64_t sub_22EFCAD5C(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;

  v1 = *(_WORD *)(a1 + 8) & 0x7F;
  v2 = -40;
  if (v1 > 0x46)
  {
    switch(v1)
    {
      case 'S':
        return a1 + v2;
      case 'G':
        v2 = -56;
        return a1 + v2;
      case 'Q':
        return a1 + v2;
    }
  }
  else
  {
    if (v1 <= 0x18)
    {
      if (v1 == 16)
        goto LABEL_4;
      if (((1 << v1) & 0x1066) != 0)
        return a1 + v2;
      if (v1 == 24)
      {
LABEL_4:
        v2 = -48;
        return a1 + v2;
      }
    }
    if (v1 == 70)
    {
      v2 = -64;
      return a1 + v2;
    }
  }
  v4 = v1 - 52;
  v5 = v1 - 33 >= 5;
  v6 = -48;
  if (!v5)
    v6 = -64;
  if (v4 >= 6)
    v2 = v6;
  else
    v2 = -72;
  return a1 + v2;
}

uint64_t sub_22EFCAE04(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;

  v1 = *(_DWORD *)(a1 + 28) & 0x7F;
  v2 = 40;
  if (v1 <= 0x46)
  {
    if (v1 <= 0x18)
    {
      if (v1 == 16)
        goto LABEL_17;
      if (((1 << v1) & 0x1066) != 0)
        return a1 + v2;
      if (v1 == 24)
      {
LABEL_17:
        v2 = 48;
        return a1 + v2;
      }
    }
    if (v1 == 70)
    {
      v2 = 64;
      return a1 + v2;
    }
    goto LABEL_11;
  }
  if (v1 != 83)
  {
    if (v1 == 71)
    {
      v2 = 56;
      return a1 + v2;
    }
    if (v1 != 81)
    {
LABEL_11:
      v3 = v1 - 52;
      v4 = v1 - 33 >= 5;
      v5 = 48;
      if (!v4)
        v5 = 64;
      if (v3 >= 6)
        v2 = v5;
      else
        v2 = 72;
    }
  }
  return a1 + v2;
}

unint64_t sub_22EFCAEA8(_DWORD *a1)
{
  unint64_t result;
  unint64_t v2;
  uint64_t v3;

  if (a1 && (a1[7] & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    v3 = 0;
    result = sub_22EFBF6E8((uint64_t)a1, &v3);
    if ((_DWORD)result)
      return (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3) >> 32;
  }
  else
  {
    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 64))(a1);
    if (result)
    {
      sub_22F0D4E74(result);
      return HIDWORD(v2);
    }
  }
  return result;
}

BOOL sub_22EFCAF18(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int v3;
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) != 0)
    v2 = *(_QWORD *)(v2 + 8);
  if (v2)
  {
    while (1)
    {
      v3 = *(_WORD *)(v2 + 8) & 0x7F;
      result = v3 == 5;
      if (v3 == 5)
        return result;
      v5 = -40;
      if ((*(_WORD *)(v2 + 8) & 0x7Fu) > 0x46)
      {
        if (v3 != 83)
        {
          if (v3 == 71)
          {
            v5 = -56;
          }
          else if (v3 != 81)
          {
            goto LABEL_20;
          }
        }
      }
      else
      {
        if (v3 > 0x18)
          goto LABEL_19;
        if (v3 == 16)
          goto LABEL_8;
        if (((1 << v3) & 0x1066) != 0)
          goto LABEL_9;
        if (v3 == 24)
        {
LABEL_8:
          v5 = -48;
        }
        else
        {
LABEL_19:
          if (v3 != 70)
          {
LABEL_20:
            v7 = v3 - 52;
            if (v3 - 33 >= 5)
              v8 = -48;
            else
              v8 = -64;
            if (v7 >= 6)
              v5 = v8;
            else
              v5 = -72;
            goto LABEL_9;
          }
          v5 = -64;
        }
      }
LABEL_9:
      v6 = *(_QWORD *)(v2 + v5 + 16);
      v2 = v6 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 4) != 0)
        v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
        return result;
    }
  }
  return 0;
}

uint64_t sub_22EFCB008(uint64_t a1, int a2)
{
  int v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;

  v4 = *(_DWORD *)(a1 + 28) & 0x7F;
  if (a1 && (v4 - 75) >= 0xFFFFFFE5)
  {
    v5 = (_QWORD *)(a1 + 48);
  }
  else
  {
    result = 0;
    if (!a1 || (v4 - 42) < 0xFFFFFFFD)
      return result;
    v7 = *(_QWORD *)(a1 + 80);
    if ((v7 & 4) != 0)
      v5 = (_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8);
    else
      v5 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
  }
  v8 = *v5 & 0xFFFFFFFFFFFFFFF0;
  v9 = *(_QWORD *)v8;
  if (*(_QWORD *)v8 && *(_BYTE *)(v9 + 16) == 39)
  {
    v10 = *(_QWORD *)v8;
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
      goto LABEL_17;
    v10 = sub_22F10CF48(v9);
    v9 = *(_QWORD *)v8;
    if (!v10)
      goto LABEL_17;
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 25 <= 1)
  {
    if (v9 && *(_BYTE *)(v9 + 16) == 39)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_17:
  if (!v9 || (v11 = *(_DWORD *)(v9 + 16), (v11 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_20;
    v9 = sub_22F10CF48(v9);
    if (!v9)
      goto LABEL_20;
    v11 = *(_DWORD *)(v9 + 16);
  }
  if ((v11 & 0x100000) != 0)
  {
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v9 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v9)
      {
        v13 = *(_DWORD *)(v9 + 16);
        if ((v13 & 0xFE) == 0x28)
          continue;
      }
      v9 = sub_22F10CF48(v9);
      v13 = *(_DWORD *)(v9 + 16);
    }
    while ((v13 & 0x100000) != 0);
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 25 <= 1)
  {
    v9 = *(_QWORD *)v8;
    if (*(_QWORD *)v8)
      goto LABEL_46;
LABEL_47:
    v9 = sub_22F10CF48(v9);
    v14 = *(_DWORD *)(v9 + 16);
    while ((v14 & 0x100000) != 0)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v9 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (!v9)
        goto LABEL_47;
LABEL_46:
      v14 = *(_DWORD *)(v9 + 16);
      if ((v14 & 0xFE) != 0x28)
        goto LABEL_47;
    }
    goto LABEL_24;
  }
LABEL_20:
  if (a2)
  {
    v9 = *(_QWORD *)v8;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10)
    {
      if (*(_BYTE *)(v9 + 16) == 10)
      {
LABEL_24:
        v8 = *(_QWORD *)(v9 + 32) & 0xFFFFFFFFFFFFFFF0;
        goto LABEL_25;
      }
LABEL_23:
      v9 = sub_22F10CF48(v9);
      goto LABEL_24;
    }
  }
LABEL_25:
  result = *(_QWORD *)v8;
  if (*(_QWORD *)v8)
    v12 = *(unsigned __int8 *)(*(_QWORD *)v8 + 16) - 27 > 0xFFFFFFFD;
  else
    v12 = 0;
  if (!v12)
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 <= 1)
      return sub_22F10CF48(result);
    else
      return 0;
  }
  return result;
}

unint64_t sub_22EFCB24C(unint64_t result)
{
  int v1;
  int v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;

  v1 = *(_DWORD *)(result + 28);
  v2 = v1 & 0x7F;
  if (v2 != 54)
  {
    v6 = (v1 & 0x7E) - 58;
    if (v2 == 24 || v6 > 0xFFFFFFF9)
      return result;
    if (v2 != 2 && v2 != 1)
      return 0;
    v8 = result + 40;
    v9 = *(_WORD *)(result + 48) & 0x7F;
    v10 = -40;
    if (v9 > 0x46)
    {
      switch(v9)
      {
        case 'S':
          goto LABEL_35;
        case 'G':
          goto LABEL_88;
        case 'Q':
          goto LABEL_35;
      }
    }
    else
    {
      if (v9 <= 0x18)
      {
        if (v9 == 16)
          goto LABEL_17;
        if (((1 << v9) & 0x1066) != 0)
          goto LABEL_35;
        if (v9 == 24)
          goto LABEL_17;
      }
      if (v9 == 70)
      {
LABEL_86:
        v10 = -64;
        goto LABEL_35;
      }
    }
    v11 = v9 - 52;
    v12 = v9 - 33 >= 5;
    v13 = -48;
    if (!v12)
      v13 = -64;
    if (v11 >= 6)
      v10 = v13;
    else
      v10 = -72;
    goto LABEL_35;
  }
  if ((*(_QWORD *)(result + 40) & 7) != 6 || *(_DWORD *)(*(_QWORD *)(result + 40) & 0xFFFFFFFFFFFFFFF8) != 42)
    return result;
  v3 = result + 72;
  v4 = *(_WORD *)(result + 80) & 0x7F;
  v5 = -40;
  if (v4 > 0x46)
  {
    if (v4 == 83)
      goto LABEL_46;
    if (v4 == 71)
    {
      v5 = -56;
      goto LABEL_46;
    }
    if (v4 != 81)
    {
LABEL_41:
      v16 = -48;
      if (v4 - 33 < 5)
        v16 = -64;
      if (v4 - 52 >= 6)
        v5 = v16;
      else
        v5 = -72;
    }
  }
  else
  {
    if (v4 > 0x18)
      goto LABEL_40;
    if (v4 == 16)
    {
LABEL_7:
      v5 = -48;
      goto LABEL_46;
    }
    if (((1 << v4) & 0x1066) == 0)
    {
      if (v4 == 24)
        goto LABEL_7;
LABEL_40:
      if (v4 == 70)
      {
        v5 = -64;
        goto LABEL_46;
      }
      goto LABEL_41;
    }
  }
LABEL_46:
  v17 = *(_QWORD *)(v3 + v5 + 16);
  v18 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8);
  if ((v17 & 4) != 0)
    v18 = (_QWORD *)*v18;
  if (v18)
    v19 = v18 - 8;
  else
    v19 = 0;
  v20 = v19[16];
  if (v20 && ((*(unsigned __int16 *)(v20 + 8) | (*(unsigned __int8 *)(v20 + 10) << 16)) & 0x100000) != 0)
  {
    v21 = -40;
    if ((*(_WORD *)(result + 80) & 0x7Fu) > 0x46)
    {
      if (v4 != 83)
      {
        if (v4 == 71)
        {
          v21 = -56;
          goto LABEL_70;
        }
        if (v4 == 81)
          goto LABEL_70;
LABEL_65:
        v22 = v4 - 52;
        v12 = v4 - 33 >= 5;
        v23 = -48;
        if (!v12)
          v23 = -64;
        if (v22 >= 6)
          v21 = v23;
        else
          v21 = -72;
      }
    }
    else
    {
      if (v4 > 0x18)
        goto LABEL_64;
      if (v4 != 16)
      {
        if (((1 << v4) & 0x1066) != 0)
          goto LABEL_70;
        if (v4 != 24)
        {
LABEL_64:
          if (v4 == 70)
          {
            v21 = -64;
            goto LABEL_70;
          }
          goto LABEL_65;
        }
      }
      v21 = -48;
    }
LABEL_70:
    v24 = *(_QWORD *)(v3 + v21 + 16);
    v25 = (_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF8);
    if ((v24 & 4) != 0)
      v25 = (_QWORD *)*v25;
    v26 = v25 - 8;
    if (!v25)
      v26 = 0;
    v8 = (unint64_t)(v26 + 8);
    v27 = v26[9] & 0x7F;
    v10 = -40;
    if (v27 <= 70)
    {
      if (v27 <= 0x18)
      {
        if (v27 == 16)
          goto LABEL_17;
        if (((1 << v27) & 0x1066) != 0)
          goto LABEL_35;
        if (v27 == 24)
          goto LABEL_17;
      }
      if (v27 == 70)
        goto LABEL_86;
LABEL_84:
      if ((v27 - 52) < 6)
      {
        v10 = -72;
        goto LABEL_35;
      }
      if ((v27 - 33) < 5)
        goto LABEL_86;
LABEL_17:
      v10 = -48;
LABEL_35:
      v14 = *(_QWORD *)(v8 + v10 + 16);
      v15 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8);
      if ((v14 & 4) != 0)
        v15 = (_QWORD *)*v15;
      return sub_22EFCB584((unint64_t)v15);
    }
    if (v27 == 83)
      goto LABEL_35;
    if (v27 != 71)
    {
      if (v27 == 81)
        goto LABEL_35;
      goto LABEL_84;
    }
LABEL_88:
    v10 = -56;
    goto LABEL_35;
  }
  return result;
}

unint64_t sub_22EFCB584(unint64_t a1)
{
  __int16 v1;
  int v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  while (1)
  {
    v1 = *(_WORD *)(a1 + 8);
    v2 = v1 & 0x7F;
    if (v2 == 54)
    {
      if ((*(_QWORD *)(a1 - 32) & 7) != 6 || *(_DWORD *)(*(_QWORD *)(a1 - 32) & 0xFFFFFFFFFFFFFFF8) != 42)
        return a1 - 72;
      v3 = *(_QWORD *)(a1 - 56);
      v4 = (unint64_t *)(v3 & 0xFFFFFFFFFFFFFFF8);
      v5 = v3 & 0xFFFFFFFFFFFFFFF8;
      if ((v3 & 4) != 0)
        v5 = *v4;
      v6 = v5 ? v5 - 64 : 0;
      v7 = *(_QWORD *)(v6 + 128);
      if (!v7 || ((*(unsigned __int16 *)(v7 + 8) | (*(unsigned __int8 *)(v7 + 10) << 16)) & 0x100000) == 0)
        return a1 - 72;
      if ((v3 & 4) != 0)
        v4 = (unint64_t *)*v4;
      if (v4)
        v8 = v4 - 8;
      else
        v8 = 0;
      v9 = v8[9] & 0x7F;
      v10 = -40;
      if (v9 > 0x46)
      {
        if (v9 != 83)
        {
          if (v9 == 71)
          {
            v10 = -56;
            goto LABEL_37;
          }
          if (v9 == 81)
            goto LABEL_37;
LABEL_31:
          v12 = v9 - 52;
          if (v9 - 33 >= 5)
            v13 = -48;
          else
            v13 = -64;
          if (v12 >= 6)
            v10 = v13;
          else
            v10 = -72;
        }
      }
      else
      {
        if (v9 > 0x18)
          goto LABEL_30;
        if (v9 != 16)
        {
          if (((1 << v9) & 0x1066) != 0)
            goto LABEL_37;
          if (v9 != 24)
          {
LABEL_30:
            if (v9 == 70)
            {
              v10 = -64;
              goto LABEL_37;
            }
            goto LABEL_31;
          }
        }
        v10 = -48;
      }
LABEL_37:
      v11 = *(unint64_t *)((char *)v8 + v10 + 80);
      goto LABEL_38;
    }
    if ((v1 & 0x7Eu) - 58 > 0xFFFFFFF9)
      return a1 - 72;
    if (v2 != 1 && v2 != 2)
      break;
    v11 = *(_QWORD *)(a1 - 24);
LABEL_38:
    a1 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 4) != 0)
      a1 = *(_QWORD *)a1;
  }
  if (v2 == 24)
    return a1 - 48;
  else
    return 0;
}

uint64_t sub_22EFCB6FC(uint64_t result, char a2)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_WORD *)(result + 8) = *(_WORD *)(result + 8) & 0xE000 | a2 & 0x7F;
  return result;
}

BOOL sub_22EFCB718(uint64_t a1)
{
  char v1;
  _BOOL8 result;
  unsigned int v3;

  v1 = *(_DWORD *)(a1 + 28);
  result = 1;
  v3 = v1 & 0x7F;
  if ((v3 > 0x39 || ((1 << v3) & 0x3F0003E01011066) == 0) && (v3 - 70 > 0xD || ((1 << (v3 - 70)) & 0x2803) == 0))
    return v3 - 19 < 5;
  return result;
}

unint64_t sub_22EFCB77C(uint64_t a1)
{
  __int16 v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = *(_WORD *)(a1 + 8);
  if ((v2 & 0x7Eu) - 52 > 5)
    goto LABEL_2;
  v7 = v2 & 0x7F;
  v8 = -40;
  if (v7 > 0x46)
  {
    if (v7 == 83)
      goto LABEL_14;
    if (v7 == 71)
    {
      v8 = -56;
      goto LABEL_14;
    }
    if (v7 != 81)
    {
LABEL_68:
      v26 = -48;
      if (v7 - 33 < 5)
        v26 = -64;
      if (v7 - 52 >= 6)
        v8 = v26;
      else
        v8 = -72;
    }
  }
  else
  {
    if (v7 > 0x18)
      goto LABEL_67;
    if (v7 == 16)
    {
LABEL_13:
      v8 = -48;
      goto LABEL_14;
    }
    if (((1 << v7) & 0x1066) == 0)
    {
      if (v7 == 24)
        goto LABEL_13;
LABEL_67:
      if (v7 == 70)
      {
        v8 = -64;
        goto LABEL_14;
      }
      goto LABEL_68;
    }
  }
LABEL_14:
  v9 = *(_QWORD *)(a1 + v8 + 16);
  v10 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if ((v9 & 4) != 0)
    v10 = (_QWORD *)*v10;
  v11 = *(_WORD *)(sub_22EFCBB30((unint64_t)v10) + 8) & 0x7F;
  if (v11 != 83 && v11 != 16)
  {
LABEL_2:
    v3 = v2 & 0x7F;
    if ((v2 & 0x7Eu) - 54 > 3)
      goto LABEL_3;
    v17 = -40;
    if ((v2 & 0x7Fu) > 0x46)
    {
      if (v3 == 83)
        goto LABEL_35;
      if (v3 == 71)
      {
        v17 = -56;
        goto LABEL_35;
      }
      if (v3 != 81)
      {
LABEL_88:
        v28 = -48;
        if (v3 - 33 < 5)
          v28 = -64;
        if (v3 - 52 >= 6)
          v17 = v28;
        else
          v17 = -72;
      }
    }
    else
    {
      if (v3 > 0x18)
        goto LABEL_87;
      if (v3 == 16)
      {
LABEL_34:
        v17 = -48;
        goto LABEL_35;
      }
      if (((1 << v3) & 0x1066) == 0)
      {
        if (v3 == 24)
          goto LABEL_34;
LABEL_87:
        if (v3 == 70)
        {
          v17 = -64;
          goto LABEL_35;
        }
        goto LABEL_88;
      }
    }
LABEL_35:
    v18 = *(_QWORD *)(a1 + v17 + 16);
    v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
    if ((v18 & 4) != 0)
      v19 = (_QWORD *)*v19;
    if (v19)
    {
      v20 = v19[8];
      if (v20)
      {
        if (((*(unsigned __int16 *)(v20 + 8) | (*(unsigned __int8 *)(v20 + 10) << 16)) & 0x100000) != 0
          && (*(_QWORD *)(a1 - 32) & 7) == 6
          && *(_DWORD *)(*(_QWORD *)(a1 - 32) & 0xFFFFFFFFFFFFFFF8) == 42)
        {
          v21 = *(_QWORD *)(sub_22EFCAD5C(a1) + 16);
          v22 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
          if ((v21 & 4) != 0)
            v22 = (_QWORD *)*v22;
          v5 = *(_QWORD *)(sub_22EFCAD5C((uint64_t)v22) + 16);
LABEL_8:
          result = v5 & 0xFFFFFFFFFFFFFFF8;
          if ((v5 & 4) == 0)
            return result;
          return *(_QWORD *)result;
        }
      }
    }
LABEL_3:
    v4 = -40;
    if ((v2 & 0x7Fu) > 0x46)
    {
      if (v3 != 83)
      {
        if (v3 == 71)
        {
          v4 = -56;
          goto LABEL_7;
        }
        if (v3 == 81)
          goto LABEL_7;
        goto LABEL_52;
      }
    }
    else
    {
      if (v3 > 0x18)
        goto LABEL_51;
      if (v3 != 16)
      {
        if (((1 << v3) & 0x1066) != 0)
          goto LABEL_7;
        if (v3 != 24)
        {
LABEL_51:
          if (v3 == 70)
          {
            v4 = -64;
            goto LABEL_7;
          }
LABEL_52:
          v23 = v3 - 52;
          v24 = v3 - 33 >= 5;
          v25 = -48;
          if (!v24)
            v25 = -64;
          if (v23 >= 6)
            v4 = v25;
          else
            v4 = -72;
          goto LABEL_7;
        }
      }
      v4 = -48;
    }
LABEL_7:
    v5 = *(_QWORD *)(a1 + v4 + 16);
    goto LABEL_8;
  }
  v13 = -40;
  if ((v2 & 0x7Fu) > 0x46)
  {
    if (v7 == 83)
      goto LABEL_25;
    if (v7 == 71)
    {
      v13 = -56;
      goto LABEL_25;
    }
    if (v7 != 81)
      goto LABEL_80;
  }
  else
  {
    if (v7 > 0x18)
      goto LABEL_79;
    if (v7 == 16)
    {
LABEL_24:
      v13 = -48;
      goto LABEL_25;
    }
    if (((1 << v7) & 0x1066) == 0)
    {
      if (v7 == 24)
        goto LABEL_24;
LABEL_79:
      if (v7 == 70)
      {
        v13 = -64;
        goto LABEL_25;
      }
LABEL_80:
      v27 = -48;
      if (v7 - 33 < 5)
        v27 = -64;
      if (v7 - 52 >= 6)
        v13 = v27;
      else
        v13 = -72;
    }
  }
LABEL_25:
  v14 = *(_QWORD *)(a1 + v13 + 16);
  v15 = v14 & 0xFFFFFFFFFFFFFFF8;
  if ((v14 & 4) != 0)
    v15 = *(_QWORD *)(v15 + 8);
  if ((*(_WORD *)(sub_22EFCBB30(v15) + 8) & 0x7Eu) - 34 > 3)
    goto LABEL_2;
  v16 = *(_QWORD *)(sub_22EFCAD5C(a1) + 16);
  result = v16 & 0xFFFFFFFFFFFFFFF8;
  if ((v16 & 4) != 0)
  {
    result += 8;
    return *(_QWORD *)result;
  }
  return result;
}

unint64_t sub_22EFCBB30(unint64_t result)
{
  uint64_t v1;
  _BOOL4 v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int i;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;

  LOWORD(v1) = *(_WORD *)(result + 8);
  if ((v1 & 0x7F) == 0x21)
  {
    if ((*(_DWORD *)(result - 36) & 0x7F) == 0x53)
    {
      v14 = result - 64;
    }
    else
    {
      v4 = *(_QWORD *)(result - 48);
      v5 = v4 & 0xFFFFFFFFFFFFFFF8;
      if ((v4 & 4) != 0)
        v5 = *(_QWORD *)v5;
      for (i = *(_WORD *)(v5 + 8) & 0x7F; i != 83; i = *(_WORD *)(v5 + 8) & 0x7F)
      {
        v7 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v7 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_26;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_25;
          if (i == 16)
            goto LABEL_15;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_16;
          if (i == 24)
          {
LABEL_15:
            v7 = -48;
          }
          else
          {
LABEL_25:
            if (i != 70)
            {
LABEL_26:
              v9 = i - 52;
              if ((i - 33) >= 5)
                v10 = -48;
              else
                v10 = -64;
              if (v9 >= 6)
                v7 = v10;
              else
                v7 = -72;
              goto LABEL_16;
            }
            v7 = -64;
          }
        }
LABEL_16:
        v8 = *(_QWORD *)(v5 + v7 + 16);
        v5 = v8 & 0xFFFFFFFFFFFFFFF8;
        if ((v8 & 4) != 0)
          v5 = *(_QWORD *)v5;
      }
      v14 = v5 - 40;
    }
    v2 = (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 2000) + 1) & 1) == 0;
    goto LABEL_3;
  }
  v2 = 0;
  while (1)
  {
LABEL_3:
    if (v2 && (v1 & 0x7E) - 34 < 4)
      goto LABEL_33;
    v3 = v1 & 0x7F;
    if (v3 != 33)
      break;
    v1 = *(_QWORD *)(result + 8);
    if ((v1 & 0x8000000000) != 0)
      return result;
LABEL_33:
    v11 = v1 & 0x7F;
    v12 = -40;
    if (v11 > 70)
    {
      if (v11 == 83)
        goto LABEL_37;
      if (v11 == 71)
      {
        v12 = -56;
        goto LABEL_37;
      }
      if (v11 != 81)
        goto LABEL_49;
    }
    else
    {
      if (v11 > 0x18)
        goto LABEL_48;
      if (v11 == 16)
        goto LABEL_36;
      if (((1 << v11) & 0x1066) == 0)
      {
        if (v11 == 24)
        {
LABEL_36:
          v12 = -48;
          goto LABEL_37;
        }
LABEL_48:
        if (v11 == 70)
        {
          v12 = -64;
          goto LABEL_37;
        }
LABEL_49:
        v15 = v11 - 52;
        v16 = (v11 - 33) >= 5;
        v17 = -48;
        if (!v16)
          v17 = -64;
        if (v15 >= 6)
          v12 = v17;
        else
          v12 = -72;
      }
    }
LABEL_37:
    v13 = *(_QWORD *)(result + v12 + 16);
    result = v13 & 0xFFFFFFFFFFFFFFF8;
    if ((v13 & 4) != 0)
      result = *(_QWORD *)result;
    LOWORD(v1) = *(_WORD *)(result + 8);
  }
  if (v3 == 12 || v3 == 5)
    goto LABEL_33;
  return result;
}

BOOL sub_22EFCBD60(uint64_t a1)
{
  int v1;

  v1 = *(_WORD *)(a1 + 8) & 0x7F;
  if (v1 == 33)
    return (*(_BYTE *)(a1 + 12) & 0x80) == 0;
  return v1 == 12 || v1 == 5;
}

BOOL sub_22EFCBD94(unint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  while (1)
  {
    v2 = *(_WORD *)(a1 + 8) & 0x7F;
    v3 = -40;
    if (v2 <= 0xF)
      break;
    if ((*(_WORD *)(a1 + 8) & 0x7Fu) <= 0x46)
    {
      if (v2 == 16 || v2 == 24)
      {
        v3 = -48;
        goto LABEL_21;
      }
      if (v2 == 70)
      {
        v3 = -64;
        goto LABEL_21;
      }
    }
    else
    {
      switch(v2)
      {
        case 'S':
          return 0;
        case 'G':
          v3 = -56;
          goto LABEL_21;
        case 'Q':
          goto LABEL_21;
      }
    }
LABEL_15:
    v4 = v2 - 52;
    if (v2 - 33 >= 5)
      v5 = -48;
    else
      v5 = -64;
    if (v4 >= 6)
      v3 = v5;
    else
      v3 = -72;
LABEL_21:
    v6 = *(_QWORD *)(a1 + v3 + 16);
    a1 = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((v6 & 4) != 0)
      a1 = *(_QWORD *)(a1 + 8);
  }
  if (v2 != 12)
  {
    if (v2 - 5 < 2 || v2 - 1 < 2)
      goto LABEL_21;
    goto LABEL_15;
  }
  return (unsigned __int16)*(_DWORD *)(a1 + 8) >> 13 == a2;
}

uint64_t sub_22EFCBE78(unint64_t a1, unint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  while (1)
  {
    v3 = a1;
    if (sub_22EFCC008(a1) == a1)
      break;
    a1 = sub_22EFCC008(v3);
  }
  if (!a2)
    return 0;
  while (1)
  {
    v4 = *(_WORD *)(a2 + 8) & 0x7F;
    if (v4 != 5 && v4 != 12)
      break;
LABEL_9:
    v6 = -40;
    if (v4 > 70)
    {
      if (v4 != 83)
      {
        if (v4 == 71)
        {
          v6 = -56;
        }
        else if (v4 != 81)
        {
          goto LABEL_17;
        }
      }
    }
    else
    {
      if (v4 > 0x18)
        goto LABEL_31;
      if (v4 == 16)
        goto LABEL_12;
      if (((1 << v4) & 0x1066) != 0)
        goto LABEL_13;
      if (v4 == 24)
      {
LABEL_12:
        v6 = -48;
      }
      else
      {
LABEL_31:
        if (v4 != 70)
        {
LABEL_17:
          v8 = v4 - 52;
          if ((v4 - 33) >= 5)
            v9 = -48;
          else
            v9 = -64;
          if (v8 >= 6)
            v6 = v9;
          else
            v6 = -72;
          goto LABEL_13;
        }
        v6 = -64;
      }
    }
LABEL_13:
    v7 = *(_QWORD *)(a2 + v6 + 16);
    a2 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 4) != 0)
      a2 = *(_QWORD *)a2;
    if (!a2)
      return 0;
  }
  if (sub_22EFCC008(a2) != v3)
  {
    v4 = *(_WORD *)(a2 + 8) & 0x7F;
    goto LABEL_9;
  }
  return 1;
}

unint64_t sub_22EFCBFBC(unint64_t result)
{
  int v1;
  BOOL v2;
  uint64_t v3;

  while (1)
  {
    v1 = *(_WORD *)(result + 8) & 0x7F;
    v2 = v1 == 5 || v1 == 12;
    if (!v2 && (v1 != 33 || (*(_BYTE *)(result + 12) & 0x80) != 0))
      break;
    v3 = *(_QWORD *)(sub_22EFCAD5C(result) + 16);
    result = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 4) != 0)
      result = *(_QWORD *)result;
  }
  return result;
}

unint64_t sub_22EFCC008(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = a1;
  v2 = *(_WORD *)(a1 + 8) & 0x7F;
  if (v2 > 0x45)
  {
    if (v2 - 70 >= 2 && v2 != 81)
    {
      if (v2 == 83)
      {
        v4 = *(_QWORD *)(a1 + 40);
        v5 = v4 + 40;
LABEL_26:
        if (v4)
          return v5;
        else
          return 0;
      }
      else
      {
LABEL_21:
        if (v2 - 33 <= 4)
        {
          v8 = sub_22EFC3500(a1 - 64);
          if (v8)
          {
            return v8 + 64;
          }
          else
          {
            v9 = *(_QWORD *)(v1 - 16);
            if (v9 && (*(_DWORD *)(v9 + 16) & 0xFE) == 0x2C)
            {
              v10 = sub_22F114198(*(_QWORD *)(v9 + 24));
              v11 = v10 + 64;
              if (!v10)
                v11 = 0;
              if ((*(_BYTE *)(v10 + 74) & 2) != 0)
                return v11;
            }
          }
        }
      }
    }
  }
  else
  {
    switch(*(_WORD *)(a1 + 8) & 0x7F)
    {
      case 1:
      case 2:
      case 5:
      case 6:
      case 0xC:
      case 0x14:
      case 0x15:
      case 0x18:
        return v1;
      case 0x10:
        if ((*(_BYTE *)(a1 + 32) & 3) != 0)
          v4 = a1 - 48;
        else
          v4 = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFF8;
        v5 = v4 + 48;
        goto LABEL_26;
      case 0x13:
        if (v2 != 19)
          return v1;
        v6 = *(_QWORD *)(a1 + 72);
        goto LABEL_19;
      case 0x16:
        if (v2 != 22)
          return v1;
        v6 = *(_QWORD *)(a1 + 72);
        if (!v6)
        {
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 48) + 88), *(_QWORD *)(a1 + 48));
          v6 = *(_QWORD *)(v1 + 72);
        }
        goto LABEL_18;
      case 0x17:
        if (v2 != 23)
          return v1;
        v6 = *(_QWORD *)(a1 + 56);
        if (!v6)
        {
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 48) + 88), *(_QWORD *)(a1 + 48));
          v6 = *(_QWORD *)(v1 + 56);
        }
LABEL_18:
        if (v6 >= 8)
        {
LABEL_19:
          v7 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
          if (v7)
            v1 = v7 + 48;
        }
        break;
      default:
        goto LABEL_21;
    }
  }
  return v1;
}

uint64_t *sub_22EFCC17C(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;

  v3 = result;
  *(_DWORD *)(a2 + 8) = 0;
  v4 = result[1] & 0x7F;
  if (v4 == 16)
    return sub_22F3B1490((uint64_t)(result - 6), a2);
  if (v4 == 83)
    return sub_22F3B13A8((uint64_t)(result - 5), a2);
  if (*(_DWORD *)(a2 + 12))
  {
    v5 = 0;
  }
  else
  {
    result = (uint64_t *)llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(unsigned int *)(a2 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v5) = v3;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_22EFCC21C(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  if (!a2)
    return 0;
  v4 = 0;
  result = 0;
  v6 = 8 * a2;
  do
  {
    v7 = *a1;
    if (a3 && (*(_DWORD *)(v7 + 28) & 0x7Fu) - 49 < 3)
    {
      v7 = v4;
    }
    else if (v4)
    {
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(v4 + 8) & 7 | v7;
    }
    else
    {
      result = *a1;
    }
    ++a1;
    v4 = v7;
    v6 -= 8;
  }
  while (v6);
  return result;
}

int *sub_22EFCC28C(uint64_t a1)
{
  int *v1;
  int *result;
  int *v3;
  int *v4;
  uint64_t v5;
  int *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_WORD *)(a1 + 8) &= ~0x200u;
  v1 = *(int **)a1;
  result = sub_22EC72354(*(int **)a1);
  v4 = v1 + 2;
  if ((*(_BYTE *)v1 & 1) != 0)
  {
    v5 = 4;
  }
  else
  {
    v4 = (int *)*((_QWORD *)v1 + 1);
    v5 = v1[4];
  }
  v6 = &v4[4 * v5];
  while (result != v6)
  {
    *((_QWORD *)result + 1) |= 2uLL;
    v7 = (unint64_t *)(result + 4);
    while (v7 != (unint64_t *)v3)
    {
      v8 = *v7;
      v7 += 2;
      if (v8 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        result = (int *)(v7 - 2);
        goto LABEL_8;
      }
    }
    result = v3;
LABEL_8:
    ;
  }
  return result;
}

BOOL sub_22EFCC320(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int i;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[65];

  v28[64] = *MEMORY[0x24BDAC8D0];
  v2 = *(_WORD *)(a1 + 8) & 0x7F;
  v3 = -40;
  if (v2 > 0x46)
  {
    if (v2 == 83)
      goto LABEL_17;
    if (v2 == 71)
    {
      v3 = -56;
      goto LABEL_17;
    }
    if (v2 != 81)
    {
LABEL_12:
      v4 = v2 - 52;
      v5 = v2 - 33 >= 5;
      v6 = -48;
      if (!v5)
        v6 = -64;
      if (v4 >= 6)
        v3 = v6;
      else
        v3 = -72;
    }
  }
  else
  {
    if (v2 > 0x18)
      goto LABEL_11;
    if (v2 == 16)
    {
LABEL_4:
      v3 = -48;
      goto LABEL_17;
    }
    if (((1 << v2) & 0x1066) == 0)
    {
      if (v2 == 24)
        goto LABEL_4;
LABEL_11:
      if (v2 == 70)
      {
        v3 = -64;
        goto LABEL_17;
      }
      goto LABEL_12;
    }
  }
LABEL_17:
  v7 = a1 + v3;
  if ((*(_DWORD *)(v7 + 28) & 0x7F) != 0x53)
  {
    v8 = *(_QWORD *)(v7 + 16);
    v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    if ((v8 & 4) != 0)
      v9 = *(_QWORD *)v9;
    for (i = *(_WORD *)(v9 + 8) & 0x7F; i != 83; i = *(_WORD *)(v9 + 8) & 0x7F)
    {
      v11 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v11 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_31;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_30;
        if (i == 16)
          goto LABEL_24;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_37;
        if (i == 24)
        {
LABEL_24:
          v11 = -48;
        }
        else
        {
LABEL_30:
          if (i != 70)
          {
LABEL_31:
            v12 = i - 52;
            if ((i - 33) >= 5)
              v13 = -48;
            else
              v13 = -64;
            if (v12 >= 6)
              v11 = v13;
            else
              v11 = -72;
            goto LABEL_37;
          }
          v11 = -64;
        }
      }
LABEL_37:
      v14 = *(_QWORD *)(v9 + v11 + 16);
      v9 = v14 & 0xFFFFFFFFFFFFFFF8;
      if ((v14 & 4) != 0)
        v9 = *(_QWORD *)v9;
    }
    v7 = v9 - 40;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 16048);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 160))(v15);
  v26 = v28;
  v27 = 0x4000000000;
  *(_WORD *)(a1 + 8) &= ~0x80u;
  (*(void (**)(uint64_t, uint64_t, uint64_t (*)(), char *, void **))(*(_QWORD *)v15 + 112))(v15, a1, sub_22EFCECE4, &v25, &v26);
  v16 = v27;
  if ((_DWORD)v27)
  {
    if ((*(_WORD *)(a1 + 8) & 0x7Eu) - 38 >= 0xFFFFFFFC)
      v17 = (*(unsigned __int8 *)(a1 + 11) >> 3) & 1;
    else
      v17 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v18 = (char *)v26;
    v22 = 8 * v27;
    do
    {
      v23 = *(_QWORD *)&v18[v19];
      if (!v17 || (*(_DWORD *)(v23 + 28) & 0x7Fu) - 49 >= 3)
      {
        if (v20)
          *(_QWORD *)(v20 + 8) = *(_QWORD *)(v20 + 8) & 7 | v23;
        else
          v21 = *(_QWORD *)&v18[v19];
        v20 = v23;
      }
      v19 += 8;
    }
    while (v22 != v19);
    *(_QWORD *)(v20 + 8) = *(_QWORD *)(v20 + 8) & 7 | *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21;
    if (!*(_QWORD *)(a1 + 24))
      *(_QWORD *)(a1 + 24) = v20;
  }
  else
  {
    v18 = (char *)v26;
  }
  if (v18 != (char *)v28)
    free(v18);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 168))(v15);
  return v16 != 0;
}

uint64_t sub_22EFCC65C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t j;
  uint64_t v6;
  uint64_t i;

  if (sub_22EFC7ADC((unint64_t)a1))
  {
    result = operator new();
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_DWORD *)result = 1;
    for (i = 8; i != 72; i += 16)
      *(_QWORD *)(result + i) = -1;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    v6 = 4;
  }
  else
  {
    result = operator new();
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_DWORD *)result = 1;
    for (j = 8; j != 72; j += 16)
      *(_QWORD *)(result + j) = -1;
    v6 = 0;
    *(_QWORD *)(result + 72) = 0;
  }
  *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 19008);
  *(_QWORD *)(a2 + 19008) = result & 0xFFFFFFFFFFFFFFFBLL | v6;
  *a1 = result;
  return result;
}

unint64_t sub_22EFCC744(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  __int16 v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int i;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t *v25;
  _BOOL4 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int j;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v53;
  BOOL v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t *v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t v60;

  v59 = a2;
  v7 = *(_WORD *)(a1 + 8);
  v8 = v7 & 0x7F;
  v9 = -40;
  if (v8 > 0x46)
  {
    if (v8 == 83)
      goto LABEL_5;
    if (v8 == 71)
    {
      v9 = -56;
      goto LABEL_5;
    }
    if (v8 != 81)
    {
LABEL_101:
      v53 = v8 - 52;
      v54 = v8 - 33 >= 5;
      v55 = -48;
      if (!v54)
        v55 = -64;
      if (v53 >= 6)
        v9 = v55;
      else
        v9 = -72;
    }
  }
  else
  {
    if (v8 > 0x18)
      goto LABEL_100;
    if (v8 == 16)
    {
LABEL_4:
      v9 = -48;
      goto LABEL_5;
    }
    if (((1 << v8) & 0x1066) == 0)
    {
      if (v8 == 24)
        goto LABEL_4;
LABEL_100:
      if (v8 == 70)
      {
        v9 = -64;
        goto LABEL_5;
      }
      goto LABEL_101;
    }
  }
LABEL_5:
  v10 = a1 + v9;
  if ((*(_DWORD *)(v10 + 28) & 0x7F) != 0x53)
  {
    v11 = *(_QWORD *)(v10 + 16);
    v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 4) != 0)
      v12 = *(_QWORD *)v12;
    for (i = *(_WORD *)(v12 + 8) & 0x7F; i != 83; i = *(_WORD *)(v12 + 8) & 0x7F)
    {
      v14 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v14 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_23;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_22;
        if (i == 16)
          goto LABEL_12;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_13;
        if (i == 24)
        {
LABEL_12:
          v14 = -48;
        }
        else
        {
LABEL_22:
          if (i != 70)
          {
LABEL_23:
            v16 = i - 52;
            if ((i - 33) >= 5)
              v17 = -48;
            else
              v17 = -64;
            if (v16 >= 6)
              v14 = v17;
            else
              v14 = -72;
            goto LABEL_13;
          }
          v14 = -64;
        }
      }
LABEL_13:
      v15 = *(_QWORD *)(v12 + v14 + 16);
      v12 = v15 & 0xFFFFFFFFFFFFFFF8;
      if ((v15 & 4) != 0)
        v12 = *(_QWORD *)v12;
    }
    v10 = v12 - 40;
  }
  v18 = *(_DWORD **)a1;
  if (!*(_QWORD *)a1)
  {
    v18 = (_DWORD *)sub_22EFCC65C((uint64_t *)a1, *(_QWORD *)(v10 + 88));
    v7 = *(_WORD *)(a1 + 8);
  }
  if ((v7 & 0x200) != 0)
    sub_22EFCC28C(a1);
  v60 = 0;
  if ((sub_22EFCF0D8((uint64_t)v18, &v59, &v60) & 1) != 0)
  {
    v20 = (unint64_t *)(v60 + 8);
    v19 = *(_QWORD *)(v60 + 8);
    v21 = v19 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v19 & 0xFFFFFFFFFFFFFFFCLL) >= 8)
    {
      v57 = (unint64_t *)(v60 + 8);
      v22 = sub_22EFCECEC(v19);
      v58 = 0;
      v60 = 0;
      v23 = &v60;
LABEL_37:
      v24 = v23;
      while (1)
      {
        v25 = (unint64_t *)(v21 & 0xFFFFFFFFFFFFFFF8);
        v26 = (v21 & 0xFFFFFFFFFFFFFFF8) == 0 || (v21 & 4) == 0;
        v27 = v21 & 0xFFFFFFFFFFFFFFF8;
        if (!v26)
          v27 = *v25;
        if ((*(_BYTE *)(v27 + 29) & 0x80) == 0)
        {
          if (!a4)
          {
LABEL_51:
            *v24 = v21;
            if (v26)
              goto LABEL_55;
            v30 = v25[1];
            v23 = v25 + 1;
            v21 = v30;
            v58 = v24;
            goto LABEL_37;
          }
          v28 = 8 * a4;
          v29 = a3;
          while (!sub_22EFBAB2C(*v29, v27))
          {
            ++v29;
            v28 -= 8;
            if (!v28)
              goto LABEL_51;
          }
        }
        if (v26)
          break;
        v21 = v25[1];
        v25[1] = *(_QWORD *)(v22 + 15136) | 4;
        *(_QWORD *)(v22 + 15136) = v25;
      }
      if (v58)
      {
        v31 = (_QWORD *)(*v58 & 0xFFFFFFFFFFFFFFF8);
        *v58 = *v31 & 0xFFFFFFFFFFFFFFFBLL;
        v31[1] = *(_QWORD *)(v22 + 15136) | 4;
        *(_QWORD *)(v22 + 15136) = v31;
      }
LABEL_55:
      v20 = v57;
      v19 = *v57 & 3 | v60;
    }
  }
  else
  {
    v56 = sub_22EFCF188(v18, &v59, (_QWORD *)v60);
    v19 = 0;
    *v56 = v59;
    v56[1] = 0;
    v20 = v56 + 1;
  }
  v32 = v19 & 0xFFFFFFFFFFFFFFFDLL;
  *v20 = v19 & 0xFFFFFFFFFFFFFFFDLL;
  if (a4)
  {
    v33 = *a3;
    if (!*a3 || (*(_DWORD *)(v33 + 28) & 0x7F) != 0x53)
    {
      v34 = *(_QWORD *)(v33 + 16);
      v35 = v34 & 0xFFFFFFFFFFFFFFF8;
      if ((v34 & 4) != 0)
        v35 = *(_QWORD *)v35;
      for (j = *(_WORD *)(v35 + 8) & 0x7F; j != 83; j = *(_WORD *)(v35 + 8) & 0x7F)
      {
        v37 = -40;
        if (j > 70)
        {
          if (j == 71)
          {
            v37 = -56;
          }
          else if (j != 81)
          {
            goto LABEL_76;
          }
        }
        else
        {
          if (j > 0x18)
            goto LABEL_75;
          if (j == 16)
            goto LABEL_65;
          if (((1 << j) & 0x1066) != 0)
            goto LABEL_66;
          if (j == 24)
          {
LABEL_65:
            v37 = -48;
          }
          else
          {
LABEL_75:
            if (j != 70)
            {
LABEL_76:
              v39 = j - 52;
              if ((j - 33) >= 5)
                v40 = -48;
              else
                v40 = -64;
              if (v39 >= 6)
                v37 = v40;
              else
                v37 = -72;
              goto LABEL_66;
            }
            v37 = -64;
          }
        }
LABEL_66:
        v38 = *(_QWORD *)(v35 + v37 + 16);
        v35 = v38 & 0xFFFFFFFFFFFFFFF8;
        if ((v38 & 4) != 0)
          v35 = *(_QWORD *)v35;
      }
      v33 = v35 - 40;
    }
    v41 = *(_QWORD *)(v33 + 88);
    v42 = a3[a4 - 1] & 0xFFFFFFFFFFFFFFFBLL;
    if (a4 != 1)
    {
      v43 = a3 - 2;
      do
      {
        v44 = (unint64_t)sub_22EFCEF08(v41, v43[a4]);
        *(_QWORD *)(v44 + 8) = v42;
        v42 = v44 | 4;
        --a4;
      }
      while (a4 != 1);
      v32 = *v20;
    }
    v60 = v32 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v32 & 0xFFFFFFFFFFFFFFFCLL) >= 8)
    {
      v45 = &v60;
      do
      {
        v46 = v45;
        v47 = *v45;
        v48 = v47 & 0xFFFFFFFFFFFFFFF8;
        v50 = v47 & 0xFFFFFFFFFFFFFFF8 & ((uint64_t)(v47 << 61) >> 63);
        v49 = v50 == 0;
        v45 = (unint64_t *)(v50 + 8);
      }
      while (!v49);
      v51 = (unint64_t)sub_22EFCEF08(v41, v48);
      *(_QWORD *)(v51 + 8) = v42;
      *v46 = v51 | 4;
      v42 = v60;
      v32 = *v20;
    }
    v32 = v32 & 3 | v42;
    *v20 = v32;
  }
  return v32 & 0xFFFFFFFFFFFFFFFCLL;
}

uint64_t sub_22EFCCC4C(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 8) & 0x80) != 0)
    sub_22EFCC320(a1);
  return *(_QWORD *)(a1 + 16);
}

BOOL sub_22EFCCC7C(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 8) & 0x80) != 0)
    sub_22EFCC320(a1);
  return *(_QWORD *)(a1 + 16) == 0;
}

BOOL sub_22EFCCCB4(uint64_t a1)
{
  int v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v8;

  if (!*(_QWORD *)(a1 + 40))
    return 1;
  v2 = *(_DWORD *)(a1 + 28);
  v3 = v2 & 0x7F;
  if ((v2 & 0x3FFF0000) == 0 && v3 != 44)
    return 1;
  v4 = v3 > 0x3B;
  v5 = (1 << v3) & 0x800004100000000;
  if (!v4 && v5 != 0)
    return 1;
  if ((v2 & 0x9800000) != 0)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) != a1)
      return 1;
    LOBYTE(v2) = *(_BYTE *)(a1 + 28);
  }
  if ((v2 & 0x7E) == 0x24)
    return 1;
  if ((v2 & 0x7Eu) - 58 >= 0xFFFFFFFA && (*(_QWORD *)(a1 + 144) & 6) == 4)
  {
    v8 = *(_QWORD *)(a1 + 144) & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      if (*(_QWORD *)(v8 + 16) > 7uLL)
        return 1;
    }
  }
  return v2 == 185;
}

uint64_t sub_22EFCCD88(uint64_t a1, _QWORD *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v7 = 0;
  v3 = sub_22EFCF0D8(a1, a2, &v7);
  v4 = a1 + 8;
  if (v3)
    return v7;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v6 = 4;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v6 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v6;
}

uint64_t sub_22EFCCE00(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int i;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;

  v3 = result + 24;
  if (*(_QWORD *)(result + 16))
  {
    *(_QWORD *)(*(_QWORD *)v3 + 8) = *(_QWORD *)(*(_QWORD *)v3 + 8) & 7 | a2;
  }
  else
  {
    *(_QWORD *)v3 = a2;
    v3 = result + 16;
  }
  *(_QWORD *)v3 = a2;
  if ((*(_WORD *)(result + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD)
    result = sub_22EFD1444(result - 64, a2);
  if ((*(_DWORD *)(a2 + 28) & 0x807F) == 0xA)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 4) != 0)
      v5 = *(_QWORD *)v5;
    for (i = *(_WORD *)(v5 + 8) & 0x7F; i != 83; i = *(_WORD *)(v5 + 8) & 0x7F)
    {
      v7 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v7 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_20;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_19;
        if (i == 16)
          goto LABEL_13;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_26;
        if (i == 24)
        {
LABEL_13:
          v7 = -48;
        }
        else
        {
LABEL_19:
          if (i != 70)
          {
LABEL_20:
            v8 = i - 52;
            if ((i - 33) >= 5)
              v9 = -48;
            else
              v9 = -64;
            if (v8 >= 6)
              v7 = v9;
            else
              v7 = -72;
            goto LABEL_26;
          }
          v7 = -64;
        }
      }
LABEL_26:
      v10 = *(_QWORD *)(v5 + v7 + 16);
      v5 = v10 & 0xFFFFFFFFFFFFFFF8;
      if ((v10 & 4) != 0)
        v5 = *(_QWORD *)v5;
    }
    v11 = *(_QWORD *)(v5 + 48);
    if (*(_QWORD *)(v11 + 1944))
    {
      v12 = (unint64_t *)(v11 + 1952);
      *(_QWORD *)(*(_QWORD *)(v11 + 1952) + 48) = *(_QWORD *)(*(_QWORD *)(v11 + 1952) + 48) & 7 | a2;
    }
    else
    {
      *(_QWORD *)(v11 + 1944) = a2;
      v12 = (unint64_t *)(v11 + 1952);
    }
    *v12 = a2;
  }
  return result;
}

uint64_t sub_22EFCCFA0(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;

  result = sub_22EFCCE00(a1, a2);
  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Fu) - 75 >= 0xFFFFFFC2)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if ((v4 & 4) != 0)
      v5 = (_QWORD *)*v5;
    v6 = sub_22EFCC008((uint64_t)v5);
    return sub_22EFCD004(v6, a2, 0, 1);
  }
  return result;
}

uint64_t sub_22EFCD004(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  unsigned int v8;
  BOOL v10;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int16 v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int k;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int j;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;

  for (i = result; ; i = result)
  {
    v8 = *(_WORD *)(i + 8) & 0x7F;
    if (v8 <= 0x18 && ((1 << v8) & 0x1000006) != 0)
      return result;
    v10 = v8 - 52 < 6 || v8 == 12;
    if (!v10 && v8 != 5)
      break;
    if (v8 == 5 || v8 == 12)
    {
      v13 = -40;
    }
    else
    {
      if (v8 != 33 || (*(_BYTE *)(i + 12) & 0x80) != 0)
        return result;
      v13 = -64;
    }
    v14 = *(_QWORD *)(i + v13 + 16);
    v15 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8);
    if ((v14 & 4) != 0)
      v15 = (_QWORD *)*v15;
    result = sub_22EFCC008((uint64_t)v15);
  }
  result = sub_22EFCCCB4(a2);
  if ((result & 1) == 0)
  {
    if (*(_QWORD *)i)
      goto LABEL_79;
    v16 = *(_WORD *)(i + 8);
    if ((v16 & 0x100) != 0)
      goto LABEL_79;
    if ((_DWORD)a4)
    {
      v17 = *(_QWORD *)(a2 + 16);
      if ((v17 & 4) == 0 || *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8) == *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 8))
      {
LABEL_78:
        LOWORD(v29) = v16 | 0x400;
        *(_WORD *)(i + 8) = v29;
LABEL_80:
        v30 = v29 & 0x7F;
        v31 = -40;
        if (v30 != 5 && v30 != 12)
        {
          if (v30 != 33 || (v29 = *(_QWORD *)(i + 8), (v29 & 0x8000000000) != 0))
          {
            if (v30 != 16 || (*(_BYTE *)(i + 56) & 4) == 0)
              goto LABEL_91;
            v31 = -48;
          }
          else
          {
            v31 = -64;
          }
        }
        v32 = *(_QWORD *)(i + v31 + 16);
        v33 = (_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF8);
        if ((v32 & 4) != 0)
          v33 = (_QWORD *)*v33;
        v34 = sub_22EFCC008((uint64_t)v33);
        result = sub_22EFCD004(v34, a2, a3, a4);
        LOWORD(v29) = *(_WORD *)(i + 8);
LABEL_91:
        v35 = v29 & 0x7F;
        v36 = -40;
        if (v35 > 70)
        {
          if (v35 == 83)
            goto LABEL_107;
          if (v35 == 71)
          {
            v36 = -56;
            goto LABEL_107;
          }
          if (v35 != 81)
          {
LABEL_102:
            v37 = v35 - 52;
            v38 = (v35 - 33) >= 5;
            v39 = -48;
            if (!v38)
              v39 = -64;
            if (v37 >= 6)
              v36 = v39;
            else
              v36 = -72;
          }
        }
        else
        {
          if (v35 > 0x18)
            goto LABEL_101;
          if (v35 == 16)
          {
LABEL_94:
            v36 = -48;
            goto LABEL_107;
          }
          if (((1 << v35) & 0x1066) == 0)
          {
            if (v35 == 24)
              goto LABEL_94;
LABEL_101:
            if (v35 == 70)
            {
              v36 = -64;
              goto LABEL_107;
            }
            goto LABEL_102;
          }
        }
LABEL_107:
        v40 = i + v36;
        if ((*(_DWORD *)(v40 + 28) & 0x7Fu) - 33 > 4)
        {
          if ((*(_DWORD *)(v40 + 28) & 0x7F) == 0x53)
          {
LABEL_137:
            result = *(_QWORD *)(*(_QWORD *)(v40 + 88) + 16056);
            if (result)
              return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, i, a2);
            return result;
          }
        }
        else if ((*(_BYTE *)(v40 + 74) & 2) != 0)
        {
          return result;
        }
        v41 = *(_QWORD *)(v40 + 16);
        v42 = v41 & 0xFFFFFFFFFFFFFFF8;
        if ((v41 & 4) != 0)
          v42 = *(_QWORD *)v42;
        for (j = *(_WORD *)(v42 + 8) & 0x7F; j != 83; j = *(_WORD *)(v42 + 8) & 0x7F)
        {
          v44 = -40;
          if (j > 70)
          {
            if (j == 71)
            {
              v44 = -56;
              goto LABEL_130;
            }
            if (j == 81)
              goto LABEL_130;
          }
          else
          {
            if (j <= 0x18)
            {
              if (j == 16)
                goto LABEL_117;
              if (((1 << j) & 0x1066) != 0)
                goto LABEL_130;
              if (j == 24)
              {
LABEL_117:
                v44 = -48;
                goto LABEL_130;
              }
            }
            if (j == 70)
            {
              v44 = -64;
              goto LABEL_130;
            }
          }
          v45 = j - 52;
          if ((j - 33) >= 5)
            v46 = -48;
          else
            v46 = -64;
          if (v45 >= 6)
            v44 = v46;
          else
            v44 = -72;
LABEL_130:
          v47 = *(_QWORD *)(v42 + v44 + 16);
          v42 = v47 & 0xFFFFFFFFFFFFFFF8;
          if ((v47 & 4) != 0)
            v42 = *(_QWORD *)v42;
        }
        v40 = v42 - 40;
        goto LABEL_137;
      }
    }
    v18 = v16 & 0x7F;
    v19 = -40;
    if (v18 > 0x46)
    {
      if (v18 == 83)
        goto LABEL_49;
      if (v18 == 71)
      {
        v19 = -56;
        goto LABEL_49;
      }
      if (v18 != 81)
      {
LABEL_44:
        v20 = -48;
        if (v18 - 33 < 5)
          v20 = -64;
        if (v18 - 52 >= 6)
          v19 = v20;
        else
          v19 = -72;
      }
    }
    else
    {
      if (v18 > 0x18)
        goto LABEL_43;
      if (v18 == 16)
      {
LABEL_36:
        v19 = -48;
        goto LABEL_49;
      }
      if (((1 << v18) & 0x1066) == 0)
      {
        if (v18 == 24)
          goto LABEL_36;
LABEL_43:
        if (v18 == 70)
        {
          v19 = -64;
          goto LABEL_49;
        }
        goto LABEL_44;
      }
    }
LABEL_49:
    v21 = i + v19;
    if ((*(_DWORD *)(v21 + 28) & 0x7F) != 0x53)
    {
      v22 = *(_QWORD *)(v21 + 16);
      v23 = v22 & 0xFFFFFFFFFFFFFFF8;
      if ((v22 & 4) != 0)
        v23 = *(_QWORD *)v23;
      for (k = *(_WORD *)(v23 + 8) & 0x7F; k != 83; k = *(_WORD *)(v23 + 8) & 0x7F)
      {
        v25 = -40;
        if (k > 70)
        {
          if (k == 71)
          {
            v25 = -56;
          }
          else if (k != 81)
          {
            goto LABEL_63;
          }
        }
        else
        {
          if (k > 0x18)
            goto LABEL_62;
          if (k == 16)
            goto LABEL_56;
          result = (1 << k);
          if ((result & 0x1066) != 0)
            goto LABEL_69;
          if (k == 24)
          {
LABEL_56:
            v25 = -48;
          }
          else
          {
LABEL_62:
            if (k != 70)
            {
LABEL_63:
              v26 = k - 52;
              if ((k - 33) >= 5)
                v27 = -48;
              else
                v27 = -64;
              if (v26 >= 6)
                v25 = v27;
              else
                v25 = -72;
              goto LABEL_69;
            }
            v25 = -64;
          }
        }
LABEL_69:
        v28 = *(_QWORD *)(v23 + v25 + 16);
        v23 = v28 & 0xFFFFFFFFFFFFFFF8;
        if ((v28 & 4) != 0)
          v23 = *(_QWORD *)v23;
      }
      v21 = v23 - 40;
    }
    if (v18 == 83 && (**(_QWORD **)(*(_QWORD *)(v21 + 88) + 2000) & 0x100) == 0)
      goto LABEL_78;
LABEL_79:
    sub_22EFCD52C((uint64_t *)i);
    result = (uint64_t)sub_22EFCD8D0(i, a2, a3);
    LOWORD(v29) = *(_WORD *)(i + 8);
    goto LABEL_80;
  }
  return result;
}

uint64_t sub_22EFCD52C(uint64_t *a1)
{
  __int16 v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  __int16 v7;
  __int16 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if ((a1[1] & 0xC00) == 0)
    return *a1;
  v13 = v15;
  v14 = 0x200000000;
  sub_22EFCC17C(a1, (uint64_t)&v13);
  v2 = *((_WORD *)a1 + 4);
  v3 = (uint64_t *)v13;
  v4 = v14;
  if ((v2 & 0x800) != 0)
  {
    v2 &= ~0x800u;
    *((_WORD *)a1 + 4) = v2;
    if ((_DWORD)v4)
    {
      v5 = 8 * v4;
      do
      {
        if ((*(_WORD *)(*v3 + 8) & 0x80) != 0)
        {
          v6 = sub_22EFCC320(*v3);
          v7 = *((_WORD *)a1 + 4);
          if (v6 | ((unsigned __int16)(v7 & 0x400) >> 10))
            v8 = 1024;
          else
            v8 = 0;
          v2 = v8 | v7 & 0xFBFF;
          *((_WORD *)a1 + 4) = v2;
        }
        ++v3;
        v5 -= 8;
      }
      while (v5);
      v3 = (uint64_t *)v13;
    }
    if ((v2 & 0x400) == 0)
      goto LABEL_19;
    LODWORD(v4) = v14;
  }
  if ((_DWORD)v4)
  {
    v9 = 8 * v4;
    do
    {
      v10 = (_QWORD *)*v3++;
      sub_22EFCD680((uint64_t)a1, v10, HIBYTE(*((unsigned __int16 *)a1 + 4)) & 1);
      v9 -= 8;
    }
    while (v9);
    v2 = *((_WORD *)a1 + 4);
    v3 = (uint64_t *)v13;
  }
  *((_WORD *)a1 + 4) = v2 & 0xFBFF;
LABEL_19:
  v11 = *a1;
  if (v3 != v15)
    free(v3);
  return v11;
}

uint64_t sub_22EFCD680(uint64_t result, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t i;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  BOOL v19;
  BOOL v20;

  v3 = a2[2];
  if (v3)
  {
    v6 = result;
    while (1)
    {
      v7 = *(_DWORD *)(v3 + 28);
      if ((v7 & 0x7Fu) - 75 < 0xFFFFFFC2)
        goto LABEL_36;
      v8 = *(_QWORD *)(v3 + 16);
      v9 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
      if ((v8 & 4) != 0)
        v9 = (_QWORD *)*v9;
      if (v9 != a2)
        goto LABEL_36;
      result = sub_22EFCCCB4(v3);
      v7 = *(_DWORD *)(v3 + 28);
      if ((result & 1) != 0)
        goto LABEL_36;
      if ((v7 & 0x8000) != 0)
        break;
LABEL_9:
      result = (uint64_t)sub_22EFCD8D0(v6, v3, a3);
      v7 = *(_DWORD *)(v3 + 28);
LABEL_36:
      v16 = v7 & 0x7F;
      v17 = v16 > 0x39 || ((1 << v16) & 0x3F0003E01011066) == 0;
      if (!v17 || (v16 - 70 <= 0xD ? (v20 = ((1 << (v16 - 70)) & 0x2803) == 0) : (v20 = 1), !v20 || v16 - 19 <= 4))
      {
        result = sub_22EFCAE04(v3);
        v18 = *(_WORD *)(result + 8) & 0x7F;
        v19 = v18 == 5 || v18 == 12;
        if (v19
          || v18 == 33 && (*(_BYTE *)(result + 12) & 0x80) == 0
          || v18 == 16 && (*(_BYTE *)(result + 56) & 4) != 0)
        {
          result = sub_22EFCD680(v6, result, a3);
        }
      }
      v3 = *(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v3)
        return result;
    }
    if ((*(_WORD *)(v6 + 8) & 0x7F) != 0x53)
      goto LABEL_36;
    v10 = v6;
    if ((*(_DWORD *)(v6 - 12) & 0x7F) == 0x53)
    {
LABEL_35:
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 2000) + 1) & 1) != 0)
        goto LABEL_36;
      goto LABEL_9;
    }
    for (i = *(_QWORD *)(v6 - 24); ; i = *(_QWORD *)(v10 + v13 + 16))
    {
      v10 = i & 0xFFFFFFFFFFFFFFF8;
      if ((i & 4) != 0)
        v10 = *(_QWORD *)v10;
      v12 = *(_WORD *)(v10 + 8) & 0x7F;
      if (v12 == 83)
        goto LABEL_35;
      v13 = -40;
      if ((*(_WORD *)(v10 + 8) & 0x7Fu) > 0x46)
      {
        if (v12 == 71)
        {
          v13 = -56;
          continue;
        }
        if (v12 != 81)
          goto LABEL_26;
      }
      else
      {
        if (v12 > 0x18)
          goto LABEL_25;
        if (v12 == 16)
          goto LABEL_19;
        if (((1 << v12) & 0x1066) == 0)
        {
          if (v12 == 24)
          {
LABEL_19:
            v13 = -48;
            continue;
          }
LABEL_25:
          if (v12 == 70)
          {
            v13 = -64;
            continue;
          }
LABEL_26:
          v14 = v12 - 52;
          if (v12 - 33 >= 5)
            v15 = -48;
          else
            v15 = -64;
          if (v14 >= 6)
            v13 = v15;
          else
            v13 = -72;
          continue;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_22EFCD8D0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int k;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *result;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int j;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int n;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  BOOL v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int i;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int m;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;

  v6 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
    v50 = *(_WORD *)(a1 + 8) & 0x7F;
    v51 = -40;
    if (v50 > 0x46)
    {
      if (v50 == 83)
        goto LABEL_126;
      if (v50 == 71)
      {
        v51 = -56;
        goto LABEL_126;
      }
      if (v50 != 81)
      {
LABEL_187:
        v68 = v50 - 52;
        v48 = v50 - 33 >= 5;
        v69 = -48;
        if (!v48)
          v69 = -64;
        if (v68 >= 6)
          v51 = v69;
        else
          v51 = -72;
      }
    }
    else
    {
      if (v50 > 0x18)
        goto LABEL_186;
      if (v50 == 16)
      {
LABEL_125:
        v51 = -48;
        goto LABEL_126;
      }
      if (((1 << v50) & 0x1066) == 0)
      {
        if (v50 == 24)
          goto LABEL_125;
LABEL_186:
        if (v50 == 70)
        {
          v51 = -64;
          goto LABEL_126;
        }
        goto LABEL_187;
      }
    }
LABEL_126:
    v52 = a1 + v51;
    if ((*(_DWORD *)(v52 + 28) & 0x7F) != 0x53)
    {
      v53 = *(_QWORD *)(v52 + 16);
      v54 = v53 & 0xFFFFFFFFFFFFFFF8;
      if ((v53 & 4) != 0)
        v54 = *(_QWORD *)v54;
      for (i = *(_WORD *)(v54 + 8) & 0x7F; i != 83; i = *(_WORD *)(v54 + 8) & 0x7F)
      {
        v56 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v56 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_144;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_143;
          if (i == 16)
            goto LABEL_133;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_134;
          if (i == 24)
          {
LABEL_133:
            v56 = -48;
          }
          else
          {
LABEL_143:
            if (i != 70)
            {
LABEL_144:
              v58 = i - 52;
              if ((i - 33) >= 5)
                v59 = -48;
              else
                v59 = -64;
              if (v58 >= 6)
                v56 = v59;
              else
                v56 = -72;
              goto LABEL_134;
            }
            v56 = -64;
          }
        }
LABEL_134:
        v57 = *(_QWORD *)(v54 + v56 + 16);
        v54 = v57 & 0xFFFFFFFFFFFFFFF8;
        if ((v57 & 4) != 0)
          v54 = *(_QWORD *)v54;
      }
      v52 = v54 - 40;
    }
    v6 = sub_22EFCC65C((uint64_t *)a1, *(_QWORD *)(v52 + 88));
  }
  if ((a3 & 1) != 0)
  {
    v70 = *(_QWORD *)(a2 + 40);
    result = sub_22EFCF4B4((_DWORD *)v6, &v70);
    v23 = result;
    v24 = result[1] | 2;
    result[1] = v24;
    if (v24 <= 7)
    {
      v25 = v24 & 3 | a2 & 0xFFFFFFFFFFFFFFFBLL;
LABEL_82:
      v23[1] = v25;
      return result;
    }
    v28 = a2;
    if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
    {
      v29 = *(_QWORD *)(a2 + 16);
      v30 = v29 & 0xFFFFFFFFFFFFFFF8;
      if ((v29 & 4) != 0)
        v30 = *(_QWORD *)v30;
      for (j = *(_WORD *)(v30 + 8) & 0x7F; j != 83; j = *(_WORD *)(v30 + 8) & 0x7F)
      {
        v32 = -40;
        if (j > 70)
        {
          if (j == 71)
          {
            v32 = -56;
          }
          else if (j != 81)
          {
            goto LABEL_74;
          }
        }
        else
        {
          if (j > 0x18)
            goto LABEL_73;
          if (j == 16)
            goto LABEL_63;
          if (((1 << j) & 0x1066) != 0)
            goto LABEL_64;
          if (j == 24)
          {
LABEL_63:
            v32 = -48;
          }
          else
          {
LABEL_73:
            if (j != 70)
            {
LABEL_74:
              v34 = j - 52;
              if ((j - 33) >= 5)
                v35 = -48;
              else
                v35 = -64;
              if (v34 >= 6)
                v32 = v35;
              else
                v32 = -72;
              goto LABEL_64;
            }
            v32 = -64;
          }
        }
LABEL_64:
        v33 = *(_QWORD *)(v30 + v32 + 16);
        v30 = v33 & 0xFFFFFFFFFFFFFFF8;
        if ((v33 & 4) != 0)
          v30 = *(_QWORD *)v30;
      }
      v28 = v30 - 40;
    }
    result = sub_22EFCEF08(*(_QWORD *)(v28 + 88), a2);
    result[1] = v23[1] & 0xFFFFFFFFFFFFFFFCLL;
    v25 = v23[1] & 3 | (unint64_t)result | 4;
    goto LABEL_82;
  }
  v7 = *(_WORD *)(a1 + 8) & 0x7F;
  v8 = -40;
  if (v7 > 0x46)
  {
    if (v7 == 83)
      goto LABEL_7;
    if (v7 == 71)
    {
      v8 = -56;
      goto LABEL_7;
    }
    if (v7 != 81)
    {
LABEL_117:
      v47 = v7 - 52;
      v48 = v7 - 33 >= 5;
      v49 = -48;
      if (!v48)
        v49 = -64;
      if (v47 >= 6)
        v8 = v49;
      else
        v8 = -72;
    }
  }
  else
  {
    if (v7 > 0x18)
      goto LABEL_116;
    if (v7 == 16)
    {
LABEL_6:
      v8 = -48;
      goto LABEL_7;
    }
    if (((1 << v7) & 0x1066) == 0)
    {
      if (v7 == 24)
        goto LABEL_6;
LABEL_116:
      if (v7 == 70)
      {
        v8 = -64;
        goto LABEL_7;
      }
      goto LABEL_117;
    }
  }
LABEL_7:
  v9 = a1 + v8;
  if ((*(_DWORD *)(v9 + 28) & 0x7F) != 0x53)
  {
    v10 = *(_QWORD *)(v9 + 16);
    v11 = v10 & 0xFFFFFFFFFFFFFFF8;
    if ((v10 & 4) != 0)
      v11 = *(_QWORD *)v11;
    for (k = *(_WORD *)(v11 + 8) & 0x7F; k != 83; k = *(_WORD *)(v11 + 8) & 0x7F)
    {
      v13 = -40;
      if (k > 70)
      {
        if (k == 71)
        {
          v13 = -56;
        }
        else if (k != 81)
        {
          goto LABEL_25;
        }
      }
      else
      {
        if (k > 0x18)
          goto LABEL_24;
        if (k == 16)
          goto LABEL_14;
        if (((1 << k) & 0x1066) != 0)
          goto LABEL_15;
        if (k == 24)
        {
LABEL_14:
          v13 = -48;
        }
        else
        {
LABEL_24:
          if (k != 70)
          {
LABEL_25:
            v15 = k - 52;
            if ((k - 33) >= 5)
              v16 = -48;
            else
              v16 = -64;
            if (v15 >= 6)
              v13 = v16;
            else
              v13 = -72;
            goto LABEL_15;
          }
          v13 = -64;
        }
      }
LABEL_15:
      v14 = *(_QWORD *)(v11 + v13 + 16);
      v11 = v14 & 0xFFFFFFFFFFFFFFF8;
      if ((v14 & 4) != 0)
        v11 = *(_QWORD *)v11;
    }
    v9 = v11 - 40;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v9 + 88) + 16048);
  if (v17 && (*(_WORD *)(a1 + 8) & 0x100) != 0)
  {
    v70 = *(_QWORD *)(a2 + 40);
    v44 = sub_22EFCCD88(v6, &v70);
    v45 = v6 + 8;
    if ((*(_BYTE *)v6 & 1) != 0)
    {
      v46 = 4;
    }
    else
    {
      v45 = *(_QWORD *)(v6 + 8);
      v46 = *(unsigned int *)(v6 + 16);
    }
    if (v45 + 16 * v46 == v44)
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v17 + 72))(v17, a1, *(_QWORD *)(a2 + 40));
  }
  v70 = *(_QWORD *)(a2 + 40);
  result = sub_22EFCF4B4((_DWORD *)v6, &v70);
  v19 = result;
  v20 = result[1];
  if (v20 <= 7)
  {
    v21 = result[1] & 3 | a2 & 0xFFFFFFFFFFFFFFFBLL;
    goto LABEL_36;
  }
  v22 = v20 & 0xFFFFFFFFFFFFFFF8;
  if ((v20 & 4) != 0 || !v22)
  {
    v26 = result[1] & 4;
    do
    {
      if (v26)
        v19 = (uint64_t *)v22;
      else
        v19 = 0;
      result = (uint64_t *)sub_22EFBAB2C(a2, *v19);
      if ((_DWORD)result)
      {
        *v19 = a2;
        return result;
      }
      v27 = v19[1];
      v26 = v27 & 4;
      v22 = v27 & 0xFFFFFFFFFFFFFFF8;
    }
    while ((v27 & 4) != 0 || !v22);
    result = (uint64_t *)sub_22EFBAB2C(a2, v27 & 0xFFFFFFFFFFFFFFF8);
    if ((_DWORD)result)
    {
      v21 = a2 & 0xFFFFFFFFFFFFFFFBLL;
      goto LABEL_36;
    }
    if (!a2 || (v60 = a2, (*(_DWORD *)(a2 + 28) & 0x7F) != 0x53))
    {
      v61 = *(_QWORD *)(a2 + 16);
      v62 = v61 & 0xFFFFFFFFFFFFFFF8;
      if ((v61 & 4) != 0)
        v62 = *(_QWORD *)v62;
      for (m = *(_WORD *)(v62 + 8) & 0x7F; m != 83; m = *(_WORD *)(v62 + 8) & 0x7F)
      {
        v64 = -40;
        if (m > 70)
        {
          if (m == 71)
          {
            v64 = -56;
          }
          else if (m != 81)
          {
            goto LABEL_171;
          }
        }
        else
        {
          if (m > 0x18)
            goto LABEL_170;
          if (m == 16)
            goto LABEL_160;
          if (((1 << m) & 0x1066) != 0)
            goto LABEL_161;
          if (m == 24)
          {
LABEL_160:
            v64 = -48;
          }
          else
          {
LABEL_170:
            if (m != 70)
            {
LABEL_171:
              v66 = m - 52;
              if ((m - 33) >= 5)
                v67 = -48;
              else
                v67 = -64;
              if (v66 >= 6)
                v64 = v67;
              else
                v64 = -72;
              goto LABEL_161;
            }
            v64 = -64;
          }
        }
LABEL_161:
        v65 = *(_QWORD *)(v62 + v64 + 16);
        v62 = v65 & 0xFFFFFFFFFFFFFFF8;
        if ((v65 & 4) != 0)
          v62 = *(_QWORD *)v62;
      }
      v60 = v62 - 40;
    }
    result = sub_22EFCEF08(*(_QWORD *)(v60 + 88), v22);
    v19[1] = (unint64_t)result | 4;
    result[1] = a2 & 0xFFFFFFFFFFFFFFFBLL;
    return result;
  }
  result = (uint64_t *)sub_22EFBAB2C(a2, v20 & 0xFFFFFFFFFFFFFFF8);
  if ((_DWORD)result)
  {
    v21 = v19[1] & 3 | a2 & 0xFFFFFFFFFFFFFFFBLL;
    goto LABEL_36;
  }
  v36 = a2;
  if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
  {
    v37 = *(_QWORD *)(a2 + 16);
    v38 = v37 & 0xFFFFFFFFFFFFFFF8;
    if ((v37 & 4) != 0)
      v38 = *(_QWORD *)v38;
    for (n = *(_WORD *)(v38 + 8) & 0x7F; n != 83; n = *(_WORD *)(v38 + 8) & 0x7F)
    {
      v40 = -40;
      if (n > 70)
      {
        if (n == 71)
        {
          v40 = -56;
        }
        else if (n != 81)
        {
          goto LABEL_102;
        }
      }
      else
      {
        if (n > 0x18)
          goto LABEL_101;
        if (n == 16)
          goto LABEL_91;
        if (((1 << n) & 0x1066) != 0)
          goto LABEL_92;
        if (n == 24)
        {
LABEL_91:
          v40 = -48;
        }
        else
        {
LABEL_101:
          if (n != 70)
          {
LABEL_102:
            v42 = n - 52;
            if ((n - 33) >= 5)
              v43 = -48;
            else
              v43 = -64;
            if (v42 >= 6)
              v40 = v43;
            else
              v40 = -72;
            goto LABEL_92;
          }
          v40 = -64;
        }
      }
LABEL_92:
      v41 = *(_QWORD *)(v38 + v40 + 16);
      v38 = v41 & 0xFFFFFFFFFFFFFFF8;
      if ((v41 & 4) != 0)
        v38 = *(_QWORD *)v38;
    }
    v36 = v38 - 40;
  }
  result = sub_22EFCEF08(*(_QWORD *)(v36 + 88), v22);
  result[1] = a2 & 0xFFFFFFFFFFFFFFFBLL;
  v21 = v19[1] & 3 | (unint64_t)result | 4;
LABEL_36:
  v19[1] = v21;
  return result;
}

unint64_t sub_22EFCE144(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  __int16 v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int i;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int j;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  do
  {
    while (1)
    {
      v3 = a1;
      v48 = a2;
      v4 = *(_WORD *)(a1 + 8) & 0x7F;
      if (v4 != 12 && v4 != 5)
        break;
      v45 = *(_QWORD *)(sub_22EFCAD5C(a1) + 16);
      a1 = v45 & 0xFFFFFFFFFFFFFFF8;
      if ((v45 & 4) != 0)
        a1 = *(_QWORD *)a1;
    }
    a1 = sub_22EFCC008(a1);
  }
  while (a1 != v3);
  v6 = *(_WORD *)(v3 + 8);
  v7 = v6 & 0x7F;
  v8 = -40;
  if (v7 > 0x46)
  {
    if (v7 == 83)
      goto LABEL_10;
    if (v7 == 71)
    {
      v8 = -56;
      goto LABEL_10;
    }
    if (v7 != 81)
    {
LABEL_70:
      v29 = -48;
      if (v7 - 33 < 5)
        v29 = -64;
      if (v7 - 52 >= 6)
        v8 = v29;
      else
        v8 = -72;
    }
  }
  else
  {
    if (v7 > 0x18)
      goto LABEL_69;
    if (v7 == 16)
    {
LABEL_9:
      v8 = -48;
      goto LABEL_10;
    }
    if (((1 << v7) & 0x1066) == 0)
    {
      if (v7 == 24)
        goto LABEL_9;
LABEL_69:
      if (v7 == 70)
      {
        v8 = -64;
        goto LABEL_10;
      }
      goto LABEL_70;
    }
  }
LABEL_10:
  v9 = v3 + v8;
  if ((*(_DWORD *)(v9 + 28) & 0x7F) != 0x53)
  {
    v10 = *(_QWORD *)(v9 + 16);
    v11 = v10 & 0xFFFFFFFFFFFFFFF8;
    if ((v10 & 4) != 0)
      v11 = *(_QWORD *)v11;
    for (i = *(_WORD *)(v11 + 8) & 0x7F; i != 83; i = *(_WORD *)(v11 + 8) & 0x7F)
    {
      v13 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v13 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_28;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_27;
        if (i == 16)
          goto LABEL_17;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_18;
        if (i == 24)
        {
LABEL_17:
          v13 = -48;
        }
        else
        {
LABEL_27:
          if (i != 70)
          {
LABEL_28:
            v15 = i - 52;
            if ((i - 33) >= 5)
              v16 = -48;
            else
              v16 = -64;
            if (v15 >= 6)
              v13 = v16;
            else
              v13 = -72;
            goto LABEL_18;
          }
          v13 = -64;
        }
      }
LABEL_18:
      v14 = *(_QWORD *)(v11 + v13 + 16);
      v11 = v14 & 0xFFFFFFFFFFFFFFF8;
      if ((v14 & 4) != 0)
        v11 = *(_QWORD *)v11;
    }
    v9 = v11 - 40;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v9 + 88) + 16048);
  if (v17)
  {
    v18 = -40;
    if ((int)v7 > 70)
    {
      if (v7 != 83)
      {
        if (v7 == 71)
        {
          v18 = -56;
          goto LABEL_40;
        }
        if (v7 == 81)
          goto LABEL_40;
LABEL_78:
        v30 = v7 - 52;
        v31 = v7 - 33 >= 5;
        v32 = -48;
        if (!v31)
          v32 = -64;
        if (v30 >= 6)
          v18 = v32;
        else
          v18 = -72;
      }
    }
    else
    {
      if (v7 > 0x18)
        goto LABEL_77;
      if (v7 != 16)
      {
        if (((1 << v7) & 0x1066) != 0)
          goto LABEL_40;
        if (v7 != 24)
        {
LABEL_77:
          if (v7 == 70)
          {
            v18 = -64;
            goto LABEL_40;
          }
          goto LABEL_78;
        }
      }
      v18 = -48;
    }
LABEL_40:
    (*(void (**)(uint64_t))(*(_QWORD *)(v3 + v18) + 56))(v3 + v18);
    v6 = *(_WORD *)(v3 + 8);
  }
  if ((v6 & 0x100) == 0)
  {
    if ((v6 & 0xC00) != 0)
    {
      v25 = sub_22EFCD52C((uint64_t *)v3);
      goto LABEL_54;
    }
LABEL_53:
    v25 = *(_QWORD *)v3;
LABEL_54:
    if (v25)
    {
      v26 = sub_22EFCCD88(v25, &v48);
      v27 = v25 + 8;
      if ((*(_BYTE *)v25 & 1) != 0)
      {
        v28 = 4;
      }
      else
      {
        v27 = *(_QWORD *)(v25 + 8);
        v28 = *(unsigned int *)(v25 + 16);
      }
      if (v27 + 16 * v28 != v26)
      {
        v23 = *(_QWORD *)(v26 + 8);
        return v23 & 0xFFFFFFFFFFFFFFFCLL;
      }
    }
    return 0;
  }
  if ((v6 & 0x200) != 0)
  {
    sub_22EFCC28C(v3);
    v6 = *(_WORD *)(v3 + 8);
  }
  if ((v6 & 0xC00) != 0)
    v19 = (_DWORD *)sub_22EFCD52C((uint64_t *)v3);
  else
    v19 = *(_DWORD **)v3;
  if (!v19)
  {
    v33 = *(_WORD *)(v3 + 8) & 0x7F;
    v34 = -40;
    if (v33 > 0x46)
    {
      if (v33 == 83)
        goto LABEL_92;
      if (v33 == 71)
      {
        v34 = -56;
        goto LABEL_92;
      }
      if (v33 != 81)
      {
LABEL_125:
        v43 = v33 - 52;
        v31 = v33 - 33 >= 5;
        v44 = -48;
        if (!v31)
          v44 = -64;
        if (v43 >= 6)
          v34 = v44;
        else
          v34 = -72;
      }
    }
    else
    {
      if (v33 > 0x18)
        goto LABEL_124;
      if (v33 == 16)
      {
LABEL_91:
        v34 = -48;
        goto LABEL_92;
      }
      if (((1 << v33) & 0x1066) == 0)
      {
        if (v33 == 24)
          goto LABEL_91;
LABEL_124:
        if (v33 == 70)
        {
          v34 = -64;
          goto LABEL_92;
        }
        goto LABEL_125;
      }
    }
LABEL_92:
    v35 = v3 + v34;
    if ((*(_DWORD *)(v35 + 28) & 0x7F) != 0x53)
    {
      v36 = *(_QWORD *)(v35 + 16);
      v37 = v36 & 0xFFFFFFFFFFFFFFF8;
      if ((v36 & 4) != 0)
        v37 = *(_QWORD *)v37;
      for (j = *(_WORD *)(v37 + 8) & 0x7F; j != 83; j = *(_WORD *)(v37 + 8) & 0x7F)
      {
        v39 = -40;
        if (j > 70)
        {
          if (j == 71)
          {
            v39 = -56;
          }
          else if (j != 81)
          {
            goto LABEL_110;
          }
        }
        else
        {
          if (j > 0x18)
            goto LABEL_109;
          if (j == 16)
            goto LABEL_99;
          if (((1 << j) & 0x1066) != 0)
            goto LABEL_100;
          if (j == 24)
          {
LABEL_99:
            v39 = -48;
          }
          else
          {
LABEL_109:
            if (j != 70)
            {
LABEL_110:
              v41 = j - 52;
              if ((j - 33) >= 5)
                v42 = -48;
              else
                v42 = -64;
              if (v41 >= 6)
                v39 = v42;
              else
                v39 = -72;
              goto LABEL_100;
            }
            v39 = -64;
          }
        }
LABEL_100:
        v40 = *(_QWORD *)(v37 + v39 + 16);
        v37 = v40 & 0xFFFFFFFFFFFFFFF8;
        if ((v40 & 4) != 0)
          v37 = *(_QWORD *)v37;
      }
      v35 = v37 - 40;
    }
    v19 = (_DWORD *)sub_22EFCC65C((uint64_t *)v3, *(_QWORD *)(v35 + 88));
  }
  v46 = a2;
  v47 = 0;
  v49 = 0;
  v20 = sub_22EFCF0D8((uint64_t)v19, &v46, &v49);
  v21 = v49;
  if (v20)
  {
    v22 = v47;
  }
  else
  {
    v21 = sub_22EFCF188(v19, &v46, v49);
    *v21 = v46;
    v21[1] = v47;
    v22 = v47 & 1;
    v47 = v22;
  }
  sub_22EFCEF5C(v22);
  sub_22EFCEF5C(0);
  if (v20)
  {
    v23 = v21[1];
    if ((v23 & 2) == 0)
      return v23 & 0xFFFFFFFFFFFFFFFCLL;
  }
  if ((v20 | (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 72))(v17, v3, v48)) == 1)
    goto LABEL_53;
  return 0;
}

unint64_t sub_22EFCE704(unint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  do
  {
    v3 = (uint64_t *)a1;
    a1 = sub_22EFCC008(a1);
  }
  while ((uint64_t *)a1 != v3);
  v9 = a2;
  sub_22EFCE790((uint64_t)v3);
  v4 = *v3;
  if (!v4)
    return 0;
  v5 = sub_22EFCCD88(v4, &v9);
  v6 = v4 + 8;
  if ((*(_BYTE *)v4 & 1) != 0)
  {
    v7 = 4;
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 8);
    v7 = *(unsigned int *)(v4 + 16);
  }
  if (v6 + 16 * v7 == v5)
    return 0;
  else
    return *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFFCLL;
}

void sub_22EFCE790(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  if ((*(_WORD *)(a1 + 8) & 0x400) != 0)
  {
    v5 = v7;
    v6 = 0x200000000;
    sub_22EFCC17C((uint64_t *)a1, (uint64_t)&v5);
    v2 = v5;
    if ((_DWORD)v6)
    {
      v3 = 8 * v6;
      do
      {
        v4 = (_QWORD *)*v2++;
        sub_22EFCD680(a1, v4, HIBYTE(*(unsigned __int16 *)(a1 + 8)) & 1);
        v3 -= 8;
      }
      while (v3);
      v2 = v5;
    }
    *(_WORD *)(a1 + 8) &= ~0x400u;
    if (v2 != v7)
      free(v2);
  }
}

BOOL sub_22EFCE860(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BOOL8 result;

  v2 = a2;
  v4 = *(_WORD *)(a1 + 8) & 0x7F;
  v5 = v4 == 83 || v4 == 16;
  if (v5)
  {
    do
    {
      v6 = sub_22EFCC008(v2);
      v5 = v6 == sub_22EFCC008(a1);
      result = v5;
      if (v5 || !v2 || (*(_WORD *)(v2 + 8) & 0x7F) != 0x10 || (*(_BYTE *)(v2 + 56) & 4) == 0)
        break;
      v7 = *(_QWORD *)(v2 - 32);
      v2 = v7 & 0xFFFFFFFFFFFFFFF8;
      if ((v7 & 4) != 0)
        v2 = *(_QWORD *)v2;
    }
    while (v2);
  }
  else
  {
    v8 = sub_22EFCC008(a2);
    return v8 == sub_22EFCC008(a1);
  }
  return result;
}

uint64_t sub_22EFCE90C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _BOOL8 v6;

  v3 = sub_22EFCC008(a1);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (_QWORD *)*v5;
  v6 = v3 == sub_22EFCC008((uint64_t)v5);
  return sub_22EFCD004(v3, a2, 0, v6);
}

uint64_t sub_22EFCE95C(uint64_t result, char a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;

  if (result)
  {
    LOBYTE(v2) = a2;
    v3 = result;
    while (1)
    {
      v4 = *(_QWORD *)(v3 + 72);
      v5 = *(_DWORD *)v3;
      if ((*(_DWORD *)v3 & 1) != 0)
        break;
      v7 = *(unsigned int *)(v3 + 16);
      if ((_DWORD)v7)
      {
        v6 = *(_QWORD *)(v3 + 8);
LABEL_5:
        v8 = 16 * v7;
        v9 = (unint64_t *)(v6 + 8);
        do
        {
          if (*(v9 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
            sub_22EFCEF5C(*v9);
          v9 += 2;
          v8 -= 16;
        }
        while (v8);
        v5 = *(_DWORD *)v3;
      }
      if ((v5 & 1) == 0)
        llvm::deallocate_buffer(*(llvm **)(v3 + 8), (void *)(16 * *(unsigned int *)(v3 + 16)));
      if ((v2 & 1) != 0)
        v10 = 0x1020C4004D1CACCLL;
      else
        v10 = 0x1000C404247E4FDLL;
      result = MEMORY[0x2348A0E9C](v3, v10);
      v2 = (v4 >> 2) & 1;
      v3 = v4 & 0xFFFFFFFFFFFFFFF8;
      if ((v4 & 0xFFFFFFFFFFFFFFF8) == 0)
        return result;
    }
    v6 = v3 + 8;
    v7 = 4;
    goto LABEL_5;
  }
  return result;
}

uint64_t sub_22EFCEA4C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v5 = (uint64_t *)sub_22EFCC008(a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    sub_22EFCC65C(v5, a1);
    v6 = *v7;
  }
  if (*a3)
  {
    v8 = sub_22E3CD3D4(a1 + 2032, 800, 3);
    *(_BYTE *)v8 = 0;
    *(_OWORD *)(v8 + 96) = 0u;
    *(_OWORD *)(v8 + 112) = 0u;
    *(_OWORD *)(v8 + 128) = 0u;
    *(_OWORD *)(v8 + 144) = 0u;
    *(_OWORD *)(v8 + 160) = 0u;
    *(_OWORD *)(v8 + 176) = 0u;
    *(_OWORD *)(v8 + 192) = 0u;
    *(_OWORD *)(v8 + 208) = 0u;
    *(_OWORD *)(v8 + 224) = 0u;
    *(_OWORD *)(v8 + 240) = 0u;
    *(_OWORD *)(v8 + 256) = 0u;
    *(_OWORD *)(v8 + 272) = 0u;
    *(_OWORD *)(v8 + 288) = 0u;
    *(_OWORD *)(v8 + 304) = 0u;
    *(_OWORD *)(v8 + 320) = 0u;
    *(_QWORD *)(v8 + 336) = v8 + 352;
    *(_QWORD *)(v8 + 344) = 0x800000000;
    *(_QWORD *)(v8 + 448) = v8 + 464;
    *(_QWORD *)(v8 + 456) = 0x600000000;
  }
  else
  {
    v8 = 0;
  }
  v9 = sub_22E3CD3D4(a1 + 2032, 64, 3);
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 24) = *((_DWORD *)a3 + 4);
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v9 + 16) = -1;
  v10 = *a3;
  if (v10)
  {
    v11 = 0;
    v12 = *(_OWORD *)(v10 + 16);
    *(_OWORD *)v8 = *(_OWORD *)v10;
    *(_OWORD *)(v8 + 16) = v12;
    v13 = *(_OWORD *)(v10 + 32);
    v14 = *(_OWORD *)(v10 + 48);
    v15 = *(_OWORD *)(v10 + 80);
    *(_OWORD *)(v8 + 64) = *(_OWORD *)(v10 + 64);
    *(_OWORD *)(v8 + 80) = v15;
    *(_OWORD *)(v8 + 32) = v13;
    *(_OWORD *)(v8 + 48) = v14;
    do
    {
      std::string::operator=((std::string *)(v8 + 96 + v11), (const std::string *)(v10 + 96 + v11));
      v11 += 24;
    }
    while (v11 != 240);
    sub_22E78D560(v8 + 336, v10 + 336);
    sub_22E78D658(v8 + 448, (uint64_t *)(v10 + 448));
  }
  *(_DWORD *)(v9 + 32) = 0;
  *(_QWORD *)v9 = *(_QWORD *)(v6 + 80);
  *(_QWORD *)(v6 + 80) = v9;
  return v9;
}

uint64_t sub_22EFCEBB0(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  if ((*(_DWORD *)(a1 + 28) & 0x8000) == 0 || (*(_BYTE *)(a1 + 8) & 6) == 0)
    return 0;
  v1 = a1;
  if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
  {
    v2 = *(_QWORD *)(a1 + 16);
    v3 = v2 & 0xFFFFFFFFFFFFFFF8;
    if ((v2 & 4) != 0)
      v3 = *(_QWORD *)v3;
    for (i = *(_WORD *)(v3 + 8) & 0x7F; i != 83; i = *(_WORD *)(v3 + 8) & 0x7F)
    {
      v5 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v5 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_17;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_16;
        if (i == 16)
          goto LABEL_10;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_23;
        if (i == 24)
        {
LABEL_10:
          v5 = -48;
        }
        else
        {
LABEL_16:
          if (i != 70)
          {
LABEL_17:
            v6 = i - 52;
            if ((i - 33) >= 5)
              v7 = -48;
            else
              v7 = -64;
            if (v6 >= 6)
              v5 = v7;
            else
              v5 = -72;
            goto LABEL_23;
          }
          v5 = -64;
        }
      }
LABEL_23:
      v8 = *(_QWORD *)(v3 + v5 + 16);
      v3 = v8 & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 4) != 0)
        v3 = *(_QWORD *)v3;
    }
    v1 = v3 - 40;
  }
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 88) + 16048) + 88))(*(_QWORD *)(*(_QWORD *)(v1 + 88) + 16048), *(unsigned int *)(a1 - 8));
}

uint64_t sub_22EFCECE4()
{
  return 1;
}

uint64_t sub_22EFCECEC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v1 = a1 & 0xFFFFFFFFFFFFFFF8;
  if ((a1 & 4) != 0 || !v1)
  {
    v1 = *(_QWORD *)v1;
    if (v1 && (*(_DWORD *)(v1 + 28) & 0x7F) == 0x53)
      goto LABEL_55;
    v11 = *(_QWORD *)(v1 + 16);
    v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 4) != 0)
      v12 = *(_QWORD *)v12;
    v13 = *(_WORD *)(v12 + 8) & 0x7F;
    if (v13 == 83)
    {
LABEL_54:
      v1 = v12 - 40;
      goto LABEL_55;
    }
    while (1)
    {
      v14 = -40;
      if (v13 > 70)
      {
        if (v13 == 71)
        {
          v14 = -56;
        }
        else if (v13 != 81)
        {
          goto LABEL_48;
        }
      }
      else
      {
        if (v13 > 0x18)
          goto LABEL_47;
        if (v13 == 16)
          goto LABEL_37;
        if (((1 << v13) & 0x1066) != 0)
          goto LABEL_38;
        if (v13 == 24)
        {
LABEL_37:
          v14 = -48;
        }
        else
        {
LABEL_47:
          if (v13 != 70)
          {
LABEL_48:
            v16 = v13 - 52;
            if ((v13 - 33) >= 5)
              v17 = -48;
            else
              v17 = -64;
            if (v16 >= 6)
              v14 = v17;
            else
              v14 = -72;
            goto LABEL_38;
          }
          v14 = -64;
        }
      }
LABEL_38:
      v15 = *(_QWORD *)(v12 + v14 + 16);
      v12 = v15 & 0xFFFFFFFFFFFFFFF8;
      if ((v15 & 4) != 0)
        v12 = *(_QWORD *)v12;
      v13 = *(_WORD *)(v12 + 8) & 0x7F;
      if (v13 == 83)
        goto LABEL_54;
    }
  }
  if ((*(_DWORD *)(v1 + 28) & 0x7F) == 0x53)
  {
LABEL_55:
    v9 = v1 + 88;
    return *(_QWORD *)v9;
  }
  v2 = *(_QWORD *)(v1 + 16);
  v3 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 4) != 0)
    v3 = *(_QWORD *)v3;
  for (i = *(_WORD *)(v3 + 8) & 0x7F; i != 83; i = *(_WORD *)(v3 + 8) & 0x7F)
  {
    v5 = -40;
    if (i > 70)
    {
      if (i == 71)
      {
        v5 = -56;
        goto LABEL_11;
      }
      if (i == 81)
        goto LABEL_11;
    }
    else
    {
      if (i <= 0x18)
      {
        if (i == 16)
          goto LABEL_10;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_11;
        if (i == 24)
        {
LABEL_10:
          v5 = -48;
          goto LABEL_11;
        }
      }
      if (i == 70)
      {
        v5 = -64;
        goto LABEL_11;
      }
    }
    v7 = i - 52;
    if ((i - 33) >= 5)
      v8 = -48;
    else
      v8 = -64;
    if (v7 >= 6)
      v5 = v8;
    else
      v5 = -72;
LABEL_11:
    v6 = *(_QWORD *)(v3 + v5 + 16);
    v3 = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((v6 & 4) != 0)
      v3 = *(_QWORD *)v3;
  }
  v9 = v3 + 48;
  return *(_QWORD *)v9;
}

_QWORD *sub_22EFCEF08(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 15136);
  if (result)
    *(_QWORD *)(a1 + 15136) = result[1] & ((uint64_t)(result[1] << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
  else
    result = (_QWORD *)sub_22E3CD3D4(a1 + 2032, 16, 3);
  *result = a2;
  result[1] = 0;
  return result;
}

unint64_t sub_22EFCEF5C(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (result >= 8)
  {
    v1 = result;
    result = sub_22EFCECEC(result);
    if ((v1 & 4) != 0)
    {
      v2 = v1 & 0xFFFFFFFFFFFFFFF8;
      if ((v1 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v3 = *(_QWORD *)(result + 15136);
        do
        {
          v4 = *(_QWORD *)(v2 + 8);
          *(_QWORD *)(v2 + 8) = v3 | 4;
          *(_QWORD *)(result + 15136) = v2;
          if ((v4 & 4) == 0)
            break;
          v3 = v2;
          v2 = v4 & 0xFFFFFFFFFFFFFFF8;
        }
        while ((v4 & 0xFFFFFFFFFFFFFFF8) != 0);
      }
    }
  }
  return result;
}

uint64_t sub_22EFCEFB8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(uint64_t **)a1;
  v2 = *(unsigned int *)(a1 + 8);
  i = *(uint64_t **)a1;
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    for (i = *(uint64_t **)a1; *(_WORD *)(*i + 32) != 366; ++i)
    {
      v4 -= 8;
      if (!v4)
        return 0;
    }
  }
  if (i == &v1[v2])
    return 0;
  do
  {
    v6 = *v1++;
    result = v6;
  }
  while (*(_WORD *)(v6 + 32) != 366);
  return result;
}

uint64_t sub_22EFCF018(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(uint64_t **)a1;
  v2 = *(unsigned int *)(a1 + 8);
  i = *(uint64_t **)a1;
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    for (i = *(uint64_t **)a1; *(_WORD *)(*i + 32) != 368; ++i)
    {
      v4 -= 8;
      if (!v4)
        return 0;
    }
  }
  if (i == &v1[v2])
    return 0;
  do
  {
    v6 = *v1++;
    result = v6;
  }
  while (*(_WORD *)(v6 + 32) != 368);
  return result;
}

uint64_t sub_22EFCF078(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(uint64_t **)a1;
  v2 = *(unsigned int *)(a1 + 8);
  i = *(uint64_t **)a1;
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    for (i = *(uint64_t **)a1; *(_WORD *)(*i + 32) != 175; ++i)
    {
      v4 -= 8;
      if (!v4)
        return 0;
    }
  }
  if (i == &v1[v2])
    return 0;
  do
  {
    v6 = *v1++;
    result = v6;
  }
  while (*(_WORD *)(v6 + 32) != 175);
  return result;
}

uint64_t sub_22EFCF0D8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_6;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -1)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -2;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_6;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_6:
  *a3 = v7;
  return result;
}

_QWORD *sub_22EFCF188(_DWORD *a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 4;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_5;
  }
  sub_22EFCF248((unint64_t)a1, v6);
  v8 = 0;
  sub_22EFCF0D8((uint64_t)a1, a2, &v8);
  a3 = v8;
LABEL_5:
  *a1 += 2;
  if (*a3 != -1)
    --a1[1];
  return a3;
}

unint64_t sub_22EFCF248(unint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  llvm *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v15[9];

  v2 = a2;
  v15[8] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 5)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v9 = 0;
    v10 = v15;
    do
    {
      v11 = a1 + v9;
      v12 = *(_QWORD *)(a1 + v9 + 8);
      if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        *v10 = v12;
        v10[1] = *(_QWORD *)(v11 + 16);
        v13 = *(_QWORD *)(v11 + 16) & 1;
        *(_QWORD *)(v11 + 16) = v13;
        v10 += 2;
        sub_22EFCEF5C(v13);
      }
      v9 += 16;
    }
    while (v9 != 64);
    if (v2 > 4)
    {
      *(_DWORD *)a1 &= ~1u;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * v2, 8);
      *(_QWORD *)(a1 + 16) = v2;
    }
    return sub_22EFCF3E0(a1, v15, v10);
  }
  else
  {
    v7 = *(llvm **)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (v2 > 4)
    {
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * v2, 8);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22EFCF3E0(a1, v7, (_QWORD *)v7 + 2 * v8);
    return llvm::deallocate_buffer(v7, (void *)(16 * v8));
  }
}

unint64_t sub_22EFCF3E0(unint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -1;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    if (*a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v11 = 0;
      sub_22EFCF0D8((uint64_t)v5, a2, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      a2[1] &= 1uLL;
      *v5 += 2;
      result = sub_22EFCEF5C(a2[1]);
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_22EFCF4B4(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_22EFCF0D8((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22EFCF188(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

unint64_t sub_22EFCF510(uint64_t a1)
{
  unint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int i;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  result = *(_QWORD *)(a1 + 24);
  if ((result & 1) != 0)
  {
    v3 = *(_QWORD *)(a1 + 88);
    if (!v3 || (*(_DWORD *)(v3 + 28) & 0x7F) != 0x53)
    {
      v4 = *(_QWORD *)(v3 + 16);
      v5 = v4 & 0xFFFFFFFFFFFFFFF8;
      if ((v4 & 4) != 0)
        v5 = *(_QWORD *)v5;
      for (i = *(_WORD *)(v5 + 8) & 0x7F; i != 83; i = *(_WORD *)(v5 + 8) & 0x7F)
      {
        v7 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v7 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_21;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_20;
          if (i == 16)
            goto LABEL_10;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_11;
          if (i == 24)
          {
LABEL_10:
            v7 = -48;
          }
          else
          {
LABEL_20:
            if (i != 70)
            {
LABEL_21:
              v9 = i - 52;
              if ((i - 33) >= 5)
                v10 = -48;
              else
                v10 = -64;
              if (v9 >= 6)
                v7 = v10;
              else
                v7 = -72;
              goto LABEL_11;
            }
            v7 = -64;
          }
        }
LABEL_11:
        v8 = *(_QWORD *)(v5 + v7 + 16);
        v5 = v8 & 0xFFFFFFFFFFFFFFF8;
        if ((v8 & 4) != 0)
          v5 = *(_QWORD *)v5;
      }
      v3 = v5 - 40;
    }
    result = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v3 + 88) + 16048) + 56))(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 16048), result >> 1);
    *(_QWORD *)(a1 + 24) = result;
  }
  return result;
}

_QWORD *sub_22EFCF658(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t a9)
{
  _QWORD *result;
  uint64_t v10;

  result = (_QWORD *)sub_22EFC31D8(a1, a2, a3, a4, a5, a7, a8, a9, a6);
  result[9] &= 0x7FFFFFuLL;
  *result = &off_24FAC3730;
  if (a9)
    v10 = *(_QWORD *)(a9 + 128);
  else
    v10 = 0;
  result[16] = v10;
  result[17] = 0;
  return result;
}

uint64_t sub_22EFCF6C0(uint64_t a1, char a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v16 = sub_22EFC7430(144, a1, a3, 0);
  v17 = (_QWORD *)sub_22EFC31D8(v16, 35, a2, a1, a3, a5, a6, a7, a4);
  v18 = 0;
  v19 = v17[9];
  v17[9] = v19 & 0x7FFFFF;
  *v17 = &off_24FAC3730;
  if (a7)
    v18 = *(_QWORD *)(a7 + 128);
  *(_QWORD *)(v16 + 128) = v18;
  *(_QWORD *)(v16 + 136) = 0;
  *(_DWORD *)(v16 + 72) = (*(_QWORD *)(*(_QWORD *)(a1 + 2000) + 20) >> 25) & 0x100000 | v19 & 0x6FFFFF;
  if ((a8 & 1) == 0 && !*(_QWORD *)(v16 + 48))
  {
    if (a7)
      *(_QWORD *)(v16 + 48) = *(_QWORD *)(a7 + 48);
    else
      sub_22EF6462C(a1, v16);
  }
  return v16;
}

uint64_t sub_22EFCF7D8(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_22E3CD3D4(a1 + 2032, 152, 3);
  *(_DWORD *)v4 = 0;
  *(_DWORD *)(v4 + 4) = a2;
  result = sub_22EFC31D8(v4 + 8, 35, 0, a1, 0, 0, 0, 0, 0);
  v6 = *(_QWORD *)(v4 + 80);
  *(_QWORD *)(v4 + 80) = v6 & 0x7FFFFF;
  *(_QWORD *)(v4 + 8) = &off_24FAC3730;
  *(_QWORD *)(v4 + 136) = 0;
  *(_QWORD *)(v4 + 144) = 0;
  *(_DWORD *)(v4 + 80) = v6 & 0x6FFFFF;
  return result;
}

void sub_22EFCF870(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int i;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int j;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  unsigned __int16 v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  __int16 v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  _QWORD *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  _DWORD *v94;
  _DWORD *v95;
  char v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t k;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  __int128 *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  __int128 v120;
  uint64_t v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  _BYTE *v126;
  _BYTE *v127;
  uint64_t v128;
  int v129;
  _BYTE v130[64];
  _BYTE *v131;
  _BYTE *v132;
  uint64_t v133;
  int v134;
  _BYTE v135[64];
  void *v136;
  uint64_t v137;
  _BYTE v138[64];
  _QWORD *v139;
  unsigned int v140;
  unsigned int v141;
  _QWORD v142[10];

  v142[8] = *MEMORY[0x24BDAC8D0];
  if (!a1 || (v6 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 4) != 0)
      v8 = *(_QWORD *)v8;
    for (i = *(_WORD *)(v8 + 8) & 0x7F; i != 83; i = *(_WORD *)(v8 + 8) & 0x7F)
    {
      v10 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v10 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v10 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v11 = i - 52;
            if ((i - 33) >= 5)
              v12 = -48;
            else
              v12 = -64;
            if (v11 >= 6)
              v10 = v12;
            else
              v10 = -72;
            goto LABEL_22;
          }
          v10 = -64;
        }
      }
LABEL_22:
      v13 = *(_QWORD *)(v8 + v10 + 16);
      v8 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        v8 = *(_QWORD *)v8;
    }
    v6 = v8 - 40;
  }
  v125 = *(_QWORD *)(v6 + 88);
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 128) + 24) & 1) == 0)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
    if (*(_DWORD *)(*(_QWORD *)(a1 + 128) + 16))
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      v14 = *(_QWORD *)(a1 + 128);
      v15 = *(_QWORD *)(v14 + 24);
      if ((v15 & 1) != 0)
      {
        v16 = *(_QWORD *)(v14 + 88);
        if (!v16 || (*(_DWORD *)(v16 + 28) & 0x7F) != 0x53)
        {
          v17 = *(_QWORD *)(v16 + 16);
          v18 = v17 & 0xFFFFFFFFFFFFFFF8;
          if ((v17 & 4) != 0)
            v18 = *(_QWORD *)v18;
          for (j = *(_WORD *)(v18 + 8) & 0x7F; j != 83; j = *(_WORD *)(v18 + 8) & 0x7F)
          {
            v20 = -40;
            if (j > 70)
            {
              if (j == 71)
              {
                v20 = -56;
              }
              else if (j != 81)
              {
                goto LABEL_47;
              }
            }
            else
            {
              if (j > 0x18)
                goto LABEL_46;
              if (j == 16)
                goto LABEL_40;
              if (((1 << j) & 0x1066) != 0)
                goto LABEL_53;
              if (j == 24)
              {
LABEL_40:
                v20 = -48;
              }
              else
              {
LABEL_46:
                if (j != 70)
                {
LABEL_47:
                  v21 = j - 52;
                  if ((j - 33) >= 5)
                    v22 = -48;
                  else
                    v22 = -64;
                  if (v21 >= 6)
                    v20 = v22;
                  else
                    v20 = -72;
                  goto LABEL_53;
                }
                v20 = -64;
              }
            }
LABEL_53:
            v23 = *(_QWORD *)(v18 + v20 + 16);
            v18 = v23 & 0xFFFFFFFFFFFFFFF8;
            if ((v23 & 4) != 0)
              v18 = *(_QWORD *)v18;
          }
          v16 = v18 - 40;
        }
        *(_QWORD *)(v14 + 24) = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 88)
                                                                                                  + 16048)
                                                                                    + 56))(*(_QWORD *)(*(_QWORD *)(v16 + 88) + 16048), v15 >> 1);
      }
    }
  }
  if (a3)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v125 + 2000) + 1) & 8) == 0)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      **(_QWORD **)(a1 + 128) &= ~0x80uLL;
    }
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
    **(_QWORD **)(a1 + 128) &= ~0x100uLL;
  }
  v126 = v130;
  v127 = v130;
  v128 = 8;
  v129 = 0;
  v136 = v138;
  v137 = 0x800000000;
  v24 = a3;
  v25 = sub_22E3CD3D4(v125 + 2032, 24 * a3, 3);
  v26 = v25;
  if (a3)
  {
    v27 = v25;
    do
    {
      *(_QWORD *)v27 = 0;
      *(_DWORD *)(v27 + 8) = 0;
      v27 += 24;
    }
    while (v27 != v25 + 24 * a3);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  *(_QWORD *)(*(_QWORD *)(a1 + 128) + 24) = v26;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  *(_DWORD *)(*(_QWORD *)(a1 + 128) + 16) = a3;
  v124 = a3;
  if (a3)
  {
    v28 = 0;
    while (1)
    {
      v29 = *(__int128 **)(a2 + 8 * v28);
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      v30 = *(_QWORD *)(a1 + 128);
      v31 = *(_QWORD *)(v30 + 24);
      if ((v31 & 1) != 0)
      {
        v32 = *(_QWORD *)(v30 + 88);
        if (!v32 || (*(_DWORD *)(v32 + 28) & 0x7F) != 0x53)
        {
          while (1)
          {
            v33 = *(_QWORD *)(v32 + 16);
            v34 = v33 & 0xFFFFFFFFFFFFFFF8;
            if ((v33 & 4) != 0)
              v34 = *(_QWORD *)v34;
            v35 = *(_WORD *)(v34 + 8) & 0x7F;
            if (v35 == 83)
            {
              v32 = v34 - 40;
              break;
            }
            v36 = -40;
            if ((*(_WORD *)(v34 + 8) & 0x7Fu) > 0x46)
            {
              if (v35 == 71)
              {
                v36 = -56;
                goto LABEL_92;
              }
              if (v35 != 81)
                goto LABEL_86;
            }
            else
            {
              if (v35 > 0x18)
                goto LABEL_85;
              if (v35 == 16)
                goto LABEL_79;
              if (((1 << v35) & 0x1066) == 0)
              {
                if (v35 == 24)
                {
LABEL_79:
                  v36 = -48;
                  goto LABEL_92;
                }
LABEL_85:
                if (v35 == 70)
                {
                  v36 = -64;
                  goto LABEL_92;
                }
LABEL_86:
                v37 = v35 - 52;
                v38 = v35 - 33 >= 5;
                v39 = -64;
                if (v38)
                  v39 = -48;
                v38 = v37 >= 6;
                v36 = -72;
                if (v38)
                  v36 = v39;
              }
            }
LABEL_92:
            v32 = v34 + v36;
          }
        }
        v31 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v32 + 88) + 16048) + 56))(*(_QWORD *)(*(_QWORD *)(v32 + 88) + 16048), v31 >> 1);
        *(_QWORD *)(v30 + 24) = v31;
      }
      v40 = v31 + 24 * v28;
      v41 = *v29;
      *(_QWORD *)(v40 + 16) = *((_QWORD *)v29 + 2);
      *(_OWORD *)v40 = v41;
      v42 = *(_QWORD *)(a2 + 8 * v28);
      v43 = *(_QWORD *)(**(_QWORD **)(v42 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v43 + 8) & 0xF) != 0)
        v43 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v42 + 16));
      v44 = v43 & 0xFFFFFFFFFFFFFFF0;
      v45 = *(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v45 + 17) & 4) == 0)
        break;
LABEL_189:
      if (++v28 == v24)
        goto LABEL_190;
    }
    v46 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 8) & 0xFFFFFFFFFFFFFFF0) + 24));
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v46 + 104) + 96), *(_QWORD *)(v46 + 104));
    if ((**(_QWORD **)(v46 + 128) & 0x4000) != 0 || sub_22EFC3B90(v46))
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      if ((**(_QWORD **)(a1 + 128) & 0x4000) != 0)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
        **(_QWORD **)(a1 + 128) &= ~0x1000uLL;
      }
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      **(_QWORD **)(a1 + 128) |= 0x4000uLL;
    }
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v46 + 104) + 96), *(_QWORD *)(v46 + 104));
    if ((**(_QWORD **)(v46 + 128) & 0x8000) != 0
      || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v46 + 104) + 96), *(_QWORD *)(v46 + 104)),
          (**(_QWORD **)(v46 + 128) & 0x70000) != 0))
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      if ((**(_QWORD **)(a1 + 128) & 0x8000) != 0)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
        **(_QWORD **)(a1 + 128) &= ~0x2000uLL;
      }
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      **(_QWORD **)(a1 + 128) |= 0x8000uLL;
    }
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v46 + 104) + 96), *(_QWORD *)(v46 + 104));
    if ((**(_QWORD **)(v46 + 128) & 0x200) == 0)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      **(_QWORD **)(a1 + 128) &= ~0x200uLL;
    }
    v47 = *(unsigned __int8 *)(v42 + 12);
    v48 = (v47 >> 2) & 3;
    v49 = v47 & 2;
    if (v48 != 3)
      v49 = v48;
    if (v49)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      **(_QWORD **)(a1 + 128) &= ~0x80uLL;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      v50 = *(_QWORD *)(a1 + 128);
      v51 = *(unsigned __int16 *)(v50 + 8);
      v50 += 8;
      v52 = v51 & 0xFFFFFFBF | (*(unsigned __int8 *)(v50 + 2) << 16);
      *(_WORD *)v50 = v51 & 0xFFBF;
      *(_BYTE *)(v50 + 2) = BYTE2(v52);
    }
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v46 + 104) + 96), *(_QWORD *)(v46 + 104));
    if ((**(_QWORD **)(v46 + 128) & 0x400) != 0)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      **(_QWORD **)(a1 + 128) |= 0x400uLL;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      **(_QWORD **)(a1 + 128) &= ~0x80uLL;
    }
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v46 + 104) + 96), *(_QWORD *)(v46 + 104));
    if ((**(_QWORD **)(v46 + 128) & 0x1000) == 0)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      **(_QWORD **)(a1 + 128) &= ~0x1000uLL;
    }
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v46 + 104) + 96), *(_QWORD *)(v46 + 104));
    if ((**(_QWORD **)(v46 + 128) & 0x2000) == 0)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      **(_QWORD **)(a1 + 128) &= ~0x2000uLL;
    }
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
    if ((*(_WORD *)(*(_QWORD *)(a1 + 128) + 8) & 0x20) == 0 && !sub_22F111D3C(*(_QWORD *)v44, v125))
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      *(_WORD *)(*(_QWORD *)(a1 + 128) + 8) |= 0x20u;
    }
    v53 = sub_22EFD94A0(v46);
    v54 = sub_22EFD94A0(v46);
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v46 + 104) + 96), *(_QWORD *)(v46 + 104));
    v55 = v54 + 24 * *(unsigned int *)(*(_QWORD *)(v46 + 128) + 20);
    if (v53 != v55)
    {
      v56 = v53;
      do
      {
        v57 = *(_QWORD *)(**(_QWORD **)(v56 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v57 + 8) & 0xF) != 0)
          v57 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v56 + 16));
        sub_22E3BA850((uint64_t)&v126, *(const void **)((v57 & 0xFFFFFFFFFFFFFFF0) + 8));
        if (v58)
        {
          v59 = v137;
          if (v137 >= (unint64_t)HIDWORD(v137))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v59 = v137;
          }
          *((_QWORD *)v136 + v59) = v53;
          LODWORD(v137) = v137 + 1;
          v60 = *(_QWORD *)(**(_QWORD **)(v56 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v60 + 8) & 0xF) != 0)
            v60 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v56 + 16));
          v61 = sub_22F10C2A4(*(_QWORD *)(v60 & 0xFFFFFFFFFFFFFFF0));
          if (v61 && (*(_DWORD *)(v61 + 28) & 0x7Fu) - 35 <= 2 && (sub_22EFD0B3C(v61) & 1) == 0)
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
            v62 = *(_QWORD *)(a1 + 128);
            v63 = *(unsigned __int16 *)(v62 + 8);
            v62 += 8;
            v64 = v63 & 0xFFFFBFFF | (*(unsigned __int8 *)(v62 + 2) << 16);
            *(_WORD *)v62 = v63 & 0xBFFF;
            *(_BYTE *)(v62 + 2) = BYTE2(v64);
          }
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
          **(_QWORD **)(a1 + 128) &= ~0x80uLL;
        }
        v56 += 24;
        v53 += 24;
      }
      while (v56 != v55);
    }
    if ((*(_BYTE *)(v42 + 12) & 1) != 0)
    {
      sub_22E3BA850((uint64_t)&v126, *(const void **)(v44 + 8));
      if (v69)
      {
        v70 = v137;
        if (v137 >= (unint64_t)HIDWORD(v137))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v70 = v137;
        }
        *((_QWORD *)v136 + v70) = v42;
        LODWORD(v137) = v137 + 1;
      }
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      **(_QWORD **)(a1 + 128) &= ~0x200uLL;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      **(_QWORD **)(a1 + 128) &= ~0x80uLL;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      **(_QWORD **)(a1 + 128) &= 0xFFFFF07FFFFFFFFFLL;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      **(_QWORD **)(a1 + 128) &= 0xFFFC1FFFFFFFFFFFLL;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      **(_QWORD **)(a1 + 128) &= ~0x1000uLL;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      **(_QWORD **)(a1 + 128) &= ~0x2000uLL;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      v71 = *(_QWORD *)(a1 + 128);
      v72 = *(unsigned __int16 *)(v71 + 8);
      v71 += 8;
      v73 = v72 & 0xFFFFFFFB | (*(unsigned __int8 *)(v71 + 2) << 16);
      *(_WORD *)v71 = v72 & 0xFFFB;
      *(_BYTE *)(v71 + 2) = BYTE2(v73);
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      v74 = *(_QWORD *)(a1 + 128);
      v75 = *(unsigned __int16 *)(v74 + 8);
      v74 += 8;
      v76 = v75 & 0xFFFFFFEF | (*(unsigned __int8 *)(v74 + 2) << 16);
      *(_WORD *)v74 = v75 & 0xFFEF;
      *(_BYTE *)(v74 + 2) = BYTE2(v76);
      if ((sub_22EFD0B3C(v46) & 1) != 0)
        goto LABEL_166;
      v68 = -16385;
    }
    else
    {
      if (!sub_22E49F698(v46))
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
        **(_QWORD **)(a1 + 128) &= ~0x8000000000uLL;
      }
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v46 + 104) + 96), *(_QWORD *)(v46 + 104));
      if ((**(_QWORD **)(v46 + 128) & 0x10000000000) == 0)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
        **(_QWORD **)(a1 + 128) &= ~0x10000000000uLL;
      }
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v46 + 104) + 96), *(_QWORD *)(v46 + 104));
      if ((**(_QWORD **)(v46 + 128) & 0x400000000000) == 0)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
        **(_QWORD **)(a1 + 128) &= ~0x400000000000uLL;
      }
      if (!sub_22EACBAD4(v46))
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
        **(_QWORD **)(a1 + 128) &= ~0x20000000000uLL;
      }
      if (!sub_22EACBB38(v46))
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
        **(_QWORD **)(a1 + 128) &= ~0x800000000000uLL;
      }
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v46 + 104) + 96), *(_QWORD *)(v46 + 104));
      if ((**(_QWORD **)(v46 + 128) & 0x40000000000) == 0)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
        **(_QWORD **)(a1 + 128) &= ~0x40000000000uLL;
      }
      if ((sub_22EACA488(v46) & 1) == 0)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
        **(_QWORD **)(a1 + 128) &= ~0x80000000000uLL;
      }
      if ((sub_22EAE4D48(v46) & 1) == 0)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
        v65 = *(_QWORD *)(a1 + 128);
        v66 = *(unsigned __int16 *)(v65 + 8);
        v65 += 8;
        v67 = v66 & 0xFFFFFFFB | (*(unsigned __int8 *)(v65 + 2) << 16);
        *(_WORD *)v65 = v66 & 0xFFFB;
        *(_BYTE *)(v65 + 2) = BYTE2(v67);
      }
      if ((sub_22EFD0B3C(v46) & 1) != 0)
        goto LABEL_166;
      v68 = 0x7FFF;
    }
    v77 = v68 | 0xFF0000;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
    v78 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)v78 = *(_QWORD *)v78;
    v79 = *(unsigned __int16 *)(v78 + 8);
    v78 += 8;
    v80 = (v79 | (*(unsigned __int8 *)(v78 + 2) << 16)) & v77;
    *(_WORD *)v78 = v79 & v77;
    *(_BYTE *)(v78 + 2) = BYTE2(v80);
LABEL_166:
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v46 + 104) + 96), *(_QWORD *)(v46 + 104));
    if ((**(_QWORD **)(v46 + 128) & 0x100000000000) == 0)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      **(_QWORD **)(a1 + 128) &= ~0x100000000000uLL;
    }
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v46 + 104) + 96), *(_QWORD *)(v46 + 104));
    if ((**(_QWORD **)(v46 + 128) & 0x4000000000000) == 0)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      **(_QWORD **)(a1 + 128) &= ~0x4000000000000uLL;
    }
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v46 + 104) + 96), *(_QWORD *)(v46 + 104));
    if ((**(_QWORD **)(v46 + 128) & 0x8000000000000000) == 0)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      **(_QWORD **)(a1 + 128) &= ~0x8000000000000000;
    }
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v46 + 104) + 96), *(_QWORD *)(v46 + 104));
    if (((*(unsigned __int16 *)(*(_QWORD *)(v46 + 128) + 8) | (*(unsigned __int8 *)(*(_QWORD *)(v46 + 128) + 10) << 16)) & 0x80000) != 0)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      v81 = *(_QWORD *)(a1 + 128);
      v82 = *(_WORD *)(v81 + 8);
      v81 += 8;
      v83 = ((*(unsigned __int8 *)(v81 + 2) << 16) | 0x80000u) >> 16;
      *(_WORD *)v81 = v82;
      *(_BYTE *)(v81 + 2) = v83;
    }
    if ((sub_22EFD0BB4(v46) & 1) == 0)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      v84 = *(_QWORD *)(a1 + 128);
      v85 = *(unsigned __int16 *)(v84 + 8);
      v84 += 8;
      v86 = (v85 | (*(unsigned __int8 *)(v84 + 2) << 16)) & 0xFFFEFFFF;
      *(_WORD *)v84 = v85;
      *(_BYTE *)(v84 + 2) = BYTE2(v86);
    }
    v87 = *(_QWORD *)(v46 + 72);
    if ((v87 & 0x2000000) != 0)
    {
      *(_QWORD *)(a1 + 72) |= 0x2000000uLL;
      v87 = *(_QWORD *)(v46 + 72);
    }
    if ((v87 & 0x4000000) != 0)
    {
      *(_QWORD *)(a1 + 72) |= 0x4000000uLL;
      v87 = *(_QWORD *)(v46 + 72);
    }
    if ((v87 & 0x1800000000) == 0x1000000000)
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 72) & 0xFFFFFFE7FFFFFFFFLL | 0x1000000000;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v46 + 104) + 96), *(_QWORD *)(v46 + 104));
    if ((**(_QWORD **)(v46 + 128) & 0x80000) != 0)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      **(_QWORD **)(a1 + 128) |= 0x80000uLL;
    }
    if (sub_22EC4F51C(v46))
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      **(_QWORD **)(a1 + 128) |= 0x1000000uLL;
    }
    if (!sub_22EC4FB1C(v46))
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      **(_QWORD **)(a1 + 128) |= 0x2000000uLL;
    }
    sub_22EFD0C3C(a1, v46);
    goto LABEL_189;
  }
LABEL_190:
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if (v124 >= 2 && (**(_QWORD **)(a1 + 128) & 0x1000) != 0)
  {
    v131 = v135;
    v132 = v135;
    v133 = 8;
    v134 = 0;
    v139 = v142;
    v141 = 8;
    v88 = 1;
    v142[0] = a1;
    do
    {
      v89 = (_QWORD *)v139[v88 - 1];
      v140 = v88 - 1;
      if ((*(_BYTE *)(v89[6] + 17) & 4) == 0)
      {
        v90 = sub_22EFD5480((uint64_t)v89);
        v91 = sub_22EFD5480((uint64_t)v89);
        sub_22E3CD31C((uint64_t *)(v89[13] + 96), v89[13]);
        v92 = v91 + 24 * *(unsigned int *)(v89[16] + 16);
        while (v90 != v92)
        {
          v93 = *(_QWORD *)(**(_QWORD **)(v90 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v93 + 8) & 0xF) != 0)
            v93 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v90 + 16));
          v94 = (_DWORD *)sub_22F10C2A4(*(_QWORD *)(v93 & 0xFFFFFFFFFFFFFFF0));
          if (v94)
          {
            v95 = v94;
            if ((v94[7] & 0x7Fu) - 35 <= 2)
            {
              sub_22E3BA850((uint64_t)&v131, v94);
              if (!v96)
              {
                v98 = 0;
                goto LABEL_208;
              }
              v97 = v140;
              if (v140 >= (unint64_t)v141)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v97 = v140;
              }
              v139[v97] = v95;
              ++v140;
            }
          }
          v90 += 24;
        }
      }
      v88 = v140;
    }
    while (v140);
    v98 = 1;
LABEL_208:
    if (v139 != v142)
      free(v139);
    if (v132 != v131)
      free(v132);
    if ((v98 & 1) == 0)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      **(_QWORD **)(a1 + 128) &= ~0x1000uLL;
    }
  }
  if ((_DWORD)v137)
  {
    v99 = 3 * v137;
    v100 = sub_22E3CD3D4(v125 + 2032, 24 * v137, 3);
    v101 = v100;
    do
    {
      *(_QWORD *)v101 = 0;
      *(_DWORD *)(v101 + 8) = 0;
      v101 += 24;
    }
    while (v101 != v100 + 8 * v99);
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
    *(_QWORD *)(*(_QWORD *)(a1 + 128) + 32) = v100;
    v102 = v137;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
    *(_DWORD *)(*(_QWORD *)(a1 + 128) + 20) = v102;
    v103 = v137;
    if ((_DWORD)v137)
    {
      for (k = 0; k != v103; ++k)
      {
        v105 = *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v136 + k) + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v105 + 8) & 0xF) != 0)
          v105 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(*((_QWORD *)v136 + k) + 16));
        v106 = *(_QWORD *)(v105 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v106 + 17) & 4) == 0)
        {
          v107 = sub_22F10C2A4(v106);
          if (v107)
          {
            if ((*(_DWORD *)(v107 + 28) & 0x7Fu) - 35 >= 3)
              v108 = 0;
            else
              v108 = v107;
          }
          else
          {
            v108 = 0;
          }
          sub_22EFD0C3C(a1, v108);
        }
        v109 = (__int128 *)*((_QWORD *)v136 + k);
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
        v110 = *(_QWORD *)(a1 + 128);
        v111 = *(_QWORD *)(v110 + 32);
        if ((v111 & 1) != 0)
        {
          v112 = *(_QWORD *)(v110 + 88);
          if (!v112 || (*(_DWORD *)(v112 + 28) & 0x7F) != 0x53)
          {
            while (1)
            {
              v113 = *(_QWORD *)(v112 + 16);
              v114 = v113 & 0xFFFFFFFFFFFFFFF8;
              if ((v113 & 4) != 0)
                v114 = *(_QWORD *)v114;
              v115 = *(_WORD *)(v114 + 8) & 0x7F;
              if (v115 == 83)
              {
                v112 = v114 - 40;
                break;
              }
              v116 = -40;
              if ((*(_WORD *)(v114 + 8) & 0x7Fu) > 0x46)
              {
                if (v115 == 71)
                {
                  v116 = -56;
                  goto LABEL_250;
                }
                if (v115 != 81)
                  goto LABEL_244;
              }
              else
              {
                if (v115 > 0x18)
                  goto LABEL_243;
                if (v115 == 16)
                  goto LABEL_237;
                if (((1 << v115) & 0x1066) == 0)
                {
                  if (v115 == 24)
                  {
LABEL_237:
                    v116 = -48;
                    goto LABEL_250;
                  }
LABEL_243:
                  if (v115 == 70)
                  {
                    v116 = -64;
                    goto LABEL_250;
                  }
LABEL_244:
                  v117 = v115 - 52;
                  if (v115 - 33 >= 5)
                    v118 = -48;
                  else
                    v118 = -64;
                  if (v117 >= 6)
                    v116 = v118;
                  else
                    v116 = -72;
                }
              }
LABEL_250:
              v112 = v114 + v116;
            }
          }
          v111 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v112 + 88) + 16048)
                                                                     + 56))(*(_QWORD *)(*(_QWORD *)(v112 + 88) + 16048), v111 >> 1);
          *(_QWORD *)(v110 + 32) = v111;
        }
        v119 = v111 + 24 * k;
        v120 = *v109;
        *(_QWORD *)(v119 + 16) = *((_QWORD *)v109 + 2);
        *(_OWORD *)v119 = v120;
      }
    }
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  v121 = *(_QWORD *)(a1 + 128);
  v122 = *(unsigned __int16 *)(v121 + 8);
  v121 += 8;
  v123 = (v122 | (*(unsigned __int8 *)(v121 + 2) << 16)) & 0xFFDFFFFF;
  *(_WORD *)v121 = v122;
  *(_BYTE *)(v121 + 2) = BYTE2(v123);
  if (v136 != v138)
    free(v136);
  if (v127 != v126)
    free(v127);
}

unint64_t sub_22EFD0B3C(uint64_t a1)
{
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if (((*(unsigned __int16 *)(*(_QWORD *)(a1 + 128) + 8) | (*(unsigned __int8 *)(*(_QWORD *)(a1 + 128) + 10) << 16)) & 0x20000) != 0)
    return 1;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((*(_WORD *)(*(_QWORD *)(a1 + 128) + 8) & 0x200) != 0)
    return 0;
  else
    return sub_22EAB82EC(a1);
}

unint64_t sub_22EFD0BB4(uint64_t a1)
{
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if (((*(unsigned __int16 *)(*(_QWORD *)(a1 + 128) + 8) | (*(unsigned __int8 *)(*(_QWORD *)(a1 + 128) + 10) << 16)) & 0x40000) != 0)
    return 1;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((*(_WORD *)(*(_QWORD *)(a1 + 128) + 8) & 0x800) != 0)
    return 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  return ((unint64_t)(*(unsigned __int8 *)(*(_QWORD *)(a1 + 128) + 10) << 16) >> 16) & 1;
}

unint64_t sub_22EFD0C3C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unint64_t result;
  uint64_t v9;
  int v10;
  unsigned int v11;

  if (!sub_22EB87B38(a2))
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
    **(_QWORD **)(a1 + 128) |= 0x20000000uLL;
  }
  if (!sub_22EFD0F40(a2))
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
    **(_QWORD **)(a1 + 128) |= 0x40000000uLL;
  }
  if (!sub_22EFD0FC4(a2))
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
    **(_QWORD **)(a1 + 128) |= 0x80000000uLL;
  }
  if ((sub_22EFD101C(a2) & 1) == 0)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
    **(_QWORD **)(a1 + 128) |= 0x100000000uLL;
  }
  if (!sub_22EFD10A0(a2))
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
    **(_QWORD **)(a1 + 128) |= 0x20000000uLL;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
    **(_QWORD **)(a1 + 128) |= 0x40000000uLL;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
    **(_QWORD **)(a1 + 128) |= 0x200000000uLL;
  }
  v4 = sub_22EFD10F8(a2);
  if (!v4)
  {
    if ((sub_22EAA9528(a2) & 1) != 0)
      goto LABEL_14;
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v4 + 83) & 0xC0) == 0)
  {
LABEL_13:
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
    v5 = *(_QWORD *)(a1 + 128);
    v6 = *(unsigned __int16 *)(v5 + 8);
    v5 += 8;
    v7 = v6 & 0xFFFFFFEF | (*(unsigned __int8 *)(v5 + 2) << 16);
    *(_WORD *)v5 = v6 & 0xFFEF;
    *(_BYTE *)(v5 + 2) = BYTE2(v7);
  }
LABEL_14:
  result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if ((*(_WORD *)(*(_QWORD *)(a2 + 128) + 8) & 0x40) == 0)
  {
    result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
    v9 = *(_QWORD *)(a1 + 128);
    v10 = *(unsigned __int16 *)(v9 + 8);
    v9 += 8;
    v11 = v10 & 0xFFFFFFBF | (*(unsigned __int8 *)(v9 + 2) << 16);
    *(_WORD *)v9 = v10 & 0xFFBF;
    *(_BYTE *)(v9 + 2) = BYTE2(v11);
  }
  return result;
}

unint64_t sub_22EFD0E14(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v5;
  int v6;
  unsigned int v7;
  llvm *v8[2];
  unsigned int v9;
  void *v10;
  __int128 v11;
  _BYTE v12[128];
  void *v13;
  uint64_t v14;
  _QWORD v15[17];

  v15[16] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 128);
  if (((*(unsigned __int16 *)(v1 + 8) | (unint64_t)((uint64_t)*(char *)(v1 + 10) << 16)) & 0x8000000000000000) != 0)
    return *(unsigned int *)(v1 + 12);
  v8[0] = 0;
  v8[1] = 0;
  v9 = 0;
  v10 = v12;
  v11 = xmmword_22F44E310;
  v13 = v15;
  v14 = 0x2000000000;
  sub_22F0BE85C((uint64_t)v8, *(_QWORD *)(v1 + 88));
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(unsigned __int16 *)(v5 + 8);
  v5 += 8;
  v7 = (v6 | (*(unsigned __int8 *)(v5 + 2) << 16) | 0x800000u) >> 16;
  *(_WORD *)v5 = v6;
  *(_BYTE *)(v5 + 2) = v7;
  v2 = sub_22F0BCA28((uint64_t)v8);
  *(_DWORD *)(*(_QWORD *)(a1 + 128) + 12) = v2;
  if (v13 != v15)
    free(v13);
  if (v10 != v12)
    free(v10);
  llvm::deallocate_buffer(v8[0], (void *)(16 * v9));
  return v2;
}

BOOL sub_22EFD0F40(uint64_t a1)
{
  _BOOL8 result;

  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((**(_QWORD **)(a1 + 128) & 8) != 0)
    return 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((*(_WORD *)(*(_QWORD *)(a1 + 128) + 8) & 0x400) != 0 || (result = sub_22EABDAF8(a1)))
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
    return (**(_QWORD **)(a1 + 128) & 0x800000000) == 0;
  }
  return result;
}

BOOL sub_22EFD0FC4(uint64_t a1)
{
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((**(_QWORD **)(a1 + 128) & 0x10) != 0)
    return 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  return (**(_QWORD **)(a1 + 128) & 0x1000000000) == 0;
}

uint64_t sub_22EFD101C(unint64_t a1)
{
  uint64_t result;

  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((**(_QWORD **)(a1 + 128) & 0x20) != 0)
    return 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((*(_WORD *)(*(_QWORD *)(a1 + 128) + 8) & 0x1000) != 0 || (result = sub_22EABE940(a1), (_DWORD)result))
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
    return (**(_QWORD **)(a1 + 128) & 0x2000000000) == 0;
  }
  return result;
}

BOOL sub_22EFD10A0(uint64_t a1)
{
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((**(_QWORD **)(a1 + 128) & 0x40) != 0)
    return 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  return (**(_QWORD **)(a1 + 128) & 0x4000000000) == 0;
}

unint64_t sub_22EFD10F8(unint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int i;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;

  if (!a1 || (v2 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 4) != 0)
      v4 = *(_QWORD *)v4;
    for (i = *(_WORD *)(v4 + 8) & 0x7F; i != 83; i = *(_WORD *)(v4 + 8) & 0x7F)
    {
      v6 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v6 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_20;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_19;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_10;
        if (i == 24)
        {
LABEL_9:
          v6 = -48;
        }
        else
        {
LABEL_19:
          if (i != 70)
          {
LABEL_20:
            v8 = i - 52;
            if ((i - 33) >= 5)
              v9 = -48;
            else
              v9 = -64;
            if (v8 >= 6)
              v6 = v9;
            else
              v6 = -72;
            goto LABEL_10;
          }
          v6 = -64;
        }
      }
LABEL_10:
      v7 = *(_QWORD *)(v4 + v6 + 16);
      v4 = v7 & 0xFFFFFFFFFFFFFFF8;
      if ((v7 & 4) != 0)
        v4 = *(_QWORD *)v4;
    }
    v2 = v4 - 40;
  }
  v10 = *(_QWORD *)(v2 + 88);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11)
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
    v17 = v10;
    v12 = sub_22EF6462C(v10, a1);
    v10 = v17;
  }
  v13 = sub_22EFC6B40((_QWORD *)(v10 + 15224), v12 & 7 | *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 8));
  v14 = sub_22EFCE144(a1 + 64, v13);
  if (v14 < 8)
    return 0;
  v16 = v14 & 0xFFFFFFFFFFFFFFF8;
  if ((v14 & 4) != 0 && v16)
    v16 = *(_QWORD *)v16;
  if ((*(_DWORD *)(v16 + 28) & 0x7F) == 0x39)
    return v16;
  else
    return 0;
}

uint64_t sub_22EFD12A8(unint64_t a1)
{
  if (sub_22E3CD2C4(a1) || (sub_22EB1C044(a1) & 1) != 0 || sub_22E69200C(a1) || (sub_22EAE8D9C(a1) & 1) != 0)
    return 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  return (**(_QWORD **)(a1 + 128) >> 44) & 1;
}

uint64_t sub_22EFD1310(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  llvm::SmallPtrSetImplBase *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD v14[2];
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v15 = v4;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v4 + 104) + 96), *(_QWORD *)(v4 + 104));
  if ((**(_QWORD **)(v4 + 128) & 0x4000) == 0)
  {
    v5 = *(llvm::SmallPtrSetImplBase **)a1;
    if (*(_DWORD *)(*(_QWORD *)a1 + 20) == *(_DWORD *)(*(_QWORD *)a1 + 24))
    {
      v14[0] = &v15;
      v14[1] = v5;
      if (sub_22EFB3B2C(v3, (uint64_t (*)(uint64_t, uint64_t))sub_22EFD95F8, (uint64_t)v14))
      {
        v4 = v15;
        goto LABEL_9;
      }
    }
    else
    {
      v6 = sub_22E3BA914(*(llvm::SmallPtrSetImplBase **)a1, (void *)v4);
      v7 = *((_QWORD *)v5 + 1);
      v8 = 16;
      if (v7 == *(_QWORD *)v5)
        v8 = 20;
      if (v6 == (void **)(v7 + 8 * *(unsigned int *)((char *)v5 + v8)))
        goto LABEL_9;
    }
    return 1;
  }
LABEL_9:
  sub_22E3BA850(*(_QWORD *)(a1 + 16), (const void *)v4);
  if (!v10)
    return 0;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v15;
  v13 = *(_DWORD *)(v11 + 8);
  if (v13 >= *(_DWORD *)(v11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(v11 + 8);
  }
  result = 0;
  *(_QWORD *)(*(_QWORD *)v11 + 8 * v13) = v12;
  ++*(_DWORD *)(v11 + 8);
  return result;
}

uint64_t sub_22EFD1444(uint64_t result, unint64_t a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int j;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int n;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  _BOOL4 v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  _QWORD *ii;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int i;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t *v83;
  uint64_t v84;
  int v85;
  BOOL v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  _QWORD *v91;
  int v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  __int16 v97;
  __int16 v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  int v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  unsigned int v108;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _BOOL4 v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  int k;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int16 v135;
  unsigned int v136;
  uint64_t v137;
  int v138;
  int v139;
  uint64_t v140;
  int v141;
  unsigned int v142;
  uint64_t v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  unsigned int v160;
  uint64_t v161;
  int v162;
  unsigned int v163;
  uint64_t v164;
  int v165;
  unsigned int v166;
  char v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  int m;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD v182[4];
  _BYTE *v183;
  _BYTE *v184;
  uint64_t v185;
  int v186;
  _BYTE v187[64];
  _BYTE *v188;
  _BYTE *v189;
  uint64_t v190;
  int v191;
  _BYTE v192[64];
  _QWORD *v193;
  uint64_t v194;
  _QWORD v195[10];

  v3 = result;
  v195[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 28);
  if ((v4 & 0x200) == 0)
  {
    v5 = (*(_DWORD *)(a2 + 28) & 0x7Fu) - 49 > 0x13 || ((1 << ((v4 & 0x7F) - 49)) & 0x80007) == 0;
    if (v5 && ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 33 > 4 || ((*(_DWORD *)(a2 + 72) >> 13) & 5 | 2) == 3))
    {
      result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(result + 104) + 96), *(_QWORD *)(result + 104));
      **(_QWORD **)(v3 + 128) &= ~0x200000uLL;
      v4 = *(_DWORD *)(a2 + 28);
    }
  }
  if ((v4 & 0x1800080) == 0)
  {
    v6 = v4 & 0x7F;
    v7 = v6;
    v8 = a2;
    if (v6 == 29)
    {
      v8 = *(_QWORD *)(a2 + 48);
      v4 = *(_DWORD *)(v8 + 28);
      v7 = v4 & 0x7F;
    }
    v9 = v8;
    if (v7 - 75 >= 0xFFFFFFC2)
    {
      v10 = v7 > 0x2F;
      v11 = (1 << v7) & 0xC00000060000;
      v12 = v10 || v11 == 0;
      LOBYTE(v13) = v4;
      v9 = v8;
      if (!v12)
      {
        result = sub_22EFBAEA4(v8);
        v9 = result;
        v13 = *(_DWORD *)(result + 28);
      }
      if ((v13 & 0x7F) == 0x1D)
        v9 = *(_QWORD *)(v9 + 48);
    }
    if ((v4 & 0x7Eu) - 58 >= 0xFFFFFFFC)
    {
      result = sub_22EFD397C(v8);
      if ((_DWORD)result)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        **(_QWORD **)(v3 + 128) &= ~0x80uLL;
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        **(_QWORD **)(v3 + 128) &= ~0x100uLL;
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        **(_QWORD **)(v3 + 128) &= ~0x200uLL;
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        **(_QWORD **)(v3 + 128) |= 0x400uLL;
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        **(_QWORD **)(v3 + 128) &= 0xFFFFF07FFFFFFFFFLL;
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        **(_QWORD **)(v3 + 128) &= 0xFFFC1FFFFFFFFFFFLL;
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        **(_QWORD **)(v3 + 128) &= ~0x1000uLL;
        result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        **(_QWORD **)(v3 + 128) &= ~0x2000uLL;
      }
    }
    v14 = *(_DWORD *)(v8 + 28);
    if ((*(_BYTE *)(v3 + 74) & 2) == 0 && (v14 & 0x200) != 0)
    {
      result = sub_22EFC8974(v3);
      if (result)
      {
        v15 = result;
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        result = (*(uint64_t (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v15 + 32))(v15, *(_QWORD *)(*(_QWORD *)(v3 + 128) + 88), v8);
        v14 = *(_DWORD *)(v8 + 28);
      }
    }
    if ((v14 & 0x7F) != 0x37 || (*(_BYTE *)(v8 + 87) & 0x20) != 0)
    {
      v16 = 0;
    }
    else
    {
      if ((v14 & 0x200) == 0)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        **(_QWORD **)(v3 + 128) |= 1uLL;
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        **(_QWORD **)(v3 + 128) &= ~0x100uLL;
      }
      result = sub_22EFC0EB8(v8);
      if ((_DWORD)result)
      {
        v16 = 0;
      }
      else
      {
        result = sub_22E692064(v8);
        if ((_DWORD)result)
        {
          result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
          *(_WORD *)(*(_QWORD *)(v3 + 128) + 8) |= 0x80u;
        }
        v57 = *(_QWORD *)(v8 + 80);
        if ((v57 & 0xC0000000) != 0)
        {
          result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
          *(_WORD *)(*(_QWORD *)(v3 + 128) + 8) |= 8u;
          v57 = *(_QWORD *)(v8 + 80);
        }
        if ((v57 & 0x2000000) != 0)
        {
          result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
          *(_WORD *)(*(_QWORD *)(v3 + 128) + 8) |= 2u;
        }
        v16 = 1;
      }
      if (v6 != 29)
      {
        LODWORD(v188) = 0;
        result = sub_22EFD8088(v8, (int *)&v188);
        if ((_DWORD)result
          && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v8 + 120) + 48) & 0xFFFFFFFFFFFFFFF0)
                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) == 40)
        {
          v16 |= 2u;
          if ((v188 & 1) != 0)
          {
            result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
            v58 = *(_QWORD *)(v3 + 128);
            v59 = *(_WORD *)(v58 + 8);
            v58 += 8;
            v60 = ((*(unsigned __int8 *)(v58 + 2) << 16) | 0x20000u) >> 16;
            *(_WORD *)v58 = v59;
            *(_BYTE *)(v58 + 2) = v60;
          }
        }
        else
        {
          result = sub_22EFD3B40(v8);
          if ((_DWORD)result)
            v16 |= 4u;
        }
      }
      v61 = v3;
      if ((*(_DWORD *)(v3 + 28) & 0x7F) != 0x53)
      {
        v62 = *(_QWORD *)(v3 + 16);
        v63 = v62 & 0xFFFFFFFFFFFFFFF8;
        if ((v62 & 4) != 0)
          v63 = *(_QWORD *)v63;
        for (i = *(_WORD *)(v63 + 8) & 0x7F; i != 83; i = *(_WORD *)(v63 + 8) & 0x7F)
        {
          v65 = -40;
          if (i > 70)
          {
            if (i == 71)
            {
              v65 = -56;
            }
            else if (i != 81)
            {
              goto LABEL_179;
            }
          }
          else
          {
            if (i > 0x18)
              goto LABEL_178;
            if (i == 16)
              goto LABEL_172;
            if (((1 << i) & 0x1066) != 0)
              goto LABEL_185;
            if (i == 24)
            {
LABEL_172:
              v65 = -48;
            }
            else
            {
LABEL_178:
              if (i != 70)
              {
LABEL_179:
                v66 = i - 52;
                if ((i - 33) >= 5)
                  v67 = -48;
                else
                  v67 = -64;
                if (v66 >= 6)
                  v65 = v67;
                else
                  v65 = -72;
                goto LABEL_185;
              }
              v65 = -64;
            }
          }
LABEL_185:
          v68 = *(_QWORD *)(v63 + v65 + 16);
          v63 = v68 & 0xFFFFFFFFFFFFFFF8;
          if ((v68 & 4) != 0)
            v63 = *(_QWORD *)v63;
        }
        v61 = v63 - 40;
      }
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v61 + 88) + 2000) + 1) & 0x10) != 0)
      {
        if ((*(_BYTE *)(v8 + 29) & 2) == 0)
        {
LABEL_244:
          result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
          **(_QWORD **)(v3 + 128) &= ~0x80uLL;
        }
      }
      else
      {
        result = sub_22E692064(v8);
        if ((result & 1) != 0)
          goto LABEL_244;
        v69 = *(_QWORD *)(v8 + 112);
        v70 = *(_QWORD *)(v69 + 80);
        v71 = (v70 & 0x4000000000000000) != 0 ? *(_QWORD *)(v69 + 16 * ((v70 >> 61) & 1) + 168) & 3 : v70 >> 63;
        if (v71 == 1)
          goto LABEL_244;
      }
    }
    if ((*(_DWORD *)(v9 + 28) & 0x7F) == 0x37 && v9)
    {
      if ((*(_BYTE *)(v9 + 83) & 0xC0) != 0)
      {
        LODWORD(v188) = 0;
        result = sub_22EFD8088(v9, (int *)&v188);
        if ((result & 1) == 0)
        {
          result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
          *(_WORD *)(*(_QWORD *)(v3 + 128) + 8) |= 1u;
        }
      }
      if ((*(_DWORD *)(v8 + 28) & 0x7F) != 0x37)
      {
        result = sub_22EFC0EB8(v9);
        if (!(_DWORD)result)
        {
          result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
          **(_QWORD **)(v3 + 128) |= 0x8000000uLL;
        }
      }
    }
    if ((*(_DWORD *)(v8 + 28) & 0x7F) == 0x39)
    {
      if (sub_22E692064(v8))
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        **(_QWORD **)(v3 + 128) &= ~0x8000000000000000;
      }
      v16 |= 0x20u;
      if (sub_22EFD397C(v8))
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        **(_QWORD **)(v3 + 128) &= ~0x100000000000uLL;
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        **(_QWORD **)(v3 + 128) &= ~0x4000000000000uLL;
      }
      result = sub_22EFC0BA0(v8);
      if ((_DWORD)result)
      {
        result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        v17 = *(_QWORD *)(v3 + 128);
        v18 = *(_WORD *)(v17 + 8);
        v17 += 8;
        v19 = ((*(unsigned __int8 *)(v17 + 2) << 16) | 0x80000u) >> 16;
        *(_WORD *)v17 = v18;
        *(_BYTE *)(v17 + 2) = v19;
      }
    }
    v20 = *(_DWORD *)(v8 + 28);
    if ((v20 & 0x7Eu) - 58 < 0xFFFFFFFC)
    {
      if ((v20 & 0x7Fu) - 52 < 0xFFFFFFFD)
        goto LABEL_454;
      if (!v3 || (v21 = v3, (*(_DWORD *)(v3 + 28) & 0x7F) != 0x53))
      {
        v22 = *(_QWORD *)(v3 + 16);
        v23 = v22 & 0xFFFFFFFFFFFFFFF8;
        if ((v22 & 4) != 0)
          v23 = *(_QWORD *)v23;
        for (j = *(_WORD *)(v23 + 8) & 0x7F; j != 83; j = *(_WORD *)(v23 + 8) & 0x7F)
        {
          v25 = -40;
          if (j > 70)
          {
            if (j == 71)
            {
              v25 = -56;
            }
            else if (j != 81)
            {
              goto LABEL_64;
            }
          }
          else
          {
            if (j > 0x18)
              goto LABEL_63;
            if (j == 16)
              goto LABEL_57;
            if (((1 << j) & 0x1066) != 0)
              goto LABEL_70;
            if (j == 24)
            {
LABEL_57:
              v25 = -48;
            }
            else
            {
LABEL_63:
              if (j != 70)
              {
LABEL_64:
                v26 = j - 52;
                if ((j - 33) >= 5)
                  v27 = -48;
                else
                  v27 = -64;
                if (v26 >= 6)
                  v25 = v27;
                else
                  v25 = -72;
                goto LABEL_70;
              }
              v25 = -64;
            }
          }
LABEL_70:
          v28 = *(_QWORD *)(v23 + v25 + 16);
          v23 = v28 & 0xFFFFFFFFFFFFFFF8;
          if ((v28 & 4) != 0)
            v23 = *(_QWORD *)v23;
        }
        v21 = v23 - 40;
      }
      v46 = *(_QWORD *)(v21 + 88);
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
      if ((**(_QWORD **)(v3 + 128) & 0x4000) != 0)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        **(_QWORD **)(v3 + 128) &= ~0x1000uLL;
      }
      if ((*(_BYTE *)(v8 + 68) & 1) != 0 && !*(_QWORD *)(v8 + 40))
      {
        result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        if ((**(_QWORD **)(v3 + 128) & 0x200) == 0)
          return result;
        result = sub_22EFC2F84(v8, v46);
        if ((result & 1) != 0 || (*(_BYTE *)(*(_QWORD *)(v46 + 2000) + 250) & 0xF) << 16 <= 0x20000u)
          return result;
        result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        v95 = *(unint64_t **)(v3 + 128);
        v96 = *v95 & 0xFFFFFFFFFFFFFDFFLL;
        goto LABEL_493;
      }
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
      if ((**(_QWORD **)(v3 + 128) & 0x8000) != 0)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        **(_QWORD **)(v3 + 128) &= ~0x2000uLL;
      }
      if (((*(_DWORD *)(v8 + 28) >> 13) & 3u) - 1 <= 1)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        **(_QWORD **)(v3 + 128) &= ~0x80uLL;
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        **(_QWORD **)(v3 + 128) &= ~0x100uLL;
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        v47 = *(_QWORD *)(v3 + 128);
        v48 = *(unsigned __int16 *)(v47 + 8);
        v47 += 8;
        v49 = v48 & 0xFFFFFFBF | (*(unsigned __int8 *)(v47 + 2) << 16);
        *(_WORD *)v47 = v48 & 0xFFBF;
        *(_BYTE *)(v47 + 2) = BYTE2(v49);
      }
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
      if ((**(_QWORD **)(v3 + 128) & 0x10000) != 0
        || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104)),
            (**(_QWORD **)(v3 + 128) & 0x20000) != 0))
      {
        v50 = 0;
      }
      else
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        v50 = (**(_QWORD **)(v3 + 128) & 0x40000) == 0;
      }
      v55 = (*(_DWORD *)(v8 + 28) >> 13) & 3;
      if (v55)
      {
        if (v55 == 2)
        {
          v56 = 0x10000;
        }
        else
        {
          if (v55 != 1)
            goto LABEL_204;
          v56 = 0x20000;
        }
      }
      else
      {
        v56 = 0x40000;
      }
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
      v73 = *(_QWORD *)(v3 + 128);
      *(_QWORD *)v73 |= v56;
      v74 = *(unsigned __int16 *)(v73 + 8);
      v73 += 8;
      v75 = v74 | (*(unsigned __int8 *)(v73 + 2) << 16);
      *(_WORD *)v73 = v74;
      *(_BYTE *)(v73 + 2) = BYTE2(v75);
LABEL_204:
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
      v76 = HIWORD(**(_DWORD **)(v3 + 128)) & 1;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
      v77 = ((**(_DWORD **)(v3 + 128) >> 17) & 1) + v76;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
      if (v77 + ((**(_DWORD **)(v3 + 128) >> 18) & 1u) >= 2)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        **(_QWORD **)(v3 + 128) &= ~0x1000uLL;
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        **(_QWORD **)(v3 + 128) &= ~0x2000uLL;
      }
      if ((*(_BYTE *)(v8 + 68) & 2) != 0)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        **(_QWORD **)(v3 + 128) |= 0x80000uLL;
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        v78 = *(_QWORD *)(v3 + 128);
        v79 = *(unsigned __int16 *)(v78 + 8);
        v78 += 8;
        v80 = v79 & 0xFFFFFFBF | (*(unsigned __int8 *)(v78 + 2) << 16);
        *(_WORD *)v78 = v79 & 0xFFBF;
        *(_BYTE *)(v78 + 2) = BYTE2(v80);
      }
      if ((*(_DWORD *)(v3 + 72) & 0xE000) == 0x4000 && (sub_22EFC2E8C(v8) & 1) == 0)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        **(_QWORD **)(v3 + 128) |= 0x100000uLL;
      }
      v81 = sub_22EF5BA38(v46, *(_QWORD *)(v8 + 48));
      v82 = v81;
      v181 = v81;
      v83 = (uint64_t *)(v81 & 0xFFFFFFFFFFFFFFF0);
      v84 = *(_QWORD *)(v81 & 0xFFFFFFFFFFFFFFF0);
      v85 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v84 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v85 == 32 || v85 == 10)
      {
        v89 = v83 + 1;
        v88 = v83[1];
        if ((v88 & 8) == 0)
          goto LABEL_253;
      }
      else
      {
        v87 = sub_22F115064(v84);
        v89 = v83 + 1;
        v88 = v83[1];
        if (!v87)
        {
          if ((v88 & 8) == 0 || (v90 = v88 & 0xFFFFFFFFFFFFFFF0, (*(_QWORD *)(v90 + 24) & 0x30) != 0x20))
          {
            if ((sub_22F111624((unint64_t *)&v181, v46) & 1) != 0)
              goto LABEL_255;
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
            v93 = *(unint64_t **)(v3 + 128);
            v94 = *v93 & 0xFFFFFFFFFFFFFEFFLL;
LABEL_251:
            *v93 = v94;
LABEL_255:
            if ((*v89 & 8) != 0
              && (*(_DWORD *)((*v89 & 0xFFFFFFFFFFFFFFF0) + 0x1C) & 0xC) != 0
              && (*(_DWORD *)((*v89 & 0xFFFFFFFFFFFFFFF0) + 0x1C) & 2) != 0)
            {
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) &= 0xFFFFF0FFFFFFFEFFLL;
              v110 = *(_QWORD *)(v3 + 72);
              *(_QWORD *)(v3 + 72) = v110 & 0xFFFFFFE7FFFFFFFFLL | 0x1000000000;
              if ((v110 & 0xE000) == 0x4000)
              {
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x400000000uLL;
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x800000000uLL;
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x1000000000uLL;
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x2000000000uLL;
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x20000000uLL;
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x40000000uLL;
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x80000000uLL;
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x100000000uLL;
              }
            }
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v83 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
            {
              if ((*(_DWORD *)(v8 + 72) & 3) == 3 || (*(_DWORD *)(v8 + 72) & 3) == 0)
              {
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x1000000uLL;
              }
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) &= ~0x1000uLL;
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) &= ~0x2000uLL;
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v83 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 41)
              {
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x400000000uLL;
              }
            }
            if (((*(_DWORD *)(v8 + 72) & 3) == 3 || (*(_DWORD *)(v8 + 72) & 3) == 0) && (*(_BYTE *)(v8 + 68) & 2) == 0)
            {
              if ((v111 = sub_22F10C2A4(*v83)) == 0
                || (v112 = v111, (*(_DWORD *)(v111 + 28) & 0x7Fu) - 35 > 2)
                || (*(_QWORD *)(v111 + 128)
                 || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v111 + 104) + 96), *(_QWORD *)(v111 + 104)),
                     *(_QWORD *)(v112 + 128)))
                && !sub_22EC4FB1C(v112))
              {
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x2000000uLL;
              }
            }
            v113 = sub_22F111D3C(*v83, v46);
            if ((v82 & 4) != 0 || !v113 || (*(_BYTE *)v89 & 4) != 0)
            {
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              *(_WORD *)(*(_QWORD *)(v3 + 128) + 8) |= 0x20u;
            }
            if ((*(_DWORD *)(v8 + 72) & 3) != 3 && (*(_DWORD *)(v8 + 72) & 3) != 0
              || sub_22EFC2E8C(v8)
              && ((v114 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFFFF0)),
                   (*(_DWORD *)(v114 + 28) & 0x7Fu) - 35 >= 3)
                ? (v115 = 0)
                : (v115 = v114),
                  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v115 + 104) + 96), *(_QWORD *)(v115 + 104)),
                  (**(_QWORD **)(v115 + 128) & 0x800000) != 0))
            {
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) |= 0x800000uLL;
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) &= ~0x8000000000uLL;
              if (!v3 || (v116 = v3, (*(_DWORD *)(v3 + 28) & 0x7F) != 0x53))
              {
                v117 = *(_QWORD *)(v3 + 16);
                v118 = v117 & 0xFFFFFFFFFFFFFFF8;
                if ((v117 & 4) != 0)
                  v118 = *(_QWORD *)v118;
                for (k = *(_WORD *)(v118 + 8) & 0x7F; k != 83; k = *(_WORD *)(v118 + 8) & 0x7F)
                {
                  v120 = -40;
                  if (k > 70)
                  {
                    if (k == 71)
                    {
                      v120 = -56;
                    }
                    else if (k != 81)
                    {
                      goto LABEL_303;
                    }
                  }
                  else
                  {
                    if (k > 0x18)
                      goto LABEL_302;
                    if (k == 16)
                      goto LABEL_296;
                    if (((1 << k) & 0x1066) != 0)
                      goto LABEL_309;
                    if (k == 24)
                    {
LABEL_296:
                      v120 = -48;
                    }
                    else
                    {
LABEL_302:
                      if (k != 70)
                      {
LABEL_303:
                        v121 = k - 52;
                        if ((k - 33) >= 5)
                          v122 = -48;
                        else
                          v122 = -64;
                        if (v121 >= 6)
                          v120 = v122;
                        else
                          v120 = -72;
                        goto LABEL_309;
                      }
                      v120 = -64;
                    }
                  }
LABEL_309:
                  v123 = *(_QWORD *)(v118 + v120 + 16);
                  v118 = v123 & 0xFFFFFFFFFFFFFFF8;
                  if ((v123 & 4) != 0)
                    v118 = *(_QWORD *)v118;
                }
                v116 = v118 - 40;
              }
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v116 + 88) + 2000) + 1) & 4) == 0)
              {
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) &= ~0x80uLL;
              }
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) &= ~0x100uLL;
            }
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v83 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
            {
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) |= 0x1000000000uLL;
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) |= 0x2000000000uLL;
            }
            v124 = sub_22EFC2FDC(v8, v46);
            v125 = *(_QWORD *)(*(_QWORD *)(*v83 + 8) & 0xFFFFFFFFFFFFFFF0);
            if (!v125 || *(_BYTE *)(v125 + 16) != 45)
            {
              if (!sub_22F111D3C(*v83, v46)
                || ((*(_DWORD *)(v8 + 72) & 3) == 3 || (*(_DWORD *)(v8 + 72) & 3) == 0)
                && (*(_DWORD *)(v3 + 72) & 0xE000) != 0x4000
                && (*(_BYTE *)(*(_QWORD *)(v46 + 2000) + 1) & 0x10) == 0)
              {
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                v140 = *(_QWORD *)(v3 + 128);
                v141 = *(unsigned __int16 *)(v140 + 8);
                v140 += 8;
                v142 = v141 & 0xFFFFFFFB | (*(unsigned __int8 *)(v140 + 2) << 16);
                *(_WORD *)v140 = v141 & 0xFFFB;
                *(_BYTE *)(v140 + 2) = BYTE2(v142);
              }
              if ((v82 & 1) != 0 || (v83[1] & 1) != 0)
              {
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x1000000000uLL;
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x2000000000uLL;
              }
              if ((sub_22F111FA8(*v83) & 1) == 0)
              {
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                v143 = *(_QWORD *)(v3 + 128);
                v144 = *(unsigned __int16 *)(v143 + 8);
                v143 += 8;
                v145 = v144 & 0xFFFFFFBF | (*(unsigned __int8 *)(v143 + 2) << 16);
                *(_WORD *)v143 = v144 & 0xFFBF;
                *(_BYTE *)(v143 + 2) = BYTE2(v145);
              }
              goto LABEL_448;
            }
            v126 = sub_22F114198(*(_QWORD *)(v125 + 24));
            v127 = (_QWORD *)v126;
            v128 = *(_QWORD *)(v126 + 128);
            if (!v128)
            {
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v126 + 104) + 96), *(_QWORD *)(v126 + 104));
              v128 = v127[16];
              if (!v128)
                goto LABEL_448;
            }
            if (!*(_QWORD *)(v128 + 88))
              goto LABEL_448;
            sub_22EFD0C3C(v3, (unint64_t)v127);
            if (((*((_DWORD *)v83 + 2) | v82) & 5) != 0)
            {
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) |= 0x20000000uLL;
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) |= 0x40000000uLL;
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) |= 0x80000000uLL;
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) |= 0x100000000uLL;
            }
            if ((*(_DWORD *)(v3 + 72) & 0xE000) == 0x4000)
            {
              if (sub_22E3CD2C4((uint64_t)v127))
              {
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x400000000uLL;
              }
              if (sub_22EB1C044((uint64_t)v127))
              {
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x800000000uLL;
              }
              if (sub_22E69200C((uint64_t)v127))
              {
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x1000000000uLL;
              }
              if (sub_22EAE8D9C((unint64_t)v127))
              {
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x2000000000uLL;
              }
              sub_22E3CD31C((uint64_t *)(v127[13] + 96), v127[13]);
              if ((*(_QWORD *)v127[16] & 0x100000000000) == 0)
              {
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x4000000000uLL;
              }
            }
            if (sub_22EFC2E8C(v8))
            {
              sub_22E3CD31C((uint64_t *)(v127[13] + 96), v127[13]);
              v129 = *(_QWORD *)v127[16];
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) |= v129 & 0x20000000;
              sub_22E3CD31C((uint64_t *)(v127[13] + 96), v127[13]);
              v130 = *(_QWORD *)v127[16];
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) |= v130 & 0x40000000;
              sub_22E3CD31C((uint64_t *)(v127[13] + 96), v127[13]);
              v131 = *(_QWORD *)v127[16];
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) |= v131 & 0x80000000;
              sub_22E3CD31C((uint64_t *)(v127[13] + 96), v127[13]);
              v132 = *(_QWORD *)v127[16];
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) |= v132 & 0x100000000;
              sub_22E3CD31C((uint64_t *)(v127[13] + 96), v127[13]);
              v133 = *(_QWORD *)v127[16];
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) |= v133 & 0x200000000;
            }
            if (!sub_22E49F698((unint64_t)v127))
            {
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) &= ~0x8000000000uLL;
            }
            sub_22E3CD31C((uint64_t *)(v127[13] + 96), v127[13]);
            if ((*(_QWORD *)v127[16] & 0x10000000000) == 0)
            {
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) &= ~0x10000000000uLL;
            }
            sub_22E3CD31C((uint64_t *)(v127[13] + 96), v127[13]);
            if ((*(_QWORD *)v127[16] & 0x400000000000) == 0)
            {
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) &= ~0x400000000000uLL;
            }
            if (!sub_22EACBAD4((uint64_t)v127))
            {
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) &= ~0x20000000000uLL;
            }
            if (!sub_22EACBB38((uint64_t)v127))
            {
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) &= ~0x800000000000uLL;
            }
            sub_22E3CD31C((uint64_t *)(v127[13] + 96), v127[13]);
            if ((*(_QWORD *)v127[16] & 0x40000000000) == 0)
            {
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) &= ~0x40000000000uLL;
            }
            if ((sub_22EACA488((unint64_t)v127) & 1) == 0)
            {
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) &= ~0x80000000000uLL;
            }
            sub_22E3CD31C((uint64_t *)(v127[13] + 96), v127[13]);
            if ((*(_QWORD *)v127[16] & 0x100000000000) == 0)
            {
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) &= ~0x100000000000uLL;
            }
            sub_22E3CD31C((uint64_t *)(v127[13] + 96), v127[13]);
            if ((*(_QWORD *)v127[16] & 0x4000000000000) == 0)
            {
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) &= ~0x4000000000000uLL;
            }
            sub_22E3CD31C((uint64_t *)(v127[13] + 96), v127[13]);
            if ((*(_QWORD *)v127[16] & 0x8000000000000000) == 0)
            {
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) &= ~0x8000000000000000;
            }
            sub_22E3CD31C((uint64_t *)(v127[13] + 96), v127[13]);
            if (((*(unsigned __int16 *)(v127[16] + 8) | (*(unsigned __int8 *)(v127[16] + 10) << 16)) & 0x80000) != 0)
            {
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              v134 = *(_QWORD *)(v3 + 128);
              v135 = *(_WORD *)(v134 + 8);
              v134 += 8;
              v136 = ((*(unsigned __int8 *)(v134 + 2) << 16) | 0x80000u) >> 16;
              *(_WORD *)v134 = v135;
              *(_BYTE *)(v134 + 2) = v136;
            }
            v137 = v127[9];
            if ((v137 & 0x2000000) != 0)
            {
              *(_QWORD *)(v3 + 72) |= 0x2000000uLL;
              v137 = v127[9];
            }
            if ((v137 & 0x4000000) != 0)
            {
              *(_QWORD *)(v3 + 72) |= 0x4000000uLL;
              v137 = v127[9];
            }
            if ((v137 & 0x1800000000) == 0x1000000000)
              *(_QWORD *)(v3 + 72) = *(_QWORD *)(v3 + 72) & 0xFFFFFFE7FFFFFFFFLL | 0x1000000000;
            sub_22E3CD31C((uint64_t *)(v127[13] + 96), v127[13]);
            if ((*(_QWORD *)v127[16] & 0x1000) == 0)
            {
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) &= ~0x1000uLL;
            }
            sub_22E3CD31C((uint64_t *)(v127[13] + 96), v127[13]);
            if ((*(_QWORD *)v127[16] & 0x2000) == 0)
            {
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
              **(_QWORD **)(v3 + 128) &= ~0x2000uLL;
            }
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
            if ((**(_QWORD **)(v3 + 128) & 0x1000) == 0)
              goto LABEL_419;
            v138 = (*(_DWORD *)(v3 + 72) & 0xE000) == 0x4000 || v50;
            if ((v138 | v124) != 1)
              goto LABEL_419;
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
            if (!*(_DWORD *)(*(_QWORD *)(v3 + 128) + 16))
              goto LABEL_419;
            v188 = v192;
            v189 = v192;
            v190 = 8;
            v191 = 0;
            v183 = v187;
            v184 = v187;
            v185 = 8;
            v186 = 0;
            v193 = v195;
            v194 = 0x800000000;
            v182[0] = &v188;
            v182[1] = v3;
            v182[2] = &v183;
            v182[3] = &v193;
            if ((sub_22EFD1310((uint64_t)v182, (uint64_t)v127) & 1) != 0)
            {
              v139 = 1;
              goto LABEL_411;
            }
            v146 = v194;
            if (!(_DWORD)v194)
            {
              v139 = 0;
              goto LABEL_411;
            }
            while (1)
            {
              v147 = v193[v146 - 1];
              LODWORD(v194) = v146 - 1;
              v148 = sub_22EFC3B90(v147);
              if (v148)
              {
                v149 = v148;
                v150 = 1;
LABEL_395:
                if ((*(_BYTE *)(v149 + 68) & 1) == 0 || *(_QWORD *)(v149 + 40))
                {
                  if ((v150 & 1) == 0 && !sub_22EFC2FDC(v149, v46))
                  {
                    v150 = 0;
                    goto LABEL_404;
                  }
                  v151 = sub_22EF5BA38(v46, *(_QWORD *)(v149 + 48));
                  v152 = sub_22F10C2A4(*(_QWORD *)(v151 & 0xFFFFFFFFFFFFFFF0));
                  if (!v152
                    || (*(_DWORD *)(v152 + 28) & 0x7Fu) - 35 > 2
                    || (sub_22EFD1310((uint64_t)v182, v152) & 1) == 0)
                  {
                    v150 &= (*(_DWORD *)(v147 + 72) & 0xE000) == 0x4000;
                    goto LABEL_404;
                  }
                  v139 = 1;
LABEL_411:
                  if (v193 != v195)
                    free(v193);
                  if (v184 != v183)
                    free(v184);
                  if (v189 != v188)
                    free(v189);
                  if (v139)
                  {
                    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                    **(_QWORD **)(v3 + 128) &= ~0x1000uLL;
                  }
LABEL_419:
                  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                  if ((v50 & (**(_DWORD **)(v3 + 128) >> 13)) == 1)
                  {
                    v153 = sub_22E46A3A0(v3);
                    if (v153 != v154)
                    {
                      v155 = v153;
                      v156 = v154;
                      while (1)
                      {
                        v157 = *(_QWORD *)(**(_QWORD **)(v155 + 16) & 0xFFFFFFFFFFFFFFF0);
                        if ((*(_BYTE *)(v157 + 8) & 0xF) != 0)
                          v157 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v155 + 16));
                        if (*(_QWORD *)(*(_QWORD *)((v157 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(v83[1] & 0xFFFFFFFFFFFFFFF0))
                          break;
                        v155 += 24;
                        if (v155 == v156)
                          goto LABEL_428;
                      }
                      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                      **(_QWORD **)(v3 + 128) &= ~0x2000uLL;
                    }
                  }
LABEL_428:
                  sub_22E3CD31C((uint64_t *)(v127[13] + 96), v127[13]);
                  if ((*(_QWORD *)v127[16] & 0x80000) != 0)
                  {
                    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                    **(_QWORD **)(v3 + 128) |= 0x80000uLL;
                  }
                  if ((*(_BYTE *)(v8 + 68) & 2) != 0)
                  {
                    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                    **(_QWORD **)(v3 + 128) |= 0x20000000uLL;
                    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                    **(_QWORD **)(v3 + 128) |= 0x80000000uLL;
                  }
                  if (((*(_DWORD *)(v8 + 72) & 3) == 3 || (*(_DWORD *)(v8 + 72) & 3) == 0)
                    && (sub_22EAE4D48((unint64_t)v127) & 1) == 0
                    && (*(_DWORD *)(v3 + 72) & 0xE000) != 0x4000)
                  {
                    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                    v158 = *(_QWORD *)(v3 + 128);
                    v159 = *(unsigned __int16 *)(v158 + 8);
                    v158 += 8;
                    v160 = v159 & 0xFFFFFFFB | (*(unsigned __int8 *)(v158 + 2) << 16);
                    *(_WORD *)v158 = v159 & 0xFFFB;
                    *(_BYTE *)(v158 + 2) = BYTE2(v160);
                  }
                  if ((sub_22EFD0B3C((uint64_t)v127) & 1) == 0)
                  {
                    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                    v161 = *(_QWORD *)(v3 + 128);
                    v162 = *(unsigned __int16 *)(v161 + 8);
                    v161 += 8;
                    v163 = v162 & 0xFFFF7FFF | (*(unsigned __int8 *)(v161 + 2) << 16);
                    *(_WORD *)v161 = v162 & 0x7FFF;
                    *(_BYTE *)(v161 + 2) = BYTE2(v163);
                  }
                  if ((sub_22EFD0BB4((uint64_t)v127) & 1) == 0)
                  {
                    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                    v164 = *(_QWORD *)(v3 + 128);
                    v165 = *(unsigned __int16 *)(v164 + 8);
                    v164 += 8;
                    v166 = (v165 | (*(unsigned __int8 *)(v164 + 2) << 16)) & 0xFFFEFFFF;
                    *(_WORD *)v164 = v165;
                    *(_BYTE *)(v164 + 2) = BYTE2(v166);
                  }
                  if (sub_22EC4F51C((uint64_t)v127)
                    && ((*(_DWORD *)(v8 + 72) & 3) == 3 || (*(_DWORD *)(v8 + 72) & 3) == 0))
                  {
                    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                    **(_QWORD **)(v3 + 128) |= 0x1000000uLL;
                  }
                  sub_22E3CD31C((uint64_t *)(v127[13] + 96), v127[13]);
                  if ((*(_QWORD *)v127[16] & 0x100000) != 0 && sub_22EFC2E8C(v8))
                  {
                    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                    **(_QWORD **)(v3 + 128) |= 0x100000uLL;
                  }
LABEL_448:
                  result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                  if ((**(_QWORD **)(v3 + 128) & 0x200) != 0)
                    v167 = v124;
                  else
                    v167 = 1;
                  if ((v167 & 1) == 0)
                  {
                    result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                    **(_QWORD **)(v3 + 128) &= ~0x200uLL;
                  }
                  v20 = *(_DWORD *)(v8 + 28);
LABEL_454:
                  if ((v20 & 0x7E) == 0x2E && (*(_QWORD *)(v8 + 40) & 7) == 5)
                  {
                    if (!v3 || (v168 = v3, (*(_DWORD *)(v3 + 28) & 0x7F) != 0x53))
                    {
                      v169 = *(_QWORD *)(v3 + 16);
                      v170 = v169 & 0xFFFFFFFFFFFFFFF8;
                      if ((v169 & 4) != 0)
                        v170 = *(_QWORD *)v170;
                      for (m = *(_WORD *)(v170 + 8) & 0x7F; m != 83; m = *(_WORD *)(v170 + 8) & 0x7F)
                      {
                        v172 = -40;
                        if (m > 70)
                        {
                          if (m == 71)
                          {
                            v172 = -56;
                          }
                          else if (m != 81)
                          {
                            goto LABEL_471;
                          }
                        }
                        else
                        {
                          if (m > 0x18)
                            goto LABEL_470;
                          if (m == 16)
                            goto LABEL_464;
                          if (((1 << m) & 0x1066) != 0)
                            goto LABEL_477;
                          if (m == 24)
                          {
LABEL_464:
                            v172 = -48;
                          }
                          else
                          {
LABEL_470:
                            if (m != 70)
                            {
LABEL_471:
                              v173 = m - 52;
                              if ((m - 33) >= 5)
                                v174 = -48;
                              else
                                v174 = -64;
                              if (v173 >= 6)
                                v172 = v174;
                              else
                                v172 = -72;
                              goto LABEL_477;
                            }
                            v172 = -64;
                          }
                        }
LABEL_477:
                        v175 = *(_QWORD *)(v170 + v172 + 16);
                        v170 = v175 & 0xFFFFFFFFFFFFFFF8;
                        if ((v175 & 4) != 0)
                          v170 = *(_QWORD *)v170;
                      }
                      v168 = v170 - 40;
                    }
                    v176 = *(_QWORD *)(v168 + 88);
                    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                    result = sub_22EFD4278(*(_QWORD *)(v3 + 128) + 40, v176);
                    v177 = result;
                    v178 = ((unint64_t)*(unsigned int *)(v8 + 28) >> 13) & 3;
                    v179 = *(unint64_t **)(result + 8);
                    if ((unint64_t)v179 >= (*(_QWORD *)(result + 16) & 0xFFFFFFFFFFFFFFF8))
                    {
                      result = sub_22E78E458((uint64_t *)result, v176, 1uLL);
                      v179 = *(unint64_t **)(v177 + 8);
                    }
                    *v179 = v178 | v8;
                    *(_QWORD *)(v177 + 8) = v179 + 1;
                    v20 = *(_DWORD *)(v8 + 28);
                  }
                  if ((v20 & 0x7F) != 0xD)
                    return result;
                  v180 = *(_QWORD *)(v8 + 40);
                  if ((v180 & 7) == 3)
                  {
                    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                    **(_QWORD **)(v3 + 128) |= 0x4000000uLL;
                    result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                    **(_QWORD **)(v3 + 128) &= ~0x80uLL;
                    v180 = *(_QWORD *)(v8 + 40);
                  }
                  if ((v180 & 7) != 6 || *(_DWORD *)(v180 & 0xFFFFFFFFFFFFFFF8) != 15)
                    return result;
                  result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                  v95 = *(unint64_t **)(v3 + 128);
                  v96 = *v95 | 0x10000000;
LABEL_493:
                  *v95 = v96;
                  return result;
                }
LABEL_404:
                while (1)
                {
                  v149 = *(_QWORD *)(v149 + 8) & 0xFFFFFFFFFFFFFFF8;
                  if (!v149)
                    break;
                  if ((*(_DWORD *)(v149 + 28) & 0x7Fu) - 49 < 3)
                    goto LABEL_395;
                }
              }
              v146 = v194;
              if (!(_DWORD)v194)
              {
                v139 = 0;
                goto LABEL_411;
              }
            }
          }
LABEL_220:
          if ((*(_WORD *)(v90 + 24) & 0x180) != 0)
          {
            *(_QWORD *)(v3 + 72) |= 0x2000000uLL;
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
            v91 = *(_QWORD **)(v3 + 128);
            *v91 &= 0xFFFFE07FFFFFFEFFLL;
            if ((*v89 & 8) != 0)
            {
              v92 = (*(_DWORD *)((*v89 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 6) & 7;
              if ((v92 - 4) > 0xFFFFFFFD)
              {
LABEL_247:
                if (v92 == 3)
                  *(_QWORD *)(v3 + 72) = *(_QWORD *)(v3 + 72) & 0xFFFFFFE7FFFFFFFFLL | 0x1000000000;
                *v91 &= ~0x8000000000000000;
                if ((*(_DWORD *)(v3 + 72) & 0xE000) != 0x4000)
                  goto LABEL_255;
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x400000000uLL;
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x800000000uLL;
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x1000000000uLL;
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x2000000000uLL;
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x4000000000uLL;
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x20000000uLL;
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x40000000uLL;
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x80000000uLL;
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                **(_QWORD **)(v3 + 128) |= 0x100000000uLL;
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
                v93 = *(unint64_t **)(v3 + 128);
                v94 = *v93 | 0x200000000;
                goto LABEL_251;
              }
            }
            else
            {
              v92 = 0;
            }
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
            **(_QWORD **)(v3 + 128) &= 0xFFF81FFFFFFFFFFFLL;
            goto LABEL_247;
          }
LABEL_253:
          if ((*(_WORD *)(*(_QWORD *)(v46 + 2000) + 148) & 2) == 0)
            *(_QWORD *)(v3 + 72) |= 0x2000000uLL;
          goto LABEL_255;
        }
        if ((v88 & 8) == 0)
          goto LABEL_253;
      }
      v90 = v88 & 0xFFFFFFFFFFFFFFF0;
      goto LABEL_220;
    }
    if (sub_22EFD3B9C(v8))
    {
      v16 |= 8u;
      v29 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v8 + 120) + 48) & 0xFFFFFFFFFFFFFFF0);
      if (!v29 || (v30 = *(_DWORD *)(v29 + 16), (v30 & 0xFE) != 0x28))
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
          || (v29 = sub_22F10CF48(v29)) == 0)
        {
LABEL_90:
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
          v33 = *(_QWORD *)(v3 + 128);
          v34 = *(_WORD *)(v33 + 8);
          v33 += 8;
          v35 = ((*(unsigned __int8 *)(v33 + 2) << 16) | 0x40000u) >> 16;
          *(_WORD *)v33 = v34;
          *(_BYTE *)(v33 + 2) = v35;
          goto LABEL_91;
        }
        v30 = *(_DWORD *)(v29 + 16);
      }
      if ((v30 & 0x100000) != 0)
      {
        do
        {
          while (1)
          {
            v29 = *(_QWORD *)(*(_QWORD *)(v29 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v29)
              break;
            v31 = *(_DWORD *)(v29 + 16);
            if ((v31 & 0xFE) != 0x28)
              break;
            if ((v31 & 0x100000) == 0)
              goto LABEL_88;
          }
          v29 = sub_22F10CF48(v29);
        }
        while ((*(_DWORD *)(v29 + 16) & 0x100000) != 0);
      }
LABEL_88:
      v32 = *(_QWORD *)(v29 + 32);
      if ((v32 & 1) != 0 || (*(_BYTE *)((v32 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) != 0)
        goto LABEL_90;
    }
LABEL_91:
    result = sub_22EFD3F30(v8);
    if ((_DWORD)result)
      v36 = v16 | 0x10;
    else
      v36 = v16;
    if ((*(_DWORD *)(v8 + 28) & 0x7F) == 0x38
      && ((*(_QWORD *)(v8 + 144) & 6) != 4
       || (v37 = *(_QWORD *)(v8 + 144) & 0xFFFFFFFFFFFFFFF8) == 0
       || *(_QWORD *)(v37 + 16) <= 7uLL))
    {
      if (!v3 || (v38 = v3, (*(_DWORD *)(v3 + 28) & 0x7F) != 0x53))
      {
        v39 = *(_QWORD *)(v3 + 16);
        v40 = v39 & 0xFFFFFFFFFFFFFFF8;
        if ((v39 & 4) != 0)
          v40 = *(_QWORD *)v40;
        for (n = *(_WORD *)(v40 + 8) & 0x7F; n != 83; n = *(_WORD *)(v40 + 8) & 0x7F)
        {
          v42 = -40;
          if (n > 70)
          {
            if (n == 71)
            {
              v42 = -56;
            }
            else if (n != 81)
            {
              goto LABEL_113;
            }
          }
          else
          {
            if (n > 0x18)
              goto LABEL_112;
            if (n == 16)
              goto LABEL_106;
            if (((1 << n) & 0x1066) != 0)
              goto LABEL_119;
            if (n == 24)
            {
LABEL_106:
              v42 = -48;
            }
            else
            {
LABEL_112:
              if (n != 70)
              {
LABEL_113:
                v43 = n - 52;
                if ((n - 33) >= 5)
                  v44 = -48;
                else
                  v44 = -64;
                if (v43 >= 6)
                  v42 = v44;
                else
                  v42 = -72;
                goto LABEL_119;
              }
              v42 = -64;
            }
          }
LABEL_119:
          v45 = *(_QWORD *)(v40 + v42 + 16);
          v40 = v45 & 0xFFFFFFFFFFFFFFF8;
          if ((v45 & 4) != 0)
            v40 = *(_QWORD *)v40;
        }
        v38 = v40 - 40;
      }
      v51 = ((unint64_t)*(unsigned int *)(v8 + 28) >> 13) & 3;
      v52 = *(_QWORD *)(v38 + 88);
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
      v53 = (uint64_t *)sub_22EFD4278(*(_QWORD *)(v3 + 128) + 40, v52);
      result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 48))(a2);
      if (result)
      {
        result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 48))(a2);
        for (ii = (_QWORD *)*v53; ii != (_QWORD *)v53[1]; ++ii)
        {
          if (result == (*ii & 0xFFFFFFFFFFFFFFFCLL))
          {
            *ii = v51 | a2;
            break;
          }
        }
      }
      else
      {
        v72 = (unint64_t *)v53[1];
        if ((unint64_t)v72 >= (v53[2] & 0xFFFFFFFFFFFFFFF8))
        {
          result = sub_22E78E458(v53, v52, 1uLL);
          v72 = (unint64_t *)v53[1];
        }
        *v72 = v51 | a2;
        v53[1] = (uint64_t)(v72 + 1);
      }
    }
    if (!v36)
      return result;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
    v97 = *(_WORD *)(*(_QWORD *)(v3 + 128) + 9) | ~(_WORD)v36;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
    **(_QWORD **)(v3 + 128) = **(_QWORD **)(v3 + 128) & 0xFFFFE07FFFFFFFFFLL | ((unint64_t)(v97 & (**(_QWORD **)(v3 + 128) >> 39) & 0x3F) << 39);
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
    v98 = *(_WORD *)(*(_QWORD *)(v3 + 128) + 9) | ~(_WORD)v36;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
    v99 = *(_QWORD *)(v3 + 128);
    *(_QWORD *)v99 = *(_QWORD *)v99 & 0xFFF81FFFFFFFFFFFLL | ((unint64_t)(v98 & (*(_QWORD *)v99 >> 45) & 0x3F) << 45);
    *(_WORD *)(v99 + 8) = *(_WORD *)(v99 + 8);
    if ((*(_BYTE *)(v8 + 29) & 2) != 0 || sub_22E692064(v8))
    {
      v100 = *(_QWORD *)(v8 + 80);
      if ((v100 & 0x800000) != 0)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        **(_QWORD **)(v3 + 128) = **(_QWORD **)(v3 + 128) & 0xFFFFE07FFFFFFFFFLL | ((unint64_t)((v36 | (**(_QWORD **)(v3 + 128) >> 39)) & 0x3F) << 39);
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        v104 = *(unint64_t **)(v3 + 128);
        v105 = *v104 & 0xFFF81FFFFFFFFFFFLL | ((unint64_t)((v36 | (*v104 >> 45)) & 0x3F) << 45);
        goto LABEL_239;
      }
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
      v101 = *(unint64_t **)(v3 + 128);
      v102 = *((unsigned __int16 *)v101 + 4) | (*((unsigned __int8 *)v101 + 10) << 16);
      v103 = *v101;
      if ((v100 & 0x1000000) != 0)
      {
        *((_WORD *)v101 + 4) = *((_WORD *)v101 + 4);
        *((_BYTE *)v101 + 10) = BYTE2(v102);
        *v101 = v103 & 0xFFF81FFFFFFFFFFFLL | ((unint64_t)((v36 | (v103 >> 45)) & 0x3F) << 45);
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        v104 = *(unint64_t **)(v3 + 128);
        v105 = *v104 & 0xFE07FFFFFFFFFFFFLL | ((unint64_t)((v36 | (*v104 >> 51)) & 0x3F) << 51);
        goto LABEL_239;
      }
      *((_WORD *)v101 + 4) = *((_WORD *)v101 + 4);
      *((_BYTE *)v101 + 10) = BYTE2(v102);
      *v101 = v103 & 0xFE07FFFFFFFFFFFFLL | ((unint64_t)((v36 | (v103 >> 51)) & 0x3F) << 51);
      if (!sub_22E692064(v8))
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
        v104 = *(unint64_t **)(v3 + 128);
        v105 = *v104 & 0x81FFFFFFFFFFFFFFLL | (((v36 | (*v104 >> 57)) & 0x3F) << 57);
LABEL_239:
        *v104 = v105;
      }
    }
    result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
    v106 = *(_QWORD *)(v3 + 128);
    v107 = *(unsigned __int16 *)(v106 + 8);
    v106 += 8;
    v108 = v107 & 0xFFFFC0FF | (*(unsigned __int8 *)(v106 + 2) << 16);
    *(_WORD *)v106 = v107 & 0xC0FF | (((v36 | BYTE1(v107)) & 0x3F) << 8);
    *(_BYTE *)(v106 + 2) = BYTE2(v108);
    if ((*(_BYTE *)(v8 + 29) & 2) != 0)
      return result;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
    **(_QWORD **)(v3 + 128) = **(_QWORD **)(v3 + 128) & 0xFFFFFFFFFFFFFF81 | (**(_QWORD **)(v3 + 128) | (2 * v36)) & 0x7E;
    result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
    v95 = *(unint64_t **)(v3 + 128);
    v96 = *v95 & 0xFFFFFFFFFFFFFEFFLL;
    goto LABEL_493;
  }
  return result;
}

BOOL sub_22EFD397C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int i;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if ((*(_BYTE *)(v1 + 82) & 0xC) != 0)
    return 1;
  v2 = *(_DWORD *)(v1 + 28) & 0x7F;
  if (v2 == 55)
    return 0;
  v3 = v1;
  if (v2 != 83)
  {
    v4 = *(_QWORD *)(v1 + 16);
    v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 4) != 0)
      v5 = *(_QWORD *)v5;
    for (i = *(_WORD *)(v5 + 8) & 0x7F; i != 83; i = *(_WORD *)(v5 + 8) & 0x7F)
    {
      v7 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v7 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_21;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_20;
        if (i == 16)
          goto LABEL_10;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_11;
        if (i == 24)
        {
LABEL_10:
          v7 = -48;
        }
        else
        {
LABEL_20:
          if (i != 70)
          {
LABEL_21:
            v9 = i - 52;
            if ((i - 33) >= 5)
              v10 = -48;
            else
              v10 = -64;
            if (v9 >= 6)
              v7 = v10;
            else
              v7 = -72;
            goto LABEL_11;
          }
          v7 = -64;
        }
      }
LABEL_11:
      v8 = *(_QWORD *)(v5 + v7 + 16);
      v5 = v8 & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 4) != 0)
        v5 = *(_QWORD *)v5;
    }
    v3 = v5 - 40;
  }
  v11 = sub_22EF5B234(*(_QWORD *)(v3 + 88), v1);
  return ((v12 - v11) & 0x7FFFFFFF8) != 0;
}

BOOL sub_22EFD3AD4(uint64_t a1)
{
  return sub_22EFC0EB8(a1) == 0;
}

uint64_t sub_22EFD3AF0(uint64_t a1, int *a2)
{
  uint64_t result;

  result = sub_22EFD8088(a1, a2);
  if ((_DWORD)result)
    return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 120) + 48) & 0xFFFFFFFFFFFFFFF0)
                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                              + 16) == 40;
  return result;
}

uint64_t sub_22EFD3B40(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = sub_22EFD8088(a1, &v3);
  if ((_DWORD)result)
    return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 120) + 48) & 0xFFFFFFFFFFFFFFF0)
                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                              + 16) == 41;
  return result;
}

uint64_t sub_22EFD3B9C(unint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int i;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;

  if ((*(_QWORD *)(a1 + 40) & 7) != 6
    || *(_DWORD *)(*(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFFFF8) != 15
    || (*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)a1 + 32))(a1) + 80) & 0xE000) == 0x4000
    || (*(_QWORD *)(a1 + 40) & 7) == 6
    && (*(_DWORD *)(*(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4)
  {
    return 0;
  }
  v3 = *(_QWORD *)(a1 + 144) & 6;
  v4 = *(_QWORD *)(a1 + 144) & 0xFFFFFFFFFFFFFFF8;
  if (v3 == 4 && v4)
  {
    if (*(_QWORD *)(v4 + 16) >= 8uLL)
      return 0;
  }
  else if (!v3 && v4)
  {
    return 0;
  }
  result = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (result)
    v5 = *(_BYTE *)(result + 16) == 26;
  else
    v5 = 0;
  if (!v5)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      return 0;
    result = sub_22F10CF48(result);
    if (!result)
      return result;
  }
  if ((*(_QWORD *)(result + 16) & 0x3FFFC000000000) != 0x4000000000)
    return 0;
  v6 = *(_QWORD *)(**(_QWORD **)(a1 + 120) + 48);
  v7 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if (!v7 || (v8 = *(_DWORD *)(v7 + 16), v8 != 40))
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 40)
      goto LABEL_32;
    v7 = sub_22F10CF48(v7);
    if (!v7)
      goto LABEL_32;
    v8 = *(_DWORD *)(v7 + 16);
  }
  if ((v8 & 0x100000) != 0)
  {
    do
    {
      while (1)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v7 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v7)
          break;
        v9 = *(_DWORD *)(v7 + 16);
        if ((v9 & 0xFE) != 0x28)
          break;
        if ((v9 & 0x100000) == 0)
          goto LABEL_31;
      }
      v7 = sub_22F10CF48(v7);
    }
    while ((*(_DWORD *)(v7 + 16) & 0x100000) != 0);
  }
LABEL_31:
  v6 = *(_QWORD *)(v7 + 32);
LABEL_32:
  v10 = a1;
  if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 4) != 0)
      v12 = *(_QWORD *)v12;
    for (i = *(_WORD *)(v12 + 8) & 0x7F; i != 83; i = *(_WORD *)(v12 + 8) & 0x7F)
    {
      v14 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v14 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_46;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_45;
        if (i == 16)
          goto LABEL_39;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_52;
        if (i == 24)
        {
LABEL_39:
          v14 = -48;
        }
        else
        {
LABEL_45:
          if (i != 70)
          {
LABEL_46:
            v15 = i - 52;
            if ((i - 33) >= 5)
              v16 = -48;
            else
              v16 = -64;
            if (v15 >= 6)
              v14 = v16;
            else
              v14 = -72;
            goto LABEL_52;
          }
          v14 = -64;
        }
      }
LABEL_52:
      v17 = *(_QWORD *)(v12 + v14 + 16);
      v12 = v17 & 0xFFFFFFFFFFFFFFF8;
      if ((v17 & 4) != 0)
        v12 = *(_QWORD *)v12;
    }
    v10 = v12 - 40;
  }
  v18 = *(_WORD *)(a1 + 80) & 0x7F;
  v19 = -40;
  if (v18 > 0x46)
  {
    if (v18 != 83)
    {
      if (v18 == 71)
      {
        v19 = -56;
        goto LABEL_75;
      }
      if (v18 == 81)
        goto LABEL_75;
LABEL_70:
      v20 = v18 - 52;
      v21 = v18 - 33 >= 5;
      v22 = -48;
      if (!v21)
        v22 = -64;
      if (v20 >= 6)
        v19 = v22;
      else
        v19 = -72;
    }
  }
  else
  {
    if (v18 > 0x18)
      goto LABEL_69;
    if (v18 != 16)
    {
      if (((1 << v18) & 0x1066) != 0)
        goto LABEL_75;
      if (v18 != 24)
      {
LABEL_69:
        if (v18 == 70)
        {
          v19 = -64;
          goto LABEL_75;
        }
        goto LABEL_70;
      }
    }
    v19 = -48;
  }
LABEL_75:
  v23 = *(_QWORD *)(a1 + 72 + v19 + 16);
  v24 = (_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8);
  if ((v23 & 4) != 0)
    v24 = (_QWORD *)*v24;
  if (v24)
    v25 = (unint64_t)(v24 - 8);
  else
    v25 = 0;
  v26 = *(_QWORD *)(v25 + 48);
  if (!v26)
    v26 = sub_22EF6462C(*(_QWORD *)(v10 + 88), v25);
  return *(_QWORD *)(*(_QWORD *)((*(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_22EFD3F30(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  if ((*(_QWORD *)(a1 + 40) & 7) != 6
    || *(_DWORD *)(*(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFFFF8) != 15
    || (*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)a1 + 32))(a1) + 80) & 0xE000) == 0x4000
    || (*(_QWORD *)(a1 + 40) & 7) == 6
    && (*(_DWORD *)(*(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4)
  {
    return 0;
  }
  v2 = *(_QWORD *)(a1 + 144) & 6;
  v3 = *(_QWORD *)(a1 + 144) & 0xFFFFFFFFFFFFFFF8;
  if (v2 == 4 && v3)
  {
    if (*(_QWORD *)(v3 + 16) >= 8uLL)
      return 0;
  }
  else if (!v2 && v3)
  {
    return 0;
  }
  result = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (result)
    v5 = *(_BYTE *)(result + 16) == 26;
  else
    v5 = 0;
  if (v5)
    goto LABEL_14;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
    return 0;
  result = sub_22F10CF48(result);
  if (!result)
    return result;
LABEL_14:
  if ((*(_QWORD *)(result + 16) & 0x3FFFC000000000) != 0x4000000000)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 120) + 48) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v6 + 16) != 41)
    return 0;
  v7 = sub_22F10ACF8(v6);
  v8 = a1;
  if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 4) != 0)
      v10 = *(_QWORD *)v10;
    for (i = *(_WORD *)(v10 + 8) & 0x7F; i != 83; i = *(_WORD *)(v10 + 8) & 0x7F)
    {
      v12 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v12 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_38;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_37;
        if (i == 16)
          goto LABEL_27;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_28;
        if (i == 24)
        {
LABEL_27:
          v12 = -48;
        }
        else
        {
LABEL_37:
          if (i != 70)
          {
LABEL_38:
            v14 = i - 52;
            if ((i - 33) >= 5)
              v15 = -48;
            else
              v15 = -64;
            if (v14 >= 6)
              v12 = v15;
            else
              v12 = -72;
            goto LABEL_28;
          }
          v12 = -64;
        }
      }
LABEL_28:
      v13 = *(_QWORD *)(v10 + v12 + 16);
      v10 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        v10 = *(_QWORD *)v10;
    }
    v8 = v10 - 40;
  }
  v16 = *(_WORD *)(a1 + 80) & 0x7F;
  v17 = -40;
  if (v16 > 0x46)
  {
    if (v16 != 83)
    {
      if (v16 == 71)
      {
        v17 = -56;
        goto LABEL_49;
      }
      if (v16 == 81)
        goto LABEL_49;
LABEL_64:
      v22 = v16 - 52;
      v23 = v16 - 33 >= 5;
      v24 = -48;
      if (!v23)
        v24 = -64;
      if (v22 >= 6)
        v17 = v24;
      else
        v17 = -72;
    }
  }
  else
  {
    if (v16 > 0x18)
      goto LABEL_63;
    if (v16 != 16)
    {
      if (((1 << v16) & 0x1066) != 0)
        goto LABEL_49;
      if (v16 != 24)
      {
LABEL_63:
        if (v16 == 70)
        {
          v17 = -64;
          goto LABEL_49;
        }
        goto LABEL_64;
      }
    }
    v17 = -48;
  }
LABEL_49:
  v18 = *(_QWORD *)(a1 + 72 + v17 + 16);
  v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
  if ((v18 & 4) != 0)
    v19 = (_QWORD *)*v19;
  if (v19)
    v20 = (unint64_t)(v19 - 8);
  else
    v20 = 0;
  v21 = *(_QWORD *)(v20 + 48);
  if (!v21)
  {
    v25 = v7;
    v21 = sub_22EF6462C(*(_QWORD *)(v8 + 88), v20);
    v7 = v25;
  }
  return *(_QWORD *)(*(_QWORD *)((*(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_22EFD4278(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 16);
  if ((v2 & 4) != 0)
  {
    v3 = *(uint64_t **)result;
    v5 = result;
    if (*(_QWORD *)result != *(_QWORD *)(result + 8))
    {
      v4 = *(_QWORD *)(a2 + 16048);
      do
      {
        *v3 = *v3 & 3 | (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v4 + 16))(v4, (unint64_t)*v3 >> 2);
        ++v3;
      }
      while (v3 != *(uint64_t **)(v5 + 8));
      v2 = *(_QWORD *)(v5 + 16);
    }
    result = v5;
    *(_QWORD *)(v5 + 16) = v2 & 0xFFFFFFFFFFFFFFFBLL;
  }
  return result;
}

unint64_t sub_22EFD4304(uint64_t a1, unint64_t a2)
{
  int v4;
  int v5;
  char v6;
  BOOL v7;
  uint64_t v8;
  unint64_t result;
  unint64_t v10;
  char v11;

  v4 = *(_DWORD *)(a2 + 28);
  v5 = v4 & 0x7F;
  if (a2 && v5 == 55)
  {
    if (sub_22EFC0EB8(a2))
    {
      v6 = 0;
    }
    else
    {
      if ((*(_BYTE *)(a2 + 83) & 0xC0) != 0)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
        *(_WORD *)(*(_QWORD *)(a1 + 128) + 8) |= 8u;
      }
      v6 = 1;
    }
    if (sub_22EFD44A8(a2))
    {
      v6 |= 2u;
    }
    else if (sub_22EFD3B40(a2))
    {
      v6 |= 4u;
    }
    else if ((*(_BYTE *)(a2 + 83) & 0xC0) != 0)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      *(_WORD *)(*(_QWORD *)(a1 + 128) + 8) |= 1u;
    }
  }
  else if (v5 == 57)
  {
    v7 = (v4 & 0x6000) != 0 || (*(_QWORD *)(a2 + 80) & 0x800000) == 0;
    if (v7 || (*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2) + 82) & 0x40) != 0)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      **(_QWORD **)(a1 + 128) &= ~0x8000000000000000;
    }
    v6 = 32;
  }
  else if ((sub_22EFD3B9C(a2) & 1) != 0)
  {
    v6 = 8;
  }
  else if (sub_22EFD3F30(a2))
  {
    v6 = 16;
  }
  else
  {
    v6 = 0;
  }
  v8 = *(_QWORD *)(a2 + 80);
  result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  v10 = 0xFFFFE07FFFFFFFFFLL;
  if ((v8 & 0x800000) == 0)
    v10 = 0xFE07FFFFFFFFFFFFLL;
  v11 = 39;
  if ((v8 & 0x800000) == 0)
    v11 = 51;
  **(_QWORD **)(a1 + 128) = ((unint64_t)((v6 | (**(_QWORD **)(a1 + 128) >> v11)) & 0x3F) << v11) | **(_QWORD **)(a1 + 128) & v10;
  return result;
}

uint64_t sub_22EFD44A8(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = sub_22EFD8088(a1, &v3);
  if ((_DWORD)result)
    return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 120) + 48) & 0xFFFFFFFFFFFFFFF0)
                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                              + 16) == 40;
  return result;
}

unint64_t sub_22EFD4504(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unint64_t result;
  unint64_t *v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (a2 && v4 == 55)
  {
    if ((sub_22EFD44A8(a2) & 1) != 0)
    {
      v5 = 2;
    }
    else if (sub_22EFD3B40(a2))
    {
      v5 = 4;
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    v5 = 32 * (v4 == 57);
  }
  v6 = *(_QWORD *)(a2 + 80);
  result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  v8 = *(unint64_t **)(a1 + 128);
  v9 = *((unsigned __int16 *)v8 + 4);
  v10 = v9 | (*((unsigned __int8 *)v8 + 10) << 16);
  v11 = *v8;
  v12 = 0xFFF81FFFFFFFFFFFLL;
  if ((v6 & 0x1000000) == 0)
    v12 = 0x81FFFFFFFFFFFFFFLL;
  v13 = 45;
  if ((v6 & 0x1000000) == 0)
    v13 = 57;
  v14 = v13 ^ 0x3F;
  v15 = ((v11 >> v13) | ((2 * v9) << (v13 ^ 0x3F))) & 0x3F | v5;
  v16 = v15 << v13;
  LODWORD(v15) = (v15 >> 1 >> v14) | v10;
  *v8 = v16 | v11 & v12;
  *((_WORD *)v8 + 4) = v15;
  *((_BYTE *)v8 + 10) = BYTE2(v15);
  return result;
}

uint64_t sub_22EFD4600(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 128);
  if (v1 && ((*(unsigned __int16 *)(v1 + 8) | (*(unsigned __int8 *)(v1 + 10) << 16)) & 0x100000) != 0)
    return (*(unsigned __int8 *)(v1 + 104) >> 2) & 1;
  else
    return 0;
}

unint64_t sub_22EFD462C(unint64_t a1)
{
  uint64_t v1;
  unint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int i;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;

  v1 = *(_QWORD *)(a1 + 128);
  if (!v1 || ((*(unsigned __int16 *)(v1 + 8) | (*(unsigned __int8 *)(v1 + 10) << 16)) & 0x100000) == 0)
    return 0;
  v3 = a1;
  if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 4) != 0)
      v5 = *(_QWORD *)v5;
    for (i = *(_WORD *)(v5 + 8) & 0x7F; i != 83; i = *(_WORD *)(v5 + 8) & 0x7F)
    {
      v7 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v7 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_19;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_18;
        if (i == 16)
          goto LABEL_12;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_25;
        if (i == 24)
        {
LABEL_12:
          v7 = -48;
        }
        else
        {
LABEL_18:
          if (i != 70)
          {
LABEL_19:
            v8 = i - 52;
            if ((i - 33) >= 5)
              v9 = -48;
            else
              v9 = -64;
            if (v8 >= 6)
              v7 = v9;
            else
              v7 = -72;
            goto LABEL_25;
          }
          v7 = -64;
        }
      }
LABEL_25:
      v10 = *(_QWORD *)(v5 + v7 + 16);
      v5 = v10 & 0xFFFFFFFFFFFFFFF8;
      if ((v10 & 4) != 0)
        v5 = *(_QWORD *)v5;
    }
    v3 = v5 - 40;
  }
  v11 = sub_22EFCE144(a1 + 64, (*(_QWORD *)(v3 + 88) + 15952) | 6);
  v12 = v11;
  result = v11 & 0xFFFFFFFFFFFFFFF8;
  if ((v12 & 4) != 0)
  {
    if (result)
      return *(_QWORD *)result;
  }
  return result;
}

unint64_t sub_22EFD4788(unint64_t a1)
{
  unint64_t result;

  result = sub_22EFD462C(a1);
  if (result)
  {
    if ((*(_DWORD *)(result + 28) & 0x7F) == 0x1D)
      return *(_QWORD *)(result + 48);
  }
  return result;
}

unint64_t sub_22EFD47B4(unint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = sub_22EFD462C(a1);
  if ((*(_DWORD *)(v2 + 28) & 0x7F) == 0x1D)
    v2 = *(_QWORD *)(v2 + 48);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v3)
    v4 = *(unsigned __int8 *)(v3 + 16) - 27 > 0xFFFFFFFD;
  else
    v4 = 0;
  if (!v4)
    v3 = sub_22F10CF48(v3);
  return sub_22EFD4818(a1, (*(_DWORD *)(v3 + 16) >> 19) & 0x1F);
}

unint64_t sub_22EFD4818(unint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int i;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;

  v2 = *(_QWORD *)(a1 + 128);
  if (!v2 || ((*(unsigned __int16 *)(v2 + 8) | (*(unsigned __int8 *)(v2 + 10) << 16)) & 0x100000) == 0)
    return 0;
  v5 = a1;
  if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((v6 & 4) != 0)
      v7 = *(_QWORD *)v7;
    for (i = *(_WORD *)(v7 + 8) & 0x7F; i != 83; i = *(_WORD *)(v7 + 8) & 0x7F)
    {
      v9 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v9 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_17;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_16;
        if (i == 16)
          goto LABEL_10;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_23;
        if (i == 24)
        {
LABEL_10:
          v9 = -48;
        }
        else
        {
LABEL_16:
          if (i != 70)
          {
LABEL_17:
            v10 = i - 52;
            if ((i - 33) >= 5)
              v11 = -48;
            else
              v11 = -64;
            if (v10 >= 6)
              v9 = v11;
            else
              v9 = -72;
            goto LABEL_23;
          }
          v9 = -64;
        }
      }
LABEL_23:
      v12 = *(_QWORD *)(v7 + v9 + 16);
      v7 = v12 & 0xFFFFFFFFFFFFFFF8;
      if ((v12 & 4) != 0)
        v7 = *(_QWORD *)v7;
    }
    v5 = v7 - 40;
  }
  v13 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(v5 + 88) + 15192), "__invoke", 8uLL);
  v14 = sub_22EFCE144(a1 + 64, v13);
  if (!v14)
    return 0;
  while (1)
  {
    v15 = (unint64_t *)(v14 & 0xFFFFFFFFFFFFFFF8);
    v16 = (v14 & 0xFFFFFFFFFFFFFFF8) == 0 || (v14 & 4) == 0;
    v17 = v14 & 0xFFFFFFFFFFFFFFF8;
    if (!v16)
      v17 = *v15;
    if (!v17 || (v18 = v17, (*(_DWORD *)(v17 + 28) & 0x7Eu) - 58 <= 0xFFFFFFF9))
      v18 = *(_QWORD *)(v17 + 48);
    v19 = *(_QWORD *)(*(_QWORD *)(v18 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v19)
      v20 = *(unsigned __int8 *)(v19 + 16) - 27 > 0xFFFFFFFD;
    else
      v20 = 0;
    if (!v20)
      v19 = sub_22F10CF48(v19);
    if (((*(_DWORD *)(v19 + 16) >> 19) & 0x1F) == a2)
      break;
    if (!v16)
    {
      v14 = v15[1];
      if (v14)
        continue;
    }
    return 0;
  }
  if (v17 && (*(_DWORD *)(v17 + 28) & 0x7F) == 0x1D)
    return *(_QWORD *)(v17 + 48);
  return v17;
}

unint64_t sub_22EFD4A20(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v6;
  unint64_t result;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;

  sub_22F278254((uint64_t)a2);
  *a3 = 0;
  v6 = *(_QWORD *)(a1 + 128);
  result = sub_22EFC3B90(a1);
  v8 = ((unint64_t)*(unsigned int *)(v6 + 104) >> 5) & 0x7FFF;
  if ((_DWORD)v8)
  {
    v9 = result;
    v10 = *(_QWORD **)(v6 + 128);
    v11 = &v10[2 * v8];
    do
    {
      if ((*v10 & 0xFFFFFFFFFFFFFFFCLL) == 4)
      {
        *a3 = v9;
      }
      else
      {
        v12 = *v10 & 0xFFFFFFFFFFFFFFF8;
        if (v12 && (*(_DWORD *)(v12 + 28) & 0x7Fu) - 60 <= 6)
        {
          v13 = *v10 & 0xFFFFFFFFFFFFFFF8;
          result = (unint64_t)sub_22F25E108(a2, &v13);
          *(_QWORD *)(result + 8) = v9;
        }
      }
      v10 += 2;
      do
        v9 = *(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v9 && (*(_DWORD *)(v9 + 28) & 0x7Fu) - 49 > 2);
    }
    while (v10 != v11);
  }
  return result;
}

uint64_t sub_22EFD4B08(unint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(a1 + 128);
  if (!v1
    || ((*(unsigned __int16 *)(v1 + 8) | (*(unsigned __int8 *)(v1 + 10) << 16)) & 0x100000) == 0
    || (*(_BYTE *)(v1 + 104) & 4) == 0)
  {
    return 0;
  }
  v3 = sub_22EFD462C(a1);
  v4 = v3;
  if ((*(_DWORD *)(v3 + 28) & 0x7F) == 0x1D)
    v4 = *(_QWORD *)(v3 + 48);
  result = 0;
  v5 = *(_QWORD *)(v4 + 144);
  if ((v5 & 6) == 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    if (v6)
      return *(_QWORD *)(v6 + 56);
  }
  return result;
}

uint64_t sub_22EFD4B78(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int i;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int j;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;

  v1 = a1;
  if (!a1 || (v2 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 4) != 0)
      v4 = *(_QWORD *)v4;
    for (i = *(_WORD *)(v4 + 8) & 0x7F; i != 83; i = *(_WORD *)(v4 + 8) & 0x7F)
    {
      v6 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v6 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v6 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v7 = i - 52;
            if ((i - 33) >= 5)
              v8 = -48;
            else
              v8 = -64;
            if (v7 >= 6)
              v6 = v8;
            else
              v6 = -72;
            goto LABEL_22;
          }
          v6 = -64;
        }
      }
LABEL_22:
      v9 = *(_QWORD *)(v4 + v6 + 16);
      v4 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) != 0)
        v4 = *(_QWORD *)v4;
    }
    v2 = v4 - 40;
  }
  v10 = *(_QWORD *)(v2 + 88);
  v21 = a1;
  v22 = 0;
  v11 = sub_22F246C54((uint64_t *)(v10 + 1896), &v21, &v22);
  v12 = v22;
  if (!v11)
    v12 = *(_QWORD *)(v10 + 1896) + 16 * *(unsigned int *)(v10 + 1912);
  if (!v1 || (*(_DWORD *)(v1 + 28) & 0x7F) != 0x53)
  {
    v13 = *(_QWORD *)(v1 + 16);
    v14 = v13 & 0xFFFFFFFFFFFFFFF8;
    if ((v13 & 4) != 0)
      v14 = *(_QWORD *)v14;
    for (j = *(_WORD *)(v14 + 8) & 0x7F; j != 83; j = *(_WORD *)(v14 + 8) & 0x7F)
    {
      v16 = -40;
      if (j > 70)
      {
        if (j == 71)
        {
          v16 = -56;
        }
        else if (j != 81)
        {
          goto LABEL_46;
        }
      }
      else
      {
        if (j > 0x18)
          goto LABEL_45;
        if (j == 16)
          goto LABEL_39;
        if (((1 << j) & 0x1066) != 0)
          goto LABEL_52;
        if (j == 24)
        {
LABEL_39:
          v16 = -48;
        }
        else
        {
LABEL_45:
          if (j != 70)
          {
LABEL_46:
            v17 = j - 52;
            if ((j - 33) >= 5)
              v18 = -48;
            else
              v18 = -64;
            if (v17 >= 6)
              v16 = v18;
            else
              v16 = -72;
            goto LABEL_52;
          }
          v16 = -64;
        }
      }
LABEL_52:
      v19 = *(_QWORD *)(v14 + v16 + 16);
      v14 = v19 & 0xFFFFFFFFFFFFFFF8;
      if ((v19 & 4) != 0)
        v14 = *(_QWORD *)v14;
    }
    v1 = v14 - 40;
  }
  if (v12 == *(_QWORD *)(*(_QWORD *)(v1 + 88) + 1896) + 16 * *(unsigned int *)(*(_QWORD *)(v1 + 88) + 1912))
    return 0;
  else
    return *(unsigned int *)(v12 + 8);
}

uint64_t sub_22EFD4DF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int i;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int j;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int k;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  const void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  void *v51;
  void **v52;
  uint64_t *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  __int16 v57;
  unsigned int v58;
  _BYTE *v59;
  _BYTE *v60;
  uint64_t v61;
  int v62;
  _BYTE v63[64];
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;
  _BYTE v68[64];
  uint64_t *v69;
  uint64_t v70;
  _QWORD v71[9];

  v71[8] = *MEMORY[0x24BDAC8D0];
  if (!a1 || (v2 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 4) != 0)
      v4 = *(_QWORD *)v4;
    for (i = *(_WORD *)(v4 + 8) & 0x7F; i != 83; i = *(_WORD *)(v4 + 8) & 0x7F)
    {
      v6 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v6 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v6 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v7 = i - 52;
            if ((i - 33) >= 5)
              v8 = -48;
            else
              v8 = -64;
            if (v7 >= 6)
              v6 = v8;
            else
              v6 = -72;
            goto LABEL_22;
          }
          v6 = -64;
        }
      }
LABEL_22:
      v9 = *(_QWORD *)(v4 + v6 + 16);
      v4 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) != 0)
        v4 = *(_QWORD *)v4;
    }
    v2 = v4 - 40;
  }
  v10 = *(_QWORD *)(v2 + 88);
  v11 = sub_22EFD5480(a1);
  v12 = sub_22EFD5480(a1);
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  v13 = v12 + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 128) + 16);
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  v14 = *(_QWORD *)(a1 + 128);
  if (v11 == v13)
  {
    v15 = (uint64_t *)sub_22EFD4278(v14 + 40, v10);
  }
  else
  {
    v15 = (uint64_t *)sub_22EFD4278(v14 + 64, v10);
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
    if (((*(unsigned __int16 *)(*(_QWORD *)(a1 + 128) + 8) | (*(unsigned __int8 *)(*(_QWORD *)(a1 + 128) + 10) << 16)) & 0x400000) == 0)
    {
      v69 = v71;
      v70 = 0x800000000;
      v64 = v68;
      v65 = v68;
      v66 = 8;
      v67 = 0;
      v59 = v63;
      v60 = v63;
      v61 = 8;
      v16 = *(_QWORD *)(a1 + 104);
      v62 = 0;
      sub_22E3CD31C((uint64_t *)(v16 + 96), v16);
      if (!a1 || (v17 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
      {
        v18 = *(_QWORD *)(a1 + 16);
        v19 = v18 & 0xFFFFFFFFFFFFFFF8;
        if ((v18 & 4) != 0)
          v19 = *(_QWORD *)v19;
        for (j = *(_WORD *)(v19 + 8) & 0x7F; j != 83; j = *(_WORD *)(v19 + 8) & 0x7F)
        {
          v21 = -40;
          if (j > 70)
          {
            if (j == 71)
            {
              v21 = -56;
            }
            else if (j != 81)
            {
              goto LABEL_46;
            }
          }
          else
          {
            if (j > 0x18)
              goto LABEL_45;
            if (j == 16)
              goto LABEL_39;
            if (((1 << j) & 0x1066) != 0)
              goto LABEL_52;
            if (j == 24)
            {
LABEL_39:
              v21 = -48;
            }
            else
            {
LABEL_45:
              if (j != 70)
              {
LABEL_46:
                v22 = j - 52;
                if ((j - 33) >= 5)
                  v23 = -48;
                else
                  v23 = -64;
                if (v22 >= 6)
                  v21 = v23;
                else
                  v21 = -72;
                goto LABEL_52;
              }
              v21 = -64;
            }
          }
LABEL_52:
          v24 = *(_QWORD *)(v19 + v21 + 16);
          v19 = v24 & 0xFFFFFFFFFFFFFFF8;
          if ((v24 & 4) != 0)
            v19 = *(_QWORD *)v19;
        }
        v17 = v19 - 40;
      }
      v26 = *(uint64_t **)sub_22EFD4278(*(_QWORD *)(a1 + 128) + 40, *(_QWORD *)(v17 + 88));
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      if (!a1 || (v27 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
      {
        v28 = *(_QWORD *)(a1 + 16);
        v29 = v28 & 0xFFFFFFFFFFFFFFF8;
        if ((v28 & 4) != 0)
          v29 = *(_QWORD *)v29;
        for (k = *(_WORD *)(v29 + 8) & 0x7F; k != 83; k = *(_WORD *)(v29 + 8) & 0x7F)
        {
          v31 = -40;
          if (k > 70)
          {
            if (k == 71)
            {
              v31 = -56;
            }
            else if (k != 81)
            {
              goto LABEL_76;
            }
          }
          else
          {
            if (k > 0x18)
              goto LABEL_75;
            if (k == 16)
              goto LABEL_69;
            if (((1 << k) & 0x1066) != 0)
              goto LABEL_82;
            if (k == 24)
            {
LABEL_69:
              v31 = -48;
            }
            else
            {
LABEL_75:
              if (k != 70)
              {
LABEL_76:
                v32 = k - 52;
                if ((k - 33) >= 5)
                  v33 = -48;
                else
                  v33 = -64;
                if (v32 >= 6)
                  v31 = v33;
                else
                  v31 = -72;
                goto LABEL_82;
              }
              v31 = -64;
            }
          }
LABEL_82:
          v34 = *(_QWORD *)(v29 + v31 + 16);
          v29 = v34 & 0xFFFFFFFFFFFFFFF8;
          if ((v34 & 4) != 0)
            v29 = *(_QWORD *)v29;
        }
        v27 = v29 - 40;
      }
      v35 = *(uint64_t **)(sub_22EFD4278(*(_QWORD *)(a1 + 128) + 40, *(_QWORD *)(v27 + 88)) + 8);
      sub_22F3B4218(v15, v10, v26, v35);
      while (v26 != v35)
      {
        v36 = *v26++;
        v37 = (const void *)sub_22EFD9654(v36 & 0xFFFFFFFFFFFFFFFCLL);
        sub_22E3BA850((uint64_t)&v59, v37);
      }
      v38 = sub_22EFD5480(a1);
      v39 = sub_22EFD5480(a1);
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      v40 = v39 + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 128) + 16);
      while (v38 != v40)
      {
        v41 = *(_QWORD *)(**(_QWORD **)(v38 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v41 + 8) & 0xF) != 0)
          v41 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v38 + 16));
        v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v42 && *(_BYTE *)(v42 + 16) == 45)
        {
          v43 = sub_22F114198(*(_QWORD *)(v42 + 24));
          v44 = *(unsigned __int8 *)(v38 + 12);
          v45 = v44 & 1;
          v46 = (v44 >> 2) & 3;
          v47 = v44 & 2;
          if (v46 == 3)
            v48 = v47;
          else
            v48 = v46;
          sub_22EFD96DC(v10, v43, v45, v48, (unsigned int *)&v59, v15, (uint64_t)&v69, (uint64_t)&v64);
        }
        v38 += 24;
      }
      if ((_DWORD)v70)
      {
        v49 = v69;
        v50 = 8 * v70;
        do
        {
          v51 = (void *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)(*v49 & 0xFFFFFFFFFFFFFFFCLL) + 32))(*v49 & 0xFFFFFFFFFFFFFFFCLL);
          v52 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v64, v51);
          if (v65 == v64)
            v53 = (uint64_t *)((char *)&v66 + 4);
          else
            v53 = &v66;
          if (v52 == (void **)&v65[8 * *(unsigned int *)v53])
          {
            v54 = *v49;
            v55 = (_QWORD *)v15[1];
            if ((unint64_t)v55 >= (v15[2] & 0xFFFFFFFFFFFFFFF8))
            {
              sub_22E78E458(v15, v10, 1uLL);
              v55 = (_QWORD *)v15[1];
            }
            *v55 = v54;
            v15[1] = (uint64_t)(v55 + 1);
          }
          ++v49;
          v50 -= 8;
        }
        while (v50);
      }
      if (v60 != v59)
        free(v60);
      if (v65 != v64)
        free(v65);
      if (v69 != v71)
        free(v69);
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
      v56 = *(_QWORD *)(a1 + 128);
      v57 = *(_WORD *)(v56 + 8);
      v56 += 8;
      v58 = ((*(unsigned __int8 *)(v56 + 2) << 16) | 0x400000u) >> 16;
      *(_WORD *)v56 = v57;
      *(_BYTE *)(v56 + 2) = v58;
    }
  }
  return *v15;
}

unint64_t sub_22EFD5480(uint64_t a1)
{
  uint64_t v2;
  unint64_t result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  v2 = *(_QWORD *)(a1 + 128);
  result = *(_QWORD *)(v2 + 24);
  if ((result & 1) != 0)
  {
    v4 = *(_QWORD *)(v2 + 88);
    if (!v4 || (*(_DWORD *)(v4 + 28) & 0x7F) != 0x53)
    {
      v5 = *(_QWORD *)(v4 + 16);
      v6 = v5 & 0xFFFFFFFFFFFFFFF8;
      if ((v5 & 4) != 0)
        v6 = *(_QWORD *)v6;
      for (i = *(_WORD *)(v6 + 8) & 0x7F; i != 83; i = *(_WORD *)(v6 + 8) & 0x7F)
      {
        v8 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v8 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_17;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_16;
          if (i == 16)
            goto LABEL_10;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_23;
          if (i == 24)
          {
LABEL_10:
            v8 = -48;
          }
          else
          {
LABEL_16:
            if (i != 70)
            {
LABEL_17:
              v9 = i - 52;
              if ((i - 33) >= 5)
                v10 = -48;
              else
                v10 = -64;
              if (v9 >= 6)
                v8 = v10;
              else
                v8 = -72;
              goto LABEL_23;
            }
            v8 = -64;
          }
        }
LABEL_23:
        v11 = *(_QWORD *)(v6 + v8 + 16);
        v6 = v11 & 0xFFFFFFFFFFFFFFF8;
        if ((v11 & 4) != 0)
          v6 = *(_QWORD *)v6;
      }
      v4 = v6 - 40;
    }
    result = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v4 + 88) + 16048) + 56))(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 16048), result >> 1);
    *(_QWORD *)(v2 + 24) = result;
  }
  return result;
}

uint64_t sub_22EFD55D8(unint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a1;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  v4 = *(_QWORD *)(v3 + 128) + 40;
  if (!v3 || (*(_DWORD *)(v3 + 28) & 0x7F) != 0x53)
  {
    v5 = *(_QWORD *)(v3 + 16);
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v6 = *(_QWORD *)v6;
    for (i = *(_WORD *)(v6 + 8) & 0x7F; i != 83; i = *(_WORD *)(v6 + 8) & 0x7F)
    {
      v8 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v8 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v8 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v9 = i - 52;
            if ((i - 33) >= 5)
              v10 = -48;
            else
              v10 = -64;
            if (v9 >= 6)
              v8 = v10;
            else
              v8 = -72;
            goto LABEL_22;
          }
          v8 = -64;
        }
      }
LABEL_22:
      v11 = *(_QWORD *)(v6 + v8 + 16);
      v6 = v11 & 0xFFFFFFFFFFFFFFF8;
      if ((v11 & 4) != 0)
        v6 = *(_QWORD *)v6;
    }
    v3 = v6 - 40;
  }
  result = sub_22EFD4278(v4, *(_QWORD *)(v3 + 88));
  v14 = *(_QWORD **)result;
  v13 = *(_QWORD *)(result + 8);
  v15 = v13 - *(_QWORD *)result;
  if ((v15 & 0x7FFFFFFF8) != 0)
  {
    v16 = (v15 >> 3);
    while ((*v14 & 0xFFFFFFFFFFFFFFFCLL) != a2)
    {
      ++v14;
      if (!--v16)
        return result;
    }
    v17 = *(_QWORD *)(v13 - 8);
    *(_QWORD *)(result + 8) = v13 - 8;
    *v14 = v17;
  }
  return result;
}

uint64_t sub_22EFD5754(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 136) = a2 & 0xFFFFFFFFFFFFFFFBLL;
  return result;
}

uint64_t sub_22EFD5760(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  _DWORD *v4;

  if (a1 && (*(_DWORD *)(a1 + 28) & 0x7E) == 0x24)
    return *(_BYTE *)(a1 + 180) & 7;
  result = 0;
  v3 = *(_QWORD *)(a1 + 136);
  if ((v3 & 4) != 0)
  {
    v4 = (_DWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
    if (v4)
      return ((*v4 >> 1) & 3u) + 1;
  }
  return result;
}

uint64_t sub_22EFD57A8(uint64_t result, int a2)
{
  uint64_t v2;
  _QWORD *v3;

  if (result && (*(_DWORD *)(result + 28) & 0x7E) == 0x24)
  {
    *(_BYTE *)(result + 180) = *(_BYTE *)(result + 180) & 0xF8 | a2 & 7;
  }
  else
  {
    v2 = *(_QWORD *)(result + 136);
    if ((v2 & 4) != 0)
    {
      v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
      if (v3)
        *v3 = *v3 & 0xFFFFFFFFFFFFFFF9 | (2 * (a2 - 1));
    }
  }
  return result;
}

unint64_t sub_22EFD57F4(unint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  if (a1 && (*(_DWORD *)(a1 + 28) & 0x7E) == 0x24)
  {
    if ((*(_BYTE *)(a1 + 180) & 5) != 0)
    {
      v1 = *(_QWORD *)(a1 + 152);
      v2 = v1 & 0xFFFFFFFFFFFFFFF8;
      if ((v1 & 4) != 0 && v2)
        v2 = *(_QWORD *)v2 | 4;
    }
    else
    {
      v2 = 0;
    }
    v3 = v2 & 0xFFFFFFFFFFFFFFF8;
    if ((v2 & 4) == 0 && v3)
    {
      do
      {
        v4 = v3;
        v5 = (_QWORD *)sub_22EFE9368(v3);
        v3 = *v5 & 0xFFFFFFFFFFFFFFF8;
      }
      while (v3 && (*(_BYTE *)sub_22EFE9368(*v5 & 0xFFFFFFFFFFFFFFF8) & 4) == 0);
      v3 = *(_QWORD *)(v4 + 48);
      goto LABEL_25;
    }
    if (v3 && (v2 & 4) != 0)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v3 + 104) + 200) & 0xFFFFFFFFFFFFFFF8;
      if (v6)
      {
        do
        {
          v7 = *(_QWORD *)(*(_QWORD *)(v6 + 104) + 200);
          if ((v7 & 4) != 0)
            break;
          v3 = v6;
          v6 = v7 & 0xFFFFFFFFFFFFFFF8;
        }
        while ((v7 & 0xFFFFFFFFFFFFFFF8) != 0);
      }
      goto LABEL_25;
    }
  }
  v8 = 0;
  v9 = *(_QWORD *)(a1 + 136);
  if ((v9 & 4) == 0)
    return v8;
  v10 = (_DWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if (!v10)
    return v8;
  if (((((*v10 >> 1) & 3) + 1) & 0xFFFFFFFD) == 0)
    return 0;
  do
  {
    v3 = a1;
    v11 = *(_QWORD *)(a1 + 136);
    if ((v11 & 4) == 0)
      break;
    v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
    if (!v12)
      break;
    a1 = *v12 & 0xFFFFFFFFFFFFFFF8;
  }
  while (a1);
LABEL_25:
  v8 = *(_QWORD *)(v3 + 128);
  if (v8
    || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104)),
        (v8 = *(_QWORD *)(v3 + 128)) != 0))
  {
    v8 = *(_QWORD *)(v8 + 88);
  }
  if (!v8)
    return v3;
  return v8;
}

BOOL sub_22EFD593C(unint64_t a1)
{
  unint64_t v1;
  int v2;
  int v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  const void *v28;
  const char *v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v42;

  v1 = a1;
  v2 = *(_DWORD *)(a1 + 72);
  while (1)
  {
    v3 = v2 & 0xE000;
    v4 = v3 == 0x2000;
    if (v3 == 0x2000)
      return v4;
    v5 = *(_QWORD *)(v1 + 128);
    if (v5)
    {
      if (((*(unsigned __int16 *)(v5 + 8) | (*(unsigned __int8 *)(v5 + 10) << 16)) & 0x100000) != 0)
        return v4;
    }
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v1 + 104) + 96), *(_QWORD *)(v1 + 104));
    if ((**(_DWORD **)(v1 + 128) & 1) != 0)
      return v4;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v1 + 104) + 96), *(_QWORD *)(v1 + 104));
    if ((**(_QWORD **)(v1 + 128) & 0x40) != 0)
      return v4;
    if (sub_22EFC3B90(v1))
      return v4;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v1 + 104) + 96), *(_QWORD *)(v1 + 104));
    if (*(_QWORD *)(*(_QWORD *)(v1 + 128) + 96))
      return v4;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v1 + 104) + 96), *(_QWORD *)(v1 + 104));
    if (*(_DWORD *)(*(_QWORD *)(v1 + 128) + 20))
      return v4;
    v6 = sub_22EA3A92C(v1);
    if (v6 - sub_22EA3A8C8(v1) > 0)
      return v4;
    v7 = sub_22E488FF8(v1);
    if (v7 != v8)
      break;
LABEL_18:
    if ((*(_BYTE *)(v1 + 29) & 1) != 0)
    {
      sub_22EFC8E88(v1);
      v12 = *(uint64_t **)v11;
      v13 = *(unsigned int *)(v11 + 8);
      v14 = *(uint64_t **)v11;
      if ((_DWORD)v13)
      {
        v15 = 8 * v13;
        v14 = *(uint64_t **)v11;
        while (*(_WORD *)(*v14 + 32) != 342)
        {
          ++v14;
          v15 -= 8;
          if (!v15)
            goto LABEL_69;
        }
      }
      if (v14 != &v12[v13])
      {
        do
        {
          v17 = *v12++;
          v16 = v17;
        }
        while (*(_WORD *)(v17 + 32) != 342);
        if ((*(_BYTE *)(v1 + 73) & 0xE0) == 0)
        {
          v18 = *(_QWORD *)(v1 + 16);
          v19 = v18 & 0xFFFFFFFFFFFFFFF8;
          if ((v18 & 4) != 0)
            v19 = *(_QWORD *)v19;
          if (!sub_22EFCBD94(v19, 1))
          {
            while (1)
            {
              v20 = *(_WORD *)(v19 + 8) & 0x7F;
              if (v20 == 16)
                break;
              if (v20 == 83)
              {
                v25 = *(_QWORD *)(v1 + 40) & 0xFFFFFFFFFFFFFFF8;
                if ((*(_QWORD *)(v1 + 40) & 7) != 0 || v25 == 0)
                  break;
                v27 = *(_QWORD *)(v25 + 16);
                if (*(_DWORD *)v27 == 9)
                {
                  v30 = *(_QWORD *)(v27 + 16);
                  v31 = *(unsigned __int8 *)(v27 + 24);
                  v32 = v30 == 0x6374617073694449 && v31 == 104;
                  if (!v32 || *(_DWORD *)(v16 + 36) != 36)
                    break;
                  v28 = *(const void **)(v16 + 40);
                  v29 = "00020400-0000-0000-C000-000000000046";
                }
                else
                {
                  if (*(_DWORD *)v27 != 8
                    || *(_QWORD *)(v27 + 16) != 0x6E776F6E6B6E5549
                    || *(_DWORD *)(v16 + 36) != 36)
                  {
                    break;
                  }
                  v28 = *(const void **)(v16 + 40);
                  v29 = "00000000-0000-0000-C000-000000000046";
                }
                if (memcmp(v28, v29, 0x24uLL))
                  break;
                sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v1 + 104) + 96), *(_QWORD *)(v1 + 104));
                return *(_DWORD *)(*(_QWORD *)(v1 + 128) + 16) == 0;
              }
              v21 = -40;
              if ((*(_WORD *)(v19 + 8) & 0x7Fu) > 0x46)
              {
                if (v20 == 71)
                {
                  v21 = -56;
                }
                else if (v20 != 81)
                {
                  goto LABEL_42;
                }
              }
              else
              {
                if (v20 > 0x18)
                  goto LABEL_41;
                if (((1 << v20) & 0x1066) != 0)
                  goto LABEL_48;
                if (v20 == 24)
                {
                  v21 = -48;
                }
                else
                {
LABEL_41:
                  if (v20 != 70)
                  {
LABEL_42:
                    v22 = v20 - 52;
                    if (v20 - 33 >= 5)
                      v23 = -48;
                    else
                      v23 = -64;
                    if (v22 >= 6)
                      v21 = v23;
                    else
                      v21 = -72;
                    goto LABEL_48;
                  }
                  v21 = -64;
                }
              }
LABEL_48:
              v24 = *(_QWORD *)(v19 + v21 + 16);
              v19 = v24 & 0xFFFFFFFFFFFFFFF8;
              if ((v24 & 4) != 0)
                v19 = *(_QWORD *)v19;
            }
          }
        }
      }
    }
LABEL_69:
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v1 + 104) + 96), *(_QWORD *)(v1 + 104));
    if (*(_DWORD *)(*(_QWORD *)(v1 + 128) + 16) == 1)
    {
      v33 = sub_22EFD5480(v1);
      v34 = *(unsigned __int8 *)(v33 + 12);
      if ((v34 & 1) == 0)
      {
        v35 = (v34 >> 2) & 3;
        v36 = v34 & 2;
        if (v35 != 3)
          v36 = v35;
        if (!v36)
        {
          v37 = **(_QWORD **)(v33 + 16);
          v38 = *(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v38 + 8) & 0xF) != 0)
            v38 = (unint64_t)sub_22F10D2BC(v37);
          v39 = sub_22F10C2A4(*(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF0));
          v1 = v39;
          v40 = (*(_DWORD *)(v39 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v39;
          v2 = *(_DWORD *)(v40 + 72);
          if ((v2 & 0xE000) != 0x2000)
            continue;
        }
      }
    }
    return v4;
  }
  v9 = v7;
  v10 = v8;
  while (!sub_22EFBF86C(v9, &v42, 0) || (*(_BYTE *)(v9 + 29) & 2) != 0)
  {
    do
      v9 = *(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8;
    while (v9 && (*(_DWORD *)(v9 + 28) & 0x7Eu) - 54 > 3);
    if (v9 == v10)
      goto LABEL_18;
  }
  return 0;
}

uint64_t sub_22EFD5D68(unint64_t a1)
{
  return sub_22EFD5D70(a1, 0);
}

uint64_t sub_22EFD5D70(unint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int j;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int k;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t result;
  unint64_t *v22;
  uint64_t v23;
  uint64_t i;
  _QWORD v25[2];
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = a1;
  sub_22EFC3BF0(a1);
  if (sub_22EFD6090(v3))
  {
    v25[0] = 0;
    v25[1] = 0;
    v26 = 0;
    v28 = 0;
    v29 = 0;
    v27 = 0;
    if (!a2)
    {
      a2 = v25;
      sub_22F3AB750(v3, (uint64_t)v25);
    }
    v23 = a2[3];
LABEL_61:
    if (v23 != a2[4])
    {
      for (i = *(_QWORD *)(v23 + 32); ; i += 120)
      {
        if (i == *(_QWORD *)(v23 + 40))
        {
          v23 += 56;
          goto LABEL_61;
        }
        if ((*(_BYTE *)(**(_QWORD **)(i + 8) + 82) & 8) != 0)
          break;
      }
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
      **(_QWORD **)(v3 + 128) |= 0x800uLL;
    }
    sub_22F31EB90((uint64_t)v25);
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
  if (!v3 || (v4 = v3, (*(_DWORD *)(v3 + 28) & 0x7F) != 0x53))
  {
    v5 = *(_QWORD *)(v3 + 16);
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v6 = *(_QWORD *)v6;
    for (j = *(_WORD *)(v6 + 8) & 0x7F; j != 83; j = *(_WORD *)(v6 + 8) & 0x7F)
    {
      v8 = -40;
      if (j > 70)
      {
        if (j == 71)
        {
          v8 = -56;
        }
        else if (j != 81)
        {
          goto LABEL_21;
        }
      }
      else
      {
        if (j > 0x18)
          goto LABEL_20;
        if (j == 16)
          goto LABEL_10;
        if (((1 << j) & 0x1066) != 0)
          goto LABEL_11;
        if (j == 24)
        {
LABEL_10:
          v8 = -48;
        }
        else
        {
LABEL_20:
          if (j != 70)
          {
LABEL_21:
            v10 = j - 52;
            if ((j - 33) >= 5)
              v11 = -48;
            else
              v11 = -64;
            if (v10 >= 6)
              v8 = v11;
            else
              v8 = -72;
            goto LABEL_11;
          }
          v8 = -64;
        }
      }
LABEL_11:
      v9 = *(_QWORD *)(v6 + v8 + 16);
      v6 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) != 0)
        v6 = *(_QWORD *)v6;
    }
    v4 = v6 - 40;
  }
  v12 = *(unint64_t **)sub_22EFD4278(*(_QWORD *)(v3 + 128) + 40, *(_QWORD *)(v4 + 88));
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v3 + 104) + 96), *(_QWORD *)(v3 + 104));
  v13 = *(_QWORD *)(v3 + 128) + 40;
  if (!v3 || (*(_DWORD *)(v3 + 28) & 0x7F) != 0x53)
  {
    v14 = *(_QWORD *)(v3 + 16);
    v15 = v14 & 0xFFFFFFFFFFFFFFF8;
    if ((v14 & 4) != 0)
      v15 = *(_QWORD *)v15;
    for (k = *(_WORD *)(v15 + 8) & 0x7F; k != 83; k = *(_WORD *)(v15 + 8) & 0x7F)
    {
      v17 = -40;
      if (k > 70)
      {
        if (k == 71)
        {
          v17 = -56;
          goto LABEL_37;
        }
        if (k == 81)
          goto LABEL_37;
      }
      else
      {
        if (k <= 0x18)
        {
          if (k == 16)
            goto LABEL_36;
          if (((1 << k) & 0x1066) != 0)
            goto LABEL_37;
          if (k == 24)
          {
LABEL_36:
            v17 = -48;
            goto LABEL_37;
          }
        }
        if (k == 70)
        {
          v17 = -64;
          goto LABEL_37;
        }
      }
      v19 = k - 52;
      if ((k - 33) >= 5)
        v20 = -48;
      else
        v20 = -64;
      if (v19 >= 6)
        v17 = v20;
      else
        v17 = -72;
LABEL_37:
      v18 = *(_QWORD *)(v15 + v17 + 16);
      v15 = v18 & 0xFFFFFFFFFFFFFFF8;
      if ((v18 & 4) != 0)
        v15 = *(_QWORD *)v15;
    }
    v3 = v15 - 40;
  }
  result = sub_22EFD4278(v13, *(_QWORD *)(v3 + 88));
  v22 = *(unint64_t **)(result + 8);
  while (v12 != v22)
  {
    *v12 = *v12 & 0xFFFFFFFFFFFFFFFCLL | ((unint64_t)*(unsigned int *)((*v12 & 0xFFFFFFFFFFFFFFFCLL) + 28) >> 13) & 3;
    ++v12;
  }
  return result;
}

uint64_t sub_22EFD6090(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  BOOL v10;

  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((**(_QWORD **)(a1 + 128) & 0x800) != 0)
    return 0;
  if ((*(_BYTE *)(a1 + 28) & 0x80) != 0)
    return 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((**(_QWORD **)(a1 + 128) & 0x400) == 0)
    return 0;
  if ((sub_22EFC7ADC(a1 + 64) & 1) != 0)
    return 0;
  v2 = sub_22EFD5480(a1);
  v3 = sub_22EFD5480(a1);
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  v4 = v3 + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 128) + 16);
  if (v2 == v4)
    return 0;
  v5 = v2 + 24;
  do
  {
    v6 = *(_QWORD *)(**(_QWORD **)(v5 - 8) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v6 + 8) & 0xF) != 0)
      v6 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v5 - 8));
    v7 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                 + 24));
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v7 + 104) + 96), *(_QWORD *)(v7 + 104));
    v8 = **(_QWORD **)(v7 + 128);
    result = (v8 >> 11) & 1;
    if (((v8 >> 11) & 1) != 0)
      break;
    v10 = v5 == v4;
    v5 += 24;
  }
  while (!v10);
  return result;
}

uint64_t sub_22EFD61B0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(a1 + 128);
  if (!v1)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
    v1 = *(_QWORD *)(a1 + 128);
    if (!v1)
      return 0;
  }
  v2 = *(_QWORD *)(v1 + 88);
  if (!v2)
    return 0;
  if (sub_22E4808EC(*(_QWORD *)(v1 + 88)))
  {
    if ((*(_QWORD *)(v2 + 40) & 7) == 0 && llvm::StringRef::find() != -1)
      return 0;
  }
  else
  {
    v3 = sub_22EFD10F8(v2);
    if (!v3 || !sub_22E4808EC(v3))
      return 0;
  }
  return 1;
}

uint64_t sub_22EFD627C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  _BOOL8 v7;
  llvm *v9[2];
  unsigned int v10;
  void *v11;
  __int128 v12;
  _BYTE v13[49];
  void *v14[2];
  _BYTE v15[128];
  llvm *v16[2];
  unsigned int v17;
  void *v18;
  __int128 v19;
  _BYTE v20[128];
  void *v21[2];
  _QWORD v22[17];

  v22[16] = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 & 3;
  if ((_DWORD)v4 == (a2 & 3) && (_DWORD)v4 != 2)
    return 1;
  v7 = 0;
  if ((a2 & 3) == 2 && (*a1 & 3) == 2)
  {
    v16[0] = 0;
    v16[1] = 0;
    v17 = 0;
    v18 = v20;
    v19 = xmmword_22F44E310;
    v21[0] = v22;
    v21[1] = (void *)0x2000000000;
    v9[0] = 0;
    v9[1] = 0;
    v10 = 0;
    v11 = v13;
    v12 = xmmword_22F44E310;
    v14[0] = v15;
    v14[1] = (void *)0x2000000000;
    sub_22F0EC99C((unsigned __int8 *)(v3 & 0xFFFFFFFFFFFFFFFCLL), (uint64_t)v21, (uint64_t)v16);
    sub_22F0EC99C((unsigned __int8 *)(a2 & 0xFFFFFFFFFFFFFFFCLL), (uint64_t)v14, (uint64_t)v9);
    v6 = sub_22F0BCA28((uint64_t)v16);
    v7 = v6 == sub_22F0BCA28((uint64_t)v9);
    if (v14[0] != v15)
      free(v14[0]);
    if (v11 != v13)
      free(v11);
    llvm::deallocate_buffer(v9[0], (void *)(16 * v10));
    if (v21[0] != v22)
      free(v21[0]);
    if (v18 != v20)
      free(v18);
    llvm::deallocate_buffer(v16[0], (void *)(16 * v17));
  }
  return v7;
}

BOOL sub_22EFD642C(_QWORD *a1)
{
  if ((*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1) + 80) & 0xE000) == 0x4000)
    return 1;
  if ((a1[5] & 7) == 6)
    return (*(_DWORD *)(a1[5] & 0xFFFFFFFFFFFFFFF8) - 1) < 4;
  return 0;
}

uint64_t sub_22EFD6498(uint64_t a1, unint64_t a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  _BOOL4 v19;
  int v20;

  v6 = *(_WORD *)(a1 + 80) & 0x7F;
  v7 = -40;
  if (v6 > 0x46)
  {
    if (v6 != 83)
    {
      if (v6 == 71)
      {
        v7 = -56;
        goto LABEL_17;
      }
      if (v6 == 81)
        goto LABEL_17;
LABEL_12:
      v8 = v6 - 52;
      v9 = v6 - 33 >= 5;
      v10 = -48;
      if (!v9)
        v10 = -64;
      if (v8 >= 6)
        v7 = v10;
      else
        v7 = -72;
    }
  }
  else
  {
    if (v6 > 0x18)
      goto LABEL_11;
    if (v6 != 16)
    {
      if (((1 << v6) & 0x1066) != 0)
        goto LABEL_17;
      if (v6 != 24)
      {
LABEL_11:
        if (v6 == 70)
        {
          v7 = -64;
          goto LABEL_17;
        }
        goto LABEL_12;
      }
    }
    v7 = -48;
  }
LABEL_17:
  v11 = *(_QWORD *)(a1 + 72 + v7 + 16);
  v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
  if ((v11 & 4) != 0)
    v12 = (_QWORD *)*v12;
  if (v12)
    v13 = v12 - 8;
  else
    v13 = 0;
  v14 = (*(uint64_t (**)(_QWORD *))(*v13 + 32))(v13);
  if (v14 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2))
    return a1;
  if ((*(_DWORD *)(a1 + 28) & 0x7F) == 0x39)
  {
    v15 = sub_22EFD10F8(a2);
    if (v15)
    {
      v16 = v15;
      if ((sub_22EFD6694(v15, a1) & 1) != 0 || a3 && (sub_22EFD6694(a1, v16) & 1) != 0)
        return v16;
    }
    return 0;
  }
  v17 = sub_22EFCE144(a2 + 64, *(_QWORD *)(a1 + 40));
  if (!v17)
    return 0;
  while (1)
  {
    v18 = (unint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
    v19 = (v17 & 0xFFFFFFFFFFFFFFF8) == 0 || (v17 & 4) == 0;
    v16 = v17 & 0xFFFFFFFFFFFFFFF8;
    if (!v19)
      v16 = *v18;
    if (!v16 || (*(_DWORD *)(v16 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
      goto LABEL_42;
    if ((sub_22EFD6694(v16, a1) & 1) != 0)
      return v16;
    if (!a3)
    {
LABEL_42:
      if (v19)
        return 0;
      goto LABEL_43;
    }
    v20 = sub_22EFD6694(a1, v16);
    if (((v19 | v20) & 1) != 0)
      break;
LABEL_43:
    v17 = v18[1];
    if (!v17)
      return 0;
  }
  if (!v20)
    return 0;
  return v16;
}

uint64_t sub_22EFD6694(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_DWORD *)(a1 + 28) & 0x7F;
  if (v2 == 55)
    return 0;
  v4 = a1;
  if (v2 != 83)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v6 = *(_QWORD *)v6;
    for (i = *(_WORD *)(v6 + 8) & 0x7F; i != 83; i = *(_WORD *)(v6 + 8) & 0x7F)
    {
      v8 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v8 = -56;
          goto LABEL_22;
        }
        if (i == 81)
          goto LABEL_22;
      }
      else
      {
        if (i <= 0x18)
        {
          if (i == 16)
            goto LABEL_9;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_22;
          if (i == 24)
          {
LABEL_9:
            v8 = -48;
            goto LABEL_22;
          }
        }
        if (i == 70)
        {
          v8 = -64;
          goto LABEL_22;
        }
      }
      v9 = i - 52;
      if ((i - 33) >= 5)
        v10 = -48;
      else
        v10 = -64;
      if (v9 >= 6)
        v8 = v10;
      else
        v8 = -72;
LABEL_22:
      v11 = *(_QWORD *)(v6 + v8 + 16);
      v6 = v11 & 0xFFFFFFFFFFFFFFF8;
      if ((v11 & 4) != 0)
        v6 = *(_QWORD *)v6;
    }
    v4 = v6 - 40;
  }
  v12 = sub_22EF5B234(*(_QWORD *)(v4 + 88), a1);
  if ((_QWORD *)v12 == v13)
    return 0;
  v14 = (_QWORD *)v12;
  v15 = v13;
  while (1)
  {
    v16 = *v14;
    v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v14 + 32))(*v14);
    if (v17 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) || sub_22EFD6694(v16, a2))
      break;
    if (++v14 == v15)
      return 0;
  }
  return 1;
}

uint64_t sub_22EFD683C(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x24BDAC8D0];
  v5 = sub_22EFD6498(a1, a2, a3);
  if (!v5)
  {
    v25 = 0;
    v6 = sub_22EFD5480(a2);
    v7 = sub_22EFD5480(a2);
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
    v8 = v7 + 24 * *(unsigned int *)(*(_QWORD *)(a2 + 128) + 16);
    while (v6 != v8)
    {
      v9 = *(_QWORD *)(**(_QWORD **)(v6 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v9 + 8) & 0xF) != 0)
        v9 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v6 + 16));
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v10)
      {
        if (*(_BYTE *)(v10 + 16) == 45)
        {
          v11 = sub_22F114198(*(_QWORD *)(v10 + 24));
          v12 = sub_22EFD683C(a1, v11, 0);
          if (v12)
          {
            v13 = v12;
            v14 = v27;
            if (v25)
            {
              v15 = 8 * v25;
              while (1)
              {
                v16 = *v14;
                if (*v14)
                {
                  if (v13 == v16)
                    break;
                  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
                  if (v17 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16))
                    break;
                }
                if ((sub_22EFD6694(v16, v13) & 1) != 0)
                  break;
                ++v14;
                v15 -= 8;
                if (!v15)
                {
                  v18 = v27;
                  v19 = 8 * v25;
                  v20 = v27;
                  v14 = &v27[v19 / 8];
                  while (1)
                  {
                    v21 = *v20++;
                    if (sub_22EFD6694(v13, v21))
                      break;
                    v18 = v20;
                    v19 -= 8;
                    if (!v19)
                      goto LABEL_27;
                  }
                  if (v19 == 8)
                  {
                    v14 = v18;
                  }
                  else
                  {
                    v22 = 8;
                    v14 = v18;
                    do
                    {
                      if ((sub_22EFD6694(v13, v18[(unint64_t)v22 / 8]) & 1) == 0)
                        *v14++ = v18[(unint64_t)v22 / 8];
                      v22 += 8;
                    }
                    while (v19 != v22);
                  }
                  goto LABEL_27;
                }
              }
            }
            else
            {
LABEL_27:
              v23 = ((unint64_t)((char *)v14 - (char *)v27) >> 3);
              v26 = (unint64_t)((char *)v14 - (char *)v27) >> 3;
              if (v26 >= 4uLL)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v23 = v26;
              }
              v27[v23] = v13;
              v25 = v26 + 1;
            }
          }
        }
      }
      v6 += 24;
    }
    if (v25 == 1)
      return v27[0];
    else
      return 0;
  }
  return v5;
}

unint64_t sub_22EFD6AD8(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, uint64_t a6, int a7, char a8, char a9, int a10, int a11, uint64_t a12)
{
  uint64_t v17;
  unint64_t v18;
  unint64_t result;

  if (a2)
    v17 = a2 + 64;
  else
    v17 = 0;
  v18 = sub_22EFC7430(160, a1, v17, 0);
  result = sub_22EFBF4FC(v18, 54, a1, v17, a3, a4, a5, a6, a7, SHIWORD(a7), a8, a9, a10, a12);
  *(_QWORD *)result = &off_24FAC3B60;
  if (a11)
    *(_DWORD *)(result + 140) = a11;
  return result;
}

unint64_t sub_22EFD6BA4(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6[3];

  v4 = sub_22E3CD3D4(a1 + 2032, 168, 3);
  *(_DWORD *)v4 = 0;
  *(_DWORD *)(v4 + 4) = a2;
  memset(v6, 0, sizeof(v6));
  result = sub_22EFBF4FC(v4 + 8, 54, a1, 0, 0, v6, 0, 0, 0, 0, 0, 0, 0, 0);
  *(_QWORD *)(v4 + 8) = &off_24FAC3B60;
  return result;
}

uint64_t sub_22EFD6C34(uint64_t a1, unsigned __int8 *a2, char a3)
{
  uint64_t v3;
  BOOL v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((a3 & 1) != 0)
    return 0;
  v3 = a1;
  if (sub_22E4808EC(a1))
  {
    v5 = (*(_BYTE *)(v3 + 82) & 8) == 0;
    goto LABEL_5;
  }
  if (!a2)
    return 0;
  v6 = sub_22EFF5860(a2);
  v7 = v6;
  if ((v6[1] & 3) != 0
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) != 45)
  {
    v9 = sub_22F3C0E40(v6);
    if (!v9)
      return 0;
    v10 = v9;
    v11 = sub_22EFD683C(v3, v9, 0);
    v3 = v11;
    if (!v11)
      return v3;
    if ((*(_BYTE *)(v11 + 82) & 8) != 0)
      return 0;
    if (!sub_22E4808EC(v11) && (sub_22EFD61B0(v10) & 1) == 0)
    {
      v12 = *v7;
      if (v12 == 188)
      {
        v5 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 3) + 48) & 0xFFFFFFFFFFFFFFF0)
                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) == 45;
LABEL_5:
        if (!v5)
          return 0;
        return v3;
      }
      if (v12 == 161)
      {
        v13 = *((_QWORD *)v7 + 2);
        if (v13 && (*(_DWORD *)(v13 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
        {
          v14 = *(_QWORD *)(v13 + 48);
          goto LABEL_29;
        }
      }
      else if ((v12 & 0xFE) == 0x70 && (v7[2] & 0xF8) == 0)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 3) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (!v15 || *(_BYTE *)(v15 + 16) != 31)
          v15 = sub_22F10CF48(v15);
        v14 = *(_QWORD *)(v15 + 32);
LABEL_29:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) == 45)
          return v3;
      }
      return 0;
    }
  }
  return v3;
}

uint64_t sub_22EFD6DD0(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int i;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t *v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  BOOL v39;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t *v45;

  if ((*(_QWORD *)(a1 + 40) & 7) != 6)
    goto LABEL_101;
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 40) & 0xFFFFFFFFFFFFFFF8);
  if (v2 != 4 && v2 != 2)
    goto LABEL_101;
  v6 = *(_QWORD *)(a1 + 144) & 0xFFFFFFFFFFFFFFF8;
  v7 = (*(_QWORD *)(a1 + 144) & 6) != 4 || v6 == 0;
  if (!v7 && *(_QWORD *)(v6 + 16) > 7uLL)
    goto LABEL_101;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
    v9 = *(_BYTE *)(v8 + 16) == 26;
  else
    v9 = 0;
  if ((v9
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
     && (v8 = sub_22F10CF48(v8)) != 0)
    && (*(_QWORD *)(v8 + 16) & 0x3FFFC000000000) == 0x4000000000)
  {
LABEL_18:
    v10 = 1;
    return v10 & 1;
  }
  if (sub_22EFC06D0(a1))
    v11 = 2;
  else
    v11 = 1;
  v12 = a1;
  if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
  {
    v13 = *(_QWORD *)(a1 + 16);
    v14 = v13 & 0xFFFFFFFFFFFFFFF8;
    if ((v13 & 4) != 0)
      v14 = *(_QWORD *)v14;
    for (i = *(_WORD *)(v14 + 8) & 0x7F; i != 83; i = *(_WORD *)(v14 + 8) & 0x7F)
    {
      v16 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v16 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_38;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_37;
        if (i == 16)
          goto LABEL_31;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_44;
        if (i == 24)
        {
LABEL_31:
          v16 = -48;
        }
        else
        {
LABEL_37:
          if (i != 70)
          {
LABEL_38:
            v17 = i - 52;
            if ((i - 33) >= 5)
              v18 = -48;
            else
              v18 = -64;
            if (v17 >= 6)
              v16 = v18;
            else
              v16 = -72;
            goto LABEL_44;
          }
          v16 = -64;
        }
      }
LABEL_44:
      v19 = *(_QWORD *)(v14 + v16 + 16);
      v14 = v19 & 0xFFFFFFFFFFFFFFF8;
      if ((v19 & 4) != 0)
        v14 = *(_QWORD *)v14;
    }
    v12 = v14 - 40;
  }
  v20 = *(_QWORD *)(v12 + 88);
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v21)
    v22 = *(_BYTE *)(v21 + 16) == 26;
  else
    v22 = 0;
  if ((v22
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
     && (v21 = sub_22F10CF48(v21)) != 0)
    && v11 < (unsigned __int16)(*(_QWORD *)(v21 + 16) >> 38))
  {
    v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v11) + 48);
    if (*(_QWORD *)(*(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((sub_22EF67C8C(v20) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
      ++v11;
  }
  v24 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v24)
    v25 = *(_BYTE *)(v24 + 16) == 26;
  else
    v25 = 0;
  if (v25
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v24 = sub_22F10CF48(v24)) != 0)
  {
    v26 = (unsigned __int16)(*(_QWORD *)(v24 + 16) >> 38);
  }
  else
  {
    v26 = 0;
  }
  if (v11 < v26)
    v11 += sub_22F112268(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v11) + 48) & 0xFFFFFFFFFFFFFFF0));
  if ((v27 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0)) != 0 && *(_BYTE *)(v27 + 16) == 26
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v27 = sub_22F10CF48(v27)) != 0)
  {
    v28 = (unsigned __int16)(*(_QWORD *)(v27 + 16) >> 38);
  }
  else
  {
    v28 = 0;
  }
  if (v11 != v28)
  {
LABEL_101:
    v10 = 0;
    return v10 & 1;
  }
  v29 = *(_QWORD *)(v20 + 2000);
  if ((*(_BYTE *)(v29 + 1) & 8) != 0 || (*(_BYTE *)(v29 + 136) & 0x20) != 0 || (sub_22EFC06D0(a1) & 1) != 0)
    goto LABEL_18;
  v30 = *(_QWORD *)(a1 + 16);
  v31 = (_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF8);
  if ((v30 & 4) != 0)
    v31 = (_QWORD *)*v31;
  v32 = sub_22EFCE144((unint64_t)v31, *(_QWORD *)(a1 + 40));
  if (!v32)
    goto LABEL_18;
  v10 = 1;
  do
  {
    v33 = (unint64_t *)(v32 & 0xFFFFFFFFFFFFFFF8);
    v34 = (v32 & 0xFFFFFFFFFFFFFFF8) == 0 || (v32 & 4) == 0;
    v35 = v32 & 0xFFFFFFFFFFFFFFF8;
    if (!v34)
      v35 = *v33;
    if (v35 && (*(_DWORD *)(v35 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      v36 = *(_QWORD *)(*(_QWORD *)(v35 + 48) & 0xFFFFFFFFFFFFFFF0);
      v37 = v36 && *(_BYTE *)(v36 + 16) == 26;
      if (v37
        || (v43 = v35,
            v45 = v33,
            v41 = v34,
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
        && (v36 = sub_22F10CF48(v36), v35 = v43, v33 = v45, v34 = v41, v36))
      {
        if ((*(_QWORD *)(v36 + 16) & 0x3FFFC000000000) == 0x4000000000)
        {
          v38 = *(unsigned int *)(a2 + 8);
          if (v38 >= *(unsigned int *)(a2 + 12))
          {
            v42 = v35;
            v44 = v33;
            v39 = v34;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v35 = v42;
            v33 = v44;
            v34 = v39;
            v38 = *(unsigned int *)(a2 + 8);
          }
          v10 = 0;
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v38) = v35;
          ++*(_DWORD *)(a2 + 8);
        }
      }
    }
    if (v34)
      break;
    v32 = v33[1];
  }
  while (v32);
  return v10 & 1;
}

unint64_t sub_22EFD7260(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int i;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_DWORD *)(a1 + 28) & 0x7F;
  if (v1 == 55)
    return 0;
  v2 = a1;
  if (v1 != 83)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 4) != 0)
      v4 = *(_QWORD *)v4;
    for (i = *(_WORD *)(v4 + 8) & 0x7F; i != 83; i = *(_WORD *)(v4 + 8) & 0x7F)
    {
      v6 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v6 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_20;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_19;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_10;
        if (i == 24)
        {
LABEL_9:
          v6 = -48;
        }
        else
        {
LABEL_19:
          if (i != 70)
          {
LABEL_20:
            v8 = i - 52;
            if ((i - 33) >= 5)
              v9 = -48;
            else
              v9 = -64;
            if (v8 >= 6)
              v6 = v9;
            else
              v6 = -72;
            goto LABEL_10;
          }
          v6 = -64;
        }
      }
LABEL_10:
      v7 = *(_QWORD *)(v4 + v6 + 16);
      v4 = v7 & 0xFFFFFFFFFFFFFFF8;
      if ((v7 & 4) != 0)
        v4 = *(_QWORD *)v4;
    }
    v2 = v4 - 40;
  }
  v10 = sub_22EF5B234(*(_QWORD *)(v2 + 88), a1);
  return (unint64_t)(v11 - v10) >> 3;
}

uint64_t sub_22EFD7394(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int i;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v1 = *(_DWORD *)(a1 + 28) & 0x7F;
  if (v1 == 55)
    return 0;
  v2 = a1;
  if (v1 != 83)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 4) != 0)
      v4 = *(_QWORD *)v4;
    for (i = *(_WORD *)(v4 + 8) & 0x7F; i != 83; i = *(_WORD *)(v4 + 8) & 0x7F)
    {
      v6 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v6 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_20;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_19;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_10;
        if (i == 24)
        {
LABEL_9:
          v6 = -48;
        }
        else
        {
LABEL_19:
          if (i != 70)
          {
LABEL_20:
            v8 = i - 52;
            if ((i - 33) >= 5)
              v9 = -48;
            else
              v9 = -64;
            if (v8 >= 6)
              v6 = v9;
            else
              v6 = -72;
            goto LABEL_10;
          }
          v6 = -64;
        }
      }
LABEL_10:
      v7 = *(_QWORD *)(v4 + v6 + 16);
      v4 = v7 & 0xFFFFFFFFFFFFFFF8;
      if ((v7 & 4) != 0)
        v4 = *(_QWORD *)v4;
    }
    v2 = v4 - 40;
  }
  return sub_22EF5B234(*(_QWORD *)(v2 + 88), a1);
}

uint64_t sub_22EFD74C4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 + 48);
  if (v5)
    v6 = v5 & 0xFFFFFFFFFFFFFFF0;
  else
    v6 = sub_22EF6462C(a1, a3);
  v7 = sub_22E47E1B0(a2);
  if ((v7 & 0xCFFFFFFF8) == 0)
    return v7 & 7 | v6;
  v10 = v7;
  v8 = sub_22E491354((unsigned int *)&v10, v6);
  return sub_22EF5DBC4(a1, v8, v10);
}

unint64_t sub_22EFD7558(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v1)
    v2 = *(_BYTE *)(v1 + 16) == 26;
  else
    v2 = 0;
  if (!v2)
  {
    v22 = a1;
    v1 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0));
    a1 = v22;
  }
  v3 = *(_WORD *)(a1 + 80) & 0x7F;
  v4 = -40;
  if (v3 > 0x46)
  {
    if (v3 == 83)
      goto LABEL_10;
    if (v3 == 71)
    {
      v4 = -56;
      goto LABEL_10;
    }
    if (v3 != 81)
    {
LABEL_49:
      v19 = v3 - 52;
      v20 = v3 - 33 >= 5;
      v21 = -48;
      if (!v20)
        v21 = -64;
      if (v19 >= 6)
        v4 = v21;
      else
        v4 = -72;
    }
  }
  else
  {
    if (v3 > 0x18)
      goto LABEL_48;
    if (v3 == 16)
    {
LABEL_9:
      v4 = -48;
      goto LABEL_10;
    }
    if (((1 << v3) & 0x1066) == 0)
    {
      if (v3 == 24)
        goto LABEL_9;
LABEL_48:
      if (v3 == 70)
      {
        v4 = -64;
        goto LABEL_10;
      }
      goto LABEL_49;
    }
  }
LABEL_10:
  v5 = *(_QWORD *)(a1 + 72 + v4 + 16);
  v6 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 4) != 0)
    v6 = (_QWORD *)*v6;
  v7 = v6 - 8;
  if (v6)
    v8 = (unint64_t)(v6 - 8);
  else
    v8 = 0;
  if (!v6 || (*(_DWORD *)(v8 + 28) & 0x7F) != 0x53)
  {
    v9 = *(_QWORD *)(v8 + 16);
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 4) != 0)
      v10 = *(_QWORD *)v10;
    for (i = *(_WORD *)(v10 + 8) & 0x7F; i != 83; i = *(_WORD *)(v10 + 8) & 0x7F)
    {
      v12 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v12 = -56;
          goto LABEL_24;
        }
        if (i == 81)
          goto LABEL_24;
      }
      else
      {
        if (i <= 0x18)
        {
          if (i == 16)
            goto LABEL_23;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_24;
          if (i == 24)
          {
LABEL_23:
            v12 = -48;
            goto LABEL_24;
          }
        }
        if (i == 70)
        {
          v12 = -64;
          goto LABEL_24;
        }
      }
      v14 = i - 52;
      if ((i - 33) >= 5)
        v15 = -48;
      else
        v15 = -64;
      if (v14 >= 6)
        v12 = v15;
      else
        v12 = -72;
LABEL_24:
      v13 = *(_QWORD *)(v10 + v12 + 16);
      v10 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        v10 = *(_QWORD *)v10;
    }
    v7 = (_QWORD *)(v10 - 40);
  }
  v16 = v7[11];
  v17 = sub_22EFD74C4(v16, v1, v8);
  return sub_22EF5B848(v16, v17, 0);
}

uint64_t sub_22EFD7784(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v1)
    v2 = *(_BYTE *)(v1 + 16) == 26;
  else
    v2 = 0;
  if (!v2)
  {
    v20 = a1;
    v1 = sub_22F10CF48(v1);
    a1 = v20;
  }
  v3 = *(_WORD *)(a1 + 80) & 0x7F;
  v4 = -40;
  if (v3 > 0x46)
  {
    if (v3 == 83)
      goto LABEL_10;
    if (v3 == 71)
    {
      v4 = -56;
      goto LABEL_10;
    }
    if (v3 != 81)
    {
LABEL_49:
      v17 = v3 - 52;
      v18 = v3 - 33 >= 5;
      v19 = -48;
      if (!v18)
        v19 = -64;
      if (v17 >= 6)
        v4 = v19;
      else
        v4 = -72;
    }
  }
  else
  {
    if (v3 > 0x18)
      goto LABEL_48;
    if (v3 == 16)
    {
LABEL_9:
      v4 = -48;
      goto LABEL_10;
    }
    if (((1 << v3) & 0x1066) == 0)
    {
      if (v3 == 24)
        goto LABEL_9;
LABEL_48:
      if (v3 == 70)
      {
        v4 = -64;
        goto LABEL_10;
      }
      goto LABEL_49;
    }
  }
LABEL_10:
  v5 = *(_QWORD *)(a1 + 72 + v4 + 16);
  v6 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 4) != 0)
    v6 = (_QWORD *)*v6;
  v7 = v6 - 8;
  if (v6)
    v8 = (unint64_t)(v6 - 8);
  else
    v8 = 0;
  if (!v6 || (*(_DWORD *)(v8 + 28) & 0x7F) != 0x53)
  {
    v9 = *(_QWORD *)(v8 + 16);
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 4) != 0)
      v10 = *(_QWORD *)v10;
    for (i = *(_WORD *)(v10 + 8) & 0x7F; i != 83; i = *(_WORD *)(v10 + 8) & 0x7F)
    {
      v12 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v12 = -56;
          goto LABEL_24;
        }
        if (i == 81)
          goto LABEL_24;
      }
      else
      {
        if (i <= 0x18)
        {
          if (i == 16)
            goto LABEL_23;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_24;
          if (i == 24)
          {
LABEL_23:
            v12 = -48;
            goto LABEL_24;
          }
        }
        if (i == 70)
        {
          v12 = -64;
          goto LABEL_24;
        }
      }
      v14 = i - 52;
      if ((i - 33) >= 5)
        v15 = -48;
      else
        v15 = -64;
      if (v14 >= 6)
        v12 = v15;
      else
        v12 = -72;
LABEL_24:
      v13 = *(_QWORD *)(v10 + v12 + 16);
      v10 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        v10 = *(_QWORD *)v10;
    }
    v7 = (_QWORD *)(v10 - 40);
  }
  return sub_22EFD74C4(v7[11], v1, v8);
}

BOOL sub_22EFD799C(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v1 = *(_WORD *)(a1 + 80) & 0x7F;
  v2 = -40;
  if (v1 > 0x46)
  {
    if (v1 == 83)
      goto LABEL_5;
    if (v1 == 71)
    {
      v2 = -56;
      goto LABEL_5;
    }
    if (v1 != 81)
    {
LABEL_20:
      v8 = v1 - 52;
      v9 = v1 - 33 >= 5;
      v10 = -48;
      if (!v9)
        v10 = -64;
      if (v8 >= 6)
        v2 = v10;
      else
        v2 = -72;
    }
  }
  else
  {
    if (v1 > 0x18)
      goto LABEL_19;
    if (v1 == 16)
    {
LABEL_4:
      v2 = -48;
      goto LABEL_5;
    }
    if (((1 << v1) & 0x1066) == 0)
    {
      if (v1 == 24)
        goto LABEL_4;
LABEL_19:
      if (v1 == 70)
      {
        v2 = -64;
        goto LABEL_5;
      }
      goto LABEL_20;
    }
  }
LABEL_5:
  v3 = *(_QWORD *)(a1 + 72 + v2 + 16);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  if (v4)
    v5 = v4 - 8;
  else
    v5 = 0;
  v6 = v5[16];
  if (v6
    && ((*(unsigned __int16 *)(v6 + 8) | (*(unsigned __int8 *)(v6 + 10) << 16)) & 0x100000) != 0
    && (v11 = *(_QWORD *)(a1 + 40), (v11 & 7) == 0)
    && (v12 = v11 & 0xFFFFFFFFFFFFFFF8) != 0
    && (v13 = *(_QWORD *)(v12 + 16), *(_DWORD *)v13 == 8))
  {
    return *(_QWORD *)(v13 + 16) == 0x656B6F766E695F5FLL;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22EFD7AC8(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7)
{
  *(_QWORD *)result = a3 & 0xFFFFFFFFFFFFFFF9 | 2;
  *(_QWORD *)(result + 8) = a6;
  *(_DWORD *)(result + 16) = a4;
  *(_DWORD *)(result + 20) = a5;
  *(_DWORD *)(result + 24) = a7;
  *(_WORD *)(result + 28) = 0;
  return result;
}

uint64_t sub_22EFD7AE4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *a1;
  v2 = *a1 & 6;
  if (*(_BYTE *)a1[1] == 121)
  {
    v3 = v1 & 0xFFFFFFFFFFFFFFF8;
    if (v2 != 2)
      v3 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * *(unsigned int *)(v3 + 64) - 8);
    return *(unsigned int *)(v3 + 24);
  }
  else if (v2 == 4 || v2 == 2)
  {
    return *((unsigned int *)a1 + 4);
  }
  else if ((v1 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    return sub_22F115668(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8));
  }
  else
  {
    return 0;
  }
}

unint64_t sub_22EFD7B58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;

  if (**(_BYTE **)(a1 + 8) == 121)
  {
    v2 = *(_QWORD *)a1;
    v3 = *(_QWORD *)a1 & 6;
    if (v3 == 4)
    {
      v4 = *(_QWORD *)(*(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFF8) + 56)
                     + 8 * *(unsigned int *)((v2 & 0xFFFFFFFFFFFFFFF8) + 64)
                     - 8);
    }
    else
    {
      v4 = v2 & 0xFFFFFFFFFFFFFFF8;
      if (v3 != 2)
        v4 = 0;
    }
    v7 = *(_QWORD *)(v4 + 72) & 3;
    if ((_DWORD)v7)
      v8 = (_DWORD)v7 == 3;
    else
      v8 = 1;
    if (v8)
    {
      v6 = 0;
      LODWORD(v5) = 0;
    }
    else
    {
      v5 = *(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFFFFCLL;
      if ((*(_BYTE *)(v4 + 68) & 1) != 0)
        v5 = *(_QWORD *)v5;
      if (v5)
      {
        sub_22F0D4E74(v5);
        v6 = HIDWORD(v5);
      }
      else
      {
        v6 = 0;
      }
    }
  }
  else
  {
    LODWORD(v5) = sub_22EFD7AE4((uint64_t *)a1);
    v6 = *(unsigned int *)(a1 + 24);
  }
  return v5 | (v6 << 32);
}

unint64_t sub_22EFD7C14(unint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7, unint64_t a8, char a9, char a10, char a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v20;
  unint64_t result;
  unint64_t v22;
  int v23;
  unint64_t v24;

  if (a3)
    v20 = a3 + 64;
  else
    v20 = 0;
  result = sub_22EFBF4FC(a1, 55, a2, v20, a4, a5, a6, a7, 0, 0, a9, a10, a12, a15);
  *(_QWORD *)result = &off_24FAC37B0;
  *(_QWORD *)(result + 160) = 0;
  v22 = *(_QWORD *)(result + 80) & 0x800000FFFFFFFFFFLL;
  if (a11)
    v23 = 512;
  else
    v23 = 0;
  *(_DWORD *)(result + 28) = *(_DWORD *)(result + 28) & 0xFFFFFDFF | v23;
  v24 = ((unint64_t)(a8 > 3) << 62) | ((unint64_t)(a13 != 0) << 61) | v22;
  *(_QWORD *)(result + 80) = v24;
  if (a13)
  {
    *(_QWORD *)(result + 168) = a13;
    *(_QWORD *)(result + 176) = a14;
  }
  if (a8 >= 4)
    *(_QWORD *)(*(_QWORD *)(result + 112) + 16 * ((*(_QWORD *)(*(_QWORD *)(result + 112) + 80) >> 61) & 1) + 168) = a8;
  else
    *(_QWORD *)(result + 80) = v24 & 0x600000FFFFFFFFFFLL | ((unint64_t)(a8 == 1) << 63);
  return result;
}

unint64_t sub_22EFD7D3C(uint64_t a1, int a2, unsigned int a3)
{
  char v3;
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  uint64_t v9[3];

  v3 = a3;
  v6 = sub_22E3CD3D4(a1 + 2032, ((__rbit32(a3) >> 27) & 0x18) + 176, 3);
  *(_DWORD *)v6 = 0;
  *(_DWORD *)(v6 + 4) = a2;
  memset(v9, 0, sizeof(v9));
  result = sub_22EFBF4FC(v6 + 8, 55, a1, 0, 0, v9, 0, 0, 0, 0, 0, 0, 0, 0);
  *(_QWORD *)(v6 + 8) = &off_24FAC37B0;
  *(_QWORD *)(v6 + 168) = 0;
  v8 = *(_QWORD *)(v6 + 88);
  *(_DWORD *)(v6 + 36) &= ~0x200u;
  *(_QWORD *)(v6 + 88) = v8 & 0xFFFFFFFFFFLL | ((unint64_t)(v3 & 3) << 61);
  return result;
}

unint64_t sub_22EFD7DFC(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, uint64_t a6, unint64_t a7, char a8, char a9, char a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v18;
  unint64_t v19;

  if (a2)
    v18 = a2 + 64;
  else
    v18 = 0;
  v19 = sub_22EFC7430(168, a1, v18, (8 * (a7 > 3)) | (16 * (a12 != 0)));
  return sub_22EFD7C14(v19, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

unint64_t sub_22EFD7ED0(unint64_t a1)
{
  unint64_t v1;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 160);
  if ((v1 & 1) != 0)
  {
    v4 = sub_22EFC72E8(a1);
    v1 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v4 + 16048) + 48))(*(_QWORD *)(v4 + 16048), v1 >> 1);
    *(_QWORD *)(a1 + 160) = v1;
  }
  return v1;
}

uint64_t sub_22EFD7F1C(unint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int i;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;

  v2 = *(_QWORD *)(a1 + 160);
  if ((v2 & 1) != 0)
  {
    v3 = a1;
    if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
    {
      v4 = *(_QWORD *)(a1 + 16);
      v5 = v4 & 0xFFFFFFFFFFFFFFF8;
      if ((v4 & 4) != 0)
        v5 = *(_QWORD *)v5;
      for (i = *(_WORD *)(v5 + 8) & 0x7F; i != 83; i = *(_WORD *)(v5 + 8) & 0x7F)
      {
        v7 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v7 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_16;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_15;
          if (i == 16)
            goto LABEL_9;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_22;
          if (i == 24)
          {
LABEL_9:
            v7 = -48;
          }
          else
          {
LABEL_15:
            if (i != 70)
            {
LABEL_16:
              v8 = i - 52;
              if ((i - 33) >= 5)
                v9 = -48;
              else
                v9 = -64;
              if (v8 >= 6)
                v7 = v9;
              else
                v7 = -72;
              goto LABEL_22;
            }
            v7 = -64;
          }
        }
LABEL_22:
        v10 = *(_QWORD *)(v5 + v7 + 16);
        v5 = v10 & 0xFFFFFFFFFFFFFFF8;
        if ((v10 & 4) != 0)
          v5 = *(_QWORD *)v5;
      }
      v3 = v5 - 40;
    }
    v2 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v3 + 88) + 16048) + 48))(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 16048), v2 >> 1);
    *(_QWORD *)(a1 + 160) = v2;
  }
  v11 = sub_22EFFED0C(*(unsigned __int8 **)(*(_QWORD *)v2 + 8));
  if ((*v11 & 0xFE) == 0x76)
    return *((_QWORD *)v11 + 2);
  else
    return 0;
}

uint64_t sub_22EFD8088(uint64_t a1, int *a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  BOOL v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int i;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;

  result = sub_22EFC10B0(a1);
  if (!(_DWORD)result)
    return result;
  v5 = *(_QWORD *)(a1 + 144) & 6;
  v6 = *(_QWORD *)(a1 + 144) & 0xFFFFFFFFFFFFFFF8;
  if (v5 != 4 || v6 == 0)
  {
    if (v5)
      v8 = 1;
    else
      v8 = v6 == 0;
    if (!v8)
      return 0;
  }
  else if (*(_QWORD *)(v6 + 16) >= 8uLL)
  {
    return 0;
  }
  result = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 120) + 48) & 0xFFFFFFFFFFFFFFF0);
  if (result)
  {
    v9 = *(_DWORD *)(result + 16);
    if ((v9 & 0xFE) == 0x28)
    {
LABEL_14:
      v10 = a1;
      if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
      {
        v11 = *(_QWORD *)(a1 + 16);
        v12 = v11 & 0xFFFFFFFFFFFFFFF8;
        if ((v11 & 4) != 0)
          v12 = *(_QWORD *)v12;
        for (i = *(_WORD *)(v12 + 8) & 0x7F; i != 83; i = *(_WORD *)(v12 + 8) & 0x7F)
        {
          v14 = -40;
          if (i > 70)
          {
            if (i == 71)
            {
              v14 = -56;
            }
            else if (i != 81)
            {
              goto LABEL_32;
            }
          }
          else
          {
            if (i > 0x18)
              goto LABEL_31;
            if (i == 16)
              goto LABEL_21;
            if (((1 << i) & 0x1066) != 0)
              goto LABEL_22;
            if (i == 24)
            {
LABEL_21:
              v14 = -48;
            }
            else
            {
LABEL_31:
              if (i != 70)
              {
LABEL_32:
                v16 = i - 52;
                if ((i - 33) >= 5)
                  v17 = -48;
                else
                  v17 = -64;
                if (v16 >= 6)
                  v14 = v17;
                else
                  v14 = -72;
                goto LABEL_22;
              }
              v14 = -64;
            }
          }
LABEL_22:
          v15 = *(_QWORD *)(v12 + v14 + 16);
          v12 = v15 & 0xFFFFFFFFFFFFFFF8;
          if ((v15 & 4) != 0)
            v12 = *(_QWORD *)v12;
        }
        v10 = v12 - 40;
      }
      v18 = *(_QWORD *)(v10 + 88);
      if ((v9 & 0x100000) != 0)
      {
        v32 = v18;
        do
        {
          result = *(_QWORD *)(*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0);
          if (!result || (v31 = *(_DWORD *)(result + 16), (v31 & 0xFE) != 0x28))
          {
            result = sub_22F10CF48(result);
            v31 = *(_DWORD *)(result + 16);
          }
          v18 = v32;
        }
        while ((v31 & 0x100000) != 0);
      }
      v19 = *(_QWORD *)(result + 32);
      v20 = *(_WORD *)(a1 + 80) & 0x7F;
      v21 = -40;
      if (v20 > 0x46)
      {
        if (v20 != 83)
        {
          if (v20 == 71)
          {
            v21 = -56;
            goto LABEL_44;
          }
          if (v20 == 81)
            goto LABEL_44;
LABEL_63:
          v28 = v20 - 52;
          v29 = v20 - 33 >= 5;
          v30 = -48;
          if (!v29)
            v30 = -64;
          if (v28 >= 6)
            v21 = v30;
          else
            v21 = -72;
        }
      }
      else
      {
        if (v20 > 0x18)
          goto LABEL_62;
        if (v20 != 16)
        {
          if (((1 << v20) & 0x1066) != 0)
            goto LABEL_44;
          if (v20 != 24)
          {
LABEL_62:
            if (v20 == 70)
            {
              v21 = -64;
              goto LABEL_44;
            }
            goto LABEL_63;
          }
        }
        v21 = -48;
      }
LABEL_44:
      v22 = *(_QWORD *)(a1 + 72 + v21 + 16);
      v23 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF8);
      if ((v22 & 4) != 0)
        v23 = (_QWORD *)*v23;
      v24 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFF0) + 8);
      if (v23)
        v25 = (unint64_t)(v23 - 8);
      else
        v25 = 0;
      v26 = *(_QWORD *)(v25 + 48);
      if (v26)
      {
        v27 = v26 & 0xFFFFFFFFFFFFFFF0;
      }
      else
      {
        v33 = *(_QWORD *)(result + 32);
        v27 = sub_22EF6462C(v18, v25);
        LOBYTE(v19) = v33;
      }
      if ((*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0) != (v27 & 7 | *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFF0) + 8)))
        return 0;
      *a2 = (v24 | v19) & 7;
      return 1;
    }
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
    return 0;
  result = sub_22F10CF48(result);
  if (result)
  {
    v9 = *(_DWORD *)(result + 16);
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_22EFD83B0(uint64_t a1, int *a2)
{
  uint64_t result;

  result = sub_22EFD8088(a1, a2);
  if ((_DWORD)result)
    return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 120) + 48) & 0xFFFFFFFFFFFFFFF0)
                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                              + 16) == 41;
  return result;
}

BOOL sub_22EFD8400(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(v2 + 80);
  if ((v3 & 0x4000000000000000) != 0)
    v4 = *(_QWORD *)(v2 + 16 * ((v3 >> 61) & 1) + 168) & 3;
  else
    v4 = v3 >> 63;
  if (v4 == 1 && a2 == 0)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v6)
    v7 = *(_BYTE *)(v6 + 16) == 26;
  else
    v7 = 0;
  if (v7
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v11 = a1, v6 = sub_22F10CF48(v6), a1 = v11, v6))
  {
    if ((*(_DWORD *)(v6 + 20) & 0x3FFFC0) != 0)
      return sub_22EFC0EB8(a1) < 2;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v9)
    v10 = *(_BYTE *)(v9 + 16) == 26;
  else
    v10 = 0;
  if (!v10)
    v9 = sub_22F10CF48(v9);
  return (*(unsigned __int8 *)(v9 + 23) >> 3) & 1;
}

uint64_t sub_22EFD84E0(uint64_t a1)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;

  result = sub_22EFC10B0(a1);
  if (!(_DWORD)result)
    return result;
  if (*(_QWORD *)(a1 + 144) >= 8uLL && (*(_QWORD *)(a1 + 144) & 6) == 0)
    return 0;
  v4 = a1;
  if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v6 = *(_QWORD *)v6;
    for (i = *(_WORD *)(v6 + 8) & 0x7F; i != 83; i = *(_WORD *)(v6 + 8) & 0x7F)
    {
      v8 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v8 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_24;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_23;
        if (i == 16)
          goto LABEL_13;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_14;
        if (i == 24)
        {
LABEL_13:
          v8 = -48;
        }
        else
        {
LABEL_23:
          if (i != 70)
          {
LABEL_24:
            v10 = i - 52;
            if ((i - 33) >= 5)
              v11 = -48;
            else
              v11 = -64;
            if (v10 >= 6)
              v8 = v11;
            else
              v8 = -72;
            goto LABEL_14;
          }
          v8 = -64;
        }
      }
LABEL_14:
      v9 = *(_QWORD *)(v6 + v8 + 16);
      v6 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) != 0)
        v6 = *(_QWORD *)v6;
    }
    v4 = v6 - 40;
  }
  v12 = *(_WORD *)(a1 + 80) & 0x7F;
  v13 = -40;
  if (v12 > 0x46)
  {
    if (v12 != 83)
    {
      if (v12 == 71)
      {
        v13 = -56;
        goto LABEL_35;
      }
      if (v12 == 81)
        goto LABEL_35;
LABEL_51:
      v20 = v12 - 52;
      v21 = v12 - 33 >= 5;
      v22 = -48;
      if (!v21)
        v22 = -64;
      if (v20 >= 6)
        v13 = v22;
      else
        v13 = -72;
    }
  }
  else
  {
    if (v12 > 0x18)
      goto LABEL_50;
    if (v12 != 16)
    {
      if (((1 << v12) & 0x1066) != 0)
        goto LABEL_35;
      if (v12 != 24)
      {
LABEL_50:
        if (v12 == 70)
        {
          v13 = -64;
          goto LABEL_35;
        }
        goto LABEL_51;
      }
    }
    v13 = -48;
  }
LABEL_35:
  v14 = *(_QWORD *)(a1 + 72 + v13 + 16);
  v15 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8);
  if ((v14 & 4) != 0)
    v15 = (_QWORD *)*v15;
  v16 = *(_QWORD *)((*(_QWORD *)(**(_QWORD **)(a1 + 120) + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
  if (v15)
    v17 = (unint64_t)(v15 - 8);
  else
    v17 = 0;
  v18 = *(_QWORD *)(v17 + 48);
  if (v18)
    v19 = v18 & 0xFFFFFFFFFFFFFFF0;
  else
    v19 = sub_22EF6462C(*(_QWORD *)(v4 + 88), v17);
  return (*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0) == (v19 & 7 | *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFF0)
                                                                                                  + 8));
}

unint64_t sub_22EFD8738(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, uint64_t a6, char a7, char a8, char a9, int a10, uint64_t a11)
{
  uint64_t v18;
  unint64_t v19;
  unint64_t result;
  int v21;

  if (a2)
    v18 = a2 + 64;
  else
    v18 = 0;
  v19 = sub_22EFC7430(176, a1, v18, 0);
  result = sub_22EFBF4FC(v19, 57, a1, v18, a3, a4, a5, a6, 0, 0, a7, a8, a10, a11);
  *(_QWORD *)result = &off_24FAC3BD8;
  *(_QWORD *)(result + 160) = 0;
  *(_QWORD *)(result + 168) = 0;
  if (a9)
    v21 = 512;
  else
    v21 = 0;
  *(_DWORD *)(result + 28) = *(_DWORD *)(result + 28) & 0xFFFFFDFF | v21;
  return result;
}

unint64_t sub_22EFD8828(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6[3];

  v4 = sub_22E3CD3D4(a1 + 2032, 176, 3);
  *(_DWORD *)v4 = 0;
  *(_DWORD *)(v4 + 4) = a2;
  memset(v6, 0, sizeof(v6));
  result = sub_22EFBF4FC(v4 + 8, 56, a1, 0, 0, v6, 0, 0, 0, 0, 0, 0, 0, 0);
  *(_QWORD *)(v4 + 8) = &off_24FAC3C50;
  *(_QWORD *)(v4 + 168) = 0;
  return result;
}

unint64_t sub_22EFD88BC(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, uint64_t a6, char a7, char a8, uint64_t a9, int a10, int a11, int a12, uint64_t a13)
{
  uint64_t v19;
  unint64_t v20;
  unint64_t result;

  if (a2)
    v19 = a2 + 64;
  else
    v19 = 0;
  v20 = sub_22EFC7430(168, a1, v19, 0);
  result = sub_22EFBF4FC(v20, 56, a1, v19, a3, a4, a5, a6, 0, 0, a7, a8, a10, a13);
  if (a12)
    *(_DWORD *)(result + 140) = a12;
  *(_QWORD *)result = &off_24FAC3C50;
  *(_QWORD *)(result + 160) = a9;
  return result;
}

uint64_t sub_22EFD899C(uint64_t a1, uint64_t a2, int a3, int a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t result;
  int v13;

  v11 = sub_22EFC7430(80, a1, a2, 0);
  result = sub_22EA41AB8(v11, 12, a2, a4);
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_WORD *)(result + 48) = *(_WORD *)(result + 48) & 0xE000 | 0xC;
  *(_QWORD *)result = &off_24FAC3828;
  *(_DWORD *)(result + 72) = a3;
  *(_DWORD *)(result + 76) = 0;
  if (a6)
    v13 = 0x10000;
  else
    v13 = 0;
  *(_DWORD *)(result + 48) = v13 & 0xFFFF1FFF | ((a5 & 7) << 13) | *(_DWORD *)(result + 48) & 0xFFFE1FFF;
  return result;
}

uint64_t sub_22EFD8A44(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_22E3CD3D4(a1 + 2032, 88, 3);
  *(_DWORD *)v3 = 0;
  *(_DWORD *)(v3 + 4) = a2;
  result = sub_22EA41AB8(v3 + 8, 12, 0, 0);
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_WORD *)(v3 + 56) = *(_WORD *)(v3 + 56) & 0xE000 | 0xC;
  *(_QWORD *)(v3 + 8) = &off_24FAC3828;
  *(_QWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 56) = *(_DWORD *)(v3 + 56) & 0xFFFE1FFF | 0x2000;
  return result;
}

uint64_t sub_22EFD8AC4(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, unint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v16;
  _BYTE *v17;
  uint64_t result;

  v9 = a8;
  if (a8 && (*(_DWORD *)(a8 + 28) & 0x7F) == 0x10 && (*(_BYTE *)(a8 + 80) & 3) == 0)
    v9 = *(_QWORD *)(a8 + 104) & 0xFFFFFFFFFFFFFFF8;
  v16 = sub_22EFC7430(88, a1, a2, 0);
  v17 = sub_22E79390C();
  result = sub_22EA41AB8(v16, 44, a2, a7);
  *(_QWORD *)(v16 + 40) = v17;
  *(_QWORD *)v16 = &off_24FAC3CC8;
  *(_DWORD *)(v16 + 48) = a3;
  *(_DWORD *)(v16 + 52) = a4;
  *(_QWORD *)(v16 + 56) = a5;
  *(_QWORD *)(v16 + 64) = a6;
  *(_QWORD *)(v16 + 72) = v9;
  *(_QWORD *)(v16 + 80) = a9;
  return result;
}

unint64_t sub_22EFD8B98(unint64_t result)
{
  if ((*(_BYTE *)(result + 80) & 3) == 0)
    return *(_QWORD *)(result + 104) & 0xFFFFFFFFFFFFFFF8;
  return result;
}

uint64_t sub_22EFD8BB4(uint64_t a1)
{
  uint64_t result;
  BOOL v2;

  result = *(_QWORD *)(a1 + 72);
  if (result && (*(_DWORD *)(result + 28) & 0x7F) == 0x11)
  {
    do
    {
      result = *(_QWORD *)(result + 88);
      if (result)
        v2 = (*(_DWORD *)(result + 28) & 0x7F) == 17;
      else
        v2 = 0;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_22EFD8BEC(uint64_t a1, int a2)
{
  uint64_t v4;

  v4 = sub_22E3CD3D4(a1 + 2032, 120, 3);
  *(_DWORD *)v4 = 0;
  *(_DWORD *)(v4 + 4) = a2;
  sub_22EA41AB8(v4 + 8, 16, 0, 0);
  *(_QWORD *)(v4 + 88) = a1 | 2;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_WORD *)(v4 + 64) = *(_WORD *)(v4 + 64) & 0xE000 | 0x10;
  *(_QWORD *)(v4 + 8) = &off_24FAC3890;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 96) = v4 + 8;
  sub_22E7B7A74(v4 + 88, v4 + 8);
  return v4 + 8;
}

unint64_t sub_22EFD8C88(unint64_t result)
{
  if ((*(_BYTE *)(result + 80) & 3) == 0)
    return *(_QWORD *)(result + 104) & 0xFFFFFFFFFFFFFFF8;
  return result;
}

unint64_t sub_22EFD8CA0(uint64_t a1)
{
  return sub_22E3CD31C((uint64_t *)(a1 + 80), a1);
}

unint64_t sub_22EFD8CAC(uint64_t a1)
{
  uint64_t *v2;
  char v3;

  v3 = *(_BYTE *)(a1 + 80);
  v2 = (uint64_t *)(a1 + 80);
  if ((v3 & 3) != 0)
    return 0;
  else
    return sub_22E3CD31C(v2, a1);
}

unint64_t sub_22EFD8CC8(uint64_t a1)
{
  return sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 88) + 80), *(_QWORD *)(a1 + 88));
}

uint64_t sub_22EFD8CD4(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, unint64_t a9)
{
  unint64_t v17;
  uint64_t v18;
  uint64_t result;

  v17 = a9;
  if (a9 && (*(_DWORD *)(a9 + 28) & 0x7F) == 0x10 && (*(_BYTE *)(a9 + 80) & 3) == 0)
    v17 = *(_QWORD *)(a9 + 104) & 0xFFFFFFFFFFFFFFF8;
  v18 = sub_22EFC7430(96, a1, a2, 0);
  result = sub_22EA41AB8(v18, 17, a2, a4);
  *(_QWORD *)(result + 40) = a5;
  *(_QWORD *)(result + 48) = a1 | 2;
  *(_QWORD *)(result + 56) = result;
  *(_QWORD *)result = &off_24FAC3D40;
  *(_DWORD *)(result + 64) = a3;
  *(_DWORD *)(result + 68) = a8;
  *(_QWORD *)(result + 72) = a6;
  *(_QWORD *)(result + 80) = a7;
  *(_QWORD *)(result + 88) = v17;
  return result;
}

uint64_t sub_22EFD8DA0(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFFFF8;
  if (v2 == a2)
  {
    v7 = *(_QWORD *)(a2 + 72);
    v4 = (_QWORD *)(a2 + 72);
    v6 = v7;
    if ((*(_DWORD *)(v7 + 28) & 0x7E) != 0x2E)
      v6 = 0;
    *(_QWORD *)(result + 48) = v6 | *(_QWORD *)(result + 48) & 7;
  }
  else
  {
    do
    {
      v3 = v2;
      v2 = *(_QWORD *)(v2 + 72);
    }
    while (v2 != a2);
    v5 = *(_QWORD *)(a2 + 72);
    v4 = (_QWORD *)(a2 + 72);
    *(_QWORD *)(v3 + 72) = v5;
  }
  *v4 = result;
  return result;
}

uint64_t *sub_22EFD8DF4(unint64_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int i;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 *j;
  unsigned int v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t *v23;
  uint64_t k;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  _DWORD *v35;
  uint64_t v36;
  _OWORD *v37;
  _OWORD *v38;
  uint64_t v39;
  unsigned int v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int m;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[2];
  _QWORD v56[3];
  int v57;
  _QWORD v58[2];
  _QWORD v59[2];
  _QWORD v60[2];
  __int128 v61;
  __int128 v62;
  _BYTE v63[24];
  _QWORD *v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)(a1 + 80);
  if (!*(_DWORD *)(a1 + 80))
  {
    v2 = a1;
    v3 = a1;
    if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
    {
      v4 = *(_QWORD *)(a1 + 16);
      v5 = v4 & 0xFFFFFFFFFFFFFFF8;
      if ((v4 & 4) != 0)
        v5 = *(_QWORD *)v5;
      for (i = *(_WORD *)(v5 + 8) & 0x7F; i != 83; i = *(_WORD *)(v5 + 8) & 0x7F)
      {
        v7 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v7 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_16;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_15;
          if (i == 16)
            goto LABEL_9;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_22;
          if (i == 24)
          {
LABEL_9:
            v7 = -48;
          }
          else
          {
LABEL_15:
            if (i != 70)
            {
LABEL_16:
              v8 = i - 52;
              if ((i - 33) >= 5)
                v9 = -48;
              else
                v9 = -64;
              if (v8 >= 6)
                v7 = v9;
              else
                v7 = -72;
              goto LABEL_22;
            }
            v7 = -64;
          }
        }
LABEL_22:
        v10 = *(_QWORD *)(v5 + v7 + 16);
        v5 = v10 & 0xFFFFFFFFFFFFFFF8;
        if ((v10 & 4) != 0)
          v5 = *(_QWORD *)v5;
      }
      v3 = v5 - 40;
    }
    v11 = *(_QWORD *)(a1 + 48);
    v60[0] = *(_QWORD *)(v3 + 88);
    v60[1] = 32;
    *(_QWORD *)&v61 = sub_22EFD9BD8;
    *((_QWORD *)&v61 + 1) = v60;
    v59[0] = v60[0];
    v59[1] = 16;
    *(_QWORD *)&v62 = sub_22EFD9BD8;
    *((_QWORD *)&v62 + 1) = v59;
    v58[0] = v60[0];
    v58[1] = 16;
    *(_QWORD *)v63 = sub_22EFD9BD8;
    *(_QWORD *)&v63[8] = v58;
    v55[0] = v60[0];
    v55[1] = 8;
    v56[0] = v60[0];
    v56[1] = sub_22EFD9BD8;
    v56[2] = v55;
    v57 = 8;
    *(_QWORD *)&v63[16] = sub_22EFD9C20;
    v64 = v56;
    v12 = sub_22F10C2A4(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0));
    if (v12)
    {
      if ((*(_DWORD *)(v12 + 28) & 0x7Eu) - 34 <= 3 && (*(_DWORD *)(v12 + 72) & 0xE000) != 0x4000)
      {
        v14 = sub_22EFC3500(v12);
        if (v14)
        {
          v15 = v14;
          if ((*(_DWORD *)(v14 + 28) & 0x7Fu) - 38 < 0xFFFFFFFD
            || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v14 + 104) + 96), *(_QWORD *)(v14 + 104)),
                !*(_DWORD *)(*(_QWORD *)(v15 + 128) + 16)))
          {
            v16 = sub_22EFC3B90(v15);
            if (v16)
            {
              v17 = v16;
              v18 = 0;
              for (j = &v61; ; j = &v61 + v18)
              {
                if ((*(_BYTE *)(v17 + 68) & 1) == 0)
                {
                  if (v18 != 4)
                  {
                    v20 = (*(uint64_t (**)(_QWORD, _QWORD))j)(*((_QWORD *)&v61 + 2 * v18 + 1), *(_QWORD *)(v17 + 48));
                    if (v20)
                    {
                      v18 += v20;
                      goto LABEL_43;
                    }
                  }
                  return v1;
                }
                if (*(_QWORD *)(v17 + 40))
                  return v1;
                do
                {
LABEL_43:
                  v17 = *(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8;
                  if (!v17)
                  {
                    if (v18 != 4)
                      return v1;
                    v21 = (_OWORD *)operator new[]();
                    v22 = v21;
                    *v21 = xmmword_22F4A1A20;
                    v23 = (uint64_t *)(v21 + 1);
                    for (k = 16; k != 304; k += 72)
                      *(_DWORD *)((char *)v21 + k) = 0;
                    if (*(_DWORD *)v1 >= 2u)
                      sub_22EF53BC0(v1);
                    *(_DWORD *)(v2 + 80) = 10;
                    *(_QWORD *)(v2 + 88) = v23;
                    *(_QWORD *)(v2 + 96) = 0x400000000;
                    v25 = *(unsigned int *)(v2 + 64);
                    if (*(_DWORD *)v23 >= 2u)
                    {
                      sub_22EF53BC0(v23);
                      v23 = *(uint64_t **)(v2 + 88);
                      v26 = *(_DWORD *)(v2 + 96) + 1;
                    }
                    else
                    {
                      v26 = 1;
                    }
                    *((_DWORD *)v22 + 4) = 2;
                    *((_QWORD *)v22 + 3) = v25;
                    *((_DWORD *)v22 + 8) = 32;
                    *((_BYTE *)v22 + 36) = 1;
                    v27 = *(unsigned __int16 *)(v2 + 68);
                    v28 = &v23[9 * v26];
                    if (*(_DWORD *)v28 >= 2u)
                      sub_22EF53BC0(&v23[9 * v26]);
                    v29 = &v23[9 * v26];
                    v30 = v62;
                    *(_OWORD *)((char *)v29 + 21) = v61;
                    *(_DWORD *)v28 = 2;
                    v29[1] = v27;
                    v31 = 16;
                    *((_DWORD *)v29 + 4) = 16;
                    *((_BYTE *)v29 + 20) = 1;
                    *(_OWORD *)((char *)v29 + 37) = v30;
                    *(_OWORD *)((char *)v29 + 53) = *(_OWORD *)v63;
                    *((_DWORD *)v29 + 17) = *(_DWORD *)&v63[15];
                    v32 = *(unsigned __int16 *)(v2 + 70);
                    v33 = *(_QWORD *)(v2 + 88);
                    v34 = *(_DWORD *)(v2 + 96) + 2;
                    v35 = (_DWORD *)(v33 + 72 * v34);
                    if (*v35 >= 2u)
                      sub_22EF53BC0((uint64_t *)(v33 + 72 * v34));
                    *v35 = 2;
                    v36 = v33 + 72 * v34;
                    *(_QWORD *)(v36 + 8) = v32;
                    *(_DWORD *)(v36 + 16) = 16;
                    *(_BYTE *)(v36 + 20) = 1;
                    v37 = (_OWORD *)operator new[]();
                    *v37 = xmmword_22F4A1A30;
                    v38 = v37 + 1;
                    do
                    {
                      *(_DWORD *)((char *)v37 + v31) = 0;
                      v31 += 72;
                    }
                    while (v31 != 592);
                    v39 = *(_QWORD *)(v2 + 88);
                    v40 = *(_DWORD *)(v2 + 96) + 3;
                    v41 = (_DWORD *)(v39 + 72 * v40);
                    if (*v41 >= 2u)
                      sub_22EF53BC0((uint64_t *)(v39 + 72 * v40));
                    v42 = 0;
                    v43 = 72;
                    v44 = v39 + 72 * v40;
                    *(_QWORD *)(v44 + 8) = v38;
                    v45 = (_QWORD *)(v44 + 8);
                    *v41 = 9;
                    v45[1] = 0x800000008;
                    do
                    {
                      v46 = *(unsigned __int8 *)(v2 + v43);
                      v47 = *v45 + v42;
                      if (*(_DWORD *)v47 >= 2u)
                        sub_22EF53BC0((uint64_t *)(*v45 + v42));
                      *(_DWORD *)v47 = 2;
                      *(_QWORD *)(v47 + 8) = v46;
                      *(_DWORD *)(v47 + 16) = 8;
                      *(_BYTE *)(v47 + 20) = 1;
                      v42 += 72;
                      ++v43;
                    }
                    while (v42 != 576);
                    if ((*(_DWORD *)(v2 + 28) & 0x7F) != 0x53)
                    {
                      v48 = *(_QWORD *)(v2 + 16);
                      v49 = v48 & 0xFFFFFFFFFFFFFFF8;
                      if ((v48 & 4) != 0)
                        v49 = *(_QWORD *)v49;
                      for (m = *(_WORD *)(v49 + 8) & 0x7F; m != 83; m = *(_WORD *)(v49 + 8) & 0x7F)
                      {
                        v51 = -40;
                        if (m > 70)
                        {
                          if (m == 71)
                          {
                            v51 = -56;
                            goto LABEL_85;
                          }
                          if (m == 81)
                            goto LABEL_85;
                        }
                        else
                        {
                          if (m <= 0x18)
                          {
                            if (m == 16)
                              goto LABEL_72;
                            if (((1 << m) & 0x1066) != 0)
                              goto LABEL_85;
                            if (m == 24)
                            {
LABEL_72:
                              v51 = -48;
                              goto LABEL_85;
                            }
                          }
                          if (m == 70)
                          {
                            v51 = -64;
                            goto LABEL_85;
                          }
                        }
                        v52 = m - 52;
                        if ((m - 33) >= 5)
                          v53 = -48;
                        else
                          v53 = -64;
                        if (v52 >= 6)
                          v51 = v53;
                        else
                          v51 = -72;
LABEL_85:
                        v54 = *(_QWORD *)(v49 + v51 + 16);
                        v49 = v54 & 0xFFFFFFFFFFFFFFF8;
                        if ((v54 & 4) != 0)
                          v49 = *(_QWORD *)v49;
                      }
                      v2 = v49 - 40;
                    }
                    sub_22EF5908C(*(_QWORD *)(v2 + 88), (uint64_t)sub_22E7B7544, (uint64_t)v1);
                    return v1;
                  }
                }
                while ((*(_DWORD *)(v17 + 28) & 0x7Fu) - 49 > 2);
              }
            }
          }
        }
      }
    }
  }
  return v1;
}

uint64_t sub_22EFD9410(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

uint64_t sub_22EFD9418(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

uint64_t sub_22EFD9420(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

unint64_t sub_22EFD9428(unint64_t a1)
{
  if ((*(_BYTE *)(a1 + 29) & 0x80) != 0)
    return sub_22EFB5D7C(a1);
  return a1;
}

unint64_t sub_22EFD9438(unint64_t a1)
{
  if ((*(_BYTE *)(a1 + 29) & 0x80) != 0)
    return sub_22EFB5D7C(a1);
  return a1;
}

unint64_t sub_22EFD9448(unint64_t a1)
{
  if ((*(_BYTE *)(a1 + 29) & 0x80) != 0)
    return sub_22EFB5D7C(a1);
  return a1;
}

unint64_t sub_22EFD9458(unint64_t a1)
{
  if ((*(_BYTE *)(a1 + 29) & 0x80) != 0)
    return sub_22EFB5D7C(a1);
  return a1;
}

unint64_t sub_22EFD9468(unint64_t a1)
{
  if ((*(_BYTE *)(a1 + 29) & 0x80) != 0)
    return sub_22EFB5D7C(a1);
  return a1;
}

uint64_t sub_22EFD9478(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

uint64_t sub_22EFD9480(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

unint64_t sub_22EFD9488(unint64_t result)
{
  if ((*(_BYTE *)(result + 80) & 3) == 0)
    return *(_QWORD *)(result + 104) & 0xFFFFFFFFFFFFFFF8;
  return result;
}

unint64_t sub_22EFD94A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  v2 = *(_QWORD *)(a1 + 128);
  result = *(_QWORD *)(v2 + 32);
  if ((result & 1) != 0)
  {
    v4 = *(_QWORD *)(v2 + 88);
    if (!v4 || (*(_DWORD *)(v4 + 28) & 0x7F) != 0x53)
    {
      v5 = *(_QWORD *)(v4 + 16);
      v6 = v5 & 0xFFFFFFFFFFFFFFF8;
      if ((v5 & 4) != 0)
        v6 = *(_QWORD *)v6;
      for (i = *(_WORD *)(v6 + 8) & 0x7F; i != 83; i = *(_WORD *)(v6 + 8) & 0x7F)
      {
        v8 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v8 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_17;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_16;
          if (i == 16)
            goto LABEL_10;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_23;
          if (i == 24)
          {
LABEL_10:
            v8 = -48;
          }
          else
          {
LABEL_16:
            if (i != 70)
            {
LABEL_17:
              v9 = i - 52;
              if ((i - 33) >= 5)
                v10 = -48;
              else
                v10 = -64;
              if (v9 >= 6)
                v8 = v10;
              else
                v8 = -72;
              goto LABEL_23;
            }
            v8 = -64;
          }
        }
LABEL_23:
        v11 = *(_QWORD *)(v6 + v8 + 16);
        v6 = v11 & 0xFFFFFFFFFFFFFFF8;
        if ((v11 & 4) != 0)
          v6 = *(_QWORD *)v6;
      }
      v4 = v6 - 40;
    }
    result = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v4 + 88) + 16048) + 56))(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 16048), result >> 1);
    *(_QWORD *)(v2 + 32) = result;
  }
  return result;
}

BOOL sub_22EFD95F8(uint64_t a1, uint64_t a2)
{
  const void *v3;
  const void *v4;

  v3 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v4 = **(const void ***)a1;
  if (v4 != v3)
    sub_22E3BA850(*(_QWORD *)(a1 + 8), v3);
  return v4 != v3;
}

uint64_t sub_22EFD9654(uint64_t a1)
{
  int v1;
  uint64_t v3;
  BOOL v4;

  v1 = *(_DWORD *)(a1 + 28);
  if ((v1 & 0x7Fu) <= 0x2F && ((1 << (v1 & 0x7F)) & 0xC00000060000) != 0)
  {
    a1 = sub_22EFBAEA4(a1);
    v1 = *(_DWORD *)(a1 + 28);
  }
  if ((v1 & 0x7Eu) - 58 <= 0xFFFFFFF9)
    a1 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v3)
    v4 = *(unsigned __int8 *)(v3 + 16) - 27 > 0xFFFFFFFD;
  else
    v4 = 0;
  if (!v4)
    v3 = sub_22F10CF48(v3);
  return *(_QWORD *)(v3 + 24) & 7 | *(_QWORD *)((*(_QWORD *)(v3 + 24) & 0xFFFFFFFFFFFFFFF0) + 8);
}

void sub_22EFD96DC(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int i;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int j;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  void **v33;
  _BYTE *v34;
  unsigned int *v35;
  const void *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t k;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  int v59;
  _BYTE v60[64];

  v56 = v60;
  v57 = v60;
  v58 = 8;
  v59 = 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if (!a2 || (v14 = a2, (*(_DWORD *)(a2 + 28) & 0x7F) != 0x53))
  {
    v15 = *(_QWORD *)(a2 + 16);
    v16 = v15 & 0xFFFFFFFFFFFFFFF8;
    if ((v15 & 4) != 0)
      v16 = *(_QWORD *)v16;
    for (i = *(_WORD *)(v16 + 8) & 0x7F; i != 83; i = *(_WORD *)(v16 + 8) & 0x7F)
    {
      v18 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v18 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v18 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v19 = i - 52;
            if ((i - 33) >= 5)
              v20 = -48;
            else
              v20 = -64;
            if (v19 >= 6)
              v18 = v20;
            else
              v18 = -72;
            goto LABEL_22;
          }
          v18 = -64;
        }
      }
LABEL_22:
      v21 = *(_QWORD *)(v16 + v18 + 16);
      v16 = v21 & 0xFFFFFFFFFFFFFFF8;
      if ((v21 & 4) != 0)
        v16 = *(_QWORD *)v16;
    }
    v14 = v16 - 40;
  }
  v22 = *(_QWORD **)sub_22EFD4278(*(_QWORD *)(a2 + 128) + 40, *(_QWORD *)(v14 + 88));
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  if (!a2 || (v23 = a2, (*(_DWORD *)(a2 + 28) & 0x7F) != 0x53))
  {
    v24 = *(_QWORD *)(a2 + 16);
    v25 = v24 & 0xFFFFFFFFFFFFFFF8;
    if ((v24 & 4) != 0)
      v25 = *(_QWORD *)v25;
    for (j = *(_WORD *)(v25 + 8) & 0x7F; j != 83; j = *(_WORD *)(v25 + 8) & 0x7F)
    {
      v27 = -40;
      if (j > 70)
      {
        if (j == 71)
        {
          v27 = -56;
        }
        else if (j != 81)
        {
          goto LABEL_44;
        }
      }
      else
      {
        if (j > 0x18)
          goto LABEL_43;
        if (j == 16)
          goto LABEL_37;
        if (((1 << j) & 0x1066) != 0)
          goto LABEL_50;
        if (j == 24)
        {
LABEL_37:
          v27 = -48;
        }
        else
        {
LABEL_43:
          if (j != 70)
          {
LABEL_44:
            v28 = j - 52;
            if ((j - 33) >= 5)
              v29 = -48;
            else
              v29 = -64;
            if (v28 >= 6)
              v27 = v29;
            else
              v27 = -72;
            goto LABEL_50;
          }
          v27 = -64;
        }
      }
LABEL_50:
      v30 = *(_QWORD *)(v25 + v27 + 16);
      v25 = v30 & 0xFFFFFFFFFFFFFFF8;
      if ((v30 & 4) != 0)
        v25 = *(_QWORD *)v25;
    }
    v23 = v25 - 40;
  }
  v31 = *(_QWORD **)(sub_22EFD4278(*(_QWORD *)(a2 + 128) + 40, *(_QWORD *)(v23 + 88)) + 8);
  if (v22 != v31)
  {
    if (&v56 != (_BYTE **)a5)
      llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)&v56, (const llvm::SmallPtrSetImplBase *)a5);
    do
    {
      v32 = (void *)sub_22EFD9654(*v22 & 0xFFFFFFFFFFFFFFFCLL);
      v33 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)a5, v32);
      v34 = (_BYTE *)*((_QWORD *)a5 + 1);
      if (v34 == *(_BYTE **)a5)
        v35 = a5 + 5;
      else
        v35 = a5 + 4;
      if (v33 == (void **)&v34[8 * *v35])
      {
        sub_22E3BA850((uint64_t)&v56, v32);
        v37 = *v22 & 3;
        if (a4 <= (int)v37)
          v38 = *(_DWORD *)v22 & 3;
        else
          v38 = a4;
        if ((_DWORD)v37 == 2)
          v39 = 3;
        else
          v39 = v38;
        v40 = *v22 & 0xFFFFFFFFFFFFFFFCLL;
        if ((a3 & 1) != 0)
        {
          v41 = *(unsigned int *)(a7 + 8);
          if (v41 >= *(unsigned int *)(a7 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v41 = *(unsigned int *)(a7 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a7 + 8 * v41) = v40 | v39;
          ++*(_DWORD *)(a7 + 8);
        }
        else
        {
          v42 = (unint64_t *)a6[1];
          if ((unint64_t)v42 >= (a6[2] & 0xFFFFFFFFFFFFFFF8))
          {
            sub_22E78E458(a6, a1, 1uLL);
            v42 = (unint64_t *)a6[1];
          }
          *v42 = v40 | v39;
          a6[1] = (uint64_t)(v42 + 1);
        }
      }
      else if (a3)
      {
        v36 = (const void *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)(*v22 & 0xFFFFFFFFFFFFFFFCLL) + 32))(*v22 & 0xFFFFFFFFFFFFFFFCLL);
        sub_22E3BA850(a8, v36);
      }
      ++v22;
    }
    while (v22 != v31);
    a5 = (unsigned int *)&v56;
  }
  v43 = sub_22EFD5480(a2);
  v44 = sub_22EFD5480(a2);
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  for (k = v44 + 24 * *(unsigned int *)(*(_QWORD *)(a2 + 128) + 16); v43 != k; v43 += 24)
  {
    v46 = *(_QWORD *)(**(_QWORD **)(v43 + 16) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v46 + 8) & 0xF) != 0)
      v46 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v43 + 16));
    v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v46 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v47 && *(_BYTE *)(v47 + 16) == 45)
    {
      v48 = *(unsigned __int8 *)(v43 + 12);
      v49 = (v48 >> 2) & 3;
      if (v49 == 3)
        v49 = v48 & 2;
      if (a4 <= v49)
        v50 = v49;
      else
        v50 = a4;
      if (v49 == 2)
        v51 = 3;
      else
        v51 = v50;
      v52 = a3 | v48;
      v53 = sub_22F114198(*(_QWORD *)(v47 + 24));
      sub_22EFD96DC(a1, v53, v52 & 1, v51, a5, a6, a7, a8);
    }
  }
  if (v57 != v56)
    free(v57);
}

BOOL sub_22EFD9BD8(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_22F110C5C(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (result)
    return sub_22EF6A330(*(_QWORD *)a1, a2) == *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22EFD9C20(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;

  v3 = sub_22EF5C728(*(_QWORD *)a1, a2);
  if (!v3)
    return 0;
  v4 = v3;
  if (*(_BYTE *)(v3 + 16) != 2)
    return 0;
  v5 = (_QWORD *)(v3 + 40);
  v6 = *(unsigned int *)(a1 + 24);
  v7 = *(_DWORD *)(v3 + 48);
  if (v7 >= 0x41)
  {
    if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v3 + 40)) > 0x40)
      return 0;
    v5 = (_QWORD *)*v5;
  }
  if (*v5 == v6)
    return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), *(_QWORD *)(v4 + 32));
  return 0;
}

uint64_t sub_22EFD9CC0()
{
  return 1;
}

uint64_t sub_22EFD9CC8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t *a6, uint64_t a7)
{
  int v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v7 = a7;
  v13 = sub_22EFC7430(64, a1, a2, 8 * a7);
  v14 = sub_22EA41AB8(v13, 8, a2, a3);
  *(_QWORD *)v14 = &off_24FAC43E0;
  *(_QWORD *)(v14 + 40) = a4;
  *(_QWORD *)(v14 + 48) = 0;
  *(_DWORD *)(v14 + 56) = a5;
  *(_DWORD *)(v14 + 60) = 2 * v7;
  if ((v7 & 0x7FFFFFFF) != 0)
  {
    v17 = v7 & 0x7FFFFFFF;
    v18 = (_QWORD *)(v13 + 64);
    do
    {
      v19 = *a6++;
      *v18++ = v19;
      --v17;
    }
    while (v17);
  }
  if (a2)
    v15 = a2 - 64;
  else
    v15 = 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v15 + 104) + 96), *(_QWORD *)(v15 + 104));
  *(_QWORD *)(v13 + 48) = *(_QWORD *)(*(_QWORD *)(v15 + 128) + 96);
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v15 + 104) + 96), *(_QWORD *)(v15 + 104));
  *(_QWORD *)(*(_QWORD *)(v15 + 128) + 96) = v13;
  return v13;
}

uint64_t sub_22EFD9DB0(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t result;

  v5 = sub_22E3CD3D4(a1 + 2032, 8 * a3 + 72, 3);
  *(_DWORD *)v5 = 0;
  *(_DWORD *)(v5 + 4) = a2;
  result = sub_22E7B5130(v5 + 8, 8);
  *(_QWORD *)(v5 + 8) = &off_24FAC43E0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_DWORD *)(v5 + 64) = 0;
  *(_DWORD *)(v5 + 68) = 2 * a3;
  return result;
}

unint64_t sub_22EFD9E18(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_WORD *)(a1 + 72) & 0x7F;
  v3 = -40;
  if (v2 > 0x46)
  {
    if (v2 == 83)
      goto LABEL_5;
    if (v2 == 71)
    {
      v3 = -56;
      goto LABEL_5;
    }
    if (v2 != 81)
    {
LABEL_40:
      v15 = v2 - 52;
      v16 = v2 - 33 >= 5;
      v17 = -48;
      if (!v16)
        v17 = -64;
      if (v15 >= 6)
        v3 = v17;
      else
        v3 = -72;
    }
  }
  else
  {
    if (v2 > 0x18)
      goto LABEL_39;
    if (v2 == 16)
    {
LABEL_4:
      v3 = -48;
      goto LABEL_5;
    }
    if (((1 << v2) & 0x1066) == 0)
    {
      if (v2 == 24)
        goto LABEL_4;
LABEL_39:
      if (v2 == 70)
      {
        v3 = -64;
        goto LABEL_5;
      }
      goto LABEL_40;
    }
  }
LABEL_5:
  v4 = a1 + 64 + v3;
  if ((*(_DWORD *)(v4 + 28) & 0x7F) != 0x53)
  {
    v5 = *(_QWORD *)(v4 + 16);
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v6 = *(_QWORD *)v6;
    for (i = *(_WORD *)(v6 + 8) & 0x7F; i != 83; i = *(_WORD *)(v6 + 8) & 0x7F)
    {
      v8 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v8 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_23;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_22;
        if (i == 16)
          goto LABEL_12;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_13;
        if (i == 24)
        {
LABEL_12:
          v8 = -48;
        }
        else
        {
LABEL_22:
          if (i != 70)
          {
LABEL_23:
            v10 = i - 52;
            if ((i - 33) >= 5)
              v11 = -48;
            else
              v11 = -64;
            if (v10 >= 6)
              v8 = v11;
            else
              v8 = -72;
            goto LABEL_13;
          }
          v8 = -64;
        }
      }
LABEL_13:
      v9 = *(_QWORD *)(v6 + v8 + 16);
      v6 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) != 0)
        v6 = *(_QWORD *)v6;
    }
    v4 = v6 - 40;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v4 + 88) + 16048);
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  v13 = *(_QWORD *)(a1 + 128);
  result = *(_QWORD *)(v13 + 96);
  if ((result & 1) != 0)
  {
    result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v12 + 16))(v12, result >> 1);
    *(_QWORD *)(v13 + 96) = result;
  }
  return result;
}

unint64_t sub_22EFDA014(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  unsigned int *v12;
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  uint64_t v17[2];

  v2 = *(_QWORD *)(a1 + 40);
  v3 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 4) != 0 || !v3)
  {
    v9 = v2 & 4;
    if (v3)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (v10)
    {
      v7 = *(_DWORD *)(a1 + 56);
      v8 = *(unsigned int *)(a1 + 24);
    }
    else
    {
      if (*(_DWORD *)(a1 + 60) > 1u)
        v12 = *(unsigned int **)(a1 + 64);
      else
        v12 = (unsigned int *)(a1 + 56);
      v7 = *v12;
      v17[0] = *(_QWORD *)v3;
      v17[1] = v3 + 8;
      v8 = sub_22F1167E8(v17);
    }
  }
  else
  {
    v4 = *(_DWORD *)(v3 + 28);
    if ((v4 & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      v11 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v3 + 16))(v3);
      v7 = v11;
LABEL_14:
      v8 = HIDWORD(v11);
      return v7 | (v8 << 32);
    }
    v5 = v4 & 0x7F;
    if (v5 != 28 && v5 != 29)
    {
      if ((v5 - 67) < 0xFFFFFFEE
        || ((v14 = *(_QWORD *)(v3 + 56), (v14 & 4) == 0) || (v16 = v14 & 0xFFFFFFFFFFFFFFF8, !*(_DWORD *)(v16 + 16))
          ? (v15 = (_DWORD *)(v3 + 64))
          : (v15 = **(_DWORD ***)(v16 + 24)),
            *v15 == *(_DWORD *)(v3 + 64)))
      {
        v7 = *(_DWORD *)(a1 + 56);
        v11 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v3 + 16))(v3);
        goto LABEL_14;
      }
    }
    v6 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v3 + 16))(v3);
    v7 = v6;
    v8 = HIDWORD(v6);
  }
  return v7 | (v8 << 32);
}

_DWORD *sub_22EFDA148(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  _DWORD *result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  result = (_DWORD *)sub_22E3CD3D4(a1 + 2032, 8 * a3 + 8, 3);
  *result = a3;
  if (a3)
  {
    v6 = result + 2;
    v7 = 8 * a3;
    do
    {
      v8 = *a2++;
      *v6++ = v8;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

unint64_t sub_22EFDA1A0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t result;
  unint64_t v11;
  BOOL v12;

  if (!a1 || (*(_DWORD *)(a1 + 28) & 0x7F) != 0x17)
    goto LABEL_10;
  v8 = *(_QWORD *)(a1 + 104);
  if (!v8)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
    v8 = *(_QWORD *)(a1 + 104);
  }
  if (v8 >= 8)
  {
    v9 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
    if (v9)
    {
      if ((*(_BYTE *)(v9 + 8) & 4) != 0 && !a4)
        return 0;
    }
  }
LABEL_10:
  result = sub_22EFCE144(a1 + 48, a2);
  if (result)
  {
    while (1)
    {
      v11 = result & 0xFFFFFFFFFFFFFFF8;
      if ((result & 4) == 0 || !v11)
        break;
      result = *(_QWORD *)v11;
      if (*(_QWORD *)v11)
        v12 = (*(_DWORD *)(*(_QWORD *)v11 + 28) & 0x7F) == 24;
      else
        v12 = 0;
      if (!v12 || ((((*(_BYTE *)(result + 58) & 2) == 0) ^ a3) & 1) == 0)
      {
        result = *(_QWORD *)(v11 + 8);
        if (result)
          continue;
      }
      return result;
    }
    result = 0;
    if (v11 && (*(_DWORD *)(v11 + 28) & 0x7F) == 0x18)
    {
      if (((*(_BYTE *)(v11 + 58) & 2) == 0) != a3)
        return v11;
      else
        return 0;
    }
  }
  return result;
}

uint64_t sub_22EFDA2A8(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v4 = *(_QWORD *)(a2 + 88);
  v5 = sub_22EFCE144(a1 + 48, v4);
  if (v5)
  {
    while (1)
    {
      v6 = (v5 & 4) == 0;
      v7 = (unint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0xFFFFFFFFFFFFFFF8) == 0)
        v6 = 1;
      v8 = v5 & 0xFFFFFFFFFFFFFFF8;
      if (!v6)
        v8 = *v7;
      if (v8)
      {
        v9 = *(_DWORD *)(v8 + 28);
        if ((v9 & 0x7F) == 0x18 && (v9 & 0x200) == 0 && (*(_QWORD *)(v8 + 56) & 0x20000) != 0)
          return 1;
      }
      if (!v6)
      {
        v5 = v7[1];
        if (v5)
          continue;
      }
      break;
    }
  }
  if (a1 && (*(_DWORD *)(a1 + 28) & 0x7F) == 0x16)
  {
    v10 = sub_22F257E10(a1);
    if (v10)
    {
      v11 = v10;
      while ((*(_BYTE *)(v11 + 28) & 0x80) != 0 || (*(_BYTE *)(v11 + 8) & 4) != 0)
      {
        v11 = *(_QWORD *)(v11 + 128);
        if (!v11)
          goto LABEL_19;
      }
LABEL_57:
      v29 = sub_22EFDA1A0(v11, v4, 1, 0);
      if (v29 && (*(_BYTE *)(v29 + 29) & 2) == 0)
        return 1;
      v22 = *(_QWORD *)(v11 + 40) >= 8uLL && (*(_QWORD *)(v11 + 40) & 7) == 0;
      if (!v22)
        goto LABEL_39;
      v23 = sub_22F256388(v11);
      if (v23 == v24)
        goto LABEL_39;
      v25 = *(_QWORD *)(a2 + 40);
      if ((v25 & 7) != 0)
        v26 = 0;
      else
        v26 = v25 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v27 = *(_QWORD *)(v23 + 40);
        if ((v27 & 7) != 0)
          v28 = 0;
        else
          v28 = v27 & 0xFFFFFFFFFFFFFFF8;
        if (v28 == v26)
        {
          if ((*(_DWORD *)(v23 + 72) & 8) == 0)
            break;
          return 1;
        }
        do
          v23 = *(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v23 && (*(_DWORD *)(v23 + 28) & 0x7F) != 0x19);
      }
      while (v23 != v24);
LABEL_39:
      while (1)
      {
        v11 = *(_QWORD *)(v11 + 128);
        if (!v11)
          break;
        if ((*(_BYTE *)(v11 + 28) & 0x80) == 0 && (*(_BYTE *)(v11 + 8) & 4) == 0)
          goto LABEL_57;
      }
    }
LABEL_19:
    v12 = (_QWORD *)sub_22F276134(a1);
    v13 = sub_22F2761B0(a1);
    if (v12 != (_QWORD *)v13)
    {
      v14 = (_QWORD *)v13;
      while ((sub_22EFDA2A8(*v12, a2) & 1) == 0)
      {
        if (++v12 == v14)
          goto LABEL_23;
      }
      return 1;
    }
LABEL_23:
    v15 = sub_22F3B46CC(a1);
    if (v15)
    {
      v16 = v15;
      while ((sub_22EFDA2A8(v16, a2) & 1) == 0)
      {
        v16 = sub_22F3B46CC(v16);
        if (!v16)
          goto LABEL_27;
      }
      return 1;
    }
  }
LABEL_27:
  result = 0;
  if (a1 && (*(_DWORD *)(a1 + 28) & 0x7F) == 0x17)
  {
    v18 = sub_22F259248(a1);
    if (v18 == v19)
    {
      return 0;
    }
    else
    {
      v20 = v19;
      v21 = v18 + 8;
      do
      {
        result = sub_22EFDA2A8(*(_QWORD *)(v21 - 8), a2);
        if ((result & 1) != 0)
          break;
        v22 = v21 == v20;
        v21 += 8;
      }
      while (!v22);
    }
  }
  return result;
}

unint64_t sub_22EFDA4F0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t *v18;

  v6 = *(_WORD *)(a1 + 8) & 0x7F;
  if (a1)
    v7 = a1 - 48;
  else
    v7 = 0;
  if (v6 == 23)
    v8 = v7;
  else
    v8 = 0;
  if (a1 && v6 == 23)
  {
    v9 = *(_QWORD *)(v8 + 104);
    if (!v9)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 96) + 88), *(_QWORD *)(v8 + 96));
      v9 = *(_QWORD *)(v8 + 104);
    }
    if (v9 >= 8)
    {
      v10 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
      if (v10)
      {
        if ((*(_BYTE *)(v10 + 8) & 4) != 0)
          return 0;
      }
    }
  }
  if (a1)
  {
    if ((*(_WORD *)(a1 + 8) & 0x7F) == 0x16)
    {
      v11 = sub_22EB0C40C(v7);
      if (v11)
      {
        v12 = v11;
LABEL_18:
        result = sub_22EFDA4F0(v12 + 48, a2, a3);
        if (result)
          return result;
        while (1)
        {
          v12 = *(_QWORD *)(v12 + 128);
          if (!v12)
            break;
          if ((*(_BYTE *)(v12 + 28) & 0x80) == 0)
          {
            v14 = *(_QWORD *)(v12 + 40) >= 8uLL && (*(_QWORD *)(v12 + 40) & 7) == 0;
            if (!v14 && (*(_BYTE *)(v12 + 8) & 4) == 0)
              goto LABEL_18;
          }
        }
      }
    }
  }
  result = sub_22EFCE144(a1, a2);
  if (result)
  {
    v15 = result;
    v16 = 0;
    while (1)
    {
      v17 = (v15 & 4) == 0;
      v18 = (unint64_t *)(v15 & 0xFFFFFFFFFFFFFFF8);
      if (!v18)
        v17 = 1;
      result = (unint64_t)v18;
      if (!v17)
        result = *v18;
      if (!result || (*(_DWORD *)(result + 28) & 0x7F) != 0x19)
        goto LABEL_42;
      if ((_DWORD)a3 == 2)
        break;
      if (a3 <= 1)
      {
        if ((*(_BYTE *)(result + 73) & 0x40) == 0)
          return result;
        goto LABEL_43;
      }
      if ((*(_DWORD *)(result + 72) & 0x4000) == 0)
        goto LABEL_42;
LABEL_43:
      if (!v17)
      {
        v15 = v18[1];
        v16 = result;
        if (v15)
          continue;
      }
      goto LABEL_45;
    }
    if ((*(_BYTE *)(result + 73) & 0x40) != 0)
      return result;
LABEL_42:
    result = v16;
    goto LABEL_43;
  }
LABEL_45:
  if ((_DWORD)a3)
    return 0;
  return result;
}

uint64_t sub_22EFDA684(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  const void *v9;
  size_t v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  _BYTE v15[24];
  unint64_t v16;
  _BYTE *v17;
  void *v18;
  __int128 v19;
  _QWORD v20[17];

  v20[16] = *MEMORY[0x24BDAC8D0];
  v18 = v20;
  v19 = xmmword_22F44E310;
  sub_22F242C48((uint64_t)v15, (uint64_t)&v18);
  v4 = v17;
  if ((unint64_t)v17 >= v16)
  {
    v5 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)v15);
  }
  else
  {
    ++v17;
    *v4 = 95;
    v5 = (llvm::raw_ostream *)v15;
  }
  v6 = *(_QWORD *)(a1 + 40);
  if ((v6 & 7) != 0)
    v7 = 0;
  else
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  v8 = *(unsigned int **)(v7 + 16);
  v11 = *v8;
  v9 = v8 + 4;
  v10 = v11;
  v12 = (void *)*((_QWORD *)v5 + 4);
  if ((unint64_t)v11 <= *((_QWORD *)v5 + 3) - (_QWORD)v12)
  {
    if (v10)
    {
      memcpy(v12, v9, v10);
      *((_QWORD *)v5 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v5, (const char *)v9);
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v15);
  v13 = sub_22E3CB704(*(llvm::StringMapImpl **)(a2 + 15192), v18, v19);
  if (v18 != v20)
    free(v18);
  return v13;
}

uint64_t sub_22EFDA7BC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  BOOL v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  while (1)
  {
    if (a1 && (*(_DWORD *)(a1 + 28) & 0x7F) == 0x17)
    {
      v6 = *(_QWORD *)(a1 + 104);
      if (!v6)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
        v6 = *(_QWORD *)(a1 + 104);
      }
      if (v6 >= 8)
      {
        v7 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
        if (v7)
        {
          if ((*(_BYTE *)(v7 + 8) & 4) != 0)
            return 0;
        }
      }
    }
    if (a1)
    {
      if ((*(_DWORD *)(a1 + 28) & 0x7F) == 0x16)
      {
        v8 = sub_22EB0C40C(a1);
        if (v8)
        {
          v9 = v8;
LABEL_12:
          result = sub_22EFDA7BC(v9, a2, a3);
          if (result)
            return result;
          while (1)
          {
            v9 = *(_QWORD *)(v9 + 128);
            if (!v9)
              break;
            if ((*(_BYTE *)(v9 + 28) & 0x80) == 0)
            {
              v11 = *(_QWORD *)(v9 + 40) >= 8uLL && (*(_QWORD *)(v9 + 40) & 7) == 0;
              if (!v11 && (*(_BYTE *)(v9 + 8) & 4) == 0)
                goto LABEL_12;
            }
          }
        }
      }
    }
    if (a1)
      v12 = a1 + 48;
    else
      v12 = 0;
    result = sub_22EFDA4F0(v12, a2, a3);
    if (result)
      return result;
    v13 = *(_DWORD *)(a1 + 28) & 0x7F;
    if (v13 != 22)
    {
      if (v13 == 19)
      {
        result = 0;
        v19 = *(_QWORD *)(a1 + 40);
        if (v19 < 8 || (v19 & 7) != 0)
          return result;
        v20 = *(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF8;
        v21 = *(unsigned int *)(v20 + 24);
        if ((_DWORD)v21)
        {
          v22 = *(_QWORD **)(v20 + 16);
          v23 = 8 * v21;
          do
          {
            result = sub_22EFDA7BC(*v22, a2, a3);
            if (result)
              break;
            ++v22;
            v23 -= 8;
          }
          while (v23);
          return result;
        }
      }
      else if (v13 == 23)
      {
        v24 = sub_22F259248(a1);
        if ((_QWORD *)v24 != v25)
        {
          v26 = (_QWORD *)v24;
          v27 = v25;
          do
          {
            result = sub_22EFDA7BC(*v26, a2, a3);
            if (result)
              break;
            ++v26;
          }
          while (v26 != v27);
          return result;
        }
      }
      return 0;
    }
    v14 = sub_22F257E10(a1);
    if (v14)
    {
      v15 = v14;
      while ((*(_BYTE *)(v15 + 28) & 0x80) != 0 || (*(_BYTE *)(v15 + 8) & 4) != 0)
      {
        v15 = *(_QWORD *)(v15 + 128);
        if (!v15)
          goto LABEL_31;
      }
LABEL_39:
      if (*(_QWORD *)(v15 + 40) >= 8uLL && (*(_QWORD *)(v15 + 40) & 7) == 0)
      {
        result = sub_22EFDA7BC(v15, a2, a3);
        if (result)
          return result;
      }
      while (1)
      {
        v15 = *(_QWORD *)(v15 + 128);
        if (!v15)
          break;
        if ((*(_BYTE *)(v15 + 28) & 0x80) == 0 && (*(_BYTE *)(v15 + 8) & 4) == 0)
          goto LABEL_39;
      }
    }
LABEL_31:
    v16 = (_QWORD *)sub_22F276134(a1);
    v17 = sub_22F2761B0(a1);
    if (v16 != (_QWORD *)v17)
      break;
LABEL_34:
    result = sub_22F3B46CC(a1);
    a1 = result;
    if (!result)
      return result;
  }
  while (1)
  {
    result = sub_22EFDA7BC(*v16, a2, a3);
    if (result)
      return result;
    if (++v16 == (_QWORD *)v17)
      goto LABEL_34;
  }
}

uint64_t sub_22EFDAA30(unint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t *v23;
  uint64_t result;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;

  v4 = sub_22F256388(a1);
  if (v4 != v5)
  {
    v6 = v4;
    v7 = v5;
    do
    {
      v8 = *(_QWORD *)(v6 + 40);
      if ((v8 & 7) != 0)
        v9 = 0;
      else
        v9 = v8 & 0xFFFFFFFFFFFFFFF8;
      v10 = (*(_DWORD *)(v6 + 72) >> 14) & 1;
      *(_QWORD *)&v27 = v9;
      DWORD2(v27) = v10;
      *(_QWORD *)sub_22F33B750(a2, &v27) = v6;
      do
        v6 = *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v6 && (*(_DWORD *)(v6 + 28) & 0x7F) != 0x19);
    }
    while (v6 != v7);
  }
  v11 = sub_22E496488(a1);
  if (v11 != v12)
  {
    v13 = v11;
    v14 = v12;
    do
    {
      v15 = sub_22F256388(v13);
      if (v15 != v16)
      {
        v17 = v15;
        v18 = v16;
        do
        {
          v19 = *(_QWORD *)(v17 + 40);
          if ((v19 & 7) != 0)
            v20 = 0;
          else
            v20 = v19 & 0xFFFFFFFFFFFFFFF8;
          v21 = (*(_DWORD *)(v17 + 72) >> 14) & 1;
          *(_QWORD *)&v27 = v20;
          DWORD2(v27) = v21;
          *(_QWORD *)sub_22F33B750(a2, &v27) = v17;
          do
            v17 = *(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v17 && (*(_DWORD *)(v17 + 28) & 0x7F) != 0x19);
        }
        while (v17 != v18);
      }
      do
      {
        v13 = *(_QWORD *)(v13 + 128);
        if (!v13)
          break;
      }
      while ((*(_BYTE *)(v13 + 28) & 0x80) != 0 || *(_QWORD *)(v13 + 40) >= 8uLL && (*(_QWORD *)(v13 + 40) & 7) == 0);
    }
    while (v13 != v14);
  }
  v23 = (uint64_t *)sub_22F276134(a1);
  result = sub_22F2761B0(a1);
  if (v23 != (uint64_t *)result)
  {
    v25 = (uint64_t *)result;
    do
    {
      v26 = *v23++;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 104))(v26, a2);
    }
    while (v23 != v25);
  }
  return result;
}

BOOL sub_22EFDABBC(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 v2;

  if (!a1)
    return 0;
  v1 = a1;
  do
  {
    v2 = sub_22EFDAC08(v1);
    if (v2)
      break;
    v1 = sub_22F3B46CC(v1);
  }
  while (v1);
  return v2;
}

BOOL sub_22EFDAC08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 105)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

unint64_t sub_22EFDAC68(uint64_t a1)
{
  unint64_t v1;

  while (1)
  {
    v1 = a1;
    if (!a1 || sub_22EFDACA4(a1))
      break;
    a1 = sub_22F3B46CC(v1);
  }
  return v1;
}

BOOL sub_22EFDACA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 264)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

void sub_22EFDAD04(unint64_t a1, _QWORD *a2, unsigned int a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int i;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _BYTE *v24;
  _BYTE *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[9];

  v32[8] = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v8 + 72) & 1) != 0)
  {
    *(_BYTE *)(v8 + 72) &= ~1u;
    v9 = a1;
    if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
    {
      v10 = *(_QWORD *)(a1 + 16);
      v11 = v10 & 0xFFFFFFFFFFFFFFF8;
      if ((v10 & 4) != 0)
        v11 = *(_QWORD *)v11;
      for (i = *(_WORD *)(v11 + 8) & 0x7F; i != 83; i = *(_WORD *)(v11 + 8) & 0x7F)
      {
        v13 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v13 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_16;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_15;
          if (i == 16)
            goto LABEL_9;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_22;
          if (i == 24)
          {
LABEL_9:
            v13 = -48;
          }
          else
          {
LABEL_15:
            if (i != 70)
            {
LABEL_16:
              v14 = i - 52;
              if ((i - 33) >= 5)
                v15 = -48;
              else
                v15 = -64;
              if (v14 >= 6)
                v13 = v15;
              else
                v13 = -72;
              goto LABEL_22;
            }
            v13 = -64;
          }
        }
LABEL_22:
        v16 = *(_QWORD *)(v11 + v13 + 16);
        v11 = v16 & 0xFFFFFFFFFFFFFFF8;
        if ((v16 & 4) != 0)
          v11 = *(_QWORD *)v11;
      }
      v9 = v11 - 40;
    }
    (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v9 + 88) + 16048) + 144))(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 16048), a1);
    v8 = *(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF8;
  }
  if (*(_DWORD *)(v8 + 48) || *(_DWORD *)(v8 + 24))
  {
    v30 = v32;
    v31 = 0x800000000;
    if (a3)
    {
      v17 = 0;
      v18 = a3;
      do
      {
        v19 = a2[v17];
        v20 = (uint64_t *)sub_22F276134(a1);
        v21 = sub_22F2761B0(a1);
        if (v20 == (uint64_t *)v21)
        {
LABEL_37:
          v22 = v31;
          if (v31 >= (unint64_t)HIDWORD(v31))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v22 = v31;
          }
          *((_QWORD *)v30 + v22) = v19;
          LODWORD(v31) = v31 + 1;
        }
        else
        {
          while ((sub_22EF674A4(a4, v19, *v20) & 1) == 0)
          {
            if (++v20 == (uint64_t *)v21)
              goto LABEL_37;
          }
        }
        ++v17;
      }
      while (v17 != v18);
      if ((_DWORD)v31)
      {
        v24 = (_BYTE *)sub_22F276134(a1);
        v25 = (_BYTE *)sub_22F2761B0(a1);
        sub_22F2633B0((uint64_t)&v30, v24, v25);
        v26 = *(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF8;
        v27 = v30;
        v28 = v31;
        *(_QWORD *)(v26 + 40) = 0;
        if ((_DWORD)v28)
        {
          v29 = (void *)sub_22E3CD3D4(a4 + 2032, 8 * v28, 3);
          *(_QWORD *)(v26 + 40) = v29;
          *(_DWORD *)(v26 + 48) = v28;
          memcpy(v29, v27, 8 * v28);
        }
      }
    }
    if (v30 != v32)
      free(v30);
  }
  else
  {
    *(_QWORD *)(v8 + 40) = 0;
    if (a3)
    {
      v23 = (void *)sub_22E3CD3D4(a4 + 2032, 8 * a3, 3);
      *(_QWORD *)(v8 + 40) = v23;
      *(_DWORD *)(v8 + 48) = a3;
      memcpy(v23, a2, 8 * a3);
    }
  }
}

BOOL sub_22EFDB060(unint64_t a1)
{
  int v1;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v1 = (*(unsigned __int8 *)((*(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF8) + 72) >> 3) & 3;
  if (v1 == 1)
    return 1;
  if (v1 == 2)
    return 0;
  v4 = sub_22F276230(a1);
  if (v4 == v5)
  {
LABEL_13:
    v8 = sub_22EB0C40C(a1);
    if (v8)
    {
      v9 = v8;
LABEL_15:
      v10 = sub_22F276230(v9);
      if (v10 == v11)
        goto LABEL_23;
      v12 = v10;
      v13 = v11;
      while (sub_22EFDBF50(v12) != 3 || (*(_BYTE *)(v12 + 60) & 0x10) != 0)
      {
        do
          v12 = *(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v12 && ((*(_DWORD *)(v12 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v12 + 58) & 2) == 0));
        if (v12 == v13)
        {
LABEL_23:
          while (1)
          {
            v9 = *(_QWORD *)(v9 + 128);
            if (!v9)
              goto LABEL_31;
            if ((*(_BYTE *)(v9 + 28) & 0x80) == 0)
            {
              v14 = *(_QWORD *)(v9 + 40) >= 8uLL && (*(_QWORD *)(v9 + 40) & 7) == 0;
              if (!v14 && (*(_BYTE *)(v9 + 8) & 4) == 0)
                goto LABEL_15;
            }
          }
        }
      }
    }
    else
    {
LABEL_31:
      v15 = sub_22F3B4E88(a1);
      if (!v15 || (v18 = sub_22F276230(v15), v18 == v19))
      {
LABEL_32:
        v16 = sub_22F3B46CC(a1);
        if (v16)
        {
          v22 = v16;
          v17 = 8;
          if ((sub_22F3B4A28(v16) & 1) == 0)
          {
            if (sub_22EFDB060(v22))
              v17 = 8;
            else
              v17 = 16;
          }
          goto LABEL_34;
        }
      }
      else
      {
        v20 = v18;
        v21 = v19;
        while (sub_22EFDBF50(v20) != 3 || (*(_BYTE *)(v20 + 60) & 0x10) != 0)
        {
          do
            v20 = *(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v20 && ((*(_DWORD *)(v20 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v20 + 58) & 2) == 0));
          if (v20 == v21)
            goto LABEL_32;
        }
      }
    }
  }
  else
  {
    v6 = v4;
    v7 = v5;
    while (sub_22EFDBF50(v6) != 3 || (*(_BYTE *)(v6 + 60) & 0x10) != 0)
    {
      do
        v6 = *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v6 && ((*(_DWORD *)(v6 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v6 + 58) & 2) == 0));
      if (v6 == v7)
        goto LABEL_13;
    }
  }
  v17 = 16;
LABEL_34:
  *(_BYTE *)((*(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF8) + 72) = *(_BYTE *)((*(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF8)
                                                                             + 72) & 0xE7 | v17;
  return (*(_BYTE *)((*(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF8) + 72) & 0x18) == 8;
}

uint64_t sub_22EFDB278(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int i;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;

  v3 = result;
  v4 = *(_QWORD *)(result + 120);
  if (!v4)
  {
    result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(result + 96) + 88), *(_QWORD *)(result + 96));
    v4 = *(_QWORD *)(v3 + 120);
  }
  if (v4 < 8)
    v5 = 0;
  else
    v5 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if (v5 != v3)
    return result;
  v6 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v6 + 72) & 1) != 0)
  {
    *(_BYTE *)(v6 + 72) &= ~1u;
    v7 = v3;
    if ((*(_DWORD *)(v3 + 28) & 0x7F) != 0x53)
    {
      v8 = *(_QWORD *)(v3 + 16);
      v9 = v8 & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 4) != 0)
        v9 = *(_QWORD *)v9;
      for (i = *(_WORD *)(v9 + 8) & 0x7F; i != 83; i = *(_WORD *)(v9 + 8) & 0x7F)
      {
        v11 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v11 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_23;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_22;
          if (i == 16)
            goto LABEL_16;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_29;
          if (i == 24)
          {
LABEL_16:
            v11 = -48;
          }
          else
          {
LABEL_22:
            if (i != 70)
            {
LABEL_23:
              v12 = i - 52;
              if ((i - 33) >= 5)
                v13 = -48;
              else
                v13 = -64;
              if (v12 >= 6)
                v11 = v13;
              else
                v11 = -72;
              goto LABEL_29;
            }
            v11 = -64;
          }
        }
LABEL_29:
        v14 = *(_QWORD *)(v9 + v11 + 16);
        v9 = v14 & 0xFFFFFFFFFFFFFFF8;
        if ((v14 & 4) != 0)
          v9 = *(_QWORD *)v9;
      }
      v7 = v9 - 40;
    }
    (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v7 + 88) + 16048) + 144))(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 16048), v3);
  }
  result = sub_22F3B49DC(v3);
  if (result)
  {
    v15 = result;
    v16 = sub_22F276230(result);
    if (v16 != v17)
    {
      v18 = v16;
      v19 = v17;
      do
      {
        if (sub_22EFDBF50(v18) == 3 && sub_22EA7D688(v18))
        {
          v20 = *(unsigned int *)(a2 + 8);
          if (v20 >= *(unsigned int *)(a2 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v20 = *(unsigned int *)(a2 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v20) = v18;
          ++*(_DWORD *)(a2 + 8);
        }
        do
          v18 = *(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v18 && ((*(_DWORD *)(v18 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v18 + 58) & 2) == 0));
      }
      while (v18 != v19);
    }
    result = sub_22EB0C40C(v15);
    if (result)
    {
      v21 = result;
LABEL_51:
      result = sub_22F276230(v21);
      if (result != v22)
      {
        v23 = result;
        v24 = v22;
        do
        {
          result = sub_22EFDBF50(v23);
          if ((_DWORD)result == 3)
          {
            result = sub_22EA7D688(v23);
            if ((_DWORD)result)
            {
              v25 = *(unsigned int *)(a2 + 8);
              if (v25 >= *(unsigned int *)(a2 + 12))
              {
                result = llvm::SmallVectorBase<unsigned int>::grow_pod();
                v25 = *(unsigned int *)(a2 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a2 + 8 * v25) = v23;
              ++*(_DWORD *)(a2 + 8);
            }
          }
          do
            v23 = *(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v23 && ((*(_DWORD *)(v23 + 28) & 0x7F) != 0x18 || (*(_BYTE *)(v23 + 58) & 2) == 0));
        }
        while (v23 != v24);
      }
      while (1)
      {
        v21 = *(_QWORD *)(v21 + 128);
        if (!v21)
          break;
        if ((*(_BYTE *)(v21 + 28) & 0x80) == 0)
        {
          v26 = *(_QWORD *)(v21 + 40) >= 8uLL && (*(_QWORD *)(v21 + 40) & 7) == 0;
          if (!v26 && (*(_BYTE *)(v21 + 8) & 4) == 0)
            goto LABEL_51;
        }
      }
    }
  }
  return result;
}

uint64_t sub_22EFDB5A0(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int i;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;

  v6 = *(_QWORD *)(a1 + 120);
  if (!v6)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
    v6 = *(_QWORD *)(a1 + 120);
  }
  if (v6 < 8)
    v7 = 0;
  else
    v7 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if (v7 != a1)
  {
    v8 = *(_QWORD *)(a1 + 96);
    v9 = *(_QWORD *)(v8 + 120);
    if (!v9)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 96) + 88), *(_QWORD *)(v8 + 96));
      v9 = *(_QWORD *)(v8 + 120);
    }
    if (v9 < 8)
      return 0;
    v10 = *(_QWORD *)(a1 + 96);
    v11 = *(_QWORD *)(v10 + 120);
    if (!v11)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v10 + 96) + 88), *(_QWORD *)(v10 + 96));
      v11 = *(_QWORD *)(v10 + 120);
    }
    if (v11 < 8)
      v12 = 0;
    else
      v12 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
    v6 = *(_QWORD *)(a1 + 120);
    if (!v6)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
      v6 = *(_QWORD *)(a1 + 120);
    }
    v13 = v6 < 8 ? 0 : *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
    if (v12 != v13)
      return 0;
  }
  v15 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v15 + 72) & 1) != 0)
  {
    *(_BYTE *)(v15 + 72) &= ~1u;
    v16 = a1;
    if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
    {
      v17 = *(_QWORD *)(a1 + 16);
      v18 = v17 & 0xFFFFFFFFFFFFFFF8;
      if ((v17 & 4) != 0)
        v18 = *(_QWORD *)v18;
      for (i = *(_WORD *)(v18 + 8) & 0x7F; i != 83; i = *(_WORD *)(v18 + 8) & 0x7F)
      {
        v20 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v20 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_38;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_37;
          if (i == 16)
            goto LABEL_31;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_44;
          if (i == 24)
          {
LABEL_31:
            v20 = -48;
          }
          else
          {
LABEL_37:
            if (i != 70)
            {
LABEL_38:
              v21 = i - 52;
              if ((i - 33) >= 5)
                v22 = -48;
              else
                v22 = -64;
              if (v21 >= 6)
                v20 = v22;
              else
                v20 = -72;
              goto LABEL_44;
            }
            v20 = -64;
          }
        }
LABEL_44:
        v23 = *(_QWORD *)(v18 + v20 + 16);
        v18 = v23 & 0xFFFFFFFFFFFFFFF8;
        if ((v23 & 4) != 0)
          v18 = *(_QWORD *)v18;
      }
      v16 = v18 - 40;
    }
    (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 88) + 16048) + 144))(*(_QWORD *)(*(_QWORD *)(v16 + 88) + 16048), a1);
  }
  result = sub_22F3B49DC(a1);
  if (result)
  {
    v24 = result;
    v25 = sub_22EFDA1A0(result, a2, 1, 0);
    if (!v25 || (v26 = v25, sub_22EFDBF50(v25) != 3) || !sub_22EA7D688(v26))
    {
      result = sub_22EB0C40C(v24);
      if (!result)
        return result;
      v27 = result;
      while (1)
      {
        v28 = sub_22EFDA1A0(v27, a2, 1, 0);
        if (v28)
        {
          v26 = v28;
          if (sub_22EFDBF50(v28) == 3 && sub_22EA7D688(v26))
            break;
        }
        v27 = *(_QWORD *)(v27 + 128);
        if (!v27)
          return 0;
        while (1)
        {
          if ((*(_BYTE *)(v27 + 28) & 0x80) == 0)
          {
            v29 = *(_QWORD *)(v27 + 40) >= 8uLL && (*(_QWORD *)(v27 + 40) & 7) == 0;
            if (!v29 && (*(_BYTE *)(v27 + 8) & 4) == 0)
              break;
          }
          result = 0;
          v27 = *(_QWORD *)(v27 + 128);
          if (!v27)
            return result;
        }
      }
    }
    if (a3)
      *a3 = v26;
    return 1;
  }
  return result;
}

unint64_t sub_22EFDB894(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int i;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  v5 = a1;
  v6 = *(_QWORD *)(a1 + 120);
  if (!v6)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
    v6 = *(_QWORD *)(v5 + 120);
  }
  if (v6 < 8)
    return 0;
  v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v7 + 72) & 1) == 0)
    goto LABEL_34;
  *(_BYTE *)(v7 + 72) &= ~1u;
  v8 = v5;
  if ((*(_DWORD *)(v5 + 28) & 0x7F) != 0x53)
  {
    v9 = *(_QWORD *)(v5 + 16);
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 4) != 0)
      v10 = *(_QWORD *)v10;
    for (i = *(_WORD *)(v10 + 8) & 0x7F; i != 83; i = *(_WORD *)(v10 + 8) & 0x7F)
    {
      v12 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v12 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_19;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_18;
        if (i == 16)
          goto LABEL_12;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_25;
        if (i == 24)
        {
LABEL_12:
          v12 = -48;
        }
        else
        {
LABEL_18:
          if (i != 70)
          {
LABEL_19:
            v13 = i - 52;
            if ((i - 33) >= 5)
              v14 = -48;
            else
              v14 = -64;
            if (v13 >= 6)
              v12 = v14;
            else
              v12 = -72;
            goto LABEL_25;
          }
          v12 = -64;
        }
      }
LABEL_25:
      v15 = *(_QWORD *)(v10 + v12 + 16);
      v10 = v15 & 0xFFFFFFFFFFFFFFF8;
      if ((v15 & 4) != 0)
        v10 = *(_QWORD *)v10;
    }
    v8 = v10 - 40;
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v8 + 88) + 16048) + 144))(*(_QWORD *)(*(_QWORD *)(v8 + 88) + 16048), v5);
LABEL_34:
  while (1)
  {
    result = sub_22F3B466C(v5, a2);
    if (result)
      break;
    v17 = sub_22EB0C40C(v5);
    if (v17)
    {
      v18 = v17;
LABEL_39:
      result = sub_22F3B466C(v18, a2);
      if (result)
        break;
      while (1)
      {
        v18 = *(_QWORD *)(v18 + 128);
        if (!v18)
          break;
        if ((*(_BYTE *)(v18 + 28) & 0x80) == 0)
        {
          v19 = *(_QWORD *)(v18 + 40) >= 8uLL && (*(_QWORD *)(v18 + 40) & 7) == 0;
          if (!v19 && (*(_BYTE *)(v18 + 8) & 4) == 0)
            goto LABEL_39;
        }
      }
    }
    v5 = sub_22F3B46CC(v5);
    result = 0;
    if (!v5)
      return result;
  }
  *a3 = v5;
  return result;
}

unint64_t sub_22EFDBA90(unint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, uint64_t a6)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int i;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t j;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  v11 = a1;
  v12 = *(_QWORD *)(a1 + 120);
  if (!v12)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
    v12 = *(_QWORD *)(v11 + 120);
  }
  if (v12 < 8)
    return 0;
  v13 = v12 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v13 + 72) & 1) == 0)
    goto LABEL_33;
  *(_BYTE *)(v13 + 72) &= ~1u;
  v14 = v11;
  if ((*(_DWORD *)(v11 + 28) & 0x7F) != 0x53)
  {
    v15 = *(_QWORD *)(v11 + 16);
    v16 = v15 & 0xFFFFFFFFFFFFFFF8;
    if ((v15 & 4) != 0)
      v16 = *(_QWORD *)v16;
    for (i = *(_WORD *)(v16 + 8) & 0x7F; i != 83; i = *(_WORD *)(v16 + 8) & 0x7F)
    {
      v18 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v18 = -56;
          goto LABEL_25;
        }
        if (i == 81)
          goto LABEL_25;
      }
      else
      {
        if (i <= 0x18)
        {
          if (i == 16)
            goto LABEL_12;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_25;
          if (i == 24)
          {
LABEL_12:
            v18 = -48;
            goto LABEL_25;
          }
        }
        if (i == 70)
        {
          v18 = -64;
          goto LABEL_25;
        }
      }
      v19 = i - 52;
      if ((i - 33) >= 5)
        v20 = -48;
      else
        v20 = -64;
      if (v19 >= 6)
        v18 = v20;
      else
        v18 = -72;
LABEL_25:
      v21 = *(_QWORD *)(v16 + v18 + 16);
      v16 = v21 & 0xFFFFFFFFFFFFFFF8;
      if ((v21 & 4) != 0)
        v16 = *(_QWORD *)v16;
    }
    v14 = v16 - 40;
  }
  (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v14 + 88) + 16048) + 144))(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 16048), v11);
LABEL_33:
  do
  {
    result = sub_22EFDA1A0(v11, a2, a3, 0);
    if (result)
      break;
    v23 = sub_22F257E10(v11);
    if (v23)
    {
      v24 = v23;
      while ((*(_BYTE *)(v24 + 28) & 0x80) != 0 || (*(_BYTE *)(v24 + 8) & 4) != 0)
      {
        v24 = *(_QWORD *)(v24 + 128);
        if (!v24)
          goto LABEL_39;
      }
LABEL_55:
      result = sub_22EFDA1A0(v24, a2, a3, 0);
      if (result && (v24 != a6 || (*(_BYTE *)(result + 29) & 2) == 0))
        return result;
      while (1)
      {
        v24 = *(_QWORD *)(v24 + 128);
        if (!v24)
          break;
        if ((*(_BYTE *)(v24 + 28) & 0x80) == 0 && (*(_BYTE *)(v24 + 8) & 4) == 0)
          goto LABEL_55;
      }
    }
LABEL_39:
    v25 = (uint64_t *)sub_22F2590A8(v11);
    for (j = sub_22F25910C(v11); v25 != (uint64_t *)j; ++v25)
    {
      result = sub_22F3B4CBC(*v25, a2, a3);
      if (result)
        return result;
    }
    if ((a4 & 1) == 0)
    {
      v27 = sub_22F257E10(v11);
      if (v27)
      {
        v28 = v27;
        while ((*(_BYTE *)(v28 + 28) & 0x80) != 0 || (*(_BYTE *)(v28 + 8) & 4) != 0)
        {
          v28 = *(_QWORD *)(v28 + 128);
          if (!v28)
            goto LABEL_48;
        }
LABEL_58:
        v29 = *(_QWORD *)(v28 + 120) & 0xFFFFFFFFFFFFFFF8;
        v30 = *(unsigned int *)(v29 + 24);
        if (!(_DWORD)v30)
          goto LABEL_64;
        v31 = *(uint64_t **)(v29 + 16);
        v32 = 8 * v30;
        while (1)
        {
          result = sub_22F3B4CBC(*v31, a2, a3);
          if (result)
          {
            if (v28 != a6 || (*(_BYTE *)(result + 29) & 2) == 0)
              return result;
          }
          ++v31;
          v32 -= 8;
          if (!v32)
          {
LABEL_64:
            while (1)
            {
              v28 = *(_QWORD *)(v28 + 128);
              if (!v28)
                goto LABEL_48;
              if ((*(_BYTE *)(v28 + 28) & 0x80) == 0 && (*(_BYTE *)(v28 + 8) & 4) == 0)
                goto LABEL_58;
            }
          }
        }
      }
    }
LABEL_48:
    if (!a5)
      return 0;
    result = sub_22F3B46CC(v11);
    v11 = result;
  }
  while (result);
  return result;
}

BOOL sub_22EFDBD9C(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 result;
  uint64_t v3;
  unint64_t v4;
  int i;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  result = sub_22E91B2F8(a1);
  if (result)
  {
    if (sub_22EFDBEF0(v1))
      return 0;
    if (!v1 || (*(_DWORD *)(v1 + 28) & 0x7F) != 0x53)
    {
      v3 = *(_QWORD *)(v1 + 16);
      v4 = v3 & 0xFFFFFFFFFFFFFFF8;
      if ((v3 & 4) != 0)
        v4 = *(_QWORD *)v4;
      for (i = *(_WORD *)(v4 + 8) & 0x7F; i != 83; i = *(_WORD *)(v4 + 8) & 0x7F)
      {
        v6 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v6 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_19;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_18;
          if (i == 16)
            goto LABEL_12;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_25;
          if (i == 24)
          {
LABEL_12:
            v6 = -48;
          }
          else
          {
LABEL_18:
            if (i != 70)
            {
LABEL_19:
              v7 = i - 52;
              if ((i - 33) >= 5)
                v8 = -48;
              else
                v8 = -64;
              if (v7 >= 6)
                v6 = v8;
              else
                v6 = -72;
              goto LABEL_25;
            }
            v6 = -64;
          }
        }
LABEL_25:
        v9 = *(_QWORD *)(v4 + v6 + 16);
        v4 = v9 & 0xFFFFFFFFFFFFFFF8;
        if ((v9 & 4) != 0)
          v4 = *(_QWORD *)v4;
      }
      v1 = v4 - 40;
    }
    return (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 88) + 2000) + 148) & 0x80) == 0;
  }
  return result;
}

BOOL sub_22EFDBEF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 490)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22EFDBF50(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  BOOL v20;

  result = (*(_DWORD *)(a1 + 56) >> 13) & 0xF;
  if ((_DWORD)result == 15)
  {
    if ((*(_BYTE *)(a1 + 29) & 1) == 0)
      goto LABEL_14;
    sub_22EFC8E88(a1);
    v4 = *(uint64_t **)v3;
    v5 = *(unsigned int *)(v3 + 8);
    v6 = *(uint64_t **)v3;
    if ((_DWORD)v5)
    {
      v7 = 8 * v5;
      v6 = *(uint64_t **)v3;
      while (*(_WORD *)(*v6 + 32) != 261)
      {
        ++v6;
        v7 -= 8;
        if (!v7)
          goto LABEL_14;
      }
    }
    if (v6 == &v4[v5])
    {
LABEL_14:
      result = sub_22F41F330(*(_QWORD *)(a1 + 40));
      switch((int)result)
      {
        case 1:
        case 2:
        case 4:
        case 5:
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) == 32)
            result = result;
          else
            result = 0;
          goto LABEL_45;
        case 3:
          if ((*(_BYTE *)(a1 + 58) & 2) == 0
            || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) != 32)
          {
            goto LABEL_44;
          }
          result = 3;
          goto LABEL_45;
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
          result = result & (*(unsigned __int8 *)(a1 + 58) << 30 >> 31);
          goto LABEL_45;
        case 13:
          if ((*(_BYTE *)(a1 + 58) & 2) != 0)
            goto LABEL_44;
          v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          if (!v12 || (*(_DWORD *)(v12 + 16) & 0xFF800FF) != 86507531)
            goto LABEL_44;
          result = 13;
          goto LABEL_45;
        case 14:
          if ((*(_BYTE *)(a1 + 58) & 2) == 0)
            goto LABEL_44;
          result = *(_QWORD *)(*(_QWORD *)(a1 + 80) & 0xFFFFFFFFFFFFFFF0);
          if (result && *(_BYTE *)(result + 16) == 32)
            goto LABEL_34;
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
            goto LABEL_44;
          result = sub_22F10CF48(result);
          if (!result)
            goto LABEL_45;
LABEL_34:
          result = sub_22E5761BC(result);
          if (!(_DWORD)result)
            goto LABEL_45;
          v14 = *(_DWORD *)(a1 + 104);
          if ((v14 - 4) < 0xFFFFFFFD)
            goto LABEL_44;
          v15 = *(_QWORD *)(a1 + 96);
          result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v15 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (result && *(_BYTE *)(result + 16) == 39)
            goto LABEL_40;
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
            goto LABEL_44;
          result = sub_22F10CF48(result);
          if (result)
          {
LABEL_40:
            v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            if (v16)
              v17 = (*(_DWORD *)(v16 + 16) & 0xFF800FF) == 115867659;
            else
              v17 = 0;
            if (v17)
            {
              v18 = v15 + 8;
              v19 = v14 - 1;
              while (v19)
              {
                result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 48) & 0xFFFFFFFFFFFFFFF0);
                if (result && *(_BYTE *)(result + 16) == 32)
                  goto LABEL_59;
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
                  goto LABEL_44;
                result = sub_22F10CF48(result);
                if (result)
                {
LABEL_59:
                  v20 = sub_22E5761BC(result);
                  result = 0;
                  v18 += 8;
                  --v19;
                  if (v20)
                    continue;
                }
                goto LABEL_45;
              }
              result = 14;
            }
            else
            {
LABEL_44:
              result = 0;
            }
          }
LABEL_45:
          v11 = (result & 0xF) << 13;
          break;
        default:
          goto LABEL_45;
      }
    }
    else
    {
      do
      {
        v9 = *v4++;
        v8 = v9;
      }
      while (*(_WORD *)(v9 + 32) != 261);
      v10 = *(_DWORD *)(v8 + 36);
      if (v10 >= 6)
        result = 15;
      else
        result = v10;
      v11 = (_DWORD)result << 13;
    }
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFE1FFFLL | v11;
  }
  return result;
}

BOOL sub_22EFDC244(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  __int16 v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  if ((v3 & 4) != 0)
    v4 = *(_QWORD *)v4;
  v5 = *(_WORD *)(v4 + 8);
  if (v4)
    v6 = (v5 & 0x7F) == 23;
  else
    v6 = 0;
  if (!v6 && (v5 & 0x7F) != 0x16)
    return 0;
  v7 = *(_QWORD *)(v4 - 8);
  if ((v7 & 7) != 0)
    v8 = 0;
  else
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(a2 + 1352);
  if (!v9)
  {
    v9 = sub_22E3CB704(*(llvm::StringMapImpl **)(a2 + 15192), "NSObject", 8uLL);
    *(_QWORD *)(a2 + 1352) = v9;
  }
  return v8 == v9;
}

uint64_t sub_22EFDC2D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if (sub_22EFDBF50(a1) != 3)
    return 0;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) != 0)
    v5 = *(_QWORD *)v5;
  if ((*(_WORD *)(v5 + 8) & 0x7F) != 0x17 && (v6 = sub_22EFDC9F0(a1)) != 0)
    return sub_22EFDB5A0(v6, *(_QWORD *)(a1 + 40), a2);
  else
    return 0;
}

unint64_t sub_22EFDC340(unint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int i;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;

  if (!a1 || (v2 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 4) != 0)
      v4 = *(_QWORD *)v4;
    for (i = *(_WORD *)(v4 + 8) & 0x7F; i != 83; i = *(_WORD *)(v4 + 8) & 0x7F)
    {
      v6 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v6 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v6 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v7 = i - 52;
            if ((i - 33) >= 5)
              v8 = -48;
            else
              v8 = -64;
            if (v7 >= 6)
              v6 = v8;
            else
              v6 = -72;
            goto LABEL_22;
          }
          v6 = -64;
        }
      }
LABEL_22:
      v9 = *(_QWORD *)(v4 + v6 + 16);
      v4 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) != 0)
        v4 = *(_QWORD *)v4;
    }
    v2 = v4 - 40;
  }
  v10 = *(_QWORD *)(v2 + 88);
  if ((*(_BYTE *)(a1 + 58) & 0x80) == 0
    || (v27 = 0, v28 = a1, (sub_22F246C54((uint64_t *)(v10 + 1072), &v28, &v27) & 1) == 0)
    || (result = *(_QWORD *)(v27 + 8)) == 0)
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 4) != 0)
      v12 = *(_QWORD *)v12;
    v13 = *(_WORD *)(v12 + 8) & 0x7F;
    v14 = -40;
    if (v13 > 0x46)
    {
      switch(v13)
      {
        case 'S':
          goto LABEL_48;
        case 'G':
          v14 = -56;
          goto LABEL_48;
        case 'Q':
          goto LABEL_48;
      }
    }
    else
    {
      if (v13 <= 0x18)
      {
        if (v13 == 16)
          goto LABEL_35;
        if (((1 << v13) & 0x1066) != 0)
          goto LABEL_48;
        if (v13 == 24)
        {
LABEL_35:
          v14 = -48;
          goto LABEL_48;
        }
      }
      if (v13 == 70)
      {
        v14 = -64;
        goto LABEL_48;
      }
    }
    if (v13 - 52 < 6)
    {
      v14 = -72;
    }
    else
    {
      v14 = -48;
      if (v13 - 33 < 5)
        v14 = -64;
    }
LABEL_48:
    v15 = v12 + v14;
    v16 = *(_DWORD *)(v12 + v14 + 28);
    if ((v16 & 0x80) != 0)
      goto LABEL_84;
    switch(v16 & 0x7F)
    {
      case 0x13:
        v20 = sub_22F368C34(v10, v15);
        if (!v20)
          goto LABEL_84;
        break;
      case 0x14:
        v17 = *(_QWORD *)(v15 + 88);
        if (!v17)
          goto LABEL_84;
        v18 = *(_QWORD *)(v15 + 40);
        v19 = (v18 & 7) != 0 ? 0 : v18 & 0xFFFFFFFFFFFFFFF8;
        v20 = sub_22EFDD7A0(v17, v19);
        if (!v20)
          goto LABEL_84;
        break;
      case 0x15:
        v20 = *(_QWORD *)(v15 + 88);
        if (!v20)
          goto LABEL_84;
        break;
      case 0x16:
        v20 = sub_22F368BD4(v10, v15);
        if (!v20)
          goto LABEL_84;
        break;
      default:
        goto LABEL_84;
    }
    if ((*(_BYTE *)(v20 + 28) & 0x80) != 0
      || (result = sub_22EFDA1A0(v20, *(_QWORD *)(a1 + 40), (*(_QWORD *)(a1 + 56) >> 17) & 1, 0)) == 0)
    {
LABEL_84:
      v26 = *(_QWORD *)(a1 + 56);
      if ((v26 & 0x400000) != 0)
        return sub_22EFDA1A0(v15, *(_QWORD *)(a1 + 40), (v26 >> 17) & 1, 1);
      else
        return a1;
    }
    v22 = *(_QWORD *)(result + 16);
    v23 = v22 & 0xFFFFFFFFFFFFFFF8;
    if ((v22 & 4) != 0)
      v23 = *(_QWORD *)v23;
    v24 = *(_WORD *)(v23 + 8) & 0x7F;
    v25 = -40;
    if (v24 > 0x46)
    {
      switch(v24)
      {
        case 'S':
          goto LABEL_83;
        case 'G':
          v25 = -56;
          goto LABEL_83;
        case 'Q':
LABEL_83:
          if ((*(_BYTE *)(v23 + v25 + 28) & 0x80) == 0)
            return result;
          goto LABEL_84;
      }
    }
    else
    {
      if (v24 <= 0x18)
      {
        if (v24 == 16)
        {
LABEL_64:
          v25 = -48;
          goto LABEL_83;
        }
        if (((1 << v24) & 0x1066) != 0)
          goto LABEL_83;
        if (v24 == 24)
          goto LABEL_64;
      }
      if (v24 == 70)
      {
LABEL_81:
        v25 = -64;
        goto LABEL_83;
      }
    }
    if (v24 - 52 >= 6)
    {
      if (v24 - 33 >= 5)
        goto LABEL_64;
      goto LABEL_81;
    }
    v25 = -72;
    goto LABEL_83;
  }
  return result;
}

unint64_t sub_22EFDC6E4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v2 = a1[2];
  v3 = v2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 4) != 0)
    v3 = *(_QWORD *)v3;
  v4 = *(_WORD *)(v3 + 8) & 0x7F;
  v5 = -40;
  if (v4 > 0x46)
  {
    if (v4 == 83)
      goto LABEL_19;
    if (v4 == 71)
    {
      v5 = -56;
      goto LABEL_19;
    }
    if (v4 != 81)
    {
LABEL_14:
      if (v4 - 52 < 6)
      {
        v5 = -72;
      }
      else
      {
        v5 = -48;
        if (v4 - 33 < 5)
          v5 = -64;
      }
    }
  }
  else
  {
    if (v4 > 0x18)
      goto LABEL_13;
    if (v4 == 16)
    {
LABEL_6:
      v5 = -48;
      goto LABEL_19;
    }
    if (((1 << v4) & 0x1066) == 0)
    {
      if (v4 == 24)
        goto LABEL_6;
LABEL_13:
      if (v4 == 70)
      {
        v5 = -64;
        goto LABEL_19;
      }
      goto LABEL_14;
    }
  }
LABEL_19:
  v6 = v3 + v5;
  v7 = a1[5];
  v8 = *(_DWORD *)(v3 + v5 + 28) & 0x7F;
  if (v8 == 20)
  {
    v16 = *(_QWORD *)(v6 + 88);
    if (v16)
    {
      v17 = *(_QWORD *)(v6 + 40);
      v18 = (v17 & 7) != 0 ? 0 : v17 & 0xFFFFFFFFFFFFFFF8;
      v19 = sub_22EFDD7A0(v16, v18);
      if (v19)
      {
        result = sub_22EFDA1A0(v19, v7, (a1[7] >> 17) & 1, 0);
        if (result)
          return result;
      }
    }
LABEL_40:
    v20 = a1[7];
    if ((v20 & 0x400000) == 0)
      return (unint64_t)a1;
    result = sub_22EFDA1A0(v6, v7, (v20 >> 17) & 1, 1);
    if (!result)
      return (unint64_t)a1;
    return result;
  }
  if (v8 != 21)
    goto LABEL_40;
  v9 = *(_QWORD *)(v6 + 88);
  if (!v9)
    goto LABEL_40;
  result = sub_22EFDA1A0(*(_QWORD *)(v6 + 88), a1[5], (a1[7] >> 17) & 1, 0);
  if (result)
    return result;
  v11 = sub_22E496488(v9);
  if (v11 == v12)
    goto LABEL_40;
  v13 = v11;
  v14 = v12;
  while (1)
  {
    result = sub_22EFDA1A0(v13, v7, (a1[7] >> 17) & 1, 0);
    if (result)
      return result;
    do
    {
      v13 = *(_QWORD *)(v13 + 128);
      if (!v13)
        break;
    }
    while ((*(_BYTE *)(v13 + 28) & 0x80) != 0 || *(_QWORD *)(v13 + 40) >= 8uLL && (*(_QWORD *)(v13 + 40) & 7) == 0);
    if (v13 == v14)
      goto LABEL_40;
  }
}

uint64_t sub_22EFDC8D0(uint64_t a1, uint64_t a2, uint64_t *a3, _BYTE *a4, BOOL *a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  uint64_t v16;

  *a4 = 0;
  *a5 = 0;
  if ((*(_BYTE *)(a1 + 58) & 2) != 0)
  {
    if (a3)
    {
      v13 = sub_22F36D148(a2, a3, 0);
      v12 = sub_22F36CC4C(a2, v13);
      goto LABEL_9;
    }
    v9 = sub_22F36E1B8(a2);
  }
  else
  {
    v9 = sub_22F36E27C(a2);
  }
  v10 = *(_QWORD *)(v9 + 48);
  if (!v10)
  {
    v12 = sub_22EF6462C(a2, v9);
LABEL_9:
    v11 = v12;
    goto LABEL_10;
  }
  v11 = v10 & 0xFFFFFFFFFFFFFFF0;
LABEL_10:
  if ((*(_WORD *)(*(_QWORD *)(a2 + 2000) + 148) & 2) != 0)
  {
    if ((*(_BYTE *)(a1 + 58) & 2) == 0
      || (*a5 = sub_22F2727C8(a1),
          v16 = 128,
          v15 = sub_22E491354((unsigned int *)&v16, v11),
          v11 = sub_22EF5DBC4(a2, v15, v16),
          sub_22EFDBF50(a1) != 3)
      && !*a5)
    {
      v11 |= 1uLL;
      *a4 = 1;
    }
  }
  return v11;
}

unint64_t sub_22EFDC9F0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  __int16 v3;
  int v4;
  BOOL v5;
  BOOL v6;
  int v7;
  BOOL v8;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) != 0)
    v2 = *(_QWORD *)v2;
  v3 = *(_WORD *)(v2 + 8);
  v4 = v3 & 0x7F;
  if (v2)
    v5 = v4 == 22;
  else
    v5 = 0;
  if (v5)
    return v2 - 48;
  if (v2)
    v6 = v4 == 19;
  else
    v6 = 0;
  if (v6)
    return *(_QWORD *)(v2 + 56);
  v7 = v3 & 0x7E;
  if (v2)
    v8 = v7 == 20;
  else
    v8 = 0;
  if (v8)
    return *(_QWORD *)(v2 + 40);
  else
    return 0;
}

unint64_t sub_22EFDCA50(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  __int16 v3;
  BOOL v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) != 0)
    v2 = *(_QWORD *)v2;
  v3 = *(_WORD *)(v2 + 8);
  if (v2)
    v4 = (v3 & 0x7F) == 19;
  else
    v4 = 0;
  if (v4)
    return v2 - 48;
  if ((v3 & 0x7F) != 0x14)
    return 0;
  result = *(_QWORD *)(v2 + 40);
  if (result)
  {
    v6 = *(_QWORD *)(v2 - 8);
    if ((v6 & 7) != 0)
      v7 = 0;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    return sub_22EFDD7A0(result, v7);
  }
  return result;
}

unint64_t sub_22EFDCAAC(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int16 v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  __int16 v14;
  BOOL v15;
  int v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v3 = result;
  v4 = *(_QWORD *)(result + 56);
  if ((v4 & 0x400000) != 0)
  {
    v5 = *(_QWORD *)(result + 16);
    v6 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 4) != 0)
      v6 = (_QWORD *)*v6;
    if (v6)
      v7 = (uint64_t)(v6 - 6);
    else
      v7 = 0;
    result = sub_22EFDA1A0(v7, *(_QWORD *)(v3 + 40), (v4 >> 17) & 1, 1);
    v3 = result;
    v4 = *(_QWORD *)(result + 56);
  }
  if ((v4 & 0x1000000000) != 0)
  {
    v8 = *(_QWORD *)(v3 + 16);
    v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    if ((v8 & 4) != 0)
    {
      v9 = *(_QWORD *)v9;
      v14 = *(_WORD *)(v9 + 8);
      v11 = v14 & 0x7F;
      if (v9)
        v15 = v11 == 23;
      else
        v15 = 0;
      if (!v15)
      {
        v16 = v14 & 0x7E;
        if (v9)
          v17 = v16 == 20;
        else
          v17 = 0;
        if (!v17)
        {
          if (v9)
            v18 = v11 == 19;
          else
            v18 = 0;
          if (v18)
          {
LABEL_19:
            v13 = *(_QWORD *)(v9 + 56);
            if (!v13)
              return result;
            goto LABEL_39;
          }
          goto LABEL_33;
        }
LABEL_38:
        v13 = *(_QWORD *)(v9 + 40);
        if (!v13)
          return result;
LABEL_39:
        v22 = sub_22EFDA1A0(v13, *(_QWORD *)(v3 + 40), (v4 >> 17) & 1, 1);
        if (v22)
          v21 = v22;
        else
          v21 = v3;
        v20 = v13;
        return sub_22EFDE728(v20, v21, a2, 0);
      }
    }
    else
    {
      v10 = *(_WORD *)(v9 + 8);
      v11 = v10 & 0x7F;
      if (v9)
        v12 = v11 == 23;
      else
        v12 = 0;
      if (!v12)
      {
        if (!v9 || (v10 & 0x7E) != 0x14)
        {
          if (v9 && v11 == 19)
            goto LABEL_19;
LABEL_33:
          v19 = v9 - 48;
          if ((v11 - 19) >= 5)
            v20 = 0;
          else
            v20 = v19;
          goto LABEL_37;
        }
        goto LABEL_38;
      }
    }
    v20 = v9 - 48;
LABEL_37:
    v21 = v3;
    return sub_22EFDE728(v20, v21, a2, 0);
  }
  return result;
}

unint64_t sub_22EFDCBF0(unint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[9];

  v55[8] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 40);
  if ((v2 & 7u) >= 2)
  {
    if ((v2 & 7) == 2)
    {
      v3 = 1;
    }
    else
    {
      v3 = *(_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8) - 3;
      if (v3 > 1)
        return 0;
    }
  }
  else
  {
    v3 = 0;
  }
  v4 = *(_QWORD *)(a1 + 56);
  if ((v4 & 0x80000) == 0)
  {
    if (a2)
    {
      v53 = v55;
      v54 = 0x800000000;
      sub_22EFDCAAC(a1, (uint64_t)&v53);
      v5 = (uint64_t *)v53;
      if ((_DWORD)v54)
      {
        v6 = 8 * v54 - 8;
        do
        {
          v7 = *v5++;
          v8 = sub_22EFDCBF0(v7, 0);
          if (v8)
            v9 = 1;
          else
            v9 = v6 == 0;
          v6 -= 8;
        }
        while (!v9);
        v10 = v8;
        v5 = (uint64_t *)v53;
      }
      else
      {
        v10 = 0;
      }
      if (v5 != v55)
        free(v5);
      return v10;
    }
    return 0;
  }
  v11 = v4 & 0x7F;
  v12 = -40;
  if (v11 > 0x46)
  {
    if (v11 == 83)
      goto LABEL_35;
    if (v11 == 71)
    {
      v12 = -56;
      goto LABEL_35;
    }
    if (v11 != 81)
    {
LABEL_30:
      v13 = v11 - 52;
      v14 = v11 - 33 >= 5;
      v15 = -48;
      if (!v14)
        v15 = -64;
      if (v13 >= 6)
        v12 = v15;
      else
        v12 = -72;
    }
  }
  else
  {
    if (v11 > 0x18)
      goto LABEL_29;
    if (v11 == 16)
    {
LABEL_22:
      v12 = -48;
      goto LABEL_35;
    }
    if (((1 << v11) & 0x1066) == 0)
    {
      if (v11 == 24)
        goto LABEL_22;
LABEL_29:
      if (v11 == 70)
      {
        v12 = -64;
        goto LABEL_35;
      }
      goto LABEL_30;
    }
  }
LABEL_35:
  v16 = *(_QWORD *)(a1 + 48 + v12 + 16);
  v17 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 4) != 0)
    v17 = (_QWORD *)*v17;
  v18 = (uint64_t)(v17 - 6);
  if (v17)
    v19 = v17 - 6;
  else
    v19 = 0;
  if (v17)
    v20 = (v4 & 0x100000) == 0;
  else
    v20 = 1;
  if (!v20 && (*((_DWORD *)v19 + 7) & 0x7E) == 20)
    v18 = v19[11];
  if ((v4 & 0x20000) != 0)
  {
    v25 = sub_22F318070(v18);
    if (v25 == v26)
    {
      v28 = v18;
      if (!v18)
        goto LABEL_93;
      v28 = v18;
      if ((*(_DWORD *)(v18 + 28) & 0x7F) != 0x13)
        goto LABEL_93;
      v28 = *(_QWORD *)(v18 + 104);
      goto LABEL_162;
    }
    v10 = v25;
    while (1)
    {
      v27 = v3 ? 88 : 80;
      if (*(_QWORD *)(v10 + v27) == v2)
        break;
      do
        v10 = *(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v10 && ((*(_DWORD *)(v10 + 28) & 0x7F) != 0x19 || (*(_BYTE *)(v10 + 73) & 0x40) != 0));
      if (v10 == v26)
        goto LABEL_73;
    }
  }
  else
  {
    v22 = sub_22F319D40(v18);
    if (v22 == v23)
    {
      v28 = v18;
      if (!v18)
        goto LABEL_93;
      v28 = v18;
      if ((*(_DWORD *)(v18 + 28) & 0x7F) != 0x13)
        goto LABEL_93;
      v28 = *(_QWORD *)(v18 + 104);
      goto LABEL_80;
    }
    v10 = v22;
    while (1)
    {
      v24 = v3 ? 88 : 80;
      if (*(_QWORD *)(v10 + v24) == v2)
        break;
      do
        v10 = *(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v10 && ((*(_DWORD *)(v10 + 28) & 0x7F) != 0x19 || (*(_BYTE *)(v10 + 73) & 0x40) == 0));
      if (v10 == v23)
        goto LABEL_73;
    }
  }
  if (v10)
    return v10;
LABEL_73:
  v28 = v18;
  if (v18)
  {
    v28 = v18;
    if ((*(_DWORD *)(v18 + 28) & 0x7F) == 0x13)
    {
      v28 = *(_QWORD *)(v18 + 104);
      if ((v4 & 0x20000) != 0)
      {
LABEL_162:
        v50 = sub_22F318070(v28);
        if (v50 == v51)
          goto LABEL_93;
        v10 = v50;
        while (1)
        {
          v52 = v3 ? 88 : 80;
          if (*(_QWORD *)(v10 + v52) == v2)
            goto LABEL_173;
          do
            v10 = *(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v10 && ((*(_DWORD *)(v10 + 28) & 0x7F) != 0x19 || (*(_BYTE *)(v10 + 73) & 0x40) != 0));
          if (v10 == v51)
            goto LABEL_93;
        }
      }
LABEL_80:
      v29 = sub_22F319D40(v28);
      if (v29 == v30)
        goto LABEL_93;
      v10 = v29;
      while (1)
      {
        v31 = v3 ? 88 : 80;
        if (*(_QWORD *)(v10 + v31) == v2)
          break;
        do
          v10 = *(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v10 && ((*(_DWORD *)(v10 + 28) & 0x7F) != 0x19 || (*(_BYTE *)(v10 + 73) & 0x40) == 0));
        if (v10 == v30)
          goto LABEL_93;
      }
LABEL_173:
      if (v10)
        return v10;
    }
  }
LABEL_93:
  v32 = sub_22EB0C40C(v28);
  if (!v32)
  {
LABEL_129:
    v41 = sub_22F257E10(v28);
    if (!v41)
      return 0;
    v42 = v41;
    while (1)
    {
      if (v42 != v18)
      {
        if ((v4 & 0x20000) != 0)
        {
          v46 = sub_22F318070(v42);
          if (v46 == v47)
            goto LABEL_132;
          v10 = v46;
          while (1)
          {
            v48 = v3 ? 88 : 80;
            if (*(_QWORD *)(v10 + v48) == v2)
              break;
            do
              v10 = *(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8;
            while (v10 && ((*(_DWORD *)(v10 + 28) & 0x7F) != 0x19 || (*(_BYTE *)(v10 + 73) & 0x40) != 0));
            if (v10 == v47)
              goto LABEL_132;
          }
        }
        else
        {
          v43 = sub_22F319D40(v42);
          if (v43 == v44)
            goto LABEL_132;
          v10 = v43;
          while (1)
          {
            v45 = v3 ? 88 : 80;
            if (*(_QWORD *)(v10 + v45) == v2)
              break;
            do
              v10 = *(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8;
            while (v10 && ((*(_DWORD *)(v10 + 28) & 0x7F) != 0x19 || (*(_BYTE *)(v10 + 73) & 0x40) == 0));
            if (v10 == v44)
              goto LABEL_132;
          }
        }
        if (v10)
          return v10;
      }
LABEL_132:
      v10 = 0;
      v42 = *(_QWORD *)(v42 + 128);
      if (!v42)
        return v10;
    }
  }
  v33 = v32;
LABEL_95:
  if (v33 == v18)
    goto LABEL_96;
  if ((v4 & 0x20000) != 0)
  {
    v38 = sub_22F318070(v33);
    if (v38 == v39)
      goto LABEL_96;
    v10 = v38;
    do
    {
      if (v3)
        v40 = 88;
      else
        v40 = 80;
      if (*(_QWORD *)(v10 + v40) == v2)
        goto LABEL_127;
      do
        v10 = *(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v10 && ((*(_DWORD *)(v10 + 28) & 0x7F) != 0x19 || (*(_BYTE *)(v10 + 73) & 0x40) != 0));
    }
    while (v10 != v39);
LABEL_96:
    while (1)
    {
      v33 = *(_QWORD *)(v33 + 128);
      if (!v33)
        goto LABEL_129;
      if ((*(_BYTE *)(v33 + 28) & 0x80) == 0)
      {
        v34 = *(_QWORD *)(v33 + 40) >= 8uLL && (*(_QWORD *)(v33 + 40) & 7) == 0;
        if (!v34 && (*(_BYTE *)(v33 + 8) & 4) == 0)
          goto LABEL_95;
      }
    }
  }
  v35 = sub_22F319D40(v33);
  if (v35 == v36)
    goto LABEL_96;
  v10 = v35;
  while (1)
  {
    v37 = v3 ? 88 : 80;
    if (*(_QWORD *)(v10 + v37) == v2)
      break;
    do
      v10 = *(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8;
    while (v10 && ((*(_DWORD *)(v10 + 28) & 0x7F) != 0x19 || (*(_BYTE *)(v10 + 73) & 0x40) == 0));
    if (v10 == v36)
      goto LABEL_96;
  }
LABEL_127:
  if (!v10)
    goto LABEL_96;
  return v10;
}

uint64_t sub_22EFDD1E0(unint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t i;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __n128 v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t j;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 *v39;
  const std::nothrow_t *v40;
  unint64_t v41;
  __n128 *v42;
  BOOL v43;
  __n128 *v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  __n128 v51[16];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 120);
  if (!v2)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
    v2 = *(_QWORD *)(a1 + 120);
  }
  if (v2 < 8)
    return 0;
  v3 = v2 & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v3 + 64))
  {
    v4 = 0;
  }
  else
  {
    sub_22F32C4AC(a1);
    if (!*(_QWORD *)(a1 + 120))
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
    v6 = sub_22E496488(a1);
    if (v6 != v7)
    {
      v8 = v6;
      v9 = v7;
      do
      {
        sub_22F3B5F58(v8);
        do
        {
          v8 = *(_QWORD *)(v8 + 128);
          if (!v8)
            break;
        }
        while ((*(_BYTE *)(v8 + 28) & 0x80) != 0 || *(_QWORD *)(v8 + 40) >= 8uLL && (*(_QWORD *)(v8 + 40) & 7) == 0);
      }
      while (v8 != v9);
    }
    v4 = sub_22F32C4AC(a1);
    if (!*(_QWORD *)(a1 + 120))
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
    if (v4)
    {
      v4 = sub_22F32C4AC(a1);
      v20 = *(_QWORD *)(a1 + 120);
      if (!v20)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
        v20 = *(_QWORD *)(a1 + 120);
      }
      *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 64) = v4;
      v21 = v4;
      while (1)
      {
        v21 = *(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v21)
          break;
        if ((*(_DWORD *)(v21 + 28) & 0x7F) == 0x33)
        {
LABEL_59:
          v22 = v4;
          v4 = v21;
          *(_QWORD *)(v22 + 80) = v21;
          while (1)
          {
            v21 = *(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF8;
            if (!v21)
              goto LABEL_24;
            if ((*(_DWORD *)(v21 + 28) & 0x7F) == 0x33)
              goto LABEL_59;
          }
        }
      }
    }
LABEL_24:
    v11 = sub_22E496488(a1);
    if (v11 != v12)
    {
      v13 = v11;
      v14 = v12;
      do
      {
        if (!sub_22F3B5F58(v13))
        {
          if ((*(_WORD *)(v13 + 56) & 0x80) != 0)
            sub_22EFCC320(v13 + 48);
          for (i = *(_QWORD *)(v13 + 64); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
          {
            if ((*(_DWORD *)(i + 28) & 0x7F) == 0x33)
              break;
          }
          v16 = *(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF8;
          if (*(_QWORD *)(v16 + 64))
          {
            v17 = i;
            i = v4;
          }
          else
          {
            *(_QWORD *)(v16 + 64) = i;
            v17 = i;
            while (1)
            {
              v17 = *(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8;
              if (!v17)
                break;
              if ((*(_DWORD *)(v17 + 28) & 0x7F) == 0x33)
                goto LABEL_40;
            }
            v4 = i;
          }
          if (v17)
          {
LABEL_40:
            v4 = v17;
            *(_QWORD *)(i + 80) = v17;
            while (1)
            {
              v17 = *(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8;
              if (!v17)
                break;
              if ((*(_DWORD *)(v17 + 28) & 0x7F) == 0x33)
              {
                i = v4;
                goto LABEL_40;
              }
            }
          }
        }
        do
        {
          v13 = *(_QWORD *)(v13 + 128);
          if (!v13)
            break;
        }
        while ((*(_BYTE *)(v13 + 28) & 0x80) != 0
             || *(_QWORD *)(v13 + 40) >= 8uLL && (*(_QWORD *)(v13 + 40) & 7) == 0);
      }
      while (v13 != v14);
    }
    *(_BYTE *)((*(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF8) + 72) |= 2u;
    v3 = *(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF8;
  }
  if ((*(_BYTE *)(v3 + 72) & 2) == 0)
    return *(_QWORD *)(v3 + 64);
  v19 = sub_22F3B4E88(a1);
  if (!v19)
    goto LABEL_53;
  v23 = v19;
  *(_BYTE *)((*(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF8) + 72) &= ~2u;
  if (sub_22F3B5F58(v19))
    goto LABEL_53;
  v50 = 0;
  v24 = sub_22F32CB00(v23);
  if (v24 == v25)
    goto LABEL_103;
  v27 = v24;
  v28 = v25;
  do
  {
    if ((*(_BYTE *)(v27 + 88) & 8) == 0 || (*(_DWORD *)(v27 + 28) & 0x80) != 0)
    {
      v36 = *(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF8;
      if (*(_QWORD *)(v36 + 64))
        *(_QWORD *)(v4 + 80) = v27;
      else
        *(_QWORD *)(v36 + 64) = v27;
      v4 = v27;
      goto LABEL_100;
    }
    v29 = v27;
    if ((*(_DWORD *)(v27 + 28) & 0x7F) == 0x53)
      goto LABEL_97;
    for (j = *(_QWORD *)(v27 + 16); ; j = *(_QWORD *)(v31 + v33 + 16))
    {
      v31 = j & 0xFFFFFFFFFFFFFFF8;
      if ((j & 4) != 0)
        v31 = *(_QWORD *)v31;
      v32 = *(_WORD *)(v31 + 8) & 0x7F;
      if (v32 == 83)
        break;
      v33 = -40;
      if ((*(_WORD *)(v31 + 8) & 0x7Fu) > 0x46)
      {
        if (v32 == 71)
        {
          v33 = -56;
          continue;
        }
        if (v32 != 81)
          goto LABEL_83;
      }
      else
      {
        if (v32 > 0x18)
          goto LABEL_82;
        if (v32 == 16)
          goto LABEL_76;
        if (((1 << v32) & 0x1066) == 0)
        {
          if (v32 == 24)
          {
LABEL_76:
            v33 = -48;
            continue;
          }
LABEL_82:
          if (v32 == 70)
          {
            v33 = -64;
            continue;
          }
LABEL_83:
          v34 = v32 - 52;
          if (v32 - 33 >= 5)
            v35 = -48;
          else
            v35 = -64;
          if (v34 >= 6)
            v33 = v35;
          else
            v33 = -72;
          continue;
        }
      }
    }
    v29 = v31 - 40;
LABEL_97:
    v37 = sub_22EF5CDF0(*(_QWORD *)(v29 + 88), *(_QWORD *)(*(_QWORD *)(v27 + 48) & 0xFFFFFFFFFFFFFFF0));
    v38 = v50;
    if (v50 >= 0x10uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v38 = v50;
    }
    v39 = &v51[v38];
    v39->n128_u64[0] = v37;
    v39->n128_u64[1] = v27;
    ++v50;
    do
LABEL_100:
      v27 = *(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF8;
    while (v27 && (*(_DWORD *)(v27 + 28) & 0x7F) != 0x33);
  }
  while (v27 != v28);
LABEL_103:
  if (v50)
  {
    if (v50 < 0x81)
    {
LABEL_108:
      sub_22EFDE978(v51, &v51[v50], v50, 0, 0, v26);
    }
    else
    {
      v40 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
      v41 = v50;
      while (1)
      {
        v42 = (__n128 *)operator new(16 * v41, v40);
        if (v42)
          break;
        v43 = v41 > 1;
        v41 >>= 1;
        if (!v43)
          goto LABEL_108;
      }
      v44 = v42;
      sub_22EFDE978(v51, &v51[v50], v50, v42, v41, v26);
      operator delete(v44);
    }
    v45 = *(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v45 + 64))
    {
      v46 = 0;
    }
    else
    {
      v4 = v51[0].n128_u64[1];
      *(_QWORD *)(v45 + 64) = v51[0].n128_u64[1];
      v46 = 1;
    }
    v47 = v50 - v46;
    if (v50 != v46)
    {
      v48 = (16 * v46) | 8;
      do
      {
        v49 = *(unint64_t *)((char *)v51[0].n128_u64 + v48);
        *(_QWORD *)(v4 + 80) = v49;
        v48 += 16;
        v4 = v49;
        --v47;
      }
      while (v47);
    }
  }
LABEL_53:
  v3 = *(_QWORD *)(a1 + 120) & 0xFFFFFFFFFFFFFFF8;
  return *(_QWORD *)(v3 + 64);
}

unint64_t sub_22EFDD7A0(unint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int i;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v4 = *(_QWORD *)(a1 + 120);
  if (!v4)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
    v4 = *(_QWORD *)(a1 + 120);
  }
  if (v4 < 8)
    return 0;
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v5 + 72) & 1) != 0)
  {
    *(_BYTE *)(v5 + 72) &= ~1u;
    v6 = a1;
    if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
    {
      v7 = *(_QWORD *)(a1 + 16);
      v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      if ((v7 & 4) != 0)
        v8 = *(_QWORD *)v8;
      for (i = *(_WORD *)(v8 + 8) & 0x7F; i != 83; i = *(_WORD *)(v8 + 8) & 0x7F)
      {
        v10 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v10 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_19;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_18;
          if (i == 16)
            goto LABEL_12;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_25;
          if (i == 24)
          {
LABEL_12:
            v10 = -48;
          }
          else
          {
LABEL_18:
            if (i != 70)
            {
LABEL_19:
              v11 = i - 52;
              if ((i - 33) >= 5)
                v12 = -48;
              else
                v12 = -64;
              if (v11 >= 6)
                v10 = v12;
              else
                v10 = -72;
              goto LABEL_25;
            }
            v10 = -64;
          }
        }
LABEL_25:
        v13 = *(_QWORD *)(v8 + v10 + 16);
        v8 = v13 & 0xFFFFFFFFFFFFFFF8;
        if ((v13 & 4) != 0)
          v8 = *(_QWORD *)v8;
      }
      v6 = v8 - 40;
    }
    (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 88) + 16048) + 144))(*(_QWORD *)(*(_QWORD *)(v6 + 88) + 16048), a1);
  }
  v14 = sub_22F257E10(a1);
  if (v14)
  {
    while ((*(_BYTE *)(v14 + 28) & 0x80) != 0 || (*(_BYTE *)(v14 + 8) & 4) != 0)
    {
      v14 = *(_QWORD *)(v14 + 128);
      if (!v14)
        return v14;
    }
LABEL_42:
    v16 = *(_QWORD *)(v14 + 40);
    if ((v16 & 7) != 0)
      v17 = 0;
    else
      v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    if (v17 == a2)
    {
      if ((*(_BYTE *)(sub_22EFC8868(a1) + 238) & 1) == 0)
      {
        v18 = sub_22EFCC008(v14 + 48);
        if (v18)
          return v18 - 48;
        else
          return 0;
      }
    }
    else
    {
      while (1)
      {
        v14 = *(_QWORD *)(v14 + 128);
        if (!v14)
          break;
        if ((*(_BYTE *)(v14 + 28) & 0x80) == 0 && (*(_BYTE *)(v14 + 8) & 4) == 0)
          goto LABEL_42;
      }
    }
  }
  return v14;
}

unint64_t sub_22EFDD9A0(unint64_t a1, uint64_t a2)
{
  unint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t i;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  result = sub_22F257E10(a1);
  if (result)
  {
    v4 = result;
    while ((*(_BYTE *)(v4 + 28) & 0x80) != 0 || (*(_BYTE *)(v4 + 8) & 4) != 0)
    {
      v4 = *(_QWORD *)(v4 + 128);
      if (!v4)
        return 0;
    }
LABEL_8:
    v5 = v4;
    if ((*(_DWORD *)(v4 + 28) & 0x7F) != 0x53)
    {
      for (i = *(_QWORD *)(v4 + 16); ; i = *(_QWORD *)(v7 + v9 + 16))
      {
        v7 = i & 0xFFFFFFFFFFFFFFF8;
        if ((i & 4) != 0)
          v7 = *(_QWORD *)v7;
        v8 = *(_WORD *)(v7 + 8) & 0x7F;
        if (v8 == 83)
        {
          v5 = v7 - 40;
          break;
        }
        v9 = -40;
        if ((*(_WORD *)(v7 + 8) & 0x7Fu) > 0x46)
        {
          if (v8 == 71)
          {
            v9 = -56;
            continue;
          }
          if (v8 != 81)
            goto LABEL_23;
        }
        else
        {
          if (v8 > 0x18)
            goto LABEL_22;
          if (v8 == 16)
            goto LABEL_16;
          if (((1 << v8) & 0x1066) == 0)
          {
            if (v8 == 24)
            {
LABEL_16:
              v9 = -48;
              continue;
            }
LABEL_22:
            if (v8 == 70)
            {
              v9 = -64;
              continue;
            }
LABEL_23:
            v10 = v8 - 52;
            if (v8 - 33 >= 5)
              v11 = -48;
            else
              v11 = -64;
            if (v10 >= 6)
              v9 = v11;
            else
              v9 = -72;
            continue;
          }
        }
      }
    }
    v12 = sub_22F368C34(*(_QWORD *)(v5 + 88), v4);
    if (!v12 || (result = sub_22EFDA1A0(v12, a2, 1, 0)) == 0)
    {
      while (1)
      {
        v4 = *(_QWORD *)(v4 + 128);
        if (!v4)
          return 0;
        if ((*(_BYTE *)(v4 + 28) & 0x80) == 0 && (*(_BYTE *)(v4 + 8) & 4) == 0)
          goto LABEL_8;
      }
    }
  }
  return result;
}

unint64_t sub_22EFDDB1C(unint64_t a1, uint64_t a2)
{
  unint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t i;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  result = sub_22F257E10(a1);
  if (result)
  {
    v4 = result;
    while ((*(_BYTE *)(v4 + 28) & 0x80) != 0 || (*(_BYTE *)(v4 + 8) & 4) != 0)
    {
      v4 = *(_QWORD *)(v4 + 128);
      if (!v4)
        return 0;
    }
LABEL_8:
    v5 = v4;
    if ((*(_DWORD *)(v4 + 28) & 0x7F) != 0x53)
    {
      for (i = *(_QWORD *)(v4 + 16); ; i = *(_QWORD *)(v7 + v9 + 16))
      {
        v7 = i & 0xFFFFFFFFFFFFFFF8;
        if ((i & 4) != 0)
          v7 = *(_QWORD *)v7;
        v8 = *(_WORD *)(v7 + 8) & 0x7F;
        if (v8 == 83)
        {
          v5 = v7 - 40;
          break;
        }
        v9 = -40;
        if ((*(_WORD *)(v7 + 8) & 0x7Fu) > 0x46)
        {
          if (v8 == 71)
          {
            v9 = -56;
            continue;
          }
          if (v8 != 81)
            goto LABEL_23;
        }
        else
        {
          if (v8 > 0x18)
            goto LABEL_22;
          if (v8 == 16)
            goto LABEL_16;
          if (((1 << v8) & 0x1066) == 0)
          {
            if (v8 == 24)
            {
LABEL_16:
              v9 = -48;
              continue;
            }
LABEL_22:
            if (v8 == 70)
            {
              v9 = -64;
              continue;
            }
LABEL_23:
            v10 = v8 - 52;
            if (v8 - 33 >= 5)
              v11 = -48;
            else
              v11 = -64;
            if (v10 >= 6)
              v9 = v11;
            else
              v9 = -72;
            continue;
          }
        }
      }
    }
    v12 = sub_22F368C34(*(_QWORD *)(v5 + 88), v4);
    if (!v12 || (result = sub_22EFDA1A0(v12, a2, 0, 0)) == 0)
    {
      while (1)
      {
        v4 = *(_QWORD *)(v4 + 128);
        if (!v4)
          return 0;
        if ((*(_BYTE *)(v4 + 28) & 0x80) == 0 && (*(_BYTE *)(v4 + 8) & 4) == 0)
          goto LABEL_8;
      }
    }
  }
  return result;
}

uint64_t sub_22EFDDC98(unint64_t a1, uint64_t a2, int a3, int a4)
{
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t j;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t i;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;

  while (1)
  {
    v7 = *(_QWORD *)(a1 + 120);
    if (!v7)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 96) + 88), *(_QWORD *)(a1 + 96));
      v7 = *(_QWORD *)(a1 + 120);
    }
    if (v7 < 8)
      return 0;
    v8 = (uint64_t *)sub_22F2590A8(a1);
    v9 = sub_22F25910C(a1);
    if (v8 != (uint64_t *)v9)
      break;
LABEL_60:
    if (!a3)
      goto LABEL_66;
    v26 = sub_22F257E10(a1);
    if (!v26)
      goto LABEL_66;
    v27 = v26;
    while ((*(_BYTE *)(v27 + 28) & 0x80) != 0 || (*(_BYTE *)(v27 + 8) & 4) != 0)
    {
      v27 = *(_QWORD *)(v27 + 128);
      if (!v27)
        goto LABEL_66;
    }
LABEL_68:
    v29 = *(_QWORD *)(v27 + 120) & 0xFFFFFFFFFFFFFFF8;
    v30 = *(unsigned int *)(v29 + 24);
    if (!(_DWORD)v30)
      goto LABEL_98;
    v31 = *(uint64_t **)(v29 + 16);
    v32 = &v31[v30];
    do
    {
      if (!a1 || (v33 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
      {
        for (i = *(_QWORD *)(a1 + 16); ; i = *(_QWORD *)(v35 + v37 + 16))
        {
          v35 = i & 0xFFFFFFFFFFFFFFF8;
          if ((i & 4) != 0)
            v35 = *(_QWORD *)v35;
          v36 = *(_WORD *)(v35 + 8) & 0x7F;
          if (v36 == 83)
          {
            v33 = v35 - 40;
            break;
          }
          v37 = -40;
          if ((*(_WORD *)(v35 + 8) & 0x7Fu) > 0x46)
          {
            if (v36 == 71)
            {
              v37 = -56;
              continue;
            }
            if (v36 != 81)
              goto LABEL_86;
          }
          else
          {
            if (v36 > 0x18)
              goto LABEL_85;
            if (v36 == 16)
              goto LABEL_79;
            if (((1 << v36) & 0x1066) == 0)
            {
              if (v36 == 24)
              {
LABEL_79:
                v37 = -48;
                continue;
              }
LABEL_85:
              if (v36 == 70)
              {
                v37 = -64;
                continue;
              }
LABEL_86:
              v38 = v36 - 52;
              if (v36 - 33 >= 5)
                v39 = -48;
              else
                v39 = -64;
              if (v38 >= 6)
                v37 = v39;
              else
                v37 = -72;
              continue;
            }
          }
        }
      }
      if ((sub_22EF674A4(*(_QWORD *)(v33 + 88), a2, *v31) & 1) != 0)
        return 1;
      ++v31;
    }
    while (v31 != v32);
LABEL_98:
    while (1)
    {
      v27 = *(_QWORD *)(v27 + 128);
      if (!v27)
        break;
      if ((*(_BYTE *)(v27 + 28) & 0x80) == 0 && (*(_BYTE *)(v27 + 8) & 4) == 0)
        goto LABEL_68;
    }
LABEL_66:
    result = sub_22F3B46CC(a1);
    if (!result)
      return result;
    a1 = sub_22F3B46CC(a1);
  }
  v10 = (uint64_t *)v9;
  while (2)
  {
    v11 = *v8;
    v12 = a1;
    if ((*(_DWORD *)(a1 + 28) & 0x7F) == 0x53)
      goto LABEL_31;
    for (j = *(_QWORD *)(a1 + 16); ; j = *(_QWORD *)(v14 + v16 + 16))
    {
      v14 = j & 0xFFFFFFFFFFFFFFF8;
      if ((j & 4) != 0)
        v14 = *(_QWORD *)v14;
      v15 = *(_WORD *)(v14 + 8) & 0x7F;
      if (v15 == 83)
        break;
      v16 = -40;
      if ((*(_WORD *)(v14 + 8) & 0x7Fu) > 0x46)
      {
        if (v15 == 71)
        {
          v16 = -56;
          continue;
        }
        if (v15 != 81)
          goto LABEL_21;
      }
      else
      {
        if (v15 > 0x18)
          goto LABEL_20;
        if (v15 == 16)
          goto LABEL_14;
        if (((1 << v15) & 0x1066) == 0)
        {
          if (v15 == 24)
          {
LABEL_14:
            v16 = -48;
            continue;
          }
LABEL_20:
          if (v15 == 70)
          {
            v16 = -64;
            continue;
          }
LABEL_21:
          v17 = v15 - 52;
          if (v15 - 33 >= 5)
            v18 = -48;
          else
            v18 = -64;
          if (v17 >= 6)
            v16 = v18;
          else
            v16 = -72;
          continue;
        }
      }
    }
    v12 = v14 - 40;
LABEL_31:
    if ((sub_22EF674A4(*(_QWORD *)(v12 + 88), a2, *v8) & 1) != 0)
      return 1;
    if (!a4)
      goto LABEL_59;
    v19 = a1;
    if ((*(_DWORD *)(a1 + 28) & 0x7F) == 0x53)
      goto LABEL_58;
    v20 = *(_QWORD *)(a1 + 16);
    while (2)
    {
      v21 = v20 & 0xFFFFFFFFFFFFFFF8;
      if ((v20 & 4) != 0)
        v21 = *(_QWORD *)v21;
      v22 = *(_WORD *)(v21 + 8) & 0x7F;
      if (v22 != 83)
      {
        v23 = -40;
        if ((*(_WORD *)(v21 + 8) & 0x7Fu) > 0x46)
        {
          if (v22 == 71)
          {
            v23 = -56;
          }
          else if (v22 != 81)
          {
            goto LABEL_48;
          }
        }
        else
        {
          if (v22 > 0x18)
            goto LABEL_47;
          if (v22 == 16)
            goto LABEL_41;
          if (((1 << v22) & 0x1066) == 0)
          {
            if (v22 == 24)
            {
LABEL_41:
              v23 = -48;
            }
            else
            {
LABEL_47:
              if (v22 == 70)
              {
                v23 = -64;
              }
              else
              {
LABEL_48:
                v24 = v22 - 52;
                if (v22 - 33 >= 5)
                  v25 = -48;
                else
                  v25 = -64;
                if (v24 >= 6)
                  v23 = v25;
                else
                  v23 = -72;
              }
            }
          }
        }
        v20 = *(_QWORD *)(v21 + v23 + 16);
        continue;
      }
      break;
    }
    v19 = v21 - 40;
LABEL_58:
    if ((sub_22EF674A4(*(_QWORD *)(v19 + 88), v11, a2) & 1) == 0)
    {
LABEL_59:
      if (++v8 == v10)
        goto LABEL_60;
      continue;
    }
    return 1;
  }
}

unint64_t sub_22EFDE094(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, char a10)
{
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t result;
  char v21;

  if (a2)
  {
    v16 = a2;
    if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x16)
    {
      v17 = (uint64_t *)(a2 + 104);
      if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x15)
        v17 = (uint64_t *)(a2 + 88);
      v16 = *v17;
    }
    *(_QWORD *)((*(_QWORD *)(v16 + 120) & 0xFFFFFFFFFFFFFFF8) + 64) = 0;
  }
  if (a2)
    v18 = a2 + 48;
  else
    v18 = 0;
  v19 = sub_22EFC7430(96, a1, v18, 0);
  result = sub_22EFC5A18(v19, 51, v18, a3, a4, a5, a6, a7, a9, 0, 0);
  *(_QWORD *)result = &off_24FAC4730;
  *(_QWORD *)(result + 80) = 0;
  if (a10)
    v21 = 8;
  else
    v21 = 0;
  *(_BYTE *)(result + 88) = v21 & 0xF8 | a8 & 7 | *(_BYTE *)(result + 88) & 0xF0;
  return result;
}

_QWORD *sub_22EFDE1AC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = (_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8);
  if ((v1 & 4) != 0)
    v2 = (_QWORD *)*v2;
  result = v2 - 6;
  if (v2)
    v4 = v2 - 6;
  else
    v4 = 0;
  if ((*((_DWORD *)v4 + 7) & 0x7F) == 0x13)
  {
    v5 = v4 + 13;
  }
  else
  {
    if ((*((_DWORD *)v4 + 7) & 0x7F) != 0x15)
      return result;
    v5 = v4 + 11;
  }
  return (_QWORD *)*v5;
}

BOOL sub_22EFDE1F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(_QWORD *)v2 + 8 * v4;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while (*(_WORD *)(*(_QWORD *)v3 + 32) != 487)
    {
      v3 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

uint64_t sub_22EFDE258(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];
  __int128 v12;
  _QWORD v13[2];
  char v14;

  v12 = 0u;
  memset(v11, 0, sizeof(v11));
  v13[0] = a1;
  sub_22E8A74D4(v11, v13);
  while (*((_QWORD *)&v12 + 1))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v11[0] + 1) + (((unint64_t)v12 >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * (v12 & 0x1FF));
    *(_QWORD *)&v12 = v12 + 1;
    --*((_QWORD *)&v12 + 1);
    if ((unint64_t)v12 >= 0x400)
    {
      operator delete(**((void ***)&v11[0] + 1));
      *((_QWORD *)&v11[0] + 1) += 8;
      *(_QWORD *)&v12 = v12 - 512;
    }
    v4 = sub_22F259248(v3);
    if ((uint64_t *)v4 != v5)
    {
      v6 = (uint64_t *)v4;
      v7 = v5;
      do
      {
        v10 = 0;
        v10 = *v6;
        v9 = *(_QWORD *)(v10 + 96);
        sub_22F275184(a2, &v9, (uint64_t)v13);
        if (v14)
          sub_22E8A74D4(v11, &v10);
        ++v6;
      }
      while (v6 != v7);
    }
  }
  return sub_22E8A77E8((uint64_t)v11);
}

uint64_t sub_22EFDE364(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;

  v3 = *(_QWORD *)(result + 104);
  if (!v3)
  {
    v4 = result;
    result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(result + 96) + 88), *(_QWORD *)(result + 96));
    v3 = *(_QWORD *)(v4 + 104);
  }
  if (v3 >= 8)
  {
    v5 = (uint64_t *)(v3 & 0xFFFFFFFFFFFFFFF8);
    v6 = *v5;
    if (*v5)
    {
      v7 = sub_22F256388(*v5);
      if (v7 != v8)
      {
        v9 = v7;
        v10 = v8;
        do
        {
          v11 = *(_QWORD *)(v9 + 40);
          if ((v11 & 7) != 0)
            v12 = 0;
          else
            v12 = v11 & 0xFFFFFFFFFFFFFFF8;
          v13 = (*(_DWORD *)(v9 + 72) >> 14) & 1;
          v18 = v12;
          v19 = v13;
          v20 = v9;
          sub_22F3B63F8(a2, (uint64_t)&v18);
          do
            v9 = *(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v9 && (*(_DWORD *)(v9 + 28) & 0x7F) != 0x19);
        }
        while (v9 != v10);
      }
      result = sub_22F259248(v6);
      if ((uint64_t *)result != v14)
      {
        v15 = (uint64_t *)result;
        v16 = v14;
        do
        {
          v17 = *v15++;
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 104))(v17, a2);
        }
        while (v15 != v16);
      }
    }
  }
  return result;
}

uint64_t sub_22EFDE464(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];

  v7 = *(_QWORD *)(result + 104);
  if (!v7)
  {
    v8 = result;
    result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(result + 96) + 88), *(_QWORD *)(result + 96));
    v7 = *(_QWORD *)(v8 + 104);
  }
  if (v7 >= 8)
  {
    v9 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
    v21 = v9;
    if (v9)
    {
      result = (uint64_t)sub_22F33A3F0((uint64_t)v22, a3, &v21);
      if (v22[16])
      {
        result = sub_22F256388(v9);
        while (result != v10)
        {
          if (result != a2)
          {
            v11 = *(_QWORD *)(result + 40);
            v12 = (v11 & 7) != 0 ? 0 : v11 & 0xFFFFFFFFFFFFFFF8;
            v13 = *(_QWORD *)(a2 + 40);
            v14 = (v13 & 7) != 0 ? 0 : v13 & 0xFFFFFFFFFFFFFFF8;
            if (v12 == v14)
            {
              v15 = *(_DWORD *)(a4 + 8);
              if (v15 >= *(_DWORD *)(a4 + 12))
              {
                v20 = result;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                result = v20;
                v15 = *(_DWORD *)(a4 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a4 + 8 * v15) = result;
              ++*(_DWORD *)(a4 + 8);
              return result;
            }
          }
          do
            result = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8;
          while (result && (*(_DWORD *)(result + 28) & 0x7F) != 0x19);
        }
        result = sub_22F259248(v9);
        if ((uint64_t *)result != v16)
        {
          v17 = (uint64_t *)result;
          v18 = v16;
          do
          {
            v19 = *v17++;
            result = sub_22EFDE464(v19, a2, a3, a4);
          }
          while (v17 != v18);
        }
      }
    }
  }
  return result;
}

unint64_t sub_22EFDE5CC(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  result = sub_22F276498(a1);
  while (result != v4)
  {
    v5 = *(_QWORD *)(result + 56);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 40);
      v7 = (v6 & 7) != 0 ? 0 : v6 & 0xFFFFFFFFFFFFFFF8;
      if (v7 == a2)
        return result;
    }
    do
      result = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8;
    while (result && (*(_DWORD *)(result + 28) & 0x7F) != 0x4E);
  }
  return 0;
}

unint64_t sub_22EFDE638(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  int v13;

  result = sub_22F276498(a1);
  if (result != v6)
  {
    v7 = 0;
    while (1)
    {
      v8 = *(_QWORD *)(result + 48);
      v9 = *(_QWORD *)(v8 + 40);
      if ((v9 & 7) != 0)
        v10 = 0;
      else
        v10 = v9 & 0xFFFFFFFFFFFFFFF8;
      if (v10 != a2)
        goto LABEL_7;
      if (a3 == 2)
        break;
      if (a3 <= 1)
      {
        v12 = *(_BYTE *)(v8 + 73);
        v11 = result;
        if ((v12 & 0x40) == 0)
          return result;
        goto LABEL_8;
      }
      v13 = *(_DWORD *)(v8 + 72);
      v11 = result;
      if ((v13 & 0x4000) == 0)
        goto LABEL_7;
      do
LABEL_8:
        result = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8;
      while (result && (*(_DWORD *)(result + 28) & 0x7F) != 0x4E);
      v7 = v11;
      if (result == v6)
        goto LABEL_21;
    }
    if ((*(_BYTE *)(v8 + 73) & 0x40) != 0)
      return result;
LABEL_7:
    v11 = v7;
    goto LABEL_8;
  }
  v11 = 0;
LABEL_21:
  if (a3)
    return 0;
  else
    return v11;
}

unint64_t sub_22EFDE700(_DWORD *a1)
{
  uint64_t v1;
  unsigned int v2;

  LODWORD(v1) = a1[6];
  v2 = a1[10];
  if (v2)
    v1 = v2;
  else
    v1 = v1;
  return a1[9] | (unint64_t)(v1 << 32);
}

unint64_t sub_22EFDE718(unint64_t a1)
{
  if ((*(_BYTE *)(a1 + 29) & 0x80) != 0)
    return sub_22EFB5D7C(a1);
  return a1;
}

uint64_t sub_22EFDE728(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;

  v7 = result;
  while (v7)
  {
    if ((*(_DWORD *)(v7 + 28) & 0x7F) == 0x13)
    {
      if ((a4 & 1) != 0)
      {
        result = sub_22EFDA1A0(v7, *(_QWORD *)(a2 + 40), (*(_QWORD *)(a2 + 56) >> 17) & 1, 1);
        if (result && result != a2)
        {
LABEL_31:
          v23 = *(_DWORD *)(a3 + 8);
          if (v23 >= *(_DWORD *)(a3 + 12))
          {
            v24 = result;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            result = v24;
            v23 = *(_DWORD *)(a3 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v23) = result;
          ++*(_DWORD *)(a3 + 8);
          return result;
        }
      }
      v18 = *(_QWORD *)(v7 + 120) & 0xFFFFFFFFFFFFFFF8;
      v19 = *(unsigned int *)(v18 + 24);
      if ((_DWORD)v19)
      {
        v20 = *(uint64_t **)(v18 + 16);
        v21 = 8 * v19;
        do
        {
          v22 = *v20++;
          result = sub_22EFDE728(v22, a2, a3, a4 & 1);
          v21 -= 8;
        }
        while (v21);
      }
      return result;
    }
    result = sub_22EFDA1A0(v7, *(_QWORD *)(a2 + 40), (*(_QWORD *)(a2 + 56) >> 17) & 1, 1);
    if (result)
      v8 = result == a2;
    else
      v8 = 1;
    if (!v8)
      goto LABEL_31;
    if ((*(_DWORD *)(v7 + 28) & 0x7F) == 0x17)
    {
      result = sub_22F259248(v7);
      if ((uint64_t *)result != v13)
      {
        v14 = (uint64_t *)result;
        v15 = v13;
        do
        {
          v16 = *v14++;
          result = sub_22EFDE728(v16, a2, a3, a4 & 1);
        }
        while (v14 != v15);
      }
    }
    if ((*(_DWORD *)(v7 + 28) & 0x7F) == 0x16)
    {
      v9 = (uint64_t *)sub_22F2590A8(v7);
      v10 = sub_22F25910C(v7);
      while (v9 != (uint64_t *)v10)
      {
        v11 = *v9++;
        sub_22EFDE728(v11, a2, a3, a4 & 1);
      }
      for (i = sub_22F257E10(v7); i; i = *(_QWORD *)(i + 128))
        sub_22EFDE728(i, a2, a3, a4 & 1);
      result = sub_22F3B46CC(v7);
      v7 = result;
      a4 = 1;
      if (result)
        continue;
    }
    return result;
  }
  return result;
}

uint64_t sub_22EFDE918(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(uint64_t **)a1;
  v2 = *(unsigned int *)(a1 + 8);
  i = *(uint64_t **)a1;
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    for (i = *(uint64_t **)a1; *(_WORD *)(*i + 32) != 488; ++i)
    {
      v4 -= 8;
      if (!v4)
        return 0;
    }
  }
  if (i == &v1[v2])
    return 0;
  do
  {
    v6 = *v1++;
    result = v6;
  }
  while (*(_WORD *)(v6 + 32) != 488);
  return result;
}

__n128 sub_22EFDE978(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 result)
{
  char *v7;
  __n128 *v8;
  __n128 *v10;
  uint64_t v11;
  __n128 *v12;
  __n128 *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __n128 *v18;
  __n128 *v20;
  unint64_t v21;
  __n128 *v22;
  unint64_t v23;
  __n128 v24;
  __n128 *v25;
  __n128 *v26;
  __n128 *v27;
  __n128 v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;

  if (a3 >= 2)
  {
    v7 = (char *)a1;
    if (a3 == 2)
    {
      v8 = a2 - 1;
      if (a2[-1].n128_u64[0] < a1->n128_u64[0])
      {
        result = *a1;
        *a1 = *v8;
        *v8 = result;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v20 = a4;
      v21 = a3 >> 1;
      v22 = &a1[a3 >> 1];
      v23 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v24 = sub_22EFDEB98(a1, v22, v23, a4, result);
        v25 = &v20[v21];
        result.n128_u64[0] = sub_22EFDEB98((__n128 *)&v7[16 * (a3 >> 1)], a2, a3 - (a3 >> 1), v25, v24).n128_u64[0];
        v26 = &v20[a3];
        v27 = v25;
        while (v27 != v26)
        {
          if (v27->n128_u64[0] >= v20->n128_u64[0])
          {
            v29 = *v20++;
            result = v29;
          }
          else
          {
            v28 = *v27++;
            result = v28;
          }
          *(__n128 *)v7 = result;
          v7 += 16;
          if (v20 == v25)
          {
            if (v27 != v26)
            {
              v30 = 0;
              do
              {
                result = v27[v30];
                *(__n128 *)&v7[v30 * 16] = result;
                ++v30;
              }
              while (&v27[v30] != v26);
            }
            return result;
          }
        }
        if (v20 != v25)
        {
          v31 = 0;
          do
          {
            result = v20[v31];
            *(__n128 *)&v7[v31 * 16] = result;
            ++v31;
          }
          while (&v20[v31] != v25);
        }
      }
      else
      {
        sub_22EFDE978(a1, v22, v23, a4, a5);
        sub_22EFDE978(&v7[16 * (a3 >> 1)], a2, a3 - (a3 >> 1), v20, a5);
        sub_22EFDED80(v7, &v7[16 * (a3 >> 1)], (char *)a2, a3 >> 1, a3 - (a3 >> 1), v20, a5);
      }
    }
    else if (a1 != a2)
    {
      v10 = a1 + 1;
      if (&a1[1] != a2)
      {
        v11 = 0;
        v12 = a1;
        do
        {
          v13 = v10;
          v14 = v12[1].n128_u64[0];
          if (v14 < v12->n128_u64[0])
          {
            v15 = v12[1].n128_u64[1];
            v16 = v11;
            while (1)
            {
              result = *(__n128 *)((char *)a1 + v16);
              *(__n128 *)((char *)a1 + v16 + 16) = result;
              if (!v16)
                break;
              v17 = *(unint64_t *)((char *)a1[-1].n128_u64 + v16);
              v16 -= 16;
              if (v14 >= v17)
              {
                v18 = (__n128 *)((char *)a1 + v16 + 16);
                goto LABEL_15;
              }
            }
            v18 = a1;
LABEL_15:
            v18->n128_u64[0] = v14;
            v18->n128_u64[1] = v15;
          }
          v10 = v13 + 1;
          v11 += 16;
          v12 = v13;
        }
        while (&v13[1] != a2);
      }
    }
  }
  return result;
}

__n128 sub_22EFDEB98(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  __n128 *v5;
  __n128 *v8;
  __n128 *v9;
  __n128 *v10;
  uint64_t v11;
  __n128 *v12;
  __n128 *v13;
  unint64_t v14;
  __n128 *v15;
  uint64_t v16;
  __n128 v17;
  __n128 *v18;
  __n128 *v19;
  __n128 v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;

  if (a3)
  {
    v5 = a4;
    v8 = a1;
    if (a3 == 2)
    {
      v9 = a2 - 1;
      if (a2[-1].n128_u64[0] >= a1->n128_u64[0])
      {
        *a4 = *a1;
        result = *v9;
      }
      else
      {
        *a4 = *v9;
        result = *a1;
      }
      a4[1] = result;
    }
    else if (a3 == 1)
    {
      result = *a1;
      *a4 = *a1;
    }
    else if ((uint64_t)a3 > 8)
    {
      v18 = &a1[a3 >> 1];
      sub_22EFDE978(a1, v18, a3 >> 1, a4, a3 >> 1);
      sub_22EFDE978(&v8[a3 >> 1], a2, a3 - (a3 >> 1), &v5[a3 >> 1], a3 - (a3 >> 1));
      v19 = &v8[a3 >> 1];
      while (v19 != a2)
      {
        if (v19->n128_u64[0] >= v8->n128_u64[0])
        {
          v21 = *v8++;
          result = v21;
        }
        else
        {
          v20 = *v19++;
          result = v20;
        }
        *v5++ = result;
        if (v8 == v18)
        {
          if (v19 != a2)
          {
            v22 = 0;
            do
            {
              result = v19[v22];
              v5[v22++] = result;
            }
            while (&v19[v22] != a2);
          }
          return result;
        }
      }
      if (v8 != v18)
      {
        v23 = 0;
        do
        {
          result = v8[v23];
          v5[v23++] = result;
        }
        while (&v8[v23] != v18);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      *a4 = *a1;
      v10 = a1 + 1;
      if (&a1[1] != a2)
      {
        v11 = 0;
        v12 = a4;
        do
        {
          v13 = v12;
          v14 = v12->n128_u64[0];
          v15 = ++v12;
          if (v10->n128_u64[0] < v14)
          {
            *v12 = *v13;
            v15 = a4;
            if (v13 != a4)
            {
              v16 = v11;
              while (1)
              {
                v15 = (__n128 *)((char *)a4 + v16);
                if (v10->n128_u64[0] >= *(unint64_t *)((char *)a4[-1].n128_u64 + v16))
                  break;
                *v15 = *(__n128 *)((char *)a4 + v16 - 16);
                v16 -= 16;
                if (!v16)
                {
                  v15 = a4;
                  break;
                }
              }
            }
          }
          v17 = *v10++;
          result.n128_u64[0] = v17.n128_u64[0];
          *v15 = v17;
          v11 += 16;
        }
        while (v10 != a2);
      }
    }
  }
  return result;
}

char *sub_22EFDED80(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, _OWORD *a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  char *v46;
  char *v47;
  char *v48;
  BOOL v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  char *v60;
  uint64_t v61;
  _OWORD *v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  BOOL v66;
  char *v67;
  unint64_t v68;
  __int128 *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _OWORD *v74;
  _OWORD *v75;
  char *v76;
  char *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;

  if (a5)
  {
    v8 = a5;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4)
        return result;
      v11 = 0;
      v12 = -a4;
      while (*(_QWORD *)a2 >= *(_QWORD *)&result[v11])
      {
        v11 += 16;
        v66 = __CFADD__(v12++, 1);
        if (v66)
          return result;
      }
      v13 = -v12;
      v14 = &result[v11];
      if (-v12 >= v8)
      {
        if (v12 == -1)
        {
          v81 = *(_OWORD *)&result[v11];
          *(_OWORD *)&result[v11] = *(_OWORD *)a2;
          *(_OWORD *)a2 = v81;
          return result;
        }
        if (v12 > 0)
          v13 = 1 - v12;
        v24 = v13 >> 1;
        v18 = &result[16 * (v13 >> 1) + v11];
        v17 = a3;
        if (a3 != a2)
        {
          v25 = (a3 - a2) >> 4;
          v17 = a2;
          do
          {
            v26 = v25 >> 1;
            v27 = &v17[16 * (v25 >> 1)];
            v29 = *(_QWORD *)v27;
            v28 = v27 + 16;
            v25 += ~(v25 >> 1);
            if (v29 < *(_QWORD *)v18)
              v17 = v28;
            else
              v25 = v26;
          }
          while (v25);
        }
        v16 = (v17 - a2) >> 4;
      }
      else
      {
        if (v8 >= 0)
          v15 = v8;
        else
          v15 = v8 + 1;
        v16 = v15 >> 1;
        v17 = &a2[16 * (v15 >> 1)];
        v18 = a2;
        if (v14 != a2)
        {
          v19 = (a2 - result - v11) >> 4;
          v18 = &result[v11];
          do
          {
            v20 = v19 >> 1;
            v21 = &v18[16 * (v19 >> 1)];
            v23 = *(_QWORD *)v21;
            v22 = v21 + 16;
            v19 += ~(v19 >> 1);
            if (*(_QWORD *)v17 < v23)
              v19 = v20;
            else
              v18 = v22;
          }
          while (v19);
        }
        v24 = (v18 - result - v11) >> 4;
      }
      v30 = v17;
      if (v18 != a2)
      {
        v30 = v18;
        if (a2 != v17)
        {
          if (v18 + 16 == a2)
          {
            v79 = *(_OWORD *)v18;
            v36 = v17 - a2;
            v74 = a6;
            v76 = &result[v11];
            v37 = a3;
            v38 = v16;
            memmove(v18, a2, v17 - a2);
            v16 = v38;
            a6 = v74;
            v14 = v76;
            a3 = v37;
            v30 = &v18[v36];
            *(_OWORD *)v30 = v79;
          }
          else if (a2 + 16 == v17)
          {
            v30 = v18 + 16;
            v80 = *((_OWORD *)v17 - 1);
            if (v17 - 16 != v18)
            {
              v75 = a6;
              v77 = &result[v11];
              v39 = a3;
              v40 = v16;
              memmove(v18 + 16, v18, v17 - 16 - v18);
              v16 = v40;
              a6 = v75;
              v14 = v77;
              a3 = v39;
            }
            *(_OWORD *)v18 = v80;
          }
          else
          {
            v31 = (a2 - v18) >> 4;
            if (v31 == (v17 - a2) >> 4)
            {
              v32 = 0;
              do
              {
                v78 = *(_OWORD *)&v18[v32];
                *(_OWORD *)&v18[v32] = *(_OWORD *)&a2[v32];
                v33 = (uint64_t)&v18[v32 + 16];
                *(_OWORD *)&a2[v32] = v78;
                v34 = (uint64_t)&a2[v32 + 16];
                v32 += 16;
              }
              while ((char *)v33 != a2 && v34 != (_QWORD)v17);
              v30 = a2;
            }
            else
            {
              v41 = (v17 - a2) >> 4;
              v42 = (a2 - v18) >> 4;
              do
              {
                v43 = v42;
                v42 = v41;
                v41 = v43 % v41;
              }
              while (v41);
              if (v42)
              {
                v44 = &v18[16 * v42];
                do
                {
                  v45 = *((_OWORD *)v44 - 1);
                  v44 -= 16;
                  v46 = &v44[16 * v31];
                  v47 = v44;
                  do
                  {
                    v48 = v47;
                    v47 = v46;
                    *(_OWORD *)v48 = *(_OWORD *)v46;
                    v49 = __OFSUB__(v31, (v17 - v46) >> 4);
                    v51 = v31 - ((v17 - v46) >> 4);
                    v50 = (v51 < 0) ^ v49;
                    v46 = &v18[16 * v51];
                    if (v50)
                      v46 = &v47[16 * v31];
                  }
                  while (v46 != v44);
                  *(_OWORD *)v47 = v45;
                }
                while (v44 != v18);
              }
              v30 = &v18[16 * ((v17 - a2) >> 4)];
            }
          }
        }
      }
      a4 = -(v24 + v12);
      v52 = v8 - v16;
      if (v24 + v16 >= v8 - (v24 + v16) - v12)
      {
        v56 = -(v24 + v12);
        v57 = v16;
        v58 = v8 - v16;
        v59 = a6;
        v60 = v14;
        sub_22EFDED80(v30, v17, a3, v56, v58, a6, a7);
        result = v60;
        a6 = v59;
        v17 = v18;
        v52 = v57;
        a4 = v24;
        a3 = v30;
      }
      else
      {
        v53 = v18;
        v54 = a6;
        v55 = a3;
        sub_22EFDED80(v14, v53, v30, v24, v16, a6, a7);
        a3 = v55;
        a6 = v54;
        result = v30;
      }
      v8 = v52;
      a2 = v17;
      if (!v52)
        return result;
    }
    if (a4 <= v8)
    {
      if (result != a2)
      {
        v68 = 0;
        do
        {
          a6[v68 / 0x10] = *(_OWORD *)&result[v68];
          v68 += 16;
        }
        while (&result[v68] != a2);
        if (v68)
        {
          v69 = a6;
          while (a2 != a3)
          {
            if (*(_QWORD *)a2 >= *(_QWORD *)v69)
            {
              v72 = *v69++;
              v71 = v72;
            }
            else
            {
              v70 = *(_OWORD *)a2;
              a2 += 16;
              v71 = v70;
            }
            *(_OWORD *)result = v71;
            result += 16;
            if (&a6[v68 / 0x10] == v69)
              return result;
          }
          return (char *)memmove(result, v69, (char *)a6 - (char *)v69 + v68);
        }
      }
    }
    else if (a2 != a3)
    {
      v61 = 0;
      do
      {
        a6[v61] = *(_OWORD *)&a2[v61 * 16];
        ++v61;
      }
      while (&a2[v61 * 16] != a3);
      if (v61 * 16)
      {
        v62 = &a6[v61];
        v63 = a3 - 16;
        while (a2 != result)
        {
          v64 = *((_QWORD *)v62 - 2);
          v65 = *((_QWORD *)a2 - 2);
          v66 = v64 >= v65;
          if (v64 >= v65)
            v67 = (char *)(v62 - 1);
          else
            v67 = a2 - 16;
          if (v66)
            --v62;
          else
            a2 -= 16;
          *(_OWORD *)v63 = *(_OWORD *)v67;
          v63 -= 16;
          if (v62 == a6)
            return result;
        }
        if (v62 != a6)
        {
          v73 = 0;
          do
          {
            *(_OWORD *)&v63[v73 * 16] = v62[v73 - 1];
            --v73;
          }
          while (&v62[v73] != a6);
        }
      }
    }
  }
  return result;
}

void sub_22EFDF258(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

llvm::raw_ostream *sub_22EFDF2A0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  const char *v3;
  llvm::raw_ostream *v4;
  _QWORD *v5;
  void *v6;
  size_t v7;
  _WORD *v8;
  int v9;
  llvm::raw_ostream *v10;
  _WORD *v11;
  int i;
  llvm::raw_ostream *v13;
  _WORD *v14;
  llvm::raw_ostream *result;
  _BYTE *v16;

  v2 = *(_DWORD *)(v1 + 48) & 0xE000;
  if (v2 == 0x2000)
    v3 = "C";
  else
    v3 = "C++";
  v4 = *(llvm::raw_ostream **)v0;
  v5 = *(_QWORD **)(*(_QWORD *)v0 + 32);
  if (*(_QWORD *)(*(_QWORD *)v0 + 24) - (_QWORD)v5 > 7uLL)
  {
    *v5 = 0x22206E7265747865;
    v6 = (void *)(*((_QWORD *)v4 + 4) + 8);
    *((_QWORD *)v4 + 4) = v6;
  }
  else
  {
    v4 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)v0, "extern \"");
    v6 = (void *)*((_QWORD *)v4 + 4);
  }
  if (v2 == 0x2000)
    v7 = 1;
  else
    v7 = 3;
  if (v7 <= *((_QWORD *)v4 + 3) - (_QWORD)v6)
  {
    memcpy(v6, v3, v7);
    v8 = (_WORD *)(*((_QWORD *)v4 + 4) + v7);
    *((_QWORD *)v4 + 4) = v8;
  }
  else
  {
    v4 = (llvm::raw_ostream *)llvm::raw_ostream::write(v4, v3);
    v8 = (_WORD *)*((_QWORD *)v4 + 4);
  }
  if (*((_QWORD *)v4 + 3) - (_QWORD)v8 > 1uLL)
  {
    *v8 = 8226;
    *((_QWORD *)v4 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\" ");
  }
  v9 = *(_DWORD *)(v1 + 48);
  if ((v9 & 0x10000) == 0)
  {
    if ((v9 & 0x80) != 0)
      sub_22EFCC320(v1 + 40);
    JUMPOUT(0x22EFDF288);
  }
  v10 = *(llvm::raw_ostream **)v0;
  v11 = *(_WORD **)(*(_QWORD *)v0 + 32);
  if (*(_QWORD *)(*(_QWORD *)v0 + 24) - (_QWORD)v11 > 1uLL)
  {
    *v11 = 2683;
    *((_QWORD *)v10 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v10, "{\n");
  }
  sub_22EFE433C(v0, v1 + 40, 1);
  for (i = *(_DWORD *)(v0 + 32); i; --i)
  {
    v13 = *(llvm::raw_ostream **)v0;
    v14 = *(_WORD **)(*(_QWORD *)v0 + 32);
    if (*(_QWORD *)(*(_QWORD *)v0 + 24) - (_QWORD)v14 > 1uLL)
    {
      *v14 = 8224;
      *((_QWORD *)v13 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v13, "  ");
    }
  }
  result = *(llvm::raw_ostream **)v0;
  v16 = *(_BYTE **)(*(_QWORD *)v0 + 32);
  if (*(_BYTE **)(*(_QWORD *)v0 + 24) == v16)
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result, "}");
  *v16 = 125;
  ++*((_QWORD *)result + 4);
  return result;
}

void sub_22EFE2E98()
{
  JUMPOUT(0x22EFE1D28);
}

void sub_22EFE3E14()
{
  JUMPOUT(0x22EFE0E30);
}

llvm::raw_ostream *sub_22EFE3E24(uint64_t a1, uint64_t a2, char a3)
{
  llvm::raw_ostream *v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  _WORD *v17;
  int v18;
  llvm::raw_ostream *result;
  _BYTE *v20;
  _BYTE *v21;

  if ((a3 & 1) == 0)
  {
    v6 = *(llvm::raw_ostream **)a1;
    v7 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v7) > 8)
    {
      *(_BYTE *)(v7 + 8) = 32;
      *(_QWORD *)v7 = *(_QWORD *)"template ";
      *((_QWORD *)v6 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v6, "template ");
    }
  }
  v8 = *(llvm::raw_ostream **)a1;
  v9 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if ((unint64_t)v9 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
  {
    llvm::raw_ostream::write(v8);
  }
  else
  {
    *((_QWORD *)v8 + 4) = v9 + 1;
    *v9 = 60;
  }
  v10 = *(_DWORD *)(a2 + 12);
  v11 = v10 & 0x1FFFFFFF;
  if ((v10 & 0x1FFFFFFF) != 0)
  {
    v12 = 0;
    v13 = (uint64_t *)(a2 + 16);
    v14 = 8 * v11;
    do
    {
      v15 = *v13;
      if ((*(_BYTE *)(*v13 + 29) & 2) == 0)
      {
        if ((v12 & 1) != 0)
        {
          v16 = *(llvm::raw_ostream **)a1;
          v17 = *(_WORD **)(*(_QWORD *)a1 + 32);
          if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v17 > 1uLL)
          {
            *v17 = 8236;
            *((_QWORD *)v16 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v16, ", ");
          }
        }
        v18 = *(_DWORD *)(v15 + 28) & 0x7F;
        switch(v18)
        {
          case ' ':
            sub_22EFE5050(a1, v15);
            break;
          case ';':
            sub_22EFE4F24(a1, v15);
            break;
          case '&':
            sub_22EFE4C44(a1, v15);
            break;
        }
        v12 = 1;
      }
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  result = *(llvm::raw_ostream **)a1;
  v20 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if ((unint64_t)v20 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(result);
    if ((a3 & 1) != 0)
      return result;
  }
  else
  {
    *((_QWORD *)result + 4) = v20 + 1;
    *v20 = 62;
    if ((a3 & 1) != 0)
      return result;
  }
  result = *(llvm::raw_ostream **)a1;
  v21 = *(_BYTE **)(*(_QWORD *)a1 + 32);
  if ((unint64_t)v21 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v21 + 1;
  *v21 = 32;
  return result;
}

unint64_t *sub_22EFE4014(unint64_t *result, int a2, llvm::raw_ostream *this, unint64_t *a4, int a5)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int k;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  char i;
  uint64_t v23;
  _WORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t j;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::raw_ostream *v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  char v39;

  if (a2 != 1)
  {
    if (*result)
      v16 = (*(_DWORD *)(*result + 28) & 0x7Fu) - 33 >= 5;
    else
      v16 = 1;
    v17 = !v16;
    if (v17 == a2)
      return result;
    v18 = &result[a2];
    v20 = *a4;
    v19 = a4[1];
    v21 = &result[v17];
    for (i = 1; ; i = 0)
    {
      if ((i & 1) != 0)
      {
        v23 = v20 | 0x800;
        if (!(_DWORD)v17)
          v23 = v20;
        v20 = v23 & 0xFFFFFFFFFFFFFEFFLL;
      }
      else
      {
        v24 = (_WORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v24 > 1uLL)
        {
          *v24 = 8236;
          *((_QWORD *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, ", ");
        }
        v20 = v20 & 0xFFFFFFFFFFFFF6FFLL | 0x100;
      }
      v25 = *v21;
      if (!*v21)
        break;
      v26 = *v21;
      if ((*(_DWORD *)(v25 + 28) & 0x7F) != 0x53)
        break;
LABEL_70:
      v33 = *(_QWORD *)(v26 + 88);
      v35 = this;
      *(_QWORD *)&v36 = v20;
      *((_QWORD *)&v36 + 1) = v19;
      v37 = v33;
      v38 = a5;
      v39 = 0;
      result = (unint64_t *)sub_22EFDF258(&v35);
      if (++v21 == v18)
        return result;
    }
    for (j = *(_QWORD *)(v25 + 16); ; j = *(_QWORD *)(v28 + v30 + 16))
    {
      v28 = j & 0xFFFFFFFFFFFFFFF8;
      if ((j & 4) != 0)
        v28 = *(_QWORD *)v28;
      v29 = *(_WORD *)(v28 + 8) & 0x7F;
      if (v29 == 83)
      {
        v26 = v28 - 40;
        goto LABEL_70;
      }
      v30 = -40;
      if ((*(_WORD *)(v28 + 8) & 0x7Fu) > 0x46)
      {
        if (v29 == 71)
        {
          v30 = -56;
          continue;
        }
        if (v29 != 81)
          goto LABEL_60;
      }
      else
      {
        if (v29 > 0x18)
          goto LABEL_59;
        if (v29 == 16)
          goto LABEL_53;
        if (((1 << v29) & 0x1066) == 0)
        {
          if (v29 == 24)
          {
LABEL_53:
            v30 = -48;
            continue;
          }
LABEL_59:
          if (v29 == 70)
          {
            v30 = -64;
            continue;
          }
LABEL_60:
          v31 = v29 - 52;
          if (v29 - 33 >= 5)
            v32 = -48;
          else
            v32 = -64;
          v16 = v31 >= 6;
          v30 = -72;
          if (v16)
            v30 = v32;
          continue;
        }
      }
    }
  }
  v7 = *result;
  if (!*result || (v8 = *result, (*(_DWORD *)(v7 + 28) & 0x7F) != 0x53))
  {
    v9 = *(_QWORD *)(v7 + 16);
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 4) != 0)
      v10 = *(_QWORD *)v10;
    for (k = *(_WORD *)(v10 + 8) & 0x7F; k != 83; k = *(_WORD *)(v10 + 8) & 0x7F)
    {
      v12 = -40;
      if (k > 70)
      {
        if (k == 71)
        {
          v12 = -56;
        }
        else if (k != 81)
        {
          goto LABEL_17;
        }
      }
      else
      {
        if (k > 0x18)
          goto LABEL_16;
        if (k == 16)
          goto LABEL_10;
        if (((1 << k) & 0x1066) != 0)
          goto LABEL_23;
        if (k == 24)
        {
LABEL_10:
          v12 = -48;
        }
        else
        {
LABEL_16:
          if (k != 70)
          {
LABEL_17:
            v13 = k - 52;
            if ((k - 33) >= 5)
              v14 = -48;
            else
              v14 = -64;
            if (v13 >= 6)
              v12 = v14;
            else
              v12 = -72;
            goto LABEL_23;
          }
          v12 = -64;
        }
      }
LABEL_23:
      v15 = *(_QWORD *)(v10 + v12 + 16);
      v10 = v15 & 0xFFFFFFFFFFFFFFF8;
      if ((v15 & 4) != 0)
        v10 = *(_QWORD *)v10;
    }
    v8 = v10 - 40;
  }
  v34 = *(_QWORD *)(v8 + 88);
  v35 = this;
  v36 = *(_OWORD *)a4;
  v37 = v34;
  v38 = a5;
  v39 = 0;
  return (unint64_t *)sub_22EFDF258(&v35);
}

void sub_22EFE433C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v11;
  _BYTE *v12;
  unint64_t *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t *v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  int v29;
  llvm::raw_ostream *v30;
  _WORD *v31;
  llvm::raw_ostream *v32;
  _WORD *v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  llvm::raw_ostream *v39;
  _WORD *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  llvm::raw_ostream *v47;
  char *v48;
  llvm::raw_ostream *v49;
  _BYTE *v50;
  llvm::raw_ostream *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[3];

  v55[2] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 0x40000000) != 0)
    return;
  if (a3)
    *(_DWORD *)(a1 + 32) += v3;
  v53 = v55;
  v54 = 0x200000000;
  if ((*(_BYTE *)(a2 + 8) & 0x80) != 0)
    sub_22EFCC320(a2);
  v7 = *(_QWORD *)(a2 + 16);
  if (!v7)
    goto LABEL_150;
  do
  {
    v8 = *(_DWORD *)(v7 + 28);
    v9 = v8 & 0x7F;
    if (v9 == 51 || (v8 & 0x200) != 0)
      goto LABEL_95;
    if ((v8 & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      v11 = *(_QWORD *)(v7 + 144) & 6;
      v12 = (_BYTE *)(*(_QWORD *)(v7 + 144) & 0xFFFFFFFFFFFFFFF8);
      if (v11 != 4 || v12 == 0)
      {
        if (v11 != 2 || v12 == 0)
          goto LABEL_24;
      }
      else
      {
        v12 += 16;
      }
      if ((*v12 & 6) == 0 && (*(_WORD *)(a2 + 8) & 0x7E) != 0x24)
        goto LABEL_95;
    }
LABEL_24:
    if ((v9 - 42) >= 0xFFFFFFFD)
    {
      v16 = *(_QWORD *)(v7 + 80);
      v15 = (unint64_t *)(v16 & 0xFFFFFFFFFFFFFFF8);
      if ((v16 & 4) != 0)
        v15 = (unint64_t *)((v16 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      if ((v9 - 75) < 0xFFFFFFE5)
        goto LABEL_81;
      v15 = (unint64_t *)(v7 + 48);
    }
    v17 = v54;
    if (!(_DWORD)v54 || (v18 = *v15, *v15 < 0x10))
    {
LABEL_82:
      if (v17)
        sub_22EFE4AF0((unint64_t *)a1, (uint64_t)&v53);
      if ((*(_DWORD *)(v7 + 28) & 0x7Fu) - 33 > 4)
      {
        v28 = *(_DWORD *)(a1 + 32);
        if ((*(_DWORD *)(v7 + 28) & 0x7F) == 0)
        {
          v29 = v28 - *(unsigned __int8 *)(a1 + 8);
          for (*(_DWORD *)(a1 + 32) = v29; v29; --v29)
          {
            v32 = *(llvm::raw_ostream **)a1;
            v33 = *(_WORD **)(*(_QWORD *)a1 + 32);
            if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v33 > 1uLL)
            {
              *v33 = 8224;
              *((_QWORD *)v32 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v32, "  ");
            }
          }
          sub_22EFE4BD4((llvm::raw_ostream **)a1, (*(_DWORD *)(v7 + 28) >> 13) & 3);
          v30 = *(llvm::raw_ostream **)a1;
          v31 = *(_WORD **)(*(_QWORD *)a1 + 32);
          if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v31 > 1uLL)
          {
            *v31 = 2618;
            *((_QWORD *)v30 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v30, ":\n");
          }
          *(_DWORD *)(a1 + 32) += *(unsigned __int8 *)(a1 + 8);
          goto LABEL_95;
        }
      }
      else
      {
        if ((*(_BYTE *)(v7 + 74) & 8) == 0)
        {
          v27 = v54;
          if (v54 >= (unint64_t)HIDWORD(v54))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v27 = v54;
          }
          *((_QWORD *)v53 + v27) = v7;
          goto LABEL_89;
        }
        v28 = *(_DWORD *)(a1 + 32);
      }
      for (; v28; --v28)
      {
        v39 = *(llvm::raw_ostream **)a1;
        v40 = *(_WORD **)(*(_QWORD *)a1 + 32);
        if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v40 > 1uLL)
        {
          *v40 = 8224;
          *((_QWORD *)v39 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v39, "  ");
        }
      }
      sub_22EFDF258(a1);
      v35 = *(_DWORD *)(v7 + 28);
      v36 = (v35 & 0x7F) - 24;
      if (v36 <= 0x35)
      {
        if (((1 << v36) & 0x38C00000000000) != 0)
        {
LABEL_109:
          if ((*(_BYTE *)(a1 + 11) & 0x40) == 0)
          {
            v37 = *(_DWORD *)(v7 + 28);
            if ((v37 & 0x7Eu) - 52 <= 5)
            {
              v38 = *(_QWORD *)(v7 + 80);
              if ((v38 & 0x8000000) != 0)
              {
                if ((v38 & 0x20000000) != 0)
                  goto LABEL_142;
              }
              else if (*(_QWORD *)(v7 + 128) | *(_QWORD *)(v7 + 80) & 0x20000000)
              {
                goto LABEL_142;
              }
            }
            if ((v37 & 0x7F) == 0x1D)
            {
              v43 = *(_QWORD *)(v7 + 48);
              v44 = *(_QWORD *)(v43 + 80);
              if ((v44 & 0x8000000) != 0)
              {
                if ((v44 & 0x20000000) != 0)
                  goto LABEL_142;
              }
              else if (*(_QWORD *)(v43 + 128) | *(_QWORD *)(v43 + 80) & 0x20000000)
              {
                goto LABEL_142;
              }
            }
          }
          v49 = *(llvm::raw_ostream **)a1;
          v50 = *(_BYTE **)(*(_QWORD *)a1 + 32);
          if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v50)
          {
            llvm::raw_ostream::write(v49, "\n");
          }
          else
          {
            *v50 = 10;
            ++*((_QWORD *)v49 + 4);
          }
LABEL_142:
          if (sub_22F3410BC(v7))
          {
            v51 = *(llvm::raw_ostream **)a1;
            v52 = *(void **)(*(_QWORD *)a1 + 32);
            if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v52 > 0x1EuLL)
            {
              qmemcpy(v52, "#pragma omp end declare target\n", 31);
              *((_QWORD *)v51 + 4) += 31;
            }
            else
            {
              llvm::raw_ostream::write(v51, "#pragma omp end declare target\n");
            }
          }
          goto LABEL_95;
        }
        if ((v35 & 0x7F) == 0x18)
        {
          if (((*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 72))(v7) & 1) != 0)
            goto LABEL_109;
          v35 = *(_DWORD *)(v7 + 28);
        }
      }
      if ((v35 & 0x7Eu) - 58 >= 0xFFFFFFFA)
      {
        v45 = v7;
      }
      else
      {
        v41 = (v35 & 0x7Fu) - 12;
        if (v41 > 0x37)
        {
          v42 = ";";
          goto LABEL_137;
        }
        if (((1 << v41) & 0xF91) != 0)
          goto LABEL_109;
        if (v41 != 17)
        {
          v42 = ";";
          if (v41 == 55)
          {
            v42 = ",";
            if (*(_QWORD *)(v7 + 8) < 8uLL)
              goto LABEL_109;
          }
          goto LABEL_137;
        }
        v45 = *(_QWORD *)(v7 + 48);
      }
      v46 = sub_22E49F868(v45);
      v42 = ";";
      if (v46)
        goto LABEL_109;
LABEL_137:
      v47 = *(llvm::raw_ostream **)a1;
      v48 = *(char **)(*(_QWORD *)a1 + 32);
      if (*(char **)(*(_QWORD *)a1 + 24) == v48)
      {
        llvm::raw_ostream::write(v47, v42);
      }
      else
      {
        *v48 = *v42;
        ++*((_QWORD *)v47 + 4);
      }
      goto LABEL_109;
    }
    while (1)
    {
      v19 = v18 & 0xFFFFFFFFFFFFFFF0;
      v20 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0);
      v21 = *(unsigned __int8 *)(v20 + 16);
      if (v21 <= 0x32 && ((1 << v21) & 0x7F80601141800) != 0)
        break;
      if (v21 != 39)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
        {
          v20 = sub_22F10CF48(v20);
          if (v20)
            goto LABEL_53;
          v20 = *(_QWORD *)v19;
          v21 = *(unsigned __int8 *)(*(_QWORD *)v19 + 16);
        }
        if (v21 != 32)
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
          {
            v20 = sub_22F10CF48(v20);
            if (v20)
              goto LABEL_53;
            v20 = *(_QWORD *)v19;
            v21 = *(unsigned __int8 *)(*(_QWORD *)v19 + 16);
          }
          if (v21 != 10)
          {
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10)
            {
              v20 = sub_22F10CF48(v20);
              if (v20)
                goto LABEL_53;
              v20 = *(_QWORD *)v19;
              v21 = *(unsigned __int8 *)(*(_QWORD *)v19 + 16);
            }
            if ((v21 & 0xFE) - 6 < 0xFFFFFFFC)
            {
              if (v21 - 27 > 0xFFFFFFFD)
                goto LABEL_50;
              if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16)
                 - 25 <= 1)
              {
                v20 = sub_22F10CF48(v20);
                if (v20)
                  goto LABEL_50;
                v20 = *(_QWORD *)v19;
              }
              v20 = sub_22E3E4B64(v20);
              if (!v20)
              {
                v20 = *(_QWORD *)v19;
                v24 = *(_DWORD *)(*(_QWORD *)v19 + 16);
                if (*(_QWORD *)v19 && (*(_DWORD *)(*(_QWORD *)v19 + 16) & 0xFE) == 0x28)
                {
                  do
                  {
LABEL_71:
                    if ((v24 & 0x100000) == 0)
                      goto LABEL_53;
                    v20 = *(_QWORD *)(*(_QWORD *)(v20 + 32) & 0xFFFFFFFFFFFFFFF0);
                    if (!v20)
                      break;
                    v24 = *(_DWORD *)(v20 + 16);
                  }
                  while ((v24 & 0xFE) == 0x28);
                  v20 = sub_22F10CF48(v20);
LABEL_70:
                  v24 = *(_DWORD *)(v20 + 16);
                  goto LABEL_71;
                }
                if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
                {
                  v20 = sub_22F10CF48(v20);
                  if (v20)
                    goto LABEL_70;
                  v20 = *(_QWORD *)v19;
                  LOBYTE(v24) = *(_BYTE *)(*(_QWORD *)v19 + 16);
                }
                v24 = v24;
                if (v24 == 14)
                {
LABEL_50:
                  v23 = (unint64_t *)(v20 + 24);
                  goto LABEL_54;
                }
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 14)
                {
                  v20 = sub_22F10CF48(v20);
                  if (v20)
                    goto LABEL_50;
                  v20 = *(_QWORD *)v19;
                  v24 = *(unsigned __int8 *)(*(_QWORD *)v19 + 16);
                }
                if (v24 != 37)
                {
                  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 37)
                    break;
                  v20 = sub_22F10CF48(v20);
                  if (!v20)
                    break;
                }
              }
            }
          }
        }
      }
LABEL_53:
      v23 = (unint64_t *)(v20 + 32);
LABEL_54:
      v18 = *v23;
    }
    if (v18 < 0x10
      || *(_DWORD *)(*(_QWORD *)v19 + 16) != 24
      || ((*(_DWORD *)(*(_QWORD *)v19 + 16) & 0x8000000) != 0
        ? (v25 = *(_QWORD *)(*(_QWORD *)v19 + 48))
        : (v25 = 0),
          v26 = v53,
          v25 != *(_QWORD *)v53))
    {
LABEL_81:
      v17 = v54;
      goto LABEL_82;
    }
    v34 = v54;
    if (v54 >= (unint64_t)HIDWORD(v54))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v26 = v53;
      v34 = v54;
    }
    v26[v34] = v7;
LABEL_89:
    LODWORD(v54) = v54 + 1;
LABEL_95:
    v7 = *(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  while (v7);
LABEL_150:
  if ((_DWORD)v54)
    sub_22EFE4AF0((unint64_t *)a1, (uint64_t)&v53);
  if (a3)
    *(_DWORD *)(a1 + 32) -= *(unsigned __int8 *)(a1 + 8);
  if (v53 != v55)
    free(v53);
}

llvm::raw_ostream *sub_22EFE4AF0(unint64_t *a1, uint64_t a2)
{
  int v4;
  llvm::raw_ostream *v5;
  _WORD *v6;
  int v7;
  llvm::raw_ostream *result;
  _WORD *v9;

  v4 = *((_DWORD *)a1 + 8);
  if (v4)
  {
    do
    {
      v5 = (llvm::raw_ostream *)*a1;
      v6 = *(_WORD **)(*a1 + 32);
      if (*(_QWORD *)(*a1 + 24) - (_QWORD)v6 > 1uLL)
      {
        *v6 = 8224;
        *((_QWORD *)v5 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v5, "  ");
      }
      --v4;
    }
    while (v4);
    v7 = *((_DWORD *)a1 + 8);
  }
  else
  {
    v7 = 0;
  }
  sub_22EFE4014(*(unint64_t **)a2, *(_DWORD *)(a2 + 8), (llvm::raw_ostream *)*a1, a1 + 1, v7);
  result = (llvm::raw_ostream *)*a1;
  v9 = *(_WORD **)(*a1 + 32);
  if (*(_QWORD *)(*a1 + 24) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 2619;
    *((_QWORD *)result + 4) += 2;
  }
  else
  {
    result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, ";\n");
  }
  *(_DWORD *)(a2 + 8) = 0;
  return result;
}

void *sub_22EFE4BD4(llvm::raw_ostream **a1, int a2)
{
  const char *v3;
  size_t v4;
  llvm::raw_ostream *v5;
  void *v6;
  uint64_t v7;
  void *result;

  v3 = off_24FAC4D00[a2];
  v4 = qword_22F4A1BF8[a2];
  v5 = *a1;
  v7 = *((_QWORD *)*a1 + 3);
  v6 = (void *)*((_QWORD *)*a1 + 4);
  if (v4 > v7 - (uint64_t)v6)
    return (void *)llvm::raw_ostream::write(v5, v3);
  result = memcpy(v6, v3, v4);
  *((_QWORD *)v5 + 4) += v4;
  return result;
}

void sub_22EFE4C44(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  unint64_t v6;
  const char *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  llvm::raw_ostream *v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  const char *p_p;
  llvm::raw_ostream *v25;
  size_t v26;
  _BYTE *v27;
  size_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 __p;
  uint64_t v33;

  if ((*(_BYTE *)(a2 + 60) & 4) != 0)
  {
    sub_22F3B9C24((uint64_t *)(a2 + 80), *(llvm::raw_ostream **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v4 = *(llvm::raw_ostream **)a1;
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v6 = *(_QWORD *)(*(_QWORD *)a1 + 24) - v5;
    if ((*(_BYTE *)(a2 + 60) & 3) == 1)
    {
      if (v6 <= 7)
      {
        v7 = "typename";
LABEL_7:
        llvm::raw_ostream::write(v4, v7);
        goto LABEL_8;
      }
      *(_QWORD *)v5 = 0x656D616E65707974;
      v30 = *((_QWORD *)v4 + 4) + 8;
    }
    else
    {
      if (v6 <= 4)
      {
        v7 = "class";
        goto LABEL_7;
      }
      *(_BYTE *)(v5 + 4) = 115;
      *(_DWORD *)v5 = 1935764579;
      v30 = *((_QWORD *)v4 + 4) + 5;
    }
    *((_QWORD *)v4 + 4) = v30;
  }
LABEL_8:
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                 + 8) & 0xFFFFFFFFFFFFFFF0)
                                         + 8) & 0xFFFFFFFFFFFFFFF0)
                 + 33) & 0x80) != 0)
  {
    v10 = *(llvm::raw_ostream **)a1;
    v11 = *(_DWORD **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v11 > 3uLL)
    {
      *v11 = 774778400;
      *((_QWORD *)v10 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v10, " ...");
    }
  }
  else if (*(_QWORD *)(a2 + 40))
  {
    v8 = *(llvm::raw_ostream **)a1;
    v9 = *(_BYTE **)(*(_QWORD *)a1 + 32);
    if ((unint64_t)v9 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
    {
      llvm::raw_ostream::write(v8);
    }
    else
    {
      *((_QWORD *)v8 + 4) = v9 + 1;
      *v9 = 32;
    }
  }
  v12 = *(_QWORD *)(a2 + 40);
  if (v12)
  {
    if ((*(_BYTE *)(a1 + 13) & 0x20) != 0 && (v12 & 7) == 0 && (v12 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v25 = *(llvm::raw_ostream **)a1;
      v27 = sub_22F1D3238(v12 & 0xFFFFFFFFFFFFFFF8);
      v28 = v26;
      v29 = (void *)*((_QWORD *)v25 + 4);
      if (v26 <= *((_QWORD *)v25 + 3) - (_QWORD)v29)
      {
        if (v26)
        {
          memcpy(v29, v27, v26);
          *((_QWORD *)v25 + 4) += v28;
        }
      }
      else
      {
        llvm::raw_ostream::write(v25, v27);
      }
    }
    else
    {
      sub_22EFC6724(*(_QWORD *)a1, v12);
    }
  }
  v14 = *(_QWORD *)(a2 + 72);
  v13 = (uint64_t *)(a2 + 72);
  if (v14 >= 8)
  {
    v15 = *(llvm::raw_ostream **)a1;
    v16 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v16) > 2)
    {
      *(_BYTE *)(v16 + 2) = 32;
      *(_WORD *)v16 = 15648;
      *((_QWORD *)v15 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v15, " = ");
    }
    v17 = *(llvm::raw_ostream **)a1;
    v18 = *v13 & 0xFFFFFFFFFFFFFFF8;
    if ((*v13 & 6) != 2)
      v18 = 0;
    if (v18)
      v19 = (uint64_t *)(v18 + 72);
    else
      v19 = v13;
    v20 = *v19;
    v21 = v20 & 6;
    v22 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFF8);
    if (v21 == 4 && v22 != 0)
      v22 = (uint64_t *)v22[1];
    v31 = *v22;
    __p = 0uLL;
    v33 = 0;
    sub_22F119374(&v31, &__p, a1 + 8);
    if (v33 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    llvm::raw_ostream::write(v17, p_p);
    if (SHIBYTE(v33) < 0)
      operator delete((void *)__p);
  }
}

uint64_t sub_22EFE4F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _BYTE *v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t *v13;
  unint64_t v14;
  llvm::raw_ostream *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;

  v4 = *(_QWORD *)(a2 + 40);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 7) != 0 || v5 == 0)
  {
    v7 = 0;
    v8 = 0;
  }
  else if ((*(_BYTE *)(a1 + 13) & 0x20) != 0)
  {
    v7 = sub_22F1D3238(v5);
    v8 = v11;
  }
  else
  {
    v9 = *(_DWORD **)(v5 + 16);
    v10 = *v9;
    v7 = v9 + 4;
    v8 = v10;
  }
  result = sub_22EFE5334((uint64_t *)a1, *(_QWORD *)(a2 + 48), (uint64_t)v7, v8, *(unsigned __int8 *)(a2 + 80));
  v14 = *(_QWORD *)(a2 + 72);
  v13 = (uint64_t *)(a2 + 72);
  if (v14 >= 4)
  {
    v15 = *(llvm::raw_ostream **)a1;
    v16 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v16) > 2)
    {
      *(_BYTE *)(v16 + 2) = 32;
      *(_WORD *)v16 = 15648;
      *((_QWORD *)v15 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v15, " = ");
    }
    v17 = *v13 & 0xFFFFFFFFFFFFFFFCLL;
    if ((*v13 & 3) != 1)
      v17 = 0;
    if (v17)
      v18 = (uint64_t *)(v17 + 72);
    else
      v18 = v13;
    v19 = *v18;
    v20 = v19 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v19 & 3) == 2 && v20 != 0)
      v20 = *(_QWORD *)(v20 + 8);
    return sub_22F0D9044(v20, *(_QWORD *)a1, 0, (int)a1 + 8, *(_DWORD *)(a1 + 32), "\n", 1uLL);
  }
  return result;
}

llvm::raw_ostream *sub_22EFE5050(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *result;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  const void *v15;
  size_t v16;
  unsigned int v17;
  void *v18;
  llvm::raw_ostream *v19;
  size_t v20;
  _BYTE *v21;
  size_t v22;
  uint64_t v23;

  result = (llvm::raw_ostream *)sub_22EFE3E24(a1, *(_QWORD *)(a2 + 56), 0);
  v5 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (a2 && v5 == 32)
  {
    result = *(llvm::raw_ostream **)a1;
    v6 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v6) > 4)
    {
      *(_BYTE *)(v6 + 4) = 115;
      *(_DWORD *)v6 = 1935764579;
      *((_QWORD *)result + 4) += 5;
    }
    else
    {
      result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, "class");
    }
    if (*(_BYTE *)(a2 + 80))
    {
      result = *(llvm::raw_ostream **)a1;
      v7 = *(_DWORD **)(*(_QWORD *)a1 + 32);
      if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v7 > 3uLL)
      {
        *v7 = 774778400;
        *((_QWORD *)result + 4) += 4;
      }
      else
      {
        result = (llvm::raw_ostream *)llvm::raw_ostream::write(result, " ...");
      }
    }
    else if (*(_QWORD *)(a2 + 40))
    {
      result = *(llvm::raw_ostream **)a1;
      v9 = *(_BYTE **)(*(_QWORD *)a1 + 32);
      if ((unint64_t)v9 >= *(_QWORD *)(*(_QWORD *)a1 + 24))
      {
        result = (llvm::raw_ostream *)llvm::raw_ostream::write(result);
      }
      else
      {
        *((_QWORD *)result + 4) = v9 + 1;
        *v9 = 32;
      }
    }
    v8 = *(_QWORD *)(a2 + 40);
    if (v8)
    {
      if ((*(_BYTE *)(a1 + 13) & 0x20) != 0 && (v8 & 7) == 0 && (v8 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v19 = *(llvm::raw_ostream **)a1;
        v21 = sub_22F1D3238(v8 & 0xFFFFFFFFFFFFFFF8);
        v22 = v20;
        result = (llvm::raw_ostream *)*((_QWORD *)v19 + 4);
        if (v20 <= *((_QWORD *)v19 + 3) - (_QWORD)result)
        {
          if (v20)
          {
            result = (llvm::raw_ostream *)memcpy(result, v21, v20);
            *((_QWORD *)v19 + 4) += v22;
          }
        }
        else
        {
          return (llvm::raw_ostream *)llvm::raw_ostream::write(v19, v21);
        }
      }
      else
      {
        return (llvm::raw_ostream *)sub_22EFC6724(*(_QWORD *)a1, v8);
      }
    }
  }
  else if (*(_QWORD *)(a2 + 48))
  {
    return (llvm::raw_ostream *)sub_22EFDF258(a1);
  }
  else if (a2 && v5 == 27)
  {
    v10 = *(llvm::raw_ostream **)a1;
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v11 > 7uLL)
    {
      *v11 = 0x20747065636E6F63;
      *((_QWORD *)v10 + 4) += 8;
    }
    else
    {
      v10 = (llvm::raw_ostream *)llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "concept ");
    }
    v12 = *(_QWORD *)(a2 + 40);
    if ((v12 & 7) == 0)
    {
      v13 = v12 & 0xFFFFFFFFFFFFFFF8;
      if (v13)
      {
        v14 = *(unsigned int **)(v13 + 16);
        v17 = *v14;
        v15 = v14 + 4;
        v16 = v17;
        v18 = (void *)*((_QWORD *)v10 + 4);
        if ((unint64_t)v17 <= *((_QWORD *)v10 + 3) - (_QWORD)v18)
        {
          if (v16)
          {
            memcpy(v18, v15, v16);
            *((_QWORD *)v10 + 4) += v16;
          }
        }
        else
        {
          v10 = (llvm::raw_ostream *)llvm::raw_ostream::write(v10, (const char *)v15);
        }
      }
    }
    v23 = *((_QWORD *)v10 + 4);
    if ((unint64_t)(*((_QWORD *)v10 + 3) - v23) > 2)
    {
      *(_BYTE *)(v23 + 2) = 32;
      *(_WORD *)v23 = 15648;
      *((_QWORD *)v10 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v10, " = ");
    }
    return (llvm::raw_ostream *)sub_22F0D9044(*(_QWORD *)(a2 + 64), *(_QWORD *)a1, 0, (int)a1 + 8, *(_DWORD *)(a1 + 32), "\n", 1uLL);
  }
  return result;
}

uint64_t sub_22EFE5334(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  const char *v12;
  _QWORD v14[4];
  __int16 v15;
  uint64_t v16;

  v16 = a2;
  v9 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v9 && *(_BYTE *)(v9 + 16) == 36)
    goto LABEL_5;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
  {
    v11 = a1 + 1;
    v10 = *a1;
    if ((a5 & 1) != 0)
      goto LABEL_6;
LABEL_11:
    v12 = "";
    goto LABEL_7;
  }
  v9 = sub_22F10CF48(v9);
  if (!v9)
  {
    v11 = a1 + 1;
    v10 = *a1;
    if (a5)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_5:
  v16 = *(_QWORD *)(v9 + 32);
  v11 = a1 + 1;
  v10 = *a1;
LABEL_6:
  v12 = "...";
LABEL_7:
  v15 = 1283;
  v14[0] = v12;
  v14[2] = a3;
  v14[3] = a4;
  return sub_22F119558(&v16, v10, v11, v14, *((unsigned int *)a1 + 8));
}

uint64_t sub_22EFE5408(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  llvm::raw_ostream *v20;
  _WORD *v21;
  int i;
  llvm::raw_ostream *v23;
  _WORD *v24;
  unint64_t v25;

  sub_22EFE8B04((_DWORD *)a1, *(_QWORD *)(a2 + 48));
  v4 = *(_QWORD *)(a2 + 48);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 56);
    if ((v5 & 4) != 0)
    {
      v6 = *(unsigned int *)((v5 & 0xFFFFFFFFFFFFFFF8) + 16);
      if ((_DWORD)v6)
      {
        v7 = 0;
        v8 = 8 * v6;
        do
        {
          sub_22EFE3E24(a1, *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v4 + 56) & 0xFFFFFFFFFFFFFFF8) + 24) + v7), 0);
          v7 += 8;
        }
        while (v8 != v7);
      }
    }
  }
  sub_22EFE5050(a1, a2);
  result = sub_22F3410BC(*(_QWORD *)(a2 + 48));
  if ((_DWORD)result)
  {
    result = *(_QWORD *)a1;
    v10 = *(void **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v10 > 0x1EuLL)
    {
      qmemcpy(v10, "#pragma omp end declare target\n", 31);
      *(_QWORD *)(result + 32) += 31;
    }
    else
    {
      result = llvm::raw_ostream::write((llvm::raw_ostream *)result, "#pragma omp end declare target\n");
    }
  }
  if (*(_BYTE *)(a1 + 36))
  {
    v11 = *(_QWORD *)(a2 + 48);
    if ((*(_DWORD *)(v11 + 28) & 0x7F) != 0x35)
    {
      v25 = 0;
      result = sub_22EFBF86C(v11, &v25, 0);
      if (!(_DWORD)result || v25 == v11)
      {
        sub_22EFE95D4(a2);
        v12 = *(_QWORD *)(sub_22EFE9368(a2) + 32);
        sub_22EFE95D4(a2);
        result = sub_22EFE9368(a2);
        v13 = *(_QWORD *)(result + 32) + 8 * *(unsigned int *)(result + 40);
        if (v12 != v13)
        {
          while (1)
          {
            v14 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFFFF8) + 112);
            result = sub_22E3CD31C((uint64_t *)(v14 + 104), v14);
            v15 = result;
            v16 = *(_QWORD *)(result + 144) & 6;
            v17 = (_BYTE *)(*(_QWORD *)(result + 144) & 0xFFFFFFFFFFFFFFF8);
            if (v16 == 4 && v17 != 0)
              break;
            if (v16 == 2 && v17 != 0)
              goto LABEL_23;
LABEL_34:
            v12 += 8;
            if (v12 == v13)
              return result;
          }
          v17 += 16;
LABEL_23:
          if ((*v17 & 6) == 0)
          {
            if (!sub_22E49F868(v11))
            {
              v20 = *(llvm::raw_ostream **)a1;
              v21 = *(_WORD **)(*(_QWORD *)a1 + 32);
              if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v21 > 1uLL)
              {
                *v21 = 2619;
                *((_QWORD *)v20 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v20, ";\n");
              }
            }
            for (i = *(_DWORD *)(a1 + 32); i; --i)
            {
              v23 = *(llvm::raw_ostream **)a1;
              v24 = *(_WORD **)(*(_QWORD *)a1 + 32);
              if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v24 > 1uLL)
              {
                *v24 = 8224;
                *((_QWORD *)v23 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v23, "  ");
              }
            }
            sub_22EFE8B04((_DWORD *)a1, v15);
            result = sub_22EFDF258(a1);
          }
          goto LABEL_34;
        }
      }
    }
  }
  return result;
}

void sub_22EFE569C(_BYTE *a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;

  if ((a1[9] & 1) == 0 && (~*(_DWORD *)(a2 + 8) & 6) == 0)
  {
    v4 = *(llvm::raw_ostream **)a1;
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v5) > 0x12)
    {
      *(_DWORD *)(v5 + 15) = 543121253;
      *(_OWORD *)v5 = *(_OWORD *)"__module_private__ ";
      *((_QWORD *)v4 + 4) += 19;
    }
    else
    {
      llvm::raw_ostream::write(v4, "__module_private__ ");
    }
  }
  __asm { BR              X10 }
}

void sub_22EFE5C78()
{
  JUMPOUT(0x22EFE5750);
}

void sub_22EFE5C88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  _QWORD *v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int i;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  _DWORD *v23;
  unsigned int v24;
  llvm::raw_ostream *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  _BYTE *v32;
  _BYTE *v33;
  const char *v34;
  uint64_t v35;
  _QWORD v36[4];
  __int16 v37;
  uint64_t v38;

  v4 = a1 + 8;
  if ((*(_BYTE *)(a1 + 9) & 1) == 0 && (*(_BYTE *)(a2 + 68) & 2) != 0)
  {
    v5 = *(llvm::raw_ostream **)a1;
    v6 = *(_QWORD **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v6 > 7uLL)
    {
      *v6 = 0x20656C626174756DLL;
      *((_QWORD *)v5 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v5, "mutable ");
    }
  }
  if ((*(_BYTE *)(v4 + 1) & 1) == 0 && (~*(_DWORD *)(a2 + 8) & 6) == 0)
  {
    v7 = *(llvm::raw_ostream **)a1;
    v8 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v8) > 0x12)
    {
      *(_DWORD *)(v8 + 15) = 543121253;
      *(_OWORD *)v8 = *(_OWORD *)"__module_private__ ";
      *((_QWORD *)v7 + 4) += 19;
    }
    else
    {
      llvm::raw_ostream::write(v7, "__module_private__ ");
    }
  }
  v9 = *(llvm::raw_ostream **)a1;
  if (!a2 || (v10 = a2, (*(_DWORD *)(a2 + 28) & 0x7F) != 0x53))
  {
    v11 = *(_QWORD *)(a2 + 16);
    v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 4) != 0)
      v12 = *(_QWORD *)v12;
    for (i = *(_WORD *)(v12 + 8) & 0x7F; i != 83; i = *(_WORD *)(v12 + 8) & 0x7F)
    {
      v14 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v14 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_24;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_23;
        if (i == 16)
          goto LABEL_17;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_30;
        if (i == 24)
        {
LABEL_17:
          v14 = -48;
        }
        else
        {
LABEL_23:
          if (i != 70)
          {
LABEL_24:
            v15 = i - 52;
            if ((i - 33) >= 5)
              v16 = -48;
            else
              v16 = -64;
            if (v15 >= 6)
              v14 = v16;
            else
              v14 = -72;
            goto LABEL_30;
          }
          v14 = -64;
        }
      }
LABEL_30:
      v17 = *(_QWORD *)(v12 + v14 + 16);
      v12 = v17 & 0xFFFFFFFFFFFFFFF8;
      if ((v17 & 4) != 0)
        v12 = *(_QWORD *)v12;
    }
    v10 = v12 - 40;
  }
  v18 = sub_22EFE86B0(*(_QWORD *)(v10 + 88), *(_QWORD *)(a2 + 48));
  v19 = 0;
  v38 = v18;
  v20 = *(_QWORD *)(a2 + 40);
  v21 = "";
  if ((v20 & 7) == 0)
  {
    v22 = v20 & 0xFFFFFFFFFFFFFFF8;
    if (v22)
    {
      v23 = *(_DWORD **)(v22 + 16);
      v24 = *v23;
      v21 = (const char *)(v23 + 4);
      v19 = v24;
    }
  }
  v37 = 261;
  v36[0] = v21;
  v36[1] = v19;
  sub_22F119558(&v38, v9, v4, v36, *(unsigned int *)(a1 + 32));
  if ((*(_BYTE *)(a2 + 68) & 1) != 0)
  {
    v25 = *(llvm::raw_ostream **)a1;
    v26 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v26) > 2)
    {
      *(_BYTE *)(v26 + 2) = 32;
      *(_WORD *)v26 = 14880;
      *((_QWORD *)v25 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v25, " : ");
    }
    if ((*(_BYTE *)(a2 + 68) & 1) != 0)
    {
      v27 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
      if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
        v27 = *(_QWORD *)(v27 + 8);
    }
    else
    {
      LODWORD(v27) = 0;
    }
    sub_22F0D9044(v27, *(_QWORD *)a1, 0, v4, *(_DWORD *)(a1 + 32), "\n", 1uLL);
  }
  v28 = *(_QWORD *)(a2 + 72);
  if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (v28 & 3) != 3)
  {
    v29 = (_QWORD *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
    if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      v29 = (_QWORD *)*v29;
    if ((*(_BYTE *)(v4 + 1) & 0x80) == 0 && v29)
    {
      v30 = v28 & 3;
      v31 = *(llvm::raw_ostream **)a1;
      v33 = *(_BYTE **)(*(_QWORD *)a1 + 24);
      v32 = *(_BYTE **)(*(_QWORD *)a1 + 32);
      if (v30 == 2)
      {
        if (v33 == v32)
        {
          v34 = " ";
LABEL_60:
          llvm::raw_ostream::write(v31, v34);
LABEL_61:
          sub_22F0D9044((int)v29, *(_QWORD *)a1, 0, v4, *(_DWORD *)(a1 + 32), "\n", 1uLL);
          goto LABEL_62;
        }
        *v32 = 32;
        v35 = *((_QWORD *)v31 + 4) + 1;
      }
      else
      {
        if ((unint64_t)(v33 - v32) <= 2)
        {
          v34 = " = ";
          goto LABEL_60;
        }
        v32[2] = 32;
        *(_WORD *)v32 = 15648;
        v35 = *((_QWORD *)v31 + 4) + 3;
      }
      *((_QWORD *)v31 + 4) = v35;
      goto LABEL_61;
    }
  }
LABEL_62:
  sub_22EFE8350(a1, a2);
}

void sub_22EFE605C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v7;
  uint64_t v8;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  llvm::raw_ostream *v24;
  int *v25;
  const char *v26;
  uint64_t v27;
  llvm::raw_ostream *v28;
  _DWORD *v29;
  llvm::raw_ostream *v30;
  _QWORD *v31;
  llvm::raw_ostream *v32;
  uint64_t v33;
  llvm::raw_ostream *v34;
  uint64_t v35;
  llvm::raw_ostream *v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  llvm::raw_ostream *v42;
  int v43;
  _BYTE *v44;
  std::string *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  std::string::size_type v50;
  std::string *p_p;
  std::string::size_type size;
  unint64_t v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  _QWORD *v59;
  uint64_t *v60;
  std::string::size_type v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  std::string *v75;
  std::string::size_type v76;
  uint64_t v77;
  char v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char v83;
  uint64_t *v84;
  llvm::raw_ostream *v85;
  _WORD *v86;
  std::string *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  llvm::raw_ostream *v92;
  std::string *v93;
  llvm::raw_ostream *v94;
  _BYTE *v95;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  unsigned int v98;
  uint64_t v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  unsigned int *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  llvm::raw_ostream *v106;
  _WORD *v107;
  BOOL v108;
  unsigned __int8 *v109;
  unsigned __int8 *v110;
  llvm::raw_ostream *v111;
  _BYTE *v112;
  llvm::raw_ostream *v113;
  uint64_t v114;
  llvm::raw_ostream *v115;
  uint64_t v116;
  std::string *v117;
  llvm::raw_ostream *v118;
  _DWORD *v119;
  llvm::raw_ostream *v120;
  std::string *v121;
  uint64_t v122;
  uint64_t v123;
  llvm::raw_ostream *v124;
  uint64_t v125;
  uint64_t v126;
  llvm::raw_ostream *v127;
  uint64_t v128;
  const char *v129;
  _DWORD *v130;
  uint64_t v131;
  uint64_t v132;
  llvm::raw_ostream *v133;
  _BYTE *v134;
  uint64_t v135;
  _BYTE *v136;
  int v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int i;
  llvm::raw_ostream *v143;
  _WORD *v144;
  llvm::raw_ostream *v145;
  _WORD *v146;
  llvm::raw_ostream *v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  BOOL v152;
  int v153;
  const char *v154;
  _BYTE *v155;
  _WORD *v156;
  const std::string::value_type *v157;
  unsigned int v158;
  std::string *v159;
  std::string::size_type v160;
  std::string *v161;
  std::string::size_type v162;
  std::string *v163;
  std::string::size_type v164;
  unint64_t v165;
  uint64_t v166;
  const std::string::value_type *v167;
  uint64_t v168;
  uint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  std::string *v174;
  std::string::size_type v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  std::string::size_type v181;
  _WORD *v182;
  uint64_t v183;
  unsigned __int8 *v184;
  std::string::size_type v185;
  _BYTE *v186;
  unint64_t v187;
  int v188;
  uint64_t v189;
  std::string v190;
  uint64_t v191;
  std::string v192;
  __int128 v193;
  std::string __p;
  _BYTE *v195;
  _BYTE *v196;
  char v197;
  uint64_t v198;
  int v199;
  std::string *v200;
  std::string v201;
  uint64_t v202;
  int v203;
  char v204;
  uint64_t v205;

  v205 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 144);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 6) != 0 || v5 == 0)
  {
    v7 = (*(_QWORD *)(a2 + 144) & 6) != 4 || v5 == 0;
    if (v7 || *(_QWORD *)(v5 + 16) <= 7uLL)
    {
      sub_22EFE8B04(a1, a2);
      v4 = *(_QWORD *)(a2 + 144);
      v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  v8 = v4 & 6;
  if (v8 != 4 || v5 == 0)
  {
    if (v8)
      v10 = 1;
    else
      v10 = v5 == 0;
    if (!v10)
      goto LABEL_30;
  }
  else if (*(_QWORD *)(v5 + 16) >= 8uLL)
  {
    v15 = (llvm::raw_ostream *)*a1;
    v16 = *(_QWORD *)(*a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v16) > 0xA)
    {
      *(_DWORD *)(v16 + 7) = 540949605;
      *(_QWORD *)v16 = *(_QWORD *)"template<> ";
      *((_QWORD *)v15 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(v15, "template<> ");
    }
    goto LABEL_30;
  }
  v11 = *(_QWORD *)(a2 + 56);
  if ((v11 & 4) != 0)
  {
    v12 = *(unsigned int *)((v11 & 0xFFFFFFFFFFFFFFF8) + 16);
    if ((_DWORD)v12)
    {
      v13 = 0;
      v14 = 8 * v12;
      do
      {
        sub_22EFE3E24((uint64_t)a1, *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFFFFF8) + 24) + v13), 0);
        v13 += 8;
      }
      while (v14 != v13);
    }
  }
LABEL_30:
  v17 = *(_DWORD *)(a2 + 28);
  if ((v17 & 0x7F) == 0x37)
    v18 = a2;
  else
    v18 = 0;
  if ((v17 & 0x7Eu) - 54 >= 4)
    v19 = 0;
  else
    v19 = (_QWORD *)a2;
  v188 = v17 & 0x7F;
  if (v188 == 53)
    v20 = a2;
  else
    v20 = 0;
  v22 = a1 + 1;
  v21 = a1[1];
  v189 = v20;
  if ((v21 & 0x100) != 0)
    goto LABEL_84;
  if ((v21 & 0x200) == 0)
  {
    v23 = (unsigned __int16)*(_DWORD *)(a2 + 80) >> 13;
    switch(v23)
    {
      case 3:
        v24 = (llvm::raw_ostream *)*a1;
        v27 = *(_QWORD *)(*a1 + 32);
        if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v27) <= 0x12)
        {
          v26 = "__private_extern__ ";
          goto LABEL_50;
        }
        *(_DWORD *)(v27 + 15) = 543121262;
        *(_OWORD *)v27 = *(_OWORD *)"__private_extern__ ";
        v149 = *((_QWORD *)v24 + 4) + 19;
LABEL_323:
        *((_QWORD *)v24 + 4) = v149;
        break;
      case 2:
        v24 = (llvm::raw_ostream *)*a1;
        v25 = *(int **)(*a1 + 32);
        if (*(_QWORD *)(*a1 + 24) - (_QWORD)v25 <= 6uLL)
        {
          v26 = "static ";
          goto LABEL_50;
        }
        *(int *)((char *)v25 + 3) = 543385972;
        v148 = 1952543859;
        goto LABEL_322;
      case 1:
        v24 = (llvm::raw_ostream *)*a1;
        v25 = *(int **)(*a1 + 32);
        if (*(_QWORD *)(*a1 + 24) - (_QWORD)v25 <= 6uLL)
        {
          v26 = "extern ";
LABEL_50:
          llvm::raw_ostream::write(v24, v26);
          break;
        }
        *(int *)((char *)v25 + 3) = 544109157;
        v148 = 1702131813;
LABEL_322:
        *v25 = v148;
        v149 = *((_QWORD *)v24 + 4) + 7;
        goto LABEL_323;
    }
  }
  if ((*(_BYTE *)(a2 + 82) & 2) != 0)
  {
    v28 = (llvm::raw_ostream *)*a1;
    v29 = *(_DWORD **)(*a1 + 32);
    if (*(_QWORD *)(*a1 + 24) - (_QWORD)v29 > 6uLL)
    {
      *(_DWORD *)((char *)v29 + 3) = 543518313;
      *v29 = 1768713833;
      *((_QWORD *)v28 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v28, "inline ");
    }
  }
  if ((*(_BYTE *)(a2 + 82) & 4) != 0)
  {
    v30 = (llvm::raw_ostream *)*a1;
    v31 = *(_QWORD **)(*a1 + 32);
    if (*(_QWORD *)(*a1 + 24) - (_QWORD)v31 > 7uLL)
    {
      *v31 = 0x206C617574726976;
      *((_QWORD *)v30 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v30, "virtual ");
    }
  }
  if ((~*(_DWORD *)(a2 + 8) & 6) == 0)
  {
    v32 = (llvm::raw_ostream *)*a1;
    v33 = *(_QWORD *)(*a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v33) > 0x12)
    {
      *(_DWORD *)(v33 + 15) = 543121253;
      *(_OWORD *)v33 = *(_OWORD *)"__module_private__ ";
      *((_QWORD *)v32 + 4) += 19;
    }
    else
    {
      llvm::raw_ostream::write(v32, "__module_private__ ");
    }
  }
  if ((*(_QWORD *)(a2 + 80) & 0xC4000000) == 0x40000000)
  {
    v34 = (llvm::raw_ostream *)*a1;
    v35 = *(_QWORD *)(*a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v35) > 9)
    {
      *(_WORD *)(v35 + 8) = 8306;
      *(_QWORD *)v35 = *(_QWORD *)"constexpr ";
      *((_QWORD *)v34 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v34, "constexpr ");
    }
  }
  if ((*(_QWORD *)(a2 + 80) & 0xC0000000) == 0x80000000)
  {
    v36 = (llvm::raw_ostream *)*a1;
    v37 = *(_QWORD *)(*a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v37) > 9)
    {
      *(_WORD *)(v37 + 8) = 8300;
      *(_QWORD *)v37 = *(_QWORD *)"consteval ";
      *((_QWORD *)v36 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v36, "consteval ");
    }
  }
  v38 = *(_WORD *)(a2 + 80) & 0x7F;
  switch(v38)
  {
    case '8':
      v39 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) + 160);
      break;
    case '7':
      v40 = *(_QWORD *)(a2 + 112);
      v41 = *(_QWORD *)(v40 + 80);
      if ((v41 & 0x4000000000000000) != 0)
        v39 = *(_QWORD *)(v40 + 16 * ((v41 >> 61) & 1) + 168);
      else
        v39 = v41 >> 63;
      break;
    case '5':
      v39 = *(_QWORD *)(a2 + 168);
      break;
    default:
      goto LABEL_84;
  }
  if (v39)
  {
    v42 = (llvm::raw_ostream *)*a1;
    v43 = *((_DWORD *)a1 + 8);
    *((_BYTE *)&v201.__r_.__value_.__s + 23) = 8;
    strcpy((char *)&v201, "explicit");
    LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
    v197 = 0;
    v198 = 0;
    v199 = 1;
    v195 = 0;
    v196 = 0;
    __p.__r_.__value_.__r.__words[2] = 0;
    __p.__r_.__value_.__r.__words[0] = MEMORY[0x24BED83D8] + 16;
    v200 = &v201;
    llvm::raw_ostream::SetBufferAndMode();
    if ((v39 & 0xFFFFFFFFFFFFFFFCLL) != 0)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "(");
      sub_22F0D9044(v39 & 0xFFFFFFFC, (int)&__p, 0, (_DWORD)a1 + 8, v43, "\n", 1uLL);
      if (v195 == v196)
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, ")");
      else
        *v196++ = 41;
    }
    if (v195 == v196)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, " ");
      v44 = v196;
    }
    else
    {
      *v196 = 32;
      v44 = ++v196;
    }
    v22 = a1 + 1;
    if (v44 != (_BYTE *)__p.__r_.__value_.__r.__words[2])
      llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&__p);
    if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = &v201;
    else
      v45 = (std::string *)v201.__r_.__value_.__r.__words[0];
    llvm::raw_ostream::write(v42, (const char *)v45);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
    if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v201.__r_.__value_.__l.__data_);
  }
LABEL_84:
  v193 = *(_OWORD *)v22;
  *(_QWORD *)&v193 = v193 & 0xFFFFFFFFFFFFFEFFLL;
  memset(&v192, 0, sizeof(v192));
  if ((*((_BYTE *)v22 + 5) & 1) != 0)
  {
    sub_22EFB9E74(&__p, a2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    std::string::append(&v192, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
    v197 = 0;
    v198 = 0;
    v199 = 1;
    v195 = 0;
    v196 = 0;
    __p.__r_.__value_.__r.__words[2] = 0;
    __p.__r_.__value_.__r.__words[0] = MEMORY[0x24BED83D8] + 16;
    v200 = &v192;
    llvm::raw_ostream::SetBufferAndMode();
    v46 = *v22;
    if ((*v22 & 0x1000) == 0)
    {
      v47 = *(_QWORD *)(a2 + 56);
      if ((v47 & 4) != 0)
      {
        v48 = *(_QWORD *)(v47 & 0xFFFFFFFFFFFFFFF8);
        if (v48)
        {
          sub_22F0AAD88(v48, (llvm::raw_ostream *)&__p, (__int128 *)v22, 0);
          v46 = *v22;
        }
      }
    }
    v49 = *(_DWORD *)(a2 + 24);
    v50 = *(_QWORD *)(a2 + 152);
    v201.__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 40);
    LODWORD(v201.__r_.__value_.__r.__words[1]) = v49;
    v201.__r_.__value_.__r.__words[2] = v50;
    sub_22EFC6F2C(&v201, (llvm::raw_ostream *)&__p, v46, a1[2]);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
  }
  if (v20)
  {
    v201.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v20 + 40) & 0xFFFFFFFFFFFFFFF8) + 16)
                                                  + 40);
    sub_22EFC683C((uint64_t *)&v201, &__p);
    if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v192.__r_.__value_.__l.__data_);
    v192 = __p;
  }
  if ((*(_QWORD *)(a2 + 144) & 6) == 4)
  {
    v53 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
    if (v53)
    {
      if (*(_QWORD *)(v53 + 16) >= 8uLL)
      {
        LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
        v197 = 0;
        v198 = 0;
        v199 = 1;
        v195 = 0;
        v196 = 0;
        __p.__r_.__value_.__r.__words[2] = 0;
        __p.__r_.__value_.__r.__words[0] = MEMORY[0x24BED83D8] + 16;
        v200 = &v192;
        llvm::raw_ostream::SetBufferAndMode();
        v54 = a1[3];
        v55 = *((_DWORD *)a1 + 8);
        *(_OWORD *)&v201.__r_.__value_.__r.__words[1] = v193;
        v201.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        v202 = v54;
        v203 = v55;
        v204 = 0;
        if ((*(_QWORD *)(a2 + 144) & 6) != 4)
          goto LABEL_107;
        v56 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
        if (!v56)
          goto LABEL_107;
        v177 = *(_QWORD *)(v56 + 32);
        if (!v177 || (*((_BYTE *)v22 + 5) & 2) != 0)
        {
          v183 = *(_QWORD *)(v56 + 24);
          if (v183)
            sub_22EFE8C08((llvm::raw_ostream **)&v201, *(_QWORD *)v183, *(unsigned int *)(v183 + 8), 0);
          goto LABEL_107;
        }
        v178 = *(unsigned int *)(v177 + 8);
        if (v195 == v196)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "<");
          if ((_DWORD)v178)
            goto LABEL_420;
        }
        else
        {
          *v196++ = 60;
          if ((_DWORD)v178)
          {
LABEL_420:
            v179 = 0;
            v180 = v177 + 16;
            do
            {
              if (v179)
              {
                v181 = v201.__r_.__value_.__r.__words[0];
                v182 = *(_WORD **)(v201.__r_.__value_.__r.__words[0] + 32);
                if (*(_QWORD *)(v201.__r_.__value_.__r.__words[0] + 24) - (_QWORD)v182 > 1uLL)
                {
                  *v182 = 8236;
                  *(_QWORD *)(v181 + 32) += 2;
                }
                else
                {
                  llvm::raw_ostream::write((llvm::raw_ostream *)v201.__r_.__value_.__l.__data_, ", ");
                }
              }
              sub_22F0EF330(v180 + v179, &v201.__r_.__value_.__r.__words[1], v201.__r_.__value_.__r.__words[0], 1);
              v179 += 32;
            }
            while (32 * v178 != v179);
          }
        }
        v185 = v201.__r_.__value_.__r.__words[0];
        v186 = *(_BYTE **)(v201.__r_.__value_.__r.__words[0] + 32);
        if (*(_BYTE **)(v201.__r_.__value_.__r.__words[0] + 24) == v186)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v201.__r_.__value_.__l.__data_, ">");
        }
        else
        {
          *v186 = 62;
          ++*(_QWORD *)(v185 + 32);
        }
LABEL_107:
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
      }
    }
  }
  v191 = *(_QWORD *)(a2 + 48);
  v57 = *(_QWORD *)(v191 & 0xFFFFFFFFFFFFFFF0);
  v58 = *(unsigned __int8 *)(v57 + 16);
  if (v57 && v58 == 37)
  {
    v187 = v18;
    v59 = v19;
    v60 = v22;
    do
    {
      sub_22E74ABDC(40, (const void **)&v192.__r_.__value_.__l.__data_, (uint64_t)&__p);
      std::string::push_back(&__p, 41);
      v201.__r_.__value_.__r.__words[0] = __p.__r_.__value_.__l.__size_;
      v61 = __p.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)v201.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
      v62 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      memset(&__p, 0, sizeof(__p));
      if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v192.__r_.__value_.__l.__data_);
        v192.__r_.__value_.__r.__words[0] = v61;
        v192.__r_.__value_.__l.__size_ = v201.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v192.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v201.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v192.__r_.__value_.__s + 23) = v62;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v192.__r_.__value_.__r.__words[0] = v61;
        v192.__r_.__value_.__l.__size_ = v201.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v192.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v201.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v192.__r_.__value_.__s + 23) = v62;
      }
      v63 = *(_QWORD *)(v57 + 32);
      v57 = *(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0);
      v58 = *(unsigned __int8 *)(v57 + 16);
    }
    while (v57 && v58 == 37);
    v191 = v63;
    v22 = v60;
    v19 = v59;
    v18 = v187;
  }
  if ((v58 - 27) <= 0xFFFFFFFD
    && (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v57 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 > 1
     || (v57 = sub_22F10CF48(v57)) == 0))
  {
    v147 = (llvm::raw_ostream *)*a1;
    LOWORD(v196) = 260;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v192;
    sub_22F119558(&v191, v147, v22, &__p, 0);
    goto LABEL_262;
  }
  if ((*(_BYTE *)(a2 + 82) & 0x20) == 0 || *(_BYTE *)(v57 + 16) != 26)
  {
    std::string::append(&v192, "(");
    v70 = *(_QWORD *)(a2 + 80);
    if ((v70 & 0x8000000) != 0)
    {
      if ((v70 & 0x20000000) == 0)
      {
LABEL_151:
        std::string::append(&v192, ")");
        v77 = 0;
        v78 = 1;
        goto LABEL_152;
      }
    }
    else if (!(*(_QWORD *)(a2 + 128) | *(_QWORD *)(a2 + 80) & 0x20000000))
    {
      goto LABEL_151;
    }
    if ((v70 & 0x300000) == 0
      && ((v71 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0)) != 0 && *(_BYTE *)(v71 + 16) == 26
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v71 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
       && (v71 = sub_22F10CF48(v71)) != 0))
    {
      v72 = *(_QWORD *)(v71 + 16);
      if ((v72 & 0x3FFFC000000000) != 0)
      {
        v73 = 0;
        v74 = (unsigned __int16)(v72 >> 38);
        do
        {
          if (v73)
            std::string::append(&v192, ", ");
          sub_22EFC683C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v73) + 40), &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v75 = &__p;
          else
            v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v76 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          else
            v76 = __p.__r_.__value_.__l.__size_;
          std::string::append(&v192, (const std::string::value_type *)v75, v76);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          ++v73;
        }
        while (v74 != v73);
      }
    }
    goto LABEL_151;
  }
  std::string::append(&v192, "(");
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  v197 = 0;
  v198 = 0;
  v199 = 1;
  v195 = 0;
  v196 = 0;
  __p.__r_.__value_.__r.__words[2] = 0;
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x24BED83D8] + 16;
  v200 = &v192;
  llvm::raw_ostream::SetBufferAndMode();
  v64 = a1[3];
  v65 = *((_DWORD *)a1 + 8);
  *(_OWORD *)&v201.__r_.__value_.__r.__words[1] = v193;
  v201.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v202 = v64;
  v203 = v65;
  v204 = 0;
  v66 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v66 && *(_BYTE *)(v66 + 16) == 26
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v66 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v66 = sub_22F10CF48(v66)) != 0)
  {
    v67 = *(_QWORD *)(v66 + 16);
    if ((v67 & 0x3FFFC000000000) != 0)
    {
      v68 = 0;
      v69 = (unsigned __int16)(v67 >> 38);
      do
      {
        if (v68)
        {
          if ((unint64_t)(v195 - v196) > 1)
          {
            *(_WORD *)v196 = 8236;
            v196 += 2;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__p, ", ");
          }
        }
        sub_22EFE7D40((uint64_t)&v201, *(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v68++));
      }
      while (v69 != v68);
    }
  }
  v150 = *(_QWORD *)(v57 + 16);
  v151 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v151)
    v152 = *(_BYTE *)(v151 + 16) == 26;
  else
    v152 = 0;
  if (v152
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v151 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v151 = sub_22F10CF48(v151)) != 0)
  {
    v153 = (unsigned __int16)(*(_QWORD *)(v151 + 16) >> 38);
    if ((v150 & 0x800000000000000) != 0)
    {
LABEL_345:
      if (v153)
      {
        if ((unint64_t)(v195 - v196) > 1)
        {
          *(_WORD *)v196 = 8236;
          v196 += 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__p, ", ");
        }
      }
      v156 = v196;
      if ((unint64_t)(v195 - v196) <= 2)
      {
        v154 = "...";
        goto LABEL_350;
      }
      v196[2] = 46;
      *v156 = 11822;
      v155 = v196 + 3;
LABEL_413:
      v196 = v155;
      goto LABEL_351;
    }
  }
  else
  {
    v153 = 0;
    if ((v150 & 0x800000000000000) != 0)
      goto LABEL_345;
  }
  if (!v153 && (*(_BYTE *)(*(_QWORD *)(a1[3] + 2000) + 1) & 1) == 0)
  {
    if ((unint64_t)(v195 - v196) <= 3)
    {
      v154 = "void";
LABEL_350:
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, v154);
      goto LABEL_351;
    }
    *(_DWORD *)v196 = 1684631414;
    v155 = v196 + 4;
    goto LABEL_413;
  }
LABEL_351:
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
  std::string::append(&v192, ")");
  if ((sub_22E47E20C(v57) & 1) != 0)
    std::string::append(&v192, " const");
  if ((sub_22E47E20C(v57) & 4) != 0)
    std::string::append(&v192, " volatile");
  if ((sub_22E47E20C(v57) & 2) != 0)
    std::string::append(&v192, " restrict");
  if (v19
    && (*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v19 + 32))(v19) + 80) & 0xE000) != 0x4000
    && ((v19[5] & 7) != 6 || (*(_DWORD *)(v19[5] & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
  {
    switch(sub_22E47E1B0(v57) >> 11)
    {
      case 0u:
        if ((*((_BYTE *)v22 + 6) & 1) != 0)
        {
          v157 = " thread";
          goto LABEL_382;
        }
        break;
      case 0xBu:
        v157 = " device";
        goto LABEL_382;
      case 0xCu:
        v157 = " threadgroup";
        goto LABEL_382;
      case 0xDu:
        v157 = " constant";
        goto LABEL_382;
      case 0xEu:
        v157 = " threadgroup_imageblock";
        goto LABEL_382;
      case 0xFu:
        v157 = " ray_data";
        goto LABEL_382;
      case 0x10u:
        v157 = " object_data";
LABEL_382:
        std::string::append(&v192, v157);
        break;
      default:
        v158 = sub_22E47E1B0(v57);
        std::to_string(&v190, (v158 >> 11) - 27);
        v159 = std::string::insert(&v190, 0, " __attribute__((address_space(");
        v160 = v159->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v201.__r_.__value_.__l.__data_ = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
        v201.__r_.__value_.__r.__words[2] = v160;
        v159->__r_.__value_.__l.__size_ = 0;
        v159->__r_.__value_.__r.__words[2] = 0;
        v159->__r_.__value_.__r.__words[0] = 0;
        v161 = std::string::append(&v201, ")))");
        v162 = v161->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v162;
        v161->__r_.__value_.__l.__size_ = 0;
        v161->__r_.__value_.__r.__words[2] = 0;
        v161->__r_.__value_.__r.__words[0] = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v163 = &__p;
        else
          v163 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v164 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
        else
          v164 = __p.__r_.__value_.__l.__size_;
        std::string::append(&v192, (const std::string::value_type *)v163, v164);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v201.__r_.__value_.__l.__data_);
        if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v190.__r_.__value_.__l.__data_);
        break;
    }
  }
  v165 = *(_QWORD *)(v57 + 16);
  v166 = HIDWORD(v165) & 3;
  if ((_DWORD)v166 == 1)
  {
    v167 = " &";
  }
  else
  {
    if ((_DWORD)v166 != 2)
      goto LABEL_388;
    v167 = " &&";
  }
  std::string::append(&v192, v167);
  v165 = *(_QWORD *)(v57 + 16);
LABEL_388:
  v168 = (v165 >> 54) & 0xF;
  if ((v168 - 1) > 2)
  {
    if ((v168 - 4) <= 4)
    {
      std::string::append(&v192, " noexcept");
      if (((*(_QWORD *)(v57 + 16) >> 54) & 0xF) - 6 <= 2)
      {
        std::string::append(&v192, "(");
        LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
        v197 = 0;
        v198 = 0;
        v199 = 1;
        v195 = 0;
        v196 = 0;
        __p.__r_.__value_.__r.__words[2] = 0;
        __p.__r_.__value_.__r.__words[0] = MEMORY[0x24BED83D8] + 16;
        v200 = &v192;
        llvm::raw_ostream::SetBufferAndMode();
        v176 = sub_22F257D3C(v57);
        sub_22F0D9044(v176, (int)&__p, 0, (int)&v193, *((_DWORD *)a1 + 8), "\n", 1uLL);
        if (v196 != (_BYTE *)__p.__r_.__value_.__r.__words[2])
          llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&__p);
        std::string::append(&v192, ")");
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
      }
    }
    v78 = 0;
    v77 = v57;
  }
  else
  {
    v169 = v22;
    std::string::append(&v192, " throw(");
    v170 = *(_QWORD *)(v57 + 16);
    if ((v170 & 0x3C0000000000000) == 0x80000000000000)
    {
      v171 = *(unsigned int *)((v57 + 40 + 8 * (unsigned __int16)(v170 >> 38) + 4 * ((v170 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((_DWORD)v171)
      {
        v172 = 0;
        v173 = 8 * v171;
        do
        {
          if (v172)
            std::string::append(&v192, ", ");
          v201.__r_.__value_.__r.__words[0] = *(_QWORD *)(((v57
                                                          + 40
                                                          + 8 * (unsigned __int16)(*(_QWORD *)(v57 + 16) >> 38)
                                                          + 4 * ((*(_QWORD *)(v57 + 16) >> 59) & 1)
                                                          + 7) & 0xFFFFFFFFFFFFFFF8)
                                                        + 8
                                                        * ((*(_QWORD *)(v57 + 16) & 0x3C0000000000000) == 0x80000000000000)
                                                        + v172);
          memset(&__p, 0, sizeof(__p));
          sub_22F119374((uint64_t *)&v201, (__int128 *)&__p, (uint64_t)&v193);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v174 = &__p;
          else
            v174 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v175 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          else
            v175 = __p.__r_.__value_.__l.__size_;
          std::string::append(&v192, (const std::string::value_type *)v174, v175);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v172 += 8;
        }
        while (v173 != v172);
      }
    }
    else if ((v170 & 0x3C0000000000000) == 0xC0000000000000)
    {
      std::string::append(&v192, "...");
    }
    std::string::append(&v192, ")");
    v78 = 0;
    v77 = v57;
    v22 = v169;
  }
LABEL_152:
  if (v18)
  {
    v79 = v18;
    v80 = (uint64_t)v22;
    if ((*((_BYTE *)v22 + 3) & 0x40) == 0)
    {
      v81 = sub_22EFD7ED0(v79);
      v82 = sub_22EFD7ED0(v79) + 8 * ((*(_QWORD *)(v79 + 80) >> 40) & 0x1FFFFFLL);
      if (v81 != v82)
      {
        v83 = 0;
        while (1)
        {
          v84 = *(uint64_t **)v81;
          if (**(_BYTE **)(*(_QWORD *)v81 + 8) != 121)
            break;
LABEL_227:
          v81 += 8;
          if (v81 == v82)
            goto LABEL_254;
        }
        if ((v83 & 1) != 0)
        {
          v85 = (llvm::raw_ostream *)*a1;
          v86 = *(_WORD **)(*a1 + 32);
          if (*(_QWORD *)(*a1 + 24) - (_QWORD)v86 > 1uLL)
          {
            *v86 = 8236;
            *((_QWORD *)v85 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v85, ", ");
          }
        }
        else
        {
          std::string::append(&v192, " : ");
          if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v87 = &v192;
          else
            v87 = (std::string *)v192.__r_.__value_.__r.__words[0];
          llvm::raw_ostream::write((llvm::raw_ostream *)*a1, (const char *)v87);
          if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
          {
            *v192.__r_.__value_.__l.__data_ = 0;
            v192.__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            v192.__r_.__value_.__s.__data_[0] = 0;
            *((_BYTE *)&v192.__r_.__value_.__s + 23) = 0;
          }
        }
        v88 = *v84;
        v89 = *v84 & 6;
        if (v89 == 4)
        {
          v90 = *(_QWORD *)(*(_QWORD *)((v88 & 0xFFFFFFFFFFFFFFF8) + 56)
                          + 8 * *(unsigned int *)((v88 & 0xFFFFFFFFFFFFFFF8) + 64)
                          - 8);
        }
        else
        {
          if (v89 != 2)
          {
            if (v89 || (*((_WORD *)v84 + 14) & 1) != 0)
              v91 = 0;
            else
              v91 = *(_QWORD *)(*(_QWORD *)(v88 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF0);
            v92 = (llvm::raw_ostream *)*a1;
            v201.__r_.__value_.__r.__words[0] = v91 & 0xFFFFFFFFFFFFFFF0;
            memset(&__p, 0, sizeof(__p));
            sub_22F119374((uint64_t *)&v201, (__int128 *)&__p, v80);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v93 = &__p;
            else
              v93 = (std::string *)__p.__r_.__value_.__r.__words[0];
            llvm::raw_ostream::write(v92, (const char *)v93);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_178;
          }
          v90 = v88 & 0xFFFFFFFFFFFFFFF8;
        }
        (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v90 + 88))(v90, *a1);
LABEL_178:
        v94 = (llvm::raw_ostream *)*a1;
        v95 = *(_BYTE **)(*a1 + 32);
        if (*(_BYTE **)(*a1 + 24) == v95)
        {
          llvm::raw_ostream::write(v94, "(");
        }
        else
        {
          *v95 = 40;
          ++*((_QWORD *)v94 + 4);
        }
        v96 = (unsigned __int8 *)v84[1];
        if (v96)
        {
          if (*v96 != 173 || (v96 = (unsigned __int8 *)*((_QWORD *)v96 + 2)) != 0)
          {
            do
            {
              v97 = v96;
              v98 = *v96;
              if (v98 > 0xD5)
              {
                if (v98 == 233)
                {
                  if ((*(_DWORD *)v96 & 0x7C0000) != 0x300000)
                    goto LABEL_218;
                  v98 = *(_DWORD *)v96;
                  v100 = v96 + 16;
                }
                else
                {
                  if (v98 != 214)
                    break;
                  v100 = v96 + 24;
                }
              }
              else if (v98 == 155)
              {
                if ((**((_DWORD **)v96 + 2) & 0x18000) != 0)
                  goto LABEL_218;
                v100 = v96 + 24;
                if (!v97[48])
                  v100 = v97 + 32;
                v98 = 155;
              }
              else
              {
                if (v98 != 176)
                  break;
                v99 = *((unsigned int *)v96 + 5);
                if ((_DWORD)v99 == -1)
                  goto LABEL_218;
                v100 = &v96[8 * v99 + 40];
                v98 = 176;
              }
              v96 = *(unsigned __int8 **)v100;
            }
            while (v96 != v97);
            if (v98 == 215)
              goto LABEL_200;
            if ((v98 & 0xFE) != 0x76)
            {
LABEL_218:
              sub_22F0D9044((int)v97, *a1, 0, v80, *((_DWORD *)a1 + 8), "\n", 1uLL);
              goto LABEL_219;
            }
            v108 = v98 == 119;
            if (v98 == 119)
              v109 = v97;
            else
              v109 = 0;
            v110 = v109 + 48;
            if (v108)
              v101 = v110;
            else
              v101 = v97 + 40;
            v102 = (unsigned int *)(v97 + 32);
          }
          else
          {
            v97 = 0;
LABEL_200:
            v101 = v97 + 24;
            v102 = (unsigned int *)(v97 + 4);
          }
          v103 = *v102;
          if ((_DWORD)v103)
          {
            v104 = 0;
            v105 = 8 * v103;
            do
            {
              if (**(_BYTE **)&v101[v104] == 120)
                break;
              if (v104)
              {
                v106 = (llvm::raw_ostream *)*a1;
                v107 = *(_WORD **)(*a1 + 32);
                if (*(_QWORD *)(*a1 + 24) - (_QWORD)v107 > 1uLL)
                {
                  *v107 = 8236;
                  *((_QWORD *)v106 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v106, ", ");
                }
              }
              sub_22F0D9044(*(_QWORD *)&v101[v104], *a1, 0, v80, *((_DWORD *)a1 + 8), "\n", 1uLL);
              v104 += 8;
            }
            while (v105 != v104);
          }
        }
LABEL_219:
        v111 = (llvm::raw_ostream *)*a1;
        v112 = *(_BYTE **)(*a1 + 32);
        if (*(_BYTE **)(*a1 + 24) == v112)
        {
          llvm::raw_ostream::write(v111, ")");
        }
        else
        {
          *v112 = 41;
          ++*((_QWORD *)v111 + 4);
        }
        if ((*(_BYTE *)v84 & 6) == 0 && (*((_WORD *)v84 + 14) & 1) == 0 && *((_DWORD *)v84 + 4))
        {
          v113 = (llvm::raw_ostream *)*a1;
          v114 = *(_QWORD *)(*a1 + 32);
          if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v114) > 2)
          {
            *(_BYTE *)(v114 + 2) = 46;
            *(_WORD *)v114 = 11822;
            *((_QWORD *)v113 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(v113, "...");
          }
        }
        v83 = 1;
        goto LABEL_227;
      }
    }
  }
  else
  {
    v80 = (uint64_t)v22;
    if ((!a2 || v188 != 56) && (*(_DWORD *)(a2 + 28) & 0x7F) != 0x39)
    {
      if ((v78 & 1) == 0 && (*(_BYTE *)(v77 + 23) & 0x10) != 0)
      {
        if (!v189)
        {
          v115 = (llvm::raw_ostream *)*a1;
          v116 = *(_QWORD *)(*a1 + 32);
          if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v116) > 4)
          {
            *(_BYTE *)(v116 + 4) = 32;
            *(_DWORD *)v116 = 1869903201;
            *((_QWORD *)v115 + 4) += 5;
          }
          else
          {
            llvm::raw_ostream::write(v115, "auto ");
          }
        }
        if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v117 = &v192;
        else
          v117 = (std::string *)v192.__r_.__value_.__r.__words[0];
        v118 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*a1, (const char *)v117);
        v119 = (_DWORD *)*((_QWORD *)v118 + 4);
        if (*((_QWORD *)v118 + 3) - (_QWORD)v119 > 3uLL)
        {
          *v119 = 540945696;
          *((_QWORD *)v118 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(v118, " -> ");
        }
        if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
        {
          *v192.__r_.__value_.__l.__data_ = 0;
          v192.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v192.__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&v192.__r_.__value_.__s + 23) = 0;
        }
      }
      v201.__r_.__value_.__r.__words[0] = *(_QWORD *)(v57 + 24);
      v120 = (llvm::raw_ostream *)*a1;
      LOWORD(v196) = 260;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v192;
      sub_22F119558(&v201, v120, v22, &__p, 0);
      if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
      {
        *v192.__r_.__value_.__l.__data_ = 0;
        v192.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v192.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v192.__r_.__value_.__s + 23) = 0;
      }
    }
  }
LABEL_254:
  if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v121 = &v192;
  else
    v121 = (std::string *)v192.__r_.__value_.__r.__words[0];
  llvm::raw_ostream::write((llvm::raw_ostream *)*a1, (const char *)v121);
  v122 = *(_QWORD *)(a2 + 56);
  v22 = (uint64_t *)v80;
  if ((v122 & 4) != 0)
  {
    v123 = *(_QWORD *)((v122 & 0xFFFFFFFFFFFFFFF8) + 40);
    if (v123)
    {
      v124 = (llvm::raw_ostream *)*a1;
      v125 = *(_QWORD *)(*a1 + 32);
      if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v125) > 9)
      {
        *(_WORD *)(v125 + 8) = 8307;
        *(_QWORD *)v125 = *(_QWORD *)" requires ";
        *((_QWORD *)v124 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v124, " requires ");
      }
      sub_22F0D9044(v123, *a1, 0, (int)&v193, *((_DWORD *)a1 + 8), "\n", 1uLL);
    }
  }
LABEL_262:
  sub_22EFE8350((uint64_t)a1, a2);
  v126 = *(_QWORD *)(a2 + 80);
  if ((v126 & 0x80000) != 0)
  {
    v127 = (llvm::raw_ostream *)*a1;
    v130 = *(_DWORD **)(*a1 + 32);
    if (*(_QWORD *)(*a1 + 24) - (_QWORD)v130 <= 3uLL)
    {
      v129 = " = 0";
      goto LABEL_268;
    }
    *v130 = 807419168;
    v135 = *((_QWORD *)v127 + 4) + 4;
    goto LABEL_314;
  }
  if ((*(_QWORD *)(a2 + 80) & 0x2400000) == 0x400000)
  {
    v127 = (llvm::raw_ostream *)*a1;
    v128 = *(_QWORD *)(*a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v128) <= 8)
    {
      v129 = " = delete";
LABEL_268:
      llvm::raw_ostream::write(v127, v129);
      goto LABEL_269;
    }
    *(_BYTE *)(v128 + 8) = 101;
    *(_QWORD *)v128 = *(_QWORD *)" = delete";
    v135 = *((_QWORD *)v127 + 4) + 9;
    goto LABEL_314;
  }
  if ((v126 & 0x4000000) != 0)
  {
    v127 = (llvm::raw_ostream *)*a1;
    v131 = *(_QWORD *)(*a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v131) <= 9)
    {
      v129 = " = default";
      goto LABEL_268;
    }
    *(_WORD *)(v131 + 8) = 29804;
    *(_QWORD *)v131 = *(_QWORD *)" = default";
    v135 = *((_QWORD *)v127 + 4) + 10;
LABEL_314:
    *((_QWORD *)v127 + 4) = v135;
    goto LABEL_269;
  }
  if ((v126 & 0x8000000) != 0)
  {
    if ((v126 & 0x20000000) == 0)
      goto LABEL_269;
  }
  else if (!(*(_QWORD *)(a2 + 128) | *(_QWORD *)(a2 + 80) & 0x20000000))
  {
    goto LABEL_269;
  }
  if ((*((_BYTE *)v22 + 3) & 0x40) == 0)
  {
    if ((v126 & 0x300000) == 0
      && ((v132 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0)) != 0 && *(_BYTE *)(v132 + 16) == 26
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v132 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
       && (v132 = sub_22F10CF48(v132)) != 0)
      && (*(_DWORD *)(v132 + 20) & 0x3FFFC0) != 0)
    {
      v133 = (llvm::raw_ostream *)*a1;
      v134 = *(_BYTE **)(*a1 + 32);
      if ((unint64_t)v134 >= *(_QWORD *)(*a1 + 24))
      {
        llvm::raw_ostream::write(v133);
      }
      else
      {
        *((_QWORD *)v133 + 4) = v134 + 1;
        *v134 = 10;
      }
      v136 = (_BYTE *)a1[3];
      v137 = *((_DWORD *)a1 + 8);
      __p.__r_.__value_.__r.__words[0] = *a1;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v193;
      v195 = v136;
      LODWORD(v196) = v137;
      BYTE4(v196) = 0;
      *((_DWORD *)a1 + 8) = *((unsigned __int8 *)a1 + 8) + v137;
      v138 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v138 && *(_BYTE *)(v138 + 16) == 26
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v138 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
        && (v138 = sub_22F10CF48(v138)) != 0)
      {
        v139 = *(_QWORD *)(v138 + 16);
        if ((v139 & 0x3FFFC000000000) != 0)
        {
          v140 = 0;
          v141 = (unsigned __int16)(v139 >> 38);
          do
          {
            for (i = *((_DWORD *)a1 + 8); i; --i)
            {
              v143 = (llvm::raw_ostream *)*a1;
              v144 = *(_WORD **)(*a1 + 32);
              if (*(_QWORD *)(*a1 + 24) - (_QWORD)v144 > 1uLL)
              {
                *v144 = 8224;
                *((_QWORD *)v143 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v143, "  ");
              }
            }
            sub_22EFE7D40((uint64_t)&__p, *(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v140));
            v145 = (llvm::raw_ostream *)*a1;
            v146 = *(_WORD **)(*a1 + 32);
            if (*(_QWORD *)(*a1 + 24) - (_QWORD)v146 > 1uLL)
            {
              *v146 = 2619;
              *((_QWORD *)v145 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v145, ";\n");
            }
            ++v140;
          }
          while (v140 != v141);
        }
      }
      *((_DWORD *)a1 + 8) -= *((unsigned __int8 *)a1 + 8);
    }
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2))
    {
      v184 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
      sub_22F0D9148(v184, *a1, 0, &v193, *((_DWORD *)a1 + 8), "\n", 1uLL, a1[3]);
    }
  }
LABEL_269:
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v192.__r_.__value_.__l.__data_);
}

void sub_22EFE7D40(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int i;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  const char *v16;
  size_t v17;
  _BYTE *v18;
  int v19;
  llvm::raw_ostream *v20;
  uint64_t v21;
  const char *v22;
  void *v23;
  void *v24;
  llvm::raw_ostream *v25;
  uint64_t v26;
  llvm::raw_ostream *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  unint64_t v32;
  _DWORD *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  int v40;
  BOOL v41;
  unsigned __int8 *v42;
  unsigned __int8 **v43;
  llvm::raw_ostream *v44;
  _BYTE *v45;
  const char *v46;
  uint64_t v47;
  llvm::raw_ostream *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;

  sub_22EFE8B04((_DWORD *)a1, a2);
  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = *(uint64_t **)((v4 & 0xFFFFFFFFFFFFFFF8) + 32);
    if (v5)
      goto LABEL_5;
  }
  else if (v4 >= 8)
  {
    v5 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
LABEL_5:
    v6 = *v5;
    goto LABEL_34;
  }
  v7 = a2;
  if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
  {
    v8 = *(_QWORD *)(a2 + 16);
    v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    if ((v8 & 4) != 0)
      v9 = *(_QWORD *)v9;
    for (i = *(_WORD *)(v9 + 8) & 0x7F; i != 83; i = *(_WORD *)(v9 + 8) & 0x7F)
    {
      v11 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v11 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_20;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_19;
        if (i == 16)
          goto LABEL_13;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_26;
        if (i == 24)
        {
LABEL_13:
          v11 = -48;
        }
        else
        {
LABEL_19:
          if (i != 70)
          {
LABEL_20:
            v12 = i - 52;
            if ((i - 33) >= 5)
              v13 = -48;
            else
              v13 = -64;
            if (v12 >= 6)
              v11 = v13;
            else
              v11 = -72;
            goto LABEL_26;
          }
          v11 = -64;
        }
      }
LABEL_26:
      v14 = *(_QWORD *)(v9 + v11 + 16);
      v9 = v14 & 0xFFFFFFFFFFFFFFF8;
      if ((v14 & 4) != 0)
        v9 = *(_QWORD *)v9;
    }
    v7 = v9 - 40;
  }
  v6 = sub_22EFE86B0(*(_QWORD *)(v7 + 88), *(_QWORD *)(a2 + 48));
LABEL_34:
  if ((*(_BYTE *)(a1 + 9) & 1) != 0)
    goto LABEL_58;
  if ((*(_BYTE *)(a2 + 96) & 7) != 0)
  {
    v15 = *(llvm::raw_ostream **)a1;
    v16 = off_24FAC4D18[(*(_BYTE *)(a2 + 96) & 7) - 1];
    v17 = strlen(v16);
    v18 = *(_BYTE **)(*(_QWORD *)a1 + 32);
    if (v17 <= *(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v18)
    {
      if (v17)
      {
        memcpy(v18, v16, v17);
        v18 = (_BYTE *)(*((_QWORD *)v15 + 4) + v17);
        *((_QWORD *)v15 + 4) = v18;
      }
    }
    else
    {
      v15 = (llvm::raw_ostream *)llvm::raw_ostream::write(v15, v16);
      v18 = (_BYTE *)*((_QWORD *)v15 + 4);
    }
    if (*((_BYTE **)v15 + 3) == v18)
    {
      llvm::raw_ostream::write(v15, " ");
    }
    else
    {
      *v18 = 32;
      ++*((_QWORD *)v15 + 4);
    }
  }
  v19 = (*(unsigned __int8 *)(a2 + 96) >> 3) & 3;
  switch(v19)
  {
    case 3:
      v20 = *(llvm::raw_ostream **)a1;
      v24 = *(void **)(*(_QWORD *)a1 + 32);
      if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v24 <= 0xDuLL)
      {
        v22 = "_Thread_local ";
        goto LABEL_49;
      }
      qmemcpy(v24, "_Thread_local ", 14);
      v51 = *((_QWORD *)v20 + 4) + 14;
      goto LABEL_99;
    case 2:
      v20 = *(llvm::raw_ostream **)a1;
      v23 = *(void **)(*(_QWORD *)a1 + 32);
      if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v23 <= 0xCuLL)
      {
        v22 = "thread_local ";
        goto LABEL_49;
      }
      qmemcpy(v23, "thread_local ", 13);
      v51 = *((_QWORD *)v20 + 4) + 13;
LABEL_99:
      *((_QWORD *)v20 + 4) = v51;
      break;
    case 1:
      v20 = *(llvm::raw_ostream **)a1;
      v21 = *(_QWORD *)(*(_QWORD *)a1 + 32);
      if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v21) <= 8)
      {
        v22 = "__thread ";
LABEL_49:
        llvm::raw_ostream::write(v20, v22);
        break;
      }
      *(_BYTE *)(v21 + 8) = 32;
      *(_QWORD *)v21 = *(_QWORD *)"__thread ";
      v51 = *((_QWORD *)v20 + 4) + 9;
      goto LABEL_99;
  }
  if ((~*(_DWORD *)(a2 + 8) & 6) == 0)
  {
    v25 = *(llvm::raw_ostream **)a1;
    v26 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v26) > 0x12)
    {
      *(_DWORD *)(v26 + 15) = 543121253;
      *(_OWORD *)v26 = *(_OWORD *)"__module_private__ ";
      *((_QWORD *)v25 + 4) += 19;
    }
    else
    {
      llvm::raw_ostream::write(v25, "__module_private__ ");
    }
  }
  if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x40 && (*(_BYTE *)(a2 + 97) & 0x80) != 0)
  {
    v27 = *(llvm::raw_ostream **)a1;
    v28 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v28) > 9)
    {
      *(_WORD *)(v28 + 8) = 8306;
      *(_QWORD *)v28 = *(_QWORD *)"constexpr ";
      *((_QWORD *)v27 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v27, "constexpr ");
    }
    v6 &= ~1uLL;
  }
LABEL_58:
  if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40
    && (*(_BYTE *)(a1 + 13) & 0x20) != 0
    && (v35 = *(_QWORD *)(a2 + 40), (v35 & 7) == 0)
    && (v35 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v31 = sub_22F1D3238(v35 & 0xFFFFFFFFFFFFFFF8);
    v29 = v36;
  }
  else
  {
    v29 = 0;
    v30 = *(_QWORD *)(a2 + 40);
    v31 = "";
    if ((v30 & 7) == 0)
    {
      v32 = v30 & 0xFFFFFFFFFFFFFFF8;
      if (v32)
      {
        v33 = *(_DWORD **)(v32 + 16);
        v34 = *v33;
        v31 = (const char *)(v33 + 4);
        v29 = v34;
      }
    }
  }
  sub_22EFE5334((uint64_t *)a1, v6, (uint64_t)v31, v29, 0);
  v37 = (unsigned __int8 *)sub_22EFBC5B4(a2);
  if ((*(_BYTE *)(a1 + 9) & 0x80) == 0)
  {
    v38 = v37;
    if (v37)
    {
      v39 = sub_22EFFED0C(v37);
      if ((*v39 & 0xFE) != 0x76 || (*(_BYTE *)(a2 + 96) & 0x60) != 0x20 || (*(_DWORD *)v39 & 0x100000) != 0)
        goto LABEL_78;
      if (*((_DWORD *)v39 + 8))
      {
        v40 = *(_DWORD *)v39;
        v41 = v40 == 119;
        if (v40 == 119)
          v42 = v39;
        else
          v42 = 0;
        v43 = (unsigned __int8 **)(v42 + 48);
        if (!v41)
          v43 = (unsigned __int8 **)(v39 + 40);
        if (!sub_22EFFF908(*v43))
        {
LABEL_78:
          if ((*(_BYTE *)(a2 + 96) & 0x60) != 0)
          {
            if ((*(_BYTE *)(a2 + 96) & 0x60) != 0x20 || *v38 == 215)
            {
LABEL_86:
              v52 = *(_OWORD *)(a1 + 8);
              *(_QWORD *)&v52 = v52 & 0xFFFFFFFFFFFFF6FFLL;
              sub_22F0D9044((int)v38, *(_QWORD *)a1, 0, (int)&v52, *(_DWORD *)(a1 + 32), "\n", 1uLL);
              if ((*(_BYTE *)(a2 + 96) & 0x60) == 0x20 && *v38 != 215)
              {
                v48 = *(llvm::raw_ostream **)a1;
                v49 = *(_BYTE **)(*(_QWORD *)a1 + 32);
                if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v49)
                {
                  llvm::raw_ostream::write(v48, ")");
                }
                else
                {
                  *v49 = 41;
                  ++*((_QWORD *)v48 + 4);
                }
              }
              goto LABEL_90;
            }
            v44 = *(llvm::raw_ostream **)a1;
            v45 = *(_BYTE **)(*(_QWORD *)a1 + 32);
            if (*(_BYTE **)(*(_QWORD *)a1 + 24) == v45)
            {
              v46 = "(";
LABEL_85:
              llvm::raw_ostream::write(v44, v46);
              goto LABEL_86;
            }
            *v45 = 40;
            v50 = *((_QWORD *)v44 + 4) + 1;
          }
          else
          {
            v44 = *(llvm::raw_ostream **)a1;
            v47 = *(_QWORD *)(*(_QWORD *)a1 + 32);
            if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v47) <= 2)
            {
              v46 = " = ";
              goto LABEL_85;
            }
            *(_BYTE *)(v47 + 2) = 32;
            *(_WORD *)v47 = 15648;
            v50 = *((_QWORD *)v44 + 4) + 3;
          }
          *((_QWORD *)v44 + 4) = v50;
          goto LABEL_86;
        }
      }
    }
  }
LABEL_90:
  sub_22EFE8350(a1, a2);
}

void sub_22EFE8350(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t i;
  unsigned int v6;

  if ((*(_BYTE *)(a1 + 11) & 0x80) == 0 && (*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v3 = *(unsigned int *)(v2 + 8);
    if ((_DWORD)v3)
    {
      v4 = *(uint64_t **)v2;
      for (i = 8 * v3; i; i -= 8)
      {
        if (((*(unsigned __int16 *)(*v4 + 32) | (*(unsigned __int8 *)(*v4 + 34) << 16)) & 0x50000) == 0)
        {
          v6 = *(unsigned __int16 *)(*v4 + 32);
          if (v6 > 0x170)
          {
            if (v6 == 369 || v6 == 479)
              goto LABEL_6;
          }
          else if (v6 - 245 < 2 || v6 == 367)
          {
            goto LABEL_6;
          }
          sub_22EF9CD90(*v4);
        }
LABEL_6:
        ++v4;
      }
    }
  }
}

llvm::raw_ostream *sub_22EFE8418(uint64_t *a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  uint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  llvm::raw_ostream *v11;
  _WORD *v12;
  int v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  const char *v16;
  _OWORD *v17;
  llvm::raw_ostream *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  llvm::raw_ostream *result;
  _BYTE *v23;
  uint64_t v24;
  __int128 __p;
  uint64_t v26;

  v4 = (llvm::raw_ostream *)*a1;
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, "<");
  }
  else
  {
    *v5 = 60;
    ++*((_QWORD *)v4 + 4);
  }
  v6 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = (uint64_t *)(a2 + 16);
    for (i = 8 * v6; i; i -= 8)
    {
      v10 = *v8;
      if ((v7 & 1) != 0)
      {
        v11 = (llvm::raw_ostream *)*a1;
        v12 = *(_WORD **)(*a1 + 32);
        if (*(_QWORD *)(*a1 + 24) - (_QWORD)v12 > 1uLL)
        {
          *v12 = 8236;
          *((_QWORD *)v11 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v11, ", ");
        }
      }
      v13 = *(unsigned __int16 *)(v10 + 88) >> 14;
      if (v13 == 2)
      {
        v14 = (llvm::raw_ostream *)*a1;
        v17 = *(_OWORD **)(*a1 + 32);
        if (*(_QWORD *)(*a1 + 24) - (_QWORD)v17 <= 0xFuLL)
        {
          v16 = "__contravariant ";
          goto LABEL_14;
        }
        *v17 = *(_OWORD *)"__contravariant ";
        v21 = *((_QWORD *)v14 + 4) + 16;
      }
      else
      {
        if (v13 != 1)
          goto LABEL_15;
        v14 = (llvm::raw_ostream *)*a1;
        v15 = *(_QWORD *)(*a1 + 32);
        if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v15) <= 0xB)
        {
          v16 = "__covariant ";
LABEL_14:
          llvm::raw_ostream::write(v14, v16);
          goto LABEL_15;
        }
        *(_DWORD *)(v15 + 8) = 544501345;
        *(_QWORD *)v15 = *(_QWORD *)"__covariant ";
        v21 = *((_QWORD *)v14 + 4) + 12;
      }
      *((_QWORD *)v14 + 4) = v21;
LABEL_15:
      sub_22EFC6724(*a1, *(_QWORD *)(v10 + 40));
      if (*(_DWORD *)(v10 + 96))
      {
        v18 = (llvm::raw_ostream *)*a1;
        v19 = *(_QWORD *)(*a1 + 32);
        if ((unint64_t)(*(_QWORD *)(*a1 + 24) - v19) > 2)
        {
          *(_BYTE *)(v19 + 2) = 32;
          *(_WORD *)v19 = 14880;
          *((_QWORD *)v18 + 4) += 3;
        }
        else
        {
          v18 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)*a1, " : ");
        }
        v24 = *(_QWORD *)((*(_QWORD *)(v10 + 80) & 0xFFFFFFFFFFFFFFF8)
                        + ((2 * *(_QWORD *)(v10 + 80)) & 8));
        __p = 0uLL;
        v26 = 0;
        sub_22F119374(&v24, &__p, (uint64_t)(a1 + 1));
        v20 = v26 >= 0 ? (const char *)&__p : (const char *)__p;
        llvm::raw_ostream::write(v18, v20);
        if (SHIBYTE(v26) < 0)
          operator delete((void *)__p);
      }
      ++v8;
      v7 = 1;
    }
  }
  result = (llvm::raw_ostream *)*a1;
  v23 = *(_BYTE **)(*a1 + 32);
  if (*(_BYTE **)(*a1 + 24) == v23)
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result, ">");
  *v23 = 62;
  ++*((_QWORD *)result + 4);
  return result;
}

uint64_t sub_22EFE86B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  v3 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(v3 + 8);
  if (*(_BYTE *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
  {
    v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v5 & 8) != 0)
    {
      v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      if ((v6 & 0x1C0) != 0)
      {
        v7 = (v5 | a2) & 7;
        if ((v4 & 0xF) != 0)
          v3 = (unint64_t)sub_22F10D2BC(a2);
        v8 = v3 & 0xFFFFFFFFFFFFFFF0;
        if ((v6 & 0xCFFFFFE38) != 0)
        {
          v11 = v6 & 0xFFFFFFFFFFFFFE3FLL | v7;
          v9 = sub_22E491354((unsigned int *)&v11, v8);
          return sub_22EF5DBC4(a1, v9, v11);
        }
        else
        {
          return v8 | v6 & 7 | v7 & 7;
        }
      }
    }
  }
  return a2;
}

llvm::raw_ostream *sub_22EFE877C(llvm::raw_ostream **a1, uint64_t a2, char a3, uint64_t a4)
{
  llvm::raw_ostream *v7;
  _BYTE *v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  _DWORD *v14;
  llvm::raw_ostream *v15;
  _DWORD *v16;
  llvm::raw_ostream *v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  _DWORD *v20;
  unsigned __int16 v21;
  llvm::raw_ostream *v22;
  size_t v23;
  char *v24;
  void *v25;
  _BYTE *v26;
  llvm::raw_ostream *v27;
  const char *p_p;
  llvm::raw_ostream *result;
  _BYTE *v30;
  uint64_t v31;
  __int128 __p;
  uint64_t v33;
  uint64_t v34;

  v34 = a4;
  v7 = *a1;
  v8 = (_BYTE *)*((_QWORD *)v7 + 4);
  if ((unint64_t)v8 >= *((_QWORD *)v7 + 3))
  {
    llvm::raw_ostream::write(v7);
    if ((a3 & 1) == 0)
      goto LABEL_7;
  }
  else
  {
    *((_QWORD *)v7 + 4) = v8 + 1;
    *v8 = 40;
    if ((a3 & 1) == 0)
    {
LABEL_7:
      if ((a3 & 2) == 0)
        goto LABEL_8;
      goto LABEL_15;
    }
  }
  v9 = *a1;
  v10 = *((_QWORD *)*a1 + 4);
  if ((unint64_t)(*((_QWORD *)*a1 + 3) - v10) <= 2)
  {
    llvm::raw_ostream::write(v9, "in ");
    goto LABEL_7;
  }
  *(_BYTE *)(v10 + 2) = 32;
  *(_WORD *)v10 = 28265;
  *((_QWORD *)v9 + 4) += 3;
  if ((a3 & 2) == 0)
  {
LABEL_8:
    if ((a3 & 4) == 0)
      goto LABEL_9;
LABEL_17:
    v13 = *a1;
    v14 = (_DWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v14 > 3uLL)
    {
      *v14 = 544503151;
      *((_QWORD *)v13 + 4) += 4;
      if ((a3 & 8) != 0)
        goto LABEL_19;
    }
    else
    {
      llvm::raw_ostream::write(v13, "out ");
      if ((a3 & 8) != 0)
        goto LABEL_19;
    }
LABEL_10:
    if ((a3 & 0x10) == 0)
      goto LABEL_11;
LABEL_21:
    v17 = *a1;
    v18 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v18) > 5)
    {
      *(_WORD *)(v18 + 4) = 8294;
      *(_DWORD *)v18 = 1702000994;
      *((_QWORD *)v17 + 4) += 6;
      if ((a3 & 0x20) != 0)
        goto LABEL_23;
    }
    else
    {
      llvm::raw_ostream::write(v17, "byref ");
      if ((a3 & 0x20) != 0)
        goto LABEL_23;
    }
LABEL_12:
    if ((a3 & 0x40) == 0)
      goto LABEL_32;
    goto LABEL_25;
  }
LABEL_15:
  v11 = *a1;
  v12 = *((_QWORD *)*a1 + 4);
  if ((unint64_t)(*((_QWORD *)*a1 + 3) - v12) > 5)
  {
    *(_WORD *)(v12 + 4) = 8308;
    *(_DWORD *)v12 = 1970237033;
    *((_QWORD *)v11 + 4) += 6;
    if ((a3 & 4) != 0)
      goto LABEL_17;
  }
  else
  {
    llvm::raw_ostream::write(v11, "inout ");
    if ((a3 & 4) != 0)
      goto LABEL_17;
  }
LABEL_9:
  if ((a3 & 8) == 0)
    goto LABEL_10;
LABEL_19:
  v15 = *a1;
  v16 = (_DWORD *)*((_QWORD *)*a1 + 4);
  if (*((_QWORD *)*a1 + 3) - (_QWORD)v16 > 6uLL)
  {
    *(_DWORD *)((char *)v16 + 3) = 544829551;
    *v16 = 1868790114;
    *((_QWORD *)v15 + 4) += 7;
    if ((a3 & 0x10) != 0)
      goto LABEL_21;
  }
  else
  {
    llvm::raw_ostream::write(v15, "bycopy ");
    if ((a3 & 0x10) != 0)
      goto LABEL_21;
  }
LABEL_11:
  if ((a3 & 0x20) == 0)
    goto LABEL_12;
LABEL_23:
  v19 = *a1;
  v20 = (_DWORD *)*((_QWORD *)*a1 + 4);
  if (*((_QWORD *)*a1 + 3) - (_QWORD)v20 > 6uLL)
  {
    *(_DWORD *)((char *)v20 + 3) = 544825719;
    *v20 = 2003136111;
    *((_QWORD *)v19 + 4) += 7;
    if ((a3 & 0x40) == 0)
      goto LABEL_32;
  }
  else
  {
    llvm::raw_ostream::write(v19, "oneway ");
    if ((a3 & 0x40) == 0)
      goto LABEL_32;
  }
LABEL_25:
  v21 = sub_22F114F34(&v34);
  if (v21 >= 0x100u)
  {
    v22 = *a1;
    v23 = qword_22F4A1C10[(char)v21];
    v24 = off_24FAC4D40[(char)v21];
    v25 = (void *)*((_QWORD *)*a1 + 4);
    if (v23 <= *((_QWORD *)*a1 + 3) - (_QWORD)v25)
    {
      memcpy(v25, v24, v23);
      v26 = (_BYTE *)(*((_QWORD *)v22 + 4) + v23);
      *((_QWORD *)v22 + 4) = v26;
    }
    else
    {
      v22 = (llvm::raw_ostream *)llvm::raw_ostream::write(*a1, v24);
      v26 = (_BYTE *)*((_QWORD *)v22 + 4);
    }
    if ((unint64_t)v26 >= *((_QWORD *)v22 + 3))
    {
      llvm::raw_ostream::write(v22);
    }
    else
    {
      *((_QWORD *)v22 + 4) = v26 + 1;
      *v26 = 32;
    }
  }
LABEL_32:
  v27 = *a1;
  v31 = sub_22EFE86B0(a2, v34);
  __p = 0uLL;
  v33 = 0;
  sub_22F119374(&v31, &__p, (uint64_t)(a1 + 1));
  if (v33 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  llvm::raw_ostream::write(v27, p_p);
  if (SHIBYTE(v33) < 0)
    operator delete((void *)__p);
  result = *a1;
  v30 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v30 >= *((_QWORD *)*a1 + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result);
  *((_QWORD *)result + 4) = v30 + 1;
  *v30 = 41;
  return result;
}

void sub_22EFE8B04(_DWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  int i;
  llvm::raw_ostream *v9;
  _WORD *v10;

  if ((*((_BYTE *)a1 + 11) & 0x80) == 0 && (*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a2);
    v4 = *(unsigned int *)(v3 + 8);
    if ((_DWORD)v4)
    {
      v5 = *(uint64_t **)v3;
      v6 = *(_QWORD *)v3 + 8 * v4;
      do
      {
        v7 = *(unsigned __int16 *)(*v5 + 32);
        if (v7 > 0x170)
        {
          if (v7 == 479 || v7 == 369)
          {
LABEL_11:
            sub_22EF9CD90(*v5);
            for (i = a1[8]; i; --i)
            {
              v9 = *(llvm::raw_ostream **)a1;
              v10 = *(_WORD **)(*(_QWORD *)a1 + 32);
              if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v10 > 1uLL)
              {
                *v10 = 8224;
                *((_QWORD *)v9 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v9, "  ");
              }
            }
          }
        }
        else if (v7 - 245 < 2 || v7 == 367)
        {
          goto LABEL_11;
        }
        ++v5;
      }
      while (v5 != (uint64_t *)v6);
    }
  }
}

llvm::raw_ostream *sub_22EFE8C08(llvm::raw_ostream **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::raw_ostream *v8;
  _BYTE *v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  _WORD *v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  llvm::raw_ostream *result;
  _BYTE *v16;

  v8 = *a1;
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, "<");
    if (!a3)
      goto LABEL_14;
  }
  else
  {
    *v9 = 60;
    ++*((_QWORD *)v8 + 4);
    if (!a3)
      goto LABEL_14;
  }
  v10 = 0;
  do
  {
    if (v10)
    {
      v11 = *a1;
      v12 = (_WORD *)*((_QWORD *)*a1 + 4);
      if (*((_QWORD *)*a1 + 3) - (_QWORD)v12 > 1uLL)
      {
        *v12 = 8236;
        *((_QWORD *)v11 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v11, ", ");
      }
    }
    v13 = *a1;
    if (a4)
      v14 = sub_22EFE9290((uint64_t)(a1 + 1), a4, v10);
    else
      v14 = 1;
    sub_22F0EF330(a2, a1 + 1, v13, v14);
    ++v10;
    a2 += 24;
  }
  while (a3 != v10);
LABEL_14:
  result = *a1;
  v16 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if (*((_BYTE **)*a1 + 3) == v16)
    return (llvm::raw_ostream *)llvm::raw_ostream::write(result, ">");
  *v16 = 62;
  ++*((_QWORD *)result + 4);
  return result;
}

_DWORD *sub_22EFE8D6C(_DWORD *a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6, int a7, uint64_t a8)
{
  int v10;
  unint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  char v22;

  *a1 = a3;
  a1[1] = a4;
  v10 = a6 & 0x1FFFFFFF | ((a8 != 0) << 30);
  a1[2] = a7;
  a1[3] = v10;
  if ((a6 & 0x1FFFFFFF) != 0)
  {
    v12 = 0;
    while (1)
    {
      v13 = *(_QWORD *)(a5 + 8 * v12);
      *(_QWORD *)&a1[2 * v12 + 4] = v13;
      v14 = sub_22EFC7864(v13);
      v15 = *(_DWORD *)(v13 + 28) & 0x7F;
      if (v13)
      {
        if (v15 == 59)
          break;
      }
      if (!v13 || v15 != 32)
      {
        if (v15 == 38)
          v19 = v13;
        else
          v19 = 0;
        v20 = *(_BYTE *)(v19 + 60);
        if ((v20 & 4) != 0 && (*(_BYTE *)(*(_QWORD *)(v19 + 152) + 1) & 0x20) != 0)
        {
          a1[3] |= 0x20000000u;
          v20 = *(_BYTE *)(v19 + 60);
        }
        if ((v20 & 2) == 0)
          goto LABEL_26;
LABEL_24:
        v18 = 0x80000000;
        goto LABEL_25;
      }
      if ((v14 & 1) != 0 || (sub_22EFE8EE4(*(_QWORD *)(v13 + 56)) & 1) == 0)
        goto LABEL_26;
      v18 = 0x20000000;
LABEL_25:
      a1[3] |= v18;
LABEL_26:
      ++v12;
      v10 = a1[3];
      if (v12 >= (v10 & 0x1FFFFFFFu))
        goto LABEL_27;
    }
    if ((v14 & 1) == 0 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 1) != 0)
      a1[3] |= 0x20000000u;
    v16 = *(_QWORD *)(*(_QWORD *)(v13 + 48) & 0xFFFFFFFFFFFFFFF0);
    v22 = 0;
    v17 = sub_22F110500((uint64_t)&v22, v16);
    if (!v17 || *(_BYTE *)(v17 + 16) != 14 || !*(_QWORD *)(v17 + 40))
      goto LABEL_26;
    goto LABEL_24;
  }
LABEL_27:
  if ((v10 & 0x40000000) != 0)
  {
    if ((*(_BYTE *)(a8 + 1) & 0x20) != 0)
    {
      v10 |= 0x20000000u;
      a1[3] = v10;
    }
    *(_QWORD *)&a1[2 * (v10 & 0x1FFFFFFF) + 4] = a8;
  }
  return a1;
}

uint64_t sub_22EFE8EE4(uint64_t a1)
{
  int v1;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;

  v1 = *(_DWORD *)(a1 + 12);
  if ((v1 & 0x20000000) != 0)
    return 1;
  if (v1 < 0)
  {
    v3 = v1 & 0x1FFFFFFF;
    if ((_DWORD)v3)
    {
      for (i = 8 * v3; i; i -= 8)
      {
        v5 = *(_QWORD *)(a1 + 8 + i);
        if ((*(_DWORD *)(v5 + 28) & 0x200) == 0)
          break;
        if ((*(_DWORD *)(v5 + 28) & 0x7F) == 0x26
          && (*(_BYTE *)(v5 + 60) & 4) != 0
          && (*(_BYTE *)(*(_QWORD *)(v5 + 152) + 1) & 0x20) != 0)
        {
          return 1;
        }
      }
    }
  }
  return 0;
}

_DWORD *sub_22EFE8F48(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  int v9;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;

  v9 = a5;
  if (a7)
    v13 = a5 + 1;
  else
    v13 = a5;
  v14 = (_DWORD *)sub_22E3CD3D4(a1 + 2032, 8 * v13 + 16, 3);
  return sub_22EFE8D6C(v14, v15, a2, a3, a4, v9, a6, a7);
}

uint64_t sub_22EFE8FBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t i;
  uint64_t v5;
  int v6;
  int v7;
  BOOL v8;
  char v9;
  int *v10;
  int v11;

  v1 = 0;
  v2 = *(_DWORD *)(a1 + 12) & 0x1FFFFFFF;
  if ((_DWORD)v2)
  {
    v3 = (uint64_t *)(a1 + 16);
    for (i = 8 * v2; i; i -= 8)
    {
      v5 = *v3;
      v6 = sub_22EFC7864(*v3);
      v7 = *(_DWORD *)(v5 + 28) & 0x7F;
      if (v5)
        v8 = v7 == 38;
      else
        v8 = 0;
      v9 = !v8;
      if (v6)
      {
        if ((v9 & 1) != 0)
        {
          if ((!v5 || v7 != 59) && (!v5 || v7 != 32) || !*(_BYTE *)(v5 + 81))
            return v1;
          v10 = (int *)(v5 + 84);
        }
        else
        {
          if ((*(_BYTE *)(v5 + 60) & 8) == 0)
            return v1;
          v10 = (int *)(v5 + 64);
        }
        v11 = *v10;
      }
      else
      {
        if ((v9 & 1) != 0 && v5 && v7 == 59)
        {
          if (*(_QWORD *)(v5 + 72) > 3uLL)
            return v1;
        }
        else if (*(_QWORD *)(v5 + 72) > 7uLL)
        {
          return v1;
        }
        v11 = 1;
      }
      v1 = (v11 + v1);
      ++v3;
    }
  }
  return v1;
}

uint64_t sub_22EFE90A8(uint64_t a1)
{
  uint64_t v1;
  int v2;
  _DWORD *v3;
  int v4;

  if ((*(_DWORD *)(a1 + 12) & 0x1FFFFFFF) == 0)
    return 0;
  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_DWORD *)(v1 + 28) & 0x7F;
  if (v1 && v2 == 38)
  {
    v3 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 32);
    v4 = 0x7FFF;
  }
  else
  {
    if (v1 && v2 == 59)
      v3 = (_DWORD *)(v1 + 68);
    else
      v3 = (_DWORD *)(v1 + 64);
    v4 = 0xFFFFF;
  }
  return *v3 & v4;
}

uint64_t sub_22EFE9130(uint64_t a1)
{
  return *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                   + 8) & 0xFFFFFFFFFFFFFFF0)
                                           + 8) & 0xFFFFFFFFFFFFFFF0)
                   + 32) & 0x7FFF;
}

uint64_t sub_22EFE9164(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if (v4 < 0 && (v4 & 0x1FFFFFFF) != 0)
  {
    v5 = (uint64_t *)(result + 16);
    v6 = 8 * (v4 & 0x1FFFFFFF);
    while (1)
    {
      result = *v5;
      v7 = *(_DWORD *)(*v5 + 28) & 0x7F;
      if (*v5 && v7 == 38)
      {
        if ((*(_BYTE *)(result + 60) & 4) != 0)
        {
          v8 = *(_QWORD *)(result + 152);
LABEL_8:
          v9 = *(unsigned int *)(a2 + 8);
          if (v9 >= *(unsigned int *)(a2 + 12))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod();
            v9 = *(unsigned int *)(a2 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v9) = v8;
          ++*(_DWORD *)(a2 + 8);
        }
      }
      else if (result)
      {
        if (v7 == 59)
        {
          result = sub_22F2D6770(result);
          if (result)
          {
            v8 = result;
            goto LABEL_8;
          }
        }
      }
      ++v5;
      v6 -= 8;
      if (!v6)
      {
        v4 = *(_DWORD *)(v3 + 12);
        break;
      }
    }
  }
  if ((v4 & 0x40000000) != 0)
  {
    v10 = *(_QWORD *)(v3 + 8 * (v4 & 0x1FFFFFFF) + 16);
    v11 = *(_DWORD *)(a2 + 8);
    if (v11 >= *(_DWORD *)(a2 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v11 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v11) = v10;
    ++*(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t sub_22EFE9290(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  char v6;

  if (!a2)
    return 1;
  if ((*(_DWORD *)(a2 + 12) & 0x1FFFFFFFu) <= a3)
    return 1;
  if ((*(_BYTE *)(a1 + 5) & 0x10) != 0)
    return 1;
  v3 = *(_QWORD *)(a2 + 8 * a3 + 16);
  if (v3)
  {
    if ((*(_DWORD *)(v3 + 28) & 0x7F) == 0x3B)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFFFF0);
      v6 = 0;
      if (sub_22F110500((uint64_t)&v6, v4))
        return 1;
    }
  }
  return 0;
}

BOOL sub_22EFE9310(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_DWORD *)(*(_QWORD *)(a1 + 56) + 12) >> 30)
    return 1;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 && (*(_DWORD *)(v2 + 28) & 0x7Eu) - 52 <= 5 && (v3 = *(_QWORD *)(v2 + 56), (v3 & 4) != 0))
    return *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFF8) + 40) != 0;
  else
    return 0;
}

uint64_t sub_22EFE9368(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int i;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  result = *(_QWORD *)(a1 + 80);
  if (result)
    return result;
  v17 = 0;
  if ((*(_BYTE *)(a1 + 64) & 3) == 0)
  {
    v11 = sub_22E3CD31C((uint64_t *)(a1 + 64), a1);
    if (v11)
    {
      v12 = v11;
      while (1)
      {
        result = *(_QWORD *)(v12 + 80);
        if (result)
          goto LABEL_30;
        v13 = v17;
        if (v17 >= 2uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v13 = v17;
        }
        v18[v13] = v12;
        ++v17;
        if ((*(_BYTE *)(v12 + 64) & 3) == 0)
        {
          v12 = sub_22E3CD31C((uint64_t *)(v12 + 64), v12);
          if (v12)
            continue;
        }
        break;
      }
    }
  }
  result = *(_QWORD *)(a1 + 80);
  if (result)
    goto LABEL_31;
  v3 = a1;
  if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 4) != 0)
      v5 = *(_QWORD *)v5;
    for (i = *(_WORD *)(v5 + 8) & 0x7F; i != 83; i = *(_WORD *)(v5 + 8) & 0x7F)
    {
      v7 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v7 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_22;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_21;
        if (i == 16)
          goto LABEL_11;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_12;
        if (i == 24)
        {
LABEL_11:
          v7 = -48;
        }
        else
        {
LABEL_21:
          if (i != 70)
          {
LABEL_22:
            v9 = i - 52;
            if ((i - 33) >= 5)
              v10 = -48;
            else
              v10 = -64;
            if (v9 >= 6)
              v7 = v10;
            else
              v7 = -72;
            goto LABEL_12;
          }
          v7 = -64;
        }
      }
LABEL_12:
      v8 = *(_QWORD *)(v5 + v7 + 16);
      v5 = v8 & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 4) != 0)
        v5 = *(_QWORD *)v5;
    }
    v3 = v5 - 40;
  }
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 104))(a1, *(_QWORD *)(v3 + 88));
LABEL_30:
  *(_QWORD *)(a1 + 80) = result;
LABEL_31:
  if (v17)
  {
    v14 = 8 * v17;
    v15 = v18;
    do
    {
      v16 = *v15++;
      *(_QWORD *)(v16 + 80) = *(_QWORD *)(a1 + 80);
      v14 -= 8;
    }
    while (v14);
    return *(_QWORD *)(a1 + 80);
  }
  return result;
}

uint64_t sub_22EFE95D4(unint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;

  v2 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 72) + 64), *(_QWORD *)(a1 + 72));
  result = sub_22EFE9368(v2);
  v4 = *(unsigned int **)(result + 8);
  if (v4)
  {
    v5 = result;
    result = sub_22EFC72E8(a1);
    *(_QWORD *)(v5 + 8) = 0;
    v8 = *v4;
    v7 = v4 + 1;
    v6 = v8;
    if (v8)
    {
      v9 = result;
      do
      {
        v10 = *v7++;
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v9 + 16048) + 16))(*(_QWORD *)(v9 + 16048), v10);
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t sub_22EFE964C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;

  v12 = sub_22EFCAE04(a6);
  v13 = sub_22EFE9708(a5, v12);
  v14 = sub_22EFC7430(88, a1, a2, 0);
  v15 = (_QWORD *)sub_22EA41AB8(v14, 29, a2, a3);
  v15[5] = a4;
  v15[6] = a6;
  v15[7] = a5;
  v15[8] = a1 | 2;
  v15[9] = v15;
  v15[10] = 0;
  *v15 = &off_24FAC50C8;
  if (v13)
    sub_22EFC77E8(v14, 1);
  return v14;
}

uint64_t sub_22EFE9708(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *(_DWORD *)(a1 + 12) & 0x1FFFFFFF;
  if ((_DWORD)v2)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 16);
    v6 = a2 & 0xFFFFFFFFFFFFFFFBLL;
    v7 = 8 * v2;
    do
    {
      v8 = *v5;
      *(_QWORD *)(v8 + 16) = v6;
      v9 = *(_DWORD *)(v8 + 28);
      if (v8 && (*(_DWORD *)(v8 + 28) & 0x7F) == 0x20)
      {
        v4 |= sub_22EFE9708(*(_QWORD *)(v8 + 56), a2);
        v9 = *(_DWORD *)(v8 + 28);
      }
      v4 |= (v9 & 0x80) >> 7;
      ++v5;
      v7 -= 8;
    }
    while (v7);
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  return v4 & 1;
}

uint64_t sub_22EFE97A0(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_22E3CD3D4(a1 + 2032, 96, 3);
  *(_DWORD *)v4 = 0;
  *(_DWORD *)(v4 + 4) = a2;
  result = sub_22EA41AB8(v4 + 8, 29, 0, 0);
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = a1 | 2;
  *(_QWORD *)(v4 + 80) = result;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 8) = &off_24FAC50C8;
  return result;
}

_QWORD *sub_22EFE9810(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)sub_22E3CD3D4(a2 + 2032, 120, 3);
  *v3 = 0;
  v3[1] = 0;
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(v3 + 2));
  v3[4] = v3 + 6;
  v3[5] = 0x800000000;
  v3[14] = 0;
  sub_22EF5908C(a2, (uint64_t)sub_22EFECB10, (uint64_t)v3);
  return v3;
}

unint64_t sub_22EFE9880(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18[2];

  v18[0] = a2;
  v18[1] = a3;
  v6 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 72) + 64), *(_QWORD *)(a1 + 72));
  v7 = sub_22EFE9368(v6);
  v8 = *(unsigned int **)(v7 + 8);
  if (v8)
  {
    v11 = v7;
    v12 = sub_22EFC72E8(a1);
    *(_QWORD *)(v11 + 8) = 0;
    v15 = *v8;
    v14 = v8 + 1;
    v13 = v15;
    if (v15)
    {
      v16 = v12;
      do
      {
        v17 = *v14++;
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v16 + 16048) + 16))(*(_QWORD *)(v16 + 16048), v17);
        --v13;
      }
      while (v13);
    }
  }
  v9 = sub_22EFE9368(a1);
  return sub_22EFE992C(a1, v9 + 16, a4, v18);
}

unint64_t sub_22EFE992C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t NodeOrInsertPos;
  uint64_t v16;
  unint64_t v17;
  void *v19;
  uint64_t v20;
  _QWORD v21[17];

  v21[16] = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v20 = 0x2000000000;
  v5 = *a4;
  v4 = a4[1];
  if (!a1 || (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((v6 & 4) != 0)
      v7 = *(_QWORD *)v7;
    for (i = *(_WORD *)(v7 + 8) & 0x7F; i != 83; i = *(_WORD *)(v7 + 8) & 0x7F)
    {
      v9 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v9 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_20;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_19;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_10;
        if (i == 24)
        {
LABEL_9:
          v9 = -48;
        }
        else
        {
LABEL_19:
          if (i != 70)
          {
LABEL_20:
            v11 = i - 52;
            if ((i - 33) >= 5)
              v12 = -48;
            else
              v12 = -64;
            if (v11 >= 6)
              v9 = v12;
            else
              v9 = -72;
            goto LABEL_10;
          }
          v9 = -64;
        }
      }
LABEL_10:
      v10 = *(_QWORD *)(v7 + v9 + 16);
      v7 = v10 & 0xFFFFFFFFFFFFFFF8;
      if ((v10 & 4) != 0)
        v7 = *(_QWORD *)v7;
    }
    a1 = v7 - 40;
  }
  v13 = *(_QWORD *)(a1 + 88);
  v21[0] = a4[1];
  LODWORD(v20) = 2;
  if (v4)
  {
    v14 = 24 * v4;
    do
    {
      sub_22F0EED38(v5, (uint64_t)&v19, v13);
      v5 += 24;
      v14 -= 24;
    }
    while (v14);
  }
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
  {
    v16 = *(_QWORD *)((*(_QWORD *)(NodeOrInsertPos + 8) & 0xFFFFFFFFFFFFFFF8) + 112);
    v17 = sub_22E3CD31C((uint64_t *)(v16 + 104), v16);
  }
  else
  {
    v17 = 0;
  }
  if (v19 != v21)
    free(v19);
  return v17;
}

uint64_t sub_22EFE9B38(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v6 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 72) + 64), *(_QWORD *)(a1 + 72));
  v7 = sub_22EFE9368(v6);
  v8 = *(unsigned int **)(v7 + 8);
  if (v8)
  {
    v11 = v7;
    v12 = sub_22EFC72E8(a1);
    *(_QWORD *)(v11 + 8) = 0;
    v15 = *v8;
    v14 = v8 + 1;
    v13 = v15;
    if (v15)
    {
      v16 = v12;
      do
      {
        v17 = *v14++;
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v16 + 16048) + 16))(*(_QWORD *)(v16 + 16048), v17);
        --v13;
      }
      while (v13);
    }
  }
  v9 = sub_22EFE9368(a1) + 16;
  return sub_22EFE9BD8(a1, v9, a2, a3);
}

uint64_t sub_22EFE9BD8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
    sub_22F2BFDF0(a2, a3);
  else
    sub_22EFECB48(a2, a3);
  result = sub_22EFC8974(a1);
  if (result)
    return (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)result + 56))(result, a1, *(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
  return result;
}

void sub_22EFE9C40(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BYTE v11[64];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
  {
    v3 = a2;
    v10 = 0;
    if (a2)
    {
      while (1)
      {
        v5 = *(_QWORD *)(v3 + 80);
        if (v5)
        {
          *(_QWORD *)(a1 + 80) = v5;
          return;
        }
        v6 = v10;
        if (v10 >= 8uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v6 = v10;
        }
        *(_QWORD *)&v11[8 * v6] = v3;
        v7 = ++v10;
        if ((*(_BYTE *)(v3 + 64) & 3) != 0)
          break;
        v3 = sub_22E3CD31C((uint64_t *)(v3 + 64), v3);
        if (!v3)
        {
          v7 = v10;
          break;
        }
      }
      if (v7)
      {
        v8 = 0;
        v9 = 8 * v7;
        do
        {
          *(_QWORD *)(*(_QWORD *)&v11[v8] + 80) = v2;
          v8 += 8;
        }
        while (v9 != v8);
      }
    }
  }
}

uint64_t sub_22EFE9D6C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;

  v12 = sub_22EFCAE04(a6);
  v13 = sub_22EFE9708(a5, v12);
  v14 = sub_22EFC7430(88, a1, a2, 0);
  v15 = (_QWORD *)sub_22EA41AB8(v14, 28, a2, a3);
  v15[5] = a4;
  v15[6] = a6;
  v15[7] = a5;
  v15[8] = a1 | 2;
  v15[9] = v15;
  v15[10] = 0;
  *v15 = &off_24FAC51C0;
  if (v13)
    sub_22EFC77E8(v14, 1);
  return v14;
}

uint64_t sub_22EFE9E28(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_22E3CD3D4(a1 + 2032, 96, 3);
  *(_DWORD *)v4 = 0;
  *(_DWORD *)(v4 + 4) = a2;
  result = sub_22EA41AB8(v4 + 8, 28, 0, 0);
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = a1 | 2;
  *(_QWORD *)(v4 + 80) = result;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 8) = &off_24FAC51C0;
  return result;
}

_QWORD *sub_22EFE9E98(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)sub_22E3CD3D4(a2 + 2032, 216, 3);
  *v3 = 0;
  v3[1] = 0;
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(v3 + 2));
  v3[4] = v3 + 6;
  v3[5] = 0x800000000;
  llvm::FoldingSetBase::FoldingSetBase((llvm::FoldingSetBase *)(v3 + 14));
  v3[16] = v3 + 18;
  v3[17] = 0x800000000;
  v3[26] = 0;
  sub_22EF5908C(a2, (uint64_t)sub_22EFECBC8, (uint64_t)v3);
  return v3;
}

unint64_t sub_22EFE9F28(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int i;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24[2];

  v24[0] = a2;
  v24[1] = a3;
  v6 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 72) + 64), *(_QWORD *)(a1 + 72));
  v7 = sub_22EFE9368(v6);
  v8 = *(unsigned int **)(v7 + 8);
  if (!v8)
    goto LABEL_2;
  v11 = a1;
  if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = v12 & 0xFFFFFFFFFFFFFFF8;
    if ((v12 & 4) != 0)
      v13 = *(_QWORD *)v13;
    for (i = *(_WORD *)(v13 + 8) & 0x7F; i != 83; i = *(_WORD *)(v13 + 8) & 0x7F)
    {
      v15 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v15 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_21;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_20;
        if (i == 16)
          goto LABEL_10;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_11;
        if (i == 24)
        {
LABEL_10:
          v15 = -48;
        }
        else
        {
LABEL_20:
          if (i != 70)
          {
LABEL_21:
            v17 = i - 52;
            if ((i - 33) >= 5)
              v18 = -48;
            else
              v18 = -64;
            if (v17 >= 6)
              v15 = v18;
            else
              v15 = -72;
            goto LABEL_11;
          }
          v15 = -64;
        }
      }
LABEL_11:
      v16 = *(_QWORD *)(v13 + v15 + 16);
      v13 = v16 & 0xFFFFFFFFFFFFFFF8;
      if ((v16 & 4) != 0)
        v13 = *(_QWORD *)v13;
    }
    v11 = v13 - 40;
  }
  v19 = *(_QWORD *)(v11 + 88);
  *(_QWORD *)(v7 + 8) = 0;
  v22 = *v8;
  v20 = v8 + 1;
  v21 = v22;
  if (v22)
  {
    do
    {
      v23 = *v20++;
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v19 + 16048) + 16))(*(_QWORD *)(v19 + 16048), v23);
      --v21;
    }
    while (v21);
  }
LABEL_2:
  v9 = sub_22EFE9368(a1);
  return sub_22EFEA0C8(a1, v9 + 16, a4, v24);
}

unint64_t sub_22EFEA0C8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t NodeOrInsertPos;
  unint64_t v16;
  void *v18;
  uint64_t v19;
  _QWORD v20[17];

  v20[16] = *MEMORY[0x24BDAC8D0];
  v18 = v20;
  v19 = 0x2000000000;
  v5 = *a4;
  v4 = a4[1];
  if (!a1 || (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((v6 & 4) != 0)
      v7 = *(_QWORD *)v7;
    for (i = *(_WORD *)(v7 + 8) & 0x7F; i != 83; i = *(_WORD *)(v7 + 8) & 0x7F)
    {
      v9 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v9 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_20;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_19;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_10;
        if (i == 24)
        {
LABEL_9:
          v9 = -48;
        }
        else
        {
LABEL_19:
          if (i != 70)
          {
LABEL_20:
            v11 = i - 52;
            if ((i - 33) >= 5)
              v12 = -48;
            else
              v12 = -64;
            if (v11 >= 6)
              v9 = v12;
            else
              v9 = -72;
            goto LABEL_10;
          }
          v9 = -64;
        }
      }
LABEL_10:
      v10 = *(_QWORD *)(v7 + v9 + 16);
      v7 = v10 & 0xFFFFFFFFFFFFFFF8;
      if ((v10 & 4) != 0)
        v7 = *(_QWORD *)v7;
    }
    a1 = v7 - 40;
  }
  v13 = *(_QWORD *)(a1 + 88);
  v20[0] = a4[1];
  LODWORD(v19) = 2;
  if (v4)
  {
    v14 = 24 * v4;
    do
    {
      sub_22F0EED38(v5, (uint64_t)&v18, v13);
      v5 += 24;
      v14 -= 24;
    }
    while (v14);
  }
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
    v16 = sub_22E6939D8(NodeOrInsertPos - 144);
  else
    v16 = 0;
  if (v18 != v20)
    free(v18);
  return v16;
}

uint64_t sub_22EFEA2C8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v6 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 72) + 64), *(_QWORD *)(a1 + 72));
  v7 = sub_22EFE9368(v6);
  v8 = *(unsigned int **)(v7 + 8);
  if (v8)
  {
    v11 = v7;
    v12 = sub_22EFC72E8(a1);
    *(_QWORD *)(v11 + 8) = 0;
    v15 = *v8;
    v14 = v8 + 1;
    v13 = v15;
    if (v15)
    {
      v16 = v12;
      do
      {
        v17 = *v14++;
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v16 + 16048) + 16))(*(_QWORD *)(v16 + 16048), v17);
        --v13;
      }
      while (v13);
    }
  }
  v9 = sub_22EFE9368(a1) + 16;
  return sub_22EFEA368(a1, v9, a2, a3);
}

uint64_t sub_22EFEA368(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
    sub_22EFECC24(a2, a3);
  else
    sub_22E79FCA8(a2, a3);
  result = sub_22EFC8974(a1);
  if (result)
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a1, a3);
  return result;
}

void sub_22EFEA3CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9 = *(_DWORD *)(a1 + 8);
  if (v9 >= *(_DWORD *)(a1 + 12))
  {
    v13 = a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a3 = v13;
    v9 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v9) = a3;
  v10 = *(_DWORD *)(a1 + 12);
  v11 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v11;
  if (v11 >= v10)
  {
    v14 = a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a3 = v14;
    v11 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v11) = HIDWORD(a3);
  ++*(_DWORD *)(a1 + 8);
  if (a3)
  {
    v12 = 24 * a3;
    do
    {
      sub_22F0EED38(a2, a1, a5);
      a2 += 24;
      v12 -= 24;
    }
    while (v12);
  }
  sub_22EFEA4C8(a5, a1, a4);
}

void sub_22EFEA4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t (**v38)();
  uint64_t v39;
  char v40;
  uint64_t v41;

  v6 = *(_DWORD *)(a3 + 12);
  if ((v6 & 0x40000000) != 0)
    v7 = *(unsigned __int8 **)(a3 + 8 * (v6 & 0x1FFFFFFF) + 16);
  else
    v7 = 0;
  v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v8) = v7 != 0;
  v9 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v9;
  if (v7)
  {
    v40 = 1;
    v38 = &off_24FAC6E70;
    v39 = a2;
    v41 = a1;
    sub_22F0E9FEC(&v38, v7);
    v9 = *(_DWORD *)(a2 + 8);
  }
  v10 = *(_DWORD *)(a3 + 12) & 0x1FFFFFFF;
  if (v9 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v9) = v10;
  ++*(_DWORD *)(a2 + 8);
  v11 = *(_DWORD *)(a3 + 12) & 0x1FFFFFFF;
  if ((_DWORD)v11)
  {
    v12 = (uint64_t *)(a3 + 16);
    v13 = 8 * v11;
    do
    {
      v14 = *v12;
      v15 = *(_DWORD *)(*v12 + 28) & 0x7F;
      if (*v12 && v15 == 59)
      {
        v16 = *(unsigned int *)(a2 + 8);
        if (v16 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v16 = *(unsigned int *)(a2 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a2 + 4 * v16) = 0;
        v17 = *(_DWORD *)(a2 + 12);
        v18 = *(_DWORD *)(a2 + 8) + 1;
        *(_DWORD *)(a2 + 8) = v18;
        v19 = *(unsigned __int8 *)(v14 + 80);
        if (v18 >= v17)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v18 = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v19;
        v20 = *(_DWORD *)(a2 + 12);
        v21 = *(_DWORD *)(a2 + 8) + 1;
        *(_DWORD *)(a2 + 8) = v21;
        v22 = *(_QWORD *)(v14 + 48);
        v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 8);
        if (v21 >= v20)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v21 = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a2 + 4 * v21) = v22 & 7 | v23;
        v24 = *(_DWORD *)(a2 + 12);
        v25 = *(_DWORD *)(a2 + 8) + 1;
        *(_DWORD *)(a2 + 8) = v25;
        if (v25 >= v24)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v25 = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a2 + 4 * v25) = HIDWORD(v23);
        ++*(_DWORD *)(a2 + 8);
      }
      else
      {
        v26 = *(unsigned int *)(a2 + 8);
        v27 = *(unsigned int *)(a2 + 12);
        if (v14 && v15 == 38)
        {
          if (v26 >= v27)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v26 = *(unsigned int *)(a2 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a2 + 4 * v26) = 1;
          v28 = *(_DWORD *)(a2 + 12);
          v29 = *(_DWORD *)(a2 + 8) + 1;
          *(_DWORD *)(a2 + 8) = v29;
          v30 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 48)
                                                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                          + 8) & 0xFFFFFFFFFFFFFFF0)
                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 32);
          if (v29 >= v28)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v29 = *(_DWORD *)(a2 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a2 + 4 * v29) = (v30 >> 15) & 1;
          v31 = *(_DWORD *)(a2 + 12);
          v32 = *(_DWORD *)(a2 + 8) + 1;
          *(_DWORD *)(a2 + 8) = v32;
          v33 = *(unsigned __int8 *)(v14 + 60);
          if (v32 >= v31)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v32 = *(_DWORD *)(a2 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a2 + 4 * v32) = (v33 >> 1) & 1;
          ++*(_DWORD *)(a2 + 8);
          if ((*(_BYTE *)(v14 + 60) & 4) != 0)
          {
            v34 = *(unsigned __int8 **)(v14 + 152);
            v40 = 1;
            v38 = &off_24FAC6E70;
            v39 = a2;
            v41 = a1;
            sub_22F0E9FEC(&v38, v34);
          }
        }
        else
        {
          if (v26 >= v27)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v26 = *(unsigned int *)(a2 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a2 + 4 * v26) = 2;
          v35 = *(_DWORD *)(a2 + 12);
          v36 = *(_DWORD *)(a2 + 8) + 1;
          *(_DWORD *)(a2 + 8) = v36;
          v37 = *(unsigned __int8 *)(v14 + 80);
          if (v36 >= v35)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v36 = *(_DWORD *)(a2 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a2 + 4 * v36) = v37;
          ++*(_DWORD *)(a2 + 8);
          sub_22EFEA4C8(a1, a2, *(_QWORD *)(v14 + 56));
        }
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
}

uint64_t sub_22EFEA8CC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int i;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int j;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;

  v6 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 72) + 64), *(_QWORD *)(a1 + 72));
  v7 = sub_22EFE9368(v6);
  v8 = *(unsigned int **)(v7 + 8);
  if (a3)
  {
    if (!v8)
    {
LABEL_3:
      v9 = sub_22EFE9368(a1);
      sub_22EFEABE0(v9 + 112, a2);
      goto LABEL_6;
    }
    v12 = a1;
    if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
    {
      v13 = *(_QWORD *)(a1 + 16);
      v14 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        v14 = *(_QWORD *)v14;
      for (i = *(_WORD *)(v14 + 8) & 0x7F; i != 83; i = *(_WORD *)(v14 + 8) & 0x7F)
      {
        v16 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v16 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_23;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_22;
          if (i == 16)
            goto LABEL_16;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_29;
          if (i == 24)
          {
LABEL_16:
            v16 = -48;
          }
          else
          {
LABEL_22:
            if (i != 70)
            {
LABEL_23:
              v17 = i - 52;
              if ((i - 33) >= 5)
                v18 = -48;
              else
                v18 = -64;
              if (v17 >= 6)
                v16 = v18;
              else
                v16 = -72;
              goto LABEL_29;
            }
            v16 = -64;
          }
        }
LABEL_29:
        v19 = *(_QWORD *)(v14 + v16 + 16);
        v14 = v19 & 0xFFFFFFFFFFFFFFF8;
        if ((v19 & 4) != 0)
          v14 = *(_QWORD *)v14;
      }
      v12 = v14 - 40;
    }
    v20 = *(_QWORD *)(v12 + 88);
    *(_QWORD *)(v7 + 8) = 0;
    v23 = *v8;
    v21 = v8 + 1;
    v22 = v23;
    if (v23)
    {
      do
      {
        v24 = *v21++;
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v20 + 16048) + 16))(*(_QWORD *)(v20 + 16048), v24);
        --v22;
      }
      while (v22);
    }
    goto LABEL_3;
  }
  if (v8)
  {
    v25 = a1;
    if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
    {
      v26 = *(_QWORD *)(a1 + 16);
      v27 = v26 & 0xFFFFFFFFFFFFFFF8;
      if ((v26 & 4) != 0)
        v27 = *(_QWORD *)v27;
      for (j = *(_WORD *)(v27 + 8) & 0x7F; j != 83; j = *(_WORD *)(v27 + 8) & 0x7F)
      {
        v29 = -40;
        if (j > 70)
        {
          if (j == 71)
          {
            v29 = -56;
          }
          else if (j != 81)
          {
            goto LABEL_53;
          }
        }
        else
        {
          if (j > 0x18)
            goto LABEL_52;
          if (j == 16)
            goto LABEL_46;
          if (((1 << j) & 0x1066) != 0)
            goto LABEL_59;
          if (j == 24)
          {
LABEL_46:
            v29 = -48;
          }
          else
          {
LABEL_52:
            if (j != 70)
            {
LABEL_53:
              v30 = j - 52;
              if ((j - 33) >= 5)
                v31 = -48;
              else
                v31 = -64;
              if (v30 >= 6)
                v29 = v31;
              else
                v29 = -72;
              goto LABEL_59;
            }
            v29 = -64;
          }
        }
LABEL_59:
        v32 = *(_QWORD *)(v27 + v29 + 16);
        v27 = v32 & 0xFFFFFFFFFFFFFFF8;
        if ((v32 & 4) != 0)
          v27 = *(_QWORD *)v27;
      }
      v25 = v27 - 40;
    }
    v33 = *(_QWORD *)(v25 + 88);
    *(_QWORD *)(v7 + 8) = 0;
    v36 = *v8;
    v34 = v8 + 1;
    v35 = v36;
    if (v36)
    {
      do
      {
        v37 = *v34++;
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v33 + 16048) + 16))(*(_QWORD *)(v33 + 16048), v37);
        --v35;
      }
      while (v35);
    }
  }
  v10 = sub_22EFE9368(a1);
  sub_22E79FC14(v10 + 112, a2);
LABEL_6:
  result = sub_22EFC8974(a1);
  if (result)
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a1, a2);
  return result;
}

uint64_t sub_22EFEABE0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;

  result = llvm::FoldingSetBase::InsertNode();
  v5 = *(_DWORD *)(a1 + 24);
  if (v5 >= *(_DWORD *)(a1 + 28))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 24);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v5) = a2;
  ++*(_DWORD *)(a1 + 24);
  return result;
}

unint64_t sub_22EFEAC54(unint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;

  v4 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 72) + 64), *(_QWORD *)(a1 + 72));
  v5 = sub_22EFE9368(v4);
  v6 = *(unsigned int **)(v5 + 8);
  if (v6)
  {
    v14 = v5;
    v15 = sub_22EFC72E8(a1);
    *(_QWORD *)(v14 + 8) = 0;
    v18 = *v6;
    v17 = v6 + 1;
    v16 = v18;
    if (v18)
    {
      v19 = v15;
      do
      {
        v20 = *v17++;
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v19 + 16048) + 16))(*(_QWORD *)(v19 + 16048), v20);
        --v16;
      }
      while (v16);
    }
  }
  result = sub_22EFE9368(a1);
  v8 = result;
  *(_DWORD *)(a2 + 8) = 0;
  if (*(_DWORD *)(a2 + 12) < *(_DWORD *)(result + 124))
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
  v9 = *(unsigned int *)(v8 + 136);
  if ((_DWORD)v9)
  {
    v10 = *(uint64_t **)(v8 + 128);
    v11 = 8 * v9;
    do
    {
      result = sub_22E6939D8(*v10);
      v12 = result;
      v13 = *(unsigned int *)(a2 + 8);
      if (v13 >= *(unsigned int *)(a2 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = *(unsigned int *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v13) = v12;
      ++*(_DWORD *)(a2 + 8);
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

unint64_t sub_22EFEAD74(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int i;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v16;
  uint64_t v17;
  _QWORD v18[49];

  v18[48] = *MEMORY[0x24BDAC8D0];
  v2 = sub_22EFE9368(a1);
  v3 = *(_QWORD *)(v2 + 208);
  if (v3 <= 0xF)
  {
    v4 = v2;
    if (!a1 || (v5 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
    {
      v6 = *(_QWORD *)(a1 + 16);
      v7 = v6 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 4) != 0)
        v7 = *(_QWORD *)v7;
      for (i = *(_WORD *)(v7 + 8) & 0x7F; i != 83; i = *(_WORD *)(v7 + 8) & 0x7F)
      {
        v9 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v9 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_17;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_16;
          if (i == 16)
            goto LABEL_10;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_23;
          if (i == 24)
          {
LABEL_10:
            v9 = -48;
          }
          else
          {
LABEL_16:
            if (i != 70)
            {
LABEL_17:
              v10 = i - 52;
              if ((i - 33) >= 5)
                v11 = -48;
              else
                v11 = -64;
              if (v10 >= 6)
                v9 = v11;
              else
                v9 = -72;
              goto LABEL_23;
            }
            v9 = -64;
          }
        }
LABEL_23:
        v12 = *(_QWORD *)(v7 + v9 + 16);
        v7 = v12 & 0xFFFFFFFFFFFFFFF8;
        if ((v12 & 4) != 0)
          v7 = *(_QWORD *)v7;
      }
      v5 = v7 - 40;
    }
    v13 = *(_QWORD *)(v5 + 88);
    v14 = *(_QWORD *)(a1 + 56);
    v16 = v18;
    v17 = 0x1000000000;
    sub_22EF66594(v13, v14, (uint64_t)&v16);
    v3 = sub_22EF6512C(v13, a1 & 0xFFFFFFFFFFFFFFF9, (uint64_t)v16, v17, 0);
    *(_QWORD *)(v4 + 208) = v3;
    if (v16 != v18)
      free(v16);
  }
  return v3;
}

uint64_t sub_22EFEAF4C(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, unsigned int a6, uint64_t a7, char a8, unsigned __int8 a9, char a10, uint64_t a11)
{
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  if (a10)
    v17 = 80;
  else
    v17 = 0;
  if (a10)
    v18 = 2;
  else
    v18 = 0;
  v19 = sub_22EFC7430(80, a1, a2, v17);
  v20 = sub_22EA41AB8(v19, 38, a2, a4);
  *(_QWORD *)(v20 + 40) = a7;
  *(_QWORD *)(v20 + 48) = 0;
  *(_DWORD *)(v20 + 56) = a3;
  *(_QWORD *)v20 = &off_24FAC5148;
  *(_BYTE *)(v20 + 60) = v18 | a8 | (8 * ((a11 & 0xFF00000000) != 0)) | *(_BYTE *)(v20 + 60) & 0xF0;
  if ((a11 & 0xFF00000000) != 0)
    v21 = a11;
  else
    v21 = 0;
  *(_DWORD *)(v20 + 64) = v21;
  *(_QWORD *)(v20 + 72) = 0;
  *(_QWORD *)(v19 + 48) = *(_QWORD *)(sub_22EF64B98(a1, a5, a6, a9, v19) & 0xFFFFFFFFFFFFFFF0);
  return v19;
}

uint64_t sub_22EFEB050(uint64_t a1, int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t result;

  if (a3)
    v4 = 168;
  else
    v4 = 88;
  v5 = a1 + 2032;
  if (a3)
    v6 = 2;
  else
    v6 = 0;
  v7 = sub_22E3CD3D4(v5, v4, 3);
  *(_DWORD *)v7 = 0;
  *(_DWORD *)(v7 + 4) = a2;
  result = sub_22EA41AB8(v7 + 8, 38, 0, 0);
  *(_DWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 8) = &off_24FAC5148;
  *(_BYTE *)(v7 + 68) = *(_BYTE *)(v7 + 68) & 0xF0 | v6;
  *(_DWORD *)(v7 + 72) = 0;
  *(_QWORD *)(v7 + 80) = 0;
  return result;
}

uint64_t sub_22EFEB0E0(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 72);
  v1 = (uint64_t *)(a1 + 72);
  v2 = v3;
  if (v3 < 8)
    return 0;
  v4 = v2 & 6;
  v5 = v2 & 0xFFFFFFFFFFFFFFF8;
  if (v4 != 2)
    v5 = 0;
  if (v5)
    v6 = (uint64_t *)(v5 + 72);
  else
    v6 = v1;
  v7 = *v6;
  v8 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 6) == 4 && v8 != 0)
    v8 = (uint64_t *)v8[1];
  v10 = *v8;
  for (i = *v8; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_23;
      v12 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v12 <= 0x39)
        break;
LABEL_18:
      if (sub_22F115668(i))
        v10 = i;
      i = sub_22F115B7C(i);
      if (!i)
        return sub_22F115668(v10);
    }
    if (v12 == 24)
      goto LABEL_24;
    if (v12 == 26)
      break;
    if (((1 << v12) & 0x20000000200003CLL) == 0)
      goto LABEL_18;
LABEL_23:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_23;
LABEL_24:
  v10 = i;
  return sub_22F115668(v10);
}

uint64_t sub_22EFEB210(uint64_t a1)
{
  return *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                             + 8) & 0xFFFFFFFFFFFFFFF0)
                                                     + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 34);
}

uint64_t sub_22EFEB240(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                            + 8) & 0xFFFFFFFFFFFFFFF0)
                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 33) >> 7;
}

uint64_t sub_22EFEB274(uint64_t a1, uint64_t a2, int a3, int a4, int a5, unsigned __int16 a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t *a12, uint64_t a13)
{
  uint64_t result;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  result = sub_22EA41AB8(a1, 59, a2, a4);
  *(_QWORD *)(result + 40) = a7;
  *(_QWORD *)(result + 48) = a8;
  *(_QWORD *)(result + 56) = a9 & 0xFFFFFFFFFFFFFFFBLL;
  *(_DWORD *)(result + 64) = a3;
  *(_DWORD *)(result + 68) = a5 & 0xFFFFF | (a6 << 20);
  *(_QWORD *)result = &off_24FAC4D70;
  *(_QWORD *)(result + 72) = 0;
  *(_WORD *)(result + 80) = 257;
  *(_DWORD *)(result + 84) = a11;
  if (a11 && a13 && (_DWORD)a11)
  {
    v21 = a11;
    v22 = (_QWORD *)(result + 96);
    do
    {
      v23 = *a10++;
      *(v22 - 1) = v23;
      v24 = *a12++;
      *v22 = v24;
      v22 += 2;
      --v21;
    }
    while (v21);
  }
  return result;
}

uint64_t sub_22EFEB338(uint64_t a1, uint64_t a2, int a3, int a4, int a5, unsigned __int16 a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  char v24;

  v17 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 2000) + 1) & 0x10) != 0)
  {
    v21 = *(_QWORD *)(a8 & 0xFFFFFFFFFFFFFFF0);
    v24 = 0;
    v22 = sub_22F110500((uint64_t)&v24, v21);
    if (v22 && *(_BYTE *)(v22 + 16) == 14)
      v18 = 8 * (*(_QWORD *)(v22 + 40) != 0);
    else
      v18 = 0;
    v17 = a1;
  }
  else
  {
    v18 = 0;
  }
  v19 = sub_22EFC7430(88, v17, a2, v18);
  result = sub_22EA41AB8(v19, 59, a2, a4);
  *(_QWORD *)(result + 40) = a7;
  *(_QWORD *)(result + 48) = a8;
  *(_QWORD *)(result + 56) = a10 & 0xFFFFFFFFFFFFFFFBLL;
  *(_DWORD *)(result + 64) = a3;
  *(_DWORD *)(result + 68) = a5 & 0xFFFFF | (a6 << 20);
  *(_QWORD *)result = &off_24FAC4D70;
  *(_QWORD *)(result + 72) = 0;
  *(_BYTE *)(result + 80) = a9;
  *(_BYTE *)(result + 81) = 0;
  *(_DWORD *)(result + 84) = 0;
  return result;
}

double sub_22EFEB444(uint64_t a1, int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  if (a3)
    v4 = 104;
  else
    v4 = 96;
  v5 = sub_22E3CD3D4(a1 + 2032, v4, 3);
  *(_DWORD *)v5 = 0;
  *(_DWORD *)(v5 + 4) = a2;
  sub_22EA41AB8(v5 + 8, 59, 0, 0);
  result = 0.0;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_QWORD *)(v5 + 8) = &off_24FAC4D70;
  *(_QWORD *)(v5 + 80) = 0;
  *(_WORD *)(v5 + 88) = 0;
  *(_DWORD *)(v5 + 92) = 0;
  return result;
}

uint64_t sub_22EFEB4B8(uint64_t a1, uint64_t a2, int a3, int a4, unsigned __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  uint64_t result;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  result = sub_22EA41AB8(a1, 32, a2, a3);
  *(_QWORD *)(result + 40) = a6;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = a7;
  *(_DWORD *)(result + 64) = a4 & 0xFFFFF | (a5 << 20);
  *(_QWORD *)result = &off_24FAC4DE8;
  *(_QWORD *)(result + 72) = 0;
  *(_WORD *)(result + 80) = 257;
  *(_DWORD *)(result + 84) = a10;
  if (a10)
  {
    v16 = (_QWORD *)(result + 88);
    v17 = 8 * a10;
    do
    {
      v18 = *a9++;
      *v16++ = v18;
      v17 -= 8;
    }
    while (v17);
  }
  return result;
}

__n128 sub_22EFEB554(uint64_t a1, __n128 *a2, uint64_t a3)
{
  uint64_t v5;
  __n128 result;
  __n128 *v7;
  uint64_t v8;

  v5 = sub_22E3CD3D4(a1 + 2032, 24 * a3 + 16, 3);
  v7 = (__n128 *)(v5 + 16);
  *(_QWORD *)v5 = v5 + 16;
  *(_DWORD *)(v5 + 8) = a3;
  if (a3)
  {
    v8 = 24 * a3;
    do
    {
      result = *a2;
      v7[1].n128_u64[0] = a2[1].n128_u64[0];
      *v7 = result;
      v7 = (__n128 *)((char *)v7 + 24);
      a2 = (__n128 *)((char *)a2 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_22EFEB5C0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  if (a6)
  {
    sub_22F0F043C(a1, a6);
    v15 = v18;
  }
  else
  {
    v15 = 0;
  }
  if (a8)
    v16 = 56;
  else
    v16 = 48;
  result = sub_22E3CD3D4(a1 + 2032, v16, 3);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = a2 & 0xFFFFFFFFFFFFFFFBLL | (4 * (a8 != 0));
  *(_QWORD *)(result + 16) = a3 & 0xFFFFFFFFFFFFFFF9 | (2 * (a4 - 1));
  *(_QWORD *)(result + 24) = a5;
  *(_QWORD *)(result + 32) = v15;
  *(_DWORD *)(result + 40) = a7;
  if (a8)
    *(_QWORD *)(result + 48) = a8;
  return result;
}

uint64_t sub_22EFEB67C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, int a6, int a7, uint64_t a8, __int128 *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  __int128 v21;

  v14 = *(_QWORD *)(a8 + 40);
  if ((v14 & 7) != 0)
    v15 = 0;
  else
    v15 = v14 & 0xFFFFFFFFFFFFFFF8;
  v16 = sub_22EFCF658(a1, a3, a4, a2, a5, a6, a7, v15, a11);
  *v16 = &off_24FAC4E60;
  v16[18] = 0;
  v16[19] = a8 & 0xFFFFFFFFFFFFFFFBLL;
  v16[20] = 0;
  v17 = sub_22E3CD3D4(a2 + 2032, 24 * a10 + 16, 3);
  v18 = v17 + 16;
  *(_QWORD *)v17 = v17 + 16;
  *(_DWORD *)(v17 + 8) = a10;
  if (a10)
  {
    v20 = 24 * a10;
    do
    {
      v21 = *a9;
      *(_QWORD *)(v18 + 16) = *((_QWORD *)a9 + 2);
      *(_OWORD *)v18 = v21;
      v18 += 24;
      a9 = (__int128 *)((char *)a9 + 24);
      v20 -= 24;
    }
    while (v20);
  }
  *(_QWORD *)(a1 + 168) = v17;
  *(_DWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 180) &= 0xF8u;
  return a1;
}

uint64_t sub_22EFEB760(uint64_t a1, char a2, uint64_t a3, int a4, int a5, uint64_t a6, __int128 *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17;
  uint64_t v18;

  v17 = sub_22EFC7430(184, a1, a3, 0);
  v18 = sub_22EFEB67C(v17, a1, 36, a2, a3, a4, a5, a6, a7, a8, a9);
  *(_DWORD *)(v18 + 72) &= ~0x100000u;
  if (!*(_QWORD *)(v18 + 48))
  {
    if (a9)
      *(_QWORD *)(v17 + 48) = *(_QWORD *)(a9 + 48);
    else
      sub_22EF6462C(a1, v17);
  }
  return v17;
}

uint64_t sub_22EFEB834(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_22E3CD3D4(a1 + 2032, 192, 3);
  *(_DWORD *)v4 = 0;
  *(_DWORD *)(v4 + 4) = a2;
  result = sub_22EFC31D8(v4 + 8, 36, 0, a1, 0, 0, 0, 0, 0);
  v6 = *(_QWORD *)(v4 + 80);
  *(_QWORD *)(v4 + 80) = v6 & 0x7FFFFF;
  *(_QWORD *)(v4 + 136) = 0;
  *(_QWORD *)(v4 + 144) = 0;
  *(_QWORD *)(v4 + 8) = &off_24FAC4E60;
  *(_DWORD *)(v4 + 184) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  *(_QWORD *)(v4 + 168) = 0;
  *(_QWORD *)(v4 + 152) = 0;
  *(_BYTE *)(v4 + 188) &= 0xF8u;
  *(_DWORD *)(v4 + 80) = v6 & 0x6FFFFF;
  return result;
}

void sub_22EFEB8E4(uint64_t a1, llvm::raw_ostream *a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  if (a4)
  {
    sub_22EFBA008((_QWORD *)a1, a2, (uint64_t)a3);
    if (!a1)
      goto LABEL_11;
  }
  else
  {
    (*(void (**)(uint64_t, llvm::raw_ostream *))(*(_QWORD *)a1 + 88))(a1, a2);
    if (!a1)
      goto LABEL_11;
  }
  if ((*(_DWORD *)(a1 + 28) & 0x7F) == 0x25)
  {
    v7 = *(_QWORD *)(a1 + 192);
    if (v7)
    {
      v8 = v7 + 16;
      v9 = *(unsigned int *)(v7 + 8);
      v10 = *(_QWORD *)(a1 + 152);
      v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
      if ((v10 & 4) != 0 && v11)
      {
        do
        {
          v12 = *(_QWORD *)(*v11 + 152);
          v11 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFF8);
        }
        while ((v12 & 4) != 0 && v11);
      }
      sub_22F1175C0(a2, v8, v9, a3, v11[7]);
      return;
    }
  }
LABEL_11:
  v13 = *(_QWORD *)(a1 + 168);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned int *)(v13 + 8);
  v16 = *(_QWORD *)(a1 + 152);
  v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 4) != 0 && v17)
  {
    do
    {
      v18 = *(_QWORD *)(*v17 + 152);
      v17 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFF8);
    }
    while ((v18 & 4) != 0 && v17);
  }
  sub_22F117B8C(a2, v14, v15, (uint64_t)a3, v17[7], 0, 0);
}

unint64_t sub_22EFEB9E4(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  unint64_t v3;
  uint64_t *v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12[2];

  v1 = *(_QWORD *)(a1 + 160);
  if (!v1)
  {
    v5 = *(_BYTE *)(a1 + 180);
    v6 = *(_QWORD *)(a1 + 152);
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 5) == 0)
      goto LABEL_14;
    v8 = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((v6 & 4) != 0)
    {
      v8 = v6 & 0xFFFFFFFFFFFFFFF8;
      if (v7)
        v8 = *(_QWORD *)v7 | 4;
    }
    if (v8 > 7)
    {
      v7 = v8 & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
LABEL_14:
      if ((v6 & 4) != 0 && v7)
      {
        do
        {
          v9 = *(_QWORD *)(*(_QWORD *)v7 + 152);
          v7 = v9 & 0xFFFFFFFFFFFFFFF8;
        }
        while ((v9 & 4) != 0 && v7);
      }
    }
    goto LABEL_20;
  }
  if (!*(_DWORD *)(v1 + 12))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 200) & 0xFFFFFFFFFFFFFFF8;
LABEL_20:
    v10 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 16))(v7);
    v2 = v10;
    v3 = HIDWORD(v10);
    return v2 | (v3 << 32);
  }
  if (*(_DWORD *)(v1 + 8))
    v2 = *(_DWORD *)(v1 + 8);
  else
    v2 = *(_DWORD *)(v1 + 12);
  v3 = *(unsigned int *)(a1 + 116);
  if (!(_DWORD)v3)
  {
    v4 = *(uint64_t **)v1;
    v12[0] = *v4;
    v12[1] = (uint64_t)(v4 + 1);
    v3 = sub_22F1167E8(v12);
  }
  return v2 | (v3 << 32);
}

double sub_22EFEBAE0(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  v4 = sub_22E3CD3D4(a1 + 2032, 216, 3);
  *(_DWORD *)v4 = 0;
  *(_DWORD *)(v4 + 4) = a2;
  sub_22EFC31D8(v4 + 8, 37, 0, a1, 0, 0, 0, 0, 0);
  v5 = *(_QWORD *)(v4 + 80);
  *(_QWORD *)(v4 + 80) = v5 & 0x7FFFFF;
  *(_DWORD *)(v4 + 184) = 0;
  result = 0.0;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_QWORD *)(v4 + 168) = 0;
  *(_BYTE *)(v4 + 188) &= 0xF8u;
  *(_QWORD *)(v4 + 8) = &off_24FAC4EE0;
  *(_QWORD *)(v4 + 200) = 0;
  *(_QWORD *)(v4 + 208) = 0;
  *(_QWORD *)(v4 + 192) = 0;
  *(_DWORD *)(v4 + 80) = v5 & 0x6FFFFF;
  return result;
}

uint64_t sub_22EFEBB9C(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_22E3CD3D4(a1 + 2032, 96, 3);
  *(_DWORD *)v4 = 0;
  *(_DWORD *)(v4 + 4) = a2;
  result = sub_22EA41AB8(v4 + 8, 30, 0, 0);
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = a1 | 2;
  *(_QWORD *)(v4 + 80) = result;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 8) = &off_24FAC52A8;
  return result;
}

_QWORD *sub_22EFEBC0C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_22E3CD3D4(a2 + 2032, 16, 3);
  *result = 0;
  result[1] = 0;
  return result;
}

unint64_t sub_22EFEBC30(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int i;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24[2];

  v24[0] = a2;
  v24[1] = a3;
  v6 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 72) + 64), *(_QWORD *)(a1 + 72));
  v7 = sub_22EFE9368(v6);
  v8 = *(unsigned int **)(v7 + 8);
  if (!v8)
    goto LABEL_2;
  v11 = a1;
  if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = v12 & 0xFFFFFFFFFFFFFFF8;
    if ((v12 & 4) != 0)
      v13 = *(_QWORD *)v13;
    for (i = *(_WORD *)(v13 + 8) & 0x7F; i != 83; i = *(_WORD *)(v13 + 8) & 0x7F)
    {
      v15 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v15 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_21;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_20;
        if (i == 16)
          goto LABEL_10;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_11;
        if (i == 24)
        {
LABEL_10:
          v15 = -48;
        }
        else
        {
LABEL_20:
          if (i != 70)
          {
LABEL_21:
            v17 = i - 52;
            if ((i - 33) >= 5)
              v18 = -48;
            else
              v18 = -64;
            if (v17 >= 6)
              v15 = v18;
            else
              v15 = -72;
            goto LABEL_11;
          }
          v15 = -64;
        }
      }
LABEL_11:
      v16 = *(_QWORD *)(v13 + v15 + 16);
      v13 = v16 & 0xFFFFFFFFFFFFFFF8;
      if ((v16 & 4) != 0)
        v13 = *(_QWORD *)v13;
    }
    v11 = v13 - 40;
  }
  v19 = *(_QWORD *)(v11 + 88);
  *(_QWORD *)(v7 + 8) = 0;
  v22 = *v8;
  v20 = v8 + 1;
  v21 = v22;
  if (v22)
  {
    do
    {
      v23 = *v20++;
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v19 + 16048) + 16))(*(_QWORD *)(v19 + 16048), v23);
      --v21;
    }
    while (v21);
  }
LABEL_2:
  v9 = sub_22EFE9368(a1);
  return sub_22EFEBDD0(a1, v9 + 16, a4, v24);
}

unint64_t sub_22EFEBDD0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t NodeOrInsertPos;
  unint64_t v16;
  void *v18;
  uint64_t v19;
  _QWORD v20[17];

  v20[16] = *MEMORY[0x24BDAC8D0];
  v18 = v20;
  v19 = 0x2000000000;
  v5 = *a4;
  v4 = a4[1];
  if (!a1 || (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((v6 & 4) != 0)
      v7 = *(_QWORD *)v7;
    for (i = *(_WORD *)(v7 + 8) & 0x7F; i != 83; i = *(_WORD *)(v7 + 8) & 0x7F)
    {
      v9 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v9 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_20;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_19;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_10;
        if (i == 24)
        {
LABEL_9:
          v9 = -48;
        }
        else
        {
LABEL_19:
          if (i != 70)
          {
LABEL_20:
            v11 = i - 52;
            if ((i - 33) >= 5)
              v12 = -48;
            else
              v12 = -64;
            if (v11 >= 6)
              v9 = v12;
            else
              v9 = -72;
            goto LABEL_10;
          }
          v9 = -64;
        }
      }
LABEL_10:
      v10 = *(_QWORD *)(v7 + v9 + 16);
      v7 = v10 & 0xFFFFFFFFFFFFFFF8;
      if ((v10 & 4) != 0)
        v7 = *(_QWORD *)v7;
    }
    a1 = v7 - 40;
  }
  v13 = *(_QWORD *)(a1 + 88);
  v20[0] = a4[1];
  LODWORD(v19) = 2;
  if (v4)
  {
    v14 = 24 * v4;
    do
    {
      sub_22F0EED38(v5, (uint64_t)&v18, v13);
      v5 += 24;
      v14 -= 24;
    }
    while (v14);
  }
  NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos();
  if (NodeOrInsertPos)
    v16 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(NodeOrInsertPos - 24) + 72), *(_QWORD *)(NodeOrInsertPos - 24));
  else
    v16 = 0;
  if (v18 != v20)
    free(v18);
  return v16;
}

uint64_t sub_22EFEBFD4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v6 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 72) + 64), *(_QWORD *)(a1 + 72));
  v7 = sub_22EFE9368(v6);
  v8 = *(unsigned int **)(v7 + 8);
  if (v8)
  {
    v11 = v7;
    v12 = sub_22EFC72E8(a1);
    *(_QWORD *)(v11 + 8) = 0;
    v15 = *v8;
    v14 = v8 + 1;
    v13 = v15;
    if (v15)
    {
      v16 = v12;
      do
      {
        v17 = *v14++;
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v16 + 16048) + 16))(*(_QWORD *)(v16 + 16048), v17);
        --v13;
      }
      while (v13);
    }
  }
  v9 = sub_22EFE9368(a1) + 16;
  return sub_22EFEC074(a1, v9, a2, a3);
}

uint64_t sub_22EFEC074(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
    sub_22EFECC98(a2, a3);
  else
    sub_22F2C29E8(a2, a3);
  result = sub_22EFC8974(a1);
  if (result)
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)result + 48))(result, a1, a3);
  return result;
}

uint64_t sub_22EFEC0D8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int i;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int j;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;

  v6 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 72) + 64), *(_QWORD *)(a1 + 72));
  v7 = sub_22EFE9368(v6);
  v8 = *(unsigned int **)(v7 + 8);
  if (a3)
  {
    if (!v8)
    {
LABEL_3:
      v9 = sub_22EFE9368(a1);
      sub_22EFEC3EC(v9 + 112, a2);
      goto LABEL_4;
    }
    v12 = a1;
    if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
    {
      v13 = *(_QWORD *)(a1 + 16);
      v14 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        v14 = *(_QWORD *)v14;
      for (i = *(_WORD *)(v14 + 8) & 0x7F; i != 83; i = *(_WORD *)(v14 + 8) & 0x7F)
      {
        v16 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v16 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_23;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_22;
          if (i == 16)
            goto LABEL_16;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_29;
          if (i == 24)
          {
LABEL_16:
            v16 = -48;
          }
          else
          {
LABEL_22:
            if (i != 70)
            {
LABEL_23:
              v17 = i - 52;
              if ((i - 33) >= 5)
                v18 = -48;
              else
                v18 = -64;
              if (v17 >= 6)
                v16 = v18;
              else
                v16 = -72;
              goto LABEL_29;
            }
            v16 = -64;
          }
        }
LABEL_29:
        v19 = *(_QWORD *)(v14 + v16 + 16);
        v14 = v19 & 0xFFFFFFFFFFFFFFF8;
        if ((v19 & 4) != 0)
          v14 = *(_QWORD *)v14;
      }
      v12 = v14 - 40;
    }
    v20 = *(_QWORD *)(v12 + 88);
    *(_QWORD *)(v7 + 8) = 0;
    v23 = *v8;
    v21 = v8 + 1;
    v22 = v23;
    if (v23)
    {
      do
      {
        v24 = *v21++;
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v20 + 16048) + 16))(*(_QWORD *)(v20 + 16048), v24);
        --v22;
      }
      while (v22);
    }
    goto LABEL_3;
  }
  if (v8)
  {
    v25 = a1;
    if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
    {
      v26 = *(_QWORD *)(a1 + 16);
      v27 = v26 & 0xFFFFFFFFFFFFFFF8;
      if ((v26 & 4) != 0)
        v27 = *(_QWORD *)v27;
      for (j = *(_WORD *)(v27 + 8) & 0x7F; j != 83; j = *(_WORD *)(v27 + 8) & 0x7F)
      {
        v29 = -40;
        if (j > 70)
        {
          if (j == 71)
          {
            v29 = -56;
          }
          else if (j != 81)
          {
            goto LABEL_53;
          }
        }
        else
        {
          if (j > 0x18)
            goto LABEL_52;
          if (j == 16)
            goto LABEL_46;
          if (((1 << j) & 0x1066) != 0)
            goto LABEL_59;
          if (j == 24)
          {
LABEL_46:
            v29 = -48;
          }
          else
          {
LABEL_52:
            if (j != 70)
            {
LABEL_53:
              v30 = j - 52;
              if ((j - 33) >= 5)
                v31 = -48;
              else
                v31 = -64;
              if (v30 >= 6)
                v29 = v31;
              else
                v29 = -72;
              goto LABEL_59;
            }
            v29 = -64;
          }
        }
LABEL_59:
        v32 = *(_QWORD *)(v27 + v29 + 16);
        v27 = v32 & 0xFFFFFFFFFFFFFFF8;
        if ((v32 & 4) != 0)
          v27 = *(_QWORD *)v27;
      }
      v25 = v27 - 40;
    }
    v33 = *(_QWORD *)(v25 + 88);
    *(_QWORD *)(v7 + 8) = 0;
    v36 = *v8;
    v34 = v8 + 1;
    v35 = v36;
    if (v36)
    {
      do
      {
        v37 = *v34++;
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v33 + 16048) + 16))(*(_QWORD *)(v33 + 16048), v37);
        --v35;
      }
      while (v35);
    }
  }
  v11 = sub_22EFE9368(a1);
  sub_22F2C2950(v11 + 112, a2);
LABEL_4:
  result = sub_22EFC8974(a1);
  if (result)
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)result + 48))(result, a1, a2);
  return result;
}

uint64_t sub_22EFEC3EC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;

  result = llvm::FoldingSetBase::InsertNode();
  v5 = *(_DWORD *)(a1 + 24);
  if (v5 >= *(_DWORD *)(a1 + 28))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 24);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v5) = a2;
  ++*(_DWORD *)(a1 + 24);
  return result;
}

unint64_t sub_22EFEC460(unint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v4 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 72) + 64), *(_QWORD *)(a1 + 72));
  v5 = sub_22EFE9368(v4);
  v6 = *(unsigned int **)(v5 + 8);
  if (v6)
  {
    v10 = v5;
    v11 = sub_22EFC72E8(a1);
    *(_QWORD *)(v10 + 8) = 0;
    v14 = *v6;
    v13 = v6 + 1;
    v12 = v14;
    if (v14)
    {
      v15 = v11;
      do
      {
        v16 = *v13++;
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v15 + 16048) + 16))(*(_QWORD *)(v15 + 16048), v16);
        --v12;
      }
      while (v12);
    }
  }
  result = sub_22EFE9368(a1);
  v8 = result;
  *(_DWORD *)(a2 + 8) = 0;
  if (*(_DWORD *)(a2 + 12) < *(_DWORD *)(result + 124))
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
  v9 = *(unsigned int *)(v8 + 136);
  if ((_DWORD)v9)
  {
    v17 = *(_QWORD *)(v8 + 128);
    v18 = 8 * v9;
    do
    {
      result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)v17 + 80) + 72), *(_QWORD *)(*(_QWORD *)v17 + 80));
      v19 = result;
      v20 = *(unsigned int *)(a2 + 8);
      if (v20 >= *(unsigned int *)(a2 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v20 = *(unsigned int *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v20) = v19;
      ++*(_DWORD *)(a2 + 8);
      v17 += 8;
      v18 -= 8;
    }
    while (v18);
  }
  return result;
}

uint64_t sub_22EFEC588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, __int128 *a11, uint64_t a12)
{
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  __int128 v24;

  v17 = *(_QWORD *)(a7 + 40);
  if ((v17 & 7) != 0)
    v18 = 0;
  else
    v18 = v17 & 0xFFFFFFFFFFFFFFF8;
  v19 = sub_22EA41AB8(a1, a2, a4, a6);
  *(_QWORD *)(v19 + 40) = v18;
  *(_QWORD *)(v19 + 48) = a8;
  *(_QWORD *)(v19 + 56) = a9 & 0xFFFFFFFFFFFFFFFBLL;
  *(_DWORD *)(v19 + 64) = a5;
  *(_QWORD *)(v19 + 72) = a3 | 2;
  *(_QWORD *)(v19 + 80) = v19;
  *(_QWORD *)(v19 + 88) = 0;
  *(_DWORD *)(v19 + 96) = 0;
  *(_BYTE *)(v19 + 96) = a10 & 7;
  *(_QWORD *)v19 = &off_24FAC4F60;
  *(_QWORD *)(v19 + 104) = 0;
  *(_QWORD *)(v19 + 112) = a7 & 0xFFFFFFFFFFFFFFFBLL;
  *(_QWORD *)(a1 + 120) = 0;
  v20 = sub_22E3CD3D4(a3 + 2032, 24 * a12 + 16, 3);
  v21 = v20 + 16;
  *(_QWORD *)v20 = v20 + 16;
  *(_DWORD *)(v20 + 8) = a12;
  if (a12)
  {
    v23 = 24 * a12;
    do
    {
      v24 = *a11;
      *(_QWORD *)(v21 + 16) = *((_QWORD *)a11 + 2);
      *(_OWORD *)v21 = v24;
      v21 += 24;
      a11 = (__int128 *)((char *)a11 + 24);
      v23 -= 24;
    }
    while (v23);
  }
  *(_QWORD *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 136) = a1 + 152;
  *(_QWORD *)(a1 + 144) = 0x800000000;
  *(_QWORD *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 420) &= 0xF0u;
  return a1;
}

void sub_22EFEC6BC(uint64_t a1, llvm::raw_ostream *a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  if (a4)
  {
    sub_22EFBA008((_QWORD *)a1, a2, (uint64_t)a3);
    if (!a1)
      goto LABEL_9;
  }
  else
  {
    (*(void (**)(uint64_t, llvm::raw_ostream *))(*(_QWORD *)a1 + 88))(a1, a2);
    if (!a1)
      goto LABEL_9;
  }
  if ((*(_DWORD *)(a1 + 28) & 0x7F) == 0x42)
  {
    v7 = *(_QWORD *)(a1 + 432);
    if (v7)
    {
      v8 = v7 + 16;
      v9 = *(unsigned int *)(v7 + 8);
      v10 = *(_QWORD *)(a1 + 112);
      v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
      if ((v10 & 4) != 0 && v11)
      {
        do
        {
          v18 = *(_QWORD *)(*v11 + 112);
          v11 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFF8);
        }
        while ((v18 & 4) != 0 && v11);
      }
      sub_22F1175C0(a2, v8, v9, a3, v11[7]);
      return;
    }
  }
LABEL_9:
  v12 = *(_QWORD *)(a1 + 128);
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned int *)(v12 + 8);
  v15 = *(_QWORD *)(a1 + 112);
  v16 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFF8);
  if ((v15 & 4) != 0 && v16)
  {
    do
    {
      v17 = *(_QWORD *)(*v16 + 112);
      v16 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
    }
    while ((v17 & 4) != 0 && v16);
  }
  sub_22F117B8C(a2, v13, v14, (uint64_t)a3, v16[7], 0, 0);
}

__n128 sub_22EFEC7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __n128 result;
  __int128 v10;

  *(_DWORD *)(a1 + 408) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 412) = *(_DWORD *)(a2 + 276);
  v2 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v2)
  {
    v4 = a1 + 136;
    v5 = *(_QWORD *)a2;
    v6 = 32 * v2;
    do
    {
      v7 = sub_22E78DF7C(v4, v5, 1);
      v8 = (_OWORD *)(*(_QWORD *)(a1 + 136) + 32 * *(unsigned int *)(a1 + 144));
      result = *(__n128 *)v7;
      v10 = *(_OWORD *)(v7 + 16);
      *v8 = *(_OWORD *)v7;
      v8[1] = v10;
      ++*(_DWORD *)(a1 + 144);
      v5 += 32;
      v6 -= 32;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_22EFEC848(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int i;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  const void **v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v7 + 8) & 0xF) != 0)
    v7 = (unint64_t)sub_22F10D2BC(v6);
  v18 = v7 & 0xFFFFFFFFFFFFFFF0;
  LOWORD(v17) = 257;
  sub_22F119558(&v18, a2, a3, &v16, 0);
  if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    if ((v8 & 4) != 0)
      v9 = *(_QWORD *)v9;
    for (i = *(_WORD *)(v9 + 8) & 0x7F; i != 83; i = *(_WORD *)(v9 + 8) & 0x7F)
    {
      v11 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v11 = -56;
          goto LABEL_23;
        }
        if (i == 81)
          goto LABEL_23;
      }
      else
      {
        if (i <= 0x18)
        {
          if (i == 16)
            goto LABEL_10;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_23;
          if (i == 24)
          {
LABEL_10:
            v11 = -48;
            goto LABEL_23;
          }
        }
        if (i == 70)
        {
          v11 = -64;
          goto LABEL_23;
        }
      }
      v12 = i - 52;
      if ((i - 33) >= 5)
        v13 = -48;
      else
        v13 = -64;
      if (v12 >= 6)
        v11 = v13;
      else
        v11 = -72;
LABEL_23:
      v14 = *(_QWORD *)(v9 + v11 + 16);
      v9 = v14 & 0xFFFFFFFFFFFFFFF8;
      if ((v14 & 4) != 0)
        v9 = *(_QWORD *)v9;
    }
  }
  return sub_22EF53F70(a1 + 64, (llvm::raw_ostream *)a2, a3, *(_QWORD *)(a1 + 48));
}

unint64_t sub_22EFEC9DC(uint64_t a1)
{
  uint64_t v1;

  v1 = **(unsigned int **)(a1 + 56);
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48)) & 0xFFFFFFFF00000000 | v1;
}

unint64_t sub_22EFECA10(uint64_t a1)
{
  return sub_22E3CD31C((uint64_t *)(a1 + 64), a1);
}

unint64_t sub_22EFECA1C(uint64_t a1)
{
  uint64_t *v2;
  char v3;

  v3 = *(_BYTE *)(a1 + 64);
  v2 = (uint64_t *)(a1 + 64);
  if ((v3 & 3) != 0)
    return 0;
  else
    return sub_22E3CD31C(v2, a1);
}

unint64_t sub_22EFECA38(uint64_t a1)
{
  return sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 72) + 64), *(_QWORD *)(a1 + 72));
}

uint64_t sub_22EFECA44(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_22EFECA4C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_22EFECA54(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_22EFECA5C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

unint64_t sub_22EFECA64(unint64_t a1)
{
  if ((*(_BYTE *)(a1 + 29) & 0x80) != 0)
    return sub_22EFB5D7C(a1);
  return a1;
}

unint64_t sub_22EFECA74(unint64_t a1)
{
  if ((*(_BYTE *)(a1 + 29) & 0x80) != 0)
    return sub_22EFB5D7C(a1);
  return a1;
}

double sub_22EFECA84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double result;

  v3 = sub_22EA41AB8(a1, 66, 0, 0);
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 72) = a2 | 2;
  *(_QWORD *)(v3 + 80) = v3;
  *(_QWORD *)(v3 + 88) = 0;
  *(_DWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 136) = v3 + 152;
  *(_QWORD *)&result = 0x800000000;
  *(_QWORD *)(v3 + 144) = 0x800000000;
  *(_QWORD *)(v3 + 408) = 0;
  *(_BYTE *)(v3 + 420) &= 0xF0u;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)v3 = &off_24FAC4FD8;
  *(_QWORD *)(v3 + 424) = 0;
  *(_QWORD *)(v3 + 432) = 0;
  *(_QWORD *)(v3 + 440) = 0;
  return result;
}

void sub_22EFECB10(_QWORD *a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)a1[4];
  if (v2 != a1 + 6)
    free(v2);
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 2));
}

uint64_t sub_22EFECB48(uint64_t a1, uint64_t a2)
{
  uint64_t inserted;
  unsigned int v5;

  inserted = llvm::FoldingSetBase::GetOrInsertNode();
  if (inserted == a2)
  {
    v5 = *(_DWORD *)(a1 + 24);
    if (v5 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v5) = a2;
    ++*(_DWORD *)(a1 + 24);
  }
  return inserted;
}

void sub_22EFECBC8(_QWORD *a1)
{
  llvm::FoldingSetBase *v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = (llvm::FoldingSetBase *)(a1 + 14);
  v3 = (_QWORD *)a1[16];
  if (v3 != a1 + 18)
    free(v3);
  llvm::FoldingSetBase::~FoldingSetBase(v2);
  v4 = (_QWORD *)a1[4];
  if (v4 != a1 + 6)
    free(v4);
  llvm::FoldingSetBase::~FoldingSetBase((llvm::FoldingSetBase *)(a1 + 2));
}

uint64_t sub_22EFECC24(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;

  result = llvm::FoldingSetBase::InsertNode();
  v5 = *(_DWORD *)(a1 + 24);
  if (v5 >= *(_DWORD *)(a1 + 28))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 24);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v5) = a2;
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_22EFECC98(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;

  result = llvm::FoldingSetBase::InsertNode();
  v5 = *(_DWORD *)(a1 + 24);
  if (v5 >= *(_DWORD *)(a1 + 28))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 24);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v5) = a2;
  ++*(_DWORD *)(a1 + 24);
  return result;
}

__n128 sub_22EFECD0C@<Q0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned __int8 *v6;
  __n128 result;
  __int128 v8;

  v4 = *a2;
  if (!(_DWORD)v4)
    goto LABEL_13;
  if (v4 != 281)
  {
    do
      v4 = dword_24FABB2A0[4 * v4];
    while ((_DWORD)v4 != 281 && v4 != 0);
    if (v4 != 281)
      goto LABEL_13;
  }
  v6 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  if (v6)
  {
    if (*(_DWORD *)(a1 + 8))
      v6 = sub_22EFFF5EC(*((unsigned __int8 **)a2 + 1));
    *(_DWORD *)a3 = sub_22F379890(v6);
    *(_QWORD *)(a3 + 8) = v6;
  }
  else
  {
LABEL_13:
    result = *(__n128 *)a2;
    v8 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_OWORD *)(a3 + 16) = v8;
    *(_QWORD *)(a3 + 32) = *((_QWORD *)a2 + 4);
  }
  return result;
}

double sub_22EFECDAC@<D0>(uint64_t a1@<X0>, int a2@<W1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  BOOL v13;
  _BYTE *v14;
  _BYTE *v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t *v20;
  _BYTE *v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  __int128 *v25;
  __int128 *v26;
  uint64_t v27;
  __int128 *v28;
  unsigned __int8 *v29;
  char v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36;
  uint64_t v37;
  __int128 *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  int v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  _BYTE v53[55];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[56];
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  if ((int)*a3 >= 73)
  {
    sub_22F3BA628((uint64_t)&v54, *((_QWORD *)a3 + 1), a1);
    v8 = BYTE8(v56);
    if (BYTE8(v56))
      v9 = 0;
    else
      v9 = *((_QWORD *)&v54 + 1) == 0;
    v10 = !v9;
    if (a2 != 1 || !v10)
      goto LABEL_77;
    v11 = *a3;
    if ((_DWORD)v11)
    {
      if (v11 != 281)
      {
        while (1)
        {
          v11 = dword_24FABB2A0[4 * v11];
          if ((_DWORD)v11 == 281)
            break;
          if (!v11)
            goto LABEL_36;
        }
      }
      v12 = (unsigned __int8 *)*((_QWORD *)a3 + 1);
      *(_OWORD *)v57 = v54;
      *(_OWORD *)&v57[16] = v55;
      *(_OWORD *)&v57[32] = v56;
      if (v12)
      {
        v13 = v57[40] == 0;
        v14 = *(_BYTE **)v57;
        v15 = (_BYTE *)(*(_QWORD *)v57 + 40 * *(_QWORD *)&v57[8]);
        if (v57[40])
        {
          v15 = &v57[40];
          v16 = v57;
        }
        else
        {
          v16 = *(_DWORD **)v57;
        }
        if (v15 - (_BYTE *)v16 == 40)
        {
          v17 = 0;
          while (v17 != 4)
          {
            v18 = *v16;
            if ((_DWORD)v18 != 172)
            {
              if (*v16)
              {
                while (1)
                {
                  v18 = dword_24FABB2A0[4 * v18];
                  if (!(_DWORD)v18)
                    break;
                  if (v18 == 172)
                    goto LABEL_23;
                }
              }
              break;
            }
LABEL_23:
            if (v13)
              v19 = v14;
            else
              v19 = v57;
            v20 = (uint64_t *)*((_QWORD *)v19 + 1);
            if (!v20)
              break;
            if (*(unsigned __int8 *)v20 == 130)
            {
              sub_22F05FD5C(v20, v53);
              if (sub_22EFFF5EC(*(unsigned __int8 **)&v53[8]) == v12
                || (sub_22F05FD5C(v20, v53), sub_22EFFF5EC(*(unsigned __int8 **)&v53[16]) == v12))
              {
                v42 = sub_22F379890((unsigned __int8 *)v20);
                *(_BYTE *)(a4 + 40) = 1;
                *(_DWORD *)a4 = v42;
                *(_QWORD *)(a4 + 8) = v20;
                return *(double *)&v24;
              }
              break;
            }
            ++v17;
            sub_22F3BA628((uint64_t)v53, (uint64_t)v20, a1);
            *(_OWORD *)&v57[25] = *(_OWORD *)&v53[25];
            *(_OWORD *)v57 = *(_OWORD *)v53;
            *(_OWORD *)&v57[16] = *(_OWORD *)&v53[16];
            v13 = v53[40] == 0;
            v14 = *(_BYTE **)v53;
            v21 = (_BYTE *)(*(_QWORD *)v53 + 40 * *(_QWORD *)&v53[8]);
            if (v53[40])
            {
              v21 = &v57[40];
              v16 = v57;
            }
            else
            {
              v16 = *(_DWORD **)v57;
            }
            v22 = v21 - (_BYTE *)v16;
            v23 = 1;
            if (v22 != 40)
              goto LABEL_41;
          }
        }
        v23 = 1;
      }
      else
      {
        v23 = 0;
      }
    }
    else
    {
LABEL_36:
      v23 = 0;
      v12 = 0;
    }
LABEL_41:
    v25 = (__int128 *)v54;
    if (v8)
      v26 = &v54;
    else
      v26 = (__int128 *)v54;
    v27 = *(unsigned int *)v26;
    if ((_DWORD)v27)
    {
      if (v27 == 281)
      {
LABEL_48:
        v28 = &v54;
        if (!v8)
          v28 = (__int128 *)v54;
        v29 = (unsigned __int8 *)*((_QWORD *)v28 + 1);
        v30 = v23 ^ 1;
        if (!v29)
          v30 = 1;
        if ((v30 & 1) == 0)
        {
          sub_22F3BA6D0(a4, a1, v29, (uint64_t)v12);
          return *(double *)&v24;
        }
      }
      else
      {
        while (1)
        {
          v27 = dword_24FABB2A0[4 * v27];
          if (!(_DWORD)v27)
            break;
          if (v27 == 281)
            goto LABEL_48;
        }
      }
    }
    sub_22EFED478((uint64_t)v57, (unsigned int *)&v54, a1);
    if (v57[0] && *(_QWORD *)(v59 + 64) == v58)
    {
      v41 = *(_OWORD *)&v57[24];
      *(_OWORD *)a4 = *(_OWORD *)&v57[8];
      *(_OWORD *)(a4 + 16) = v41;
      v24 = *(_OWORD *)&v57[40];
      goto LABEL_78;
    }
    v31 = *(unsigned int *)v26;
    if ((_DWORD)v31)
    {
      if (v31 == 148)
      {
LABEL_59:
        v32 = &v54;
        if (!v8)
          v32 = v25;
        v33 = *((_QWORD *)v32 + 1);
        if (v33)
        {
          sub_22F3BA628((uint64_t)&v60, v33, a1);
          v43 = &v62;
          if (v62)
          {
            v44 = (char *)&v60;
          }
          else
          {
            v43 = &v60[40 * v61];
            v44 = v60;
          }
          if (v43 - v44 == 40)
          {
            sub_22EFED478((uint64_t)v57, (unsigned int *)&v60, a1);
            if (v57[0])
            {
              *(_OWORD *)&v53[7] = *(_OWORD *)&v57[8];
              *(_OWORD *)&v53[23] = *(_OWORD *)&v57[24];
              *(_OWORD *)&v53[39] = *(_OWORD *)&v57[40];
              if (*(_QWORD *)(v59 + 24) == v58)
              {
                v45 = *(_OWORD *)&v53[23];
                *(_OWORD *)a4 = *(_OWORD *)&v53[7];
                *(_OWORD *)(a4 + 16) = v45;
                v24 = *(_OWORD *)&v53[39];
                goto LABEL_78;
              }
            }
          }
        }
      }
      else
      {
        while (1)
        {
          v31 = dword_24FABB2A0[4 * v31];
          if (!(_DWORD)v31)
            break;
          if (v31 == 148)
            goto LABEL_59;
        }
      }
    }
    v34 = *(unsigned int *)v26;
    if (!(_DWORD)v34)
      goto LABEL_77;
    if (v34 == 142)
    {
LABEL_67:
      v36 = &v54;
      if (!v8)
        v36 = v25;
      v37 = *((_QWORD *)v36 + 1);
      if (v37)
      {
        sub_22F3BA628((uint64_t)&v60, v37, a1);
        v46 = &v62;
        if (v62)
        {
          v47 = (char *)&v60;
        }
        else
        {
          v46 = &v60[40 * v61];
          v47 = v60;
        }
        if (v46 - v47 == 40)
        {
          sub_22EFED628((uint64_t)v57, (unsigned int *)&v60, a1);
          if (v57[0])
            goto LABEL_101;
        }
        v34 = *(unsigned int *)v26;
        if (!*(_DWORD *)v26)
        {
LABEL_77:
          v40 = v55;
          *(_OWORD *)a4 = v54;
          *(_OWORD *)(a4 + 16) = v40;
          v24 = v56;
LABEL_78:
          *(_OWORD *)(a4 + 32) = v24;
          return *(double *)&v24;
        }
LABEL_71:
        while (v34 != 112)
        {
          v34 = dword_24FABB2A0[4 * v34];
          if (!(_DWORD)v34)
            goto LABEL_77;
        }
        v38 = &v54;
        if (!v8)
          v38 = v25;
        v39 = *((_QWORD *)v38 + 1);
        if (v39)
        {
          sub_22F3BA628((uint64_t)&v60, v39, a1);
          v48 = &v62;
          if (v62)
          {
            v49 = (char *)&v60;
          }
          else
          {
            v48 = &v60[40 * v61];
            v49 = v60;
          }
          if (v48 - v49 == 40)
          {
            sub_22EFED628((uint64_t)v57, (unsigned int *)&v60, a1);
            if (v57[0])
            {
LABEL_101:
              *(_QWORD *)&v24 = *(_QWORD *)&v57[8];
              v50 = *(_OWORD *)&v57[24];
              v51 = *(_OWORD *)&v57[40];
              *(_OWORD *)a4 = *(_OWORD *)&v57[8];
              *(_OWORD *)(a4 + 16) = v50;
              *(_OWORD *)(a4 + 32) = v51;
              return *(double *)&v24;
            }
          }
        }
        goto LABEL_77;
      }
    }
    else
    {
      v35 = *(unsigned int *)v26;
      while (1)
      {
        v35 = dword_24FABB2A0[4 * v35];
        if (!(_DWORD)v35)
          break;
        if (v35 == 142)
          goto LABEL_67;
      }
    }
    if (!*(_DWORD *)v26)
      goto LABEL_77;
    goto LABEL_71;
  }
  sub_22F3BA7E4(a4, a3, a1 + 24);
  return *(double *)&v24;
}

__n128 sub_22EFED328(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  int v4;
  __n128 result;
  __int128 v6;

  v3 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 6) == 0 && v3)
  {
    v4 = sub_22F379878(a2 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_6;
  }
  if ((a2 & 6) == 2 && v3)
  {
    v4 = sub_22F379890((unsigned __int8 *)(a2 & 0xFFFFFFFFFFFFFFF8));
LABEL_6:
    *(_DWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v3;
    return result;
  }
  result = *(__n128 *)v3;
  v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v3 + 32);
  return result;
}

BOOL sub_22EFED390(unsigned __int8 *a1, uint64_t a2)
{
  int v3;
  _BOOL8 result;
  BOOL v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v3 = *a1;
  result = 1;
  v5 = (v3 - 153) > 0x3D || ((1 << (v3 + 103)) & 0x2000000200180001) == 0;
  if (v5 && v3 != 116)
  {
    sub_22F0D4E74(a2);
    v7 = v6;
    v8 = HIDWORD(v6);
    if (v3 != 145)
    {
      if ((v3 & 0xFE) == 0x76)
      {
        sub_22F0D4E74((uint64_t)a1);
        return v12 == v7 && v11 == (_DWORD)v8 || (a1[2] & 4) != 0;
      }
      if (v3 != 188 && v3 != 140)
        return 0;
    }
    sub_22F0D4E74((uint64_t)a1);
    return v10 == v7 && v9 == (_DWORD)v8;
  }
  return result;
}

double sub_22EFED478(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  _OWORD *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _OWORD v20[2];
  __int128 v21;
  _QWORD v22[5];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 40))
    v5 = a2;
  else
    v5 = *(unsigned int **)a2;
  v6 = *v5;
  if ((_DWORD)v6)
  {
    if (v6 == 185)
    {
LABEL_8:
      v8 = *((_QWORD *)v5 + 1);
      if (v8)
      {
        sub_22F3BA628((uint64_t)v20, *((_QWORD *)v5 + 1), a3);
        v11 = *(_OWORD **)&v20[0];
        v12 = (char *)(*(_QWORD *)&v20[0] + 40 * *((_QWORD *)&v20[0] + 1));
        if (BYTE8(v21))
        {
          v12 = (char *)&v21 + 8;
          v13 = (char *)v20;
        }
        else
        {
          v13 = *(char **)&v20[0];
        }
        if (v12 - v13 == 40)
        {
          v14 = *(unsigned int *)v13;
          if ((_DWORD)v14)
          {
            if (v14 == 178)
            {
LABEL_18:
              if (BYTE8(v21))
                v11 = v20;
              v15 = *((_QWORD *)v11 + 1);
              if (v15)
              {
                sub_22F3BA628((uint64_t)v22, *((_QWORD *)v11 + 1), a3);
                v16 = &v23;
                if (v23)
                {
                  v17 = (char *)v22;
                }
                else
                {
                  v16 = (char *)(v22[0] + 40 * v22[1]);
                  v17 = (char *)v22[0];
                }
                if (v16 - v17 == 40)
                {
                  *(_BYTE *)a1 = 1;
                  v18 = v20[1];
                  *(_OWORD *)(a1 + 8) = v20[0];
                  *(_OWORD *)(a1 + 24) = v18;
                  *(_QWORD *)&v10 = v21;
                  *(_OWORD *)(a1 + 40) = v21;
                  *(_QWORD *)(a1 + 56) = v8;
                  *(_QWORD *)(a1 + 64) = v15;
                  return *(double *)&v10;
                }
              }
            }
            else
            {
              while (1)
              {
                v14 = dword_24FABB2A0[4 * v14];
                if (!(_DWORD)v14)
                  break;
                if (v14 == 178)
                  goto LABEL_18;
              }
            }
          }
        }
      }
    }
    else
    {
      while (1)
      {
        v6 = dword_24FABB2A0[4 * v6];
        if (!(_DWORD)v6)
          break;
        if (v6 == 185)
          goto LABEL_8;
      }
    }
  }
  *(_BYTE *)a1 = 0;
  v9 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = v9;
  v10 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  return *(double *)&v10;
}

double sub_22EFED628(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  _OWORD *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _OWORD v20[2];
  __int128 v21;
  _QWORD v22[5];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 40))
    v5 = a2;
  else
    v5 = *(unsigned int **)a2;
  v6 = *v5;
  if ((_DWORD)v6)
  {
    if (v6 == 120)
    {
LABEL_8:
      v8 = *((_QWORD *)v5 + 1);
      if (v8)
      {
        sub_22F3BA628((uint64_t)v20, *((_QWORD *)v5 + 1), a3);
        v11 = *(_OWORD **)&v20[0];
        v12 = (char *)(*(_QWORD *)&v20[0] + 40 * *((_QWORD *)&v20[0] + 1));
        if (BYTE8(v21))
        {
          v12 = (char *)&v21 + 8;
          v13 = (char *)v20;
        }
        else
        {
          v13 = *(char **)&v20[0];
        }
        if (v12 - v13 == 40)
        {
          v14 = *(unsigned int *)v13;
          if ((_DWORD)v14)
          {
            if (v14 == 368)
            {
LABEL_18:
              if (BYTE8(v21))
                v11 = v20;
              v15 = *((_QWORD *)v11 + 1);
              if (v15)
              {
                sub_22F3BA628((uint64_t)v22, *((_QWORD *)v11 + 1), a3);
                v16 = &v23;
                if (v23)
                {
                  v17 = (char *)v22;
                }
                else
                {
                  v16 = (char *)(v22[0] + 40 * v22[1]);
                  v17 = (char *)v22[0];
                }
                if (v16 - v17 == 40)
                {
                  *(_BYTE *)a1 = 1;
                  v18 = v20[1];
                  *(_OWORD *)(a1 + 8) = v20[0];
                  *(_OWORD *)(a1 + 24) = v18;
                  *(_QWORD *)&v10 = v21;
                  *(_OWORD *)(a1 + 40) = v21;
                  *(_QWORD *)(a1 + 56) = v8;
                  *(_QWORD *)(a1 + 64) = v15;
                  return *(double *)&v10;
                }
              }
            }
            else
            {
              while (1)
              {
                v14 = dword_24FABB2A0[4 * v14];
                if (!(_DWORD)v14)
                  break;
                if (v14 == 368)
                  goto LABEL_18;
              }
            }
          }
        }
      }
    }
    else
    {
      while (1)
      {
        v6 = dword_24FABB2A0[4 * v6];
        if (!(_DWORD)v6)
          break;
        if (v6 == 120)
          goto LABEL_8;
      }
    }
  }
  *(_BYTE *)a1 = 0;
  v9 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = v9;
  v10 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  return *(double *)&v10;
}

uint64_t sub_22EFED7D8(uint64_t a1, int a2, unsigned int *a3, unsigned int **a4)
{
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17[10];
  unsigned int v18[10];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v18[0] = 0;
    v17[0] = 1072;
    v8 = a2 - 1;
    v9 = sub_22F3BA890(a3) & (a2 - 1);
    v10 = (unsigned int *)(a1 + 48 * v9);
    v11 = *a3;
    v12 = *v10;
    if (*a3 | *v10)
    {
      v13 = 0;
      v14 = 1;
      while ((v11 != 1072 || v12 != 1072) && !sub_22F359EAC(a3, v10))
      {
        if (!(*v10 | v18[0]) || *v10 == 1072 && v18[0] == 1072 || sub_22F359EAC(v10, v18))
        {
          result = 0;
          if (v13)
            v10 = v13;
          goto LABEL_5;
        }
        v15 = !(*v10 | v17[0]) || *v10 == 1072 && v17[0] == 1072 || sub_22F359EAC(v10, v17);
        if (v15 && v13 == 0)
          v13 = v10;
        v16 = v9 + v14++;
        v9 = v16 & v8;
        v10 = (unsigned int *)(a1 + 48 * (v16 & v8));
        v11 = *a3;
        v12 = *v10;
        result = 1;
        if (!(*a3 | *v10))
          goto LABEL_5;
      }
    }
    result = 1;
LABEL_5:
    *a4 = v10;
  }
  else
  {
    result = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t sub_22EFED974(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  void **v17;
  unsigned int *v19[2];

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(_QWORD *)a1 + 16 * v2;
  if (*(_DWORD *)(a1 + 8))
  {
    if ((_DWORD)v2)
    {
      v5 = 16 * v2;
      v4 = *(_QWORD **)a1;
      while ((*v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v4 += 2;
        v5 -= 16;
        if (!v5)
          goto LABEL_7;
      }
    }
    else
    {
      v4 = *(_QWORD **)a1;
    }
  }
  else
  {
LABEL_7:
    v4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v2);
  }
  v6 = *(_QWORD *)a1 + 16 * v2;
LABEL_9:
  while (v4 != (_QWORD *)v6)
  {
    v7 = v4[1];
    if ((v7 & 6) != 6)
    {
      if ((v7 & 6) != 4 || (v7 & 0xFFFFFFFFFFFFFFF8) == 0)
        goto LABEL_20;
      goto LABEL_19;
    }
    v9 = (void **)(v7 & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if (*v9 != v9 + 2)
        free(*v9);
LABEL_19:
      MEMORY[0x2348A0E9C]();
    }
LABEL_20:
    v10 = v4 + 2;
    v4 = (_QWORD *)v3;
    if (v10 != (_QWORD *)v3)
    {
      v4 = v10;
      while ((*v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v4 += 2;
        if (v4 == (_QWORD *)v3)
        {
          v4 = (_QWORD *)v3;
          goto LABEL_9;
        }
      }
    }
  }
  v11 = sub_22F3BAA78(a1 + 24);
  v19[1] = v12;
  v13 = (unsigned int *)(*(_QWORD *)(a1 + 24) + 48 * *(unsigned int *)(a1 + 40));
  if (v13 != v11)
  {
    v14 = v11;
    while (1)
    {
      v15 = *((_QWORD *)v14 + 5);
      if ((v15 & 6) != 6)
        break;
      v17 = (void **)(v15 & 0xFFFFFFFFFFFFFFF8);
      if ((v15 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        if (*v17 != v17 + 2)
          free(*v17);
LABEL_36:
        MEMORY[0x2348A0E9C]();
      }
LABEL_37:
      v19[0] = v14 + 12;
      sub_22F3BAAC0(v19);
      v14 = v19[0];
      if (v19[0] == v13)
        goto LABEL_38;
    }
    if ((v15 & 6) != 4 || (v15 & 0xFFFFFFFFFFFFFFF8) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_38:
  sub_22F3BABA0(a1 + 24);
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(48 * *(unsigned int *)(a1 + 40)));
  llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * *(unsigned int *)(a1 + 16)));
  return a1;
}

uint64_t sub_22EFEDB84(uint64_t result, __int128 *a2)
{
  uint64_t *v2;
  _DWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v2 = (uint64_t *)result;
  if (*(_DWORD *)(result + 12))
  {
    v3 = (_DWORD *)(result + 8);
    if (!*(_DWORD *)(result + 8)
      || (v4 = *(_QWORD *)result,
          v5 = *a2,
          v6 = a2[1],
          *(_QWORD *)(v4 + 32) = *((_QWORD *)a2 + 4),
          *(_OWORD *)v4 = v5,
          *(_OWORD *)(v4 + 16) = v6,
          !*(_DWORD *)(result + 8)))
    {
      v7 = *(_QWORD *)result;
      v8 = *a2;
      v9 = a2[1];
      *(_QWORD *)(v7 + 32) = *((_QWORD *)a2 + 4);
      *(_OWORD *)v7 = v8;
      *(_OWORD *)(v7 + 16) = v9;
    }
  }
  else
  {
    v11 = *a2;
    v12 = a2[1];
    v13 = *((_QWORD *)a2 + 4);
    *(_DWORD *)(result + 8) = 0;
    v3 = (_DWORD *)(result + 8);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *v2;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    *(_QWORD *)(v10 + 32) = v13;
  }
  *v3 = 1;
  return result;
}

uint64_t sub_22EFEDC64(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v18 = *(_QWORD *)(a2 + 40);
  result = sub_22F3BAC7C(a1, v18, v18, a1, &v18, *a1);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(a2 + 48);
    if (v5 && (v6 = *(unsigned int *)(v5 + 8), (_DWORD)v6))
    {
      v7 = v5 + 16;
      while ((sub_22EFF36F8(a1, v7) & 1) != 0)
      {
        v7 += 32;
        if (!--v6)
          goto LABEL_7;
      }
      return 0;
    }
    else
    {
LABEL_7:
      v8 = *(_DWORD *)(a2 + 28) & 0x7F;
      v9 = v8 > 0x39 || ((1 << v8) & 0x3F0003E01011066) == 0;
      if (v9 && (v8 - 70 <= 0xD ? (v11 = ((1 << (v8 - 70)) & 0x2803) == 0) : (v11 = 1), v11 && v8 - 19 > 4))
        v10 = 0;
      else
        v10 = sub_22EFCAE04(a2);
      result = sub_22EFF4B10(a1, v10);
      if ((_DWORD)result)
      {
        if ((*(_BYTE *)(a2 + 29) & 1) == 0)
          return 1;
        sub_22EFC8E88(a2);
        v13 = *v12;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v15 = *(_QWORD *)v14 + 8 * *(unsigned int *)(v14 + 8);
        }
        else
        {
          v15 = 0;
        }
        if (v13 == v15)
        {
          return 1;
        }
        else
        {
          v16 = v13 + 8;
          do
          {
            v18 = *(_QWORD *)(v16 - 8);
            result = sub_22F3C0544((uint64_t)a1, v18, v18, (uint64_t)a1, &v18, *a1);
            if ((_DWORD)result)
              v17 = v16 == v15;
            else
              v17 = 1;
            v16 += 8;
          }
          while (!v17);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22EFEDDE0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 48);
  v5 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0 && v5)
  {
    v7 = *v5;
    v6 = (uint64_t)(v5 + 1);
    *(_QWORD *)&v26 = v7;
    *((_QWORD *)&v26 + 1) = v6;
    LODWORD(v27) = sub_22F37A024(&v26);
    v28 = v26;
    if ((sub_22F3BEEB4((uint64_t)a1, v7, v6, (uint64_t)&v27, a1, (uint64_t)&v26, *a1 + 24) & 1) == 0)
      return 0;
  }
  else
  {
    if ((v4 & 4) != 0)
      v9 = 0;
    else
      v9 = v4 & 0xFFFFFFFFFFFFFFF8;
    v27 = v9;
    result = sub_22F3BAC7C(a1, v9, v9, a1, &v27, *a1);
    if (!(_DWORD)result)
      return result;
  }
  v10 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v10)
  {
    v11 = 0;
    while (1)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v11);
      v13 = *(_DWORD *)(v12 + 12) & 0x1FFFFFFF;
      if ((_DWORD)v13)
        break;
LABEL_15:
      if (++v11 == v10)
        goto LABEL_16;
    }
    v14 = (uint64_t *)(v12 + 16);
    v15 = 8 * v13;
    while (1)
    {
      v27 = *v14;
      if ((sub_22F3BAC7C(a1, v27, v27, a1, &v27, *a1) & 1) == 0)
        return 0;
      ++v14;
      v15 -= 8;
      if (!v15)
        goto LABEL_15;
    }
  }
LABEL_16:
  v16 = *(_DWORD *)(a2 + 28) & 0x7F;
  v17 = v16 > 0x39 || ((1 << v16) & 0x3F0003E01011066) == 0;
  if (v17 && (v16 - 70 <= 0xD ? (v19 = ((1 << (v16 - 70)) & 0x2803) == 0) : (v19 = 1), v19 && v16 - 19 > 4))
    v18 = 0;
  else
    v18 = sub_22EFCAE04(a2);
  result = sub_22EFF4B10(a1, v18);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 29) & 1) == 0)
      return 1;
    sub_22EFC8E88(a2);
    v21 = *v20;
    if ((*(_BYTE *)(a2 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a2);
      v23 = *(_QWORD *)v22 + 8 * *(unsigned int *)(v22 + 8);
    }
    else
    {
      v23 = 0;
    }
    if (v21 == v23)
    {
      return 1;
    }
    else
    {
      v24 = v21 + 8;
      do
      {
        v27 = *(_QWORD *)(v24 - 8);
        result = sub_22F3C0544((uint64_t)a1, v27, v27, (uint64_t)a1, &v27, *a1);
        if ((_DWORD)result)
          v25 = v24 == v23;
        else
          v25 = 1;
        v24 += 8;
      }
      while (!v25);
    }
  }
  return result;
}

uint64_t sub_22EFEE020(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = *(_QWORD *)(a2 + 112);
  if (v5 && (v6 = *(unsigned int *)(v5 + 8), (_DWORD)v6))
  {
    v2 = v5 + 16;
    v7 = 8 * v6;
    while ((sub_22F3BC9E4(a1, *(_QWORD *)v2) & 1) != 0)
    {
      v2 += 8;
      v7 -= 8;
      if (!v7)
        goto LABEL_6;
    }
    return 0;
  }
  else
  {
LABEL_6:
    v8 = *(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8;
    v9 = *(unsigned int *)(v8 + 24);
    if ((_DWORD)v9)
    {
      v10 = *(uint64_t **)(v8 + 16);
      v11 = *(_DWORD **)(v8 + 32);
      v12 = 8 * v9 - 8;
      do
      {
        v13 = v12;
        v15 = *v10++;
        v14 = v15;
        LODWORD(v15) = *v11++;
        v2 = v2 & 0xFFFFFFFF00000000 | v15;
        sub_22F3C02D0((uint64_t)a1, v14, v2);
        v12 = v13 - 8;
      }
      while (v13);
    }
    result = sub_22EFF4B10(a1, a2 + 48);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v18 = *v17;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v20 = *(_QWORD *)v19 + 8 * *(unsigned int *)(v19 + 8);
      }
      else
      {
        v20 = 0;
      }
      if (v18 == v20)
      {
        return 1;
      }
      else
      {
        v21 = v18 + 8;
        do
        {
          v23 = *(_QWORD *)(v21 - 8);
          result = sub_22F3C0544((uint64_t)a1, v23, v23, (uint64_t)a1, &v23, *a1);
          if ((_DWORD)result)
            v22 = v21 == v20;
          else
            v22 = 1;
          v21 += 8;
        }
        while (!v22);
      }
    }
  }
  return result;
}

uint64_t sub_22EFEE168(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 112);
  if (v4 && (v5 = *(unsigned int *)(v4 + 8), (_DWORD)v5))
  {
    v6 = (uint64_t *)(v4 + 16);
    v7 = 8 * v5;
    while ((sub_22F3BC9E4(a1, *v6) & 1) != 0)
    {
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_6;
    }
    return 0;
  }
  else
  {
LABEL_6:
    v8 = (_QWORD *)sub_22F259044(a2);
    if (!v8
      || (v12 = (uint64_t)(v8 + 1),
          *(_QWORD *)&v27 = *v8,
          v13 = v27,
          *((_QWORD *)&v27 + 1) = v8 + 1,
          LODWORD(v28) = sub_22F37A024(&v27),
          v29 = v27,
          result = sub_22F3BEEB4((uint64_t)a1, v13, v12, (uint64_t)&v28, a1, (uint64_t)&v27, *a1 + 24),
          (_DWORD)result))
    {
      v9 = *(_QWORD *)(a2 + 120);
      if (!v9)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
        v9 = *(_QWORD *)(a2 + 120);
      }
      if (v9 < 8)
        v10 = 0;
      else
        v10 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
      if (v10 == a2)
      {
        v14 = sub_22F2590A8(a2);
        v15 = sub_22F25910C(a2);
        v16 = sub_22F259178(a2);
        v17 = sub_22F2591DC(a2);
        if (v14 != v15)
        {
          v18 = v17;
          if (v16 != v17)
          {
            v19 = v16 + 4;
            v20 = v14 + 8;
            do
            {
              v14 = v14 & 0xFFFFFFFF00000000 | *(unsigned int *)(v19 - 4);
              sub_22F3C02D0((uint64_t)a1, *(_QWORD *)(v20 - 8), v14);
              if (v20 == v15)
                break;
              v20 += 8;
              v26 = v19 == v18;
              v19 += 4;
            }
            while (!v26);
          }
        }
      }
      result = sub_22EFF4B10(a1, a2 + 48);
      if ((_DWORD)result)
      {
        if ((*(_BYTE *)(a2 + 29) & 1) == 0)
          return 1;
        sub_22EFC8E88(a2);
        v22 = *v21;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v24 = *(_QWORD *)v23 + 8 * *(unsigned int *)(v23 + 8);
        }
        else
        {
          v24 = 0;
        }
        if (v22 == v24)
        {
          return 1;
        }
        else
        {
          v25 = v22 + 8;
          do
          {
            v28 = *(_QWORD *)(v25 - 8);
            result = sub_22F3C0544((uint64_t)a1, v28, v28, (uint64_t)a1, &v28, *a1);
            if ((_DWORD)result)
              v26 = v25 == v24;
            else
              v26 = 1;
            v25 += 8;
          }
          while (!v26);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22EFEE3B0(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a2 + 104);
  if (!v4)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
    v4 = *(_QWORD *)(a2 + 104);
  }
  if (v4 < 8)
    v5 = 0;
  else
    v5 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if (v5 == a2)
  {
    v7 = sub_22F259248(a2);
    v9 = v8;
    v10 = sub_22F2592CC(a2);
    if (v7 != v9)
    {
      v12 = v11;
      if (v10 != v11)
      {
        v13 = v10 + 4;
        v14 = v7 + 8;
        do
        {
          v7 = v7 & 0xFFFFFFFF00000000 | *(unsigned int *)(v13 - 4);
          sub_22F3C02D0((uint64_t)a1, *(_QWORD *)(v14 - 8), v7);
          if (v14 == v9)
            break;
          v14 += 8;
          v20 = v13 == v12;
          v13 += 4;
        }
        while (!v20);
      }
    }
  }
  result = sub_22EFF4B10(a1, a2 + 48);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 29) & 1) == 0)
      return 1;
    sub_22EFC8E88(a2);
    v16 = *v15;
    if ((*(_BYTE *)(a2 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a2);
      v18 = *(_QWORD *)v17 + 8 * *(unsigned int *)(v17 + 8);
    }
    else
    {
      v18 = 0;
    }
    if (v16 == v18)
    {
      return 1;
    }
    else
    {
      v19 = v16 + 8;
      do
      {
        v21 = *(_QWORD *)(v19 - 8);
        result = sub_22F3C0544((uint64_t)a1, v21, v21, (uint64_t)a1, &v21, *a1);
        if ((_DWORD)result)
          v20 = v19 == v18;
        else
          v20 = 1;
        v19 += 8;
      }
      while (!v20);
    }
  }
  return result;
}

uint64_t sub_22EFEE524(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a2 + 184);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 12) & 0x1FFFFFFF;
    if ((_DWORD)v5)
    {
      v6 = (uint64_t *)(v4 + 16);
      v7 = 8 * v5;
      do
      {
        v18 = *v6;
        if ((sub_22F3BAC7C(a1, v18, v18, a1, &v18, *a1) & 1) == 0)
          return 0;
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
  }
  v8 = *(_QWORD *)(a2 + 192);
  v9 = *(unsigned int *)(v8 + 8);
  if ((_DWORD)v9)
  {
    v10 = v8 + 16;
    while ((sub_22EFF36F8(a1, v10) & 1) != 0)
    {
      v10 += 32;
      if (!--v9)
        goto LABEL_10;
    }
    return 0;
  }
LABEL_10:
  result = sub_22F3C0ACC(a1, a2);
  if ((_DWORD)result)
  {
    result = sub_22EFF4B10(a1, a2 + 64);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v13 = *v12;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v15 = *(_QWORD *)v14 + 8 * *(unsigned int *)(v14 + 8);
      }
      else
      {
        v15 = 0;
      }
      if (v13 == v15)
      {
        return 1;
      }
      else
      {
        v16 = v13 + 8;
        do
        {
          v18 = *(_QWORD *)(v16 - 8);
          result = sub_22F3C0544((uint64_t)a1, v18, v18, (uint64_t)a1, &v18, *a1);
          if ((_DWORD)result)
            v17 = v16 == v15;
          else
            v17 = 1;
          v16 += 8;
        }
        while (!v17);
      }
    }
  }
  return result;
}

uint64_t sub_22EFEE670(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 48);
  if (!v4 || (result = sub_22EFF335C(a1, v4 & 0xFFFFFFFFFFFFFFF0), (_DWORD)result))
  {
    result = sub_22F3BB460(a1, a2);
    if ((_DWORD)result)
    {
      v6 = *(_QWORD *)(a2 + 72);
      v7 = v6 & 6;
      if (v6 < 8 || v7 == 2)
        goto LABEL_10;
      v13 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
      if (v7 == 4 && v13 != 0)
        v13 = (uint64_t *)v13[1];
      v16 = *v13;
      v15 = (uint64_t)(v13 + 1);
      *(_QWORD *)&v23 = v16;
      *((_QWORD *)&v23 + 1) = v15;
      LODWORD(v24) = sub_22F37A024(&v23);
      v25 = v23;
      result = sub_22F3BEEB4((uint64_t)a1, v16, v15, (uint64_t)&v24, a1, (uint64_t)&v23, *a1 + 24);
      if ((_DWORD)result)
      {
LABEL_10:
        v9 = *(_DWORD *)(a2 + 28) & 0x7F;
        v10 = v9 > 0x39 || ((1 << v9) & 0x3F0003E01011066) == 0;
        if (v10 && (v9 - 70 <= 0xD ? (v12 = ((1 << (v9 - 70)) & 0x2803) == 0) : (v12 = 1), v12 && v9 - 19 > 4))
          v11 = 0;
        else
          v11 = sub_22EFCAE04(a2);
        result = sub_22EFF4B10(a1, v11);
        if ((_DWORD)result)
        {
          if ((*(_BYTE *)(a2 + 29) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v18 = *v17;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v20 = *(_QWORD *)v19 + 8 * *(unsigned int *)(v19 + 8);
          }
          else
          {
            v20 = 0;
          }
          if (v18 == v20)
          {
            return 1;
          }
          else
          {
            v21 = v18 + 8;
            do
            {
              v24 = *(_QWORD *)(v21 - 8);
              result = sub_22F3C0544((uint64_t)a1, v24, v24, (uint64_t)a1, &v24, *a1);
              if ((_DWORD)result)
                v22 = v21 == v20;
              else
                v22 = 1;
              v21 += 8;
            }
            while (!v22);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22EFEE85C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  result = sub_22F3C0BBC(a1, a2);
  if (!(_DWORD)result)
    return result;
  v5 = *(_QWORD *)(a2 + 72);
  if ((*(_BYTE *)(a2 + 68) & 1) != 0)
  {
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    v8 = *(_QWORD *)(a2 + 72) & 3;
    if ((_DWORD)v8)
      v9 = (_DWORD)v8 == 3;
    else
      v9 = 1;
    if (!v9)
      v7 = *(_QWORD *)(v7 + 8);
    if ((sub_22EFEF038((uint64_t)a1, v7, 0) & 1) == 0)
      return 0;
  }
  else if ((v5 & 3) != 0 && (v5 & 3) != 3)
  {
    result = sub_22EFEF038((uint64_t)a1, v5 & 0xFFFFFFFFFFFFFFFCLL, 0);
    if (!(_DWORD)result)
      return result;
  }
  v10 = *(_DWORD *)(a2 + 28) & 0x7F;
  v11 = v10 > 0x39 || ((1 << v10) & 0x3F0003E01011066) == 0;
  if (v11 && (v10 - 70 <= 0xD ? (v13 = ((1 << (v10 - 70)) & 0x2803) == 0) : (v13 = 1), v13 && v10 - 19 > 4))
    v12 = 0;
  else
    v12 = sub_22EFCAE04(a2);
  result = sub_22EFF4B10(a1, v12);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 29) & 1) == 0)
      return 1;
    sub_22EFC8E88(a2);
    v15 = *v14;
    if ((*(_BYTE *)(a2 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a2);
      v17 = *(_QWORD *)v16 + 8 * *(unsigned int *)(v16 + 8);
    }
    else
    {
      v17 = 0;
    }
    if (v15 == v17)
    {
      return 1;
    }
    else
    {
      v18 = v15 + 8;
      do
      {
        v20 = *(_QWORD *)(v18 - 8);
        result = sub_22F3C0544((uint64_t)a1, v20, v20, (uint64_t)a1, &v20, *a1);
        if ((_DWORD)result)
          v19 = v18 == v17;
        else
          v19 = 1;
        v18 += 8;
      }
      while (!v19);
    }
  }
  return result;
}

uint64_t sub_22EFEE9EC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  result = sub_22F3C0BBC(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 68) & 1) == 0)
      goto LABEL_9;
    v5 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
    v6 = *(_QWORD *)(a2 + 72) & 3;
    if ((_DWORD)v6)
      v7 = (_DWORD)v6 == 3;
    else
      v7 = 1;
    if (!v7)
      v5 = *(_QWORD *)(v5 + 8);
    result = sub_22EFEF038((uint64_t)a1, v5, 0);
    if ((_DWORD)result)
    {
LABEL_9:
      v8 = *(_DWORD *)(a2 + 28) & 0x7F;
      v9 = v8 > 0x39 || ((1 << v8) & 0x3F0003E01011066) == 0;
      if (v9 && (v8 - 70 <= 0xD ? (v11 = ((1 << (v8 - 70)) & 0x2803) == 0) : (v11 = 1), v11 && v8 - 19 > 4))
        v10 = 0;
      else
        v10 = sub_22EFCAE04(a2);
      result = sub_22EFF4B10(a1, v10);
      if ((_DWORD)result)
      {
        if ((*(_BYTE *)(a2 + 29) & 1) == 0)
          return 1;
        sub_22EFC8E88(a2);
        v13 = *v12;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v15 = *(_QWORD *)v14 + 8 * *(unsigned int *)(v14 + 8);
        }
        else
        {
          v15 = 0;
        }
        if (v13 == v15)
        {
          return 1;
        }
        else
        {
          v16 = v13 + 8;
          do
          {
            v18 = *(_QWORD *)(v16 - 8);
            result = sub_22F3C0544((uint64_t)a1, v18, v18, (uint64_t)a1, &v18, *a1);
            if ((_DWORD)result)
              v17 = v16 == v15;
            else
              v17 = 1;
            v16 += 8;
          }
          while (!v17);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22EFEEB4C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  result = sub_22F3C0BBC(a1, a2);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(a2 + 72);
    v6 = v5 & 3;
    if (v5 < 4 || v6 == 1)
      goto LABEL_7;
    v11 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    if (v6 == 2 && v11 != 0)
      v11 = *(_QWORD *)(v11 + 8);
    result = sub_22EFEF038((uint64_t)a1, v11, 0);
    if ((_DWORD)result)
    {
LABEL_7:
      v8 = *(_DWORD *)(a2 + 28) & 0x7F;
      v9 = v8 > 0x39 || ((1 << v8) & 0x3F0003E01011066) == 0;
      if (v9 && (v8 - 70 <= 0xD ? (v13 = ((1 << (v8 - 70)) & 0x2803) == 0) : (v13 = 1), v13 && v8 - 19 > 4))
        v10 = 0;
      else
        v10 = sub_22EFCAE04(a2);
      result = sub_22EFF4B10(a1, v10);
      if ((_DWORD)result)
      {
        if ((*(_BYTE *)(a2 + 29) & 1) == 0)
          return 1;
        sub_22EFC8E88(a2);
        v15 = *v14;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v17 = *(_QWORD *)v16 + 8 * *(unsigned int *)(v16 + 8);
        }
        else
        {
          v17 = 0;
        }
        if (v15 == v17)
        {
          return 1;
        }
        else
        {
          v18 = v15 + 8;
          do
          {
            v20 = *(_QWORD *)(v18 - 8);
            result = sub_22F3C0544((uint64_t)a1, v20, v20, (uint64_t)a1, &v20, *a1);
            if ((_DWORD)result)
              v19 = v18 == v17;
            else
              v19 = 1;
            v18 += 8;
          }
          while (!v19);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22EFEECB4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a2 + 424);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 12) & 0x1FFFFFFF;
    if ((_DWORD)v5)
    {
      v6 = (uint64_t *)(v4 + 16);
      v7 = 8 * v5;
      do
      {
        v22 = *v6;
        if ((sub_22F3BAC7C(a1, v22, v22, a1, &v22, *a1) & 1) == 0)
          return 0;
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
  }
  v8 = *(_QWORD *)(a2 + 432);
  v9 = *(unsigned int *)(v8 + 8);
  if ((_DWORD)v9)
  {
    v10 = v8 + 16;
    while ((sub_22EFF36F8(a1, v10) & 1) != 0)
    {
      v10 += 32;
      if (!--v9)
        goto LABEL_10;
    }
    return 0;
  }
LABEL_10:
  result = sub_22F3C0DE8(a1, a2);
  if ((_DWORD)result)
  {
    v12 = *(_DWORD *)(a2 + 28) & 0x7F;
    v13 = v12 > 0x39 || ((1 << v12) & 0x3F0003E01011066) == 0;
    if (v13 && (v12 - 70 <= 0xD ? (v15 = ((1 << (v12 - 70)) & 0x2803) == 0) : (v15 = 1), v15 && v12 - 19 > 4))
      v14 = 0;
    else
      v14 = sub_22EFCAE04(a2);
    result = sub_22EFF4B10(a1, v14);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v17 = *v16;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v19 = *(_QWORD *)v18 + 8 * *(unsigned int *)(v18 + 8);
      }
      else
      {
        v19 = 0;
      }
      if (v17 == v19)
      {
        return 1;
      }
      else
      {
        v20 = v17 + 8;
        do
        {
          v22 = *(_QWORD *)(v20 - 8);
          result = sub_22F3C0544((uint64_t)a1, v22, v22, (uint64_t)a1, &v22, *a1);
          if ((_DWORD)result)
            v21 = v20 == v19;
          else
            v21 = 1;
          v20 += 8;
        }
        while (!v21);
      }
    }
  }
  return result;
}

uint64_t sub_22EFEEE68(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a2 + 88);
  v5 = *(_BYTE **)(v4 + 19016);
  v6 = *(_BYTE **)(v4 + 19024);
  v7 = v6 - v5;
  if (v6 == v5)
  {
    v8 = 0;
    v9 = 0;
  }
  else
  {
    if (v7 < 0)
      abort();
    v8 = (char *)operator new(v6 - v5);
    memmove(v8, v5, v7);
    v9 = &v8[8 * (v7 >> 3)];
  }
  if (v9 - v8 == 8 && (*(_DWORD *)(*(_QWORD *)v8 + 28) & 0x7F) == 0x53)
  {
    operator delete(v8);
    result = sub_22EFF4B10(a1, a2 + 40);
    if (!(_DWORD)result)
      return result;
    goto LABEL_23;
  }
  if (v8 == v9)
  {
LABEL_21:
    if (v8)
      operator delete(v8);
LABEL_23:
    if ((*(_BYTE *)(a2 + 29) & 1) == 0)
      return 1;
    sub_22EFC8E88(a2);
    v15 = *v14;
    if ((*(_BYTE *)(a2 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a2);
      v17 = *(_QWORD *)v16 + 8 * *(unsigned int *)(v16 + 8);
    }
    else
    {
      v17 = 0;
    }
    if (v15 == v17)
      return 1;
    v18 = v15 + 8;
    do
    {
      v20 = *(_QWORD *)(v18 - 8);
      result = sub_22F3C0544((uint64_t)a1, v20, v20, (uint64_t)a1, &v20, *a1);
      if ((_DWORD)result)
        v19 = v18 == v17;
      else
        v19 = 1;
      v18 += 8;
    }
    while (!v19);
    return result;
  }
  v11 = (uint64_t *)v8;
  while (1)
  {
    v12 = *v11;
    if ((*(_DWORD *)(*v11 + 28) & 0x7Fu) - 1 >= 2
      && ((*(_DWORD *)(*v11 + 28) & 0x7Fu) - 35 > 2
       || (v13 = *(_QWORD *)(v12 + 128)) == 0
       || ((*(unsigned __int16 *)(v13 + 8) | (*(unsigned __int8 *)(v13 + 10) << 16)) & 0x100000) == 0))
    {
      v20 = *v11;
      if (!sub_22F3BAC7C(a1, v12, v12, a1, &v20, *a1))
        break;
    }
    if (++v11 == (uint64_t *)v9)
      goto LABEL_21;
  }
  if (v8)
    operator delete(v8);
  return 0;
}

uint64_t sub_22EFEF038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned int v5;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD v19[9];

  v19[8] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (!a3)
    {
      v19[0] = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v18 = 0x800000001;
      v9 = 1;
      while (1)
      {
        v10 = &v19[v9];
        v11 = *(v10 - 1);
        if ((v11 & 4) != 0)
        {
          LODWORD(v18) = --v9;
          --*(_DWORD *)(a1 + 16);
        }
        else
        {
          v12 = v11 & 0xFFFFFFFFFFFFFFF8;
          sub_22F3BDAE0(a1, (unsigned __int8 *)(v11 & 0xFFFFFFFFFFFFFFF8));
          *(v10 - 1) |= 4uLL;
          v13 = v18;
          if (!sub_22F3BDB90((uint64_t *)a1, v12))
            return 0;
          v9 = v18;
          if ((_DWORD)v13 != (_DWORD)v18)
          {
            v14 = &v19[v18 - 1];
            if (&v19[v13] < v14)
            {
              v15 = &v19[v13 + 1];
              do
              {
                v16 = *(v15 - 1);
                *(v15 - 1) = *v14;
                *v14-- = v16;
              }
              while (v15++ < v14);
            }
          }
        }
        if (!v9)
          return 1;
      }
    }
    v4 = a2 & 0xFFFFFFFFFFFFFFFBLL;
    v5 = *(_DWORD *)(a3 + 8);
    if (v5 >= *(_DWORD *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v5 = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = v4;
    ++*(_DWORD *)(a3 + 8);
  }
  return 1;
}

uint64_t sub_22EFEF1D8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)&v14 = *(_QWORD *)a2;
  *((_QWORD *)&v14 + 1) = v4;
  v15 = 5;
  v16 = v14;
  result = sub_22F3BE830((uint64_t)a1, v14, v4, (uint64_t)&v15, a1, (uint64_t *)&v14, *a1 + 24);
  if ((_DWORD)result)
  {
    v12 = *(_OWORD *)(a2 + 24);
    v13 = *(_QWORD *)(a2 + 40);
    result = sub_22EFF25B0(a1, (uint64_t *)&v12);
    if ((_DWORD)result)
    {
      v6 = *(_QWORD *)(a2 + 64);
      if (v6 && (v7 = *(unsigned int *)(v6 + 8), (_DWORD)v7))
      {
        v8 = v6 + 16;
        v9 = v7 - 1;
        do
        {
          result = sub_22EFF36F8(a1, v8);
          v11 = v9-- != 0;
          if (!(_DWORD)result)
            break;
          v8 += 32;
        }
        while (v11);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22EFEF2CC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _QWORD *v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  result = sub_22EFEF038(a1, *(_QWORD *)(a2 + 48));
  if ((_DWORD)result)
  {
    v5 = *(_DWORD *)(a2 + 20);
    if (v5)
    {
      v6 = 0;
      while ((sub_22EFEF038(a1, *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * (v6 + *(_DWORD *)(a2 + 16)))) & 1) != 0)
      {
        if (v5 == ++v6)
          goto LABEL_6;
      }
      return 0;
    }
LABEL_6:
    v7 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = 8 * v7;
      while ((sub_22EFEF038(a1, *(_QWORD *)(*(_QWORD *)(a2 + 56) + v8)) & 1) != 0)
      {
        v8 += 8;
        if (v9 == v8)
          goto LABEL_10;
      }
      return 0;
    }
LABEL_10:
    v10 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = 8 * v10;
      while ((sub_22EFEF038(a1, *(_QWORD *)(*(_QWORD *)(a2 + 64) + v11)) & 1) != 0)
      {
        v11 += 8;
        if (v12 == v11)
          goto LABEL_14;
      }
      return 0;
    }
LABEL_14:
    sub_22F0D492C(a2);
    v18 = v20;
    v13 = v22;
    v19 = v21;
    v14 = v23;
    while (1)
    {
      v15 = v18;
      if ((_QWORD)v18 == v13 && *((_QWORD *)&v18 + 1) == v14)
        break;
      if ((BYTE8(v18) & 3) != 0)
      {
        if ((*((_QWORD *)&v18 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v17 = (_QWORD *)((*((_QWORD *)&v18 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v17 = (_QWORD *)sub_22F3AC1A8(*(_QWORD *)v18);
        if ((sub_22EFEF038(a1, *v17) & 1) == 0)
          return 0;
        if (*((_QWORD *)&v15 + 1) < 4uLL)
          sub_22F3F2FE0((uint64_t)&v18, 1);
        else
          sub_22F0D8720((uint64_t)&v18);
      }
      else
      {
        if (!sub_22EFEF038(a1, *(_QWORD *)v18))
          return 0;
        *(_QWORD *)&v18 = v15 + 8;
      }
    }
    return 1;
  }
  return result;
}

uint64_t sub_22EFEF464(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v7;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_22F0D492C(a2);
  v9 = v11;
  v3 = v13;
  v10 = v12;
  v4 = v14;
  while (1)
  {
    while (1)
    {
      v5 = v9;
      if ((_QWORD)v9 == v3 && *((_QWORD *)&v9 + 1) == v4)
        return 1;
      if ((BYTE8(v9) & 3) != 0)
        break;
      if (!sub_22EFEF038(a1, *(_QWORD *)v9))
        return 0;
      *(_QWORD *)&v9 = v5 + 8;
    }
    v7 = (_QWORD *)((*((_QWORD *)&v9 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0
                  ? (*((_QWORD *)&v9 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40
                  : sub_22F3AC1A8(*(_QWORD *)v9));
    if ((sub_22EFEF038(a1, *v7) & 1) == 0)
      break;
    if (*((_QWORD *)&v5 + 1) < 4uLL)
      sub_22F3F2FE0((uint64_t)&v9, 1);
    else
      sub_22F0D8720((uint64_t)&v9);
  }
  return 0;
}

uint64_t sub_22EFEF54C(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;

  *(_QWORD *)&v13 = *(_QWORD *)(a2 + 16);
  result = sub_22F3BAC7C(a1, v13, v13, a1, &v13, *a1);
  if ((_DWORD)result)
  {
    sub_22F0D492C(a2);
    v11 = v13;
    v5 = v15;
    v12 = v14;
    v6 = *((_QWORD *)&v15 + 1);
    v7 = *((_QWORD *)&v13 + 1);
    v8 = (uint64_t *)v13;
    if (v13 == v15)
      return 1;
    while (1)
    {
      if ((v7 & 3) != 0)
      {
        if ((v7 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v9 = (_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v9 = (_QWORD *)sub_22F3AC1A8(*v8);
        if ((sub_22EFEF038(a1, *v9) & 1) == 0)
          return 0;
        if (v7 < 4)
          sub_22F3F2FE0((uint64_t)&v11, 1);
        else
          sub_22F0D8720((uint64_t)&v11);
      }
      else
      {
        if (!sub_22EFEF038(a1, *v8))
          return 0;
        *(_QWORD *)&v11 = v8 + 1;
      }
      v7 = *((_QWORD *)&v11 + 1);
      v8 = (uint64_t *)v11;
      if ((_QWORD)v11 == v5 && *((_QWORD *)&v11 + 1) == v6)
        return 1;
    }
  }
  return result;
}

uint64_t sub_22EFEF66C(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;

  *(_QWORD *)&v13 = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8;
  result = sub_22F3BAC7C(a1, v13, v13, a1, &v13, *a1);
  if ((_DWORD)result)
  {
    sub_22F0D492C(a2);
    v11 = v13;
    v5 = v15;
    v12 = v14;
    v6 = *((_QWORD *)&v15 + 1);
    v7 = *((_QWORD *)&v13 + 1);
    v8 = (uint64_t *)v13;
    if (v13 == v15)
      return 1;
    while (1)
    {
      if ((v7 & 3) != 0)
      {
        if ((v7 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v9 = (_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v9 = (_QWORD *)sub_22F3AC1A8(*v8);
        if ((sub_22EFEF038(a1, *v9) & 1) == 0)
          return 0;
        if (v7 < 4)
          sub_22F3F2FE0((uint64_t)&v11, 1);
        else
          sub_22F0D8720((uint64_t)&v11);
      }
      else
      {
        if (!sub_22EFEF038(a1, *v8))
          return 0;
        *(_QWORD *)&v11 = v8 + 1;
      }
      v7 = *((_QWORD *)&v11 + 1);
      v8 = (uint64_t *)v11;
      if ((_QWORD)v11 == v5 && *((_QWORD *)&v11 + 1) == v6)
        return 1;
    }
  }
  return result;
}

uint64_t sub_22EFEF790(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  BOOL v8;
  uint64_t v9;

  v3 = a2 + 8;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
  {
    v3 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v5 = v3 + 8 * *(unsigned int *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  else if (v4)
  {
    v5 = a2 + 16;
  }
  else
  {
    v3 = 0;
    v5 = 0;
  }
  if (v3 == v5)
    return 1;
  v6 = v3 + 8;
  do
  {
    v9 = *(_QWORD *)(v6 - 8);
    result = sub_22F3BAC7C(a1, v9, v9, a1, &v9, *a1);
    if ((_DWORD)result)
      v8 = v6 == v5;
    else
      v8 = 1;
    v6 += 8;
  }
  while (!v8);
  return result;
}

uint64_t sub_22EFEF82C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _BYTE v16[24];
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)&v12 = *(_QWORD *)(a2 + 16);
  *((_QWORD *)&v12 + 1) = v4;
  *(_DWORD *)v16 = 5;
  *(_OWORD *)&v16[8] = v12;
  result = sub_22F3BE830((uint64_t)a1, v12, v4, (uint64_t)v16, a1, (uint64_t *)&v12, *a1 + 24);
  if ((_DWORD)result)
  {
    v14 = *(_OWORD *)(a2 + 32);
    v15 = *(_QWORD *)(a2 + 48);
    result = sub_22EFF25B0(a1, (uint64_t *)&v14);
    if ((_DWORD)result)
    {
      sub_22F0D492C(a2);
      v12 = *(_OWORD *)v16;
      v6 = v17;
      v13 = *(_QWORD *)&v16[16];
      v7 = *((_QWORD *)&v17 + 1);
      v8 = *(_QWORD *)&v16[8];
      v9 = *(uint64_t **)v16;
      if (*(_OWORD *)v16 == v17)
        return 1;
      while (1)
      {
        if ((v8 & 3) != 0)
        {
          if ((v8 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            v10 = (_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 40);
          else
            v10 = (_QWORD *)sub_22F3AC1A8(*v9);
          if ((sub_22EFEF038(a1, *v10) & 1) == 0)
            return 0;
          if (v8 < 4)
            sub_22F3F2FE0((uint64_t)&v12, 1);
          else
            sub_22F0D8720((uint64_t)&v12);
        }
        else
        {
          if (!sub_22EFEF038(a1, *v9))
            return 0;
          *(_QWORD *)&v12 = v9 + 1;
        }
        v8 = *((_QWORD *)&v12 + 1);
        v9 = (uint64_t *)v12;
        if ((_QWORD)v12 == v6 && *((_QWORD *)&v12 + 1) == v7)
          return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22EFEF9B0(_QWORD *a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v13;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_DWORD **)(a2 + 24);
  if (v4 && (v7 = *v4, v6 = (uint64_t *)(v4 + 4), (v5 = v7) != 0))
  {
    v8 = 8 * v5;
    while ((sub_22EFF38CC(a1, *v6) & 1) != 0)
    {
      ++v6;
      v8 -= 8;
      if (!v8)
        goto LABEL_6;
    }
    return 0;
  }
  else
  {
LABEL_6:
    sub_22F0D492C(a2);
    v15 = v17;
    v9 = v19;
    v16 = v18;
    v10 = v20;
    while (1)
    {
      v11 = v15;
      if ((_QWORD)v15 == v9 && *((_QWORD *)&v15 + 1) == v10)
        break;
      if ((BYTE8(v15) & 3) != 0)
      {
        if ((*((_QWORD *)&v15 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v13 = (_QWORD *)((*((_QWORD *)&v15 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v13 = (_QWORD *)sub_22F3AC1A8(*(_QWORD *)v15);
        if ((sub_22EFEF038(a1, *v13) & 1) == 0)
          return 0;
        if (*((_QWORD *)&v11 + 1) < 4uLL)
          sub_22F3F2FE0((uint64_t)&v15, 1);
        else
          sub_22F0D8720((uint64_t)&v15);
      }
      else
      {
        if (!sub_22EFEF038(a1, *(_QWORD *)v15))
          return 0;
        *(_QWORD *)&v15 = v11 + 8;
      }
    }
    return 1;
  }
}

uint64_t sub_22EFEFACC(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _DWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v21 = *(_OWORD *)(a2 + 32);
  v22 = *(_QWORD *)(a2 + 48);
  result = sub_22EFF25B0(a1, (uint64_t *)&v21);
  if ((_DWORD)result)
  {
    v5 = *(_DWORD **)(a2 + 24);
    if (v5 && (v8 = *v5, v7 = (uint64_t *)(v5 + 4), (v6 = v8) != 0))
    {
      v9 = 8 * v6;
      while ((sub_22EFF38CC(a1, *v7) & 1) != 0)
      {
        ++v7;
        v9 -= 8;
        if (!v9)
          goto LABEL_7;
      }
      return 0;
    }
    else
    {
LABEL_7:
      sub_22F0D492C(a2);
      v15 = v17;
      v10 = v19;
      v16 = v18;
      v11 = v20;
      while (1)
      {
        v12 = v15;
        if ((_QWORD)v15 == v10 && *((_QWORD *)&v15 + 1) == v11)
          break;
        if ((BYTE8(v15) & 3) != 0)
        {
          if ((*((_QWORD *)&v15 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0)
            v14 = (_QWORD *)((*((_QWORD *)&v15 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40);
          else
            v14 = (_QWORD *)sub_22F3AC1A8(*(_QWORD *)v15);
          if ((sub_22EFEF038(a1, *v14) & 1) == 0)
            return 0;
          if (*((_QWORD *)&v12 + 1) < 4uLL)
            sub_22F3F2FE0((uint64_t)&v15, 1);
          else
            sub_22F0D8720((uint64_t)&v15);
        }
        else
        {
          if (!sub_22EFEF038(a1, *(_QWORD *)v15))
            return 0;
          *(_QWORD *)&v15 = v12 + 8;
        }
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_22EFEFC04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 16);
  if (!v4 || (result = sub_22EFEF038(a1, *(_QWORD *)(v4 + 16)), (_DWORD)result))
  {
    sub_22F0D492C(a2);
    v11 = v13;
    v6 = v15;
    v12 = v14;
    v7 = v16;
    while (1)
    {
      while (1)
      {
        v8 = v11;
        if ((_QWORD)v11 == v6 && *((_QWORD *)&v11 + 1) == v7)
          return 1;
        if ((BYTE8(v11) & 3) != 0)
          break;
        if (!sub_22EFEF038(a1, *(_QWORD *)v11))
          return 0;
        *(_QWORD *)&v11 = v8 + 8;
      }
      v10 = (_QWORD *)((*((_QWORD *)&v11 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0
                     ? (*((_QWORD *)&v11 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40
                     : sub_22F3AC1A8(*(_QWORD *)v11));
      if ((sub_22EFEF038(a1, *v10) & 1) == 0)
        break;
      if (*((_QWORD *)&v8 + 1) < 4uLL)
        sub_22F3F2FE0((uint64_t)&v11, 1);
      else
        sub_22F0D8720((uint64_t)&v11);
    }
    return 0;
  }
  return result;
}

uint64_t sub_22EFEFD0C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[24];
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 48);
  v5 = *v4++;
  *(_QWORD *)&v13 = v5;
  *((_QWORD *)&v13 + 1) = v4;
  *(_DWORD *)v15 = sub_22F37A024(&v13);
  *(_OWORD *)&v15[8] = v13;
  result = sub_22F3BEEB4((uint64_t)a1, v5, (uint64_t)v4, (uint64_t)v15, a1, (uint64_t)&v13, *a1 + 24);
  if ((_DWORD)result)
  {
    sub_22F0D492C(a2);
    v13 = *(_OWORD *)v15;
    v7 = v16;
    v14 = *(_QWORD *)&v15[16];
    v8 = *((_QWORD *)&v16 + 1);
    v9 = *(_QWORD *)&v15[8];
    v10 = *(uint64_t **)v15;
    if (*(_OWORD *)v15 == v16)
      return 1;
    while (1)
    {
      if ((v9 & 3) != 0)
      {
        if ((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v11 = (_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v11 = (_QWORD *)sub_22F3AC1A8(*v10);
        if ((sub_22EFEF038(a1, *v11) & 1) == 0)
          return 0;
        if (v9 < 4)
          sub_22F3F2FE0((uint64_t)&v13, 1);
        else
          sub_22F0D8720((uint64_t)&v13);
      }
      else
      {
        if (!sub_22EFEF038(a1, *v10))
          return 0;
        *(_QWORD *)&v13 = v10 + 1;
      }
      v9 = *((_QWORD *)&v13 + 1);
      v10 = (uint64_t *)v13;
      if ((_QWORD)v13 == v7 && *((_QWORD *)&v13 + 1) == v8)
        return 1;
    }
  }
  return result;
}

uint64_t sub_22EFEFE80(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[24];
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 40);
  v5 = *v4++;
  *(_QWORD *)&v13 = v5;
  *((_QWORD *)&v13 + 1) = v4;
  *(_DWORD *)v15 = sub_22F37A024(&v13);
  *(_OWORD *)&v15[8] = v13;
  result = sub_22F3BEEB4((uint64_t)a1, v5, (uint64_t)v4, (uint64_t)v15, a1, (uint64_t)&v13, *a1 + 24);
  if ((_DWORD)result)
  {
    sub_22F0D492C(a2);
    v13 = *(_OWORD *)v15;
    v7 = v16;
    v14 = *(_QWORD *)&v15[16];
    v8 = *((_QWORD *)&v16 + 1);
    v9 = *(_QWORD *)&v15[8];
    v10 = *(uint64_t **)v15;
    if (*(_OWORD *)v15 == v16)
      return 1;
    while (1)
    {
      if ((v9 & 3) != 0)
      {
        if ((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v11 = (_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v11 = (_QWORD *)sub_22F3AC1A8(*v10);
        if ((sub_22EFEF038(a1, *v11) & 1) == 0)
          return 0;
        if (v9 < 4)
          sub_22F3F2FE0((uint64_t)&v13, 1);
        else
          sub_22F0D8720((uint64_t)&v13);
      }
      else
      {
        if (!sub_22EFEF038(a1, *v10))
          return 0;
        *(_QWORD *)&v13 = v10 + 1;
      }
      v9 = *((_QWORD *)&v13 + 1);
      v10 = (uint64_t *)v13;
      if ((_QWORD)v13 == v7 && *((_QWORD *)&v13 + 1) == v8)
        return 1;
    }
  }
  return result;
}

uint64_t sub_22EFEFFF4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;

  v4 = sub_22EFBC5B4(*(_QWORD *)(a2 + 16));
  v5 = v4;
  if (v4 && (*(_BYTE *)v4 & 0xFE) == 0xAC)
    v5 = *(_QWORD *)(v4 + 16);
  result = sub_22EFEF038(a1, v5);
  if ((_DWORD)result)
  {
    sub_22F0D492C(a2);
    v13 = v15;
    v7 = v17;
    v14 = v16;
    v8 = *((_QWORD *)&v17 + 1);
    v9 = *((_QWORD *)&v15 + 1);
    v10 = (uint64_t *)v15;
    if (v15 == v17)
      return 1;
    while (1)
    {
      if ((v9 & 3) != 0)
      {
        if ((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v11 = (_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v11 = (_QWORD *)sub_22F3AC1A8(*v10);
        if ((sub_22EFEF038(a1, *v11) & 1) == 0)
          return 0;
        if (v9 < 4)
          sub_22F3F2FE0((uint64_t)&v13, 1);
        else
          sub_22F0D8720((uint64_t)&v13);
      }
      else
      {
        if (!sub_22EFEF038(a1, *v10))
          return 0;
        *(_QWORD *)&v13 = v10 + 1;
      }
      v9 = *((_QWORD *)&v13 + 1);
      v10 = (uint64_t *)v13;
      if ((_QWORD)v13 == v7 && *((_QWORD *)&v13 + 1) == v8)
        return 1;
    }
  }
  return result;
}

uint64_t sub_22EFF012C(_QWORD *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _BYTE v18[24];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 5);
  *(_QWORD *)&v14 = *((_QWORD *)a2 + 4);
  *((_QWORD *)&v14 + 1) = v4;
  *(_DWORD *)v18 = 5;
  *(_OWORD *)&v18[8] = v14;
  result = sub_22F3BE830((uint64_t)a1, v14, v4, (uint64_t)v18, a1, (uint64_t *)&v14, *a1 + 24);
  if ((_DWORD)result)
  {
    v16 = *((_OWORD *)a2 + 3);
    v17 = *((_QWORD *)a2 + 8);
    result = sub_22EFF25B0(a1, (uint64_t *)&v16);
    if ((_DWORD)result)
    {
      v6 = *a2;
      if ((v6 & 0x80000) != 0 && a2[18] && (v7 = a2[21], (_DWORD)v7))
      {
        v8 = (uint64_t)&a2[4 * ((v6 >> 19) & 1) + 18];
        while ((sub_22EFF36F8(a1, v8) & 1) != 0)
        {
          v8 += 32;
          if (!--v7)
            goto LABEL_9;
        }
        return 0;
      }
      else
      {
LABEL_9:
        sub_22F0D492C((uint64_t)a2);
        v14 = *(_OWORD *)v18;
        v9 = v19;
        v15 = *(_QWORD *)&v18[16];
        v10 = v20;
        while (1)
        {
          v11 = v14;
          if ((_QWORD)v14 == v9 && *((_QWORD *)&v14 + 1) == v10)
            break;
          if ((BYTE8(v14) & 3) != 0)
          {
            if ((*((_QWORD *)&v14 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0)
              v13 = (_QWORD *)((*((_QWORD *)&v14 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40);
            else
              v13 = (_QWORD *)sub_22F3AC1A8(*(_QWORD *)v14);
            if ((sub_22EFEF038(a1, *v13) & 1) == 0)
              return 0;
            if (*((_QWORD *)&v11 + 1) < 4uLL)
              sub_22F3F2FE0((uint64_t)&v14, 1);
            else
              sub_22F0D8720((uint64_t)&v14);
          }
          else
          {
            if (!sub_22EFEF038(a1, *(_QWORD *)v14))
              return 0;
            *(_QWORD *)&v14 = v11 + 8;
          }
        }
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22EFF02DC(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[24];
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 32);
  v5 = *v4++;
  *(_QWORD *)&v13 = v5;
  *((_QWORD *)&v13 + 1) = v4;
  *(_DWORD *)v15 = sub_22F37A024(&v13);
  *(_OWORD *)&v15[8] = v13;
  result = sub_22F3BEEB4((uint64_t)a1, v5, (uint64_t)v4, (uint64_t)v15, a1, (uint64_t)&v13, *a1 + 24);
  if ((_DWORD)result)
  {
    sub_22F0D492C(a2);
    v13 = *(_OWORD *)v15;
    v7 = v16;
    v14 = *(_QWORD *)&v15[16];
    v8 = *((_QWORD *)&v16 + 1);
    v9 = *(_QWORD *)&v15[8];
    v10 = *(uint64_t **)v15;
    if (*(_OWORD *)v15 == v16)
      return 1;
    while (1)
    {
      if ((v9 & 3) != 0)
      {
        if ((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v11 = (_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v11 = (_QWORD *)sub_22F3AC1A8(*v10);
        if ((sub_22EFEF038(a1, *v11) & 1) == 0)
          return 0;
        if (v9 < 4)
          sub_22F3F2FE0((uint64_t)&v13, 1);
        else
          sub_22F0D8720((uint64_t)&v13);
      }
      else
      {
        if (!sub_22EFEF038(a1, *v10))
          return 0;
        *(_QWORD *)&v13 = v10 + 1;
      }
      v9 = *((_QWORD *)&v13 + 1);
      v10 = (uint64_t *)v13;
      if ((_QWORD)v13 == v7 && *((_QWORD *)&v13 + 1) == v8)
        return 1;
    }
  }
  return result;
}

uint64_t sub_22EFF0450(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _BYTE v21[24];
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = a2[5];
  *(_QWORD *)&v19 = a2[4];
  *((_QWORD *)&v19 + 1) = v4;
  *(_DWORD *)v21 = 5;
  *(_OWORD *)&v21[8] = v19;
  result = sub_22F3BE830((uint64_t)a1, v19, v4, (uint64_t)v21, a1, (uint64_t *)&v19, *a1 + 24);
  if ((_DWORD)result)
  {
    v6 = (uint64_t *)a2[6];
    if (!v6
      || (v16 = *v6,
          v15 = (uint64_t)(v6 + 1),
          *(_QWORD *)&v19 = v16,
          *((_QWORD *)&v19 + 1) = v15,
          *(_DWORD *)v21 = sub_22F37A024(&v19),
          *(_OWORD *)&v21[8] = v19,
          result = sub_22F3BEEB4((uint64_t)a1, v16, v15, (uint64_t)v21, a1, (uint64_t)&v19, *a1 + 24),
          (_DWORD)result))
    {
      v7 = a2[8];
      if ((v7 & 1) != 0)
        goto LABEL_5;
      v8 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      if ((v7 & 0xFFFFFFFFFFFFFFFELL) == 0
        || (v18 = *v8,
            v17 = (uint64_t)(v8 + 1),
            *(_QWORD *)&v19 = v18,
            *((_QWORD *)&v19 + 1) = v17,
            *(_DWORD *)v21 = sub_22F37A024(&v19),
            *(_OWORD *)&v21[8] = v19,
            result = sub_22F3BEEB4((uint64_t)a1, v18, v17, (uint64_t)v21, a1, (uint64_t)&v19, *a1 + 24),
            (_DWORD)result))
      {
LABEL_5:
        sub_22F0D492C((uint64_t)a2);
        v19 = *(_OWORD *)v21;
        v9 = v22;
        v20 = *(_QWORD *)&v21[16];
        v10 = *((_QWORD *)&v22 + 1);
        v11 = *(_QWORD *)&v21[8];
        v12 = *(uint64_t **)v21;
        if (*(_OWORD *)v21 == v22)
          return 1;
        while (1)
        {
          if ((v11 & 3) != 0)
          {
            if ((v11 & 0xFFFFFFFFFFFFFFFCLL) != 0)
              v13 = (_QWORD *)((v11 & 0xFFFFFFFFFFFFFFFCLL) + 40);
            else
              v13 = (_QWORD *)sub_22F3AC1A8(*v12);
            if ((sub_22EFEF038(a1, *v13) & 1) == 0)
              return 0;
            if (v11 < 4)
              sub_22F3F2FE0((uint64_t)&v19, 1);
            else
              sub_22F0D8720((uint64_t)&v19);
          }
          else
          {
            if (!sub_22EFEF038(a1, *v12))
              return 0;
            *(_QWORD *)&v19 = v12 + 1;
          }
          v11 = *((_QWORD *)&v19 + 1);
          v12 = (uint64_t *)v19;
          if ((_QWORD)v19 == v9 && *((_QWORD *)&v19 + 1) == v10)
            return 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_22EFF065C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[24];
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 16);
  v5 = *v4++;
  *(_QWORD *)&v13 = v5;
  *((_QWORD *)&v13 + 1) = v4;
  *(_DWORD *)v15 = sub_22F37A024(&v13);
  *(_OWORD *)&v15[8] = v13;
  result = sub_22F3BEEB4((uint64_t)a1, v5, (uint64_t)v4, (uint64_t)v15, a1, (uint64_t)&v13, *a1 + 24);
  if ((_DWORD)result)
  {
    sub_22F0D492C(a2);
    v13 = *(_OWORD *)v15;
    v7 = v16;
    v14 = *(_QWORD *)&v15[16];
    v8 = *((_QWORD *)&v16 + 1);
    v9 = *(_QWORD *)&v15[8];
    v10 = *(uint64_t **)v15;
    if (*(_OWORD *)v15 == v16)
      return 1;
    while (1)
    {
      if ((v9 & 3) != 0)
      {
        if ((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v11 = (_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v11 = (_QWORD *)sub_22F3AC1A8(*v10);
        if ((sub_22EFEF038(a1, *v11) & 1) == 0)
          return 0;
        if (v9 < 4)
          sub_22F3F2FE0((uint64_t)&v13, 1);
        else
          sub_22F0D8720((uint64_t)&v13);
      }
      else
      {
        if (!sub_22EFEF038(a1, *v10))
          return 0;
        *(_QWORD *)&v13 = v10 + 1;
      }
      v9 = *((_QWORD *)&v13 + 1);
      v10 = (uint64_t *)v13;
      if ((_QWORD)v13 == v7 && *((_QWORD *)&v13 + 1) == v8)
        return 1;
    }
  }
  return result;
}

uint64_t sub_22EFF07D0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[24];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  if ((v4 & 4) == 0
    || (v11 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8,
        *(_QWORD *)&v13 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8),
        v12 = v13,
        *((_QWORD *)&v13 + 1) = v11,
        *(_DWORD *)v15 = sub_22F37A024(&v13),
        *(_OWORD *)&v15[8] = v13,
        result = sub_22F3BEEB4((uint64_t)a1, v12, v11, (uint64_t)v15, a1, (uint64_t)&v13, *a1 + 24),
        (_DWORD)result))
  {
    sub_22F0D492C(a2);
    v13 = *(_OWORD *)v15;
    v5 = v16;
    v14 = *(_QWORD *)&v15[16];
    v6 = v17;
    while (1)
    {
      while (1)
      {
        v7 = v13;
        if ((_QWORD)v13 == v5 && *((_QWORD *)&v13 + 1) == v6)
          return 1;
        if ((BYTE8(v13) & 3) != 0)
          break;
        if (!sub_22EFEF038(a1, *(_QWORD *)v13))
          return 0;
        *(_QWORD *)&v13 = v7 + 8;
      }
      v9 = (_QWORD *)((*((_QWORD *)&v13 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0
                    ? (*((_QWORD *)&v13 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40
                    : sub_22F3AC1A8(*(_QWORD *)v13));
      if ((sub_22EFEF038(a1, *v9) & 1) == 0)
        break;
      if (*((_QWORD *)&v7 + 1) < 4uLL)
        sub_22F3F2FE0((uint64_t)&v13, 1);
      else
        sub_22F0D8720((uint64_t)&v13);
    }
    return 0;
  }
  return result;
}

uint64_t sub_22EFF093C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[24];
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 24);
  v5 = *v4++;
  *(_QWORD *)&v13 = v5;
  *((_QWORD *)&v13 + 1) = v4;
  *(_DWORD *)v15 = sub_22F37A024(&v13);
  *(_OWORD *)&v15[8] = v13;
  result = sub_22F3BEEB4((uint64_t)a1, v5, (uint64_t)v4, (uint64_t)v15, a1, (uint64_t)&v13, *a1 + 24);
  if ((_DWORD)result)
  {
    sub_22F0D492C(a2);
    v13 = *(_OWORD *)v15;
    v7 = v16;
    v14 = *(_QWORD *)&v15[16];
    v8 = *((_QWORD *)&v16 + 1);
    v9 = *(_QWORD *)&v15[8];
    v10 = *(uint64_t **)v15;
    if (*(_OWORD *)v15 == v16)
      return 1;
    while (1)
    {
      if ((v9 & 3) != 0)
      {
        if ((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v11 = (_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v11 = (_QWORD *)sub_22F3AC1A8(*v10);
        if ((sub_22EFEF038(a1, *v11) & 1) == 0)
          return 0;
        if (v9 < 4)
          sub_22F3F2FE0((uint64_t)&v13, 1);
        else
          sub_22F0D8720((uint64_t)&v13);
      }
      else
      {
        if (!sub_22EFEF038(a1, *v10))
          return 0;
        *(_QWORD *)&v13 = v10 + 1;
      }
      v9 = *((_QWORD *)&v13 + 1);
      v10 = (uint64_t *)v13;
      if ((_QWORD)v13 == v7 && *((_QWORD *)&v13 + 1) == v8)
        return 1;
    }
  }
  return result;
}

uint64_t sub_22EFF0AB0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  __int128 v14;
  uint64_t v15;
  _BYTE v16[24];
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 24);
  v5 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  *(_QWORD *)&v14 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  v6 = v14;
  *((_QWORD *)&v14 + 1) = v5;
  *(_DWORD *)v16 = sub_22F37A024(&v14);
  *(_OWORD *)&v16[8] = v14;
  result = sub_22F3BEEB4((uint64_t)a1, v6, v5, (uint64_t)v16, a1, (uint64_t)&v14, *a1 + 24);
  if ((_DWORD)result)
  {
    sub_22F0D492C(a2);
    v14 = *(_OWORD *)v16;
    v8 = v17;
    v15 = *(_QWORD *)&v16[16];
    v9 = *((_QWORD *)&v17 + 1);
    v10 = *(_QWORD *)&v16[8];
    v11 = *(uint64_t **)v16;
    if (*(_OWORD *)v16 == v17)
      return 1;
    while (1)
    {
      if ((v10 & 3) != 0)
      {
        if ((v10 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v12 = (_QWORD *)((v10 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v12 = (_QWORD *)sub_22F3AC1A8(*v11);
        if ((sub_22EFEF038(a1, *v12) & 1) == 0)
          return 0;
        if (v10 < 4)
          sub_22F3F2FE0((uint64_t)&v14, 1);
        else
          sub_22F0D8720((uint64_t)&v14);
      }
      else
      {
        if (!sub_22EFEF038(a1, *v11))
          return 0;
        *(_QWORD *)&v14 = v11 + 1;
      }
      v10 = *((_QWORD *)&v14 + 1);
      v11 = (uint64_t *)v14;
      if ((_QWORD)v14 == v8 && *((_QWORD *)&v14 + 1) == v9)
        return 1;
    }
  }
  return result;
}

uint64_t sub_22EFF0C28(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_22EFEF1D8(a1, a2 + 16);
  if ((_DWORD)result)
  {
    sub_22F0D492C(a2);
    v10 = v12;
    v5 = v14;
    v11 = v13;
    v6 = v15;
    while (1)
    {
      while (1)
      {
        v7 = v10;
        if ((_QWORD)v10 == v5 && *((_QWORD *)&v10 + 1) == v6)
          return 1;
        if ((BYTE8(v10) & 3) != 0)
          break;
        if (!sub_22EFEF038(a1, *(_QWORD *)v10))
          return 0;
        *(_QWORD *)&v10 = v7 + 8;
      }
      v9 = (_QWORD *)((*((_QWORD *)&v10 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0
                    ? (*((_QWORD *)&v10 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40
                    : sub_22F3AC1A8(*(_QWORD *)v10));
      if ((sub_22EFEF038(a1, *v9) & 1) == 0)
        break;
      if (*((_QWORD *)&v7 + 1) < 4uLL)
        sub_22F3F2FE0((uint64_t)&v10, 1);
      else
        sub_22F0D8720((uint64_t)&v10);
    }
    return 0;
  }
  return result;
}

uint64_t sub_22EFF0D20(_QWORD *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _QWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _BYTE v27[24];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a2 + 2) & 4) != 0)
  {
    v4 = *((_QWORD *)a2 + 4);
    v5 = *((_QWORD *)a2 + 5);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  *(_QWORD *)&v22 = v4;
  *((_QWORD *)&v22 + 1) = v5;
  *(_DWORD *)v27 = 5;
  *(_OWORD *)&v27[8] = v22;
  result = sub_22F3BE830((uint64_t)a1, v4, v5, (uint64_t)v27, a1, (uint64_t *)&v22, *a1 + 24);
  if ((_DWORD)result)
  {
    v7 = *((_QWORD *)a2 + 3);
    v8 = a2[1];
    v24 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 40);
    v25 = v8;
    v26 = v7;
    result = sub_22EFF25B0(a1, &v24);
    if ((_DWORD)result)
    {
      v9 = *a2;
      if ((v9 & 0x80000) != 0
        && ((v10 = (uint64_t)&a2[4 * ((v9 >> 18) & 1) + 2 * ((v9 >> 20) & 1)],
             v13 = *(_DWORD *)(v10 + 32),
             v11 = v10 + 32,
             v12 = v13,
             v14 = v11 + 16 * ((v9 >> 19) & 1),
             v13)
          ? (v15 = v14)
          : (v15 = 0),
            v12 && (v16 = *(unsigned int *)(v11 + 12), (_DWORD)v16)))
      {
        while ((sub_22EFF36F8(a1, v15) & 1) != 0)
        {
          v15 += 32;
          if (!--v16)
            goto LABEL_14;
        }
        return 0;
      }
      else
      {
LABEL_14:
        sub_22F0D492C((uint64_t)a2);
        v22 = *(_OWORD *)v27;
        v17 = v28;
        v23 = *(_QWORD *)&v27[16];
        v18 = v29;
        while (1)
        {
          v19 = v22;
          if ((_QWORD)v22 == v17 && *((_QWORD *)&v22 + 1) == v18)
            break;
          if ((BYTE8(v22) & 3) != 0)
          {
            if ((*((_QWORD *)&v22 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0)
              v21 = (_QWORD *)((*((_QWORD *)&v22 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40);
            else
              v21 = (_QWORD *)sub_22F3AC1A8(*(_QWORD *)v22);
            if ((sub_22EFEF038(a1, *v21) & 1) == 0)
              return 0;
            if (*((_QWORD *)&v19 + 1) < 4uLL)
              sub_22F3F2FE0((uint64_t)&v22, 1);
            else
              sub_22F0D8720((uint64_t)&v22);
          }
          else
          {
            if (!sub_22EFEF038(a1, *(_QWORD *)v22))
              return 0;
            *(_QWORD *)&v22 = v19 + 8;
          }
        }
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22EFF0F00(_QWORD *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _BYTE v18[24];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 3);
  *(_QWORD *)&v14 = *((_QWORD *)a2 + 2);
  *((_QWORD *)&v14 + 1) = v4;
  *(_DWORD *)v18 = 5;
  *(_OWORD *)&v18[8] = v14;
  result = sub_22F3BE830((uint64_t)a1, v14, v4, (uint64_t)v18, a1, (uint64_t *)&v14, *a1 + 24);
  if ((_DWORD)result)
  {
    v16 = *((_OWORD *)a2 + 2);
    v17 = *((_QWORD *)a2 + 6);
    result = sub_22EFF25B0(a1, (uint64_t *)&v16);
    if ((_DWORD)result)
    {
      v6 = *a2;
      if ((v6 & 0x40000) != 0 && a2[14] && (v7 = a2[17], (_DWORD)v7))
      {
        v8 = (uint64_t)&a2[4 * ((v6 >> 18) & 1) + 14];
        while ((sub_22EFF36F8(a1, v8) & 1) != 0)
        {
          v8 += 32;
          if (!--v7)
            goto LABEL_9;
        }
        return 0;
      }
      else
      {
LABEL_9:
        sub_22F0D492C((uint64_t)a2);
        v14 = *(_OWORD *)v18;
        v9 = v19;
        v15 = *(_QWORD *)&v18[16];
        v10 = v20;
        while (1)
        {
          v11 = v14;
          if ((_QWORD)v14 == v9 && *((_QWORD *)&v14 + 1) == v10)
            break;
          if ((BYTE8(v14) & 3) != 0)
          {
            if ((*((_QWORD *)&v14 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0)
              v13 = (_QWORD *)((*((_QWORD *)&v14 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40);
            else
              v13 = (_QWORD *)sub_22F3AC1A8(*(_QWORD *)v14);
            if ((sub_22EFEF038(a1, *v13) & 1) == 0)
              return 0;
            if (*((_QWORD *)&v11 + 1) < 4uLL)
              sub_22F3F2FE0((uint64_t)&v14, 1);
            else
              sub_22F0D8720((uint64_t)&v14);
          }
          else
          {
            if (!sub_22EFEF038(a1, *(_QWORD *)v14))
              return 0;
            *(_QWORD *)&v14 = v11 + 8;
          }
        }
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22EFF10B0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_22EFEF038(a1, *(_QWORD *)(a2 + 32));
  if ((_DWORD)result)
  {
    sub_22F0D492C(a2);
    v10 = v12;
    v5 = v14;
    v11 = v13;
    v6 = v15;
    while (1)
    {
      while (1)
      {
        v7 = v10;
        if ((_QWORD)v10 == v5 && *((_QWORD *)&v10 + 1) == v6)
          return 1;
        if ((BYTE8(v10) & 3) != 0)
          break;
        if (!sub_22EFEF038(a1, *(_QWORD *)v10))
          return 0;
        *(_QWORD *)&v10 = v7 + 8;
      }
      v9 = (_QWORD *)((*((_QWORD *)&v10 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0
                    ? (*((_QWORD *)&v10 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40
                    : sub_22F3AC1A8(*(_QWORD *)v10));
      if ((sub_22EFEF038(a1, *v9) & 1) == 0)
        break;
      if (*((_QWORD *)&v7 + 1) < 4uLL)
        sub_22F3F2FE0((uint64_t)&v10, 1);
      else
        sub_22F0D8720((uint64_t)&v10);
    }
    return 0;
  }
  return result;
}

uint64_t sub_22EFF11A8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  int v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  result = sub_22EFEF038(a1, *(_QWORD *)(a2 + 32));
  if ((_DWORD)result)
  {
    v6 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v6)
    {
      v7 = (v6 + 1);
      v8 = 8 * v6;
      while (1)
      {
        v9 = *(_QWORD *)(v4 + 8);
        v10 = *(uint64_t **)(v4 + 8 * v7);
        if (v10)
        {
          v12 = *v10;
          v11 = (uint64_t)(v10 + 1);
          *(_QWORD *)&v13 = v12;
          *((_QWORD *)&v13 + 1) = v11;
          v14 = sub_22F37A024(&v13);
          v15 = v13;
          result = sub_22F3BEEB4((uint64_t)a1, v12, v11, (uint64_t)&v14, a1, (uint64_t)&v13, *a1 + 24);
          if (!(_DWORD)result)
            break;
        }
        result = sub_22EFEF038(a1, v9);
        if (!(_DWORD)result)
          break;
        v4 += 8;
        v8 -= 8;
        if (!v8)
          return 1;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_22EFF12C8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  __int128 v12;
  uint64_t v13;
  _BYTE v14[24];
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)&v12 = *(_QWORD *)(a2 + 40);
  *((_QWORD *)&v12 + 1) = v4;
  *(_DWORD *)v14 = 5;
  *(_OWORD *)&v14[8] = v12;
  result = sub_22F3BE830((uint64_t)a1, v12, v4, (uint64_t)v14, a1, (uint64_t *)&v12, *a1 + 24);
  if ((_DWORD)result)
  {
    sub_22F0D492C(a2);
    v12 = *(_OWORD *)v14;
    v6 = v15;
    v13 = *(_QWORD *)&v14[16];
    v7 = *((_QWORD *)&v15 + 1);
    v8 = *(_QWORD *)&v14[8];
    v9 = *(uint64_t **)v14;
    if (*(_OWORD *)v14 == v15)
      return 1;
    while (1)
    {
      if ((v8 & 3) != 0)
      {
        if ((v8 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v10 = (_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v10 = (_QWORD *)sub_22F3AC1A8(*v9);
        if ((sub_22EFEF038(a1, *v10) & 1) == 0)
          return 0;
        if (v8 < 4)
          sub_22F3F2FE0((uint64_t)&v12, 1);
        else
          sub_22F0D8720((uint64_t)&v12);
      }
      else
      {
        if (!sub_22EFEF038(a1, *v9))
          return 0;
        *(_QWORD *)&v12 = v9 + 1;
      }
      v8 = *((_QWORD *)&v12 + 1);
      v9 = (uint64_t *)v12;
      if ((_QWORD)v12 == v6 && *((_QWORD *)&v12 + 1) == v7)
        return 1;
    }
  }
  return result;
}

uint64_t sub_22EFF142C(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_DWORD *)(a2 + 4);
  if (v4 < 0)
  {
    sub_22F0D492C(a2);
    v14 = v16;
    v9 = v18;
    v15 = v17;
    v10 = v19;
    while (1)
    {
      v11 = v14;
      if ((_QWORD)v14 == v9 && *((_QWORD *)&v14 + 1) == v10)
        break;
      if ((BYTE8(v14) & 3) != 0)
      {
        if ((*((_QWORD *)&v14 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v13 = (_QWORD *)((*((_QWORD *)&v14 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v13 = (_QWORD *)sub_22F3AC1A8(*(_QWORD *)v14);
        if ((sub_22EFEF038(a1, *v13) & 1) == 0)
          return 0;
        if (*((_QWORD *)&v11 + 1) < 4uLL)
          sub_22F3F2FE0((uint64_t)&v14, 1);
        else
          sub_22F0D8720((uint64_t)&v14);
      }
      else
      {
        if (!sub_22EFEF038(a1, *(_QWORD *)v14))
          return 0;
        *(_QWORD *)&v14 = v11 + 8;
      }
    }
    return 1;
  }
  v5 = (v4 - 1);
  if ((_DWORD)v5)
  {
    v6 = a2 + 24;
    v7 = 8 * v5;
    while ((sub_22EFEF038(a1, *(_QWORD *)(*(_QWORD *)v6 + 16)) & 1) != 0)
    {
      v6 += 8;
      v7 -= 8;
      if (!v7)
        return (sub_22EFEF038(a1, *(_QWORD *)(a2 + 16)) & 1) != 0;
    }
    return 0;
  }
  return (sub_22EFEF038(a1, *(_QWORD *)(a2 + 16)) & 1) != 0;
}

BOOL sub_22EFF1568(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a2 + 16);
  if ((v3 & 4) == 0 || (v4 = v3 & 0xFFFFFFFFFFFFFFF8) == 0)
  {
    sub_22F0D492C(a2);
    v11 = v13;
    v5 = v15;
    v12 = v14;
    v6 = v16;
    while (1)
    {
      v7 = v11;
      if ((_QWORD)v11 == v5 && *((_QWORD *)&v11 + 1) == v6)
        break;
      if ((BYTE8(v11) & 3) != 0)
      {
        if ((*((_QWORD *)&v11 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v9 = (_QWORD *)((*((_QWORD *)&v11 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v9 = (_QWORD *)sub_22F3AC1A8(*(_QWORD *)v11);
        if ((sub_22EFEF038(a1, *v9) & 1) == 0)
          return 0;
        if (*((_QWORD *)&v7 + 1) < 4uLL)
          sub_22F3F2FE0((uint64_t)&v11, 1);
        else
          sub_22F0D8720((uint64_t)&v11);
      }
      else
      {
        if (!sub_22EFEF038(a1, *(_QWORD *)v11))
          return 0;
        *(_QWORD *)&v11 = v7 + 8;
      }
    }
    return 1;
  }
  return (sub_22F3BB7D8(a1, v4) & 1) != 0;
}

uint64_t sub_22EFF1670(_QWORD *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _QWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _BYTE v27[24];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a2 + 2) & 8) != 0)
  {
    v4 = *((_QWORD *)a2 + 6);
    v5 = *((_QWORD *)a2 + 7);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  *(_QWORD *)&v22 = v4;
  *((_QWORD *)&v22 + 1) = v5;
  *(_DWORD *)v27 = 5;
  *(_OWORD *)&v27[8] = v22;
  result = sub_22F3BE830((uint64_t)a1, v4, v5, (uint64_t)v27, a1, (uint64_t *)&v22, *a1 + 24);
  if ((_DWORD)result)
  {
    v7 = *((_QWORD *)a2 + 4);
    v8 = a2[10];
    v24 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 40);
    v25 = v8;
    v26 = v7;
    result = sub_22EFF25B0(a1, &v24);
    if ((_DWORD)result)
    {
      v9 = *a2;
      if ((v9 & 0x100000) != 0
        && ((v10 = &a2[6 * ((v9 >> 19) & 1)],
             v13 = v10[12],
             v11 = v10 + 12,
             v12 = v13,
             v14 = &v11[4 * ((v9 >> 20) & 1)],
             v13)
          ? (v15 = v14)
          : (v15 = 0),
            v12 && (v16 = v11[3], (_DWORD)v16)))
      {
        while ((sub_22EFF36F8(a1, v15) & 1) != 0)
        {
          v15 += 8;
          if (!--v16)
            goto LABEL_14;
        }
        return 0;
      }
      else
      {
LABEL_14:
        sub_22F0D492C((uint64_t)a2);
        v22 = *(_OWORD *)v27;
        v17 = v28;
        v23 = *(_QWORD *)&v27[16];
        v18 = v29;
        while (1)
        {
          v19 = v22;
          if ((_QWORD)v22 == v17 && *((_QWORD *)&v22 + 1) == v18)
            break;
          if ((BYTE8(v22) & 3) != 0)
          {
            if ((*((_QWORD *)&v22 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0)
              v21 = (_QWORD *)((*((_QWORD *)&v22 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40);
            else
              v21 = (_QWORD *)sub_22F3AC1A8(*(_QWORD *)v22);
            if ((sub_22EFEF038(a1, *v21) & 1) == 0)
              return 0;
            if (*((_QWORD *)&v19 + 1) < 4uLL)
              sub_22F3F2FE0((uint64_t)&v22, 1);
            else
              sub_22F0D8720((uint64_t)&v22);
          }
          else
          {
            if (!sub_22EFEF038(a1, *(_QWORD *)v22))
              return 0;
            *(_QWORD *)&v22 = v19 + 8;
          }
        }
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22EFF184C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[24];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 16);
  if (!v4
    || (v12 = *v4,
        v11 = (uint64_t)(v4 + 1),
        *(_QWORD *)&v13 = v12,
        *((_QWORD *)&v13 + 1) = v11,
        *(_DWORD *)v15 = sub_22F37A024(&v13),
        *(_OWORD *)&v15[8] = v13,
        result = sub_22F3BEEB4((uint64_t)a1, v12, v11, (uint64_t)v15, a1, (uint64_t)&v13, *a1 + 24),
        (_DWORD)result))
  {
    sub_22F0D492C(a2);
    v13 = *(_OWORD *)v15;
    v5 = v16;
    v14 = *(_QWORD *)&v15[16];
    v6 = v17;
    while (1)
    {
      while (1)
      {
        v7 = v13;
        if ((_QWORD)v13 == v5 && *((_QWORD *)&v13 + 1) == v6)
          return 1;
        if ((BYTE8(v13) & 3) != 0)
          break;
        if (!sub_22EFEF038(a1, *(_QWORD *)v13))
          return 0;
        *(_QWORD *)&v13 = v7 + 8;
      }
      v9 = (_QWORD *)((*((_QWORD *)&v13 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0
                    ? (*((_QWORD *)&v13 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40
                    : sub_22F3AC1A8(*(_QWORD *)v13));
      if ((sub_22EFEF038(a1, *v9) & 1) == 0)
        break;
      if (*((_QWORD *)&v7 + 1) < 4uLL)
        sub_22F3F2FE0((uint64_t)&v13, 1);
      else
        sub_22F0D8720((uint64_t)&v13);
    }
    return 0;
  }
  return result;
}

uint64_t sub_22EFF19B4(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[24];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a2 + 26))
    goto LABEL_3;
  v4 = *(uint64_t **)(a2 + 40);
  if (!v4
    || (v12 = *v4,
        v11 = (uint64_t)(v4 + 1),
        *(_QWORD *)&v13 = v12,
        *((_QWORD *)&v13 + 1) = v11,
        *(_DWORD *)v15 = sub_22F37A024(&v13),
        *(_OWORD *)&v15[8] = v13,
        result = sub_22F3BEEB4((uint64_t)a1, v12, v11, (uint64_t)v15, a1, (uint64_t)&v13, *a1 + 24),
        (_DWORD)result))
  {
LABEL_3:
    sub_22F0D492C(a2);
    v13 = *(_OWORD *)v15;
    v5 = v16;
    v14 = *(_QWORD *)&v15[16];
    v6 = v17;
    while (1)
    {
      while (1)
      {
        v7 = v13;
        if ((_QWORD)v13 == v5 && *((_QWORD *)&v13 + 1) == v6)
          return 1;
        if ((BYTE8(v13) & 3) != 0)
          break;
        if (!sub_22EFEF038(a1, *(_QWORD *)v13))
          return 0;
        *(_QWORD *)&v13 = v7 + 8;
      }
      v9 = (_QWORD *)((*((_QWORD *)&v13 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0
                    ? (*((_QWORD *)&v13 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40
                    : sub_22F3AC1A8(*(_QWORD *)v13));
      if ((sub_22EFEF038(a1, *v9) & 1) == 0)
        break;
      if (*((_QWORD *)&v7 + 1) < 4uLL)
        sub_22F3F2FE0((uint64_t)&v13, 1);
      else
        sub_22F0D8720((uint64_t)&v13);
    }
    return 0;
  }
  return result;
}

uint64_t sub_22EFF1B24(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int i;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  _DWORD v23[2];
  _BYTE v24[24];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 40);
  if ((v4 & 6) == 4)
  {
    v11 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0 && (*(_DWORD *)(v11 + 28) & 0x7F) == 0x53)
    {
      v19 = v4 & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      v12 = *(_QWORD *)(v11 + 16);
      v13 = v12 & 0xFFFFFFFFFFFFFFF8;
      if ((v12 & 4) != 0)
        v13 = *(_QWORD *)v13;
      for (i = *(_WORD *)(v13 + 8) & 0x7F; i != 83; i = *(_WORD *)(v13 + 8) & 0x7F)
      {
        v15 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v15 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_34;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_33;
          if (i == 16)
            goto LABEL_27;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_40;
          if (i == 24)
          {
LABEL_27:
            v15 = -48;
          }
          else
          {
LABEL_33:
            if (i != 70)
            {
LABEL_34:
              v16 = i - 52;
              if ((i - 33) >= 5)
                v17 = -48;
              else
                v17 = -64;
              if (v16 >= 6)
                v15 = v17;
              else
                v15 = -72;
              goto LABEL_40;
            }
            v15 = -64;
          }
        }
LABEL_40:
        v18 = *(_QWORD *)(v13 + v15 + 16);
        v13 = v18 & 0xFFFFFFFFFFFFFFF8;
        if ((v18 & 4) != 0)
          v13 = *(_QWORD *)v13;
      }
      v19 = v13 - 40;
    }
    v20 = sub_22F36D148(*(_QWORD *)(v19 + 88), (uint64_t *)v11, 0);
    v23[0] = *(_DWORD *)(a2 + 36);
    v23[1] = v23[0];
    *(_QWORD *)&v21 = v20;
    *((_QWORD *)&v21 + 1) = v23;
    *(_DWORD *)v24 = sub_22F37A024(&v21);
    *(_OWORD *)&v24[8] = v21;
    result = sub_22F3BEEB4((uint64_t)a1, v20, (uint64_t)v23, (uint64_t)v24, a1, (uint64_t)&v21, *a1 + 24);
    if (!(_DWORD)result)
      return result;
  }
  sub_22F0D492C(a2);
  v21 = *(_OWORD *)v24;
  v5 = v25;
  v22 = *(_QWORD *)&v24[16];
  v6 = v26;
  while (1)
  {
    while (1)
    {
      v7 = v21;
      if ((_QWORD)v21 == v5 && *((_QWORD *)&v21 + 1) == v6)
        return 1;
      if ((BYTE8(v21) & 3) != 0)
        break;
      if (!sub_22EFEF038(a1, *(_QWORD *)v21))
        return 0;
      *(_QWORD *)&v21 = v7 + 8;
    }
    v9 = (_QWORD *)((*((_QWORD *)&v21 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0
                  ? (*((_QWORD *)&v21 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40
                  : sub_22F3AC1A8(*(_QWORD *)v21));
    if ((sub_22EFEF038(a1, *v9) & 1) == 0)
      break;
    if (*((_QWORD *)&v7 + 1) < 4uLL)
      sub_22F3F2FE0((uint64_t)&v21, 1);
    else
      sub_22F0D8720((uint64_t)&v21);
  }
  return 0;
}

uint64_t sub_22EFF1DB8(_QWORD *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[24];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 6);
  *(_QWORD *)&v17 = *((_QWORD *)a2 + 5);
  *((_QWORD *)&v17 + 1) = v4;
  *(_DWORD *)v19 = 5;
  *(_OWORD *)&v19[8] = v17;
  result = sub_22F3BE830((uint64_t)a1, v17, v4, (uint64_t)v19, a1, (uint64_t *)&v17, *a1 + 24);
  if ((_DWORD)result)
  {
    v6 = *a2;
    if ((v6 & 0x40000) != 0
      && ((v7 = a2[1], *a2 != 211) ? (v8 = a2 + 20) : (v8 = a2 + 16),
          v8[2 * v7] && (v9 = &v8[2 * v7], v10 = v9[3], (_DWORD)v10)))
    {
      v11 = &v9[4 * ((v6 >> 18) & 1)];
      while ((sub_22EFF36F8(a1, v11) & 1) != 0)
      {
        v11 += 8;
        if (!--v10)
          goto LABEL_11;
      }
      return 0;
    }
    else
    {
LABEL_11:
      sub_22F0D492C((uint64_t)a2);
      v17 = *(_OWORD *)v19;
      v12 = v20;
      v18 = *(_QWORD *)&v19[16];
      v13 = v21;
      while (1)
      {
        v14 = v17;
        if ((_QWORD)v17 == v12 && *((_QWORD *)&v17 + 1) == v13)
          break;
        if ((BYTE8(v17) & 3) != 0)
        {
          if ((*((_QWORD *)&v17 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0)
            v16 = (_QWORD *)((*((_QWORD *)&v17 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40);
          else
            v16 = (_QWORD *)sub_22F3AC1A8(*(_QWORD *)v17);
          if ((sub_22EFEF038(a1, *v16) & 1) == 0)
            return 0;
          if (*((_QWORD *)&v14 + 1) < 4uLL)
            sub_22F3F2FE0((uint64_t)&v17, 1);
          else
            sub_22F0D8720((uint64_t)&v17);
        }
        else
        {
          if (!sub_22EFEF038(a1, *(_QWORD *)v17))
            return 0;
          *(_QWORD *)&v17 = v14 + 8;
        }
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_22EFF1F68(uint64_t a1, int *a2)
{
  int *v4;
  uint64_t result;
  unint64_t v6;
  unsigned __int8 **v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  BOOL v11;

  v4 = a2 + 4;
  result = sub_22EFEF038(a1, *((_QWORD *)a2 + 2));
  if ((_DWORD)result)
  {
    v8 = *a2;
    v7 = (unsigned __int8 **)(a2 + 6);
    v6 = v8;
    if (v7 == (unsigned __int8 **)&v4[2 * ((unint64_t)v8 >> 18)])
    {
      return 1;
    }
    else
    {
      v9 = 8 * (v6 >> 18) - 16;
      do
      {
        v10 = *v7;
        if (**v7 == 210)
          v10 = (unsigned __int8 *)*((_QWORD *)v10 + 2);
        result = sub_22EFEF038(a1, v10);
        ++v7;
        if ((_DWORD)result)
          v11 = v9 == 0;
        else
          v11 = 1;
        v9 -= 8;
      }
      while (!v11);
    }
  }
  return result;
}

uint64_t sub_22EFF2000(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int **v10;
  uint64_t i;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  __int128 v29;
  uint64_t v30;
  _BYTE v31[24];
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)v31 = *(_QWORD *)(a2 + 24);
  result = sub_22F3BAC7C(a1, *(_QWORD *)v31, *(_QWORD *)v31, a1, v31, *a1);
  if ((_DWORD)result)
  {
    v5 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      v7 = (_QWORD *)(a2 + 40);
      while (1)
      {
        *(_QWORD *)v31 = *v7;
        if ((sub_22F3BAC7C(a1, *(_QWORD *)v31, *(_QWORD *)v31, a1, v31, *a1) & 1) == 0)
          return 0;
        ++v7;
        v6 -= 8;
        if (!v6)
        {
          v8 = *(unsigned int *)(a2 + 16);
          goto LABEL_8;
        }
      }
    }
    else
    {
      v8 = 0;
LABEL_8:
      v9 = *(unsigned int *)(a2 + 20);
      if ((_DWORD)v9)
      {
        v10 = (unsigned int **)(a2 + 40 + 8 * v8);
        for (i = 8 * v9; i; i -= 8)
        {
          v12 = *v10;
          v13 = **v10;
          if (v13)
          {
            if (v13 <= 2)
            {
              if (v12[10] != 1)
              {
                result = sub_22EFEF038(a1, *((_QWORD *)v12 + 1) & 0xFFFFFFFFFFFFFFFCLL);
                if (!(_DWORD)result)
                  return result;
              }
              v18 = *((_QWORD *)v12 + 3);
              if (v18 >= 8 && (*((_QWORD *)v12 + 3) & 4) == 0)
              {
                v20 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 16);
                v21 = *(_BYTE *)(v20 + 60);
                v22 = v20 + 80;
                if ((v21 & 4) == 0)
                  v22 = 0;
                if ((sub_22EFEF038(a1, *(_QWORD *)(v22 + 72)) & 1) == 0)
                  return 0;
              }
            }
            else
            {
              v14 = *((_QWORD *)v12 + 1);
              if ((v14 & 2) == 0)
              {
                result = sub_22EFEF038(a1, v14 & 0xFFFFFFFFFFFFFFFCLL);
                if (!(_DWORD)result)
                  return result;
              }
            }
          }
          else if (v12[4] != 1)
          {
            v15 = *((_QWORD *)v12 + 1);
            v16 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
            *(_QWORD *)&v29 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8);
            v17 = v29;
            *((_QWORD *)&v29 + 1) = v16;
            *(_DWORD *)v31 = sub_22F37A024(&v29);
            *(_OWORD *)&v31[8] = v29;
            if ((sub_22F3BEEB4((uint64_t)a1, v17, v16, (uint64_t)v31, a1, (uint64_t)&v29, *a1 + 24) & 1) == 0)
              return 0;
          }
          ++v10;
        }
      }
      sub_22F0D492C(a2);
      v29 = *(_OWORD *)v31;
      v23 = v32;
      v30 = *(_QWORD *)&v31[16];
      v24 = *((_QWORD *)&v32 + 1);
      v25 = *(_QWORD *)&v31[8];
      v26 = *(uint64_t **)v31;
      if (*(_OWORD *)v31 != v32)
      {
        do
        {
          if ((v25 & 3) != 0)
          {
            if ((v25 & 0xFFFFFFFFFFFFFFFCLL) != 0)
              v27 = (_QWORD *)((v25 & 0xFFFFFFFFFFFFFFFCLL) + 40);
            else
              v27 = (_QWORD *)sub_22F3AC1A8(*v26);
            if ((sub_22EFEF038(a1, *v27) & 1) == 0)
              return 0;
            if (v25 < 4)
              sub_22F3F2FE0((uint64_t)&v29, 1);
            else
              sub_22F0D8720((uint64_t)&v29);
          }
          else
          {
            if (!sub_22EFEF038(a1, *v26))
              return 0;
            *(_QWORD *)&v29 = v26 + 1;
          }
          v25 = *((_QWORD *)&v29 + 1);
          v26 = (uint64_t *)v29;
        }
        while ((_QWORD)v29 != v23 || *((_QWORD *)&v29 + 1) != v24);
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_22EFF22BC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _QWORD *v12;
  __int128 v14;
  uint64_t v15;
  _BYTE v16[24];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a2 + 4);
  if ((_DWORD)v4)
  {
    v5 = (_QWORD **)(a2 + 24);
    while (1)
    {
      v6 = (uint64_t)(*v5 + 1);
      *(_QWORD *)&v14 = **v5;
      v7 = v14;
      *((_QWORD *)&v14 + 1) = v6;
      *(_DWORD *)v16 = sub_22F37A024(&v14);
      *(_OWORD *)&v16[8] = v14;
      if ((sub_22F3BEEB4((uint64_t)a1, v7, v6, (uint64_t)v16, a1, (uint64_t)&v14, *a1 + 24) & 1) == 0)
        return 0;
      ++v5;
      if (!--v4)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    sub_22F0D492C(a2);
    v14 = *(_OWORD *)v16;
    v8 = v17;
    v15 = *(_QWORD *)&v16[16];
    v9 = v18;
    while (1)
    {
      v10 = v14;
      if ((_QWORD)v14 == v8 && *((_QWORD *)&v14 + 1) == v9)
        break;
      if ((BYTE8(v14) & 3) != 0)
      {
        if ((*((_QWORD *)&v14 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v12 = (_QWORD *)((*((_QWORD *)&v14 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v12 = (_QWORD *)sub_22F3AC1A8(*(_QWORD *)v14);
        if ((sub_22EFEF038(a1, *v12) & 1) == 0)
          return 0;
        if (*((_QWORD *)&v10 + 1) < 4uLL)
          sub_22F3F2FE0((uint64_t)&v14, 1);
        else
          sub_22F0D8720((uint64_t)&v14);
      }
      else
      {
        if (!sub_22EFEF038(a1, *(_QWORD *)v14))
          return 0;
        *(_QWORD *)&v14 = v10 + 8;
      }
    }
    return 1;
  }
}

uint64_t sub_22EFF2444(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _QWORD *v8;
  uint64_t result;
  uint64_t *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _BYTE v14[24];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 0x40) == 0)
    goto LABEL_2;
  v10 = *(uint64_t **)(a2 + 16);
  v11 = *v10++;
  *(_QWORD *)&v12 = v11;
  *((_QWORD *)&v12 + 1) = v10;
  *(_DWORD *)v14 = sub_22F37A024(&v12);
  *(_OWORD *)&v14[8] = v12;
  result = sub_22F3BEEB4((uint64_t)a1, v11, (uint64_t)v10, (uint64_t)v14, a1, (uint64_t)&v12, *a1 + 24);
  if ((_DWORD)result)
  {
LABEL_2:
    sub_22F0D492C(a2);
    v12 = *(_OWORD *)v14;
    v4 = v15;
    v13 = *(_QWORD *)&v14[16];
    v5 = v16;
    while (1)
    {
      while (1)
      {
        v6 = v12;
        if ((_QWORD)v12 == v4 && *((_QWORD *)&v12 + 1) == v5)
          return 1;
        if ((BYTE8(v12) & 3) != 0)
          break;
        if (!sub_22EFEF038(a1, *(_QWORD *)v12))
          return 0;
        *(_QWORD *)&v12 = v6 + 8;
      }
      v8 = (_QWORD *)((*((_QWORD *)&v12 + 1) & 0xFFFFFFFFFFFFFFFCLL) != 0
                    ? (*((_QWORD *)&v12 + 1) & 0xFFFFFFFFFFFFFFFCLL) + 40
                    : sub_22F3AC1A8(*(_QWORD *)v12));
      if ((sub_22EFEF038(a1, *v8) & 1) == 0)
        break;
      if (*((_QWORD *)&v6 + 1) < 4uLL)
        sub_22F3F2FE0((uint64_t)&v12, 1);
      else
        sub_22F0D8720((uint64_t)&v12);
    }
    return 0;
  }
  return result;
}

uint64_t sub_22EFF25B0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  int v12;
  unint64_t v13;
  __int128 v14;
  int v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = *a2 & 7;
  v5 = v4;
  if ((_DWORD)v4 == 7)
  {
    v6 = *(_DWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
    if (v6 >= 3)
      v6 = 3;
    v5 = v6 | 8;
  }
  if ((v5 - 3) < 3)
  {
    if ((v4 - 3) <= 2)
    {
      v7 = (uint64_t *)a2[2];
      if (v7)
      {
        v9 = *v7;
        v8 = (uint64_t)(v7 + 1);
        *(_QWORD *)&v14 = v9;
        *((_QWORD *)&v14 + 1) = v8;
        v15 = sub_22F37A024(&v14);
        v16 = v14;
        if ((sub_22F3BEEB4((uint64_t)a1, v9, v8, (uint64_t)&v15, a1, (uint64_t)&v14, *a1 + 24) & 1) == 0)
          return 0;
      }
    }
    return 1;
  }
  if (v5 != 8)
    return 1;
  if ((~(_BYTE)v3 & 7) != 0)
    goto LABEL_17;
  v11 = v3 & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_DWORD *)v11;
  if (*(_DWORD *)v11 >= 3u)
    v12 = 3;
  if (v12)
LABEL_17:
    v13 = 0;
  else
    v13 = *(_QWORD *)(v11 + 16) & 0xFFFFFFFFFFFFFFF9;
  result = sub_22F3C01BC((uint64_t)a1, v13);
  if ((_DWORD)result)
    return 1;
  return result;
}

unsigned int *sub_22EFF26F0(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  int v5;
  unsigned int v6;
  unsigned int *v9[6];

  v9[5] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_8;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_8:
    sub_22EFF27EC(a1, v6);
    v9[0] = 0;
    sub_22EFED7D8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, v9);
    a3 = v9[0];
  }
  ++*(_DWORD *)(a1 + 8);
  LODWORD(v9[0]) = 0;
  if (*a3 && !sub_22F359EAC(a3, (unsigned int *)v9))
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_DWORD *sub_22EFF27EC(uint64_t a1, int a2)
{
  uint64_t v3;
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(unsigned int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 48 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F3BEC4C(a1, v4, (__int128 *)&v4[12 * v3]);
    return (_DWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(48 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 48 * v10;
      do
      {
        *result = 0;
        result += 12;
        v11 -= 48;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22EFF28B4(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  _BYTE v29[24];
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 1;
  v4 = a2;
  while (1)
  {
    v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
    if ((v4 & 0xF) == 0 && *(_BYTE *)(v6 + 16) != 57)
      break;
    if ((v6 & 0xFFFFFFFFFFFFFFF0) != 0)
      v7 = *(_QWORD *)((char *)&unk_22F4A23B0
                     + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
    else
      v7 = 1;
    a3 = (a3 + v7 - 1) & -v7;
    v4 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
    if (!v6)
      return 1;
  }
  result = 1;
  switch(*(_BYTE *)(v6 + 16))
  {
    case 0:
    case 1:
    case 0x16:
    case 0x17:
    case 0x36:
      return sub_22F3BEFA8(a1, v4, a3);
    case 2:
    case 3:
    case 4:
    case 5:
      return sub_22F3BF060(a1, v4, a3);
    case 6:
      return sub_22F3BF12C(a1, v4, a3);
    case 7:
    case 0x25:
      return sub_22F3BF1E4(a1, v4, a3);
    case 8:
      return sub_22F3BF29C(a1, v4, a3);
    case 0xA:
    case 0x20:
    case 0x24:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
      return sub_22F3BF350(a1, v4, a3);
    case 0xC:
    case 0x37:
    case 0x38:
      v9 = *(_QWORD *)(v4 + 32);
      goto LABEL_39;
    case 0xD:
    case 0x30:
      v10 = *(_QWORD *)(v4 + 24);
      return sub_22EFEF038(a1, v10);
    case 0xE:
      return sub_22F3BF408(a1, v4, a3);
    case 0xF:
      result = sub_22F3C01BC((uint64_t)a1, *(_QWORD *)(v4 + 40));
      if (!(_DWORD)result)
        return result;
      v9 = *(_QWORD *)(v4 + 24);
      goto LABEL_39;
    case 0x10:
      v11 = *(_QWORD *)(v4 + 40);
      goto LABEL_17;
    case 0x11:
      v10 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
      return sub_22EFEF038(a1, v10);
    case 0x12:
      return sub_22F3BF53C(a1, v4, a3);
    case 0x13:
      v11 = *(_QWORD *)(v4 + 40);
      if (!v11)
        goto LABEL_18;
LABEL_17:
      result = sub_22EFEF038(a1, v11);
      if (!(_DWORD)result)
        return result;
LABEL_18:
      v9 = *(_QWORD *)(v4 + 48);
LABEL_39:
      result = sub_22EFF335C(a1, v9);
      break;
    case 0x14:
      v12 = *(_QWORD *)(a3 + 8);
      if (v12)
      {
        v13 = *(_QWORD *)(v4 + 32);
        if (v13)
        {
          *(_QWORD *)&v28 = *(_QWORD *)(v4 + 32);
          *((_QWORD *)&v28 + 1) = v12;
          *(_DWORD *)v29 = 5;
          *(_OWORD *)&v29[8] = v28;
          result = sub_22F3BE830((uint64_t)a1, v13, v12, (uint64_t)v29, a1, (uint64_t *)&v28, *a1 + 24);
          if (!(_DWORD)result)
            return result;
        }
      }
      v14 = *(unsigned int *)(v4 + 20);
      if (!(_DWORD)v14)
        return 1;
      v15 = v4 + 48;
      v16 = (uint64_t *)(a3 + 32);
      v17 = v14 - 1;
      do
      {
        v18 = *v16++;
        *(_OWORD *)v29 = *(_OWORD *)v15;
        *(_QWORD *)&v29[16] = *(_QWORD *)(v15 + 16);
        v30 = v18;
        result = sub_22EFF36F8(a1, v29);
        v20 = v17-- != 0;
        if (!(_DWORD)result)
          break;
        v15 += 24;
      }
      while (v20);
      break;
    case 0x15:
      v21 = *(_QWORD *)(v4 + 48);
      if (v21)
      {
        result = sub_22EFEF038(a1, v21);
        if (!(_DWORD)result)
          return result;
      }
      v9 = *(_QWORD *)(v4 + 40);
      goto LABEL_39;
    case 0x18:
      return sub_22F3BF5B4(a1, v4, a3);
    case 0x19:
      return sub_22F3BF6B4(a1, v4, a3);
    case 0x1A:
      return sub_22F3BF75C(a1, v4, a3);
    case 0x1C:
      return sub_22F3BF91C(a1, v4, a3);
    case 0x1D:
    case 0x1E:
      return sub_22F3BF9D4(a1, v4, a3);
    case 0x1F:
      return sub_22F3BFA40(a1, v4, a3);
    case 0x21:
      return sub_22F3BFB70(a1, v4, a3);
    case 0x23:
      v22 = *(_BYTE *)(v4 + 32) & 0x3F;
      if ((*(_BYTE *)(v4 + 32) & 0x3F) != 0)
      {
        v23 = (uint64_t *)(v4 + 48);
        v24 = (_DWORD *)(a3 + 12);
        do
        {
          v26 = *v23++;
          v25 = v26;
          LODWORD(v26) = *v24++;
          v4 = v4 & 0xFFFFFFFF00000000 | v26;
          sub_22F3C02D0((uint64_t)a1, v25, v4);
          result = 1;
          --v22;
        }
        while (v22);
      }
      return result;
    case 0x2A:
      v27 = *(_DWORD *)(v4 + 20);
      *(_QWORD *)&v29[8] = *(_QWORD *)(v4 + 40);
      *(_DWORD *)v29 = 8;
      *(_DWORD *)&v29[4] = v27;
      return sub_22F3C00F0((uint64_t)a1, (uint64_t)v29);
    case 0x2B:
      v9 = *(_QWORD *)(v4 + 8);
      goto LABEL_39;
    case 0x2E:
      return sub_22F3BFD38((uint64_t)a1, v4, a3);
    case 0x31:
    case 0x33:
      return sub_22F3BFDC8(a1, v4, a3);
    default:
      return result;
  }
  return result;
}

uint64_t sub_22EFF335C(_QWORD *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD v28[3];

  if (a2 >= 0x10)
  {
    while (2)
    {
      v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
      result = 1;
      switch(*(_BYTE *)(v4 + 16))
      {
        case 0:
        case 1:
        case 4:
        case 6:
        case 7:
        case 8:
        case 0xA:
        case 0xC:
        case 0x1D:
        case 0x20:
        case 0x24:
        case 0x25:
        case 0x26:
        case 0x27:
        case 0x36:
        case 0x37:
        case 0x38:
          goto LABEL_5;
        case 2:
          result = sub_22EFF335C(a1, *(_QWORD *)(v4 + 32));
          if ((_DWORD)result)
          {
            if ((*(_BYTE *)(v4 + 19) & 2) == 0)
              return 1;
            v12 = *(_QWORD *)(v4 + 56);
            if (!v12)
              return 1;
            result = sub_22EFEF038(a1, v12);
            if ((_DWORD)result)
              return 1;
          }
          return result;
        case 3:
          return sub_22F3BFE64((uint64_t)a1, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
        case 5:
          result = sub_22EFF335C(a1, *(_QWORD *)(v4 + 32));
          if (!(_DWORD)result)
            return result;
          v11 = *(_QWORD *)(v4 + 40);
          return sub_22EFEF038(a1, v11);
        case 0xD:
        case 0x30:
          v11 = *(_QWORD *)(v4 + 24);
          return sub_22EFEF038(a1, v11);
        case 0xE:
          result = sub_22EFF335C(a1, *(_QWORD *)(v4 + 24));
          if (!(_DWORD)result)
            return result;
          v13 = *(_QWORD *)(v4 + 40);
          if (!v13)
            return 1;
          v28[0] = *(_QWORD *)(v4 + 40);
          result = sub_22F3BAC7C(a1, v13, v13, a1, v28, *a1);
          if (!(_DWORD)result)
            return result;
          v14 = *(unsigned int *)(v4 + 20);
          if (!(_DWORD)v14)
            return 1;
          v15 = v4 + 48;
          v16 = v14 - 1;
          do
          {
            result = sub_22F3C00F0((uint64_t)a1, v15);
            v17 = v16-- != 0;
            v18 = v17;
            if (!(_DWORD)result)
              break;
            v15 += 24;
          }
          while ((v18 & 1) != 0);
          return result;
        case 0xF:
          result = sub_22F3C01BC((uint64_t)a1, *(_QWORD *)(v4 + 40));
          if ((_DWORD)result)
            goto LABEL_28;
          return result;
        case 0x10:
          v6 = *(_QWORD *)(v4 + 40);
          goto LABEL_10;
        case 0x11:
          v11 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
          return sub_22EFEF038(a1, v11);
        case 0x12:
          return sub_22F3C0234((uint64_t)a1, *(_QWORD *)(v4 + 32));
        case 0x13:
          v6 = *(_QWORD *)(v4 + 40);
          if (!v6)
            goto LABEL_11;
LABEL_10:
          result = sub_22EFEF038(a1, v6);
          if (!(_DWORD)result)
            return result;
LABEL_11:
          v5 = (unint64_t *)(v4 + 48);
          goto LABEL_6;
        case 0x14:
          result = sub_22F3C0234((uint64_t)a1, *(_QWORD *)(v4 + 32));
          if (!(_DWORD)result)
            return result;
          v19 = *(unsigned int *)(v4 + 20);
          if (!(_DWORD)v19)
            return 1;
          v20 = v4 + 48;
          v21 = v19 - 1;
          do
          {
            result = sub_22F3C00F0((uint64_t)a1, v20);
            v17 = v21-- != 0;
            v22 = v17;
            if (!(_DWORD)result)
              break;
            v20 += 24;
          }
          while ((v22 & 1) != 0);
          return result;
        case 0x15:
          v7 = *(_QWORD *)(v4 + 48);
          if (v7)
          {
            result = sub_22EFEF038(a1, v7);
            if (!(_DWORD)result)
              return result;
          }
          goto LABEL_21;
        case 0x16:
          v8 = *(_QWORD *)(v4 + 56);
          if (!v8)
            goto LABEL_5;
          goto LABEL_18;
        case 0x17:
          v8 = *(_QWORD *)(v4 + 64);
          if (!v8)
            goto LABEL_5;
LABEL_18:
          result = sub_22EFEF038(a1, v8);
          if (!(_DWORD)result)
            return result;
          goto LABEL_5;
        case 0x18:
          v9 = *(_QWORD *)(v4 + 32);
          if (v9)
          {
            result = sub_22F3C0234((uint64_t)a1, v9);
            if (!(_DWORD)result)
              return result;
          }
LABEL_21:
          v5 = (unint64_t *)(v4 + 40);
          goto LABEL_6;
        case 0x19:
        case 0x1C:
        case 0x31:
LABEL_28:
          v5 = (unint64_t *)(v4 + 24);
          goto LABEL_6;
        case 0x1A:
          return sub_22F3BFEAC((uint64_t)a1, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
        case 0x1E:
          return sub_22F3BFF9C((uint64_t)a1, *(_QWORD **)(a2 & 0xFFFFFFFFFFFFFFF0));
        case 0x1F:
          v10 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0;
          goto LABEL_25;
        case 0x21:
          return sub_22F3C0004((uint64_t)a1, *(_QWORD **)(a2 & 0xFFFFFFFFFFFFFFF0));
        case 0x28:
        case 0x29:
          return sub_22F3C0088((uint64_t)a1, *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
        case 0x2A:
          v23 = *(_DWORD *)(v4 + 20);
          v28[1] = *(_QWORD *)(v4 + 40);
          LODWORD(v28[0]) = 8;
          HIDWORD(v28[0]) = v23;
          return sub_22F3C00F0((uint64_t)a1, (uint64_t)v28);
        case 0x2B:
          v5 = (unint64_t *)(v4 + 8);
          goto LABEL_6;
        case 0x2E:
          result = sub_22F3C01BC((uint64_t)a1, *(_QWORD *)(v4 + 32));
          if (!(_DWORD)result)
            return result;
          v24 = *(unsigned int *)(v4 + 20);
          if (!(_DWORD)v24)
            return 1;
          v25 = v4 + 40;
          v26 = v24 - 1;
          do
          {
            result = sub_22F3C00F0((uint64_t)a1, v25);
            v17 = v26-- != 0;
            v27 = v17;
            if (!(_DWORD)result)
              break;
            v25 += 24;
          }
          while ((v27 & 1) != 0);
          return result;
        case 0x33:
          v10 = *(_QWORD *)(v4 + 24);
LABEL_25:
          result = sub_22EFF335C(a1, v10);
          if (!(_DWORD)result)
            return result;
LABEL_5:
          v5 = (unint64_t *)(v4 + 32);
LABEL_6:
          a2 = *v5;
          if (*v5 < 0x10)
            return 1;
          continue;
        default:
          return result;
      }
    }
  }
  return 1;
}

uint64_t sub_22EFF36F8(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v5 = (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (v5)
      {
        v15 = *v5;
        v14 = (uint64_t)(v5 + 1);
        *(_QWORD *)&v16 = v15;
        *((_QWORD *)&v16 + 1) = v14;
        v17 = sub_22F37A024(&v16);
        v18 = v16;
        result = sub_22F3BEEB4((uint64_t)a1, v15, v14, (uint64_t)&v17, a1, (uint64_t)&v16, *a1 + 24);
      }
      else
      {
        result = sub_22EFF335C(a1, *(_QWORD *)(a2 + 8));
      }
      break;
    case 5:
    case 6:
      v11 = (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      v12 = *v11;
      if (!*v11
        || (v13 = v11[1],
            *(_QWORD *)&v16 = *v11,
            *((_QWORD *)&v16 + 1) = v13,
            v17 = 5,
            v18 = v16,
            result = sub_22F3BE830((uint64_t)a1, v12, v13, (uint64_t)&v17, a1, (uint64_t *)&v16, *a1 + 24),
            (_DWORD)result))
      {
        result = sub_22F3C01BC((uint64_t)a1, *(_QWORD *)(a2 + 8));
      }
      break;
    case 7:
      result = sub_22EFEF038((uint64_t)a1, *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL, 0);
      break;
    case 8:
      v6 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(a2 + 8);
        v8 = v6 - 1;
        do
        {
          result = sub_22F3C00F0((uint64_t)a1, v7);
          v10 = v8-- != 0;
          if (!(_DWORD)result)
            break;
          v7 += 24;
        }
        while (v10);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22EFF38CC(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *n;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *k;
  uint64_t v37;
  uint64_t v38;
  _QWORD *m;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *i;
  uint64_t v68;
  uint64_t v69;
  _QWORD *j;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *mm;
  uint64_t v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t *v102;
  _QWORD *v103;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *nn;
  uint64_t v112;
  uint64_t v113;
  _QWORD *i1;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *kk;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *jj;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *ii;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *i2;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  __int128 v214;
  uint64_t v215;
  __int128 v216;
  uint64_t *v217;
  __int128 v218;
  uint64_t v219;

  v219 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 1;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 3:
      return (sub_22F3C0380((uint64_t)a1, a2) & 1) != 0;
    case 4:
    case 7:
    case 0xC:
    case 0x13:
    case 0x15:
    case 0x23:
    case 0x3C:
    case 0x3D:
    case 0x46:
    case 0x4B:
      v5 = *(_QWORD *)(a2 + 16);
      return (sub_22EFEF038(a1, v5) & 1) != 0;
    case 5:
      v89 = (_QWORD *)(a2 + 24);
      result = sub_22EFEF038(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)));
      if (!(_DWORD)result)
        return result;
      v90 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v90)
        return 1;
      v91 = 8 * v90;
      while ((sub_22EFEF038(a1, *v89) & 1) != 0)
      {
        ++v89;
        v91 -= 8;
        if (!v91)
          return 1;
      }
      return 0;
    case 6:
      result = sub_22EFEF038(a1, *(_QWORD *)(a2 + 24));
      if (!(_DWORD)result)
        return result;
      v49 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v49)
        return 1;
      v50 = (_QWORD *)(a2 + 40);
      v51 = 8 * v49;
      while ((sub_22EFEF038(a1, *v50) & 1) != 0)
      {
        ++v50;
        v51 -= 8;
        if (!v51)
          return 1;
      }
      return 0;
    case 0xE:
      v64 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v64)
        return 1;
      v65 = a2 + 24;
      v66 = 8 * v64;
      for (i = (_QWORD *)(a2 + 24); (sub_22EFEF038(a1, *i) & 1) != 0; ++i)
      {
        v66 -= 8;
        if (!v66)
        {
          v68 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v68)
            return 1;
          v69 = 8 * v68;
          for (j = (_QWORD *)(v65 + 8 * v68); (sub_22EFEF038(a1, *j) & 1) != 0; ++j)
          {
            v69 -= 8;
            if (!v69)
            {
              v71 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v71)
                return 1;
              v72 = (_QWORD *)(v65 + 8 * v71 + 8 * v71);
              v73 = 8 * v71;
              while ((sub_22EFEF038(a1, *v72) & 1) != 0)
              {
                ++v72;
                v73 -= 8;
                if (!v73)
                {
                  v74 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v74)
                    return 1;
                  v75 = (_QWORD *)(v65 + 8 * v74 + 8 * v74 + 8 * v74);
                  v76 = 8 * v74;
                  while ((sub_22EFEF038(a1, *v75) & 1) != 0)
                  {
                    ++v75;
                    v76 -= 8;
                    if (!v76)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0xF:
      v33 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v33)
        return 1;
      v34 = a2 + 24;
      v35 = 8 * v33;
      for (k = (_QWORD *)(a2 + 24); (sub_22EFEF038(a1, *k) & 1) != 0; ++k)
      {
        v35 -= 8;
        if (!v35)
        {
          v37 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v37)
            return 1;
          v38 = 8 * v37;
          for (m = (_QWORD *)(v34 + 8 * v37); (sub_22EFEF038(a1, *m) & 1) != 0; ++m)
          {
            v38 -= 8;
            if (!v38)
            {
              v40 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v40)
                return 1;
              v41 = (_QWORD *)(v34 + 8 * v40 + 8 * v40);
              v42 = 8 * v40;
              while ((sub_22EFEF038(a1, *v41) & 1) != 0)
              {
                ++v41;
                v42 -= 8;
                if (!v42)
                {
                  v43 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v43)
                    return 1;
                  v44 = (_QWORD *)(v34 + 8 * v43 + 8 * v43 + 8 * v43);
                  v45 = 8 * v43;
                  while ((sub_22EFEF038(a1, *v44) & 1) != 0)
                  {
                    ++v44;
                    v45 -= 8;
                    if (!v45)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x12:
      v92 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v92)
        return 1;
      v93 = (_QWORD *)(a2 + 40);
      v94 = 8 * v92;
      while ((sub_22EFEF038(a1, *v93) & 1) != 0)
      {
        ++v93;
        v94 -= 8;
        if (!v94)
          return 1;
      }
      return 0;
    case 0x14:
    case 0x58:
      v5 = *(_QWORD *)(a2 + 24);
      return (sub_22EFEF038(a1, v5) & 1) != 0;
    case 0x16:
      result = sub_22EFEF038(a1, *(_QWORD *)(a2 + 16));
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 40);
      return (sub_22EFEF038(a1, v5) & 1) != 0;
    case 0x18:
      result = sub_22EFEF038(a1, *(_QWORD *)(a2 + 16));
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 48);
      return (sub_22EFEF038(a1, v5) & 1) != 0;
    case 0x1A:
      v105 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v105)
        return 1;
      v106 = (_QWORD *)(a2 + 24);
      v107 = 8 * v105;
      while ((sub_22EFEF038(a1, *v106) & 1) != 0)
      {
        ++v106;
        v107 -= 8;
        if (!v107)
          return 1;
      }
      return 0;
    case 0x1B:
    case 0x1C:
    case 0x21:
    case 0x24:
    case 0x34:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3E:
    case 0x4E:
      result = sub_22EFEF038(a1, *(_QWORD *)(a2 + 16));
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 32);
      return (sub_22EFEF038(a1, v5) & 1) != 0;
    case 0x1D:
      v17 = a2 + 40;
      v18 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v18)
        goto LABEL_27;
      v19 = 8 * v18;
      v20 = (_QWORD *)(a2 + 40);
      while ((sub_22EFEF038(a1, *v20) & 1) != 0)
      {
        ++v20;
        v19 -= 8;
        if (!v19)
        {
LABEL_27:
          result = sub_22EFEF038(a1, *(_QWORD *)(a2 + 24));
          if (!(_DWORD)result)
            return result;
          v21 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v21)
          {
            v22 = 8 * v21;
            for (n = (_QWORD *)(v17 + 8 * v21); (sub_22EFEF038(a1, *n) & 1) != 0; ++n)
            {
              v22 -= 8;
              if (!v22)
              {
                v24 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v24)
                  return 1;
                v25 = (_QWORD *)(v17 + 8 * v24 + 8 * v24);
                v26 = 8 * v24;
                while ((sub_22EFEF038(a1, *v25) & 1) != 0)
                {
                  ++v25;
                  v26 -= 8;
                  if (!v26)
                    return 1;
                }
                return 0;
              }
            }
            return 0;
          }
          return 1;
        }
      }
      return 0;
    case 0x1E:
      v55 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v55)
        return 1;
      v56 = (_QWORD *)(a2 + 24);
      v57 = 8 * v55;
      while ((sub_22EFEF038(a1, *v56) & 1) != 0)
      {
        ++v56;
        v57 -= 8;
        if (!v57)
          return 1;
      }
      return 0;
    case 0x1F:
      v80 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v80)
        return 1;
      v81 = (_QWORD *)(a2 + 104);
      v82 = 8 * v80;
      while ((sub_22EFEF038(a1, *v81) & 1) != 0)
      {
        ++v81;
        v82 -= 8;
        if (!v82)
          return 1;
      }
      return 0;
    case 0x22:
      v61 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v61)
        return 1;
      v62 = (_QWORD *)(a2 + 80);
      v63 = 8 * v61;
      while ((sub_22EFEF038(a1, *v62) & 1) != 0)
      {
        ++v62;
        v63 -= 8;
        if (!v63)
          return 1;
      }
      return 0;
    case 0x25:
      v148 = *(_QWORD *)(a2 + 56);
      v149 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)&v216 = *(_QWORD *)(a2 + 56);
      *((_QWORD *)&v216 + 1) = v149;
      LODWORD(v217) = 5;
      v218 = v216;
      if (!sub_22F3BE830((uint64_t)a1, v148, v149, (uint64_t)&v217, a1, (uint64_t *)&v216, *a1 + 24))
        return 0;
      v214 = *(_OWORD *)(a2 + 72);
      v215 = *(_QWORD *)(a2 + 88);
      if (!sub_22EFF25B0(a1, (uint64_t *)&v214))
        return 0;
      v150 = a2 + 96;
      v151 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v151)
        goto LABEL_239;
      v152 = 8 * v151;
      v153 = (_QWORD *)(a2 + 96);
      while ((sub_22EFEF038(a1, *v153) & 1) != 0)
      {
        ++v153;
        v152 -= 8;
        if (!v152)
        {
LABEL_239:
          if (sub_22EFEF038(a1, *(_QWORD *)(a2 + 24))
            && sub_22EFEF038(a1, *(_QWORD *)(a2 + 40)))
          {
            v154 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v154)
              return 1;
            v155 = 8 * v154;
            for (ii = (_QWORD *)(v150 + 8 * v154); (sub_22EFEF038(a1, *ii) & 1) != 0; ++ii)
            {
              v155 -= 8;
              if (!v155)
              {
                v157 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v157)
                  return 1;
                v158 = (_QWORD *)(v150 + 8 * v157 + 8 * v157);
                v159 = 8 * v157;
                while ((sub_22EFEF038(a1, *v158) & 1) != 0)
                {
                  ++v158;
                  v159 -= 8;
                  if (!v159)
                  {
                    v160 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v160)
                      return 1;
                    v161 = (_QWORD *)(v150 + 8 * v160 + 8 * v160 + 8 * v160);
                    v162 = 8 * v160;
                    while ((sub_22EFEF038(a1, *v161) & 1) != 0)
                    {
                      ++v161;
                      v162 -= 8;
                      if (!v162)
                      {
                        v163 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v163)
                          return 1;
                        v164 = (_QWORD *)(v150 + 8 * v163 + 8 * v163 + 8 * v163 + 8 * v163);
                        v165 = 8 * v163;
                        while ((sub_22EFEF038(a1, *v164) & 1) != 0)
                        {
                          ++v164;
                          v165 -= 8;
                          if (!v165)
                          {
                            v166 = *(unsigned int *)(a2 + 16);
                            if (!(_DWORD)v166)
                              return 1;
                            v167 = (_QWORD *)(v150 + 8 * v166 + 8 * v166 + 8 * v166 + 8 * v166 + 8 * v166);
                            v168 = 8 * v166;
                            while ((sub_22EFEF038(a1, *v167) & 1) != 0)
                            {
                              ++v167;
                              v168 -= 8;
                              if (!v168)
                                return 1;
                            }
                            return 0;
                          }
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x27:
      v27 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v27)
        return 1;
      v28 = (_QWORD *)(a2 + 24);
      v29 = 8 * v27;
      while ((sub_22EFEF038(a1, *v28) & 1) != 0)
      {
        ++v28;
        v29 -= 8;
        if (!v29)
          return 1;
      }
      return 0;
    case 0x29:
      v83 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v83)
        return 1;
      v84 = (_QWORD *)(a2 + 32);
      v85 = 8 * v83;
      while ((sub_22EFEF038(a1, *v84) & 1) != 0)
      {
        ++v84;
        v85 -= 8;
        if (!v85)
          return 1;
      }
      return 0;
    case 0x2A:
      v30 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v30)
        return 1;
      v31 = (_QWORD *)(a2 + 80);
      v32 = 8 * v30;
      while ((sub_22EFEF038(a1, *v31) & 1) != 0)
      {
        ++v31;
        v32 -= 8;
        if (!v32)
          return 1;
      }
      return 0;
    case 0x2B:
      v132 = a2 + 64;
      v133 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v133)
        goto LABEL_214;
      v134 = 8 * v133;
      v135 = (_QWORD *)(a2 + 64);
      while ((sub_22EFEF038(a1, *v135) & 1) != 0)
      {
        ++v135;
        v134 -= 8;
        if (!v134)
        {
LABEL_214:
          result = sub_22EFEF038(a1, *(_QWORD *)(a2 + 24));
          if (!(_DWORD)result)
            return result;
          result = sub_22EFEF038(a1, *(_QWORD *)(a2 + 40));
          if (!(_DWORD)result)
            return result;
          v136 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v136)
            return 1;
          v137 = 8 * v136;
          for (jj = (_QWORD *)(v132 + 8 * v136); (sub_22EFEF038(a1, *jj) & 1) != 0; ++jj)
          {
            v137 -= 8;
            if (!v137)
            {
              v139 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v139)
                return 1;
              v140 = (_QWORD *)(v132 + 8 * v139 + 8 * v139);
              v141 = 8 * v139;
              while ((sub_22EFEF038(a1, *v140) & 1) != 0)
              {
                ++v140;
                v141 -= 8;
                if (!v141)
                {
                  v142 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v142)
                    return 1;
                  v143 = (_QWORD *)(v132 + 8 * v142 + 8 * v142 + 8 * v142);
                  v144 = 8 * v142;
                  while ((sub_22EFEF038(a1, *v143) & 1) != 0)
                  {
                    ++v143;
                    v144 -= 8;
                    if (!v144)
                    {
                      v145 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v145)
                        return 1;
                      v146 = (_QWORD *)(v132 + 8 * v145 + 8 * v145 + 8 * v145 + 8 * v145);
                      v147 = 8 * v145;
                      while ((sub_22EFEF038(a1, *v146) & 1) != 0)
                      {
                        ++v146;
                        v147 -= 8;
                        if (!v147)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2C:
      v115 = a2 + 64;
      v116 = *(unsigned int *)(a2 + 16);
      result = sub_22EFEF038(a1, *(_QWORD *)(a2 + 64 + 8 * v116 + 8 * v116 + 8 * v116 + 8 * v116 + 8 * v116));
      if (!(_DWORD)result)
        return result;
      result = sub_22EFEF038(a1, *(_QWORD *)(v115+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8));
      if (!(_DWORD)result)
        return result;
      v117 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v117)
        goto LABEL_191;
      v118 = 8 * v117;
      v119 = (_QWORD *)(a2 + 64);
      while ((sub_22EFEF038(a1, *v119) & 1) != 0)
      {
        ++v119;
        v118 -= 8;
        if (!v118)
        {
LABEL_191:
          result = sub_22EFEF038(a1, *(_QWORD *)(a2 + 24));
          if (!(_DWORD)result)
            return result;
          result = sub_22EFEF038(a1, *(_QWORD *)(a2 + 40));
          if (!(_DWORD)result)
            return result;
          v120 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v120)
            return 1;
          v121 = 8 * v120;
          for (kk = (_QWORD *)(v115 + 8 * v120); (sub_22EFEF038(a1, *kk) & 1) != 0; ++kk)
          {
            v121 -= 8;
            if (!v121)
            {
              v123 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v123)
                return 1;
              v124 = (_QWORD *)(v115 + 8 * v123 + 8 * v123);
              v125 = 8 * v123;
              while ((sub_22EFEF038(a1, *v124) & 1) != 0)
              {
                ++v124;
                v125 -= 8;
                if (!v125)
                {
                  v126 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v126)
                    return 1;
                  v127 = (_QWORD *)(v115 + 8 * v126 + 8 * v126 + 8 * v126);
                  v128 = 8 * v126;
                  while ((sub_22EFEF038(a1, *v127) & 1) != 0)
                  {
                    ++v127;
                    v128 -= 8;
                    if (!v128)
                    {
                      v129 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v129)
                        return 1;
                      v130 = (_QWORD *)(v115 + 8 * v129 + 8 * v129 + 8 * v129 + 8 * v129);
                      v131 = 8 * v129;
                      while ((sub_22EFEF038(a1, *v130) & 1) != 0)
                      {
                        ++v130;
                        v131 -= 8;
                        if (!v131)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2E:
      v77 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v77)
        return 1;
      v78 = (_QWORD *)(a2 + 136);
      v79 = 8 * v77;
      while ((sub_22EFEF038(a1, *v78) & 1) != 0)
      {
        ++v78;
        v79 -= 8;
        if (!v79)
          return 1;
      }
      return 0;
    case 0x35:
      v95 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v95)
        return 1;
      v96 = a2 + 24;
      v97 = 8 * v95;
      for (mm = (_QWORD *)(a2 + 24); (sub_22EFEF038(a1, *mm) & 1) != 0; ++mm)
      {
        v97 -= 8;
        if (!v97)
        {
          v99 = *(unsigned int *)(a2 + 16);
          v100 = (uint64_t *)(v96 + 8 * v99);
          v217 = v100;
          *(_QWORD *)&v218 = 0;
          if ((_DWORD)v99)
          {
            v101 = 0;
            v102 = &v100[v99];
            while (1)
            {
              if ((v101 & 3) != 0)
              {
                if ((v101 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                  v103 = (_QWORD *)((v101 & 0xFFFFFFFFFFFFFFFCLL) + 40);
                else
                  v103 = (_QWORD *)sub_22F3AC1A8(*v100);
                if ((sub_22EFEF038(a1, *v103) & 1) == 0)
                  return 0;
                if (v101 < 4)
                  sub_22F3F2FE0((uint64_t)&v217, 1);
                else
                  sub_22F0D8720((uint64_t)&v217);
              }
              else
              {
                if (!sub_22EFEF038(a1, *v100))
                  return 0;
                v217 = v100 + 1;
              }
              v100 = v217;
              v101 = v218;
              if (v217 == v102 && (_QWORD)v218 == 0)
                return 1;
            }
          }
          return 1;
        }
      }
      return 0;
    case 0x3F:
      v108 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v108)
        return 1;
      v109 = a2 + 24;
      v110 = 8 * v108;
      for (nn = (_QWORD *)(a2 + 24); (sub_22EFEF038(a1, *nn) & 1) != 0; ++nn)
      {
        v110 -= 8;
        if (!v110)
        {
          v112 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v112)
            return 1;
          v113 = 8 * v112;
          for (i1 = (_QWORD *)(v109 + 8 * v112); (sub_22EFEF038(a1, *i1) & 1) != 0; ++i1)
          {
            v113 -= 8;
            if (!v113)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 0x42:
      v187 = *(_QWORD *)(a2 + 64);
      v188 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)&v216 = *(_QWORD *)(a2 + 64);
      *((_QWORD *)&v216 + 1) = v188;
      LODWORD(v217) = 5;
      v218 = v216;
      if (!sub_22F3BE830((uint64_t)a1, v187, v188, (uint64_t)&v217, a1, (uint64_t *)&v216, *a1 + 24))
        return 0;
      v214 = *(_OWORD *)(a2 + 80);
      v215 = *(_QWORD *)(a2 + 96);
      if (!sub_22EFF25B0(a1, (uint64_t *)&v214))
        return 0;
      v189 = a2 + 104;
      v190 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v190)
        goto LABEL_295;
      v191 = 8 * v190;
      v192 = (_QWORD *)(a2 + 104);
      while ((sub_22EFEF038(a1, *v192) & 1) != 0)
      {
        ++v192;
        v191 -= 8;
        if (!v191)
        {
LABEL_295:
          if (sub_22EFEF038(a1, *(_QWORD *)(a2 + 24))
            && sub_22EFEF038(a1, *(_QWORD *)(a2 + 40)))
          {
            v193 = *(unsigned int *)(a2 + 16);
            if ((_DWORD)v193)
            {
              v194 = 8 * v193;
              v195 = (_QWORD *)(v189 + 8 * v193);
              while ((sub_22EFEF038(a1, *v195) & 1) != 0)
              {
                ++v195;
                v194 -= 8;
                if (!v194)
                {
                  v196 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v196)
                    goto LABEL_313;
                  v197 = (_QWORD *)(v189 + 8 * v196 + 8 * v196);
                  v198 = 8 * v196;
                  while ((sub_22EFEF038(a1, *v197) & 1) != 0)
                  {
                    ++v197;
                    v198 -= 8;
                    if (!v198)
                    {
                      v199 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v199)
                        goto LABEL_313;
                      v200 = (_QWORD *)(v189 + 8 * v199 + 8 * v199 + 8 * v199);
                      v201 = 8 * v199;
                      while ((sub_22EFEF038(a1, *v200) & 1) != 0)
                      {
                        ++v200;
                        v201 -= 8;
                        if (!v201)
                        {
                          v202 = *(unsigned int *)(a2 + 16);
                          if (!(_DWORD)v202)
                            goto LABEL_313;
                          v203 = (_QWORD *)(v189 + 8 * v202 + 8 * v202 + 8 * v202 + 8 * v202);
                          v204 = 8 * v202;
                          while ((sub_22EFEF038(a1, *v203) & 1) != 0)
                          {
                            ++v203;
                            v204 -= 8;
                            if (!v204)
                              goto LABEL_313;
                          }
                          return 0;
                        }
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
            else
            {
LABEL_313:
              if (*(_DWORD *)(a2 + 48) != 1)
                return 1;
              v205 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v205)
                return 1;
              v206 = (_QWORD *)(v189 + 8 * v205 + 8 * v205 + 8 * v205 + 8 * v205 + 8 * v205);
              v207 = 8 * v205;
              while ((sub_22EFEF038(a1, *v206) & 1) != 0)
              {
                ++v206;
                v207 -= 8;
                if (!v207)
                {
                  v208 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v208)
                    return 1;
                  v209 = (_QWORD *)(v189 + 8 * v208 + 8 * v208 + 8 * v208 + 8 * v208 + 8 * v208 + 8 * v208);
                  v210 = 8 * v208;
                  while ((sub_22EFEF038(a1, *v209) & 1) != 0)
                  {
                    ++v209;
                    v210 -= 8;
                    if (!v210)
                    {
                      v211 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v211)
                        return 1;
                      v212 = (_QWORD *)(v189 + 8 * v211 + 8 * v211 + 8 * v211 + 8 * v211 + 8 * v211 + 8 * v211 + 8 * v211);
                      v213 = 8 * v211;
                      while ((sub_22EFEF038(a1, *v212) & 1) != 0)
                      {
                        ++v212;
                        v213 -= 8;
                        if (!v213)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x47:
      result = sub_22EFEF038(a1, *(_QWORD *)(a2 + 16));
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 64);
      return (sub_22EFEF038(a1, v5) & 1) != 0;
    case 0x49:
      v46 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v46)
        return 1;
      v47 = (_QWORD *)(a2 + 24);
      v48 = 8 * v46;
      while ((sub_22EFEF038(a1, *v47) & 1) != 0)
      {
        ++v47;
        v48 -= 8;
        if (!v48)
          return 1;
      }
      return 0;
    case 0x4C:
      v86 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v86)
        return 1;
      v87 = (_QWORD *)(a2 + 24);
      v88 = 8 * v86;
      while ((sub_22EFEF038(a1, *v87) & 1) != 0)
      {
        ++v87;
        v88 -= 8;
        if (!v88)
          return 1;
      }
      return 0;
    case 0x4D:
      v169 = *(_QWORD *)(a2 + 56);
      v170 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)&v216 = *(_QWORD *)(a2 + 56);
      *((_QWORD *)&v216 + 1) = v170;
      LODWORD(v217) = 5;
      v218 = v216;
      if (!sub_22F3BE830((uint64_t)a1, v169, v170, (uint64_t)&v217, a1, (uint64_t *)&v216, *a1 + 24))
        return 0;
      v214 = *(_OWORD *)(a2 + 72);
      v215 = *(_QWORD *)(a2 + 88);
      if (!sub_22EFF25B0(a1, (uint64_t *)&v214))
        return 0;
      v171 = a2 + 96;
      v172 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v172)
        goto LABEL_268;
      v173 = 8 * v172;
      v174 = (_QWORD *)(a2 + 96);
      while ((sub_22EFEF038(a1, *v174) & 1) != 0)
      {
        ++v174;
        v173 -= 8;
        if (!v173)
        {
LABEL_268:
          if (sub_22EFEF038(a1, *(_QWORD *)(a2 + 24))
            && sub_22EFEF038(a1, *(_QWORD *)(a2 + 40)))
          {
            v175 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v175)
              return 1;
            v176 = 8 * v175;
            for (i2 = (_QWORD *)(v171 + 8 * v175); (sub_22EFEF038(a1, *i2) & 1) != 0; ++i2)
            {
              v176 -= 8;
              if (!v176)
              {
                v178 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v178)
                  return 1;
                v179 = (_QWORD *)(v171 + 8 * v178 + 8 * v178);
                v180 = 8 * v178;
                while ((sub_22EFEF038(a1, *v179) & 1) != 0)
                {
                  ++v179;
                  v180 -= 8;
                  if (!v180)
                  {
                    v181 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v181)
                      return 1;
                    v182 = (_QWORD *)(v171 + 8 * v181 + 8 * v181 + 8 * v181);
                    v183 = 8 * v181;
                    while ((sub_22EFEF038(a1, *v182) & 1) != 0)
                    {
                      ++v182;
                      v183 -= 8;
                      if (!v183)
                      {
                        v184 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v184)
                          return 1;
                        v185 = (_QWORD *)(v171 + 8 * v184 + 8 * v184 + 8 * v184 + 8 * v184);
                        v186 = 8 * v184;
                        while ((sub_22EFEF038(a1, *v185) & 1) != 0)
                        {
                          ++v185;
                          v186 -= 8;
                          if (!v186)
                            return 1;
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x51:
      v58 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v58)
        return 1;
      v59 = (_QWORD *)(a2 + 104);
      v60 = 8 * v58;
      while ((sub_22EFEF038(a1, *v59) & 1) != 0)
      {
        ++v59;
        v60 -= 8;
        if (!v60)
          return 1;
      }
      return 0;
    case 0x59:
      v52 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v52)
        return 1;
      v53 = (_QWORD *)(a2 + 80);
      v54 = 8 * v52;
      while ((sub_22EFEF038(a1, *v53) & 1) != 0)
      {
        ++v53;
        v54 -= 8;
        if (!v54)
          return 1;
      }
      return 0;
    case 0x5A:
      v6 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v6)
        return 1;
      v7 = (_QWORD *)(a2 + 80);
      v8 = 8 * v6;
      break;
    case 0x5B:
      v9 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v9)
        return 1;
      v11 = *(_QWORD *)(a2 + 32);
      v10 = a2 + 24;
      result = sub_22EFEF038(a1, *(_QWORD *)(a2 + 24));
      if (!(_DWORD)result)
        return result;
      result = sub_22EFEF038(a1, v11);
      if (!(_DWORD)result)
        return result;
      v12 = 3;
      v13 = 1;
      do
      {
        v14 = v13;
        if (v9 == v13)
          break;
        v15 = *(_QWORD *)(v10 + 8 * v12);
        if (!sub_22EFEF038(a1, *(_QWORD *)(v10 + 8 * (v12 - 1))))
          break;
        v16 = sub_22EFEF038(a1, v15);
        v13 = v14 + 1;
        v12 += 2;
      }
      while ((v16 & 1) != 0);
      return v14 >= v9;
    default:
      return 1;
  }
  while ((sub_22EFEF038(a1, *v7) & 1) != 0)
  {
    ++v7;
    v8 -= 8;
    if (!v8)
      return 1;
  }
  return 0;
}

uint64_t sub_22EFF4A18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;

  if (!a2)
    return 1;
  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  if (v3 == v2)
    v4 = 0;
  else
    v4 = *(uint64_t **)(a2 + 24);
  if (v3 == v2)
    v5 = 0;
  else
    v5 = *(uint64_t **)(a2 + 16);
  v12 = 0;
  v13 = 0;
  v11 = v5;
  if (v5 == v4)
    return 1;
  v7 = 0;
  while (1)
  {
    if ((v7 & 3) == 0)
    {
      result = sub_22EFEF038(a1, *v5);
      if (!(_DWORD)result)
        return result;
      v11 = v5 + 1;
      goto LABEL_18;
    }
    v8 = (_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFCLL) != 0 ? (v7 & 0xFFFFFFFFFFFFFFFCLL) + 40 : sub_22F3AC1A8(*v5));
    if ((sub_22EFEF038(a1, *v8) & 1) == 0)
      return 0;
    if (v7 < 4)
      sub_22F3F2FE0((uint64_t)&v11, 1);
    else
      sub_22F0D8720((uint64_t)&v11);
LABEL_18:
    v5 = v11;
    v7 = v12;
    if (v11 == v4 && v12 == 0)
      return 1;
  }
}

uint64_t sub_22EFF4B10(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;

  if (!a2)
    return 1;
  if ((*(_WORD *)(a2 + 8) & 0x80) != 0)
    sub_22EFCC320(a2);
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 1;
  while (1)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 1 >= 2
      && ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 35 > 2
       || (v5 = *(_QWORD *)(v4 + 128)) == 0
       || ((*(unsigned __int16 *)(v5 + 8) | (*(unsigned __int8 *)(v5 + 10) << 16)) & 0x100000) == 0))
    {
      v7 = v4;
      result = sub_22F3BAC7C(a1, v4, v4, a1, &v7, *a1);
      if (!(_DWORD)result)
        break;
    }
    v4 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v4)
      return 1;
  }
  return result;
}

uint64_t sub_22EFF4BD0(uint64_t a1, uint64_t a2)
{
  if (a2)
    __asm { BR              X10 }
  return 1;
}

uint64_t sub_22EFF5064(_QWORD *a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;

  sub_22EFE95D4(a2);
  v4 = *(uint64_t **)(sub_22EFE9368(a2) + 32);
  sub_22EFE95D4(a2);
  v5 = sub_22EFE9368(a2);
  v6 = *(_QWORD *)(v5 + 32) + 8 * *(unsigned int *)(v5 + 40);
  while (1)
  {
    if (v4 == (uint64_t *)v6)
      return 1;
    v7 = sub_22E6939D8(*v4);
    if (v7)
      break;
LABEL_14:
    ++v4;
  }
  v8 = v7;
  v9 = 0;
  v10 = v7;
  while (1)
  {
    if ((*(_BYTE *)(v10 + 180) & 6) == 0)
    {
      v13 = v10;
      result = sub_22F3BAC7C(a1, v10, v10, a1, &v13, *a1);
      if (!(_DWORD)result)
        return result;
    }
    if ((*(_BYTE *)(v10 + 96) & 3) != 0)
    {
      if (v9)
        goto LABEL_14;
      v9 = 1;
    }
    v11 = sub_22E3CD31C((uint64_t *)(v10 + 96), v10);
    if (v11 != v8)
    {
      v10 = v11;
      if (v11)
        continue;
    }
    goto LABEL_14;
  }
}

uint64_t sub_22EFF5160(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;

  sub_22EFE95D4(a2);
  v4 = *(_QWORD *)(sub_22EFE9368(a2) + 32);
  sub_22EFE95D4(a2);
  v5 = sub_22EFE9368(a2);
  v6 = *(_QWORD *)(v5 + 32) + 8 * *(unsigned int *)(v5 + 40);
  while (v4 != v6)
  {
    v7 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)v4 + 8) & 0xFFFFFFFFFFFFFFF8) + 112);
    v8 = sub_22E3CD31C((uint64_t *)(v7 + 104), v7);
    if (v8)
    {
      v9 = v8;
      v10 = 0;
      v11 = v8;
      while (1)
      {
        v12 = *(_QWORD *)(v11 + 144) & 6;
        v13 = (_DWORD *)(*(_QWORD *)(v11 + 144) & 0xFFFFFFFFFFFFFFF8);
        if (v12 != 4 || v13 == 0)
        {
          if (v12 != 2 || v13 == 0)
            goto LABEL_15;
        }
        else
        {
          v13 += 4;
        }
        v16 = (*v13 >> 1) & 3;
        if ((v16 - 2) < 2)
        {
          v19 = v11;
          result = sub_22F3BAC7C(a1, v11, v11, a1, &v19, *a1);
          if (!(_DWORD)result)
            return result;
          goto LABEL_19;
        }
        if (!v16)
        {
LABEL_15:
          v19 = v11;
          if ((sub_22F3BAC7C(a1, v11, v11, a1, &v19, *a1) & 1) == 0)
            return 0;
        }
LABEL_19:
        if ((*(_BYTE *)(v11 + 104) & 3) != 0)
        {
          if (v10)
            break;
          v10 = 1;
        }
        v17 = sub_22E3CD31C((uint64_t *)(v11 + 104), v11);
        if (v17 != v9)
        {
          v11 = v17;
          if (v17)
            continue;
        }
        break;
      }
    }
    v4 += 8;
  }
  return 1;
}

uint64_t sub_22EFF52D0(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;

  sub_22EFE95D4(a2);
  v4 = *(_QWORD *)(sub_22EFE9368(a2) + 32);
  sub_22EFE95D4(a2);
  v5 = sub_22EFE9368(a2);
  v6 = *(_QWORD *)(v5 + 32) + 8 * *(unsigned int *)(v5 + 40);
  while (1)
  {
    if (v4 == v6)
      return 1;
    v7 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)v4 + 80) + 72), *(_QWORD *)(*(_QWORD *)v4 + 80));
    if (v7)
      break;
LABEL_14:
    v4 += 8;
  }
  v8 = v7;
  v9 = 0;
  v10 = v7;
  while (1)
  {
    if ((*(_BYTE *)(v10 + 420) & 6) == 0)
    {
      v13 = v10;
      result = sub_22F3BAC7C(a1, v10, v10, a1, &v13, *a1);
      if (!(_DWORD)result)
        return result;
    }
    if ((*(_BYTE *)(v10 + 72) & 3) != 0)
    {
      if (v9)
        goto LABEL_14;
      v9 = 1;
    }
    v11 = sub_22E3CD31C((uint64_t *)(v10 + 72), v10);
    if (v11 != v8)
    {
      v10 = v11;
      if (v11)
        continue;
    }
    goto LABEL_14;
  }
}

uint64_t sub_22EFF53D4(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD **v25;
  unint64_t v26;
  _BOOL4 v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  unint64_t v46;
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22F3C0484(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  *(_QWORD *)&v45 = v7;
  *((_QWORD *)&v45 + 1) = v8;
  LODWORD(v46) = 5;
  v47 = v45;
  result = sub_22F3BE830((uint64_t)a1, v7, v8, (uint64_t)&v46, a1, (uint64_t *)&v45, *a1 + 24);
  if ((_DWORD)result)
  {
    v10 = *(_DWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 152);
    v42 = *(_QWORD *)(a2 + 40);
    v43 = v10;
    v44 = v11;
    result = sub_22EFF25B0(a1, &v42);
    if ((_DWORD)result)
    {
      if ((*(_QWORD *)(a2 + 144) & 6) == 4)
      {
        v12 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
        if (v12)
        {
          if ((*(_BYTE *)(v12 + 16) & 6) != 0)
          {
            v13 = *(_QWORD *)(v12 + 32);
            if (v13)
            {
              v14 = *(unsigned int *)(v13 + 8);
              if ((_DWORD)v14)
              {
                v15 = v13 + 16;
                while ((sub_22EFF36F8(a1, v15) & 1) != 0)
                {
                  v15 += 32;
                  if (!--v14)
                    goto LABEL_17;
                }
                return 0;
              }
            }
          }
        }
      }
LABEL_17:
      v16 = *(_QWORD *)(a2 + 56);
      v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF8);
      if ((v16 & 4) != 0)
        v17 = (uint64_t *)v17[4];
      if (v17)
      {
        v31 = *v17;
        v30 = (uint64_t)(v17 + 1);
        *(_QWORD *)&v45 = v31;
        *((_QWORD *)&v45 + 1) = v30;
        LODWORD(v46) = sub_22F37A024(&v45);
        v47 = v45;
        if ((sub_22F3BEEB4((uint64_t)a1, v31, v30, (uint64_t)&v46, a1, (uint64_t)&v45, *a1 + 24) & 1) == 0)
          return 0;
      }
      else
      {
        v18 = *(unint64_t **)(a2 + 120);
        v19 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v19)
          v20 = *(_BYTE *)(v19 + 16) == 26;
        else
          v20 = 0;
        if (v20
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
          && (v19 = sub_22F10CF48(v19)) != 0)
        {
          v21 = *(_QWORD *)(v19 + 16);
          if ((v21 & 0x3FFFC000000000) != 0)
          {
            v22 = 8 * (unsigned __int16)(v21 >> 38);
            do
            {
              v46 = *v18;
              if ((sub_22F3BAC7C(a1, v46, v46, a1, &v46, *a1) & 1) == 0)
                return 0;
              ++v18;
              v22 -= 8;
            }
            while (v22);
          }
        }
      }
      v23 = *(_QWORD *)(a2 + 56);
      if ((v23 & 4) == 0
        || (v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFF8) + 40)) == 0
        || (result = sub_22EFEF038((uint64_t)a1, v24, 0), (_DWORD)result))
      {
        if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x37)
        {
          v25 = (_QWORD **)sub_22EFD7ED0(a2);
          v26 = sub_22EFD7ED0(a2) + 8 * ((*(_QWORD *)(a2 + 80) >> 40) & 0x1FFFFFLL);
          while (v25 != (_QWORD **)v26)
          {
            if ((sub_22F3C0D1C(a1, *v25) & 1) == 0)
              return 0;
            ++v25;
          }
        }
        v27 = sub_22E49F868(a2);
        if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
          goto LABEL_66;
        v28 = *(_WORD *)(a2 + 80) & 0x7F;
        v29 = -40;
        if (v28 > 0x46)
        {
          if (v28 == 83)
            goto LABEL_56;
          if (v28 == 71)
          {
            v29 = -56;
            goto LABEL_56;
          }
          if (v28 != 81)
          {
LABEL_51:
            v32 = v28 - 52;
            v33 = v28 - 33 >= 5;
            v34 = -48;
            if (!v33)
              v34 = -64;
            if (v32 >= 6)
              v29 = v34;
            else
              v29 = -72;
          }
        }
        else
        {
          if (v28 > 0x18)
            goto LABEL_50;
          if (v28 == 16)
          {
LABEL_41:
            v29 = -48;
            goto LABEL_56;
          }
          if (((1 << v28) & 0x1066) == 0)
          {
            if (v28 == 24)
              goto LABEL_41;
LABEL_50:
            if (v28 == 70)
            {
              v29 = -64;
              goto LABEL_56;
            }
            goto LABEL_51;
          }
        }
LABEL_56:
        v35 = *(_QWORD *)(a2 + 72 + v29 + 16);
        v36 = (_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF8);
        if ((v35 & 4) != 0)
          v36 = (_QWORD *)*v36;
        if (v36)
        {
          v37 = v36[8];
          if (v37)
          {
            if (((*(unsigned __int16 *)(v37 + 8) | (*(unsigned __int8 *)(v37 + 10) << 16)) & 0x100000) != 0)
            {
              v38 = sub_22EFD462C((unint64_t)(v36 - 8));
              if (v38)
              {
                if ((*(_DWORD *)(v38 + 28) & 0x7F) != 0x1D || (v38 = *(_QWORD *)(v38 + 48)) != 0)
                {
                  if (v38 == a2
                    || (v39 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v38 + 32))(v38),
                        v39 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2)))
                  {
                    if (!v27)
                      return 1;
LABEL_67:
                    v40 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
                    result = sub_22EFEF038((uint64_t)a1, v40, 0);
                    if (!(_DWORD)result)
                      return result;
                    if ((*(_WORD *)(a2 + 80) & 0x80) != 0)
                      sub_22EFCC320(a2 + 72);
                    v41 = *(_QWORD *)(a2 + 88);
                    if (v41)
                    {
                      do
                      {
                        if ((*(_DWORD *)(v41 + 28) & 0x7E) == 0x2E)
                        {
                          v46 = v41;
                          result = sub_22F3BAC7C(a1, v41, v41, a1, &v46, *a1);
                          if (!(_DWORD)result)
                            break;
                        }
                        result = 1;
                        v41 = *(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF8;
                      }
                      while (v41);
                      return result;
                    }
                    return 1;
                  }
                }
              }
            }
          }
        }
LABEL_66:
        if (!v27)
          return 1;
        goto LABEL_67;
      }
    }
  }
  return result;
}

unsigned __int8 *sub_22EFF5860(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned __int8 **v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  unsigned __int8 **v11;
  uint64_t v12;

  while (1)
  {
    do
    {
      result = a1;
      v3 = *a1;
      if (v3 > 0xD5)
      {
        if (v3 == 233)
        {
          v3 = *(_DWORD *)a1;
          v4 = *(_DWORD *)a1;
          if ((*(_DWORD *)a1 & 0x7C0000) != 0x300000)
            goto LABEL_17;
          v6 = (unsigned __int8 **)(a1 + 16);
        }
        else
        {
          LOBYTE(v4) = *a1;
          if (v3 != 214)
            goto LABEL_17;
          v6 = (unsigned __int8 **)(a1 + 24);
        }
      }
      else if (v3 == 155)
      {
        if ((**((_DWORD **)a1 + 2) & 0x18000) != 0)
          return result;
        if (a1[48])
          v6 = (unsigned __int8 **)(a1 + 24);
        else
          v6 = (unsigned __int8 **)(a1 + 32);
        LOBYTE(v3) = -101;
      }
      else
      {
        LOBYTE(v4) = *a1;
        if (v3 != 176)
          goto LABEL_17;
        v5 = *((unsigned int *)a1 + 5);
        if ((_DWORD)v5 == -1)
          return result;
        v6 = (unsigned __int8 **)&result[8 * v5 + 40];
        LOBYTE(v3) = -80;
      }
      a1 = *v6;
      LOBYTE(v4) = *a1;
LABEL_17:
      if ((v4 + 102) >= 0xF5u)
      {
        v7 = (*(_DWORD *)a1 >> 18) & 0x7F;
        v8 = v7 > 8;
        v9 = (1 << v7) & 0x1A0;
        if (!v8 && v9 != 0)
          a1 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
      }
    }
    while (a1 != result);
    if ((v3 & 0xFE) == 0x70)
    {
      v3 = *(_DWORD *)result;
      if ((*(_DWORD *)result & 0xFC0000) == 0x800000)
      {
        v11 = (unsigned __int8 **)(result + 24);
        goto LABEL_30;
      }
    }
    if (v3 != 186)
      return result;
    v12 = *((_QWORD *)result + 2);
    a1 = (unsigned __int8 *)(v12 & 0xFFFFFFFFFFFFFFF8);
    if ((v12 & 4) != 0)
    {
      v11 = (unsigned __int8 **)(a1 + 40);
LABEL_30:
      a1 = *v11;
    }
  }
}

unsigned __int8 *sub_22EFF59A4(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  int v21;
  uint64_t v22;
  uint64_t v23;

  while (1)
  {
    while (1)
    {
      if (!a1)
      {
        v6 = 0;
        goto LABEL_26;
      }
      do
      {
        v6 = a1;
        LODWORD(v7) = *a1;
        if (v7 > 0xD5)
        {
          if ((_DWORD)v7 == 233)
          {
            LODWORD(v7) = *(_DWORD *)a1;
            if ((*(_DWORD *)a1 & 0x7C0000) != 0x300000)
              break;
            v8 = a1 + 16;
          }
          else
          {
            if ((_DWORD)v7 != 214)
              break;
            v8 = a1 + 24;
          }
        }
        else if ((_DWORD)v7 == 155)
        {
          if ((**((_DWORD **)a1 + 2) & 0x18000) != 0)
            return v6;
          v8 = a1 + 24;
          if (!a1[48])
            v8 = a1 + 32;
          LOBYTE(v7) = -101;
        }
        else
        {
          if ((_DWORD)v7 != 176)
            break;
          v7 = *((unsigned int *)a1 + 5);
          if ((_DWORD)v7 == -1)
            return v6;
          v8 = &a1[8 * v7 + 40];
          LOBYTE(v7) = -80;
        }
        a1 = *(unsigned __int8 **)v8;
      }
      while (*(unsigned __int8 **)v8 != v6);
      if ((v7 + 102) < 0xF5u)
        break;
LABEL_26:
      if (((*(_DWORD *)v6 >> 18) & 0x7Fu) - 7 <= 1
        && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 45)
      {
        a1 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
        v10 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) & 0xFFFFFFFFFFFFFFF0)
                                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                                      + 24));
        v21 = 0;
        v22 = (uint64_t)v6;
        v23 = v10;
        goto LABEL_45;
      }
      if ((*(_DWORD *)v6 & 0x1FC0000) != 0x140000)
        return v6;
      a1 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
    }
    if (v7 == 188)
      break;
    if ((v7 & 0xFE) != 0x70)
      return v6;
    v11 = (*(_DWORD *)v6 >> 18) & 0x3F;
    if (v11 == 32)
    {
      v15 = *((_QWORD *)v6 + 2);
      v16 = *(unsigned int *)(a2 + 8);
      if (v16 >= *(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = *(unsigned int *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v16) = v15;
      ++*(_DWORD *)(a2 + 8);
      a1 = (unsigned __int8 *)*((_QWORD *)v6 + 3);
    }
    else
    {
      if (v11)
        return v6;
      a1 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
      v12 = *((_QWORD *)v6 + 3);
      v13 = *(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v13)
        v14 = *(_BYTE *)(v13 + 16) == 31;
      else
        v14 = 0;
      if (!v14)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31)
        {
          v13 = sub_22F10CF48(v13);
          v12 = *((_QWORD *)v6 + 3);
        }
        else
        {
          v13 = 0;
        }
      }
      v21 = 2;
      v22 = v13;
      v23 = v12;
LABEL_45:
      v17 = sub_22E5BBF6C(a3, (unint64_t)&v21);
      v18 = *(_QWORD *)a3 + 24 * *(unsigned int *)(a3 + 8);
      v19 = *(_OWORD *)v17;
      *(_QWORD *)(v18 + 16) = *(_QWORD *)(v17 + 16);
      *(_OWORD *)v18 = v19;
      ++*(_DWORD *)(a3 + 8);
    }
  }
  if ((v6[2] & 4) == 0)
  {
    v9 = *((_QWORD *)v6 + 3);
    if (v9)
    {
      if ((*(_DWORD *)(v9 + 28) & 0x7Fu) - 52 >= 0xFFFFFFFD
        && (*(_BYTE *)(v9 + 68) & 1) == 0
        && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFE) != 0x28)
      {
        a1 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
        v21 = 1;
        v22 = v9;
        goto LABEL_45;
      }
    }
  }
  return v6;
}

BOOL sub_22EFF5C90(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned __int8 **v16;
  uint64_t v17;
  unsigned __int8 *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int i;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;

  v3 = 1;
  if (!a1)
    goto LABEL_18;
  do
  {
LABEL_2:
    v4 = a1;
    v5 = *a1;
    if (v5 > 0xD5)
    {
      if (v5 == 233)
      {
        if ((*(_DWORD *)a1 & 0x7C0000) != 0x300000)
          goto LABEL_19;
        v7 = a1 + 16;
      }
      else
      {
        if (v5 != 214)
          goto LABEL_19;
        v7 = a1 + 24;
      }
    }
    else if (v5 == 155)
    {
      if ((**((_DWORD **)a1 + 2) & 0x18000) != 0)
        goto LABEL_19;
      if (a1[48])
        v7 = a1 + 24;
      else
        v7 = a1 + 32;
    }
    else
    {
      if (v5 != 176)
        goto LABEL_19;
      v6 = *((unsigned int *)a1 + 5);
      if ((_DWORD)v6 == -1)
        goto LABEL_19;
      v7 = &a1[8 * v6 + 40];
    }
    a1 = *(unsigned __int8 **)v7;
  }
  while (*(unsigned __int8 **)v7 != v4);
  while (1)
  {
LABEL_19:
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v9 = *(_DWORD *)(v8 + 16);
    if (v8)
      v10 = (v9 & 0xFF800FF) == 87031819;
    else
      v10 = 0;
    if (v10)
      return 1;
    v11 = *(_DWORD *)(v8 + 16);
    if (v11 != 9)
    {
      if (v11 == 44)
      {
        v12 = sub_22F114198(*(_QWORD *)(v8 + 24));
        if ((*(_BYTE *)(v12 + 74) & 1) == 0 && *(_QWORD *)(v12 + 128) < 8uLL)
          return 0;
      }
      else if (v11 != 11 || ((v9 >> 19) & 0x1FE) - 166 >= 0x14)
      {
        return 0;
      }
    }
    v13 = *v4;
    if (v13 == 153)
      goto LABEL_41;
    if (v13 == 233)
    {
      v14 = (*(_DWORD *)v4 >> 18) & 0x1F;
      if (v14 != 6)
        return v14 == 9;
      goto LABEL_41;
    }
    if ((v13 & 0xFE) == 0x70)
      break;
    if (v13 != 103)
    {
      if (v13 == 210)
      {
LABEL_41:
        v16 = (unsigned __int8 **)(v4 + 16);
        goto LABEL_42;
      }
      if (v13 == 195)
        return 1;
      v19 = sub_22F0018D8(v4);
      if (!v19)
        return 0;
      if ((a2 & 1) != 0)
        return 0;
      v20 = (uint64_t)v19;
      if (!sub_22F110B50(*(_QWORD *)(*((_QWORD *)v19 + 6) & 0xFFFFFFFFFFFFFFF0)))
        return 0;
      v21 = *(_QWORD *)(v20 + 72) & 0xFFFFFFFFFFFFFFFCLL;
      if ((*(_DWORD *)(v20 + 72) & 3) != 0 && (*(_DWORD *)(v20 + 72) & 3) != 3)
        v21 = *(_QWORD *)(v21 + 8);
      if ((*(_BYTE *)(v21 + 2) & 1) != 0)
        return 0;
      v22 = v20;
      if ((*(_DWORD *)(v20 + 28) & 0x7F) != 0x53)
      {
        v23 = *(_QWORD *)(v20 + 16);
        v24 = v23 & 0xFFFFFFFFFFFFFFF8;
        if ((v23 & 4) != 0)
          v24 = *(_QWORD *)v24;
        for (i = *(_WORD *)(v24 + 8) & 0x7F; i != 83; i = *(_WORD *)(v24 + 8) & 0x7F)
        {
          v26 = -40;
          if (i > 70)
          {
            if (i == 71)
            {
              v26 = -56;
              goto LABEL_84;
            }
            if (i == 81)
              goto LABEL_84;
          }
          else
          {
            if (i <= 0x18)
            {
              if (i == 16)
                goto LABEL_71;
              if (((1 << i) & 0x1066) != 0)
                goto LABEL_84;
              if (i == 24)
              {
LABEL_71:
                v26 = -48;
                goto LABEL_84;
              }
            }
            if (i == 70)
            {
              v26 = -64;
              goto LABEL_84;
            }
          }
          v27 = i - 52;
          if ((i - 33) >= 5)
            v28 = -48;
          else
            v28 = -64;
          if (v27 >= 6)
            v26 = v28;
          else
            v26 = -72;
LABEL_84:
          v29 = *(_QWORD *)(v24 + v26 + 16);
          v24 = v29 & 0xFFFFFFFFFFFFFFF8;
          if ((v29 & 4) != 0)
            v24 = *(_QWORD *)v24;
        }
        v22 = v24 - 40;
      }
      return sub_22EFC2EF4(v20, *(_QWORD *)(v22 + 88)) == 1;
    }
    if (!sub_22EFF5C90(*((_QWORD *)v4 + 4), a2))
      return 0;
    v16 = (unsigned __int8 **)(v4 + 40);
LABEL_42:
    a1 = *v16;
    if (*v16)
      goto LABEL_2;
LABEL_18:
    v4 = 0;
  }
  v15 = (*(_DWORD *)v4 >> 18) & 0x3F;
  if (v15 > 0x20)
    return 0;
  if (((1 << v15) & 0x70000) != 0)
  {
    if (!sub_22EFF5C90(*((_QWORD *)v4 + 2), a2))
      return 0;
    goto LABEL_47;
  }
  if (((1 << v15) & 0x100200000) != 0)
  {
LABEL_47:
    v16 = (unsigned __int8 **)(v4 + 24);
    goto LABEL_42;
  }
  v17 = 0;
  if (((1 << v15) & 0x18FC00) == 0)
    return v17;
  return v3;
}

void sub_22EFF605C(uint64_t a1)
{
  __asm { BR              X9 }
}

void sub_22EFF6098()
{
  JUMPOUT(0x22EFF607CLL);
}

void sub_22EFF60A4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  BOOL v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v2 = *(_DWORD *)(v1 + 16);
  if (v1)
    v3 = v2 == 11;
  else
    v3 = 0;
  if (v3)
  {
    if (((*(_DWORD *)(v1 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_15;
  }
  else if (v1 && v2 == 44)
  {
    v4 = sub_22F114198(*(_QWORD *)(v1 + 24));
    if ((*(_BYTE *)(v4 + 74) & 1) == 0 && *(_QWORD *)(v4 + 128) <= 7uLL
      || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v1 + 24)) + 72) & 0x8000000000) != 0)
    {
LABEL_15:
      JUMPOUT(0x22EFF609CLL);
    }
  }
  else if (v2 != 9)
  {
    goto LABEL_15;
  }
  sub_22EFF6098();
}

uint64_t sub_22EFF6144()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 16);
}

uint64_t sub_22EFF614C()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 40);
}

uint64_t sub_22EFF6154()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 28);
}

void sub_22EFF615C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16);
  if (v1)
    sub_22F0D5A50(v1);
}

uint64_t sub_22EFF6170()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 76);
}

uint64_t sub_22EFF6178()
{
  uint64_t v0;

  return *(unsigned int *)(*(_QWORD *)(v0 + 16) + 24);
}

uint64_t sub_22EFF6184()
{
  uint64_t v0;

  return sub_22F060A34(v0);
}

void sub_22EFF61A0()
{
  _QWORD *v0;

  sub_22F003994(v0);
}

uint64_t sub_22EFF61BC()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = *(unsigned int *)(v0 + 16);
  if (!(_DWORD)result)
  {
    v2 = *(_QWORD *)(v0 + 40);
    if (v2 && (*(_BYTE *)(v2 + 1) & 0x20) != 0)
      return sub_22F0D5A50();
    else
      return *(unsigned int *)(v0 + 20);
  }
  return result;
}

void sub_22EFF61DC()
{
  uint64_t *v0;
  _QWORD v1[12];

  sub_22F05FD5C(v0, v1);
  sub_22EFF605C(v1[3]);
}

uint64_t sub_22EFF61F4()
{
  uint64_t v0;

  return sub_22F05FF4C(v0);
}

uint64_t sub_22EFF6210()
{
  uint64_t v0;

  return sub_22F061B18(v0);
}

void sub_22EFF622C()
{
  uint64_t v0;
  int v1;

  sub_22EFF605C(*(_QWORD *)(v0 + *(unsigned __int8 *)(v0 + 3)));
  if (!v1)
    sub_22EFFAE7C((unsigned int *)v0);
}

uint64_t sub_22EFF6258()
{
  uint64_t v0;
  int v1;
  BOOL v2;
  uint64_t v3;

  v1 = *(_DWORD *)(v0 + 4) & 0x3F;
  v2 = (v1 - 37) >= 2 && (v1 - 41) >= 0xFFFFFFDC;
  v3 = 20;
  if (!v2)
    v3 = 24;
  return *(unsigned int *)(v0 + v3);
}

uint64_t sub_22EFF6288()
{
  uint64_t v0;

  return sub_22F0613F8(v0);
}

uint64_t sub_22EFF62A4()
{
  uint64_t v0;
  uint64_t result;

  if (!*(_QWORD *)(v0 + 32))
    return 0;
  result = *(unsigned int *)(v0 + 16);
  if (!(_DWORD)result)
    return ((uint64_t (*)(_QWORD))sub_22F0D5A50)(*(_QWORD *)(v0 + 32));
  return result;
}

unint64_t sub_22EFF62C4()
{
  uint64_t v0;
  __int128 v2;

  v2 = *(_OWORD *)(v0 + 16);
  if ((_QWORD)v2)
    return sub_22F0AB0EC((unint64_t *)&v2);
  else
    return *(unsigned int *)(v0 + 48);
}

void sub_22EFF62DC()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 2) & 4) == 0)
    JUMPOUT(0x22EFF62E4);
  JUMPOUT(0x22EFF6484);
}

void sub_22EFF62EC()
{
  JUMPOUT(0x22EFF6488);
}

uint64_t sub_22EFF62F4()
{
  uint64_t v0;
  unsigned int *v1;
  unsigned int *v2;
  unsigned int *v3;

  v1 = *(unsigned int **)(v0 + 24);
  if (*v1)
  {
    v2 = v1 + 3;
  }
  else
  {
    v3 = v1 + 5;
    v2 = v1 + 4;
    if ((*(_BYTE *)(v0 + 20) & 1) != 0)
      v2 = v3;
  }
  return *v2;
}

uint64_t sub_22EFF6308()
{
  uint64_t v0;
  uint64_t result;

  result = *(unsigned int *)(v0 + 28);
  if (!(_DWORD)result)
    JUMPOUT(0x22EFF6464);
  return result;
}

void sub_22EFF6314()
{
  unint64_t v0;

  sub_22EFFD954(v0);
}

uint64_t sub_22EFF6330()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  if ((v1 & 4) != 0)
    v2 = *(_QWORD *)(v2 + 40);
  return ((uint64_t (*)(unint64_t))sub_22F0D5A50)(v2);
}

uint64_t sub_22EFF6344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t i;
  uint64_t v3;

  v1 = **(_QWORD **)(v0 + 16);
  for (i = v1; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_12;
      v3 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v3 <= 0x39)
        break;
LABEL_7:
      if (sub_22F115668(i))
        v1 = i;
      i = sub_22F115B7C(i);
      if (!i)
        return sub_22F115668(v1);
    }
    if (v3 == 24)
      goto LABEL_13;
    if (v3 == 26)
      break;
    if (((1 << v3) & 0x20000000200003CLL) == 0)
      goto LABEL_7;
LABEL_12:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_12;
LABEL_13:
  v1 = i;
  return sub_22F115668(v1);
}

uint64_t sub_22EFF63EC()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 80);
}

uint64_t sub_22EFF63F4()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 40) & 2) != 0)
    return *(unsigned int *)(v0 + 32);
  else
    return ((uint64_t (*)(_QWORD))sub_22F0D5A50)(*(_QWORD *)(v0 + 24));
}

uint64_t sub_22EFF644C()
{
  uint64_t v0;
  uint64_t result;

  result = *(unsigned int *)(v0 + 32);
  if (!(_DWORD)result)
    JUMPOUT(0x22EFF6464);
  return result;
}

uint64_t sub_22EFF6458()
{
  uint64_t v0;
  uint64_t result;

  result = *(unsigned int *)(v0 + 36);
  if (!(_DWORD)result)
    JUMPOUT(0x22EFF6460);
  return result;
}

uint64_t sub_22EFF6504(uint64_t result, char a2, int *a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  char *v6;
  int *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;

  v3 = *((_QWORD *)a3 + 1);
  v4 = *a3;
  *(_BYTE *)result = a2;
  if (byte_255E04EB3)
  {
    v7 = a3;
    v8 = result;
    v10 = v3;
    v9 = v4;
    v6 = sub_22F0D3748(a2);
    a3 = v7;
    result = v8;
    ++*((_DWORD *)v6 + 2);
    LOWORD(v4) = v9;
    v3 = v10;
  }
  v5 = *(_DWORD *)result & 0xFFFC00FF | v4 & 0x1F00;
  *(_DWORD *)result = v5;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = a3;
  *(_DWORD *)result = *a3 & 0x3E000 | v5;
  return result;
}

uint64_t sub_22EFF6594(uint64_t a1, int *a2, int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v7 = 24;
  if (a3 == 2)
    v7 = 96;
  v8 = sub_22E3CD3D4(a1 + 2032, v7 + 8 * (a3 == 1), 3);
  result = sub_22EFF6504(v8, 172, a2);
  v10 = 0x200000000;
  if (!a4)
    v10 = 0;
  *(_QWORD *)result = v10 | ((a3 & 3) << 18) | *(_QWORD *)result & 0xFFFFFFFC0003FFFFLL;
  if (a3 == 2)
    *(_DWORD *)(result + 24) = 0;
  return result;
}

__n128 *sub_22EFF6628(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  __n128 *v6;
  uint64_t v8[10];

  v8[9] = *MEMORY[0x24BDAC8D0];
  if (*a3 == 2)
  {
    if (a3[4] < 0x41u)
    {
      v5 = 1;
      goto LABEL_4;
    }
  }
  else if (*a3 < 2u)
  {
    v5 = 0;
    goto LABEL_4;
  }
  v5 = 2;
LABEL_4:
  v6 = (__n128 *)sub_22EFF6594(a1, a2, v5, 0);
  sub_22EF530AC((uint64_t)v8, (uint64_t)a3);
  sub_22EFF67A4(v6, (uint64_t)v8, a1);
  if (LODWORD(v8[0]) >= 2)
    sub_22EF53BC0(v8);
  return v6;
}

uint64_t sub_22EFF66F8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t result;
  char *v5;
  uint64_t v6;

  v3 = 24;
  if (a2 == 2)
    v3 = 96;
  result = sub_22E3CD3D4(a1 + 2032, v3 + 8 * (a2 == 1), 3);
  *(_BYTE *)result = -84;
  if (byte_255E04EB3)
  {
    v6 = result;
    v5 = sub_22F0D3748(172);
    result = v6;
    ++*((_DWORD *)v5 + 2);
  }
  *(_QWORD *)result = *(_QWORD *)result & 0xFFFFFFFFFFF3FFFFLL | ((a2 & 3) << 18);
  *(_QWORD *)(result + 8) = 0;
  if (a2 == 2)
    *(_DWORD *)(result + 24) = 0;
  return result;
}

__n128 sub_22EFF67A4(__n128 *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int v9;
  __n128 result;
  __n128 v11;
  __n128 v12;

  v3 = a1->n128_u64[0];
  v4 = a1->n128_u64[0] & 0xFFFFFFFFFF0FFFFFLL | ((unint64_t)(*(_DWORD *)a2 & 0xF) << 20);
  a1->n128_u64[0] = v4;
  v5 = (v3 >> 18) & 3;
  if (v5 == 1)
  {
    v8 = *(uint64_t **)(a2 + 8);
    v6 = a2 + 8;
    v7 = v8;
    v9 = *(_DWORD *)(v6 + 8);
    if (v9 < 0x41)
      v7 = (uint64_t *)v6;
    a1[1].n128_u64[9 * ((v3 & 0xC0000) == 0x80000) + 1] = *v7;
    a1->n128_u64[0] = v4 & 0xFFFFFFFF01FFFFFFLL | (v9 << 25);
    a1->n128_u64[0] = v4 & 0xFFFFFFFF00FFFFFFLL | (v9 << 25) | ((unint64_t)*(unsigned __int8 *)(v6 + 12) << 24);
  }
  else if (v5)
  {
    if ((v3 & 0x100000000) == 0 && sub_22EF53D60((unsigned int *)a2))
    {
      a1->n128_u64[0] |= 0x100000000uLL;
      sub_22EF5908C(a3, (uint64_t)sub_22E7B7544, (uint64_t)&a1[1].n128_i64[1]);
    }
    if (a1[1].n128_u32[2] >= 2)
      sub_22EF53BC0(&a1[1].n128_i64[1]);
    a1[1].n128_u32[2] = *(_DWORD *)a2;
    result = *(__n128 *)(a2 + 8);
    v11 = *(__n128 *)(a2 + 24);
    v12 = *(__n128 *)(a2 + 56);
    a1[4] = *(__n128 *)(a2 + 40);
    a1[5] = v12;
    a1[2] = result;
    a1[3] = v11;
    *(_DWORD *)a2 = 0;
  }
  return result;
}

uint64_t *sub_22EFF68AC@<X0>(uint64_t *result@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _DWORD *v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t *v12;
  unsigned int v13;
  char v14;

  v2 = *result;
  v3 = (*result >> 18) & 3;
  if (v3)
  {
    if (v3 == 2)
    {
      return (uint64_t *)sub_22EF530AC((uint64_t)a2, (uint64_t)(result + 3));
    }
    else
    {
      v4 = v2 >> 25;
      v5 = result[9 * ((v2 & 0xC0000) == 0x80000) + 3];
      v11 = v2 >> 25;
      if (v2 >> 25 > 0x40)
      {
        v8 = result;
        v9 = a2;
        llvm::APInt::initSlowCase((llvm::APInt *)&v10);
        a2 = v9;
        v7 = (uint64_t)v10;
        v2 = *v8;
        v4 = v11;
      }
      else
      {
        v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
        if (!v4)
          v6 = 0;
        v7 = v6 & v5;
        v10 = (uint64_t *)v7;
      }
      v13 = v4;
      v12 = (uint64_t *)v7;
      v11 = 0;
      v14 = BYTE3(v2) & 1;
      result = (uint64_t *)sub_22F2C4748((uint64_t)a2, (uint64_t *)&v12);
      if (v13 >= 0x41)
      {
        result = v12;
        if (v12)
          result = (uint64_t *)MEMORY[0x2348A0E84](v12, 0x1000C8000313F17);
      }
      if (v11 >= 0x41)
      {
        result = v10;
        if (v10)
          return (uint64_t *)MEMORY[0x2348A0E84](v10, 0x1000C8000313F17);
      }
    }
  }
  else
  {
    *a2 = (v2 & 0xF00000) == 0x100000;
  }
  return result;
}

uint64_t sub_22EFF69F0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, char a6, int a7, _QWORD *a8, char a9)
{
  char v10;
  unsigned int v11;
  int v12;
  char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;

  v10 = a9;
  *(_BYTE *)a1 = -95;
  if (byte_255E04EB3)
  {
    v21 = a7;
    v17 = a2;
    v20 = a8;
    v16 = a4;
    v19 = a5;
    v15 = a3;
    v18 = a6;
    v14 = sub_22F0D3748(161);
    v10 = a9;
    a6 = v18;
    a3 = v15;
    a5 = v19;
    a4 = v16;
    a8 = v20;
    a7 = v21;
    a2 = v17;
    ++*((_DWORD *)v14 + 2);
  }
  v11 = *(_DWORD *)a1 & 0xFFFC00FF | ((a6 & 3) << 8);
  *(_DWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = *a8;
  if (a4)
    v12 = 0x400000;
  else
    v12 = 0;
  *(_DWORD *)a1 = v12 & 0xFE7FFFFF | ((v10 & 3) << 23) | v11 & 0xFE0003FF;
  *(_DWORD *)(a1 + 4) = a7;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22EFB26EC((int *)a1, a2) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22EFF6AD4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, char a6, int a7, _QWORD *a8, char a9)
{
  return sub_22EFF69F0(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_22EFF6AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, __int16 a13, char a14)
{
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  _OWORD *v27;
  _OWORD *v28;
  __int128 v29;
  int v31;
  uint64_t v32;
  char *v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  *(_BYTE *)a1 = -95;
  if (byte_255E04EB3)
  {
    v38 = a4;
    v39 = a5;
    v31 = a7;
    v32 = a3;
    v40 = a8;
    v37 = a6;
    v33 = sub_22F0D3748(161);
    a6 = v37;
    a4 = v38;
    a5 = v39;
    a8 = v40;
    a3 = v32;
    a7 = v31;
    ++*((_DWORD *)v33 + 2);
  }
  v16 = a9;
  v17 = *(_DWORD *)a1 & 0xFFFC00FF | ((a12 & 3) << 8);
  *(_DWORD *)a1 = v17;
  *(_QWORD *)(a1 + 8) = a11;
  *(_QWORD *)(a1 + 16) = a6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a8 + 16);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a8 + 8);
  v18 = v17 & 0xFFE803FF;
  if (a3)
  {
    *(_QWORD *)(a1 + 32) = a3;
    *(_QWORD *)(a1 + 40) = a4;
  }
  v19 = ((a3 != 0) << 18) | v18;
  if (a9)
  {
    v19 |= 0x100000u;
    *(_QWORD *)(a1 + 16 * (a3 != 0) + 32) = a9;
    v16 = 1;
  }
  if (a10)
  {
    v20 = v19 & 0xFE3403FF;
    if (a7)
      v21 = 4718592;
    else
      v21 = 0x80000;
    v22 = v21 & 0xFE7FFFFF | ((a14 & 3) << 23) | v20;
    *(_DWORD *)a1 = v22;
    v23 = a1 + 16 * (a3 != 0) + 8 * v16;
    *(_DWORD *)(v23 + 40) = a5;
    *(_DWORD *)(v23 + 32) = *(_DWORD *)(a10 + 272);
    v24 = v23 + 32;
    *(_DWORD *)(v24 + 4) = *(_DWORD *)(a10 + 276);
    v25 = *(_DWORD *)(a10 + 8);
    *(_DWORD *)(v24 + 12) = v25;
    if (v25)
    {
      v26 = 0;
      do
      {
        sub_22F0EEB00(*(_QWORD *)a10 + 32 * v26);
        v27 = (_OWORD *)(v24 + 16 + 32 * v26);
        v28 = (_OWORD *)(*(_QWORD *)a10 + 32 * v26);
        v29 = v28[1];
        *v27 = *v28;
        v27[1] = v29;
        ++v26;
      }
      while (v26 != *(_DWORD *)(v24 + 12));
      v22 = *(_DWORD *)a1;
    }
  }
  else if (a5 || (a7 & 1) != 0)
  {
    v34 = v19 & 0xFE3403FF;
    if (a7)
      v35 = 0x400000;
    else
      v35 = 0;
    v22 = (v35 | ((a5 != 0) << 19)) & 0xFE7FFFFF | ((a14 & 3) << 23) | v34;
    if (a5)
    {
      v36 = a1 + 16 * (a3 != 0) + 8 * v16;
      *(_QWORD *)(v36 + 32) = 0;
      *(_DWORD *)(v36 + 40) = a5;
      *(_DWORD *)(v36 + 44) = 0;
    }
  }
  else
  {
    v22 = ((a14 & 3) << 23) | v19 & 0xFE3403FF;
  }
  *(_DWORD *)a1 = v22 & 0xFFDFFFFF;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22EFB26EC((int *)a1, a2) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22EFF6D08(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, uint64_t a8, char a9, __int16 a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v21;
  int v22;
  uint64_t v23;

  v21 = *(_QWORD *)(a5 + 40);
  v22 = a7;
  sub_22EFC6D6C((uint64_t)&v23, v21);
  return sub_22EFF6DB8(a1, a2, a3, a4, a5, a6, (uint64_t)&v21, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_22EFF6DB8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, char a9, __int16 a10, uint64_t a11, uint64_t a12, char a13)
{
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v19 = a4 != 0;
  if (a12)
  {
    v20 = 32 * *(unsigned int *)(a12 + 8);
    v19 = 1;
  }
  else
  {
    v20 = 0;
  }
  if (a5 == a11)
    v21 = 0;
  else
    v21 = a11;
  v22 = !v19;
  v23 = 16;
  if (v22)
    v23 = 0;
  v24 = 48;
  if (!a2)
    v24 = 32;
  v25 = sub_22E3CD3D4(a1 + 2032, (v24 | (8 * (v21 != 0))) + v20 + v23, 3);
  return sub_22EFF6AE4(v25, a1, a2, a3, a4, a5, a6, a7, v21, a12, a8, a9, a10, a13);
}

uint64_t sub_22EFF6EB0(uint64_t a1, int a2, int a3, int a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char *v9;
  uint64_t v10;

  v5 = 8;
  if (!a3)
    v5 = 0;
  v6 = 16;
  if (!a4)
    v6 = 0;
  v7 = 32;
  if (a2)
    v7 = 48;
  result = sub_22E3CD3D4(a1 + 2032, (v5 | v7) + v6 + 32 * a5, 3);
  *(_BYTE *)result = -95;
  if (byte_255E04EB3)
  {
    v10 = result;
    v9 = sub_22F0D3748(161);
    result = v10;
    ++*((_DWORD *)v9 + 2);
  }
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_22EFF6F50(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int i;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t result;
  char v14;

  v2 = a2;
  *(_QWORD *)(a1 + 16) = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  v14 = 0;
  v5 = sub_22F110500((uint64_t)&v14, v4);
  if (v5 && *(_QWORD *)(v5 + 24) <= 0xFuLL && (*(_BYTE *)(v5 + 17) & 4) == 0)
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v2 + 48);
  if (!v2 || (*(_DWORD *)(v2 + 28) & 0x7F) != 0x53)
  {
    v6 = *(_QWORD *)(v2 + 16);
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((v6 & 4) != 0)
      v7 = *(_QWORD *)v7;
    for (i = *(_WORD *)(v7 + 8) & 0x7F; i != 83; i = *(_WORD *)(v7 + 8) & 0x7F)
    {
      v9 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v9 = -56;
          goto LABEL_11;
        }
        if (i == 81)
          goto LABEL_11;
      }
      else
      {
        if (i <= 0x18)
        {
          if (i == 16)
            goto LABEL_10;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_11;
          if (i == 24)
          {
LABEL_10:
            v9 = -48;
            goto LABEL_11;
          }
        }
        if (i == 70)
        {
          v9 = -64;
          goto LABEL_11;
        }
      }
      v11 = i - 52;
      if ((i - 33) >= 5)
        v12 = -48;
      else
        v12 = -64;
      if (v11 >= 6)
        v9 = v12;
      else
        v9 = -72;
LABEL_11:
      v10 = *(_QWORD *)(v7 + v9 + 16);
      v7 = v10 & 0xFFFFFFFFFFFFFFF8;
      if ((v10 & 4) != 0)
        v7 = *(_QWORD *)v7;
    }
    v2 = v7 - 40;
  }
  result = sub_22EFB26EC((int *)a1, *(_QWORD *)(v2 + 88));
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((result & 0x1F) << 13);
  return result;
}

uint64_t sub_22EFF70D0(unsigned int *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v1 = *a1;
  if ((v1 & 0x80000) != 0)
  {
    v2 = (uint64_t)&a1[4 * ((v1 >> 18) & 1) + 2 * ((v1 >> 20) & 1)];
    v4 = *(_DWORD *)(v2 + 32);
    v3 = v2 + 32;
    if (v4)
      return *(unsigned int *)(v3 + 4);
  }
  v6 = *((_QWORD *)a1 + 3);
  v7 = a1[1];
  v8 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 40);
  v9 = v7;
  v10 = v6;
  sub_22EFC70E8(&v8);
  if ((_DWORD)result)
    return result;
  else
    return v7;
}

uint64_t sub_22EFF7140@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  std::string *v16;
  std::string v17;

  v5 = sub_22F3E1564(a1, *(_QWORD *)(*(_QWORD *)(a1 + 1992) + 8), (uint64_t)sub_22F003658);
  memset(&v17, 0, sizeof(v17));
  std::string::reserve(&v17, 0x80uLL);
  v9 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  v8 = MEMORY[0x24BED83D8] + 16;
  v16 = &v17;
  llvm::raw_ostream::SetBufferAndMode();
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v5 + 184))(v5, a2, &v8);
  if (SHIBYTE(v16->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_22E3BB2B4((_BYTE *)a3, v16->__r_.__value_.__l.__data_, v16->__r_.__value_.__l.__size_);
  }
  else
  {
    v6 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 16) = *((_QWORD *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)a3 = v6;
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v8);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
}

void sub_22EFF7250(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  int i;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  size_t v20;
  const void *v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  const char *p_p;
  llvm::raw_ostream *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  size_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  _DWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  const char *v71;
  size_t v72;
  char *v73;
  size_t v74;
  _BYTE *v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  void *v83;
  size_t v84;
  const void *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  char *v97;
  llvm::raw_ostream *v98;
  llvm::raw_ostream *v99;
  _BYTE *v100;
  const char *v101;
  const char *v102;
  _BYTE *v103;
  uint64_t v104;
  BOOL v105;
  const char *v106;
  uint64_t v107;
  BOOL v108;
  _BYTE *v109;
  _DWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  const char *v113;
  _WORD *v114;
  uint64_t v115;
  unint64_t v116;
  unsigned int v117;
  __int16 v118;
  int v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  unsigned int *v138;
  const void *v139;
  size_t v140;
  unsigned int v141;
  uint64_t *v142;
  char *v143;
  char **v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unsigned int *v156;
  const void *v157;
  size_t v158;
  unsigned int v159;
  uint64_t *v160;
  char *v161;
  char **v162;
  std::string::size_type size;
  _BYTE *v164;
  llvm::raw_ostream *v165;
  std::string *v166;
  llvm::raw_ostream *v167;
  _BYTE *v168;
  int v169;
  unsigned int v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  BOOL v179;
  _BOOL4 v180;
  uint64_t v181;
  int v182;
  void **v183;
  size_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  _BYTE *v188;
  _BYTE *v189;
  _BYTE *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  char *v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  char *v199;
  uint64_t v200;
  char *v201;
  char v202;
  uint64_t v203;
  int v204;
  std::string *v205;
  std::string v206;
  uint64_t *v207;
  int v208;
  _BYTE *v209;
  _BYTE *v210;
  _BYTE *v211;
  char v212;
  uint64_t v213;
  int v214;
  void **v215;
  void *v216[2];
  uint64_t v217;
  unint64_t v218[2];
  void *__p;
  char v220;
  uint64_t v221;
  _DWORD *v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  char *v227;
  uint64_t v228;
  void *__src;
  __int128 __len;
  _QWORD v231[35];

  while (1)
  {
    v3 = a2;
    v5 = a3;
    v231[32] = *MEMORY[0x24BDAC8D0];
    v6 = *(_DWORD *)(a2 + 28);
    v7 = v6 & 0x7F;
    if (a2 && v7 == 83)
    {
      if ((_DWORD)a1 == 3)
        goto LABEL_46;
      v15 = *(_QWORD *)(a2 + 88);
      goto LABEL_63;
    }
    v8 = *(_QWORD *)(a2 + 16);
    v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    if ((v8 & 4) != 0)
      v9 = *(_QWORD *)v9;
    for (i = *(_WORD *)(v9 + 8) & 0x7F; i != 83; i = *(_WORD *)(v9 + 8) & 0x7F)
    {
      v11 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v11 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_16;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_15;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_22;
        if (i == 24)
        {
LABEL_9:
          v11 = -48;
        }
        else
        {
LABEL_15:
          if (i != 70)
          {
LABEL_16:
            v12 = i - 52;
            if ((i - 33) >= 5)
              v13 = -48;
            else
              v13 = -64;
            if (v12 >= 6)
              v11 = v13;
            else
              v11 = -72;
            goto LABEL_22;
          }
          v11 = -64;
        }
      }
LABEL_22:
      v14 = *(_QWORD *)(v9 + v11 + 16);
      v9 = v14 & 0xFFFFFFFFFFFFFFF8;
      if ((v14 & 4) != 0)
        v9 = *(_QWORD *)v9;
    }
    v15 = *(_QWORD *)(v9 + 48);
    if ((_DWORD)a1 == 3)
      break;
    if (v7 == 1)
    {
      v23 = *(_QWORD *)(a2 + 16);
      v24 = v23 & 0xFFFFFFFFFFFFFFF8;
      if ((v23 & 4) != 0)
        v24 = *(_QWORD *)v24;
      v25 = *(_WORD *)(v24 + 8) & 0x7F;
      if (v25 == 83 || v25 == 16)
        goto LABEL_46;
      __src = v231;
      __len = xmmword_22F44E320;
      sub_22F242C48((uint64_t)&v223, (uint64_t)&__src);
      v29 = *(_WORD *)(v24 + 8) & 0x7F;
      if (v29 == 1)
      {
        sub_22EFF7250(&__p, a1, v24 - 40);
        if (v220 >= 0)
          p_p = (const char *)&__p;
        else
          p_p = (const char *)__p;
        v31 = (llvm::raw_ostream *)&v223;
        goto LABEL_258;
      }
      v50 = -40;
      if ((*(_WORD *)(v24 + 8) & 0x7Fu) > 0x46)
      {
        switch(v29)
        {
          case 'S':
            goto LABEL_253;
          case 'G':
            v50 = -56;
            goto LABEL_253;
          case 'Q':
            goto LABEL_253;
        }
      }
      else
      {
        if (v29 <= 0x18)
        {
          if (v29 == 16)
            goto LABEL_134;
          if (((1 << v29) & 0x1066) != 0)
            goto LABEL_253;
          if (v29 == 24)
          {
LABEL_134:
            v50 = -48;
LABEL_253:
            sub_22EFF7250(&__p, a1, v24 + v50);
            if (v220 >= 0)
              v82 = (const char *)&__p;
            else
              v82 = (const char *)__p;
            v31 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)&v223, v82);
            v83 = (void *)*((_QWORD *)v31 + 4);
            if (*((_QWORD *)v31 + 3) - (_QWORD)v83 > 0xCuLL)
            {
              qmemcpy(v83, "_block_invoke", 13);
              *((_QWORD *)v31 + 4) += 13;
LABEL_259:
              if (v220 < 0)
                operator delete(__p);
              v84 = *(_QWORD *)(v228 + 8);
              if (v84 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_518;
              v85 = *(const void **)v228;
              if (v84 >= 0x17)
              {
                v86 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v84 | 7) != 0x17)
                  v86 = v84 | 7;
                v87 = v86 + 1;
                v88 = operator new(v86 + 1);
                v5[1] = v84;
                v5[2] = v87 | 0x8000000000000000;
                *v5 = v88;
                v5 = v88;
              }
              else
              {
                *((_BYTE *)v5 + 23) = v84;
                if (!v84)
                {
LABEL_269:
                  *((_BYTE *)v5 + v84) = 0;
                  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v223);
                  v62 = __src;
                  if (__src == v231)
                    return;
                  goto LABEL_505;
                }
              }
              memmove(v5, v85, v84);
              goto LABEL_269;
            }
            p_p = "_block_invoke";
LABEL_258:
            llvm::raw_ostream::write(v31, p_p);
            goto LABEL_259;
          }
        }
        if (v29 == 70)
        {
LABEL_251:
          v50 = -64;
          goto LABEL_253;
        }
      }
      if (v29 - 52 < 6)
      {
        v50 = -72;
        goto LABEL_253;
      }
      if (v29 - 33 < 5)
        goto LABEL_251;
      goto LABEL_134;
    }
LABEL_63:
    if ((v6 & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      if ((a1 - 8) <= 0xFFFFFFFB)
      {
        sub_22EFC683C((uint64_t *)(a2 + 40), v5);
        return;
      }
      __src = v231;
      __len = xmmword_22F44E320;
      sub_22F242C48((uint64_t)&__p, (uint64_t)&__src);
      if ((*(_DWORD *)(v3 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
      {
        v34 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v3 + 32))(v3);
        v35 = (*(_BYTE *)(v34 + 82) & 0xC) != 0 || sub_22EFD7260(v34) != 0;
        if ((_DWORD)a1 != 7 && v35)
        {
          if ((unint64_t)(v221 - (_QWORD)v222) > 7)
          {
            *(_QWORD *)v222 = 0x206C617574726976;
            v222 += 2;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "virtual ");
          }
        }
        if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v3 + 32))(v3) + 80) & 0xE000) == 0x4000
          || (*(_QWORD *)(v3 + 40) & 7) == 6
          && (*(_DWORD *)(*(_QWORD *)(v3 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) <= 3)
        {
          v64 = v222;
          if ((unint64_t)(v221 - (_QWORD)v222) > 6)
          {
            *(_DWORD *)((char *)v222 + 3) = 543385972;
            *v64 = 1952543859;
            v222 = (_DWORD *)((char *)v222 + 7);
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "static ");
          }
        }
      }
      v192 = v5;
      sub_22E462F04(v218, *(unsigned int **)(v15 + 2000));
      v216[0] = 0;
      v216[1] = 0;
      v217 = 0;
      v208 = 0;
      v212 = 0;
      v213 = 0;
      v214 = 1;
      v210 = 0;
      v211 = 0;
      v209 = 0;
      v65 = MEMORY[0x24BED83D8];
      v207 = (uint64_t *)(MEMORY[0x24BED83D8] + 16);
      v215 = v216;
      llvm::raw_ostream::SetBufferAndMode();
      v66 = sub_22EFC20FC(v3, 1);
      if (v66)
        v67 = v66;
      else
        v67 = v3;
      v68 = *(_QWORD *)(*(_QWORD *)(v67 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v68)
        v69 = *(unsigned __int8 *)(v68 + 16) - 27 > 0xFFFFFFFD;
      else
        v69 = 0;
      if (!v69)
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v68 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 <= 1)
          v68 = sub_22F10CF48(v68);
        else
          v68 = 0;
      }
      if ((*(_BYTE *)(v3 + 82) & 0x20) != 0)
      {
        if (*(_BYTE *)(v68 + 16) == 26)
          v70 = v68;
        else
          v70 = 0;
      }
      else
      {
        v70 = 0;
      }
      v191 = v68;
      if ((a1 & 0xFFFFFFFE) == 4)
      {
        switch((*(_DWORD *)(v68 + 16) >> 19) & 0x1F)
        {
          case 0:
            if ((unint64_t)(v210 - v211) <= 7)
            {
              v71 = "__cdecl ";
              goto LABEL_232;
            }
            *(_QWORD *)v211 = 0x206C636564635F5FLL;
            v103 = v211 + 8;
            goto LABEL_303;
          case 1:
            v76 = v211;
            if ((unint64_t)(v210 - v211) <= 9)
            {
              v71 = "__stdcall ";
              goto LABEL_232;
            }
            v102 = "__stdcall ";
            goto LABEL_299;
          case 2:
            v75 = v211;
            if ((unint64_t)(v210 - v211) <= 0xA)
            {
              v71 = "";
              goto LABEL_232;
            }
            v101 = "";
            goto LABEL_301;
          case 3:
            v75 = v211;
            if ((unint64_t)(v210 - v211) <= 0xA)
            {
              v71 = "__thiscall ";
              goto LABEL_232;
            }
            v101 = "__thiscall ";
LABEL_301:
            *(_DWORD *)(v75 + 7) = 543976545;
            *(_QWORD *)v75 = *(_QWORD *)v101;
            v103 = v211 + 11;
            goto LABEL_303;
          case 4:
            v77 = v211;
            if ((unint64_t)(v210 - v211) <= 0xC)
            {
              v71 = "__vectorcall ";
              goto LABEL_232;
            }
            *(_QWORD *)v211 = *(_QWORD *)"__vectorcall ";
            *(_QWORD *)(v77 + 5) = *(_QWORD *)"torcall ";
            v103 = v211 + 13;
            goto LABEL_303;
          case 8:
            v76 = v211;
            if ((unint64_t)(v210 - v211) > 9)
            {
              v102 = "__regcall ";
LABEL_299:
              *((_WORD *)v76 + 4) = 8300;
              *(_QWORD *)v76 = *(_QWORD *)v102;
              v103 = v211 + 10;
LABEL_303:
              v211 = v103;
            }
            else
            {
              v71 = "__regcall ";
LABEL_232:
              llvm::raw_ostream::write((llvm::raw_ostream *)&v207, v71);
            }
            break;
          default:
            break;
        }
      }
      sub_22EFBA008((_QWORD *)v3, (llvm::raw_ostream *)&v207, (uint64_t)v218);
      if (v210 == v211)
        llvm::raw_ostream::write((llvm::raw_ostream *)&v207, "(");
      else
        *v211++ = 40;
      v193 = v70;
      if (!v70)
        goto LABEL_331;
      v78 = *(_QWORD *)(*(_QWORD *)(v67 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v78 && *(_BYTE *)(v78 + 16) == 26
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v78 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
        && (v78 = sub_22F10CF48(v78)) != 0)
      {
        v79 = *(_QWORD *)(v78 + 16);
        if ((v79 & 0x3FFFC000000000) != 0)
        {
          v80 = 0;
          v81 = (unsigned __int16)(v79 >> 38);
          do
          {
            if (v80)
            {
              if ((unint64_t)(v210 - v211) > 1)
              {
                *(_WORD *)v211 = 8236;
                v211 += 2;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v207, ", ");
              }
            }
            v197 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v67 + 120) + 8 * v80) + 48);
            LOWORD(v227) = 257;
            sub_22F119558(&v197, &v207, (uint64_t)v218, (const void ***)&v223, 0);
            ++v80;
          }
          while (v81 != v80);
        }
      }
      v70 = v193;
      if ((*(_BYTE *)(v193 + 23) & 8) == 0)
      {
        if ((a1 & 0xFFFFFFFE) == 4 || (*(_BYTE *)(*(_QWORD *)(v15 + 2000) + 1) & 1) == 0)
        {
          v104 = *(_QWORD *)(*(_QWORD *)(v67 + 48) & 0xFFFFFFFFFFFFFFF0);
          v105 = v104 && *(_BYTE *)(v104 + 16) == 26;
          if (!v105
            && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v104 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26
             || (v104 = sub_22F10CF48(v104)) == 0)
            || (*(_DWORD *)(v104 + 20) & 0x3FFFC0) == 0)
          {
            if ((unint64_t)(v210 - v211) <= 3)
            {
              v106 = "void";
LABEL_330:
              llvm::raw_ostream::write((llvm::raw_ostream *)&v207, v106);
              goto LABEL_331;
            }
            *(_DWORD *)v211 = 1684631414;
            v189 = v211 + 4;
LABEL_517:
            v211 = v189;
          }
        }
LABEL_331:
        if (v210 == v211)
          llvm::raw_ostream::write((llvm::raw_ostream *)&v207, ")");
        else
          *v211++ = 41;
        if ((*(_DWORD *)(v3 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
        {
          if ((sub_22E47E20C(v70) & 1) != 0)
          {
            v110 = v211;
            if ((unint64_t)(v210 - v211) > 5)
            {
              *((_WORD *)v211 + 2) = 29811;
              *v110 = 1852793632;
              v211 += 6;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)&v207, " const");
            }
          }
          if ((sub_22E47E20C(v70) & 4) != 0)
          {
            v111 = v211;
            if ((unint64_t)(v210 - v211) > 8)
            {
              v211[8] = 101;
              *v111 = *(_QWORD *)" volatile";
              v211 += 9;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)&v207, " volatile");
            }
          }
          v112 = *(_QWORD *)(*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (!v112 || *(_BYTE *)(v112 + 16) != 26)
            v112 = sub_22F10CF48(v112);
          if ((*(_DWORD *)(v112 + 20) & 3) == 2)
          {
            v114 = v211;
            if ((unint64_t)(v210 - v211) <= 2)
            {
              v113 = " &&";
              goto LABEL_349;
            }
            v211[2] = 38;
            *v114 = 9760;
            v190 = v211 + 3;
          }
          else
          {
            if ((*(_DWORD *)(v112 + 20) & 3) != 1)
              goto LABEL_350;
            if ((unint64_t)(v210 - v211) <= 1)
            {
              v113 = " &";
LABEL_349:
              llvm::raw_ostream::write((llvm::raw_ostream *)&v207, v113);
              goto LABEL_350;
            }
            *(_WORD *)v211 = 9760;
            v190 = v211 + 2;
          }
          v211 = v190;
        }
LABEL_350:
        v223 = &v225;
        v224 = 0x800000000;
        v115 = *(_QWORD *)(v3 + 16);
        v116 = v115 & 0xFFFFFFFFFFFFFFF8;
        if ((v115 & 4) != 0)
          v116 = *(_QWORD *)v116;
        if (v116)
        {
          v117 = 0;
          do
          {
            v118 = *(_WORD *)(v116 + 8);
            v119 = v118 & 0x7F;
            if ((v119 - 13) > 0x3D)
              break;
            if ((v118 & 0x7E) == 0x24 && (*(_BYTE *)(v116 + 116) & 7) != 2)
            {
              if (v117 >= HIDWORD(v224))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v117 = v224;
              }
              *((_QWORD *)v223 + v117) = v116 - 64;
              v117 = v224 + 1;
              LODWORD(v224) = v224 + 1;
              v119 = *(_WORD *)(v116 + 8) & 0x7F;
            }
            v120 = -40;
            if (v119 > 70)
            {
              if (v119 != 83)
              {
                if (v119 == 71)
                {
                  v120 = -56;
                }
                else if (v119 != 81)
                {
                  goto LABEL_371;
                }
              }
            }
            else
            {
              if (v119 > 0x18)
                goto LABEL_370;
              if (v119 == 16)
                goto LABEL_363;
              if (((1 << v119) & 0x1066) != 0)
                goto LABEL_377;
              if (v119 == 24)
              {
LABEL_363:
                v120 = -48;
              }
              else
              {
LABEL_370:
                if (v119 != 70)
                {
LABEL_371:
                  v121 = v119 - 52;
                  if ((v119 - 33) >= 5)
                    v122 = -48;
                  else
                    v122 = -64;
                  if (v121 >= 6)
                    v120 = v122;
                  else
                    v120 = -72;
                  goto LABEL_377;
                }
                v120 = -64;
              }
            }
LABEL_377:
            v123 = *(_QWORD *)(v116 + v120 + 16);
            v116 = v123 & 0xFFFFFFFFFFFFFFF8;
            if ((v123 & 4) != 0)
              v116 = *(_QWORD *)v116;
          }
          while (v116);
        }
        memset(&v206, 0, sizeof(v206));
        v198 = 0;
        v202 = 0;
        v203 = 0;
        v204 = 1;
        v200 = 0;
        v201 = 0;
        v199 = 0;
        v197 = v65 + 16;
        v205 = &v206;
        llvm::raw_ostream::SetBufferAndMode();
        if ((_DWORD)v224)
        {
          v194 = (char *)v223;
          v124 = (char *)v223 + 8 * v224;
          do
          {
            v126 = *((_QWORD *)v124 - 1);
            v124 -= 8;
            v125 = v126;
            v127 = *(_QWORD *)(v126 + 152);
            v128 = (_QWORD *)(v127 & 0xFFFFFFFFFFFFFFF8);
            if ((v127 & 4) != 0 && v128)
            {
              do
              {
                v129 = *(_QWORD *)(*v128 + 152);
                v128 = (_QWORD *)(v129 & 0xFFFFFFFFFFFFFFF8);
              }
              while ((v129 & 4) != 0 && v128);
            }
            v130 = v128[7];
            v131 = *(_DWORD *)(v130 + 12);
            v132 = v131 & 0x1FFFFFFF;
            if ((v131 & 0x1FFFFFFF) != 0)
            {
              v133 = 0;
              v134 = 0;
              v135 = *(_QWORD **)(v125 + 168);
              do
              {
                v136 = *(_QWORD *)(*(_QWORD *)(v130 + 8 * v134 + 16) + 40) & 0xFFFFFFFFFFFFFFF8;
                if ((*(_QWORD *)(*(_QWORD *)(v130 + 8 * v134 + 16) + 40) & 7) == 0 && v136 != 0)
                {
                  v138 = *(unsigned int **)(v136 + 16);
                  v141 = *v138;
                  v139 = v138 + 4;
                  v140 = v141;
                  if (v141)
                  {
                    if (v140 <= v200 - (uint64_t)v201)
                    {
                      memcpy(v201, v139, v140);
                      v143 = &v201[v140];
                      v201 += v140;
                      v142 = &v197;
                      v144 = &v201;
                    }
                    else
                    {
                      v142 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)&v197, (const char *)v139);
                      v144 = (char **)(v142 + 4);
                      v143 = (char *)v142[4];
                    }
                    if ((unint64_t)(v142[3] - (_QWORD)v143) > 2)
                    {
                      v143[2] = 32;
                      *(_WORD *)v143 = 15648;
                      *v144 += 3;
                    }
                    else
                    {
                      llvm::raw_ostream::write((llvm::raw_ostream *)v142, " = ");
                    }
                    v145 = *v135 + v133;
                    v146 = sub_22EFE9290((uint64_t)v218, v130, v134);
                    sub_22F0EF330(v145, (uint64_t)v218, (llvm::raw_ostream *)&v197, v146);
                    if ((unint64_t)(v200 - (_QWORD)v201) > 1)
                    {
                      *(_WORD *)v201 = 8236;
                      v201 += 2;
                    }
                    else
                    {
                      llvm::raw_ostream::write((llvm::raw_ostream *)&v197, ", ");
                    }
                  }
                }
                ++v134;
                v133 += 24;
              }
              while (v132 != v134);
            }
          }
          while (v124 != v194);
        }
        if ((*(_QWORD *)(v3 + 144) & 6) == 4)
        {
          v147 = *(_QWORD *)(v3 + 144) & 0xFFFFFFFFFFFFFFF8;
          if (v147)
          {
            if ((*(_QWORD *)(v147 + 16) & 6) != 2)
            {
              v148 = *(_QWORD *)((*(_QWORD *)(v147 + 16) & 0xFFFFFFFFFFFFFFF8) + 56);
              v149 = *(_DWORD *)(v148 + 12) & 0x1FFFFFFF;
              if ((_DWORD)v149)
              {
                v150 = 0;
                v151 = *(_QWORD **)(v147 + 24);
                v152 = v148 + 16;
                v153 = 24 * v149;
                do
                {
                  v154 = *(_QWORD *)(*(_QWORD *)v152 + 40) & 0xFFFFFFFFFFFFFFF8;
                  if ((*(_QWORD *)(*(_QWORD *)v152 + 40) & 7) == 0 && v154 != 0)
                  {
                    v156 = *(unsigned int **)(v154 + 16);
                    v159 = *v156;
                    v157 = v156 + 4;
                    v158 = v159;
                    if (v159)
                    {
                      if (v158 <= v200 - (uint64_t)v201)
                      {
                        memcpy(v201, v157, v158);
                        v161 = &v201[v158];
                        v201 += v158;
                        v160 = &v197;
                        v162 = &v201;
                      }
                      else
                      {
                        v160 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)&v197, (const char *)v157);
                        v162 = (char **)(v160 + 4);
                        v161 = (char *)v160[4];
                      }
                      if ((unint64_t)(v160[3] - (_QWORD)v161) > 2)
                      {
                        v161[2] = 32;
                        *(_WORD *)v161 = 15648;
                        *v162 += 3;
                      }
                      else
                      {
                        llvm::raw_ostream::write((llvm::raw_ostream *)v160, " = ");
                      }
                      sub_22F0EF330(*v151 + v150, (uint64_t)v218, (llvm::raw_ostream *)&v197, 1);
                      if ((unint64_t)(v200 - (_QWORD)v201) > 1)
                      {
                        *(_WORD *)v201 = 8236;
                        v201 += 2;
                      }
                      else
                      {
                        llvm::raw_ostream::write((llvm::raw_ostream *)&v197, ", ");
                      }
                    }
                  }
                  v150 += 24;
                  v152 += 8;
                }
                while (v153 != v150);
              }
            }
          }
        }
        if (v201 != v199)
          llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v197);
        size = *((_BYTE *)&v206.__r_.__value_.__s + 23) & 0x7F;
        if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v206.__r_.__value_.__l.__size_;
        v164 = v192;
        if (size)
        {
          std::string::resize(&v206, size - 2, 0);
          if ((unint64_t)(v210 - v211) > 1)
          {
            *(_WORD *)v211 = 23328;
            v211 += 2;
            v165 = (llvm::raw_ostream *)&v207;
          }
          else
          {
            v165 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)&v207, " [");
          }
          if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v166 = &v206;
          else
            v166 = (std::string *)v206.__r_.__value_.__r.__words[0];
          v167 = (llvm::raw_ostream *)llvm::raw_ostream::write(v165, (const char *)v166);
          v168 = (_BYTE *)*((_QWORD *)v167 + 4);
          if (*((_BYTE **)v167 + 3) == v168)
          {
            llvm::raw_ostream::write(v167, "]");
          }
          else
          {
            *v168 = 93;
            ++*((_QWORD *)v167 + 4);
          }
        }
        if (v211 != v209)
          llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v207);
        v169 = *(_DWORD *)(v3 + 28);
        if ((v169 & 0x7Eu) - 54 > 3)
          goto LABEL_467;
        v170 = *(_WORD *)(v3 + 80) & 0x7F;
        v171 = -40;
        if (v170 > 0x46)
        {
          if (v170 == 83)
            goto LABEL_460;
          if (v170 == 71)
          {
            v171 = -56;
            goto LABEL_460;
          }
          if (v170 != 81)
          {
LABEL_455:
            v172 = v170 - 52;
            v37 = v170 - 33 >= 5;
            v173 = -48;
            if (!v37)
              v173 = -64;
            if (v172 >= 6)
              v171 = v173;
            else
              v171 = -72;
          }
        }
        else
        {
          if (v170 > 0x18)
            goto LABEL_454;
          if (v170 == 16)
          {
LABEL_447:
            v171 = -48;
            goto LABEL_460;
          }
          if (((1 << v170) & 0x1066) == 0)
          {
            if (v170 == 24)
              goto LABEL_447;
LABEL_454:
            if (v170 == 70)
            {
              v171 = -64;
              goto LABEL_460;
            }
            goto LABEL_455;
          }
        }
LABEL_460:
        v174 = *(_QWORD *)(v3 + 72 + v171 + 16);
        v175 = (_QWORD *)(v174 & 0xFFFFFFFFFFFFFFF8);
        if ((v174 & 4) != 0)
          v175 = (_QWORD *)*v175;
        if (v175)
          v176 = v175 - 8;
        else
          v176 = 0;
        v177 = v176[16];
        if (v177 && ((*(unsigned __int16 *)(v177 + 8) | (*(unsigned __int8 *)(v177 + 10) << 16)) & 0x100000) != 0)
        {
          std::operator+<char>();
          if (SHIBYTE(v217) < 0)
            operator delete(v216[0]);
          *(_OWORD *)v216 = v195;
          v217 = v196;
LABEL_487:
          if (v217 >= 0)
            v183 = v216;
          else
            v183 = (void **)v216[0];
          llvm::raw_ostream::write((llvm::raw_ostream *)&__p, (const char *)v183);
          v184 = __len;
          if ((unint64_t)__len > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_518;
          v185 = __src;
          if ((unint64_t)__len >= 0x17)
          {
            v186 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
            if (((unint64_t)__len | 7) != 0x17)
              v186 = __len | 7;
            v187 = v186 + 1;
            v188 = operator new(v186 + 1);
            v192[1] = v184;
            v192[2] = v187 | 0x8000000000000000;
            *v192 = v188;
            v164 = v188;
          }
          else
          {
            *((_BYTE *)v192 + 23) = __len;
            if (!v184)
            {
LABEL_498:
              v164[v184] = 0;
              llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v197);
              if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v206.__r_.__value_.__l.__data_);
              if (v223 != &v225)
                free(v223);
              llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v207);
              if (SHIBYTE(v217) < 0)
                operator delete(v216[0]);
              llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&__p);
              v62 = __src;
              if (__src == v231)
                return;
LABEL_505:
              free(v62);
              return;
            }
          }
          memmove(v164, v185, v184);
          goto LABEL_498;
        }
LABEL_467:
        if (v193)
        {
          v178 = *(_QWORD *)(*(_QWORD *)(v193 + 24) & 0xFFFFFFFFFFFFFFF0);
          if (v178)
            v179 = *(_BYTE *)(v178 + 16) == 13;
          else
            v179 = 0;
          if (v179)
          {
            v180 = 0;
            goto LABEL_476;
          }
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v178 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 13)
          {
            if (sub_22F10CF48(v178))
            {
              v178 = *(_QWORD *)(*(_QWORD *)(v193 + 24) & 0xFFFFFFFFFFFFFFF0);
              v180 = *(unsigned __int8 *)(v178 + 16) != 13;
LABEL_476:
              if (v180)
                v178 = sub_22F10CF48(v178);
              v181 = *(_QWORD *)(v178 + 32);
LABEL_486:
              *(_QWORD *)&v195 = v181;
              sub_22F119374((uint64_t *)&v195, (__int128 *)v216, (uint64_t)v218);
              goto LABEL_487;
            }
            v169 = *(_DWORD *)(v3 + 28);
          }
        }
        v182 = v169 & 0x7F;
        if (v182 == 55 || v182 == 57)
          goto LABEL_487;
        v181 = *(_QWORD *)(v191 + 24);
        goto LABEL_486;
      }
      v107 = *(_QWORD *)(*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v107)
        v108 = *(_BYTE *)(v107 + 16) == 26;
      else
        v108 = 0;
      if (v108
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v107 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
        && (v107 = sub_22F10CF48(v107)) != 0)
      {
        v109 = v211;
        if ((*(_DWORD *)(v107 + 20) & 0x3FFFC0) == 0)
        {
LABEL_328:
          if ((unint64_t)(v210 - v109) <= 2)
          {
            v106 = "...";
            goto LABEL_330;
          }
          v109[2] = 46;
          *(_WORD *)v109 = 11822;
          v189 = v211 + 3;
          goto LABEL_517;
        }
        if ((unint64_t)(v210 - v211) > 1)
        {
          *(_WORD *)v211 = 8236;
          v109 = v211 + 2;
          v211 += 2;
          goto LABEL_328;
        }
        llvm::raw_ostream::write((llvm::raw_ostream *)&v207, ", ");
      }
      v109 = v211;
      goto LABEL_328;
    }
    if (v7 != 2)
    {
      if (v7 != 24)
      {
        if ((_DWORD)a1 == 6 && v7 == 83)
        {
          *((_BYTE *)v5 + 23) = 9;
          strcpy((char *)v5, "top level");
          return;
        }
        goto LABEL_46;
      }
      __src = v231;
      __len = xmmword_22F44E320;
      sub_22F242C48((uint64_t)&v223, (uint64_t)&__src);
      if ((*(_BYTE *)(v3 + 58) & 2) != 0)
        v48 = 45;
      else
        v48 = 43;
      v49 = v227;
      if ((unint64_t)v227 >= v226)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v223);
      }
      else
      {
        ++v227;
        *v49 = v48;
      }
      v51 = v227;
      if ((unint64_t)v227 >= v226)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v223);
      }
      else
      {
        ++v227;
        *v51 = 91;
      }
      v52 = sub_22EFDC9F0(v3);
      if (v52)
        (*(void (**)(unint64_t, void **))(*(_QWORD *)v52 + 88))(v52, &v223);
      v53 = *(_QWORD *)(v3 + 16);
      v54 = v53 & 0xFFFFFFFFFFFFFFF8;
      if ((v53 & 4) != 0)
        v54 = *(_QWORD *)v54;
      if (v54 && (*(_WORD *)(v54 + 8) & 0x7F) == 0x14)
      {
        v96 = v54 - 48;
        v97 = v227;
        if ((unint64_t)v227 >= v226)
        {
          v98 = (llvm::raw_ostream *)llvm::raw_ostream::write((llvm::raw_ostream *)&v223);
        }
        else
        {
          ++v227;
          *v97 = 40;
          v98 = (llvm::raw_ostream *)&v223;
        }
        v99 = sub_22F3B6C78(v98, v96);
        v100 = (_BYTE *)*((_QWORD *)v99 + 4);
        if ((unint64_t)v100 >= *((_QWORD *)v99 + 3))
        {
          llvm::raw_ostream::write(v99);
        }
        else
        {
          *((_QWORD *)v99 + 4) = v100 + 1;
          *v100 = 41;
        }
      }
      v55 = v227;
      if ((unint64_t)v227 >= v226)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v223);
      }
      else
      {
        ++v227;
        *v55 = 32;
      }
      __p = *(void **)(v3 + 40);
      sub_22F1D3D6C((uint64_t *)&__p, (llvm::raw_ostream *)&v223);
      v56 = v227;
      if ((unint64_t)v227 >= v226)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v223);
      }
      else
      {
        ++v227;
        *v56 = 93;
      }
      v57 = __len;
      if ((unint64_t)__len > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_518;
      v58 = __src;
      if ((unint64_t)__len >= 0x17)
      {
        v59 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
        if (((unint64_t)__len | 7) != 0x17)
          v59 = __len | 7;
        v60 = v59 + 1;
        v61 = operator new(v59 + 1);
        v5[1] = v57;
        v5[2] = v60 | 0x8000000000000000;
        *v5 = v61;
        v5 = v61;
      }
      else
      {
        *((_BYTE *)v5 + 23) = __len;
        if (!v57)
        {
LABEL_163:
          *((_BYTE *)v5 + v57) = 0;
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v223);
          v62 = __src;
          if (__src == v231)
            return;
          goto LABEL_505;
        }
      }
      memmove(v5, v58, v57);
      goto LABEL_163;
    }
    v32 = *(_WORD *)(a2 + 48) & 0x7F;
    v33 = -40;
    if (v32 > 0x46)
    {
      if (v32 == 83)
        goto LABEL_90;
      if (v32 == 71)
      {
        v33 = -56;
        goto LABEL_90;
      }
      if (v32 != 81)
        goto LABEL_85;
    }
    else
    {
      if (v32 > 0x18)
        goto LABEL_84;
      if (v32 == 16)
        goto LABEL_74;
      if (((1 << v32) & 0x1066) == 0)
      {
        if (v32 == 24)
        {
LABEL_74:
          v33 = -48;
          goto LABEL_90;
        }
LABEL_84:
        if (v32 == 70)
        {
          v33 = -64;
          goto LABEL_90;
        }
LABEL_85:
        v36 = v32 - 52;
        v37 = v32 - 33 >= 5;
        v38 = -48;
        if (!v37)
          v38 = -64;
        if (v36 >= 6)
          v33 = v38;
        else
          v33 = -72;
      }
    }
LABEL_90:
    v39 = *(_QWORD *)(a2 + 40 + v33 + 16);
    v40 = v39 & 0xFFFFFFFFFFFFFFF8;
    if ((v39 & 4) != 0)
      v40 = *(_QWORD *)v40;
    if (!v40)
      return;
    while (1)
    {
      v41 = *(_WORD *)(v40 + 8) & 0x7F;
      if (v41 <= 0x18 && ((1 << v41) & 0x1000006) != 0)
      {
        if (v41 != 2)
          break;
        v43 = -40;
        goto LABEL_99;
      }
      v45 = v41 - 52;
      if (v41 - 52 < 6)
        break;
      if (v41 == 16)
        goto LABEL_105;
      v43 = -40;
      if ((*(_WORD *)(v40 + 8) & 0x7Fu) > 0x46)
      {
        if (v41 == 71)
        {
          v43 = -56;
        }
        else if (v41 != 81 && v41 != 83)
        {
LABEL_115:
          if (v41 - 33 >= 5)
            v46 = -48;
          else
            v46 = -64;
          if (v45 >= 6)
            v43 = v46;
          else
            v43 = -72;
        }
      }
      else
      {
        if (v41 <= 0x18)
        {
          if (((1 << v41) & 0x1066) != 0)
            goto LABEL_99;
          if (v41 == 24)
          {
LABEL_105:
            v43 = -48;
            goto LABEL_99;
          }
        }
        if (v41 != 70)
          goto LABEL_115;
        v43 = -64;
      }
LABEL_99:
      v44 = *(_QWORD *)(v40 + v43 + 16);
      v40 = v44 & 0xFFFFFFFFFFFFFFF8;
      if ((v44 & 4) != 0)
        v40 = *(_QWORD *)v40;
      if (!v40)
        return;
    }
    v47 = -40;
    if ((*(_WORD *)(v40 + 8) & 0x7Fu) > 0x46)
    {
      if (v41 != 83)
      {
        if (v41 == 71)
        {
          v47 = -56;
        }
        else if (v41 != 81)
        {
          goto LABEL_171;
        }
      }
    }
    else
    {
      if (v41 > 0x18)
        goto LABEL_170;
      if (v41 == 16)
        goto LABEL_125;
      if (((1 << v41) & 0x1066) == 0)
      {
        if (v41 == 24)
        {
LABEL_125:
          v47 = -48;
        }
        else
        {
LABEL_170:
          if (v41 == 70)
          {
            v47 = -64;
          }
          else
          {
LABEL_171:
            v63 = -48;
            if (v41 - 33 < 5)
              v63 = -64;
            if (v41 - 52 >= 6)
              v47 = v63;
            else
              v47 = -72;
          }
        }
      }
    }
    a2 = v40 + v47;
    a3 = v5;
  }
  if (!a2 || (v7 - 75) < 0xFFFFFFC2)
  {
LABEL_46:
    *((_BYTE *)v5 + 23) = 0;
    *(_BYTE *)v5 = 0;
    return;
  }
  v16 = (uint64_t *)sub_22F368DF4(*(_QWORD *)(v9 + 48), 0);
  if (!sub_22F096440(v16, v3))
  {
    v17 = *(_QWORD *)(v3 + 40);
    if ((v17 & 7) != 0)
      v18 = 0;
    else
      v18 = v17 & 0xFFFFFFFFFFFFFFF8;
    v19 = *(unsigned int **)(v18 + 16);
    v22 = *v19;
    v21 = v19 + 4;
    v20 = v22;
    if (v22 >= 0x17uLL)
    {
      if ((v20 | 7) == 0x17)
        v27 = (v20 & 0xFFFFFFF8) + 8;
      else
        v27 = v20 | 7;
      v28 = operator new(v27 + 1);
      v5[1] = v20;
      v5[2] = v27 - 0x7FFFFFFFFFFFFFFFLL;
      *v5 = v28;
      v5 = v28;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v20;
      if (!v20)
      {
LABEL_53:
        *((_BYTE *)v5 + v20) = 0;
        goto LABEL_54;
      }
    }
    memmove(v5, v21, v20);
    goto LABEL_53;
  }
  __src = v231;
  __len = xmmword_22F44E320;
  sub_22F242C48((uint64_t)&v223, (uint64_t)&__src);
  if ((*(_DWORD *)(v3 + 28) & 0x7F) == 0x39)
  {
    v3 = v3 & 0xFFFFFFFFFFFFFFF8 | 2;
  }
  else if ((*(_DWORD *)(v3 + 28) & 0x7F) == 0x37)
  {
    v3 = v3 & 0xFFFFFFFFFFFFFFF8 | 1;
  }
  else if (sub_22E462B18(v3) && sub_22E462B18(v3))
  {
    v3 = v3 & 0xFFFFFFFFFFFFFFF8 | ((*(_WORD *)(sub_22EFC8868(v3) + 96) & 0x80) == 0);
  }
  sub_22F0966E8(v16, v3, 0, (llvm::raw_ostream *)&v223);
  v72 = __len;
  if ((_QWORD)__len)
  {
    v73 = (char *)__src;
    if (*(_BYTE *)__src == 1)
    {
      v74 = __len - 1;
      if ((unint64_t)(__len - 1) <= 0x7FFFFFFFFFFFFFF7)
      {
        if ((unint64_t)__len >= 0x18)
        {
          v89 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v74 | 7) != 0x17)
            v89 = v74 | 7;
          v90 = v89 + 1;
          v91 = operator new(v89 + 1);
          v5[1] = v74;
          v5[2] = v90 | 0x8000000000000000;
          *v5 = v91;
          v5 = v91;
        }
        else
        {
          *((_BYTE *)v5 + 23) = v74;
          if (v72 == 1)
          {
LABEL_275:
            v92 = (char *)v5 + v74;
            goto LABEL_281;
          }
        }
        memmove(v5, v73 + 1, v74);
        goto LABEL_275;
      }
LABEL_518:
      abort();
    }
    if ((unint64_t)__len > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_518;
    if ((unint64_t)__len >= 0x17)
    {
      v93 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if (((unint64_t)__len | 7) != 0x17)
        v93 = __len | 7;
      v94 = v93 + 1;
      v95 = operator new(v93 + 1);
      v5[1] = v72;
      v5[2] = v94 | 0x8000000000000000;
      *v5 = v95;
      v5 = v95;
    }
    else
    {
      *((_BYTE *)v5 + 23) = __len;
    }
    memmove(v5, v73, v72);
  }
  else
  {
    *((_BYTE *)v5 + 23) = 0;
  }
  v92 = (char *)v5 + v72;
LABEL_281:
  *v92 = 0;
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v223);
  if (__src != v231)
    free(__src);
LABEL_54:
  if (v16)
    (*(void (**)(uint64_t *))(*v16 + 16))(v16);
}

_QWORD *sub_22EFF8E88(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  size_t v7;

  v3 = result;
  v4 = *(unsigned int *)(a3 + 8);
  *((_DWORD *)result + 2) = v4;
  v5 = (unint64_t)(v4 + 63) >> 6;
  if (v4 >= 0x41)
    v6 = *(_QWORD **)a3;
  else
    v6 = (_QWORD *)a3;
  if (v5 < 2)
  {
    if ((_DWORD)v5 == 1)
      *result = *v6;
    else
      *result = 0;
  }
  else
  {
    v7 = 8 * v5;
    result = (_QWORD *)sub_22E3CD3D4(a2 + 2032, 8 * v5, 3);
    *v3 = result;
    if ((_DWORD)v4)
      return memmove(result, v6, v7);
  }
  return result;
}

uint64_t sub_22EFF8F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  *(_BYTE *)a1 = -75;
  if (byte_255E04EB3)
  {
    v10 = a5;
    v11 = a3;
    v8 = a4;
    v9 = a2;
    v7 = sub_22F0D3748(181);
    a4 = v8;
    a2 = v9;
    a5 = v10;
    a3 = v11;
    ++*((_DWORD *)v7 + 2);
  }
  *(_DWORD *)a1 &= 0xFFFC00FF;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = a5;
  sub_22EFF8E88((_QWORD *)(a1 + 16), a2, a3);
  *(_DWORD *)a1 &= 0xFFFC1FFF;
  return a1;
}

uint64_t sub_22EFF8FB0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;

  v8 = sub_22E3CD3D4(a1 + 2032, 32, 3);
  return sub_22EFF8F1C(v8, a1, a2, a3, a4);
}

uint64_t sub_22EFF9000(uint64_t a1)
{
  uint64_t result;
  char *v2;
  uint64_t v3;

  result = sub_22E3CD3D4(a1 + 2032, 32, 3);
  *(_BYTE *)result = -75;
  if (byte_255E04EB3)
  {
    v3 = result;
    v2 = sub_22F0D3748(181);
    result = v3;
    ++*((_DWORD *)v2 + 2);
  }
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

_QWORD *sub_22EFF906C(unsigned int a1, int a2, char **this)
{
  llvm::raw_ostream *v3;
  char *v6;
  char v7;
  char *v8;
  llvm::raw_ostream *v9;
  _QWORD *result;
  size_t v11;
  _QWORD *v12;
  size_t v13;
  _BYTE *v14;
  void *v15;
  _BYTE *v16;
  BOOL v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;

  v3 = (llvm::raw_ostream *)this;
  switch(a2)
  {
    case 1:
      v6 = this[4];
      if (v6 < this[3])
      {
        this[4] = v6 + 1;
        v7 = 76;
        goto LABEL_10;
      }
      v9 = (llvm::raw_ostream *)this;
      goto LABEL_14;
    case 2:
      v8 = this[4];
      if ((unint64_t)(this[3] - v8) > 1)
      {
        *(_WORD *)v8 = 14453;
        this[4] += 2;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)this, "u8");
      }
      goto LABEL_15;
    case 3:
      v6 = this[4];
      if (v6 < this[3])
      {
        this[4] = v6 + 1;
        v7 = 117;
        goto LABEL_10;
      }
      v9 = (llvm::raw_ostream *)this;
      goto LABEL_14;
    case 4:
      v6 = this[4];
      if (v6 >= this[3])
      {
        v9 = (llvm::raw_ostream *)this;
LABEL_14:
        llvm::raw_ostream::write(v9);
      }
      else
      {
        this[4] = v6 + 1;
        v7 = 85;
LABEL_10:
        *v6 = v7;
      }
LABEL_15:
      result = sub_22F3C15E8(a1);
      if (v11)
      {
        v12 = result;
        v13 = v11;
        v14 = (_BYTE *)*((_QWORD *)v3 + 4);
        if (*((_BYTE **)v3 + 3) == v14)
        {
          v3 = (llvm::raw_ostream *)llvm::raw_ostream::write(v3, "'");
          v15 = (void *)*((_QWORD *)v3 + 4);
        }
        else
        {
          *v14 = 39;
          v15 = (void *)(*((_QWORD *)v3 + 4) + 1);
          *((_QWORD *)v3 + 4) = v15;
        }
        if (v13 <= *((_QWORD *)v3 + 3) - (_QWORD)v15)
        {
          result = memcpy(v15, v12, v13);
          v16 = (_BYTE *)(*((_QWORD *)v3 + 4) + v13);
          *((_QWORD *)v3 + 4) = v16;
        }
        else
        {
          result = (_QWORD *)llvm::raw_ostream::write(v3, (const char *)v12);
          v3 = (llvm::raw_ostream *)result;
          v16 = (_BYTE *)result[4];
        }
        v21 = (_BYTE *)*((_QWORD *)v3 + 3);
LABEL_33:
        if (v21 == v16)
          return (_QWORD *)llvm::raw_ostream::write(v3, "'");
        *v16 = 39;
        ++*((_QWORD *)v3 + 4);
        return result;
      }
      if (a2)
        v17 = 0;
      else
        v17 = a1 > 0xFFFFFEFF;
      if (v17)
        a1 = a1;
      if (a1 > 0xFF)
      {
        v22 = *((_QWORD *)v3 + 4);
        v23 = *((_QWORD *)v3 + 3) - v22;
        if (HIWORD(a1))
        {
          if (v23 > 2)
          {
            *(_BYTE *)(v22 + 2) = 85;
            *(_WORD *)v22 = 23591;
            *((_QWORD *)v3 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(v3, "'\\U");
          }
        }
        else if (v23 > 2)
        {
          *(_BYTE *)(v22 + 2) = 117;
          *(_WORD *)v22 = 23591;
          *((_QWORD *)v3 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v3, "'\\u");
        }
      }
      else
      {
        v19 = (_BYTE *)*((_QWORD *)v3 + 3);
        v18 = (_BYTE *)*((_QWORD *)v3 + 4);
        if ((word_22F4ADB24[a1] & 0x7EC) != 0)
        {
          if (v19 == v18)
          {
            result = (_QWORD *)llvm::raw_ostream::write(v3, "'");
            v3 = (llvm::raw_ostream *)result;
            v20 = (_BYTE *)result[4];
          }
          else
          {
            *v18 = 39;
            v20 = (_BYTE *)(*((_QWORD *)v3 + 4) + 1);
            *((_QWORD *)v3 + 4) = v20;
          }
          if ((unint64_t)v20 >= *((_QWORD *)v3 + 3))
          {
            result = (_QWORD *)llvm::raw_ostream::write(v3);
            v3 = (llvm::raw_ostream *)result;
          }
          else
          {
            *((_QWORD *)v3 + 4) = v20 + 1;
            *v20 = a1;
          }
          v21 = (_BYTE *)*((_QWORD *)v3 + 3);
          v16 = (_BYTE *)*((_QWORD *)v3 + 4);
          goto LABEL_33;
        }
        if ((unint64_t)(v19 - v18) > 2)
        {
          v18[2] = 120;
          *(_WORD *)v18 = 23591;
          *((_QWORD *)v3 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v3, "'\\x");
        }
      }
      result = (_QWORD *)llvm::raw_ostream::operator<<();
      v24 = (_BYTE *)result[4];
      if ((_BYTE *)result[3] == v24)
        return (_QWORD *)llvm::raw_ostream::write((llvm::raw_ostream *)result, "'");
      *v24 = 39;
      ++result[4];
      return result;
    default:
      goto LABEL_15;
  }
}

uint64_t sub_22EFF9470(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  char v10;
  int v11;
  uint64_t v13;
  char *v14;
  int v15;

  *(_BYTE *)a1 = -86;
  if (byte_255E04EB3)
  {
    v15 = a6;
    v13 = a5;
    v14 = sub_22F0D3748(170);
    a5 = v13;
    a6 = v15;
    ++*((_DWORD *)v14 + 2);
  }
  *(_DWORD *)a1 &= 0xFFFC00FF;
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = a6;
  v10 = llvm::APFloatBase::SemanticsToEnum();
  if (a4)
    v11 = 0x400000;
  else
    v11 = 0;
  *(_DWORD *)a1 = v11 & 0xFFC3FFFF | ((v10 & 0xF) << 18) | *(_DWORD *)a1 & 0xFF83FFFF;
  sub_22E7BE114((llvm::APFloatBase *)(a1 + 16), a2, a3);
  *(_DWORD *)a1 &= 0xFFFC1FFF;
  return a1;
}

uint64_t sub_22EFF9554(_QWORD *a1, int a2)
{
  unsigned int v2;
  int v4;

  if (a2)
  {
    switch(a2)
    {
      case 1:
        v4 = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 128);
        goto LABEL_10;
      case 2:
        goto LABEL_2;
      case 3:
        v4 = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 136);
        goto LABEL_10;
      case 4:
        v4 = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 140);
LABEL_10:
        v2 = sub_22F1E724C(a1, v4);
        break;
      default:
        v2 = 0;
        break;
    }
  }
  else
  {
LABEL_2:
    v2 = 8;
  }
  return v2 >> 3;
}

uint64_t sub_22EFF95DC(uint64_t a1, uint64_t a2, const void *a3, unsigned int a4, int a5, int a6, uint64_t a7, const void *a8, unsigned int a9)
{
  int v15;
  unsigned int v16;
  int v17;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  *(_BYTE *)a1 = -31;
  if (byte_255E04EB3)
  {
    v20 = a2;
    v21 = a7;
    v19 = sub_22F0D3748(225);
    a2 = v20;
    a7 = v21;
    ++*((_DWORD *)v19 + 2);
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC00FF | 0x100;
  *(_QWORD *)(a1 + 8) = a7;
  v15 = sub_22EFF9554(*(_QWORD **)(a2 + 15088), a5);
  if (v15 == 1)
  {
    v16 = a4;
  }
  else if (v15 == 4)
  {
    v16 = a4 >> 2;
  }
  else
  {
    v16 = a4 >> 1;
  }
  if (a6)
    v17 = 0x1000000;
  else
    v17 = 0;
  *(_DWORD *)a1 = v17 & 0xFF03FFFF | ((a5 & 7) << 18) & 0xFF1FFFFF | ((v15 & 7) << 21) | *(_DWORD *)a1 & 0xFE03FFFF;
  *(_DWORD *)(a1 + 4) = a9;
  *(_DWORD *)(a1 + 16) = v16;
  memcpy((void *)(a1 + 20), a8, 4 * a9);
  memcpy((void *)(a1 + 20 + 4 * a9), a3, a4);
  *(_DWORD *)a1 &= 0xFFFC1FFF;
  return a1;
}

uint64_t sub_22EFF9708(uint64_t a1, const void *a2, uint64_t a3, int a4, int a5, uint64_t a6, const void *a7, unsigned int a8)
{
  unsigned int v13;
  uint64_t v16;

  v13 = a3;
  v16 = sub_22E3CD3D4(a1 + 2032, a3 + 4 * a8 + 20, 3);
  return sub_22EFF95DC(v16, a1, a2, v13, a4, a5, a6, a7, a8);
}

llvm::raw_ostream *sub_22EFF9798(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  llvm::raw_ostream *v3;
  char *v4;
  char v5;
  _WORD *v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  llvm::raw_ostream *v16;
  size_t v17;
  void *v18;
  _WORD *v21;
  _WORD *v23;
  _BYTE *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v29;
  int v30;
  char v31;
  char *v32;
  unint64_t v33;
  llvm::raw_ostream *v34;
  char *v35;
  char v36;
  _BYTE *v37;
  _BYTE *v38;
  char v39;
  char v40;
  char *v41;
  char v42;
  char *v43;
  char v44;
  char *v45;
  char v46;
  char *v47;
  char *v48;
  _BYTE *v49;
  unsigned int v50;
  char *v51;

  v3 = result;
  switch((*(_DWORD *)result >> 18) & 7)
  {
    case 1:
      v4 = (char *)*((_QWORD *)this + 4);
      if ((unint64_t)v4 < *((_QWORD *)this + 3))
      {
        *((_QWORD *)this + 4) = v4 + 1;
        v5 = 76;
        goto LABEL_10;
      }
      v7 = this;
      goto LABEL_14;
    case 2:
      v6 = (_WORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v6 > 1uLL)
      {
        *v6 = 14453;
        *((_QWORD *)this + 4) += 2;
      }
      else
      {
        result = (llvm::raw_ostream *)llvm::raw_ostream::write(this, "u8");
      }
      goto LABEL_15;
    case 3:
      v4 = (char *)*((_QWORD *)this + 4);
      if ((unint64_t)v4 < *((_QWORD *)this + 3))
      {
        *((_QWORD *)this + 4) = v4 + 1;
        v5 = 117;
        goto LABEL_10;
      }
      v7 = this;
      goto LABEL_14;
    case 4:
      v4 = (char *)*((_QWORD *)this + 4);
      if ((unint64_t)v4 >= *((_QWORD *)this + 3))
      {
        v7 = this;
LABEL_14:
        result = (llvm::raw_ostream *)llvm::raw_ostream::write(v7);
      }
      else
      {
        *((_QWORD *)this + 4) = v4 + 1;
        v5 = 85;
LABEL_10:
        *v4 = v5;
      }
LABEL_15:
      v8 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v8 >= *((_QWORD *)this + 3))
      {
        result = (llvm::raw_ostream *)llvm::raw_ostream::write(this);
      }
      else
      {
        *((_QWORD *)this + 4) = v8 + 1;
        *v8 = 34;
      }
      v9 = *((_DWORD *)v3 + 4);
      if (!v9)
        goto LABEL_113;
      v10 = 0;
      v51 = (char *)v3 + 20;
      v50 = *((_DWORD *)v3 + 4);
      break;
    default:
      goto LABEL_15;
  }
  do
  {
    v11 = *(_DWORD *)v3;
    v12 = (*(_DWORD *)v3 >> 21) & 7;
    if (v12 == 4)
    {
      v13 = *((unsigned int *)v3 + 1);
      v14 = *(unsigned int *)&v51[4 * v13 + 4 * v10];
    }
    else
    {
      v13 = *((unsigned int *)v3 + 1);
      if (v12 == 2)
        v14 = *(unsigned __int16 *)&v51[4 * v13 + 2 * v10];
      else
        v14 = v51[4 * v13 + v10];
    }
    result = (llvm::raw_ostream *)sub_22F3C1858(v14);
    if (v15)
    {
      v16 = result;
      v17 = v15;
      v18 = (void *)*((_QWORD *)this + 4);
      if (v15 <= *((_QWORD *)this + 3) - (_QWORD)v18)
      {
        result = (llvm::raw_ostream *)memcpy(v18, v16, v15);
        *((_QWORD *)this + 4) += v17;
      }
      else
      {
        result = (llvm::raw_ostream *)llvm::raw_ostream::write(this, (const char *)v16);
      }
      goto LABEL_107;
    }
    if ((v11 & 0x1C0000) != 0xC0000 || v10 == v9 - 1 || (v14 & 0xFFFFFC00) != 55296)
      goto LABEL_35;
    v26 = v10 + 1;
    if (v12 == 4)
    {
      v27 = *(_DWORD *)&v51[4 * v13 + 4 * v26];
    }
    else if (v12 == 2)
    {
      v27 = *(unsigned __int16 *)&v51[4 * v13 + 2 * v26];
    }
    else
    {
      v27 = v51[4 * v13 + v26];
    }
    if (v27 >> 10 == 55)
    {
      v14 = v27 + ((_DWORD)v14 << 10) - 56613888;
      ++v10;
LABEL_35:
      if (v14 < 0x100)
      {
        if (v50 + 1 == v10
          && (v14 - 48) <= 0x36
          && ((1 << (v14 - 48)) & 0x7E0000007E03FFLL) != 0)
        {
          v23 = (_WORD *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v23 > 1uLL)
          {
            *v23 = 8738;
            *((_QWORD *)this + 4) += 2;
          }
          else
          {
            result = (llvm::raw_ostream *)llvm::raw_ostream::write(this, "\"\"");
          }
        }
        v25 = *((_QWORD *)this + 3);
        v24 = (_BYTE *)*((_QWORD *)this + 4);
        if ((word_22F4ADB24[v14] & 0x7EC) != 0)
        {
          if ((unint64_t)v24 < v25)
          {
            *((_QWORD *)this + 4) = v24 + 1;
            *v24 = v14;
            goto LABEL_107;
          }
          result = this;
        }
        else
        {
          if ((unint64_t)v24 >= v25)
          {
            result = (llvm::raw_ostream *)llvm::raw_ostream::write(this);
          }
          else
          {
            *((_QWORD *)this + 4) = v24 + 1;
            *v24 = 92;
            result = this;
          }
          v37 = (_BYTE *)*((_QWORD *)result + 4);
          if ((unint64_t)v37 >= *((_QWORD *)result + 3))
          {
            result = (llvm::raw_ostream *)llvm::raw_ostream::write(result);
          }
          else
          {
            *((_QWORD *)result + 4) = v37 + 1;
            *v37 = (v14 >> 6) | 0x30;
          }
          v38 = (_BYTE *)*((_QWORD *)result + 4);
          if ((unint64_t)v38 >= *((_QWORD *)result + 3))
          {
            result = (llvm::raw_ostream *)llvm::raw_ostream::write(result);
          }
          else
          {
            *((_QWORD *)result + 4) = v38 + 1;
            *v38 = (v14 >> 3) & 7 | 0x30;
          }
          v39 = v14 & 7 | 0x30;
LABEL_104:
          v48 = (char *)*((_QWORD *)result + 4);
          if ((unint64_t)v48 < *((_QWORD *)result + 3))
          {
            *((_QWORD *)result + 4) = v48 + 1;
            *v48 = v39;
            goto LABEL_107;
          }
        }
        result = (llvm::raw_ostream *)llvm::raw_ostream::write(result);
        goto LABEL_107;
      }
      v21 = (_WORD *)*((_QWORD *)this + 4);
      if ((v11 & 0x1C0000) == 0x40000)
        goto LABEL_65;
      goto LABEL_60;
    }
    v21 = (_WORD *)*((_QWORD *)this + 4);
LABEL_60:
    if (WORD1(v14) <= 0x10u && (v14 & 0xFFFFF800) != 55296)
    {
      v33 = *((_QWORD *)this + 3) - (_QWORD)v21;
      if (v14 < 0x10000)
      {
        if (v33 > 1)
        {
          *v21 = 30044;
          *((_QWORD *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, "\\u");
        }
      }
      else
      {
        if (v33 > 3)
        {
          *(_DWORD *)v21 = 808473948;
          v35 = (char *)(*((_QWORD *)this + 4) + 4);
          *((_QWORD *)this + 4) = v35;
          v34 = this;
        }
        else
        {
          v34 = (llvm::raw_ostream *)llvm::raw_ostream::write(this, "\\U00");
          v35 = (char *)*((_QWORD *)v34 + 4);
        }
        v36 = a0123456789abcd_1[(unint64_t)v14 >> 20];
        if ((unint64_t)v35 >= *((_QWORD *)v34 + 3))
        {
          v34 = (llvm::raw_ostream *)llvm::raw_ostream::write(v34);
        }
        else
        {
          *((_QWORD *)v34 + 4) = v35 + 1;
          *v35 = v36;
        }
        v40 = a0123456789abcd_1[(v14 >> 16) & 0xF];
        v41 = (char *)*((_QWORD *)v34 + 4);
        if ((unint64_t)v41 >= *((_QWORD *)v34 + 3))
        {
          llvm::raw_ostream::write(v34);
        }
        else
        {
          *((_QWORD *)v34 + 4) = v41 + 1;
          *v41 = v40;
        }
      }
      v42 = a0123456789abcd_1[(unsigned __int16)v14 >> 12];
      v43 = (char *)*((_QWORD *)this + 4);
      if ((unint64_t)v43 >= *((_QWORD *)this + 3))
      {
        result = (llvm::raw_ostream *)llvm::raw_ostream::write(this);
      }
      else
      {
        *((_QWORD *)this + 4) = v43 + 1;
        *v43 = v42;
        result = this;
      }
      v44 = a0123456789abcd_1[(v14 >> 8) & 0xF];
      v45 = (char *)*((_QWORD *)result + 4);
      if ((unint64_t)v45 >= *((_QWORD *)result + 3))
      {
        result = (llvm::raw_ostream *)llvm::raw_ostream::write(result);
      }
      else
      {
        *((_QWORD *)result + 4) = v45 + 1;
        *v45 = v44;
      }
      v46 = a0123456789abcd_1[v14 >> 4];
      v47 = (char *)*((_QWORD *)result + 4);
      if ((unint64_t)v47 >= *((_QWORD *)result + 3))
      {
        result = (llvm::raw_ostream *)llvm::raw_ostream::write(result);
      }
      else
      {
        *((_QWORD *)result + 4) = v47 + 1;
        *v47 = v46;
      }
      v39 = a0123456789abcd_1[v14 & 0xF];
      goto LABEL_104;
    }
LABEL_65:
    if (*((_QWORD *)this + 3) - (_QWORD)v21 > 1uLL)
    {
      *v21 = 30812;
      *((_QWORD *)this + 4) += 2;
    }
    else
    {
      result = (llvm::raw_ostream *)llvm::raw_ostream::write(this, "\\x");
    }
    v29 = 32;
    do
    {
      v30 = v29;
      v29 -= 4;
    }
    while (!(v14 >> v29));
    if ((v29 & 0x80000000) == 0)
    {
      do
      {
        v30 -= 4;
        v31 = a0123456789abcd_1[(v14 >> v30) & 0xFLL];
        v32 = (char *)*((_QWORD *)this + 4);
        if ((unint64_t)v32 >= *((_QWORD *)this + 3))
        {
          result = (llvm::raw_ostream *)llvm::raw_ostream::write(this);
        }
        else
        {
          *((_QWORD *)this + 4) = v32 + 1;
          *v32 = v31;
        }
      }
      while (v30 > 3);
    }
    v50 = v10;
LABEL_107:
    ++v10;
  }
  while (v10 != v9);
LABEL_113:
  v49 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v49 >= *((_QWORD *)this + 3))
    return (llvm::raw_ostream *)llvm::raw_ostream::write(this);
  *((_QWORD *)this + 4) = v49 + 1;
  *v49 = 34;
  return result;
}

uint64_t sub_22EFF9E30(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4, uint64_t a5, unsigned int *a6, int *a7)
{
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned __int16 *v16;
  _DWORD *v17;
  int v18;
  int v19;
  unsigned int v20;
  char v21;
  unsigned int v24;
  uint64_t v28;
  int v29;
  unsigned int v31[6];
  unsigned __int16 *v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  void *v37;
  __int128 v38;
  _BYTE v39[512];
  _BYTE *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  _WORD v44[24];
  _QWORD v45[8];
  void *v46;
  uint64_t v47;
  _QWORD v48[18];

  v8 = a2;
  v48[16] = *MEMORY[0x24BDAC8D0];
  if (a6)
    v9 = *a6;
  else
    v9 = 0;
  if (a7)
  {
    v29 = *a7;
    v8 = (a2 - *a7);
  }
  else
  {
    v29 = 0;
  }
  v28 = a1 + 20;
  while (1)
  {
    v10 = *(_DWORD *)(v28 + 4 * v9);
    v11 = v10;
    v12 = v10;
    if (v10 < 0)
    {
      v12 = sub_22F1E238C(a3, *(_DWORD *)(v28 + 4 * v9));
      v11 = v12;
    }
    v13 = sub_22E677168((uint64_t)a3, v11);
    sub_22F1E1E78(a3, v13, (uint64_t)&v32);
    if (!(_BYTE)v34)
      break;
    v14 = v8;
    v16 = v32;
    v15 = v33;
    v17 = sub_22E49F3DC(a3, v13);
    if (v17)
      v18 = *v17 & 0x7FFFFFFF;
    else
      v18 = 0;
    sub_22F140DA4((uint64_t)v45, v18, a4, v16, (unsigned __int16 *)((char *)v16 + HIDWORD(v13)), (uint64_t)v15 + (_QWORD)v16, 1);
    sub_22F14651C(v45, (uint64_t)v31);
    v32 = (unsigned __int16 *)a3;
    v33 = a4;
    v35 = 0;
    v36[0] = 0;
    *(_QWORD *)((char *)v36 + 6) = 0;
    v34 = a5;
    v37 = v39;
    v38 = xmmword_22F45DFC0;
    v40 = v39;
    v41 = v44;
    v42 = 0;
    v43 = 32;
    v44[20] = 0;
    sub_22F14D524((uint64_t)&v32, (uint64_t)v31, 1);
    v19 = (_DWORD)v40 - (_DWORD)v37;
    v8 = v14;
    if (v14 < (int)v40 - (int)v37 || (_DWORD)v14 == v19 && v9 == *(_DWORD *)(a1 + 4) - 1)
    {
      v20 = sub_22F411D88((uint64_t)&v32, v31, v14);
      if (a7)
        *a7 = v29;
      if (a6)
        *a6 = v9;
      v21 = 0;
      v24 = sub_22F1418F4(v10, v20, a3, a4) + v10;
    }
    else
    {
      v29 += v19;
      ++v9;
      v21 = 1;
      v8 = (v14 - v19);
    }
    if (v41 != v44)
      free(v41);
    if (v37 != v39)
      free(v37);
    v45[0] = &unk_24FAC8A48;
    sub_22E730D24((uint64_t)v48);
    if (v46 != &v47)
      free(v46);
    if ((v21 & 1) == 0)
      return v24;
  }
  if (a7)
    *a7 = v29;
  if (a6)
    *a6 = v9;
  return v12;
}

char *sub_22EFFA120(int a1)
{
  return off_24FAC5528[a1];
}

uint64_t sub_22EFFA13C(int a1, int a2)
{
  unsigned int v3;
  unsigned int v4;

  if (a1 == 7)
    return 5;
  if (a1 <= 36)
    return ((uint64_t (*)(uint64_t))((char *)nullsub_756 + 4 * byte_22F4A26AD[a1 - 5]))(4);
  if (a2)
    v3 = 0;
  else
    v3 = 2;
  if (a2)
    v4 = 1;
  else
    v4 = 3;
  if (a1 != 38)
    v4 = 13;
  if (a1 == 37)
    return v3;
  else
    return v4;
}

uint64_t sub_22EFFA1A8()
{
  return 7;
}

uint64_t sub_22EFFA1B0()
{
  return nullsub_756(9);
}

uint64_t sub_22EFFA1B8()
{
  return 6;
}

uint64_t sub_22EFFA1C4()
{
  return 8;
}

uint64_t sub_22EFFA1CC(unsigned int a1)
{
  if (a1 > 0xD)
    return 0;
  else
    return dword_22F4A2CF0[a1];
}

unsigned int *sub_22EFFA1EC(unsigned int *a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, int a10, unsigned int a11, unint64_t a12, unsigned int a13, char a14)
{
  char v21;
  unsigned int v22;
  char *v23;
  unsigned int *v24;
  int v25;
  unsigned int v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unsigned int v36;
  uint64_t v38;

  v21 = a9;
  v22 = a11;
  *(_BYTE *)a1 = a2;
  if (byte_255E04EB3)
  {
    v38 = a8;
    v23 = sub_22F0D3748(a2);
    v22 = a11;
    a8 = v38;
    v21 = a9;
    ++*((_DWORD *)v23 + 2);
  }
  *((_QWORD *)a1 + 1) = a8;
  v24 = a1 + 2;
  v25 = *a1 & 0xF000FF;
  if (a7 <= a13)
    v26 = a13;
  else
    v26 = a7;
  a1[4] = v26;
  a1[5] = v22;
  v27 = dword_22F4A2D28[a2 - 138];
  if (a14)
    v28 = 0x80000;
  else
    v28 = 0;
  *a1 = ((a5 & 1) << 18) | ((v21 & 3) << 8) | v25 | v28 | v27;
  *(_QWORD *)((char *)a1 + (v27 >> 24)) = a3;
  if (a5)
  {
    v29 = 0;
    do
    {
      *(_QWORD *)((char *)&a1[v29 + 2] + *((unsigned __int8 *)a1 + 3)) = *(_QWORD *)(a4 + v29 * 4);
      v29 += 2;
    }
    while (2 * a5 != v29);
  }
  v30 = *a1;
  v31 = v30 >> 24;
  if (a7)
  {
    v32 = 0;
    do
    {
      *(_QWORD *)((char *)&v24[2 * ((v30 >> 18) & 1) + 2 * v32] + v31) = *(_QWORD *)(a6 + 8 * v32);
      ++v32;
    }
    while (a7 != v32);
  }
  if (a7 >= a13)
  {
    v33 = (v30 >> 18) & 1;
  }
  else
  {
    v33 = (v30 >> 18) & 1;
    v34 = (uint64_t)&v24[2 * v33] + v31;
    do
    {
      *(_QWORD *)(v34 + 8 * a7) = 0;
      LODWORD(a7) = a7 + 1;
    }
    while (v26 != (_DWORD)a7);
  }
  v35 = (char *)a1 + v31;
  v36 = ((HIDWORD(a12) != 0) << 20) | ((sub_22EFB2A44(a1, (_DWORD **)((char *)a1 + v31 + 8), v33) & 0x1F) << 13) | v30 & 0xFFEC1FFF;
  *a1 = v36;
  if (HIDWORD(a12))
    *(_QWORD *)&v35[8 * v26 + 8 + 8 * ((v36 >> 18) & 1)] = a12;
  return a1;
}

uint64_t sub_22EFFA3DC(uint64_t result, int a2, char a3, int a4, int a5)
{
  int v5;
  char *v6;
  char *v7;
  int v8;
  int v9;
  int v10;
  char v11;
  uint64_t v12;

  *(_BYTE *)result = a2;
  if (byte_255E04EB3)
  {
    v12 = result;
    v11 = a3;
    v9 = a5;
    v10 = a2;
    v8 = a4;
    v6 = sub_22F0D3748(a2);
    a4 = v8;
    a5 = v9;
    a2 = v10;
    a3 = v11;
    v7 = v6;
    result = v12;
    ++*((_DWORD *)v7 + 2);
  }
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = a4;
  *(_DWORD *)(result + 20) = 0;
  if (a5)
    v5 = 0x100000;
  else
    v5 = 0;
  *(_DWORD *)result = v5 & 0xFFFBFFFF | ((a3 & 1) << 18) | *(_DWORD *)result & 0xEBFFFF | dword_22F4A2D28[a2 - 138];
  return result;
}

unsigned int *sub_22EFFA488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, unsigned int a7, unint64_t a8, unsigned int a9, char a10)
{
  int v17;
  int v18;
  unsigned int *v19;
  int v21;

  if (a4 <= a9)
    v17 = a9;
  else
    v17 = a4;
  if (HIDWORD(a8))
    v18 = 16;
  else
    v18 = 8;
  v19 = (unsigned int *)sub_22E3CD3D4(a1 + 2032, (v18 + 8 * v17) + 24, 3);
  return sub_22EFFA1EC(v19, 138, a2, 0, 0, a3, a4, a5, a6, v21, a7, a8, a9, a10);
}

uint64_t sub_22EFFA550(uint64_t a1, int a2, int a3)
{
  int v5;
  uint64_t result;
  int v7;
  char *v8;
  uint64_t v9;

  if (a3)
    v5 = 8;
  else
    v5 = 0;
  result = sub_22E3CD3D4(a1 + 2032, (v5 + 8 * a2 + 8) + 24, 3);
  *(_BYTE *)result = -118;
  if (byte_255E04EB3)
  {
    v9 = result;
    v8 = sub_22F0D3748(138);
    result = v9;
    ++*((_DWORD *)v8 + 2);
  }
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = a2;
  *(_DWORD *)(result + 20) = 0;
  if (a3)
    v7 = 403701760;
  else
    v7 = 402653184;
  *(_DWORD *)result = *(_DWORD *)result & 0xEBFFFF | v7;
  return result;
}

uint64_t sub_22EFFA604(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  int v2;
  unsigned __int8 **v3;
  unsigned __int8 *v4;

  while (1)
  {
    v1 = sub_22EFFA6B0(a1);
    v2 = *v1;
    if (v2 != 226)
      break;
    a1 = (unsigned __int8 *)*((_QWORD *)v1 + 3);
  }
  while ((v2 & 0xFE) == 0x70)
  {
    v2 = *(_DWORD *)v1;
    if ((*(_DWORD *)v1 & 0xF80000) != 0)
      goto LABEL_11;
    v3 = (unsigned __int8 **)(v1 + 24);
LABEL_5:
    v1 = sub_22EFFA6B0(*v3);
    v2 = *v1;
  }
  if (v2 != 233)
    goto LABEL_12;
  v2 = *(_DWORD *)v1;
  if (((*(_DWORD *)v1 >> 18) & 0x1Fu) - 4 <= 2)
  {
    v3 = (unsigned __int8 **)(v1 + 16);
    goto LABEL_5;
  }
LABEL_11:
  v2 = v2;
LABEL_12:
  switch(v2)
  {
    case 114:
LABEL_15:
      v4 = v1 + 16;
      return *(_QWORD *)v4;
    case 188:
      v4 = v1 + 24;
      return *(_QWORD *)v4;
    case 161:
      goto LABEL_15;
  }
  return 0;
}

unsigned __int8 *sub_22EFFA6B0(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  int v7;
  unsigned __int8 **v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  const void **v17;
  uint64_t v18;
  const void *v19;
  void **v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;
  _BYTE v27[64];

  v23 = v27;
  v24 = v27;
  v25 = 8;
  v26 = 0;
  if (!a1)
    return 0;
  v1 = a1;
  do
  {
    v2 = v1;
    v3 = *v1;
    if (v3 > 0xD5)
    {
      if (v3 == 233)
      {
        if ((*(_DWORD *)v1 & 0x7C0000) != 0x300000)
          break;
        v5 = v1 + 16;
      }
      else
      {
        if (v3 != 214)
          goto LABEL_18;
        v5 = v1 + 24;
      }
    }
    else if (v3 == 155)
    {
      if ((**((_DWORD **)v1 + 2) & 0x18000) != 0)
        goto LABEL_22;
      if (v1[48])
        v5 = v1 + 24;
      else
        v5 = v1 + 32;
    }
    else
    {
      if (v3 != 176)
        goto LABEL_18;
      v4 = *((unsigned int *)v1 + 5);
      if ((_DWORD)v4 == -1)
        break;
      v5 = &v1[8 * v4 + 40];
    }
    v1 = *(unsigned __int8 **)v5;
    v3 = **(unsigned __int8 **)v5;
LABEL_18:
    if (v3 == 153 || (v3 & 0xFE) == 0xAC)
    {
      v6 = (unsigned __int8 **)(v1 + 16);
LABEL_21:
      v1 = *v6;
      goto LABEL_22;
    }
    if (v3 == 226)
    {
      v6 = (unsigned __int8 **)(v1 + 24);
      goto LABEL_21;
    }
    if (v3 == 186)
    {
      v15 = *((_QWORD *)v1 + 2);
      v1 = (unsigned __int8 *)(v15 & 0xFFFFFFFFFFFFFFF8);
      if ((v15 & 4) != 0)
      {
        v6 = (unsigned __int8 **)(v1 + 40);
        goto LABEL_21;
      }
    }
LABEL_22:
    v7 = *v1;
    if (v7 == 110 || v7 == 168)
      goto LABEL_24;
    if (v7 == 185)
      v9 = v1;
    else
      v9 = 0;
    if (v7 == 185)
    {
      v10 = *((_DWORD *)v1 + 1);
      if (v10 < 0)
      {
LABEL_24:
        v8 = (unsigned __int8 **)(v1 + 16);
LABEL_25:
        v1 = *v8;
        continue;
      }
      v11 = (v10 - 1);
      if ((_DWORD)v11)
      {
        v12 = (const void **)(v1 + 24);
        v13 = 8 * v11;
        do
        {
          v14 = *v12++;
          sub_22E3BA850((uint64_t)&v23, v14);
          v13 -= 8;
        }
        while (v13);
      }
LABEL_48:
      v8 = (unsigned __int8 **)(v9 + 16);
      goto LABEL_25;
    }
    if (v7 == 115)
      v9 = v1;
    else
      v9 = 0;
    if (v7 == 115)
    {
      v16 = (*((_DWORD *)v1 + 1) & 0x7FFFFFFFu) - 2;
      if ((*((_DWORD *)v1 + 1) & 0x7FFFFFFF) != 2)
      {
        v17 = (const void **)(v1 + 32);
        v18 = 8 * v16;
        do
        {
          v19 = *v17++;
          sub_22E3BA850((uint64_t)&v23, v19);
          v18 -= 8;
        }
        while (v18);
      }
      goto LABEL_48;
    }
    if (v7 == 210)
    {
      v21 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v23, v1);
      v22 = v24 == v23 ? (uint64_t *)((char *)&v25 + 4) : &v25;
      if (v21 != (void **)&v24[8 * *(unsigned int *)v22])
        goto LABEL_24;
    }
  }
  while (v1 != v2);
  if (v24 != v23)
    free(v24);
  return v2;
}

uint64_t sub_22EFFA8F0(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_22EFFA604(*(unsigned __int8 **)(a1 + *(unsigned __int8 *)(a1 + 3)));
  if (v1 && (*(_DWORD *)(v1 + 28) & 0x7Eu) - 52 <= 5)
    return sub_22EFC01DC(v1, 0);
  else
    return 0;
}

uint64_t sub_22EFFA934(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char **v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  result = sub_22EFFA8F0(a1);
  if ((_DWORD)result)
  {
    if (result > 0x7E7)
    {
      v5 = *(uint64_t **)(a2 + 15208);
      v6 = v5[1];
      if (v6 + 2024 <= (unint64_t)result)
      {
        v7 = result - v6 - 2024;
        v8 = v5[2];
      }
      else
      {
        v7 = result - 2024;
        v8 = *v5;
      }
      v4 = (char **)(v8 + 48 * v7);
    }
    else
    {
      v4 = &(&off_24FAC8C40)[6 * result];
    }
    return strchr(v4[2], 117) != 0;
  }
  return result;
}

uint64_t sub_22EFFA9C0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;

  v3 = *(unsigned __int8 **)(a1 + *(unsigned __int8 *)(a1 + 3));
  v4 = *((_QWORD *)v3 + 1);
  v5 = v4 & 0xFFFFFFFFFFFFFFF0;
  v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
  v7 = *(unsigned __int8 *)(v6 + 16);
  if (v6 && v7 == 39)
    goto LABEL_9;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
  {
    v6 = sub_22F10CF48(v6);
    if (v6)
    {
LABEL_9:
      v4 = *(_QWORD *)(v6 + 32);
      goto LABEL_10;
    }
    v6 = *(_QWORD *)v5;
    v7 = *(unsigned __int8 *)(*(_QWORD *)v5 + 16);
  }
  if (v7 == 10)
    goto LABEL_9;
  v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v8 == 10)
  {
    v6 = sub_22F10CF48(v6);
    if (v6)
      goto LABEL_9;
    v6 = *(_QWORD *)v5;
    v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v8 != 11)
  {
    if ((*(_BYTE *)(v6 + 17) & 4) == 0)
      goto LABEL_10;
LABEL_64:
    v20 = 16832;
LABEL_65:
    v11 = a2 + v20;
    return *(_QWORD *)v11;
  }
  v13 = v8 & 0xFF80000;
  if (v13 != 136839168)
  {
    v21 = v13 != 136314880 && (*(_DWORD *)(v6 + 16) & 0x400) == 0;
    if (v21)
      goto LABEL_10;
    goto LABEL_64;
  }
  v14 = v3;
  while (1)
  {
    v15 = *v14;
    if (v15 <= 0xD5)
      break;
    if (v15 == 233)
    {
      v15 = *(_DWORD *)v14;
      if ((*(_DWORD *)v14 & 0x7C0000) != 0x300000)
        goto LABEL_37;
      v17 = v14 + 16;
    }
    else
    {
      if (v15 != 214)
        goto LABEL_37;
      v17 = v14 + 24;
    }
LABEL_35:
    v18 = *(unsigned __int8 **)v17;
    v21 = v18 == v14;
    v14 = v18;
    if (v21)
    {
LABEL_37:
      v19 = v3;
      if (v15 != 129)
        goto LABEL_47;
      v20 = 16392;
      goto LABEL_65;
    }
  }
  if (v15 == 155)
  {
    if ((**((_DWORD **)v14 + 2) & 0x18000) != 0)
      goto LABEL_46;
    v17 = v14 + 24;
    if (!v14[48])
      v17 = v14 + 32;
    v15 = 155;
    goto LABEL_35;
  }
  if (v15 != 176)
    goto LABEL_37;
  v16 = *((unsigned int *)v14 + 5);
  if ((_DWORD)v16 != -1)
  {
    v17 = &v14[8 * v16 + 40];
    v15 = 176;
    goto LABEL_35;
  }
LABEL_46:
  v19 = v3;
  do
  {
LABEL_47:
    v22 = *v19;
    if (v22 > 0xD5)
    {
      if (v22 == 233)
      {
        v22 = *(_DWORD *)v19;
        if ((*(_DWORD *)v19 & 0x7C0000) != 0x300000)
          break;
        v24 = v19 + 16;
      }
      else
      {
        if (v22 != 214)
          break;
        v24 = v19 + 24;
      }
    }
    else if (v22 == 155)
    {
      if ((**((_DWORD **)v19 + 2) & 0x18000) != 0)
        goto LABEL_66;
      v24 = v19 + 24;
      if (!v19[48])
        v24 = v19 + 32;
      v22 = 155;
    }
    else
    {
      if (v22 != 176)
        break;
      v23 = *((unsigned int *)v19 + 5);
      if ((_DWORD)v23 == -1)
        goto LABEL_66;
      v24 = &v19[8 * v23 + 40];
      v22 = 176;
    }
    v25 = *(unsigned __int8 **)v24;
    v21 = v25 == v19;
    v19 = v25;
  }
  while (!v21);
  if (v22 == 212)
    goto LABEL_64;
LABEL_66:
  v4 = sub_22EFFAC68(v3);
LABEL_10:
  v9 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
  if (v9)
    v10 = *(unsigned __int8 *)(v9 + 16) - 27 > 0xFFFFFFFD;
  else
    v10 = 0;
  if (!v10)
    v9 = sub_22F10CF48(v9);
  v11 = v9 + 24;
  return *(_QWORD *)v11;
}

uint64_t sub_22EFFAC68(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  do
  {
    v1 = a1;
    v2 = *a1;
    if (v2 > 0xD5)
    {
      if (v2 == 233)
      {
        v2 = *(_DWORD *)a1;
        if ((*(_DWORD *)a1 & 0x7C0000) != 0x300000)
          break;
        v4 = a1 + 16;
      }
      else
      {
        if (v2 != 214)
          break;
        v4 = a1 + 24;
      }
    }
    else if (v2 == 155)
    {
      if ((**((_DWORD **)a1 + 2) & 0x18000) != 0)
        return 0;
      v4 = a1 + 24;
      if (!a1[48])
        v4 = a1 + 32;
      v2 = 155;
    }
    else
    {
      if (v2 != 176)
        break;
      v3 = *((unsigned int *)a1 + 5);
      if ((_DWORD)v3 == -1)
        return 0;
      v4 = &a1[8 * v3 + 40];
      v2 = 176;
    }
    a1 = *(unsigned __int8 **)v4;
  }
  while (*(unsigned __int8 **)v4 != v1);
  if (v2 == 188)
  {
    v5 = *((_QWORD *)v1 + 3) + 48;
    return *(_QWORD *)v5;
  }
  if ((v2 & 0xFE) == 0x70)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 3) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
      v7 = *(_BYTE *)(v6 + 16) == 31;
    else
      v7 = 0;
    if (!v7)
      v6 = sub_22F10CF48(v6);
    v5 = v6 + 32;
    return *(_QWORD *)v5;
  }
  return 0;
}

uint64_t sub_22EFFAD70(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *i;
  uint64_t v16;
  uint64_t v17;

  v3 = sub_22EFFA9C0(a1, a2);
  v4 = sub_22F10C2A4(*(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0));
  if (!v4 || (*(_BYTE *)(v4 + 29) & 1) == 0)
    goto LABEL_11;
  sub_22EFC8E88(v4);
  v6 = *(uint64_t **)v5;
  v7 = *(unsigned int *)(v5 + 8);
  v8 = *(uint64_t **)v5;
  if ((_DWORD)v7)
  {
    v9 = 8 * v7;
    v8 = *(uint64_t **)v5;
    while (*(_WORD *)(*v8 + 32) != 348)
    {
      ++v8;
      v9 -= 8;
      if (!v9)
        goto LABEL_11;
    }
  }
  if (v8 != &v6[v7])
  {
    do
    {
      v11 = *v6++;
      result = v11;
    }
    while (*(_WORD *)(v11 + 32) != 348);
  }
  else
  {
LABEL_11:
    result = sub_22EFFA604(*(unsigned __int8 **)(a1 + *(unsigned __int8 *)(a1 + 3)));
    if (result)
    {
      if ((*(_BYTE *)(result + 29) & 1) == 0)
        return 0;
      sub_22EFC8E88(result);
      v13 = *(uint64_t **)v12;
      v14 = *(unsigned int *)(v12 + 8);
      i = *(uint64_t **)v12;
      if ((_DWORD)v14)
      {
        v16 = 8 * v14;
        for (i = *(uint64_t **)v12; *(_WORD *)(*i + 32) != 348; ++i)
        {
          v16 -= 8;
          if (!v16)
            return 0;
        }
      }
      if (i == &v13[v14])
      {
        return 0;
      }
      else
      {
        do
        {
          v17 = *v13++;
          result = v17;
        }
        while (*(_WORD *)(v17 + 32) != 348);
      }
    }
  }
  return result;
}

void sub_22EFFAE7C(unsigned int *a1)
{
  unint64_t v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;

  if (*(unsigned __int8 *)a1 != 141)
  {
    v2 = *a1;
    v3 = (uint64_t *)((char *)a1 + (v2 >> 24));
    sub_22F0D5A50(*v3);
    if (!v4)
    {
      if (a1[4])
      {
        v5 = v3[((v2 >> 18) & 1) + 1];
        if (v5)
          sub_22F0D5A50(v5);
      }
    }
  }
}

void sub_22EFFAEF8(unsigned int *a1)
{
  unsigned int v1;
  uint64_t v2;

  if (*(unsigned __int8 *)a1 != 141 && !a1[5])
  {
    v1 = a1[4];
    if (v1)
    {
      v2 = *(_QWORD *)((char *)&a1[2 * (((unint64_t)*a1 >> 18) & 1) + 2 * v1] + ((unint64_t)*a1 >> 24));
      if (v2)
        sub_22F0D60E4(v2);
    }
  }
}

uint64_t sub_22EFFAF50(uint64_t a1, uint64_t a2, int a3, int a4, unint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, __int16 a14, char a15, __int16 a16, char a17)
{
  _BOOL4 v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  _OWORD *v36;
  _OWORD *v37;
  __int128 v38;
  uint64_t v39;
  char *v41;

  v19 = 1;
  if (!a5 && (a9 & 0xFFFFFFFFFFFFFFFCLL) == a8)
    v19 = ((a9 ^ (*(_DWORD *)(a8 + 28) >> 13)) & 3) != 0;
  if (a11)
    v20 = 0;
  else
    v20 = a7 == 0;
  v21 = !v20;
  if (a11)
    v22 = 32 * *(unsigned int *)(a11 + 8);
  else
    v22 = 0;
  v23 = 24;
  if (!v19)
    v23 = 0;
  v20 = v21 == 0;
  v24 = 48;
  if (!v20)
    v24 = 64;
  v25 = sub_22E3CD3D4(a1 + 2032, v23 + v22 + v24, 3);
  *(_BYTE *)v25 = -68;
  if (byte_255E04EB3)
  {
    v41 = sub_22F0D3748(188);
    ++*((_DWORD *)v41 + 2);
  }
  v26 = ((a13 & 3) << 8) & 0xE3FF | ((a15 & 7) << 10) | *(_DWORD *)v25 & 0xFFFC00FF;
  *(_DWORD *)v25 = v26;
  *(_QWORD *)(v25 + 8) = a12;
  *(_QWORD *)(v25 + 16) = a2;
  *(_QWORD *)(v25 + 24) = a8;
  *(_QWORD *)(v25 + 32) = *(_QWORD *)(a10 + 16);
  *(_DWORD *)(v25 + 40) = *(_DWORD *)(a10 + 8);
  if (a3)
    v27 = 0x40000;
  else
    v27 = 0;
  *(_DWORD *)v25 = v27 & 0xFF3FFFFF | ((a17 & 3) << 22) | v26 & 0xFF001FFF;
  *(_DWORD *)(v25 + 4) = a4;
  v28 = sub_22EFB2ABC(v25) & 0x1F;
  v29 = *(_DWORD *)v25 & 0xFFFC1FFF | (v28 << 13);
  *(_DWORD *)v25 = v29;
  if (v19)
  {
    if (a5)
    {
      if ((sub_22F0AAC5C(a5) & 4) != 0)
        LOBYTE(v28) = v28 | 0xE;
      else
        LOBYTE(v28) = sub_22F0AAC5C(a5) & 2 | v28;
    }
    v29 = *(_DWORD *)v25 | 0x80000;
    *(_QWORD *)(v25 + 48) = a5;
    *(_QWORD *)(v25 + 56) = a6;
    *(_QWORD *)(v25 + 64) = a9;
  }
  if (a11)
  {
    v30 = v29 | 0x100000;
    *(_DWORD *)v25 = v29 | 0x100000;
    v31 = v25 + 24 * ((v29 >> 19) & 1);
    *(_DWORD *)(v31 + 56) = a7;
    *(_DWORD *)(v31 + 48) = *(_DWORD *)(a11 + 272);
    v32 = v31 + 48;
    *(_DWORD *)(v32 + 4) = *(_DWORD *)(a11 + 276);
    v33 = *(_DWORD *)(a11 + 8);
    *(_DWORD *)(v32 + 12) = v33;
    if (v33)
    {
      v34 = 0;
      v35 = 0;
      do
      {
        v34 |= sub_22F0EEB00(*(_QWORD *)a11 + 32 * v35);
        v36 = (_OWORD *)(v32 + 16 + 32 * v35);
        v37 = (_OWORD *)(*(_QWORD *)a11 + 32 * v35);
        v38 = v37[1];
        *v36 = *v37;
        v36[1] = v38;
        ++v35;
      }
      while (v35 != *(_DWORD *)(v32 + 12));
      v30 = *(_DWORD *)v25;
      LOBYTE(v33) = v34 & 2;
    }
    LOBYTE(v28) = v33 | v28;
  }
  else
  {
    v30 = v29 & 0xFFEFFFFF | ((a7 != 0) << 20);
    if (a7)
    {
      v39 = v25 + 24 * ((v29 >> 19) & 1);
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v39 + 56) = a7;
    }
  }
  *(_DWORD *)v25 = v30 & 0xFFFC1FFF | ((v28 & 0x1F) << 13);
  return v25;
}

uint64_t sub_22EFFB1E8(uint64_t a1, int a2, int a3, int a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v5 = 16;
  if (!a4)
    v5 = 0;
  v6 = 48;
  if (a2 | a3)
    v6 = 72;
  v7 = sub_22E3CD3D4(a1 + 2032, v6 + v5 + 32 * a5, 3);
  *(_BYTE *)v7 = -68;
  if (byte_255E04EB3)
  {
    v8 = sub_22F0D3748(188);
    ++*((_DWORD *)v8 + 2);
  }
  *(_DWORD *)(v7 + 40) = 0;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 8) = 0u;
  return v7;
}

void sub_22EFFB27C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 && sub_22EFFFB48(*(unsigned __int8 **)(a1 + 16)))
  {
    if ((*(_BYTE *)(a1 + 2) & 8) != 0)
    {
      if (*(_QWORD *)(a1 + 48))
      {
        v3 = *(_QWORD *)(a1 + 56);
        v4[0] = *(_QWORD *)(a1 + 48);
        v4[1] = v3;
        sub_22F0AB0EC(v4);
      }
    }
  }
  else
  {
    sub_22F0D5A50(v2);
  }
}

void sub_22EFFB2EC(unsigned int *a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v2 = *((_QWORD *)a1 + 4);
  v3 = a1[10];
  v6 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 40);
  v7 = v3;
  v8 = v2;
  sub_22EFC70E8(&v6);
  if (!v4)
    v4 = v3;
  v5 = *a1;
  if (((v5 & 0x100000) == 0 || !a1[6 * ((v5 >> 19) & 1) + 12]) && !v4)
    sub_22F0D60E4(*((_QWORD *)a1 + 2));
}

unsigned __int8 *sub_22EFFB374(unsigned __int8 *result)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  unsigned __int8 **v5;
  int v6;
  unsigned __int8 **v7;
  int v8;
  BOOL v9;
  unsigned __int8 *v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  unsigned __int8 **v15;
  int v16;

  if (result)
  {
    v1 = result;
    while (1)
    {
      v2 = (unsigned __int8 *)*((_QWORD *)v1 + 2);
      if (v2)
      {
        while (1)
        {
          result = v2;
          v3 = *v2;
          if (v3 == 116)
            break;
          if (v3 != 186)
          {
            if ((v3 & 0xFE) != 0xAC)
              goto LABEL_15;
            v5 = (unsigned __int8 **)(result + 16);
            goto LABEL_11;
          }
          v4 = *((_QWORD *)result + 2);
          v2 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFF8);
          if ((v4 & 4) != 0)
          {
            v5 = (unsigned __int8 **)(v2 + 40);
LABEL_11:
            v2 = *v5;
          }
          if (v2 == result)
            goto LABEL_15;
        }
        v5 = (unsigned __int8 **)(result + 24);
        goto LABEL_11;
      }
      result = 0;
LABEL_15:
      v6 = (*(_DWORD *)v1 >> 18) & 0x7F;
      if (v6 != 20)
        break;
      v16 = *result;
      if (v16 == 140)
      {
        result = (unsigned __int8 *)sub_22F060ED0((uint64_t)result);
LABEL_36:
        v16 = *result;
      }
      v1 = result;
      if (v16 != 153)
        return result;
    }
    if (v6 == 21)
    {
      v7 = (unsigned __int8 **)(result + 40);
      v8 = *result;
      v9 = v8 == 119;
      if (v8 == 119)
        v10 = result;
      else
        v10 = 0;
      v11 = (unsigned __int8 **)(v10 + 48);
      if (v9)
        v7 = v11;
      v12 = *v7;
      if (v12)
      {
        while (1)
        {
          result = v12;
          v13 = *v12;
          if (v13 == 116)
            break;
          if (v13 != 186)
          {
            if ((v13 & 0xFE) != 0xAC)
              goto LABEL_36;
            v15 = (unsigned __int8 **)(result + 16);
            goto LABEL_30;
          }
          v14 = *((_QWORD *)result + 2);
          v12 = (unsigned __int8 *)(v14 & 0xFFFFFFFFFFFFFFF8);
          if ((v14 & 4) != 0)
          {
            v15 = (unsigned __int8 **)(v12 + 40);
LABEL_30:
            v12 = *v15;
          }
          if (v12 == result)
            goto LABEL_36;
        }
        v15 = (unsigned __int8 **)(result + 24);
        goto LABEL_30;
      }
      result = 0;
    }
    goto LABEL_36;
  }
  return result;
}

uint64_t sub_22EFFB4A0(uint64_t result)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 **v6;
  int v7;
  int v8;

  if (result)
  {
    v1 = (unsigned __int8 *)result;
    while (1)
    {
      v2 = (unsigned __int8 *)*((_QWORD *)v1 + 2);
      if (v2)
      {
        while (1)
        {
          v3 = v2;
          v4 = *v2;
          if (v4 == 116)
            break;
          if (v4 != 186)
          {
            if ((v4 & 0xFE) != 0xAC)
              goto LABEL_15;
            v6 = (unsigned __int8 **)(v3 + 16);
            goto LABEL_11;
          }
          v5 = *((_QWORD *)v3 + 2);
          v2 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFF8);
          if ((v5 & 4) != 0)
          {
            v6 = (unsigned __int8 **)(v2 + 40);
LABEL_11:
            v2 = *v6;
          }
          if (v2 == v3)
            goto LABEL_15;
        }
        v6 = (unsigned __int8 **)(v3 + 24);
        goto LABEL_11;
      }
      v3 = 0;
LABEL_15:
      v7 = (*(_DWORD *)v1 >> 18) & 0x7F;
      if (v7 == 20)
      {
        v8 = *v3;
        if (v8 == 140)
          return sub_22F060FB4((uint64_t)v3);
      }
      else
      {
        if (v7 == 21)
          return *((_QWORD *)v3 + 2);
        v8 = *v3;
      }
      v1 = v3;
      if (v8 != 153)
        return 0;
    }
  }
  return result;
}

uint64_t sub_22EFFB554(unsigned __int8 *a1)
{
  int v1;

  v1 = *a1;
  if (v1 == 153)
    return (uint64_t)(a1 + 24);
  else
    return ((uint64_t (*)(void))((char *)sub_22EFFB584 + 4 * byte_22F4A26B7[v1 - 143]))();
}

uint64_t sub_22EFFB584(uint64_t a1)
{
  return a1 + 40;
}

uint64_t sub_22EFFB58C(uint64_t a1)
{
  return a1 + 48;
}

unint64_t sub_22EFFB594(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  result = sub_22EFC3B90(a1);
  if (result)
  {
LABEL_2:
    if (*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
      || (*(_BYTE *)(result + 68) & 1) != 0 && !*(_QWORD *)(result + 40))
    {
      while (1)
      {
        result = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!result)
          break;
        if ((*(_DWORD *)(result + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_2;
      }
    }
  }
  return result;
}

unsigned __int8 *sub_22EFFB618(unsigned __int8 *a1)
{
  int v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;

  v1 = *a1;
  v2 = a1 + 40;
  v3 = a1 + 48;
  if (v1 == 144)
    v3 = a1 + 40;
  if (v1 != 145)
    v2 = v3;
  if (v1 == 153)
    v4 = a1 + 24;
  else
    v4 = v2;
  return &v4[8 * *((unsigned int *)a1 + 1)];
}

unsigned int *sub_22EFFB64C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, unint64_t a7)
{
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *result;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;

  if (a5)
    v13 = *(_DWORD *)(a5 + 8);
  else
    v13 = 0;
  v14 = v13;
  if (HIDWORD(a7))
    v14 = v13 + 1;
  v15 = (unsigned int *)sub_22E3CD3D4(a1 + 2032, 8 * v14 + 24, 3);
  result = sub_22F003694(v15, a2, a3, a4, v13, a7, a6);
  if (v13)
  {
    v17 = *(unsigned int *)(a5 + 8);
    if ((_DWORD)v17)
    {
      v18 = result + 6;
      v19 = *(uint64_t **)a5;
      do
      {
        v20 = *v19++;
        *v18++ = v20;
        --v17;
      }
      while (v17);
    }
  }
  return result;
}

uint64_t sub_22EFFB70C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  int v6;
  char *v7;
  uint64_t v8;

  result = sub_22E3CD3D4(a1 + 2032, 8 * (a3 + (unint64_t)a2) + 24, 3);
  *(_BYTE *)result = -103;
  if (byte_255E04EB3)
  {
    v8 = result;
    v7 = sub_22F0D3748(153);
    result = v8;
    ++*((_DWORD *)v7 + 2);
  }
  *(_QWORD *)(result + 8) = 0;
  if (a3)
    v6 = 0x4000000;
  else
    v6 = 0;
  *(_DWORD *)result = *(_DWORD *)result & 0xF9FFFFFF | v6;
  *(_DWORD *)(result + 4) = a2;
  return result;
}

unsigned int *sub_22EFFB7AC(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unsigned int a9, int a10, unsigned int a11)
{
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *result;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;

  if (a6)
    v18 = *(_DWORD *)(a6 + 8);
  else
    v18 = 0;
  v19 = v18;
  if (HIDWORD(a7))
    v19 = v18 + 1;
  v20 = (unsigned int *)sub_22E3CD3D4(a1 + 2032, 8 * v19 + 40, 3);
  result = sub_22F0037E4(v20, a2, a3, a4, a5, v18, a7, a8, a9, 0, a11);
  if (v18)
  {
    v22 = *(unsigned int *)(a6 + 8);
    if ((_DWORD)v22)
    {
      v23 = result + 10;
      v24 = *(uint64_t **)a6;
      do
      {
        v25 = *v24++;
        *v23++ = v25;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

const void **sub_22EFFB894(const void **result)
{
  do
    result = sub_22EFFB8B8((const void **)result[2]);
  while (*(unsigned __int8 *)result == 153);
  return result;
}

const void **sub_22EFFB8B8(const void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  const void **v4;
  int v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  const void **v9;
  uint64_t v10;
  const void *v11;
  void **v12;
  uint64_t *v13;
  int v14;
  const void **v15;
  uint64_t v16;
  const void *v17;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  _BYTE v23[64];

  v2 = v23;
  v19 = v23;
  v20 = v23;
  v21 = 8;
  v22 = 0;
  v3 = v23;
  do
  {
    v4 = a1;
    v5 = *(unsigned __int8 *)a1;
    if (v5 == 186)
    {
      v6 = (unint64_t)a1[2];
      a1 = (const void **)(v6 & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 4) != 0)
        a1 = (const void **)a1[5];
      v5 = *(unsigned __int8 *)a1;
    }
    if (v5 == 116)
    {
      a1 = (const void **)a1[3];
      v5 = *(unsigned __int8 *)a1;
    }
    if (v5 == 185)
    {
      v7 = *((_DWORD *)a1 + 1);
      if ((v7 & 0x80000000) == 0)
      {
        v8 = (v7 - 1);
        if ((_DWORD)v8)
        {
          v9 = a1 + 3;
          v10 = 8 * v8;
          do
          {
            v11 = *v9++;
            sub_22E3BA850((uint64_t)&v19, v11);
            v10 -= 8;
          }
          while (v10);
          v2 = v19;
          v3 = v20;
        }
      }
      a1 = (const void **)a1[2];
      v5 = *(unsigned __int8 *)a1;
    }
    if (v5 == 210)
    {
      v12 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v19, a1);
      v2 = v19;
      v3 = v20;
      v13 = (uint64_t *)((char *)&v21 + 4);
      if (v20 != v19)
        v13 = &v21;
      if (v12 != (void **)&v20[8 * *(unsigned int *)v13])
        a1 = (const void **)a1[2];
    }
    v14 = *(unsigned __int8 *)a1;
    if (v14 == 115)
    {
      if ((*((_DWORD *)a1 + 1) & 0x7FFFFFFF) != 2)
      {
        v15 = a1 + 4;
        v16 = 8 * ((*((_DWORD *)a1 + 1) & 0x7FFFFFFFu) - 2);
        do
        {
          v17 = *v15++;
          sub_22E3BA850((uint64_t)&v19, v17);
          v16 -= 8;
        }
        while (v16);
        v2 = v19;
        v3 = v20;
      }
      a1 = (const void **)a1[2];
      v14 = *(unsigned __int8 *)a1;
    }
    if (v14 == 168)
    {
      a1 = (const void **)a1[2];
      v14 = *(unsigned __int8 *)a1;
    }
    if (v14 == 110)
      a1 = (const void **)a1[2];
  }
  while (v4 != a1);
  if (v3 != v2)
    free(v3);
  return v4;
}

char *sub_22EFFBA38(int a1)
{
  return off_24FAC57C0[a1];
}

uint64_t sub_22EFFBA54(int a1)
{
  return dword_22F4A2E48[a1 - 5];
}

uint64_t sub_22EFFBA68(uint64_t a1, int a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v12;

  if (a2 != 5)
    return 0;
  v4 = a3;
  v6 = *(_QWORD *)(*((_QWORD *)a3 + 1) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a4 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
  {
    if (*(_DWORD *)(v7 + 16) == 39)
    {
      v4 = a4;
      if (sub_22E479BE0(v6))
        goto LABEL_11;
    }
    return 0;
  }
  v8 = *(_DWORD *)(v7 + 16);
  if (v8 == 9)
    goto LABEL_11;
  if (v8 != 44)
  {
    if (v8 == 11 && ((*(_DWORD *)(v7 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
      goto LABEL_11;
    return 0;
  }
  v9 = sub_22F114198(*(_QWORD *)(v7 + 24));
  if ((*(_BYTE *)(v9 + 74) & 1) == 0 && *(_QWORD *)(v9 + 128) < 8uLL
    || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v7 + 24)) + 76) & 0x80) != 0)
  {
    return 0;
  }
LABEL_11:
  v10 = sub_22EFFBBCC(v4);
  if (!sub_22EFFBE1C((unint64_t)v10, a1, 2))
    return 0;
  v12 = *(_QWORD *)(*((_QWORD *)v4 + 1) & 0xFFFFFFFFFFFFFFF0);
  if (!v12 || *(_BYTE *)(v12 + 16) != 39)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
      return 0;
    v12 = sub_22F10CF48(v12);
    if (!v12)
      return 0;
  }
  return sub_22F11089C(*(_QWORD *)(*(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFFFF0));
}

unsigned __int8 *sub_22EFFBBCC(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  const void **v6;
  const void *v7;
  uint64_t v8;
  unsigned __int8 **v9;
  int v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  const void **v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  void **v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;
  _BYTE v27[64];

  v23 = v27;
  v24 = v27;
  v25 = 8;
  v26 = 0;
  if (!a1)
    return 0;
  v1 = a1;
  do
  {
    v2 = v1;
    v3 = *v1;
    if (v3 > 0xD5)
    {
      if (v3 == 233)
      {
        if ((*(_DWORD *)v1 & 0x7C0000) != 0x300000)
          break;
        v5 = v1 + 16;
      }
      else
      {
        if (v3 != 214)
          goto LABEL_20;
        v5 = v1 + 24;
      }
    }
    else if (v3 == 155)
    {
      if ((**((_DWORD **)v1 + 2) & 0x18000) != 0)
        goto LABEL_24;
      if (v1[48])
        v5 = v1 + 24;
      else
        v5 = v1 + 32;
    }
    else
    {
      if (v3 != 176)
        goto LABEL_20;
      v4 = *((unsigned int *)v1 + 5);
      if ((_DWORD)v4 == -1)
        break;
      v5 = &v1[8 * v4 + 40];
    }
    v1 = *(unsigned __int8 **)v5;
    v3 = **(unsigned __int8 **)v5;
LABEL_20:
    if ((v3 + 102) >= 0xF5u || (v3 & 0xFE) == 0xAC)
    {
      v9 = (unsigned __int8 **)(v1 + 16);
LABEL_23:
      v1 = *v9;
      goto LABEL_24;
    }
    if (v3 == 226)
    {
      v9 = (unsigned __int8 **)(v1 + 24);
      goto LABEL_23;
    }
    if (v3 == 186)
    {
      v18 = *((_QWORD *)v1 + 2);
      v1 = (unsigned __int8 *)(v18 & 0xFFFFFFFFFFFFFFF8);
      if ((v18 & 4) != 0)
      {
        v9 = (unsigned __int8 **)(v1 + 40);
        goto LABEL_23;
      }
    }
LABEL_24:
    v10 = *v1;
    if (v10 == 110 || v10 == 168)
      goto LABEL_26;
    if (v10 == 185)
      v12 = v1;
    else
      v12 = 0;
    if (v10 == 185)
    {
      v13 = *((_DWORD *)v1 + 1);
      if (v13 < 0)
      {
LABEL_26:
        v11 = (unsigned __int8 **)(v1 + 16);
LABEL_27:
        v1 = *v11;
        continue;
      }
      v14 = (v13 - 1);
      if ((_DWORD)v14)
      {
        v15 = (const void **)(v1 + 24);
        v16 = 8 * v14;
        do
        {
          v17 = *v15++;
          sub_22E3BA850((uint64_t)&v23, v17);
          v16 -= 8;
        }
        while (v16);
      }
LABEL_48:
      v11 = (unsigned __int8 **)(v12 + 16);
      goto LABEL_27;
    }
    if (v10 == 115)
      v12 = v1;
    else
      v12 = 0;
    if (v10 == 115)
    {
      v19 = (*((_DWORD *)v1 + 1) & 0x7FFFFFFFu) - 2;
      if ((*((_DWORD *)v1 + 1) & 0x7FFFFFFF) != 2)
      {
        v6 = (const void **)(v1 + 32);
        v8 = 8 * v19;
        do
        {
          v7 = *v6++;
          sub_22E3BA850((uint64_t)&v23, v7);
          v8 -= 8;
        }
        while (v8);
      }
      goto LABEL_48;
    }
    if (v10 == 210)
    {
      v21 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v23, v1);
      v22 = v24 == v23 ? (uint64_t *)((char *)&v25 + 4) : &v25;
      if (v21 != (void **)&v24[8 * *(unsigned int *)v22])
        goto LABEL_26;
    }
  }
  while (v1 != v2);
  if (v24 != v23)
    free(v24);
  return v2;
}

uint64_t sub_22EFFBE1C(unint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t result;
  unsigned int v47;
  int v48;
  uint64_t v49;
  unsigned int v50;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v5 = (_QWORD *)a1;
          v6 = *(_DWORD *)a1;
          if ((*(_DWORD *)a1 & 0x10000) != 0 && (**(_QWORD **)(a2 + 2000) & 0x210) != 0x200)
          {
            if ((v6 & 0x20000) != 0 || a3 == 2)
              return 0;
            if (a3 == 1)
              return (v6 & 0x8000) != 0 || sub_22F110744(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0), a2);
          }
          if ((v6 + 103) < 0xF6u)
            break;
          if ((*(_BYTE *)(*(_QWORD *)(a2 + 2000) + 1) & 1) != 0)
            goto LABEL_66;
          v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
          if (!v10 || *(_BYTE *)(v10 + 16) != 39)
          {
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
              goto LABEL_66;
            v10 = sub_22F10CF48(v10);
            if (!v10)
              goto LABEL_66;
          }
          v11 = *(_QWORD *)(v10 + 32);
          v12 = v11 & 0xFFFFFFFFFFFFFFF0;
          v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v13 & 8) != 0)
          {
            v15 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 0x18);
            v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
          }
          else
          {
            v14 = 0;
            v15 = 0;
          }
          v19 = v15 | (v13 | v11) & 7;
          v20 = *(_QWORD *)(a2 + 2000);
          if ((*(_DWORD *)(v20 + 52) & 0x40000000) != 0)
          {
            v21 = (v13 & 8) != 0 ? *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11 : 0;
            v24 = (*(_BYTE *)(v20 + 68) & 1) != 0 ? 5 : 4;
            if (v21 == v24)
              v19 &= 0x7FFu;
          }
          v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFFFF0);
          v26 = v25 && (*(_DWORD *)(v25 + 16) & 0xFF800FF) == 86507531;
          v27 = v26 && v19 == 0;
          if (!v27 || (v14 & 0xC00000000) != 0)
            goto LABEL_66;
          v9 = v5 + 2;
          a1 = v5[2];
          v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          v37 = *(_DWORD *)(v36 + 16);
          if (v36)
            v38 = v37 == 11;
          else
            v38 = 0;
          if (v38)
          {
            if (((*(_DWORD *)(v36 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
              goto LABEL_66;
          }
          else
          {
            if (v36 && v37 == 44)
            {
              v39 = sub_22F114198(*(_QWORD *)(v36 + 24));
              if ((*(_BYTE *)(v39 + 74) & 1) == 0 && *(_QWORD *)(v39 + 128) <= 7uLL
                || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v36 + 24)) + 76) & 0x80) != 0)
              {
                goto LABEL_66;
              }
              goto LABEL_77;
            }
            if (v37 != 9)
              goto LABEL_66;
          }
        }
        v7 = *(_DWORD *)a1;
        if (v7 > 0xAE)
          break;
        if (*(_DWORD *)a1 > 0x98u)
        {
          if (v7 == 153)
          {
            v9 = (unint64_t *)(a1 + 16);
            goto LABEL_77;
          }
          if (v7 != 155)
            goto LABEL_66;
          if ((**(_DWORD **)(a1 + 16) & 0x18000) != 0)
            return 0;
          if (*(_BYTE *)(a1 + 48))
            v9 = (unint64_t *)(a1 + 24);
          else
            v9 = (unint64_t *)(a1 + 32);
LABEL_77:
          a1 = *v9;
        }
        else if (v7 == 120)
        {
          v22 = (_BYTE *)sub_22EFBC5B4(*(_QWORD *)(a1 + 16));
          a1 = 0;
          if (v22)
          {
            a1 = (unint64_t)v22;
            if ((*v22 & 0xFE) == 0xAC)
            {
              v9 = (unint64_t *)(v22 + 16);
              goto LABEL_77;
            }
          }
        }
        else
        {
          if (v7 != 121)
            goto LABEL_66;
          a1 = 0;
          v16 = v5[2];
          v17 = *(_QWORD *)(v16 + 72);
          if ((v17 & 3) != 0 && (v17 & 3) != 3)
          {
            a1 = v17 & 0xFFFFFFFFFFFFFFFCLL;
            v9 = (unint64_t *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
            if ((*(_BYTE *)(v16 + 68) & 1) != 0)
              goto LABEL_77;
          }
        }
      }
      if (*(_DWORD *)a1 > 0xD1u)
        break;
      if (v7 == 176)
      {
        v23 = *(unsigned int *)(a1 + 20);
        if ((_DWORD)v23 == -1)
          return 0;
        v9 = (unint64_t *)(a1 + 8 * v23 + 40);
        goto LABEL_77;
      }
      if (v7 != 186)
      {
        if (v7 == 175)
          return 4;
        goto LABEL_66;
      }
      v8 = *(_QWORD *)(a1 + 16);
      a1 = v8 & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 4) != 0)
      {
        v9 = (unint64_t *)(a1 + 40);
        goto LABEL_77;
      }
    }
    if (v7 != 210)
      break;
    a1 = *(_QWORD *)(a1 + 16);
    if (!a1)
      goto LABEL_66;
  }
  if (v7 == 214)
  {
    v9 = (unint64_t *)(a1 + 24);
    goto LABEL_77;
  }
LABEL_66:
  v29 = v5[1];
  if (v29 < 0x10)
    return 0;
  v30 = *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0);
  v31 = *(_QWORD *)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v31)
    v32 = (*(_DWORD *)(v31 + 16) & 0xFF800FF) == 114294795;
  else
    v32 = 0;
  if (v32)
    return 3;
  v33 = sub_22F10E2FC(v30);
  if (v33)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a2 + 2000) + 1) & 2) == 0)
    {
      v34 = sub_22F114198(*(_QWORD *)(v33 + 24));
      if (sub_22E69BDA8(v34) && *(unsigned __int8 *)v5 == 156)
      {
        v35 = (unsigned __int8 *)v5[4];
        if (*v35 == 180)
        {
          v9 = (unint64_t *)*((_QWORD *)v35 + 2);
          goto LABEL_77;
        }
      }
    }
  }
  v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[1] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v41 = *(_DWORD *)(v40 + 16);
  if (v40)
    v42 = v41 == 11;
  else
    v42 = 0;
  if (v42)
  {
    if (((*(_DWORD *)(v40 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
      goto LABEL_107;
    return 0;
  }
  if (!v40 || v41 != 44)
  {
    if (v41 == 9)
      goto LABEL_107;
    return 0;
  }
  v43 = sub_22F114198(*(_QWORD *)(v40 + 24));
  if ((*(_BYTE *)(v43 + 74) & 1) == 0 && *(_QWORD *)(v43 + 128) <= 7uLL
    || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v40 + 24)) + 76) & 0x80) != 0)
  {
    return 0;
  }
LABEL_107:
  v44 = **(_QWORD **)(a2 + 2000);
  if ((v44 & 0x100) != 0
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[1] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 44)
  {
    return 0;
  }
  if ((v44 & 0x200) != 0)
  {
    if (*(unsigned __int8 *)v5 != 181)
    {
      if ((v44 & 0x10) == 0)
        return 0;
      goto LABEL_115;
    }
    sub_22F257F94((uint64_t)(v5 + 2), (llvm::APInt *)&v49);
    v47 = v50;
    if (v50 > 0x40)
    {
      v48 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v49);
      if (v49)
        MEMORY[0x2348A0E84](v49, 0x1000C8000313F17);
      if (v48 != v47)
      {
LABEL_129:
        if ((**(_QWORD **)(a2 + 2000) & 0x10) == 0)
          return 0;
LABEL_115:
        if (!sub_22F0087AC((uint64_t)v5))
          goto LABEL_116;
        return 0;
      }
    }
    else if (v49)
    {
      goto LABEL_129;
    }
    return 2;
  }
  result = sub_22F0085E8((uint64_t)v5, a2, 0);
  if (!(_DWORD)result)
    return result;
LABEL_116:
  sub_22F007D7C(&v49, v5, a2, 0);
  v45 = sub_22E508590((uint64_t)&v49, 0);
  if (v50 >= 0x41 && v49)
    MEMORY[0x2348A0E84](v49, 0x1000C8000313F17);
  if (v45)
    return 0;
  if (*(unsigned __int8 *)v5 == 181)
    return 2;
  else
    return 1;
}

void sub_22EFFC3F8(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v4;
  unsigned int *v5;
  _QWORD *v6;
  unint64_t v7;
  _BYTE v8[176];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a3 && ((v4 = *a3, v4 == 120) || v4 == 121))
    v5 = (unsigned int *)(a3 + 4);
  else
    v5 = (unsigned int *)(a1 + 16);
  v6 = *(_QWORD **)(a2 + 1992);
  v7 = sub_22F1E2828(v6, *v5);
  sub_22F1E2F68((uint64_t)v6, SHIDWORD(v7), 1, (uint64_t)v8);
  __asm { BR              X10 }
}

uint64_t sub_22EFFC4AC()
{
  uint64_t v0;
  uint64_t v1;
  _DWORD *v2;
  unsigned int v3;
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  char v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  char v16;

  v3 = sub_22EF6A330(v1, *(_QWORD *)(v1 + 16528));
  v15 = v3;
  if (v3 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v14);
    v3 = v15;
  }
  else
  {
    v14 = 0;
  }
  v16 = 1;
  if ((*v2 & 0x1C0000) == 0x80000)
    v4 = (unsigned int *)&v12;
  else
    v4 = (unsigned int *)&v13;
  v5 = *v4;
  if (v3 > 0x40)
  {
    *v14 = v5;
    v7 = (uint64_t)v14;
    bzero(v14 + 1, ((((unint64_t)v3 + 63) >> 3) - 8) & 0xFFFFFFF8);
    v10 = v15;
    if (v15 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v9, (const llvm::APInt *)&v14);
      goto LABEL_13;
    }
  }
  else
  {
    v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
    if (!v3)
      v6 = 0;
    v7 = v6 & v5;
    v14 = (_QWORD *)(v6 & v5);
    v10 = v3;
  }
  v9 = v7;
LABEL_13:
  v11 = v16;
  result = sub_22F2C4748(v0, &v9);
  if (v10 >= 0x41)
  {
    result = v9;
    if (v9)
      result = MEMORY[0x2348A0E84](v9, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = (uint64_t)v14;
    if (v14)
      return MEMORY[0x2348A0E84](v14, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_22EFFD1B0(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5, int a6)
{
  unsigned int v12;
  uint64_t *v13;
  _DWORD **v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  char *v22;

  *(_BYTE *)a1 = -76;
  if (byte_255E04EB3)
  {
    v22 = sub_22F0D3748(180);
    ++*((_DWORD *)v22 + 2);
  }
  v12 = *(_DWORD *)a1 & 0xFFFC00FF;
  *(_DWORD *)a1 = v12;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v13 = (uint64_t *)a5;
  if ((_DWORD)a5)
  {
    sub_22F003A00(a1 + 16, a2, a5);
    v12 = *(_DWORD *)a1;
    v13 = *(uint64_t **)(a1 + 24);
  }
  *(_DWORD *)(a1 + 40) = a3;
  *(_DWORD *)(a1 + 44) = a6;
  *(_OWORD *)(a1 + 48) = xmmword_22F45F9F0;
  *(_DWORD *)a1 = v12 & 0xFFFBFFFF;
  sub_22EFFD2E0(a1 + 16, a2, v13, a4, &a4[a5]);
  v14 = *(_DWORD ***)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24) - (_QWORD)v14;
  v16 = (v15 >> 3);
  if ((v15 >> 3))
  {
    v17 = 0;
    v18 = 8 * v16;
    do
    {
      v19 = *v14++;
      v17 |= (*v19 >> 13) & 0x1F;
      v18 -= 8;
    }
    while (v18);
    v20 = (v17 & 0x1F) << 13;
  }
  else
  {
    v20 = 0;
  }
  *(_DWORD *)a1 = v20 | *(_DWORD *)a1 & 0xFFFC1FFF;
  return a1;
}

uint64_t *sub_22EFFD2E0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *v6;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;

  v6 = a4;
  v9 = *(_QWORD *)a1;
  v10 = *(uint64_t **)(a1 + 8);
  v11 = ((uint64_t)a3 - *(_QWORD *)a1) >> 3;
  v12 = a5 - a4;
  if (v10 == a3)
  {
    if (a5 != a4)
    {
      if (v12 > (uint64_t)((*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)a3) >> 3)
      {
        sub_22F003A00(a1, a2, v11 + v12);
        a3 = *(uint64_t **)(a1 + 8);
      }
      do
      {
        v20 = *v6++;
        *a3++ = v20;
      }
      while (v6 != a5);
      v9 = *(_QWORD *)a1;
      *(_QWORD *)(a1 + 8) += 8 * v12;
    }
    return (uint64_t *)(v9 + 8 * v11);
  }
  else
  {
    if ((((*(_QWORD *)(a1 + 16) & 0x7FFFFFFF8uLL) - v9) >> 3) < v12
                                                                             + (((unint64_t)v10 - v9) >> 3))
    {
      sub_22F003A00(a1, a2, v12 + (((unint64_t)v10 - v9) >> 3));
      v9 = *(_QWORD *)a1;
      v10 = *(uint64_t **)(a1 + 8);
    }
    v13 = (uint64_t *)(v9 + 8 * v11);
    v14 = v10 - v13;
    if (v14 >= v12)
    {
      v23 = &v10[-v12];
      sub_22F3C3C30((char *)a1, a2, v23, v10);
      if (v23 != v13)
        memmove((char *)v10 - ((char *)v23 - (char *)v13), v13, (char *)v23 - (char *)v13);
      if (v6 != a5)
      {
        v24 = v13;
        do
        {
          v25 = *v6++;
          *v24++ = v25;
        }
        while (v6 != a5);
      }
    }
    else
    {
      v15 = &v10[v12];
      *(_QWORD *)(a1 + 8) = v15;
      if (v13 == v10)
      {
        v13 = v10;
      }
      else
      {
        v16 = &v15[-v14];
        v17 = v13;
        do
        {
          v18 = *v17++;
          *v16++ = v18;
        }
        while (v17 != v10);
        do
        {
          v19 = *v6++;
          *v13++ = v19;
          --v14;
        }
        while (v14);
      }
      while (v6 != a5)
      {
        v21 = *v6++;
        *v10++ = v21;
      }
    }
  }
  return v13;
}

char *sub_22EFFD480(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  char *result;
  uint64_t v5;
  uint64_t v6;

  v5 = a1[2];
  v6 = a1[3];
  result = (char *)(a1 + 2);
  if (a3 > (unint64_t)((v6 - v5) >> 3) && (((a1[4] & 0x7FFFFFFF8uLL) - v5) >> 3) < a3)
    return sub_22F003A00((uint64_t)result, a2, a3);
  return result;
}

char *sub_22EFFD4BC(char *result, uint64_t a2, unsigned int a3, _QWORD *a4)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v10;

  v4 = result;
  v5 = a3;
  v7 = *(_QWORD *)result;
  v6 = (_QWORD *)*((_QWORD *)result + 1);
  v8 = ((uint64_t)v6 - *(_QWORD *)result) >> 3;
  if (v8 <= a3)
  {
    if (v8 >= a3)
      return result;
    if (a3 > (unint64_t)((uint64_t)((*((_QWORD *)result + 2) & 0xFFFFFFFFFFFFFFF8) - v7) >> 3))
    {
      result = sub_22F003A00((uint64_t)result, a2, a3);
      v7 = *(_QWORD *)v4;
      v6 = (_QWORD *)*((_QWORD *)v4 + 1);
    }
    v10 = (_QWORD *)(v7 + 8 * v5);
    if (v6 != v10)
    {
      do
        *v6++ = *a4;
      while (v6 != v10);
      v7 = *(_QWORD *)v4;
    }
  }
  *((_QWORD *)v4 + 1) = v7 + 8 * v5;
  return result;
}

uint64_t sub_22EFFD554(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v7 = a3;
  v9 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD **)(a1 + 24);
  v10 = (_QWORD *)(a1 + 16);
  v11 = ((uint64_t)v8 - v9) >> 3;
  if (v11 > a3)
  {
    v12 = *(_QWORD *)(v9 + 8 * v7);
    *(_QWORD *)(v9 + 8 * v7) = a4;
    result = v12;
    if (!a4)
      return result;
  }
  else
  {
    v14 = 0;
    sub_22EFFD5FC(a1 + 16, a2, v8, v7 - v11 + 1, &v14);
    v12 = 0;
    result = 0;
    *(_QWORD *)(*v10 + 8 * v7) = a4;
    if (!a4)
      return result;
  }
  *(_DWORD *)a1 |= *a4 & 0x3E000;
  return v12;
}

uint64_t *sub_22EFFD5FC(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, _QWORD *a5)
{
  unint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v24;
  uint64_t *__src;

  v6 = a4;
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD **)(a1 + 8);
  v10 = ((uint64_t)a3 - *(_QWORD *)a1) >> 3;
  if (v9 == a3)
  {
    if (a4 > (uint64_t)((*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)a3) >> 3)
    {
      sub_22F003A00(a1, a2, v10 + a4);
      a3 = *(_QWORD **)(a1 + 8);
    }
    else if (!a4)
    {
LABEL_7:
      *(_QWORD *)(a1 + 8) = &a3[v6];
      return (uint64_t *)(v8 + 8 * v10);
    }
    v11 = v6;
    do
    {
      *a3++ = *a5;
      --v11;
    }
    while (v11);
    v8 = *(_QWORD *)a1;
    a3 = *(_QWORD **)(a1 + 8);
    goto LABEL_7;
  }
  v13 = *(uint64_t **)(a1 + 8);
  v14 = a4 + (((unint64_t)v9 - v8) >> 3);
  if ((((*(_QWORD *)(a1 + 16) & 0x7FFFFFFF8uLL) - v8) >> 3) < v14)
  {
    sub_22F003A00(a1, a2, v14);
    v8 = *(_QWORD *)a1;
    v13 = *(uint64_t **)(a1 + 8);
  }
  __src = (uint64_t *)(v8 + 8 * v10);
  v15 = v13 - __src;
  v16 = v15 - v6;
  if (v15 >= v6)
  {
    sub_22F3C3C30((char *)a1, a2, &v13[-v6], v13);
    if (&v13[-v6] != __src)
      memmove(&__src[v6], __src, (char *)&v13[-v6] - (char *)__src);
    if (v6)
    {
      v24 = __src;
      do
      {
        *v24++ = *a5;
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    v17 = &v13[v6];
    *(_QWORD *)(a1 + 8) = v17;
    if (__src != v13)
    {
      v18 = &v17[-v15];
      v19 = __src;
      do
      {
        v20 = *v19++;
        *v18++ = v20;
      }
      while (v19 != v13);
      v21 = __src;
      v22 = v13 - __src;
      do
      {
        *v21++ = *a5;
        --v22;
      }
      while (v22);
    }
    if (v6 != v15)
    {
      do
        *v13++ = *a5;
      while (!__CFADD__(v16++, 1));
    }
  }
  return __src;
}

uint64_t sub_22EFFD7A4(uint64_t result)
{
  if (!result || (*(_DWORD *)(result + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
      return sub_22F10CF48(result);
    else
      return 0;
  }
  return result;
}

BOOL sub_22EFFD7E8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  if ((*(_BYTE *)(a1 + 1) & 3) != 0)
    return 1;
  v1 = *(uint64_t **)(a1 + 16);
  if (((*(_QWORD *)(a1 + 24) - (_QWORD)v1) & 0x7FFFFFFF8) != 8)
    return 0;
  v3 = *v1;
  return v3
      && ((*(_BYTE *)(v3 + 1) & 3) == 0
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                   + 16) != 45)
      && (*(_QWORD *)((*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(a1 + 8) & 7) == (*(_QWORD *)(v3 + 8) & 7 | *(_QWORD *)((*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 8));
}

BOOL sub_22EFFD880(uint64_t a1, uint64_t a2)
{
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v6;
  _BOOL8 v7;
  _QWORD *v8;
  unsigned int v9;

  if ((*(_BYTE *)(a2 + 1) & 1) != 0)
    return 0;
  v2 = *(unsigned __int8 ***)(a1 + 16);
  if (((*(_QWORD *)(a1 + 24) - (_QWORD)v2) & 0x7FFFFFFF8) != 8)
    return 0;
  if (!*v2)
    return 0;
  v3 = sub_22EFFED0C(*v2);
  if (*v3 != 181)
    return 0;
  sub_22F257F94((uint64_t)(v3 + 16), (llvm::APInt *)&v8);
  v6 = v9;
  if (v9 >= 0x41)
  {
    if (v6 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v8) > 0x40)
    {
      v7 = 0;
      v4 = 0;
      if (!v8)
        return v4;
    }
    else
    {
      v7 = *v8 == 0;
    }
    MEMORY[0x2348A0E84](v8, 0x1000C8000313F17);
    return v7;
  }
  return v8 == 0;
}

void sub_22EFFD954(unint64_t a1)
{
  uint64_t i;
  unint64_t v2;
  uint64_t *v3;
  uint64_t *v4;

  for (i = *(_QWORD *)(a1 + 48); (i & 4) != 0; i = *(_QWORD *)(v2 + 48))
  {
    v2 = i & 0xFFFFFFFFFFFFFFF8;
    if (!v2)
      break;
    a1 = v2;
  }
  if (!*(_DWORD *)(a1 + 40))
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = *(uint64_t **)(a1 + 24);
    if (v3 != v4)
    {
      while (!*v3)
      {
        if (++v3 == v4)
          return;
      }
      sub_22F0D5A50(*v3);
    }
  }
}

void sub_22EFFD9B4(unint64_t a1)
{
  uint64_t i;
  unint64_t v2;
  uint64_t j;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  for (i = *(_QWORD *)(a1 + 48); (i & 4) != 0; i = *(_QWORD *)(v2 + 48))
  {
    v2 = i & 0xFFFFFFFFFFFFFFF8;
    if (!v2)
      break;
    a1 = v2;
  }
  if (!*(_DWORD *)(a1 + 44))
  {
    v4 = *(_QWORD *)(a1 + 16);
    for (j = *(_QWORD *)(a1 + 24); j != v4; j -= 8)
    {
      v6 = *(_QWORD *)(j - 8);
      v5 = v6;
      if (v6)
      {
        sub_22F0D60E4(v5);
        return;
      }
    }
  }
}

uint64_t sub_22EFFDA00(unsigned __int8 *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t result;
  unsigned __int8 **v7;
  unsigned __int8 *v8;

  while (2)
  {
    if ((a1[1] & 3) == 0)
      return 0;
    v1 = *((_QWORD *)a1 + 1);
    if ((v1 & 4) == 0 && (*(_BYTE *)((v1 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) == 0)
      return 0;
    do
    {
      v2 = a1;
      v3 = *a1;
      if (v3 > 0xD5)
      {
        if (v3 == 233)
        {
          v3 = *(_DWORD *)a1;
          if ((*(_DWORD *)a1 & 0x7C0000) != 0x300000)
            break;
          v5 = a1 + 16;
        }
        else
        {
          if (v3 != 214)
            break;
          v5 = a1 + 24;
        }
      }
      else if (v3 == 155)
      {
        if ((**((_DWORD **)a1 + 2) & 0x18000) != 0)
          return v3 == 217 || v3 == 199;
        v5 = a1 + 24;
        if (!a1[48])
          v5 = a1 + 32;
        v3 = 155;
      }
      else
      {
        if (v3 != 176)
          break;
        v4 = *((unsigned int *)a1 + 5);
        if ((_DWORD)v4 == -1)
          return v3 == 217 || v3 == 199;
        v5 = &a1[8 * v4 + 40];
        v3 = 176;
      }
      a1 = *(unsigned __int8 **)v5;
    }
    while (*(unsigned __int8 **)v5 != v2);
    result = 1;
    if (v3 > 187)
    {
      if (v3 == 188)
        return result;
      if (v3 == 233)
      {
        if ((*(_DWORD *)v2 & 0x7C0000) == 0x140000)
          return result;
        v3 = 233;
        return v3 == 217 || v3 == 199;
      }
    }
    else if (v3 == 107 || v3 == 161)
    {
      return result;
    }
    if ((v3 & 0xFE) == 0x70)
    {
      if ((*(_DWORD *)v2 & 0xF80000) == 0)
        return result;
      if ((*(_DWORD *)v2 & 0xFC0000) == 0x800000)
      {
        v7 = (unsigned __int8 **)(v2 + 24);
LABEL_36:
        a1 = *v7;
        continue;
      }
    }
    else if (v3 == 102)
    {
      v8 = (unsigned __int8 *)*((_QWORD *)v2 + 5);
      if (*v8 == 210)
      {
        result = sub_22EFFDA00(*((_QWORD *)v8 + 2));
        if (!(_DWORD)result)
          return result;
        v7 = (unsigned __int8 **)(v2 + 48);
        goto LABEL_36;
      }
      v3 = 102;
    }
    else if (v3 == 103)
    {
      result = sub_22EFFDA00(*((_QWORD *)v2 + 4));
      if (!(_DWORD)result)
        return result;
      v7 = (unsigned __int8 **)(v2 + 40);
      goto LABEL_36;
    }
    return v3 == 217 || v3 == 199;
  }
}

uint64_t sub_22EFFDBB8(unsigned int *a1, unsigned int **a2, unsigned int *a3, uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t result;
  unsigned int v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  _BYTE v12[256];

  v8 = v12;
  v9 = v12;
  v10 = 32;
  v11 = 0;
  result = sub_22EFFDC1C(a1, a2, a3, a4, a5, a6, (unsigned int *)&v8);
  if (v9 != v8)
  {
    v7 = result;
    free(v9);
    return v7;
  }
  return result;
}

uint64_t sub_22EFFDC1C(unsigned int *a1, unsigned int **a2, unsigned int *a3, uint64_t *a4, unint64_t *a5, uint64_t a6, unsigned int *a7)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int *v15;
  uint64_t result;
  unsigned int *v17;
  void **v18;
  uint64_t v19;
  unsigned int *v20;
  void **v21;
  unint64_t *v22;
  unsigned int *v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  const void **v27;
  uint64_t v28;
  const void *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int **v41;
  unint64_t *v42;
  unsigned int *v43;
  uint64_t *v44;
  const void **v45;
  uint64_t v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *j;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  BOOL v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  BOOL v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t i;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  BOOL v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t *v101;
  unsigned __int8 *v102;
  unsigned __int8 *v103;
  unsigned int v104;
  uint64_t v105;
  unsigned __int8 *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unsigned int v118;
  uint64_t v119;
  int v120;
  BOOL v121;
  unsigned int *v122;
  uint64_t *v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int **v128;
  uint64_t *v129;
  unsigned int v130;

  v8 = *a1;
  if ((*a1 & 0x8000) != 0)
    return 0;
  v15 = a1;
  while (2)
  {
    result = 0;
    if (v8 > 0xAFu)
    {
      if (v8 <= 0xD1u)
      {
        if (v8 <= 0xB9u)
        {
          if (v8 == 176)
          {
            v17 = &v15[2 * v15[5] + 10];
          }
          else
          {
            if (v8 != 185)
              goto LABEL_116;
            v128 = a2;
            v22 = a5;
            v23 = a3;
            v24 = a4;
            v25 = v15[1];
            if ((v25 & 0x80000000) == 0)
            {
              v26 = v25 - 1;
              if ((_DWORD)v26)
              {
                v27 = (const void **)(v15 + 6);
                v28 = 8 * v26;
                do
                {
                  v29 = *v27++;
                  sub_22E3BA850((uint64_t)a7, v29);
                  v28 -= 8;
                }
                while (v28);
              }
            }
            v17 = v15 + 4;
            a4 = v24;
            a3 = v23;
            a5 = v22;
            a2 = v128;
          }
LABEL_76:
          v17 = *(unsigned int **)v17;
          goto LABEL_77;
        }
        if (v8 <= 0xBBu)
        {
          if (v8 != 186)
            goto LABEL_116;
          v35 = *((_QWORD *)v15 + 2);
          v17 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
          if ((v35 & 4) == 0)
            goto LABEL_77;
          v17 += 10;
          goto LABEL_76;
        }
        switch(v8)
        {
          case 0xBCu:
            *a2 = v15;
            v74 = v15[10];
            *a3 = v74;
            *a4 = v74 | (v74 << 32);
            v75 = *((_QWORD *)v15 + 2);
LABEL_196:
            sub_22F0D4E74(v75);
            *a5 = v109;
            return 1;
          case 0xC8u:
            if ((*(_WORD *)(*(_QWORD *)(a6 + 2000) + 148) & 2) == 0
              || (v15[6] & 0xFD0000) != 0x10000
              || ((v67 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
                ? (v68 = (*(_DWORD *)(v67 + 16) & 0xFF800FF) == 86507531)
                : (v68 = 0),
                  v68 || (v125 = sub_22F32FCE0((uint64_t)v15), v125 != 3)))
            {
              if ((*((_BYTE *)v15 + 27) & 1) != 0)
              {
                result = *((_QWORD *)v15 + 2);
                if (!result)
                  return result;
                if ((*(_BYTE *)(result + 29) & 1) != 0)
                {
                  sub_22EFC8E88(result);
                  v70 = *v69;
                  v71 = *((unsigned int *)v69 + 2);
                  if ((_DWORD)v71)
                  {
                    v72 = 8 * v71;
                    for (i = *v69; *(_WORD *)(*(_QWORD *)i + 32) != 348; i += 8)
                    {
                      result = 0;
                      v72 -= 8;
                      if (!v72)
                        return result;
                    }
                  }
                  else
                  {
                    i = *v69;
                  }
                  if (i != v70 + 8 * v71)
                  {
                    *a2 = v15;
                    sub_22EFF605C((uint64_t)v15);
                    *a3 = v124;
                    return 1;
                  }
                }
              }
              return 0;
            }
            goto LABEL_120;
          case 0xCDu:
            goto LABEL_120;
        }
      }
      else
      {
        switch((char)v8)
        {
          case -46:
            v18 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)a7, v15);
            v19 = *((_QWORD *)a7 + 1);
            if (v19 == *(_QWORD *)a7)
              v20 = a7 + 5;
            else
              v20 = a7 + 4;
            v21 = (void **)(v19 + 8 * *v20);
            if (v18 == v21)
              goto LABEL_74;
            while ((unint64_t)*v18 >= 0xFFFFFFFFFFFFFFFELL)
            {
              if (++v18 == v21)
                goto LABEL_116;
            }
LABEL_74:
            if (v18 != v21)
              goto LABEL_75;
            break;
          case -45:
          case -38:
            return result;
          case -44:
          case -43:
          case -41:
          case -40:
          case -37:
          case -36:
          case -35:
          case -34:
          case -33:
            break;
          case -42:
LABEL_23:
            v17 = v15 + 6;
            goto LABEL_76;
          case -39:
            result = 0;
            v66 = **((unsigned __int8 **)v15 + 2);
            if ((v66 - 112) < 2 || v66 == 233)
              return result;
            goto LABEL_120;
          case -32:
            v37 = (_DWORD *)*((_QWORD *)v15 + 2);
            if (*v37 >= 0x100u)
            {
              v17 = *(unsigned int **)&v37[2 * ((*v37 >> 8) - 1) + 4];
              v38 = *(unsigned __int8 *)v17;
              if ((v38 + 21) > 0x7Au)
                goto LABEL_77;
              if (v38 == 235)
              {
                v17 = (unsigned int *)*((_QWORD *)v17 + 2);
                if ((*(_BYTE *)v17 + 21) > 0x7Au)
                  goto LABEL_77;
              }
            }
            v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            if (v53)
              v54 = (*(_DWORD *)(v53 + 16) & 0xFF800FF) == 86507531;
            else
              v54 = 0;
            if (v54)
              return 0;
            *a2 = v15;
            *a3 = v15[6];
            goto LABEL_122;
          default:
            if (v8 == 233)
            {
              v36 = (v8 >> 18) & 0x1F;
              if (v36 != 12)
              {
                if (v36 > 0xD
                  || (v52 = 1 << v36, (v52 & 0x200F) == 0)
                  && ((v52 & 0xC00) == 0
                   || ((*(_DWORD *)((*(_QWORD *)(*((_QWORD *)v15 + 2) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(*((_QWORD *)v15 + 2) + 8)) & 4) == 0))
                {
                  *a2 = v15;
                  *a3 = v15[1];
                  goto LABEL_191;
                }
                return 0;
              }
LABEL_75:
              v17 = v15 + 4;
              goto LABEL_76;
            }
            if (v8 == 234)
              return result;
            break;
        }
      }
LABEL_116:
      v62 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v62)
        v63 = (*(_DWORD *)(v62 + 16) & 0xFF800FF) == 86507531;
      else
        v63 = 0;
      if (v63)
        return 0;
LABEL_120:
      *a2 = v15;
      sub_22EFF605C((uint64_t)v15);
LABEL_121:
      *a3 = v64;
LABEL_122:
      v65 = (uint64_t)v15;
      goto LABEL_192;
    }
    switch((char)v8)
    {
      case 102:
      case -97:
      case -96:
        v17 = v15 + 12;
        goto LABEL_76;
      case 103:
        result = sub_22EFFDC1C(*((_QWORD *)v15 + 4), a2, a3, a4, a5, a6, a7);
        if (!(_DWORD)result)
          return result;
        v17 = v15 + 10;
        goto LABEL_76;
      case 104:
      case 105:
      case 106:
      case 108:
      case 109:
      case 114:
      case 117:
      case 123:
      case 124:
      case 125:
      case 127:
      case -128:
      case -127:
      case -126:
      case -125:
      case -124:
      case -123:
      case -122:
      case -121:
      case -119:
      case -117:
      case -113:
      case -110:
      case -109:
      case -108:
      case -107:
      case -106:
      case -105:
      case -104:
      case -102:
      case -100:
      case -99:
      case -98:
      case -95:
      case -94:
      case -93:
      case -92:
      case -91:
      case -90:
      case -89:
        goto LABEL_116;
      case 107:
        goto LABEL_195;
      case 110:
      case -88:
        goto LABEL_75;
      case 111:
      case 113:
      case 122:
      case 126:
      case -120:
        return result;
      case 112:
        v93 = (v8 >> 18) & 0x3F;
        if ((v93 - 19) < 2)
        {
          result = sub_22EFFDC1C(*((_QWORD *)v15 + 2), a2, a3, a4, a5, a6, a7);
          if (!(_DWORD)result)
            return result;
          result = sub_22EFFDC1C(*((_QWORD *)v15 + 3), a2, a3, a4, a5, a6, a7);
          if (!(_DWORD)result)
            return result;
          v93 = (*v15 >> 18) & 0x3F;
LABEL_194:
          if ((v93 - 21) >= 0xB)
          {
LABEL_195:
            *a2 = v15;
            *a3 = v15[1];
            sub_22F0D4E74(*((_QWORD *)v15 + 2));
            *a4 = v108;
            v75 = *((_QWORD *)v15 + 3);
            goto LABEL_196;
          }
          return 0;
        }
        if (v93 != 32)
          goto LABEL_194;
        v101 = a4;
        v102 = (unsigned __int8 *)*((_QWORD *)v15 + 3);
        if (v102)
        {
          do
          {
            v103 = v102;
            v104 = *v102;
            if (v104 > 0xD5)
            {
              if (v104 == 233)
              {
                v104 = *(_DWORD *)v102;
                if ((*(_DWORD *)v102 & 0x7C0000) != 0x300000)
                  break;
                v106 = v102 + 16;
              }
              else
              {
                if (v104 != 214)
                  break;
                v106 = v102 + 24;
              }
            }
            else if (v104 == 155)
            {
              if ((**((_DWORD **)v102 + 2) & 0x18000) != 0)
                return sub_22EFFDC1C(*((_QWORD *)v15 + 3), a2, a3, v101, a5, a6, a7);
              v106 = v102 + 24;
              if (!v103[48])
                v106 = v103 + 32;
              v104 = 155;
            }
            else
            {
              if (v104 != 176)
                break;
              v105 = *((unsigned int *)v102 + 5);
              if ((_DWORD)v105 == -1)
                return sub_22EFFDC1C(*((_QWORD *)v15 + 3), a2, a3, v101, a5, a6, a7);
              v106 = &v102[8 * v105 + 40];
              v104 = 176;
            }
            v102 = *(unsigned __int8 **)v106;
          }
          while (v102 != v103);
          if (v104 != 181)
            return sub_22EFFDC1C(*((_QWORD *)v15 + 3), a2, a3, v101, a5, a6, a7);
        }
        else
        {
          v103 = 0;
        }
        sub_22F257F94((uint64_t)(v103 + 16), (llvm::APInt *)&v129);
        v126 = v130;
        if (v130 >= 0x41)
        {
          if (v126 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v129) >= 0x41)
          {
            if (v129)
              MEMORY[0x2348A0E84](v129, 0x1000C8000313F17);
          }
          else
          {
            v127 = *v129;
            MEMORY[0x2348A0E84]();
            if (!v127)
              return 0;
          }
        }
        else if (!v129)
        {
          return 0;
        }
        return sub_22EFFDC1C(*((_QWORD *)v15 + 3), a2, a3, v101, a5, a6, a7);
      case 115:
        v39 = a6;
        v40 = v7;
        v41 = a2;
        v42 = a5;
        v43 = a3;
        v44 = a4;
        if ((v15[1] & 0x7FFFFFFF) != 2)
        {
          v45 = (const void **)(v15 + 8);
          v46 = 8 * ((v15[1] & 0x7FFFFFFF) - 2);
          do
          {
            v47 = *v45++;
            sub_22E3BA850((uint64_t)a7, v47);
            v46 -= 8;
          }
          while (v46);
        }
        v17 = v15 + 4;
        a4 = v44;
        a3 = v43;
        a5 = v42;
        a2 = v41;
        v7 = v40;
        a6 = v39;
        goto LABEL_76;
      case 116:
        goto LABEL_23;
      case 118:
      case 119:
        v55 = sub_22F10C2A4(*(_QWORD *)(*((_QWORD *)v15 + 1) & 0xFFFFFFFFFFFFFFF0));
        if (!v55)
          goto LABEL_105;
        v94 = v55;
        v95 = *(_DWORD *)(v55 + 28);
        if ((v95 & 0x7Fu) - 35 > 2)
          goto LABEL_105;
        if ((v95 & 0x100) == 0)
          goto LABEL_204;
        sub_22EFC8E88(v55);
        v97 = *(uint64_t **)v96;
        v98 = *(unsigned int *)(v96 + 8);
        v99 = *(uint64_t **)v96;
        if (!(_DWORD)v98)
          goto LABEL_201;
        v100 = 8 * v98;
        v99 = *(uint64_t **)v96;
        while (*(_WORD *)(*v99 + 32) != 348)
        {
          ++v99;
          v100 -= 8;
          if (!v100)
            goto LABEL_204;
        }
LABEL_201:
        if (v99 == &v97[v98])
        {
LABEL_204:
          v114 = 0;
          goto LABEL_205;
        }
        do
        {
          v115 = *v97++;
          v114 = v115;
        }
        while (*(_WORD *)(v115 + 32) != 348);
LABEL_205:
        if (sub_22EA06058(v94)
          || v114
          && ((v116 = *(unsigned __int8 *)(v114 + 30), (~(v116 << 16) & 0x780000) != 0)
            ? (v117 = ((*(unsigned __int16 *)(v114 + 28) | (v116 << 16)) >> 19) & 0xF)
            : (v117 = sub_22F1BFAD0(v114)),
              !v117))
        {
          *a2 = v15;
          sub_22F0D5A50((uint64_t)v15);
          goto LABEL_121;
        }
LABEL_105:
        result = *((_QWORD *)v15 + 2);
        if (!result)
          return result;
        if ((*(_BYTE *)(result + 29) & 1) == 0)
          return 0;
        sub_22EFC8E88(result);
        v57 = *(uint64_t **)v56;
        v58 = *(unsigned int *)(v56 + 8);
        j = *(uint64_t **)v56;
        if ((_DWORD)v58)
        {
          v60 = 8 * v58;
          for (j = *(uint64_t **)v56; *(_WORD *)(*j + 32) != 348; ++j)
          {
            result = 0;
            v60 -= 8;
            if (!v60)
              return result;
          }
        }
        if (j == &v57[v58])
          return 0;
        do
        {
          v111 = *v57++;
          v110 = v111;
        }
        while (*(_WORD *)(v111 + 32) != 348);
        v112 = *(unsigned __int8 *)(v110 + 30);
        if ((~(v112 << 16) & 0x780000) != 0
           ? ((*(unsigned __int16 *)(v110 + 28) | (v112 << 16)) >> 19) & 0xF
           : sub_22F1BFAD0(v110))
        {
          return 0;
        }
        *a2 = v15;
        sub_22F0D5A50((uint64_t)v15);
        *a3 = v118;
        sub_22F0D4E74((uint64_t)v15);
        *a4 = v119;
        v85 = v15[8];
        if (v85)
        {
          v120 = *(unsigned __int8 *)v15;
          v121 = v120 == 119;
          if (v120 == 119)
            v122 = v15;
          else
            v122 = 0;
          v123 = (uint64_t *)(v122 + 12);
          if (v121)
            v88 = v123;
          else
            v88 = (uint64_t *)(v15 + 10);
          v87 = *v88;
LABEL_158:
          sub_22F0D5A50(v87);
          v91 = v90;
          sub_22F0D60E4(v88[v85 - 1]);
          *a5 = v91 | (unint64_t)(v92 << 32);
        }
        return 1;
      case 120:
        v17 = (unsigned int *)sub_22EFBC5B4(*((_QWORD *)v15 + 2));
        if ((*(_BYTE *)v17 & 0xFE) != 0xAC)
          goto LABEL_77;
        v17 += 4;
        goto LABEL_76;
      case 121:
        v48 = *((_QWORD *)v15 + 2);
        v17 = (unsigned int *)(*(_QWORD *)(v48 + 72) & 0xFFFFFFFFFFFFFFFCLL);
        if ((*(_BYTE *)(v48 + 68) & 1) == 0)
          goto LABEL_77;
        goto LABEL_76;
      case -118:
      case -116:
      case -114:
        goto LABEL_152;
      case -115:
        v76 = v15[1] & 0x3F;
        v77 = v76 > 0x21;
        v78 = (1 << v76) & 0x3C0030000;
        v79 = v77 || v78 == 0;
        if (!v79
          && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EFFA9C0((uint64_t)v15, a6) & 0xFFFFFFFFFFFFFFF0)
                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) & 0xFE) != 0x28)
        {
          v80 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EFFA9C0((uint64_t)v15, a6) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          if (!v80 || (*(_DWORD *)(v80 + 16) & 0xFF800FF) != 86507531)
          {
            *a2 = v15;
            *a3 = v15[5];
            *a4 = *((_QWORD *)v15 + 3);
            return 1;
          }
        }
LABEL_152:
        result = sub_22EFFA604(*(unsigned __int8 **)((char *)v15 + *((unsigned __int8 *)v15 + 3)));
        if (!result)
          return result;
        v82 = result;
        if (!sub_22EFFAD70((uint64_t)v15, a6) && !sub_22E47278C(v82))
        {
          result = sub_22E3E3190(v82);
          if (!(_DWORD)result)
            return result;
        }
        *a2 = v15;
        sub_22F0D5A50(*(_QWORD *)((char *)v15 + *((unsigned __int8 *)v15 + 3)));
        *a3 = v83;
        sub_22F0D4E74(*(_QWORD *)((char *)v15 + *((unsigned __int8 *)v15 + 3)));
        *a4 = v84;
        v85 = v15[4];
        if (!v85)
          return 1;
        v86 = (unint64_t)&v15[2 * (((unint64_t)*v15 >> 18) & 1)] + ((unint64_t)*v15 >> 24);
        v89 = *(_QWORD *)(v86 + 8);
        v88 = (uint64_t *)(v86 + 8);
        v87 = v89;
        goto LABEL_158;
      case -112:
      case -111:
        v17 = (unsigned int *)*((_QWORD *)v15 + 2);
        if (!v17)
        {
          v31 = 0;
          goto LABEL_80;
        }
        v30 = (unsigned __int8 *)*((_QWORD *)v15 + 2);
        while (2)
        {
          v31 = v30;
          v32 = *v30;
          if (v32 > 213)
          {
            if (v32 == 233)
            {
              if ((*(_DWORD *)v31 & 0x7C0000) != 0x300000)
                goto LABEL_80;
              v34 = v31 + 16;
            }
            else
            {
              if (v32 != 214)
                goto LABEL_80;
              v34 = v31 + 24;
            }
LABEL_40:
            v30 = *(unsigned __int8 **)v34;
            if (v30 == v31)
              goto LABEL_80;
            continue;
          }
          break;
        }
        if (v32 == 155)
        {
          if ((**((_DWORD **)v31 + 2) & 0x18000) != 0)
            goto LABEL_80;
          if (v31[48])
            v34 = v31 + 24;
          else
            v34 = v31 + 32;
          goto LABEL_40;
        }
        if (v32 == 176)
        {
          v33 = *((unsigned int *)v31 + 5);
          if ((_DWORD)v33 != -1)
          {
            v34 = &v31[8 * v33 + 40];
            goto LABEL_40;
          }
        }
LABEL_80:
        v50 = (v8 >> 18) & 0x7F;
        switch(v50)
        {
          case 21:
            goto LABEL_77;
          case 25:
            if ((**(_QWORD **)(a6 + 2000) & 0x300) != 0x100)
              return 0;
            result = sub_22EFFDA00(v31);
            if (!(_DWORD)result)
              return result;
            if (*v31 == 161)
            {
              v51 = *((_QWORD *)v31 + 2);
              if (v51)
              {
                if ((*(_DWORD *)(v51 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9 && sub_22EFB948C(v51) < 3)
                  return 0;
              }
            }
            v17 = (unsigned int *)v31;
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v31 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 16) & 0xFEu)
               - 2 < 4)
              return 0;
LABEL_77:
            v8 = *v17;
            v15 = v17;
            if ((*v17 & 0x8000) != 0)
              return 0;
            continue;
          case 0:
            return 0;
        }
        *a2 = v15;
        if (*(unsigned __int8 *)v15 == 145)
          v61 = sub_22F0613F8((uint64_t)v15);
        else
          v61 = v15[8];
        *a3 = v61;
LABEL_191:
        v65 = *((_QWORD *)v15 + 2);
LABEL_192:
        sub_22F0D4E74(v65);
        *a4 = v107;
        return 1;
      case -103:
        v17 = (unsigned int *)*((_QWORD *)v15 + 2);
        if ((v8 & 0x1FC0000) == 0x100000)
        {
          v49 = *((_QWORD *)v17 + 1);
          if ((v49 & 4) != 0 || (*(_BYTE *)((v49 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0)
            return 0;
        }
        goto LABEL_77;
      case -101:
        if (*((_BYTE *)v15 + 48))
          v17 = v15 + 6;
        else
          v17 = v15 + 8;
        goto LABEL_76;
      default:
        if (v8 != 173)
          goto LABEL_116;
        goto LABEL_75;
    }
  }
}

unsigned __int8 *sub_22EFFE844(unsigned __int8 *result)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unsigned __int8 **v4;

  if (result)
  {
    v1 = result;
    do
    {
      result = v1;
      v2 = *v1;
      if (v2 > 213)
      {
        if (v2 == 233)
        {
          if ((*(_DWORD *)result & 0x7C0000) != 0x300000)
            return result;
          v4 = (unsigned __int8 **)(result + 16);
        }
        else
        {
          if (v2 != 214)
            return result;
          v4 = (unsigned __int8 **)(result + 24);
        }
      }
      else if (v2 == 155)
      {
        if ((**((_DWORD **)result + 2) & 0x18000) != 0)
          return result;
        if (result[48])
          v4 = (unsigned __int8 **)(result + 24);
        else
          v4 = (unsigned __int8 **)(result + 32);
      }
      else
      {
        if (v2 != 176)
          return result;
        v3 = *((unsigned int *)result + 5);
        if ((_DWORD)v3 == -1)
          return result;
        v4 = (unsigned __int8 **)&result[8 * v3 + 40];
      }
      v1 = *v4;
    }
    while (v1 != result);
  }
  return result;
}

unint64_t sub_22EFFE8E8(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!result)
    return result;
  while (1)
  {
    do
    {
      v3 = result;
      LODWORD(v4) = *(unsigned __int8 *)result;
      if (v4 > 0xD5)
      {
        if ((_DWORD)v4 == 233)
        {
          LODWORD(v4) = *(_DWORD *)result;
          if ((*(_DWORD *)result & 0x7C0000) != 0x300000)
            break;
          v5 = (unint64_t *)(result + 16);
        }
        else
        {
          if ((_DWORD)v4 != 214)
            break;
          v5 = (unint64_t *)(result + 24);
        }
      }
      else if ((_DWORD)v4 == 155)
      {
        if ((**(_DWORD **)(result + 16) & 0x18000) != 0)
          return 0;
        v5 = (unint64_t *)(result + 24);
        if (!*(_BYTE *)(result + 48))
          v5 = (unint64_t *)(result + 32);
        LOBYTE(v4) = -101;
      }
      else
      {
        if ((_DWORD)v4 != 176)
          break;
        v4 = *(unsigned int *)(result + 20);
        if ((_DWORD)v4 == -1)
          return 0;
        v5 = (unint64_t *)(result + 8 * v4 + 40);
        LOBYTE(v4) = -80;
      }
      result = *v5;
    }
    while (*v5 != v3);
    if (v4 <= 0xB9u)
      break;
    if (v4 > 0xC6u)
    {
      if (v4 != 233)
        return v4 == 199;
      goto LABEL_43;
    }
    if (v4 != 186)
    {
      if (v4 != 188)
        return 0;
      goto LABEL_43;
    }
    v11 = *(_QWORD *)(v3 + 16);
    result = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 4) != 0)
    {
      v6 = (unint64_t *)(result + 40);
LABEL_44:
      result = *v6;
    }
    if (!result)
      return 0;
  }
  if (v4 <= 0x98u)
  {
    if (v4 == 107)
    {
      v6 = (unint64_t *)(v3 + 24);
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v8 = *(_DWORD *)(v7 + 16);
      if (v7)
        v9 = v8 == 11;
      else
        v9 = 0;
      if (v9)
      {
        if (((*(_DWORD *)(v7 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
          goto LABEL_44;
      }
      else if (v7 && v8 == 44)
      {
        v10 = sub_22F114198(*(_QWORD *)(v7 + 24));
        if ((*(_BYTE *)(v10 + 74) & 1) == 0 && *(_QWORD *)(v10 + 128) <= 7uLL
          || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v7 + 24)) + 72) & 0x8000000000) != 0)
        {
          goto LABEL_44;
        }
      }
      else if (v8 != 9)
      {
        goto LABEL_44;
      }
    }
    else if (v4 != 144)
    {
      return 0;
    }
LABEL_43:
    v6 = (unint64_t *)(v3 + 16);
    goto LABEL_44;
  }
  if (v4 == 153)
    goto LABEL_43;
  if (v4 != 161)
    return 0;
  result = 0;
  v12 = *(_QWORD *)(v3 + 16);
  if (v12 && (*(_DWORD *)(v12 + 28) & 0x7Fu) - 60 <= 6)
  {
    if (!sub_22E3CB5E0(v12))
      return 1;
    v13 = *(_QWORD *)(v12 + 48);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
      return sub_22EF6E3E4(a2, v13) != 1;
    return 0;
  }
  return result;
}

unsigned __int8 *sub_22EFFEB40(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  int v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  const void **v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  const void *v14;
  void **v15;
  uint64_t *v16;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  _BYTE v22[64];

  v18 = v22;
  v19 = v22;
  v20 = 8;
  v21 = 0;
  if (!a1)
    return 0;
  v1 = a1;
  do
  {
    v2 = v1;
    v3 = *v1;
    if (v3 == 153 || (v3 & 0xFE) == 0xAC)
    {
      v1 = (unsigned __int8 *)*((_QWORD *)v1 + 2);
      v3 = *v1;
    }
    if (v3 == 110 || v3 == 168)
      goto LABEL_8;
    if (v3 == 185)
      v5 = v1;
    else
      v5 = 0;
    if (v3 == 185)
    {
      v6 = *((_DWORD *)v1 + 1);
      if (v6 < 0)
      {
LABEL_8:
        v4 = (unsigned __int8 **)(v1 + 16);
LABEL_9:
        v1 = *v4;
        continue;
      }
      v7 = (v6 - 1);
      if ((_DWORD)v7)
      {
        v8 = (const void **)(v1 + 24);
        v9 = 8 * v7;
        do
        {
          v10 = *v8++;
          sub_22E3BA850((uint64_t)&v18, v10);
          v9 -= 8;
        }
        while (v9);
      }
LABEL_28:
      v4 = (unsigned __int8 **)(v5 + 16);
      goto LABEL_9;
    }
    if (v3 == 115)
      v5 = v1;
    else
      v5 = 0;
    if (v3 == 115)
    {
      v11 = (*((_DWORD *)v1 + 1) & 0x7FFFFFFFu) - 2;
      if ((*((_DWORD *)v1 + 1) & 0x7FFFFFFF) != 2)
      {
        v12 = (const void **)(v1 + 32);
        v13 = 8 * v11;
        do
        {
          v14 = *v12++;
          sub_22E3BA850((uint64_t)&v18, v14);
          v13 -= 8;
        }
        while (v13);
      }
      goto LABEL_28;
    }
    if (v3 == 210)
    {
      v15 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v18, v1);
      v16 = v19 == v18 ? (uint64_t *)((char *)&v20 + 4) : &v20;
      if (v15 != (void **)&v19[8 * *(unsigned int *)v16])
        goto LABEL_8;
    }
  }
  while (v1 != v2);
  if (v19 != v18)
    free(v19);
  return v2;
}

unsigned __int8 *sub_22EFFECB4(unsigned __int8 *result)
{
  int v1;
  unsigned __int8 *v2;
  uint64_t v3;

  v1 = *result;
  if ((v1 + 102) >= 0xF5u || (v1 & 0xFE) == 0xAC)
  {
    v2 = result + 16;
    return *(unsigned __int8 **)v2;
  }
  if (v1 == 226)
  {
    v2 = result + 24;
    return *(unsigned __int8 **)v2;
  }
  if (v1 == 186)
  {
    v3 = *((_QWORD *)result + 2);
    result = (unsigned __int8 *)(v3 & 0xFFFFFFFFFFFFFFF8);
    if ((v3 & 4) != 0)
    {
      v2 = result + 40;
      return *(unsigned __int8 **)v2;
    }
  }
  return result;
}

unsigned __int8 *sub_22EFFED0C(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  int v3;
  unsigned __int8 **v4;
  int v5;
  unsigned __int8 **v6;
  const void **v7;
  const void *v8;
  uint64_t v9;
  const void **v10;
  const void *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t *v19;
  char *v21;
  char *v22;
  uint64_t v23;
  int v24;
  _BYTE v25[64];

  v21 = v25;
  v22 = v25;
  v23 = 8;
  v24 = 0;
  if (!a1)
    return 0;
  v1 = a1;
  do
  {
    v2 = v1;
    v3 = *v1;
    if (v3 == 153 || (v3 & 0xFE) == 0xAC)
    {
      v4 = (unsigned __int8 **)(v1 + 16);
LABEL_6:
      v1 = *v4;
      goto LABEL_7;
    }
    if (v3 == 116)
    {
      v4 = (unsigned __int8 **)(v1 + 24);
      goto LABEL_6;
    }
    if (v3 == 186)
    {
      v16 = *((_QWORD *)v1 + 2);
      v1 = (unsigned __int8 *)(v16 & 0xFFFFFFFFFFFFFFF8);
      if ((v16 & 4) != 0)
      {
        v4 = (unsigned __int8 **)(v1 + 40);
        goto LABEL_6;
      }
    }
LABEL_7:
    v5 = *v1;
    if (v5 == 110 || v5 == 168)
      goto LABEL_9;
    if (v5 == 185)
      v13 = v1;
    else
      v13 = 0;
    if (v5 == 185)
    {
      v14 = *((_DWORD *)v1 + 1);
      if (v14 < 0)
      {
LABEL_9:
        v6 = (unsigned __int8 **)(v1 + 16);
LABEL_10:
        v1 = *v6;
        continue;
      }
      v15 = (v14 - 1);
      if ((_DWORD)v15)
      {
        v7 = (const void **)(v1 + 24);
        v9 = 8 * v15;
        do
        {
          v8 = *v7++;
          sub_22E3BA850((uint64_t)&v21, v8);
          v9 -= 8;
        }
        while (v9);
      }
LABEL_23:
      v6 = (unsigned __int8 **)(v13 + 16);
      goto LABEL_10;
    }
    if (v5 == 115)
      v13 = v1;
    else
      v13 = 0;
    if (v5 == 115)
    {
      v17 = (*((_DWORD *)v1 + 1) & 0x7FFFFFFFu) - 2;
      if ((*((_DWORD *)v1 + 1) & 0x7FFFFFFF) != 2)
      {
        v10 = (const void **)(v1 + 32);
        v12 = 8 * v17;
        do
        {
          v11 = *v10++;
          sub_22E3BA850((uint64_t)&v21, v11);
          v12 -= 8;
        }
        while (v12);
      }
      goto LABEL_23;
    }
    if (v5 == 210)
    {
      v18 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v21, v1);
      v19 = v22 == v21 ? (uint64_t *)((char *)&v23 + 4) : &v23;
      if (v18 != (void **)&v22[8 * *(unsigned int *)v19])
        goto LABEL_9;
    }
  }
  while (v1 != v2);
  if (v22 != v21)
    free(v22);
  return v2;
}

unsigned __int8 *sub_22EFFEEC4(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  int v3;
  unsigned __int8 **v4;
  uint64_t v5;
  int v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  const void **v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  const void **v15;
  uint64_t v16;
  const void *v17;
  void **v18;
  uint64_t *v19;
  char *v21;
  char *v22;
  uint64_t v23;
  int v24;
  _BYTE v25[64];

  v21 = v25;
  v22 = v25;
  v23 = 8;
  v24 = 0;
  if (!a1)
    return 0;
  v1 = a1;
  do
  {
    v2 = v1;
    v3 = *v1;
    if (v3 == 153)
    {
      v1 = sub_22EFFB374(v1);
      goto LABEL_13;
    }
    if ((v3 & 0xFE) == 0xAC)
    {
      v4 = (unsigned __int8 **)(v1 + 16);
LABEL_12:
      v1 = *v4;
      goto LABEL_13;
    }
    if (v3 == 116)
    {
      v4 = (unsigned __int8 **)(v1 + 24);
      goto LABEL_12;
    }
    if (v3 == 186)
    {
      v5 = *((_QWORD *)v1 + 2);
      v1 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 4) != 0)
      {
        v4 = (unsigned __int8 **)(v1 + 40);
        goto LABEL_12;
      }
    }
LABEL_13:
    v6 = *v1;
    if (v6 == 110 || v6 == 168)
      goto LABEL_15;
    if (v6 == 185)
      v8 = v1;
    else
      v8 = 0;
    if (v6 == 185)
    {
      v9 = *((_DWORD *)v1 + 1);
      if (v9 < 0)
      {
LABEL_15:
        v7 = (unsigned __int8 **)(v1 + 16);
LABEL_16:
        v1 = *v7;
        continue;
      }
      v10 = (v9 - 1);
      if ((_DWORD)v10)
      {
        v11 = (const void **)(v1 + 24);
        v12 = 8 * v10;
        do
        {
          v13 = *v11++;
          sub_22E3BA850((uint64_t)&v21, v13);
          v12 -= 8;
        }
        while (v12);
      }
LABEL_35:
      v7 = (unsigned __int8 **)(v8 + 16);
      goto LABEL_16;
    }
    if (v6 == 115)
      v8 = v1;
    else
      v8 = 0;
    if (v6 == 115)
    {
      v14 = (*((_DWORD *)v1 + 1) & 0x7FFFFFFFu) - 2;
      if ((*((_DWORD *)v1 + 1) & 0x7FFFFFFF) != 2)
      {
        v15 = (const void **)(v1 + 32);
        v16 = 8 * v14;
        do
        {
          v17 = *v15++;
          sub_22E3BA850((uint64_t)&v21, v17);
          v16 -= 8;
        }
        while (v16);
      }
      goto LABEL_35;
    }
    if (v6 == 210)
    {
      v18 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v21, v1);
      v19 = v22 == v21 ? (uint64_t *)((char *)&v23 + 4) : &v23;
      if (v18 != (void **)&v22[8 * *(unsigned int *)v19])
        goto LABEL_15;
    }
  }
  while (v1 != v2);
  if (v22 != v21)
    free(v22);
  return v2;
}

uint64_t sub_22EFFF078(unsigned __int8 *a1)
{
  uint64_t v2;

  if (*a1 == 140 && (v2 = sub_22F060FB4((uint64_t)a1)) != 0 && (*(_DWORD *)(v2 + 28) & 0x7F) == 0x38)
    return sub_22F060ED0((uint64_t)a1);
  else
    return (uint64_t)a1;
}

unsigned __int8 *sub_22EFFF0D0(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 **v7;
  int v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  const void **v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  const void **v17;
  uint64_t v18;
  const void *v19;
  void **v20;
  uint64_t *v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;
  _BYTE v27[64];

  v23 = v27;
  v24 = v27;
  v25 = 8;
  v26 = 0;
  if (!a1)
    return 0;
  v1 = a1;
  do
  {
    v2 = v1;
    v3 = *v1;
    if (v3 > 0xD5)
    {
      if (v3 == 233)
      {
        if ((*(_DWORD *)v1 & 0x7C0000) != 0x300000)
          break;
        v5 = v1 + 16;
      }
      else
      {
        if (v3 != 214)
          goto LABEL_18;
        v5 = v1 + 24;
      }
    }
    else if (v3 == 155)
    {
      if ((**((_DWORD **)v1 + 2) & 0x18000) != 0)
        goto LABEL_27;
      if (v1[48])
        v5 = v1 + 24;
      else
        v5 = v1 + 32;
    }
    else
    {
      if (v3 != 176)
        goto LABEL_18;
      v4 = *((unsigned int *)v1 + 5);
      if ((_DWORD)v4 == -1)
        break;
      v5 = &v1[8 * v4 + 40];
    }
    v1 = *(unsigned __int8 **)v5;
    v3 = **(unsigned __int8 **)v5;
LABEL_18:
    if ((v3 + 102) >= 0xF5u)
    {
      if ((*(_DWORD *)v1 & 0x1FC0000) == 0x100000)
      {
LABEL_25:
        v7 = (unsigned __int8 **)(v1 + 16);
        goto LABEL_26;
      }
    }
    else
    {
      if ((v3 & 0xFE) == 0xAC)
        goto LABEL_25;
      if (v3 == 226)
      {
        v7 = (unsigned __int8 **)(v1 + 24);
        goto LABEL_26;
      }
      if (v3 == 186)
      {
        v6 = *((_QWORD *)v1 + 2);
        v1 = (unsigned __int8 *)(v6 & 0xFFFFFFFFFFFFFFF8);
        if ((v6 & 4) != 0)
        {
          v7 = (unsigned __int8 **)(v1 + 40);
LABEL_26:
          v1 = *v7;
        }
      }
    }
LABEL_27:
    v8 = *v1;
    if (v8 == 110 || v8 == 168)
      goto LABEL_29;
    if (v8 == 185)
      v10 = v1;
    else
      v10 = 0;
    if (v8 == 185)
    {
      v11 = *((_DWORD *)v1 + 1);
      if (v11 < 0)
      {
LABEL_29:
        v9 = (unsigned __int8 **)(v1 + 16);
LABEL_30:
        v1 = *v9;
        continue;
      }
      v12 = (v11 - 1);
      if ((_DWORD)v12)
      {
        v13 = (const void **)(v1 + 24);
        v14 = 8 * v12;
        do
        {
          v15 = *v13++;
          sub_22E3BA850((uint64_t)&v23, v15);
          v14 -= 8;
        }
        while (v14);
      }
LABEL_49:
      v9 = (unsigned __int8 **)(v10 + 16);
      goto LABEL_30;
    }
    if (v8 == 115)
      v10 = v1;
    else
      v10 = 0;
    if (v8 == 115)
    {
      v16 = (*((_DWORD *)v1 + 1) & 0x7FFFFFFFu) - 2;
      if ((*((_DWORD *)v1 + 1) & 0x7FFFFFFF) != 2)
      {
        v17 = (const void **)(v1 + 32);
        v18 = 8 * v16;
        do
        {
          v19 = *v17++;
          sub_22E3BA850((uint64_t)&v23, v19);
          v18 -= 8;
        }
        while (v18);
      }
      goto LABEL_49;
    }
    if (v8 == 210)
    {
      v20 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v23, v1);
      v21 = v24 == v23 ? (uint64_t *)((char *)&v25 + 4) : &v25;
      if (v20 != (void **)&v24[8 * *(unsigned int *)v21])
        goto LABEL_29;
    }
  }
  while (v1 != v2);
  if (v24 != v23)
    free(v24);
  return v2;
}

unsigned __int8 *sub_22EFFF320(unsigned __int8 *result)
{
  unsigned __int8 *v1;
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned int v5;
  BOOL v6;
  int v7;

  if (result)
  {
    v1 = result;
    do
    {
      result = v1;
      v2 = *v1;
      if (v2 > 0xD5)
      {
        if (v2 == 233)
        {
          v2 = *(_DWORD *)v1;
          if ((*(_DWORD *)v1 & 0x7C0000) == 0x300000)
          {
            v4 = (unsigned __int8 **)(v1 + 16);
            goto LABEL_17;
          }
        }
        else if (v2 == 214)
        {
          v4 = (unsigned __int8 **)(v1 + 24);
LABEL_17:
          v1 = *v4;
          LOBYTE(v2) = *v1;
        }
      }
      else
      {
        if (v2 == 155)
        {
          if ((**((_DWORD **)v1 + 2) & 0x18000) != 0)
            return result;
          if (v1[48])
            v4 = (unsigned __int8 **)(v1 + 24);
          else
            v4 = (unsigned __int8 **)(v1 + 32);
          goto LABEL_17;
        }
        if (v2 == 176)
        {
          v3 = *((unsigned int *)v1 + 5);
          if ((_DWORD)v3 == -1)
            return result;
          v4 = (unsigned __int8 **)&result[8 * v3 + 40];
          goto LABEL_17;
        }
      }
      if ((v2 + 102) >= 0xF5u)
      {
        v5 = (*(_DWORD *)v1 >> 18) & 0x7F;
        v6 = v5 > 8;
        v7 = (1 << v5) & 0x1A0;
        if (!v6 && v7 != 0)
          v1 = (unsigned __int8 *)*((_QWORD *)v1 + 2);
      }
    }
    while (v1 != result);
  }
  return result;
}

unsigned __int8 *sub_22EFFF40C(unsigned __int8 *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  if (a1)
  {
    v3 = a1;
    while (1)
    {
      v4 = v3;
      v5 = *v3;
      if (v5 > 0xD5)
      {
        if (v5 == 233)
        {
          v6 = v3;
          if ((*(_DWORD *)v3 & 0x7C0000) != 0x300000)
            goto LABEL_30;
          v8 = v3 + 16;
        }
        else
        {
          v6 = v3;
          if (v5 != 214)
            goto LABEL_18;
          v8 = v3 + 24;
        }
      }
      else if (v5 == 155)
      {
        v6 = v3;
        if ((**((_DWORD **)v3 + 2) & 0x18000) != 0)
          goto LABEL_30;
        if (v3[48])
          v8 = v3 + 24;
        else
          v8 = v3 + 32;
      }
      else
      {
        v6 = v3;
        if (v5 != 176)
          goto LABEL_18;
        v7 = *((unsigned int *)v3 + 5);
        v6 = v3;
        if ((_DWORD)v7 == -1)
          goto LABEL_30;
        v8 = &v3[8 * v7 + 40];
      }
      v6 = *(unsigned __int8 **)v8;
      v5 = **(unsigned __int8 **)v8;
LABEL_18:
      if ((v5 + 102) >= 0xF5u)
      {
        v3 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
        v9 = *(_QWORD *)(*((_QWORD *)v6 + 1) & 0xFFFFFFFFFFFFFFF0);
        v10 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)v6 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v11 = (uint64_t *)(*((_QWORD *)v3 + 1) & 0xFFFFFFFFFFFFFFF0);
        v12 = *(_QWORD *)(v11[1] & 0xFFFFFFFFFFFFFFF0);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
        {
LABEL_24:
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
            && !sub_22F110744(*v11, a2))
          {
            goto LABEL_27;
          }
          v13 = sub_22EF5CDF0(a2, *(_QWORD *)(*((_QWORD *)v6 + 1) & 0xFFFFFFFFFFFFFFF0));
          v14 = v13 == sub_22EF5CDF0(a2, *(_QWORD *)(*((_QWORD *)v3 + 1) & 0xFFFFFFFFFFFFFFF0));
        }
        else
        {
          if (sub_22F110744(v9, a2))
          {
            v11 = (uint64_t *)(*((_QWORD *)v3 + 1) & 0xFFFFFFFFFFFFFFF0);
            goto LABEL_24;
          }
LABEL_27:
          v14 = 0;
        }
        if (v10 == v12 || v14)
          goto LABEL_31;
LABEL_30:
        v3 = v6;
        goto LABEL_31;
      }
      if (v5 != 226)
        goto LABEL_30;
      v3 = (unsigned __int8 *)*((_QWORD *)v6 + 3);
LABEL_31:
      if (v3 == v4)
        return v4;
    }
  }
  return 0;
}

unsigned __int8 *sub_22EFFF5EC(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  int v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 **v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  BOOL v16;
  unsigned __int8 *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned __int8 **v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  const void **v34;
  uint64_t v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const void **v40;
  uint64_t v41;
  const void *v42;
  void **v43;
  uint64_t *v44;
  char *v46;
  char *v47;
  uint64_t v48;
  int v49;
  _BYTE v50[64];

  v46 = v50;
  v47 = v50;
  v48 = 8;
  v49 = 0;
  if (!a1)
    return 0;
  v1 = a1;
  do
  {
    v2 = v1;
    v3 = *v1;
    if (v3 == 153 || (v3 & 0xFE) == 0xAC)
    {
      v4 = (unsigned __int8 **)(v1 + 16);
LABEL_6:
      v5 = *v4;
      goto LABEL_7;
    }
    if (v3 == 116)
    {
      v4 = (unsigned __int8 **)(v1 + 24);
      goto LABEL_6;
    }
    v5 = v1;
    if (v3 == 186)
    {
      v37 = *((_QWORD *)v1 + 2);
      v5 = (unsigned __int8 *)(v37 & 0xFFFFFFFFFFFFFFF8);
      if ((v37 & 4) != 0)
      {
        v4 = (unsigned __int8 **)(v5 + 40);
        goto LABEL_6;
      }
    }
LABEL_7:
    v6 = *v5;
    if (v6 == 153 || (v6 & 0xFE) == 0xAC)
    {
      v7 = (unsigned __int8 **)(v5 + 16);
    }
    else if (v6 == 226)
    {
      v7 = (unsigned __int8 **)(v5 + 24);
    }
    else
    {
      if (v6 != 186)
        goto LABEL_11;
      v38 = *((_QWORD *)v5 + 2);
      v5 = (unsigned __int8 *)(v38 & 0xFFFFFFFFFFFFFFF8);
      if ((v38 & 4) == 0)
        goto LABEL_11;
      v7 = (unsigned __int8 **)(v5 + 40);
    }
    v5 = *v7;
LABEL_11:
    v8 = *v5;
    if (v8 == 214)
    {
      v5 = (unsigned __int8 *)*((_QWORD *)v5 + 3);
      v8 = *v5;
    }
    if (v8 == 145)
    {
      v9 = *((_QWORD *)v5 + 2);
      sub_22F0D4E74(v9);
      v11 = v10;
      sub_22F0D4E74((uint64_t)v5);
      if (v11 == v12)
        v5 = (unsigned __int8 *)v9;
    }
    else if ((v8 & 0xFE) == 0x76)
    {
      v13 = *((_DWORD *)v5 + 8);
      if (v13)
      {
        if (v13 == 1)
          goto LABEL_26;
        if (v8 == 119)
          v14 = v5;
        else
          v14 = 0;
        v15 = v14 + 48;
        if (v8 != 119)
          v15 = v5 + 40;
        if (**((_BYTE **)v15 + 1) == 120)
        {
LABEL_26:
          v16 = v8 == 119;
          if (v8 == 119)
            v17 = v5;
          else
            v17 = 0;
          v18 = (uint64_t *)(v17 + 48);
          if (!v16)
            v18 = (uint64_t *)(v5 + 40);
          v19 = *v18;
          sub_22F0D4E74(*v18);
          v21 = v20;
          sub_22F0D4E74((uint64_t)v5);
          if (v21 == v22 || (v5[2] & 4) != 0)
            v5 = (unsigned __int8 *)v19;
        }
      }
    }
    if (*v5 != 140)
      goto LABEL_39;
    v1 = (unsigned __int8 *)sub_22F060ED0((uint64_t)v5);
    sub_22F0D4E74((uint64_t)v1);
    v24 = v23;
    sub_22F0D4E74((uint64_t)v5);
    if (v24 != v25)
    {
      v26 = v25;
      if (*v1 == 214)
      {
        sub_22F0D4E74((uint64_t)v1);
        if (v27 == v26)
          continue;
      }
      v1 = sub_22EFFA6B0(v1);
      sub_22F0D4E74((uint64_t)v1);
      if (v28 != v26)
LABEL_39:
        v1 = v5;
    }
    v29 = *v1;
    if (v29 == 110 || v29 == 168)
      goto LABEL_42;
    if (v29 == 185)
      v31 = v1;
    else
      v31 = 0;
    if (v29 == 185)
    {
      v32 = *((_DWORD *)v1 + 1);
      if ((v32 & 0x80000000) == 0)
      {
        v33 = (v32 - 1);
        if ((_DWORD)v33)
        {
          v34 = (const void **)(v1 + 24);
          v35 = 8 * v33;
          do
          {
            v36 = *v34++;
            sub_22E3BA850((uint64_t)&v46, v36);
            v35 -= 8;
          }
          while (v35);
        }
        goto LABEL_70;
      }
LABEL_42:
      v30 = (unsigned __int8 **)(v1 + 16);
LABEL_43:
      v1 = *v30;
      continue;
    }
    if (v29 == 115)
      v31 = v1;
    else
      v31 = 0;
    if (v29 == 115)
    {
      v39 = (*((_DWORD *)v1 + 1) & 0x7FFFFFFFu) - 2;
      if ((*((_DWORD *)v1 + 1) & 0x7FFFFFFF) != 2)
      {
        v40 = (const void **)(v1 + 32);
        v41 = 8 * v39;
        do
        {
          v42 = *v40++;
          sub_22E3BA850((uint64_t)&v46, v42);
          v41 -= 8;
        }
        while (v41);
      }
LABEL_70:
      v30 = (unsigned __int8 **)(v31 + 16);
      goto LABEL_43;
    }
    if (v29 == 210)
    {
      v43 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v46, v1);
      v44 = v47 == v46 ? (uint64_t *)((char *)&v48 + 4) : &v48;
      if (v43 != (void **)&v47[8 * *(unsigned int *)v44])
        goto LABEL_42;
    }
  }
  while (v1 != v2);
  if (v47 != v46)
    free(v47);
  return v2;
}

BOOL sub_22EFFF908(unsigned __int8 *a1)
{
  int v1;
  uint64_t v2;

  v1 = *a1;
  if (v1 != 186)
    goto LABEL_6;
  v2 = *((_QWORD *)a1 + 2);
  a1 = (unsigned __int8 *)(v2 & 0xFFFFFFFFFFFFFFF8);
  if ((v2 & 4) != 0)
    a1 = (unsigned __int8 *)*((_QWORD *)a1 + 5);
  while (1)
  {
    v1 = *a1;
LABEL_6:
    if (v1 != 153)
      break;
    a1 = sub_22EFFB374(a1);
  }
  return v1 == 120;
}

BOOL sub_22EFFF950(unsigned __int8 *a1, uint64_t a2, unint64_t a3)
{
  unsigned __int8 *v4;
  uint64_t v5;
  unint64_t v6;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  __int16 v14;
  int v15;

  v4 = a1;
  v5 = *((_QWORD *)a1 + 1);
  v6 = *(_QWORD *)(a3 + 48);
  if (!v6)
    v6 = sub_22EF6462C(a2, a3);
  if (*(_QWORD *)(*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
    return 0;
  v8 = *v4;
  if (v8 != 186)
    goto LABEL_9;
  v9 = *((_QWORD *)v4 + 2);
  v4 = (unsigned __int8 *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if ((v9 & 4) != 0)
    v4 = (unsigned __int8 *)*((_QWORD *)v4 + 5);
  while (1)
  {
    v8 = *v4;
LABEL_9:
    if (v8 != 153)
      break;
    if ((*(_DWORD *)v4 & 0x1FC0000) != 0x140000)
    {
      v8 = *(_DWORD *)v4;
      break;
    }
    v4 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
  }
  while (v8 == 116)
  {
    v4 = (unsigned __int8 *)*((_QWORD *)v4 + 3);
    v8 = *v4;
  }
  while (v8 == 153 && (*(_DWORD *)v4 & 0x1FC0000) == 0x140000)
  {
    v4 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
    v8 = *v4;
  }
  do
  {
    v10 = v4;
    v11 = *v4;
    if (v11 > 0xD5)
    {
      if (v11 == 233)
      {
        if ((*(_DWORD *)v4 & 0x7C0000) != 0x300000)
          break;
        v13 = v4 + 16;
      }
      else
      {
        if (v11 != 214)
          break;
        v13 = v4 + 24;
      }
      goto LABEL_33;
    }
    if (v11 == 155)
    {
      if ((**((_DWORD **)v4 + 2) & 0x18000) != 0)
        break;
      if (v4[48])
        v13 = v4 + 24;
      else
        v13 = v4 + 32;
      goto LABEL_33;
    }
    if (v11 != 176)
      break;
    v12 = *((unsigned int *)v4 + 5);
    if ((_DWORD)v12 == -1)
      break;
    v13 = &v4[8 * v12 + 40];
LABEL_33:
    v4 = *(unsigned __int8 **)v13;
  }
  while (*(unsigned __int8 **)v13 != v10);
  v14 = sub_22F003E64((uint64_t)v10, a2, 0);
  v15 = *v10;
  if ((v14 & 0xFFFE) == 0)
  {
    if (v15 != 205)
      return 0;
    return v15 != 210;
  }
  if (v15 == 188)
    return 0;
  if (v15 != 153)
  {
    if ((v15 & 0xFE) == 0x70 && (v10[2] & 0xF8) == 0)
      return 0;
    return v15 != 210;
  }
  if (((*(_DWORD *)v10 >> 18) & 0x7Fu) - 7 >= 2)
  {
    v15 = 153;
    return v15 != 210;
  }
  return 0;
}

uint64_t sub_22EFFFB48(unsigned __int8 *a1)
{
  int v1;
  unsigned __int8 **v2;
  unsigned int v3;
  BOOL v4;
  int v5;
  uint64_t v7;

  while (1)
  {
    v1 = *a1;
    switch(v1)
    {
      case 153:
        v3 = (*(_DWORD *)a1 >> 18) & 0x7F;
        v4 = v3 > 8;
        v5 = (1 << v3) & 0x1B0;
        if (!v4 && v5 != 0)
        {
LABEL_12:
          v2 = (unsigned __int8 **)(a1 + 16);
          goto LABEL_17;
        }
        v1 = *(_DWORD *)a1;
        break;
      case 214:
        v2 = (unsigned __int8 **)(a1 + 24);
        goto LABEL_17;
      case 233:
        if ((*(_DWORD *)a1 & 0x7C0000) == 0x300000)
          goto LABEL_12;
        v1 = *(_DWORD *)a1;
        break;
    }
    if (v1 != 186)
      break;
    v7 = *((_QWORD *)a1 + 2);
    a1 = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 4) != 0)
    {
      v2 = (unsigned __int8 **)(a1 + 40);
LABEL_17:
      a1 = *v2;
    }
  }
  if (v1 == 133)
    return (a1[2] >> 2) & 1;
  else
    return 0;
}

BOOL sub_22EFFFBEC(uint64_t a1, uint64_t a2, char a3, unsigned __int8 **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  BOOL v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  int v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  char v67;
  unsigned __int8 *v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned int v72;
  uint64_t *v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81[10];

  v10 = (unsigned __int8 *)a1;
  v81[9] = *MEMORY[0x24BDAC8D0];
  if ((a3 & 1) != 0)
  {
    LOWORD(v79) = 0;
    v80 = 0;
    LODWORD(v81[0]) = 0;
    v11 = sub_22F005B20(a1, &v79, a2, 0, a5, a6, a7, a8);
    if ((_BYTE)v79)
      v12 = 0;
    else
      v12 = v11;
    if (a4 && (v12 & 1) == 0)
      *a4 = v10;
    if (LODWORD(v81[0]) >= 2)
      sub_22EF53BC0(v81);
    return v12;
  }
  while (1)
  {
    while (1)
    {
      v13 = *v10;
      if (v13 > 0x8F)
        break;
      if (v13 - 118 < 2)
      {
        v21 = *((_QWORD *)v10 + 2);
        v22 = *(_QWORD *)(v21 + 80);
        if ((v22 & 0x800000) == 0)
          goto LABEL_177;
        v23 = v22 & 0x7F;
        v24 = -40;
        if (v23 > 70)
        {
          if (v23 != 83)
          {
            if (v23 == 71)
            {
              v24 = -56;
              goto LABEL_71;
            }
            if (v23 == 81)
              goto LABEL_71;
LABEL_65:
            v28 = v23 - 52;
            if ((v23 - 33) >= 5)
              v29 = -48;
            else
              v29 = -64;
            if (v28 >= 6)
              v24 = v29;
            else
              v24 = -72;
          }
        }
        else
        {
          if (v23 > 0x18)
            goto LABEL_64;
          if (v23 != 16)
          {
            if (((1 << v23) & 0x1066) != 0)
              goto LABEL_71;
            if (v23 != 24)
            {
LABEL_64:
              if (v23 == 70)
              {
                v24 = -64;
                goto LABEL_71;
              }
              goto LABEL_65;
            }
          }
          v24 = -48;
        }
LABEL_71:
        v30 = *(_QWORD *)(v21 + 72 + v24 + 16);
        v31 = (_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF8);
        if ((v30 & 4) != 0)
          v31 = (_QWORD *)*v31;
        if (v31)
          v32 = v31 - 8;
        else
          v32 = 0;
        sub_22E3CD31C((uint64_t *)(v32[13] + 96), v32[13]);
        if ((*(_QWORD *)v32[16] & 0x100000000000) == 0)
          goto LABEL_177;
        if (!*((_DWORD *)v10 + 8))
          return 1;
        v33 = *v10;
        v34 = v33 == 119;
        if (v33 == 119)
          v35 = v10;
        else
          v35 = 0;
        v36 = v35 + 48;
        if (v34)
          v10 = v36;
        else
          v10 += 40;
        goto LABEL_84;
      }
      if (v13 == 120)
      {
        v27 = (unsigned __int8 *)sub_22EFBC5B4(*((_QWORD *)v10 + 2));
        v10 = 0;
        if (v27)
        {
          v10 = v27;
          if ((*v27 & 0xFE) == 0xAC)
          {
            v10 = v27 + 16;
            goto LABEL_84;
          }
        }
      }
      else
      {
        if (v13 != 121)
          goto LABEL_177;
        v18 = *((_QWORD *)v10 + 2);
        v10 = 0;
        v19 = *(_QWORD *)(v18 + 72) & 3;
        if ((_DWORD)v19)
          v20 = (_DWORD)v19 == 3;
        else
          v20 = 1;
        if (!v20)
        {
          v10 = (unsigned __int8 *)(*(_QWORD *)(v18 + 72) & 0xFFFFFFFFFFFFFFFCLL);
          if ((*(_BYTE *)(v18 + 68) & 1) != 0)
            goto LABEL_84;
        }
      }
    }
    v12 = 1;
    if (*v10 <= 0xD5u)
    {
      switch(*v10)
      {
        case 0x90u:
        case 0x91u:
        case 0x92u:
        case 0x93u:
        case 0x94u:
        case 0x95u:
        case 0x96u:
        case 0x97u:
        case 0x98u:
        case 0x99u:
          v14 = ((*(_DWORD *)v10 >> 18) & 0x7F) - 4;
          v15 = v14 > 0x3F;
          v16 = (1 << v14) & 0x8600000000020083;
          if (!v15 && v16 != 0)
            goto LABEL_17;
          goto LABEL_177;
        case 0x9Bu:
          if ((**((_DWORD **)v10 + 2) & 0x18000) != 0)
            goto LABEL_178;
          if (v10[48])
            v10 += 24;
          else
            v10 += 32;
          goto LABEL_84;
        case 0x9Cu:
          v10 += 32;
          goto LABEL_84;
        case 0xA5u:
          if (sub_22EFFFBEC(*((_QWORD *)v10 + 2), a2, 0, a4))
            goto LABEL_54;
          return 0;
        case 0xAAu:
        case 0xB5u:
        case 0xC4u:
          return v12;
        case 0xABu:
          if (!sub_22EFFFBEC(*((_QWORD *)v10 + 2), a2, 0, a4))
            return 0;
          v26 = *(_QWORD *)(*((_QWORD *)v10 + 1) & 0xFFFFFFFFFFFFFFF0);
          if (!v26 || *(_BYTE *)(v26 + 16) != 39)
            v26 = sub_22F10CF48(v26);
          if ((*(_DWORD *)(v26 + 40) & 6) != 2)
            return v12;
          goto LABEL_54;
        case 0xACu:
        case 0xADu:
          goto LABEL_17;
        case 0xB0u:
          v10 += 8 * (*((_DWORD *)v10 + 5) + 1) + 32;
          goto LABEL_84;
        case 0xB3u:
        case 0xBEu:
          return sub_22EF5EB64(a2, *((_QWORD *)v10 + 1)) == 0;
        case 0xB4u:
          v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_DWORD *)(v37 + 16) & 0xFEu) - 2 <= 3)
          {
            v38 = *((_QWORD *)v10 + 3) - *((_QWORD *)v10 + 2);
            if ((v38 & 0x7FFFFFFF8) != 0)
            {
              v39 = 0;
              v40 = (v38 >> 3) - 1;
              do
              {
                v12 = sub_22EFFFBEC(*(_QWORD *)(*((_QWORD *)v10 + 2) + 8 * v39), a2, 0, a4);
                if ((_DWORD)v12)
                  v41 = v40 == v39;
                else
                  v41 = 1;
                ++v39;
              }
              while (!v41);
            }
            return v12;
          }
          if (*(_DWORD *)(v37 + 16) != 45)
            goto LABEL_177;
          v42 = sub_22F114198(*(_QWORD *)(v37 + 24));
          v43 = sub_22EFC3B90(v42);
          if (!v43)
            return v12;
          v44 = v43;
          v45 = 0;
          v46 = v81;
          break;
        case 0xBAu:
          v25 = *((_QWORD *)v10 + 2);
          v10 = (unsigned __int8 *)(v25 & 0xFFFFFFFFFFFFFFF8);
          if ((v25 & 4) == 0)
            continue;
          v10 += 40;
          goto LABEL_84;
        case 0xC9u:
        case 0xCAu:
        case 0xCBu:
          if (a4)
            *a4 = v10;
          return (v10[2] >> 2) & 1;
        default:
          goto LABEL_177;
      }
      while (1)
      {
        if ((*(_DWORD *)(v42 + 72) & 0xE000) == 0x4000
          && ((v47 = *((_QWORD *)v10 + 7), (v47 & 2) == 0) || v44 != (v47 & 0xFFFFFFFFFFFFFFFCLL))
          || (v48 = *(_DWORD *)(v44 + 68), (v48 & 1) != 0) && !*(_QWORD *)(v44 + 40)
          || (v49 = *((_QWORD *)v10 + 2), v45 >= ((unint64_t)(*((_QWORD *)v10 + 3) - v49) >> 3)))
        {
          v50 = v45;
          goto LABEL_117;
        }
        v50 = v45 + 1;
        v51 = *(unsigned __int8 **)(v49 + 8 * v45);
        if ((v48 & 1) != 0)
        {
          LOWORD(v79) = 0;
          v80 = 0;
          LODWORD(v81[0]) = 0;
          if (!sub_22F00554C((uint64_t)v51, (uint64_t)&v79, a2, 0, 0))
          {
            if (a4)
              *a4 = v51;
            if (LODWORD(v81[0]) >= 2)
              sub_22EF53BC0(v46);
            return 0;
          }
          if (LODWORD(v81[0]) >= 2)
            sub_22EF53BC0(v46);
          goto LABEL_117;
        }
        v52 = sub_22F10DA0C(*(_QWORD *)(*(_QWORD *)(v44 + 48) & 0xFFFFFFFFFFFFFFF0));
        v73 = v46;
        if (v52)
        {
          v53 = v52;
          v54 = sub_22EFFBBCC(v51);
          v55 = *v54;
          if (v55 == 161)
          {
            v56 = (uint64_t *)(v54 + 16);
LABEL_124:
            v57 = *v56;
            if (v57)
            {
              v58 = *(_QWORD *)(v57 + 48);
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 16) == 2)
              {
                v59 = sub_22E9A98F8(a2, v58);
                if (v60)
                {
                  v61 = v59;
                  v62 = sub_22EF67C8C(a2);
                  v77 = sub_22EF6A330(a2, v62);
                  if (v77 > 0x40)
                    llvm::APInt::initSlowCase((llvm::APInt *)&v76);
                  else
                    v76 = 0;
                  v78 = 1;
                  if (!sub_22F00F5B8(a2, v53, (uint64_t)v10, (uint64_t)&v76))
                    goto LABEL_143;
                  if ((*(_DWORD *)(v53 + 16) & 0x80000000) == 0 && (sub_22F10DFD8(v53) & 1) == 0)
                  {
                    v75 = v77;
                    if (v77 > 0x40)
                      llvm::APInt::initSlowCase((llvm::APInt *)&v74, (const llvm::APInt *)&v76);
                    else
                      v74 = v76;
                    v63 = sub_22F10ACF8(v53);
                    sub_22EF5CCD0(a2, *(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v79);
                    llvm::APInt::operator*=();
                    v72 = v75;
                    v64 = v74;
                    v75 = 0;
                    if (v77 > 0x40 && v76)
                    {
                      MEMORY[0x2348A0E84](v76, 0x1000C8000313F17);
                      v76 = v64;
                      v77 = v72;
                      if (v75 >= 0x41 && v74)
                        MEMORY[0x2348A0E84](v74, 0x1000C8000313F17);
                    }
                    else
                    {
                      v76 = v74;
                      v77 = v72;
                    }
                  }
                  if (sub_22E42E8B8((uint64_t)&v76, v61) || (sub_22E8BAD7C((uint64_t)&v76, 0) & 1) != 0)
                  {
LABEL_143:
                    v65 = 0;
                    if (a4)
                      *a4 = v51;
                  }
                  else
                  {
                    if (v51)
                    {
                      do
                      {
                        v68 = v51;
                        LODWORD(v69) = *v51;
                        if (v69 > 0xD5)
                        {
                          if ((_DWORD)v69 == 233)
                          {
                            LODWORD(v69) = *(_DWORD *)v51;
                            if ((*(_DWORD *)v51 & 0x7C0000) != 0x300000)
                              break;
                            v70 = v51 + 16;
                          }
                          else
                          {
                            if ((_DWORD)v69 != 214)
                              break;
                            v70 = v51 + 24;
                          }
                        }
                        else if ((_DWORD)v69 == 155)
                        {
                          if ((**((_DWORD **)v51 + 2) & 0x18000) != 0)
                            goto LABEL_173;
                          v70 = v51 + 24;
                          if (!v51[48])
                            v70 = v51 + 32;
                          LOBYTE(v69) = -101;
                        }
                        else
                        {
                          if ((_DWORD)v69 != 176)
                            break;
                          v69 = *((unsigned int *)v51 + 5);
                          if ((_DWORD)v69 == -1)
                            goto LABEL_173;
                          v70 = &v51[8 * v69 + 40];
                          LOBYTE(v69) = -80;
                        }
                        v51 = *(unsigned __int8 **)v70;
                      }
                      while (*(unsigned __int8 **)v70 != v68);
                      if (v69 != 168)
                      {
                        if (v69 == 153)
                        {
                          v51 = v68;
                          goto LABEL_171;
                        }
LABEL_173:
                        v65 = 1;
                        v51 = v68;
                        goto LABEL_145;
                      }
                      v51 = (unsigned __int8 *)*((_QWORD *)v68 + 2);
                    }
                    else
                    {
LABEL_171:
                      if ((*(_DWORD *)v51 & 0x1FC0000) == 0x1100000)
                        v51 = (unsigned __int8 *)*((_QWORD *)v51 + 2);
                    }
                    v65 = 1;
                  }
LABEL_145:
                  if (v77 >= 0x41 && v76)
                    MEMORY[0x2348A0E84](v76, 0x1000C8000313F17);
                  if (!v65)
                    return 0;
                }
              }
            }
            goto LABEL_149;
          }
          if (v55 == 188)
          {
            v56 = (uint64_t *)(v54 + 24);
            goto LABEL_124;
          }
        }
LABEL_149:
        v66 = *(_QWORD *)(*(_QWORD *)(v44 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (sub_22F10DB58(v66))
        {
          if (!a4)
            return 0;
          v12 = 0;
          *a4 = v51;
          return v12;
        }
        v67 = sub_22EFFFBEC(v51, a2, (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v66 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 40, a4);
        v46 = v73;
        if ((v67 & 1) == 0)
          return 0;
        do
        {
LABEL_117:
          v44 = *(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v44)
            return 1;
        }
        while ((*(_DWORD *)(v44 + 28) & 0x7Fu) - 49 >= 3);
        v45 = v50;
      }
    }
    if (*v10 <= 0xE1u)
      break;
    if (v13 == 226)
      goto LABEL_54;
    if (v13 != 233 || (*(_DWORD *)v10 & 0x7C0000) != 0x300000)
      goto LABEL_177;
LABEL_17:
    v10 += 16;
LABEL_84:
    v10 = *(unsigned __int8 **)v10;
  }
  if (v13 == 214)
  {
LABEL_54:
    v10 += 24;
    goto LABEL_84;
  }
  if (v13 == 225)
    return v12;
LABEL_177:
  v12 = 1;
  if (!sub_22F007CB0(v10, a2, 1))
  {
LABEL_178:
    if (a4)
    {
      v12 = 0;
      *a4 = v10;
    }
    else
    {
      return 0;
    }
  }
  return v12;
}

BOOL sub_22F000500(unsigned int *a1, uint64_t a2)
{
  int v4;
  _BOOL8 result;
  unsigned __int8 *v6;
  int v7;
  char v8;

  v4 = sub_22EFFA8F0((uint64_t)a1);
  if (v4 != 1195 && v4 != 714)
    return 0;
  result = 0;
  v6 = *(unsigned __int8 **)((char *)&a1[2 * (((unint64_t)*a1 >> 18) & 1) + 2] + ((unint64_t)*a1 >> 24));
  v8 = 0;
  if ((v6[2] & 1) == 0)
  {
    v7 = sub_22F005310(v6, (uint64_t)&v8, a2, 0);
    result = 0;
    if (v7)
      return v8 == 0;
  }
  return result;
}

BOOL sub_22F000594(uint64_t a1)
{
  return sub_22EFFA8F0(a1) == 1192;
}

uint64_t sub_22F0005B0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t result;
  _BYTE *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  BOOL v21;
  unsigned __int8 **v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;

  while (2)
  {
    if ((a3 & 1) == 0)
    {
      sub_22EFF605C(a1);
      if (v11 < 0)
        return 0;
    }
    result = a3;
    switch(*(_BYTE *)a1)
    {
      case 0x68:
      case 0x69:
      case 0x6C:
      case 0x75:
      case 0x7F:
      case 0x80:
      case 0x83:
      case 0x85:
      case 0x89:
      case 0x9A:
      case 0x9D:
      case 0xA1:
      case 0xA6:
      case 0xA9:
      case 0xAA:
      case 0xAF:
      case 0xB2:
      case 0xB3:
      case 0xB5:
      case 0xBE:
      case 0xC2:
      case 0xC3:
      case 0xC4:
      case 0xC7:
      case 0xCC:
      case 0xD1:
      case 0xD2:
      case 0xD8:
      case 0xDB:
      case 0xDC:
      case 0xDE:
      case 0xDF:
      case 0xE1:
      case 0xE6:
      case 0xE8:
        return 0;
      case 0x6F:
      case 0x71:
      case 0x7A:
      case 0x7E:
      case 0x86:
      case 0x9F:
      case 0xA0:
      case 0xA2:
      case 0xB7:
      case 0xB8:
      case 0xEA:
        return 1;
      case 0x70:
        if (((*(_DWORD *)a1 >> 18) & 0x3Fu) - 21 >= 0xB)
          goto LABEL_63;
        return 1;
      case 0x72:
      case 0x74:
      case 0x98:
      case 0xC5:
      case 0xC6:
      case 0xC8:
      case 0xCD:
      case 0xCE:
      case 0xCF:
      case 0xD0:
        goto LABEL_27;
      case 0x76:
      case 0x77:
      case 0x7D:
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 82) & 0x80) == 0)
          goto LABEL_27;
        goto LABEL_63;
      case 0x78:
        v13 = (_BYTE *)sub_22EFBC5B4(*(_QWORD *)(a1 + 16));
        a1 = 0;
        if (!v13)
          continue;
        a1 = (unint64_t)v13;
        if ((*v13 & 0xFE) != 0xAC)
          continue;
        v14 = (unint64_t *)(v13 + 16);
        goto LABEL_20;
      case 0x79:
        v15 = *(_QWORD *)(a1 + 16);
        v16 = *(_QWORD *)(v15 + 72) & 3;
        if ((_DWORD)v16)
          v17 = (_DWORD)v16 == 3;
        else
          v17 = 1;
        if (!v17)
        {
          a1 = *(_QWORD *)(v15 + 72) & 0xFFFFFFFFFFFFFFFCLL;
          if ((*(_BYTE *)(v15 + 68) & 1) != 0)
            a1 = *(_QWORD *)a1;
          if (a1)
            continue;
        }
        return 1;
      case 0x7B:
      case 0x7C:
      case 0x88:
      case 0xA3:
      case 0xAE:
      case 0xD3:
      case 0xD4:
      case 0xD5:
      case 0xDA:
      case 0xE3:
      case 0xE7:
        return result;
      case 0x87:
        return sub_22F3C53E4(a1);
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8D:
      case 0x8E:
        v18 = sub_22EFFA604(*(unsigned __int8 **)(a1 + *(unsigned __int8 *)(a1 + 3)));
        if (v18)
        {
          v19 = v18;
          if (!sub_22E3E3190(v18) && !sub_22E47278C(v19) && (_DWORD)a3)
            return 1;
        }
        else
        {
LABEL_27:
          if ((a3 & 1) != 0)
            return 1;
        }
LABEL_63:
        sub_22F0D492C(a1);
        v40 = v42;
        v33 = v44;
        v41 = v43;
        v34 = v45;
        v36 = *((_QWORD *)&v42 + 1);
        v35 = (uint64_t *)v42;
        if ((_QWORD)v42 == v44 && *((_QWORD *)&v42 + 1) == v45)
          return 0;
        while (1)
        {
          v38 = v35;
          if ((v36 & 3) != 0)
          {
            if ((v36 & 0xFFFFFFFFFFFFFFFCLL) != 0)
              v38 = (uint64_t *)((v36 & 0xFFFFFFFFFFFFFFFCLL) + 40);
            else
              v38 = (uint64_t *)sub_22F3AC1A8(*v35);
          }
          v39 = *v38;
          if (v39)
          {
            if ((sub_22F0005B0(v39, a2, a3) & 1) != 0)
              break;
          }
          if ((v36 & 3) != 0)
          {
            if (v36 >= 4)
              sub_22F0D8720((uint64_t)&v40);
            else
              sub_22F3F2FE0((uint64_t)&v40, 1);
          }
          else
          {
            *(_QWORD *)&v40 = v35 + 1;
          }
          v36 = *((_QWORD *)&v40 + 1);
          v35 = (uint64_t *)v40;
          if (v40 == __PAIR128__(v34, v33))
            return 0;
        }
        return 1;
      case 0x8F:
      case 0x90:
      case 0x91:
      case 0x92:
      case 0x93:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x99:
        goto LABEL_57;
      case 0x94:
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) & 0xFE) == 0x28
          && (*(_DWORD *)a1 & 0x1FC0000) == 0x240000)
        {
          return 1;
        }
LABEL_57:
        if (!(_DWORD)a3)
          goto LABEL_63;
        if ((*(_DWORD *)a1 & 0x1FC0000) != 0x100000)
          goto LABEL_63;
        v32 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
        if ((v32 & 4) == 0 && (*(_BYTE *)((v32 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) == 0)
          goto LABEL_63;
        return 1;
      case 0x9B:
        if (*(_BYTE *)(a1 + 48))
          v14 = (unint64_t *)(a1 + 24);
        else
          v14 = (unint64_t *)(a1 + 32);
        goto LABEL_20;
      case 0xAC:
        v14 = (unint64_t *)(a1 + 16);
        goto LABEL_20;
      case 0xAD:
        if (!(_DWORD)a3 || (*(_BYTE *)(a1 + 2) & 4) == 0)
          goto LABEL_63;
        return 1;
      case 0xB0:
        v14 = (unint64_t *)(a1 + 8 * (*(_DWORD *)(a1 + 20) + 1) + 32);
LABEL_20:
        a1 = *v14;
        continue;
      case 0xB4:
        v28 = *(_QWORD *)(a1 + 56);
        if ((v28 & 2) != 0
          || (v28 & 0xFFFFFFFFFFFFFFFCLL) == 0
          || (sub_22F0005B0(v28 & 0xFFFFFFFFFFFFFFFCLL, a2, a3) & 1) == 0)
        {
          goto LABEL_63;
        }
        return 1;
      case 0xB6:
        v29 = *(unsigned __int16 *)(a1 + 4);
        if (!*(_WORD *)(a1 + 4))
          return 0;
        v30 = (_QWORD *)(a1 + 32);
        v31 = 8 * v29;
        break;
      case 0xC9:
      case 0xCA:
      case 0xCB:
        v20 = sub_22EFFFBEC(a1, a2, 0, 0, a5, a6, a7, a8);
        v21 = v20;
        result = !v20;
        if (v21 || (a3 & 1) != 0)
          return result;
        goto LABEL_63;
      case 0xD9:
        v23 = *(_DWORD *)a1;
        v22 = (unsigned __int8 **)(a1 + 24);
        v24 = 8 * ((unint64_t)v23 >> 18);
        if (v24 == 8)
          return 0;
        v25 = v24 - 16;
        do
        {
          v26 = (uint64_t)*v22;
          if (**v22 == 210)
            v26 = *(_QWORD *)(v26 + 16);
          result = sub_22F0005B0(v26, a2, a3);
          if ((result & 1) != 0)
            break;
          ++v22;
          v27 = v25;
          v25 -= 8;
        }
        while (v27);
        return result;
      case 0xE0:
        *(_QWORD *)&v42 = a2;
        WORD4(v42) = a3;
        sub_22F000980((uint64_t)&v42, *(_DWORD **)(a1 + 16));
        return BYTE9(v42) != 0;
      case 0xE9:
        if ((*(_BYTE *)(a1 + 2) & 0x70) != 0)
          goto LABEL_63;
        return 1;
      default:
        goto LABEL_63;
    }
    break;
  }
  while (!*v30 || (sub_22F0005B0(*v30, a2, a3) & 1) == 0)
  {
    result = 0;
    ++v30;
    v31 -= 8;
    if (!v31)
      return result;
  }
  return 1;
}

uint64_t sub_22F000980(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  v3 = *(unsigned __int8 *)a2;
  if (a2 && (v3 & 0xFE) == 0x70)
  {
    switch((*a2 >> 18) & 0x3F)
    {
      case 0:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 1:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 2:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 3:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 4:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 5:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 6:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 7:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 8:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 9:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 0xA:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 0xB:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 0xC:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 0xD:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 0xE:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 0xF:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 0x10:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 0x11:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 0x12:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 0x13:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 0x14:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 0x15:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 0x16:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 0x17:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 0x18:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 0x19:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 0x1A:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 0x1B:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 0x1C:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 0x1D:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 0x1E:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 0x1F:
        if (!*(_BYTE *)(result + 9))
          goto LABEL_103;
        return result;
      case 0x20:
        if (!*(_BYTE *)(result + 9))
        {
LABEL_103:
          result = sub_22F0005B0(a2, *(_QWORD *)result, *(unsigned __int8 *)(result + 8));
          if ((_DWORD)result)
            *(_BYTE *)(v2 + 9) = 1;
        }
        return result;
      default:
        goto LABEL_5;
    }
  }
  if (!a2 || v3 != 233)
LABEL_5:
    __asm { BR              X9 }
  switch((*a2 >> 18) & 0x1F)
  {
    case 0:
      if (!*(_BYTE *)(result + 9))
        goto LABEL_103;
      break;
    case 1:
      if (!*(_BYTE *)(result + 9))
        goto LABEL_103;
      break;
    case 2:
      if (!*(_BYTE *)(result + 9))
        goto LABEL_103;
      break;
    case 3:
      if (!*(_BYTE *)(result + 9))
        goto LABEL_103;
      break;
    case 4:
      if (!*(_BYTE *)(result + 9))
        goto LABEL_103;
      break;
    case 5:
      if (!*(_BYTE *)(result + 9))
        goto LABEL_103;
      break;
    case 6:
      if (!*(_BYTE *)(result + 9))
        goto LABEL_103;
      break;
    case 7:
      if (!*(_BYTE *)(result + 9))
        goto LABEL_103;
      break;
    case 8:
      if (!*(_BYTE *)(result + 9))
        goto LABEL_103;
      break;
    case 9:
      if (!*(_BYTE *)(result + 9))
        goto LABEL_103;
      break;
    case 0xA:
      if (!*(_BYTE *)(result + 9))
        goto LABEL_103;
      break;
    case 0xB:
      if (!*(_BYTE *)(result + 9))
        goto LABEL_103;
      break;
    case 0xC:
      if (!*(_BYTE *)(result + 9))
        goto LABEL_103;
      break;
    case 0xD:
      if (!*(_BYTE *)(result + 9))
        goto LABEL_103;
      break;
    default:
      if (!*(_BYTE *)(result + 9))
        goto LABEL_103;
      break;
  }
  return result;
}

uint64_t sub_22F0013BC(unsigned int *a1, uint64_t a2)
{
  int v2;
  unsigned int v4;

  v2 = *(unsigned __int8 *)a1;
  if ((v2 + 113) >= 0xFBu)
    return sub_22F00145C(a1, a2);
  if (v2 == 233)
    return sub_22F2641E4((uint64_t)a1, a2);
  if ((v2 & 0xFE) == 0x70)
    return sub_22E51A864(a1, a2);
  if ((v2 + 102) >= 0xF5u)
    return sub_22F0014CC(a1, a2);
  if (v2 == 103)
    return sub_22F001560((uint64_t)a1, a2);
  sub_22E51A8D0(&v4, a2);
  return v4;
}

uint64_t sub_22F00145C(unsigned int *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;

  v2 = *a1;
  if ((v2 & 0x100000) != 0)
  {
    v4 = (unsigned int *)((char *)&a1[2 * ((v2 >> 18) & 1) + 2 + 2 * a1[4]] + (v2 >> 24));
    v5 = *v4;
    v6 = v4[1];
    sub_22E51A8D0(&v7, a2);
    return v7 & ~v6 | v6 & v5;
  }
  else
  {
    sub_22E51A8D0(&v8, a2);
    return v8;
  }
}

uint64_t sub_22F0014CC(_DWORD *a1, uint64_t a2)
{
  unsigned int v3;

  if ((*a1 & 0x4000000) != 0)
    __asm { BR              X10 }
  sub_22E51A8D0(&v3, a2);
  return v3;
}

uint64_t sub_22F001560(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;

  if ((*(_BYTE *)(a1 + 2) & 4) != 0)
  {
    v3 = *(_DWORD *)(a1 + 48);
    v4 = *(_DWORD *)(a1 + 52);
    sub_22E51A8D0(&v5, a2);
    return v5 & ~v4 | v4 & v3;
  }
  else
  {
    sub_22E51A8D0(&v6, a2);
    return v6;
  }
}

void sub_22F0015B4(uint64_t a1, _DWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)a2;
  if (a2 && (v2 & 0xFE) == 0x70)
  {
    switch((*a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        goto LABEL_7;
      default:
        goto LABEL_5;
    }
  }
  if (!a2 || v2 != 233)
LABEL_5:
    __asm { BR              X9 }
LABEL_7:
  sub_22F003D34(a1, (uint64_t)a2);
}

void sub_22F0016E4()
{
  uint64_t v0;
  uint64_t v1;

  sub_22F003CCC(v1, v0);
}

void sub_22F0016FC()
{
  uint64_t v0;
  uint64_t v1;

  if ((*(_BYTE *)(*(_QWORD *)(v0 + 16) + 82) & 0x80) != 0)
    JUMPOUT(0x22F0016A4);
  *(_BYTE *)(v1 + 8) = 1;
}

void sub_22F001720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _DWORD **v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(v0 + 4);
  if (*(_WORD *)(v0 + 4))
  {
    v3 = (_DWORD **)(v0 + 32);
    v4 = 8 * v2;
    do
    {
      if (*v3)
        sub_22F0015B4(v1, *v3);
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
}

BOOL sub_22F00175C(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;

  v1 = sub_22EFFA6B0(a1);
  if (*v1 != 161)
    return 0;
  v2 = v1;
  result = 0;
  v4 = *((_QWORD *)v2 + 2);
  if (v4 && (*(_DWORD *)(v4 + 28) & 0x7F) == 0x3E)
  {
    v5 = *(_QWORD *)(v4 + 16);
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 4) != 0)
      v6 = *(_QWORD *)v6;
    if (v6)
      v7 = (*(_WORD *)(v6 + 8) & 0x7F) == 24;
    else
      v7 = 0;
    if (v7)
      return *(_QWORD *)(v6 + 72) == v4;
    return 0;
  }
  return result;
}

uint64_t sub_22F0017D4(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v5;

  v1 = sub_22EFFA6B0(a1);
  if (*v1 != 161)
    return 0;
  v2 = *((_QWORD *)v1 + 2);
  if ((*(_DWORD *)(v2 + 28) & 0x100) == 0)
    return 0;
  if (!v2 || (*(_DWORD *)(v2 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9)
    return 0;
  sub_22EFC8E88(*((_QWORD *)v1 + 2));
  if (sub_22E54E894(*(_QWORD *)v5, *(_QWORD *)v5 + 8 * *(unsigned int *)(v5 + 8)))
    return 0;
  return v2;
}

uint64_t sub_22F001848(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;

  v1 = sub_22EFFA6B0(a1);
  if (*v1 != 161)
    return 0;
  result = *((_QWORD *)v1 + 2);
  if (!result || (*(_DWORD *)(result + 28) & 0x7Fu) - 67 < 0xFFFFFFF9)
    return 0;
  v4 = *(_QWORD *)((*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v4 & 8) == 0 || (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0x6800)
    return 0;
  v5 = *(_QWORD *)(result + 16);
  v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 4) != 0)
    v6 = *(_QWORD *)v6;
  v7 = *(_WORD *)(v6 + 8) & 0x7F;
  if (v7 != 16 && v7 != 83)
    return 0;
  return result;
}

unsigned __int8 *sub_22F0018D8(unsigned __int8 *result)
{
  unsigned __int8 *v1;
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  BOOL v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;

  while (1)
  {
    while (1)
    {
      if (!result)
      {
        v1 = 0;
LABEL_20:
        v5 = (*(_DWORD *)v1 >> 18) & 0x7F;
        if (v5 == 4 || ((*(_DWORD *)v1 & 0x300) != 0 ? (v6 = v5 == 5) : (v6 = 0), v6))
        {
          v7 = (unsigned __int8 *)*((_QWORD *)v1 + 2);
          while (1)
          {
            v1 = v7;
            v2 = *v7;
            if (v2 > 0xD5)
            {
              if (v2 == 233)
              {
                v2 = *(_DWORD *)v7;
                if ((*(_DWORD *)v7 & 0x7C0000) != 0x300000)
                  goto LABEL_19;
                v9 = v7 + 16;
              }
              else
              {
                if (v2 != 214)
                  goto LABEL_19;
                v9 = v7 + 24;
              }
            }
            else if (v2 == 155)
            {
              if ((**((_DWORD **)v7 + 2) & 0x18000) != 0)
                return 0;
              v9 = v7 + 24;
              if (!v1[48])
                v9 = v1 + 32;
              v2 = 155;
            }
            else
            {
              if (v2 != 176)
                goto LABEL_19;
              v8 = *((unsigned int *)v7 + 5);
              if ((_DWORD)v8 == -1)
                return 0;
              v9 = &v7[8 * v8 + 40];
              v2 = 176;
            }
            v7 = *(unsigned __int8 **)v9;
            if (v7 == v1)
              goto LABEL_19;
          }
        }
        v2 = *(_DWORD *)v1;
        goto LABEL_43;
      }
      do
      {
        v1 = result;
        v2 = *result;
        if (v2 > 0xD5)
        {
          if (v2 == 233)
          {
            v2 = *(_DWORD *)result;
            if ((*(_DWORD *)result & 0x7C0000) != 0x300000)
              break;
            v4 = result + 16;
          }
          else
          {
            if (v2 != 214)
              break;
            v4 = result + 24;
          }
        }
        else if (v2 == 155)
        {
          if ((**((_DWORD **)result + 2) & 0x18000) != 0)
            return 0;
          v4 = result + 24;
          if (!result[48])
            v4 = result + 32;
          v2 = 155;
        }
        else
        {
          if (v2 != 176)
            break;
          v3 = *((unsigned int *)result + 5);
          if ((_DWORD)v3 == -1)
            return 0;
          v4 = &result[8 * v3 + 40];
          v2 = 176;
        }
        result = *(unsigned __int8 **)v4;
      }
      while (*(unsigned __int8 **)v4 != v1);
LABEL_19:
      if (v2 == 153)
        goto LABEL_20;
LABEL_43:
      if (v2 == 161)
        break;
      if (v2 == 199)
      {
        result = (unsigned __int8 *)*((_QWORD *)v1 + 2);
        goto LABEL_63;
      }
      if (v2 == 188)
      {
        result = (unsigned __int8 *)*((_QWORD *)v1 + 3);
        if (!result || (*((_DWORD *)result + 7) & 0x7Fu) - 52 < 0xFFFFFFFD)
          return 0;
LABEL_63:
        if ((result[68] & 1) != 0)
          return result;
        return 0;
      }
      if ((v2 & 0xFE) == 0x70)
      {
        if (((*(_DWORD *)v1 >> 18) & 0x3Fu) - 21 > 0xA || (result = (unsigned __int8 *)*((_QWORD *)v1 + 2)) == 0)
        {
          if ((*(_DWORD *)v1 & 0xFC0000) != 0x800000)
            return 0;
          result = (unsigned __int8 *)*((_QWORD *)v1 + 3);
          if (!result)
            return result;
        }
      }
      else
      {
        if (v2 != 233 || (*(_DWORD *)v1 & 0x780000) != 0x80000)
          return 0;
        result = (unsigned __int8 *)*((_QWORD *)v1 + 2);
      }
    }
    v10 = *((_QWORD *)v1 + 2);
    v11 = *(_DWORD *)(v10 + 28) & 0x7F;
    if (v10)
    {
      if ((v11 - 52) >= 0xFFFFFFFD)
        break;
    }
    if (v11 != 48)
      return 0;
    result = *(unsigned __int8 **)(v10 + 64);
    if (!result)
      return result;
  }
  if ((*(_BYTE *)(v10 + 68) & 1) != 0)
    return (unsigned __int8 *)v10;
  else
    return 0;
}

uint64_t sub_22F001B50(uint64_t result)
{
  unsigned __int8 *v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;

  while (1)
  {
    if (result)
    {
      do
      {
        v1 = (unsigned __int8 *)result;
        v2 = *(unsigned __int8 *)result;
        if (v2 > 0xD5)
        {
          if (v2 == 233)
          {
            v2 = *(_DWORD *)result;
            if ((*(_DWORD *)result & 0x7C0000) != 0x300000)
              break;
            v4 = (uint64_t *)(result + 16);
          }
          else
          {
            if (v2 != 214)
              break;
            v4 = (uint64_t *)(result + 24);
          }
        }
        else if (v2 == 155)
        {
          if ((**(_DWORD **)(result + 16) & 0x18000) != 0)
            return 0;
          v4 = (uint64_t *)(result + 24);
          if (!*(_BYTE *)(result + 48))
            v4 = (uint64_t *)(result + 32);
          v2 = 155;
        }
        else
        {
          if (v2 != 176)
            break;
          v3 = *(unsigned int *)(result + 20);
          if ((_DWORD)v3 == -1)
            return 0;
          v4 = (uint64_t *)(result + 8 * v3 + 40);
          v2 = 176;
        }
        result = *v4;
      }
      while ((unsigned __int8 *)*v4 != v1);
LABEL_19:
      if (v2 != 153)
        goto LABEL_40;
    }
    else
    {
      v1 = 0;
    }
    if ((*(_DWORD *)v1 & 0x300) != 0 && (*(_DWORD *)v1 & 0x1FC0000) == 0x140000)
    {
      v5 = (unsigned __int8 *)*((_QWORD *)v1 + 2);
      if (v5)
      {
        while (1)
        {
          v1 = v5;
          v2 = *v5;
          if (v2 > 0xD5)
          {
            if (v2 == 233)
            {
              v2 = *(_DWORD *)v5;
              if ((*(_DWORD *)v5 & 0x7C0000) != 0x300000)
                goto LABEL_19;
              v7 = v5 + 16;
            }
            else
            {
              if (v2 != 214)
                goto LABEL_19;
              v7 = v5 + 24;
            }
          }
          else if (v2 == 155)
          {
            if ((**((_DWORD **)v5 + 2) & 0x18000) != 0)
              return 0;
            v7 = v5 + 24;
            if (!v1[48])
              v7 = v1 + 32;
            v2 = 155;
          }
          else
          {
            if (v2 != 176)
              goto LABEL_19;
            v6 = *((unsigned int *)v5 + 5);
            if ((_DWORD)v6 == -1)
              return 0;
            v7 = &v5[8 * v6 + 40];
            v2 = 176;
          }
          v5 = *(unsigned __int8 **)v7;
          if (v5 == v1)
            goto LABEL_19;
        }
      }
      v1 = 0;
LABEL_46:
      v9 = v1 + 24;
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v11 = *(_DWORD *)(v10 + 16);
      if (v10)
        v12 = v11 == 11;
      else
        v12 = 0;
      if (v12)
      {
        if (((*(_DWORD *)(v10 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
          goto LABEL_57;
      }
      else if (v10 && v11 == 44)
      {
        v13 = sub_22F114198(*(_QWORD *)(v10 + 24));
        if ((*(_BYTE *)(v13 + 74) & 1) == 0 && *(_QWORD *)(v13 + 128) <= 7uLL
          || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v10 + 24)) + 72) & 0x8000000000) != 0)
        {
          return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                          + 8) & 0xFFFFFFFFFFFFFFF0)
                                                  + 16)
               - 55 < 2;
        }
LABEL_57:
        v9 = v1 + 16;
      }
      else if (v11 == 9)
      {
        goto LABEL_57;
      }
      return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 16)
           - 55 < 2;
    }
    v2 = *(_DWORD *)v1;
LABEL_40:
    if (v2 != 161)
      break;
    result = 0;
    v8 = *((_QWORD *)v1 + 2);
    if (v8)
    {
      if ((*(_DWORD *)(v8 + 28) & 0x7F) == 0x30)
      {
        result = *(_QWORD *)(v8 + 64);
        if (result)
          continue;
      }
    }
    return result;
  }
  if (v2 == 167)
    return 1;
  if (v2 == 107)
    goto LABEL_46;
  return 0;
}

BOOL sub_22F001E0C(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  BOOL v3;
  _BOOL8 result;

  v1 = sub_22EFFA6B0(a1);
  result = 0;
  if (*v1 == 161)
  {
    v2 = *((_QWORD *)v1 + 2);
    v3 = v2 && (*(_DWORD *)(v2 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9;
    if (v3 && (*(_BYTE *)(v2 + 96) & 7) == 5 && sub_22E3D1740(*((_QWORD *)v1 + 2)) && !sub_22E3CEC2C(v2))
      return 1;
  }
  return result;
}

BOOL sub_22F001E84(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  BOOL v3;
  _BOOL8 result;

  v1 = sub_22EFFA6B0(a1);
  result = 0;
  if (*v1 == 161)
  {
    v2 = *((_QWORD *)v1 + 2);
    v3 = v2 && (*(_DWORD *)(v2 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9;
    if (v3 && sub_22EFBF028(v2))
      return 1;
  }
  return result;
}

uint64_t sub_22F001ED4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int8 **v9;
  uint64_t result;
  int v11;
  int v12;
  unsigned __int8 *v13;
  BOOL v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 **v42;
  uint64_t *v43;
  int v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  int v62;
  BOOL v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  int v67;
  BOOL v68;
  uint64_t v69;
  unsigned __int8 *v70;
  uint64_t *v71;
  char v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;

  if (!a1)
  {
    v2 = 0;
    if (!a2)
      return 1;
    while (1)
    {
LABEL_20:
      v6 = a2;
      v7 = *a2;
      if (v7 > 0xD5)
      {
        if (v7 == 233)
        {
          v7 = *(_DWORD *)a2;
          if ((*(_DWORD *)a2 & 0x7C0000) != 0x300000)
            goto LABEL_38;
          v9 = (unsigned __int8 **)(a2 + 16);
        }
        else
        {
          if (v7 != 214)
            goto LABEL_38;
          v9 = (unsigned __int8 **)(a2 + 24);
        }
      }
      else if (v7 == 155)
      {
        if ((**((_DWORD **)a2 + 2) & 0x18000) != 0)
        {
          v7 = 155;
LABEL_38:
          if (*v2 == v7)
          {
            if (v7 == 133)
              return 1;
            if (v7 != 161)
            {
              if (v7 != 153)
                return 0;
              do
              {
                result = 0;
                v11 = *v2;
                v12 = *v6;
                if (v12 == 153)
                  v13 = v6;
                else
                  v13 = 0;
                v14 = v11 == 153;
                if (v11 == 153)
                  v15 = v2;
                else
                  v15 = 0;
                if (!v14 || v12 != 153)
                  return result;
                v16 = *(_DWORD *)v15;
                if (((*(_DWORD *)v13 ^ *(_DWORD *)v15) & 0x1FC0000) != 0)
                  return 0;
                v17 = (unsigned __int8 *)*((_QWORD *)v15 + 2);
                if (v17)
                {
                  while (1)
                  {
                    v2 = v17;
                    v18 = *v17;
                    if (v18 > 213)
                    {
                      if (v18 == 233)
                      {
                        if ((*(_DWORD *)v2 & 0x7C0000) != 0x300000)
                          goto LABEL_70;
                        v20 = v2 + 16;
                      }
                      else
                      {
                        if (v18 != 214)
                          goto LABEL_70;
                        v20 = v2 + 24;
                      }
                    }
                    else if (v18 == 155)
                    {
                      if ((**((_DWORD **)v2 + 2) & 0x18000) != 0)
                        goto LABEL_70;
                      if (v2[48])
                        v20 = v2 + 24;
                      else
                        v20 = v2 + 32;
                    }
                    else
                    {
                      if (v18 != 176)
                        goto LABEL_70;
                      v19 = *((unsigned int *)v2 + 5);
                      if ((_DWORD)v19 == -1)
                        goto LABEL_70;
                      v20 = &v2[8 * v19 + 40];
                    }
                    v17 = *(unsigned __int8 **)v20;
                    if (v17 == v2)
                      goto LABEL_70;
                  }
                }
                v2 = 0;
LABEL_70:
                v21 = (unsigned __int8 *)*((_QWORD *)v13 + 2);
                if (v21)
                {
                  while (1)
                  {
                    v6 = v21;
                    v22 = *v21;
                    if (v22 > 213)
                    {
                      if (v22 == 233)
                      {
                        if ((*(_DWORD *)v6 & 0x7C0000) != 0x300000)
                          goto LABEL_88;
                        v24 = v6 + 16;
                      }
                      else
                      {
                        if (v22 != 214)
                          goto LABEL_88;
                        v24 = v6 + 24;
                      }
                    }
                    else if (v22 == 155)
                    {
                      if ((**((_DWORD **)v6 + 2) & 0x18000) != 0)
                        goto LABEL_88;
                      if (v6[48])
                        v24 = v6 + 24;
                      else
                        v24 = v6 + 32;
                    }
                    else
                    {
                      if (v22 != 176)
                        goto LABEL_88;
                      v23 = *((unsigned int *)v6 + 5);
                      if ((_DWORD)v23 == -1)
                        goto LABEL_88;
                      v24 = &v6[8 * v23 + 40];
                    }
                    v21 = *(unsigned __int8 **)v24;
                    if (v21 == v6)
                      goto LABEL_88;
                  }
                }
                v6 = 0;
LABEL_88:
                v25 = (v16 >> 18) & 0x7F;
              }
              while (v25 > 0xD || ((1 << v25) & 0x3010) == 0);
              v26 = *v2;
              v27 = *v6;
              if (v26 == 161 && v27 == 161)
              {
                result = 0;
                v28 = *((_QWORD *)v2 + 2);
                if (!v28)
                  return result;
                v29 = *((_QWORD *)v6 + 2);
                if (!v29)
                  return result;
                goto LABEL_94;
              }
              if (v27 == 199)
                v32 = v6;
              else
                v32 = 0;
              if (v26 == 199)
                v33 = v2;
              else
                v33 = 0;
              if (v26 == 199 && v27 == 199)
              {
                if ((v33[40] & 2) == 0 || (v32[40] & 2) == 0)
                  return 0;
                result = 0;
                v28 = *((_QWORD *)v33 + 2);
                if (!v28)
                  return result;
                v29 = *((_QWORD *)v32 + 2);
                if (!v29)
                  return result;
                goto LABEL_94;
              }
              if (v27 == 107)
                v34 = v6;
              else
                v34 = 0;
              if (v26 == 107)
                v35 = v2;
              else
                v35 = 0;
              if (v26 == 107 && v27 == 107)
              {
                v36 = (uint64_t *)(v35 + 24);
                v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v35 + 3) + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 8) & 0xFFFFFFFFFFFFFFF0);
                v38 = *(_DWORD *)(v37 + 16);
                if (v37)
                  v39 = v38 == 11;
                else
                  v39 = 0;
                if (v39)
                {
                  v42 = (unsigned __int8 **)(v35 + 16);
                  v43 = v36;
                  if (((*(_DWORD *)(v37 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
                    goto LABEL_161;
                }
                else if (v37 && v38 == 44)
                {
                  v40 = sub_22F114198(*(_QWORD *)(v37 + 24));
                  if ((*(_BYTE *)(v40 + 74) & 1) == 0 && *(_QWORD *)(v40 + 128) <= 7uLL)
                  {
                    v42 = (unsigned __int8 **)(v35 + 16);
                    v43 = v36;
                    goto LABEL_161;
                  }
                  v41 = sub_22F114198(*(_QWORD *)(v37 + 24));
                  v42 = (unsigned __int8 **)(v35 + 16);
                  v43 = v36;
                  if ((*(_QWORD *)(v41 + 72) & 0x8000000000) != 0)
                  {
LABEL_161:
                    v52 = *v43;
                    v53 = v34 + 24;
                    v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v34 + 3) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 8) & 0xFFFFFFFFFFFFFFF0);
                    v55 = *(_DWORD *)(v54 + 16);
                    if (v54)
                      v56 = v55 == 11;
                    else
                      v56 = 0;
                    if (v56)
                    {
                      v59 = v34 + 16;
                      v60 = v53;
                      if (((*(_DWORD *)(v54 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
                        goto LABEL_175;
                    }
                    else if (v54 && v55 == 44)
                    {
                      v57 = sub_22F114198(*(_QWORD *)(v54 + 24));
                      if ((*(_BYTE *)(v57 + 74) & 1) == 0 && *(_QWORD *)(v57 + 128) <= 7uLL)
                      {
                        v59 = v34 + 16;
                        v60 = v53;
                        goto LABEL_175;
                      }
                      v58 = sub_22F114198(*(_QWORD *)(v54 + 24));
                      v59 = v34 + 16;
                      v60 = v53;
                      if ((*(_QWORD *)(v58 + 72) & 0x8000000000) != 0)
                      {
LABEL_175:
                        result = sub_22F001ED4(v52, *v60);
                        if (!(_DWORD)result)
                          return result;
                        v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v36 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                        v62 = *(_DWORD *)(v61 + 16);
                        if (v61)
                          v63 = v62 == 11;
                        else
                          v63 = 0;
                        if (v63)
                        {
                          if (((*(_DWORD *)(v61 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
                            goto LABEL_188;
                        }
                        else if (v61 && v62 == 44)
                        {
                          v64 = sub_22F114198(*(_QWORD *)(v61 + 24));
                          if ((*(_BYTE *)(v64 + 74) & 1) == 0 && *(_QWORD *)(v64 + 128) <= 7uLL
                            || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v61 + 24)) + 72) & 0x8000000000) != 0)
                          {
LABEL_188:
                            v65 = *v42;
                            v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v53 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                        + 8) & 0xFFFFFFFFFFFFFFF0);
                            v67 = *(_DWORD *)(v66 + 16);
                            if (v66)
                              v68 = v67 == 11;
                            else
                              v68 = 0;
                            if (v68)
                            {
                              if (((*(_DWORD *)(v66 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
                                goto LABEL_200;
                            }
                            else if (v66 && v67 == 44)
                            {
                              v69 = sub_22F114198(*(_QWORD *)(v66 + 24));
                              if ((*(_BYTE *)(v69 + 74) & 1) == 0 && *(_QWORD *)(v69 + 128) <= 7uLL
                                || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v66 + 24)) + 72) & 0x8000000000) != 0)
                              {
LABEL_200:
                                v70 = (unsigned __int8 *)*v59;
                                if (*v65 != 181 || *v70 != 181)
                                {
                                  result = sub_22F001ED4(v65, *v59);
                                  if ((_DWORD)result)
                                    return 1;
                                  return result;
                                }
                                sub_22F257F94((uint64_t)(v65 + 16), (llvm::APInt *)&v75);
                                sub_22F257F94((uint64_t)(v70 + 16), (llvm::APInt *)&v73);
                                v72 = sub_22EF71DC4((llvm::APInt *)&v75, (llvm::APInt *)&v73);
                                if (v74 >= 0x41 && v73)
                                  MEMORY[0x2348A0E84](v73, 0x1000C8000313F17);
                                if (v76 >= 0x41 && v75)
                                  MEMORY[0x2348A0E84](v75, 0x1000C8000313F17);
                                return (v72 & 1) != 0;
                              }
                            }
                            else if (v67 != 9)
                            {
                              goto LABEL_200;
                            }
                            v59 = v53;
                            goto LABEL_200;
                          }
                        }
                        else if (v62 != 9)
                        {
                          goto LABEL_188;
                        }
                        v42 = (unsigned __int8 **)v36;
                        goto LABEL_188;
                      }
                    }
                    else
                    {
                      v59 = v34 + 16;
                      v60 = v53;
                      if (v55 != 9)
                        goto LABEL_175;
                    }
                    v60 = v59;
                    goto LABEL_175;
                  }
                }
                else
                {
                  v42 = (unsigned __int8 **)(v35 + 16);
                  v43 = v36;
                  if (v38 != 9)
                    goto LABEL_161;
                }
                v43 = (uint64_t *)v42;
                goto LABEL_161;
              }
              while (v26 == 188)
              {
                v44 = *v6;
                v28 = *((_QWORD *)v2 + 3);
                if (v44 != 188)
                  goto LABEL_208;
                v45 = *((_QWORD *)v6 + 3);
                if (v28)
                  v46 = v45 == 0;
                else
                  v46 = 1;
                if (v46)
                  return 0;
                if (v28 != v45)
                {
                  v47 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v28 + 32))(*((_QWORD *)v2 + 3));
                  if (v47 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 32))(v45))
                    return 0;
                  v28 = *((_QWORD *)v2 + 3);
                }
                if ((*(_DWORD *)(v28 + 28) & 0x7F) != 0x40
                  && v28 != 0
                  && (*(_DWORD *)(v28 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
                {
                  v50 = *(_QWORD *)(v28 + 16);
                  v51 = v50 & 0xFFFFFFFFFFFFFFF8;
                  if ((v50 & 4) != 0)
                    v51 = *(_QWORD *)v51;
                  if ((*(_WORD *)(v51 + 8) & 0x7Eu) - 34 < 4)
                    return 1;
                }
                v2 = sub_22EFFA6B0(*((unsigned __int8 **)v2 + 2));
                v6 = sub_22EFFA6B0(*((unsigned __int8 **)v6 + 2));
                v26 = *v2;
              }
              if (v26 == 133)
              {
                if (*v6 == 133)
                  return 1;
              }
              else if (v26 == 161)
              {
                v28 = *((_QWORD *)v2 + 2);
LABEL_207:
                v44 = *v6;
LABEL_208:
                if (v44 == 188)
                {
                  v71 = (uint64_t *)(v6 + 24);
                }
                else
                {
                  if (v44 != 161)
                    return 0;
                  v71 = (uint64_t *)(v6 + 16);
                }
                result = 0;
                if (!v28)
                  return result;
                v29 = *v71;
                if (!*v71)
                  return result;
LABEL_94:
                if (v28 == v29)
                  return 1;
                v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
                return v30 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
              }
              v28 = 0;
              goto LABEL_207;
            }
            if ((v2[1] & 3) == 0 && (v6[1] & 3) == 0)
              return *((_QWORD *)v2 + 2) == *((_QWORD *)v6 + 2);
          }
          return 0;
        }
        v9 = (unsigned __int8 **)(a2 + 24);
        if (!a2[48])
          v9 = (unsigned __int8 **)(a2 + 32);
        v7 = 155;
      }
      else
      {
        if (v7 != 176)
          goto LABEL_38;
        v8 = *((unsigned int *)a2 + 5);
        if ((_DWORD)v8 == -1)
        {
          v7 = 176;
          goto LABEL_38;
        }
        v9 = (unsigned __int8 **)&a2[8 * v8 + 40];
        v7 = 176;
      }
      a2 = *v9;
      if (*v9 == v6)
        goto LABEL_38;
    }
  }
  do
  {
    v2 = a1;
    v3 = *a1;
    if (v3 > 0xD5)
    {
      if (v3 == 233)
      {
        if ((*(_DWORD *)a1 & 0x7C0000) != 0x300000)
          break;
        v5 = (unsigned __int8 **)(a1 + 16);
      }
      else
      {
        if (v3 != 214)
          break;
        v5 = (unsigned __int8 **)(a1 + 24);
      }
      goto LABEL_16;
    }
    if (v3 == 155)
    {
      if ((**((_DWORD **)a1 + 2) & 0x18000) != 0)
        break;
      if (a1[48])
        v5 = (unsigned __int8 **)(a1 + 24);
      else
        v5 = (unsigned __int8 **)(a1 + 32);
      goto LABEL_16;
    }
    if (v3 != 176)
      break;
    v4 = *((unsigned int *)a1 + 5);
    if ((_DWORD)v4 == -1)
      break;
    v5 = (unsigned __int8 **)&a1[8 * v4 + 40];
LABEL_16:
    a1 = *v5;
  }
  while (*v5 != v2);
  if (a2)
    goto LABEL_20;
  return 1;
}

BOOL sub_22F002798(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) == 39;
}

BOOL sub_22F0027C4(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int16 *v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  char *v9;
  unsigned __int16 *v10;
  unint64_t v11;
  _BOOL8 v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  uint64_t v16;

  v1 = *(_QWORD **)(*(_QWORD *)(a1 + 24) + 16);
  v4 = *v1;
  v2 = (unsigned __int16 *)(v1 + 2);
  v3 = v4;
  if ((_DWORD)v4 == 4)
  {
    v5 = *(_DWORD *)v2;
    v6 = 1852143205;
    goto LABEL_7;
  }
  if (v3 != 3)
  {
    if (v3 != 2)
      goto LABEL_8;
    if (*v2 == 26984)
      return 0;
    v5 = *v2;
    v6 = 28524;
LABEL_7:
    if (v5 != v6)
      goto LABEL_8;
    return 0;
  }
  if (*v2 == 25711 && *((_BYTE *)v2 + 2) == 100)
    return 0;
LABEL_8:
  v7 = 0;
  v8 = *(unsigned __int8 *)v2 | 0x20;
  if (v3)
    v9 = (char *)v2 + 1;
  else
    v9 = (char *)v2;
  if (v8 == 115)
    v10 = (unsigned __int16 *)v9;
  else
    v10 = v2;
  if (v8 == 115)
    v11 = v3 - (unint64_t)(v3 != 0);
  else
    v11 = v3;
  do
  {
    v12 = v11 != v7;
    if (v11 == v7)
      break;
    v13 = (v7 + 1);
    if (v11 > v13
      && (v14 = (char *)v10 + v13, (v15 = memchr((char *)v10 + v13, *((char *)v10 + v7), v11 - v13)) != 0))
    {
      v16 = v15 - v14;
    }
    else
    {
      v16 = -1;
    }
    ++v7;
  }
  while (v16 == -1);
  return v12;
}

uint64_t sub_22F0028D8(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  unsigned __int16 *v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  _BOOL4 v15;
  uint64_t result;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  int v23;

  v4 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 16);
  v7 = *v4;
  v5 = (unsigned __int16 *)(v4 + 4);
  v6 = v7;
  v8 = sub_22EC26FD4(v5, v7);
  v9 = v8;
  if (v7)
    v10 = (unsigned __int16 *)((char *)v5 + 1);
  else
    v10 = v5;
  v11 = v6 - (v6 != 0);
  if (v8 == 4)
    v5 = v10;
  else
    v11 = v6;
  switch(v11)
  {
    case 3:
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = *v5 == 25711 && *((_BYTE *)v5 + 2) == 100;
      break;
    case 2:
      v12 = 0;
      v15 = 0;
      v23 = *v5;
      v13 = v23 == 26984;
      v14 = v23 == 28524;
      break;
    case 4:
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v12 = *(_DWORD *)v5 == 1852143205;
      break;
    default:
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      break;
  }
  result = sub_22E3E4B64(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0));
  if (result)
  {
    v17 = *(_DWORD *)(result + 20);
    if (!v17)
      return result;
  }
  else
  {
    v17 = 1;
  }
  v18 = 0;
  v19 = v17;
  do
  {
    if (v13)
    {
      v20 = v19 + v18;
    }
    else if (v14)
    {
      v20 = v18;
    }
    else if (v12)
    {
      v20 = 2 * v18;
    }
    else if (v15)
    {
      v20 = (2 * v18) | 1;
    }
    else
    {
      result = sub_22EC270A4(v9, *((char *)v5 + v18));
      v20 = result;
    }
    v21 = *(unsigned int *)(a2 + 8);
    if (v21 >= *(unsigned int *)(a2 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v21 = *(unsigned int *)(a2 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v21) = v20;
    ++*(_DWORD *)(a2 + 8);
    ++v18;
  }
  while (v19 != v18);
  return result;
}

unint64_t sub_22F002AA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 8);
  if ((v1 & 1) != 0)
    return v1 & 0xFFFFFFFFFFFFFFFELL;
  v3 = *(_QWORD *)(v1 + 40);
  if ((v3 & 7) != 0)
    return 0;
  else
    return v3 & 0xFFFFFFFFFFFFFFF8;
}

uint64_t sub_22F002ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, int a6, int a7, uint64_t a8, uint64_t a9, int a10, int *a11)
{
  int v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v17;
  unsigned int v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;

  v13 = *a11;
  *(_BYTE *)a1 = -92;
  if (byte_255E04EB3)
  {
    v35 = a5;
    v26 = a2;
    v27 = a6;
    v28 = a7;
    v29 = a3;
    v30 = sub_22F0D3748(164);
    a3 = v29;
    a7 = v28;
    a6 = v27;
    a2 = v26;
    a5 = v35;
    ++*((_DWORD *)v30 + 2);
  }
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC00FF | v13 & 0x1F00;
  *(_QWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a6;
  *(_DWORD *)(a1 + 20) = (a7 & 0xFFFF0001 | (2 * (a5 & 0x7FFF)) | (a10 << 16)) + 0x10000;
  *(_QWORD *)(a1 + 24) = sub_22E3CD3D4(a2 + 2032, 24 * (a5 & 0x7FFF), 3);
  sub_22F0D492C(a1);
  v36 = v38;
  v37 = v39;
  v15 = *((_QWORD *)&v38 + 1);
  v14 = (uint64_t *)v38;
  sub_22F003E10(&v36);
  if ((v15 & 3) != 0)
  {
    if ((v15 & 0xFFFFFFFFFFFFFFFCLL) != 0)
      v14 = (uint64_t *)((v15 & 0xFFFFFFFFFFFFFFFCLL) + 40);
    else
      v14 = (uint64_t *)sub_22F3AC1A8(*v14);
  }
  *v14 = (uint64_t)a11;
  if ((*(_WORD *)(a1 + 20) & 0xFFFE) != 0)
  {
    v17 = 0;
    v18 = 0;
    while (1)
    {
      v19 = (__int128 *)(a4 + 24 * v17);
      v20 = *(_QWORD *)(a1 + 24) + 24 * v17;
      v21 = *v19;
      *(_QWORD *)(v20 + 16) = *((_QWORD *)v19 + 2);
      *(_OWORD *)v20 = v21;
      v22 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 24 * v17);
      if (v22 == 1)
        break;
      if (v22 == 2)
      {
        v31 = *(_QWORD *)(a9 + 8 * v18);
        v33 = *((_QWORD *)&v36 + 1);
        v32 = (uint64_t *)v36;
        sub_22F003E10(&v36);
        if ((v33 & 3) != 0)
        {
          if ((v33 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            v32 = (uint64_t *)((v33 & 0xFFFFFFFFFFFFFFFCLL) + 40);
          else
            v32 = (uint64_t *)sub_22F3AC1A8(*v32);
        }
        *v32 = v31;
        v23 = *(_QWORD *)(a9 + 8 * (v18 + 1));
        v34 = *((_QWORD *)&v36 + 1);
        v24 = (uint64_t *)v36;
        sub_22F003E10(&v36);
        if ((v34 & 3) != 0)
        {
          if ((v34 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            v24 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFFCLL) + 40);
          else
            v24 = (uint64_t *)sub_22F3AC1A8(*v24);
        }
        v18 += 2;
LABEL_13:
        *v24 = v23;
      }
      if (++v17 == (unsigned __int16)*(_DWORD *)(a1 + 20) >> 1)
        goto LABEL_5;
    }
    v23 = *(_QWORD *)(a9 + 8 * v18);
    v25 = *((_QWORD *)&v36 + 1);
    v24 = (uint64_t *)v36;
    sub_22F003E10(&v36);
    if ((v25 & 3) != 0)
    {
      if ((v25 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v24 = (uint64_t *)((v25 & 0xFFFFFFFFFFFFFFFCLL) + 40);
      else
        v24 = (uint64_t *)sub_22F3AC1A8(*v24);
    }
    ++v18;
    goto LABEL_13;
  }
LABEL_5:
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22EFB2CB8(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22F002D50(uint64_t result, int a2, uint64_t *a3, unsigned int a4, int a5)
{
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _DWORD **v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  char *v14;
  char *v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;

  *(_BYTE *)result = -41;
  if (byte_255E04EB3)
  {
    v19 = a3;
    v20 = result;
    v17 = a4;
    v18 = a5;
    v16 = a2;
    v14 = sub_22F0D3748(215);
    a2 = v16;
    a4 = v17;
    a5 = v18;
    v15 = v14;
    a3 = v19;
    result = v20;
    ++*((_DWORD *)v15 + 2);
  }
  v5 = *(_DWORD *)result & 0xFFFC00FF;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = a2;
  *(_DWORD *)(result + 20) = a5;
  *(_DWORD *)result = v5;
  *(_DWORD *)(result + 4) = a4;
  if (a4)
  {
    v6 = (_QWORD *)(result + 24);
    v7 = a4;
    do
    {
      v8 = *a3++;
      *v6++ = v8;
      --v7;
    }
    while (v7);
    v9 = 0;
    v10 = (_DWORD **)(result + 24);
    v11 = 8 * a4;
    do
    {
      v12 = *v10++;
      v9 |= (*v12 >> 13) & 0x1F;
      v11 -= 8;
    }
    while (v11);
    v13 = (v9 & 0x1F) << 13;
  }
  else
  {
    v13 = 0;
  }
  *(_DWORD *)result = v13 | v5;
  return result;
}

int *sub_22F002E24(int *result, uint64_t a2, _DWORD *a3, _DWORD *a4, char a5, uint64_t a6, char a7, char a8, int a9, unint64_t a10)
{
  unint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  char v19;
  _DWORD *v20;
  uint64_t v21;
  char v22;
  _DWORD *v23;
  int *v24;

  v10 = a10;
  v11 = a9;
  *(_BYTE *)result = 112;
  if (byte_255E04EB3)
  {
    v23 = a4;
    v24 = result;
    v20 = a3;
    v22 = a8;
    v18 = a5;
    v19 = a7;
    v21 = a6;
    v16 = sub_22F0D3748(112);
    v11 = a9;
    a5 = v18;
    a3 = v20;
    a6 = v21;
    a7 = v19;
    a8 = v22;
    v17 = v16;
    a4 = v23;
    result = v24;
    ++*((_DWORD *)v17 + 2);
    v10 = a10;
  }
  v12 = *result;
  v13 = *result & 0xFE0000FF;
  *((_QWORD *)result + 1) = a6;
  *((_QWORD *)result + 2) = a3;
  *((_QWORD *)result + 3) = a4;
  v14 = ((a5 & 0x3F) << 18) | ((a7 & 3) << 8) & 0xE3FF | ((a8 & 7) << 10) | ((HIDWORD(v10) != 0) << 24) | v13;
  *result = v14;
  result[1] = v11;
  if (HIDWORD(v10))
  {
    v15 = 8;
    if (v12 == 113)
      v15 = 12;
    *(_QWORD *)&result[v15] = v10;
  }
  *result = (*a4 | *a3) & 0x3E000 | v14;
  return result;
}

int *sub_22F002F18(int *result, uint64_t a2, _DWORD *a3, _DWORD *a4, char a5, uint64_t a6, char a7, char a8, int a9, unint64_t a10)
{
  unint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char v18;
  char v19;
  _DWORD *v20;
  uint64_t v21;
  char v22;
  _DWORD *v23;
  int *v24;

  v10 = a10;
  v11 = a9;
  *(_BYTE *)result = 113;
  if (byte_255E04EB3)
  {
    v23 = a4;
    v24 = result;
    v20 = a3;
    v22 = a8;
    v18 = a5;
    v19 = a7;
    v21 = a6;
    v15 = sub_22F0D3748(113);
    v11 = a9;
    a5 = v18;
    a3 = v20;
    a6 = v21;
    a7 = v19;
    a8 = v22;
    v16 = v15;
    a4 = v23;
    result = v24;
    ++*((_DWORD *)v16 + 2);
    v10 = a10;
  }
  v12 = *result;
  v13 = *result & 0xFE0000FF;
  *((_QWORD *)result + 1) = a6;
  *((_QWORD *)result + 2) = a3;
  *((_QWORD *)result + 3) = a4;
  v14 = ((a5 & 0x3F) << 18) | ((a7 & 3) << 8) & 0xE3FF | ((a8 & 7) << 10) | ((HIDWORD(v10) != 0) << 24) | v13;
  *result = v14;
  result[1] = v11;
  if (HIDWORD(v10))
  {
    v17 = 8;
    if (v12 == 113)
      v17 = 12;
    *(_QWORD *)&result[v17] = v10;
  }
  *result = (*a4 | *a3) & 0x3E000 | v14;
  return result;
}

uint64_t sub_22F00300C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  char *v4;
  uint64_t v5;

  if (a2)
    v2 = 40;
  else
    v2 = 32;
  result = sub_22E3CD3D4(a1 + 2032, v2, 3);
  *(_BYTE *)result = 112;
  if (byte_255E04EB3)
  {
    v5 = result;
    v4 = sub_22F0D3748(112);
    result = v5;
    ++*((_DWORD *)v4 + 2);
  }
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)result = *(_DWORD *)result & 0xFF03FFFF | 0x800000;
  return result;
}

int *sub_22F003090(uint64_t a1, _DWORD *a2, _DWORD *a3, char a4, uint64_t a5, char a6, char a7, int a8, unint64_t a9)
{
  uint64_t v16;
  int *v17;
  uint64_t v18;

  if (HIDWORD(a9))
    v16 = 40;
  else
    v16 = 32;
  v17 = (int *)sub_22E3CD3D4(a1 + 2032, v16, 3);
  return sub_22F002E24(v17, v18, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_22F00312C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  char *v6;
  uint64_t v7;

  if (a2)
    v3 = 32;
  else
    v3 = 24;
  result = sub_22E3CD3D4(a1 + 2032, v3, 3);
  *(_BYTE *)result = -23;
  if (byte_255E04EB3)
  {
    v7 = result;
    v6 = sub_22F0D3748(233);
    result = v7;
    ++*((_DWORD *)v6 + 2);
  }
  *(_QWORD *)(result + 8) = 0;
  if (a2)
    v5 = 17825792;
  else
    v5 = 0x100000;
  *(_DWORD *)result = *(_DWORD *)result & 0xFE83FFFF | v5;
  return result;
}

uint64_t sub_22F0031D0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, char a7, int a8, unsigned __int8 a9, unint64_t a10)
{
  unint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  char *v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;

  v11 = a10;
  v12 = a9;
  *(_BYTE *)a1 = -23;
  if (byte_255E04EB3)
  {
    v23 = a2;
    v19 = a8;
    v22 = a7;
    v18 = a6;
    v21 = a4;
    v17 = a5;
    v20 = a3;
    v16 = sub_22F0D3748(233);
    v12 = a9;
    v11 = a10;
    a5 = v17;
    a3 = v20;
    a4 = v21;
    a7 = v22;
    a6 = v18;
    a8 = v19;
    a2 = v23;
    ++*((_DWORD *)v16 + 2);
  }
  v13 = *(_DWORD *)a1 & 0xFE0000FF;
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = a3;
  if (v12)
    v14 = 0x800000;
  else
    v14 = 0;
  *(_DWORD *)a1 = ((a4 & 0x1F) << 18) | ((a6 & 3) << 8) & 0xE3FF | ((a7 & 7) << 10) | v14 | ((HIDWORD(v11) != 0) << 24) | v13;
  *(_DWORD *)(a1 + 4) = a8;
  if (HIDWORD(v11))
    *(_QWORD *)(a1 + 24) = v11;
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFC1FFF | ((sub_22EFB2274(a1, a2) & 0x1F) << 13);
  return a1;
}

unsigned __int8 *sub_22F0032CC(unsigned __int8 *a1)
{
  int v1;
  uint64_t v2;
  unsigned __int8 **v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  unsigned __int8 *result;
  unsigned __int8 *v9;
  int v10;

  v1 = *a1;
  if (v1 == 173)
  {
    a1 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
    v1 = *a1;
  }
  if (v1 == 186)
  {
    v2 = *((_QWORD *)a1 + 2);
    a1 = (unsigned __int8 *)(v2 & 0xFFFFFFFFFFFFFFF8);
    if ((v2 & 4) != 0)
      a1 = (unsigned __int8 *)*((_QWORD *)a1 + 5);
  }
  v3 = (unsigned __int8 **)(a1 + 40);
  v4 = *a1;
  v5 = v4 == 119;
  if (v4 == 119)
    v6 = a1;
  else
    v6 = 0;
  v7 = (unsigned __int8 **)(v6 + 48);
  if (v5)
    v3 = v7;
  do
  {
    result = *v3;
    v9 = *v3;
    v10 = *v9;
    v3 = (unsigned __int8 **)(v9 + 16);
  }
  while (v10 == 153);
  return result;
}

uint64_t sub_22F003328@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = (_QWORD **)(result + 16);
  if ((*(_BYTE *)(result + 2) & 0x40) != 0)
  {
    v5 = *(_QWORD *)(**v2 & 0xFFFFFFFFFFFFFFF0);
    if (v5)
      v6 = *(_BYTE *)(v5 + 16) == 5;
    else
      v6 = 0;
    if (v6)
    {
      v2 = 0;
      v4 = 0;
      v3 = v5 | 1;
    }
    else
    {
      v3 = 0;
      v2 = 0;
      v4 = 0;
    }
  }
  else
  {
    v3 = 0;
    v4 = result + 24;
  }
  *a2 = v2;
  a2[1] = v3;
  a2[2] = 0;
  a2[3] = v4;
  a2[4] = 0;
  a2[5] = 0;
  return result;
}

uint64_t sub_22F00338C(unsigned __int8 *a1)
{
  int v1;
  int v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 **v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;

  if (a1)
  {
    v1 = 0;
    do
    {
      v2 = v1;
      v3 = a1;
      do
      {
        v4 = v3;
        v5 = *v3;
        if (v5 > 0xD5)
        {
          if (v5 == 233)
          {
            v5 = *(_DWORD *)v3;
            if ((*(_DWORD *)v3 & 0x7C0000) != 0x300000)
              break;
            v7 = v3 + 16;
          }
          else
          {
            if (v5 != 214)
              break;
            v7 = v3 + 24;
          }
        }
        else if (v5 == 155)
        {
          if ((**((_DWORD **)v3 + 2) & 0x18000) != 0)
            goto LABEL_24;
          v7 = v3 + 24;
          if (!v4[48])
            v7 = v4 + 32;
          v5 = 155;
        }
        else
        {
          if (v5 != 176)
            break;
          v6 = *((unsigned int *)v3 + 5);
          if ((_DWORD)v6 == -1)
            goto LABEL_24;
          v7 = &v3[8 * v6 + 40];
          v5 = 176;
        }
        v3 = *(unsigned __int8 **)v7;
      }
      while (v3 != v4);
      if (v5 != 191)
        goto LABEL_24;
      a1 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
      v1 = v2 + 1;
    }
    while (a1);
    v2 += 2;
  }
  else
  {
    v2 = 1;
  }
  a1 = (unsigned __int8 *)MEMORY[0x10];
LABEL_24:
  while (1)
  {
    v8 = sub_22EFFA6B0(a1);
    v9 = v8;
    v10 = *v8;
    if (v10 != 107)
      break;
    v11 = (unsigned __int8 **)(v8 + 24);
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v13 = *(_DWORD *)(v12 + 16);
    if (v12)
      v14 = v13 == 11;
    else
      v14 = 0;
    if (v14)
    {
      if (((*(_DWORD *)(v12 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
        goto LABEL_37;
LABEL_36:
      v11 = (unsigned __int8 **)(v9 + 16);
      goto LABEL_37;
    }
    if (v12 && v13 == 44)
    {
      v15 = sub_22F114198(*(_QWORD *)(v12 + 24));
      if (((*(_BYTE *)(v15 + 74) & 1) != 0 || *(_QWORD *)(v15 + 128) > 7uLL)
        && (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v12 + 24)) + 72) & 0x8000000000) == 0)
      {
        goto LABEL_36;
      }
    }
    else if (v13 == 9)
    {
      goto LABEL_36;
    }
LABEL_37:
    a1 = *v11;
    ++v2;
  }
  result = *((_QWORD *)v8 + 1);
  if (v10 == 161)
  {
    v17 = *((_QWORD *)v9 + 2);
    if (v17)
    {
      if ((*(_DWORD *)(v17 + 28) & 0x7F) == 0x40)
      {
        result = sub_22EFBF144(*((_QWORD *)v9 + 2));
        v18 = *(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0);
        if (v18 && (v19 = *(_DWORD *)(v18 + 16), (v19 & 0xFE) == 0x28))
        {
LABEL_57:
          if ((v19 & 0x100000) != 0)
          {
            do
            {
              v18 = *(_QWORD *)(*(_QWORD *)(v18 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (v18)
              {
                v23 = *(_DWORD *)(v18 + 16);
                if ((v23 & 0xFE) == 0x28)
                  continue;
              }
              v18 = sub_22F10CF48(v18);
              v23 = *(_DWORD *)(v18 + 16);
            }
            while ((v23 & 0x100000) != 0);
          }
          result = *(_QWORD *)(v18 + 32);
        }
        else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
        {
          v22 = result;
          v18 = sub_22F10CF48(*(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0));
          result = v22;
          if (v18)
          {
            v19 = *(_DWORD *)(v18 + 16);
            goto LABEL_57;
          }
        }
      }
    }
  }
  for (; v2; --v2)
  {
    v20 = *(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0);
    v21 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v21 == 39 || v21 == 32)
    {
      result = sub_22F10ACF8(v20);
    }
    else
    {
      if ((*(_DWORD *)(v20 + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
        v20 = sub_22F10CF48(v20);
      result = *(_QWORD *)(v20 + 32);
    }
  }
  return result;
}

uint64_t sub_22F003658(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  result = 0;
  if (a2)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 35 <= 2)
      return sub_22EFD4B78(a2) | 0x100000000;
  }
  return result;
}

unsigned int *sub_22F003694(unsigned int *a1, uint64_t a2, char a3, uint64_t a4, int a5, unint64_t a6, char a7)
{
  uint64_t v8;
  char v9;
  unsigned int v10;

  v8 = sub_22F00373C((uint64_t)a1, 153, a2, a7, a3, a4, a5, HIDWORD(a6) != 0);
  v9 = sub_22EFB25F4(v8);
  v10 = *a1;
  *a1 = *a1 & 0xFFFC1FFF | ((v9 & 0x1F) << 13);
  if ((v10 & 0x4000000) != 0)
    __asm { BR              X10 }
  return a1;
}

uint64_t sub_22F00373C(uint64_t result, char a2, uint64_t a3, char a4, char a5, uint64_t a6, int a7, int a8)
{
  unsigned int v8;
  int v9;
  char *v10;
  char *v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;

  *(_BYTE *)result = a2;
  if (byte_255E04EB3)
  {
    v18 = result;
    v17 = a7;
    v14 = a5;
    v16 = a8;
    v13 = a6;
    v15 = a3;
    v12 = a4;
    v10 = sub_22F0D3748(a2);
    a4 = v12;
    a3 = v15;
    a6 = v13;
    a8 = v16;
    a7 = v17;
    a5 = v14;
    v11 = v10;
    result = v18;
    ++*((_DWORD *)v11 + 2);
  }
  v8 = *(_DWORD *)result & 0xF80000FF;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a6;
  if (a8)
    v9 = 0x4000000;
  else
    v9 = 0;
  *(_DWORD *)result = ((a4 & 3) << 8) | ((a5 & 0x7F) << 18) | v9 | v8;
  *(_DWORD *)(result + 4) = a7;
  return result;
}

unsigned int *sub_22F0037E4(unsigned int *a1, uint64_t a2, char a3, char a4, uint64_t a5, int a6, unint64_t a7, uint64_t a8, unsigned int a9, int a10, unsigned int a11)
{
  uint64_t v13;
  char v14;
  unsigned int v15;

  v13 = sub_22F00373C((uint64_t)a1, 144, a2, a3, a4, a5, a6, HIDWORD(a7) != 0);
  *(_QWORD *)(v13 + 24) = a8;
  v14 = sub_22EFB2630(v13);
  v15 = *a1;
  *a1 = *a1 & 0xFFFC1FFF | ((v14 & 0x1F) << 13);
  a1[8] = a9;
  a1[9] = a11;
  if ((v15 & 0x4000000) != 0)
    __asm { BR              X10 }
  return a1;
}

uint64_t sub_22F0038A4(uint64_t result, _DWORD *a2, int a3, _DWORD *a4, int a5, _DWORD *a6, uint64_t a7, char a8, char a9, unint64_t a10)
{
  unint64_t v10;
  char v11;
  unsigned int v12;
  int v13;
  char *v14;
  int v15;
  int v16;
  _DWORD *v17;
  char v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;

  v10 = a10;
  v11 = a9;
  *(_BYTE *)result = 103;
  if (byte_255E04EB3)
  {
    v21 = a6;
    v22 = result;
    v17 = a4;
    v20 = a2;
    v15 = a3;
    v16 = a5;
    v19 = a7;
    v18 = a8;
    v14 = sub_22F0D3748(103);
    v11 = a9;
    a8 = v18;
    a3 = v15;
    a5 = v16;
    a7 = v19;
    a2 = v20;
    a6 = v21;
    a4 = v17;
    ++*((_DWORD *)v14 + 2);
    result = v22;
    v10 = a10;
  }
  v12 = *(_DWORD *)result & 0xFFF800FF;
  *(_QWORD *)(result + 8) = a7;
  *(_DWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 20) = a5;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = a4;
  *(_QWORD *)(result + 40) = a6;
  v13 = ((a8 & 3) << 8) & 0xE3FF | ((v11 & 7) << 10) | ((HIDWORD(v10) != 0) << 18) | v12;
  *(_DWORD *)result = v13;
  if (HIDWORD(v10))
    *(_QWORD *)(result + 48) = v10;
  *(_DWORD *)result = (*a4 | *a2 | *a6) & 0x3E000 | v13;
  return result;
}

void sub_22F003994(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4[2];

  v2 = a1[2];
  if (!v2 || (sub_22EFFFB48((unsigned __int8 *)a1[2]) & 1) != 0)
  {
    if (a1[4])
    {
      v3 = a1[5];
      v4[0] = a1[4];
      v4[1] = v3;
      sub_22F0AB0EC(v4);
    }
  }
  else
  {
    sub_22F0D5A50(v2);
  }
}

char *sub_22F003A00(uint64_t a1, uint64_t a2, unint64_t a3)
{
  size_t v4;
  unint64_t v5;
  uint64_t v6;
  char *result;
  char *v8;

  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if ((uint64_t)((*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1) >> 2 <= a3)
    v5 = a3;
  else
    v5 = (uint64_t)((*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1) >> 2;
  v6 = 8 * v5;
  if (v5 >> 61)
    v6 = -1;
  result = (char *)sub_22E3CD3D4(a2 + 2032, v6, 3);
  v8 = result;
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
    result = (char *)memcpy(result, *(const void **)a1, v4);
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = &v8[v4];
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 16) & 7 | (unint64_t)&v8[8 * v5];
  return result;
}

char *sub_22F003A9C(char *a1, llvm::SmallPtrSetImplBase *this)
{
  char *v2;
  int v3;
  char *v4;
  char *v7;
  int v8;
  uint64_t v9;
  const void **v10;
  uint64_t v11;
  const void *v12;
  const void **v13;
  uint64_t v14;
  const void *v15;
  void **v16;
  uint64_t v17;
  llvm::SmallPtrSetImplBase *v18;

  v2 = a1;
  v3 = *a1;
  if (v3 == 110 || v3 == 168)
    goto LABEL_3;
  if (v3 == 185)
    v7 = a1;
  else
    v7 = 0;
  if (v3 == 185)
  {
    v8 = *((_DWORD *)a1 + 1);
    if (v8 < 0)
    {
LABEL_3:
      v4 = v2 + 16;
      return *(char **)v4;
    }
    v9 = (v8 - 1);
    if ((_DWORD)v9)
    {
      v10 = (const void **)(a1 + 24);
      v11 = 8 * v9;
      do
      {
        v12 = *v10++;
        sub_22E3BA850((uint64_t)this, v12);
        v11 -= 8;
      }
      while (v11);
    }
LABEL_22:
    v4 = v7 + 16;
    return *(char **)v4;
  }
  if (v3 == 115)
    v7 = a1;
  else
    v7 = 0;
  if (v3 == 115)
  {
    if ((*((_DWORD *)a1 + 1) & 0x7FFFFFFF) != 2)
    {
      v13 = (const void **)(a1 + 32);
      v14 = 8 * ((*((_DWORD *)a1 + 1) & 0x7FFFFFFFu) - 2);
      do
      {
        v15 = *v13++;
        sub_22E3BA850((uint64_t)this, v15);
        v14 -= 8;
      }
      while (v14);
    }
    goto LABEL_22;
  }
  if (v3 == 210)
  {
    v16 = sub_22E3BA914(this, a1);
    v17 = *((_QWORD *)this + 1);
    v18 = v17 == *(_QWORD *)this
        ? (llvm::SmallPtrSetImplBase *)((char *)this + 20)
        : (llvm::SmallPtrSetImplBase *)((char *)this + 16);
    if (v16 != (void **)(v17 + 8 * *(unsigned int *)v18))
      goto LABEL_3;
  }
  return v2;
}

uint64_t sub_22F003B9C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = sub_22EFFA934(a2, *a1);
  if ((result & 1) == 0 && !*((_BYTE *)a1 + 9))
  {
    result = sub_22F0005B0(a2, *a1, *((unsigned __int8 *)a1 + 8));
    if ((_DWORD)result)
      *((_BYTE *)a1 + 9) = 1;
  }
  return result;
}

void sub_22F003BF0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  sub_22F0D492C(a2);
  v9 = v11;
  v3 = v13;
  v10 = v12;
  v4 = v14;
  v6 = *((_QWORD *)&v11 + 1);
  v5 = (uint64_t *)v11;
  if ((_QWORD)v11 != v13 || *((_QWORD *)&v11 + 1) != v14)
  {
    do
    {
      v8 = v5;
      if ((v6 & 3) != 0)
      {
        if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v8 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v8 = (_QWORD *)sub_22F3AC1A8(*v5);
      }
      if (*v8)
        sub_22F000980(a1);
      if ((v6 & 3) != 0)
      {
        if (v6 >= 4)
          sub_22F0D8720((uint64_t)&v9);
        else
          sub_22F3F2FE0((uint64_t)&v9, 1);
      }
      else
      {
        *(_QWORD *)&v9 = v5 + 1;
      }
      v6 = *((_QWORD *)&v9 + 1);
      v5 = (uint64_t *)v9;
    }
    while (v9 != __PAIR128__(v4, v3));
  }
}

void sub_22F003CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EFFA604(*(unsigned __int8 **)(a2 + *(unsigned __int8 *)(a2 + 3)));
  if (v4 && (*(_DWORD *)(v4 + 28) & 0x7Eu) - 54 <= 3 && (*(_BYTE *)(v4 + 82) & 0x80) != 0)
    sub_22F003D34(a1, a2);
  else
    *(_BYTE *)(a1 + 8) = 1;
}

void sub_22F003D34(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  sub_22F0D492C(a2);
  v9 = v11;
  v3 = v13;
  v10 = v12;
  v4 = v14;
  v6 = *((_QWORD *)&v11 + 1);
  v5 = (uint64_t *)v11;
  if ((_QWORD)v11 != v13 || *((_QWORD *)&v11 + 1) != v14)
  {
    do
    {
      v8 = v5;
      if ((v6 & 3) != 0)
      {
        if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v8 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v8 = (_QWORD *)sub_22F3AC1A8(*v5);
      }
      if (*v8)
        sub_22F0015B4(a1);
      if ((v6 & 3) != 0)
      {
        if (v6 >= 4)
          sub_22F0D8720((uint64_t)&v9);
        else
          sub_22F3F2FE0((uint64_t)&v9, 1);
      }
      else
      {
        *(_QWORD *)&v9 = v5 + 1;
      }
      v6 = *((_QWORD *)&v9 + 1);
      v5 = (uint64_t *)v9;
    }
    while (v9 != __PAIR128__(v4, v3));
  }
}

_QWORD *sub_22F003E10(_QWORD *result)
{
  unint64_t v1;
  _QWORD *v2;

  v1 = result[1];
  if ((v1 & 3) != 0)
  {
    v2 = result;
    if (v1 < 4)
      sub_22F3F2FE0((uint64_t)result, 1);
    else
      sub_22F0D8720((uint64_t)result);
    return v2;
  }
  else
  {
    *result += 8;
  }
  return result;
}

uint64_t sub_22F003E64(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned __int8 *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  v5 = (unsigned __int8 *)a1;
  sub_22F004154(a2, a1);
  v7 = v6;
  v8 = *(_QWORD *)(a2 + 2000);
  if ((*(_QWORD *)v8 & 0x100) == 0)
  {
    v9 = *((_QWORD *)v5 + 1);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                  + 16)
       - 25 < 2
      || v9 == *(_QWORD *)(a2 + 16840))
    {
      v7 = 2;
    }
    else if ((v9 & 0xF) == 0
           && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                         + 16) & 0xFF800FF) == 0x528000B
           && (*(_BYTE *)((v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xF) == 0)
    {
      if (v6)
        v7 = 3;
      else
        v7 = 4;
    }
  }
  if (!a3)
  {
    v15 = 0;
    return v15 | (unsigned __int16)v7;
  }
  if (!v7)
  {
    if ((*(_QWORD *)v8 & 0x100) != 0
      && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 1) & 0xFFFFFFFFFFFFFFF0)
                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 25 < 2)
    {
      v15 = 196608;
      return v15 | (unsigned __int16)v7;
    }
    if (*v5 == 205 && (v5[16] & 4) != 0 && *((_QWORD *)v5 + 3) < 8uLL)
    {
      v15 = 327680;
      return v15 | (unsigned __int16)v7;
    }
    v17 = *(_QWORD *)((*((_QWORD *)v5 + 1) & 0xFFFFFFFFFFFFFFF0) + 8);
    v18 = *((_QWORD *)v5 + 1) & 7 | v17;
    if (*((_DWORD *)v5 + 2) & 1 | v17 & 1)
    {
      v15 = 393216;
      return v15 | (unsigned __int16)v7;
    }
    v19 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFF0);
    if ((v17 & 8) != 0 && (*(_DWORD *)(v8 + 52) & 0x40000000) != 0)
    {
      v20 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800;
      if (v20 == 6144)
        goto LABEL_54;
    }
    else
    {
      if ((v17 & 8) == 0)
        goto LABEL_55;
      v20 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800;
    }
    if (v20 == 26624)
    {
LABEL_54:
      v15 = 0x80000;
      return v15 | (unsigned __int16)v7;
    }
LABEL_55:
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 >= 4)
    {
      if ((sub_22F1110EC(*v19, 0) & 1) != 0)
      {
        v15 = 655360;
      }
      else if (v18 >= 0x10 && *(_BYTE *)(*v19 + 16) == 45 && (sub_22F114208(*v19) & 1) != 0)
      {
        v15 = 458752;
      }
      else
      {
        v15 = 0x10000;
      }
    }
    else
    {
      v15 = 589824;
    }
    return v15 | (unsigned __int16)v7;
  }
  if (v7 != 12)
    goto LABEL_35;
  do
  {
    v11 = (uint64_t)v5;
    LODWORD(v12) = *v5;
    if (v12 > 0xD5)
    {
      if ((_DWORD)v12 == 233)
      {
        LODWORD(v12) = *(_DWORD *)v5;
        if ((*(_DWORD *)v5 & 0x7C0000) != 0x300000)
          break;
        v13 = v5 + 16;
      }
      else
      {
        if ((_DWORD)v12 != 214)
          break;
        v13 = v5 + 24;
      }
    }
    else if ((_DWORD)v12 == 155)
    {
      if ((**((_DWORD **)v5 + 2) & 0x18000) != 0)
        goto LABEL_35;
      v13 = v5 + 24;
      if (!v5[48])
        v13 = v5 + 32;
      LOBYTE(v12) = -101;
    }
    else
    {
      if ((_DWORD)v12 != 176)
        break;
      v12 = *((unsigned int *)v5 + 5);
      if ((_DWORD)v12 == -1)
        goto LABEL_35;
      v13 = &v5[8 * v12 + 40];
      LOBYTE(v12) = -80;
    }
    v5 = *(unsigned __int8 **)v13;
  }
  while (*(_QWORD *)v13 != v11);
  if ((v12 + 103) >= 0xF6u
    && (*(_DWORD *)sub_22EFFA6B0(*(unsigned __int8 **)(v11 + 16)) & 0x300) == 0x100)
  {
    sub_22EFF605C(v11);
    *a3 = v14;
    v15 = 0x40000;
  }
  else
  {
LABEL_35:
    v15 = 0x20000;
  }
  return v15 | (unsigned __int16)v7;
}

void sub_22F004154(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

void sub_22F004198()
{
  JUMPOUT(0x22F004178);
}

void sub_22F0041A0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  if ((*(_BYTE *)(v1 + 1) & 1) != 0)
  {
    v2 = (*(_DWORD *)v0 >> 18) & 0x3F;
    if ((v2 - 21) > 0xA)
    {
      if (v2)
      {
        if (v2 == 32)
          JUMPOUT(0x22F004178);
      }
      else
      {
        v3 = *(_QWORD *)(*(_QWORD *)(v0 + 8) & 0xFFFFFFFFFFFFFFF0);
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 >= 2
          && (*(_DWORD *)(v3 + 16) & 0xFF800FF) != 0x828000B)
        {
          sub_22F004198();
        }
      }
    }
  }
}

uint64_t sub_22F004BE0(uint64_t a1, uint64_t a2)
{
  return dword_22F4A30E8[(__int16)sub_22F003E64(a1, a2, 0)];
}

uint64_t sub_22F004C08(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t result;
  int v7;

  v7 = 0;
  if (!a3)
    a3 = &v7;
  v3 = sub_22F003E64(a1, a2, a3);
  v4 = HIWORD(v3);
  v5 = (unsigned __int16)v3 - 1;
  result = 4;
  switch(v5)
  {
    case 0:
    case 2:
      return result;
    case 1:
      result = 1;
      break;
    case 3:
      result = 2;
      break;
    case 4:
      result = 3;
      break;
    case 5:
      result = 12;
      break;
    case 6:
      result = 13;
      break;
    case 7:
      result = 15;
      break;
    case 8:
      result = 16;
      break;
    case 9:
      result = 14;
      break;
    case 10:
      result = 17;
      break;
    case 11:
      if (v4 == 4)
        result = 5;
      else
        result = 4;
      break;
    default:
      result = dword_22F4A311C[(__int16)v4 - 1];
      break;
  }
  return result;
}

uint64_t sub_22F004CCC(__int16 a1, uint64_t a2, int a3)
{
  uint64_t result;
  unsigned int v5;

  if (a3 == 2)
    return 1;
  if (a3 == 1)
    return 0;
  result = 12;
  if ((a1 & 0x100) != 0)
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) & 0xFEu)
       - 2 >= 4)
      v5 = 12;
    else
      v5 = 9;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                            + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 16) == 45)
      return 8;
    else
      return v5;
  }
  return result;
}

uint64_t sub_22F004D40(__int16 a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;

  if ((a1 & 0x100) == 0)
    return 12;
  v3 = a2 & 0xFFFFFFFFFFFFFFF0;
  v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v5 == 40)
    return 0;
  v6 = *(_DWORD *)(v4 + 16);
  if (v6 == 41)
    goto LABEL_9;
  if (v5 != 41)
  {
LABEL_17:
    if ((v5 & 0xFEu) - 2 >= 4)
      v8 = 12;
    else
      v8 = 9;
    if (v5 == 45)
      return 8;
    else
      return v8;
  }
  v4 = sub_22F10CF48(v4);
  if (!v4)
  {
    v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    goto LABEL_17;
  }
  v6 = *(_DWORD *)(v4 + 16);
LABEL_9:
  if ((v6 & 0x100000) != 0)
  {
    do
    {
      while (1)
      {
        v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v4)
          break;
        v7 = *(_DWORD *)(v4 + 16);
        if ((v7 & 0xFE) != 0x28)
          break;
        if ((v7 & 0x100000) == 0)
          return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                          + 8) & 0xFFFFFFFFFFFFFFF0)
                                                  + 16)
               - 27 < 0xFFFFFFFE;
      }
      v4 = sub_22F10CF48(v4);
    }
    while ((*(_DWORD *)(v4 + 16) & 0x100000) != 0);
  }
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 27 < 0xFFFFFFFE;
}

void sub_22F004E4C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v6)
    v7 = (*(_DWORD *)(v6 + 16) & 0xFF800FF) == 86507531;
  else
    v7 = 0;
  if (v7
    || ((v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
      ? (v9 = (*(_DWORD *)(v8 + 16) & 0xFF800FF) == 86507531)
      : (v9 = 0),
        v9))
  {
    v10 = *sub_22EFFA6B0(a2);
    v11 = *sub_22EFFA6B0((unsigned __int8 *)a3);
    v12 = v11 == 134;
    if (v11 == 134)
      v13 = 0;
    else
      v13 = a3;
    if (v12)
      v14 = a2;
    else
      v14 = 0;
    if (v10 == 134)
      v15 = v13;
    else
      v15 = (uint64_t)v14;
    if (v15)
      sub_22F004154(a1, v15);
  }
  else
  {
    sub_22F004154(a1, (uint64_t)a2);
    sub_22F004154(a1, a3);
  }
}

unsigned int *sub_22F004F54(unsigned int *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *__src, uint64_t a6, char *a7, uint64_t a8, int a9)
{
  uint64_t v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  char *v27;
  char v28;
  int v29;
  unsigned int v30;

  v16 = *(_QWORD *)(a2 + 16400);
  *(_BYTE *)a1 = -37;
  if (byte_255E04EB3)
  {
    v17 = sub_22F0D3748(219);
    ++*((_DWORD *)v17 + 2);
  }
  v18 = *a1;
  *((_QWORD *)a1 + 1) = v16;
  a1[4] = a6;
  a1[5] = a8;
  *((_QWORD *)a1 + 3) = a4;
  a1[8] = a9;
  v19 = v18 & 0xFFF800FF;
  *a1 = v19;
  a1[1] = a3;
  if (a6)
  {
    v20 = 0;
    v21 = 0;
    v22 = 8 * a6;
    v23 = __src;
    do
    {
      v24 = *v23++;
      v20 |= (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) & 0x200u) >> 9;
      v21 |= (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) & 0x100u) >> 8;
      v22 -= 8;
    }
    while (v22);
  }
  else
  {
    v21 = 0;
    LOBYTE(v20) = 0;
  }
  v25 = v19 | 0x40000;
  *a1 = v19 | 0x40000;
  if (a8)
  {
    v26 = 8 * a8;
    v27 = a7;
    while (1)
    {
      v28 = *(_BYTE *)(*(_QWORD *)v27 + 4);
      LOBYTE(v20) = v20 | v28;
      v21 |= (v28 & 2) >> 1;
      if ((v20 & 1) == 0)
      {
        v25 = v25 & 0xFFFBFFFF | ((((v28 & 4) >> 2) & 1) << 18);
        *a1 = v25;
        if ((v28 & 4) == 0)
          break;
      }
      v27 += 8;
      v26 -= 8;
      if (!v26)
        goto LABEL_15;
    }
    LOBYTE(v20) = 0;
  }
LABEL_15:
  if (a6)
    memmove(a1 + 10, __src, 8 * a6);
  if (a8)
  {
    memmove(&a1[2 * a6 + 10], a7, 8 * a8);
    v25 = *a1;
  }
  if (v20 & 1 | ((v25 & 0x40000) != 0))
    v29 = 0x40000;
  else
    v29 = 0;
  v30 = v29 | v25 & 0xFFFBFFFF;
  if ((v21 & 1) != 0)
    v30 = v25 & 0x3C000 | v30 & 0xFFFC1FFF | 0x2000;
  if ((v20 & 1) != 0)
    v30 |= 0x14000u;
  *a1 = v30;
  return a1;
}

uint64_t sub_22F005120(unsigned __int8 *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v10;
  _QWORD v11[5];
  int v12;
  char v13;
  _QWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 *v18;
  __int128 v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  _DWORD v23[4];
  __int128 v24;
  int v25;
  _OWORD *v26;
  uint64_t v27;
  _OWORD v28[33];
  int v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v11[0] = &off_24FAC58D8;
  v11[1] = a3;
  v6 = *(_QWORD *)(a3 + 2000);
  v7 = *(_BYTE *)(v6 + 180);
  v12 = *(_DWORD *)(v6 + 176);
  v13 = v7 & 1;
  v14[0] = &off_24FAC5960;
  v14[1] = v11;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v19 = 0u;
  v18 = &v19;
  v20 = 0x100000000;
  v21 = v23;
  v23[0] = 1;
  v22 = 0x200000001;
  v23[2] = 1;
  v25 = 0;
  v24 = 0u;
  v11[2] = a2;
  v11[3] = v14;
  v11[4] = 0x200000001;
  v26 = v28;
  v27 = 0x1000000000;
  v30 = 0u;
  v31 = 0;
  v32 = 0;
  v34 = 0u;
  v29 = 0;
  v28[32] = 0u;
  v33 = &v34;
  v35 = 0;
  v36 = -1;
  v37 = 0;
  v38 = 0;
  v39 = 3;
  BYTE2(v37) = a4;
  v10 = 0;
  if (sub_22F008268(a1, a2, a3, &v10))
    v8 = v10 != 0;
  else
    v8 = sub_22F007F4C(v11, a1, a2 + 16);
  sub_22F0052A4((uint64_t)v11);
  return v8;
}

uint64_t sub_22F0052A4(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_24FAC58D8;
  sub_22F005D84((_DWORD *)a1);
  sub_22F01030C(*(_QWORD **)(a1 + 800));
  llvm::deallocate_buffer(*(llvm **)(a1 + 768), (void *)(40 * *(unsigned int *)(a1 + 784)));
  v2 = *(void **)(a1 + 208);
  if (v2 != (void *)(a1 + 224))
    free(v2);
  sub_22F00AA08(a1 + 48);
  return a1;
}

uint64_t sub_22F005310(unsigned __int8 *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v7;
  uint64_t v8;
  uint64_t v9[10];

  v9[9] = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  v8 = 0;
  LODWORD(v9[0]) = 0;
  if (sub_22F005120(a1, (uint64_t)&v7, a3, a4))
  {
    sub_22F0053B0((uint64_t)v9);
    v5 = v4;
  }
  else
  {
    v5 = 0;
  }
  if (LODWORD(v9[0]) >= 2)
    sub_22EF53BC0(v9);
  return v5;
}

void sub_22F0053B0(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_22F0053E8()
{
  _BYTE *v0;
  uint64_t v1;
  llvm::APInt *v2;
  unsigned int v3;
  BOOL v4;
  char v5;

  v2 = (llvm::APInt *)(v1 + 8);
  v3 = *(_DWORD *)(v1 + 16);
  if (v3 > 0x40)
    v4 = llvm::APInt::countLeadingZerosSlowCase(v2) == v3;
  else
    v4 = *(_QWORD *)v2 == 0;
  v5 = v4;
  *v0 = v5 ^ 1;
  return 1;
}

BOOL sub_22F00554C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  uint64_t v5;
  char v6;
  _BOOL8 v7;
  _QWORD v9[5];
  int v10;
  char v11;
  _QWORD v12[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  __int128 v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD v21[4];
  __int128 v22;
  int v23;
  _OWORD *v24;
  uint64_t v25;
  _OWORD v26[33];
  int v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  __int128 *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v9[0] = &off_24FAC58D8;
  v9[1] = a3;
  v5 = *(_QWORD *)(a3 + 2000);
  v6 = *(_BYTE *)(v5 + 180);
  v10 = *(_DWORD *)(v5 + 176);
  v11 = v6 & 1;
  v12[0] = &off_24FAC5960;
  v12[1] = v9;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v17 = 0u;
  v16 = &v17;
  v18 = 0x100000000;
  v19 = v21;
  v20 = 0x200000001;
  v21[0] = 1;
  v21[2] = 1;
  v23 = 0;
  v22 = 0u;
  v9[2] = a2;
  v9[3] = v12;
  v9[4] = 0x200000001;
  v24 = v26;
  v25 = 0x1000000000;
  v28 = 0u;
  v29 = 0;
  v30 = 0;
  v32 = 0u;
  v27 = 0;
  v26[32] = 0u;
  v31 = &v32;
  v33 = 0;
  v34 = -1;
  v35 = 0;
  v36 = 0;
  v37 = 3;
  BYTE2(v35) = a5;
  v7 = sub_22F0056A0(a1, a2, a3, a4, (uint64_t)v9);
  sub_22F0052A4((uint64_t)v9);
  return v7;
}

BOOL sub_22F0056A0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  _BOOL8 result;
  char v16;

  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_DWORD *)(v10 + 16);
  if (v10)
    v12 = v11 == 11;
  else
    v12 = 0;
  if (v12)
  {
    if (((*(_DWORD *)(v10 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
      goto LABEL_13;
    return 0;
  }
  if (!v10 || v11 != 44)
  {
    if (v11 == 9)
      goto LABEL_13;
    return 0;
  }
  v13 = sub_22F114198(*(_QWORD *)(v10 + 24));
  if ((*(_BYTE *)(v13 + 74) & 1) == 0 && *(_QWORD *)(v13 + 128) < 8uLL)
    return 0;
LABEL_13:
  v16 = 0;
  if (sub_22F008268((unsigned __int8 *)a1, a2, a3, &v16))
    v14 = v16 != 0;
  else
    v14 = sub_22F007F4C(a5, a1, a2 + 16);
  result = 0;
  if (v14 && *(_DWORD *)(a2 + 16) == 2)
  {
    if (a4 <= 1 && *(_BYTE *)a2)
      return 0;
    return a4 >= 1 || *(_BYTE *)(a2 + 1) == 0;
  }
  return result;
}

BOOL sub_22F0057E4(unint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  _BOOL8 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unsigned int v9;
  int v13;
  char v15;
  _QWORD v16[5];
  int v17;
  char v18;
  _QWORD v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 *v23;
  __int128 v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  _DWORD v28[4];
  __int128 v29;
  int v30;
  _OWORD *v31;
  uint64_t v32;
  _OWORD v33[33];
  int v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  __int128 *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  int v44;
  uint64_t v45;

  v5 = 0;
  v45 = *MEMORY[0x24BDAC8D0];
  v16[0] = &off_24FAC58D8;
  v16[1] = a3;
  v6 = *(_QWORD *)(a3 + 2000);
  v7 = *(_BYTE *)(v6 + 180);
  v17 = *(_DWORD *)(v6 + 176);
  v18 = v7 & 1;
  v19[0] = &off_24FAC5960;
  v19[1] = v16;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v24 = 0u;
  v23 = &v24;
  v25 = 0x100000000;
  v26 = v28;
  v28[0] = 1;
  v27 = 0x200000001;
  v28[2] = 1;
  v30 = 0;
  v29 = 0u;
  v16[2] = a2;
  v16[3] = v19;
  v16[4] = 0x200000001;
  v31 = v33;
  v32 = 0x1000000000;
  v35 = 0u;
  v36 = 0;
  v37 = 0;
  v39 = 0u;
  v33[32] = 0u;
  v34 = 0;
  v38 = &v39;
  v40 = 0;
  v41 = -1;
  v42 = 0;
  v43 = 0;
  v44 = 3;
  BYTE2(v42) = a5;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 16);
    if (v9 == 11)
    {
      if (((v9 >> 19) & 0x1FE) - 186 > 0x17)
      {
LABEL_11:
        v5 = 0;
        goto LABEL_12;
      }
      v15 = 0;
      if (sub_22F008268((unsigned __int8 *)a1, a2, a3, &v15))
        v13 = v15 != 0;
      else
        v13 = sub_22F007F4C((uint64_t)v16, a1, (_DWORD *)(a2 + 16));
      v5 = 0;
      if (v13 && *(_DWORD *)(a2 + 16) == 4)
      {
        if (a4 <= 1 && *(_BYTE *)a2)
          goto LABEL_11;
        v5 = a4 >= 1 || *(_BYTE *)(a2 + 1) == 0;
      }
    }
  }
LABEL_12:
  sub_22F0052A4((uint64_t)v16);
  return v5;
}

uint64_t sub_22F0059FC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  uint64_t v5;
  BOOL v6;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[8];

  v16[7] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = *(_DWORD *)(v5 + 16) == 11;
  else
    v6 = 0;
  if (!v6 || ((*(_DWORD *)(v5 + 16) >> 19) & 0x1FEu) - 210 > 7)
    return 0;
  v13 = 0;
  v14 = 0;
  LODWORD(v15) = 0;
  v9 = sub_22F005120((unsigned __int8 *)a1, (uint64_t)&v13, a3, a5);
  v10 = v15;
  if ((_DWORD)v15 == 3)
    v11 = v9;
  else
    v11 = 0;
  if ((_DWORD)v11 == 1)
  {
    if (a4 <= 1 && (_BYTE)v13 || a4 < 1 && HIBYTE(v13))
    {
      v11 = 0;
LABEL_20:
      sub_22EF53BC0(&v15);
      return v11;
    }
    sub_22E54C3D4((const llvm::detail::IEEEFloat *)(a2 + 8), (const llvm::detail::IEEEFloat *)v16);
    v10 = v15;
  }
  if (v10 >= 2)
    goto LABEL_20;
  return v11;
}

uint64_t sub_22F005B20(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23[8];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30[11];
  _QWORD v31[5];
  int v32;
  char v33;
  _QWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 *v38;
  __int128 v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  _DWORD v43[4];
  __int128 v44;
  int v45;
  _OWORD *v46;
  uint64_t v47;
  _OWORD v48[33];
  int v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  __int128 *v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v31[0] = &off_24FAC58D8;
  v31[1] = a3;
  v11 = *(_QWORD *)(a3 + 2000);
  v12 = *(_BYTE *)(v11 + 180);
  v32 = *(_DWORD *)(v11 + 176);
  v33 = v12 & 1;
  v34[0] = &off_24FAC5960;
  v34[1] = v31;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v39 = 0u;
  v38 = &v39;
  v40 = 0x100000000;
  v41 = v43;
  v42 = 0x200000001;
  v43[0] = 1;
  v43[2] = 1;
  v45 = 0;
  v44 = 0u;
  v31[2] = a2;
  v31[3] = v34;
  v31[4] = 0x200000001;
  v46 = v48;
  v47 = 0x1000000000;
  v50 = 0u;
  v51 = 0;
  v52 = 0;
  v54 = 0u;
  v49 = 0;
  v48[32] = 0u;
  v53 = &v54;
  v55 = 0;
  v56 = -1;
  v57 = 0;
  v58 = 0;
  v59 = 2;
  BYTE2(v57) = a4;
  LODWORD(v27) = -1;
  v30[8] = 0;
  v30[9] = 0;
  LODWORD(v22) = 0;
  LOBYTE(v25) = 0;
  v13 = 0;
  if (sub_22F010358(&v24, (unsigned __int8 *)a1, a3, a4, a5, a6, a7, a8, v19, (uint64_t)v23, (uint64_t)v23, 8, v22, v23[0], (void *)v23[1], v23[2], v23[3], v23[4], v23[5],
                       v23[6],
                       v23[7],
                       (uint64_t)v31,
                       (uint64_t)&v26,
                       v25,
                       0,
                       0,
                       0,
                       v27,
                       v28,
                       (uint64_t)v30,
                       0x800000000,
                       v30[0],
                       v30[1],
                       v30[2],
                       v30[3],
                       v30[4],
                       v30[5],
                       (void *)v30[6],
                       v30[7]))
  {
    v13 = 0;
    if (sub_22F005D84(v31))
    {
      if (!*a2)
      {
        sub_22EFF605C(a1);
        v15 = v14;
        v16 = sub_22EF5F8C4(a3, *(_QWORD *)(a1 + 8), 1);
        v17 = sub_22F005E24((uint64_t)v31, v15, v16, (uint64_t)&v26, 0, (uint64_t)&v20);
        v13 = 0;
        if (v17)
        {
          sub_22F00676C((uint64_t)&v26, (uint64_t)(a2 + 16));
          v13 = 1;
        }
      }
    }
  }
  if (v21 != (void *)v20)
    free(v21);
  if (v29 != v30)
    free(v29);
  sub_22F0052A4((uint64_t)v31);
  return v13;
}

uint64_t sub_22F005D84(_DWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a1[54];
  v3 = 1;
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    v5 = (uint64_t *)(*((_QWORD *)a1 + 26) + 24);
    while (1)
    {
      v6 = *v5;
      v5 += 4;
      if (sub_22F115260(v6))
      {
        **((_BYTE **)a1 + 2) = 1;
        if (a1[210] != 3
          && ((*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1) & 1) == 0
          && !(*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1))
        {
          break;
        }
      }
      v4 -= 32;
      if (!v4)
      {
        v3 = 1;
        goto LABEL_9;
      }
    }
    v3 = 0;
  }
LABEL_9:
  a1[54] = 0;
  return v3;
}

uint64_t sub_22F005E24(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  int v16;
  char *v17;
  size_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t result;
  unsigned __int8 **v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  _BOOL8 v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 **v32;
  int v33;
  _BOOL8 v35;
  unsigned __int8 **v36;
  unsigned __int8 *v37;
  _BYTE *v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned __int8 **v42;
  unsigned __int8 **v43;
  unsigned __int8 *v44;
  _BYTE *v45;
  uint64_t v46;
  _BOOL8 v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL4 v51;
  BOOL v52;
  unsigned __int8 **v53;
  unsigned __int8 **v54;
  unsigned __int8 *v55;
  _BYTE *v56;
  uint64_t v57;
  _BOOL8 v58;
  _BYTE *v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  BOOL v65;
  char v66;
  int v67;
  _QWORD *v68;
  unsigned __int8 *v69;
  _BYTE *v70;
  uint64_t v71;
  unsigned int v72;
  unsigned __int8 **v73;
  unsigned __int8 **v74;
  int v75;
  unsigned __int8 *v76;
  _BYTE *v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t *v85;
  unsigned __int8 *v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  uint64_t v91;
  unsigned int v92;
  unint64_t v93;
  BOOL v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  _BYTE v99[12];
  char v100;
  _BYTE __p[23];
  __int16 v102;

  v11 = a3 & 0xFFFFFFFFFFFFFFF0;
  v12 = *(_QWORD *)a4;
  v13 = *(_QWORD *)a4 & 3;
  if (v13)
    v14 = 0;
  else
    v14 = *(_QWORD *)a4 & 0xFFFFFFFFFFFFFFFCLL;
  if (v13 == 1)
    v15 = (_QWORD *)(*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFFCLL);
  else
    v15 = 0;
  if ((a5 - 1) <= 1)
  {
    if (v13 == 2)
    {
      v16 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFE;
      v17 = 0;
      v18 = 0;
      v19 = 0;
LABEL_20:
      result = sub_22F072828(a1, a2, 98, 0, 0);
      if (!result)
        return result;
      v23 = (unsigned __int8 **)result;
      v24 = *(unsigned __int8 **)result;
      if (!v24)
      {
        v24 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v23[1]);
        *v23 = v24;
      }
      v24[*v24 + 1] = 2;
      v25 = *v23;
      v26 = **v23;
      *v25 = v26 + 1;
      *(_QWORD *)&v25[8 * v26 + 16] = v16 == 40;
      v27 = *(_DWORD *)(a4 + 56) != 0;
      v25[(v26 + 1) + 1] = 2;
      v28 = *v23;
      v29 = **v23;
      *v28 = v29 + 1;
      *(_QWORD *)&v28[8 * v29 + 16] = v27;
      v28[(v29 + 1) + 1] = 2;
      v30 = *v23;
      v31 = **v23;
      *v30 = v31 + 1;
      *(_QWORD *)&v30[8 * v31 + 16] = v19;
      sub_22E3B89A8(v23, v17, v18);
      return 0;
    }
    if (v15)
    {
      v20 = *(unsigned __int8 *)v15;
      if (v20 == 186)
      {
LABEL_16:
        v16 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) & 0xFE;
        v17 = 0;
        v18 = 0;
        v19 = 2;
        goto LABEL_20;
      }
      if (v20 == 225)
      {
        v16 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) & 0xFE;
        v17 = 0;
        v18 = 0;
        v19 = 1;
        goto LABEL_20;
      }
    }
    if (v14 && (*(_DWORD *)(v14 + 28) & 0x7F) == 0xB)
      goto LABEL_16;
    if (v15 && *(unsigned __int8 *)v15 == 216)
    {
      v16 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFE;
      v21 = ((unint64_t)*(unsigned int *)v15 >> 18) & 0xF;
      v18 = qword_22F4A49B0[v21];
      v17 = off_24FAC5990[v21];
      v19 = 3;
      goto LABEL_20;
    }
  }
  if (!v14 || (*(_DWORD *)(v14 + 28) & 0x7Eu) - 52 > 5 || (*(_QWORD *)(v14 + 80) & 0xC0000000) != 0x80000000)
  {
    v41 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) & 0xFE;
    v97 = *(_QWORD *)(a4 + 8);
    if ((sub_22F0083C0(*(_QWORD *)a4) & 1) == 0)
    {
      if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) + 2000) + 1) & 2) == 0)
      {
        sub_22F072828(a1, a2, 103, 0, 0);
        return 0;
      }
      v53 = (unsigned __int8 **)sub_22F072828(a1, a2, 2250, 1, 0);
      if (v53)
      {
        v54 = v53;
        v55 = *v53;
        if (!v55)
        {
          v55 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v54[1]);
          *v54 = v55;
        }
        v55[*v55 + 1] = 2;
        v56 = *v54;
        v57 = **v54;
        *v56 = v57 + 1;
        *(_QWORD *)&v56[8 * v57 + 16] = v41 == 40;
        v58 = *(_DWORD *)(a4 + 56) != 0;
        v56[(v57 + 1) + 1] = 2;
        v59 = *v54;
        v60 = **v54;
        *v59 = v60 + 1;
        *(_QWORD *)&v59[8 * v60 + 16] = v58;
        v59[(v60 + 1) + 1] = 2;
        v61 = *v54;
        v62 = **v54;
        *v61 = v62 + 1;
        *(_QWORD *)&v61[8 * v62 + 16] = v14 != 0;
        v61[(v62 + 1) + 1] = 11;
        v63 = *v54;
        v64 = **v54;
        *v63 = v64 + 1;
        *(_QWORD *)&v63[8 * v64 + 16] = v14;
      }
      if (v14)
      {
        v65 = (*(_DWORD *)(v14 + 28) & 0x7F) != 0x40 && (*(_DWORD *)(v14 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9;
        if (v65 && (*(_BYTE *)(v14 + 97) & 0x80) != 0)
        {
          v84 = *(_DWORD *)(v14 + 24);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
          {
            v85 = (uint64_t *)sub_22F072E10(a1, v84, 2252);
            v86 = (unsigned __int8 *)*v85;
            if (!*v85)
            {
              v86 = (unsigned __int8 *)sub_22E3B8AAC(v85[1]);
              *v85 = (uint64_t)v86;
            }
            v86[*v86 + 1] = 11;
            v87 = (_BYTE *)*v85;
            v88 = *(unsigned __int8 *)*v85;
            *v87 = v88 + 1;
            *(_QWORD *)&v87[8 * v88 + 16] = v14;
            v89 = *(_QWORD *)(v14 + 56);
            if ((v89 & 4) != 0 && (v93 = v89 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v93 + 16)))
              v90 = **(unsigned int ***)(v93 + 24);
            else
              v90 = (unsigned int *)(v14 + 64);
            v91 = *v90;
            v100 = 0;
            *(_QWORD *)&v99[4] = 0;
            v98 = v91 | (v91 << 32);
            v99[0] = 0;
            memset(&__p[8], 0, 15);
            strcpy(__p, "static ");
            v102 = 7;
            sub_22E6D82D0(v85, &v98);
            if ((char)v102 < 0)
              operator delete(*(void **)__p);
          }
          return 0;
        }
      }
LABEL_65:
      sub_22F016518(a1, v12, v97);
      return 0;
    }
    if ((v12 & 7) == 3)
    {
      v42 = (unsigned __int8 **)sub_22F072828(a1, a2, 2206, 0, 0);
      if (v42)
      {
        v43 = v42;
        v44 = *v42;
        if (!v44)
        {
          v44 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v43[1]);
          *v43 = v44;
        }
        v44[*v44 + 1] = 2;
        v45 = *v43;
        v46 = **v43;
        *v45 = v46 + 1;
        *(_QWORD *)&v45[8 * v46 + 16] = v41 == 40;
        v47 = *(_DWORD *)(a4 + 56) != 0;
        v45[(v46 + 1) + 1] = 2;
        v48 = *v43;
        v49 = **v43;
        *v48 = v49 + 1;
        *(_QWORD *)&v48[8 * v49 + 16] = v47;
      }
      goto LABEL_65;
    }
    if (v14)
    {
      if ((*(_DWORD *)(v14 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
      {
        sub_22EFBB794(v14);
        if (v83 || (_DWORD)a5 != 1 && sub_22E49F808(v14))
          return 0;
        if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) + 2000) + 68) & 0x20) != 0
          && (*(_WORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) + 2000) + 96) & 0x80) != 0
          && *(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) + 16064))
        {
          if (!sub_22E466E5C(v14)
            && !sub_22E466EBC(v14)
            && !sub_22F1151E0(*(_QWORD *)(*(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFFFF0)))
          {
            result = sub_22F115220(*(_QWORD *)(*(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFFFF0));
            if (!(_DWORD)result)
              return result;
          }
          if (sub_22E466F1C(v14))
            return 0;
        }
      }
      if ((*(_DWORD *)(v14 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
      {
        v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
        if ((_DWORD)a5 != 1 && (**(_QWORD **)(v50 + 2000) & 0x100) != 0)
        {
          v51 = sub_22E49F808(v14);
          v52 = v51;
          result = !v51;
          if (v52)
            return result;
LABEL_109:
          if (v41 != 40)
            return result;
          goto LABEL_77;
        }
      }
    }
    else if (v15)
    {
      if (*(unsigned __int8 *)v15 == 186)
      {
        sub_22E3BA850(a6, v15);
        if (v66)
        {
          v98 = v12;
          *(_QWORD *)v99 = v97;
          v96 = sub_22EF52AD4(&v98);
          if (sub_22F115260(v96))
          {
            sub_22EFF605C((uint64_t)v15);
            result = sub_22F072828(a1, v67, 2281, 0, 0);
            if (result)
            {
              v68 = (_QWORD *)result;
              v69 = *(unsigned __int8 **)result;
              if (!*(_QWORD *)result)
              {
                v69 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(result + 8));
                *v68 = v69;
              }
              result = 0;
              v69[*v69 + 1] = 9;
              v70 = (_BYTE *)*v68;
              v71 = *(unsigned __int8 *)*v68;
              *v70 = v71 + 1;
              *(_QWORD *)&v70[8 * v71 + 16] = v96;
            }
            return result;
          }
          v95 = *(_QWORD *)((v15[2] & 0xFFFFFFFFFFFFFFF8) + 64);
          sub_22EFF605C((uint64_t)v15);
          result = sub_22F0320E0(0, a1, v92, v96, v95, a5, 0, a6);
          if (!(_DWORD)result)
            return result;
          goto LABEL_109;
        }
      }
    }
    if (v41 != 40)
      return 1;
LABEL_77:
    if (v13 == 3)
    {
      v94 = (v12 & 0x7FFFFFFF8) != 0;
      if ((v12 & 4) != 0)
        v94 = v12 > 7;
      if (v94)
      {
LABEL_79:
        v72 = *(_DWORD *)(a4 + 24);
        if ((v72 & 1) == 0)
        {
          if ((v72 & 2) == 0)
          {
            result = 1;
            if ((v72 & 8) == 0
              || ((*(_DWORD *)(a4 + 56) == 1) & (v72 >> 2)) != 0
              || *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * (int)((v72 >> 4) - 1)) != *(_QWORD *)(a4 + 32))
            {
              return result;
            }
          }
          v73 = (unsigned __int8 **)sub_22F072828(a1, a2, 2256, 1, 0);
          if (v73)
          {
            v74 = v73;
            v75 = *(_DWORD *)(a4 + 56);
            v76 = *v73;
            if (!v76)
            {
              v76 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v74[1]);
              *v74 = v76;
            }
            v76[*v76 + 1] = 2;
            v77 = *v74;
            v78 = **v74;
            *v77 = v78 + 1;
            *(_QWORD *)&v77[8 * v78 + 16] = v75 != 0;
            v77[(v78 + 1) + 1] = 2;
            v79 = *v74;
            v80 = **v74;
            *v79 = v80 + 1;
            *(_QWORD *)&v79[8 * v80 + 16] = v14 != 0;
            v79[(v80 + 1) + 1] = 11;
            v81 = *v74;
            v82 = **v74;
            *v81 = v82 + 1;
            *(_QWORD *)&v81[8 * v82 + 16] = v14;
          }
          sub_22F016518(a1, v12, v97);
        }
        return 1;
      }
    }
    else if (v12 > 3)
    {
      goto LABEL_79;
    }
    sub_22F072D74(a1, a2, 103, 0);
    return 1;
  }
  v32 = (unsigned __int8 **)sub_22F072828(a1, a2, 2167, 0, 0);
  v33 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  v35 = v33 != 39 && v33 != 32;
  if (v32)
  {
    v36 = v32;
    v37 = *v32;
    if (!v37)
    {
      v37 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v36[1]);
      *v36 = v37;
    }
    v37[*v37 + 1] = 2;
    v38 = *v36;
    v39 = **v36;
    *v38 = v39 + 1;
    *(_QWORD *)&v38[8 * v39 + 16] = v35;
  }
  v40 = *(_DWORD *)(v14 + 24);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  if ((_DWORD)result)
  {
    sub_22F072E10(a1, v40, 100);
    return 0;
  }
  return result;
}

void sub_22F00676C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  char v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 24);
  v5 = (_QWORD *)(a1 + 16);
  if ((v4 & 1) != 0)
  {
    v15 = *(_QWORD *)a1;
    v16 = *(_QWORD *)(a1 + 8);
    v17 = *(_BYTE *)(a1 + 144) & 1;
    v19 = 0u;
    v20 = 0u;
    *(_QWORD *)&v21 = 0;
    DWORD2(v21) = -1;
    v18 = 7;
    sub_22F3644A4((uint64_t)&v18, v15, v16, v5, v17);
  }
  else
  {
    v6 = *(_QWORD *)a1;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(const void **)(a1 + 48);
    v9 = *(unsigned int *)(a1 + 56);
    v10 = *(_BYTE *)(a1 + 144) & 1;
    v19 = 0u;
    v20 = 0u;
    *(_QWORD *)&v21 = 0;
    DWORD2(v21) = -1;
    v18 = 7;
    v11 = (void *)sub_22EF55C28((uint64_t)&v18, v6, v7, v5, v9, (v4 >> 1) & 1, v10);
    if ((_DWORD)v9)
      memcpy(v11, v8, 8 * v9);
  }
  if (*(_DWORD *)a2 >= 2u)
    sub_22EF53BC0((uint64_t *)a2);
  *(_DWORD *)a2 = v18;
  v12 = v20;
  *(_OWORD *)(a2 + 8) = v19;
  *(_OWORD *)(a2 + 24) = v12;
  v13 = v22;
  *(_OWORD *)(a2 + 40) = v21;
  *(_OWORD *)(a2 + 56) = v13;
  v14 = *(_BYTE *)(a1 + 144);
  if ((v14 & 4) != 0)
  {
    *(_BYTE *)(a2 + 52) = *(_BYTE *)(a2 + 52) & 0xFA | 4;
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 136);
    v14 = *(_BYTE *)(a1 + 144);
  }
  if ((v14 & 8) != 0)
  {
    *(_BYTE *)(a2 + 52) = *(_BYTE *)(a2 + 52) & 0xF2 | 8;
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 136);
  }
}

uint64_t sub_22F006900(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25[2];
  uint64_t v26[9];
  _QWORD v27[3];
  int v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[64];
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37[5];
  int v38;
  char v39;
  _QWORD v40[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 *v44;
  __int128 v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  _DWORD v49[4];
  __int128 v50;
  int v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  int v59;
  __int128 *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char v65;
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v37[0] = (uint64_t)&off_24FAC58D8;
  v37[1] = a3;
  v8 = *(_QWORD *)(a3 + 2000);
  v9 = *(_BYTE *)(v8 + 180);
  v38 = *(_DWORD *)(v8 + 176);
  v39 = v9 & 1;
  v40[0] = &off_24FAC5960;
  v40[1] = v37;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v45 = 0u;
  v44 = &v45;
  v46 = 0x100000000;
  v47 = v49;
  v48 = 0x200000001;
  v49[0] = 1;
  v49[2] = 1;
  v51 = 0;
  v50 = 0u;
  v37[2] = a2;
  v37[3] = (uint64_t)v40;
  v37[4] = 0x200000001;
  v52 = &v54;
  v53 = 0x1000000000;
  v57 = 0u;
  v58 = 0;
  v59 = 0;
  v61 = 0u;
  v56 = 0;
  v55 = 0u;
  v60 = &v61;
  v62 = 0;
  v63 = -1;
  v64 = 0x10000;
  v65 = 0;
  v66 = 0;
  v10 = *(_QWORD *)(a1 + 8) | ((_DWORD)a4 == 2);
  LOBYTE(v22) = -70;
  if (byte_255E04EB3)
    sub_22F3F189C(186);
  v23 = v10;
  v24 = a1 & 0xFFFFFFFFFFFFFFFBLL;
  v22 = v22 & 0xFFFC00FF | *(_DWORD *)(a1 & 0xFFFFFFFFFFFFFFF8) & 0x3E000 | 0x100;
  *(_QWORD *)&v55 = (char *)&v22 + 1;
  *((_QWORD *)&v55 + 1) = 0;
  v56 = 1;
  *(_QWORD *)&v57 = a2 + 16;
  v28 = -1;
  v30 = 0;
  v31 = v33;
  v32 = 0x800000000;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v27[1] = 0;
  v27[2] = 0;
  v27[0] = (char *)&v22 + 1;
  v25[0] = (unint64_t)&v22 + 1;
  v25[1] = 0;
  v11 = sub_22EF52AD4(v25);
  v28 = 0;
  v29 = 0;
  v30 = v11;
  LODWORD(v32) = 0;
  v36 &= 0xF2u;
  v34 = 0;
  v35 = 0;
  v15 = 0;
  if (sub_22F006CB0(a2 + 16, v37, v27, a1, 0, v12, v13, v14) && !*(_BYTE *)a2)
  {
    sub_22F005D84(v37);
    sub_22EFF605C(a1);
    v17 = v16;
    v18 = *(_QWORD *)(a1 + 8);
    if ((*(_BYTE *)(a1 + 1) & 3) != 0)
      v18 = sub_22EF5F8C4(a3, *(_QWORD *)(a1 + 8), 1);
    if (sub_22F006DEC(v37, v17, v18, (_DWORD *)(a2 + 16), a4))
    {
      sub_22F006EA4((unsigned __int8 *)v37);
      if ((_DWORD)a4 == 2)
      {
        sub_22EF530AC((uint64_t)v26, a2 + 16);
        sub_22F0D5A50(a1);
        v20 = sub_22F006F3C(a3, (unint64_t)&v22 + 1, 0, (uint64_t)v26, v10, v19, (_BYTE *)a2, 1);
        if (*(_BYTE *)a2)
          v15 = 0;
        else
          v15 = v20;
        if (LODWORD(v26[0]) >= 2)
          sub_22EF53BC0(v26);
      }
      else
      {
        v15 = 1;
      }
    }
    else
    {
      v15 = 0;
    }
  }
  if (v31 != v33)
    free(v31);
  sub_22F0052A4((uint64_t)v37);
  return v15;
}

unint64_t sub_22F006C3C(uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  char v5;
  unint64_t result;
  unint64_t v7[2];

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  if (a4)
    v5 = 2;
  else
    v5 = 0;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a1 + 144) & 0xFD | v5;
  v7[0] = a2;
  v7[1] = a3;
  result = sub_22EF52AD4(v7);
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = result;
  *(_DWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 144) &= 0xF2u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  return result;
}

uint64_t sub_22F006CB0(uint64_t a1, uint64_t *a2, _QWORD *a3, unint64_t a4, char a5, int a6, int a7, int a8)
{
  uint64_t result;
  int v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  __int128 v19;

  if ((a5 & 1) != 0 || (result = sub_22F0451C8(a2, a4, a3), (_DWORD)result))
  {
    if ((*(_BYTE *)(a4 + 1) & 3) != 0)
      return sub_22F009DC4(a1, a2, a4, a4, a5, a6, a7, a8);
    v16 = *(_QWORD *)(a4 + 8);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) & 0xFEu)
       - 2 > 3)
    {
      v13 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                       + 16);
      if (v13 == 6)
      {
        v14 = sub_22F110438(&v16);
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16) != 45
          && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) & 0xFEu)
           - 6 < 0xFFFFFFFC)
        {
          return sub_22F009DC4(a1, a2, a4, a4, a5, a6, a7, a8);
        }
        v17 = a2;
        v18 = a3;
        *(_QWORD *)&v19 = a1;
        return sub_22F04EF10((uint64_t *)&v17, (unsigned __int8 *)a4);
      }
      else
      {
        if (v13 != 45)
          return sub_22F009DC4(a1, a2, a4, a4, a5, a6, a7, a8);
        v17 = a2;
        v18 = a3;
        *(_QWORD *)&v19 = a1;
        return sub_22F048114((uint64_t *)&v17, (unsigned __int8 *)a4);
      }
    }
    else
    {
      v17 = a2;
      v18 = a3;
      *(_QWORD *)&v19 = a1;
      return sub_22F04530C((uint64_t *)&v17, (unsigned __int8 *)a4);
    }
  }
  return result;
}

uint64_t sub_22F006DEC(uint64_t *a1, unsigned int a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5;
  BOOL v6;
  _BOOL8 v7;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  _BYTE v13[64];

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = (*(_DWORD *)(v5 + 16) & 0xFF800FF) == 86507531;
  else
    v6 = 0;
  if (v6)
    return 1;
  v9 = v13;
  v10 = v13;
  v11 = 8;
  v12 = 0;
  v7 = sub_22F0320E0(0, a1, a2, a3, a4, a5, 0, (uint64_t)&v9);
  if (v10 != v9)
    free(v10);
  return v7;
}

unsigned __int8 *sub_22F006EA4(unsigned __int8 *result)
{
  uint64_t v1;
  int v2;
  unsigned __int8 **v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;

  if (*((_QWORD *)result + 101))
  {
    v1 = (uint64_t)result;
    sub_22EFF605C(*(_QWORD *)(*((_QWORD *)result + 99) + 112));
    result = (unsigned __int8 *)sub_22F072D74(v1, v2, 2236, 0);
    if (result)
    {
      v3 = (unsigned __int8 **)result;
      v4 = *(_QWORD *)(v1 + 808) + 0xFFFFFFFFLL;
      result = *(unsigned __int8 **)result;
      if (!result)
      {
        result = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v3[1]);
        *v3 = result;
      }
      result[*result + 1] = 3;
      v5 = *v3;
      v6 = **v3;
      *v5 = v6 + 1;
      *(_QWORD *)&v5[8 * v6 + 16] = v4;
    }
  }
  return result;
}

uint64_t sub_22F006F3C(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, unsigned int a6, _BYTE *a7, int a8)
{
  uint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v21[5];
  int v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  _BYTE v27[64];
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD v31[5];
  int v32;
  char v33;
  _QWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 *v38;
  __int128 v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  _DWORD v43[4];
  __int128 v44;
  int v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD v48[66];
  int v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  _QWORD *v53;
  _QWORD v54[4];
  int v55;
  char v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v31[0] = &off_24FAC58D8;
  v31[1] = a1;
  v14 = *(_QWORD *)(a1 + 2000);
  v15 = *(_BYTE *)(v14 + 180);
  v32 = *(_DWORD *)(v14 + 176);
  v33 = v15 & 1;
  if (a8)
    v16 = 0;
  else
    v16 = 2;
  v34[0] = &off_24FAC5960;
  v34[1] = v31;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v39 = 0u;
  v38 = &v39;
  v40 = 0x100000000;
  v41 = v43;
  v42 = 0x200000001;
  v43[0] = 1;
  v43[2] = 1;
  v45 = 0;
  v44 = 0u;
  v31[2] = a7;
  v31[3] = v34;
  v31[4] = 0x200000001;
  v46 = v48;
  v47 = 0x1000000000;
  v52 = 0;
  v51 = 0u;
  memset(v54, 0, 24);
  v53 = v54;
  v54[3] = -1;
  v55 = 0;
  v56 = 0;
  v57 = v16;
  v48[64] = a2;
  v48[65] = a3;
  v49 = 2;
  v50 = a4;
  BYTE2(v55) = a8;
  v22 = -1;
  v24 = 0;
  v25 = v27;
  v26 = 0x800000000;
  v28 = 0;
  v29 = 0;
  v21[2] = a2;
  v21[3] = a3;
  v21[4] = 0;
  v30 = 0;
  v21[0] = a2;
  v21[1] = a3;
  v17 = sub_22EF52AD4(v21);
  v22 = 0;
  v23 = 0;
  v24 = v17;
  LODWORD(v26) = 0;
  v30 &= 0xF2u;
  v28 = 0;
  v29 = 0;
  v18 = sub_22F02D0C0((uint64_t)v31, a6, a2, a3, a4, a5);
  if (*a7)
    v19 = 0;
  else
    v19 = v18;
  if ((_DWORD)v19 == 1)
    sub_22F005D84(v31);
  if (v25 != v27)
    free(v25);
  sub_22F0052A4((uint64_t)v31);
  return v19;
}

uint64_t sub_22F007158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  char v6;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  int v14;
  char v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  _QWORD *v34;
  int v35;
  __int16 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  _BYTE v49[64];
  uint64_t v50;
  uint64_t v51;
  char v52;
  _QWORD v53[5];
  int v54;
  unsigned __int8 v55;
  _QWORD v56[2];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 *v60;
  __int128 v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  _DWORD v65[4];
  __int128 v66;
  int v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  int v72;
  __int128 v73;
  uint64_t v74;
  int v75;
  __int128 *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  char v81;
  int v82;
  uint64_t v83;

  v6 = a6;
  v83 = *MEMORY[0x24BDAC8D0];
  v11 = *(_QWORD *)(a3 + 2000);
  if ((*(_BYTE *)(a1 + 1) & 3) != 0
    || ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                   + 16) & 0xFEu)
      - 6 < 0xFFFFFFFC
      ? (v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16) == 45)
      : (v12 = 1),
        v12 ? (v13 = (*(_QWORD *)v11 & 0x200) == 0) : (v13 = 0),
        !v13))
  {
    v37 = 0;
    v38 = a5;
    v14 = 2;
    if (a6)
      v14 = ~(*(_DWORD *)v11 >> 8) & 2;
    v53[0] = &off_24FAC58D8;
    v53[1] = a3;
    v15 = *(_BYTE *)(v11 + 180);
    v54 = *(_DWORD *)(v11 + 176);
    v16 = v15 & 1;
    v55 = v15 & 1;
    v56[0] = &off_24FAC5960;
    v56[1] = v53;
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    v61 = 0u;
    v60 = &v61;
    v62 = 0x100000000;
    v63 = v65;
    v64 = 0x200000001;
    v65[0] = 1;
    v65[2] = 1;
    v67 = 0;
    v66 = 0u;
    v53[2] = &v37;
    v53[3] = v56;
    v53[4] = 0x200000001;
    v68 = (char *)&v70;
    v69 = 0x1000000000;
    v73 = 0u;
    v74 = 0;
    v75 = 0;
    v77 = 0u;
    v72 = 0;
    v71 = 0u;
    v76 = &v77;
    v78 = 0;
    v79 = -1;
    v80 = 0;
    v81 = 0;
    v82 = v14;
    if (a4)
    {
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4) & 0xFFFFFFFFFFFFFFFCLL;
      v16 = v55;
    }
    else
    {
      v17 = 0;
    }
    v71 = v17;
    v72 = 1;
    *(_QWORD *)&v73 = a2;
    BYTE2(v80) = v6;
    v18 = *(unsigned int *)(a4 + 24);
    v19 = *(_QWORD *)(a4 + 48);
    if (v16)
    {
      v34 = sub_22F3654C0(a3);
      if (sub_22F3CD624((uint64_t)v34, (uint64_t)v53, a4, a2))
      {
LABEL_45:
        v35 = sub_22F006DEC(v53, v18, v19, a2, 0);
        v30 = 0;
        if (v35)
        {
          sub_22F006EA4((unsigned __int8 *)v53);
          v30 = 1;
        }
        goto LABEL_47;
      }
    }
    else
    {
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = -1;
      v46 = 0;
      v47 = v49;
      v48 = 0x800000000;
      v50 = 0;
      v51 = 0;
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4);
      v42 = 0;
      v43 = 0;
      v40 = 0;
      v41 = v20 & 0xFFFFFFFFFFFFFFFCLL;
      v52 &= ~2u;
      v39 = v20 & 0xFFFFFFFFFFFFFFFCLL;
      v21 = sub_22EF52AD4(&v39);
      v44 = 0;
      v45 = 0;
      v46 = v21;
      LODWORD(v48) = 0;
      v52 &= 0xF2u;
      v50 = 0;
      v51 = 0;
      v22 = *(_QWORD *)(a3 + 2000);
      if ((*(_BYTE *)(v22 + 237) & 0x80) == 0)
        goto LABEL_23;
      if ((*(_BYTE *)(v22 + 1) & 1) == 0)
        goto LABEL_23;
      if (sub_22E3CB5E0(a4))
        goto LABEL_23;
      v23 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
        goto LABEL_23;
      LOBYTE(v39) = -77;
      if (byte_255E04EB3)
      {
        sub_22F3F189C(179);
        v23 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
      }
      v40 = v19;
      LODWORD(v39) = v39 & 0xFFFC00FF | (((*(_DWORD *)(v23 + 16) >> 9) & 1) << 14);
      if (sub_22F006CB0(a2, v53, &v41, &v39, 1))
      {
LABEL_23:
        if (sub_22F006CB0(a2, v53, &v41, a1, 1) && !(_BYTE)v37)
        {
          v24 = v68;
          if ((_DWORD)v69)
          {
            v25 = &v68[32 * v69];
            v26 = 32 * v69 - 32;
            v27 = v68;
            v28 = v68;
            while (1)
            {
              v29 = *v28;
              v28 += 32;
              if ((v29 & 6) == 0)
                break;
              v26 -= 32;
              v27 = v28;
              if (v28 == v25)
                goto LABEL_43;
            }
            if (v28 == v25)
            {
              v25 = v27;
            }
            else
            {
              v31 = 32;
              v25 = v27;
              do
              {
                v32 = &v27[v31];
                if ((v27[v31] & 6) != 0)
                {
                  v33 = *((_OWORD *)v32 + 1);
                  *(_OWORD *)v25 = *(_OWORD *)v32;
                  *((_OWORD *)v25 + 1) = v33;
                  v25 += 32;
                }
                v31 += 32;
                v26 -= 32;
              }
              while (v26);
              v24 = v68;
            }
          }
          else
          {
            v25 = v68;
          }
LABEL_43:
          LODWORD(v69) = (unint64_t)(v25 - v24) >> 5;
          sub_22F005D84(v53);
          if (v47 != v49)
            free(v47);
          goto LABEL_45;
        }
      }
      if (v47 != v49)
        free(v47);
    }
    v30 = 0;
LABEL_47:
    sub_22F0052A4((uint64_t)v53);
    return v30;
  }
  return 0;
}

uint64_t sub_22F0075CC(unint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int i;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v23 = 0;
  v24 = a2;
  v3 = sub_22EFBCCBC(a1);
  LODWORD(v30) = 0;
  v5 = (uint64_t *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 88);
  if ((v4 & 4) != 0
    && (v6 = v4 & 0xFFFFFFFFFFFFFFF8, (v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    && (*(_BYTE *)v6 & 1) != 0
    && (v8 = *(_DWORD *)(v6 + 16), v7 = (uint64_t *)(v6 + 16), v8))
  {
    if (&v30 != v7)
    {
      sub_22EF530AC((uint64_t)&v35, (uint64_t)v7);
      if (v30 >= 2)
        sub_22EF53BC0(&v30);
      LODWORD(v30) = v35;
      v31 = v36;
      v32 = v37;
      v33 = v38;
      v34 = v39;
    }
  }
  else if (!sub_22F007880(*(_QWORD *)(a1 + 48), (uint64_t)&v30))
  {
    goto LABEL_44;
  }
  if ((*(_DWORD *)(a1 + 28) & 0x7F) != 0x53)
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 4) != 0)
      v10 = *(_QWORD *)v10;
    for (i = *(_WORD *)(v10 + 8) & 0x7F; i != 83; i = *(_WORD *)(v10 + 8) & 0x7F)
    {
      v12 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v12 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_24;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_23;
        if (i == 16)
          goto LABEL_17;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_30;
        if (i == 24)
        {
LABEL_17:
          v12 = -48;
        }
        else
        {
LABEL_23:
          if (i != 70)
          {
LABEL_24:
            v13 = i - 52;
            if ((i - 33) >= 5)
              v14 = -48;
            else
              v14 = -64;
            if (v13 >= 6)
              v12 = v14;
            else
              v12 = -72;
            goto LABEL_30;
          }
          v12 = -64;
        }
      }
LABEL_30:
      v15 = *(_QWORD *)(v10 + v12 + 16);
      v10 = v15 & 0xFFFFFFFFFFFFFFF8;
      if ((v15 & 4) != 0)
        v10 = *(_QWORD *)v10;
    }
    v5 = (uint64_t *)(v10 + 48);
  }
  v16 = *v5;
  v17 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1 + 32))(a1);
  LODWORD(v25) = v30;
  v26 = v31;
  v27 = v32;
  v28 = v33;
  v29 = v34;
  LODWORD(v30) = 0;
  v18 = sub_22F006F3C(v16, v17 & 0xFFFFFFFFFFFFFFFCLL, 0, (uint64_t)&v25, *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 24), &v23, v3);
  if ((_BYTE)v23)
    v19 = 0;
  else
    v19 = v18;
  if (v25 >= 2)
    sub_22EF53BC0(&v25);
  if (v19)
  {
    v20 = (_BYTE *)sub_22EFBCE18(a1);
    *v20 |= 8u;
    v21 = 1;
    goto LABEL_45;
  }
LABEL_44:
  v21 = 0;
LABEL_45:
  if (v30 >= 2)
    sub_22EF53BC0(&v30);
  return v21;
}

uint64_t sub_22F007880(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  __int128 v11;
  __int128 v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int *v32;
  int v33;
  __int128 v34;
  __int128 v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38[9];
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_22F10C2A4(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0));
  if (!v4 || (v8 = v4, v9 = *(_DWORD *)(v4 + 28), (v9 & 0x7Fu) - 35 > 2))
  {
    v5 = *v3;
    if (*v3)
      v6 = (*(_DWORD *)(*v3 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
    else
      v6 = 0;
    if (v6)
    {
      v31 = *(_DWORD *)(*v3 + 16);
    }
    else
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
        goto LABEL_7;
      v37 = sub_22F10CF48(*v3);
      if (!v37)
        goto LABEL_7;
      v5 = v37;
      v31 = *(unsigned __int8 *)(v37 + 16);
    }
    if (v31 == 2)
    {
      v32 = (int *)(v5 + 40);
      if (*(_DWORD *)(v5 + 48) >= 0x41u)
        v32 = *(int **)v32;
      sub_22EF52F1C((uint64_t)&v40, 0, *v32);
      v33 = 9;
      v39 = 9;
      if (*(_DWORD *)a2 >= 2u)
      {
        sub_22EF53BC0((uint64_t *)a2);
        v33 = v39;
      }
      *(_DWORD *)a2 = v33;
      v34 = v41;
      *(_OWORD *)(a2 + 8) = v40;
      *(_OWORD *)(a2 + 24) = v34;
      v35 = v43;
      *(_OWORD *)(a2 + 40) = v42;
      *(_OWORD *)(a2 + 56) = v35;
      v36 = *(_DWORD *)(a2 + 16);
      if (v36 == *(_DWORD *)(a2 + 20))
        return 1;
      return sub_22F007880(*(_QWORD *)(v5 + 32), *(_QWORD *)(a2 + 8) + 72 * v36);
    }
LABEL_7:
    if (*(_DWORD *)a2 >= 2u)
      sub_22EF53BC0((uint64_t *)a2);
    result = 1;
    *(_DWORD *)a2 = 1;
    return result;
  }
  if ((v9 & 0x80) != 0)
  {
    if (*(_DWORD *)a2 >= 2u)
      sub_22EF53BC0((uint64_t *)a2);
    result = 0;
    *(_DWORD *)a2 = 0;
  }
  else
  {
    if ((*(_DWORD *)(v4 + 72) & 0xE000) == 0x4000)
    {
      LODWORD(v38[0]) = 0;
      *(_QWORD *)&v40 = 0;
      v10 = (_DWORD *)operator new();
      *v10 = 0;
      *((_QWORD *)&v40 + 1) = v10;
      v39 = 11;
      sub_22EF53A5C((uint64_t)&v39, 0, (uint64_t)v38);
      if (*(_DWORD *)a2 >= 2u)
        sub_22EF53BC0((uint64_t *)a2);
      *(_DWORD *)a2 = v39;
      v11 = v41;
      *(_OWORD *)(a2 + 8) = v40;
      *(_OWORD *)(a2 + 24) = v11;
      v12 = v43;
      *(_OWORD *)(a2 + 40) = v42;
      *(_OWORD *)(a2 + 56) = v12;
      if (LODWORD(v38[0]) >= 2)
        sub_22EF53BC0(v38);
      return 1;
    }
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v4 + 104) + 96), *(_QWORD *)(v4 + 104));
    v13 = *(_DWORD *)(*(_QWORD *)(v8 + 128) + 16);
    v14 = sub_22EFC3B90(v8);
    v15 = 0;
    if (v14)
    {
LABEL_22:
      ++v15;
      while (1)
      {
        v14 = *(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v14)
          break;
        if ((*(_DWORD *)(v14 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_22;
      }
    }
    sub_22EF53024((uint64_t)&v40, v13, v15);
    v16 = 10;
    v39 = 10;
    if (*(_DWORD *)a2 >= 2u)
    {
      sub_22EF53BC0((uint64_t *)a2);
      v16 = v39;
    }
    *(_DWORD *)a2 = v16;
    v17 = v41;
    *(_OWORD *)(a2 + 8) = v40;
    *(_OWORD *)(a2 + 24) = v17;
    v18 = v43;
    *(_OWORD *)(a2 + 40) = v42;
    *(_OWORD *)(a2 + 56) = v18;
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 104) + 96), *(_QWORD *)(v8 + 104));
    v19 = *(_QWORD *)(v8 + 128);
    v20 = *(_QWORD *)(v19 + 24);
    if ((v20 & 1) != 0)
      v20 = sub_22EFCF510(v19);
    v21 = sub_22F24CD30(v8);
    if (v20 == v21)
    {
      v24 = 1;
    }
    else
    {
      v22 = v21;
      v23 = 0;
      LOBYTE(v24) = 1;
      do
      {
        v25 = *(_QWORD *)(**(_QWORD **)(v20 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v25 + 8) & 0xF) != 0)
          v25 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v20 + 16));
        v26 = sub_22F007880(v25 & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(a2 + 8) + 72 * v23);
        if ((_BYTE)v24)
          v24 = v26;
        else
          v24 = 0;
        v20 += 24;
        ++v23;
      }
      while (v20 != v22);
    }
    v27 = sub_22EFC3B90(v8);
    if (v27)
    {
      v28 = v27;
LABEL_42:
      if ((*(_BYTE *)(v28 + 68) & 1) == 0 || *(_QWORD *)(v28 + 40))
      {
        v29 = *(_QWORD *)(v28 + 48);
        v30 = sub_22EFC306C(v28);
        v24 &= sub_22F007880(v29, *(_QWORD *)(a2 + 8) + 72 * (*(_DWORD *)(a2 + 16) + v30));
      }
      while (1)
      {
        v28 = *(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v28)
          break;
        if ((*(_DWORD *)(v28 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_42;
      }
    }
    return v24 & 1;
  }
  return result;
}

BOOL sub_22F007CB0(unsigned __int8 *a1, uint64_t a2, int a3)
{
  _BOOL8 v4;
  __int16 v6;
  uint64_t v7;
  uint64_t v8[10];

  v8[9] = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  v7 = 0;
  LODWORD(v8[0]) = 0;
  v4 = 0;
  if (sub_22F005120(a1, (uint64_t)&v6, a2, 1))
  {
    if (a3 <= 1 && (_BYTE)v6)
      v4 = 0;
    else
      v4 = a3 >= 1 || HIBYTE(v6) == 0;
  }
  if (LODWORD(v8[0]) >= 2)
    sub_22EF53BC0(v8);
  return v4;
}

void sub_22F007D7C(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  char v7;
  unsigned int v8;
  char v9;
  _QWORD v10[5];
  int v11;
  char v12;
  _QWORD v13[2];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 *v17;
  __int128 v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD v22[4];
  __int128 v23;
  int v24;
  _OWORD *v25;
  uint64_t v26;
  _OWORD v27[33];
  int v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  __int128 *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  LODWORD(v41) = 0;
  v40 = a3;
  v10[0] = &off_24FAC58D8;
  v10[1] = a2;
  v6 = *(_QWORD *)(a2 + 2000);
  v7 = *(_BYTE *)(v6 + 180);
  v11 = *(_DWORD *)(v6 + 176);
  v12 = v7 & 1;
  v13[0] = &off_24FAC5960;
  v13[1] = v10;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v18 = 0u;
  v17 = &v18;
  v19 = 0x100000000;
  v20 = v22;
  v22[0] = 1;
  v21 = 0x200000001;
  v22[2] = 1;
  v24 = 0;
  v23 = 0u;
  v10[2] = &v39;
  v10[3] = v13;
  v10[4] = 0x200000001;
  v25 = v27;
  v26 = 0x1000000000;
  v29 = 0u;
  v30 = 0;
  v31 = 0;
  v33 = 0u;
  v28 = 0;
  v27[32] = 0u;
  v32 = &v33;
  v34 = 0;
  v35 = -1;
  v36 = 0x10000;
  v37 = 0;
  v38 = 3;
  if ((sub_22F008268(a1, (uint64_t)&v39, a2, &v9) & 1) == 0)
    sub_22F007F4C((uint64_t)v10, (unint64_t)a1, &v41);
  v8 = v43;
  *(_DWORD *)(a4 + 8) = v43;
  if (v8 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)a4, (const llvm::APInt *)&v42);
  else
    *(_QWORD *)a4 = v42;
  *(_BYTE *)(a4 + 12) = v44;
  sub_22F0052A4((uint64_t)v10);
  if (v41 >= 2)
    sub_22EF53BC0(&v41);
}

uint64_t sub_22F007F4C(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t result;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _QWORD *v13;
  unsigned int v14;
  int v15;
  _QWORD v16[3];
  int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[12];

  v21[11] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 44))
  {
    v13 = sub_22F3654C0(*(_QWORD *)(a1 + 8));
    if (!sub_22F3CD4FC((uint64_t)v13, a1, a2, (uint64_t)a3))
      return 0;
    goto LABEL_12;
  }
  if (*(_QWORD *)(a2 + 8) < 0x10uLL)
    return 0;
  result = sub_22F0451C8((uint64_t *)a1, a2, 0);
  if ((_DWORD)result)
  {
    result = sub_22F009DC4((uint64_t)a3, (uint64_t *)a1, a2, v7, v8, v9, v10, v11);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 1) & 3) != 0)
      {
        memset(v16, 0, sizeof(v16));
        v17 = -1;
        v18 = 0;
        v19 = v21;
        v20 = 0x800000000;
        v21[8] = 0;
        v21[9] = 0;
        sub_22F01D8E0((uint64_t)v16, *(_QWORD *)(a1 + 8), (uint64_t)a3);
        v12 = sub_22F0248D4((uint64_t *)a1, a2, *(_QWORD *)(a2 + 8), (uint64_t)v16, (uint64_t)a3, 0);
        if (v19 != v21)
          free(v19);
        if (!v12)
          return 0;
      }
LABEL_12:
      sub_22EFF605C(a2);
      v15 = sub_22F006DEC((uint64_t *)a1, v14, *(_QWORD *)(a2 + 8), a3, 0);
      result = 0;
      if (v15)
      {
        sub_22F006EA4((unsigned __int8 *)a1);
        return 1;
      }
    }
  }
  return result;
}

void sub_22F0080CC(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  char v6;
  _QWORD v7[5];
  int v8;
  char v9;
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD v19[4];
  __int128 v20;
  int v21;
  _OWORD *v22;
  uint64_t v23;
  _OWORD v24[33];
  int v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  __int128 *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  int v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38[10];

  v38[9] = *MEMORY[0x24BDAC8D0];
  v36 = 0;
  v37 = 0;
  LODWORD(v38[0]) = 0;
  if ((sub_22F008268(a1, (uint64_t)&v36, a2, &v6) & 1) == 0)
  {
    v7[0] = &off_24FAC58D8;
    v7[1] = a2;
    v4 = *(_QWORD *)(a2 + 2000);
    v5 = *(_BYTE *)(v4 + 180);
    v8 = *(_DWORD *)(v4 + 176);
    v9 = v5 & 1;
    v10[0] = &off_24FAC5960;
    v10[1] = v7;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v15 = 0u;
    v14 = &v15;
    v16 = 0x100000000;
    v17 = v19;
    v19[0] = 1;
    v18 = 0x200000001;
    v19[2] = 1;
    v21 = 0;
    v20 = 0u;
    v7[2] = &v36;
    v7[3] = v10;
    v7[4] = 0x200000001;
    v22 = v24;
    v23 = 0x1000000000;
    v26 = 0u;
    v27 = 0;
    v28 = 0;
    v30 = 0u;
    v25 = 0;
    v24[32] = 0u;
    v29 = &v30;
    v31 = 0;
    v32 = -1;
    v33 = 0;
    v35 = 3;
    v34 = 1;
    sub_22F007F4C((uint64_t)v7, (unint64_t)a1, v38);
    sub_22F0052A4((uint64_t)v7);
  }
  if (LODWORD(v38[0]) >= 2)
    sub_22EF53BC0(v38);
}

uint64_t sub_22F008268(unsigned __int8 *a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v6;
  char v7;
  uint64_t result;
  unsigned __int8 v9;
  int v10;
  unsigned int v11;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;

  if (*a1 == 181)
  {
    sub_22F257F94((uint64_t)(a1 + 16), (llvm::APInt *)&v18);
    v14 = sub_22F110B50(*(_QWORD *)(*((_QWORD *)a1 + 1) & 0xFFFFFFFFFFFFFFF0));
    v15 = v19;
    v16 = v18;
    v19 = 0;
    if (*(_DWORD *)(a2 + 16) > 1u)
    {
      sub_22EF53BC0((uint64_t *)(a2 + 16));
      v17 = v19;
      *(_DWORD *)(a2 + 16) = 2;
      *(_QWORD *)(a2 + 24) = v16;
      *(_DWORD *)(a2 + 32) = v15;
      *(_BYTE *)(a2 + 36) = v14;
      if (v17 >= 0x41 && v18)
        MEMORY[0x2348A0E84](v18, 0x1000C8000313F17);
    }
    else
    {
      *(_DWORD *)(a2 + 16) = 2;
      *(_QWORD *)(a2 + 24) = v16;
      *(_DWORD *)(a2 + 32) = v15;
      *(_BYTE *)(a2 + 36) = v14;
    }
    v7 = 1;
    goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (v6 < 0x10)
  {
    v7 = 0;
LABEL_4:
    *a4 = v7;
    return 1;
  }
  if ((a1[1] & 3) != 0)
    return 0;
  v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  v10 = v9;
  v11 = (v9 & 0xFE) - 2;
  if (v10 != 45 && v11 > 3)
    return 0;
  v7 = 0;
  result = 0;
  if ((*(_BYTE *)(*(_QWORD *)(a3 + 2000) + 1) & 2) == 0)
    goto LABEL_4;
  return result;
}

uint64_t sub_22F0083C0(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  int v3;
  int v4;
  uint64_t result;
  _BOOL4 v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;

  v1 = a1 & 3;
  if (v1 == 3)
  {
    v7 = (a1 & 0x7FFFFFFF8) != 0;
    v8 = a1 & 4;
    if ((a1 & 4) != 0)
      v7 = a1 > 7;
    if (!v7)
      return 1;
    v14 = (unsigned __int8 *)(a1 & 0xFFFFFFFFFFFFFFFCLL);
  }
  else
  {
    if (a1 < 4)
      return 1;
    if ((a1 & 3) == 0 && (a1 & 0xFFFFFFFFFFFFFFFCLL) != 0)
    {
      v2 = a1 & 0xFFFFFFFFFFFFFFFCLL;
LABEL_6:
      v3 = *(_DWORD *)(v2 + 28);
      v4 = v3 & 0x7F;
      if ((v4 - 67) >= 0xFFFFFFF9)
        return !sub_22E3CB5E0(v2);
      if (v4 == 72 || (v3 & 0x7Eu) - 52 < 6)
        return 1;
      return v4 == 69 || v4 == 73;
    }
    v14 = (unsigned __int8 *)(a1 & 0xFFFFFFFFFFFFFFFCLL);
    v8 = a1 & 4;
  }
  v9 = a1 & 7;
  if (v8)
    v2 = a1 & 0xFFFFFFFFFFFFFFF8;
  else
    v2 = 0;
  if (v9 == 7 && v2)
    goto LABEL_6;
  result = 1;
  if (v1 != 2 && v9 != 3)
  {
    result = 0;
    v10 = *v14;
    if (v10 > 0xC3)
    {
      if (*v14 > 0xD7u)
      {
        if (v10 == 216 || v10 == 223 || v10 == 225)
          return 1;
      }
      else
      {
        switch(*v14)
        {
          case 0xC4u:
          case 0xCCu:
            return 1;
          case 0xC9u:
          case 0xCAu:
          case 0xCBu:
            result = (v14[2] >> 2) & 1;
            break;
          default:
            return result;
        }
      }
      return result;
    }
    if (*v14 > 0x9Bu)
    {
      if (v10 == 156)
      {
        if ((v14[24] & 4) != 0)
          return (*(_DWORD *)v14 & 0x300) == 256;
        return 0;
      }
      if (v10 != 179)
      {
        if (v10 != 186)
          return result;
        v12 = *((_QWORD *)v14 + 2);
        if ((v12 & 4) != 0)
          return sub_22F3B2674(v12 & 0xFFFFFFFFFFFFFFF8) == 3;
        return 0;
      }
    }
    else if (v10 != 104)
    {
      if (v10 != 114)
      {
        if (v10 != 138)
          return result;
        v11 = sub_22EFFA8F0((uint64_t)v14);
        result = 1;
        if ((v11 - 404) < 2 || v11 == 1228)
          return result;
        return sub_22EFFA8F0((uint64_t)v14) == 1258;
      }
      v13 = *((_QWORD *)v14 + 2);
      if (!*(_DWORD *)(v13 + 112))
        return (*(_BYTE *)(v13 + 49) & 0x40) == 0;
      return 0;
    }
    return 1;
  }
  return result;
}

uint64_t sub_22F0085E8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t result;

  if ((*(_BYTE *)(*(_QWORD *)(a2 + 2000) + 1) & 2) != 0)
    return sub_22F008658(a2, a1, 0, a3);
  v4 = sub_22F0087AC(a1);
  v5 = HIDWORD(v4);
  v6 = v4;
  result = v4 == 0;
  if (a3)
  {
    if (v6)
    {
      result = 0;
      *a3 = v5;
    }
  }
  return result;
}

uint64_t sub_22F008658(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  _BOOL4 v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if ((sub_22F1107D8(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) == 0)
  {
    if (!a4)
      return 0;
    sub_22EFF605C(a2);
    v11 = 0;
    *a4 = v12;
    return v11;
  }
  LODWORD(v15) = 0;
  v8 = sub_22F0092DC(a2, a1, &v15, a4);
  v9 = v15;
  if (!v8)
    goto LABEL_13;
  if ((_DWORD)v15 == 2)
  {
    if (!a3)
    {
      v11 = 1;
      goto LABEL_17;
    }
    if (*(_DWORD *)(a3 + 8) > 0x40u || (v10 = v17, v17 > 0x40))
    {
      llvm::APInt::assignSlowCase((llvm::APInt *)a3, (const llvm::APInt *)&v16);
      v9 = v15;
    }
    else
    {
      *(_QWORD *)a3 = v16;
      *(_DWORD *)(a3 + 8) = v10;
      v9 = 2;
    }
    *(_BYTE *)(a3 + 12) = v18;
    v11 = 1;
    goto LABEL_16;
  }
  if (a4)
  {
    sub_22EFF605C(a2);
    v11 = 0;
    *a4 = v13;
  }
  else
  {
LABEL_13:
    v11 = 0;
  }
LABEL_16:
  if (v9 >= 2)
LABEL_17:
    sub_22EF53BC0(&v15);
  return v11;
}

unint64_t sub_22F0087AC(uint64_t a1)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  unsigned int v6;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v3 = *(_DWORD *)(v2 + 16);
  if (v2)
    v4 = v3 == 11;
  else
    v4 = 0;
  if (v4)
  {
    if (((*(_DWORD *)(v2 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (!v2 || v3 != 44)
  {
    if (v3 != 9)
      goto LABEL_14;
LABEL_13:
    __asm { BR              X10 }
  }
  v5 = sub_22F114198(*(_QWORD *)(v2 + 24));
  if ((*(_BYTE *)(v5 + 74) & 1) != 0 || *(_QWORD *)(v5 + 128) > 7uLL)
    goto LABEL_13;
LABEL_14:
  sub_22F0D5A50(a1);
  return ((unint64_t)v6 << 32) | 2;
}

void sub_22F00905C(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  char v7;
  unsigned int v8;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char v14;
  _QWORD v15[5];
  int v16;
  char v17;
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  _DWORD v27[4];
  __int128 v28;
  int v29;
  _OWORD *v30;
  uint64_t v31;
  _OWORD v32[33];
  int v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  __int128 *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  int v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a1 + 2) & 1) != 0)
    goto LABEL_12;
  v13 = 1;
  v12 = 0;
  v14 = 0;
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 2000) + 1) & 2) != 0)
  {
    if (sub_22F008658(a2, a1, (uint64_t)&v12, a3))
    {
      *(_DWORD *)(a4 + 8) = v13;
      *(_QWORD *)a4 = v12;
      *(_BYTE *)(a4 + 12) = v14;
      *(_BYTE *)(a4 + 16) = 1;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 16) = 0;
      if (v13 >= 0x41)
      {
        if (v12)
          MEMORY[0x2348A0E84](v12, 0x1000C8000313F17);
      }
    }
    return;
  }
  if ((sub_22F0085E8(a1, a2, a3) & 1) == 0)
  {
LABEL_12:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
    return;
  }
  v44 = 0;
  v45 = 0;
  LODWORD(v46) = 0;
  v10 = 0;
  v11 = 0;
  v15[0] = &off_24FAC58D8;
  v15[1] = a2;
  v6 = *(_QWORD *)(a2 + 2000);
  v7 = *(_BYTE *)(v6 + 180);
  v16 = *(_DWORD *)(v6 + 176);
  v17 = v7 & 1;
  v18[0] = &off_24FAC5960;
  v18[1] = v15;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v23 = 0u;
  v22 = &v23;
  v24 = 0x100000000;
  v25 = v27;
  v26 = 0x200000001;
  v27[0] = 1;
  v27[2] = 1;
  v29 = 0;
  v28 = 0u;
  v15[2] = &v10;
  v15[3] = v18;
  v15[4] = 0x200000001;
  v30 = v32;
  v31 = 0x1000000000;
  v34 = 0u;
  v35 = 0;
  v36 = 0;
  v38 = 0u;
  v33 = 0;
  v32[32] = 0u;
  v37 = &v38;
  v39 = 0;
  v40 = -1;
  v41 = 0x10000;
  v42 = 0;
  v43 = 3;
  sub_22F0056A0(a1, (uint64_t)&v44, a2, 2, (uint64_t)v15);
  v8 = v48;
  *(_DWORD *)(a4 + 8) = v48;
  if (v8 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)a4, (const llvm::APInt *)&v47);
  else
    *(_QWORD *)a4 = v47;
  *(_BYTE *)(a4 + 12) = v49;
  *(_BYTE *)(a4 + 16) = 1;
  sub_22F0052A4((uint64_t)v15);
  if (v46 >= 2)
    sub_22EF53BC0(&v46);
}

BOOL sub_22F0092DC(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v6;
  char v7;
  _BOOL8 v8;
  int v9;
  char v10;
  __int16 v12;
  char **v13;
  uint64_t v14[9];
  _QWORD v15[5];
  int v16;
  char v17;
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  _DWORD v27[4];
  __int128 v28;
  int v29;
  _OWORD *v30;
  uint64_t v31;
  _OWORD v32[33];
  int v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  __int128 *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  int v43;
  char *v44;
  uint64_t v45;
  _QWORD v46[33];

  v46[32] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v44 = (char *)v46;
  v45 = 0x800000000;
  v13 = &v44;
  v15[0] = &off_24FAC58D8;
  v15[1] = a2;
  v6 = *(_QWORD *)(a2 + 2000);
  v7 = *(_BYTE *)(v6 + 180);
  v16 = *(_DWORD *)(v6 + 176);
  v17 = v7 & 1;
  v18[0] = &off_24FAC5960;
  v18[1] = v15;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v23 = 0u;
  v22 = &v23;
  v24 = 0x100000000;
  v25 = v27;
  v26 = 0x200000001;
  v27[0] = 1;
  v27[2] = 1;
  v29 = 0;
  v28 = 0u;
  v15[2] = &v12;
  v15[3] = v18;
  v15[4] = 0x200000001;
  v30 = v32;
  v31 = 0x1000000000;
  v34 = 0u;
  v35 = 0;
  v36 = 0;
  v38 = 0u;
  v33 = 0;
  v32[32] = 0u;
  v37 = &v38;
  v39 = 0;
  v40 = -1;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  if (!a3)
    a3 = v14;
  LODWORD(v14[0]) = 0;
  v8 = 0;
  if (sub_22F007F4C(v15, a1, a3))
  {
    if (sub_22F005D84(v15))
      v8 = (_BYTE)v12 == 0;
    else
      v8 = 0;
  }
  if (!(_DWORD)v45)
  {
    if (a4)
      v10 = v8;
    else
      v10 = 1;
    if ((v10 & 1) != 0)
      goto LABEL_17;
    sub_22EFF605C(a1);
    goto LABEL_15;
  }
  if (a4)
  {
    v9 = *(_DWORD *)v44;
LABEL_15:
    v8 = 0;
    *a4 = v9;
    goto LABEL_17;
  }
  v8 = 0;
LABEL_17:
  if (LODWORD(v14[0]) >= 2)
    sub_22EF53BC0(v14);
  sub_22F0052A4((uint64_t)v15);
  sub_22E89277C(&v44);
  return v8;
}

BOOL sub_22F0094E0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  char v10;
  _QWORD *v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  _BOOL8 v31;
  uint64_t v33;
  int v34;
  __int16 *v35;
  __int16 v37;
  uint64_t v38;
  _QWORD v39[9];
  _QWORD v40[2];
  int v41;
  int v42;
  _DWORD *v43;
  uint64_t v44;
  _DWORD v45[4];
  uint64_t v46;
  uint64_t v47;
  int v48;
  _QWORD v49[3];
  int v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  _QWORD v54[11];
  uint64_t v55[2];
  __int16 *v56;
  _QWORD *v57;
  uint64_t v58;
  int v59;
  char v60;
  _QWORD v61[2];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 *v65;
  __int128 v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  _DWORD v70[4];
  __int128 v71;
  int v72;
  _OWORD *v73;
  uint64_t v74;
  _OWORD v75[33];
  int v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  __int128 *v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  char v85;
  int v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v37 = 0;
  v38 = 0;
  v55[0] = (uint64_t)&off_24FAC58D8;
  v55[1] = a3;
  v9 = *(_QWORD *)(a3 + 2000);
  v10 = *(_BYTE *)(v9 + 180);
  v59 = *(_DWORD *)(v9 + 176);
  v60 = v10 & 1;
  v11 = v61;
  v61[0] = &off_24FAC5960;
  v61[1] = v55;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v66 = 0u;
  v65 = &v66;
  v67 = 0x100000000;
  v68 = v70;
  v69 = 0x200000001;
  v70[0] = 1;
  v70[2] = 1;
  v72 = 0;
  v71 = 0u;
  v56 = &v37;
  v57 = v61;
  v58 = 0x200000001;
  v73 = v75;
  v74 = 0x1000000000;
  v77 = 0u;
  v78 = 0;
  v79 = 0;
  v81 = 0u;
  v76 = 0;
  v75[32] = 0u;
  v80 = &v81;
  v82 = 0;
  v83 = -1;
  v84 = 0x10000;
  v85 = 0;
  v86 = 1;
  memset(v49, 0, sizeof(v49));
  v50 = -1;
  v51 = 0;
  v52 = v54;
  v53 = 0x800000000;
  v54[8] = 0;
  v54[9] = 0;
  if (a7)
  {
    v33 = a6;
    if ((*(_BYTE *)(a7 + 2) & 1) != 0)
    {
      v13 = 0;
      v35 = &v37;
    }
    else
    {
      v34 = sub_22F0098FC(v55, a7, v49);
      v35 = v56;
      if (v34)
      {
        if (*(_BYTE *)v56)
          v13 = 0;
        else
          v13 = v49;
      }
      else
      {
        v13 = 0;
      }
    }
    *(_BYTE *)v35 = 0;
    v11 = v57;
    a6 = v33;
  }
  else
  {
    v13 = 0;
  }
  v14 = *((unsigned int *)v11 + 23);
  v15 = (*((_DWORD *)v11 + 30) + 1);
  *((_DWORD *)v11 + 30) = v15;
  v16 = v14 | (v15 << 32);
  if (a6)
  {
    v17 = 0;
    v18 = 8 * a6;
    do
    {
      v19 = *(_QWORD *)(*(_QWORD *)(a4 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v19)
        v20 = *(_BYTE *)(v19 + 16) == 26;
      else
        v20 = 0;
      if (!v20)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
          break;
        v19 = sub_22F10CF48(v19);
        if (!v19)
          break;
      }
      if ((v17 >> 3) >= (unsigned __int16)(*(_QWORD *)(v19 + 16) >> 38))
        break;
      v21 = *(_QWORD *)(*(_QWORD *)(a4 + 120) + (v17 & 0x7FFFFFFF8));
      if ((*(_BYTE *)(*a5 + 2) & 1) != 0
        || !sub_22F009A1C(*(uint64_t **)(*(_QWORD *)(a4 + 120) + (v17 & 0x7FFFFFFF8)), *a5, a4, v16, (uint64_t)v55, 0)|| *(_BYTE *)v56)
      {
        v22 = sub_22F009BD8((uint64_t)v55, a4, v16, v21);
        if (v22)
        {
          v23 = v22;
          if (*(_DWORD *)v22 >= 2u)
            sub_22EF53BC0(v22);
          *(_DWORD *)v23 = 0;
        }
      }
      *(_BYTE *)v56 = 0;
      ++a5;
      v17 += 8;
      v18 -= 8;
    }
    while (v18);
  }
  sub_22F005D84(v55);
  *(_BYTE *)v56 = 0;
  v24 = *(_DWORD *)(a4 + 24);
  v39[0] = &off_24FAC5960;
  v39[1] = v55;
  v39[2] = v57;
  v39[3] = a4;
  v39[4] = v13;
  v39[5] = a4;
  v39[6] = v16;
  v39[7] = 0;
  v40[0] = 0;
  v40[1] = 0;
  v39[8] = v40;
  v41 = v24;
  v42 = HIDWORD(v58);
  v43 = v45;
  v44 = 0x200000001;
  v45[0] = 1;
  v45[2] = 1;
  v48 = 0;
  v46 = 0;
  v47 = 0;
  v57 = v39;
  ++HIDWORD(v58);
  LODWORD(v58) = v58 + 1;
  v25 = v74;
  sub_22F0270D4(v39);
  if (sub_22F009DC4(a2, v55, a1, v26, v27, v28, v29, v30))
  {
    if (sub_22F05B164((uint64_t)v55, 1, v25))
    {
      v31 = *(_BYTE *)v56 == 0;
      goto LABEL_25;
    }
  }
  else if (v25 != -1)
  {
    sub_22F05B164((uint64_t)v55, 0, v25);
  }
  v31 = 0;
LABEL_25:
  --*((_DWORD *)v57 + 26);
  sub_22F00AA08((uint64_t)v39);
  if (v52 != v54)
    free(v52);
  sub_22F0052A4((uint64_t)v55);
  return v31;
}

#error "22F009978: call analysis failed (funcsize=72)"

uint64_t sub_22F009A1C(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v21[2];
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  _BYTE v30[64];
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = -1;
  v27 = 0;
  v28 = v30;
  v29 = 0x800000000;
  v31 = 0;
  v32 = 0;
  v9 = *(_QWORD *)(a5 + 24);
  if (a1)
  {
    v11 = a4 & 0xFFFFFFFF00000000;
    v12 = *(unsigned int *)(v9 + 92);
    v13 = (*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1) & 0xFFFFFFFFFFFFFFFCLL;
    v14 = v11 | v12;
    v22 = v13;
    v23 = v14;
    v24 = 0;
    v33 &= ~2u;
    v21[0] = v13;
    v21[1] = v14;
    v15 = sub_22EF52AD4(v21);
    v25 = 0;
    v26 = 0;
    v27 = v15;
    LODWORD(v29) = 0;
    v33 &= 0xF2u;
    v31 = 0;
    v32 = 0;
    v16 = sub_22F0242E0(v9, v13, v14, (unint64_t)a1, a1[6], 2u);
  }
  else
  {
    v16 = sub_22F044E2C(v9, a2, *(_QWORD *)(a2 + 8), 2u, (uint64_t)&v22);
  }
  v17 = v16;
  v18 = sub_22F006CB0(v16, a5, &v22, a2, 0);
  if ((_DWORD)v18 && a6)
  {
    if (*(_DWORD *)v17 == 7 && (*(_BYTE *)(v17 + 52) & 1) != 0)
    {
      sub_22EFF605C(a2);
      sub_22F072D74(a5, v19, 2310, 0);
      v18 = 0;
    }
    else
    {
      v18 = 1;
    }
  }
  if (v28 != v30)
    free(v28);
  return v18;
}

uint64_t *sub_22F009BD8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int i;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;

  v4 = HIDWORD(a3);
  v6 = a1 + 24;
  do
  {
    v7 = *(_QWORD *)v6;
    v8 = *(_DWORD *)(*(_QWORD *)v6 + 92);
    v6 = *(_QWORD *)v6 + 16;
  }
  while (v8 > a3);
  if (v8 != (_DWORD)a3)
    return 0;
  if (a2)
  {
    v9 = (*(_DWORD *)(a4 + 96) >> 20);
    if (v9 == 255)
    {
      v10 = a4;
      if ((*(_DWORD *)(a4 + 28) & 0x7F) != 0x53)
      {
        v11 = *(_QWORD *)(a4 + 16);
        v12 = v11 & 0xFFFFFFFFFFFFFFF8;
        if ((v11 & 4) != 0)
          v12 = *(_QWORD *)v12;
        for (i = *(_WORD *)(v12 + 8) & 0x7F; i != 83; i = *(_WORD *)(v12 + 8) & 0x7F)
        {
          v14 = -40;
          if (i > 70)
          {
            if (i == 71)
            {
              v14 = -56;
            }
            else if (i != 81)
            {
              goto LABEL_20;
            }
          }
          else
          {
            if (i > 0x18)
              goto LABEL_19;
            if (i == 16)
              goto LABEL_13;
            if (((1 << i) & 0x1066) != 0)
              goto LABEL_26;
            if (i == 24)
            {
LABEL_13:
              v14 = -48;
            }
            else
            {
LABEL_19:
              if (i != 70)
              {
LABEL_20:
                v15 = i - 52;
                if ((i - 33) >= 5)
                  v16 = -48;
                else
                  v16 = -64;
                if (v15 >= 6)
                  v14 = v16;
                else
                  v14 = -72;
                goto LABEL_26;
              }
              v14 = -64;
            }
          }
LABEL_26:
          v17 = *(_QWORD *)(v12 + v14 + 16);
          v12 = v17 & 0xFFFFFFFFFFFFFFF8;
          if ((v17 & 4) != 0)
            v12 = *(_QWORD *)v12;
        }
        v10 = v12 - 40;
      }
      v9 = sub_22F36F2CC(*(_QWORD *)(v10 + 88), a4);
    }
    a4 = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v9);
  }
  v20 = *(uint64_t **)(v7 + 72);
  v19 = (uint64_t *)(v7 + 72);
  v18 = v20;
  if (!v20)
    return 0;
  v21 = v19;
  do
  {
    v22 = v18[4];
    if (v22 >= a4)
    {
      if (v22 <= a4)
      {
        if (*((_DWORD *)v18 + 10) < v4)
          ++v18;
        else
          v21 = v18;
      }
      else
      {
        v21 = v18;
      }
    }
    else
    {
      ++v18;
    }
    v18 = (uint64_t *)*v18;
  }
  while (v18);
  if (v21 == v19)
    return 0;
  if (*((_DWORD *)v21 + 10) == v4 && v21[4] == a4)
    return v21 + 6;
  else
    return 0;
}

BOOL sub_22F009DC4(uint64_t a1, uint64_t *a2, unint64_t a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  void *v20;
  uint64_t v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  llvm::APFloatBase *v26;
  uint64_t v27;
  llvm::APFloatBase *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  llvm::APFloatBase *v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned __int8 **v39;
  unsigned __int8 **v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _BYTE *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v47;
  char v48;
  void *v49;
  void *v50;
  unsigned __int8 **v51;
  unsigned __int8 **v52;
  uint64_t v53;
  unsigned __int8 *v54;
  _BYTE *v55;
  uint64_t v56;
  llvm::APFloatBase *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[2];
  void *v62;
  __int128 v63;
  uint64_t v64[2];
  void *v65[2];
  uint64_t v66[2];
  uint64_t v67;
  void *v68;
  uint64_t v69[5];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  llvm::APFloatBase *v73;
  void *v74;
  uint64_t v75[2];
  llvm::APFloatBase *v76;
  void *v77;
  void *v78[2];
  unint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;

  v10 = a1;
  v84 = *MEMORY[0x24BDAC8D0];
  v11 = *(_QWORD *)(a3 + 8);
  v58 = v11;
  if ((*(_BYTE *)(a3 + 1) & 3) != 0
    || (v12 = *(_QWORD *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 8),
        v13 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0),
        v14 = *(_DWORD *)(v13 + 16),
        v14 - 25 <= 1))
  {
    LODWORD(v64[0]) = -1;
    v79 = (unint64_t)a2;
    *(_QWORD *)&v80 = &v62;
    BYTE8(v80) = 0;
    if (sub_22F010358((int)&v79, a3, a3, a4, a5, a6, a7, a8, v58, v59, v60, v61[0], v61[1], 0, 0, 0, v64[0], v64[1], 0,
                         (uint64_t)&v66[1],
                         0x800000000,
                         v66[1],
                         v67,
                         (uint64_t)v68,
                         v69[0],
                         v69[1],
                         v69[2],
                         v69[3],
                         (unint64_t)v69[4],
                         0,
                         v72,
                         (uint64_t)v73,
                         (uint64_t)v74,
                         v75[0],
                         v75[1],
                         (uint64_t)v76,
                         (uint64_t)v77,
                         v78[0],
                         (uint64_t)v78[1]))
      goto LABEL_4;
    goto LABEL_30;
  }
  if (v14 - 55 <= 1)
  {
    v62 = a2;
    *(_QWORD *)&v63 = a1;
    return (sub_22F0519E8((uint64_t *)&v62, (unsigned __int8 *)a3) & 1) != 0;
  }
  if (v14 == 9)
    goto LABEL_17;
  if (v14 != 44)
  {
    if (v14 != 11 || ((v14 >> 19) & 0x1FE) - 166 >= 0x14)
      goto LABEL_20;
LABEL_17:
    v62 = a2;
    *(_QWORD *)&v63 = v10;
    return (sub_22F0175A4(&v62, a3) & 1) != 0;
  }
  a1 = sub_22F114198(*(_QWORD *)(v13 + 24));
  if ((*(_BYTE *)(a1 + 74) & 1) != 0 || *(_QWORD *)(a1 + 128) > 7uLL)
    goto LABEL_17;
  v12 = *(_QWORD *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 8);
  v14 = *(_DWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 16);
LABEL_20:
  if ((v14 & 0xFE) == 0x28
    || (v14 <= 0x27u ? (v17 = ((1 << v14) & 0x8100000400) == 0) : (v17 = 1),
        (v18 = v14 & 0xFF800FF, v17) ? (v19 = v18 == 114294795) : (v19 = 1),
        v19))
  {
    v62 = 0;
    v63 = 0uLL;
    LODWORD(v64[0]) = -1;
    v65[0] = 0;
    v65[1] = &v66[1];
    v66[0] = 0x800000000;
    v70 = 0;
    v71 = 0;
    v79 = (unint64_t)a2;
    *(_QWORD *)&v80 = &v62;
    BYTE8(v80) = 0;
    if (sub_22F00C45C((uint64_t *)&v79, (unsigned __int8 *)a3, a3, a4, a5, a6, a7, a8))
    {
LABEL_4:
      sub_22F00676C((uint64_t)&v62, v10);
      v15 = v65[1];
      if (v65[1] == &v66[1])
        return 1;
LABEL_5:
      free(v15);
      return 1;
    }
LABEL_30:
    v20 = v65[1];
    if (v65[1] != &v66[1])
LABEL_31:
      free(v20);
    return 0;
  }
  v22 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_DWORD *)(v22 + 16);
  v24 = v23;
  if (v22)
    v25 = v23 == 11;
  else
    v25 = 0;
  if (v25 && ((v23 >> 19) & 0x1FE) - 210 <= 7)
  {
    v26 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v62, 0.0);
    v27 = llvm::APFloatBase::IEEEdouble(v26);
    MEMORY[0x23489F4E0](&v80, &v62, v27);
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v62);
    v62 = a2;
    *(_QWORD *)&v63 = &v79;
    v28 = (llvm::APFloatBase *)sub_22F032714((uint64_t *)&v62, (unsigned __int8 *)a3);
    if ((_DWORD)v28)
    {
      v29 = v80;
      v30 = llvm::APFloatBase::PPCDoubleDouble(v28);
      if (v30 == v29)
        MEMORY[0x23489F2A0](&v60, &v80);
      else
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v60, (const llvm::detail::IEEEFloat *)&v80);
      sub_22E7B656C(&v62, (uint64_t)&v59);
      if (*(_DWORD *)v10 >= 2u)
        sub_22EF53BC0((uint64_t *)v10);
      *(_DWORD *)v10 = (_DWORD)v62;
      *(_OWORD *)(v10 + 8) = v63;
      *(_OWORD *)(v10 + 24) = *(_OWORD *)v64;
      *(_OWORD *)(v10 + 40) = *(_OWORD *)v65;
      *(_OWORD *)(v10 + 56) = *(_OWORD *)v66;
      LODWORD(v62) = 0;
      if (v30 == v60)
        sub_22E463170((llvm::APFloatBase *)v61);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v60);
      if (v30 == (_QWORD)v80)
        sub_22E463170((llvm::APFloatBase *)((char *)&v80 + 8));
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v80);
      return 1;
    }
    v36 = v80;
    if (llvm::APFloatBase::PPCDoubleDouble(v28) == v36)
      sub_22E463170((llvm::APFloatBase *)((char *)&v80 + 8));
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v80);
    return 0;
  }
  if (v23 != 11)
  {
    if (v23 == 31)
    {
      v79 = 0;
      *(_QWORD *)&v80 = &v81;
      *((_QWORD *)&v80 + 1) = 0x400000000;
      v62 = a2;
      *(_QWORD *)&v63 = &v79;
      v16 = sub_22F025158((uint64_t)&v62, (unsigned __int8 *)a3);
      if ((_DWORD)v16)
      {
        LODWORD(v62) = 0;
        sub_22F364544((uint64_t)&v62, v79 & 0xFFFFFFFFFFFFFFF8, (v79 >> 2) & 1, v80, DWORD2(v80));
        if (*(_DWORD *)v10 >= 2u)
          sub_22EF53BC0((uint64_t *)v10);
        *(_DWORD *)v10 = (_DWORD)v62;
        *(_OWORD *)(v10 + 8) = v63;
        *(_OWORD *)(v10 + 24) = *(_OWORD *)v64;
        *(_OWORD *)(v10 + 40) = *(_OWORD *)v65;
        *(_OWORD *)(v10 + 56) = *(_OWORD *)v66;
      }
      if ((__int128 *)v80 != &v81)
        free((void *)v80);
      return v16;
    }
    if (v23 == 12)
    {
      DWORD2(v63) = 1;
      *(_QWORD *)&v63 = 0;
      BYTE12(v63) = 0;
      LODWORD(v64[1]) = 1;
      v64[0] = 0;
      BYTE4(v64[1]) = 0;
      v31 = llvm::APFloatBase::Bogus((llvm::APFloatBase *)a1);
      sub_22E99C474((llvm::APFloatBase *)&v65[1], v31);
      sub_22E99C474((llvm::APFloatBase *)&v68, v31);
      v79 = (unint64_t)a2;
      *(_QWORD *)&v80 = &v62;
      v32 = (llvm::APFloatBase *)sub_22F01E534((uint64_t *)&v79, (unsigned __int8 *)a3);
      if ((_DWORD)v32)
      {
        if ((_BYTE)v62)
        {
          LODWORD(v77) = DWORD2(v63);
          if (DWORD2(v63) > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v76, (const llvm::APInt *)&v63);
          else
            v76 = (llvm::APFloatBase *)v63;
          BYTE4(v77) = BYTE12(v63);
          LODWORD(v74) = v64[1];
          if (LODWORD(v64[1]) > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v73, (const llvm::APInt *)v64);
          else
            v73 = (llvm::APFloatBase *)v64[0];
          BYTE4(v74) = BYTE4(v64[1]);
          v57 = (llvm::APFloatBase *)sub_22F2C4364((uint64_t)&v79, (uint64_t *)&v76, (uint64_t *)&v73);
          if (*(_DWORD *)v10 >= 2u)
            sub_22EF53BC0((uint64_t *)v10);
          *(_DWORD *)v10 = v79;
          *(_OWORD *)(v10 + 8) = v80;
          *(_OWORD *)(v10 + 24) = v81;
          *(_OWORD *)(v10 + 40) = v82;
          *(_OWORD *)(v10 + 56) = v83;
          LODWORD(v79) = 0;
          if (v74 >= 0x41)
          {
            v57 = v73;
            if (v73)
              v57 = (llvm::APFloatBase *)MEMORY[0x2348A0E84](v73, 0x1000C8000313F17);
          }
          if (v77 >= 0x41)
          {
            v57 = v76;
            if (v76)
              v57 = (llvm::APFloatBase *)MEMORY[0x2348A0E84](v76, 0x1000C8000313F17);
          }
          v50 = (void *)llvm::APFloatBase::PPCDoubleDouble(v57);
        }
        else
        {
          v49 = v65[1];
          v50 = (void *)llvm::APFloatBase::PPCDoubleDouble(v32);
          if (v50 == v49)
            MEMORY[0x23489F2A0](&v77, &v65[1]);
          else
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v77, (const llvm::detail::IEEEFloat *)&v65[1]);
          if (v50 == v68)
            MEMORY[0x23489F2A0](&v74, &v68);
          else
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v74, (const llvm::detail::IEEEFloat *)&v68);
          sub_22F2C44F8((uint64_t)&v79, (uint64_t)&v76, (uint64_t)&v73);
          if (*(_DWORD *)v10 >= 2u)
            sub_22EF53BC0((uint64_t *)v10);
          *(_DWORD *)v10 = v79;
          *(_OWORD *)(v10 + 8) = v80;
          *(_OWORD *)(v10 + 24) = v81;
          *(_OWORD *)(v10 + 40) = v82;
          *(_OWORD *)(v10 + 56) = v83;
          LODWORD(v79) = 0;
          if (v50 == v74)
            sub_22E463170((llvm::APFloatBase *)v75);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v74);
          if (v50 == v77)
            sub_22E463170((llvm::APFloatBase *)v78);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v77);
        }
        if (v50 == v68)
          sub_22E463170((llvm::APFloatBase *)v69);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v68);
        if (v50 == v65[1])
          sub_22E463170((llvm::APFloatBase *)v66);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v65[1]);
        if (LODWORD(v64[1]) >= 0x41 && v64[0])
          MEMORY[0x2348A0E84](v64[0], 0x1000C8000313F17);
        if (DWORD2(v63) >= 0x41 && (_QWORD)v63)
          MEMORY[0x2348A0E84](v63, 0x1000C8000313F17);
        return 1;
      }
      v33 = (uint64_t)v68;
      v34 = (void *)llvm::APFloatBase::PPCDoubleDouble(v32);
      if (v34 == (void *)v33)
        sub_22E463170((llvm::APFloatBase *)v69);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v68);
      if (v34 == v65[1])
        sub_22E463170((llvm::APFloatBase *)v66);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v65[1]);
      if (LODWORD(v64[1]) >= 0x41 && v64[0])
        MEMORY[0x2348A0E84](v64[0], 0x1000C8000313F17);
      if (DWORD2(v63) >= 0x41 && (_QWORD)v63)
        MEMORY[0x2348A0E84](v63, 0x1000C8000313F17);
      return 0;
    }
    if ((v23 & 0xFE) - 2 >= 4)
    {
      if (v23 == 45)
      {
        v62 = 0;
        v63 = 0uLL;
        LODWORD(v64[0]) = -1;
        v65[0] = 0;
        v65[1] = &v66[1];
        v66[0] = 0x800000000;
        v70 = 0;
        v71 = 0;
        v35 = sub_22F044E2C(a2[3], a3, v11, 1u, (uint64_t)&v62);
        v79 = (unint64_t)a2;
        *(_QWORD *)&v80 = &v62;
        *((_QWORD *)&v80 + 1) = v35;
        if (!sub_22F048114((uint64_t *)&v79, (unsigned __int8 *)a3))
          goto LABEL_72;
        goto LABEL_78;
      }
      v37 = v23 & 0xFF800FF;
      if (v37 == 86507531)
      {
LABEL_87:
        if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a2 + 96))(a2) + 2000) + 1) & 2) == 0)
        {
          sub_22EFF605C(a3);
          v39 = (unsigned __int8 **)sub_22F072D74((uint64_t)a2, v38, 2251, 0);
          if (v39)
          {
            v40 = v39;
            v41 = *(_QWORD *)(a3 + 8);
            v42 = *v39;
            if (!v42)
            {
              v42 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v40[1]);
              *v40 = v42;
            }
            v42[*v42 + 1] = 9;
            v43 = *v40;
            v44 = **v40;
            *v43 = v44 + 1;
            *(_QWORD *)&v43[8 * v44 + 16] = v41;
          }
        }
        v62 = a2;
        return (sub_22F055DDC((uint64_t *)&v62, (unsigned __int8 *)a3) & 1) != 0;
      }
      if (v24 == 6)
      {
        v45 = sub_22F110438(&v58);
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16) != 45
          && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) & 0xFEu)
           - 2 > 3)
        {
          v62 = a2;
          *(_QWORD *)&v63 = 0;
          *((_QWORD *)&v63 + 1) = v10;
          if ((sub_22F04EF10((uint64_t *)&v62, (unsigned __int8 *)a3) & 1) != 0)
            return 1;
        }
        else
        {
          v62 = 0;
          v63 = 0uLL;
          LODWORD(v64[0]) = -1;
          v65[0] = 0;
          v65[1] = &v66[1];
          v66[0] = 0x800000000;
          v70 = 0;
          v71 = 0;
          v47 = sub_22F044E2C(a2[3], a3, v45, 1u, (uint64_t)&v62);
          v79 = (unint64_t)a2;
          *(_QWORD *)&v80 = &v62;
          *((_QWORD *)&v80 + 1) = v47;
          v48 = sub_22F04EF10((uint64_t *)&v79, (unsigned __int8 *)a3);
          if (v65[1] != &v66[1])
            free(v65[1]);
          if ((v48 & 1) != 0)
            return 1;
        }
        return 0;
      }
      goto LABEL_103;
    }
LABEL_77:
    v62 = 0;
    v63 = 0uLL;
    LODWORD(v64[0]) = -1;
    v65[0] = 0;
    v65[1] = &v66[1];
    v66[0] = 0x800000000;
    v70 = 0;
    v71 = 0;
    v35 = sub_22F044E2C(a2[3], a3, v11, 1u, (uint64_t)&v62);
    v79 = (unint64_t)a2;
    *(_QWORD *)&v80 = &v62;
    *((_QWORD *)&v80 + 1) = v35;
    if (!sub_22F04530C((uint64_t *)&v79, (unsigned __int8 *)a3))
    {
LABEL_72:
      v20 = v65[1];
      if (v65[1] == &v66[1])
        return 0;
      goto LABEL_31;
    }
LABEL_78:
    if (v35 != v10)
    {
      sub_22EF530AC((uint64_t)&v79, v35);
      if (*(_DWORD *)v10 >= 2u)
        sub_22EF53BC0((uint64_t *)v10);
      *(_DWORD *)v10 = v79;
      *(_OWORD *)(v10 + 8) = v80;
      *(_OWORD *)(v10 + 24) = v81;
      *(_OWORD *)(v10 + 40) = v82;
      *(_OWORD *)(v10 + 56) = v83;
    }
    v15 = v65[1];
    if (v65[1] == &v66[1])
      return 1;
    goto LABEL_5;
  }
  if (((v23 >> 19) & 0x1FE) - 186 <= 0x17)
  {
    v62 = a2;
    *(_QWORD *)&v63 = v10;
    return (sub_22F036288((uint64_t *)&v62, (unsigned __int8 *)a3) & 1) != 0;
  }
  if ((v23 & 0xFE) - 2 <= 3)
    goto LABEL_77;
  v37 = v23 & 0xFF800FF;
  if (v37 == 86507531)
    goto LABEL_87;
LABEL_103:
  if (v37 == 127401995)
  {
    v62 = a2;
    *(_QWORD *)&v63 = v10;
    return (sub_22F0582AC((uint64_t *)&v62, (unsigned __int8 *)a3) & 1) != 0;
  }
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a2 + 96))(a2) + 2000) + 1) & 2) == 0)
  {
    sub_22F072CEC((uint64_t)a2, a3, 103, 0);
    return 0;
  }
  v51 = (unsigned __int8 **)sub_22F072CEC((uint64_t)a2, a3, 2251, 0);
  if (!v51)
    return 0;
  v52 = v51;
  v53 = *(_QWORD *)(a3 + 8);
  v54 = *v51;
  if (!v54)
  {
    v54 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v52[1]);
    *v52 = v54;
  }
  v16 = 0;
  v54[*v54 + 1] = 9;
  v55 = *v52;
  v56 = **v52;
  *v55 = v56 + 1;
  *(_QWORD *)&v55[8 * v56 + 16] = v53;
  return v16;
}

uint64_t sub_22F00AA08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = &off_24FAC5960;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  --*(_DWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 24) = v3;
  llvm::deallocate_buffer(*(llvm **)(a1 + 128), (void *)(16 * *(unsigned int *)(a1 + 144)));
  v4 = *(void **)(a1 + 96);
  if (v4 != (void *)(a1 + 112))
    free(v4);
  sub_22F05A800(a1 + 64, *(_QWORD **)(a1 + 72));
  return a1;
}

uint64_t sub_22F00AA7C(unint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int i;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  __int128 *v31;
  unsigned __int8 *v32;
  unsigned int v34;
  unint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38[4];
  __int128 v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  _BYTE v46[9];
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t (**v50)();
  uint64_t v51;
  __int16 *v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  char v56;
  _QWORD v57[2];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 *v61;
  __int128 v62;
  uint64_t v63;
  _DWORD *v64;
  uint64_t v65;
  _DWORD v66[4];
  __int128 v67;
  int v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  int v73;
  __int128 v74;
  uint64_t v75;
  int v76;
  __int128 *v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  char v82;
  int v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if ((sub_22EFC7ADC(a1 + 72) & 1) == 0)
  {
    v36 = 0;
    v37 = a2;
    v5 = *(_DWORD *)(a1 + 28);
    if (!a1 || (v6 = a1, (*(_DWORD *)(a1 + 28) & 0x7F) != 0x53))
    {
      v7 = *(_QWORD *)(a1 + 16);
      v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      if ((v7 & 4) != 0)
        v8 = *(_QWORD *)v8;
      for (i = *(_WORD *)(v8 + 8) & 0x7F; i != 83; i = *(_WORD *)(v8 + 8) & 0x7F)
      {
        v10 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v10 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_18;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_17;
          if (i == 16)
            goto LABEL_11;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_24;
          if (i == 24)
          {
LABEL_11:
            v10 = -48;
          }
          else
          {
LABEL_17:
            if (i != 70)
            {
LABEL_18:
              v11 = i - 52;
              if ((i - 33) >= 5)
                v12 = -48;
              else
                v12 = -64;
              if (v11 >= 6)
                v10 = v12;
              else
                v10 = -72;
              goto LABEL_24;
            }
            v10 = -64;
          }
        }
LABEL_24:
        v13 = *(_QWORD *)(v8 + v10 + 16);
        v8 = v13 & 0xFFFFFFFFFFFFFFF8;
        if ((v13 & 4) != 0)
          v8 = *(_QWORD *)v8;
      }
      v6 = v8 - 40;
    }
    v14 = *(_QWORD *)(v6 + 88);
    v50 = &off_24FAC58D8;
    v51 = v14;
    v15 = *(_QWORD *)(v14 + 2000);
    v16 = *(_BYTE *)(v15 + 180);
    v55 = *(_DWORD *)(v15 + 176);
    v56 = v16 & 1;
    v57[0] = &off_24FAC5960;
    v57[1] = &v50;
    v58 = 0u;
    v59 = 0u;
    v60 = 0u;
    v62 = 0u;
    v61 = &v62;
    v63 = 0x100000000;
    v64 = v66;
    v65 = 0x200000001;
    v66[0] = 1;
    v66[2] = 1;
    v68 = 0;
    v67 = 0u;
    v52 = &v36;
    v53 = v57;
    v54 = 0x200000001;
    v69 = &v71;
    v70 = 0x1000000000;
    v74 = 0u;
    v75 = 0;
    v76 = 0;
    v78 = 0u;
    v73 = 0;
    v72 = 0u;
    v77 = &v78;
    v79 = 0;
    v80 = -1;
    v81 = 16842752;
    v82 = 0;
    v83 = 0;
    if ((v16 & 1) != 0)
    {
      v22 = sub_22F3654C0(v14);
      sub_22F066154((uint64_t)v22, (uint64_t)&v50, a1);
      v23 = *(_DWORD *)(a2 + 8);
LABEL_77:
      v4 = v23 == 0;
      sub_22F0052A4((uint64_t)&v50);
      return v4;
    }
    if ((v5 & 0x7Eu) - 54 >= 4)
      v17 = 0;
    else
      v17 = a1;
    if (!v17)
    {
      v20 = 0;
      v21 = -1;
LABEL_59:
      v39 = 0uLL;
      v40 = 0;
      v41 = v21;
      v43 = 0;
      v44 = v46;
      v45 = 0x800000000;
      v47 = 0;
      v48 = 0;
      if (v20)
        v27 = sub_22EF6477C(v14, v20);
      else
        v27 = *(_QWORD *)(v14 + 16480);
      LOBYTE(v34) = -77;
      if (byte_255E04EB3)
        sub_22F3F189C(179);
      v35 = v27;
      v34 = v34 & 0xFFFC00FF | (((*(_DWORD *)(*(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF0) + 16) >> 9) & 1) << 14);
      v28 = *((unsigned int *)v53 + 23);
      *(_QWORD *)&v39 = (char *)&v34 + 1;
      *((_QWORD *)&v39 + 1) = v28;
      v40 = 0;
      v49 &= ~2u;
      v38[0] = (uint64_t)&v34 + 1;
      v38[1] = v28;
      v29 = sub_22EF52AD4((unint64_t *)v38);
      v41 = 0;
      v42 = 0;
      v43 = v29;
      LODWORD(v45) = 0;
      v49 &= 0xF2u;
      v47 = 0;
      v48 = 0;
      LODWORD(v38[0]) = 0;
      if ((*(_DWORD *)(a1 + 28) & 0x7F) == 0x37)
      {
        v72 = v39;
        v73 = 1;
        *(_QWORD *)&v74 = v38;
        sub_22F00B02C((uint64_t)&v34, &v39, 0, 0, a1, (uint64_t)&v50, (uint64_t)v38);
      }
      else
      {
        v30 = *(_DWORD *)(a1 + 24);
        if (!v17
          || (*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v17 + 32))(v17) + 80) & 0xE000) == 0x4000
          || (*(_QWORD *)(v17 + 40) & 7) == 6
          && (*(_DWORD *)(*(_QWORD *)(v17 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) <= 3)
        {
          v31 = 0;
        }
        else
        {
          v31 = &v39;
        }
        v32 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)a1 + 64))(a1);
        sub_22F00B12C(v30, a1, (uint64_t)v31, 0, 0, 0, 0, v32, (uint64_t *)&v50, (uint64_t)v38, 0);
      }
      v23 = *(_DWORD *)(a2 + 8);
      if (LODWORD(v38[0]) >= 2)
        sub_22EF53BC0(v38);
      if (v44 != v46)
        free(v44);
      goto LABEL_77;
    }
    v18 = *(_WORD *)(v17 + 80) & 0x7F;
    v19 = -40;
    if (v18 > 0x46)
    {
      switch(v18)
      {
        case 'S':
          goto LABEL_53;
        case 'G':
          v19 = -56;
          goto LABEL_53;
        case 'Q':
          goto LABEL_53;
      }
    }
    else
    {
      if (v18 <= 0x18)
      {
        if (v18 == 16)
          goto LABEL_39;
        if (((1 << v18) & 0x1066) != 0)
          goto LABEL_53;
        if (v18 == 24)
        {
LABEL_39:
          v19 = -48;
LABEL_53:
          v24 = *(_QWORD *)(v17 + 72 + v19 + 16);
          v25 = (_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF8);
          if ((v24 & 4) != 0)
            v25 = (_QWORD *)*v25;
          if (v25)
            v26 = v25 - 8;
          else
            v26 = 0;
          v20 = (*(uint64_t (**)(_QWORD *))(*v26 + 32))(v26);
          v21 = v41 | 1;
          v14 = v51;
          goto LABEL_59;
        }
      }
      if (v18 == 70)
      {
LABEL_51:
        v19 = -64;
        goto LABEL_53;
      }
    }
    if (v18 - 52 < 6)
    {
      v19 = -72;
      goto LABEL_53;
    }
    if (v18 - 33 < 5)
      goto LABEL_51;
    goto LABEL_39;
  }
  return 1;
}

uint64_t sub_22F00B02C(uint64_t a1, __int128 *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  v14 = *(_DWORD *)(a6 + 216);
  sub_22F0270D4(*(_DWORD **)(a6 + 24));
  v15 = *(_QWORD *)(a6 + 24);
  v16 = *(unsigned int *)(v15 + 92);
  v17 = (*(_DWORD *)(v15 + 120) + 1);
  *(_DWORD *)(v15 + 120) = v17;
  v18 = v16 | (v17 << 32);
  if (sub_22F0279B4(a3, a4, a5, v18, (_BYTE **)a6, a5, 0)
    && sub_22F04C34C(a1, a2, a5, v18, a5, a6, a7))
  {
    result = sub_22F02D738(a6, 1, v14);
  }
  else
  {
    if (v14 != -1)
      sub_22F02D738(a6, 0, v14);
    result = 0;
  }
  --*(_DWORD *)(*(_QWORD *)(a6 + 24) + 104);
  return result;
}

BOOL sub_22F00B12C(int a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 *a8, uint64_t *a9, uint64_t a10, uint64_t a11)
{
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60[9];
  _QWORD v61[9];
  _QWORD v62[2];
  int v63;
  int v64;
  _DWORD *v65;
  uint64_t v66;
  _DWORD v67[4];
  uint64_t v68[2];
  int v69;
  unint64_t v70[2];

  v70[1] = *MEMORY[0x24BDAC8D0];
  if (sub_22F029AD8(a9, a1))
  {
    v61[0] = &off_24FAC5960;
    v61[1] = a9;
    v61[2] = a9[3];
    v61[3] = a2;
    v61[4] = a3;
    v61[5] = a6;
    v61[6] = a7;
    v61[7] = 0;
    v62[0] = 0;
    v62[1] = 0;
    v61[8] = v62;
    v19 = *((_DWORD *)a9 + 8);
    v18 = *((_DWORD *)a9 + 9);
    v63 = a1;
    v64 = v18;
    v65 = v67;
    v66 = 0x200000001;
    v67[0] = 1;
    v67[2] = 1;
    v68[0] = 0;
    v68[1] = 0;
    v69 = 0;
    a9[3] = (uint64_t)v61;
    *((_DWORD *)a9 + 8) = v19 + 1;
    *((_DWORD *)a9 + 9) = v18 + 1;
    if (!a2 || (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
      goto LABEL_33;
    v20 = *(_QWORD *)(a2 + 80);
    if ((v20 & 0x2000000) == 0)
    {
LABEL_5:
      v21 = a2 + 72;
      v22 = v20 & 0x7F;
      v23 = -40;
      if (v22 > 70)
      {
        switch(v22)
        {
          case 'S':
            goto LABEL_29;
          case 'G':
            v23 = -56;
            goto LABEL_29;
          case 'Q':
LABEL_29:
            v28 = *(_QWORD *)(v21 + v23 + 16);
            v29 = (_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF8);
            if ((v28 & 4) != 0)
            {
              v29 = (_QWORD *)*v29;
              if (!v29)
                goto LABEL_33;
            }
            else if (!v29)
            {
              goto LABEL_33;
            }
            v30 = v29[8];
            if (!v30
              || ((*(unsigned __int16 *)(v30 + 8) | (*(unsigned __int8 *)(v30 + 10) << 16)) & 0x100000) == 0
              || (*(_QWORD *)(a2 + 40) & 7) != 6
              || *(_DWORD *)(*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8) != 42
              || ((*(uint64_t (**)(uint64_t *))(*a9 + 24))(a9) & 1) != 0)
            {
LABEL_33:
              v60[0] = a10;
              v60[1] = a11;
              v31 = sub_22F029BF0(v60, (uint64_t)a9, a8, 0);
              if (v31 == 2)
              {
                v32 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
                if (!v32 || *(unsigned __int8 *)(v32 + 16) - 27 <= 0xFFFFFFFD)
                  v32 = sub_22F10CF48(v32);
                v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                if (v33)
                  v34 = (*(_DWORD *)(v33 + 16) & 0xFF800FF) == 86507531;
                else
                  v34 = 0;
                if (v34)
                {
                  v24 = 1;
                  goto LABEL_92;
                }
                v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
                sub_22F072828((uint64_t)a9, SHIDWORD(v35), 2249, 0, 0);
              }
              v24 = v31 == 1;
LABEL_92:
              sub_22F00AA08((uint64_t)v61);
              return v24;
            }
            v55 = *(_WORD *)(a2 + 80) & 0x7F;
            v56 = -40;
            if (v55 > 0x46)
            {
              switch(v55)
              {
                case 'S':
                  goto LABEL_136;
                case 'G':
                  v56 = -56;
                  goto LABEL_136;
                case 'Q':
                  goto LABEL_136;
              }
            }
            else
            {
              if (v55 <= 0x18)
              {
                if (v55 == 16)
                  goto LABEL_118;
                if (((1 << v55) & 0x1066) != 0)
                  goto LABEL_136;
                if (v55 == 24)
                {
LABEL_118:
                  v56 = -48;
LABEL_136:
                  v57 = *(_QWORD *)(v21 + v56 + 16);
                  v58 = (_QWORD *)(v57 & 0xFFFFFFFFFFFFFFF8);
                  if ((v57 & 4) != 0)
                    v58 = (_QWORD *)*v58;
                  if (v58)
                    v59 = (uint64_t)(v58 - 8);
                  else
                    v59 = 0;
                  sub_22EFD4A20(v59, v68, v70);
                  goto LABEL_33;
                }
              }
              if (v55 == 70)
              {
LABEL_134:
                v56 = -64;
                goto LABEL_136;
              }
            }
            if (v55 - 52 < 6)
            {
              v56 = -72;
              goto LABEL_136;
            }
            if (v55 - 33 < 5)
              goto LABEL_134;
            goto LABEL_118;
        }
      }
      else
      {
        if (v22 <= 0x18)
        {
          if (v22 == 16)
          {
LABEL_8:
            v23 = -48;
            goto LABEL_29;
          }
          if (((1 << v22) & 0x1066) != 0)
            goto LABEL_29;
          if (v22 == 24)
            goto LABEL_8;
        }
        if (v22 == 70)
        {
LABEL_27:
          v23 = -64;
          goto LABEL_29;
        }
      }
      if ((v22 - 52) >= 6)
      {
        if ((v22 - 33) >= 5)
          goto LABEL_8;
        goto LABEL_27;
      }
      v23 = -72;
      goto LABEL_29;
    }
    v25 = a2 + 72;
    v26 = v20 & 0x7F;
    v27 = -40;
    if (v26 > 0x46)
    {
      if (v26 == 83)
        goto LABEL_54;
      if (v26 == 71)
      {
        v27 = -56;
        goto LABEL_54;
      }
      if (v26 != 81)
        goto LABEL_49;
    }
    else
    {
      if (v26 > 0x18)
        goto LABEL_48;
      if (v26 == 16)
      {
LABEL_13:
        v27 = -48;
        goto LABEL_54;
      }
      if (((1 << v26) & 0x1066) == 0)
      {
        if (v26 == 24)
          goto LABEL_13;
LABEL_48:
        if (v26 == 70)
        {
          v27 = -64;
          goto LABEL_54;
        }
LABEL_49:
        v36 = -48;
        if ((v26 - 33) < 5)
          v36 = -64;
        if ((v26 - 52) >= 6)
          v27 = v36;
        else
          v27 = -72;
      }
    }
LABEL_54:
    v37 = *(_QWORD *)(v25 + v27 + 16);
    v38 = (_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF8);
    if ((v37 & 4) != 0)
      v38 = (_QWORD *)*v38;
    if (v38)
      v39 = v38 - 8;
    else
      v39 = 0;
    if ((v39[9] & 0xE000) == 0x4000)
      goto LABEL_60;
    if ((v20 & 0x800000) == 0)
      goto LABEL_5;
    v41 = -40;
    if (v26 > 70)
    {
      switch(v26)
      {
        case 'S':
          goto LABEL_105;
        case 'G':
          v41 = -56;
          goto LABEL_105;
        case 'Q':
          goto LABEL_105;
      }
    }
    else
    {
      if (v26 <= 0x18)
      {
        if (v26 == 16)
          goto LABEL_68;
        if (((1 << v26) & 0x1066) != 0)
          goto LABEL_105;
        if (v26 == 24)
        {
LABEL_68:
          v41 = -48;
LABEL_105:
          v51 = *(_QWORD *)(v25 + v41 + 16);
          v52 = (_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF8);
          if ((v51 & 4) != 0)
            v52 = (_QWORD *)*v52;
          if (v52)
            v53 = (uint64_t)(v52 - 8);
          else
            v53 = 0;
          v54 = sub_22F01D73C(v53);
          LOWORD(v20) = *(_WORD *)(a2 + 80);
          if (!v54)
            goto LABEL_5;
          v26 = v20 & 0x7F;
LABEL_60:
          LODWORD(v60[0]) = 0;
          v40 = -40;
          if (v26 > 70)
          {
            if (v26 != 83)
            {
              if (v26 == 71)
              {
                v40 = -56;
                goto LABEL_81;
              }
              if (v26 == 81)
                goto LABEL_81;
LABEL_76:
              v42 = v26 - 52;
              v43 = (v26 - 33) >= 5;
              v44 = -48;
              if (!v43)
                v44 = -64;
              if (v42 >= 6)
                v40 = v44;
              else
                v40 = -72;
            }
          }
          else
          {
            if (v26 > 0x18)
              goto LABEL_75;
            if (v26 != 16)
            {
              if (((1 << v26) & 0x1066) != 0)
                goto LABEL_81;
              if (v26 != 24)
              {
LABEL_75:
                if (v26 == 70)
                {
                  v40 = -64;
                  goto LABEL_81;
                }
                goto LABEL_76;
              }
            }
            v40 = -48;
          }
LABEL_81:
          v45 = *(_QWORD *)(v25 + v40 + 16);
          v46 = (_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF8);
          if ((v45 & 4) != 0)
            v46 = (_QWORD *)*v46;
          if (v46)
            v47 = v46 - 8;
          else
            v47 = 0;
          if (sub_22F04D514(a9, **(_QWORD **)(a2 + 120), *a4, (uint64_t)v60, (v47[9] & 0xE000) == 0x4000)
            && (v48 = *a4, v49 = sub_22EFD7558(a2), sub_22F014A60((uint64_t)a9, v48, a3, v49, (uint64_t)v60)))
          {
            sub_22F00676C(a3, a10);
            v24 = 1;
          }
          else
          {
            v24 = 0;
          }
          if (LODWORD(v60[0]) >= 2)
            sub_22EF53BC0(v60);
          goto LABEL_92;
        }
      }
      if (v26 == 70)
      {
LABEL_103:
        v41 = -64;
        goto LABEL_105;
      }
    }
    if ((v26 - 52) < 6)
    {
      v41 = -72;
      goto LABEL_105;
    }
    if ((v26 - 33) < 5)
      goto LABEL_103;
    goto LABEL_68;
  }
  return 0;
}

BOOL sub_22F00B7D0(unint64_t a1, unint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int i;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  __int16 v22;
  uint64_t v23;
  uint64_t v24[9];
  _QWORD v25[4];
  __int128 v26;
  __int128 v27;
  _QWORD *v28;
  _QWORD v29[5];
  _DWORD v30[4];
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34[5];
  int v35;
  char v36;
  _QWORD v37[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 *v41;
  __int128 v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  _DWORD v46[4];
  __int128 v47;
  int v48;
  _OWORD *v49;
  uint64_t v50;
  _OWORD v51[33];
  int v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  __int128 *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char v61;
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v22 = 0;
  v23 = a3;
  if (!a2 || (v9 = a2, (*(_DWORD *)(a2 + 28) & 0x7F) != 0x53))
  {
    v10 = *(_QWORD *)(a2 + 16);
    v11 = v10 & 0xFFFFFFFFFFFFFFF8;
    if ((v10 & 4) != 0)
      v11 = *(_QWORD *)v11;
    for (i = *(_WORD *)(v11 + 8) & 0x7F; i != 83; i = *(_WORD *)(v11 + 8) & 0x7F)
    {
      v13 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v13 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_20;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_19;
        if (i == 16)
          goto LABEL_9;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_10;
        if (i == 24)
        {
LABEL_9:
          v13 = -48;
        }
        else
        {
LABEL_19:
          if (i != 70)
          {
LABEL_20:
            v15 = i - 52;
            if ((i - 33) >= 5)
              v16 = -48;
            else
              v16 = -64;
            if (v15 >= 6)
              v13 = v16;
            else
              v13 = -72;
            goto LABEL_10;
          }
          v13 = -64;
        }
      }
LABEL_10:
      v14 = *(_QWORD *)(v11 + v13 + 16);
      v11 = v14 & 0xFFFFFFFFFFFFFFF8;
      if ((v14 & 4) != 0)
        v11 = *(_QWORD *)v11;
    }
    v9 = v11 - 40;
  }
  v17 = *(_QWORD *)(v9 + 88);
  v34[0] = (uint64_t)&off_24FAC58D8;
  v34[1] = v17;
  v18 = *(_QWORD *)(v17 + 2000);
  v19 = *(_BYTE *)(v18 + 180);
  v35 = *(_DWORD *)(v18 + 176);
  v36 = v19 & 1;
  v37[0] = &off_24FAC5960;
  v37[1] = v34;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v42 = 0u;
  v41 = &v42;
  v43 = 0x100000000;
  v44 = v46;
  v45 = 0x200000001;
  v46[0] = 1;
  v46[2] = 1;
  v48 = 0;
  v47 = 0u;
  v49 = v51;
  v50 = 0x1000000000;
  v53 = 0u;
  v54 = 0;
  v55 = 0;
  v57 = 0u;
  v52 = 0;
  v51[32] = 0u;
  v56 = &v57;
  v58 = 0;
  v59 = -1;
  v60 = 16842752;
  v61 = 0;
  v62 = 1;
  v25[0] = &off_24FAC5960;
  v25[1] = v34;
  v25[2] = v37;
  v25[3] = a2;
  v26 = 0u;
  v27 = 0u;
  v29[0] = 0;
  v29[1] = 0;
  v28 = v29;
  v29[2] = 0x200000000;
  v29[3] = v30;
  v29[4] = 0x200000001;
  v30[0] = 1;
  v30[2] = 1;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34[2] = (uint64_t)&v22;
  v34[3] = (uint64_t)v25;
  v34[4] = 0x300000002;
  LODWORD(v24[0]) = 0;
  sub_22F009DC4((uint64_t)v24, v34, a1, a4, a5, a6, a7, a8);
  v20 = *(_DWORD *)(a3 + 8);
  if (LODWORD(v24[0]) >= 2)
    sub_22EF53BC0(v24);
  sub_22F00AA08((uint64_t)v25);
  sub_22F0052A4((uint64_t)v34);
  return v20 == 0;
}

uint64_t sub_22F00BAC0(uint64_t a1, int a2, uint64_t a3, _QWORD *a4, int a5, int a6, int a7, int a8)
{
  uint64_t v12;
  int v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  int v24;
  int v25;
  unsigned int v26;
  __int128 v27;
  unsigned __int8 *v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  unint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD **v68;
  unsigned int v69;
  _QWORD *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  _BOOL4 v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  __int128 v86;
  uint64_t v87;
  int v88;
  uint64_t v89[2];
  uint64_t v90[2];
  uint64_t v91;
  uint64_t v92[2];
  void *__p;
  uint64_t v94;
  unint64_t v95;
  int v96[2];
  void *v97;
  uint64_t v98;
  _BYTE v99[64];
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  v92[0] = 0;
  v92[1] = 0;
  __p = 0;
  LODWORD(v94) = -1;
  *(_QWORD *)v96 = 0;
  v97 = v99;
  v98 = 0x800000000;
  v100 = 0;
  v101 = 0;
  v12 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)v89 = *(_OWORD *)v12;
  v13 = *(_DWORD *)(a3 + 820);
  *(_QWORD *)(v12 + 8) = 0;
  *(_DWORD *)(a3 + 820) = *(_DWORD *)(a3 + 32) + 1;
  v14 = *(_DWORD *)(a3 + 840);
  *(_DWORD *)(a3 + 840) = 3;
  if ((*(_BYTE *)(a1 + 1) & 3) != 0)
  {
    LODWORD(v90[0]) = 0;
    if (!sub_22F007F4C(a3, a1, v90))
    {
      if (LODWORD(v90[0]) >= 2)
        sub_22EF53BC0(v90);
      goto LABEL_63;
    }
    sub_22F01D8E0(v92, *(_QWORD *)(a3 + 8), v90);
    if (LODWORD(v90[0]) >= 2)
      sub_22EF53BC0(v90);
LABEL_36:
    *(_DWORD *)(a3 + 840) = v14;
    *(_OWORD *)*(_QWORD *)(a3 + 16) = *(_OWORD *)v89;
    *(_DWORD *)(a3 + 820) = v13;
    if (((unint64_t)__p & 0x8000000000000000) != 0)
      goto LABEL_99;
    v89[0] = 0;
    sub_22EFF605C(a1);
    v25 = v24;
    if ((v94 & 1) != 0)
    {
      v26 = 0;
    }
    else if ((_DWORD)v98)
    {
      v26 = ((_DWORD)v98 == 1) & (v94 >> 2);
      if ((a2 & 1) != 0)
      {
LABEL_40:
        if (!v26)
        {
          v88 = v25;
          if ((v102 & 2) == 0 || (v94 & 8) == 0 || (_DWORD)v98 != v94 >> 4)
            goto LABEL_163;
          v87 = *(_QWORD *)(a3 + 8);
          v27 = *(_OWORD *)v92;
          if ((v92[0] & 3) == 1)
          {
            v28 = (unsigned __int8 *)(v92[0] & 0xFFFFFFFFFFFFFFFCLL);
            if ((v92[0] & 0xFFFFFFFFFFFFFFFCLL) != 0 && *v28 == 188)
            {
              v29 = *((_QWORD *)v28 + 3);
              v30 = *(_DWORD *)(v29 + 28) & 0x7F;
              v86 = *(_OWORD *)v92;
              if (v29 && (v30 - 52) >= 0xFFFFFFFD)
              {
                v31 = *(_QWORD *)(v29 + 16);
                v32 = v31 & 0xFFFFFFFFFFFFFFF8;
                if ((v31 & 4) != 0)
                  v32 = *(_QWORD *)v32;
                v33 = (*(_WORD *)(v32 + 8) & 0x7E) - 34;
                if (v32)
                  v34 = v32 - 64;
                else
                  v34 = 0;
                if (v33 >= 4)
                  v35 = 0;
                else
                  v35 = v34;
                if ((*(_BYTE *)(v35 + 28) & 0x80) == 0 && (*(_DWORD *)(v35 + 72) & 0xE000) != 0x4000)
                {
                  v36 = sub_22F0C975C(v87, v35);
                  v37 = sub_22EFC306C(v29);
                  v27 = v86;
                  if (v37 + 1 != ((*(_QWORD *)(v36 + 56) - *(_QWORD *)(v36 + 48)) >> 3))
                    goto LABEL_163;
                }
              }
              else if (v29)
              {
                if (v30 == 68)
                {
                  v46 = *(unsigned int *)(v29 + 64);
                  if ((_DWORD)v46)
                  {
                    v47 = *(unint64_t **)(v29 + 56);
                    v48 = 8 * v46;
                    while (1)
                    {
                      v49 = *v47;
                      v50 = *(_QWORD *)(*v47 + 16);
                      v51 = v50 & 0xFFFFFFFFFFFFFFF8;
                      if ((v50 & 4) != 0)
                        v51 = *(_QWORD *)v51;
                      v52 = (*(_WORD *)(v51 + 8) & 0x7E) - 34;
                      v53 = v51 ? v51 - 64 : 0;
                      v54 = v52 >= 4 ? 0 : v53;
                      if ((*(_BYTE *)(v54 + 28) & 0x80) == 0 && (*(_DWORD *)(v54 + 72) & 0xE000) != 0x4000)
                      {
                        v55 = sub_22F0C975C(v87, v54);
                        v56 = sub_22EFC306C(v49);
                        v27 = v86;
                        if (v56 + 1 != ((*(_QWORD *)(v55 + 56) - *(_QWORD *)(v55 + 48)) >> 3))
                          break;
                      }
                      ++v47;
                      v48 -= 8;
                      if (!v48)
                        goto LABEL_118;
                    }
LABEL_163:
                    v90[0] = 0;
                    v81 = *(_QWORD *)v96;
                    if (*(_QWORD *)v96 >= 0x10uLL)
                    {
                      v82 = *(_QWORD *)v96 & 0xFFFFFFFFFFFFFFF0;
                      if ((sub_22F1110EC(*(_QWORD *)(*(_QWORD *)v96 & 0xFFFFFFFFFFFFFFF0), 0) & 1) == 0
                        && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v82 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                            + 16)
                         - 25 >= 2
                        && sub_22F01E138(a3, v88, v81, v90))
                      {
                        if ((v94 & 8) != 0 && (_DWORD)v98 == v94 >> 4)
                        {
                          v83 = *((_QWORD *)v97 + v98 - 1);
                          v84 = v95 - v83;
                          if (v95 < v83)
                            v84 = 0;
                        }
                        else
                        {
                          v84 = (v94 & 2) == 0
                             && ((v94 & 8) == 0
                              || (((_DWORD)v98 == 1) & (v94 >> 2)) != 0
                              || *((_QWORD *)v97 + (int)((v94 >> 4) - 1)) != v95);
                        }
                        v89[0] = (uint64_t)__p + v90[0] * v84;
                        goto LABEL_97;
                      }
                    }
                    goto LABEL_173;
                  }
                }
              }
            }
          }
LABEL_118:
          *(_OWORD *)v90 = v27;
          v57 = sub_22EF52AD4((unint64_t *)v90);
          v58 = v57;
          if ((v94 & 4) != 0)
          {
            v60 = *(_QWORD *)(v57 & 0xFFFFFFFFFFFFFFF0);
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v60 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 4)
            {
              v60 = sub_22EF5C728(v87, v58);
            }
            else if (*(_BYTE *)(v60 + 16) != 39)
            {
              v60 = sub_22F10CF48(v60);
            }
            v58 = *(_QWORD *)(v60 + 32);
            v59 = 1;
          }
          else
          {
            v59 = 0;
          }
          if (v59 != (_DWORD)v98)
          {
            v61 = v59;
            v62 = -(int)v98;
            do
            {
              v63 = v97;
              v64 = *(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0);
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v64 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
              {
                if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v64 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
                {
                  if (*(_BYTE *)(v64 + 16) != 12)
                    v64 = sub_22F10CF48(v64);
                  if (v63[v61] != 1)
                    goto LABEL_163;
                  v71 = (unint64_t *)(v64 + 32);
                }
                else
                {
                  v72 = *((_QWORD *)v97 + v61) & 0xFFFFFFFFFFFFFFF8;
                  if (!v72 || (*(_DWORD *)(v72 + 28) & 0x7Fu) - 49 > 2)
                    goto LABEL_163;
                  v73 = *(_QWORD *)(v72 + 16);
                  v74 = v73 & 0xFFFFFFFFFFFFFFF8;
                  if ((v73 & 4) != 0)
                    v74 = *(_QWORD *)v74;
                  v75 = (*(_WORD *)(v74 + 8) & 0x7E) - 34;
                  v76 = v74 ? v74 - 64 : 0;
                  v77 = v75 >= 4 ? 0 : v76;
                  if ((*(_BYTE *)(v77 + 28) & 0x80) == 0 && (*(_DWORD *)(v77 + 72) & 0xE000) != 0x4000)
                  {
                    v78 = sub_22F0C975C(v87, v77);
                    if (sub_22EFC306C(v72) + 1 != ((*(_QWORD *)(v78 + 56)
                                                                               - *(_QWORD *)(v78 + 48)) >> 3))
                      goto LABEL_163;
                  }
                  v71 = (unint64_t *)(v72 + 48);
                }
              }
              else
              {
                if (v62 + (_DWORD)v61 == -1)
                  break;
                v65 = sub_22EF5C728(v87, v58);
                v66 = v65;
                v67 = v63[v61];
                v68 = (_QWORD **)(v65 + 40);
                v69 = *(_DWORD *)(v65 + 48);
                if (v69 >= 0x41
                  && v69 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v65 + 40)) > 0x40)
                {
                  goto LABEL_163;
                }
                v70 = *v68;
                if (v69 < 0x41)
                  v70 = v68;
                if (*v70 != v67 + 1)
                  goto LABEL_163;
                v71 = (unint64_t *)(v66 + 32);
              }
              v58 = *v71;
              ++v61;
            }
            while (v62 + (_DWORD)v61);
          }
          LODWORD(v90[1]) = 1;
          v90[0] = 0;
          if (sub_22F05A858(v92[0]) && sub_22F05A8BC(*(_QWORD *)(a3 + 8), v92[0], v90))
          {
            v79 = sub_22F05AB04((llvm::APInt *)v90, v89);
            v80 = 0;
          }
          else
          {
            v79 = 0;
            v80 = a2 != 1;
          }
          if (LODWORD(v90[1]) >= 0x41 && v90[0])
            MEMORY[0x2348A0E84](v90[0], 0x1000C8000313F17);
          if (!v80)
          {
            if (v79)
              goto LABEL_97;
            goto LABEL_173;
          }
          goto LABEL_163;
        }
      }
    }
    else
    {
      v39 = v92[0];
      if ((v102 & 2) == 0 || (v92[0] & 3) != 1 || (v92[0] & 0xFFFFFFFFFFFFFFFCLL) == 0)
        goto LABEL_69;
      v26 = *(unsigned __int8 *)(v92[0] & 0xFFFFFFFFFFFFFFFCLL) != 188;
      if ((a2 & 1) != 0)
        goto LABEL_40;
    }
    if (a2 == 3 && !v26)
      goto LABEL_173;
    v39 = v92[0];
LABEL_69:
    LODWORD(v90[1]) = 1;
    v90[0] = 0;
    if (sub_22F05A858(v39) && sub_22F05A8BC(*(_QWORD *)(a3 + 8), v92[0], v90))
    {
      v40 = sub_22F05AB04((llvm::APInt *)v90, v89);
LABEL_72:
      v41 = v40;
LABEL_93:
      if (LODWORD(v90[1]) >= 0x41 && v90[0])
        MEMORY[0x2348A0E84](v90[0], 0x1000C8000313F17);
      if ((v41 & 1) != 0)
      {
LABEL_97:
        if (v89[0] > (uint64_t)__p)
        {
          *a4 = v89[0] - (_QWORD)__p;
LABEL_100:
          v38 = 1;
          goto LABEL_174;
        }
LABEL_99:
        *a4 = 0;
        goto LABEL_100;
      }
LABEL_173:
      v38 = 0;
      goto LABEL_174;
    }
    if ((v102 & 2) != 0)
    {
LABEL_92:
      v41 = 0;
      goto LABEL_93;
    }
    v42 = v92[1];
    v43 = (unsigned __int8 *)(v92[0] & 0xFFFFFFFFFFFFFFFCLL);
    v44 = v92[0] & 3;
    if ((v92[0] & 3) != 0 || !v43)
    {
      if (v44 != 1 || !v43)
      {
        if (v44 != 2 && (~LOBYTE(v92[0]) & 3) != 0)
          goto LABEL_92;
        goto LABEL_89;
      }
      if (*v43 != 156)
        goto LABEL_92;
      v45 = (unint64_t *)(v43 + 8);
    }
    else
    {
      if ((*((_DWORD *)v43 + 7) & 0x7Fu) - 67 < 0xFFFFFFF9)
        goto LABEL_92;
      v45 = (unint64_t *)(v43 + 48);
    }
    v42 = *v45;
LABEL_89:
    if (v42 >= 0x10
      && (sub_22F1110EC(*(_QWORD *)(v42 & 0xFFFFFFFFFFFFFFF0), 0) & 1) == 0
      && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 25 >= 2)
    {
      v40 = sub_22F01E138(a3, v25, v42, v89);
      goto LABEL_72;
    }
    goto LABEL_92;
  }
  v15 = (unsigned __int8 *)a1;
  do
  {
    while (1)
    {
      v16 = v15;
      LODWORD(v17) = *v15;
      if (v17 <= 0xD5)
        break;
      if ((_DWORD)v17 == 233)
      {
        LODWORD(v17) = *(_DWORD *)v15;
        if ((*(_DWORD *)v15 & 0x7C0000) != 0x300000)
          goto LABEL_21;
        v18 = v15 + 16;
      }
      else
      {
        if ((_DWORD)v17 != 214)
          goto LABEL_21;
        v18 = v15 + 24;
      }
LABEL_20:
      v15 = *(unsigned __int8 **)v18;
      if (v15 == v16)
        goto LABEL_21;
    }
    if ((_DWORD)v17 == 155)
    {
      if ((**((_DWORD **)v15 + 2) & 0x18000) != 0)
        break;
      v18 = v15 + 24;
      if (!v16[48])
        v18 = v16 + 32;
      LOBYTE(v17) = -101;
      goto LABEL_20;
    }
    if ((_DWORD)v17 == 176)
    {
      v17 = *((unsigned int *)v15 + 5);
      if ((_DWORD)v17 == -1)
        break;
      v18 = &v15[8 * v17 + 40];
      LOBYTE(v17) = -80;
      goto LABEL_20;
    }
LABEL_21:
    if ((v17 + 102) >= 0xF5u)
    {
      v19 = (*(_DWORD *)v16 >> 18) & 0x7F;
      if (v19 == 1 || v19 == 66 || v19 == 5)
      {
        v15 = (unsigned __int8 *)*((_QWORD *)v16 + 2);
        v20 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16);
        if ((v20 & 0xFE) == 0x28)
          continue;
        v21 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 1) & 0xFFFFFFFFFFFFFFF0)
                                                                 + 8) & 0xFFFFFFFFFFFFFFF0)
                                         + 16) > 0x27u
           || ((1 << v20) & 0x8100000400) == 0;
        v22 = v20 & 0xFF800FF;
        if (!v21 || v22 == 114294795)
          continue;
      }
    }
    break;
  }
  while ((v15[1] & 3) == 0);
  v90[0] = a3;
  v90[1] = (uint64_t)v92;
  LOBYTE(v91) = 1;
  if (sub_22F00C45C(v90, v16, a3, (int)a4, a5, a6, a7, a8))
    goto LABEL_36;
LABEL_63:
  v38 = 0;
  *(_DWORD *)(a3 + 840) = v14;
  *(_OWORD *)*(_QWORD *)(a3 + 16) = *(_OWORD *)v89;
  *(_DWORD *)(a3 + 820) = v13;
LABEL_174:
  if (v97 != v99)
    free(v97);
  return v38;
}

uint64_t sub_22F00C45C(uint64_t *a1, unsigned __int8 *a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v8;
  int v9;
  uint64_t v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  __int128 v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  while (2)
  {
    v8 = *a2;
    if (a2 && (v8 & 0xFE) == 0x70)
    {
      v9 = *(_DWORD *)a2;
      switch((*(_DWORD *)a2 >> 18) & 0x3F)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
          return sub_22F05B288(a1, (uint64_t)a2);
        default:
          goto LABEL_8;
      }
    }
    if (!a2 || v8 != 233)
LABEL_9:
      __asm { BR              X9 }
    v9 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x1F)
    {
      case 0:
      case 1:
        return sub_22F04153C(a1, (uint64_t)a2);
      case 2:
      case 3:
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xD:
        sub_22F072CEC(*a1, (uint64_t)a2, 103, 0);
        return 0;
      case 4:
        v11 = *((_QWORD *)a2 + 2);
        v12 = *((_BYTE *)a1 + 16);
        v45 = *(_OWORD *)a1;
        v46 = v12;
        return sub_22F010358((int)&v45, v11, a3, a4, a5, a6, a7, a8, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24,
                 v25,
                 v26,
                 v27,
                 v28,
                 v29,
                 v30,
                 v31,
                 v32,
                 v33,
                 v34,
                 v35,
                 v36,
                 v37,
                 v38,
                 v39,
                 v40,
                 v41,
                 v42,
                 v43,
                 v44);
      case 6:
      case 0xC:
        a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        continue;
      default:
LABEL_8:
        v8 = v9;
        goto LABEL_9;
    }
  }
}

BOOL sub_22F00F5B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BOOL8 v11;
  unsigned int v12;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _BOOL4 v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  llvm *v32[2];
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  uint64_t (**v40)();
  uint64_t *v41;
  llvm **v42;
  uint64_t (***v43)();
  uint64_t v44;
  int v45;
  char v46;
  uint64_t (**v47)();
  uint64_t (***v48)();
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  __int128 v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  int v57;
  int v58;
  __int128 v59;
  int v60;
  _BYTE *v61;
  uint64_t v62;
  _BYTE v63[512];
  __int128 v64;
  int v65;
  __int128 v66;
  uint64_t v67;
  int v68;
  __int128 *v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  char v74;
  int v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a2 + 48);
  if ((_DWORD)v7)
  {
    v32[0] = 0;
    v32[1] = 0;
    v33 = 0;
    v15 = *(_QWORD **)(a2 + 40);
    v16 = 8 * v7;
    do
    {
      v17 = *v15 & 0xFFFFFFFFFFFFFFF8;
      if (v17)
        v18 = (*(_DWORD *)(v17 + 28) & 0x7Fu) - 52 >= 0xFFFFFFFD;
      else
        v18 = 0;
      if (!v18)
        goto LABEL_43;
      v19 = sub_22EF67C8C(a1);
      v30 = sub_22EF6A330(a1, v19);
      if (v30 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v29);
      else
        v29 = 0;
      v31 = 1;
      if (a3)
      {
        v20 = sub_22EFC306C(v17);
        v21 = *(_QWORD *)(a3 + 16);
        if (v20 < ((unint64_t)(*(_QWORD *)(a3 + 24) - v21) >> 3))
        {
          v22 = *(_QWORD *)(v21 + 8 * v20);
          LOWORD(v34) = 0;
          v35 = 0;
          LODWORD(v36) = 0;
          v40 = &off_24FAC58D8;
          v41 = (uint64_t *)a1;
          v23 = *(_QWORD *)(a1 + 2000);
          v24 = *(_BYTE *)(v23 + 180);
          v45 = *(_DWORD *)(v23 + 176);
          v46 = v24 & 1;
          v47 = &off_24FAC5960;
          v48 = &v40;
          v49 = 0u;
          v50 = 0u;
          v51 = 0u;
          v53 = 0uLL;
          v52 = &v53;
          v54 = 0x100000000;
          v55 = &v57;
          v56 = 0x200000001;
          v57 = 1;
          v58 = 1;
          v59 = 0uLL;
          v60 = 0;
          v42 = (llvm **)&v34;
          v43 = &v47;
          v44 = 0x200000001;
          v61 = v63;
          v62 = 0x1000000000;
          v67 = 0;
          v68 = 0;
          v66 = 0uLL;
          v70 = 0uLL;
          v65 = 0;
          v64 = 0uLL;
          v69 = &v70;
          v71 = 0;
          v72 = -1;
          v74 = 0;
          v73 = 0;
          v75 = 3;
          v25 = sub_22F0056A0(v22, (uint64_t)&v34, a1, 0, (uint64_t)&v40);
          sub_22F0052A4((uint64_t)&v40);
          if (!v25)
          {
            if (v36 >= 2)
              sub_22EF53BC0(&v36);
            if (v30 >= 0x41 && v29)
              MEMORY[0x2348A0E84](v29, 0x1000C8000313F17);
LABEL_43:
            v11 = 0;
            goto LABEL_44;
          }
          if (v30 > 0x40 || v38 > 0x40)
          {
            llvm::APInt::assignSlowCase((llvm::APInt *)&v29, (const llvm::APInt *)&v37);
          }
          else
          {
            v29 = v37;
            v30 = v38;
          }
          v31 = v39;
          if (v36 >= 2)
            sub_22EF53BC0(&v36);
        }
      }
      v40 = (uint64_t (**)())v17;
      v26 = sub_22F3C51F4((uint64_t)v32, (uint64_t *)&v40);
      v27 = v26;
      if (*((_DWORD *)v26 + 4) >= 0x41u)
      {
        v28 = v26[1];
        if (v28)
          MEMORY[0x2348A0E84](v28, 0x1000C8000313F17);
      }
      v27[1] = v29;
      *((_DWORD *)v27 + 4) = v30;
      *((_BYTE *)v27 + 20) = v31;
      ++v15;
      v16 -= 8;
    }
    while (v16);
    LOBYTE(v29) = 0;
    v40 = (uint64_t (**)())a1;
    v41 = &v29;
    v42 = v32;
    sub_22F00FB4C((uint64_t)&v34, (uint64_t)&v40, *(unsigned __int8 **)(a2 + 56));
    if (*(_DWORD *)(a4 + 8) >= 0x41u && *(_QWORD *)a4)
      MEMORY[0x2348A0E84](*(_QWORD *)a4, 0x1000C8000313F17);
    *(_QWORD *)a4 = v34;
    *(_DWORD *)(a4 + 8) = v35;
    *(_BYTE *)(a4 + 12) = BYTE4(v35);
    v11 = (_BYTE)v29 == 0;
LABEL_44:
    sub_22F3C5180((uint64_t)v32[0], v33);
    llvm::deallocate_buffer(v32[0], (void *)(24 * v33));
  }
  else
  {
    LOWORD(v34) = 0;
    v35 = 0;
    LODWORD(v36) = 0;
    v8 = *(_QWORD *)(a2 + 56);
    v40 = &off_24FAC58D8;
    v41 = (uint64_t *)a1;
    v9 = *(_QWORD *)(a1 + 2000);
    v10 = *(_BYTE *)(v9 + 180);
    v45 = *(_DWORD *)(v9 + 176);
    v46 = v10 & 1;
    v47 = &off_24FAC5960;
    v48 = &v40;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v53 = 0u;
    v52 = &v53;
    v54 = 0x100000000;
    v55 = &v57;
    v56 = 0x200000001;
    v57 = 1;
    v58 = 1;
    v60 = 0;
    v59 = 0u;
    v42 = (llvm **)&v34;
    v43 = &v47;
    v44 = 0x200000001;
    v61 = v63;
    v62 = 0x1000000000;
    v66 = 0u;
    v67 = 0;
    v68 = 0;
    v70 = 0u;
    v65 = 0;
    v64 = 0u;
    v69 = &v70;
    v71 = 0;
    v72 = -1;
    v73 = 0;
    v74 = 0;
    v75 = 3;
    v11 = sub_22F0056A0(v8, (uint64_t)&v34, a1, 0, (uint64_t)&v40);
    sub_22F0052A4((uint64_t)&v40);
    if (v11)
    {
      if (*(_DWORD *)(a4 + 8) > 0x40u || (v12 = v38, v38 > 0x40))
      {
        llvm::APInt::assignSlowCase((llvm::APInt *)a4, (const llvm::APInt *)&v37);
      }
      else
      {
        *(_QWORD *)a4 = v37;
        *(_DWORD *)(a4 + 8) = v12;
      }
      *(_BYTE *)(a4 + 12) = v39;
    }
    if (v36 >= 2)
      sub_22EF53BC0(&v36);
  }
  return v11;
}

uint64_t sub_22F00FB4C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v3;

  v3 = *a3;
  if (a3 && (v3 & 0xFE) == 0x70)
  {
    switch((*(_DWORD *)a3 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        return sub_22F05F330(a1, a2, (uint64_t)a3);
      default:
        goto LABEL_5;
    }
  }
  if (!a3 || v3 != 233)
LABEL_5:
    __asm { BR              X10 }
  return sub_22F05F718(a1, a2, a3);
}

void sub_22F00FC7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const llvm::APInt *v7;
  unsigned int v8;

  v5 = sub_22F05FC38(*(_QWORD *)(v4 + 16), *(_QWORD *)(a3 + 16));
  if (**(_QWORD **)(v4 + 16) + 24 * *(unsigned int *)(*(_QWORD *)(v4 + 16) + 16) != v5)
  {
    v6 = v5;
    v7 = (const llvm::APInt *)(v5 + 8);
    v8 = *(_DWORD *)(v5 + 16);
    *(_DWORD *)(v3 + 8) = v8;
    if (v8 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)v3, v7);
    else
      *(_QWORD *)v3 = *(_QWORD *)v7;
    *(_BYTE *)(v3 + 12) = *(_BYTE *)(v6 + 20);
    JUMPOUT(0x22F00FBE4);
  }
  **(_BYTE **)(v4 + 8) = 1;
  *(_DWORD *)(v3 + 8) = 1;
  JUMPOUT(0x22F00FBDCLL);
}

uint64_t sub_22F00FCFC(uint64_t a1, unint64_t *a2, uint64_t *a3, int a4, int a5, int a6, int a7, int a8)
{
  int v11;
  BOOL v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  unint64_t v20;
  BOOL v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  _BYTE *v32;
  int64_t v33;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  _BYTE v44[64];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16);
  if ((v11 & 0xFE) != 0x28)
  {
    v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                             + 8) & 0xFFFFFFFFFFFFFFF0)
                                     + 16) > 0x27u
       || ((1 << v11) & 0x8100000400) == 0;
    v13 = v11 & 0xFF800FF;
    if (v12 && v13 != 114294795)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 1) & 3) != 0)
    return 0;
  v38[0] = 0;
  v38[1] = 0;
  v39 = 0;
  LODWORD(v40) = -1;
  v41 = 0;
  v42 = v44;
  v43 = 0x800000000;
  v45 = 0;
  v46 = 0;
  v35 = (uint64_t)a3;
  v36 = v38;
  LOBYTE(v37) = 0;
  v15 = 0;
  if (sub_22F00C45C(&v35, (unsigned __int8 *)a1, (int)a3, a4, a5, a6, a7, a8))
  {
    v16 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0));
    v17 = v16;
    if ((v38[0] & 3) == 1
      && (v18 = (_DWORD *)(v38[0] & 0xFFFFFFFFFFFFFFFCLL), (v38[0] & 0xFFFFFFFFFFFFFFFCLL) != 0)
      && *(unsigned __int8 *)v18 == 225
      && (v39 & 0x8000000000000000) == 0
      && ((v19 = (*v18 >> 21) & 7, v20 = (v19 * v18[4]), v39 <= v20) ? (v21 = v19 == 1) : (v21 = 0),
          v21
       && *(_QWORD *)(*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a3[1] + 16408) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)))
    {
      if (v20 >= v39)
        v29 = v39;
      else
        v29 = (v19 * v18[4]);
      v30 = v20 - v29;
      if (v39 < v20)
      {
        v31 = (char *)&v18[v18[1] + 5] + v29;
        v32 = memchr(v31, 0, v20 - v29);
        if (v32)
        {
          v33 = v30 >= v32 - v31 ? v32 - v31 : v30;
          if (v32 - v31 != -1)
            v30 = v33;
        }
      }
      *a2 = v30;
LABEL_51:
      v15 = 1;
    }
    else
    {
      LODWORD(v35) = 0;
      v22 = sub_22F0248D4(a3, a1, v16, (uint64_t)v38, (uint64_t)&v35, 0);
      v23 = v35;
      if (v22 && (_DWORD)v35 == 2)
      {
        v24 = 0;
        while (1)
        {
          v25 = v37;
          if (v37 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v36) == v25)
            {
LABEL_39:
              *a2 = v24;
              sub_22EF53BC0(&v35);
              goto LABEL_51;
            }
          }
          else if (!v36)
          {
            goto LABEL_39;
          }
          v26 = sub_22F01DC1C((uint64_t)a3, a1, (uint64_t)v38, v17, 1);
          v27 = v26;
          if (v35 >= 2)
          {
            sub_22EF53BC0(&v35);
            if ((v27 & 1) == 0)
              goto LABEL_38;
          }
          else if (!v26)
          {
            goto LABEL_38;
          }
          LODWORD(v35) = 0;
          v28 = sub_22F0248D4(a3, a1, v17, (uint64_t)v38, (uint64_t)&v35, 0);
          v23 = v35;
          if (v28)
          {
            ++v24;
            if ((_DWORD)v35 == 2)
              continue;
          }
          break;
        }
      }
      if (v23 > 1)
        sub_22EF53BC0(&v35);
LABEL_38:
      v15 = 0;
    }
  }
  if (v42 != v44)
    free(v42);
  return v15;
}

uint64_t sub_22F010028(uint64_t a1, llvm::APInt *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int16 v16;
  uint64_t v17;
  uint64_t v18[10];

  v18[9] = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_DWORD *)(v9 + 16);
  if (v9)
    v11 = v10 == 11;
  else
    v11 = 0;
  if (v11)
  {
    if (((*(_DWORD *)(v9 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      return 0;
  }
  else
  {
    if (v9 && v10 == 44)
    {
      v12 = sub_22F114198(*(_QWORD *)(v9 + 24));
      if ((*(_BYTE *)(v12 + 74) & 1) != 0 || *(_QWORD *)(v12 + 128) > 7uLL)
        goto LABEL_14;
      v10 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 16);
LABEL_13:
      if (v10 == 39)
        goto LABEL_14;
      return 0;
    }
    if (v10 != 9)
      goto LABEL_13;
  }
LABEL_14:
  v16 = 0;
  v17 = 0;
  LODWORD(v18[0]) = 0;
  v13 = sub_22F005120((unsigned __int8 *)a1, (uint64_t)&v16, a3, 0);
  v14 = 0;
  if (v13)
  {
    if (a4 <= 1 && (_BYTE)v16 || a4 < 1 && HIBYTE(v16))
      v14 = 0;
    else
      v14 = sub_22F364C68((uint64_t)v18, a2, v8, a3);
  }
  if (LODWORD(v18[0]) >= 2)
    sub_22EF53BC0(v18);
  return v14;
}

void sub_22F0101B8(uint64_t a1)
{
  sub_22F0052A4(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22F0101DC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 836);
}

uint64_t sub_22F0101E4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 835);
}

uint64_t sub_22F0101EC(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 1) = 1;
  if ((*(_DWORD *)(a1 + 840) & 0xFFFFFFFE) == 2)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t sub_22F01021C(_DWORD *a1)
{
  if (!a1[10])
    return 0;
  if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1) & 1) != 0)
    return 1;
  return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t sub_22F010274(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_22F01027C(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_22F010284(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 832);
}

uint64_t sub_22F01028C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 832) = a2;
  return result;
}

uint64_t sub_22F010294(uint64_t result, char a2)
{
  *(_BYTE *)(result + 833) = a2;
  return result;
}

uint64_t sub_22F01029C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_22F0102A4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_22F0102AC(uint64_t a1)
{
  unsigned int v1;
  BOOL v2;
  unsigned int v3;

  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 8))
    return 0;
  v1 = *(_DWORD *)(a1 + 840);
  v2 = v1 >= 2;
  v3 = v1 - 2;
  if (v2 && (v3 > 1 || !*(_BYTE *)(a1 + 833)))
    return 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(a1, 0);
  return 1;
}

uint64_t sub_22F010304(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

void sub_22F01030C(_QWORD *a1)
{
  if (a1)
  {
    sub_22F01030C(*a1);
    sub_22F01030C(a1[1]);
    if (*((_DWORD *)a1 + 10) >= 2u)
      sub_22EF53BC0(a1 + 5);
    operator delete(a1);
  }
}

uint64_t sub_22F010358(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int128 a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  uint64_t v40;
  int v41;
  int v42;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unsigned __int8 *v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95[2];
  uint64_t v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  while (2)
  {
    v40 = (uint64_t)a2;
    v41 = *a2;
    if (!a2 || (v41 & 0xFE) != 0x70)
    {
      if (a2 && v41 == 233)
      {
        v42 = *(_DWORD *)a2;
        switch((*(_DWORD *)a2 >> 18) & 0x1F)
        {
          case 0:
          case 1:
            return sub_22F04153C(a1, (uint64_t)a2);
          case 2:
          case 3:
            return sub_22F0416A8(a1, a2);
          case 4:
          case 7:
          case 8:
          case 9:
          case 0xD:
LABEL_35:
            sub_22F072CEC(*a1, v40, 103, 0);
            return 0;
          case 5:
            v64 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
            v65 = *((_BYTE *)a1 + 16);
            *(_OWORD *)v95 = *(_OWORD *)a1;
            LOBYTE(v96) = v65;
            return sub_22F00C45C((uint64_t *)v95, v64, a3, a4, a5, a6, a7, a8);
          case 6:
          case 0xC:
            a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
            continue;
          case 0xA:
            if (!sub_22F010358((int)a1, *((_QWORD *)a2 + 2), a3, a4, a5, a6, a7, a8, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76,
                                  v77,
                                  v78,
                                  v79,
                                  v80,
                                  v81,
                                  v82,
                                  v83,
                                  v84,
                                  v85,
                                  v86,
                                  v87,
                                  v88,
                                  v89,
                                  v90,
                                  v91,
                                  v92,
                                  v93,
                                  v94,
                                  v95[0],
                                  (uint64_t)v95[1]))
              return 0;
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 16) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16) == 12)
              sub_22F041750(*a1, v40, a1[1], *(_QWORD *)(v40 + 8), 0);
            return 1;
          case 0xB:
            if (!sub_22F010358((int)a1, *((_QWORD *)a2 + 2), a3, a4, a5, a6, a7, a8, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76,
                                  v77,
                                  v78,
                                  v79,
                                  v80,
                                  v81,
                                  v82,
                                  v83,
                                  v84,
                                  v85,
                                  v86,
                                  v87,
                                  v88,
                                  v89,
                                  v90,
                                  v91,
                                  v92,
                                  v93,
                                  v94,
                                  v95[0],
                                  (uint64_t)v95[1]))
              return 0;
            v55 = 1;
            sub_22F041750(*a1, v40, a1[1], *(_QWORD *)(v40 + 8), 1u);
            return v55;
          default:
LABEL_8:
            v41 = v42;
            break;
        }
      }
      __asm { BR              X9 }
    }
    break;
  }
  v42 = *(_DWORD *)a2;
  switch((*(_DWORD *)a2 >> 18) & 0x3F)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x20:
      return sub_22F011F44(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
               a20,
               a21,
               a22,
               a23,
               a24,
               a25,
               a26,
               a27,
               a28,
               a29,
               a30,
               a31,
               a32,
               a33,
               a34,
               a35,
               a36,
               a37,
               a38,
               a39);
    case 0x15:
      if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(void))(*(_QWORD *)*a1 + 96))() + 2000) + 1) & 4) == 0
        && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1) & 1) == 0)
      {
        goto LABEL_35;
      }
      LODWORD(v95[0]) = 0;
      if (sub_22F009DC4((uint64_t)v95, (uint64_t *)*a1, *(_QWORD *)(v40 + 24), v44, v45, v46, v47, v48))
      {
        if (sub_22F010358((int)a1, *(_QWORD *)(v40 + 16), v49, v50, v51, v52, v53, v54, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76,
                             v77,
                             v78,
                             v79,
                             v80,
                             v81,
                             v82,
                             v83,
                             v84,
                             v85,
                             v86,
                             v87,
                             v88,
                             v89,
                             v90,
                             v91,
                             v92,
                             v93,
                             v94,
                             v95[0],
                             (uint64_t)v95[1])
          && ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 96))(*a1) + 2000) + 1) & 0x10) == 0
           || sub_22F013A2C((uint64_t *)*a1, *(unsigned __int8 **)(v40 + 16), a1[1])))
        {
          v55 = sub_22F014A60(*a1, v40, a1[1], *(_QWORD *)(*(_QWORD *)(v40 + 16) + 8), (uint64_t)v95);
          goto LABEL_26;
        }
      }
      else
      {
        v56 = *a1;
        v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1);
        **(_BYTE **)(v56 + 16) |= v57;
        if (v57)
          sub_22F010358((int)a1, *(_QWORD *)(v40 + 16), v58, v59, v60, v61, v62, v63, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76,
            v77,
            v78,
            v79,
            v80,
            v81,
            v82,
            v83,
            v84,
            v85,
            v86,
            v87,
            v88,
            v89,
            v90,
            v91,
            v92,
            v93,
            v94,
            v95[0],
            (uint64_t)v95[1]);
      }
      v55 = 0;
LABEL_26:
      if (LODWORD(v95[0]) >= 2)
        sub_22EF53BC0((uint64_t *)v95);
      break;
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
      return sub_22F011FD0(a1, (uint64_t)a2);
    default:
      goto LABEL_8;
  }
  return v55;
}

uint64_t sub_22F011F44(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int128 a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  int v40;
  unsigned int v41;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;

  v40 = (int)a1;
  v41 = (*(_DWORD *)a2 >> 18) & 0x3F;
  if (v41 < 2)
    return sub_22F0247C4((_BYTE **)*a1, a2, a1[1], 1u) != 0;
  if (v41 == 32)
  {
    sub_22F024D28(*a1, *(_QWORD *)(a2 + 16));
    return sub_22F010358(v40, *(_QWORD *)(a2 + 24), v43, v44, v45, v46, v47, v48, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39);
  }
  else
  {
    sub_22F072CEC(*a1, a2, 103, 0);
    return 0;
  }
}

uint64_t sub_22F011FD0(uint64_t *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  __n128 v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  int v38;
  _DWORD *v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  _BOOL4 v65;
  uint64_t v66;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 **v70;
  unsigned __int8 **v71;
  unsigned __int8 *v72;
  _BYTE *v73;
  uint64_t v74;
  _BOOL8 v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 **v80;
  unsigned __int8 **v81;
  unsigned __int8 *v82;
  _BYTE *v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  uint64_t v87;
  unint64_t v88;
  unsigned __int8 **v89;
  unsigned __int8 **v90;
  unsigned __int8 *v91;
  _BYTE *v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  int v96;
  unsigned __int8 **v97;
  unsigned __int8 **v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  uint64_t v101;
  unsigned __int8 *v102;
  uint64_t v103;
  unsigned __int8 *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  llvm::APFloatBase *v110;
  int v111;
  unsigned __int8 **v112;
  unsigned __int8 **v113;
  unsigned __int8 *v114;
  _BYTE *v115;
  uint64_t v116;
  _BYTE *v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  unsigned __int8 *v121;
  unsigned __int8 *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t *v126;
  int v127;
  const llvm::APInt *v128;
  _QWORD *v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t *v141;
  __int128 v142;
  _DWORD *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  _QWORD v165[14];

  v165[12] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 96))(*a1) + 2000) + 1) & 4) == 0
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1) & 1) == 0)
  {
    sub_22F072CEC(*a1, a2, 103, 0);
    return 0;
  }
  LODWORD(v150) = 0;
  if (!sub_22F009DC4((uint64_t)&v150, (uint64_t *)*a1, *(_QWORD *)(a2 + 24), v4, v5, v6, v7, v8))
  {
    v23 = *a1;
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1);
    **(_BYTE **)(v23 + 16) |= v24;
    if (v24)
      sub_22F010358((int)a1, *(_QWORD *)(a2 + 16), v25, v26, v27, v28, v29, v30, v132, v133, v135, (uint64_t)v137, v138, v139, v140, (uint64_t)v141, v142, *((uint64_t *)&v142 + 1), (uint64_t)v143,
        v144,
        v145,
        v146,
        v147,
        v148,
        v149,
        v150,
        v151,
        v152,
        v153,
        v154,
        v155,
        v156,
        v157,
        v158,
        *((uint64_t *)&v158 + 1),
        v159,
        v160,
        v161,
        v162);
    goto LABEL_14;
  }
  if (!sub_22F010358((int)a1, *(_QWORD *)(a2 + 16), v9, v10, v11, v12, v13, v14, v132, v133, v135, (uint64_t)v137, v138, v139, v140, (uint64_t)v141, v142, *((uint64_t *)&v142 + 1), (uint64_t)v143,
                        v144,
                        v145,
                        v146,
                        v147,
                        v148,
                        v149,
                        v150,
                        v151,
                        v152,
                        v153,
                        v154,
                        v155,
                        v156,
                        v157,
                        v158,
                        *((uint64_t *)&v158 + 1),
                        v159,
                        v160,
                        v161,
                        v162))
    goto LABEL_14;
  v15 = a1[1];
  v16 = (*(_DWORD *)a2 >> 18) & 0x3F;
  v17 = v16 <= 0x1C ? -20 : -13;
  if ((*(_BYTE *)(v15 + 24) & 1) != 0)
    goto LABEL_14;
  v18 = *a1;
  v19 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
  v20 = *(_QWORD *)(a2 + 32);
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 96))(v18) + 2000) + 1) & 4) == 0)
    goto LABEL_10;
  v33.n128_f64[0] = sub_22F015608((unint64_t *)&v142, v18, a2, 2u, v15, v19);
  v137 = (_QWORD *)v18;
  v138 = a2;
  v139 = v20;
  LODWORD(v140) = v17 + v16;
  v141 = &v150;
  v34 = v144;
  if (v144 < 0x10 || (v35 = *(_DWORD *)(v15 + 24), (v35 & 1) != 0))
  {
LABEL_14:
    v31 = 0;
    goto LABEL_15;
  }
  if ((v35 & 2) != 0)
  {
LABEL_25:
    if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v18 + 96))(v18, v33) + 2000)
                   + 1) & 2) == 0)
    {
LABEL_10:
      v21 = (_QWORD *)v18;
      v22 = a2;
LABEL_11:
      sub_22F072CEC((uint64_t)v21, v22, 103, 0);
      goto LABEL_14;
    }
    v37 = *(_DWORD *)(v15 + 24);
    if ((v37 & 2) != 0
      || (v37 & 8) != 0
      && ((*(_DWORD *)(v15 + 56) == 1) & (v37 >> 2)) == 0
      && *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * (int)((v37 >> 4) - 1)) == *(_QWORD *)(v15 + 32))
    {
      v38 = 2172;
    }
    else
    {
      v38 = 2176;
    }
    v78 = v18;
    v79 = a2;
    goto LABEL_119;
  }
  v36 = *(_DWORD *)(v15 + 56);
  if ((v35 & 8) == 0 || ((v36 == 1) & (v35 >> 2)) != 0)
  {
    if (((v36 == 1) & (v35 >> 2)) != 0)
      goto LABEL_25;
  }
  else if (*(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * (int)((v35 >> 4) - 1)) == *(_QWORD *)(v15 + 32))
  {
    goto LABEL_25;
  }
  v39 = v143;
  if (!*v143)
  {
LABEL_112:
    if (((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v18 + 24))(v18, v33) & 1) == 0)
    {
      v70 = (unsigned __int8 **)sub_22F072CEC(v18, a2, 2174, 0);
      if (v70)
      {
        v71 = v70;
        v72 = *v70;
        if (!v72)
        {
          v72 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v71[1]);
          *v71 = v72;
        }
        v31 = 0;
        v72[*v72 + 1] = 2;
        v73 = *v71;
        v74 = **v71;
        *(_QWORD *)&(*v71)[8 * v74 + 16] = 2;
        LOBYTE(v74) = v74 + 1;
        *v73 = v74;
        v75 = *v39 == 1;
        v73[v74 + 1] = 2;
        v76 = *v71;
        v77 = **v71;
        *v76 = v77 + 1;
        *(_QWORD *)&v76[8 * v77 + 16] = v75;
        goto LABEL_15;
      }
    }
    goto LABEL_14;
  }
  v40 = 0;
  v134 = 0;
  v41 = 0;
  v42 = -v36;
  while (1)
  {
    if (((v34 & 1) != 0 || *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFFF0) + 8) & 5 | v34 & 4)
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
    {
      v43 = *(_QWORD *)(v15 + 48);
      v158 = v142;
      v159 = v43;
      v160 = v41;
      v148 = 0;
      if ((sub_22F02BC74(*(_QWORD *)(v18 + 768), *(_DWORD *)(v18 + 784), (uint64_t *)&v158, &v148) & 1) != 0)
      {
        if (*(_DWORD *)(v148 + 32))
          v34 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFFALL | v34 & 2;
      }
    }
    v44 = v42 + v41;
    if (!((_DWORD)v42 + v41)
      || (v45 = (uint64_t *)(v34 & 0xFFFFFFFFFFFFFFF0), v44 == -1)
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v45 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
    {
      if ((v34 & 4) != 0
        || (v45 = (uint64_t *)(v34 & 0xFFFFFFFFFFFFFFF0), (*(_BYTE *)((v34 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0))
      {
        if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v18 + 96))(v18, v33)
                                   + 2000)
                       + 1) & 1) == 0)
          goto LABEL_10;
        v85 = v134;
        if (v134)
        {
          v86 = *(_DWORD *)(v134 + 24);
          v55 = 2;
        }
        else
        {
          v88 = v142 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v142 & 3) != 0 || !v88)
          {
            v85 = 0;
            v86 = 0;
            v55 = 0;
            if ((v142 & 3) == 1 && v88)
            {
              sub_22EFF605C(v88);
              v86 = v111;
              v85 = 0;
              v55 = 0;
            }
          }
          else
          {
            v86 = *(_DWORD *)(v88 + 24);
            v55 = 1;
            v85 = v142 & 0xFFFFFFFFFFFFFFFCLL;
          }
        }
        v112 = (unsigned __int8 **)sub_22F072CEC(v18, a2, 2177, 1);
        if (v112)
        {
          v113 = v112;
          v114 = *v112;
          if (!v114)
          {
            v114 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v113[1]);
            *v113 = v114;
          }
          v114[*v114 + 1] = 2;
          v115 = *v113;
          v116 = **v113;
          *v115 = v116 + 1;
          *(_QWORD *)&v115[8 * v116 + 16] = 2;
          v115[(v116 + 1) + 1] = 2;
          v117 = *v113;
          v118 = **v113;
          *v117 = v118 + 1;
          *(_QWORD *)&v117[8 * v118 + 16] = v55;
          v117[(v118 + 1) + 1] = 11;
          v119 = *v113;
          v120 = **v113;
          *v119 = v120 + 1;
          *(_QWORD *)&v119[8 * v120 + 16] = v85;
        }
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 64))(v18))
          goto LABEL_14;
        v98 = (unsigned __int8 **)sub_22F072E10(v18, v86, 2290);
        v121 = *v98;
        if (!*v98)
        {
          v121 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v98[1]);
          *v98 = v121;
        }
        v31 = 0;
        v121[*v121 + 1] = 2;
        goto LABEL_175;
      }
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v45 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45
        && ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v18 + 96))(v18, v33) + 2000)
                      + 1) & 4) == 0
         || !sub_22F016844(v18, v142, *((unint64_t *)&v142 + 1), 1))
        && (sub_22F01C988(v18, a2, 2, v34) & 1) != 0)
      {
        goto LABEL_14;
      }
      if (!v44)
        break;
    }
    v46 = *v45;
    v47 = *(_QWORD *)(*(_QWORD *)(*v45 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_DWORD *)(v47 + 16) & 0xFEu) - 2 <= 3)
    {
      v48 = v42;
      v49 = sub_22EF5C728(*(_QWORD *)(v18 + 8), v34);
      if (*(_BYTE *)(v49 + 16) == 2)
        v50 = v49;
      else
        v50 = 0;
      v51 = *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v41);
      v52 = (unint64_t *)(v50 + 40);
      v53 = *(_DWORD *)(v50 + 48);
      if (v53 >= 0x41)
      {
        v61 = v53 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v50 + 40));
        v42 = v48;
        if (v61 > 0x40)
        {
LABEL_81:
          v34 = *(_QWORD *)(v50 + 32);
          if (v51 >= v39[4])
            sub_22F01CCF4((uint64_t)v39, v51);
          v40 = 0;
          v39 = (_DWORD *)(*((_QWORD *)v39 + 1) + 72 * v51);
          goto LABEL_111;
        }
        v52 = (unint64_t *)*v52;
      }
      else
      {
        v42 = v48;
      }
      if (*v52 <= v51)
        goto LABEL_127;
      goto LABEL_81;
    }
    v54 = *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v41);
    if (*(_DWORD *)(v47 + 16) == 12)
    {
      if (v54 >= 2)
      {
LABEL_127:
        if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 96))(v18) + 2000) + 1) & 2) == 0)
          goto LABEL_10;
        v78 = v18;
        v79 = a2;
        v38 = 2172;
LABEL_119:
        v80 = (unsigned __int8 **)sub_22F072CEC(v78, v79, v38, 0);
        if (v80)
        {
          v81 = v80;
          v82 = *v80;
          if (!v82)
          {
            v82 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v81[1]);
            *v81 = v82;
          }
          v31 = 0;
          v82[*v82 + 1] = 2;
          v83 = *v81;
          v84 = **v81;
          *v83 = v84 + 1;
          *(_QWORD *)&v83[8 * v84 + 16] = 2;
          goto LABEL_15;
        }
        goto LABEL_14;
      }
      if (*(_BYTE *)(v46 + 16) != 12)
        v46 = sub_22F10CF48(v46);
      if ((v34 & 1) != 0)
        v87 = 1;
      else
        v87 = v45[1] & 1;
      v106 = *(_QWORD *)(v46 + 32);
      if ((v34 & 4) != 0)
      {
        v107 = v87 | v106;
      }
      else
      {
        v107 = v87 | v106;
        if ((v45[1] & 4) == 0)
          goto LABEL_154;
      }
      v107 |= 4uLL;
LABEL_154:
      if (*v39 == 5)
      {
        if (v54)
          v108 = (uint64_t)(v39 + 6);
        else
          v108 = (uint64_t)(v39 + 2);
        v109 = sub_22F041848(&v137, v108, v107);
      }
      else
      {
        if (v54)
          v110 = (llvm::APFloatBase *)(v39 + 10);
        else
          v110 = (llvm::APFloatBase *)(v39 + 2);
        v109 = sub_22F041B68(&v137, v110, v107);
      }
      v31 = v109;
      goto LABEL_15;
    }
    v40 = v54 & 0xFFFFFFFFFFFFFFF8;
    if (v40 && (*(_DWORD *)(v40 + 28) & 0x7Fu) - 49 <= 2)
    {
      if ((*(_BYTE *)(v40 + 68) & 2) != 0)
      {
        if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 96))(v18) + 2000) + 1) & 4) == 0
          || !sub_22F016844(v18, v142, *((unint64_t *)&v142 + 1), 1))
        {
          v89 = (unsigned __int8 **)sub_22F072CEC(v18, a2, 2170, 1);
          if (v89)
          {
            v90 = v89;
            v91 = *v89;
            if (!v91)
            {
              v91 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v90[1]);
              *v90 = v91;
            }
            v91[*v91 + 1] = 2;
            v92 = *v90;
            v93 = **v90;
            *v92 = v93 + 1;
            *(_QWORD *)&v92[8 * v93 + 16] = 2;
            v92[(v93 + 1) + 1] = 11;
            v94 = *v90;
            v95 = **v90;
            *v94 = v95 + 1;
            *(_QWORD *)&v94[8 * v95 + 16] = v40;
          }
          v96 = *(_DWORD *)(v40 + 24);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 64))(v18))
            sub_22F072E10(v18, v96, 100);
          goto LABEL_14;
        }
        v47 = *(_QWORD *)(*(_QWORD *)(*v45 + 8) & 0xFFFFFFFFFFFFFFF0);
      }
      if ((*(_DWORD *)(sub_22F114198(*(_QWORD *)(v47 + 24)) + 72) & 0xE000) == 0x4000)
      {
        v136 = v40;
        v55 = *((_QWORD *)v39 + 1);
        if (v55)
        {
          v56 = *((_QWORD *)v39 + 1);
          if ((*(_BYTE *)(v55 + 29) & 0x80) != 0)
            v56 = sub_22EFB5D7C(*((_QWORD *)v39 + 1));
          v57 = v136;
          if ((*(_BYTE *)(v136 + 29) & 0x80) != 0)
            v57 = sub_22EFB5D7C(v136);
          if (v56 == v57)
          {
            v39 = (_DWORD *)*((_QWORD *)v39 + 2);
            v40 = v136;
            goto LABEL_94;
          }
        }
        v97 = (unsigned __int8 **)sub_22F072CEC(v18, a2, 2169, 0);
        if (!v97)
          goto LABEL_14;
        v98 = v97;
        v99 = *v97;
        if (!v99)
        {
          v99 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v98[1]);
          *v98 = v99;
        }
        v31 = 0;
        v99[*v99 + 1] = 2;
        v100 = *v98;
        v101 = **v98;
        *v100 = v101 + 1;
        *(_QWORD *)&v100[8 * v101 + 16] = 2;
        v100[(v101 + 1) + 1] = 11;
        v102 = *v98;
        v103 = **v98;
        *(_QWORD *)&(*v98)[8 * v103 + 16] = v136;
        LOBYTE(v103) = v103 + 1;
        *v102 = v103;
        v102[v103 + 1] = 2;
        v104 = *v98;
        v105 = **v98;
        *v104 = v105 + 1;
        *(_QWORD *)&v104[8 * v105 + 16] = v55 == 0;
        v104[(v105 + 1) + 1] = 11;
LABEL_175:
        v122 = *v98;
        v123 = **v98;
        *v122 = v123 + 1;
        *(_QWORD *)&v122[8 * v123 + 16] = v55;
        goto LABEL_15;
      }
      v39 = (_DWORD *)(*((_QWORD *)v39 + 1) + 72 * (v39[4] + sub_22EFC306C(v40)));
LABEL_94:
      v66 = *(_QWORD *)(v40 + 48);
      v67 = (v34 & 1) == 0 && (v45[1] & 1) == 0;
      if ((v34 & 4) != 0)
      {
        LODWORD(v69) = !v67;
        if ((*(_DWORD *)(v40 + 68) & 2) != 0)
          v69 = 0;
        else
          v69 = v69;
        v34 = v66 | v69;
      }
      else
      {
        LODWORD(v68) = !v67;
        if ((*(_DWORD *)(v40 + 68) & 2) != 0)
          v68 = 0;
        else
          v68 = v68;
        v34 = v66 | v68;
        if ((v45[1] & 4) == 0)
        {
LABEL_108:
          if ((v66 & 4) != 0 || (*(_QWORD *)((v66 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0)
            v134 = v40;
          goto LABEL_111;
        }
      }
      v34 |= 4uLL;
      goto LABEL_108;
    }
    v58 = sub_22F10C2A4(v46);
    if (v58 && (*(_DWORD *)(v58 + 28) & 0x7Fu) - 35 >= 3)
      v58 = 0;
    v59 = *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v41) & 0xFFFFFFFFFFFFFFF8;
    if (v59)
    {
      if ((*(_DWORD *)(v59 + 28) & 0x7Fu) - 35 >= 3)
        v60 = 0;
      else
        v60 = *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v41) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      v60 = 0;
    }
    v62 = sub_22F01D5B0(v58, v60);
    v63 = *((_QWORD *)v39 + 1);
    v64 = sub_22EF6477C(*(_QWORD *)(v18 + 8), v60);
    v65 = (v34 & 1) == 0 && (v45[1] & 1) == 0;
    v39 = (_DWORD *)(v63 + 72 * v62);
    if ((v34 & 4) != 0)
    {
      v34 = v64 | !v65;
LABEL_92:
      v40 = 0;
      v34 |= 4uLL;
      goto LABEL_111;
    }
    v34 = v64 | !v65;
    if ((v45[1] & 4) != 0)
      goto LABEL_92;
    v40 = 0;
LABEL_111:
    ++v41;
    if (!*v39)
      goto LABEL_112;
  }
  switch(*v39)
  {
    case 2:
      if ((sub_22F041848(&v137, (uint64_t)(v39 + 2), v34) & 1) == 0)
        goto LABEL_14;
      goto LABEL_193;
    case 3:
      if ((sub_22F041B68(&v137, (llvm::APFloatBase *)(v39 + 2), v34) & 1) == 0)
        goto LABEL_14;
      goto LABEL_193;
    case 7:
      if (!sub_22F01D84C((uint64_t *)&v137, v34))
        goto LABEL_14;
      v124 = *v45;
      if (!*v45 || *(_BYTE *)(v124 + 16) != 39)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v124 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
          goto LABEL_130;
        v124 = sub_22F10CF48(v124);
        if (!v124)
          goto LABEL_130;
      }
      v125 = *(_QWORD *)(v124 + 32);
      if (v125 < 0x10)
        goto LABEL_130;
      v126 = v141;
      if (*(_DWORD *)v141 != 2)
        goto LABEL_130;
      v127 = (int)v140;
      if (((_DWORD)v140 - 5) >= 2)
        goto LABEL_130;
      v128 = (const llvm::APInt *)(v141 + 1);
      LODWORD(v149) = *((_DWORD *)v141 + 4);
      if (v149 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v148, v128);
      else
        v148 = *(_QWORD *)v128;
      BYTE4(v149) = *((_BYTE *)v126 + 20);
      if (v127 == 6)
        sub_22F041BF0((llvm::APInt *)&v148);
      v159 = 0;
      v158 = 0uLL;
      LODWORD(v160) = v160 | 1;
      v162 = 0;
      v163 = v165;
      v164 = 0x800000000;
      v165[8] = 0;
      v165[9] = 0;
      sub_22F01D8E0(&v158, v137[1], v39);
      v129 = v137;
      v130 = v138;
      LODWORD(v147) = v149;
      if (v149 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v146, (const llvm::APInt *)&v148);
      else
        v146 = v148;
      BYTE4(v147) = BYTE4(v149);
      v131 = sub_22F01DC84((uint64_t)v129, v130, (uint64_t)&v158, v125, (uint64_t)&v146);
      if (v147 >= 0x41 && v146)
        MEMORY[0x2348A0E84](v146, 0x1000C8000313F17);
      if (v131)
        sub_22F00676C((uint64_t)&v158, (uint64_t)v39);
      if (v163 != v165)
        free(v163);
      if (v149 >= 0x41 && v148)
        MEMORY[0x2348A0E84](v148, 0x1000C8000313F17);
      if ((v131 & 1) == 0)
        goto LABEL_14;
LABEL_193:
      if (v40 && (*(_BYTE *)(v40 + 68) & 1) != 0 && !sub_22F01CBE4(v18, a2, v39, v40))
        goto LABEL_14;
      v31 = 1;
      break;
    case 8:
      if (!sub_22F01D84C((uint64_t *)&v137, v34))
        goto LABEL_14;
      v21 = v137;
      v22 = v138;
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v45 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 >= 2)
        goto LABEL_11;
      if (!sub_22F041D0C(v137, v138, (int)v140, (uint64_t)v39, (uint64_t)v141))
        goto LABEL_14;
      goto LABEL_193;
    default:
LABEL_130:
      v21 = v137;
      v22 = v138;
      goto LABEL_11;
  }
LABEL_15:
  if (v150 >= 2)
    sub_22EF53BC0(&v150);
  return v31;
}

uint64_t sub_22F012DB0(uint64_t *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int128 a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  unint64_t v41;
  unsigned __int8 **v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unint64_t v58;
  unsigned __int8 **v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  int v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  unsigned __int8 **v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  unint64_t v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  unsigned __int8 **v77;
  unint64_t v78;
  BOOL v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  _BYTE **v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  _DWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  _BYTE **v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BOOL8 v105;
  char v106;
  uint64_t *v107;
  unsigned int v108;
  uint64_t v109;
  unsigned __int8 *v110;
  _QWORD *v111;
  int v112;
  int v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t *v133;
  uint64_t v134[9];
  uint64_t v135;
  void **v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  _QWORD v142[11];
  void *v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  _BYTE v150[64];
  uint64_t v151;
  uint64_t v152;
  uint64_t v153[3];
  uint64_t v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  _BYTE v158[64];
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;

  v161 = *MEMORY[0x24BDAC8D0];
  if (sub_22EFFA8F0((uint64_t)a2) - 1190 <= 3)
  {
    v41 = *a2;
    v42 = (unsigned __int8 **)((char *)a2 + (v41 >> 24));
    if ((*(_BYTE *)(sub_22EFFA604(*v42) + 83) & 0xC0) != 0)
      return sub_22F010358((int)a1, (int)v42[((v41 >> 18) & 1) + 1], v43, v44, v45, v46, v47, v48, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
               a20,
               a21,
               a22,
               a23,
               a24,
               a25,
               a26,
               a27,
               a28,
               a29,
               a30,
               a31,
               a32,
               a33,
               a34,
               a35,
               a36,
               a37,
               a38,
               a39);
  }
  LODWORD(v134[0]) = 0;
  v50 = *a1;
  v51 = *(_DWORD *)(*a1 + 216);
  sub_22F0270D4(*(_DWORD **)(*a1 + 24));
  v58 = *a2;
  v59 = (unsigned __int8 **)((char *)a2 + (v58 >> 24));
  v60 = *v59;
  if (*v59)
  {
    while (1)
    {
      v61 = v60;
      v62 = *v60;
      if (v62 > 213)
      {
        if (v62 == 233)
        {
          if ((*(_DWORD *)v61 & 0x7C0000) != 0x300000)
            goto LABEL_22;
          v64 = v61 + 16;
        }
        else
        {
          if (v62 != 214)
            goto LABEL_22;
          v64 = v61 + 24;
        }
      }
      else if (v62 == 155)
      {
        if ((**((_DWORD **)v61 + 2) & 0x18000) != 0)
          goto LABEL_22;
        if (v61[48])
          v64 = v61 + 24;
        else
          v64 = v61 + 32;
      }
      else
      {
        if (v62 != 176)
          goto LABEL_22;
        v63 = *((unsigned int *)v61 + 5);
        if ((_DWORD)v63 == -1)
          goto LABEL_22;
        v64 = &v61[8 * v63 + 40];
      }
      v60 = *(unsigned __int8 **)v64;
      if (v60 == v61)
        goto LABEL_22;
    }
  }
  v61 = 0;
LABEL_22:
  v65 = *((_QWORD *)v61 + 1);
  memset(v153, 0, sizeof(v153));
  LODWORD(v154) = -1;
  v155 = 0;
  v156 = v158;
  v157 = 0x800000000;
  v66 = &v59[((v58 >> 18) & 1) + 1];
  v160 = 0;
  v159 = 0;
  v67 = a2[4];
  v68 = (uint64_t *)(v65 & 0xFFFFFFFFFFFFFFF0);
  v69 = *(_QWORD *)(v65 & 0xFFFFFFFFFFFFFFF0);
  v70 = *(_QWORD *)(*(_QWORD *)(v69 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v70)
    v71 = (*(_DWORD *)(v70 + 16) & 0xFF800FF) == 136839179;
  else
    v71 = 0;
  if (!v71)
  {
    if ((*(_BYTE *)(v69 + 16) == 39 || *(_DWORD *)(v70 + 16) == 39 && (v69 = sub_22F10CF48(v69)) != 0)
      && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v69 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 25 <= 1)
    {
      v143 = 0;
      v144 = 0;
      v145 = 0;
      v146 |= 1u;
      v147 = 0;
      v148 = v150;
      v149 = 0x800000000;
      v151 = 0;
      v152 = 0;
      v135 = *a1;
      v136 = &v143;
      LOBYTE(v137) = 0;
      v132 = v51;
      if (sub_22F00C45C(&v135, v61, v52, v53, v54, v55, v56, v57))
      {
        if (!v145 && (v143 & 3) == 0)
        {
          v73 = (unint64_t)v143 & 0xFFFFFFFFFFFFFFFCLL;
          if (((unint64_t)v143 & 0xFFFFFFFFFFFFFFFCLL) != 0 && (*(_DWORD *)(v73 + 28) & 0x7Eu) - 52 < 6)
          {
            v97 = *(_QWORD *)(*a1 + 8);
            v98 = sub_22F10ACF8(*v68);
            if (sub_22EF5F5D4(v97, v98, *(_QWORD *)(v73 + 48)))
            {
              v99 = *(unsigned __int8 *)a2;
              if (v99 != 141)
              {
                v130 = 0;
                v75 = 0;
                goto LABEL_136;
              }
              v100 = a2[1] & 0x3F;
              if (v100 - 18 >= 8)
              {
                v75 = 0;
                v130 = 0;
                if (v100 > 0x1D || ((1 << v100) & 0x30008000) == 0)
                  goto LABEL_136;
              }
              v101 = (_BYTE **)*a1;
              v102 = *(_QWORD *)(*a1 + 24);
              v103 = *(unsigned int *)(v102 + 92);
              v104 = (*(_DWORD *)(v102 + 120) + 1);
              *(_DWORD *)(v102 + 120) = v104;
              v75 = v103 | (v104 << 32);
              v105 = (*(_DWORD *)(v73 + 28) & 0x7Eu) - 54 < 4;
              if (sub_22F0279B4((uint64_t)&v66[v105], v67 - v105, v73, v75, v101, v73, 1))
              {
                v130 = v73;
LABEL_136:
                v131 = v75;
                if ((*(_DWORD *)(v73 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
                  goto LABEL_205;
                if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v73 + 32))(v73) + 80) & 0xE000) != 0x4000
                  && ((*(_QWORD *)(v73 + 40) & 7) != 6
                   || (*(_DWORD *)(*(_QWORD *)(v73 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
                {
                  v120 = *a1;
                  if ((_DWORD)v67)
                  {
                    if (sub_22F0098FC(v120, *v66, v153))
                    {
                      v121 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 96))(*a1);
                      if (v99 == 141
                        && (**(_QWORD **)(v121 + 2000) & 0x1000) != 0
                        && (*(_QWORD *)a2 & 0x3F00000000) == 0xF00000000
                        && (*(_BYTE *)(v73 + 82) & 0x80) != 0)
                      {
                        v133 = v153;
                        if (!sub_22F013A2C((uint64_t *)*a1, *v66, (uint64_t)v153))
                        {
                          v74 = 0;
                          goto LABEL_163;
                        }
                      }
                      --v67;
                      ++v66;
                      v133 = v153;
LABEL_200:
                      v74 = 1;
                      goto LABEL_201;
                    }
                  }
                  else
                  {
                    sub_22F072CEC(v120, (uint64_t)a2, 103, 0);
                    v67 = 0;
                  }
LABEL_162:
                  v74 = 0;
                  v133 = 0;
LABEL_163:
                  LOBYTE(v75) = 0;
                  goto LABEL_201;
                }
                if (!sub_22EFD799C(v73))
                {
LABEL_205:
                  if (sub_22EFBFDCC(v73, 0, 0))
                  {
                    if ((*(_QWORD *)(v73 + 40) & 7) == 6
                      && (*(_DWORD *)(*(_QWORD *)(v73 + 40) & 0xFFFFFFFFFFFFFFF8) | 2) == 3)
                    {
                      v135 = 0;
                      v136 = 0;
                      v137 = 0;
                      v138 |= 1u;
                      v139 = 0;
                      v140 = v142;
                      v141 = 0x800000000;
                      v142[8] = 0;
                      v142[9] = 0;
                      if (sub_22F027C94(*a1, a2, (uint64_t)&v135))
                      {
                        sub_22F00676C((uint64_t)&v135, (uint64_t)v134);
                        LOBYTE(v75) = sub_22F02D738(v50, 1, v51);
                        v51 = -1;
                      }
                      else
                      {
                        LOBYTE(v75) = 0;
                      }
                      if (v140 != v142)
                        free(v140);
                      v132 = v51;
                      v74 = 0;
                      v133 = 0;
                      goto LABEL_201;
                    }
                    if (sub_22F02836C(*a1, a2))
                    {
                      LOBYTE(v75) = sub_22F02D738(v50, 1, v51);
                      v74 = 0;
                      v133 = 0;
                      v132 = -1;
LABEL_201:
                      v72 = v130;
                      goto LABEL_33;
                    }
                    goto LABEL_162;
                  }
                  goto LABEL_199;
                }
                v118 = *(_WORD *)(v73 + 80) & 0x7F;
                v119 = -40;
                if (v118 > 0x46)
                {
                  switch(v118)
                  {
                    case 'S':
                      goto LABEL_181;
                    case 'G':
                      v119 = -56;
                      goto LABEL_181;
                    case 'Q':
                      goto LABEL_181;
                  }
                }
                else
                {
                  if (v118 <= 0x18)
                  {
                    if (v118 == 16)
                      goto LABEL_149;
                    if (((1 << v118) & 0x1066) != 0)
                      goto LABEL_181;
                    if (v118 == 24)
                    {
LABEL_149:
                      v119 = -48;
LABEL_181:
                      v122 = *(_QWORD *)(v73 + 72 + v119 + 16);
                      v123 = (_QWORD *)(v122 & 0xFFFFFFFFFFFFFFF8);
                      if ((v122 & 4) != 0)
                        v123 = (_QWORD *)*v123;
                      if (v123)
                        v75 = (unint64_t)(v123 - 8);
                      else
                        v75 = 0;
                      v124 = sub_22EFD462C(v75);
                      if (v124 && (*(_DWORD *)(v124 + 28) & 0x7F) == 0x1D)
                        v124 = *(_QWORD *)(v124 + 48);
                      v125 = *(_QWORD *)(v75 + 128);
                      if (!v125
                        || ((*(unsigned __int16 *)(v125 + 8) | (*(unsigned __int8 *)(v125 + 10) << 16)) & 0x100000) == 0
                        || (*(_BYTE *)(v125 + 104) & 4) == 0)
                      {
                        v133 = 0;
                        v74 = 1;
                        v73 = v124;
                        goto LABEL_201;
                      }
                      v126 = *(_QWORD *)((*(_QWORD *)(v73 + 144) & 0xFFFFFFFFFFFFFFF8) + 24);
                      v127 = *(_QWORD *)(v124 + 144);
                      if ((v127 & 6) != 0)
                        v128 = 0;
                      else
                        v128 = v127 & 0xFFFFFFFFFFFFFFF8;
                      v135 = 0;
                      v73 = sub_22EFE9880(v128, *(_QWORD *)v126, *(unsigned int *)(v126 + 8), (uint64_t)&v135);
LABEL_199:
                      v133 = 0;
                      goto LABEL_200;
                    }
                  }
                  if (v118 == 70)
                  {
LABEL_179:
                    v119 = -64;
                    goto LABEL_181;
                  }
                }
                if (v118 - 52 < 6)
                {
                  v119 = -72;
                  goto LABEL_181;
                }
                if (v118 - 33 < 5)
                  goto LABEL_179;
                goto LABEL_149;
              }
              v131 = v75;
              v74 = 0;
              v133 = 0;
              LOBYTE(v75) = 0;
              v72 = v73;
LABEL_33:
              if (v148 != v150)
              {
                v76 = v67;
                v77 = v66;
                v78 = v72;
                free(v148);
                v72 = v78;
                v66 = v77;
                v67 = v76;
              }
              if ((v74 & 1) == 0)
              {
                v51 = v132;
                goto LABEL_61;
              }
              v79 = 0;
              v51 = v132;
              if (v72)
                goto LABEL_74;
              goto LABEL_73;
            }
            sub_22F072CEC(*a1, (uint64_t)a2, 103, 0);
            v72 = 0;
            v131 = 0;
LABEL_32:
            v74 = 0;
            v133 = 0;
            LOBYTE(v75) = 0;
            goto LABEL_33;
          }
        }
        sub_22F072CEC(*a1, (uint64_t)v61, 103, 0);
      }
      v72 = 0;
      v131 = 0;
      v73 = 0;
      goto LABEL_32;
    }
    v82 = *a1;
    v83 = (uint64_t)a2;
    goto LABEL_59;
  }
  v80 = *v61;
  if (v80 != 188)
  {
    if ((v80 & 0xFE) != 0x70)
    {
      v82 = *a1;
      if (v80 == 129)
      {
        if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 96))(v82) + 2000) + 1) & 0x10) == 0)
        {
          v84 = *a1;
          sub_22EFF605C((uint64_t)v61);
          sub_22F072D74(v84, v85, 2266, 0);
        }
        if (sub_22F0098FC(*a1, *((_QWORD *)v61 + 2), v153))
        {
          v86 = 0;
          v87 = *((_QWORD *)v61 + 8);
          if ((v87 & 1) == 0)
          {
            v88 = (uint64_t *)(v87 & 0xFFFFFFFFFFFFFFFELL);
            if (v88)
              v86 = *v88;
          }
          LOBYTE(v75) = sub_22F027138((uint64_t *)*a1, (uint64_t)v61, (uint64_t)v153, v86);
          goto LABEL_61;
        }
        goto LABEL_60;
      }
      goto LABEL_58;
    }
    v81 = sub_22F0247C4((_BYTE **)*a1, (uint64_t)v61, (uint64_t)v153, 0);
    if (v81)
    {
      v73 = v81;
      if ((*(_DWORD *)(v81 + 28) & 0x7Eu) - 58 > 0xFFFFFFFB)
        goto LABEL_71;
      goto LABEL_47;
    }
LABEL_60:
    LOBYTE(v75) = 0;
    goto LABEL_61;
  }
  if (!sub_22F0098FC(*a1, *((_QWORD *)v61 + 2), v153))
    goto LABEL_60;
  v73 = *((_QWORD *)v61 + 3);
  if (!v73 || (*(_DWORD *)(v73 + 28) & 0x7Eu) - 58 <= 0xFFFFFFFB)
  {
LABEL_47:
    v82 = *a1;
LABEL_58:
    v83 = (uint64_t)v61;
LABEL_59:
    sub_22F072CEC(v82, v83, 103, 0);
    goto LABEL_60;
  }
  if ((v61[2] & 8) == 0)
  {
LABEL_71:
    v79 = 0;
    goto LABEL_72;
  }
  v79 = *((_QWORD *)v61 + 6) != 0;
LABEL_72:
  v133 = v153;
LABEL_73:
  v89 = (_BYTE **)*a1;
  v90 = *(_QWORD *)(*a1 + 24);
  v91 = *(unsigned int *)(v90 + 92);
  v92 = (*(_DWORD *)(v90 + 120) + 1);
  *(_DWORD *)(v90 + 120) = v92;
  v131 = v91 | (v92 << 32);
  v93 = sub_22F0279B4((uint64_t)v66, v67, v73, v131, v89, v73, 0);
  LOBYTE(v75) = 0;
  v72 = v73;
  if (v93)
  {
LABEL_74:
    v129 = v72;
    v143 = &v145;
    v144 = 0x400000000;
    if (!v133)
    {
LABEL_101:
      if (v73 && (*(_DWORD *)(v73 + 28) & 0x7F) == 0x39)
      {
        v107 = (uint64_t *)*a1;
        v108 = *(_WORD *)(v73 + 80) & 0x7F;
        v109 = -40;
        if (v108 > 0x46)
        {
          switch(v108)
          {
            case 'S':
              goto LABEL_125;
            case 'G':
              v109 = -56;
              goto LABEL_125;
            case 'Q':
LABEL_125:
              v114 = *(_QWORD *)(v73 + 72 + v109 + 16);
              v115 = (_QWORD *)(v114 & 0xFFFFFFFFFFFFFFF8);
              if ((v114 & 4) != 0)
                v115 = (_QWORD *)*v115;
              if (v115)
                v116 = (uint64_t)(v115 - 8);
              else
                v116 = 0;
              v117 = sub_22EF6477C(*(_QWORD *)(*a1 + 8), v116);
              if (!sub_22F027138(v107, (uint64_t)a2, (uint64_t)v133, v117))
                goto LABEL_132;
LABEL_131:
              LOBYTE(v75) = sub_22F02D738(v50, 1, v51);
              v51 = -1;
              goto LABEL_133;
          }
        }
        else
        {
          if (v108 <= 0x18)
          {
            if (v108 == 16)
            {
LABEL_106:
              v109 = -48;
              goto LABEL_125;
            }
            if (((1 << v108) & 0x1066) != 0)
              goto LABEL_125;
            if (v108 == 24)
              goto LABEL_106;
          }
          if (v108 == 70)
          {
LABEL_122:
            v109 = -64;
            goto LABEL_125;
          }
        }
        if (v108 - 52 >= 6)
        {
          if (v108 - 33 >= 5)
            goto LABEL_106;
          goto LABEL_122;
        }
        v109 = -72;
        goto LABEL_125;
      }
      v135 = 0;
      v110 = (unsigned __int8 *)sub_22EFBF910(v73, &v135);
      v111 = (_QWORD *)*a1;
      sub_22EFF605C((uint64_t)a2);
      if (sub_22F028A44(v111, v112, (_QWORD *)v73, v135, (uint64_t)v110))
      {
        sub_22EFF605C((uint64_t)a2);
        if (sub_22F00B12C(v113, v135, (uint64_t)v133, (uint64_t *)v66, v67, v129, v131, v110, (uint64_t *)*a1, (uint64_t)v134, 0))
        {
          if ((_DWORD)v144 && !sub_22F028DA0(*a1, (uint64_t)a2, (uint64_t)v134, v143, v144))
          {
            LOBYTE(v75) = 0;
            goto LABEL_133;
          }
          goto LABEL_131;
        }
      }
LABEL_132:
      LOBYTE(v75) = 0;
LABEL_133:
      if (v143 != &v145)
        free(v143);
      goto LABEL_61;
    }
    if ((*(_DWORD *)(v73 + 28) & 0x7Eu) - 54 >= 4)
      v94 = 0;
    else
      v94 = (_DWORD *)v73;
    if (v94)
    {
      v95 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v94 + 32))(v94);
      if ((*(_BYTE *)(v95 + 82) & 0xC) != 0)
      {
        if (v79)
          goto LABEL_81;
LABEL_100:
        v73 = sub_22F028540(*a1, (uint64_t)a2, (uint64_t)v133, (uint64_t)v94, (uint64_t)&v143);
        if (!v73)
          goto LABEL_132;
        goto LABEL_101;
      }
      if (sub_22EFD7260(v95))
        v106 = v79;
      else
        v106 = 1;
      if ((v106 & 1) == 0)
        goto LABEL_100;
    }
LABEL_81:
    if ((v94[7] & 0x7F) == 0x39)
      v96 = 9;
    else
      v96 = 5;
    if (!sub_22F02E038((uint64_t *)*a1, (uint64_t)a2, (uint64_t)v133, v96, 0))
      goto LABEL_132;
    goto LABEL_101;
  }
LABEL_61:
  if (v156 != v158)
    free(v156);
  if (v51 != -1)
    sub_22F02D738(v50, 0, v51);
  --*(_DWORD *)(*(_QWORD *)(v50 + 24) + 104);
  if ((v75 & 1) != 0)
    sub_22F01D8E0(a1[1], *(_QWORD *)(*a1 + 8), v134);
  if (LODWORD(v134[0]) >= 2)
    sub_22EF53BC0(v134);
  return v75 & 1;
}

uint64_t sub_22F013A2C(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  unsigned __int8 **v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _BOOL8 v29;
  uint64_t result;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  _BOOL4 v58;
  uint64_t v59;
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 **v68;
  unsigned __int8 **v69;
  unsigned __int8 *v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unsigned __int8 **v79;
  unsigned __int8 **v80;
  unsigned __int8 *v81;
  _BYTE *v82;
  uint64_t v83;
  _BOOL8 v84;
  _BYTE *v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  unsigned __int8 **v93;
  unsigned __int8 **v94;
  unsigned __int8 *v95;
  _BYTE *v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  int v100;
  unsigned __int8 **v101;
  unsigned __int8 **v102;
  unsigned __int8 *v103;
  _BYTE *v104;
  uint64_t v105;
  _BYTE *v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  int v112;
  unsigned __int8 **v113;
  unsigned __int8 **v114;
  unsigned __int8 *v115;
  _BYTE *v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  unsigned __int8 **v122;
  unsigned __int8 *v123;
  unsigned __int8 *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  char *v130;
  int v131;
  uint64_t *v132;
  int v133;
  char *v134;
  __int128 v135;
  _DWORD *v136;
  unint64_t v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  _BYTE v143[72];
  void *v144;
  uint64_t v145;
  _BYTE v146[64];
  __int128 v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;

  v150 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a3 + 144) & 2) != 0)
    return 0;
  v4 = a3 + 24;
  if ((*(_BYTE *)(a3 + 24) & 1) != 0)
    return 0;
  v5 = (uint64_t)a2;
  v144 = v146;
  v145 = 0x400000000;
  if (!a2)
  {
LABEL_238:
    v29 = 1;
    goto LABEL_240;
  }
  v7 = *(_DWORD *)(a3 + 56);
  v8 = a2;
  while (1)
  {
    v9 = *v8;
    if (v9 != 107)
      break;
    v20 = (unsigned __int8 **)(v8 + 24);
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v22 = *(_DWORD *)(v21 + 16);
    if (v21)
      v23 = v22 == 11;
    else
      v23 = 0;
    if (v23)
    {
      if (((*(_DWORD *)(v21 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
        goto LABEL_41;
LABEL_40:
      v20 = (unsigned __int8 **)(v8 + 16);
      goto LABEL_41;
    }
    if (v21 && v22 == 44)
    {
      v24 = sub_22F114198(*(_QWORD *)(v21 + 24));
      if (((*(_BYTE *)(v24 + 74) & 1) != 0 || *(_QWORD *)(v24 + 128) > 7uLL)
        && (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v21 + 24)) + 72) & 0x8000000000) == 0)
      {
        goto LABEL_40;
      }
    }
    else if (v22 == 9)
    {
      goto LABEL_40;
    }
LABEL_41:
    v17 = sub_22EFFED0C(*v20);
    v25 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v17 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 16) & 0xFE)
        - 2;
    v19 = v25 < 4;
    if (v25 >= 4)
      goto LABEL_57;
LABEL_42:
    v7 -= v19;
LABEL_51:
    v8 = v17;
    if (!v17)
      goto LABEL_57;
  }
  if (v9 == 153)
  {
    v17 = (unsigned __int8 *)*((_QWORD *)v8 + 2);
    v18 = (*(_DWORD *)v8 >> 18) & 0x7F;
    if ((v18 - 7) >= 2)
    {
      if (v18 != 5)
        goto LABEL_57;
      goto LABEL_51;
    }
    v19 = *((_DWORD *)v8 + 1);
    goto LABEL_42;
  }
  if (v9 == 188)
  {
    v10 = *((_QWORD *)v8 + 3);
    if (v10)
    {
      if ((*(_DWORD *)(v10 + 28) & 0x7Fu) - 52 >= 0xFFFFFFFD)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        {
          v12 = *(_QWORD *)(v10 + 16);
          v13 = v12 & 0xFFFFFFFFFFFFFFF8;
          if ((v12 & 4) != 0)
            v13 = *(_QWORD *)v13;
          v14 = (*(_WORD *)(v13 + 8) & 0x7E) - 34;
          if (v13)
            v15 = v13 - 64;
          else
            v15 = 0;
          if (v14 >= 4)
            v15 = 0;
          if ((*(_DWORD *)(v15 + 72) & 0xE000) == 0x4000)
          {
            if (v11)
              goto LABEL_20;
LABEL_21:
            while ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
            {
              v16 = sub_22F10CF48(v11);
              if (!v16)
                break;
              while (1)
              {
                v11 = *(_QWORD *)(*(_QWORD *)(v16 + 32) & 0xFFFFFFFFFFFFFFF0);
                if (!v11)
                  break;
LABEL_20:
                if ((*(_DWORD *)(v11 + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
                  goto LABEL_21;
                v16 = v11;
              }
            }
            v26 = sub_22F10C2A4(v11);
            if (!v26 || (*(_DWORD *)(v26 + 28) & 0x7Fu) - 35 > 2 || sub_22E49F698(v26))
            {
              v27 = v145;
              if (v145 >= (unint64_t)HIDWORD(v145))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v27 = v145;
              }
              v28 = (char *)v144 + 16 * v27;
              *v28 = (v7 - 1);
              v28[1] = v10;
              LODWORD(v145) = v145 + 1;
            }
          }
          v17 = (unsigned __int8 *)*((_QWORD *)v8 + 2);
          --v7;
          goto LABEL_51;
        }
      }
    }
  }
LABEL_57:
  if (!(_DWORD)v145)
    goto LABEL_238;
  sub_22F015608((unint64_t *)&v135, (uint64_t)a1, v5, 2u, a3, *(_QWORD *)(v5 + 8));
  if (v137 >= 0x10)
  {
    v31 = (char *)v144;
    v32 = (char *)v144 + 16 * v145;
    v127 = v4;
    v128 = v5;
    v130 = (char *)v144;
    while (1)
    {
      v29 = v32 == v31;
      if (v32 == v31)
        goto LABEL_240;
      v33 = *((unsigned int *)v32 - 4);
      v134 = v32 - 16;
      v132 = (uint64_t *)*((_QWORD *)v32 - 1);
      v139 = *(_OWORD *)v4;
      v140 = *(_QWORD *)(v4 + 16);
      v141 = v143;
      v142 = 0x800000000;
      if (*(_DWORD *)(a3 + 56))
      {
        sub_22F016FFC((uint64_t)&v141, a3 + 48);
        v34 = v142;
      }
      else
      {
        v34 = 0;
      }
      if ((v139 & 1) == 0 && v34 != v33)
      {
        v73 = *(_QWORD *)a3;
        v74 = *(_QWORD *)(a3 + 8);
        v75 = a1[1];
        sub_22F24C010((uint64_t)&v141, v33);
        LOBYTE(v147) = 0;
        LOBYTE(v138) = 0;
        v76 = v75;
        v77 = v74;
        v4 = v127;
        v5 = v128;
        v78 = sub_22F0170E0(v76, v73, v77, v141, v142, (char *)&v139 + 8, &v140, &v147, &v138);
        v34 = v142;
        LODWORD(v139) = v139 & 3 | (16 * v78) | (8 * v147) | (4 * v138);
      }
      v147 = *(_OWORD *)a3;
      v148 = v141;
      v149 = v34;
      v138 = 0;
      if (sub_22F02BC74(a1[96], *((_DWORD *)a1 + 196), (uint64_t *)&v147, &v138))
        v35 = *(_DWORD *)(v138 + 32);
      else
        v35 = 0;
      if ((v139 & 1) != 0)
        goto LABEL_199;
      v129 = v35;
      if ((v139 & 2) != 0)
        break;
      if ((v139 & 8) == 0 || (((_DWORD)v142 == 1) & (v139 >> 2)) != 0)
      {
        if ((((_DWORD)v142 == 1) & (v139 >> 2)) != 0)
          break;
      }
      else if (*((_QWORD *)v141 + (int)((v139 >> 4) - 1)) == *((_QWORD *)&v139 + 1))
      {
        break;
      }
      v36 = (uint64_t)v136;
      if (*v136)
      {
        v37 = 0;
        v126 = 0;
        v38 = 0;
        v39 = v137;
        v131 = -(int)v142;
        while (1)
        {
          if (((v39 & 1) != 0 || *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFFF0) + 8) & 5 | v39 & 4)
            && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) == 45)
          {
            v147 = v135;
            v148 = v141;
            v149 = v38;
            v138 = 0;
            if ((sub_22F02BC74(a1[96], *((_DWORD *)a1 + 196), (uint64_t *)&v147, &v138) & 1) != 0)
            {
              if (*(_DWORD *)(v138 + 32))
                v39 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFFALL | v39 & 2;
            }
          }
          v40 = v131 + v38;
          if (!(v131 + v38)
            || (v41 = (_BYTE *)(v39 & 0xFFFFFFFFFFFFFFF0), v40 == -1)
            && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
          {
            if ((v39 & 4) != 0
              || (v41 = (_BYTE *)(v39 & 0xFFFFFFFFFFFFFFF0), (*(_BYTE *)((v39 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0))
            {
              v4 = v127;
              v31 = v130;
              if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a1 + 96))(a1) + 2000) + 1) & 1) == 0)
              {
                v64 = (uint64_t)a1;
                v5 = v128;
                goto LABEL_162;
              }
              v87 = v126;
              if (v126)
              {
                v88 = *(_DWORD *)(v126 + 24);
                v89 = 2;
              }
              else
              {
                v92 = v135 & 0xFFFFFFFFFFFFFFFCLL;
                if ((v135 & 3) != 0 || !v92)
                {
                  v87 = 0;
                  v88 = 0;
                  v89 = 0;
                  if ((v135 & 3) == 1 && v92)
                  {
                    sub_22EFF605C(v92);
                    v88 = v112;
                    v87 = 0;
                    v89 = 0;
                  }
                }
                else
                {
                  v88 = *(_DWORD *)(v92 + 24);
                  v87 = v135 & 0xFFFFFFFFFFFFFFFCLL;
                  v89 = 1;
                }
              }
              v133 = v88;
              v113 = (unsigned __int8 **)sub_22F072CEC((uint64_t)a1, v128, 2177, 1);
              if (v113)
              {
                v114 = v113;
                v115 = *v113;
                if (!v115)
                {
                  v115 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v114[1]);
                  *v114 = v115;
                }
                v115[*v115 + 1] = 2;
                v116 = *v114;
                v117 = **v114;
                *v116 = v117 + 1;
                *(_QWORD *)&v116[8 * v117 + 16] = 2;
                v116[(v117 + 1) + 1] = 2;
                v118 = *v114;
                v119 = **v114;
                *v118 = v119 + 1;
                *(_QWORD *)&v118[8 * v119 + 16] = v89;
                v118[(v119 + 1) + 1] = 11;
                v120 = *v114;
                v121 = **v114;
                *v120 = v121 + 1;
                *(_QWORD *)&v120[8 * v121 + 16] = v87;
              }
              if ((*(unsigned int (**)(uint64_t *))(*a1 + 64))(a1))
              {
                v122 = (unsigned __int8 **)sub_22F072E10((uint64_t)a1, v133, 2290);
                v123 = *v122;
                v5 = v128;
                if (!*v122)
                {
                  v123 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v122[1]);
                  *v122 = v123;
                }
                v63 = 0;
                v123[*v123 + 1] = 2;
                v124 = *v122;
                v125 = **v122;
                *v124 = v125 + 1;
                *(_QWORD *)&v124[8 * v125 + 16] = v89;
              }
              else
              {
                v63 = 0;
                v5 = v128;
              }
              goto LABEL_200;
            }
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45
              && ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a1 + 96))(a1) + 2000) + 1) & 4) == 0
               || !sub_22F016844((uint64_t)a1, v135, *((unint64_t *)&v135 + 1), 1))
              && (sub_22F01C988((uint64_t)a1, v128, 2, v39) & 1) != 0)
            {
              goto LABEL_223;
            }
            if (!v40)
            {
              v5 = v128;
              if (v132
                && (v90 = *(uint64_t **)(v36 + 8)) != 0
                && (v90 == v132
                 || (v91 = (*(uint64_t (**)(uint64_t *))(*v90 + 32))(v90),
                     v91 == (*(uint64_t (**)(uint64_t *))(*v132 + 32))(v132))))
              {
                if (**(_DWORD **)(v36 + 16) <= 1u)
                  goto LABEL_212;
              }
              else
              {
                if (v129 == 2)
                {
                  sub_22F072CEC((uint64_t)a1, v128, 2276, 0);
LABEL_218:
                  v63 = 0;
                  goto LABEL_158;
                }
LABEL_212:
                LODWORD(v147) = 0;
                sub_22F007880(v132[6], (uint64_t)&v147);
                sub_22EF53A5C(v36, (unint64_t)v132, (uint64_t)&v147);
                if (v147 >= 2)
                  sub_22EF53BC0((uint64_t *)&v147);
              }
              if (!v37 || (*(_BYTE *)(v37 + 68) & 1) == 0 || sub_22F01CBE4((uint64_t)a1, v128, (int *)v36, v37))
              {
                v63 = 1;
                goto LABEL_158;
              }
              goto LABEL_218;
            }
          }
          v42 = *(_QWORD *)v41;
          v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v41 + 8) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_DWORD *)(v43 + 16) & 0xFEu) - 2 <= 3)
          {
            v44 = sub_22EF5C728(a1[1], v39);
            if (v44)
            {
              if (*(_BYTE *)(v44 + 16) == 2)
                v45 = v44;
              else
                v45 = 0;
            }
            else
            {
              v45 = 0;
            }
            v31 = v130;
            v52 = *((_QWORD *)v141 + v38);
            v53 = (unint64_t *)(v45 + 40);
            v54 = *(_DWORD *)(v45 + 48);
            if (v54 < 0x41)
              goto LABEL_124;
            if (v54 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v45 + 40)) <= 0x40)
            {
              v53 = (unint64_t *)*v53;
LABEL_124:
              if (*v53 <= v52)
              {
                if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a1 + 96))(a1) + 2000) + 1) & 2) == 0)
                {
                  v5 = v128;
                  sub_22F072CEC((uint64_t)a1, v128, 103, 0);
                  v63 = 0;
                  v4 = v127;
                  goto LABEL_200;
                }
                v5 = v128;
                v68 = (unsigned __int8 **)sub_22F072CEC((uint64_t)a1, v128, 2172, 0);
                v4 = v127;
                if (v68)
                  goto LABEL_171;
                goto LABEL_199;
              }
            }
            v39 = *(_QWORD *)(v45 + 32);
            if (v52 >= *(unsigned int *)(v36 + 16))
              sub_22F01CCF4(v36, v52);
            v37 = 0;
            v36 = *(_QWORD *)(v36 + 8) + 72 * v52;
            goto LABEL_155;
          }
          v46 = *((_QWORD *)v141 + v38);
          if (*(_DWORD *)(v43 + 16) == 12)
          {
            if (v46 < 2)
            {
              result = sub_22F10CF48(v42);
              __break(1u);
              return result;
            }
            v4 = v127;
            v5 = v128;
            v31 = v130;
            if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a1 + 96))(a1) + 2000) + 1) & 2) == 0)
              goto LABEL_161;
            v66 = (uint64_t)a1;
            v67 = v128;
            v65 = 2172;
            goto LABEL_170;
          }
          v37 = v46 & 0xFFFFFFFFFFFFFFF8;
          if ((v46 & 0xFFFFFFFFFFFFFFF8) != 0 && (*(_DWORD *)(v37 + 28) & 0x7Fu) - 49 <= 2)
          {
            if ((*(_BYTE *)(v37 + 68) & 2) != 0)
            {
              if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a1 + 96))(a1) + 2000) + 1) & 4) == 0
                || !sub_22F016844((uint64_t)a1, v135, *((unint64_t *)&v135 + 1), 1))
              {
                v5 = v128;
                v93 = (unsigned __int8 **)sub_22F072CEC((uint64_t)a1, v128, 2170, 1);
                v4 = v127;
                if (v93)
                {
                  v94 = v93;
                  v95 = *v93;
                  if (!v95)
                  {
                    v95 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v94[1]);
                    *v94 = v95;
                  }
                  v95[*v95 + 1] = 2;
                  v96 = *v94;
                  v97 = **v94;
                  *v96 = v97 + 1;
                  *(_QWORD *)&v96[8 * v97 + 16] = 2;
                  v96[(v97 + 1) + 1] = 11;
                  v98 = *v94;
                  v99 = **v94;
                  *v98 = v99 + 1;
                  *(_QWORD *)&v98[8 * v99 + 16] = v37;
                }
                v100 = *(_DWORD *)(v37 + 24);
                if ((*(unsigned int (**)(uint64_t *))(*a1 + 64))(a1))
                  sub_22F072E10((uint64_t)a1, v100, 100);
                v63 = 0;
LABEL_225:
                v31 = v130;
                goto LABEL_200;
              }
              v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v41 + 8) & 0xFFFFFFFFFFFFFFF0);
            }
            if ((*(_DWORD *)(sub_22F114198(*(_QWORD *)(v43 + 24)) + 72) & 0xE000) == 0x4000)
            {
              v47 = *(_QWORD *)(v36 + 8);
              if (!v47)
                goto LABEL_219;
              v48 = *(_QWORD *)(v36 + 8);
              if ((*(_BYTE *)(v47 + 29) & 0x80) != 0)
                v48 = sub_22EFB5D7C(*(_QWORD *)(v36 + 8));
              v49 = v37;
              if ((*(_BYTE *)(v37 + 29) & 0x80) != 0)
                v49 = sub_22EFB5D7C(v37);
              if (v48 != v49)
              {
LABEL_219:
                v101 = (unsigned __int8 **)sub_22F072CEC((uint64_t)a1, v128, 2169, 0);
                if (v101)
                {
                  v102 = v101;
                  v103 = *v101;
                  v4 = v127;
                  if (!v103)
                  {
                    v103 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v102[1]);
                    *v102 = v103;
                  }
                  v63 = 0;
                  v103[*v103 + 1] = 2;
                  v104 = *v102;
                  v105 = **v102;
                  *v104 = v105 + 1;
                  *(_QWORD *)&v104[8 * v105 + 16] = 2;
                  v104[(v105 + 1) + 1] = 11;
                  v106 = *v102;
                  v107 = **v102;
                  *(_QWORD *)&(*v102)[8 * v107 + 16] = v37;
                  LOBYTE(v107) = v107 + 1;
                  *v106 = v107;
                  v106[v107 + 1] = 2;
                  v108 = *v102;
                  v109 = **v102;
                  *v108 = v109 + 1;
                  *(_QWORD *)&v108[8 * v109 + 16] = v47 == 0;
                  v108[(v109 + 1) + 1] = 11;
                  v110 = *v102;
                  v111 = **v102;
                  *v110 = v111 + 1;
                  *(_QWORD *)&v110[8 * v111 + 16] = v47;
                }
                else
                {
LABEL_223:
                  v63 = 0;
                  v4 = v127;
                }
                v5 = v128;
                goto LABEL_225;
              }
              v36 = *(_QWORD *)(v36 + 16);
            }
            else
            {
              v36 = *(_QWORD *)(v36 + 8) + 72 * (*(_DWORD *)(v36 + 16) + sub_22EFC306C(v37));
            }
            v59 = *(_QWORD *)(v37 + 48);
            v60 = (v39 & 1) == 0 && (v41[8] & 1) == 0;
            if ((v39 & 4) != 0)
            {
              LODWORD(v62) = !v60;
              if ((*(_DWORD *)(v37 + 68) & 2) != 0)
                v62 = 0;
              else
                v62 = v62;
              v39 = v59 | v62;
            }
            else
            {
              LODWORD(v61) = !v60;
              if ((*(_DWORD *)(v37 + 68) & 2) != 0)
                v61 = 0;
              else
                v61 = v61;
              v39 = v59 | v61;
              if ((*((_QWORD *)v41 + 1) & 4) == 0)
              {
LABEL_152:
                if ((v59 & 4) != 0 || (*(_QWORD *)((v59 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0)
                  v126 = v37;
                goto LABEL_155;
              }
            }
            v39 |= 4uLL;
            goto LABEL_152;
          }
          v50 = sub_22F10C2A4(v42);
          if (v50 && (*(_DWORD *)(v50 + 28) & 0x7Fu) - 35 >= 3)
            v50 = 0;
          if ((*((_QWORD *)v141 + v38) & 0xFFFFFFFFFFFFFFF8) != 0)
            v51 = (*(_DWORD *)((*((_QWORD *)v141 + v38) & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu) - 35 >= 3
                ? 0
                : *((_QWORD *)v141 + v38) & 0xFFFFFFFFFFFFFFF8;
          else
            v51 = 0;
          v55 = sub_22F01D5B0(v50, v51);
          v56 = *(_QWORD *)(v36 + 8);
          v57 = sub_22EF6477C(a1[1], v51);
          v58 = (v39 & 1) == 0 && (v41[8] & 1) == 0;
          v36 = v56 + 72 * v55;
          if ((v39 & 4) != 0)
            break;
          v39 = v57 | !v58;
          if ((*((_QWORD *)v41 + 1) & 4) != 0)
            goto LABEL_136;
          v37 = 0;
LABEL_155:
          ++v38;
          if (!*(_DWORD *)v36)
            goto LABEL_156;
        }
        v39 = v57 | !v58;
LABEL_136:
        v37 = 0;
        v39 |= 4uLL;
        goto LABEL_155;
      }
LABEL_156:
      if (((*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1) & 1) != 0)
      {
        v63 = 0;
        v5 = v128;
LABEL_158:
        v4 = v127;
        v31 = v130;
      }
      else
      {
        v5 = v128;
        v79 = (unsigned __int8 **)sub_22F072CEC((uint64_t)a1, v128, 2174, 0);
        v31 = v130;
        if (v79)
        {
          v80 = v79;
          v81 = *v79;
          if (!v81)
          {
            v81 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v80[1]);
            *v80 = v81;
          }
          v63 = 0;
          v81[*v81 + 1] = 2;
          v82 = *v80;
          v83 = **v80;
          *(_QWORD *)&(*v80)[8 * v83 + 16] = 2;
          LOBYTE(v83) = v83 + 1;
          *v82 = v83;
          v84 = *(_DWORD *)v36 == 1;
          v82[v83 + 1] = 2;
          v85 = *v80;
          v86 = **v80;
          *v85 = v86 + 1;
          *(_QWORD *)&v85[8 * v86 + 16] = v84;
        }
        else
        {
          v63 = 0;
        }
        v4 = v127;
      }
LABEL_200:
      if (v141 != v143)
        free(v141);
      v32 = v134;
      if ((v63 & 1) == 0)
        goto LABEL_240;
    }
    if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a1 + 96))(a1) + 2000) + 1) & 2) == 0)
    {
LABEL_161:
      v64 = (uint64_t)a1;
LABEL_162:
      sub_22F072CEC(v64, v5, 103, 0);
      goto LABEL_199;
    }
    if ((v139 & 2) != 0
      || (v139 & 8) != 0
      && (((_DWORD)v142 == 1) & (v139 >> 2)) == 0
      && *((_QWORD *)v141 + (int)((v139 >> 4) - 1)) == *((_QWORD *)&v139 + 1))
    {
      v65 = 2172;
    }
    else
    {
      v65 = 2176;
    }
    v66 = (uint64_t)a1;
    v67 = v5;
LABEL_170:
    v68 = (unsigned __int8 **)sub_22F072CEC(v66, v67, v65, 0);
    if (v68)
    {
LABEL_171:
      v69 = v68;
      v70 = *v68;
      if (!v70)
      {
        v70 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v69[1]);
        *v69 = v70;
      }
      v63 = 0;
      v70[*v70 + 1] = 2;
      v71 = *v69;
      v72 = **v69;
      *v71 = v72 + 1;
      *(_QWORD *)&v71[8 * v72 + 16] = 2;
    }
    else
    {
LABEL_199:
      v63 = 0;
    }
    goto LABEL_200;
  }
  v29 = 0;
LABEL_240:
  if (v144 != v146)
    free(v144);
  return v29;
}

uint64_t sub_22F014A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  _BOOL4 v39;
  uint64_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  unsigned int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  _BYTE *v51;
  uint64_t v52;
  _QWORD *v53;
  unsigned __int8 *v54;
  _BYTE *v55;
  uint64_t v56;
  _BOOL8 v57;
  _BYTE *v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  unint64_t v73;
  unsigned __int8 **v74;
  unsigned __int8 **v75;
  unsigned __int8 *v76;
  _BYTE *v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  int v81;
  unint64_t v82;
  _QWORD *v83;
  unsigned __int8 *v84;
  _BYTE *v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unsigned __int8 **v100;
  unsigned __int8 **v101;
  unsigned __int8 *v102;
  _BYTE *v103;
  uint64_t v104;
  _BYTE *v105;
  uint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  unsigned __int8 *v111;
  _BYTE *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  unint64_t v119[2];
  _DWORD *v120;
  unint64_t v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;

  v127 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a3 + 24) & 1) != 0)
    return 0;
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) + 2000) + 1) & 4) == 0)
    goto LABEL_3;
  v10.n128_f64[0] = sub_22F015608(v119, a1, a2, 2u, a3, a4);
  v11 = v121;
  if (v121 < 0x10)
    return 0;
  v12 = *(_DWORD *)(a3 + 24);
  if ((v12 & 1) != 0)
    return 0;
  if ((v12 & 2) == 0)
  {
    v13 = *(_DWORD *)(a3 + 56);
    if ((v12 & 8) == 0 || ((v13 == 1) & (v12 >> 2)) != 0)
    {
      if (((v13 == 1) & (v12 >> 2)) == 0)
        goto LABEL_10;
    }
    else if (*(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * (int)((v12 >> 4) - 1)) != *(_QWORD *)(a3 + 32))
    {
LABEL_10:
      v14 = (uint64_t)v120;
      if (!*v120)
      {
LABEL_91:
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 1) == 0)
        {
          result = sub_22F072CEC(a1, a2, 2174, 0);
          if (result)
          {
            v53 = (_QWORD *)result;
            v54 = *(unsigned __int8 **)result;
            if (!*(_QWORD *)result)
            {
              v54 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(result + 8));
              *v53 = v54;
            }
            result = 0;
            v54[*v54 + 1] = 2;
            v55 = (_BYTE *)*v53;
            v56 = *(unsigned __int8 *)*v53;
            *(_QWORD *)(*v53 + 8 * v56 + 16) = 2;
            LOBYTE(v56) = v56 + 1;
            *v55 = v56;
            v57 = *(_DWORD *)v14 == 1;
            v55[v56 + 1] = 2;
            v58 = (_BYTE *)*v53;
            v59 = *(unsigned __int8 *)*v53;
            *v58 = v59 + 1;
            *(_QWORD *)&v58[8 * v59 + 16] = v57;
          }
          return result;
        }
        return 0;
      }
      v15 = 0;
      v16 = 0;
      v117 = v119[0];
      v115 = 0;
      v116 = v119[1];
      v118 = -v13;
      while (1)
      {
        if (((v11 & 1) != 0 || *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 5 | v11 & 4)
          && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) == 45)
        {
          v17 = *(_QWORD *)(a3 + 48);
          *(_QWORD *)&v123 = v117;
          *((_QWORD *)&v123 + 1) = v116;
          *(_QWORD *)&v124 = v17;
          *((_QWORD *)&v124 + 1) = v16;
          v122 = 0;
          if ((sub_22F02BC74(*(_QWORD *)(a1 + 768), *(_DWORD *)(a1 + 784), (uint64_t *)&v123, &v122) & 1) != 0)
          {
            if (*(_DWORD *)(v122 + 32))
              v11 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFFALL | v11 & 2;
          }
        }
        v18 = v118 + v16;
        if (!(v118 + v16)
          || (v19 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFF0), v18 == -1)
          && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
        {
          if ((v11 & 4) != 0
            || (v19 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFF0), (*(_BYTE *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0))
          {
            if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 96))(a1, v10)
                                       + 2000)
                           + 1) & 1) == 0)
              goto LABEL_3;
            v60 = v115;
            if (v115)
            {
              v61 = *(_DWORD *)(v115 + 24);
              v62 = 2;
            }
            else
            {
              v73 = v117 & 0xFFFFFFFFFFFFFFFCLL;
              if ((v117 & 3) != 0 || !v73)
              {
                v60 = 0;
                v61 = 0;
                v62 = 0;
                if ((v117 & 3) == 1 && v73)
                {
                  sub_22EFF605C(v73);
                  v61 = v99;
                  v60 = 0;
                  v62 = 0;
                }
              }
              else
              {
                v61 = *(_DWORD *)(v73 + 24);
                v62 = 1;
                v60 = v117 & 0xFFFFFFFFFFFFFFFCLL;
              }
            }
            v100 = (unsigned __int8 **)sub_22F072CEC(a1, a2, 2177, 1);
            if (v100)
            {
              v101 = v100;
              v102 = *v100;
              if (!v102)
              {
                v102 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v101[1]);
                *v101 = v102;
              }
              v102[*v102 + 1] = 2;
              v103 = *v101;
              v104 = **v101;
              *v103 = v104 + 1;
              *(_QWORD *)&v103[8 * v104 + 16] = 2;
              v103[(v104 + 1) + 1] = 2;
              v105 = *v101;
              v106 = **v101;
              *v105 = v106 + 1;
              *(_QWORD *)&v105[8 * v106 + 16] = v62;
              v105[(v106 + 1) + 1] = 11;
              v107 = *v101;
              v108 = **v101;
              *v107 = v108 + 1;
              *(_QWORD *)&v107[8 * v108 + 16] = v60;
            }
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
            if ((_DWORD)result)
            {
              v109 = sub_22F072E10(a1, v61, 2290);
              v110 = (_QWORD *)v109;
              v111 = *(unsigned __int8 **)v109;
              if (!*(_QWORD *)v109)
              {
                v111 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(v109 + 8));
                *v110 = v111;
              }
              result = 0;
              v111[*v111 + 1] = 2;
              v112 = (_BYTE *)*v110;
              v113 = *(unsigned __int8 *)*v110;
              *v112 = v113 + 1;
              *(_QWORD *)&v112[8 * v113 + 16] = v62;
            }
            return result;
          }
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45
            && ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) + 2000) + 1) & 4) == 0
             || !sub_22F016844(a1, v117, v116, 1))
            && (sub_22F01C988(a1, a2, 2, v11) & 1) != 0)
          {
            return 0;
          }
          if (!v18)
          {
            result = sub_22F0414B0(a1, a2, v11);
            if ((_DWORD)result)
            {
              v63 = *(_DWORD *)v14;
              *(_DWORD *)v14 = *(_DWORD *)a5;
              *(_DWORD *)a5 = v63;
              v64 = *(_OWORD *)(v14 + 8);
              v65 = *(_OWORD *)(v14 + 24);
              v66 = *(_OWORD *)(v14 + 56);
              v125 = *(_OWORD *)(v14 + 40);
              v126 = v66;
              v123 = v64;
              v124 = v65;
              v67 = *(_OWORD *)(a5 + 8);
              v68 = *(_OWORD *)(a5 + 24);
              v69 = *(_OWORD *)(a5 + 40);
              *(_OWORD *)(v14 + 56) = *(_OWORD *)(a5 + 56);
              *(_OWORD *)(v14 + 40) = v69;
              *(_OWORD *)(v14 + 24) = v68;
              *(_OWORD *)(v14 + 8) = v67;
              v70 = v124;
              *(_OWORD *)(a5 + 8) = v123;
              *(_OWORD *)(a5 + 24) = v70;
              v71 = v126;
              *(_OWORD *)(a5 + 40) = v125;
              *(_OWORD *)(a5 + 56) = v71;
              if (!v15)
                return 1;
              if ((*(_BYTE *)(v15 + 68) & 1) == 0)
                return 1;
              result = sub_22F01CBE4(a1, a2, (int *)v14, v15);
              if ((_DWORD)result)
                return 1;
            }
            return result;
          }
        }
        v20 = *v19;
        v21 = *(_QWORD *)(*(_QWORD *)(*v19 + 8) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_DWORD *)(v21 + 16) & 0xFEu) - 2 <= 3)
        {
          v22 = sub_22EF5C728(*(_QWORD *)(a1 + 8), v11);
          if (v22)
          {
            if (*(_BYTE *)(v22 + 16) == 2)
              v23 = v22;
            else
              v23 = 0;
          }
          else
          {
            v23 = 0;
          }
          v33 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v16);
          v34 = (unint64_t *)(v23 + 40);
          v35 = *(_DWORD *)(v23 + 48);
          if (v35 < 0x41)
            goto LABEL_59;
          if (v35 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v23 + 40)) <= 0x40)
          {
            v34 = (unint64_t *)*v34;
LABEL_59:
            if (*v34 <= v33)
              goto LABEL_115;
          }
          v11 = *(_QWORD *)(v23 + 32);
          if (v33 >= *(unsigned int *)(v14 + 16))
            sub_22F01CCF4(v14, v33);
          v15 = 0;
          v14 = *(_QWORD *)(v14 + 8) + 72 * v33;
          goto LABEL_90;
        }
        v24 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v16);
        if (*(_DWORD *)(v21 + 16) == 12)
        {
          if (v24 >= 2)
          {
LABEL_115:
            if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) + 2000) + 1) & 2) == 0)
              goto LABEL_3;
            v47 = a1;
            v48 = a2;
            v46 = 2172;
            goto LABEL_103;
          }
          if (*(_BYTE *)(v20 + 16) != 12)
            v20 = sub_22F10CF48(v20);
          if ((v11 & 1) != 0)
            v72 = 1;
          else
            v72 = v19[1] & 1;
          v93 = *(_QWORD *)(v20 + 32);
          if ((v11 & 4) != 0)
          {
            v94 = v72 | v93;
          }
          else
          {
            v94 = v72 | v93;
            if ((v19[1] & 4) == 0)
            {
LABEL_145:
              if (*(_DWORD *)v14 != 5)
              {
                result = sub_22F0414B0(a1, a2, v94);
                if (!(_DWORD)result)
                  return result;
                v98 = v14 + 8;
                if (v24)
                  v98 = v14 + 40;
                sub_22E54C3D4((const llvm::detail::IEEEFloat *)(v98 + 8), (const llvm::detail::IEEEFloat *)(a5 + 16));
                return 1;
              }
              v95 = v24 == 0;
              if (v24)
                v96 = 24;
              else
                v96 = 8;
              if (v95)
                v97 = v14 + 8;
              else
                v97 = v14 + 24;
              result = sub_22F0414B0(a1, a2, v94);
              if ((_DWORD)result)
              {
                if (*(_DWORD *)a5 != 2)
                  goto LABEL_3;
                if (*(_DWORD *)(v97 + 8) > 0x40u || *(_DWORD *)(a5 + 16) > 0x40u)
                {
                  llvm::APInt::assignSlowCase((llvm::APInt *)v97, (const llvm::APInt *)(a5 + 8));
                }
                else
                {
                  *(_QWORD *)(v14 + v96) = *(_QWORD *)(a5 + 8);
                  *(_DWORD *)(v97 + 8) = *(_DWORD *)(a5 + 16);
                }
                *(_BYTE *)(v97 + 12) = *(_BYTE *)(a5 + 20);
                return 1;
              }
              return result;
            }
          }
          v94 |= 4uLL;
          goto LABEL_145;
        }
        v15 = v24 & 0xFFFFFFFFFFFFFFF8;
        if ((v24 & 0xFFFFFFFFFFFFFFF8) != 0 && (*(_DWORD *)(v15 + 28) & 0x7Fu) - 49 <= 2)
        {
          if ((*(_BYTE *)(v15 + 68) & 2) != 0)
          {
            if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) + 2000) + 1) & 4) == 0
              || !sub_22F016844(a1, v117, v116, 1))
            {
              v74 = (unsigned __int8 **)sub_22F072CEC(a1, a2, 2170, 1);
              if (v74)
              {
                v75 = v74;
                v76 = *v74;
                if (!v76)
                {
                  v76 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v75[1]);
                  *v75 = v76;
                }
                v76[*v76 + 1] = 2;
                v77 = *v75;
                v78 = **v75;
                *v77 = v78 + 1;
                *(_QWORD *)&v77[8 * v78 + 16] = 2;
                v77[(v78 + 1) + 1] = 11;
                v79 = *v75;
                v80 = **v75;
                *v79 = v80 + 1;
                *(_QWORD *)&v79[8 * v80 + 16] = v15;
              }
              v81 = *(_DWORD *)(v15 + 24);
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
              if ((_DWORD)result)
              {
                sub_22F072E10(a1, v81, 100);
                return 0;
              }
              return result;
            }
            v21 = *(_QWORD *)(*(_QWORD *)(*v19 + 8) & 0xFFFFFFFFFFFFFFF0);
          }
          if ((*(_DWORD *)(sub_22F114198(*(_QWORD *)(v21 + 24)) + 72) & 0xE000) == 0x4000)
          {
            v25 = *(_QWORD *)(v14 + 8);
            if (!v25)
              goto LABEL_135;
            v26 = *(_QWORD *)(v14 + 8);
            if ((*(_BYTE *)(v25 + 29) & 0x80) != 0)
            {
              v27 = *(_QWORD *)(v14 + 8);
              v28 = sub_22EFB5D7C(v27);
              v25 = v27;
              v26 = v28;
            }
            v29 = v15;
            if ((*(_BYTE *)(v15 + 29) & 0x80) != 0)
            {
              v114 = v25;
              v29 = sub_22EFB5D7C(v15);
              v25 = v114;
            }
            if (v26 != v29)
            {
LABEL_135:
              v82 = v25;
              result = sub_22F072CEC(a1, a2, 2169, 0);
              if (result)
              {
                v83 = (_QWORD *)result;
                v84 = *(unsigned __int8 **)result;
                if (!*(_QWORD *)result)
                {
                  v84 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(result + 8));
                  *v83 = v84;
                }
                result = 0;
                v84[*v84 + 1] = 2;
                v85 = (_BYTE *)*v83;
                v86 = *(unsigned __int8 *)*v83;
                *v85 = v86 + 1;
                *(_QWORD *)&v85[8 * v86 + 16] = 2;
                v85[(v86 + 1) + 1] = 11;
                v87 = (_BYTE *)*v83;
                v88 = *(unsigned __int8 *)*v83;
                *(_QWORD *)(*v83 + 8 * v88 + 16) = v15;
                LOBYTE(v88) = v88 + 1;
                *v87 = v88;
                v87[v88 + 1] = 2;
                v89 = (_BYTE *)*v83;
                v90 = *(unsigned __int8 *)*v83;
                *v89 = v90 + 1;
                *(_QWORD *)&v89[8 * v90 + 16] = v82 == 0;
                v89[(v90 + 1) + 1] = 11;
                v91 = (_BYTE *)*v83;
                v92 = *(unsigned __int8 *)*v83;
                *v91 = v92 + 1;
                *(_QWORD *)&v91[8 * v92 + 16] = v82;
              }
              return result;
            }
            v14 = *(_QWORD *)(v14 + 16);
          }
          else
          {
            v14 = *(_QWORD *)(v14 + 8)
                + 72 * (*(_DWORD *)(v14 + 16) + sub_22EFC306C(v24 & 0xFFFFFFFFFFFFFFF8));
          }
          v40 = *(_QWORD *)(v15 + 48);
          v41 = (v11 & 1) == 0 && (v19[1] & 1) == 0;
          if ((v11 & 4) != 0)
          {
            LODWORD(v43) = !v41;
            if ((*(_DWORD *)(v15 + 68) & 2) != 0)
              v43 = 0;
            else
              v43 = v43;
            v11 = v40 | v43;
          }
          else
          {
            LODWORD(v42) = !v41;
            if ((*(_DWORD *)(v15 + 68) & 2) != 0)
              v42 = 0;
            else
              v42 = v42;
            v11 = v40 | v42;
            if ((v19[1] & 4) == 0)
            {
LABEL_87:
              if ((v40 & 4) != 0 || (*(_QWORD *)((v40 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0)
                v115 = v15;
              goto LABEL_90;
            }
          }
          v11 |= 4uLL;
          goto LABEL_87;
        }
        v30 = sub_22F10C2A4(v20);
        if (v30 && (*(_DWORD *)(v30 + 28) & 0x7Fu) - 35 >= 3)
          v30 = 0;
        v31 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v16) & 0xFFFFFFFFFFFFFFF8;
        if (v31)
          v32 = (*(_DWORD *)(v31 + 28) & 0x7Fu) - 35 >= 3
              ? 0
              : *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v16) & 0xFFFFFFFFFFFFFFF8;
        else
          v32 = 0;
        v36 = sub_22F01D5B0(v30, v32);
        v37 = *(_QWORD *)(v14 + 8);
        v38 = sub_22EF6477C(*(_QWORD *)(a1 + 8), v32);
        v39 = (v11 & 1) == 0 && (v19[1] & 1) == 0;
        v14 = v37 + 72 * v36;
        if ((v11 & 4) != 0)
          break;
        v11 = v38 | !v39;
        if ((v19[1] & 4) != 0)
          goto LABEL_71;
        v15 = 0;
LABEL_90:
        ++v16;
        if (!*(_DWORD *)v14)
          goto LABEL_91;
      }
      v11 = v38 | !v39;
LABEL_71:
      v15 = 0;
      v11 |= 4uLL;
      goto LABEL_90;
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a1 + 96))(a1, v10) + 2000) + 1) & 2) == 0)
  {
LABEL_3:
    sub_22F072CEC(a1, a2, 103, 0);
    return 0;
  }
  v45 = *(_DWORD *)(a3 + 24);
  if ((v45 & 2) != 0
    || (v45 & 8) != 0
    && ((*(_DWORD *)(a3 + 56) == 1) & (v45 >> 2)) == 0
    && *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * (int)((v45 >> 4) - 1)) == *(_QWORD *)(a3 + 32))
  {
    v46 = 2172;
  }
  else
  {
    v46 = 2176;
  }
  v47 = a1;
  v48 = a2;
LABEL_103:
  result = sub_22F072CEC(v47, v48, v46, 0);
  if (result)
  {
    v49 = (_QWORD *)result;
    v50 = *(unsigned __int8 **)result;
    if (!*(_QWORD *)result)
    {
      v50 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(result + 8));
      *v49 = v50;
    }
    result = 0;
    v50[*v50 + 1] = 2;
    v51 = (_BYTE *)*v49;
    v52 = *(unsigned __int8 *)*v49;
    *v51 = v52 + 1;
    *(_QWORD *)&v51[8 * v52 + 16] = 2;
  }
  return result;
}

double sub_22F015608(unint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t i;
  int v15;
  _BOOL4 v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  unint64_t v27;
  unsigned __int8 **v28;
  unsigned __int8 **v29;
  unsigned __int8 *v30;
  _BYTE *v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned __int8 **v46;
  unsigned __int8 **v47;
  unsigned __int8 *v48;
  _BYTE *v49;
  uint64_t v50;
  _BOOL8 v51;
  _BYTE *v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  BOOL v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  unsigned __int8 v69;
  unint64_t v70;
  _BOOL4 v71;
  unint64_t v72;
  uint64_t v73;
  unsigned __int8 **v74;
  unsigned __int8 **v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void **v81;
  size_t v82;
  unint64_t v83;
  unint64_t v84;
  unsigned __int8 **v85;
  unsigned __int8 **v86;
  uint64_t v87;
  unsigned __int8 *v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unsigned __int8 **v93;
  unsigned __int8 **v94;
  unsigned __int8 *v95;
  _BYTE *v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  _BOOL4 v104;
  uint64_t v105;
  _BOOL4 v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  uint64_t v114;
  unsigned __int8 **v115;
  unsigned __int8 **v116;
  unsigned __int8 *v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  int j;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  unsigned __int8 **v130;
  unsigned __int8 **v131;
  unsigned __int8 *v132;
  _BYTE *v133;
  uint64_t v134;
  _BYTE *v135;
  uint64_t v136;
  int v137;
  int v138;
  int v139;
  int v140;
  unsigned __int8 **v141;
  unsigned __int8 **v142;
  unsigned __int8 *v143;
  _BYTE *v144;
  uint64_t v145;
  _BYTE *v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  BOOL v150;
  unsigned __int8 **v151;
  unsigned __int8 **v152;
  unsigned __int8 *v153;
  _BYTE *v154;
  uint64_t v155;
  char v157;
  _QWORD *v158;
  uint64_t v159;
  int v160;
  int v161;
  _BOOL4 v162;
  unint64_t v163;
  void *__p[2];
  char v165;
  uint64_t v166;
  uint64_t v167[11];

  v167[9] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a5 + 144) & 2) != 0)
    goto LABEL_17;
  v12 = *(_QWORD *)a5;
  v13 = *(_QWORD *)a5 & 3;
  if (v13 == 3)
  {
    v150 = (v12 & 0x7FFFFFFF8) != 0;
    if ((v12 & 4) != 0)
      v150 = v12 > 7;
    if (v150)
      goto LABEL_5;
LABEL_255:
    v41 = a2;
    v42 = a3;
    v43 = 2171;
    goto LABEL_256;
  }
  if (v12 <= 3)
    goto LABEL_255;
  if (v13 == 2)
  {
LABEL_6:
    i = 0;
    v15 = 0;
    goto LABEL_7;
  }
LABEL_5:
  if ((*(_QWORD *)a5 & 3 | 4) == 7 || !*(_DWORD *)(a5 + 8))
    goto LABEL_6;
  if ((*(_QWORD *)a5 & 7) == 3)
    v44 = 0;
  else
    v44 = *(_DWORD *)(a5 + 8);
  v15 = *(_DWORD *)(a2 + 32);
  for (i = *(_QWORD *)(a2 + 24); ; i = *(_QWORD *)(i + 16))
  {
    v45 = *(_DWORD *)(i + 92);
    if (v45 <= v44)
      break;
    --v15;
  }
  if (v45 != v44)
  {
    v46 = (unsigned __int8 **)sub_22F072CEC(a2, a3, 2221, 1);
    if (v46)
    {
      v47 = v46;
      v48 = *v46;
      if (!v48)
      {
        v48 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v47[1]);
        *v47 = v48;
      }
      v48[*v48 + 1] = 2;
      v49 = *v47;
      v50 = **v47;
      *v49 = v50 + 1;
      *(_QWORD *)&v49[8 * v50 + 16] = a4;
      v51 = (*(_QWORD *)a5 & 3) == 0;
      v49[(v50 + 1) + 1] = 2;
      v52 = *v47;
      v53 = **v47;
      *v52 = v53 + 1;
      *(_QWORD *)&v52[8 * v53 + 16] = v51;
    }
    sub_22F016518(a2, *(_QWORD *)a5, *(_QWORD *)(a5 + 8));
    goto LABEL_260;
  }
LABEL_7:
  if (a4 >= 2)
  {
    v16 = a4 - 8 < 0xFFFFFFFD;
    if (a4 > 4)
      goto LABEL_12;
  }
  else
  {
    v16 = 1;
  }
  if ((a6 & 4) != 0 || (*(_BYTE *)((a6 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2) + 2000) + 1) & 1) != 0)
    {
      v28 = (unsigned __int8 **)sub_22F072CEC(a2, a3, 2178, 0);
      if (v28)
      {
        v29 = v28;
        v30 = *v28;
        if (!v30)
        {
          v30 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v29[1]);
          *v29 = v30;
        }
        v30[*v30 + 1] = 2;
        v31 = *v29;
        v32 = **v29;
        *v31 = v32 + 1;
        *(_QWORD *)&v31[8 * v32 + 16] = a4;
        v31[(v32 + 1) + 1] = 9;
        v33 = *v29;
        v34 = **v29;
        *v33 = v34 + 1;
        *(_QWORD *)&v33[8 * v34 + 16] = a6;
      }
      goto LABEL_260;
    }
    goto LABEL_17;
  }
LABEL_12:
  v166 = 0;
  v167[0] = v12;
  v167[1] = *(_QWORD *)(a5 + 8);
  v17 = sub_22EF52AD4((unint64_t *)v167);
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2) + 2000) + 1) & 4) != 0
    && sub_22EF52C94(a5, a2 + 736)
    && sub_22F016844(a2, *(_QWORD *)a5, *(_QWORD *)(a5 + 8), 0))
  {
    v166 = *(_QWORD *)(a2 + 760);
    goto LABEL_95;
  }
  v163 = v17;
  v22 = *(_QWORD *)a5;
  v23 = (unsigned __int8 *)(*(_QWORD *)a5 & 0xFFFFFFFFFFFFFFFCLL);
  v24 = *(_QWORD *)a5 & 3;
  if (!v24 && v23)
  {
    v25 = *((_DWORD *)v23 + 7) & 0x7F;
    if (v25 == 73 || v25 == 72)
    {
      if (((1 << a4) & 0xE3) != 0)
      {
        v60 = *(_QWORD *)(a5 + 8);
        v61 = *((_QWORD *)v23 + 6);
        *a1 = v22;
        a1[1] = v60;
        a1[2] = (unint64_t)(v23 + 64);
        a1[3] = v61;
        return *(double *)&v18;
      }
    }
    else
    {
      if (v25 == 69)
      {
        if (((1 << a4) & 0xE3) != 0)
        {
          v26 = sub_22EFD8DF4(*(_QWORD *)a5 & 0xFFFFFFFFFFFFFFFCLL);
          if (!*(_DWORD *)v26)
          {
            v85 = (unsigned __int8 **)sub_22F072CEC(a2, a3, 2280, 0);
            if (v85)
            {
              v86 = v85;
              v87 = *((_QWORD *)v23 + 6);
              v88 = *v85;
              if (!v88)
              {
                v88 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v86[1]);
                *v86 = v88;
              }
              v88[*v88 + 1] = 9;
              v89 = *v86;
              v90 = **v86;
              *v89 = v90 + 1;
              *(_QWORD *)&v89[8 * v90 + 16] = v87;
            }
            goto LABEL_260;
          }
          v27 = *((_QWORD *)v23 + 6);
          v18 = *(_OWORD *)a5;
          *(_OWORD *)a1 = *(_OWORD *)a5;
          a1[2] = (unint64_t)v26;
          a1[3] = v27;
          return *(double *)&v18;
        }
        goto LABEL_168;
      }
      if ((v25 - 67) < 0xFFFFFFF9)
        goto LABEL_17;
      v62 = *((_QWORD *)v23 + 10);
      v162 = v16;
      if (v62)
      {
        v161 = 0;
        v63 = *(_QWORD *)(a2 + 8);
        v159 = *((_QWORD *)v23 + 10);
        do
        {
          v64 = (unsigned __int8 *)v62;
          v65 = v62;
          v66 = v63;
          if (sub_22EFBBF74(v65, v63) == 2)
            break;
          v67 = (uint64_t)v64;
          v69 = v64[72];
          v68 = (uint64_t *)(v64 + 72);
          if ((v69 & 3) != 0)
          {
            if (v161)
              goto LABEL_140;
            v161 = 1;
          }
          v70 = sub_22E3CD31C(v68, v67);
          v64 = 0;
          if (v70 == v159)
            break;
          v63 = v66;
          v62 = v70;
        }
        while (v70);
      }
      else
      {
LABEL_140:
        v64 = 0;
      }
      v103 = (uint64_t)(v64 ? v64 : v23);
      if ((*(_BYTE *)(v103 + 28) & 0x80) != 0)
        goto LABEL_17;
      v104 = sub_22F10AFE4(v163, *(_QWORD *)(a2 + 8));
      if (i)
        goto LABEL_146;
      v106 = v104;
      if (v162 && (*(_DWORD *)(v103 + 28) & 0x7F) == 0x40)
        goto LABEL_146;
      if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2) + 2000) + 1) & 4) != 0
        && sub_22F016844(a2, *(_QWORD *)a5, *(_QWORD *)(a5 + 8), 0))
      {
        goto LABEL_146;
      }
      if (((1 << a4) & 0xE3) != 0)
      {
        if ((*(_DWORD *)(v103 + 28) & 0x7F) != 0x40 && (*(_BYTE *)(v103 + 97) & 0x80) != 0)
          goto LABEL_146;
        if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2) + 2000) + 104) & 0x20) != 0)
        {
          v160 = *(_DWORD *)(v103 + 28);
          if ((v160 & 0x7F) != 0x40 && (v160 & 0x7F) != 0x3E)
          {
            v107 = *(_QWORD *)(v103 + 16);
            v108 = v107 & 0xFFFFFFFFFFFFFFF8;
            v157 = v107;
            v158 = (_QWORD *)(v107 & 0xFFFFFFFFFFFFFFF8);
            if ((v107 & 4) != 0)
              v108 = v158[1];
            v109 = *(_WORD *)(sub_22EFCBB30(v108) + 8) & 0x7F;
            if (v109 == 16 || v109 == 83)
              goto LABEL_164;
            if ((v160 & 0x7F) != 0x40)
            {
              if ((v157 & 4) != 0)
                v158 = (_QWORD *)*v158;
              if (((_WORD)v158[1] & 0x7Eu) - 34 <= 3)
              {
LABEL_164:
                v110 = *(_QWORD *)((*(_QWORD *)(v103 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
                if ((v110 & 8) != 0 && (*(_QWORD *)((v110 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 0x6800)
                {
                  if ((v160 & 0x100) != 0)
                  {
                    sub_22EFC8E88(v103);
                    if (!sub_22E54E894(*(_QWORD *)v149, *(_QWORD *)v149 + 8 * *(unsigned int *)(v149 + 8)))
                      goto LABEL_260;
                  }
                  if (sub_22E634350(v103))
                    goto LABEL_260;
                  goto LABEL_146;
                }
              }
            }
          }
        }
        v111 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v163 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v112 = *(_DWORD *)(v111 + 16);
        if (v111)
          v113 = v112 == 11;
        else
          v113 = 0;
        if (v113)
        {
          if (((*(_DWORD *)(v111 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
            goto LABEL_195;
        }
        else if (v111 && v112 == 44)
        {
          v114 = sub_22F114198(*(_QWORD *)(v111 + 24));
          if ((*(_BYTE *)(v114 + 74) & 1) == 0 && *(_QWORD *)(v114 + 128) < 8uLL)
          {
LABEL_195:
            if (v162)
            {
              v120 = *(_QWORD *)a2;
              if (v106)
              {
                if (!(*(unsigned int (**)(uint64_t))(v120 + 24))(a2)
                  || !sub_22F111D3C(*(_QWORD *)(v163 & 0xFFFFFFFFFFFFFFF0), *(_QWORD *)(a2 + 8)))
                {
                  goto LABEL_239;
                }
                v121 = v103;
                if ((*(_DWORD *)(v103 + 28) & 0x7F) != 0x53)
                {
                  v122 = *(_QWORD *)(v103 + 16);
                  v123 = v122 & 0xFFFFFFFFFFFFFFF8;
                  if ((v122 & 4) != 0)
                    v123 = *(_QWORD *)v123;
                  for (j = *(_WORD *)(v123 + 8) & 0x7F; j != 83; j = *(_WORD *)(v123 + 8) & 0x7F)
                  {
                    v125 = -40;
                    if (j > 70)
                    {
                      if (j == 71)
                      {
                        v125 = -56;
                      }
                      else if (j != 81)
                      {
                        goto LABEL_213;
                      }
                    }
                    else
                    {
                      if (j > 0x18)
                        goto LABEL_212;
                      if (j == 16)
                        goto LABEL_206;
                      if (((1 << j) & 0x1066) != 0)
                        goto LABEL_219;
                      if (j == 24)
                      {
LABEL_206:
                        v125 = -48;
                      }
                      else
                      {
LABEL_212:
                        if (j != 70)
                        {
LABEL_213:
                          v126 = j - 52;
                          if ((j - 33) >= 5)
                            v127 = -48;
                          else
                            v127 = -64;
                          if (v126 >= 6)
                            v125 = v127;
                          else
                            v125 = -72;
                          goto LABEL_219;
                        }
                        v125 = -64;
                      }
                    }
LABEL_219:
                    v128 = *(_QWORD *)(v123 + v125 + 16);
                    v123 = v128 & 0xFFFFFFFFFFFFFFF8;
                    if ((v128 & 4) != 0)
                      v123 = *(_QWORD *)v123;
                  }
                  v121 = v123 - 40;
                }
                if (sub_22EFBC498(v103, *(_QWORD *)(v121 + 88)))
                {
LABEL_239:
                  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2) + 2000)
                                 + 1) & 1) != 0)
                  {
                    if ((**(_QWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2) + 2000) & 0x200) != 0)
                      v139 = 2226;
                    else
                      v139 = 2227;
                    sub_22EFF605C(a3);
                    v141 = (unsigned __int8 **)sub_22F072D74(a2, v140, v139, 1);
                    if (v141)
                    {
                      v142 = v141;
                      v143 = *v141;
                      if (!v143)
                      {
                        v143 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v142[1]);
                        *v142 = v143;
                      }
                      v143[*v143 + 1] = 11;
                      v144 = *v142;
                      v145 = **v142;
                      *v144 = v145 + 1;
                      *(_QWORD *)&v144[8 * v145 + 16] = v103;
                      v144[(v145 + 1) + 1] = 9;
                      v146 = *v142;
                      v147 = **v142;
                      *v146 = v147 + 1;
                      *(_QWORD *)&v146[8 * v147 + 16] = v163;
                    }
                    v148 = *(_DWORD *)(v103 + 24);
                    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2))
                      sub_22F072E10(a2, v148, 100);
                  }
                  else
                  {
                    sub_22EFF605C(a3);
                    sub_22F072D74(a2, v138, 103, 0);
                  }
                }
LABEL_146:
                if ((*(_QWORD *)a5 & 3) == 2)
                {
                  v105 = 0;
                  v17 = v163;
                }
                else
                {
                  v17 = v163;
                  if ((~*(_QWORD *)a5 & 3) != 0)
                    v105 = *(unsigned int *)(a5 + 12);
                  else
                    v105 = 0;
                }
                if ((sub_22F016A10((uint64_t *)a2, a3, (_QWORD *)v103, i, v105, &v166) & 1) != 0)
                  goto LABEL_95;
LABEL_260:
                *(_QWORD *)&v18 = 0;
                *(_OWORD *)a1 = 0u;
                *((_OWORD *)a1 + 1) = 0u;
                return *(double *)&v18;
              }
              if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(v120 + 96))(a2) + 2000) + 1) & 1) != 0)
              {
                if ((**(_QWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2) + 2000) & 0x200) != 0)
                  v129 = 2226;
                else
                  v129 = 2227;
                v130 = (unsigned __int8 **)sub_22F072CEC(a2, a3, v129, 1);
                if (v130)
                {
                  v131 = v130;
                  v132 = *v130;
                  if (!v132)
                  {
                    v132 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v131[1]);
                    *v131 = v132;
                  }
                  v132[*v132 + 1] = 11;
                  v133 = *v131;
                  v134 = **v131;
                  *v133 = v134 + 1;
                  *(_QWORD *)&v133[8 * v134 + 16] = v103;
                  v133[(v134 + 1) + 1] = 9;
                  v135 = *v131;
                  v136 = **v131;
                  *v135 = v136 + 1;
                  *(_QWORD *)&v135[8 * v136 + 16] = v163;
                }
LABEL_234:
                v137 = *(_DWORD *)(v103 + 24);
                if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2))
                  goto LABEL_260;
                v101 = a2;
                v100 = v137;
                v102 = 100;
LABEL_236:
                sub_22F072E10(v101, v100, v102);
                goto LABEL_260;
              }
              goto LABEL_17;
            }
            goto LABEL_225;
          }
        }
        else if (v112 != 9)
        {
          goto LABEL_195;
        }
        if (v106)
          goto LABEL_146;
        if (v162)
        {
          if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2) + 2000) + 1) & 1) != 0)
          {
            v115 = (unsigned __int8 **)sub_22F072CEC(a2, a3, 2225, 1);
            if (v115)
            {
              v116 = v115;
              v117 = *v115;
              if (!v117)
              {
                v117 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v116[1]);
                *v116 = v117;
              }
              v117[*v117 + 1] = 11;
              v118 = *v116;
              v119 = **v116;
              *v118 = v119 + 1;
              *(_QWORD *)&v118[8 * v119 + 16] = v103;
            }
            goto LABEL_234;
          }
LABEL_17:
          v19 = a2;
          v20 = a3;
          v21 = 103;
LABEL_18:
          sub_22F072CEC(v19, v20, v21, 0);
          goto LABEL_260;
        }
        goto LABEL_225;
      }
    }
LABEL_168:
    v19 = a2;
    v20 = a3;
    v21 = 2238;
    goto LABEL_18;
  }
  if ((*(_QWORD *)a5 & 7) == 3 && (v22 >> 3))
  {
    v35 = *(_QWORD *)(a2 + 800);
    if (v35)
    {
      v36 = (v22 >> 3) - 1;
      v37 = a2 + 800;
      do
      {
        v38 = *(_DWORD *)(v35 + 32) - 1;
        v39 = v38 >= v36;
        if (v38 >= v36)
          v40 = (uint64_t *)v35;
        else
          v40 = (uint64_t *)(v35 + 8);
        if (v39)
          v37 = v35;
        v35 = *v40;
      }
      while (*v40);
      if (v37 != a2 + 800 && v36 >= *(_DWORD *)(v37 + 32) - 1)
      {
        v83 = *(_QWORD *)(a5 + 8);
        *a1 = v22;
        a1[1] = v83;
        a1[2] = v37 + 40;
        a1[3] = v83;
        return *(double *)&v18;
      }
    }
    v41 = a2;
    v42 = a3;
    v43 = 2168;
LABEL_256:
    v151 = (unsigned __int8 **)sub_22F072CEC(v41, v42, v43, 0);
    if (v151)
    {
      v152 = v151;
      v153 = *v151;
      if (!v153)
      {
        v153 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v152[1]);
        *v152 = v153;
      }
      v153[*v153 + 1] = 2;
      v154 = *v152;
      v155 = **v152;
      *v154 = v155 + 1;
      *(_QWORD *)&v154[8 * v155 + 16] = a4;
    }
    goto LABEL_260;
  }
  if (v24 != 1)
    v23 = 0;
  if (i)
  {
    if (v24 == 2 || (*(_QWORD *)a5 & 3 | 4) == 7)
      v54 = 0;
    else
      v54 = *(_DWORD *)(a5 + 12);
    v55 = *(_QWORD *)(i + 72);
    if (!v55)
      goto LABEL_93;
    v56 = i + 72;
    do
    {
      v57 = *(_QWORD *)(v55 + 32);
      if (v57 >= (unint64_t)v23)
      {
        if (v57 <= (unint64_t)v23)
        {
          if (*(_DWORD *)(v55 + 40) < v54)
            v55 += 8;
          else
            v56 = v55;
        }
        else
        {
          v56 = v55;
        }
      }
      else
      {
        v55 += 8;
      }
      v55 = *(_QWORD *)v55;
    }
    while (v55);
    if (v56 == i + 72)
    {
LABEL_93:
      v59 = 0;
    }
    else
    {
      v58 = *(_DWORD *)(v56 + 40) == v54 && *(_QWORD *)(v56 + 32) == (_QWORD)v23;
      v59 = v56 + 48;
      if (!v58)
        v59 = 0;
    }
  }
  else
  {
    if (!v23 || *v23 != 186)
    {
      if (v16)
      {
        LODWORD(v167[0]) = 0;
        sub_22F00676C(a5, (uint64_t)v167);
        v74 = (unsigned __int8 **)sub_22F072CEC(a2, a3, 2175, 0);
        if (v74)
        {
          v75 = v74;
          v76 = *v74;
          if (!v76)
          {
            v76 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v75[1]);
            *v75 = v76;
          }
          v76[*v76 + 1] = 2;
          v77 = *v75;
          v78 = **v75;
          *v77 = v78 + 1;
          *(_QWORD *)&v77[8 * v78 + 16] = a4;
          v79 = *(_QWORD *)(a2 + 8);
          v80 = sub_22EF5F8C4(v79, a6, 1);
          sub_22EF55AB4((uint64_t)v167, v79, v80, __p);
          if (v165 >= 0)
            v81 = __p;
          else
            v81 = (void **)__p[0];
          if (v165 >= 0)
            v82 = v165 & 0x7F;
          else
            v82 = (size_t)__p[1];
          sub_22E3B89A8(v75, v81, v82);
        }
        else
        {
          v91 = *(_QWORD *)(a2 + 8);
          v92 = sub_22EF5F8C4(v91, a6, 1);
          sub_22EF55AB4((uint64_t)v167, v91, v92, __p);
        }
        if (v165 < 0)
          operator delete(__p[0]);
        sub_22F016518(a2, *(_QWORD *)a5, *(_QWORD *)(a5 + 8));
        *(_QWORD *)&v18 = 0;
        *(_OWORD *)a1 = 0u;
        *((_OWORD *)a1 + 1) = 0u;
        if (LODWORD(v167[0]) >= 2)
          sub_22EF53BC0(v167);
        return *(double *)&v18;
      }
      v84 = *(_QWORD *)(a5 + 8);
      *a1 = v22;
      a1[1] = v84;
LABEL_119:
      a1[2] = 0;
      a1[3] = v163;
      return *(double *)&v18;
    }
    if ((sub_22F3C6D80((uint64_t)v23, *(_QWORD *)(a2 + 8)) & 1) == 0
      && !sub_22F016844(a2, *(_QWORD *)a5, *(_QWORD *)(a5 + 8), 0))
    {
      if (v16)
      {
        v93 = (unsigned __int8 **)sub_22F072CEC(a2, a3, 2173, 1);
        if (v93)
        {
          v94 = v93;
          v95 = *v93;
          if (!v95)
          {
            v95 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v94[1]);
            *v94 = v95;
          }
          v95[*v95 + 1] = 2;
          v96 = *v94;
          v97 = **v94;
          *v96 = v97 + 1;
          *(_QWORD *)&v96[8 * v97 + 16] = a4;
        }
        sub_22EFF605C((uint64_t)v23);
        v99 = v98;
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2))
          goto LABEL_260;
        v100 = v99;
        v101 = a2;
        v102 = 2272;
        goto LABEL_236;
      }
LABEL_225:
      v18 = *(_OWORD *)a5;
      *(_OWORD *)a1 = *(_OWORD *)a5;
      goto LABEL_119;
    }
    v59 = *(_QWORD *)((*((_QWORD *)v23 + 2) & 0xFFFFFFFFFFFFFFF8) + 64);
  }
  v166 = v59;
  v17 = v163;
LABEL_95:
  v71 = 0;
  if ((*(_QWORD *)a5 & 3) == 0)
  {
    v72 = *(_QWORD *)a5 & 0xFFFFFFFFFFFFFFFCLL;
    if (v72)
      v71 = (*(_DWORD *)(v72 + 28) & 0x7F) == 64;
  }
  if (i
    && (*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2) + 2000) + 1) & 4) != 0
    && **(_BYTE **)(a2 + 16)
    || ((1 << a4) & 0xE3) == 0 && (v71 + v15) < *(_DWORD *)(a2 + 820))
  {
    goto LABEL_260;
  }
  v73 = v166;
  v18 = *(_OWORD *)a5;
  *(_OWORD *)a1 = *(_OWORD *)a5;
  a1[2] = v73;
  a1[3] = v17;
  return *(double *)&v18;
}

uint64_t sub_22F016518(uint64_t result, unint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  int i;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  _QWORD *v29;
  unsigned int v30;
  BOOL v31;
  uint64_t *v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;

  v4 = (_QWORD *)result;
  v5 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v6 = a2 & 3;
  if ((a2 & 3) == 0 && v5)
  {
    v7 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    if ((*(_DWORD *)(v5 + 28) & 0x7F) != 0x40)
      goto LABEL_73;
    result = (*(_DWORD *)(v5 + 96) >> 20);
    if ((_DWORD)result == 255)
    {
      v9 = *(_QWORD *)(v5 + 16);
      v10 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) != 0)
        v10 = *(_QWORD *)v10;
      for (i = *(_WORD *)(v10 + 8) & 0x7F; i != 83; i = *(_WORD *)(v10 + 8) & 0x7F)
      {
        v12 = -40;
        if (i > 70)
        {
          if (i == 71)
          {
            v12 = -56;
          }
          else if (i != 81)
          {
            goto LABEL_18;
          }
        }
        else
        {
          if (i > 0x18)
            goto LABEL_17;
          if (i == 16)
            goto LABEL_11;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_24;
          if (i == 24)
          {
LABEL_11:
            v12 = -48;
          }
          else
          {
LABEL_17:
            if (i != 70)
            {
LABEL_18:
              v13 = i - 52;
              if ((i - 33) >= 5)
                v14 = -48;
              else
                v14 = -64;
              if (v13 >= 6)
                v12 = v14;
              else
                v12 = -72;
              goto LABEL_24;
            }
            v12 = -64;
          }
        }
LABEL_24:
        v15 = *(_QWORD *)(v10 + v12 + 16);
        v10 = v15 & 0xFFFFFFFFFFFFFFF8;
        if ((v15 & 4) != 0)
          v10 = *(_QWORD *)v10;
      }
      result = sub_22F36F2CC(*(_QWORD *)(v10 + 48), a2 & 0xFFFFFFFFFFFFFFFCLL);
    }
    v16 = v4[3];
    if (!v16)
    {
      v7 = v5;
      goto LABEL_73;
    }
    v17 = HIDWORD(a3);
    v18 = a2 & 7;
    while (1)
    {
      if ((v18 | 4) == 7)
        v19 = 0;
      else
        v19 = a3;
      if (*(_DWORD *)(v16 + 48) != v19)
        goto LABEL_49;
      v20 = (v18 | 4) == 7 ? 0 : v17;
      if (*(_DWORD *)(v16 + 52) != v20)
        goto LABEL_49;
      v21 = *(_QWORD *)(v16 + 24);
      if (!v21)
        goto LABEL_49;
      v22 = *(_QWORD *)(*(_QWORD *)(v21 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v22 && *(_BYTE *)(v22 + 16) == 26)
        break;
      v36 = v17;
      v37 = v18;
      v35 = v16;
      v34 = result;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
      {
        v22 = sub_22F10CF48(v22);
        result = v34;
        v16 = v35;
        v17 = v36;
        v18 = v37;
        if (v22)
          break;
      }
      else
      {
        LODWORD(v22) = 0;
        result = result;
      }
LABEL_48:
      if (result < v22)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 24) + 120) + 8 * result);
        if (!v7)
          goto LABEL_55;
LABEL_73:
        v25 = *(_DWORD *)(v7 + 24);
        v26 = 100;
LABEL_74:
        result = (*(uint64_t (**)(_QWORD *))(*v4 + 64))(v4);
        if ((_DWORD)result)
          return sub_22F072E10((uint64_t)v4, v25, v26);
        return result;
      }
LABEL_49:
      v16 = *(_QWORD *)(v16 + 16);
      if (!v16)
      {
        v7 = v5;
        goto LABEL_73;
      }
    }
    LODWORD(v22) = (unsigned __int16)(*(_QWORD *)(v22 + 16) >> 38);
    goto LABEL_48;
  }
LABEL_55:
  if (v6 == 1 && v5)
  {
    sub_22EFF605C(v5);
    v25 = v24;
    v26 = 2272;
    goto LABEL_74;
  }
  if ((a2 & 7) == 3)
  {
    if ((a2 >> 3))
    {
      v27 = v4[100];
      if (v27)
      {
        v28 = (a2 >> 3) - 1;
        v29 = v4 + 100;
        do
        {
          v30 = *(_DWORD *)(v27 + 32) - 1;
          v31 = v30 >= v28;
          if (v30 >= v28)
            v32 = (uint64_t *)v27;
          else
            v32 = (uint64_t *)(v27 + 8);
          if (v31)
            v29 = (_QWORD *)v27;
          v27 = *v32;
        }
        while (*v32);
        if (v29 != v4 + 100 && v28 >= *((_DWORD *)v29 + 8) - 1)
        {
          sub_22EFF605C(v29[14]);
          v25 = v33;
          v26 = 2207;
          goto LABEL_74;
        }
      }
    }
  }
  return result;
}

BOOL sub_22F016844(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  unint64_t v5;
  unint64_t v6;
  _BOOL8 result;
  int v8;
  unint64_t v9;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16[2];

  v5 = a2 & 3;
  v6 = a2 & 7;
  if (v5 == 2)
  {
    if (v6 == 3)
      return 1;
  }
  else
  {
    if (v6 == 3)
      return 1;
    if (v6 != 7)
    {
      result = 1;
      if ((_DWORD)a3)
        return result;
    }
  }
  v8 = *(_DWORD *)(a1 + 752);
  if (!v8)
    return 0;
  if (v8 != 2)
  {
    v11 = *(_QWORD *)(a1 + 736);
    if (v11 == a2 && ((*(_QWORD *)(a1 + 736) & 3) == 2 || (~(_BYTE)v11 & 3) == 0 || *(_QWORD *)(a1 + 744) == a3))
      return 1;
    result = 0;
    if (v5 != 1)
      return result;
    v12 = (unsigned __int8 *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a2 & 0xFFFFFFFFFFFFFFFCLL) == 0)
      return result;
    if (*v12 == 186)
    {
      v13 = *((_QWORD *)v12 + 2);
      if ((v13 & 4) != 0 && (v15 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 48)) != 0)
      {
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15) & 0xFFFFFFFFFFFFFFFCLL;
        v11 = *(_QWORD *)(a1 + 736);
      }
      else
      {
        v14 = 0;
      }
      if (v14 == v11)
      {
        if ((v11 & 3) == 2 || (~(_BYTE)v11 & 3) == 0)
          return 1;
        return *(_QWORD *)(a1 + 744) == 0;
      }
    }
    return 0;
  }
  result = 0;
  if ((a4 & 1) == 0 && a2 == *(_QWORD *)(a1 + 736))
  {
    if (v5 == 2 || (a2 & 3 | 4) == 7 || (result = 0, *(_QWORD *)(a1 + 744) == a3))
    {
      v16[0] = a2;
      v16[1] = a3;
      v9 = sub_22EF52AD4(v16);
      if ((v9 & 1) != 0 || (*(_BYTE *)((v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) != 0)
        return 1;
      return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) & 0xFE) == 40;
    }
  }
  return result;
}

uint64_t sub_22F016A10(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t result;
  _QWORD *v23;
  unsigned __int8 *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  unsigned __int8 **v43;
  unsigned __int8 **v44;
  unsigned __int8 *v45;
  _BYTE *v46;
  uint64_t v47;
  int v48;
  unsigned __int8 **v49;
  unsigned __int8 **v50;
  unsigned __int8 *v51;
  _BYTE *v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  unsigned __int8 **v58;
  unsigned __int8 **v59;
  unsigned __int8 *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unsigned __int8 **v67;
  unsigned __int8 **v68;
  unsigned __int8 *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  _BYTE *v74;
  char v75;

  if (a4)
  {
    v12 = *(unsigned int *)(a4 + 92);
    if (a3)
      v13 = (*(uint64_t (**)(_QWORD *))(*a3 + 32))(a3) & 0xFFFFFFFFFFFFFFFCLL;
    else
      v13 = 0;
    v16 = *(uint64_t **)(a4 + 72);
    v15 = (uint64_t *)(a4 + 72);
    v14 = v16;
    if (v16)
    {
      v17 = v15;
      do
      {
        v18 = v14[4];
        if (v18 >= (unint64_t)a3)
        {
          if (v18 <= (unint64_t)a3)
          {
            if (*((_DWORD *)v14 + 10) < a5)
              ++v14;
            else
              v17 = v14;
          }
          else
          {
            v17 = v14;
          }
        }
        else
        {
          ++v14;
        }
        v14 = (uint64_t *)*v14;
      }
      while (v14);
      if (v17 != v15 && (_QWORD *)v17[4] == a3 && *((_DWORD *)v17 + 10) == (_DWORD)a5)
      {
        v19 = (uint64_t)(v17 + 6);
LABEL_46:
        *a6 = v19;
        return 1;
      }
    }
    *a6 = 0;
    if ((*((_DWORD *)a3 + 7) & 0x7F) != 0x40)
    {
      if (((*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1) & 1) != 0)
        return 0;
      sub_22F0D5A50(a2);
      result = sub_22F072828((uint64_t)a1, v21, 2333, 0, 0);
      if (result)
      {
        v23 = (_QWORD *)result;
        v24 = *(unsigned __int8 **)result;
        if (!*(_QWORD *)result)
        {
          v24 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(result + 8));
          *v23 = v24;
        }
        result = 0;
        v24[*v24 + 1] = 1;
        v25 = (_BYTE *)*v23;
        v26 = *(unsigned __int8 *)*v23;
        *v25 = v26 + 1;
        *(_QWORD *)&v25[8 * v26 + 16] = "captures not currently allowed";
      }
      return result;
    }
    v20 = v12 | (a5 << 32);
  }
  else
  {
    if (a3)
      v13 = (*(uint64_t (**)(_QWORD *))(*a3 + 32))(a3) & 0xFFFFFFFFFFFFFFFCLL;
    else
      v13 = 0;
    v20 = a5 << 32;
  }
  v27 = a1[92];
  if (v27 == v13)
  {
    v32 = ~(_BYTE)v27 & 3;
    v33 = (a1[92] & 3) == 2 || v32 == 0;
    if (v33 || a1[93] == v20)
    {
      v19 = a1[95];
      goto LABEL_46;
    }
  }
  if ((*((_DWORD *)a3 + 7) & 0x7F) == 0x40)
  {
    if (!(*(unsigned int (**)(uint64_t *))(*a1 + 24))(a1))
      goto LABEL_38;
    v28 = *(_QWORD *)(a1[3] + 24);
    if (!v28)
      goto LABEL_38;
    v29 = a3[2];
    v30 = (_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF8);
    if ((v29 & 4) != 0)
      v30 = (_QWORD *)*v30;
    if (!v30 || (v31 = sub_22EFCC008(v28 + 72), v31 != sub_22EFCC008((uint64_t)v30)))
    {
LABEL_38:
      if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a1 + 96))(a1) + 2000) + 1) & 2) != 0)
      {
        v38 = (uint64_t)a1;
        v39 = a2;
        v40 = 2212;
        v41 = 0;
        goto LABEL_75;
      }
      sub_22F072CEC((uint64_t)a1, a2, 103, 0);
    }
    return 0;
  }
  v34 = 0;
  v35 = a3;
  do
  {
    v36 = sub_22EFBC5B4((uint64_t)v35);
    if (v36)
    {
      if ((*(_BYTE *)(v36 + 2) & 1) != 0)
      {
        if (((*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1) & 1) != 0)
          return 0;
        if ((**(_QWORD **)((*(uint64_t (**)(uint64_t *))(*a1 + 96))(a1) + 2000) & 0x200) != 0)
          v48 = 2226;
        else
          v48 = 2227;
        v49 = (unsigned __int8 **)sub_22F072CEC((uint64_t)a1, a2, v48, 1);
        if (v49)
        {
          v50 = v49;
          v51 = *v49;
          if (!v51)
          {
            v51 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v50[1]);
            *v50 = v51;
          }
          v51[*v51 + 1] = 11;
          v52 = *v50;
          v53 = **v50;
          v54 = v53 + 1;
          *v52 = v53 + 1;
          *(_QWORD *)&v52[8 * v53 + 16] = v35;
          v55 = v35[6];
          v52[v54 + 1] = 9;
          v56 = *v50;
          v57 = **v50;
          *v56 = v57 + 1;
          *(_QWORD *)&v56[8 * v57 + 16] = v55;
        }
        goto LABEL_91;
      }
      if (sub_22EFBCF80((unint64_t)v35))
      {
        if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a1 + 96))(a1) + 2000) + 1) & 1) != 0
          && (sub_22EFBCCBC((uint64_t)v35) & 1) == 0
          && (sub_22EFBCA2C((unint64_t)v35, a1[1]) & 1) != 0
          || ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a1 + 96))(a1) + 2000) + 1) & 1) != 0
           || (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a1 + 96))(a1) + 2000) + 52) & 0x40000000) != 0)
          && (*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a1 + 96))(a1) + 2000) + 1) & 2) == 0
          && (sub_22F3AC1C4((unint64_t)v35, a1[1]) & 1) == 0)
        {
          sub_22EFF605C(a2);
          v43 = (unsigned __int8 **)sub_22F072D74((uint64_t)a1, v42, 2284, 1);
          if (v43)
          {
            v44 = v43;
            v45 = *v43;
            if (!v45)
            {
              v45 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v44[1]);
              *v44 = v45;
            }
            v45[*v45 + 1] = 11;
            v46 = *v44;
            v47 = **v44;
            *v46 = v47 + 1;
            *(_QWORD *)&v46[8 * v47 + 16] = v35;
          }
          sub_22F016518((uint64_t)a1, v13, v20);
        }
        if (!sub_22EFBCB70((unint64_t)v35))
        {
          v19 = 0;
          v72 = v35[11];
          if ((v72 & 4) != 0)
          {
            v73 = (char *)(v72 & 0xFFFFFFFFFFFFFFF8);
            if (v73)
            {
              v75 = *v73;
              v74 = v73 + 16;
              if ((v75 & 1) != 0)
                v19 = (uint64_t)v74;
              else
                v19 = 0;
            }
          }
          goto LABEL_46;
        }
        v63 = (uint64_t)a1;
        v64 = a2;
        v65 = 2286;
        v66 = 0;
      }
      else
      {
        v63 = (uint64_t)a1;
        v64 = a2;
        v65 = 2284;
        v66 = 1;
      }
      v67 = (unsigned __int8 **)sub_22F072CEC(v63, v64, v65, v66);
      if (v67)
      {
        v68 = v67;
        v69 = *v67;
        if (!v69)
        {
          v69 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v68[1]);
          *v68 = v69;
        }
        v69[*v69 + 1] = 11;
        v70 = *v68;
        v71 = **v68;
        *v70 = v71 + 1;
        *(_QWORD *)&v70[8 * v71 + 16] = v35;
      }
      goto LABEL_91;
    }
    if ((v35[9] & 3) != 0)
    {
      if (v34)
        break;
      v34 = 1;
    }
    v37 = sub_22E3CD31C(v35 + 9, (uint64_t)v35);
    if ((_QWORD *)v37 == a3)
      break;
    v35 = (_QWORD *)v37;
  }
  while (v37);
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1) & 1) != 0)
    return 0;
  v38 = (uint64_t)a1;
  v39 = a2;
  v40 = 2285;
  v41 = 1;
LABEL_75:
  v58 = (unsigned __int8 **)sub_22F072CEC(v38, v39, v40, v41);
  if (v58)
  {
    v59 = v58;
    v60 = *v58;
    if (!v60)
    {
      v60 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v59[1]);
      *v59 = v60;
    }
    v60[*v60 + 1] = 11;
    v61 = *v59;
    v62 = **v59;
    *v61 = v62 + 1;
    *(_QWORD *)&v61[8 * v62 + 16] = a3;
  }
LABEL_91:
  sub_22F016518((uint64_t)a1, v13, v20);
  return 0;
}

uint64_t sub_22F016FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v3 = *(unsigned int *)(a2 + 8);
    v4 = *(unsigned int *)(a1 + 8);
    if (v4 >= v3)
    {
      if ((_DWORD)v3)
        memmove(*(void **)a1, *(const void **)a2, 8 * v3);
LABEL_5:
      *(_DWORD *)(a1 + 8) = v3;
      return a1;
    }
    if (*(_DWORD *)(a1 + 12) < v3)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v9 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      a2 = v9;
    }
    else if ((_DWORD)v4)
    {
      v8 = *(unsigned int *)(a1 + 8);
      v10 = a2;
      memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      v6 = v8;
      a2 = v10;
LABEL_10:
      v7 = *(unsigned int *)(a2 + 8);
      if (v6 != v7)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v6), (const void *)(*(_QWORD *)a2 + 8 * v6), *(_QWORD *)a2 + 8 * v7 - (*(_QWORD *)a2 + 8 * v6));
      goto LABEL_5;
    }
    v6 = 0;
    goto LABEL_10;
  }
  return a1;
}

uint64_t sub_22F0170E0(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, int a5, uint64_t *a6, unint64_t *a7, _BYTE *a8, _BYTE *a9)
{
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23[2];

  v23[0] = a2;
  v23[1] = a3;
  *a7 = sub_22EF52AD4(v23);
  if (!a5)
    return 0;
  v15 = 0;
  result = 0;
  do
  {
    v17 = *(_QWORD *)(*a7 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
    {
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
      {
        if (*(_BYTE *)(v17 + 16) != 12)
          v17 = sub_22F10CF48(*(_QWORD *)(*a7 & 0xFFFFFFFFFFFFFFF0));
        *a7 = *(_QWORD *)(v17 + 32);
        *a6 = 2;
        result = (v15 + 1);
        *a8 = 1;
      }
      else
      {
        v22 = *(_QWORD *)(a4 + 8 * v15) & 0xFFFFFFFFFFFFFFF8;
        if (v22 && (*(_DWORD *)(v22 + 28) & 0x7Fu) - 49 <= 2)
        {
          *a7 = *(_QWORD *)(v22 + 48);
          *a6 = 0;
          result = (v15 + 1);
        }
        else
        {
          *a6 = 0;
        }
        *a8 = 0;
      }
    }
    else
    {
      v18 = sub_22EF5C728(a1, *a7);
      *a7 = *(_QWORD *)(v18 + 32);
      *a8 = 1;
      if (v18)
        v19 = *(_BYTE *)(v18 + 16) == 2;
      else
        v19 = 0;
      if (v19)
      {
        v21 = (uint64_t *)(v18 + 40);
        if (*(_DWORD *)(v18 + 48) >= 0x41u)
          v21 = (uint64_t *)*v21;
        v20 = *v21;
      }
      else
      {
        v20 = (uint64_t)sub_22F017280(a1, v18);
        if (!v20)
        {
          *a9 = 1;
          v20 = 0x7FFFFFFFFFFFFFFFLL;
        }
      }
      *a6 = v20;
      result = (v15 + 1);
    }
    ++v15;
  }
  while (a5 != v15);
  return result;
}

uint64_t *sub_22F017280(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  unsigned int *v4;
  uint64_t v5;
  char v6;
  unsigned int v7;
  uint64_t **v8;
  __int16 v10;
  uint64_t v11;
  uint64_t **v12;
  unsigned int v13;
  char v14;
  _QWORD v15[5];
  int v16;
  char v17;
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  _DWORD v27[4];
  __int128 v28;
  int v29;
  _OWORD *v30;
  uint64_t v31;
  _OWORD v32[33];
  int v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  __int128 *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  int v43;
  uint64_t v44;

  v2 = 0;
  v44 = *MEMORY[0x24BDAC8D0];
  if (a2 && *(_BYTE *)(a2 + 16) == 4)
  {
    v4 = *(unsigned int **)(a2 + 40);
    if (v4)
    {
      v13 = 1;
      v11 = 0;
      v12 = 0;
      v14 = 0;
      v10 = 0;
      v15[0] = &off_24FAC58D8;
      v15[1] = a1;
      v5 = *(_QWORD *)(a1 + 2000);
      v6 = *(_BYTE *)(v5 + 180);
      v16 = *(_DWORD *)(v5 + 176);
      v17 = v6 & 1;
      v22 = &v23;
      v25 = v27;
      v18[0] = &off_24FAC5960;
      v18[1] = v15;
      v24 = 0x100000000;
      v19 = 0u;
      v20 = 0u;
      v21 = 0u;
      v23 = 0u;
      v26 = 0x200000001;
      v27[0] = 1;
      v27[2] = 1;
      v29 = 0;
      v28 = 0u;
      v15[2] = &v10;
      v15[3] = v18;
      v15[4] = 0x200000001;
      v30 = v32;
      v31 = 0x1000000000;
      v34 = 0u;
      v35 = 0;
      v36 = 0;
      v38 = 0u;
      v33 = 0;
      v32[32] = 0u;
      v37 = &v38;
      v39 = 0;
      v40 = -1;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v2 = 0;
      if (sub_22F0174A0(v4, (uint64_t)&v12, (uint64_t)v15))
      {
        v7 = v13;
        if (!v14)
        {
          v8 = &v12[(v13 - 1) >> 6];
          if (v13 < 0x41)
            v8 = (uint64_t **)&v12;
          if ((((unint64_t)*v8 >> (v13 - 1)) & 1) != 0)
            goto LABEL_13;
        }
        if (v13 >= 0x41 && v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v12) > 0x40)
LABEL_13:
          v2 = 0;
        else
          v2 = sub_22E5FA634(&v12, 0xFFFFFFFFFFFFFFFFLL);
      }
      sub_22F0052A4((uint64_t)v15);
      if (v13 >= 0x41 && v12)
        MEMORY[0x2348A0E84](v12, 0x1000C8000313F17);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t sub_22F0174A0(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  LODWORD(v10) = 0;
  v9[0] = a3;
  v9[1] = (uint64_t)&v10;
  v6 = 0;
  if (sub_22F0175A4(v9, a1))
  {
    if ((_DWORD)v10 == 2)
    {
      if (*(_DWORD *)(a2 + 8) > 0x40u || (v7 = v12, v12 > 0x40))
      {
        llvm::APInt::assignSlowCase((llvm::APInt *)a2, (const llvm::APInt *)&v11);
      }
      else
      {
        *(_QWORD *)a2 = v11;
        *(_DWORD *)(a2 + 8) = v7;
      }
      *(_BYTE *)(a2 + 12) = v13;
      v6 = 1;
    }
    else
    {
      sub_22F072CEC(a3, (uint64_t)a1, 103, 0);
      v6 = 0;
    }
  }
  if (v10 >= 2)
    sub_22EF53BC0(&v10);
  return v6;
}

uint64_t sub_22F0175A4(uint64_t *a1, unsigned int *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  llvm::APFloatBase *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  llvm::APInt *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  llvm::APFloatBase *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[57];

  v29[41] = *MEMORY[0x24BDAC8D0];
  while (2)
  {
    v3 = (uint64_t)a2;
    v4 = *(unsigned __int8 *)a2;
    if (a2 && (v4 & 0xFE) == 0x70)
    {
      v5 = *a2;
      switch((*a2 >> 18) & 0x3F)
      {
        case 0u:
        case 1u:
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x20u:
          return sub_22F018F04(a1, a2);
        default:
          goto LABEL_5;
      }
    }
    if (!a2 || v4 != 233)
LABEL_11:
      __asm { BR              X9 }
    v5 = *a2;
    switch((*a2 >> 18) & 0x1F)
    {
      case 0u:
      case 1u:
        return sub_22F01BA14(a1, (uint64_t)a2);
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 7u:
      case 8u:
      case 9u:
      case 0xDu:
        return sub_22F01B7B0(a1, (uint64_t)a2);
      case 6u:
      case 0xCu:
        a2 = (unsigned int *)*((_QWORD *)a2 + 2);
        continue;
      case 0xAu:
        a2 = (unsigned int *)*((_QWORD *)a2 + 2);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) != 12)
          continue;
        v21 = 1;
        v20 = 0;
        v22 = 0;
        v24 = 1;
        v23 = 0;
        v25 = 0;
        v12 = llvm::APFloatBase::Bogus((llvm::APFloatBase *)a1);
        sub_22E99C474((llvm::APFloatBase *)&v26, v12);
        sub_22E99C474((llvm::APFloatBase *)&v28, v12);
        v13 = *(unsigned __int8 **)(v3 + 16);
        v17 = *a1;
        v18 = &v19;
        v14 = (llvm::APFloatBase *)sub_22F01E534(&v17, v13);
        v10 = 0;
        if (!(_DWORD)v14)
          goto LABEL_28;
        if (!v19)
          goto LABEL_27;
        v11 = (llvm::APInt *)&v20;
        goto LABEL_24;
      case 0xBu:
        v7 = (llvm::APFloatBase *)sub_22F10E148(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 8) & 0xFFFFFFFFFFFFFFF0));
        if (v7)
        {
          v21 = 1;
          v20 = 0;
          v22 = 0;
          v24 = 1;
          v23 = 0;
          v25 = 0;
          v8 = llvm::APFloatBase::Bogus(v7);
          sub_22E99C474((llvm::APFloatBase *)&v26, v8);
          sub_22E99C474((llvm::APFloatBase *)&v28, v8);
          v9 = *(unsigned __int8 **)(v3 + 16);
          v17 = *a1;
          v18 = &v19;
          v14 = (llvm::APFloatBase *)sub_22F01E534(&v17, v9);
          v10 = 0;
          if ((_DWORD)v14)
          {
            if (v19)
            {
              v11 = (llvm::APInt *)&v23;
LABEL_24:
              sub_22F01E460(v11, a1[1]);
              v10 = 1;
            }
            else
            {
LABEL_27:
              v14 = (llvm::APFloatBase *)sub_22F072CEC(*a1, v3, 103, 0);
              v10 = 0;
            }
          }
LABEL_28:
          v15 = v28;
          v16 = llvm::APFloatBase::PPCDoubleDouble(v14);
          if (v16 == v15)
            sub_22E463170((llvm::APFloatBase *)v29);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v28);
          if (v16 == v26)
            sub_22E463170((llvm::APFloatBase *)&v27);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v26);
          if (v24 >= 0x41 && v23)
            MEMORY[0x2348A0E84](v23, 0x1000C8000313F17);
          if (v21 >= 0x41 && v20)
            MEMORY[0x2348A0E84](v20, 0x1000C8000313F17);
        }
        else
        {
          sub_22F024D28(*a1, *(_QWORD *)(v3 + 16));
          sub_22F03A1EC(*(_QWORD *)(*a1 + 8), 0, *(_QWORD *)(v3 + 8), a1[1]);
          return 1;
        }
        return v10;
      default:
LABEL_5:
        v4 = v5;
        goto LABEL_11;
    }
  }
}

uint64_t sub_22F018F04(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  unsigned __int8 *v31;
  int v32;
  char *v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  char v41;
  int v42;
  BOOL v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  _BOOL4 v65;
  llvm::APInt *v66;
  int v67;
  unint64_t v68;
  unsigned __int8 *v69;
  int v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  unsigned int v76;
  BOOL v77;
  uint64_t v78;
  unsigned int v79;
  BOOL v80;
  unsigned int v81;
  int v82;
  uint64_t v83;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  int v90;
  BOOL v91;
  uint64_t v92;
  int v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 *v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t *v105;
  unsigned int v106;
  void *v107;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  int v118;
  unsigned __int8 *v119;
  unint64_t v120;
  unint64_t v121;
  unsigned int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  BOOL v129;
  int v130;
  int v131;
  uint64_t v132;
  unsigned int v133;
  BOOL v134;
  int v135;
  uint64_t v136;
  unsigned int v137;
  BOOL v138;
  char v139;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned __int8 *v148;
  char v149;
  llvm::APFloatBase *v150;
  uint64_t v151;
  unsigned __int8 *v152;
  int v153;
  uint64_t v154;
  unsigned __int8 *v155;
  uint64_t v156;
  int v157;
  unsigned __int8 *v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  unsigned __int8 *v167;
  int v169;
  unint64_t v170;
  unsigned int v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  BOOL v181;
  unsigned __int8 *v182;
  unsigned __int8 *v183;
  int v184;
  int v185;
  unsigned __int8 *v186;
  _DWORD *v187;
  uint64_t v188;
  int v189;
  unsigned __int8 **v190;
  unsigned __int8 **v191;
  unsigned __int8 *v192;
  _BYTE *v193;
  uint64_t v194;
  _DWORD *v195;
  uint64_t v196;
  int v197;
  unsigned __int8 **v198;
  unsigned __int8 **v199;
  unsigned __int8 *v200;
  _BYTE *v201;
  uint64_t v202;
  uint64_t *v203;
  void *v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t *v210;
  void *v211;
  unint64_t v212;
  unsigned __int8 *v213;
  int v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  _QWORD *v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  int v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unsigned __int8 **v237;
  unsigned __int8 **v238;
  unsigned __int8 *v239;
  _BYTE *v240;
  uint64_t v241;
  char v242;
  uint64_t *v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  _QWORD *v247;
  uint64_t v248;
  uint64_t v249;
  void *v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unsigned int v256;
  unint64_t v257;
  int v258;
  unsigned __int8 **v259;
  unsigned __int8 **v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unsigned int v264;
  unsigned __int8 *v265;
  unint64_t v266;
  unsigned __int8 *v267;
  uint64_t v268;
  int v269;
  int v270;
  unsigned __int8 **v271;
  unsigned __int8 **v272;
  unint64_t v273;
  int v274;
  unsigned __int8 **v275;
  unsigned __int8 **v276;
  unint64_t v277;
  unsigned __int8 *v278;
  unsigned __int8 *v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unsigned int v284;
  unsigned __int8 *v285;
  unint64_t v286;
  unsigned __int8 *v287;
  uint64_t v288;
  unsigned __int8 *v289;
  uint64_t v290;
  unsigned __int8 *v291;
  unsigned __int8 *v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unsigned int v297;
  unsigned __int8 *v298;
  unint64_t v299;
  unsigned __int8 *v300;
  uint64_t v301;
  unsigned __int8 *v302;
  uint64_t v303;
  unsigned __int8 *v304;
  unsigned __int8 *v305;
  uint64_t v306;
  unsigned __int8 *v307;
  unsigned __int8 *v308;
  uint64_t v309;
  BOOL v310;
  BOOL v311;
  _BOOL4 v312;
  _BOOL4 v313;
  BOOL v314;
  BOOL v315;
  BOOL v316;
  BOOL v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  void *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t **v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t **v334;
  uint64_t v335;
  void *__p[2];
  __int128 v337;
  uint64_t v338;
  uint64_t v339;
  void *v340;
  uint64_t v341;
  uint64_t v342[8];
  uint64_t v343;
  uint64_t v344;
  uint64_t *v345;
  __int128 v346;
  _BYTE v347[24];
  __int128 v348;
  __int128 v349;
  __int128 v350;
  unsigned __int8 v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  _BYTE v356[24];
  __int128 v357;
  __int128 v358;
  __int128 v359;
  unsigned __int8 v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  uint64_t v368;

  v368 = *MEMORY[0x24BDAC8D0];
  if (((*a2 >> 18) & 0x3F) - 21 <= 0xA)
  {
    sub_22F072CEC(*a1, (uint64_t)a2, 103, 0);
    v4 = *a1;
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1);
    v6 = 0;
    **(_BYTE **)(v4 + 16) |= v5;
    if (!v5)
      return v6;
  }
  v7 = sub_22F03A298((uint64_t)a2);
  if (!(_DWORD)v7)
  {
    v81 = *a2;
    v82 = (*a2 >> 18) & 0x3F;
    if ((v82 - 9) <= 6)
    {
      v83 = *a1;
      v85 = (v81 & 0xFC0000) != 0x240000 && ((v81 >> 18) & 0x3E) - 14 < 0xFFFFFFFC;
      v86 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8);
      v87 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
      v88 = (uint64_t *)(v86 & 0xFFFFFFFFFFFFFFF0);
      v89 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v86 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v90 = *(_DWORD *)(v89 + 16);
      if (v89)
        v91 = v90 == 11;
      else
        v91 = 0;
      if (v91)
      {
        if (((*(_DWORD *)(v89 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
          goto LABEL_214;
      }
      else if (v89 && v90 == 44)
      {
        v7 = sub_22F114198(*(_QWORD *)(v89 + 24));
        if ((*(_BYTE *)(v7 + 74) & 1) == 0 && *(_QWORD *)(v7 + 128) < 8uLL)
          goto LABEL_214;
      }
      else if (v90 != 9)
      {
        goto LABEL_214;
      }
      v127 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v87 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v128 = *(_DWORD *)(v127 + 16);
      if (v127)
        v129 = v128 == 11;
      else
        v129 = 0;
      if (v129)
      {
        if (((*(_DWORD *)(v127 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
          goto LABEL_205;
      }
      else
      {
        if (v127 && v128 == 44)
        {
          v7 = sub_22F114198(*(_QWORD *)(v127 + 24));
          if ((*(_BYTE *)(v7 + 74) & 1) == 0 && *(_QWORD *)(v7 + 128) < 8uLL)
            goto LABEL_214;
LABEL_205:
          LODWORD(__p[1]) = 1;
          __p[0] = 0;
          BYTE4(__p[1]) = 0;
          *(_DWORD *)&v347[8] = 1;
          *(_QWORD *)v347 = 0;
          v347[12] = 0;
          if ((sub_22F0174A0(*((_QWORD *)a2 + 2), __p, v83) & 1) != 0)
          {
            if (sub_22F0174A0(*((_QWORD *)a2 + 3), v347, v83))
            {
              if (BYTE4(__p[1]))
              {
                v130 = llvm::APInt::compare((llvm::APInt *)__p, (const llvm::APInt *)v347);
                if (v130 < 0)
                  goto LABEL_366;
              }
              else
              {
                v130 = llvm::APInt::compareSigned((llvm::APInt *)__p, (const llvm::APInt *)v347);
                if (v130 < 0)
                  goto LABEL_366;
              }
              v220 = a1[1];
              v221 = *((_QWORD *)a2 + 1);
              if (v130)
                v226 = &unk_22F4A4A18;
              else
                v226 = qword_22F4A4A48;
              v227 = v226[(((unint64_t)*a2 >> 18) & 0x3F) - 10];
              v222 = *(_QWORD *)(*a1 + 8);
              goto LABEL_371;
            }
          }
          else
          {
            v131 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 40))(v83);
            **(_BYTE **)(v83 + 16) |= v131;
            if (v131)
              sub_22F0174A0(*((_QWORD *)a2 + 3), v347, v83);
          }
LABEL_212:
          v6 = 0;
LABEL_372:
          if (*(_DWORD *)&v347[8] >= 0x41u && *(_QWORD *)v347)
            MEMORY[0x2348A0E84](*(_QWORD *)v347, 0x1000C8000313F17);
          if (LODWORD(__p[1]) < 0x41)
            return v6;
          v229 = __p[0];
          if (!__p[0])
            return v6;
LABEL_400:
          MEMORY[0x2348A0E84](v229, 0x1000C8000313F17);
          return v6;
        }
        if (v128 == 9)
          goto LABEL_205;
      }
LABEL_214:
      v132 = *(_QWORD *)(*(_QWORD *)(*v88 + 8) & 0xFFFFFFFFFFFFFFF0);
      v133 = *(_DWORD *)(v132 + 16);
      if (v132)
        v134 = v133 == 11;
      else
        v134 = 0;
      v135 = v134;
      if (!v134 || ((v133 >> 19) & 0x1FE) - 186 >= 0x18)
      {
        v136 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v87 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v137 = *(_DWORD *)(v136 + 16);
        if (v136)
          v138 = v137 == 11;
        else
          v138 = 0;
        v139 = !v138;
        if (!v138)
        {
          if (v133 != 12 && v137 != 12)
            goto LABEL_240;
          goto LABEL_235;
        }
        if (((v137 >> 19) & 0x1FE) - 186 > 0x17)
        {
          if (v133 != 12)
          {
LABEL_240:
            if (v135)
            {
              v149 = ((v133 >> 19) & 0x1FE) - 218 < 0xFFFFFFF8 ? 1 : v139;
              if ((v149 & 1) == 0 && ((v137 >> 19) & 0x1FE) - 210 <= 7)
              {
                v150 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v347, 0.0);
                v151 = llvm::APFloatBase::IEEEdouble(v150);
                MEMORY[0x23489F4E0](&__p[1], v347, v151);
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v347);
                llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v356, 0.0);
                MEMORY[0x23489F4E0](&v347[8], v356, v151);
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v356);
                v152 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
                *(_QWORD *)v356 = v83;
                *(_QWORD *)&v356[8] = __p;
                v153 = sub_22F032714((uint64_t *)v356, v152);
                if ((v153 & 1) != 0
                  || (v154 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 40))(v83),
                      **(_BYTE **)(v83 + 16) |= v154,
                      (_DWORD)v154))
                {
                  v155 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                  *(_QWORD *)v356 = v83;
                  *(_QWORD *)&v356[8] = v347;
                  v154 = sub_22F032714((uint64_t *)v356, v155);
                  if ((v153 & v154) == 1)
                  {
                    v156 = *(_QWORD *)&v347[8];
                    if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v154) == v156)
                      v157 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)&v347[8], (const llvm::detail::DoubleAPFloat *)&__p[1]);
                    else
                      v157 = llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)&v347[8], (const llvm::detail::IEEEFloat *)&__p[1]);
                    if (*(_BYTE *)(v83 + 834)
                      || v157 != 3
                      || (sub_22E51A864(a2, *(_QWORD *)(*(_QWORD *)(v83 + 8) + 2000)) & 0xFC) == 4)
                    {
                      __asm { BR              X16 }
                    }
                    v154 = sub_22F072CEC(v83, (uint64_t)a2, 2211, 0);
                  }
                }
                v6 = 0;
                v248 = *(_QWORD *)&v347[8];
                v249 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v154);
                v250 = (void *)v249;
                if (v249 == v248)
                  sub_22E463170((llvm::APFloatBase *)&v347[16]);
                else
                  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v347[8]);
                if (v250 == __p[1])
                  sub_22E463170((llvm::APFloatBase *)&v337);
                else
                  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&__p[1]);
                return v6;
              }
            }
            if (v133 != 31)
            {
              if (v133 == 39 && v137 == 39)
              {
                __p[0] = 0;
                __p[1] = 0;
                *(_QWORD *)&v337 = 0;
                DWORD2(v337) |= 1u;
                v339 = 0;
                v340 = v342;
                v320 = (uint64_t)v342;
                v341 = 0x800000000;
                v343 = 0;
                v344 = 0;
                memset(v347, 0, sizeof(v347));
                LODWORD(v348) = v348 | 1;
                *(_QWORD *)&v349 = 0;
                v319 = (uint64_t)&v350 + 8;
                *((_QWORD *)&v349 + 1) = (char *)&v350 + 8;
                *(_QWORD *)&v350 = 0x800000000;
                v355 = 0;
                v354 = 0;
                v158 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                *(_QWORD *)v356 = v83;
                *(_QWORD *)&v356[8] = __p;
                v356[16] = 0;
                v165 = sub_22F00C45C((uint64_t *)v356, v158, v8, v9, v10, v11, v12, v13);
                if ((v165 & 1) == 0)
                {
                  v166 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 40))(v83);
                  **(_BYTE **)(v83 + 16) |= v166;
                  if (!v166)
                    goto LABEL_459;
                }
                v167 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
                *(_QWORD *)v356 = v83;
                *(_QWORD *)&v356[8] = v347;
                v356[16] = 0;
                v6 = 0;
                if ((v165 & sub_22F00C45C((uint64_t *)v356, v167, v159, v160, v161, v162, v163, v164)) != 1)
                  goto LABEL_460;
                if (sub_22F03A460((uint64_t)__p, (uint64_t)v347))
                {
                  if (sub_22F10DFD8(*v88))
                  {
                    if ((_QWORD)v337 != *(_QWORD *)&v347[16] && !v85)
                    {
                      sub_22EFF605C((uint64_t)a2);
                      sub_22F072D74(v83, v169, 2289, 0);
                    }
                  }
                  if ((BYTE8(v337) & 1) == 0 && ((v348 | v85) & 1) == 0)
                  {
                    LOBYTE(v363) = 0;
                    *(_OWORD *)v356 = *(_OWORD *)__p;
                    v170 = sub_22EF52AD4((unint64_t *)v356);
                    v171 = sub_22F03C074(v170, (uint64_t)&v337 + 8, (uint64_t)&v348, (char *)&v363);
                    if (!(_BYTE)v363 && v341 > v171 && v350 > v171)
                    {
                      v251 = v171;
                      if ((*((_QWORD *)v340 + v171) & 0xFFFFFFFFFFFFFFF8) != 0)
                      {
                        if ((*(_DWORD *)((*((_QWORD *)v340 + v171) & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu) - 49 >= 3)
                          v252 = 0;
                        else
                          v252 = *((_QWORD *)v340 + v171) & 0xFFFFFFFFFFFFFFF8;
                      }
                      else
                      {
                        v252 = 0;
                      }
                      if ((*(_QWORD *)(*((_QWORD *)&v349 + 1) + 8 * v171) & 0xFFFFFFFFFFFFFFF8) != 0)
                      {
                        if ((*(_DWORD *)((*(_QWORD *)(*((_QWORD *)&v349 + 1) + 8 * v171) & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu)
                           - 49 >= 3)
                          v253 = 0;
                        else
                          v253 = *(_QWORD *)(*((_QWORD *)&v349 + 1) + 8 * v171) & 0xFFFFFFFFFFFFFFF8;
                      }
                      else
                      {
                        v253 = 0;
                      }
                      if (v252 | v253)
                      {
                        if (v252)
                        {
                          if (v253)
                          {
                            v254 = *(_QWORD *)(v252 + 16);
                            v255 = v254 & 0xFFFFFFFFFFFFFFF8;
                            if ((v254 & 4) != 0)
                              v255 = *(_QWORD *)v255;
                            v256 = (*(_WORD *)(v255 + 8) & 0x7E) - 34;
                            if (v255)
                              v257 = v255 - 64;
                            else
                              v257 = 0;
                            if (v256 >= 4)
                              v257 = 0;
                            if ((*(_DWORD *)(v257 + 72) & 0xE000) != 0x4000
                              && ((*(_DWORD *)(v253 + 28) ^ *(_DWORD *)(v252 + 28)) & 0x6000) != 0)
                            {
                              sub_22EFF605C((uint64_t)a2);
                              v259 = (unsigned __int8 **)sub_22F072D74(v83, v258, 2261, 0);
                              v260 = v259;
                              if (v259)
                              {
                                v304 = *v259;
                                if (!*v260)
                                {
                                  v304 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v260[1]);
                                  *v260 = v304;
                                }
                                v304[*v304 + 1] = 11;
                                v305 = *v260;
                                v306 = **v260;
                                *v305 = v306 + 1;
                                *(_QWORD *)&v305[8 * v306 + 16] = v252;
                                sub_22F3B3920(v260, (*(_DWORD *)(v252 + 28) >> 13) & 3);
                                v307 = *v260;
                                if (!*v260)
                                {
                                  v307 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v260[1]);
                                  *v260 = v307;
                                }
                                v307[*v307 + 1] = 11;
                                v308 = *v260;
                                v309 = **v260;
                                *v308 = v309 + 1;
                                *(_QWORD *)&v308[8 * v309 + 16] = v253;
                                sub_22F3B3920(v260, (*(_DWORD *)(v253 + 28) >> 13) & 3);
                              }
                              v261 = *(_QWORD *)(v252 + 16);
                              v262 = v261 & 0xFFFFFFFFFFFFFFF8;
                              if ((v261 & 4) != 0)
                                v262 = *(_QWORD *)v262;
                              if (v262)
                                v263 = v262 - 64;
                              else
                                v263 = 0;
                              if (v260)
                              {
                                v264 = (*(_WORD *)(v262 + 8) & 0x7E) - 34;
                                v265 = *v260;
                                if (!*v260)
                                {
                                  v265 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v260[1]);
                                  *v260 = v265;
                                }
                                if (v264 >= 4)
                                  v266 = 0;
                                else
                                  v266 = v263;
                                v265[*v265 + 1] = 11;
                                v267 = *v260;
                                v268 = **v260;
                                *v267 = v268 + 1;
                                *(_QWORD *)&v267[8 * v268 + 16] = v266;
                              }
                            }
                          }
                          else
                          {
                            sub_22EFF605C((uint64_t)a2);
                            v275 = (unsigned __int8 **)sub_22F072D74(v83, v274, 2260, 0);
                            v276 = v275;
                            if ((*(_QWORD *)(*((_QWORD *)&v349 + 1) + 8 * v251) & 0xFFFFFFFFFFFFFFF8) != 0)
                            {
                              if ((*(_DWORD *)((*(_QWORD *)(*((_QWORD *)&v349 + 1) + 8 * v251) & 0xFFFFFFFFFFFFFFF8)
                                              + 28) & 0x7Fu)
                                 - 35 >= 3)
                                v277 = 0;
                              else
                                v277 = *(_QWORD *)(*((_QWORD *)&v349 + 1) + 8 * v251) & 0xFFFFFFFFFFFFFFF8;
                            }
                            else
                            {
                              v277 = 0;
                            }
                            if (v275)
                            {
                              v291 = *v275;
                              if (!*v276)
                              {
                                v291 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v276[1]);
                                *v276 = v291;
                              }
                              v291[*v291 + 1] = 11;
                              v292 = *v276;
                              v293 = **v276;
                              *v292 = v293 + 1;
                              *(_QWORD *)&v292[8 * v293 + 16] = v277;
                            }
                            v294 = *(_QWORD *)(v252 + 16);
                            v295 = v294 & 0xFFFFFFFFFFFFFFF8;
                            if ((v294 & 4) != 0)
                              v295 = *(_QWORD *)v295;
                            if (v295)
                              v296 = v295 - 64;
                            else
                              v296 = 0;
                            if (v276)
                            {
                              v297 = (*(_WORD *)(v295 + 8) & 0x7E) - 34;
                              v298 = *v276;
                              if (!*v276)
                              {
                                v298 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v276[1]);
                                *v276 = v298;
                              }
                              if (v297 >= 4)
                                v299 = 0;
                              else
                                v299 = v296;
                              v298[*v298 + 1] = 11;
                              v300 = *v276;
                              v301 = **v276;
                              *v300 = v301 + 1;
                              *(_QWORD *)&v300[8 * v301 + 16] = v299;
                              v300[(v301 + 1) + 1] = 11;
                              v302 = *v276;
                              v303 = **v276;
                              *v302 = v303 + 1;
                              *(_QWORD *)&v302[8 * v303 + 16] = v252;
                            }
                          }
                        }
                        else
                        {
                          sub_22EFF605C((uint64_t)a2);
                          v271 = (unsigned __int8 **)sub_22F072D74(v83, v270, 2260, 0);
                          v272 = v271;
                          if ((*((_QWORD *)v340 + v251) & 0xFFFFFFFFFFFFFFF8) != 0)
                          {
                            if ((*(_DWORD *)((*((_QWORD *)v340 + v251) & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu) - 35 >= 3)
                              v273 = 0;
                            else
                              v273 = *((_QWORD *)v340 + v251) & 0xFFFFFFFFFFFFFFF8;
                          }
                          else
                          {
                            v273 = 0;
                          }
                          if (v271)
                          {
                            v278 = *v271;
                            if (!*v272)
                            {
                              v278 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v272[1]);
                              *v272 = v278;
                            }
                            v278[*v278 + 1] = 11;
                            v279 = *v272;
                            v280 = **v272;
                            *v279 = v280 + 1;
                            *(_QWORD *)&v279[8 * v280 + 16] = v273;
                          }
                          v281 = *(_QWORD *)(v253 + 16);
                          v282 = v281 & 0xFFFFFFFFFFFFFFF8;
                          if ((v281 & 4) != 0)
                            v282 = *(_QWORD *)v282;
                          if (v282)
                            v283 = v282 - 64;
                          else
                            v283 = 0;
                          if (v272)
                          {
                            v284 = (*(_WORD *)(v282 + 8) & 0x7E) - 34;
                            v285 = *v272;
                            if (!*v272)
                            {
                              v285 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v272[1]);
                              *v272 = v285;
                            }
                            if (v284 >= 4)
                              v286 = 0;
                            else
                              v286 = v283;
                            v285[*v285 + 1] = 11;
                            v287 = *v272;
                            v288 = **v272;
                            *v287 = v288 + 1;
                            *(_QWORD *)&v287[8 * v288 + 16] = v286;
                            v287[(v288 + 1) + 1] = 11;
                            v289 = *v272;
                            v290 = **v272;
                            *v289 = v290 + 1;
                            *(_QWORD *)&v289[8 * v290 + 16] = v253;
                          }
                        }
                      }
                      else
                      {
                        sub_22EFF605C((uint64_t)a2);
                        sub_22F072D74(v83, v269, 2259, 0);
                      }
                    }
                  }
                  v172 = 0xFFFFFFFFFFFFFFFFLL >> -(char)sub_22EF5CDF0(*(_QWORD *)(v83 + 8), *v88);
                  v173 = v172 & v337;
                  v174 = v172 & *(_QWORD *)&v347[16];
                  v175 = __p[0] < (void *)4 || v85;
                  if ((v175 & 1) == 0)
                  {
                    *(void **)v356 = __p[0];
                    *(void **)&v356[8] = __p[1];
                    v243 = (uint64_t *)(sub_22EF52AD4((unint64_t *)v356) & 0xFFFFFFFFFFFFFFF0);
                    if (sub_22F1110EC(*v243, 0))
                      goto LABEL_456;
                    sub_22EF5CCD0(*(_QWORD *)(v83 + 8), *v243, (uint64_t)v356);
                    if (v173 > *(_QWORD *)v356 || v174 > *(_QWORD *)v356)
                      goto LABEL_456;
                  }
                  if (v173 >= v174)
                  {
                    v177 = a1[1];
                    v178 = *((_QWORD *)a2 + 1);
                    v179 = *(_QWORD *)(*a1 + 8);
                    if (v173 <= v174)
                      v247 = qword_22F4A4A48;
                    else
                      v247 = &unk_22F4A4A18;
                    v176 = v247[(((unint64_t)*a2 >> 18) & 0x3F) - 10];
                    goto LABEL_498;
                  }
                  v176 = qword_22F4A49E8[(((unint64_t)*a2 >> 18) & 0x3F) - 10];
LABEL_277:
                  v177 = a1[1];
                  v178 = *((_QWORD *)a2 + 1);
                  v179 = *(_QWORD *)(*a1 + 8);
LABEL_498:
                  sub_22F03A1EC(v179, v176, v178, v177);
                  v6 = 1;
LABEL_460:
                  if (*((_QWORD *)&v349 + 1) != v319)
                    free(*((void **)&v349 + 1));
                  v107 = v340;
                  if (v340 == (void *)v320)
                    return v6;
                  goto LABEL_165;
                }
                if ((v81 & 0xF80000) != 0x380000)
                {
                  v244 = v83;
                  v245 = (uint64_t)a2;
                  v246 = 2262;
                  goto LABEL_458;
                }
                v232 = (uint64_t)__p[0] & 3;
                if (v232 == 3)
                {
                  v310 = ((unint64_t)__p[0] & 0x7FFFFFFF8) != 0;
                  if (((uint64_t)__p[0] & 4) != 0)
                    v310 = __p[0] > (void *)7;
                  if (v310)
                    goto LABEL_405;
                }
                else if (__p[0] > (void *)3)
                {
                  goto LABEL_405;
                }
                if ((_QWORD)v337)
                  goto LABEL_456;
LABEL_405:
                v233 = *(_QWORD *)v347;
                v234 = v347[0] & 3;
                if (v234 == 3)
                {
                  v311 = (*(_QWORD *)v347 & 0x7FFFFFFF8) != 0;
                  if ((v347[0] & 4) != 0)
                    v311 = *(_QWORD *)v347 > 7uLL;
                  if (v311)
                    goto LABEL_408;
                }
                else if (*(_QWORD *)v347 > 3uLL)
                {
                  goto LABEL_408;
                }
                if (*(_QWORD *)&v347[16])
                  goto LABEL_456;
LABEL_408:
                if (v232 == 2
                  || (~LOBYTE(__p[0]) & 3) != 0 && LODWORD(__p[1])
                  || v232 != 1
                  || ((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFFCLL) == 0
                  || *(unsigned __int8 *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFFCLL) == 186)
                {
                  if (v234 != 2
                    && ((~v347[0] & 3) == 0 || !*(_DWORD *)&v347[8])
                    && v234 == 1
                    && (*(_QWORD *)v347 & 0xFFFFFFFFFFFFFFFCLL) != 0
                    && *(unsigned __int8 *)(*(_QWORD *)v347 & 0xFFFFFFFFFFFFFFFCLL) != 186)
                  {
                    if (v232 == 3)
                    {
                      if (((uint64_t)__p[0] & 4) != 0)
                        v317 = __p[0] > (void *)7;
                      else
                        v317 = ((unint64_t)__p[0] & 0x7FFFFFFF8) != 0;
                      if (v317)
                        goto LABEL_456;
                      goto LABEL_414;
                    }
                    if (__p[0] > (void *)3)
                      goto LABEL_456;
                  }
                  if (((uint64_t)__p[0] & 3) == 0 && ((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFFCLL) != 0)
                  {
                    if ((sub_22EFBCB70((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFFCLL) & 1) != 0)
                      goto LABEL_456;
                    v233 = *(_QWORD *)v347;
                  }
                }
                else if (v234 == 3)
                {
                  v316 = (*(_QWORD *)v347 & 0x7FFFFFFF8) != 0;
                  if ((v347[0] & 4) != 0)
                    v316 = *(_QWORD *)v347 > 7uLL;
                  if (v316)
                    goto LABEL_456;
                }
                else if (*(_QWORD *)v347 >= 4uLL)
                {
                  goto LABEL_456;
                }
LABEL_414:
                if ((v233 & 3) == 0
                  && (v233 & 0xFFFFFFFFFFFFFFFCLL) != 0
                  && sub_22EFBCB70(v233 & 0xFFFFFFFFFFFFFFFCLL))
                {
                  goto LABEL_456;
                }
                if ((~LOBYTE(__p[0]) & 3) != 0)
                {
                  if (__p[0] <= (void *)3)
                    goto LABEL_421;
                }
                else
                {
                  if (((uint64_t)__p[0] & 4) != 0)
                    v312 = __p[0] > (void *)7;
                  else
                    v312 = ((unint64_t)__p[0] & 0x7FFFFFFF8) != 0;
                  if (!v312)
                    goto LABEL_421;
                }
                if (!(_QWORD)v337 && sub_22F03BDD8(*(_QWORD *)(v83 + 8), (uint64_t)v347))
                  goto LABEL_456;
LABEL_421:
                v235 = *(_QWORD *)v347;
                if ((~v347[0] & 3) != 0)
                {
                  if (*(_QWORD *)v347 <= 3uLL)
                    goto LABEL_426;
                }
                else
                {
                  v313 = (*(_QWORD *)v347 & 0x7FFFFFFF8) != 0;
                  if ((v347[0] & 4) != 0)
                    v313 = *(_QWORD *)v347 > 7uLL;
                  if (!v313)
                    goto LABEL_426;
                }
                if (!*(_QWORD *)&v347[16])
                {
                  if (sub_22F03BDD8(*(_QWORD *)(v83 + 8), (uint64_t)__p))
                    goto LABEL_456;
                  v235 = *(_QWORD *)v347;
                }
LABEL_426:
                if ((~(_BYTE)v235 & 3) != 0)
                {
                  if (v235 >= 4)
                    goto LABEL_428;
                }
                else
                {
                  if ((v235 & 4) != 0)
                    v314 = v235 > 7;
                  else
                    v314 = (v235 & 0x7FFFFFFF8) != 0;
                  if (v314)
                  {
LABEL_428:
                    if (sub_22F03BED8((uint64_t)__p[0]))
                      goto LABEL_456;
                  }
                }
                if ((~LOBYTE(__p[0]) & 3) != 0)
                {
                  if (__p[0] < (void *)4)
                  {
LABEL_432:
                    v176 = (*a2 & 0xF80000) == 0x380000 && (*a2 & 0xFC0000) != 3670016;
                    goto LABEL_277;
                  }
                }
                else
                {
                  if (((uint64_t)__p[0] & 4) != 0)
                    v315 = __p[0] > (void *)7;
                  else
                    v315 = ((unint64_t)__p[0] & 0x7FFFFFFF8) != 0;
                  if (!v315)
                    goto LABEL_432;
                }
                if (!sub_22F03BED8(*(uint64_t *)v347))
                  goto LABEL_432;
LABEL_456:
                v244 = v83;
                v245 = (uint64_t)a2;
                v246 = 103;
LABEL_458:
                sub_22F072CEC(v244, v245, v246, 0);
LABEL_459:
                v6 = 0;
                goto LABEL_460;
              }
              if ((v133 & 0xFF800FF) == 0x6D0000B)
              {
                sub_22F03A1EC(*(_QWORD *)(*a1 + 8), qword_22F4A4A48[(((unint64_t)*a2 >> 18) & 0x3F) - 10], *((_QWORD *)a2 + 1), a1[1]);
                return 1;
              }
              return sub_22F03A5B4(a1, (uint64_t)a2);
            }
            __p[0] = 0;
            __p[1] = (char *)&v337 + 8;
            *(_QWORD *)&v337 = 0x400000000;
            *(_QWORD *)v347 = 0;
            *(_QWORD *)&v347[8] = &v348;
            *(_QWORD *)&v347[16] = 0x400000000;
            v183 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
            *(_QWORD *)v356 = v83;
            *(_QWORD *)&v356[8] = __p;
            v184 = sub_22F025158((uint64_t)v356, v183);
            if ((v184 & 1) != 0
              || (v185 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 40))(v83),
                  **(_BYTE **)(v83 + 16) |= v185,
                  v185))
            {
              v186 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
              *(_QWORD *)v356 = v83;
              *(_QWORD *)&v356[8] = v347;
              if ((v184 & sub_22F025158((uint64_t)v356, v186)) == 1)
              {
                v187 = (_DWORD *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
                if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0 && *(_QWORD *)v347 > 7uLL)
                {
                  if ((v187[7] & 0x7Eu) - 58 >= 0xFFFFFFFC)
                  {
                    v188 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v187 + 32))((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
                    if ((*(_BYTE *)(v188 + 82) & 0xC) != 0 || sub_22EFD7260(v188))
                    {
                      sub_22EFF605C((uint64_t)a2);
                      v190 = (unsigned __int8 **)sub_22F072D74(v83, v189, 2194, 0);
                      if (v190)
                      {
                        v191 = v190;
                        v192 = *v190;
                        if (!v192)
                        {
                          v192 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v191[1]);
                          *v191 = v192;
                        }
                        v192[*v192 + 1] = 11;
                        v193 = *v191;
                        v194 = **v191;
                        *v193 = v194 + 1;
                        *(_QWORD *)&v193[8 * v194 + 16] = v187;
                      }
                    }
                  }
                  v195 = (_DWORD *)(*(_QWORD *)v347 & 0xFFFFFFFFFFFFFFF8);
                  if ((*(_QWORD *)v347 & 0xFFFFFFFFFFFFFFF8) != 0 && (v195[7] & 0x7Eu) - 58 >= 0xFFFFFFFC)
                  {
                    v196 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v195 + 32))(*(_QWORD *)v347 & 0xFFFFFFFFFFFFFFF8);
                    if ((*(_BYTE *)(v196 + 82) & 0xC) != 0 || sub_22EFD7260(v196))
                    {
                      sub_22EFF605C((uint64_t)a2);
                      v198 = (unsigned __int8 **)sub_22F072D74(v83, v197, 2194, 0);
                      if (v198)
                      {
                        v199 = v198;
                        v200 = *v198;
                        if (!v200)
                        {
                          v200 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v199[1]);
                          *v199 = v200;
                        }
                        v200[*v200 + 1] = 11;
                        v201 = *v199;
                        v202 = **v199;
                        *v201 = v202 + 1;
                        *(_QWORD *)&v201[8 * v202 + 16] = v195;
                      }
                    }
                  }
                  sub_22F03C1BC((uint64_t)__p, (uint64_t)v347);
                  __asm { BR              X12 }
                }
                __asm { BR              X13 }
              }
            }
            v6 = 0;
            if (*(__int128 **)&v347[8] != &v348)
              free(*(void **)&v347[8]);
            v107 = __p[1];
            if (__p[1] == (char *)&v337 + 8)
              return v6;
LABEL_165:
            free(v107);
            return v6;
          }
LABEL_235:
          *(_DWORD *)&v347[16] = 1;
          *(_QWORD *)&v347[8] = 0;
          v347[20] = 0;
          DWORD2(v348) = 1;
          *(_QWORD *)&v348 = 0;
          BYTE12(v348) = 0;
          v141 = llvm::APFloatBase::Bogus((llvm::APFloatBase *)v7);
          sub_22E99C474((llvm::APFloatBase *)((char *)&v349 + 8), v141);
          sub_22E99C474((llvm::APFloatBase *)&v352, v141);
          *(_DWORD *)&v356[16] = 1;
          *(_QWORD *)&v356[8] = 0;
          v356[20] = 0;
          DWORD2(v357) = 1;
          *(_QWORD *)&v357 = 0;
          BYTE12(v357) = 0;
          sub_22E99C474((llvm::APFloatBase *)((char *)&v358 + 8), v141);
          sub_22E99C474((llvm::APFloatBase *)&v361, v141);
          if (((*a2 >> 18) & 0x3F) - 21 <= 0xA)
          {
            __p[0] = 0;
            __p[1] = 0;
            *(_QWORD *)&v337 = 0;
            DWORD2(v337) |= 1u;
            v339 = 0;
            v340 = v342;
            v341 = 0x800000000;
            v343 = 0;
            v344 = 0;
            v148 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
            v363 = v83;
            *(_QWORD *)&v364 = __p;
            BYTE8(v364) = 0;
            sub_22F010358(&v363, v148, v142, v143, v144, v145, v146, v147, v318, v319, v320, v321, v322, v323, v324, v325, v326, v327, v328,
              (uint64_t)v329,
              v330,
              v331,
              v332,
              v333,
              (uint64_t)v334,
              v335,
              0,
              0,
              v337,
              v338,
              0,
              (uint64_t)v342,
              0x800000000,
              v342[0],
              v342[1],
              v342[2],
              v342[3],
              (void *)v342[4],
              v342[5]);
            if (v340 != v342)
              free(v340);
LABEL_313:
            v206 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 40))(v83);
            v205 = 0;
            v6 = 0;
            **(_BYTE **)(v83 + 16) |= v206;
            if (!(_DWORD)v206)
            {
LABEL_381:
              v230 = v361;
              v231 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v206);
              if (v231 == v230)
                sub_22E463170((llvm::APFloatBase *)&v362);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v361);
              if (v231 == *((_QWORD *)&v358 + 1))
                sub_22E463170((llvm::APFloatBase *)&v359);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v358 + 8));
              if (DWORD2(v357) >= 0x41 && (_QWORD)v357)
                MEMORY[0x2348A0E84](v357, 0x1000C8000313F17);
              if (*(_DWORD *)&v356[16] >= 0x41u && *(_QWORD *)&v356[8])
                MEMORY[0x2348A0E84](*(_QWORD *)&v356[8], 0x1000C8000313F17);
              if (v231 == v352)
                sub_22E463170((llvm::APFloatBase *)&v353);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v352);
              if (v231 == *((_QWORD *)&v349 + 1))
                sub_22E463170((llvm::APFloatBase *)&v350);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)((char *)&v349 + 8));
              if (DWORD2(v348) >= 0x41 && (_QWORD)v348)
                MEMORY[0x2348A0E84](v348, 0x1000C8000313F17);
              if (*(_DWORD *)&v347[16] < 0x41u)
                return v6;
              v229 = *(void **)&v347[8];
              if (!*(_QWORD *)&v347[8])
                return v6;
              goto LABEL_400;
            }
LABEL_314:
            v207 = *((_QWORD *)a2 + 3);
            v208 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v207 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            if (v208
              && (v209 = *(_DWORD *)(v208 + 16), v209 == 11)
              && ((v209 >> 19) & 0x1FE) - 210 <= 7)
            {
              __p[0] = (void *)v83;
              __p[1] = &v358;
              v206 = sub_22F032714((uint64_t *)__p, (unsigned __int8 *)v207);
              if ((v205 & v206) == 1)
              {
                v356[0] = 0;
                sub_22E99C474((llvm::APFloatBase *)&__p[1], *((uint64_t *)&v358 + 1));
                v210 = sub_22E51FDA0(&v361, (uint64_t *)&__p[1]);
                v211 = __p[1];
                if ((void *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v210) == v211)
                  v206 = (uint64_t)sub_22E463170((llvm::APFloatBase *)&v337);
                else
                  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&__p[1]);
LABEL_321:
                if (!v347[0])
                {
                  v224 = *((_QWORD *)&v349 + 1);
                  v225 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v206);
                  if (v225 == v224)
                    llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)((char *)&v349 + 8), (const llvm::detail::DoubleAPFloat *)((char *)&v358 + 8));
                  else
                    llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)((char *)&v349 + 8), (const llvm::detail::IEEEFloat *)((char *)&v358 + 8));
                  if (v225 == v352)
                    llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)&v352, (const llvm::detail::DoubleAPFloat *)&v361);
                  else
                    llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)&v352, (const llvm::detail::IEEEFloat *)&v361);
                  __asm { BR              X13 }
                }
                if (*(_DWORD *)&v347[16] > 0x40u)
                {
                  if (!llvm::APInt::equalSlowCase((llvm::APInt *)&v347[8], (const llvm::APInt *)&v356[8]))
                    goto LABEL_380;
                }
                else if (*(_QWORD *)&v347[8] != *(_QWORD *)&v356[8])
                {
                  goto LABEL_380;
                }
                if (DWORD2(v348) > 0x40)
                  llvm::APInt::equalSlowCase((llvm::APInt *)&v348, (const llvm::APInt *)&v357);
LABEL_380:
                __asm { BR              X13 }
              }
            }
            else
            {
              __p[0] = (void *)v83;
              __p[1] = v356;
              v206 = sub_22F01E534((uint64_t *)__p, (unsigned __int8 *)v207);
              if ((v205 & v206) == 1)
                goto LABEL_321;
            }
            v6 = 0;
            goto LABEL_381;
          }
          v180 = *(_QWORD *)(*(_QWORD *)(*v88 + 8) & 0xFFFFFFFFFFFFFFF0);
          if (v180)
            v181 = *(_DWORD *)(v180 + 16) == 11;
          else
            v181 = 0;
          if (v181)
          {
            v182 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
            if (((*(_DWORD *)(v180 + 16) >> 19) & 0x1FEu) - 210 <= 7)
            {
              __p[0] = (void *)v83;
              __p[1] = &v349;
              if (!sub_22F032714((uint64_t *)__p, v182))
                goto LABEL_313;
              v347[0] = 0;
              sub_22E99C474((llvm::APFloatBase *)&__p[1], *((uint64_t *)&v349 + 1));
              v203 = sub_22E51FDA0(&v352, (uint64_t *)&__p[1]);
              v204 = __p[1];
              if ((void *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v203) == v204)
                sub_22E463170((llvm::APFloatBase *)&v337);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&__p[1]);
              goto LABEL_312;
            }
          }
          else
          {
            v182 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
          }
          __p[0] = (void *)v83;
          __p[1] = v347;
          if ((sub_22F01E534((uint64_t *)__p, v182) & 1) == 0)
            goto LABEL_313;
LABEL_312:
          v205 = 1;
          goto LABEL_314;
        }
      }
      *(_DWORD *)v347 = sub_22EF74318(*(_QWORD *)(v83 + 8), v86);
      sub_22F3C4984((uint64_t)__p, 0, v347);
      *(_DWORD *)v356 = sub_22EF74318(*(_QWORD *)(v83 + 8), v87);
      sub_22F3C4984((uint64_t)v347, 0, v356);
      if ((sub_22F038AAC(*((_QWORD *)a2 + 2), (uint64_t)__p, v83) & 1) != 0)
      {
        if (sub_22F038AAC(*((_QWORD *)a2 + 3), (uint64_t)v347, v83))
        {
          if ((llvm::APFixedPoint::compare((llvm::APFixedPoint *)__p, (const llvm::APFixedPoint *)v347) & 0x80000000) == 0)
          {
            v219 = llvm::APFixedPoint::compare((llvm::APFixedPoint *)__p, (const llvm::APFixedPoint *)v347);
            v220 = a1[1];
            v221 = *((_QWORD *)a2 + 1);
            v222 = *(_QWORD *)(*a1 + 8);
            if (v219 < 1)
              v223 = qword_22F4A4A48;
            else
              v223 = &unk_22F4A4A18;
            v227 = v223[(((unint64_t)*a2 >> 18) & 0x3F) - 10];
            goto LABEL_371;
          }
LABEL_366:
          v227 = qword_22F4A49E8[(((unint64_t)*a2 >> 18) & 0x3F) - 10];
          v220 = a1[1];
          v221 = *((_QWORD *)a2 + 1);
          v222 = *(_QWORD *)(*a1 + 8);
LABEL_371:
          sub_22F03A1EC(v222, v227, v221, v220);
          v6 = 1;
          goto LABEL_372;
        }
      }
      else
      {
        v228 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 40))(v83);
        **(_BYTE **)(v83 + 16) |= v228;
        if (v228)
          sub_22F038AAC(*((_QWORD *)a2 + 3), (uint64_t)v347, v83);
      }
      goto LABEL_212;
    }
    v109 = *((_QWORD *)a2 + 2);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v109 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) != 39
      || v82 != 6
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) != 39)
    {
      return sub_22F03A5B4(a1, (uint64_t)a2);
    }
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v337 = 0;
    DWORD2(v337) |= 1u;
    v339 = 0;
    v340 = v342;
    v341 = 0x800000000;
    v343 = 0;
    v344 = 0;
    memset(v347, 0, sizeof(v347));
    LODWORD(v348) = v348 | 1;
    *(_QWORD *)&v349 = 0;
    *((_QWORD *)&v349 + 1) = (char *)&v350 + 8;
    *(_QWORD *)&v350 = 0x800000000;
    v355 = 0;
    v354 = 0;
    *(_QWORD *)v356 = *a1;
    *(_QWORD *)&v356[8] = __p;
    v356[16] = 0;
    v116 = sub_22F00C45C((uint64_t *)v356, (unsigned __int8 *)v109, v8, v9, v10, v11, v12, v13);
    if ((v116 & 1) != 0
      || (v117 = *a1,
          v118 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1),
          **(_BYTE **)(v117 + 16) |= v118,
          v118))
    {
      v119 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
      *(_QWORD *)v356 = *a1;
      *(_QWORD *)&v356[8] = v347;
      v356[16] = 0;
      v6 = 0;
      if ((v116 & sub_22F00C45C((uint64_t *)v356, v119, v110, v111, v112, v113, v114, v115)) != 1)
        goto LABEL_346;
      if (sub_22F03A460((uint64_t)__p, (uint64_t)v347))
      {
        if ((BYTE8(v337) & 1) == 0 && (v348 & 1) == 0)
        {
          if ((*(_OWORD *)v356 = *(_OWORD *)__p,
                v120 = sub_22EF52AD4((unint64_t *)v356),
                (_DWORD)v341 != (_DWORD)v350)
            || (v121 = BYTE8(v337) & 8, (BYTE8(v337) & 8) != 0) && (_DWORD)v341 != DWORD2(v337) >> 4
            || (v122 = sub_22F03C074(v120, (uint64_t)&v337 + 8, (uint64_t)&v348, v356),
                v341 - (v121 >> 3) > v122))
          {
            v123 = *a1;
            sub_22EFF605C((uint64_t)a2);
            sub_22F072D74(v123, v124, 2263, 0);
          }
        }
        v125 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (!v125 || *(_BYTE *)(v125 + 16) != 39)
          v125 = sub_22F10CF48(v125);
        v126 = *(_QWORD *)(v125 + 32);
        v333 = 0;
        if (sub_22F01E138(*a1, a2[1], v126, &v333))
        {
          if (v333)
          {
            LODWORD(v332) = 65;
            llvm::APInt::initSlowCase((llvm::APInt *)&v331);
            LODWORD(v364) = v332;
            v363 = v331;
            LODWORD(v332) = 0;
            BYTE4(v364) = 0;
            LODWORD(v330) = 65;
            llvm::APInt::initSlowCase((llvm::APInt *)&v329);
            LODWORD(v335) = v330;
            v334 = v329;
            LODWORD(v330) = 0;
            BYTE4(v335) = 0;
            LODWORD(v326) = 65;
            llvm::APInt::initSlowCase((llvm::APInt *)&v325);
            LODWORD(v328) = v326;
            v327 = v325;
            LODWORD(v326) = 0;
            BYTE4(v328) = 0;
            sub_22E5EDF90((llvm::APInt *)&v363, (uint64_t)v356);
            sub_22F024760((llvm::APInt *)v356, (const llvm::APInt *)&v327, (uint64_t)&v323);
            if (*(_DWORD *)&v356[8] >= 0x41u && *(_QWORD *)v356)
              MEMORY[0x2348A0E84](*(_QWORD *)v356, 0x1000C8000313F17);
            sub_22EF6A330(*(_QWORD *)(*a1 + 8), *((_QWORD *)a2 + 1));
            llvm::APInt::trunc((llvm::APInt *)&v323);
            LODWORD(v322) = *(_DWORD *)&v356[8];
            v321 = *(_QWORD *)v356;
            BYTE4(v322) = BYTE4(v324);
            sub_22E46361C((llvm::APInt *)&v321, (uint64_t)v356);
            if (*(_DWORD *)&v356[8] > 0x40u)
            {
              if ((llvm::APInt::equalSlowCase((llvm::APInt *)v356, (const llvm::APInt *)&v323) & 1) != 0)
              {
                if (*(_QWORD *)v356)
                  MEMORY[0x2348A0E84](*(_QWORD *)v356, 0x1000C8000313F17);
                goto LABEL_450;
              }
            }
            else if (*(_QWORD *)v356 == v323)
            {
              goto LABEL_450;
            }
            v242 = sub_22F01E2B8(*a1, (uint64_t)a2, (uint64_t)&v323, *((_QWORD *)a2 + 1));
            if (*(_DWORD *)&v356[8] >= 0x41u && *(_QWORD *)v356)
              MEMORY[0x2348A0E84](*(_QWORD *)v356, 0x1000C8000313F17);
            if ((v242 & 1) == 0)
            {
              v6 = 0;
LABEL_467:
              if (v322 >= 0x41 && v321)
                MEMORY[0x2348A0E84](v321, 0x1000C8000313F17);
              if (v324 >= 0x41 && v323)
                MEMORY[0x2348A0E84](v323, 0x1000C8000313F17);
              if (v328 >= 0x41 && v327)
                MEMORY[0x2348A0E84](v327, 0x1000C8000313F17);
              if (v335 >= 0x41 && v334)
                MEMORY[0x2348A0E84](v334, 0x1000C8000313F17);
              if (v364 >= 0x41 && v363)
                MEMORY[0x2348A0E84](v363, 0x1000C8000313F17);
              goto LABEL_346;
            }
LABEL_450:
            sub_22F01E460((llvm::APInt *)&v321, a1[1]);
            v6 = 1;
            goto LABEL_467;
          }
          v237 = (unsigned __int8 **)sub_22F072CEC(*a1, (uint64_t)a2, 2264, 0);
          if (v237)
          {
            v238 = v237;
            v239 = *v237;
            if (!v239)
            {
              v239 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v238[1]);
              *v238 = v239;
            }
            v6 = 0;
            v239[*v239 + 1] = 9;
            v240 = *v238;
            v241 = **v238;
            *v240 = v241 + 1;
            *(_QWORD *)&v240[8 * v241 + 16] = v126;
            goto LABEL_346;
          }
        }
      }
      else
      {
        if (!((unint64_t)v337 | *(_QWORD *)&v347[16]))
        {
          if (((uint64_t)__p[0] & 3) == 1)
            v212 = (unint64_t)__p[0] & 0xFFFFFFFFFFFFFFFCLL;
          else
            v212 = 0;
          v213 = (unsigned __int8 *)(*(_QWORD *)v347 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v347[0] & 3) != 1)
            v213 = 0;
          if (v212 && v213)
          {
            v214 = *v213;
            if (v214 != 104)
              v213 = 0;
            if (*(_BYTE *)v212 == 104 && v214 == 104)
            {
              v215 = *(_QWORD *)(*(_QWORD *)(v212 + 24) + 16);
              v216 = (_QWORD *)(v215 & 0xFFFFFFFFFFFFFFF8);
              if ((v215 & 4) != 0)
                v216 = (_QWORD *)*v216;
              v217 = *(_QWORD *)(*((_QWORD *)v213 + 3) + 16);
              v218 = (_QWORD *)(v217 & 0xFFFFFFFFFFFFFFF8);
              if ((v217 & 4) != 0)
                v218 = (_QWORD *)*v218;
              if (v216 == v218)
              {
                *(_DWORD *)v356 = 13;
                *(_QWORD *)&v356[8] = v212;
                *(_QWORD *)&v356[16] = v213;
                sub_22F01E36C((uint64_t)a1, v356);
                if (*(_DWORD *)v356 >= 2u)
                  sub_22EF53BC0((uint64_t *)v356);
                v6 = 1;
LABEL_346:
                if (*((__int128 **)&v349 + 1) != (__int128 *)((char *)&v350 + 8))
                  free(*((void **)&v349 + 1));
                v107 = v340;
                if (v340 == v342)
                  return v6;
                goto LABEL_165;
              }
            }
          }
        }
        sub_22F072CEC(*a1, (uint64_t)a2, 103, 0);
      }
    }
    v6 = 0;
    goto LABEL_346;
  }
  __p[0] = &v337;
  __p[1] = (void *)0x1000000000;
  v345 = a1;
  v346 = *(_OWORD *)a1;
  sub_22F03A72C((char **)__p, (unsigned __int8 *)a2);
  *(_DWORD *)v356 = 0;
  v360 = 0;
  v19 = LODWORD(__p[1]);
  if (!LODWORD(__p[1]))
    goto LABEL_152;
  do
  {
    v20 = (char *)__p[0] + 128 * v19;
    v21 = *((_DWORD *)v20 - 10);
    if (v21 == 2)
    {
      v25 = *((_QWORD *)v20 - 16);
      v26 = *(_DWORD *)v356;
      *(_DWORD *)v347 = *(_DWORD *)v356;
      *(_DWORD *)v356 = 0;
      *(_OWORD *)&v347[8] = *(_OWORD *)&v356[8];
      v348 = v357;
      v349 = v358;
      v350 = v359;
      v27 = v360;
      v351 = v360;
      v360 = 0;
      v28 = *(_DWORD *)v25;
      v29 = (*(_DWORD *)v25 >> 18) & 0x3F;
      if (v29 == 32)
      {
        if (!v27)
        {
          sub_22EF530AC((uint64_t)&v363, (uint64_t)v347);
          if (*(_DWORD *)v356 >= 2u)
            sub_22EF53BC0((uint64_t *)v356);
          *(_DWORD *)v356 = v363;
          *(_OWORD *)&v356[8] = v364;
          v357 = v365;
          v358 = v366;
          v359 = v367;
          goto LABEL_94;
        }
        goto LABEL_114;
      }
      v33 = v20 - 120;
      if ((v29 - 19) <= 1)
      {
        LOBYTE(v363) = 0;
        LOBYTE(v334) = 0;
        sub_22F0053B0((uint64_t)(v20 - 120));
        v35 = v34;
        sub_22F0053B0((uint64_t)v347);
        if (v35)
        {
          if (v36)
          {
            v37 = *(_QWORD *)(v25 + 8);
            v38 = *(_QWORD *)(*v345 + 8);
            if ((*(_DWORD *)v25 & 0xFC0000) == 0x500000)
            {
              v39 = (v363 | v334) == 0;
            }
            else if ((_BYTE)v363)
            {
              v39 = v334 == 0;
            }
            else
            {
              v39 = 1;
            }
            v64 = !v39;
            goto LABEL_89;
          }
        }
        else if (v36)
        {
          v64 = v334;
          if (v334 == ((*(_DWORD *)v25 & 0xFC0000) == 5242880))
          {
            v37 = *(_QWORD *)(v25 + 8);
            v38 = *(_QWORD *)(*v345 + 8);
LABEL_89:
            sub_22F03A1EC(v38, v64, v37, (uint64_t)v356);
LABEL_94:
            LOBYTE(v67) = 1;
            goto LABEL_115;
          }
        }
LABEL_114:
        LOBYTE(v67) = 0;
        goto LABEL_115;
      }
      if (*(v20 - 48) | v27)
        goto LABEL_114;
      v42 = *(_DWORD *)v33;
      if ((v29 - 5) <= 1 && v42 == 7 && v26 == 2)
      {
        if (v356 != v33)
        {
          sub_22EF530AC((uint64_t)&v363, (uint64_t)(v20 - 120));
          if (*(_DWORD *)v356 >= 2u)
            sub_22EF53BC0((uint64_t *)v356);
          *(_DWORD *)v356 = v363;
          *(_OWORD *)&v356[8] = v364;
          v357 = v365;
          v358 = v366;
          v359 = v367;
          v28 = *(_DWORD *)v25;
        }
        v65 = (v28 & 0xFC0000) == 1572864;
        v66 = (llvm::APInt *)&v347[8];
      }
      else
      {
        if ((v28 & 0xFC0000) != 0x140000 || v26 != 7 || v42 != 2)
        {
          if ((v28 & 0xFC0000) == 0x180000 && v42 == 7 && v26 == 7)
          {
            if (!(*((_QWORD *)v20 - 12) | (unint64_t)v348))
            {
              if ((*((_QWORD *)v20 - 14) & 3) == 1)
                v68 = *((_QWORD *)v20 - 14) & 0xFFFFFFFFFFFFFFFCLL;
              else
                v68 = 0;
              v69 = (unsigned __int8 *)(*(_QWORD *)&v347[8] & 0xFFFFFFFFFFFFFFFCLL);
              if ((v347[8] & 3) != 1)
                v69 = 0;
              if (v68 && v69 != 0)
              {
                LOBYTE(v67) = 0;
                v71 = *v69;
                if (v71 != 104)
                  v69 = 0;
                if (*(_BYTE *)v68 != 104 || v71 != 104)
                  goto LABEL_115;
                v72 = *(_QWORD *)(*(_QWORD *)(v68 + 24) + 16);
                v73 = (_QWORD *)(v72 & 0xFFFFFFFFFFFFFFF8);
                if ((v72 & 4) != 0)
                  v73 = (_QWORD *)*v73;
                v74 = *(_QWORD *)(*((_QWORD *)v69 + 3) + 16);
                v75 = (_QWORD *)(v74 & 0xFFFFFFFFFFFFFFF8);
                if ((v74 & 4) != 0)
                  v75 = (_QWORD *)*v75;
                if (v73 == v75)
                {
                  *(_DWORD *)v356 = 13;
                  LOBYTE(v67) = 1;
                  *(_QWORD *)&v356[8] = v68;
                  *(_QWORD *)&v356[16] = v69;
LABEL_115:
                  v360 = v67 ^ 1;
                  sub_22F03A96C((uint64_t)__p);
                  if (*(_DWORD *)v347 >= 2u)
                    sub_22EF53BC0((uint64_t *)v347);
                  goto LABEL_117;
                }
              }
            }
          }
          else
          {
            if (v42 == 2 && v26 == 2)
            {
              v76 = sub_22EF6A330(*(_QWORD *)(v346 + 8), *(_QWORD *)(v25 + 8));
              v77 = sub_22F110C5C(*(_QWORD *)(*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF0));
              LODWORD(v364) = v76;
              if (v76 > 0x40)
              {
                v80 = v77;
                llvm::APInt::initSlowCase((llvm::APInt *)&v363);
                v77 = v80;
              }
              else
              {
                v363 = 0;
              }
              BYTE4(v364) = v77;
              v78 = v346;
              v79 = *(_DWORD *)v25;
              LODWORD(v335) = *(_DWORD *)&v347[16];
              if (*(_DWORD *)&v347[16] > 0x40u)
              {
                v320 = v346;
                llvm::APInt::initSlowCase((llvm::APInt *)&v334, (const llvm::APInt *)&v347[8]);
                v78 = v320;
              }
              else
              {
                v334 = *(uint64_t ***)&v347[8];
              }
              BYTE4(v335) = v347[20];
              v67 = sub_22F03AA5C(v78, v25, (llvm::APInt *)(v20 - 112), (v79 >> 18) & 0x3F, &v334, &v363);
              if (v335 >= 0x41 && v334)
                MEMORY[0x2348A0E84](v334, 0x1000C8000313F17);
              if (v67)
                sub_22F01E460((llvm::APInt *)&v363, (uint64_t)v356);
              if (v364 >= 0x41 && v363)
                MEMORY[0x2348A0E84](v363, 0x1000C8000313F17);
              goto LABEL_115;
            }
            sub_22F072CEC(*v345, v25, 103, 0);
          }
          goto LABEL_114;
        }
        sub_22EF530AC((uint64_t)&v363, (uint64_t)v347);
        if (*(_DWORD *)v356 >= 2u)
          sub_22EF53BC0((uint64_t *)v356);
        *(_DWORD *)v356 = v363;
        *(_OWORD *)&v356[8] = v364;
        v357 = v365;
        v358 = v366;
        v359 = v367;
        v66 = (llvm::APInt *)(v20 - 112);
        v65 = 0;
      }
      sub_22F03A9B8((uint64_t)v356, v66, v65);
      goto LABEL_94;
    }
    if (v21 == 1)
    {
      v22 = *((_QWORD *)v20 - 16);
      v23 = (*(_DWORD *)v22 >> 18) & 0x3F;
      if (v23 == 32)
      {
        if (v360)
        {
          v24 = (_DWORD *)v346;
          **(_BYTE **)(v346 + 16) = 1;
          if (v24[210] != 3
            && ((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v24 + 24))(v24) & 1) == 0
            && ((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v24 + 16))(v24) & 1) == 0)
          {
            goto LABEL_66;
          }
        }
      }
      else if ((v23 - 19) > 1)
      {
        if (v360)
        {
          v40 = v346;
          v41 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v346 + 40))(v346);
          **(_BYTE **)(v40 + 16) |= v41;
          if ((v41 & 1) == 0)
            goto LABEL_66;
        }
      }
      else
      {
        v347[0] = 0;
        if (v360 || (sub_22F0053B0((uint64_t)v356), !v32))
        {
          v360 = 1;
          v51 = (_DWORD *)v346;
          **(_BYTE **)(v346 + 16) = 1;
          if (v51[210] != 3
            && ((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v51 + 24))(v51) & 1) == 0
            && ((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v51 + 16))(v51) & 1) == 0)
          {
            goto LABEL_66;
          }
          v52 = v346;
          v53 = *(_QWORD *)(v346 + 16);
          *(_OWORD *)v347 = *(_OWORD *)v53;
          v54 = *(_DWORD *)(v346 + 820);
          *(_QWORD *)(v53 + 8) = 0;
          *(_DWORD *)(v52 + 820) = *(_DWORD *)(v52 + 32) + 1;
          v55 = *((_QWORD *)v20 - 4);
          if (v55)
          {
            *(_OWORD *)*(_QWORD *)(v55 + 16) = *(_OWORD *)(v20 - 24);
            *(_DWORD *)(*((_QWORD *)v20 - 4) + 820) = *((_DWORD *)v20 - 2);
          }
          *((_QWORD *)v20 - 4) = v52;
          *(_OWORD *)(v20 - 24) = *(_OWORD *)v347;
          *((_DWORD *)v20 - 2) = v54;
        }
        else if (v347[0] == ((*(_DWORD *)v22 & 0xFC0000) == 5242880))
        {
          sub_22F03A1EC(*(_QWORD *)(*v345 + 8), v347[0], *(_QWORD *)(v22 + 8), (uint64_t)v356);
          goto LABEL_66;
        }
      }
      v56 = *((_DWORD *)v20 - 30);
      *((_DWORD *)v20 - 30) = *(_DWORD *)v356;
      *(_DWORD *)v356 = v56;
      v58 = *((_OWORD *)v20 - 5);
      v57 = *((_OWORD *)v20 - 4);
      v60 = *((_OWORD *)v20 - 7);
      v59 = *((_OWORD *)v20 - 6);
      v61 = v359;
      v63 = *(_OWORD *)&v356[8];
      v62 = v357;
      *((_OWORD *)v20 - 5) = v358;
      *((_OWORD *)v20 - 4) = v61;
      *((_OWORD *)v20 - 7) = v63;
      *((_OWORD *)v20 - 6) = v62;
      *(_OWORD *)&v356[8] = v60;
      v357 = v59;
      v358 = v58;
      v359 = v57;
      *(v20 - 48) = v360;
      v360 = 0;
      *((_DWORD *)v20 - 10) = 2;
      v31 = *(unsigned __int8 **)(v22 + 24);
    }
    else
    {
      v30 = *((_QWORD *)v20 - 16);
      if ((*(_BYTE *)v30 & 0xFE) != 0x70)
        goto LABEL_62;
      if ((sub_22F03A298(*((_QWORD *)v20 - 16)) & 1) == 0)
      {
        v30 = *((_QWORD *)v20 - 16);
LABEL_62:
        v50 = sub_22F009DC4((uint64_t)v356, (uint64_t *)v346, v30, v14, v15, v16, v17, v18);
        v360 = !v50;
        if (!v50)
        {
          if (*(_DWORD *)v356 >= 2u)
            sub_22EF53BC0((uint64_t *)v356);
          *(_DWORD *)v356 = 0;
        }
LABEL_66:
        sub_22F03A96C((uint64_t)__p);
        goto LABEL_117;
      }
      *((_DWORD *)v20 - 10) = 1;
      v31 = *(unsigned __int8 **)(v30 + 16);
    }
    sub_22F03A72C((char **)__p, v31);
LABEL_117:
    v19 = LODWORD(__p[1]);
  }
  while (LODWORD(__p[1]));
  LODWORD(v19) = *(_DWORD *)v356;
  if (v360)
  {
    v6 = 0;
    goto LABEL_153;
  }
LABEL_152:
  v92 = *((_QWORD *)&v346 + 1);
  v93 = **((_DWORD **)&v346 + 1);
  **((_DWORD **)&v346 + 1) = v19;
  *(_DWORD *)v356 = v93;
  v94 = *(_OWORD *)(v92 + 56);
  v95 = *(_OWORD *)(v92 + 40);
  v96 = *(_OWORD *)(v92 + 24);
  v97 = *(_OWORD *)(v92 + 8);
  v98 = *(_OWORD *)&v356[8];
  v99 = v357;
  v100 = v358;
  *(_OWORD *)(v92 + 56) = v359;
  *(_OWORD *)(v92 + 40) = v100;
  *(_OWORD *)(v92 + 24) = v99;
  *(_OWORD *)(v92 + 8) = v98;
  *(_OWORD *)&v356[8] = v97;
  v357 = v96;
  v358 = v95;
  v359 = v94;
  v6 = 1;
  LODWORD(v19) = v93;
LABEL_153:
  if (v19 >= 2)
    sub_22EF53BC0((uint64_t *)v356);
  v101 = (__int128 *)__p[0];
  if (LODWORD(__p[1]))
  {
    v102 = (unint64_t)LODWORD(__p[1]) << 7;
    do
    {
      v103 = (char *)v101 + v102;
      v104 = *(_QWORD *)((char *)v101 + v102 - 32);
      if (v104)
      {
        *(_OWORD *)*(_QWORD *)(v104 + 16) = *(_OWORD *)(v103 - 24);
        *(_DWORD *)(*((_QWORD *)v103 - 4) + 820) = *((_DWORD *)v103 - 2);
      }
      v106 = *((_DWORD *)v103 - 30);
      v105 = (uint64_t *)(v103 - 120);
      if (v106 >= 2)
        sub_22EF53BC0(v105);
      v102 -= 128;
    }
    while (v102);
    v101 = (__int128 *)__p[0];
  }
  if (v101 != &v337)
  {
    v107 = v101;
    goto LABEL_165;
  }
  return v6;
}

unint64_t sub_22F01B764(uint64_t *a1, unsigned int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v4 = sub_22EFFA8F0((uint64_t)a2);
  if (v4)
    return sub_22F03C268(a1, a2, v4, v5, v6, v7, v8, v9);
  else
    return sub_22F03F288(a1, a2);
}

uint64_t sub_22F01B7B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;
  llvm::APInt *v6;
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;

  switch((*(_DWORD *)a2 >> 18) & 0x1F)
  {
    case 6:
    case 0xC:
      return sub_22F0175A4(a1, *(_QWORD *)(a2 + 16));
    case 7:
      if (!sub_22F0175A4(a1, *(_QWORD *)(a2 + 16)))
        return 0;
      v5 = a1[1];
      if (*(_DWORD *)v5 != 2)
        goto LABEL_12;
      v6 = (llvm::APInt *)(v5 + 8);
      if (*(_BYTE *)(v5 + 20))
        goto LABEL_9;
      v7 = *(_DWORD *)(v5 + 16);
      if (v7 > 0x40)
      {
        if (((*(_QWORD *)(*(_QWORD *)v6 + 8 * ((v7 - 1) >> 6)) >> (v7 - 1)) & 1) != 0
          && llvm::APInt::countTrailingZerosSlowCase(v6) == v7 - 1)
        {
          goto LABEL_8;
        }
LABEL_9:
        sub_22F311024(v6, (uint64_t)&v14);
        goto LABEL_18;
      }
      if (*(_QWORD *)v6 != 1 << (v7 - 1))
        goto LABEL_9;
LABEL_8:
      if ((*(_BYTE *)(a2 + 2) & 0x80) == 0)
        goto LABEL_9;
      v10 = *a1;
      sub_22E46361C(v6, (uint64_t)&v12);
      sub_22F311024((llvm::APInt *)&v12, (uint64_t)&v14);
      v11 = sub_22F01E2B8(v10, a2, (uint64_t)&v14, *(_QWORD *)(a2 + 8));
      if (v15 >= 0x41 && v14)
        MEMORY[0x2348A0E84](v14, 0x1000C8000313F17);
      if (v13 >= 0x41 && v12)
        MEMORY[0x2348A0E84](v12, 0x1000C8000313F17);
      if (v11)
        goto LABEL_9;
      return 0;
    case 8:
      if (!sub_22F0175A4(a1, *(_QWORD *)(a2 + 16)))
        return 0;
      v8 = (_DWORD *)a1[1];
      if (*v8 != 2)
      {
LABEL_12:
        sub_22F072CEC(*a1, a2, 103, 0);
        return 0;
      }
      sub_22F3103B8((llvm::APInt *)(v8 + 2), (uint64_t)&v14);
LABEL_18:
      sub_22F01E460((llvm::APInt *)&v14, a1[1]);
      if (v15 >= 0x41)
      {
        if (v14)
          MEMORY[0x2348A0E84](v14, 0x1000C8000313F17);
      }
      return 1;
    case 9:
      LOBYTE(v14) = 0;
      v9 = sub_22F024504(*(_QWORD *)(a2 + 16), (uint64_t)&v14, *a1);
      if ((_DWORD)v9)
        sub_22F03A1EC(*(_QWORD *)(*a1 + 8), (_BYTE)v14 == 0, *(_QWORD *)(a2 + 8), a1[1]);
      return v9;
    default:
      goto LABEL_12;
  }
}

uint64_t sub_22F01BA14(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[3];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28[2];
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;

  v37 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 96))(*a1) + 2000) + 1) & 4) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1) & 1) != 0)
  {
    memset(v22, 0, sizeof(v22));
    LODWORD(v23) = -1;
    v25 = 0;
    v26 = v28;
    v27 = 0x800000000;
    v34 = 0;
    v35 = 0;
    v10 = *(unsigned __int8 **)(a2 + 16);
    v14 = *a1;
    LOBYTE(v15) = 0;
    v11 = 0;
    if (sub_22F010358(&v14, v10, v4, v5, v6, v7, v8, v9, v13, v14, (uint64_t)v22, v15, v16, v17, v18, v19, v20, v21, 0,
                         0,
                         0,
                         v23,
                         v24,
                         0,
                         (uint64_t)v28,
                         0x800000000,
                         v28[0],
                         v28[1],
                         v29,
                         v30,
                         v31,
                         v32,
                         v33,
                         0,
                         0,
                         v36,
                         v37,
                         v38,
                         v39))
    {
      LODWORD(v14) = 0;
      v11 = sub_22F01BB7C((uint64_t *)*a1, a2, (uint64_t)v22, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), (*(_DWORD *)a2 & 0x740000) == 0, &v14);
      if ((_DWORD)v11)
        sub_22F01E36C((uint64_t)a1, &v14);
      if (v14 >= 2)
        sub_22EF53BC0(&v14);
    }
    if (v26 != v28)
      free(v26);
  }
  else
  {
    sub_22F072CEC(*a1, a2, 103, 0);
    return 0;
  }
  return v11;
}

uint64_t sub_22F01BB7C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  signed int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unsigned int v35;
  unint64_t v36;
  signed int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  signed int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  _BOOL4 v50;
  uint64_t v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  _QWORD *v56;
  unsigned __int8 *v57;
  _BYTE *v58;
  uint64_t v59;
  _QWORD *v60;
  unsigned __int8 *v61;
  _BYTE *v62;
  uint64_t v63;
  unsigned __int8 v64;
  _BOOL8 v65;
  _BYTE *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unsigned __int8 *v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  unint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unsigned __int8 **v95;
  unsigned __int8 **v96;
  unsigned __int8 *v97;
  _BYTE *v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  int v102;
  unint64_t v103;
  unsigned __int8 *v104;
  _BYTE *v105;
  uint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  int v111;
  unsigned __int8 **v112;
  unsigned __int8 **v113;
  unsigned __int8 *v114;
  _BYTE *v115;
  uint64_t v116;
  _BYTE *v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  unsigned __int8 *v123;
  _BYTE *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  int v128;
  uint64_t *v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t *v132;
  __int128 v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  _BYTE v137[24];
  __int128 v138;
  void *v139[2];
  _OWORD v140[4];
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;

  v143 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a3 + 24) & 1) != 0)
    return 0;
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a1 + 96))(a1) + 2000) + 1) & 4) == 0)
  {
LABEL_3:
    v12 = (uint64_t)a1;
    v13 = a2;
LABEL_4:
    sub_22F072CEC(v12, v13, 103, 0);
    return 0;
  }
  v14 = a5 ? 3 : 4;
  v15.n128_f64[0] = sub_22F015608((unint64_t *)&v133, (uint64_t)a1, a2, v14, a3, a4);
  v129 = a1;
  v130 = a2;
  v131 = v14;
  v132 = a6;
  v16 = v135;
  if (v135 < 0x10)
    return 0;
  v17 = *(_DWORD *)(a3 + 24);
  if ((v17 & 1) != 0)
    return 0;
  if ((v17 & 2) != 0)
    goto LABEL_14;
  v18 = *(_DWORD *)(a3 + 56);
  if ((v17 & 8) != 0 && ((v18 == 1) & (v17 >> 2)) == 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * (int)((v17 >> 4) - 1)) == *(_QWORD *)(a3 + 32))
      goto LABEL_14;
    goto LABEL_21;
  }
  if (((v18 == 1) & (v17 >> 2)) != 0)
  {
LABEL_14:
    if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *, __n128))(*a1 + 96))(a1, v15) + 2000) + 1) & 2) != 0)
    {
      v19 = *(_DWORD *)(a3 + 24);
      if ((v19 & 2) != 0
        || (v19 & 8) != 0
        && ((*(_DWORD *)(a3 + 56) == 1) & (v19 >> 2)) == 0
        && *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * (int)((v19 >> 4) - 1)) == *(_QWORD *)(a3 + 32))
      {
        v20 = 2172;
      }
      else
      {
        v20 = 2176;
      }
      result = sub_22F072CEC((uint64_t)a1, a2, v20, 0);
      if (!result)
        return result;
      v56 = (_QWORD *)result;
      v57 = *(unsigned __int8 **)result;
      if (!*(_QWORD *)result)
      {
        v57 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(result + 8));
        *v56 = v57;
      }
      result = 0;
      v57[*v57 + 1] = 2;
LABEL_109:
      v58 = (_BYTE *)*v56;
      v59 = *(unsigned __int8 *)*v56;
      *v58 = v59 + 1;
      *(_QWORD *)&v58[8 * v59 + 16] = v14;
      return result;
    }
    goto LABEL_3;
  }
LABEL_21:
  v21 = 0;
  v127 = 0;
  v22 = 0;
  v23 = v134;
  v128 = -v18;
  while (1)
  {
    v24 = v128 + v21;
    if (*(_DWORD *)v23 != 1)
      break;
    v25 = v131;
    if (v131 - 5 >= 5 && ((1 << v131) & 6) == 0)
      goto LABEL_110;
LABEL_27:
    if (((v16 & 1) != 0 || *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFF0) + 8) & 5 | v16 & 4)
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
    {
      v26 = *(_QWORD *)(a3 + 48);
      *(_OWORD *)v137 = v133;
      *(_QWORD *)&v137[16] = v26;
      *(_QWORD *)&v138 = v21;
      v136 = 0;
      if ((sub_22F02BC74(a1[96], *((_DWORD *)a1 + 196), (uint64_t *)v137, &v136) & 1) != 0)
      {
        if (*(_DWORD *)(v136 + 32))
          v16 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFFALL | v16 & 2;
      }
    }
    if (!v24
      || (v27 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF0), v24 == -1)
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
    {
      if ((v16 & 4) != 0
        || (v27 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF0), (*(_BYTE *)((v16 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0))
      {
        v28 = v131;
        if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *, __n128))(*a1 + 96))(a1, v15) + 2000) + 1) & 1) == 0)
          goto LABEL_3;
        v79 = v127;
        if (v127)
        {
          v80 = *(_DWORD *)(v127 + 24);
          v81 = 2;
        }
        else
        {
          v103 = v133 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v133 & 3) != 0 || !v103)
          {
            v79 = 0;
            v80 = 0;
            v81 = 0;
            if ((v133 & 3) == 1 && v103)
            {
              sub_22EFF605C(v103);
              v80 = v111;
              v79 = 0;
              v81 = 0;
            }
          }
          else
          {
            v80 = *(_DWORD *)(v103 + 24);
            v81 = 1;
            v79 = v133 & 0xFFFFFFFFFFFFFFFCLL;
          }
        }
        v112 = (unsigned __int8 **)sub_22F072CEC((uint64_t)a1, a2, 2177, 1);
        if (v112)
        {
          v113 = v112;
          v114 = *v112;
          if (!v114)
          {
            v114 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v113[1]);
            *v113 = v114;
          }
          v114[*v114 + 1] = 2;
          v115 = *v113;
          v116 = **v113;
          *v115 = v116 + 1;
          *(_QWORD *)&v115[8 * v116 + 16] = v28;
          v115[(v116 + 1) + 1] = 2;
          v117 = *v113;
          v118 = **v113;
          *v117 = v118 + 1;
          *(_QWORD *)&v117[8 * v118 + 16] = v81;
          v117[(v118 + 1) + 1] = 11;
          v119 = *v113;
          v120 = **v113;
          *v119 = v120 + 1;
          *(_QWORD *)&v119[8 * v120 + 16] = v79;
        }
        result = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
        if ((_DWORD)result)
        {
          v121 = sub_22F072E10((uint64_t)a1, v80, 2290);
          v122 = (_QWORD *)v121;
          v123 = *(unsigned __int8 **)v121;
          if (!*(_QWORD *)v121)
          {
            v123 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(v121 + 8));
            *v122 = v123;
          }
          result = 0;
          v123[*v123 + 1] = 2;
          v124 = (_BYTE *)*v122;
          v125 = *(unsigned __int8 *)*v122;
          *v124 = v125 + 1;
          *(_QWORD *)&v124[8 * v125 + 16] = v81;
        }
        return result;
      }
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45
        && !sub_22F01C91C((unint64_t *)&v133, (uint64_t)a1, v131)
        && (sub_22F01C988((uint64_t)a1, a2, v131, v16) & 1) != 0)
      {
        return 0;
      }
      if (!v24)
      {
        v73 = v132;
        if (v132)
        {
          if (v132 != (uint64_t *)v23)
          {
            sub_22EF530AC((uint64_t)v137, v23);
            if (*(_DWORD *)v132 >= 2u)
              sub_22EF53BC0(v132);
            *(_DWORD *)v132 = *(_DWORD *)v137;
            v74 = *(_OWORD *)&v137[8];
            v75 = v138;
            v76 = *(_OWORD *)v139;
            *(_OWORD *)(v73 + 7) = v140[0];
            *(_OWORD *)(v73 + 5) = v76;
            *(_OWORD *)(v73 + 3) = v75;
            *(_OWORD *)(v73 + 1) = v74;
          }
          v132 = 0;
        }
        switch(*(_DWORD *)v23)
        {
          case 2:
            v77 = (unint64_t *)(v23 + 8);
            v78 = v16;
            goto LABEL_156;
          case 3:
            v87 = v23 + 8;
            v88 = v16;
            goto LABEL_162;
          case 5:
            v89 = *v27;
            if (!*v27 || *(_BYTE *)(v89 + 16) != 12)
              v89 = sub_22F10CF48(v89);
            v78 = (*(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF0) + 8) | v16) & 7 | *(_QWORD *)(v89 + 32);
            v77 = (unint64_t *)(v23 + 8);
LABEL_156:
            if ((sub_22F01CF80((uint64_t)&v129, v77, v78) & 1) == 0)
              return 0;
            goto LABEL_163;
          case 6:
            v90 = *v27;
            if (!*v27 || *(_BYTE *)(v90 + 16) != 12)
              v90 = sub_22F10CF48(v90);
            v88 = (*(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF0) + 8) | v16) & 7 | *(_QWORD *)(v90 + 32);
            v87 = v23 + 8;
LABEL_162:
            if ((sub_22F01D3E8((uint64_t)&v129, v87, v88) & 1) != 0)
              goto LABEL_163;
            return 0;
          case 7:
            result = sub_22F01D84C((uint64_t *)&v129, v16);
            if (!(_DWORD)result)
              return result;
            v91 = *v27;
            if ((!*v27 || *(_BYTE *)(v91 + 16) != 39)
              && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v91 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
               || (v91 = sub_22F10CF48(v91)) == 0))
            {
LABEL_182:
              v12 = (uint64_t)v129;
              v13 = v130;
              goto LABEL_4;
            }
            v92 = *(_QWORD *)(v91 + 32);
            memset(v137, 0, sizeof(v137));
            LODWORD(v138) = v138 | 1;
            v139[0] = 0;
            v139[1] = (char *)v140 + 8;
            *(_QWORD *)&v140[0] = 0x800000000;
            v141 = 0;
            v142 = 0;
            sub_22F01D8E0(v137, v129[1], v23);
            if (v131 == 3)
              v93 = 1;
            else
              v93 = -1;
            v94 = sub_22F01DC1C((uint64_t)v129, v130, (uint64_t)v137, v92, v93);
            if (v94)
              sub_22F00676C((uint64_t)v137, v23);
            if (v139[1] != (char *)v140 + 8)
              free(v139[1]);
            if (!v94)
              return 0;
LABEL_163:
            if (((1 << v131) & 0xE3) != 0
              || !v22
              || (*(_BYTE *)(v22 + 68) & 1) == 0
              || (result = sub_22F01CBE4((uint64_t)a1, a2, (int *)v23, v22), (_DWORD)result))
            {
              result = 1;
            }
            break;
          default:
            goto LABEL_182;
        }
        return result;
      }
    }
    v29 = *v27;
    v30 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_DWORD *)(v30 + 16) & 0xFEu) - 2 <= 3)
    {
      v31 = sub_22EF5C728(a1[1], v16);
      if (*(_BYTE *)(v31 + 16) == 2)
        v32 = v31;
      else
        v32 = 0;
      v33 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v21);
      v34 = (unint64_t *)(v32 + 40);
      v35 = *(_DWORD *)(v32 + 48);
      if (v35 < 0x41)
        goto LABEL_50;
      if (v35 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v32 + 40)) <= 0x40)
      {
        v34 = (unint64_t *)*v34;
LABEL_50:
        if (*v34 <= v33)
          goto LABEL_116;
      }
      v16 = *(_QWORD *)(v32 + 32);
      if (v33 >= *(unsigned int *)(v23 + 16))
        sub_22F01CCF4(v23, v33);
      v22 = 0;
      v23 = *(_QWORD *)(v23 + 8) + 72 * v33;
      goto LABEL_103;
    }
    v36 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v21);
    if (*(_DWORD *)(v30 + 16) == 12)
    {
      if (v36 >= 2)
      {
LABEL_116:
        if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a1 + 96))(a1) + 2000) + 1) & 2) == 0)
          goto LABEL_3;
        result = sub_22F072CEC((uint64_t)a1, a2, 2172, 0);
        if (result)
        {
          v68 = (_QWORD *)result;
          v69 = (int)v131;
          v70 = *(unsigned __int8 **)result;
          if (!*(_QWORD *)result)
          {
            v70 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(result + 8));
            *v68 = v70;
          }
          result = 0;
          v70[*v70 + 1] = 2;
          v71 = (_BYTE *)*v68;
          v72 = *(unsigned __int8 *)*v68;
          *v71 = v72 + 1;
          *(_QWORD *)&v71[8 * v72 + 16] = v69;
        }
        return result;
      }
      if (*(_BYTE *)(v29 + 16) != 12)
        v29 = sub_22F10CF48(v29);
      if ((v16 & 1) != 0)
        v82 = 1;
      else
        v82 = v27[1] & 1;
      v83 = *(_QWORD *)(v29 + 32);
      if ((v16 & 4) != 0)
      {
        v84 = v82 | v83;
      }
      else
      {
        v84 = v82 | v83;
        if ((v27[1] & 4) == 0)
        {
LABEL_142:
          if (*(_DWORD *)v23 == 5)
          {
            if (v36)
              v85 = (unint64_t *)(v23 + 24);
            else
              v85 = (unint64_t *)(v23 + 8);
            return sub_22F01CF80((uint64_t)&v129, v85, v84);
          }
          else
          {
            if (v36)
              v86 = v23 + 40;
            else
              v86 = v23 + 8;
            return (uint64_t)sub_22F01D3E8((uint64_t)&v129, v86, v84);
          }
        }
      }
      v84 |= 4uLL;
      goto LABEL_142;
    }
    v22 = v36 & 0xFFFFFFFFFFFFFFF8;
    if (v22 && (*(_DWORD *)(v22 + 28) & 0x7Fu) - 49 <= 2)
    {
      if ((*(_BYTE *)(v22 + 68) & 2) != 0)
      {
        v37 = v131;
        if (!sub_22F01C91C((unint64_t *)&v133, (uint64_t)a1, v131))
        {
          v95 = (unsigned __int8 **)sub_22F072CEC((uint64_t)a1, a2, 2170, 1);
          if (v95)
          {
            v96 = v95;
            v97 = *v95;
            if (!v97)
            {
              v97 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v96[1]);
              *v96 = v97;
            }
            v97[*v97 + 1] = 2;
            v98 = *v96;
            v99 = **v96;
            *v98 = v99 + 1;
            *(_QWORD *)&v98[8 * v99 + 16] = v37;
            v98[(v99 + 1) + 1] = 11;
            v100 = *v96;
            v101 = **v96;
            *v100 = v101 + 1;
            *(_QWORD *)&v100[8 * v101 + 16] = v22;
          }
          v102 = *(_DWORD *)(v22 + 24);
          result = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
          if ((_DWORD)result)
          {
            sub_22F072E10((uint64_t)a1, v102, 100);
            return 0;
          }
          return result;
        }
        v30 = *(_QWORD *)(*(_QWORD *)(*v27 + 8) & 0xFFFFFFFFFFFFFFF0);
      }
      if ((*(_DWORD *)(sub_22F114198(*(_QWORD *)(v30 + 24)) + 72) & 0xE000) == 0x4000)
      {
        v38 = *(_QWORD *)(v23 + 8);
        if (!v38)
          goto LABEL_66;
        v39 = *(_QWORD *)(v23 + 8);
        if ((*(_BYTE *)(v38 + 29) & 0x80) != 0)
        {
          v40 = *(_QWORD *)(v23 + 8);
          v41 = sub_22EFB5D7C(v40);
          v38 = v40;
          v39 = v41;
        }
        v42 = v22;
        if ((*(_BYTE *)(v22 + 29) & 0x80) != 0)
        {
          v126 = v38;
          v42 = sub_22EFB5D7C(v22);
          v38 = v126;
        }
        if (v39 != v42)
        {
LABEL_66:
          v43 = v131;
          v14 = v38;
          result = sub_22F072CEC((uint64_t)a1, a2, 2169, 0);
          if (!result)
            return result;
          v56 = (_QWORD *)result;
          v104 = *(unsigned __int8 **)result;
          if (!*(_QWORD *)result)
          {
            v104 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(result + 8));
            *v56 = v104;
          }
          result = 0;
          v104[*v104 + 1] = 2;
          v105 = (_BYTE *)*v56;
          v106 = *(unsigned __int8 *)*v56;
          *v105 = v106 + 1;
          *(_QWORD *)&v105[8 * v106 + 16] = v43;
          v105[(v106 + 1) + 1] = 11;
          v107 = (_BYTE *)*v56;
          v108 = *(unsigned __int8 *)*v56;
          *(_QWORD *)(*v56 + 8 * v108 + 16) = v22;
          LOBYTE(v108) = v108 + 1;
          *v107 = v108;
          v107[v108 + 1] = 2;
          v109 = (_BYTE *)*v56;
          v110 = *(unsigned __int8 *)*v56;
          *v109 = v110 + 1;
          *(_QWORD *)&v109[8 * v110 + 16] = v14 == 0;
          v109[(v110 + 1) + 1] = 11;
          goto LABEL_109;
        }
        v23 = *(_QWORD *)(v23 + 16);
      }
      else
      {
        v23 = *(_QWORD *)(v23 + 8) + 72 * (*(_DWORD *)(v23 + 16) + sub_22EFC306C(v22));
      }
      v51 = *(_QWORD *)(v22 + 48);
      v52 = (v16 & 1) == 0 && (v27[1] & 1) == 0;
      if ((v16 & 4) != 0)
      {
        LODWORD(v54) = !v52;
        if ((*(_DWORD *)(v22 + 68) & 2) != 0)
          v54 = 0;
        else
          v54 = v54;
        v16 = v51 | v54;
      }
      else
      {
        LODWORD(v53) = !v52;
        if ((*(_DWORD *)(v22 + 68) & 2) != 0)
          v53 = 0;
        else
          v53 = v53;
        v16 = v51 | v53;
        if ((v27[1] & 4) == 0)
        {
LABEL_100:
          if ((v51 & 4) != 0 || (*(_QWORD *)((v51 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0)
            v127 = v22;
          goto LABEL_103;
        }
      }
      v16 |= 4uLL;
      goto LABEL_100;
    }
    v44 = sub_22F10C2A4(v29);
    if (v44 && (*(_DWORD *)(v44 + 28) & 0x7Fu) - 35 >= 3)
      v44 = 0;
    v45 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v21) & 0xFFFFFFFFFFFFFFF8;
    if (v45)
    {
      if ((*(_DWORD *)(v45 + 28) & 0x7Fu) - 35 >= 3)
        v46 = 0;
      else
        v46 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v21) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      v46 = 0;
    }
    v47 = sub_22F01D5B0(v44, v46);
    v48 = *(_QWORD *)(v23 + 8);
    v49 = sub_22EF6477C(a1[1], v46);
    v50 = (v16 & 1) == 0 && (v27[1] & 1) == 0;
    v23 = v48 + 72 * v47;
    if ((v16 & 4) != 0)
    {
      v16 = v49 | !v50;
    }
    else
    {
      v16 = v49 | !v50;
      if ((v27[1] & 4) == 0)
      {
        v22 = 0;
        goto LABEL_103;
      }
    }
    v22 = 0;
    v16 |= 4uLL;
LABEL_103:
    ++v21;
  }
  if (*(_DWORD *)v23)
    goto LABEL_27;
  v25 = v131;
LABEL_110:
  if (((*(uint64_t (**)(uint64_t *, __n128))(*a1 + 24))(a1, v15) & 1) != 0)
    return 0;
  result = sub_22F072CEC((uint64_t)a1, a2, 2174, 0);
  if (result)
  {
    v60 = (_QWORD *)result;
    v61 = *(unsigned __int8 **)result;
    if (!*(_QWORD *)result)
    {
      v61 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(result + 8));
      *v60 = v61;
    }
    result = 0;
    v61[*v61 + 1] = 2;
    v62 = (_BYTE *)*v60;
    v63 = *(unsigned __int8 *)*v60;
    *(_QWORD *)(*v60 + 8 * v63 + 16) = v25;
    v64 = v63 + 1;
    *v62 = v63 + 1;
    v65 = *(_DWORD *)v23 == 1;
    v62[v64 + 1] = 2;
    v66 = (_BYTE *)*v60;
    v67 = *(unsigned __int8 *)*v60;
    *v66 = v67 + 1;
    *(_QWORD *)&v66[8 * v67 + 16] = v65;
  }
  return result;
}

BOOL sub_22F01C91C(unint64_t *a1, uint64_t a2, int a3)
{
  if ((a3 - 5) < 3)
    return 1;
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2) + 2000) + 1) & 4) != 0)
    return sub_22F016844(a2, *a1, a1[1], 1);
  return 0;
}

uint64_t sub_22F01C988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unsigned __int8 **v20;
  unsigned __int8 **v21;
  unsigned __int8 *v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;

  while (1)
  {
    v7 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
    if (v7)
      v8 = (*(_DWORD *)(v7 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
    else
      v8 = 0;
    if (v8)
    {
      v9 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
      goto LABEL_9;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
      break;
    v9 = sub_22F10CF48(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0));
    if (!v9)
      break;
LABEL_9:
    a4 = *(_QWORD *)(v9 + 32);
  }
  result = sub_22F10C2A4(v7);
  if (!result)
    return result;
  v11 = result;
  if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
    return 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(result + 104) + 96), *(_QWORD *)(result + 104));
  if ((**(_QWORD **)(v11 + 128) & 0x80000) == 0)
    return 0;
  v12 = sub_22EFC3B90(v11);
  if (!v12)
    goto LABEL_22;
  v13 = v12;
LABEL_15:
  if ((*(_BYTE *)(v13 + 68) & 2) != 0
    && ((*(_DWORD *)(v11 + 72) & 0xE000) == 0x4000 || sub_22F01D694(*(_QWORD *)(v13 + 48))))
  {
    v20 = (unsigned __int8 **)sub_22F072CEC(a1, a2, 2170, 1);
    if (v20)
    {
      v21 = v20;
      v22 = *v20;
      if (!v22)
      {
        v22 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v21[1]);
        *v21 = v22;
      }
      v22[*v22 + 1] = 2;
      v23 = *v21;
      v24 = **v21;
      *v23 = v24 + 1;
      *(_QWORD *)&v23[8 * v24 + 16] = (int)a3;
      v23[(v24 + 1) + 1] = 11;
      v25 = *v21;
      v26 = **v21;
      *v25 = v26 + 1;
      *(_QWORD *)&v25[8 * v26 + 16] = v13;
    }
    v27 = *(_DWORD *)(v13 + 24);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
      sub_22F072E10(a1, v27, 100);
    return 1;
  }
  if ((sub_22F01C988(a1, a2, a3, *(_QWORD *)(v13 + 48)) & 1) != 0)
    return 1;
  while (1)
  {
    v13 = *(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v13)
      break;
    if ((*(_DWORD *)(v13 + 28) & 0x7Fu) - 49 < 3)
      goto LABEL_15;
  }
LABEL_22:
  v14 = sub_22E46A3A0(v11);
  if (v14 == v15)
    return 0;
  v16 = v15;
  v17 = v14 + 24;
  do
  {
    v18 = *(_QWORD *)(**(_QWORD **)(v17 - 8) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v18 + 8) & 0xF) != 0)
      v18 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v17 - 8));
    result = sub_22F01C988(a1, a2, a3, v18 & 0xFFFFFFFFFFFFFFF0);
    if ((result & 1) != 0)
      break;
    v19 = v17 == v16;
    v17 += 24;
  }
  while (!v19);
  return result;
}

BOOL sub_22F01CBE4(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v4;
  unsigned int v6;
  _QWORD *v7;
  char v8;
  uint64_t v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  unsigned int v14;
  char v15;

  v4 = *a3;
  if (*a3 == 2)
  {
    v6 = a3[4];
    if (sub_22EFC2EF4(a4, *(_QWORD *)(a1 + 8)) < v6)
    {
      v7 = a3 + 2;
      llvm::APInt::trunc((llvm::APInt *)(a3 + 2));
      v8 = *((_BYTE *)a3 + 20);
      v11 = v14;
      v10 = v13;
      v12 = v8;
      sub_22E46361C((llvm::APInt *)&v10, (uint64_t)&v13);
      if (a3[4] >= 0x41 && *v7)
        MEMORY[0x2348A0E84](*v7, 0x1000C8000313F17);
      *((_QWORD *)a3 + 1) = v13;
      a3[4] = v14;
      v14 = 0;
      *((_BYTE *)a3 + 20) = v15;
      if (v11 >= 0x41 && v10)
        MEMORY[0x2348A0E84](v10, 0x1000C8000313F17);
    }
  }
  else
  {
    sub_22F072CEC(a1, a2, 103, 0);
  }
  return v4 == 2;
}

void sub_22F01CCF4(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 20);
  if (a2 + 1 > (2 * v4))
    v5 = a2 + 1;
  else
    v5 = 2 * v4;
  if (v5 <= 8)
    v5 = 8;
  if (v5 >= v3)
    v6 = *(_DWORD *)(a1 + 20);
  else
    v6 = v5;
  sub_22EF52F1C((uint64_t)&v42, v6, v3);
  LODWORD(v41) = 9;
  if ((_DWORD)v4)
  {
    v7 = 0;
    do
    {
      v8 = v42 + v7;
      v9 = *(_QWORD *)(a1 + 8) + v7;
      v10 = *(_DWORD *)(v42 + v7);
      *(_DWORD *)v8 = *(_DWORD *)v9;
      *(_DWORD *)v9 = v10;
      v11 = *(_OWORD *)(v8 + 56);
      v12 = *(_OWORD *)(v8 + 40);
      v13 = *(_OWORD *)(v8 + 24);
      v14 = *(_OWORD *)(v8 + 8);
      v15 = *(_OWORD *)(v9 + 24);
      v16 = *(_OWORD *)(v9 + 40);
      v17 = *(_OWORD *)(v9 + 56);
      *(_OWORD *)(v8 + 8) = *(_OWORD *)(v9 + 8);
      *(_OWORD *)(v8 + 56) = v17;
      *(_OWORD *)(v8 + 40) = v16;
      *(_OWORD *)(v8 + 24) = v15;
      *(_OWORD *)(v9 + 8) = v14;
      *(_OWORD *)(v9 + 24) = v13;
      *(_OWORD *)(v9 + 40) = v12;
      *(_OWORD *)(v9 + 56) = v11;
      v7 += 72;
    }
    while (72 * v4 != v7);
  }
  if ((_DWORD)v4 != v6)
  {
    do
    {
      v33 = *(_QWORD *)(a1 + 8) + 72 * *(unsigned int *)(a1 + 16);
      v34 = v42;
      v35 = v4;
      v36 = (uint64_t *)(v42 + 72 * v4);
      if (v36 != (uint64_t *)v33)
      {
        sub_22EF530AC((uint64_t)&v46, v33);
        if (*(_DWORD *)v36 >= 2u)
          sub_22EF53BC0(v36);
        *(_DWORD *)v36 = v46;
        v37 = v34 + 72 * v35;
        v38 = v47;
        v39 = v48;
        v40 = v49;
        *(_OWORD *)(v37 + 56) = v50;
        *(_OWORD *)(v37 + 40) = v40;
        *(_OWORD *)(v37 + 24) = v39;
        *(_OWORD *)(v37 + 8) = v38;
      }
      LODWORD(v4) = v35 + 1;
    }
    while (v6 != v35 + 1);
  }
  v18 = DWORD2(v42);
  if (DWORD2(v42) != HIDWORD(v42))
  {
    v19 = *(_QWORD *)(a1 + 8) + 72 * *(unsigned int *)(a1 + 16);
    v20 = v42;
    v21 = (uint64_t *)(v42 + 72 * DWORD2(v42));
    if (v21 != (uint64_t *)v19)
    {
      sub_22EF530AC((uint64_t)&v46, v19);
      if (*(_DWORD *)v21 >= 2u)
        sub_22EF53BC0(v21);
      *(_DWORD *)v21 = v46;
      v22 = v20 + 72 * v18;
      v23 = v47;
      v24 = v48;
      v25 = v49;
      *(_OWORD *)(v22 + 56) = v50;
      *(_OWORD *)(v22 + 40) = v25;
      *(_OWORD *)(v22 + 24) = v24;
      *(_OWORD *)(v22 + 8) = v23;
    }
  }
  v26 = *(_DWORD *)a1;
  *(_DWORD *)a1 = v41;
  LODWORD(v41) = v26;
  v27 = *(_OWORD *)(a1 + 40);
  v28 = *(_OWORD *)(a1 + 24);
  v29 = *(_OWORD *)(a1 + 8);
  v30 = v43;
  *(_OWORD *)(a1 + 8) = v42;
  *(_OWORD *)(a1 + 24) = v30;
  v31 = v45;
  *(_OWORD *)(a1 + 40) = v44;
  v32 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 56) = v31;
  v42 = v29;
  v43 = v28;
  v44 = v27;
  v45 = v32;
  if (v26 >= 2)
    sub_22EF53BC0(&v41);
}

uint64_t sub_22F01CF80(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  char v24;
  unint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  char v43;
  unint64_t v44;
  unsigned int v45;
  char v46;

  if (!sub_22F01D84C((uint64_t *)a1, a3))
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_DWORD *)(v6 + 16);
  if (v6)
    v8 = v7 == 11;
  else
    v8 = 0;
  if (v8)
  {
    if (((*(_DWORD *)(v6 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
      goto LABEL_13;
    goto LABEL_17;
  }
  if (!v6 || v7 != 44)
  {
    if (v7 == 9)
      goto LABEL_13;
LABEL_17:
    sub_22F072CEC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), 103, 0);
    return 0;
  }
  v9 = sub_22F114198(*(_QWORD *)(v6 + 24));
  if ((*(_BYTE *)(v9 + 74) & 1) == 0 && *(_QWORD *)(v9 + 128) <= 7uLL
    || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v6 + 24)) + 76) & 0x80) != 0)
  {
    goto LABEL_17;
  }
LABEL_13:
  v10 = *(_QWORD *)(a1 + 24);
  if (v10)
  {
    v11 = *((_DWORD *)a2 + 2);
    v45 = v11;
    if (v11 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v44, (const llvm::APInt *)a2);
      v11 = v45;
      v12 = v44;
      v10 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      v12 = *a2;
      v44 = *a2;
    }
    v15 = *((_BYTE *)a2 + 12);
    v46 = v15;
    v45 = 0;
    if (*(_DWORD *)v10 >= 2u)
      sub_22EF53BC0((uint64_t *)v10);
    *(_DWORD *)v10 = 2;
    *(_QWORD *)(v10 + 8) = v12;
    *(_DWORD *)(v10 + 16) = v11;
    *(_BYTE *)(v10 + 20) = v15;
    if (v45 >= 0x41 && v44)
      MEMORY[0x2348A0E84](v44, 0x1000C8000313F17);
  }
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v16)
    v17 = (*(_DWORD *)(v16 + 16) & 0xFF800FF) == 87031819;
  else
    v17 = 0;
  if (v17)
  {
    v19 = *((unsigned int *)a2 + 2);
    if (*(_DWORD *)(a1 + 16) == 3)
    {
      if (v19 > 0x40)
      {
        v13 = 1;
        *(_QWORD *)*a2 = 1;
        bzero((void *)(*a2 + 8), (((unint64_t)(v19 + 63) >> 3) - 8) & 0xFFFFFFF8);
        return v13;
      }
      if ((_DWORD)v19)
        v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
      else
        LOBYTE(v20) = 0;
      v21 = v20 & 1;
    }
    else
    {
      if (v19 > 0x40)
      {
        *(_QWORD *)*a2 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) == (_DWORD)v19;
        bzero((void *)(*a2 + 8), (((unint64_t)(v19 + 63) >> 3) - 8) & 0xFFFFFFF8);
        return 1;
      }
      v22 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
      if (!(_DWORD)v19)
        LOBYTE(v22) = 0;
      v21 = v22 & (*a2 == 0);
    }
    *a2 = v21;
    return 1;
  }
  if (!*((_BYTE *)a2 + 12))
  {
    v23 = *((_DWORD *)a2 + 2);
    v24 = v23 - 1;
    if (v23 >= 0x41)
      v25 = (unint64_t *)(*a2 + 8 * ((v23 - 1) >> 6));
    else
      v25 = a2;
    v26 = (1 << v24) & *v25;
    v18 = v26 != 0;
    if (*(_DWORD *)(a1 + 16) == 3)
      goto LABEL_47;
    llvm::APInt::operator--();
    if (v26)
    {
      if (*((_BYTE *)a2 + 12)
        || ((v33 = *((_DWORD *)a2 + 2), v34 = v33 - 1, v33 >= 0x41)
          ? (v35 = (unint64_t *)(*a2 + 8 * ((v33 - 1) >> 6)))
          : (v35 = a2),
            ((*v35 >> v34) & 1) == 0))
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 2) & 0x80) != 0)
        {
          v31 = *((unsigned int *)a2 + 2);
          llvm::APInt::sext((llvm::APInt *)a2);
          v42 = v38;
          v41 = v37;
          v43 = 0;
          v32 = 1 << v31;
          if (v38 > 0x40)
            *(_QWORD *)(v37 + ((v31 >> 3) & 0x1FFFFFF8)) |= v32;
          else
            v41 = v37 | v32;
          v36 = *(_QWORD *)a1;
          v30 = *(_QWORD *)(a1 + 8);
          goto LABEL_72;
        }
      }
    }
    return 1;
  }
  if (*(_DWORD *)(a1 + 16) != 3)
  {
    llvm::APInt::operator--();
    return 1;
  }
  v18 = 0;
LABEL_47:
  llvm::APInt::operator++();
  v13 = 1;
  if (v18 || *((_BYTE *)a2 + 12))
    return v13;
  v27 = *((_DWORD *)a2 + 2);
  v28 = *a2;
  v29 = (unint64_t *)(*a2 + 8 * ((v27 - 1) >> 6));
  if (v27 < 0x41)
    v29 = a2;
  if (((*v29 >> (v27 - 1)) & 1) == 0)
    return 1;
  v30 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(v30 + 2) & 0x80) == 0)
    return 1;
  v40 = *((_DWORD *)a2 + 2);
  if (v27 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v39, (const llvm::APInt *)a2);
    v27 = v40;
    v28 = v39;
    v30 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v39 = v28;
  }
  v42 = v27;
  v41 = v28;
  v40 = 0;
  v43 = 1;
  v36 = *(_QWORD *)a1;
LABEL_72:
  v13 = sub_22F01E2B8(v36, v30, (uint64_t)&v41, a3);
  if (v42 >= 0x41 && v41)
    MEMORY[0x2348A0E84](v41, 0x1000C8000313F17);
  return v13;
}

llvm::APFloatBase *sub_22F01D3E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::APFloatBase *v5;
  llvm::APFloatBase *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v5 = (llvm::APFloatBase *)sub_22F01D84C((uint64_t *)a1, a3);
  v6 = v5;
  if ((_DWORD)v5)
  {
    if (*(_QWORD *)(a1 + 24))
    {
      v7 = *(_QWORD *)(a2 + 8);
      v8 = llvm::APFloatBase::PPCDoubleDouble(v5);
      if (v8 == v7)
        MEMORY[0x23489F2A0](&v15, a2 + 8);
      else
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v15, (const llvm::detail::IEEEFloat *)(a2 + 8));
      sub_22E7B656C(&v17, (uint64_t)&v14);
      v9 = *(_QWORD *)(a1 + 24);
      if (*(_DWORD *)v9 >= 2u)
        sub_22EF53BC0(*(uint64_t **)(a1 + 24));
      *(_DWORD *)v9 = v17;
      v10 = v18[2];
      v11 = v18[3];
      v12 = v18[0];
      *(_OWORD *)(v9 + 24) = v18[1];
      *(_OWORD *)(v9 + 8) = v12;
      *(_OWORD *)(v9 + 56) = v11;
      *(_OWORD *)(v9 + 40) = v10;
      v17 = 0;
      if (v8 == v15)
        sub_22E463170((llvm::APFloatBase *)&v16);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v15);
    }
    else
    {
      v8 = llvm::APFloatBase::PPCDoubleDouble(v5);
    }
    if (v8 == *(_QWORD *)(a2 + 8))
      llvm::detail::DoubleAPFloat::DoubleAPFloat();
    else
      llvm::detail::IEEEFloat::IEEEFloat();
    if (*(_DWORD *)(a1 + 16) == 3)
      sub_22E51FCBC((llvm::APFloatBase *)a2);
    else
      sub_22E51FBD8((llvm::APFloatBase *)a2);
    if (v8 == *(_QWORD *)&v18[0])
      sub_22E463170((llvm::APFloatBase *)((char *)v18 + 8));
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v18);
  }
  return v6;
}

uint64_t sub_22F01D5B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  v4 = *(_QWORD *)(a1 + 128);
  v5 = *(_QWORD *)(v4 + 24);
  if ((v5 & 1) != 0)
    v5 = sub_22EFCF510(v4);
  v6 = sub_22F24CD30(a1);
  if (v5 == v6)
    return 0;
  v7 = v6;
  v8 = 0;
  do
  {
    v9 = *(_QWORD *)(**(_QWORD **)(v5 + 16) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v9 + 8) & 0xF) != 0)
      v9 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v5 + 16));
    v10 = (_DWORD *)sub_22F10C2A4(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0));
    if ((v10[7] & 0x7Fu) - 35 >= 3)
      v10 = 0;
    if ((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 32))(v10) == v3)
      break;
    v5 += 24;
    v8 = (v8 + 1);
  }
  while (v5 != v7);
  return v8;
}

uint64_t sub_22F01D694(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  while (1)
  {
    v1 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
    if (v1)
      v2 = (*(_DWORD *)(v1 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
    else
      v2 = 0;
    if (v2)
    {
      v3 = v1;
      goto LABEL_9;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
      break;
    v6 = v1;
    v3 = sub_22F10CF48(v1);
    v1 = v6;
    if (!v3)
      break;
LABEL_9:
    a1 = *(_QWORD *)(v3 + 32);
  }
  v4 = sub_22F10C2A4(v1);
  if (v4 && (*(_DWORD *)(v4 + 28) & 0x7Fu) - 35 <= 2)
    return sub_22F01D73C(v4);
  else
    return 1;
}

uint64_t sub_22F01D73C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;

  if ((*(_DWORD *)(a1 + 72) & 0xE000) == 0x4000)
    return sub_22EFC3B90(a1) != 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((**(_QWORD **)(a1 + 128) & 0x200) != 0)
    return 0;
  v3 = sub_22EFC3B90(a1);
  if (v3)
  {
    v4 = v3;
LABEL_6:
    if (((*(_BYTE *)(v4 + 68) & 1) == 0 || *(_QWORD *)(v4 + 40)) && (sub_22F01D694(*(_QWORD *)(v4 + 48)) & 1) != 0)
      return 1;
    while (1)
    {
      v4 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v4)
        break;
      if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_6;
    }
  }
  v5 = sub_22E46A3A0(a1);
  if (v5 == v6)
    return 0;
  v7 = v6;
  v8 = v5 + 24;
  do
  {
    v9 = *(_QWORD *)(**(_QWORD **)(v8 - 8) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v9 + 8) & 0xF) != 0)
      v9 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v8 - 8));
    result = sub_22F01D694(v9 & 0xFFFFFFFFFFFFFFF0);
    if ((result & 1) != 0)
      break;
    v10 = v8 == v7;
    v8 += 24;
  }
  while (!v10);
  return result;
}

uint64_t sub_22F01D84C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v4;
  unsigned __int8 *v5;
  _BYTE *v6;
  uint64_t v7;

  if ((a2 & 1) == 0 && (*(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) == 0)
    return 1;
  result = sub_22F072CEC(*a1, a1[1], 2237, 0);
  if (result)
  {
    v4 = (_QWORD *)result;
    v5 = *(unsigned __int8 **)result;
    if (!*(_QWORD *)result)
    {
      v5 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(result + 8));
      *v4 = v5;
    }
    result = 0;
    v5[*v5 + 1] = 9;
    v6 = (_BYTE *)*v4;
    v7 = *(unsigned __int8 *)*v4;
    *v6 = v7 + 1;
    *(_QWORD *)&v6[8 * v7 + 16] = a2;
  }
  return result;
}

void sub_22F01D8E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  int v7;
  _QWORD *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  _QWORD *v15;
  void **v16;
  int v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  const void *v23;
  BOOL v24;
  _QWORD *v25;
  __int16 v26;
  __int128 v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[9];

  v31[8] = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a1 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a3 + 24);
  *(_BYTE *)(a1 + 144) &= ~2u;
  v5 = *(unsigned int *)(a3 + 48);
  v6 = *(_DWORD *)a3 != 7 || v5 == 0xFFFFFFFFLL;
  v7 = v6;
  LODWORD(v27) = v7;
  *((_QWORD *)&v27 + 1) = 0;
  v28 = 0;
  v29 = v31;
  v30 = 0x800000000;
  if (v6)
    goto LABEL_16;
  LODWORD(v27) = *(_BYTE *)(a3 + 52) & 2 | v7;
  v9 = (_QWORD *)(a3 + 56);
  if ((v5 - 3) < 0xFFFFFFFC)
  {
    v25 = (_QWORD *)*v9;
    if (v5 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v21 = v30;
      v22 = v29;
    }
    else
    {
      v21 = 0;
      v22 = v31;
    }
    v23 = v25;
  }
  else
  {
    if (!(_DWORD)v5)
    {
      v10 = 0;
      goto LABEL_11;
    }
    v21 = 0;
    v22 = v31;
    v23 = (const void *)(a3 + 56);
  }
  memcpy(&v22[v21], v23, 8 * v5);
  v10 = v30;
LABEL_11:
  LODWORD(v30) = v10 + v5;
  v11 = *(_QWORD *)(a3 + 8);
  v12 = *(_QWORD *)(a3 + 16);
  if ((~*(_DWORD *)(a3 + 8) & 3) != 0)
  {
    if (v11 < 4)
      goto LABEL_16;
    goto LABEL_13;
  }
  v24 = (v11 & 0x7FFFFFFF8) != 0;
  if ((v11 & 4) != 0)
    v24 = v11 > 7;
  if (v24)
  {
LABEL_13:
    v26 = 0;
    v13 = *(_DWORD *)(a3 + 48);
    if ((v13 - 3) <= 0xFFFFFFFB)
      v9 = (_QWORD *)*v9;
    v14 = sub_22F0170E0(a2, v11, v12, (uint64_t)v9, v13, (uint64_t *)&v27 + 1, &v28, (_BYTE *)&v26 + 1, &v26);
    LODWORD(v27) = v27 & 3 | (16 * v14) | (8 * HIBYTE(v26)) | (4 * v26);
  }
LABEL_16:
  *(_OWORD *)(a1 + 24) = v27;
  v15 = v29;
  *(_QWORD *)(a1 + 40) = v28;
  v16 = (void **)(a1 + 48);
  if ((void **)(a1 + 48) == &v29)
    goto LABEL_23;
  if (v15 != v31)
  {
    if (*(_QWORD *)(a1 + 48) != a1 + 64)
    {
      free(*(void **)(a1 + 48));
      v15 = v29;
    }
    *(_QWORD *)(a1 + 48) = v15;
    *(_QWORD *)(a1 + 56) = v30;
    v29 = v31;
    HIDWORD(v30) = 0;
    goto LABEL_22;
  }
  v17 = v30;
  v18 = *(unsigned int *)(a1 + 56);
  if (v18 < v30)
  {
    if (*(_DWORD *)(a1 + 60) < v30)
    {
      *(_DWORD *)(a1 + 56) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    else if ((_DWORD)v18)
    {
      memmove(*v16, v31, 8 * v18);
LABEL_31:
      if (v18 != v30)
        memcpy((char *)*v16 + 8 * v18, (char *)v29 + 8 * v18, 8 * v30 - 8 * v18);
      goto LABEL_21;
    }
    v18 = 0;
    goto LABEL_31;
  }
  if ((_DWORD)v30)
    memmove(*v16, v31, 8 * v30);
LABEL_21:
  *(_DWORD *)(a1 + 56) = v17;
LABEL_22:
  LODWORD(v30) = 0;
  v15 = v29;
LABEL_23:
  if (v15 != v31)
    free(v15);
  v19 = *(_BYTE *)(a1 + 144) & 0xFE | *(_BYTE *)(a3 + 52) & 1;
  *(_BYTE *)(a1 + 144) = v19;
  v20 = v19 & 0xFB | (4 * ((*(_BYTE *)(a3 + 52) & 4) != 0));
  *(_BYTE *)(a1 + 144) = v20;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a3 + 40);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a3 + 52) & 8 | v20 & 0xF7;
}

uint64_t sub_22F01DC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  char v9;

  v8 = 64;
  v7 = a5;
  v9 = 0;
  v5 = sub_22F01DC84(a1, a2, a3, a4, (uint64_t)&v7);
  if (v8 >= 0x41 && v7)
    MEMORY[0x2348A0E84](v7, 0x1000C8000313F17);
  return v5;
}

uint64_t sub_22F01DC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  int v17;
  unsigned int v18;
  unsigned __int8 **v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unsigned int v30;
  int v31;
  unsigned __int8 ***v32;
  unsigned __int8 **v33;
  unsigned __int8 ***v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned __int8 **v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  int v43;
  unsigned __int8 **v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v49;
  unsigned __int8 **v50;
  unsigned int v51;
  char v52;
  unsigned __int8 **v53;
  unsigned int v54;
  char v55;

  v49 = 0;
  sub_22EFF605C(a2);
  v11 = sub_22F01E138(a1, v10, a4, &v49);
  if ((_DWORD)v11)
  {
    v12 = v49;
    v13 = *(_DWORD *)(a5 + 8);
    if (v13 <= 0x40)
    {
      if (!*(_QWORD *)a5)
        return v11;
LABEL_6:
      v14 = *(_QWORD *)(a3 + 16);
      if (*(_BYTE *)(a5 + 12))
        llvm::APInt::zextOrTrunc((llvm::APInt *)a5);
      else
        llvm::APInt::sextOrTrunc((llvm::APInt *)a5);
      v15 = v53;
      if (v54 >= 0x41)
      {
        v16 = *v53;
        MEMORY[0x2348A0E84]();
        v15 = (unsigned __int8 **)v16;
      }
      *(_QWORD *)(a3 + 16) = v14 + (_QWORD)v15 * v12;
      if (!sub_22F01E1F4(a3, a1, a2, 4u))
        goto LABEL_61;
      v51 = *(_DWORD *)(a5 + 8);
      if (v51 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v50, (const llvm::APInt *)a5);
      else
        v50 = *(unsigned __int8 ***)a5;
      v17 = *(unsigned __int8 *)(a5 + 12);
      v52 = v17;
      if ((*(_BYTE *)(a3 + 24) & 1) == 0)
      {
        v18 = v51;
        if (v51 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v50) == v18)
            goto LABEL_59;
        }
        else if (!v50)
        {
          goto LABEL_61;
        }
        if (v17)
          llvm::APInt::zextOrTrunc((llvm::APInt *)&v50);
        else
          llvm::APInt::sextOrTrunc((llvm::APInt *)&v50);
        v19 = v53;
        if (v54 >= 0x41)
        {
          v20 = *v53;
          MEMORY[0x2348A0E84](v53, 0x1000C8000313F17);
          v19 = (unsigned __int8 **)v20;
        }
        v21 = *(unsigned int *)(a3 + 56);
        v22 = *(unsigned int *)(a3 + 24);
        if ((_DWORD)v21 == 1 && (v22 & 4) != 0)
        {
          sub_22EFF605C(a2);
          sub_22F072D74(a1, v23, 2277, 0);
          v24 = *(_QWORD *)(a3 + 48) + 8 * *(unsigned int *)(a3 + 56);
          *(_QWORD *)(v24 - 8) += v19;
        }
        else
        {
          if ((_DWORD)v21 == v22 >> 4)
            v25 = (v22 >> 3) & 1;
          else
            v25 = 0;
          if (v25 == 1)
            v26 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v21 - 8);
          else
            v26 = (v22 >> 1) & 1;
          v27 = *(_QWORD *)(a3 + 32);
          if ((sub_22E8BAD7C((uint64_t)&v50, -v26) & 1) != 0
            || (!v25 ? (v28 = 1) : (v28 = v27), sub_22E42E8B8((uint64_t)&v50, v28 - v26)))
          {
            sub_22E46361C((llvm::APInt *)&v50, (uint64_t)&v53);
            if (v51 >= 0x41 && v50)
              MEMORY[0x2348A0E84](v50, 0x1000C8000313F17);
            v50 = v53;
            v51 = v54;
            v52 = v55;
            llvm::APInt::operator+=();
            v30 = *(_DWORD *)(a3 + 24);
            if (*(_DWORD *)(a3 + 56) == v30 >> 4 && (v30 & 8) != 0)
            {
              sub_22EFF605C(a2);
              v53 = (unsigned __int8 **)sub_22F072D74(a1, v31, 2182, 0);
              v32 = sub_22F3C4700(&v53);
              v33 = *v32;
              if (*v32)
              {
                v34 = v32;
                v35 = *v33;
                if (!*v33)
                {
                  v35 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v33[1]);
                  *v33 = v35;
                }
                v35[*v35 + 1] = 2;
                v36 = *v33;
                v37 = **v33;
                *v36 = v37 + 1;
                *(_QWORD *)&v36[8 * v37 + 16] = 0;
                v38 = *v34;
                if (*v34)
                {
                  v39 = *(unsigned int *)(a3 + 32);
                  v40 = *v38;
                  if (!*v38)
                  {
                    v40 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v38[1]);
                    *v38 = v40;
                  }
                  v40[*v40 + 1] = 3;
                  v41 = *v38;
                  v42 = **v38;
                  *v41 = v42 + 1;
                  *(_QWORD *)&v41[8 * v42 + 16] = v39;
                }
              }
            }
            else
            {
              sub_22EFF605C(a2);
              v53 = (unsigned __int8 **)sub_22F072D74(a1, v43, 2182, 0);
              v44 = *sub_22F3C4700(&v53);
              if (v44)
              {
                v45 = *v44;
                if (!*v44)
                {
                  v45 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v44[1]);
                  *v44 = v45;
                }
                v45[*v45 + 1] = 2;
                v46 = *v44;
                v47 = **v44;
                *v46 = v47 + 1;
                *(_QWORD *)&v46[8 * v47 + 16] = 1;
              }
            }
            *(_DWORD *)(a3 + 24) |= 1u;
            *(_DWORD *)(a3 + 56) = 0;
          }
          else
          {
            v29 = (char *)v19 + v26;
            if (v25)
              *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * *(unsigned int *)(a3 + 56) - 8) = v29;
            else
              *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) & 0xFFFFFFFD | (2 * (v29 != 0));
          }
        }
      }
      if (v51 < 0x41)
      {
LABEL_61:
        *(_BYTE *)(a3 + 144) &= ~1u;
        return v11;
      }
LABEL_59:
      if (v50)
        MEMORY[0x2348A0E84](v50, 0x1000C8000313F17);
      goto LABEL_61;
    }
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a5) != v13)
      goto LABEL_6;
  }
  return v11;
}

uint64_t sub_22F01E138(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t result;
  _QWORD v11[3];

  v6 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v7)
    v8 = (*(_DWORD *)(v7 + 16) & 0xFF800FF) == 86507531;
  else
    v8 = 0;
  if (v8 || (v9 = *(_DWORD *)(v7 + 16), (v9 - 25) <= 1))
  {
    result = 1;
    *a4 = 1;
  }
  else if ((*(_BYTE *)(v6 + 17) & 4) != 0 || v9 == 5)
  {
    sub_22F072828(a1, a2, 103, 0, 0);
    return 0;
  }
  else
  {
    sub_22EF5CCD0(*(_QWORD *)(a1 + 8), v6, (uint64_t)v11);
    *a4 = v11[0];
    return 1;
  }
  return result;
}

uint64_t sub_22F01E1F4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t result;
  int v8;
  unsigned __int8 **v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  _BYTE *v12;
  uint64_t v13;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    return 0;
  if ((*(_BYTE *)(a1 + 144) & 1) == 0)
    return 1;
  sub_22EFF605C(a3);
  v9 = (unsigned __int8 **)sub_22F072D74(a2, v8, 2253, 0);
  if (v9)
  {
    v10 = v9;
    v11 = *v9;
    if (!v11)
    {
      v11 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v10[1]);
      *v10 = v11;
    }
    v11[*v11 + 1] = 2;
    v12 = *v10;
    v13 = **v10;
    *v12 = v13 + 1;
    *(_QWORD *)&v12[8 * v13 + 16] = a4;
  }
  result = 0;
  *(_DWORD *)(a1 + 24) |= 1u;
  *(_DWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_22F01E2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 **v12;

  sub_22EFF605C(a2);
  v12 = (unsigned __int8 **)sub_22F072D74(a1, v6, 2255, 0);
  v7 = *sub_22F3C4700(&v12);
  if (v7)
  {
    v8 = *v7;
    if (!*v7)
    {
      v8 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v7[1]);
      *v7 = v8;
    }
    v8[*v8 + 1] = 9;
    v9 = *v7;
    v10 = **v7;
    *v9 = v10 + 1;
    *(_QWORD *)&v9[8 * v10 + 16] = a4;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

void sub_22F01E36C(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*a2 > 0xDu || ((1 << *a2) & 0x2082) == 0)
  {
    sub_22F01E460((llvm::APInt *)(a2 + 2), *(_QWORD *)(a1 + 8));
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if ((_DWORD *)v3 != a2)
    {
      sub_22EF530AC((uint64_t)&v7, (uint64_t)a2);
      if (*(_DWORD *)v3 >= 2u)
        sub_22EF53BC0((uint64_t *)v3);
      *(_DWORD *)v3 = v7;
      v4 = v8;
      v5 = v9;
      v6 = v10;
      *(_OWORD *)(v3 + 56) = v11;
      *(_OWORD *)(v3 + 40) = v6;
      *(_OWORD *)(v3 + 24) = v5;
      *(_OWORD *)(v3 + 8) = v4;
    }
  }
}

void sub_22F01E460(llvm::APInt *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  char v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  char v10;

  v4 = *((_DWORD *)a1 + 2);
  v9 = v4;
  if (v4 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v8, a1);
    v4 = v9;
    v5 = v8;
  }
  else
  {
    v5 = *(_QWORD *)a1;
    v8 = *(_QWORD *)a1;
  }
  v6 = *((_BYTE *)a1 + 12);
  v10 = v6;
  v9 = 0;
  if (*(_DWORD *)a2 > 1u)
  {
    sub_22EF53BC0((uint64_t *)a2);
    v7 = v9;
    *(_DWORD *)a2 = 2;
    *(_QWORD *)(a2 + 8) = v5;
    *(_DWORD *)(a2 + 16) = v4;
    *(_BYTE *)(a2 + 20) = v6;
    if (v7 >= 0x41)
    {
      if (v8)
        MEMORY[0x2348A0E84](v8, 0x1000C8000313F17);
    }
  }
  else
  {
    *(_DWORD *)a2 = 2;
    *(_QWORD *)(a2 + 8) = v5;
    *(_DWORD *)(a2 + 16) = v4;
    *(_BYTE *)(a2 + 20) = v6;
  }
}

uint64_t sub_22F01E534(uint64_t *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  while (2)
  {
    v2 = *a2;
    if (a2 && (v2 & 0xFE) == 0x70)
    {
      v3 = *(_DWORD *)a2;
      switch((*(_DWORD *)a2 >> 18) & 0x3F)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
          return sub_22F01F764(a1, (uint64_t)a2);
        default:
          goto LABEL_7;
      }
    }
    if (!a2 || v2 != 233)
LABEL_8:
      __asm { BR              X9 }
    v3 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x1F)
    {
      case 0:
      case 1:
        return sub_22F024020(a1, (uint64_t)a2);
      case 2:
      case 3:
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xD:
        return sub_22F023E6C(a1, (uint64_t)a2);
      case 6:
      case 0xC:
        a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        continue;
      default:
LABEL_7:
        v2 = v3;
        goto LABEL_8;
    }
  }
}

uint64_t sub_22F01F764(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  llvm::APFloatBase *inited;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  const llvm::APInt *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _BYTE *v34;
  uint64_t v35;
  const llvm::APInt *v36;
  const llvm::APInt *v37;
  llvm::APFloatBase *v38;
  uint64_t v39;
  llvm::detail::DoubleAPFloat *v40;
  uint64_t v41;
  const llvm::APInt *v42;
  uint64_t v43;
  uint64_t v44;
  const llvm::detail::IEEEFloat *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const llvm::APInt *v51;
  uint64_t v52;
  const llvm::detail::IEEEFloat *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const llvm::APInt *v58;
  _BYTE *v59;
  _BYTE *v60;
  const llvm::detail::IEEEFloat *v61;
  uint64_t *v62;
  const llvm::APInt *v63;
  _BYTE *v64;
  _BYTE *v65;
  const llvm::detail::IEEEFloat *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  int v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  _BYTE *v83;
  _BYTE *v84;
  char *v85;
  char v86;
  _BYTE *v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t *v90;
  _BYTE *v91;
  _BYTE *v92;
  _BYTE *v93;
  char v94;
  _BYTE *v95;
  _BYTE *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  _BYTE *v101;
  _BYTE *v102;
  _BYTE *v103;
  _BYTE *v104;
  llvm::detail::IEEEFloat *v105;
  char *v106;
  _BYTE *v107;
  _BYTE *v108;
  _BYTE *v109;
  _BYTE *v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t *v113;
  uint64_t *v114;
  char v115[8];
  _BYTE *v116;
  uint64_t v117;
  char v118[8];
  _BYTE *v119;
  uint64_t v120;
  char v121[8];
  _BYTE *v122;
  uint64_t v123;
  char v124[8];
  _BYTE *v125;
  uint64_t v126;
  char v127[8];
  _BYTE *v128;
  uint64_t v129;
  char v130[8];
  _BYTE *v131;
  uint64_t v132;
  char v133[8];
  _BYTE *v134;
  uint64_t v135;
  char v136[8];
  _BYTE *v137;
  uint64_t v138;
  _BYTE *v139;
  uint64_t v140;
  char v141;
  _BYTE *v142;
  uint64_t v143;
  char v144;
  char v145[8];
  _BYTE *v146;
  _BYTE v147[16];
  char v148[8];
  _BYTE *v149;
  _BYTE v150[16];
  char v151[8];
  _BYTE *v152;
  _BYTE v153[16];
  uint64_t v154;
  _BYTE *v155;
  _BYTE v156[16];
  char v157[8];
  _QWORD v158[3];
  char v159[8];
  _BYTE *v160;
  uint64_t v161;
  char v162[8];
  _BYTE *v163;
  uint64_t v164;
  char v165[8];
  _BYTE *v166;
  uint64_t v167;
  char v168[8];
  _QWORD v169[3];
  char v170[8];
  _BYTE *v171;
  uint64_t v172;
  char v173[8];
  _BYTE *v174;
  uint64_t v175;
  char v176[8];
  _BYTE *v177;
  uint64_t v178;
  char v179[8];
  _BYTE *v180;
  uint64_t v181;
  char v182[8];
  _BYTE *v183;
  uint64_t v184;
  char v185[8];
  _BYTE *v186;
  uint64_t v187;
  char v188[8];
  _BYTE *v189;
  uint64_t v190;
  uint64_t v191;
  _BYTE *v192;
  _BYTE v193[16];
  uint64_t v194;
  _BYTE *v195;
  _QWORD v196[2];
  uint64_t v197;
  _BYTE *v198;
  _QWORD v199[2];
  uint64_t v200;
  _BYTE *v201;
  _QWORD v202[2];
  uint64_t v203;
  _BYTE *v204;
  _QWORD v205[2];
  uint64_t v206;
  uint64_t *v207;
  unsigned int v208;
  char v209;
  llvm::APFloatBase *v210;
  unsigned int v211;
  char v212;
  uint64_t v213;
  _BYTE *v214;
  uint64_t v215;
  _BYTE v216[4];
  uint64_t v217;
  _BYTE *v218;
  uint64_t v219;
  _BYTE v220[4];
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int v225;
  char v226;
  uint64_t v227;
  _BYTE *v228;
  uint64_t v229;
  _BYTE v230[4];
  _BYTE v231[4];
  uint64_t v232;
  _BYTE *v233;
  uint64_t v234;
  _BYTE v235[36];
  uint64_t v236;
  uint64_t v237;

  v237 = *MEMORY[0x24BDAC8D0];
  v4 = (*(_DWORD *)a2 >> 18) & 0x3F;
  if ((*(_DWORD *)a2 & 0xF80000) != 0 && v4 - 21 > 0xB)
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v8)
      v9 = *(_DWORD *)(v8 + 16) == 11;
    else
      v9 = 0;
    if (v9 && ((*(_DWORD *)(v8 + 16) >> 19) & 0x1FEu) - 210 <= 7)
    {
      v10 = a1[1];
      v221 = *a1;
      v222 = v10 + 40;
      if (sub_22F032714(&v221, (unsigned __int8 *)v7))
      {
        *(_BYTE *)a1[1] = 0;
        sub_22E99C474((llvm::APFloatBase *)&v222, *(_QWORD *)(v10 + 48));
        v11 = sub_22E51FDA0((uint64_t *)(a1[1] + 80), &v222);
        v12 = v222;
        if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v11) == v12)
          v13 = (uint64_t)sub_22E463170((llvm::APFloatBase *)&v223);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v222);
        v14 = 1;
        goto LABEL_22;
      }
      v14 = 1;
    }
    else
    {
      v13 = sub_22F01E534(a1, v7);
      v14 = 0;
      if ((v13 & 1) != 0)
      {
LABEL_22:
        v15 = 1;
        goto LABEL_31;
      }
    }
    v17 = *a1;
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1);
    v15 = 0;
    v6 = 0;
    **(_BYTE **)(v17 + 16) |= v13;
    if (!(_DWORD)v13)
      return v6;
LABEL_31:
    LODWORD(v223) = 1;
    v222 = 0;
    BYTE4(v223) = 0;
    v225 = 1;
    v224 = 0;
    v226 = 0;
    v18 = llvm::APFloatBase::Bogus((llvm::APFloatBase *)v13);
    sub_22E99C474((llvm::APFloatBase *)&v228, v18);
    sub_22E99C474((llvm::APFloatBase *)&v233, v18);
    v19 = *(_QWORD *)(a2 + 24);
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v20)
      v21 = *(_DWORD *)(v20 + 16) == 11;
    else
      v21 = 0;
    if (v21 && ((*(_DWORD *)(v20 + 16) >> 19) & 0x1FEu) - 210 <= 7)
    {
      v206 = *a1;
      v207 = &v227;
      inited = (llvm::APFloatBase *)sub_22F032714(&v206, (unsigned __int8 *)v19);
      if ((v15 & inited) != 1)
      {
LABEL_56:
        v6 = 0;
        goto LABEL_525;
      }
      LOBYTE(v221) = 0;
      sub_22E99C474((llvm::APFloatBase *)&v207, (uint64_t)v228);
      v23 = sub_22E51FDA0((uint64_t *)&v233, (uint64_t *)&v207);
      v24 = (uint64_t)v207;
      if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v23) == v24)
        inited = sub_22E463170((llvm::APFloatBase *)&v208);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v207);
      v25 = 1;
    }
    else
    {
      v206 = *a1;
      v207 = &v221;
      inited = (llvm::APFloatBase *)sub_22F01E534(&v206, v19);
      v25 = 0;
      v6 = 0;
      if ((v15 & inited) != 1)
      {
LABEL_525:
        v111 = (uint64_t)v233;
        v112 = (_BYTE *)llvm::APFloatBase::PPCDoubleDouble(inited);
        if (v112 == (_BYTE *)v111)
          sub_22E463170((llvm::APFloatBase *)&v234);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v233);
        if (v112 == v228)
          sub_22E463170((llvm::APFloatBase *)&v229);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v228);
        if (v225 >= 0x41 && v224)
          MEMORY[0x2348A0E84](v224, 0x1000C8000313F17);
        if (v223 >= 0x41 && v222)
          MEMORY[0x2348A0E84](v222, 0x1000C8000313F17);
        return v6;
      }
    }
    switch((*(_DWORD *)a2 >> 18) & 0x3F)
    {
      case 2:
        v26 = a1[1];
        v27 = (const llvm::APInt *)(v26 + 8);
        if (*(_BYTE *)v26)
        {
          LOBYTE(v206) = 1;
          v208 = *(_DWORD *)(v26 + 16);
          if (v208 > 0x40)
            inited = (llvm::APFloatBase *)llvm::APInt::initSlowCase((llvm::APInt *)&v207, v27);
          else
            v207 = *(uint64_t **)v27;
          v209 = *(_BYTE *)(v26 + 20);
          v42 = (const llvm::APInt *)(v26 + 24);
          v211 = *(_DWORD *)(v26 + 32);
          if (v211 > 0x40)
            inited = (llvm::APFloatBase *)llvm::APInt::initSlowCase((llvm::APInt *)&v210, v42);
          else
            v210 = *(llvm::APFloatBase **)v42;
          v43 = *(_QWORD *)(v26 + 48);
          v212 = *(_BYTE *)(v26 + 36);
          v44 = llvm::APFloatBase::PPCDoubleDouble(inited);
          if (v44 == v43)
            MEMORY[0x23489F2A0](&v214, v26 + 48);
          else
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v214, (const llvm::detail::IEEEFloat *)(v26 + 48));
          v45 = (const llvm::detail::IEEEFloat *)(v26 + 80);
          if (v44 == *(_QWORD *)(v26 + 80))
            MEMORY[0x23489F2A0](&v218, v45);
          else
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v218, v45);
          llvm::APInt::operator*();
          LODWORD(v201) = (_DWORD)v204;
          v200 = v203;
          BYTE4(v201) = v209;
          llvm::APInt::operator*();
          LODWORD(v198) = (_DWORD)v204;
          v197 = v203;
          BYTE4(v198) = v212;
          sub_22E5EDF90((llvm::APInt *)&v200, (uint64_t)&v203);
          v46 = a1[1];
          if (*(_DWORD *)(v46 + 16) >= 0x41u)
          {
            v47 = *(_QWORD *)(v46 + 8);
            if (v47)
              MEMORY[0x2348A0E84](v47, 0x1000C8000313F17);
          }
          *(_QWORD *)(v46 + 8) = v203;
          *(_DWORD *)(v46 + 16) = (_DWORD)v204;
          LODWORD(v204) = 0;
          *(_BYTE *)(v46 + 20) = BYTE4(v204);
          if (v198 >= 0x41 && v197)
            MEMORY[0x2348A0E84](v197, 0x1000C8000313F17);
          if (v201 >= 0x41 && v200)
            MEMORY[0x2348A0E84](v200, 0x1000C8000313F17);
          llvm::APInt::operator*();
          LODWORD(v201) = (_DWORD)v204;
          v200 = v203;
          BYTE4(v201) = v209;
          llvm::APInt::operator*();
          LODWORD(v198) = (_DWORD)v204;
          v197 = v203;
          BYTE4(v198) = v212;
          sub_22E4EBD50((llvm::APInt *)&v200, (uint64_t)&v203);
          v48 = a1[1];
          if (*(_DWORD *)(v48 + 32) >= 0x41u)
          {
            v49 = *(_QWORD *)(v48 + 24);
            if (v49)
              MEMORY[0x2348A0E84](v49, 0x1000C8000313F17);
          }
          *(_QWORD *)(v48 + 24) = v203;
          *(_DWORD *)(v48 + 32) = (_DWORD)v204;
          LODWORD(v204) = 0;
          *(_BYTE *)(v48 + 36) = BYTE4(v204);
          if (v198 >= 0x41)
          {
            v50 = v197;
            if (v197)
              goto LABEL_128;
          }
LABEL_129:
          if (v201 >= 0x41 && v200)
            MEMORY[0x2348A0E84](v200, 0x1000C8000313F17);
          if ((_BYTE *)v44 == v218)
            sub_22E463170((llvm::APFloatBase *)&v219);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v218);
          if ((_BYTE *)v44 == v214)
LABEL_676:
            inited = sub_22E463170((llvm::APFloatBase *)&v215);
          else
LABEL_517:
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v214);
          if (v211 >= 0x41)
          {
            inited = v210;
            if (v210)
              inited = (llvm::APFloatBase *)MEMORY[0x2348A0E84](v210, 0x1000C8000313F17);
          }
          if (v208 >= 0x41)
          {
            inited = (llvm::APFloatBase *)v207;
            if (v207)
              inited = (llvm::APFloatBase *)MEMORY[0x2348A0E84](v207, 0x1000C8000313F17);
          }
LABEL_524:
          v6 = 1;
          goto LABEL_525;
        }
        LOBYTE(v206) = 0;
        v208 = *(_DWORD *)(v26 + 16);
        if (v208 > 0x40)
          inited = (llvm::APFloatBase *)llvm::APInt::initSlowCase((llvm::APInt *)&v207, v27);
        else
          v207 = *(uint64_t **)v27;
        v209 = *(_BYTE *)(v26 + 20);
        v58 = (const llvm::APInt *)(v26 + 24);
        v211 = *(_DWORD *)(v26 + 32);
        if (v211 > 0x40)
          inited = (llvm::APFloatBase *)llvm::APInt::initSlowCase((llvm::APInt *)&v210, v58);
        else
          v210 = *(llvm::APFloatBase **)v58;
        v59 = *(_BYTE **)(v26 + 48);
        v212 = *(_BYTE *)(v26 + 36);
        v60 = (_BYTE *)llvm::APFloatBase::PPCDoubleDouble(inited);
        if (v60 == v59)
          MEMORY[0x23489F2A0](&v214, v26 + 48);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v214, (const llvm::detail::IEEEFloat *)(v26 + 48));
        v61 = (const llvm::detail::IEEEFloat *)(v26 + 80);
        if (v60 == *(_BYTE **)(v26 + 80))
          MEMORY[0x23489F2A0](&v218, v61);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v218, v61);
        v62 = (uint64_t *)a1[1];
        if (v14)
        {
          if (v60 == v214)
            MEMORY[0x23489F2A0](&v204, &v214);
          else
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v204, (const llvm::detail::IEEEFloat *)&v214);
          sub_22F034FC4((llvm::APFloatBase *)&v203);
          sub_22E51FDA0(v62 + 6, (uint64_t *)&v204);
          if (v60 == v204)
            sub_22E463170((llvm::APFloatBase *)v205);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v204);
          if (v60 == v214)
            MEMORY[0x23489F2A0](&v204, &v214);
          else
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v204, (const llvm::detail::IEEEFloat *)&v214);
          goto LABEL_160;
        }
        if (v25)
        {
          if (v60 == v228)
            MEMORY[0x23489F2A0](&v204, &v228);
          else
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v204, (const llvm::detail::IEEEFloat *)&v228);
          sub_22F034FC4((llvm::APFloatBase *)&v203);
          sub_22E51FDA0(v62 + 6, (uint64_t *)&v204);
          if (v60 == v204)
            sub_22E463170((llvm::APFloatBase *)v205);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v204);
          if (v60 == v228)
            MEMORY[0x23489F2A0](&v204, &v228);
          else
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v204, (const llvm::detail::IEEEFloat *)&v228);
LABEL_160:
          sub_22F034FC4((llvm::APFloatBase *)&v203);
          sub_22E51FDA0(v62 + 10, (uint64_t *)&v204);
          if (v60 != v204)
          {
LABEL_513:
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v204);
            goto LABEL_514;
          }
LABEL_761:
          sub_22E463170((llvm::APFloatBase *)v205);
LABEL_514:
          if (v60 == v218)
            sub_22E463170((llvm::APFloatBase *)&v219);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v218);
          if (v60 == v214)
            goto LABEL_676;
          goto LABEL_517;
        }
        if (v60 == v214)
          MEMORY[0x23489F2A0](&v204, &v214);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v204, (const llvm::detail::IEEEFloat *)&v214);
        sub_22F034FC4((llvm::APFloatBase *)&v203);
        if (v60 == v218)
          MEMORY[0x23489F2A0](&v201, &v218);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v201, (const llvm::detail::IEEEFloat *)&v218);
        sub_22F034FC4((llvm::APFloatBase *)&v200);
        if (v60 == v214)
          MEMORY[0x23489F2A0](&v198, &v214);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v198, (const llvm::detail::IEEEFloat *)&v214);
        sub_22F034FC4((llvm::APFloatBase *)&v197);
        if (v60 == v218)
          MEMORY[0x23489F2A0](&v195, &v218);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v195, (const llvm::detail::IEEEFloat *)&v218);
        sub_22F034FC4((llvm::APFloatBase *)&v194);
        if (v60 == v204)
          MEMORY[0x23489F2A0](&v192, &v204);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v192, (const llvm::detail::IEEEFloat *)&v204);
        sub_22E51FBD8((llvm::APFloatBase *)&v191);
        v114 = v62 + 6;
        sub_22E51FDA0(v62 + 6, (uint64_t *)&v192);
        if (v60 == v192)
          sub_22E463170((llvm::APFloatBase *)v193);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v192);
        if (v60 == v198)
          MEMORY[0x23489F2A0](&v192, &v198);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v192, (const llvm::detail::IEEEFloat *)&v198);
        v75 = v62 + 5;
        sub_22E51FCBC((llvm::APFloatBase *)&v191);
        v113 = v62 + 10;
        sub_22E51FDA0(v62 + 10, (uint64_t *)&v192);
        if (v60 == v192)
          sub_22E463170((llvm::APFloatBase *)v193);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v192);
        if (v60 == (_BYTE *)*v114)
          v75 = (uint64_t *)v62[7];
        if ((*((_BYTE *)v75 + 28) & 7) != 1)
          goto LABEL_506;
        v76 = v60 == (_BYTE *)*v113 ? (uint64_t *)v62[11] : v62 + 9;
        if ((*((_BYTE *)v76 + 28) & 7) != 1)
          goto LABEL_506;
        v92 = (_BYTE *)(v215 + 28);
        if (v60 != v214)
          v92 = v216;
        if ((*v92 & 7) == 0)
          goto LABEL_415;
        v93 = v220;
        if (v60 == v218)
          v93 = (_BYTE *)(v219 + 28);
        if ((*v93 & 7) != 0)
        {
          v94 = 0;
        }
        else
        {
LABEL_415:
          if (v60 == v214)
            llvm::detail::DoubleAPFloat::DoubleAPFloat();
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          sub_22F3C4908((llvm::APFloatBase *)v188, (uint64_t)&v213);
          if (v60 == v189)
            llvm::detail::DoubleAPFloat::DoubleAPFloat();
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          sub_22E51FDA0((uint64_t *)&v214, (uint64_t *)&v192);
          if (v60 == v192)
            sub_22E463170((llvm::APFloatBase *)v193);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v192);
          if (v60 == v189)
            sub_22E463170((llvm::APFloatBase *)&v190);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v189);
          if (v60 == v218)
            llvm::detail::DoubleAPFloat::DoubleAPFloat();
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          sub_22F3C4908((llvm::APFloatBase *)v185, (uint64_t)&v217);
          if (v60 == v186)
            llvm::detail::DoubleAPFloat::DoubleAPFloat();
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          sub_22E51FDA0((uint64_t *)&v218, (uint64_t *)&v192);
          if (v60 == v192)
            sub_22E463170((llvm::APFloatBase *)v193);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v192);
          if (v60 == v186)
            sub_22E463170((llvm::APFloatBase *)&v187);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v186);
          v107 = (_BYTE *)(v229 + 28);
          if (v60 != v228)
            v107 = v231;
          if ((*v107 & 7) == 1)
          {
            sub_22E99C474((llvm::APFloatBase *)&v183, (uint64_t)v228);
            sub_22F3C4908((llvm::APFloatBase *)v182, (uint64_t)&v227);
            if (v60 == v183)
              llvm::detail::DoubleAPFloat::DoubleAPFloat();
            else
              llvm::detail::IEEEFloat::IEEEFloat();
            sub_22E51FDA0((uint64_t *)&v228, (uint64_t *)&v192);
            if (v60 == v192)
              sub_22E463170((llvm::APFloatBase *)v193);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v192);
            if (v60 == v183)
              sub_22E463170((llvm::APFloatBase *)&v184);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v183);
          }
          v108 = (_BYTE *)(v234 + 28);
          if (v60 != v233)
            v108 = v235;
          if ((*v108 & 7) == 1)
          {
            sub_22E99C474((llvm::APFloatBase *)&v180, (uint64_t)v233);
            sub_22F3C4908((llvm::APFloatBase *)v179, (uint64_t)&v232);
            if (v60 == v180)
              llvm::detail::DoubleAPFloat::DoubleAPFloat();
            else
              llvm::detail::IEEEFloat::IEEEFloat();
            sub_22E51FDA0((uint64_t *)&v233, (uint64_t *)&v192);
            if (v60 == v192)
              sub_22E463170((llvm::APFloatBase *)v193);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v192);
            if (v60 == v180)
              sub_22E463170((llvm::APFloatBase *)&v181);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v180);
          }
          v94 = 1;
        }
        v95 = (_BYTE *)(v229 + 28);
        if (v60 != v228)
          v95 = v231;
        if ((*v95 & 7) != 0 && (v60 != v233 ? (v96 = v235) : (v96 = (_BYTE *)(v234 + 28)), (*v96 & 7) != 0))
        {
          if ((v94 & 1) != 0)
            goto LABEL_466;
          v97 = &v203;
          if (v60 == v204)
            v97 = (uint64_t *)v205[0];
          if ((*((_BYTE *)v97 + 28) & 7) != 0)
          {
            v98 = &v200;
            if (v60 == v201)
              v98 = (uint64_t *)v202[0];
            if ((*((_BYTE *)v98 + 28) & 7) != 0)
            {
              v99 = &v197;
              if (v60 == v198)
                v99 = (uint64_t *)v199[0];
              if ((*((_BYTE *)v99 + 28) & 7) != 0)
              {
                v100 = &v194;
                if (v60 == v195)
                  v100 = (uint64_t *)v196[0];
                if ((*((_BYTE *)v100 + 28) & 7) != 0)
                {
LABEL_506:
                  if (v60 == v195)
                    sub_22E463170((llvm::APFloatBase *)v196);
                  else
                    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v195);
                  if (v60 == v198)
                    sub_22E463170((llvm::APFloatBase *)v199);
                  else
                    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v198);
                  if (v60 == v201)
                    sub_22E463170((llvm::APFloatBase *)v202);
                  else
                    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v201);
                  if (v60 != v204)
                    goto LABEL_513;
                  goto LABEL_761;
                }
              }
            }
          }
          v101 = (_BYTE *)(v215 + 28);
          if (v60 != v214)
            v101 = v216;
          if ((*v101 & 7) == 1)
          {
            sub_22E99C474((llvm::APFloatBase *)&v166, (uint64_t)v214);
            sub_22F3C4908((llvm::APFloatBase *)v165, (uint64_t)&v213);
            if (v60 == v166)
              llvm::detail::DoubleAPFloat::DoubleAPFloat();
            else
              llvm::detail::IEEEFloat::IEEEFloat();
            sub_22E51FDA0((uint64_t *)&v214, (uint64_t *)&v192);
            if (v60 == v192)
              sub_22E463170((llvm::APFloatBase *)v193);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v192);
            if (v60 == v166)
              sub_22E463170((llvm::APFloatBase *)&v167);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v166);
          }
          v102 = (_BYTE *)(v219 + 28);
          if (v60 != v218)
            v102 = v220;
          if ((*v102 & 7) == 1)
          {
            sub_22E99C474((llvm::APFloatBase *)&v163, (uint64_t)v218);
            sub_22F3C4908((llvm::APFloatBase *)v162, (uint64_t)&v217);
            if (v60 == v163)
              llvm::detail::DoubleAPFloat::DoubleAPFloat();
            else
              llvm::detail::IEEEFloat::IEEEFloat();
            sub_22E51FDA0((uint64_t *)&v218, (uint64_t *)&v192);
            if (v60 == v192)
              sub_22E463170((llvm::APFloatBase *)v193);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v192);
            if (v60 == v163)
              sub_22E463170((llvm::APFloatBase *)&v164);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v163);
          }
          v103 = (_BYTE *)(v229 + 28);
          if (v60 != v228)
            v103 = v231;
          if ((*v103 & 7) == 1)
          {
            sub_22E99C474((llvm::APFloatBase *)&v160, (uint64_t)v228);
            sub_22F3C4908((llvm::APFloatBase *)v159, (uint64_t)&v227);
            if (v60 == v160)
              llvm::detail::DoubleAPFloat::DoubleAPFloat();
            else
              llvm::detail::IEEEFloat::IEEEFloat();
            sub_22E51FDA0((uint64_t *)&v228, (uint64_t *)&v192);
            if (v60 == v192)
              sub_22E463170((llvm::APFloatBase *)v193);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v192);
            if (v60 == v160)
              sub_22E463170((llvm::APFloatBase *)&v161);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v160);
          }
          v104 = (_BYTE *)(v234 + 28);
          if (v60 != v233)
            v104 = v235;
          if ((*v104 & 7) != 1)
          {
LABEL_466:
            if (v60 == v214)
              llvm::detail::DoubleAPFloat::DoubleAPFloat();
            else
              llvm::detail::IEEEFloat::IEEEFloat();
            sub_22E46320C(&v154);
            if (v60 == v214)
              MEMORY[0x23489F2A0](&v149, &v214);
            else
              llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v149, (const llvm::detail::IEEEFloat *)&v214);
            sub_22F034FC4((llvm::APFloatBase *)v148);
            if (v60 == v218)
              MEMORY[0x23489F2A0](&v146, &v218);
            else
              llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v146, (const llvm::detail::IEEEFloat *)&v218);
            sub_22F034FC4((llvm::APFloatBase *)v145);
            if (v60 == v149)
              MEMORY[0x23489F2A0](&v152, &v149);
            else
              llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v152, (const llvm::detail::IEEEFloat *)&v149);
            sub_22E51FBD8((llvm::APFloatBase *)v151);
            if (v60 == v155)
              MEMORY[0x23489F2A0](&v192, &v155);
            else
              llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v192, (const llvm::detail::IEEEFloat *)&v155);
            sub_22F034FC4((llvm::APFloatBase *)&v191);
            sub_22E51FDA0(v114, (uint64_t *)&v192);
            if (v60 == v192)
              sub_22E463170((llvm::APFloatBase *)v193);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v192);
            if (v60 == v152)
              sub_22E463170((llvm::APFloatBase *)v153);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v152);
            if (v60 == v146)
              sub_22E463170((llvm::APFloatBase *)v147);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v146);
            if (v60 == v149)
              sub_22E463170((llvm::APFloatBase *)v150);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v149);
            if (v60 == v155)
              sub_22E463170((llvm::APFloatBase *)v156);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v155);
            if (v60 == v214)
              llvm::detail::DoubleAPFloat::DoubleAPFloat();
            else
              llvm::detail::IEEEFloat::IEEEFloat();
            sub_22E46320C(&v154);
            if (v60 == v214)
              MEMORY[0x23489F2A0](&v149, &v214);
            else
              llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v149, (const llvm::detail::IEEEFloat *)&v214);
            sub_22F034FC4((llvm::APFloatBase *)v148);
            if (v60 == v218)
              MEMORY[0x23489F2A0](&v146, &v218);
            else
              llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v146, (const llvm::detail::IEEEFloat *)&v218);
            sub_22F034FC4((llvm::APFloatBase *)v145);
            if (v60 == v149)
              MEMORY[0x23489F2A0](&v152, &v149);
            else
              llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v152, (const llvm::detail::IEEEFloat *)&v149);
            sub_22E51FCBC((llvm::APFloatBase *)v151);
            if (v60 == v155)
              MEMORY[0x23489F2A0](&v192, &v155);
            else
              llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v192, (const llvm::detail::IEEEFloat *)&v155);
            sub_22F034FC4((llvm::APFloatBase *)&v191);
            sub_22E51FDA0(v113, (uint64_t *)&v192);
            if (v60 == v192)
              sub_22E463170((llvm::APFloatBase *)v193);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v192);
            if (v60 == v152)
              sub_22E463170((llvm::APFloatBase *)v153);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v152);
            if (v60 == v146)
              sub_22E463170((llvm::APFloatBase *)v147);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v146);
            if (v60 == v149)
              sub_22E463170((llvm::APFloatBase *)v150);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v149);
            if (v60 == v155)
              sub_22E463170((llvm::APFloatBase *)v156);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v155);
            goto LABEL_506;
          }
          v105 = (llvm::detail::IEEEFloat *)v158;
          sub_22E99C474((llvm::APFloatBase *)v158, (uint64_t)v233);
          sub_22F3C4908((llvm::APFloatBase *)v157, (uint64_t)&v232);
          if (v60 == (_BYTE *)v158[0])
            llvm::detail::DoubleAPFloat::DoubleAPFloat();
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          sub_22E51FDA0((uint64_t *)&v233, (uint64_t *)&v192);
          if (v60 == v192)
            sub_22E463170((llvm::APFloatBase *)v193);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v192);
          if (v60 == (_BYTE *)v158[0])
          {
            v106 = v157;
LABEL_869:
            sub_22E463170((llvm::APFloatBase *)(v106 + 16));
            goto LABEL_466;
          }
        }
        else
        {
          if (v60 == v228)
            llvm::detail::DoubleAPFloat::DoubleAPFloat();
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          sub_22F3C4908((llvm::APFloatBase *)v176, (uint64_t)&v227);
          if (v60 == v177)
            llvm::detail::DoubleAPFloat::DoubleAPFloat();
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          sub_22E51FDA0((uint64_t *)&v228, (uint64_t *)&v192);
          if (v60 == v192)
            sub_22E463170((llvm::APFloatBase *)v193);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v192);
          if (v60 == v177)
            sub_22E463170((llvm::APFloatBase *)&v178);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v177);
          if (v60 == v233)
            llvm::detail::DoubleAPFloat::DoubleAPFloat();
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          sub_22F3C4908((llvm::APFloatBase *)v173, (uint64_t)&v232);
          if (v60 == v174)
            llvm::detail::DoubleAPFloat::DoubleAPFloat();
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          sub_22E51FDA0((uint64_t *)&v233, (uint64_t *)&v192);
          if (v60 == v192)
            sub_22E463170((llvm::APFloatBase *)v193);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v192);
          if (v60 == v174)
            sub_22E463170((llvm::APFloatBase *)&v175);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v174);
          v109 = (_BYTE *)(v215 + 28);
          if (v60 != v214)
            v109 = v216;
          if ((*v109 & 7) == 1)
          {
            sub_22E99C474((llvm::APFloatBase *)&v171, (uint64_t)v214);
            sub_22F3C4908((llvm::APFloatBase *)v170, (uint64_t)&v213);
            if (v60 == v171)
              llvm::detail::DoubleAPFloat::DoubleAPFloat();
            else
              llvm::detail::IEEEFloat::IEEEFloat();
            sub_22E51FDA0((uint64_t *)&v214, (uint64_t *)&v192);
            if (v60 == v192)
              sub_22E463170((llvm::APFloatBase *)v193);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v192);
            if (v60 == v171)
              sub_22E463170((llvm::APFloatBase *)&v172);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v171);
          }
          v110 = (_BYTE *)(v219 + 28);
          if (v60 != v218)
            v110 = v220;
          if ((*v110 & 7) != 1)
            goto LABEL_466;
          v105 = (llvm::detail::IEEEFloat *)v169;
          sub_22E99C474((llvm::APFloatBase *)v169, (uint64_t)v218);
          sub_22F3C4908((llvm::APFloatBase *)v168, (uint64_t)&v217);
          if (v60 == (_BYTE *)v169[0])
            llvm::detail::DoubleAPFloat::DoubleAPFloat();
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          sub_22E51FDA0((uint64_t *)&v218, (uint64_t *)&v192);
          if (v60 == v192)
            sub_22E463170((llvm::APFloatBase *)v193);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v192);
          if (v60 == (_BYTE *)v169[0])
          {
            v106 = v168;
            goto LABEL_869;
          }
        }
        llvm::detail::IEEEFloat::~IEEEFloat(v105);
        goto LABEL_466;
      case 3:
        v29 = a1[1];
        if (*(_BYTE *)v29)
        {
          v30 = sub_22E42E5EC((uint64_t)&v222, 0);
          if (!(_DWORD)v30 || (v30 = sub_22E42E5EC((uint64_t)&v224, 0), !(_DWORD)v30))
          {
            v35 = a1[1];
            LOBYTE(v206) = *(_BYTE *)v35;
            v36 = (const llvm::APInt *)(v35 + 8);
            v208 = *(_DWORD *)(v35 + 16);
            if (v208 > 0x40)
              v30 = llvm::APInt::initSlowCase((llvm::APInt *)&v207, v36);
            else
              v207 = *(uint64_t **)v36;
            v209 = *(_BYTE *)(v35 + 20);
            v51 = (const llvm::APInt *)(v35 + 24);
            v211 = *(_DWORD *)(v35 + 32);
            if (v211 > 0x40)
              v30 = llvm::APInt::initSlowCase((llvm::APInt *)&v210, v51);
            else
              v210 = *(llvm::APFloatBase **)v51;
            v52 = *(_QWORD *)(v35 + 48);
            v212 = *(_BYTE *)(v35 + 36);
            v44 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v30);
            if (v44 == v52)
              MEMORY[0x23489F2A0](&v214, v35 + 48);
            else
              llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v214, (const llvm::detail::IEEEFloat *)(v35 + 48));
            v53 = (const llvm::detail::IEEEFloat *)(v35 + 80);
            if (v44 == *(_QWORD *)(v35 + 80))
              MEMORY[0x23489F2A0](&v218, v53);
            else
              llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v218, v53);
            llvm::APInt::operator*();
            LODWORD(v198) = (_DWORD)v204;
            v197 = v203;
            BYTE4(v198) = BYTE4(v223);
            llvm::APInt::operator*();
            LODWORD(v195) = (_DWORD)v204;
            v194 = v203;
            BYTE4(v195) = v226;
            sub_22E4EBD50((llvm::APInt *)&v197, (uint64_t)&v200);
            if (v195 >= 0x41 && v194)
              MEMORY[0x2348A0E84](v194, 0x1000C8000313F17);
            if (v198 >= 0x41 && v197)
              MEMORY[0x2348A0E84](v197, 0x1000C8000313F17);
            llvm::APInt::operator*();
            LODWORD(v195) = (_DWORD)v204;
            v194 = v203;
            BYTE4(v195) = v209;
            llvm::APInt::operator*();
            LODWORD(v192) = (_DWORD)v204;
            v191 = v203;
            BYTE4(v192) = v212;
            sub_22E4EBD50((llvm::APInt *)&v194, (uint64_t)&v197);
            sub_22F024760((llvm::APInt *)&v197, (const llvm::APInt *)&v200, (uint64_t)&v203);
            v54 = a1[1];
            if (*(_DWORD *)(v54 + 16) >= 0x41u)
            {
              v55 = *(_QWORD *)(v54 + 8);
              if (v55)
                MEMORY[0x2348A0E84](v55, 0x1000C8000313F17);
            }
            *(_QWORD *)(v54 + 8) = v203;
            *(_DWORD *)(v54 + 16) = (_DWORD)v204;
            LODWORD(v204) = 0;
            *(_BYTE *)(v54 + 20) = BYTE4(v204);
            if (v198 >= 0x41 && v197)
              MEMORY[0x2348A0E84](v197, 0x1000C8000313F17);
            if (v192 >= 0x41 && v191)
              MEMORY[0x2348A0E84](v191, 0x1000C8000313F17);
            if (v195 >= 0x41 && v194)
              MEMORY[0x2348A0E84](v194, 0x1000C8000313F17);
            llvm::APInt::operator*();
            LODWORD(v195) = (_DWORD)v204;
            v194 = v203;
            BYTE4(v195) = v212;
            llvm::APInt::operator*();
            LODWORD(v192) = (_DWORD)v204;
            v191 = v203;
            BYTE4(v192) = v209;
            sub_22E5EDF90((llvm::APInt *)&v194, (uint64_t)&v197);
            sub_22F024760((llvm::APInt *)&v197, (const llvm::APInt *)&v200, (uint64_t)&v203);
            v56 = a1[1];
            if (*(_DWORD *)(v56 + 32) >= 0x41u)
            {
              v57 = *(_QWORD *)(v56 + 24);
              if (v57)
                MEMORY[0x2348A0E84](v57, 0x1000C8000313F17);
            }
            *(_QWORD *)(v56 + 24) = v203;
            *(_DWORD *)(v56 + 32) = (_DWORD)v204;
            LODWORD(v204) = 0;
            *(_BYTE *)(v56 + 36) = BYTE4(v204);
            if (v198 >= 0x41 && v197)
              MEMORY[0x2348A0E84](v197, 0x1000C8000313F17);
            if (v192 >= 0x41 && v191)
              MEMORY[0x2348A0E84](v191, 0x1000C8000313F17);
            if (v195 >= 0x41)
            {
              v50 = v194;
              if (v194)
LABEL_128:
                MEMORY[0x2348A0E84](v50, 0x1000C8000313F17);
            }
            goto LABEL_129;
          }
          v31 = *a1;
          v32 = a2;
          v33 = 2292;
LABEL_55:
          inited = (llvm::APFloatBase *)sub_22F072CEC(v31, v32, v33, 0);
          goto LABEL_56;
        }
        LOBYTE(v206) = 0;
        v37 = (const llvm::APInt *)(v29 + 8);
        v208 = *(_DWORD *)(v29 + 16);
        if (v208 > 0x40)
          inited = (llvm::APFloatBase *)llvm::APInt::initSlowCase((llvm::APInt *)&v207, v37);
        else
          v207 = *(uint64_t **)v37;
        v209 = *(_BYTE *)(v29 + 20);
        v63 = (const llvm::APInt *)(v29 + 24);
        v211 = *(_DWORD *)(v29 + 32);
        if (v211 > 0x40)
          inited = (llvm::APFloatBase *)llvm::APInt::initSlowCase((llvm::APInt *)&v210, v63);
        else
          v210 = *(llvm::APFloatBase **)v63;
        v64 = *(_BYTE **)(v29 + 48);
        v212 = *(_BYTE *)(v29 + 36);
        v65 = (_BYTE *)llvm::APFloatBase::PPCDoubleDouble(inited);
        if (v65 == v64)
          MEMORY[0x23489F2A0](&v214, v29 + 48);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v214, (const llvm::detail::IEEEFloat *)(v29 + 48));
        v66 = (const llvm::detail::IEEEFloat *)(v29 + 80);
        if (v65 == *(_BYTE **)(v29 + 80))
          MEMORY[0x23489F2A0](&v218, v66);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v218, v66);
        v67 = (uint64_t *)a1[1];
        if (v25)
        {
          if (v65 == v214)
            MEMORY[0x23489F2A0](&v204, &v214);
          else
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v204, (const llvm::detail::IEEEFloat *)&v214);
          sub_22F035024((llvm::APFloatBase *)&v203);
          sub_22E51FDA0(v67 + 6, (uint64_t *)&v204);
          if (v65 == v204)
            sub_22E463170((llvm::APFloatBase *)v205);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v204);
          if (v65 == v218)
            MEMORY[0x23489F2A0](&v204, &v218);
          else
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v204, (const llvm::detail::IEEEFloat *)&v218);
          sub_22F035024((llvm::APFloatBase *)&v203);
          sub_22E51FDA0(v67 + 10, (uint64_t *)&v204);
          if (v65 == v204)
            sub_22E463170((llvm::APFloatBase *)v205);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v204);
          goto LABEL_364;
        }
        if (v14)
        {
          if (v65 == v214)
            llvm::detail::DoubleAPFloat::DoubleAPFloat();
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          if (v65 == v204)
            llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)&v204);
          else
            llvm::detail::IEEEFloat::makeZero((llvm::detail::IEEEFloat *)&v204);
          sub_22E51FDA0((uint64_t *)&v218, (uint64_t *)&v204);
          if (v65 == v204)
            sub_22E463170((llvm::APFloatBase *)v205);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v204);
        }
        if (v65 == v228)
          MEMORY[0x23489F2A0](&v142, &v228);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v142, (const llvm::detail::IEEEFloat *)&v228);
        if (v65 == v142)
        {
          if ((*(_BYTE *)(v143 + 28) & 8) != 0)
            llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v142);
        }
        else if ((v144 & 8) != 0)
        {
          llvm::detail::IEEEFloat::changeSign((llvm::detail::IEEEFloat *)&v142);
        }
        if (v65 == v142)
          llvm::detail::DoubleAPFloat::DoubleAPFloat();
        else
          llvm::detail::IEEEFloat::IEEEFloat();
        if (v65 == v233)
          MEMORY[0x23489F2A0](&v139, &v233);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v139, (const llvm::detail::IEEEFloat *)&v233);
        if (v65 == v139)
        {
          if ((*(_BYTE *)(v140 + 28) & 8) != 0)
            llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v139);
        }
        else if ((v141 & 8) != 0)
        {
          llvm::detail::IEEEFloat::changeSign((llvm::detail::IEEEFloat *)&v139);
        }
        if (v65 == v139)
          llvm::detail::DoubleAPFloat::DoubleAPFloat();
        else
          llvm::detail::IEEEFloat::IEEEFloat();
        v68 = (uint64_t *)v202[0];
        if (v65 != v201)
          v68 = &v200;
        if ((*((_BYTE *)v68 + 28) & 7) == 1)
        {
          v73 = (uint64_t)v198;
          v72 = (uint64_t *)&v198;
        }
        else
        {
          v69 = &v197;
          if (v65 == v198)
            v69 = (uint64_t *)v199[0];
          if ((*((_BYTE *)v69 + 28) & 7) == 1)
          {
            if (v65 == v201)
              MEMORY[0x23489F2A0](&v204, &v201);
            else
              llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v204, (const llvm::detail::IEEEFloat *)&v201);
            goto LABEL_214;
          }
          if (v65 == v201)
            v70 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)&v201, (const llvm::detail::DoubleAPFloat *)&v198);
          else
            v70 = llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)&v201, (const llvm::detail::IEEEFloat *)&v198);
          v71 = &v200;
          if (v70)
          {
            v72 = (uint64_t *)&v201;
          }
          else
          {
            v71 = &v197;
            v72 = (uint64_t *)&v198;
          }
          v73 = v71[1];
        }
        if (v65 == (_BYTE *)v73)
          MEMORY[0x23489F2A0](&v204, v72);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v204, (const llvm::detail::IEEEFloat *)v72);
LABEL_214:
        if (v65 == v198)
          sub_22E463170((llvm::APFloatBase *)v199);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v198);
        if (v65 == v139)
          sub_22E463170((llvm::APFloatBase *)&v140);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v139);
        if (v65 == v201)
          sub_22E463170((llvm::APFloatBase *)v202);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v201);
        if (v65 == v142)
          sub_22E463170((llvm::APFloatBase *)&v143);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v142);
        v74 = &v203;
        if (v65 == v204)
          v74 = (uint64_t *)v205[0];
        if ((*((_BYTE *)v74 + 28) & 6) != 0)
        {
          llvm::detail::ilogb();
          if (v65 == v228)
            MEMORY[0x23489F2A0](&v137, &v228);
          else
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v137, (const llvm::detail::IEEEFloat *)&v228);
          sub_22F024634((llvm::APFloatBase *)&v200, (uint64_t)v136);
          sub_22E51FDA0((uint64_t *)&v228, (uint64_t *)&v201);
          if (v65 == v201)
            sub_22E463170((llvm::APFloatBase *)v202);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v201);
          if (v65 == v137)
            sub_22E463170((llvm::APFloatBase *)&v138);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v137);
          if (v65 == v233)
            MEMORY[0x23489F2A0](&v134, &v233);
          else
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v134, (const llvm::detail::IEEEFloat *)&v233);
          sub_22F024634((llvm::APFloatBase *)&v200, (uint64_t)v133);
          sub_22E51FDA0((uint64_t *)&v233, (uint64_t *)&v201);
          if (v65 == v201)
            sub_22E463170((llvm::APFloatBase *)v202);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v201);
          if (v65 == v134)
            sub_22E463170((llvm::APFloatBase *)&v135);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v134);
        }
        if (v65 == v228)
          MEMORY[0x23489F2A0](&v198, &v228);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v198, (const llvm::detail::IEEEFloat *)&v228);
        sub_22F034FC4((llvm::APFloatBase *)&v197);
        if (v65 == v233)
          MEMORY[0x23489F2A0](&v195, &v233);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v195, (const llvm::detail::IEEEFloat *)&v233);
        sub_22F034FC4((llvm::APFloatBase *)&v194);
        if (v65 == v198)
          MEMORY[0x23489F2A0]();
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v201, (const llvm::detail::IEEEFloat *)&v198);
        sub_22E51FCBC((llvm::APFloatBase *)&v200);
        if (v65 == v195)
          sub_22E463170((llvm::APFloatBase *)v196);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v195);
        if (v65 == v198)
          sub_22E463170((llvm::APFloatBase *)v199);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v198);
        if (v65 == v214)
          MEMORY[0x23489F2A0](&v192, &v214);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v192, (const llvm::detail::IEEEFloat *)&v214);
        sub_22F034FC4((llvm::APFloatBase *)&v191);
        if (v65 == v218)
          MEMORY[0x23489F2A0](&v155, &v218);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v155, (const llvm::detail::IEEEFloat *)&v218);
        sub_22F034FC4((llvm::APFloatBase *)&v154);
        if (v65 == v192)
          MEMORY[0x23489F2A0](&v195, &v192);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v195, (const llvm::detail::IEEEFloat *)&v192);
        sub_22E51FCBC((llvm::APFloatBase *)&v194);
        if (v65 == v195)
          MEMORY[0x23489F2A0](&v131, &v195);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v131, (const llvm::detail::IEEEFloat *)&v195);
        sub_22F035024((llvm::APFloatBase *)v130);
        sub_22F024634((llvm::APFloatBase *)&v197, (uint64_t)v130);
        v77 = v67 + 6;
        sub_22E51FDA0(v67 + 6, (uint64_t *)&v198);
        if (v65 == v198)
          sub_22E463170((llvm::APFloatBase *)v199);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v198);
        if (v65 == v131)
          sub_22E463170((llvm::APFloatBase *)&v132);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v131);
        if (v65 == v195)
          sub_22E463170((llvm::APFloatBase *)v196);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v195);
        if (v65 == v155)
          sub_22E463170((llvm::APFloatBase *)v156);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v155);
        if (v65 == v192)
          sub_22E463170((llvm::APFloatBase *)v193);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v192);
        if (v65 == v218)
          MEMORY[0x23489F2A0](&v192, &v218);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v192, (const llvm::detail::IEEEFloat *)&v218);
        sub_22F034FC4((llvm::APFloatBase *)&v191);
        if (v65 == v214)
          MEMORY[0x23489F2A0](&v155, &v214);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v155, (const llvm::detail::IEEEFloat *)&v214);
        sub_22F034FC4((llvm::APFloatBase *)&v154);
        if (v65 == v192)
          MEMORY[0x23489F2A0](&v195, &v192);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v195, (const llvm::detail::IEEEFloat *)&v192);
        sub_22E51FBD8((llvm::APFloatBase *)&v194);
        if (v65 == v195)
          MEMORY[0x23489F2A0](&v128, &v195);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v128, (const llvm::detail::IEEEFloat *)&v195);
        sub_22F035024((llvm::APFloatBase *)v127);
        sub_22F024634((llvm::APFloatBase *)&v197, (uint64_t)v127);
        v78 = v67 + 10;
        sub_22E51FDA0(v67 + 10, (uint64_t *)&v198);
        if (v65 == v198)
          sub_22E463170((llvm::APFloatBase *)v199);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v198);
        if (v65 == v128)
          sub_22E463170((llvm::APFloatBase *)&v129);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v128);
        if (v65 == v195)
          sub_22E463170((llvm::APFloatBase *)v196);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v195);
        if (v65 == v155)
          sub_22E463170((llvm::APFloatBase *)v156);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v155);
        v79 = v67 + 5;
        if (v65 == v192)
          sub_22E463170((llvm::APFloatBase *)v193);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v192);
        if (v65 == (_BYTE *)*v77)
          v79 = (uint64_t *)v67[7];
        if ((*((_BYTE *)v79 + 28) & 7) != 1)
          goto LABEL_360;
        v80 = v65 == (_BYTE *)*v78 ? (uint64_t *)v67[11] : v67 + 9;
        if ((*((_BYTE *)v80 + 28) & 7) != 1)
          goto LABEL_360;
        v81 = &v200;
        if (v65 == v201)
          v81 = (uint64_t *)v202[0];
        if ((*((_BYTE *)v81 + 28) & 0xF) == 3)
        {
          v82 = v215;
          v83 = (_BYTE *)(v215 + 28);
          if (v65 != v214)
            v83 = v216;
          if ((*v83 & 7) != 1)
            goto LABEL_322;
          v84 = v220;
          if (v65 == v218)
            v84 = (_BYTE *)(v219 + 28);
          if ((*v84 & 7) != 1)
          {
LABEL_322:
            if (v65 == (_BYTE *)*v77)
              llvm::detail::DoubleAPFloat::DoubleAPFloat();
            else
              llvm::detail::IEEEFloat::IEEEFloat();
            sub_22E46320C(&v194);
            if (v65 == v195)
              MEMORY[0x23489F2A0](&v198, &v195);
            else
              llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v198, (const llvm::detail::IEEEFloat *)&v195);
            sub_22F034FC4((llvm::APFloatBase *)&v197);
            sub_22E51FDA0(v67 + 6, (uint64_t *)&v198);
            if (v65 == v198)
              sub_22E463170((llvm::APFloatBase *)v199);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v198);
            if (v65 == v195)
              sub_22E463170((llvm::APFloatBase *)v196);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v195);
            if (v65 == (_BYTE *)*v77)
              llvm::detail::DoubleAPFloat::DoubleAPFloat();
            else
              llvm::detail::IEEEFloat::IEEEFloat();
            sub_22E46320C(&v194);
            if (v65 == v195)
              MEMORY[0x23489F2A0](&v198, &v195);
            else
              llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v198, (const llvm::detail::IEEEFloat *)&v195);
            sub_22F034FC4((llvm::APFloatBase *)&v197);
            sub_22E51FDA0(v78, (uint64_t *)&v198);
            if (v65 == v198)
              sub_22E463170((llvm::APFloatBase *)v199);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v198);
            if (v65 == v195)
              sub_22E463170((llvm::APFloatBase *)v196);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v195);
            goto LABEL_360;
          }
        }
        else
        {
          v82 = v215;
        }
        v85 = (char *)(v82 + 28);
        if (v65 != v214)
          v85 = v216;
        v86 = *v85;
        if ((v86 & 7) != 0)
        {
          v87 = v220;
          if (v65 == v218)
            v87 = (_BYTE *)(v219 + 28);
          if ((*v87 & 7) != 0)
            goto LABEL_352;
        }
        v88 = v65 == v228 ? (_BYTE *)(v229 + 28) : v231;
        if ((*v88 & 6) == 0)
          goto LABEL_352;
        v89 = v235;
        if (v65 == v233)
          v89 = (_BYTE *)(v234 + 28);
        if ((*v89 & 6) != 0)
        {
          if (v65 == v214)
            llvm::detail::DoubleAPFloat::DoubleAPFloat();
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          sub_22F3C4908((llvm::APFloatBase *)v124, (uint64_t)&v213);
          if (v65 == v125)
            llvm::detail::DoubleAPFloat::DoubleAPFloat();
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          sub_22E51FDA0((uint64_t *)&v214, (uint64_t *)&v198);
          if (v65 == v198)
            sub_22E463170((llvm::APFloatBase *)v199);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v198);
          if (v65 == v125)
            sub_22E463170((llvm::APFloatBase *)&v126);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v125);
          if (v65 == v218)
            llvm::detail::DoubleAPFloat::DoubleAPFloat();
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          sub_22F3C4908((llvm::APFloatBase *)v121, (uint64_t)&v217);
          if (v65 == v122)
            llvm::detail::DoubleAPFloat::DoubleAPFloat();
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          sub_22E51FDA0((uint64_t *)&v218, (uint64_t *)&v198);
          if (v65 == v198)
            sub_22E463170((llvm::APFloatBase *)v199);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v198);
          if (v65 == v122)
            sub_22E463170((llvm::APFloatBase *)&v123);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v122);
          if (v65 == (_BYTE *)*v77)
            llvm::detail::DoubleAPFloat::DoubleAPFloat();
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          sub_22E46320C(&v194);
          if (v65 == v214)
            MEMORY[0x23489F2A0](&v155, &v214);
          else
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v155, (const llvm::detail::IEEEFloat *)&v214);
          sub_22F034FC4((llvm::APFloatBase *)&v154);
          if (v65 == v218)
            MEMORY[0x23489F2A0](&v152, &v218);
          else
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v152, (const llvm::detail::IEEEFloat *)&v218);
          sub_22F034FC4((llvm::APFloatBase *)v151);
          if (v65 == v155)
            MEMORY[0x23489F2A0](&v192, &v155);
          else
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v192, (const llvm::detail::IEEEFloat *)&v155);
          sub_22E51FCBC((llvm::APFloatBase *)&v191);
          if (v65 == v195)
            MEMORY[0x23489F2A0](&v198, &v195);
          else
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v198, (const llvm::detail::IEEEFloat *)&v195);
          sub_22F034FC4((llvm::APFloatBase *)&v197);
          sub_22E51FDA0(v77, (uint64_t *)&v198);
          if (v65 == v198)
            sub_22E463170((llvm::APFloatBase *)v199);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v198);
          if (v65 == v192)
            sub_22E463170((llvm::APFloatBase *)v193);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v192);
          if (v65 == v152)
            sub_22E463170((llvm::APFloatBase *)v153);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v152);
          if (v65 == v155)
            sub_22E463170((llvm::APFloatBase *)v156);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v155);
          if (v65 == v195)
            sub_22E463170((llvm::APFloatBase *)v196);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v195);
          if (v65 == (_BYTE *)*v78)
            llvm::detail::DoubleAPFloat::DoubleAPFloat();
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          sub_22E46320C(&v194);
        }
        else
        {
LABEL_352:
          v90 = &v203;
          if (v65 == v204)
            v90 = (uint64_t *)v205[0];
          if ((v86 & 6) == 0 || (*((_BYTE *)v90 + 28) & 7) != 0)
            goto LABEL_360;
          v91 = v65 == v218 ? (_BYTE *)(v219 + 28) : v220;
          if ((*v91 & 6) == 0)
            goto LABEL_360;
          if (v65 == v228)
            llvm::detail::DoubleAPFloat::DoubleAPFloat();
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          sub_22F3C4908((llvm::APFloatBase *)v118, (uint64_t)&v227);
          if (v65 == v119)
            llvm::detail::DoubleAPFloat::DoubleAPFloat();
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          sub_22E51FDA0((uint64_t *)&v228, (uint64_t *)&v198);
          if (v65 == v198)
            sub_22E463170((llvm::APFloatBase *)v199);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v198);
          if (v65 == v119)
            sub_22E463170((llvm::APFloatBase *)&v120);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v119);
          if (v65 == v233)
            llvm::detail::DoubleAPFloat::DoubleAPFloat();
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          sub_22F3C4908((llvm::APFloatBase *)v115, (uint64_t)&v232);
          if (v65 == v116)
            llvm::detail::DoubleAPFloat::DoubleAPFloat();
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          sub_22E51FDA0((uint64_t *)&v233, (uint64_t *)&v198);
          if (v65 == v198)
            sub_22E463170((llvm::APFloatBase *)v199);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v198);
          if (v65 == v116)
            sub_22E463170((llvm::APFloatBase *)&v117);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v116);
          if (v65 == (_BYTE *)*v77)
            llvm::detail::DoubleAPFloat::DoubleAPFloat();
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          if (v65 == v195)
            llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)&v195);
          else
            llvm::detail::IEEEFloat::makeZero((llvm::detail::IEEEFloat *)&v195);
          if (v65 == v214)
            MEMORY[0x23489F2A0](&v155, &v214);
          else
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v155, (const llvm::detail::IEEEFloat *)&v214);
          sub_22F034FC4((llvm::APFloatBase *)&v154);
          if (v65 == v218)
            MEMORY[0x23489F2A0](&v152, &v218);
          else
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v152, (const llvm::detail::IEEEFloat *)&v218);
          sub_22F034FC4((llvm::APFloatBase *)v151);
          if (v65 == v155)
            MEMORY[0x23489F2A0](&v192, &v155);
          else
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v192, (const llvm::detail::IEEEFloat *)&v155);
          sub_22E51FCBC((llvm::APFloatBase *)&v191);
          if (v65 == v195)
            MEMORY[0x23489F2A0](&v198, &v195);
          else
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v198, (const llvm::detail::IEEEFloat *)&v195);
          sub_22F034FC4((llvm::APFloatBase *)&v197);
          sub_22E51FDA0(v77, (uint64_t *)&v198);
          if (v65 == v198)
            sub_22E463170((llvm::APFloatBase *)v199);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v198);
          if (v65 == v192)
            sub_22E463170((llvm::APFloatBase *)v193);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v192);
          if (v65 == v152)
            sub_22E463170((llvm::APFloatBase *)v153);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v152);
          if (v65 == v155)
            sub_22E463170((llvm::APFloatBase *)v156);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v155);
          if (v65 == v195)
            sub_22E463170((llvm::APFloatBase *)v196);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v195);
          if (v65 == (_BYTE *)*v78)
            llvm::detail::DoubleAPFloat::DoubleAPFloat();
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          if (v65 == v195)
            llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)&v195);
          else
            llvm::detail::IEEEFloat::makeZero((llvm::detail::IEEEFloat *)&v195);
        }
        if (v65 == v218)
          MEMORY[0x23489F2A0](&v155, &v218);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v155, (const llvm::detail::IEEEFloat *)&v218);
        sub_22F034FC4((llvm::APFloatBase *)&v154);
        if (v65 == v214)
          MEMORY[0x23489F2A0](&v152, &v214);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v152, (const llvm::detail::IEEEFloat *)&v214);
        sub_22F034FC4((llvm::APFloatBase *)v151);
        if (v65 == v155)
          MEMORY[0x23489F2A0](&v192, &v155);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v192, (const llvm::detail::IEEEFloat *)&v155);
        sub_22E51FBD8((llvm::APFloatBase *)&v191);
        if (v65 == v195)
          MEMORY[0x23489F2A0](&v198, &v195);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v198, (const llvm::detail::IEEEFloat *)&v195);
        sub_22F034FC4((llvm::APFloatBase *)&v197);
        sub_22E51FDA0(v78, (uint64_t *)&v198);
        if (v65 == v198)
          sub_22E463170((llvm::APFloatBase *)v199);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v198);
        if (v65 == v192)
          sub_22E463170((llvm::APFloatBase *)v193);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v192);
        if (v65 == v152)
          sub_22E463170((llvm::APFloatBase *)v153);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v152);
        if (v65 == v155)
          sub_22E463170((llvm::APFloatBase *)v156);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v155);
        if (v65 == v195)
          sub_22E463170((llvm::APFloatBase *)v196);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v195);
LABEL_360:
        if (v65 == v201)
          sub_22E463170((llvm::APFloatBase *)v202);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v201);
        if (v65 == v204)
          sub_22E463170((llvm::APFloatBase *)v205);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v204);
LABEL_364:
        if (v65 == v218)
          sub_22E463170((llvm::APFloatBase *)&v219);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v218);
        if (v65 == v214)
          goto LABEL_676;
        goto LABEL_517;
      case 5:
        v28 = (_BYTE *)a1[1];
        if (*v28)
        {
          llvm::APInt::operator+=();
          inited = (llvm::APFloatBase *)llvm::APInt::operator+=();
          goto LABEL_524;
        }
        inited = (llvm::APFloatBase *)sub_22E51FCBC((llvm::APFloatBase *)(v28 + 40));
        if (v14)
        {
          inited = sub_22E54C3D4((const llvm::detail::IEEEFloat *)(a1[1] + 80), (const llvm::detail::IEEEFloat *)&v233);
          goto LABEL_524;
        }
        if ((v25 & 1) != 0)
          goto LABEL_524;
        v6 = 1;
        inited = (llvm::APFloatBase *)sub_22E51FCBC((llvm::APFloatBase *)(a1[1] + 72));
        goto LABEL_525;
      case 6:
        v34 = (_BYTE *)a1[1];
        if (*v34)
        {
          llvm::APInt::operator-=();
          inited = (llvm::APFloatBase *)llvm::APInt::operator-=();
          goto LABEL_524;
        }
        inited = (llvm::APFloatBase *)sub_22E51FBD8((llvm::APFloatBase *)(v34 + 40));
        if (v14)
        {
          v38 = sub_22E54C3D4((const llvm::detail::IEEEFloat *)(a1[1] + 80), (const llvm::detail::IEEEFloat *)&v233);
          v39 = a1[1];
          v41 = *(_QWORD *)(v39 + 80);
          v40 = (llvm::detail::DoubleAPFloat *)(v39 + 80);
          if (llvm::APFloatBase::PPCDoubleDouble(v38) == v41)
            inited = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::changeSign(v40);
          else
            inited = (llvm::APFloatBase *)llvm::detail::IEEEFloat::changeSign(v40);
          goto LABEL_524;
        }
        if ((v25 & 1) != 0)
          goto LABEL_524;
        v6 = 1;
        inited = (llvm::APFloatBase *)sub_22E51FBD8((llvm::APFloatBase *)(a1[1] + 72));
        goto LABEL_525;
      default:
        v31 = *a1;
        v32 = a2;
        v33 = 103;
        goto LABEL_55;
    }
  }
  if (v4 >= 2)
  {
    if (v4 == 32)
    {
      sub_22F024D28(*a1, *(_QWORD *)(a2 + 16));
      return sub_22F01E534(a1, *(_QWORD *)(a2 + 24));
    }
    sub_22F072CEC(*a1, a2, 103, 0);
    return 0;
  }
  else
  {
    v221 = 0;
    v222 = 0;
    v223 = 0;
    LODWORD(v224) = v224 | 1;
    v227 = 0;
    v228 = v230;
    v229 = 0x800000000;
    *(_QWORD *)&v235[28] = 0;
    v236 = 0;
    if (sub_22F0247C4((_BYTE **)*a1, a2, (uint64_t)&v221, 1u))
    {
      LODWORD(v206) = 0;
      v6 = sub_22F0248D4((uint64_t *)*a1, a2, *(_QWORD *)(a2 + 8), (uint64_t)&v221, (uint64_t)&v206, 0);
      if ((_DWORD)v6)
        sub_22F024188((const llvm::detail::IEEEFloat *)a1[1], (uint64_t)&v206);
      if (v206 >= 2)
        sub_22EF53BC0(&v206);
    }
    else
    {
      v6 = 0;
    }
    if (v228 != v230)
      free(v228);
  }
  return v6;
}

unint64_t sub_22F0231F8(uint64_t *a1, unsigned int *a2)
{
  _BYTE *v4;
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 **v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unsigned __int8 **v29;
  unint64_t v30;
  BOOL v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _BYTE **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  _BYTE **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL8 v58;
  char v59;
  uint64_t *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned __int8 *v63;
  _QWORD *v64;
  int v65;
  int v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t *v86;
  uint64_t v87[9];
  uint64_t v88;
  void **v89;
  int v90[2];
  int v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  _QWORD v95[11];
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  _BYTE v103[64];
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  _BYTE v113[64];
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  if (sub_22EFFA8F0((uint64_t)a2) == 346)
  {
    v4 = (_BYTE *)a1[1];
    *v4 = 0;
    v5 = *(unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24));
    v106 = *a1;
    v107 = v4 + 40;
    LOBYTE(v6) = 0;
    if (sub_22F032714(&v106, v5))
    {
      v7 = *(unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24));
      v8 = a1[1] + 72;
      v106 = *a1;
      v107 = (_BYTE *)v8;
      LOBYTE(v6) = sub_22F032714(&v106, v7);
    }
    return v6 & 1;
  }
  LODWORD(v87[0]) = 0;
  v9 = *a1;
  v10 = *(_DWORD *)(*a1 + 216);
  sub_22F0270D4(*(_DWORD **)(*a1 + 24));
  v11 = *a2;
  v12 = (unsigned __int8 **)((char *)a2 + (v11 >> 24));
  v13 = *v12;
  if (*v12)
  {
    while (1)
    {
      v14 = v13;
      v15 = *v13;
      if (v15 > 213)
      {
        if (v15 == 233)
        {
          if ((*(_DWORD *)v14 & 0x7C0000) != 0x300000)
            goto LABEL_22;
          v17 = v14 + 16;
        }
        else
        {
          if (v15 != 214)
            goto LABEL_22;
          v17 = v14 + 24;
        }
      }
      else if (v15 == 155)
      {
        if ((**((_DWORD **)v14 + 2) & 0x18000) != 0)
          goto LABEL_22;
        if (v14[48])
          v17 = v14 + 24;
        else
          v17 = v14 + 32;
      }
      else
      {
        if (v15 != 176)
          goto LABEL_22;
        v16 = *((unsigned int *)v14 + 5);
        if ((_DWORD)v16 == -1)
          goto LABEL_22;
        v17 = &v14[8 * v16 + 40];
      }
      v13 = *(unsigned __int8 **)v17;
      if (v13 == v14)
        goto LABEL_22;
    }
  }
  v14 = 0;
LABEL_22:
  v18 = *((_QWORD *)v14 + 1);
  v106 = 0;
  v107 = 0;
  v108 = 0;
  LODWORD(v109) = -1;
  v110 = 0;
  v111 = v113;
  v112 = 0x800000000;
  v19 = &v12[((v11 >> 18) & 1) + 1];
  v115 = 0;
  v114 = 0;
  v20 = a2[4];
  v21 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v23)
    v24 = (*(_DWORD *)(v23 + 16) & 0xFF800FF) == 136839179;
  else
    v24 = 0;
  if (!v24)
  {
    if ((*(_BYTE *)(v22 + 16) == 39 || *(_DWORD *)(v23 + 16) == 39 && (v22 = sub_22F10CF48(v22)) != 0)
      && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 25 <= 1)
    {
      v96 = 0;
      v97 = 0;
      v98 = 0;
      LODWORD(v99) = v99 | 1;
      v100 = 0;
      v101 = v103;
      v102 = 0x800000000;
      v104 = 0;
      v105 = 0;
      v88 = *a1;
      v89 = &v96;
      LOBYTE(v90[0]) = 0;
      v85 = v10;
      if (sub_22F00C45C(&v88, v14))
      {
        if (!v98 && (v96 & 3) == 0)
        {
          v26 = (unint64_t)v96 & 0xFFFFFFFFFFFFFFFCLL;
          if (((unint64_t)v96 & 0xFFFFFFFFFFFFFFFCLL) != 0 && (*(_DWORD *)(v26 + 28) & 0x7Eu) - 52 < 6)
          {
            v50 = *(_QWORD *)(*a1 + 8);
            v51 = sub_22F10ACF8(*v21);
            if (sub_22EF5F5D4(v50, v51, *(_QWORD *)(v26 + 48)))
            {
              v52 = *(unsigned __int8 *)a2;
              if (v52 != 141)
              {
                v83 = 0;
                v6 = 0;
                goto LABEL_134;
              }
              v53 = a2[1] & 0x3F;
              if (v53 - 18 >= 8)
              {
                v6 = 0;
                v83 = 0;
                if (v53 > 0x1D || ((1 << v53) & 0x30008000) == 0)
                  goto LABEL_134;
              }
              v54 = (_BYTE **)*a1;
              v55 = *(_QWORD *)(*a1 + 24);
              v56 = *(unsigned int *)(v55 + 92);
              v57 = (*(_DWORD *)(v55 + 120) + 1);
              *(_DWORD *)(v55 + 120) = v57;
              v6 = v56 | (v57 << 32);
              v58 = (*(_DWORD *)(v26 + 28) & 0x7Eu) - 54 < 4;
              if (sub_22F0279B4((uint64_t)&v19[v58], v20 - v58, v26, v6, v54, v26, 1))
              {
                v83 = v26;
LABEL_134:
                v84 = v6;
                if ((*(_DWORD *)(v26 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
                  goto LABEL_205;
                if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v26 + 32))(v26) + 80) & 0xE000) != 0x4000
                  && ((*(_QWORD *)(v26 + 40) & 7) != 6
                   || (*(_DWORD *)(*(_QWORD *)(v26 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
                {
                  v73 = *a1;
                  if ((_DWORD)v20)
                  {
                    if (sub_22F0098FC(v73, *v19, &v106))
                    {
                      v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 96))(*a1);
                      if (v52 == 141
                        && (**(_QWORD **)(v74 + 2000) & 0x1000) != 0
                        && (*(_QWORD *)a2 & 0x3F00000000) == 0xF00000000
                        && (*(_BYTE *)(v26 + 82) & 0x80) != 0)
                      {
                        v86 = &v106;
                        if (!sub_22F013A2C((uint64_t *)*a1, *v19, (uint64_t)&v106))
                        {
                          v27 = 0;
                          goto LABEL_163;
                        }
                      }
                      --v20;
                      ++v19;
                      v86 = &v106;
                      goto LABEL_158;
                    }
                  }
                  else
                  {
                    sub_22F072CEC(v73, (uint64_t)a2, 103, 0);
                    v20 = 0;
                  }
LABEL_162:
                  v27 = 0;
                  v86 = 0;
LABEL_163:
                  LOBYTE(v6) = 0;
                  goto LABEL_192;
                }
                if (!sub_22EFD799C(v26))
                {
LABEL_205:
                  if (sub_22EFBFDCC(v26, 0, 0))
                  {
                    if ((*(_QWORD *)(v26 + 40) & 7) == 6
                      && (*(_DWORD *)(*(_QWORD *)(v26 + 40) & 0xFFFFFFFFFFFFFFF8) | 2) == 3)
                    {
                      v88 = 0;
                      v89 = 0;
                      *(_QWORD *)v90 = 0;
                      v91 |= 1u;
                      v92 = 0;
                      v93 = v95;
                      v94 = 0x800000000;
                      v95[8] = 0;
                      v95[9] = 0;
                      if (sub_22F027C94(*a1, a2, (uint64_t)&v88))
                      {
                        sub_22F00676C((uint64_t)&v88, (uint64_t)v87);
                        LOBYTE(v6) = sub_22F02D738(v9, 1, v10);
                        v10 = -1;
                      }
                      else
                      {
                        LOBYTE(v6) = 0;
                      }
                      if (v93 != v95)
                        free(v93);
                      v85 = v10;
                      v27 = 0;
                      v86 = 0;
                      goto LABEL_192;
                    }
                    if (sub_22F02836C(*a1, a2))
                    {
                      LOBYTE(v6) = sub_22F02D738(v9, 1, v10);
                      v27 = 0;
                      v86 = 0;
                      v85 = -1;
                      goto LABEL_192;
                    }
                    goto LABEL_162;
                  }
                  v86 = 0;
LABEL_158:
                  v27 = 1;
LABEL_192:
                  v25 = v83;
                  goto LABEL_33;
                }
                v71 = *(_WORD *)(v26 + 80) & 0x7F;
                v72 = -40;
                if (v71 > 0x46)
                {
                  switch(v71)
                  {
                    case 'S':
                      goto LABEL_181;
                    case 'G':
                      v72 = -56;
                      goto LABEL_181;
                    case 'Q':
                      goto LABEL_181;
                  }
                }
                else
                {
                  if (v71 <= 0x18)
                  {
                    if (v71 == 16)
                      goto LABEL_147;
                    if (((1 << v71) & 0x1066) != 0)
                      goto LABEL_181;
                    if (v71 == 24)
                    {
LABEL_147:
                      v72 = -48;
LABEL_181:
                      v75 = *(_QWORD *)(v26 + 72 + v72 + 16);
                      v76 = (_QWORD *)(v75 & 0xFFFFFFFFFFFFFFF8);
                      if ((v75 & 4) != 0)
                        v76 = (_QWORD *)*v76;
                      if (v76)
                        v6 = (unint64_t)(v76 - 8);
                      else
                        v6 = 0;
                      v77 = sub_22EFD462C(v6);
                      if (v77 && (*(_DWORD *)(v77 + 28) & 0x7F) == 0x1D)
                        v77 = *(_QWORD *)(v77 + 48);
                      v78 = *(_QWORD *)(v6 + 128);
                      if (v78
                        && ((*(unsigned __int16 *)(v78 + 8) | (*(unsigned __int8 *)(v78 + 10) << 16)) & 0x100000) != 0)
                      {
                        if ((*(_BYTE *)(v78 + 104) & 4) != 0)
                        {
                          v79 = *(_QWORD *)((*(_QWORD *)(v26 + 144) & 0xFFFFFFFFFFFFFFF8) + 24);
                          v80 = *(_QWORD *)(v77 + 144);
                          if ((v80 & 6) != 0)
                            v81 = 0;
                          else
                            v81 = v80 & 0xFFFFFFFFFFFFFFF8;
                          v88 = 0;
                          v26 = sub_22EFE9880(v81, *(_QWORD *)v79, *(unsigned int *)(v79 + 8), (uint64_t)&v88);
                          v86 = 0;
                          v27 = 1;
                        }
                        else
                        {
                          v86 = 0;
                          v27 = 1;
                          v26 = v77;
                        }
                        v25 = v83;
                        goto LABEL_33;
                      }
                      v86 = 0;
                      v27 = 1;
                      v26 = v77;
                      goto LABEL_192;
                    }
                  }
                  if (v71 == 70)
                  {
LABEL_179:
                    v72 = -64;
                    goto LABEL_181;
                  }
                }
                if (v71 - 52 < 6)
                {
                  v72 = -72;
                  goto LABEL_181;
                }
                if (v71 - 33 < 5)
                  goto LABEL_179;
                goto LABEL_147;
              }
              v84 = v6;
              v27 = 0;
              v86 = 0;
              LOBYTE(v6) = 0;
              v25 = v26;
LABEL_33:
              if (v101 != v103)
              {
                v28 = v20;
                v29 = v19;
                v30 = v25;
                free(v101);
                v25 = v30;
                v19 = v29;
                v20 = v28;
              }
              if ((v27 & 1) == 0)
              {
                v10 = v85;
                goto LABEL_61;
              }
              v31 = 0;
              v10 = v85;
              if (v25)
                goto LABEL_74;
              goto LABEL_73;
            }
            sub_22F072CEC(*a1, (uint64_t)a2, 103, 0);
            v25 = 0;
            v84 = 0;
LABEL_32:
            v27 = 0;
            v86 = 0;
            LOBYTE(v6) = 0;
            goto LABEL_33;
          }
        }
        sub_22F072CEC(*a1, (uint64_t)v14, 103, 0);
      }
      v25 = 0;
      v84 = 0;
      v26 = 0;
      goto LABEL_32;
    }
    v34 = *a1;
    v35 = (uint64_t)a2;
    goto LABEL_59;
  }
  v32 = *v14;
  if (v32 != 188)
  {
    if ((v32 & 0xFE) != 0x70)
    {
      v34 = *a1;
      if (v32 == 129)
      {
        if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 96))(v34) + 2000) + 1) & 0x10) == 0)
        {
          v36 = *a1;
          sub_22EFF605C((uint64_t)v14);
          sub_22F072D74(v36, v37, 2266, 0);
        }
        if (sub_22F0098FC(*a1, *((_QWORD *)v14 + 2), &v106))
        {
          v38 = 0;
          v39 = *((_QWORD *)v14 + 8);
          if ((v39 & 1) == 0)
          {
            v40 = (uint64_t *)(v39 & 0xFFFFFFFFFFFFFFFELL);
            if (v40)
              v38 = *v40;
          }
          LOBYTE(v6) = sub_22F027138((uint64_t *)*a1, (uint64_t)v14, (uint64_t)&v106, v38);
          goto LABEL_61;
        }
        goto LABEL_60;
      }
      goto LABEL_58;
    }
    v33 = sub_22F0247C4((_BYTE **)*a1, (uint64_t)v14, (uint64_t)&v106, 0);
    if (v33)
    {
      v26 = v33;
      if ((*(_DWORD *)(v33 + 28) & 0x7Eu) - 58 > 0xFFFFFFFB)
        goto LABEL_71;
      goto LABEL_47;
    }
LABEL_60:
    LOBYTE(v6) = 0;
    goto LABEL_61;
  }
  if (!sub_22F0098FC(*a1, *((_QWORD *)v14 + 2), &v106))
    goto LABEL_60;
  v26 = *((_QWORD *)v14 + 3);
  if (!v26 || (*(_DWORD *)(v26 + 28) & 0x7Eu) - 58 <= 0xFFFFFFFB)
  {
LABEL_47:
    v34 = *a1;
LABEL_58:
    v35 = (uint64_t)v14;
LABEL_59:
    sub_22F072CEC(v34, v35, 103, 0);
    goto LABEL_60;
  }
  if ((v14[2] & 8) == 0)
  {
LABEL_71:
    v31 = 0;
    goto LABEL_72;
  }
  v31 = *((_QWORD *)v14 + 6) != 0;
LABEL_72:
  v86 = &v106;
LABEL_73:
  v42 = (_BYTE **)*a1;
  v43 = *(_QWORD *)(*a1 + 24);
  v44 = *(unsigned int *)(v43 + 92);
  v45 = (*(_DWORD *)(v43 + 120) + 1);
  *(_DWORD *)(v43 + 120) = v45;
  v84 = v44 | (v45 << 32);
  v46 = sub_22F0279B4((uint64_t)v19, v20, v26, v84, v42, v26, 0);
  LOBYTE(v6) = 0;
  v25 = v26;
  if (v46)
  {
LABEL_74:
    v82 = v25;
    v96 = &v98;
    v97 = 0x400000000;
    if (!v86)
    {
LABEL_101:
      if (v26 && (*(_DWORD *)(v26 + 28) & 0x7F) == 0x39)
      {
        v60 = (uint64_t *)*a1;
        v61 = *(_WORD *)(v26 + 80) & 0x7F;
        v62 = -40;
        if (v61 > 0x46)
        {
          switch(v61)
          {
            case 'S':
              goto LABEL_124;
            case 'G':
              v62 = -56;
              goto LABEL_124;
            case 'Q':
LABEL_124:
              v67 = *(_QWORD *)(v26 + 72 + v62 + 16);
              v68 = (_QWORD *)(v67 & 0xFFFFFFFFFFFFFFF8);
              if ((v67 & 4) != 0)
                v68 = (_QWORD *)*v68;
              if (v68)
                v69 = (uint64_t)(v68 - 8);
              else
                v69 = 0;
              v70 = sub_22EF6477C(*(_QWORD *)(*a1 + 8), v69);
              if (!sub_22F027138(v60, (uint64_t)a2, (uint64_t)v86, v70))
                goto LABEL_111;
LABEL_130:
              LOBYTE(v6) = sub_22F02D738(v9, 1, v10);
              v10 = -1;
LABEL_131:
              if (v96 != &v98)
                free(v96);
              goto LABEL_61;
          }
        }
        else
        {
          if (v61 <= 0x18)
          {
            if (v61 == 16)
            {
LABEL_106:
              v62 = -48;
              goto LABEL_124;
            }
            if (((1 << v61) & 0x1066) != 0)
              goto LABEL_124;
            if (v61 == 24)
              goto LABEL_106;
          }
          if (v61 == 70)
          {
LABEL_122:
            v62 = -64;
            goto LABEL_124;
          }
        }
        if (v61 - 52 >= 6)
        {
          if (v61 - 33 >= 5)
            goto LABEL_106;
          goto LABEL_122;
        }
        v62 = -72;
        goto LABEL_124;
      }
      v88 = 0;
      v63 = (unsigned __int8 *)sub_22EFBF910(v26, &v88);
      v64 = (_QWORD *)*a1;
      sub_22EFF605C((uint64_t)a2);
      if (sub_22F028A44(v64, v65, (_QWORD *)v26, v88, (uint64_t)v63))
      {
        sub_22EFF605C((uint64_t)a2);
        if (sub_22F00B12C(v66, v88, (uint64_t)v86, (uint64_t *)v19, v20, v82, v84, v63, (uint64_t *)*a1, (uint64_t)v87, 0)&& (!(_DWORD)v97 || sub_22F028DA0(*a1, (uint64_t)a2, (uint64_t)v87, v96, v97)))
        {
          goto LABEL_130;
        }
      }
LABEL_111:
      LOBYTE(v6) = 0;
      goto LABEL_131;
    }
    if ((*(_DWORD *)(v26 + 28) & 0x7Eu) - 54 >= 4)
      v47 = 0;
    else
      v47 = (_DWORD *)v26;
    if (v47)
    {
      v48 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v47 + 32))(v47);
      if ((*(_BYTE *)(v48 + 82) & 0xC) != 0)
      {
        if (v31)
          goto LABEL_81;
LABEL_100:
        v26 = sub_22F028540(*a1, (uint64_t)a2, (uint64_t)v86, (uint64_t)v47, (uint64_t)&v96);
        if (!v26)
          goto LABEL_111;
        goto LABEL_101;
      }
      if (sub_22EFD7260(v48))
        v59 = v31;
      else
        v59 = 1;
      if ((v59 & 1) == 0)
        goto LABEL_100;
    }
LABEL_81:
    if ((v47[7] & 0x7F) == 0x39)
      v49 = 9;
    else
      v49 = 5;
    if (!sub_22F02E038((uint64_t *)*a1, (uint64_t)a2, (uint64_t)v86, v49, 0))
      goto LABEL_111;
    goto LABEL_101;
  }
LABEL_61:
  if (v111 != v113)
    free(v111);
  if (v10 != -1)
    sub_22F02D738(v9, 0, v10);
  --*(_DWORD *)(*(_QWORD *)(v9 + 24) + 104);
  if ((v6 & 1) != 0)
    sub_22F024188((const llvm::detail::IEEEFloat *)a1[1], (uint64_t)v87);
  if (LODWORD(v87[0]) >= 2)
    sub_22EF53BC0(v87);
  return v6 & 1;
}

uint64_t sub_22F023E6C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  _BYTE *v5;
  llvm::detail::DoubleAPFloat *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::detail::DoubleAPFloat *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::detail::DoubleAPFloat *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::APInt *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;

  result = sub_22F01E534(a1, *(_QWORD *)(a2 + 16));
  if ((_DWORD)result)
  {
    result = 1;
    switch((*(_DWORD *)a2 >> 18) & 0x1F)
    {
      case 6:
      case 0xC:
        return result;
      case 7:
        v5 = (_BYTE *)a1[1];
        if (*v5)
        {
          sub_22F311024((llvm::APInt *)(v5 + 8), (uint64_t)&v20);
          v15 = a1[1];
          if (*(_DWORD *)(v15 + 16) >= 0x41u)
          {
            v16 = *(_QWORD *)(v15 + 8);
            if (v16)
              MEMORY[0x2348A0E84](v16, 0x1000C8000313F17);
          }
          *(_QWORD *)(v15 + 8) = v20;
          *(_DWORD *)(v15 + 16) = v21;
          *(_BYTE *)(v15 + 20) = v22;
          v17 = (llvm::APInt *)(a1[1] + 24);
          goto LABEL_20;
        }
        v7 = *((_QWORD *)v5 + 6);
        v6 = (llvm::detail::DoubleAPFloat *)(v5 + 48);
        v8 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)1);
        if (v8 == v7)
          llvm::detail::DoubleAPFloat::changeSign(v6);
        else
          llvm::detail::IEEEFloat::changeSign(v6);
        v9 = a1[1];
        v11 = *(_QWORD *)(v9 + 80);
        v10 = (llvm::detail::DoubleAPFloat *)(v9 + 80);
        if (v8 != v11)
          goto LABEL_11;
        goto LABEL_26;
      case 8:
        v12 = a1[1];
        if (*(_BYTE *)v12)
        {
          v17 = (llvm::APInt *)(v12 + 24);
LABEL_20:
          sub_22F311024(v17, (uint64_t)&v20);
          v18 = a1[1];
          if (*(_DWORD *)(v18 + 32) >= 0x41u)
          {
            v19 = *(_QWORD *)(v18 + 24);
            if (v19)
              MEMORY[0x2348A0E84](v19, 0x1000C8000313F17);
          }
          *(_QWORD *)(v18 + 24) = v20;
          *(_DWORD *)(v18 + 32) = v21;
          *(_BYTE *)(v18 + 36) = v22;
        }
        else
        {
          v14 = *(_QWORD *)(v12 + 80);
          v13 = (llvm::detail::DoubleAPFloat *)(v12 + 80);
          if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)1) == v14)
          {
            v10 = v13;
LABEL_26:
            llvm::detail::DoubleAPFloat::changeSign(v10);
          }
          else
          {
            v10 = v13;
LABEL_11:
            llvm::detail::IEEEFloat::changeSign(v10);
          }
        }
        result = 1;
        break;
      default:
        sub_22F072CEC(*a1, a2, 103, 0);
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t sub_22F024020(uint64_t *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[3];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28[2];
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;

  v37 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 96))(*a1) + 2000) + 1) & 4) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1) & 1) != 0)
  {
    memset(v22, 0, sizeof(v22));
    LODWORD(v23) = -1;
    v25 = 0;
    v26 = v28;
    v27 = 0x800000000;
    v34 = 0;
    v35 = 0;
    v10 = *(_QWORD *)(a2 + 16);
    v14 = *a1;
    LOBYTE(v15) = 0;
    v11 = 0;
    if (sub_22F010358((int)&v14, v10, v4, v5, v6, v7, v8, v9, v13, v14, (uint64_t)v22, v15, v16, v17, v18, v19, v20, v21, 0,
                         0,
                         0,
                         v23,
                         v24,
                         0,
                         (uint64_t)v28,
                         0x800000000,
                         v28[0],
                         v28[1],
                         v29,
                         v30,
                         v31,
                         v32,
                         v33,
                         0,
                         0,
                         v36,
                         v37,
                         v38,
                         v39))
    {
      LODWORD(v14) = 0;
      v11 = sub_22F01BB7C((uint64_t *)*a1, a2, (uint64_t)v22, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), (*(_DWORD *)a2 & 0x740000) == 0, &v14);
      if ((_DWORD)v11)
        sub_22F024188((const llvm::detail::IEEEFloat *)a1[1], (uint64_t)&v14);
      if (v14 >= 2)
        sub_22EF53BC0(&v14);
    }
    if (v26 != v28)
      free(v26);
  }
  else
  {
    sub_22F072CEC(*a1, a2, 103, 0);
    return 0;
  }
  return v11;
}

const llvm::detail::IEEEFloat *sub_22F024188(const llvm::detail::IEEEFloat *result, uint64_t a2)
{
  const llvm::detail::IEEEFloat *v3;

  v3 = result;
  if (*(_DWORD *)a2 == 6)
  {
    *(_BYTE *)result = 0;
    sub_22E54C3D4((const llvm::detail::IEEEFloat *)((char *)result + 48), (const llvm::detail::IEEEFloat *)(a2 + 16));
    return sub_22E54C3D4((const llvm::detail::IEEEFloat *)((char *)v3 + 80), (const llvm::detail::IEEEFloat *)(a2 + 48));
  }
  else
  {
    *(_BYTE *)result = 1;
    if (*((_DWORD *)result + 4) > 0x40u || *(_DWORD *)(a2 + 16) > 0x40u)
    {
      result = (const llvm::detail::IEEEFloat *)llvm::APInt::assignSlowCase((const llvm::detail::IEEEFloat *)((char *)result + 8), (const llvm::APInt *)(a2 + 8));
    }
    else
    {
      *((_QWORD *)result + 1) = *(_QWORD *)(a2 + 8);
      *((_DWORD *)result + 4) = *(_DWORD *)(a2 + 16);
    }
    *((_BYTE *)v3 + 20) = *(_BYTE *)(a2 + 20);
    if (*((_DWORD *)v3 + 8) > 0x40u || *(_DWORD *)(a2 + 32) > 0x40u)
    {
      result = (const llvm::detail::IEEEFloat *)llvm::APInt::assignSlowCase((const llvm::detail::IEEEFloat *)((char *)v3 + 24), (const llvm::APInt *)(a2 + 24));
    }
    else
    {
      *((_QWORD *)v3 + 3) = *(_QWORD *)(a2 + 24);
      *((_DWORD *)v3 + 8) = *(_DWORD *)(a2 + 32);
    }
    *((_BYTE *)v3 + 36) = *(_BYTE *)(a2 + 36);
  }
  return result;
}

unint64_t sub_22F024260(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;

  v7 = a2 & 0xFFFFFFFFFFFFFFFCLL | 1;
  v8 = *(unsigned int *)(a1 + 92) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 96)
                                                                       + 4 * *(unsigned int *)(a1 + 104)
                                                                       - 4) << 32);
  sub_22F006C3C(a4, v7, v8, 0);
  return sub_22F0242E0(a1, v7, v8, a2, a3, 1u);
}

unint64_t sub_22F0242E0(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unsigned int a6)
{
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  _OWORD *v27;
  __int128 v28;
  uint64_t v29;
  BOOL v31;
  char *v32;
  _QWORD v33[4];

  v12 = HIDWORD(a3);
  if ((~(_BYTE)a2 & 3) == 0)
    LODWORD(v12) = 0;
  if ((a2 & 3) == 2)
    v13 = 0;
  else
    v13 = v12;
  v15 = (uint64_t **)(a1 + 72);
  v14 = *(uint64_t **)(a1 + 72);
  if (!v14)
  {
    v16 = (uint64_t **)(a1 + 72);
    goto LABEL_16;
  }
  do
  {
    while (1)
    {
      v16 = (uint64_t **)v14;
      v17 = v14[4];
      if (v17 <= a4)
        break;
LABEL_10:
      v14 = *v16;
      v15 = v16;
      if (!*v16)
        goto LABEL_16;
    }
    if (v17 >= a4)
    {
      v18 = *((_DWORD *)v16 + 10);
      if (v18 > v13)
        goto LABEL_10;
      if (v18 >= v13)
        goto LABEL_19;
    }
    v14 = v16[1];
  }
  while (v14);
  v15 = v16 + 1;
LABEL_16:
  v19 = (uint64_t *)v16;
  v16 = (uint64_t **)operator new(0x78uLL);
  v16[4] = (uint64_t *)a4;
  *((_DWORD *)v16 + 10) = v13;
  *((_DWORD *)v16 + 12) = 0;
  *v16 = 0;
  v16[1] = 0;
  v16[2] = v19;
  *v15 = (uint64_t *)v16;
  v20 = **(_QWORD **)(a1 + 64);
  v21 = (uint64_t *)v16;
  if (v20)
  {
    *(_QWORD *)(a1 + 64) = v20;
    v21 = *v15;
  }
  sub_22E49FD00(*(uint64_t **)(a1 + 72), v21);
  ++*(_QWORD *)(a1 + 80);
LABEL_19:
  v22 = (unint64_t)(v16 + 6);
  v23 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 92) <= *(_DWORD *)(v23 + 820))
  {
    if (sub_22F115260(a5))
    {
      v29 = *(_QWORD *)(a1 + 8);
      **(_BYTE **)(v29 + 16) = 1;
      if (*(_DWORD *)(v29 + 840) != 3 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29) & 1) == 0)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
    }
  }
  else
  {
    v24 = *(_QWORD *)(v23 + 208);
    v33[0] = v22 & 0xFFFFFFFFFFFFFFF9 | (2 * a6);
    v33[1] = a2;
    v33[2] = a3;
    v33[3] = a5;
    v25 = *(unsigned int *)(v23 + 216);
    v26 = (char *)v33;
    if (v25 >= *(_DWORD *)(v23 + 220))
    {
      v31 = v24 + 32 * v25 > (unint64_t)v33;
      if (v24 <= (unint64_t)v33 && v31)
      {
        v32 = (char *)v33 - v24;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v24 = *(_QWORD *)(v23 + 208);
        v26 = &v32[v24];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v24 = *(_QWORD *)(v23 + 208);
        v26 = (char *)v33;
      }
    }
    v27 = (_OWORD *)(v24 + 32 * *(unsigned int *)(v23 + 216));
    v28 = *((_OWORD *)v26 + 1);
    *v27 = *(_OWORD *)v26;
    v27[1] = v28;
    ++*(_DWORD *)(v23 + 216);
  }
  return v22;
}

uint64_t sub_22F024504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6[10];

  v6[9] = *MEMORY[0x24BDAC8D0];
  LODWORD(v6[0]) = 0;
  v3 = 0;
  if (sub_22F009DC4(v6, a3, a1))
  {
    sub_22F0053B0((uint64_t)v6);
    v3 = v4;
  }
  if (LODWORD(v6[0]) >= 2)
    sub_22EF53BC0(v6);
  return v3;
}

uint64_t sub_22F02459C(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a1 + 9))
    {
      v2 = *(_QWORD *)(*(_QWORD *)a1 + 16);
      v3 = *(uint64_t **)(v2 + 8);
      v4 = *((unsigned int *)v3 + 2);
      if ((_DWORD)v4)
      {
        if (!*(_BYTE *)v2)
        {
          v5 = *v3;
          v6 = 32 * v4;
          do
          {
            v7 = v5 + v6;
            v8 = *(_QWORD *)(v5 + v6 - 24);
            if (v8)
            {
              v9 = *(_QWORD *)(v7 - 16);
              if (v9)
              {
                sub_22E3BB10C(v9, v8);
                *(_QWORD *)(v7 - 24) = 0;
              }
            }
            v6 -= 32;
          }
          while (v6);
          *((_DWORD *)v3 + 2) = 0;
        }
      }
    }
  }
  *(_DWORD *)(*(_QWORD *)a1 + 840) = *(_DWORD *)(a1 + 12);
  return a1;
}

void sub_22F024634(llvm::APFloatBase *a1, uint64_t a2)
{
  const llvm::detail::IEEEFloat *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE v10[24];
  _BYTE v11[24];

  v3 = (const llvm::detail::IEEEFloat *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v4)
  {
    llvm::detail::scalbn();
    sub_22F3C4C24((uint64_t)a1);
    if (v8)
    {
      v6 = *(_QWORD *)(v8 - 8);
      if (v6)
      {
        v7 = 32 * v6;
        do
        {
          if (v4 == *(_QWORD *)(v8 + v7 - 24))
            sub_22E463170((llvm::APFloatBase *)(v8 + v7 - 16));
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)(v8 + v7 - 24));
          v7 -= 32;
        }
        while (v7);
      }
      MEMORY[0x2348A0E84](v8 - 16, 0x1072C801E5F02E8);
    }
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v9, v3);
    llvm::detail::scalbn();
    v5 = *(_QWORD *)v3;
    llvm::detail::IEEEFloat::IEEEFloat();
    MEMORY[0x23489F4E0]((char *)a1 + 8, v11, v5);
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v11);
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v10);
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v9);
  }
}

uint64_t sub_22F024760@<X0>(llvm::APInt *a1@<X0>, const llvm::APInt *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  if (*((_BYTE *)a1 + 12))
  {
    v4 = (uint64_t *)&v9;
    result = llvm::APInt::udiv(a1, a2);
    v6 = 1;
  }
  else
  {
    v4 = &v8;
    result = llvm::APInt::sdiv(a1, a2);
    v6 = 0;
  }
  v7 = *v4;
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v4 + 2);
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 12) = v6;
  return result;
}

unint64_t sub_22F0247C4(_BYTE **a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v9;
  unsigned __int8 *v10;
  uint64_t v11[2];
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  if ((sub_22F0098FC(a1, *(_QWORD *)(a2 + 16), a3) & 1) != 0)
    return sub_22F024DE8((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), a3, *(unsigned __int8 **)(a2 + 24), a4);
  v9 = (*((uint64_t (**)(_BYTE **))*a1 + 5))(a1);
  *a1[2] |= v9;
  if (v9)
  {
    v12 = 0;
    v13 = v15;
    v14 = 0x400000000;
    v10 = *(unsigned __int8 **)(a2 + 24);
    v11[0] = (uint64_t)a1;
    v11[1] = (uint64_t)&v12;
    sub_22F025158((uint64_t)v11, v10);
    if (v13 != v15)
      free(v13);
  }
  return 0;
}

uint64_t sub_22F0248D4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  unsigned int v6;
  unsigned int *v7;
  unsigned __int8 *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BOOL4 v19;
  unint64_t *v20;
  unsigned __int8 **v22;
  unsigned __int8 **v23;
  unsigned __int8 *v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  BOOL v33;
  int v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _QWORD *v41;
  unsigned int v42;
  BOOL v43;
  __int128 v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47[3];
  unint64_t v48;
  uint64_t v49[3];
  unsigned int v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v7 = (unsigned int *)(a4 + 24);
  v6 = *(_DWORD *)(a4 + 24);
  if ((v6 & 1) != 0)
    return 0;
  v13 = (unsigned __int8 *)(*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFFCLL);
  v14 = (*(_QWORD *)a4 & 3) != 1 || v13 == 0;
  if (v14
    || (~*(_QWORD *)a4 & 3) != 0 && *(_DWORD *)(a4 + 8)
    || (a3 & 4) != 0
    || (*(_BYTE *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0)
  {
    goto LABEL_17;
  }
  v15 = *v13;
  if (v15 != 225 && v15 != 216)
  {
    if (v15 == 156)
    {
      LODWORD(v49[0]) = 0;
      v16 = 0;
      if (sub_22F009DC4(v49, a1, *((_QWORD *)v13 + 4)))
      {
        v17 = *((_QWORD *)v13 + 1);
        v44 = *(_OWORD *)a4;
        v45 = v49;
        v46 = v17;
        v47[0] = (uint64_t)a1;
        v47[1] = a2;
        v47[2] = a5;
        LODWORD(v48) = a6;
        v16 = sub_22F0313F0((uint64_t)a1, a2, (unint64_t *)&v44, v7, v47);
      }
      if (LODWORD(v49[0]) >= 2)
        sub_22EF53BC0(v49);
      return v16;
    }
LABEL_17:
    sub_22F015608((unint64_t *)v47, (uint64_t)a1, a2, a6, a4, a3);
    if (v48 >= 0x10)
    {
      v49[0] = (uint64_t)a1;
      v49[1] = a2;
      v49[2] = a5;
      v50 = a6;
      return sub_22F0313F0((uint64_t)a1, a2, (unint64_t *)v47, v7, v49);
    }
    return 0;
  }
  v18 = *(_DWORD *)(a4 + 56);
  if (!v18)
  {
LABEL_25:
    sub_22F072CEC((uint64_t)a1, a2, 103, 0);
    return 0;
  }
  if ((v6 & 2) != 0
    || (v19 = v18 == 1, v20 = *(unint64_t **)(a4 + 48), (v6 & 8) != 0)
    && (v19 & (v6 >> 2) & 1) == 0
    && v20[(v6 >> 4) - 1] == *(_QWORD *)(a4 + 32))
  {
    if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a1 + 96))(a1) + 2000) + 1) & 2) == 0)
      goto LABEL_25;
    v22 = (unsigned __int8 **)sub_22F072CEC((uint64_t)a1, a2, 2172, 0);
    if (!v22)
      return 0;
    v23 = v22;
    v24 = *v22;
    if (!v24)
    {
      v24 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v23[1]);
      *v23 = v24;
    }
    v16 = 0;
    v24[*v24 + 1] = 2;
    v25 = *v23;
    v26 = **v23;
    *v25 = v26 + 1;
    *(_QWORD *)&v25[8 * v26 + 16] = a6;
  }
  else
  {
    if (v15 == 216)
    {
      if ((v13[2] & 0x40) != 0)
        v13 = (unsigned __int8 *)*((_QWORD *)v13 + 2);
      else
        v13 = 0;
    }
    v27 = *v20;
    v28 = sub_22EF5C728(a1[1], *((_QWORD *)v13 + 1));
    if (*(_BYTE *)(v28 + 16) == 2)
      v29 = v28;
    else
      v29 = 0;
    v30 = *(_QWORD *)(v29 + 32);
    v31 = (*(_DWORD *)v13 >> 21) & 7;
    v32 = v31 * sub_22EF5CDF0(a1[1], *(_QWORD *)(*(_QWORD *)(a1[1] + 16408) & 0xFFFFFFFFFFFFFFF0));
    v33 = sub_22F110B50(*(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0));
    v42 = v32;
    if (v32 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v41);
    else
      v41 = 0;
    v43 = v33;
    if (v27 >= *((unsigned int *)v13 + 4))
    {
      v36 = v41;
    }
    else
    {
      v34 = (*(_DWORD *)v13 >> 21) & 7;
      if (v34 == 4)
      {
        v35 = *(_DWORD *)&v13[4 * *((unsigned int *)v13 + 1) + 20 + 4 * v27];
      }
      else if (v34 == 2)
      {
        v35 = *(unsigned __int16 *)&v13[4 * *((unsigned int *)v13 + 1) + 20 + 2 * v27];
      }
      else
      {
        v35 = v13[4 * *((unsigned int *)v13 + 1) + 20 + v27];
      }
      v37 = v42;
      if (v42 > 0x40)
      {
        *v41 = v35;
        v36 = v41;
        bzero(v41 + 1, (((unint64_t)(v37 + 63) >> 3) - 8) & 0xFFFFFFF8);
        v33 = v43;
      }
      else
      {
        if (v42)
          v38 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v42;
        else
          LODWORD(v38) = 0;
        v36 = (_QWORD *)(v38 & v35);
        v41 = v36;
      }
    }
    v39 = v42;
    v42 = 0;
    if (*(_DWORD *)a5 > 1u)
    {
      sub_22EF53BC0((uint64_t *)a5);
      v40 = v42;
      *(_DWORD *)a5 = 2;
      *(_QWORD *)(a5 + 8) = v36;
      *(_DWORD *)(a5 + 16) = v39;
      *(_BYTE *)(a5 + 20) = v33;
      if (v40 >= 0x41 && v41)
        MEMORY[0x2348A0E84](v41, 0x1000C8000313F17);
    }
    else
    {
      *(_DWORD *)a5 = 2;
      *(_QWORD *)(a5 + 8) = v36;
      *(_DWORD *)(a5 + 16) = v39;
      *(_BYTE *)(a5 + 20) = v33;
    }
    return 1;
  }
  return v16;
}

uint64_t sub_22F024D28(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5[10];

  v5[9] = *MEMORY[0x24BDAC8D0];
  LODWORD(v5[0]) = 0;
  v3 = 1;
  if ((sub_22F009DC4(v5, a1, a2) & 1) == 0)
  {
    **(_BYTE **)(a1 + 16) = 1;
    if (*(_DWORD *)(a1 + 840) != 3 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 1) == 0)
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  }
  if (LODWORD(v5[0]) >= 2)
    sub_22EF53BC0(v5);
  return v3;
}

unint64_t sub_22F024DE8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned int a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38[2];
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[32];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v40 = v42;
  v41 = 0x400000000;
  v38[0] = a1;
  v38[1] = (uint64_t)&v39;
  v10 = 0;
  if (!sub_22F025158((uint64_t)v38, a4))
    goto LABEL_17;
  v11 = v39;
  if ((unint64_t)v39 <= 7)
    goto LABEL_15;
  if ((v39 & 4) == 0)
  {
    if (!(_DWORD)v41)
      goto LABEL_49;
    if (v41 + (unint64_t)a5 + *(unsigned int *)(a3 + 56) > *(unsigned int *)(a3 + 60))
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
    v13 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    if (v13 && *(_BYTE *)(v13 + 16) == 39
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
      && (v13 = sub_22F10CF48(v13)) != 0)
    {
      v12 = (uint64_t *)(*(_QWORD *)(v13 + 32) & 0xFFFFFFFFFFFFFFF0);
    }
    v14 = sub_22F10C2A4(*v12);
    if (v14)
    {
      if ((*(_DWORD *)(v14 + 28) & 0x7Fu) - 35 >= 3)
        v15 = 0;
      else
        v15 = v14;
    }
    else
    {
      v15 = 0;
    }
    if ((_DWORD)v41 != 1)
    {
      v28 = v41 - 2;
      while (1)
      {
        v27 = *((_QWORD *)v40 + v28);
        if ((sub_22F02BA20(a1, (uint64_t)a4, a3, v15, v27, 0) & 1) == 0)
          goto LABEL_16;
        --v28;
        v15 = v27;
        if (v28 == -1)
          goto LABEL_43;
      }
    }
    v27 = v15;
LABEL_43:
    v29 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFFF8) + 16);
    v30 = (_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF8);
    if ((v29 & 4) != 0)
      v30 = (_QWORD *)*v30;
    v31 = v30 ? (uint64_t)(v30 - 8) : 0;
    v10 = 0;
    if (sub_22F02BA20(a1, (uint64_t)a4, a3, v27, v31, 0))
      goto LABEL_49;
    goto LABEL_17;
  }
  v16 = v41;
  v17 = *(unsigned int *)(a3 + 56);
  if (v41 + ((unint64_t)*(unsigned int *)(a3 + 24) >> 4) > v17)
  {
LABEL_15:
    sub_22F072CEC(a1, (uint64_t)a4, 103, 0);
    goto LABEL_16;
  }
  if ((_DWORD)v41)
  {
    v37 = a5;
    v19 = 0;
    v20 = v17 - v41;
    while (1)
    {
      v21 = (*(_DWORD *)((*(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * (v20 + v19)) & 0xFFFFFFFFFFFFFFF8)
                       + 28) & 0x7Fu)
          - 35 >= 3
          ? 0
          : *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * (v20 + v19)) & 0xFFFFFFFFFFFFFFF8;
      v22 = *((_QWORD *)v40 + v19);
      v23 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 32))(v21);
      if (v23 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22))
        goto LABEL_15;
      if (v16 == ++v19)
      {
        v11 = v39;
        a5 = v37;
        break;
      }
    }
  }
  v24 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 16);
  v25 = (_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF8);
  if ((v24 & 4) != 0)
    v25 = (_QWORD *)*v25;
  if (v25)
    v26 = (unint64_t)(v25 - 8);
  else
    v26 = 0;
  v10 = 0;
  if ((sub_22F02DF34(a1, (uint64_t)a4, a3, v26, (int)v17 - (int)v16) & 1) != 0)
  {
LABEL_49:
    if (!a5)
      goto LABEL_61;
    v32 = *(_DWORD *)((v39 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7F;
    if ((v39 & 0xFFFFFFFFFFFFFFF8) != 0 && (v32 - 52) >= 0xFFFFFFFD)
    {
      v10 = 0;
      if ((sub_22F02B8DC(a1, (uint64_t)a4, a3, v39 & 0xFFFFFFFFFFFFFFF8, 0) & 1) == 0)
        goto LABEL_17;
      goto LABEL_61;
    }
    v33 = v32 == 68 ? v39 & 0xFFFFFFFFFFFFFFF8 : 0;
    v34 = *(unsigned int *)(v33 + 64);
    if (!(_DWORD)v34)
    {
LABEL_61:
      v10 = v39 & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_17;
    }
    v35 = *(unint64_t **)(v33 + 56);
    v36 = 8 * v34;
    while ((sub_22F02B8DC(a1, (uint64_t)a4, a3, *v35, 0) & 1) != 0)
    {
      ++v35;
      v36 -= 8;
      if (!v36)
        goto LABEL_61;
    }
LABEL_16:
    v10 = 0;
  }
LABEL_17:
  if (v40 != v42)
    free(v40);
  return v10;
}

uint64_t sub_22F025158(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  while (2)
  {
    v2 = *a2;
    if (a2 && (v2 & 0xFE) == 0x70)
    {
      v3 = *(_DWORD *)a2;
      switch((*(_DWORD *)a2 >> 18) & 0x3F)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
          return sub_22F026150((uint64_t *)a1, (uint64_t)a2);
        default:
          goto LABEL_7;
      }
    }
    if (!a2 || v2 != 233)
LABEL_8:
      __asm { BR              X9 }
    v3 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x1F)
    {
      case 0:
      case 1:
        return sub_22F026EA4((uint64_t *)a1, (uint64_t)a2);
      case 2:
      case 3:
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xD:
        sub_22F072CEC(*(_QWORD *)a1, (uint64_t)a2, 103, 0);
        return 0;
      case 4:
        sub_22F027050(*(unint64_t **)(a1 + 8), *(_QWORD *)(*((_QWORD *)a2 + 2) + 16));
        return 1;
      case 6:
      case 0xC:
        a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        continue;
      default:
LABEL_7:
        v2 = v3;
        goto LABEL_8;
    }
  }
}

uint64_t sub_22F026150(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v7[9];
  _QWORD v8[3];
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[12];

  v13[11] = *MEMORY[0x24BDAC8D0];
  v4 = (*(_DWORD *)a2 >> 18) & 0x3F;
  if (v4 >= 2)
  {
    if (v4 == 32)
    {
      sub_22F024D28(*a1, *(_QWORD *)(a2 + 16));
      return sub_22F025158(a1, *(_QWORD *)(a2 + 24));
    }
    sub_22F072CEC(*a1, a2, 103, 0);
    return 0;
  }
  else
  {
    memset(v8, 0, sizeof(v8));
    v9 = -1;
    v10 = 0;
    v11 = v13;
    v12 = 0x800000000;
    v13[8] = 0;
    v13[9] = 0;
    if (sub_22F0247C4(*a1, a2, v8, 1))
    {
      LODWORD(v7[0]) = 0;
      v5 = sub_22F0248D4((uint64_t *)*a1, a2, *(_QWORD *)(a2 + 8), (uint64_t)v8, (uint64_t)v7, 0);
      if ((_DWORD)v5)
        sub_22F02700C(a1[1], (uint64_t)v7);
      if (LODWORD(v7[0]) >= 2)
        sub_22EF53BC0(v7);
    }
    else
    {
      v5 = 0;
    }
    if (v11 != v13)
      free(v11);
  }
  return v5;
}

unint64_t sub_22F0262C8(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 **v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 **v25;
  unint64_t v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  _BYTE **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  _BYTE **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BOOL8 v54;
  char v55;
  uint64_t *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned __int8 *v59;
  _QWORD *v60;
  int v61;
  int v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t *v82;
  uint64_t v83[9];
  uint64_t v84;
  void **v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  _QWORD v91[11];
  void *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  _BYTE v99[64];
  uint64_t v100;
  uint64_t v101;
  uint64_t v102[3];
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  _BYTE v107[64];
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  LODWORD(v83[0]) = 0;
  v4 = *a1;
  v5 = *(_DWORD *)(*a1 + 216);
  sub_22F0270D4(*(_DWORD **)(*a1 + 24));
  v6 = *a2;
  v7 = (unsigned __int8 **)((char *)a2 + (v6 >> 24));
  v8 = *v7;
  if (*v7)
  {
    while (1)
    {
      v9 = v8;
      v10 = *v8;
      if (v10 > 213)
      {
        if (v10 == 233)
        {
          if ((*(_DWORD *)v9 & 0x7C0000) != 0x300000)
            goto LABEL_19;
          v12 = v9 + 16;
        }
        else
        {
          if (v10 != 214)
            goto LABEL_19;
          v12 = v9 + 24;
        }
      }
      else if (v10 == 155)
      {
        if ((**((_DWORD **)v9 + 2) & 0x18000) != 0)
          goto LABEL_19;
        if (v9[48])
          v12 = v9 + 24;
        else
          v12 = v9 + 32;
      }
      else
      {
        if (v10 != 176)
          goto LABEL_19;
        v11 = *((unsigned int *)v9 + 5);
        if ((_DWORD)v11 == -1)
          goto LABEL_19;
        v12 = &v9[8 * v11 + 40];
      }
      v8 = *(unsigned __int8 **)v12;
      if (v8 == v9)
        goto LABEL_19;
    }
  }
  v9 = 0;
LABEL_19:
  v13 = *((_QWORD *)v9 + 1);
  memset(v102, 0, sizeof(v102));
  LODWORD(v103) = -1;
  v104 = 0;
  v105 = v107;
  v106 = 0x800000000;
  v14 = &v7[((v6 >> 18) & 1) + 1];
  v109 = 0;
  v108 = 0;
  v15 = a2[4];
  v16 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v18)
    v19 = (*(_DWORD *)(v18 + 16) & 0xFF800FF) == 136839179;
  else
    v19 = 0;
  if (!v19)
  {
    if ((*(_BYTE *)(v17 + 16) == 39 || *(_DWORD *)(v18 + 16) == 39 && (v17 = sub_22F10CF48(v17)) != 0)
      && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 25 <= 1)
    {
      v92 = 0;
      v93 = 0;
      v94 = 0;
      v95 |= 1u;
      v96 = 0;
      v97 = v99;
      v98 = 0x800000000;
      v100 = 0;
      v101 = 0;
      v84 = *a1;
      v85 = &v92;
      LOBYTE(v86) = 0;
      v81 = v5;
      if (sub_22F00C45C(&v84, v9))
      {
        if (!v94 && (v92 & 3) == 0)
        {
          v21 = (unint64_t)v92 & 0xFFFFFFFFFFFFFFFCLL;
          if (((unint64_t)v92 & 0xFFFFFFFFFFFFFFFCLL) != 0 && (*(_DWORD *)(v21 + 28) & 0x7Eu) - 52 < 6)
          {
            v46 = *(_QWORD *)(*a1 + 8);
            v47 = sub_22F10ACF8(*v16);
            if (sub_22EF5F5D4(v46, v47, *(_QWORD *)(v21 + 48)))
            {
              v48 = *(unsigned __int8 *)a2;
              if (v48 == 141)
              {
                v49 = a2[1] & 0x3F;
                if (v49 - 18 < 8 || (v23 = 0, v79 = 0, v49 <= 0x1D) && ((1 << v49) & 0x30008000) != 0)
                {
                  v50 = (_BYTE **)*a1;
                  v51 = *(_QWORD *)(*a1 + 24);
                  v52 = *(unsigned int *)(v51 + 92);
                  v53 = (*(_DWORD *)(v51 + 120) + 1);
                  *(_DWORD *)(v51 + 120) = v53;
                  v23 = v52 | (v53 << 32);
                  v54 = (*(_DWORD *)(v21 + 28) & 0x7Eu) - 54 < 4;
                  if (!sub_22F0279B4((uint64_t)&v14[v54], v15 - v54, v21, v23, v50, v21, 1))
                  {
                    v80 = v23;
                    v22 = 0;
                    v82 = 0;
                    LOBYTE(v23) = 0;
                    v20 = v21;
                    goto LABEL_30;
                  }
                  v79 = v21;
                }
              }
              else
              {
                v79 = 0;
                v23 = 0;
              }
              v80 = v23;
              if ((*(_DWORD *)(v21 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
                goto LABEL_200;
              if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 32))(v21) + 80) & 0xE000) != 0x4000
                && ((*(_QWORD *)(v21 + 40) & 7) != 6
                 || (*(_DWORD *)(*(_QWORD *)(v21 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
              {
                v69 = *a1;
                if ((_DWORD)v15)
                {
                  if (sub_22F0098FC(v69, *v14, v102))
                  {
                    v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 96))(*a1);
                    if (v48 == 141
                      && (**(_QWORD **)(v70 + 2000) & 0x1000) != 0
                      && (*(_QWORD *)a2 & 0x3F00000000) == 0xF00000000
                      && (*(_BYTE *)(v21 + 82) & 0x80) != 0)
                    {
                      v82 = v102;
                      if (!sub_22F013A2C((uint64_t *)*a1, *v14, (uint64_t)v102))
                      {
                        v22 = 0;
                        goto LABEL_158;
                      }
                    }
                    --v15;
                    ++v14;
                    v82 = v102;
LABEL_195:
                    v22 = 1;
                    goto LABEL_196;
                  }
                }
                else
                {
                  sub_22F072CEC(v69, (uint64_t)a2, 103, 0);
                  v15 = 0;
                }
LABEL_157:
                v22 = 0;
                v82 = 0;
LABEL_158:
                LOBYTE(v23) = 0;
                goto LABEL_196;
              }
              if (!sub_22EFD799C(v21))
              {
LABEL_200:
                if (sub_22EFBFDCC(v21, 0, 0))
                {
                  if ((*(_QWORD *)(v21 + 40) & 7) == 6
                    && (*(_DWORD *)(*(_QWORD *)(v21 + 40) & 0xFFFFFFFFFFFFFFF8) | 2) == 3)
                  {
                    v84 = 0;
                    v85 = 0;
                    v86 = 0;
                    v87 |= 1u;
                    v88 = 0;
                    v89 = v91;
                    v90 = 0x800000000;
                    v91[8] = 0;
                    v91[9] = 0;
                    if (sub_22F027C94(*a1, a2, (uint64_t)&v84))
                    {
                      sub_22F00676C((uint64_t)&v84, (uint64_t)v83);
                      LOBYTE(v23) = sub_22F02D738(v4, 1, v5);
                      v5 = -1;
                    }
                    else
                    {
                      LOBYTE(v23) = 0;
                    }
                    v20 = v79;
                    if (v89 != v91)
                    {
                      free(v89);
                      v20 = v79;
                    }
                    v81 = v5;
                    v22 = 0;
                    v82 = 0;
LABEL_30:
                    if (v97 != v99)
                    {
                      v24 = v15;
                      v25 = v14;
                      v26 = v20;
                      free(v97);
                      v20 = v26;
                      v14 = v25;
                      v15 = v24;
                    }
                    if ((v22 & 1) == 0)
                    {
                      v5 = v81;
                      goto LABEL_58;
                    }
                    v27 = 0;
                    v5 = v81;
                    if (v20)
                      goto LABEL_71;
                    goto LABEL_70;
                  }
                  if (sub_22F02836C(*a1, a2))
                  {
                    LOBYTE(v23) = sub_22F02D738(v4, 1, v5);
                    v22 = 0;
                    v82 = 0;
                    v81 = -1;
LABEL_196:
                    v20 = v79;
                    goto LABEL_30;
                  }
                  goto LABEL_157;
                }
                goto LABEL_194;
              }
              v67 = *(_WORD *)(v21 + 80) & 0x7F;
              v68 = -40;
              if (v67 > 0x46)
              {
                switch(v67)
                {
                  case 'S':
                    goto LABEL_176;
                  case 'G':
                    v68 = -56;
                    goto LABEL_176;
                  case 'Q':
                    goto LABEL_176;
                }
              }
              else
              {
                if (v67 <= 0x18)
                {
                  if (v67 == 16)
                    goto LABEL_144;
                  if (((1 << v67) & 0x1066) != 0)
                    goto LABEL_176;
                  if (v67 == 24)
                  {
LABEL_144:
                    v68 = -48;
LABEL_176:
                    v71 = *(_QWORD *)(v21 + 72 + v68 + 16);
                    v72 = (_QWORD *)(v71 & 0xFFFFFFFFFFFFFFF8);
                    if ((v71 & 4) != 0)
                      v72 = (_QWORD *)*v72;
                    if (v72)
                      v23 = (unint64_t)(v72 - 8);
                    else
                      v23 = 0;
                    v73 = sub_22EFD462C(v23);
                    if (v73 && (*(_DWORD *)(v73 + 28) & 0x7F) == 0x1D)
                      v73 = *(_QWORD *)(v73 + 48);
                    v74 = *(_QWORD *)(v23 + 128);
                    if (!v74
                      || ((*(unsigned __int16 *)(v74 + 8) | (*(unsigned __int8 *)(v74 + 10) << 16)) & 0x100000) == 0
                      || (*(_BYTE *)(v74 + 104) & 4) == 0)
                    {
                      v82 = 0;
                      v22 = 1;
                      v21 = v73;
                      goto LABEL_196;
                    }
                    v75 = *(_QWORD *)((*(_QWORD *)(v21 + 144) & 0xFFFFFFFFFFFFFFF8) + 24);
                    v76 = *(_QWORD *)(v73 + 144);
                    if ((v76 & 6) != 0)
                      v77 = 0;
                    else
                      v77 = v76 & 0xFFFFFFFFFFFFFFF8;
                    v84 = 0;
                    v21 = sub_22EFE9880(v77, *(_QWORD *)v75, *(unsigned int *)(v75 + 8), (uint64_t)&v84);
LABEL_194:
                    v82 = 0;
                    goto LABEL_195;
                  }
                }
                if (v67 == 70)
                {
LABEL_174:
                  v68 = -64;
                  goto LABEL_176;
                }
              }
              if (v67 - 52 < 6)
              {
                v68 = -72;
                goto LABEL_176;
              }
              if (v67 - 33 < 5)
                goto LABEL_174;
              goto LABEL_144;
            }
            sub_22F072CEC(*a1, (uint64_t)a2, 103, 0);
            v20 = 0;
            v80 = 0;
LABEL_29:
            v22 = 0;
            v82 = 0;
            LOBYTE(v23) = 0;
            goto LABEL_30;
          }
        }
        sub_22F072CEC(*a1, (uint64_t)v9, 103, 0);
      }
      v20 = 0;
      v80 = 0;
      v21 = 0;
      goto LABEL_29;
    }
    v30 = *a1;
    v31 = (uint64_t)a2;
    goto LABEL_56;
  }
  v28 = *v9;
  if (v28 == 188)
  {
    if (sub_22F0098FC(*a1, *((_QWORD *)v9 + 2), v102))
    {
      v21 = *((_QWORD *)v9 + 3);
      if (v21 && (*(_DWORD *)(v21 + 28) & 0x7Eu) - 58 > 0xFFFFFFFB)
      {
        if ((v9[2] & 8) != 0)
        {
          v27 = *((_QWORD *)v9 + 6) != 0;
LABEL_69:
          v82 = v102;
LABEL_70:
          v38 = (_BYTE **)*a1;
          v39 = *(_QWORD *)(*a1 + 24);
          v40 = *(unsigned int *)(v39 + 92);
          v41 = (*(_DWORD *)(v39 + 120) + 1);
          *(_DWORD *)(v39 + 120) = v41;
          v80 = v40 | (v41 << 32);
          v42 = sub_22F0279B4((uint64_t)v14, v15, v21, v80, v38, v21, 0);
          LOBYTE(v23) = 0;
          v20 = v21;
          if (!v42)
            goto LABEL_58;
LABEL_71:
          v78 = v20;
          v92 = &v94;
          v93 = 0x400000000;
          if (!v82)
          {
LABEL_98:
            if (v21 && (*(_DWORD *)(v21 + 28) & 0x7F) == 0x39)
            {
              v56 = (uint64_t *)*a1;
              v57 = *(_WORD *)(v21 + 80) & 0x7F;
              v58 = -40;
              if (v57 > 0x46)
              {
                switch(v57)
                {
                  case 'S':
                    goto LABEL_121;
                  case 'G':
                    v58 = -56;
                    goto LABEL_121;
                  case 'Q':
LABEL_121:
                    v63 = *(_QWORD *)(v21 + 72 + v58 + 16);
                    v64 = (_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF8);
                    if ((v63 & 4) != 0)
                      v64 = (_QWORD *)*v64;
                    if (v64)
                      v65 = (uint64_t)(v64 - 8);
                    else
                      v65 = 0;
                    v66 = sub_22EF6477C(*(_QWORD *)(*a1 + 8), v65);
                    if (!sub_22F027138(v56, (uint64_t)a2, (uint64_t)v82, v66))
                      goto LABEL_108;
LABEL_127:
                    LOBYTE(v23) = sub_22F02D738(v4, 1, v5);
                    v5 = -1;
LABEL_128:
                    if (v92 != &v94)
                      free(v92);
                    goto LABEL_58;
                }
              }
              else
              {
                if (v57 <= 0x18)
                {
                  if (v57 == 16)
                  {
LABEL_103:
                    v58 = -48;
                    goto LABEL_121;
                  }
                  if (((1 << v57) & 0x1066) != 0)
                    goto LABEL_121;
                  if (v57 == 24)
                    goto LABEL_103;
                }
                if (v57 == 70)
                {
LABEL_119:
                  v58 = -64;
                  goto LABEL_121;
                }
              }
              if (v57 - 52 >= 6)
              {
                if (v57 - 33 >= 5)
                  goto LABEL_103;
                goto LABEL_119;
              }
              v58 = -72;
              goto LABEL_121;
            }
            v84 = 0;
            v59 = (unsigned __int8 *)sub_22EFBF910(v21, &v84);
            v60 = (_QWORD *)*a1;
            sub_22EFF605C((uint64_t)a2);
            if (sub_22F028A44(v60, v61, (_QWORD *)v21, v84, (uint64_t)v59))
            {
              sub_22EFF605C((uint64_t)a2);
              if (sub_22F00B12C(v62, v84, (uint64_t)v82, (uint64_t *)v14, v15, v78, v80, v59, (uint64_t *)*a1, (uint64_t)v83, 0)&& (!(_DWORD)v93 || sub_22F028DA0(*a1, (uint64_t)a2, (uint64_t)v83, v92, v93)))
              {
                goto LABEL_127;
              }
            }
LABEL_108:
            LOBYTE(v23) = 0;
            goto LABEL_128;
          }
          if ((*(_DWORD *)(v21 + 28) & 0x7Eu) - 54 >= 4)
            v43 = 0;
          else
            v43 = (_DWORD *)v21;
          if (v43)
          {
            v44 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v43 + 32))(v43);
            if ((*(_BYTE *)(v44 + 82) & 0xC) != 0)
            {
              if (v27)
                goto LABEL_78;
LABEL_97:
              v21 = sub_22F028540(*a1, (uint64_t)a2, (uint64_t)v82, (uint64_t)v43, (uint64_t)&v92);
              if (!v21)
                goto LABEL_108;
              goto LABEL_98;
            }
            if (sub_22EFD7260(v44))
              v55 = v27;
            else
              v55 = 1;
            if ((v55 & 1) == 0)
              goto LABEL_97;
          }
LABEL_78:
          if ((v43[7] & 0x7F) == 0x39)
            v45 = 9;
          else
            v45 = 5;
          if (!sub_22F02E038((uint64_t *)*a1, (uint64_t)a2, (uint64_t)v82, v45, 0))
            goto LABEL_108;
          goto LABEL_98;
        }
LABEL_68:
        v27 = 0;
        goto LABEL_69;
      }
      goto LABEL_44;
    }
    goto LABEL_57;
  }
  if ((v28 & 0xFE) == 0x70)
  {
    v29 = sub_22F0247C4(*a1, v9, v102, 0);
    if (v29)
    {
      v21 = v29;
      if ((*(_DWORD *)(v29 + 28) & 0x7Eu) - 58 > 0xFFFFFFFB)
        goto LABEL_68;
LABEL_44:
      v30 = *a1;
LABEL_55:
      v31 = (uint64_t)v9;
LABEL_56:
      sub_22F072CEC(v30, v31, 103, 0);
    }
LABEL_57:
    LOBYTE(v23) = 0;
    goto LABEL_58;
  }
  v30 = *a1;
  if (v28 != 129)
    goto LABEL_55;
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 96))(v30) + 2000) + 1) & 0x10) == 0)
  {
    v32 = *a1;
    sub_22EFF605C((uint64_t)v9);
    sub_22F072D74(v32, v33, 2266, 0);
  }
  if (!sub_22F0098FC(*a1, *((_QWORD *)v9 + 2), v102))
    goto LABEL_57;
  v34 = 0;
  v35 = *((_QWORD *)v9 + 8);
  if ((v35 & 1) == 0)
  {
    v36 = (uint64_t *)(v35 & 0xFFFFFFFFFFFFFFFELL);
    if (v36)
      v34 = *v36;
  }
  LOBYTE(v23) = sub_22F027138((uint64_t *)*a1, (uint64_t)v9, (uint64_t)v102, v34);
LABEL_58:
  if (v105 != v107)
    free(v105);
  if (v5 != -1)
    sub_22F02D738(v4, 0, v5);
  --*(_DWORD *)(*(_QWORD *)(v4 + 24) + 104);
  if ((v23 & 1) != 0)
    sub_22F02700C(a1[1], (uint64_t)v83);
  if (LODWORD(v83[0]) >= 2)
    sub_22EF53BC0(v83);
  return v23 & 1;
}

uint64_t sub_22F026EA4(uint64_t *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[3];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28[2];
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;

  v37 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 96))(*a1) + 2000) + 1) & 4) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1) & 1) != 0)
  {
    memset(v22, 0, sizeof(v22));
    LODWORD(v23) = -1;
    v25 = 0;
    v26 = v28;
    v27 = 0x800000000;
    v34 = 0;
    v35 = 0;
    v10 = *(_QWORD *)(a2 + 16);
    v14 = *a1;
    LOBYTE(v15) = 0;
    v11 = 0;
    if (sub_22F010358((int)&v14, v10, v4, v5, v6, v7, v8, v9, v13, v14, (uint64_t)v22, v15, v16, v17, v18, v19, v20, v21, 0,
                         0,
                         0,
                         v23,
                         v24,
                         0,
                         (uint64_t)v28,
                         0x800000000,
                         v28[0],
                         v28[1],
                         v29,
                         v30,
                         v31,
                         v32,
                         v33,
                         0,
                         0,
                         v36,
                         v37,
                         v38,
                         v39))
    {
      LODWORD(v14) = 0;
      v11 = sub_22F01BB7C((uint64_t *)*a1, a2, (uint64_t)v22, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), (*(_DWORD *)a2 & 0x740000) == 0, &v14);
      if ((_DWORD)v11)
        sub_22F02700C(a1[1], (uint64_t)&v14);
      if (v14 >= 2)
        sub_22EF53BC0(&v14);
    }
    if (v26 != v28)
      free(v26);
  }
  else
  {
    sub_22F072CEC(*a1, a2, 103, 0);
    return 0;
  }
  return v11;
}

unsigned int *sub_22F02700C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v2 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8 | *(_QWORD *)a1 & 7;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)a1 = v2 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((*(_QWORD *)(a2 + 8) >> 2) & 1));
  *(_DWORD *)(a1 + 16) = 0;
  v5 = *(uint64_t **)(a2 + 24);
  v3 = (uint64_t *)(a2 + 24);
  v4 = v5;
  v6 = *((unsigned int *)v3 - 2);
  v9 = *(_QWORD *)(a1 + 8);
  v7 = (unsigned int *)(a1 + 8);
  v8 = v9;
  if (v6 <= 6)
    v10 = v3;
  else
    v10 = v4;
  return sub_22F263224(v7, v8, v10, &v10[v6]);
}

void sub_22F027050(unint64_t *a1, uint64_t a2)
{
  void *v2[2];
  _QWORD v3[5];

  v3[4] = *MEMORY[0x24BDAC8D0];
  v2[0] = v3;
  v2[1] = (void *)0x400000000;
  *a1 = a2 & 0xFFFFFFFFFFFFFFFBLL;
  sub_22F24C77C((uint64_t)(a1 + 1), (uint64_t)v2);
  if (v2[0] != v3)
    free(v2[0]);
}

_DWORD *sub_22F0270D4(_DWORD *result)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;

  v1 = result;
  v2 = result[30] + 1;
  result[30] = v2;
  v3 = result[26];
  if (v3 >= result[27])
  {
    result = (_DWORD *)llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = v1[26];
  }
  *(_DWORD *)(*((_QWORD *)v1 + 12) + 4 * v3) = v2;
  ++v1[26];
  return result;
}

uint64_t sub_22F027138(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unsigned __int8 *v52;
  _BYTE *v53;
  uint64_t v54;
  _BOOL8 v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unsigned __int8 *v61;
  _BYTE *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned __int8 **v65;
  unsigned __int8 **v66;
  unsigned __int8 *v67;
  _BYTE *v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  _QWORD *v74;
  unsigned __int8 *v75;
  _BYTE *v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  unint64_t v87[2];
  _DWORD *v88;
  unint64_t v89;
  uint64_t v90[4];
  uint64_t v91;

  v7.n128_f64[0] = sub_22F015608(v87, (uint64_t)a1, a2, 9u, a3, a4);
  v8 = v89;
  if (v89 < 0x10)
    return 0;
  v9 = *(_DWORD *)(a3 + 24);
  if ((v9 & 1) != 0)
    return 0;
  if ((v9 & 2) != 0)
    goto LABEL_7;
  v10 = *(_DWORD *)(a3 + 56);
  if ((v9 & 8) != 0 && ((v10 == 1) & (v9 >> 2)) == 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * (int)((v9 >> 4) - 1)) == *(_QWORD *)(a3 + 32))
      goto LABEL_7;
    goto LABEL_18;
  }
  if (((v10 == 1) & (v9 >> 2)) == 0)
  {
LABEL_18:
    v17 = (uint64_t)v88;
    if (*v88)
    {
      v18 = 0;
      v19 = 0;
      v20 = v87[0];
      v85 = v87[1];
      v86 = -v10;
      do
      {
        if (((v8 & 1) != 0 || *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 5 | v8 & 4)
          && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) == 45)
        {
          v21 = *(_QWORD *)(a3 + 48);
          v90[0] = v20;
          v90[1] = v85;
          v90[2] = v21;
          v90[3] = v19;
          v91 = 0;
          if ((sub_22F02BC74(a1[96], *((_DWORD *)a1 + 196), v90, &v91) & 1) != 0)
          {
            if (*(_DWORD *)(v91 + 32))
              v8 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFFALL | v8 & 2;
          }
        }
        v22 = v8 & 0xFFFFFFFFFFFFFFF0;
        v23 = v86 + v19;
        if (v86 + v19)
        {
          if (v23 != -1)
            goto LABEL_36;
          v24 = *(_QWORD *)(*(_QWORD *)v22 + 8) & 0xFFFFFFFFFFFFFFF0;
          if (*(_BYTE *)(*(_QWORD *)v24 + 16) != 12)
            goto LABEL_36;
        }
        else
        {
          v24 = *(_QWORD *)(*(_QWORD *)v22 + 8) & 0xFFFFFFFFFFFFFFF0;
        }
        if (*(_BYTE *)(*(_QWORD *)v24 + 16) == 45
          && ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *, __n128))(*a1 + 96))(a1, v7) + 2000) + 1) & 4) == 0
           || !sub_22F016844((uint64_t)a1, v20, v85, 1))
          && (sub_22F01C988((uint64_t)a1, a2, 9, v8) & 1) != 0)
        {
          return 0;
        }
        if (!v23)
        {
          sub_22EFF605C(a2);
          result = sub_22F029080((uint64_t)a1, v64, a3, v17, v8);
          if ((_DWORD)result)
          {
            if (!v18)
              return 1;
            if ((*(_BYTE *)(v18 + 68) & 1) == 0)
              return 1;
            result = sub_22F01CBE4((uint64_t)a1, a2, (int *)v17, v18);
            if ((_DWORD)result)
              return 1;
          }
          return result;
        }
LABEL_36:
        v25 = *(_QWORD *)v22;
        v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v22 + 8) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_DWORD *)(v26 + 16) & 0xFEu) - 2 <= 3)
        {
          v27 = sub_22EF5C728(a1[1], v8);
          if (*(_BYTE *)(v27 + 16) == 2)
            v28 = v27;
          else
            v28 = 0;
          v29 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v19);
          v30 = (unint64_t *)(v28 + 40);
          v31 = *(_DWORD *)(v28 + 48);
          if (v31 < 0x41)
            goto LABEL_43;
          if (v31 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v28 + 40)) <= 0x40)
          {
            v30 = (unint64_t *)*v30;
LABEL_43:
            if (*v30 <= v29)
              goto LABEL_106;
          }
          v8 = *(_QWORD *)(v28 + 32);
          if (v29 >= *(unsigned int *)(v17 + 16))
            sub_22F01CCF4(v17, v29);
          v18 = 0;
          v17 = *(_QWORD *)(v17 + 8) + 72 * v29;
          goto LABEL_93;
        }
        v32 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v19);
        if (*(_DWORD *)(v26 + 16) == 12)
        {
          if (v32 < 2)
          {
            if (*(_BYTE *)(v25 + 16) != 12)
              sub_22F10CF48(v25);
            v11 = (uint64_t)a1;
            v12 = a2;
            v13 = 2202;
            goto LABEL_9;
          }
LABEL_106:
          if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a1 + 96))(a1) + 2000) + 1) & 2) == 0)
            goto LABEL_8;
          v58 = (uint64_t)a1;
          v59 = a2;
          v16 = 2172;
          goto LABEL_101;
        }
        v18 = v32 & 0xFFFFFFFFFFFFFFF8;
        if ((v32 & 0xFFFFFFFFFFFFFFF8) != 0 && (*(_DWORD *)(v18 + 28) & 0x7Fu) - 49 <= 2)
        {
          if ((*(_BYTE *)(v18 + 68) & 2) != 0)
          {
            if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *, __n128))(*a1 + 96))(a1, v7) + 2000) + 1) & 4) == 0
              || !sub_22F016844((uint64_t)a1, v20, v85, 1))
            {
              v65 = (unsigned __int8 **)sub_22F072CEC((uint64_t)a1, a2, 2170, 1);
              if (v65)
              {
                v66 = v65;
                v67 = *v65;
                if (!v67)
                {
                  v67 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v66[1]);
                  *v66 = v67;
                }
                v67[*v67 + 1] = 2;
                v68 = *v66;
                v69 = **v66;
                *v68 = v69 + 1;
                *(_QWORD *)&v68[8 * v69 + 16] = 9;
                v68[(v69 + 1) + 1] = 11;
                v70 = *v66;
                v71 = **v66;
                *v70 = v71 + 1;
                *(_QWORD *)&v70[8 * v71 + 16] = v18;
              }
              v72 = *(_DWORD *)(v18 + 24);
              result = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
              if ((_DWORD)result)
              {
                sub_22F072E10((uint64_t)a1, v72, 100);
                return 0;
              }
              return result;
            }
            v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v22 + 8) & 0xFFFFFFFFFFFFFFF0);
          }
          if ((*(_DWORD *)(sub_22F114198(*(_QWORD *)(v26 + 24)) + 72) & 0xE000) == 0x4000)
          {
            v33 = *(_QWORD *)(v17 + 8);
            if (!v33)
              goto LABEL_122;
            v34 = *(_QWORD *)(v17 + 8);
            if ((*(_BYTE *)(v33 + 29) & 0x80) != 0)
            {
              v35 = *(_QWORD *)(v17 + 8);
              v36 = sub_22EFB5D7C(v35);
              v33 = v35;
              v34 = v36;
            }
            v37 = v18;
            if ((*(_BYTE *)(v18 + 29) & 0x80) != 0)
            {
              v84 = v33;
              v37 = sub_22EFB5D7C(v18);
              v33 = v84;
            }
            if (v34 != v37)
            {
LABEL_122:
              v73 = v33;
              result = sub_22F072CEC((uint64_t)a1, a2, 2169, 0);
              if (result)
              {
                v74 = (_QWORD *)result;
                v75 = *(unsigned __int8 **)result;
                if (!*(_QWORD *)result)
                {
                  v75 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(result + 8));
                  *v74 = v75;
                }
                result = 0;
                v75[*v75 + 1] = 2;
                v76 = (_BYTE *)*v74;
                v77 = *(unsigned __int8 *)*v74;
                *v76 = v77 + 1;
                *(_QWORD *)&v76[8 * v77 + 16] = 9;
                v76[(v77 + 1) + 1] = 11;
                v78 = (_BYTE *)*v74;
                v79 = *(unsigned __int8 *)*v74;
                *(_QWORD *)(*v74 + 8 * v79 + 16) = v18;
                LOBYTE(v79) = v79 + 1;
                *v78 = v79;
                v78[v79 + 1] = 2;
                v80 = (_BYTE *)*v74;
                v81 = *(unsigned __int8 *)*v74;
                *v80 = v81 + 1;
                *(_QWORD *)&v80[8 * v81 + 16] = v73 == 0;
                v80[(v81 + 1) + 1] = 11;
                v82 = (_BYTE *)*v74;
                v83 = *(unsigned __int8 *)*v74;
                *v82 = v83 + 1;
                *(_QWORD *)&v82[8 * v83 + 16] = v73;
              }
              return result;
            }
            v17 = *(_QWORD *)(v17 + 16);
          }
          else
          {
            v17 = *(_QWORD *)(v17 + 8) + 72 * (*(_DWORD *)(v17 + 16) + sub_22EFC306C(v18));
          }
          v46 = *(_QWORD *)(v18 + 48);
          v47 = (v8 & 1) == 0 && (*(_BYTE *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) == 0;
          if ((v8 & 4) != 0)
          {
            LODWORD(v50) = !v47;
            if ((*(_DWORD *)(v18 + 68) & 2) != 0)
              v50 = 0;
            else
              v50 = v50;
            v8 = v46 | v50;
          }
          else
          {
            v48 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8);
            LODWORD(v49) = !v47;
            if ((*(_DWORD *)(v18 + 68) & 2) != 0)
              v49 = 0;
            else
              v49 = v49;
            v8 = v46 | v49;
            if ((v48 & 4) == 0)
              goto LABEL_93;
          }
          goto LABEL_92;
        }
        v38 = sub_22F10C2A4(v25);
        if (v38 && (*(_DWORD *)(v38 + 28) & 0x7Fu) - 35 >= 3)
          v38 = 0;
        v39 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v19) & 0xFFFFFFFFFFFFFFF8;
        if (v39)
        {
          if ((*(_DWORD *)(v39 + 28) & 0x7Fu) - 35 >= 3)
            v40 = 0;
          else
            v40 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v19) & 0xFFFFFFFFFFFFFFF8;
        }
        else
        {
          v40 = 0;
        }
        v41 = sub_22F01D5B0(v38, v40);
        v42 = *(_QWORD *)(v17 + 8);
        v43 = sub_22EF6477C(a1[1], v40);
        v44 = (v8 & 1) == 0 && (*(_BYTE *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) == 0;
        v17 = v42 + 72 * v41;
        if ((v8 & 4) != 0)
        {
          v8 = v43 | !v44;
LABEL_77:
          v18 = 0;
LABEL_92:
          v8 |= 4uLL;
          goto LABEL_93;
        }
        v45 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8);
        v8 = v43 | !v44;
        if ((v45 & 4) != 0)
          goto LABEL_77;
        v18 = 0;
LABEL_93:
        ++v19;
      }
      while (*(_DWORD *)v17);
    }
    if (((*(uint64_t (**)(uint64_t *, __n128))(*a1 + 24))(a1, v7) & 1) == 0)
    {
      result = sub_22F072CEC((uint64_t)a1, a2, 2174, 0);
      if (result)
      {
        v51 = (_QWORD *)result;
        v52 = *(unsigned __int8 **)result;
        if (!*(_QWORD *)result)
        {
          v52 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(result + 8));
          *v51 = v52;
        }
        result = 0;
        v52[*v52 + 1] = 2;
        v53 = (_BYTE *)*v51;
        v54 = *(unsigned __int8 *)*v51;
        *(_QWORD *)(*v51 + 8 * v54 + 16) = 9;
        LOBYTE(v54) = v54 + 1;
        *v53 = v54;
        v55 = *(_DWORD *)v17 == 1;
        v53[v54 + 1] = 2;
        v56 = (_BYTE *)*v51;
        v57 = *(unsigned __int8 *)*v51;
        *v56 = v57 + 1;
        *(_QWORD *)&v56[8 * v57 + 16] = v55;
      }
      return result;
    }
    return 0;
  }
LABEL_7:
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *, __n128))(*a1 + 96))(a1, v7) + 2000) + 1) & 2) == 0)
  {
LABEL_8:
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = 103;
LABEL_9:
    sub_22F072CEC(v11, v12, v13, 0);
    return 0;
  }
  v15 = *(_DWORD *)(a3 + 24);
  if ((v15 & 2) != 0
    || (v15 & 8) != 0
    && ((*(_DWORD *)(a3 + 56) == 1) & (v15 >> 2)) == 0
    && *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * (int)((v15 >> 4) - 1)) == *(_QWORD *)(a3 + 32))
  {
    v16 = 2172;
  }
  else
  {
    v16 = 2176;
  }
  v58 = (uint64_t)a1;
  v59 = a2;
LABEL_101:
  result = sub_22F072CEC(v58, v59, v16, 0);
  if (result)
  {
    v60 = (_QWORD *)result;
    v61 = *(unsigned __int8 **)result;
    if (!*(_QWORD *)result)
    {
      v61 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(result + 8));
      *v60 = v61;
    }
    result = 0;
    v61[*v61 + 1] = 2;
    v62 = (_BYTE *)*v60;
    v63 = *(unsigned __int8 *)*v60;
    *v62 = v63 + 1;
    *(_QWORD *)&v62[8 * v63 + 16] = 9;
  }
  return result;
}

uint64_t sub_22F0279B4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, _BYTE **a5, uint64_t a6, int a7)
{
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v30;
  _BOOL4 v31;
  int v32;
  unint64_t v35;

  v35 = 1;
  if (sub_22E99E574(a6))
  {
    sub_22E97F810(&v35, a2, 0);
    v14 = (uint64_t *)sub_22E47E5E0(a6);
    while (1)
    {
      v16 = v14;
      if (v14 >= v15)
      {
        if (v14 == v15)
          break;
        v17 = v15;
        while (*(_WORD *)(*v17 + 32) != 81)
        {
          if (++v17 == v14)
            goto LABEL_25;
        }
        v16 = v14;
      }
      else
      {
        while (*(_WORD *)(*v16 + 32) != 81)
        {
          if (++v16 == v15)
            goto LABEL_25;
        }
        v17 = v15;
      }
      if (v16 == v17)
        break;
      do
      {
        v19 = *v14++;
        v18 = v19;
      }
      while (*(_WORD *)(v19 + 32) != 81);
      v20 = *(unsigned int *)(v18 + 36);
      if (!(_DWORD)v20)
      {
        sub_22F3C4874(&v35);
        break;
      }
      v21 = *(_DWORD **)(v18 + 40);
      v22 = 4 * v20;
      do
      {
        v23 = (*v21 & 0x3FFFFFFFu) + ((2 * *v21) >> 31) - 1;
        if (a2 > v23)
        {
          if ((v35 & 1) != 0)
            v35 = v35 & 0xFC00000000000000 | (2
                                              * (((v35 >> 1) & ~(-1 << (v35 >> 58)) | (1 << (*(_BYTE *)v21
                                                                                               + ((2 * *v21) >> 31)
                                                                                               - 1))) & ~(-1 << (v35 >> 58)))) | 1;
          else
            *(_QWORD *)(*(_QWORD *)v35 + 8 * (v23 >> 6)) |= 1 << v23;
        }
        ++v21;
        v22 -= 4;
      }
      while (v22);
    }
  }
LABEL_25:
  if (a2)
  {
    v24 = 0;
    v25 = 1;
    v26 = 1;
    while (1)
    {
      v27 = a7 ? a2 + ~v24 : v24;
      v28 = *(_QWORD *)(*(_QWORD *)(a6 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v28 && *(_BYTE *)(v28 + 16) == 26)
        break;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
        goto LABEL_40;
      v28 = sub_22F10CF48(v28);
      if (v28)
        break;
LABEL_41:
      if ((v35 & 1) != 0)
      {
        if (v35 >> 58)
        {
          v30 = (1 << v27) & (v35 >> 1) & ~(-1 << (v35 >> 58));
          goto LABEL_47;
        }
      }
      else if (*(_DWORD *)(v35 + 64))
      {
        v30 = *(_QWORD *)(*(_QWORD *)v35 + 8 * (v27 >> 6)) & (1 << v27);
LABEL_47:
        v31 = v30 != 0;
        goto LABEL_48;
      }
      v31 = 0;
LABEL_48:
      if ((sub_22F009A1C((uint64_t *)v28, *(_QWORD *)(a1 + 8 * v27), a3, a4, (uint64_t)a5, v31) & 1) != 0
        || (v32 = (*((uint64_t (**)(_BYTE **))*a5 + 5))(a5), v26 = 0, *a5[2] |= v32, v32))
      {
        v24 = v25;
        if (a2 > v25++)
          continue;
      }
      goto LABEL_53;
    }
    if (v27 < (unsigned __int16)(*(_QWORD *)(v28 + 16) >> 38))
    {
      v28 = *(_QWORD *)(*(_QWORD *)(a6 + 120) + 8 * v27);
      goto LABEL_41;
    }
LABEL_40:
    v28 = 0;
    goto LABEL_41;
  }
  v26 = 1;
LABEL_53:
  sub_22E54C5D0((void ***)&v35);
  return v26 & 1;
}

uint64_t sub_22F027C94(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  unsigned __int8 **v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  int v27;
  llvm::APInt *v28;
  unint64_t v29;
  unsigned int v30;
  _QWORD *v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  _QWORD *v40;
  int *v41;
  int v42;
  int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  unsigned __int8 ***v48;
  unsigned int v49;
  unint64_t v50;
  unsigned __int8 **v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  int *v57;
  int *v58;
  unsigned int v59;
  unint64_t v60;
  unsigned int v61;
  unsigned __int8 **v62;
  unint64_t v63;
  unsigned int v64;
  _QWORD *v65;
  unsigned int v66;
  int *v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int v71;
  char v72;
  unint64_t v73;
  _OWORD v74[4];
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 1) != 0 || *(_DWORD *)(a1 + 820))
    return v6;
  if (!sub_22F02D35C(a1, "allocate", 8uLL))
  {
    sub_22EFF605C((uint64_t)a2);
    v20 = v19;
    if ((**(_QWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) + 2000) & 0x1000) != 0)
      v21 = 2248;
    else
      v21 = 2240;
    sub_22F072828(a1, v20, v21, 0, 0);
    return 0;
  }
  v8 = v7;
  v9 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF0);
  if ((sub_22F1110EC(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0), 0) & 1) != 0
    || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 <= 1)
  {
    sub_22EFF605C((uint64_t)a2);
    v11 = (unsigned __int8 **)sub_22F072828(a1, v10, 2244, 0, 0);
    v12 = sub_22F1110EC(*v9, 0);
    if (v11)
    {
      v13 = v12 ^ 1u;
      v14 = *v11;
      if (!*v11)
      {
        v14 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v11[1]);
        *v11 = v14;
      }
      v6 = 0;
      v14[*v14 + 1] = 2;
      v15 = *v11;
      v16 = **v11;
      *(_QWORD *)&(*v11)[8 * v16 + 16] = v13;
      LOBYTE(v16) = v16 + 1;
      *v15 = v16;
      v15[v16 + 1] = 9;
      v17 = *v11;
      v18 = **v11;
      *v17 = v18 + 1;
      *(_QWORD *)&v17[8 * v18 + 16] = v8;
      return v6;
    }
    return 0;
  }
  v71 = 1;
  v70 = 0;
  v72 = 0;
  v6 = 0;
  if (sub_22F0174A0(*(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2]+ ((unint64_t)*a2 >> 24)), &v70, a1))
  {
    v23 = a2[4];
    v24 = v23 - 1;
    if (v23 == 1)
    {
      LOBYTE(v25) = 0;
    }
    else
    {
      v26 = 0;
      v25 = 0;
      do
      {
        sub_22F024D28(a1, *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4 + 2 * v26] + ((unint64_t)*a2 >> 24)));
        v25 |= sub_22F40A2D0(*(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0));
        ++v26;
      }
      while (v24 != (_DWORD)v26);
    }
    v69 = 0;
    sub_22EFF605C((uint64_t)a2);
    if ((sub_22F01E138(a1, v27, v8, &v69) & 1) != 0)
    {
      v68 = 1;
      v67 = 0;
      v66 = 1;
      v65 = 0;
      v64 = v71;
      if (v71 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v63);
      }
      else
      {
        if (v71)
          v29 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v71;
        else
          v29 = 0;
        v63 = v29 & v69;
      }
      llvm::APInt::udivrem((llvm::APInt *)&v70, (const llvm::APInt *)&v63, (const llvm::APInt *)&v67, (llvm::APInt *)&v65, v28);
      v30 = v66;
      if (v66 >= 0x41 && v30 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v65) > 0x40)
        goto LABEL_60;
      v31 = v65;
      if (v30 < 0x41)
        v31 = &v65;
      if (*v31)
      {
LABEL_60:
        sub_22EFF605C((uint64_t)a2);
        v62 = (unsigned __int8 **)sub_22F072828(a1, v47, 2254, 0, 0);
        v48 = sub_22F3C4700(&v62);
        v49 = v64;
        v61 = v64;
        if (v64 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v60, (const llvm::APInt *)&v63);
          v49 = v61;
          v50 = v60;
        }
        else
        {
          v50 = v63;
          v60 = v63;
        }
        LODWORD(v74[0]) = v49;
        v73 = v50;
        v61 = 0;
        BYTE4(v74[0]) = 1;
        v51 = *sub_22F3C4700(v48);
        if (v51)
        {
          v52 = *v51;
          if (!*v51)
          {
            v52 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v51[1]);
            *v51 = v52;
          }
          v52[*v52 + 1] = 9;
          v53 = *v51;
          v54 = **v51;
          *v53 = v54 + 1;
          *(_QWORD *)&v53[8 * v54 + 16] = v8;
        }
        if (LODWORD(v74[0]) >= 0x41 && v73)
          MEMORY[0x2348A0E84](v73, 0x1000C8000313F17);
        if (v61 < 0x41)
          goto LABEL_82;
        v55 = v60;
        if (!v60)
          goto LABEL_82;
      }
      else
      {
        v32 = v71;
        if (v71 > 0x40)
          v33 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v70);
        else
          v33 = v71 + __clz(v70) - 64;
        v34 = v32 - v33;
        v35 = *(_QWORD *)(a1 + 8);
        v36 = sub_22EF67C8C(v35);
        v37 = sub_22EF5CDF0(v35, *(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF0));
        if (v37 >= 0x3D)
          v38 = 61;
        else
          v38 = v37;
        if (v34 <= v38)
        {
          v39 = sub_22EF5FE30(*(_QWORD *)(a1 + 8), v8, (const llvm::APInt *)&v67, 0, 0, 0);
          v40 = sub_22F02D5FC(a1, (uint64_t)a2, v39, a3);
          if (v68 >= 0x41)
            v41 = v67;
          else
            v41 = (int *)&v67;
          v42 = *v41;
          LODWORD(v73) = 0;
          sub_22EF52F1C((uint64_t)v74, 0, v42);
          v43 = 9;
          LODWORD(v73) = 9;
          if (*(_DWORD *)v40 >= 2u)
          {
            sub_22EF53BC0(v40);
            v43 = v73;
          }
          *(_DWORD *)v40 = v43;
          v44 = v74[0];
          v45 = v74[1];
          v46 = v74[2];
          *(_OWORD *)(v40 + 7) = v74[3];
          *(_OWORD *)(v40 + 5) = v46;
          *(_OWORD *)(v40 + 3) = v45;
          *(_OWORD *)(v40 + 1) = v44;
          sub_22F029A38(a3, a1, (uint64_t)a2, *(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0));
          goto LABEL_47;
        }
        if ((v25 & 1) != 0)
        {
          sub_22F02D590(a3, *(_QWORD *)(a1 + 8), *((_QWORD *)a2 + 1));
LABEL_47:
          v6 = 1;
          goto LABEL_48;
        }
        v62 = (unsigned __int8 **)sub_22F072CEC(a1, (uint64_t)a2, 2246, 0);
        v56 = v68;
        v59 = v68;
        if (v68 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v58, (const llvm::APInt *)&v67);
          v56 = v59;
          v57 = v58;
        }
        else
        {
          v57 = v67;
          v58 = v67;
        }
        LODWORD(v74[0]) = v56;
        v73 = (unint64_t)v57;
        v59 = 0;
        BYTE4(v74[0]) = 1;
        sub_22F3C4700(&v62);
        if (LODWORD(v74[0]) >= 0x41 && v73)
          MEMORY[0x2348A0E84](v73, 0x1000C8000313F17);
        if (v59 < 0x41 || (v55 = (unint64_t)v58) == 0)
        {
LABEL_82:
          v6 = 0;
LABEL_48:
          if (v64 >= 0x41 && v63)
            MEMORY[0x2348A0E84](v63, 0x1000C8000313F17);
          if (v66 >= 0x41 && v65)
            MEMORY[0x2348A0E84](v65, 0x1000C8000313F17);
          if (v68 >= 0x41 && v67)
            MEMORY[0x2348A0E84](v67, 0x1000C8000313F17);
          goto LABEL_57;
        }
      }
      MEMORY[0x2348A0E84](v55, 0x1000C8000313F17);
      goto LABEL_82;
    }
    v6 = 0;
  }
LABEL_57:
  if (v71 >= 0x41 && v70)
    MEMORY[0x2348A0E84](v70, 0x1000C8000313F17);
  return v6;
}

uint64_t sub_22F02836C(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  uint64_t v13[2];
  uint64_t v14;
  uint64_t v15[3];
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _BYTE v20[64];
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 1) != 0 || *(_DWORD *)(a1 + 820))
    return v4;
  if (!sub_22F02D35C(a1, "deallocate", 0xAuLL))
  {
    sub_22EFF605C((uint64_t)a2);
    sub_22F072828(a1, v10, 103, 0, 0);
    return 1;
  }
  memset(v15, 0, sizeof(v15));
  LODWORD(v16) = -1;
  v17 = 0;
  v18 = v20;
  v19 = 0x800000000;
  v21 = 0;
  v22 = 0;
  v5 = *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24));
  v13[0] = a1;
  v13[1] = (uint64_t)v15;
  LOBYTE(v14) = 0;
  v4 = 0;
  if (sub_22F00C45C(v13, v5))
  {
    v6 = a2[4];
    v7 = v6 - 1;
    if (v6 != 1)
    {
      v8 = 0;
      do
        sub_22F024D28(a1, *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4 + 2 * v8++] + ((unint64_t)*a2 >> 24)));
      while (v7 != (_DWORD)v8);
    }
    if ((v16 & 1) == 0)
    {
      if ((v23 & 1) != 0)
      {
        sub_22EFF605C((uint64_t)a2);
        sub_22F072D74(a1, v11, 2197, 0);
        goto LABEL_15;
      }
      sub_22F02D850(a1, (uint64_t)a2, (uint64_t)v15, 2u);
      if (v9)
      {
        sub_22F02DCA0((uint64_t **)(a1 + 792), (unint64_t)v15[0] >> 3);
LABEL_15:
        v4 = 1;
        goto LABEL_16;
      }
    }
    v4 = 0;
  }
LABEL_16:
  if (v18 != v20)
    free(v18);
  return v4;
}

uint64_t sub_22F028540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unsigned int i;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v23;
  int j;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 **v33;
  unsigned __int8 **v34;
  unsigned __int8 *v35;
  _BYTE *v36;
  uint64_t v37;
  int v38;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  unsigned int v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  char v55[8];
  unsigned int v56;
  char v57;

  if ((*(_DWORD *)(a4 + 28) & 0x7F) == 0x39)
    v10 = 9;
  else
    v10 = 5;
  sub_22F02DD88((uint64_t)v55, a1, a2, a3, v10);
  if (!v57)
    return 0;
  for (i = v56; ; ++i)
  {
    if (*(_DWORD *)(a3 + 56) < i)
    {
      v14 = a4;
      goto LABEL_11;
    }
    v12 = sub_22F02DED8(a3 + 24, i);
    v13 = sub_22EFD6498(a4, v12, 0);
    if (v13)
      break;
  }
  v14 = v13;
LABEL_11:
  if ((*(_BYTE *)(v14 + 82) & 8) != 0)
  {
    v33 = (unsigned __int8 **)sub_22F072CEC(a1, a2, 2267, 1);
    if (v33)
    {
      v34 = v33;
      v35 = *v33;
      if (!v35)
      {
        v35 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v34[1]);
        *v34 = v35;
      }
      v35[*v35 + 1] = 11;
      v36 = *v34;
      v37 = **v34;
      *v36 = v37 + 1;
      *(_QWORD *)&v36[8 * v37 + 16] = v14;
    }
    v38 = *(_DWORD *)(v14 + 24);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
      sub_22F072E10(a1, v38, 100);
    return 0;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v15)
    v16 = *(unsigned __int8 *)(v15 + 16) - 27 > 0xFFFFFFFD;
  else
    v16 = 0;
  if (!v16)
    v15 = sub_22F10CF48(v15);
  v17 = *(_QWORD *)(v15 + 24);
  v18 = *(_QWORD *)(*(_QWORD *)(a4 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v18)
    v19 = *(unsigned __int8 *)(v18 + 16) - 27 > 0xFFFFFFFD;
  else
    v19 = 0;
  if (!v19)
    v18 = sub_22F10CF48(v18);
  if (*(_QWORD *)(*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v18 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
  {
    v20 = *(_QWORD *)(*(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v20)
      v21 = *(unsigned __int8 *)(v20 + 16) - 27 > 0xFFFFFFFD;
    else
      v21 = 0;
    if (!v21)
      v20 = sub_22F10CF48(v20);
    v22 = *(_QWORD *)(v20 + 24);
    v23 = *(_DWORD *)(a5 + 8);
    if (v23 >= *(_DWORD *)(a5 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v23 = *(_DWORD *)(a5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a5 + 8 * v23) = v22;
    ++*(_DWORD *)(a5 + 8);
    for (j = i + 1; j != *(_DWORD *)(a3 + 56); ++j)
    {
      v40 = sub_22F02DED8(a3 + 24, j);
      v41 = sub_22EFD6498(a4, v40, 0);
      if (v41)
      {
        v42 = v41;
        v43 = *(_QWORD *)(*(_QWORD *)(v41 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v43)
          v44 = *(unsigned __int8 *)(v43 + 16) - 27 > 0xFFFFFFFD;
        else
          v44 = 0;
        if (!v44)
          v43 = sub_22F10CF48(v43);
        v45 = *(unsigned int *)(a5 + 8);
        if (*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v43 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)a5 + 8 * v45 - 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
        {
          v46 = *(_QWORD *)(*(_QWORD *)(v42 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (v46)
            v47 = *(unsigned __int8 *)(v46 + 16) - 27 > 0xFFFFFFFD;
          else
            v47 = 0;
          if (!v47)
          {
            v46 = sub_22F10CF48(v46);
            v45 = *(unsigned int *)(a5 + 8);
          }
          v48 = *(_QWORD *)(v46 + 24);
          if (v45 >= *(unsigned int *)(a5 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v45 = *(unsigned int *)(a5 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a5 + 8 * v45) = v48;
          ++*(_DWORD *)(a5 + 8);
        }
      }
    }
    v25 = *(_QWORD *)(*(_QWORD *)(a4 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v25)
      v26 = *(unsigned __int8 *)(v25 + 16) - 27 > 0xFFFFFFFD;
    else
      v26 = 0;
    if (!v26)
      v25 = sub_22F10CF48(v25);
    v27 = *(unsigned int *)(a5 + 8);
    if (*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v25 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)a5 + 8 * v27 - 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
    {
      v28 = *(_QWORD *)(*(_QWORD *)(a4 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v28)
        v29 = *(unsigned __int8 *)(v28 + 16) - 27 > 0xFFFFFFFD;
      else
        v29 = 0;
      if (!v29)
      {
        v28 = sub_22F10CF48(v28);
        LODWORD(v27) = *(_DWORD *)(a5 + 8);
      }
      v30 = *(_QWORD *)(v28 + 24);
      if (v27 >= *(_DWORD *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        LODWORD(v27) = *(_DWORD *)(a5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v27) = v30;
      ++*(_DWORD *)(a5 + 8);
    }
  }
  v31 = *(_WORD *)(v14 + 80) & 0x7F;
  v32 = -40;
  if (v31 > 0x46)
  {
    if (v31 != 83)
    {
      if (v31 == 71)
      {
        v32 = -56;
        goto LABEL_85;
      }
      if (v31 == 81)
        goto LABEL_85;
LABEL_80:
      v49 = v31 - 52;
      v50 = v31 - 33 >= 5;
      v51 = -48;
      if (!v50)
        v51 = -64;
      if (v49 >= 6)
        v32 = v51;
      else
        v32 = -72;
    }
  }
  else
  {
    if (v31 > 0x18)
      goto LABEL_79;
    if (v31 != 16)
    {
      if (((1 << v31) & 0x1066) != 0)
        goto LABEL_85;
      if (v31 != 24)
      {
LABEL_79:
        if (v31 == 70)
        {
          v32 = -64;
          goto LABEL_85;
        }
        goto LABEL_80;
      }
    }
    v32 = -48;
  }
LABEL_85:
  v52 = *(_QWORD *)(v14 + 72 + v32 + 16);
  v53 = (_QWORD *)(v52 & 0xFFFFFFFFFFFFFFF8);
  if ((v52 & 4) != 0)
    v53 = (_QWORD *)*v53;
  if (v53)
    v54 = (unint64_t)(v53 - 8);
  else
    v54 = 0;
  if (sub_22F02DF34(a1, a2, a3, v54, i))
    return v14;
  else
    return 0;
}

uint64_t sub_22F028A44(_QWORD *a1, int a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 **v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  int v26;
  unsigned __int8 **v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;

  v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  if (!a4 && v10 && (*((_BYTE *)a3 + 83) & 0xC0) != 0)
    return 0;
  if ((*((_DWORD *)a3 + 7) & 0x80) != 0)
    goto LABEL_16;
  if ((*(_BYTE *)(*(_QWORD *)(a1[1] + 2000) + 1) & 0x10) == 0 && (*((_DWORD *)a3 + 7) & 0x7Eu) - 54 <= 3)
  {
    v11 = (*(uint64_t (**)(_QWORD *))(*a3 + 32))(a3);
    if ((*(_BYTE *)(v11 + 82) & 0xC) != 0 || sub_22EFD7260(v11))
      sub_22F072D74((uint64_t)a1, a2, 2288, 0);
  }
  if (a4)
  {
    if ((*(_BYTE *)(a4 + 28) & 0x80) != 0)
    {
LABEL_16:
      sub_22F072828((uint64_t)a1, a2, 103, 0, 0);
      return 0;
    }
    if (a5 && (*(_QWORD *)(a4 + 80) & 0xC0000000) != 0)
      return 1;
  }
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*a1 + 96))(a1) + 2000) + 1) & 2) == 0)
    goto LABEL_16;
  if (a4)
    a3 = (_QWORD *)a4;
  if ((*((_DWORD *)a3 + 7) & 0x7F) != 0x37)
  {
    v13 = 0;
    goto LABEL_25;
  }
  if ((*((_BYTE *)a3 + 87) & 0x20) == 0)
  {
    v13 = 1;
LABEL_25:
    v14 = (unsigned __int8 **)sub_22F072828((uint64_t)a1, a2, 2218, 1, 0);
    if (v14)
    {
      v15 = v14;
      v16 = a3[10] & 0xC0000000;
      v17 = *v14;
      if (!v17)
      {
        v17 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v15[1]);
        *v15 = v17;
      }
      v17[*v17 + 1] = 2;
      v18 = *v15;
      v19 = **v15;
      *v18 = v19 + 1;
      *(_QWORD *)&v18[8 * v19 + 16] = v16 != 0;
      v18[(v19 + 1) + 1] = 2;
      v20 = *v15;
      v21 = **v15;
      v22 = v21 + 1;
      *v20 = v21 + 1;
      *(_QWORD *)&v20[8 * v21 + 16] = v13;
      v23 = a3;
LABEL_29:
      v20[v22 + 1] = 11;
      v24 = *v15;
      v25 = **v15;
      *v24 = v25 + 1;
      *(_QWORD *)&v24[8 * v25 + 16] = a3;
      goto LABEL_31;
    }
    v23 = a3;
    goto LABEL_31;
  }
  if ((*(_BYTE *)(a3[22] + 83) & 0xC0) != 0)
    v23 = a3;
  else
    v23 = (_QWORD *)a3[22];
  if (!v23)
  {
    v13 = 0;
    a3 = 0;
    goto LABEL_25;
  }
  if ((*((_BYTE *)v23 + 87) & 0x20) == 0)
  {
    v13 = 1;
    a3 = v23;
    goto LABEL_25;
  }
  v27 = (unsigned __int8 **)sub_22F072828((uint64_t)a1, a2, 2219, 1, 0);
  v15 = v27;
  v28 = v23[22];
  v29 = v28 + 72;
  v30 = *(_WORD *)(v28 + 80) & 0x7F;
  v31 = -40;
  if (v30 <= 70)
  {
    if (v30 <= 0x18)
    {
      if (v30 == 16)
      {
LABEL_43:
        v31 = -48;
        goto LABEL_55;
      }
      if (((1 << v30) & 0x1066) != 0)
        goto LABEL_55;
      if (v30 == 24)
        goto LABEL_43;
    }
    if (v30 == 70)
    {
LABEL_53:
      v31 = -64;
      goto LABEL_55;
    }
    goto LABEL_51;
  }
  if (v30 == 83)
    goto LABEL_55;
  if (v30 == 71)
  {
    v31 = -56;
    goto LABEL_55;
  }
  if (v30 != 81)
  {
LABEL_51:
    if ((v30 - 52) >= 6)
    {
      if ((v30 - 33) >= 5)
        goto LABEL_43;
      goto LABEL_53;
    }
    v31 = -72;
  }
LABEL_55:
  v32 = *(_QWORD *)(v29 + v31 + 16);
  v33 = (_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF8);
  if ((v32 & 4) != 0)
    v33 = (_QWORD *)*v33;
  if (v33)
    a3 = v33 - 8;
  else
    a3 = 0;
  if (v27)
  {
    v20 = *v27;
    if (!*v15)
    {
      v20 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v15[1]);
      *v15 = v20;
    }
    v22 = *v20;
    goto LABEL_29;
  }
LABEL_31:
  v26 = *((_DWORD *)v23 + 6);
  result = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  if ((_DWORD)result)
  {
    sub_22F072E10((uint64_t)a1, v26, 100);
    return 0;
  }
  return result;
}

uint64_t sub_22F028DA0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  _QWORD v20[3];
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[11];
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  llvm *v31;
  unsigned int v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  _QWORD v37[5];
  void *v38;
  uint64_t v39;
  _DWORD v40[26];
  uint64_t v41;
  __int16 v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a3 + 52) & 1) != 0)
    return 1;
  memset(v20, 0, sizeof(v20));
  v21 = -1;
  v22 = 0;
  v23 = v25;
  v24 = 0x800000000;
  v25[8] = 0;
  v25[9] = 0;
  sub_22F01D8E0(v20, *(_QWORD *)(a1 + 8), a3);
  v10 = sub_22F10AEAC(*(_QWORD *)(*a4 & 0xFFFFFFFFFFFFFFF0));
  if (a5 == 1)
  {
LABEL_3:
    sub_22F00676C((uint64_t)v20, a3);
    v11 = 1;
    goto LABEL_29;
  }
  v12 = v10;
  v13 = 1;
  while (1)
  {
    v14 = sub_22F10AEAC(*(_QWORD *)(a4[v13] & 0xFFFFFFFFFFFFFFF0));
    if (v12 != v14)
      break;
LABEL_20:
    v13 = (v13 + 1);
    v12 = v14;
    if (a5 == v13)
      goto LABEL_3;
  }
  v26 = 0;
  v27 = (uint64_t)&v27;
  v28 = &v27;
  v29 = 0;
  v15 = 40;
  v30 = 1;
  do
  {
    *(unint64_t *)((char *)&v26 + v15) = 0;
    v15 += 16;
  }
  while (v15 != 168);
  v33 = v37;
  v34 = v37;
  v35 = 4;
  v36 = 0;
  v37[4] = 0;
  v38 = v40;
  v39 = 0x400000000;
  v40[24] = 0;
  v41 = 0;
  v42 = 256;
  v43 = 0;
  sub_22EFB36DC(v12, v14, &v26);
  v16 = *((unsigned int *)v28 + 6);
  if (!(_DWORD)v16)
  {
LABEL_13:
    if (v38 != v40)
      free(v38);
    if (v34 != v33)
      free(v34);
    if ((v30 & 1) == 0)
      llvm::deallocate_buffer(v31, (void *)(16 * v32));
    sub_22E687D9C(&v27);
    goto LABEL_20;
  }
  v17 = (unint64_t *)(v28[2] + 8);
  v18 = 24 * v16;
  while ((sub_22F02EAA0(a1, a2, (uint64_t)v20, *v17, *(v17 - 1)) & 1) != 0)
  {
    v17 += 3;
    v18 -= 24;
    if (!v18)
      goto LABEL_13;
  }
  if (v38 != v40)
    free(v38);
  if (v34 != v33)
    free(v34);
  if ((v30 & 1) == 0)
    llvm::deallocate_buffer(v31, (void *)(16 * v32));
  sub_22E687D9C(&v27);
  v11 = 0;
LABEL_29:
  if (v23 != v25)
    free(v23);
  return v11;
}

uint64_t sub_22F029080(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  unsigned __int8 **v12;
  uint64_t v13;
  unint64_t v14;
  void **v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 **v24;
  unsigned __int8 **v25;
  unsigned __int8 *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int8 **v31;
  unsigned __int8 **v32;
  unsigned __int8 *v33;
  _BYTE *v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD v71[3];
  uint64_t v72[4];
  char v73;
  uint64_t v74;
  _BYTE v75[24];
  void *__p[2];
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  _BYTE v82[64];
  __int128 v83;
  char v84;
  void *v85;
  uint64_t v86;
  _BYTE v87[128];
  uint64_t v88[9];
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD v96[2];
  unsigned int v97;
  int v98;
  _DWORD *v99;
  uint64_t v100;
  _DWORD v101[4];
  __int128 v102;
  int v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  if (!*(_DWORD *)a4)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v10 || (*(_DWORD *)(v10 + 16) & 0xFF800FF) != 114294795)
    {
      LODWORD(v89) = 0;
      sub_22F00676C(a3, (uint64_t)&v89);
      v12 = (unsigned __int8 **)sub_22F072828(a1, a2, 2203, 0, 0);
      v13 = *(_QWORD *)(a1 + 8);
      v14 = sub_22EF5F8C4(v13, a5, 1);
      sub_22EF55AB4((uint64_t)&v89, v13, v14, __p);
      if (v12)
      {
        if (v77 >= 0)
          v15 = __p;
        else
          v15 = (void **)__p[0];
        if (v77 >= 0)
          v16 = HIBYTE(v77) & 0x7F;
        else
          v16 = (size_t)__p[1];
        sub_22E3B89A8(v12, v15, v16);
      }
      if (SHIBYTE(v77) < 0)
        operator delete(__p[0]);
      if (v89 >= 2)
        sub_22EF53BC0((uint64_t *)&v89);
      return 0;
    }
  }
  v17 = a2;
  sub_22E5BBE34((uint64_t)v75, a2, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16480), 0, 0, 0);
  v18 = sub_22EF5C728(*(_QWORD *)(a1 + 8), a5);
  if (v18)
  {
    v19 = v18;
    if (*(_BYTE *)(v18 + 16) == 2)
    {
      v20 = (unint64_t *)(v18 + 40);
      if (*(_DWORD *)(v18 + 48) >= 0x41u)
        v20 = (unint64_t *)*v20;
      v21 = *v20;
      v22 = *(_QWORD *)(v18 + 32);
      v89 = *(_OWORD *)a3;
      v90 = *(_QWORD *)(a3 + 16);
      v91 = *(_OWORD *)(a3 + 24);
      v92 = *(_QWORD *)(a3 + 40);
      v93 = &v95;
      v94 = 0x800000000;
      if (*(_DWORD *)(a3 + 56))
        sub_22F016FFC((uint64_t)&v93, a3 + 48);
      v102 = *(_OWORD *)(a3 + 128);
      LOBYTE(v103) = *(_BYTE *)(a3 + 144);
      sub_22F029A38((uint64_t)&v89, a1, (uint64_t)v75, v19);
      if (sub_22F01DC1C(a1, (uint64_t)v75, (uint64_t)&v89, v22, v21))
      {
        if (!v21 || v21 <= *(unsigned int *)(a4 + 16))
        {
          if (v21)
            goto LABEL_50;
LABEL_53:
          if (*(_DWORD *)a4 >= 2u)
            sub_22EF53BC0((uint64_t *)a4);
          *(_DWORD *)a4 = 0;
          v27 = 1;
          goto LABEL_57;
        }
        sub_22F01CCF4(a4, *(_DWORD *)(a4 + 20) - 1);
LABEL_50:
        while (1)
        {
          v49 = *(_QWORD *)(a4 + 8);
          if (!sub_22F01DC1C(a1, (uint64_t)v75, (uint64_t)&v89, v22, -1)
            || (sub_22F029080(a1, v17, &v89, v49 + 72 * (v21 - 1), v22) & 1) == 0)
          {
            break;
          }
          if (!--v21)
            goto LABEL_53;
        }
      }
      v27 = 0;
LABEL_57:
      if (v93 != &v95)
        free(v93);
      return v27;
    }
  }
  v23 = sub_22F10C2A4(*(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0));
  if (v23)
  {
    v30 = v23;
    if ((*(_DWORD *)(v23 + 28) & 0x7Fu) - 35 < 3)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v23 + 104) + 96), *(_QWORD *)(v23 + 104));
      if (*(_DWORD *)(*(_QWORD *)(v30 + 128) + 20))
      {
        v31 = (unsigned __int8 **)sub_22F072828(a1, a2, 2287, 0, 0);
        if (v31)
        {
          v32 = v31;
          v33 = *v31;
          if (!v33)
          {
            v33 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v32[1]);
            *v32 = v33;
          }
          v27 = 0;
          v33[*v33 + 1] = 11;
          v34 = *v32;
          v35 = **v32;
          *v34 = v35 + 1;
          *(_QWORD *)&v34[8 * v35 + 16] = v30;
          return v27;
        }
        return 0;
      }
      v36 = sub_22EFD10F8(v30);
      if (v36)
      {
        v37 = (_QWORD *)v36;
        if ((*(_BYTE *)(v36 + 82) & 0x80) == 0 && (*(_QWORD *)(v30 + 72) & 0x100E000) != 0x1004000)
        {
          if (!sub_22F029AD8((_DWORD *)a1, a2))
            return 0;
          v74 = 0;
          v38 = sub_22EFBF910((uint64_t)v37, &v74);
          v39 = v74;
          if (!sub_22F028A44((_QWORD *)a1, a2, v37, v74, v38))
            return 0;
          *(_QWORD *)&v89 = &off_24FAC5960;
          *((_QWORD *)&v89 + 1) = a1;
          v90 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)&v91 = v39;
          *((_QWORD *)&v91 + 1) = a3;
          v92 = 0;
          v94 = 0;
          v93 = 0;
          v96[1] = 0;
          v96[0] = 0;
          v95 = v96;
          v101[0] = 1;
          v101[2] = 1;
          v41 = *(_DWORD *)(a1 + 32);
          v40 = *(_DWORD *)(a1 + 36);
          v97 = a2;
          v98 = v40;
          *(_QWORD *)(a1 + 24) = &v89;
          v100 = 0x200000001;
          v102 = 0uLL;
          v103 = 0;
          *(_DWORD *)(a1 + 32) = v41 + 1;
          *(_DWORD *)(a1 + 36) = v40 + 1;
          v42 = *(_QWORD *)(v30 + 104);
          v99 = v101;
          sub_22E3CD31C((uint64_t *)(v42 + 96), v42);
          v43 = *(_DWORD *)(*(_QWORD *)(v30 + 128) + 16);
          v44 = *(void **)a3;
          v45 = *(void **)(a3 + 8);
          v46 = *(_QWORD *)(a3 + 48);
          v47 = *(unsigned int *)(a3 + 56);
          v71[2] = a1;
          v72[0] = (uint64_t)v44;
          v72[1] = (uint64_t)v45;
          v72[2] = v46;
          v72[3] = v47;
          __p[0] = v44;
          __p[1] = v45;
          v77 = v46;
          *(_QWORD *)&v78 = v47;
          DWORD2(v78) = 4;
          sub_22F02BBE0((uint64_t)&v85, a1 + 768, (uint64_t)__p);
          v73 = v87[0];
          if (v87[0])
          {
            LODWORD(v88[0]) = 0;
            v71[0] = v88;
            v71[1] = 0;
            v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 64))(v39);
            if (sub_22F029BF0(v71, a1, v48, 0))
            {
              if ((*(_DWORD *)(v30 + 72) & 0xE000) == 0x4000)
              {
                v27 = 1;
              }
              else
              {
                v70 = sub_22F0C975C(*(_QWORD *)(a1 + 8), v30);
                v51 = sub_22EFC3B90(v30);
                v85 = v87;
                v86 = 0x1000000000;
                sub_22F3C47B4((uint64_t)&v85, v51);
                if ((_DWORD)v86)
                {
                  v52 = 8 * v86;
                  v68 = (char *)v85 - 8;
                  while (1)
                  {
                    v53 = *(_QWORD *)&v68[v52];
                    if ((*(_BYTE *)(v53 + 68) & 1) == 0 || *(_QWORD *)(v53 + 40))
                    {
                      *(_OWORD *)__p = *(_OWORD *)a3;
                      v54 = *(_QWORD *)(a3 + 16);
                      v78 = *(_OWORD *)(a3 + 24);
                      v79 = *(_QWORD *)(a3 + 40);
                      v77 = v54;
                      v80 = v82;
                      v81 = 0x800000000;
                      if (*(_DWORD *)(a3 + 56))
                        sub_22F016FFC((uint64_t)&v80, a3 + 48);
                      v83 = *(_OWORD *)(a3 + 128);
                      v84 = *(_BYTE *)(a3 + 144);
                      if (sub_22F02B8DC(a1, (uint64_t)v75, (uint64_t)__p, v53, v70))
                      {
                        v55 = sub_22EFC306C(v53);
                        v56 = sub_22F029080(a1, v17, __p, *(_QWORD *)(a4 + 8) + 72 * (*(_DWORD *)(a4 + 16) + v55), *(_QWORD *)(v53 + 48)) ^ 1;
                      }
                      else
                      {
                        v56 = 1;
                      }
                      if (v80 != v82)
                        free(v80);
                      if (v56)
                        break;
                    }
                    v52 -= 8;
                    if (!v52)
                      goto LABEL_85;
                  }
LABEL_104:
                  v27 = 0;
                }
                else
                {
LABEL_85:
                  if (v43)
                    *(_DWORD *)sub_22F02D290(a1 + 768, (uint64_t)v72) = 5;
                  v57 = sub_22E46A3A0(v30);
                  v59 = v58;
                  v69 = v57;
                  v60 = v43 - 1;
                  while (v59 != v69)
                  {
                    v61 = **(_QWORD **)(v59 - 8);
                    v62 = *(_QWORD *)(v61 & 0xFFFFFFFFFFFFFFF0);
                    if ((*(_BYTE *)(v62 + 8) & 0xF) != 0)
                      v62 = (unint64_t)sub_22F10D2BC(v61);
                    *(_OWORD *)__p = *(_OWORD *)a3;
                    v63 = *(_QWORD *)(a3 + 16);
                    v78 = *(_OWORD *)(a3 + 24);
                    v79 = *(_QWORD *)(a3 + 40);
                    v77 = v63;
                    v80 = v82;
                    v81 = 0x800000000;
                    if (*(_DWORD *)(a3 + 56))
                      sub_22F016FFC((uint64_t)&v80, a3 + 48);
                    v64 = (uint64_t *)(v62 & 0xFFFFFFFFFFFFFFF0);
                    v83 = *(_OWORD *)(a3 + 128);
                    v84 = *(_BYTE *)(a3 + 144);
                    v65 = sub_22F10C2A4(*v64);
                    if (v65)
                    {
                      if ((*(_DWORD *)(v65 + 28) & 0x7Fu) - 35 >= 3)
                        v66 = 0;
                      else
                        v66 = v65;
                    }
                    else
                    {
                      v66 = 0;
                    }
                    if (sub_22F02BA20(a1, (uint64_t)v75, (uint64_t)__p, v30, v66, v70))
                      v67 = sub_22F029080(a1, v17, __p, *(_QWORD *)(a4 + 8) + 72 * v60, v64) ^ 1;
                    else
                      v67 = 1;
                    if (v80 != v82)
                      free(v80);
                    --v60;
                    v59 -= 24;
                    if (v67)
                      goto LABEL_104;
                  }
                  if (*(_DWORD *)a4 >= 2u)
                    sub_22EF53BC0((uint64_t *)a4);
                  *(_DWORD *)a4 = 0;
                  v27 = 1;
                }
                if (v85 != v87)
                  free(v85);
              }
            }
            else
            {
              v27 = 0;
            }
            if (LODWORD(v88[0]) >= 2)
              sub_22EF53BC0(v88);
            sub_22F02D2F8(a1 + 768, v72);
          }
          else
          {
            sub_22F072828(a1, v17, 2205, 0, 0);
            v27 = 0;
          }
          sub_22F00AA08((uint64_t)&v89);
          return v27;
        }
      }
      else
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v30 + 104) + 96), *(_QWORD *)(v30 + 104));
        if ((**(_QWORD **)(v30 + 128) & 0x100000000000) == 0)
        {
          sub_22F072828(a1, a2, 103, 0, 0);
          return 0;
        }
      }
LABEL_62:
      if (*(_DWORD *)a4 >= 2u)
        sub_22EF53BC0((uint64_t *)a4);
      *(_DWORD *)a4 = 0;
      return 1;
    }
  }
  if (!sub_22F115260(a5))
    goto LABEL_62;
  v24 = (unsigned __int8 **)sub_22F072828(a1, a2, 2278, 0, 0);
  if (!v24)
    return 0;
  v25 = v24;
  v26 = *v24;
  if (!v26)
  {
    v26 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v25[1]);
    *v25 = v26;
  }
  v27 = 0;
  v26[*v26 + 1] = 9;
  v28 = *v25;
  v29 = **v25;
  *v28 = v29 + 1;
  *(_QWORD *)&v28[8 * v29 + 16] = a5;
  return v27;
}

uint64_t sub_22F029A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned int v7;
  int v8;
  int v9;
  _QWORD *v10;

  result = sub_22F02BACC(a1, a2, a3, 3u);
  if ((_DWORD)result)
  {
    v7 = *(_DWORD *)(a1 + 56);
    if (v7 >= *(_DWORD *)(a1 + 60))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_DWORD *)(a1 + 56);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v7) = 0;
    v8 = *(_DWORD *)(a1 + 56) + 1;
    *(_DWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a4 + 32);
    v9 = *(_DWORD *)(a1 + 24) | 8;
    *(_DWORD *)(a1 + 24) = v9;
    v10 = (_QWORD *)(a4 + 40);
    if (*(_DWORD *)(a4 + 48) >= 0x41u)
      v10 = (_QWORD *)*v10;
    *(_QWORD *)(a1 + 32) = *v10;
    *(_DWORD *)(a1 + 24) = v9 & 0xF | (16 * v8);
  }
  return result;
}

uint64_t sub_22F029AD8(_DWORD *a1, int a2)
{
  unsigned int v4;
  unsigned __int8 **v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t result;
  unsigned __int8 *v10;
  uint64_t v11;

  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1) && a1[8] > 1u)
    return 0;
  if (!a1[9])
  {
    sub_22F072828((uint64_t)a1, a2, 2192, 0, 0);
    return 0;
  }
  v4 = a1[8];
  if (v4 <= *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 96))(a1) + 2000) + 172))
    return 1;
  v5 = (unsigned __int8 **)sub_22F072828((uint64_t)a1, a2, 2201, 0, 0);
  v6 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 96))(a1);
  if (!v5)
    return 0;
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 2000) + 172);
  v8 = *v5;
  if (!*v5)
  {
    v8 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v5[1]);
    *v5 = v8;
  }
  result = 0;
  v8[*v8 + 1] = 3;
  v10 = *v5;
  v11 = **v5;
  *v10 = v11 + 1;
  *(_QWORD *)&v10[8 * v11 + 16] = v7;
  return result;
}

uint64_t sub_22F029BF0(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v8;
  int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  char v18;
  int v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned __int8 *v28;
  _DWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  _DWORD *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char v102;
  _QWORD *v103;
  unsigned int v104;
  uint64_t v105;
  _DWORD *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  unint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  unint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  unsigned int v136;
  char v137;
  char v138;
  int v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t *v142;
  unint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  unsigned __int16 *v161;
  unsigned __int16 *v162;
  unsigned __int16 *v163;
  unint64_t v164;
  uint64_t v165;
  int v166;
  int v167;
  _BOOL4 v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  unsigned int v176;
  uint64_t v177;
  _DWORD *v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  _QWORD *v188;
  BOOL v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  unsigned int v195;
  uint64_t v196;
  _DWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char v237;
  unsigned int v238;
  uint64_t v239;
  _DWORD *v240;
  unsigned int v241;
  uint64_t v242;
  _DWORD *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  unsigned int v249;
  uint64_t v250;
  _DWORD *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char v271;
  unsigned int v272;
  uint64_t v273;
  _DWORD *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  char v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  char v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  char v287;
  unsigned int v288;
  uint64_t v289;
  _DWORD *v290;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unsigned int v296;
  unsigned __int8 v297;
  uint64_t v298;
  unsigned int v299;
  unsigned __int8 v300;
  uint64_t v301;
  unsigned int v302;
  char v303;

  v8 = *(_DWORD *)(a2 + 40);
  if (!v8)
  {
LABEL_54:
    sub_22F0D5A50((uint64_t)a3);
    v25 = v24;
    v26 = a2;
    v27 = 2269;
LABEL_55:
    sub_22F072828(v26, v25, v27, 0, 0);
    return 0;
  }
  while (2)
  {
    *(_DWORD *)(a2 + 40) = v8 - 1;
    if (!a4)
      goto LABEL_8;
    v11 = *a3;
    v4 = 5;
    if (v11 <= 0x61)
    {
      switch(*a3)
      {
        case 8u:
        case 0xDu:
          goto LABEL_9;
        case 0xCu:
          v140 = *((_QWORD *)a3 + 1);
          if ((v140 & 1) != 0)
          {
            v141 = (uint64_t *)((v140 & 0xFFFFFFFFFFFFFFFELL) + 8);
            v142 = &v141[*(unsigned int *)(v140 & 0xFFFFFFFFFFFFFFFELL)];
          }
          else
          {
            if (v140)
              v141 = (uint64_t *)(a3 + 8);
            else
              v141 = 0;
            if (v140)
              v142 = (uint64_t *)(a3 + 16);
            else
              v142 = 0;
          }
          while (2)
          {
            if (v141 == v142)
              return v4;
            v188 = (_QWORD *)*v141;
            if (*v141)
              v189 = (*(_DWORD *)(*v141 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9;
            else
              v189 = 0;
            if (!v189
              || sub_22F02CB08(a2, *v141)
              && (!sub_22E3CB5E0((uint64_t)v188) || sub_22EFBC5B4((uint64_t)v188) || sub_22F02CC78(a2, v188)))
            {
              ++v141;
              continue;
            }
            break;
          }
          return 0;
        case 0xEu:
          v13 = *(_DWORD *)(a2 + 216);
          sub_22F0270D4(*(_DWORD **)(a2 + 24));
          v14 = *((_QWORD *)a3 + 1);
          if (!v14 || (v15 = sub_22F029BF0(a1, a2, v14, a4), (_DWORD)v15 == 5))
          {
            v15 = sub_22F02C9DC((uint64_t)a1, a2, *((_QWORD *)a3 + 5), a4);
            if ((_DWORD)v15 == 3)
            {
              v16 = *((_QWORD *)a3 + 4);
              if (v16)
              {
                if ((*(_BYTE *)(v16 + 2) & 1) == 0)
                {
                  v17 = *(_DWORD *)(a2 + 216);
                  sub_22F0270D4(*(_DWORD **)(a2 + 24));
                  if ((sub_22F024D28(a2, v16) & 1) != 0)
                  {
                    v18 = 1;
                    v19 = sub_22F05B164(a2, 1, v17);
                    --*(_DWORD *)(*(_QWORD *)(a2 + 24) + 104);
                    if (!v19)
                    {
                      v4 = 0;
                      goto LABEL_41;
                    }
                    goto LABEL_40;
                  }
                  if (v17 != -1)
                    sub_22F05B164(a2, 0, v17);
                  v4 = 0;
                  --*(_DWORD *)(*(_QWORD *)(a2 + 24) + 104);
LABEL_36:
                  v18 = 1;
                  goto LABEL_41;
                }
                **(_BYTE **)(a2 + 16) = 1;
                if (*(_DWORD *)(a2 + 840) != 3
                  && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 1) == 0
                  && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) & 1) == 0)
                {
                  v4 = 0;
                  goto LABEL_36;
                }
              }
LABEL_40:
              v18 = 0;
              v4 = 5;
LABEL_41:
              if (v13 != -1)
              {
                v20 = a1;
                v21 = *(_DWORD *)(a2 + 216);
                if (v21 > v13)
                {
                  v22 = 32 * (v21 - 1);
                  do
                  {
                    v23 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 208) + v22) & 0xFFFFFFFFFFFFFFF8);
                    if (*v23 >= 2u)
                      sub_22EF53BC0((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 208) + v22) & 0xFFFFFFFFFFFFFFF8));
                    *v23 = 0;
                    --v21;
                    v22 -= 32;
                  }
                  while (v13 < v21);
                }
                *(_DWORD *)(a2 + 216) = v13;
                a1 = v20;
              }
              --*(_DWORD *)(*(_QWORD *)(a2 + 24) + 104);
              if ((v18 & 1) != 0)
                return v4;
              goto LABEL_8;
            }
          }
          v4 = v15;
          goto LABEL_36;
        case 0x10u:
          v143 = *(unsigned int *)(a2 + 216);
          sub_22F0270D4(*(_DWORD **)(a2 + 24));
          v144 = *(unsigned __int16 *)a3;
          if ((v144 & 0x2000) == 0)
            goto LABEL_264;
          v145 = *((_QWORD *)a3 + 2);
          if (!v145)
            goto LABEL_264;
          v4 = sub_22F029BF0(a1, a2, v145, a4);
          if ((_DWORD)v4 != 5)
            goto LABEL_432;
          v144 = *(unsigned __int16 *)a3;
LABEL_264:
          v146 = sub_22F029BF0(a1, a2, *(_QWORD *)&a3[8 * ((v144 >> 12) & 1) + 24 + 8 * ((v144 >> 13) & 1)], a4);
          v4 = v146;
          if (!(_DWORD)v146)
            goto LABEL_432;
          if ((_DWORD)v146 == 5)
          {
            v147 = *(unsigned __int16 *)a3;
            if ((v147 & 0x800) != 0
              && (v148 = *(_QWORD *)&a3[8 * ((v147 >> 13) & 1) + 32 + 8 * ((v147 >> 12) & 1)]) != 0)
            {
              v149 = sub_22F029BF0(a1, a2, v148, a4);
              v4 = v149;
              if ((_DWORD)v149 && (_DWORD)v149 != 5)
              {
                v150 = *(unsigned int *)(a2 + 216);
                v151 = 32 * v150 - 32;
                v152 = v150 + 1;
                while (--v152 > v143)
                {
                  v153 = v151 - 32;
                  v154 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v151), a2, 1);
                  v155 = 0;
                  v151 = v153;
                  if ((v154 & 1) == 0)
                    goto LABEL_439;
                }
LABEL_438:
                v155 = v4;
LABEL_439:
                *(_DWORD *)(a2 + 216) = v143;
                v4 = v155;
                goto LABEL_455;
              }
            }
            else
            {
              v4 = 5;
            }
LABEL_432:
            if ((_DWORD)v143 == -1)
              goto LABEL_455;
            v241 = *(_DWORD *)(a2 + 216);
            if (v241 > v143)
            {
              v242 = 32 * (v241 - 1);
              do
              {
                v243 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 208) + v242) & 0xFFFFFFFFFFFFFFF8);
                if (*v243 >= 2u)
                  sub_22EF53BC0((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 208) + v242) & 0xFFFFFFFFFFFFFFF8));
                *v243 = 0;
                --v241;
                v242 -= 32;
              }
              while (v143 < v241);
            }
            goto LABEL_438;
          }
          v218 = *(unsigned int *)(a2 + 216);
          v219 = 32 * v218 - 32;
          v220 = v218 + 1;
          while (--v220 > v143)
          {
            v221 = v219 - 32;
            v222 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v219), a2, 1);
            v219 = v221;
            if ((v222 & 1) == 0)
            {
              v155 = 0;
              goto LABEL_439;
            }
          }
          goto LABEL_438;
        default:
          return v4;
      }
    }
    if (*a3 > 0xEAu)
    {
      if (v11 != 235)
      {
        if (v11 != 236)
          return v4;
        v4 = sub_22F02C9DC((uint64_t)a1, a2, *(_QWORD *)&a3[8 * (((unint64_t)*(unsigned __int16 *)a3 >> 8) & 1) + 24], a4);
        if ((_DWORD)v4 != 3)
          return v4;
        goto LABEL_8;
      }
    }
    else
    {
      if ((v11 - 98) < 2)
      {
        if ((unsigned __int8 *)a4 == a3)
          a4 = 0;
LABEL_8:
        v11 = *a3;
        v5 = v4;
        goto LABEL_9;
      }
      if (v11 != 101)
        return v4;
    }
LABEL_9:
    if (v11 > 92)
    {
      switch(v11)
      {
        case ']':
          v121 = *((_QWORD *)a3 + 1);
          v122 = *(_DWORD *)(a2 + 216);
          sub_22F0270D4(*(_DWORD **)(a2 + 24));
          if (!v121)
            goto LABEL_405;
          if ((*(_BYTE *)(v121 + 2) & 1) != 0)
          {
            **(_BYTE **)(a2 + 16) = 1;
            if (*(_DWORD *)(a2 + 840) != 3
              && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 1) == 0)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
            }
          }
          else
          {
            v123 = *a1;
            v124 = a1[1];
            if (v124)
            {
              if ((sub_22F006CB0(v123, a2, v124, v121, 0) & 1) != 0)
                goto LABEL_405;
            }
            else if (sub_22F009DC4(v123, a2, v121))
            {
LABEL_405:
              v4 = sub_22F05B164(a2, 1, v122);
              goto LABEL_455;
            }
          }
          if (v122 == -1)
            goto LABEL_409;
          v179 = a2;
          v180 = v122;
          goto LABEL_408;
        case '^':
        case '_':
        case 'a':
          goto LABEL_232;
        case 'b':
          v12 = &a3[8 * (((unint64_t)*(unsigned __int16 *)a3 >> 8) & 1) + 32];
          goto LABEL_26;
        case 'c':
          v12 = a3 + 24;
          goto LABEL_26;
        case 'd':
          v115 = *(unsigned int *)(a2 + 216);
          sub_22F0270D4(*(_DWORD **)(a2 + 24));
          v302 = 1;
          v301 = 0;
          v303 = 0;
          if ((*(_WORD *)a3 & 0x100) == 0)
            goto LABEL_223;
          v125 = *((_QWORD *)a3 + 3);
          if (!v125)
            goto LABEL_223;
          v126 = sub_22F029BF0(a1, a2, v125, 0);
          v4 = v126;
          if (!(_DWORD)v126)
            goto LABEL_445;
          if ((_DWORD)v126 == 2)
          {
LABEL_223:
            v127 = *(_DWORD *)(a2 + 216);
            sub_22F0270D4(*(_DWORD **)(a2 + 24));
            v128 = *(unsigned __int16 *)a3;
            if ((v128 & 0x200) != 0)
            {
              v292 = *(_QWORD *)&a3[8 * ((v128 >> 8) & 1) + 24];
              if (v292)
              {
                v293 = *(_QWORD *)(v292 + 8);
                if (v293)
                {
                  if (!sub_22F02CE98(a2, v293))
                    goto LABEL_226;
                  LODWORD(v128) = *(unsigned __int16 *)a3;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)&a3[8 * ((v128 >> 8) & 1)
                                          + 24
                                          + 8 * ((v128 >> 9) & 1)]
                           + 2) & 1) != 0)
            {
              **(_BYTE **)(a2 + 16) = 1;
              if (*(_DWORD *)(a2 + 840) != 3
                && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 1) == 0
                && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) & 1) == 0)
              {
                goto LABEL_226;
              }
            }
            else if ((sub_22F0174A0() & 1) == 0)
            {
LABEL_226:
              if (v127 != -1)
                sub_22F05B164(a2, 0, v127);
              v4 = 0;
              --*(_DWORD *)(*(_QWORD *)(a2 + 24) + 104);
              goto LABEL_445;
            }
            v160 = sub_22F05B164(a2, 1, v127);
            --*(_DWORD *)(*(_QWORD *)(a2 + 24) + 104);
            if (!v160)
            {
LABEL_317:
              v4 = 0;
              goto LABEL_445;
            }
            v161 = (unsigned __int16 *)*((_QWORD *)a3 + 1);
            if (v161)
            {
              v162 = 0;
              do
              {
                v163 = v161;
                if (*(_BYTE *)v161 != 99)
                {
                  sub_22F007D7C(&v298, *((_QWORD *)v161 + 3), *(_QWORD *)(a2 + 8), 0);
                  v164 = *v161;
                  if ((v164 & 0x100) != 0 && (v165 = *(_QWORD *)&v161[4 * ((v164 >> 8) & 1) + 12]) != 0)
                  {
                    sub_22F007D7C(&v295, v165, *(_QWORD *)(a2 + 8), 0);
                    v166 = v300;
                  }
                  else
                  {
                    v296 = v299;
                    if (v299 > 0x40)
                      llvm::APInt::initSlowCase((llvm::APInt *)&v295, (const llvm::APInt *)&v298);
                    else
                      v295 = v298;
                    v166 = v300;
                    v297 = v300;
                  }
                  if (v166)
                    v167 = llvm::APInt::compare((llvm::APInt *)&v298, (const llvm::APInt *)&v301);
                  else
                    v167 = llvm::APInt::compareSigned((llvm::APInt *)&v298, (const llvm::APInt *)&v301);
                  if (v167 <= 0)
                  {
                    if (v303)
                      v169 = llvm::APInt::compare((llvm::APInt *)&v301, (const llvm::APInt *)&v295);
                    else
                      v169 = llvm::APInt::compareSigned((llvm::APInt *)&v301, (const llvm::APInt *)&v295);
                    v168 = v169 > 0;
                    if (v169 <= 0)
                      v163 = v161;
                    else
                      v163 = v162;
                  }
                  else
                  {
                    v168 = 1;
                    v163 = v162;
                  }
                  if (v296 >= 0x41 && v295)
                    MEMORY[0x2348A0E84](v295, 0x1000C8000313F17);
                  if (v299 >= 0x41 && v298)
                    MEMORY[0x2348A0E84](v298, 0x1000C8000313F17);
                  if (!v168)
                    break;
                }
                v161 = (unsigned __int16 *)*((_QWORD *)v161 + 2);
                v162 = v163;
              }
              while (v161);
              if (v163)
              {
                v170 = sub_22F029BF0(a1, a2, *(_QWORD *)&a3[8 * ((*(unsigned __int16 *)a3 >> 9) & 1)+ 32+ 8 * (HIBYTE(*(unsigned __int16 *)a3) & 1)], v163);
                v4 = v170;
                if (!(_DWORD)v170)
                  goto LABEL_445;
                if ((_DWORD)v170 != 5)
                {
                  v244 = *(unsigned int *)(a2 + 216);
                  v245 = 32 * v244 - 32;
                  v246 = v244 + 1;
                  while (--v246 > v115)
                  {
                    v247 = v245 - 32;
                    v248 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v245), a2, 1);
                    v245 = v247;
                    if ((v248 & 1) == 0)
                      goto LABEL_443;
                  }
                  *(_DWORD *)(a2 + 216) = v115;
                  LODWORD(v115) = -1;
                  if (v4 < 4)
                  {
LABEL_445:
                    if (v302 >= 0x41 && v301)
                      MEMORY[0x2348A0E84](v301, 0x1000C8000313F17);
                    if ((_DWORD)v115 != -1)
                    {
                      v249 = *(_DWORD *)(a2 + 216);
                      if (v249 > v115)
                      {
                        v250 = 32 * (v249 - 1);
                        do
                        {
                          v251 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 208) + v250) & 0xFFFFFFFFFFFFFFF8);
                          if (*v251 >= 2u)
                            sub_22EF53BC0((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 208) + v250) & 0xFFFFFFFFFFFFFFF8));
                          *v251 = 0;
                          --v249;
                          v250 -= 32;
                        }
                        while (v115 < v249);
                      }
                      goto LABEL_454;
                    }
                    goto LABEL_455;
                  }
                  if ((_DWORD)v4 == 4)
                  {
                    v4 = 2;
                    goto LABEL_445;
                  }
                }
                sub_22F072828(a2, *((_DWORD *)v163 + 1), 2270, 0, 0);
                goto LABEL_317;
              }
            }
            v208 = *(unsigned int *)(a2 + 216);
            v209 = 32 * v208 - 32;
            v210 = v208 + 1;
            while (--v210 > v115)
            {
              v211 = v209 - 32;
              v212 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v209), a2, 1);
              v209 = v211;
              if ((v212 & 1) == 0)
                goto LABEL_443;
            }
            v4 = 2;
          }
          else
          {
            v228 = *(unsigned int *)(a2 + 216);
            v229 = 32 * v228 - 32;
            v230 = v228 + 1;
            while (--v230 > v115)
            {
              v231 = v229 - 32;
              v232 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v229), a2, 1);
              v229 = v231;
              if ((v232 & 1) == 0)
              {
LABEL_443:
                v4 = 0;
                break;
              }
            }
          }
          *(_DWORD *)(a2 + 216) = v115;
          LODWORD(v115) = -1;
          goto LABEL_445;
        case 'e':
          v12 = a3 + 8;
          goto LABEL_26;
        default:
          if (v11 == 235)
            goto LABEL_23;
          if (v11 != 236)
            goto LABEL_232;
          v28 = a3 + 16;
          v29 = *(_DWORD **)(a2 + 24);
          break;
      }
      while (1)
      {
        v30 = *(unsigned int *)(a2 + 216);
        sub_22F0270D4(v29);
        LOBYTE(v301) = 0;
        v31 = *(unsigned __int16 *)a3;
        if ((v31 & 0x100) != 0 && *(_QWORD *)v28)
          v32 = *(_QWORD *)(*(_QWORD *)v28 + 8);
        else
          v32 = 0;
        if (sub_22F02CF50(a2, v32, *(_QWORD *)&v28[8 * ((v31 >> 8) & 1)], (uint64_t)&v301))
        {
          if ((_BYTE)v301)
          {
            v33 = sub_22F02C9DC((uint64_t)a1, a2, *(_QWORD *)&v28[8 * (((unint64_t)*(unsigned __int16 *)a3 >> 8) & 1) + 8], 0);
            v34 = v33;
            if (v33)
            {
              if (v33 != 3)
              {
                v44 = *(unsigned int *)(a2 + 216);
                v45 = 32 * v44 - 32;
                v46 = v44 + 1;
                while (--v46 > v30)
                {
                  v47 = v45 - 32;
                  v48 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v45), a2, 1);
                  v45 = v47;
                  if ((v48 & 1) == 0)
                  {
                    LODWORD(v5) = 0;
                    *(_DWORD *)(a2 + 216) = v30;
                    v40 = 1;
                    goto LABEL_80;
                  }
                }
                *(_DWORD *)(a2 + 216) = v30;
                v40 = 1;
                LODWORD(v5) = v34;
                goto LABEL_80;
              }
              v35 = *(unsigned int *)(a2 + 216);
              v36 = 32 * v35 - 32;
              v37 = v35 + 1;
              while (--v37 > v30)
              {
                v38 = v36 - 32;
                v39 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v36), a2, 1);
                v36 = v38;
                if ((v39 & 1) == 0)
                {
                  LODWORD(v5) = 0;
                  break;
                }
              }
              v40 = v37 > v30;
              goto LABEL_79;
            }
            v40 = 1;
            LODWORD(v5) = 0;
          }
          else
          {
            v40 = 11;
          }
        }
        else
        {
          LODWORD(v5) = 0;
          v40 = 1;
        }
        if ((_DWORD)v30 != -1)
        {
          v41 = *(_DWORD *)(a2 + 216);
          if (v41 > v30)
          {
            v42 = 32 * (v41 - 1);
            do
            {
              v43 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 208) + v42) & 0xFFFFFFFFFFFFFFF8);
              if (*v43 >= 2u)
                sub_22EF53BC0((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 208) + v42) & 0xFFFFFFFFFFFFFFF8));
              *v43 = 0;
              --v41;
              v42 -= 32;
            }
            while (v30 < v41);
          }
LABEL_79:
          *(_DWORD *)(a2 + 216) = v30;
        }
LABEL_80:
        v29 = *(_DWORD **)(a2 + 24);
        --v29[26];
        if (v40)
        {
          if (v40 == 11)
            return 2;
          else
            return v5;
        }
      }
    }
    v4 = 2;
    switch(v11)
    {
      case 3:
        return 4;
      case 5:
        v49 = *(unsigned int *)(a2 + 216);
        sub_22F0270D4(*(_DWORD **)(a2 + 24));
        v50 = *((_QWORD *)a3 + 2);
        if (!v50)
          goto LABEL_92;
        v51 = sub_22F029BF0(a1, a2, v50, 0);
        v52 = v51;
        if (!(_DWORD)v51)
          goto LABEL_502;
        if ((_DWORD)v51 == 2)
        {
LABEL_92:
          v53 = sub_22F029BF0(a1, a2, *((_QWORD *)a3 + 3), 0);
          v52 = v53;
          if (!(_DWORD)v53)
            goto LABEL_502;
          if ((_DWORD)v53 == 2)
          {
            v54 = *((_QWORD *)a3 + 4);
            if (!v54 || !*((_QWORD *)a3 + 5) || !*((_QWORD *)a3 + 6))
            {
LABEL_131:
              v5 = 0;
LABEL_503:
              if ((_DWORD)v49 == -1)
                goto LABEL_512;
              v288 = *(_DWORD *)(a2 + 216);
              if (v288 > v49)
              {
                v289 = 32 * (v288 - 1);
                do
                {
                  v290 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 208) + v289) & 0xFFFFFFFFFFFFFFF8);
                  if (*v290 >= 2u)
                    sub_22EF53BC0((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 208) + v289) & 0xFFFFFFFFFFFFFFF8));
                  *v290 = 0;
                  --v288;
                  v289 -= 32;
                }
                while (v49 < v288);
              }
              v52 = v5;
LABEL_510:
              *(_DWORD *)(a2 + 216) = v49;
              goto LABEL_511;
            }
            v55 = sub_22F029BF0(a1, a2, v54, 0);
            v52 = v55;
            if ((_DWORD)v55)
            {
              if ((_DWORD)v55 != 2)
              {
                v252 = *(unsigned int *)(a2 + 216);
                v253 = 32 * v252 - 32;
                v254 = v252 + 1;
                while (--v254 > v49)
                {
                  v255 = v253 - 32;
                  v256 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v253), a2, 1);
                  v253 = v255;
                  if ((v256 & 1) == 0)
                    goto LABEL_388;
                }
                goto LABEL_510;
              }
              v56 = sub_22F029BF0(a1, a2, *((_QWORD *)a3 + 5), 0);
              v52 = v56;
              if ((_DWORD)v56)
              {
                if ((_DWORD)v56 != 2)
                {
                  v257 = *(unsigned int *)(a2 + 216);
                  v258 = 32 * v257 - 32;
                  v259 = v257 + 1;
                  while (--v259 > v49)
                  {
                    v260 = v258 - 32;
                    v261 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v258), a2, 1);
                    v258 = v260;
                    if ((v261 & 1) == 0)
                      goto LABEL_388;
                  }
                  goto LABEL_510;
                }
                if ((*(_BYTE *)(*((_QWORD *)a3 + 6) + 2) & 1) == 0)
                {
                  v57 = *(_DWORD **)(a2 + 24);
                  while (1)
                  {
                    LOBYTE(v301) = 1;
                    v58 = *(_DWORD *)(a2 + 216);
                    sub_22F0270D4(v57);
                    v59 = sub_22F024504(*((_QWORD *)a3 + 6), (uint64_t)&v301, a2);
                    if ((_BYTE)v301)
                      v60 = 0;
                    else
                      v60 = 17;
                    if (v59)
                      v61 = v60;
                    else
                      v61 = 1;
                    if (v59)
                      v5 = v5;
                    else
                      v5 = 0;
                    if (v58 != -1)
                      sub_22F05B164(a2, 0, v58);
                    v62 = *(_DWORD **)(a2 + 24);
                    --v62[26];
                    if (v61)
                      break;
                    v63 = *(unsigned int *)(a2 + 216);
                    sub_22F0270D4(v62);
                    v64 = sub_22F029BF0(a1, a2, *((_QWORD *)a3 + 8), 0);
                    if ((_DWORD)v64 != 2)
                    {
                      v52 = v64;
                      if (!(_DWORD)v64)
                      {
LABEL_478:
                        if ((_DWORD)v63 == -1)
                        {
                          v5 = 0;
                        }
                        else
                        {
                          v272 = *(_DWORD *)(a2 + 216);
                          if (v272 > v63)
                          {
                            v273 = 32 * (v272 - 1);
                            do
                            {
                              v274 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 208) + v273) & 0xFFFFFFFFFFFFFFF8);
                              if (*v274 >= 2u)
                                sub_22EF53BC0((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 208) + v273) & 0xFFFFFFFFFFFFFFF8));
                              *v274 = 0;
                              --v272;
                              v273 -= 32;
                            }
                            while (v63 < v272);
                          }
LABEL_484:
                          v5 = 0;
                          *(_DWORD *)(a2 + 216) = v63;
                        }
                        --*(_DWORD *)(*(_QWORD *)(a2 + 24) + 104);
                        goto LABEL_503;
                      }
                      v267 = *(unsigned int *)(a2 + 216);
                      v268 = 32 * v267 - 32;
                      v269 = v267 + 1;
                      while (--v269 > v63)
                      {
                        v270 = v268 - 32;
                        v271 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v268), a2, 1);
                        v268 = v270;
                        if ((v271 & 1) == 0)
                        {
LABEL_490:
                          v52 = 0;
                          goto LABEL_501;
                        }
                      }
                      *(_DWORD *)(a2 + 216) = v63;
                      v280 = 32 * v63 - 32;
                      v281 = v63 + 1;
                      while (--v281 > v49)
                      {
                        v282 = v280 - 32;
                        v283 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v280), a2, 1);
                        v280 = v282;
                        if ((v283 & 1) == 0)
                        {
LABEL_499:
                          v52 = 0;
                          goto LABEL_500;
                        }
                      }
                      goto LABEL_500;
                    }
                    v65 = sub_22F02C9DC((uint64_t)a1, a2, *((_QWORD *)a3 + 9), 0);
                    if ((_DWORD)v65 != 3)
                    {
                      v52 = v65;
                      if (!(_DWORD)v65)
                        goto LABEL_478;
                      v275 = *(unsigned int *)(a2 + 216);
                      v276 = 32 * v275 - 32;
                      v277 = v275 + 1;
                      while (--v277 > v63)
                      {
                        v278 = v276 - 32;
                        v279 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v276), a2, 1);
                        v276 = v278;
                        if ((v279 & 1) == 0)
                          goto LABEL_490;
                      }
                      *(_DWORD *)(a2 + 216) = v63;
                      v284 = 32 * v63 - 32;
                      v285 = v63 + 1;
                      while (--v285 > v49)
                      {
                        v286 = v284 - 32;
                        v287 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v284), a2, 1);
                        v284 = v286;
                        if ((v287 & 1) == 0)
                          goto LABEL_499;
                      }
LABEL_500:
                      LODWORD(v63) = v49;
                      LODWORD(v49) = -1;
LABEL_501:
                      *(_DWORD *)(a2 + 216) = v63;
                      --*(_DWORD *)(*(_QWORD *)(a2 + 24) + 104);
                      goto LABEL_502;
                    }
                    v66 = *((_QWORD *)a3 + 7);
                    if ((*(_BYTE *)(v66 + 2) & 1) != 0)
                    {
                      **(_BYTE **)(a2 + 16) = 1;
                      if (*(_DWORD *)(a2 + 840) != 3
                        && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 1) == 0
                        && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) & 1) == 0)
                      {
                        goto LABEL_478;
                      }
                    }
                    else if (!sub_22F024D28(a2, v66))
                    {
                      goto LABEL_478;
                    }
                    v67 = *(unsigned int *)(a2 + 216);
                    v68 = 32 * v67 - 32;
                    v69 = v67 + 1;
                    while (--v69 > v63)
                    {
                      v70 = v68 - 32;
                      v71 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v68), a2, 1);
                      v68 = v70;
                      if ((v71 & 1) == 0)
                        goto LABEL_484;
                    }
                    *(_DWORD *)(a2 + 216) = v63;
                    v57 = *(_DWORD **)(a2 + 24);
                    --v57[26];
                    if ((*(_BYTE *)(*((_QWORD *)a3 + 6) + 2) & 1) != 0)
                      goto LABEL_128;
                  }
                  if (v61 != 17)
                    goto LABEL_503;
                  v262 = *(unsigned int *)(a2 + 216);
                  v263 = 32 * v262 - 32;
                  v264 = v262 + 1;
                  while (--v264 > v49)
                  {
                    v265 = v263 - 32;
                    v266 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v263), a2, 1);
                    v263 = v265;
                    if ((v266 & 1) == 0)
                      goto LABEL_388;
                  }
                  v52 = 2;
                  goto LABEL_510;
                }
LABEL_128:
                **(_BYTE **)(a2 + 16) = 1;
                if (*(_DWORD *)(a2 + 840) != 3
                  && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 1) == 0)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
                }
                goto LABEL_131;
              }
            }
LABEL_502:
            v5 = v52;
            goto LABEL_503;
          }
          v203 = *(unsigned int *)(a2 + 216);
          v204 = 32 * v203 - 32;
          v205 = v203 + 1;
          do
          {
            if (--v205 <= v49)
              goto LABEL_510;
            v206 = v204 - 32;
            v207 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v204), a2, 1);
            v204 = v206;
          }
          while ((v207 & 1) != 0);
        }
        else
        {
          v190 = *(unsigned int *)(a2 + 216);
          v191 = 32 * v190 - 32;
          v192 = v190 + 1;
          do
          {
            if (--v192 <= v49)
              goto LABEL_510;
            v193 = v191 - 32;
            v194 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v191), a2, 1);
            v191 = v193;
          }
          while ((v194 & 1) != 0);
        }
LABEL_388:
        v52 = 0;
        goto LABEL_510;
      case 6:
LABEL_23:
        v12 = a3 + 16;
LABEL_26:
        a3 = *(unsigned __int8 **)v12;
        v8 = *(_DWORD *)(a2 + 40);
        if (!v8)
          goto LABEL_54;
        continue;
      case 8:
        v115 = *(unsigned int *)(a2 + 216);
        sub_22F0270D4(*(_DWORD **)(a2 + 24));
        v118 = *(_DWORD *)a3;
        v117 = a3 + 16;
        v116 = v118;
        if (v118 < 0x100)
          goto LABEL_212;
        v119 = 8 * (v116 >> 8);
        while (1)
        {
          v120 = sub_22F029BF0(a1, a2, *v117, a4);
          if ((_DWORD)v120 == 2)
          {
            a4 = 0;
          }
          else
          {
            v4 = v120;
            if ((_DWORD)v120 != 5)
            {
              if ((_DWORD)v120)
              {
                v213 = *(unsigned int *)(a2 + 216);
                v214 = 32 * v213 - 32;
                v215 = v213 + 1;
                while (--v215 > v115)
                {
                  v216 = v214 - 32;
                  v217 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v214), a2, 1);
                  v214 = v216;
                  if ((v217 & 1) == 0)
                    goto LABEL_399;
                }
                goto LABEL_454;
              }
LABEL_326:
              if ((_DWORD)v115 != -1)
              {
                v176 = *(_DWORD *)(a2 + 216);
                if (v176 > v115)
                {
                  v177 = 32 * (v176 - 1);
                  do
                  {
                    v178 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 208) + v177) & 0xFFFFFFFFFFFFFFF8);
                    if (*v178 >= 2u)
                      sub_22EF53BC0((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 208) + v177) & 0xFFFFFFFFFFFFFFF8));
                    *v178 = 0;
                    --v176;
                    v177 -= 32;
                  }
                  while (v115 < v176);
                }
                goto LABEL_454;
              }
LABEL_455:
              --*(_DWORD *)(*(_QWORD *)(a2 + 24) + 104);
              return v4;
            }
          }
          ++v117;
          v119 -= 8;
          if (!v119)
          {
LABEL_212:
            if (a4)
            {
              v4 = 5;
              goto LABEL_326;
            }
            v171 = *(unsigned int *)(a2 + 216);
            v172 = 32 * v171 - 32;
            v173 = v171 + 1;
            do
            {
              if (--v173 <= v115)
              {
                v4 = 2;
                goto LABEL_454;
              }
              v174 = v172 - 32;
              v175 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v172), a2, 1);
              v172 = v174;
            }
            while ((v175 & 1) != 0);
LABEL_399:
            v4 = 0;
LABEL_454:
            *(_DWORD *)(a2 + 216) = v115;
            goto LABEL_455;
          }
        }
      case 9:
        return 3;
      case 12:
        v107 = *((_QWORD *)a3 + 1);
        if ((v107 & 1) != 0)
        {
          v108 = (uint64_t *)((v107 & 0xFFFFFFFFFFFFFFFELL) + 8);
          v109 = &v108[*(unsigned int *)(v107 & 0xFFFFFFFFFFFFFFFELL)];
        }
        else
        {
          if (v107)
            v108 = (uint64_t *)(a3 + 8);
          else
            v108 = 0;
          if (v107)
            v109 = (uint64_t *)(a3 + 16);
          else
            v109 = 0;
        }
        while (2)
        {
          if (v108 == v109)
            return v4;
          v135 = *v108;
          if (*v108 && (*(_DWORD *)(v135 + 28) & 0x7Fu) - 60 <= 6 && !sub_22F02CB08(a2, *v108))
            return 0;
          v136 = *(_DWORD *)(a2 + 216);
          sub_22F0270D4(*(_DWORD **)(a2 + 24));
          if ((sub_22F02CE98(a2, v135) & 1) == 0)
          {
            v137 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
            **(_BYTE **)(a2 + 16) |= v137;
            if ((v137 & 1) == 0)
              goto LABEL_337;
          }
          v138 = sub_22F05B164(a2, 1, v136);
          --*(_DWORD *)(*(_QWORD *)(a2 + 24) + 104);
          if ((v138 & 1) != 0)
          {
            ++v108;
            continue;
          }
          return 0;
        }
      case 13:
        LOBYTE(v301) = 0;
        while (2)
        {
          v72 = sub_22F02C9DC((uint64_t)a1, a2, *((_QWORD *)a3 + 1), a4);
          if ((_DWORD)v72 != 3)
            return v72;
          if ((*(_BYTE *)(*((_QWORD *)a3 + 2) + 2) & 1) != 0)
          {
            **(_BYTE **)(a2 + 16) = 1;
            if (*(_DWORD *)(a2 + 840) != 3
              && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 1) == 0)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
            }
          }
          else
          {
            v73 = *(_DWORD *)(a2 + 216);
            sub_22F0270D4(*(_DWORD **)(a2 + 24));
            if ((sub_22F024504(*((_QWORD *)a3 + 2), (uint64_t)&v301, a2) & 1) == 0)
            {
              if (v73 != -1)
              {
                v179 = a2;
                v180 = v73;
LABEL_408:
                sub_22F05B164(v179, 0, v180);
              }
LABEL_409:
              v4 = 0;
              goto LABEL_455;
            }
            v74 = sub_22F05B164(a2, 1, v73);
            --*(_DWORD *)(*(_QWORD *)(a2 + 24) + 104);
            if (v74)
            {
              a4 = 0;
              if (!(_BYTE)v301)
                return 2;
              continue;
            }
          }
          return 0;
        }
      case 14:
        v75 = *(unsigned int *)(a2 + 216);
        sub_22F0270D4(*(_DWORD **)(a2 + 24));
        v76 = *((_QWORD *)a3 + 1);
        if (!v76)
          goto LABEL_143;
        v77 = sub_22F029BF0(a1, a2, v76, 0);
        v52 = v77;
        if (!(_DWORD)v77)
        {
          v5 = v77;
          goto LABEL_367;
        }
        if ((_DWORD)v77 != 2)
        {
          v198 = *(unsigned int *)(a2 + 216);
          v199 = 32 * v198 - 32;
          v200 = v198 + 1;
          do
          {
            if (--v200 <= v75)
              goto LABEL_394;
            v201 = v199 - 32;
            v202 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v199), a2, 1);
            v199 = v201;
          }
          while ((v202 & 1) != 0);
LABEL_377:
          v52 = 0;
          goto LABEL_394;
        }
LABEL_143:
        v78 = *(_DWORD **)(a2 + 24);
        do
        {
          v79 = *(unsigned int *)(a2 + 216);
          sub_22F0270D4(v78);
          LOBYTE(v301) = 1;
          v80 = *((_QWORD *)a3 + 3);
          if (v80)
          {
            v81 = *((_QWORD *)a3 + 2);
            if (v81)
              v82 = *(_QWORD *)(v81 + 8);
            else
              v82 = 0;
            if (!sub_22F02CF50(a2, v82, v80, (uint64_t)&v301))
            {
LABEL_174:
              v5 = 0;
              goto LABEL_175;
            }
            if (!(_BYTE)v301)
            {
              v87 = 15;
              goto LABEL_176;
            }
          }
          v83 = sub_22F02C9DC((uint64_t)a1, a2, *((_QWORD *)a3 + 5), 0);
          v84 = v83;
          if (!(_DWORD)v83)
          {
            v87 = 1;
            v5 = v83;
            goto LABEL_176;
          }
          if ((_DWORD)v83 == 3)
          {
            v85 = *((_QWORD *)a3 + 4);
            if (v85)
            {
              if ((*(_BYTE *)(v85 + 2) & 1) == 0)
              {
                v86 = *(_DWORD *)(a2 + 216);
                sub_22F0270D4(*(_DWORD **)(a2 + 24));
                if ((sub_22F024D28(a2, v85) & 1) != 0)
                {
                  v87 = 1;
                  v88 = sub_22F05B164(a2, 1, v86);
                  --*(_DWORD *)(*(_QWORD *)(a2 + 24) + 104);
                  if (!v88)
                  {
                    v5 = 0;
                    goto LABEL_176;
                  }
                  goto LABEL_169;
                }
                if (v86 != -1)
                  sub_22F05B164(a2, 0, v86);
                v5 = 0;
                --*(_DWORD *)(*(_QWORD *)(a2 + 24) + 104);
LABEL_175:
                v87 = 1;
LABEL_176:
                if ((_DWORD)v79 != -1)
                {
                  v103 = a1;
                  v104 = *(_DWORD *)(a2 + 216);
                  if (v104 > v79)
                  {
                    v105 = 32 * (v104 - 1);
                    do
                    {
                      v106 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 208) + v105) & 0xFFFFFFFFFFFFFFF8);
                      if (*v106 >= 2u)
                        sub_22EF53BC0((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 208) + v105) & 0xFFFFFFFFFFFFFFF8));
                      *v106 = 0;
                      --v104;
                      v105 -= 32;
                    }
                    while (v79 < v104);
                  }
                  *(_DWORD *)(a2 + 216) = v79;
                  a1 = v103;
                }
                goto LABEL_183;
              }
              **(_BYTE **)(a2 + 16) = 1;
              if (*(_DWORD *)(a2 + 840) != 3
                && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 1) == 0
                && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) & 1) == 0)
              {
                goto LABEL_174;
              }
            }
LABEL_169:
            v98 = *(unsigned int *)(a2 + 216);
            v99 = 32 * v98 - 32;
            v100 = v98 + 1;
            while (--v100 > v79)
            {
              v101 = v99 - 32;
              v102 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v99), a2, 1);
              v99 = v101;
              if ((v102 & 1) == 0)
              {
                v5 = 0;
                break;
              }
            }
            v87 = v100 > v79;
            *(_DWORD *)(a2 + 216) = v79;
            goto LABEL_183;
          }
          v89 = *(unsigned int *)(a2 + 216);
          v90 = 32 * v89 - 32;
          v91 = v89 + 1;
          while (--v91 > v79)
          {
            v92 = v90 - 32;
            v93 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v90), a2, 1);
            v90 = v92;
            if ((v93 & 1) == 0)
            {
              v5 = 0;
              *(_DWORD *)(a2 + 216) = v79;
              v87 = 1;
              goto LABEL_183;
            }
          }
          *(_DWORD *)(a2 + 216) = v79;
          v94 = 32 * v79 - 32;
          v95 = v79 + 1;
          while (--v95 > v75)
          {
            v96 = v94 - 32;
            v97 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v94), a2, 1);
            v94 = v96;
            if ((v97 & 1) == 0)
            {
              v5 = 0;
              *(_DWORD *)(a2 + 216) = v75;
              v87 = 1;
              LODWORD(v75) = -1;
              goto LABEL_183;
            }
          }
          *(_DWORD *)(a2 + 216) = v75;
          v87 = 1;
          LODWORD(v75) = -1;
          v5 = v84;
LABEL_183:
          v78 = *(_DWORD **)(a2 + 24);
          --v78[26];
        }
        while (!v87);
        if (v87 != 15)
        {
LABEL_367:
          if ((_DWORD)v75 == -1)
            goto LABEL_512;
          v195 = *(_DWORD *)(a2 + 216);
          if (v195 > v75)
          {
            v196 = 32 * (v195 - 1);
            do
            {
              v197 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 208) + v196) & 0xFFFFFFFFFFFFFFF8);
              if (*v197 >= 2u)
                sub_22EF53BC0((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 208) + v196) & 0xFFFFFFFFFFFFFFF8));
              *v197 = 0;
              --v195;
              v196 -= 32;
            }
            while (v75 < v195);
          }
          v52 = v5;
          goto LABEL_394;
        }
        v130 = *(unsigned int *)(a2 + 216);
        v131 = 32 * v130 - 32;
        v132 = v130 + 1;
        while (--v132 > (unint64_t)v75)
        {
          v133 = v131 - 32;
          v134 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v131), a2, 1);
          v131 = v133;
          if ((v134 & 1) == 0)
            goto LABEL_377;
        }
        v52 = 2;
LABEL_394:
        *(_DWORD *)(a2 + 216) = v75;
LABEL_511:
        v5 = v52;
LABEL_512:
        --*(_DWORD *)(*(_QWORD *)(a2 + 24) + 104);
        return v5;
      case 16:
        v110 = *(unsigned int *)(a2 + 216);
        sub_22F0270D4(*(_DWORD **)(a2 + 24));
        v111 = *(unsigned __int16 *)a3;
        if ((v111 & 0x2000) == 0)
          goto LABEL_202;
        v112 = *((_QWORD *)a3 + 2);
        if (!v112)
          goto LABEL_202;
        v113 = sub_22F029BF0(a1, a2, v112, 0);
        v4 = v113;
        if (!(_DWORD)v113)
          goto LABEL_423;
        if ((_DWORD)v113 != 2)
        {
          v223 = *(unsigned int *)(a2 + 216);
          v224 = 32 * v223 - 32;
          v225 = v223 + 1;
          do
          {
            if (--v225 <= v110)
              goto LABEL_429;
            v226 = v224 - 32;
            v227 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v224), a2, 1);
            v224 = v226;
          }
          while ((v227 & 1) != 0);
          v4 = 0;
LABEL_429:
          *(_DWORD *)(a2 + 216) = v110;
          goto LABEL_455;
        }
        v111 = *(unsigned __int16 *)a3;
LABEL_202:
        LOBYTE(v301) = 0;
        if ((v111 & 0x600) == 0x200)
        {
          v114 = (v111 & 0x700) == 512;
        }
        else
        {
          if ((v111 & 0x1000) != 0)
          {
            v157 = (v111 >> 13) & 1;
            v294 = *(_QWORD *)&a3[8 * v157 + 16];
            if (v294)
              v156 = *(_QWORD *)(v294 + 8);
            else
              v156 = 0;
          }
          else
          {
            v156 = 0;
            v157 = (v111 >> 13) & 1;
          }
          if (!sub_22F02CF50(a2, v156, *(_QWORD *)&a3[8 * v157 + 16 + 8 * ((v111 >> 12) & 1)], (uint64_t)&v301))
          {
            v4 = 0;
            goto LABEL_423;
          }
          v114 = v301;
        }
        v158 = *(unsigned __int16 *)a3;
        if (v114)
        {
          v159 = ((v158 >> 12) & 1) + ((v158 >> 13) & 1) + 1;
        }
        else
        {
          if ((v158 & 0x800) == 0)
            goto LABEL_344;
          v159 = ((v158 >> 13) & 1) + ((v158 >> 12) & 1) + 2;
        }
        v181 = *(_QWORD *)&a3[8 * v159 + 16];
        if (!v181)
        {
LABEL_344:
          v183 = *(unsigned int *)(a2 + 216);
          v184 = 32 * v183 - 32;
          v185 = v183 + 1;
          while (--v185 > v110)
          {
            v186 = v184 - 32;
            v187 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v184), a2, 1);
            v184 = v186;
            if ((v187 & 1) == 0)
              goto LABEL_421;
          }
          v4 = 2;
LABEL_422:
          *(_DWORD *)(a2 + 216) = v110;
          LODWORD(v110) = -1;
          goto LABEL_423;
        }
        v182 = sub_22F029BF0(a1, a2, v181, 0);
        v4 = v182;
        if ((_DWORD)v182)
        {
          if ((_DWORD)v182 != 2)
          {
            v233 = *(unsigned int *)(a2 + 216);
            v234 = 32 * v233 - 32;
            v235 = v233 + 1;
            do
            {
              if (--v235 <= v110)
                goto LABEL_422;
              v236 = v234 - 32;
              v237 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v234), a2, 1);
              v234 = v236;
            }
            while ((v237 & 1) != 0);
LABEL_421:
            v4 = 0;
            goto LABEL_422;
          }
          goto LABEL_344;
        }
LABEL_423:
        if ((_DWORD)v110 == -1)
          goto LABEL_455;
        v238 = *(_DWORD *)(a2 + 216);
        if (v238 > v110)
        {
          v239 = 32 * (v238 - 1);
          do
          {
            v240 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 208) + v239) & 0xFFFFFFFFFFFFFFF8);
            if (*v240 >= 2u)
              sub_22EF53BC0((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 208) + v239) & 0xFFFFFFFFFFFFFFF8));
            *v240 = 0;
            --v238;
            v239 -= 32;
          }
          while (v110 < v238);
        }
        goto LABEL_429;
      case 19:
        return v4;
      default:
LABEL_232:
        if ((v11 + 21) < 0x7Bu)
        {
          sub_22F0D5A50((uint64_t)a3);
          v25 = v129;
          v26 = a2;
          v27 = 103;
          goto LABEL_55;
        }
        if ((a3[2] & 1) != 0)
        {
          **(_BYTE **)(a2 + 16) = 1;
          if (*(_DWORD *)(a2 + 840) != 3
            && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 1) == 0
            && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) & 1) == 0)
          {
            return 0;
          }
          return 2;
        }
        v136 = *(_DWORD *)(a2 + 216);
        sub_22F0270D4(*(_DWORD **)(a2 + 24));
        if ((sub_22F024D28(a2, (uint64_t)a3) & 1) != 0)
        {
          v139 = sub_22F05B164(a2, 1, v136);
          --*(_DWORD *)(*(_QWORD *)(a2 + 24) + 104);
          if (!v139)
            return 0;
          return 2;
        }
LABEL_337:
        if (v136 == -1)
          goto LABEL_409;
        v179 = a2;
        v180 = v136;
        goto LABEL_408;
    }
  }
}

uint64_t sub_22F02B8DC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v5 = a5;
  if (!a5)
  {
    v10 = *(_QWORD *)(a4 + 16);
    v11 = v10 & 0xFFFFFFFFFFFFFFF8;
    v12 = v10 & 0xFFFFFFFFFFFFFFF8;
    if ((v10 & 4) != 0)
      v12 = *(_QWORD *)v11;
    v13 = (*(_WORD *)(v12 + 8) & 0x7E) - 34;
    if (v12)
      v14 = v12 - 64;
    else
      v14 = 0;
    if (v13 >= 4)
      v14 = 0;
    if ((*(_BYTE *)(v14 + 28) & 0x80) != 0)
      return 0;
    v15 = *(_QWORD *)(a1 + 8);
    if ((v10 & 4) != 0)
      v11 = *(_QWORD *)v11;
    v16 = (*(_WORD *)(v11 + 8) & 0x7E) - 34;
    if (v11)
      v17 = v11 - 64;
    else
      v17 = 0;
    if (v16 >= 4)
      v18 = 0;
    else
      v18 = v17;
    v5 = sub_22F0C975C(v15, v18);
  }
  v19 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * sub_22EFC306C(a4));
  v20 = sub_22EF5CDF0(*(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16408) & 0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)(a3 + 16) += v19 / v20;
  if (v20 <= v19)
    *(_BYTE *)(a3 + 144) &= ~1u;
  if (sub_22F02BACC(a3, a1, a2, 2 * ((*(_DWORD *)(a4 + 28) & 0x7Fu) - 49 < 3)))
    sub_22F02D1CC((int *)(a3 + 24), a4, 0);
  return 1;
}

uint64_t sub_22F02BA20(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a6)
  {
    if ((*(_BYTE *)(a4 + 28) & 0x80) != 0)
      return 0;
    a6 = sub_22F0C975C(*(_QWORD *)(a1 + 8), a4);
  }
  *(_QWORD *)(a3 + 16) += sub_22E46A3EC(a6, a5);
  if (sub_22F02BACC(a3, a1, a2, 2 * ((*(_DWORD *)(a5 + 28) & 0x7Fu) - 49 < 3)))
    sub_22F02D1CC((int *)(a3 + 24), a5, 0);
  return 1;
}

uint64_t sub_22F02BACC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t result;
  unsigned int v9;
  int v10;
  unsigned __int8 **v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  _BYTE *v14;
  uint64_t v15;

  if (a4 == 3 || (result = sub_22F01E1F4(a1, a2, a3, a4), (_DWORD)result))
  {
    v9 = *(_DWORD *)(a1 + 24);
    if ((v9 & 1) != 0)
    {
      return 0;
    }
    else if ((v9 & 2) != 0
           || (result = 1, (v9 & 8) != 0)
           && ((*(_DWORD *)(a1 + 56) == 1) & (v9 >> 2)) == 0
           && *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * (int)((v9 >> 4) - 1)) == *(_QWORD *)(a1 + 32))
    {
      sub_22EFF605C(a3);
      v11 = (unsigned __int8 **)sub_22F072D74(a2, v10, 2257, 0);
      if (v11)
      {
        v12 = v11;
        v13 = *v11;
        if (!v13)
        {
          v13 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v12[1]);
          *v12 = v13;
        }
        v13[*v13 + 1] = 2;
        v14 = *v12;
        v15 = **v12;
        *v14 = v15 + 1;
        *(_QWORD *)&v14[8 * v15 + 16] = a4;
      }
      result = 0;
      *(_DWORD *)(a1 + 24) |= 1u;
      *(_DWORD *)(a1 + 56) = 0;
    }
  }
  return result;
}

uint64_t sub_22F02BBE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;

  v11 = 0;
  result = sub_22F02BC74(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), (uint64_t *)a3, &v11);
  v7 = v11;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_22F02C77C(a2, (uint64_t *)a3, v11);
    v7 = (_QWORD *)result;
    v9 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)result = *(_OWORD *)a3;
    *(_OWORD *)(result + 16) = v9;
    *(_DWORD *)(result + 32) = *(_DWORD *)(a3 + 32);
    v8 = 1;
  }
  v10 = *(_QWORD *)a2 + 40 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v10;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_22F02BC74(uint64_t a1, int a2, uint64_t *a3, _QWORD *a4)
{
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  int i;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  unsigned int v28;
  uint64_t result;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int8 v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    v23 = 0;
    result = 0;
    goto LABEL_29;
  }
  v89 = a4;
  v6 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_253E4AB98))
  {
    v38 = *MEMORY[0x24BED7368];
    if (!*MEMORY[0x24BED7368])
      v38 = 0xFF51AFD7ED558CCDLL;
    qword_253E4AB90 = v38;
    __cxa_guard_release(&qword_253E4AB98);
  }
  v7 = qword_253E4AB90;
  v8 = sub_22EF52CE4(a3);
  v10 = a3[2];
  v9 = a3[3];
  v11 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_253E4AB98))
  {
    v39 = *MEMORY[0x24BED7368];
    if (!*MEMORY[0x24BED7368])
      v39 = 0xFF51AFD7ED558CCDLL;
    qword_253E4AB90 = v39;
    __cxa_guard_release(&qword_253E4AB98);
  }
  v12 = qword_253E4AB90;
  if (v9)
  {
    v30 = 0;
    v31 = v10 + 8 * v9;
    v32 = &v99;
    while (1)
    {
      v33 = *(_QWORD *)(v10 + v30);
      v34 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
      if ((v34 & 1) == 0)
      {
        v83 = v12;
        v85 = v32;
        v87 = v31;
        v81 = v30;
        v36 = __cxa_guard_acquire(&qword_253E4AB98);
        v30 = v81;
        v12 = v83;
        v32 = v85;
        v31 = v87;
        if (v36)
        {
          v37 = *MEMORY[0x24BED7368];
          if (!*MEMORY[0x24BED7368])
            v37 = 0xFF51AFD7ED558CCDLL;
          qword_253E4AB90 = v37;
          __cxa_guard_release(&qword_253E4AB98);
          v30 = v81;
          v12 = v83;
          v32 = v85;
          v31 = v87;
        }
      }
      if (v30 > 0x38)
        break;
      v13 = v30 + 8;
      v35 = (qword_253E4AB90 + 8 * v33) ^ HIDWORD(v33);
      *(uint64_t *)((char *)&v91 + v30) = 0x9DDFEA08EB382D69
                                       * ((0x9DDFEA08EB382D69
                                         * (HIDWORD(v33) ^ ((0x9DDFEA08EB382D69 * v35) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                 * v35))) ^ ((0x9DDFEA08EB382D69 * (HIDWORD(v33) ^ ((0x9DDFEA08EB382D69 * v35) >> 47) ^ (0x9DDFEA08EB382D69 * v35))) >> 47));
      v30 = v13;
      if (8 * v9 == v13)
        goto LABEL_6;
    }
    v86 = v32;
    v88 = v31;
    v40 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v12 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v12 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    v41 = __ROR8__(v12 ^ 0xB492B66FBE98F273, 49);
    v42 = v12 ^ (v12 >> 47);
    v43 = v12 ^ (((0x9DDFEA08EB382D69 * (v42 ^ (0xB492B66FBE98F273 * v12))) ^ v12) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                               * (v42 ^ (0xB492B66FBE98F273 * v12)));
    v44 = v41 + v12 + v92;
    v45 = v96 + v41 - 0x4B6D499041670D8DLL * __ROR8__(v97 + v12 - 0x4B6D499041670D8DLL * v12, 42);
    v46 = v91 - 0x6D8ED9027DD26057 * v12;
    v47 = v42 + v46;
    v48 = v46 + v92 + v93;
    v49 = __ROR8__(v48, 44) + v46;
    v50 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v43) ^ ((0x9DDFEA08EB382D69 * v43) >> 47));
    v51 = (0xB492B66FBE98F273 * __ROR8__(v44, 37)) ^ v50;
    v52 = __ROR8__(v42 - 0x622015F714C7D297 * (v40 ^ (v40 >> 47)), 33);
    v84 = v49 + __ROR8__(v51 + v47 + v94, 21);
    v79 = v45;
    v80 = v48 + v94;
    v53 = v50 + v95 - 0x4B6D499041670D8DLL * v52;
    v82 = __ROR8__(v96 + v97 + v53, 44) + v53 + __ROR8__(v45 + v93 + v98 + v53, 21);
    v77 = 0xB492B66FBE98F273 * v52;
    v78 = v96 + v97 + v53 + v98;
    if (v30 == 8 * v9)
    {
      v70 = 64;
LABEL_67:
      v76 = v70;
    }
    else
    {
      v54 = v10 + v30;
      v75 = v51;
      v76 = 64;
      while (2)
      {
        v55 = 0;
        while (1)
        {
          v56 = *(_QWORD *)(v54 + v55);
          v57 = atomic_load((unsigned __int8 *)&qword_253E4AB98);
          if ((v57 & 1) == 0 && __cxa_guard_acquire(&qword_253E4AB98))
          {
            v62 = *MEMORY[0x24BED7368];
            if (!*MEMORY[0x24BED7368])
              v62 = 0xFF51AFD7ED558CCDLL;
            qword_253E4AB90 = v62;
            __cxa_guard_release(&qword_253E4AB98);
          }
          if (v55 > 0x38)
            break;
          v58 = v55 + 8;
          v59 = 0x9DDFEA08EB382D69 * ((qword_253E4AB90 + 8 * v56) ^ HIDWORD(v56));
          v60 = 0x9DDFEA08EB382D69 * (HIDWORD(v56) ^ (v59 >> 47) ^ v59);
          *(uint64_t *)((char *)&v91 + v55) = 0x9DDFEA08EB382D69 * (v60 ^ (v60 >> 47));
          v61 = v54 + v55 + 8;
          v55 += 8;
          if (v61 == v88)
          {
            if ((v58 & 0x7FFFFFFFFFFFFFB8) != 0)
              sub_22E54F510(&v91, (_BYTE *)&v91 + v58, v86);
            v67 = v96 + v80 - 0x4B6D499041670D8DLL * __ROR8__(v84 + v79 + v97, 42);
            v68 = v91 - 0x4B6D499041670D8DLL * v84;
            v51 = (0xB492B66FBE98F273 * __ROR8__(v79 + v77 + v80 + v92, 37)) ^ v82;
            v84 = __ROR8__(v68 + v92 + v93, 44) + v68 + __ROR8__(v51 + v78 + v68 + v94, 21);
            v79 = v67;
            v80 = v68 + v92 + v93 + v94;
            v77 = 0xB492B66FBE98F273 * __ROR8__(v78 + v75, 33);
            v69 = v77 + v82 + v95;
            v82 = __ROR8__(v67 + v93 + v69 + v98, 21) + v69 + __ROR8__(v96 + v97 + v69, 44);
            v78 = v96 + v97 + v69 + v98;
            v70 = v76 + v58;
            goto LABEL_67;
          }
        }
        v51 = (0xB492B66FBE98F273 * __ROR8__(v79 + v77 + v80 + v92, 37)) ^ v82;
        v63 = v96 + v80 - 0x4B6D499041670D8DLL * __ROR8__(v84 + v79 + v97, 42);
        v64 = v91 - 0x4B6D499041670D8DLL * v84;
        v65 = v64 + v92 + v93;
        v84 = __ROR8__(v65, 44) + v64 + __ROR8__(v51 + v78 + v64 + v94, 21);
        v77 = 0xB492B66FBE98F273 * __ROR8__(v78 + v75, 33);
        v66 = v77 + v82 + v95;
        v79 = v63;
        v80 = v65 + v94;
        v82 = __ROR8__(v63 + v93 + v66 + v98, 21) + v66 + __ROR8__(v96 + v97 + v66, 44);
        v78 = v96 + v97 + v66 + v98;
        v75 = v51;
        v76 += 64;
        v54 += v55;
        if (v54 != v88)
          continue;
        break;
      }
    }
    v71 = 0x9DDFEA08EB382D69
        * (v78 ^ ((0x9DDFEA08EB382D69 * (v78 ^ v80)) >> 47) ^ (0x9DDFEA08EB382D69 * (v78 ^ v80)));
    v72 = v51 - 0x4B6D499041670D8DLL * (v79 ^ (v79 >> 47)) - 0x622015F714C7D297 * (v71 ^ (v71 >> 47));
    v73 = 0x9DDFEA08EB382D69
        * (v82 ^ ((0x9DDFEA08EB382D69 * (v82 ^ v84)) >> 47) ^ (0x9DDFEA08EB382D69 * (v82 ^ v84)));
    v74 = v77 - 0x4B6D499041670D8DLL * (v76 ^ (v76 >> 47)) - 0x622015F714C7D297 * (v73 ^ (v73 >> 47));
    v14 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69
          * (v74 ^ ((0x9DDFEA08EB382D69 * (v74 ^ v72)) >> 47) ^ (0x9DDFEA08EB382D69 * (v74 ^ v72)))) ^ ((0x9DDFEA08EB382D69 * (v74 ^ ((0x9DDFEA08EB382D69 * (v74 ^ v72)) >> 47) ^ (0x9DDFEA08EB382D69 * (v74 ^ v72)))) >> 47));
  }
  else
  {
    v13 = 0;
LABEL_6:
    v14 = sub_22E3D0FB4(&v91, v13, v12);
  }
  v15 = 0;
  v16 = __ROR8__(v14 + 16, 16);
  v17 = 0x9DDFEA08EB382D69
      * (v16 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v8 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v8 ^ v16)));
  v18 = a2 - 1;
  v19 = (a2 - 1) & ((-348639895 * ((v17 >> 47) ^ v17)) ^ v14);
  v21 = (_QWORD *)a3[2];
  v20 = a3[3];
  for (i = 1; ; ++i)
  {
    v23 = (_QWORD *)(a1 + 40 * v19);
    if (sub_22EF52C94((uint64_t)a3, (uint64_t)v23) && v20 == v23[3])
    {
      if (!v20)
      {
LABEL_26:
        result = 1;
        goto LABEL_27;
      }
      v24 = (_QWORD *)v23[2];
      v25 = 8 * v20;
      v26 = v21;
      while (*v26 == *v24)
      {
        ++v26;
        ++v24;
        v25 -= 8;
        if (!v25)
          goto LABEL_26;
      }
    }
    if (*v23 != -8192)
      break;
    if (!v23[1])
    {
      v27 = v23[3] == 0;
      goto LABEL_23;
    }
LABEL_22:
    v27 = 0;
LABEL_23:
    if (v27 && v15 == 0)
      v15 = (_QWORD *)(a1 + 40 * v19);
    v28 = i + v19;
    v19 = v28 & v18;
  }
  if (*v23 != -4096 || v23[1] || v23[3])
    goto LABEL_22;
  result = 0;
  if (v15)
    v23 = v15;
LABEL_27:
  a4 = v89;
LABEL_29:
  *a4 = v23;
  return result;
}

uint64_t sub_22F02C49C@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t result;
  unint64_t v27;

  v3 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (a2 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (a2 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
  v4 = __ROR8__(a2 ^ 0xB492B66FBE98F273, 49);
  v5 = a2 ^ (a2 >> 47);
  v6 = 0x9DDFEA08EB382D69
     * (a2 ^ (((0x9DDFEA08EB382D69 * (v5 ^ (0xB492B66FBE98F273 * a2))) ^ a2) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                         * (v5 ^ (0xB492B66FBE98F273
                                                                                                * a2))));
  v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  v8 = v4 + a2;
  v10 = a1[6];
  v9 = a1[7];
  v11 = v4 - 0x4B6D499041670D8DLL * __ROR8__(v10 + a2 - 0x4B6D499041670D8DLL * a2, 42);
  v12 = a1[1];
  v13 = (0xB492B66FBE98F273 * __ROR8__(v8 + v12, 37)) ^ v7;
  v14 = v5 - 0x622015F714C7D297 * (v3 ^ (v3 >> 47));
  v15 = *a1 - 0x6D8ED9027DD26057 * a2;
  v17 = a1[4];
  v16 = a1[5];
  v18 = v11 + v16;
  v19 = 0xB492B66FBE98F273 * __ROR8__(v14, 33);
  v20 = v15 + v5;
  v23 = a1 + 2;
  v21 = a1[2];
  v22 = v23[1];
  v24 = v15 + v12 + v21;
  v25 = v17 + v7 + v19;
  result = __ROR8__(v25 + v21 + v18 + v9, 21);
  v27 = v16 + v10 + v25;
  a3[6] = result + v25 + __ROR8__(v27, 44);
  a3[4] = __ROR8__(v20 + v22 + v13, 21) + v15 + __ROR8__(v24, 44);
  a3[5] = v27 + v9;
  a3[2] = v13;
  a3[3] = v24 + v22;
  *a3 = v19;
  a3[1] = v18;
  return result;
}

unint64_t *sub_22F02C5C4(unint64_t *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v2 = result[1];
  v4 = result[2];
  v3 = result[3];
  v5 = 0xB492B66FBE98F273 * __ROR8__(v2 + *result + v3 + a2[1], 37);
  *result = v5;
  v6 = result[4];
  v7 = result[5];
  v8 = __ROR8__(v6 + v2 + a2[6], 42);
  v9 = result[6];
  v10 = v9 ^ v5;
  *result = v10;
  result[1] = 0xB492B66FBE98F273 * v8;
  v11 = 0xB492B66FBE98F273 * v8 + v3 + a2[5];
  v12 = 0xB492B66FBE98F273 * __ROR8__(v7 + v4, 33);
  result[1] = v11;
  result[2] = v12;
  result[3] = 0xB492B66FBE98F273 * v6;
  result[4] = v7 + v10;
  v13 = *a2 - 0x4B6D499041670D8DLL * v6;
  result[3] = v13;
  v14 = a2[3];
  v15 = __ROR8__(v13 + v14 + v7 + v10, 21);
  result[4] = v15;
  v16 = __ROR8__(a2[1] + a2[2] + v13, 44);
  result[3] = a2[1] + a2[2] + v13 + v14;
  result[4] = v15 + v13 + v16;
  result[5] = v12 + v9;
  v17 = a2[2] + v11;
  result[6] = v17;
  v18 = a2[4] + v12 + v9;
  result[5] = v18;
  v19 = a2[7];
  v20 = __ROR8__(v18 + v19 + v17, 21);
  result[6] = v20;
  v21 = v20 + v18 + __ROR8__(a2[5] + a2[6] + v18, 44);
  result[5] = a2[5] + a2[6] + v18 + v19;
  result[6] = v21;
  result[2] = v10;
  *result = v12;
  return result;
}

unint64_t sub_22F02C6E4(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0x9DDFEA08EB382D69
     * (a1[5] ^ ((0x9DDFEA08EB382D69 * (a1[5] ^ a1[3])) >> 47) ^ (0x9DDFEA08EB382D69 * (a1[5] ^ a1[3])));
  v3 = 0x9DDFEA08EB382D69
     * (a1[6] ^ ((0x9DDFEA08EB382D69 * (a1[6] ^ a1[4])) >> 47) ^ (0x9DDFEA08EB382D69 * (a1[6] ^ a1[4])));
  v4 = *a1 - 0x4B6D499041670D8DLL * (a2 ^ (a2 >> 47)) - 0x622015F714C7D297 * (v3 ^ (v3 >> 47));
  v5 = 0x9DDFEA08EB382D69
     * (v4 ^ (a1[2] - 0x4B6D499041670D8DLL * (a1[1] ^ (a1[1] >> 47)) - 0x622015F714C7D297 * (v2 ^ (v2 >> 47))));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
}

_QWORD *sub_22F02C77C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_11;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_11:
    sub_22F02C85C(a1, v6);
    v8 = 0;
    sub_22F02BC74(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096 || a3[1] || a3[3])
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_22F02C85C(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  llvm *v13;
  _OWORD *v14;
  __int128 v15;
  unsigned int v16;
  _QWORD *v17;
  _OWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 40 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = &result[5 * v10];
      do
      {
        *result = -4096;
        result[1] = 0;
        result[2] = 0;
        result[3] = 0;
        result += 5;
      }
      while (result != v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 40 * v3;
      v13 = v4;
      do
      {
        if (*(_QWORD *)v13 != -8192 && *(_QWORD *)v13 != -4096 || *((_QWORD *)v13 + 1) || *((_QWORD *)v13 + 3))
        {
          v18 = 0;
          sub_22F02BC74(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t *)v13, &v18);
          v14 = v18;
          v15 = *((_OWORD *)v13 + 1);
          *v18 = *(_OWORD *)v13;
          v14[1] = v15;
          *((_DWORD *)v14 + 8) = *((_DWORD *)v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 = (llvm *)((char *)v13 + 40);
        v12 -= 40;
      }
      while (v12);
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(40 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v16 = *(_DWORD *)(a1 + 16);
    if (v16)
    {
      v17 = &result[5 * v16];
      do
      {
        *result = -4096;
        result[1] = 0;
        result[2] = 0;
        result[3] = 0;
        result += 5;
      }
      while (result != v17);
    }
  }
  return result;
}

uint64_t sub_22F02C9DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _DWORD *v19;

  v8 = *(unsigned int *)(a2 + 216);
  sub_22F0270D4(*(_DWORD **)(a2 + 24));
  v9 = sub_22F029BF0(a1, a2, a3, a4);
  v10 = v9;
  if (v9 && v9 != 5)
  {
    v11 = *(unsigned int *)(a2 + 216);
    v12 = 32 * v11 - 32;
    v13 = v11 + 1;
    while (--v13 > v8)
    {
      v14 = v12 - 32;
      v15 = sub_22F02D00C((_QWORD *)(*(_QWORD *)(a2 + 208) + v12), a2, 1);
      v12 = v14;
      if ((v15 & 1) == 0)
      {
        v10 = 0;
        break;
      }
    }
    *(_DWORD *)(a2 + 216) = v8;
    LODWORD(v8) = -1;
  }
  v16 = dword_22F4A4A78[v10];
  if ((_DWORD)v8 != -1)
  {
    v17 = *(_DWORD *)(a2 + 216);
    if (v17 > v8)
    {
      v18 = 32 * (v17 - 1);
      do
      {
        v19 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 208) + v18) & 0xFFFFFFFFFFFFFFF8);
        if (*v19 >= 2u)
          sub_22EF53BC0((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a2 + 208) + v18) & 0xFFFFFFFFFFFFFFF8));
        *v19 = 0;
        --v17;
        v18 -= 32;
      }
      while (v8 < v17);
    }
    *(_DWORD *)(a2 + 216) = v8;
  }
  --*(_DWORD *)(*(_QWORD *)(a2 + 24) + 104);
  return v16;
}

uint64_t sub_22F02CB08(uint64_t a1, uint64_t a2)
{
  char v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  int v9;
  uint64_t result;
  _QWORD *v11;
  int v12;
  unsigned __int8 *v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  if (!sub_22E3CEC2C(a2))
    return 1;
  v4 = *(_BYTE *)(a2 + 96);
  if ((v4 & 7) != 2 && ((*(_BYTE *)(a2 + 96) & 7) != 0 || (v4 & 0x18) != 0x10))
    return 1;
  v5 = *(_DWORD *)(a2 + 28) & 0x7F;
  if (v5 == 64 || v5 == 62)
    goto LABEL_14;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  v8 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 4) != 0)
    v8 = v7[1];
  v9 = *(_WORD *)(sub_22EFCBB30(v8) + 8) & 0x7F;
  result = 1;
  if (v9 != 16 && v9 != 83)
  {
    if ((v6 & 4) != 0)
      v7 = (_QWORD *)*v7;
    if (((_WORD)v7[1] & 0x7Eu) - 34 >= 4)
    {
LABEL_14:
      result = sub_22F072D74(a1, *(_DWORD *)(a2 + 24), 2268, 0);
      if (result)
      {
        v11 = (_QWORD *)result;
        v12 = *(_BYTE *)(a2 + 96) & 0x18;
        v13 = *(unsigned __int8 **)result;
        if (!*(_QWORD *)result)
        {
          v13 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(result + 8));
          *v11 = v13;
        }
        result = 0;
        v13[*v13 + 1] = 2;
        v14 = (_BYTE *)*v11;
        v15 = *(unsigned __int8 *)*v11;
        *(_QWORD *)(*v11 + 8 * v15 + 16) = v12 != 0;
        *v14 = v15 + 1;
        v14[(v15 + 1) + 1] = 11;
        v16 = (_BYTE *)*v11;
        v17 = *(unsigned __int8 *)*v11;
        *v16 = v17 + 1;
        *(_QWORD *)&v16[8 * v17 + 16] = a2;
      }
    }
  }
  return result;
}

uint64_t sub_22F02CC78(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17[2];
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  _BYTE v26[64];
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (!sub_22E3CB5E0((uint64_t)a2))
    return 1;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = -1;
  v23 = 0;
  v24 = v26;
  v25 = 0x800000000;
  v27 = 0;
  v28 = 0;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = a2[6];
  v6 = *(unsigned int *)(v4 + 92);
  v7 = *(unsigned int *)(*(_QWORD *)(v4 + 96) + 4 * *(unsigned int *)(v4 + 104) - 4);
  v8 = (*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2) & 0xFFFFFFFFFFFFFFFCLL;
  v9 = v6 | (v7 << 32);
  v18 = v8;
  v19 = v9;
  v20 = 0;
  v29 &= ~2u;
  v17[0] = v8;
  v17[1] = v9;
  v10 = sub_22EF52AD4(v17);
  v21 = 0;
  v22 = 0;
  v23 = v10;
  LODWORD(v25) = 0;
  v29 &= 0xF2u;
  v27 = 0;
  v28 = 0;
  v11 = (uint64_t *)sub_22F0242E0(v4, v8, v9, (unint64_t)a2, v5, 0);
  v12 = sub_22EFBC5B4((uint64_t)a2);
  if (v12)
  {
    if ((*(_BYTE *)(v12 + 2) & 1) != 0)
    {
      v13 = 0;
    }
    else if ((sub_22F006CB0(v11, a1, &v18, v12, 0) & 1) != 0)
    {
      v13 = 1;
    }
    else
    {
      if (*(_DWORD *)v11 >= 2u)
        sub_22EF53BC0(v11);
      v13 = 0;
      *(_DWORD *)v11 = 0;
    }
    goto LABEL_17;
  }
  v14 = a2[6];
  if ((*(_BYTE *)(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
  {
    v15 = sub_22F007880(v14, (uint64_t)v11);
LABEL_13:
    v13 = v15;
    goto LABEL_17;
  }
  v13 = 1;
  **(_BYTE **)(a1 + 16) = 1;
  if (*(_DWORD *)(a1 + 840) != 3 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 1) == 0)
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    goto LABEL_13;
  }
LABEL_17:
  if (v24 != v26)
    free(v24);
  return v13;
}

uint64_t sub_22F02CE98(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;

  v4 = *(_DWORD *)(a2 + 28);
  v5 = 1;
  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
  {
    v5 = sub_22F02CC78(a1, (_QWORD *)a2);
    v4 = *(_DWORD *)(a2 + 28);
  }
  if (a2)
  {
    if ((v4 & 0x7F) == 0x3D)
    {
      v6 = *(unsigned int *)(a2 + 100);
      if ((_DWORD)v6)
      {
        v7 = a2 + 104;
        v8 = 8 * v6;
        do
        {
          v9 = *(unsigned __int8 **)(*(_QWORD *)v7 + 64);
          if (v9)
          {
            v10 = sub_22EFFED0C(v9);
            if (*v10 == 161)
            {
              if (*((_QWORD *)v10 + 2))
                v5 &= sub_22F02CE98(a1);
            }
          }
          v7 += 8;
          v8 -= 8;
        }
        while (v8);
      }
    }
  }
  return v5 & 1;
}

uint64_t sub_22F02CF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t result;

  if ((*(_BYTE *)(a3 + 2) & 1) != 0)
    return 0;
  v8 = *(_DWORD *)(a1 + 216);
  sub_22F0270D4(*(_DWORD **)(a1 + 24));
  if ((!a2 || sub_22F02CE98(a1, a2)) && sub_22F024504(a3, a4, a1))
  {
    result = sub_22F05B164(a1, 1, v8);
  }
  else
  {
    if (v8 != -1)
      sub_22F05B164(a1, 0, v8);
    result = 0;
  }
  --*(_DWORD *)(*(_QWORD *)(a1 + 24) + 104);
  return result;
}

uint64_t sub_22F02D00C(_QWORD *a1, uint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  _DWORD *v9;
  unsigned int v11;

  if (a3)
  {
    v5 = a1[1];
    v6 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v5 & 3) != 0 || v6 == 0)
    {
      if ((v5 & 3) != 1 || v6 == 0)
        v11 = 0;
      else
        sub_22EFF605C(v6);
    }
    else
    {
      v11 = *(_DWORD *)(v6 + 24);
    }
    return sub_22F02D0C0(a2, v11, v5, a1[2], *a1 & 0xFFFFFFFFFFFFFFF8, a1[3]);
  }
  else
  {
    v9 = (_DWORD *)(*a1 & 0xFFFFFFFFFFFFFFF8);
    if (*v9 >= 2u)
      sub_22EF53BC0((uint64_t *)(*a1 & 0xFFFFFFFFFFFFFFF8));
    *v9 = 0;
    return 1;
  }
}

uint64_t sub_22F02D0C0(uint64_t a1, unsigned int a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  unint64_t v11;
  unint64_t v13[2];
  _QWORD v14[3];
  int v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  _BYTE v20[64];
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (**(_BYTE **)(a1 + 16))
    return 0;
  v15 = -1;
  v17 = 0;
  v18 = v20;
  v19 = 0x800000000;
  v21 = 0;
  v22 = 0;
  v14[0] = a3;
  v14[1] = a4;
  v14[2] = 0;
  v23 = 0;
  v13[0] = a3;
  v13[1] = a4;
  v11 = sub_22EF52AD4(v13);
  v15 = 0;
  v16 = 0;
  v17 = v11;
  LODWORD(v19) = 0;
  v23 &= 0xF2u;
  v21 = 0;
  v22 = 0;
  v6 = sub_22F029080(a1, a2, (uint64_t)v14, a5, a6);
  if (v18 != v20)
    free(v18);
  return v6;
}

uint64_t sub_22F02D1CC(int *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;

  v5 = 4;
  if (!a3)
    v5 = 0;
  v6 = a2 & 0xFFFFFFFFFFFFFFFBLL | v5;
  result = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    v6 = v6 & 7 | result;
  }
  v8 = a1[8];
  if (v8 >= a1[9])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = a1[8];
  }
  *(_QWORD *)(*((_QWORD *)a1 + 3) + 8 * v8) = v6;
  v9 = a1[8] + 1;
  a1[8] = v9;
  if (a2)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 52 >= 0xFFFFFFFD)
    {
      v10 = *(_QWORD *)(a2 + 48);
      v11 = *a1;
      *((_QWORD *)a1 + 1) = 0;
      *((_QWORD *)a1 + 2) = v10;
      *a1 = v11 & 7 | (16 * v9);
    }
  }
  return result;
}

_QWORD *sub_22F02D290(uint64_t a1, uint64_t a2)
{
  char v4;
  _QWORD *v5;
  __int128 v6;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_22F02BC74(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t *)a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_22F02C77C(a1, (uint64_t *)a2, v8);
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *((_OWORD *)v5 + 1) = v6;
    *((_DWORD *)v5 + 8) = 0;
  }
  return v5 + 4;
}

int32x2_t sub_22F02D2F8(uint64_t a1, uint64_t *a2)
{
  int32x2_t result;
  _QWORD *v4;
  _QWORD *v5;

  v5 = 0;
  if (sub_22F02BC74(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v5))
  {
    v4 = v5;
    *v5 = -8192;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = 0;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_22F02D35C(uint64_t a1, void *__s2, size_t __n)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  int *v10;
  const void *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;

  v3 = a1 + 48;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4 == a1 + 48)
    return 0;
  while (1)
  {
    v7 = *(_QWORD *)(v4 + 24);
    if (!v7 || (*(_DWORD *)(v7 + 28) & 0x7Eu) - 54 > 3)
      goto LABEL_49;
    v8 = *(_QWORD *)(v7 + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(v7 + 40) & 7) != 0 || v8 == 0)
      goto LABEL_49;
    v10 = *(int **)(v8 + 16);
    v12 = *v10;
    v11 = v10 + 4;
    if (v12 != __n || __n && memcmp(v11, __s2, __n))
      goto LABEL_49;
    v13 = *(_WORD *)(v7 + 80) & 0x7F;
    v14 = -40;
    if (v13 > 0x46)
    {
      if (v13 == 83)
        goto LABEL_28;
      if (v13 == 71)
      {
        v14 = -56;
        goto LABEL_28;
      }
      if (v13 != 81)
        goto LABEL_22;
    }
    else
    {
      if (v13 > 0x18)
        goto LABEL_21;
      if (v13 == 16)
        goto LABEL_14;
      if (((1 << v13) & 0x1066) == 0)
      {
        if (v13 == 24)
        {
LABEL_14:
          v14 = -48;
          goto LABEL_28;
        }
LABEL_21:
        if (v13 == 70)
        {
          v14 = -64;
          goto LABEL_28;
        }
LABEL_22:
        v15 = v13 - 52;
        if (v13 - 33 >= 5)
          v16 = -48;
        else
          v16 = -64;
        if (v15 >= 6)
          v14 = v16;
        else
          v14 = -72;
      }
    }
LABEL_28:
    v17 = *(_QWORD *)(v7 + 72 + v14 + 16);
    v18 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8);
    if ((v17 & 4) != 0)
      v18 = (_QWORD *)*v18;
    v19 = v18 - 8;
    if (!v18 || (*((_DWORD *)v18 - 9) & 0x7E) != 0x24)
      goto LABEL_49;
    v20 = *(v18 - 3);
    v21 = (v20 & 7) != 0 ? 0 : v20 & 0xFFFFFFFFFFFFFFF8;
    v22 = v19[2];
    v23 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF8);
    if ((v22 & 4) != 0)
      break;
    if (v23)
      goto LABEL_37;
LABEL_49:
    v4 = *(_QWORD *)(v4 + 16);
    if (v4 == v3)
      return 0;
  }
  v23 = (_QWORD *)*v23;
  if (!v23)
    goto LABEL_49;
LABEL_37:
  v24 = v19[21];
  if (!sub_22EFC84D4((unint64_t)v23) || v21 == 0)
    goto LABEL_49;
  v26 = *(_QWORD *)(v21 + 16);
  if (*(_DWORD *)v26 != 9)
    goto LABEL_49;
  v27 = *(_QWORD *)(v26 + 16);
  v28 = *(unsigned __int8 *)(v26 + 24);
  v29 = v27 == 0x6F7461636F6C6C61 && v28 == 114;
  if (!v29 || !*(_DWORD *)(v24 + 8) || **(_DWORD **)v24 != 1)
    goto LABEL_49;
  return *(unsigned int *)(v4 + 92);
}

uint64_t sub_22F02D590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = sub_22EF741C8(a2, a3);
  *(_BYTE *)(a1 + 144) &= ~2u;
  result = sub_22F10ACF8(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = result;
  *(_DWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a1 + 144) & 0xF2 | 1;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  return result;
}

_QWORD *sub_22F02D5FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *result;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t **v11;
  unsigned int v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t *v15;

  v6 = *(unsigned int *)(a1 + 816);
  if (v6 < 0x1FFFFFFF)
  {
    *(_DWORD *)(a1 + 816) = v6 + 1;
    sub_22F006C3C(a4, (8 * (v6 + 1)) | 3, a3, 0);
    v8 = operator new(0x78uLL);
    v9 = (uint64_t **)v8;
    *((_DWORD *)v8 + 8) = v6 + 1;
    *(_OWORD *)(v8 + 5) = 0u;
    *(_OWORD *)(v8 + 7) = 0u;
    *(_OWORD *)(v8 + 9) = 0u;
    *(_OWORD *)(v8 + 11) = 0u;
    *(_OWORD *)(v8 + 13) = 0u;
    v10 = *(uint64_t ***)(a1 + 800);
    if (v10)
    {
      while (1)
      {
        while (1)
        {
          v11 = v10;
          v12 = *((_DWORD *)v10 + 8) - 1;
          if (v6 >= v12)
            break;
          v10 = (uint64_t **)*v10;
          v13 = v11;
          if (!*v11)
            goto LABEL_11;
        }
        if (v12 >= v6)
          break;
        v10 = (uint64_t **)v10[1];
        if (!v10)
        {
          v13 = v11 + 1;
          goto LABEL_11;
        }
      }
      operator delete(v8);
      v9 = v11;
    }
    else
    {
      v13 = (uint64_t **)(a1 + 800);
      v11 = (uint64_t **)(a1 + 800);
LABEL_11:
      *v8 = 0;
      v8[1] = 0;
      v8[2] = v11;
      *v13 = v8;
      v14 = **(_QWORD **)(a1 + 792);
      v15 = v8;
      if (v14)
      {
        *(_QWORD *)(a1 + 792) = v14;
        v15 = *v13;
      }
      sub_22E49FD00(*(uint64_t **)(a1 + 800), v15);
      ++*(_QWORD *)(a1 + 808);
    }
    result = v9 + 5;
    v9[14] = (uint64_t *)a2;
  }
  else
  {
    sub_22F072CEC(a1, a2, 2213, 0);
    return 0;
  }
  return result;
}

uint64_t sub_22F02D738(uint64_t a1, int a2, unsigned int a3)
{
  unsigned int v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  _BYTE *v14;
  char v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;

  v5 = *(_DWORD *)(a1 + 216);
  if (v5 <= a3)
  {
    result = 1;
  }
  else
  {
    v7 = 32 * (v5 - 1);
    while (1)
    {
      v8 = (_QWORD *)(*(_QWORD *)(a1 + 208) + v7);
      if ((*(_BYTE *)v8 & 4) != 0)
      {
        result = sub_22F02D00C(v8, a1, a2);
        if (!(_DWORD)result)
          break;
      }
      v7 -= 32;
      if (--v5 <= a3)
      {
        result = 1;
        break;
      }
    }
    v5 = *(_DWORD *)(a1 + 216);
  }
  v10 = *(_QWORD *)(a1 + 208);
  v11 = (_OWORD *)(v10 + 32 * a3);
  if (v5 == a3)
    goto LABEL_10;
  v12 = (_OWORD *)(v10 + 32 * v5);
  v13 = 32 * v5 - 32 * a3 - 32;
  v14 = (_BYTE *)(v10 + 32 * a3);
  do
  {
    v15 = *v14;
    v14 += 32;
    if ((v15 & 4) != 0)
      break;
    v13 -= 32;
    v11 = v14;
  }
  while (v14 != (_BYTE *)v12);
  if (v14 == (_BYTE *)v12)
  {
LABEL_10:
    v12 = v11;
  }
  else
  {
    v16 = 2;
    v12 = v11;
    do
    {
      v17 = &v11[v16];
      if ((v11[v16] & 4) == 0)
      {
        v18 = v17[1];
        *v12 = *v17;
        v12[1] = v18;
        v12 += 2;
      }
      v16 += 2;
      v13 -= 32;
    }
    while (v13);
    v10 = *(_QWORD *)(a1 + 208);
  }
  *(_DWORD *)(a1 + 216) = ((unint64_t)v12 - v10) >> 5;
  return result;
}

uint64_t sub_22F02D850(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  unsigned __int8 **v8;
  uint64_t v9;
  uint64_t v10;
  void *p_p;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t *v20;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  unsigned __int8 **v25;
  unsigned __int8 **v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned __int8 **v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  size_t v42;
  unsigned int v43;
  _BOOL8 v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  BOOL v48;
  void *__p;
  size_t v50;
  char v51;
  uint64_t v52[10];

  v52[9] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)a3 >> 3;
  if ((*(_QWORD *)a3 & 7) != 3 || (_DWORD)v6 == 0)
  {
    v8 = (unsigned __int8 **)sub_22F072CEC(a1, a2, 2199, 0);
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(v9 + 16816);
    LODWORD(v52[0]) = 0;
    sub_22F00676C(a3, (uint64_t)v52);
    sub_22EF55AB4((uint64_t)v52, v9, v10, &__p);
    if (LODWORD(v52[0]) >= 2)
      sub_22EF53BC0(v52);
    if (v8)
    {
      if (v51 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v51 >= 0)
        v12 = v51 & 0x7F;
      else
        v12 = v50;
      sub_22E3B89A8(v8, p_p, v12);
    }
    if (v51 < 0)
      operator delete(__p);
    v13 = *(_QWORD *)a3;
    if ((~*(_DWORD *)a3 & 3) != 0)
    {
      if (v13 < 4)
        return 0;
    }
    else
    {
      v48 = (v13 & 0x7FFFFFFF8) != 0;
      if ((v13 & 4) != 0)
        v48 = v13 > 7;
      if (!v48)
        return 0;
    }
LABEL_20:
    sub_22F016518(a1, v13, *(_QWORD *)(a3 + 8));
    return 0;
  }
  v14 = *(_QWORD *)(a1 + 800);
  if (!v14)
    goto LABEL_32;
  v16 = v6 - 1;
  v17 = a1 + 800;
  do
  {
    v18 = *(_DWORD *)(v14 + 32) - 1;
    v19 = v18 >= v16;
    if (v18 >= v16)
      v20 = (uint64_t *)v14;
    else
      v20 = (uint64_t *)(v14 + 8);
    if (v19)
      v17 = v14;
    v14 = *v20;
  }
  while (*v20);
  if (v17 == a1 + 800 || v16 < *(_DWORD *)(v17 + 32) - 1)
  {
LABEL_32:
    sub_22F072CEC(a1, a2, 2204, 0);
    return 0;
  }
  v22 = *(_DWORD **)(v17 + 112);
  if (*(_BYTE *)v22 == 126)
    v23 = (*v22 >> 19) & 1;
  else
    v23 = 2;
  if (v23 != a4)
  {
    v24 = *(_QWORD *)(a3 + 8);
    v25 = (unsigned __int8 **)sub_22F072CEC(a1, a2, 2241, 0);
    v26 = v25;
    if (v25)
    {
      v27 = *v25;
      if (!*v26)
      {
        v27 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v26[1]);
        *v26 = v27;
      }
      v27[*v27 + 1] = 2;
      v28 = *v26;
      v29 = **v26;
      *v28 = v29 + 1;
      *(_QWORD *)&v28[8 * v29 + 16] = a4;
    }
    v30 = *(_BYTE **)(v17 + 112);
    if (*v30 == 126)
      v31 = ((unint64_t)*(unsigned int *)v30 >> 19) & 1;
    else
      v31 = 2;
    if (v26)
    {
      v32 = *v26;
      if (!*v26)
      {
        v32 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v26[1]);
        *v26 = v32;
      }
      v32[*v32 + 1] = 2;
      v33 = *v26;
      v34 = **v26;
      *v33 = v34 + 1;
      *(_QWORD *)&v33[8 * v34 + 16] = v31;
      v33[(v34 + 1) + 1] = 9;
      v35 = *v26;
      v36 = **v26;
      *v35 = v36 + 1;
      *(_QWORD *)&v35[8 * v36 + 16] = v24;
    }
    v13 = *(_QWORD *)a3;
    goto LABEL_20;
  }
  if (!a4)
  {
    v37 = *(_DWORD *)(a3 + 24);
    if ((v37 & 0xFFFFFFF2) == 0
      && ((v37 & 8) == 0
       || ((*(_DWORD *)(a3 + 56) == 1) & (v37 >> 2)) != 0
       || *(_QWORD *)(*(_QWORD *)(a3 + 48) - 8) != *(_QWORD *)(a3 + 32)))
    {
      return v17 + 40;
    }
LABEL_55:
    v38 = (unsigned __int8 **)sub_22F072CEC(a1, a2, 2200, 0);
    v39 = *(_QWORD *)(a1 + 8);
    v40 = *(_QWORD *)(v39 + 16816);
    LODWORD(v52[0]) = 0;
    sub_22F00676C(a3, (uint64_t)v52);
    sub_22EF55AB4((uint64_t)v52, v39, v40, &__p);
    if (LODWORD(v52[0]) >= 2)
      sub_22EF53BC0(v52);
    if (v38)
    {
      if (v51 >= 0)
        v41 = &__p;
      else
        v41 = __p;
      if (v51 >= 0)
        v42 = v51 & 0x7F;
      else
        v42 = v50;
      sub_22E3B89A8(v38, v41, v42);
    }
    v43 = *(_DWORD *)(a3 + 24);
    v44 = (v43 & 2) != 0
       || (v43 & 8) != 0
       && ((*(_DWORD *)(a3 + 56) == 1) & (v43 >> 2)) == 0
       && *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * (int)((v43 >> 4) - 1)) == *(_QWORD *)(a3 + 32);
    if (v38)
    {
      v45 = *v38;
      if (!*v38)
      {
        v45 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v38[1]);
        *v38 = v45;
      }
      v45[*v45 + 1] = 2;
      v46 = *v38;
      v47 = **v38;
      *v46 = v47 + 1;
      *(_QWORD *)&v46[8 * v47 + 16] = v44;
    }
    if (v51 < 0)
      operator delete(__p);
    return 0;
  }
  if (*(_DWORD *)(a3 + 56) != 1 || **(_QWORD **)(a3 + 48))
    goto LABEL_55;
  return v17 + 40;
}

uint64_t *sub_22F02DCA0(uint64_t **a1, int a2)
{
  uint64_t *result;
  uint64_t *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;

  v4 = (uint64_t *)(a1 + 1);
  result = a1[1];
  if (result)
  {
    v5 = a2 - 1;
    v6 = result;
    v7 = v4;
    do
    {
      v8 = *((_DWORD *)v6 + 8) - 1;
      v9 = v8 >= v5;
      if (v8 >= v5)
        v10 = (uint64_t **)v6;
      else
        v10 = (uint64_t **)(v6 + 1);
      if (v9)
        v7 = v6;
      v6 = *v10;
    }
    while (*v10);
    if (v7 == v4 || v5 < *((_DWORD *)v7 + 8) - 1)
    {
      return 0;
    }
    else
    {
      v11 = (uint64_t *)v7[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        v13 = v7;
        do
        {
          v12 = (uint64_t *)v13[2];
          v14 = *v12 == (_QWORD)v13;
          v13 = v12;
        }
        while (!v14);
      }
      if (*a1 == v7)
        *a1 = v12;
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      sub_22E6C2420(result, v7);
      if (*((_DWORD *)v7 + 10) >= 2u)
        sub_22EF53BC0(v7 + 5);
      operator delete(v7);
      return (uint64_t *)1;
    }
  }
  return result;
}

unint64_t sub_22F02DD88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = sub_22F02E038((uint64_t *)a2, a3, a4, a5, 1);
  if ((result & 1) == 0)
    goto LABEL_7;
  v10 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(a4 + 40) & 0xFFFFFFFFFFFFFFF0));
  if (!v10
    || (v11 = v10, (*(_DWORD *)(v10 + 28) & 0x7Fu) - 35 > 2)
    || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v10 + 104) + 96), *(_QWORD *)(v10 + 104)),
        *(_DWORD *)(*(_QWORD *)(v11 + 128) + 20))
    || (v12 = *(_DWORD *)(a4 + 56), v13 = *(_DWORD *)(a4 + 24), v12 < v13 >> 4))
  {
LABEL_6:
    result = sub_22F072CEC(a2, a3, 103, 0);
LABEL_7:
    v14 = 0;
    *(_BYTE *)a1 = 0;
    goto LABEL_8;
  }
  v15 = v13 >> 4;
  v16 = *(_QWORD *)(a4 + 48);
  while (1)
  {
    v19 = *(_OWORD *)a4;
    v20 = v16;
    v21 = v15;
    v22 = 0;
    if ((sub_22F02BC74(*(_QWORD *)(a2 + 768), *(_DWORD *)(a2 + 784), (uint64_t *)&v19, &v22) & 1) == 0)
      break;
    v17 = *(_DWORD *)(v22 + 32);
    if (v17 <= 4 && v17 != 1)
      break;
    if (v12 < ++v15)
      goto LABEL_6;
  }
  result = sub_22F02DED8(a4 + 24, v15);
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = v15;
  v14 = 1;
LABEL_8:
  *(_BYTE *)(a1 + 16) = v14;
  return result;
}

unint64_t sub_22F02DED8(uint64_t a1, int a2)
{
  unint64_t result;

  if (a2 == *(_DWORD *)a1 >> 4)
  {
    result = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFF0));
    if (!result)
      return result;
  }
  else
  {
    result = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * (a2 - 1)) & 0xFFFFFFFFFFFFFFF8;
    if (!result)
      return result;
  }
  if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 >= 3)
    return 0;
  return result;
}

uint64_t sub_22F02DF34(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  uint64_t result;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_DWORD *)(a3 + 56) == a5)
    return 1;
  result = sub_22F02BACC(a3, a1, a2, 1u);
  if ((_DWORD)result)
  {
    v10 = *(_DWORD *)(a3 + 56);
    if (v10 == a5)
    {
LABEL_19:
      sub_22F24C010(a3 + 48, a5);
      return 1;
    }
    v11 = a5;
    while ((*(_BYTE *)(a4 + 28) & 0x80) == 0)
    {
      v12 = sub_22F0C975C(*(_QWORD *)(a1 + 8), a4);
      v13 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v11);
      if ((v13 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        if ((*(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu) - 35 >= 3)
          a4 = 0;
        else
          a4 = v13 & 0xFFFFFFFFFFFFFFF8;
      }
      else
      {
        a4 = 0;
      }
      if ((v13 & 4) != 0)
        v14 = sub_22F2500F4(v12, a4);
      else
        v14 = sub_22E46A3EC(v12, a4);
      *(_QWORD *)(a3 + 16) -= v14;
      if (v10 == ++v11)
        goto LABEL_19;
    }
    return 0;
  }
  return result;
}

uint64_t sub_22F02E038(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int *v5;
  __n128 v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  _BOOL4 v16;
  BOOL v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t result;
  _QWORD *v51;
  unsigned __int8 *v52;
  _BYTE *v53;
  uint64_t v54;
  unsigned __int8 v55;
  _BOOL8 v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unsigned __int8 **v62;
  unsigned __int8 **v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  uint64_t v66;
  void **v67;
  size_t v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unsigned __int8 *v74;
  _BYTE *v75;
  uint64_t v76;
  unsigned __int8 **v77;
  unsigned __int8 **v78;
  unsigned __int8 *v79;
  _BYTE *v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  int v84;
  unint64_t v85;
  _QWORD *v86;
  unsigned __int8 *v87;
  _BYTE *v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  void *__p[2];
  char v99;
  __int128 v100;
  _DWORD *v101;
  unint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v5 = (unsigned int *)(a3 + 24);
  if ((*(_BYTE *)(a3 + 24) & 1) != 0)
    return 0;
  v11.n128_f64[0] = sub_22F015608((unint64_t *)&v100, (uint64_t)a1, a2, a4, a3, 0);
  v12 = v102;
  if (v102 < 0x10)
    return 0;
  v13 = (uint64_t)v101;
  v14 = *v5;
  if (!v101)
  {
    if ((v14 & 2) == 0)
    {
      if ((v14 & 8) == 0 || ((*(_DWORD *)(a3 + 56) == 1) & (v14 >> 2)) != 0)
      {
        if (((*(_DWORD *)(a3 + 56) == 1) & (v14 >> 2)) != 0)
          goto LABEL_125;
      }
      else if (*(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * (int)((v14 >> 4) - 1)) == *(_QWORD *)(a3 + 32))
      {
        goto LABEL_124;
      }
      if (!a5)
        return 1;
      LODWORD(v103) = 0;
      sub_22F00676C(a3, (uint64_t)&v103);
      v59 = a1[1];
      v60 = sub_22F02EA54((uint64_t)v5, v59);
      v61 = sub_22EF5F8C4(v59, v60, 1);
      v62 = (unsigned __int8 **)sub_22F072CEC((uint64_t)a1, a2, 2265, 0);
      if (v62)
      {
        v63 = v62;
        v64 = *v62;
        if (!v64)
        {
          v64 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v63[1]);
          *v63 = v64;
        }
        v64[*v64 + 1] = 2;
        v65 = *v63;
        v66 = **v63;
        *v65 = v66 + 1;
        *(_QWORD *)&v65[8 * v66 + 16] = a4;
        sub_22EF55AB4((uint64_t)&v103, a1[1], v61, __p);
        if (v99 >= 0)
          v67 = __p;
        else
          v67 = (void **)__p[0];
        if (v99 >= 0)
          v68 = v99 & 0x7F;
        else
          v68 = (size_t)__p[1];
        sub_22E3B89A8(v63, v67, v68);
      }
      else
      {
        sub_22EF55AB4((uint64_t)&v103, a1[1], v61, __p);
      }
      if (v99 < 0)
        operator delete(__p[0]);
      if (v103 >= 2)
        sub_22EF53BC0((uint64_t *)&v103);
      return 0;
    }
LABEL_124:
    v70 = 2172;
    goto LABEL_126;
  }
  if ((v14 & 1) != 0)
    return 0;
  if ((v14 & 2) != 0)
    goto LABEL_116;
  v15 = *(_DWORD *)(a3 + 56);
  v97 = v15 - 1;
  if ((v14 & 8) != 0 && ((v15 == 1) & (v14 >> 2)) == 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * (int)((v14 >> 4) - 1)) != *(_QWORD *)(a3 + 32))
      goto LABEL_9;
LABEL_116:
    if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *, __n128))(*a1 + 96))(a1, v11) + 2000) + 1) & 2) == 0)
    {
LABEL_117:
      sub_22F072CEC((uint64_t)a1, a2, 103, 0);
      return 0;
    }
    v69 = *v5;
    if ((*v5 & 2) != 0
      || (v69 & 8) != 0
      && ((*(_DWORD *)(a3 + 56) == 1) & (v69 >> 2)) == 0
      && *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * (int)((v69 >> 4) - 1)) == *(_QWORD *)(a3 + 32))
    {
      goto LABEL_124;
    }
LABEL_125:
    v70 = 2176;
LABEL_126:
    v71 = (uint64_t)a1;
    v72 = a2;
LABEL_127:
    result = sub_22F072CEC(v71, v72, v70, 0);
    if (result)
    {
      v73 = (_QWORD *)result;
      v74 = *(unsigned __int8 **)result;
      if (!*(_QWORD *)result)
      {
        v74 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(result + 8));
        *v73 = v74;
      }
      result = 0;
      v74[*v74 + 1] = 2;
      v75 = (_BYTE *)*v73;
      v76 = *(unsigned __int8 *)*v73;
      *v75 = v76 + 1;
      *(_QWORD *)&v75[8 * v76 + 16] = a4;
    }
    return result;
  }
  if (((v15 == 1) & (v14 >> 2)) != 0)
    goto LABEL_116;
LABEL_9:
  v16 = a4 == 8;
  v17 = v15 == 0;
  if (v15)
    v16 = 0;
  if (!*v101 && !v16)
  {
LABEL_93:
    if (((*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1) & 1) == 0)
    {
      result = sub_22F072CEC((uint64_t)a1, a2, 2174, 0);
      if (result)
      {
        v51 = (_QWORD *)result;
        v52 = *(unsigned __int8 **)result;
        if (!*(_QWORD *)result)
        {
          v52 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(result + 8));
          *v51 = v52;
        }
        result = 0;
        v52[*v52 + 1] = 2;
        v53 = (_BYTE *)*v51;
        v54 = *(unsigned __int8 *)*v51;
        *(_QWORD *)(*v51 + 8 * v54 + 16) = a4;
        v55 = v54 + 1;
        *v53 = v54 + 1;
        v56 = *(_DWORD *)v13 == 1;
        v53[v55 + 1] = 2;
        v57 = (_BYTE *)*v51;
        v58 = *(unsigned __int8 *)*v51;
        *v57 = v58 + 1;
        *(_QWORD *)&v57[8 * v58 + 16] = v56;
      }
      return result;
    }
    return 0;
  }
  v18 = 0;
  v19 = 0;
  while (1)
  {
    v20 = v19;
    if (((v12 & 1) != 0 || *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 5 | v12 & 4)
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
    {
      v21 = *(_QWORD *)(a3 + 48);
      v103 = v100;
      v104 = v21;
      v105 = v20;
      __p[0] = 0;
      if ((sub_22F02BC74(a1[96], *((_DWORD *)a1 + 196), (uint64_t *)&v103, __p) & 1) != 0)
      {
        if (*((_DWORD *)__p[0] + 8))
          v12 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFFALL | v12 & 2;
      }
    }
    v22 = v12 & 0xFFFFFFFFFFFFFFF0;
    if (v17
      || v97 == v20 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v22 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v22 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45
        && !sub_22F01C91C((unint64_t *)&v100, (uint64_t)a1, a4)
        && (sub_22F01C988((uint64_t)a1, a2, a4, v12) & 1) != 0)
      {
        return 0;
      }
      if (v17)
        break;
    }
    v23 = *(_QWORD *)v22;
    v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v22 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_DWORD *)(v24 + 16) & 0xFEu) - 2 <= 3)
    {
      v25 = sub_22EF5C728(a1[1], v12);
      if (v25)
      {
        if (*(_BYTE *)(v25 + 16) == 2)
          v26 = v25;
        else
          v26 = 0;
      }
      else
      {
        v26 = 0;
      }
      v36 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v20);
      v37 = (unint64_t *)(v26 + 40);
      v38 = *(_DWORD *)(v26 + 48);
      if (v38 < 0x41)
        goto LABEL_61;
      if (v38 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v26 + 40)) <= 0x40)
      {
        v37 = (unint64_t *)*v37;
LABEL_61:
        if (*v37 <= v36)
          goto LABEL_145;
      }
      v12 = *(_QWORD *)(v26 + 32);
      if (v36 >= *(unsigned int *)(v13 + 16))
        sub_22F01CCF4(v13, v36);
      v18 = 0;
      v13 = *(_QWORD *)(v13 + 8) + 72 * v36;
      goto LABEL_89;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v20);
    if (*(_DWORD *)(v24 + 16) == 12)
    {
      if (v27 < 2)
      {
        if (*(_BYTE *)(v23 + 16) != 12)
          sub_22F10CF48(v23);
        return 1;
      }
LABEL_145:
      if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a1 + 96))(a1) + 2000) + 1) & 2) == 0)
        goto LABEL_117;
      v71 = (uint64_t)a1;
      v72 = a2;
      v70 = 2172;
      goto LABEL_127;
    }
    v18 = v27 & 0xFFFFFFFFFFFFFFF8;
    if ((v27 & 0xFFFFFFFFFFFFFFF8) != 0 && (*(_DWORD *)(v18 + 28) & 0x7Fu) - 49 <= 2)
    {
      if ((*(_BYTE *)(v18 + 68) & 2) != 0)
      {
        if (!sub_22F01C91C((unint64_t *)&v100, (uint64_t)a1, a4))
        {
          v77 = (unsigned __int8 **)sub_22F072CEC((uint64_t)a1, a2, 2170, 1);
          if (v77)
          {
            v78 = v77;
            v79 = *v77;
            if (!v79)
            {
              v79 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v78[1]);
              *v78 = v79;
            }
            v79[*v79 + 1] = 2;
            v80 = *v78;
            v81 = **v78;
            *v80 = v81 + 1;
            *(_QWORD *)&v80[8 * v81 + 16] = a4;
            v80[(v81 + 1) + 1] = 11;
            v82 = *v78;
            v83 = **v78;
            *v82 = v83 + 1;
            *(_QWORD *)&v82[8 * v83 + 16] = v18;
          }
          v84 = *(_DWORD *)(v18 + 24);
          result = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
          if ((_DWORD)result)
          {
            sub_22F072E10((uint64_t)a1, v84, 100);
            return 0;
          }
          return result;
        }
        v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v22 + 8) & 0xFFFFFFFFFFFFFFF0);
      }
      if ((*(_DWORD *)(sub_22F114198(*(_QWORD *)(v24 + 24)) + 72) & 0xE000) == 0x4000)
      {
        v28 = *(_QWORD *)(v13 + 8);
        if (!v28)
          goto LABEL_46;
        v29 = *(_QWORD *)(v13 + 8);
        if ((*(_BYTE *)(v28 + 29) & 0x80) != 0)
        {
          v30 = *(_QWORD *)(v13 + 8);
          v31 = sub_22EFB5D7C(v30);
          v28 = v30;
          v29 = v31;
        }
        v32 = v18;
        if ((*(_BYTE *)(v18 + 29) & 0x80) != 0)
        {
          v96 = v28;
          v32 = sub_22EFB5D7C(v18);
          v28 = v96;
        }
        if (v29 != v32)
        {
LABEL_46:
          if ((_DWORD)a4 != 8 || v97 != v20)
          {
            v85 = v28;
            result = sub_22F072CEC((uint64_t)a1, a2, 2169, 0);
            if (result)
            {
              v86 = (_QWORD *)result;
              v87 = *(unsigned __int8 **)result;
              if (!*(_QWORD *)result)
              {
                v87 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(result + 8));
                *v86 = v87;
              }
              result = 0;
              v87[*v87 + 1] = 2;
              v88 = (_BYTE *)*v86;
              v89 = *(unsigned __int8 *)*v86;
              *v88 = v89 + 1;
              *(_QWORD *)&v88[8 * v89 + 16] = a4;
              v88[(v89 + 1) + 1] = 11;
              v90 = (_BYTE *)*v86;
              v91 = *(unsigned __int8 *)*v86;
              *(_QWORD *)(*v86 + 8 * v91 + 16) = v18;
              LOBYTE(v91) = v91 + 1;
              *v90 = v91;
              v90[v91 + 1] = 2;
              v92 = (_BYTE *)*v86;
              v93 = *(unsigned __int8 *)*v86;
              *v92 = v93 + 1;
              *(_QWORD *)&v92[8 * v93 + 16] = v85 == 0;
              v92[(v93 + 1) + 1] = 11;
              v94 = (_BYTE *)*v86;
              v95 = *(unsigned __int8 *)*v86;
              *v94 = v95 + 1;
              *(_QWORD *)&v94[8 * v95 + 16] = v85;
            }
            return result;
          }
          LODWORD(v103) = 0;
          sub_22EF53A5C(v13, v18, (uint64_t)&v103);
          if (v103 >= 2)
            sub_22EF53BC0((uint64_t *)&v103);
        }
        v13 = *(_QWORD *)(v13 + 16);
      }
      else
      {
        v13 = *(_QWORD *)(v13 + 8) + 72 * (*(_DWORD *)(v13 + 16) + sub_22EFC306C(v18));
      }
      v44 = *(_QWORD *)(v18 + 48);
      v45 = (v12 & 1) == 0 && (*(_BYTE *)((v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) == 0;
      if ((v12 & 4) != 0)
      {
        LODWORD(v48) = !v45;
        if ((*(_DWORD *)(v18 + 68) & 2) != 0)
          v48 = 0;
        else
          v48 = v48;
        v12 = v44 | v48;
      }
      else
      {
        v46 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 8);
        LODWORD(v47) = !v45;
        if ((*(_DWORD *)(v18 + 68) & 2) != 0)
          v47 = 0;
        else
          v47 = v47;
        v12 = v44 | v47;
        if ((v46 & 4) == 0)
          goto LABEL_89;
      }
      goto LABEL_88;
    }
    v33 = sub_22F10C2A4(v23);
    if (v33 && (*(_DWORD *)(v33 + 28) & 0x7Fu) - 35 >= 3)
      v33 = 0;
    v34 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v20) & 0xFFFFFFFFFFFFFFF8;
    if (v34)
    {
      if ((*(_DWORD *)(v34 + 28) & 0x7Fu) - 35 >= 3)
        v35 = 0;
      else
        v35 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v20) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      v35 = 0;
    }
    v39 = sub_22F01D5B0(v33, v35);
    v40 = *(_QWORD *)(v13 + 8);
    v41 = sub_22EF6477C(a1[1], v35);
    v42 = (v12 & 1) == 0 && (*(_BYTE *)((v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) == 0;
    v13 = v40 + 72 * v39;
    if ((v12 & 4) != 0)
    {
      v12 = v41 | !v42;
LABEL_73:
      v18 = 0;
LABEL_88:
      v12 |= 4uLL;
      goto LABEL_89;
    }
    v43 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 8);
    v12 = v41 | !v42;
    if ((v43 & 4) != 0)
      goto LABEL_73;
    v18 = 0;
LABEL_89:
    v49 = (_DWORD)a4 == 8;
    v19 = v20 + 1;
    v17 = v97 == v20;
    if (v97 != v20)
      v49 = 0;
    if (!*(_DWORD *)v13 && !v49)
      goto LABEL_93;
  }
  if (((1 << a4) & 0xE3) == 0)
  {
    if (v18)
    {
      if ((*(_BYTE *)(v18 + 68) & 1) != 0)
      {
        result = sub_22F01CBE4((uint64_t)a1, a2, (int *)v13, v18);
        if (!(_DWORD)result)
          return result;
      }
    }
  }
  return 1;
}

unint64_t sub_22F02EA54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;

  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 == *(_DWORD *)a1 >> 4)
    return *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v2 - 8) & 0xFFFFFFFFFFFFFFF8;
  if (v4)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 35 >= 3)
      v4 = 0;
  }
  return sub_22EF6477C(a2, v4);
}

uint64_t sub_22F02EAA0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v10 = *(_QWORD *)(**(_QWORD **)(a5 + 16) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v10 + 8) & 0xF) != 0)
    v10 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(a5 + 16));
  v11 = sub_22F10C2A4(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0));
  if (v11)
  {
    if ((*(_DWORD *)(v11 + 28) & 0x7Fu) - 35 >= 3)
      v12 = 0;
    else
      v12 = v11;
  }
  else
  {
    v12 = 0;
  }
  if ((*(_BYTE *)(a5 + 12) & 1) == 0)
    return sub_22F02BA20(a1, a2, a3, a4, v12, 0);
  if ((*(_BYTE *)(a3 + 24) & 1) != 0)
    return 0;
  v14 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(a3 + 40) & 0xFFFFFFFFFFFFFFF0));
  if (v14)
    v15 = (*(_DWORD *)(v14 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v14;
  else
    v15 = 0;
  if (!sub_22F02DF34(a1, a2, a3, v15, *(_DWORD *)(a3 + 24) >> 4) || (*(_BYTE *)(v15 + 28) & 0x80) != 0)
    return 0;
  v17 = sub_22F0C975C(*(_QWORD *)(a1 + 8), v15);
  *(_QWORD *)(a3 + 16) += sub_22F2500F4(v17, v12);
  v18 = sub_22F02BACC(a3, a1, a2, 2 * ((*(_DWORD *)(v12 + 28) & 0x7Fu) - 49 < 3));
  v16 = 1;
  if (v18)
    sub_22F02D1CC((int *)(a3 + 24), v12, 1);
  return v16;
}

uint64_t sub_22F02EC30(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[3];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v10 = (*(_DWORD *)a2 >> 18) & 0x7F;
  if (v10 <= 0x13)
  {
    switch(v10)
    {
      case 3u:
        LODWORD(v52[0]) = 0;
        LODWORD(v44) = 0;
        v11 = 0;
        if (sub_22F009DC4(&v44, *a1, *(_QWORD *)(a2 + 16)))
        {
          if (sub_22F02F148((uint64_t *)*a1, (uint64_t)v52, (uint64_t)&v44, a2))
          {
            sub_22F02700C(a1[1], (uint64_t)v52);
            v11 = 1;
          }
          else
          {
            v11 = 0;
          }
        }
        if (v44 >= 2)
          sub_22EF53BC0(&v44);
        goto LABEL_58;
      case 4u:
        memset(v52, 0, sizeof(v52));
        LODWORD(v53) = -1;
        v55 = 0;
        v56 = &v58;
        v57 = 0x800000000;
        v65 = 0;
        v66 = 0;
        v13 = *(_QWORD *)(a2 + 16);
        v44 = *a1;
        LOBYTE(v45) = 0;
        v11 = 0;
        if (sub_22F010358((int)&v44, v13, a3, a4, a5, a6, a7, a8, v39, v40, v42, v44, (uint64_t)v52, v45, v46, v47, v48, v49, v50,
                             v51,
                             0,
                             0,
                             0,
                             v53,
                             v54,
                             0,
                             (uint64_t)&v58,
                             0x800000000,
                             v58,
                             v59,
                             v60,
                             v61,
                             v62,
                             v63,
                             v64,
                             0,
                             0,
                             v67,
                             v68))
        {
          LODWORD(v44) = 0;
          v11 = sub_22F0248D4((uint64_t *)*a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), (uint64_t)v52, (uint64_t)&v44, 0);
          if ((_DWORD)v11)
            sub_22F02700C(a1[1], (uint64_t)&v44);
          if (v44 >= 2)
            sub_22EF53BC0(&v44);
        }
        if (v56 != &v58)
          free(v56);
        return v11;
      case 5u:
        return sub_22F025158(a1, *(_QWORD *)(a2 + 16));
      case 0xFu:
        sub_22F024D28(*a1, *(_QWORD *)(a2 + 16));
        sub_22F027050((unint64_t *)a1[1], 0);
        return 1;
      case 0x10u:
        if (!sub_22F025158(a1, *(_QWORD *)(a2 + 16)))
          return 0;
        v14 = *(unsigned int *)(a2 + 4);
        if (!(_DWORD)v14)
          return 1;
        v15 = sub_22EFFB554((unsigned __int8 *)a2) - 16;
        v16 = 8 * v14;
        while (1)
        {
          v17 = v16 - 8;
          if (v16 == 8)
            break;
          v18 = **(_QWORD **)(*(_QWORD *)(v15 + v16) + 16);
          v19 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v19 + 8) & 0xF) != 0)
            v19 = (unint64_t)sub_22F10D2BC(v18);
          v20 = sub_22F10C2A4(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0));
          if (v20)
          {
            if ((*(_DWORD *)(v20 + 28) & 0x7Fu) - 35 >= 3)
              v21 = 0;
            else
              v21 = v20;
          }
          else
          {
            v21 = 0;
          }
          v22 = sub_22F02F0A4(a1[1], v21);
          v16 = v17;
          if (!v22)
            goto LABEL_71;
        }
        v34 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v34)
          v35 = *(_BYTE *)(v34 + 16) == 31;
        else
          v35 = 0;
        if (!v35)
          v34 = sub_22F10CF48(v34);
        v36 = a1[1];
        v37 = sub_22F10C2A4(*(_QWORD *)(v34 + 40));
        if (v37)
        {
          if ((*(_DWORD *)(v37 + 28) & 0x7Fu) - 35 >= 3)
            v38 = 0;
          else
            v38 = v37;
        }
        else
        {
          v38 = 0;
        }
        if (!sub_22F02F0A4(v36, v38))
          goto LABEL_71;
        return 1;
      case 0x11u:
        if (!sub_22F025158(a1, *(_QWORD *)(a2 + 16)))
          return 0;
        v23 = sub_22EFFB554((unsigned __int8 *)a2);
        v24 = *(unsigned int *)(a2 + 4);
        if (!(_DWORD)v24)
          return 1;
        v25 = v23;
        v26 = 8 * v24;
        break;
      default:
        goto LABEL_71;
    }
    while (1)
    {
      v27 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)v25 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v27 + 8) & 0xF) != 0)
        v27 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(*(_QWORD *)v25 + 16));
      v28 = sub_22F10C2A4(*(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF0));
      if (v28)
      {
        if ((*(_DWORD *)(v28 + 28) & 0x7Fu) - 35 >= 3)
          v29 = 0;
        else
          v29 = v28;
      }
      else
      {
        v29 = 0;
      }
      v30 = a1[1];
      v31 = *(_QWORD *)v30;
      if (*(_QWORD *)v30 >= 8uLL)
      {
        v32 = *(unsigned int *)(v30 + 16);
        if ((_DWORD)v32)
        {
          if ((v31 & 4) == 0)
            goto LABEL_47;
        }
        else
        {
          v33 = v31 | 4;
          *(_QWORD *)v30 = v33;
          if ((v33 & 4) == 0)
          {
LABEL_47:
            if (!sub_22F03134C(v30, v29))
              goto LABEL_71;
            goto LABEL_53;
          }
        }
        if (v32 >= *(unsigned int *)(v30 + 20))
        {
          v41 = v29;
          v43 = v30;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v29 = v41;
          v30 = v43;
          v32 = *(unsigned int *)(v43 + 16);
        }
        *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v32) = v29;
        ++*(_DWORD *)(v30 + 16);
      }
LABEL_53:
      v25 += 8;
      v26 -= 8;
      if (!v26)
        return 1;
    }
  }
  if (v10 == 20)
    return sub_22F025158(a1, *(_QWORD *)(a2 + 16));
  if (v10 == 66 || v10 == 61)
  {
    LODWORD(v52[0]) = 0;
    v11 = sub_22F009DC4(v52, *a1, *(_QWORD *)(a2 + 16));
    if ((_DWORD)v11)
      sub_22F02700C(a1[1], (uint64_t)v52);
LABEL_58:
    if (LODWORD(v52[0]) >= 2)
      sub_22EF53BC0(v52);
  }
  else
  {
LABEL_71:
    sub_22F072CEC(*a1, a2, 103, 0);
    return 0;
  }
  return v11;
}

BOOL sub_22F02F0A4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  _BOOL8 result;
  uint64_t v5;

  if (*(_QWORD *)a1 >= 8uLL)
  {
    if ((*(_QWORD *)a1 & 4) != 0)
    {
      result = sub_22F03134C(a1, a2);
      if (!result)
        return result;
      if (!*(_DWORD *)(a1 + 16))
        *(_QWORD *)a1 &= ~4uLL;
    }
    else
    {
      v3 = *(_DWORD *)(a1 + 16);
      if (v3 >= *(_DWORD *)(a1 + 20))
      {
        v5 = a2;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        a2 = v5;
        v3 = *(_DWORD *)(a1 + 16);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v3) = a2;
      ++*(_DWORD *)(a1 + 16);
    }
  }
  return 1;
}

BOOL sub_22F02F148(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 v8;
  unint64_t v9;
  char v10;
  char *v11;
  int v12;
  _QWORD v14[3];
  void *v15;
  __int128 v16;
  _BYTE v17[72];
  unsigned __int8 v18;
  uint64_t v19[9];
  _QWORD v20[3];
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[11];
  uint64_t *v26;
  __int128 v27;
  _OWORD v28[3];
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (!sub_22F02F414((uint64_t)a1, a1[1], a4))
    return 0;
  memset(v20, 0, sizeof(v20));
  v21 = -1;
  v22 = 0;
  v23 = v25;
  v24 = 0x800000000;
  v25[8] = 0;
  v25[9] = 0;
  LODWORD(v19[0]) = 0;
  sub_22F01D8E0(v20, a1[1], a3);
  v8 = 0;
  if (sub_22F0248D4(a1, a4, *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8) | 1, (uint64_t)v20, (uint64_t)v19, 1u))
  {
    sub_22EF5CCD0(a1[1], *(_QWORD *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v26);
    v9 = (unint64_t)v26;
    v10 = *(_BYTE *)(*(_QWORD *)(a1[1] + 15088) + 80) ^ 1;
    v26 = a1;
    *(_QWORD *)&v27 = (char *)v28 + 8;
    *(_QWORD *)&v28[0] = 32;
    if (v9 < 0x21)
    {
      v11 = (char *)v28 + 8;
      if (!v9)
      {
LABEL_8:
        *((_QWORD *)&v27 + 1) = v9;
        v30 = v10;
        v31 = a4;
        if ((sub_22F02FB14((uint64_t)&v26, (uint64_t)v19, *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8)) & 1) != 0)
        {
          v15 = v17;
          v16 = xmmword_22F44E330;
          if (*((_QWORD *)&v27 + 1))
            sub_22F2F3E84((uint64_t)&v15, (uint64_t)&v27);
          v17[64] = v30;
          v12 = 1;
        }
        else
        {
          v12 = 0;
          LOBYTE(v15) = 0;
        }
        v18 = v12;
        if ((_OWORD *)v27 != (_OWORD *)((char *)v28 + 8))
        {
          free((void *)v27);
          v12 = v18;
        }
        if (v12)
        {
          v14[0] = a1;
          v14[1] = &v15;
          v14[2] = a4;
          sub_22F0302E8((uint64_t)&v26, (uint64_t)v14, *(_QWORD *)(a4 + 8));
          v8 = v29 != 0;
          if (v29)
          {
            if (*(_DWORD *)a2 >= 2u)
              sub_22EF53BC0((uint64_t *)a2);
            *(_DWORD *)a2 = (_DWORD)v26;
            *(_OWORD *)(a2 + 8) = v27;
            *(_OWORD *)(a2 + 24) = v28[0];
            *(_OWORD *)(a2 + 40) = v28[1];
            *(_OWORD *)(a2 + 56) = v28[2];
          }
          if (v18 && v15 != v17)
            free(v15);
        }
        else
        {
          v8 = 0;
        }
        goto LABEL_24;
      }
    }
    else
    {
      *((_QWORD *)&v27 + 1) = 0;
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v11 = (char *)v27;
    }
    bzero(v11, 2 * v9);
    goto LABEL_8;
  }
LABEL_24:
  if (LODWORD(v19[0]) >= 2)
    sub_22EF53BC0(v19);
  if (v23 != v25)
    free(v23);
  return v8;
}

uint64_t sub_22F02F414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t result;
  unsigned int v8;

  sub_22F0D5A50(a3);
  result = sub_22F02F494(v6, *(_QWORD *)(a3 + 8), a1, a2, 1);
  if ((_DWORD)result)
  {
    sub_22F0D5A50(a3);
    return sub_22F02F494(v8, *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8), a1, a2, 0);
  }
  return result;
}

uint64_t sub_22F02F494(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t result;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  unsigned __int8 **v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned __int8 **v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 **v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned __int8 **v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  unsigned __int8 **v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  uint64_t v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  int v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  uint64_t v74;
  unsigned __int8 *v75;
  uint64_t v76;
  unint64_t v77;
  unsigned __int8 v78;
  unint64_t v79;

  v78 = a5;
  v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  v10 = v9 | a2 & 7;
  v79 = v10;
  v11 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF0);
  if (sub_22F10E06C(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0)))
  {
    if (a3)
    {
      result = sub_22F072828(a3, a1, 2187, 0, 0);
      if (result)
      {
        v13 = (unsigned __int8 **)result;
        sub_22E89523C((unsigned __int8 **)result, &v78);
        v14 = *v13;
        if (!*v13)
        {
          v14 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v13[1]);
          *v13 = v14;
        }
        result = 0;
        v14[*v14 + 1] = 2;
        v15 = *v13;
        v16 = **v13;
        *(_QWORD *)&(*v13)[8 * v16 + 16] = 0;
        LOBYTE(v16) = v16 + 1;
        *v15 = v16;
        v15[v16 + 1] = 2;
        v17 = *v13;
        v18 = **v13;
        *v17 = v18 + 1;
        *(_QWORD *)&v17[8 * v18 + 16] = 0;
      }
      return result;
    }
    return 0;
  }
  v19 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v19 == 31)
  {
    if (!a3)
      return 0;
    result = sub_22F072828(a3, a1, 2187, 0, 0);
    if (!result)
      return result;
    v28 = (unsigned __int8 **)result;
    sub_22E89523C((unsigned __int8 **)result, &v78);
    v29 = *v28;
    if (!*v28)
    {
      v29 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v28[1]);
      *v28 = v29;
    }
    result = 0;
    v27 = 2;
    v29[*v29 + 1] = 2;
    v30 = *v28;
    v31 = **v28;
    *(_QWORD *)&(*v28)[8 * v31 + 16] = 0;
    LOBYTE(v31) = v31 + 1;
    *v30 = v31;
    v30[v31 + 1] = 2;
    v32 = *v28;
    v33 = **v28;
    *v32 = v33 + 1;
    v26 = &v32[8 * v33];
    goto LABEL_30;
  }
  if (v19 == 39)
  {
    if (!a3)
      return 0;
    result = sub_22F072828(a3, a1, 2187, 0, 0);
    if (!result)
      return result;
    v20 = (unsigned __int8 **)result;
    sub_22E89523C((unsigned __int8 **)result, &v78);
    v21 = *v20;
    if (!*v20)
    {
      v21 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v20[1]);
      *v20 = v21;
    }
    result = 0;
    v21[*v21 + 1] = 2;
    v22 = *v20;
    v23 = **v20;
    *(_QWORD *)&(*v20)[8 * v23 + 16] = 0;
    LOBYTE(v23) = v23 + 1;
    *v22 = v23;
    v22[v23 + 1] = 2;
    v24 = *v20;
    v25 = **v20;
    *v24 = v25 + 1;
    v26 = &v24[8 * v25];
    v27 = 1;
LABEL_30:
    *((_QWORD *)v26 + 2) = v27;
    return result;
  }
  if ((v10 & 4) != 0 || (v11[1] & 4) != 0)
  {
    if (!a3)
      return 0;
    result = sub_22F072828(a3, a1, 2187, 0, 0);
    if (!result)
      return result;
    v36 = (unsigned __int8 **)result;
    sub_22E89523C((unsigned __int8 **)result, &v78);
    v37 = *v36;
    if (!*v36)
    {
      v37 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v36[1]);
      *v36 = v37;
    }
    result = 0;
    v37[*v37 + 1] = 2;
    v38 = *v36;
    v39 = **v36;
    *(_QWORD *)&(*v36)[8 * v39 + 16] = 0;
    LOBYTE(v39) = v39 + 1;
    *v38 = v39;
    v38[v39 + 1] = 2;
    v40 = *v36;
    v41 = **v36;
    *v40 = v41 + 1;
    v26 = &v40[8 * v41];
    v27 = 3;
    goto LABEL_30;
  }
  v34 = sub_22F10C2A4(*v11);
  if (!v34)
    goto LABEL_22;
  v42 = v34;
  v43 = *(_DWORD *)(v34 + 28);
  if ((v43 & 0x7Eu) - 34 > 3)
    goto LABEL_22;
  if ((v43 & 0x7Fu) - 38 >= 0xFFFFFFFD)
  {
    v44 = sub_22E46A3A0(v34);
    if (v44 != v45)
    {
      v46 = v44;
      v47 = v45;
      while (1)
      {
        v48 = *(_QWORD *)(**(_QWORD **)(v46 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v48 + 8) & 0xF) != 0)
          v48 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v46 + 16));
        if ((sub_22F02F494(a1, v48 & 0xFFFFFFFFFFFFFFF0, a3, a4, a5) & 1) == 0)
          break;
        v46 += 24;
        if (v46 == v47)
          goto LABEL_39;
      }
      v58 = **(_QWORD **)(v46 + 16);
      v59 = *(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v59 + 8) & 0xF) != 0)
        v59 = (unint64_t)sub_22F10D2BC(v58);
      if (!a3)
        return 0;
      v60 = *(_DWORD *)v46;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
      if (!(_DWORD)result)
        return result;
      v61 = v59 & 0xFFFFFFFFFFFFFFF0;
      v62 = (unsigned __int8 **)sub_22F072E10(a3, v60, 2186);
      v63 = *v62;
      if (!*v62)
      {
        v63 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v62[1]);
        *v62 = v63;
      }
      v63[*v63 + 1] = 9;
      v64 = *v62;
      v65 = **v62;
      *v64 = v65 + 1;
      *(_QWORD *)&v64[8 * v65 + 16] = v61;
      v64[(v65 + 1) + 1] = 2;
      v66 = *v62;
      v67 = **v62;
      *v66 = v67 + 1;
      *(_QWORD *)&v66[8 * v67 + 16] = 1;
      goto LABEL_58;
    }
  }
LABEL_39:
  v49 = sub_22EFC3B90(v42);
  if (!v49)
    goto LABEL_22;
  v50 = v49;
LABEL_41:
  v51 = *(_QWORD *)(v50 + 48);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    if (!a3)
      return 0;
    result = sub_22F072828(a3, a1, 2187, 0, 0);
    if (!result)
      return result;
    v52 = (unsigned __int8 **)result;
    sub_22E89523C((unsigned __int8 **)result, &v78);
    v53 = *v52;
    if (!*v52)
    {
      v53 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v52[1]);
      *v52 = v53;
    }
    result = 0;
    v53[*v53 + 1] = 2;
    v54 = *v52;
    v55 = **v52;
    *(_QWORD *)&(*v52)[8 * v55 + 16] = 1;
    LOBYTE(v55) = v55 + 1;
    *v54 = v55;
    v54[v55 + 1] = 2;
    v56 = *v52;
    v57 = **v52;
    *v56 = v57 + 1;
    v26 = &v56[8 * v57];
    v27 = 4;
    goto LABEL_30;
  }
  if (sub_22F02F494(a1, v51, a3, a4, a5))
  {
    while (1)
    {
      v50 = *(_QWORD *)(v50 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v50)
        break;
      if ((*(_DWORD *)(v50 + 28) & 0x7Fu) - 49 <= 2)
        goto LABEL_41;
    }
LABEL_22:
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
      return 1;
    v35 = sub_22EF5BA38(a4, v10);
    result = sub_22F02F494(a1, v35, a3, a4, a5);
    if ((_DWORD)result)
      return 1;
    return result;
  }
  if (!a3)
    return 0;
  v68 = *(_QWORD *)(v50 + 56);
  if ((v68 & 4) != 0 && (v77 = v68 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v77 + 16)))
    v69 = **(int ***)(v77 + 24);
  else
    v69 = (int *)(v50 + 64);
  v70 = *(_QWORD *)(v50 + 48);
  v71 = *v69;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
  if ((_DWORD)result)
  {
    v62 = (unsigned __int8 **)sub_22F072E10(a3, v71, 2186);
    v72 = *v62;
    if (!*v62)
    {
      v72 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v62[1]);
      *v62 = v72;
    }
    v72[*v72 + 1] = 9;
    v73 = *v62;
    v74 = **v62;
    *v73 = v74 + 1;
    *(_QWORD *)&v73[8 * v74 + 16] = v70;
    v73[(v74 + 1) + 1] = 2;
    v75 = *v62;
    v76 = **v62;
    *v75 = v76 + 1;
    *(_QWORD *)&v75[8 * v76 + 16] = 0;
LABEL_58:
    sub_22E890258(v62, (uint64_t *)&v79);
    return 0;
  }
  return result;
}

uint64_t sub_22F02FB14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v3)
    v4 = (*(_DWORD *)(v3 + 16) & 0xFF800FF) == 114294795;
  else
    v4 = 0;
  if (!v4)
    __asm { BR              X11 }
  return 1;
}

void sub_22F02FE1C(uint64_t a1, llvm::APInt *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char v16;
  uint64_t v18;
  char v19;
  _BYTE *v20;
  void *v21;
  unsigned int v22;
  char v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x24BDAC8D0];
  v8 = *((_DWORD *)a2 + 2);
  v22 = v8;
  if (v8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v21, a2);
    v8 = v22;
  }
  else
  {
    v21 = *(void **)a2;
  }
  v23 = *((_BYTE *)a2 + 12);
  v9 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v10)
    v11 = (*(_DWORD *)(v10 + 16) & 0xFF800FF) == 87031819;
  else
    v11 = 0;
  if (v11)
  {
    v8 = sub_22EF5CDF0(*(_QWORD *)(*(_QWORD *)a1 + 8), v9);
    sub_22E46361C((llvm::APInt *)&v21, (uint64_t)&v24);
    if (v22 >= 0x41 && v21)
      MEMORY[0x2348A0E84](v21, 0x1000C8000313F17);
    v21 = v24;
    v22 = v25;
    v23 = BYTE4(v25);
  }
  v24 = v27;
  v26 = 8;
  if (v8 < 0x48)
  {
    if (v8 >= 8)
      bzero(v27, v8 >> 3);
  }
  else
  {
    v25 = 0;
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    bzero(v24, v8 >> 3);
  }
  v25 = v8 >> 3;
  llvm::StoreIntToMemory();
  v12 = (char *)v24;
  v13 = v25;
  if (!*(_BYTE *)(a1 + 96))
  {
    if (v25)
    {
      v14 = (char *)v24 + v25 - 1;
      if (v24 < v14)
      {
        v15 = (char *)v24 + 1;
        do
        {
          v16 = *(v15 - 1);
          *(v15 - 1) = *v14;
          *v14-- = v16;
        }
        while (v15++ < v14);
        v12 = (char *)v24;
        v13 = v25;
      }
    }
  }
  if (v13)
  {
    v18 = 2 * a4;
    do
    {
      v19 = *v12;
      v20 = (_BYTE *)(*(_QWORD *)(a1 + 8) + v18);
      if (!v20[1])
        v20[1] = 1;
      *v20 = v19;
      ++v12;
      v18 += 2;
      --v13;
    }
    while (v13);
    v12 = (char *)v24;
  }
  if (v12 != (char *)v27)
    free(v12);
  if (v22 >= 0x41)
  {
    if (v21)
      MEMORY[0x2348A0E84](v21, 0x1000C8000313F17);
  }
}

uint64_t sub_22F03007C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t result;
  uint64_t v30;
  int v31;

  v6 = sub_22F10C2A4(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
  if (v6)
  {
    if ((*(_DWORD *)(v6 + 28) & 0x7Eu) - 34 >= 4)
      v7 = 0;
    else
      v7 = v6;
  }
  else
  {
    v7 = 0;
  }
  v8 = sub_22F0C975C(*(_QWORD *)(*a1 + 8), v7);
  if (v7)
  {
    if ((*(_DWORD *)(v7 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v7 + 104) + 96), *(_QWORD *)(v7 + 104));
      v9 = *(unsigned int *)(*(_QWORD *)(v7 + 128) + 16);
      if ((_DWORD)v9)
      {
        v10 = 0;
        v11 = 72 * v9;
        v12 = 16;
        do
        {
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v7 + 104) + 96), *(_QWORD *)(v7 + 104));
          v13 = *(_QWORD *)(v7 + 128);
          v14 = *(_QWORD *)(v13 + 24);
          if ((v14 & 1) != 0)
            v14 = sub_22EFCF510(v13);
          v15 = *(_QWORD *)(**(_QWORD **)(v14 + v12) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v15 + 8) & 0xF) != 0)
            v15 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v14 + v12));
          v16 = sub_22F10C2A4(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0));
          if (v16)
            v17 = (*(_DWORD *)(v16 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v16;
          else
            v17 = 0;
          v18 = *(uint64_t **)(v14 + v12);
          v19 = *(_QWORD *)(a2 + 8);
          v20 = *v18;
          v21 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v21 + 8) & 0xF) != 0)
            v21 = (unint64_t)sub_22F10D2BC(v20);
          v22 = v21 & 0xFFFFFFFFFFFFFFF0;
          v23 = sub_22E46A3EC(v8, v17);
          if ((sub_22F03007C(a1, v19 + v10, v22, v23 + a4) & 1) == 0)
            return 0;
          v10 += 72;
          v12 += 24;
        }
        while (v11 != v10);
      }
    }
  }
  v24 = sub_22EFC3B90(v7);
  if (!v24)
    return 1;
  v25 = v24;
  if ((*(_BYTE *)(v24 + 68) & 1) != 0)
  {
LABEL_28:
    v30 = *a1;
    sub_22F0D5A50(a1[13]);
    sub_22F072828(v30, v31, 2189, 0, 0);
    return 0;
  }
  v26 = 0;
LABEL_23:
  v27 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v26);
  v28 = sub_22EF5CDF0(*(_QWORD *)(*a1 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 16408) & 0xFFFFFFFFFFFFFFF0));
  result = sub_22F02FB14(a1, *(_QWORD *)(a2 + 8) + 72 * (*(_DWORD *)(a2 + 16) + v26), *(_QWORD *)(v25 + 48), v27 / v28 + a4);
  if ((_DWORD)result)
  {
    v26 += result;
    while (1)
    {
      v25 = *(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v25)
        return 1;
      if ((*(_DWORD *)(v25 + 28) & 0x7Fu) - 49 <= 2)
      {
        if ((*(_BYTE *)(v25 + 68) & 1) == 0)
          goto LABEL_23;
        goto LABEL_28;
      }
    }
  }
  return result;
}

void sub_22F0302E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

unsigned __int8 *sub_22F030354()
{
  _BYTE *v0;
  uint64_t *v1;
  uint64_t v2;
  unsigned __int8 *result;

  result = sub_22F0312C8(*v1, v1[2], v2 & 0xFFFFFFFFFFFFFFF0);
  *v0 = 0;
  v0[72] = 0;
  return result;
}

void sub_22F0309DC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char v25;
  unint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  unsigned __int8 **v36;
  unsigned __int8 **v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  size_t v41;
  void *v42;
  void **p_dst;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  llvm::APFloatBase *v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  char v51;
  int v52;
  BOOL v53;
  uint64_t v54;
  int v55;
  unsigned __int8 **v56;
  unsigned __int8 **v57;
  unint64_t v58;
  unsigned __int8 *v59;
  _BYTE *v60;
  uint64_t v61;
  unsigned __int8 v62;
  unint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  int v66;
  size_t v67;
  void *v68;
  void **v69;
  size_t v70;
  size_t v71;
  void **v72;
  size_t v73;
  size_t v74;
  size_t v75;
  void *v76;
  BOOL v77;
  void *v78;
  unsigned int v79;
  BOOL v80;
  void *v81;
  unsigned int v82;
  BOOL v83;
  void *v84;
  unsigned int v85;
  BOOL v86;
  void **__dst;
  size_t v88;
  int64_t v89;
  char v90[8];
  uint64_t v91;
  uint64_t v92;
  void *__src;
  size_t __len[2];
  _OWORD v95[3];
  char *v96;
  __int128 v97;
  _QWORD v98[3];

  v98[1] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(*a2 + 8);
  if (v7)
    v9 = (*(_DWORD *)(v7 + 16) & 0xFF800FF) == 114294795;
  else
    v9 = 0;
  if (v9)
  {
    v22 = sub_22EF741C8(v8, a3 & 0xFFFFFFFFFFFFFFF0);
    *(_DWORD *)a1 = 7;
    *(_OWORD *)(a1 + 8) = xmmword_22F45D8D0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 24) = v22;
    *(_DWORD *)(a1 + 48) = -1;
    *(_BYTE *)(a1 + 52) = 1;
    *(_BYTE *)(a1 + 72) = 1;
    return;
  }
  sub_22EF5CCD0(v8, a3, (uint64_t)&__src);
  v13 = (char *)__src;
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v14)
    v15 = *(_DWORD *)(v14 + 16) == 11;
  else
    v15 = 0;
  if (v15 && ((*(_DWORD *)(v14 + 16) >> 19) & 0x1FEu) - 210 <= 7)
  {
    sub_22EF5B2E0(*(_QWORD *)(*a2 + 8), a3 & 0xFFFFFFFFFFFFFFF0);
    v13 = (char *)(llvm::APFloatBase::getSizeInBits() >> 3);
  }
  v96 = (char *)v98;
  v97 = xmmword_22F44E360;
  if (!v13)
  {
LABEL_29:
    v85 = sub_22EF5CDF0(*(_QWORD *)(*a2 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a2 + 8) + 16408) & 0xFFFFFFFFFFFFFFF0))* (_DWORD)v13;
    if (v85 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v84);
    else
      v84 = 0;
    v86 = 1;
    llvm::LoadIntFromMemory();
    v27 = *(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0;
    v28 = *(_QWORD *)v27;
    v29 = *(_DWORD *)(*(_QWORD *)v27 + 16);
    if (*(_QWORD *)v27)
      v30 = v29 == 11;
    else
      v30 = 0;
    if (v30)
    {
      if (((*(_DWORD *)(*(_QWORD *)v27 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
        goto LABEL_52;
    }
    else if (v28 && v29 == 44)
    {
      v31 = sub_22F114198(*(_QWORD *)(v28 + 24));
      if ((*(_BYTE *)(v31 + 74) & 1) == 0 && *(_QWORD *)(v31 + 128) <= 7uLL)
      {
        v27 = *(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0;
LABEL_52:
        v44 = *(_QWORD *)v27;
        v45 = *(_DWORD *)(*(_QWORD *)v27 + 16);
        if (v44)
          v46 = v45 == 11;
        else
          v46 = 0;
        if (v46 && ((v45 >> 19) & 0x1FE) - 210 <= 7)
        {
          v47 = (llvm::APFloatBase *)sub_22EF5B2E0(*(_QWORD *)(*a2 + 8), a3 & 0xFFFFFFFFFFFFFFF0);
          v48 = llvm::APFloatBase::PPCDoubleDouble(v47);
          if ((llvm::APFloatBase *)v48 == v47)
            MEMORY[0x23489F288](&v91, v47, &v84);
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          sub_22E7B656C(&__src, (uint64_t)v90);
          *(_DWORD *)a1 = (_DWORD)__src;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)__len;
          *(_OWORD *)(a1 + 24) = v95[0];
          *(_OWORD *)(a1 + 40) = v95[1];
          *(_OWORD *)(a1 + 56) = v95[2];
          LODWORD(__src) = 0;
          *(_BYTE *)(a1 + 72) = 1;
          if (v48 == v91)
            sub_22E463170((llvm::APFloatBase *)&v92);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v91);
        }
        else
        {
          sub_22F0312C8(*a2, a2[2], a3 & 0xFFFFFFFFFFFFFFF0);
          *(_BYTE *)a1 = 0;
          *(_BYTE *)(a1 + 72) = 0;
        }
LABEL_122:
        if (v85 >= 0x41 && v84)
          MEMORY[0x2348A0E84](v84, 0x1000C8000313F17);
        goto LABEL_125;
      }
    }
    else if (v29 != 9)
    {
      goto LABEL_52;
    }
    v86 = !sub_22F110A40(a3);
    v32 = a3 & 0xFFFFFFFFFFFFFFF0;
    v33 = sub_22EF6A330(*(_QWORD *)(*a2 + 8), v32);
    if (v33 == v85)
    {
LABEL_118:
      v79 = v33;
      if (v33 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v78, (const llvm::APInt *)&v84);
        v33 = v79;
        v76 = v78;
      }
      else
      {
        v76 = v84;
        v78 = v84;
      }
      v77 = v86;
      v80 = v86;
      v79 = 0;
      *(_DWORD *)a1 = 2;
      *(_QWORD *)(a1 + 8) = v76;
      *(_DWORD *)(a1 + 16) = v33;
      *(_BYTE *)(a1 + 20) = v77;
      *(_BYTE *)(a1 + 72) = 1;
      goto LABEL_122;
    }
    llvm::APInt::trunc((llvm::APInt *)&v84);
    v82 = __len[0];
    v81 = __src;
    v83 = v86;
    sub_22E46361C((llvm::APInt *)&v81, (uint64_t)&__src);
    if (LODWORD(__len[0]) > 0x40)
    {
      v51 = llvm::APInt::equalSlowCase((llvm::APInt *)&__src, (const llvm::APInt *)&v84);
      if (__src)
        MEMORY[0x2348A0E84](__src, 0x1000C8000313F17);
      if ((v51 & 1) == 0)
      {
LABEL_44:
        v34 = *a2;
        sub_22F0D5A50(a2[2]);
        v36 = (unsigned __int8 **)sub_22F072828(v34, v35, 2188, 0, 0);
        if (v36)
        {
          v37 = v36;
          v38 = *v36;
          if (!v38)
          {
            v38 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v37[1]);
            *v37 = v38;
          }
          v38[*v38 + 1] = 9;
          v39 = *v37;
          v40 = **v37;
          *v39 = v40 + 1;
          *(_QWORD *)&v39[8 * v40 + 16] = v32;
          __src = v95;
          *(_OWORD *)__len = xmmword_22F455490;
          llvm::APInt::toString();
          v41 = __len[0];
          if (__len[0] <= 0x7FFFFFFFFFFFFFF7)
          {
            v42 = __src;
            if (__len[0] >= 0x17)
            {
              v70 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((__len[0] | 7) != 0x17)
                v70 = __len[0] | 7;
              v71 = v70 + 1;
              p_dst = (void **)operator new(v70 + 1);
              v88 = v41;
              v89 = v71 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v89) = __len[0];
              p_dst = (void **)&__dst;
              if (!__len[0])
                goto LABEL_95;
            }
            memmove(p_dst, v42, v41);
LABEL_95:
            *((_BYTE *)p_dst + v41) = 0;
            if (__src != v95)
              free(__src);
            if (v89 >= 0)
              v72 = (void **)&__dst;
            else
              v72 = __dst;
            if (v89 >= 0)
              v73 = HIBYTE(v89) & 0x7F;
            else
              v73 = v88;
            sub_22E3B89A8(v37, v72, v73);
LABEL_110:
            if (SHIBYTE(v89) < 0)
              operator delete(__dst);
            v66 = 0;
            *(_BYTE *)a1 = 0;
            *(_BYTE *)(a1 + 72) = 0;
            goto LABEL_113;
          }
LABEL_129:
          abort();
        }
        __src = v95;
        *(_OWORD *)__len = xmmword_22F455490;
        llvm::APInt::toString();
        v67 = __len[0];
        if (__len[0] > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_129;
        v68 = __src;
        if (__len[0] >= 0x17)
        {
          v74 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((__len[0] | 7) != 0x17)
            v74 = __len[0] | 7;
          v75 = v74 + 1;
          v69 = (void **)operator new(v74 + 1);
          v88 = v67;
          v89 = v75 | 0x8000000000000000;
          __dst = v69;
        }
        else
        {
          HIBYTE(v89) = __len[0];
          v69 = (void **)&__dst;
          if (!__len[0])
          {
LABEL_108:
            *((_BYTE *)v69 + v67) = 0;
            if (__src != v95)
              free(__src);
            goto LABEL_110;
          }
        }
        memmove(v69, v68, v67);
        goto LABEL_108;
      }
    }
    else if (__src != v84)
    {
      goto LABEL_44;
    }
    if (v85 > 0x40 || v82 > 0x40)
    {
      llvm::APInt::assignSlowCase((llvm::APInt *)&v84, (const llvm::APInt *)&v81);
    }
    else
    {
      v84 = v81;
      v85 = v82;
    }
    v86 = v83;
    v66 = 1;
LABEL_113:
    if (v82 >= 0x41 && v81)
      MEMORY[0x2348A0E84](v81, 0x1000C8000313F17);
    if (!v66)
      goto LABEL_122;
    v33 = v85;
    goto LABEL_118;
  }
  v16 = 0;
  v17 = a2[1];
  v18 = 2 * a4;
  v19 = v13;
  while (1)
  {
    v20 = (char *)(*(_QWORD *)v17 + v18);
    if (!v20[1])
      break;
    v21 = *v20;
    if ((unint64_t)(v16 + 1) > *((_QWORD *)&v97 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v16 = v97;
    }
    v96[v16] = v21;
    v16 = v97 + 1;
    *(_QWORD *)&v97 = v97 + 1;
    v18 += 2;
    if (!--v19)
    {
      if (!*(_BYTE *)(v17 + 88))
      {
        if (v16)
        {
          v23 = &v96[v16 - 1];
          if (v96 < v23)
          {
            v24 = v96 + 1;
            do
            {
              v25 = *(v24 - 1);
              *(v24 - 1) = *v23;
              *v23-- = v25;
            }
            while (v24++ < v23);
          }
        }
      }
      goto LABEL_29;
    }
  }
  if (a5)
  {
    if ((sub_22F112424(a5) & 1) == 0)
      goto LABEL_80;
  }
  else
  {
    v49 = *(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v49)
      v50 = *(_DWORD *)(v49 + 16) == 11;
    else
      v50 = 0;
    if (!v50)
    {
      a5 = a3;
LABEL_80:
      v54 = *a2;
      sub_22EFF605C(a2[2]);
      v56 = (unsigned __int8 **)sub_22F072828(v54, v55, 2185, 0, 0);
      if (v56)
      {
        v57 = v56;
        v58 = a5 & 0xFFFFFFFFFFFFFFF0;
        v59 = *v56;
        if (!v59)
        {
          v59 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v57[1]);
          *v57 = v59;
        }
        v59[*v59 + 1] = 9;
        v60 = *v57;
        v61 = **v57;
        v62 = v61 + 1;
        *v60 = v61 + 1;
        *(_QWORD *)&v60[8 * v61 + 16] = v58;
        v63 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*a2 + 8) + 2000) + 52) >> 23) & 1;
        v60[v62 + 1] = 3;
        v64 = *v57;
        v65 = **v57;
        *v64 = v65 + 1;
        *(_QWORD *)&v64[8 * v65 + 16] = v63;
      }
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 72) = 0;
      goto LABEL_125;
    }
    v52 = *(_DWORD *)(v49 + 16) & 0xFF80000;
    v53 = v52 == 87556096 || v52 == 88080384;
    a5 = a3;
    if (!v53)
      goto LABEL_80;
  }
  *(_DWORD *)a1 = 1;
  *(_BYTE *)(a1 + 72) = 1;
LABEL_125:
  if (v96 != (char *)v98)
    free(v96);
}

unsigned __int8 *sub_22F0312C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned __int8 *result;
  unsigned __int8 **v7;
  _BYTE *v8;
  uint64_t v9;

  sub_22F0D5A50(a2);
  result = (unsigned __int8 *)sub_22F072828(a1, v5, 2190, 0, 0);
  if (result)
  {
    v7 = (unsigned __int8 **)result;
    result = *(unsigned __int8 **)result;
    if (!result)
    {
      result = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v7[1]);
      *v7 = result;
    }
    result[*result + 1] = 9;
    v8 = *v7;
    v9 = **v7;
    *v8 = v9 + 1;
    *(_QWORD *)&v8[8 * v9 + 16] = a3;
  }
  return result;
}

BOOL sub_22F03134C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(unsigned int *)(a1 + 16);
  if (v4 < 2)
  {
    v6 = *(_QWORD *)((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
    v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
    if ((v6 & 4) != 0)
      v7 = (_QWORD *)*v7;
    if (v7)
      v5 = v7 - 8;
    else
      v5 = 0;
  }
  else
  {
    v5 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * v4 - 16);
  }
  v8 = (*(uint64_t (**)(_QWORD *))(*v5 + 32))(v5);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  if (v8 == v9)
    --*(_DWORD *)(a1 + 16);
  return v8 == v9;
}

uint64_t sub_22F0313F0(uint64_t a1, uint64_t a2, unint64_t *a3, unsigned int *a4, uint64_t *a5)
{
  unsigned int v5;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  _BYTE *v19;
  llvm::APFloatBase *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  _BOOL4 v40;
  uint64_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned __int8 *v52;
  _BYTE *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned __int8 *v57;
  _BYTE *v58;
  uint64_t v59;
  _BOOL8 v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  const llvm::detail::IEEEFloat *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  unsigned __int8 **v85;
  unsigned __int8 **v86;
  uint64_t v87;
  unsigned __int8 *v88;
  _BYTE *v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  int v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unsigned __int8 *v100;
  _BYTE *v101;
  uint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  _BYTE *v105;
  uint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  int v109;
  unsigned __int8 **v110;
  unsigned __int8 **v111;
  uint64_t v112;
  unsigned __int8 *v113;
  _BYTE *v114;
  uint64_t v115;
  _BYTE *v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  unsigned __int8 *v122;
  _BYTE *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  int v128;
  _BYTE v130[56];
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD v134[4];

  v134[2] = *MEMORY[0x24BDAC8D0];
  v5 = *a4;
  if ((*a4 & 1) != 0)
    return 0;
  if ((v5 & 2) == 0)
  {
    v10 = a4[8];
    if ((v5 & 8) == 0 || ((v10 == 1) & (v5 >> 2)) != 0)
    {
      if (((v10 == 1) & (v5 >> 2)) == 0)
        goto LABEL_6;
    }
    else if (*(_QWORD *)(*((_QWORD *)a4 + 3) + 8 * (int)((v5 >> 4) - 1)) != *((_QWORD *)a4 + 1))
    {
LABEL_6:
      v11 = 0;
      v127 = 0;
      v12 = 0;
      v128 = -v10;
      v13 = a3[2];
      v14 = a3[3];
      while (1)
      {
        v15 = v128 + v11;
        if (*(_DWORD *)v13 == 1)
        {
          v17 = *((_DWORD *)a5 + 6);
          if ((v17 - 5) >= 5 && ((1 << v17) & 6) == 0)
            goto LABEL_115;
        }
        else if (!*(_DWORD *)v13)
        {
          v16 = *((_DWORD *)a5 + 6) == 8 && v15 == 0;
          if (!v16)
          {
LABEL_115:
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 1) != 0)
              return 0;
            result = sub_22F072CEC(a1, a2, 2174, 0);
            if (result)
            {
              v55 = (_QWORD *)result;
              v56 = *((int *)a5 + 6);
              v57 = *(unsigned __int8 **)result;
              if (!*(_QWORD *)result)
              {
                v57 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(result + 8));
                *v55 = v57;
              }
              result = 0;
              v57[*v57 + 1] = 2;
              v58 = (_BYTE *)*v55;
              v59 = *(unsigned __int8 *)*v55;
              *(_QWORD *)(*v55 + 8 * v59 + 16) = v56;
              LOBYTE(v59) = v59 + 1;
              *v58 = v59;
              v60 = *(_DWORD *)v13 == 1;
              v58[v59 + 1] = 2;
              v61 = (_BYTE *)*v55;
              v62 = *(unsigned __int8 *)*v55;
              *v61 = v62 + 1;
              *(_QWORD *)&v61[8 * v62 + 16] = v60;
            }
            return result;
          }
        }
        if (((v14 & 1) != 0 || *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 5 | v14 & 4)
          && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) == 45)
        {
          v18 = *((_QWORD *)a4 + 3);
          *(_OWORD *)v130 = *(_OWORD *)a3;
          *(_QWORD *)&v130[16] = v18;
          *(_QWORD *)&v130[24] = v11;
          v132 = 0;
          if ((sub_22F02BC74(*(_QWORD *)(a1 + 768), *(_DWORD *)(a1 + 784), (uint64_t *)v130, &v132) & 1) != 0)
          {
            if (*(_DWORD *)(v132 + 32))
              v14 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFFALL | v14 & 2;
          }
        }
        if (!v15
          || (v19 = (_BYTE *)(v14 & 0xFFFFFFFFFFFFFFF0), v15 == -1)
          && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12)
        {
          if ((v14 & 4) != 0
            || (v19 = (_BYTE *)(v14 & 0xFFFFFFFFFFFFFFF0), (*(_BYTE *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0))
          {
            if (*((_DWORD *)a5 + 6) < 5u)
            {
              if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) + 2000) + 1) & 1) == 0)
                goto LABEL_101;
              v74 = v127;
              if (v127)
              {
                v75 = *(_DWORD *)(v127 + 24);
                v76 = 2;
              }
              else
              {
                v94 = *a3 & 0xFFFFFFFFFFFFFFFCLL;
                if ((*a3 & 3) != 0 || !v94)
                {
                  v74 = 0;
                  v75 = 0;
                  v76 = 0;
                  if ((*a3 & 3) == 1 && v94)
                  {
                    sub_22EFF605C(v94);
                    v75 = v109;
                    v74 = 0;
                    v76 = 0;
                  }
                }
                else
                {
                  v75 = *(_DWORD *)(v94 + 24);
                  v76 = 1;
                  v74 = *a3 & 0xFFFFFFFFFFFFFFFCLL;
                }
              }
              v110 = (unsigned __int8 **)sub_22F072CEC(a1, a2, 2177, 1);
              if (v110)
              {
                v111 = v110;
                v112 = *((int *)a5 + 6);
                v113 = *v110;
                if (!v113)
                {
                  v113 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v111[1]);
                  *v111 = v113;
                }
                v113[*v113 + 1] = 2;
                v114 = *v111;
                v115 = **v111;
                *v114 = v115 + 1;
                *(_QWORD *)&v114[8 * v115 + 16] = v112;
                v114[(v115 + 1) + 1] = 2;
                v116 = *v111;
                v117 = **v111;
                *v116 = v117 + 1;
                *(_QWORD *)&v116[8 * v117 + 16] = v76;
                v116[(v117 + 1) + 1] = 11;
                v118 = *v111;
                v119 = **v111;
                *v118 = v119 + 1;
                *(_QWORD *)&v118[8 * v119 + 16] = v74;
              }
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
              if ((_DWORD)result)
              {
                v120 = sub_22F072E10(a1, v75, 2290);
                v121 = (_QWORD *)v120;
                v122 = *(unsigned __int8 **)v120;
                if (!*(_QWORD *)v120)
                {
                  v122 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(v120 + 8));
                  *v121 = v122;
                }
                result = 0;
                v122[*v122 + 1] = 2;
                v123 = (_BYTE *)*v121;
                v124 = *(unsigned __int8 *)*v121;
                *v123 = v124 + 1;
                *(_QWORD *)&v123[8 * v124 + 16] = v76;
              }
              return result;
            }
            v19 = (_BYTE *)(v14 & 0xFFFFFFFFFFFFFFF0);
          }
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45
            && !sub_22F01C91C(a3, a1, *((_DWORD *)a5 + 6))
            && (sub_22F01C988(a1, a2, *((unsigned int *)a5 + 6), v14) & 1) != 0)
          {
            return 0;
          }
          if (!v15)
          {
            v66 = a5[2];
            if (v66 != v13)
            {
              sub_22EF530AC((uint64_t)v130, v13);
              if (*(_DWORD *)v66 >= 2u)
                sub_22EF53BC0((uint64_t *)v66);
              *(_DWORD *)v66 = *(_DWORD *)v130;
              v67 = *(_OWORD *)&v130[8];
              v68 = *(_OWORD *)&v130[24];
              v69 = *(_OWORD *)&v130[40];
              *(_OWORD *)(v66 + 56) = v131;
              *(_OWORD *)(v66 + 40) = v69;
              *(_OWORD *)(v66 + 24) = v68;
              *(_OWORD *)(v66 + 8) = v67;
            }
            if (*((_DWORD *)a5 + 6) == 1)
              return 1;
            v70 = *a5;
            sub_22EFF605C(a5[1]);
            v71 = a5[2];
            *(_QWORD *)v130 = &v130[32];
            *(_QWORD *)&v130[8] = &v130[32];
            *(_QWORD *)&v130[16] = 8;
            *(_DWORD *)&v130[24] = 0;
            v73 = sub_22F0320E0(1, v70, v72, v14, v71, 0, 0, v130);
            if (*(_QWORD *)&v130[8] != *(_QWORD *)v130)
              free(*(void **)&v130[8]);
            if (!v73)
              return 0;
            if (((1 << *((_DWORD *)a5 + 6)) & 0xE3) != 0)
              return 1;
            if (!v12)
              return 1;
            if ((*(_BYTE *)(v12 + 68) & 1) == 0)
              return 1;
            result = sub_22F01CBE4(a1, a2, (int *)v13, v12);
            if ((_DWORD)result)
              return 1;
            return result;
          }
        }
        v20 = *(llvm::APFloatBase **)v19;
        v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v19 + 8) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_DWORD *)(v21 + 16) & 0xFEu) - 2 <= 3)
          break;
        v28 = *(_QWORD *)(*((_QWORD *)a4 + 3) + 8 * v11);
        if (*(_DWORD *)(v21 + 16) == 12)
        {
          if (v28 < 2)
          {
            if (*((_BYTE *)v20 + 16) != 12)
              v20 = (llvm::APFloatBase *)sub_22F10CF48((uint64_t)v20);
            if (*(_DWORD *)v13 == 5)
            {
              if (v28)
                v63 = v13 + 24;
              else
                v63 = v13 + 8;
              v64 = *(_DWORD *)(v63 + 8);
              LODWORD(v133) = v64;
              if (v64 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v132, (const llvm::APInt *)v63);
                v64 = v133;
                v65 = v132;
              }
              else
              {
                v65 = *(_QWORD *)v63;
                v132 = *(_QWORD *)v63;
              }
              v95 = *(_BYTE *)(v63 + 12);
              BYTE4(v133) = v95;
              LODWORD(v133) = 0;
              v96 = a5[2];
              if (*(_DWORD *)v96 >= 2u)
                sub_22EF53BC0((uint64_t *)a5[2]);
              *(_DWORD *)v96 = 2;
              *(_QWORD *)(v96 + 8) = v65;
              *(_DWORD *)(v96 + 16) = v64;
              *(_BYTE *)(v96 + 20) = v95;
              *(_OWORD *)(v96 + 21) = *(_OWORD *)v130;
              *(_OWORD *)(v96 + 37) = *(_OWORD *)&v130[16];
              *(_OWORD *)(v96 + 53) = *(_OWORD *)&v130[32];
              *(_DWORD *)(v96 + 68) = *(_DWORD *)&v130[47];
              if (v133 >= 0x41 && v132)
                MEMORY[0x2348A0E84](v132, 0x1000C8000313F17);
            }
            else
            {
              if (v28)
                v77 = v13 + 40;
              else
                v77 = v13 + 8;
              v79 = *(_QWORD *)(v77 + 8);
              v78 = (const llvm::detail::IEEEFloat *)(v77 + 8);
              v80 = llvm::APFloatBase::PPCDoubleDouble(v20);
              if (v80 == v79)
                MEMORY[0x23489F2A0](&v133, v78);
              else
                llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v133, v78);
              sub_22E7B656C(v130, (uint64_t)&v132);
              v81 = a5[2];
              if (*(_DWORD *)v81 >= 2u)
                sub_22EF53BC0((uint64_t *)v81);
              *(_DWORD *)v81 = *(_DWORD *)v130;
              v82 = *(_OWORD *)&v130[40];
              v83 = v131;
              v84 = *(_OWORD *)&v130[8];
              *(_OWORD *)(v81 + 24) = *(_OWORD *)&v130[24];
              *(_OWORD *)(v81 + 8) = v84;
              *(_OWORD *)(v81 + 56) = v83;
              *(_OWORD *)(v81 + 40) = v82;
              *(_DWORD *)v130 = 0;
              if (v80 == v133)
                sub_22E463170((llvm::APFloatBase *)v134);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v133);
            }
            return 1;
          }
LABEL_129:
          if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) + 2000) + 1) & 2) == 0)
            goto LABEL_101;
          v48 = a1;
          v49 = a2;
          v47 = 2172;
          goto LABEL_111;
        }
        v12 = v28 & 0xFFFFFFFFFFFFFFF8;
        if (v12 && (*(_DWORD *)(v12 + 28) & 0x7Fu) - 49 <= 2)
        {
          if ((*(_BYTE *)(v12 + 68) & 2) != 0)
          {
            if (!sub_22F01C91C(a3, a1, *((_DWORD *)a5 + 6)))
            {
              v85 = (unsigned __int8 **)sub_22F072CEC(a1, a2, 2170, 1);
              if (v85)
              {
                v86 = v85;
                v87 = *((int *)a5 + 6);
                v88 = *v85;
                if (!v88)
                {
                  v88 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v86[1]);
                  *v86 = v88;
                }
                v88[*v88 + 1] = 2;
                v89 = *v86;
                v90 = **v86;
                *v89 = v90 + 1;
                *(_QWORD *)&v89[8 * v90 + 16] = v87;
                v89[(v90 + 1) + 1] = 11;
                v91 = *v86;
                v92 = **v86;
                *v91 = v92 + 1;
                *(_QWORD *)&v91[8 * v92 + 16] = v12;
              }
              v93 = *(_DWORD *)(v12 + 24);
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
              if ((_DWORD)result)
              {
                sub_22F072E10(a1, v93, 100);
                return 0;
              }
              return result;
            }
            v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v19 + 8) & 0xFFFFFFFFFFFFFFF0);
          }
          if ((*(_DWORD *)(sub_22F114198(*(_QWORD *)(v21 + 24)) + 72) & 0xE000) == 0x4000)
          {
            v29 = *(_QWORD *)(v13 + 8);
            if (!v29)
              goto LABEL_58;
            v126 = a2;
            v30 = *(_QWORD *)(v13 + 8);
            if ((*(_BYTE *)(v29 + 29) & 0x80) != 0)
            {
              v31 = *(_QWORD *)(v13 + 8);
              v32 = sub_22EFB5D7C(v29);
              v29 = v31;
              v30 = v32;
            }
            v33 = v12;
            if ((*(_BYTE *)(v12 + 29) & 0x80) != 0)
            {
              v125 = v29;
              v33 = sub_22EFB5D7C(v12);
              v29 = v125;
            }
            v16 = v30 == v33;
            a2 = v126;
            if (!v16)
            {
LABEL_58:
              if (v15 != -1 || *((_DWORD *)a5 + 6) != 8)
              {
                v97 = v29;
                result = sub_22F072CEC(a1, a2, 2169, 0);
                if (result)
                {
                  v98 = (_QWORD *)result;
                  v99 = *((int *)a5 + 6);
                  v100 = *(unsigned __int8 **)result;
                  if (!*(_QWORD *)result)
                  {
                    v100 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(result + 8));
                    *v98 = v100;
                  }
                  result = 0;
                  v100[*v100 + 1] = 2;
                  v101 = (_BYTE *)*v98;
                  v102 = *(unsigned __int8 *)*v98;
                  *v101 = v102 + 1;
                  *(_QWORD *)&v101[8 * v102 + 16] = v99;
                  v101[(v102 + 1) + 1] = 11;
                  v103 = (_BYTE *)*v98;
                  v104 = *(unsigned __int8 *)*v98;
                  *(_QWORD *)(*v98 + 8 * v104 + 16) = v12;
                  LOBYTE(v104) = v104 + 1;
                  *v103 = v104;
                  v103[v104 + 1] = 2;
                  v105 = (_BYTE *)*v98;
                  v106 = *(unsigned __int8 *)*v98;
                  *v105 = v106 + 1;
                  *(_QWORD *)&v105[8 * v106 + 16] = v97 == 0;
                  v105[(v106 + 1) + 1] = 11;
                  v107 = (_BYTE *)*v98;
                  v108 = *(unsigned __int8 *)*v98;
                  *v107 = v108 + 1;
                  *(_QWORD *)&v107[8 * v108 + 16] = v97;
                }
                return result;
              }
              *(_DWORD *)v130 = 0;
              sub_22EF53A5C(v13, v12, (uint64_t)v130);
              if (*(_DWORD *)v130 >= 2u)
                sub_22EF53BC0((uint64_t *)v130);
            }
            v13 = *(_QWORD *)(v13 + 16);
          }
          else
          {
            v13 = *(_QWORD *)(v13 + 8) + 72 * (*(_DWORD *)(v13 + 16) + sub_22EFC306C(v12));
          }
          v41 = *(_QWORD *)(v12 + 48);
          v42 = (v14 & 1) == 0 && (v19[8] & 1) == 0;
          if ((v14 & 4) != 0)
          {
            LODWORD(v44) = !v42;
            if ((*(_DWORD *)(v12 + 68) & 2) != 0)
              v44 = 0;
            else
              v44 = v44;
            v14 = v41 | v44;
          }
          else
          {
            LODWORD(v43) = !v42;
            if ((*(_DWORD *)(v12 + 68) & 2) != 0)
              v43 = 0;
            else
              v43 = v43;
            v14 = v41 | v43;
            if ((*((_QWORD *)v19 + 1) & 4) == 0)
            {
              if ((v41 & 4) != 0)
                goto LABEL_97;
              goto LABEL_96;
            }
          }
          v14 |= 4uLL;
          if ((v41 & 4) != 0)
          {
LABEL_97:
            v127 = v12;
            goto LABEL_98;
          }
LABEL_96:
          if ((*(_QWORD *)((v41 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) == 0)
            goto LABEL_98;
          goto LABEL_97;
        }
        v34 = sub_22F10C2A4((uint64_t)v20);
        if (v34 && (*(_DWORD *)(v34 + 28) & 0x7Fu) - 35 >= 3)
          v34 = 0;
        v35 = *(_QWORD *)(*((_QWORD *)a4 + 3) + 8 * v11) & 0xFFFFFFFFFFFFFFF8;
        if (v35)
        {
          if ((*(_DWORD *)(v35 + 28) & 0x7Fu) - 35 >= 3)
            v36 = 0;
          else
            v36 = *(_QWORD *)(*((_QWORD *)a4 + 3) + 8 * v11) & 0xFFFFFFFFFFFFFFF8;
        }
        else
        {
          v36 = 0;
        }
        v37 = sub_22F01D5B0(v34, v36);
        v38 = *(_QWORD *)(v13 + 8);
        v39 = sub_22EF6477C(*(_QWORD *)(a1 + 8), v36);
        v40 = (v14 & 1) == 0 && (v19[8] & 1) == 0;
        v13 = v38 + 72 * v37;
        if ((v14 & 4) != 0)
        {
          v14 = v39 | !v40;
        }
        else
        {
          v14 = v39 | !v40;
          if ((*((_QWORD *)v19 + 1) & 4) == 0)
          {
            v12 = 0;
            goto LABEL_98;
          }
        }
        v12 = 0;
        v14 |= 4uLL;
LABEL_98:
        ++v11;
      }
      v22 = sub_22EF5C728(*(_QWORD *)(a1 + 8), v14);
      if (*(_BYTE *)(v22 + 16) == 2)
        v23 = v22;
      else
        v23 = 0;
      v24 = *(_QWORD *)(*((_QWORD *)a4 + 3) + 8 * v11);
      v25 = (unint64_t *)(v23 + 40);
      v26 = *(_DWORD *)(v23 + 48);
      if (v26 >= 0x41)
      {
        if (v26 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v23 + 40)) > 0x40)
        {
LABEL_41:
          v14 = *(_QWORD *)(v23 + 32);
          v27 = *(unsigned int *)(v13 + 16);
          if (v24 >= v27)
          {
            if (*((_DWORD *)a5 + 6) < 2u)
            {
              v12 = 0;
              v13 = *(_QWORD *)(v13 + 8) + 72 * v27;
              goto LABEL_98;
            }
            sub_22F01CCF4(v13, v24);
          }
          v12 = 0;
          v13 = *(_QWORD *)(v13 + 8) + 72 * v24;
          goto LABEL_98;
        }
        v25 = (unint64_t *)*v25;
      }
      if (*v25 <= v24)
        goto LABEL_129;
      goto LABEL_41;
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) + 2000) + 1) & 2) == 0)
  {
LABEL_101:
    sub_22F072CEC(a1, a2, 103, 0);
    return 0;
  }
  v46 = *a4;
  if ((*a4 & 2) != 0
    || (v46 & 8) != 0
    && ((a4[8] == 1) & (v46 >> 2)) == 0
    && *(_QWORD *)(*((_QWORD *)a4 + 3) + 8 * (int)((v46 >> 4) - 1)) == *((_QWORD *)a4 + 1))
  {
    v47 = 2172;
  }
  else
  {
    v47 = 2176;
  }
  v48 = a1;
  v49 = a2;
LABEL_111:
  result = sub_22F072CEC(v48, v49, v47, 0);
  if (result)
  {
    v50 = (_QWORD *)result;
    v51 = *((int *)a5 + 6);
    v52 = *(unsigned __int8 **)result;
    if (!*(_QWORD *)result)
    {
      v52 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(result + 8));
      *v50 = v52;
    }
    result = 0;
    v52[*v52 + 1] = 2;
    v53 = (_BYTE *)*v50;
    v54 = *(unsigned __int8 *)*v50;
    *v53 = v54 + 1;
    *(_QWORD *)&v53[8 * v54 + 16] = v51;
  }
  return result;
}

BOOL sub_22F0320E0(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4, _DWORD *a5, uint64_t a6, unsigned int a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v14;
  unsigned int v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 **v28;
  unsigned __int8 **v29;
  unsigned __int8 *v30;
  _BYTE *v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  unsigned __int8 **v53;
  unsigned __int8 **v54;
  unsigned __int8 *v55;
  _BYTE *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v64;
  unsigned int v65;
  _QWORD v66[3];
  int v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  _QWORD v71[13];

  v10 = a3;
  v71[11] = *MEMORY[0x24BDAC8D0];
  if (*a5 < 2u)
  {
LABEL_29:
    v28 = (unsigned __int8 **)sub_22F072828((uint64_t)a2, v10, 2275, 0, 0);
    if (v28)
    {
      v29 = v28;
      v30 = *v28;
      if (!v30)
      {
        v30 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v29[1]);
        *v29 = v30;
      }
      v30[*v30 + 1] = 2;
      v31 = *v29;
      v32 = **v29;
      *v31 = v32 + 1;
      *(_QWORD *)&v31[8 * v32 + 16] = 1;
      v31[(v32 + 1) + 1] = 9;
      v33 = *v29;
      v34 = **v29;
      *v33 = v34 + 1;
      *(_QWORD *)&v33[8 * v34 + 16] = a4;
    }
    v35 = a7;
    if (!a7)
      return v35;
    if ((*(unsigned int (**)(uint64_t *))(*a2 + 64))(a2))
    {
      v59 = (uint64_t)a2;
      v60 = a7;
      v61 = 2271;
LABEL_77:
      sub_22F072E10(v59, v60, v61);
    }
    return 0;
  }
  v14 = (uint64_t)a5;
  v16 = a3;
  while (1)
  {
    v17 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
    if (v17)
      v18 = *(_BYTE *)(v17 + 16) == 6;
    else
      v18 = 0;
    if (v18
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 6
      && (v17 = sub_22F10CF48(v17)) != 0)
    {
      a4 = *(_QWORD *)(v17 + 32);
    }
    v19 = *(_DWORD *)v14;
    if (*(_DWORD *)v14 != 9)
      break;
    v21 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
    if (v21)
      v22 = (*(_DWORD *)(v21 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
    else
      v22 = 0;
    if (!v22)
      v21 = sub_22F10CF48(v21);
    a4 = *(_QWORD *)(v21 + 32);
    v23 = *(unsigned int *)(v14 + 16);
    if ((_DWORD)v23)
    {
      v24 = 0;
      v65 = a7;
      v25 = a7;
      v26 = 72 * v23;
      while ((sub_22F0320E0(a1, a2, v10, a4, *(_QWORD *)(v14 + 8) + v24, a6, v25, a8) & 1) != 0)
      {
        v24 += 72;
        if (v26 == v24)
        {
          v27 = *(unsigned int *)(v14 + 16);
          v16 = a3;
          a7 = v65;
          goto LABEL_25;
        }
      }
      return 0;
    }
    v27 = 0;
LABEL_25:
    if (v27 == *(_DWORD *)(v14 + 20))
      return 1;
    v14 = *(_QWORD *)(v14 + 8) + 72 * v27;
LABEL_27:
    v10 = v16;
    if (*(_DWORD *)v14 <= 1u)
    {
      v10 = v16;
      goto LABEL_29;
    }
  }
  if (v19 == 11)
  {
    v20 = *(_QWORD *)(v14 + 8);
    if (!v20)
      goto LABEL_61;
    a4 = *(_QWORD *)(v20 + 48);
    v14 = *(_QWORD *)(v14 + 16);
    a7 = *(_DWORD *)(v20 + 24);
    goto LABEL_27;
  }
  if (v19 == 10)
  {
    v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v37 || (*(_DWORD *)(v37 + 16) & 0xFF800FF) != 127401995)
    {
      v39 = sub_22F114198(*(_QWORD *)(v37 + 24));
      v64 = v39;
      if (v39)
        v40 = (*(_DWORD *)(v39 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
      else
        v40 = 0;
      if (v40)
      {
        v41 = sub_22E46A3A0(v39);
        if ((unsigned int *)v41 != v42)
        {
          v43 = (unsigned int *)v41;
          v44 = v42;
          v45 = 0;
          do
          {
            v46 = *(_QWORD *)(**((_QWORD **)v43 + 2) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v46 + 8) & 0xF) != 0)
              v46 = (unint64_t)sub_22F10D2BC(**((_QWORD **)v43 + 2));
            if (!sub_22F0320E0(a1, a2, v10, v46 & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v14 + 8) + 72 * v45, a6, *v43, a8))return 0;
            ++v45;
            v43 += 6;
          }
          while (v43 != v44);
        }
      }
      v47 = sub_22EFC3B90(v64);
      if (v47)
      {
        v48 = v47;
LABEL_55:
        if ((*(_BYTE *)(v48 + 68) & 1) == 0 || *(_QWORD *)(v48 + 40))
        {
          v49 = *(_QWORD *)(v48 + 48);
          v50 = sub_22EFC306C(v48);
          if (!sub_22F0320E0(a1, a2, v10, v49, *(_QWORD *)(v14 + 8) + 72 * (*(_DWORD *)(v14 + 16) + v50), a6, *(unsigned int *)(v48 + 24), a8))return 0;
        }
        while (1)
        {
          v48 = *(_QWORD *)(v48 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v48)
            break;
          if ((*(_DWORD *)(v48 + 28) & 0x7Fu) - 49 < 3)
            goto LABEL_55;
        }
      }
    }
  }
LABEL_61:
  v51 = *(_DWORD *)v14;
  if ((_DWORD)a1 || v51 != 7)
  {
    v35 = 1;
    if ((_DWORD)a1 || v51 != 12)
      return v35;
    v52 = *(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v52 && (*(_DWORD *)(v52 + 28) & 0x7Eu) - 54 <= 3)
    {
      if ((*(_QWORD *)(v52 + 80) & 0xC0000000) == 0x80000000)
      {
        v53 = (unsigned __int8 **)sub_22F072828((uint64_t)a2, v10, 2167, 0, 0);
        if (v53)
        {
          v54 = v53;
          v55 = *v53;
          if (!v55)
          {
            v55 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v54[1]);
            *v54 = v55;
          }
          v55[*v55 + 1] = 2;
          v56 = *v54;
          v57 = **v54;
          *v56 = v57 + 1;
          *(_QWORD *)&v56[8 * v57 + 16] = 0;
        }
        v58 = *(_DWORD *)(v52 + 24);
        if ((*(unsigned int (**)(uint64_t *))(*a2 + 64))(a2))
        {
          v59 = (uint64_t)a2;
          v60 = v58;
          v61 = 100;
          goto LABEL_77;
        }
        return 0;
      }
      if ((_DWORD)a6 != 1)
      {
        v62 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v52 + 32))(v52);
        if ((*(_BYTE *)(v62 + 82) & 0xC) == 0 && !sub_22EFD7260(v62))
          return !sub_22E49F808(v52);
      }
    }
    return 1;
  }
  memset(v66, 0, sizeof(v66));
  v67 = -1;
  v68 = 0;
  v69 = v71;
  v70 = 0x800000000;
  v71[8] = 0;
  v71[9] = 0;
  sub_22F01D8E0((uint64_t)v66, a2[1], v14);
  v35 = sub_22F005E24((uint64_t)a2, v10, a4, (uint64_t)v66, a6, a8);
  if (v69 != v71)
    free(v69);
  return v35;
}

_QWORD *sub_22F032668(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *i;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  _QWORD *v10;

  v2 = (_QWORD *)(a1 + 72);
  for (i = *(_QWORD **)(a1 + 72); i; i = (_QWORD *)*i)
  {
    if (i[4] <= a2)
      ++i;
    else
      v2 = i;
  }
  if (v2 == *(_QWORD **)(a1 + 64))
    return 0;
  v4 = (_QWORD *)*v2;
  if (*v2)
  {
    v5 = (_QWORD *)*v2;
    do
    {
      v6 = v5;
      v5 = (_QWORD *)v5[1];
    }
    while (v5);
  }
  else
  {
    v7 = v2;
    do
    {
      v6 = (_QWORD *)v7[2];
      v8 = *v6 == (_QWORD)v7;
      v7 = v6;
    }
    while (v8);
  }
  if (v6[4] != a2)
    return 0;
  if (v4)
  {
    do
    {
      v10 = v4;
      v4 = (_QWORD *)v4[1];
    }
    while (v4);
  }
  else
  {
    do
    {
      v10 = (_QWORD *)v2[2];
      v8 = *v10 == (_QWORD)v2;
      v2 = v10;
    }
    while (v8);
  }
  return v10 + 6;
}

uint64_t sub_22F032714(uint64_t *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  int v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::APFloatBase *v10;
  const llvm::detail::IEEEFloat *v11;
  const llvm::detail::IEEEFloat *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::APFloatBase *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::APFloatBase *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[59];

  v32[40] = *MEMORY[0x24BDAC8D0];
  while (2)
  {
    v3 = a2;
    v4 = *a2;
    if (a2 && (v4 & 0xFE) == 0x70)
    {
      v5 = *(_DWORD *)a2;
      switch((*(_DWORD *)a2 >> 18) & 0x3F)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
          return sub_22F033A54(a1, (uint64_t)a2);
        default:
          goto LABEL_5;
      }
    }
    if (!a2 || v4 != 233)
LABEL_11:
      __asm { BR              X9 }
    v5 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x1F)
    {
      case 0:
      case 1:
        return sub_22F034C4C(a1, (uint64_t)a2);
      case 2:
      case 3:
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
      case 0xD:
        return sub_22F034B9C(a1, (uint64_t)a2);
      case 6:
      case 0xC:
        a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        continue;
      case 0xA:
        a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) != 12)
          continue;
        v24 = 1;
        v23 = 0;
        v25 = 0;
        v27 = 1;
        v26 = 0;
        v28 = 0;
        v13 = llvm::APFloatBase::Bogus((llvm::APFloatBase *)a1);
        sub_22E99C474((llvm::APFloatBase *)&v29, v13);
        sub_22E99C474((llvm::APFloatBase *)&v31, v13);
        v14 = *((_QWORD *)v3 + 2);
        v20 = *a1;
        v21 = &v22;
        v15 = (llvm::APFloatBase *)sub_22F01E534(&v20, v14);
        v10 = v15;
        if (!(_DWORD)v15)
          goto LABEL_23;
        v11 = (const llvm::detail::IEEEFloat *)(a1[1] + 8);
        v12 = (const llvm::detail::IEEEFloat *)&v29;
        goto LABEL_22;
      case 0xB:
        v7 = *((_QWORD *)a2 + 2);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) == 12)
        {
          v24 = 1;
          v23 = 0;
          v25 = 0;
          v27 = 1;
          v26 = 0;
          v28 = 0;
          v8 = llvm::APFloatBase::Bogus((llvm::APFloatBase *)a1);
          sub_22E99C474((llvm::APFloatBase *)&v29, v8);
          sub_22E99C474((llvm::APFloatBase *)&v31, v8);
          v9 = *((_QWORD *)v3 + 2);
          v20 = *a1;
          v21 = &v22;
          v15 = (llvm::APFloatBase *)sub_22F01E534(&v20, v9);
          v10 = v15;
          if ((_DWORD)v15)
          {
            v11 = (const llvm::detail::IEEEFloat *)(a1[1] + 8);
            v12 = (const llvm::detail::IEEEFloat *)&v31;
LABEL_22:
            v15 = sub_22E54C3D4(v11, v12);
          }
LABEL_23:
          v16 = v31;
          v17 = llvm::APFloatBase::PPCDoubleDouble(v15);
          if (v17 == v16)
            sub_22E463170((llvm::APFloatBase *)v32);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v31);
          if (v17 == v29)
            sub_22E463170((llvm::APFloatBase *)&v30);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v29);
          if (v27 >= 0x41 && v26)
            MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
          if (v24 >= 0x41 && v23)
            MEMORY[0x2348A0E84](v23, 0x1000C8000313F17);
        }
        else
        {
          sub_22F024D28(*a1, v7);
          v18 = (llvm::APFloatBase *)sub_22EF5B2E0(*(_QWORD *)(*a1 + 8), *((_QWORD *)v3 + 1));
          v19 = llvm::APFloatBase::PPCDoubleDouble(v18);
          if ((llvm::APFloatBase *)v19 == v18)
            llvm::detail::DoubleAPFloat::DoubleAPFloat();
          else
            llvm::detail::IEEEFloat::IEEEFloat();
          if (v19 == v23)
            llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)&v23);
          else
            llvm::detail::IEEEFloat::makeZero((llvm::detail::IEEEFloat *)&v23);
          sub_22E51FDA0((uint64_t *)(a1[1] + 8), &v23);
          if (v19 == v23)
            sub_22E463170((llvm::APFloatBase *)&v24);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v23);
          return 1;
        }
        return (uint64_t)v10;
      default:
LABEL_5:
        v4 = v5;
        goto LABEL_11;
    }
  }
}

uint64_t sub_22F033A54(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v6;
  llvm::APFloatBase *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[12];

  v25[11] = *MEMORY[0x24BDAC8D0];
  v4 = (*(_DWORD *)a2 >> 18) & 0x3F;
  if ((*(_DWORD *)a2 & 0xF80000) != 0 && v4 - 21 > 0xB)
  {
    v7 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v16, 0.0);
    v8 = llvm::APFloatBase::IEEEdouble(v7);
    MEMORY[0x23489F4E0](&v19, v16, v8);
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v16);
    v9 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)v16 = *(_OWORD *)a1;
    v10 = sub_22F032714(v16, v9);
    if (((v10 & 1) != 0
       || (v11 = *a1,
           v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1),
           **(_BYTE **)(v11 + 16) |= v12,
           (_DWORD)v12))
      && (v13 = *(_QWORD *)(a2 + 24),
          v16[0] = *a1,
          v16[1] = (uint64_t)&v18,
          v12 = sub_22F032714(v16, v13),
          (v10 & v12) == 1))
    {
      v12 = sub_22F034DBC((_QWORD *)*a1, (unsigned int *)a2, (llvm::APFloatBase *)a1[1], (*(_DWORD *)a2 >> 18) & 0x3F, (uint64_t)&v18);
      v6 = v12;
    }
    else
    {
      v6 = 0;
    }
    v14 = v19;
    if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v12) == v14)
      sub_22E463170((llvm::APFloatBase *)&v20);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v19);
  }
  else if (v4 >= 2)
  {
    if (v4 == 32)
    {
      sub_22F024D28(*a1, *(_QWORD *)(a2 + 16));
      return sub_22F032714(a1, *(_QWORD *)(a2 + 24));
    }
    sub_22F072CEC(*a1, a2, 103, 0);
    return 0;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = -1;
    v22 = 0;
    v23 = v25;
    v24 = 0x800000000;
    v25[8] = 0;
    v25[9] = 0;
    if (sub_22F0247C4((_BYTE **)*a1, a2, (uint64_t)&v18, 1u))
    {
      LODWORD(v16[0]) = 0;
      v6 = sub_22F0248D4((uint64_t *)*a1, a2, *(_QWORD *)(a2 + 8), (uint64_t)&v18, (uint64_t)v16, 0);
      if ((_DWORD)v6)
        sub_22E54C3D4((const llvm::detail::IEEEFloat *)(a1[1] + 8), (const llvm::detail::IEEEFloat *)&v17);
      if (LODWORD(v16[0]) >= 2)
        sub_22EF53BC0(v16);
    }
    else
    {
      v6 = 0;
    }
    if (v23 != v25)
      free(v23);
  }
  return v6;
}

unint64_t sub_22F033CE8(llvm::APFloatBase **a1, unsigned int *a2)
{
  int v4;
  llvm::APFloatBase *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  llvm::APFloatBase *v9;
  llvm::APFloatBase *v10;
  llvm::detail::DoubleAPFloat *v11;
  uint64_t v12;
  llvm::APFloatBase *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::APFloatBase *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned __int8 **v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned __int8 **v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  _QWORD *v36;
  _QWORD *v37;
  char v38;
  _QWORD *v39;
  BOOL v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  llvm::APFloatBase *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  llvm::APFloatBase *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL8 v66;
  char v67;
  uint64_t *v68;
  unsigned int v69;
  uint64_t v70;
  unsigned __int8 *v71;
  llvm::APFloatBase *v72;
  int v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  unsigned __int8 **v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95[2];
  uint64_t v96;
  uint64_t v97;
  void **v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  _QWORD v104[11];
  void *v105[2];
  uint64_t v106;
  int v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  _BYTE v111[64];
  uint64_t v112;
  uint64_t v113;
  uint64_t v114[2];
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  _BYTE v120[64];
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EFFA8F0((uint64_t)a2);
  switch(v4)
  {
    case 6:
    case 7:
    case 9:
    case 10:
      v13 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v105, 0.0);
      v14 = llvm::APFloatBase::IEEEdouble(v13);
      MEMORY[0x23489F4E0](&v114[1], v105, v14);
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v105);
      v15 = *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24));
      *(_OWORD *)v105 = *(_OWORD *)a1;
      v16 = (llvm::APFloatBase *)sub_22F032714(v105, v15);
      if ((_DWORD)v16
        && (v17 = *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24)),
            v105[0] = *a1,
            v105[1] = v114,
            v16 = (llvm::APFloatBase *)sub_22F032714(v105, v17),
            (_DWORD)v16))
      {
        v16 = (llvm::APFloatBase *)sub_22F3C4908(a1[1], (uint64_t)v114);
        LOBYTE(v7) = 1;
      }
      else
      {
        LOBYTE(v7) = 0;
      }
      v18 = v114[1];
      if (llvm::APFloatBase::PPCDoubleDouble(v16) == v18)
        sub_22E463170((llvm::APFloatBase *)&v115);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v114[1]);
      return v7 & 1;
    case 8:
    case 14:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
      goto LABEL_24;
    case 11:
    case 12:
    case 13:
    case 15:
      v8 = *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24));
      *(_OWORD *)v114 = *(_OWORD *)a1;
      v9 = (llvm::APFloatBase *)sub_22F032714(v114, v8);
      if (!(_DWORD)v9)
        goto LABEL_15;
      v10 = a1[1];
      v12 = *((_QWORD *)v10 + 1);
      v11 = (llvm::APFloatBase *)((char *)v10 + 8);
      if (llvm::APFloatBase::PPCDoubleDouble(v9) == v12)
      {
        if ((*(_BYTE *)(*((_QWORD *)v10 + 2) + 28) & 8) != 0)
          llvm::detail::DoubleAPFloat::changeSign(v11);
      }
      else if ((*((_BYTE *)v10 + 28) & 8) != 0)
      {
        llvm::detail::IEEEFloat::changeSign(v11);
      }
LABEL_6:
      LOBYTE(v7) = 1;
      return v7 & 1;
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
      v5 = (llvm::APFloatBase *)sub_22EF5B2E0(*((_QWORD *)*a1 + 1), *((_QWORD *)a2 + 1));
      v6 = llvm::APFloatBase::PPCDoubleDouble(v5);
      if ((llvm::APFloatBase *)v6 == v5)
        llvm::detail::DoubleAPFloat::DoubleAPFloat();
      else
        llvm::detail::IEEEFloat::IEEEFloat();
      sub_22E46320C(v114);
      sub_22E51FDA0((uint64_t *)a1[1] + 1, &v114[1]);
      if (v6 == v114[1])
        sub_22E463170((llvm::APFloatBase *)&v115);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v114[1]);
      goto LABEL_6;
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
      if ((sub_22F035238(*((_QWORD *)*a1 + 1), *((_QWORD *)a2 + 1), *(unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2]+ ((unint64_t)*a2 >> 24)), 0, (uint64_t)a1[1]) & 1) == 0)goto LABEL_10;
      goto LABEL_6;
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
      LOBYTE(v7) = 1;
      if ((sub_22F035238(*((_QWORD *)*a1 + 1), *((_QWORD *)a2 + 1), *(unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2]+ ((unint64_t)*a2 >> 24)), 1, (uint64_t)a1[1]) & 1) == 0)
      {
LABEL_10:
        sub_22F072CEC((uint64_t)*a1, (uint64_t)a2, 103, 0);
LABEL_15:
        LOBYTE(v7) = 0;
      }
      return v7 & 1;
    default:
      if (v4 == 1302)
      {
        v20 = *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24));
        *(_OWORD *)v114 = *(_OWORD *)a1;
        LOBYTE(v7) = sub_22F032714(v114, v20);
        return v7 & 1;
      }
LABEL_24:
      LODWORD(v95[0]) = 0;
      v21 = (uint64_t)*a1;
      v22 = *((_DWORD *)*a1 + 54);
      sub_22F0270D4(*((_DWORD **)*a1 + 3));
      v23 = *a2;
      v24 = (unsigned __int8 **)((char *)a2 + (v23 >> 24));
      v25 = *v24;
      if (!*v24)
      {
        v26 = 0;
        goto LABEL_44;
      }
      break;
  }
  do
  {
    v26 = v25;
    v27 = *v25;
    if (v27 > 213)
    {
      if (v27 == 233)
      {
        if ((*(_DWORD *)v26 & 0x7C0000) != 0x300000)
          break;
        v29 = v26 + 16;
      }
      else
      {
        if (v27 != 214)
          break;
        v29 = v26 + 24;
      }
      goto LABEL_39;
    }
    if (v27 == 155)
    {
      if ((**((_DWORD **)v26 + 2) & 0x18000) != 0)
        break;
      if (v26[48])
        v29 = v26 + 24;
      else
        v29 = v26 + 32;
      goto LABEL_39;
    }
    if (v27 != 176)
      break;
    v28 = *((unsigned int *)v26 + 5);
    if ((_DWORD)v28 == -1)
      break;
    v29 = &v26[8 * v28 + 40];
LABEL_39:
    v25 = *(unsigned __int8 **)v29;
  }
  while (v25 != v26);
LABEL_44:
  v30 = *((_QWORD *)v26 + 1);
  v114[0] = 0;
  v114[1] = 0;
  v115 = 0;
  LODWORD(v116) = -1;
  v117 = 0;
  v118 = v120;
  v119 = 0x800000000;
  v31 = &v24[((v23 >> 18) & 1) + 1];
  v122 = 0;
  v121 = 0;
  v32 = a2[4];
  v7 = v30 & 0xFFFFFFFFFFFFFFF0;
  v33 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
  v34 = *(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v34)
    v35 = (*(_DWORD *)(v34 + 16) & 0xFF800FF) == 136839179;
  else
    v35 = 0;
  if (v35)
  {
    v41 = *v26;
    if (v41 == 188)
    {
      if (sub_22F0098FC(*a1, *((_QWORD *)v26 + 2), v114))
      {
        v37 = (_QWORD *)*((_QWORD *)v26 + 3);
        if (v37 && (*((_DWORD *)v37 + 7) & 0x7Eu) - 58 > 0xFFFFFFFB)
        {
          if ((v26[2] & 8) != 0)
          {
            v40 = *((_QWORD *)v26 + 6) != 0;
LABEL_93:
            v94 = v114;
            goto LABEL_94;
          }
LABEL_92:
          v40 = 0;
          goto LABEL_93;
        }
        goto LABEL_69;
      }
    }
    else
    {
      if ((v41 & 0xFE) != 0x70)
      {
        v43 = (uint64_t)*a1;
        if (v41 == 129)
        {
          if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 96))(v43) + 2000) + 1) & 0x10) == 0)
          {
            v45 = (uint64_t)*a1;
            sub_22EFF605C((uint64_t)v26);
            sub_22F072D74(v45, v46, 2266, 0);
          }
          if (sub_22F0098FC(*a1, *((_QWORD *)v26 + 2), v114))
          {
            v47 = 0;
            v48 = *((_QWORD *)v26 + 8);
            if ((v48 & 1) == 0)
            {
              v49 = (uint64_t *)(v48 & 0xFFFFFFFFFFFFFFFELL);
              if (v49)
                v47 = *v49;
            }
            LOBYTE(v7) = sub_22F027138((uint64_t *)*a1, (uint64_t)v26, (uint64_t)v114, v47);
            goto LABEL_83;
          }
          goto LABEL_82;
        }
        goto LABEL_80;
      }
      v42 = sub_22F0247C4((_BYTE **)*a1, (uint64_t)v26, (uint64_t)v114, 0);
      if (v42)
      {
        v37 = (_QWORD *)v42;
        if ((*(_DWORD *)(v42 + 28) & 0x7Eu) - 58 > 0xFFFFFFFB)
          goto LABEL_92;
LABEL_69:
        v43 = (uint64_t)*a1;
LABEL_80:
        v44 = (uint64_t)v26;
        goto LABEL_81;
      }
    }
LABEL_82:
    LOBYTE(v7) = 0;
    goto LABEL_83;
  }
  if (*(_BYTE *)(v33 + 16) != 39 && (*(_DWORD *)(v34 + 16) != 39 || (v33 = sub_22F10CF48(v33)) == 0)
    || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 25 > 1)
  {
    v43 = (uint64_t)*a1;
    v44 = (uint64_t)a2;
LABEL_81:
    sub_22F072CEC(v43, v44, 103, 0);
    goto LABEL_82;
  }
  v105[0] = 0;
  v105[1] = 0;
  v106 = 0;
  v107 |= 1u;
  v108 = 0;
  v109 = v111;
  v110 = 0x800000000;
  v112 = 0;
  v113 = 0;
  v97 = (uint64_t)*a1;
  v98 = v105;
  LOBYTE(v99) = 0;
  v92 = v31;
  if (!sub_22F00C45C(&v97, v26))
  {
LABEL_53:
    v36 = 0;
    v93 = 0;
    v37 = 0;
LABEL_54:
    v38 = 0;
    v94 = 0;
    LOBYTE(v7) = 0;
    goto LABEL_55;
  }
  if (v106
    || ((uint64_t)v105[0] & 3) != 0
    || (v37 = (_QWORD *)((unint64_t)v105[0] & 0xFFFFFFFFFFFFFFFCLL),
        ((unint64_t)v105[0] & 0xFFFFFFFFFFFFFFFCLL) == 0)
    || (*((_DWORD *)v37 + 7) & 0x7Eu) - 52 >= 6)
  {
    sub_22F072CEC((uint64_t)*a1, (uint64_t)v26, 103, 0);
    goto LABEL_53;
  }
  v58 = *((_QWORD *)*a1 + 1);
  v59 = sub_22F10ACF8(*(_QWORD *)v7);
  if (!sub_22EF5F5D4(v58, v59, v37[6]))
  {
    sub_22F072CEC((uint64_t)*a1, (uint64_t)a2, 103, 0);
    v36 = 0;
    v93 = 0;
    goto LABEL_54;
  }
  v60 = *(unsigned __int8 *)a2;
  if (v60 != 141)
  {
    v91 = 0;
    v93 = 0;
LABEL_157:
    if ((*((_DWORD *)v37 + 7) & 0x7Eu) - 58 < 0xFFFFFFFC)
      goto LABEL_230;
    if ((*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v37 + 32))(v37) + 80) & 0xE000) != 0x4000
      && ((v37[5] & 7) != 6 || (*(_DWORD *)(v37[5] & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
    {
      v81 = (uint64_t)*a1;
      if ((_DWORD)v32)
      {
        if (sub_22F0098FC(v81, *v31, v114))
        {
          v82 = (*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)*a1 + 96))(*a1);
          if (v60 == 141
            && (**(_QWORD **)(v82 + 2000) & 0x1000) != 0
            && (*(_QWORD *)a2 & 0x3F00000000) == 0xF00000000
            && (*((_BYTE *)v37 + 82) & 0x80) != 0)
          {
            v94 = v114;
            if (!sub_22F013A2C((uint64_t *)*a1, *v31, (uint64_t)v114))
            {
              v38 = 0;
              goto LABEL_184;
            }
          }
          --v32;
          v92 = v31 + 1;
          v94 = v114;
LABEL_225:
          v38 = 1;
          goto LABEL_226;
        }
      }
      else
      {
        sub_22F072CEC(v81, (uint64_t)a2, 103, 0);
        v32 = 0;
      }
LABEL_183:
      v38 = 0;
      v94 = 0;
LABEL_184:
      LOBYTE(v7) = 0;
      goto LABEL_226;
    }
    if (!sub_22EFD799C((uint64_t)v37))
    {
LABEL_230:
      if (sub_22EFBFDCC((unint64_t)v37, 0, 0))
      {
        if ((v37[5] & 7) == 6 && (*(_DWORD *)(v37[5] & 0xFFFFFFFFFFFFFFF8) | 2) == 3)
        {
          v97 = 0;
          v98 = 0;
          v99 = 0;
          v100 |= 1u;
          v101 = 0;
          v102 = v104;
          v103 = 0x800000000;
          v104[8] = 0;
          v104[9] = 0;
          if (sub_22F027C94((uint64_t)*a1, a2, (uint64_t)&v97))
          {
            sub_22F00676C((uint64_t)&v97, (uint64_t)v95);
            LOBYTE(v7) = sub_22F02D738(v21, 1, v22);
            v22 = -1;
          }
          else
          {
            LOBYTE(v7) = 0;
          }
          if (v102 != v104)
            free(v102);
          v38 = 0;
          v94 = 0;
          goto LABEL_226;
        }
        if (sub_22F02836C((uint64_t)*a1, a2))
        {
          LOBYTE(v7) = sub_22F02D738(v21, 1, v22);
          v38 = 0;
          v94 = 0;
          v22 = -1;
LABEL_226:
          v36 = v91;
          goto LABEL_55;
        }
        goto LABEL_183;
      }
      goto LABEL_224;
    }
    v79 = v37[10] & 0x7F;
    v80 = 0x1FFFFFFFFFFFFFFBLL;
    if (v79 > 0x46)
    {
      switch(v79)
      {
        case 'S':
          goto LABEL_203;
        case 'G':
          v80 = 0x1FFFFFFFFFFFFFF9;
          goto LABEL_203;
        case 'Q':
          goto LABEL_203;
      }
    }
    else
    {
      if (v79 <= 0x18)
      {
        if (v79 == 16)
          goto LABEL_170;
        if (((1 << v79) & 0x1066) != 0)
          goto LABEL_203;
        if (v79 == 24)
        {
LABEL_170:
          v80 = 0x1FFFFFFFFFFFFFFALL;
LABEL_203:
          v83 = v37[v80 + 11];
          v84 = (_QWORD *)(v83 & 0xFFFFFFFFFFFFFFF8);
          if ((v83 & 4) != 0)
            v84 = (_QWORD *)*v84;
          if (v84)
            v7 = (unint64_t)(v84 - 8);
          else
            v7 = 0;
          v85 = sub_22EFD462C(v7);
          if (v85 && (*(_DWORD *)(v85 + 28) & 0x7F) == 0x1D)
            v85 = *(_QWORD *)(v85 + 48);
          v86 = *(_QWORD *)(v7 + 128);
          if (!v86
            || ((*(unsigned __int16 *)(v86 + 8) | (*(unsigned __int8 *)(v86 + 10) << 16)) & 0x100000) == 0
            || (*(_BYTE *)(v86 + 104) & 4) == 0)
          {
            v94 = 0;
            v38 = 1;
            v37 = (_QWORD *)v85;
            goto LABEL_226;
          }
          v87 = *(_QWORD *)((v37[18] & 0xFFFFFFFFFFFFFFF8) + 24);
          v88 = *(_QWORD *)(v85 + 144);
          if ((v88 & 6) != 0)
            v89 = 0;
          else
            v89 = v88 & 0xFFFFFFFFFFFFFFF8;
          v97 = 0;
          v37 = (_QWORD *)sub_22EFE9880(v89, *(_QWORD *)v87, *(unsigned int *)(v87 + 8), (uint64_t)&v97);
LABEL_224:
          v94 = 0;
          goto LABEL_225;
        }
      }
      if (v79 == 70)
      {
LABEL_201:
        v80 = 0x1FFFFFFFFFFFFFF8;
        goto LABEL_203;
      }
    }
    if (v79 - 52 < 6)
    {
      v80 = 0x1FFFFFFFFFFFFFF7;
      goto LABEL_203;
    }
    if (v79 - 33 < 5)
      goto LABEL_201;
    goto LABEL_170;
  }
  v61 = a2[1] & 0x3F;
  if (v61 - 18 < 8)
    goto LABEL_115;
  v91 = 0;
  if (v61 > 0x1D)
  {
    v93 = 0;
    goto LABEL_157;
  }
  v93 = 0;
  if (((1 << v61) & 0x30008000) == 0)
    goto LABEL_157;
LABEL_115:
  v62 = *a1;
  v63 = *((_QWORD *)*a1 + 3);
  v64 = *(unsigned int *)(v63 + 92);
  v65 = (*(_DWORD *)(v63 + 120) + 1);
  *(_DWORD *)(v63 + 120) = v65;
  v66 = (*((_DWORD *)v37 + 7) & 0x7Eu) - 54 < 4;
  v93 = v64 | (v65 << 32);
  if (sub_22F0279B4((uint64_t)&v31[v66], v32 - v66, (uint64_t)v37, v93, (_BYTE **)v62, (uint64_t)v37, 1))
  {
    v91 = v37;
    goto LABEL_157;
  }
  v38 = 0;
  v94 = 0;
  LOBYTE(v7) = 0;
  v36 = v37;
LABEL_55:
  if (v109 != v111)
  {
    v39 = v36;
    free(v109);
    v36 = v39;
  }
  if ((v38 & 1) == 0)
    goto LABEL_83;
  v40 = 0;
  v31 = v92;
  if (v36)
    goto LABEL_95;
LABEL_94:
  v50 = *a1;
  v51 = *((_QWORD *)*a1 + 3);
  v52 = *(unsigned int *)(v51 + 92);
  v53 = (*(_DWORD *)(v51 + 120) + 1);
  *(_DWORD *)(v51 + 120) = v53;
  v93 = v52 | (v53 << 32);
  v54 = sub_22F0279B4((uint64_t)v31, v32, (uint64_t)v37, v93, (_BYTE **)v50, (uint64_t)v37, 0);
  LOBYTE(v7) = 0;
  v36 = v37;
  if (!v54)
    goto LABEL_83;
LABEL_95:
  v90 = (uint64_t)v36;
  v105[0] = &v106;
  v105[1] = (void *)0x400000000;
  if (!v94)
    goto LABEL_122;
  if ((*((_DWORD *)v37 + 7) & 0x7Eu) - 54 >= 4)
    v55 = 0;
  else
    v55 = v37;
  if (!v55)
  {
LABEL_102:
    if ((v55[7] & 0x7F) == 0x39)
      v57 = 9;
    else
      v57 = 5;
    if (sub_22F02E038((uint64_t *)*a1, (uint64_t)a2, (uint64_t)v94, v57, 0))
      goto LABEL_122;
    goto LABEL_153;
  }
  v56 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v55 + 32))(v55);
  if ((*(_BYTE *)(v56 + 82) & 0xC) == 0)
  {
    if (sub_22EFD7260(v56))
      v67 = v40;
    else
      v67 = 1;
    if ((v67 & 1) == 0)
      goto LABEL_121;
    goto LABEL_102;
  }
  if (v40)
    goto LABEL_102;
LABEL_121:
  v37 = (_QWORD *)sub_22F028540((uint64_t)*a1, (uint64_t)a2, (uint64_t)v94, (uint64_t)v55, (uint64_t)v105);
  if (!v37)
    goto LABEL_153;
LABEL_122:
  if (v37 && (*((_DWORD *)v37 + 7) & 0x7F) == 0x39)
  {
    v68 = (uint64_t *)*a1;
    v69 = v37[10] & 0x7F;
    v70 = 0x1FFFFFFFFFFFFFFBLL;
    if (v69 > 0x46)
    {
      if (v69 != 83)
      {
        if (v69 == 71)
        {
          v70 = 0x1FFFFFFFFFFFFFF9;
        }
        else if (v69 != 81)
        {
          goto LABEL_141;
        }
      }
    }
    else
    {
      if (v69 > 0x18)
        goto LABEL_140;
      if (v69 == 16)
        goto LABEL_127;
      if (((1 << v69) & 0x1066) == 0)
      {
        if (v69 == 24)
          goto LABEL_127;
LABEL_140:
        if (v69 == 70)
          goto LABEL_143;
LABEL_141:
        if (v69 - 52 >= 6)
        {
          if (v69 - 33 < 5)
          {
LABEL_143:
            v70 = 0x1FFFFFFFFFFFFFF8;
            goto LABEL_146;
          }
LABEL_127:
          v70 = 0x1FFFFFFFFFFFFFFALL;
          goto LABEL_146;
        }
        v70 = 0x1FFFFFFFFFFFFFF7;
      }
    }
LABEL_146:
    v75 = v37[v70 + 11];
    v76 = (_QWORD *)(v75 & 0xFFFFFFFFFFFFFFF8);
    if ((v75 & 4) != 0)
      v76 = (_QWORD *)*v76;
    if (v76)
      v77 = (uint64_t)(v76 - 8);
    else
      v77 = 0;
    v78 = sub_22EF6477C(*((_QWORD *)*a1 + 1), v77);
    if (sub_22F027138(v68, (uint64_t)a2, (uint64_t)v94, v78))
    {
LABEL_152:
      LOBYTE(v7) = sub_22F02D738(v21, 1, v22);
      v22 = -1;
      goto LABEL_154;
    }
LABEL_153:
    LOBYTE(v7) = 0;
    goto LABEL_154;
  }
  v97 = 0;
  v71 = (unsigned __int8 *)sub_22EFBF910((uint64_t)v37, &v97);
  v72 = *a1;
  sub_22EFF605C((uint64_t)a2);
  if (!sub_22F028A44(v72, v73, v37, v97, (uint64_t)v71))
    goto LABEL_153;
  sub_22EFF605C((uint64_t)a2);
  if (!sub_22F00B12C(v74, v97, (uint64_t)v94, (uint64_t *)v31, v32, v90, v93, v71, (uint64_t *)*a1, (uint64_t)v95, 0))
    goto LABEL_153;
  if (!LODWORD(v105[1])
    || sub_22F028DA0((uint64_t)*a1, (uint64_t)a2, (uint64_t)v95, (_QWORD *)v105[0], LODWORD(v105[1])))
  {
    goto LABEL_152;
  }
  LOBYTE(v7) = 0;
LABEL_154:
  if (v105[0] != &v106)
    free(v105[0]);
LABEL_83:
  if (v118 != v120)
    free(v118);
  if (v22 != -1)
    sub_22F02D738(v21, 0, v22);
  --*(_DWORD *)(*(_QWORD *)(v21 + 24) + 104);
  if ((v7 & 1) != 0)
    sub_22E54C3D4((llvm::APFloatBase *)((char *)a1[1] + 8), (const llvm::detail::IEEEFloat *)&v96);
  if (LODWORD(v95[0]) >= 2)
    sub_22EF53BC0(v95);
  return v7 & 1;
}

uint64_t sub_22F034B9C(uint64_t *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  llvm::detail::DoubleAPFloat *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[2];

  v3 = (*(_DWORD *)a2 >> 18) & 0x1F;
  if (v3 == 6)
  {
    v9 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)v10 = *(_OWORD *)a1;
    return sub_22F032714(v10, v9);
  }
  else if (v3 == 7)
  {
    v4 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)v10 = *(_OWORD *)a1;
    result = sub_22F032714(v10, v4);
    if ((_DWORD)result)
    {
      v6 = a1[1];
      v8 = *(_QWORD *)(v6 + 8);
      v7 = (llvm::detail::DoubleAPFloat *)(v6 + 8);
      if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)result) == v8)
        llvm::detail::DoubleAPFloat::changeSign(v7);
      else
        llvm::detail::IEEEFloat::changeSign(v7);
      return 1;
    }
  }
  else
  {
    sub_22F072CEC(*a1, a2, 103, 0);
    return 0;
  }
  return result;
}

uint64_t sub_22F034C4C(uint64_t *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[7];
  uint64_t v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22[2];
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;

  v31 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 96))(*a1) + 2000) + 1) & 4) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1) & 1) != 0)
  {
    memset(v16, 0, sizeof(v16));
    LODWORD(v17) = -1;
    v19 = 0;
    v20 = v22;
    v21 = 0x800000000;
    v28 = 0;
    v29 = 0;
    v10 = *(_QWORD *)(a2 + 16);
    v14 = *a1;
    LOBYTE(v15[0]) = 0;
    v11 = 0;
    if (sub_22F010358((int)&v14, v10, v4, v5, v6, v7, v8, v9, v13, v14, (uint64_t)v16, v15[0], v15[1], v15[2], (void *)v15[3], v15[4], v15[5], v15[6], 0,
                         0,
                         0,
                         v17,
                         v18,
                         0,
                         (uint64_t)v22,
                         0x800000000,
                         v22[0],
                         v22[1],
                         v23,
                         v24,
                         v25,
                         v26,
                         v27,
                         0,
                         0,
                         v30,
                         v31,
                         v32,
                         v33))
    {
      LODWORD(v14) = 0;
      v11 = sub_22F01BB7C((uint64_t *)*a1, a2, (uint64_t)v16, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), (*(_DWORD *)a2 & 0x740000) == 0, &v14);
      if ((_DWORD)v11)
        sub_22E54C3D4((const llvm::detail::IEEEFloat *)(a1[1] + 8), (const llvm::detail::IEEEFloat *)v15);
      if (v14 >= 2)
        sub_22EF53BC0(&v14);
    }
    if (v20 != v22)
      free(v20);
  }
  else
  {
    sub_22F072CEC(*a1, a2, 103, 0);
    return 0;
  }
  return v11;
}

uint64_t sub_22F034DBC(_QWORD *a1, unsigned int *a2, llvm::APFloatBase *a3, int a4, uint64_t a5)
{
  llvm::APFloatBase *v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  llvm::APFloatBase *v20;
  uint64_t v21;
  int v22;
  unsigned __int8 **v23;
  llvm::APFloatBase *v24;
  unsigned __int8 **v25;
  int v26;
  unsigned __int8 *v27;
  _BYTE *v28;
  uint64_t v29;

  v10 = (llvm::APFloatBase *)sub_22F0013BC(a2, *(_QWORD *)(a1[1] + 2000));
  switch(a4)
  {
    case 2:
      v11 = (llvm::APFloatBase *)sub_22F034FC4(a3);
      goto LABEL_11;
    case 3:
      v12 = *(_QWORD *)(a5 + 8);
      v13 = llvm::APFloatBase::PPCDoubleDouble(v10);
      v14 = *(_QWORD *)(a5 + 16);
      if (v13 != v12)
        v14 = a5;
      if ((*(_BYTE *)(v14 + 28) & 7) == 3)
      {
        sub_22EFF605C((uint64_t)a2);
        sub_22F072D74((uint64_t)a1, v15, 2292, 0);
      }
      v11 = (llvm::APFloatBase *)sub_22F035024(a3);
      goto LABEL_11;
    case 5:
      v11 = (llvm::APFloatBase *)sub_22E51FCBC(a3);
      goto LABEL_11;
    case 6:
      v11 = (llvm::APFloatBase *)sub_22E51FBD8(a3);
LABEL_11:
      v17 = (int)v11;
      v18 = *((_QWORD *)a3 + 1);
      v19 = llvm::APFloatBase::PPCDoubleDouble(v11);
      v20 = (llvm::APFloatBase *)*((_QWORD *)a3 + 2);
      if (v19 != v18)
        v20 = a3;
      if ((*((_BYTE *)v20 + 28) & 7) == 1)
      {
        v21 = v19;
        sub_22EFF605C((uint64_t)a2);
        v23 = (unsigned __int8 **)sub_22F072D74((uint64_t)a1, v22, 2210, 0);
        if (v21 == *((_QWORD *)a3 + 1))
          v24 = (llvm::APFloatBase *)*((_QWORD *)a3 + 2);
        else
          v24 = a3;
        if (v23)
        {
          v25 = v23;
          v26 = *((_BYTE *)v24 + 28) & 7;
          v27 = *v23;
          if (!v27)
          {
            v27 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v25[1]);
            *v25 = v27;
          }
          v27[*v27 + 1] = 2;
          v28 = *v25;
          v29 = **v25;
          *v28 = v29 + 1;
          *(_QWORD *)&v28[8 * v29 + 16] = v26 == 1;
        }
        result = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
      }
      else
      {
        result = sub_22F035084((uint64_t)a1, a2, v17);
      }
      break;
    default:
      sub_22F072CEC((uint64_t)a1, (uint64_t)a2, 103, 0);
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_22F034FC4(llvm::APFloatBase *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v1)
    return llvm::detail::DoubleAPFloat::multiply();
  else
    return llvm::detail::IEEEFloat::multiply();
}

uint64_t sub_22F035024(llvm::APFloatBase *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v1)
    return llvm::detail::DoubleAPFloat::divide();
  else
    return llvm::detail::IEEEFloat::divide();
}

uint64_t sub_22F035084(uint64_t a1, unsigned int *a2, int a3)
{
  uint64_t v3;
  char v7;
  int v8;
  int v9;

  if (*(_BYTE *)(a1 + 834))
    return 1;
  v7 = sub_22F0013BC(a2, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 2000));
  if ((a3 & 0x10) != 0)
  {
    v8 = v7 & 0x1C;
    if (v8 == 28)
    {
      v9 = 2209;
LABEL_17:
      sub_22F072CEC(a1, (uint64_t)a2, v9, 0);
      return 0;
    }
  }
  else
  {
    if (!a3)
      return 1;
    v8 = v7 & 0x1C;
  }
  if ((v7 & 0xE0) != 0 || v8 == 28)
  {
    v9 = 2211;
    goto LABEL_17;
  }
  v3 = 1;
  if ((a3 & 1) != 0 && (v7 & 0x60) != 0)
  {
    v9 = 103;
    goto LABEL_17;
  }
  return v3;
}

void sub_22F035138(_QWORD *a1, uint64_t a2)
{
  llvm::APFloatBase *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  v3 = (llvm::APFloatBase *)sub_22EF5B2E0(*(_QWORD *)(*a1 + 8), a2);
  v4 = llvm::APFloatBase::PPCDoubleDouble(v3);
  if ((llvm::APFloatBase *)v4 == v3)
    llvm::detail::DoubleAPFloat::DoubleAPFloat();
  else
    llvm::detail::IEEEFloat::IEEEFloat();
  if (v4 == v5)
    llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)&v5);
  else
    llvm::detail::IEEEFloat::makeZero((llvm::detail::IEEEFloat *)&v5);
  sub_22E51FDA0((uint64_t *)(a1[1] + 8), &v5);
  if (v4 == v5)
    sub_22E463170((llvm::APFloatBase *)v6);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v5);
}

uint64_t sub_22F035238(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4, uint64_t a5)
{
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::APFloatBase *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x24BDAC8D0];
  v9 = sub_22EFFBBCC(a3);
  if (*v9 != 225)
    return 0;
  v10 = v9;
  v11 = sub_22EF5B2E0(a1, a2);
  v20 = 1;
  v19 = 0;
  v12 = ((*(_DWORD *)v10 >> 21) & 7u) * *((_DWORD *)v10 + 4);
  if (!(_DWORD)v12)
  {
    v20 = 32;
LABEL_7:
    v14 = (llvm::APFloatBase *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 15088) + 384))(*(_QWORD *)(a1 + 15088));
    v15 = (int)v14;
    v16 = llvm::APFloatBase::PPCDoubleDouble(v14);
    if (v15)
    {
      if (a4)
      {
LABEL_9:
        if (v16 == v11)
          llvm::detail::DoubleAPFloat::DoubleAPFloat();
        else
          llvm::detail::IEEEFloat::IEEEFloat();
        v17 = 1;
LABEL_16:
        sub_22F03542C(&v21, v17, (const llvm::APInt *)&v19);
        sub_22E51FDA0((uint64_t *)(a5 + 8), &v22);
        if (v16 == v22)
          sub_22E463170((llvm::APFloatBase *)v23);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v22);
        v13 = 1;
        goto LABEL_19;
      }
    }
    else if (!a4)
    {
      goto LABEL_9;
    }
    if (v16 == v11)
      llvm::detail::DoubleAPFloat::DoubleAPFloat();
    else
      llvm::detail::IEEEFloat::IEEEFloat();
    v17 = 0;
    goto LABEL_16;
  }
  v21 = (uint64_t)&v10[4 * *((unsigned int *)v10 + 1) + 20];
  v22 = v12;
  v13 = 0;
  if ((llvm::StringRef::getAsInteger((llvm::StringRef *)&v21, 0, (llvm::APInt *)&v19) & 1) == 0)
    goto LABEL_7;
LABEL_19:
  if (v20 >= 0x41 && v19)
    MEMORY[0x2348A0E84](v19, 0x1000C8000313F17);
  return v13;
}

uint64_t sub_22F03542C(_QWORD *a1, uint64_t a2, const llvm::APInt *a3)
{
  llvm::detail::DoubleAPFloat *v5;
  uint64_t v6;

  v5 = (llvm::detail::DoubleAPFloat *)(a1 + 1);
  v6 = a1[1];
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v6)
    return llvm::detail::DoubleAPFloat::makeNaN(v5, a2, 0, a3);
  else
    return llvm::detail::IEEEFloat::makeNaN(v5, a2, 0, a3);
}

uint64_t sub_22F035498(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  int v15;
  llvm::APFloatBase *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::APFloatBase *v20;
  void *v21;
  void *v22;
  char v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  llvm::APFloatBase *v28;
  uint64_t *v29;
  uint64_t v30[7];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39[2];
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;

  v48 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a2 + 16);
  v11 = (*(_DWORD *)a2 >> 18) & 0x7F;
  if (v11 > 0x1F)
  {
    if (((*(_DWORD *)a2 >> 18) & 0x7Fu) <= 0x2F)
    {
      switch(v11)
      {
        case ' ':
          LODWORD(v32) = 1;
          v31 = 0;
          BYTE4(v32) = 0;
          v23 = sub_22F0014CC((_DWORD *)a2, *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 2000));
          v24 = sub_22F0174A0(v10, &v31, *a1);
          v12 = 0;
          if (v24)
            v12 = sub_22F035EDC(*a1, a2, v23, (uint64_t)&v31, *(_QWORD *)(a2 + 8), (uint64_t *)a1[1]);
          if (v32 < 0x41)
            return v12;
          v18 = v31;
          if (!v31)
            return v12;
          break;
        case '*':
          if (sub_22F032714(a1, *(_QWORD *)(a2 + 16)))
            return sub_22F036150(*a1, (unsigned int *)a2, *(_QWORD *)(a2 + 8), a1[1]);
          return 0;
        case '"':
          LODWORD(v31) = sub_22EF74318(*(_QWORD *)(*a1 + 8), *(_QWORD *)(v10 + 8));
          sub_22F3C4984((uint64_t)&v28, 0, &v31);
          v12 = sub_22F036024(v10, (uint64_t)&v28, *a1);
          if ((_DWORD)v12)
          {
            sub_22EF5B2E0(*(_QWORD *)(*a1 + 8), *(_QWORD *)(a2 + 8));
            llvm::APFixedPoint::convertToFloat();
            v25 = sub_22E51FDA0((uint64_t *)(a1[1] + 8), &v32);
            v26 = v32;
            if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v25) == v26)
LABEL_65:
              sub_22E463170((llvm::APFloatBase *)&v33);
            else
LABEL_29:
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v32);
          }
LABEL_30:
          if (v29 < 0x41)
            return v12;
          v18 = (uint64_t)v28;
          if (!v28)
            return v12;
          break;
        default:
LABEL_51:
          sub_22F072CEC(*a1, a2, 103, 0);
          return 0;
      }
    }
    else
    {
      if (v11 != 48)
      {
        if (v11 == 66 || v11 == 61)
        {
          LODWORD(v31) = 0;
          v12 = sub_22F009DC4(&v31, *a1, v10);
          if ((_DWORD)v12)
            sub_22E54C3D4((const llvm::detail::IEEEFloat *)(a1[1] + 8), (const llvm::detail::IEEEFloat *)&v33);
LABEL_56:
          if (v31 >= 2)
            sub_22EF53BC0(&v31);
          return v12;
        }
        goto LABEL_51;
      }
      LODWORD(v33) = 1;
      v32 = 0;
      BYTE4(v33) = 0;
      LODWORD(v35) = 1;
      v34 = 0;
      BYTE4(v35) = 0;
      v19 = llvm::APFloatBase::Bogus((llvm::APFloatBase *)a1);
      sub_22E99C474((llvm::APFloatBase *)&v37, v19);
      sub_22E99C474((llvm::APFloatBase *)&v40, v19);
      v28 = (llvm::APFloatBase *)*a1;
      v29 = &v31;
      v20 = (llvm::APFloatBase *)sub_22F01E534(&v28, v10);
      v12 = (uint64_t)v20;
      if ((_DWORD)v20)
        v20 = sub_22E54C3D4((const llvm::detail::IEEEFloat *)(a1[1] + 8), (const llvm::detail::IEEEFloat *)&v37);
      v21 = (void *)v40;
      v22 = (void *)llvm::APFloatBase::PPCDoubleDouble(v20);
      if (v22 == v21)
        sub_22E463170((llvm::APFloatBase *)((char *)&v40 + 8));
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v40);
      if (v22 == v37)
        sub_22E463170((llvm::APFloatBase *)&v38);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v37);
      if (v35 >= 0x41 && v34)
        MEMORY[0x2348A0E84](v34, 0x1000C8000313F17);
      if (v33 < 0x41)
        return v12;
      v18 = v32;
      if (!v32)
        return v12;
    }
    MEMORY[0x2348A0E84](v18, 0x1000C8000313F17);
    return v12;
  }
  switch(v11)
  {
    case 3u:
      LODWORD(v31) = 0;
      LODWORD(v28) = 0;
      v13 = sub_22F009DC4(&v28, *a1, v10);
      v12 = 0;
      if (v13)
      {
        if (sub_22F02F148((uint64_t *)*a1, (uint64_t)&v31, (uint64_t)&v28, a2))
        {
          sub_22E54C3D4((const llvm::detail::IEEEFloat *)(a1[1] + 8), (const llvm::detail::IEEEFloat *)&v33);
          v12 = 1;
        }
        else
        {
          v12 = 0;
        }
      }
      if (v28 >= 2)
        sub_22EF53BC0((uint64_t *)&v28);
      goto LABEL_56;
    case 4u:
      v31 = 0;
      v32 = 0;
      v33 = 0;
      LODWORD(v34) = -1;
      v36 = 0;
      v37 = v39;
      v38 = 0x800000000;
      v45 = 0;
      v46 = 0;
      v28 = (llvm::APFloatBase *)*a1;
      LOBYTE(v30[0]) = 0;
      v15 = sub_22F010358((int)&v28, v10, a3, a4, a5, a6, a7, a8, v27, (uint64_t)v28, (uint64_t)&v31, v30[0], v30[1], v30[2], (void *)v30[3], v30[4], v30[5], v30[6], 0,
              0,
              0,
              v34,
              v35,
              0,
              (uint64_t)v39,
              0x800000000,
              v39[0],
              v39[1],
              v40,
              v41,
              v42,
              v43,
              v44,
              0,
              0,
              v47,
              v48,
              v49,
              v50);
      v12 = 0;
      if (v15)
      {
        LODWORD(v28) = 0;
        v12 = sub_22F0248D4((uint64_t *)*a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8), (uint64_t)&v31, (uint64_t)&v28, 0);
        if ((_DWORD)v12)
          sub_22E54C3D4((const llvm::detail::IEEEFloat *)(a1[1] + 8), (const llvm::detail::IEEEFloat *)v30);
        if (v28 >= 2)
          sub_22EF53BC0((uint64_t *)&v28);
      }
      if (v37 != v39)
        free(v37);
      return v12;
    case 5u:
      goto LABEL_17;
    case 6u:
    case 7u:
    case 8u:
    case 9u:
      goto LABEL_51;
    case 0xAu:
      LODWORD(v29) = 1;
      v28 = 0;
      BYTE4(v29) = 0;
      v12 = sub_22F035A74(*a1, v10, (llvm::APInt *)&v28);
      if (!(_DWORD)v12)
        goto LABEL_30;
      v16 = (llvm::APFloatBase *)sub_22EF5B2E0(*(_QWORD *)(*a1 + 8), *(_QWORD *)(a2 + 8));
      v17 = llvm::APFloatBase::PPCDoubleDouble(v16);
      if ((llvm::APFloatBase *)v17 == v16)
        MEMORY[0x23489F288](&v32, v17, &v28);
      else
        llvm::detail::IEEEFloat::IEEEFloat();
      sub_22E51FDA0((uint64_t *)(a1[1] + 8), &v32);
      if (v17 != v32)
        goto LABEL_29;
      goto LABEL_65;
    default:
      if (v11 != 20)
        goto LABEL_51;
LABEL_17:
      result = sub_22F032714(a1, *(_QWORD *)(a2 + 16));
      break;
  }
  return result;
}

