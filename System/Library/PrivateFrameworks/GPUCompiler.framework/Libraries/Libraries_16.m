uint64_t sub_22EBBF514(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  char v3;
  unint64_t v5;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 136) & 0x40) == 0)
    return 0;
  v3 = sub_22EFBF86C(a2, &v5, 0);
  result = 0;
  if ((v3 & 1) == 0)
  {
    LOBYTE(v5) = 0;
    BYTE4(v5) = 0;
    LODWORD(result) = sub_22EFBFDCC(a2, (uint64_t)&v5, 0);
    if (BYTE4(v5))
      return result;
    else
      return 0;
  }
  return result;
}

unsigned int *sub_22EBBF588(_QWORD *a1, unint64_t a2, int a3)
{
  unsigned int *result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v11;
  int v12;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19[25];
  BOOL v20;
  void *__p;
  char v22;
  uint64_t v23;
  void *v24[2];
  char v25;
  unsigned int v26[25];
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD v30[2];

  result = (unsigned int *)sub_22EBBF514((uint64_t)a1, a2);
  if (!(_DWORD)result)
    return result;
  v7 = *(_QWORD *)(a1[11] + 15088);
  v30[0] = sub_22E91DEE0(*(_QWORD *)(v7 + 224), *(_QWORD *)(v7 + 232));
  v30[1] = v8;
  v9 = *(_DWORD *)(v7 + 68);
  if (v9 > 15)
  {
    if (v9 == 16)
    {
      v11 = 0;
      goto LABEL_13;
    }
    if (v9 == 29)
    {
      v11 = 4;
      goto LABEL_13;
    }
LABEL_11:
    v11 = 11;
    goto LABEL_13;
  }
  if (v9 != 3 && v9 == 7)
    goto LABEL_11;
  v11 = 0x8000000E0000000ALL;
LABEL_13:
  v28 = v11;
  v29 = 0;
  if ((*(_QWORD *)(a2 + 40) & 7) == 6)
    v12 = *(_DWORD *)(*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8);
  else
    v12 = 0;
  v14 = v12 == 2 || v12 == 4;
  v27 = v14;
  sub_22E8FCA40(a1, a3, 0xA36u, 0, (uint64_t)v26);
  v15 = sub_22E894E38((uint64_t)v26, (unsigned __int8 *)&v27);
  v23 = *(_QWORD *)(a2 + 48);
  sub_22F1192C0(&v23, (uint64_t)v24);
  v16 = sub_22F2F3734(v15, v24);
  v17 = sub_22F2F2210(v16, (uint64_t)v30);
  llvm::VersionTuple::getAsString((llvm::VersionTuple *)&v28);
  v18 = sub_22F2F3734(v17, &__p);
  v20 = (v28 & 0x7FFFFFFFFFFFFFFFLL | v29 & 0x7FFFFFFF7FFFFFFFLL) == 0;
  sub_22E894E38(v18, (unsigned __int8 *)&v20);
  if (v22 < 0)
    operator delete(__p);
  if (v25 < 0)
    operator delete(v24[0]);
  sub_22E903BEC(v26);
  sub_22E8FCA40(a1, a3, 0x17BEu, 0, (uint64_t)v19);
  return sub_22E903BEC(v19);
}

uint64_t sub_22EBBF744(_QWORD *a1, int a2, uint64_t a3, int a4, int a5, unint64_t a6, int a7, _BYTE *a8, _BYTE *a9, uint64_t *a10, uint64_t a11, uint64_t *a12, uint64_t *a13)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  char *v59;
  char v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  char v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t i;
  uint64_t v84;
  int v85;
  unsigned int v86;
  unint64_t v88;
  int v89;
  unint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  _QWORD *v95;
  char v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  _BOOL4 v105;
  uint64_t v106;
  void *v107;
  unsigned int v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t *v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t *v129;
  _QWORD *v130;
  unint64_t v134;
  uint64_t v135;
  unsigned int v136[24];
  _BYTE v137[96];
  unint64_t v138;
  _BYTE v139[24];
  _BYTE v140[24];
  _BYTE v141[32];
  _BYTE v142[24];
  __int128 v143;
  _BYTE v144[32];
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  int v151;
  _QWORD v152[3];
  __int16 v153;
  int v154;
  char v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  int v161;
  void *v162;
  uint64_t v163;
  _QWORD v164[10];
  void *v165;
  uint64_t v166;
  _BYTE v167[104];
  void *v168;
  uint64_t v169;
  _BYTE v170[64];
  void *v171;
  uint64_t v172;
  _QWORD v173[4];
  void *v174;
  uint64_t v175;
  _BYTE v176[32];
  uint64_t v177;
  void *v178;
  uint64_t v179;
  _BYTE v180[64];
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  int v186;
  _QWORD v187[3];
  __int16 v188;
  int v189;
  char v190;
  _QWORD *v191;
  uint64_t v192;
  _QWORD v193[10];

  v193[8] = *MEMORY[0x24BDAC8D0];
  v191 = v193;
  v192 = 0x800000000;
  v18 = 1;
  if (*a8)
    v18 = 2;
  if (a11 + v18 + (unint64_t)*a9 >= 9)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  v19 = a1[11];
  *(_DWORD *)&v142[8] = *(unsigned __int8 *)(*(_QWORD *)(v19 + 15088) + *(_QWORD *)(**(_QWORD **)(v19 + 15088) - 24));
  if (*(_DWORD *)&v142[8] > 0x40u)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)v142);
    v20 = a1[11];
  }
  else
  {
    *(_QWORD *)v142 = 0;
    v20 = v19;
  }
  v21 = sub_22EF67C8C(v20);
  sub_22EFF8F1C((uint64_t)v141, v19, (uint64_t)v142, v21, 0);
  if (*(_DWORD *)&v142[8] >= 0x41u && *(_QWORD *)v142)
    MEMORY[0x2348A0E84](*(_QWORD *)v142, 0x1000C8000313F17);
  v22 = v192;
  if (v192 >= HIDWORD(v192))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v22 = v192;
  }
  v191[v22] = v141;
  LODWORD(v192) = v192 + 1;
  if (*a8)
  {
    sub_22F331450((uint64_t)a1);
    v24 = a1[11];
    v25 = a1[421];
    if ((v25 & 1) != 0)
    {
      v25 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v24 + 16048) + 16))(*(_QWORD *)(v24 + 16048), v25 >> 1);
      a1[421] = v25;
    }
    v26 = *(_QWORD *)(v25 + 48);
    if (v26)
      v23 = v26 & 0xFFFFFFFFFFFFFFF0;
    else
      v23 = sub_22EF6462C(v24, v25);
  }
  else
  {
    v23 = *(_QWORD *)(a1[11] + 16392);
  }
  sub_22EBD096C((uint64_t)v140, v23, 0, 0);
  if (*a8)
  {
    v27 = v192;
    if (v192 >= HIDWORD(v192))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v27 = v192;
    }
    v191[v27] = v140;
    LODWORD(v192) = v192 + 1;
  }
  if (*a9)
  {
    sub_22F331450((uint64_t)a1);
    v30 = a1[11];
    v31 = a1[422];
    v29 = a11;
    if ((v31 & 1) != 0)
    {
      v31 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v30 + 16048) + 16))(*(_QWORD *)(v30 + 16048), v31 >> 1);
      a1[422] = v31;
    }
    v32 = *(_QWORD *)(v31 + 48);
    if (v32)
      v28 = v32 & 0xFFFFFFFFFFFFFFF0;
    else
      v28 = sub_22EF6462C(v30, v31);
  }
  else
  {
    v28 = *(_QWORD *)(a1[11] + 16392);
    v29 = a11;
  }
  sub_22EBD096C((uint64_t)v139, v28, 0, 0);
  v33 = v192;
  if (*a9)
  {
    if (v192 >= HIDWORD(v192))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v33 = v192;
    }
    v191[v33] = v139;
    v33 = v192 + 1;
    LODWORD(v192) = v192 + 1;
  }
  sub_22F2ECCD8((uint64_t)&v191, (uint64_t)&v191[v33], a10, &a10[v29]);
  v34 = a1[11];
  v35 = 16;
  if (a7)
    v35 = 48;
  v36 = (v34 + v35 + 15280) | 6;
  v138 = sub_22EF5BA38(v34, a6);
  *(_QWORD *)v142 = 0;
  *(_QWORD *)&v142[8] = &v143;
  *(_QWORD *)&v142[16] = 0x800000000;
  v146 = 0;
  v147 = 0;
  v148 = 0;
  v149 = a1;
  v150 = v36;
  v151 = a2;
  sub_22EFC6D6C((uint64_t)v152, v36);
  v152[2] = 0;
  v152[1] = 0;
  v153 = 0;
  v154 = 257;
  v155 = 0;
  sub_22EC56024((uint64_t)v142);
  v37 = (uint64_t *)(v138 & 0xFFFFFFFFFFFFFFF0);
  if (a4 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v37 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
  {
    v38 = sub_22F10C2A4(*v37);
    if (v38)
    {
      if ((*(_DWORD *)(v38 + 28) & 0x7Fu) - 35 >= 3)
        v39 = 0;
      else
        v39 = v38;
    }
    else
    {
      v39 = 0;
    }
    if (v39)
      v40 = v39 + 64;
    else
      v40 = 0;
    sub_22EC611AC(a1, v142, v40, 0);
  }
  if (*(_DWORD *)v142 == 5)
    goto LABEL_89;
  if (*(_DWORD *)&v142[16])
  {
    v130 = a1 + 9;
  }
  else
  {
    if (a4 == 1)
      goto LABEL_89;
    v44 = *(_QWORD *)(*(_QWORD *)(a1[11] + 1960) + 80);
    v45 = sub_22E3CD31C((uint64_t *)(v44 + 72), v44);
    if (v45)
      v46 = v45 + 40;
    else
      v46 = 0;
    sub_22EC611AC(a1, v142, v46, 0);
    v130 = a1 + 9;
    if ((*(_BYTE *)(a1[9] + 60) & 1) != 0 && !*(_DWORD *)&v142[16])
    {
      if (a11)
      {
        sub_22E8FCA40(a1, a2, 0x114Du, 0, (uint64_t)v137);
        v47 = (unsigned int *)v137;
LABEL_88:
        sub_22E903BEC(v47);
        goto LABEL_89;
      }
      sub_22E8FCA40(a1, a2, 0x36u, 0, (uint64_t)&v177);
      sub_22F2F30F4((uint64_t)&v177, (uint64_t)"default new");
LABEL_87:
      v47 = (unsigned int *)&v177;
      goto LABEL_88;
    }
  }
  BYTE1(v154) = 0;
  sub_22EBC0B84();
  if ((v41 & 1) != 0)
  {
LABEL_89:
    if (BYTE1(v154))
    {
      if (*(_DWORD *)v142 == 5)
      {
        sub_22EC64D18(v149, (uint64_t)v142);
      }
      else if (v147 && (*(_DWORD *)(v149[9] + 52) & 0x400000) != 0)
      {
        sub_22E90B5FC((unint64_t)v149, (uint64_t)v142);
      }
    }
    if (v146)
    {
      v125 = sub_22EC6CBD0(v146);
      MEMORY[0x2348A0E9C](v125, 0x10E0C409F09D3C3);
    }
    if (*(__int128 **)&v142[8] != &v143)
      free(*(void **)&v142[8]);
    v50 = 1;
    goto LABEL_99;
  }
  if (!*a9)
    goto LABEL_71;
  v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v43 = *(_DWORD *)(v42 + 16);
  if (v42 && v43 == 11)
  {
    if (((*(_DWORD *)(v42 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_82;
  }
  else if (v42 && v43 == 44)
  {
    v48 = sub_22F114198(*(_QWORD *)(v42 + 24));
    if ((*(_BYTE *)(v48 + 74) & 1) == 0 && *(_QWORD *)(v48 + 128) < 8uLL)
      goto LABEL_82;
  }
  else if (v43 != 9)
  {
LABEL_82:
    sub_22E8FCA40(a1, a2, 0x139Eu, 0, (uint64_t)v136);
    sub_22E903BEC(v136);
    v51 = a1[422];
    if ((v51 & 1) != 0)
    {
      v51 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1[11] + 16048) + 16))(*(_QWORD *)(a1[11] + 16048), v51 >> 1);
      a1[422] = v51;
    }
    sub_22E8FCA40(a1, *(_DWORD *)(v51 + 24), 0x15C9u, 0, (uint64_t)&v177);
    v52 = a1[422];
    if ((v52 & 1) != 0)
    {
      v52 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1[11] + 16048) + 16))(*(_QWORD *)(a1[11] + 16048), v52 >> 1);
      a1[422] = v52;
    }
    v174 = *(void **)(v52 + 40);
    sub_22E894538((uint64_t)&v177, (uint64_t *)&v174);
    goto LABEL_87;
  }
  if (sub_22EF5CDF0(a1[11], *(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF0)) != 64)
    goto LABEL_82;
LABEL_71:
  if (BYTE1(v154))
  {
    if (*(_DWORD *)v142 == 5)
    {
      sub_22EC64D18(v149, (uint64_t)v142);
    }
    else if (v147 && (*(_DWORD *)(v149[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v149, (uint64_t)v142);
    }
  }
  if (v146)
  {
    v126 = sub_22EC6CBD0(v146);
    MEMORY[0x2348A0E9C](v126, 0x10E0C409F09D3C3);
  }
  v49 = a13;
  if (*(__int128 **)&v142[8] != &v143)
  {
    free(*(void **)&v142[8]);
    v49 = a13;
  }
  if ((*(_QWORD *)(*v130 + 8) & 0x100000000000) == 0)
  {
    v50 = 0;
    *v49 = 0;
    goto LABEL_99;
  }
  v129 = v49;
  if ((*(_QWORD *)(*a12 + 40) & 7) == 6)
  {
    v54 = 2;
    if (*(_DWORD *)(*(_QWORD *)(*a12 + 40) & 0xFFFFFFFFFFFFFFF8) == 3)
      v54 = 4;
  }
  else
  {
    v54 = 2;
  }
  v135 = (a1[11] + 16 * v54 + 15280) | 6;
  v177 = 0;
  v178 = v180;
  v179 = 0x800000000;
  v181 = 0;
  v182 = 0;
  v183 = 0;
  v184 = a1;
  v185 = v135;
  v186 = a2;
  sub_22EFC6D6C((uint64_t)v187, v135);
  v187[2] = 0;
  v187[1] = 0;
  v188 = 0;
  v189 = 257;
  v190 = 0;
  sub_22EC56024((uint64_t)&v177);
  if (a5)
  {
    v55 = *(_QWORD *)(*(_QWORD *)(*v37 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (*(_BYTE *)(v55 + 16) == 45)
    {
      v56 = sub_22F114198(*(_QWORD *)(v55 + 24));
      if (v56)
        v57 = v56 + 64;
      else
        v57 = 0;
      sub_22EC611AC(a1, &v177, v57, 0);
    }
  }
  if ((_DWORD)v177 != 5)
  {
    v58 = v179;
    if (!(_DWORD)v179)
      goto LABEL_201;
    v59 = (char *)v178;
    v60 = 1;
    v61 = (char *)v178;
LABEL_117:
    v62 = v61;
    do
    {
      v63 = *(_QWORD *)v62;
      v62 += 8;
      v64 = v63 & 0xFFFFFFFFFFFFFFFCLL;
      v65 = *(_DWORD *)((v63 & 0xFFFFFFFFFFFFFFFCLL) + 28);
      if ((v65 & 0x7Fu) <= 0x2F && ((1 << (v65 & 0x7F)) & 0xC00000060000) != 0)
      {
        v64 = sub_22EFBAEA4(v64);
        v65 = *(_DWORD *)(v64 + 28);
      }
      if ((v65 & 0x7Eu) - 58 >= 0xFFFFFFFA)
      {
        v67 = sub_22EFC06D0(v64);
        v59 = (char *)v178;
        v58 = v179;
        if ((v67 & 1) != 0)
        {
          v60 = 0;
          v68 = *((_QWORD *)v178 + v179 - 1);
          LODWORD(v179) = v179 - 1;
          v58 = v179;
          *(_QWORD *)v61 = v68;
          if (v61 != &v59[8 * v58])
            goto LABEL_117;
          goto LABEL_130;
        }
      }
      v61 = v62;
    }
    while (v62 != &v59[8 * v58]);
    if ((v60 & 1) != 0)
      goto LABEL_131;
LABEL_130:
    sub_22EA3DA00((uint64_t)&v177);
    v58 = v179;
LABEL_131:
    if (v58)
    {
      v128 = 0;
    }
    else
    {
LABEL_201:
      sub_22F30C4D4((uint64_t)&v177, 0);
      if (a5 == 1)
      {
        v50 = 1;
        goto LABEL_235;
      }
      sub_22F331450((uint64_t)a1);
      v122 = *(_QWORD *)(*(_QWORD *)(a1[11] + 1960) + 80);
      v123 = sub_22E3CD31C((uint64_t *)(v122 + 72), v122);
      if (v123)
        v124 = v123 + 40;
      else
        v124 = 0;
      sub_22EC611AC(a1, &v177, v124, 0);
      v128 = 1;
    }
    BYTE1(v189) = 0;
    v174 = v176;
    v175 = 0x200000000;
    if (!a11
      && ((v69 = *(_QWORD *)(*(_QWORD *)(*a12 + 48) & 0xFFFFFFFFFFFFFFF0)) != 0
        ? (v70 = *(_BYTE *)(v69 + 16) == 26)
        : (v70 = 0),
          (v70
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v69 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
        && (v69 = sub_22F10CF48(v69)) != 0)
       && (*(_QWORD *)(v69 + 16) & 0x3FFFC000000000) == 0x4000000000
       && !sub_22EFBF68C(*a12)))
    {
      *(_QWORD *)v142 = &v142[16];
      *(_QWORD *)&v142[8] = 0x400000000;
      v105 = sub_22EBC16E0((uint64_t)a1, v138);
      sub_22EBC1568(a1, (uint64_t)&v177, v128, v105, (uint64_t)v142, (uint64_t)&v171);
      v106 = v172;
      if (v172)
      {
        v107 = v171;
        v108 = v175;
        if (v175 >= HIDWORD(v175))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v108 = v175;
        }
        v109 = (char *)v174 + 16 * v108;
        *v109 = v107;
        v109[1] = v106;
        LODWORD(v175) = v175 + 1;
      }
      else if (*(_DWORD *)&v142[8])
      {
        v116 = *(uint64_t **)v142;
        v117 = *(_QWORD *)v142 + 24 * *(unsigned int *)&v142[8];
        v118 = v175;
        do
        {
          v119 = *v116;
          v120 = v116[1];
          if (v118 >= HIDWORD(v175))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v118 = v175;
          }
          v121 = (char *)v174 + 16 * v118;
          *v121 = v119;
          v121[1] = v120;
          v118 = v175 + 1;
          LODWORD(v175) = v175 + 1;
          v116 += 3;
        }
        while (v116 != (uint64_t *)v117);
      }
      if (*(_BYTE **)v142 != &v142[16])
        free(*(void **)v142);
      v96 = 0;
    }
    else
    {
      v71 = *(_QWORD *)(*(_QWORD *)(*a12 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v71)
        v72 = *(_BYTE *)(v71 + 16) == 26;
      else
        v72 = 0;
      if (!v72)
        v71 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(*a12 + 48) & 0xFFFFFFFFFFFFFFF0));
      v171 = v173;
      v73 = a1[11];
      v173[0] = *(_QWORD *)(v73 + 16816);
      v172 = 0x400000001;
      v74 = *(_QWORD *)(v71 + 16);
      if ((v74 & 0x3FFF8000000000) != 0)
      {
        v75 = (unsigned __int16)(v74 >> 38) - 1;
        v76 = (uint64_t *)(v71 + 48);
        v77 = 1;
        do
        {
          v79 = *v76++;
          v78 = v79;
          if (v77 >= HIDWORD(v172))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v77 = v172;
          }
          *((_QWORD *)v171 + v77) = v78;
          v77 = v172 + 1;
          LODWORD(v172) = v172 + 1;
          --v75;
        }
        while (v75);
        v73 = a1[11];
        v80 = (uint64_t *)v171;
      }
      else
      {
        v77 = 1;
        v80 = v173;
      }
      *(_WORD *)v142 = 0;
      *(_OWORD *)&v142[4] = 0uLL;
      v143 = 0u;
      memset(v144, 0, sizeof(v144));
      v145 = 0;
      v142[2] = ((*(_QWORD *)(v71 + 16) & 0x800000000000000) != 0) | v142[2] & 0xFC;
      v81 = sub_22EF63D8C(v73, *(_QWORD *)(v73 + 16392), v80, v77, (__int128 *)v142, 0);
      if (v171 != v173)
        free(v171);
      if ((_DWORD)v179)
      {
        v82 = (uint64_t *)v178;
        for (i = 8 * v179; i; i -= 8)
        {
          v171 = 0;
          v84 = *v82 & 0xFFFFFFFFFFFFFFFCLL;
          v85 = *(_DWORD *)(v84 + 28);
          v86 = v85 & 0x7F;
          if (v86 > 0x2F || ((1 << (v85 & 0x7F)) & 0xC00000060000) == 0)
          {
            v88 = *v82 & 0xFFFFFFFFFFFFFFFCLL;
          }
          else
          {
            v88 = sub_22EFBAEA4(*v82 & 0xFFFFFFFFFFFFFFFCLL);
            v85 = *(_DWORD *)(v88 + 28);
          }
          if ((v85 & 0x7F) == 0x1D)
          {
            *(_QWORD *)v142 = 0;
            *(_DWORD *)&v142[8] = a2;
            v142[12] = 0;
            *(_QWORD *)&v142[16] = 0;
            *(_QWORD *)&v143 = v144;
            *((_QWORD *)&v143 + 1) = 0x400000000;
            v156 = 0;
            v157 = 0;
            v158 = 0;
            v159 = 0;
            v160 = 0;
            v161 = 0;
            v162 = v164;
            v163 = 0x800000000;
            v164[8] = 0;
            v164[9] = 0;
            v165 = v167;
            v166 = 0x400000000;
            v167[96] = 0;
            v168 = v170;
            v169 = 0x400000000;
            v89 = sub_22EDC3E48(a1, v88, 0, v81, &v171, v142, 0);
            if (v168 != v170)
              free(v168);
            if (v165 != v167)
              free(v165);
            if (v162 != v164)
              free(v162);
            sub_22E89277C((char **)&v143);
            if (v89)
              goto LABEL_181;
            v84 = (uint64_t)v171;
          }
          else
          {
            if (v86 <= 0x2F && ((1 << v86) & 0xC00000060000) != 0)
              v84 = sub_22EFBAEA4(v84);
            v171 = (void *)v84;
          }
          v91 = sub_22EDC3D00((uint64_t)a1, *(_QWORD *)(v84 + 48), v81, 1);
          if ((v91 & 7 | *(_QWORD *)((v91 & 0xFFFFFFFFFFFFFFF0) + 8)) == (*(_QWORD *)((v81 & 0xFFFFFFFFFFFFFFF0) + 8) | v81 & 7))
          {
            v92 = *v82;
            v93 = v171;
            v94 = v175;
            if (v175 >= (unint64_t)HIDWORD(v175))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v94 = v175;
            }
            v95 = (char *)v174 + 16 * v94;
            *v95 = v92;
            v95[1] = v93;
            LODWORD(v175) = v175 + 1;
          }
LABEL_181:
          ++v82;
        }
      }
      if ((*(_BYTE *)(*v130 + 68) & 0x20) != 0)
      {
        v96 = 1;
        v110 = sub_22E903070((uint64_t)a1, 1);
        v111 = v110 - 72;
        if (!v110)
          v111 = 0;
        if ((*(_WORD *)(v110 + 8) & 0x7Eu) - 52 >= 6)
          v112 = 0;
        else
          v112 = v111;
        sub_22F31C408((uint64_t)a1, v112, (uint64_t)&v174);
      }
      else
      {
        v96 = 1;
      }
    }
    if (!(_DWORD)v175)
    {
LABEL_232:
      if (v174 != v176)
        free(v174);
      v50 = 0;
      goto LABEL_235;
    }
    if ((_DWORD)v175 != 1)
    {
      sub_22E8FCA40(a1, a2, 0x1835u, 0, (uint64_t)v142);
      v101 = sub_22E894538((uint64_t)v142, &v135);
      sub_22E8901B8(v101, (uint64_t *)&v138);
      sub_22E903BEC((unsigned int *)v142);
      if ((_DWORD)v175)
      {
        v102 = 16 * v175;
        v103 = (uint64_t *)((char *)v174 + 8);
        do
        {
          v104 = *v103;
          v103 += 2;
          sub_22E8FCA40(a1, *(_DWORD *)(v104 + 24), 0x1651u, 0, (uint64_t)v142);
          sub_22E894538((uint64_t)v142, &v135);
          sub_22E903BEC((unsigned int *)v142);
          v102 -= 16;
        }
        while (v102);
      }
      goto LABEL_232;
    }
    v97 = *((_QWORD *)v174 + 1);
    *v129 = v97;
    v98 = v96 ^ 1;
    if ((*(_BYTE *)(*v130 + 1) & 2) == 0)
      v98 = 1;
    if ((v98 & 1) == 0 && sub_22EBC1750(a1, v97))
    {
      sub_22EBC19B0((uint64_t)&v171, (uint64_t)a1, *v129);
      v99 = v128;
      if (!BYTE1(v173[0]))
        v99 = 1;
      if ((v99 & 1) != 0)
      {
        v100 = a11;
        if (!BYTE1(v173[0]))
          goto LABEL_231;
      }
      else
      {
        sub_22EBC1568(a1, (uint64_t)&v177, 0, BYTE2(v173[0]), 0, (uint64_t)v142);
        v100 = a11;
        if (*(_QWORD *)&v142[8] && !v142[17] && v142[18] == BYTE2(v173[0]))
          goto LABEL_231;
      }
      if (v100)
      {
        sub_22F0D5A50(*a10);
        v114 = v113;
        sub_22F0D60E4(a10[v100 - 1]);
      }
      else
      {
        v114 = 0;
        v115 = 0;
      }
      v134 = __PAIR64__(v115, v114);
      sub_22E8FCA40(a1, a2, 0x11A7u, 0, (uint64_t)v142);
      sub_22E8906A0((uint64_t)v142, (uint64_t *)&v134);
      sub_22E903BEC((unsigned int *)v142);
      if ((*(_BYTE *)(*v129 + 29) & 2) == 0)
      {
        sub_22E8FCA40(a1, *(_DWORD *)(*v129 + 24), 0x1771u, 0, (uint64_t)v142);
        sub_22E894538((uint64_t)v142, &v135);
        sub_22E903BEC((unsigned int *)v142);
      }
    }
LABEL_231:
    sub_22E90ABC4((uint64_t)a1, a2, a3, v182, *(_QWORD *)v174, 1);
    goto LABEL_232;
  }
  v50 = 1;
LABEL_235:
  if (BYTE1(v189))
  {
    if ((_DWORD)v177 == 5)
    {
      sub_22EC64D18(v184, (uint64_t)&v177);
    }
    else if (v182 && (*(_DWORD *)(v184[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v184, (uint64_t)&v177);
    }
  }
  if (v181)
  {
    v127 = sub_22EC6CBD0(v181);
    MEMORY[0x2348A0E9C](v127, 0x10E0C409F09D3C3);
  }
  if (v178 != v180)
    free(v178);
LABEL_99:
  if (v191 != v193)
    free(v191);
  return v50;
}

BOOL sub_22EBC0944(_QWORD *a1, int a2, unint64_t a3)
{
  unint64_t i;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  _BOOL4 v16;
  BOOL v17;
  uint64_t v19;
  _BYTE v20[8];
  uint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _BYTE v26[64];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  _QWORD v33[3];
  __int16 v34;
  char v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  for (i = a3; ; i = *(_QWORD *)(v7 + 32))
  {
    v7 = *(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0);
    if (!v7 || (*(_DWORD *)(v7 + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_DWORD *)(v9 + 16) & 0xFEu) - 2 > 3)
      {
        v11 = *(_DWORD *)(v9 + 16);
        goto LABEL_10;
      }
      v10 = *(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0);
      v7 = sub_22F10CF48(v7);
      if (!v7)
        break;
    }
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(unsigned __int8 *)(v9 + 16);
LABEL_10:
  if (v11 != 45)
    return 0;
  v12 = (a1[11] + 15344) | 6;
  v23 = 0;
  v24 = v26;
  v25 = 0x800000000;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = a1;
  v31 = v12;
  v32 = a2;
  sub_22EFC6D6C((uint64_t)v33, v12);
  v33[1] = 0;
  v33[2] = 0;
  v34 = 0;
  v35 = 1;
  v36 = 1;
  sub_22EC56024((uint64_t)&v23);
  v13 = sub_22F114198(*(_QWORD *)(v9 + 24));
  if (v13)
    v14 = v13 + 64;
  else
    v14 = 0;
  sub_22EC611AC(a1, &v23, v14, 0);
  v15 = 0;
  LOBYTE(v36) = 0;
  if ((_DWORD)v25 && (_DWORD)v23 != 5)
  {
    v16 = sub_22EBC16E0((uint64_t)a1, a3);
    sub_22EBC1568(a1, (uint64_t)&v23, 0, v16, 0, (uint64_t)v20);
    v17 = !v21 || v22 == 0;
    v15 = !v17;
    if ((_BYTE)v36)
    {
      if ((_DWORD)v23 == 5)
      {
        sub_22EC64D18(v30, (uint64_t)&v23);
      }
      else if (v28 && (*(_DWORD *)(v30[9] + 52) & 0x400000) != 0)
      {
        sub_22E90B5FC((unint64_t)v30, (uint64_t)&v23);
      }
    }
  }
  if (v27)
  {
    v19 = sub_22EC6CBD0(v27);
    MEMORY[0x2348A0E9C](v19, 0x10E0C409F09D3C3);
  }
  if (v24 != v26)
    free(v24);
  return v15;
}

void sub_22EBC0B84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  _QWORD v21[110];
  _QWORD v22[2];
  _QWORD v23[339];
  int v24;
  _OWORD v25[9];
  _QWORD *v26;
  uint64_t v27;
  _QWORD v28[5];
  __int128 v29;
  uint64_t v30;
  unsigned int v31;
  __int128 v32;
  int v33;
  uint64_t v34;

  v0 = MEMORY[0x24BDAC7A8]();
  v3 = v2;
  v4 = v0;
  v34 = *MEMORY[0x24BDAC8D0];
  v21[1] = v5;
  v6 = *(_DWORD *)(v1 + 128);
  v22[0] = v23;
  v22[1] = 0x1000000000;
  v23[336] = v25;
  v23[337] = v25;
  v23[338] = 16;
  v24 = 0;
  v25[8] = 0u;
  v26 = v28;
  v27 = 0x400000000;
  v28[4] = (char *)&v29 + 8;
  v29 = 0u;
  v30 = 1;
  v31 = v6;
  v33 = 0;
  v32 = 0u;
  v7 = *(unsigned int *)(v1 + 16);
  if ((_DWORD)v7)
  {
    v8 = 8 * v7;
    v9 = v1;
    v10 = *(uint64_t **)(v1 + 8);
    do
    {
      v11 = *v10;
      v12 = *v10 & 0xFFFFFFFFFFFFFFFCLL;
      v13 = *(_DWORD *)(v12 + 28);
      if ((v13 & 0x7Fu) <= 0x2F && ((1 << (v13 & 0x7F)) & 0xC00000060000) != 0)
      {
        v12 = sub_22EFBAEA4(*v10 & 0xFFFFFFFFFFFFFFFCLL);
        v13 = *(_DWORD *)(v12 + 28);
      }
      v15 = v13 & 0x7F;
      v16 = *v3;
      v17 = *((unsigned int *)v3 + 2);
      if (v15 == 29)
      {
        BYTE4(v19) = 0;
        LODWORD(v19) = 0x10000;
        sub_22ED07F48(v4, v12, v11, 0, 0, v16, v17, v22, v19);
      }
      else
      {
        LOBYTE(v20) = 0;
        LODWORD(v19) = 256;
        sub_22ED0475C(v4, v12, v11, 0, v16, v17, v22, 0, v19, 0, 0, v20);
      }
      ++v10;
      v8 -= 8;
    }
    while (v8);
    v6 = *(_DWORD *)(v9 + 128);
  }
  v21[0] = 0;
  v18 = (char *)sub_22EBC0D84 + 4 * byte_22F481F60[sub_22ED03FCC(v22, v4, v6, v21)];
  __asm { BR              X10 }
}

uint64_t sub_22EBC0D84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;

  v3 = *v7;
  v4 = 1;
  if (sub_22E90ABC4(v0, *(_DWORD *)(v1 + 128), v2, *(_QWORD *)(v1 + 96), v7[1], 1) != 1)
  {
    v4 = 0;
    *v6 = v3;
  }
  sub_22E9DC79C(&v8);
  return v4;
}

void sub_22EBC1568(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t *v12;
  uint64_t i;
  int v15;
  int v16;
  int v17;
  __n128 v18;
  uint64_t v19;

  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  v7 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v7)
  {
    v12 = *(uint64_t **)(a2 + 8);
    for (i = 8 * v7; i; i -= 8)
    {
      sub_22EBC19B0((uint64_t)&v18, (uint64_t)a1, *v12);
      if (!v18.n128_u64[1])
        goto LABEL_33;
      if (!sub_22EBC1750(a1, v18.n128_i64[1]) || HIDWORD(v19) == 0)
        goto LABEL_33;
      if (!*(_QWORD *)(a6 + 8))
      {
        *(__n128 *)a6 = v18;
        *(_QWORD *)(a6 + 16) = v19;
        if (!a5)
          goto LABEL_33;
        goto LABEL_23;
      }
      if (*(unsigned __int8 *)(a6 + 16) == v19)
      {
        v15 = *(unsigned __int8 *)(a6 + 18);
        if (v15 != BYTE2(v19))
        {
          if (v15 == a4)
            goto LABEL_33;
          if (!a5)
            goto LABEL_32;
          if (BYTE2(v19) != a4)
            goto LABEL_22;
LABEL_21:
          *(_DWORD *)(a5 + 8) = 0;
          goto LABEL_22;
        }
        v16 = *(unsigned __int8 *)(a6 + 17);
        if (v16 != BYTE1(v19))
        {
          if (v16 == a3)
            goto LABEL_33;
          if (!a5)
          {
LABEL_32:
            *(__n128 *)a6 = v18;
            *(_QWORD *)(a6 + 16) = v19;
            goto LABEL_33;
          }
          if (BYTE1(v19) != a3)
            goto LABEL_22;
          goto LABEL_21;
        }
        v17 = *(_DWORD *)(a6 + 20);
        if (v17 <= SHIDWORD(v19))
        {
          if (!a5)
            goto LABEL_32;
          if (SHIDWORD(v19) > v17)
            goto LABEL_21;
          goto LABEL_22;
        }
      }
      else if (!*(_BYTE *)(a6 + 16))
      {
        if (!a5)
          goto LABEL_32;
        if ((_BYTE)v19)
          goto LABEL_21;
LABEL_22:
        *(__n128 *)a6 = v18;
        *(_QWORD *)(a6 + 16) = v19;
LABEL_23:
        sub_22E467108(a5, &v18);
      }
LABEL_33:
      ++v12;
    }
  }
}

BOOL sub_22EBC16E0(uint64_t a1, unint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 136) & 0x20) == 0)
    return 0;
  v4 = sub_22F3687D0(*(_QWORD *)(a1 + 88), a2, 0);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088) + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 88) + 15088) - 24);
  v6 = *(unsigned __int16 *)(v5 + 44);
  if (!*(_WORD *)(v5 + 44))
  {
    v6 = *(unsigned __int8 *)(v5 + 15);
    v7 = *(unsigned __int8 *)(v5 + 23);
    if (v6 <= v7)
      v6 = v7;
  }
  return v4 > v6;
}

BOOL sub_22EBC1750(_QWORD *a1, uint64_t a2)
{
  int v5;
  unsigned int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;

  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC)
    return sub_22EBBD024((uint64_t)a1, a2);
  if ((*(_QWORD *)(a2 + 40) & 7) != 6)
    return 0;
  v5 = *(_DWORD *)(*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8);
  if (v5 != 4 && v5 != 2)
    return 0;
  if ((*(_BYTE *)(a1[9] + 136) & 0x10) != 0
    && ((v8 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0)) != 0
      ? (v9 = *(_BYTE *)(v8 + 16) == 26)
      : (v9 = 0),
        v9
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
     && (v8 = sub_22F10CF48(v8)) != 0))
  {
    v7 = 1;
    if ((*(_DWORD *)(v8 + 20) & 0x3FFF80) != 0)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8) + 48);
      if (*(_QWORD *)(*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((sub_22EF67C8C(a1[11]) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
        v7 = 2;
      else
        v7 = 1;
    }
  }
  else
  {
    v7 = 1;
  }
  if ((*(_BYTE *)(a1[9] + 136) & 0x20) != 0)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
    v12 = v11 && *(_BYTE *)(v11 + 16) == 26;
    if (v12
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v11 = sub_22F10CF48(v11)) != 0)
    {
      v13 = (unsigned __int16)(*(_QWORD *)(v11 + 16) >> 38);
    }
    else
    {
      v13 = 0;
    }
    if (v7 < v13)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 120) + 8 * v7) + 48);
      v15 = a1[11];
      v16 = a1[421];
      if ((v16 & 1) != 0)
      {
        v21 = a1[11];
        v16 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v15 + 16048) + 16))(*(_QWORD *)(v15 + 16048), v16 >> 1);
        v15 = v21;
        a1[421] = v16;
      }
      v17 = *(_QWORD *)(v16 + 48);
      if (!v17)
        v17 = sub_22EF6462C(v15, v16);
      if (*(_QWORD *)(*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
        ++v7;
    }
  }
  v18 = *(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v18)
    v19 = *(_BYTE *)(v18 + 16) == 26;
  else
    v19 = 0;
  if (v19
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v18 = sub_22F10CF48(v18)) != 0)
  {
    v20 = (unsigned __int16)(*(_QWORD *)(v18 + 16) >> 38);
  }
  else
  {
    v20 = 0;
  }
  return v7 == v20;
}

uint64_t sub_22EBC19B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unsigned int v16;
  unint64_t v17;

  *(_QWORD *)a1 = a3;
  v5 = a3 & 0xFFFFFFFFFFFFFFFCLL;
  v6 = *(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFFCLL) + 28);
  if ((v6 & 0x7Fu) <= 0x2F && ((1 << (v6 & 0x7F)) & 0xC00000060000) != 0)
  {
    v5 = sub_22EFBAEA4(v5);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if ((v6 & 0x7Eu) - 52 >= 6)
    v5 = 0;
  *(_QWORD *)(a1 + 8) = v5;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = 4;
  if (v5)
  {
    v8 = 1;
    if (sub_22EFC06D0(v5))
    {
      *(_BYTE *)(a1 + 16) = 1;
      v8 = 2;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v9)
      v10 = *(_BYTE *)(v9 + 16) == 26;
    else
      v10 = 0;
    if (v10
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v9 = sub_22F10CF48(v9)) != 0)
    {
      v11 = (unsigned __int16)(*(_QWORD *)(v9 + 16) >> 38);
    }
    else
    {
      v11 = 0;
    }
    v12 = *(_QWORD *)(a1 + 8);
    if (v8 < v11)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 120) + 8 * v8) + 48);
      if (*(_QWORD *)(*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((sub_22EF67C8C(*(_QWORD *)(a2 + 88)) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
      {
        ++v8;
        *(_BYTE *)(a1 + 17) = 1;
      }
    }
    v14 = *(_QWORD *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v14)
      v15 = *(_BYTE *)(v14 + 16) == 26;
    else
      v15 = 0;
    if (v15
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
      && (v14 = sub_22F10CF48(v14)) != 0)
    {
      v16 = (unsigned __int16)(*(_QWORD *)(v14 + 16) >> 38);
    }
    else
    {
      v16 = 0;
    }
    if (v8 < v16
      && sub_22F112268(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 120)
                                                                       + 8 * v8)
                                                           + 48) & 0xFFFFFFFFFFFFFFF0)))
    {
      *(_BYTE *)(a1 + 18) = 1;
    }
    if ((*(_BYTE *)(*(_QWORD *)(a2 + 72) + 68) & 0x20) != 0)
    {
      v17 = sub_22E903070(a2, 1);
      if (v17)
      {
        if ((*(_WORD *)(v17 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA)
          *(_DWORD *)(a1 + 20) = sub_22E9FE318(a2, v17 - 72, *(_QWORD *)(a1 + 8));
      }
    }
  }
  return a1;
}

void sub_22EBC1BB8(_QWORD **a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  _QWORD v30[4];

  v30[3] = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v30[0] = a4;
  v29 = 1;
  v8 = v7[9];
  v9 = *(_QWORD *)(v8 + 132);
  v11 = a2 == 2 || a2 == 4;
  if ((a2 & 0xFFFFFFFD) == 1 && (*(_QWORD *)(v8 + 232) & 0x200000000) != 0)
  {
    v12 = v7[11];
    v13 = v7[422];
    if ((v13 & 1) != 0)
    {
      v13 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v12 + 16048) + 16))(*(_QWORD *)(v12 + 16048), v13 >> 1);
      v7[422] = v13;
    }
    v14 = *(_QWORD *)(v13 + 48);
    if (v14)
      v15 = v14 & 0xFFFFFFFFFFFFFFF0;
    else
      v15 = sub_22EF6462C(v12, v13);
    v30[1] = v15;
    v16 = a2;
    sub_22EBC1E80(v7, (v7[11] + 16 * a2 + 15280) | 6, a3, v30, 2);
    v29 = 1;
  }
  else
  {
    v16 = a2;
  }
  v17 = v11 && (v9 & 0x1000000000) != 0;
  v18 = 1;
  do
  {
    if ((v18 & 1) == 0)
    {
      v19 = *a1[1];
      v20 = v29;
      if (v29 >= 3uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v20 = v29;
      }
      v30[v20] = v19;
      ++v29;
    }
    v21 = 1;
    while (1)
    {
      if ((v21 & 1) != 0)
      {
        v22 = v29;
      }
      else
      {
        v23 = v7[11];
        v24 = v7[421];
        if ((v24 & 1) != 0)
        {
          v24 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v23 + 16048) + 16))(*(_QWORD *)(v23 + 16048), v24 >> 1);
          v7[421] = v24;
        }
        v25 = *(_QWORD *)(v24 + 48);
        v26 = v25 ? v25 & 0xFFFFFFFFFFFFFFF0 : sub_22EF6462C(v23, v24);
        v27 = v29;
        if (v29 >= 3uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v27 = v29;
        }
        v30[v27] = v26;
        v22 = ++v29;
      }
      sub_22EBC1E80(v7, (v7[11] + 16 * v16 + 15280) | 6, a3, v30, v22);
      if ((v21 & 1) == 0)
        break;
      v21 = 0;
      if ((v9 & 0x2000000000) == 0)
        goto LABEL_36;
    }
    --v29;
LABEL_36:
    v28 = v17 & v18;
    v18 = 0;
  }
  while ((v28 & 1) != 0);
}

void sub_22EBC1E80(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  void **v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  __int16 v48;
  char v49;
  _QWORD v50[7];
  BOOL v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD v54[2];
  uint64_t v55;
  uint64_t v56;
  void *v57[3];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  int v61;
  uint64_t v62;

  v6 = a4;
  v62 = *MEMORY[0x24BDAC8D0];
  v55 = a3;
  v56 = a2;
  v54[0] = a4;
  v54[1] = a5;
  v9 = *(_QWORD *)(*(_QWORD *)(a1[11] + 1960) + 80);
  v10 = sub_22E3CD31C((uint64_t *)(v9 + 72), v9);
  if (v10)
    v11 = v10 + 40;
  else
    v11 = 0;
  v53 = v11;
  v12 = sub_22EFCE144(v11, a2);
  if (!v12)
  {
LABEL_51:
    LOWORD(v57[0]) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[11] + 15088) + 720))(*(_QWORD *)(a1[11] + 15088));
    BYTE2(v57[0]) = 0;
    *(_OWORD *)((char *)v57 + 4) = 0uLL;
    v58 = 0u;
    v59 = 0u;
    v60 = 0u;
    v61 = 0;
    v52 = 0;
    if ((a2 & 7) == 6)
    {
      v32 = *(_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
      if (v32 == 1)
      {
        v51 = 1;
LABEL_64:
        v33 = a1[9];
        if ((*(_BYTE *)(v33 + 1) & 2) == 0)
        {
          v36 = a1[11];
          v37 = a1[420];
          if ((v37 & 1) != 0)
          {
            v37 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v36 + 16048) + 16))(*(_QWORD *)(v36 + 16048), v37 >> 1);
            a1[420] = v37;
          }
          v38 = *(_QWORD *)(v37 + 48);
          if (v38)
            v39 = v38 & 0xFFFFFFFFFFFFFFF0;
          else
            v39 = sub_22EF6462C(v36, v37);
          v52 = v39;
          LODWORD(v57[2]) = 2;
          *(_QWORD *)&v58 = &v52;
          *((_QWORD *)&v58 + 1) = 1;
          v33 = a1[9];
        }
        if ((*(_QWORD *)(v33 + 140) & 0x8000000000000) != 0)
          LODWORD(v57[2]) = 1;
        goto LABEL_73;
      }
      v51 = v32 == 3;
      if (v32 == 3)
        goto LABEL_64;
    }
    else
    {
      v51 = 0;
    }
    v33 = a1[9];
    if ((*(_QWORD *)v33 & 0x200) != 0)
      v34 = 5;
    else
      v34 = 1;
    LODWORD(v57[2]) = v34;
    v58 = 0uLL;
    v59 = 0uLL;
    *(_QWORD *)&v60 = 0;
LABEL_73:
    v50[0] = a1;
    v50[1] = &v55;
    v50[2] = v54;
    v50[3] = v57;
    v50[4] = &v53;
    v50[5] = &v56;
    v50[6] = &v51;
    if ((*(_BYTE *)(v33 + 68) & 0x20) != 0)
    {
      v41 = a1[11];
      v45 = 0uLL;
      v47 = 0;
      v46 = 0;
      v49 = 120;
      v48 = 0;
      v42 = sub_22F38218C(v41, &v45);
      sub_22EBC230C((uint64_t)v50, v42);
      v43 = a1[11];
      v45 = 0uLL;
      v47 = 0;
      v46 = 0;
      v49 = 120;
      v48 = 0;
      v40 = sub_22F381CB8(v43, &v45);
    }
    else
    {
      v40 = 0;
    }
    sub_22EBC230C((uint64_t)v50, v40);
    return;
  }
  v44 = v6;
  while (1)
  {
    v13 = (unint64_t *)(v12 & 0xFFFFFFFFFFFFFFF8);
    v14 = (v12 & 0xFFFFFFFFFFFFFFF8) == 0 || (v12 & 4) == 0;
    v15 = v12 & 0xFFFFFFFFFFFFFFF8;
    if (!v14)
      v15 = *v13;
    if (!v15 || (*(_DWORD *)(v15 + 28) & 0x7Eu) - 58 < 0xFFFFFFFA)
      goto LABEL_47;
    v16 = *(_QWORD *)(*(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v16)
      v17 = *(_BYTE *)(v16 + 16) == 26;
    else
      v17 = 0;
    if (v17)
    {
LABEL_18:
      v18 = (unsigned __int16)(*(_QWORD *)(v16 + 16) >> 38);
      goto LABEL_19;
    }
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
    {
      v16 = sub_22F10CF48(v16);
      v6 = v44;
      if (v16)
        goto LABEL_18;
      v18 = 0;
    }
    else
    {
      v18 = 0;
      v6 = v44;
    }
LABEL_19:
    if (a5 == v18)
      break;
LABEL_47:
    if (!v14)
    {
      v12 = v13[1];
      if (v12)
        continue;
    }
    goto LABEL_51;
  }
  v57[0] = &v57[2];
  v57[1] = (void *)0x300000000;
  v19 = *(_QWORD *)(v15 + 120);
  v20 = *(_QWORD *)(*(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v20)
    v21 = *(_BYTE *)(v20 + 16) == 26;
  else
    v21 = 0;
  if ((v21
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
     && (v20 = sub_22F10CF48(v20)) != 0)
    && (v22 = *(_QWORD *)(v20 + 16), (v22 & 0x3FFFC000000000) != 0))
  {
    v23 = 8 * (unsigned __int16)(v22 >> 38);
    do
    {
      v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v19 + 48) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v24 + 8) & 0xF) != 0)
        v24 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(*(_QWORD *)v19 + 48));
      v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFF0) + 8);
      v26 = LODWORD(v57[1]);
      if (LODWORD(v57[1]) >= (unint64_t)HIDWORD(v57[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v26 = LODWORD(v57[1]);
      }
      *((_QWORD *)v57[0] + v26) = v25;
      v27 = ++LODWORD(v57[1]);
      v19 += 8;
      v23 -= 8;
    }
    while (v23);
    v6 = v44;
  }
  else
  {
    v27 = (int)v57[1];
  }
  v28 = (void **)v57[0];
  if (a5 != v27)
  {
LABEL_45:
    if (v57[0] != &v57[2])
      free(v57[0]);
    goto LABEL_47;
  }
  if (v27)
  {
    v29 = 8 * a5;
    v30 = v6;
    v31 = v57[0];
    while (*v31 == *v30)
    {
      ++v31;
      ++v30;
      v29 -= 8;
      if (!v29)
        goto LABEL_59;
    }
    goto LABEL_45;
  }
LABEL_59:
  v35 = *(_QWORD *)(v15 + 8);
  if ((v35 & 4) != 0)
    *(_QWORD *)(v15 + 8) = v35 & 0xFFFFFFFFFFFFFFF9 | 2;
  if (v28 != &v57[2])
    free(v28);
}

void sub_22EBC230C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int i;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  __int16 v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)a1;
  v5 = sub_22EF63D8C(*(_QWORD *)(*(_QWORD *)a1 + 88), **(_QWORD **)(a1 + 8), **(uint64_t ***)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), *(__int128 **)(a1 + 24), 0);
  v6 = *(_QWORD *)(v4 + 88);
  v7 = **(_QWORD **)(a1 + 32);
  v8 = (*(_DWORD *)(v4 + 56) & 0xFC) != 4;
  *(_QWORD *)&v38 = **(_QWORD **)(a1 + 40);
  DWORD2(v38) = 0;
  sub_22EFC6D6C((uint64_t)&v39, v38);
  v9 = sub_22EFC4400(v6, v7, 0, (uint64_t *)&v38, v5, 0, 0, v8, 0, 1, 0, 0);
  v10 = v9;
  *(_DWORD *)(v9 + 28) |= 0x200u;
  v11 = *(_QWORD *)(v9 + 8);
  if ((v11 & 4) != 0)
    *(_QWORD *)(v9 + 8) = v11 & 0xFFFFFFFFFFFFFFF9 | 2;
  if (**(_BYTE **)(a1 + 48) && (*(_QWORD *)(*(_QWORD *)(v4 + 72) + 140) & 0x8000000000000) != 0)
  {
    v12 = *(_QWORD *)(v4 + 88);
    v13 = *(_DWORD *)(v10 + 24);
    v38 = 0uLL;
    LODWORD(v39) = v13;
    HIDWORD(v39) = v13;
    v40 = 0;
    v42 = 120;
    v41 = 0;
    v14 = sub_22F39F2D8(v12, &v38);
    sub_22EFCA95C(v10, v14);
  }
  v15 = *(_QWORD *)(v4 + 88);
  v16 = (*(_QWORD *)(*(_QWORD *)(v4 + 72) + 140) >> 49) & 1;
  v38 = 0uLL;
  v40 = 0;
  v39 = 0;
  v42 = 120;
  v41 = 0;
  v17 = sub_22F3A5E00(v15, v16, &v38);
  sub_22EFCA95C(v10, v17);
  *(_QWORD *)&v38 = &v39;
  *((_QWORD *)&v38 + 1) = 0x300000000;
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *(_QWORD *)(v18 + 8);
  if (v19)
  {
    v20 = *(uint64_t **)v18;
    v21 = 8 * v19;
    do
    {
      v22 = sub_22EFBF080(*(_QWORD *)(v4 + 88), v10 + 72, 0, 0, 0, *v20, 0, 0, 0);
      v23 = DWORD2(v38);
      if (DWORD2(v38) >= (unint64_t)HIDWORD(v38))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v23 = DWORD2(v38);
      }
      *(_QWORD *)(v38 + 8 * v23) = v22;
      v19 = (DWORD2(v38) + 1);
      DWORD2(v38) = v19;
      v24 = (uint64_t *)v38;
      v25 = *(_QWORD *)(v38 + 8 * v19 - 8);
      *(_DWORD *)(v25 + 28) |= 0x200u;
      ++v20;
      v21 -= 8;
    }
    while (v21);
  }
  else
  {
    v24 = &v39;
  }
  if (!v10 || (v26 = v10, (*(_DWORD *)(v10 + 28) & 0x7F) != 0x53))
  {
    v27 = *(_QWORD *)(v10 + 16);
    v28 = v27 & 0xFFFFFFFFFFFFFFF8;
    if ((v27 & 4) != 0)
      v28 = *(_QWORD *)v28;
    for (i = *(_WORD *)(v28 + 8) & 0x7F; i != 83; i = *(_WORD *)(v28 + 8) & 0x7F)
    {
      v30 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v30 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_28;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_27;
        if (i == 16)
          goto LABEL_21;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_34;
        if (i == 24)
        {
LABEL_21:
          v30 = -48;
        }
        else
        {
LABEL_27:
          if (i != 70)
          {
LABEL_28:
            v31 = i - 52;
            if ((i - 33) >= 5)
              v32 = -48;
            else
              v32 = -64;
            if (v31 >= 6)
              v30 = v32;
            else
              v30 = -72;
            goto LABEL_34;
          }
          v30 = -64;
        }
      }
LABEL_34:
      v33 = *(_QWORD *)(v28 + v30 + 16);
      v28 = v33 & 0xFFFFFFFFFFFFFFF8;
      if ((v33 & 4) != 0)
        v28 = *(_QWORD *)v28;
    }
    v26 = v28 - 40;
  }
  if (v19)
  {
    v34 = 8 * v19;
    v35 = (void *)sub_22E3CD3D4(*(_QWORD *)(v26 + 88) + 2032, 8 * v19, 3);
    *(_QWORD *)(v10 + 120) = v35;
    memmove(v35, v24, v34);
  }
  if (a2)
    sub_22EFCA95C(v10, a2);
  sub_22EA32F94(v4, v10);
  v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 1960) + 80);
  v37 = sub_22E3CD31C((uint64_t *)(v36 + 72), v36);
  sub_22EFCCFA0(v37 + 40, v10);
  sub_22F30535C(v4 + 3320, v10, **(_QWORD **)(a1 + 40));
  if ((uint64_t *)v38 != &v39)
    free((void *)v38);
}

void sub_22EBC2708(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  char v18;
  _BYTE v19[12];
  void *__p;
  _QWORD v21[3];
  _BYTE v22[11];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v6 = sub_22F141A3C(a2, 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
  v7 = v6;
  v9 = (unsigned __int8 *)(a3 + 56);
  v8 = *(unsigned __int8 *)(a3 + 56);
  v18 = 0;
  v17 = 0;
  *(_QWORD *)&v19[3] = 0;
  v19[11] = 0;
  memset(v21, 0, 17);
  __p = 0;
  if (v8)
  {
    v10 = sub_22F142BC4(a2, 19, *(uint64_t **)(a1 + 112), *(_DWORD **)(a1 + 72), 1);
    if ((_DWORD)v10)
    {
      v17 = v7 | (unint64_t)(v10 << 32);
      v18 = 1;
      __p = 0;
      memset(v21, 0, 17);
      *(_QWORD *)&v19[3] = 0;
      v19[11] = 0;
    }
  }
  else
  {
    *(_QWORD *)&v22[3] = 0;
    v23 = 0;
    v17 = v6 | ((unint64_t)v6 << 32);
    v18 = 0;
    *(_QWORD *)v19 = *(unsigned int *)v22;
    *(_DWORD *)&v19[8] = 0;
    __p = (void *)23899;
    *(_WORD *)((char *)&v21[1] + 7) = 2;
  }
  sub_22E8FCA40((_QWORD *)a1, a2, 0x1A51u, 0, (uint64_t)v22);
  v11 = sub_22E894E38((uint64_t)v22, (unsigned __int8 *)(a3 + 56));
  sub_22E890748(v11, &v17);
  sub_22E903BEC((unsigned int *)v22);
  v12 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v12)
  {
    v13 = *(uint64_t **)(a3 + 8);
    v14 = 8 * v12;
    do
    {
      v15 = *v13++;
      sub_22EFF605C(v15);
      sub_22E8FCA40((_QWORD *)a1, v16, 0x1529u, 0, (uint64_t)v22);
      sub_22E894E38((uint64_t)v22, v9);
      sub_22E903BEC((unsigned int *)v22);
      v14 -= 8;
    }
    while (v14);
  }
  if (SHIBYTE(v21[1]) < 0)
    operator delete(__p);
}

uint64_t sub_22EBC28C4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 56) = a3;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 4) != 0)
    v6 = *(_QWORD *)v6;
  v7 = (*(_WORD *)(v6 + 8) & 0x7E) - 34;
  if (v6)
    v8 = v6 - 64;
  else
    v8 = 0;
  if (v7 >= 4)
    v9 = 0;
  else
    v9 = v8;
  v10 = sub_22F282248(v9);
  if (v10 != v11)
  {
    v12 = v10;
    v13 = v11;
    do
    {
      if ((*(_BYTE *)(v12 + 29) & 2) == 0)
      {
        v27 = v12;
        v14 = v12;
        if (!sub_22E49F868(v12))
        {
          if (!sub_22EFBF86C(v12, &v27, 0))
          {
            *(_BYTE *)(a1 + 58) = 1;
            if (*(_BYTE *)(a1 + 57))
              return 0;
            goto LABEL_27;
          }
          v14 = v27;
        }
        v15 = sub_22EFD7ED0(v14);
        v16 = sub_22EFD7ED0(v14) + 8 * ((*(_QWORD *)(v14 + 80) >> 40) & 0x1FFFFFLL);
        while (v15 != v16)
        {
          v17 = **(_QWORD **)v15 & 0xFFFFFFFFFFFFFFF8;
          if ((**(_QWORD **)v15 & 6) != 2)
            v17 = 0;
          if (*(_QWORD *)a1 == v17)
          {
            v18 = sub_22EBD0B1C(*(unsigned __int8 **)(*(_QWORD *)v15 + 8));
            if (v18)
            {
              v19 = v18;
              if (*(_BYTE *)(a1 + 56) == ((*(_DWORD *)v18 >> 19) & 1))
                return 0;
              v20 = *(unsigned int *)(a1 + 16);
              if (v20 >= *(unsigned int *)(a1 + 20))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v20 = *(unsigned int *)(a1 + 16);
              }
              *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v20) = v19;
              ++*(_DWORD *)(a1 + 16);
            }
          }
          v15 += 8;
        }
      }
      do
LABEL_27:
        v12 = *(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v12 && (*(_DWORD *)(v12 + 28) & 0x7F) != 0x37);
    }
    while (v12 != v13);
  }
  if (*(_BYTE *)(a1 + 58))
    goto LABEL_31;
  if (*(_DWORD *)(a1 + 16))
    return 2;
  result = 0;
  if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
  {
    v22 = *(_QWORD *)(*(_QWORD *)a1 + 72) & 3;
    if ((_DWORD)v22)
      v23 = (_DWORD)v22 == 3;
    else
      v23 = 1;
    if (v23)
      goto LABEL_31;
    v24 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a1 + 72) & 0xFFFFFFFFFFFFFFFCLL);
    if ((*(_BYTE *)(*(_QWORD *)a1 + 68) & 1) != 0)
      v24 = *(unsigned __int8 **)v24;
    if (!v24)
    {
LABEL_31:
      if (*(_BYTE *)(a1 + 57))
        return 0;
      else
        return 3;
    }
    result = (uint64_t)sub_22EBD0B1C(v24);
    if (!result)
      return result;
    v25 = result;
    if (*(_BYTE *)(a1 + 56) == ((*(_DWORD *)result >> 19) & 1))
      return 0;
    if (*(_DWORD *)(a1 + 20))
    {
      v26 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v26 = *(unsigned int *)(a1 + 16);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v26) = v25;
    ++*(_DWORD *)(a1 + 16);
    return 2;
  }
  return result;
}

uint64_t sub_22EBC2B50(uint64_t a1, unsigned int a2, int a3, int a4, uint64_t a5)
{
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  _BOOL4 v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  int v34;
  char v35;
  uint64_t v36;
  void *v37;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _WORD *v59;
  uint64_t v60;
  int v61;
  int v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  _BOOL4 v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int v84;
  _BOOL4 v85;
  unint64_t v86;
  uint64_t v87;
  void *v88;
  char v89;
  uint64_t v90;
  char v91;
  char v92;
  void *__p;
  uint64_t v94;
  uint64_t v95;
  char v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t (**v99)();
  __int16 v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  void *v104;
  void *v105;
  uint64_t v106;
  _QWORD v107[4];
  _BYTE v108[3];
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  v103 = a2;
  v102 = 0;
  v9 = (void *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  if ((*(_BYTE *)((a5 & 0xFFFFFFFFFFFFFFFELL) + 1) & 0x80) != 0)
  {
    v25 = 0;
    v26 = a4;
    goto LABEL_27;
  }
  v10 = a4;
  v11 = sub_22EB1A358(a1, a5 & 0xFFFFFFFFFFFFFFFELL, 0);
  if ((v11 & 1) != 0)
    return 1;
  v101 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v100 = 256;
  v99 = off_24FAB85A0;
  v12 = sub_22ED03140(a1, a2, v11 & 0xFFFFFFFFFFFFFFFELL, &v99);
  if ((v12 & 1) != 0)
    return 1;
  v9 = (void *)(v12 & 0xFFFFFFFFFFFFFFFELL);
  v101 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFELL) + 8);
  if (!sub_22EBC3650(v12, v101))
    return 1;
  v13 = *(_QWORD *)(v101 & 0xFFFFFFFFFFFFFFF0);
  if (!v13 || *(_BYTE *)(v13 + 16) != 39)
    v13 = sub_22F10CF48(v13);
  v14 = *(_QWORD *)(v13 + 32);
  v15 = sub_22EF5BA38(*(_QWORD *)(a1 + 88), v14);
  v16 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v17 & 8) != 0
    && (*(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0
    && (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 60) & 1) == 0)
  {
    sub_22F0D5A50((uint64_t)v9);
    sub_22E8FCA40((_QWORD *)a1, v52, 0xA27u, 0, (uint64_t)&v104);
    v53 = *v16;
    if ((*(_BYTE *)(*v16 + 8) & 0xF) != 0)
      v53 = (unint64_t)sub_22F10D2BC(v14);
    v98 = v53 & 0xFFFFFFFFFFFFFFF0;
    v54 = sub_22E8901B8((uint64_t)&v104, (uint64_t *)&v98);
    v55 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v55 & 8) != 0)
    {
      v57 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFFF0) + 0x18);
      v56 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
    }
    else
    {
      v56 = 0;
      v57 = 0;
    }
    v97 = v56 | v57 | (v55 | v14) & 7;
    sub_22F1191A4(&v97, *(_QWORD *)(a1 + 88), (uint64_t)&v88);
    sub_22F2F3734(v54, &v88);
    if (v92 < 0)
      operator delete(v88);
    goto LABEL_39;
  }
  v18 = *v16;
  v19 = *(_QWORD *)(*(_QWORD *)(*v16 + 8) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_DWORD *)(v19 + 16) & 0xFF800FF;
  if (v19)
    v21 = v20 == 86507531;
  else
    v21 = 0;
  if (v21)
  {
    sub_22EE03478(a1);
    if (!v35)
    {
      sub_22E8FCA40((_QWORD *)a1, v103, 0x145Bu, 0, (uint64_t)&v104);
      v39 = sub_22E8901B8((uint64_t)&v104, &v101);
      sub_22F0D4E74((uint64_t)v9);
      v88 = v40;
      sub_22E8906A0(v39, (uint64_t *)&v88);
      sub_22E903BEC((unsigned int *)&v104);
LABEL_43:
      v23 = 0;
      goto LABEL_44;
    }
LABEL_38:
    sub_22E8FCA40((_QWORD *)a1, v103, 0xC9Fu, 0, (uint64_t)&v104);
    v36 = sub_22E8901B8((uint64_t)&v104, &v101);
    sub_22F0D4E74((uint64_t)v9);
    v88 = v37;
    sub_22E8906A0(v36, (uint64_t *)&v88);
LABEL_39:
    sub_22E903BEC((unsigned int *)&v104);
    return 1;
  }
  v22 = v20 != 86507531 && *(_DWORD *)(v19 + 16) - 25 >= 2;
  if (!v22 || sub_22F111384(*v16))
    goto LABEL_38;
  if ((*(_BYTE *)(v18 + 17) & 4) != 0)
    goto LABEL_43;
  v88 = v9;
  v104 = &unk_24FAB6ED0;
  LODWORD(v105) = 6484;
  v106 = (uint64_t)&v88;
  if ((sub_22EE8B0B0(a1, v103, v14) & 1) != 0)
    goto LABEL_43;
  v23 = 0;
  v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v24 && *(_BYTE *)(v24 + 16) == 45)
    v23 = sub_22F114198(*(_QWORD *)(v24 + 24));
LABEL_44:
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 6 >= 0xFFFFFFFC
    && (a4 & 1) == 0)
  {
    sub_22E8FCA40((_QWORD *)a1, v103, 0x1953u, 0, (uint64_t)&v104);
    v41 = sub_22E8901B8((uint64_t)&v104, &v101);
    sub_22F0D4E74((uint64_t)v9);
    v98 = v42;
    v43 = sub_22E8906A0(v41, (uint64_t *)&v98);
    v44 = sub_22F141A3C(v103, 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
    v90 = 0;
    v91 = 0;
    v94 = 0;
    v95 = 0x200000000000000;
    v88 = (void *)(v44 | ((unint64_t)v44 << 32));
    v89 = 0;
    __p = (void *)23899;
    v96 = 0;
    sub_22E890748(v43, &v88);
    if (SHIBYTE(v95) < 0)
      operator delete(__p);
    sub_22E903BEC((unsigned int *)&v104);
    v10 = 1;
  }
  v86 = v15;
  v45 = 64;
  if (!v10)
    v45 = 32;
  v46 = *(_QWORD *)(a1 + 88) + v45 + 15280;
  v47 = v46 | 6;
  if (!v23)
  {
    v85 = 0;
    goto LABEL_105;
  }
  if ((a3 & 1) != 0)
  {
    if (v10)
    {
      v85 = sub_22EBC0944((_QWORD *)a1, v103, v86);
      goto LABEL_77;
    }
  }
  else
  {
    if (sub_22F3318B8((_QWORD *)a1, v103, v23, v46 | 6, &v102, 1))
      return 1;
    if (v10 && v102 && (*(_DWORD *)(v102 + 28) & 0x7Eu) - 54 <= 3)
    {
      sub_22EBC19B0((uint64_t)&v104, a1, v102);
      v85 = BYTE1(v106) != 0;
      goto LABEL_77;
    }
  }
  v85 = 0;
LABEL_77:
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v23 + 104) + 96), *(_QWORD *)(v23 + 104));
  if ((**(_QWORD **)(v23 + 128) & 0x8000000000000000) == 0)
  {
    v58 = sub_22EC6602C(a1, v23) & 0xFFFFFFFFFFFFFFF8;
    if (v58)
    {
      sub_22EB4E494(a1, v103, v58, 1);
      if ((sub_22EB17F48(a1, v58, &v103, 1, 0, 0, 0, 0) & 1) != 0)
        return 1;
    }
  }
  v59 = (_WORD *)sub_22EFD10F8(v23);
  sub_22EBC36CC(a1, v59, v103, 1, 1, v10 == 0, 0);
  v60 = v102;
  if (v102)
  {
    sub_22EB4E494(a1, v103, v102, 1);
LABEL_82:
    v23 = sub_22EC6602C(a1, v23) & 0xFFFFFFFFFFFFFFF8;
    if (v23)
    {
      sub_22EFF605C((uint64_t)v9);
      v62 = v61;
      v105 = (void *)(*(_QWORD *)(a1 + 88) + 2128);
      LODWORD(v106) = 2582;
      v63 = (_BYTE *)sub_22E3B8AAC((uint64_t)v105);
      v104 = v63;
      v64 = *v63;
      v63[v64 + 1] = 9;
      *v63 = v64 + 1;
      *(_QWORD *)&v63[8 * v64 + 16] = v86;
      sub_22E90A46C(a1, v62, v23, (uint64_t)&v104, 0);
      if (v104 && v105)
        sub_22E3BB10C((unint64_t)v105, (unint64_t)v104);
      v65 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v23 + 32))(v23);
      LOBYTE(v23) = (*(_BYTE *)(v65 + 82) & 0xC) != 0 || sub_22EFD7260(v65) != 0;
    }
    goto LABEL_89;
  }
LABEL_105:
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 60) & 1) != 0)
  {
    sub_22E8FCA40((_QWORD *)a1, v103, 0x36u, 0, (uint64_t)&v104);
    sub_22F2F30F4((uint64_t)&v104, (uint64_t)"default delete");
    goto LABEL_39;
  }
  v79 = sub_22EE8B180(a1, v103);
  v80 = v79 ^ 1;
  if (v10 && (v79 & 1) == 0)
    v80 = v85 || sub_22F115260(v14) != 0;
  v81 = sub_22EBC16E0(a1, v14);
  v60 = sub_22F33171C((_QWORD *)a1, v103, v80, v81, v47);
  v102 = v60;
  sub_22EB4E494(a1, v103, v60, 1);
  if (v23)
    goto LABEL_82;
LABEL_89:
  sub_22EB17F48(a1, v60, &v103, 1, 0, 0, 0, 0);
  if ((v23 & 1) != 0
    || ((v66 = *(_QWORD *)(**(_QWORD **)(v60 + 120) + 48),
         (v67 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22F10ACF8(*(_QWORD *)(v66 & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF0)
                                      + 8) & 0xFFFFFFFFFFFFFFF0)) != 0)
      ? (v68 = (*(_DWORD *)(v67 + 16) & 0xFF800FF) == 86507531)
      : (v68 = 0),
        v68))
  {
    v25 = v85;
    v26 = v10 != 0;
LABEL_27:
    v27 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 32, 3);
    sub_22F333280(v27, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16392), a3, v26, a4, v25, v102, (uint64_t)v9, v103);
    if (sub_22F1CF68C(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 32), 0x1A51u, 0, *(_QWORD *)(a1 + 104)) == 1)
      return v27;
    v104 = 0;
    v105 = v107;
    *(_WORD *)&v108[1] = 0;
    v106 = 0x400000000;
    v28 = *(_DWORD *)v27;
    v29 = (*(_DWORD *)v27 >> 19) & 1;
    *(_WORD *)v108 = (*(_DWORD *)v27 & 0x80000) != 0;
    v30 = sub_22EFFA6B0(*(unsigned __int8 **)(v27 + 24));
    v31 = *v30;
    if (v31 == 161)
    {
      v48 = *((_QWORD *)v30 + 2);
      if (v48)
        v49 = (*(_DWORD *)(v48 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9;
      else
        v49 = 0;
      if (!v49 || (*(_DWORD *)(v48 + 28) & 0x7F) == 0x40 && (*(_DWORD *)(v48 + 96) & 0x600u) - 1536 > 0xFFFFFBFF)
        goto LABEL_113;
      if (*(_QWORD *)(v48 + 88) < 8uLL)
        goto LABEL_113;
      v50 = (unsigned __int8 *)sub_22EFBC5B4(v48);
      v51 = sub_22EBD0B1C(v50);
      if (!v51 || ((*(_DWORD *)v51 >> 19) & 1) == v29)
        goto LABEL_113;
      v107[0] = v51;
      LODWORD(v106) = 1;
    }
    else
    {
      if (v31 != 188)
        goto LABEL_113;
      v32 = *((_QWORD *)v30 + 3);
      if (!v32 || (*(_DWORD *)(v32 + 28) & 0x7Fu) - 52 < 0xFFFFFFFD)
        goto LABEL_113;
      v34 = sub_22EBC28C4((uint64_t)&v104, v32, (v28 & 0x80000) != 0);
      if ((v34 - 1) >= 2)
      {
        if (v34 == 3)
        {
          v82 = sub_22F2B377C(a1 + 2640, (uint64_t *)&v104);
          v83 = *(unsigned int *)(v27 + 4) | ((unint64_t)((*(_DWORD *)v27 >> 19) & 1) << 32);
          v84 = *(_DWORD *)(v82 + 8);
          if (v84 >= *(_DWORD *)(v82 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v84 = *(_DWORD *)(v82 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v82 + 8 * v84) = v83;
          ++*(_DWORD *)(v82 + 8);
        }
        goto LABEL_113;
      }
    }
    sub_22EBC2708(a1, *(_DWORD *)(v27 + 4), (uint64_t)&v104);
LABEL_113:
    if (v105 != v107)
      free(v105);
    return v27;
  }
  v69 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v69 & 8) != 0)
  {
    v71 = *(_QWORD *)((v69 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v70 = *(_QWORD *)((v69 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v70 = 0;
    v71 = 0;
  }
  if (((v69 | (v14 | v71)) & 7) != 0)
  {
    v87 = v66;
    v72 = v71 & 0xFFFFFFF8;
    v73 = *(_QWORD *)(a1 + 88);
    v74 = *v16;
    if ((*(_BYTE *)(*v16 + 8) & 0xF) != 0)
      v74 = (uint64_t)sub_22F10D2BC(v14);
    v75 = v74 & 0xFFFFFFFFFFFFFFF0;
    if (((v72 | v70) & 0xCFFFFFFF8) != 0)
    {
      v104 = (void *)(v72 | v70);
      v76 = sub_22E491354((unsigned int *)&v104, v75);
      v75 = sub_22EF5DBC4(v73, v76, (uint64_t)v104);
    }
    v66 = v87;
    v77 = sub_22EF5B848(v73, v75, 0);
    v9 = (void *)(sub_22E90092C(a1, (uint64_t)v9, v77, 5, 0, 0) & 0xFFFFFFFFFFFFFFFELL);
  }
  v27 = 1;
  v78 = sub_22ECFABE8((uint64_t *)a1, (unsigned __int8 *)v9, v66, 1, 0);
  if ((v78 & 1) == 0)
  {
    v26 = v10 != 0;
    v25 = v85;
    v9 = (void *)(v78 & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_27;
  }
  return v27;
}

BOOL sub_22EBC3650(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  return (v2 && *(_BYTE *)(v2 + 16) == 39
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
       && (v2 = sub_22F10CF48(v2)) != 0)
      && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 27 < 0xFFFFFFFE;
}

void sub_22EBC36CC(uint64_t a1, _WORD *a2, int a3, int a4, int a5, int a6, unsigned int a7)
{
  uint64_t v14;
  unsigned int v16;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v28;
  int v29;
  _QWORD *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  void **v35;
  __int128 *v36;
  void **v37;
  size_t v38;
  void *v39[2];
  char v40;
  int v41[6];
  void *__p;
  char v43;
  __int128 v44;
  uint64_t v45;
  _QWORD v46[12];
  uint64_t v47;

  if (!a2)
    return;
  v14 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)a2 + 32))(a2);
  if ((*(_BYTE *)(v14 + 82) & 0xC) != 0)
    return;
  if (sub_22EFD7260(v14) || a5 == 0)
    return;
  v16 = *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 576);
  if (v16 <= 3 && v16 != 2)
    return;
  v18 = a2[40] & 0x7F;
  v19 = -40;
  if (v18 > 0x46)
  {
    if (v18 == 83)
      goto LABEL_28;
    if (v18 == 71)
    {
      v19 = -56;
      goto LABEL_28;
    }
    if (v18 != 81)
    {
LABEL_23:
      v20 = v18 - 52;
      v21 = v18 - 33 >= 5;
      v22 = -48;
      if (!v21)
        v22 = -64;
      if (v20 >= 6)
        v19 = v22;
      else
        v19 = -72;
    }
  }
  else
  {
    if (v18 > 0x18)
      goto LABEL_22;
    if (v18 == 16)
    {
LABEL_15:
      v19 = -48;
      goto LABEL_28;
    }
    if (((1 << v18) & 0x1066) == 0)
    {
      if (v18 == 24)
        goto LABEL_15;
LABEL_22:
      if (v18 == 70)
      {
        v19 = -64;
        goto LABEL_28;
      }
      goto LABEL_23;
    }
  }
LABEL_28:
  v23 = *(_QWORD *)((char *)a2 + v19 + 88);
  v24 = (_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8);
  if ((v23 & 4) != 0)
    v24 = (_QWORD *)*v24;
  if (v24)
    v25 = (uint64_t)(v24 - 8);
  else
    v25 = 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v25 + 104) + 96), *(_QWORD *)(v25 + 104));
  if ((**(_QWORD **)(v25 + 128) & 0x400) != 0 && !sub_22E4808EC(v25))
  {
    v26 = sub_22F1E361C(*(_QWORD **)(a1 + 112), *(_DWORD *)(v25 + 24));
    if (v26 == 3 || v26 == 0)
    {
      v28 = sub_22EFD7558((uint64_t)a2);
      v47 = sub_22F10ACF8(*(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF0));
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v25 + 104) + 96), *(_QWORD *)(v25 + 104));
      if ((**(_QWORD **)(v25 + 128) & 0x800) != 0)
      {
        v29 = a3;
        v30 = (_QWORD *)a1;
        v31 = 6482;
      }
      else
      {
        if (!a6)
          goto LABEL_45;
        v29 = a3;
        v30 = (_QWORD *)a1;
        v31 = 6485;
      }
      sub_22E8FCA40(v30, v29, v31, 0, (uint64_t)v46);
      v41[0] = a4 ^ 1;
      v32 = sub_22E8900C4((uint64_t)v46, v41);
      sub_22E8901B8(v32, &v47);
      sub_22E903BEC((unsigned int *)v46);
LABEL_45:
      if ((a4 & 1) == 0)
      {
        v44 = 0uLL;
        v45 = 0;
        v46[0] = sub_22E8FCD8C(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 80));
        v46[1] = v33;
        sub_22F119374(&v47, &v44, (uint64_t)v46);
        sub_22E8FCA40((_QWORD *)a1, a7, 0x15A9u, 0, (uint64_t)v46);
        if (v45 >= 0)
          v34 = HIBYTE(v45) & 0x7F;
        else
          v34 = *((_QWORD *)&v44 + 1);
        sub_22E3B8BF4((uint64_t)v39, v34 + 2);
        if (v40 >= 0)
          v35 = v39;
        else
          v35 = (void **)v39[0];
        if (v34)
        {
          if (v45 >= 0)
            v36 = &v44;
          else
            v36 = (__int128 *)v44;
          memmove(v35, v36, v34);
        }
        strcpy((char *)v35 + v34, "::");
        if (v40 >= 0)
          v37 = v39;
        else
          v37 = (void **)v39[0];
        if (v40 >= 0)
          v38 = v40 & 0x7F;
        else
          v38 = (size_t)v39[1];
        sub_22E729148(v37, v38, a7, 0, (uint64_t)v41);
        sub_22E890748((uint64_t)v46, v41);
        if (v43 < 0)
          operator delete(__p);
        if (v40 < 0)
          operator delete(v39[0]);
        sub_22E903BEC((unsigned int *)v46);
        if (SHIBYTE(v45) < 0)
          operator delete((void *)v44);
      }
    }
  }
}

uint64_t sub_22EBC3A24()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  _QWORD *v4;
  unsigned int *v5;
  int v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v24;
  char *v25;
  _QWORD v27[2];
  _QWORD v28[2];
  _QWORD v29[339];
  int v30;
  _OWORD v31[9];
  _QWORD *v32;
  uint64_t v33;
  _QWORD v34[5];
  __int128 v35;
  uint64_t v36;
  unsigned int v37;
  __int128 v38;
  int v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  void *v44;
  uint64_t v45;
  _QWORD v46[9];
  __int128 v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  _BYTE v51[24];
  __int16 v52;
  char v53;
  int v54;
  uint64_t v55;

  v0 = MEMORY[0x24BDAC7A8]();
  v3 = v2;
  v4 = (_QWORD *)v0;
  v55 = *MEMORY[0x24BDAC8D0];
  v5 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFFELL);
  if ((*(_BYTE *)(*(_QWORD *)(v0 + 72) + 1) & 1) != 0)
  {
    sub_22F331450(v0);
    v9 = 16;
    if (v3)
      v9 = 32;
    v10 = (v4[11] + v9 + 15280) | 6;
    sub_22EFFAE7C(v5);
    v43 = 0;
    v44 = v46;
    v45 = 0x800000000;
    v46[8] = 0;
    v47 = 0u;
    v48 = v4;
    v49 = v10;
    v50 = v11;
    sub_22EFC6D6C((uint64_t)v51, v10);
    v52 = 0;
    *(_OWORD *)&v51[8] = 0u;
    v53 = 1;
    v54 = 1;
    sub_22EC56024((uint64_t)&v43);
    v12 = *(_QWORD *)(*(_QWORD *)(v4[11] + 1960) + 80);
    v13 = sub_22E3CD31C((uint64_t *)(v12 + 72), v12);
    if (v13)
      v14 = v13 + 40;
    else
      v14 = 0;
    sub_22EC611AC(v4, &v43, v14, 0);
    LOBYTE(v54) = 0;
    v15 = (char *)&v5[2 * (((unint64_t)*v5 >> 18) & 1) + 2] + ((unint64_t)*v5 >> 24);
    v16 = &v15[8 * v5[4]];
    v40 = &v42;
    v41 = 0x800000000;
    sub_22F246808((uint64_t)&v40, v15, v16);
    v28[0] = v29;
    v28[1] = 0x1000000000;
    v29[336] = v31;
    v29[337] = v31;
    v29[338] = 16;
    v30 = 0;
    v31[8] = 0u;
    v32 = v34;
    v33 = 0x400000000;
    v34[4] = (char *)&v35 + 8;
    v35 = 0u;
    v36 = 1;
    v17 = v50;
    v37 = v50;
    v39 = 0;
    v38 = 0u;
    if ((_DWORD)v45)
    {
      v18 = 8 * v45;
      v19 = (uint64_t *)v44;
      do
      {
        v20 = *v19;
        v21 = *v19 & 0xFFFFFFFFFFFFFFFCLL;
        v22 = *(_DWORD *)(v21 + 28);
        if ((v22 & 0x7Fu) <= 0x2F && ((1 << (v22 & 0x7F)) & 0xC00000060000) != 0)
        {
          v21 = sub_22EFBAEA4(*v19 & 0xFFFFFFFFFFFFFFFCLL);
          v22 = *(_DWORD *)(v21 + 28);
        }
        if ((v22 & 0x7F) == 0x1D)
          sub_22ED07F48(v4, (_QWORD *)v21, v20, 0, 0, (uint64_t)v40, v41, (uint64_t)v28, 0, 0, 1u, 0, 0);
        else
          sub_22ED0475C((uint64_t)v4, v21, v20, 0, (uint64_t)v40, v41, (uint64_t)v28, 0, 0, 1, 0, 0, 0, 0, 0);
        ++v19;
        v18 -= 8;
      }
      while (v18);
      v17 = v50;
    }
    sub_22F0D4E74((uint64_t)v5);
    v27[0] = 0;
    v27[1] = v24;
    v25 = (char *)&loc_22EBC3DB4 + 4 * byte_22F481F64[sub_22ED03FCC(v28, v4, v17, v27)];
    __asm { BR              X10 }
  }
  sub_22EFF605C(v1 & 0xFFFFFFFFFFFFFFFELL);
  sub_22E8FCA40(v4, v6, 0xBA6u, 0, (uint64_t)v28);
  v7 = "__builtin_operator_new";
  if (v3)
    v7 = "__builtin_operator_delete";
  v43 = v7;
  v8 = sub_22E8AECC4((uint64_t)v28, (uint64_t *)&v43);
  sub_22F2F30F4(v8, (uint64_t)"C++");
  sub_22E903BEC((unsigned int *)v28);
  return 1;
}

unint64_t sub_22EBC4288(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  unsigned int v12;
  int v13;
  int v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21[24];

  if ((*(_BYTE *)(a2 + 28) & 0x80) != 0)
    return 1;
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if ((v9 - 25) <= 1)
  {
    v10 = *(_DWORD *)(a2 + 24);
    v11 = (_QWORD *)a1;
    v12 = 3690;
LABEL_6:
    sub_22E8FCA40(v11, v10, v12, 0, (uint64_t)v21);
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_22E8906A0((uint64_t)v21, &v20);
    sub_22E903BEC(v21);
    return 1;
  }
  v13 = v9 & 0xFE;
  if ((v13 - 2) <= 3)
  {
    v10 = *(_DWORD *)(a2 + 24);
    v11 = (_QWORD *)a1;
    v12 = 3689;
    goto LABEL_6;
  }
  v16 = *(_DWORD *)(v8 + 16);
  if ((v16 & 0xFE) == 0x28)
    goto LABEL_15;
  if (v13 == 40)
  {
    v19 = *(_QWORD *)(a2 + 48);
    v8 = sub_22F10CF48(v8);
    v7 = v19;
    if (v8)
    {
      v16 = *(_DWORD *)(v8 + 16);
LABEL_15:
      if ((v16 & 0x100000) != 0)
      {
        do
        {
          v8 = *(_QWORD *)(*(_QWORD *)(v8 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v8)
          {
            v18 = *(_DWORD *)(v8 + 16);
            if ((v18 & 0xFE) == 0x28)
              continue;
          }
          v8 = sub_22F10CF48(v8);
          v18 = *(_DWORD *)(v8 + 16);
        }
        while ((v18 & 0x100000) != 0);
      }
      v7 = *(_QWORD *)(v8 + 32);
    }
  }
  v17 = (unsigned __int8 *)(sub_22F32D524(a1, a2, v7, 1, *(_DWORD *)(a2 + 24), 0) & 0xFFFFFFFFFFFFFFFELL);
  if (a4 == 2)
    return sub_22ED2DFE0(a1, a3, (uint64_t)v17);
  else
    return sub_22EB52F30(a1, a3, v17, a4 == 1);
}

uint64_t sub_22EBC4428(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  char v10;
  uint64_t (**v11)();
  char v12;
  int v13;

  v5 = sub_22ED025A8(a1);
  v6 = v5;
  if (a3)
  {
    if ((v5 & 1) == 0 && (*(_BYTE *)((v5 & 0xFFFFFFFFFFFFFFFELL) + 2) & 1) == 0)
    {
      v9 = 1;
      v8 = 0;
      v10 = 0;
      v12 = 0;
      v11 = off_24FAB8300;
      v13 = 3078;
      v6 = sub_22EB4CB24(a1, v5 & 0xFFFFFFFFFFFFFFFELL, &v8, &v11, 0);
      if (v9 >= 0x41)
      {
        if (v8)
          MEMORY[0x2348A0E84](v8, 0x1000C8000313F17);
      }
    }
  }
  return v6;
}

uint64_t sub_22EBC44E0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _DWORD *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  if (*a2 != 153 || (a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2)) != 0)
  {
    do
    {
      v4 = a2;
      v5 = *a2;
      if (v5 > 0xD5)
      {
        if (v5 == 233)
        {
          if ((*(_DWORD *)a2 & 0x7C0000) != 0x300000)
            return 0;
          v5 = *(_DWORD *)a2;
          v7 = a2 + 16;
        }
        else
        {
          if (v5 != 214)
            break;
          v7 = a2 + 24;
        }
      }
      else if (v5 == 155)
      {
        if ((**((_DWORD **)a2 + 2) & 0x18000) != 0)
          return 0;
        v7 = a2 + 24;
        if (!a2[48])
          v7 = a2 + 32;
        v5 = 155;
      }
      else
      {
        if (v5 != 176)
          break;
        v6 = *((unsigned int *)a2 + 5);
        if ((_DWORD)v6 == -1)
          return 0;
        v7 = &a2[8 * v6 + 40];
        v5 = 176;
      }
      a2 = *(unsigned __int8 **)v7;
    }
    while (*(_DWORD **)v7 != v4);
    if (v5 != 225)
      return 0;
  }
  else
  {
    v4 = 0;
  }
  v8 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (!v8 || *(_BYTE *)(v8 + 16) != 39)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
      return 0;
    result = sub_22F10CF48(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
    v8 = result;
    if (!result)
      return result;
  }
  result = 0;
  v10 = *(_QWORD *)(v8 + 32);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v11 + 16) != 11)
    v11 = 0;
  if ((v10 & 0xF) != 0 || !v11)
    return result;
  if ((*(_BYTE *)((v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xF) != 0)
    return 0;
  v12 = (*v4 >> 18) & 7;
  if (v12)
  {
    if (v12 == 1)
      return sub_22F36EDA0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16424), v11 & 0xFFFFFFFFFFFFFFF0, 0);
    return 0;
  }
  v13 = (*(_DWORD *)(v11 + 16) >> 19) & 0x1FF;
  return v13 == 167 || v13 == 178;
}

unint64_t sub_22EBC4694(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6)
{
  unsigned __int8 *v10;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int *v54;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  void (**v60)(_QWORD, uint64_t, _QWORD, uint64_t);
  uint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned int v66;
  void *v67;
  uint64_t v68;
  _DWORD v69[16];
  uint64_t v70;

  v10 = a2;
  v70 = *MEMORY[0x24BDAC8D0];
  if (a6 == 4
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) != 45)
  {
    return (unint64_t)v10;
  }
  switch(*(_DWORD *)a4 & 0x7FFFFFFF)
  {
    case 0:
      v12 = sub_22EBC4D44((uint64_t)a1, a2, a3, a4 + 16, a5);
      if ((v12 & 1) != 0)
        return 1;
      return v12 & 0xFFFFFFFFFFFFFFFELL;
    case 1:
      v13 = *(_QWORD *)(a4 + 136);
      if (v13)
        v14 = (*(_DWORD *)(v13 + 28) & 0x7F) == 56;
      else
        v14 = 0;
      v15 = !v14;
      if (v14)
      {
        v19 = a1[11];
        v20 = *(_WORD *)(v13 + 80) & 0x7F;
        v21 = -40;
        if (v20 > 0x46)
        {
          if (v20 != 83)
          {
            if (v20 == 71)
            {
              v21 = -56;
              goto LABEL_45;
            }
            if (v20 == 81)
              goto LABEL_45;
LABEL_40:
            v30 = v20 - 52;
            v31 = v20 - 33 >= 5;
            v32 = -48;
            if (!v31)
              v32 = -64;
            if (v30 >= 6)
              v21 = v32;
            else
              v21 = -72;
          }
        }
        else
        {
          if (v20 > 0x18)
            goto LABEL_39;
          if (v20 != 16)
          {
            if (((1 << v20) & 0x1066) != 0)
              goto LABEL_45;
            if (v20 != 24)
            {
LABEL_39:
              if (v20 == 70)
              {
                v21 = -64;
                goto LABEL_45;
              }
              goto LABEL_40;
            }
          }
          v21 = -48;
        }
LABEL_45:
        v33 = *(_QWORD *)(v13 + 72 + v21 + 16);
        v34 = (_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF8);
        if ((v33 & 4) != 0)
          v34 = (_QWORD *)*v34;
        if (v34)
          v35 = (unint64_t)(v34 - 8);
        else
          v35 = 0;
        v36 = *(_QWORD *)(v35 + 48);
        if (v36)
          v16 = v36 & 0xFFFFFFFFFFFFFFF0;
        else
          v16 = sub_22EF6462C(v19, v35);
        goto LABEL_52;
      }
      if ((*(_BYTE *)(a4 + 72) & 1) != 0)
      {
        v16 = 0;
        goto LABEL_52;
      }
      v16 = *(_QWORD *)(**(_QWORD **)(v13 + 120) + 48);
      v17 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0);
      if (!v17 || (v18 = *(_DWORD *)(v17 + 16), (v18 & 0xFE) != 0x28))
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
          goto LABEL_52;
        v17 = sub_22F10CF48(v17);
        if (!v17)
          goto LABEL_52;
        v18 = *(_DWORD *)(v17 + 16);
      }
      if ((v18 & 0x100000) != 0)
      {
        do
        {
          v17 = *(_QWORD *)(*(_QWORD *)(v17 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v17)
          {
            v59 = *(_DWORD *)(v17 + 16);
            if ((v59 & 0xFE) == 0x28)
              continue;
          }
          v17 = sub_22F10CF48(v17);
          v59 = *(_DWORD *)(v17 + 16);
        }
        while ((v59 & 0x100000) != 0);
      }
      v16 = *(_QWORD *)(v17 + 32);
LABEL_52:
      if ((*(_BYTE *)(a4 + 72) & 1) == 0)
      {
        v37 = sub_22EBC4D44((uint64_t)a1, v10, v16, a4 + 16, 3);
        if ((v37 & 1) != 0)
          return 1;
        v10 = (unsigned __int8 *)(v37 & 0xFFFFFFFFFFFFFFFELL);
      }
      sub_22F0D5A50((uint64_t)v10);
      v39 = v38;
      v40 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
      if (!v40 || (v41 = *(_DWORD *)(v40 + 16), (v41 & 0xFE) != 0x28))
      {
        v42 = a3;
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
          goto LABEL_58;
        v56 = v39;
        v40 = sub_22F10CF48(v40);
        v39 = v56;
        v42 = a3;
        if (!v40)
          goto LABEL_58;
        v41 = *(_DWORD *)(v40 + 16);
      }
      if ((v41 & 0x100000) != 0)
      {
        do
        {
          v57 = v39;
          v40 = *(_QWORD *)(*(_QWORD *)(v40 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (!v40 || (v58 = *(_DWORD *)(v40 + 16), (v58 & 0xFE) != 0x28))
          {
            v40 = sub_22F10CF48(v40);
            v58 = *(_DWORD *)(v40 + 16);
          }
          v39 = v57;
        }
        while ((v58 & 0x100000) != 0);
      }
      v42 = *(_QWORD *)(v40 + 32);
LABEL_58:
      v43 = *(_QWORD *)(a4 + 144);
      v44 = *(_BYTE *)(a4 + 72);
      v66 = v39;
      v65 = v10;
      if (v15)
      {
        v67 = v69;
        v68 = 0x800000000;
        v60 = (void (**)(_QWORD, uint64_t, _QWORD, uint64_t))&unk_24FAB6EF8;
        LODWORD(v61) = 2621;
        if ((sub_22EAB2EB4((uint64_t)a1, v39, v42, &v60) & 1) != 0)
        {
LABEL_60:
          v45 = 1;
          goto LABEL_69;
        }
        v45 = 1;
        if ((sub_22EACCC94(a1, v13, v42, (uint64_t)&v65, 1u, v66, (uint64_t)&v67, 0, 0) & 1) == 0)
        {
          LODWORD(v60) = 9;
          v61 = 0;
          v62 = v42;
          v63 = 0;
          v64 = 0;
          sub_22E90A630(a1, v66, v13, v43, (uint64_t)&v60, 0);
          v45 = 1;
          if ((sub_22EB17F48(a1, v13, &v66, 1, 0, 0, 0, 0) & 1) == 0)
          {
            v52 = sub_22EACC28C((uint64_t)a1, v66, v42, v43 & 0xFFFFFFFFFFFFFFFCLL, v13, (unsigned __int8 **)v67, v68, (v44 & 2) != 0, 0, 0, 0, 0, 0);
            if ((v52 & 1) != 0)
              goto LABEL_60;
            v45 = sub_22EBCC6C0((uint64_t)a1, v52 & 0xFFFFFFFFFFFFFFFELL);
          }
        }
LABEL_69:
        if (v67 != v69)
          free(v67);
        if ((v45 & 1) != 0)
          return 1;
        goto LABEL_72;
      }
      v67 = 0;
      sub_22E90AE54((uint64_t)a1, v39, (uint64_t)v10, (uint64_t *)&v67, v43);
      if ((sub_22EB17F48(a1, v13, &v66, 1, 0, 0, 0, 0) & 1) != 0)
        return 1;
      v46 = sub_22EBCE6E4((uint64_t)a1, (uint64_t)v10, v43 & 0xFFFFFFFFFFFFFFFCLL, v13, (v44 & 2) != 0);
      if ((v46 & 1) != 0)
        return 1;
      v47 = v46 & 0xFFFFFFFFFFFFFFFELL;
      v48 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v49 = (*(_DWORD *)(v46 & 0xFFFFFFFFFFFFFFFELL) >> 8) & 3;
      if (a1[162] == a1[161])
      {
        v50 = 0;
        v51 = 24;
      }
      else
      {
        v50 = a1[162];
        v51 = HIDWORD(v50) ? 32 : 24;
      }
      v53 = (unsigned int *)sub_22E3CD3D4(a1[11] + 2032, v51, 3);
      v54 = sub_22F003694(v53, v48, 20, v47, 0, v50, v49);
      v45 = sub_22EBCC6C0((uint64_t)a1, (unint64_t)v54 & 0xFFFFFFFFFFFFFFFELL);
      if ((v45 & 1) != 0)
        return 1;
LABEL_72:
      v10 = (unsigned __int8 *)(v45 & 0xFFFFFFFFFFFFFFFELL);
      if (a6 != 4)
        return sub_22EBC4D44((uint64_t)a1, v10, a3, a4 + 80, 3);
      return (unint64_t)v10;
    case 2:
      sub_22EFF605C((uint64_t)a2);
      v23 = v22;
      v68 = a1[11] + 2128;
      v69[0] = 4911;
      sub_22F0D4E74((uint64_t)v10);
      v25 = v24;
      v67 = (void *)sub_22E3B8AAC(v68);
      sub_22E4D6448((uint64_t)v67 + 336, v25, 1);
      sub_22F342BD4(a4, (unsigned int *)a1, v23, (uint64_t)&v67);
      if (v67 && v68)
        sub_22E3BB10C(v68, (unint64_t)v67);
      return 1;
    case 4:
      sub_22EFF605C((uint64_t)a2);
      v27 = sub_22F32EE14((uint64_t)a1, v26, a3, *((_QWORD *)v10 + 1));
      if (v27)
        v28 = v27;
      else
        v28 = 29;
      sub_22EFF605C((uint64_t)v10);
      sub_22EB43580((uint64_t)a1, v28, v29, a3, *((_QWORD *)v10 + 1), v10, a5, 0);
      return 1;
    default:
      return (unint64_t)v10;
  }
}

uint64_t sub_22EBC4D44(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[12];

  v6 = a3;
  v24[10] = *MEMORY[0x24BDAC8D0];
  v20 = a2;
  v21 = a3;
  v19 = a5;
  v8 = *(_QWORD *)(a4 + 40);
  if (!v8)
  {
    v10 = a2[1];
    if ((*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFF0) + 8) | v10 & 7) == (*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(a1 + 88)
                                                                                              + 16840) & 0xFFFFFFFFFFFFFFF0)
                                                                                 + 8) | *(_QWORD *)(*(_QWORD *)(a1 + 88)
                                                                                                  + 16840) & 7))
    {
      v12 = sub_22ED13340((unsigned int *)a1, (uint64_t)a2, a3, 1, &v22, 0);
      if (!v12)
        return 1;
      v13 = v12;
      sub_22F0D5A50((uint64_t)v20);
      LODWORD(v18) = v14;
      if ((sub_22EB17F48(a1, v13, &v18, 1, 0, 0, 0, 0) & 1) != 0)
        return 1;
      v20 = (void *)sub_22ED147E8(a1, (unsigned __int8 *)v20, (uint64_t)v22, v13, v15);
      v16 = sub_22EB19A28(a1, v20);
      if ((v16 & 1) != 0)
        return 1;
      v20 = (void *)(v16 & 0xFFFFFFFFFFFFFFFELL);
      v10 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v6 = v21;
    }
    v11 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
    if (v11 && *(_BYTE *)(v11 + 16) == 6
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 6
      && (v11 = sub_22F10CF48(v11)) != 0)
    {
      v21 = *(_QWORD *)(v11 + 32);
    }
    v18 = v10;
    __asm { BR              X10 }
  }
  if ((unint64_t)*(unsigned __int8 *)(a4 + 1) << 8 != 4352)
    return sub_22EACC28C(a1, 0, a3, *(_QWORD *)(a4 + 48) & 0xFFFFFFFFFFFFFFFCLL, v8, (unsigned __int8 **)&v20, 1, 0, 0, 0, 0, 0, 0);
  v22 = v24;
  v23 = 0x800000000;
  v9 = 1;
  if ((sub_22EACCC94((uint64_t *)a1, v8, a3, (uint64_t)&v20, 1u, 0, (uint64_t)&v22, 0, 0) & 1) == 0)
    v9 = sub_22EACC28C(a1, 0, v21, *(_QWORD *)(a4 + 48) & 0xFFFFFFFFFFFFFFFCLL, *(_QWORD *)(a4 + 40), (unsigned __int8 **)v22, v23, 0, 0, 0, 0, 0, 0);
  if (v22 != v24)
    free(v22);
  return v9;
}

uint64_t sub_22EBC6244(uint64_t result, int a2, unsigned int a3, uint64_t *a4, uint64_t a5, unsigned int a6)
{
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;

  v10 = a2;
  v11 = result;
  v12 = *(_QWORD *)(result + 88);
  v13 = 16400;
  if ((*(_BYTE *)(*(_QWORD *)(v12 + 2000) + 1) & 1) == 0)
    v13 = 16480;
  v14 = *(_QWORD *)(v12 + v13);
  v15 = *(_QWORD *)*a4;
  switch(a2)
  {
    case 1:
    case 21:
      v17 = sub_22F10C2A4(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0));
      if (v17 && (*(_DWORD *)(v17 + 28) & 0x7Fu) - 35 <= 2)
        goto LABEL_25;
      goto LABEL_26;
    case 2:
    case 3:
    case 4:
    case 29:
      goto LABEL_21;
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 22:
    case 23:
    case 25:
    case 26:
    case 27:
      goto LABEL_15;
    case 16:
    case 19:
    case 24:
    case 57:
    case 59:
    case 61:
    case 62:
    case 63:
      v16 = sub_22F10C2A4(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0));
      if (!v16 || (*(_DWORD *)(v16 + 28) & 0x7Fu) - 35 > 2 || (*(_DWORD *)(v16 + 72) & 0xE000) == 0x4000)
        goto LABEL_26;
      goto LABEL_25;
    case 64:
      __break(1u);
      return result;
    default:
      goto LABEL_26;
  }
  while (1)
  {
LABEL_15:
    v19 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0);
    if (v19)
      v20 = (*(_DWORD *)(v19 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
    else
      v20 = 0;
    if (v20)
    {
      v18 = v19;
      goto LABEL_14;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
      break;
    v18 = sub_22F10CF48(v19);
    if (!v18)
      break;
LABEL_14:
    v15 = *(_QWORD *)(v18 + 32);
  }
  v15 = v19 & 0xFFFFFFFFFFFFFFF0;
LABEL_21:
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 16) == 4
    || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFF800FF) == 86507531)
  {
LABEL_26:
    v23 = a5;
    if ((_DWORD)a5)
    {
      v24 = a4;
      while ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)*v24 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
      {
        ++v24;
        if (!--v23)
          goto LABEL_30;
      }
      v25 = 0;
    }
    else
    {
LABEL_30:
      v25 = sub_22EBC64C4();
    }
    v22 = sub_22E3CD3D4(*(_QWORD *)(v11 + 88) + 2032, 8 * a5 + 24, 3);
    sub_22F0624B0((unsigned int *)v22, v14, a3, v10, a4, a5, a6, v25);
  }
  else
  {
LABEL_25:
    v22 = 1;
    if ((sub_22EE8B0B0(v11, a3, v15) & 1) == 0)
      goto LABEL_26;
  }
  return v22;
}

uint64_t sub_22EBC64C4()
{
  _QWORD *v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t **v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char *v40;
  BOOL v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  char v45;
  int v46;
  char v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t i;
  uint64_t v68;
  int v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  BOOL v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  unsigned int v88;
  unint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t *v105;
  BOOL v106;
  uint64_t v107;
  unsigned int v108;
  BOOL v109;
  int v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t *v153;
  BOOL v154;
  uint64_t v155;
  unsigned int v156;
  BOOL v157;
  int v158;
  uint64_t v159;
  BOOL v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  BOOL v168;
  uint64_t v169;
  int v170;
  unsigned __int8 v172;
  int v173;
  uint64_t v174;
  BOOL v175;
  uint64_t v176;
  BOOL v177;
  int v179;
  BOOL v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  BOOL v190;
  uint64_t v191;
  int v192;
  uint64_t *v193;
  int v194;
  int v195;
  uint64_t v196;
  unsigned int v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD v201[2];
  _QWORD v202[3];
  int v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  void *v208;
  uint64_t v209;
  _BYTE v210[16];
  _QWORD v211[4];
  _QWORD v212[6];
  _QWORD v213[2];
  unint64_t v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t v217;

  v0 = (_QWORD *)MEMORY[0x24BDAC7A8]();
  v5 = v1;
  v217 = *MEMORY[0x24BDAC8D0];
  v7 = **v6;
  v8 = v2;
  v214 = v7;
  v9 = v0[11];
  LOBYTE(v10) = 0;
  v11 = v0;
  switch(v1)
  {
    case 0u:
      return v10 & 1;
    case 1u:
    case 0x15u:
      v73 = sub_22F10C2A4(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
      if (!v73 || (*(_DWORD *)(v73 + 28) & 0x7Fu) - 35 > 2)
        goto LABEL_365;
      v74 = sub_22E4808EC(v73);
      goto LABEL_364;
    case 2u:
    case 3u:
    case 4u:
      v12 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF0);
      v13 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
        goto LABEL_413;
      if (sub_22F40ACB8(v13))
      {
        v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v14 & 8) != 0 && (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 0x100)
          goto LABEL_413;
      }
      if ((sub_22F1110EC(*v12, 0) & 1) != 0
        || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 < 2
        || v5 == 3 && sub_22F115260(v7))
      {
        goto LABEL_365;
      }
      v15 = sub_22EF5BA38(v9, v7);
      v16 = sub_22F10C2A4(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0));
      if (!v16 || (*(_DWORD *)(v16 + 28) & 0x7Fu) - 35 > 2)
        goto LABEL_413;
      v17 = sub_22EC6602C(v11, v16);
      v18 = v17 & 0xFFFFFFFFFFFFFFF8;
      if ((v17 & 0xFFFFFFFFFFFFFFF8) == 0
        || (*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v18 + 32))(v17 & 0xFFFFFFFFFFFFFFF8)
                     + 82) & 0x40) != 0
        || (*(_DWORD *)(*(_QWORD *)(v9 + 2000) + 52) & 0x400000) != 0 && (*(_BYTE *)(v18 + 29) & 0x60) != 0)
      {
        goto LABEL_365;
      }
      if (v5 != 4)
        goto LABEL_413;
      v19 = *(_QWORD *)(*(_QWORD *)(v18 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v19)
        v20 = *(_BYTE *)(v19 + 16) == 26;
      else
        v20 = 0;
      if (!v20)
        sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v18 + 48) & 0xFFFFFFFFFFFFFFF0));
      v21 = sub_22EB14850(v11, v8);
      if (!v21)
        goto LABEL_365;
      v22 = sub_22F113A44(v21) == 0;
LABEL_346:
      LOBYTE(v10) = v22;
      return v10 & 1;
    case 5u:
      if ((sub_22F111438(&v214, v9) & 1) != 0)
        goto LABEL_413;
      LOBYTE(v10) = 0;
      v147 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(v9, v214) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (!v147 || *(_BYTE *)(v147 + 16) != 45)
        return v10 & 1;
      v74 = sub_22EBD0EDC(*(_QWORD *)(v147 + 24), v11, v8, v9, (unsigned int (*)(_QWORD *))sub_22EACA488, 0, (unsigned int (*)(_QWORD *))sub_22EAE8D9C, 0, (unsigned int (*)(_QWORD *))sub_22EFD3F30, 0);
      goto LABEL_364;
    case 6u:
      if ((sub_22F111438(&v214, v9) & 1) != 0)
        goto LABEL_413;
      v135 = sub_22EF5BA38(v9, v214);
      v136 = sub_22F10C2A4(*(_QWORD *)(v135 & 0xFFFFFFFFFFFFFFF0));
      if (!v136)
        goto LABEL_365;
      v137 = v136;
      if ((*(_DWORD *)(v136 + 28) & 0x7Fu) - 35 > 2 || !sub_22EACA488(v136))
        goto LABEL_365;
      v99 = sub_22EAE8D9C(v137);
      goto LABEL_150;
    case 7u:
      if ((sub_22F111438(&v214, v9) & 1) != 0)
        goto LABEL_413;
      v163 = sub_22EF5BA38(v9, v214);
      v164 = sub_22F10C2A4(*(_QWORD *)(v163 & 0xFFFFFFFFFFFFFFF0));
      if (!v164)
        goto LABEL_365;
      v165 = v164;
      if ((*(_DWORD *)(v164 + 28) & 0x7Fu) - 35 > 2 || !sub_22EACBAD4(v164))
        goto LABEL_365;
      v99 = sub_22EB1C044(v165);
      goto LABEL_150;
    case 8u:
      v123 = sub_22EF5BA38(v0[11], v7);
      if ((v123 & 1) != 0
        || (*(_BYTE *)((v123 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) != 0
        || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFE) == 0x28)
      {
        goto LABEL_365;
      }
      if ((sub_22F111438(&v214, v9) & 1) != 0)
        goto LABEL_413;
      v124 = v214 & 0xFFFFFFFFFFFFFFF0;
      if (sub_22F40ACB8(*(_QWORD *)(v214 & 0xFFFFFFFFFFFFFFF0)))
        goto LABEL_413;
      LOBYTE(v10) = 0;
      v125 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v124 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (!v125 || *(_BYTE *)(v125 + 16) != 45)
        return v10 & 1;
      v74 = sub_22EBD0EDC(*(_QWORD *)(v125 + 24), v11, v8, v9, (unsigned int (*)(_QWORD *))sub_22F3333D8, 0, (unsigned int (*)(_QWORD *))sub_22E69200C, 0, (unsigned int (*)(_QWORD *))sub_22EFD3B9C, 0);
LABEL_364:
      LOBYTE(v10) = v74;
      return v10 & 1;
    case 9u:
      if ((sub_22F111438(&v214, v9) & 1) != 0)
        goto LABEL_413;
      v148 = (uint64_t *)(v214 & 0xFFFFFFFFFFFFFFF0);
      v149 = *(_QWORD *)(v214 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v149 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28
        || sub_22F40ACB8(v149))
      {
        goto LABEL_413;
      }
      v150 = sub_22F10C2A4(*v148);
      if (!v150)
        goto LABEL_365;
      v151 = v150;
      if ((*(_DWORD *)(v150 + 28) & 0x7Fu) - 35 > 2)
        goto LABEL_365;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v150 + 104) + 96), *(_QWORD *)(v150 + 104));
      if ((**(_QWORD **)(v151 + 128) & 0x10000000000) != 0 && !sub_22E3CD2C4(v151))
        goto LABEL_413;
      LODWORD(v211[0]) = 0;
      v152 = sub_22EC66BE4((uint64_t)v11, v151);
      if (!v152)
        goto LABEL_365;
      LOBYTE(v10) = 0;
      while (2)
      {
        v153 = (uint64_t *)(v152 & 0xFFFFFFFFFFFFFFF8);
        v154 = (v152 & 0xFFFFFFFFFFFFFFF8) == 0 || (v152 & 4) == 0;
        v155 = v152 & 0xFFFFFFFFFFFFFFF8;
        if (!v154)
          v155 = *v153;
        v156 = *(_DWORD *)(v155 + 28) & 0x7F;
        v157 = v156 > 0x2F || ((1 << v156) & 0xC00000060000) == 0;
        v158 = *(_DWORD *)(v155 + 28) & 0x7F;
        if (!v157)
          v158 = *(_DWORD *)(sub_22EFBAEA4(v155) + 28) & 0x7F;
        if (v158 == 29)
          goto LABEL_296;
        if (v156 > 0x2F)
          goto LABEL_285;
        if (((1 << v156) & 0xC00000060000) != 0)
        {
          v155 = sub_22EFBAEA4(v155);
        }
        else if (v156 == 13)
        {
          goto LABEL_296;
        }
LABEL_285:
        if (!sub_22EFD3AF0(v155, (int *)v211))
          goto LABEL_296;
        v159 = *(_QWORD *)(*(_QWORD *)(v155 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (v159)
          v160 = *(_BYTE *)(v159 + 16) == 26;
        else
          v160 = 0;
        if (!v160)
          sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v155 + 48) & 0xFFFFFFFFFFFFFFF0));
        v161 = sub_22EB14850(v11, v8);
        if (v161)
        {
          v162 = v161;
          if (!sub_22F113A44(v161) && (*(_DWORD *)(v162 + 20) & 0x3FFF80) == 0)
          {
            LOBYTE(v10) = 1;
LABEL_296:
            if (v154)
              return v10 & 1;
            v152 = v153[1];
            if (!v152)
              return v10 & 1;
            continue;
          }
        }
        goto LABEL_365;
      }
    case 0xAu:
      if ((sub_22F111438(&v214, v9) & 1) != 0)
        goto LABEL_413;
      v100 = v214;
      if (sub_22F40ACB8(*(_QWORD *)(v214 & 0xFFFFFFFFFFFFFFF0)))
        goto LABEL_413;
      v101 = sub_22EF5BA38(v9, v100);
      v102 = sub_22F10C2A4(*(_QWORD *)(v101 & 0xFFFFFFFFFFFFFFF0));
      if (!v102)
        goto LABEL_365;
      v103 = v102;
      if ((*(_DWORD *)(v102 + 28) & 0x7Fu) - 35 > 2)
        goto LABEL_365;
      if (sub_22E49F698(v102) && !sub_22F333374(v103))
        goto LABEL_413;
      v104 = sub_22EC66BE4((uint64_t)v11, v103);
      LOBYTE(v10) = 0;
      if (!v104)
        return v10 & 1;
      while (2)
      {
        v105 = (uint64_t *)(v104 & 0xFFFFFFFFFFFFFFF8);
        v106 = (v104 & 0xFFFFFFFFFFFFFFF8) == 0 || (v104 & 4) == 0;
        v107 = v104 & 0xFFFFFFFFFFFFFFF8;
        if (!v106)
          v107 = *v105;
        v108 = *(_DWORD *)(v107 + 28) & 0x7F;
        v109 = v108 > 0x2F || ((1 << v108) & 0xC00000060000) == 0;
        v110 = *(_DWORD *)(v107 + 28) & 0x7F;
        if (!v109)
          v110 = *(_DWORD *)(sub_22EFBAEA4(v107) + 28) & 0x7F;
        if (v110 == 29)
          goto LABEL_182;
        if (v108 > 0x2F)
          goto LABEL_171;
        if (((1 << v108) & 0xC00000060000) != 0)
        {
          v107 = sub_22EFBAEA4(v107);
        }
        else if (v108 == 13)
        {
          goto LABEL_182;
        }
LABEL_171:
        if (!sub_22EFC0EB8(v107))
        {
          v111 = *(_QWORD *)(*(_QWORD *)(v107 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (v111)
            v112 = *(_BYTE *)(v111 + 16) == 26;
          else
            v112 = 0;
          if (!v112)
            sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v107 + 48) & 0xFFFFFFFFFFFFFFF0));
          v113 = sub_22EB14850(v11, v8);
          if (!v113 || (v114 = v113, sub_22F113A44(v113)) || (*(_DWORD *)(v114 + 20) & 0x3FFFC0) != 0)
          {
LABEL_365:
            LOBYTE(v10) = 0;
            return v10 & 1;
          }
          LOBYTE(v10) = 1;
        }
LABEL_182:
        if (v106)
          return v10 & 1;
        v104 = v105[1];
        if (!v104)
          return v10 & 1;
        continue;
      }
    case 0xBu:
      if ((v7 & 1) != 0 || (*(_BYTE *)((v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) != 0)
        goto LABEL_365;
      if ((sub_22F111438(&v214, v9) & 1) != 0)
        goto LABEL_413;
      v121 = sub_22F10C2A4(*(_QWORD *)(v214 & 0xFFFFFFFFFFFFFFF0));
      if (!v121)
        goto LABEL_365;
      v122 = v121;
      if ((*(_DWORD *)(v121 + 28) & 0x7Fu) - 35 > 2)
        goto LABEL_365;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v121 + 104) + 96), *(_QWORD *)(v121 + 104));
      if ((**(_QWORD **)(v122 + 128) & 0x40000000000) == 0)
        goto LABEL_365;
      v99 = sub_22E69200C(v122);
LABEL_150:
      LOBYTE(v10) = v99 ^ 1;
      return v10 & 1;
    case 0xCu:
      if ((sub_22F111438(&v214, v9) & 1) != 0)
        goto LABEL_413;
      v143 = *(_QWORD *)(v214 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v143 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
        goto LABEL_413;
      v144 = sub_22F10C2A4(v143);
      if (!v144)
        goto LABEL_365;
      v145 = v144;
      if ((*(_DWORD *)(v144 + 28) & 0x7Fu) - 35 > 2)
        goto LABEL_365;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v144 + 104) + 96), *(_QWORD *)(v144 + 104));
      if ((**(_QWORD **)(v145 + 128) & 0x10000000000) == 0)
        goto LABEL_365;
      v99 = sub_22E3CD2C4(v145);
      goto LABEL_150;
    case 0xDu:
      if ((sub_22F111438(&v214, v9) & 1) != 0)
        goto LABEL_413;
      v96 = sub_22EF5BA38(v9, v214);
      v97 = sub_22F10C2A4(*(_QWORD *)(v96 & 0xFFFFFFFFFFFFFFF0));
      if (!v97)
        goto LABEL_365;
      v98 = v97;
      if ((*(_DWORD *)(v97 + 28) & 0x7Fu) - 35 > 2 || !sub_22E49F698(v97))
        goto LABEL_365;
      v99 = sub_22F333374(v98);
      goto LABEL_150;
    case 0xEu:
      if ((sub_22F111438(&v214, v9) & 1) != 0)
        goto LABEL_413;
      v128 = v214;
      v129 = v214 & 0xFFFFFFFFFFFFFFF0;
      v130 = *(_QWORD *)(v214 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v130 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
        goto LABEL_413;
      if (sub_22F40ACB8(v130))
      {
        v131 = *(_QWORD *)(v129 + 8);
        if ((v131 & 8) != 0 && (*(_QWORD *)((v131 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 0x100)
          goto LABEL_413;
      }
      v132 = sub_22EF5BA38(v9, v128);
      v133 = sub_22F10C2A4(*(_QWORD *)(v132 & 0xFFFFFFFFFFFFFFF0));
      if (!v133)
        goto LABEL_365;
      v134 = v133;
      if ((*(_DWORD *)(v133 + 28) & 0x7Fu) - 35 > 2)
        goto LABEL_365;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v133 + 104) + 96), *(_QWORD *)(v133 + 104));
      v10 = (**(_QWORD **)(v134 + 128) >> 44) & 1;
      return v10 & 1;
    case 0xFu:
      v92 = sub_22F10C2A4(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
      if (!v92)
        goto LABEL_365;
      if ((*(_DWORD *)(v92 + 28) & 0x7Fu) - 35 > 2)
        goto LABEL_365;
      v93 = sub_22EC6602C(v11, v92) & 0xFFFFFFFFFFFFFFF8;
      if (!v93)
        goto LABEL_365;
      v94 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v93 + 32))(v93);
      if ((*(_BYTE *)(v94 + 82) & 0xC) != 0)
        goto LABEL_413;
      v95 = sub_22EFD7260(v94) == 0;
      goto LABEL_308;
    case 0x10u:
      v139 = sub_22F10C2A4(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
      if (!v139)
        goto LABEL_365;
      v140 = v139;
      if ((*(_DWORD *)(v139 + 28) & 0x7Fu) - 35 > 2 || (*(_DWORD *)(v139 + 72) & 0xE000) == 0x4000)
        goto LABEL_365;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v139 + 104) + 96), *(_QWORD *)(v139 + 104));
      v10 = (**(_QWORD **)(v140 + 128) >> 11) & 1;
      return v10 & 1;
    case 0x11u:
      if (sub_22F111060(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0)))
        goto LABEL_413;
      v88 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 16);
      if (v88 >= 0x39)
        goto LABEL_365;
      v89 = 0x180000000001000;
      goto LABEL_261;
    case 0x12u:
      v166 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF0);
      if (sub_22F10DDF0(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0)) || sub_22F10DE3C(*v166))
        goto LABEL_413;
      v74 = sub_22F10DF24(*v166);
      goto LABEL_364;
    case 0x13u:
      v141 = sub_22F10C2A4(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
      if (!v141)
        goto LABEL_365;
      v142 = v141;
      if ((*(_DWORD *)(v141 + 28) & 0x7Fu) - 35 > 2 || (*(_DWORD *)(v141 + 72) & 0xE000) == 0x4000)
        goto LABEL_365;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v141 + 104) + 96), *(_QWORD *)(v141 + 104));
      v10 = (**(_QWORD **)(v142 + 128) >> 9) & 1;
      return v10 & 1;
    case 0x14u:
      v22 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 16) == 44;
      goto LABEL_346;
    case 0x16u:
      v74 = sub_22F111D3C(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0), v9);
      goto LABEL_364;
    case 0x17u:
      v74 = sub_22F111438(&v214, v9);
      goto LABEL_364;
    case 0x18u:
      v126 = sub_22F10C2A4(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
      if (!v126)
        goto LABEL_365;
      v127 = v126;
      if ((*(_DWORD *)(v126 + 28) & 0x7Fu) - 35 > 2 || (*(_DWORD *)(v126 + 72) & 0xE000) == 0x4000)
        goto LABEL_365;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v126 + 104) + 96), *(_QWORD *)(v126 + 104));
      v10 = (**(_QWORD **)(v127 + 128) >> 10) & 1;
      return v10 & 1;
    case 0x19u:
      v74 = sub_22F1120D0(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
      goto LABEL_364;
    case 0x1Au:
      v74 = sub_22F111768(&v214, v9);
      goto LABEL_364;
    case 0x1Bu:
      v74 = sub_22F111968(&v214, v9);
      goto LABEL_364;
    case 0x1Cu:
      v74 = sub_22F10E06C(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
      goto LABEL_364;
    case 0x1Du:
      v74 = sub_22EF5D3C4(v0[11], v7);
      goto LABEL_364;
    case 0x1Eu:
      v146 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF0);
      if (sub_22F110E9C(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0)))
        goto LABEL_305;
      goto LABEL_365;
    case 0x1Fu:
      v74 = sub_22F10E0EC(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
      goto LABEL_364;
    case 0x20u:
      v74 = sub_22F110744(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0), v9);
      goto LABEL_364;
    case 0x21u:
      v99 = sub_22F1110EC(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0), 0);
      goto LABEL_150;
    case 0x22u:
      v90 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v90)
        v91 = *(_DWORD *)(v90 + 16) == 11;
      else
        v91 = 0;
      if (!v91)
        goto LABEL_365;
      v77 = *(_DWORD *)(v90 + 16) & 0xFF80000;
      v78 = 86507520;
      goto LABEL_137;
    case 0x23u:
      v83 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                       + 16) & 0xFEu)
          - 2 >= 4;
      goto LABEL_127;
    case 0x24u:
      v83 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                             + 16)
          - 25 >= 2;
      goto LABEL_127;
    case 0x25u:
      v82 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFE;
      goto LABEL_345;
    case 0x26u:
      v82 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 16);
LABEL_345:
      v22 = v82 == 40;
      goto LABEL_346;
    case 0x27u:
      v22 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 16) == 41;
      goto LABEL_346;
    case 0x28u:
      v115 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
      v116 = *(_QWORD *)(*(_QWORD *)(v115 + 8) & 0xFFFFFFFFFFFFFFF0);
      v117 = *(_DWORD *)(v116 + 16) & 0xFF800FF;
      v119 = v117 == 86507531 || v117 == 114294795;
      if (v116 && v119)
        goto LABEL_413;
      if (!sub_22F110E9C(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0)))
        goto LABEL_365;
      v120 = *(_QWORD *)(v115 + 8);
      goto LABEL_307;
    case 0x29u:
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFE) == 0x28
        || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0)
                                                                            + 8) & 0xFFFFFFFFFFFFFFF0)
                                                    + 16)
         - 25 < 2)
      {
        goto LABEL_365;
      }
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                      + 16) != 11)
        goto LABEL_413;
      v95 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                       + 16) & 0xFF80000) == 86507520;
      goto LABEL_308;
    case 0x2Au:
      if (!sub_22F40ACB8(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0)))
        goto LABEL_401;
      v187 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v187 & 8) == 0)
        goto LABEL_413;
      v188 = (*(_DWORD *)((v187 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 6) & 7;
      if (v188 >= 5)
      {
LABEL_401:
        v189 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v88 = *(_DWORD *)(v189 + 16);
        if (v189)
          v190 = v88 == 11;
        else
          v190 = 0;
        if (v190)
        {
          v83 = ((v88 >> 19) & 0x1FF) - 166 >= 0x35;
LABEL_127:
          LOBYTE(v10) = !v83;
        }
        else if (v189 && v88 == 44)
        {
          v191 = sub_22F114198(*(_QWORD *)(v189 + 24));
          if ((*(_BYTE *)(v191 + 74) & 1) != 0)
LABEL_413:
            LOBYTE(v10) = 1;
          else
            LOBYTE(v10) = *(_QWORD *)(v191 + 128) > 7uLL;
        }
        else
        {
          if (v88 >= 0x28u)
            goto LABEL_365;
          v89 = 0x8180001600;
LABEL_261:
          v10 = (v89 >> v88) & 1;
        }
      }
      else
      {
        v138 = 3u >> v188;
LABEL_232:
        LOBYTE(v10) = v138 & 1;
      }
      return v10 & 1;
    case 0x2Bu:
      v169 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
      v170 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v169 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      if ((v170 & 0xFEu) <= 0x28 && ((1 << (v170 & 0xFE)) & 0x10000000014) != 0)
        goto LABEL_413;
      v172 = v170 - 25;
      if (v172 < 0x15u && ((0x104003u >> v172) & 1) != 0)
        goto LABEL_413;
      if (sub_22F10E06C(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0)))
        goto LABEL_413;
      v173 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v169 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      v22 = v173 == 44 || v173 == 31;
      goto LABEL_346;
    case 0x2Cu:
      v79 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 16);
      v22 = v79 == 39 || v79 == 32;
      goto LABEL_346;
    case 0x2Du:
      v174 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
      if (v174)
        v175 = *(_BYTE *)(v174 + 16) == 31;
      else
        v175 = 0;
      if (!v175)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v174 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31)
          goto LABEL_365;
        v174 = sub_22F10CF48(v174);
        if (!v174)
          goto LABEL_365;
      }
      v74 = sub_22F2559E0(v174);
      goto LABEL_364;
    case 0x2Eu:
      v167 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
      if (v167)
        v168 = *(_BYTE *)(v167 + 16) == 31;
      else
        v168 = 0;
      if (!v168)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v167 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31)
          goto LABEL_365;
        v167 = sub_22F10CF48(v167);
        if (!v167)
          goto LABEL_365;
      }
      v74 = sub_22F28C8B4(v167);
      goto LABEL_364;
    case 0x2Fu:
      v22 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 16) == 31;
      goto LABEL_346;
    case 0x30u:
      if ((v7 & 1) != 0)
        goto LABEL_413;
      LOBYTE(v138) = *(_BYTE *)((v7 & 0xFFFFFFFFFFFFFFF0) + 8);
      goto LABEL_232;
    case 0x31u:
      if ((v7 & 4) != 0)
        goto LABEL_413;
      LODWORD(v10) = (*(unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
      return v10 & 1;
    case 0x32u:
      v80 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
      if (sub_22F10E0EC(v80))
        goto LABEL_413;
      if (!sub_22F110930(v80))
        goto LABEL_365;
      v81 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
LABEL_306:
      v120 = *(_QWORD *)(v81 + 8);
LABEL_307:
      v95 = *(_BYTE *)(*(_QWORD *)(v120 & 0xFFFFFFFFFFFFFFF0) + 16) == 44;
LABEL_308:
      LOBYTE(v10) = !v95;
      return v10 & 1;
    case 0x33u:
      v146 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF0);
      if (!sub_22F110B50(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0)))
        goto LABEL_365;
LABEL_305:
      v81 = *v146;
      goto LABEL_306;
    case 0x34u:
      v74 = sub_22F320D00((uint64_t)v0, v7, v2);
      goto LABEL_364;
    case 0x35u:
      v74 = sub_22EA4F714((uint64_t)v0, v7, v2);
      goto LABEL_364;
    case 0x36u:
      v74 = sub_22EA4F914((uint64_t)v0, v7);
      goto LABEL_364;
    case 0x37u:
      v75 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v75)
        v76 = *(_DWORD *)(v75 + 16) == 11;
      else
        v76 = 0;
      if (!v76)
        goto LABEL_365;
      v77 = *(_DWORD *)(v75 + 16) & 0xFF80000;
      v78 = 110624768;
LABEL_137:
      v22 = v77 == v78;
      goto LABEL_346;
    case 0x38u:
      v74 = sub_22F10BE84(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0), v9);
      goto LABEL_364;
    case 0x39u:
      v74 = sub_22EA52D74(v0, v7, v2, 0);
      goto LABEL_364;
    case 0x3Au:
      v84 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
      v85 = sub_22E3E4B64(v84);
      if (v85 && (*(_DWORD *)(v85 + 20) - 2) <= 2 && (*(_DWORD *)(v85 + 16) & 0x780000) != 0x80000)
        v84 = *(_QWORD *)(*(_QWORD *)(v85 + 32) & 0xFFFFFFFFFFFFFFF0);
      v86 = *(_QWORD *)(*(_QWORD *)(v84 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v86)
        v87 = *(_DWORD *)(v86 + 16) == 11;
      else
        v87 = 0;
      if (!v87)
        goto LABEL_365;
      v88 = ((*(_DWORD *)(v86 + 16) >> 19) & 0x1FF) - 173;
      if (v88 >= 0x27)
        goto LABEL_365;
      v89 = 0x6000000303;
      goto LABEL_261;
    case 0x3Bu:
      v74 = sub_22EA52F00(v0, v7, v2);
      goto LABEL_364;
    case 0x3Cu:
      v186 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
      if ((sub_22F408D68(v186) & 1) != 0
        || (sub_22F10BF84(v186) & 0xFF00000000) != 0
        || (sub_22F408E0C(v186) & 1) != 0
        || (sub_22F408EBC(v186) & 1) != 0
        || (sub_22F408F60(v186) & 1) != 0
        || (sub_22F40900C(v186) & 1) != 0
        || (sub_22F4090B8(v186) & 1) != 0)
      {
        goto LABEL_413;
      }
      v74 = sub_22F409168(v186);
      goto LABEL_364;
    case 0x3Du:
      v176 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v176)
        v177 = (*(_DWORD *)(v176 + 16) & 0xFF800FF) == 86507531;
      else
        v177 = 0;
      if (v177)
        goto LABEL_413;
      v74 = sub_22EA53C48(v7);
      goto LABEL_364;
    case 0x3Eu:
      if ((sub_22E536DC0(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
        goto LABEL_413;
      v74 = sub_22EA53D88(v7);
      goto LABEL_364;
    case 0x3Fu:
      v74 = sub_22EA54118((uint64_t)v0, v7);
      goto LABEL_364;
    case 0x40u:
      __break(1u);
      JUMPOUT(0x22EBC8A50);
    case 0x41u:
      v74 = sub_22EA4F998((uint64_t)v0, v7);
      goto LABEL_364;
    default:
      v23 = v3;
      v200 = (uint64_t)v0;
      if (v1 <= 0x4C && v1 != 72)
      {
        v24 = **(_QWORD **)v7;
        v25 = **(_QWORD **)(v7 + 8);
        v201[0] = v24;
        v205 = v25;
        __asm { BR              X10 }
      }
      v198 = (char *)(v0 + 1333);
      v199 = v2;
      v197 = v4;
      if (!v3)
        goto LABEL_39;
      v26 = 8 * v3;
      v27 = (uint64_t **)v7;
      do
      {
        v28 = **v27;
        v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v30 = *(_DWORD *)(v29 + 16);
        if (v29)
          v31 = (v30 & 0xFF800FF) == 86507531;
        else
          v31 = 0;
        v32 = v31;
        if (v30 != 4 && (v32 & 1) == 0)
        {
          v214 = (unint64_t)&unk_24FAB6EF8;
          LODWORD(v215) = 3593;
          if ((sub_22EE8B0B0(v200, v199, v28) & 1) != 0)
            goto LABEL_365;
        }
        ++v27;
        v26 -= 8;
      }
      while (v26);
LABEL_39:
      v33 = (uint64_t *)(**(_QWORD **)v7 & 0xFFFFFFFFFFFFFFF0);
      if ((sub_22F1110EC(*v33, 0) & 1) != 0)
        goto LABEL_365;
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 < 2)
        goto LABEL_365;
      v34 = sub_22F10C2A4(*v33);
      if (v34)
      {
        v35 = v34;
        if ((*(_DWORD *)(v34 + 28) & 0x7Fu) - 35 <= 2)
        {
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v34 + 104) + 96), *(_QWORD *)(v34 + 104));
          if ((**(_QWORD **)(v35 + 128) & 0x800) != 0)
            goto LABEL_365;
        }
      }
      v193 = v33;
      v211[0] = 0;
      v211[1] = 0;
      v211[2] = v212;
      v211[3] = 0x400000000;
      v212[4] = v213;
      v212[5] = 0;
      v213[0] = 0;
      v213[1] = 1;
      v208 = v210;
      v209 = 0x200000000;
      if ((unint64_t)(v23 - 1) >= 3)
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      if ((_DWORD)v23 == 1)
        goto LABEL_47;
      v60 = 1;
      break;
  }
  do
  {
    v61 = **(_QWORD **)(v7 + 8 * v60);
    v214 = v61;
    v62 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v61 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16);
    v63 = v62 - 25;
    if ((v62 & 0xFE) == 0x28)
    {
      if (v63 > 1)
        goto LABEL_79;
    }
    else if ((v62 & 0xFF800FF) == 0x528000B && v63 >= 2)
    {
      goto LABEL_79;
    }
    v61 = sub_22EF5FB8C(*(_QWORD *)(v200 + 88), v61);
    v214 = v61;
LABEL_79:
    v65 = sub_22E3CD3D4((uint64_t)v211, 24, 3);
    v66 = **(_QWORD **)(v7 + 8 * v60);
    for (i = v66; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_90;
        v68 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v68 <= 0x39)
          break;
LABEL_85:
        if (sub_22F115668(i))
          v66 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_92;
      }
      if (v68 == 24)
        goto LABEL_91;
      if (v68 == 26)
        break;
      if (((1 << v68) & 0x20000000200003CLL) == 0)
        goto LABEL_85;
LABEL_90:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_90;
LABEL_91:
    v66 = i;
LABEL_92:
    v69 = sub_22F115668(v66);
    v70 = sub_22F1133DC((uint64_t *)&v214, *(_QWORD *)(v200 + 88));
    v71 = sub_22E8BBBD0(v61);
    sub_22E5BBE34(v65, v69, v70, v71, 0, 0);
    v72 = v209;
    if (v209 >= (unint64_t)HIDWORD(v209))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v72 = v209;
    }
    *((_QWORD *)v208 + v72) = v65;
    LODWORD(v209) = v209 + 1;
    ++v60;
  }
  while ((_DWORD)v60 != (_DWORD)v23);
LABEL_47:
  LODWORD(v206) = 0;
  v214 = 0;
  LODWORD(v201[0]) = 3;
  v202[0] = *(unsigned int *)(v200 + 1704);
  sub_22EB4DDB8(v200 + 3688, (int *)&v206, (int *)v202, (__int16 *)(v200 + 1693), (uint64_t *)&v214, (int *)v201);
  v36 = *(unsigned int *)(v200 + 3696);
  v37 = v36 - 2;
  v38 = *(_QWORD *)(v200 + 3688);
  v39 = *(_DWORD *)(v38 + 576 * (v36 - 2));
  if (v39 == 5)
  {
    *(_BYTE *)(v38 + 576 * v36 - 4) = *(_BYTE *)(v38 + 576 * v37 + 572);
    v41 = 1;
    v40 = v198;
  }
  else
  {
    v40 = v198;
    if (v39 == 2)
    {
      *(_BYTE *)(v38 + 576 * v36 - 4) = 1;
      v41 = *(_BYTE *)(v38 + 576 * v37 + 573) != 0;
    }
    else
    {
      v41 = 0;
      *(_BYTE *)(v38 + 576 * v36 - 4) = 0;
    }
  }
  v42 = v38 + 576 * v36;
  *(_BYTE *)(v42 - 3) = v41;
  *(_WORD *)(v200 + 1693) = 0;
  if (*(_DWORD *)(v200 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v200 + 1776), (llvm::SmallPtrSetImplBase *)(v42 - 560));
    sub_22EAEAE08(v200 + 1840, (uint64_t *)(v42 - 496));
    v40 = v198;
  }
  v43 = *(_DWORD *)(v200 + 8456);
  v44 = v40[1288];
  v45 = *v40;
  v46 = *(_DWORD *)(*(_QWORD *)(v200 + 104) + 180);
  sub_22EE03478(v200);
  if (!v47)
    v198[1288] = 1;
  *v198 = 1;
  v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v200 + 88) + 1960) + 80);
  v49 = sub_22E3CD31C((uint64_t *)(v48 + 72), v48);
  v50 = v49 + 40;
  if (!v49)
    v50 = 0;
  v51 = *(_QWORD *)(v200 + 216);
  v196 = *(_QWORD *)(v200 + 3200);
  *(_QWORD *)(v200 + 3200) = 0;
  v52 = *(_QWORD *)(v200 + 10288);
  v194 = *(_DWORD *)(v200 + 2192);
  v195 = *(_DWORD *)(v200 + 1944);
  *(_QWORD *)(v200 + 216) = v50;
  *(_QWORD *)(v200 + 10288) = 0;
  *(_DWORD *)(v200 + 1944) = *(_DWORD *)(v200 + 1904);
  *(_DWORD *)(v200 + 2192) = *(_DWORD *)(v200 + 1960);
  v53 = *(_QWORD *)(v200 + 88);
  v54 = *(uint64_t **)v7;
  v55 = **(_QWORD **)v7;
  if ((*(_BYTE *)(*(_QWORD *)(v53 + 2000) + 60) & 1) != 0)
    v55 = sub_22EF5DD84(v53, v55, 4);
  LODWORD(v202[0]) = 9;
  v202[1] = 0;
  v202[2] = v55;
  v203 = 0;
  v204 = v54;
  v201[0] = v199 << 32;
  v201[1] = v199 | ((unint64_t)v197 << 32);
  sub_22EC395BC(&v214, v200, v202, v201, v208, v209, 0, 1);
  if (!(_DWORD)v214)
    goto LABEL_373;
  v56 = sub_22EC3DF80((int)&v214, v200);
  v57 = v56;
  LOBYTE(v10) = 0;
  if ((v56 & 1) != 0 || *(_DWORD *)(v200 + 8456) > v43)
    goto LABEL_378;
  if (v5 == 78)
  {
    sub_22EB17190(v200, v56 & 0xFFFFFFFFFFFFFFFELL);
    v180 = v179 == 0;
    goto LABEL_375;
  }
  if (v5 == 77)
  {
LABEL_69:
    LOBYTE(v10) = 1;
    goto LABEL_378;
  }
  if (v5 != 72)
  {
    v181 = *v193;
    if (!*v193 || (v182 = *(_DWORD *)(v181 + 16), (v182 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v181 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
        || (v181 = sub_22F10CF48(v181)) == 0)
      {
LABEL_371:
        v183 = v193[1];
        if ((v183 & 8) != 0 && (*(_WORD *)((v183 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x180) != 0)
          goto LABEL_373;
        v206 = *(_QWORD *)(v200 + 88);
        v207 = 0;
        sub_22F0015B4((uint64_t)&v206, (_DWORD *)(v57 & 0xFFFFFFFFFFFFFFFELL));
        v180 = v207 == 0;
LABEL_375:
        LOBYTE(v10) = v180;
        goto LABEL_378;
      }
      v182 = *(_DWORD *)(v181 + 16);
    }
    if ((v182 & 0x100000) != 0)
    {
      do
      {
        v181 = *(_QWORD *)(*(_QWORD *)(v181 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v181)
        {
          v192 = *(_DWORD *)(v181 + 16);
          if ((v192 & 0xFE) == 0x28)
            continue;
        }
        v181 = sub_22F10CF48(v181);
        v192 = *(_DWORD *)(v181 + 16);
      }
      while ((v192 & 0x100000) != 0);
    }
    v193 = (uint64_t *)(*(_QWORD *)(v181 + 32) & 0xFFFFFFFFFFFFFFF0);
    goto LABEL_371;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v193 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
  {
LABEL_373:
    LOBYTE(v10) = 0;
    goto LABEL_378;
  }
  v58 = 40 * v216;
  while (1)
  {
    LOBYTE(v10) = v58 == 0;
    if (!v58)
      break;
    v59 = *(_DWORD *)(v215 - 40 + v58);
    if (v59 == 4)
      break;
    v58 -= 40;
    if (v59 == 5)
      goto LABEL_69;
  }
LABEL_378:
  sub_22EC3CE2C((uint64_t)&v214);
  if (v51)
  {
    *(_QWORD *)(v200 + 216) = v51;
    *(_QWORD *)(v200 + 3200) = v196;
    *(_QWORD *)(v200 + 10288) = v52;
    *(_DWORD *)(v200 + 1944) = v195;
    *(_DWORD *)(v200 + 2192) = v194;
  }
  *(_DWORD *)(v200 + 8456) = v43;
  v198[1288] = v44;
  *v198 = v45;
  v184 = *(_QWORD *)(v200 + 104);
  if (*(_DWORD *)(v184 + 180) == 5)
    *(_BYTE *)(v184 + 170) = 1;
  if (v46)
    v185 = 3;
  else
    v185 = 0;
  *(_DWORD *)(v184 + 180) = v185;
  sub_22EB48E64(v200);
  if (v208 != v210)
    free(v208);
  sub_22E3B4EF4((uint64_t)v211);
  return v10 & 1;
}

uint64_t sub_22EBC8B4C(_QWORD *a1, int a2, int a3, unint64_t *a4, uint64_t a5, int a6)
{
  char v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  int v23;
  unint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (**v30)();
  char v31;
  int v32;
  uint64_t **v33;
  unsigned int v34;
  char v35;

  v9 = a2;
  v11 = *a4;
  v12 = *a4 & 0xFFFFFFFFFFFFFFF0;
  if ((*(_BYTE *)(*(_QWORD *)v12 + 17) & 4) != 0)
    goto LABEL_5;
  if (a2)
  {
    v34 = 1;
    v33 = 0;
    v35 = 0;
    v31 = 0;
    v30 = off_24FAB8300;
    v32 = 3267;
    v15 = 0;
    if ((sub_22EB4CB24(a1, a5, &v33, &v30, 0) & 1) == 0)
    {
      if (v35)
        goto LABEL_12;
      v19 = (uint64_t **)&v33;
      if (v34 >= 0x41)
        v19 = &v33[(v34 - 1) >> 6];
      if ((((unint64_t)*v19 >> (v34 - 1)) & 1) != 0)
      {
        sub_22E8FCA40(a1, a3, 0xCC3u, 0, (uint64_t)&v30);
        sub_22F0D4E74(a5);
        v29 = v28;
        sub_22E8906A0((uint64_t)&v30, &v29);
        sub_22E903BEC((unsigned int *)&v30);
      }
      else
      {
LABEL_12:
        v20 = sub_22E5FA634(&v33, 0xFFFFFFFFFFFFFFFFLL);
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
        {
          v21 = v20;
          v22 = sub_22EF5C728(a1[11], v11);
          if (v22)
          {
            if (v21)
            {
              v23 = 1;
              do
              {
                v11 = *(_QWORD *)(v22 + 32);
                v22 = sub_22EF5C728(a1[11], v11);
                if (!v22)
                  goto LABEL_29;
              }
              while (v21 != (uint64_t *)v23++);
            }
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 16) & 0xFEu)
               - 2 <= 3)
            {
              v25 = sub_22EF5C728(a1[11], v11);
              if (v25)
              {
                if (*(_BYTE *)(v25 + 16) == 2)
                {
                  v26 = (uint64_t *)(v25 + 40);
                  v27 = *(_DWORD *)(v25 + 48);
                  if (v27 >= 0x41)
                  {
                    if (v27 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v25 + 40)) > 0x40)
                    {
                      v15 = -1;
                      goto LABEL_30;
                    }
                    v26 = (uint64_t *)*v26;
                  }
                  v15 = *v26;
                  goto LABEL_30;
                }
              }
            }
          }
        }
      }
LABEL_29:
      v15 = 0;
    }
LABEL_30:
    if (v34 >= 0x41 && v33)
      MEMORY[0x2348A0E84](v33, 0x1000C8000313F17);
    goto LABEL_6;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3
    || (v14 = sub_22EF5C728(a1[11], *a4)) == 0)
  {
LABEL_5:
    v15 = 0;
    goto LABEL_6;
  }
  LODWORD(v15) = 0;
  do
  {
    v15 = (v15 + 1);
    v14 = sub_22EF5C728(a1[11], *(_QWORD *)(v14 + 32));
  }
  while (v14);
LABEL_6:
  v16 = sub_22E3CD3D4(a1[11] + 2032, 56, 3);
  v17 = sub_22EF67C8C(a1[11]);
  return sub_22F33340C(v16, a3, v9, (uint64_t)a4, v15, a5, a6, v17);
}

uint64_t sub_22EBC8E1C(uint64_t a1, int a2, int a3, unint64_t a4, int a5)
{
  int v5;
  unint64_t v6;
  int v7;
  int v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _BOOL4 v19;

  v5 = a5;
  v6 = a4;
  v7 = a3;
  v10 = *(_DWORD *)a4;
  if ((*(_DWORD *)a4 & 0x8000) == 0
    && ((v11 = *(_QWORD *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF0), (*(_DWORD *)(v11 + 16) & 0xFE00000u) >= 0x8180001)
      ? (v12 = v11 == 0)
      : (v12 = 1),
        !v12 ? (v13 = *(_DWORD *)(v11 + 16) == 11) : (v13 = 0),
        v13))
  {
    v7 = a3;
    v5 = a5;
    v14 = 1;
    while (1)
    {
      v15 = sub_22EB19A28(a1);
      if ((v15 & 1) != 0)
        break;
      v6 = v15 & 0xFFFFFFFFFFFFFFFELL;
      v10 = *(_DWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v10 & 0x8000) == 0)
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0);
        v17 = (*(_DWORD *)(v16 + 16) & 0xFE00000u) < 0x8180001 || v16 == 0;
        if (!v17 && *(_DWORD *)(v16 + 16) == 11)
          continue;
      }
      goto LABEL_20;
    }
  }
  else
  {
LABEL_20:
    v19 = (v10 & 0x300) == (a2 == 0) << 8;
    v14 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
    sub_22F3334C8(v14, v7, a2, v6, v19, v5, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16400));
  }
  return v14;
}

unint64_t sub_22EBC8F38(uint64_t a1, uint64_t *a2, uint64_t *a3, int *a4, unsigned int a5, int a6)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  _DWORD *v42;
  unsigned __int8 *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  BOOL v51;
  unsigned int v52;
  unsigned int *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  _BYTE v60[96];
  unint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  void *__p;
  uint64_t v66;
  uint64_t v67;
  char v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  unsigned __int8 v73;
  uint64_t (**v74)();
  uint64_t v75;
  _QWORD v76[12];

  v76[10] = *MEMORY[0x24BDAC8D0];
  v73 = a6;
  v12 = *a2;
  v13 = *a2 & 0xFFFFFFFFFFFFFFFELL;
  if (a6)
  {
    v12 = sub_22EB1A358(a1, v13, 0);
  }
  else
  {
    if ((*(_BYTE *)(v13 + 1) & 3) != 0)
      goto LABEL_5;
    v12 = sub_22F335E6C(a1, v13);
  }
  *a2 = v12;
LABEL_5:
  if ((v12 & 1) != 0)
    return 0;
  v14 = sub_22EB1A358(a1, *a3 & 0xFFFFFFFFFFFFFFFELL, 0);
  *a3 = v14;
  if ((v14 & 1) != 0)
    return 0;
  v15 = ".*";
  if (a6)
    v15 = "->*";
  v72 = v15;
  v71 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v16 = *(_QWORD *)(v71 & 0xFFFFFFFFFFFFFFF0);
  if (v16)
    v17 = *(_BYTE *)(v16 + 16) == 31;
  else
    v17 = 0;
  if (!v17
    && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31
     || (v16 = sub_22F10CF48(*(_QWORD *)(v71 & 0xFFFFFFFFFFFFFFF0))) == 0))
  {
    sub_22E8FCA40((_QWORD *)a1, a5, 0xB68u, 0, (uint64_t)&v74);
    v29 = sub_22E96133C((uint64_t)&v74, (uint64_t *)&v72);
    v30 = sub_22E8901B8(v29, &v71);
    sub_22F0D4E74(*a3 & 0xFFFFFFFFFFFFFFFELL);
    v61 = v31;
    sub_22E8906A0(v30, (uint64_t *)&v61);
    goto LABEL_28;
  }
  v18 = *(_QWORD *)(v16 + 40);
  v19 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v70 = v19;
  if (a6)
  {
    v20 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
    if ((!v20 || *(_BYTE *)(v20 + 16) != 39)
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
       || (v20 = sub_22F10CF48(v20)) == 0))
    {
      sub_22E8FCA40((_QWORD *)a1, a5, 0xB67u, 0, (uint64_t)&v74);
      v33 = sub_22E96133C((uint64_t)&v74, (uint64_t *)&v72);
      v69 = 1;
      v34 = sub_22E8900C4(v33, &v69);
      v35 = sub_22E8901B8(v34, &v70);
      v64 = 0;
      v63 = 0;
      v66 = 0;
      v67 = 0x200000000000000;
      v68 = 0;
      v61 = a5 | ((unint64_t)a5 << 32);
      v62 = 1;
      __p = (void *)10798;
      sub_22E890748(v35, &v61);
      if (SHIBYTE(v67) < 0)
        operator delete(__p);
      goto LABEL_28;
    }
    v19 = *(_QWORD *)(v20 + 32);
    v70 = v19;
  }
  v21 = v18 & 0xFFFFFFFFFFFFFFF0;
  v22 = v19 & 0xFFFFFFFFFFFFFFF0;
  if (*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFF0)
                                                                                         + 8) & 0xFFFFFFFFFFFFFFF0))
  {
    LODWORD(v61) = a6;
    v74 = off_24FAB8600;
    LODWORD(v75) = 2919;
    v76[0] = &v72;
    v76[1] = &v61;
    if ((sub_22EE8B0B0(a1, a5, v19) & 1) != 0)
      return 0;
    if ((sub_22EAAB1B8(a1, a5, v19, v21) & 1) != 0)
    {
      v74 = (uint64_t (**)())v76;
      v75 = 0x400000000;
      sub_22F0D5A50(*a2 & 0xFFFFFFFFFFFFFFFELL);
      v58 = v23;
      sub_22F0D60E4(*a3 & 0xFFFFFFFFFFFFFFFELL);
      v25 = sub_22EAAB46C(a1, v19, v21, 5082, 0xA41u, a5, v58 | (unint64_t)(v24 << 32), 0, (uint64_t)&v74, 0);
      if ((v25 & 1) == 0)
      {
        v26 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v26 & 8) != 0)
        {
          v28 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          v27 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
        }
        else
        {
          v27 = 0;
          v28 = 0;
        }
        v38 = v28 | (v26 | v19) & 7;
        if (((v38 | v27) & 0xCFFFFFFF8) != 0)
        {
          v59 = *(_QWORD *)(a1 + 88);
          v61 = v38 | v27;
          v39 = sub_22E491354((unsigned int *)&v61, v21);
          v40 = sub_22EF5DBC4(v59, v39, v61);
        }
        else
        {
          v40 = v38 & 7 | v21;
        }
        if (a6)
        {
          v40 = sub_22EF5B848(*(_QWORD *)(a1 + 88), v40, 0);
          v41 = 0;
          v42 = (_DWORD *)(*a2 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          v42 = (_DWORD *)(*a2 & 0xFFFFFFFFFFFFFFFELL);
          v41 = (*v42 >> 8) & 3;
        }
        *a2 = sub_22E90092C(a1, (uint64_t)v42, v40, 7, v41, (uint64_t)&v74);
      }
      if (v74 != v76)
        free(v74);
      v22 = v19 & 0xFFFFFFFFFFFFFFF0;
      if ((v25 & 1) == 0)
        goto LABEL_45;
      return 0;
    }
    sub_22E8FCA40((_QWORD *)a1, a5, 0xB67u, 0, (uint64_t)&v74);
    v36 = sub_22E96133C((uint64_t)&v74, (uint64_t *)&v72);
    v69 = a6;
    v37 = sub_22E8900C4(v36, &v69);
    v61 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8);
    sub_22E8901B8(v37, (uint64_t *)&v61);
LABEL_28:
    sub_22E903BEC((unsigned int *)&v74);
    return 0;
  }
LABEL_45:
  v43 = (unsigned __int8 *)(*a3 & 0xFFFFFFFFFFFFFFFELL);
  do
  {
    v44 = *v43;
    if (v44 > 0xD5)
    {
      if (v44 == 233)
      {
        if ((*(_DWORD *)v43 & 0x7C0000) != 0x300000)
          goto LABEL_64;
        v44 = *(_DWORD *)v43;
        v46 = v43 + 16;
      }
      else
      {
        if (v44 != 214)
          break;
        v46 = v43 + 24;
      }
    }
    else if (v44 == 155)
    {
      if ((**((_DWORD **)v43 + 2) & 0x18000) != 0)
        goto LABEL_64;
      v46 = v43 + 24;
      if (!v43[48])
        v46 = v43 + 32;
      v44 = 155;
    }
    else
    {
      if (v44 != 176)
        break;
      v45 = *((unsigned int *)v43 + 5);
      if ((_DWORD)v45 == -1)
        goto LABEL_64;
      v46 = &v43[8 * v45 + 40];
      v44 = 176;
    }
    v47 = *(unsigned __int8 **)v46;
    v17 = v47 == v43;
    v43 = v47;
  }
  while (!v17);
  if (v44 == 131)
  {
    sub_22E8FCA40((_QWORD *)a1, a5, 0x11AAu, 0, (uint64_t)&v74);
    sub_22E894E38((uint64_t)&v74, &v73);
    goto LABEL_28;
  }
LABEL_64:
  v48 = *(_QWORD *)(v16 + 32);
  v49 = *(_DWORD *)(v22 + 8);
  v50 = *(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0);
  if (v50)
    v51 = *(_BYTE *)(v50 + 16) == 26;
  else
    v51 = 0;
  if (!v51)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v50 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      goto LABEL_86;
    v50 = sub_22F10CF48(*(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0));
    if (!v50)
      goto LABEL_86;
  }
  if ((*(_DWORD *)(v50 + 20) & 3) == 2)
  {
    if ((a6 & 1) != 0 || !(unsigned __int16)sub_22F003E64(*a2 & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)(a1 + 88), 0))
    {
      sub_22E8FCA40((_QWORD *)a1, a5, 0x11A9u, 0, (uint64_t)&v74);
      v54 = sub_22E8901B8((uint64_t)&v74, &v71);
      v69 = 0;
      goto LABEL_84;
    }
  }
  else if ((*(_DWORD *)(v50 + 20) & 3) == 1
         && (a6 & 1) == 0
         && (unsigned __int16)sub_22F003E64(*a2 & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)(a1 + 88), 0))
  {
    if ((sub_22E47E20C(v50) & 1) != 0 && (sub_22E47E20C(v50) & 4) == 0)
    {
      if ((**(_QWORD **)(a1 + 72) & 0x1000) != 0)
        v52 = 6417;
      else
        v52 = 5334;
      sub_22E8FCA40((_QWORD *)a1, a5, v52, 0, (uint64_t)v60);
      v53 = (unsigned int *)v60;
      goto LABEL_85;
    }
    sub_22E8FCA40((_QWORD *)a1, a5, 0x11A9u, 0, (uint64_t)&v74);
    v54 = sub_22E8901B8((uint64_t)&v74, &v71);
    v69 = 1;
LABEL_84:
    v55 = sub_22E8900C4(v54, &v69);
    sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
    v61 = v56;
    sub_22E8906A0(v55, (uint64_t *)&v61);
    v53 = (unsigned int *)&v74;
LABEL_85:
    sub_22E903BEC(v53);
  }
LABEL_86:
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 25 > 1)
  {
    result = (v49 | v19) & 7 | v48;
    if ((a6 & 1) != 0)
      v57 = 1;
    else
      v57 = (*(_DWORD *)(*a2 & 0xFFFFFFFFFFFFFFFELL) >> 8) & 3;
    *a4 = v57;
  }
  else
  {
    *a4 = 0;
    return *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16848);
  }
  return result;
}

uint64_t sub_22EBC96A0()
{
  uint64_t v0;
  unsigned int v1;
  unsigned int v2;
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  _BOOL4 v15;
  _BYTE *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  _BOOL4 v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  _BOOL4 v32;
  int v33;
  _BOOL4 v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  int v73;
  unsigned int v74;
  int v76;
  int v77;
  _DWORD *v78;
  _DWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  _QWORD *v84;
  int v85;
  unsigned int v86;
  _DWORD *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  int v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130[12];
  uint64_t v131;
  unint64_t v132;
  _QWORD *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  _OWORD *v139;
  _OWORD *v140;
  uint64_t v141;
  int v142;
  _OWORD v143[9];
  _QWORD *v144;
  uint64_t v145;
  _QWORD v146[6];
  _QWORD v147[2];
  unsigned int v148;
  int v149;
  uint64_t v150;
  int v151;
  int v152;
  uint64_t v153[4];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = (_QWORD *)v0;
  v153[2] = *MEMORY[0x24BDAC8D0];
  *v5 = 0;
  *v3 = 0;
  v14 = *v11 & 0xFFFFFFFFFFFFFFFELL;
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 55 > 1)
  {
    if ((*(_BYTE *)(v14 + 1) & 0x80) == 0)
      goto LABEL_7;
    return *(_QWORD *)(v13[11] + 16832);
  }
  v15 = sub_22F110744(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)+ 32) & 0xFFFFFFFFFFFFFFF0), *(_QWORD *)(v0 + 88));
  v16 = (_BYTE *)(*v12 & 0xFFFFFFFFFFFFFFFELL);
  if ((v16[1] & 0x80) != 0)
    return *(_QWORD *)(v13[11] + 16832);
  if (v15)
  {
    v17 = 1;
    v18 = sub_22EB1B954((uint64_t)v13, v16);
    if ((v18 & 1) != 0)
      return 0;
    goto LABEL_8;
  }
LABEL_7:
  v18 = sub_22ED025A8(v13);
  v17 = 0;
  if ((v18 & 1) != 0)
    return 0;
LABEL_8:
  *v12 = v18;
  v19 = *v10 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_BYTE *)(v19 + 1) & 0x80) != 0)
    return *(_QWORD *)(v13[11] + 16832);
  v20 = *v8 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_BYTE *)(v20 + 1) & 0x80) != 0)
    return *(_QWORD *)(v13[11] + 16832);
  v124 = v8;
  v125 = v10;
  v21 = *(_QWORD *)(v19 + 8);
  v22 = *(_QWORD *)(v20 + 8);
  v126 = v22;
  v127 = v21;
  v23 = v21 & 0xFFFFFFFFFFFFFFF0;
  v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_DWORD *)(v24 + 16);
  if (v24)
    v26 = v25 == 11;
  else
    v26 = 0;
  v27 = v26 && (*(_DWORD *)(v24 + 16) & 0xFF80000) == 86507520;
  v28 = v22 & 0xFFFFFFFFFFFFFFF0;
  v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v30 = *(_DWORD *)(v29 + 16);
  if (v29)
    v31 = v30 == 11;
  else
    v31 = 0;
  v32 = v31 && (*(_DWORD *)(v29 + 16) & 0xFF80000) == 86507520;
  if (!v27 && !v32)
  {
    if (v17)
    {
      *v125 = sub_22EB1B954((uint64_t)v13, (void *)v19);
      *v124 = sub_22EB1B954((uint64_t)v13, (void *)(*v124 & 0xFFFFFFFFFFFFFFFELL));
      v130[0] = *(_QWORD *)((*v12 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v40 = *(_QWORD *)(v130[0] & 0xFFFFFFFFFFFFFFF0);
      if (!v40 || *(unsigned __int8 *)(v40 + 16) - 57 <= 0xFFFFFFFD)
        v40 = sub_22F10CF48(v40);
      v122 = *(_QWORD *)(v40 + 32);
      v123 = *(_DWORD *)(v40 + 20);
      v39 = *(_QWORD *)((*v125 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v153[0] = v39;
      v41 = sub_22E3E4B64(*(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0));
      v42 = *(_QWORD *)((*v124 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v133 = (_QWORD *)v42;
      v43 = sub_22E3E4B64(*(_QWORD *)(v42 & 0xFFFFFFFFFFFFFFF0));
      if (v41 && v43)
      {
        if ((*(_BYTE *)(v40 + 16) == 56) != (*(_BYTE *)(v41 + 16) == 56))
        {
          sub_22E8FCA40(v13, v2, 0xBEFu, 0, (uint64_t)&v134);
          LOBYTE(v132) = *(_BYTE *)(v40 + 16) == 56;
          sub_22E894E38((uint64_t)&v134, (unsigned __int8 *)&v132);
LABEL_91:
          sub_22E903BEC((unsigned int *)&v134);
          return 0;
        }
        if ((*(_QWORD *)((v39 & 0xFFFFFFFFFFFFFFF0) + 8) | v39 & 7) != (*(_QWORD *)((v42 & 0xFFFFFFFFFFFFFFF0) + 8) | v42 & 7))
        {
          sub_22E8FCA40(v13, v2, 0xBF2u, 0, (uint64_t)&v134);
          v57 = (unint64_t *)sub_22E8901B8((uint64_t)&v134, v153);
          v58 = (uint64_t *)&v133;
          goto LABEL_90;
        }
        v132 = v39;
      }
      else if (v41 | v43)
      {
        v39 = sub_22EB36814(v13, v125, v124, v2, 0, 1, 0, 1, 1);
        v132 = v39;
        if (v39 < 0x10)
          return 0;
      }
      else
      {
        v52 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFFF0) + 8);
        v53 = *(_QWORD *)(v52 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v53 + 8) & 0xF) != 0)
          v53 = (unint64_t)sub_22F10D2BC(v52 | v39 & 7);
        v54 = v53 & 0xFFFFFFFFFFFFFFF0;
        v55 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFFFF0) + 8);
        v56 = *(_QWORD *)(v55 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v56 + 8) & 0xF) != 0)
          v56 = (unint64_t)sub_22F10D2BC(v55 | v42 & 7);
        if (*(_QWORD *)(v54 + 8) != *(_QWORD *)((v56 & 0xFFFFFFFFFFFFFFF0) + 8))
          v54 = sub_22EB1F050((uint64_t)v13, v125, v124, v2, 3);
        v131 = v54;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) == 44)
        {
          sub_22E8FCA40(v13, v2, 0xBF3u, 0, (uint64_t)&v134);
          v57 = &v134;
          v58 = &v131;
LABEL_90:
          sub_22E8901B8((uint64_t)v57, v58);
          goto LABEL_91;
        }
        v67 = v13[11];
        v68 = *(unsigned int *)(v40 + 20);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v130[0] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) == 56)
          v69 = sub_22EF63724(v67, v54, v68, 0);
        else
          v69 = sub_22F36B7E4(v67, v54, v68, 0);
        v39 = v69;
        v132 = v69;
        *v125 = sub_22E90092C((uint64_t)v13, *v125 & 0xFFFFFFFFFFFFFFFELL, v69, 27, 0, 0);
        *v124 = sub_22E90092C((uint64_t)v13, *v124 & 0xFFFFFFFFFFFFFFFELL, v39, 27, 0, 0);
      }
      v70 = *(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0);
      if (!v70 || *(unsigned __int8 *)(v70 + 16) - 57 <= 0xFFFFFFFD)
        v70 = sub_22F10CF48(v70);
      if (*(_DWORD *)(v70 + 20) == v123)
      {
        v71 = sub_22EF5CDF0(v13[11], *(_QWORD *)(*(_QWORD *)(v70 + 32) & 0xFFFFFFFFFFFFFFF0));
        if (v71 == sub_22EF5CDF0(v13[11], *(_QWORD *)(v122 & 0xFFFFFFFFFFFFFFF0)))
          return v39;
        v72 = v13;
        v73 = v2;
        v74 = 3056;
      }
      else
      {
        v72 = v13;
        v73 = v2;
        v74 = 3060;
      }
      sub_22E8FCA40(v72, v73, v74, 0, (uint64_t)&v134);
      v57 = (unint64_t *)sub_22E8901B8((uint64_t)&v134, v130);
      v58 = (uint64_t *)&v132;
      goto LABEL_90;
    }
    v45 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFF0) + 8) | v21 & 7;
    v46 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 8) | v22 & 7;
    v47 = v124;
    v48 = v125;
    if (v45 != v46 && (v25 == 45 || v30 == 45))
    {
      v130[0] = 0;
      v153[0] = 0;
      LOBYTE(v131) = 0;
      LOBYTE(v129) = 0;
      if (sub_22EBCAACC() || sub_22EBCAACC())
        return 0;
      v22 = v126;
      v21 = v127;
      v23 = v127 & 0xFFFFFFFFFFFFFFF0;
      v28 = v126 & 0xFFFFFFFFFFFFFFF0;
      v45 = *(_QWORD *)((v127 & 0xFFFFFFFFFFFFFFF0) + 8) | v127 & 7;
      v46 = *(_QWORD *)((v126 & 0xFFFFFFFFFFFFFFF0) + 8) | v126 & 7;
    }
    if (v45 != v46
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45))
    {
      v130[0] = 0;
      v153[0] = 0;
      LOBYTE(v131) = 0;
      LOBYTE(v129) = 0;
      if ((sub_22EBCB088() & 1) != 0 || (sub_22EBCB088() & 1) != 0)
        return 0;
      v21 = *(_QWORD *)((*v125 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v22 = *(_QWORD *)((*v124 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v126 = v22;
      v127 = v21;
      v23 = v21 & 0xFFFFFFFFFFFFFFF0;
      v28 = v22 & 0xFFFFFFFFFFFFFFF0;
      v45 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFF0) + 8) | v21 & 7;
      v46 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 8) | v22 & 7;
    }
    v76 = (*(_DWORD *)(*v125 & 0xFFFFFFFFFFFFFFFELL) >> 8) & 3;
    v77 = (*(_DWORD *)(*v124 & 0xFFFFFFFFFFFFFFFELL) >> 8) & 3;
    if (v45 != v46 && v76 && v76 == v77)
    {
      LODWORD(v134) = 0;
      if (sub_22ED0169C((uint64_t)v13, v2, v21, v22, (int *)&v134) != 2
        || (v134 & 0x38) != 0
        || sub_22F001E84((unsigned __int8 *)(*v124 & 0xFFFFFFFFFFFFFFFELL))
        || (v78 = (_DWORD *)(*v124 & 0xFFFFFFFFFFFFFFFELL), (*v78 & 0x1C00) == 0x400)
        || (sub_22F001B50((uint64_t)v78) & 1) != 0)
      {
        if (sub_22ED0169C((uint64_t)v13, v2, v126, v127, (int *)&v134) == 2
          && (v134 & 0x38) == 0
          && !sub_22F001E84((unsigned __int8 *)(*v125 & 0xFFFFFFFFFFFFFFFELL)))
        {
          v79 = (_DWORD *)(*v125 & 0xFFFFFFFFFFFFFFFELL);
          if ((*v79 & 0x1C00) != 0x400 && (sub_22F001B50((uint64_t)v79) & 1) == 0)
          {
            v80 = sub_22E90092C((uint64_t)v13, *v125 & 0xFFFFFFFFFFFFFFFELL, v126, 5, v76, 0);
            *v125 = v80;
            v127 = *(_QWORD *)((v80 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
        }
      }
      else
      {
        v81 = sub_22E90092C((uint64_t)v13, *v124 & 0xFFFFFFFFFFFFFFFELL, v127, 5, v76, 0);
        *v124 = v81;
        v126 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      v23 = v127 & 0xFFFFFFFFFFFFFFF0;
      v28 = v126 & 0xFFFFFFFFFFFFFFF0;
      v45 = *(_QWORD *)((v127 & 0xFFFFFFFFFFFFFFF0) + 8) | v127 & 7;
      v46 = *(_QWORD *)((v126 & 0xFFFFFFFFFFFFFFF0) + 8) | v126 & 7;
    }
    if (v45 == v46)
    {
      if (v76)
      {
        if (v76 == v77)
        {
          v87 = (_DWORD *)(*v125 & 0xFFFFFFFFFFFFFFFELL);
          if ((*v87 & 0x1800) == 0)
          {
            v88 = *v124 & 0xFFFFFFFFFFFFFFFELL;
            if ((*(_BYTE *)(v88 + 1) & 0x18) == 0)
            {
              *v6 = (*v87 >> 8) & 3;
              if ((*v87 & 0x1C00) == 0x400 || (*(_DWORD *)v88 & 0x1C00) == 0x400)
                *v4 = 1;
              v89 = *(_QWORD *)v23;
              if ((!*(_QWORD *)v23 || *(_BYTE *)(v89 + 16) != 39)
                && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v89 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
                 || (v89 = sub_22F10CF48(v89)) == 0)
                || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v89 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                            + 8) & 0xFFFFFFFFFFFFFFF0)
                                                    + 16)
                 - 25 >= 2)
              {
                v112 = *(_QWORD *)(v127 & 0xFFFFFFFFFFFFFFF0);
                if (!v112 || *(_BYTE *)(v112 + 16) != 31)
                {
                  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v112 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31)
                    return v127;
                  v112 = sub_22F10CF48(v112);
                  if (!v112)
                    return v127;
                }
                if (!sub_22F28C8B4(v112))
                  return v127;
              }
              v90 = *(_QWORD *)((v127 & 0xFFFFFFFFFFFFFFF0) + 8);
              if ((v90 & 8) != 0)
              {
                v92 = *(_QWORD *)((v90 & 0xFFFFFFFFFFFFFFF0) + 0x18);
                v91 = *(_QWORD *)((v90 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
              }
              else
              {
                v91 = 0;
                v92 = 0;
              }
              v113 = v92 | (v90 | v127) & 7;
              v114 = v113 | v91;
              v134 = *v125 & 0xFFFFFFFFFFFFFFFELL;
              v130[0] = *v124 & 0xFFFFFFFFFFFFFFFELL;
              v115 = sub_22EBCB5F4();
              *v125 = v134;
              *v124 = v130[0];
              v127 = v115;
              if ((v114 & 0xCFFFFFFF8) == 0)
                return v115 | v113 & 7;
              v116 = v13[11];
              v134 = v114;
              v117 = sub_22E491354((unsigned int *)&v134, v115);
              return sub_22EF5DBC4(v116, v117, v134);
            }
          }
        }
      }
    }
    else if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45
           || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
    {
      v82 = *v124 & 0xFFFFFFFFFFFFFFFELL;
      v153[0] = *v125 & 0xFFFFFFFFFFFFFFFELL;
      v153[1] = v82;
      v134 = (unint64_t)&v136;
      v135 = 0x1000000000;
      v139 = v143;
      v140 = v143;
      v141 = 16;
      v142 = 0;
      v143[8] = 0u;
      v144 = v146;
      v145 = 0x400000000;
      v146[4] = v147;
      v147[0] = 0;
      v146[5] = 0;
      v147[1] = 1;
      v148 = v2;
      v149 = 1;
      v150 = 0;
      v151 = 0;
      v152 = 0;
      sub_22ED0A498((uint64_t)v13, 0x2Cu, v2, (uint64_t)v153, 2, (uint64_t)&v134);
      v133 = 0;
      v83 = sub_22ED03FCC(&v134, v13, v2, &v133);
      if (v83)
      {
        if (v83 == 2)
        {
          v84 = v13;
          v85 = v2;
          v86 = 3054;
        }
        else
        {
          if (v83 != 1 || (sub_22F32E518(v13, *v125 & 0xFFFFFFFFFFFFFFFELL, *v124 & 0xFFFFFFFFFFFFFFFELL, v2) & 1) != 0)
            goto LABEL_143;
          v84 = v13;
          v85 = v2;
          v86 = 4947;
        }
        sub_22E8FCA40(v84, v85, v86, 0, (uint64_t)v130);
        v132 = *(_QWORD *)((*v125 & 0xFFFFFFFFFFFFFFFELL) + 8);
        v99 = sub_22E8901B8((uint64_t)v130, (uint64_t *)&v132);
        v131 = *(_QWORD *)((*v124 & 0xFFFFFFFFFFFFFFFELL) + 8);
        v100 = sub_22E8901B8(v99, &v131);
        sub_22F0D4E74(*v125 & 0xFFFFFFFFFFFFFFFELL);
        v129 = v101;
        v102 = sub_22E8906A0(v100, &v129);
        sub_22F0D4E74(*v124 & 0xFFFFFFFFFFFFFFFELL);
        v128 = v103;
        sub_22E8906A0(v102, &v128);
        sub_22E903BEC((unsigned int *)v130);
LABEL_143:
        sub_22E9DC79C((uint64_t *)&v134);
        return 0;
      }
      v93 = sub_22EBC4694(v13, *v125 & 0xFFFFFFFFFFFFFFFELL, v133[2], v133[6], 3, 0);
      if ((v93 & 1) != 0)
        goto LABEL_143;
      *v125 = v93;
      v94 = sub_22EBC4694(v13, *v124 & 0xFFFFFFFFFFFFFFFELL, v133[3], v133[6] + 152, 3, 0);
      if ((v94 & 1) != 0)
        goto LABEL_143;
      *v124 = v94;
      if (*v133)
        sub_22EB4E494(v13, v2, *v133, 1);
      sub_22E9DC79C((uint64_t *)&v134);
    }
    *v125 = sub_22EB1B954((uint64_t)v13, (void *)(*v125 & 0xFFFFFFFFFFFFFFFELL));
    v95 = sub_22EB1B954((uint64_t)v13, (void *)(*v124 & 0xFFFFFFFFFFFFFFFELL));
    *v124 = v95;
    if (((*v125 | v95) & 1) != 0)
      return 0;
    v96 = *(_QWORD *)((*v125 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v126 = *(_QWORD *)((v95 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v127 = v96;
    v97 = *(_QWORD *)(v96 & 0xFFFFFFFFFFFFFFF0);
    v98 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v97 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if ((*(_QWORD *)((v96 & 0xFFFFFFFFFFFFFFF0) + 8) | v96 & 7) != (*(_QWORD *)((v126 & 0xFFFFFFFFFFFFFFF0) + 8) | v126 & 7))
    {
      if ((v98 - 55) < 2
        || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v126 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 55 <= 1)
      {
        return sub_22EB36814(v13, v125, v124, v2, 0, 1, 0, (*(_QWORD *)(v13[9] + 100) & 0x2000000000) != 0, 1);
      }
      if (!sub_22F110E9C(v97) || !sub_22F110E9C(*(_QWORD *)(v126 & 0xFFFFFFFFFFFFFFF0)))
      {
        v134 = *v125 & 0xFFFFFFFFFFFFFFFELL;
        v130[0] = *v124 & 0xFFFFFFFFFFFFFFFELL;
        v39 = sub_22EBCB5F4();
        *v125 = v134;
        *v124 = v130[0];
        if (v39 > 0xF)
          return v39;
        v109 = sub_22F32E638(v13, v125, v124, v2);
        if ((*v125 & 1) != 0 || (*v124 & 1) != 0)
          return 0;
        v39 = v109;
        if (v109 > 0xF)
          return v39;
        if ((sub_22F32E518(v13, *v125 & 0xFFFFFFFFFFFFFFFELL, *v124 & 0xFFFFFFFFFFFFFFFELL, v2) & 1) != 0)
          return 0;
        sub_22E8FCA40(v13, v2, 0x1353u, 0, (uint64_t)&v134);
        v130[0] = *(_QWORD *)((*v125 & 0xFFFFFFFFFFFFFFFELL) + 8);
        v110 = sub_22E8901B8((uint64_t)&v134, v130);
        v153[0] = *(_QWORD *)((*v124 & 0xFFFFFFFFFFFFFFFELL) + 8);
        v49 = sub_22E8901B8(v110, v153);
        sub_22F0D4E74(*v125 & 0xFFFFFFFFFFFFFFFELL);
        v133 = v50;
        v64 = sub_22E8906A0(v49, (uint64_t *)&v133);
        sub_22F0D4E74(*v124 & 0xFFFFFFFFFFFFFFFELL);
        v132 = v51;
        v66 = (uint64_t *)&v132;
        goto LABEL_75;
      }
      v107 = sub_22EB1F050((uint64_t)v13, v125, v124, v2, 3);
      if ((*v125 & 1) != 0 || (*(_BYTE *)v124 & 1) != 0)
        return 0;
      v39 = v107;
      if (v107 > 0xF)
      {
        v118 = *v125 & 0xFFFFFFFFFFFFFFFELL;
        v119 = sub_22EB3547C((uint64_t)v13, v125, v107);
        *v125 = sub_22E90092C((uint64_t)v13, v118, v39, v119, 0, 0);
        v120 = *v124 & 0xFFFFFFFFFFFFFFFELL;
        v121 = sub_22EB3547C((uint64_t)v13, v124, v39);
        *v124 = sub_22E90092C((uint64_t)v13, v120, v39, v121, 0, 0);
        return v39;
      }
      sub_22E8FCA40(v13, v2, 0x1353u, 0, (uint64_t)&v134);
      v108 = sub_22E8901B8((uint64_t)&v134, &v127);
      v61 = sub_22E8901B8(v108, &v126);
LABEL_74:
      v62 = v61;
      sub_22F0D4E74(*v125 & 0xFFFFFFFFFFFFFFFELL);
      v130[0] = v63;
      v64 = sub_22E8906A0(v62, v130);
      sub_22F0D4E74(*v124 & 0xFFFFFFFFFFFFFFFELL);
      v153[0] = v65;
      v66 = v153;
LABEL_75:
      sub_22E8906A0(v64, v66);
      goto LABEL_91;
    }
    if (v98 == 45)
    {
      LODWORD(v134) = 9;
      v135 = 0;
      v136 = v96;
      v137 = 0;
      v138 = 0;
      v104 = sub_22EC45014();
      if ((v104 & 1) != 0)
        return 0;
      v105 = sub_22EC45014();
      if ((v105 & 1) != 0)
        return 0;
      *v125 = v104;
      *v124 = v105;
      v97 = *(_QWORD *)(v127 & 0xFFFFFFFFFFFFFFF0);
    }
    if ((!v97 || *(_BYTE *)(v97 + 16) != 39)
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v97 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
       || (v97 = sub_22F10CF48(v97)) == 0)
      || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v97 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 25 >= 2)
    {
      v111 = *(_QWORD *)(v127 & 0xFFFFFFFFFFFFFFF0);
      if (!v111 || *(_BYTE *)(v111 + 16) != 31)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v111 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31)
          return v127;
        v111 = sub_22F10CF48(v111);
        if (!v111)
          return v127;
      }
      v47 = v124;
      v48 = v125;
      if (!sub_22F28C8B4(v111))
        return v127;
    }
    v134 = *v48 & 0xFFFFFFFFFFFFFFFELL;
    v130[0] = *v47 & 0xFFFFFFFFFFFFFFFELL;
    v106 = sub_22EBCB5F4();
    *v48 = v134;
    *v47 = v130[0];
    return v106;
  }
  v33 = *sub_22EFFA6B0((unsigned __int8 *)v19);
  v34 = *sub_22EFFA6B0((unsigned __int8 *)v20) == 134;
  if (v17)
  {
    if (v27)
      v35 = v19;
    else
      v35 = v20;
    if (v27)
      v36 = v33 == 134;
    else
      v36 = v34;
    sub_22F0D4E74(v35);
    v130[0] = v37;
    LOBYTE(v153[0]) = v36;
    sub_22E8FCA40(v13, v37, 0xBF1u, 0, (uint64_t)&v134);
    v38 = sub_22E8906A0((uint64_t)&v134, v130);
    sub_22E894E38(v38, (unsigned __int8 *)v153);
    goto LABEL_91;
  }
  if ((v33 == 134) == v34)
  {
    if (v27 && v32)
      return *(_QWORD *)(v13[11] + 16392);
    if (v27)
      v59 = &v126;
    else
      v59 = &v127;
    sub_22E8FCA40(v13, v2, 0xBF5u, 0, (uint64_t)&v134);
    v60 = sub_22E8901B8((uint64_t)&v134, v59);
    LODWORD(v133) = !v27;
    v61 = sub_22E8900C4(v60, (int *)&v133);
    goto LABEL_74;
  }
  if (v33 == 134)
    v44 = v20;
  else
    v44 = v19;
  *v6 = (*(_DWORD *)v44 >> 8) & 3;
  *v4 = (*(_DWORD *)v44 >> 10) & 7;
  return *(_QWORD *)(v44 + 8);
}

BOOL sub_22EBCAACC()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t *v2;
  BOOL *v3;
  BOOL *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  unint64_t v25;
  int v26;
  _BOOL8 v27;
  char v28;
  unint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  _BOOL4 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  _QWORD v49[2];
  unsigned __int8 *v50;
  _QWORD v51[2];
  unsigned int v52;
  int v53;
  int v54;
  uint64_t v55;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = v0;
  v55 = *MEMORY[0x24BDAC8D0];
  v50 = v10;
  *v3 = 0;
  v11 = *(_QWORD *)(v7 + 8);
  *v1 = v11;
  sub_22F0D5A50(v7);
  v49[0] = (v12 << 32) | 2;
  v49[1] = 0;
  if ((*(_BYTE *)(v8 + 1) & 3) != 0)
  {
    v13 = sub_22EF67758(*(_QWORD *)(v9 + 88), v8);
    v44 = 9;
    v45 = 0;
    v46 = v13;
    v47 = 0;
    v48 = 0;
    sub_22EC395BC((uint64_t)v51, (unsigned int *)v9, (uint64_t)&v44, (uint64_t)v49, (uint64_t *)&v50, 1uLL, 0, 1);
    v14 = 40 * v52;
    do
    {
      if (!v14)
        break;
      v15 = *(_DWORD *)(v51[1] - 40 + v14);
      if (v15 == 4)
      {
        v27 = 0;
        *v2 = v13;
        *v4 = 1;
        goto LABEL_33;
      }
      v14 -= 40;
    }
    while (v15 != 5);
    if (LODWORD(v51[0]) || (v53 - 14) < 0x10 || ((1 << v53) & 0x1FE00001FFFLL) != 0 || v54 != 2)
    {
      sub_22EC3CE2C((uint64_t)v51);
      v11 = *v2;
      goto LABEL_9;
    }
    goto LABEL_66;
  }
LABEL_9:
  v16 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v16 & 8) != 0 && (*(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0)
    return 0;
  v17 = 0;
  v18 = *((_QWORD *)v50 + 1);
  v19 = *(_QWORD *)(v8 + 8);
  v43 = v19;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  else
    v20 = 0;
  v21 = v19 & 0xFFFFFFFFFFFFFFF0;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  else
    v22 = 0;
  if (v20)
    v23 = v22 == 0;
  else
    v23 = 1;
  v24 = v23;
  if (!v23 && v20 != v22)
    v17 = sub_22EAAB1B8(v9, v6, v18, v19);
  if ((v24 & 1) == 0)
  {
    if (v20 == v22)
      v28 = 1;
    else
      v28 = v17;
    if ((v28 & 1) != 0)
    {
      v29 = sub_22EF5DEB0(*(_QWORD *)(v9 + 88), v18);
      v30 = v29;
      v31 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v31 & 8) != 0)
      {
        v33 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      }
      else
      {
        v32 = 0;
        v33 = 0;
      }
      v34 = *(_QWORD *)v21;
      if ((*(_BYTE *)(*(_QWORD *)v21 + 8) & 0xF) != 0)
        v34 = (unint64_t)sub_22F10D2BC(v19);
      v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v35)
        v36 = *(_DWORD *)(v35 + 16) == 11;
      else
        v36 = 0;
      v37 = v36 && (*(_DWORD *)(v35 + 16) & 0xFF80000) == 86507520;
      v38 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v38 & 8) != 0)
      {
        v40 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v39 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      }
      else
      {
        v39 = 0;
        v40 = 0;
      }
      if (v37)
        v41 = v33 & 0xFFFFFFFFFFFFFFF7 | (v31 | v30) & 7;
      else
        v41 = v33 | (v31 | v30) & 7;
      v51[0] = v39 | v40 | (v38 | v19) & 7;
      if (sub_22E95F24C((unsigned int *)v51, v41 | v32))
      {
        v44 = 9;
        v45 = 0;
        v46 = v19;
        v47 = 0;
        v48 = 0;
        sub_22EC395BC((uint64_t)v51, (unsigned int *)v9, (uint64_t)&v44, (uint64_t)v49, (uint64_t *)&v50, 1uLL, 0, 1);
        if (LODWORD(v51[0]))
        {
          v27 = 0;
          *v4 = 1;
          goto LABEL_33;
        }
        if ((v53 - 14) >= 0x10 && ((1 << v53) & 0x1FE00001FFFLL) == 0 && v54 == 2)
        {
LABEL_66:
          v27 = sub_22EC412B0((int *)v51, v9, &v44, (unsigned __int16 *)v49, &v50, 1);
          goto LABEL_33;
        }
        sub_22EC3CE2C((uint64_t)v51);
      }
    }
    else if ((sub_22EAAB1B8(v9, v6, v19, v18) & 1) == 0)
    {
      goto LABEL_27;
    }
    return 0;
  }
LABEL_27:
  v25 = sub_22F1133DC(&v43, *(_QWORD *)(v9 + 88));
  v44 = 9;
  v45 = 0;
  v46 = v25;
  v47 = 0;
  v48 = 0;
  sub_22EC395BC((uint64_t)v51, (unsigned int *)v9, (uint64_t)&v44, (uint64_t)v49, (uint64_t *)&v50, 1uLL, 0, 1);
  v26 = v51[0];
  *v4 = LODWORD(v51[0]) != 0;
  *v2 = v25;
  if (!v26)
  {
    v27 = 0;
    if ((v53 - 14) < 0x10 || ((1 << v53) & 0x1FE00001FFFLL) != 0)
      goto LABEL_33;
    if (v54 == 2)
      goto LABEL_66;
  }
  v27 = 0;
LABEL_33:
  sub_22EC3CE2C((uint64_t)v51);
  return v27;
}

uint64_t sub_22EBCAF84()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned __int8 *v11;
  _QWORD v12[2];
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE v18[12392];
  uint64_t v19;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = (unsigned int *)v0;
  v19 = *MEMORY[0x24BDAC8D0];
  v13 = 9;
  v14 = 0;
  v15 = v4;
  v16 = 0;
  v17 = 0;
  v5 = (unsigned __int8 *)(*v1 & 0xFFFFFFFFFFFFFFFELL);
  sub_22F0D5A50((uint64_t)v5);
  v12[0] = (v6 << 32) | 2;
  v12[1] = 0;
  v11 = v5;
  sub_22EC395BC((uint64_t)v18, v3, (uint64_t)&v13, (uint64_t)v12, (uint64_t *)&v11, 1uLL, 0, 1);
  v8 = sub_22EC3DF80((uint64_t)v18, (uint64_t)v3, (uint64_t)&v13, (unsigned __int16 *)v12, &v11, 1, 0, v7);
  v9 = v8;
  if ((v8 & 1) == 0)
    *v2 = v8;
  sub_22EC3CE2C((uint64_t)v18);
  return v9 & 1;
}

unint64_t sub_22EBCB088()
{
  uint64_t v0;
  char *v1;
  char *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  _BOOL4 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  int v37;
  BOOL v38;
  char v39;
  int *v41;
  uint64_t *v42;
  int *v43;
  uint64_t *v44;
  unint64_t *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  _QWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  _DWORD v54[46];
  int v55;
  int v56;
  unsigned int v57[46];
  int v58;
  int v59;
  uint64_t v60;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = v0;
  v60 = *MEMORY[0x24BDAC8D0];
  v52 = v5;
  v53 = v7;
  *v1 = 0;
  v45 = v10;
  *v10 = *(_QWORD *)(v5 + 8);
  sub_22F0D5A50(v5);
  v51[0] = (v11 << 32) | 2;
  v51[1] = 0;
  v12 = sub_22EF5DEB0(*(_QWORD *)(v9 + 88), *(_QWORD *)(v8 + 8));
  v13 = sub_22EF5DEB0(*(_QWORD *)(v9 + 88), *(_QWORD *)(v6 + 8));
  v14 = 0;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  else
    v15 = 0;
  v16 = v13 & 0xFFFFFFFFFFFFFFF0;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
    v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  else
    v17 = 0;
  if (v15)
    v18 = v17 == 0;
  else
    v18 = 1;
  v19 = v18;
  if (!v18 && v15 != v17)
    v14 = sub_22EAAB1B8(v9, v4, v12, v13);
  if ((v19 & 1) != 0)
  {
LABEL_17:
    v20 = *(_QWORD *)v16;
    if (*(_QWORD *)v16 && (*(_DWORD *)(v20 + 16) & 0xFE) == 0x2C)
      goto LABEL_21;
    v21 = *(_QWORD *)(v20 + 8);
    if ((*(_DWORD *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C)
    {
      if (sub_22F10CF48(v20))
      {
LABEL_21:
        v22 = v45;
        goto LABEL_59;
      }
      v20 = *(_QWORD *)v16;
      v21 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    }
    if ((v21 & 0xF) != 0)
      v20 = (uint64_t)sub_22F10D2BC(v13);
    v22 = v45;
    v13 = v20 & 0xFFFFFFFFFFFFFFF0;
LABEL_59:
    v46 = 9;
    v47 = 0;
    v48 = v13;
    v49 = 0;
    v50 = 0;
    sub_22EC395BC((uint64_t)v57, (unsigned int *)v9, (uint64_t)&v46, (uint64_t)v51, &v53, 1uLL, 0, 1);
    sub_22EC395BC((uint64_t)v54, (unsigned int *)v9, (uint64_t)&v46, (uint64_t)v51, &v52, 1uLL, 0, 1);
    v36 = v57[0];
    v37 = v54[0];
    if (v57[0])
      v38 = v54[0] == 0;
    else
      v38 = 1;
    v39 = !v38;
    *v2 = v39;
    *v22 = v13;
    if (v36 || (v58 - 14) < 0x10 || ((1 << v58) & 0x1FE00001FFFLL) != 0 || v59 != 2)
    {
      if (v37)
        goto LABEL_78;
      LOBYTE(v12) = 0;
      if ((v55 - 14) < 0x10 || ((1 << v55) & 0x1FE00001FFFLL) != 0)
        goto LABEL_69;
      if (v56 != 2)
      {
LABEL_78:
        LOBYTE(v12) = 0;
        goto LABEL_69;
      }
      v41 = v54;
      v42 = &v52;
    }
    else
    {
      v41 = (int *)v57;
      v42 = &v53;
    }
    LOBYTE(v12) = sub_22EC412B0(v41, v9, &v46, (unsigned __int16 *)v51, (unsigned __int8 **)v42, 1);
LABEL_69:
    sub_22EC3CE2C((uint64_t)v54);
    sub_22EC3CE2C((uint64_t)v57);
    return v12 & 1;
  }
  if (v15 == v17)
    v23 = 1;
  else
    v23 = v14;
  if ((v23 & 1) == 0)
  {
    if ((sub_22EAAB1B8(v9, v4, v13, v12) & 1) == 0)
      goto LABEL_17;
    goto LABEL_54;
  }
  v24 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v24 & 8) != 0)
  {
    v26 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v25 = 0;
    v26 = 0;
  }
  v27 = *(_QWORD *)v16;
  if ((*(_BYTE *)(*(_QWORD *)v16 + 8) & 0xF) != 0)
    v27 = (unint64_t)sub_22F10D2BC(v13);
  v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v28)
    v29 = *(_DWORD *)(v28 + 16) == 11;
  else
    v29 = 0;
  v30 = v29 && (*(_DWORD *)(v28 + 16) & 0xFF80000) == 86507520;
  v31 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v31 & 8) != 0)
  {
    v33 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v32 = 0;
    v33 = 0;
  }
  if (v30)
    v34 = v26 & 0xFFFFFFFFFFFFFFF7 | (v24 | v12) & 7;
  else
    v34 = v26 | (v24 | v12) & 7;
  *(_QWORD *)v57 = v32 | v33 | (v31 | v13) & 7;
  if (!sub_22E95F24C(v57, v34 | v25))
  {
LABEL_54:
    LOBYTE(v12) = 0;
    return v12 & 1;
  }
  v46 = 9;
  v47 = 0;
  v48 = v13;
  v49 = 0;
  v50 = 0;
  sub_22EC395BC((uint64_t)v57, (unsigned int *)v9, (uint64_t)&v46, (uint64_t)v51, &v53, 1uLL, 0, 1);
  sub_22EC395BC((uint64_t)v54, (unsigned int *)v9, (uint64_t)&v46, (uint64_t)v51, &v52, 1uLL, 0, 1);
  if (v57[0] && v54[0])
  {
    v35 = 0;
    LOBYTE(v12) = 0;
    *v2 = 1;
    *v45 = v13;
    goto LABEL_53;
  }
  if (!v57[0] && (v58 - 14) >= 0x10 && ((1 << v58) & 0x1FE00001FFFLL) == 0 && v59 == 2)
  {
    v43 = (int *)v57;
    v44 = &v53;
LABEL_85:
    LOBYTE(v12) = sub_22EC412B0(v43, v9, &v46, (unsigned __int16 *)v51, (unsigned __int8 **)v44, 1);
    v35 = 0;
    goto LABEL_53;
  }
  v35 = 1;
  if (!v54[0] && (v55 - 14) >= 0x10 && ((1 << v55) & 0x1FE00001FFFLL) == 0 && v56 == 2)
  {
    v43 = v54;
    v44 = &v52;
    goto LABEL_85;
  }
LABEL_53:
  sub_22EC3CE2C((uint64_t)v54);
  sub_22EC3CE2C((uint64_t)v57);
  if (v35)
    goto LABEL_54;
  return v12 & 1;
}

uint64_t sub_22EBCB5F4()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  _BOOL4 v10;
  int v12;
  _BOOL4 v14;
  unint64_t *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v41;
  int v42;
  llvm::APInt *v44;
  const llvm::APInt *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  char *v62;
  BOOL v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t *v66;
  int v67;
  char *v68;
  _QWORD *v70;
  _QWORD *v71;
  __int16 v72;
  unsigned __int32 v73;
  void *v74;
  uint64_t v75;
  int v76;
  char *v77;
  uint64_t v78;
  _DWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  BOOL v88;
  BOOL v89;
  BOOL v90;
  char v91;
  uint64_t v92;
  __int128 *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  char v100;
  uint64_t *v101;
  uint64_t *v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t *v105;
  int v106;
  __int128 v107;
  __int128 v108;
  _OWORD v109[2];
  __int128 v110;
  _BYTE v111[48];
  __n128 v112;
  uint64_t v113;
  int v114;
  _BYTE v115[12360];
  void *v116;
  uint64_t v117;
  _BYTE v118[64];
  void *v119;
  uint64_t v120;
  _BYTE v121[192];
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;

  v0 = MEMORY[0x24BDAC7A8]();
  v106 = v3;
  v104 = v4;
  v5 = v0;
  v125 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(*v1 + 8);
  v105 = (uint64_t *)v2;
  v7 = *(_QWORD *)(*v2 + 8);
  v8 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 16);
  v10 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFF80000) == 114294784;
  if (v9 != 11)
    v10 = 0;
  v12 = v9 <= 0x27
     && ((1 << *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                           + 16)) & 0x8180000000) != 0
     || v10;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 16) > 0x27u
    || ((1 << *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16)) & 0x8180000000) == 0)
  {
    v19 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) & 0xFF800FF;
    v14 = v19 == 114294795;
    if (v19 == 114294795)
      v20 = 1;
    else
      v20 = v12;
    if (v20 != 1)
      return 0;
  }
  else
  {
    v14 = 1;
  }
  if (v12)
  {
    v15 = v1;
    v16 = sub_22EFFBE1C(*v2, *(_QWORD *)(v0 + 88), 1);
    v1 = v15;
    if (v16)
    {
      if (v106)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31)
          v17 = 15;
        else
          v17 = 14;
        *v105 = sub_22E90092C(v5, *v105, v6, v17, 0, 0) & 0xFFFFFFFFFFFFFFFELL;
      }
      return v6;
    }
  }
  if (!v14)
    return 0;
  v102 = (uint64_t *)v1;
  if (sub_22EFFBE1C(*v1, *(_QWORD *)(v5 + 88), 1))
  {
    if (v106)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 31)
        v18 = 15;
      else
        v18 = 14;
      *v102 = sub_22E90092C(v5, *v102, v7, v18, 0, 0) & 0xFFFFFFFFFFFFFFFELL;
    }
    return v7;
  }
  if (!v12)
    return 0;
  v101 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF0);
  v103 = 0;
  v119 = v121;
  v120 = 0x800000000;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            *(_QWORD *)&v110 = 0;
            *(_QWORD *)&v107 = 0;
            v6 = sub_22EF67F34(*(_QWORD *)(v5 + 88), v6, &v110);
            v21 = sub_22EF67F34(*(_QWORD *)(v5 + 88), v7, &v107);
            if ((_DWORD)v120)
            {
              v22 = v110;
              v23 = v107;
              if (((v107 >> 9) & 3) >= ((v110 >> 9) & 3))
                v24 = (v110 >> 9) & 3;
              else
                v24 = (v107 >> 9) & 3;
              if (v110 >> 11 == v107 >> 11)
              {
                v25 = v107;
                v26 = v110;
                v27 = v110;
              }
              else
              {
                if ((_DWORD)v120 != 1)
                  goto LABEL_200;
                v28 = sub_22E95F2F0(v110 >> 11, v107 >> 11);
                v29 = sub_22E95F2F0(v107 >> 11, v110 >> 11);
                v26 = v110;
                if (v28 == v29)
                {
                  v25 = v107;
                  if ((v110 >> 11) - 24 >= 3)
                  {
                    v27 = v110;
                    if ((v107 >> 11) - 24 >= 3)
                      goto LABEL_200;
                  }
                  else
                  {
                    v27 = v110;
                  }
                }
                else
                {
                  v25 = v107;
                  if (v28)
                    v27 = v110;
                  else
                    v27 = v107;
                }
              }
              v30 = v27 & 0xFFFFF800 | (v23 | v22) & 0xF | (v24 << 9);
              v31 = (v26 >> 4) & 3;
              if (v31 == ((v25 >> 4) & 3))
              {
                v30 |= 16 * v31;
              }
              else if ((sub_22F10DFD8(*v8) & 1) == 0 && !sub_22F10DFD8(*v101))
              {
                goto LABEL_200;
              }
              if (((v26 >> 6) & 7) == ((v25 >> 6) & 7))
              {
                v30 = v30 & 0xFFFFFE3F | (((v26 >> 6) & 7) << 6);
              }
              else if ((sub_22F10DFD8(*v8) & 1) == 0 && !sub_22F10DFD8(*v101))
              {
                goto LABEL_200;
              }
              v32 = DWORD1(v110);
              if (DWORD1(v110) != DWORD1(v107))
                goto LABEL_200;
              *(_QWORD *)((char *)v119 + 24 * v120 - 20) = v30 | ((unint64_t)DWORD1(v110) << 32);
              if ((_QWORD)v110 != __PAIR64__(v32, v30) || (_QWORD)v107 != __PAIR64__(v32, v30))
                v103 = v120 - 1;
            }
            v33 = sub_22EF5C728(*(_QWORD *)(v5 + 88), v6);
            if (!v33)
              break;
            v34 = v33;
            v35 = sub_22EF5C728(*(_QWORD *)(v5 + 88), v21);
            if (!v35)
              break;
            v36 = v35;
            v37 = *(unsigned __int8 *)(v34 + 16);
            if (v37 == 2)
              v38 = v34;
            else
              v38 = 0;
            v39 = *(unsigned __int8 *)(v35 + 16);
            if (v37 != 2 || v39 != 2)
            {
              v41 = v39 == 4;
              v42 = v37 == 4;
              if (v37 == 4 && v39 == 4)
                goto LABEL_121;
              goto LABEL_80;
            }
            v44 = (llvm::APInt *)(v38 + 40);
            v45 = (const llvm::APInt *)(v36 + 40);
            if (*(_DWORD *)(v38 + 48) > 0x40u)
            {
              if (!llvm::APInt::equalSlowCase(v44, v45))
                goto LABEL_79;
LABEL_134:
              v6 = *(_QWORD *)(v34 + 32);
              v7 = *(_QWORD *)(v36 + 32);
              v67 = v120;
              if (v120 >= HIDWORD(v120))
              {
                v112.n128_u64[0] = 3;
                v112.n128_u32[2] = 0;
                v113 = v38;
                goto LABEL_138;
              }
              v68 = (char *)v119 + 24 * v120;
              *(_QWORD *)v68 = 3;
              *((_DWORD *)v68 + 2) = 0;
              *((_QWORD *)v68 + 2) = v38;
              LODWORD(v120) = v67 + 1;
            }
            else
            {
              if (*(_QWORD *)v44 == *(_QWORD *)v45)
                goto LABEL_134;
LABEL_79:
              v41 = 0;
              v42 = 0;
LABEL_80:
              if ((*(_BYTE *)(*(_QWORD *)(v5 + 72) + 1) & 0x10) == 0
                || v41 == v42
                || (v39 == 2) != (v38 == 0)
                || (_DWORD)v120 && *((_DWORD *)v119 + 6 * v120 - 6) == 3)
              {
                break;
              }
LABEL_121:
              v6 = *(_QWORD *)(v34 + 32);
              v7 = *(_QWORD *)(v36 + 32);
              sub_22EBCC664((uint64_t)&v119, 3u);
              v63 = v39 == 2 || v37 == 2;
              v64 = v103;
              if (v63)
                v64 = v120;
              v103 = v64;
            }
          }
          v46 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFF0);
          v47 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
          if (!v47 || *(_BYTE *)(v47 + 16) != 39)
          {
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
              break;
            v47 = sub_22F10CF48(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0));
            if (!v47)
              break;
          }
          v48 = *(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0);
          if (!v48 || *(_BYTE *)(v48 + 16) != 39)
          {
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v48 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
              break;
            v48 = sub_22F10CF48(v48);
            if (!v48)
              break;
          }
          v6 = *(_QWORD *)(v47 + 32);
          v7 = *(_QWORD *)(v48 + 32);
          sub_22EBCC664((uint64_t)&v119, 0);
        }
        v49 = *v46;
        if (!*v46 || *(_BYTE *)(v49 + 16) != 32)
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v49 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
            break;
          v49 = sub_22F10CF48(*v46);
          if (!v49)
            break;
        }
        v50 = *(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0);
        if (!v50 || *(_BYTE *)(v50 + 16) != 32)
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v50 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
            break;
          v50 = sub_22F10CF48(v50);
          if (!v50)
            break;
        }
        v6 = *(_QWORD *)(v49 + 32);
        v7 = *(_QWORD *)(v50 + 32);
        sub_22EBCC664((uint64_t)&v119, 1u);
      }
      v51 = *v46;
      if (!*v46 || *(_BYTE *)(*v46 + 16) != 31)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v51 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31)
          break;
        v51 = sub_22F10CF48(*v46);
        if (!v51)
          break;
      }
      v53 = *(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0);
      if (!v53 || *(_BYTE *)(v53 + 16) != 31)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v53 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 31)
          break;
        v53 = sub_22F10CF48(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0));
        if (!v53)
          break;
      }
      v56 = *(_QWORD *)(v51 + 40);
      v55 = (uint64_t *)(v51 + 40);
      v54 = v56;
      v6 = *(v55 - 1);
      v58 = *(_QWORD *)(v53 + 40);
      v57 = (uint64_t *)(v53 + 40);
      v7 = *(v57 - 1);
      v59 = v54 & 0xFFFFFFFFFFFFFFF0;
      v60 = v58 & 0xFFFFFFFFFFFFFFF0;
      if (*(_QWORD *)((v54 & 0xFFFFFFFFFFFFFFF0) + 8) != *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFFF0) + 8))
      {
        if ((_DWORD)v120)
          goto LABEL_200;
        if ((sub_22EAAB1B8(v5, v104, v59, v60) & 1) == 0)
        {
          v55 = v57;
          if (!sub_22EAAB1B8(v5, v104, v60, v59))
            goto LABEL_200;
        }
        v54 = *v55;
      }
      if (!v54)
        goto LABEL_200;
      v61 = v120;
      if (v120 >= HIDWORD(v120))
      {
        v112.n128_u64[0] = 2;
        v112.n128_u32[2] = 0;
        v113 = v54;
LABEL_138:
        sub_22E467108((uint64_t)&v119, &v112);
      }
      else
      {
        v62 = (char *)v119 + 24 * v120;
        *(_QWORD *)v62 = 2;
        *((_DWORD *)v62 + 2) = 0;
        *((_QWORD *)v62 + 2) = v54;
        LODWORD(v120) = v61 + 1;
      }
    }
    if ((_DWORD)v120)
      break;
    v65 = *v46;
    if (!sub_22F10DFD8(*v46)
      || (v66 = (uint64_t *)(v21 & 0xFFFFFFFFFFFFFFF0),
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                   + 16) != 32))
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v65 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
        goto LABEL_162;
      v66 = (uint64_t *)(v21 & 0xFFFFFFFFFFFFFFF0);
      if (!sub_22F10DFD8(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0)))
        goto LABEL_162;
    }
    v6 = sub_22F10ACF8(v65);
    v7 = sub_22F10ACF8(*v66);
    sub_22EBCC664((uint64_t)&v119, 0);
  }
  if ((_DWORD)v120 == 1
    && ((v70 = (_QWORD *)*v46) != 0 && *((_BYTE *)v70 + 16) == 26
     || *(_BYTE *)(*(_QWORD *)(v70[1] & 0xFFFFFFFFFFFFFFF0) + 16) == 26
     && (v70 = (_QWORD *)sub_22F10CF48(*v46)) != 0)
    && ((v71 = *(_QWORD **)(v21 & 0xFFFFFFFFFFFFFFF0)) != 0 && *((_BYTE *)v71 + 16) == 26
     || *(_BYTE *)(*(_QWORD *)(v71[1] & 0xFFFFFFFFFFFFFFF0) + 16) == 26
     && (v71 = (_QWORD *)sub_22F10CF48(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0))) != 0))
  {
    sub_22E4913B4((uint64_t)v70, (uint64_t)&v110);
    sub_22E4913B4((uint64_t)v71, (uint64_t)&v107);
    if ((((unsigned __int16)(v107 & v110) >> 5) & 1) != 0)
      v72 = 32;
    else
      v72 = 0;
    LOWORD(v110) = v72 | v110 & 0xFFDF;
    LOWORD(v107) = v72 | v107 & 0xFFDF;
    v116 = v118;
    v117 = 0x800000000;
    v73 = *(_DWORD *)&v111[4];
    v75 = *(_QWORD *)&v111[16];
    v74 = *(void **)&v111[8];
    if (!*(_DWORD *)v111)
    {
      v76 = 0;
      v122 = *(_OWORD *)&v111[24];
      v123 = *(_QWORD *)&v111[40];
      goto LABEL_160;
    }
    v76 = v108;
    if (!(_DWORD)v108)
      goto LABEL_159;
    if (*(_DWORD *)v111 == 3)
    {
      v122 = *(_OWORD *)&v111[24];
      v123 = *(_QWORD *)&v111[40];
      v76 = 3;
      goto LABEL_160;
    }
    if ((_DWORD)v108 == 3)
      goto LABEL_159;
    if (*(_DWORD *)v111 == 7)
    {
      v122 = *(_OWORD *)&v111[24];
      v123 = *(_QWORD *)&v111[40];
      v76 = 7;
      goto LABEL_160;
    }
    if ((_DWORD)v108 == 7 || *(_DWORD *)v111 == 4)
      goto LABEL_159;
    if ((_DWORD)v108 == 4)
    {
LABEL_212:
      v122 = *(_OWORD *)&v111[24];
      v123 = *(_QWORD *)&v111[40];
      v76 = *(_DWORD *)v111;
      goto LABEL_160;
    }
    if (*(_DWORD *)v111 == 1)
      goto LABEL_159;
    if ((_DWORD)v108 == 1)
      goto LABEL_212;
    if (*(_DWORD *)v111 == 5)
      goto LABEL_159;
    if ((_DWORD)v108 == 5)
      goto LABEL_212;
    if (*(_DWORD *)v111 == 8)
    {
LABEL_159:
      v122 = *(_OWORD *)((char *)v109 + 8);
      v123 = *((_QWORD *)&v109[1] + 1);
      v74 = (void *)*((_QWORD *)&v108 + 1);
      v75 = *(_QWORD *)&v109[0];
      v73 = DWORD1(v108);
      goto LABEL_160;
    }
    if ((_DWORD)v108 == 8)
      goto LABEL_212;
    if (*(_DWORD *)v111 == 6 || (_DWORD)v108 == 6)
    {
      v74 = 0;
      v75 = 0;
      v73 = 0;
      v76 = 0;
      v122 = 0uLL;
      v123 = 0;
    }
    else
    {
      v91 = 0;
      v92 = 0;
      v112.n128_u64[0] = (unint64_t)v115;
      v112.n128_u64[1] = (unint64_t)v115;
      v113 = 8;
      v114 = 0;
      v122 = *(_OWORD *)&v111[8];
      v123 = *((_QWORD *)&v108 + 1);
      v124 = *(_QWORD *)&v109[0];
      do
      {
        v100 = v91;
        v93 = &v122 + v92;
        v94 = *((_QWORD *)v93 + 1);
        if (v94)
        {
          v95 = *(uint64_t **)v93;
          v96 = 8 * v94;
          do
          {
            v97 = *v95;
            sub_22E3BA850((uint64_t)&v112, (const void *)(*v95 & 7 | *(_QWORD *)((*v95 & 0xFFFFFFFFFFFFFFF0) + 8)));
            if (v98)
            {
              v99 = v117;
              if (v117 >= (unint64_t)HIDWORD(v117))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v99 = v117;
              }
              *((_QWORD *)v116 + v99) = v97;
              LODWORD(v117) = v117 + 1;
            }
            ++v95;
            v96 -= 8;
          }
          while (v96);
        }
        v91 = 1;
        v92 = 1;
      }
      while ((v100 & 1) == 0);
      v123 = 0;
      v122 = 0uLL;
      v74 = v116;
      v75 = v117;
      v73 = v112.n128_u32[0];
      if (v112.n128_u64[1] != v112.n128_u64[0])
        free((void *)v112.n128_u64[1]);
      v76 = 2;
    }
LABEL_160:
    *(_QWORD *)&v108 = __PAIR64__(v73, v76);
    *((_QWORD *)&v108 + 1) = v74;
    *(_QWORD *)&v109[0] = v75;
    *(_OWORD *)((char *)v109 + 8) = v122;
    *((_QWORD *)&v109[1] + 1) = v123;
    *(_OWORD *)v111 = v108;
    *(_OWORD *)&v111[16] = v109[0];
    *(_OWORD *)&v111[32] = v109[1];
    v6 = sub_22EF63D8C(*(_QWORD *)(v5 + 88), v70[3], v70 + 5, (unsigned __int16)(v70[2] >> 38), &v110, 0);
    v21 = sub_22EF63D8C(*(_QWORD *)(v5 + 88), v71[3], v71 + 5, (unsigned __int16)(v71[2] >> 38), &v107, 0);
    if (v116 != v118)
      free(v116);
  }
LABEL_162:
  if ((_DWORD)v120 == 1
    && !*(_DWORD *)v119
    && (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 8) | v6 & 7) != (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFF0) + 8) | v21 & 7))
  {
    v85 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v86 = *(_DWORD *)(v85 + 16) & 0xFF800FF;
    v87 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16);
    if (v85
      && v86 == 86507531
      && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) & 0xFE) != 0x28
      && ((v87 & 0xFF800FF) != 0x528000B
        ? (v88 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0)
                                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                                          + 16)
               - 25 > 1)
        : (v88 = 0),
          v88))
    {
      v21 = v6;
    }
    else
    {
      v89 = (*(_DWORD *)(v85 + 16) & 0xFE) != 0x28 && (v87 & 0xFF800FF) == 86507531;
      if (v89
        && (v86 != 86507531
          ? (v90 = *(_DWORD *)(v85 + 16) - 27 >= 0xFFFFFFFE)
          : (v90 = 1),
            !v90)
        || (sub_22EAAB1B8(v5, v104, v6, v21) & 1) != 0)
      {
        v6 = v21;
      }
      else if (sub_22EAAB1B8(v5, v104, v21, v6))
      {
        v21 = v6;
      }
    }
  }
  if ((v6 & 7 | *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 8)) != (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFF0) + 8) | v21 & 7))
  {
LABEL_200:
    v6 = 0;
    goto LABEL_201;
  }
  v77 = (char *)v119;
  if (v103)
  {
    v78 = v103;
    v79 = (char *)v119 + 4;
    do
    {
      *v79 |= 1u;
      v79 += 6;
      --v78;
    }
    while (v78);
  }
  if ((_DWORD)v120)
  {
    v80 = 24 * v120;
    v81 = *(_QWORD *)(v5 + 88);
    if ((*(_QWORD *)&v77[v80 - 20] & 0xCFFFFFFF8) != 0)
    {
      v112.n128_u64[0] = *(_QWORD *)&v77[v80 - 20];
      v82 = sub_22E491354((unsigned int *)&v112, v6);
      sub_22EF5DBC4(v81, v82, v112.n128_i64[0]);
    }
    __asm { BR              X9 }
  }
  if ((v106 & 1) != 0)
  {
    LODWORD(v107) = 9;
    *((_QWORD *)&v107 + 1) = 0;
    *(_QWORD *)&v108 = v6;
    DWORD2(v108) = 0;
    *(_QWORD *)&v109[0] = 0;
    v116 = (void *)((v104 << 32) | 2);
    v117 = 0;
    sub_22EC395BC(&v112, v5, &v107, &v116, v102, 1, 0, 1);
    if (v112.n128_u32[0])
    {
      sub_22EC395BC(&v110, v5, &v107, &v116, v105, 1, 0, 1);
      if ((_DWORD)v110)
      {
        v83 = sub_22EC3DF80((int)&v112, v5);
        if ((v83 & 1) == 0)
        {
          *v102 = v83 & 0xFFFFFFFFFFFFFFFELL;
          v84 = sub_22EC3DF80((int)&v110, v5);
          if ((v84 & 1) == 0)
          {
            *v105 = v84 & 0xFFFFFFFFFFFFFFFELL;
            sub_22EC3CE2C((uint64_t)&v110);
            sub_22EC3CE2C((uint64_t)&v112);
            goto LABEL_201;
          }
        }
      }
      sub_22EC3CE2C((uint64_t)&v110);
    }
    sub_22EC3CE2C((uint64_t)&v112);
    goto LABEL_200;
  }
LABEL_201:
  if (v119 != v121)
    free(v119);
  return v6;
}

double sub_22EBCC664(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  double result;
  __n128 v5;
  uint64_t v6;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    v5.n128_u32[2] = 0;
    v5.n128_u64[0] = a2;
    v6 = 0;
    *(_QWORD *)&result = sub_22E467108(a1, &v5).n128_u64[0];
  }
  else
  {
    v3 = *(_QWORD *)a1 + 24 * v2;
    *(_DWORD *)(v3 + 4) = 0;
    *(_DWORD *)(v3 + 8) = 0;
    *(_DWORD *)v3 = a2;
    *(_QWORD *)(v3 + 16) = 0;
    *(_DWORD *)(a1 + 8) = v2 + 1;
  }
  return result;
}

uint64_t sub_22EBCC6C0(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  int v8;
  _QWORD *i;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  BOOL v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  int v46;

  if (!a2)
    return 1;
  v3 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 0x300) != 0)
    return a2;
  if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 2) == 0)
    goto LABEL_16;
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v8 == 10 || v8 == 32)
    goto LABEL_11;
  if (!sub_22F115064(v7))
  {
LABEL_16:
    if (sub_22F115260(*(_QWORD *)(a2 + 8)) == 4)
      *(_WORD *)(a1 + 1693) = 257;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) == 0)
      return a2;
    for (i = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8); ; i = (_QWORD *)(v10 + 32))
    {
      v10 = *(_QWORD *)(*i & 0xFFFFFFFFFFFFFFF0);
      v11 = *(unsigned __int8 *)(v10 + 16);
      if ((v11 - 2) >= 4)
        break;
    }
    if (v11 != 45)
      return a2;
    v12 = sub_22F114198(*(_QWORD *)(v10 + 24));
    if ((*(_BYTE *)(v12 + 28) & 0x80) != 0)
      return a2;
    v13 = v12;
    if (sub_22EFC7ADC(v12 + 64))
      return a2;
    v14 = *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 8);
    if (v14)
    {
      v15 = sub_22EC6602C(a1, v13) & 0xFFFFFFFFFFFFFFF8;
      if (v15)
      {
        sub_22EFF605C(a2);
        sub_22EB4E494(a1, v16, v15, 1);
        sub_22EFF605C(a2);
        v18 = v17;
        v45 = *(_QWORD *)(a1 + 88) + 2128;
        v46 = 2587;
        v19 = *(_QWORD *)(a2 + 8);
        v20 = (_BYTE *)sub_22E3B8AAC(v45);
        v44 = v20;
        v21 = *v20;
        v20[v21 + 1] = 9;
        *v20 = v21 + 1;
        *(_QWORD *)&v20[8 * v21 + 16] = v19;
        sub_22E90A46C(a1, v18, v15, (uint64_t)&v44, 0);
        if (v44 && v45)
          sub_22E3BB10C(v45, (unint64_t)v44);
        sub_22EFF605C(a2);
        LODWORD(v44) = v22;
        v4 = 1;
        if ((sub_22EB17F48(a1, v15, &v44, 1, 0, 0, 0, 0) & 1) != 0)
          return v4;
        if ((*(_BYTE *)(v15 + 82) & 0x80) != 0)
          return a2;
        *(_WORD *)(a1 + 1693) = 257;
      }
    }
    else
    {
      v15 = 0;
    }
    v37 = (_QWORD *)sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 8, 3);
    *v37 = v15;
    v4 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 32, 3);
    sub_22F062B38(v4, (uint64_t)v37, a2);
    if (!v14)
    {
      v38 = *(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696);
      v39 = (_QWORD *)(v38 - 328);
      v40 = (unsigned int *)(v38 - 320);
      v41 = *(_DWORD *)(v38 - 320);
      if (v41 >= *(_DWORD *)(v38 - 316))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v41 = *v40;
      }
      *(_QWORD *)(*v39 + 8 * v41) = v4;
      ++*v40;
    }
    return v4;
  }
  LOBYTE(v3) = *(_BYTE *)a2;
LABEL_11:
  if ((v3 + 113) < 0xFBu)
  {
    if (v3 != 224)
    {
      if ((v3 + 113) <= 0xAu)
      {
        if (**(_BYTE **)(a2 + 16) != 114)
          goto LABEL_80;
        return a2;
      }
      if (v3 == 200)
      {
        if ((*(_BYTE *)(a2 + 27) & 1) == 0)
          goto LABEL_80;
        v28 = *(_QWORD *)(a2 + 16);
        goto LABEL_98;
      }
      if ((v3 + 55) <= 3u && (*(_BYTE *)(a2 + 2) & 4) != 0)
        return a2;
      switch(v3)
      {
        case 0xC9u:
          if (!*(_DWORD *)(a2 + 16)
            && sub_22F2725F0((int *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 2000) + 400)))
          {
            return a2;
          }
          break;
        case 0xCBu:
          if ((*(_DWORD *)(a2 + 16) & 0x7FFFFFFF) == 0
            && (sub_22F2725F0((int *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 2000) + 400)) & 1) != 0)
          {
            return a2;
          }
          break;
        case 0xCAu:
          v28 = *(_QWORD *)(a2 + 24);
LABEL_98:
          if (!v28)
            goto LABEL_80;
          if (!sub_22F24DC44(v28))
          {
            v4 = a2;
            if (sub_22EFDBF50(v28) != 14)
              goto LABEL_80;
            return v4;
          }
          goto LABEL_100;
        default:
          goto LABEL_80;
      }
      v28 = *(_QWORD *)(a2 + 32);
      goto LABEL_98;
    }
LABEL_100:
    v36 = 58;
LABEL_101:
    *(_WORD *)(a1 + 1693) = 257;
    v42 = *(_QWORD *)(a1 + 88);
    v43 = *(_QWORD *)(a2 + 8);
    v4 = sub_22E3CD3D4(v42 + 2032, 24, 3);
    sub_22F003694((unsigned int *)v4, v43, v36, a2, 0, 0, 0);
    return v4;
  }
  v23 = *(unsigned __int8 **)(a2 + *(unsigned __int8 *)(a2 + 3));
  while (1)
  {
    v24 = v23;
    v25 = *v23;
    if (v25 > 0xD5)
    {
      if (v25 == 233)
      {
        v25 = *(_DWORD *)v23;
        if ((*(_DWORD *)v23 & 0x7C0000) != 0x300000)
          goto LABEL_55;
        v27 = v23 + 16;
      }
      else
      {
        if (v25 != 214)
          goto LABEL_55;
        v27 = v23 + 24;
      }
      goto LABEL_48;
    }
    if (v25 == 155)
      break;
    if (v25 != 176)
      goto LABEL_55;
    v26 = *((unsigned int *)v23 + 5);
    if ((_DWORD)v26 == -1)
    {
      v25 = 176;
      goto LABEL_55;
    }
    v27 = &v23[8 * v26 + 40];
    v25 = 176;
LABEL_48:
    v23 = *(unsigned __int8 **)v27;
    if (v23 == v24)
      goto LABEL_55;
  }
  if ((**((_DWORD **)v23 + 2) & 0x18000) == 0)
  {
    v27 = v23 + 24;
    if (!v24[48])
      v27 = v24 + 32;
    v25 = 155;
    goto LABEL_48;
  }
  v25 = 155;
LABEL_55:
  v29 = *((_QWORD *)v24 + 1);
  if (v29 == *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16848))
  {
    if ((v25 & 0xFE) == 0x70)
    {
      v30 = (uint64_t *)(*((_QWORD *)v24 + 3) + 8);
      goto LABEL_60;
    }
    if (v25 == 188)
    {
      v30 = (uint64_t *)(*((_QWORD *)v24 + 3) + 48);
LABEL_60:
      v29 = *v30;
    }
  }
  v31 = v29 & 0xFFFFFFFFFFFFFFF0;
  v32 = *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0);
  v33 = *(unsigned __int8 *)(v32 + 16);
  if (v32 && v33 == 39)
    goto LABEL_73;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v32 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
    goto LABEL_66;
  v32 = sub_22F10CF48(v32);
  if (v32)
    goto LABEL_73;
  v32 = *(_QWORD *)v31;
  v33 = *(unsigned __int8 *)(*(_QWORD *)v31 + 16);
LABEL_66:
  if (v33 == 10)
    goto LABEL_73;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v32 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10)
  {
    v32 = sub_22F10CF48(v32);
    if (!v32)
    {
      v32 = *(_QWORD *)v31;
      v33 = *(unsigned __int8 *)(*(_QWORD *)v31 + 16);
      goto LABEL_70;
    }
LABEL_73:
    v31 = *(_QWORD *)(v32 + 32) & 0xFFFFFFFFFFFFFFF0;
  }
  else
  {
LABEL_70:
    if (v33 == 31)
      goto LABEL_73;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v32 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 31)
    {
      v32 = sub_22F10CF48(v32);
      if (v32)
        goto LABEL_73;
    }
  }
  v34 = *(_QWORD *)v31;
  if (*(_QWORD *)v31)
    v35 = *(unsigned __int8 *)(*(_QWORD *)v31 + 16) - 27 > 0xFFFFFFFD;
  else
    v35 = 0;
  if (!v35)
    v34 = sub_22F10CF48(v34);
  if ((*(_BYTE *)(v34 + 19) & 2) != 0)
    goto LABEL_100;
LABEL_80:
  if (!sub_22F114FB4(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0)))
  {
    v36 = 59;
    goto LABEL_101;
  }
  return a2;
}

int *sub_22EBCCCF0(uint64_t a1, int *a2)
{
  uint64_t v5;

  sub_22EB4E2D8();
  if (*(_BYTE *)(a1 + 1693))
  {
    v5 = *(unsigned int *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 568);
    a2 = sub_22F061910(*(_QWORD *)(a1 + 88), a2, *(unsigned __int8 *)(a1 + 1694), (uint64_t *)(*(_QWORD *)(a1 + 1696) + 8 * v5), *(unsigned int *)(a1 + 1704) - v5);
    sub_22EB48DCC(a1);
  }
  return a2;
}

uint64_t sub_22EBCCD68(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  _QWORD *i;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  unint64_t v52;
  int v53;

  v2 = sub_22EB19A28(a1);
  if ((v2 & 1) != 0)
    return 1;
  v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
  v4 = *(unsigned __int8 *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if (v4 != 214)
  {
    if ((v4 & 0xFE) != 0x70 || (*(_DWORD *)v3 & 0xFC0000) != 0x800000)
    {
      if (v4 == 116)
        v16 = v2 & 0xFFFFFFFFFFFFFFFELL;
      else
        v16 = 0;
      if (v16)
      {
        if ((**(_BYTE **)(v16 + 24) + 118) >= 5u)
          v17 = 0;
        else
          v17 = *(_QWORD *)(v16 + 24);
      }
      else
      {
        v17 = 0;
      }
      if (v17)
        v18 = v16;
      else
        v18 = 0;
      if (v17)
        v3 = v17;
      *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 8) = 3;
      sub_22EB4E1D8((unsigned __int8 *)a1, (unsigned __int8 *)v3);
      if ((v3 & 1) == 0)
      {
        v3 &= ~1uLL;
        if ((**(_BYTE **)(a1 + 72) & 0x10) != 0)
          return v3;
        v19 = *(_QWORD *)(a1 + 3688);
        v20 = *(_DWORD *)(a1 + 3696);
        v21 = *(unsigned int *)(v19 + 576 * v20 - 400);
        if ((_DWORD)v21)
        {
          v22 = 0;
          v23 = 8 * v21;
          do
          {
            v24 = *(_QWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 408);
            v25 = *(_QWORD *)(v24 + v22);
            if (v25 != v17)
            {
              v26 = sub_22EFFA9C0(*(_QWORD *)(v24 + v22), *(_QWORD *)(a1 + 88));
              sub_22EFFAE7C((unsigned int *)v25);
              v28 = v27;
              sub_22EFFA604(*(unsigned __int8 **)(v25 + *(unsigned __int8 *)(v25 + 3)));
              if ((sub_22EB34594(a1, v26, v28, v25) & 1) != 0)
                return 1;
            }
            v22 += 8;
          }
          while (v23 != v22);
          v19 = *(_QWORD *)(a1 + 3688);
          v20 = *(_DWORD *)(a1 + 3696);
        }
        v29 = *(unsigned int *)(v19 + 576 * v20 - 320);
        if (!(_DWORD)v29)
          return v3;
        v30 = 0;
LABEL_35:
        v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 328) + 8 * v30);
        if (v31 == v18)
          goto LABEL_56;
        v32 = *(unint64_t **)(v31 + 16);
        for (i = (_QWORD *)(v31 + 8); ; i = (_QWORD *)(v36 + 32))
        {
          v34 = *(_QWORD *)(*i & 0xFFFFFFFFFFFFFFF0);
          if (v34)
            v35 = (*(_DWORD *)(v34 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
          else
            v35 = 0;
          if (v35)
          {
            v36 = *(_QWORD *)(*i & 0xFFFFFFFFFFFFFFF0);
          }
          else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3
                 || (v36 = sub_22F10CF48(v34)) == 0)
          {
            v37 = sub_22F10C2A4(v34);
            if (v37)
            {
              if ((*(_DWORD *)(v37 + 28) & 0x7Fu) - 35 >= 3)
                v38 = 0;
              else
                v38 = v37;
            }
            else
            {
              v38 = 0;
            }
            v39 = sub_22EC6602C(a1, v38) & 0xFFFFFFFFFFFFFFF8;
            *v32 = v39;
            sub_22EFF605C(v31);
            sub_22EB4E494(a1, v40, v39, 1);
            sub_22EFF605C(v31);
            v42 = v41;
            v43 = *(_QWORD *)(a1 + 88) + 2128;
            v51 = 0;
            v52 = v43;
            v53 = 2587;
            v44 = *(_QWORD *)(v31 + 8);
            v51 = (_BYTE *)sub_22E3B8AAC(v43);
            v51[*v51 + 1] = 9;
            v45 = v51;
            v46 = *v51;
            *v51 = v46 + 1;
            *(_QWORD *)&v45[8 * v46 + 16] = v44;
            sub_22E90A46C(a1, v42, v39, (uint64_t)&v51, 0);
            if (v51 && v52)
              sub_22E3BB10C(v52, (unint64_t)v51);
            sub_22EFF605C(v31);
            LODWORD(v51) = v47;
            if ((sub_22EB17F48(a1, v39, &v51, 1, 0, 0, 0, 0) & 1) != 0)
              return 1;
            *(_WORD *)(a1 + 1693) = 257;
LABEL_56:
            if (++v30 == v29)
              return v3;
            goto LABEL_35;
          }
        }
      }
      return 1;
    }
    v7 = sub_22EBCCD68(a1, *(_QWORD *)(v3 + 24));
    if ((v7 & 1) != 0)
      return 1;
    v8 = (_DWORD *)(v7 & 0xFFFFFFFFFFFFFFFELL);
    if (*(_QWORD *)(v3 + 24) == (v7 & 0xFFFFFFFFFFFFFFFELL))
      return v3;
    v9 = *(_QWORD *)(a1 + 88);
    v10 = *(_QWORD *)(v3 + 8);
    v11 = *(_DWORD **)(v3 + 16);
    v12 = *(_DWORD *)(v3 + 4);
    v13 = (*(_DWORD *)v3 >> 8) & 3;
    v14 = (*(_DWORD *)v3 >> 10) & 7;
    if ((*(_DWORD *)v3 & 0x1000000) != 0)
    {
      v48 = 32;
      if (*(_DWORD *)v3 == 113)
        v48 = 48;
      v15 = *(_QWORD *)(v3 + v48);
      if (HIDWORD(v15))
      {
        v49 = 40;
        goto LABEL_65;
      }
    }
    else
    {
      v15 = 0;
    }
    v49 = 32;
LABEL_65:
    v3 = sub_22E3CD3D4(v9 + 2032, v49, 3);
    sub_22F002E24((int *)v3, v50, v11, v8, 32, v10, v13, v14, v12, v15);
    return v3;
  }
  v5 = sub_22EBCCD68(a1, *(_QWORD *)(v3 + 24));
  if ((v5 & 1) != 0)
    return 1;
  if (*(_QWORD *)(v3 + 24) == (v5 & 0xFFFFFFFFFFFFFFFELL))
    return v3;
  return sub_22EB27A20(a1, *(unsigned int *)(v3 + 16), *(unsigned int *)(v3 + 20), v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EBCD1E4(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unint64_t *a6, _BYTE *a7)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  _BYTE v44[96];
  unint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  void *__p;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  int v54;
  unsigned int v55[25];
  char v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  _BYTE v61[64];
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  int v65;
  _QWORD v66[10];

  v66[8] = *MEMORY[0x24BDAC8D0];
  if ((sub_22EB29350() & 1) != 0)
    return 1;
  v12 = sub_22EB19A28(a1);
  if ((v12 & 1) != 0)
    return 1;
  v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v58 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v14 = v58;
  *a7 = 0;
  v15 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(v15 + 16) & 0x400) != 0)
  {
    if (a5 == 36
      && (*(_DWORD *)(v15 + 16) == 39
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
       && (v15 = sub_22F10CF48(v15)) != 0))
    {
      v14 = *(_QWORD *)(v15 + 32);
    }
    goto LABEL_56;
  }
  if (a5 == 36)
  {
    v57 = v14;
    v56 = 0;
    v62 = v66;
    v63 = v66;
    v64 = 8;
    v65 = 0;
    v59 = v61;
    v60 = 0x800000000;
    sub_22E3BA850((uint64_t)&v62, (const void *)(*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8) | v14 & 7));
    v16 = 1;
    while (1)
    {
      v17 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0);
      v18 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v18 != 45)
        break;
      if (*(unsigned int *)(*((_QWORD *)a1 + 9) + 164) <= (unint64_t)v60)
      {
        sub_22E8FCA40(a1, a4, 0x1151u, 0, (uint64_t)v55);
        v26 = sub_22E8901B8((uint64_t)v55, (uint64_t *)&v57);
        LODWORD(v53) = *(_DWORD *)(*((_QWORD *)a1 + 9) + 164);
        v27 = sub_22E89519C(v26, (unsigned int *)&v53);
        sub_22F0D4E74(v13);
        v45 = v28;
        sub_22E8906A0(v27, (uint64_t *)&v45);
        sub_22E903BEC(v55);
        sub_22EBCD83C(a1, (uint64_t)v59, v60);
        sub_22E8FCA40(a1, a4, 0x171Eu, 0, (uint64_t)v55);
        LODWORD(v45) = *(_DWORD *)(*((_QWORD *)a1 + 9) + 164);
        sub_22E89519C((uint64_t)v55, (unsigned int *)&v45);
        v29 = v55;
        goto LABEL_31;
      }
      v19 = sub_22ED1C570();
      if ((v19 & 1) != 0)
      {
        if (!v56)
          goto LABEL_37;
        if ((v16 & 1) != 0)
        {
          sub_22E8FCA40(a1, a4, 0x1381u, 0, (uint64_t)v55);
          v30 = sub_22E8901B8((uint64_t)v55, (uint64_t *)&v58);
          v25 = 1;
          v54 = 1;
          v31 = sub_22E8900C4(v30, &v54);
          sub_22F0D4E74(v13);
          v53 = v32;
          v33 = sub_22E8906A0(v31, &v53);
          v48 = 0;
          v47 = 0;
          v50 = 0;
          v51 = 0x100000000000000;
          v52 = 0;
          v45 = a4 | (unint64_t)(a4 << 32);
          v46 = 1;
          __p = (void *)46;
          sub_22E890748(v33, &v45);
          if (SHIBYTE(v51) < 0)
            operator delete(__p);
          sub_22E903BEC(v55);
          goto LABEL_38;
        }
        sub_22E8FCA40(a1, a4, 0x137Du, 0, (uint64_t)v55);
        v37 = sub_22E8901B8((uint64_t)v55, (uint64_t *)&v58);
        sub_22F0D4E74(v13);
        v45 = v38;
        sub_22E8906A0(v37, (uint64_t *)&v45);
        sub_22E903BEC(v55);
        if ((*(_BYTE *)v13 + 113) < 0xFBu)
          goto LABEL_37;
        v39 = sub_22EFFA604(*(unsigned __int8 **)(v13 + *(unsigned __int8 *)(v13 + 3)));
        if (!v39)
          goto LABEL_37;
        v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
        sub_22E8FCA40(a1, v40, 0x1656u, 0, (uint64_t)v44);
        v29 = (unsigned int *)v44;
LABEL_31:
        sub_22E903BEC(v29);
        goto LABEL_37;
      }
      v13 = v19 & 0xFFFFFFFFFFFFFFFELL;
      if (*(unsigned __int8 *)(v19 & 0xFFFFFFFFFFFFFFFELL) == 141)
      {
        v20 = sub_22EFFA604(*(unsigned __int8 **)(v13 + *(unsigned __int8 *)(v13 + 3)));
        if (v20)
        {
          if ((*(_DWORD *)(v20 + 28) & 0x7Eu) - 52 >= 6)
            v21 = 0;
          else
            v21 = v20;
        }
        else
        {
          v21 = 0;
        }
        v22 = v60;
        if (v60 >= (unint64_t)HIDWORD(v60))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v22 = v60;
        }
        *((_QWORD *)v59 + v22) = v21;
        LODWORD(v60) = v60 + 1;
      }
      v14 = *(_QWORD *)(v13 + 8);
      v58 = v14;
      sub_22E3BA850((uint64_t)&v62, (const void *)(*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8) | v14 & 7));
      v16 = 0;
      if (!v23)
      {
        sub_22E8FCA40(a1, a4, 0x1150u, 0, (uint64_t)v55);
        sub_22E8901B8((uint64_t)v55, (uint64_t *)&v57);
        sub_22E903BEC(v55);
        sub_22EBCD83C(a1, (uint64_t)v59, v60);
LABEL_37:
        v25 = 0;
        goto LABEL_38;
      }
    }
    if (v18 == 39)
    {
      v58 = sub_22F10ACF8(v17);
    }
    else
    {
      v24 = sub_22EF5C728(*((_QWORD *)a1 + 11), v14);
      if (v24)
        v58 = *(_QWORD *)(v24 + 32);
    }
    v25 = 1;
LABEL_38:
    if (v59 != v61)
      free(v59);
    if (v63 != v62)
      free(v63);
    if (v25)
    {
      v14 = v58;
      v15 = *(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0);
      goto LABEL_44;
    }
    return 1;
  }
LABEL_44:
  v34 = *(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0;
  if (*(_BYTE *)(*(_QWORD *)v34 + 16) == 32)
  {
    v14 = sub_22F10ACF8(v15);
    v58 = v14;
    v15 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0);
    v34 = *(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0;
  }
  if (*(_BYTE *)(*(_QWORD *)v34 + 16) != 45)
  {
LABEL_56:
    *a6 = v14;
    *a7 = 1;
    return v13;
  }
  if ((*(_BYTE *)(v15 + 17) & 4) != 0
    || *((_QWORD *)a1 + 1286) >= 0x10uLL
    && (v35 = sub_22F10C2A4(v15)) != 0
    && (*(_DWORD *)(v35 + 28) & 0x7Fu) - 35 <= 2
    && (*(_BYTE *)(v35 + 74) & 2) != 0
    || (v62 = &unk_24FAB6EF8, LODWORD(v63) = 3586, !sub_22EE8B0B0((uint64_t)a1, a4, v58)))
  {
    *a6 = v58;
  }
  else
  {
    sub_22F0D5A50(v13);
    v42 = v41;
    sub_22F0D60E4(v13);
    v62 = (_QWORD *)v13;
    return sub_22F32D6EC((uint64_t)a1, v42, v43, &v62, 1, 0);
  }
  return v13;
}

unsigned int *sub_22EBCD83C(unsigned int *result, uint64_t a2, unint64_t a3)
{
  unsigned int v4;
  int v5;
  unsigned int *v7;
  uint64_t v8;
  unsigned int i;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12[25];
  unsigned int v13;

  v4 = a3 - 8;
  if (a3 > 9)
  {
    v5 = 4;
  }
  else
  {
    v4 = 0;
    v5 = a3;
  }
  v13 = v4;
  if (a3)
  {
    v7 = result;
    v8 = 0;
    for (i = 0; i < a3; v8 = i)
    {
      if (i == v5)
      {
        sub_22E8FCA40(v7, *(_DWORD *)(*(_QWORD *)(a2 + 8 * v8) + 24), 0x1720u, 0, (uint64_t)v12);
        sub_22E89519C((uint64_t)v12, &v13);
        result = sub_22E903BEC(v12);
        v10 = v13;
      }
      else
      {
        sub_22E8FCA40(v7, *(_DWORD *)(*(_QWORD *)(a2 + 8 * v8) + 24), 0x171Fu, 0, (uint64_t)v12);
        v11 = sub_22E8BBA74(*(_QWORD *)(a2 + 8 * v8));
        sub_22E8901B8((uint64_t)v12, (uint64_t *)&v11);
        result = sub_22E903BEC(v12);
        v10 = 1;
      }
      i += v10;
    }
  }
  return result;
}

uint64_t sub_22EBCD92C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4, uint64_t a5, uint64_t *a6, int a7, int a8, unint64_t a9, unint64_t a10)
{
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  int v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v87;
  int v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  void *__p;
  uint64_t v97;
  uint64_t v98;
  char v99;
  unint64_t v100;
  unsigned int v101[8];
  _BYTE v102[56];
  uint64_t v103;
  unint64_t v104;
  unsigned __int16 v105;
  uint64_t v106;

  v16 = a9;
  v106 = a2;
  v105 = a4;
  if ((a9 & 1) != 0)
    v17 = 0;
  else
    v17 = (uint64_t *)(a9 & 0xFFFFFFFFFFFFFFFELL);
  v104 = 0;
  v18 = a3;
  if ((sub_22EBCE108((_QWORD *)a1, (uint64_t *)&v104, (uint64_t)&v106, &v105, a3) & 1) != 0)
    return 1;
  v19 = *(_QWORD *)(v104 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v19 + 17) & 4) != 0)
    goto LABEL_31;
  v20 = *(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0;
  v21 = *(_QWORD *)v20;
  v22 = *(_DWORD *)(*(_QWORD *)v20 + 16);
  if (*(_QWORD *)v20)
    v23 = v22 == 11;
  else
    v23 = 0;
  if (v23)
  {
    if (((v22 >> 19) & 0x1FF) - 166 >= 0x35)
      goto LABEL_22;
  }
  else if (v21 && v22 == 44)
  {
    v24 = sub_22F114198(*(_QWORD *)(v21 + 24));
    if ((*(_BYTE *)(v24 + 74) & 1) == 0 && *(_QWORD *)(v24 + 128) <= 7uLL)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v104 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
LABEL_22:
      v28 = *(_DWORD *)(*(_QWORD *)v20 + 16);
      if (v28 - 55 < 2)
        goto LABEL_31;
      if ((v28 & 0xFF800FF) == 0x528000B && (**(_QWORD **)(a1 + 72) & 0x10) != 0)
      {
        sub_22E8FCA40((_QWORD *)a1, v18, 0x14D8u, 0, (uint64_t)v101);
        sub_22F0D4E74(v106);
        v92 = v34;
        sub_22E8906A0((uint64_t)v101, &v92);
        sub_22E903BEC(v101);
        goto LABEL_31;
      }
      sub_22E8FCA40((_QWORD *)a1, v18, 0x11E2u, 0, (uint64_t)v101);
      v30 = sub_22E8901B8((uint64_t)v101, (uint64_t *)&v104);
      sub_22F0D4E74(v106);
      v92 = v31;
      sub_22E8906A0(v30, &v92);
      sub_22E903BEC(v101);
      return 1;
    }
  }
  else
  {
    v25 = v22 > 0x27u;
    v26 = (1 << v22) & 0x8180001600;
    if (v25 || v26 == 0)
      goto LABEL_22;
  }
LABEL_31:
  v89 = a10;
  if (!v17)
    goto LABEL_60;
  v88 = a8;
  v100 = *v17;
  v35 = sub_22F115668(v100);
  v36 = v100 & 0xFFFFFFFFFFFFFFF0;
  if ((*(_BYTE *)(*(_QWORD *)(v100 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
  {
    v37 = v35;
    v38 = v104;
    v39 = *(_QWORD *)(v104 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v39 + 17) & 4) == 0)
    {
      v40 = *(_QWORD *)((v100 & 0xFFFFFFFFFFFFFFF0) + 8);
      v41 = *(_QWORD *)((v104 & 0xFFFFFFFFFFFFFFF0) + 8);
      if (*(_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF0))
      {
        if ((v40 & 8) != 0)
          v42 = (*(_DWORD *)((v40 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 6) & 7;
        else
          v42 = 0;
        if ((v41 & 8) != 0)
          v61 = (*(_DWORD *)((v41 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 6) & 7;
        else
          v61 = 0;
        if (v42 == v61)
          goto LABEL_59;
        if ((v40 & 8) != 0 && (*(_WORD *)((v40 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) != 0)
        {
          v62 = v37;
          sub_22E8FCA40((_QWORD *)a1, v37, 0xA72u, 0, (uint64_t)v101);
          v63 = sub_22E8901B8((uint64_t)v101, (uint64_t *)&v104);
          v64 = sub_22E8901B8(v63, (uint64_t *)&v100);
          sub_22F0D4E74(v106);
          v92 = v65;
          v66 = sub_22E8906A0(v64, &v92);
          v90 = sub_22F115668(*v17);
          sub_22E8906A0(v66, &v90);
          sub_22E903BEC(v101);
          v37 = v62;
          v38 = v104;
        }
        v100 = v38;
        v59 = *(_QWORD *)(a1 + 88);
        v60 = v37;
        goto LABEL_58;
      }
      if (v105 != 25
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v39 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
        || (v87 = v37,
            v43 = sub_22F10ACF8(v39),
            v37 = v87,
            *(_QWORD *)(*(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v43 & 0xFFFFFFFFFFFFFFF0)
                                                                                              + 8) & 0xFFFFFFFFFFFFFFF0)))
      {
        v54 = v37;
        sub_22E8FCA40((_QWORD *)a1, v37, 0x11E5u, 0, (uint64_t)v101);
        v55 = sub_22E8901B8((uint64_t)v101, (uint64_t *)&v104);
        v56 = sub_22E8901B8(v55, (uint64_t *)&v100);
        sub_22F0D4E74(v106);
        v92 = v57;
        v58 = sub_22E8906A0(v56, &v92);
        v90 = sub_22F115668(*v17);
        sub_22E8906A0(v58, &v90);
        sub_22E903BEC(v101);
        v38 = v104;
        v100 = v104;
        v59 = *(_QWORD *)(a1 + 88);
        v60 = v54;
LABEL_58:
        v67 = sub_22EF579A8(v59, v38, v60);
        v16 = (unint64_t)v67 & 0xFFFFFFFFFFFFFFFELL;
        v89 = a10 & 0xFFFFFFFF00000000 | sub_22F115668(*v67);
        goto LABEL_59;
      }
      sub_22E8FCA40((_QWORD *)a1, v18, 0x1381u, 0, (uint64_t)&v92);
      v44 = sub_22E8901B8((uint64_t)&v92, (uint64_t *)&v104);
      v91 = 0;
      v45 = sub_22E8900C4(v44, &v91);
      sub_22F0D4E74(v106);
      v90 = v46;
      v47 = sub_22E8906A0(v45, &v90);
      v48 = *(_OWORD *)(v47 + 9);
      *(_OWORD *)v101 = *(_OWORD *)v47;
      *(_OWORD *)((char *)&v101[2] + 1) = v48;
      v102[0] = 0;
      v102[48] = 0;
      if (*(_BYTE *)(v47 + 80))
        sub_22E907424((uint64_t)v102, v47 + 32);
      v103 = *(_QWORD *)(v47 + 88);
      sub_22E903BEC((unsigned int *)&v92);
      v49 = v100 & 0xFFFFFFFFFFFFFFF0;
      v50 = sub_22F10C2A4(*(_QWORD *)(v100 & 0xFFFFFFFFFFFFFFF0));
      if (v50)
      {
        v82 = v50;
        if ((*(_DWORD *)(v50 + 28) & 0x7Fu) - 35 <= 2)
        {
          if (!*(_QWORD *)(v50 + 128))
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v50 + 104) + 96), *(_QWORD *)(v50 + 104));
            if (!*(_QWORD *)(v82 + 128))
              goto LABEL_86;
          }
          v83 = sub_22EC6602C(a1, v82) & 0xFFFFFFFFFFFFFFF8;
          if (!v83 || !sub_22EB17B6C((_QWORD *)a1, v83, 0))
            goto LABEL_86;
LABEL_84:
          v95 = 0;
          v94 = 0;
          v97 = 0;
          v98 = 0x200000000000000;
          v99 = 0;
          v92 = v18 | (a3 << 32);
          v93 = 1;
          __p = (void *)15917;
          sub_22E890748((uint64_t)v101, &v92);
          if (SHIBYTE(v98) < 0)
            operator delete(__p);
          goto LABEL_86;
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)v49 + 17) & 4) != 0)
        goto LABEL_84;
      v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v49 + 8) & 0xFFFFFFFFFFFFFFF0);
      v52 = *(_DWORD *)(v51 + 16);
      v53 = v52;
      if (v51 && v52 == 11)
      {
        if (((v52 >> 19) & 0x1FF) - 166 < 0x35)
          goto LABEL_84;
      }
      else
      {
        if (v51 && v52 == 44)
        {
          v84 = sub_22F114198(*(_QWORD *)(v51 + 24));
          if ((*(_BYTE *)(v84 + 74) & 1) != 0 || *(_QWORD *)(v84 + 128) > 7uLL)
            goto LABEL_84;
          v53 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v49 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        }
        else
        {
          v25 = v52 > 0x27u;
          v85 = (1 << v52) & 0x8180001600;
          if (!v25 && v85 != 0)
            goto LABEL_84;
        }
        if ((v53 - 55) < 2)
          goto LABEL_84;
      }
LABEL_86:
      v104 = v100;
      v105 = 36;
      sub_22E903BEC(v101);
    }
  }
LABEL_59:
  a8 = v88;
LABEL_60:
  if (a6)
  {
    v68 = *a6;
    v92 = v68;
    if ((*(_BYTE *)(*(_QWORD *)(v68 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && (*(_BYTE *)(*(_QWORD *)(v104 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0
      && *(_QWORD *)(*(_QWORD *)((v68 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v104 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
    {
      v69 = sub_22F115668(v68);
      sub_22E8FCA40((_QWORD *)a1, v69, 0x11E5u, 0, (uint64_t)v101);
      v70 = sub_22E8901B8((uint64_t)v101, (uint64_t *)&v104);
      v71 = sub_22E8901B8(v70, &v92);
      sub_22F0D4E74(v106);
      v100 = v72;
      v73 = sub_22E8906A0(v71, (uint64_t *)&v100);
      v90 = sub_22F115668(*a6);
      sub_22E8906A0(v73, &v90);
      sub_22E903BEC(v101);
      a6 = 0;
    }
  }
  v32 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 80, 3);
  v74 = *(_QWORD *)(a1 + 88);
  v75 = v106;
  v76 = v105;
  v78 = *(_QWORD *)(a5 + 8);
  v77 = (uint64_t *)(a5 + 8);
  if (v78)
  {
    v79 = sub_22F0ABC50(v77, v74);
    v80 = v81;
  }
  else
  {
    v79 = 0;
    v80 = 0;
  }
  sub_22F3C56B0(v32, v74, v75, v76 == 36, v18, v79, v80, (uint64_t)a6, a7, 0, a8, v16, v89);
  return v32;
}

uint64_t sub_22EBCE108(_QWORD *a1, uint64_t *a2, uint64_t a3, _WORD *a4, unsigned int a5)
{
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  void *__p;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned __int8 v36;
  unsigned int v37[24];

  v10 = *(_BYTE **)a3;
  v11 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  v12 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(v12 + 16) & 0xFE00000u) >= 0x8180001 && v12 != 0 && *(_DWORD *)(v12 + 16) == 11)
  {
    v15 = sub_22EB19A28(a1);
    if ((v15 & 1) != 0)
      return 1;
    v10 = (_BYTE *)(v15 & 0xFFFFFFFFFFFFFFFELL);
    *(_QWORD *)a3 = v15 & 0xFFFFFFFFFFFFFFFELL;
    v11 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  *a2 = v11;
  if (*a4 != 36)
    return 0;
  v16 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
  v17 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v17 != 39)
  {
    v18 = (v17 & 0xFE) - 2;
    v19 = v17 - 25;
    if (v18 >= 4 && v19 > 1)
    {
LABEL_19:
      if (v16 && *(_BYTE *)(v16 + 16) == 39)
        goto LABEL_23;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
      {
        v16 = sub_22F10CF48(v16);
        if (v16)
        {
LABEL_23:
          v21 = 0;
          *a2 = *(_QWORD *)(v16 + 32);
          return v21;
        }
        v10 = *(_BYTE **)a3;
      }
      if ((v10[1] & 0x80) == 0)
      {
        sub_22E8FCA40(a1, a5, 0x1381u, 0, (uint64_t)v37);
        v24 = sub_22E8901B8((uint64_t)v37, a2);
        v36 = 1;
        v25 = sub_22E894E38(v24, &v36);
        v31 = 0;
        v30 = 0;
        v33 = 0;
        v34 = 0x100000000000000;
        v35 = 0;
        v28 = a5 | ((unint64_t)a5 << 32);
        v29 = 1;
        __p = (void *)46;
        sub_22E890748(v25, &v28);
        if (SHIBYTE(v34) < 0)
          operator delete(__p);
        sub_22E903BEC(v37);
        sub_22EE03478((uint64_t)a1);
        if (!v26)
        {
          v21 = 0;
          *a4 = 25;
          return v21;
        }
        return 1;
      }
      return 0;
    }
  }
  v21 = 1;
  v22 = sub_22EB1B954((uint64_t)a1, v10);
  if ((v22 & 1) == 0)
  {
    v10 = (_BYTE *)(v22 & 0xFFFFFFFFFFFFFFFELL);
    *(_QWORD *)a3 = v22 & 0xFFFFFFFFFFFFFFFELL;
    v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFFELL) + 8);
    *a2 = v23;
    v16 = *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0);
    goto LABEL_19;
  }
  return v21;
}

uint64_t sub_22EBCE310(_QWORD *a1, uint64_t *a2, uint64_t a3, unsigned int a4, unsigned __int16 a5, uint64_t a6, uint64_t a7, int a8, int a9, uint64_t a10)
{
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  BOOL v22;
  uint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39[24];
  unint64_t v40;
  unsigned __int16 v41;
  uint64_t v42;

  v42 = a3;
  v41 = a5;
  v40 = 0;
  v15 = a4;
  if ((sub_22EBCE108(a1, (uint64_t *)&v40, (uint64_t)&v42, &v41, a4) & 1) != 0)
    return 1;
  if (*(_QWORD *)(a6 + 8))
    goto LABEL_4;
  v17 = v40;
  v18 = *(_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 45)
  {
    if ((*(_BYTE *)(v18 + 17) & 4) == 0)
    {
LABEL_4:
      v17 = 0;
      goto LABEL_8;
    }
    v17 = *(_QWORD *)(a1[11] + 16832);
  }
LABEL_8:
  v19 = *(_QWORD *)(a10 + 8);
  if (*(_DWORD *)a10)
  {
    v20 = sub_22ED62A48(a1, a2, a6, *(_DWORD *)v19, *(_QWORD *)(v19 + 24), *(_QWORD *)(v19 + 8), *(_DWORD *)(v19 + 4), *(_DWORD *)(v19 + 36), v19 + 56, *(unsigned int *)(v19 + 44), *(_DWORD *)(v19 + 40), 0, 1, 0);
    if (v21)
      v22 = 1;
    else
      v22 = v20 == 0;
    if (v22)
    {
      v23 = 0;
      v24 = &v40;
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  v20 = sub_22EA003D8(a1, v19, *(_DWORD *)(a10 + 24), a2, a6, 1, 0, v17, 1u, 0, 1u, 0);
  if (v20)
  {
LABEL_16:
    v25 = v20;
    if (v20 < 0x10)
    {
LABEL_21:
      v27 = 0;
      v28 = 0;
      goto LABEL_25;
    }
    v26 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
    if (!v26 || *(_BYTE *)(v26 + 16) != 57)
    {
LABEL_23:
      v23 = sub_22EF579A8(a1[11], v25, *(_DWORD *)(a10 + 24));
LABEL_24:
      v27 = (unint64_t)v23 & 0xFFFFFFFFFFFFFFFELL;
      v28 = sub_22F115668(*v23);
      goto LABEL_25;
    }
    v24 = (unint64_t *)(v26 + 8);
    v23 = *(uint64_t **)(v26 + 24);
LABEL_20:
    v25 = *v24;
    if (*v24 < 0x10)
      goto LABEL_21;
    if (v23)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (*(_QWORD *)(a6 + 8))
  {
    if (!sub_22E958204((uint64_t)a1, a6, 0))
      goto LABEL_49;
    if (*(_QWORD *)(a6 + 8))
    {
LABEL_39:
      sub_22E8FCA40(a1, *(_DWORD *)(a10 + 24), 0x11E4u, 0, (uint64_t)v39);
      v34 = sub_22E8BAE44((uint64_t)v39, (uint64_t *)(a10 + 8));
      v24 = &v40;
      sub_22E8901B8(v34, (uint64_t *)&v40);
      sub_22E903BEC(v39);
      sub_22EE03478((uint64_t)a1);
      if (v35)
        return 1;
      v23 = 0;
      goto LABEL_20;
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
    goto LABEL_39;
LABEL_49:
  v28 = *(_DWORD *)(a10 + 24);
  v27 = *(_QWORD *)(a10 + 8) | 1;
LABEL_25:
  v29 = *(_QWORD *)(a7 + 8);
  if (*(_DWORD *)a7 == 7 || v29)
  {
    if (*(_DWORD *)a7)
    {
      v30 = sub_22ED62A48(a1, a2, a6, *(_DWORD *)v29, *(_QWORD *)(v29 + 24), *(_QWORD *)(v29 + 8), *(_DWORD *)(v29 + 4), *(_DWORD *)(v29 + 36), v29 + 56, *(unsigned int *)(v29 + 44), *(_DWORD *)(v29 + 40), 0, 1, 0);
      v31 = 0;
      if (v32)
        return sub_22EBCD92C((uint64_t)a1, v42, v15, v41, a6, v31, a8, a9, v27, v28);
      v33 = v30;
      if (!v30)
        return sub_22EBCD92C((uint64_t)a1, v42, v15, v41, a6, v31, a8, a9, v27, v28);
      goto LABEL_32;
    }
    v33 = sub_22EA003D8(a1, v29, *(_DWORD *)(a7 + 24), a2, a6, 1, 0, v17, 1u, 0, 1u, 0);
    if (v33)
    {
LABEL_32:
      if (v33 >= 0x10)
      {
        v31 = 0;
        v36 = *(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF0);
        if (v36 && *(_BYTE *)(v36 + 16) == 57)
        {
          v33 = *(_QWORD *)(v36 + 8);
          v31 = *(uint64_t **)(v36 + 24);
        }
        if (v33 >= 0x10 && !v31)
          v31 = sub_22EF579A8(a1[11], v33, *(_DWORD *)(a7 + 24));
        return sub_22EBCD92C((uint64_t)a1, v42, v15, v41, a6, v31, a8, a9, v27, v28);
      }
      goto LABEL_33;
    }
    sub_22E8FCA40(a1, *(_DWORD *)(a7 + 24), 0x11E4u, 0, (uint64_t)v39);
    v37 = sub_22E8BAE44((uint64_t)v39, (uint64_t *)(a7 + 8));
    sub_22E8901B8(v37, (uint64_t *)&v40);
    sub_22E903BEC(v39);
    sub_22EE03478((uint64_t)a1);
    if (v38)
      return 1;
  }
LABEL_33:
  v31 = 0;
  return sub_22EBCD92C((uint64_t)a1, v42, v15, v41, a6, v31, a8, a9, v27, v28);
}

uint64_t sub_22EBCE6E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned __int8 *v8;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  BOOL v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v50;
  uint64_t v51;
  unsigned int v52[24];
  uint64_t v53;
  int v54;
  int v55;

  v8 = (unsigned __int8 *)a2;
  v10 = sub_22ED01A54((_QWORD *)a1, a2, 0, a3, a4);
  if ((v10 & 1) != 0)
    return 1;
  v11 = *(_WORD *)(a4 + 80) & 0x7F;
  v12 = -40;
  if (v11 > 0x46)
  {
    if (v11 != 83)
    {
      if (v11 == 71)
      {
        v12 = -56;
        goto LABEL_18;
      }
      if (v11 == 81)
        goto LABEL_18;
LABEL_13:
      v13 = v11 - 52;
      v14 = v11 - 33 >= 5;
      v15 = -48;
      if (!v14)
        v15 = -64;
      if (v13 >= 6)
        v12 = v15;
      else
        v12 = -72;
    }
  }
  else
  {
    if (v11 > 0x18)
      goto LABEL_12;
    if (v11 != 16)
    {
      if (((1 << v11) & 0x1066) != 0)
        goto LABEL_18;
      if (v11 != 24)
      {
LABEL_12:
        if (v11 == 70)
        {
          v12 = -64;
          goto LABEL_18;
        }
        goto LABEL_13;
      }
    }
    v12 = -48;
  }
LABEL_18:
  v16 = *(_QWORD *)(a4 + 72 + v12 + 16);
  v17 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 4) != 0)
    v17 = (_QWORD *)*v17;
  if (v17)
    v18 = v17 - 8;
  else
    v18 = 0;
  v19 = v18[16];
  if (!v19 || ((*(unsigned __int16 *)(v19 + 8) | (*(unsigned __int8 *)(v19 + 10) << 16)) & 0x100000) == 0)
    goto LABEL_59;
  v20 = *(_QWORD *)(*(_QWORD *)(a4 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v20)
    v21 = *(unsigned __int8 *)(v20 + 16) - 27 > 0xFFFFFFFD;
  else
    v21 = 0;
  if (!v21)
    v20 = sub_22F10CF48(v20);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) != 10)
    goto LABEL_59;
  if ((*v8 + 102) >= 0xF5u && (*(_DWORD *)v8 & 0x1FC0000) == 0x140000)
    v8 = (unsigned __int8 *)*((_QWORD *)v8 + 2);
  do
  {
    v22 = v8;
    v23 = *v8;
    if (v23 > 0xD5)
    {
      if (v23 == 233)
      {
        if ((*(_DWORD *)v8 & 0x7C0000) != 0x300000)
          goto LABEL_59;
        v23 = *(_DWORD *)v8;
        v25 = v8 + 16;
      }
      else
      {
        if (v23 != 214)
          break;
        v25 = v8 + 24;
      }
    }
    else if (v23 == 155)
    {
      if ((**((_DWORD **)v8 + 2) & 0x18000) != 0)
        goto LABEL_59;
      v25 = v8 + 24;
      if (!v8[48])
        v25 = v8 + 32;
      v23 = 155;
    }
    else
    {
      if (v23 != 176)
        break;
      v24 = *((unsigned int *)v8 + 5);
      if ((_DWORD)v24 == -1)
        goto LABEL_59;
      v25 = &v8[8 * v24 + 40];
      v23 = 176;
    }
    v8 = *(unsigned __int8 **)v25;
  }
  while (*(unsigned __int8 **)v25 != v22);
  if (v23 == 116)
    v23 = **((unsigned __int8 **)v22 + 3);
  if (v23 != 182)
  {
LABEL_59:
    v36 = v10 & 0xFFFFFFFFFFFFFFFELL;
    v37 = ((unint64_t)*(unsigned int *)(a3 + 28) >> 13) & 3 | a3;
    v50 = 0uLL;
    v51 = 0;
    v38 = sub_22EC25D24(a1, v10 & 0xFFFFFFFFFFFFFFFELL, 0, 0, 0, 0, 0, a4, v37, a5, &v50, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16848), 0, 0, 0, 0, 0);
    v39 = *(_QWORD *)(*(_QWORD *)(a4 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v39)
      v40 = *(unsigned __int8 *)(v39 + 16) - 27 > 0xFFFFFFFD;
    else
      v40 = 0;
    if (!v40)
      v39 = sub_22F10CF48(v39);
    *(_QWORD *)&v50 = *(_QWORD *)(v39 + 24);
    v41 = sub_22E8BBBD0(v50);
    v42 = *(_QWORD *)(a1 + 88);
    v43 = sub_22F1133DC((uint64_t *)&v50, v42);
    sub_22F0D60E4(v36);
    if (*(_QWORD *)(a1 + 1296) == *(_QWORD *)(a1 + 1288))
      v45 = 0;
    else
      v45 = *(_QWORD *)(a1 + 1296);
    v46 = (unsigned __int8 *)sub_22F060E14(v42, (uint64_t)v38, 0, 0, v43, v41, v44, v45, 0);
    v47 = *(_QWORD *)(*(_QWORD *)(a4 + 48) & 0xFFFFFFFFFFFFFFF0);
    if (!v47 || *(_BYTE *)(v47 + 16) != 26)
      v47 = sub_22F10CF48(v47);
    if ((sub_22E97FBB8(a1, a4, v46, v47) & 1) == 0)
    {
      v48 = sub_22F060FB4((uint64_t)v46);
      return sub_22EB346AC(a1, (unint64_t)v46, v48);
    }
    return 1;
  }
  *(_QWORD *)&v50 = 0;
  v54 = 3;
  v55 = 6;
  v53 = *(unsigned int *)(a1 + 1704);
  sub_22EB4DDB8(a1 + 3688, &v55, (int *)&v53, (__int16 *)(a1 + 1693), (uint64_t *)&v50, &v54);
  v26 = *(unsigned int *)(a1 + 3696);
  v27 = v26 - 2;
  v28 = *(_QWORD *)(a1 + 3688);
  v29 = *(_DWORD *)(v28 + 576 * (v26 - 2));
  if (v29 == 5)
  {
    *(_BYTE *)(v28 + 576 * v26 - 4) = *(_BYTE *)(v28 + 576 * v27 + 572);
    v30 = 1;
  }
  else if (v29 == 2)
  {
    *(_BYTE *)(v28 + 576 * v26 - 4) = 1;
    v30 = *(_BYTE *)(v28 + 576 * v27 + 573) != 0;
  }
  else
  {
    v30 = 0;
    *(_BYTE *)(v28 + 576 * v26 - 4) = 0;
  }
  v31 = v28 + 576 * v26;
  *(_BYTE *)(v31 - 3) = v30;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v31 - 560));
    sub_22EAEAE08(a1 + 1840, (uint64_t *)(v31 - 496));
  }
  v32 = v10 & 0xFFFFFFFFFFFFFFFELL;
  sub_22EFF605C(v32);
  v34 = sub_22F337270(a1, v33, v33, a4, v32);
  sub_22EB48E64(a1);
  if ((v34 & 1) != 0)
  {
    sub_22EFF605C(v32);
    sub_22E8FCA40((_QWORD *)a1, v35, 0x1641u, 0, (uint64_t)v52);
    sub_22E903BEC(v52);
  }
  return v34;
}

unint64_t sub_22EBCEBF8(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  int v4;
  unsigned __int8 *v5;
  _BOOL4 v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v25;
  _DWORD *v26;
  int v27;

  v2 = a2;
  v4 = *a2;
  if ((v4 & 0xFE) != 0x70)
  {
    if (v4 == 233)
    {
      if ((a2[2] & 0x70) != 0)
        goto LABEL_29;
      v5 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      if (*v5 != 161)
        goto LABEL_29;
      v6 = 0;
      v7 = 1;
      goto LABEL_15;
    }
    if (v4 != 141)
      goto LABEL_29;
    if ((*(_QWORD *)a2 & 0x3F00000000) != 0xF00000000)
      goto LABEL_29;
    v5 = *(unsigned __int8 **)&a2[8 * ((*(_QWORD *)a2 >> 18) & 1) + 8 + BYTE3(*(_QWORD *)a2)];
    if (*v5 != 161)
      goto LABEL_29;
    v6 = 0;
LABEL_14:
    v7 = 0;
LABEL_15:
    v8 = *((_QWORD *)v5 + 2);
    if (v8)
      v9 = (*(_DWORD *)(v8 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9;
    else
      v9 = 0;
    if (v9)
    {
      if ((v6 | v7) != 1
        || (v10 = *(_QWORD *)(v8 + 48), (v10 & 4) == 0) && (*(_BYTE *)((v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) == 0)
      {
        v25 = v8;
        v26 = 0;
        if (sub_22EA45010(a1 + 8848, &v25, &v26))
        {
          if (v26 != (_DWORD *)(*(_QWORD *)(a1 + 8848) + 16 * *(unsigned int *)(a1 + 8864)))
            --v26[2];
        }
      }
    }
    goto LABEL_29;
  }
  v5 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v5 + 1) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
    || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
  {
    if ((*(_DWORD *)a2 & 0xFC0000) != 0x540000)
      goto LABEL_29;
    v6 = 0;
  }
  else
  {
    if (((*(_DWORD *)a2 >> 18) & 0x3Fu) - 21 > 0xA)
      goto LABEL_29;
    v6 = ((*(_DWORD *)a2 >> 18) & 0x3Eu) - 22 < 0xA;
  }
  if (*v5 == 161)
    goto LABEL_14;
LABEL_29:
  v11 = *(_QWORD *)(*((_QWORD *)v2 + 1) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(v11 + 16) & 0xFE00000u) >= 0x8180001 && v11 != 0 && *(_DWORD *)(v11 + 16) == 11)
  {
    v14 = sub_22EB19A28(a1);
    if ((v14 & 1) != 0)
      return (unint64_t)v2;
    v2 = (unsigned __int8 *)(v14 & 0xFFFFFFFFFFFFFFFELL);
  }
  v15 = **(_QWORD **)(a1 + 72);
  if ((v2[1] & 3) != 0)
  {
    if ((v15 & 0x100) != 0)
    {
      if ((v15 & 0x200) == 0 || !sub_22EFFDA00(v2))
      {
        sub_22EB4E1D8((unsigned __int8 *)a1, v2);
        return (unint64_t)v2;
      }
      v23 = sub_22EB1A358(a1, v2, 0);
      if ((v23 & 1) != 0)
        return (unint64_t)v2;
    }
    else
    {
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (!v16
        || *(_BYTE *)(v16 + 16) != 44
        || (v17 = sub_22F114198(*(_QWORD *)(v16 + 24)), (*(_BYTE *)(v17 + 74) & 1) != 0)
        || *(_QWORD *)(v17 + 128) > 7uLL)
      {
        v18 = sub_22EB1B954(a1, v2);
        if ((v18 & 1) == 0)
        {
          v2 = (unsigned __int8 *)(v18 & 0xFFFFFFFFFFFFFFFELL);
          v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFFELL) + 8);
          v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          if (v20)
            v21 = (*(_DWORD *)(v20 + 16) & 0xFF800FF) == 86507531;
          else
            v21 = 0;
          if (!v21)
          {
            sub_22EFF605C(v18 & 0xFFFFFFFFFFFFFFFELL);
            v26 = &unk_24FAB6EF8;
            v27 = 3591;
            sub_22EE8B0B0(a1, v22, v19);
          }
        }
        return (unint64_t)v2;
      }
      v23 = sub_22E90092C(a1, (uint64_t)v2, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16392), 25, 0, 0);
    }
    return v23 & 0xFFFFFFFFFFFFFFFELL;
  }
  if ((v15 & 0x100) == 0
    && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 1) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 25 <= 1)
  {
    return sub_22EB1922C(a1, v2);
  }
  return (unint64_t)v2;
}

void sub_22EBCEF90(uint64_t *a1, unint64_t a2, __n128 a3)
{
  if (a2)
  {
    switch(*(_BYTE *)a2)
    {
      case 0x66:
        sub_22EC045E8((_QWORD **)a1, a2);
        break;
      case 0x67:
        sub_22EC04688((_QWORD **)a1, a2);
        break;
      case 0x68:
        sub_22EB63768((uint64_t)a1, a2);
        break;
      case 0x6B:
        sub_22EC0474C(a1, a2);
        break;
      case 0x6C:
        sub_22EC04804((_QWORD **)a1, a2);
        break;
      case 0x6D:
        sub_22EC049CC((_QWORD **)a1, a2);
        break;
      case 0x6E:
      case 0x84:
      case 0xAC:
      case 0xAD:
      case 0xC5:
        sub_22EC04A34((uint64_t)a1, a2);
        break;
      case 0x6F:
        sub_22EC04A3C(a1, a2);
        break;
      case 0x70:
        sub_22EC04B48(a1, a2);
        break;
      case 0x71:
        sub_22EC04CDC(a1, (_DWORD *)a2, a3);
        break;
      case 0x72:
        sub_22EC04DAC(a1, a2);
        break;
      case 0x73:
        sub_22EC05024((uint64_t)a1, a2);
        break;
      case 0x74:
        sub_22EC0510C(a1, a2);
        break;
      case 0x75:
      case 0x80:
      case 0x9A:
      case 0xA9:
      case 0xAA:
      case 0xAE:
      case 0xAF:
      case 0xB2:
      case 0xB5:
      case 0xC2:
      case 0xC3:
      case 0xCE:
      case 0xCF:
      case 0xE1:
      case 0xE2:
      case 0xE3:
        nullsub_910(a2);
        break;
      case 0x76:
        sub_22EC05168((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x77:
        sub_22EC0576C((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x78:
        sub_22EBE109C(a1, a2);
        break;
      case 0x79:
        sub_22EBE1174(a1, a2);
        break;
      case 0x7A:
        sub_22EC05AAC((uint64_t)a1, a2);
        break;
      case 0x7B:
        sub_22EC05C2C((uint64_t)a1, a2);
        break;
      case 0x7C:
        sub_22EC05F90(a1, a2);
        break;
      case 0x7D:
        sub_22EC061BC((uint64_t)a1, a2);
        break;
      case 0x7E:
        sub_22EC062CC(a1, a2);
        break;
      case 0x7F:
        sub_22EC06758(a1, a2);
        break;
      case 0x81:
        sub_22EC068CC((unsigned int **)a1, a2);
        break;
      case 0x82:
        sub_22EC06E04((uint64_t)a1, (uint64_t *)a2);
        break;
      case 0x83:
        sub_22EC070E0((_QWORD **)a1, a2);
        break;
      case 0x85:
        sub_22EBE293C(a1, a2);
        break;
      case 0x86:
        sub_22EC07188(a1, a2);
        break;
      case 0x87:
        sub_22EC071F4(a1, a2);
        break;
      case 0x88:
        sub_22EC0736C(a1, a2);
        break;
      case 0x89:
        sub_22EC07604((_QWORD **)a1, a2);
        break;
      case 0x8A:
        sub_22EC077DC(a1, (unsigned int *)a2);
        break;
      case 0x8B:
        sub_22EC079C4(a1, (unsigned int *)a2);
        break;
      case 0x8C:
      case 0x8E:
        sub_22EC07B30(a1, (unsigned int *)a2);
        break;
      case 0x8D:
        sub_22EC07B34(a1, (unsigned int *)a2);
        break;
      case 0x8F:
        sub_22EC08274(a1, a2);
        break;
      case 0x90:
        sub_22EC082E0((_QWORD **)a1, a2);
        break;
      case 0x91:
        sub_22EC08384(a1, a2);
        break;
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
        sub_22EC08440();
        break;
      case 0x98:
        sub_22EC08444(a1, a2);
        break;
      case 0x99:
        sub_22EC084E8((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x9B:
        sub_22EC08514(a1, a2);
        break;
      case 0x9C:
        sub_22EC085D8((_QWORD **)a1, a2);
        break;
      case 0x9D:
        sub_22EC086A4(a1, a2);
        break;
      case 0x9E:
        sub_22EC087C8((_QWORD **)a1, a2);
        break;
      case 0x9F:
        sub_22EC08860(a1, a2);
        break;
      case 0xA0:
        sub_22EC088B4(a1, a2);
        break;
      case 0xA1:
        sub_22EC08900(a1, a2);
        break;
      case 0xA2:
        sub_22EC08C20(a1, a2);
        break;
      case 0xA3:
        sub_22EC08C90(a1, a2);
        break;
      case 0xA4:
        sub_22EC08C9C((uint64_t)a1, a2);
        break;
      case 0xA6:
        sub_22EC09100(a1, a2);
        break;
      case 0xA7:
        sub_22EC09288((_QWORD **)a1, a2);
        break;
      case 0xA8:
        sub_22EC0939C((uint64_t)a1, (const void **)a2);
        break;
      case 0xAB:
        sub_22EC093C8((_QWORD **)a1, a2);
        break;
      case 0xB0:
        sub_22EC0945C(a1, a2);
        break;
      case 0xB1:
        sub_22EC09684((_QWORD **)a1, a2);
        break;
      case 0xB3:
        sub_22EC0974C((uint64_t)a1, a2);
        break;
      case 0xB4:
        sub_22EC097D0(a1, a2);
        break;
      case 0xB6:
        sub_22EC099E8(a1, a2);
        break;
      case 0xB7:
        sub_22EC0AF54((uint64_t)a1, a2);
        break;
      case 0xB8:
        sub_22EC0B060(a1, a2);
        break;
      case 0xB9:
        sub_22EC0B114((uint64_t)a1, a2);
        break;
      case 0xBA:
        sub_22EC0B200((uint64_t)a1, *(_QWORD *)(a2 + 16));
        break;
      case 0xBB:
        sub_22EC0B214((_QWORD **)a1, a2);
        break;
      case 0xBC:
        sub_22EC0B2D8(a1, a2);
        break;
      case 0xBD:
        sub_22EC0B89C(a1, a2);
        break;
      case 0xBF:
        sub_22EC0BB94(a1, a2);
        break;
      case 0xC0:
        sub_22EC0BCB4((_QWORD **)a1, a2);
        break;
      case 0xC1:
        sub_22EC0BE40((uint64_t)a1, a2);
        break;
      case 0xC4:
        sub_22EC0C25C(a1, a2);
        break;
      case 0xC6:
        sub_22EC0C2C0((_QWORD **)a1, a2);
        break;
      case 0xC7:
        sub_22EC0C3B0(a1, a2);
        break;
      case 0xC8:
        sub_22EC0C4AC(a1, a2);
        break;
      case 0xC9:
        sub_22EC0C87C(a1, a2);
        break;
      case 0xCA:
        sub_22EC0C964((_QWORD **)a1, a2);
        break;
      case 0xCB:
        sub_22EC0C9CC(a1, a2);
        break;
      case 0xCC:
        sub_22EB6B190(*a1, a2);
        break;
      case 0xCD:
        sub_22EC0CCC8((uint64_t)a1, a2);
        break;
      case 0xD0:
        sub_22EC0CE08(a1, a2);
        break;
      case 0xD1:
        sub_22EC0CEA8(a1, a2);
        break;
      case 0xD2:
        sub_22EC0D0AC((uint64_t)a1, (_QWORD *)a2);
        break;
      case 0xD3:
        sub_22EC0D110(a1, (unsigned int *)a2);
        break;
      case 0xD4:
        sub_22EC0D4D8((uint64_t)a1, (unsigned int *)a2);
        break;
      case 0xD5:
        sub_22EC0D8E4(a1, a2);
        break;
      case 0xD6:
        sub_22EC0D960((_QWORD **)a1, a2);
        break;
      case 0xD7:
        sub_22EC0D9C8(a1, a2);
        break;
      case 0xD8:
        sub_22F2F74C4(a1, (_DWORD *)a2);
        break;
      case 0xD9:
        sub_22EC0DAC4(a1, a2);
        break;
      case 0xDA:
        sub_22EC0DB3C(a1, a2);
        break;
      case 0xDB:
        sub_22EC0DCA0(a1, a2);
        break;
      case 0xDC:
        sub_22EC0E370((_QWORD **)a1, a2);
        break;
      case 0xDD:
        sub_22EC0E3E4(a1, a2);
        break;
      case 0xDE:
        sub_22EC0E648(a1, a2);
        break;
      case 0xDF:
        sub_22EBE8E04(*a1, a2);
        break;
      case 0xE0:
        sub_22EC0EB34(a1, a2);
        break;
      case 0xE4:
        sub_22EC0ECE0((_QWORD **)a1, a2);
        break;
      case 0xE5:
        sub_22EC0EDA0((_QWORD **)a1, a2);
        break;
      case 0xE6:
        sub_22EC0EE54(a1, (_DWORD *)a2);
        break;
      case 0xE7:
        sub_22F32D6EC(*a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 16), 0, 0, 0);
        break;
      case 0xE8:
        sub_22EC0F4AC(a1, a2);
        break;
      case 0xE9:
        sub_22EC0F684(a1, a2);
        break;
      case 0xEA:
        sub_22EC0F728((_QWORD **)a1, a2);
        break;
      default:
        return;
    }
  }
}

uint64_t sub_22EBCF22C(uint64_t a1, unint64_t a2, unsigned int a3, int a4, char a5)
{
  unint64_t v5;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  unint64_t v19;
  __int16 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  BOOL *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;

  v5 = a2 & 0xFFFFFFFFFFFFFFFELL;
  if ((a2 & 0xFFFFFFFFFFFFFFFELL) == 0 || (sub_22EE67384(a1, a2 & 0xFFFFFFFFFFFFFFFELL, 0) & 1) != 0)
    return 1;
  if (a4)
  {
    if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 140) & 0x40000000000000) != 0)
    {
      v13 = *(_QWORD *)(a1 + 88);
      if (*(_QWORD *)(v5 + 8) == *(_QWORD *)(v13 + 16856))
      {
        v24 = sub_22F36E1B8(*(_QWORD *)(a1 + 88));
        v25 = *(_QWORD *)(v24 + 48);
        v26 = v25 ? v25 & 0xFFFFFFFFFFFFFFF0 : sub_22EF6462C(v13, v24);
        v36 = (_QWORD *)a1;
        v37 = (BOOL *)v26;
        if ((sub_22EB53364((uint64_t)&v36, (unsigned __int8 *)v5) & 1) != 0)
          return 1;
      }
    }
    v14 = sub_22EB19A28(a1);
    if ((v14 & 1) != 0)
      return 1;
    v15 = sub_22EBCEBF8(a1, (unsigned __int8 *)(v14 & 0xFFFFFFFFFFFFFFFELL));
    if ((v15 & 1) != 0)
      return 1;
    v5 = v15 & 0xFFFFFFFFFFFFFFFELL;
    sub_22ED2B458(a1, (unsigned __int8 *)(v15 & 0xFFFFFFFFFFFFFFFELL), 7129);
  }
  v11 = 1;
  v16 = sub_22EBBCB14(a1, v5, 0, 1, sub_22F2E6FA4, &v36);
  if ((v16 & 1) == 0)
  {
    v17 = (int *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    sub_22E98B2B0(a1, (unsigned __int8 *)(v16 & 0xFFFFFFFFFFFFFFFELL), a3, a5);
    v18 = sub_22E904A34(a1, 1);
    v19 = *(_QWORD *)(a1 + 216);
    while (v19)
    {
      v20 = *(_WORD *)(v19 + 8);
      v21 = v20 & 0x7F;
      if (v21 != 2)
      {
        if ((v20 & 0x7Eu) - 54 > 3)
          return (uint64_t)sub_22EBCCCF0(a1, v17);
        v23 = -40;
        if (v21 > 70)
        {
          if (v21 != 83)
          {
            if (v21 == 71)
            {
              v23 = -56;
            }
            else if (v21 != 81)
            {
              goto LABEL_34;
            }
          }
        }
        else
        {
          if (v21 > 0x18)
            goto LABEL_33;
          if (v21 == 16)
            goto LABEL_21;
          if (((1 << v21) & 0x1066) == 0)
          {
            if (v21 == 24)
            {
LABEL_21:
              v23 = -48;
            }
            else
            {
LABEL_33:
              if (v21 == 70)
              {
                v23 = -64;
              }
              else
              {
LABEL_34:
                v27 = v21 - 52;
                v28 = (v21 - 33) >= 5;
                v29 = -48;
                if (!v28)
                  v29 = -64;
                if (v27 >= 6)
                  v23 = v29;
                else
                  v23 = -72;
              }
            }
          }
        }
        v30 = *(_QWORD *)(v19 + v23 + 16);
        v31 = (_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF8);
        if ((v30 & 4) != 0)
          v31 = (_QWORD *)*v31;
        if (v31)
        {
          v32 = v31[8];
          if (v32)
          {
            if (((*(unsigned __int16 *)(v32 + 8) | (*(unsigned __int8 *)(v32 + 10) << 16)) & 0x100000) != 0)
            {
              v33 = *(_QWORD *)(v19 - 32);
              if ((v33 & 7) == 6
                && *(_DWORD *)(v33 & 0xFFFFFFFFFFFFFFF8) == 42
                && v18
                && (*(_DWORD *)(v18 + 1600) || *(_DWORD *)(v18 + 1840)))
              {
                v40 = v18;
                v39 = (*(_DWORD *)a2 & 0x4000) != 0;
                v36 = &v40;
                v37 = &v39;
                v38 = a1;
                sub_22E8FC0A4(v18, (uint64_t (*)(uint64_t, _QWORD, unsigned __int8 *))sub_22EC034C0, (uint64_t)&v36);
                v34 = v40;
                if (*(_DWORD *)(v40 + 1840))
                {
                  v35 = sub_22EC521F4(*(uint64_t **)(a1 + 1896), *(_DWORD *)(a1 + 1904), 0, a1);
                  v34 = v40;
                  if ((v35 & 0xFF00000000) != 0)
                  {
                    LODWORD(v36) = v35;
                    sub_22EBBBBEC(a1, *(_DWORD *)(v40 + 1840), 0, 1, (int *)&v36, 0);
                    v34 = v40;
                  }
                }
                *(_DWORD *)(v34 + 1600) = 0;
                *(_DWORD *)(v34 + 1840) = 0;
              }
            }
          }
        }
        return (uint64_t)sub_22EBCCCF0(a1, v17);
      }
      v22 = *(_QWORD *)(v19 - 24);
      v19 = v22 & 0xFFFFFFFFFFFFFFF8;
      if ((v22 & 4) != 0)
        v19 = *(_QWORD *)v19;
    }
    return (uint64_t)sub_22EBCCCF0(a1, v17);
  }
  return v11;
}

uint64_t sub_22EBCF54C(uint64_t a1, uint64_t a2, int a3, int a4, unint64_t a5)
{
  int v9;
  unint64_t v10;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  unsigned int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void *v24;
  uint64_t v25;
  _QWORD v26[8];
  unsigned int v27;
  char v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[4];

  v9 = 0;
  v10 = 0;
  v31[3] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 1) & 0x40) == 0 && (a5 & 2) == 0)
  {
    if (a4 && (sub_22EB17190(a1, a2), v12 == 2))
    {
      v10 = 0;
      v9 = 2;
    }
    else if (a5 >= 8 && (a5 & 4) != 0)
    {
      v10 = 0;
      v9 = 3;
    }
    else
    {
      v10 = 0;
      v9 = 5;
      if (a5 >= 8 && (a5 & 4) == 0)
      {
        v13 = sub_22EF67758(*(_QWORD *)(a1 + 88), a2);
        v14 = v13 & 7 | *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 8);
        v29 = v31;
        v30 = 0x100000000;
        LODWORD(v24) = 1;
        v25 = v14;
        v15 = sub_22E4EF088((uint64_t)&v29, (unint64_t)&v24, 1);
        v16 = (char *)v29 + 24 * v30;
        v17 = *(_OWORD *)v15;
        *((_QWORD *)v16 + 2) = *(_QWORD *)(v15 + 16);
        *(_OWORD *)v16 = v17;
        LODWORD(v30) = v30 + 1;
        v24 = v26;
        v27 = 0;
        v28 = 0;
        v26[0] = v29;
        v26[1] = v30;
        v25 = 0x400000001;
        if (sub_22EFE90A8(a5 & 0xFFFFFFFFFFFFFFF8))
        {
          v18 = 0;
          do
            v27 = ++v18;
          while (v18 < sub_22EFE90A8(a5 & 0xFFFFFFFFFFFFFFF8));
        }
        v19 = *(_QWORD *)((a5 & 0xFFFFFFFFFFFFFFF8) + 16);
        v20 = *(_BYTE *)(v19 + 60);
        v21 = v19 + 80;
        if ((v20 & 4) == 0)
          v21 = 0;
        v10 = sub_22EE0A68C(a1, *(_QWORD *)(v21 + 72), &v24) & 0xFFFFFFFFFFFFFFFELL;
        if ((*(_BYTE *)(*(_QWORD *)(v10 + 96) + 8) & 1) != 0)
          v9 = 5;
        else
          v9 = 4;
        if (v24 != v26)
          free(v24);
        if (v29 != v31)
          free(v29);
      }
    }
  }
  v22 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 48, 3);
  return sub_22F31A460(v22, a2, a3, a4, a5, v9, v10);
}

unint64_t sub_22EBCF790(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t result;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v18;
  int v19;
  int v20;
  _QWORD *v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _BYTE v60[96];
  unint64_t v61;
  _BYTE v62[96];
  unsigned int v63[26];

  v4 = *(_QWORD *)(a1 + 8);
  v59 = *(_QWORD **)a1;
  v5 = *(unsigned int *)(a2 + 16);
  if (!(_DWORD)v5)
    goto LABEL_2;
  v58 = *(_QWORD **)(a1 + 8);
  v12 = 0;
  v13 = *(_QWORD **)(a2 + 8);
  v14 = 8 * v5;
  do
  {
    v15 = *v13 & 0xFFFFFFFFFFFFFFFCLL;
    v16 = *(_DWORD *)(v15 + 28) & 0x7F;
    if (v16 > 0x2F || ((1 << v16) & 0xC00000060000) == 0)
    {
      v19 = *(_DWORD *)(v15 + 28) & 0x7F;
      v18 = *v13 & 0xFFFFFFFFFFFFFFFCLL;
    }
    else
    {
      v18 = sub_22EFBAEA4(*v13 & 0xFFFFFFFFFFFFFFFCLL);
      v19 = *(_DWORD *)(v18 + 28) & 0x7F;
    }
    if ((v19 - 43) >= 0xFFFFFFF6)
    {
      if (*v59 < 0x10uLL || (v21 = (_QWORD *)(*v59 & 0xFFFFFFFFFFFFFFF0), (*(_BYTE *)(*v21 + 17) & 4) != 0))
      {
        v20 = 1;
      }
      else
      {
        v22 = *(_QWORD *)(v18 + 48);
        if (!v22)
        {
          v22 = sub_22EF6462C(v58[11], v18);
          v21 = (_QWORD *)(*v59 & 0xFFFFFFFFFFFFFFF0);
          v16 = *(_DWORD *)(v15 + 28) & 0x7F;
        }
        v20 = *(_QWORD *)(*(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(v21[1] & 0xFFFFFFFFFFFFFFF0);
      }
    }
    else
    {
      v20 = 0;
    }
    if (v15 && v16 - 38 >= 0xFFFFFFFD && sub_22EFC3A88(v15))
    {
      v23 = *(_WORD *)(v15 + 72) & 0x7F;
      v24 = -40;
      if (v23 > 0x46)
      {
        if (v23 == 83)
          goto LABEL_48;
        if (v23 == 71)
        {
          v24 = -56;
          goto LABEL_48;
        }
        if (v23 != 81)
        {
LABEL_42:
          v25 = v23 - 52;
          v26 = v23 - 33 >= 5;
          v27 = -64;
          if (v26)
            v27 = -48;
          v26 = v25 >= 6;
          v24 = -72;
          if (v26)
            v24 = v27;
        }
      }
      else
      {
        if (v23 > 0x18)
          goto LABEL_41;
        if (v23 == 16)
        {
LABEL_33:
          v24 = -48;
          goto LABEL_48;
        }
        if (((1 << v23) & 0x1066) == 0)
        {
          if (v23 == 24)
            goto LABEL_33;
LABEL_41:
          if (v23 == 70)
          {
            v24 = -64;
            goto LABEL_48;
          }
          goto LABEL_42;
        }
      }
LABEL_48:
      v28 = *(_QWORD *)(v15 + 64 + v24 + 16);
      v29 = v28 & 0xFFFFFFFFFFFFFFF8;
      if ((v28 & 4) != 0)
        v29 = *(_QWORD *)v29;
      v30 = *(_WORD *)(v29 + 8) & 0x7F;
      v31 = -40;
      if (v30 > 0x46)
      {
        if (v30 != 83)
        {
          if (v30 == 71)
          {
            v31 = -56;
            goto LABEL_65;
          }
          if (v30 == 81)
            goto LABEL_65;
LABEL_61:
          if (v30 - 52 < 6)
          {
            v31 = -72;
          }
          else
          {
            v31 = -64;
            if (v30 - 33 >= 5)
              v31 = -48;
          }
        }
      }
      else
      {
        if (v30 > 0x18)
          goto LABEL_60;
        if (v30 != 16)
        {
          if (((1 << v30) & 0x1066) != 0)
            goto LABEL_65;
          if (v30 != 24)
          {
LABEL_60:
            if (v30 == 70)
            {
              v31 = -64;
              goto LABEL_65;
            }
            goto LABEL_61;
          }
        }
        v31 = -48;
      }
LABEL_65:
      v15 = v29 + v31;
    }
    v32 = *(_QWORD *)(a1 + 16);
    v33 = (const void *)(*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)v15 + 32))(v15, v18);
    sub_22E3BA850(v32, v33);
    if (v34)
    {
      v35 = *(_QWORD *)(a1 + 24);
      v36 = *(unsigned int *)(v35 + 8);
      if (v36 >= *(unsigned int *)(v35 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v36 = *(unsigned int *)(v35 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v35 + 8 * v36) = v15;
      ++*(_DWORD *)(v35 + 8);
    }
    v12 += v20;
    ++v13;
    v14 -= 8;
  }
  while (v14);
  v6 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 == 5)
  {
    v4 = (uint64_t)v58;
    if (v12 == 1)
    {
      sub_22E8FCA40(v58, **(_DWORD **)(a1 + 32), 0x1464u, 0, (uint64_t)v63);
      sub_22E903BEC(v63);
      if (*(_DWORD *)(a2 + 16))
      {
        v37 = 0;
        v38 = *(uint64_t **)(a2 + 8);
        while (2)
        {
          v39 = *v38;
          while (1)
          {
            v40 = v39 & 0xFFFFFFFFFFFFFFFCLL;
            v41 = *(_DWORD *)((v39 & 0xFFFFFFFFFFFFFFFCLL) + 28) & 0x7F;
            if (v41 > 0x2F || ((1 << v41) & 0xC00000060000) == 0)
            {
              v43 = v40;
            }
            else
            {
              v43 = sub_22EFBAEA4(v40);
              v41 = *(_DWORD *)(v43 + 28) & 0x7F;
            }
            if (v41 - 43 >= 0xFFFFFFF6)
            {
              sub_22E8FCA40(v58, *(_DWORD *)(v40 + 24), 0x15B8u, 0, (uint64_t)v62);
              v45 = *(_QWORD *)(v43 + 48);
              if (v45)
                v46 = v45 & 0xFFFFFFFFFFFFFFF0;
              else
                v46 = sub_22EF6462C(v58[11], v43);
              v61 = v46;
              sub_22E8901B8((uint64_t)v62, (uint64_t *)&v61);
              v44 = (unsigned int *)v62;
            }
            else
            {
              sub_22E8FCA40(v58, *(_DWORD *)(v40 + 24), 0x15B7u, 0, (uint64_t)v60);
              v44 = (unsigned int *)v60;
            }
            sub_22E903BEC(v44);
            v47 = *(_DWORD *)(v40 + 28) & 0x7F;
            if (v47 <= 0x2F && ((1 << v47) & 0xC00000060000) != 0)
            {
              v40 = sub_22EFBAEA4(v40);
              v47 = *(_DWORD *)(v40 + 28) & 0x7F;
            }
            if (v47 - 43 >= 0xFFFFFFF6)
            {
              if (*v59 < 0x10uLL)
                break;
              v49 = (_QWORD *)(*v59 & 0xFFFFFFFFFFFFFFF0);
              if ((*(_BYTE *)(*v49 + 17) & 4) != 0)
                break;
              v50 = *(_QWORD *)(v40 + 48);
              if (!v50)
              {
                v50 = sub_22EF6462C(v58[11], v40);
                v49 = (_QWORD *)(*v59 & 0xFFFFFFFFFFFFFFF0);
              }
              if (*(_QWORD *)(*(_QWORD *)((v50 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(v49[1] & 0xFFFFFFFFFFFFFFF0))
                break;
            }
            v51 = *(_QWORD *)(a2 + 8);
            v52 = *(unsigned int *)(a2 + 16);
            v39 = *(_QWORD *)(v51 + 8 * v52 - 8);
            LODWORD(v52) = v52 - 1;
            *(_DWORD *)(a2 + 16) = v52;
            *v38 = v39;
            v37 = 1;
            if (v38 == (uint64_t *)(v51 + 8 * v52))
              goto LABEL_108;
          }
          if (++v38 != (uint64_t *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a2 + 16)))
            continue;
          break;
        }
        if (v37)
LABEL_108:
          sub_22EA3DA00(a2);
      }
LABEL_2:
      v6 = *(_DWORD *)a2;
    }
  }
  else
  {
    v4 = (uint64_t)v58;
  }
  if (v6 == 5)
    **(_BYTE **)(a1 + 40) = 1;
  result = sub_22F31CE68(a2);
  if (result)
  {
    v8 = result;
    v9 = *(_DWORD *)(result + 28) & 0x7F;
    v10 = v9 > 0x2F || ((1 << v9) & 0xC00000060000) == 0;
    v11 = result;
    if (!v10)
    {
      v11 = sub_22EFBAEA4(result);
      v9 = *(_DWORD *)(v11 + 28) & 0x7F;
    }
    if (v9 - 43 < 0xFFFFFFF6)
      return 0;
    if (*v59 < 0x10uLL)
      goto LABEL_114;
    v53 = (_QWORD *)(*v59 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(*v53 + 17) & 4) != 0)
      goto LABEL_114;
    v54 = *(_QWORD *)(v11 + 48);
    if (!v54)
    {
      v54 = sub_22EF6462C(*(_QWORD *)(v4 + 88), v11);
      v53 = (_QWORD *)(*v59 & 0xFFFFFFFFFFFFFFF0);
    }
    if (*(_QWORD *)(*(_QWORD *)((v54 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(v53[1] & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_114:
      v55 = *(_QWORD *)(v8 + 48);
      if (v55)
        v56 = v55 & 0xFFFFFFFFFFFFFFF0;
      else
        v56 = sub_22EF6462C(*(_QWORD *)(v4 + 88), v8);
      if ((*(_DWORD *)(v8 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
        sub_22EB4E494(v4, *(unsigned int *)(v8 + 24), v8, 0);
      else
        *(_DWORD *)(v8 + 28) |= 0x800u;
      v57 = sub_22EF579A8(*(_QWORD *)(v4 + 88), v56, **(_DWORD **)(a1 + 32));
      return sub_22EE7D030(v4, v56, (uint64_t)v57);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

double sub_22EBCFE20(uint64_t a1, uint64_t a2, char a3, void *__src, size_t __len)
{
  uint64_t v5;
  __int128 *p_dst;
  size_t v10;
  size_t v11;
  double result;
  __int128 __dst;
  unint64_t v14;

  *(_QWORD *)(a1 + 24) = 0;
  v5 = a1 + 24;
  *(_BYTE *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = a3;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v10 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v10 = __len | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v14 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v14) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)v5);
  result = *(double *)&__dst;
  *(_OWORD *)v5 = __dst;
  *(_QWORD *)(v5 + 16) = v14;
  return result;
}

uint64_t sub_22EBCFF08(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 2)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v9 = &v13;
    if ((*(_QWORD *)(a1 + 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v13 = *(_QWORD *)(a1 + 8);
      v9 = &v14;
    }
    if (a2 >= 2)
    {
      *(_DWORD *)a1 = v6 & 0xFFFFFFFE;
      v10 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * a2, 8);
      *(_QWORD *)(a1 + 16) = v10;
    }
    return sub_22F332EB0(a1, &v13, v9);
  }
  else
  {
    v7 = *(uint64_t **)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (a2 > 1)
    {
      v12 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * a2, 8);
      *(_QWORD *)(a1 + 16) = v12;
    }
    else
    {
      *(_DWORD *)a1 = v6 | 1;
    }
    sub_22F332EB0(a1, v7, &v7[v8]);
    return llvm::deallocate_buffer((llvm *)v7, (void *)(8 * v8));
  }
}

void sub_22EBD0064(_QWORD *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  _BYTE v15[24];

  sub_22F25884C((uint64_t)v15, (uint64_t)a1, a2);
  if (v15[16])
  {
    v5 = (uint64_t *)a1[4];
    v4 = a1[5];
    if ((unint64_t)v5 >= v4)
    {
      v7 = (_QWORD *)a1[3];
      v8 = v5 - v7;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61)
        abort();
      v10 = v4 - (_QWORD)v7;
      if (v10 >> 2 > v9)
        v9 = v10 >> 2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 61)
          sub_22E3B3F8C();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = (uint64_t *)&v12[8 * v8];
      *v13 = *a2;
      v6 = v13 + 1;
      if (v5 != v7)
      {
        do
        {
          v14 = *--v5;
          *--v13 = v14;
        }
        while (v5 != v7);
        v5 = (uint64_t *)a1[3];
      }
      a1[3] = v13;
      a1[4] = v6;
      a1[5] = &v12[8 * v11];
      if (v5)
        operator delete(v5);
    }
    else
    {
      *v5 = *a2;
      v6 = v5 + 1;
    }
    a1[4] = v6;
  }
}

unint64_t sub_22EBD0174(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5)
{
  unint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  const void *v15;
  char v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  const void *v22;

  result = sub_22E46A3A0(a1);
  if (result != v10)
  {
    v11 = result;
    v12 = v10;
    do
    {
      v13 = *(_QWORD *)(**(_QWORD **)(v11 + 16) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v13 + 8) & 0xF) != 0)
        v13 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v11 + 16));
      v14 = sub_22F10C2A4(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0));
      if (v14)
      {
        if ((*(_DWORD *)(v14 + 28) & 0x7Fu) - 35 >= 3)
          v15 = 0;
        else
          v15 = (const void *)v14;
      }
      else
      {
        v15 = 0;
      }
      v22 = v15;
      if ((*(_BYTE *)(v11 + 12) & 1) == 0 || (sub_22E3BA850(a3, v15), v16))
      {
        v21 = sub_22F29449C(a2, (uint64_t *)&v22);
        ++*((_DWORD *)v21 + 2);
        if (!a5)
          goto LABEL_16;
      }
      else if (!a5)
      {
        goto LABEL_16;
      }
      v17 = *(unsigned __int8 *)(v11 + 12);
      v18 = (v17 >> 2) & 3;
      v19 = v17 & 2;
      if (v18 != 3)
        v19 = v18;
      if (!v19)
      {
        sub_22EBD0064(a4, (uint64_t *)&v22);
        v20 = 1;
        goto LABEL_17;
      }
LABEL_16:
      v20 = 0;
LABEL_17:
      result = sub_22EBD0174(v15, a2, a3, a4, v20);
      v11 += 24;
    }
    while (v11 != v12);
  }
  return result;
}

unsigned int *sub_22EBD02B8(unsigned int *result, unsigned int a2, uint64_t a3, int a4)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  char *v7;
  char *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;

  *(_BYTE *)result = -123;
  if (byte_255E04EB3)
  {
    v12 = result;
    v11 = a3;
    v9 = a2;
    v10 = a4;
    v7 = sub_22F0D3748(133);
    a4 = v10;
    a2 = v9;
    a3 = v11;
    v8 = v7;
    result = v12;
    ++*((_DWORD *)v8 + 2);
  }
  v4 = *result;
  *((_QWORD *)result + 1) = a3;
  if (a4)
    v5 = 0x40000;
  else
    v5 = 0;
  v6 = v4 & 0xFFF800FF | v5;
  *result = v6;
  result[1] = a2;
  *result = v6 & 0xFFFC3FFF | ((((((int)(*(_DWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 16) << 21) >> 31) & 0xC | (*(_DWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 16) >> 8) & 0x12u) >> 1) & 0xF) << 14);
  return result;
}

uint64_t *sub_22EBD0370(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;

  if (a1 != a2)
  {
    v4 = *a2;
    if ((unint64_t)*a2 >= 8)
    {
      v5 = v4 & 0xFFFFFFFFFFFFFFF8;
      if ((v4 & 4) == 0 || !v5 || *(_DWORD *)(v5 + 8))
      {
        v6 = *a1;
        if ((*a1 & 4) != 0)
        {
          v7 = v6 & 0xFFFFFFFFFFFFFFF8;
          if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            if ((v4 & 4) == 0)
            {
              *(_DWORD *)(v7 + 8) = 0;
              if (*(_DWORD *)(v7 + 12))
              {
                v8 = 0;
              }
              else
              {
                v11 = v4 & 0xFFFFFFFFFFFFFFF8;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v5 = v11;
                v8 = *(unsigned int *)(v7 + 8);
              }
              *(_QWORD *)(*(_QWORD *)v7 + 8 * v8) = v5;
              ++*(_DWORD *)(v7 + 8);
              goto LABEL_20;
            }
            if (*(_QWORD *)v7 != v7 + 16)
              free(*(void **)v7);
            MEMORY[0x2348A0E9C](v7, 0x1080C40ED926357);
            v4 = *a2;
          }
        }
        *a1 = v4;
LABEL_20:
        *a2 = 0;
        return a1;
      }
    }
    if ((*a1 & 4) != 0)
    {
      v9 = *a1 & 0xFFFFFFFFFFFFFFF8;
      if (v9)
        *(_DWORD *)(v9 + 8) = 0;
    }
    else
    {
      *a1 = 0;
    }
  }
  return a1;
}

unsigned int *sub_22EBD0484@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v12;
  unsigned int v13[24];
  uint64_t v14;

  v14 = a4;
  sub_22E8FCA40(a2, a3, 0xAA0u, 0, (uint64_t)v13);
  v7 = sub_22E8901B8((uint64_t)v13, &v14);
  sub_22F0D4E74(*(_QWORD *)(a1 + 16));
  v12 = v8;
  v9 = sub_22E8906A0(v7, &v12);
  v10 = *(_OWORD *)(v9 + 9);
  *(_OWORD *)a5 = *(_OWORD *)v9;
  *(_OWORD *)(a5 + 9) = v10;
  *(_BYTE *)(a5 + 32) = 0;
  *(_BYTE *)(a5 + 80) = 0;
  if (*(_BYTE *)(v9 + 80))
    sub_22E907424(a5 + 32, v9 + 32);
  *(_QWORD *)(a5 + 88) = *(_QWORD *)(v9 + 88);
  return sub_22E903BEC(v13);
}

unsigned int *sub_22EBD053C@<X0>(_QWORD *a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned int v10[24];
  uint64_t v11;
  uint64_t v12;

  v11 = a4;
  v12 = a3;
  sub_22E8FCA40(a1, a2, 0xA9Fu, 0, (uint64_t)v10);
  v6 = sub_22E8901B8((uint64_t)v10, &v12);
  v7 = sub_22E8901B8(v6, &v11);
  v8 = *(_OWORD *)(v7 + 9);
  *(_OWORD *)a5 = *(_OWORD *)v7;
  *(_OWORD *)(a5 + 9) = v8;
  *(_BYTE *)(a5 + 32) = 0;
  *(_BYTE *)(a5 + 80) = 0;
  if (*(_BYTE *)(v7 + 80))
    sub_22E907424(a5 + 32, v7 + 32);
  *(_QWORD *)(a5 + 88) = *(_QWORD *)(v7 + 88);
  return sub_22E903BEC(v10);
}

unsigned int *sub_22EBD05D0@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  BOOL v10;
  unsigned int v11[24];
  uint64_t v12;

  v12 = a3;
  sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x1545u, 0, (uint64_t)v11);
  v10 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 44;
  v6 = sub_22E894E38((uint64_t)v11, (unsigned __int8 *)&v10);
  v7 = sub_22E8901B8(v6, &v12);
  v8 = *(_OWORD *)(v7 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v7;
  *(_OWORD *)(a4 + 9) = v8;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v7 + 80))
    sub_22E907424(a4 + 32, v7 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v7 + 88);
  return sub_22E903BEC(v11);
}

unsigned int *sub_22EBD068C@<X0>(_QWORD *a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  __int128 v6;
  unsigned int v8[24];
  uint64_t v9;

  v9 = a3;
  sub_22E8FCA40(a1, a2, 0xA9Eu, 0, (uint64_t)v8);
  v5 = sub_22E8901B8((uint64_t)v8, &v9);
  v6 = *(_OWORD *)(v5 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v5;
  *(_OWORD *)(a4 + 9) = v6;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v5 + 80))
    sub_22E907424(a4 + 32, v5 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v5 + 88);
  return sub_22E903BEC(v8);
}

unsigned int *sub_22EBD0718@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  BOOL v10;
  unsigned int v11[24];
  uint64_t v12;

  v12 = a3;
  sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x1545u, 0, (uint64_t)v11);
  v10 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 44;
  v6 = sub_22E894E38((uint64_t)v11, (unsigned __int8 *)&v10);
  v7 = sub_22E8901B8(v6, &v12);
  v8 = *(_OWORD *)(v7 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v7;
  *(_OWORD *)(a4 + 9) = v8;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v7 + 80))
    sub_22E907424(a4 + 32, v7 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v7 + 88);
  return sub_22E903BEC(v11);
}

unsigned int *sub_22EBD07D4@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  BOOL v13;
  unsigned int v14[24];
  uint64_t v15;
  uint64_t v16;

  v15 = a4;
  v16 = a3;
  if ((**(_QWORD **)(a1 + 72) & 0x200) != 0)
    v7 = 6430;
  else
    v7 = 5178;
  sub_22E8FCA40((_QWORD *)a1, a2, v7, 0, (uint64_t)v14);
  v8 = sub_22E8901B8((uint64_t)v14, &v16);
  v13 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 44;
  v9 = sub_22E894E38(v8, (unsigned __int8 *)&v13);
  v10 = sub_22E8901B8(v9, &v15);
  v11 = *(_OWORD *)(v10 + 9);
  *(_OWORD *)a5 = *(_OWORD *)v10;
  *(_OWORD *)(a5 + 9) = v11;
  *(_BYTE *)(a5 + 32) = 0;
  *(_BYTE *)(a5 + 80) = 0;
  if (*(_BYTE *)(v10 + 80))
    sub_22E907424(a5 + 32, v10 + 32);
  *(_QWORD *)(a5 + 88) = *(_QWORD *)(v10 + 88);
  return sub_22E903BEC(v14);
}

void sub_22EBD08B0()
{
  JUMPOUT(0x2348A0E9CLL);
}

unsigned int *sub_22EBD08C4@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int v10;
  unsigned int v11[24];
  uint64_t v12;

  v12 = a3;
  sub_22E8FCA40((_QWORD *)a1, a2, 0xAA2u, 0, (uint64_t)v11);
  v10 = (**(_DWORD **)(a1 + 72) >> 9) & 1;
  v6 = sub_22E89519C((uint64_t)v11, (unsigned int *)&v10);
  v7 = sub_22E8901B8(v6, &v12);
  v8 = *(_OWORD *)(v7 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v7;
  *(_OWORD *)(a4 + 9) = v8;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v7 + 80))
    sub_22E907424(a4 + 32, v7 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v7 + 88);
  return sub_22E903BEC(v11);
}

uint64_t sub_22EBD096C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v5;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  *(_BYTE *)a1 = -125;
  if (byte_255E04EB3)
  {
    v9 = a2;
    v10 = a4;
    v8 = a3;
    v7 = sub_22F0D3748(131);
    a3 = v8;
    a2 = v9;
    a4 = v10;
    ++*((_DWORD *)v7 + 2);
  }
  v5 = *(_DWORD *)a1 & 0xFFFC00FF;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)a1 = v5;
  *(_DWORD *)(a1 + 4) = a4;
  *(_DWORD *)a1 = v5 & 0xFFFC1FFF | ((sub_22EFB2698(a1) & 0x1F) << 13);
  return a1;
}

uint64_t sub_22EBD09F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v2)
    v3 = *(_BYTE *)(v2 + 16) == 26;
  else
    v3 = 0;
  if ((v3
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
     && (v5 = a2, v2 = sub_22F10CF48(v2), a2 = v5, v2))
    && (*(_DWORD *)(v2 + 20) & 0x3FFF80) != 0)
  {
    return sub_22F112268(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 120) + 8) + 48) & 0xFFFFFFFFFFFFFFF0));
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22EBD0A88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v2)
    v3 = *(_BYTE *)(v2 + 16) == 26;
  else
    v3 = 0;
  if ((v3
     || (v5 = a2, *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
     && (v2 = sub_22F10CF48(v2), a2 = v5, v2))
    && (*(_DWORD *)(v2 + 20) & 0x3FFF80) != 0)
  {
    return sub_22F112268(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 120) + 8)
                                                             + 48) & 0xFFFFFFFFFFFFFFF0)) ^ 1;
  }
  else
  {
    return 1;
  }
}

unsigned __int8 *sub_22EBD0B1C(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;
  unsigned __int8 **v3;

  result = sub_22EFFA6B0(a1);
  v2 = *result;
  if (v2 != 126)
  {
    if (v2 != 180)
      return 0;
    v3 = (unsigned __int8 **)*((_QWORD *)result + 2);
    if (((*((_QWORD *)result + 3) - (_QWORD)v3) & 0x7FFFFFFF8) != 8)
      return 0;
    result = sub_22EFFA6B0(*v3);
    if (*result != 126)
      return 0;
  }
  return result;
}

unsigned int *sub_22EBD0B74@<X0>(_QWORD *a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  __int128 v6;
  unsigned int v8[24];
  uint64_t v9;

  v9 = a3;
  sub_22E8FCA40(a1, a2, 0xC9Fu, 0, (uint64_t)v8);
  v5 = sub_22E8901B8((uint64_t)v8, &v9);
  v6 = *(_OWORD *)(v5 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v5;
  *(_OWORD *)(a4 + 9) = v6;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v5 + 80))
    sub_22E907424(a4 + 32, v5 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v5 + 88);
  return sub_22E903BEC(v8);
}

unsigned int *sub_22EBD0C00@<X0>(_QWORD *a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  __int128 v6;
  unsigned int v8[24];
  uint64_t v9;

  v9 = a3;
  sub_22E8FCA40(a1, a2, 0xC9Eu, 0, (uint64_t)v8);
  v5 = sub_22E8901B8((uint64_t)v8, &v9);
  v6 = *(_OWORD *)(v5 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v5;
  *(_OWORD *)(a4 + 9) = v6;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v5 + 80))
    sub_22E907424(a4 + 32, v5 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v5 + 88);
  return sub_22E903BEC(v8);
}

unsigned int *sub_22EBD0C8C@<X0>(_QWORD *a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned int v10[24];
  uint64_t v11;
  uint64_t v12;

  v11 = a4;
  v12 = a3;
  sub_22E8FCA40(a1, a2, 0xC9Du, 0, (uint64_t)v10);
  v6 = sub_22E8901B8((uint64_t)v10, &v12);
  v7 = sub_22E8901B8(v6, &v11);
  v8 = *(_OWORD *)(v7 + 9);
  *(_OWORD *)a5 = *(_OWORD *)v7;
  *(_OWORD *)(a5 + 9) = v8;
  *(_BYTE *)(a5 + 32) = 0;
  *(_BYTE *)(a5 + 80) = 0;
  if (*(_BYTE *)(v7 + 80))
    sub_22E907424(a5 + 32, v7 + 32);
  *(_QWORD *)(a5 + 88) = *(_QWORD *)(v7 + 88);
  return sub_22E903BEC(v10);
}

unsigned int *sub_22EBD0D20@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  __int128 v6;
  unsigned int v8[24];
  uint64_t v9;

  v9 = a3;
  sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x15A8u, 0, (uint64_t)v8);
  v5 = sub_22E8901B8((uint64_t)v8, &v9);
  v6 = *(_OWORD *)(v5 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v5;
  *(_OWORD *)(a4 + 9) = v6;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v5 + 80))
    sub_22E907424(a4 + 32, v5 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v5 + 88);
  return sub_22E903BEC(v8);
}

unsigned int *sub_22EBD0DAC@<X0>(_QWORD *a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  __int128 v6;
  unsigned int v8[24];
  uint64_t v9;

  v9 = a3;
  sub_22E8FCA40(a1, a2, 0xA40u, 0, (uint64_t)v8);
  v5 = sub_22E8901B8((uint64_t)v8, &v9);
  v6 = *(_OWORD *)(v5 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v5;
  *(_OWORD *)(a4 + 9) = v6;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v5 + 80))
    sub_22E907424(a4 + 32, v5 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v5 + 88);
  return sub_22E903BEC(v8);
}

unsigned int *sub_22EBD0E38@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  __int128 v6;
  unsigned int v8[24];
  uint64_t v9;

  v9 = a3;
  sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x15A8u, 0, (uint64_t)v8);
  v5 = sub_22E8901B8((uint64_t)v8, &v9);
  v6 = *(_OWORD *)(v5 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v5;
  *(_OWORD *)(a4 + 9) = v6;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v5 + 80))
    sub_22E907424(a4 + 32, v5 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v5 + 88);
  return sub_22E903BEC(v8);
}

void sub_22EBD0EC8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22EBD0EDC(uint64_t a1, _QWORD *a2, unsigned int a3, uint64_t a4, unsigned int (*a5)(_QWORD *), uint64_t a6, unsigned int (*a7)(_QWORD *), uint64_t a8, unsigned int (*a9)(_QWORD *), uint64_t a10)
{
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned int (*v26)(_QWORD *);
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _BYTE v37[64];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  int v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v17 = sub_22F114198(a1);
  v18 = (_QWORD *)(v17 + (a6 >> 1));
  if ((a6 & 1) != 0)
    a5 = *(unsigned int (**)(_QWORD *))(*v18 + a5);
  if (!a5(v18))
    goto LABEL_7;
  v19 = (_QWORD *)(v17 + (a8 >> 1));
  if ((a8 & 1) != 0)
    a7 = *(unsigned int (**)(_QWORD *))(*v19 + a7);
  if (!a7(v19))
  {
    v21 = 1;
  }
  else
  {
LABEL_7:
    *(_QWORD *)&v32 = (a4 + 15520) | 6;
    DWORD2(v32) = a3;
    sub_22EFC6D6C((uint64_t)&v33, v32);
    v34 = 0;
    v35 = v37;
    v36 = 0x800000000;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = a2;
    v42 = v32;
    v44 = 0;
    v45 = 0;
    v43 = v33;
    v46 = 0;
    v47 = 257;
    v48 = 0;
    sub_22EC56024((uint64_t)&v34);
    if (v17)
      v20 = v17 + 64;
    else
      v20 = 0;
    v21 = 0;
    if (sub_22EC611AC(a2, &v34, v20, 0))
    {
      BYTE1(v47) = 0;
      if ((_DWORD)v36)
      {
        v21 = 0;
        v22 = v35;
        v23 = 8 * v36;
        while (1)
        {
          v24 = *v22 & 0xFFFFFFFFFFFFFFFCLL;
          if ((*(_DWORD *)(v24 + 28) & 0x7F) != 0x1D)
          {
            v25 = (_QWORD *)(v24 + (a10 >> 1));
            v26 = a9;
            if ((a10 & 1) != 0)
              v26 = *(unsigned int (**)(_QWORD *))(*v25 + a9);
            if (v26(v25))
            {
              v27 = *(_QWORD *)(*(_QWORD *)(v24 + 48) & 0xFFFFFFFFFFFFFFF0);
              if (v27)
                v28 = *(_BYTE *)(v27 + 16) == 26;
              else
                v28 = 0;
              if (!v28)
                sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v24 + 48) & 0xFFFFFFFFFFFFFFF0));
              v29 = sub_22EB14850(a2, a3);
              if (!v29 || sub_22F113A44(v29))
                break;
              v21 = 1;
            }
          }
          ++v22;
          v23 -= 8;
          if (!v23)
            goto LABEL_29;
        }
      }
      v21 = 0;
    }
LABEL_29:
    if (BYTE1(v47))
    {
      if ((_DWORD)v34 == 5)
      {
        sub_22EC64D18(v41, (uint64_t)&v34);
      }
      else if (v39 && (*(_DWORD *)(v41[9] + 52) & 0x400000) != 0)
      {
        sub_22E90B5FC((unint64_t)v41, (uint64_t)&v34);
      }
    }
    if (v38)
    {
      v31 = sub_22EC6CBD0(v38);
      MEMORY[0x2348A0E9C](v31, 0x10E0C409F09D3C3);
    }
    if (v35 != v37)
      free(v35);
  }
  return v21 & 1;
}

uint64_t sub_22EBD1178(uint64_t *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t i;
  int v13;
  int v14;
  uint64_t v15;
  llvm *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  int v40;
  const void **v41;
  const void *v42;
  size_t v43;
  uint64_t v44;
  void **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  llvm *v72;
  uint64_t *v73;
  char v74;
  uint64_t v75;
  uint64_t *v76;
  _OWORD *v77;
  char v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  llvm **v85;
  llvm **v86;
  llvm *v87;
  llvm *v88;
  llvm *v89;
  llvm *v90;
  uint64_t v91;
  void **v93;
  void **v94;
  void **v95[2];
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[2];
  _BYTE v101[24];
  __int128 v102;
  void *v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  llvm *v110;
  uint64_t v111;
  void *v112[2];
  _QWORD v113[4];

  v113[2] = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v112[0] = v113;
  v112[1] = (void *)0x200000000;
  if (*(_DWORD *)(v5 + 296))
  {
    sub_22F24C77C((uint64_t)v112, v5 + 288);
    v5 = *a1;
  }
  *(_DWORD *)(v5 + 296) = 0;
  v6 = a1 + 27;
  v7 = sub_22EBDD4FC((uint64_t)a1, a2);
  v8 = sub_22EBDD288((uint64_t)a1, v7, (uint64_t)a3);
  v9 = *a3;
  v10 = v8 & 1;
  if (*a3)
    v11 = 1;
  else
    v11 = v10 == 0;
  if (v11)
  {
LABEL_8:
    if (v9 || (v10 & 1) != 0 || !*((_DWORD *)a1 + 48))
      goto LABEL_29;
    v109 = 1;
    for (i = 8; i != 40; i += 16)
      *(uint64_t *)((char *)&v109 + i) = -4096;
    v13 = v109;
    if ((v109 & 1) == 0)
    {
      llvm::deallocate_buffer(v110, (void *)(16 * v111));
      v13 = v109;
    }
    v14 = *((_DWORD *)a1 + 54);
    if ((v14 & 1) != 0 || (v15 = *((unsigned int *)a1 + 58), v15 <= 2))
    {
      v17 = 1;
      v16 = v110;
    }
    else
    {
      LODWORD(v109) = v13 & 0xFFFFFFFE;
      v16 = (llvm *)MEMORY[0x23489D23C](16 * v15, 8);
      v110 = v16;
      v111 = v15;
      v14 = *(_DWORD *)v6;
      v17 = v109 & 1;
    }
    v91 = v8;
    v40 = *((_DWORD *)a1 + 55);
    LODWORD(v109) = v17 | v14 & 0xFFFFFFFE;
    HIDWORD(v109) = v40;
    if (v17)
      v16 = (llvm *)&v110;
    v41 = (const void **)(a1 + 28);
    v42 = a1 + 28;
    if ((v14 & 1) == 0)
      v42 = *v41;
    if (v17)
      v43 = 32;
    else
      v43 = 16 * v111;
    memcpy(v16, v42, v43);
    do
    {
      v44 = *((unsigned int *)a1 + 48);
      if (!(_DWORD)v44)
        break;
      v45 = *(void ***)(a1[23] + 8 * v44 - 8);
      v93 = v45;
      v46 = *a1;
      *(_QWORD *)&v102 = v45;
      v47 = sub_22F338CC8(v46 + 10176, (uint64_t *)&v102);
      *(_QWORD *)(*(_QWORD *)(v47 + 8) + 416) = *(_QWORD *)(*(_QWORD *)(v47 + 8) + 408);
      v48 = *a1;
      v95[0] = v45;
      v49 = *(_QWORD *)(sub_22F338CC8(v48 + 10176, (uint64_t *)v95) + 8);
      v50 = *(_QWORD *)(v49 + 408);
      v51 = sub_22EC68FEC(v49);
      *(_QWORD *)(v49 + 408) = v50;
      sub_22F330280((uint64_t)&v102, v51);
      v95[0] = 0;
      v95[1] = 0;
      v96 = &v98;
      v97 = 0x100000000;
      v99 = 0;
      v100[0] = 0;
      *(_QWORD *)((char *)v100 + 6) = 0;
      memset(v101, 0, sizeof(v101));
      do
      {
        sub_22EBDD5D8((_DWORD *)a1 + 54, (uint64_t)v45);
        v52 = sub_22EBDD4FC((uint64_t)a1, a2);
        v53 = sub_22EBDD288((uint64_t)a1, v52, (uint64_t)a3);
        v54 = *a3;
        v55 = *a1;
        v94 = v45;
        v56 = sub_22F338CC8(v55 + 10176, (uint64_t *)&v94);
        v57 = *(_QWORD *)(v56 + 8);
        if ((v53 & 1) == 0 || v54)
        {
          *(_QWORD *)(v57 + 408) = 0;
          sub_22EBDD5D8(&v109, (uint64_t)v45);
          v65 = 0;
          *a3 = 1;
          v91 = 1;
          goto LABEL_79;
        }
        v58 = *(_QWORD *)(v57 + 408);
        v59 = sub_22EC68FEC(*(_QWORD *)(v56 + 8));
        *(_QWORD *)(v57 + 408) = v58;
        if (!*(_QWORD *)sub_22F3336AC((uint64_t)v95, v59))
          break;
        if (v99 <= 0x2710 && HIDWORD(v99) <= 0x2710 && LODWORD(v100[0]) <= 0x2710)
        {
          v60 = 100 * v99 + 110 * HIDWORD(v99) + 150 * LODWORD(v100[0]);
          if (v60 >= 0x2711)
            v60 = -1;
        }
        else
        {
          v60 = -1;
        }
        if (v105 <= 0x2710 && v106 <= 0x2710 && v107 <= 0x2710)
        {
          v61 = 100 * v105 + 110 * v106 + 150 * v107;
          if (v61 >= 0x2711)
            v61 = -1;
        }
        else
        {
          v61 = -1;
        }
      }
      while (v60 == v61);
      if (*a3)
      {
        v65 = 0;
      }
      else
      {
        sub_22F333714((uint64_t)(a1 + 20), (uint64_t *)&v93);
        v62 = *a1;
        v94 = v45;
        v63 = sub_22F338CC8(v62 + 10176, (uint64_t *)&v94);
        *(_QWORD *)(*(_QWORD *)(v63 + 8) + 408) = *(_QWORD *)(*(_QWORD *)(v63 + 8) + 416);
        v64 = sub_22F333BB4(&v109, (uint64_t *)&v93);
        sub_22F333BB4((_DWORD *)a1 + 54, (uint64_t *)&v93)[1] = v64[1];
        v65 = 1;
      }
LABEL_79:
      v94 = (void **)v101;
      sub_22E8D19C8(&v94);
      if (v96 != &v98)
        free(v96);
      v95[0] = (void **)&v108;
      sub_22E8D19C8(v95);
      if (v103 != &v104)
        free(v103);
    }
    while ((v65 & 1) != 0);
    if ((*(_BYTE *)v6 & 1) == 0)
      llvm::deallocate_buffer((llvm *)a1[28], (void *)(16 * *((unsigned int *)a1 + 58)));
    v66 = 0;
    *(_DWORD *)v6 = 1;
    v8 = v91;
    do
    {
      v41[v66] = (const void *)-4096;
      v66 += 2;
    }
    while (v66 != 4);
    v67 = *((_DWORD *)a1 + 54);
    v68 = HIDWORD(v109);
    v69 = v109 & 1;
    v70 = v67 & 0xFFFFFFFE | v69;
    v71 = v109 & 0xFFFFFFFE | v67 & 1;
    *((_DWORD *)a1 + 54) = v71;
    *((_DWORD *)a1 + 55) = v68;
    v109 = v70;
    if ((v67 & 1) != 0)
    {
      if (v69)
      {
        v82 = 0;
        v83 = 0;
        do
        {
          v84 = v82;
          v85 = (llvm **)&v41[2 * v83];
          v86 = &v110 + 2 * v83;
          v87 = *v85;
          v88 = *v86;
          if (*v85 == (llvm *)-4096 || v87 == (llvm *)-8192 || v88 == (llvm *)-4096 || v88 == (llvm *)-8192)
          {
            *v85 = v88;
            *v86 = v87;
            if (((unint64_t)v87 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              if (((unint64_t)v88 | 0x1000) != 0xFFFFFFFFFFFFF000)
                v85[1] = v86[1];
            }
            else
            {
              v86[1] = v85[1];
            }
          }
          else
          {
            v89 = v85[1];
            v90 = v86[1];
            *v85 = v88;
            v85[1] = v90;
            *v86 = v87;
            v86[1] = v89;
          }
          v82 = 1;
          v83 = 1;
        }
        while ((v84 & 1) == 0);
        goto LABEL_29;
      }
      v73 = &v109;
    }
    else
    {
      if (!v69)
      {
        v72 = (llvm *)a1[28];
        a1[28] = (uint64_t)v110;
        v110 = v72;
        LODWORD(v72) = *((_DWORD *)a1 + 58);
        *((_DWORD *)a1 + 58) = v111;
        LODWORD(v111) = (_DWORD)v72;
        goto LABEL_99;
      }
      v70 = v71;
      v73 = a1 + 27;
      v6 = &v109;
    }
    v74 = 0;
    v75 = 0;
    v76 = v73 + 1;
    v102 = *(_OWORD *)(v73 + 1);
    *(_DWORD *)v73 = v70 | 1;
    v77 = v6 + 1;
    do
    {
      v78 = v74;
      v79 = &v76[2 * v75];
      v80 = (uint64_t *)&v77[v75];
      v81 = *v80;
      *v79 = *v80;
      if ((v81 | 0x1000) != 0xFFFFFFFFFFFFF000)
        v79[1] = v80[1];
      v74 = 1;
      v75 = 1;
    }
    while ((v78 & 1) == 0);
    *(_DWORD *)v6 &= ~1u;
    *v77 = v102;
    if ((v109 & 1) != 0)
      goto LABEL_29;
LABEL_99:
    llvm::deallocate_buffer(v110, (void *)(16 * v111));
    goto LABEL_29;
  }
  while (1)
  {
    v18 = *((unsigned int *)a1 + 34);
    if (!(_DWORD)v18)
      break;
    v19 = v8;
    v20 = (_QWORD *)a1[16];
    v21 = 8 * v18;
    while (1)
    {
      v23 = *a1;
      *(_QWORD *)&v102 = *v20;
      v22 = v102;
      v24 = sub_22F338CC8(v23 + 10176, (uint64_t *)&v102);
      sub_22EBDD5D8((_DWORD *)a1 + 54, v22);
      v25 = *(_QWORD *)(v24 + 8);
      v26 = *(_QWORD *)(v25 + 408);
      if (!v26)
      {
LABEL_28:
        v8 = v19;
        goto LABEL_29;
      }
      if (*(_QWORD *)(v25 + 32) || v26 < *(unsigned int *)(v25 + 48))
        break;
      *(_QWORD *)(v25 + 408) = 0;
      ++v20;
      v21 -= 8;
      if (!v21)
        goto LABEL_28;
    }
    v27 = sub_22EBDD4FC((uint64_t)a1, a2);
    v8 = sub_22EBDD288((uint64_t)a1, v27, (uint64_t)a3);
    v9 = *a3;
    LOBYTE(v10) = v8 & 1;
    if (*a3 || (v8 & 1) == 0)
      goto LABEL_8;
  }
LABEL_29:
  v28 = *a1;
  v29 = *(_DWORD *)(*a1 + 296);
  if (v29)
  {
    v30 = *(uint64_t **)(v28 + 288);
    v31 = v30;
    do
    {
      v32 = *v31;
      v33 = a1[16];
      v34 = *((unsigned int *)a1 + 34);
      if ((_DWORD)v34)
      {
        v35 = 8 * v34;
        v36 = (_QWORD *)a1[16];
        while (*v36 != v32)
        {
          ++v36;
          v35 -= 8;
          if (!v35)
          {
            v36 = (_QWORD *)(v33 + 8 * v34);
            break;
          }
        }
      }
      else
      {
        v36 = (_QWORD *)a1[16];
      }
      if (v34 == ((uint64_t)v36 - v33) >> 3)
      {
        sub_22F338D48(*a1, v32);
        v30 = *(uint64_t **)(v28 + 288);
        v37 = *(unsigned int *)(v28 + 296);
        v38 = &v30[v37];
        if (v38 != v31 + 1)
        {
          memmove(v31, v31 + 1, (char *)v38 - (char *)(v31 + 1));
          LODWORD(v37) = *(_DWORD *)(v28 + 296);
          v30 = *(uint64_t **)(v28 + 288);
        }
        v29 = v37 - 1;
        *(_DWORD *)(v28 + 296) = v29;
      }
      else
      {
        ++v31;
      }
    }
    while (v31 != &v30[v29]);
    v28 = *a1;
  }
  sub_22F24C77C(v28 + 288, (uint64_t)v112);
  if (v112[0] != v113)
    free(v112[0]);
  return v8;
}

uint64_t sub_22EBD196C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[10];

  v17[8] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (a3)
    {
      v4 = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v5 = *(_DWORD *)(a3 + 8);
      if (v5 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v5 = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = v4;
      ++*(_DWORD *)(a3 + 8);
    }
    else
    {
      v17[0] = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v16 = 0x800000001;
      v7 = 1;
      do
      {
        v8 = v7;
        v9 = &v17[v7];
        v10 = *(v9 - 1);
        if ((v10 & 4) != 0)
        {
          v7 = v8 - 1;
          LODWORD(v16) = v8 - 1;
        }
        else
        {
          *(v9 - 1) = v10 | 4;
          v11 = *(unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFF8) - 1;
          if (v11 <= 0xEB)
            __asm { BR              X9 }
          v7 = v16;
          if ((_DWORD)v8 != (_DWORD)v16)
          {
            v12 = &v17[v16 - 1];
            if (&v17[v8] < v12)
            {
              v13 = &v17[v8 + 1];
              do
              {
                v14 = *(v13 - 1);
                *(v13 - 1) = *v12;
                *v12-- = v14;
              }
              while (v13++ < v12);
            }
          }
        }
      }
      while (v7);
    }
  }
  return 1;
}

uint64_t sub_22EBDD288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  llvm *v23;
  unsigned int v24;
  void *v25;
  uint64_t v26;
  unsigned int v27;
  llvm *v28;
  unsigned int v29;
  void *v30;
  _QWORD v31[3];

  v3 = a2;
  v31[2] = *MEMORY[0x24BDAC8D0];
  if ((a2 & 1) == 0)
  {
    v7 = (_QWORD *)(a1 + 104);
    sub_22F333790((uint64_t)&v27, (unsigned int *)(a1 + 104));
    sub_22F333790((uint64_t)&v22, (unsigned int *)(a1 + 160));
    sub_22F3338D4(v7);
    *(_DWORD *)(a1 + 136) = 0;
    sub_22F3338D4((_QWORD *)(a1 + 160));
    *(_DWORD *)(a1 + 192) = 0;
    v21 = v7;
    sub_22EBD196C((uint64_t)&v21, v3 & 0xFFFFFFFFFFFFFFFELL, 0);
    if (*(_DWORD *)(a1 + 136))
    {
      v3 = sub_22EBD1178(a1, v3 & 0xFFFFFFFFFFFFFFFELL, a3);
      if ((v3 & 1) != 0)
      {
        v11 = *(unsigned int *)(a1 + 136);
        if ((_DWORD)v11)
        {
          v12 = *(_QWORD *)a1;
          v13 = *(uint64_t **)(a1 + 128);
          v14 = &v13[v11];
          v3 = 1;
          do
          {
            v15 = *v13;
            sub_22EBDD5D8((_DWORD *)(a1 + 216), *v13);
            sub_22F338D48(*(_QWORD *)a1, v15);
            v16 = *(_QWORD *)(v12 + 288);
            v17 = *(unsigned int *)(v12 + 296);
            v18 = (char *)(v16 + 8 * v17);
            if ((_DWORD)v17)
            {
              v20 = 8 * v17;
              v19 = *(_QWORD **)(v12 + 288);
              while (*v19 != v15)
              {
                ++v19;
                v20 -= 8;
                if (!v20)
                {
                  v19 = (_QWORD *)(v16 + 8 * v17);
                  break;
                }
              }
            }
            else
            {
              v19 = *(_QWORD **)(v12 + 288);
            }
            if (v17 != ((uint64_t)v19 - v16) >> 3)
            {
              if (v18 != (char *)(v19 + 1))
              {
                memmove(v19, v19 + 1, v18 - (char *)(v19 + 1));
                LODWORD(v17) = *(_DWORD *)(v12 + 296);
              }
              *(_DWORD *)(v12 + 296) = v17 - 1;
            }
            ++v13;
          }
          while (v13 != v14);
        }
        else
        {
          v3 = 1;
        }
      }
      else
      {
        v8 = *(unsigned int *)(a1 + 136);
        if ((_DWORD)v8)
        {
          v9 = *(uint64_t **)(a1 + 128);
          v10 = 8 * v8;
          do
          {
            sub_22F333A14((uint64_t)&v27, v9++);
            v10 -= 8;
          }
          while (v10);
        }
      }
    }
    sub_22F333AA4((uint64_t)v7, &v27);
    sub_22F24C77C(a1 + 128, (uint64_t)&v30);
    sub_22F333AA4(a1 + 160, &v22);
    sub_22F24C77C(a1 + 184, (uint64_t)&v25);
    if (v25 != &v26)
      free(v25);
    if ((v22 & 1) == 0)
      llvm::deallocate_buffer(v23, (void *)(8 * v24));
    if (v30 != v31)
      free(v30);
    if ((v27 & 1) == 0)
      llvm::deallocate_buffer(v28, (void *)(8 * v29));
  }
  return v3;
}

uint64_t sub_22EBDD4FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  unsigned int v6;
  char v7;
  char v8;
  int v9;
  __n128 v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v15;
  int v16;

  v4 = *(_QWORD *)a1;
  v5 = (char *)(*(_QWORD *)a1 + 10664);
  v6 = *(_DWORD *)(*(_QWORD *)a1 + 8456);
  v7 = *(_BYTE *)(*(_QWORD *)a1 + 11952);
  v8 = *v5;
  v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 104) + 180);
  sub_22EE03478(*(_QWORD *)a1);
  if (!v11)
    v5[1288] = 1;
  *v5 = 0;
  sub_22EBDD628(a1, a2, v10);
  if (*(_DWORD *)(v4 + 8456) <= v6 && (v12 & 1) == 0)
    result = (*(uint64_t (**)(_QWORD, unint64_t))(a1 + 88))(*(_QWORD *)(a1 + 96), v12 & 0xFFFFFFFFFFFFFFFELL);
  else
    result = 1;
  *(_DWORD *)(v4 + 8456) = v6;
  v5[1288] = v7;
  *v5 = v8;
  v15 = *(_QWORD *)(v4 + 104);
  if (*(_DWORD *)(v15 + 180) == 5)
    *(_BYTE *)(v15 + 170) = 1;
  if (v9)
    v16 = 3;
  else
    v16 = 0;
  *(_DWORD *)(v15 + 180) = v16;
  return result;
}

uint64_t sub_22EBDD5D8(_DWORD *a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  _QWORD *v5;

  v5 = 0;
  result = sub_22F333B08((uint64_t)a1, a2, &v5);
  if ((_DWORD)result)
  {
    *v5 = -8192;
    v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

void sub_22EBDD628(uint64_t a1, uint64_t a2, __n128 a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  void *v43[2];
  _BYTE v44[16];
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  void **v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[2];
  _BYTE v66[24];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  __int16 v77;
  char v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return;
  switch(*(_BYTE *)a2)
  {
    case 0x66:
      goto LABEL_95;
    case 0x67:
      sub_22EBDFEF0((_QWORD **)a1, a2);
      return;
    case 0x68:
      sub_22EB63768(a1, a2);
      return;
    case 0x6B:
      sub_22EBDFFB4((uint64_t *)a1, a2);
      return;
    case 0x6C:
      sub_22EBE006C((_QWORD **)a1, a2);
      return;
    case 0x6D:
      sub_22EBE0234((_QWORD **)a1, a2);
      return;
    case 0x6E:
    case 0x84:
    case 0xAC:
    case 0xAD:
    case 0xC5:
      sub_22EBE029C(a1, a2);
      return;
    case 0x6F:
      sub_22EBE02A4((uint64_t *)a1, a2);
      return;
    case 0x70:
      sub_22EBE03B0((uint64_t *)a1, a2);
      return;
    case 0x71:
      sub_22EBE0544((uint64_t *)a1, (_DWORD *)a2, a3);
      return;
    case 0x73:
      sub_22EBE0614(a1, a2);
      return;
    case 0x74:
      sub_22EBE06FC((uint64_t *)a1, a2);
      return;
    case 0x75:
    case 0x80:
    case 0x9A:
    case 0xA9:
    case 0xAA:
    case 0xAE:
    case 0xAF:
    case 0xB2:
    case 0xB5:
    case 0xC2:
    case 0xC3:
    case 0xCE:
    case 0xCF:
    case 0xE1:
    case 0xE2:
    case 0xE3:
      nullsub_910(a2);
      return;
    case 0x76:
      sub_22EBE0758(a1, (unsigned __int8 *)a2);
      return;
    case 0x77:
      sub_22EBE0D5C(a1, (unsigned __int8 *)a2);
      return;
    case 0x78:
      sub_22EBE109C((uint64_t *)a1, a2);
      return;
    case 0x79:
      sub_22EBE1174((uint64_t *)a1, a2);
      return;
    case 0x7A:
      sub_22EBE1260(a1, a2);
      return;
    case 0x7B:
      sub_22EBE13E0(a1, a2);
      return;
    case 0x7C:
      sub_22EBE1744((uint64_t *)a1, a2);
      return;
    case 0x7D:
      sub_22EBE1970(a1, a2);
      return;
    case 0x7E:
      sub_22EBE1A80((uint64_t *)a1, a2);
      return;
    case 0x7F:
      sub_22EBE1F0C((uint64_t *)a1, a2);
      return;
    case 0x81:
      sub_22EBE2080((unsigned int **)a1, a2);
      return;
    case 0x82:
      sub_22EBE25B8(a1, (uint64_t *)a2);
      return;
    case 0x83:
      sub_22EBE2894((_QWORD **)a1, a2);
      return;
    case 0x85:
      sub_22EBE293C((uint64_t *)a1, a2);
      return;
    case 0x86:
      sub_22EBE29C4((uint64_t *)a1, a2);
      return;
    case 0x87:
      sub_22EBE2A30((uint64_t *)a1, a2);
      return;
    case 0x88:
      sub_22EBE2BA8((uint64_t *)a1, a2);
      return;
    case 0x89:
      sub_22EBE2E40((_QWORD **)a1, a2);
      return;
    case 0x8A:
      sub_22EBE3018((uint64_t *)a1, (unsigned int *)a2);
      return;
    case 0x8B:
      sub_22EBE31F8((uint64_t *)a1, (unsigned int *)a2);
      return;
    case 0x8C:
    case 0x8E:
      sub_22EBE335C((uint64_t *)a1, (unsigned int *)a2);
      return;
    case 0x8D:
      sub_22EBE3360((uint64_t *)a1, (unsigned int *)a2);
      return;
    case 0x8F:
      sub_22EBE3AB0((uint64_t *)a1, a2);
      return;
    case 0x90:
      sub_22EBE3B1C((_QWORD **)a1, a2);
      return;
    case 0x91:
      sub_22EBE3BC0((uint64_t *)a1, a2);
      return;
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
      sub_22EBE3C7C();
      return;
    case 0x98:
      sub_22EBE3C80((uint64_t *)a1, a2);
      return;
    case 0x99:
      sub_22EBE3D24(a1, (unsigned __int8 *)a2);
      return;
    case 0x9B:
      sub_22EBE3D50((uint64_t *)a1, a2);
      return;
    case 0x9C:
      sub_22EBE3E14((_QWORD **)a1, a2);
      return;
    case 0x9D:
      sub_22EBE3EE0((uint64_t *)a1, a2);
      return;
    case 0x9E:
      sub_22EBE4004((_QWORD **)a1, a2);
      return;
    case 0x9F:
      sub_22EBE409C((uint64_t *)a1, a2);
      return;
    case 0xA0:
      sub_22EBE40F0((uint64_t *)a1, a2);
      return;
    case 0xA1:
      sub_22EBE413C((uint64_t *)a1, a2);
      return;
    case 0xA2:
      sub_22EBE445C((uint64_t *)a1, a2);
      return;
    case 0xA3:
      sub_22EBE44CC((uint64_t *)a1, a2);
      return;
    case 0xA4:
      sub_22EBE44D8(a1, a2);
      return;
    case 0xA6:
      sub_22EBE493C((uint64_t *)a1, a2);
      return;
    case 0xA7:
      sub_22EBE4AC4((_QWORD **)a1, a2);
      return;
    case 0xA8:
      sub_22EBE4BD8(a1, (const void **)a2);
      return;
    case 0xAB:
      sub_22EBE4C04((_QWORD **)a1, a2);
      return;
    case 0xB0:
      sub_22EBE4C98((uint64_t *)a1, a2);
      return;
    case 0xB1:
      sub_22EBE4EC0((_QWORD **)a1, a2);
      return;
    case 0xB3:
      sub_22EBE4F88(a1, a2);
      return;
    case 0xB4:
      sub_22EBE500C((uint64_t *)a1, a2);
      return;
    case 0xB7:
      sub_22EBE5224(a1, a2);
      return;
    case 0xB8:
      sub_22EBE5330((uint64_t *)a1, a2);
      return;
    case 0xB9:
      sub_22EBE53E4(a1, a2);
      return;
    case 0xBA:
      sub_22EBE54D0(a1, *(_QWORD *)(a2 + 16));
      return;
    case 0xBB:
      sub_22EBE54E4((_QWORD **)a1, a2);
      return;
    case 0xBC:
      sub_22EBE55A8((uint64_t *)a1, a2);
      return;
    case 0xBD:
      sub_22EBE5B6C((uint64_t *)a1, a2);
      return;
    case 0xBF:
      sub_22EBE5E64((uint64_t *)a1, a2);
      return;
    case 0xC0:
      sub_22EBE5F84((_QWORD **)a1, a2);
      return;
    case 0xC1:
      sub_22EBE6110(a1, a2);
      return;
    case 0xC4:
      sub_22EBE652C((uint64_t *)a1, a2);
      return;
    case 0xC6:
      sub_22EBE6590((_QWORD **)a1, a2);
      return;
    case 0xC7:
      sub_22EBE6680((uint64_t *)a1, a2);
      return;
    case 0xC8:
      sub_22EBE677C((uint64_t *)a1, a2);
      return;
    case 0xC9:
      sub_22EBE6B4C((uint64_t *)a1, a2);
      return;
    case 0xCA:
      sub_22EBE6C34((_QWORD **)a1, a2);
      return;
    case 0xCB:
      sub_22EBE6C9C((uint64_t *)a1, a2);
      return;
    case 0xCC:
      sub_22EB6B190(*(_QWORD *)a1, a2);
      return;
    case 0xCD:
      sub_22EBE6F98(a1, a2);
      return;
    case 0xD0:
      sub_22EBE70D8((uint64_t *)a1, a2);
      return;
    case 0xD1:
      sub_22EBE7178((uint64_t *)a1, a2);
      return;
    case 0xD2:
      sub_22EBE737C(a1, (_QWORD *)a2);
      return;
    case 0xD3:
      sub_22EBE73E0((uint64_t *)a1, (unsigned int *)a2);
      return;
    case 0xD4:
      sub_22EBE77A8(a1, (unsigned int *)a2);
      return;
    case 0xD5:
      sub_22EBE7BB4((_QWORD *)a1, a2);
      return;
    case 0xD6:
      sub_22EBE7C30((_QWORD **)a1, a2);
      return;
    case 0xD7:
      sub_22EBE7C98((uint64_t *)a1, a2);
      return;
    case 0xD8:
      sub_22F2F74C4((uint64_t *)a1, (_DWORD *)a2);
      return;
    case 0xD9:
      sub_22EBE7D94((uint64_t *)a1, a2);
      return;
    case 0xDA:
      sub_22EBE7E0C((uint64_t *)a1, a2);
      return;
    case 0xDB:
      sub_22EBE7F70((uint64_t *)a1, a2);
      return;
    case 0xDC:
      sub_22EBE8640((_QWORD **)a1, a2);
      return;
    case 0xDD:
      sub_22EBE86B4((uint64_t *)a1, a2);
      return;
    case 0xDE:
      sub_22EBE8918((uint64_t *)a1, a2);
      return;
    case 0xDF:
      sub_22EBE8E04(*(_QWORD *)a1, a2);
      return;
    case 0xE0:
      sub_22EBE8E58((uint64_t *)a1, a2);
      return;
    case 0xE4:
      sub_22EBE9004((_QWORD **)a1, a2);
      return;
    case 0xE5:
      sub_22EBE90C4((_QWORD **)a1, a2);
      return;
    case 0xE6:
      sub_22EBE9178((uint64_t *)a1, (_DWORD *)a2);
      return;
    case 0xE7:
      v41 = a2;
      v5 = sub_22F333BB4((_DWORD *)(a1 + 216), &v41);
      if (!sub_22F333A14(a1 + 104, &v41) && v5[1])
        return;
      v6 = *(_QWORD **)a1;
      v40 = a1 + 160;
      v59 = (void **)a2;
      v7 = sub_22F338CC8((uint64_t)(v6 + 1272), (uint64_t *)&v59);
      break;
    case 0xE8:
      sub_22EBE97D0((uint64_t *)a1, a2);
      return;
    case 0xE9:
      sub_22EBE99A8((uint64_t *)a1, a2);
      return;
    case 0xEA:
      sub_22EBE9A4C((_QWORD **)a1, a2);
      return;
    default:
      return;
  }
  while (1)
  {
    v8 = sub_22EC68FEC(*(_QWORD *)(v7 + 8));
    sub_22F330280((uint64_t)&v48, v8);
    if (!v48)
    {
      v11 = 3;
      goto LABEL_172;
    }
    v9 = *(_QWORD *)(a1 + 80);
    if (v9)
    {
      v10 = v51 ? *(_QWORD *)v50 : 0;
      if (v10 == v9)
      {
        v11 = 2;
        goto LABEL_172;
      }
    }
    v12 = *(_QWORD **)a1;
    if (!*(_QWORD *)(v7 + 72))
    {
      v13 = *(_QWORD *)(v7 + 8);
      v14 = *(_DWORD *)(v13 + 616);
      v59 = 0;
      v60 = &v62;
      v61 = (void *)0x800000000;
      v68 = 0;
      v69 = 0;
      v67 = 0;
      v70 = v12;
      v71 = *(_OWORD *)(v13 + 584);
      v72 = *(_QWORD *)(v13 + 600);
      v73 = 0;
      v74 = v14;
      v75 = 0;
      v76 = 16842752;
      v77 = 0;
      v78 = 0;
      sub_22EC56024((uint64_t)&v59);
      v15 = *(_QWORD **)(v13 + 440);
      v42 = 0u;
      *(_OWORD *)v43 = 0u;
      if (v49)
      {
        v16 = v56;
        sub_22F0AB9D8((uint64_t)&v42 + 8, v12[11], v49, v56);
        *(_QWORD *)&v42 = v16;
      }
      else if (v15 && !v57)
      {
        *(_QWORD *)&v42 = *v15;
        sub_22F0AB71C((uint64_t)&v42 + 8, (uint64_t)(v15 + 1));
      }
      if (!v51)
        goto LABEL_158;
      v17 = *(_QWORD *)v50;
      if (!*(_QWORD *)v50)
        goto LABEL_158;
      *(_QWORD *)&v71 = *(_QWORD *)(v17 + 40);
      v18 = *(unsigned int *)(v17 + 28);
      v19 = v61;
      if (v61 >= (unint64_t)HIDWORD(v61))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v19 = v61;
      }
      *((_QWORD *)v60 + v19) = (v18 >> 13) & 3 | v17;
      LODWORD(v61) = (_DWORD)v61 + 1;
      LODWORD(v59) = 2;
      if (!sub_22E8BB0E8(v17))
      {
        if ((*(_DWORD *)(v17 + 28) & 0x7F) == 0x33)
        {
          v21 = *(_QWORD *)(v17 + 40);
          if ((v21 & 7) != 0)
            v22 = 0;
          else
            v22 = v21 & 0xFFFFFFFFFFFFFFF8;
          v23 = sub_22EB233F0(v12, (int *)&v59, *(_QWORD *)(v13 + 432), v22, 0);
          goto LABEL_159;
        }
        goto LABEL_158;
      }
      if (!v49
        || ((*(_BYTE *)(v49 + 8) & 4) != 0 ? (v20 = *(_QWORD *)(v49 + 16)) : (v20 = 0),
            (v28 = sub_22F10C2A4(v20)) == 0 || (*(_DWORD *)(v28 + 28) & 0x7Fu) - 35 >= 3))
      {
        v29 = *(_QWORD *)(v17 + 16);
        v30 = (_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF8);
        if ((v29 & 4) != 0)
          v30 = (_QWORD *)*v30;
        v31 = sub_22EFCBB30((unint64_t)v30);
        if (!v31 || (*(_WORD *)(v31 + 8) & 0x7Fu) - 38 < 0xFFFFFFFD)
        {
LABEL_146:
          if (!*(_BYTE *)(*(_QWORD *)(v13 + 448) + 15)
            || (DWORD1(v42) ? (v32 = (_DWORD)v42 == 0) : (v32 = 1),
                v32
             && !*((_QWORD *)&v42 + 1)
             && (_DWORD)v59 != 3
             && ((_DWORD)v59 == 4
              || (v33 = (*(_DWORD *)(v17 + 28) & 0x7F) - 49, v33 <= 0x13) && ((1 << v33) & 0x80207) != 0)))
          {
            v23 = sub_22EC21A04((uint64_t)v12, (uint64_t *)&v42, 0, (uint64_t)&v59, 0, 0, 0);
LABEL_159:
            v25 = v23;
            if (HIDWORD(v43[1]))
              free(v43[0]);
            if (HIBYTE(v76))
            {
              if ((_DWORD)v59 == 5)
              {
                sub_22EC64D18(v70, (uint64_t)&v59);
              }
              else if (v68 && (*(_DWORD *)(v70[9] + 52) & 0x400000) != 0)
              {
                sub_22E90B5FC((unint64_t)v70, (uint64_t)&v59);
              }
            }
            if (v67)
            {
              v39 = sub_22EC6CBD0(v67);
              MEMORY[0x2348A0E9C](v39, 0x10E0C409F09D3C3);
            }
            v26 = (uint64_t *)v60;
            v27 = &v62;
            goto LABEL_169;
          }
LABEL_158:
          v23 = sub_22EB235A8(v12, (uint64_t)&v42, (uint64_t)&v59, 0, 1);
          goto LABEL_159;
        }
        v28 = v31 - 64;
      }
      v68 = v28;
      goto LABEL_146;
    }
    sub_22F330280((uint64_t)v44, (uint64_t)&v48);
    v59 = (void **)a2;
    v24 = *(_QWORD *)(v7 + 72);
    if (!v24)
      break;
    v25 = (*(uint64_t (**)(uint64_t, _QWORD *, void ***, _BYTE *))(*(_QWORD *)v24 + 48))(v24, v12, &v59, v44);
    v59 = (void **)&v47;
    sub_22E8D19C8(&v59);
    v26 = v45;
    v27 = &v46;
LABEL_169:
    if (v26 == v27)
    {
      if ((v25 & 1) == 0)
        goto LABEL_178;
    }
    else
    {
      free(v26);
      if ((v25 & 1) == 0)
      {
LABEL_178:
        v59 = 0;
        v60 = 0;
        v61 = &v63;
        v62 = 0x100000000;
        v64 = 0;
        v65[0] = 0;
        *(_QWORD *)((char *)v65 + 6) = 0;
        memset(v66, 0, sizeof(v66));
        v34 = *(_QWORD *)(v7 + 8);
        v35 = *(_QWORD *)(v34 + 408);
        v36 = sub_22EC68FEC(v34);
        *(_QWORD *)(v34 + 408) = v35;
        if (!*(_QWORD *)sub_22F3336AC((uint64_t)&v59, v36))
          goto LABEL_189;
        if (v64 <= 0x2710 && HIDWORD(v64) <= 0x2710 && LODWORD(v65[0]) <= 0x2710)
        {
          v37 = 100 * v64 + 110 * HIDWORD(v64) + 150 * LODWORD(v65[0]);
          if (v37 >= 0x2711)
            v37 = -1;
        }
        else
        {
          v37 = -1;
        }
        if (v53 <= 0x2710 && v54 <= 0x2710 && v55 <= 0x2710)
        {
          v38 = 100 * v53 + 110 * v54 + 150 * v55;
          if (v38 >= 0x2711)
            v38 = -1;
        }
        else
        {
          v38 = -1;
        }
        if (v37 == v38)
          sub_22F333A14(v40, &v41);
        else
LABEL_189:
          sub_22F333714(v40, &v41);
        v5[1] = v25;
        *(_QWORD *)&v42 = v66;
        sub_22E8D19C8((void ***)&v42);
        if (v61 != &v63)
          free(v61);
        v11 = 1;
        goto LABEL_172;
      }
    }
    v11 = 0;
LABEL_172:
    v59 = (void **)&v58;
    sub_22E8D19C8(&v59);
    if (v50 != &v52)
      free(v50);
    if (v11 && v11 != 2)
    {
      if (v11 == 3)
        v5[1] = 1;
      return;
    }
  }
  sub_22E4A06C4();
LABEL_95:
  sub_22EBDFE50((_QWORD **)a1, a2);
}

uint64_t sub_22EBDFE50(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v2 = a2;
  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBDD628(a1, *(_QWORD *)(v2 + 48));
  if ((v5 & 1) != 0)
    return 1;
  v6 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_DWORD *)*a1 + 2998) != -1
    || *(uint64_t **)(v2 + 24) != v6
    || *(_QWORD *)(v2 + 48) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2F86C(*a1, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), v6, 0, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EBDFEF0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v2 = a2;
  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBDD628(a1, *(_QWORD *)(v2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EBDD628(a1, *(_QWORD *)(v2 + 40));
  if ((v6 & 1) != 0)
    return 1;
  v7 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_DWORD *)*a1 + 2998) != -1
    || *(uint64_t **)(v2 + 24) != v7
    || *(_QWORD *)(v2 + 32) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 40) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2F86C(*a1, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EBDFFB4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  BOOL v10;
  int v11;
  unsigned int v12;
  unint64_t v14;

  v2 = a2;
  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBDD628(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a1;
  v7 = *(_QWORD *)(v2 + 16);
  v8 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v9 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v10 = *(_DWORD *)(v6 + 11992) == -1 && v7 == (_QWORD)v8;
  if (!v10 || *(_QWORD *)(v2 + 24) != v9)
  {
    sub_22F0D5A50(v7);
    v11 = *(_DWORD *)(v2 + 4);
    v14 = v9;
    return sub_22EB296C0(v6, 0, v8, v12, (uint64_t *)&v14, 1, v11);
  }
  return v2;
}

uint64_t sub_22EBE006C(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v2 = a2;
  v4 = sub_22EBE9AF0(a1, *(uint64_t **)(a2 + 48));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = *a1;
  if (*((_DWORD *)*a1 + 2998) != -1 || v4 != *(unint64_t **)(v2 + 48))
  {
    v19 = 0;
    v18 = 0;
    v17 = 3;
    *(_QWORD *)v16 = *((unsigned int *)v6 + 426);
    sub_22EB4DDB8((uint64_t)(v6 + 461), &v19, v16, (__int16 *)((char *)v6 + 1693), &v18, &v17);
    v7 = *((unsigned int *)v6 + 924);
    v8 = v7 - 2;
    v9 = v6[461];
    v10 = *(_DWORD *)(v9 + 576 * (v7 - 2));
    if (v10 == 5)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = *(_BYTE *)(v9 + 576 * v8 + 572);
      v11 = 1;
    }
    else if (v10 == 2)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = 1;
      v11 = *(_BYTE *)(v9 + 576 * v8 + 573) != 0;
    }
    else
    {
      v11 = 0;
      *(_BYTE *)(v9 + 576 * v7 - 4) = 0;
    }
    v12 = v9 + 576 * v7;
    *(_BYTE *)(v12 - 3) = v11;
    *(_WORD *)((char *)v6 + 1693) = 0;
    if (*((_DWORD *)v6 + 462))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v6 + 222), (llvm::SmallPtrSetImplBase *)(v12 - 560));
      sub_22EAEAE08((uint64_t)(v6 + 230), (uint64_t *)(v12 - 496));
    }
    v13 = sub_22EBDD628(a1, *(_QWORD *)(v2 + 32));
    if ((v13 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 32) != v14)
      {
        sub_22EB48E64(v6);
        return sub_22EBC8B4C(*a1, *(_BYTE *)(v2 + 16) & 3, *(_DWORD *)(v2 + 40), v5, v14, *(_DWORD *)(v2 + 44));
      }
    }
    sub_22EB48E64(v6);
  }
  return v2;
}

uint64_t sub_22EBE0234(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v6;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v6 = sub_22EBEE6F4((uint64_t)a1, *(_QWORD *)(a2 + 8));
  return sub_22F32DD9C(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v6, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28));
}

uint64_t sub_22EBE029C(uint64_t a1, uint64_t a2)
{
  return sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
}

uint64_t sub_22EBE02A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v6;
  unint64_t v7;
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v2 = a2;
  v12[8] = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10 = v12;
  v11 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 72);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 72);
  }
  if ((sub_22EBF1574(a1, (unsigned __int8 **)(v2 + 16), v4, 0, (uint64_t)&v10, &v9) & 1) != 0)
  {
    v2 = 1;
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1 || v9 != 0)
  {
    v6 = *(unsigned int *)(v2 + 80);
    v7 = *(unsigned int *)(v2 + 76) | (unint64_t)(v6 << 32);
    v2 = sub_22E983290((_QWORD *)*a1, v7, v7, v6, (void **)v10, v11, *(_DWORD *)(v2 + 84), 1);
  }
  if (v10 != v12)
    free(v10);
  return v2;
}

uint64_t sub_22EBE03B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v2 = a2;
  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBDD628(a1, *(_QWORD *)(v2 + 24));
  v6 = v5;
  if ((v5 & 1) != 0)
    return 1;
  v7 = *a1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    v8 = *(_DWORD *)v2;
    if (((*(_DWORD *)v2 >> 18) & 0x3Eu) - 22 <= 9)
      return sub_22EB4785C(*a1, 0, *(_DWORD *)(v2 + 4), (v8 >> 18) & 0x3F, v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL);
    v10 = *(_DWORD *)(v7 + 56);
    v11 = *(_QWORD *)(v7 + 1296);
    v16 = *(_QWORD *)(*(_QWORD *)(v7 + 80) + 520);
    if ((v8 & 0x1000000) != 0)
    {
      v13 = 32;
      if (*(_DWORD *)v2 == 113)
        v13 = 48;
      v12 = *(_QWORD *)(v2 + v13);
    }
    else
    {
      v12 = 0;
    }
    sub_22E51A8D0(&v17, *(_QWORD *)(v7 + 72));
    v14 = *a1;
    *(_DWORD *)(v14 + 56) = v17 & ~HIDWORD(v12) | HIDWORD(v12) & v12;
    *(_QWORD *)(v14 + 1296) = v12;
    v2 = sub_22EB4785C(*a1, 0, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 0x3F, v4 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(v7 + 56) = v10;
    *(_QWORD *)(v7 + 1296) = v11;
    v15 = *(_QWORD *)(v7 + 80);
    *(_QWORD *)(v15 + 520) = v16;
    *(_DWORD *)(v15 + 528) = v16;
  }
  return v2;
}

__n128 sub_22EBE0544(uint64_t *a1, _DWORD *a2, __n128 a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  int v14;

  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 56);
  v7 = *(_QWORD *)(*a1 + 1296);
  a3.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
  v13 = a3;
  if ((*a2 & 0x1000000) != 0)
  {
    v9 = 8;
    if (*a2 == 113)
      v9 = 12;
    v8 = *(_QWORD *)&a2[v9];
  }
  else
  {
    v8 = 0;
  }
  sub_22E51A8D0(&v14, *(_QWORD *)(v5 + 72));
  v10 = *a1;
  *(_DWORD *)(v10 + 56) = v14 & ~HIDWORD(v8) | HIDWORD(v8) & v8;
  *(_QWORD *)(v10 + 1296) = v8;
  sub_22EBE03B0(a1, (uint64_t)a2);
  *(_DWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 1296) = v7;
  v11 = *(_QWORD *)(v5 + 80);
  result = v13;
  *(_QWORD *)(v11 + 520) = v13.n128_u64[0];
  *(_DWORD *)(v11 + 528) = v13.n128_u32[0];
  return result;
}

uint64_t sub_22EBE0614(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  const void **v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (void **)(a2 + 32);
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v5 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    v6 = (const void **)(a2 + 32);
    do
    {
      v7 = *v6++;
      sub_22E3BA850(a1 + 32, v7);
      v5 -= 8;
    }
    while (v5);
  }
  v8 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v9 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    do
    {
      v10 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v4);
      v11 = *(_QWORD *)(a1 + 40);
      if (v11 == *(_QWORD *)(a1 + 32))
        v12 = 52;
      else
        v12 = 48;
      if (v10 != (void **)(v11 + 8 * *(unsigned int *)(a1 + v12)))
      {
        *v10 = (void *)-2;
        ++*(_DWORD *)(a1 + 56);
      }
      ++v4;
      v9 -= 8;
    }
    while (v9);
  }
  return v8;
}

uint64_t sub_22EBE06FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v4 = **(_QWORD **)(a2 + 16);
  if (v4)
  {
    v5 = *a1;
    sub_22F0D5A50(*(_QWORD *)(a2 + 24));
    sub_22EB4E494(v5, v6, v4, 1);
  }
  return sub_22EBDD628(a1, *(_QWORD *)(a2 + 24));
}

uint64_t sub_22EBE0758(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v4;
  unsigned __int8 *v5;
  int v6;
  BOOL v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  unsigned __int8 **v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 **v17;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  unsigned __int8 **v35;
  uint64_t **v36;
  unsigned __int8 **v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  int v55;
  int v56;
  void *v57[2];
  _BYTE v58[64];
  void *v59;
  uint64_t v60;
  _QWORD v61[10];

  v2 = (uint64_t)a2;
  v61[8] = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a2 + 8);
  if (v4)
  {
    if (v4 == 1)
      goto LABEL_9;
    v5 = a2 + 40;
    v6 = *a2;
    v7 = v6 == 119;
    if (v6 == 119)
      v8 = a2;
    else
      v8 = 0;
    v9 = v8 + 48;
    if (v7)
      v5 = v9;
    if (sub_22EFFF908(*((unsigned __int8 **)v5 + 1)))
    {
LABEL_9:
      v10 = *(unsigned __int8 *)v2;
      v11 = v10 == 119;
      if (v10 == 119)
        v12 = v2;
      else
        v12 = 0;
      v13 = (unsigned __int8 **)(v12 + 48);
      if (!v11)
        v13 = (unsigned __int8 **)(v2 + 40);
      if (!sub_22EFFF908(*v13) && (*(_DWORD *)v2 & 0x100000) == 0)
      {
        v14 = *(_DWORD *)v2;
        v15 = v14 == 119;
        if (v14 == 119)
          v16 = v2;
        else
          v16 = 0;
        v17 = (unsigned __int8 **)(v16 + 48);
        if (!v15)
          v17 = (unsigned __int8 **)(v2 + 40);
        return sub_22EBF1808((uint64_t *)a1, *v17, 0);
      }
    }
  }
  v19 = sub_22EBEE6F4(a1, *(_QWORD *)(v2 + 8));
  if (v19 < 0x10)
    return 1;
  v20 = v19;
  v21 = *(void **)(v2 + 16);
  v57[0] = v21;
  v59 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), v57, &v59)
    && v59 != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v21 = (void *)*((_QWORD *)v59 + 1);
  }
  if (!v21)
    return 1;
  v53 = 0;
  v57[0] = v58;
  v57[1] = (void *)0x800000000;
  v22 = *(_QWORD *)a1;
  v23 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x100000) == 0
    || ((v25 = *(_DWORD *)(*(_QWORD *)(v22 + 3688) + 576 * *(unsigned int *)(v22 + 3696) - 576), v25 <= 3)
      ? (v26 = v25 == 2)
      : (v26 = 1),
        v26))
  {
    v24 = 1;
  }
  else
  {
    v24 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v22 + 72) + 1) & 2) != 0)
    {
      v59 = 0;
      v55 = 3;
      v56 = 1;
      v54 = *(unsigned int *)(v22 + 1704);
      sub_22EB4DDB8(v22 + 3688, &v56, (int *)&v54, (__int16 *)(v22 + 1693), (uint64_t *)&v59, &v55);
      v27 = *(unsigned int *)(v22 + 3696);
      v28 = v27 - 2;
      v29 = *(_QWORD *)(v22 + 3688);
      v30 = *(_DWORD *)(v29 + 576 * (v27 - 2));
      if (v30 == 5)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = *(_BYTE *)(v29 + 576 * v28 + 572);
        v31 = 1;
      }
      else if (v30 == 2)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = 1;
        v31 = *(_BYTE *)(v29 + 576 * v28 + 573) != 0;
      }
      else
      {
        v31 = 0;
        *(_BYTE *)(v29 + 576 * v27 - 4) = 0;
      }
      v32 = v29 + 576 * v27;
      *(_BYTE *)(v32 - 3) = v31;
      *(_WORD *)(v22 + 1693) = 0;
      if (*(_DWORD *)(v22 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v22 + 1776), (llvm::SmallPtrSetImplBase *)(v32 - 560));
        sub_22EAEAE08(v22 + 1840, (uint64_t *)(v32 - 496));
      }
      v24 = 0;
      v23 = *(unsigned __int8 *)v2;
    }
  }
  v33 = v23 == 119;
  if (v23 == 119)
    v34 = v2;
  else
    v34 = 0;
  v35 = (unsigned __int8 **)(v34 + 48);
  v36 = (uint64_t **)(v2 + 40);
  if (v33)
    v37 = v35;
  else
    v37 = (unsigned __int8 **)(v2 + 40);
  if (sub_22EBF1574((uint64_t *)a1, v37, *(_DWORD *)(v2 + 32), 1, (uint64_t)v57, &v53))
  {
    if ((v24 & 1) == 0)
      sub_22EB48E64(v22);
    v2 = 1;
    goto LABEL_67;
  }
  if ((v24 & 1) == 0)
    sub_22EB48E64(v22);
  v38 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v20 != *(_QWORD *)(v2 + 8) || v21 != *(void **)(v2 + 16) || v53)
  {
    if (*(_BYTE *)v2 != 119)
    {
      v40 = *(_DWORD *)(v2 + 4);
      goto LABEL_62;
    }
    v52 = *(_QWORD *)a1;
    v44 = **v36;
    v45 = v44;
    while (1)
    {
      if ((v45 & 0xF) != 0)
        goto LABEL_81;
      v46 = *(unsigned __int8 *)(*(_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v46 > 0x39)
      {
LABEL_76:
        if (sub_22F115668(v45))
          v44 = v45;
        v45 = sub_22F115B7C(v45);
        if (!v45)
          goto LABEL_97;
      }
      else
      {
        if (v46 == 24)
          goto LABEL_96;
        if (v46 == 26)
        {
          if ((*(_BYTE *)(v45 + 23) & 0x10) != 0)
          {
LABEL_96:
            v44 = v45;
LABEL_97:
            v40 = sub_22F115668(v44);
            v38 = v52;
LABEL_62:
            v41 = v40;
            v42 = *(_DWORD *)v2;
            v43 = *(_QWORD *)(v2 + 24);
            v59 = v61;
            v60 = 0x800000000;
            if ((sub_22EACCC94(v38) & 1) != 0)
              v2 = 1;
            else
              v2 = sub_22EACC4D8(*(_QWORD *)a1, v41, v20, (uint64_t)v21, (v42 >> 18) & 1, (uint64_t *)v59, v60, (v42 & 0x80000) != 0, (v42 & 0x100000) != 0, (v42 & 0x200000) != 0, (v42 & 0x400000) != 0, v51, (v42 >> 23) & 7, v43);
            if (v59 != v61)
              free(v59);
            goto LABEL_67;
          }
        }
        else if (((1 << v46) & 0x20000000200003CLL) == 0)
        {
          goto LABEL_76;
        }
LABEL_81:
        v45 = sub_22F115B7C(v45);
      }
    }
  }
  if (*(_BYTE *)v2 != 119)
  {
    v39 = *(_DWORD *)(v2 + 4);
    goto LABEL_59;
  }
  v47 = *(_QWORD *)a1;
  v48 = **v36;
  for (i = v48; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_95;
      v50 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v50 <= 0x39)
        break;
LABEL_90:
      if (sub_22F115668(i))
        v48 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_99;
    }
    if (v50 == 24)
      goto LABEL_98;
    if (v50 == 26)
      break;
    if (((1 << v50) & 0x20000000200003CLL) == 0)
      goto LABEL_90;
LABEL_95:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_95;
LABEL_98:
  v48 = i;
LABEL_99:
  v39 = sub_22F115668(v48);
  v38 = v47;
LABEL_59:
  sub_22EB4E494(v38, v39, v21, 1);
LABEL_67:
  if (v57[0] != v58)
    free(v57[0]);
  return v2;
}

uint64_t sub_22EBE0D5C(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 **v4;
  unint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  unsigned __int8 *v21;
  unsigned __int8 **v22;
  unsigned __int8 **v23;
  char v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v29[2];
  char v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34[2];
  _QWORD v35[9];

  v35[8] = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned __int8 **)(a2 + 40);
  v5 = sub_22EBF1D24((uint64_t *)a1, *((uint64_t **)a2 + 5));
  if (!v5)
    return 1;
  v6 = (uint64_t *)v5;
  v7 = *((_QWORD *)a2 + 2);
  v29[0] = v7;
  v34[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), v29, v34)
    && v34[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v7 = *((_QWORD *)v34[0] + 1);
  }
  if (!v7)
    return 1;
  v30 = 0;
  v34[0] = v35;
  v34[1] = (void *)0x800000000;
  if (*((_DWORD *)a2 + 8) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  v8 = *(_QWORD *)a1;
  v9 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 0x100000) == 0
    || ((v12 = *(_DWORD *)(*(_QWORD *)(v8 + 3688) + 576 * *(unsigned int *)(v8 + 3696) - 576), v12 <= 3)
      ? (v13 = v12 == 2)
      : (v13 = 1),
        v13))
  {
    v10 = 1;
  }
  else
  {
    v10 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v8 + 72) + 1) & 2) != 0)
    {
      v29[0] = 0;
      v32 = 3;
      v33 = 1;
      v31 = *(unsigned int *)(v8 + 1704);
      sub_22EB4DDB8(v8 + 3688, &v33, (int *)&v31, (__int16 *)(v8 + 1693), v29, &v32);
      v14 = *(unsigned int *)(v8 + 3696);
      v15 = v14 - 2;
      v16 = *(_QWORD *)(v8 + 3688);
      v17 = *(_DWORD *)(v16 + 576 * (v14 - 2));
      if (v17 == 5)
      {
        *(_BYTE *)(v16 + 576 * v14 - 4) = *(_BYTE *)(v16 + 576 * v15 + 572);
        v18 = 1;
      }
      else if (v17 == 2)
      {
        *(_BYTE *)(v16 + 576 * v14 - 4) = 1;
        v18 = *(_BYTE *)(v16 + 576 * v15 + 573) != 0;
      }
      else
      {
        v18 = 0;
        *(_BYTE *)(v16 + 576 * v14 - 4) = 0;
      }
      v19 = v16 + 576 * v14;
      *(_BYTE *)(v19 - 3) = v18;
      *(_WORD *)(v8 + 1693) = 0;
      if (*(_DWORD *)(v8 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v8 + 1776), (llvm::SmallPtrSetImplBase *)(v19 - 560));
        sub_22EAEAE08(v8 + 1840, (uint64_t *)(v19 - 496));
      }
      v10 = 0;
      v9 = *a2;
    }
  }
  v20 = v9 == 119;
  if (v9 == 119)
    v21 = a2;
  else
    v21 = 0;
  v22 = (unsigned __int8 **)(v21 + 48);
  if (v20)
    v23 = v22;
  else
    v23 = v4;
  v24 = sub_22EBF1574((uint64_t *)a1, v23, *((_DWORD *)a2 + 8), 1, (uint64_t)v34, &v30);
  if ((v10 & 1) == 0)
    sub_22EB48E64(v8);
  if ((v24 & 1) != 0)
  {
    v11 = 1;
  }
  else
  {
    v25 = *(_QWORD *)a1;
    if (*(_DWORD *)(*(_QWORD *)a1 + 11992) == -1 && v6 == (uint64_t *)*v4 && v7 == *((_QWORD *)a2 + 2) && !v30)
    {
      v26 = sub_22F060A34((uint64_t)a2);
      sub_22EB4E494(v25, v26, v7, 1);
      v27 = sub_22EBCC6C0(*(_QWORD *)a1, (uint64_t)a2);
    }
    else
    {
      v29[0] = *v6;
      v29[1] = (uint64_t)(v6 + 1);
      sub_22F1167E8(v29);
      sub_22F3C57CC(a2);
      v27 = sub_22EBBC368();
    }
    v11 = v27;
  }
  if (v34[0] != v35)
    free(v34[0]);
  return v11;
}

uint64_t sub_22EBE109C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  v9 = v4;
  v10 = 0;
  if (sub_22E793870(a1 + 1, &v9, &v10) && v10 != a1[1] + 16 * *((unsigned int *)a1 + 6))
    v4 = *(_QWORD *)(v10 + 8);
  if (!v4)
    return 1;
  v5 = *a1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || v4 != *(_QWORD *)(v2 + 16) || *(_QWORD *)(v2 + 24) != *(_QWORD *)(v5 + 216))
  {
    v6 = *(_DWORD *)(v2 + 4);
    v7 = *(_QWORD *)(v5 + 216);
    v2 = sub_22E3CD3D4(*(_QWORD *)(v5 + 88) + 2032, 32, 3);
    sub_22E8BB138(v2, 120, v6, v4, v7);
  }
  return v2;
}

uint64_t sub_22EBE1174(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  v11 = v4;
  v12 = 0;
  if (sub_22E793870(a1 + 1, &v11, &v12) && v12 != a1[1] + 16 * *((unsigned int *)a1 + 6))
    v4 = *(_QWORD *)(v12 + 8);
  if (!v4)
    return 1;
  v5 = *a1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || v4 != *(_QWORD *)(v2 + 16) || *(_QWORD *)(v2 + 24) != *(_QWORD *)(v5 + 216))
  {
    sub_22EFF605C(v2);
    v7 = v6;
    v8 = *(_QWORD *)(v5 + 88);
    v9 = *(_QWORD *)(v5 + 216);
    v2 = sub_22E3CD3D4(v8 + 2032, 32, 3);
    sub_22F3C5EB8(v2, v8, v7, v4, *(_QWORD *)(v4 + 48), v9);
  }
  return v2;
}

uint64_t sub_22EBE1260(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a2;
  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 16);
  if (v5)
  {
    v16 = *(_QWORD *)(v2 + 16);
    v17 = 0;
    if (sub_22E793870((uint64_t *)(a1 + 8), &v16, &v17))
    {
      if (v17 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
      {
        v5 = *(_QWORD *)(v17 + 8);
        if (!v5)
          return 1;
      }
    }
  }
  v6 = *(_QWORD *)a1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v7 || v5 != *(_QWORD *)(v2 + 16))
    return sub_22EBC2B50(v6, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 1, (*(_DWORD *)v2 >> 19) & 1, v7);
  if (v5)
  {
    sub_22EB4E494(v6, *(unsigned int *)(v2 + 4), v5, 1);
    v7 = *(_QWORD *)(v2 + 24);
  }
  if ((*(_BYTE *)(v7 + 1) & 0x80) == 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)a1 + 88);
    v10 = sub_22F0602E8(v2);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(v9, v10) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v11)
    {
      if (*(_BYTE *)(v11 + 16) == 45)
      {
        v12 = sub_22F114198(*(_QWORD *)(v11 + 24));
        v13 = *(_QWORD *)a1;
        v14 = *(unsigned int *)(v2 + 4);
        v15 = sub_22EC6602C(v13, v12);
        sub_22EB4E494(v13, v14, v15 & 0xFFFFFFFFFFFFFFF8, 1);
      }
    }
  }
  return v2;
}

uint64_t sub_22EBE13E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  __n128 v30;
  void *v31[2];
  _DWORD v32[66];
  uint64_t v33;

  v2 = a2;
  v33 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 && (sub_22EFFFB48(*(unsigned __int8 **)(a2 + 16)) & 1) == 0)
  {
    v13 = sub_22EBDD628(a1, v4);
    if ((v13 & 1) != 0)
      return 1;
    v31[0] = 0;
    v14 = (*(_DWORD *)v2 & 0x40000) != 0 ? 36 : 25;
    v15 = sub_22EBCD1E4(*(unsigned int **)a1, 0, v13 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(v2 + 4), v14, (unint64_t *)v31, &v30);
    v7 = v15;
    if ((v15 & 1) != 0)
      return 1;
    v8 = v31[0];
    v5 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22EBEE6F4(a1, *(_QWORD *)(v2 + 24));
    v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
    if (!v6 || *(_BYTE *)(v6 + 16) != 39)
      v6 = sub_22F10CF48(v6);
    v7 = 0;
    v4 = 0;
    v8 = *(void **)(v6 + 32);
  }
  v9 = *(unsigned int *)v2;
  if ((v9 & 0x100000) != 0)
  {
    v11 = (_DWORD *)(v2 + 72);
    if ((v9 & 0x80000) != 0 && *v11)
      v12 = *(unsigned int *)(v2 + 84);
    else
      v12 = 0;
    v10 = *(_QWORD *)&v11[8 * v12 + 4 * ((v9 >> 19) & 1)];
  }
  else
  {
    v10 = 0;
  }
  v30.n128_u64[0] = v10;
  v31[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v30, v31)
    && v31[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v10 = *((_QWORD *)v31[0] + 1);
  }
  v16 = *(_QWORD *)(v2 + 32);
  if (v16)
  {
    v17 = sub_22EBEE748((uint64_t *)a1, v16, *(void **)(v2 + 40), (unint64_t)v8, v10);
    if (!v17)
      return 1;
    v19 = v17;
    v20 = v18;
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  if ((*(_BYTE *)(v2 + 2) & 8) != 0)
    v21 = *(_DWORD *)(v2 + 80);
  else
    v21 = 0;
  sub_22EBF2014(&v30, (uint64_t *)a1, (__n128 *)(v2 + 48));
  if (!v30.n128_u64[0])
    return 1;
  v22 = *(unsigned int *)v2;
  if ((v22 & 0x80000) != 0 && (v23 = *(_DWORD *)(v2 + 72)) != 0)
  {
    v24 = *(_DWORD *)(v2 + 76);
    v31[0] = v32;
    v31[1] = (void *)0x800000000;
    v32[64] = v23;
    v32[65] = v24;
    v25 = v2 + 72 + 16 * ((v22 >> 19) & 1);
    if ((sub_22EBF221C(a1, v25, v25 + 32 * *(unsigned int *)(v2 + 84)) & 1) != 0)
      v2 = 1;
    else
      v2 = sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (*(_DWORD *)v2 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)&v30, (uint64_t)v31);
    if (v31[0] != v32)
      free(v31[0]);
  }
  else
  {
    if (v4 != (v7 & 0xFFFFFFFFFFFFFFFELL)
      || *(_DWORD *)(*(_QWORD *)a1 + 11992) != -1
      || v5 != *(_QWORD *)(v2 + 24)
      || v19 != *(_QWORD *)(v2 + 32)
      || v20 != *(_QWORD *)(v2 + 40)
      || v30.n128_u64[0] != *(_QWORD *)(v2 + 48))
    {
      return sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (v22 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)&v30, 0);
    }
    if ((v22 & 0x100000) != 0)
    {
      v27 = (_DWORD *)(v2 + 72);
      if ((v22 & 0x80000) != 0 && *v27)
        v28 = *(unsigned int *)(v2 + 84);
      else
        v28 = 0;
      v26 = *(_QWORD *)&v27[8 * v28 + 4 * ((v22 >> 19) & 1)];
    }
    else
    {
      v26 = 0;
    }
    if (v10 != v26)
      return sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (v22 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)&v30, 0);
  }
  return v2;
}

uint64_t sub_22EBE1744(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  void *v37[2];
  _QWORD v38[5];

  v2 = a2;
  v38[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    v5 = sub_22EBDD628(a1, v4);
    if ((v5 & 1) != 0)
      return 1;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v2 + 40);
  if (!v7 || (*(_BYTE *)(v7 + 1) & 0x20) == 0)
    v7 = *(_QWORD *)(v2 + 48);
  v37[0] = v38;
  v37[1] = (void *)0x200000000;
  v8 = *a1;
  v35 = 7;
  v36 = v7;
  sub_22EE7377C(v8, (uint64_t)&v35, (uint64_t)v37);
  v9 = *(_DWORD *)(v2 + 28);
  v10 = v9 != 0;
  v11 = v9 != 0;
  v12 = v9 - 1;
  if (v11)
    v13 = v12;
  else
    v13 = 0;
  v14 = *a1;
  v15 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  v16 = *(_QWORD *)(v2 + 40);
  if (v16)
  {
    v17 = sub_22EBDD628(a1, v16);
    if ((v17 & 1) != 0)
      goto LABEL_18;
  }
  else
  {
    v17 = 0;
  }
  v18 = *(_QWORD *)(v2 + 48);
  if (!v18)
  {
    v19 = 0;
    goto LABEL_20;
  }
  v19 = sub_22EBDD628(a1, v18);
  if ((v19 & 1) == 0)
  {
LABEL_20:
    v20 = *a1;
    if (*(_DWORD *)(v20 + 11992) != -1
      || *(_QWORD *)(v2 + 40) != (v17 & 0xFFFFFFFFFFFFFFFELL)
      || *(_QWORD *)(v2 + 48) != (v19 & 0xFFFFFFFFFFFFFFFELL))
    {
      v22 = *(_DWORD *)(v2 + 16);
      if (!v22)
      {
        v23 = *(_QWORD *)(v2 + 40);
        if (v23 && (*(_BYTE *)(v23 + 1) & 0x20) != 0)
        {
          sub_22F0D5A50(v23);
          v22 = v24;
        }
        else
        {
          v22 = *(_DWORD *)(v2 + 20);
        }
      }
      v25 = v13 | (v10 << 32);
      v26 = v17 & 0xFFFFFFFFFFFFFFFELL;
      v27 = *(_DWORD *)(v2 + 56);
      v28 = v19 & 0xFFFFFFFFFFFFFFFELL;
      v30 = *(_DWORD *)(v2 + 20);
      v29 = *(_DWORD *)(v2 + 24);
      if (!v29)
      {
        v31 = *(_QWORD *)(v2 + 40);
        if (!v31 || (v29 = *(_DWORD *)(v2 + 20), (*(_BYTE *)(v31 + 1) & 0x20) == 0))
        {
          v32 = *(_QWORD *)(v2 + 48);
          v34 = v22;
          v33 = v26;
          sub_22F0D60E4(v32);
          v26 = v33;
          v22 = v34;
        }
      }
      v2 = sub_22F34AF2C(v20, v6, v22, v26, v27, v30, v28, v29, v25);
    }
    goto LABEL_23;
  }
LABEL_18:
  v2 = 1;
LABEL_23:
  *(_DWORD *)(v14 + 11992) = v15;
  if (v37[0] != v38)
    free(v37[0]);
  return v2;
}

uint64_t sub_22EBE1970(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a2;
  v4 = sub_22EBEE6F4(a1, *(_QWORD *)(a2 + 8));
  if (v4 < 0x10)
    return 1;
  v5 = v4;
  v6 = *(_QWORD *)(v2 + 16);
  v13 = v6;
  v14 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v13, &v14)
    && v14 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v6 = *(_QWORD *)(v14 + 8);
  }
  if (!v6)
    return 1;
  v7 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) == -1 && v5 == *(_QWORD *)(v2 + 8) && v6 == *(_QWORD *)(v2 + 16))
  {
    sub_22EB4E494(v7, *(unsigned int *)(v2 + 24), v6, 1);
  }
  else
  {
    v9 = *(_DWORD *)(v2 + 24);
    v10 = *(unsigned __int8 *)(v2 + 28);
    v11 = v10 & 1;
    v12 = (v10 >> 1) & 1;
    v2 = sub_22E3CD3D4(*(_QWORD *)(v7 + 88) + 2032, 32, 3);
    sub_22F2F3990(v2, v9, v5, v6, v11, v12);
  }
  return v2;
}

uint64_t sub_22EBE1A80(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unsigned int v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _QWORD v50[10];

  v2 = a2;
  v50[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EBF1D24(a1, *(uint64_t **)(a2 + 32));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = *(_DWORD *)v2;
  v7 = (*(_DWORD *)v2 & 0x80000) == 0;
  if ((*(_DWORD *)v2 & 0x80000) == 0)
  {
    v8 = 0;
    v9 = 0;
    v10 = *(_DWORD *)v2;
    goto LABEL_10;
  }
  v11 = *(_QWORD *)(v2 + 56);
  if (!v11)
  {
    v12 = 0;
    v10 = *(_DWORD *)v2;
    goto LABEL_9;
  }
  v12 = sub_22EBDD628(a1, v11);
  if ((v12 & 1) != 0)
    return 1;
  v10 = *(_DWORD *)v2;
LABEL_9:
  v8 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v9 = 1;
LABEL_10:
  v45 = 0;
  v48 = v50;
  v49 = 0x800000000;
  v13 = (_QWORD *)(v2 + 56);
  if ((v10 & 0x1800000) != 0)
    v14 = ((v10 >> 19) & 1) + 1;
  else
    v14 = (v10 >> 19) & 1;
  if ((sub_22EBF1574(a1, (unsigned __int8 **)&v13[v14], *(_DWORD *)(v2 + 4), 1, (uint64_t)&v48, &v45) & 1) != 0)
    goto LABEL_14;
  v15 = *(unsigned int *)v2;
  if ((v15 & 0x1800000) != 0)
  {
    v16 = (v15 >> 19) & 1;
    v17 = v13[v16];
    if (v17)
    {
      v18 = sub_22EBF1808(a1, (unsigned __int8 *)v13[v16], 1);
      if ((v18 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      v18 = 0;
    }
  }
  else
  {
    v18 = 0;
    v17 = 0;
  }
  v43 = v18;
  v44 = v8;
  v19 = *(_QWORD *)(v2 + 16);
  if (!v19
    || (v46 = *(_QWORD *)(v2 + 16), v47 = 0, !sub_22E793870(a1 + 1, &v46, &v47))
    || v47 == a1[1] + 16 * *((unsigned int *)a1 + 6)
    || (v19 = *(_QWORD *)(v47 + 8)) != 0)
  {
    v42 = v9;
    v20 = *(_QWORD *)(v2 + 24);
    if (!v20
      || (v46 = *(_QWORD *)(v2 + 24), v47 = 0, !sub_22E793870(a1 + 1, &v46, &v47))
      || v47 == a1[1] + 16 * *((unsigned int *)a1 + 6)
      || (v20 = *(_QWORD *)(v47 + 8)) != 0)
    {
      v21 = *a1;
      if (*(_DWORD *)(*a1 + 11992) == -1 && v5 == *(unint64_t **)(v2 + 32))
      {
        if ((*(_BYTE *)(v2 + 2) & 8) != 0 && *v13)
        {
          if ((v6 & 0x80000) == 0)
          {
            v22 = *v5;
            goto LABEL_32;
          }
          v7 = v44 == *v13;
        }
        if (v17 == (v43 & 0xFFFFFFFFFFFFFFFELL)
          && v7
          && v19 == *(_QWORD *)(v2 + 16)
          && v20 == *(_QWORD *)(v2 + 24)
          && !v45)
        {
          if (v19)
            sub_22EB4E494(v21, *(unsigned int *)(v2 + 40), v19, 1);
          if (v20)
            sub_22EB4E494(*a1, *(unsigned int *)(v2 + 40), v20, 1);
          if ((*(_BYTE *)(v2 + 2) & 8) != 0)
          {
            v36 = *(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0);
            if (!v36 || *(_BYTE *)(v36 + 16) != 39)
              v36 = sub_22F10CF48(v36);
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v36 + 32) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
            {
              v37 = *(_QWORD *)(*a1 + 88);
              v38 = *(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0);
              if (!v38 || *(_BYTE *)(v38 + 16) != 39)
                v38 = sub_22F10CF48(v38);
              v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(v37, *(_QWORD *)(v38 + 32)) & 0xFFFFFFFFFFFFFFF0)
                                          + 8) & 0xFFFFFFFFFFFFFFF0);
              if (v39)
              {
                if (*(_BYTE *)(v39 + 16) == 45)
                {
                  v40 = sub_22F114198(*(_QWORD *)(v39 + 24));
                  v41 = sub_22EC6602C(*a1, v40) & 0xFFFFFFFFFFFFFFF8;
                  if (v41)
                    sub_22EB4E494(*a1, *(unsigned int *)(v2 + 40), v41, 1);
                }
              }
            }
          }
          goto LABEL_49;
        }
      }
      v22 = *v5;
      if ((v6 & 0x80000) != 0)
      {
        v24 = v42;
        goto LABEL_43;
      }
LABEL_32:
      v23 = sub_22EF5C728(*(_QWORD *)(v21 + 88), v22);
      v24 = v42;
      if (v23)
      {
        v25 = v23;
        v26 = *(unsigned __int8 *)(v23 + 16);
        if (v26 == 3)
        {
          v31 = *(_QWORD *)(v23 + 48);
          if (v31)
            goto LABEL_42;
        }
        else if (v26 == 2)
        {
          v27 = *(_QWORD *)(*a1 + 88);
          v28 = sub_22EF67C8C(v27);
          v29 = *(_DWORD *)(v2 + 40);
          v30 = sub_22E3CD3D4(v27 + 2032, 32, 3);
          v31 = sub_22EFF8F1C(v30, v27, v25 + 40, v28, v29);
LABEL_42:
          v22 = *(_QWORD *)(v25 + 32);
          v24 = 1;
          v44 = v31;
        }
      }
LABEL_43:
      v32 = *(_DWORD *)v2;
      if ((*(_DWORD *)v2 & 0x2000000) != 0)
      {
        v34 = (v32 >> 19) & 1;
        if ((v32 & 0x1800000) != 0)
          ++v34;
        v33 = v13[v34 + *(_DWORD *)(v2 + 4)];
      }
      else
      {
        v33 = 0;
      }
      v2 = sub_22EBBD504(*a1, *(unsigned int *)(v2 + 40) | ((unint64_t)*(unsigned int *)(v2 + 40) << 32), (v32 >> 18) & 1, *(unsigned int *)(v2 + 40), (uint64_t)v48, v49, *(unsigned int *)(v2 + 40), v33, v22, v5, v44, v24, *(_QWORD *)(v2 + 48), (unsigned __int8 *)(v43 & 0xFFFFFFFFFFFFFFFELL));
      goto LABEL_49;
    }
  }
LABEL_14:
  v2 = 1;
LABEL_49:
  if (v48 != v50)
    free(v48);
  return v2;
}

uint64_t sub_22EBE1F0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v14[3];
  int v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v17 = 0;
  v16 = 0;
  v15 = 3;
  *(_QWORD *)v14 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v17, v14, (__int16 *)(v4 + 1693), &v16, &v15);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v11 & 1) != 0)
  {
    a2 = 1;
  }
  else
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 16) != v12)
      a2 = sub_22F3321E4(*a1, *(_QWORD *)(a2 + 24), v12, HIDWORD(*(_QWORD *)(a2 + 24)));
  }
  sub_22EB48E64(v4);
  return a2;
}

uint64_t sub_22EBE2080(unsigned int **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned __int16 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  __int128 v52;
  void *v53[2];
  char v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  __int128 v58;
  void *v59[2];
  uint64_t v60;
  unsigned int v61;
  _QWORD *v62;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v55 = 0;
  v5 = (*(_BYTE *)(a2 + 24) & 1) != 0 ? 36 : 25;
  v6 = sub_22EBCD1E4(*a1, 0, v4 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(a2 + 28), v5, &v55, &v54);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v55;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(void **)(a2 + 40);
  if (!v8)
  {
    v12 = 0;
    goto LABEL_12;
  }
  v10 = sub_22EBEE748((uint64_t *)a1, v8, v9, v55, 0);
  if (!v10)
    return 1;
  v12 = v10;
  v9 = v11;
LABEL_12:
  v52 = 0u;
  *(_OWORD *)v53 = 0u;
  sub_22E8ACE30((uint64_t)&v52, v12, (uint64_t)v9);
  v16 = *(_QWORD *)(a2 + 64);
  v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if ((v16 & 1) != 0 || !v17)
  {
    if (v7 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
    {
      v22 = *(_DWORD *)(a2 + 72);
      if ((v16 & 1) != 0)
        v17 = v16 | 1;
      else
        v17 = 1;
    }
    else
    {
      v19 = sub_22EBB87FC(*a1, v15, (_QWORD *)((v16 << 63 >> 63) & v17), *(_DWORD *)(a2 + 72), 0, (uint64_t)&v52, v7, 0);
      if (!v19)
        goto LABEL_80;
      v20 = v19;
      if (v19 >= 0x10)
      {
        v23 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
        if (v23 && *(_BYTE *)(v23 + 16) == 57)
          v20 = *(_QWORD *)(v23 + 8);
      }
      else
      {
        v20 = 0;
      }
      v24 = sub_22EF579A8(*((_QWORD *)*a1 + 11), v20, *(_DWORD *)(a2 + 72));
      v17 = (unint64_t)v24 & 0xFFFFFFFFFFFFFFFELL;
      v22 = sub_22F115668(*v24);
    }
  }
  else
  {
    if (*(_QWORD *)v17 >= 0x10uLL)
    {
      v21 = sub_22EBEF96C((uint64_t *)a1, *(_QWORD *)v17, (unsigned int *)(v17 + 8), v7, (uint64_t)&v52);
      if (!v21)
        goto LABEL_80;
      v17 = (unint64_t)v21 & 0xFFFFFFFFFFFFFFFELL;
      v18 = *v21;
    }
    else
    {
      v18 = *(_QWORD *)v17;
    }
    v22 = sub_22F115668(v18);
  }
  v25 = *(_QWORD **)(a2 + 48);
  if (!v25)
    goto LABEL_36;
  v58 = 0u;
  *(_OWORD *)v59 = 0u;
  if (*v25 <= 0xFuLL)
    goto LABEL_36;
  v25 = sub_22EBEF96C((uint64_t *)a1, *v25, (unsigned int *)v25 + 2, v7, (uint64_t)&v58);
  if (HIDWORD(v59[1]))
    free(v59[0]);
  if (v25)
  {
LABEL_36:
    v26 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v27 = *(unsigned int *)(a2 + 28);
    v28 = *(_BYTE *)(a2 + 24);
    v29 = *(_DWORD *)(a2 + 56);
    v30 = *(_DWORD *)(a2 + 60);
    if ((*(_BYTE *)(v26 + 1) & 0x80) != 0
      || (v31 = *(_QWORD *)(v26 + 8), (v17 & 1) != 0) && (v17 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
LABEL_39:
      if ((v28 & 1) != 0)
        v32 = 36;
      else
        v32 = 25;
      v33 = sub_22EBCD92C((uint64_t)*a1, v26, v27, v32, (uint64_t)&v52, v25, v29, v30, v17, v22);
      goto LABEL_43;
    }
    v34 = v31 & 0xFFFFFFFFFFFFFFF0;
    v35 = *(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      if (!v35 || *(_BYTE *)(v35 + 16) != 39)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
          || (v49 = *(_QWORD *)(v26 + 8),
              v50 = *(unsigned int *)(a2 + 28),
              v38 = sub_22F10CF48(v35),
              v31 = v49,
              v27 = v50,
              !v38))
        {
LABEL_56:
          v51 = v27;
          v39 = v31;
          if ((v17 & 1) != 0)
            v40 = 0;
          else
            v40 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFFELL);
          v60 = sub_22EFC6B40((_QWORD *)(*((_QWORD *)*a1 + 11) + 15224), *v40 & 7 | *(_QWORD *)((*v40 & 0xFFFFFFFFFFFFFFF0) + 8));
          v61 = v22;
          sub_22EFC6D6C((uint64_t)&v62, v60);
          v62 = v40;
          if (!v25)
            goto LABEL_65;
          v41 = *v25;
          v42 = *(_QWORD *)(*v25 & 0xFFFFFFFFFFFFFFF0);
          if (v42 && (*(_DWORD *)(v42 + 16) & 0xFE) == 0x2C
            || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C
            && (v43 = sub_22F10CF48(v42), v41 = *v25, v43))
          {
            sub_22E8ACD1C((uint64_t)&v52, *((_QWORD *)*a1 + 11), 0, v41, (uint64_t)(v25 + 1), v29);
LABEL_65:
            v33 = sub_22EC225CC(*a1, v26, v39, v51, v28 & 1, (uint64_t)&v52, 0, 0, (uint64_t)&v60, 0, 0, 0);
LABEL_43:
            v13 = v33;
            goto LABEL_81;
          }
          v44 = *a1;
          v45 = v41;
          while (1)
          {
            if ((v45 & 0xF) != 0)
              goto LABEL_77;
            v46 = *(unsigned __int8 *)(*(_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF0) + 16);
            if (v46 > 0x39)
            {
LABEL_72:
              if (sub_22F115668(v45))
                v41 = v45;
              v45 = sub_22F115B7C(v45);
              if (!v45)
                goto LABEL_79;
            }
            else
            {
              if (v46 == 24)
                goto LABEL_78;
              if (v46 == 26)
              {
                if ((*(_BYTE *)(v45 + 23) & 0x10) != 0)
                {
LABEL_78:
                  v41 = v45;
LABEL_79:
                  v47 = sub_22F115668(v41);
                  sub_22E8FCA40(v44, v47, 0xCEFu, 0, (uint64_t)&v58);
                  v57 = *v25;
                  v48 = sub_22E8901B8((uint64_t)&v58, &v57);
                  v56 = (**((_DWORD **)*a1 + 9) >> 8) & 1;
                  sub_22E89519C(v48, (unsigned int *)&v56);
                  sub_22E903BEC((unsigned int *)&v58);
                  goto LABEL_80;
                }
              }
              else if (((1 << v46) & 0x20000000200003CLL) == 0)
              {
                goto LABEL_72;
              }
LABEL_77:
              v45 = sub_22F115B7C(v45);
            }
          }
        }
        v35 = *(_QWORD *)v34;
        if (*(_BYTE *)(*(_QWORD *)v34 + 16) != 39)
        {
          v35 = sub_22F10CF48(v35);
          v31 = v49;
          v27 = v50;
        }
      }
      v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
    }
    else
    {
      v36 = *(_QWORD *)(v35 + 8);
    }
    v37 = *(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF0);
    if (!v37 || *(_BYTE *)(v37 + 16) != 45)
      goto LABEL_39;
    goto LABEL_56;
  }
LABEL_80:
  v13 = 1;
LABEL_81:
  if (HIDWORD(v53[1]))
    free(v53[0]);
  return v13;
}

uint64_t sub_22EBE25B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  _QWORD v31[2];
  void *v32;
  uint64_t v33;
  _BYTE v34[16];
  _QWORD v35[6];

  v35[4] = *MEMORY[0x24BDAC8D0];
  memset(v29, 0, sizeof(v29));
  sub_22F05FD5C(a2, v29);
  v4 = sub_22EBDD628(a1, *((_QWORD *)&v29[0] + 1));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBDD628(a1, *(_QWORD *)&v29[1]);
  if ((v5 & 1) != 0)
    return 1;
  v27 = v5;
  v28 = v4;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v32 = v34;
  v33 = 0x200000000;
  v31[0] = a2[2];
  v31[1] = *((_QWORD *)&v29[1] + 1);
  v9 = 1;
  do
  {
    v10 = v7;
    v11 = sub_22EFFED0C((unsigned __int8 *)v31[v8]);
    if (*v11 == 141)
    {
      v12 = sub_22EFFED0C(*(unsigned __int8 **)&v11[v11[3]]);
      if (*v12 == 161)
      {
        v13 = v12;
        v14 = v12 + 16;
        if ((*(_DWORD *)(*((_QWORD *)v12 + 2) + 28) & 0x7Eu) - 54 >= 4)
        {
          sub_22F05FD5C(a2, v35);
          v15 = *(unsigned int *)v13;
          if ((v15 & 0x100000) != 0)
            v16 = (unsigned int *)&v13[16 * ((v15 >> 18) & 1) + 32];
          else
            v16 = (unsigned int *)v14;
          v17 = *(_QWORD *)v16;
          v30 = *(_QWORD *)v16;
          v35[0] = 0;
          if (sub_22E793870((uint64_t *)(a1 + 8), &v30, v35)
            && v35[0] != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
          {
            v17 = *(_QWORD *)(v35[0] + 8);
          }
          if (!v17)
            goto LABEL_28;
          v18 = *(unsigned int *)v13;
          if ((v18 & 0x100000) != 0)
            v19 = (unsigned int *)&v13[16 * ((v18 >> 18) & 1) + 32];
          else
            v19 = (unsigned int *)v14;
          v20 = v17 != *(_QWORD *)v19;
          v21 = v33;
          if (v33 >= (unint64_t)HIDWORD(v33))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v21 = v33;
          }
          v6 |= v20;
          *((_QWORD *)v32 + v21) = v17 | 3;
          LODWORD(v33) = v33 + 1;
        }
      }
    }
    v7 = 1;
    v8 = 1;
  }
  while ((v10 & 1) == 0);
  v23 = *(_QWORD *)a1;
  v24 = v28 & 0xFFFFFFFFFFFFFFFELL;
  v25 = v27 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1) | v6 & 1 || *(_OWORD *)((char *)v29 + 8) != __PAIR128__(v25, v24))
  {
    sub_22F05FD5C(a2, v35);
    sub_22EFF605C(v35[3]);
    v9 = sub_22ED1767C(*(_QWORD *)a1, v26, LODWORD(v29[0]), (uint64_t)&v32, v24, v25, 0, 1, 0);
  }
  else
  {
    v35[0] = v28 & 0xFFFFFFFFFFFFFFFELL;
    v35[1] = v27 & 0xFFFFFFFFFFFFFFFELL;
    sub_22F32DC94(v23, a2, 0, v35, 2);
    v9 = (uint64_t)a2;
  }
LABEL_28:
  if (v32 != v34)
    free(v32);
  return v9;
}

uint64_t sub_22EBE2894(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  uint64_t v6[2];

  v2 = a2;
  v4 = sub_22EBE9AF0(a1, *(uint64_t **)(a2 + 16));
  if (!v4)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1 || v4 != *(unint64_t **)(v2 + 16))
  {
    v6[0] = *v4;
    v6[1] = (uint64_t)(v4 + 1);
    sub_22F1167E8(v6);
    return sub_22EBBC368();
  }
  return v2;
}

unsigned int *sub_22EBE293C(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;

  v4 = sub_22EBBB18C(*a1);
  v5 = *a1;
  if (*(_DWORD *)(v5 + 11992) != -1 || v4 != *(_QWORD *)(a2 + 8))
    return sub_22EBBC14C(v5, *(_DWORD *)(a2 + 4), v4, (*(_DWORD *)a2 >> 18) & 1);
  sub_22EFF605C(a2);
  sub_22EBBBBEC(v5, v6, 0, 1, 0, 0);
  return (unsigned int *)a2;
}

uint64_t sub_22EBE29C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22EBBA860(*a1, *(_DWORD *)(v2 + 4), v5, (*(_DWORD *)v2 >> 18) & 1);
  return v2;
}

uint64_t sub_22EBE2A30(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) == 0)
  {
    if ((*(_BYTE *)(a2 + 1) & 3) == 0)
      goto LABEL_6;
    v6 = 0;
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v7 || *(_BYTE *)(v7 + 16) != 45)
      goto LABEL_13;
    v8 = sub_22F114198(*(_QWORD *)(v7 + 24));
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 104) + 96), *(_QWORD *)(v8 + 104));
    if ((**(_QWORD **)(v8 + 128) & 0x400) != 0)
      v6 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
    else
LABEL_6:
      v6 = 0;
LABEL_13:
    v11 = *a1;
    sub_22EB4DECC(*a1, v6, 0, 3);
    v15 = sub_22EBDD628(a1, v5);
    if ((v15 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (*(_DWORD *)(*a1 + 11992) != -1 || v16 != (_QWORD *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        v2 = sub_22EBB98E0(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 24), v16, *(unsigned int *)(v2 + 28), v12, v13, v14);
    }
    sub_22EB48E64(v11);
    return v2;
  }
  v9 = (uint64_t *)sub_22EBE9AF0((_QWORD **)a1, (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8));
  if (!v9)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || v9 != (uint64_t *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
    return sub_22EBB9700((_QWORD *)*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 24), v9, *(unsigned int *)(v2 + 28));
  return v2;
}

uint64_t sub_22EBE2BA8(uint64_t *a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  char v18;
  int v19[3];
  int v20;
  uint64_t v21;
  int v22;
  void *v23[2];
  _QWORD v24[9];

  v24[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EBF1D24(a1, *(uint64_t **)(a2 + 16));
  if (!v4)
    return 1;
  v5 = v4;
  v18 = 0;
  v23[0] = v24;
  v23[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 4) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if (!*(_DWORD *)(a2 + 24))
  {
    v8 = *a1;
    v9 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
    v10 = v9 > 3 || v9 == 2;
    if (!v10 && (*(_BYTE *)(*(_QWORD *)(v8 + 72) + 1) & 2) != 0)
    {
      v22 = 1;
      v21 = 0;
      v20 = 3;
      *(_QWORD *)v19 = *(unsigned int *)(v8 + 1704);
      sub_22EB4DDB8(v8 + 3688, &v22, v19, (__int16 *)(v8 + 1693), &v21, &v20);
      v11 = *(unsigned int *)(v8 + 3696);
      v12 = v11 - 2;
      v13 = *(_QWORD *)(v8 + 3688);
      v14 = *(_DWORD *)(v13 + 576 * (v11 - 2));
      if (v14 == 5)
      {
        *(_BYTE *)(v13 + 576 * v11 - 4) = *(_BYTE *)(v13 + 576 * v12 + 572);
        v15 = 1;
      }
      else if (v14 == 2)
      {
        *(_BYTE *)(v13 + 576 * v11 - 4) = 1;
        v15 = *(_BYTE *)(v13 + 576 * v12 + 573) != 0;
      }
      else
      {
        v15 = 0;
        *(_BYTE *)(v13 + 576 * v11 - 4) = 0;
      }
      v16 = v13 + 576 * v11;
      *(_BYTE *)(v16 - 3) = v15;
      *(_WORD *)(v8 + 1693) = 0;
      if (*(_DWORD *)(v8 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v8 + 1776), (llvm::SmallPtrSetImplBase *)(v16 - 560));
        sub_22EAEAE08(v8 + 1840, (uint64_t *)(v16 - 496));
      }
      v6 = 1;
      v17 = sub_22EBF1574(a1, (unsigned __int8 **)(a2 + 32), *(_DWORD *)(a2 + 4), 1, (uint64_t)v23, &v18);
      sub_22EB48E64(v8);
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_6;
    }
  }
  v6 = 1;
  if ((sub_22EBF1574(a1, (unsigned __int8 **)(a2 + 32), *(_DWORD *)(a2 + 4), 1, (uint64_t)v23, &v18) & 1) == 0)
  {
LABEL_6:
    if (*(_DWORD *)(*a1 + 11992) == -1 && v5 == *(unint64_t **)(a2 + 16) && !v18)
      v6 = a2;
    else
      v6 = sub_22EBBC368();
  }
LABEL_8:
  if (v23[0] != v24)
    free(v23[0]);
  return v6;
}

uint64_t sub_22EBE2E40(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if ((v4 & 4) != 0)
  {
    v14 = (uint64_t *)sub_22EBE9AF0(a1, (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8));
    if (v14)
    {
      if (*((_DWORD *)*a1 + 2998) != -1 || v14 != (uint64_t *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        return sub_22EBBA098(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 32), v14, *(_DWORD *)(v2 + 36));
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v5 = *a1;
    v19 = 0;
    v18 = 0;
    v17 = 3;
    *(_QWORD *)v16 = *((unsigned int *)v5 + 426);
    sub_22EB4DDB8((uint64_t)(v5 + 461), &v19, v16, (__int16 *)((char *)v5 + 1693), &v18, &v17);
    v6 = *((unsigned int *)v5 + 924);
    v7 = v6 - 2;
    v8 = v5[461];
    v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
    if (v9 == 5)
    {
      *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
      v10 = 1;
    }
    else if (v9 == 2)
    {
      *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
      v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
    }
    else
    {
      v10 = 0;
      *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
    }
    v11 = v8 + 576 * v6;
    *(_BYTE *)(v11 - 3) = v10;
    *(_WORD *)((char *)v5 + 1693) = 0;
    if (*((_DWORD *)v5 + 462))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v5 + 222), (llvm::SmallPtrSetImplBase *)(v11 - 560));
      sub_22EAEAE08((uint64_t)(v5 + 230), (uint64_t *)(v11 - 496));
    }
    v12 = sub_22EBDD628(a1, *(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8);
    if ((v12 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      if (*((_DWORD *)*a1 + 2998) != -1 || v13 != (*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        v2 = sub_22EBBA3E8(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 32), v13, *(_DWORD *)(v2 + 36));
    }
    sub_22EB48E64(v5);
  }
  return v2;
}

uint64_t sub_22EBE3018(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  int v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[9];

  v23[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EBDD628(a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v19 = 0;
  v21 = v23;
  v22 = 0x800000000;
  v5 = 1;
  if ((sub_22EBF1574(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), a2[4], 1, (uint64_t)&v21, &v19) & 1) == 0)
  {
    v6 = *a1;
    v7 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    v8 = *a2;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && (*(unsigned __int8 **)((char *)a2 + (v8 >> 24)) == v7 ? (v9 = v19 == 0) : (v9 = 0), v9))
    {
      v5 = sub_22EBCC6C0(*a1, (uint64_t)a2);
    }
    else
    {
      sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
      v11 = v10;
      v12 = *(_DWORD *)(v6 + 56);
      v13 = *(_QWORD *)(v6 + 1296);
      v18 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + 520);
      if ((v8 & 0x100000) != 0)
      {
        v14 = *(_QWORD *)((char *)&a2[2 * ((v8 >> 18) & 1) + 2 + 2 * a2[4]] + (v8 >> 24));
        sub_22E51A8D0(&v20, *(_QWORD *)(v6 + 72));
        v15 = *a1;
        *(_DWORD *)(v15 + 56) = v20 & ~HIDWORD(v14) | HIDWORD(v14) & v14;
        *(_QWORD *)(v15 + 1296) = v14;
      }
      v5 = sub_22EBF24BC((uint64_t)a1, v7, v11, (uint64_t)v21, v22, a2[5], 0);
      *(_DWORD *)(v6 + 56) = v12;
      *(_QWORD *)(v6 + 1296) = v13;
      v16 = *(_QWORD *)(v6 + 80);
      *(_QWORD *)(v16 + 520) = v18;
      *(_DWORD *)(v16 + 528) = v18;
    }
  }
  if (v21 != v23)
    free(v21);
  return v5;
}

uint64_t sub_22EBE31F8(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  unint64_t v9;
  char v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EBDD628(a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBE3018(a1, *(unsigned int **)((char *)a2 + *((unsigned __int8 *)a2 + 3) + 8));
  if ((v5 & 1) != 0)
    return 1;
  v11 = 0;
  v12 = v14;
  v13 = 0x800000000;
  v6 = 1;
  if ((sub_22EBF1574(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), a2[4], 1, (uint64_t)&v12, &v11) & 1) == 0)
  {
    if (*(_DWORD *)(*a1 + 11992) == -1
      && (*(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)) == (v4 & 0xFFFFFFFFFFFFFFFELL)
        ? (v7 = v11 == 0)
        : (v7 = 0),
          v7))
    {
      v9 = sub_22EBCC6C0(*a1, (uint64_t)a2);
    }
    else
    {
      sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
      v9 = sub_22EBF24BC((uint64_t)a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), v8, (uint64_t)v12, v13, a2[5], v5 & 0xFFFFFFFFFFFFFFFELL);
    }
    v6 = v9;
  }
  if (v12 != v14)
    free(v12);
  return v6;
}

uint64_t sub_22EBE3360(uint64_t *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unint64_t v31;
  _QWORD *v32;
  int v33;
  unsigned __int8 *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  _QWORD v60[18];

  v60[16] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)((char *)a2 + BYTE3(*(_QWORD *)a2));
  if ((*(_QWORD *)a2 & 0x3E00000000) == 0x2A00000000)
  {
    v5 = sub_22EBDD628(a1, v4[((*(_QWORD *)a2 >> 18) & 1) + 1]);
    if ((v5 & 1) == 0)
    {
      v6 = *a1;
      v7 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL);
      sub_22F0D60E4(v5 & 0xFFFFFFFFFFFFFFFELL);
      v9 = sub_22F141A3C(v8, 0, *(_QWORD **)(v6 + 112), *(_DWORD **)(v6 + 72));
      v58 = v60;
      v59 = 0x800000000;
      v10 = 1;
      if ((sub_22EBF1574(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4]+ ((unint64_t)*a2 >> 24)), a2[4] - 1, 1, (uint64_t)&v58, 0) & 1) == 0)
      {
        if ((*(_QWORD *)a2 & 0x3F00000000) == 0x2B00000000)
          v11 = sub_22EB296C0(*a1, 0, v7, v9, (uint64_t *)v58, v59, a2[7]);
        else
          v11 = sub_22EBF24BC((uint64_t)a1, v7, v9, (uint64_t)v58, v59, a2[7], 0);
        v10 = v11;
      }
      if (v58 != v60)
        free(v58);
      return v10;
    }
    return 1;
  }
  v12 = sub_22EBDD628(a1, *v4);
  if ((v12 & 1) != 0)
    return 1;
  v13 = *(unsigned __int8 **)((char *)&a2[2 * ((*(_QWORD *)a2 >> 18) & 1) + 2] + BYTE3(*(_QWORD *)a2));
  if ((*(_QWORD *)a2 & 0x3F00000000) == 0xB00000000 && *v13 == 163)
    v14 = sub_22EBF2584(a1, (uint64_t)v13, 1, 0);
  else
    v14 = sub_22EBDD628(a1, v13);
  v15 = v14;
  if ((v14 & 1) != 0)
    return 1;
  if (a2[4] == 2)
  {
    v16 = sub_22EBDD628(a1, *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24)));
    if ((v16 & 1) != 0)
      return 1;
  }
  else
  {
    v16 = 0;
  }
  v18 = *a1;
  v19 = *a2;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || (v20 = (_QWORD *)((char *)a2 + (v19 >> 24)), *v20 != (v12 & 0xFFFFFFFFFFFFFFFELL))
    || (v21 = &v20[(v19 >> 18) & 1], v23 = v21[1], v22 = v21 + 1, v23 != (v15 & 0xFFFFFFFFFFFFFFFELL))
    || a2[4] == 2 && v22[1] != (v16 & 0xFFFFFFFFFFFFFFFELL))
  {
    if ((v19 & 0x100000) != 0)
      v24 = *(_QWORD *)((char *)&a2[2 * ((v19 >> 18) & 1) + 2 + 2 * a2[4]] + (v19 >> 24));
    else
      v24 = 0;
    v25 = *(_DWORD *)(v18 + 56);
    v26 = *(_QWORD *)(v18 + 1296);
    v57 = *(_QWORD *)(*(_QWORD *)(v18 + 80) + 520);
    sub_22E51A8D0(&v58, *(_QWORD *)(v18 + 72));
    v27 = *a1;
    *(_DWORD *)(v27 + 56) = v58 & ~HIDWORD(v24) | HIDWORD(v24) & v24;
    *(_QWORD *)(v27 + 1296) = v24;
    v28 = a2[1] & 0x3F;
    v29 = a2[5];
    v30 = (unsigned __int8 *)(v12 & 0xFFFFFFFFFFFFFFFELL);
    v31 = v15 & 0xFFFFFFFFFFFFFFFELL;
    v32 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    v33 = (v16 & 0xFFFFFFFFFFFFFFFELL) != 0;
    v34 = sub_22EFFBBCC(v30);
    if ((v28 - 37) >= 2)
      v33 = 0;
    if ((*(_DWORD *)v31 & 0x1C00) == 0xC00)
    {
      v35 = sub_22EFFBA54(v28);
      v36 = (_QWORD *)*a1;
      if ((v35 - 21) <= 0xA)
      {
        v10 = sub_22ED27A90(v36, 0, v29, v35, v31, (uint64_t)v32);
LABEL_48:
        v44 = v57;
LABEL_82:
        *(_DWORD *)(v18 + 56) = v25;
        *(_QWORD *)(v18 + 1296) = v26;
        v54 = *(_QWORD *)(v18 + 80);
        *(_QWORD *)(v54 + 520) = v44;
        *(_DWORD *)(v54 + 528) = v44;
        return v10;
      }
      v37 = sub_22EB19A28(v36);
      if ((v37 & 1) != 0)
        goto LABEL_47;
      v31 = v37 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (!v32 || (*(_DWORD *)v32 & 0x1C00) != 0xC00)
    {
LABEL_38:
      if (v28 == 43)
      {
        v39 = *(_QWORD *)(*(_QWORD *)(v31 + 8) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v39 + 17) & 4) == 0
          && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
        {
          v40 = *(_QWORD *)(v32[1] & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v40 + 17) & 4) == 0
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
          {
            v41 = *a1;
            sub_22F0D5A50((uint64_t)v34);
            v43 = sub_22EB2AFE4(v41, (uint64_t (**)())v31, v42, v32, v29);
            goto LABEL_55;
          }
        }
      }
      else
      {
        if (v28 == 41)
        {
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v31 + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
          {
            v10 = 1;
            goto LABEL_81;
          }
          v43 = sub_22ED1C570();
LABEL_55:
          v10 = v43;
LABEL_81:
          v44 = v57;
          goto LABEL_82;
        }
        v45 = *(_QWORD *)(*(_QWORD *)(v31 + 8) & 0xFFFFFFFFFFFFFFF0);
        v46 = *(_DWORD *)(v45 + 16);
        if (((v32 != 0) & ~v33) != 0)
        {
          if ((v46 & 0x400) == 0
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
          {
            v48 = *(_QWORD *)(v32[1] & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v48 + 17) & 4) == 0
              && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
            {
              sub_22EFFBA54(v28);
              v55 = sub_22EB2D0B8();
              if ((v55 & 1) != 0)
                v10 = 1;
              else
                v10 = v55;
              goto LABEL_81;
            }
          }
        }
        else if ((v46 & 0x400) == 0
               && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C
               || v28 == 11 && sub_22EB48AD0(*a1, (unsigned __int8 *)v31))
        {
          v47 = sub_22EFFA13C(v28, v33);
          v43 = sub_22EB2EA08(*a1, v29, v47, v31);
          goto LABEL_55;
        }
      }
      v58 = v60;
      v59 = 0x1000000000;
      v49 = *v34;
      v56 = v25;
      if (v49 == 211)
      {
        sub_22E3D0148((uint64_t)&v58, v34 + 64, &v34[8 * *((unsigned int *)v34 + 1) + 64]);
        v50 = (*(_DWORD *)v34 >> 19) & 1;
        v49 = *(_DWORD *)v34;
      }
      else
      {
        v51 = *((_QWORD *)v34 + 2);
        v50 = 0;
        if ((*(_DWORD *)(v51 + 28) & 0x7Eu) - 54 >= 4)
        {
          v60[0] = v51 | 3;
          LODWORD(v59) = 1;
        }
      }
      if (((v32 != 0) & ~v33) != 0)
      {
        if (v28 == 43)
        {
          if (v49 != 161)
            sub_22F0D5A50((uint64_t)v34);
          v25 = v56;
          v10 = sub_22ED18C00();
          goto LABEL_79;
        }
        v52 = sub_22EFFBA54(v28);
        v53 = sub_22ED1767C(*a1, v29, v52, (uint64_t)&v58, v31, (uint64_t)v32, v50, 1, 0);
        if ((v53 & 1) != 0)
          v10 = 1;
        else
          v10 = v53;
      }
      else
      {
        sub_22EFFA13C(v28, v33);
        v10 = sub_22ED1677C();
      }
      v25 = v56;
LABEL_79:
      if (v58 != v60)
        free(v58);
      goto LABEL_81;
    }
    v38 = sub_22EB19A28(*a1);
    if ((v38 & 1) == 0)
    {
      v32 = (_QWORD *)(v38 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_38;
    }
LABEL_47:
    v10 = 1;
    goto LABEL_48;
  }
  return sub_22EBCC6C0(*a1, (uint64_t)a2);
}

uint64_t sub_22EBE3AB0(uint64_t *a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = sub_22EBE9AF0((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22E95C7F8(*a1, *(_DWORD *)(a2 + 32), v5, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
}

uint64_t sub_22EBE3B1C(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v2 = a2;
  v4 = sub_22EBE9AF0(a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  v7 = sub_22EBDD628(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != *(unint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22E95CFA4(*a1, *(unsigned int *)(v2 + 32), v5, *(unsigned int *)(v2 + 36), v7 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EBE3BC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v2 = a2;
  v4 = sub_22EBF1D24(a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  v7 = sub_22EBDD628(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(unint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EBBC368();
  }
  return v2;
}

uint64_t sub_22EBE3C80(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22EBE9AF0((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EBDD628(a1, *(_QWORD *)(v2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(uint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EC33F14(*a1, *(_DWORD *)(v2 + 32), *(_BYTE *)(v2 + 40) & 3, *(_DWORD *)(v2 + 36), v5, (void *)(v6 & 0xFFFFFFFFFFFFFFFELL));
  }
  return v2;
}

uint64_t sub_22EBE3D24(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;

  v3 = sub_22EFFB374(a2);
  return sub_22EBDD628(a1, v3);
}

uint64_t sub_22EBE3D50(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v2 = a2;
  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBDD628(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EBDD628(a1, *(_QWORD *)(v2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v7 = (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_DWORD **)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 32) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB4A774(*a1, *(_DWORD *)(v2 + 40), v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 44));
  }
  return v2;
}

uint64_t sub_22EBE3E14(_QWORD **a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8);
  v5 = sub_22EBE9AF0(a1, v4);
  if (!v5)
    return 1;
  v6 = (uint64_t *)v5;
  v7 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 32));
  if ((v7 & 1) != 0)
    return 1;
  v8 = *a1;
  v9 = *(_QWORD *)(a2 + 32);
  if (v6 == v4 && *((_DWORD *)v8 + 2998) == -1 && v9 == (v7 & 0xFFFFFFFFFFFFFFFELL))
    return sub_22EBCC6C0((uint64_t)v8, a2);
  sub_22F0D60E4(v9);
  return sub_22EB34874();
}

uint64_t sub_22EBE3EE0(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];
  void *v17[2];
  _QWORD v18[34];

  v18[33] = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 80);
  v17[0] = v18;
  v5 = *v4;
  v17[1] = (void *)0x800000000;
  v18[32] = v5;
  if ((sub_22EBF221C((uint64_t)a1, (uint64_t)(v4 + 2), (uint64_t)&v4[4 * *((unsigned int *)v4 + 2) + 2]) & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    v9 = *(_DWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 64);
    v14 = *(_QWORD *)(a2 + 56);
    v11 = *(_QWORD *)(a2 + 72);
    v15 = 0u;
    *(_OWORD *)v16 = 0u;
    sub_22E8ACE30((uint64_t)&v15, v7, v8);
    v6 = sub_22F345EB4(*a1, (unsigned int *)&v15, v9, &v13, v10, v11, (uint64_t)v17);
    if (HIDWORD(v16[1]))
      free(v16[0]);
    if ((v6 & 1) != 0)
      v6 = 1;
  }
  if (v17[0] != v18)
    free(v17[0]);
  return v6;
}

uint64_t sub_22EBE4004(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v2 = a2;
  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t *)sub_22EBE9AF0(a1, *(uint64_t **)(v2 + 24));
  if (!v5)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != *(uint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F310E84(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v5, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 36));
  }
  return v2;
}

uint64_t sub_22EBE409C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBF1808(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FA6A4(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (*(_DWORD *)a2 >> 18) & 1);
}

uint64_t sub_22EBE40F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBF1808(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB1B0(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EBE413C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int32 v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  void **v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __n128 v27;
  uint64_t v28;
  __int128 v29;
  void *v30[2];
  void *v31[2];
  _QWORD v32[32];
  uint64_t v33;
  uint64_t v34;

  v2 = a2;
  v34 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 4) != 0 && (v4 = *(_QWORD *)(a2 + 32)) != 0)
  {
    v5 = sub_22EBEE748(a1, v4, *(void **)(v2 + 40), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v10 = (uint64_t *)(v2 + 16);
  v9 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)&v29 = v9;
  v31[0] = 0;
  if (sub_22E793870(a1 + 1, &v29, v31) && v31[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
    v9 = *((_QWORD *)v31[0] + 1);
  if (!v9)
    return 1;
  v11 = *(unsigned int *)v2;
  v12 = v2 + 32;
  if ((v11 & 0x100000) != 0)
    v13 = (uint64_t *)(v2 + 32 + 16 * ((v11 >> 18) & 1));
  else
    v13 = (uint64_t *)(v2 + 16);
  v14 = *v13;
  if (*v13 == *(_QWORD *)(v2 + 16))
  {
    v15 = *v13;
    v14 = v9;
  }
  else
  {
    *(_QWORD *)&v29 = *v13;
    v31[0] = 0;
    if (sub_22E793870(a1 + 1, &v29, v31) && v31[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v14 = *((_QWORD *)v31[0] + 1);
    if (!v14)
      return 1;
    v15 = *v10;
  }
  v16 = *(_DWORD *)(v2 + 4);
  v17 = *(_QWORD *)(v2 + 24);
  v27.n128_u64[0] = *(_QWORD *)(v15 + 40);
  v27.n128_u32[2] = v16;
  v28 = v17;
  if (v27.n128_u64[0])
  {
    sub_22EBF2014((__n128 *)v31, a1, &v27);
    v27 = *(__n128 *)v31;
    v28 = v32[0];
    v18 = v31[0];
    if (!v31[0])
      return 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = *(unsigned int *)v2;
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    if ((v19 & 0x40000) != 0)
    {
      v24 = *(_QWORD *)(v2 + 32);
      v25 = *(_QWORD *)(v2 + 40);
    }
    else
    {
      v24 = 0;
      v25 = 0;
    }
    if (v7 == v24 && v8 == v25 && v9 == *v10)
    {
      v26 = (_QWORD *)((v19 & 0x100000) != 0 ? v12 + 16 * ((v19 >> 18) & 1) : v2 + 16);
      if (v14 == *v26
        && v18 == *(void **)(v9 + 40)
        && ((v19 & 0x80000) == 0 || !*(_DWORD *)(v12 + 16 * ((v19 >> 18) & 1) + 8 * ((v19 >> 20) & 1))))
      {
        sub_22EB22288(*a1, v2, 0);
        return v2;
      }
    }
  }
  v31[0] = v32;
  v31[1] = (void *)0x800000000;
  v33 = 0;
  if ((v19 & 0x80000) == 0
    || (v20 = (_DWORD *)(v12 + 16 * ((v19 >> 18) & 1) + 8 * ((v19 >> 20) & 1)), !*v20))
  {
    v22 = 0;
LABEL_30:
    v29 = 0u;
    *(_OWORD *)v30 = 0u;
    sub_22E8ACE30((uint64_t)&v29, v7, v8);
    v2 = sub_22EB24A3C(*a1, &v29, &v27, v9, v14, v22, 0);
    if (HIDWORD(v30[1]))
      free(v30[0]);
    goto LABEL_32;
  }
  v33 = *(_QWORD *)v20;
  v21 = (uint64_t)&v20[4 * ((v19 >> 19) & 1)];
  v22 = v31;
  if ((sub_22EBF221C((uint64_t)a1, v21, v21 + 32 * v20[3]) & 1) == 0)
    goto LABEL_30;
  v2 = 1;
LABEL_32:
  if (v31[0] != v32)
    free(v31[0]);
  return v2;
}

uint64_t sub_22EBE445C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22EBF1808(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBE73E0(a1, *(unsigned int **)(a2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22E9FA204((_QWORD *)*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EBE44CC(uint64_t *a1, uint64_t a2)
{
  return sub_22EBF2584(a1, a2, 0, 0);
}

uint64_t sub_22EBE44D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[32];
  char *v61;
  uint64_t v62;
  _QWORD v63[12];

  v2 = a2;
  v63[10] = *MEMORY[0x24BDAC8D0];
  v61 = (char *)v63;
  v62 = 0x200000000;
  v4 = sub_22E487828(a2);
  v5 = sub_22EBDD628(a1, v4);
  if ((v5 & 1) != 0)
  {
    v2 = 1;
    goto LABEL_50;
  }
  v58 = v60;
  v59 = 0x400000000;
  if (!((unsigned __int16)*(_DWORD *)(v2 + 20) >> 1))
  {
    LOBYTE(v6) = 0;
    v43 = v5 & 0xFFFFFFFFFFFFFFFELL;
LABEL_42:
    v40 = *(_QWORD **)a1;
    if (*(_DWORD *)(*(_QWORD *)a1 + 11992) == -1)
    {
      if (!((sub_22E487828(v2) != v43) | v6 & 1))
        goto LABEL_48;
      v40 = *(_QWORD **)a1;
    }
    v41 = sub_22EC38374(v40, (uint64_t *)&v61, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20) & 1, v43);
    if ((v41 & 1) != 0)
      v2 = 1;
    else
      v2 = v41;
    goto LABEL_48;
  }
  v6 = 0;
  v43 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v7 = v2 + 32;
  v8 = *(_QWORD *)(v2 + 24) + 8;
  v9 = 24 * ((unsigned __int16)*(_DWORD *)(v2 + 20) >> 1);
  while (1)
  {
    v10 = v6;
    v11 = *(_DWORD *)(v8 - 8);
    if (v11 == 1)
    {
      v20 = sub_22EBDD628(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)));
      if ((v20 & 1) != 0)
        break;
      v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v22 = *(_DWORD *)(v8 + 4);
      v6 = 1;
      v51 = 1;
      v52 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v53 = v22;
      v54 = 0;
      v23 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v51, 1);
      v24 = &v61[40 * v62];
      v25 = *(_QWORD *)(v23 + 32);
      v26 = *(_OWORD *)(v23 + 16);
      *(_OWORD *)v24 = *(_OWORD *)v23;
      *((_OWORD *)v24 + 1) = v26;
      *((_QWORD *)v24 + 4) = v25;
      LODWORD(v62) = v62 + 1;
      if ((v10 & 1) == 0)
        v6 = *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)) != v43;
      v27 = v59;
      if (v59 >= (unint64_t)HIDWORD(v59))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = v59;
      }
      *((_QWORD *)v58 + v27) = v21;
      goto LABEL_33;
    }
    if (!v11)
    {
      v12 = *(_QWORD *)v8;
      if ((*(_QWORD *)v8 & 1) != 0)
      {
        v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v39 = *(_QWORD *)(v12 + 40);
        if ((v39 & 7) != 0)
          v13 = 0;
        else
          v13 = v39 & 0xFFFFFFFFFFFFFFF8;
      }
      v55 = 0;
      v56 = v13;
      v57 = *(_QWORD *)(v8 + 8);
      v6 = 1;
      v14 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v55, 1);
      v15 = &v61[40 * v62];
      v16 = *(_QWORD *)(v14 + 32);
      v17 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)v15 = *(_OWORD *)v14;
      *((_OWORD *)v15 + 1) = v17;
      *((_QWORD *)v15 + 4) = v16;
      LODWORD(v62) = v62 + 1;
      v18 = *(_QWORD *)v8;
      if (*(_QWORD *)v8 && (v18 & 1) == 0)
      {
        v44 = *(_QWORD *)v8;
        v45 = 0;
        if (sub_22E793870((uint64_t *)(a1 + 8), &v44, &v45)
          && v45 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
        {
          v18 = *(_QWORD *)(v45 + 8);
        }
        v19 = *(_QWORD *)v8;
        if ((*(_QWORD *)v8 & 1) != 0)
          v19 = 0;
        v6 = (v18 != v19) | v10;
      }
      goto LABEL_34;
    }
    v28 = sub_22EBDD628(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)));
    if ((v28 & 1) != 0)
      break;
    v29 = sub_22EBDD628(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 2)));
    if ((v29 & 1) != 0)
      break;
    v30 = v28 & 0xFFFFFFFFFFFFFFFELL;
    v31 = v29 & 0xFFFFFFFFFFFFFFFELL;
    v46 = 2;
    v32 = *(_QWORD *)(v8 + 4);
    v47 = v28 & 0xFFFFFFFFFFFFFFFELL;
    v48 = v29 & 0xFFFFFFFFFFFFFFFELL;
    v49 = v32;
    v50 = 0;
    v6 = 1;
    v33 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v46, 1);
    v34 = &v61[40 * v62];
    v35 = *(_QWORD *)(v33 + 32);
    v36 = *(_OWORD *)(v33 + 16);
    *(_OWORD *)v34 = *(_OWORD *)v33;
    *((_OWORD *)v34 + 1) = v36;
    *((_QWORD *)v34 + 4) = v35;
    LODWORD(v62) = v62 + 1;
    if ((v10 & 1) == 0)
      v6 = *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)) != v30
        || *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 2)) != v31;
    v37 = v59;
    if (v59 >= (unint64_t)HIDWORD(v59))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v37 = v59;
    }
    *((_QWORD *)v58 + v37) = v30;
    v38 = v59 + 1;
    LODWORD(v59) = v38;
    if (v38 >= HIDWORD(v59))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v38 = v59;
    }
    *((_QWORD *)v58 + v38) = v31;
LABEL_33:
    LODWORD(v59) = v59 + 1;
LABEL_34:
    v8 += 24;
    v9 -= 24;
    if (!v9)
      goto LABEL_42;
  }
  v2 = 1;
LABEL_48:
  if (v58 != v60)
    free(v58);
LABEL_50:
  if (v61 != (char *)v63)
    free(v61);
  return v2;
}

uint64_t sub_22EBE493C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v14[3];
  int v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v17 = 0;
  v16 = 0;
  v15 = 3;
  *(_QWORD *)v14 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v17, v14, (__int16 *)(v4 + 1693), &v16, &v15);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 32));
  if ((v11 & 1) != 0)
  {
    a2 = 1;
  }
  else
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 32) != v12)
    {
      sub_22EB48E64(v4);
      return sub_22EBC8E1C(*a1, *(_DWORD *)(a2 + 16) & 0x7FFFFFFF, *(_DWORD *)(a2 + 20), v12, *(_DWORD *)(a2 + 24));
    }
  }
  sub_22EB48E64(v4);
  return a2;
}

uint64_t sub_22EBE4AC4(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _BOOL8 v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  void *v20[2];

  v2 = a2;
  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t)*a1;
  v6 = *(_QWORD *)(v2 + 16);
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || v6 != v7)
  {
    sub_22F0D60E4(v6);
    v10 = sub_22F141A3C(v9, 0, *(_QWORD **)(v5 + 112), *(_DWORD **)(v5 + 72));
    v11 = *(_QWORD *)(v2 + 24);
    v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                     + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16) == 39;
    v13 = *(_DWORD *)(v2 + 32);
    v14 = v10;
    v19 = 0u;
    *(_OWORD *)v20 = 0u;
    v16 = v11;
    v17 = v13;
    sub_22EFC6D6C((uint64_t)&v18, v11);
    v2 = sub_22EC225CC(*a1, v7, *(_QWORD *)(v7 + 8), v14, v12, (uint64_t)&v19, 0, 0, (uint64_t)&v16, 0, 0, 0);
    if (HIDWORD(v20[1]))
      free(v20[0]);
  }
  return v2;
}

uint64_t sub_22EBE4BD8(uint64_t a1, const void **a2)
{
  const void **v3;

  v3 = sub_22EFFB894(a2);
  return sub_22EBDD628(a1, v3);
}

uint64_t sub_22EBE4C04(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;

  v2 = a2;
  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    v6 = sub_22EBDD628(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = 0;
  }
  v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 16) == (v4 & 0xFFFFFFFFFFFFFFFELL) && *(_QWORD *)(v2 + 24) == v8)
    return v2;
  return sub_22EB53C74(*a1, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 36), *(_QWORD *)(v2 + 8), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v8);
}

uint64_t sub_22EBE4C98(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v23;
  void *v24[4];
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v6 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v25 = v27;
  v26 = 0x400000000;
  v23 = 0;
  v7 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v7)
  {
    v8 = (v7 + 1);
    v9 = 8 * v7;
    v10 = 1;
    while (1)
    {
      v11 = *(_QWORD *)(v4 + 8);
      v12 = *(uint64_t **)(v4 + 8 * v8);
      if (v12)
      {
        v13 = sub_22EBE9AF0((_QWORD **)a1, v12);
        if (!v13)
          break;
        v14 = v13;
        v15 = v23;
        if (v23 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v15 = v23;
        }
        v24[v15] = v14;
      }
      else
      {
        v16 = v23;
        if (v23 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v16 = v23;
        }
        v24[v16] = 0;
      }
      ++v23;
      v17 = sub_22EBDD628(a1, v11);
      if ((v17 & 1) != 0)
        break;
      v18 = v26;
      if (v26 >= (unint64_t)HIDWORD(v26))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v26;
      }
      *((_QWORD *)v25 + v18) = v17 & 0xFFFFFFFFFFFFFFFELL;
      v19 = (v26 + 1);
      LODWORD(v26) = v26 + 1;
      v4 += 8;
      v9 -= 8;
      if (!v9)
      {
        v20 = v23;
        v21 = (uint64_t *)v25;
        goto LABEL_20;
      }
    }
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = v27;
LABEL_20:
    v10 = sub_22EB204CC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), (_DWORD *)(v6 & 0xFFFFFFFFFFFFFFFELL), v24, v20, v5, v21, v19);
  }
  if (v25 != v27)
    free(v25);
  return v10;
}

uint64_t sub_22EBE4EC0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)(a2 + 28);
  if (!v5)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v5 = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  if (!v7)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v9 = 1;
  if (v8)
  {
    if (*(_BYTE *)(v8 + 16) == 39)
      v9 = (*(_DWORD *)(v8 + 40) & 6) != 2;
  }
  return sub_22EB54020(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(a2 + 24) != 0, v5, v7, v9);
}

uint64_t sub_22EBE4F88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v2 = a2;
  v4 = sub_22EBEE6F4(a1, *(_QWORD *)(a2 + 8));
  if (v4 < 0x10)
    return 1;
  v5 = v4;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v4 != *(_QWORD *)(v2 + 8))
  {
    v2 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 16, 3);
    sub_22E5018F0(v2, v5);
  }
  return v2;
}

uint64_t sub_22EBE500C(uint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  if ((*(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) != 0)
    v3 = *(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
  else
    v3 = a2;
  v16 = 0;
  v4 = *a1;
  v5 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
  if (v5 > 3 || v5 == 2)
  {
    v7 = 1;
  }
  else
  {
    v7 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v4 + 72) + 1) & 2) != 0)
    {
      v20 = 0;
      v18 = 3;
      v19 = 1;
      v17 = *(unsigned int *)(v4 + 1704);
      sub_22EB4DDB8(v4 + 3688, &v19, (int *)&v17, (__int16 *)(v4 + 1693), (uint64_t *)&v20, &v18);
      v8 = *(unsigned int *)(v4 + 3696);
      v9 = v8 - 2;
      v10 = *(_QWORD *)(v4 + 3688);
      v11 = *(_DWORD *)(v10 + 576 * (v8 - 2));
      if (v11 == 5)
      {
        *(_BYTE *)(v10 + 576 * v8 - 4) = *(_BYTE *)(v10 + 576 * v9 + 572);
        v12 = 1;
      }
      else if (v11 == 2)
      {
        *(_BYTE *)(v10 + 576 * v8 - 4) = 1;
        v12 = *(_BYTE *)(v10 + 576 * v9 + 573) != 0;
      }
      else
      {
        v12 = 0;
        *(_BYTE *)(v10 + 576 * v8 - 4) = 0;
      }
      v13 = v10 + 576 * v8;
      *(_BYTE *)(v13 - 3) = v12;
      *(_WORD *)(v4 + 1693) = 0;
      if (*(_DWORD *)(v4 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v13 - 560));
        sub_22EAEAE08(v4 + 1840, (uint64_t *)(v13 - 496));
      }
      v7 = 0;
    }
  }
  v20 = v22;
  v21 = 0x400000000;
  if ((sub_22EBF1574(a1, *(unsigned __int8 ***)(v3 + 16), (*(_QWORD *)(v3 + 24) - *(_QWORD *)(v3 + 16)) >> 3, 0, (uint64_t)&v20, &v16) & 1) != 0)v14 = 1;
  else
    v14 = sub_22EB353A0(*a1, *(_DWORD *)(v3 + 40), (uint64_t *)v20, v21, *(_DWORD *)(v3 + 44));
  if (v20 != v22)
    free(v20);
  if ((v7 & 1) == 0)
    sub_22EB48E64(v4);
  return v14;
}

uint64_t sub_22EBE5224(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    v5 = sub_22EBEE748((uint64_t *)a1, v4, *(void **)(a2 + 48), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = *(_QWORD *)(a2 + 24);
  v13 = v9;
  v14 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v13, &v14)
    && v14 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v9 = *(_QWORD *)(v14 + 8);
  }
  if (v9)
  {
    v10 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
    if ((v10 & 1) == 0)
    {
      v12 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 56, 3);
      return sub_22F2F44CC(v12, v10 & 0xFFFFFFFFFFFFFFFELL, v9, *(_BYTE *)(a2 + 36), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16872), 1, v7, v8, *(_DWORD *)(a2 + 32));
    }
  }
  return 1;
}

uint64_t sub_22EBE5330(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  unint64_t v10;

  v2 = a2;
  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBDD628(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a1;
  v7 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(unsigned __int8 **)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    v8 = *(_DWORD *)(v2 + 32);
    v10 = v5 & 0xFFFFFFFFFFFFFFFELL;
    return sub_22EB296C0(v6, 0, v7, 0, (uint64_t *)&v10, 1, v8);
  }
  return v2;
}

uint64_t sub_22EBE53E4(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = (v4 - 1);
    if ((_DWORD)v5)
    {
      v6 = (const void **)(a2 + 24);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        sub_22E3BA850(a1 + 32, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
  v9 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  v10 = *(_DWORD *)(a2 + 4);
  if (v10 < 0)
  {
    v11 = (v10 & 0x7FFFFFFFu) - 1;
    if ((_DWORD)v11)
    {
      v12 = (void **)(a2 + 24);
      v13 = 8 * v11;
      do
      {
        v14 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v12);
        v15 = *(_QWORD *)(a1 + 40);
        if (v15 == *(_QWORD *)(a1 + 32))
          v16 = 52;
        else
          v16 = 48;
        if (v14 != (void **)(v15 + 8 * *(unsigned int *)(a1 + v16)))
        {
          *v14 = (void *)-2;
          ++*(_DWORD *)(a1 + 56);
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
  }
  return v9;
}

uint64_t sub_22EBE54D0(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v3;

  v2 = a2;
  v3 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 4) != 0)
    v3 = *(_QWORD *)(v3 + 40);
  return sub_22EBDD628(a1, v3);
}

uint64_t sub_22EBE54E4(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBDD628(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EBDD628(a1, *(_QWORD *)(v2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1
    || *(_QWORD *)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 32) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2AC58(*a1, v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 4));
  }
  return v2;
}

uint64_t sub_22EBE55A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  void *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned __int32 v28;
  unsigned int v29;
  unint64_t v30;
  void **v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  __int128 v46;
  void *v47[2];
  void *v48[2];
  _BYTE v49[129];
  uint64_t v50;
  void *v51[2];
  _OWORD v52[4];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  __n128 v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  __int16 v61;
  char v62;
  uint64_t v63;

  v2 = a2;
  v63 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x80000) == 0 || (v6 = *(_QWORD *)(v2 + 48)) == 0)
  {
    v9 = 0;
    v10 = 0;
    if ((v5 & 0x100000) != 0)
      goto LABEL_6;
LABEL_8:
    v11 = 0;
    goto LABEL_9;
  }
  v7 = sub_22EBEE748(a1, v6, *(void **)(v2 + 56), 0, 0);
  if (!v7)
    return 1;
  v9 = v7;
  v10 = v8;
  v5 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x100000) == 0)
    goto LABEL_8;
LABEL_6:
  v11 = *(_DWORD *)(v2 + 24 * ((v5 >> 19) & 1) + 56);
LABEL_9:
  v12 = *(_QWORD **)(v2 + 24);
  v51[0] = v12;
  v48[0] = 0;
  if (sub_22E793870(a1 + 1, v51, v48) && v48[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
    v12 = (_QWORD *)*((_QWORD *)v48[0] + 1);
  if (!v12)
    return 1;
  if ((*(_BYTE *)(v2 + 2) & 8) != 0)
  {
    v14 = *(_QWORD *)(v2 + 64);
    v13 = *(void **)(v2 + 24);
  }
  else
  {
    v13 = *(void **)(v2 + 24);
    v14 = (unint64_t)v13;
  }
  v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
  v16 = (uint64_t)v12;
  if (v13 != v15)
  {
    v16 = (uint64_t)v15;
    v51[0] = v15;
    v48[0] = 0;
    if (sub_22E793870(a1 + 1, v51, v48) && v48[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v16 = *((_QWORD *)v48[0] + 1);
    if (!v16)
      return 1;
  }
  v17 = *a1;
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    v18 = *(unsigned int *)v2;
    if (*(_QWORD *)(v2 + 16) == (v4 & 0xFFFFFFFFFFFFFFFELL))
    {
      if ((v18 & 0x80000) != 0)
      {
        v40 = *(_QWORD *)(v2 + 48);
        v41 = *(_QWORD *)(v2 + 56);
      }
      else
      {
        v40 = 0;
        v41 = 0;
      }
      if (v9 == v40 && v10 == v41 && v12 == *(_QWORD **)(v2 + 24))
      {
        v42 = (v18 & 0x80000) != 0 ? *(_QWORD *)(v2 + 64) : (unint64_t)v12;
        if (v16 == (v42 & 0xFFFFFFFFFFFFFFFCLL)
          && ((v18 & 0x100000) == 0 || !*(_DWORD *)(v2 + 24 * ((v18 >> 19) & 1) + 48)))
        {
          sub_22EB52238(*a1, v2);
          return v2;
        }
      }
    }
  }
  else
  {
    LODWORD(v18) = *(_DWORD *)v2;
  }
  v48[0] = v49;
  v48[1] = (void *)0x800000000;
  v50 = 0;
  if ((v18 & 0x100000) != 0)
  {
    v20 = v2 + 24 * ((v18 >> 19) & 1);
    v23 = *(_DWORD *)(v20 + 48);
    v21 = v20 + 48;
    v22 = v23;
    if (v23)
    {
      LODWORD(v50) = v22;
      HIDWORD(v50) = *(_DWORD *)(v21 + 4);
      v24 = v21 + 16 * ((v18 >> 20) & 1);
      if ((sub_22EBF221C((uint64_t)a1, v24, v24 + 32 * *(unsigned int *)(v21 + 12)) & 1) != 0)
      {
LABEL_34:
        v2 = 1;
        goto LABEL_62;
      }
      v17 = *a1;
    }
  }
  sub_22F0D4E74(*(_QWORD *)(v2 + 16));
  v26 = sub_22F141A3C(HIDWORD(v25), 0, *(_QWORD **)(v17 + 112), *(_DWORD **)(v17 + 72));
  v27 = *(_QWORD *)(v2 + 32);
  v28 = *(_DWORD *)(v2 + 40);
  v44.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 40);
  v44.n128_u32[2] = v28;
  v45 = v27;
  if (v44.n128_u64[0])
  {
    sub_22EBF2014((__n128 *)v51, a1, &v44);
    v44 = *(__n128 *)v51;
    v45 = *(_QWORD *)&v52[0];
    if (!v51[0])
      goto LABEL_34;
  }
  v29 = v11;
  v30 = *(unsigned int *)v2;
  if ((v30 & 0x100000) != 0)
  {
    if (*(_DWORD *)(v2 + 24 * ((v30 >> 19) & 1) + 48))
      v31 = v48;
    else
      v31 = 0;
  }
  else
  {
    v31 = 0;
  }
  v32 = sub_22EC2624C(*a1, (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), (v30 >> 18) & 1);
  if (v12[5])
  {
    v46 = 0u;
    *(_OWORD *)v47 = 0u;
    sub_22E8ACE30((uint64_t)&v46, v9, v10);
    v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
    v34 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if ((v30 & 0x40000) != 0
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
    {
      v2 = 1;
    }
    else
    {
      v35 = (_QWORD *)*a1;
      v51[0] = 0;
      v51[1] = (char *)v52 + 8;
      *(_QWORD *)&v52[0] = 0x800000000;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v56 = v35;
      v57 = v44;
      v58 = v45;
      v59 = xmmword_22F463A40;
      v60 = 16842752;
      v61 = 0;
      v62 = 0;
      sub_22EC56024((uint64_t)v51);
      v36 = *(unsigned int *)(v16 + 28);
      v37 = v52[0];
      if (LODWORD(v52[0]) >= DWORD1(v52[0]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v37 = v52[0];
      }
      *((_QWORD *)v51[1] + v37) = (v36 >> 13) & 3 | v16;
      ++LODWORD(v52[0]);
      LODWORD(v51[0]) = 2;
      sub_22EC561E4((uint64_t)v51);
      v2 = sub_22EC24AB8(*a1, v33, v34, v26, (v30 >> 18) & 1, (uint64_t *)&v46, v29, 0, (uint64_t)v51, (uint64_t)v31, 0, 0, 0);
      if (HIBYTE(v60))
      {
        if (LODWORD(v51[0]) == 5)
        {
          sub_22EC64D18(v56, (uint64_t)v51);
        }
        else if (v54 && (*(_DWORD *)(v56[9] + 52) & 0x400000) != 0)
        {
          sub_22E90B5FC((unint64_t)v56, (uint64_t)v51);
        }
      }
      if (v53)
      {
        v43 = sub_22EC6CBD0(v53);
        MEMORY[0x2348A0E9C](v43, 0x10E0C409F09D3C3);
      }
      if (v51[1] != (char *)v52 + 8)
        free(v51[1]);
    }
    if (!HIDWORD(v47[1]))
      goto LABEL_62;
    v39 = v47[0];
  }
  else
  {
    v38 = (unint64_t)sub_22EB24398(*a1, v32 & 0xFFFFFFFFFFFFFFFELL, v9, v16, (uint64_t)v12);
    if ((v38 & 1) != 0)
    {
      v2 = 1;
      goto LABEL_62;
    }
    *(_OWORD *)v51 = 0u;
    v52[0] = 0u;
    v2 = sub_22EC25974(*a1, v38 & 0xFFFFFFFFFFFFFFFELL, (v30 >> 18) & 1, v26, v51, v12, ((unint64_t)*(unsigned int *)(v16 + 28) >> 13) & 3 | v16, &v44);
    if (!HIDWORD(v52[0]))
      goto LABEL_62;
    v39 = *(void **)&v52[0];
  }
  free(v39);
LABEL_62:
  if (v48[0] != v49)
    free(v48[0]);
  return v2;
}

uint64_t sub_22EBE5B6C(uint64_t *a1, uint64_t a2)
{
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  _BYTE v23[32];
  void *v24[2];
  _BYTE v25[32];
  void *v26;
  uint64_t v27;
  _QWORD v28[6];

  v28[4] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 32) == 1)
    return sub_22EBDD628(a1, **(_QWORD **)(a2 + 40));
  v5 = sub_22EBE9AF0((_QWORD **)a1, *(uint64_t **)(a2 + 16));
  if (v5)
  {
    v6 = v5;
    v20 = 0;
    v24[0] = v25;
    v24[1] = (void *)0x400000000;
    v7 = 1;
    if ((sub_22EBF1574(a1, *(unsigned __int8 ***)(a2 + 40), *(_DWORD *)(a2 + 32), 1, (uint64_t)v24, &v20) & 1) != 0)
      goto LABEL_29;
    if (*(_DWORD *)(*a1 + 11992) == -1 && v6 == *(unint64_t **)(a2 + 16) && !v20)
    {
      v7 = a2;
LABEL_29:
      if (v24[0] != v25)
        free(v24[0]);
      return v7;
    }
    v21 = v23;
    v22 = 0x400000000;
    v8 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v8)
    {
      v9 = 0;
      LODWORD(v10) = 0;
      v11 = 8 * v8;
      do
      {
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + v9) + 8);
        if (v10 >= HIDWORD(v22))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          LODWORD(v10) = v22;
        }
        *((_QWORD *)v21 + v10) = v12;
        v10 = (v22 + 1);
        LODWORD(v22) = v22 + 1;
        v9 += 8;
      }
      while (v11 != v9);
      v13 = (uint64_t *)v21;
      v14 = (unsigned __int8 **)v24[0];
      v15 = *(_QWORD *)(a2 + 24);
      v26 = v28;
      v27 = 0x400000000;
      if ((_DWORD)v10)
      {
        v19 = v15;
        v7 = 1;
        while (1)
        {
          v16 = *v13++;
          v17 = sub_22ECFABE8((uint64_t *)*a1, *v14, v16, 1, 0);
          if ((v17 & 1) != 0)
            goto LABEL_25;
          v18 = v27;
          if (v27 >= (unint64_t)HIDWORD(v27))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v18 = v27;
          }
          *((_QWORD *)v26 + v18) = v17 & 0xFFFFFFFFFFFFFFFELL;
          LODWORD(v27) = v27 + 1;
          ++v14;
          if (!--v10)
          {
            v15 = v19;
            break;
          }
        }
      }
    }
    else
    {
      v15 = *(_QWORD *)(a2 + 24);
      v26 = v28;
      v27 = 0x400000000;
    }
    v7 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 48, 3);
    sub_22F0614DC(v7, *(_QWORD *)(*a1 + 88), v6, (uint64_t *)v26, v27, v15);
LABEL_25:
    if (v26 != v28)
      free(v26);
    if (v21 != v23)
      free(v21);
    goto LABEL_29;
  }
  return 1;
}

uint64_t sub_22EBE5E64(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  BOOL v15;
  unsigned int v16;

  v2 = a2;
  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    v6 = sub_22EBDD628(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v2 + 32);
  if (v7)
  {
    v8 = sub_22EBDD628(a1, v7);
    if ((v8 & 1) != 0)
      return 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_QWORD *)(v2 + 40);
  if (v9)
  {
    v10 = sub_22EBDD628(a1, v9);
    if ((v10 & 1) != 0)
      return 1;
  }
  else
  {
    v10 = 0;
  }
  v12 = *a1;
  v13 = *(_QWORD *)(v2 + 16);
  v14 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v15 = *(_DWORD *)(v12 + 11992) == -1 && v13 == (_QWORD)v14;
  if (v15 && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL) && *(_QWORD *)(v2 + 32) == (v8 & 0xFFFFFFFFFFFFFFFELL))
    return v2;
  sub_22F0D60E4(v13);
  return sub_22EB29E14((_QWORD *)v12, v14, v16, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 52), v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 56));
}

uint64_t sub_22EBE5F84(_QWORD **a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a2 + 32);
  v5 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 24)));
  if ((v5 & 1) == 0)
  {
    v14 = 0;
    v6 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v6)
    {
      LOBYTE(v7) = 0;
      v8 = &v4[v6];
      v9 = v4;
      do
      {
        while (1)
        {
          v10 = sub_22EBDD628(a1, *v9);
          if ((v10 & 1) == 0)
            break;
          ++v9;
          v7 = 1;
          if (v9 == v8)
            return v7;
        }
        v11 = v14;
        if (v14 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v11 = v14;
        }
        v15[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
        v12 = ++v14;
        ++v9;
      }
      while (v9 != v8);
      if ((v7 & 1) != 0)
        return 1;
      LODWORD(v6) = *(_DWORD *)(a2 + 24);
    }
    else
    {
      v12 = 0;
    }
    return sub_22EB2BE20(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v15, v12, &v4[(v6 + 1)], v6);
  }
  return 1;
}

uint64_t sub_22EBE6110(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  int v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60[4];
  void *v61;
  uint64_t v62;
  _QWORD v63[34];

  v2 = a2;
  v63[32] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a2 + 28);
  memset(v60, 0, sizeof(v60));
  v61 = v63;
  v62 = 0x400000000;
  sub_22E8BB974((uint64_t)&v61, v4, v60);
  v59 = a1;
  v5 = *(_QWORD **)a1;
  v6 = *(_DWORD *)(*(_QWORD *)a1 + 11992);
  v7 = v6 == -1;
  v8 = v6 != -1;
  if ((_DWORD)v4)
  {
    v52 = v8;
    v51 = v4;
    v9 = 0;
    v10 = 0;
    v11 = v2 + 32;
    v53 = v2;
    v54 = v4 << 6;
    v12 = 2;
    v58 = v2 + 32;
    while (1)
    {
      v13 = *(_QWORD *)v11;
      v14 = *(_QWORD *)(*(_QWORD *)v11 + 40);
      v15 = (v14 & 7) != 0 ? 0 : v14 & 0xFFFFFFFFFFFFFFF8;
      v16 = (char *)v61 + v9;
      *(_QWORD *)v16 = v15;
      *((_DWORD *)v16 + 2) = *(_DWORD *)(v13 + 24);
      v17 = *(_DWORD *)(v13 + 24);
      v18 = *(_QWORD *)(v13 + 56);
      if ((v18 & 4) == 0)
        break;
      v41 = v18 & 0xFFFFFFFFFFFFFFF8;
      if (*(_DWORD *)(v41 + 16))
        v42 = ***(_DWORD ***)(v41 + 24);
      else
        v42 = *(_DWORD *)(v13 + 64);
      if (v17 != v42)
      {
        v19 = *(uint64_t **)(v41 + 32);
LABEL_9:
        v20 = sub_22EBE9AF0((_QWORD **)v59, v19);
        v21 = sub_22EBEE6F4(v59, *(_QWORD *)(v13 + 48));
        v22 = sub_22EE7D030(*(_QWORD *)v59, v21, (uint64_t)v20);
        *(_QWORD *)((char *)v61 + v9 + 16) = v22;
      }
LABEL_10:
      v23 = v58 + 8 * *(unsigned int *)(v2 + 28);
      v24 = v12 - 2;
      v56 = *(_QWORD *)(v23 + 8 * v24);
      v57 = v12 - 1;
      v25 = *(_QWORD *)(v23 + 8 * v57);
      v26 = *(_QWORD *)(v23 + 8 * v12);
      v27 = sub_22EBDD628(v59, v56);
      v55 = v25;
      v28 = sub_22EBDD628(v59, v25);
      v29 = v26;
      v30 = sub_22EBDD628(v59, v26);
      if ((v10 & 1) != 0)
        goto LABEL_19;
      v31 = *(_QWORD *)(v13 + 56);
      v32 = v31 & 0xFFFFFFFFFFFFFFF8;
      v33 = v31 & 0xFFFFFFFFFFFFFFF8;
      if ((v31 & 4) != 0)
        v33 = *(_QWORD *)(v32 + 32);
      if (v33)
      {
        v10 = 1;
        if (*(_QWORD *)((char *)v61 + v9 + 16) < 0x10uLL || (v27 & 1) != 0)
          goto LABEL_20;
      }
      else if ((v27 & 1) != 0)
      {
        goto LABEL_19;
      }
      if (((v28 | v30) & 1) != 0)
      {
LABEL_19:
        v10 = 1;
LABEL_20:
        v2 = v53;
        goto LABEL_21;
      }
      v34 = (char *)v61;
      v35 = (char *)v61 + v9;
      *((_QWORD *)v35 + 3) = v27 & 0xFFFFFFFFFFFFFFFELL;
      *((_QWORD *)v35 + 4) = v28 & 0xFFFFFFFFFFFFFFFELL;
      *((_QWORD *)v35 + 5) = v30 & 0xFFFFFFFFFFFFFFFELL;
      v2 = v53;
      *((_DWORD *)v35 + 12) = *(_DWORD *)(v58
                                        + 8 * *(unsigned int *)(v53 + 28)
                                        + 8 * (3 * *(_DWORD *)(v53 + 28))
                                        + 4 * v24);
      *((_DWORD *)v35 + 13) = *(_DWORD *)(v58
                                        + 8 * *(unsigned int *)(v53 + 28)
                                        + 8 * (3 * *(_DWORD *)(v53 + 28))
                                        + 4 * v57);
      *((_DWORD *)v35 + 14) = *(_DWORD *)(v58
                                        + 8 * *(unsigned int *)(v53 + 28)
                                        + 8 * (3 * *(_DWORD *)(v53 + 28))
                                        + 4 * v12);
      if ((v52 & 1) != 0)
      {
        v10 = 0;
        v36 = 1;
LABEL_39:
        v52 = v36;
        goto LABEL_21;
      }
      if ((v31 & 4) != 0)
        v32 = *(_QWORD *)(v32 + 32);
      if (v32)
      {
        v37 = *(_QWORD *)&v34[v9 + 16];
        if (v37 >= 0x10)
          v38 = *(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0);
        else
          v38 = 0;
        v39 = *(_QWORD *)(v13 + 48);
        if (v39 >= 0x10)
          v40 = *(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0);
        else
          v40 = 0;
        v10 = 0;
        v52 = 1;
        if (v38 != v40)
          goto LABEL_21;
      }
      else
      {
        v10 = 0;
        v52 = 1;
      }
      if (v56 == (v27 & 0xFFFFFFFFFFFFFFFELL) && v55 == (v28 & 0xFFFFFFFFFFFFFFFELL))
      {
        v10 = 0;
        v36 = v29 != (v30 & 0xFFFFFFFFFFFFFFFELL);
        goto LABEL_39;
      }
LABEL_21:
      v11 += 8;
      v9 += 64;
      v12 += 3;
      if (v54 == v9)
      {
        if ((v10 & 1) != 0)
        {
          v43 = 1;
          goto LABEL_58;
        }
        v4 = v51;
        if ((v52 & 1) != 0)
        {
          v5 = *(_QWORD **)v59;
          goto LABEL_52;
        }
LABEL_57:
        v43 = v2;
        goto LABEL_58;
      }
    }
    if (v17 == *(_DWORD *)(v13 + 64))
      goto LABEL_10;
    v19 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_9;
  }
  if (v7)
    goto LABEL_57;
LABEL_52:
  v44 = sub_22EB2C3A8(v5, 0, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), *(_DWORD *)(v2 + 24), (uint64_t)v61, v62);
  v43 = v44;
  if (v44 >= 2 && (_DWORD)v4)
  {
    v45 = (uint64_t *)(v2 + 32);
    v46 = (uint64_t *)((v44 & 0xFFFFFFFFFFFFFFFELL) + 32);
    do
    {
      v48 = *v45++;
      v47 = v48;
      v49 = *v46++;
      *(_QWORD *)&v60[0] = v47;
      sub_22F25E108((uint64_t *)(v59 + 8), v60)[1] = v49;
      --v4;
    }
    while (v4);
  }
LABEL_58:
  if (v61 != v63)
    free(v61);
  return v43;
}

uint64_t sub_22EBE652C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = a2;
  v4 = (uint64_t *)sub_22EBE9AF0((_QWORD **)a1, *(uint64_t **)(a2 + 16));
  if (!v4)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || v4 != *(uint64_t **)(v2 + 16))
    return sub_22EC2A5E0(*a1, *(_DWORD *)(v2 + 24), v4, *(_DWORD *)(v2 + 28));
  return v2;
}

uint64_t sub_22EBE6590(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  void *v15[2];

  v2 = a2;
  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t)*a1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 16) != v6)
  {
    v8 = *(_DWORD *)(v2 + 24);
    v7 = *(_DWORD *)(v2 + 28);
    v9 = *(unsigned __int8 *)(v2 + 32);
    v14 = 0u;
    *(_OWORD *)v15 = 0u;
    v11 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(v5 + 88) + 15192), "isa", 3uLL);
    v12 = v8;
    sub_22EFC6D6C((uint64_t)&v13, v11);
    v2 = sub_22EC225CC(*a1, v6, *(_QWORD *)(v6 + 8), v7, v9, (uint64_t)&v14, 0, 0, (uint64_t)&v11, 0, 0, 0);
    if (HIDWORD(v15[1]))
      free(v15[0]);
  }
  return v2;
}

uint64_t sub_22EBE6680(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  unint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];

  v2 = a2;
  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *a1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(v5 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v6)
  {
    v7 = *(_QWORD *)(v2 + 16);
    v8 = *(_DWORD *)(v2 + 32);
    v9 = *(_BYTE *)(v2 + 40);
    v15 = 0u;
    *(_OWORD *)v16 = 0u;
    v12 = *(_QWORD *)(v7 + 40);
    v13 = v8;
    sub_22EFC6D6C((uint64_t)&v14, v12);
    v10 = sub_22EC225CC((_QWORD *)v5, v6, *(_QWORD *)(v6 + 8), v8, v9 & 1, (uint64_t)&v15, 0, 0, (uint64_t)&v12, 0, 0, 0);
    v2 = v10;
    if ((v9 & 2) != 0 && v10 >= 2)
      *(_BYTE *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 40) |= 2u;
    if (HIDWORD(v16[1]))
      free(v16[0]);
  }
  return v2;
}

uint64_t sub_22EBE677C(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  unint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  char v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[64];
  void *v42;
  uint64_t v43;
  _QWORD v44[10];

  v44[8] = *MEMORY[0x24BDAC8D0];
  v38 = 0;
  v42 = v44;
  v43 = 0x800000000;
  v4 = *(unsigned __int16 *)(a2 + 24);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(unsigned __int16 *)(a2 + 24);
  }
  if ((sub_22EBF1574(a1, (unsigned __int8 **)(a2 + 48), v4, 0, (uint64_t)&v42, &v38) & 1) != 0)
    goto LABEL_27;
  v5 = *(_DWORD *)(a2 + 24);
  if (BYTE2(v5) - 2 >= 2)
  {
    if (BYTE2(v5))
    {
      if ((v5 & 0xFF0000) == 0x10000)
        v10 = *(_QWORD *)(a2 + 40);
      else
        v10 = 0;
      v11 = sub_22EBDD628(a1, v10);
      if ((v11 & 1) != 0)
        goto LABEL_27;
      v12 = *a1;
      v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_DWORD *)(*a1 + 11992) != -1
        || (*(unsigned __int8 *)(a2 + 26) << 16 != 0x10000 ? (v14 = 0) : (v14 = *(_QWORD *)(a2 + 40)),
            v14 != v13 || v38))
      {
        v39 = v41;
        v40 = 0x1000000000;
        sub_22F3C78D4(a2, (uint64_t)&v39);
        v23 = (uint64_t *)(a2 + 16);
        if ((*(_BYTE *)(a2 + 27) & 1) != 0)
        {
          v24 = *v23;
          v23 = (uint64_t *)(*v23 + 40);
        }
        else
        {
          v24 = 0;
        }
        v25 = sub_22EC2DA20(*a1, v13, *(_QWORD *)(v13 + 8), 0, *v23, v24, *(_DWORD *)(a2 + 32), v22, (int *)v39, v40, *(unsigned int *)(a2 + 36), (uint64_t)v42, v43, 0);
LABEL_52:
        v20 = v25;
        v37 = v39;
        if (v39 == v41)
          goto LABEL_28;
        goto LABEL_53;
      }
    }
    else
    {
      if ((v5 & 0xFF0000) != 0)
        v9 = 0;
      else
        v9 = *(uint64_t **)(a2 + 40);
      v15 = sub_22EBE9AF0((_QWORD **)a1, v9);
      if (!v15)
        goto LABEL_27;
      v16 = (uint64_t *)v15;
      v12 = *a1;
      if (*(_DWORD *)(*a1 + 11992) != -1 || *(_BYTE *)(a2 + 26) || v16 != *(uint64_t **)(a2 + 40) || v38)
      {
        v39 = v41;
        v40 = 0x1000000000;
        sub_22F3C78D4(a2, (uint64_t)&v39);
        v18 = (uint64_t *)(a2 + 16);
        if ((*(_BYTE *)(a2 + 27) & 1) != 0)
        {
          v19 = *v18;
          v18 = (uint64_t *)(*v18 + 40);
        }
        else
        {
          v19 = 0;
        }
        v25 = sub_22EC2F730((_QWORD *)*a1, v16, *v16, 0, *v18, v19, *(_DWORD *)(a2 + 32), v17, (int *)v39, v40, *(unsigned int *)(a2 + 36), (unsigned __int8 **)v42, v43, 0, 0);
        goto LABEL_52;
      }
    }
    v20 = sub_22EBCC6C0(v12, a2);
    goto LABEL_28;
  }
  if ((v5 & 0x1000000) == 0 || (v6 = (unint64_t *)(a2 + 16), !*(_QWORD *)(a2 + 16)))
  {
LABEL_27:
    v20 = 1;
    goto LABEL_28;
  }
  v39 = v41;
  v40 = 0x1000000000;
  sub_22F3C78D4(a2, (uint64_t)&v39);
  v7 = *(_DWORD *)(a2 + 24);
  if ((v7 & 0xFE0000) == 0x20000)
    v8 = *(unsigned int *)(a2 + 28);
  else
    v8 = 0;
  v26 = (uint64_t *)(a2 + 16);
  if ((v7 & 0x1000000) != 0)
    v26 = (uint64_t *)(*v6 + 40);
  v27 = *v26;
  v28 = (int *)v39;
  v29 = v40;
  v30 = sub_22F3C7A10(a2);
  if ((v7 & 0x1000000) != 0)
    v32 = *v6;
  else
    v32 = 0;
  v33 = *(_DWORD *)(a2 + 32);
  v34 = *(unsigned int *)(a2 + 36);
  v35 = (_QWORD *)*a1;
  if ((*(_BYTE *)(v32 + 58) & 2) != 0)
    v36 = sub_22EC2DA20((uint64_t)v35, 0, v30, v8, v27, v32, v33, v31, v28, v29, v34, (uint64_t)v42, v43, 0);
  else
    v36 = sub_22EC2F730(v35, 0, v30, v8, v27, v32, v33, v31, v28, v29, v34, (unsigned __int8 **)v42, v43, 0, 0);
  v20 = v36;
  v37 = v39;
  if (v39 != v41)
LABEL_53:
    free(v37);
LABEL_28:
  if (v42 != v44)
    free(v42);
  return v20;
}

uint64_t sub_22EBE6B4C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v12[8] = *MEMORY[0x24BDAC8D0];
  v10 = v12;
  v11 = 0x800000000;
  v9 = 0;
  if ((sub_22EBF1574(a1, (unsigned __int8 **)(a2 + 40), *(_DWORD *)(a2 + 16), 0, (uint64_t)&v10, &v9) & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v5 = (_QWORD *)*a1;
    if (*(_DWORD *)(*a1 + 11992) == -1 && v9 == 0)
      v7 = sub_22EBCC6C0((uint64_t)v5, a2);
    else
      v7 = sub_22EC28BF4(v5, *(_QWORD *)(a2 + 20), (uint64_t *)v10, v11);
    v4 = v7;
  }
  if (v10 != v12)
    free(v10);
  return v4;
}

uint64_t sub_22EBE6C34(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;

  v2 = a2;
  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (_BYTE *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_BYTE **)(v2 + 16) != v5)
    return sub_22EC27DFC(*a1, *(_QWORD *)(v2 + 32), v5);
  return v2;
}

uint64_t sub_22EBE6C9C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v40;
  _QWORD v41[2];
  int v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  int v50;
  char v51;
  char v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[34];

  v2 = a2;
  v55[32] = *MEMORY[0x24BDAC8D0];
  v53 = v55;
  v54 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 16);
  v5 = 0;
  v6 = v4 & 0x7FFFFFFF;
  if ((v4 & 0x7FFFFFFF) != 0)
  {
    v7 = (uint64_t *)(a2 + 48);
    v8 = (unint64_t)&loc_22F44E000;
    v9 = a2;
    while (1)
    {
      v11 = *(v7 - 1);
      v10 = *v7;
      v12 = v8 & 0xFFFFFF00FFFFFF00;
      v13 = *(_DWORD *)(v2 + 16);
      if ((v13 & 0x80000000) == 0)
        goto LABEL_4;
      v21 = v9 + 16 * (v13 & 0x7FFFFFFF);
      v22 = *(_DWORD *)(v21 + 40);
      LODWORD(v21) = *(_DWORD *)(v21 + 44);
      v23 = v8 & 0xFFFFFF0000000000 | (v21 - 1) | 0x100000000;
      if ((_DWORD)v21)
        v12 = v23;
      if (!v22)
        break;
      v48 = &v50;
      v49 = 0x200000000;
      v24 = *a1;
      v46 = 7;
      v47 = v11;
      sub_22EE7377C(v24, (uint64_t)&v46, (uint64_t)&v48);
      v25 = *a1;
      v44 = 7;
      v45 = v10;
      sub_22EE7377C(v25, (uint64_t)&v44, (uint64_t)&v48);
      v26 = *a1;
      v40 = *(_DWORD *)(*a1 + 11992);
      *(_DWORD *)(*a1 + 11992) = -1;
      v27 = sub_22EBDD628(a1, v11);
      if ((v27 & 1) != 0
        || ((v16 = v11 == (v27 & 0xFFFFFFFFFFFFFFFELL), v28 = v27 & 0xFFFFFFFFFFFFFFFELL, v16) ? (v29 = 0) : (v29 = 1),
            v5 |= v29,
            v30 = sub_22EBDD628(a1, v10),
            (v30 & 1) != 0))
      {
        v31 = 0;
      }
      else
      {
        v41[0] = v28;
        v41[1] = v30 & 0xFFFFFFFFFFFFFFFELL;
        v5 |= v10 != (v30 & 0xFFFFFFFFFFFFFFFELL);
        v42 = v22;
        v43 = v12;
        v31 = 1;
        v32 = (_OWORD *)sub_22E78DF7C((uint64_t)&v53, (unint64_t)v41, 1);
        v33 = (char *)v53 + 32 * v54;
        v34 = v32[1];
        *v33 = *v32;
        v33[1] = v34;
        LODWORD(v54) = v54 + 1;
      }
      *(_DWORD *)(v26 + 11992) = v40;
      v2 = a2;
      if (v48 != &v50)
        free(v48);
      if (!v31)
      {
LABEL_32:
        v37 = 1;
        goto LABEL_35;
      }
LABEL_26:
      v9 += 8;
      v7 += 2;
      v8 = v12;
      if (!--v6)
        goto LABEL_29;
    }
    v2 = a2;
LABEL_4:
    v14 = sub_22EBDD628(a1, *(v7 - 1));
    if ((v14 & 1) != 0)
      goto LABEL_32;
    v15 = sub_22EBDD628(a1, v10);
    if ((v15 & 1) != 0)
      goto LABEL_32;
    v16 = v10 == (v15 & 0xFFFFFFFFFFFFFFFELL) && v11 == (v14 & 0xFFFFFFFFFFFFFFFELL);
    v48 = (void *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    v49 = v15 & 0xFFFFFFFFFFFFFFFELL;
    v17 = !v16;
    v50 = 0;
    v5 |= v17;
    v51 = 0;
    v52 = 0;
    v18 = (_OWORD *)sub_22E78DF7C((uint64_t)&v53, (unint64_t)&v48, 1);
    v19 = (char *)v53 + 32 * v54;
    v20 = v18[1];
    *v19 = *v18;
    v19[1] = v20;
    LODWORD(v54) = v54 + 1;
    goto LABEL_26;
  }
LABEL_29:
  v35 = (_QWORD *)*a1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 & 1) != 0)
    v36 = sub_22EC297B0(v35, *(_QWORD *)(v2 + 20), (uint64_t)v53, v54);
  else
    v36 = sub_22EBCC6C0((uint64_t)v35, v2);
  v37 = v36;
LABEL_35:
  if (v53 != v55)
    free(v53);
  return v37;
}

uint64_t sub_22EBE6F98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  void *v21[2];

  v2 = a2;
  v3 = *(_QWORD *)(a2 + 40);
  if ((v3 & 6) == 0)
  {
    v5 = sub_22EBDD628(a1, v3 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v6 = *(_QWORD **)a1;
      v7 = *(_DWORD *)(*(_QWORD *)a1 + 11992);
      v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
      if (v7 != -1 || v8 != (*(_QWORD *)(v2 + 40) & 0xFFFFFFFFFFFFFFF8))
      {
        v9 = *(_QWORD *)(v2 + 16);
        if ((v9 & 4) != 0)
        {
          v12 = v6[11];
          v13 = *(_QWORD *)(v12 + 16872);
          v14 = v9 & 0xFFFFFFFFFFFFFFF8;
          v15 = *(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF8;
          v16 = *(_DWORD *)(v2 + 32);
          v2 = sub_22E3CD3D4(v12 + 2032, 48, 3);
          sub_22F2F4590(v2, v14, v15, v13, 1, 3, v16, v8);
        }
        else
        {
          v10 = *(_DWORD *)(v2 + 32);
          v20 = 0u;
          *(_OWORD *)v21 = 0u;
          v17 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 40);
          v18 = v10;
          sub_22EFC6D6C((uint64_t)&v19, v17);
          v2 = sub_22EC225CC(v6, v8, *(_QWORD *)(v8 + 8), v10, 0, (uint64_t)&v20, 0, 0, (uint64_t)&v17, 0, 0, 0);
          if (HIDWORD(v21[1]))
            free(v21[0]);
        }
      }
    }
  }
  return v2;
}

uint64_t sub_22EBE70D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBDD628(a1, *(_QWORD *)(v2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 32) != v6
    || *(_QWORD *)(v2 + 24) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F3341E8(*a1, *(_DWORD *)(v2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, v6, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
  }
  return v2;
}

uint64_t sub_22EBE7178(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[14];

  v2 = a2;
  v26[12] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EBE9AF0((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v24 = v26;
  v25 = 0x400000000;
  v6 = *(unsigned int *)(v2 + 32);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = (unint64_t *)(v2 + 48);
    while (1)
    {
      v22 = 1;
      v21 = *(v9 - 1);
      v10 = *v9;
      v11 = *v9 & 3;
      if ((v11 - 1) >= 2)
      {
        if ((_DWORD)v11 != 3)
        {
          v15 = *(_QWORD *)(v2 + 40 + 16 * *(unsigned int *)(v2 + 32) + 8 * (v10 >> 2));
          v16 = sub_22EBDD628(a1, v15);
          if ((v16 & 1) != 0)
          {
            v2 = 1;
            goto LABEL_21;
          }
          v8 |= v15 != (v16 & 0xFFFFFFFFFFFFFFFELL);
          v22 = 1;
          v23 = v16 & 0xFFFFFFFFFFFFFFFELL;
          goto LABEL_13;
        }
      }
      else
      {
        v22 = 0;
        v12 = v10 & 3;
        v13 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        if (v12 != 1)
          goto LABEL_8;
        v14 = *(_QWORD *)(v13 + 40);
        if ((v14 & 7) == 0)
        {
          v13 = v14 & 0xFFFFFFFFFFFFFFF8;
LABEL_8:
          v23 = v13;
          if (!v13)
            goto LABEL_14;
LABEL_13:
          v17 = sub_22E4EF088((uint64_t)&v24, (unint64_t)&v21, 1);
          v18 = (char *)v24 + 24 * v25;
          v19 = *(_OWORD *)v17;
          *((_QWORD *)v18 + 2) = *(_QWORD *)(v17 + 16);
          *(_OWORD *)v18 = v19;
          v7 = v25 + 1;
          LODWORD(v25) = v25 + 1;
        }
      }
LABEL_14:
      v9 += 2;
      if (!--v6)
        goto LABEL_18;
    }
  }
  v7 = 0;
  v8 = 0;
LABEL_18:
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 != *(uint64_t **)(v2 + 24)) | v8 & 1)
    v2 = sub_22EB49A78(*a1, *(_DWORD *)(v2 + 16), v5, (unsigned int *)v24, v7, *(_DWORD *)(v2 + 20));
LABEL_21:
  if (v24 != v26)
    free(v24);
  return v2;
}

uint64_t sub_22EBE737C(uint64_t a1, _QWORD *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), a2);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = 48;
  if (v5 == *(_QWORD *)(a1 + 32))
    v6 = 52;
  if (v4 == (void **)(v5 + 8 * *(unsigned int *)(a1 + v6)))
    return (uint64_t)a2;
  else
    return sub_22EBDD628(a1, a2[2]);
}

uint64_t sub_22EBE73E0(uint64_t *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  __int128 v25;
  void *v26[2];
  uint64_t v27;
  void *v28[2];
  _DWORD v29[66];
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _BYTE v33[64];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD v40[3];
  __int16 v41;
  int v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)*a1;
  v5 = *((_QWORD *)a2 + 2);
  v6 = a2[6];
  v30 = 0;
  v31 = v33;
  v32 = 0x800000000;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = v4;
  v38 = v5;
  v39 = v6;
  sub_22EFC6D6C((uint64_t)v40, v5);
  v40[1] = 0;
  v40[2] = 0;
  v41 = 0;
  v42 = 257;
  v43 = 0;
  sub_22EC56024((uint64_t)&v30);
  if ((sub_22E8CA788((uint64_t)a1, (unsigned __int8 *)a2, (*a2 & 0x80000) != 0, (uint64_t)&v30) & 1) != 0)
  {
    v7 = 1;
    goto LABEL_36;
  }
  v25 = 0u;
  *(_OWORD *)v26 = 0u;
  v8 = *((_QWORD *)a2 + 5);
  if (v8)
  {
    v9 = sub_22EBEE748(a1, v8, *((void **)a2 + 6), 0, 0);
    if (!v9)
    {
      v7 = 1;
      goto LABEL_34;
    }
    sub_22E8ACE30((uint64_t)&v25, v9, v10);
  }
  v11 = *((_QWORD *)a2 + 7);
  if (v11)
  {
    v27 = *((_QWORD *)a2 + 7);
    v28[0] = 0;
    if (sub_22E793870(a1 + 1, &v27, v28))
    {
      if (v28[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      {
        v11 = *((_QWORD *)v28[0] + 1);
        if (!v11)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v22 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v22, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_34;
        }
      }
    }
    v35 = v11;
  }
  v12 = *a2;
  if ((v12 & 0x40000) != 0)
  {
    v13 = a2[1];
    v14 = (uint64_t)(*a2 == 211 ? a2 + 16 : a2 + 20);
    v15 = (int *)(v14 + 8 * v13);
    v16 = v15[2];
    v17 = *v15;
    if (*v15 | v16)
    {
      v18 = v15[1];
      v28[0] = v29;
      v28[1] = (void *)0x800000000;
      v29[64] = v17;
      v29[65] = v18;
      if (v17)
      {
        if ((sub_22EBF221C((uint64_t)a1, v14 + 8 * v13 + 16 * ((v12 >> 18) & 1), v14 + 8 * v13 + 16 * ((v12 >> 18) & 1) + 32 * *(unsigned int *)(v14 + 8 * v13 + 12)) & 1) != 0)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v19 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v19, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_48;
        }
        LODWORD(v12) = *a2;
      }
      v7 = sub_22ED66318((_QWORD *)*a1, (uint64_t)&v25, v16, (uint64_t)&v30, (v12 >> 19) & 1, (uint64_t)v28);
LABEL_48:
      if (v28[0] != v29)
        free(v28[0]);
      goto LABEL_34;
    }
  }
  if ((_DWORD)v30 != 2)
    goto LABEL_32;
  v20 = *v31 & 0xFFFFFFFFFFFFFFFCLL;
  if ((*(_DWORD *)(v20 + 28) & 0x7Fu) <= 0x2F && ((1 << (*(_DWORD *)(v20 + 28) & 0x7F)) & 0xC00000060000) != 0)
  {
    v20 = sub_22EFBAEA4(v20);
    if (!v20)
      goto LABEL_32;
  }
  if (!sub_22EFBAEF8(v20))
  {
    LODWORD(v12) = *a2;
LABEL_32:
    v21 = sub_22EB235A8((_QWORD *)*a1, (uint64_t)&v25, (uint64_t)&v30, (v12 >> 19) & 1, 0);
    goto LABEL_33;
  }
  v21 = sub_22EC21A04(*a1, (uint64_t *)&v25, 0, (uint64_t)&v30, 0, 0, 0);
LABEL_33:
  v7 = v21;
LABEL_34:
  if (HIDWORD(v26[1]))
    free(v26[0]);
LABEL_36:
  if (BYTE1(v42))
  {
    if ((_DWORD)v30 == 5)
    {
      sub_22EC64D18(v37, (uint64_t)&v30);
    }
    else if (v35 && (*(_DWORD *)(v37[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v37, (uint64_t)&v30);
    }
  }
  if (v34)
  {
    v24 = sub_22EC6CBD0(v34);
    MEMORY[0x2348A0E9C](v24, 0x10E0C409F09D3C3);
  }
  if (v31 != (_QWORD *)v33)
    free(v31);
  return v7;
}

uint64_t sub_22EBE77A8(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void **v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  void *v35[2];
  void *v36[2];
  _BYTE v37[256];
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[64];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 7);
  if (v4 && (sub_22EFFFB48(*((unsigned __int8 **)a2 + 7)) & 1) == 0)
  {
    v12 = sub_22EBDD628(a1, v4);
    if ((v12 & 1) != 0)
      return 1;
    v13 = sub_22EC2624C(*(_QWORD *)a1, (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFFELL), (*a2 >> 19) & 1);
    v6 = v13;
    if ((v13 & 1) != 0)
      return 1;
    v5 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22EBEE6F4(a1, *((_QWORD *)a2 + 8));
    v6 = 0;
  }
  v7 = *((_QWORD *)a2 + 5);
  if (v7)
  {
    v8 = sub_22EBEE748((uint64_t *)a1, v7, *((void **)a2 + 6), 0, 0);
    if (v8)
    {
      v10 = v8;
      v11 = v9;
      goto LABEL_12;
    }
    return 1;
  }
  v10 = 0;
  v11 = 0;
LABEL_12:
  if ((*a2 & 0x40000) != 0)
  {
    if (*a2 == 211)
      v16 = a2 + 16;
    else
      v16 = a2 + 20;
    v15 = v16[2 * a2[1] + 2];
  }
  else
  {
    v15 = 0;
  }
  v17 = *(_QWORD **)a1;
  v39 = 0;
  v40 = v42;
  v41 = 0x800000000;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = v17;
  v47 = *((_OWORD *)a2 + 1);
  v18 = *((_QWORD *)a2 + 4);
  v50 = 0;
  v48 = v18;
  v49 = 0;
  v51 = 0;
  v52 = 257;
  v53 = 0;
  sub_22EC56024((uint64_t)&v39);
  if ((sub_22E8CA788(a1, (unsigned __int8 *)a2, 0, (uint64_t)&v39) & 1) == 0)
  {
    if (sub_22F0621BC((uint64_t)a2))
    {
      v19 = sub_22F0621BC((uint64_t)a2);
      *(_QWORD *)&v34 = v19;
      v36[0] = 0;
      if (sub_22E793870((uint64_t *)(a1 + 8), &v34, v36)
        && v36[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
      {
        v19 = *((_QWORD *)v36[0] + 1);
      }
      if (!v19)
        goto LABEL_19;
      v44 = v19;
    }
    v36[0] = v37;
    v36[1] = (void *)0x800000000;
    v38 = 0;
    v20 = *a2;
    if ((v20 & 0x40000) == 0)
    {
      v33 = v5;
      v21 = 0;
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (v20 >> 19) & 1;
      goto LABEL_43;
    }
    v25 = *a2;
    v26 = a2[1];
    if (v25 == 211)
      v27 = a2 + 16;
    else
      v27 = a2 + 20;
    v28 = &v27[2 * v26];
    if (*v28)
    {
      v38 = *(_QWORD *)v28;
      if ((sub_22EBF221C(a1, (uint64_t)&v28[4 * ((v20 >> 18) & 1)], (uint64_t)&v28[8 * v27[2 * v26 + 3] + 4 * ((v20 >> 18) & 1)]) & 1) != 0)
      {
        v14 = 1;
LABEL_45:
        if (v36[0] != v37)
          free(v36[0]);
        goto LABEL_47;
      }
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (*a2 >> 19) & 1;
      v33 = v5;
      if ((*a2 & 0x40000) == 0)
      {
        v21 = 0;
LABEL_43:
        v30 = v23;
        v34 = 0u;
        *(_OWORD *)v35 = 0u;
        sub_22E8ACE30((uint64_t)&v34, v10, v11);
        v14 = sub_22EC24AB8(*(_QWORD *)a1, v22, v33, v30, v24, (uint64_t *)&v34, v15, 0, (uint64_t)&v39, (uint64_t)v21, 0, 0, 0);
        if (HIDWORD(v35[1]))
          free(v35[0]);
        goto LABEL_45;
      }
      v25 = *a2;
      v26 = a2[1];
    }
    else
    {
      v33 = v5;
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (v20 >> 19) & 1;
    }
    v29 = a2 + 16;
    if (v25 != 211)
      v29 = a2 + 20;
    if (v29[2 * v26])
      v21 = v36;
    else
      v21 = 0;
    goto LABEL_43;
  }
LABEL_19:
  v14 = 1;
LABEL_47:
  if (BYTE1(v52))
  {
    if ((_DWORD)v39 == 5)
    {
      sub_22EC64D18(v46, (uint64_t)&v39);
    }
    else if (v44 && (*(_DWORD *)(v46[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v46, (uint64_t)&v39);
    }
  }
  if (v43)
  {
    v32 = sub_22EC6CBD0(v43);
    MEMORY[0x2348A0E9C](v32, 0x10E0C409F09D3C3);
  }
  if (v40 != v42)
    free(v40);
  return v14;
}

uint64_t sub_22EBE7BB4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v2 = a2;
  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) == -1 && *(_QWORD *)(v2 + 24) == v5)
    return v2;
  v6 = *(_DWORD *)(v2 + 20);
  v7 = v6 != 0;
  v8 = v6 != 0;
  LODWORD(v9) = v6 - 1;
  if (v8)
    v9 = v9;
  else
    v9 = 0;
  return sub_22EE739C0(*a1, v5, *(unsigned int *)(v2 + 16), v9 | (v7 << 32));
}

unint64_t sub_22EBE7C30(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 24) != v5)
    return sub_22EB27A20(*a1, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), v5);
  return v2;
}

uint64_t sub_22EBE7C98(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  int v7;
  int v8;
  char v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v11 = v13;
  v12 = 0x400000000;
  v4 = 1;
  if ((sub_22EBF1574(a1, (unsigned __int8 **)(a2 + 24), *(_DWORD *)(a2 + 4), 1, (uint64_t)&v11, &v10) & 1) == 0)
  {
    v5 = (uint64_t *)v11;
    v6 = v12;
    v8 = *(_DWORD *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 20);
    v4 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v12 + 24, 3);
    sub_22F002D50(v4, v8, v5, v6, v7);
  }
  if (v11 != v13)
    free(v11);
  return v4;
}

uint64_t sub_22EBE7D94(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;

  v3 = sub_22ED28410((_QWORD *)*a1, a2);
  result = sub_22EBDD628(a1, v3);
  if ((result & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(*(_QWORD *)((result & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = (*(_DWORD *)(v5 + 16) & 0xFF800FF) == 137363467;
  else
    v6 = 0;
  if (v6)
    return sub_22ED26924(*a1, (unsigned __int8 *)(result & 0xFFFFFFFFFFFFFFFELL));
  return result;
}

uint64_t sub_22EBE7E0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (_QWORD *)(a2 + 32);
    v7 = 8 * v4;
    v8 = 1;
    while (1)
    {
      v9 = *v6;
      v10 = sub_22EBDD628(a1, *v6);
      if ((v10 & 1) != 0)
        break;
      v11 = v14;
      if (v14 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v14;
      }
      v15[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
      v12 = ++v14;
      v5 |= v9 != (v10 & 0xFFFFFFFFFFFFFFFELL);
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_9;
    }
  }
  else
  {
    v12 = 0;
    v5 = 0;
LABEL_9:
    if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 & 1) != 0)
      return sub_22F32D6EC(*a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), v15, v12, *(_QWORD *)(a2 + 8));
    else
      return a2;
  }
  return v8;
}

uint64_t sub_22EBE7F70(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int **v24;
  uint64_t v25;
  int *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v41;
  uint64_t *v42;
  _BYTE *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL4 v52;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  int v71;
  int v72;
  void *v73;
  uint64_t v74;
  _BYTE v75[32];
  void *v76;
  __int128 v77;
  _BYTE v78[24];
  void *v79[2];
  _BYTE v80[32];
  uint64_t *v81;
  uint64_t v82;
  _QWORD v83[6];

  v3 = a1;
  v83[4] = *MEMORY[0x24BDAC8D0];
  v81 = v83;
  v82 = 0x400000000;
  v4 = v80;
  v79[0] = v80;
  v79[1] = (void *)0x400000000;
  v76 = v78;
  v77 = xmmword_22F44E350;
  v78[16] = 0;
  v5 = *a1;
  v73 = 0;
  v71 = 3;
  v72 = 0;
  v69 = *(unsigned int *)(v5 + 1704);
  sub_22EB4DDB8(v5 + 3688, &v72, (int *)&v69, (__int16 *)(v5 + 1693), (uint64_t *)&v73, &v71);
  v6 = *(unsigned int *)(v5 + 3696);
  v7 = v6 - 2;
  v8 = *(_QWORD *)(v5 + 3688);
  v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
  if (v9 == 5)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
    v10 = 1;
  }
  else if (v9 == 2)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
    v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
  }
  else
  {
    v10 = 0;
    *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
  }
  v11 = v8 + 576 * v6;
  *(_BYTE *)(v11 - 3) = v10;
  *(_WORD *)(v5 + 1693) = 0;
  if (*(_DWORD *)(v5 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v5 + 1776), (llvm::SmallPtrSetImplBase *)(v11 - 560));
    sub_22EAEAE08(v5 + 1840, (uint64_t *)(v11 - 496));
  }
  v12 = *(_QWORD *)(*v3 + 88);
  v13 = *(_QWORD *)(*v3 + 216);
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24));
  v15 = sub_22F3B1F5C(v12, v13, v14);
  v16 = *v3;
  v61 = v15;
  if (v15)
    v17 = v15 + 40;
  else
    v17 = 0;
  v18 = *(_QWORD *)(v16 + 216);
  v19 = *(_QWORD *)(v16 + 3200);
  *(_QWORD *)(v16 + 3200) = 0;
  v66 = *(_QWORD *)(v16 + 10288);
  v64 = *(_DWORD *)(v16 + 2192);
  v65 = *(_DWORD *)(v16 + 1944);
  v63 = v17;
  *(_QWORD *)(v16 + 216) = v17;
  *(_DWORD *)(v16 + 1944) = *(_DWORD *)(v16 + 1904);
  *(_DWORD *)(v16 + 2192) = *(_DWORD *)(v16 + 1960);
  if ((sub_22EBF0A7C(v3, a2 + 40, *(_DWORD *)(a2 + 16), 0, 0, (uint64_t)v79, (uint64_t)&v81, (uint64_t)&v76) & 1) != 0)
  {
    v68 = 1;
    goto LABEL_62;
  }
  if ((_DWORD)v82)
  {
    v20 = v81;
    v21 = 8 * v82;
    do
    {
      v22 = *v20++;
      *(_QWORD *)(v22 + 16) = v63 & 0xFFFFFFFFFFFFFFFBLL;
      v21 -= 8;
    }
    while (v21);
  }
  v73 = v75;
  v74 = 0x400000000;
  v23 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v23)
  {
    v59 = v19;
    v60 = v18;
    v24 = (int **)(a2 + 40 + 8 * *(unsigned int *)(a2 + 16));
    v25 = 8 * v23;
    v67 = a2;
    v68 = 1;
    v62 = v5;
    while (1)
    {
      v26 = *v24;
      v27 = **v24;
      if (v27)
      {
        if ((v27 - 3) >= 0xFFFFFFFE)
        {
          v31 = *((_QWORD *)v26 + 1) & 0xFFFFFFFFFFFFFFFCLL;
          if (v26[10] == 1)
          {
            v32 = v31 | 2;
          }
          else
          {
            v37 = sub_22EBDD628(v3, v31);
            if (v37 >= 2)
            {
              v38 = *(_QWORD *)(*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
              v39 = (*(_DWORD *)(v38 + 16) & 0xFE00000u) < 0x8180001 || v38 == 0;
              if (!v39 && *(_DWORD *)(v38 + 16) == 11)
                v37 = sub_22EB19A28(*v3);
            }
            if ((v37 & 1) != 0)
            {
LABEL_59:
              v19 = v59;
              v18 = v60;
              goto LABEL_60;
            }
            v32 = v37 & 0xFFFFFFFFFFFFFFFCLL;
          }
          LOBYTE(v69) = 0;
          v70 = 0;
          v41 = *((_QWORD *)v26 + 3);
          if (v41 > 7)
          {
            v45 = v41 & 0xFFFFFFFFFFFFFFF8;
            if ((v41 & 4) != 0)
            {
              v42 = v3;
              v43 = v4;
              v44 = v45 | 4;
              v69 = v45 | 4;
            }
            else
            {
              if (!v45)
              {
                v26 = 0;
                goto LABEL_52;
              }
              v42 = v3;
              v43 = v4;
              sub_22F31A5DC((unint64_t *)&v69, v45);
              v44 = v69;
            }
          }
          else
          {
            v42 = v3;
            v43 = v4;
            v44 = 0;
            v69 = 0;
          }
          v70 = 1;
          v46 = v32 & 0xFFFFFFFFFFFFFFFCLL;
          v47 = *v26;
          v48 = v26[4];
          v49 = *v42;
          if ((v32 & 2) != 0 || !v46)
          {
            v52 = v47 == 1;
            v26 = (int *)sub_22E3CD3D4(*(_QWORD *)(v49 + 88) + 2032, 48, 3);
            sub_22F31A53C((uint64_t)v26, v46, v52, v48, v44);
          }
          else
          {
            v26 = (int *)sub_22EBCF54C(v49, v32 & 0xFFFFFFFFFFFFFFFCLL, v47 == 1, v26[4], v44);
          }
          v4 = v43;
          v5 = v62;
          v3 = v42;
          a2 = v67;
LABEL_52:
          if (!v26)
            goto LABEL_59;
          goto LABEL_53;
        }
        v28 = *((_QWORD *)v26 + 1);
        if ((v28 & 2) == 0)
        {
          v29 = sub_22EBDD628(v3, v28 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v29 & 1) != 0)
            goto LABEL_59;
          v26 = (int *)sub_22F3327E4(*v3, v29 & 0xFFFFFFFFFFFFFFFELL);
          goto LABEL_52;
        }
        if (*(_DWORD *)(*v3 + 11992) != -1)
        {
          v36 = v28 & 0xFFFFFFFFFFFFFFFCLL;
          v26 = (int *)sub_22E3CD3D4(*(_QWORD *)(*v3 + 88) + 2032, 24, 3);
          *v26 = 3;
          *((_BYTE *)v26 + 4) &= 0xF8u;
          *((_QWORD *)v26 + 1) = v36 | 2;
          *((_QWORD *)v26 + 2) = 0;
        }
      }
      else if (v26[4] == 1)
      {
        if (*(_DWORD *)(*v3 + 11992) != -1)
        {
          v30 = *((_QWORD *)v26 + 1) & 0xFFFFFFFFFFFFFFF8;
          v26 = (int *)sub_22E3CD3D4(*(_QWORD *)(*v3 + 88) + 2032, 24, 3);
          *v26 = 0;
          *((_BYTE *)v26 + 4) &= 0xF8u;
          *((_QWORD *)v26 + 1) = v30;
          v26[4] = 1;
        }
      }
      else
      {
        v33 = v4;
        v34 = sub_22EBE9AF0((_QWORD **)v3, (uint64_t *)(*((_QWORD *)v26 + 1) & 0xFFFFFFFFFFFFFFF8));
        if (!v34)
          goto LABEL_59;
        v35 = (unint64_t)v34;
        v26 = (int *)sub_22E3CD3D4(*(_QWORD *)(*v3 + 88) + 2032, 24, 3);
        sub_22F31A650((uint64_t)v26, v35);
        v4 = v33;
        a2 = v67;
      }
LABEL_53:
      v50 = v74;
      if (v74 >= (unint64_t)HIDWORD(v74))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v50 = v74;
      }
      *((_QWORD *)v73 + v50) = v26;
      v51 = (v74 + 1);
      LODWORD(v74) = v74 + 1;
      ++v24;
      v25 -= 8;
      if (!v25)
      {
        v54 = (char *)v73;
        if ((_DWORD)v51)
        {
          v55 = 0;
          v18 = v60;
          v19 = v59;
          do
          {
            v56 = *(_QWORD *)&v54[v55];
            if ((*(_DWORD *)v56 - 3) >= 0xFFFFFFFE)
            {
              v57 = *(_QWORD *)(v56 + 24);
              if (v57 >= 8 && (v57 & 4) == 0)
                *(_QWORD *)(*(_QWORD *)((v57 & 0xFFFFFFFFFFFFFFF8) + 16) + 16) = v63 & 0xFFFFFFFFFFFFFFFBLL;
            }
            v55 += 8;
          }
          while (8 * v51 != v55);
        }
        else
        {
          v51 = 0;
          v18 = v60;
          v19 = v59;
        }
        goto LABEL_72;
      }
    }
  }
  v51 = 0;
  v54 = v75;
LABEL_72:
  v68 = (uint64_t)sub_22F3C4144(*(_QWORD *)(*v3 + 88), *(_DWORD *)(a2 + 4), v61, v81, v82, v54, v51, *(_DWORD *)(a2 + 32));
LABEL_60:
  if (v73 != v75)
    free(v73);
LABEL_62:
  if (v18)
  {
    *(_QWORD *)(v16 + 216) = v18;
    *(_QWORD *)(v16 + 3200) = v19;
    *(_QWORD *)(v16 + 10288) = v66;
    *(_DWORD *)(v16 + 1944) = v65;
    *(_DWORD *)(v16 + 2192) = v64;
  }
  sub_22EB48E64(v5);
  if (v76 != v78)
    free(v76);
  if (v79[0] != v4)
    free(v79[0]);
  if (v81 != v83)
    free(v81);
  return v68;
}

uint64_t sub_22EBE8640(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;

  v2 = a2;
  if ((*(_BYTE *)(a2 + 1) & 0x80) != 0)
  {
    v4 = sub_22EBE9AF0(a1, *(uint64_t **)(a2 + 32));
    if (v4)
    {
      if (*((_DWORD *)*a1 + 2998) != -1 || *(unint64_t **)(v2 + 32) != v4)
        return sub_22F3C109C((*a1)[11], *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), *(_DWORD *)(v2 + 24), (uint64_t)v4);
    }
    else
    {
      return 1;
    }
  }
  return v2;
}

uint64_t sub_22EBE86B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  unsigned int *v25;
  char v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[9];

  v2 = a2;
  v31[8] = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  v29 = v31;
  v30 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 32);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 32);
  }
  if ((sub_22EBF1574(a1, *(unsigned __int8 ***)(v2 + 24), v4, 0, (uint64_t)&v29, &v27) & 1) != 0)
  {
    v2 = 1;
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1 || v27 != 0)
  {
    v6 = v29;
    v7 = v30;
    v9 = *(_DWORD *)(v2 + 16);
    v8 = *(_DWORD *)(v2 + 20);
    v10 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*a1 + 88) + 15192), "__builtin_shufflevector", 0x17uLL);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 88) + 1960) + 80);
    v12 = sub_22E3CD31C((uint64_t *)(v11 + 72), v11);
    v13 = sub_22EFCE144(v12 + 40, v10);
    v14 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
    if ((v13 & 4) != 0 && v14)
      v14 = (_QWORD *)*v14;
    v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 32, 3);
    v16 = *(_QWORD *)(*a1 + 88);
    v17 = *(_QWORD *)(v16 + 16864);
    v28 = 0;
    sub_22EFF69F0(v15, v16, (uint64_t)v14, 0, v17, 0, v9, &v28, 0);
    v18 = sub_22EF5B848(*(_QWORD *)(*a1 + 88), v14[6], 0);
    v19 = sub_22E90092C(*a1, v15, v18, 64, 0, 0);
    v20 = *(_QWORD *)(*a1 + 88);
    v21 = sub_22E8BBA74((unint64_t)v14);
    v22 = *(_QWORD *)(v14[6] & 0xFFFFFFFFFFFFFFF0);
    if (v22)
      v23 = *(unsigned __int8 *)(v22 + 16) - 27 > 0xFFFFFFFD;
    else
      v23 = 0;
    if (!v23)
      v22 = sub_22F10CF48(v22);
    v24 = sub_22E8BBBD0(*(_QWORD *)(v22 + 24));
    v25 = sub_22EFFA488(v20, v19 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v6, v7, v21, v24, v8, 0, 0, 0);
    v2 = sub_22E97915C((_QWORD *)*a1, (unsigned int *)((unint64_t)v25 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (v29 != v31)
    free(v29);
  return v2;
}

uint64_t sub_22EBE8918(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  char v31;
  unsigned __int8 **v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  void *v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  char v55;
  int v56;
  void *v57[2];
  _QWORD v58[24];
  void *v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;

  v2 = a2;
  v64 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 1) == 0)
    return v2;
  v4 = *a1;
  v54 = 0;
  v59 = 0;
  v56 = 3;
  v57[0] = (void *)*(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v54, (int *)v57, (__int16 *)(v4 + 1693), (uint64_t *)&v59, &v56);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  if ((*(_BYTE *)(v2 + 2) & 1) == 0 || (v11 = *(unsigned int *)(v2 + 28), !(_DWORD)v11))
  {
    v22 = *(void **)(v2 + 32);
    v57[0] = v22;
    v59 = 0;
    if (sub_22E793870(a1 + 1, v57, &v59) && v59 != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v22 = (void *)*((_QWORD *)v59 + 1);
    if (v22)
    {
      v24 = *(_DWORD *)(v2 + 16);
      v25 = *(_DWORD *)(v2 + 20);
      v26 = *(_DWORD *)(v2 + 24);
      v28 = *(_QWORD *)(*a1 + 88);
      v23 = (uint64_t)v22;
      v27 = 0;
      goto LABEL_27;
    }
LABEL_29:
    v2 = 1;
    goto LABEL_30;
  }
  v12 = 0;
  v13 = 3 * v11;
  v48 = v2 + 40 + 8 * v13;
  v14 = 8 * v13;
  v15 = v2 + 40;
  while (1)
  {
    v16 = *(_DWORD *)v15;
    if (*(_DWORD *)v15 == 1)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
        goto LABEL_17;
    }
    else if (v16 == 7)
    {
      if (**(unsigned __int8 **)(v15 + 8) != 213)
        goto LABEL_17;
    }
    else if (((1 << v16) & 0x13D) != 0)
    {
LABEL_17:
      ++v12;
      goto LABEL_18;
    }
    sub_22EDC0108(*a1, v15, 0, (uint64_t)&v59);
    v56 = 0;
    LOBYTE(v54) = 0;
    v55 = 0;
    v17 = *a1;
    v51 = v59;
    v52 = v60;
    v53 = v61;
    sub_22EE7465C(v17, (uint64_t)&v51);
    LODWORD(v57[0]) = 0;
    v57[1] = 0;
    v18 = *a1;
    v19 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    if (sub_22EBEF1D8(a1, (uint64_t)&v59, (uint64_t)v57, 1))
    {
      *(_DWORD *)(v18 + 11992) = v19;
      goto LABEL_29;
    }
    v20 = *a1;
    v49 = *(_OWORD *)v57;
    v50 = v58[0];
    v21 = sub_22EE74920(v20, (unsigned int *)&v49);
    if ((v21 & 0xFF00000000) == 0)
      break;
    v12 += v21;
    *(_DWORD *)(v18 + 11992) = v19;
LABEL_18:
    v15 += 24;
    v14 -= 24;
    if (!v14)
    {
      v23 = *(_QWORD *)(v2 + 32);
      v24 = *(_DWORD *)(v2 + 16);
      v25 = *(_DWORD *)(v2 + 20);
      v26 = *(_DWORD *)(v2 + 24);
      v27 = v12 | 0x100000000;
      v28 = *(_QWORD *)(*a1 + 88);
LABEL_27:
      v2 = sub_22F0622F8(v28, v24, v23, v25, v26, v27, 0, 0);
      goto LABEL_30;
    }
  }
  *(_DWORD *)(v18 + 11992) = v19;
  v30 = *(_DWORD *)(v2 + 20);
  v59 = (char *)&v60 + 8;
  *(_QWORD *)&v60 = 0x800000000;
  v62 = v30;
  v63 = v30;
  if ((sub_22EBEEEF4((uint64_t)a1, a1, v2 + 40, (uint64_t)a1, v48) & 1) != 0)
  {
    v2 = 1;
    goto LABEL_52;
  }
  v57[0] = v58;
  v57[1] = (void *)0x800000000;
  if (!(_DWORD)v60)
  {
    LODWORD(v37) = 0;
    goto LABEL_49;
  }
  v31 = 0;
  v32 = (unsigned __int8 **)v59;
  v33 = 32 * v60;
  while (2)
  {
    v34 = sub_22E4EF088((uint64_t)v57, (unint64_t)v32, 1);
    v35 = (char *)v57[0] + 24 * LODWORD(v57[1]);
    v36 = *(_OWORD *)v34;
    *((_QWORD *)v35 + 2) = *(_QWORD *)(v34 + 16);
    *(_OWORD *)v35 = v36;
    v37 = ++LODWORD(v57[1]);
    v38 = *(_DWORD *)v32;
    if (*(_DWORD *)v32 == 1)
    {
      v39 = *(_BYTE *)(*(_QWORD *)((unint64_t)v32[1] & 0xFFFFFFFFFFFFFFF0) + 16) == 36;
LABEL_40:
      v40 = v39;
    }
    else
    {
      if (v38 == 7)
      {
        v39 = *v32[1] == 213;
        goto LABEL_40;
      }
      v40 = ((1 << v38) & 0x13D) == 0;
    }
    v31 |= v40;
    v32 += 4;
    v33 -= 32;
    if (v33)
      continue;
    break;
  }
  if ((v31 & 1) == 0)
  {
LABEL_49:
    v41 = *(_QWORD *)(v2 + 32);
    v42 = *(_DWORD *)(v2 + 16);
    v43 = *(_DWORD *)(v2 + 20);
    v44 = *(_DWORD *)(v2 + 24);
    v47 = v37 | 0x100000000;
    v46 = *(_QWORD *)(*a1 + 88);
    v45 = 0;
    v37 = 0;
    goto LABEL_50;
  }
  v41 = *(_QWORD *)(v2 + 32);
  v42 = *(_DWORD *)(v2 + 16);
  v43 = *(_DWORD *)(v2 + 20);
  v44 = *(_DWORD *)(v2 + 24);
  v45 = v57[0];
  v46 = *(_QWORD *)(*a1 + 88);
  v47 = 0;
LABEL_50:
  v2 = sub_22F0622F8(v46, v42, v41, v43, v44, v47, (uint64_t)v45, v37);
  if (v57[0] != v58)
    free(v57[0]);
LABEL_52:
  if (v59 != (char *)&v60 + 8)
    free(v59);
LABEL_30:
  sub_22EB48E64(v4);
  return v2;
}

unsigned int *sub_22EBE8E04(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  v2 = (*(_DWORD *)a2 & 0x1C0000) == 0 && *(_QWORD *)(a1 + 216) != *(_QWORD *)(a2 + 24);
  if (*(_DWORD *)(a1 + 11992) != -1 || v2)
    return sub_22F32FAE8(a1, (*(_DWORD *)a2 >> 18) & 7, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a1 + 216));
  else
    return (unsigned int *)a2;
}

uint64_t sub_22EBE8E58(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v4 = *a1;
  v5 = *a1 + 3688;
  v19 = *(_DWORD *)(*(_QWORD *)(v4 + 3688) + 576 * *(unsigned int *)(v4 + 3696) - 576);
  v18 = 0;
  v17 = 3;
  *(_QWORD *)v16 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v5, &v19, v16, (__int16 *)(v4 + 1693), &v18, &v17);
  v6 = *(unsigned int *)(v4 + 3696);
  v7 = v6 - 2;
  v8 = *(_QWORD *)(v4 + 3688);
  v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
  if (v9 == 5)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
    v10 = 1;
  }
  else if (v9 == 2)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
    v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
  }
  else
  {
    v10 = 0;
    *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
  }
  v11 = v8 + 576 * v6;
  *(_BYTE *)(v11 - 3) = v10;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v11 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v11 - 496));
  }
  v12 = sub_22EBF2868(a1, *(_QWORD *)(a2 + 16), 1u);
  if ((v12 & 1) != 0)
  {
    sub_22F32F704(*a1);
    return 1;
  }
  else
  {
    v13 = *a1;
    v14 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFFELL);
    if (*(_DWORD *)(*a1 + 11992) == -1 && *(unsigned int **)(a2 + 16) == v14)
    {
      sub_22F32F704(v13);
      return sub_22EBCC6C0(*a1, a2);
    }
    else
    {
      return sub_22EB497A8(v13, *(_DWORD *)(a2 + 24), v14, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
    }
  }
}

uint64_t sub_22EBE9004(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v10;
  int v11;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 24);
  if (!v6)
  {
    v8 = 0;
    goto LABEL_7;
  }
  v7 = sub_22EBDD628(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
  v10 = *(_DWORD *)(a2 + 32);
  if (!v10)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v10 = v11;
  }
  LODWORD(v12) = *(_DWORD *)(a2 + 36);
  if (!(_DWORD)v12)
  {
    v12 = *(_QWORD *)(a2 + 24);
    if (v12)
      sub_22F0D60E4(v12);
  }
  return sub_22EB542F0(*a1, *(_QWORD *)(v4 + 40), (void *)(v5 & 0xFFFFFFFFFFFFFFFELL), v8, v10, v12);
}

uint64_t sub_22EBE90C4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v9;
  int v10;
  int v11;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(a2 + 24);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_7;
  }
  v6 = sub_22EBDD628(a1, v5);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  v9 = *(_DWORD *)(a2 + 36);
  if (!v9)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v9 = v10;
  }
  v11 = *(_DWORD *)(a2 + 40);
  if (!v11)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  return sub_22F32FF64(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v7, *(_BYTE *)(a2 + 32), v9, v11);
}

uint64_t sub_22EBE9178(uint64_t *a1, _DWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _DWORD *v6;
  unint64_t *v7;
  int *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  unsigned __int32 v27;
  _QWORD *v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  int *v42;
  uint64_t v43;
  size_t v44;
  unsigned __int32 v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v51;
  uint64_t v52;
  int64x2_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57[2];
  void *v58[2];
  _BYTE v59[32];
  uint64_t v60;
  int64x2_t v61;
  _BYTE v62[32];
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD v66[6];

  v2 = a1;
  v66[4] = *MEMORY[0x24BDAC8D0];
  v64 = v66;
  v65 = 0x400000000;
  v3 = a2[1];
  if (!(_DWORD)v3)
  {
    v5 = 0;
    goto LABEL_76;
  }
  v4 = 0;
  v5 = 0;
  v6 = a2 + 6;
  v53 = vdupq_n_s64(0x20uLL);
  v54 = (uint64_t)(a2 + 6);
  v55 = a2[1];
  while (2)
  {
    v7 = *(unint64_t **)&v6[2 * v4];
    v8 = (int *)(v7 + 1);
    v9 = *v7;
    if ((*v7 & 0xF) != 0 || !v9 || *(_BYTE *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
    {
      v60 = (uint64_t)v62;
      v61 = vdupq_n_s64(0x20uLL);
      v63 = 0;
      v10 = sub_22F11598C(v9);
      if (v61.i64[0] < (unint64_t)v10)
        sub_22EEB52C0(&v60, v10);
      v13 = sub_22EBE9D18((_QWORD **)v2, (uint64_t)&v60, v9, (uint64_t)v8, v11, v12);
      if (v13 >= 0x10)
      {
        v15 = v13;
        if (v13 == *v7)
        {
          v16 = v65;
          v17 = HIDWORD(v65);
        }
        else
        {
          v25 = *(_QWORD *)(*v2 + 88);
          v26 = v61.i64[0] - v61.i64[1];
          v27 = v61.i32[0] - v61.i32[2];
          if (v61.i32[0] == v61.i32[2])
            v27 = sub_22F11598C(v15);
          v7 = (unint64_t *)sub_22E3CD3D4(v25 + 2032, v27 + 8, 3);
          *v7 = v15;
          memcpy(v7 + 1, (const void *)(v60 + v61.i64[1]), v26);
          v16 = v65;
          v17 = HIDWORD(v65);
          v5 = 1;
        }
        if (v16 >= v17)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v16 = v65;
        }
        v64[v16] = (uint64_t)v7;
        LODWORD(v65) = v65 + 1;
        v14 = 4;
      }
      else
      {
        v14 = 1;
      }
      if ((_BYTE *)v60 != v62 && v60)
        MEMORY[0x2348A0E84]();
      goto LABEL_53;
    }
    v18 = *(_QWORD *)(v9 + 32);
    if (v18 >= 0x10 && (*(_QWORD *)(v9 + 32) & 0xFLL) == 0)
      v37 = *(_QWORD *)((char *)&unk_22F483088
                      + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
    else
      v37 = 1;
    v20 = ((unint64_t)v8 + v37 + 3) & -v37;
    v57[0] = *(_QWORD *)(v9 + 32);
    v57[1] = v20;
    v58[0] = v59;
    v58[1] = (void *)0x200000000;
    sub_22EE73804(*v2, v18, v20, (uint64_t)v58);
    v51 = *(_DWORD *)(v9 + 20);
    LODWORD(v21) = v51 - 1;
    if (v51)
      v21 = v21;
    else
      v21 = 0;
    v52 = v21;
    v22 = v18;
    for (i = v18; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_32;
        v24 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v24 <= 0x39)
          break;
LABEL_27:
        if (sub_22F115668(i))
          v22 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_43;
      }
      if (v24 == 24)
        goto LABEL_42;
      if (v24 == 26)
        break;
      if (((1 << v24) & 0x20000000200003CLL) == 0)
        goto LABEL_27;
LABEL_32:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_32;
LABEL_42:
    v22 = i;
LABEL_43:
    sub_22F115668(v22);
    sub_22F1167E8(v57);
    v2 = a1;
    v28 = (_QWORD *)*a1;
    v29 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    v60 = (uint64_t)v62;
    v61 = v53;
    v63 = 0;
    v30 = sub_22F11598C(*v7);
    if (v61.i64[0] < (unint64_t)v30)
      sub_22EEB52C0(&v60, v30);
    v33 = sub_22EBE9D18((_QWORD **)a1, (uint64_t)&v60, v18, v20, v31, v32);
    if (v33 < 0x10)
    {
LABEL_46:
      v14 = 1;
      goto LABEL_47;
    }
    v34 = v33;
    v35 = v18;
    while (2)
    {
      while (2)
      {
        if ((v35 & 0xF) != 0)
          goto LABEL_67;
        v36 = *(unsigned __int8 *)(*(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v36 > 0x39)
        {
LABEL_62:
          if (sub_22F115668(v35))
            v18 = v35;
          v35 = sub_22F115B7C(v35);
          if (!v35)
            goto LABEL_69;
          continue;
        }
        break;
      }
      if (v36 == 24)
        break;
      if (v36 != 26)
      {
        if (((1 << v36) & 0x20000000200003CLL) != 0)
          goto LABEL_67;
        goto LABEL_62;
      }
      if ((*(_BYTE *)(v35 + 23) & 0x10) == 0)
      {
LABEL_67:
        v35 = sub_22F115B7C(v35);
        continue;
      }
      break;
    }
    v18 = v35;
LABEL_69:
    v38 = sub_22F115668(v18);
    v39 = sub_22F1167E8(v57);
    v2 = a1;
    v40 = sub_22F34AE9C((_QWORD *)*a1, v34, v38 | ((unint64_t)v39 << 32), *v8, v52 | ((unint64_t)(v51 != 0) << 32));
    if (v40 < 0x10)
      goto LABEL_46;
    v41 = v40;
    sub_22EEB5360((uint64_t)&v60, v40, 4uLL, 4);
    *v42 = *v8;
    v43 = *(_QWORD *)(*a1 + 88);
    v44 = v61.i64[0] - v61.i64[1];
    v45 = v61.i32[0] - v61.i32[2];
    if (v61.i32[0] == v61.i32[2])
      v45 = sub_22F11598C(v41);
    v46 = (_QWORD *)sub_22E3CD3D4(v43 + 2032, v45 + 8, 3);
    *v46 = v41;
    memcpy(v46 + 1, (const void *)(v60 + v61.i64[1]), v44);
    v47 = v65;
    if (v65 >= (unint64_t)HIDWORD(v65))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v47 = v65;
    }
    v64[v47] = (uint64_t)v46;
    LODWORD(v65) = v65 + 1;
    v14 = 4;
LABEL_47:
    if ((_BYTE *)v60 != v62 && v60)
      MEMORY[0x2348A0E84]();
    *((_DWORD *)v28 + 2998) = v29;
    if (v58[0] != v59)
      free(v58[0]);
    v5 = 1;
    v6 = (_DWORD *)v54;
    v3 = v55;
LABEL_53:
    if (v14 == 4)
    {
      if (++v4 == v3)
      {
LABEL_76:
        if (*(_DWORD *)(*v2 + 11992) != -1 || (v5 & 1) != 0)
          v48 = sub_22EBC6244(*v2, (*a2 >> 18), a2[4], v64, v65, a2[5]);
        else
          v48 = (uint64_t)a2;
        goto LABEL_81;
      }
      continue;
    }
    break;
  }
  v48 = 1;
LABEL_81:
  if (v64 != v66)
    free(v64);
  return v48;
}

uint64_t sub_22EBE97D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  uint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  _QWORD *v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;

  v2 = a2;
  if ((*(_BYTE *)(a2 + 2) & 0x40) != 0)
  {
    v9 = *(uint64_t **)(a2 + 16);
    v10 = sub_22EBE9AF0((_QWORD **)a1, v9);
    if (v10)
    {
      v11 = v10;
      v12 = (_QWORD *)*a1;
      if (v9 != (uint64_t *)v10 || *((_DWORD *)v12 + 2998) != -1)
      {
        v14 = *(_DWORD *)(v2 + 24);
        v15 = (*(_DWORD *)v2 >> 18) & 0xF;
        sub_22F0D4E74(v2);
        return sub_22EB28664((uint64_t)v12, v11, v14, v15, v16);
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v4 = (_QWORD *)*a1;
    sub_22EB4DECC(*a1, 0, 0, 3);
    v24 = 0;
    v5 = *(unsigned __int8 **)(v2 + 16);
    if (*v5 == 214 && (v6 = (unsigned __int8 *)*((_QWORD *)v5 + 3), *v6 == 163))
    {
      v7 = sub_22EBF2584(a1, *((_QWORD *)v5 + 3), 0, &v24);
      if (v7 >= 2)
      {
        if (v6 == (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL) && *(_DWORD *)(*a1 + 11992) == -1)
          v7 = (unint64_t)v5;
        else
          v7 = sub_22EB27A20((_QWORD *)*a1, *((_DWORD *)v5 + 4), *((_DWORD *)v5 + 5), v7 & 0xFFFFFFFFFFFFFFFELL);
      }
    }
    else
    {
      v7 = sub_22EBDD628(a1, *(_QWORD *)(v2 + 16));
    }
    v18 = v24;
    if (v24)
    {
      v19 = *(_DWORD *)(v2 + 24);
      v20 = (*(_DWORD *)v2 >> 18) & 0xF;
      sub_22F0D4E74(v2);
      v2 = sub_22EB28664(*a1, v18, v19, v20, v21);
    }
    else if ((v7 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v22 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v22)
      {
        v23 = sub_22EB28F24((_QWORD *)*a1, v22, *(_DWORD *)(v2 + 24), (*(_DWORD *)v2 >> 18) & 0xF);
        if ((v23 & 1) != 0)
          v2 = 1;
        else
          v2 = v23;
      }
    }
    sub_22EB48E64(v4);
  }
  return v2;
}

uint64_t sub_22EBE99A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = *(_DWORD *)a2 & 0x7C0000;
  v5 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == 0x100000 && *v5 == 163)
    v6 = sub_22EBF2584(a1, (uint64_t)v5, 1, 0);
  else
    v6 = sub_22EBDD628(a1, v5);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v7)
    return sub_22EB2941C((_QWORD *)*a1, 0, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 0x1F, v7);
  return v2;
}

uint64_t sub_22EBE9A4C(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22EBE9AF0(a1, (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EBDD628(a1, *(_QWORD *)(v2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != (uint64_t *)(*(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF8)
    || *(_QWORD *)(v2 + 16) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB4B7A8(*a1, *(_DWORD *)(v2 + 32), v6 & 0xFFFFFFFFFFFFFFFELL, v5, *(_DWORD *)(v2 + 36));
  }
  return v2;
}

unint64_t *sub_22EBE9AF0(_QWORD **a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  unsigned __int32 v17;
  uint64_t v19;
  int64x2_t v20;
  _BYTE v21[32];
  uint64_t v22;
  uint64_t v23;

  v2 = (unint64_t *)a2;
  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t)(a2 + 1);
  v5 = *a2;
  for (i = *a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_12;
      v7 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v7 <= 0x39)
        break;
LABEL_7:
      if (sub_22F115668(i))
        v5 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_14;
    }
    if (v7 == 24)
      goto LABEL_13;
    if (v7 == 26)
      break;
    if (((1 << v7) & 0x20000000200003CLL) == 0)
      goto LABEL_7;
LABEL_12:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_12;
LABEL_13:
  v5 = i;
LABEL_14:
  sub_22F115668(v5);
  v8 = *v2;
  if (*v2 >= 0x10)
  {
    v19 = (uint64_t)v21;
    v20 = vdupq_n_s64(0x20uLL);
    v22 = 0;
    v9 = sub_22F11598C(v8);
    if (v20.i64[0] < (unint64_t)v9)
      sub_22EEB52C0(&v19, v9);
    v12 = sub_22EBE9D18(a1, (uint64_t)&v19, v8, v4, v10, v11);
    if (v12 > 0xF)
    {
      v14 = v12;
      v15 = (*a1)[11];
      v16 = v20.i64[0] - v20.i64[1];
      v17 = v20.i32[0] - v20.i32[2];
      if (v20.i32[0] == v20.i32[2])
        v17 = sub_22F11598C(v14);
      v2 = (unint64_t *)sub_22E3CD3D4(v15 + 2032, v17 + 8, 3);
      *v2 = v14;
      v13 = (_BYTE *)v19;
      memcpy(v2 + 1, (const void *)(v19 + v20.i64[1]), v16);
    }
    else
    {
      v2 = 0;
      v13 = (_BYTE *)v19;
    }
    if (v13 != v21 && v13)
      MEMORY[0x2348A0E84](v13, 0x1000C8077774924);
  }
  return v2;
}

unint64_t sub_22EBE9D18(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if ((a3 & 0xF) == 0)
    __asm { BR              X11 }
  v8 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if ((v8 & 0xFFFFFFFFFFFFFFF0) != 0)
    v9 = *(_QWORD *)((char *)&unk_22F483088
                   + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v9 = 1;
  v10 = sub_22EBE9D18(a1, a2, v8, (a4 + v9 - 1) & -v9, a5, a6);
  v11 = 0;
  if (v10 >= 0x10)
  {
    v12 = sub_22E8C1750(a1, v10, a3);
    if (v12 >= 0x10)
      return v12;
    else
      return 0;
  }
  return v11;
}

unint64_t sub_22EBEE6F4(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  if (a2 >= 0x10)
  {
    v3 = sub_22EF579A8(*(_QWORD *)(*(_QWORD *)a1 + 88), a2, 0);
    v4 = sub_22EBE9AF0(a1, v3);
    if (v4)
      return *(_QWORD *)v4;
    else
      return 0;
  }
  return a2;
}

unint64_t sub_22EBEE748(uint64_t *a1, unint64_t a2, void *__s2, unint64_t a4, uint64_t a5)
{
  unint64_t v6;
  unsigned int v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  void *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD v65[2];
  int v66;
  int v67;
  unsigned int v68[24];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unint64_t v72;
  _OWORD *v73;
  uint64_t v74;
  _QWORD v75[11];

  v6 = a2;
  v75[8] = *MEMORY[0x24BDAC8D0];
  v73 = v75;
  v74 = 0x400000000;
  if (!a2)
  {
    v49 = 0;
    v70 = 0u;
    v71 = 0u;
    goto LABEL_76;
  }
  v10 = 0;
  v11 = a2;
  do
  {
    if (v10 >= HIDWORD(v74))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = v74;
    }
    v12 = (unint64_t *)&v73[v10];
    *v12 = v11;
    v12[1] = (unint64_t)__s2;
    v10 = v74 + 1;
    LODWORD(v74) = v74 + 1;
    v11 = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  while (v11);
  v70 = 0u;
  v71 = 0u;
  if (!v10)
  {
    v49 = 0;
    goto LABEL_76;
  }
  v63 = a1 + 1;
  do
  {
    LODWORD(v74) = v10 - 1;
    v13 = v73[v10 - 1];
    v69 = v13;
    v14 = v13;
    v15 = *(_QWORD *)(v13 + 16);
    if (!v15)
    {
      v37 = *(_QWORD *)(*a1 + 88);
      v38 = sub_22F0AB0EC((unint64_t *)&v69);
      sub_22F0AB958((uint64_t)&v70 + 8, v37, v38);
      *(_QWORD *)&v70 = v38 | ((unint64_t)v38 << 32);
      goto LABEL_39;
    }
    v16 = *(_QWORD *)(v13 + 8);
    v17 = (v16 >> 1) & 3;
    if (v17 - 2 >= 2)
    {
      if (v17 == 1)
      {
        v34 = *(_DWORD *)(v15 + 28) & 0x7F;
        if ((v34 - 35) < 3)
        {
          v46 = sub_22F0AABF8(v13);
          v72 = v46;
          v65[0] = 0;
          if (sub_22E793870(v63, &v72, v65) && v65[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
            v46 = *(_QWORD *)(v65[0] + 8);
          v47 = *(_QWORD *)(*a1 + 88);
          v48 = sub_22F0AB0EC((unint64_t *)&v69);
          sub_22F3E8E2C((uint64_t *)&v70 + 1, v47, v46, v48, SHIDWORD(v48));
          *(_QWORD *)&v70 = v48;
        }
        else
        {
          sub_22F0AB364((uint64_t *)&v69);
          v35 = *(_QWORD *)(v14 + 8) & 6;
          if (v34 == 16)
          {
            if (v35 == 2)
            {
              if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x10)
                v36 = *(_QWORD *)(v14 + 16);
              else
                v36 = 0;
            }
            else
            {
              v36 = 0;
            }
            v72 = v36;
            v65[0] = 0;
            if (sub_22E793870(v63, &v72, v65) && v65[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
              v36 = *(_QWORD *)(v65[0] + 8);
          }
          else
          {
            if (v35 == 2)
            {
              if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x11)
                v36 = *(_QWORD *)(v14 + 16);
              else
                v36 = 0;
            }
            else
            {
              v36 = 0;
            }
            v72 = v36;
            v65[0] = 0;
            if (sub_22E793870(v63, &v72, v65) && v65[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
              v36 = *(_QWORD *)(v65[0] + 8);
          }
          v39 = *(_QWORD *)(*a1 + 88);
          v40 = sub_22F0AB364((uint64_t *)&v69);
          v41 = sub_22F0AB364((uint64_t *)&v69);
          v42 = HIDWORD(v41);
          sub_22F0AB8AC((uint64_t *)&v70 + 1, v39, v36, v40, SHIDWORD(v41));
          if (!(_DWORD)v70)
            LODWORD(v70) = v40;
          DWORD1(v70) = v42;
        }
        goto LABEL_39;
      }
      if ((v16 & 6) != 0)
        v43 = 0;
      else
        v43 = *(_QWORD *)(v13 + 16);
      v44 = sub_22F0AB364((uint64_t *)&v69);
      v45 = sub_22F0AB364((uint64_t *)&v69);
      v65[0] = a4;
      v65[1] = v43;
      v66 = v44;
      v67 = HIDWORD(v45);
      LOBYTE(v62) = 0;
      if ((sub_22E958D90(*a1, 0, v65, 0, &v70, a5, 0, 0, v62) & 1) == 0)
        goto LABEL_39;
      goto LABEL_89;
    }
    v19 = sub_22F0AB4E0((uint64_t)&v69);
    v20 = (uint64_t)v18;
    if (v19 > 0xF)
    {
      v21 = sub_22EBEF96C(a1, v19, v18, a4, (uint64_t)&v70);
      if (!v21)
        goto LABEL_89;
      v20 = (uint64_t)(v21 + 1);
      v19 = *v21;
    }
    if (!v19)
      goto LABEL_89;
    v22 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
    v23 = *(_DWORD *)(v22 + 16);
    v24 = *(_QWORD *)(v22 + 8);
    if ((v23 & 0x400) == 0)
    {
      v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 16);
      v26 = *a1;
      if (v25 == 45)
        goto LABEL_23;
      if (v25 == 44 && (**(_QWORD **)(v26 + 72) & 0x200) != 0)
        goto LABEL_23;
      if ((v19 & 0xF) == 0 && v23 == 50 && (*(_BYTE *)(*(_QWORD *)(v19 + 24) + 28) & 0x80) != 0)
        goto LABEL_89;
      v57 = v19;
      v58 = v19;
      while (1)
      {
        if ((v58 & 0xF) != 0)
          goto LABEL_112;
        v59 = *(unsigned __int8 *)(*(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v59 > 0x39)
        {
LABEL_107:
          if (sub_22F115668(v58))
            v57 = v58;
          v58 = sub_22F115B7C(v58);
          if (!v58)
            goto LABEL_115;
        }
        else
        {
          if (v59 == 24)
            goto LABEL_114;
          if (v59 == 26)
          {
            if ((*(_BYTE *)(v58 + 23) & 0x10) != 0)
            {
LABEL_114:
              v57 = v58;
LABEL_115:
              v60 = sub_22F115668(v57);
              sub_22E8FCA40((_QWORD *)v26, v60, 0xF99u, 0, (uint64_t)v65);
              v72 = v19;
              v61 = sub_22E8901B8((uint64_t)v65, (uint64_t *)&v72);
              v64 = v70;
              sub_22E8906A0(v61, &v64);
              sub_22E903BEC((unsigned int *)v65);
LABEL_89:
              v6 = 0;
              goto LABEL_93;
            }
          }
          else if (((1 << v59) & 0x20000000200003CLL) == 0)
          {
            goto LABEL_107;
          }
LABEL_112:
          v58 = sub_22F115B7C(v58);
        }
      }
    }
    v26 = *a1;
    v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 16);
LABEL_23:
    if (v25 != 44)
      goto LABEL_38;
    v28 = v19;
    for (i = v19; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_35;
        v30 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v30 <= 0x39)
          break;
LABEL_30:
        if (sub_22F115668(i))
          v28 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_37;
      }
      if (v30 == 24)
        goto LABEL_36;
      if (v30 == 26)
        break;
      if (((1 << v30) & 0x20000000200003CLL) == 0)
        goto LABEL_30;
LABEL_35:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_35;
LABEL_36:
    v28 = i;
LABEL_37:
    v31 = sub_22F115668(v28);
    sub_22E8FCA40((_QWORD *)v26, v31, 0x1927u, 0, (uint64_t)v68);
    sub_22E903BEC(v68);
    v26 = *a1;
LABEL_38:
    v32 = *(_QWORD *)(v26 + 88);
    v33 = sub_22F0AB364((uint64_t *)&v69);
    sub_22E8ACD1C((uint64_t)&v70, v32, 0, v19, v20, SHIDWORD(v33));
LABEL_39:
    a4 = 0;
    a5 = 0;
    v10 = v74;
  }
  while ((_DWORD)v74);
  v49 = *((_QWORD *)&v70 + 1);
LABEL_76:
  if (v49 != v6 || *(_DWORD *)(*a1 + 11992) != -1)
  {
    v50 = DWORD2(v71);
    v51 = 0;
    if (v6)
    {
      do
      {
        v52 = *(_QWORD *)(v6 + 8);
        if ((v52 & 4) != 0)
          v53 = 12;
        else
          v53 = 8;
        if (*(_QWORD *)(v6 + 16))
          v54 = v53;
        else
          v54 = 4;
        v51 += v54;
        v6 = v52 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v52 & 0xFFFFFFFFFFFFFFF8) != 0);
    }
    if (DWORD2(v71) != v51 || memcmp((const void *)v71, __s2, DWORD2(v71)))
    {
      if (!v49)
        goto LABEL_89;
      if (HIDWORD(v71))
      {
        v55 = (void *)sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, v50, 3);
        memcpy(v55, (const void *)v71, DWORD2(v71));
        v49 = *((_QWORD *)&v70 + 1);
      }
    }
    v6 = v49;
  }
LABEL_93:
  if (HIDWORD(v71))
    free((void *)v71);
  if (v73 != (_OWORD *)v75)
    free(v73);
  return v6;
}

uint64_t sub_22EBEEEF4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[9];

  v6[6] = *MEMORY[0x24BDAC8D0];
  if (a3 != a5)
  {
    sub_22EDC0108(*a2, a3, 0, (uint64_t)v6);
    __asm { BR              X9 }
  }
  return 0;
}

BOOL sub_22EBEF1D8(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  _BOOL8 v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v41;
  void *v42[2];
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;

  v4 = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v24 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      if (!v24)
        v24 = (unint64_t)sub_22EF579A8(*(_QWORD *)(*a1 + 88), *(_QWORD *)(a2 + 8), 0);
      v25 = sub_22EBE9AF0(a1, v24);
      if (v25)
      {
        v26 = *(_QWORD *)v25;
        *(_DWORD *)a3 = 1;
        *(_QWORD *)(a3 + 8) = v26;
        *(_QWORD *)(a3 + 24) = v25 & 0xFFFFFFFFFFFFFFFCLL | 2;
        return 0;
      }
      return v4;
    case 2:
    case 3:
    case 4:
      v8 = sub_22F0EECF4();
      v9 = sub_22EBEE6F4((uint64_t)a1, v8);
      if (v9 < 0x10)
        return 1;
      v10 = v9;
      v11 = *(_QWORD *)(a2 + 16);
      if (*(_DWORD *)a2 == 2)
        v12 = *(_QWORD *)(a2 + 16);
      else
        v12 = 0;
      if (v12)
      {
        v43 = v12;
        *(_QWORD *)&v41 = 0;
        if (sub_22E793870(a1 + 1, &v43, &v41))
        {
          if ((_QWORD)v41 != a1[1] + 16 * *((unsigned int *)a1 + 6))
          {
            v11 = *(_QWORD *)(v41 + 8);
            if (!v11)
              return 1;
          }
        }
      }
      else
      {
        v11 = 0;
      }
      if (v10 == v8 && v12 == v11)
      {
        v4 = 0;
        v32 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(_OWORD *)(a3 + 16) = v32;
        return v4;
      }
      if (*(_DWORD *)a2 == 3)
      {
        v4 = 0;
        *(_DWORD *)a3 = 3;
        *(_QWORD *)(a3 + 8) = v10;
LABEL_52:
        *(_QWORD *)(a3 + 24) = 0;
        return v4;
      }
      if (*(_DWORD *)a2 != 4)
      {
        v4 = 0;
        *(_DWORD *)a3 = 2;
        *(_QWORD *)(a3 + 8) = v10;
        *(_QWORD *)(a3 + 16) = v11;
        goto LABEL_52;
      }
      v33 = *(_QWORD *)(*a1 + 88);
      sub_22E466FDC(a2, (uint64_t)&v43);
      sub_22F0EEA4C((uint64_t)&v41, v33, &v43, v10);
      *(_OWORD *)a3 = v41;
      *(void **)(a3 + 16) = v42[0];
      *(_QWORD *)(a3 + 24) = 0;
      if (v44 >= 0x41 && v43)
        MEMORY[0x2348A0E84](v43, 0x1000C8000313F17);
      return 0;
    case 5:
      v27 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      v28 = *(_QWORD *)(v27 + 8);
      if (*(_QWORD *)v27)
      {
        v29 = sub_22EBEE748((int)a1, *(_QWORD *)v27, *(void **)(v27 + 8));
        if (!v29)
          return v4;
        v31 = v29;
        v28 = v30;
      }
      else
      {
        v31 = 0;
      }
      v41 = 0u;
      *(_OWORD *)v42 = 0u;
      sub_22E8ACE30((uint64_t)&v41, v31, v28);
      if ((*(_DWORD *)a2 - 5) > 1)
        v34 = 0;
      else
        v34 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
      v35 = sub_22EBEF62C((uint64_t)a1, (uint64_t)&v41, *(_QWORD *)(a2 + 8), v34, 0, 0);
      v4 = v35 < 8;
      if (v35 >= 8)
      {
        v36 = v35;
        v37 = *(_QWORD *)(*a1 + 88);
        if ((*(_DWORD *)a2 - 5) > 1)
          v38 = 0;
        else
          v38 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
        v39 = sub_22E3CD3D4(v37 + 2032, 24, 3);
        *(_QWORD *)v39 = v31;
        *(_QWORD *)(v39 + 8) = v28;
        *(_DWORD *)(v39 + 16) = v38;
        *(_DWORD *)(v39 + 20) = 0;
        *(_QWORD *)a3 = 5;
        *(_QWORD *)(a3 + 8) = v36;
        *(_QWORD *)(a3 + 24) = v39 & 0xFFFFFFFFFFFFFFFCLL;
      }
      if (HIDWORD(v42[1]))
        free(v42[0]);
      return v4;
    case 7:
      v13 = *a1;
      if (a4)
        v14 = 0;
      else
        v14 = 4;
      *(_QWORD *)&v41 = 0;
      v45 = 1;
      v46 = v14;
      v43 = *(unsigned int *)(v13 + 1704);
      sub_22EB4DDB8(v13 + 3688, &v46, (int *)&v43, (__int16 *)(v13 + 1693), (uint64_t *)&v41, &v45);
      v15 = *(unsigned int *)(v13 + 3696);
      v16 = v15 - 2;
      v17 = *(_QWORD *)(v13 + 3688);
      v18 = *(_DWORD *)(v17 + 576 * (v15 - 2));
      if (v18 == 5)
      {
        *(_BYTE *)(v17 + 576 * v15 - 4) = *(_BYTE *)(v17 + 576 * v16 + 572);
        v19 = 1;
      }
      else if (v18 == 2)
      {
        *(_BYTE *)(v17 + 576 * v15 - 4) = 1;
        v19 = *(_BYTE *)(v17 + 576 * v16 + 573) != 0;
      }
      else
      {
        v19 = 0;
        *(_BYTE *)(v17 + 576 * v15 - 4) = 0;
      }
      v20 = v17 + 576 * v15;
      *(_BYTE *)(v20 - 3) = v19;
      *(_WORD *)(v13 + 1693) = 0;
      if (*(_DWORD *)(v13 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v13 + 1776), (llvm::SmallPtrSetImplBase *)(v20 - 560));
        sub_22EAEAE08(v13 + 1840, (uint64_t *)(v20 - 496));
      }
      if ((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v21 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      else
        v21 = *(_QWORD *)(a2 + 8);
      v22 = sub_22EBDD628(a1, v21);
      v23 = sub_22EB51A84(*a1, v22);
      v4 = v23 & 1;
      if ((v23 & 1) == 0)
      {
        *(_DWORD *)a3 = 7;
        *(_QWORD *)(a3 + 8) = v23 & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)(a3 + 24) = v23 & 0xFFFFFFFFFFFFFFFCLL | 1;
      }
      sub_22EB48E64(v13);
      return v4;
    default:
      return v4;
  }
}

unint64_t sub_22EBEF62C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  _BYTE v41[12];
  int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;

  v6 = a3;
  v45 = *MEMORY[0x24BDAC8D0];
  v36 = a3;
  v9 = a3 & 6;
  v10 = a3 & 0xFFFFFFFFFFFFFFF8;
  if (v9 != 4 || v10 == 0)
  {
    if (v9 == 6 && v10)
    {
      v12 = *(_QWORD *)(a2 + 8);
      if (v12)
        a5 = 0;
      v14 = *(_QWORD *)a1;
      v15 = *(_QWORD *)(v10 + 8);
      if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v12 != (v15 & 0xFFFFFFFFFFFFFFF8) || a5 >= 0x10)
      {
        if ((v15 & 4) != 0)
        {
          v28 = 0;
          v29 = *(_DWORD *)(v10 + 16);
          LODWORD(v38) = a4;
          HIDWORD(v38) = a4;
          v39 = a4;
          v43 = a4;
          v44 = a4;
          *(_QWORD *)&v41[4] = 0;
          v42 = 0;
          LODWORD(v40) = 1;
          *(_DWORD *)v41 = v29;
          do
          {
            v30 = *(_DWORD *)((char *)&v38 + v28);
            *(_DWORD *)&v41[v28 + 4] = v30;
            if (v30)
              v44 = v30;
            v28 += 4;
          }
          while (v28 != 12);
          v37 = 0;
          sub_22ED66924(v14, 0, a2, a4, (uint64_t)&v40, a5, 0, &v37, a6);
          return v37;
        }
        else
        {
          v18 = *(_QWORD *)(v10 + 16);
          LODWORD(v40) = 0;
          *(_QWORD *)v41 = v18;
          v43 = a4;
          v44 = a4;
          v38 = 0;
          sub_22ED66924(v14, 0, a2, a4, (uint64_t)&v40, a5, 0, &v38, a6);
          return v38;
        }
      }
      return v6;
    }
    v25 = sub_22F0F08CC(&v36);
    if (v25)
    {
      v26 = v25;
      v38 = v25;
      v40 = 0;
      if (sub_22E793870((uint64_t *)(a1 + 8), &v38, &v40))
      {
        v27 = v26;
        if (v40 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
        {
          v27 = *(_QWORD *)(v40 + 8);
          if (!v27)
            return 0;
        }
      }
      else
      {
        v27 = v26;
      }
      if (v27 != v26 || *(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
        return v27 & 0xFFFFFFFFFFFFFFF9;
      return v6;
    }
    if (v9 != 2 || !v10 || (~*(_DWORD *)v10 & 3) != 0)
      return v6;
    v31 = *(_QWORD *)(v10 + 16);
    v38 = v31;
    v40 = 0;
    if (sub_22E793870((uint64_t *)(a1 + 8), &v38, &v40)
      && v40 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
    {
      v31 = *(_QWORD *)(v40 + 8);
    }
    if (v31)
    {
      v32 = *(_QWORD *)a1;
      if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v31 != *(_QWORD *)(v10 + 16))
      {
        v33 = *(_DWORD *)v10 >> 2;
        *(_QWORD *)v41 = *(_QWORD *)(v10 + 24);
        LODWORD(v40) = 8;
        HIDWORD(v40) = v33;
        return sub_22F36D860(*(_QWORD *)(v32 + 88), v31, (uint64_t)&v40);
      }
      return v6;
    }
    return 0;
  }
  v19 = sub_22F0F08CC((uint64_t *)(v10 + 16));
  v38 = v19;
  v40 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v38, &v40))
  {
    v21 = v19;
    if (v40 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
      v21 = *(_QWORD *)(v40 + 8);
    if (v21)
      goto LABEL_25;
    return 0;
  }
  v21 = v19;
  if (!v19)
    return 0;
LABEL_25:
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
  {
    v23 = *(_QWORD *)(v10 + 8);
    v22 = *(_QWORD *)(a2 + 8);
    return sub_22F36E410(*(_QWORD *)(*(_QWORD *)a1 + 88), v22, (v23 >> 2) & 1, v21 & 0xFFFFFFFFFFFFFFF9);
  }
  v22 = *(_QWORD *)(a2 + 8);
  v23 = *(_QWORD *)(v10 + 8);
  if (v22 != (v23 & 0xFFFFFFFFFFFFFFF8) || v21 != v19)
    return sub_22F36E410(*(_QWORD *)(*(_QWORD *)a1 + 88), v22, (v23 >> 2) & 1, v21 & 0xFFFFFFFFFFFFFFF9);
  return v6;
}

_QWORD *sub_22EBEF96C(uint64_t *a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unsigned int *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  unsigned __int32 v28;
  unsigned int *v30;
  unsigned int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  int64x2_t v42;
  _BYTE v43[32];
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _DWORD v47[66];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v41 = (uint64_t)v43;
  v42 = vdupq_n_s64(0x20uLL);
  v44 = 0;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v10 == 20)
  {
    v13 = *(_QWORD *)(a2 + 40);
    v15 = a3[4];
    v14 = a3[5];
    v16 = *a1;
    LODWORD(v45) = 0;
    v46 = v13;
    v47[2] = v15;
    v47[3] = v15;
    v39 = 0;
    sub_22ED66924(v16, 0, a5, v14, (uint64_t)&v45, a4, 0, &v39, 1);
    v17 = 0;
    v18 = v39;
    if (v39 < 8)
      goto LABEL_22;
    v39 = a2;
    v40 = a3;
    v45 = v47;
    v46 = 0x800000000;
    v47[64] = a3[6];
    v47[65] = a3[7];
    v19 = 0;
    if ((sub_22EBF016C((uint64_t)a1, (uint64_t)&v39, 0, (uint64_t)&v39, *(_DWORD *)(a2 + 20)) & 1) == 0)
    {
      if ((~(_BYTE)v18 & 6) == 0 && (v18 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v19 = sub_22F36CB1C(*(_QWORD *)(*a1 + 88), (*(_DWORD *)(v39 + 16) >> 19), *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 16), (uint64_t)&v45);
        sub_22EEB5360((uint64_t)&v41, v19, (8 * *(_DWORD *)(v19 + 20) + 32), 8);
        v31 = v30;
        *v30 = *v40;
        v33 = *(_QWORD *)(a5 + 8);
        v32 = (uint64_t *)(a5 + 8);
        if (!v33 || !sub_22F0ABC50(v32, *(_QWORD *)(*a1 + 88)))
          v34 = 0;
        *((_QWORD *)v31 + 1) = v34;
        v35 = v40;
        v31[5] = v40[5];
        v31[4] = v35[4];
        v31[6] = v35[6];
        v31[7] = v35[7];
        if ((_DWORD)v46)
        {
          v36 = 0;
          v37 = v31 + 8;
          v38 = 32 * v46;
          do
          {
            *v37++ = *(_QWORD *)((char *)v45 + v36 + 24);
            v36 += 32;
          }
          while (v38 != v36);
        }
      }
      else
      {
        v20 = sub_22ED60904((_QWORD *)*a1, v18, v40[4], (uint64_t)&v45);
        v19 = v20;
        if (v20 >= 0x10)
        {
          sub_22EEB5360((uint64_t)&v41, v20, (8 * *(_DWORD *)(v20 + 20) + 16), 8);
          v22 = v40;
          v21[1] = v40[5];
          *v21 = v22[4];
          v21[2] = v22[6];
          v21[3] = v22[7];
          if ((_DWORD)v46)
          {
            v23 = 0;
            v24 = v21 + 4;
            v25 = 32 * v46;
            do
            {
              *v24++ = *(_QWORD *)((char *)v45 + v23 + 24);
              v23 += 32;
            }
            while (v25 != v23);
          }
        }
      }
    }
    if (v45 != v47)
      free(v45);
  }
  else
  {
    if (v10 == 46)
    {
      v11 = sub_22EBEF62C((uint64_t)a1, a5, *(_QWORD *)(a2 + 32), *a3, a4, 1);
      if (v11 < 8)
      {
LABEL_18:
        v17 = 0;
        goto LABEL_22;
      }
      v12 = sub_22EBEFD38((_QWORD **)a1, (uint64_t)&v41, a2, a3, v11);
    }
    else
    {
      v12 = sub_22EBE9D18(a1, &v41, a2, a3, a5, a4);
    }
    v19 = v12;
  }
  if (v19 < 0x10)
    goto LABEL_18;
  v26 = *(_QWORD *)(*a1 + 88);
  v27 = v42.i64[0] - v42.i64[1];
  v28 = v42.i32[0] - v42.i32[2];
  if (v42.i32[0] == v42.i32[2])
    v28 = sub_22F11598C(v19);
  v17 = (_QWORD *)sub_22E3CD3D4(v26 + 2032, v28 + 8, 3);
  *v17 = v19;
  memcpy(v17 + 1, (const void *)(v41 + v42.i64[1]), v27);
LABEL_22:
  if ((_BYTE *)v41 != v43 && v41)
    MEMORY[0x2348A0E84]();
  return v17;
}

unint64_t sub_22EBEFD38(_QWORD **a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v19;
  uint64_t v20;
  _DWORD v21[66];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v20 = 0x800000000;
  v21[64] = a4[2];
  v21[65] = a4[3];
  if (*(_DWORD *)(a3 + 20))
    __asm { BR              X9 }
  v5 = sub_22ED60904(*a1, a5, *a4, (uint64_t)&v19);
  v6 = v5;
  if (v5 >= 0x10)
  {
    v7 = 8 * *(_DWORD *)(v5 + 20);
    if (*(_BYTE *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 16) == 20)
    {
      sub_22EEB5360(a2, v5, (v7 + 32), 8);
      *(_DWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 20) = a4[1];
      *(_DWORD *)(v8 + 16) = *a4;
      *(_DWORD *)(v8 + 24) = a4[2];
      *(_DWORD *)(v8 + 28) = a4[3];
      if ((_DWORD)v20)
      {
        v9 = 0;
        v10 = (_QWORD *)(v8 + 32);
        v11 = 32 * v20;
        do
        {
          *v10++ = *(_QWORD *)((char *)v19 + v9 + 24);
          v9 += 32;
        }
        while (v11 != v9);
      }
    }
    else
    {
      sub_22EEB5360(a2, v5, (v7 + 16), 8);
      v13[1] = a4[1];
      *v13 = *a4;
      v13[2] = a4[2];
      v13[3] = a4[3];
      if ((_DWORD)v20)
      {
        v14 = 0;
        v15 = v13 + 4;
        v16 = 32 * v20;
        do
        {
          *v15++ = *(_QWORD *)((char *)v19 + v14 + 24);
          v14 += 32;
        }
        while (v16 != v14);
      }
    }
  }
  if (v19 != v21)
    free(v19);
  return v6;
}

uint64_t sub_22EBF016C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  if (a2 != a4 || a3 != a5)
    __asm { BR              X9 }
  return 0;
}

unint64_t sub_22EBF0454(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40[18];
  int v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  __int128 v45;
  void *v46[2];
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[64];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int v59;
  _BYTE v60[24];
  int v61;
  __int16 v62;
  char v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[64];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned int v73;
  _BYTE v74[24];
  int v75;
  __int16 v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v10 = sub_22EBEE748(a1, *(_QWORD *)(a3 + 32), *(void **)(a4 + 8), 0, 0);
  if (!v10)
    return 0;
  v12 = v11;
  v13 = (*(_DWORD *)(a3 + 16) >> 19);
  v14 = *(_DWORD *)a4;
  v15 = *(_QWORD *)(a3 + 40);
  v16 = *(_DWORD *)(a4 + 16);
  v48 = v10;
  v49 = v11;
  v47 = v15;
  v45 = 0u;
  *(_OWORD *)v46 = 0u;
  sub_22E8ACE30((uint64_t)&v45, v10, v11);
  if ((sub_22F0AAC5C(v48) & 4) != 0 && !sub_22E958204(*a1, (uint64_t)&v45, 0))
  {
    v17 = sub_22EF65A30(*(_QWORD *)(*a1 + 88), v13, v48, v47, 0);
    goto LABEL_18;
  }
  if ((v13 - 5) <= 1)
  {
    v17 = sub_22ED717D8((_QWORD *)*a1, v13, v14, v48, v49, v47, v16, a5);
LABEL_18:
    v24 = v17;
    goto LABEL_40;
  }
  v44 = v13;
  v18 = (_QWORD *)*a1;
  v64 = 0;
  v65 = v67;
  v66 = 0x800000000;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = v18;
  v72 = v47;
  v73 = v16;
  sub_22EFC6D6C((uint64_t)v74, v47);
  *(_OWORD *)&v74[8] = xmmword_22F4555C0;
  v75 = 16842752;
  v76 = 0;
  v77 = 0;
  sub_22EC56024((uint64_t)&v64);
  v43 = 0;
  v19 = sub_22E958204(*a1, (uint64_t)&v45, 0);
  v43 = v19;
  if (v19)
  {
    if ((sub_22E958490(*a1, &v45, v19) & 1) == 0)
    {
      sub_22EC611AC(*a1, &v64, v43, 0);
      if ((_DWORD)v64 != 5)
      {
        if ((_DWORD)v64 != 2)
          goto LABEL_19;
        v20 = *(_QWORD *)v65 & 0xFFFFFFFFFFFFFFFCLL;
        v21 = *(_DWORD *)(v20 + 28) & 0x7F;
        if (v21 <= 0x2F && ((1 << v21) & 0xC00000060000) != 0)
        {
          v20 = sub_22EFBAEA4(*(_QWORD *)v65 & 0xFFFFFFFFFFFFFFFCLL);
          v21 = *(_DWORD *)(v20 + 28) & 0x7F;
        }
        if (v21 - 33 < 5)
        {
          if ((sub_22EA33594(*a1, v20, v44, 0, v16, v47) & 1) != 0)
          {
            v22 = *(_QWORD *)(v20 + 48);
            if (v22)
              v23 = v22 & 0xFFFFFFFFFFFFFFF0;
            else
              v23 = sub_22EF6462C(*(_QWORD *)(*a1 + 88), v20);
            v24 = sub_22EF65684(*(_QWORD *)(*a1 + 88), v13, v48, v23, 0);
            goto LABEL_31;
          }
          sub_22E8FCA40((_QWORD *)*a1, v14, 0x13E0u, 0, (uint64_t)&v50);
          sub_22E8BAE44((uint64_t)&v50, &v47);
          sub_22E903BEC((unsigned int *)&v50);
          sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v20 + 24), 0x6Fu, 0, (uint64_t)&v50);
          sub_22E903BEC((unsigned int *)&v50);
        }
        else
        {
LABEL_19:
          v25 = (_QWORD *)*a1;
          v50 = 0;
          v51 = v53;
          v52 = 0x800000000;
          v54 = 0;
          v55 = 0;
          v56 = 0;
          v57 = v25;
          v58 = v47;
          v59 = v16;
          sub_22EFC6D6C((uint64_t)v60, v47);
          *(_OWORD *)&v60[8] = xmmword_22F4555C0;
          v61 = 16842752;
          v62 = 0;
          v63 = 0;
          sub_22EC56024((uint64_t)&v50);
          sub_22EC611AC(*a1, &v50, v43, 0);
          if ((v50 - 2) <= 2)
          {
            v42 = *(_QWORD *)v51 & 0xFFFFFFFFFFFFFFFCLL;
            v35 = (_QWORD *)*a1;
            v41 = sub_22F31E40C(*a1, v42, v44);
            sub_22E8FCA40(v35, v16, 0x12A5u, 0, (uint64_t)v40);
            v36 = sub_22E890024((uint64_t)v40, (uint64_t *)&v42);
            v37 = sub_22E8900C4(v36, &v41);
            sub_22E8900C4(v37, (int *)&v44);
            sub_22E903BEC(v40);
            sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v42 + 24), 0x64u, 0, (uint64_t)v40);
          }
          else
          {
            sub_22E8FCA40((_QWORD *)*a1, v16, 0xFDFu, 0, (uint64_t)v40);
            v26 = sub_22E8900C4((uint64_t)v40, (int *)&v44);
            v27 = sub_22E8BAE44(v26, &v47);
            v28 = sub_22E894FB4(v27, (uint64_t *)&v43);
            v42 = sub_22F0AB0EC(&v48);
            sub_22E8906A0(v28, (uint64_t *)&v42);
          }
          sub_22E903BEC(v40);
          if (HIBYTE(v61))
          {
            if ((_DWORD)v50 == 5)
            {
              sub_22EC64D18(v57, (uint64_t)&v50);
            }
            else if (v55 && (*(_DWORD *)(v57[9] + 52) & 0x400000) != 0)
            {
              sub_22E90B5FC((unint64_t)v57, (uint64_t)&v50);
            }
          }
          if (v54)
          {
            v39 = sub_22EC6CBD0(v54);
            MEMORY[0x2348A0E9C](v39, 0x10E0C409F09D3C3);
          }
          if (v51 != v53)
            free(v51);
        }
      }
    }
  }
  v24 = 0;
LABEL_31:
  if (HIBYTE(v75))
  {
    if ((_DWORD)v64 == 5)
    {
      sub_22EC64D18(v71, (uint64_t)&v64);
    }
    else if (v69 && (*(_DWORD *)(v71[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v71, (uint64_t)&v64);
    }
  }
  if (v68)
  {
    v38 = sub_22EC6CBD0(v68);
    MEMORY[0x2348A0E9C](v38, 0x10E0C409F09D3C3);
  }
  if (v65 != v67)
    free(v65);
LABEL_40:
  if (HIDWORD(v46[1]))
    free(v46[0]);
  if (v24 < 0x10)
    return 0;
  v29 = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0);
  if (v29)
    v30 = *(_BYTE *)(v29 + 16) == 24;
  else
    v30 = 0;
  if (v30
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 24
    && (v29 = sub_22F10CF48(v29)) != 0)
  {
    sub_22EEB5360(a2, *(_QWORD *)(v29 + 40), 4uLL, 4);
    *v31 = *(_DWORD *)(a4 + 16);
    sub_22EEB5360(a2, v24, 0x10uLL, 8);
    *(_DWORD *)v32 = *(_DWORD *)a4;
    *(_QWORD *)(v32 + 8) = v12;
  }
  else
  {
    sub_22EEB5360(a2, v24, 0x18uLL, 8);
    *(_DWORD *)v33 = *(_DWORD *)a4;
    *(_QWORD *)(v33 + 8) = v12;
    *(_DWORD *)(v33 + 16) = *(_DWORD *)(a4 + 16);
  }
  return v24;
}

uint64_t sub_22EBF0A7C(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t i;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v54;
  unsigned int v56;
  void **v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  _QWORD v61[6];

  v61[4] = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  if (!a3)
    return 0;
  v11 = a5;
  v12 = a2;
  v13 = a1;
  v14 = 0;
  v56 = 0;
  v54 = a3;
  while (1)
  {
    v15 = *(_QWORD *)(v12 + 8 * v14);
    if (v15)
      break;
    v30 = *(_QWORD *)(a4 + 8 * v14);
    v31 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
    if (v31 && *(_BYTE *)(v31 + 16) == 36)
    {
      v32 = *(_QWORD *)(v31 + 32);
      v59 = v61;
      v60 = 0x200000000;
      v57 = &v59;
      LOBYTE(v58) = 0;
      HIDWORD(v58) = -1;
      sub_22EE72E1C((uint64_t)&v57, v32);
      v33 = *(_QWORD *)(v31 + 32);
      v34 = (uint64_t)v13;
      v35 = *v13;
      v36 = *(_DWORD *)(v35 + 11992);
      *(_DWORD *)(v35 + 11992) = -1;
      v37 = sub_22EBEE6F4(v34, v33);
      *(_DWORD *)(v35 + 11992) = v36;
      if (v59 != v61)
        free(v59);
      if (v37 < 0x10)
        return 1;
      v13 = a1;
      v38 = sub_22EF663B4(*(_QWORD *)(*a1 + 88), v37, 0);
      v8 = v54;
    }
    else
    {
      v38 = sub_22EBEE6F4((uint64_t)v13, v30);
      if (v38 < 0x10)
        return 1;
    }
    if (v11)
      sub_22F2F3918(a8, *(_DWORD *)(a6 + 8), *(_BYTE *)(v11 + v14));
    v40 = *(unsigned int *)(a6 + 8);
    if (v40 >= *(unsigned int *)(a6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v40 = *(unsigned int *)(a6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a6 + 8 * v40) = v38;
    ++*(_DWORD *)(a6 + 8);
    if (a7)
    {
      v41 = *(unsigned int *)(a7 + 8);
      if (v41 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v41 = *(unsigned int *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v41) = 0;
LABEL_60:
      ++*(_DWORD *)(a7 + 8);
    }
LABEL_61:
    if (++v14 == v8)
      return 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
  {
    v39 = sub_22EBF0F44(v13, *(_QWORD *)(v12 + 8 * v14), 0);
    if (v39)
      goto LABEL_52;
    return 1;
  }
  v59 = v61;
  v60 = 0x200000000;
  v16 = *(_QWORD *)(v15 + 56);
  v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 4) != 0)
    v17 = (uint64_t *)v17[4];
  v20 = *v17;
  v18 = v17 + 1;
  v19 = v20;
  v21 = *(_QWORD *)(v20 + 32);
  if (v21 >= 0x10 && (v21 & 0xF) == 0)
    v42 = *(_QWORD *)((char *)&unk_22F483088
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v42 = 1;
  v57 = (void **)v21;
  v58 = ((unint64_t)v18 + v42 + 3) & -v42;
  sub_22EE73804(*v13, v21, v58, (uint64_t)&v59);
  if (!(_DWORD)v60)
  {
    v24 = 0;
    LOBYTE(v27) = 0;
    goto LABEL_49;
  }
  v23 = *(_DWORD *)(v19 + 20);
  v24 = v23 != 0;
  v25 = v23 != 0;
  v26 = v23 - 1;
  if (v25)
    v27 = v26;
  else
    v27 = 0;
  v56 = v27 >> 8;
  for (i = v21; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_28;
      v29 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v29 <= 0x39)
        break;
LABEL_23:
      if (sub_22F115668(i))
        v21 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_48;
    }
    if (v29 == 24)
      goto LABEL_47;
    if (v29 == 26)
      break;
    if (((1 << v29) & 0x20000000200003CLL) == 0)
      goto LABEL_23;
LABEL_28:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_28;
LABEL_47:
  v21 = i;
LABEL_48:
  sub_22F115668(v21);
  sub_22F1167E8((uint64_t *)&v57);
LABEL_49:
  v43 = *a1;
  v44 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  v45 = v27 | (v56 << 8) | (unint64_t)(v24 << 32);
  v13 = a1;
  v39 = sub_22EBF0F44(a1, v15, v45);
  *(_DWORD *)(v43 + 11992) = v44;
  v12 = a2;
  v11 = a5;
  if (v59 != v61)
    free(v59);
  v8 = v54;
  if (v39)
  {
LABEL_52:
    if (v11)
      sub_22F2F3918(a8, *(_DWORD *)(a6 + 8), *(_BYTE *)(v11 + v14));
    v46 = *(_QWORD *)(v39 + 48);
    v47 = *(unsigned int *)(a6 + 8);
    if (v47 >= *(unsigned int *)(a6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v47 = *(unsigned int *)(a6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a6 + 8 * v47) = v46;
    ++*(_DWORD *)(a6 + 8);
    if (a7)
    {
      v48 = *(unsigned int *)(a7 + 8);
      if (v48 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v48 = *(unsigned int *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v48) = v39;
      goto LABEL_60;
    }
    goto LABEL_61;
  }
  return 1;
}

unint64_t sub_22EBF0F44(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int i;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  int *v51;
  uint64_t v52;
  size_t v53;
  unsigned __int32 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[2];
  char v58[8];
  int64x2_t v59;
  _BYTE v60[32];
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 56);
  v7 = (unint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0)
    v7 = (unint64_t *)v7[4];
  if ((a3 & 0xFF00000000) == 0 || (v8 = *v7, *(_BYTE *)(*(_QWORD *)(*v7 & 0xFFFFFFFFFFFFFFF0) + 16) != 36))
  {
    v17 = (uint64_t *)sub_22EBE9AF0(a1, v7);
    if (v17)
      goto LABEL_20;
    return 0;
  }
  *(_QWORD *)v58 = v60;
  v59 = vdupq_n_s64(0x20uLL);
  v61 = 0;
  v9 = sub_22F11598C(v8);
  if (v59.i64[0] < (unint64_t)v9)
    sub_22EEB52C0((uint64_t *)v58, v9);
  v12 = (int *)(v7 + 1);
  v13 = *(_QWORD *)(v8 + 32);
  if (v13 >= 0x10 && (*(_QWORD *)(v8 + 32) & 0xFLL) == 0)
    v46 = *(_QWORD *)((char *)&unk_22F483088
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v46 = 1;
  v15 = sub_22EBE9D18(a1, v58, v13, ((unint64_t)v7 + v46 + 11) & -v46, v10, v11);
  if (v15 < 0x10)
  {
LABEL_14:
    v16 = 0;
    v17 = 0;
    goto LABEL_15;
  }
  v36 = v15;
  v37 = *(_QWORD *)(v8 + 32);
  v56 = v37;
  if (v37 >= 0x10 && (v37 & 0xF) == 0)
    v55 = *(_QWORD *)((char *)&unk_22F483088
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v55 = 1;
  v39 = *(_QWORD *)(v8 + 32);
  v57[0] = v39;
  v57[1] = ((unint64_t)v7 + v55 + 11) & -v55;
  while (1)
  {
    while (1)
    {
      if ((v39 & 0xF) != 0)
        goto LABEL_77;
      v40 = *(unsigned __int8 *)(*(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v40 <= 0x39)
        break;
LABEL_72:
      v41 = v39;
      v42 = sub_22F115668(v39);
      v43 = v56;
      if (v42)
        v43 = v41;
      v56 = v43;
      v39 = sub_22F115B7C(v41);
      if (!v39)
        goto LABEL_85;
    }
    if (v40 == 24)
      goto LABEL_84;
    if (v40 == 26)
      break;
    if (((1 << v40) & 0x20000000200003CLL) == 0)
      goto LABEL_72;
LABEL_77:
    v39 = sub_22F115B7C(v39);
  }
  if ((*(_BYTE *)(v39 + 23) & 0x10) == 0)
    goto LABEL_77;
LABEL_84:
  v56 = v39;
LABEL_85:
  v47 = sub_22F115668(v56);
  v48 = sub_22F1167E8(v57);
  v49 = sub_22F34AE9C((_QWORD *)*a1, v36, v47 | ((unint64_t)v48 << 32), *v12, a3);
  if (v49 < 0x10)
    goto LABEL_14;
  v50 = v49;
  sub_22EEB5360((uint64_t)v58, v49, 4uLL, 4);
  *v51 = *v12;
  v52 = *(_QWORD *)(*a1 + 88);
  v53 = v59.i64[0] - v59.i64[1];
  v54 = v59.i32[0] - v59.i32[2];
  if (v59.i32[0] == v59.i32[2])
    v54 = sub_22F11598C(v50);
  v17 = (uint64_t *)sub_22E3CD3D4(v52 + 2032, v54 + 8, 3);
  *v17 = v50;
  memcpy(v17 + 1, (const void *)(*(_QWORD *)v58 + v59.i64[1]), v53);
  v16 = 1;
LABEL_15:
  if (*(_BYTE **)v58 != v60 && *(_QWORD *)v58)
    MEMORY[0x2348A0E84]();
  if ((v16 & 1) == 0 || !v17)
    return 0;
LABEL_20:
  if (v17 != (uint64_t *)v7)
  {
    v20 = *(_QWORD *)(a2 + 16);
    v21 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
    if ((v20 & 4) != 0)
      v21 = (_QWORD *)*v21;
    v22 = *(_QWORD *)(a2 + 40);
    if ((v22 & 7) != 0)
      v23 = 0;
    else
      v23 = v22 & 0xFFFFFFFFFFFFFFF8;
    v24 = sub_22EFBF080(*(_QWORD *)(*a1 + 88), (uint64_t)v21, *(_DWORD *)(a2 + 64), *(_DWORD *)(a2 + 24), v23, *v17, (uint64_t)v17, *(_BYTE *)(a2 + 96) & 7, 0);
    v18 = v24;
    v25 = *(_DWORD *)(a2 + 96);
    if ((v25 & 0x1000) != 0)
      v26 = 0;
    else
      v26 = v25 & 0xFE000;
    v27 = (v25 >> 20);
    if (v27 == 255)
    {
      v28 = a2;
      if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
      {
        v29 = *(_QWORD *)(a2 + 16);
        v30 = v29 & 0xFFFFFFFFFFFFFFF8;
        if ((v29 & 4) != 0)
          v30 = *(_QWORD *)v30;
        for (i = *(_WORD *)(v30 + 8) & 0x7F; i != 83; i = *(_WORD *)(v30 + 8) & 0x7F)
        {
          v32 = -40;
          if (i > 70)
          {
            if (i == 71)
            {
              v32 = -56;
              goto LABEL_54;
            }
            if (i == 81)
              goto LABEL_54;
          }
          else
          {
            if (i <= 0x18)
            {
              if (i == 16)
                goto LABEL_41;
              if (((1 << i) & 0x1066) != 0)
                goto LABEL_54;
              if (i == 24)
              {
LABEL_41:
                v32 = -48;
                goto LABEL_54;
              }
            }
            if (i == 70)
            {
              v32 = -64;
              goto LABEL_54;
            }
          }
          v33 = i - 52;
          if ((i - 33) >= 5)
            v34 = -48;
          else
            v34 = -64;
          if (v33 >= 6)
            v32 = v34;
          else
            v32 = -72;
LABEL_54:
          v35 = *(_QWORD *)(v30 + v32 + 16);
          v30 = v35 & 0xFFFFFFFFFFFFFFF8;
          if ((v35 & 4) != 0)
            v30 = *(_QWORD *)v30;
        }
        v28 = v30 - 40;
      }
      v27 = sub_22F36F2CC(*(_QWORD *)(v28 + 88), a2);
      v44 = (unsigned int *)(v18 + 96);
      v45 = *(_DWORD *)(v18 + 96) & 0xFFF01FFF | v26;
      *(_DWORD *)(v18 + 96) = v45;
      if (v27 >= 0xFF)
      {
        sub_22F3AC2B8(v18, v27);
LABEL_83:
        *(_QWORD *)v58 = a2;
        sub_22F25E108(a1 + 1, v58)[1] = v18;
        return v18;
      }
    }
    else
    {
      v44 = (unsigned int *)(v24 + 96);
      v45 = *(_DWORD *)(v24 + 96) & 0xFFF01FFF | v26;
    }
    *v44 = v45 & 0xF00FFFFF | (v27 << 20);
    goto LABEL_83;
  }
  return a2;
}

unint64_t sub_22EBF1460(_QWORD **a1, uint64_t a2, unint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7;
  unint64_t v10;
  unint64_t v12;
  unint64_t result;
  uint64_t v14;
  int *v15;
  uint64_t v16;

  v7 = a3;
  v10 = *(_QWORD *)(a3 + 32);
  if (v10 >= 0x10 && (v10 & 0xF) == 0)
    v16 = *(_QWORD *)((char *)&unk_22F483088
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v16 = 1;
  v12 = sub_22EBE9D18(a1, a2, v10, ((unint64_t)a4 + v16 + 3) & -v16, a5, a6);
  result = 0;
  if (v12 >= 0x10)
  {
    if (*((_DWORD *)*a1 + 2998) == -1 && v12 == *(_QWORD *)(v7 + 32)
      || (v7 = sub_22EE7E490(*a1, v12, (*(_DWORD *)(v7 + 16) >> 19) & 1, *a4), result = 0, v7 >= 0x10))
    {
      v14 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
      if (!v14 || (*(_DWORD *)(v14 + 16) & 0xFE) != 0x28)
        sub_22F10CF48(v14);
      sub_22EEB5360(a2, v7, 4uLL, 4);
      *v15 = *a4;
      return v7;
    }
  }
  return result;
}

uint64_t sub_22EBF1574(uint64_t *a1, unsigned __int8 **a2, unsigned int a3, int a4, uint64_t a5, _BYTE *a6)
{
  _BYTE *v6;
  int v8;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  int v31;
  uint64_t v32;
  void *v33[2];
  _QWORD v34[5];

  v34[4] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v6 = a6;
  v8 = a4;
  v11 = v34;
  v12 = a3;
  while (1)
  {
    v13 = *a2;
    if (v8)
      break;
    if (*v13 != 213)
    {
      v14 = sub_22EBDD628(a1, *a2);
      if ((v14 & 1) != 0)
        return 1;
      goto LABEL_20;
    }
LABEL_9:
    v15 = *((_QWORD *)v13 + 3);
    v16 = v11;
    v33[0] = v11;
    v33[1] = (void *)0x200000000;
    v17 = *a1;
    v31 = 7;
    v32 = v15;
    sub_22EE7377C(v17, (uint64_t)&v31, (uint64_t)v33);
    v18 = *((_DWORD *)v13 + 5);
    v19 = *a1;
    v20 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    v21 = sub_22EBDD628(a1, v15);
    if ((v21 & 1) != 0)
    {
      v24 = 0;
      v6 = a6;
    }
    else
    {
      LODWORD(v22) = v18 - 1;
      if (v18)
        v22 = v22;
      else
        v22 = 0;
      v23 = sub_22EE739C0(*a1, v21 & 0xFFFFFFFFFFFFFFFELL, *((unsigned int *)v13 + 4), v22 | ((unint64_t)(v18 != 0) << 32));
      v24 = 0;
      v6 = a6;
      if ((v23 & 1) == 0)
      {
        if (a6)
          *a6 = 1;
        v25 = *(unsigned int *)(a5 + 8);
        if (v25 >= *(unsigned int *)(a5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v25 = *(unsigned int *)(a5 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v25) = v23 & 0xFFFFFFFFFFFFFFFELL;
        ++*(_DWORD *)(a5 + 8);
        v24 = 1;
      }
    }
    *(_DWORD *)(v19 + 11992) = v20;
    v11 = v16;
    if (v33[0] != v16)
      free(v33[0]);
    v8 = a4;
    if ((v24 & 1) == 0)
      return 1;
LABEL_30:
    ++a2;
    if (!--v12)
      return 0;
  }
  if (!sub_22EFFF908(*a2))
  {
    v13 = *a2;
    if (**a2 != 213)
    {
      v14 = sub_22EBF1808(a1, *a2, 0);
      if ((v14 & 1) != 0)
        return 1;
LABEL_20:
      v26 = v14 & 0xFFFFFFFFFFFFFFFELL;
      if (v6 && *a2 != (unsigned __int8 *)v26)
        *v6 = 1;
      v27 = *(unsigned int *)(a5 + 8);
      if (v27 >= *(unsigned int *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = *(unsigned int *)(a5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v27) = v26;
      ++*(_DWORD *)(a5 + 8);
      goto LABEL_30;
    }
    goto LABEL_9;
  }
  if (v6)
  {
    result = 0;
    *v6 = 1;
    return result;
  }
  return 0;
}

uint64_t sub_22EBF1808(uint64_t *a1, unsigned __int8 *a2, char a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 **v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t *v41;
  unsigned int v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[9];

  v55[8] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v4 = a2;
  while (1)
  {
    v6 = *v4;
    if ((v6 & 0xFE) == 0xAC)
    {
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
      v6 = *v4;
    }
    if (v6 == 106)
    {
      v4 = *(unsigned __int8 **)(*((_QWORD *)v4 + 2) + 16);
      v6 = *v4;
    }
    if (v6 == 186)
    {
      v7 = *((_QWORD *)v4 + 2);
      v4 = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFF8);
      if ((v7 & 4) != 0)
        v4 = (unsigned __int8 *)*((_QWORD *)v4 + 5);
    }
    while (1)
    {
      v8 = *v4;
      if (v8 != 116)
        break;
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 3);
    }
    if (v8 == 153)
    {
      v4 = sub_22EFFB374(v4);
      v8 = *v4;
    }
    if (v8 != 132)
      break;
    v9 = (unsigned __int8 **)(v4 + 16);
LABEL_30:
    v4 = *v9;
    if (!*v9)
      return 0;
  }
  v10 = v8 & 0xFE;
  v11 = v8;
  if ((a3 & 1) == 0)
  {
    if (v10 != 118 || (*(_DWORD *)v4 & 0x100000) == 0)
      return sub_22EBDD628(a1, v4);
    v11 = *(_DWORD *)v4;
  }
  if (v8 == 179)
  {
    v20 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v15 = v20;
    v21 = 0;
    v22 = 0;
    goto LABEL_35;
  }
  if (v8 == 131)
  {
    sub_22F0D4E74((uint64_t)v4);
    v18 = HIDWORD(v17);
    v19 = v17;
    v20 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v15 = v20;
    v21 = v19;
    v22 = v18;
LABEL_35:
    sub_22F002D50(v20, v21, 0, 0, v22);
    return v15;
  }
  if (v10 != 118 || v11 == 119)
    return sub_22EBDD628(a1, v4);
  if ((*(_DWORD *)v4 & 0x200000) != 0)
  {
    v12 = *(_DWORD *)v4;
    v13 = v12 == 119;
    if (v12 == 119)
      v14 = v4;
    else
      v14 = 0;
    v9 = (unsigned __int8 **)(v14 + 48);
    if (!v13)
      v9 = (unsigned __int8 **)(v4 + 40);
    goto LABEL_30;
  }
  v23 = *a1;
  if ((*(_DWORD *)v4 & 0x100000) == 0
    || ((v25 = *(_DWORD *)(*(_QWORD *)(v23 + 3688) + 576 * *(unsigned int *)(v23 + 3696) - 576), v25 <= 3)
      ? (v26 = v25 == 2)
      : (v26 = 1),
        v26))
  {
    v24 = 1;
  }
  else
  {
    v24 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v23 + 72) + 1) & 2) != 0)
    {
      v53 = 0;
      v51 = 3;
      v52 = 1;
      v50 = *(unsigned int *)(v23 + 1704);
      sub_22EB4DDB8(v23 + 3688, &v52, (int *)&v50, (__int16 *)(v23 + 1693), (uint64_t *)&v53, &v51);
      v27 = *(unsigned int *)(v23 + 3696);
      v28 = v27 - 2;
      v29 = *(_QWORD *)(v23 + 3688);
      v30 = *(_DWORD *)(v29 + 576 * (v27 - 2));
      if (v30 == 5)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = *(_BYTE *)(v29 + 576 * v28 + 572);
        v31 = 1;
      }
      else if (v30 == 2)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = 1;
        v31 = *(_BYTE *)(v29 + 576 * v28 + 573) != 0;
      }
      else
      {
        v31 = 0;
        *(_BYTE *)(v29 + 576 * v27 - 4) = 0;
      }
      v32 = v29 + 576 * v27;
      *(_BYTE *)(v32 - 3) = v31;
      *(_WORD *)(v23 + 1693) = 0;
      if (*(_DWORD *)(v23 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v23 + 1776), (llvm::SmallPtrSetImplBase *)(v32 - 560));
        sub_22EAEAE08(v23 + 1840, (uint64_t *)(v32 - 496));
      }
      v24 = 0;
    }
  }
  v53 = v55;
  v54 = 0x800000000;
  LOBYTE(v50) = 0;
  v33 = *v4;
  v34 = v33 == 119;
  if (v33 == 119)
    v35 = v4;
  else
    v35 = 0;
  v36 = v35 + 48;
  if (v34)
    v37 = v36;
  else
    v37 = v4 + 40;
  v15 = 1;
  if ((sub_22EBF1574(a1, v37, *((unsigned int *)v4 + 8), 1, &v53, &v50) & 1) != 0)
    goto LABEL_64;
  if ((*(_DWORD *)v4 & 0x100000) == 0)
  {
    v15 = 0;
    v38 = *((_QWORD *)v4 + 3);
    v39 = HIDWORD(v38);
    if (HIDWORD(v38))
    {
      v40 = v38;
      if ((_DWORD)v38)
      {
        v41 = (uint64_t *)v53;
        v42 = v54;
        v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v54 + 24, 3);
        sub_22F002D50(v15, v40, v41, v42, v39);
      }
    }
    goto LABEL_64;
  }
  if (*(_DWORD *)v4 != 119)
  {
    v43 = *((_DWORD *)v4 + 1);
    goto LABEL_63;
  }
  v47 = **((_QWORD **)v4 + 5);
  v48 = v47;
  while (2)
  {
    while (2)
    {
      if ((v48 & 0xF) != 0)
        goto LABEL_79;
      v49 = *(unsigned __int8 *)(*(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v49 > 0x39)
      {
LABEL_74:
        if (sub_22F115668(v48))
          v47 = v48;
        v48 = sub_22F115B7C(v48);
        if (!v48)
          goto LABEL_83;
        continue;
      }
      break;
    }
    if (v49 == 24)
      break;
    if (v49 != 26)
    {
      if (((1 << v49) & 0x20000000200003CLL) != 0)
        goto LABEL_79;
      goto LABEL_74;
    }
    if ((*(_BYTE *)(v48 + 23) & 0x10) == 0)
    {
LABEL_79:
      v48 = sub_22F115B7C(v48);
      continue;
    }
    break;
  }
  v47 = v48;
LABEL_83:
  v43 = sub_22F115668(v47);
LABEL_63:
  v44 = (uint64_t *)v53;
  v45 = v54;
  sub_22F060B18(v4);
  v15 = sub_22EB353A0(*a1, v43, v44, v45, v46);
LABEL_64:
  if (v53 != v55)
    free(v53);
  if ((v24 & 1) == 0)
    sub_22EB48E64(v23);
  return v15;
}

unint64_t *sub_22EBF1D24(uint64_t *a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  unsigned __int32 v18;
  _QWORD *v19;
  int64x2_t v20;
  _QWORD v21[6];

  v2 = (unint64_t *)a2;
  v21[5] = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (*(_BYTE *)(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0) + 16) != 18)
    return sub_22EBE9AF0((_QWORD **)a1, a2);
  v5 = (uint64_t)(a2 + 1);
  for (i = *a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_13;
      v7 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v7 <= 0x39)
        break;
LABEL_8:
      if (sub_22F115668(i))
        v4 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_16;
    }
    if (v7 == 24)
      goto LABEL_15;
    if (v7 == 26)
      break;
    if (((1 << v7) & 0x20000000200003CLL) == 0)
      goto LABEL_8;
LABEL_13:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_13;
LABEL_15:
  v4 = i;
LABEL_16:
  sub_22F115668(v4);
  v9 = *v2;
  if (*v2 >= 0x10)
  {
    v19 = v21;
    v20 = vdupq_n_s64(0x20uLL);
    v21[4] = 0;
    v10 = sub_22F11598C(v9);
    if (v20.i64[0] < (unint64_t)v10)
      sub_22EEB52C0((uint64_t *)&v19, v10);
    v11 = v9 & 0xF;
    if ((v9 & 0xF) != 0)
      v12 = v9;
    else
      v12 = 0;
    if ((v9 & 0xF) != 0)
    {
      v9 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
      if ((v9 & 0xFFFFFFFFFFFFFFF0) != 0)
        v13 = *(_QWORD *)((char *)&unk_22F483088
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v13 = 1;
      v5 = (v5 + v13 - 1) & -v13;
    }
    v14 = sub_22EBF0454(a1, (uint64_t)&v19, v9, v5, 1);
    if (v14 < 0x10 || (v15 = v14, v11) && (v15 = sub_22E8C1750((_QWORD **)a1, v14, v12), v15 < 0x10))
    {
      v2 = 0;
    }
    else
    {
      v16 = *(_QWORD *)(*a1 + 88);
      v17 = v20.i64[0] - v20.i64[1];
      v18 = v20.i32[0] - v20.i32[2];
      if (v20.i32[0] == v20.i32[2])
        v18 = sub_22F11598C(v15);
      v2 = (unint64_t *)sub_22E3CD3D4(v16 + 2032, v18 + 8, 3);
      *v2 = v15;
      memcpy(v2 + 1, (char *)v19 + v20.i64[1], v17);
    }
    if (v19 != v21)
    {
      if (v19)
        MEMORY[0x2348A0E84]();
    }
  }
  return v2;
}

__n128 sub_22EBF2014(__n128 *a1, uint64_t *a2, __n128 *a3)
{
  unint64_t v4;
  int v7;
  char v8;
  unsigned int v9;
  int v10;
  __n128 result;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v4 = a3->n128_u64[0];
  if (!a3->n128_u64[0])
    goto LABEL_26;
  v7 = v4 & 7;
  v8 = v4 & 7;
  if (v7 == 7)
  {
    v9 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v9 >= 3)
      LOBYTE(v9) = 3;
    v8 = v9 | 8;
  }
  v10 = 1 << v8;
  if ((v10 & 0xE47) != 0)
  {
    result = *a3;
    *a1 = *a3;
    a1[1].n128_u64[0] = a3[1].n128_u64[0];
    return result;
  }
  if ((v10 & 0x38) == 0)
  {
    if ((~(_BYTE)v4 & 7) != 0)
      goto LABEL_18;
    v18 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v18 >= 3)
      v18 = 3;
    if (v18)
LABEL_18:
      v19 = 0;
    else
      v19 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 16);
    v23 = v19;
    v24 = 0;
    if (sub_22E793870(a2 + 1, &v23, &v24) && v24 != (_QWORD *)(a2[1] + 16 * *((unsigned int *)a2 + 6)))
      v19 = v24[1];
    if (v19)
    {
      *a1 = *a3;
      a1[1].n128_u64[0] = a3[1].n128_u64[0];
      a1->n128_u64[0] = sub_22F3AE65C((_QWORD *)(*(_QWORD *)(*a2 + 88) + 15224), v19);
      return result;
    }
    goto LABEL_26;
  }
  if ((v7 - 3) > 2)
  {
    v17 = 0;
    goto LABEL_25;
  }
  v12 = (uint64_t *)a3[1].n128_u64[0];
  if (!v12)
  {
    v17 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_25:
    v20 = sub_22EBEE6F4((uint64_t)a2, v17);
    if (v20 > 0xF)
    {
      v15 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8) | v20 & 7;
      v16 = *(_QWORD *)(*a2 + 88);
      if (v7 == 7)
      {
        v14 = 0;
        v21 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
        if (v21 >= 3)
          v21 = 3;
        v7 = v21 | 8;
      }
      else
      {
        v14 = 0;
      }
      goto LABEL_32;
    }
LABEL_26:
    a1->n128_u64[0] = 0;
    a1->n128_u64[1] = 0;
    a1[1].n128_u64[0] = 0;
    return result;
  }
  v13 = sub_22EBE9AF0((_QWORD **)a2, v12);
  if (!v13)
    goto LABEL_26;
  v14 = v13;
  v15 = *v13 & 7 | *(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFFF0) + 8);
  v16 = *(_QWORD *)(*a2 + 88);
LABEL_32:
  v22 = sub_22EFC6D44((_QWORD *)(v16 + 15224), v7, v15);
  result = *a3;
  *a1 = *a3;
  a1->n128_u64[0] = v22;
  a1[1].n128_u64[0] = (unint64_t)v14;
  return result;
}

uint64_t sub_22EBF221C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
    __asm { BR              X9 }
  return 0;
}

unint64_t sub_22EBF24BC(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;

  v9 = sub_22EB33018(*(_QWORD *)a1, 0, a2, a3, a4, a5, a6, a7);
  v10 = v9;
  v11 = (*a2 + 45);
  if (((*a2 + 45) & 0xFE) != 0)
    v12 = 0;
  else
    v12 = (uint64_t)a2;
  v18 = v12;
  if (v11 <= 1 && v9 >= 2)
  {
    v14 = v9 & 0xFFFFFFFFFFFFFFFELL;
    v15 = *(unsigned __int8 *)(v9 & 0xFFFFFFFFFFFFFFFELL);
    if (v15 == 116)
    {
      v14 = *(_QWORD *)(v14 + 24);
      LOBYTE(v15) = *(_BYTE *)v14;
    }
    if ((v15 + 113) >= 0xFBu)
    {
      v17 = *(_QWORD *)(v14 + *(unsigned __int8 *)(v14 + 3));
      sub_22F2A150C((_DWORD *)(a1 + 256), &v18)[1] = v17;
    }
  }
  return v10;
}

uint64_t sub_22EBF2584(uint64_t *a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned __int32 v14;
  unsigned __int32 v15;
  uint64_t v16;
  __n128 v18;
  void *v19[2];
  _DWORD v20[66];
  uint64_t v21;

  v6 = a2;
  v21 = *MEMORY[0x24BDAC8D0];
  v8 = sub_22EBEE748(a1, *(_QWORD *)(a2 + 16), *(void **)(a2 + 24), 0, 0);
  if (!v8)
    return 1;
  v10 = v8;
  v11 = v9;
  v12 = (*(_BYTE *)(v6 + 2) & 4) != 0 ? *(_DWORD *)(v6 + 64) : 0;
  sub_22EBF2014(&v18, a1, (__n128 *)(v6 + 32));
  if (!v18.n128_u64[0])
    return 1;
  v13 = *(unsigned int *)v6;
  if ((v13 & 0x40000) != 0 && (v14 = *(_DWORD *)(v6 + 56)) != 0)
  {
    v15 = *(_DWORD *)(v6 + 60);
    v19[0] = v20;
    v19[1] = (void *)0x800000000;
    v20[64] = v14;
    v20[65] = v15;
    v16 = v6 + 56 + 16 * ((v13 >> 18) & 1);
    if ((sub_22EBF221C((uint64_t)a1, v16, v16 + 32 * *(unsigned int *)(v6 + 68)) & 1) != 0)
      v6 = 1;
    else
      v6 = sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v18, (uint64_t)v19, a3, a4);
    if (v19[0] != v20)
      free(v19[0]);
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1
         || v10 != *(_QWORD *)(v6 + 16)
         || v11 != *(_QWORD *)(v6 + 24)
         || v18.n128_u64[0] != *(_QWORD *)(v6 + 32))
  {
    return sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v18, 0, a3, a4);
  }
  return v6;
}

uint64_t sub_22EBF2758(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unsigned __int8 *v6;
  __n128 v7;
  uint64_t v8;

  v2 = a2;
  v4 = sub_22EBE9AF0(a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  sub_22EBDD628((uint64_t)a1, (uint64_t)v6, v7);
  if ((v8 & 1) != 0)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != *(unint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v8 & 0xFFFFFFFFFFFFFFFELL))
  {
    __asm { BR              X12 }
  }
  return v2;
}

uint64_t sub_22EBF281C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 131, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22EBF2828@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 133, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22EBF2834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 145, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22EBF2840@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 146, v6, a3, a4, v5 | (a5 << 32));
}

void sub_22EBF284C()
{
  JUMPOUT(0x22EBF2854);
}

uint64_t sub_22EBF2868(uint64_t *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 **v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 *v16;
  unsigned int v17;
  char v18;
  __n128 *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _BYTE *v31[9];

  v31[8] = *(_BYTE **)MEMORY[0x24BDAC8D0];
  v6 = *a1;
  sub_22E905168(*a1, 0);
  v12 = (__n128 **)(a2 + 16);
  v13 = *(unsigned int *)a2;
  v14 = a2 + 16 + 8 * (v13 >> 8);
  v15 = 8 * (v13 >> 8);
  while (v15)
  {
    v16 = *(__n128 **)(a2 + 8 + v15);
    v15 -= 8;
    if (v16->n128_u8[0] != 19)
    {
      v30 = 0;
      if (v13 < 0x100)
      {
        v17 = 0;
        v18 = 0;
        goto LABEL_28;
      }
      v29 = v6;
      v28 = a2;
      goto LABEL_10;
    }
  }
  if (v13 <= 0xFF)
  {
    v17 = 0;
    v18 = 0;
    goto LABEL_28;
  }
  v28 = a2;
  v29 = v6;
  v16 = v12[(*(_DWORD *)a2 >> 8) - 1];
  v30 = 0;
LABEL_10:
  LOBYTE(a2) = 0;
  v18 = 0;
  do
  {
    while (1)
    {
      v19 = *v12;
      v20 = (a3 & (*v12 == v16)) != 0 ? 2 : 0;
      v21 = sub_22EBF2AD0(a1, *v12, v20, v7, v8, v9, v10, v11);
      if ((v21 & 1) == 0)
        break;
      ++v12;
      a2 = 1;
      if (v19->n128_u8[0] == 12 || v12 == (__n128 **)v14)
      {
        v6 = v29;
        goto LABEL_31;
      }
    }
    v22 = (_BYTE *)(v21 & 0xFFFFFFFFFFFFFFFELL);
    v23 = v19 != (__n128 *)(v21 & 0xFFFFFFFFFFFFFFFELL);
    v24 = v30;
    if (v30 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v24 = v30;
    }
    v31[v24] = v22;
    v18 |= v23;
    v17 = ++v30;
    ++v12;
  }
  while (v12 != (__n128 **)v14);
  v6 = v29;
  if ((a2 & 1) != 0)
  {
    a2 = 1;
    goto LABEL_31;
  }
  a2 = v28;
LABEL_28:
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v18 & 1) != 0)
    a2 = (uint64_t)sub_22ED2C004((_QWORD *)*a1, *(_DWORD *)(a2 + 4), *(unsigned int *)(a2 + 8), v31, v17);
LABEL_31:
  v26 = *(_QWORD *)(*(_QWORD *)(v6 + 1896) + 8 * *(unsigned int *)(v6 + 1904) - 8);
  --*(_QWORD *)(v26 + 360);
  return a2;
}

uint64_t sub_22EBF2AD0(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t result;

  if (!a2)
    return (uint64_t)a2;
  v8 = a3;
  switch(a2->n128_u8[0])
  {
    case 1u:
      result = sub_22EBF31CC(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      break;
    case 2u:
      result = sub_22EBF36FC(a1, (uint64_t)a2);
      break;
    case 3u:
    case 9u:
    case 0x13u:
    case 0x60u:
      result = nullsub_910(a2);
      break;
    case 4u:
      result = sub_22EBF38F8((_QWORD **)a1, (uint64_t)a2);
      break;
    case 5u:
      result = sub_22EBF3A20(a1, (uint64_t)a2);
      break;
    case 6u:
      result = sub_22EBF3CE4(a1, (uint64_t)a2);
      break;
    case 7u:
      result = sub_22EBF3E6C(a1, (uint64_t)a2);
      break;
    case 8u:
      result = sub_22EBF4084((uint64_t)a1, (uint64_t)a2);
      break;
    case 0xAu:
      result = sub_22EBF408C(a1, (uint64_t)a2);
      break;
    case 0xBu:
      result = sub_22EBF40E0(a1, (uint64_t)a2);
      break;
    case 0xCu:
      result = sub_22EBF43C8(a1, (uint64_t)a2);
      break;
    case 0xDu:
      result = sub_22EBF4594(a1, (uint64_t)a2);
      break;
    case 0xEu:
      result = sub_22EBF463C(a1, (uint64_t)a2);
      break;
    case 0xFu:
      result = sub_22EB77BB4((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x10u:
      result = sub_22EBF4810((uint64_t)a1, (unsigned __int16 *)a2);
      break;
    case 0x11u:
      result = sub_22EBF4B38(a1, (uint64_t)a2);
      break;
    case 0x12u:
      result = sub_22EBF4BB0(a1, (uint64_t)a2);
      break;
    case 0x14u:
      result = sub_22EBF4DBC((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x15u:
      result = sub_22EBF4DC8(a1, a2);
      break;
    case 0x16u:
      result = sub_22EBF4E34(a1, a2);
      break;
    case 0x17u:
      result = sub_22EBF4EA0(a1, a2);
      break;
    case 0x18u:
      result = sub_22EBF4F0C(a1, a2);
      break;
    case 0x19u:
      result = sub_22EBF4F78(a1, a2);
      break;
    case 0x1Au:
      result = sub_22EBF4FE8(a1, a2);
      break;
    case 0x1Bu:
      result = sub_22EBF5054(a1, a2);
      break;
    case 0x1Cu:
      result = sub_22EBF50C0(a1, a2);
      break;
    case 0x1Du:
      result = sub_22EBF512C(a1, a2);
      break;
    case 0x1Eu:
      result = sub_22EBF5198(a1, a2);
      break;
    case 0x1Fu:
      result = sub_22EBF5204(a1, a2);
      break;
    case 0x20u:
      result = sub_22EBF5270(a1, a2);
      break;
    case 0x21u:
      result = sub_22EBF52DC(a1, a2);
      break;
    case 0x22u:
      result = sub_22EBF5348(a1, a2);
      break;
    case 0x23u:
      result = sub_22EBF53B4(a1, a2);
      break;
    case 0x24u:
      result = sub_22EBF5420(a1, a2);
      break;
    case 0x25u:
      result = sub_22EBF548C(a1, a2);
      break;
    case 0x26u:
      result = sub_22EBF54F8(a1, a2);
      break;
    case 0x27u:
      result = sub_22EBF5564(a1, a2);
      break;
    case 0x28u:
      result = sub_22EBF55D0(a1, a2);
      break;
    case 0x29u:
      result = sub_22EBF563C(a1, a2);
      break;
    case 0x2Au:
      result = sub_22EBF56A8(a1, a2);
      break;
    case 0x2Bu:
      result = sub_22EBF5714(a1, a2);
      break;
    case 0x2Cu:
      result = sub_22EBF5780(a1, a2);
      break;
    case 0x2Du:
      result = sub_22EBF57EC(a1, a2);
      break;
    case 0x2Eu:
      result = sub_22EBF5858(a1, a2);
      break;
    case 0x2Fu:
      result = sub_22EBF58C4(a1, a2);
      break;
    case 0x30u:
      result = sub_22EBF5930(a1, a2);
      break;
    case 0x31u:
      result = sub_22EBF599C(a1, a2);
      break;
    case 0x32u:
      result = sub_22EBF5A08(a1, a2);
      break;
    case 0x33u:
      result = sub_22EBF5A74(a1, a2);
      break;
    case 0x34u:
      result = sub_22EBF5AE0(a1, a2);
      break;
    case 0x35u:
      result = sub_22EBF5B4C(a1, a2);
      break;
    case 0x36u:
      result = sub_22EBF5BB8(a1, a2);
      break;
    case 0x37u:
      result = sub_22EBF5C24(a1, a2);
      break;
    case 0x38u:
      result = sub_22EBF5C90(a1, a2);
      break;
    case 0x39u:
      result = sub_22EBF5CFC(a1, a2);
      break;
    case 0x3Au:
      result = sub_22EBF5D68(a1, a2);
      break;
    case 0x3Bu:
      result = sub_22EBF5DD4(a1, a2);
      break;
    case 0x3Cu:
    case 0x3Du:
      result = sub_22EBF5E40(a1, a2);
      break;
    case 0x3Eu:
      result = sub_22EBF5EAC(a1, a2);
      break;
    case 0x3Fu:
      result = sub_22EBF5F18(a1, a2);
      break;
    case 0x40u:
      sub_22EB79398((_QWORD *)*a1, (uint64_t)a2);
      return 1;
    case 0x41u:
      result = sub_22EBF5F84(a1, a2);
      break;
    case 0x42u:
      result = sub_22EBF5FF0(a1, a2);
      break;
    case 0x43u:
      result = sub_22EBF605C(a1, a2);
      break;
    case 0x44u:
      result = sub_22EBF60C8(a1, a2);
      break;
    case 0x45u:
      result = sub_22EBF6134(a1, a2);
      break;
    case 0x46u:
      result = sub_22EBF61A0(a1, a2);
      break;
    case 0x47u:
      result = sub_22EBF620C(a1, a2);
      break;
    case 0x48u:
      result = sub_22EBF6278(a1, a2);
      break;
    case 0x49u:
      result = sub_22EBF62E4(a1, a2);
      break;
    case 0x4Au:
      result = sub_22EBF6350(a1, a2);
      break;
    case 0x4Bu:
      result = sub_22EBF63BC(a1, a2);
      break;
    case 0x4Cu:
      result = sub_22EBF6428(a1, a2);
      break;
    case 0x4Du:
      result = sub_22EBF6494(a1, a2);
      break;
    case 0x4Eu:
      result = sub_22EBF6500(a1, a2);
      break;
    case 0x4Fu:
      result = sub_22EBF656C(a1, a2);
      break;
    case 0x50u:
      result = sub_22EBF65D8(a1, a2);
      break;
    case 0x51u:
      result = sub_22EBF6644(a1, a2);
      break;
    case 0x52u:
      result = sub_22EBF66B0(a1, a2);
      break;
    case 0x53u:
      result = sub_22EBF671C(a1, a2);
      break;
    case 0x54u:
      result = sub_22EBF6788(a1, a2);
      break;
    case 0x55u:
      result = sub_22EBF67F4(a1, a2);
      break;
    case 0x56u:
      result = sub_22EBF6860((_QWORD **)a1, (uint64_t)a2);
      break;
    case 0x57u:
      result = sub_22EBF694C(a1, (uint64_t)a2);
      break;
    case 0x58u:
      result = sub_22EBF69B8((uint64_t **)a1, (uint64_t)a2);
      break;
    case 0x59u:
      result = sub_22EBF6A6C((_QWORD **)a1, (uint64_t)a2);
      break;
    case 0x5Au:
      result = sub_22EBF6AE4(a1, (uint64_t)a2);
      break;
    case 0x5Bu:
      result = sub_22EBF6D0C(a1, (uint64_t)a2);
      break;
    case 0x5Cu:
      result = sub_22EBF6D78(a1, (uint64_t)a2);
      break;
    case 0x5Du:
      result = sub_22EBF6E6C(a1, (uint64_t)a2);
      break;
    case 0x5Eu:
      result = sub_22EBF6EBC((_QWORD **)a1, (uint64_t)a2);
      break;
    case 0x5Fu:
      result = sub_22EBF6F28((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x61u:
      result = sub_22EBF6F70((_QWORD **)a1, (uint64_t)a2);
      break;
    case 0x62u:
      result = sub_22EBF7024(a1, (unsigned __int16 *)a2);
      break;
    case 0x63u:
      result = sub_22EBF7234(a1, (uint64_t)a2);
      break;
    case 0x64u:
      result = sub_22EBF7284(a1, (unsigned __int16 *)a2);
      break;
    case 0x65u:
      result = sub_22EBF73AC(a1, (unsigned int *)a2, a3);
      break;
    case 0x66u:
    case 0x67u:
    case 0x68u:
    case 0x69u:
    case 0x6Au:
    case 0x6Bu:
    case 0x6Cu:
    case 0x6Du:
    case 0x6Eu:
    case 0x6Fu:
    case 0x70u:
    case 0x71u:
    case 0x72u:
    case 0x73u:
    case 0x74u:
    case 0x75u:
    case 0x76u:
    case 0x77u:
    case 0x78u:
    case 0x79u:
    case 0x7Au:
    case 0x7Bu:
    case 0x7Cu:
    case 0x7Du:
    case 0x7Eu:
    case 0x7Fu:
    case 0x80u:
    case 0x81u:
    case 0x82u:
    case 0x83u:
    case 0x84u:
    case 0x85u:
    case 0x86u:
    case 0x87u:
    case 0x88u:
    case 0x89u:
    case 0x8Au:
    case 0x8Bu:
    case 0x8Cu:
    case 0x8Du:
    case 0x8Eu:
    case 0x8Fu:
    case 0x90u:
    case 0x91u:
    case 0x92u:
    case 0x93u:
    case 0x94u:
    case 0x95u:
    case 0x96u:
    case 0x97u:
    case 0x98u:
    case 0x99u:
    case 0x9Au:
    case 0x9Bu:
    case 0x9Cu:
    case 0x9Du:
    case 0x9Eu:
    case 0x9Fu:
    case 0xA0u:
    case 0xA1u:
    case 0xA2u:
    case 0xA3u:
    case 0xA4u:
    case 0xA5u:
    case 0xA6u:
    case 0xA7u:
    case 0xA8u:
    case 0xA9u:
    case 0xAAu:
    case 0xABu:
    case 0xACu:
    case 0xADu:
    case 0xAEu:
    case 0xAFu:
    case 0xB0u:
    case 0xB1u:
    case 0xB2u:
    case 0xB3u:
    case 0xB4u:
    case 0xB5u:
    case 0xB6u:
    case 0xB7u:
    case 0xB8u:
    case 0xB9u:
    case 0xBAu:
    case 0xBBu:
    case 0xBCu:
    case 0xBDu:
    case 0xBEu:
    case 0xBFu:
    case 0xC0u:
    case 0xC1u:
    case 0xC2u:
    case 0xC3u:
    case 0xC4u:
    case 0xC5u:
    case 0xC6u:
    case 0xC7u:
    case 0xC8u:
    case 0xC9u:
    case 0xCAu:
    case 0xCBu:
    case 0xCCu:
    case 0xCDu:
    case 0xCEu:
    case 0xCFu:
    case 0xD0u:
    case 0xD1u:
    case 0xD2u:
    case 0xD3u:
    case 0xD4u:
    case 0xD5u:
    case 0xD6u:
    case 0xD7u:
    case 0xD8u:
    case 0xD9u:
    case 0xDAu:
    case 0xDBu:
    case 0xDCu:
    case 0xDDu:
    case 0xDEu:
    case 0xDFu:
    case 0xE0u:
    case 0xE1u:
    case 0xE2u:
    case 0xE3u:
    case 0xE4u:
    case 0xE5u:
    case 0xE6u:
    case 0xE7u:
    case 0xE8u:
    case 0xE9u:
    case 0xEAu:
      v10 = sub_22EBDD628(a1, a2);
      if (v8 == 2)
        v10 = sub_22EB49994(*a1, v10);
      result = sub_22ED2B1FC(*a1, v10, v8 == 0);
      break;
    case 0xEBu:
      result = sub_22EBF7504((uint64_t)a1, (uint64_t)a2, a3);
      break;
    case 0xECu:
      result = sub_22EBF75B0((uint64_t)a1, (unsigned __int16 *)a2);
      break;
    default:
      return (uint64_t)a2;
  }
  return result;
}

uint64_t sub_22EBF31CC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v47;
  unsigned int v48;
  _QWORD v49[8];
  void *v50;
  uint64_t v51;
  _BYTE v52[32];
  void *v53;
  uint64_t v54;
  _BYTE v55[64];
  char *v56;
  uint64_t v57;
  _QWORD v58[10];

  v58[8] = *MEMORY[0x24BDAC8D0];
  v56 = (char *)v58;
  v57 = 0x800000000;
  v53 = v55;
  v54 = 0x800000000;
  v50 = v52;
  v51 = 0x400000000;
  v48 = 0;
  v10 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 8 * v10;
    v14 = 1;
    while (1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + v11);
      v16 = v51;
      if (v51 >= (unint64_t)HIDWORD(v51))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v51;
      }
      *((_QWORD *)v50 + v16) = v15;
      LODWORD(v51) = v51 + 1;
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + v11);
      v18 = v57;
      if (v57 >= (unint64_t)HIDWORD(v57))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v57;
      }
      *(_QWORD *)&v56[8 * v18] = v17;
      LODWORD(v57) = v57 + 1;
      v19 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + v11);
      v20 = sub_22EBDD628(a1, v19);
      if ((v20 & 1) != 0)
        break;
      v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v22 = v19 != (v20 & 0xFFFFFFFFFFFFFFFELL);
      v10 = v54;
      if (v54 >= (unint64_t)HIDWORD(v54))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v54;
      }
      *((_QWORD *)v53 + v10) = v21;
      v12 |= v22;
      LODWORD(v10) = v54 + 1;
      LODWORD(v54) = v54 + 1;
      v11 += 8;
      if (v13 == v11)
        goto LABEL_13;
    }
  }
  else
  {
    v12 = 0;
LABEL_13:
    v23 = *(_DWORD *)(a2 + 20);
    if (v23)
    {
      v24 = 0;
      v14 = 1;
      while (1)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v26 = v51;
        if (v51 >= (unint64_t)HIDWORD(v51))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v26 = v51;
        }
        *((_QWORD *)v50 + v26) = v25;
        LODWORD(v51) = v51 + 1;
        v27 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v28 = v57;
        if (v57 >= (unint64_t)HIDWORD(v57))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v28 = v57;
        }
        *(_QWORD *)&v56[8 * v28] = v27;
        LODWORD(v57) = v57 + 1;
        v29 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v30 = sub_22EBDD628(a1, v29);
        if ((v30 & 1) != 0)
          break;
        v31 = v30 & 0xFFFFFFFFFFFFFFFELL;
        v32 = v29 != (v30 & 0xFFFFFFFFFFFFFFFELL);
        v10 = v54;
        if (v54 >= (unint64_t)HIDWORD(v54))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v10 = v54;
        }
        *((_QWORD *)v53 + v10) = v31;
        v12 |= v32;
        LODWORD(v10) = v54 + 1;
        LODWORD(v54) = v54 + 1;
        if (v23 == ++v24)
          goto LABEL_23;
      }
    }
    else
    {
LABEL_23:
      v33 = *(_DWORD *)(a2 + 80);
      if (v33)
      {
        v34 = 0;
        v14 = 1;
        while (1)
        {
          v35 = *(_QWORD *)(*(_QWORD *)(a2 + 72)
                          + 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20)));
          v36 = v51;
          if (v51 >= (unint64_t)HIDWORD(v51))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v36 = v51;
          }
          *((_QWORD *)v50 + v36) = v35;
          LODWORD(v51) = v51 + 1;
          v37 = sub_22EBDD628(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32)+ 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20))));
          if ((v37 & 1) != 0)
            break;
          v38 = v37 & 0xFFFFFFFFFFFFFFFELL;
          v39 = *(_QWORD *)(*(_QWORD *)(a2 + 32)
                          + 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20))) != (v37 & 0xFFFFFFFFFFFFFFFELL);
          v10 = v54;
          if (v54 >= (unint64_t)HIDWORD(v54))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v10 = v54;
          }
          *((_QWORD *)v53 + v10) = v38;
          v12 |= v39;
          LODWORD(v10) = v54 + 1;
          LODWORD(v54) = v54 + 1;
          if (v33 == ++v34)
            goto LABEL_31;
        }
      }
      else
      {
LABEL_31:
        v40 = *a1;
        if (*(_DWORD *)(*a1 + 11992) != -1 || (v12 & 1) != 0)
        {
          v41 = *(unsigned int *)(a2 + 24);
          v42 = 0;
          if ((_DWORD)v41)
          {
            v43 = 0;
            v44 = 8 * v41;
            do
            {
              v45 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + v43);
              if (v42 >= 8)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v42 = v48;
              }
              v49[v42] = v45;
              v42 = ++v48;
              v43 += 8;
            }
            while (v44 != v43);
            LODWORD(v10) = v54;
            v40 = *a1;
          }
          v14 = sub_22ED4E804(v40, *(_DWORD *)(a2 + 8), *(_BYTE *)(a2 + 12), *(_BYTE *)(a2 + 13), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v50, a8, v56, v57, (uint64_t *)v53, v10, *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL, (char *)v49, v42, 0, *(_DWORD *)(a2 + 80), v47, *(_DWORD *)(a2 + 40));
        }
        else
        {
          v14 = a2;
        }
      }
    }
  }
  if (v50 != v52)
    free(v50);
  if (v53 != v55)
    free(v53);
  if (v56 != (char *)v58)
    free(v56);
  return v14;
}

uint64_t sub_22EBF36FC(uint64_t *a1, uint64_t a2)
{
  const void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v17;
  const void *v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22[10];

  v22[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(const void **)(a2 + 72);
  v5 = *(unsigned int *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20));
  v21 = 0;
  if (v7 < 9)
  {
    if (!(_DWORD)v7)
    {
      v15 = 0;
      v17 = *a1;
      goto LABEL_19;
    }
    v19 = *(const void **)(a2 + 72);
    v20 = *(unsigned int *)(a2 + 64);
  }
  else
  {
    v19 = *(const void **)(a2 + 72);
    v20 = *(unsigned int *)(a2 + 64);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v8 = 0;
  LOBYTE(v9) = 0;
  v10 = 0;
  do
  {
    while (1)
    {
      v11 = sub_22EBDD628(a1, *(_QWORD *)(v6 + 8 * v8));
      if (v11 >= 2)
        break;
      v9 = 1;
      if (v7 - 1 == v8++)
        return v9;
    }
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    v13 = *(_QWORD *)(v6 + 8 * v8) != (v11 & 0xFFFFFFFFFFFFFFFELL);
    v14 = v21;
    if (v21 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = v21;
    }
    v22[v14] = v12;
    v10 |= v13;
    v15 = ++v21;
    ++v8;
  }
  while (v7 != v8);
  if ((v9 & 1) == 0)
  {
    v17 = *a1;
    v4 = v19;
    v5 = v20;
    if ((v10 & 1) != 0)
      return sub_22ED51D60(v17, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 40), v4, v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a2 + 80), (*(_DWORD *)(a2 + 20) + *(_DWORD *)(a2 + 16)), *(_QWORD *)(a2 + 88), *(unsigned int *)(a2 + 24), v22, v15, *(_DWORD *)(a2 + 44));
LABEL_19:
    if (*(_DWORD *)(v17 + 11992) == -1)
      return a2;
    return sub_22ED51D60(v17, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 40), v4, v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a2 + 80), (*(_DWORD *)(a2 + 20) + *(_DWORD *)(a2 + 16)), *(_QWORD *)(a2 + 88), *(unsigned int *)(a2 + 24), v22, v15, *(_DWORD *)(a2 + 44));
  }
  return 1;
}

uint64_t sub_22EBF38F8(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  char *v12;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 56);
    v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 4) != 0)
      v6 = (uint64_t *)v6[4];
    if (!sub_22EBE9AF0(a1, v6))
      return 1;
    v7 = sub_22EACE428();
    if (!v7)
      return 1;
    v4 = v7;
    sub_22EFCCFA0((*a1)[27], v7);
    if ((*(_BYTE *)(v4 + 28) & 0x80) != 0)
      return 1;
  }
  v8 = sub_22EBF2AD0(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v8 & 1) != 0)
    return 1;
  v9 = *a1;
  v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (v4 || *((_DWORD *)v9 + 2998) != -1 || *(_QWORD *)(v2 + 24) != v10)
  {
    v11 = *(_DWORD *)(v2 + 8);
    v2 = sub_22E3CD3D4(v9[11] + 2032, 32, 3);
    *(_BYTE *)v2 = 4;
    if (byte_255E04EB3)
    {
      v12 = sub_22F0D3748(4);
      ++*((_DWORD *)v12 + 2);
    }
    *(_DWORD *)(v2 + 8) = v11;
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v10;
  }
  return v2;
}

uint64_t sub_22EBF3A20(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v23;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EBF2AD0(a1, v4, 0);
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v5 = 0;
  }
  v6 = sub_22EBF2AD0(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v6 & 1) != 0)
    return 1;
  v7 = sub_22EBF2AD0(a1, *(_QWORD *)(v2 + 32), 0);
  if ((v7 & 1) != 0)
    return 1;
  v8 = sub_22EBF2AD0(a1, *(_QWORD *)(v2 + 40), 0);
  if ((v8 & 1) != 0)
    return 1;
  v9 = sub_22EBDD628(a1, *(_QWORD *)(v2 + 48));
  v10 = v9;
  if ((v9 & 1) != 0)
    return 1;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v10 = sub_22EB52F30(*a1, *(_DWORD *)(v2 + 84), (unsigned __int8 *)(v9 & 0xFFFFFFFFFFFFFFFELL), 0);
  if ((v10 & 1) != 0)
    return 1;
  if ((v10 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v10 = (uint64_t)sub_22EBCCCF0(*a1, (int *)(v10 & 0xFFFFFFFFFFFFFFFELL));
  v11 = sub_22EBDD628(a1, *(_QWORD *)(v2 + 56));
  v12 = v11;
  if ((v11 & 1) != 0)
    return 1;
  if ((v11 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v12 = (unint64_t)sub_22EBCCCF0(*a1, (int *)(v11 & 0xFFFFFFFFFFFFFFFELL));
  v13 = sub_22EBF2AD0(a1, *(_QWORD *)(v2 + 64), 0);
  v14 = v13;
  if ((v13 & 1) != 0)
    return 1;
  v15 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v23 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) == -1
    && *(_QWORD *)(v2 + 16) == v15
    && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 32) == (v7 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 40) == (v8 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 48) == (v10 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 56) == (v12 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 64) == (v13 & 0xFFFFFFFFFFFFFFFELL))
  {
    v17 = v2;
  }
  else
  {
    v16 = v13 & 0xFFFFFFFFFFFFFFFELL;
    v17 = sub_22E8C6118(a1, *(_DWORD *)(v2 + 8), *(_DWORD *)(v2 + 80), v15, *(_DWORD *)(v2 + 84), v6 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL, v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, v12 & 0xFFFFFFFFFFFFFFFELL, v13 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 88));
    if ((v17 & 1) != 0 && *(_QWORD *)(v2 + 64) != v16)
    {
      sub_22EA2BABC(*a1, *(_QWORD *)(v16 + 8));
      return 1;
    }
  }
  v18 = sub_22EBF2AD0(a1, *(_QWORD *)(v2 + 72), 0);
  if ((v18 & 1) != 0)
    return 1;
  v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
  v20 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if ((v17 & 0xFFFFFFFFFFFFFFFELL) == v2 && *(_QWORD *)(v2 + 72) != v19)
  {
    v21 = sub_22E8C6118(a1, *(_DWORD *)(v2 + 8), *(_DWORD *)(v2 + 80), v23, *(_DWORD *)(v2 + 84), v6 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL, v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, v12 & 0xFFFFFFFFFFFFFFFELL, v14 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 88));
    if ((v21 & 1) != 0)
      return 1;
    v20 = v21 & 0xFFFFFFFFFFFFFFFELL;
  }
  if (v20 != v2)
    return sub_22ED33C64(*a1, v20, v19);
  return v2;
}

uint64_t sub_22EBF3CE4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unsigned int v16;
  _QWORD v17[9];

  v17[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EBF4084((uint64_t)a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v16 = 0;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (uint64_t *)(a2 + 24);
    v8 = 1;
    while (1)
    {
      v9 = sub_22EBF38F8((_QWORD **)a1, *v7);
      if ((v9 & 1) != 0)
        break;
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      v6 = v6 || *v7 != v10;
      v11 = v16;
      if (v16 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v16;
      }
      v17[v11] = v10;
      v12 = ++v16;
      ++v7;
      if (!--v5)
        goto LABEL_14;
    }
  }
  else
  {
    v12 = 0;
    v6 = 0;
LABEL_14:
    v13 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1 && (*(_QWORD *)(a2 + 16) != v13 ? (v14 = 1) : (v14 = v6), (v14 & 1) == 0))
      return a2;
    else
      return sub_22ED36EF4(*a1, *(_DWORD *)(a2 + 8), v13, v17, v12);
  }
  return v8;
}

uint64_t sub_22EBF3E6C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v13;
  uint64_t v14;
  const char *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  const char *v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[14];

  v34[12] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  sub_22F0D5A50(*(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 8)));
  v6 = v5;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFF8) + 72);
  v9 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFF8) + 76);
  v32 = v34;
  v33 = 0x400000000;
  if ((_DWORD)v8)
  {
    v28 = v5;
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 88;
    do
    {
      if (v9)
      {
        v11 = *(_QWORD *)(*(_QWORD *)v10 + 40) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)(*(_QWORD *)v10 + 40) & 7) != 0 || v11 == 0)
        {
          v14 = 0;
          v15 = "";
        }
        else
        {
          v13 = *(_DWORD **)(v11 + 16);
          v16 = *v13;
          v15 = (const char *)(v13 + 4);
          v14 = v16;
        }
        v17 = sub_22EBEE6F4((uint64_t)a1, *(_QWORD *)(*(_QWORD *)v10 + 48));
        v29 = v15;
        v30 = v14;
        v31 = v17;
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v31 = 0;
      }
      v18 = sub_22E4EF088((uint64_t)&v32, (unint64_t)&v29, 1);
      v19 = (char *)v32 + 24 * v33;
      v20 = *(_OWORD *)v18;
      *((_QWORD *)v19 + 2) = *(_QWORD *)(v18 + 16);
      *(_OWORD *)v19 = v20;
      v21 = v33 + 1;
      LODWORD(v33) = v33 + 1;
      v10 += 8;
      --v9;
      --v8;
    }
    while (v8);
    v7 = *(_QWORD *)(a2 + 16);
    v22 = v32;
    v6 = v28;
  }
  else
  {
    v21 = 0;
    v22 = v34;
  }
  sub_22ED379B0(*a1, v6, 0, (v7 >> 1) & 3, (uint64_t)v22, v21, 0);
  v23 = *a1;
  sub_22E905168(*a1, 0);
  v24 = sub_22EBF2AD0(a1, *(_QWORD *)(v4 + 8 * *(unsigned int *)(a2 + 8)), 0);
  v25 = *(_QWORD *)(*(_QWORD *)(v23 + 1896) + 8 * *(unsigned int *)(v23 + 1904) - 8);
  --*(_QWORD *)(v25 + 360);
  if ((v24 & 1) != 0)
  {
    sub_22F344E80(*a1);
    v26 = 1;
  }
  else
  {
    v26 = sub_22ED37CF8((_QWORD *)*a1, v24 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v32 != v34)
    free(v32);
  return v26;
}

uint64_t sub_22EBF4084(uint64_t a1, uint64_t a2)
{
  return sub_22EBF2868(a1, a2, 0);
}

uint64_t sub_22EBF408C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBF1808(a1, *(unsigned __int8 **)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB310(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, *(_BYTE *)(a2 + 32) & 1);
}

uint64_t sub_22EBF40E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[6];
  uint64_t v30;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  void *v38;
  _QWORD v39[7];

  v39[6] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 1904);
  if ((_DWORD)v5)
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 1896) + 8 * v5 - 8);
  else
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 216);
  if (v7)
    v8 = v7 - 72;
  else
    v8 = 0;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  if (!sub_22E9FC668(*a1, *(_DWORD *)(v8 + 24)))
    return 1;
  v9 = sub_22E9F85C0();
  if (!v9)
    return 1;
  v12 = v9;
  *(_QWORD *)&v31[0] = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  sub_22F25E108(a1 + 1, v31)[1] = v9;
  *(_QWORD *)(v6 + 176) = v12;
  v13 = sub_22EBF2AD0(a1, *(_QWORD *)(a2 + 32), 0);
  if ((v13 & 1) != 0)
    return 1;
  v14 = sub_22EBF2AD0(a1, *(_QWORD *)(a2 + 40), 0);
  if ((v14 & 1) != 0)
    return 1;
  v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (!sub_22E9F9340((_QWORD *)*a1, (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFFELL)))
    return 1;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  *(_QWORD *)(v6 + 336) = v13 & 0xFFFFFFFFFFFFFFFELL;
  *(_QWORD *)(v6 + 344) = v15;
  v16 = sub_22EBF2AD0(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v16 & 1) != 0)
    return 1;
  sub_22F31B0C0((uint64_t)v31, *a1, v8, v6, v16 & 0xFFFFFFFFFFFFFFFELL);
  if (!v37)
    goto LABEL_37;
  v17 = sub_22EBF1808(a1, *(unsigned __int8 **)(a2 + 80), 0);
  if ((v17 & 1) != 0)
    goto LABEL_37;
  *(_QWORD *)&v34 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22F31B2A0((uint64_t)v31) & 1) != 0)
    {
      goto LABEL_33;
    }
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(a2 + 56);
  if (v18)
  {
    v19 = sub_22EBF2AD0(a1, v18, 0);
    if ((v19 & 1) != 0)
      goto LABEL_37;
    *((_QWORD *)&v32 + 1) = v19 & 0xFFFFFFFFFFFFFFFELL;
  }
  v20 = *(_QWORD *)(a2 + 48);
  if (v20)
  {
    v21 = sub_22EBF2AD0(a1, v20, 0);
    if ((v21 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v32 = v21 & 0xFFFFFFFFFFFFFFFELL;
  }
  v22 = *(_QWORD *)(a2 + 96);
  if (v22)
  {
    v23 = sub_22EBF2AD0(a1, v22, 0);
    if ((v23 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v35 = v23 & 0xFFFFFFFFFFFFFFFELL;
  }
  v24 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 64));
  if ((v24 & 1) != 0)
    goto LABEL_37;
  *(_QWORD *)&v33 = v24 & 0xFFFFFFFFFFFFFFFELL;
  v25 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 72));
  if ((v25 & 1) != 0)
    goto LABEL_37;
  *((_QWORD *)&v33 + 1) = v25 & 0xFFFFFFFFFFFFFFFELL;
  v26 = *(_QWORD *)(a2 + 88);
  if (!v26)
    goto LABEL_33;
  v27 = sub_22EBF2AD0(a1, v26, 0);
  if ((v27 & 1) != 0)
  {
LABEL_37:
    v10 = 1;
    goto LABEL_38;
  }
  *((_QWORD *)&v34 + 1) = v27 & 0xFFFFFFFFFFFFFFFELL;
LABEL_33:
  v30 = v36;
  v29[4] = v34;
  v29[5] = v35;
  v29[0] = v31[0];
  v29[1] = v31[1];
  v29[2] = v32;
  v29[3] = v33;
  v28 = sub_22F3F2E7C(*(_QWORD *)(*a1 + 88), (uint64_t)v29);
  if (v28)
    v10 = v28;
  else
    v10 = 1;
LABEL_38:
  if (v38 != v39)
    free(v38);
  return v10;
}

uint64_t sub_22EBF43C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x400000000;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v6 = &v5[*(unsigned int *)(v4 & 0xFFFFFFFFFFFFFFFELL)];
  }
  else
  {
    if (v4)
      v5 = (uint64_t *)(a2 + 8);
    else
      v5 = 0;
    if (v4)
      v6 = (uint64_t *)(a2 + 16);
    else
      v6 = 0;
  }
  if (v5 != v6)
  {
    v7 = 0;
    v8 = 1;
    while (1)
    {
      v9 = *v5;
      v18 = *v5;
      v19 = 0;
      if (sub_22E793870(a1 + 1, &v18, &v19))
      {
        v10 = v9;
        if (v19 != a1[1] + 16 * *((unsigned int *)a1 + 6))
          v10 = *(_QWORD *)(v19 + 8);
        if (!v10)
          goto LABEL_26;
      }
      else
      {
        v10 = v9;
        if (!v9)
          goto LABEL_26;
      }
      v11 = v10 != v9;
      v12 = v21;
      if (v21 >= (unint64_t)HIDWORD(v21))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v12 = v21;
      }
      *((_QWORD *)v20 + v12) = v10;
      v7 |= v11;
      v13 = (v21 + 1);
      LODWORD(v21) = v21 + 1;
      if (++v5 == v6)
        goto LABEL_22;
    }
  }
  v13 = 0;
  v7 = 0;
LABEL_22:
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v7 & 1) != 0)
  {
    v15 = *(_DWORD *)(a2 + 16);
    v14 = *(_DWORD *)(a2 + 20);
    v16 = sub_22EA2D7B4((_QWORD *)*a1, (unint64_t *)v20, v13);
    v8 = sub_22ED2B2F8(*a1, v16, v15, v14);
  }
  else
  {
    v8 = a2;
  }
LABEL_26:
  if (v20 != v22)
    free(v20);
  return v8;
}

uint64_t sub_22EBF4594(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;

  v2 = a2;
  v4 = sub_22EBF2AD0(a1, *(_QWORD *)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBDD628(a1, *(_QWORD *)(v2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(unsigned __int8 **)(v2 + 16) != v6
    || *(_QWORD *)(v2 + 8) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F3440A8(*a1, *(_DWORD *)(v2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 24), *(unsigned int *)(v2 + 24), v6, *(_DWORD *)(v2 + 28));
  }
  return v2;
}

uint64_t sub_22EBF463C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v4 = *a1;
  if (*(_DWORD *)(*(_QWORD *)(v4 + 72) + 72))
    sub_22EC80540(v4);
  v5 = sub_22EBF2AD0(a1, *(_QWORD *)(a2 + 8), 0);
  if ((v5 & 1) != 0)
    return 1;
  if (v5 >= 2 && *(_DWORD *)(*(_QWORD *)(*a1 + 72) + 72) != 0)
    sub_22EC9AE58((_QWORD *)*a1, *(_DWORD *)(a2 + 4), (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v7 = *(_QWORD *)(a2 + 16);
  v8 = v7 ? *(_QWORD *)(v7 + 8) : 0;
  sub_22EBF76DC((uint64_t)&v22, (uint64_t)a1, *(_DWORD *)(a2 + 4), v8, *(_QWORD *)(a2 + 24), 0);
  if ((_BYTE)v23)
    return 1;
  v9 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 32));
  if ((v9 & 1) != 0)
    return 1;
  v10 = *a1;
  v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    sub_22EFF605C(v9 & 0xFFFFFFFFFFFFFFFELL);
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  v14 = 1;
  v15 = sub_22EBCF22C(v10, v11, v13, 1, 0) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a2 + 32) && !v15)
    return v14;
  v16 = sub_22EBF2AD0(a1, *(_QWORD *)(a2 + 40), 0);
  if ((v16 & 1) != 0)
    return 1;
  v17 = *a1;
  v18 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 8) != v18)
    goto LABEL_21;
  v21 = *(_QWORD *)(a2 + 16);
  if (v21)
    v21 = *(_QWORD *)(v21 + 8);
  if ((_QWORD)v22 == v21
    && *(_OWORD *)(a2 + 24) == __PAIR128__(v11, *((unint64_t *)&v22 + 1))
    && *(_QWORD *)(a2 + 40) == (v16 & 0xFFFFFFFFFFFFFFFELL))
  {
    return a2;
  }
LABEL_21:
  v19 = *(_DWORD *)(a2 + 4);
  v24 = v22;
  v25 = v23;
  return sub_22ED31008(v17, v19, *(_DWORD *)(a2 + 48), v18, (uint64_t)&v24, v15, *(_DWORD *)(a2 + 52), (_DWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EBF4810(uint64_t a1, unsigned __int16 *a2)
{
  unsigned __int16 *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unsigned __int8 v42;
  unsigned __int8 v43;

  v2 = a2;
  if ((*a2 & 0x2000) != 0)
    v4 = *((_QWORD *)a2 + 2);
  else
    v4 = 0;
  v5 = sub_22EBF2AD0(a1, v4, 0);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *v2;
  if ((v6 & 0x600) == 0x200)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
  }
  else
  {
    if ((v6 & 0x1000) != 0)
    {
      v12 = (v6 >> 13) & 1;
      v38 = *(_QWORD *)&v2[4 * v12 + 8];
      if (v38)
        v11 = *(_QWORD *)(v38 + 8);
      else
        v11 = 0;
    }
    else
    {
      v11 = 0;
      LODWORD(v12) = (v6 >> 13) & 1;
    }
    sub_22EBF76DC((uint64_t)&v39, a1, *((_DWORD *)v2 + 1), v11, *(_QWORD *)&v2[4 * v12 + 8 + 4 * ((v6 >> 12) & 1)], (v6 & 0x700) == 256);
    if (v41)
      return 1;
    v7 = v39;
    v8 = v40;
    v9 = v42;
    v10 = v43;
    LODWORD(v6) = *v2;
  }
  v13 = (v6 & 0x700) != 0x100 || v9 == 0;
  v14 = v13;
  if (!v13 && !v10)
  {
    v15 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 8, 3);
    sub_22F0D5A50(*(_QWORD *)&v2[4 * ((*v2 >> 12) & 1) + 12 + 4 * ((*v2 >> 13) & 1)]);
    v17 = v16;
    *(_BYTE *)v15 = 19;
    if (byte_255E04EB3)
    {
      v18 = sub_22F0D3748(19);
      ++*((_DWORD *)v18 + 2);
    }
    *(_WORD *)v15 &= ~0x100u;
    *(_DWORD *)(v15 + 4) = v17;
    goto LABEL_22;
  }
  v15 = sub_22EBF2AD0(a1, *(_QWORD *)&v2[4 * ((v6 >> 12) & 1) + 12 + 4 * ((v6 >> 13) & 1)], 0);
  if ((v15 & 1) != 0)
    return 1;
  if (v10)
    v21 = v14;
  else
    v21 = 1;
  if (v21 == 1)
  {
LABEL_22:
    v19 = *v2;
    if ((v19 & 0x800) != 0)
      v20 = *(_QWORD *)&v2[4 * ((v19 >> 13) & 1) + 16 + 4 * ((v19 >> 12) & 1)];
    else
      v20 = 0;
    v22 = sub_22EBF2AD0(a1, v20, 0);
    if ((v22 & 1) == 0)
      goto LABEL_32;
    return 1;
  }
  v22 = 0;
LABEL_32:
  v23 = *(_QWORD *)a1;
  v24 = *v2;
  v25 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
    goto LABEL_39;
  v26 = (v24 & 0x2000) != 0 ? *((_QWORD *)v2 + 2) : 0;
  if (v26 != v25)
    goto LABEL_39;
  if ((v24 & 0x1000) != 0)
  {
    v34 = (v24 >> 13) & 1;
    v33 = *(_QWORD *)&v2[4 * v34 + 8];
    if (v33)
      v33 = *(_QWORD *)(v33 + 8);
  }
  else
  {
    v33 = 0;
    LODWORD(v34) = (v24 >> 13) & 1;
  }
  if (v7 != v33
    || (v35 = v2 + 8, v36 = v34 + ((v24 >> 12) & 1), v8 != *(_QWORD *)&v2[4 * v36 + 8])
    || *(_QWORD *)&v35[4 * (v36 + 1)] != (v15 & 0xFFFFFFFFFFFFFFFELL)
    || ((v24 & 0x800) != 0 ? (v37 = *(_QWORD *)&v35[4 * (v36 + 2)]) : (v37 = 0), v37 != (v22 & 0xFFFFFFFFFFFFFFFELL)))
  {
LABEL_39:
    v28 = (v24 >> 8) & 7;
    v29 = *((_DWORD *)v2 + 1);
    v30 = *((_DWORD *)v2 + 2);
    v31 = *((_DWORD *)v2 + 3);
    if ((v24 & 0x800) != 0)
      v32 = *(_DWORD *)&v2[4 * ((v24 >> 12) & 1) + 20 + 4 * ((v24 >> 13) & 1)];
    else
      v32 = 0;
    v39 = v7;
    v40 = v8;
    v41 = 0;
    v42 = v9;
    v43 = v10;
    return sub_22ED2D6D0(v23, v29, v28, v30, v25, (uint64_t)&v39, v31, (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFFELL), v32, (_BYTE *)(v22 & 0xFFFFFFFFFFFFFFFELL));
  }
  return (uint64_t)v2;
}

uint64_t sub_22EBF4B38(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (unint64_t)sub_22EBCCCF0(*a1, (int *)(v4 & 0xFFFFFFFFFFFFFFFELL)) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22ED343AC(*a1, *(_DWORD *)(v2 + 4), *(_DWORD *)(v2 + 8), v5);
  return v2;
}

uint64_t sub_22EBF4BB0(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  char v17;
  int v18;
  char *v19;
  __int128 v20;
  void *v21[2];
  __int128 v22;
  void *v23;
  __int128 v24;
  void *v25;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EBEE748(a1, v4, *(void **)(a2 + 24), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v22 = *(_OWORD *)(a2 + 32);
  v23 = *(void **)(a2 + 48);
  v9 = v22;
  if ((_QWORD)v22)
  {
    sub_22EBF2014((__n128 *)&v20, a1, (__n128 *)&v22);
    v22 = v20;
    v23 = v21[0];
    v9 = v20;
    if (!(_QWORD)v20)
      return 1;
  }
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    v10 = v7 == *(_QWORD *)(a2 + 16) && v8 == *(_QWORD *)(a2 + 24);
    if (v10 && v9 == *(_QWORD *)(a2 + 32))
      return a2;
  }
  v20 = 0u;
  *(_OWORD *)v21 = 0u;
  sub_22E8ACE30((uint64_t)&v20, v7, v8);
  v13 = sub_22F3322F4(*a1, 0, (uint64_t)&v20, (uint64_t *)&v22);
  if (v13 != 2)
  {
    if (v13 == 1)
    {
      if (!*(_BYTE *)(a2 + 12))
      {
LABEL_21:
        v14 = 1;
        goto LABEL_23;
      }
    }
    else if (v13 || *(_BYTE *)(a2 + 12))
    {
      goto LABEL_21;
    }
    v11 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8, 3);
    v18 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)v11 = 19;
    if (byte_255E04EB3)
    {
      v19 = sub_22F0D3748(19);
      ++*((_DWORD *)v19 + 2);
    }
    *(_WORD *)v11 &= ~0x100u;
    *(_DWORD *)(v11 + 4) = v18;
    goto LABEL_33;
  }
  v14 = 0;
LABEL_23:
  v15 = sub_22EBF4084((uint64_t)a1, *(_QWORD *)(a2 + 56));
  if ((v15 & 1) != 0)
    v11 = 1;
  else
    v11 = v15;
  if ((v14 & 1) == 0 && (v15 & 1) == 0)
  {
    v16 = *(_DWORD *)(a2 + 8);
    v17 = *(_BYTE *)(a2 + 12);
    v24 = v22;
    v25 = v23;
    v11 = sub_22F344AB0(*a1, v16, v17, v7, v8, &v24, v15 & 0xFFFFFFFFFFFFFFFELL);
  }
LABEL_33:
  if (HIDWORD(v21[1]))
    free(v21[0]);
  return v11;
}

uint64_t sub_22EBF4DBC(uint64_t a1, uint64_t a2)
{
  return sub_22EBF2AD0(a1, *(_QWORD *)(a2 + 8), 0);
}

uint64_t sub_22EBF4DC8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF4E34(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF4EA0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF4F0C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF4F78(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF4FE8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5054(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF50C0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF512C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5198(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5204(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5270(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF52DC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5348(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF53B4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5420(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF548C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF54F8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5564(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF55D0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF563C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF56A8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5714(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5780(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF57EC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5858(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF58C4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5930(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF599C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5A08(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5A74(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5AE0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5B4C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5BB8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5C24(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5C90(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5CFC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5D68(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5DD4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5E40(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5EAC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5F18(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5F84(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF5FF0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF605C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF60C8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF6134(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF61A0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF620C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF6278(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF62E4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF6350(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF63BC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF6428(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF6494(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF6500(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF656C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF65D8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF6644(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF66B0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF671C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF6788(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF67F4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EBF77E0(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EBF6860(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 56);
    if ((v5 & 4) != 0)
    {
      v6 = *(uint64_t **)((v5 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v6)
        goto LABEL_6;
    }
    else if (v5 >= 8)
    {
      v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
LABEL_6:
      v7 = sub_22EBE9AF0(a1, v6);
      if (!v7)
        return 1;
      v8 = (uint64_t)v7;
      v9 = *v7;
      goto LABEL_10;
    }
    v10 = sub_22EBEE6F4((uint64_t)a1, *(_QWORD *)(v4 + 48));
    if (v10 < 0x10)
      return 1;
    v9 = v10;
    v8 = 0;
LABEL_10:
    v11 = *(_QWORD *)(v4 + 40);
    if ((v11 & 7) != 0)
      v12 = 0;
    else
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    v4 = sub_22EB001B8(*a1, v8, v9, *(_DWORD *)(v4 + 64), *(_DWORD *)(v4 + 24), v12, 0);
    if (!v4)
      return 1;
  }
  v13 = sub_22EBF2AD0(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v13 & 1) == 0)
    return sub_22ED36AF8((uint64_t)*a1, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v4, v13 & 0xFFFFFFFFFFFFFFFELL);
  return 1;
}

uint64_t sub_22EBF694C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EBF2AD0(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22F344474(*a1, *(_DWORD *)(v2 + 8), v5);
  return v2;
}

uint64_t sub_22EBF69B8(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED36D40(*a1, *(_DWORD *)(v2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EBF2AD0(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1
    || *(_QWORD *)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F344708((uint64_t)*a1, *(_DWORD *)(v2 + 8), v7, v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EBF6A6C(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EBDD628(a1, v4);
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v5 = 0;
  }
  v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 16) != v6)
    return sub_22ED36B94(*a1, *(_DWORD *)(v2 + 8), v6);
  return v2;
}

uint64_t sub_22EBF6AE4(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v21;
  uint64_t v22[9];

  v22[8] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a2 + 16);
  v5 = sub_22EBF2AD0(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v5 & 1) != 0)
    return 1;
  v21 = 0;
  v6 = *(unsigned __int16 *)(a2 + 12);
  v7 = v6 | (*(unsigned __int8 *)(a2 + 14) << 16);
  v8 = (unsigned __int16)v6;
  if (!(_WORD)v6)
  {
    v9 = 0;
    if ((v7 & 0x10000) != 0)
    {
LABEL_14:
      v16 = v4[(unsigned __int16)v7 + 1];
      if (v16)
      {
        v17 = sub_22EBF2AD0(a1, v16, 0);
        if ((v17 & 1) != 0)
          return 1;
        goto LABEL_18;
      }
    }
LABEL_17:
    v17 = 0;
LABEL_18:
    v18 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && !((*v4 != v18) | v9 & 1)
      && (((*(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16)) & 0x10000) != 0
        ? (v19 = v4[*(unsigned __int16 *)(a2 + 12) + 1])
        : (v19 = 0),
          v19 == (v17 & 0xFFFFFFFFFFFFFFFELL)))
    {
      return a2;
    }
    else
    {
      return sub_22F3444EC(*a1, *(_DWORD *)(a2 + 8), v18, v22, v21, v17 & 0xFFFFFFFFFFFFFFFELL);
    }
  }
  v9 = 0;
  v10 = (_QWORD *)(a2 + 24);
  v11 = 1;
  while (1)
  {
    v12 = sub_22EBF2AD0(a1, *v10, 0);
    if ((v12 & 1) != 0)
      return v11;
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    v14 = *v10 != (v12 & 0xFFFFFFFFFFFFFFFELL);
    v15 = v21;
    if (v21 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = v21;
    }
    v22[v15] = v13;
    v9 |= v14;
    ++v21;
    ++v10;
    if (!--v8)
    {
      v7 = *(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16);
      if ((v7 & 0x10000) == 0)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
}

uint64_t sub_22EBF6D0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EBF2AD0(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22F344820(*a1, *(_DWORD *)(v2 + 8), v5);
  return v2;
}

unint64_t sub_22EBF6D78(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = 1;
  v5 = sub_22EBF2AD0(a1, *(_QWORD *)(a2 + 8), 1);
  if ((v5 & 1) == 0)
  {
    v6 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
    if ((v6 & 1) != 0)
      return 1;
    v7 = sub_22EBF2AD0(a1, *(_QWORD *)(a2 + 24), 0);
    if ((v7 & 1) != 0)
      return 1;
    v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && *(_QWORD *)(a2 + 8) == v8
      && *(_QWORD *)(a2 + 16) == (v6 & 0xFFFFFFFFFFFFFFFELL)
      && *(_QWORD *)(a2 + 24) == (v7 & 0xFFFFFFFFFFFFFFFELL))
    {
      return a2;
    }
    v9 = sub_22ED3169C(*a1, *(_DWORD *)(a2 + 32), v8, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
    if ((v9 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v4 = 1;
      if ((v7 & 0xFFFFFFFFFFFFFFFELL) != 0 && (v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 24) = v7 & 0xFFFFFFFFFFFFFFFELL;
        return v9 & 0xFFFFFFFFFFFFFFFELL;
      }
    }
  }
  return v4;
}

uint64_t sub_22EBF6E6C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBF1808(a1, *(unsigned __int8 **)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED358AC(*a1, *(_DWORD *)(a2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, 0);
}

uint64_t sub_22EBF6EBC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBF4084((uint64_t)a1, *(_QWORD *)(a2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22F3448B8(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EBF6F28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBF4084(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22F3F29BC(*(_QWORD *)(*(_QWORD *)a1 + 88), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EBF6F70(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v8;

  v2 = a2;
  v4 = sub_22EBF4084((uint64_t)a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_BYTE **)(v2 + 24);
  if (*v5 == 95)
  {
    v6 = sub_22EBF6F28((uint64_t)a1, (uint64_t)v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = sub_22EBF6EBC(a1, (uint64_t)v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) == -1
    && *(_QWORD *)(v2 + 16) == v8
    && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return v2;
  }
  return sub_22ED3765C((uint64_t)*a1, *(_BYTE *)(v2 + 8), *(_DWORD *)(v2 + 12), v8, v6 & 0xFFFFFFFFFFFFFFFELL);
}

unint64_t sub_22EBF7024(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  int v22[3];
  int v23;
  uint64_t v24;
  int v25;

  v4 = *a1;
  v25 = 4;
  v24 = 0;
  v23 = 3;
  *(_QWORD *)v22 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v25, v22, (__int16 *)(v4 + 1693), &v24, &v23);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = a2 + 12;
  v12 = sub_22EBDD628(a1, *((_QWORD *)a2 + 3));
  v13 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v12);
  if ((v13 & 1) != 0)
  {
    sub_22EB48E64(v4);
  }
  else
  {
    v14 = *a2;
    if ((v14 & 0x100) != 0)
      v15 = *(_QWORD *)&v11[4 * ((v14 >> 8) & 1)];
    else
      v15 = 0;
    v16 = sub_22EBDD628(a1, v15);
    v17 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v16);
    sub_22EB48E64(v4);
    if ((v17 & 1) == 0)
    {
      v18 = (*a2 & 0x100) != 0 ? *((_DWORD *)a2 + 12) : 0;
      v19 = sub_22ED2C48C(*a1, *((_DWORD *)a2 + 1), v13 & 0xFFFFFFFFFFFFFFFELL, v18, v17 & 0xFFFFFFFFFFFFFFFELL, *((_DWORD *)a2 + 2));
      if ((v19 & 1) == 0)
      {
        v20 = sub_22EBF2AD0(a1, *(_QWORD *)&v11[4 * (((unint64_t)*a2 >> 8) & 1) + 4], 0);
        if ((v20 & 1) == 0)
        {
          result = v19 & 0xFFFFFFFFFFFFFFFELL;
          *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFFELL)
                    + 8 * (((unint64_t)*(unsigned __int16 *)(v19 & 0xFFFFFFFFFFFFFFFELL) >> 8) & 1)
                    + 32) = v20 & 0xFFFFFFFFFFFFFFFELL;
          return result;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_22EBF7234(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBF2AD0(a1, *(_QWORD *)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED2C5AC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EBF7284(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if ((*a2 & 0x100) != 0)
    v4 = *((_QWORD *)a2 + 3);
  else
    v4 = 0;
  v5 = sub_22EBF2AD0(a1, v4, 0);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a2;
  if ((v6 & 0x200) != 0)
  {
    v8 = (v6 >> 8) & 1;
    v11 = *(_QWORD *)&a2[4 * v8 + 12];
    v7 = v11 ? *(_QWORD *)(v11 + 8) : 0;
  }
  else
  {
    v7 = 0;
    LODWORD(v8) = (v6 >> 8) & 1;
  }
  sub_22EBF76DC((uint64_t)&v12, (uint64_t)a1, *((_DWORD *)a2 + 1), v7, *(_QWORD *)&a2[4 * v8 + 12 + 4 * ((v6 >> 9) & 1)], 2);
  if ((_BYTE)v13)
    return 1;
  v9 = *((_DWORD *)a2 + 1);
  v14 = v12;
  v15 = v13;
  if ((sub_22ED2E0D4(*a1, v9, *((_DWORD *)a2 + 4), v5 & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)&v14, *((_DWORD *)a2 + 5)) & 1) != 0
    || (sub_22EBF2AD0(a1, *(_QWORD *)&a2[4 * ((*a2 >> 9) & 1) + 16 + 4 * (HIBYTE(*a2) & 1)], 0) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return sub_22ED2E298();
  }
}

uint64_t sub_22EBF73AC(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unint64_t v6;
  char **v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  unsigned int v13;
  char *v14[2];

  v4 = a2;
  v14[1] = *(char **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v7 = (char **)(a2 + 4);
  v6 = *a2;
  if (v6 >= 0x100)
  {
    v9 = 0;
    v10 = 8 * (v6 >> 8);
    do
    {
      v11 = *v7;
      if (*v7)
      {
        if (v9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v9 = v13;
        }
        v14[v9] = v11;
        v9 = ++v13;
      }
      ++v7;
      v10 -= 8;
    }
    while (v10);
  }
  v8 = sub_22EBF2AD0(a1, *((_QWORD *)v4 + 1), a3);
  if ((v8 & 1) != 0)
    return 1;
  if (*((_QWORD *)v4 + 1) != (v8 & 0xFFFFFFFFFFFFFFFELL))
  {
    if (v13)
      return (uint64_t)sub_22ED2C6AC(*a1, v4[1], v14, v13, v8 & 0xFFFFFFFFFFFFFFFELL);
    return v8;
  }
  return (uint64_t)v4;
}

uint64_t sub_22EBF7504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v5 = sub_22EBF2AD0(a1, *(_QWORD *)(a2 + 16), a3);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = v6;
  v9 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v8, &v9)
    && v9 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v6 = *(_QWORD *)(v9 + 8);
  }
  if (!v6)
    return 1;
  if (v6 == *(_QWORD *)(a2 + 8))
    *(_QWORD *)(v6 + 48) = 0;
  return sub_22F343D54(*(_QWORD **)a1, *(_DWORD *)(a2 + 4), v6, 0, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EBF75B0(uint64_t a1, unsigned __int16 *a2)
{
  _DWORD *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v2 = a2;
  v4 = *a2;
  if ((v4 & 0x100) != 0 && (v15 = *((_QWORD *)a2 + 2)) != 0)
    v5 = *(_QWORD *)(v15 + 8);
  else
    v5 = 0;
  v6 = (uint64_t *)(a2 + 8);
  sub_22EBF76DC((uint64_t)&v16, a1, *((_DWORD *)a2 + 1), v5, *(_QWORD *)&a2[4 * ((v4 >> 8) & 1) + 8], 0);
  if ((_BYTE)v17)
    return 1;
  v7 = sub_22EBF2AD0(a1, v6[(((unint64_t)*(unsigned __int16 *)v2 >> 8) & 1) + 1], 0);
  if ((v7 & 1) != 0)
    return 1;
  v8 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
    goto LABEL_11;
  v9 = *(unsigned __int16 *)v2;
  if ((v9 & 0x100) != 0)
  {
    v10 = *v6;
    if (*v6)
      v10 = *(_QWORD *)(v10 + 8);
  }
  else
  {
    v10 = 0;
  }
  if ((_QWORD)v16 != v10
    || (v11 = (v9 >> 8) & 1, *((_QWORD *)&v16 + 1) != v6[v11])
    || v6[(v11 + 1)] != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
LABEL_11:
    v12 = v2[1];
    v13 = v2[2];
    v18 = v16;
    v19 = v17;
    return sub_22F343FAC(v8, v12, v13, (uint64_t)&v18, v2[3], (_BYTE *)(v7 & 0xFFFFFFFFFFFFFFFELL));
  }
  return (uint64_t)v2;
}

uint64_t sub_22EBF76DC(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = result;
  if (a4)
  {
    v10 = a4;
    v11 = a4;
    v12 = 0;
    result = sub_22E793870((uint64_t *)(a2 + 8), &v11, &v12);
    if (!(_DWORD)result)
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
    if (v12 == *(_QWORD *)(a2 + 8) + 16 * *(unsigned int *)(a2 + 24))
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
    v10 = *(_QWORD *)(v12 + 8);
    if (v10)
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
  }
  else
  {
    if (!a5)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_DWORD *)(result + 15) = 0;
      return result;
    }
    result = sub_22EBDD628(a2, a5);
    if ((result & 1) == 0)
      return sub_22EB530EC(*(_QWORD *)a2, a3, result & 0xFFFFFFFFFFFFFFFELL, a6, 1, v9);
  }
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_WORD *)(v9 + 16) = 1;
  *(_BYTE *)(v9 + 18) = 0;
  return result;
}

uint64_t sub_22EBF77E0(uint64_t *a1, __n128 *a2)
{
  _DWORD *v4;
  uint64_t v5;
  __n128 **v6;
  unsigned int v7;
  uint64_t v8;
  __n128 *v9;
  _QWORD *v10;
  unsigned __int32 v11;
  unsigned __int32 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t i;
  unint64_t v21;
  uint64_t v22;
  unsigned __int32 v23;
  uint64_t v24;
  __n128 v26;
  unint64_t v27;
  __n128 v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[18];

  v32[16] = *MEMORY[0x24BDAC8D0];
  v30 = v32;
  v31 = 0x1000000000;
  v4 = (_DWORD *)a2[1].n128_u64[1];
  if (!v4)
  {
    v5 = 0;
    goto LABEL_87;
  }
  v7 = *v4;
  v6 = (__n128 **)(v4 + 4);
  v5 = v7;
  if (v7 < 0x11)
  {
    if (!(_DWORD)v5)
      goto LABEL_79;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v8 = 8 * v5;
  do
  {
    v9 = *v6;
    if (*v6)
    {
      v10 = (_QWORD *)*a1;
      v11 = v9->n128_u32[2];
      v12 = (unsigned __int32 *)(*(_QWORD *)(*a1 + 12288) + 21440);
      *v12 = v11;
      switch(v11)
      {
        case 3u:
          v13 = sub_22EBF7F38(a1, v9);
          goto LABEL_73;
        case 4u:
          v13 = sub_22EBF80BC((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 5u:
          v13 = (uint64_t)sub_22EBF8108(a1, (unsigned int *)v9);
          goto LABEL_73;
        case 6u:
          v13 = sub_22EBF8280((uint64_t **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 7u:
          v13 = sub_22EBF8404((uint64_t **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0xAu:
          v13 = (uint64_t)sub_22EB7BC58(v10, (int *)v9);
          goto LABEL_73;
        case 0xCu:
          v13 = sub_22EBF8450((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0xEu:
          v13 = (uint64_t)sub_22EBF849C((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0xFu:
          v13 = (uint64_t)sub_22EBF85E8((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x10u:
          sub_22EB7BF50((uint64_t)v10, (uint64_t)v9);
          goto LABEL_73;
        case 0x11u:
          v13 = (uint64_t)sub_22EB7BF64(v10, (uint64_t)v9);
          goto LABEL_73;
        case 0x12u:
          v13 = (uint64_t)sub_22EBF8734(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x13u:
          v13 = sub_22EBF88C8((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x14u:
          v13 = sub_22EBF8914((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x15u:
          v13 = sub_22EBF896C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x16u:
          v13 = sub_22EBF89C4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x18u:
          v13 = sub_22EBF8A14((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Au:
          v13 = (uint64_t)sub_22EBF8A64((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x1Bu:
          v13 = sub_22EBF8BB0((uint64_t)a1, (uint64_t *)v9);
          goto LABEL_73;
        case 0x1Cu:
          v13 = sub_22EBF8C34(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Du:
          v13 = sub_22EBF8C80((uint64_t)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Eu:
          v13 = (uint64_t)sub_22EBF8DCC((uint64_t)a1, (int *)v9);
          goto LABEL_73;
        case 0x1Fu:
          v13 = (uint64_t)sub_22EBF8F20(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x20u:
          v13 = (uint64_t)sub_22EBF939C((uint64_t)v10, (int *)v9);
          goto LABEL_73;
        case 0x21u:
          v13 = sub_22EBF93C0((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x22u:
          v13 = (uint64_t)sub_22EBF940C((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x23u:
          v13 = sub_22EBF9564((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x24u:
          v13 = sub_22EBF95B0(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x25u:
          v13 = sub_22EBF9604(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x27u:
          v13 = (uint64_t)sub_22EBF9A40((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x29u:
          v13 = sub_22EBF9B8C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x2Au:
          v13 = (uint64_t)sub_22EBF9D20((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x2Bu:
          v13 = sub_22EBF9E78((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x2Cu:
          v13 = sub_22EBF9FD0((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x2Eu:
          v13 = (uint64_t)sub_22EBFA160(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x34u:
          v13 = sub_22EBFA638(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x35u:
          v13 = (uint64_t)sub_22EBFA684((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x37u:
          v13 = sub_22EBFA7D0(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x38u:
          v13 = sub_22EBFA81C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x39u:
          v13 = sub_22EBFA868((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Au:
          v13 = sub_22EBFA8B4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Bu:
          v13 = (uint64_t)sub_22EB7E124(v10, (int *)v9);
          goto LABEL_73;
        case 0x3Cu:
          v13 = sub_22EBFA900((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Du:
          v13 = sub_22EBFA958(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Eu:
          v13 = sub_22EBFA9C0((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Fu:
          v13 = (uint64_t)sub_22EBFAA0C((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x40u:
          v13 = (uint64_t)sub_22EB7E384(v10, (int *)v9);
          goto LABEL_73;
        case 0x42u:
          v13 = sub_22EBFAB58(a1, v9);
          goto LABEL_73;
        case 0x46u:
          v13 = sub_22EBFAF9C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x47u:
          v13 = sub_22EBFAFE8((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x49u:
          v13 = (uint64_t)sub_22EBFB04C((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x4Bu:
          v13 = sub_22EBFB198((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Cu:
          v13 = (uint64_t)sub_22EBFB1E4((uint64_t)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Du:
          v13 = sub_22EBFB37C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Eu:
          v13 = sub_22EBFB7B8((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x51u:
          v13 = (uint64_t)sub_22EBFB804(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x58u:
          v13 = sub_22EBFBC80((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x59u:
          v13 = (uint64_t)sub_22EBFBCCC((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x5Au:
          v13 = (uint64_t)sub_22EBFBE24((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x5Bu:
          v13 = (uint64_t)sub_22EBFBF7C(a1, (int *)v9);
LABEL_73:
          v9 = (__n128 *)v13;
          v15 = *a1;
          *(_DWORD *)(*(_QWORD *)(*a1 + 12288) + 21440) = 85;
          sub_22EB4E2D8(v15);
          if (v9)
            goto LABEL_74;
          goto LABEL_78;
        default:
          *v12 = 85;
          sub_22EB4E2D8(v10);
LABEL_74:
          v16 = v31;
          if (v31 >= (unint64_t)HIDWORD(v31))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v16 = v31;
          }
          *((_QWORD *)v30 + v16) = v9;
          break;
      }
    }
    else
    {
      v14 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = v31;
      }
      *((_QWORD *)v30 + v14) = 0;
    }
    LODWORD(v31) = v31 + 1;
LABEL_78:
    ++v6;
    v8 -= 8;
  }
  while (v8);
LABEL_79:
  v17 = (unsigned int *)a2[1].n128_u64[1];
  if (v17 && *((_BYTE *)v17 + 8) && *(_QWORD *)&v17[2 * *v17 + 4 + 2 * v17[1]])
  {
    sub_22EC84DA0(*a1, a2->n128_i32[2]);
    v18 = *a1;
    sub_22E905168(*a1, 0);
    v19 = a2->n128_u32[2];
    if (v19 <= 0x34 && ((1 << v19) & 0x10000800000204) != 0)
    {
      i = *(_QWORD *)(a2[1].n128_u64[1]
                    + 8 * *(unsigned int *)a2[1].n128_u64[1]
                    + 8 * *(unsigned int *)(a2[1].n128_u64[1] + 4)
                    + 16);
    }
    else
    {
      for (i = *(_QWORD *)(a2[1].n128_u64[1]
                          + 8 * *(unsigned int *)a2[1].n128_u64[1]
                          + 8 * *(unsigned int *)(a2[1].n128_u64[1] + 4)
                          + 16); *(_BYTE *)i == 7; i = *(_QWORD *)(i + 8 * *(unsigned int *)(i + 8) + 32))
        ;
    }
    v21 = sub_22EBF2AD0(a1, i, 0);
    if (v21 >= 2
      && sub_22F4219DC(a2->n128_u32[2])
      && (*(_BYTE *)(*(_QWORD *)(*a1 + 72) + 76) & 0x20) != 0)
    {
      v21 = sub_22EC86C20(*a1, (unsigned __int8 *)(v21 & 0xFFFFFFFFFFFFFFFELL));
    }
    v22 = *(_QWORD *)(*(_QWORD *)(v18 + 1896) + 8 * *(unsigned int *)(v18 + 1904) - 8);
    --*(_QWORD *)(v22 + 360);
    if ((sub_22EC8617C((_QWORD *)*a1, v21, (uint64_t *)v30, v31) & 1) != 0)
      goto LABEL_91;
  }
LABEL_87:
  if (v5 != v31)
  {
LABEL_91:
    v24 = 1;
    goto LABEL_92;
  }
  v28.n128_u64[0] = 0;
  v28.n128_u32[2] = 0;
  v29 = 0;
  v23 = a2->n128_u32[2];
  if (v23 == 9)
  {
    v28 = a2[2];
    v29 = a2[3].n128_u64[0];
    sub_22EBF2014(&v26, a1, &v28);
    v28 = v26;
    v29 = v27;
  }
  v24 = sub_22EC87DEC();
LABEL_92:
  if (v30 != v32)
    free(v30);
  return v24;
}

uint64_t sub_22EBF7F38(uint64_t *a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v15;
  uint64_t v16[5];

  v16[4] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = a2[4];
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  v5 = a2 + 6;
  v6 = *(_QWORD *)&a2[2 * v4 + 6];
  if (!v6)
  {
    v9 = 0;
    v8 = v4;
    if (!v4)
      return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
LABEL_8:
    v10 = 8 * v8;
    do
    {
      v11 = sub_22EBDD628(a1, *v5);
      if ((v11 & 1) == 0)
      {
        v12 = v15;
        if (v15 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v12 = v15;
        }
        v16[v12] = v11 & 0xFFFFFFFFFFFFFFFELL;
        ++v15;
      }
      ++v5;
      v10 -= 8;
    }
    while (v10);
    return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
  }
  v7 = sub_22EBDD628(a1, v6);
  if ((v7 & 1) != 0)
    return 0;
  v8 = a2[4];
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (a2[4])
    goto LABEL_8;
  return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
}

uint64_t sub_22EBF80BC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E518(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EBF8108(uint64_t *a1, unsigned int *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = a2 + 6;
    while (1)
    {
      v7 = sub_22EBDD628(a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22EBDD628(a1, *(_QWORD *)&a2[2 * v9 + 6]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA5100(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[5], a2[1]);
}

uint64_t sub_22EBF8280(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  unsigned __int8 *v16[17];

  v16[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = sub_22EBDD628(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v6 = 0;
  }
  v15 = 0;
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 16);
  }
  if (v7)
  {
    v8 = (_QWORD *)(a2 + 40);
    v9 = 8 * v7;
    while (1)
    {
      v10 = sub_22EBDD628(a1, *v8);
      if ((v10 & 1) != 0)
        break;
      v11 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
      }
      v16[v11] = (unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFFELL);
      v12 = ++v15;
      ++v8;
      v9 -= 8;
      if (!v9)
        return sub_22ECA9A04(*a1, v6, v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  else
  {
    v12 = 0;
    return sub_22ECA9A04(*a1, v6, v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
  }
}

uint64_t sub_22EBF8404(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E2DC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBF8450(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E39C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EBF849C(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBDD628(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

_DWORD *sub_22EBF85E8(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  uint64_t v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBDD628(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

unsigned __int8 *sub_22EBF8734(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  uint64_t v16[17];

  v16[16] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = (_QWORD *)(a2 + 40);
  v5 = *(unsigned int *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40 + 8 * v5);
  if (v6)
  {
    v7 = sub_22EBDD628(a1, v6);
    if ((v7 & 1) != 0)
      return 0;
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  else
  {
    v8 = 0;
  }
  if (v5 > 0x10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  if ((_DWORD)v5)
  {
    v9 = 8 * v5;
    while (1)
    {
      v10 = sub_22EBDD628(a1, *v4);
      if ((v10 & 1) != 0)
        break;
      v11 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
      }
      v16[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
      v12 = ++v15;
      ++v4;
      v9 -= 8;
      if (!v9)
        return sub_22ECA67B4(*a1, v8, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  v12 = 0;
  return sub_22ECA67B4(*a1, v8, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBF88C8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F6E0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBF8914(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = sub_22EBDD628(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22F33EAFC(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBF896C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EBDD628(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22EC9F86C(*a1, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBF89C4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 40));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1F20(*a1, *(_DWORD *)(a2 + 32), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBF8A14(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 48));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA18BC(*a1, *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EBF8A64(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBDD628(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EBF8BB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;

  v4 = sub_22EBDD628(a1, a2[4]);
  if ((v4 & 1) != 0)
    return 0;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v6 = *((_DWORD *)a2 + 7);
  v7 = *a2;
  result = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 40, 3);
  *(_QWORD *)result = v7;
  *(_DWORD *)(result + 8) = 27;
  *(_QWORD *)(result + 32) = v5;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 89;
  *(_DWORD *)(result + 28) = v6;
  return result;
}

uint64_t sub_22EBF8C34(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EE2C(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBF8C80(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(a2 + 16);
  }
  if (!v4)
    return sub_22EC92F80();
  v5 = (_QWORD *)(a2 + 40);
  v6 = 8 * v4;
  while (1)
  {
    v7 = sub_22EBDD628(a1, *v5);
    if ((v7 & 1) != 0)
      break;
    v8 = v11;
    if (v11 >= 0x10uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = v11;
    }
    v12[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
    ++v11;
    ++v5;
    v6 -= 8;
    if (!v6)
      return sub_22EC92F80();
  }
  return 0;
}

_DWORD *sub_22EBF8DCC(uint64_t a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  _QWORD v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBDD628(a1, *v5);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
  }
  v9 = 0;
LABEL_11:
  if (!v9)
    return 0;
  return sub_22F3EB9D4(*(_QWORD *)(*(_QWORD *)a1 + 88), *a2, a2[3], a2[1], v13, v9);
}

_DWORD *sub_22EBF8F20(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  __int128 v40;
  size_t __n[2];
  int v42[3];
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[128];
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  __n128 v51;
  _QWORD v52[10];

  v52[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v42[0] = *(_DWORD *)a2;
  v42[1] = v6;
  v42[2] = v4;
  v48 = v50;
  v49 = 0x1000000000;
  v40 = 0u;
  *(_OWORD *)__n = 0u;
  v38.n128_u64[0] = 0;
  v38.n128_u32[2] = 0;
  v39 = 0;
  v45 = v47;
  v46 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 104);
    do
    {
      v9 = sub_22EBDD628(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v49;
      if (v49 >= (unint64_t)HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v49;
      }
      *((_QWORD *)v48 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v49) = v49 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22EBEE748(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_48;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v40, v14, v15);
  v38 = *(__n128 *)(a2 + 56);
  v39 = *(_QWORD *)(a2 + 72);
  if (v38.n128_u64[0])
  {
    sub_22EBF2014(&v51, a1, &v38);
    v38 = v51;
    v39 = v52[0];
    if (!v51.n128_u64[0])
      goto LABEL_46;
  }
  v37 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 104 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        v51.n128_u64[0] = (unint64_t)v52;
        v51.n128_u64[1] = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v43 = v27;
            v44 = 0;
            if (sub_22E793870(a1 + 1, &v43, &v44)
              && v44 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v44[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = v51.n128_u32[2];
            if (v51.n128_u32[2] >= (unint64_t)v51.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = v51.n128_u32[2];
            }
            *(_QWORD *)(v51.n128_u64[0] + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++v51.n128_u32[2];
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v40 + 1);
        if (*((_QWORD *)&v40 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v40 + 1);
            LODWORD(v25) = v51.n128_u32[2];
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v38, 1, (*v19 >> 20) & 1, (const void *)v51.n128_u64[0], v51.n128_u64[0] + 8 * v25);
        v34 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v46;
        }
        *((_QWORD *)v45 + v34) = v33;
        LODWORD(v46) = v46 + 1;
        if ((_QWORD *)v51.n128_u64[0] != v52)
          free((void *)v51.n128_u64[0]);
      }
      else
      {
        v32 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v46;
        }
        *((_QWORD *)v45 + v32) = 0;
        LODWORD(v46) = v46 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v35 = sub_22ECA7F24((_QWORD *)*a1, (int *)(v37 + 80), 2u, (int *)(v37 + 88), 2, (uint64_t)&v40, (__int128 *)&v38, *(unsigned int *)(v37 + 96), (uint64_t)v48, v49, v42, (unsigned __int8 **)v45, v46);
LABEL_48:
  if (v45 != v47)
    free(v45);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v48 != v50)
    free(v48);
  return v35;
}

int *sub_22EBF939C(uint64_t a1, int *a2)
{
  if (*(_DWORD *)(a1 + 11992) == -1)
    return a2;
  else
    return sub_22ECCBA58(*(_QWORD *)(a1 + 88), *a2, a2[1]);
}

uint64_t sub_22EBF93C0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F560(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

unsigned int *sub_22EBF940C(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBDD628(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA94BC(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22EBF9564(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E41C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBF95B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FE98(*a1, *(_DWORD *)(a2 + 44), (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBF9604(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  _DWORD **v14;
  _DWORD **v15;
  _DWORD *v16;
  int v17;
  BOOL v18;
  _DWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __int128 v35;
  size_t __n[2];
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[64];
  void *v42[2];
  _QWORD v43[16];
  unsigned __int8 **v44;
  uint64_t v45;
  _QWORD v46[18];

  v2 = a2;
  v46[16] = *MEMORY[0x24BDAC8D0];
  v44 = (unsigned __int8 **)v46;
  v45 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(v2 + 96);
    while (1)
    {
      v7 = sub_22EBDD628(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v45;
      if (v45 >= (unint64_t)HIDWORD(v45))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v45;
      }
      v44[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v45) = v45 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v35 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v35, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    v33 = *(__n128 *)(v2 + 72);
    v34 = *(_QWORD *)(v2 + 88);
    if (!v33.n128_u64[0] || (sub_22EBF2014((__n128 *)v42, a1, &v33), v33 = *(__n128 *)v42, v34 = v43[0], v42[0]))
    {
      v42[0] = v43;
      v42[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v11)
      {
        v32 = v2;
        v14 = (_DWORD **)(v2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v15 = &v14[v11];
        do
        {
          v16 = *v14;
          if (*v14)
          {
            v39 = v41;
            v40 = 0x800000000;
            v17 = *(unsigned __int8 *)v16;
            v18 = v17 == 211;
            if (v17 == 211)
              v19 = v16;
            else
              v19 = 0;
            v20 = v19 + 16;
            if (v18)
              v21 = v20;
            else
              v21 = v16 + 20;
            v22 = v16[1];
            if ((_DWORD)v22)
            {
              v23 = 8 * v22;
              do
              {
                v24 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
                v37 = v24;
                v38 = 0;
                if (sub_22E793870(a1 + 1, &v37, &v38) && v38 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v24 = *(_QWORD *)(v38 + 8);
                v25 = *(unsigned int *)(v24 + 28);
                v22 = v40;
                if (v40 >= (unint64_t)HIDWORD(v40))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v22 = v40;
                }
                *((_QWORD *)v39 + v22) = (v25 >> 13) & 3 | v24;
                LODWORD(v22) = v40 + 1;
                LODWORD(v40) = v40 + 1;
                ++v21;
                v23 -= 8;
              }
              while (v23);
            }
            v26 = *(_QWORD *)(*a1 + 88);
            v27 = *((_QWORD *)&v35 + 1);
            if (*((_QWORD *)&v35 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v28 = (void *)sub_22E3CD3D4(v26 + 2032, LODWORD(__n[1]), 3);
                memcpy(v28, (const void *)__n[0], LODWORD(__n[1]));
                v27 = *((_QWORD *)&v35 + 1);
                LODWORD(v22) = v40;
              }
              else
              {
                v28 = (void *)__n[0];
              }
            }
            else
            {
              v28 = 0;
            }
            v30 = sub_22F0605AC(v26, 0, v27, (uint64_t)v28, (uint64_t)&v33, 1, (*v16 >> 20) & 1, v39, (uint64_t)v39 + 8 * v22);
            v31 = LODWORD(v42[1]);
            if (LODWORD(v42[1]) >= (unint64_t)HIDWORD(v42[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v31 = LODWORD(v42[1]);
            }
            *((_QWORD *)v42[0] + v31) = v30;
            ++LODWORD(v42[1]);
            if (v39 != v41)
              free(v39);
          }
          else
          {
            v29 = LODWORD(v42[1]);
            if (LODWORD(v42[1]) >= (unint64_t)HIDWORD(v42[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v42[1]);
            }
            *((_QWORD *)v42[0] + v29) = 0;
            ++LODWORD(v42[1]);
          }
          ++v14;
        }
        while (v14 != v15);
        v13 = (unsigned __int8 **)v42[0];
        v12 = LODWORD(v42[1]);
        v2 = v32;
      }
      else
      {
        v12 = 0;
        v13 = (unsigned __int8 **)v43;
      }
      v9 = sub_22F33F420(*a1, v44, v45, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 4), (uint64_t)&v35, (uint64_t)&v33, v13, v12);
      if (v42[0] != v43)
        free(v42[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v44 != v46)
    free(v44);
  return v9;
}

_DWORD *sub_22EBF9A40(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBDD628(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EBF9B8C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v14;
  uint64_t v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v5 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 32));
  if ((v5 & 1) != 0)
    return 0;
  v14 = 0;
  v6 = *(_DWORD *)(a2 + 16);
  if (v6 - 1 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a2 + 16);
  }
  v7 = (_QWORD *)(a2 + 40);
  if (a2 + 40 == v4 + 8 * v6)
  {
    v11 = 0;
    return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
  }
  else
  {
    v8 = 8 * v6 - 8;
    while (1)
    {
      v9 = sub_22EBDD628(a1, *v7);
      if ((v9 & 1) != 0)
        break;
      v10 = v14;
      if (v14 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v14;
      }
      v15[v10] = v9 & 0xFFFFFFFFFFFFFFFELL;
      v11 = ++v14;
      ++v7;
      v8 -= 8;
      if (!v8)
        return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
}

unsigned int *sub_22EBF9D20(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBDD628(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8EC4(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22EBF9E78(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 16;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBDD628(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EBF9FD0(_QWORD **a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = a2 + 16;
    while (1)
    {
      v7 = sub_22EBDD628(a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22EBDD628(a1, *(_QWORD *)&a2[2 * v9 + 16 + 2 * v9 + 2 * v9 + 2 * v9 + 2 * v9]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA44D0(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[12], a2[13], a2[14], 0, a2[1]);
}

_DWORD *sub_22EBFA160(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  int v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  void *v42[2];
  int v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  size_t __n[2];
  int v48[3];
  unint64_t v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[128];
  void *v54;
  uint64_t v55;
  _BYTE v56[128];
  __int128 v57;
  _QWORD v58[10];

  v58[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v48[0] = *(_DWORD *)a2;
  v48[1] = v6;
  v48[2] = v4;
  v54 = v56;
  v55 = 0x1000000000;
  v46 = 0u;
  *(_OWORD *)__n = 0u;
  *(_QWORD *)&v44 = 0;
  DWORD2(v44) = 0;
  v51 = v53;
  v52 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 136);
    do
    {
      v9 = sub_22EBDD628(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v55;
      if (v55 >= (unint64_t)HIDWORD(v55))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v55;
      }
      *((_QWORD *)v54 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v55) = v55 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22EBEE748(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_49;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v46, v14, v15);
  v44 = *(_OWORD *)(a2 + 56);
  v45 = *(_QWORD *)(a2 + 72);
  if ((_QWORD)v44)
  {
    sub_22EBF2014((__n128 *)&v57, a1, (__n128 *)&v44);
    v44 = v57;
    v45 = v58[0];
    if (!(_QWORD)v57)
      goto LABEL_46;
  }
  v38 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 136 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        *(_QWORD *)&v57 = v58;
        *((_QWORD *)&v57 + 1) = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v49 = v27;
            v50 = 0;
            if (sub_22E793870(a1 + 1, &v49, &v50)
              && v50 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v50[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = DWORD2(v57);
            if (DWORD2(v57) >= (unint64_t)HIDWORD(v57))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = DWORD2(v57);
            }
            *(_QWORD *)(v57 + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++DWORD2(v57);
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v46 + 1);
        if (*((_QWORD *)&v46 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v46 + 1);
            LODWORD(v25) = DWORD2(v57);
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v44, 1, (*v19 >> 20) & 1, (const void *)v57, v57 + 8 * v25);
        v34 = v52;
        if (v52 >= (unint64_t)HIDWORD(v52))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v52;
        }
        *((_QWORD *)v51 + v34) = v33;
        LODWORD(v52) = v52 + 1;
        if ((_QWORD *)v57 != v58)
          free((void *)v57);
      }
      else
      {
        v32 = v52;
        if (v52 >= (unint64_t)HIDWORD(v52))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v52;
        }
        *((_QWORD *)v51 + v32) = 0;
        LODWORD(v52) = v52 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v41 = v46;
  sub_22F0AB560(v42, (uint64_t)&v46 + 8);
  v39 = v44;
  v40 = v45;
  v35 = sub_22EC94100((_QWORD *)*a1, v38 + 80, 5u, v38 + 100, 5, (uint64_t)&v41, &v39, *(_DWORD *)(v38 + 120), *(_BYTE *)(v38 + 124), v37, *(_DWORD *)(v38 + 128), *(unsigned int *)(v38 + 132), (uint64_t)v54, v55, v48, 0, (unsigned __int8 **)v51, v52);
  if (v43)
    free(v42[1]);
LABEL_49:
  if (v51 != v53)
    free(v51);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v54 != v56)
    free(v54);
  return v35;
}

uint64_t sub_22EBFA638(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FCD4(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EBFA684(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBDD628(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EBFA7D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FB70(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBFA81C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F620(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBFA868(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F1E8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBFA8B4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EFAC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBFA900(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EBDD628(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22EC9F118(*a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 12), (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EBFA958(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  v5 = (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *a1;
  if (*(_DWORD **)(v2 + 16) != v5 || *(_DWORD *)(v6 + 11992) != -1)
    return sub_22F33E49C((_QWORD *)v6, v5, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 4));
  return v2;
}

uint64_t sub_22EBFA9C0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F4A0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EBFAA0C(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBDD628(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EBFAB58(uint64_t *a1, __n128 *a2)
{
  __n128 *v2;
  unsigned int v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v30;
  __n128 v31;
  unint64_t v32;
  __int128 v33;
  size_t __n[2];
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40[2];
  _QWORD v41[16];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[18];

  v2 = a2;
  v44[16] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x1000000000;
  v4 = a2[1].n128_u32[0];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v2[1].n128_u32[0];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = &v2[6].n128_u64[1];
    while (1)
    {
      v7 = sub_22EBDD628(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v43;
      }
      v42[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v43) = v43 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v28 = 0;
  }
  else
  {
LABEL_9:
    v33 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v33, v2[4].n128_u64[0], v2[4].n128_i64[1]);
    v31 = v2[5];
    v32 = v2[6].n128_u64[0];
    if (v31.n128_u64[0] && (sub_22EBF2014((__n128 *)v40, a1, &v31), v31 = *(__n128 *)v40, v32 = v41[0], !v40[0]))
    {
      v28 = 0;
    }
    else
    {
      v40[0] = v41;
      v40[1] = (void *)0x1000000000;
      v9 = v2[1].n128_u32[0];
      if ((_DWORD)v9)
      {
        v30 = v2;
        v10 = &v2[6].n128_u64[v9 + 1 + v9 + v9 + v9];
        v11 = &v10[v9];
        do
        {
          v12 = (_DWORD *)*v10;
          if (*v10)
          {
            v37 = v39;
            v38 = 0x800000000;
            v13 = *(unsigned __int8 *)v12;
            v14 = v13 == 211;
            if (v13 == 211)
              v15 = v12;
            else
              v15 = 0;
            v16 = v15 + 16;
            if (v14)
              v17 = v16;
            else
              v17 = v12 + 20;
            v18 = v12[1];
            if ((_DWORD)v18)
            {
              v19 = 8 * v18;
              do
              {
                v20 = *v17 & 0xFFFFFFFFFFFFFFFCLL;
                v35 = v20;
                v36 = 0;
                if (sub_22E793870(a1 + 1, &v35, &v36) && v36 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v20 = *(_QWORD *)(v36 + 8);
                v21 = *(unsigned int *)(v20 + 28);
                v18 = v38;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v18 = v38;
                }
                *((_QWORD *)v37 + v18) = (v21 >> 13) & 3 | v20;
                LODWORD(v18) = v38 + 1;
                LODWORD(v38) = v38 + 1;
                ++v17;
                v19 -= 8;
              }
              while (v19);
            }
            v22 = *(_QWORD *)(*a1 + 88);
            v23 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v24 = (void *)sub_22E3CD3D4(v22 + 2032, LODWORD(__n[1]), 3);
                memcpy(v24, (const void *)__n[0], LODWORD(__n[1]));
                v23 = *((_QWORD *)&v33 + 1);
                LODWORD(v18) = v38;
              }
              else
              {
                v24 = (void *)__n[0];
              }
            }
            else
            {
              v24 = 0;
            }
            v26 = sub_22F0605AC(v22, 0, v23, (uint64_t)v24, (uint64_t)&v31, 1, (*v12 >> 20) & 1, v37, (uint64_t)v37 + 8 * v18);
            v27 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v27) = v26;
            ++LODWORD(v40[1]);
            if (v37 != v39)
              free(v37);
          }
          else
          {
            v25 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v25) = 0;
            ++LODWORD(v40[1]);
          }
          ++v10;
        }
        while (v10 != v11);
        v2 = v30;
      }
      v28 = sub_22ECA41D4((_QWORD *)*a1, (uint64_t)v42, v43, v2[3].n128_i32[0], v2->n128_u32[0], v2->n128_i32[3], v2[3].n128_i32[1], v2[3].n128_i32[2], v2->n128_i32[1], (uint64_t)&v33, (uint64_t)&v31);
      if (v40[0] != v41)
        free(v40[0]);
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v42 != v44)
    free(v42);
  return v28;
}

uint64_t sub_22EBFAF9C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E1DC(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBFAFE8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 64));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1458(*a1, *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 44), *(_DWORD *)(a2 + 48), 0, *(_DWORD *)(a2 + 52), 0, *(_DWORD *)(a2 + 56), 0, *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EBFB04C(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBDD628(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EBFB198(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E25C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

int *sub_22EBFB1E4(uint64_t a1, uint64_t a2)
{
  int *v2;
  unsigned int v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  _QWORD *v14;
  unsigned int v16;
  _DWORD *v17[5];

  v2 = (int *)a2;
  v17[4] = *(_DWORD **)MEMORY[0x24BDAC8D0];
  v16 = 0;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v2[4];
  }
  if (v4)
  {
    v5 = 0;
    v6 = v2 + 6;
    v7 = 8 * v4;
    do
    {
      v8 = *v6;
      if (*v6)
      {
        v9 = sub_22EBDD628(a1, *v6);
        if ((v9 & 1) != 0)
          return 0;
        v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
        v5 |= v8 != (v9 & 0xFFFFFFFFFFFFFFFELL);
        v11 = v16;
        v12 = (_DWORD *)(v9 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        v10 = 0;
        v12 = 0;
        v11 = v16;
      }
      if (v11 >= 4)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v16;
        v12 = (_DWORD *)v10;
      }
      v17[v11] = v12;
      v13 = ++v16;
      ++v6;
      v7 -= 8;
    }
    while (v7);
    if ((v5 & 1) == 0)
      goto LABEL_14;
    v14 = *(_QWORD **)a1;
    return sub_22ECA137C(v14, v17, v13, *v2, v2[3], v2[1]);
  }
LABEL_14:
  v14 = *(_QWORD **)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
  {
    v13 = v16;
    return sub_22ECA137C(v14, v17, v13, *v2, v2[3], v2[1]);
  }
  return v2;
}

uint64_t sub_22EBFB37C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _DWORD **v12;
  _DWORD **v13;
  _DWORD *v14;
  int v15;
  BOOL v16;
  _DWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __int128 v33;
  size_t __n[2];
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40[2];
  _QWORD v41[16];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[18];

  v2 = a2;
  v44[16] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(v2 + 96);
    while (1)
    {
      v7 = sub_22EBDD628(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v43;
      }
      v42[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v43) = v43 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v33 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v33, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    v31 = *(__n128 *)(v2 + 72);
    v32 = *(_QWORD *)(v2 + 88);
    if (!v31.n128_u64[0] || (sub_22EBF2014((__n128 *)v40, a1, &v31), v31 = *(__n128 *)v40, v32 = v41[0], v40[0]))
    {
      v40[0] = v41;
      v40[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v11)
      {
        v30 = v2;
        v12 = (_DWORD **)(v2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v13 = &v12[v11];
        do
        {
          v14 = *v12;
          if (*v12)
          {
            v37 = v39;
            v38 = 0x800000000;
            v15 = *(unsigned __int8 *)v14;
            v16 = v15 == 211;
            if (v15 == 211)
              v17 = v14;
            else
              v17 = 0;
            v18 = v17 + 16;
            if (v16)
              v19 = v18;
            else
              v19 = v14 + 20;
            v20 = v14[1];
            if ((_DWORD)v20)
            {
              v21 = 8 * v20;
              do
              {
                v22 = *v19 & 0xFFFFFFFFFFFFFFFCLL;
                v35 = v22;
                v36 = 0;
                if (sub_22E793870(a1 + 1, &v35, &v36) && v36 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v22 = *(_QWORD *)(v36 + 8);
                v23 = *(unsigned int *)(v22 + 28);
                v20 = v38;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v20 = v38;
                }
                *((_QWORD *)v37 + v20) = (v23 >> 13) & 3 | v22;
                LODWORD(v20) = v38 + 1;
                LODWORD(v38) = v38 + 1;
                ++v19;
                v21 -= 8;
              }
              while (v21);
            }
            v24 = *(_QWORD *)(*a1 + 88);
            v25 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v26 = (void *)sub_22E3CD3D4(v24 + 2032, LODWORD(__n[1]), 3);
                memcpy(v26, (const void *)__n[0], LODWORD(__n[1]));
                v25 = *((_QWORD *)&v33 + 1);
                LODWORD(v20) = v38;
              }
              else
              {
                v26 = (void *)__n[0];
              }
            }
            else
            {
              v26 = 0;
            }
            v28 = sub_22F0605AC(v24, 0, v25, (uint64_t)v26, (uint64_t)&v31, 1, (*v14 >> 20) & 1, v37, (uint64_t)v37 + 8 * v20);
            v29 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v29) = v28;
            ++LODWORD(v40[1]);
            if (v37 != v39)
              free(v37);
          }
          else
          {
            v27 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v27) = 0;
            ++LODWORD(v40[1]);
          }
          ++v12;
        }
        while (v12 != v13);
        v2 = v30;
      }
      v9 = sub_22F33F264(*a1, (uint64_t)v42, v43, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 4), (uint64_t)&v33, (uint64_t)&v31);
      if (v40[0] != v41)
        free(v40[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v42 != v44)
    free(v42);
  return v9;
}

uint64_t sub_22EBFB7B8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F344(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EBFB804(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  __int128 v40;
  size_t __n[2];
  int v42[3];
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[128];
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  __n128 v51;
  _QWORD v52[10];

  v52[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v42[0] = *(_DWORD *)a2;
  v42[1] = v6;
  v42[2] = v4;
  v48 = v50;
  v49 = 0x1000000000;
  v40 = 0u;
  *(_OWORD *)__n = 0u;
  v38.n128_u64[0] = 0;
  v38.n128_u32[2] = 0;
  v39 = 0;
  v45 = v47;
  v46 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 104);
    do
    {
      v9 = sub_22EBDD628(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v49;
      if (v49 >= (unint64_t)HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v49;
      }
      *((_QWORD *)v48 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v49) = v49 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22EBEE748(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_48;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v40, v14, v15);
  v38 = *(__n128 *)(a2 + 56);
  v39 = *(_QWORD *)(a2 + 72);
  if (v38.n128_u64[0])
  {
    sub_22EBF2014(&v51, a1, &v38);
    v38 = v51;
    v39 = v52[0];
    if (!v51.n128_u64[0])
      goto LABEL_46;
  }
  v37 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 104 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        v51.n128_u64[0] = (unint64_t)v52;
        v51.n128_u64[1] = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v43 = v27;
            v44 = 0;
            if (sub_22E793870(a1 + 1, &v43, &v44)
              && v44 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v44[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = v51.n128_u32[2];
            if (v51.n128_u32[2] >= (unint64_t)v51.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = v51.n128_u32[2];
            }
            *(_QWORD *)(v51.n128_u64[0] + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++v51.n128_u32[2];
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v40 + 1);
        if (*((_QWORD *)&v40 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v40 + 1);
            LODWORD(v25) = v51.n128_u32[2];
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v38, 1, (*v19 >> 20) & 1, (const void *)v51.n128_u64[0], v51.n128_u64[0] + 8 * v25);
        v34 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v46;
        }
        *((_QWORD *)v45 + v34) = v33;
        LODWORD(v46) = v46 + 1;
        if ((_QWORD *)v51.n128_u64[0] != v52)
          free((void *)v51.n128_u64[0]);
      }
      else
      {
        v32 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v46;
        }
        *((_QWORD *)v45 + v32) = 0;
        LODWORD(v46) = v46 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v35 = sub_22ECA7CAC((_QWORD *)*a1, (int *)(v37 + 80), 2u, (int *)(v37 + 88), 2, (uint64_t)&v40, (__int128 *)&v38, *(unsigned int *)(v37 + 96), (uint64_t)v48, v49, v42, (unsigned __int8 **)v45, v46);
LABEL_48:
  if (v45 != v47)
    free(v45);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v48 != v50)
    free(v48);
  return v35;
}

uint64_t sub_22EBFBC80(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBDD628(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33ECC8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

unsigned int *sub_22EBFBCCC(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBDD628(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8A30(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22EBFBE24(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  _DWORD *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBDD628(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA819C(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22EBFBF7C(uint64_t *a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[49];

  v16[48] = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v15 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 0;
    v6 = a2 + 6;
    v7 = 2 * v4;
    do
    {
      v8 = *(_QWORD *)&v6[2 * (v5 + 1)];
      v9 = *(_QWORD *)&v6[4 * a2[4] + v5];
      v10 = sub_22EBDD628(a1, *(_QWORD *)&v6[2 * v5]);
      if ((v10 & 1) == 0)
      {
        if (!v8 || (v8 = sub_22EBDD628(a1, v8), (v8 & 1) == 0))
        {
          v11 = (_QWORD *)sub_22F2BAB24((uint64_t)&v14);
          *v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
          v11[1] = v8 & 0xFFFFFFFFFFFFFFFELL;
          v11[2] = v9;
        }
      }
      v5 += 2;
    }
    while (v7 != v5);
  }
  v12 = sub_22ECB0F9C(*a1, *a2, a2[3], a2[1], (uint64_t)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

unint64_t sub_22EBFC0E8(unint64_t result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  _QWORD *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;

  v6 = a2;
  v7 = (_QWORD *)result;
  v8 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)result) >> 3) >= a4)
  {
    v13 = *(char **)(result + 8);
    if (0xAAAAAAAAAAAAAAABLL * ((v13 - v8) >> 3) >= a4)
    {
      if (a2 == a3)
      {
        v18 = *(char **)result;
      }
      else
      {
        v18 = *(char **)result;
        do
        {
          result = sub_22E892708((uint64_t)v8, (uint64_t)v6);
          v6 += 3;
          v8 += 24;
          v18 += 24;
        }
        while (v6 != a3);
        v13 = (char *)v7[1];
      }
      if (v13 != v18)
      {
        v19 = v13;
        do
        {
          v21 = *((_QWORD *)v19 - 3);
          v19 -= 24;
          v20 = v21;
          if (v21)
          {
            result = *((_QWORD *)v13 - 2);
            if (result)
            {
              result = sub_22E3BB10C(result, v20);
              *((_QWORD *)v13 - 3) = 0;
            }
          }
          v13 = v19;
        }
        while (v19 != v18);
      }
      v7[1] = v18;
    }
    else
    {
      v14 = &a2[(v13 - v8) >> 3];
      if (v13 != v8)
      {
        v15 = 8 * ((v13 - v8) >> 3);
        do
        {
          result = sub_22E892708((uint64_t)v8, (uint64_t)v6);
          v6 += 3;
          v8 += 24;
          v15 -= 24;
        }
        while (v15);
        v8 = (char *)v7[1];
      }
      v16 = v8;
      if (v14 != a3)
      {
        v16 = v8;
        result = (unint64_t)v8;
        do
        {
          v17 = sub_22E78D434(result, v14);
          v14 += 3;
          result = v17 + 24;
          v16 += 24;
        }
        while (v14 != a3);
      }
      v7[1] = v16;
    }
  }
  else
  {
    sub_22EA44D30((void **)result);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_34;
    v9 = 0x5555555555555556 * ((uint64_t)(v7[2] - *v7) >> 3);
    if (v9 <= a4)
      v9 = a4;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[2] - *v7) >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_34:
      abort();
    v11 = 3 * v10;
    result = (unint64_t)operator new(24 * v10);
    *v7 = result;
    v7[1] = result;
    v7[2] = result + 8 * v11;
    while (v6 != a3)
    {
      v12 = sub_22E78D434(result, v6);
      v6 += 3;
      result = v12 + 24;
    }
    v7[1] = result;
  }
  return result;
}

uint64_t sub_22EBFC2D8(_DWORD *a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  _QWORD *v5;

  v5 = 0;
  result = sub_22F2A2198((uint64_t)a1, a2, &v5);
  if ((_DWORD)result)
  {
    *v5 = -8192;
    v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

uint64_t sub_22EBFC328(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  char v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16[5];

  v16[4] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 3)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v16;
    v10 = 1;
    v11 = (uint64_t *)(a1 + 8);
    do
    {
      v12 = v8;
      if ((*v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *v9 = *v11;
        v9[1] = v11[1];
        v9 += 2;
      }
      v11 = (uint64_t *)(a1 + 8 + 16 * v10);
      v8 = 1;
      v10 = 2;
    }
    while ((v12 & 1) == 0);
    if (a2 > 2)
    {
      *(_DWORD *)a1 &= ~1u;
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    return sub_22F333CD0(a1, v16, v9);
  }
  else
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 2)
    {
      v15 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F333CD0(a1, v6, &v6[2 * v7]);
    return llvm::deallocate_buffer((llvm *)v6, (void *)(16 * v7));
  }
}

uint64_t sub_22EBFC4B4(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  int v5;
  uint64_t result;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  BOOL v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t **v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t **v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned int v93;
  BOOL v94;
  uint64_t v95;
  uint64_t **v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t **v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t **v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t **v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t **v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t **v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t **v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  BOOL v127;
  uint64_t v128;
  uint64_t **v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  BOOL v134;
  uint64_t v135;
  uint64_t **v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t **v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t **v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  BOOL v154;
  uint64_t v155;
  uint64_t **v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t **v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t **v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t **v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t *v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t **v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  BOOL v185;
  uint64_t v186;
  uint64_t **v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t **v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t **v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t *v205;
  unint64_t *v206;
  unint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t **v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t **v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t **v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  BOOL v225;
  uint64_t v226;
  uint64_t **v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  BOOL v235;
  uint64_t v236;
  uint64_t **v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  BOOL v242;
  uint64_t v243;
  uint64_t **v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t **v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t **v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t **v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t **v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  _DWORD *v275;
  uint64_t v276;
  uint64_t *v277;
  unsigned int v278;
  uint64_t v279;
  unsigned int v280;
  BOOL v281;
  uint64_t v282;
  uint64_t **v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unsigned int v290;
  BOOL v291;
  uint64_t v292;
  uint64_t **v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t **v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t **v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned int v305;
  BOOL v306;
  uint64_t v307;
  uint64_t **v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t **v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  unsigned int v318;
  uint64_t v319;
  uint64_t **v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t **v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t **v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t **v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t *v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t **v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int v344;
  uint64_t v345;
  uint64_t **v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t **v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t **v365;
  uint64_t *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t **v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  unsigned int v373;
  BOOL v374;
  uint64_t v375;
  uint64_t **v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unsigned int v382;
  uint64_t v383;
  uint64_t **v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t **v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t v395;
  unsigned int v396;
  uint64_t v397;
  uint64_t **v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t *v404;
  unsigned int v405;
  uint64_t v406;
  uint64_t **v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int v411;
  BOOL v412;
  uint64_t v413;
  uint64_t **v414;
  uint64_t *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t **v418;
  uint64_t *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t **v422;
  uint64_t *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t **v426;
  uint64_t *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t **v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t **v434;
  uint64_t *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t **v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  int v442;
  uint64_t v443;
  unsigned int v444;
  uint64_t v445;
  uint64_t **v446;
  uint64_t *v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  unsigned int v451;
  uint64_t v452;
  uint64_t **v453;
  uint64_t *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t **v457;
  uint64_t *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t **v461;
  uint64_t *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t i;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unsigned int v471;
  BOOL v472;
  uint64_t v473;
  uint64_t **v474;
  uint64_t *v475;
  uint64_t v476;
  uint64_t v477;
  unsigned int v478;
  uint64_t v479;
  uint64_t **v480;
  uint64_t *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t **v484;
  uint64_t *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t *v488;
  uint64_t **v489;
  uint64_t *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t *v493;
  unsigned int v494;
  uint64_t v495;
  uint64_t **v496;
  uint64_t *v497;
  uint64_t v498;
  uint64_t v499;
  char *v500;
  uint64_t v501;
  uint64_t **v502;
  uint64_t *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t **v506;
  uint64_t *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t **v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  uint64_t v516;
  unsigned int v517;
  uint64_t v518;
  uint64_t **v519;
  uint64_t *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t **v530;
  uint64_t *v531;
  uint64_t v532;
  uint64_t v533;
  BOOL v534;
  uint64_t **v535;
  uint64_t *v536;
  uint64_t v537;
  uint64_t v538;
  BOOL v539;
  BOOL v540;
  BOOL v541;
  BOOL v542;
  BOOL v543;
  int *v544;
  BOOL v545;
  BOOL v546;
  BOOL v547;
  uint64_t **v548;
  uint64_t *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int v559;
  uint64_t v560;

  if (!a2)
    return 1;
  v4 = a2 + 28;
  v5 = *(_DWORD *)(a2 + 28) & 0x7F;
  if ((*(_DWORD *)(a2 + 28) & 0x200) != 0)
  {
    if (v5 == 38)
      return sub_22EC0033C(a1, a2);
    return 1;
  }
  switch(v5)
  {
    case 0:
      result = sub_22EC01660(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v8 = *v7;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v10 = *(_QWORD *)v9 + 8 * *(unsigned int *)(v9 + 8);
      }
      else
      {
        v10 = 0;
      }
      while (2)
      {
        if (v8 == (uint64_t *)v10)
          return 1;
        if ((sub_22EC016FC(a1, *v8) & 1) != 0)
        {
          ++v8;
          continue;
        }
        break;
      }
      return 0;
    case 1:
      v248 = *(unint64_t **)(a2 + 96);
      if (v248)
      {
        result = sub_22EC007AC(a1, *v248, (uint64_t)(v248 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v249 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
      result = sub_22EBD196C(a1, v249, 0);
      if (!(_DWORD)result)
        return result;
      v250 = *(unsigned int *)(a2 + 112);
      if (!(_DWORD)v250)
        goto LABEL_454;
      v251 = 16 * v250;
      v252 = (_QWORD *)(*(_QWORD *)(a2 + 104) + 8);
      while (1)
      {
        if (*v252)
        {
          result = sub_22EBD196C(a1, *v252, 0);
          if (!(_DWORD)result)
            break;
        }
        v252 += 2;
        v251 -= 16;
        if (!v251)
        {
LABEL_454:
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v254 = *v253;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v256 = *(_QWORD *)v255 + 8 * *(unsigned int *)(v255 + 8);
            }
            else
            {
              v256 = 0;
            }
            while (v254 != (uint64_t *)v256)
            {
              if ((sub_22EC016FC(a1, *v254) & 1) == 0)
                return 0;
              ++v254;
            }
          }
          return 1;
        }
      }
      return result;
    case 2:
      result = sub_22EBD196C(a1, *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v217 = *v216;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v219 = *(_QWORD *)v218 + 8 * *(unsigned int *)(v218 + 8);
      }
      else
      {
        v219 = 0;
      }
      while (2)
      {
        if (v217 == (uint64_t *)v219)
          return 1;
        if ((sub_22EC016FC(a1, *v217) & 1) != 0)
        {
          ++v217;
          continue;
        }
        break;
      }
      return 0;
    case 3:
      result = sub_22EBFC4B4(a1);
      if (!(_DWORD)result)
        return result;
      v231 = *(_QWORD *)(a2 + 48);
      if (!v231)
        goto LABEL_421;
      v232 = *(unsigned int *)(v231 + 8);
      if (!(_DWORD)v232)
        goto LABEL_421;
      v233 = v231 + 16;
      while ((sub_22EC01548(a1, v233) & 1) != 0)
      {
        v233 += 32;
        if (!--v232)
        {
LABEL_421:
          v234 = *(_DWORD *)v4 & 0x7F;
          v235 = v234 > 0x39 || ((1 << v234) & 0x3F0003E01011066) == 0;
          if (v235
            && (v234 - 70 <= 0xD ? (v541 = ((1 << (v234 - 70)) & 0x2803) == 0) : (v541 = 1), v541 && v234 - 19 > 4))
          {
            v236 = 0;
          }
          else
          {
            v236 = sub_22EFCAE04(a2);
          }
          result = sub_22EC01660(a1, v236);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v238 = *v237;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v240 = *(_QWORD *)v239 + 8 * *(unsigned int *)(v239 + 8);
            }
            else
            {
              v240 = 0;
            }
            while (v238 != (uint64_t *)v240)
            {
              if ((sub_22EC016FC(a1, *v238) & 1) == 0)
                return 0;
              ++v238;
            }
          }
          return 1;
        }
      }
      return 0;
    case 4:
      result = sub_22EC01660(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v173 = *v172;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v175 = *(_QWORD *)v174 + 8 * *(unsigned int *)(v174 + 8);
      }
      else
      {
        v175 = 0;
      }
      while (2)
      {
        if (v173 == (uint64_t *)v175)
          return 1;
        if ((sub_22EC016FC(a1, *v173) & 1) != 0)
        {
          ++v173;
          continue;
        }
        break;
      }
      return 0;
    case 5:
      result = sub_22EC01660(a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v298 = *v297;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v300 = *(_QWORD *)v299 + 8 * *(unsigned int *)(v299 + 8);
      }
      else
      {
        v300 = 0;
      }
      while (2)
      {
        if (v298 == (uint64_t *)v300)
          return 1;
        if ((sub_22EC016FC(a1, *v298) & 1) != 0)
        {
          ++v298;
          continue;
        }
        break;
      }
      return 0;
    case 6:
      result = sub_22EC01660(a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v325 = *v324;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v327 = *(_QWORD *)v326 + 8 * *(unsigned int *)(v326 + 8);
      }
      else
      {
        v327 = 0;
      }
      while (2)
      {
        if (v325 == (uint64_t *)v327)
          return 1;
        if ((sub_22EC016FC(a1, *v325) & 1) != 0)
        {
          ++v325;
          continue;
        }
        break;
      }
      return 0;
    case 7:
      result = sub_22EBD196C(a1, *(_QWORD *)(a2 + 40), 0);
      if (!(_DWORD)result)
        return result;
      v241 = *(_DWORD *)v4 & 0x7F;
      v242 = v241 > 0x39 || ((1 << v241) & 0x3F0003E01011066) == 0;
      v243 = !v242 || v241 - 70 <= 0xD && ((1 << (v241 - 70)) & 0x2803) != 0 || v241 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EC01660(a1, v243);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v245 = *v244;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v247 = *(_QWORD *)v246 + 8 * *(unsigned int *)(v246 + 8);
      }
      else
      {
        v247 = 0;
      }
      while (2)
      {
        if (v245 == (uint64_t *)v247)
          return 1;
        if ((sub_22EC016FC(a1, *v245) & 1) != 0)
        {
          ++v245;
          continue;
        }
        break;
      }
      return 0;
    case 8:
      v336 = *(_QWORD *)(a2 + 40);
      v337 = (unint64_t *)(v336 & 0xFFFFFFFFFFFFFFF8);
      if ((v336 & 4) != 0 && v337)
      {
        if ((sub_22EC007AC(a1, *v337, (uint64_t)(v337 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22EBFC4B4(a1);
        if (!(_DWORD)result)
          return result;
      }
      v478 = *(_DWORD *)v4 & 0x7F;
      if (v478 <= 0x39 && ((1 << v478) & 0x3F0003E01011066) != 0
        || v478 - 70 <= 0xD && ((1 << (v478 - 70)) & 0x2803) != 0
        || v478 - 19 <= 4)
      {
        v479 = sub_22EFCAE04(a2);
      }
      else
      {
        v479 = 0;
      }
      result = sub_22EC01660(a1, v479);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v481 = *v480;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v483 = *(_QWORD *)v482 + 8 * *(unsigned int *)(v482 + 8);
      }
      else
      {
        v483 = 0;
      }
      while (2)
      {
        if (v481 == (uint64_t *)v483)
          return 1;
        if ((sub_22EC016FC(a1, *v481) & 1) != 0)
        {
          ++v481;
          continue;
        }
        break;
      }
      return 0;
    case 9:
      v204 = *(_QWORD *)(a2 + 48);
      v205 = (unint64_t *)(v204 & 0xFFFFFFFFFFFFFFF8);
      if ((v204 & 4) != 0 && v205)
      {
        if ((sub_22EC007AC(a1, *v205, (uint64_t)(v205 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22EBFC4B4(a1);
        if (!(_DWORD)result)
          return result;
      }
      v465 = *(unsigned int *)(a2 + 36);
      if (!(_DWORD)v465)
        goto LABEL_859;
      for (i = 0; i != v465; ++i)
      {
        v467 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * i);
        v468 = *(_DWORD *)(v467 + 12) & 0x1FFFFFFF;
        if ((_DWORD)v468)
        {
          v469 = v467 + 16;
          v470 = 8 * v468;
          while ((sub_22EBFC4B4(a1) & 1) != 0)
          {
            v469 += 8;
            v470 -= 8;
            if (!v470)
              goto LABEL_858;
          }
          return 0;
        }
LABEL_858:
        ;
      }
LABEL_859:
      v471 = *(_DWORD *)v4 & 0x7F;
      v472 = v471 > 0x39 || ((1 << v471) & 0x3F0003E01011066) == 0;
      if (v472 && (v471 - 70 <= 0xD ? (v547 = ((1 << (v471 - 70)) & 0x2803) == 0) : (v547 = 1), v547 && v471 - 19 > 4))
        v473 = 0;
      else
        v473 = sub_22EFCAE04(a2);
      result = sub_22EC01660(a1, v473);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v475 = *v474;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v477 = *(_QWORD *)v476 + 8 * *(unsigned int *)(v476 + 8);
        }
        else
        {
          v477 = 0;
        }
        while (v475 != (uint64_t *)v477)
        {
          if ((sub_22EC016FC(a1, *v475) & 1) == 0)
            return 0;
          ++v475;
        }
      }
      return 1;
    case 10:
      result = sub_22EC01660(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v333 = *v332;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v335 = *(_QWORD *)v334 + 8 * *(unsigned int *)(v334 + 8);
      }
      else
      {
        v335 = 0;
      }
      while (2)
      {
        if (v333 == (uint64_t *)v335)
          return 1;
        if ((sub_22EC016FC(a1, *v333) & 1) != 0)
        {
          ++v333;
          continue;
        }
        break;
      }
      return 0;
    case 11:
      return (sub_22EC00384(a1, a2) & 1) != 0;
    case 12:
      result = sub_22EC01660(a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v201 = *v200;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v203 = *(_QWORD *)v202 + 8 * *(unsigned int *)(v202 + 8);
      }
      else
      {
        v203 = 0;
      }
      while (2)
      {
        if (v201 == (uint64_t *)v203)
          return 1;
        if ((sub_22EC016FC(a1, *v201) & 1) != 0)
        {
          ++v201;
          continue;
        }
        break;
      }
      return 0;
    case 13:
      if (!sub_22EC0066C(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v316 = *(_DWORD *)(a2 + 24);
      v317 = *(_QWORD *)(a2 + 80);
      v558 = *(_QWORD *)(a2 + 40);
      v559 = v316;
      v560 = v317;
      if (!sub_22EC006F4(a1, &v558))
        return 0;
      if ((v318 = *(_DWORD *)v4 & 0x7F, v318 <= 0x39) && ((1 << v318) & 0x3F0003E01011066) != 0
        || v318 - 70 <= 0xD && ((1 << (v318 - 70)) & 0x2803) != 0
        || v318 - 19 <= 4)
      {
        v319 = sub_22EFCAE04(a2);
      }
      else
      {
        v319 = 0;
      }
      if (!sub_22EC01660(a1, v319))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v321 = *v320;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v323 = *(_QWORD *)v322 + 8 * *(unsigned int *)(v322 + 8);
      }
      else
      {
        v323 = 0;
      }
      while (2)
      {
        if (v321 == (uint64_t *)v323)
          return 1;
        if ((sub_22EC016FC(a1, *v321) & 1) != 0)
        {
          ++v321;
          continue;
        }
        break;
      }
      return 0;
    case 14:
      result = sub_22EC01660(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v141 = *v140;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v143 = *(_QWORD *)v142 + 8 * *(unsigned int *)(v142 + 8);
      }
      else
      {
        v143 = 0;
      }
      while (2)
      {
        if (v141 == (uint64_t *)v143)
          return 1;
        if ((sub_22EC016FC(a1, *v141) & 1) != 0)
        {
          ++v141;
          continue;
        }
        break;
      }
      return 0;
    case 15:
      result = sub_22EC01660(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v221 = *v220;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v223 = *(_QWORD *)v222 + 8 * *(unsigned int *)(v222 + 8);
      }
      else
      {
        v223 = 0;
      }
      while (2)
      {
        if (v221 == (uint64_t *)v223)
          return 1;
        if ((sub_22EC016FC(a1, *v221) & 1) != 0)
        {
          ++v221;
          continue;
        }
        break;
      }
      return 0;
    case 16:
      result = sub_22EC01660(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v123 = *v122;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v125 = *(_QWORD *)v124 + 8 * *(unsigned int *)(v124 + 8);
      }
      else
      {
        v125 = 0;
      }
      while (2)
      {
        if (v123 == (uint64_t *)v125)
          return 1;
        if ((sub_22EC016FC(a1, *v123) & 1) != 0)
        {
          ++v123;
          continue;
        }
        break;
      }
      return 0;
    case 17:
      result = sub_22EC0066C(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v264 = *v263;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v266 = *(_QWORD *)v265 + 8 * *(unsigned int *)(v265 + 8);
      }
      else
      {
        v266 = 0;
      }
      while (2)
      {
        if (v264 == (uint64_t *)v266)
          return 1;
        if ((sub_22EC016FC(a1, *v264) & 1) != 0)
        {
          ++v264;
          continue;
        }
        break;
      }
      return 0;
    case 18:
      result = sub_22EC01660(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v329 = *v328;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v331 = *(_QWORD *)v330 + 8 * *(unsigned int *)(v330 + 8);
      }
      else
      {
        v331 = 0;
      }
      while (2)
      {
        if (v329 == (uint64_t *)v331)
          return 1;
        if ((sub_22EC016FC(a1, *v329) & 1) != 0)
        {
          ++v329;
          continue;
        }
        break;
      }
      return 0;
    case 19:
      v361 = *(_QWORD *)(a2 + 112);
      if (!v361)
        goto LABEL_650;
      v362 = *(unsigned int *)(v361 + 8);
      if (!(_DWORD)v362)
        goto LABEL_650;
      v363 = (uint64_t *)(v361 + 16);
      v364 = 8 * v362;
      while ((sub_22EC0049C(a1, *v363) & 1) != 0)
      {
        ++v363;
        v364 -= 8;
        if (!v364)
        {
LABEL_650:
          result = sub_22EC01660(a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v366 = *v365;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v368 = *(_QWORD *)v367 + 8 * *(unsigned int *)(v367 + 8);
            }
            else
            {
              v368 = 0;
            }
            while (v366 != (uint64_t *)v368)
            {
              if ((sub_22EC016FC(a1, *v366) & 1) == 0)
                return 0;
              ++v366;
            }
          }
          return 1;
        }
      }
      return 0;
    case 20:
      result = sub_22EC01660(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v284 = *v283;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v286 = *(_QWORD *)v285 + 8 * *(unsigned int *)(v285 + 8);
      }
      else
      {
        v286 = 0;
      }
      while (2)
      {
        if (v284 == (uint64_t *)v286)
          return 1;
        if ((sub_22EC016FC(a1, *v284) & 1) != 0)
        {
          ++v284;
          continue;
        }
        break;
      }
      return 0;
    case 21:
      result = sub_22EC01660(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v313 = *v312;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v315 = *(_QWORD *)v314 + 8 * *(unsigned int *)(v314 + 8);
      }
      else
      {
        v315 = 0;
      }
      while (2)
      {
        if (v313 == (uint64_t *)v315)
          return 1;
        if ((sub_22EC016FC(a1, *v313) & 1) != 0)
        {
          ++v313;
          continue;
        }
        break;
      }
      return 0;
    case 22:
      v354 = *(_QWORD *)(a2 + 112);
      if (!v354)
        goto LABEL_637;
      v355 = *(unsigned int *)(v354 + 8);
      if (!(_DWORD)v355)
        goto LABEL_637;
      v356 = (uint64_t *)(v354 + 16);
      v357 = 8 * v355;
      while ((sub_22EC0049C(a1, *v356) & 1) != 0)
      {
        ++v356;
        v357 -= 8;
        if (!v357)
        {
LABEL_637:
          v358 = (unint64_t *)sub_22F259044(a2);
          if (v358)
          {
            result = sub_22EC007AC(a1, *v358, (uint64_t)(v358 + 1));
            if (!(_DWORD)result)
              return result;
          }
          v359 = *(_QWORD *)(a2 + 120);
          if (!v359)
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
            v359 = *(_QWORD *)(a2 + 120);
          }
          if (v359 < 8)
            v360 = 0;
          else
            v360 = *(_QWORD *)(v359 & 0xFFFFFFFFFFFFFFF8);
          if (v360 == a2)
          {
            v552 = sub_22F2590A8(a2);
            v553 = sub_22F25910C(a2);
            v554 = sub_22F259178(a2);
            v555 = sub_22F2591DC(a2);
            if (v552 != v553 && v554 != v555)
            {
              v556 = v554 + 4;
              v557 = v552 + 8;
              do
              {
                if (v557 == v553)
                  break;
                v557 += 8;
                v31 = v556 == v555;
                v556 += 4;
              }
              while (!v31);
            }
          }
          result = sub_22EC01660(a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v531 = *v530;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v533 = *(_QWORD *)v532 + 8 * *(unsigned int *)(v532 + 8);
            }
            else
            {
              v533 = 0;
            }
            while (v531 != (uint64_t *)v533)
            {
              if ((sub_22EC016FC(a1, *v531) & 1) == 0)
                return 0;
              ++v531;
            }
          }
          return 1;
        }
      }
      return 0;
    case 23:
      v388 = *(_QWORD *)(a2 + 104);
      if (!v388)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
        v388 = *(_QWORD *)(a2 + 104);
      }
      if (v388 < 8)
        v389 = 0;
      else
        v389 = *(_QWORD *)(v388 & 0xFFFFFFFFFFFFFFF8);
      if (v389 == a2)
      {
        v523 = sub_22F259248(a2);
        v525 = v524;
        v526 = sub_22F2592CC(a2);
        if (v523 != v525 && v526 != v527)
        {
          v528 = v526 + 4;
          v529 = v523 + 8;
          do
          {
            if (v529 == v525)
              break;
            v529 += 8;
            v31 = v528 == v527;
            v528 += 4;
          }
          while (!v31);
        }
      }
      result = sub_22EC01660(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v485 = *v484;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v487 = *(_QWORD *)v486 + 8 * *(unsigned int *)(v486 + 8);
      }
      else
      {
        v487 = 0;
      }
      while (2)
      {
        if (v485 == (uint64_t *)v487)
          return 1;
        if ((sub_22EC016FC(a1, *v485) & 1) != 0)
        {
          ++v485;
          continue;
        }
        break;
      }
      return 0;
    case 24:
      v207 = *(unint64_t **)(a2 + 88);
      if (v207)
      {
        result = sub_22EC007AC(a1, *v207, (uint64_t)(v207 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v208 = *(unsigned int *)(a2 + 104);
      if (!(_DWORD)v208)
        goto LABEL_379;
      v209 = *(_QWORD *)(a2 + 96);
      v210 = 8 * v208;
      while ((sub_22EBFC4B4(a1) & 1) != 0)
      {
        v209 += 8;
        v210 -= 8;
        if (!v210)
        {
LABEL_379:
          if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 72))(a2))
          {
            v211 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
            result = sub_22EBD196C(a1, v211, 0);
            if (!(_DWORD)result)
              return result;
          }
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v213 = *v212;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v215 = *(_QWORD *)v214 + 8 * *(unsigned int *)(v214 + 8);
            }
            else
            {
              v215 = 0;
            }
            while (v213 != (uint64_t *)v215)
            {
              if ((sub_22EC016FC(a1, *v213) & 1) == 0)
                return 0;
              ++v213;
            }
          }
          return 1;
        }
      }
      return 0;
    case 25:
      v206 = *(unint64_t **)(a2 + 64);
      if (v206)
      {
        if ((sub_22EC007AC(a1, *v206, (uint64_t)(v206 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22EC00F14(a1, *(_QWORD *)(a2 + 56));
        if (!(_DWORD)result)
          return result;
      }
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v507 = *v506;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v509 = *(_QWORD *)v508 + 8 * *(unsigned int *)(v508 + 8);
      }
      else
      {
        v509 = 0;
      }
      while (2)
      {
        if (v507 == (uint64_t *)v509)
          return 1;
        if ((sub_22EC016FC(a1, *v507) & 1) != 0)
        {
          ++v507;
          continue;
        }
        break;
      }
      return 0;
    case 26:
      result = sub_22EC01C98(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      v411 = *(_DWORD *)v4 & 0x7F;
      v412 = v411 > 0x39 || ((1 << v411) & 0x3F0003E01011066) == 0;
      v413 = !v412 || v411 - 70 <= 0xD && ((1 << (v411 - 70)) & 0x2803) != 0 || v411 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EC01660(a1, v413);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v415 = *v414;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v417 = *(_QWORD *)v416 + 8 * *(unsigned int *)(v416 + 8);
      }
      else
      {
        v417 = 0;
      }
      while (2)
      {
        if (v415 == (uint64_t *)v417)
          return 1;
        if ((sub_22EC016FC(a1, *v415) & 1) != 0)
        {
          ++v415;
          continue;
        }
        break;
      }
      return 0;
    case 27:
      result = sub_22EC01C98(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EBD196C(a1, *(_QWORD *)(a2 + 64), 0);
      if (!(_DWORD)result)
        return result;
      if ((v112 = *(_DWORD *)v4 & 0x7F, v112 <= 0x39) && ((1 << v112) & 0x3F0003E01011066) != 0
        || v112 - 70 <= 0xD && ((1 << (v112 - 70)) & 0x2803) != 0
        || v112 - 19 <= 4)
      {
        v113 = sub_22EFCAE04(a2);
      }
      else
      {
        v113 = 0;
      }
      result = sub_22EC01660(a1, v113);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v115 = *v114;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v117 = *(_QWORD *)v116 + 8 * *(unsigned int *)(v116 + 8);
      }
      else
      {
        v117 = 0;
      }
      while (2)
      {
        if (v115 == (uint64_t *)v117)
          return 1;
        if ((sub_22EC016FC(a1, *v115) & 1) != 0)
        {
          ++v115;
          continue;
        }
        break;
      }
      return 0;
    case 28:
      result = sub_22EC01C98(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EBFC4B4(a1);
      if (!(_DWORD)result)
        return result;
      if ((v390 = *(_DWORD *)v4 & 0x7F, v390 <= 0x39) && ((1 << v390) & 0x3F0003E01011066) != 0
        || v390 - 70 <= 0xD && ((1 << (v390 - 70)) & 0x2803) != 0
        || v390 - 19 <= 4)
      {
        v391 = sub_22EFCAE04(a2);
      }
      else
      {
        v391 = 0;
      }
      result = sub_22EC01660(a1, v391);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v393 = *v392;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v395 = *(_QWORD *)v394 + 8 * *(unsigned int *)(v394 + 8);
      }
      else
      {
        v395 = 0;
      }
      while (2)
      {
        if (v393 == (uint64_t *)v395)
          return 1;
        if ((sub_22EC016FC(a1, *v393) & 1) != 0)
        {
          ++v393;
          continue;
        }
        break;
      }
      return 0;
    case 29:
      result = sub_22EC01C98(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EBFC4B4(a1);
      if (!(_DWORD)result)
        return result;
      if ((v396 = *(_DWORD *)v4 & 0x7F, v396 <= 0x39) && ((1 << v396) & 0x3F0003E01011066) != 0
        || v396 - 70 <= 0xD && ((1 << (v396 - 70)) & 0x2803) != 0
        || v396 - 19 <= 4)
      {
        v397 = sub_22EFCAE04(a2);
      }
      else
      {
        v397 = 0;
      }
      result = sub_22EC01660(a1, v397);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v399 = *v398;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v401 = *(_QWORD *)v400 + 8 * *(unsigned int *)(v400 + 8);
      }
      else
      {
        v401 = 0;
      }
      while (2)
      {
        if (v399 == (uint64_t *)v401)
          return 1;
        if ((sub_22EC016FC(a1, *v399) & 1) != 0)
        {
          ++v399;
          continue;
        }
        break;
      }
      return 0;
    case 30:
      result = sub_22EBFC4B4(a1);
      if (!(_DWORD)result)
        return result;
      result = sub_22EC01C98(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v338 = *(_DWORD *)v4 & 0x7F, v338 <= 0x39) && ((1 << v338) & 0x3F0003E01011066) != 0
        || v338 - 70 <= 0xD && ((1 << (v338 - 70)) & 0x2803) != 0
        || v338 - 19 <= 4)
      {
        v339 = sub_22EFCAE04(a2);
      }
      else
      {
        v339 = 0;
      }
      result = sub_22EC01660(a1, v339);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v341 = *v340;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v343 = *(_QWORD *)v342 + 8 * *(unsigned int *)(v342 + 8);
      }
      else
      {
        v343 = 0;
      }
      while (2)
      {
        if (v341 == (uint64_t *)v343)
          return 1;
        if ((sub_22EC016FC(a1, *v341) & 1) != 0)
        {
          ++v341;
          continue;
        }
        break;
      }
      return 0;
    case 31:
      result = sub_22EC01C98(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EBFC4B4(a1);
      if (!(_DWORD)result)
        return result;
      if ((v257 = *(_DWORD *)v4 & 0x7F, v257 <= 0x39) && ((1 << v257) & 0x3F0003E01011066) != 0
        || v257 - 70 <= 0xD && ((1 << (v257 - 70)) & 0x2803) != 0
        || v257 - 19 <= 4)
      {
        v258 = sub_22EFCAE04(a2);
      }
      else
      {
        v258 = 0;
      }
      result = sub_22EC01660(a1, v258);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v260 = *v259;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v262 = *(_QWORD *)v261 + 8 * *(unsigned int *)(v261 + 8);
      }
      else
      {
        v262 = 0;
      }
      while (2)
      {
        if (v260 == (uint64_t *)v262)
          return 1;
        if ((sub_22EC016FC(a1, *v260) & 1) != 0)
        {
          ++v260;
          continue;
        }
        break;
      }
      return 0;
    case 32:
      result = sub_22EBFC4B4(a1);
      if (!(_DWORD)result)
        return result;
      if (*(_QWORD *)(a2 + 72) >= 8uLL && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v544 = sub_22F259350(a2);
        result = sub_22EC01548(a1, (uint64_t)v544);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22EC01C98(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v344 = *(_DWORD *)v4 & 0x7F, v344 <= 0x39) && ((1 << v344) & 0x3F0003E01011066) != 0
        || v344 - 70 <= 0xD && ((1 << (v344 - 70)) & 0x2803) != 0
        || v344 - 19 <= 4)
      {
        v345 = sub_22EFCAE04(a2);
      }
      else
      {
        v345 = 0;
      }
      result = sub_22EC01660(a1, v345);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v347 = *v346;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v349 = *(_QWORD *)v348 + 8 * *(unsigned int *)(v348 + 8);
      }
      else
      {
        v349 = 0;
      }
      if (v347 == (uint64_t *)v349)
        return 1;
      while ((sub_22EC016FC(a1, *v347) & 1) != 0)
      {
        if (++v347 == (uint64_t *)v349)
          return 1;
      }
      return 0;
    case 33:
      v144 = *(_QWORD *)(a2 + 120);
      if ((v144 & 4) == 0)
        goto LABEL_252;
      v145 = 0;
      while (1)
      {
        v146 = v144 & 0xFFFFFFFFFFFFFFF8;
        if (v145 >= *(unsigned int *)(v146 + 16))
          break;
        sub_22EC01C98(a1, *(_QWORD *)(*(_QWORD *)(v146 + 24) + 8 * v145++));
        v144 = *(_QWORD *)(a2 + 120);
        if ((v144 & 4) == 0)
        {
LABEL_252:
          v147 = 0;
          v148 = 0;
          goto LABEL_946;
        }
      }
      v147 = *(_QWORD *)v146;
      v148 = *(_QWORD *)(v146 + 8);
LABEL_946:
      result = sub_22EC0066C(a1, v147, v148);
      if (!(_DWORD)result)
        return result;
      v510 = *(_QWORD *)(a2 + 128);
      if ((v510 & 4) != 0 && (v510 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        result = sub_22EC007AC(a1, *(_QWORD *)(v510 & 0xFFFFFFFFFFFFFFF8), (v510 & 0xFFFFFFFFFFFFFFF8) + 8);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22EC01660(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v512 = *v511;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v514 = *(_QWORD *)v513 + 8 * *(unsigned int *)(v513 + 8);
      }
      else
      {
        v514 = 0;
      }
      if (v512 == (uint64_t *)v514)
        return 1;
      while ((sub_22EC016FC(a1, *v512) & 1) != 0)
      {
        if (++v512 == (uint64_t *)v514)
          return 1;
      }
      return 0;
    case 34:
      result = sub_22EC01D38(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22EC01660(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v119 = *v118;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v121 = *(_QWORD *)v120 + 8 * *(unsigned int *)(v120 + 8);
      }
      else
      {
        v121 = 0;
      }
      if (v119 == (uint64_t *)v121)
        return 1;
      while ((sub_22EC016FC(a1, *v119) & 1) != 0)
      {
        if (++v119 == (uint64_t *)v121)
          return 1;
      }
      return 0;
    case 35:
      result = sub_22EC01DAC(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22EC01660(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v101 = *v100;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v103 = *(_QWORD *)v102 + 8 * *(unsigned int *)(v102 + 8);
      }
      else
      {
        v103 = 0;
      }
      if (v101 == (uint64_t *)v103)
        return 1;
      while ((sub_22EC016FC(a1, *v101) & 1) != 0)
      {
        if (++v101 == (uint64_t *)v103)
          return 1;
      }
      return 0;
    case 36:
      v104 = *(unint64_t ***)(a2 + 160);
      if (v104)
      {
        if (*v104)
        {
          result = sub_22EC007AC(a1, **v104, (uint64_t)(*v104 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v105 = *(_QWORD *)(a2 + 120);
      if ((v105 & 4) != 0)
      {
        v488 = (uint64_t *)(v105 & 0xFFFFFFFFFFFFFFF8);
        v106 = *v488;
        v107 = v488[1];
      }
      else
      {
        v106 = 0;
        v107 = 0;
      }
      result = sub_22EC0066C(a1, v106, v107);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFD5760(a2) != 2)
        return 1;
      result = sub_22EC01660(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v490 = *v489;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v492 = *(_QWORD *)v491 + 8 * *(unsigned int *)(v491 + 8);
      }
      else
      {
        v492 = 0;
      }
      if (v490 == (uint64_t *)v492)
        return 1;
      while ((sub_22EC016FC(a1, *v490) & 1) != 0)
      {
        if (++v490 == (uint64_t *)v492)
          return 1;
      }
      return 0;
    case 37:
      v63 = *(_QWORD *)(a2 + 184);
      if (!v63)
        goto LABEL_104;
      v64 = *(_DWORD *)(v63 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v64)
        goto LABEL_104;
      v65 = v63 + 16;
      v66 = 8 * v64;
      while ((sub_22EBFC4B4(a1) & 1) != 0)
      {
        v65 += 8;
        v66 -= 8;
        if (!v66)
        {
LABEL_104:
          v67 = *(_QWORD *)(a2 + 192);
          v68 = *(unsigned int *)(v67 + 8);
          if ((_DWORD)v68)
          {
            v69 = v67 + 16;
            while ((sub_22EC01548(a1, v69) & 1) != 0)
            {
              v69 += 32;
              if (!--v68)
                goto LABEL_108;
            }
            return 0;
          }
LABEL_108:
          result = sub_22EC01DAC(a1, a2);
          if (!(_DWORD)result)
            return result;
          result = sub_22EC01660(a1, a2 + 64);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v71 = *v70;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v73 = *(_QWORD *)v72 + 8 * *(unsigned int *)(v72 + 8);
            }
            else
            {
              v73 = 0;
            }
            if (v71 != (uint64_t *)v73)
            {
              while ((sub_22EC016FC(a1, *v71) & 1) != 0)
              {
                if (++v71 == (uint64_t *)v73)
                  return 1;
              }
              return 0;
            }
          }
          return 1;
        }
      }
      return 0;
    case 38:
      v402 = *(_QWORD *)(a2 + 48);
      if (v402)
      {
        result = sub_22EC00F14(a1, v402 & 0xFFFFFFFFFFFFFFF0);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22EC0033C(a1, a2);
      if (!(_DWORD)result)
        return result;
      v403 = *(_QWORD *)(a2 + 72);
      if (v403 >= 8 && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v404 = (unint64_t *)(v403 & 0xFFFFFFFFFFFFFFF8);
        if ((*(_QWORD *)(a2 + 72) & 6) == 4 && v404)
          v404 = (unint64_t *)v404[1];
        result = sub_22EC007AC(a1, *v404, (uint64_t)(v404 + 1));
        if (!(_DWORD)result)
          return result;
      }
      if ((v405 = *(_DWORD *)v4 & 0x7F, v405 <= 0x39) && ((1 << v405) & 0x3F0003E01011066) != 0
        || v405 - 70 <= 0xD && ((1 << (v405 - 70)) & 0x2803) != 0
        || v405 - 19 <= 4)
      {
        v406 = sub_22EFCAE04(a2);
      }
      else
      {
        v406 = 0;
      }
      result = sub_22EC01660(a1, v406);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v408 = *v407;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v410 = *(_QWORD *)v409 + 8 * *(unsigned int *)(v409 + 8);
      }
      else
      {
        v410 = 0;
      }
      if (v408 == (uint64_t *)v410)
        return 1;
      while ((sub_22EC016FC(a1, *v408) & 1) != 0)
      {
        if (++v408 == (uint64_t *)v410)
          return 1;
      }
      return 0;
    case 39:
      return (sub_22EC0049C(a1, a2) & 1) != 0;
    case 40:
      v176 = *(_QWORD *)(a2 + 80);
      v177 = (unint64_t *)(v176 & 0xFFFFFFFFFFFFFFF8);
      if ((v176 & 4) != 0)
        v177 = (unint64_t *)*v177;
      result = sub_22EC007AC(a1, *v177, (uint64_t)(v177 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v178 = *(_DWORD *)v4 & 0x7F, v178 <= 0x39) && ((1 << v178) & 0x3F0003E01011066) != 0
        || v178 - 70 <= 0xD && ((1 << (v178 - 70)) & 0x2803) != 0
        || v178 - 19 <= 4)
      {
        v179 = sub_22EFCAE04(a2);
      }
      else
      {
        v179 = 0;
      }
      result = sub_22EC01660(a1, v179);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v181 = *v180;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v183 = *(_QWORD *)v182 + 8 * *(unsigned int *)(v182 + 8);
      }
      else
      {
        v183 = 0;
      }
      if (v181 == (uint64_t *)v183)
        return 1;
      while ((sub_22EC016FC(a1, *v181) & 1) != 0)
      {
        if (++v181 == (uint64_t *)v183)
          return 1;
      }
      return 0;
    case 41:
      v267 = *(_QWORD *)(a2 + 80);
      v268 = (unint64_t *)(v267 & 0xFFFFFFFFFFFFFFF8);
      if ((v267 & 4) != 0)
        v268 = (unint64_t *)*v268;
      result = sub_22EC007AC(a1, *v268, (uint64_t)(v268 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v269 = *(_DWORD *)v4 & 0x7F, v269 <= 0x39) && ((1 << v269) & 0x3F0003E01011066) != 0
        || v269 - 70 <= 0xD && ((1 << (v269 - 70)) & 0x2803) != 0
        || v269 - 19 <= 4)
      {
        v270 = sub_22EFCAE04(a2);
      }
      else
      {
        v270 = 0;
      }
      result = sub_22EC01660(a1, v270);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v272 = *v271;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v274 = *(_QWORD *)v273 + 8 * *(unsigned int *)(v273 + 8);
      }
      else
      {
        v274 = 0;
      }
      if (v272 == (uint64_t *)v274)
        return 1;
      while ((sub_22EC016FC(a1, *v272) & 1) != 0)
      {
        if (++v272 == (uint64_t *)v274)
          return 1;
      }
      return 0;
    case 42:
      result = sub_22EC0066C(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      v373 = *(_DWORD *)v4 & 0x7F;
      v374 = v373 > 0x39 || ((1 << v373) & 0x3F0003E01011066) == 0;
      v375 = !v374 || v373 - 70 <= 0xD && ((1 << (v373 - 70)) & 0x2803) != 0 || v373 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EC01660(a1, v375);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v377 = *v376;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v379 = *(_QWORD *)v378 + 8 * *(unsigned int *)(v378 + 8);
      }
      else
      {
        v379 = 0;
      }
      if (v377 == (uint64_t *)v379)
        return 1;
      while ((sub_22EC016FC(a1, *v377) & 1) != 0)
      {
        if (++v377 == (uint64_t *)v379)
          return 1;
      }
      return 0;
    case 43:
      result = sub_22EC01660(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v41 = *v40;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v43 = *(_QWORD *)v42 + 8 * *(unsigned int *)(v42 + 8);
      }
      else
      {
        v43 = 0;
      }
      if (v41 == (uint64_t *)v43)
        return 1;
      while ((sub_22EC016FC(a1, *v41) & 1) != 0)
      {
        if (++v41 == (uint64_t *)v43)
          return 1;
      }
      return 0;
    case 44:
      result = sub_22EC0066C(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
      if (!(_DWORD)result)
        return result;
      v133 = *(_DWORD *)v4 & 0x7F;
      v134 = v133 > 0x39 || ((1 << v133) & 0x3F0003E01011066) == 0;
      v135 = !v134 || v133 - 70 <= 0xD && ((1 << (v133 - 70)) & 0x2803) != 0 || v133 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EC01660(a1, v135);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v137 = *v136;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v139 = *(_QWORD *)v138 + 8 * *(unsigned int *)(v138 + 8);
      }
      else
      {
        v139 = 0;
      }
      if (v137 == (uint64_t *)v139)
        return 1;
      while ((sub_22EC016FC(a1, *v137) & 1) != 0)
      {
        if (++v137 == (uint64_t *)v139)
          return 1;
      }
      return 0;
    case 45:
      result = sub_22EC01660(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v351 = *v350;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v353 = *(_QWORD *)v352 + 8 * *(unsigned int *)(v352 + 8);
      }
      else
      {
        v353 = 0;
      }
      if (v351 == (uint64_t *)v353)
        return 1;
      while ((sub_22EC016FC(a1, *v351) & 1) != 0)
      {
        if (++v351 == (uint64_t *)v353)
          return 1;
      }
      return 0;
    case 46:
      result = sub_22EC01660(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v435 = *v434;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v437 = *(_QWORD *)v436 + 8 * *(unsigned int *)(v436 + 8);
      }
      else
      {
        v437 = 0;
      }
      if (v435 == (uint64_t *)v437)
        return 1;
      while ((sub_22EC016FC(a1, *v435) & 1) != 0)
      {
        if (++v435 == (uint64_t *)v437)
          return 1;
      }
      return 0;
    case 47:
      result = sub_22EC01660(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v79 = *v78;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v81 = *(_QWORD *)v80 + 8 * *(unsigned int *)(v80 + 8);
      }
      else
      {
        v81 = 0;
      }
      if (v79 == (uint64_t *)v81)
        return 1;
      while ((sub_22EC016FC(a1, *v79) & 1) != 0)
      {
        if (++v79 == (uint64_t *)v81)
          return 1;
      }
      return 0;
    case 48:
      result = sub_22EC01660(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v150 = *v149;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v152 = *(_QWORD *)v151 + 8 * *(unsigned int *)(v151 + 8);
      }
      else
      {
        v152 = 0;
      }
      if (v150 == (uint64_t *)v152)
        return 1;
      while ((sub_22EC016FC(a1, *v150) & 1) != 0)
      {
        if (++v150 == (uint64_t *)v152)
          return 1;
      }
      return 0;
    case 49:
      result = sub_22EC01E24(a1, a2);
      if (!(_DWORD)result)
        return result;
      v171 = *(_QWORD *)(a2 + 72);
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v515 = v171 & 0xFFFFFFFFFFFFFFFCLL;
        v516 = *(_QWORD *)(a2 + 72) & 3;
        if ((_DWORD)v516 && (_DWORD)v516 != 3)
          v515 = *(_QWORD *)(v515 + 8);
        if ((sub_22EBD196C(a1, v515, 0) & 1) == 0)
          return 0;
      }
      else if ((v171 & 3) != 0 && (v171 & 3) != 3)
      {
        result = sub_22EBD196C(a1, v171 & 0xFFFFFFFFFFFFFFFCLL, 0);
        if (!(_DWORD)result)
          return result;
      }
      v517 = *(_DWORD *)v4 & 0x7F;
      if (v517 <= 0x39 && ((1 << v517) & 0x3F0003E01011066) != 0
        || v517 - 70 <= 0xD && ((1 << (v517 - 70)) & 0x2803) != 0
        || v517 - 19 <= 4)
      {
        v518 = sub_22EFCAE04(a2);
      }
      else
      {
        v518 = 0;
      }
      result = sub_22EC01660(a1, v518);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v520 = *v519;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v522 = *(_QWORD *)v521 + 8 * *(unsigned int *)(v521 + 8);
        }
        else
        {
          v522 = 0;
        }
        for (; v520 != (uint64_t *)v522; ++v520)
        {
          if ((sub_22EC016FC(a1, *v520) & 1) == 0)
            return 0;
        }
      }
      return 1;
    case 50:
      result = sub_22EC01E24(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v33 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v33 = *(_QWORD *)(v33 + 8);
        result = sub_22EBD196C(a1, v33, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v34 = *(_DWORD *)v4 & 0x7F, v34 <= 0x39) && ((1 << v34) & 0x3F0003E01011066) != 0
        || (v34 - 70 <= 0xD ? (v542 = ((1 << (v34 - 70)) & 0x2803) == 0) : (v542 = 1), !v542 || v34 - 19 <= 4))
      {
        v35 = sub_22EFCAE04(a2);
      }
      else
      {
        v35 = 0;
      }
      result = sub_22EC01660(a1, v35);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v37 = *v36;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v39 = *(_QWORD *)v38 + 8 * *(unsigned int *)(v38 + 8);
      }
      else
      {
        v39 = 0;
      }
      if (v37 == (uint64_t *)v39)
        return 1;
      while ((sub_22EC016FC(a1, *v37) & 1) != 0)
      {
        if (++v37 == (uint64_t *)v39)
          return 1;
      }
      return 0;
    case 51:
      result = sub_22EC01E24(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v450 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v450 = *(_QWORD *)(v450 + 8);
        result = sub_22EBD196C(a1, v450, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v451 = *(_DWORD *)v4 & 0x7F, v451 <= 0x39) && ((1 << v451) & 0x3F0003E01011066) != 0
        || (v451 - 70 <= 0xD ? (v543 = ((1 << (v451 - 70)) & 0x2803) == 0) : (v543 = 1), !v543 || v451 - 19 <= 4))
      {
        v452 = sub_22EFCAE04(a2);
      }
      else
      {
        v452 = 0;
      }
      result = sub_22EC01660(a1, v452);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v454 = *v453;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v456 = *(_QWORD *)v455 + 8 * *(unsigned int *)(v455 + 8);
      }
      else
      {
        v456 = 0;
      }
      if (v454 == (uint64_t *)v456)
        return 1;
      while ((sub_22EC016FC(a1, *v454) & 1) != 0)
      {
        if (++v454 == (uint64_t *)v456)
          return 1;
      }
      return 0;
    case 52:
      result = sub_22EC01EF0(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v431 = *v430;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v433 = *(_QWORD *)v432 + 8 * *(unsigned int *)(v432 + 8);
      }
      else
      {
        v433 = 0;
      }
      if (v431 == (uint64_t *)v433)
        return 1;
      while ((sub_22EC016FC(a1, *v431) & 1) != 0)
      {
        if (++v431 == (uint64_t *)v433)
          return 1;
      }
      return 0;
    case 53:
      result = sub_22EC01EF0(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v75 = *v74;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v77 = *(_QWORD *)v76 + 8 * *(unsigned int *)(v76 + 8);
      }
      else
      {
        v77 = 0;
      }
      if (v75 == (uint64_t *)v77)
        return 1;
      while ((sub_22EC016FC(a1, *v75) & 1) != 0)
      {
        if (++v75 == (uint64_t *)v77)
          return 1;
      }
      return 0;
    case 54:
      result = sub_22EC01EF0(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v419 = *v418;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v421 = *(_QWORD *)v420 + 8 * *(unsigned int *)(v420 + 8);
      }
      else
      {
        v421 = 0;
      }
      if (v419 == (uint64_t *)v421)
        return 1;
      while ((sub_22EC016FC(a1, *v419) & 1) != 0)
      {
        if (++v419 == (uint64_t *)v421)
          return 1;
      }
      return 0;
    case 55:
      result = sub_22EC01EF0(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v427 = *v426;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v429 = *(_QWORD *)v428 + 8 * *(unsigned int *)(v428 + 8);
      }
      else
      {
        v429 = 0;
      }
      if (v427 == (uint64_t *)v429)
        return 1;
      while ((sub_22EC016FC(a1, *v427) & 1) != 0)
      {
        if (++v427 == (uint64_t *)v429)
          return 1;
      }
      return 0;
    case 56:
      result = sub_22EC01EF0(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v83 = *v82;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v85 = *(_QWORD *)v84 + 8 * *(unsigned int *)(v84 + 8);
      }
      else
      {
        v85 = 0;
      }
      if (v83 == (uint64_t *)v85)
        return 1;
      while ((sub_22EC016FC(a1, *v83) & 1) != 0)
      {
        if (++v83 == (uint64_t *)v85)
          return 1;
      }
      return 0;
    case 57:
      result = sub_22EC01EF0(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v370 = *v369;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v372 = *(_QWORD *)v371 + 8 * *(unsigned int *)(v371 + 8);
      }
      else
      {
        v372 = 0;
      }
      if (v370 == (uint64_t *)v372)
        return 1;
      while ((sub_22EC016FC(a1, *v370) & 1) != 0)
      {
        if (++v370 == (uint64_t *)v372)
          return 1;
      }
      return 0;
    case 58:
      result = sub_22EC01E24(a1, a2);
      if (!(_DWORD)result)
        return result;
      v153 = *(_DWORD *)v4 & 0x7F;
      v154 = v153 > 0x39 || ((1 << v153) & 0x3F0003E01011066) == 0;
      v155 = !v154 || v153 - 70 <= 0xD && ((1 << (v153 - 70)) & 0x2803) != 0 || v153 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EC01660(a1, v155);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v157 = *v156;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v159 = *(_QWORD *)v158 + 8 * *(unsigned int *)(v158 + 8);
      }
      else
      {
        v159 = 0;
      }
      if (v157 == (uint64_t *)v159)
        return 1;
      while ((sub_22EC016FC(a1, *v157) & 1) != 0)
      {
        if (++v157 == (uint64_t *)v159)
          return 1;
      }
      return 0;
    case 59:
      result = sub_22EC01E24(a1, a2);
      if (!(_DWORD)result)
        return result;
      v380 = *(_QWORD *)(a2 + 72);
      if (v380 >= 4 && (*(_QWORD *)(a2 + 72) & 3) != 1)
      {
        v381 = v380 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_QWORD *)(a2 + 72) & 3) == 2 && v381)
          v381 = *(_QWORD *)(v381 + 8);
        result = sub_22EBD196C(a1, v381, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v382 = *(_DWORD *)v4 & 0x7F, v382 <= 0x39) && ((1 << v382) & 0x3F0003E01011066) != 0
        || v382 - 70 <= 0xD && ((1 << (v382 - 70)) & 0x2803) != 0
        || v382 - 19 <= 4)
      {
        v383 = sub_22EFCAE04(a2);
      }
      else
      {
        v383 = 0;
      }
      result = sub_22EC01660(a1, v383);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v385 = *v384;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v387 = *(_QWORD *)v386 + 8 * *(unsigned int *)(v386 + 8);
      }
      else
      {
        v387 = 0;
      }
      if (v385 == (uint64_t *)v387)
        return 1;
      while ((sub_22EC016FC(a1, *v385) & 1) != 0)
      {
        if (++v385 == (uint64_t *)v387)
          return 1;
      }
      return 0;
    case 60:
      result = sub_22EC022B4(a1, a2);
      if (!(_DWORD)result)
        return result;
      v184 = *(_DWORD *)v4 & 0x7F;
      v185 = v184 > 0x39 || ((1 << v184) & 0x3F0003E01011066) == 0;
      v186 = !v185 || v184 - 70 <= 0xD && ((1 << (v184 - 70)) & 0x2803) != 0 || v184 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EC01660(a1, v186);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v188 = *v187;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v190 = *(_QWORD *)v189 + 8 * *(unsigned int *)(v189 + 8);
      }
      else
      {
        v190 = 0;
      }
      if (v188 == (uint64_t *)v190)
        return 1;
      while ((sub_22EC016FC(a1, *v188) & 1) != 0)
      {
        if (++v188 == (uint64_t *)v190)
          return 1;
      }
      return 0;
    case 61:
      result = sub_22EC022B4(a1, a2);
      if (!(_DWORD)result)
        return result;
      v287 = *(unsigned int *)(a2 + 100);
      if (!(_DWORD)v287)
        goto LABEL_514;
      v288 = a2 + 104;
      v289 = 8 * v287;
      while ((sub_22EBFC4B4(a1) & 1) != 0)
      {
        v288 += 8;
        v289 -= 8;
        if (!v289)
        {
LABEL_514:
          v290 = *(_DWORD *)v4 & 0x7F;
          v291 = v290 > 0x39 || ((1 << v290) & 0x3F0003E01011066) == 0;
          if (v291
            && (v290 - 70 <= 0xD ? (v545 = ((1 << (v290 - 70)) & 0x2803) == 0) : (v545 = 1), v545 && v290 - 19 > 4))
          {
            v292 = 0;
          }
          else
          {
            v292 = sub_22EFCAE04(a2);
          }
          result = sub_22EC01660(a1, v292);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v294 = *v293;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v296 = *(_QWORD *)v295 + 8 * *(unsigned int *)(v295 + 8);
          }
          else
          {
            v296 = 0;
          }
          if (v294 == (uint64_t *)v296)
            return 1;
          while ((sub_22EC016FC(a1, *v294) & 1) != 0)
          {
            if (++v294 == (uint64_t *)v296)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 62:
      result = sub_22EC022B4(a1, a2);
      if (!(_DWORD)result)
        return result;
      v305 = *(_DWORD *)v4 & 0x7F;
      v306 = v305 > 0x39 || ((1 << v305) & 0x3F0003E01011066) == 0;
      v307 = !v306 || v305 - 70 <= 0xD && ((1 << (v305 - 70)) & 0x2803) != 0 || v305 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EC01660(a1, v307);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v309 = *v308;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v311 = *(_QWORD *)v310 + 8 * *(unsigned int *)(v310 + 8);
      }
      else
      {
        v311 = 0;
      }
      if (v309 == (uint64_t *)v311)
        return 1;
      while ((sub_22EC016FC(a1, *v309) & 1) != 0)
      {
        if (++v309 == (uint64_t *)v311)
          return 1;
      }
      return 0;
    case 63:
      result = sub_22EC022B4(a1, a2);
      if (!(_DWORD)result)
        return result;
      v224 = *(_DWORD *)v4 & 0x7F;
      v225 = v224 > 0x39 || ((1 << v224) & 0x3F0003E01011066) == 0;
      v226 = !v225 || v224 - 70 <= 0xD && ((1 << (v224 - 70)) & 0x2803) != 0 || v224 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EC01660(a1, v226);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v228 = *v227;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v230 = *(_QWORD *)v229 + 8 * *(unsigned int *)(v229 + 8);
      }
      else
      {
        v230 = 0;
      }
      if (v228 == (uint64_t *)v230)
        return 1;
      while ((sub_22EC016FC(a1, *v228) & 1) != 0)
      {
        if (++v228 == (uint64_t *)v230)
          return 1;
      }
      return 0;
    case 64:
      result = sub_22EC022B4(a1, a2);
      if (!(_DWORD)result)
        return result;
      v191 = *(_DWORD *)(a2 + 96) & 0x600;
      if (v191 != 1024)
        goto LABEL_343;
      result = sub_22EBD196C(a1, *(_QWORD *)(a2 + 88) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      v191 = *(_DWORD *)(a2 + 96) & 0x600;
LABEL_343:
      if (v191 != 1024 && v191 != 512 && *(_QWORD *)(a2 + 88) >= 8uLL)
      {
        v192 = sub_22EFBC5B4(a2);
        v193 = v192;
        if (v192 && (*(_BYTE *)v192 & 0xFE) == 0xAC)
          v193 = *(_QWORD *)(v192 + 16);
        result = sub_22EBD196C(a1, v193, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v194 = *(_DWORD *)v4 & 0x7F, v194 <= 0x39) && ((1 << v194) & 0x3F0003E01011066) != 0
        || v194 - 70 <= 0xD && ((1 << (v194 - 70)) & 0x2803) != 0
        || v194 - 19 <= 4)
      {
        v195 = sub_22EFCAE04(a2);
      }
      else
      {
        v195 = 0;
      }
      result = sub_22EC01660(a1, v195);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v197 = *v196;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v199 = *(_QWORD *)v198 + 8 * *(unsigned int *)(v198 + 8);
      }
      else
      {
        v199 = 0;
      }
      if (v197 == (uint64_t *)v199)
        return 1;
      while ((sub_22EC016FC(a1, *v197) & 1) != 0)
      {
        if (++v197 == (uint64_t *)v199)
          return 1;
      }
      return 0;
    case 65:
      v301 = *(unint64_t ***)(a2 + 120);
      if (v301)
      {
        if (*v301)
        {
          result = sub_22EC007AC(a1, **v301, (uint64_t)(*v301 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v302 = *(_QWORD *)(a2 + 56);
      if ((v302 & 4) != 0)
      {
        v493 = (uint64_t *)(v302 & 0xFFFFFFFFFFFFFFF8);
        v303 = *v493;
        v304 = v493[1];
      }
      else
      {
        v303 = 0;
        v304 = 0;
      }
      result = sub_22EC0066C(a1, v303, v304);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFBC2B0(a2) != 2)
        return 1;
      v494 = *(_DWORD *)v4 & 0x7F;
      if (v494 <= 0x39 && ((1 << v494) & 0x3F0003E01011066) != 0
        || v494 - 70 <= 0xD && ((1 << (v494 - 70)) & 0x2803) != 0
        || v494 - 19 <= 4)
      {
        v495 = sub_22EFCAE04(a2);
      }
      else
      {
        v495 = 0;
      }
      result = sub_22EC01660(a1, v495);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v497 = *v496;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v499 = *(_QWORD *)v498 + 8 * *(unsigned int *)(v498 + 8);
      }
      else
      {
        v499 = 0;
      }
      if (v497 == (uint64_t *)v499)
        return 1;
      while ((sub_22EC016FC(a1, *v497) & 1) != 0)
      {
        if (++v497 == (uint64_t *)v499)
          return 1;
      }
      return 0;
    case 66:
      v44 = *(_QWORD *)(a2 + 424);
      if (!v44)
        goto LABEL_68;
      v45 = *(_DWORD *)(v44 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v45)
        goto LABEL_68;
      v46 = v44 + 16;
      v47 = 8 * v45;
      while ((sub_22EBFC4B4(a1) & 1) != 0)
      {
        v46 += 8;
        v47 -= 8;
        if (!v47)
        {
LABEL_68:
          v48 = *(_QWORD *)(a2 + 432);
          v49 = *(unsigned int *)(v48 + 8);
          if ((_DWORD)v49)
          {
            v50 = v48 + 16;
            while ((sub_22EC01548(a1, v50) & 1) != 0)
            {
              v50 += 32;
              if (!--v49)
                goto LABEL_72;
            }
          }
          else
          {
LABEL_72:
            result = sub_22EC022B4(a1, a2);
            if (!(_DWORD)result)
              return result;
            v51 = *(_DWORD *)v4 & 0x7F;
            v52 = v51 > 0x39 || ((1 << v51) & 0x3F0003E01011066) == 0;
            if (v52
              && (v51 - 70 <= 0xD ? (v546 = ((1 << (v51 - 70)) & 0x2803) == 0) : (v546 = 1), v546 && v51 - 19 > 4))
            {
              v53 = 0;
            }
            else
            {
              v53 = sub_22EFCAE04(a2);
            }
            result = sub_22EC01660(a1, v53);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v55 = *v54;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v57 = *(_QWORD *)v56 + 8 * *(unsigned int *)(v56 + 8);
            }
            else
            {
              v57 = 0;
            }
            if (v55 == (uint64_t *)v57)
              return 1;
            while ((sub_22EC016FC(a1, *v55) & 1) != 0)
            {
              if (++v55 == (uint64_t *)v57)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 67:
      result = sub_22EBD196C(a1, *(_QWORD *)(a2 + 56), 0);
      if (!(_DWORD)result)
        return result;
      v126 = *(_DWORD *)v4 & 0x7F;
      v127 = v126 > 0x39 || ((1 << v126) & 0x3F0003E01011066) == 0;
      v128 = !v127 || v126 - 70 <= 0xD && ((1 << (v126 - 70)) & 0x2803) != 0 || v126 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EC01660(a1, v128);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v130 = *v129;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v132 = *(_QWORD *)v131 + 8 * *(unsigned int *)(v131 + 8);
      }
      else
      {
        v132 = 0;
      }
      if (v130 == (uint64_t *)v132)
        return 1;
      while ((sub_22EC016FC(a1, *v130) & 1) != 0)
      {
        if (++v130 == (uint64_t *)v132)
          return 1;
      }
      return 0;
    case 68:
      result = sub_22EC01660(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v462 = *v461;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v464 = *(_QWORD *)v463 + 8 * *(unsigned int *)(v463 + 8);
      }
      else
      {
        v464 = 0;
      }
      if (v462 == (uint64_t *)v464)
        return 1;
      while ((sub_22EC016FC(a1, *v462) & 1) != 0)
      {
        if (++v462 == (uint64_t *)v464)
          return 1;
      }
      return 0;
    case 69:
      result = sub_22EC01660(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v109 = *v108;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v111 = *(_QWORD *)v110 + 8 * *(unsigned int *)(v110 + 8);
      }
      else
      {
        v111 = 0;
      }
      if (v109 == (uint64_t *)v111)
        return 1;
      while ((sub_22EC016FC(a1, *v109) & 1) != 0)
      {
        if (++v109 == (uint64_t *)v111)
          return 1;
      }
      return 0;
    case 70:
      v21 = *(_DWORD **)(a2 + 56);
      v24 = *v21;
      v23 = (uint64_t *)(v21 + 4);
      v22 = v24;
      if (!v24)
        return (sub_22EC00F14(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      v25 = 8 * v22;
      while ((sub_22EC02314(a1, *v23) & 1) != 0)
      {
        ++v23;
        v25 -= 8;
        if (!v25)
          return (sub_22EC00F14(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return 0;
    case 71:
      result = sub_22EBD196C(a1, *(_QWORD *)(a2 + 88), 0);
      if ((_DWORD)result)
      {
        v62 = *(_QWORD *)(a2 + 96);
        if (!v62)
          return (sub_22EC00F14(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
        result = sub_22EBD196C(a1, v62, 0);
        if ((_DWORD)result)
          return (sub_22EC00F14(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return result;
    case 72:
      result = sub_22EC01660(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v423 = *v422;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v425 = *(_QWORD *)v424 + 8 * *(unsigned int *)(v424 + 8);
      }
      else
      {
        v425 = 0;
      }
      if (v423 == (uint64_t *)v425)
        return 1;
      while ((sub_22EC016FC(a1, *v423) & 1) != 0)
      {
        if (++v423 == (uint64_t *)v425)
          return 1;
      }
      return 0;
    case 73:
      result = sub_22EC01660(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v439 = *v438;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v441 = *(_QWORD *)v440 + 8 * *(unsigned int *)(v440 + 8);
      }
      else
      {
        v441 = 0;
      }
      if (v439 == (uint64_t *)v441)
        return 1;
      while ((sub_22EC016FC(a1, *v439) & 1) != 0)
      {
        if (++v439 == (uint64_t *)v441)
          return 1;
      }
      return 0;
    case 74:
      if (!sub_22EC0066C(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v442 = *(_DWORD *)(a2 + 24);
      v443 = *(_QWORD *)(a2 + 80);
      v558 = *(_QWORD *)(a2 + 40);
      v559 = v442;
      v560 = v443;
      if (!sub_22EC006F4(a1, &v558))
        return 0;
      if ((v444 = *(_DWORD *)v4 & 0x7F, v444 <= 0x39) && ((1 << v444) & 0x3F0003E01011066) != 0
        || v444 - 70 <= 0xD && ((1 << (v444 - 70)) & 0x2803) != 0
        || v444 - 19 <= 4)
      {
        v445 = sub_22EFCAE04(a2);
      }
      else
      {
        v445 = 0;
      }
      if (!sub_22EC01660(a1, v445))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v447 = *v446;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v449 = *(_QWORD *)v448 + 8 * *(unsigned int *)(v448 + 8);
      }
      else
      {
        v449 = 0;
      }
      while (2)
      {
        if (v447 == (uint64_t *)v449)
          return 1;
        if ((sub_22EC016FC(a1, *v447) & 1) != 0)
        {
          ++v447;
          continue;
        }
        break;
      }
      return 0;
    case 75:
      v86 = *(unsigned int **)(a2 + 40);
      v87 = *v86;
      v88 = v86[1];
      if (!(_DWORD)v88)
        goto LABEL_146;
      v89 = &v86[2 * v87 + 4];
      v90 = 8 * v88;
      while ((sub_22EBD196C(a1, *(_QWORD *)v89, 0) & 1) != 0)
      {
        v89 += 2;
        v90 -= 8;
        if (!v90)
        {
          v86 = *(unsigned int **)(a2 + 40);
          v87 = *v86;
LABEL_146:
          if ((_DWORD)v87)
          {
            v91 = (uint64_t *)(v86 + 4);
            v92 = 8 * v87;
            while ((sub_22EC02314(a1, *v91) & 1) != 0)
            {
              ++v91;
              v92 -= 8;
              if (!v92)
                goto LABEL_150;
            }
          }
          else
          {
LABEL_150:
            v93 = *(_DWORD *)v4 & 0x7F;
            v94 = v93 > 0x39 || ((1 << v93) & 0x3F0003E01011066) == 0;
            if (v94
              && (v93 - 70 <= 0xD ? (v540 = ((1 << (v93 - 70)) & 0x2803) == 0) : (v540 = 1), v540 && v93 - 19 > 4))
            {
              v95 = 0;
            }
            else
            {
              v95 = sub_22EFCAE04(a2);
            }
            result = sub_22EC01660(a1, v95);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v97 = *v96;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v99 = *(_QWORD *)v98 + 8 * *(unsigned int *)(v98 + 8);
            }
            else
            {
              v99 = 0;
            }
            if (v97 == (uint64_t *)v99)
              return 1;
            while ((sub_22EC016FC(a1, *v97) & 1) != 0)
            {
              if (++v97 == (uint64_t *)v99)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 76:
      v275 = *(_DWORD **)(a2 + 40);
      v278 = *v275;
      v277 = (uint64_t *)(v275 + 4);
      v276 = v278;
      if (!v278)
        goto LABEL_1013;
      v279 = 8 * v276;
      while ((sub_22EC02314(a1, *v277) & 1) != 0)
      {
        ++v277;
        v279 -= 8;
        if (!v279)
        {
          v280 = *(_DWORD *)v4 & 0x7F;
          v281 = v280 > 0x39 || ((1 << v280) & 0x3F0003E01011066) == 0;
          if (v281
            && (v280 - 70 <= 0xD ? (v539 = ((1 << (v280 - 70)) & 0x2803) == 0) : (v539 = 1), v539 && v280 - 19 > 4))
          {
LABEL_1013:
            v282 = 0;
          }
          else
          {
            v282 = sub_22EFCAE04(a2);
          }
          result = sub_22EC01660(a1, v282);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v549 = *v548;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v551 = *(_QWORD *)v550 + 8 * *(unsigned int *)(v550 + 8);
          }
          else
          {
            v551 = 0;
          }
          if (v549 == (uint64_t *)v551)
            return 1;
          while ((sub_22EC016FC(a1, *v549) & 1) != 0)
          {
            if (++v549 == (uint64_t *)v551)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 77:
      v26 = *(unsigned int **)(a2 + 40);
      v27 = v26[1];
      if (!(_DWORD)v27)
        goto LABEL_998;
      v28 = &v26[2 * *v26 + 4];
      v29 = 8 * v27;
      while ((sub_22EBD196C(a1, *(_QWORD *)v28, 0) & 1) != 0)
      {
        v28 += 2;
        v29 -= 8;
        if (!v29)
        {
          v30 = *(_DWORD *)v4 & 0x7F;
          v31 = v30 > 0x39 || ((1 << v30) & 0x3F0003E01011066) == 0;
          if (v31 && (v30 - 70 <= 0xD ? (v534 = ((1 << (v30 - 70)) & 0x2803) == 0) : (v534 = 1), v534 && v30 - 19 > 4))
LABEL_998:
            v32 = 0;
          else
            v32 = sub_22EFCAE04(a2);
          result = sub_22EC01660(a1, v32);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v536 = *v535;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v538 = *(_QWORD *)v537 + 8 * *(unsigned int *)(v537 + 8);
          }
          else
          {
            v538 = 0;
          }
          if (v536 == (uint64_t *)v538)
            return 1;
          while ((sub_22EC016FC(a1, *v536) & 1) != 0)
          {
            if (++v536 == (uint64_t *)v538)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 78:
      result = sub_22EC01660(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v458 = *v457;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v460 = *(_QWORD *)v459 + 8 * *(unsigned int *)(v459 + 8);
      }
      else
      {
        v460 = 0;
      }
      if (v458 == (uint64_t *)v460)
        return 1;
      while ((sub_22EC016FC(a1, *v458) & 1) != 0)
      {
        if (++v458 == (uint64_t *)v460)
          return 1;
      }
      return 0;
    case 79:
      result = sub_22EC01660(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v18 = *v17;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v20 = *(_QWORD *)v19 + 8 * *(unsigned int *)(v19 + 8);
      }
      else
      {
        v20 = 0;
      }
      if (v18 == (uint64_t *)v20)
        return 1;
      while ((sub_22EC016FC(a1, *v18) & 1) != 0)
      {
        if (++v18 == (uint64_t *)v20)
          return 1;
      }
      return 0;
    case 80:
      result = sub_22EC01660(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v59 = *v58;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v61 = *(_QWORD *)v60 + 8 * *(unsigned int *)(v60 + 8);
      }
      else
      {
        v61 = 0;
      }
      if (v59 == (uint64_t *)v61)
        return 1;
      while ((sub_22EC016FC(a1, *v59) & 1) != 0)
      {
        if (++v59 == (uint64_t *)v61)
          return 1;
      }
      return 0;
    case 81:
      v166 = sub_22EFCAE04(a2);
      result = sub_22EC01660(a1, v166);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v168 = *v167;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v170 = *(_QWORD *)v169 + 8 * *(unsigned int *)(v169 + 8);
      }
      else
      {
        v170 = 0;
      }
      if (v168 == (uint64_t *)v170)
        return 1;
      while ((sub_22EC016FC(a1, *v168) & 1) != 0)
      {
        if (++v168 == (uint64_t *)v170)
          return 1;
      }
      return 0;
    case 82:
      result = sub_22EBD196C(a1, *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFCLL, 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22EBD196C(a1, *(_QWORD *)(a2 + 48), 0);
      if (!(_DWORD)result)
        return result;
      if ((v160 = *(_DWORD *)v4 & 0x7F, v160 <= 0x39) && ((1 << v160) & 0x3F0003E01011066) != 0
        || v160 - 70 <= 0xD && ((1 << (v160 - 70)) & 0x2803) != 0
        || v160 - 19 <= 4)
      {
        v161 = sub_22EFCAE04(a2);
      }
      else
      {
        v161 = 0;
      }
      result = sub_22EC01660(a1, v161);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v163 = *v162;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v165 = *(_QWORD *)v164 + 8 * *(unsigned int *)(v164 + 8);
      }
      else
      {
        v165 = 0;
      }
      if (v163 == (uint64_t *)v165)
        return 1;
      break;
    case 83:
      v11 = *(_QWORD *)(a2 + 88);
      v12 = *(_BYTE **)(v11 + 19016);
      v13 = *(_BYTE **)(v11 + 19024);
      v14 = v13 - v12;
      if (v13 == v12)
      {
        v15 = 0;
        v16 = 0;
      }
      else
      {
        if (v14 < 0)
          abort();
        v15 = (char *)operator new(v13 - v12);
        memmove(v15, v12, v14);
        v16 = &v15[8 * (v14 >> 3)];
      }
      if (v16 - v15 == 8 && (*(_DWORD *)(*(_QWORD *)v15 + 28) & 0x7F) == 0x53)
      {
        operator delete(v15);
        result = sub_22EC01660(a1, a2 + 40);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v15 != v16)
        {
          v500 = v15;
          do
          {
            if ((*(_DWORD *)(*(_QWORD *)v500 + 28) & 0x7Fu) - 1 >= 2
              && ((*(_DWORD *)(*(_QWORD *)v500 + 28) & 0x7Fu) - 35 > 2
               || (v501 = *(_QWORD *)(*(_QWORD *)v500 + 128)) == 0
               || ((*(unsigned __int16 *)(v501 + 8) | (*(unsigned __int8 *)(v501 + 10) << 16)) & 0x100000) == 0)
              && !sub_22EBFC4B4(a1))
            {
              if (v15)
                operator delete(v15);
              return 0;
            }
            v500 += 8;
          }
          while (v500 != v16);
        }
        if (v15)
          operator delete(v15);
      }
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v503 = *v502;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v505 = *(_QWORD *)v504 + 8 * *(unsigned int *)(v504 + 8);
        }
        else
        {
          v505 = 0;
        }
        for (; v503 != (uint64_t *)v505; ++v503)
        {
          if ((sub_22EC016FC(a1, *v503) & 1) == 0)
            return 0;
        }
      }
      return 1;
    default:
      return 1;
  }
  while ((sub_22EC016FC(a1, *v163) & 1) != 0)
  {
    if (++v163 == (uint64_t *)v165)
      return 1;
  }
  return 0;
}

uint64_t sub_22EC0033C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((*(_BYTE *)(a2 + 60) & 4) != 0)
  {
    if (*(_QWORD *)(a2 + 152))
    {
      if ((sub_22EBD196C(a1, *(_QWORD *)(a2 + 152), 0) & 1) == 0)
        return 0;
    }
    else
    {
      result = sub_22EC005CC(a1, a2 + 80);
      if (!(_DWORD)result)
        return result;
    }
  }
  return 1;
}

uint64_t sub_22EC00384(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  result = sub_22EBD196C(a1, *(_QWORD *)(a2 + 40), 0);
  if ((_DWORD)result)
  {
    v5 = *(_DWORD *)(a2 + 28) & 0x7F;
    v6 = v5 > 0x39 || ((1 << v5) & 0x3F0003E01011066) == 0;
    if (v6 && (v5 - 70 <= 0xD ? (v8 = ((1 << (v5 - 70)) & 0x2803) == 0) : (v8 = 1), v8 && v5 - 19 > 4))
      v7 = 0;
    else
      v7 = sub_22EFCAE04(a2);
    result = sub_22EC01660(a1, v7);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v10 = *v9;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v12 = *(_QWORD *)v11 + 8 * *(unsigned int *)(v11 + 8);
      }
      else
      {
        v12 = 0;
      }
      if (v10 == v12)
      {
        return 1;
      }
      else
      {
        v13 = v10 + 8;
        do
        {
          result = sub_22EC016FC(a1, *(_QWORD *)(v13 - 8));
          if ((_DWORD)result)
            v14 = v13 == v12;
          else
            v14 = 1;
          v13 += 8;
        }
        while (!v14);
      }
    }
  }
  return result;
}

uint64_t sub_22EC0049C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t result;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  if (!*(_DWORD *)(a2 + 96))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 80);
  v5 = (unint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (unint64_t *)*v5;
  result = sub_22EC007AC(a1, *v5, (uint64_t)(v5 + 1));
  if ((_DWORD)result)
  {
LABEL_5:
    v7 = *(_DWORD *)(a2 + 28) & 0x7F;
    v8 = v7 > 0x39 || ((1 << v7) & 0x3F0003E01011066) == 0;
    if (v8 && (v7 - 70 <= 0xD ? (v10 = ((1 << (v7 - 70)) & 0x2803) == 0) : (v10 = 1), v10 && v7 - 19 > 4))
      v9 = 0;
    else
      v9 = sub_22EFCAE04(a2);
    result = sub_22EC01660(a1, v9);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v12 = *v11;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v14 = *(_QWORD *)v13 + 8 * *(unsigned int *)(v13 + 8);
      }
      else
      {
        v14 = 0;
      }
      if (v12 == v14)
      {
        return 1;
      }
      else
      {
        v15 = v12 + 8;
        do
        {
          result = sub_22EC016FC(a1, *(_QWORD *)(v15 - 8));
          if ((_DWORD)result)
            v16 = v15 == v14;
          else
            v16 = 1;
          v15 += 8;
        }
        while (!v16);
      }
    }
  }
  return result;
}

uint64_t sub_22EC005CC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  __int128 v11;
  uint64_t v12;

  result = sub_22EC0066C(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    v11 = *(_OWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 40);
    result = sub_22EC006F4(a1, (uint64_t *)&v11);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a2 + 64);
      if (v5 && (v6 = *(unsigned int *)(v5 + 8), (_DWORD)v6))
      {
        v7 = v5 + 16;
        v8 = v6 - 1;
        do
        {
          result = sub_22EC01548(a1, v7);
          v10 = v8-- != 0;
          if (!(_DWORD)result)
            break;
          v7 += 32;
        }
        while (v10);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22EC0066C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  if (!a2)
    return 1;
  v5 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (result = sub_22EC0066C(a1, v5, a3), (_DWORD)result))
  {
    if (*(_QWORD *)(a2 + 16) && (*(_BYTE *)(a2 + 8) & 4) != 0)
    {
      v7 = sub_22F0AB4E0((uint64_t)v9);
      return sub_22EC007AC(a1, v7, v8);
    }
    return 1;
  }
  return result;
}

uint64_t sub_22EC006F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  int v9;
  unint64_t v10;

  v2 = *a2;
  v3 = *a2 & 7;
  v4 = v3;
  if ((_DWORD)v3 == 7)
  {
    v5 = *(_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
    if (v5 >= 3)
      v5 = 3;
    v4 = v5 | 8;
  }
  if ((v4 - 3) < 3)
  {
    if ((v3 - 3) <= 2)
    {
      v6 = (_QWORD *)a2[2];
      if (v6)
      {
        if ((sub_22EC007AC(a1, *v6, v6 + 1) & 1) == 0)
          return 0;
      }
    }
    return 1;
  }
  if (v4 != 8)
    return 1;
  if ((~(_BYTE)v2 & 7) != 0)
    goto LABEL_15;
  v8 = v2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_DWORD *)v8;
  if (*(_DWORD *)v8 >= 3u)
    v9 = 3;
  if (v9)
LABEL_15:
    v10 = 0;
  else
    v10 = *(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFFFF9;
  result = sub_22EC01484(a1, v10);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22EC007AC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v10;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  unint64_t *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  char v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;

  if (a2)
  {
    v4 = a2;
    do
    {
      v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      if ((v4 & 0xF) != 0)
      {
LABEL_4:
        if ((v6 & 0xFFFFFFFFFFFFFFF0) != 0)
          v7 = *(_QWORD *)((char *)&unk_22F483088
                         + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        else
          v7 = 1;
        a3 = (a3 + v7 - 1) & -v7;
        v4 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      }
      else
      {
        result = 1;
        switch(*(_BYTE *)(v6 + 16))
        {
          case 0:
          case 1:
          case 0x16:
          case 0x17:
          case 0x36:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F483088
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 - 1;
            goto LABEL_62;
          case 2:
          case 3:
          case 4:
          case 5:
            v21 = *(_QWORD *)(v4 + 32);
            if (v21 >= 0x10 && (*(_QWORD *)(v4 + 32) & 0xFLL) == 0)
              v73 = *(_QWORD *)((char *)&unk_22F483088
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v73 = 1;
            result = sub_22EC007AC(a1, v21, (a3 + v73 + 15) & -v73);
            if (!(_DWORD)result)
              return result;
            v23 = *(_QWORD *)(a3 + 8);
            return sub_22EBD196C(a1, v23, 0);
          case 6:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F483088
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 11;
            goto LABEL_62;
          case 7:
          case 0x25:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F483088
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 7;
            goto LABEL_62;
          case 8:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F483088
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = v20 + a3;
            goto LABEL_62;
          case 0xA:
          case 0x20:
          case 0x24:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
            v4 = *(_QWORD *)(v4 + 32);
            goto LABEL_9;
          case 0xC:
          case 0x37:
          case 0x38:
            goto LABEL_76;
          case 0xD:
          case 0x30:
            v23 = *(_QWORD *)(v4 + 24);
            return sub_22EBD196C(a1, v23, 0);
          case 0xE:
            result = sub_22EC00F14(a1, *(_QWORD *)(v4 + 24));
            if (!(_DWORD)result)
              return result;
            if (!*(_QWORD *)(v4 + 40))
              return 1;
            result = sub_22EC0066C(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16));
            if (!(_DWORD)result)
              return result;
            v25 = *(_DWORD *)(a3 + 28);
            v74 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 40);
            v75 = v25;
            sub_22EFC6D6C((uint64_t)&v76, v74);
            result = sub_22EC006F4(a1, &v74);
            if (!(_DWORD)result)
              return result;
            v26 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v26)
              return 1;
            v27 = v4 + 48;
            v28 = (uint64_t *)(a3 + 56);
            v29 = v26 - 1;
            do
            {
              v30 = *v28++;
              v77 = *(_OWORD *)v27;
              v78 = *(_QWORD *)(v27 + 16);
              v79 = v30;
              result = sub_22EC01548(a1, (uint64_t)&v77);
              v31 = v29-- != 0;
              v32 = v31;
              if (!(_DWORD)result)
                break;
              v27 += 24;
            }
            while ((v32 & 1) != 0);
            return result;
          case 0xF:
            result = sub_22EC01484(a1, *(_QWORD *)(v4 + 40));
            if (!(_DWORD)result)
              return result;
            v24 = *(_QWORD *)(v4 + 24);
            return sub_22EC00F14(a1, v24);
          case 0x10:
            v33 = *(_QWORD *)(v4 + 40);
            goto LABEL_96;
          case 0x11:
            v23 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
            return sub_22EBD196C(a1, v23, 0);
          case 0x12:
            return sub_22EC0066C(a1, *(_QWORD *)(v4 + 32), *(_QWORD *)(a3 + 8));
          case 0x13:
            v33 = *(_QWORD *)(v4 + 40);
            if (!v33)
              goto LABEL_97;
LABEL_96:
            result = sub_22EBD196C(a1, v33, 0);
            if (!(_DWORD)result)
              return result;
LABEL_97:
            v24 = *(_QWORD *)(v4 + 48);
            return sub_22EC00F14(a1, v24);
          case 0x14:
            v34 = *(_QWORD *)(a3 + 8);
            if (v34)
            {
              v35 = *(_QWORD *)(v4 + 32);
              if (v35)
              {
                result = sub_22EC0066C(a1, v35, v34);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v36 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v36)
              return 1;
            v37 = v4 + 48;
            v38 = (uint64_t *)(a3 + 32);
            v39 = v36 - 1;
            do
            {
              v40 = *v38++;
              v77 = *(_OWORD *)v37;
              v78 = *(_QWORD *)(v37 + 16);
              v79 = v40;
              result = sub_22EC01548(a1, (uint64_t)&v77);
              v31 = v39-- != 0;
              v41 = v31;
              if (!(_DWORD)result)
                break;
              v37 += 24;
            }
            while ((v41 & 1) != 0);
            return result;
          case 0x15:
            v42 = *(_QWORD *)(v4 + 48);
            if (v42)
            {
              result = sub_22EBD196C(a1, v42, 0);
              if (!(_DWORD)result)
                return result;
            }
            v24 = *(_QWORD *)(v4 + 40);
            return sub_22EC00F14(a1, v24);
          case 0x18:
            v17 = *(_QWORD *)(v4 + 32);
            if (v17)
            {
              result = sub_22EC0066C(a1, v17, *(_QWORD *)(a3 + 8));
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 40);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              goto LABEL_60;
            v20 = 1;
            goto LABEL_61;
          case 0x19:
            *(_QWORD *)&v77 = v4;
            *((_QWORD *)&v77 + 1) = a3;
            v43 = *(_QWORD *)(v4 + 24);
            v44 = sub_22E47EE80(&v77);
            return sub_22EC007AC(a1, v43, v44);
          case 0x1A:
            *(_QWORD *)&v77 = v4;
            *((_QWORD *)&v77 + 1) = a3;
            v45 = *(_QWORD *)(v4 + 24);
            v46 = sub_22E47EE80(&v77);
            result = sub_22EC007AC(a1, v45, v46);
            if (!(_DWORD)result)
              return result;
            v47 = v77;
            v48 = *(_QWORD *)(v77 + 16);
            if (*(_BYTE *)(v77 + 16) == 25 || (v48 & 0x3FFFC000000000) == 0)
              goto LABEL_126;
            v50 = 0;
            v51 = (unsigned __int16)(v48 >> 38);
            do
            {
              if (*(_QWORD *)(*((_QWORD *)&v77 + 1) + 8 * v50 + 16))
              {
                if ((sub_22EBFC4B4(a1) & 1) == 0)
                  return 0;
              }
              else if (v50 < (unsigned __int16)(*(_QWORD *)(v47 + 16) >> 38))
              {
                result = sub_22EC00F14(a1, *(_QWORD *)(v47 + 40 + 8 * v50));
                if (!(_DWORD)result)
                  return result;
              }
              ++v50;
            }
            while (v51 != v50);
            v48 = *(_QWORD *)(v47 + 16);
LABEL_126:
            if ((v48 & 0x3C0000000000000) == 0x80000000000000)
            {
              v52 = (_DWORD *)((v47 + 8 * (unsigned __int16)(v48 >> 38) + 4 * ((v48 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
              v55 = *v52;
              v54 = (unint64_t *)(v52 + 2);
              v53 = v55;
              if (v55)
              {
                v56 = 8 * v53;
                while ((sub_22EC00F14(a1, *v54) & 1) != 0)
                {
                  ++v54;
                  v56 -= 8;
                  if (!v56)
                    goto LABEL_131;
                }
                return 0;
              }
            }
LABEL_131:
            v57 = sub_22F257D3C(v47);
            if (!v57)
              return 1;
            result = sub_22EBD196C(a1, v57, 0);
            if ((_DWORD)result)
              return 1;
            return result;
          case 0x1C:
            v4 = *(_QWORD *)(v4 + 24);
LABEL_9:
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F483088
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 3;
            goto LABEL_62;
          case 0x1D:
          case 0x1E:
            result = sub_22EBD196C(a1, *(_QWORD *)(a3 + 16), 0);
            if (!(_DWORD)result)
              return result;
            result = sub_22EBD196C(a1, *(_QWORD *)(a3 + 24), 0);
            if (!(_DWORD)result)
              return result;
LABEL_76:
            v24 = *(_QWORD *)(v4 + 32);
            return sub_22EC00F14(a1, v24);
          case 0x1F:
            v19 = *(_QWORD **)(a3 + 8);
            if (v19)
            {
              if ((sub_22EC007AC(a1, *v19, v19 + 1) & 1) == 0)
                return 0;
            }
            else
            {
              result = sub_22EC00F14(a1, *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0);
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 32);
            v20 = 1;
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
LABEL_60:
              v20 = *(_QWORD *)((char *)&unk_22F483088
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
LABEL_61:
            v10 = a3 + v20 + 15;
LABEL_62:
            a3 = v10 & -v20;
            break;
          case 0x21:
            v58 = *(_QWORD *)(v4 + 24);
            v59 = *(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0);
            if (v59 != v4)
            {
              v60 = 1;
              if (v58 >= 0x10 && (v58 & 0xF) == 0)
                v60 = *(_QWORD *)((char *)&unk_22F483088
                                + ((uint64_t)((unint64_t)*(unsigned int *)(v59 + 16) << 56) >> 53));
              result = sub_22EC007AC(a1, v58, (a3+ (((HIWORD(*(_DWORD *)(v4 + 16)) & 0x3F8) + 4 * (*(_DWORD *)(v4 + 16) >> 26) + 31) & 0x7F8)+ v60- 1) & -v60);
              if (!(_DWORD)result)
                return result;
            }
            v61 = (*(_DWORD *)(v4 + 16) >> 19) & 0x7F;
            if (!(_DWORD)v61)
              return 1;
            v62 = (_QWORD *)(a3 + 24);
            v63 = v61 - 1;
            do
            {
              v64 = (_QWORD *)*v62++;
              result = sub_22EC007AC(a1, *v64, v64 + 1);
              v31 = v63-- != 0;
              v65 = v31;
            }
            while ((_DWORD)result && (v65 & 1) != 0);
            return result;
          case 0x2A:
            v66 = *(_DWORD *)(v4 + 20);
            *((_QWORD *)&v77 + 1) = *(_QWORD *)(v4 + 40);
            LODWORD(v77) = 8;
            DWORD1(v77) = v66;
            return sub_22EC013B8(a1, (uint64_t)&v77);
          case 0x2B:
            v24 = *(_QWORD *)(v4 + 8);
            return sub_22EC00F14(a1, v24);
          case 0x2E:
            result = sub_22EC01484(a1, *(_QWORD *)(v4 + 32));
            if (!(_DWORD)result)
              return result;
            v67 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v67)
              return 1;
            v68 = v4 + 40;
            v69 = (uint64_t *)(a3 + 16);
            v70 = v67 - 1;
            do
            {
              v71 = *v69++;
              v77 = *(_OWORD *)v68;
              v78 = *(_QWORD *)(v68 + 16);
              v79 = v71;
              result = sub_22EC01548(a1, (uint64_t)&v77);
              v31 = v70-- != 0;
              v72 = v31;
              if (!(_DWORD)result)
                break;
              v68 += 24;
            }
            while ((v72 & 1) != 0);
            return result;
          case 0x31:
          case 0x33:
            v13 = *(unint64_t **)(a3 + 16);
            v14 = *v13;
            a3 = (uint64_t)(v13 + 1);
            v4 = v14;
            break;
          case 0x39:
            goto LABEL_4;
          default:
            return result;
        }
      }
    }
    while (v4);
  }
  return 1;
}

uint64_t sub_22EC00F14(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _DWORD v45[2];
  uint64_t v46;

  if (a2 < 0x10)
    return 1;
  while (2)
  {
    v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    v5 = *(_DWORD *)(v4 + 16);
    result = 1;
    switch((char)v5)
    {
      case 0:
      case 1:
      case 4:
      case 6:
      case 7:
      case 8:
      case 10:
      case 12:
      case 29:
      case 32:
      case 36:
      case 37:
      case 38:
      case 39:
      case 54:
      case 55:
      case 56:
        goto LABEL_5;
      case 2:
        result = sub_22EC00F14(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(v4 + 19) & 2) == 0)
          return 1;
        v14 = *(_QWORD *)(v4 + 56);
        if (!v14)
          return 1;
        goto LABEL_49;
      case 3:
        result = sub_22EC00F14(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v14 = *(_QWORD *)(v4 + 48);
        if (v14)
          goto LABEL_49;
        return 1;
      case 5:
        result = sub_22EC00F14(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v13 = *(_QWORD *)(v4 + 40);
        return sub_22EBD196C(a1, v13, 0);
      case 13:
      case 48:
        v13 = *(_QWORD *)(v4 + 24);
        return sub_22EBD196C(a1, v13, 0);
      case 14:
        result = sub_22EC00F14(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        if (!*(_QWORD *)(v4 + 40))
          return 1;
        result = sub_22EBFC4B4(a1);
        if (!(_DWORD)result)
          return result;
        v15 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v15)
          return 1;
        v16 = v4 + 48;
        v17 = v15 - 1;
        do
        {
          result = sub_22EC013B8(a1, v16);
          v18 = v17-- != 0;
          v19 = v18;
          if (!(_DWORD)result)
            break;
          v16 += 24;
        }
        while ((v19 & 1) != 0);
        return result;
      case 15:
        result = sub_22EC01484(a1, *(_QWORD *)(v4 + 40));
        if ((_DWORD)result)
          goto LABEL_19;
        return result;
      case 16:
        v7 = *(_QWORD *)(v4 + 40);
        goto LABEL_22;
      case 17:
        v13 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
        return sub_22EBD196C(a1, v13, 0);
      case 18:
        return sub_22EC014E4(a1, *(_QWORD *)(v4 + 32));
      case 19:
        v7 = *(_QWORD *)(v4 + 40);
        if (!v7)
          goto LABEL_23;
LABEL_22:
        result = sub_22EBD196C(a1, v7, 0);
        if (!(_DWORD)result)
          return result;
LABEL_23:
        v6 = (unint64_t *)(v4 + 48);
        goto LABEL_6;
      case 20:
        result = sub_22EC014E4(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v20 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v20)
          return 1;
        v21 = v4 + 48;
        v22 = v20 - 1;
        do
        {
          result = sub_22EC013B8(a1, v21);
          v18 = v22-- != 0;
          v23 = v18;
          if (!(_DWORD)result)
            break;
          v21 += 24;
        }
        while ((v23 & 1) != 0);
        return result;
      case 21:
        v8 = *(_QWORD *)(v4 + 48);
        if (v8)
        {
          result = sub_22EBD196C(a1, v8, 0);
          if (!(_DWORD)result)
            return result;
        }
        goto LABEL_31;
      case 22:
        goto LABEL_34;
      case 23:
        v9 = *(_QWORD *)(v4 + 64);
        if (!v9)
          goto LABEL_5;
        goto LABEL_35;
      case 24:
        v10 = *(_QWORD *)(v4 + 32);
        if (v10)
        {
          result = sub_22EC014E4(a1, v10);
          if (!(_DWORD)result)
            return result;
        }
LABEL_31:
        v6 = (unint64_t *)(v4 + 40);
        goto LABEL_6;
      case 25:
      case 28:
      case 49:
LABEL_19:
        v6 = (unint64_t *)(v4 + 24);
        goto LABEL_6;
      case 26:
        result = sub_22EC00F14(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        v24 = *(_QWORD *)(v4 + 16);
        v25 = (unsigned __int16)(v24 >> 38);
        if (!(unsigned __int16)(v24 >> 38))
          goto LABEL_82;
        v26 = 8 * v25;
        v27 = (_QWORD *)(v4 + 40);
        break;
      case 30:
        v11 = *(_QWORD *)(v4 + 48);
        if (v11)
        {
          result = sub_22EBD196C(a1, v11, 0);
          if (!(_DWORD)result)
            return result;
        }
LABEL_34:
        v9 = *(_QWORD *)(v4 + 56);
        if (!v9)
          goto LABEL_5;
LABEL_35:
        result = sub_22EBD196C(a1, v9, 0);
        if (!(_DWORD)result)
          return result;
LABEL_5:
        v6 = (unint64_t *)(v4 + 32);
LABEL_6:
        a2 = *v6;
        if (*v6 < 0x10)
          return 1;
        continue;
      case 31:
        v12 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0;
        goto LABEL_40;
      case 33:
        v34 = *(_QWORD *)(v4 + 24);
        if (*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) != v4)
        {
          result = sub_22EC00F14(a1, v34);
          if (!(_DWORD)result)
            return result;
        }
        v35 = (*(_QWORD *)(v4 + 16) >> 19) & 0x7FLL;
        if (!v35)
          return 1;
        v36 = (uint64_t *)(v4 + 48);
        v37 = 8 * v35 - 8;
        do
        {
          v38 = *v36++;
          result = sub_22EC00F14(a1, v38);
          if ((_DWORD)result)
            v39 = v37 == 0;
          else
            v39 = 1;
          v37 -= 8;
        }
        while (!v39);
        return result;
      case 40:
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 41:
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 42:
        v40 = *(_DWORD *)(v4 + 20);
        v46 = *(_QWORD *)(v4 + 40);
        v45[0] = 8;
        v45[1] = v40;
        return sub_22EC013B8(a1, (uint64_t)v45);
      case 43:
        v6 = (unint64_t *)(v4 + 8);
        goto LABEL_6;
      case 46:
        result = sub_22EC01484(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v41 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v41)
          return 1;
        v42 = v4 + 40;
        v43 = v41 - 1;
        do
        {
          result = sub_22EC013B8(a1, v42);
          v18 = v43-- != 0;
          v44 = v18;
          if (!(_DWORD)result)
            break;
          v42 += 24;
        }
        while ((v44 & 1) != 0);
        return result;
      case 51:
        v12 = *(_QWORD *)(v4 + 24);
LABEL_40:
        result = sub_22EC00F14(a1, v12);
        if (!(_DWORD)result)
          return result;
        goto LABEL_5;
      default:
        return result;
    }
    break;
  }
  do
  {
    if ((sub_22EC00F14(a1, *v27) & 1) == 0)
      return 0;
    ++v27;
    v26 -= 8;
  }
  while (v26);
  v24 = *(_QWORD *)(v4 + 16);
  v25 = (unsigned __int16)(v24 >> 38);
LABEL_82:
  if ((v24 & 0x3C0000000000000) == 0x80000000000000)
  {
    v28 = (_DWORD *)((v4 + 40 + 8 * v25 + 4 * ((v24 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8);
    v31 = *v28;
    v30 = v28 + 2;
    v29 = v31;
    if (v31)
    {
      v32 = 8 * v29;
      while ((sub_22EC00F14(a1, *v30) & 1) != 0)
      {
        ++v30;
        v32 -= 8;
        if (!v32)
          goto LABEL_87;
      }
      return 0;
    }
  }
LABEL_87:
  v33 = sub_22F257D3C(v4);
  if (!v33)
    return 1;
  v14 = v33;
LABEL_49:
  result = sub_22EBD196C(a1, v14, 0);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22EC013B8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v8;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      result = sub_22EC00F14(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      result = sub_22EC01484(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22EBD196C(a1, *(_QWORD *)(a2 + 8), 0);
      break;
    case 8:
      v4 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v4)
      {
        v5 = *(_QWORD *)(a2 + 8);
        v6 = v4 - 1;
        do
        {
          result = sub_22EC013B8(a1, v5);
          v8 = v6-- != 0;
          if (!(_DWORD)result)
            break;
          v5 += 24;
        }
        while (v8);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22EC01484(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  char v5;

  v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 6) != 6 || v2 == 0)
  {
    if ((a2 & 6) != 4)
      return 1;
    if (!v2)
      return 1;
    result = sub_22EC014E4(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if ((_DWORD)result)
      return 1;
  }
  else
  {
    v5 = sub_22EC014E4(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    return (v5 & 1) != 0;
  }
  return result;
}

uint64_t sub_22EC014E4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (!a2)
    return 1;
  v4 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v4 || (result = sub_22EC014E4(a1, v4), (_DWORD)result))
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6 && (*(_BYTE *)(a2 + 8) & 4) != 0)
      return sub_22EC00F14(a1, v6 & 0xFFFFFFFFFFFFFFF0);
    return 1;
  }
  return result;
}

uint64_t sub_22EC01548(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v6 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (v6)
        result = sub_22EC007AC(a1, *v6, v6 + 1);
      else
        result = sub_22EC00F14(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      v5 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (!*v5 || (result = sub_22EC0066C(a1, *v5, v5[1]), (_DWORD)result))
        result = sub_22EC01484(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22EBD196C(a1, *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL, 0);
      break;
    case 8:
      v7 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        v9 = v7 - 1;
        do
        {
          result = sub_22EC013B8(a1, v8);
          v11 = v9-- != 0;
          if (!(_DWORD)result)
            break;
          v8 += 24;
        }
        while (v11);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22EC01660(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!a2)
    return 1;
  if ((*(_WORD *)(a2 + 8) & 0x80) != 0)
    sub_22EFCC320(a2);
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 1;
  while (1)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 1 >= 2
      && ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 35 > 2
       || (v5 = *(_QWORD *)(v4 + 128)) == 0
       || ((*(unsigned __int16 *)(v5 + 8) | (*(unsigned __int8 *)(v5 + 10) << 16)) & 0x100000) == 0))
    {
      result = sub_22EBFC4B4(a1);
      if (!(_DWORD)result)
        break;
    }
    v4 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v4)
      return 1;
  }
  return result;
}

uint64_t sub_22EC016FC(uint64_t a1, uint64_t a2)
{
  if (a2)
    __asm { BR              X10 }
  return 1;
}

void sub_22EC01780()
{
  uint64_t v0;
  uint64_t v1;

  if (sub_22EBD196C(v0, *(_QWORD *)(v1 + 40), 0))
    JUMPOUT(0x22EC0173CLL);
  JUMPOUT(0x22EC01770);
}

void sub_22EC0179C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v2 = *(unsigned int *)(v1 + 48);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2;
    while ((sub_22EBD196C(v0, *v3, 0) & 1) != 0)
    {
      ++v3;
      v4 -= 8;
      if (!v4)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v5 = *(unsigned int *)(v1 + 64);
    if (!(_DWORD)v5)
      JUMPOUT(0x22EC0176CLL);
    v6 = *(uint64_t **)(v1 + 72);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22EBD196C(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22EC01770);
}

void sub_22EC018D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EBD196C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EC01770);
}

void sub_22EC0190C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EBD196C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EC01770);
}

void sub_22EC01944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EBD196C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EC01770);
}

void sub_22EC0197C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22EBD196C(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22EC0176CLL);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EBD196C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EC01770);
}

void sub_22EC019C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EBD196C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EC01770);
}

void sub_22EC01A00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  if (sub_22EBD196C(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 56);
    if ((_DWORD)v2)
    {
      v3 = *(uint64_t **)(v1 + 64);
      v4 = 8 * v2;
      do
      {
        if ((sub_22EBD196C(v0, *v3, 0) & 1) == 0)
          JUMPOUT(0x22EC018CCLL);
        ++v3;
        v4 -= 8;
      }
      while (v4);
    }
    v5 = *(unsigned int *)(v1 + 72);
    if (!(_DWORD)v5)
      JUMPOUT(0x22EC0176CLL);
    v6 = *(uint64_t **)(v1 + 80);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22EBD196C(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22EC01770);
}

void sub_22EC01A7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EBD196C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EC01770);
}

void sub_22EC01AB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EBD196C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EC01770);
}

void sub_22EC01AEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22EBD196C(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22EC0176CLL);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EBD196C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EC01770);
}

void sub_22EC01B38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22EBD196C(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22EC0176CLL);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EBD196C(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EC01770);
}

void sub_22EC01B84()
{
  JUMPOUT(0x22EC01758);
}

void sub_22EC01B8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (sub_22EBD196C(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if ((_DWORD)v2)
    {
      v3 = *(uint64_t **)(v1 + 56);
      v4 = 8 * v2;
      while ((sub_22EBD196C(v0, *v3, 0) & 1) != 0)
      {
        ++v3;
        v4 -= 8;
        if (!v4)
          goto LABEL_6;
      }
LABEL_33:
      JUMPOUT(0x22EC018CCLL);
    }
LABEL_6:
    v5 = *(unsigned int *)(v1 + 64);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v1 + 72);
      v7 = 8 * v5;
      while ((sub_22EBD196C(v0, *v6, 0) & 1) != 0)
      {
        ++v6;
        v7 -= 8;
        if (!v7)
          goto LABEL_10;
      }
      goto LABEL_33;
    }
LABEL_10:
    v8 = *(unsigned int *)(v1 + 80);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)(v1 + 88);
      v10 = 8 * v8;
      while ((sub_22EBD196C(v0, *v9, 0) & 1) != 0)
      {
        ++v9;
        v10 -= 8;
        if (!v10)
          goto LABEL_14;
      }
      goto LABEL_33;
    }
LABEL_14:
    v11 = *(unsigned int *)(v1 + 96);
    if ((_DWORD)v11)
    {
      v12 = *(uint64_t **)(v1 + 104);
      v13 = 8 * v11;
      while ((sub_22EBD196C(v0, *v12, 0) & 1) != 0)
      {
        ++v12;
        v13 -= 8;
        if (!v13)
          goto LABEL_18;
      }
      goto LABEL_33;
    }
LABEL_18:
    v14 = *(unsigned int *)(v1 + 128);
    if (!(_DWORD)v14)
      JUMPOUT(0x22EC0176CLL);
    v15 = *(uint64_t **)(v1 + 136);
    v16 = 8 * v14 - 8;
    do
    {
      v17 = *v15++;
      if (sub_22EBD196C(v0, v17, 0))
        v18 = v16 == 0;
      else
        v18 = 1;
      v16 -= 8;
    }
    while (!v18);
  }
  JUMPOUT(0x22EC01770);
}

uint64_t sub_22EC01C98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (!a2)
    return 1;
  v4 = a2 + 16;
  v5 = *(_DWORD *)(a2 + 12);
  if ((v5 & 0x1FFFFFFF) != 0)
  {
    v6 = 8 * (v5 & 0x1FFFFFFF);
    v7 = a2 + 16;
    while ((sub_22EBFC4B4(a1) & 1) != 0)
    {
      v7 += 8;
      v6 -= 8;
      if (!v6)
      {
        v5 = *(_DWORD *)(a2 + 12);
        goto LABEL_7;
      }
    }
    return 0;
  }
  else
  {
LABEL_7:
    if ((v5 & 0x40000000) == 0)
      return 1;
    v8 = *(_QWORD *)(v4 + 8 * (v5 & 0x1FFFFFFF));
    if (!v8)
      return 1;
    result = sub_22EBD196C(a1, v8, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22EC01D38(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 120);
  if ((v3 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v3 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22EC01C98(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v3 = *(_QWORD *)(a2 + 120);
      if ((v3 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  return sub_22EC0066C(a1, v7, v8);
}

uint64_t sub_22EC01DAC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;

  result = sub_22EC01D38(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 74) & 1) == 0)
      return 1;
    v5 = sub_22E46A3A0(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = v6;
      v8 = v5 + 24;
      do
      {
        result = sub_22EC007AC(a1, **(_QWORD **)(v8 - 8), *(_QWORD *)(v8 - 8) + 8);
        if ((_DWORD)result)
          v9 = v8 == v7;
        else
          v9 = 1;
        v8 += 24;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t sub_22EC01E24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t *v11;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22EC01C98(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22EC0066C(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_QWORD *)(a2 + 56);
    if ((v10 & 4) != 0)
    {
      v11 = *(unint64_t **)((v10 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v11)
        return (sub_22EC007AC(a1, *v11, (uint64_t)(v11 + 1)) & 1) != 0;
    }
    else if (v10 >= 8)
    {
      v11 = (unint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
      return (sub_22EC007AC(a1, *v11, (uint64_t)(v11 + 1)) & 1) != 0;
    }
    result = sub_22EC00F14(a1, *(_QWORD *)(a2 + 48));
    if (!(_DWORD)result)
      return result;
    return 1;
  }
  return result;
}

uint64_t sub_22EC01EF0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  _BOOL4 v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22EC01C98(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22EC0066C(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_DWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 152);
    v38 = *(_QWORD *)(a2 + 40);
    v39 = v10;
    v40 = v11;
    result = sub_22EC006F4(a1, &v38);
    if ((_DWORD)result)
    {
      v12 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(a2 + 144) & 6) == 4 && v12 != 0 && (*(_BYTE *)(v12 + 16) & 6) != 0)
      {
        v14 = *(_QWORD *)(v12 + 32);
        if (v14)
        {
          v15 = *(unsigned int *)(v14 + 8);
          if ((_DWORD)v15)
          {
            v16 = v14 + 16;
            while ((sub_22EC01548(a1, v16) & 1) != 0)
            {
              v16 += 32;
              if (!--v15)
                goto LABEL_19;
            }
            return 0;
          }
        }
      }
LABEL_19:
      v17 = *(_QWORD *)(a2 + 56);
      v18 = (unint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
      if ((v17 & 4) != 0)
        v18 = (unint64_t *)v18[4];
      if (v18)
      {
        result = sub_22EC007AC(a1, *v18, (uint64_t)(v18 + 1));
        if (!(_DWORD)result)
          return result;
        v17 = *(_QWORD *)(a2 + 56);
      }
      if ((v17 & 4) == 0
        || (v19 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 40)) == 0
        || (result = sub_22EBD196C(a1, v19, 0), (_DWORD)result))
      {
        if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x37)
        {
          v20 = sub_22EFD7ED0(a2);
          v21 = sub_22EFD7ED0(a2) + 8 * ((*(_QWORD *)(a2 + 80) >> 40) & 0x1FFFFFLL);
          while (v20 != v21)
          {
            v22 = *(_QWORD *)v20;
            if ((*(_WORD *)(*(_QWORD *)v20 + 28) & 4) != 0)
            {
              v23 = (unint64_t *)(*(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8);
              if ((*(_QWORD *)v22 & 6) != 0 || v23 == 0)
                goto LABEL_37;
              result = sub_22EC007AC(a1, *v23, (uint64_t)(v23 + 1));
              if (!(_DWORD)result)
                return result;
              if ((*(_WORD *)(v22 + 28) & 4) != 0)
              {
LABEL_37:
                result = sub_22EBD196C(a1, *(_QWORD *)(v22 + 8), 0);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v20 += 8;
          }
        }
        v25 = sub_22E49F868(a2) && (*(_BYTE *)(a2 + 83) & 2) == 0;
        if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
          goto LABEL_70;
        v26 = *(_WORD *)(a2 + 80) & 0x7F;
        v27 = -40;
        if (v26 > 0x46)
        {
          if (v26 == 83)
            goto LABEL_60;
          if (v26 == 71)
          {
            v27 = -56;
            goto LABEL_60;
          }
          if (v26 != 81)
          {
LABEL_55:
            v28 = v26 - 52;
            v29 = v26 - 33 >= 5;
            v30 = -48;
            if (!v29)
              v30 = -64;
            if (v28 >= 6)
              v27 = v30;
            else
              v27 = -72;
          }
        }
        else
        {
          if (v26 > 0x18)
            goto LABEL_54;
          if (v26 == 16)
          {
LABEL_46:
            v27 = -48;
            goto LABEL_60;
          }
          if (((1 << v26) & 0x1066) == 0)
          {
            if (v26 == 24)
              goto LABEL_46;
LABEL_54:
            if (v26 == 70)
            {
              v27 = -64;
              goto LABEL_60;
            }
            goto LABEL_55;
          }
        }
LABEL_60:
        v31 = *(_QWORD *)(a2 + 72 + v27 + 16);
        v32 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF8);
        if ((v31 & 4) != 0)
          v32 = (_QWORD *)*v32;
        if (v32)
        {
          v33 = v32[8];
          if (v33)
          {
            if (((*(unsigned __int16 *)(v33 + 8) | (*(unsigned __int8 *)(v33 + 10) << 16)) & 0x100000) != 0)
            {
              v34 = sub_22EFD462C((unint64_t)(v32 - 8));
              if (v34)
              {
                if ((*(_DWORD *)(v34 + 28) & 0x7F) != 0x1D || (v34 = *(_QWORD *)(v34 + 48)) != 0)
                {
                  if (v34 == a2
                    || (v35 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v34 + 32))(v34),
                        v35 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2)))
                  {
                    if (!v25)
                      return 1;
LABEL_71:
                    v36 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
                    result = sub_22EBD196C(a1, v36, 0);
                    if (!(_DWORD)result)
                      return result;
                    if ((*(_WORD *)(a2 + 80) & 0x80) != 0)
                      sub_22EFCC320(a2 + 72);
                    v37 = *(_QWORD *)(a2 + 88);
                    if (v37)
                    {
                      do
                      {
                        if ((*(_DWORD *)(v37 + 28) & 0x7E) == 0x2E)
                        {
                          result = sub_22EBFC4B4(a1);
                          if (!(_DWORD)result)
                            break;
                        }
                        result = 1;
                        v37 = *(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF8;
                      }
                      while (v37);
                      return result;
                    }
                    return 1;
                  }
                }
              }
            }
          }
        }
LABEL_70:
        if (!v25)
          return 1;
        goto LABEL_71;
      }
    }
  }
  return result;
}

uint64_t sub_22EC022B4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;

  result = sub_22EC01E24(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      return 1;
    if ((*(_BYTE *)(a2 + 97) & 8) != 0)
      return 1;
    v5 = sub_22EFBC5B4(a2);
    result = sub_22EBD196C(a1, v5, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22EC02314(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *mm;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *i2;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *n;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *ii;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *nn;
  uint64_t v79;
  uint64_t v80;
  _QWORD *i1;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *i;
  uint64_t v92;
  uint64_t v93;
  _QWORD *j;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *jj;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *kk;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *k;
  uint64_t v175;
  uint64_t v176;
  _QWORD *m;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;

  if (!a2)
    return 1;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 3:
      v85 = (_QWORD *)(a2 + 24);
      result = sub_22EBD196C(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if ((_DWORD)result)
      {
        v86 = *(unsigned int *)(a2 + 16);
        if (!(_DWORD)v86)
          return 1;
        v87 = 8 * v86;
        do
        {
          if ((sub_22EBD196C(a1, *v85, 0) & 1) == 0)
            return 0;
          ++v85;
          v87 -= 8;
        }
        while (v87);
        return 1;
      }
      return result;
    case 4:
    case 7:
    case 0xC:
    case 0x13:
    case 0x15:
    case 0x23:
    case 0x3C:
    case 0x3D:
    case 0x46:
    case 0x4B:
      v5 = *(_QWORD *)(a2 + 16);
      return (sub_22EBD196C(a1, v5, 0) & 1) != 0;
    case 5:
      v137 = (_QWORD *)(a2 + 24);
      result = sub_22EBD196C(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if (!(_DWORD)result)
        return result;
      v138 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v138)
        return 1;
      v139 = 8 * v138;
      while ((sub_22EBD196C(a1, *v137, 0) & 1) != 0)
      {
        ++v137;
        v139 -= 8;
        if (!v139)
          return 1;
      }
      return 0;
    case 6:
      result = sub_22EBD196C(a1, *(_QWORD *)(a2 + 24), 0);
      if (!(_DWORD)result)
        return result;
      v134 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v134)
        return 1;
      v135 = (_QWORD *)(a2 + 40);
      v136 = 8 * v134;
      while ((sub_22EBD196C(a1, *v135, 0) & 1) != 0)
      {
        ++v135;
        v136 -= 8;
        if (!v136)
          return 1;
      }
      return 0;
    case 0xE:
      v88 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v88)
        return 1;
      v89 = a2 + 24;
      v90 = 8 * v88;
      for (i = (_QWORD *)(a2 + 24); (sub_22EBD196C(a1, *i, 0) & 1) != 0; ++i)
      {
        v90 -= 8;
        if (!v90)
        {
          v92 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v92)
            return 1;
          v93 = 8 * v92;
          for (j = (_QWORD *)(v89 + 8 * v92); (sub_22EBD196C(a1, *j, 0) & 1) != 0; ++j)
          {
            v93 -= 8;
            if (!v93)
            {
              v95 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v95)
                return 1;
              v96 = (_QWORD *)(v89 + 8 * v95 + 8 * v95);
              v97 = 8 * v95;
              while ((sub_22EBD196C(a1, *v96, 0) & 1) != 0)
              {
                ++v96;
                v97 -= 8;
                if (!v97)
                {
                  v98 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v98)
                    return 1;
                  v99 = (_QWORD *)(v89 + 8 * v98 + 8 * v98 + 8 * v98);
                  v100 = 8 * v98;
                  while ((sub_22EBD196C(a1, *v99, 0) & 1) != 0)
                  {
                    ++v99;
                    v100 -= 8;
                    if (!v100)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0xF:
      v171 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v171)
        return 1;
      v172 = a2 + 24;
      v173 = 8 * v171;
      for (k = (_QWORD *)(a2 + 24); (sub_22EBD196C(a1, *k, 0) & 1) != 0; ++k)
      {
        v173 -= 8;
        if (!v173)
        {
          v175 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v175)
            return 1;
          v176 = 8 * v175;
          for (m = (_QWORD *)(v172 + 8 * v175); (sub_22EBD196C(a1, *m, 0) & 1) != 0; ++m)
          {
            v176 -= 8;
            if (!v176)
            {
              v178 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v178)
                return 1;
              v179 = (_QWORD *)(v172 + 8 * v178 + 8 * v178);
              v180 = 8 * v178;
              while ((sub_22EBD196C(a1, *v179, 0) & 1) != 0)
              {
                ++v179;
                v180 -= 8;
                if (!v180)
                {
                  v181 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v181)
                    return 1;
                  v182 = (_QWORD *)(v172 + 8 * v181 + 8 * v181 + 8 * v181);
                  v183 = 8 * v181;
                  while ((sub_22EBD196C(a1, *v182, 0) & 1) != 0)
                  {
                    ++v182;
                    v183 -= 8;
                    if (!v183)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x12:
      v184 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v184)
        return 1;
      v185 = (_QWORD *)(a2 + 40);
      v186 = 8 * v184;
      while ((sub_22EBD196C(a1, *v185, 0) & 1) != 0)
      {
        ++v185;
        v186 -= 8;
        if (!v186)
          return 1;
      }
      return 0;
    case 0x14:
    case 0x58:
      v5 = *(_QWORD *)(a2 + 24);
      return (sub_22EBD196C(a1, v5, 0) & 1) != 0;
    case 0x16:
      result = sub_22EBD196C(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 40);
      return (sub_22EBD196C(a1, v5, 0) & 1) != 0;
    case 0x18:
      result = sub_22EBD196C(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 48);
      return (sub_22EBD196C(a1, v5, 0) & 1) != 0;
    case 0x1A:
      v193 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v193)
        return 1;
      v194 = (_QWORD *)(a2 + 24);
      v195 = 8 * v193;
      while ((sub_22EBD196C(a1, *v194, 0) & 1) != 0)
      {
        ++v194;
        v195 -= 8;
        if (!v195)
          return 1;
      }
      return 0;
    case 0x1B:
    case 0x1C:
    case 0x21:
    case 0x24:
    case 0x34:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3E:
    case 0x4E:
      result = sub_22EBD196C(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 32);
      return (sub_22EBD196C(a1, v5, 0) & 1) != 0;
    case 0x1D:
      v40 = a2 + 40;
      v41 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v41)
        goto LABEL_72;
      v42 = 8 * v41;
      v43 = (_QWORD *)(a2 + 40);
      while ((sub_22EBD196C(a1, *v43, 0) & 1) != 0)
      {
        ++v43;
        v42 -= 8;
        if (!v42)
        {
LABEL_72:
          result = sub_22EBD196C(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          v44 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v44)
          {
            v45 = 8 * v44;
            for (n = (_QWORD *)(v40 + 8 * v44); (sub_22EBD196C(a1, *n, 0) & 1) != 0; ++n)
            {
              v45 -= 8;
              if (!v45)
              {
                v47 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v47)
                  return 1;
                v48 = (_QWORD *)(v40 + 8 * v47 + 8 * v47);
                v49 = 8 * v47;
                while ((sub_22EBD196C(a1, *v48, 0) & 1) != 0)
                {
                  ++v48;
                  v49 -= 8;
                  if (!v49)
                    return 1;
                }
                return 0;
              }
            }
            return 0;
          }
          return 1;
        }
      }
      return 0;
    case 0x1E:
      v82 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v82)
        return 1;
      v83 = (_QWORD *)(a2 + 24);
      v84 = 8 * v82;
      while ((sub_22EBD196C(a1, *v83, 0) & 1) != 0)
      {
        ++v83;
        v84 -= 8;
        if (!v84)
          return 1;
      }
      return 0;
    case 0x1F:
      v187 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v187)
        return 1;
      v188 = (_QWORD *)(a2 + 104);
      v189 = 8 * v187;
      while ((sub_22EBD196C(a1, *v188, 0) & 1) != 0)
      {
        ++v188;
        v189 -= 8;
        if (!v189)
          return 1;
      }
      return 0;
    case 0x22:
      v199 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v199)
        return 1;
      v200 = (_QWORD *)(a2 + 80);
      v201 = 8 * v199;
      while ((sub_22EBD196C(a1, *v200, 0) & 1) != 0)
      {
        ++v200;
        v201 -= 8;
        if (!v201)
          return 1;
      }
      return 0;
    case 0x25:
      if (!sub_22EC0066C(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22EC006F4(a1, (uint64_t *)&v208))
        return 0;
      v56 = a2 + 96;
      v57 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v57)
        goto LABEL_98;
      v58 = 8 * v57;
      v59 = (_QWORD *)(a2 + 96);
      while ((sub_22EBD196C(a1, *v59, 0) & 1) != 0)
      {
        ++v59;
        v58 -= 8;
        if (!v58)
        {
LABEL_98:
          if (sub_22EBD196C(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22EBD196C(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v60 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v60)
              return 1;
            v61 = 8 * v60;
            for (ii = (_QWORD *)(v56 + 8 * v60); (sub_22EBD196C(a1, *ii, 0) & 1) != 0; ++ii)
            {
              v61 -= 8;
              if (!v61)
              {
                v63 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v63)
                  return 1;
                v64 = (_QWORD *)(v56 + 8 * v63 + 8 * v63);
                v65 = 8 * v63;
                while ((sub_22EBD196C(a1, *v64, 0) & 1) != 0)
                {
                  ++v64;
                  v65 -= 8;
                  if (!v65)
                  {
                    v66 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v66)
                      return 1;
                    v67 = (_QWORD *)(v56 + 8 * v66 + 8 * v66 + 8 * v66);
                    v68 = 8 * v66;
                    while ((sub_22EBD196C(a1, *v67, 0) & 1) != 0)
                    {
                      ++v67;
                      v68 -= 8;
                      if (!v68)
                      {
                        v69 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v69)
                          return 1;
                        v70 = (_QWORD *)(v56 + 8 * v69 + 8 * v69 + 8 * v69 + 8 * v69);
                        v71 = 8 * v69;
                        while ((sub_22EBD196C(a1, *v70, 0) & 1) != 0)
                        {
                          ++v70;
                          v71 -= 8;
                          if (!v71)
                          {
                            v72 = *(unsigned int *)(a2 + 16);
                            if (!(_DWORD)v72)
                              return 1;
                            v73 = (_QWORD *)(v56 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72);
                            v74 = 8 * v72;
                            while ((sub_22EBD196C(a1, *v73, 0) & 1) != 0)
                            {
                              ++v73;
                              v74 -= 8;
                              if (!v74)
                                return 1;
                            }
                            return 0;
                          }
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x27:
      v168 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v168)
        return 1;
      v169 = (_QWORD *)(a2 + 24);
      v170 = 8 * v168;
      while ((sub_22EBD196C(a1, *v169, 0) & 1) != 0)
      {
        ++v169;
        v170 -= 8;
        if (!v170)
          return 1;
      }
      return 0;
    case 0x29:
      v53 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v53)
        return 1;
      v54 = (_QWORD *)(a2 + 32);
      v55 = 8 * v53;
      while ((sub_22EBD196C(a1, *v54, 0) & 1) != 0)
      {
        ++v54;
        v55 -= 8;
        if (!v55)
          return 1;
      }
      return 0;
    case 0x2A:
      v50 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v50)
        return 1;
      v51 = (_QWORD *)(a2 + 80);
      v52 = 8 * v50;
      while ((sub_22EBD196C(a1, *v51, 0) & 1) != 0)
      {
        ++v51;
        v52 -= 8;
        if (!v52)
          return 1;
      }
      return 0;
    case 0x2B:
      v101 = a2 + 64;
      v102 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v102)
        goto LABEL_164;
      v103 = 8 * v102;
      v104 = (_QWORD *)(a2 + 64);
      while ((sub_22EBD196C(a1, *v104, 0) & 1) != 0)
      {
        ++v104;
        v103 -= 8;
        if (!v103)
        {
LABEL_164:
          result = sub_22EBD196C(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22EBD196C(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v105 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v105)
            return 1;
          v106 = 8 * v105;
          for (jj = (_QWORD *)(v101 + 8 * v105); (sub_22EBD196C(a1, *jj, 0) & 1) != 0; ++jj)
          {
            v106 -= 8;
            if (!v106)
            {
              v108 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v108)
                return 1;
              v109 = (_QWORD *)(v101 + 8 * v108 + 8 * v108);
              v110 = 8 * v108;
              while ((sub_22EBD196C(a1, *v109, 0) & 1) != 0)
              {
                ++v109;
                v110 -= 8;
                if (!v110)
                {
                  v111 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v111)
                    return 1;
                  v112 = (_QWORD *)(v101 + 8 * v111 + 8 * v111 + 8 * v111);
                  v113 = 8 * v111;
                  while ((sub_22EBD196C(a1, *v112, 0) & 1) != 0)
                  {
                    ++v112;
                    v113 -= 8;
                    if (!v113)
                    {
                      v114 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v114)
                        return 1;
                      v115 = (_QWORD *)(v101 + 8 * v114 + 8 * v114 + 8 * v114 + 8 * v114);
                      v116 = 8 * v114;
                      while ((sub_22EBD196C(a1, *v115, 0) & 1) != 0)
                      {
                        ++v115;
                        v116 -= 8;
                        if (!v116)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2C:
      v117 = a2 + 64;
      v118 = *(unsigned int *)(a2 + 16);
      result = sub_22EBD196C(a1, *(_QWORD *)(a2 + 64 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118), 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22EBD196C(a1, *(_QWORD *)(v117+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8), 0);
      if (!(_DWORD)result)
        return result;
      v119 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v119)
        goto LABEL_191;
      v120 = 8 * v119;
      v121 = (_QWORD *)(a2 + 64);
      while ((sub_22EBD196C(a1, *v121, 0) & 1) != 0)
      {
        ++v121;
        v120 -= 8;
        if (!v120)
        {
LABEL_191:
          result = sub_22EBD196C(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22EBD196C(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v122 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v122)
            return 1;
          v123 = 8 * v122;
          for (kk = (_QWORD *)(v117 + 8 * v122); (sub_22EBD196C(a1, *kk, 0) & 1) != 0; ++kk)
          {
            v123 -= 8;
            if (!v123)
            {
              v125 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v125)
                return 1;
              v126 = (_QWORD *)(v117 + 8 * v125 + 8 * v125);
              v127 = 8 * v125;
              while ((sub_22EBD196C(a1, *v126, 0) & 1) != 0)
              {
                ++v126;
                v127 -= 8;
                if (!v127)
                {
                  v128 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v128)
                    return 1;
                  v129 = (_QWORD *)(v117 + 8 * v128 + 8 * v128 + 8 * v128);
                  v130 = 8 * v128;
                  while ((sub_22EBD196C(a1, *v129, 0) & 1) != 0)
                  {
                    ++v129;
                    v130 -= 8;
                    if (!v130)
                    {
                      v131 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v131)
                        return 1;
                      v132 = (_QWORD *)(v117 + 8 * v131 + 8 * v131 + 8 * v131 + 8 * v131);
                      v133 = 8 * v131;
                      while ((sub_22EBD196C(a1, *v132, 0) & 1) != 0)
                      {
                        ++v132;
                        v133 -= 8;
                        if (!v133)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2E:
      v190 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v190)
        return 1;
      v191 = (_QWORD *)(a2 + 136);
      v192 = 8 * v190;
      while ((sub_22EBD196C(a1, *v191, 0) & 1) != 0)
      {
        ++v191;
        v192 -= 8;
        if (!v192)
          return 1;
      }
      return 0;
    case 0x35:
      v6 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v6)
        return 1;
      v7 = a2 + 24;
      v8 = 8 * v6;
      for (mm = (_QWORD *)(a2 + 24); (sub_22EBD196C(a1, *mm, 0) & 1) != 0; ++mm)
      {
        v8 -= 8;
        if (!v8)
        {
          v10 = *(unsigned int *)(a2 + 16);
          v11 = (uint64_t *)(v7 + 8 * v10);
          v208 = (unint64_t)v11;
          if ((_DWORD)v10)
          {
            v12 = 0;
            v13 = &v11[v10];
            while (1)
            {
              if ((v12 & 3) != 0)
              {
                if ((v12 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                  v14 = (_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 40);
                else
                  v14 = (_QWORD *)sub_22F3AC1A8(*v11);
                if ((sub_22EBD196C(a1, *v14, 0) & 1) == 0)
                  return 0;
                if (v12 < 4)
                  sub_22F3F2FE0((uint64_t)&v208, 1);
                else
                  sub_22F0D8720((uint64_t)&v208);
              }
              else
              {
                if (!sub_22EBD196C(a1, *v11, 0))
                  return 0;
                *(_QWORD *)&v208 = v11 + 1;
              }
              v12 = *((_QWORD *)&v208 + 1);
              v11 = (uint64_t *)v208;
              if ((uint64_t *)v208 == v13 && *((_QWORD *)&v208 + 1) == 0)
                return 1;
            }
          }
          return 1;
        }
      }
      return 0;
    case 0x3F:
      v75 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v75)
        return 1;
      v76 = a2 + 24;
      v77 = 8 * v75;
      for (nn = (_QWORD *)(a2 + 24); (sub_22EBD196C(a1, *nn, 0) & 1) != 0; ++nn)
      {
        v77 -= 8;
        if (!v77)
        {
          v79 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v79)
            return 1;
          v80 = 8 * v79;
          for (i1 = (_QWORD *)(v76 + 8 * v79); (sub_22EBD196C(a1, *i1, 0) & 1) != 0; ++i1)
          {
            v80 -= 8;
            if (!v80)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 0x42:
      if (!sub_22EC0066C(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v208 = *(_OWORD *)(a2 + 80);
      v209 = *(_QWORD *)(a2 + 96);
      if (!sub_22EC006F4(a1, (uint64_t *)&v208))
        return 0;
      v140 = a2 + 104;
      v141 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v141)
        goto LABEL_228;
      v142 = 8 * v141;
      v143 = (_QWORD *)(a2 + 104);
      while ((sub_22EBD196C(a1, *v143, 0) & 1) != 0)
      {
        ++v143;
        v142 -= 8;
        if (!v142)
        {
LABEL_228:
          if (sub_22EBD196C(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22EBD196C(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v144 = *(unsigned int *)(a2 + 16);
            if ((_DWORD)v144)
            {
              v145 = 8 * v144;
              v146 = (_QWORD *)(v140 + 8 * v144);
              while ((sub_22EBD196C(a1, *v146, 0) & 1) != 0)
              {
                ++v146;
                v145 -= 8;
                if (!v145)
                {
                  v147 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v147)
                    goto LABEL_246;
                  v148 = (_QWORD *)(v140 + 8 * v147 + 8 * v147);
                  v149 = 8 * v147;
                  while ((sub_22EBD196C(a1, *v148, 0) & 1) != 0)
                  {
                    ++v148;
                    v149 -= 8;
                    if (!v149)
                    {
                      v150 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v150)
                        goto LABEL_246;
                      v151 = (_QWORD *)(v140 + 8 * v150 + 8 * v150 + 8 * v150);
                      v152 = 8 * v150;
                      while ((sub_22EBD196C(a1, *v151, 0) & 1) != 0)
                      {
                        ++v151;
                        v152 -= 8;
                        if (!v152)
                        {
                          v153 = *(unsigned int *)(a2 + 16);
                          if (!(_DWORD)v153)
                            goto LABEL_246;
                          v154 = (_QWORD *)(v140 + 8 * v153 + 8 * v153 + 8 * v153 + 8 * v153);
                          v155 = 8 * v153;
                          while ((sub_22EBD196C(a1, *v154, 0) & 1) != 0)
                          {
                            ++v154;
                            v155 -= 8;
                            if (!v155)
                              goto LABEL_246;
                          }
                          return 0;
                        }
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
            else
            {
LABEL_246:
              if (*(_DWORD *)(a2 + 48) != 1)
                return 1;
              v156 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v156)
                return 1;
              v157 = (_QWORD *)(v140 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156);
              v158 = 8 * v156;
              while ((sub_22EBD196C(a1, *v157, 0) & 1) != 0)
              {
                ++v157;
                v158 -= 8;
                if (!v158)
                {
                  v159 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v159)
                    return 1;
                  v160 = (_QWORD *)(v140 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159);
                  v161 = 8 * v159;
                  while ((sub_22EBD196C(a1, *v160, 0) & 1) != 0)
                  {
                    ++v160;
                    v161 -= 8;
                    if (!v161)
                    {
                      v162 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v162)
                        return 1;
                      v163 = (_QWORD *)(v140 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162);
                      v164 = 8 * v162;
                      while ((sub_22EBD196C(a1, *v163, 0) & 1) != 0)
                      {
                        ++v163;
                        v164 -= 8;
                        if (!v164)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x47:
      result = sub_22EBD196C(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 64);
      return (sub_22EBD196C(a1, v5, 0) & 1) != 0;
    case 0x49:
      v202 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v202)
        return 1;
      v203 = (_QWORD *)(a2 + 24);
      v204 = 8 * v202;
      while ((sub_22EBD196C(a1, *v203, 0) & 1) != 0)
      {
        ++v203;
        v204 -= 8;
        if (!v204)
          return 1;
      }
      return 0;
    case 0x4C:
      v165 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v165)
        return 1;
      v166 = (_QWORD *)(a2 + 24);
      v167 = 8 * v165;
      while ((sub_22EBD196C(a1, *v166, 0) & 1) != 0)
      {
        ++v166;
        v167 -= 8;
        if (!v167)
          return 1;
      }
      return 0;
    case 0x4D:
      if (!sub_22EC0066C(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22EC006F4(a1, (uint64_t *)&v208))
        return 0;
      v24 = a2 + 96;
      v25 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v25)
        goto LABEL_49;
      v26 = 8 * v25;
      v27 = (_QWORD *)(a2 + 96);
      while ((sub_22EBD196C(a1, *v27, 0) & 1) != 0)
      {
        ++v27;
        v26 -= 8;
        if (!v26)
        {
LABEL_49:
          if (sub_22EBD196C(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22EBD196C(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v28 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v28)
              return 1;
            v29 = 8 * v28;
            for (i2 = (_QWORD *)(v24 + 8 * v28); (sub_22EBD196C(a1, *i2, 0) & 1) != 0; ++i2)
            {
              v29 -= 8;
              if (!v29)
              {
                v31 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v31)
                  return 1;
                v32 = (_QWORD *)(v24 + 8 * v31 + 8 * v31);
                v33 = 8 * v31;
                while ((sub_22EBD196C(a1, *v32, 0) & 1) != 0)
                {
                  ++v32;
                  v33 -= 8;
                  if (!v33)
                  {
                    v34 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v34)
                      return 1;
                    v35 = (_QWORD *)(v24 + 8 * v34 + 8 * v34 + 8 * v34);
                    v36 = 8 * v34;
                    while ((sub_22EBD196C(a1, *v35, 0) & 1) != 0)
                    {
                      ++v35;
                      v36 -= 8;
                      if (!v36)
                      {
                        v37 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v37)
                          return 1;
                        v38 = (_QWORD *)(v24 + 8 * v37 + 8 * v37 + 8 * v37 + 8 * v37);
                        v39 = 8 * v37;
                        while ((sub_22EBD196C(a1, *v38, 0) & 1) != 0)
                        {
                          ++v38;
                          v39 -= 8;
                          if (!v39)
                            return 1;
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x51:
      v16 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v16)
        return 1;
      v17 = (_QWORD *)(a2 + 104);
      v18 = 8 * v16;
      while ((sub_22EBD196C(a1, *v17, 0) & 1) != 0)
      {
        ++v17;
        v18 -= 8;
        if (!v18)
          return 1;
      }
      return 0;
    case 0x59:
      v205 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v205)
        return 1;
      v206 = (_QWORD *)(a2 + 80);
      v207 = 8 * v205;
      while ((sub_22EBD196C(a1, *v206, 0) & 1) != 0)
      {
        ++v206;
        v207 -= 8;
        if (!v207)
          return 1;
      }
      return 0;
    case 0x5A:
      v196 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v196)
        return 1;
      v197 = (_QWORD *)(a2 + 80);
      v198 = 8 * v196;
      while ((sub_22EBD196C(a1, *v197, 0) & 1) != 0)
      {
        ++v197;
        v198 -= 8;
        if (!v198)
          return 1;
      }
      return 0;
    case 0x5B:
      v19 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v19)
        return 1;
      v20 = 0;
      v21 = a2 + 24;
      v22 = 2 * v19;
      break;
    default:
      return 1;
  }
  while (1)
  {
    v23 = *(_QWORD *)(v21 + 8 * (v20 + 1));
    result = sub_22EBD196C(a1, *(_QWORD *)(v21 + 8 * v20), 0);
    if (!(_DWORD)result)
      break;
    if ((sub_22EBD196C(a1, v23, 0) & 1) == 0)
      return 0;
    v20 += 2;
    if (v22 == v20)
      return 1;
  }
  return result;
}

uint64_t sub_22EC033C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 1;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4 == v3)
    v5 = 0;
  else
    v5 = *(uint64_t **)(a2 + 24);
  if (v4 == v3)
    v6 = 0;
  else
    v6 = *(uint64_t **)(a2 + 16);
  v14 = 0;
  v15 = 0;
  v13 = v6;
  if (v6 == v5)
    return 1;
  v9 = 0;
  while (1)
  {
    if ((v9 & 3) == 0)
    {
      result = sub_22EBD196C(a1, *v6, a3);
      if (!(_DWORD)result)
        return result;
      v13 = v6 + 1;
      goto LABEL_18;
    }
    v10 = (_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0 ? (v9 & 0xFFFFFFFFFFFFFFFCLL) + 40 : sub_22F3AC1A8(*v6));
    if ((sub_22EBD196C(a1, *v10, a3) & 1) == 0)
      return 0;
    if (v9 < 4)
      sub_22F3F2FE0((uint64_t)&v13, 1);
    else
      sub_22F0D8720((uint64_t)&v13);
LABEL_18:
    v6 = v13;
    v9 = v14;
    if (v13 == v5 && v14 == 0)
      return 1;
  }
}

uint64_t sub_22EC034C0(uint64_t **a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v6 = **a1;
  result = (uint64_t)sub_22E3BA914((llvm::SmallPtrSetImplBase *)(v6 + 1640), a3);
  v8 = *(_QWORD *)(v6 + 1648);
  v9 = 1656;
  if (v8 == *(_QWORD *)(v6 + 1640))
    v9 = 1660;
  if (result == v8 + 8 * *(unsigned int *)(v6 + v9) || *(_BYTE *)a1[1])
  {
    v10 = sub_22EC521F4((uint64_t *)a1[2][237], *((_DWORD *)a1[2] + 476), a2, (uint64_t)a1[2]);
    if ((v10 & 0xFF00000000) != 0)
    {
      v11 = v10;
      v12 = a1[2];
      sub_22EFF605C((uint64_t)a3);
      LODWORD(v23) = v11;
      sub_22EB4EB24(a2, v13, v12, &v23);
    }
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      goto LABEL_25;
    v14 = 0;
    v15 = a1[2][11];
    v16 = a2;
    while (!sub_22EFBC5B4(v16))
    {
      if ((*(_BYTE *)(v16 + 72) & 3) != 0)
      {
        if (v14)
          goto LABEL_25;
        v14 = 1;
      }
      v17 = sub_22E3CD31C((uint64_t *)(v16 + 72), v16);
      if (v17 != a2)
      {
        v16 = v17;
        if (v17)
          continue;
      }
      goto LABEL_25;
    }
    result = sub_22EFBCB70(v16);
    if ((result & 1) != 0
      || (result = sub_22EFBCE18(v16),
          (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
      || (*(_BYTE *)(*(_QWORD *)(result + 8) + 2) & 1) != 0)
    {
      v18 = 0;
    }
    else
    {
      result = sub_22EFBCBC4(a2, v15);
      v18 = result ^ 1;
    }
    if (!*(_BYTE *)a1[1] || v18 != 0)
    {
LABEL_25:
      v22 = 0;
      v23 = 0;
      sub_22EFF605C((uint64_t)a3);
      v21 = v20;
      result = sub_22EB4EE10((uint64_t)a1[2], a2, v20, 0, 0, 0, &v23, &v22, 0);
      if ((_DWORD)result)
        return sub_22EB4EE10((uint64_t)a1[2], a2, v21, 0, 0, 1, &v23, &v22, 0);
    }
  }
  return result;
}

uint64_t *sub_22EC036B0(uint64_t *result, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v11;
  unsigned int v13;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v23;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v31;
  unsigned int v33;
  uint64_t *v34;
  uint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v48;
  unsigned int v50;
  unsigned int v51;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t *v58;
  uint64_t v59;

  if (a3 >= 2)
  {
    v6 = result;
    if (a3 == 2)
    {
      v7 = *(a2 - 1);
      v8 = *result;
      v9 = *(_DWORD *)(v7 + 28);
      if ((v9 & 0x7Fu) <= 0x2F && ((1 << (v9 & 0x7F)) & 0xC00000060000) != 0)
      {
        result = (uint64_t *)sub_22EFBAEA4(*(a2 - 1));
        v9 = *((_DWORD *)result + 7);
      }
      v11 = *(_DWORD *)(v8 + 28) & 0x7F;
      if (v11 <= 0x2F && ((1 << v11) & 0xC00000060000) != 0)
      {
        result = (uint64_t *)sub_22EFBAEA4(v8);
        v11 = *((_DWORD *)result + 7) & 0x7F;
      }
      v13 = v11 - 43;
      if ((v9 & 0x7Fu) - 33 <= 9 && v13 <= 0xFFFFFFF5)
      {
        *v6 = v7;
        *(a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v36 = a4;
      v37 = a3 >> 1;
      v38 = &result[a3 >> 1];
      v39 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_22EC03AA4((uint64_t)result, v38, v39, a4);
        v40 = &v36[v37];
        result = (uint64_t *)sub_22EC03AA4((uint64_t)&v6[a3 >> 1], a2, a3 - (a3 >> 1), v40);
        v41 = v40;
        v42 = &v36[a3];
        while (v41 != v42)
        {
          v43 = v41;
          v44 = *v41;
          v45 = *v36;
          v46 = *(_DWORD *)(*v41 + 28);
          if ((v46 & 0x7Fu) <= 0x2F && ((1 << (v46 & 0x7F)) & 0xC00000060000) != 0)
          {
            result = (uint64_t *)sub_22EFBAEA4(*v41);
            v46 = *((_DWORD *)result + 7);
          }
          v48 = *(_DWORD *)(v45 + 28) & 0x7F;
          if (v48 <= 0x2F && ((1 << v48) & 0xC00000060000) != 0)
          {
            result = (uint64_t *)sub_22EFBAEA4(v45);
            v48 = *((_DWORD *)result + 7) & 0x7F;
          }
          v50 = (v46 & 0x7F) - 43;
          v51 = v48 - 33;
          v53 = v50 < 0xFFFFFFF6 || v51 < 0xA;
          if (v53)
            v54 = v45;
          else
            v54 = v44;
          v36 += v53;
          v41 = &v43[!v53];
          *v6++ = v54;
          if (v36 == v40)
          {
            if (v41 != v42)
            {
              v55 = 0;
              v56 = v51 < 0xA;
              v57 = v50 < 0xFFFFFFF6;
              if (v56 > v57)
                LOBYTE(v57) = v56;
              v58 = &v43[((_BYTE)v57 + 1) & 1];
              do
              {
                v6[v55] = v58[v55];
                ++v55;
              }
              while (&v58[v55] != v42);
            }
            return result;
          }
        }
        if (v36 != v40)
        {
          v59 = 0;
          do
          {
            v6[v59] = v36[v59];
            ++v59;
          }
          while (&v36[v59] != v40);
        }
      }
      else
      {
        sub_22EC036B0(result, v38, v39, a4, a5);
        sub_22EC036B0(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v36, a5);
        return sub_22EC03E80(v6, &v6[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v36, a5);
      }
    }
    else if (result != a2)
    {
      v16 = result + 1;
      if (result + 1 != a2)
      {
        v17 = 8;
        v18 = result;
        do
        {
          v20 = *v18;
          v19 = v18[1];
          v18 = v16;
          v21 = *(_DWORD *)(v19 + 28);
          if ((v21 & 0x7Fu) <= 0x2F && ((1 << (v21 & 0x7F)) & 0xC00000060000) != 0)
          {
            result = (uint64_t *)sub_22EFBAEA4(v19);
            v21 = *((_DWORD *)result + 7);
          }
          v23 = *(_DWORD *)(v20 + 28) & 0x7F;
          if (v23 <= 0x2F && ((1 << v23) & 0xC00000060000) != 0)
          {
            result = (uint64_t *)sub_22EFBAEA4(v20);
            v23 = *((_DWORD *)result + 7) & 0x7F;
          }
          v25 = v23 - 43;
          if ((v21 & 0x7Fu) - 33 <= 9 && v25 <= 0xFFFFFFF5)
          {
            v27 = v17;
            while (1)
            {
              *(uint64_t *)((char *)v6 + v27) = v20;
              v28 = v27 - 8;
              if (v27 == 8)
                break;
              v20 = *(uint64_t *)((char *)v6 + v27 - 16);
              v29 = *(_DWORD *)(v19 + 28);
              if ((v29 & 0x7Fu) <= 0x2F && ((1 << (v29 & 0x7F)) & 0xC00000060000) != 0)
              {
                result = (uint64_t *)sub_22EFBAEA4(v19);
                v29 = *((_DWORD *)result + 7);
              }
              v31 = *(_DWORD *)(v20 + 28) & 0x7F;
              if (v31 <= 0x2F && ((1 << v31) & 0xC00000060000) != 0)
              {
                result = (uint64_t *)sub_22EFBAEA4(v20);
                v31 = *((_DWORD *)result + 7) & 0x7F;
              }
              if ((v29 & 0x7Fu) - 33 <= 9)
              {
                v33 = v31 - 43;
                v27 = v28;
                if (v33 < 0xFFFFFFF6)
                  continue;
              }
              v34 = (uint64_t *)((char *)v6 + v28);
              goto LABEL_52;
            }
            v34 = v6;
LABEL_52:
            *v34 = v19;
          }
          v16 = v18 + 1;
          v17 += 8;
        }
        while (v18 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_22EC03AA4(uint64_t result, uint64_t *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  unsigned int v12;
  _BOOL4 v14;
  _BOOL4 v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v27;
  unsigned int v29;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v36;
  unsigned int v38;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v47;
  unsigned int v49;
  unsigned int v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;

  if (a3)
  {
    v4 = a4;
    v6 = (uint64_t *)result;
    if (a3 == 1)
    {
LABEL_20:
      *v4 = *v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = a2 - 1;
      v7 = *(a2 - 1);
      v9 = *(_QWORD *)result;
      v10 = *(_DWORD *)(v7 + 28);
      if ((v10 & 0x7Fu) <= 0x2F && ((1 << (v10 & 0x7F)) & 0xC00000060000) != 0)
      {
        result = sub_22EFBAEA4(*(a2 - 1));
        v10 = *(_DWORD *)(result + 28);
      }
      v12 = *(_DWORD *)(v9 + 28) & 0x7F;
      if (v12 <= 0x2F && ((1 << v12) & 0xC00000060000) != 0)
      {
        result = sub_22EFBAEA4(v9);
        v12 = *(_DWORD *)(result + 28) & 0x7F;
      }
      v14 = (v10 & 0x7Fu) - 33 < 0xA;
      v15 = v12 - 43 < 0xFFFFFFF6;
      v16 = !v14 || !v15;
      if (v14 && v15)
        v17 = v7;
      else
        v17 = v9;
      *v4++ = v17;
      if (v16)
        v6 = v8;
      goto LABEL_20;
    }
    if ((uint64_t)a3 > 8)
    {
      v40 = (uint64_t *)(result + 8 * (a3 >> 1));
      sub_22EC036B0(result, v40, a3 >> 1, a4, a3 >> 1);
      result = sub_22EC036B0(&v6[a3 >> 1], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v41 = &v6[a3 >> 1];
      while (v41 != a2)
      {
        v42 = v41;
        v43 = *v41;
        v44 = *v6;
        v45 = *(_DWORD *)(*v41 + 28);
        if ((v45 & 0x7Fu) <= 0x2F && ((1 << (v45 & 0x7F)) & 0xC00000060000) != 0)
        {
          result = sub_22EFBAEA4(*v41);
          v45 = *(_DWORD *)(result + 28);
        }
        v47 = *(_DWORD *)(v44 + 28) & 0x7F;
        if (v47 <= 0x2F && ((1 << v47) & 0xC00000060000) != 0)
        {
          result = sub_22EFBAEA4(v44);
          v47 = *(_DWORD *)(result + 28) & 0x7F;
        }
        v49 = (v45 & 0x7F) - 33;
        v50 = v47 - 43;
        v51 = v49 < 0xA && v47 - 43 < 0xFFFFFFF6;
        if (v49 < 0xA && v47 - 43 < 0xFFFFFFF6)
          v52 = v43;
        else
          v52 = v44;
        v41 = &v42[(v49 < 0xA) & (v47 - 43 < 0xFFFFFFF6)];
        v6 += !v51;
        *v4++ = v52;
        if (v6 == v40)
        {
          if (v41 != a2)
          {
            v53 = 0;
            v54 = v50 < 0xFFFFFFF6;
            v55 = v49 < 0xA;
            if (v54 < v55)
              v55 = v54;
            v56 = &v42[v55];
            do
            {
              v4[v53] = v56[v53];
              ++v53;
            }
            while (&v56[v53] != a2);
          }
          return result;
        }
      }
      if (v6 != v40)
      {
        v57 = 0;
        do
        {
          v4[v57] = v6[v57];
          ++v57;
        }
        while (&v6[v57] != v40);
      }
    }
    else if ((uint64_t *)result != a2)
    {
      v18 = (uint64_t *)(result + 8);
      *a4 = *(_QWORD *)result;
      if ((uint64_t *)(result + 8) != a2)
      {
        v19 = 0;
        v20 = a4;
        v21 = a4;
        do
        {
          v23 = *v21++;
          v22 = v23;
          v24 = *v18;
          v25 = *(_DWORD *)(*v18 + 28);
          if ((v25 & 0x7Fu) <= 0x2F && ((1 << (v25 & 0x7F)) & 0xC00000060000) != 0)
          {
            result = sub_22EFBAEA4(*v18);
            v25 = *(_DWORD *)(result + 28);
          }
          v27 = *(_DWORD *)(v22 + 28) & 0x7F;
          if (v27 <= 0x2F && ((1 << v27) & 0xC00000060000) != 0)
          {
            result = sub_22EFBAEA4(v22);
            v27 = *(_DWORD *)(result + 28) & 0x7F;
          }
          v29 = v27 - 43;
          if ((v25 & 0x7Fu) - 33 > 9 || v29 > 0xFFFFFFF5)
          {
            *v21 = v24;
          }
          else
          {
            v20[1] = v22;
            v31 = v4;
            if (v20 != v4)
            {
              v32 = v19;
              while (1)
              {
                result = *v18;
                v33 = *(uint64_t *)((char *)v4 + v32 - 8);
                v34 = *(_DWORD *)(*v18 + 28);
                if ((v34 & 0x7Fu) <= 0x2F && ((1 << (v34 & 0x7F)) & 0xC00000060000) != 0)
                {
                  result = sub_22EFBAEA4(result);
                  v34 = *(_DWORD *)(result + 28);
                }
                v36 = *(_DWORD *)(v33 + 28) & 0x7F;
                if (v36 <= 0x2F && ((1 << v36) & 0xC00000060000) != 0)
                {
                  result = sub_22EFBAEA4(v33);
                  v36 = *(_DWORD *)(result + 28) & 0x7F;
                }
                v38 = v36 - 43;
                if ((v34 & 0x7Fu) - 33 > 9 || v38 > 0xFFFFFFF5)
                  break;
                *(uint64_t *)((char *)v4 + v32) = v33;
                v32 -= 8;
                if (!v32)
                {
                  v31 = v4;
                  goto LABEL_61;
                }
              }
              v31 = (uint64_t *)((char *)v4 + v32);
            }
LABEL_61:
            *v31 = *v18;
          }
          ++v18;
          v19 += 8;
          v20 = v21;
        }
        while (v18 != a2);
      }
    }
  }
  return result;
}

uint64_t *sub_22EC03E80(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t *v36;
  int v37;
  int v39;
  _BOOL4 v40;
  _BOOL4 v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  BOOL v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned int v72;
  _BOOL4 v74;
  _BOOL4 v75;
  BOOL v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  unsigned int v85;
  unsigned int v87;
  _BOOL4 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v97;
  unsigned int v99;
  uint64_t v100;

  if (a5)
  {
    v9 = a5;
    v11 = result;
    while (a4 > a7 && v9 > a7)
    {
      if (!a4)
        return result;
      v12 = *a2;
      v13 = *(_DWORD *)(*a2 + 28);
      v14 = v13 & 0x7F;
      while (1)
      {
        v15 = *v11;
        LOBYTE(v16) = v13;
        if (v14 <= 0x2F)
        {
          LOBYTE(v16) = v13;
          if (((1 << v14) & 0xC00000060000) != 0)
          {
            result = (uint64_t *)sub_22EFBAEA4(v12);
            v16 = *((_DWORD *)result + 7);
          }
        }
        v17 = *(_DWORD *)(v15 + 28) & 0x7F;
        if (v17 <= 0x2F && ((1 << v17) & 0xC00000060000) != 0)
        {
          result = (uint64_t *)sub_22EFBAEA4(v15);
          v17 = *((_DWORD *)result + 7) & 0x7F;
        }
        if ((v16 & 0x7Fu) - 33 <= 9 && v17 - 43 < 0xFFFFFFF6)
          break;
        ++v11;
        if (!--a4)
          return result;
      }
      v94 = a7;
      v95 = a6;
      v93 = v9;
      if (a4 >= v9)
      {
        if (a4 == 1)
        {
          *v11 = v12;
          *a2 = v15;
          return result;
        }
        if (a4 >= 0)
          v32 = a4;
        else
          v32 = a4 + 1;
        v100 = v32 >> 1;
        v21 = &v11[v32 >> 1];
        v20 = a3;
        if (a3 != a2)
        {
          v33 = a3 - a2;
          v34 = *v21;
          v35 = *(_DWORD *)(*v21 + 28) & 0x7F;
          v20 = a2;
          do
          {
            v36 = &v20[v33 >> 1];
            v37 = *(_DWORD *)(*v36 + 28);
            if ((v37 & 0x7Fu) <= 0x2F && ((1 << (v37 & 0x7F)) & 0xC00000060000) != 0)
              v37 = *(_DWORD *)(sub_22EFBAEA4(*v36) + 28);
            v39 = v35;
            if (v35 <= 0x2F)
            {
              v39 = v35;
              if (((1 << v35) & 0xC00000060000) != 0)
                v39 = *(_DWORD *)(sub_22EFBAEA4(v34) + 28) & 0x7F;
            }
            v40 = (v37 & 0x7Fu) - 33 < 0xA;
            v41 = (v39 - 43) < 0xFFFFFFF6;
            if (v40 && v41)
              v33 += ~(v33 >> 1);
            else
              v33 >>= 1;
            if (v40 && v41)
              v20 = v36 + 1;
          }
          while (v33);
        }
        v30 = a2;
        v29 = v100;
        v31 = v20 - a2;
      }
      else
      {
        if (v9 >= 0)
          v19 = v9;
        else
          v19 = v9 + 1;
        v92 = v19 >> 1;
        v20 = &a2[v19 >> 1];
        v21 = a2;
        if (v11 != a2)
        {
          v22 = a2 - v11;
          v97 = *v20;
          v23 = *(_DWORD *)(*v20 + 28);
          v99 = v23 & 0x7F;
          v21 = v11;
          do
          {
            v24 = &v21[v22 >> 1];
            v25 = *v24;
            LOBYTE(v26) = v23;
            if (v99 <= 0x2F)
            {
              LOBYTE(v26) = v23;
              if (((1 << v99) & 0xC00000060000) != 0)
                v26 = *(_DWORD *)(sub_22EFBAEA4(v97) + 28);
            }
            v27 = *(_DWORD *)(v25 + 28) & 0x7F;
            if (v27 <= 0x2F && ((1 << v27) & 0xC00000060000) != 0)
              v27 = *(_DWORD *)(sub_22EFBAEA4(v25) + 28) & 0x7F;
            if ((v26 & 0x7Fu) - 33 < 0xA && v27 - 43 < 0xFFFFFFF6)
            {
              v22 >>= 1;
            }
            else
            {
              v21 = v24 + 1;
              v22 += ~(v22 >> 1);
            }
          }
          while (v22);
        }
        v29 = v21 - v11;
        v30 = a2;
        v31 = v92;
      }
      v42 = v20;
      a7 = v94;
      a6 = v95;
      if (v21 != v30)
      {
        v42 = v21;
        if (v30 != v20)
        {
          if (v21 + 1 == v30)
          {
            v49 = *v21;
            v50 = (char *)v20 - (char *)v30;
            memmove(v21, v30, (char *)v20 - (char *)v30);
            v42 = (uint64_t *)((char *)v21 + v50);
            *v42 = v49;
          }
          else if (v30 + 1 == v20)
          {
            v51 = *(v20 - 1);
            v42 = v21 + 1;
            if (v20 - 1 != v21)
              memmove(v21 + 1, v21, (char *)(v20 - 1) - (char *)v21);
            *v21 = v51;
          }
          else
          {
            v43 = v30 - v21;
            if (v43 == v20 - v30)
            {
              v44 = 0;
              do
              {
                v45 = v21[v44];
                v21[v44] = v30[v44];
                v46 = (uint64_t)&v21[v44 + 1];
                v30[v44] = v45;
                v47 = (uint64_t)&v30[++v44];
              }
              while ((uint64_t *)v46 != v30 && v47 != (_QWORD)v20);
              v42 = v30;
            }
            else
            {
              v52 = v20 - v30;
              v53 = v30 - v21;
              do
              {
                v54 = v53;
                v53 = v52;
                v52 = v54 % v52;
              }
              while (v52);
              if (v53)
              {
                v55 = &v21[v53];
                do
                {
                  v57 = *--v55;
                  v56 = v57;
                  v58 = &v55[v43];
                  v59 = v55;
                  do
                  {
                    v60 = v59;
                    v59 = v58;
                    *v60 = *v58;
                    v61 = __OFSUB__(v43, v20 - v58);
                    v63 = v43 - (v20 - v58);
                    v62 = (v63 < 0) ^ v61;
                    v58 = &v21[v63];
                    if (v62)
                      v58 = &v59[v43];
                  }
                  while (v58 != v55);
                  *v59 = v56;
                }
                while (v55 != v21);
              }
              v42 = &v21[v20 - v30];
            }
          }
        }
      }
      a4 -= v29;
      if (v29 + v31 >= a4 + v93 - v31)
      {
        result = (uint64_t *)sub_22EC03E80(v42, v20, a3, a4, v93 - v31, v95, v94);
        v20 = v21;
        v9 = v31;
        a4 = v29;
        a3 = v42;
      }
      else
      {
        result = (uint64_t *)sub_22EC03E80(v11, v21, v42, v29, v31, v95, v94);
        v11 = v42;
        v9 = v93 - v31;
      }
      a2 = v20;
      if (!v9)
        return result;
    }
    if (a4 <= v9)
    {
      if (v11 != a2)
      {
        v79 = 0;
        do
        {
          a6[v79] = v11[v79];
          ++v79;
        }
        while (&v11[v79] != a2);
        if (v79 * 8)
        {
          v80 = a6;
          while (a2 != a3)
          {
            v81 = *a2;
            v82 = *v80;
            v83 = *(_DWORD *)(*a2 + 28);
            if ((v83 & 0x7Fu) <= 0x2F && ((1 << (v83 & 0x7F)) & 0xC00000060000) != 0)
            {
              result = (uint64_t *)sub_22EFBAEA4(*a2);
              v83 = *((_DWORD *)result + 7);
            }
            v85 = *(_DWORD *)(v82 + 28) & 0x7F;
            if (v85 <= 0x2F && ((1 << v85) & 0xC00000060000) != 0)
            {
              result = (uint64_t *)sub_22EFBAEA4(v82);
              v85 = *((_DWORD *)result + 7) & 0x7F;
            }
            v87 = v85 - 33;
            v89 = (v83 & 0x7Fu) - 43 < 0xFFFFFFF6 || v87 < 0xA;
            if (v89)
              v90 = v82;
            else
              v90 = v81;
            v80 += v89;
            a2 += !v89;
            *v11++ = v90;
            if (&a6[v79] == v80)
              return result;
          }
          return (uint64_t *)memmove(v11, v80, (char *)a6 - (char *)v80 + v79 * 8);
        }
      }
    }
    else if (a2 != a3)
    {
      v64 = 0;
      do
      {
        a6[v64] = a2[v64];
        ++v64;
      }
      while (&a2[v64] != a3);
      if (v64 * 8)
      {
        v65 = &a6[v64];
        v66 = a3 - 1;
        while (a2 != v11)
        {
          v67 = a6;
          v68 = *(a2 - 1);
          v69 = *(v65 - 1);
          v70 = *(_DWORD *)(v69 + 28);
          if ((v70 & 0x7Fu) <= 0x2F && ((1 << (v70 & 0x7F)) & 0xC00000060000) != 0)
          {
            result = (uint64_t *)sub_22EFBAEA4(*(v65 - 1));
            v70 = *((_DWORD *)result + 7);
          }
          v72 = *(_DWORD *)(v68 + 28) & 0x7F;
          if (v72 <= 0x2F && ((1 << v72) & 0xC00000060000) != 0)
          {
            result = (uint64_t *)sub_22EFBAEA4(v68);
            v72 = *((_DWORD *)result + 7) & 0x7F;
          }
          v74 = (v70 & 0x7Fu) - 33 < 0xA;
          v75 = v72 - 43 < 0xFFFFFFF6;
          v76 = !v74 || !v75;
          if (v74 && v75)
            v77 = v68;
          else
            v77 = v69;
          v78 = a2;
          if (!v76)
            v78 = a2 - 1;
          a2 = v78;
          if (v76)
            --v65;
          *v66-- = v77;
          a6 = v67;
          if (v65 == v67)
            return result;
        }
        if (v65 != a6)
        {
          v91 = 0;
          do
          {
            v66[v91] = v65[v91 - 1];
            --v91;
          }
          while (&v65[v91] != a6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22EC045E8(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v2 = a2;
  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBCEF90(a1, *(_QWORD *)(v2 + 48));
  if ((v5 & 1) != 0)
    return 1;
  v6 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_DWORD *)*a1 + 2998) != -1
    || *(uint64_t **)(v2 + 24) != v6
    || *(_QWORD *)(v2 + 48) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2F86C(*a1, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), v6, 0, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EC04688(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v2 = a2;
  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBCEF90(a1, *(_QWORD *)(v2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EBCEF90(a1, *(_QWORD *)(v2 + 40));
  if ((v6 & 1) != 0)
    return 1;
  v7 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_DWORD *)*a1 + 2998) != -1
    || *(uint64_t **)(v2 + 24) != v7
    || *(_QWORD *)(v2 + 32) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 40) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2F86C(*a1, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EC0474C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  BOOL v10;
  int v11;
  unsigned int v12;
  unint64_t v14;

  v2 = a2;
  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBCEF90(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a1;
  v7 = *(_QWORD *)(v2 + 16);
  v8 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v9 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v10 = *(_DWORD *)(v6 + 11992) == -1 && v7 == (_QWORD)v8;
  if (!v10 || *(_QWORD *)(v2 + 24) != v9)
  {
    sub_22F0D5A50(v7);
    v11 = *(_DWORD *)(v2 + 4);
    v14 = v9;
    return sub_22EB296C0(v6, 0, v8, v12, (uint64_t *)&v14, 1, v11);
  }
  return v2;
}

uint64_t sub_22EC04804(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v2 = a2;
  v4 = sub_22EC0F7CC(a1, *(uint64_t **)(a2 + 48));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = *a1;
  if (*((_DWORD *)*a1 + 2998) != -1 || v4 != *(unint64_t **)(v2 + 48))
  {
    v19 = 0;
    v18 = 0;
    v17 = 3;
    *(_QWORD *)v16 = *((unsigned int *)v6 + 426);
    sub_22EB4DDB8((uint64_t)(v6 + 461), &v19, v16, (__int16 *)((char *)v6 + 1693), &v18, &v17);
    v7 = *((unsigned int *)v6 + 924);
    v8 = v7 - 2;
    v9 = v6[461];
    v10 = *(_DWORD *)(v9 + 576 * (v7 - 2));
    if (v10 == 5)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = *(_BYTE *)(v9 + 576 * v8 + 572);
      v11 = 1;
    }
    else if (v10 == 2)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = 1;
      v11 = *(_BYTE *)(v9 + 576 * v8 + 573) != 0;
    }
    else
    {
      v11 = 0;
      *(_BYTE *)(v9 + 576 * v7 - 4) = 0;
    }
    v12 = v9 + 576 * v7;
    *(_BYTE *)(v12 - 3) = v11;
    *(_WORD *)((char *)v6 + 1693) = 0;
    if (*((_DWORD *)v6 + 462))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v6 + 222), (llvm::SmallPtrSetImplBase *)(v12 - 560));
      sub_22EAEAE08((uint64_t)(v6 + 230), (uint64_t *)(v12 - 496));
    }
    v13 = sub_22EBCEF90(a1, *(_QWORD *)(v2 + 32));
    if ((v13 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 32) != v14)
      {
        sub_22EB48E64(v6);
        return sub_22EBC8B4C(*a1, *(_BYTE *)(v2 + 16) & 3, *(_DWORD *)(v2 + 40), v5, v14, *(_DWORD *)(v2 + 44));
      }
    }
    sub_22EB48E64(v6);
  }
  return v2;
}

uint64_t sub_22EC049CC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v6;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v6 = sub_22EC14078((uint64_t)a1, *(_QWORD *)(a2 + 8));
  return sub_22F32DD9C(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v6, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28));
}

uint64_t sub_22EC04A34(uint64_t a1, uint64_t a2)
{
  return sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
}

uint64_t sub_22EC04A3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v6;
  unint64_t v7;
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v2 = a2;
  v12[8] = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10 = v12;
  v11 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 72);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 72);
  }
  if ((sub_22EC16FD8(a1, (unsigned __int8 **)(v2 + 16), v4, 0, (uint64_t)&v10, &v9) & 1) != 0)
  {
    v2 = 1;
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1 || v9 != 0)
  {
    v6 = *(unsigned int *)(v2 + 80);
    v7 = *(unsigned int *)(v2 + 76) | (unint64_t)(v6 << 32);
    v2 = sub_22E983290((_QWORD *)*a1, v7, v7, v6, (void **)v10, v11, *(_DWORD *)(v2 + 84), 1);
  }
  if (v10 != v12)
    free(v10);
  return v2;
}

uint64_t sub_22EC04B48(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v2 = a2;
  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBCEF90(a1, *(_QWORD *)(v2 + 24));
  v6 = v5;
  if ((v5 & 1) != 0)
    return 1;
  v7 = *a1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    v8 = *(_DWORD *)v2;
    if (((*(_DWORD *)v2 >> 18) & 0x3Eu) - 22 <= 9)
      return sub_22EB4785C(*a1, 0, *(_DWORD *)(v2 + 4), (v8 >> 18) & 0x3F, v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL);
    v10 = *(_DWORD *)(v7 + 56);
    v11 = *(_QWORD *)(v7 + 1296);
    v16 = *(_QWORD *)(*(_QWORD *)(v7 + 80) + 520);
    if ((v8 & 0x1000000) != 0)
    {
      v13 = 32;
      if (*(_DWORD *)v2 == 113)
        v13 = 48;
      v12 = *(_QWORD *)(v2 + v13);
    }
    else
    {
      v12 = 0;
    }
    sub_22E51A8D0(&v17, *(_QWORD *)(v7 + 72));
    v14 = *a1;
    *(_DWORD *)(v14 + 56) = v17 & ~HIDWORD(v12) | HIDWORD(v12) & v12;
    *(_QWORD *)(v14 + 1296) = v12;
    v2 = sub_22EB4785C(*a1, 0, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 0x3F, v4 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(v7 + 56) = v10;
    *(_QWORD *)(v7 + 1296) = v11;
    v15 = *(_QWORD *)(v7 + 80);
    *(_QWORD *)(v15 + 520) = v16;
    *(_DWORD *)(v15 + 528) = v16;
  }
  return v2;
}

__n128 sub_22EC04CDC(uint64_t *a1, _DWORD *a2, __n128 a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  int v14;

  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 56);
  v7 = *(_QWORD *)(*a1 + 1296);
  a3.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
  v13 = a3;
  if ((*a2 & 0x1000000) != 0)
  {
    v9 = 8;
    if (*a2 == 113)
      v9 = 12;
    v8 = *(_QWORD *)&a2[v9];
  }
  else
  {
    v8 = 0;
  }
  sub_22E51A8D0(&v14, *(_QWORD *)(v5 + 72));
  v10 = *a1;
  *(_DWORD *)(v10 + 56) = v14 & ~HIDWORD(v8) | HIDWORD(v8) & v8;
  *(_QWORD *)(v10 + 1296) = v8;
  sub_22EC04B48(a1, (uint64_t)a2);
  *(_DWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 1296) = v7;
  v11 = *(_QWORD *)(v5 + 80);
  result = v13;
  *(_QWORD *)(v11 + 520) = v13.n128_u64[0];
  *(_DWORD *)(v11 + 528) = v13.n128_u32[0];
  return result;
}

uint64_t sub_22EC04DAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  void *v12;
  __n128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v23[10];
  void *v24;
  __int128 v25;
  _BYTE v26[16];
  char v27;
  void *v28;
  uint64_t v29;
  _BYTE v30[32];
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[6];

  v33[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  sub_22F32F84C((_QWORD *)*a1, *(_DWORD *)(v4 + 24), 0);
  v5 = sub_22F30914C(*a1);
  *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) & 0xFFFFDFFF | (((*(_DWORD *)(v4 + 48) >> 13) & 1) << 13);
  *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) & 0xFFFF7FFF | (((*(_DWORD *)(v4 + 48) >> 15) & 1) << 15);
  v31 = v33;
  v32 = 0x400000000;
  v28 = v30;
  v29 = 0x400000000;
  v6 = sub_22F3C22A4(a2);
  v7 = v6;
  v8 = 0;
  v24 = v26;
  v25 = xmmword_22F44E350;
  v27 = 0;
  v9 = *(_QWORD *)(v4 + 72);
  v10 = *(_DWORD *)(v4 + 80);
  if ((*(_BYTE *)(v6 + 23) & 4) != 0)
    v8 = sub_22E47E270(v6);
  if (sub_22EC160C0(a1, v9, v10, 0, v8, (uint64_t)&v28, (uint64_t)&v31, (uint64_t)&v24))
  {
    v20 = *a1;
  }
  else
  {
    v11 = sub_22EC14078((uint64_t)a1, *(_QWORD *)(v7 + 24));
    sub_22E4913B4(v7, (uint64_t)v23);
    if (v27)
    {
      sub_22F24FB88(&v24, v29);
      v12 = v24;
    }
    else
    {
      v12 = 0;
    }
    v23[8] = v12;
    *(_QWORD *)(v5 + 1440) = sub_22EE80544((_QWORD *)*a1, v11, (unint64_t *)v28, v29, 0, 0, (uint64_t)v23);
    if ((_DWORD)v32)
      sub_22F3ACFA8(*(_DWORD **)(v5 + 1424), v31, v32);
    if ((*(_BYTE *)(v4 + 49) & 0x80) == 0)
    {
      *(_BYTE *)(v5 + 1408) = 0;
      *(_QWORD *)(v5 + 1416) = v11;
    }
    v13 = (__n128 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 64))(*(_QWORD *)(a2 + 16));
    v19 = sub_22EC17788(a1, v13, 0, v14, v15, v16, v17, v18);
    v20 = *a1;
    if ((v19 & 1) == 0)
    {
      v21 = sub_22EB4ADC8(v20, *(_DWORD *)(*(_QWORD *)(a2 + 16) + 24), (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFFELL));
      goto LABEL_12;
    }
  }
  sub_22F32F928(v20);
  v21 = 1;
LABEL_12:
  if (v24 != v26)
    free(v24);
  if (v28 != v30)
    free(v28);
  if (v31 != v33)
    free(v31);
  return v21;
}

uint64_t sub_22EC05024(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  const void **v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (void **)(a2 + 32);
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v5 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    v6 = (const void **)(a2 + 32);
    do
    {
      v7 = *v6++;
      sub_22E3BA850(a1 + 32, v7);
      v5 -= 8;
    }
    while (v5);
  }
  v8 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v9 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    do
    {
      v10 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v4);
      v11 = *(_QWORD *)(a1 + 40);
      if (v11 == *(_QWORD *)(a1 + 32))
        v12 = 52;
      else
        v12 = 48;
      if (v10 != (void **)(v11 + 8 * *(unsigned int *)(a1 + v12)))
      {
        *v10 = (void *)-2;
        ++*(_DWORD *)(a1 + 56);
      }
      ++v4;
      v9 -= 8;
    }
    while (v9);
  }
  return v8;
}

uint64_t sub_22EC0510C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v4 = **(_QWORD **)(a2 + 16);
  if (v4)
  {
    v5 = *a1;
    sub_22F0D5A50(*(_QWORD *)(a2 + 24));
    sub_22EB4E494(v5, v6, v4, 1);
  }
  return sub_22EBCEF90(a1, *(_QWORD *)(a2 + 24));
}

uint64_t sub_22EC05168(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v4;
  unsigned __int8 *v5;
  int v6;
  BOOL v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  unsigned __int8 **v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 **v17;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  unsigned __int8 **v35;
  uint64_t **v36;
  unsigned __int8 **v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  int v55;
  int v56;
  void *v57[2];
  _BYTE v58[64];
  void *v59;
  uint64_t v60;
  _QWORD v61[10];

  v2 = (uint64_t)a2;
  v61[8] = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a2 + 8);
  if (v4)
  {
    if (v4 == 1)
      goto LABEL_9;
    v5 = a2 + 40;
    v6 = *a2;
    v7 = v6 == 119;
    if (v6 == 119)
      v8 = a2;
    else
      v8 = 0;
    v9 = v8 + 48;
    if (v7)
      v5 = v9;
    if (sub_22EFFF908(*((unsigned __int8 **)v5 + 1)))
    {
LABEL_9:
      v10 = *(unsigned __int8 *)v2;
      v11 = v10 == 119;
      if (v10 == 119)
        v12 = v2;
      else
        v12 = 0;
      v13 = (unsigned __int8 **)(v12 + 48);
      if (!v11)
        v13 = (unsigned __int8 **)(v2 + 40);
      if (!sub_22EFFF908(*v13) && (*(_DWORD *)v2 & 0x100000) == 0)
      {
        v14 = *(_DWORD *)v2;
        v15 = v14 == 119;
        if (v14 == 119)
          v16 = v2;
        else
          v16 = 0;
        v17 = (unsigned __int8 **)(v16 + 48);
        if (!v15)
          v17 = (unsigned __int8 **)(v2 + 40);
        return sub_22EC1726C((uint64_t *)a1, *v17, 0);
      }
    }
  }
  v19 = sub_22EC14078(a1, *(_QWORD *)(v2 + 8));
  if (v19 < 0x10)
    return 1;
  v20 = v19;
  v21 = *(void **)(v2 + 16);
  v57[0] = v21;
  v59 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), v57, &v59)
    && v59 != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v21 = (void *)*((_QWORD *)v59 + 1);
  }
  if (!v21)
    return 1;
  v53 = 0;
  v57[0] = v58;
  v57[1] = (void *)0x800000000;
  v22 = *(_QWORD *)a1;
  v23 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x100000) == 0
    || ((v25 = *(_DWORD *)(*(_QWORD *)(v22 + 3688) + 576 * *(unsigned int *)(v22 + 3696) - 576), v25 <= 3)
      ? (v26 = v25 == 2)
      : (v26 = 1),
        v26))
  {
    v24 = 1;
  }
  else
  {
    v24 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v22 + 72) + 1) & 2) != 0)
    {
      v59 = 0;
      v55 = 3;
      v56 = 1;
      v54 = *(unsigned int *)(v22 + 1704);
      sub_22EB4DDB8(v22 + 3688, &v56, (int *)&v54, (__int16 *)(v22 + 1693), (uint64_t *)&v59, &v55);
      v27 = *(unsigned int *)(v22 + 3696);
      v28 = v27 - 2;
      v29 = *(_QWORD *)(v22 + 3688);
      v30 = *(_DWORD *)(v29 + 576 * (v27 - 2));
      if (v30 == 5)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = *(_BYTE *)(v29 + 576 * v28 + 572);
        v31 = 1;
      }
      else if (v30 == 2)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = 1;
        v31 = *(_BYTE *)(v29 + 576 * v28 + 573) != 0;
      }
      else
      {
        v31 = 0;
        *(_BYTE *)(v29 + 576 * v27 - 4) = 0;
      }
      v32 = v29 + 576 * v27;
      *(_BYTE *)(v32 - 3) = v31;
      *(_WORD *)(v22 + 1693) = 0;
      if (*(_DWORD *)(v22 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v22 + 1776), (llvm::SmallPtrSetImplBase *)(v32 - 560));
        sub_22EAEAE08(v22 + 1840, (uint64_t *)(v32 - 496));
      }
      v24 = 0;
      v23 = *(unsigned __int8 *)v2;
    }
  }
  v33 = v23 == 119;
  if (v23 == 119)
    v34 = v2;
  else
    v34 = 0;
  v35 = (unsigned __int8 **)(v34 + 48);
  v36 = (uint64_t **)(v2 + 40);
  if (v33)
    v37 = v35;
  else
    v37 = (unsigned __int8 **)(v2 + 40);
  if (sub_22EC16FD8((uint64_t *)a1, v37, *(_DWORD *)(v2 + 32), 1, (uint64_t)v57, &v53))
  {
    if ((v24 & 1) == 0)
      sub_22EB48E64(v22);
    v2 = 1;
    goto LABEL_67;
  }
  if ((v24 & 1) == 0)
    sub_22EB48E64(v22);
  v38 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v20 != *(_QWORD *)(v2 + 8) || v21 != *(void **)(v2 + 16) || v53)
  {
    if (*(_BYTE *)v2 != 119)
    {
      v40 = *(_DWORD *)(v2 + 4);
      goto LABEL_62;
    }
    v52 = *(_QWORD *)a1;
    v44 = **v36;
    v45 = v44;
    while (1)
    {
      if ((v45 & 0xF) != 0)
        goto LABEL_81;
      v46 = *(unsigned __int8 *)(*(_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v46 > 0x39)
      {
LABEL_76:
        if (sub_22F115668(v45))
          v44 = v45;
        v45 = sub_22F115B7C(v45);
        if (!v45)
          goto LABEL_97;
      }
      else
      {
        if (v46 == 24)
          goto LABEL_96;
        if (v46 == 26)
        {
          if ((*(_BYTE *)(v45 + 23) & 0x10) != 0)
          {
LABEL_96:
            v44 = v45;
LABEL_97:
            v40 = sub_22F115668(v44);
            v38 = v52;
LABEL_62:
            v41 = v40;
            v42 = *(_DWORD *)v2;
            v43 = *(_QWORD *)(v2 + 24);
            v59 = v61;
            v60 = 0x800000000;
            if ((sub_22EACCC94(v38) & 1) != 0)
              v2 = 1;
            else
              v2 = sub_22EACC4D8(*(_QWORD *)a1, v41, v20, (uint64_t)v21, (v42 >> 18) & 1, (uint64_t *)v59, v60, (v42 & 0x80000) != 0, (v42 & 0x100000) != 0, (v42 & 0x200000) != 0, (v42 & 0x400000) != 0, v51, (v42 >> 23) & 7, v43);
            if (v59 != v61)
              free(v59);
            goto LABEL_67;
          }
        }
        else if (((1 << v46) & 0x20000000200003CLL) == 0)
        {
          goto LABEL_76;
        }
LABEL_81:
        v45 = sub_22F115B7C(v45);
      }
    }
  }
  if (*(_BYTE *)v2 != 119)
  {
    v39 = *(_DWORD *)(v2 + 4);
    goto LABEL_59;
  }
  v47 = *(_QWORD *)a1;
  v48 = **v36;
  for (i = v48; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_95;
      v50 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v50 <= 0x39)
        break;
LABEL_90:
      if (sub_22F115668(i))
        v48 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_99;
    }
    if (v50 == 24)
      goto LABEL_98;
    if (v50 == 26)
      break;
    if (((1 << v50) & 0x20000000200003CLL) == 0)
      goto LABEL_90;
LABEL_95:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_95;
LABEL_98:
  v48 = i;
LABEL_99:
  v39 = sub_22F115668(v48);
  v38 = v47;
LABEL_59:
  sub_22EB4E494(v38, v39, v21, 1);
LABEL_67:
  if (v57[0] != v58)
    free(v57[0]);
  return v2;
}

uint64_t sub_22EC0576C(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 **v4;
  unint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  unsigned __int8 *v21;
  unsigned __int8 **v22;
  unsigned __int8 **v23;
  char v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v29[2];
  char v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34[2];
  _QWORD v35[9];

  v35[8] = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned __int8 **)(a2 + 40);
  v5 = sub_22EC21020((uint64_t *)a1, *((uint64_t **)a2 + 5));
  if (!v5)
    return 1;
  v6 = (uint64_t *)v5;
  v7 = *((_QWORD *)a2 + 2);
  v29[0] = v7;
  v34[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), v29, v34)
    && v34[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v7 = *((_QWORD *)v34[0] + 1);
  }
  if (!v7)
    return 1;
  v30 = 0;
  v34[0] = v35;
  v34[1] = (void *)0x800000000;
  if (*((_DWORD *)a2 + 8) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  v8 = *(_QWORD *)a1;
  v9 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 0x100000) == 0
    || ((v12 = *(_DWORD *)(*(_QWORD *)(v8 + 3688) + 576 * *(unsigned int *)(v8 + 3696) - 576), v12 <= 3)
      ? (v13 = v12 == 2)
      : (v13 = 1),
        v13))
  {
    v10 = 1;
  }
  else
  {
    v10 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v8 + 72) + 1) & 2) != 0)
    {
      v29[0] = 0;
      v32 = 3;
      v33 = 1;
      v31 = *(unsigned int *)(v8 + 1704);
      sub_22EB4DDB8(v8 + 3688, &v33, (int *)&v31, (__int16 *)(v8 + 1693), v29, &v32);
      v14 = *(unsigned int *)(v8 + 3696);
      v15 = v14 - 2;
      v16 = *(_QWORD *)(v8 + 3688);
      v17 = *(_DWORD *)(v16 + 576 * (v14 - 2));
      if (v17 == 5)
      {
        *(_BYTE *)(v16 + 576 * v14 - 4) = *(_BYTE *)(v16 + 576 * v15 + 572);
        v18 = 1;
      }
      else if (v17 == 2)
      {
        *(_BYTE *)(v16 + 576 * v14 - 4) = 1;
        v18 = *(_BYTE *)(v16 + 576 * v15 + 573) != 0;
      }
      else
      {
        v18 = 0;
        *(_BYTE *)(v16 + 576 * v14 - 4) = 0;
      }
      v19 = v16 + 576 * v14;
      *(_BYTE *)(v19 - 3) = v18;
      *(_WORD *)(v8 + 1693) = 0;
      if (*(_DWORD *)(v8 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v8 + 1776), (llvm::SmallPtrSetImplBase *)(v19 - 560));
        sub_22EAEAE08(v8 + 1840, (uint64_t *)(v19 - 496));
      }
      v10 = 0;
      v9 = *a2;
    }
  }
  v20 = v9 == 119;
  if (v9 == 119)
    v21 = a2;
  else
    v21 = 0;
  v22 = (unsigned __int8 **)(v21 + 48);
  if (v20)
    v23 = v22;
  else
    v23 = v4;
  v24 = sub_22EC16FD8((uint64_t *)a1, v23, *((_DWORD *)a2 + 8), 1, (uint64_t)v34, &v30);
  if ((v10 & 1) == 0)
    sub_22EB48E64(v8);
  if ((v24 & 1) != 0)
  {
    v11 = 1;
  }
  else
  {
    v25 = *(_QWORD *)a1;
    if (*(_DWORD *)(*(_QWORD *)a1 + 11992) == -1 && v6 == (uint64_t *)*v4 && v7 == *((_QWORD *)a2 + 2) && !v30)
    {
      v26 = sub_22F060A34((uint64_t)a2);
      sub_22EB4E494(v25, v26, v7, 1);
      v27 = sub_22EBCC6C0(*(_QWORD *)a1, (uint64_t)a2);
    }
    else
    {
      v29[0] = *v6;
      v29[1] = (uint64_t)(v6 + 1);
      sub_22F1167E8(v29);
      sub_22F3C57CC(a2);
      v27 = sub_22EBBC368();
    }
    v11 = v27;
  }
  if (v34[0] != v35)
    free(v34[0]);
  return v11;
}

uint64_t sub_22EC05AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a2;
  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 16);
  if (v5)
  {
    v16 = *(_QWORD *)(v2 + 16);
    v17 = 0;
    if (sub_22E793870((uint64_t *)(a1 + 8), &v16, &v17))
    {
      if (v17 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
      {
        v5 = *(_QWORD *)(v17 + 8);
        if (!v5)
          return 1;
      }
    }
  }
  v6 = *(_QWORD *)a1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v7 || v5 != *(_QWORD *)(v2 + 16))
    return sub_22EBC2B50(v6, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 1, (*(_DWORD *)v2 >> 19) & 1, v7);
  if (v5)
  {
    sub_22EB4E494(v6, *(unsigned int *)(v2 + 4), v5, 1);
    v7 = *(_QWORD *)(v2 + 24);
  }
  if ((*(_BYTE *)(v7 + 1) & 0x80) == 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)a1 + 88);
    v10 = sub_22F0602E8(v2);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(v9, v10) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v11)
    {
      if (*(_BYTE *)(v11 + 16) == 45)
      {
        v12 = sub_22F114198(*(_QWORD *)(v11 + 24));
        v13 = *(_QWORD *)a1;
        v14 = *(unsigned int *)(v2 + 4);
        v15 = sub_22EC6602C(v13, v12);
        sub_22EB4E494(v13, v14, v15 & 0xFFFFFFFFFFFFFFF8, 1);
      }
    }
  }
  return v2;
}

uint64_t sub_22EC05C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  __n128 v30;
  void *v31[2];
  _DWORD v32[66];
  uint64_t v33;

  v2 = a2;
  v33 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 && (sub_22EFFFB48(*(unsigned __int8 **)(a2 + 16)) & 1) == 0)
  {
    v13 = sub_22EBCEF90(a1, v4);
    if ((v13 & 1) != 0)
      return 1;
    v31[0] = 0;
    v14 = (*(_DWORD *)v2 & 0x40000) != 0 ? 36 : 25;
    v15 = sub_22EBCD1E4(*(unsigned int **)a1, 0, v13 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(v2 + 4), v14, (unint64_t *)v31, &v30);
    v7 = v15;
    if ((v15 & 1) != 0)
      return 1;
    v8 = v31[0];
    v5 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22EC14078(a1, *(_QWORD *)(v2 + 24));
    v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
    if (!v6 || *(_BYTE *)(v6 + 16) != 39)
      v6 = sub_22F10CF48(v6);
    v7 = 0;
    v4 = 0;
    v8 = *(void **)(v6 + 32);
  }
  v9 = *(unsigned int *)v2;
  if ((v9 & 0x100000) != 0)
  {
    v11 = (_DWORD *)(v2 + 72);
    if ((v9 & 0x80000) != 0 && *v11)
      v12 = *(unsigned int *)(v2 + 84);
    else
      v12 = 0;
    v10 = *(_QWORD *)&v11[8 * v12 + 4 * ((v9 >> 19) & 1)];
  }
  else
  {
    v10 = 0;
  }
  v30.n128_u64[0] = v10;
  v31[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v30, v31)
    && v31[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v10 = *((_QWORD *)v31[0] + 1);
  }
  v16 = *(_QWORD *)(v2 + 32);
  if (v16)
  {
    v17 = sub_22EC140CC((uint64_t *)a1, v16, *(void **)(v2 + 40), (unint64_t)v8, v10);
    if (!v17)
      return 1;
    v19 = v17;
    v20 = v18;
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  if ((*(_BYTE *)(v2 + 2) & 8) != 0)
    v21 = *(_DWORD *)(v2 + 80);
  else
    v21 = 0;
  sub_22EC1C534(&v30, (uint64_t *)a1, (__n128 *)(v2 + 48));
  if (!v30.n128_u64[0])
    return 1;
  v22 = *(unsigned int *)v2;
  if ((v22 & 0x80000) != 0 && (v23 = *(_DWORD *)(v2 + 72)) != 0)
  {
    v24 = *(_DWORD *)(v2 + 76);
    v31[0] = v32;
    v31[1] = (void *)0x800000000;
    v32[64] = v23;
    v32[65] = v24;
    v25 = v2 + 72 + 16 * ((v22 >> 19) & 1);
    if ((sub_22EC21310(a1, v25, v25 + 32 * *(unsigned int *)(v2 + 84)) & 1) != 0)
      v2 = 1;
    else
      v2 = sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (*(_DWORD *)v2 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)&v30, (uint64_t)v31);
    if (v31[0] != v32)
      free(v31[0]);
  }
  else
  {
    if (v4 != (v7 & 0xFFFFFFFFFFFFFFFELL)
      || *(_DWORD *)(*(_QWORD *)a1 + 11992) != -1
      || v5 != *(_QWORD *)(v2 + 24)
      || v19 != *(_QWORD *)(v2 + 32)
      || v20 != *(_QWORD *)(v2 + 40)
      || v30.n128_u64[0] != *(_QWORD *)(v2 + 48))
    {
      return sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (v22 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)&v30, 0);
    }
    if ((v22 & 0x100000) != 0)
    {
      v27 = (_DWORD *)(v2 + 72);
      if ((v22 & 0x80000) != 0 && *v27)
        v28 = *(unsigned int *)(v2 + 84);
      else
        v28 = 0;
      v26 = *(_QWORD *)&v27[8 * v28 + 4 * ((v22 >> 19) & 1)];
    }
    else
    {
      v26 = 0;
    }
    if (v10 != v26)
      return sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (v22 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)&v30, 0);
  }
  return v2;
}

uint64_t sub_22EC05F90(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  void *v37[2];
  _QWORD v38[5];

  v2 = a2;
  v38[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    v5 = sub_22EBCEF90(a1, v4);
    if ((v5 & 1) != 0)
      return 1;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v2 + 40);
  if (!v7 || (*(_BYTE *)(v7 + 1) & 0x20) == 0)
    v7 = *(_QWORD *)(v2 + 48);
  v37[0] = v38;
  v37[1] = (void *)0x200000000;
  v8 = *a1;
  v35 = 7;
  v36 = v7;
  sub_22EE7377C(v8, (uint64_t)&v35, (uint64_t)v37);
  v9 = *(_DWORD *)(v2 + 28);
  v10 = v9 != 0;
  v11 = v9 != 0;
  v12 = v9 - 1;
  if (v11)
    v13 = v12;
  else
    v13 = 0;
  v14 = *a1;
  v15 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  v16 = *(_QWORD *)(v2 + 40);
  if (v16)
  {
    v17 = sub_22EBCEF90(a1, v16);
    if ((v17 & 1) != 0)
      goto LABEL_18;
  }
  else
  {
    v17 = 0;
  }
  v18 = *(_QWORD *)(v2 + 48);
  if (!v18)
  {
    v19 = 0;
    goto LABEL_20;
  }
  v19 = sub_22EBCEF90(a1, v18);
  if ((v19 & 1) == 0)
  {
LABEL_20:
    v20 = *a1;
    if (*(_DWORD *)(v20 + 11992) != -1
      || *(_QWORD *)(v2 + 40) != (v17 & 0xFFFFFFFFFFFFFFFELL)
      || *(_QWORD *)(v2 + 48) != (v19 & 0xFFFFFFFFFFFFFFFELL))
    {
      v22 = *(_DWORD *)(v2 + 16);
      if (!v22)
      {
        v23 = *(_QWORD *)(v2 + 40);
        if (v23 && (*(_BYTE *)(v23 + 1) & 0x20) != 0)
        {
          sub_22F0D5A50(v23);
          v22 = v24;
        }
        else
        {
          v22 = *(_DWORD *)(v2 + 20);
        }
      }
      v25 = v13 | (v10 << 32);
      v26 = v17 & 0xFFFFFFFFFFFFFFFELL;
      v27 = *(_DWORD *)(v2 + 56);
      v28 = v19 & 0xFFFFFFFFFFFFFFFELL;
      v30 = *(_DWORD *)(v2 + 20);
      v29 = *(_DWORD *)(v2 + 24);
      if (!v29)
      {
        v31 = *(_QWORD *)(v2 + 40);
        if (!v31 || (v29 = *(_DWORD *)(v2 + 20), (*(_BYTE *)(v31 + 1) & 0x20) == 0))
        {
          v32 = *(_QWORD *)(v2 + 48);
          v34 = v22;
          v33 = v26;
          sub_22F0D60E4(v32);
          v26 = v33;
          v22 = v34;
        }
      }
      v2 = sub_22F34AF2C(v20, v6, v22, v26, v27, v30, v28, v29, v25);
    }
    goto LABEL_23;
  }
LABEL_18:
  v2 = 1;
LABEL_23:
  *(_DWORD *)(v14 + 11992) = v15;
  if (v37[0] != v38)
    free(v37[0]);
  return v2;
}

uint64_t sub_22EC061BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a2;
  v4 = sub_22EC14078(a1, *(_QWORD *)(a2 + 8));
  if (v4 < 0x10)
    return 1;
  v5 = v4;
  v6 = *(_QWORD *)(v2 + 16);
  v13 = v6;
  v14 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v13, &v14)
    && v14 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v6 = *(_QWORD *)(v14 + 8);
  }
  if (!v6)
    return 1;
  v7 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) == -1 && v5 == *(_QWORD *)(v2 + 8) && v6 == *(_QWORD *)(v2 + 16))
  {
    sub_22EB4E494(v7, *(unsigned int *)(v2 + 24), v6, 1);
  }
  else
  {
    v9 = *(_DWORD *)(v2 + 24);
    v10 = *(unsigned __int8 *)(v2 + 28);
    v11 = v10 & 1;
    v12 = (v10 >> 1) & 1;
    v2 = sub_22E3CD3D4(*(_QWORD *)(v7 + 88) + 2032, 32, 3);
    sub_22F2F3990(v2, v9, v5, v6, v11, v12);
  }
  return v2;
}

uint64_t sub_22EC062CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unsigned int v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _QWORD v50[10];

  v2 = a2;
  v50[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EC21020(a1, *(uint64_t **)(a2 + 32));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = *(_DWORD *)v2;
  v7 = (*(_DWORD *)v2 & 0x80000) == 0;
  if ((*(_DWORD *)v2 & 0x80000) == 0)
  {
    v8 = 0;
    v9 = 0;
    v10 = *(_DWORD *)v2;
    goto LABEL_10;
  }
  v11 = *(_QWORD *)(v2 + 56);
  if (!v11)
  {
    v12 = 0;
    v10 = *(_DWORD *)v2;
    goto LABEL_9;
  }
  v12 = sub_22EBCEF90(a1, v11);
  if ((v12 & 1) != 0)
    return 1;
  v10 = *(_DWORD *)v2;
LABEL_9:
  v8 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v9 = 1;
LABEL_10:
  v45 = 0;
  v48 = v50;
  v49 = 0x800000000;
  v13 = (_QWORD *)(v2 + 56);
  if ((v10 & 0x1800000) != 0)
    v14 = ((v10 >> 19) & 1) + 1;
  else
    v14 = (v10 >> 19) & 1;
  if ((sub_22EC16FD8(a1, (unsigned __int8 **)&v13[v14], *(_DWORD *)(v2 + 4), 1, (uint64_t)&v48, &v45) & 1) != 0)
    goto LABEL_14;
  v15 = *(unsigned int *)v2;
  if ((v15 & 0x1800000) != 0)
  {
    v16 = (v15 >> 19) & 1;
    v17 = v13[v16];
    if (v17)
    {
      v18 = sub_22EC1726C(a1, (unsigned __int8 *)v13[v16], 1);
      if ((v18 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      v18 = 0;
    }
  }
  else
  {
    v18 = 0;
    v17 = 0;
  }
  v43 = v18;
  v44 = v8;
  v19 = *(_QWORD *)(v2 + 16);
  if (!v19
    || (v46 = *(_QWORD *)(v2 + 16), v47 = 0, !sub_22E793870(a1 + 1, &v46, &v47))
    || v47 == a1[1] + 16 * *((unsigned int *)a1 + 6)
    || (v19 = *(_QWORD *)(v47 + 8)) != 0)
  {
    v42 = v9;
    v20 = *(_QWORD *)(v2 + 24);
    if (!v20
      || (v46 = *(_QWORD *)(v2 + 24), v47 = 0, !sub_22E793870(a1 + 1, &v46, &v47))
      || v47 == a1[1] + 16 * *((unsigned int *)a1 + 6)
      || (v20 = *(_QWORD *)(v47 + 8)) != 0)
    {
      v21 = *a1;
      if (*(_DWORD *)(*a1 + 11992) == -1 && v5 == *(unint64_t **)(v2 + 32))
      {
        if ((*(_BYTE *)(v2 + 2) & 8) != 0 && *v13)
        {
          if ((v6 & 0x80000) == 0)
          {
            v22 = *v5;
            goto LABEL_32;
          }
          v7 = v44 == *v13;
        }
        if (v17 == (v43 & 0xFFFFFFFFFFFFFFFELL)
          && v7
          && v19 == *(_QWORD *)(v2 + 16)
          && v20 == *(_QWORD *)(v2 + 24)
          && !v45)
        {
          if (v19)
            sub_22EB4E494(v21, *(unsigned int *)(v2 + 40), v19, 1);
          if (v20)
            sub_22EB4E494(*a1, *(unsigned int *)(v2 + 40), v20, 1);
          if ((*(_BYTE *)(v2 + 2) & 8) != 0)
          {
            v36 = *(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0);
            if (!v36 || *(_BYTE *)(v36 + 16) != 39)
              v36 = sub_22F10CF48(v36);
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v36 + 32) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
            {
              v37 = *(_QWORD *)(*a1 + 88);
              v38 = *(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0);
              if (!v38 || *(_BYTE *)(v38 + 16) != 39)
                v38 = sub_22F10CF48(v38);
              v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(v37, *(_QWORD *)(v38 + 32)) & 0xFFFFFFFFFFFFFFF0)
                                          + 8) & 0xFFFFFFFFFFFFFFF0);
              if (v39)
              {
                if (*(_BYTE *)(v39 + 16) == 45)
                {
                  v40 = sub_22F114198(*(_QWORD *)(v39 + 24));
                  v41 = sub_22EC6602C(*a1, v40) & 0xFFFFFFFFFFFFFFF8;
                  if (v41)
                    sub_22EB4E494(*a1, *(unsigned int *)(v2 + 40), v41, 1);
                }
              }
            }
          }
          goto LABEL_49;
        }
      }
      v22 = *v5;
      if ((v6 & 0x80000) != 0)
      {
        v24 = v42;
        goto LABEL_43;
      }
LABEL_32:
      v23 = sub_22EF5C728(*(_QWORD *)(v21 + 88), v22);
      v24 = v42;
      if (v23)
      {
        v25 = v23;
        v26 = *(unsigned __int8 *)(v23 + 16);
        if (v26 == 3)
        {
          v31 = *(_QWORD *)(v23 + 48);
          if (v31)
            goto LABEL_42;
        }
        else if (v26 == 2)
        {
          v27 = *(_QWORD *)(*a1 + 88);
          v28 = sub_22EF67C8C(v27);
          v29 = *(_DWORD *)(v2 + 40);
          v30 = sub_22E3CD3D4(v27 + 2032, 32, 3);
          v31 = sub_22EFF8F1C(v30, v27, v25 + 40, v28, v29);
LABEL_42:
          v22 = *(_QWORD *)(v25 + 32);
          v24 = 1;
          v44 = v31;
        }
      }
LABEL_43:
      v32 = *(_DWORD *)v2;
      if ((*(_DWORD *)v2 & 0x2000000) != 0)
      {
        v34 = (v32 >> 19) & 1;
        if ((v32 & 0x1800000) != 0)
          ++v34;
        v33 = v13[v34 + *(_DWORD *)(v2 + 4)];
      }
      else
      {
        v33 = 0;
      }
      v2 = sub_22EBBD504(*a1, *(unsigned int *)(v2 + 40) | ((unint64_t)*(unsigned int *)(v2 + 40) << 32), (v32 >> 18) & 1, *(unsigned int *)(v2 + 40), (uint64_t)v48, v49, *(unsigned int *)(v2 + 40), v33, v22, v5, v44, v24, *(_QWORD *)(v2 + 48), (unsigned __int8 *)(v43 & 0xFFFFFFFFFFFFFFFELL));
      goto LABEL_49;
    }
  }
LABEL_14:
  v2 = 1;
LABEL_49:
  if (v48 != v50)
    free(v48);
  return v2;
}

uint64_t sub_22EC06758(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v14[3];
  int v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v17 = 0;
  v16 = 0;
  v15 = 3;
  *(_QWORD *)v14 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v17, v14, (__int16 *)(v4 + 1693), &v16, &v15);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v11 & 1) != 0)
  {
    a2 = 1;
  }
  else
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 16) != v12)
      a2 = sub_22F3321E4(*a1, *(_QWORD *)(a2 + 24), v12, HIDWORD(*(_QWORD *)(a2 + 24)));
  }
  sub_22EB48E64(v4);
  return a2;
}

uint64_t sub_22EC068CC(unsigned int **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned __int16 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  __int128 v52;
  void *v53[2];
  char v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  __int128 v58;
  void *v59[2];
  uint64_t v60;
  unsigned int v61;
  _QWORD *v62;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v55 = 0;
  v5 = (*(_BYTE *)(a2 + 24) & 1) != 0 ? 36 : 25;
  v6 = sub_22EBCD1E4(*a1, 0, v4 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(a2 + 28), v5, &v55, &v54);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v55;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(void **)(a2 + 40);
  if (!v8)
  {
    v12 = 0;
    goto LABEL_12;
  }
  v10 = sub_22EC140CC((uint64_t *)a1, v8, v9, v55, 0);
  if (!v10)
    return 1;
  v12 = v10;
  v9 = v11;
LABEL_12:
  v52 = 0u;
  *(_OWORD *)v53 = 0u;
  sub_22E8ACE30((uint64_t)&v52, v12, (uint64_t)v9);
  v16 = *(_QWORD *)(a2 + 64);
  v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if ((v16 & 1) != 0 || !v17)
  {
    if (v7 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
    {
      v22 = *(_DWORD *)(a2 + 72);
      if ((v16 & 1) != 0)
        v17 = v16 | 1;
      else
        v17 = 1;
    }
    else
    {
      v19 = sub_22EBB87FC(*a1, v15, (_QWORD *)((v16 << 63 >> 63) & v17), *(_DWORD *)(a2 + 72), 0, (uint64_t)&v52, v7, 0);
      if (!v19)
        goto LABEL_80;
      v20 = v19;
      if (v19 >= 0x10)
      {
        v23 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
        if (v23 && *(_BYTE *)(v23 + 16) == 57)
          v20 = *(_QWORD *)(v23 + 8);
      }
      else
      {
        v20 = 0;
      }
      v24 = sub_22EF579A8(*((_QWORD *)*a1 + 11), v20, *(_DWORD *)(a2 + 72));
      v17 = (unint64_t)v24 & 0xFFFFFFFFFFFFFFFELL;
      v22 = sub_22F115668(*v24);
    }
  }
  else
  {
    if (*(_QWORD *)v17 >= 0x10uLL)
    {
      v21 = sub_22EC14FB0((uint64_t *)a1, *(_QWORD *)v17, (unsigned int *)(v17 + 8), v7, (uint64_t)&v52);
      if (!v21)
        goto LABEL_80;
      v17 = (unint64_t)v21 & 0xFFFFFFFFFFFFFFFELL;
      v18 = *v21;
    }
    else
    {
      v18 = *(_QWORD *)v17;
    }
    v22 = sub_22F115668(v18);
  }
  v25 = *(_QWORD **)(a2 + 48);
  if (!v25)
    goto LABEL_36;
  v58 = 0u;
  *(_OWORD *)v59 = 0u;
  if (*v25 <= 0xFuLL)
    goto LABEL_36;
  v25 = sub_22EC14FB0((uint64_t *)a1, *v25, (unsigned int *)v25 + 2, v7, (uint64_t)&v58);
  if (HIDWORD(v59[1]))
    free(v59[0]);
  if (v25)
  {
LABEL_36:
    v26 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v27 = *(unsigned int *)(a2 + 28);
    v28 = *(_BYTE *)(a2 + 24);
    v29 = *(_DWORD *)(a2 + 56);
    v30 = *(_DWORD *)(a2 + 60);
    if ((*(_BYTE *)(v26 + 1) & 0x80) != 0
      || (v31 = *(_QWORD *)(v26 + 8), (v17 & 1) != 0) && (v17 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
LABEL_39:
      if ((v28 & 1) != 0)
        v32 = 36;
      else
        v32 = 25;
      v33 = sub_22EBCD92C((uint64_t)*a1, v26, v27, v32, (uint64_t)&v52, v25, v29, v30, v17, v22);
      goto LABEL_43;
    }
    v34 = v31 & 0xFFFFFFFFFFFFFFF0;
    v35 = *(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      if (!v35 || *(_BYTE *)(v35 + 16) != 39)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
          || (v49 = *(_QWORD *)(v26 + 8),
              v50 = *(unsigned int *)(a2 + 28),
              v38 = sub_22F10CF48(v35),
              v31 = v49,
              v27 = v50,
              !v38))
        {
LABEL_56:
          v51 = v27;
          v39 = v31;
          if ((v17 & 1) != 0)
            v40 = 0;
          else
            v40 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFFELL);
          v60 = sub_22EFC6B40((_QWORD *)(*((_QWORD *)*a1 + 11) + 15224), *v40 & 7 | *(_QWORD *)((*v40 & 0xFFFFFFFFFFFFFFF0) + 8));
          v61 = v22;
          sub_22EFC6D6C((uint64_t)&v62, v60);
          v62 = v40;
          if (!v25)
            goto LABEL_65;
          v41 = *v25;
          v42 = *(_QWORD *)(*v25 & 0xFFFFFFFFFFFFFFF0);
          if (v42 && (*(_DWORD *)(v42 + 16) & 0xFE) == 0x2C
            || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C
            && (v43 = sub_22F10CF48(v42), v41 = *v25, v43))
          {
            sub_22E8ACD1C((uint64_t)&v52, *((_QWORD *)*a1 + 11), 0, v41, (uint64_t)(v25 + 1), v29);
LABEL_65:
            v33 = sub_22EC225CC(*a1, v26, v39, v51, v28 & 1, (uint64_t)&v52, 0, 0, (uint64_t)&v60, 0, 0, 0);
LABEL_43:
            v13 = v33;
            goto LABEL_81;
          }
          v44 = *a1;
          v45 = v41;
          while (1)
          {
            if ((v45 & 0xF) != 0)
              goto LABEL_77;
            v46 = *(unsigned __int8 *)(*(_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF0) + 16);
            if (v46 > 0x39)
            {
LABEL_72:
              if (sub_22F115668(v45))
                v41 = v45;
              v45 = sub_22F115B7C(v45);
              if (!v45)
                goto LABEL_79;
            }
            else
            {
              if (v46 == 24)
                goto LABEL_78;
              if (v46 == 26)
              {
                if ((*(_BYTE *)(v45 + 23) & 0x10) != 0)
                {
LABEL_78:
                  v41 = v45;
LABEL_79:
                  v47 = sub_22F115668(v41);
                  sub_22E8FCA40(v44, v47, 0xCEFu, 0, (uint64_t)&v58);
                  v57 = *v25;
                  v48 = sub_22E8901B8((uint64_t)&v58, &v57);
                  v56 = (**((_DWORD **)*a1 + 9) >> 8) & 1;
                  sub_22E89519C(v48, (unsigned int *)&v56);
                  sub_22E903BEC((unsigned int *)&v58);
                  goto LABEL_80;
                }
              }
              else if (((1 << v46) & 0x20000000200003CLL) == 0)
              {
                goto LABEL_72;
              }
LABEL_77:
              v45 = sub_22F115B7C(v45);
            }
          }
        }
        v35 = *(_QWORD *)v34;
        if (*(_BYTE *)(*(_QWORD *)v34 + 16) != 39)
        {
          v35 = sub_22F10CF48(v35);
          v31 = v49;
          v27 = v50;
        }
      }
      v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
    }
    else
    {
      v36 = *(_QWORD *)(v35 + 8);
    }
    v37 = *(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF0);
    if (!v37 || *(_BYTE *)(v37 + 16) != 45)
      goto LABEL_39;
    goto LABEL_56;
  }
LABEL_80:
  v13 = 1;
LABEL_81:
  if (HIDWORD(v53[1]))
    free(v53[0]);
  return v13;
}

uint64_t sub_22EC06E04(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  _QWORD v31[2];
  void *v32;
  uint64_t v33;
  _BYTE v34[16];
  _QWORD v35[6];

  v35[4] = *MEMORY[0x24BDAC8D0];
  memset(v29, 0, sizeof(v29));
  sub_22F05FD5C(a2, v29);
  v4 = sub_22EBCEF90(a1, *((_QWORD *)&v29[0] + 1));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBCEF90(a1, *(_QWORD *)&v29[1]);
  if ((v5 & 1) != 0)
    return 1;
  v27 = v5;
  v28 = v4;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v32 = v34;
  v33 = 0x200000000;
  v31[0] = a2[2];
  v31[1] = *((_QWORD *)&v29[1] + 1);
  v9 = 1;
  do
  {
    v10 = v7;
    v11 = sub_22EFFED0C((unsigned __int8 *)v31[v8]);
    if (*v11 == 141)
    {
      v12 = sub_22EFFED0C(*(unsigned __int8 **)&v11[v11[3]]);
      if (*v12 == 161)
      {
        v13 = v12;
        v14 = v12 + 16;
        if ((*(_DWORD *)(*((_QWORD *)v12 + 2) + 28) & 0x7Eu) - 54 >= 4)
        {
          sub_22F05FD5C(a2, v35);
          v15 = *(unsigned int *)v13;
          if ((v15 & 0x100000) != 0)
            v16 = (unsigned int *)&v13[16 * ((v15 >> 18) & 1) + 32];
          else
            v16 = (unsigned int *)v14;
          v17 = *(_QWORD *)v16;
          v30 = *(_QWORD *)v16;
          v35[0] = 0;
          if (sub_22E793870((uint64_t *)(a1 + 8), &v30, v35)
            && v35[0] != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
          {
            v17 = *(_QWORD *)(v35[0] + 8);
          }
          if (!v17)
            goto LABEL_28;
          v18 = *(unsigned int *)v13;
          if ((v18 & 0x100000) != 0)
            v19 = (unsigned int *)&v13[16 * ((v18 >> 18) & 1) + 32];
          else
            v19 = (unsigned int *)v14;
          v20 = v17 != *(_QWORD *)v19;
          v21 = v33;
          if (v33 >= (unint64_t)HIDWORD(v33))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v21 = v33;
          }
          v6 |= v20;
          *((_QWORD *)v32 + v21) = v17 | 3;
          LODWORD(v33) = v33 + 1;
        }
      }
    }
    v7 = 1;
    v8 = 1;
  }
  while ((v10 & 1) == 0);
  v23 = *(_QWORD *)a1;
  v24 = v28 & 0xFFFFFFFFFFFFFFFELL;
  v25 = v27 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1) | v6 & 1 || *(_OWORD *)((char *)v29 + 8) != __PAIR128__(v25, v24))
  {
    sub_22F05FD5C(a2, v35);
    sub_22EFF605C(v35[3]);
    v9 = sub_22ED1767C(*(_QWORD *)a1, v26, LODWORD(v29[0]), (uint64_t)&v32, v24, v25, 0, 1, 0);
  }
  else
  {
    v35[0] = v28 & 0xFFFFFFFFFFFFFFFELL;
    v35[1] = v27 & 0xFFFFFFFFFFFFFFFELL;
    sub_22F32DC94(v23, a2, 0, v35, 2);
    v9 = (uint64_t)a2;
  }
LABEL_28:
  if (v32 != v34)
    free(v32);
  return v9;
}

uint64_t sub_22EC070E0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  uint64_t v6[2];

  v2 = a2;
  v4 = sub_22EC0F7CC(a1, *(uint64_t **)(a2 + 16));
  if (!v4)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1 || v4 != *(unint64_t **)(v2 + 16))
  {
    v6[0] = *v4;
    v6[1] = (uint64_t)(v4 + 1);
    sub_22F1167E8(v6);
    return sub_22EBBC368();
  }
  return v2;
}

uint64_t sub_22EC07188(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22EBBA860(*a1, *(_DWORD *)(v2 + 4), v5, (*(_DWORD *)v2 >> 18) & 1);
  return v2;
}

uint64_t sub_22EC071F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) == 0)
  {
    if ((*(_BYTE *)(a2 + 1) & 3) == 0)
      goto LABEL_6;
    v6 = 0;
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v7 || *(_BYTE *)(v7 + 16) != 45)
      goto LABEL_13;
    v8 = sub_22F114198(*(_QWORD *)(v7 + 24));
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 104) + 96), *(_QWORD *)(v8 + 104));
    if ((**(_QWORD **)(v8 + 128) & 0x400) != 0)
      v6 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
    else
LABEL_6:
      v6 = 0;
LABEL_13:
    v11 = *a1;
    sub_22EB4DECC(*a1, v6, 0, 3);
    v15 = sub_22EBCEF90(a1, v5);
    if ((v15 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (*(_DWORD *)(*a1 + 11992) != -1 || v16 != (_QWORD *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        v2 = sub_22EBB98E0(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 24), v16, *(unsigned int *)(v2 + 28), v12, v13, v14);
    }
    sub_22EB48E64(v11);
    return v2;
  }
  v9 = (uint64_t *)sub_22EC0F7CC((_QWORD **)a1, (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8));
  if (!v9)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || v9 != (uint64_t *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
    return sub_22EBB9700((_QWORD *)*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 24), v9, *(unsigned int *)(v2 + 28));
  return v2;
}

uint64_t sub_22EC0736C(uint64_t *a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  char v18;
  int v19[3];
  int v20;
  uint64_t v21;
  int v22;
  void *v23[2];
  _QWORD v24[9];

  v24[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EC21020(a1, *(uint64_t **)(a2 + 16));
  if (!v4)
    return 1;
  v5 = v4;
  v18 = 0;
  v23[0] = v24;
  v23[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 4) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if (!*(_DWORD *)(a2 + 24))
  {
    v8 = *a1;
    v9 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
    v10 = v9 > 3 || v9 == 2;
    if (!v10 && (*(_BYTE *)(*(_QWORD *)(v8 + 72) + 1) & 2) != 0)
    {
      v22 = 1;
      v21 = 0;
      v20 = 3;
      *(_QWORD *)v19 = *(unsigned int *)(v8 + 1704);
      sub_22EB4DDB8(v8 + 3688, &v22, v19, (__int16 *)(v8 + 1693), &v21, &v20);
      v11 = *(unsigned int *)(v8 + 3696);
      v12 = v11 - 2;
      v13 = *(_QWORD *)(v8 + 3688);
      v14 = *(_DWORD *)(v13 + 576 * (v11 - 2));
      if (v14 == 5)
      {
        *(_BYTE *)(v13 + 576 * v11 - 4) = *(_BYTE *)(v13 + 576 * v12 + 572);
        v15 = 1;
      }
      else if (v14 == 2)
      {
        *(_BYTE *)(v13 + 576 * v11 - 4) = 1;
        v15 = *(_BYTE *)(v13 + 576 * v12 + 573) != 0;
      }
      else
      {
        v15 = 0;
        *(_BYTE *)(v13 + 576 * v11 - 4) = 0;
      }
      v16 = v13 + 576 * v11;
      *(_BYTE *)(v16 - 3) = v15;
      *(_WORD *)(v8 + 1693) = 0;
      if (*(_DWORD *)(v8 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v8 + 1776), (llvm::SmallPtrSetImplBase *)(v16 - 560));
        sub_22EAEAE08(v8 + 1840, (uint64_t *)(v16 - 496));
      }
      v6 = 1;
      v17 = sub_22EC16FD8(a1, (unsigned __int8 **)(a2 + 32), *(_DWORD *)(a2 + 4), 1, (uint64_t)v23, &v18);
      sub_22EB48E64(v8);
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_6;
    }
  }
  v6 = 1;
  if ((sub_22EC16FD8(a1, (unsigned __int8 **)(a2 + 32), *(_DWORD *)(a2 + 4), 1, (uint64_t)v23, &v18) & 1) == 0)
  {
LABEL_6:
    if (*(_DWORD *)(*a1 + 11992) == -1 && v5 == *(unint64_t **)(a2 + 16) && !v18)
      v6 = a2;
    else
      v6 = sub_22EBBC368();
  }
LABEL_8:
  if (v23[0] != v24)
    free(v23[0]);
  return v6;
}

uint64_t sub_22EC07604(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if ((v4 & 4) != 0)
  {
    v14 = (uint64_t *)sub_22EC0F7CC(a1, (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8));
    if (v14)
    {
      if (*((_DWORD *)*a1 + 2998) != -1 || v14 != (uint64_t *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        return sub_22EBBA098(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 32), v14, *(_DWORD *)(v2 + 36));
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v5 = *a1;
    v19 = 0;
    v18 = 0;
    v17 = 3;
    *(_QWORD *)v16 = *((unsigned int *)v5 + 426);
    sub_22EB4DDB8((uint64_t)(v5 + 461), &v19, v16, (__int16 *)((char *)v5 + 1693), &v18, &v17);
    v6 = *((unsigned int *)v5 + 924);
    v7 = v6 - 2;
    v8 = v5[461];
    v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
    if (v9 == 5)
    {
      *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
      v10 = 1;
    }
    else if (v9 == 2)
    {
      *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
      v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
    }
    else
    {
      v10 = 0;
      *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
    }
    v11 = v8 + 576 * v6;
    *(_BYTE *)(v11 - 3) = v10;
    *(_WORD *)((char *)v5 + 1693) = 0;
    if (*((_DWORD *)v5 + 462))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v5 + 222), (llvm::SmallPtrSetImplBase *)(v11 - 560));
      sub_22EAEAE08((uint64_t)(v5 + 230), (uint64_t *)(v11 - 496));
    }
    v12 = sub_22EBCEF90(a1, *(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8);
    if ((v12 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      if (*((_DWORD *)*a1 + 2998) != -1 || v13 != (*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        v2 = sub_22EBBA3E8(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 32), v13, *(_DWORD *)(v2 + 36));
    }
    sub_22EB48E64(v5);
  }
  return v2;
}

uint64_t sub_22EC077DC(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  int v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[9];

  v24[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EBCEF90(a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v20 = 0;
  v22 = v24;
  v23 = 0x800000000;
  v5 = 1;
  if ((sub_22EC16FD8(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), a2[4], 1, (uint64_t)&v22, &v20) & 1) == 0)
  {
    v6 = *a1;
    v7 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    v8 = *a2;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && (*(unsigned __int8 **)((char *)a2 + (v8 >> 24)) == v7 ? (v9 = v20 == 0) : (v9 = 0), v9))
    {
      v5 = sub_22EBCC6C0(*a1, (uint64_t)a2);
    }
    else
    {
      sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
      v11 = v10;
      v12 = *(_DWORD *)(v6 + 56);
      v13 = *(_QWORD *)(v6 + 1296);
      v19 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + 520);
      v14 = v6;
      if ((v8 & 0x100000) != 0)
      {
        v15 = *(_QWORD *)((char *)&a2[2 * ((v8 >> 18) & 1) + 2 + 2 * a2[4]] + (v8 >> 24));
        sub_22E51A8D0(&v21, *(_QWORD *)(v6 + 72));
        v16 = *a1;
        *(_DWORD *)(v16 + 56) = v21 & ~HIDWORD(v15) | HIDWORD(v15) & v15;
        *(_QWORD *)(v16 + 1296) = v15;
        v14 = *a1;
      }
      v5 = sub_22EB33018(v14, 0, v7, v11, (uint64_t)v22, v23, a2[5], 0);
      *(_DWORD *)(v6 + 56) = v12;
      *(_QWORD *)(v6 + 1296) = v13;
      v17 = *(_QWORD *)(v6 + 80);
      *(_QWORD *)(v17 + 520) = v19;
      *(_DWORD *)(v17 + 528) = v19;
    }
  }
  if (v22 != v24)
    free(v22);
  return v5;
}

uint64_t sub_22EC079C4(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  unint64_t v10;
  char v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EBCEF90(a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EC077DC(a1, *(unsigned int **)((char *)a2 + *((unsigned __int8 *)a2 + 3) + 8));
  if ((v5 & 1) != 0)
    return 1;
  v12 = 0;
  v13 = v15;
  v14 = 0x800000000;
  v6 = 1;
  if ((sub_22EC16FD8(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), a2[4], 1, (uint64_t)&v13, &v12) & 1) == 0)
  {
    v7 = *a1;
    if (*(_DWORD *)(v7 + 11992) == -1
      && (*(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)) == (v4 & 0xFFFFFFFFFFFFFFFELL)
        ? (v8 = v12 == 0)
        : (v8 = 0),
          v8))
    {
      v10 = sub_22EBCC6C0(v7, (uint64_t)a2);
    }
    else
    {
      sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
      v10 = sub_22EB33018(v7, 0, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), v9, (uint64_t)v13, v14, a2[5], v5 & 0xFFFFFFFFFFFFFFFELL);
    }
    v6 = v10;
  }
  if (v13 != v15)
    free(v13);
  return v6;
}

uint64_t sub_22EC07B34(uint64_t *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unint64_t v33;
  _QWORD *v34;
  int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  _QWORD v62[18];

  v62[16] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)((char *)a2 + BYTE3(*(_QWORD *)a2));
  if ((*(_QWORD *)a2 & 0x3E00000000) == 0x2A00000000)
  {
    v5 = sub_22EBCEF90(a1, v4[((*(_QWORD *)a2 >> 18) & 1) + 1]);
    if ((v5 & 1) == 0)
    {
      v6 = *a1;
      v7 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL);
      sub_22F0D60E4(v5 & 0xFFFFFFFFFFFFFFFELL);
      v9 = sub_22F141A3C(v8, 0, *(_QWORD **)(v6 + 112), *(_DWORD **)(v6 + 72));
      v60 = v62;
      v61 = 0x800000000;
      v10 = 1;
      if ((sub_22EC16FD8(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4]+ ((unint64_t)*a2 >> 24)), a2[4] - 1, 1, (uint64_t)&v60, 0) & 1) == 0)
      {
        v11 = a2[7];
        v12 = *a1;
        if ((*(_QWORD *)a2 & 0x3F00000000) == 0x2B00000000)
          v13 = sub_22EB296C0(v12, 0, v7, v9, (uint64_t *)v60, v61, v11);
        else
          v13 = sub_22EB33018(v12, 0, v7, v9, (uint64_t)v60, v61, v11, 0);
        v10 = v13;
      }
      if (v60 != v62)
        free(v60);
      return v10;
    }
    return 1;
  }
  v14 = sub_22EBCEF90(a1, *v4);
  if ((v14 & 1) != 0)
    return 1;
  v15 = *(unsigned __int8 **)((char *)&a2[2 * ((*(_QWORD *)a2 >> 18) & 1) + 2] + BYTE3(*(_QWORD *)a2));
  if ((*(_QWORD *)a2 & 0x3F00000000) == 0xB00000000 && *v15 == 163)
    v16 = sub_22EC215B0(a1, (uint64_t)v15, 1, 0);
  else
    v16 = sub_22EBCEF90(a1, v15);
  v17 = v16;
  if ((v16 & 1) != 0)
    return 1;
  if (a2[4] == 2)
  {
    v18 = sub_22EBCEF90(a1, *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24)));
    if ((v18 & 1) != 0)
      return 1;
  }
  else
  {
    v18 = 0;
  }
  v20 = *a1;
  v21 = *a2;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || (v22 = (_QWORD *)((char *)a2 + (v21 >> 24)), *v22 != (v14 & 0xFFFFFFFFFFFFFFFELL))
    || (v23 = &v22[(v21 >> 18) & 1], v25 = v23[1], v24 = v23 + 1, v25 != (v17 & 0xFFFFFFFFFFFFFFFELL))
    || a2[4] == 2 && v24[1] != (v18 & 0xFFFFFFFFFFFFFFFELL))
  {
    if ((v21 & 0x100000) != 0)
      v26 = *(_QWORD *)((char *)&a2[2 * ((v21 >> 18) & 1) + 2 + 2 * a2[4]] + (v21 >> 24));
    else
      v26 = 0;
    v27 = *(_DWORD *)(v20 + 56);
    v28 = *(_QWORD *)(v20 + 1296);
    v59 = *(_QWORD *)(*(_QWORD *)(v20 + 80) + 520);
    sub_22E51A8D0(&v60, *(_QWORD *)(v20 + 72));
    v29 = *a1;
    *(_DWORD *)(v29 + 56) = v60 & ~HIDWORD(v26) | HIDWORD(v26) & v26;
    *(_QWORD *)(v29 + 1296) = v26;
    v30 = a2[1] & 0x3F;
    v31 = a2[5];
    v32 = (unsigned __int8 *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    v33 = v17 & 0xFFFFFFFFFFFFFFFELL;
    v34 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    v35 = (v18 & 0xFFFFFFFFFFFFFFFELL) != 0;
    v36 = sub_22EFFBBCC(v32);
    if ((v30 - 37) >= 2)
      v35 = 0;
    if ((*(_DWORD *)v33 & 0x1C00) == 0xC00)
    {
      v37 = sub_22EFFBA54(v30);
      v38 = (_QWORD *)*a1;
      if ((v37 - 21) <= 0xA)
      {
        v10 = sub_22ED27A90(v38, 0, v31, v37, v33, (uint64_t)v34);
LABEL_48:
        v46 = v59;
LABEL_82:
        *(_DWORD *)(v20 + 56) = v27;
        *(_QWORD *)(v20 + 1296) = v28;
        v56 = *(_QWORD *)(v20 + 80);
        *(_QWORD *)(v56 + 520) = v46;
        *(_DWORD *)(v56 + 528) = v46;
        return v10;
      }
      v39 = sub_22EB19A28(v38);
      if ((v39 & 1) != 0)
        goto LABEL_47;
      v33 = v39 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (!v34 || (*(_DWORD *)v34 & 0x1C00) != 0xC00)
    {
LABEL_38:
      if (v30 == 43)
      {
        v41 = *(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v41 + 17) & 4) == 0
          && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
        {
          v42 = *(_QWORD *)(v34[1] & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v42 + 17) & 4) == 0
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
          {
            v43 = *a1;
            sub_22F0D5A50((uint64_t)v36);
            v45 = sub_22EB2AFE4(v43, (uint64_t (**)())v33, v44, v34, v31);
            goto LABEL_55;
          }
        }
      }
      else
      {
        if (v30 == 41)
        {
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
          {
            v10 = 1;
            goto LABEL_81;
          }
          v45 = sub_22ED1C570();
LABEL_55:
          v10 = v45;
LABEL_81:
          v46 = v59;
          goto LABEL_82;
        }
        v47 = *(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0);
        v48 = *(_DWORD *)(v47 + 16);
        if (((v34 != 0) & ~v35) != 0)
        {
          if ((v48 & 0x400) == 0
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
          {
            v50 = *(_QWORD *)(v34[1] & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v50 + 17) & 4) == 0
              && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
            {
              sub_22EFFBA54(v30);
              v57 = sub_22EB2D0B8();
              if ((v57 & 1) != 0)
                v10 = 1;
              else
                v10 = v57;
              goto LABEL_81;
            }
          }
        }
        else if ((v48 & 0x400) == 0
               && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C
               || v30 == 11 && sub_22EB48AD0(*a1, (unsigned __int8 *)v33))
        {
          v49 = sub_22EFFA13C(v30, v35);
          v45 = sub_22EB2EA08(*a1, v31, v49, v33);
          goto LABEL_55;
        }
      }
      v60 = v62;
      v61 = 0x1000000000;
      v51 = *v36;
      v58 = v27;
      if (v51 == 211)
      {
        sub_22E3D0148((uint64_t)&v60, v36 + 64, &v36[8 * *((unsigned int *)v36 + 1) + 64]);
        v52 = (*(_DWORD *)v36 >> 19) & 1;
        v51 = *(_DWORD *)v36;
      }
      else
      {
        v53 = *((_QWORD *)v36 + 2);
        v52 = 0;
        if ((*(_DWORD *)(v53 + 28) & 0x7Eu) - 54 >= 4)
        {
          v62[0] = v53 | 3;
          LODWORD(v61) = 1;
        }
      }
      if (((v34 != 0) & ~v35) != 0)
      {
        if (v30 == 43)
        {
          if (v51 != 161)
            sub_22F0D5A50((uint64_t)v36);
          v27 = v58;
          v10 = sub_22ED18C00();
          goto LABEL_79;
        }
        v54 = sub_22EFFBA54(v30);
        v55 = sub_22ED1767C(*a1, v31, v54, (uint64_t)&v60, v33, (uint64_t)v34, v52, 1, 0);
        if ((v55 & 1) != 0)
          v10 = 1;
        else
          v10 = v55;
      }
      else
      {
        sub_22EFFA13C(v30, v35);
        v10 = sub_22ED1677C();
      }
      v27 = v58;
LABEL_79:
      if (v60 != v62)
        free(v60);
      goto LABEL_81;
    }
    v40 = sub_22EB19A28(*a1);
    if ((v40 & 1) == 0)
    {
      v34 = (_QWORD *)(v40 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_38;
    }
LABEL_47:
    v10 = 1;
    goto LABEL_48;
  }
  return sub_22EBCC6C0(*a1, (uint64_t)a2);
}

uint64_t sub_22EC08274(uint64_t *a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = sub_22EC0F7CC((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22E95C7F8(*a1, *(_DWORD *)(a2 + 32), v5, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
}

uint64_t sub_22EC082E0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v2 = a2;
  v4 = sub_22EC0F7CC(a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  v7 = sub_22EBCEF90(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != *(unint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22E95CFA4(*a1, *(unsigned int *)(v2 + 32), v5, *(unsigned int *)(v2 + 36), v7 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EC08384(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v2 = a2;
  v4 = sub_22EC21020(a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  v7 = sub_22EBCEF90(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(unint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EBBC368();
  }
  return v2;
}

uint64_t sub_22EC08444(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22EC0F7CC((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EBCEF90(a1, *(_QWORD *)(v2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(uint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EC33F14(*a1, *(_DWORD *)(v2 + 32), *(_BYTE *)(v2 + 40) & 3, *(_DWORD *)(v2 + 36), v5, (void *)(v6 & 0xFFFFFFFFFFFFFFFELL));
  }
  return v2;
}

uint64_t sub_22EC084E8(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;

  v3 = sub_22EFFB374(a2);
  return sub_22EBCEF90(a1, v3);
}

uint64_t sub_22EC08514(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v2 = a2;
  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBCEF90(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EBCEF90(a1, *(_QWORD *)(v2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v7 = (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_DWORD **)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 32) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB4A774(*a1, *(_DWORD *)(v2 + 40), v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 44));
  }
  return v2;
}

uint64_t sub_22EC085D8(_QWORD **a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8);
  v5 = sub_22EC0F7CC(a1, v4);
  if (!v5)
    return 1;
  v6 = (uint64_t *)v5;
  v7 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 32));
  if ((v7 & 1) != 0)
    return 1;
  v8 = *a1;
  v9 = *(_QWORD *)(a2 + 32);
  if (v6 == v4 && *((_DWORD *)v8 + 2998) == -1 && v9 == (v7 & 0xFFFFFFFFFFFFFFFELL))
    return sub_22EBCC6C0((uint64_t)v8, a2);
  sub_22F0D60E4(v9);
  return sub_22EB34874();
}

uint64_t sub_22EC086A4(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];
  void *v17[2];
  _QWORD v18[34];

  v18[33] = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 80);
  v17[0] = v18;
  v5 = *v4;
  v17[1] = (void *)0x800000000;
  v18[32] = v5;
  if ((sub_22EC21310((uint64_t)a1, (uint64_t)(v4 + 2), (uint64_t)&v4[4 * *((unsigned int *)v4 + 2) + 2]) & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    v9 = *(_DWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 64);
    v14 = *(_QWORD *)(a2 + 56);
    v11 = *(_QWORD *)(a2 + 72);
    v15 = 0u;
    *(_OWORD *)v16 = 0u;
    sub_22E8ACE30((uint64_t)&v15, v7, v8);
    v6 = sub_22F345EB4(*a1, (unsigned int *)&v15, v9, &v13, v10, v11, (uint64_t)v17);
    if (HIDWORD(v16[1]))
      free(v16[0]);
    if ((v6 & 1) != 0)
      v6 = 1;
  }
  if (v17[0] != v18)
    free(v17[0]);
  return v6;
}

uint64_t sub_22EC087C8(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v2 = a2;
  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t *)sub_22EC0F7CC(a1, *(uint64_t **)(v2 + 24));
  if (!v5)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != *(uint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F310E84(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v5, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 36));
  }
  return v2;
}

uint64_t sub_22EC08860(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EC1726C(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FA6A4(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (*(_DWORD *)a2 >> 18) & 1);
}

uint64_t sub_22EC088B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EC1726C(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB1B0(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EC08900(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int32 v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  void **v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __n128 v27;
  uint64_t v28;
  __int128 v29;
  void *v30[2];
  void *v31[2];
  _QWORD v32[32];
  uint64_t v33;
  uint64_t v34;

  v2 = a2;
  v34 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 4) != 0 && (v4 = *(_QWORD *)(a2 + 32)) != 0)
  {
    v5 = sub_22EC140CC(a1, v4, *(void **)(v2 + 40), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v10 = (uint64_t *)(v2 + 16);
  v9 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)&v29 = v9;
  v31[0] = 0;
  if (sub_22E793870(a1 + 1, &v29, v31) && v31[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
    v9 = *((_QWORD *)v31[0] + 1);
  if (!v9)
    return 1;
  v11 = *(unsigned int *)v2;
  v12 = v2 + 32;
  if ((v11 & 0x100000) != 0)
    v13 = (uint64_t *)(v2 + 32 + 16 * ((v11 >> 18) & 1));
  else
    v13 = (uint64_t *)(v2 + 16);
  v14 = *v13;
  if (*v13 == *(_QWORD *)(v2 + 16))
  {
    v15 = *v13;
    v14 = v9;
  }
  else
  {
    *(_QWORD *)&v29 = *v13;
    v31[0] = 0;
    if (sub_22E793870(a1 + 1, &v29, v31) && v31[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v14 = *((_QWORD *)v31[0] + 1);
    if (!v14)
      return 1;
    v15 = *v10;
  }
  v16 = *(_DWORD *)(v2 + 4);
  v17 = *(_QWORD *)(v2 + 24);
  v27.n128_u64[0] = *(_QWORD *)(v15 + 40);
  v27.n128_u32[2] = v16;
  v28 = v17;
  if (v27.n128_u64[0])
  {
    sub_22EC1C534((__n128 *)v31, a1, &v27);
    v27 = *(__n128 *)v31;
    v28 = v32[0];
    v18 = v31[0];
    if (!v31[0])
      return 1;
  }
  else
  {
    v18 = 0;
  }
  v19 = *(unsigned int *)v2;
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    if ((v19 & 0x40000) != 0)
    {
      v24 = *(_QWORD *)(v2 + 32);
      v25 = *(_QWORD *)(v2 + 40);
    }
    else
    {
      v24 = 0;
      v25 = 0;
    }
    if (v7 == v24 && v8 == v25 && v9 == *v10)
    {
      v26 = (_QWORD *)((v19 & 0x100000) != 0 ? v12 + 16 * ((v19 >> 18) & 1) : v2 + 16);
      if (v14 == *v26
        && v18 == *(void **)(v9 + 40)
        && ((v19 & 0x80000) == 0 || !*(_DWORD *)(v12 + 16 * ((v19 >> 18) & 1) + 8 * ((v19 >> 20) & 1))))
      {
        sub_22EB22288(*a1, v2, 0);
        return v2;
      }
    }
  }
  v31[0] = v32;
  v31[1] = (void *)0x800000000;
  v33 = 0;
  if ((v19 & 0x80000) == 0
    || (v20 = (_DWORD *)(v12 + 16 * ((v19 >> 18) & 1) + 8 * ((v19 >> 20) & 1)), !*v20))
  {
    v22 = 0;
LABEL_30:
    v29 = 0u;
    *(_OWORD *)v30 = 0u;
    sub_22E8ACE30((uint64_t)&v29, v7, v8);
    v2 = sub_22EB24A3C(*a1, &v29, &v27, v9, v14, v22, 0);
    if (HIDWORD(v30[1]))
      free(v30[0]);
    goto LABEL_32;
  }
  v33 = *(_QWORD *)v20;
  v21 = (uint64_t)&v20[4 * ((v19 >> 19) & 1)];
  v22 = v31;
  if ((sub_22EC21310((uint64_t)a1, v21, v21 + 32 * v20[3]) & 1) == 0)
    goto LABEL_30;
  v2 = 1;
LABEL_32:
  if (v31[0] != v32)
    free(v31[0]);
  return v2;
}

uint64_t sub_22EC08C20(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22EC1726C(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EC0D110(a1, *(unsigned int **)(a2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22E9FA204((_QWORD *)*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EC08C90(uint64_t *a1, uint64_t a2)
{
  return sub_22EC215B0(a1, a2, 0, 0);
}

uint64_t sub_22EC08C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[32];
  char *v61;
  uint64_t v62;
  _QWORD v63[12];

  v2 = a2;
  v63[10] = *MEMORY[0x24BDAC8D0];
  v61 = (char *)v63;
  v62 = 0x200000000;
  v4 = sub_22E487828(a2);
  v5 = sub_22EBCEF90(a1, v4);
  if ((v5 & 1) != 0)
  {
    v2 = 1;
    goto LABEL_50;
  }
  v58 = v60;
  v59 = 0x400000000;
  if (!((unsigned __int16)*(_DWORD *)(v2 + 20) >> 1))
  {
    LOBYTE(v6) = 0;
    v43 = v5 & 0xFFFFFFFFFFFFFFFELL;
LABEL_42:
    v40 = *(_QWORD **)a1;
    if (*(_DWORD *)(*(_QWORD *)a1 + 11992) == -1)
    {
      if (!((sub_22E487828(v2) != v43) | v6 & 1))
        goto LABEL_48;
      v40 = *(_QWORD **)a1;
    }
    v41 = sub_22EC38374(v40, (uint64_t *)&v61, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20) & 1, v43);
    if ((v41 & 1) != 0)
      v2 = 1;
    else
      v2 = v41;
    goto LABEL_48;
  }
  v6 = 0;
  v43 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v7 = v2 + 32;
  v8 = *(_QWORD *)(v2 + 24) + 8;
  v9 = 24 * ((unsigned __int16)*(_DWORD *)(v2 + 20) >> 1);
  while (1)
  {
    v10 = v6;
    v11 = *(_DWORD *)(v8 - 8);
    if (v11 == 1)
    {
      v20 = sub_22EBCEF90(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)));
      if ((v20 & 1) != 0)
        break;
      v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v22 = *(_DWORD *)(v8 + 4);
      v6 = 1;
      v51 = 1;
      v52 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v53 = v22;
      v54 = 0;
      v23 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v51, 1);
      v24 = &v61[40 * v62];
      v25 = *(_QWORD *)(v23 + 32);
      v26 = *(_OWORD *)(v23 + 16);
      *(_OWORD *)v24 = *(_OWORD *)v23;
      *((_OWORD *)v24 + 1) = v26;
      *((_QWORD *)v24 + 4) = v25;
      LODWORD(v62) = v62 + 1;
      if ((v10 & 1) == 0)
        v6 = *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)) != v43;
      v27 = v59;
      if (v59 >= (unint64_t)HIDWORD(v59))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = v59;
      }
      *((_QWORD *)v58 + v27) = v21;
      goto LABEL_33;
    }
    if (!v11)
    {
      v12 = *(_QWORD *)v8;
      if ((*(_QWORD *)v8 & 1) != 0)
      {
        v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v39 = *(_QWORD *)(v12 + 40);
        if ((v39 & 7) != 0)
          v13 = 0;
        else
          v13 = v39 & 0xFFFFFFFFFFFFFFF8;
      }
      v55 = 0;
      v56 = v13;
      v57 = *(_QWORD *)(v8 + 8);
      v6 = 1;
      v14 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v55, 1);
      v15 = &v61[40 * v62];
      v16 = *(_QWORD *)(v14 + 32);
      v17 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)v15 = *(_OWORD *)v14;
      *((_OWORD *)v15 + 1) = v17;
      *((_QWORD *)v15 + 4) = v16;
      LODWORD(v62) = v62 + 1;
      v18 = *(_QWORD *)v8;
      if (*(_QWORD *)v8 && (v18 & 1) == 0)
      {
        v44 = *(_QWORD *)v8;
        v45 = 0;
        if (sub_22E793870((uint64_t *)(a1 + 8), &v44, &v45)
          && v45 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
        {
          v18 = *(_QWORD *)(v45 + 8);
        }
        v19 = *(_QWORD *)v8;
        if ((*(_QWORD *)v8 & 1) != 0)
          v19 = 0;
        v6 = (v18 != v19) | v10;
      }
      goto LABEL_34;
    }
    v28 = sub_22EBCEF90(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)));
    if ((v28 & 1) != 0)
      break;
    v29 = sub_22EBCEF90(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 2)));
    if ((v29 & 1) != 0)
      break;
    v30 = v28 & 0xFFFFFFFFFFFFFFFELL;
    v31 = v29 & 0xFFFFFFFFFFFFFFFELL;
    v46 = 2;
    v32 = *(_QWORD *)(v8 + 4);
    v47 = v28 & 0xFFFFFFFFFFFFFFFELL;
    v48 = v29 & 0xFFFFFFFFFFFFFFFELL;
    v49 = v32;
    v50 = 0;
    v6 = 1;
    v33 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v46, 1);
    v34 = &v61[40 * v62];
    v35 = *(_QWORD *)(v33 + 32);
    v36 = *(_OWORD *)(v33 + 16);
    *(_OWORD *)v34 = *(_OWORD *)v33;
    *((_OWORD *)v34 + 1) = v36;
    *((_QWORD *)v34 + 4) = v35;
    LODWORD(v62) = v62 + 1;
    if ((v10 & 1) == 0)
      v6 = *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)) != v30
        || *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 2)) != v31;
    v37 = v59;
    if (v59 >= (unint64_t)HIDWORD(v59))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v37 = v59;
    }
    *((_QWORD *)v58 + v37) = v30;
    v38 = v59 + 1;
    LODWORD(v59) = v38;
    if (v38 >= HIDWORD(v59))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v38 = v59;
    }
    *((_QWORD *)v58 + v38) = v31;
LABEL_33:
    LODWORD(v59) = v59 + 1;
LABEL_34:
    v8 += 24;
    v9 -= 24;
    if (!v9)
      goto LABEL_42;
  }
  v2 = 1;
LABEL_48:
  if (v58 != v60)
    free(v58);
LABEL_50:
  if (v61 != (char *)v63)
    free(v61);
  return v2;
}

uint64_t sub_22EC09100(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v14[3];
  int v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v17 = 0;
  v16 = 0;
  v15 = 3;
  *(_QWORD *)v14 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v17, v14, (__int16 *)(v4 + 1693), &v16, &v15);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 32));
  if ((v11 & 1) != 0)
  {
    a2 = 1;
  }
  else
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 32) != v12)
    {
      sub_22EB48E64(v4);
      return sub_22EBC8E1C(*a1, *(_DWORD *)(a2 + 16) & 0x7FFFFFFF, *(_DWORD *)(a2 + 20), v12, *(_DWORD *)(a2 + 24));
    }
  }
  sub_22EB48E64(v4);
  return a2;
}

uint64_t sub_22EC09288(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _BOOL8 v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  void *v20[2];

  v2 = a2;
  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t)*a1;
  v6 = *(_QWORD *)(v2 + 16);
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || v6 != v7)
  {
    sub_22F0D60E4(v6);
    v10 = sub_22F141A3C(v9, 0, *(_QWORD **)(v5 + 112), *(_DWORD **)(v5 + 72));
    v11 = *(_QWORD *)(v2 + 24);
    v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                     + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16) == 39;
    v13 = *(_DWORD *)(v2 + 32);
    v14 = v10;
    v19 = 0u;
    *(_OWORD *)v20 = 0u;
    v16 = v11;
    v17 = v13;
    sub_22EFC6D6C((uint64_t)&v18, v11);
    v2 = sub_22EC225CC(*a1, v7, *(_QWORD *)(v7 + 8), v14, v12, (uint64_t)&v19, 0, 0, (uint64_t)&v16, 0, 0, 0);
    if (HIDWORD(v20[1]))
      free(v20[0]);
  }
  return v2;
}

uint64_t sub_22EC0939C(uint64_t a1, const void **a2)
{
  const void **v3;

  v3 = sub_22EFFB894(a2);
  return sub_22EBCEF90(a1, v3);
}

uint64_t sub_22EC093C8(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;

  v2 = a2;
  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    v6 = sub_22EBCEF90(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = 0;
  }
  v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 16) == (v4 & 0xFFFFFFFFFFFFFFFELL) && *(_QWORD *)(v2 + 24) == v8)
    return v2;
  return sub_22EB53C74(*a1, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 36), *(_QWORD *)(v2 + 8), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v8);
}

uint64_t sub_22EC0945C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v23;
  void *v24[4];
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v6 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v25 = v27;
  v26 = 0x400000000;
  v23 = 0;
  v7 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v7)
  {
    v8 = (v7 + 1);
    v9 = 8 * v7;
    v10 = 1;
    while (1)
    {
      v11 = *(_QWORD *)(v4 + 8);
      v12 = *(uint64_t **)(v4 + 8 * v8);
      if (v12)
      {
        v13 = sub_22EC0F7CC((_QWORD **)a1, v12);
        if (!v13)
          break;
        v14 = v13;
        v15 = v23;
        if (v23 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v15 = v23;
        }
        v24[v15] = v14;
      }
      else
      {
        v16 = v23;
        if (v23 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v16 = v23;
        }
        v24[v16] = 0;
      }
      ++v23;
      v17 = sub_22EBCEF90(a1, v11);
      if ((v17 & 1) != 0)
        break;
      v18 = v26;
      if (v26 >= (unint64_t)HIDWORD(v26))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v26;
      }
      *((_QWORD *)v25 + v18) = v17 & 0xFFFFFFFFFFFFFFFELL;
      v19 = (v26 + 1);
      LODWORD(v26) = v26 + 1;
      v4 += 8;
      v9 -= 8;
      if (!v9)
      {
        v20 = v23;
        v21 = (uint64_t *)v25;
        goto LABEL_20;
      }
    }
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = v27;
LABEL_20:
    v10 = sub_22EB204CC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), (_DWORD *)(v6 & 0xFFFFFFFFFFFFFFFELL), v24, v20, v5, v21, v19);
  }
  if (v25 != v27)
    free(v25);
  return v10;
}

uint64_t sub_22EC09684(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)(a2 + 28);
  if (!v5)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v5 = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  if (!v7)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v9 = 1;
  if (v8)
  {
    if (*(_BYTE *)(v8 + 16) == 39)
      v9 = (*(_DWORD *)(v8 + 40) & 6) != 2;
  }
  return sub_22EB54020(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(a2 + 24) != 0, v5, v7, v9);
}

uint64_t sub_22EC0974C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v2 = a2;
  v4 = sub_22EC14078(a1, *(_QWORD *)(a2 + 8));
  if (v4 < 0x10)
    return 1;
  v5 = v4;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1 || v4 != *(_QWORD *)(v2 + 8))
  {
    v2 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 16, 3);
    sub_22E5018F0(v2, v5);
  }
  return v2;
}

uint64_t sub_22EC097D0(uint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  if ((*(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) != 0)
    v3 = *(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
  else
    v3 = a2;
  v16 = 0;
  v4 = *a1;
  v5 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
  if (v5 > 3 || v5 == 2)
  {
    v7 = 1;
  }
  else
  {
    v7 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v4 + 72) + 1) & 2) != 0)
    {
      v20 = 0;
      v18 = 3;
      v19 = 1;
      v17 = *(unsigned int *)(v4 + 1704);
      sub_22EB4DDB8(v4 + 3688, &v19, (int *)&v17, (__int16 *)(v4 + 1693), (uint64_t *)&v20, &v18);
      v8 = *(unsigned int *)(v4 + 3696);
      v9 = v8 - 2;
      v10 = *(_QWORD *)(v4 + 3688);
      v11 = *(_DWORD *)(v10 + 576 * (v8 - 2));
      if (v11 == 5)
      {
        *(_BYTE *)(v10 + 576 * v8 - 4) = *(_BYTE *)(v10 + 576 * v9 + 572);
        v12 = 1;
      }
      else if (v11 == 2)
      {
        *(_BYTE *)(v10 + 576 * v8 - 4) = 1;
        v12 = *(_BYTE *)(v10 + 576 * v9 + 573) != 0;
      }
      else
      {
        v12 = 0;
        *(_BYTE *)(v10 + 576 * v8 - 4) = 0;
      }
      v13 = v10 + 576 * v8;
      *(_BYTE *)(v13 - 3) = v12;
      *(_WORD *)(v4 + 1693) = 0;
      if (*(_DWORD *)(v4 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v13 - 560));
        sub_22EAEAE08(v4 + 1840, (uint64_t *)(v13 - 496));
      }
      v7 = 0;
    }
  }
  v20 = v22;
  v21 = 0x400000000;
  if ((sub_22EC16FD8(a1, *(unsigned __int8 ***)(v3 + 16), (*(_QWORD *)(v3 + 24) - *(_QWORD *)(v3 + 16)) >> 3, 0, (uint64_t)&v20, &v16) & 1) != 0)v14 = 1;
  else
    v14 = sub_22EB353A0(*a1, *(_DWORD *)(v3 + 40), (uint64_t *)v20, v21, *(_DWORD *)(v3 + 44));
  if (v20 != v22)
    free(v20);
  if ((v7 & 1) == 0)
    sub_22EB48E64(v4);
  return v14;
}

uint64_t sub_22EC099E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  _DWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  size_t v54;
  unsigned __int32 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  char v66;
  void *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  BOOL v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  unsigned __int8 *v160;
  unsigned int v161;
  uint64_t v162;
  unint64_t v163;
  _QWORD *v164;
  unint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  _DWORD *v168;
  unint64_t v169;
  _DWORD *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned __int8 *v181;
  _QWORD *v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  unsigned __int8 v193[24];
  char v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  unint64_t v198;
  char v199;
  uint64_t v200;
  _DWORD *v201;
  void *v202;
  uint64_t v203;
  int v204[12];
  unsigned __int8 *v205;
  void *v206[2];
  _BYTE v207[32];
  unint64_t v208;
  int64x2_t v209;
  _QWORD v210[5];
  void *v211;
  uint64_t v212;
  _BYTE v213[352];
  unsigned __int8 *v214;
  __int128 v215;
  _BYTE v216[16];
  char v217;
  void *v218[2];
  _BYTE v219[32];
  unint64_t *v220;
  uint64_t v221;
  _QWORD v222[6];

  v2 = a2;
  v222[4] = *MEMORY[0x24BDAC8D0];
  v211 = v213;
  v212 = 0x400000000;
  v4 = sub_22F3C65DC(a2);
  v5 = v4 - sub_22F3C64D0(v2);
  v6 = v5 >> 4;
  v7 = 0;
  if (v5 >> 4)
  {
    if (v6 >= v212)
    {
      if (v6 <= HIDWORD(v212))
      {
        v10 = (char *)v211;
      }
      else
      {
        v202 = 0;
        v10 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
        if (v211 != v213)
          free(v211);
        v211 = v10;
        HIDWORD(v212) = (_DWORD)v202;
        v7 = v212;
      }
      if (v6 != v7)
      {
        v11 = &v10[88 * v7];
        do
        {
          *(_OWORD *)v11 = 0uLL;
          *((_OWORD *)v11 + 1) = 0uLL;
          *((_QWORD *)v11 + 10) = 0;
          *((_OWORD *)v11 + 3) = 0uLL;
          *((_OWORD *)v11 + 4) = 0uLL;
          *((_OWORD *)v11 + 2) = 0uLL;
          *((_QWORD *)v11 + 1) = v11 + 24;
          *((_DWORD *)v11 + 5) = 4;
          v11 += 88;
        }
        while (v11 != &v10[88 * v6]);
      }
    }
    else
    {
      v8 = (void **)((char *)v211 - 80);
      v9 = 88 * v6;
      do
      {
        if (v8 + 2 != *v8)
          free(*v8);
        v8 -= 11;
        v9 += 88;
      }
      while (v9);
    }
    LODWORD(v212) = (unint64_t)v5 >> 4;
  }
  v220 = 0;
  v220 = (unint64_t *)sub_22F3C64D0(v2);
  v12 = (unint64_t *)sub_22F3C650C(v2);
  v13 = v220;
  if (v220 != v12)
  {
    v14 = v12;
    do
    {
      if (sub_22F3C6428(v2, v13))
      {
        v15 = v220;
        v16 = sub_22F3C64D0(v2);
        v17 = (char *)v211 + 88 * (((uint64_t)v15 - v16) >> 4);
        v218[0] = 0;
        v18 = (_QWORD *)(*v220 & 0xFFFFFFFFFFFFFFF8);
        v218[0] = v18;
        v208 = (unint64_t)a1;
        v209.i64[0] = (uint64_t)v218;
        v209.i64[1] = (uint64_t)v17;
        v210[0] = &v220;
        if (*(_BYTE *)(*(_QWORD *)(v18[6] & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
        {
          v19 = v18[7];
          v20 = v19 & 0xFFFFFFFFFFFFFFF8;
          if ((v19 & 4) != 0)
            v20 = *(_QWORD *)(v20 + 32);
          v202 = v204;
          v203 = 0x200000000;
          v21 = *a1;
          v22 = sub_22EFBC5B4((uint64_t)v18);
          v197 = 7;
          v198 = v22;
          sub_22EE7377C(v21, (uint64_t)&v197, (uint64_t)&v202);
          sub_22EC21894((uint64_t)&v208);
          *v17 = *(_DWORD *)(v20 + 8);
          if (v202 != v204)
            free(v202);
        }
        else
        {
          sub_22EC21894((uint64_t)&v208);
        }
      }
      v13 = v220 + 2;
      v220 = v13;
    }
    while (v13 != v14);
  }
  v23 = sub_22F3090C8(*a1);
  v195 = *a1;
  LOBYTE(v196) = 1;
  *(_QWORD *)(v23 + 1584) = sub_22F3C6624(v2);
  v24 = *(_QWORD *)(sub_22F3C6220(v2) + 56);
  v25 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFFFF8);
  if ((v24 & 4) != 0)
    v25 = (uint64_t *)v25[4];
  v192 = v23;
  v26 = *v25;
  if ((*v25 & 0xF) != 0)
  {
    v29 = 0;
    v30 = 0;
  }
  else
  {
    v27 = v25 + 1;
    v28 = *(unsigned __int8 *)(*(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v28 == 26)
      v29 = v26;
    else
      v29 = 0;
    if (v28 == 26)
      v30 = v27;
    else
      v30 = 0;
  }
  v208 = (unint64_t)v210;
  v209 = vdupq_n_s64(0x20uLL);
  v210[4] = 0;
  v206[0] = v207;
  v206[1] = (void *)0x400000000;
  v200 = v29;
  v201 = v30;
  v220 = v222;
  v221 = 0x400000000;
  v218[0] = v219;
  v218[1] = (void *)0x400000000;
  v214 = v216;
  v215 = xmmword_22F44E350;
  v217 = 0;
  if ((*(_BYTE *)(v29 + 23) & 0x10) != 0)
  {
    v37 = v29;
    v38 = v29;
    while (1)
    {
      if ((v38 & 0xF) != 0)
        goto LABEL_52;
      v39 = *(unsigned __int8 *)(*(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v39 > 0x39)
      {
LABEL_47:
        if (sub_22F115668(v38))
          v37 = v38;
        v38 = sub_22F115B7C(v38);
        if (!v38)
          goto LABEL_66;
      }
      else
      {
        if (v39 == 24)
          goto LABEL_65;
        if (v39 == 26)
        {
          if ((*(_BYTE *)(v38 + 23) & 0x10) != 0)
          {
LABEL_65:
            v37 = v38;
LABEL_66:
            sub_22F115668(v37);
            if (*(_BYTE *)(v200 + 16) == 25)
              v43 = 0;
            else
              v43 = (unsigned __int16)(*(_QWORD *)(v200 + 16) >> 38);
            v44 = (uint64_t)(v201 + 4);
            v45 = v200 + 40;
            if ((*(_BYTE *)(v29 + 23) & 4) != 0)
              v46 = sub_22E47E270(v29);
            else
              v46 = 0;
            if ((sub_22EC160C0(a1, v44, v43, v45, v46, (uint64_t)&v220, (uint64_t)v218, (uint64_t)&v214) & 1) != 0)
            {
              v36 = 0;
              goto LABEL_76;
            }
            v47 = *(_QWORD *)(v200 + 24);
            v48 = sub_22E47EE80(&v200);
            v51 = sub_22EC0F9F4((_QWORD **)a1, (uint64_t)&v208, v47, v48, v49, v50);
            if (v51 >= 0x10)
              goto LABEL_216;
LABEL_75:
            v36 = 0;
            goto LABEL_76;
          }
        }
        else if (((1 << v39) & 0x20000000200003CLL) == 0)
        {
          goto LABEL_47;
        }
LABEL_52:
        v38 = sub_22F115B7C(v38);
      }
    }
  }
  v31 = *(_QWORD *)(v29 + 24);
  v32 = sub_22E47EE80(&v200);
  v35 = sub_22EC0F9F4((_QWORD **)a1, (uint64_t)&v208, v31, v32, v33, v34);
  if (v35 < 0x10)
  {
    v36 = 0;
    goto LABEL_76;
  }
  v184 = v35;
  v40 = v200;
  for (i = v200; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_64;
      v42 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v42 <= 0x39)
        break;
LABEL_59:
      if (sub_22F115668(i))
        v40 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_209;
    }
    if (v42 == 24)
      goto LABEL_208;
    if (v42 == 26)
      break;
    if (((1 << v42) & 0x20000000200003CLL) == 0)
      goto LABEL_59;
LABEL_64:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_64;
LABEL_208:
  v40 = i;
LABEL_209:
  sub_22F115668(v40);
  if (*(_BYTE *)(v200 + 16) == 25)
    v152 = 0;
  else
    v152 = (unsigned __int16)(*(_QWORD *)(v200 + 16) >> 38);
  v153 = (uint64_t)(v201 + 4);
  v154 = v200 + 40;
  v51 = v184;
  if ((*(_BYTE *)(v29 + 23) & 4) != 0)
    v155 = sub_22E47E270(v29);
  else
    v155 = 0;
  if ((sub_22EC160C0(a1, v153, v152, v154, v155, (uint64_t)&v220, (uint64_t)v218, (uint64_t)&v214) & 1) != 0)
    goto LABEL_75;
LABEL_216:
  sub_22E4913B4(v29, (uint64_t)&v202);
  v199 = 0;
  v156 = v29;
  v157 = v29;
  while (2)
  {
    while (2)
    {
      if ((v157 & 0xF) != 0)
        goto LABEL_227;
      v158 = *(unsigned __int8 *)(*(_QWORD *)(v157 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v158 > 0x39)
      {
LABEL_222:
        if (sub_22F115668(v157))
          v156 = v157;
        v157 = sub_22F115B7C(v157);
        if (!v157)
          goto LABEL_229;
        continue;
      }
      break;
    }
    if (v158 == 24)
      break;
    if (v158 != 26)
    {
      if (((1 << v158) & 0x20000000200003CLL) != 0)
        goto LABEL_227;
      goto LABEL_222;
    }
    if ((*(_BYTE *)(v157 + 23) & 0x10) == 0)
    {
LABEL_227:
      v157 = sub_22F115B7C(v157);
      continue;
    }
    break;
  }
  v156 = v157;
LABEL_229:
  v159 = sub_22F115668(v156);
  if ((sub_22EC16AA4((uint64_t **)a1, v159, v204, (uint64_t)v206, &v199) & 1) != 0)
  {
    v36 = 0;
    goto LABEL_76;
  }
  if (v217)
  {
    sub_22F24FB88(&v214, v221);
    if (v214)
    {
      v160 = v205;
      if (v205)
      {
        if (*(_BYTE *)(v200 + 16) == 25)
        {
          if (!(_DWORD)v221)
            goto LABEL_237;
        }
        else
        {
          v180 = (unsigned __int16)(*(_QWORD *)(v200 + 16) >> 38);
          if (v180 == v221)
          {
            if (!(unsigned __int16)(*(_QWORD *)(v200 + 16) >> 38))
              goto LABEL_237;
            v181 = v214;
            while (*v160 == *v181)
            {
              ++v160;
              ++v181;
              if (!--v180)
                goto LABEL_237;
            }
          }
        }
      }
      v199 = 1;
LABEL_237:
      v205 = v214;
      goto LABEL_238;
    }
  }
  if (v205)
  {
    v199 = 1;
    v205 = 0;
  }
LABEL_238:
  if (*(_DWORD *)(*a1 + 11992) != -1)
  {
    v161 = v221;
    goto LABEL_248;
  }
  v161 = v221;
  if (v51 == *(_QWORD *)(v29 + 24)
    && (v162 = (unsigned __int16)(*(_QWORD *)(v29 + 16) >> 38), v162 == v221))
  {
    v163 = v200;
    if ((unsigned __int16)(*(_QWORD *)(v29 + 16) >> 38))
    {
      v164 = (_QWORD *)(v29 + 40);
      v165 = v220;
      v166 = 8 * v162;
      while (*v164 == *v165)
      {
        ++v164;
        ++v165;
        v166 -= 8;
        if (!v166)
          goto LABEL_245;
      }
      goto LABEL_248;
    }
LABEL_245:
    if (v199)
      goto LABEL_248;
LABEL_249:
    v167 = sub_22E8BB094((uint64_t)&v208, v163);
    v169 = 0;
    v170 = v201;
    *v168 = *v201;
    v168[1] = v170[1];
    v168[2] = v170[2];
    if (v200)
    {
      v171 = 0;
      if (*(_BYTE *)(v200 + 16) == 26)
      {
        v172 = *(_QWORD *)(v200 + 16);
        if ((v172 & 0x3C0000000000000) != 0)
        {
          v173 = (unsigned __int16)(v172 >> 38);
          if (*(_QWORD *)(v200 + 16) == 25)
            v173 = 0;
          v171 = *(_QWORD *)&v170[2 * v173 + 4];
          v169 = v171 & 0xFFFFFFFF00000000;
          v171 = v171;
        }
        else
        {
          v169 = 0;
          v171 = 0;
        }
      }
    }
    else
    {
      v171 = 0;
    }
    if (v167)
    {
      if (*(_BYTE *)(v167 + 16) == 26)
      {
        v174 = *(_QWORD *)(v167 + 16);
        if ((v174 & 0x3C0000000000000) != 0)
        {
          v175 = v171 | v169;
          if (*(_QWORD *)(v167 + 16) == 25)
            v176 = 0;
          else
            v176 = (unsigned __int16)(v174 >> 38);
          *(_QWORD *)&v168[2 * v176 + 4] = v175;
          v170 = v201;
        }
      }
    }
    v168[3] = v170[3];
    if (*(_BYTE *)(v167 + 16) != 25)
    {
      v177 = *(_QWORD *)(v167 + 16);
      if ((v177 & 0x3FFFC000000000) != 0)
      {
        v178 = 0;
        v179 = (unsigned __int16)(v177 >> 38);
        do
        {
          *(_QWORD *)&v168[2 * v178 + 4] = *((_QWORD *)v218[0] + v178);
          ++v178;
        }
        while (v179 != v178);
      }
    }
    v36 = v163;
  }
  else
  {
LABEL_248:
    v163 = sub_22EE80544((_QWORD *)*a1, v51, v220, v161, 0, 0, (uint64_t)&v202);
    v36 = 0;
    if (v163 >= 0x10)
      goto LABEL_249;
  }
LABEL_76:
  if (v214 != v216)
    free(v214);
  if (v218[0] != v219)
    free(v218[0]);
  if (v220 != v222)
    free(v220);
  if (v36 >= 0x10)
  {
    v53 = *(_QWORD *)(*a1 + 88);
    v54 = v209.i64[0] - v209.i64[1];
    v55 = v209.i32[0] - v209.i32[2];
    if (v209.i32[0] == v209.i32[2])
      v55 = sub_22F11598C(v36);
    v52 = (unint64_t *)sub_22E3CD3D4(v53 + 2032, v55 + 8, 3);
    *v52 = v36;
    memcpy(v52 + 1, (const void *)(v208 + v209.i64[1]), v54);
  }
  else
  {
    v52 = 0;
  }
  if (v206[0] != v207)
    free(v206[0]);
  if ((_QWORD *)v208 != v210 && v208)
    MEMORY[0x2348A0E84]();
  if (v36 < 0x10)
  {
    v56 = 1;
    goto LABEL_199;
  }
  v57 = *(_QWORD *)(sub_22F3C6220(v2) + 56);
  if ((v57 & 4) != 0 && (v58 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFFFF8) + 40)) != 0)
    v190 = sub_22EBCEF90(a1, v58);
  else
    v190 = 0;
  v59 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
  if (v59 > 3 || v59 == 2)
    goto LABEL_122;
  v61 = *(_QWORD *)(*a1 + 216);
  v62 = *(_WORD *)(v61 + 8) & 0x7F;
  if (v62 == 16 || v62 == 83)
    goto LABEL_123;
  v63 = -40;
  if ((*(_WORD *)(v61 + 8) & 0x7Fu) > 0x46)
  {
    if (v62 == 71)
    {
      v63 = -56;
    }
    else if (v62 != 81)
    {
LABEL_114:
      if (v62 - 52 < 6)
      {
        v63 = -72;
      }
      else
      {
        v63 = -48;
        if (v62 - 33 < 5)
          v63 = -64;
      }
    }
  }
  else
  {
    if (v62 > 0x18)
      goto LABEL_113;
    if (((1 << v62) & 0x1066) == 0)
    {
      if (v62 == 24)
      {
        v63 = -48;
      }
      else
      {
LABEL_113:
        if (v62 != 70)
          goto LABEL_114;
        v63 = -64;
      }
    }
  }
  v64 = *(_QWORD *)(v61 + v63 + 16);
  v65 = (_QWORD *)(v64 & 0xFFFFFFFFFFFFFFF8);
  if ((v64 & 4) != 0)
    v65 = (_QWORD *)*v65;
  if ((sub_22EFC7ADC((unint64_t)v65) & 1) == 0)
LABEL_123:
    v66 = 2;
  else
LABEL_122:
    v66 = 0;
  v67 = (void *)sub_22F3C61E8(v2);
  v68 = (_QWORD *)sub_22F3365E8(*a1, *(_QWORD *)(v2 + 16), (uint64_t)v52, v66, (*(_DWORD *)v2 >> 18) & 3);
  v202 = v67;
  sub_22F25E108(a1 + 1, &v202)[1] = v68;
  v69 = *a1;
  v70 = *(_QWORD *)(v2 + 16);
  v71 = sub_22F3C6220(v2);
  v72 = (unint64_t)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v71 + 16))(v71) >> 32;
  if (*(_BYTE *)(*v52 + 16) == 25)
    v73 = 0;
  else
    v73 = (unsigned __int16)(*(_QWORD *)(*v52 + 16) >> 38);
  v74 = sub_22F3C6220(v2);
  v75 = sub_22F3366E8(v69, (uint64_t)v68, v70, v52, v72, v52 + 3, v73, *(_DWORD *)(v74 + 80) >> 30, v190 & 0xFFFFFFFFFFFFFFFELL);
  v76 = v192;
  *(_QWORD *)(v192 + 1488) = v75;
  sub_22F3C6220(v2);
  v202 = (void *)sub_22F3C6220(v2);
  v191 = a1 + 1;
  sub_22F25E108(a1 + 1, &v202)[1] = v75;
  v77 = *a1;
  v193[0] = 0;
  v194 = 0;
  v189 = v75;
  sub_22EC52964(v77, v68, v75, v193);
  if (v194)
    v194 = 0;
  v78 = *a1;
  v79 = v75;
  v80 = v75 + 72;
  if (!v75)
    v80 = 0;
  v188 = *(_QWORD *)(v78 + 216);
  v81 = *(_QWORD *)(v78 + 3200);
  *(_QWORD *)(v78 + 3200) = 0;
  v183 = *(_QWORD *)(v78 + 10288);
  v185 = v81;
  v186 = *(_DWORD *)(v78 + 1944);
  v187 = *(_DWORD *)(v78 + 2192);
  *(_QWORD *)(v78 + 216) = v80;
  *(_DWORD *)(v78 + 1944) = *(_DWORD *)(v78 + 1904);
  *(_DWORD *)(v78 + 2192) = *(_DWORD *)(v78 + 1960);
  v82 = *(_QWORD *)(v2 + 16);
  v83 = (*(_DWORD *)v2 >> 18) & 3;
  v84 = *(_DWORD *)(v2 + 24);
  v85 = (*(_DWORD *)v2 >> 20) & 1;
  v86 = (*(_DWORD *)v2 >> 21) & 1;
  v87 = sub_22F3C66E8(v2);
  sub_22EC52B9C(v78, v192, v79, v82, v83, v84, v85, v86, v87);
  v88 = sub_22F3C64D0(v2);
  v89 = sub_22F3C650C(v2);
  if (v88 == v89)
  {
    *(_DWORD *)(v192 + 1508) = *(_DWORD *)(v192 + 1272);
    v90 = *a1;
    LODWORD(v220) = 6;
    v202 = 0;
    LODWORD(v218[0]) = 3;
    v208 = *(unsigned int *)(v90 + 1704);
    sub_22EB4DDB8(v90 + 3688, (int *)&v220, (int *)&v208, (__int16 *)(v90 + 1693), (uint64_t *)&v202, (int *)v218);
    v91 = *(unsigned int *)(v90 + 3696);
    v92 = v91 - 2;
    v93 = *(_QWORD *)(v90 + 3688);
    v94 = *(_DWORD *)(v93 + 576 * (v91 - 2));
    if (v94 == 5)
    {
      *(_BYTE *)(v93 + 576 * v91 - 4) = *(_BYTE *)(v93 + 576 * v92 + 572);
      v96 = 1;
      v95 = v188;
    }
    else
    {
      v95 = v188;
      if (v94 == 2)
      {
        *(_BYTE *)(v93 + 576 * v91 - 4) = 1;
        v96 = *(_BYTE *)(v93 + 576 * v92 + 573) != 0;
      }
      else
      {
        v96 = 0;
        *(_BYTE *)(v93 + 576 * v91 - 4) = 0;
      }
    }
    v97 = v93 + 576 * v91;
    *(_BYTE *)(v97 - 3) = v96;
    *(_WORD *)(v90 + 1693) = 0;
    if (*(_DWORD *)(v90 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v90 + 1776), (llvm::SmallPtrSetImplBase *)(v97 - 560));
      sub_22EAEAE08(v90 + 1840, (uint64_t *)(v97 - 496));
    }
  }
  else
  {
    v98 = v89;
    v99 = 0;
    do
    {
      v100 = *(_QWORD *)v88;
      if ((*(_QWORD *)v88 & 1) != 0)
        break;
      if ((v100 & 0xFFFFFFFFFFFFFFFCLL) == 4)
      {
        sub_22EBBBBEC(*a1, *(_DWORD *)(v88 + 8), 1, 1, 0, (v100 >> 1) & 1);
      }
      else if (v100 >= 4)
      {
        v101 = v99;
        if (sub_22F3C6428(v2, (_QWORD *)v88))
        {
          v108 = sub_22F3C64D0(v2);
          v109 = (char *)v211 + 88 * ((v88 - v108) >> 4);
          v110 = *(_QWORD *)v88 & 0xFFFFFFFFFFFFFFF8;
          v202 = v204;
          v203 = 0x400000000;
          v111 = *((unsigned int *)v109 + 4);
          if ((_DWORD)v111)
          {
            v115 = (_QWORD *)*((_QWORD *)v109 + 1);
            v182 = &v115[2 * v111];
            while ((*v115 & 1) == 0)
            {
              v116 = v115[1];
              if (v116 < 0x10)
                break;
              v117 = *(_QWORD *)(v110 + 40);
              v118 = (v117 & 7) != 0 ? 0 : v117 & 0xFFFFFFFFFFFFFFF8;
              v119 = sub_22EC5313C(*a1, *(_DWORD *)(v110 + 24), v116, *(_DWORD *)v109, v118, (*(_BYTE *)(v110 + 96) >> 5) & 3, *v115 & 0xFFFFFFFFFFFFFFFELL);
              if (!v119)
                break;
              v120 = v119;
              v121 = v203;
              if (v203 >= (unint64_t)HIDWORD(v203))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v121 = v203;
              }
              *((_QWORD *)v202 + v121) = v120;
              LODWORD(v203) = v203 + 1;
              sub_22F336D2C(*a1, v192, v120);
              v115 += 2;
              if (v115 == v182)
                goto LABEL_163;
            }
LABEL_188:
            if (v202 != v204)
              free(v202);
            *(_DWORD *)(v192 + 1508) = *(_DWORD *)(v192 + 1272);
            v140 = *a1;
            LODWORD(v220) = 6;
            v202 = 0;
            LODWORD(v218[0]) = 3;
            v208 = *(unsigned int *)(v140 + 1704);
            sub_22EB4DDB8(v140 + 3688, (int *)&v220, (int *)&v208, (__int16 *)(v140 + 1693), (uint64_t *)&v202, (int *)v218);
            v141 = *(unsigned int *)(v140 + 3696);
            v142 = v141 - 2;
            v143 = *(_QWORD *)(v140 + 3688);
            v144 = *(_DWORD *)(v143 + 576 * (v141 - 2));
            v95 = v188;
            if (v144 == 5)
            {
              *(_BYTE *)(v143 + 576 * v141 - 4) = *(_BYTE *)(v143 + 576 * v142 + 572);
              v145 = 1;
            }
            else if (v144 == 2)
            {
              *(_BYTE *)(v143 + 576 * v141 - 4) = 1;
              v145 = *(_BYTE *)(v143 + 576 * v142 + 573) != 0;
            }
            else
            {
              v145 = 0;
              *(_BYTE *)(v143 + 576 * v141 - 4) = 0;
            }
            v146 = v143 + 576 * v141;
            *(_BYTE *)(v146 - 3) = v145;
            *(_WORD *)(v140 + 1693) = 0;
            if (*(_DWORD *)(v140 + 1848))
            {
              llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v140 + 1776), (llvm::SmallPtrSetImplBase *)(v146 - 560));
              sub_22EAEAE08(v140 + 1840, (uint64_t *)(v146 - 496));
            }
            goto LABEL_195;
          }
LABEL_163:
          if ((v101 & 1) != 0)
            goto LABEL_188;
          v112 = a1;
          v113 = v2;
          v208 = v110;
          v114 = *(_QWORD *)v202;
          sub_22F25E108(v191, &v208)[1] = v114;
          if (v202 != v204)
            free(v202);
          v99 = 0;
          v2 = v113;
          a1 = v112;
          v76 = v192;
        }
        else
        {
          v102 = *(_QWORD *)v88;
          if ((*(_QWORD *)v88 & 2) != 0)
            v103 = 1;
          else
            v103 = 2;
          if ((*(_QWORD *)v88 & 0xFFFFFFFFFFFFFFFCLL) == 4)
            v104 = 2;
          else
            v104 = v103;
          if (v102 < 4)
            v104 = 2;
          if ((v102 & 1) != 0)
            v105 = 0;
          else
            v105 = v104;
          v106 = *(_DWORD *)(v88 + 12);
          v107 = v102 & 0xFFFFFFFFFFFFFFF8;
          v208 = v102 & 0xFFFFFFFFFFFFFFF8;
          v202 = 0;
          if (sub_22E793870(v191, &v208, &v202)
            && v202 != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
          {
            v107 = *((_QWORD *)v202 + 1);
          }
          if (v107 && (*(_BYTE *)(v107 + 28) & 0x80) == 0)
          {
            sub_22F32FC30(*a1, v107, *(_DWORD *)(v88 + 8), v105, v106);
            v99 = v101;
          }
          else
          {
            v99 = 1;
          }
        }
      }
      v88 += 16;
    }
    while (v88 != v98);
    *(_DWORD *)(v76 + 1508) = *(_DWORD *)(v76 + 1272);
    v122 = *a1;
    LODWORD(v220) = 6;
    v202 = 0;
    LODWORD(v218[0]) = 3;
    v208 = *(unsigned int *)(v122 + 1704);
    sub_22EB4DDB8(v122 + 3688, (int *)&v220, (int *)&v208, (__int16 *)(v122 + 1693), (uint64_t *)&v202, (int *)v218);
    v123 = *(unsigned int *)(v122 + 3696);
    v124 = v123 - 2;
    v125 = *(_QWORD *)(v122 + 3688);
    v126 = *(_DWORD *)(v125 + 576 * (v123 - 2));
    if (v126 == 5)
    {
      *(_BYTE *)(v125 + 576 * v123 - 4) = *(_BYTE *)(v125 + 576 * v124 + 572);
      v127 = 1;
      v95 = v188;
    }
    else
    {
      v95 = v188;
      if (v126 == 2)
      {
        *(_BYTE *)(v125 + 576 * v123 - 4) = 1;
        v127 = *(_BYTE *)(v125 + 576 * v124 + 573) != 0;
      }
      else
      {
        v127 = 0;
        *(_BYTE *)(v125 + 576 * v123 - 4) = 0;
      }
    }
    v128 = v125 + 576 * v123;
    *(_BYTE *)(v128 - 3) = v127;
    *(_WORD *)(v122 + 1693) = 0;
    if (!*(_DWORD *)(v122 + 1848))
    {
      if ((v99 & 1) == 0)
        goto LABEL_184;
      goto LABEL_195;
    }
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v122 + 1776), (llvm::SmallPtrSetImplBase *)(v128 - 560));
    sub_22EAEAE08(v122 + 1840, (uint64_t *)(v128 - 496));
    if ((v99 & 1) != 0)
    {
LABEL_195:
      LOBYTE(v196) = 0;
      goto LABEL_196;
    }
  }
LABEL_184:
  sub_22F3C638C(v2);
  v134 = sub_22EC17788(a1, *(__n128 **)(v2 + 8 * *(unsigned __int16 *)(v2 + 4) + 32), 0, v129, v130, v131, v132, v133);
  LOBYTE(v196) = 0;
  if ((v134 & 1) != 0)
  {
LABEL_196:
    if (v95)
    {
      *(_QWORD *)(v78 + 216) = v95;
      *(_QWORD *)(v78 + 3200) = v185;
      *(_QWORD *)(v78 + 10288) = v183;
      *(_DWORD *)(v78 + 1944) = v186;
      *(_DWORD *)(v78 + 2192) = v187;
    }
    v147 = *(unsigned int *)(v2 + 16);
    v56 = 1;
    sub_22F336DD4(*a1, v147, 0, 1);
  }
  else
  {
    sub_22F2F3A38((uint64_t)&v202, v192);
    v135 = v134 & 0xFFFFFFFFFFFFFFFELL;
    sub_22EA30A38(*a1, v189, v135, 1);
    if (v95)
    {
      *(_QWORD *)(v78 + 216) = v95;
      *(_QWORD *)(v78 + 3200) = v185;
      *(_QWORD *)(v78 + 10288) = v183;
      *(_DWORD *)(v78 + 1944) = v186;
      *(_DWORD *)(v78 + 2192) = v187;
    }
    v136 = *a1;
    v137 = *(unsigned int *)(v2 + 16);
    sub_22F0D60E4(v135);
    sub_22EC54548(v136, v137, v138, (uint64_t)&v202);
    v56 = v139;
    sub_22F2F43D0((uint64_t)&v202);
  }
LABEL_199:
  sub_22F2F446C((uint64_t)&v195);
  v148 = (char *)v211;
  if ((_DWORD)v212)
  {
    v149 = 88 * v212;
    do
    {
      v150 = *(char **)&v148[v149 - 80];
      if (&v148[v149 - 64] != v150)
        free(v150);
      v149 -= 88;
    }
    while (v149);
    v148 = (char *)v211;
  }
  if (v148 != v213)
    free(v148);
  return v56;
}

uint64_t sub_22EC0AF54(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    v5 = sub_22EC140CC((uint64_t *)a1, v4, *(void **)(a2 + 48), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = *(_QWORD *)(a2 + 24);
  v13 = v9;
  v14 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v13, &v14)
    && v14 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v9 = *(_QWORD *)(v14 + 8);
  }
  if (v9)
  {
    v10 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
    if ((v10 & 1) == 0)
    {
      v12 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 56, 3);
      return sub_22F2F44CC(v12, v10 & 0xFFFFFFFFFFFFFFFELL, v9, *(_BYTE *)(a2 + 36), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16872), 1, v7, v8, *(_DWORD *)(a2 + 32));
    }
  }
  return 1;
}

uint64_t sub_22EC0B060(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  unint64_t v10;

  v2 = a2;
  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBCEF90(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a1;
  v7 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(unsigned __int8 **)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    v8 = *(_DWORD *)(v2 + 32);
    v10 = v5 & 0xFFFFFFFFFFFFFFFELL;
    return sub_22EB296C0(v6, 0, v7, 0, (uint64_t *)&v10, 1, v8);
  }
  return v2;
}

uint64_t sub_22EC0B114(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = (v4 - 1);
    if ((_DWORD)v5)
    {
      v6 = (const void **)(a2 + 24);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        sub_22E3BA850(a1 + 32, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
  v9 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  v10 = *(_DWORD *)(a2 + 4);
  if (v10 < 0)
  {
    v11 = (v10 & 0x7FFFFFFFu) - 1;
    if ((_DWORD)v11)
    {
      v12 = (void **)(a2 + 24);
      v13 = 8 * v11;
      do
      {
        v14 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v12);
        v15 = *(_QWORD *)(a1 + 40);
        if (v15 == *(_QWORD *)(a1 + 32))
          v16 = 52;
        else
          v16 = 48;
        if (v14 != (void **)(v15 + 8 * *(unsigned int *)(a1 + v16)))
        {
          *v14 = (void *)-2;
          ++*(_DWORD *)(a1 + 56);
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
  }
  return v9;
}

uint64_t sub_22EC0B200(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v3;

  v2 = a2;
  v3 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 4) != 0)
    v3 = *(_QWORD *)(v3 + 40);
  return sub_22EBCEF90(a1, v3);
}

uint64_t sub_22EC0B214(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBCEF90(a1, *(_QWORD *)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EBCEF90(a1, *(_QWORD *)(v2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1
    || *(_QWORD *)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 32) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2AC58(*a1, v7, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 4));
  }
  return v2;
}

uint64_t sub_22EC0B2D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  void *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned __int32 v28;
  unsigned int v29;
  unint64_t v30;
  void **v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  __int128 v46;
  void *v47[2];
  void *v48[2];
  _BYTE v49[129];
  uint64_t v50;
  void *v51[2];
  _OWORD v52[4];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  __n128 v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  __int16 v61;
  char v62;
  uint64_t v63;

  v2 = a2;
  v63 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x80000) == 0 || (v6 = *(_QWORD *)(v2 + 48)) == 0)
  {
    v9 = 0;
    v10 = 0;
    if ((v5 & 0x100000) != 0)
      goto LABEL_6;
LABEL_8:
    v11 = 0;
    goto LABEL_9;
  }
  v7 = sub_22EC140CC(a1, v6, *(void **)(v2 + 56), 0, 0);
  if (!v7)
    return 1;
  v9 = v7;
  v10 = v8;
  v5 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x100000) == 0)
    goto LABEL_8;
LABEL_6:
  v11 = *(_DWORD *)(v2 + 24 * ((v5 >> 19) & 1) + 56);
LABEL_9:
  v12 = *(_QWORD **)(v2 + 24);
  v51[0] = v12;
  v48[0] = 0;
  if (sub_22E793870(a1 + 1, v51, v48) && v48[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
    v12 = (_QWORD *)*((_QWORD *)v48[0] + 1);
  if (!v12)
    return 1;
  if ((*(_BYTE *)(v2 + 2) & 8) != 0)
  {
    v14 = *(_QWORD *)(v2 + 64);
    v13 = *(void **)(v2 + 24);
  }
  else
  {
    v13 = *(void **)(v2 + 24);
    v14 = (unint64_t)v13;
  }
  v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
  v16 = (uint64_t)v12;
  if (v13 != v15)
  {
    v16 = (uint64_t)v15;
    v51[0] = v15;
    v48[0] = 0;
    if (sub_22E793870(a1 + 1, v51, v48) && v48[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v16 = *((_QWORD *)v48[0] + 1);
    if (!v16)
      return 1;
  }
  v17 = *a1;
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    v18 = *(unsigned int *)v2;
    if (*(_QWORD *)(v2 + 16) == (v4 & 0xFFFFFFFFFFFFFFFELL))
    {
      if ((v18 & 0x80000) != 0)
      {
        v40 = *(_QWORD *)(v2 + 48);
        v41 = *(_QWORD *)(v2 + 56);
      }
      else
      {
        v40 = 0;
        v41 = 0;
      }
      if (v9 == v40 && v10 == v41 && v12 == *(_QWORD **)(v2 + 24))
      {
        v42 = (v18 & 0x80000) != 0 ? *(_QWORD *)(v2 + 64) : (unint64_t)v12;
        if (v16 == (v42 & 0xFFFFFFFFFFFFFFFCLL)
          && ((v18 & 0x100000) == 0 || !*(_DWORD *)(v2 + 24 * ((v18 >> 19) & 1) + 48)))
        {
          sub_22EB52238(*a1, v2);
          return v2;
        }
      }
    }
  }
  else
  {
    LODWORD(v18) = *(_DWORD *)v2;
  }
  v48[0] = v49;
  v48[1] = (void *)0x800000000;
  v50 = 0;
  if ((v18 & 0x100000) != 0)
  {
    v20 = v2 + 24 * ((v18 >> 19) & 1);
    v23 = *(_DWORD *)(v20 + 48);
    v21 = v20 + 48;
    v22 = v23;
    if (v23)
    {
      LODWORD(v50) = v22;
      HIDWORD(v50) = *(_DWORD *)(v21 + 4);
      v24 = v21 + 16 * ((v18 >> 20) & 1);
      if ((sub_22EC21310((uint64_t)a1, v24, v24 + 32 * *(unsigned int *)(v21 + 12)) & 1) != 0)
      {
LABEL_34:
        v2 = 1;
        goto LABEL_62;
      }
      v17 = *a1;
    }
  }
  sub_22F0D4E74(*(_QWORD *)(v2 + 16));
  v26 = sub_22F141A3C(HIDWORD(v25), 0, *(_QWORD **)(v17 + 112), *(_DWORD **)(v17 + 72));
  v27 = *(_QWORD *)(v2 + 32);
  v28 = *(_DWORD *)(v2 + 40);
  v44.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 40);
  v44.n128_u32[2] = v28;
  v45 = v27;
  if (v44.n128_u64[0])
  {
    sub_22EC1C534((__n128 *)v51, a1, &v44);
    v44 = *(__n128 *)v51;
    v45 = *(_QWORD *)&v52[0];
    if (!v51[0])
      goto LABEL_34;
  }
  v29 = v11;
  v30 = *(unsigned int *)v2;
  if ((v30 & 0x100000) != 0)
  {
    if (*(_DWORD *)(v2 + 24 * ((v30 >> 19) & 1) + 48))
      v31 = v48;
    else
      v31 = 0;
  }
  else
  {
    v31 = 0;
  }
  v32 = sub_22EC2624C(*a1, (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), (v30 >> 18) & 1);
  if (v12[5])
  {
    v46 = 0u;
    *(_OWORD *)v47 = 0u;
    sub_22E8ACE30((uint64_t)&v46, v9, v10);
    v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
    v34 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if ((v30 & 0x40000) != 0
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
    {
      v2 = 1;
    }
    else
    {
      v35 = (_QWORD *)*a1;
      v51[0] = 0;
      v51[1] = (char *)v52 + 8;
      *(_QWORD *)&v52[0] = 0x800000000;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v56 = v35;
      v57 = v44;
      v58 = v45;
      v59 = xmmword_22F463A40;
      v60 = 16842752;
      v61 = 0;
      v62 = 0;
      sub_22EC56024((uint64_t)v51);
      v36 = *(unsigned int *)(v16 + 28);
      v37 = v52[0];
      if (LODWORD(v52[0]) >= DWORD1(v52[0]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v37 = v52[0];
      }
      *((_QWORD *)v51[1] + v37) = (v36 >> 13) & 3 | v16;
      ++LODWORD(v52[0]);
      LODWORD(v51[0]) = 2;
      sub_22EC561E4((uint64_t)v51);
      v2 = sub_22EC24AB8(*a1, v33, v34, v26, (v30 >> 18) & 1, (uint64_t *)&v46, v29, 0, (uint64_t)v51, (uint64_t)v31, 0, 0, 0);
      if (HIBYTE(v60))
      {
        if (LODWORD(v51[0]) == 5)
        {
          sub_22EC64D18(v56, (uint64_t)v51);
        }
        else if (v54 && (*(_DWORD *)(v56[9] + 52) & 0x400000) != 0)
        {
          sub_22E90B5FC((unint64_t)v56, (uint64_t)v51);
        }
      }
      if (v53)
      {
        v43 = sub_22EC6CBD0(v53);
        MEMORY[0x2348A0E9C](v43, 0x10E0C409F09D3C3);
      }
      if (v51[1] != (char *)v52 + 8)
        free(v51[1]);
    }
    if (!HIDWORD(v47[1]))
      goto LABEL_62;
    v39 = v47[0];
  }
  else
  {
    v38 = (unint64_t)sub_22EB24398(*a1, v32 & 0xFFFFFFFFFFFFFFFELL, v9, v16, (uint64_t)v12);
    if ((v38 & 1) != 0)
    {
      v2 = 1;
      goto LABEL_62;
    }
    *(_OWORD *)v51 = 0u;
    v52[0] = 0u;
    v2 = sub_22EC25974(*a1, v38 & 0xFFFFFFFFFFFFFFFELL, (v30 >> 18) & 1, v26, v51, v12, ((unint64_t)*(unsigned int *)(v16 + 28) >> 13) & 3 | v16, &v44);
    if (!HIDWORD(v52[0]))
      goto LABEL_62;
    v39 = *(void **)&v52[0];
  }
  free(v39);
LABEL_62:
  if (v48[0] != v49)
    free(v48[0]);
  return v2;
}

uint64_t sub_22EC0B89C(uint64_t *a1, uint64_t a2)
{
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  _BYTE v23[32];
  void *v24[2];
  _BYTE v25[32];
  void *v26;
  uint64_t v27;
  _QWORD v28[6];

  v28[4] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 32) == 1)
    return sub_22EBCEF90(a1, **(_QWORD **)(a2 + 40));
  v5 = sub_22EC0F7CC((_QWORD **)a1, *(uint64_t **)(a2 + 16));
  if (v5)
  {
    v6 = v5;
    v20 = 0;
    v24[0] = v25;
    v24[1] = (void *)0x400000000;
    v7 = 1;
    if ((sub_22EC16FD8(a1, *(unsigned __int8 ***)(a2 + 40), *(_DWORD *)(a2 + 32), 1, (uint64_t)v24, &v20) & 1) != 0)
      goto LABEL_29;
    if (*(_DWORD *)(*a1 + 11992) == -1 && v6 == *(unint64_t **)(a2 + 16) && !v20)
    {
      v7 = a2;
LABEL_29:
      if (v24[0] != v25)
        free(v24[0]);
      return v7;
    }
    v21 = v23;
    v22 = 0x400000000;
    v8 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v8)
    {
      v9 = 0;
      LODWORD(v10) = 0;
      v11 = 8 * v8;
      do
      {
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + v9) + 8);
        if (v10 >= HIDWORD(v22))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          LODWORD(v10) = v22;
        }
        *((_QWORD *)v21 + v10) = v12;
        v10 = (v22 + 1);
        LODWORD(v22) = v22 + 1;
        v9 += 8;
      }
      while (v11 != v9);
      v13 = (uint64_t *)v21;
      v14 = (unsigned __int8 **)v24[0];
      v15 = *(_QWORD *)(a2 + 24);
      v26 = v28;
      v27 = 0x400000000;
      if ((_DWORD)v10)
      {
        v19 = v15;
        v7 = 1;
        while (1)
        {
          v16 = *v13++;
          v17 = sub_22ECFABE8((uint64_t *)*a1, *v14, v16, 1, 0);
          if ((v17 & 1) != 0)
            goto LABEL_25;
          v18 = v27;
          if (v27 >= (unint64_t)HIDWORD(v27))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v18 = v27;
          }
          *((_QWORD *)v26 + v18) = v17 & 0xFFFFFFFFFFFFFFFELL;
          LODWORD(v27) = v27 + 1;
          ++v14;
          if (!--v10)
          {
            v15 = v19;
            break;
          }
        }
      }
    }
    else
    {
      v15 = *(_QWORD *)(a2 + 24);
      v26 = v28;
      v27 = 0x400000000;
    }
    v7 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 48, 3);
    sub_22F0614DC(v7, *(_QWORD *)(*a1 + 88), v6, (uint64_t *)v26, v27, v15);
LABEL_25:
    if (v26 != v28)
      free(v26);
    if (v21 != v23)
      free(v21);
    goto LABEL_29;
  }
  return 1;
}

uint64_t sub_22EC0BB94(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  BOOL v15;
  unsigned int v16;

  v2 = a2;
  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    v6 = sub_22EBCEF90(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v2 + 32);
  if (v7)
  {
    v8 = sub_22EBCEF90(a1, v7);
    if ((v8 & 1) != 0)
      return 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_QWORD *)(v2 + 40);
  if (v9)
  {
    v10 = sub_22EBCEF90(a1, v9);
    if ((v10 & 1) != 0)
      return 1;
  }
  else
  {
    v10 = 0;
  }
  v12 = *a1;
  v13 = *(_QWORD *)(v2 + 16);
  v14 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v15 = *(_DWORD *)(v12 + 11992) == -1 && v13 == (_QWORD)v14;
  if (v15 && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL) && *(_QWORD *)(v2 + 32) == (v8 & 0xFFFFFFFFFFFFFFFELL))
    return v2;
  sub_22F0D60E4(v13);
  return sub_22EB29E14((_QWORD *)v12, v14, v16, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 52), v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 56));
}

uint64_t sub_22EC0BCB4(_QWORD **a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a2 + 32);
  v5 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 24)));
  if ((v5 & 1) == 0)
  {
    v14 = 0;
    v6 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v6)
    {
      LOBYTE(v7) = 0;
      v8 = &v4[v6];
      v9 = v4;
      do
      {
        while (1)
        {
          v10 = sub_22EBCEF90(a1, *v9);
          if ((v10 & 1) == 0)
            break;
          ++v9;
          v7 = 1;
          if (v9 == v8)
            return v7;
        }
        v11 = v14;
        if (v14 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v11 = v14;
        }
        v15[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
        v12 = ++v14;
        ++v9;
      }
      while (v9 != v8);
      if ((v7 & 1) != 0)
        return 1;
      LODWORD(v6) = *(_DWORD *)(a2 + 24);
    }
    else
    {
      v12 = 0;
    }
    return sub_22EB2BE20(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v15, v12, &v4[(v6 + 1)], v6);
  }
  return 1;
}

uint64_t sub_22EC0BE40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  int v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60[4];
  void *v61;
  uint64_t v62;
  _QWORD v63[34];

  v2 = a2;
  v63[32] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a2 + 28);
  memset(v60, 0, sizeof(v60));
  v61 = v63;
  v62 = 0x400000000;
  sub_22E8BB974((uint64_t)&v61, v4, v60);
  v59 = a1;
  v5 = *(_QWORD **)a1;
  v6 = *(_DWORD *)(*(_QWORD *)a1 + 11992);
  v7 = v6 == -1;
  v8 = v6 != -1;
  if ((_DWORD)v4)
  {
    v52 = v8;
    v51 = v4;
    v9 = 0;
    v10 = 0;
    v11 = v2 + 32;
    v53 = v2;
    v54 = v4 << 6;
    v12 = 2;
    v58 = v2 + 32;
    while (1)
    {
      v13 = *(_QWORD *)v11;
      v14 = *(_QWORD *)(*(_QWORD *)v11 + 40);
      v15 = (v14 & 7) != 0 ? 0 : v14 & 0xFFFFFFFFFFFFFFF8;
      v16 = (char *)v61 + v9;
      *(_QWORD *)v16 = v15;
      *((_DWORD *)v16 + 2) = *(_DWORD *)(v13 + 24);
      v17 = *(_DWORD *)(v13 + 24);
      v18 = *(_QWORD *)(v13 + 56);
      if ((v18 & 4) == 0)
        break;
      v41 = v18 & 0xFFFFFFFFFFFFFFF8;
      if (*(_DWORD *)(v41 + 16))
        v42 = ***(_DWORD ***)(v41 + 24);
      else
        v42 = *(_DWORD *)(v13 + 64);
      if (v17 != v42)
      {
        v19 = *(uint64_t **)(v41 + 32);
LABEL_9:
        v20 = sub_22EC0F7CC((_QWORD **)v59, v19);
        v21 = sub_22EC14078(v59, *(_QWORD *)(v13 + 48));
        v22 = sub_22EE7D030(*(_QWORD *)v59, v21, (uint64_t)v20);
        *(_QWORD *)((char *)v61 + v9 + 16) = v22;
      }
LABEL_10:
      v23 = v58 + 8 * *(unsigned int *)(v2 + 28);
      v24 = v12 - 2;
      v56 = *(_QWORD *)(v23 + 8 * v24);
      v57 = v12 - 1;
      v25 = *(_QWORD *)(v23 + 8 * v57);
      v26 = *(_QWORD *)(v23 + 8 * v12);
      v27 = sub_22EBCEF90(v59, v56);
      v55 = v25;
      v28 = sub_22EBCEF90(v59, v25);
      v29 = v26;
      v30 = sub_22EBCEF90(v59, v26);
      if ((v10 & 1) != 0)
        goto LABEL_19;
      v31 = *(_QWORD *)(v13 + 56);
      v32 = v31 & 0xFFFFFFFFFFFFFFF8;
      v33 = v31 & 0xFFFFFFFFFFFFFFF8;
      if ((v31 & 4) != 0)
        v33 = *(_QWORD *)(v32 + 32);
      if (v33)
      {
        v10 = 1;
        if (*(_QWORD *)((char *)v61 + v9 + 16) < 0x10uLL || (v27 & 1) != 0)
          goto LABEL_20;
      }
      else if ((v27 & 1) != 0)
      {
        goto LABEL_19;
      }
      if (((v28 | v30) & 1) != 0)
      {
LABEL_19:
        v10 = 1;
LABEL_20:
        v2 = v53;
        goto LABEL_21;
      }
      v34 = (char *)v61;
      v35 = (char *)v61 + v9;
      *((_QWORD *)v35 + 3) = v27 & 0xFFFFFFFFFFFFFFFELL;
      *((_QWORD *)v35 + 4) = v28 & 0xFFFFFFFFFFFFFFFELL;
      *((_QWORD *)v35 + 5) = v30 & 0xFFFFFFFFFFFFFFFELL;
      v2 = v53;
      *((_DWORD *)v35 + 12) = *(_DWORD *)(v58
                                        + 8 * *(unsigned int *)(v53 + 28)
                                        + 8 * (3 * *(_DWORD *)(v53 + 28))
                                        + 4 * v24);
      *((_DWORD *)v35 + 13) = *(_DWORD *)(v58
                                        + 8 * *(unsigned int *)(v53 + 28)
                                        + 8 * (3 * *(_DWORD *)(v53 + 28))
                                        + 4 * v57);
      *((_DWORD *)v35 + 14) = *(_DWORD *)(v58
                                        + 8 * *(unsigned int *)(v53 + 28)
                                        + 8 * (3 * *(_DWORD *)(v53 + 28))
                                        + 4 * v12);
      if ((v52 & 1) != 0)
      {
        v10 = 0;
        v36 = 1;
LABEL_39:
        v52 = v36;
        goto LABEL_21;
      }
      if ((v31 & 4) != 0)
        v32 = *(_QWORD *)(v32 + 32);
      if (v32)
      {
        v37 = *(_QWORD *)&v34[v9 + 16];
        if (v37 >= 0x10)
          v38 = *(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0);
        else
          v38 = 0;
        v39 = *(_QWORD *)(v13 + 48);
        if (v39 >= 0x10)
          v40 = *(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0);
        else
          v40 = 0;
        v10 = 0;
        v52 = 1;
        if (v38 != v40)
          goto LABEL_21;
      }
      else
      {
        v10 = 0;
        v52 = 1;
      }
      if (v56 == (v27 & 0xFFFFFFFFFFFFFFFELL) && v55 == (v28 & 0xFFFFFFFFFFFFFFFELL))
      {
        v10 = 0;
        v36 = v29 != (v30 & 0xFFFFFFFFFFFFFFFELL);
        goto LABEL_39;
      }
LABEL_21:
      v11 += 8;
      v9 += 64;
      v12 += 3;
      if (v54 == v9)
      {
        if ((v10 & 1) != 0)
        {
          v43 = 1;
          goto LABEL_58;
        }
        v4 = v51;
        if ((v52 & 1) != 0)
        {
          v5 = *(_QWORD **)v59;
          goto LABEL_52;
        }
LABEL_57:
        v43 = v2;
        goto LABEL_58;
      }
    }
    if (v17 == *(_DWORD *)(v13 + 64))
      goto LABEL_10;
    v19 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_9;
  }
  if (v7)
    goto LABEL_57;
LABEL_52:
  v44 = sub_22EB2C3A8(v5, 0, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), *(_DWORD *)(v2 + 24), (uint64_t)v61, v62);
  v43 = v44;
  if (v44 >= 2 && (_DWORD)v4)
  {
    v45 = (uint64_t *)(v2 + 32);
    v46 = (uint64_t *)((v44 & 0xFFFFFFFFFFFFFFFELL) + 32);
    do
    {
      v48 = *v45++;
      v47 = v48;
      v49 = *v46++;
      *(_QWORD *)&v60[0] = v47;
      sub_22F25E108((uint64_t *)(v59 + 8), v60)[1] = v49;
      --v4;
    }
    while (v4);
  }
LABEL_58:
  if (v61 != v63)
    free(v61);
  return v43;
}

uint64_t sub_22EC0C25C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = a2;
  v4 = (uint64_t *)sub_22EC0F7CC((_QWORD **)a1, *(uint64_t **)(a2 + 16));
  if (!v4)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || v4 != *(uint64_t **)(v2 + 16))
    return sub_22EC2A5E0(*a1, *(_DWORD *)(v2 + 24), v4, *(_DWORD *)(v2 + 28));
  return v2;
}

uint64_t sub_22EC0C2C0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  void *v15[2];

  v2 = a2;
  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t)*a1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 16) != v6)
  {
    v8 = *(_DWORD *)(v2 + 24);
    v7 = *(_DWORD *)(v2 + 28);
    v9 = *(unsigned __int8 *)(v2 + 32);
    v14 = 0u;
    *(_OWORD *)v15 = 0u;
    v11 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(v5 + 88) + 15192), "isa", 3uLL);
    v12 = v8;
    sub_22EFC6D6C((uint64_t)&v13, v11);
    v2 = sub_22EC225CC(*a1, v6, *(_QWORD *)(v6 + 8), v7, v9, (uint64_t)&v14, 0, 0, (uint64_t)&v11, 0, 0, 0);
    if (HIDWORD(v15[1]))
      free(v15[0]);
  }
  return v2;
}

uint64_t sub_22EC0C3B0(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  unint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];

  v2 = a2;
  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *a1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(v5 + 11992) != -1 || *(_QWORD *)(v2 + 24) != v6)
  {
    v7 = *(_QWORD *)(v2 + 16);
    v8 = *(_DWORD *)(v2 + 32);
    v9 = *(_BYTE *)(v2 + 40);
    v15 = 0u;
    *(_OWORD *)v16 = 0u;
    v12 = *(_QWORD *)(v7 + 40);
    v13 = v8;
    sub_22EFC6D6C((uint64_t)&v14, v12);
    v10 = sub_22EC225CC((_QWORD *)v5, v6, *(_QWORD *)(v6 + 8), v8, v9 & 1, (uint64_t)&v15, 0, 0, (uint64_t)&v12, 0, 0, 0);
    v2 = v10;
    if ((v9 & 2) != 0 && v10 >= 2)
      *(_BYTE *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 40) |= 2u;
    if (HIDWORD(v16[1]))
      free(v16[0]);
  }
  return v2;
}

uint64_t sub_22EC0C4AC(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  unint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  char v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[64];
  void *v42;
  uint64_t v43;
  _QWORD v44[10];

  v44[8] = *MEMORY[0x24BDAC8D0];
  v38 = 0;
  v42 = v44;
  v43 = 0x800000000;
  v4 = *(unsigned __int16 *)(a2 + 24);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(unsigned __int16 *)(a2 + 24);
  }
  if ((sub_22EC16FD8(a1, (unsigned __int8 **)(a2 + 48), v4, 0, (uint64_t)&v42, &v38) & 1) != 0)
    goto LABEL_27;
  v5 = *(_DWORD *)(a2 + 24);
  if (BYTE2(v5) - 2 >= 2)
  {
    if (BYTE2(v5))
    {
      if ((v5 & 0xFF0000) == 0x10000)
        v10 = *(_QWORD *)(a2 + 40);
      else
        v10 = 0;
      v11 = sub_22EBCEF90(a1, v10);
      if ((v11 & 1) != 0)
        goto LABEL_27;
      v12 = *a1;
      v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_DWORD *)(*a1 + 11992) != -1
        || (*(unsigned __int8 *)(a2 + 26) << 16 != 0x10000 ? (v14 = 0) : (v14 = *(_QWORD *)(a2 + 40)),
            v14 != v13 || v38))
      {
        v39 = v41;
        v40 = 0x1000000000;
        sub_22F3C78D4(a2, (uint64_t)&v39);
        v23 = (uint64_t *)(a2 + 16);
        if ((*(_BYTE *)(a2 + 27) & 1) != 0)
        {
          v24 = *v23;
          v23 = (uint64_t *)(*v23 + 40);
        }
        else
        {
          v24 = 0;
        }
        v25 = sub_22EC2DA20(*a1, v13, *(_QWORD *)(v13 + 8), 0, *v23, v24, *(_DWORD *)(a2 + 32), v22, (int *)v39, v40, *(unsigned int *)(a2 + 36), (uint64_t)v42, v43, 0);
LABEL_52:
        v20 = v25;
        v37 = v39;
        if (v39 == v41)
          goto LABEL_28;
        goto LABEL_53;
      }
    }
    else
    {
      if ((v5 & 0xFF0000) != 0)
        v9 = 0;
      else
        v9 = *(uint64_t **)(a2 + 40);
      v15 = sub_22EC0F7CC((_QWORD **)a1, v9);
      if (!v15)
        goto LABEL_27;
      v16 = (uint64_t *)v15;
      v12 = *a1;
      if (*(_DWORD *)(*a1 + 11992) != -1 || *(_BYTE *)(a2 + 26) || v16 != *(uint64_t **)(a2 + 40) || v38)
      {
        v39 = v41;
        v40 = 0x1000000000;
        sub_22F3C78D4(a2, (uint64_t)&v39);
        v18 = (uint64_t *)(a2 + 16);
        if ((*(_BYTE *)(a2 + 27) & 1) != 0)
        {
          v19 = *v18;
          v18 = (uint64_t *)(*v18 + 40);
        }
        else
        {
          v19 = 0;
        }
        v25 = sub_22EC2F730((_QWORD *)*a1, v16, *v16, 0, *v18, v19, *(_DWORD *)(a2 + 32), v17, (int *)v39, v40, *(unsigned int *)(a2 + 36), (unsigned __int8 **)v42, v43, 0, 0);
        goto LABEL_52;
      }
    }
    v20 = sub_22EBCC6C0(v12, a2);
    goto LABEL_28;
  }
  if ((v5 & 0x1000000) == 0 || (v6 = (unint64_t *)(a2 + 16), !*(_QWORD *)(a2 + 16)))
  {
LABEL_27:
    v20 = 1;
    goto LABEL_28;
  }
  v39 = v41;
  v40 = 0x1000000000;
  sub_22F3C78D4(a2, (uint64_t)&v39);
  v7 = *(_DWORD *)(a2 + 24);
  if ((v7 & 0xFE0000) == 0x20000)
    v8 = *(unsigned int *)(a2 + 28);
  else
    v8 = 0;
  v26 = (uint64_t *)(a2 + 16);
  if ((v7 & 0x1000000) != 0)
    v26 = (uint64_t *)(*v6 + 40);
  v27 = *v26;
  v28 = (int *)v39;
  v29 = v40;
  v30 = sub_22F3C7A10(a2);
  if ((v7 & 0x1000000) != 0)
    v32 = *v6;
  else
    v32 = 0;
  v33 = *(_DWORD *)(a2 + 32);
  v34 = *(unsigned int *)(a2 + 36);
  v35 = (_QWORD *)*a1;
  if ((*(_BYTE *)(v32 + 58) & 2) != 0)
    v36 = sub_22EC2DA20((uint64_t)v35, 0, v30, v8, v27, v32, v33, v31, v28, v29, v34, (uint64_t)v42, v43, 0);
  else
    v36 = sub_22EC2F730(v35, 0, v30, v8, v27, v32, v33, v31, v28, v29, v34, (unsigned __int8 **)v42, v43, 0, 0);
  v20 = v36;
  v37 = v39;
  if (v39 != v41)
LABEL_53:
    free(v37);
LABEL_28:
  if (v42 != v44)
    free(v42);
  return v20;
}

uint64_t sub_22EC0C87C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v12[8] = *MEMORY[0x24BDAC8D0];
  v10 = v12;
  v11 = 0x800000000;
  v9 = 0;
  if ((sub_22EC16FD8(a1, (unsigned __int8 **)(a2 + 40), *(_DWORD *)(a2 + 16), 0, (uint64_t)&v10, &v9) & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v5 = (_QWORD *)*a1;
    if (*(_DWORD *)(*a1 + 11992) == -1 && v9 == 0)
      v7 = sub_22EBCC6C0((uint64_t)v5, a2);
    else
      v7 = sub_22EC28BF4(v5, *(_QWORD *)(a2 + 20), (uint64_t *)v10, v11);
    v4 = v7;
  }
  if (v10 != v12)
    free(v10);
  return v4;
}

uint64_t sub_22EC0C964(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;

  v2 = a2;
  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (_BYTE *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_BYTE **)(v2 + 16) != v5)
    return sub_22EC27DFC(*a1, *(_QWORD *)(v2 + 32), v5);
  return v2;
}

uint64_t sub_22EC0C9CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v40;
  _QWORD v41[2];
  int v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  int v50;
  char v51;
  char v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[34];

  v2 = a2;
  v55[32] = *MEMORY[0x24BDAC8D0];
  v53 = v55;
  v54 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 16);
  v5 = 0;
  v6 = v4 & 0x7FFFFFFF;
  if ((v4 & 0x7FFFFFFF) != 0)
  {
    v7 = (uint64_t *)(a2 + 48);
    v8 = (unint64_t)&loc_22F44E000;
    v9 = a2;
    while (1)
    {
      v11 = *(v7 - 1);
      v10 = *v7;
      v12 = v8 & 0xFFFFFF00FFFFFF00;
      v13 = *(_DWORD *)(v2 + 16);
      if ((v13 & 0x80000000) == 0)
        goto LABEL_4;
      v21 = v9 + 16 * (v13 & 0x7FFFFFFF);
      v22 = *(_DWORD *)(v21 + 40);
      LODWORD(v21) = *(_DWORD *)(v21 + 44);
      v23 = v8 & 0xFFFFFF0000000000 | (v21 - 1) | 0x100000000;
      if ((_DWORD)v21)
        v12 = v23;
      if (!v22)
        break;
      v48 = &v50;
      v49 = 0x200000000;
      v24 = *a1;
      v46 = 7;
      v47 = v11;
      sub_22EE7377C(v24, (uint64_t)&v46, (uint64_t)&v48);
      v25 = *a1;
      v44 = 7;
      v45 = v10;
      sub_22EE7377C(v25, (uint64_t)&v44, (uint64_t)&v48);
      v26 = *a1;
      v40 = *(_DWORD *)(*a1 + 11992);
      *(_DWORD *)(*a1 + 11992) = -1;
      v27 = sub_22EBCEF90(a1, v11);
      if ((v27 & 1) != 0
        || ((v16 = v11 == (v27 & 0xFFFFFFFFFFFFFFFELL), v28 = v27 & 0xFFFFFFFFFFFFFFFELL, v16) ? (v29 = 0) : (v29 = 1),
            v5 |= v29,
            v30 = sub_22EBCEF90(a1, v10),
            (v30 & 1) != 0))
      {
        v31 = 0;
      }
      else
      {
        v41[0] = v28;
        v41[1] = v30 & 0xFFFFFFFFFFFFFFFELL;
        v5 |= v10 != (v30 & 0xFFFFFFFFFFFFFFFELL);
        v42 = v22;
        v43 = v12;
        v31 = 1;
        v32 = (_OWORD *)sub_22E78DF7C((uint64_t)&v53, (unint64_t)v41, 1);
        v33 = (char *)v53 + 32 * v54;
        v34 = v32[1];
        *v33 = *v32;
        v33[1] = v34;
        LODWORD(v54) = v54 + 1;
      }
      *(_DWORD *)(v26 + 11992) = v40;
      v2 = a2;
      if (v48 != &v50)
        free(v48);
      if (!v31)
      {
LABEL_32:
        v37 = 1;
        goto LABEL_35;
      }
LABEL_26:
      v9 += 8;
      v7 += 2;
      v8 = v12;
      if (!--v6)
        goto LABEL_29;
    }
    v2 = a2;
LABEL_4:
    v14 = sub_22EBCEF90(a1, *(v7 - 1));
    if ((v14 & 1) != 0)
      goto LABEL_32;
    v15 = sub_22EBCEF90(a1, v10);
    if ((v15 & 1) != 0)
      goto LABEL_32;
    v16 = v10 == (v15 & 0xFFFFFFFFFFFFFFFELL) && v11 == (v14 & 0xFFFFFFFFFFFFFFFELL);
    v48 = (void *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    v49 = v15 & 0xFFFFFFFFFFFFFFFELL;
    v17 = !v16;
    v50 = 0;
    v5 |= v17;
    v51 = 0;
    v52 = 0;
    v18 = (_OWORD *)sub_22E78DF7C((uint64_t)&v53, (unint64_t)&v48, 1);
    v19 = (char *)v53 + 32 * v54;
    v20 = v18[1];
    *v19 = *v18;
    v19[1] = v20;
    LODWORD(v54) = v54 + 1;
    goto LABEL_26;
  }
LABEL_29:
  v35 = (_QWORD *)*a1;
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 & 1) != 0)
    v36 = sub_22EC297B0(v35, *(_QWORD *)(v2 + 20), (uint64_t)v53, v54);
  else
    v36 = sub_22EBCC6C0((uint64_t)v35, v2);
  v37 = v36;
LABEL_35:
  if (v53 != v55)
    free(v53);
  return v37;
}

uint64_t sub_22EC0CCC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  void *v21[2];

  v2 = a2;
  v3 = *(_QWORD *)(a2 + 40);
  if ((v3 & 6) == 0)
  {
    v5 = sub_22EBCEF90(a1, v3 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v6 = *(_QWORD **)a1;
      v7 = *(_DWORD *)(*(_QWORD *)a1 + 11992);
      v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
      if (v7 != -1 || v8 != (*(_QWORD *)(v2 + 40) & 0xFFFFFFFFFFFFFFF8))
      {
        v9 = *(_QWORD *)(v2 + 16);
        if ((v9 & 4) != 0)
        {
          v12 = v6[11];
          v13 = *(_QWORD *)(v12 + 16872);
          v14 = v9 & 0xFFFFFFFFFFFFFFF8;
          v15 = *(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF8;
          v16 = *(_DWORD *)(v2 + 32);
          v2 = sub_22E3CD3D4(v12 + 2032, 48, 3);
          sub_22F2F4590(v2, v14, v15, v13, 1, 3, v16, v8);
        }
        else
        {
          v10 = *(_DWORD *)(v2 + 32);
          v20 = 0u;
          *(_OWORD *)v21 = 0u;
          v17 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 40);
          v18 = v10;
          sub_22EFC6D6C((uint64_t)&v19, v17);
          v2 = sub_22EC225CC(v6, v8, *(_QWORD *)(v8 + 8), v10, 0, (uint64_t)&v20, 0, 0, (uint64_t)&v17, 0, 0, 0);
          if (HIDWORD(v21[1]))
            free(v21[0]);
        }
      }
    }
  }
  return v2;
}

uint64_t sub_22EC0CE08(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBCEF90(a1, *(_QWORD *)(v2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(_QWORD *)(v2 + 32) != v6
    || *(_QWORD *)(v2 + 24) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F3341E8(*a1, *(_DWORD *)(v2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, v6, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
  }
  return v2;
}

uint64_t sub_22EC0CEA8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[14];

  v2 = a2;
  v26[12] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EC0F7CC((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v24 = v26;
  v25 = 0x400000000;
  v6 = *(unsigned int *)(v2 + 32);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = (unint64_t *)(v2 + 48);
    while (1)
    {
      v22 = 1;
      v21 = *(v9 - 1);
      v10 = *v9;
      v11 = *v9 & 3;
      if ((v11 - 1) >= 2)
      {
        if ((_DWORD)v11 != 3)
        {
          v15 = *(_QWORD *)(v2 + 40 + 16 * *(unsigned int *)(v2 + 32) + 8 * (v10 >> 2));
          v16 = sub_22EBCEF90(a1, v15);
          if ((v16 & 1) != 0)
          {
            v2 = 1;
            goto LABEL_21;
          }
          v8 |= v15 != (v16 & 0xFFFFFFFFFFFFFFFELL);
          v22 = 1;
          v23 = v16 & 0xFFFFFFFFFFFFFFFELL;
          goto LABEL_13;
        }
      }
      else
      {
        v22 = 0;
        v12 = v10 & 3;
        v13 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        if (v12 != 1)
          goto LABEL_8;
        v14 = *(_QWORD *)(v13 + 40);
        if ((v14 & 7) == 0)
        {
          v13 = v14 & 0xFFFFFFFFFFFFFFF8;
LABEL_8:
          v23 = v13;
          if (!v13)
            goto LABEL_14;
LABEL_13:
          v17 = sub_22E4EF088((uint64_t)&v24, (unint64_t)&v21, 1);
          v18 = (char *)v24 + 24 * v25;
          v19 = *(_OWORD *)v17;
          *((_QWORD *)v18 + 2) = *(_QWORD *)(v17 + 16);
          *(_OWORD *)v18 = v19;
          v7 = v25 + 1;
          LODWORD(v25) = v25 + 1;
        }
      }
LABEL_14:
      v9 += 2;
      if (!--v6)
        goto LABEL_18;
    }
  }
  v7 = 0;
  v8 = 0;
LABEL_18:
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 != *(uint64_t **)(v2 + 24)) | v8 & 1)
    v2 = sub_22EB49A78(*a1, *(_DWORD *)(v2 + 16), v5, (unsigned int *)v24, v7, *(_DWORD *)(v2 + 20));
LABEL_21:
  if (v24 != v26)
    free(v24);
  return v2;
}

uint64_t sub_22EC0D0AC(uint64_t a1, _QWORD *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), a2);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = 48;
  if (v5 == *(_QWORD *)(a1 + 32))
    v6 = 52;
  if (v4 == (void **)(v5 + 8 * *(unsigned int *)(a1 + v6)))
    return (uint64_t)a2;
  else
    return sub_22EBCEF90(a1, a2[2]);
}

uint64_t sub_22EC0D110(uint64_t *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  __int128 v25;
  void *v26[2];
  uint64_t v27;
  void *v28[2];
  _DWORD v29[66];
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _BYTE v33[64];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD v40[3];
  __int16 v41;
  int v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)*a1;
  v5 = *((_QWORD *)a2 + 2);
  v6 = a2[6];
  v30 = 0;
  v31 = v33;
  v32 = 0x800000000;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = v4;
  v38 = v5;
  v39 = v6;
  sub_22EFC6D6C((uint64_t)v40, v5);
  v40[1] = 0;
  v40[2] = 0;
  v41 = 0;
  v42 = 257;
  v43 = 0;
  sub_22EC56024((uint64_t)&v30);
  if ((sub_22E8CA788((uint64_t)a1, (unsigned __int8 *)a2, (*a2 & 0x80000) != 0, (uint64_t)&v30) & 1) != 0)
  {
    v7 = 1;
    goto LABEL_36;
  }
  v25 = 0u;
  *(_OWORD *)v26 = 0u;
  v8 = *((_QWORD *)a2 + 5);
  if (v8)
  {
    v9 = sub_22EC140CC(a1, v8, *((void **)a2 + 6), 0, 0);
    if (!v9)
    {
      v7 = 1;
      goto LABEL_34;
    }
    sub_22E8ACE30((uint64_t)&v25, v9, v10);
  }
  v11 = *((_QWORD *)a2 + 7);
  if (v11)
  {
    v27 = *((_QWORD *)a2 + 7);
    v28[0] = 0;
    if (sub_22E793870(a1 + 1, &v27, v28))
    {
      if (v28[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      {
        v11 = *((_QWORD *)v28[0] + 1);
        if (!v11)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v22 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v22, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_34;
        }
      }
    }
    v35 = v11;
  }
  v12 = *a2;
  if ((v12 & 0x40000) != 0)
  {
    v13 = a2[1];
    v14 = (uint64_t)(*a2 == 211 ? a2 + 16 : a2 + 20);
    v15 = (int *)(v14 + 8 * v13);
    v16 = v15[2];
    v17 = *v15;
    if (*v15 | v16)
    {
      v18 = v15[1];
      v28[0] = v29;
      v28[1] = (void *)0x800000000;
      v29[64] = v17;
      v29[65] = v18;
      if (v17)
      {
        if ((sub_22EC21310((uint64_t)a1, v14 + 8 * v13 + 16 * ((v12 >> 18) & 1), v14 + 8 * v13 + 16 * ((v12 >> 18) & 1) + 32 * *(unsigned int *)(v14 + 8 * v13 + 12)) & 1) != 0)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v19 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v19, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_48;
        }
        LODWORD(v12) = *a2;
      }
      v7 = sub_22ED66318((_QWORD *)*a1, (uint64_t)&v25, v16, (uint64_t)&v30, (v12 >> 19) & 1, (uint64_t)v28);
LABEL_48:
      if (v28[0] != v29)
        free(v28[0]);
      goto LABEL_34;
    }
  }
  if ((_DWORD)v30 != 2)
    goto LABEL_32;
  v20 = *v31 & 0xFFFFFFFFFFFFFFFCLL;
  if ((*(_DWORD *)(v20 + 28) & 0x7Fu) <= 0x2F && ((1 << (*(_DWORD *)(v20 + 28) & 0x7F)) & 0xC00000060000) != 0)
  {
    v20 = sub_22EFBAEA4(v20);
    if (!v20)
      goto LABEL_32;
  }
  if (!sub_22EFBAEF8(v20))
  {
    LODWORD(v12) = *a2;
LABEL_32:
    v21 = sub_22EB235A8((_QWORD *)*a1, (uint64_t)&v25, (uint64_t)&v30, (v12 >> 19) & 1, 0);
    goto LABEL_33;
  }
  v21 = sub_22EC21A04(*a1, (uint64_t *)&v25, 0, (uint64_t)&v30, 0, 0, 0);
LABEL_33:
  v7 = v21;
LABEL_34:
  if (HIDWORD(v26[1]))
    free(v26[0]);
LABEL_36:
  if (BYTE1(v42))
  {
    if ((_DWORD)v30 == 5)
    {
      sub_22EC64D18(v37, (uint64_t)&v30);
    }
    else if (v35 && (*(_DWORD *)(v37[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v37, (uint64_t)&v30);
    }
  }
  if (v34)
  {
    v24 = sub_22EC6CBD0(v34);
    MEMORY[0x2348A0E9C](v24, 0x10E0C409F09D3C3);
  }
  if (v31 != (_QWORD *)v33)
    free(v31);
  return v7;
}

uint64_t sub_22EC0D4D8(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void **v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  void *v35[2];
  void *v36[2];
  _BYTE v37[256];
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[64];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 7);
  if (v4 && (sub_22EFFFB48(*((unsigned __int8 **)a2 + 7)) & 1) == 0)
  {
    v12 = sub_22EBCEF90(a1, v4);
    if ((v12 & 1) != 0)
      return 1;
    v13 = sub_22EC2624C(*(_QWORD *)a1, (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFFELL), (*a2 >> 19) & 1);
    v6 = v13;
    if ((v13 & 1) != 0)
      return 1;
    v5 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22EC14078(a1, *((_QWORD *)a2 + 8));
    v6 = 0;
  }
  v7 = *((_QWORD *)a2 + 5);
  if (v7)
  {
    v8 = sub_22EC140CC((uint64_t *)a1, v7, *((void **)a2 + 6), 0, 0);
    if (v8)
    {
      v10 = v8;
      v11 = v9;
      goto LABEL_12;
    }
    return 1;
  }
  v10 = 0;
  v11 = 0;
LABEL_12:
  if ((*a2 & 0x40000) != 0)
  {
    if (*a2 == 211)
      v16 = a2 + 16;
    else
      v16 = a2 + 20;
    v15 = v16[2 * a2[1] + 2];
  }
  else
  {
    v15 = 0;
  }
  v17 = *(_QWORD **)a1;
  v39 = 0;
  v40 = v42;
  v41 = 0x800000000;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = v17;
  v47 = *((_OWORD *)a2 + 1);
  v18 = *((_QWORD *)a2 + 4);
  v50 = 0;
  v48 = v18;
  v49 = 0;
  v51 = 0;
  v52 = 257;
  v53 = 0;
  sub_22EC56024((uint64_t)&v39);
  if ((sub_22E8CA788(a1, (unsigned __int8 *)a2, 0, (uint64_t)&v39) & 1) == 0)
  {
    if (sub_22F0621BC((uint64_t)a2))
    {
      v19 = sub_22F0621BC((uint64_t)a2);
      *(_QWORD *)&v34 = v19;
      v36[0] = 0;
      if (sub_22E793870((uint64_t *)(a1 + 8), &v34, v36)
        && v36[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
      {
        v19 = *((_QWORD *)v36[0] + 1);
      }
      if (!v19)
        goto LABEL_19;
      v44 = v19;
    }
    v36[0] = v37;
    v36[1] = (void *)0x800000000;
    v38 = 0;
    v20 = *a2;
    if ((v20 & 0x40000) == 0)
    {
      v33 = v5;
      v21 = 0;
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (v20 >> 19) & 1;
      goto LABEL_43;
    }
    v25 = *a2;
    v26 = a2[1];
    if (v25 == 211)
      v27 = a2 + 16;
    else
      v27 = a2 + 20;
    v28 = &v27[2 * v26];
    if (*v28)
    {
      v38 = *(_QWORD *)v28;
      if ((sub_22EC21310(a1, (uint64_t)&v28[4 * ((v20 >> 18) & 1)], (uint64_t)&v28[8 * v27[2 * v26 + 3] + 4 * ((v20 >> 18) & 1)]) & 1) != 0)
      {
        v14 = 1;
LABEL_45:
        if (v36[0] != v37)
          free(v36[0]);
        goto LABEL_47;
      }
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (*a2 >> 19) & 1;
      v33 = v5;
      if ((*a2 & 0x40000) == 0)
      {
        v21 = 0;
LABEL_43:
        v30 = v23;
        v34 = 0u;
        *(_OWORD *)v35 = 0u;
        sub_22E8ACE30((uint64_t)&v34, v10, v11);
        v14 = sub_22EC24AB8(*(_QWORD *)a1, v22, v33, v30, v24, (uint64_t *)&v34, v15, 0, (uint64_t)&v39, (uint64_t)v21, 0, 0, 0);
        if (HIDWORD(v35[1]))
          free(v35[0]);
        goto LABEL_45;
      }
      v25 = *a2;
      v26 = a2[1];
    }
    else
    {
      v33 = v5;
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (v20 >> 19) & 1;
    }
    v29 = a2 + 16;
    if (v25 != 211)
      v29 = a2 + 20;
    if (v29[2 * v26])
      v21 = v36;
    else
      v21 = 0;
    goto LABEL_43;
  }
LABEL_19:
  v14 = 1;
LABEL_47:
  if (BYTE1(v52))
  {
    if ((_DWORD)v39 == 5)
    {
      sub_22EC64D18(v46, (uint64_t)&v39);
    }
    else if (v44 && (*(_DWORD *)(v46[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v46, (uint64_t)&v39);
    }
  }
  if (v43)
  {
    v32 = sub_22EC6CBD0(v43);
    MEMORY[0x2348A0E9C](v32, 0x10E0C409F09D3C3);
  }
  if (v40 != v42)
    free(v40);
  return v14;
}

uint64_t sub_22EC0D8E4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v2 = a2;
  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) == -1 && *(_QWORD *)(v2 + 24) == v5)
    return v2;
  v6 = *(_DWORD *)(v2 + 20);
  v7 = v6 != 0;
  v8 = v6 != 0;
  LODWORD(v9) = v6 - 1;
  if (v8)
    v9 = v9;
  else
    v9 = 0;
  return sub_22EE739C0(*a1, v5, *(unsigned int *)(v2 + 16), v9 | (v7 << 32));
}

unint64_t sub_22EC0D960(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 24) != v5)
    return sub_22EB27A20(*a1, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), v5);
  return v2;
}

uint64_t sub_22EC0D9C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  int v7;
  int v8;
  char v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v11 = v13;
  v12 = 0x400000000;
  v4 = 1;
  if ((sub_22EC16FD8(a1, (unsigned __int8 **)(a2 + 24), *(_DWORD *)(a2 + 4), 1, (uint64_t)&v11, &v10) & 1) == 0)
  {
    v5 = (uint64_t *)v11;
    v6 = v12;
    v8 = *(_DWORD *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 20);
    v4 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v12 + 24, 3);
    sub_22F002D50(v4, v8, v5, v6, v7);
  }
  if (v11 != v13)
    free(v11);
  return v4;
}

uint64_t sub_22EC0DAC4(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;

  v3 = sub_22ED28410((_QWORD *)*a1, a2);
  result = sub_22EBCEF90(a1, v3);
  if ((result & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(*(_QWORD *)((result & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = (*(_DWORD *)(v5 + 16) & 0xFF800FF) == 137363467;
  else
    v6 = 0;
  if (v6)
    return sub_22ED26924(*a1, (unsigned __int8 *)(result & 0xFFFFFFFFFFFFFFFELL));
  return result;
}

uint64_t sub_22EC0DB3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (_QWORD *)(a2 + 32);
    v7 = 8 * v4;
    v8 = 1;
    while (1)
    {
      v9 = *v6;
      v10 = sub_22EBCEF90(a1, *v6);
      if ((v10 & 1) != 0)
        break;
      v11 = v14;
      if (v14 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v14;
      }
      v15[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
      v12 = ++v14;
      v5 |= v9 != (v10 & 0xFFFFFFFFFFFFFFFELL);
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_9;
    }
  }
  else
  {
    v12 = 0;
    v5 = 0;
LABEL_9:
    if (*(_DWORD *)(*a1 + 11992) != -1 || (v5 & 1) != 0)
      return sub_22F32D6EC(*a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), v15, v12, *(_QWORD *)(a2 + 8));
    else
      return a2;
  }
  return v8;
}

uint64_t sub_22EC0DCA0(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int **v24;
  uint64_t v25;
  int *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v41;
  uint64_t *v42;
  _BYTE *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL4 v52;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  int v71;
  int v72;
  void *v73;
  uint64_t v74;
  _BYTE v75[32];
  void *v76;
  __int128 v77;
  _BYTE v78[24];
  void *v79[2];
  _BYTE v80[32];
  uint64_t *v81;
  uint64_t v82;
  _QWORD v83[6];

  v3 = a1;
  v83[4] = *MEMORY[0x24BDAC8D0];
  v81 = v83;
  v82 = 0x400000000;
  v4 = v80;
  v79[0] = v80;
  v79[1] = (void *)0x400000000;
  v76 = v78;
  v77 = xmmword_22F44E350;
  v78[16] = 0;
  v5 = *a1;
  v73 = 0;
  v71 = 3;
  v72 = 0;
  v69 = *(unsigned int *)(v5 + 1704);
  sub_22EB4DDB8(v5 + 3688, &v72, (int *)&v69, (__int16 *)(v5 + 1693), (uint64_t *)&v73, &v71);
  v6 = *(unsigned int *)(v5 + 3696);
  v7 = v6 - 2;
  v8 = *(_QWORD *)(v5 + 3688);
  v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
  if (v9 == 5)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
    v10 = 1;
  }
  else if (v9 == 2)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
    v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
  }
  else
  {
    v10 = 0;
    *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
  }
  v11 = v8 + 576 * v6;
  *(_BYTE *)(v11 - 3) = v10;
  *(_WORD *)(v5 + 1693) = 0;
  if (*(_DWORD *)(v5 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v5 + 1776), (llvm::SmallPtrSetImplBase *)(v11 - 560));
    sub_22EAEAE08(v5 + 1840, (uint64_t *)(v11 - 496));
  }
  v12 = *(_QWORD *)(*v3 + 88);
  v13 = *(_QWORD *)(*v3 + 216);
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24));
  v15 = sub_22F3B1F5C(v12, v13, v14);
  v16 = *v3;
  v61 = v15;
  if (v15)
    v17 = v15 + 40;
  else
    v17 = 0;
  v18 = *(_QWORD *)(v16 + 216);
  v19 = *(_QWORD *)(v16 + 3200);
  *(_QWORD *)(v16 + 3200) = 0;
  v66 = *(_QWORD *)(v16 + 10288);
  v64 = *(_DWORD *)(v16 + 2192);
  v65 = *(_DWORD *)(v16 + 1944);
  v63 = v17;
  *(_QWORD *)(v16 + 216) = v17;
  *(_DWORD *)(v16 + 1944) = *(_DWORD *)(v16 + 1904);
  *(_DWORD *)(v16 + 2192) = *(_DWORD *)(v16 + 1960);
  if ((sub_22EC160C0(v3, a2 + 40, *(_DWORD *)(a2 + 16), 0, 0, (uint64_t)v79, (uint64_t)&v81, (uint64_t)&v76) & 1) != 0)
  {
    v68 = 1;
    goto LABEL_62;
  }
  if ((_DWORD)v82)
  {
    v20 = v81;
    v21 = 8 * v82;
    do
    {
      v22 = *v20++;
      *(_QWORD *)(v22 + 16) = v63 & 0xFFFFFFFFFFFFFFFBLL;
      v21 -= 8;
    }
    while (v21);
  }
  v73 = v75;
  v74 = 0x400000000;
  v23 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v23)
  {
    v59 = v19;
    v60 = v18;
    v24 = (int **)(a2 + 40 + 8 * *(unsigned int *)(a2 + 16));
    v25 = 8 * v23;
    v67 = a2;
    v68 = 1;
    v62 = v5;
    while (1)
    {
      v26 = *v24;
      v27 = **v24;
      if (v27)
      {
        if ((v27 - 3) >= 0xFFFFFFFE)
        {
          v31 = *((_QWORD *)v26 + 1) & 0xFFFFFFFFFFFFFFFCLL;
          if (v26[10] == 1)
          {
            v32 = v31 | 2;
          }
          else
          {
            v37 = sub_22EBCEF90(v3, v31);
            if (v37 >= 2)
            {
              v38 = *(_QWORD *)(*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
              v39 = (*(_DWORD *)(v38 + 16) & 0xFE00000u) < 0x8180001 || v38 == 0;
              if (!v39 && *(_DWORD *)(v38 + 16) == 11)
                v37 = sub_22EB19A28(*v3);
            }
            if ((v37 & 1) != 0)
            {
LABEL_59:
              v19 = v59;
              v18 = v60;
              goto LABEL_60;
            }
            v32 = v37 & 0xFFFFFFFFFFFFFFFCLL;
          }
          LOBYTE(v69) = 0;
          v70 = 0;
          v41 = *((_QWORD *)v26 + 3);
          if (v41 > 7)
          {
            v45 = v41 & 0xFFFFFFFFFFFFFFF8;
            if ((v41 & 4) != 0)
            {
              v42 = v3;
              v43 = v4;
              v44 = v45 | 4;
              v69 = v45 | 4;
            }
            else
            {
              if (!v45)
              {
                v26 = 0;
                goto LABEL_52;
              }
              v42 = v3;
              v43 = v4;
              sub_22F31A5DC((unint64_t *)&v69, v45);
              v44 = v69;
            }
          }
          else
          {
            v42 = v3;
            v43 = v4;
            v44 = 0;
            v69 = 0;
          }
          v70 = 1;
          v46 = v32 & 0xFFFFFFFFFFFFFFFCLL;
          v47 = *v26;
          v48 = v26[4];
          v49 = *v42;
          if ((v32 & 2) != 0 || !v46)
          {
            v52 = v47 == 1;
            v26 = (int *)sub_22E3CD3D4(*(_QWORD *)(v49 + 88) + 2032, 48, 3);
            sub_22F31A53C((uint64_t)v26, v46, v52, v48, v44);
          }
          else
          {
            v26 = (int *)sub_22EBCF54C(v49, v32 & 0xFFFFFFFFFFFFFFFCLL, v47 == 1, v26[4], v44);
          }
          v4 = v43;
          v5 = v62;
          v3 = v42;
          a2 = v67;
LABEL_52:
          if (!v26)
            goto LABEL_59;
          goto LABEL_53;
        }
        v28 = *((_QWORD *)v26 + 1);
        if ((v28 & 2) == 0)
        {
          v29 = sub_22EBCEF90(v3, v28 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v29 & 1) != 0)
            goto LABEL_59;
          v26 = (int *)sub_22F3327E4(*v3, v29 & 0xFFFFFFFFFFFFFFFELL);
          goto LABEL_52;
        }
        if (*(_DWORD *)(*v3 + 11992) != -1)
        {
          v36 = v28 & 0xFFFFFFFFFFFFFFFCLL;
          v26 = (int *)sub_22E3CD3D4(*(_QWORD *)(*v3 + 88) + 2032, 24, 3);
          *v26 = 3;
          *((_BYTE *)v26 + 4) &= 0xF8u;
          *((_QWORD *)v26 + 1) = v36 | 2;
          *((_QWORD *)v26 + 2) = 0;
        }
      }
      else if (v26[4] == 1)
      {
        if (*(_DWORD *)(*v3 + 11992) != -1)
        {
          v30 = *((_QWORD *)v26 + 1) & 0xFFFFFFFFFFFFFFF8;
          v26 = (int *)sub_22E3CD3D4(*(_QWORD *)(*v3 + 88) + 2032, 24, 3);
          *v26 = 0;
          *((_BYTE *)v26 + 4) &= 0xF8u;
          *((_QWORD *)v26 + 1) = v30;
          v26[4] = 1;
        }
      }
      else
      {
        v33 = v4;
        v34 = sub_22EC0F7CC((_QWORD **)v3, (uint64_t *)(*((_QWORD *)v26 + 1) & 0xFFFFFFFFFFFFFFF8));
        if (!v34)
          goto LABEL_59;
        v35 = (unint64_t)v34;
        v26 = (int *)sub_22E3CD3D4(*(_QWORD *)(*v3 + 88) + 2032, 24, 3);
        sub_22F31A650((uint64_t)v26, v35);
        v4 = v33;
        a2 = v67;
      }
LABEL_53:
      v50 = v74;
      if (v74 >= (unint64_t)HIDWORD(v74))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v50 = v74;
      }
      *((_QWORD *)v73 + v50) = v26;
      v51 = (v74 + 1);
      LODWORD(v74) = v74 + 1;
      ++v24;
      v25 -= 8;
      if (!v25)
      {
        v54 = (char *)v73;
        if ((_DWORD)v51)
        {
          v55 = 0;
          v18 = v60;
          v19 = v59;
          do
          {
            v56 = *(_QWORD *)&v54[v55];
            if ((*(_DWORD *)v56 - 3) >= 0xFFFFFFFE)
            {
              v57 = *(_QWORD *)(v56 + 24);
              if (v57 >= 8 && (v57 & 4) == 0)
                *(_QWORD *)(*(_QWORD *)((v57 & 0xFFFFFFFFFFFFFFF8) + 16) + 16) = v63 & 0xFFFFFFFFFFFFFFFBLL;
            }
            v55 += 8;
          }
          while (8 * v51 != v55);
        }
        else
        {
          v51 = 0;
          v18 = v60;
          v19 = v59;
        }
        goto LABEL_72;
      }
    }
  }
  v51 = 0;
  v54 = v75;
LABEL_72:
  v68 = (uint64_t)sub_22F3C4144(*(_QWORD *)(*v3 + 88), *(_DWORD *)(a2 + 4), v61, v81, v82, v54, v51, *(_DWORD *)(a2 + 32));
LABEL_60:
  if (v73 != v75)
    free(v73);
LABEL_62:
  if (v18)
  {
    *(_QWORD *)(v16 + 216) = v18;
    *(_QWORD *)(v16 + 3200) = v19;
    *(_QWORD *)(v16 + 10288) = v66;
    *(_DWORD *)(v16 + 1944) = v65;
    *(_DWORD *)(v16 + 2192) = v64;
  }
  sub_22EB48E64(v5);
  if (v76 != v78)
    free(v76);
  if (v79[0] != v4)
    free(v79[0]);
  if (v81 != v83)
    free(v81);
  return v68;
}

uint64_t sub_22EC0E370(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;

  v2 = a2;
  if ((*(_BYTE *)(a2 + 1) & 0x80) != 0)
  {
    v4 = sub_22EC0F7CC(a1, *(uint64_t **)(a2 + 32));
    if (v4)
    {
      if (*((_DWORD *)*a1 + 2998) != -1 || *(unint64_t **)(v2 + 32) != v4)
        return sub_22F3C109C((*a1)[11], *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), *(_DWORD *)(v2 + 24), (uint64_t)v4);
    }
    else
    {
      return 1;
    }
  }
  return v2;
}

uint64_t sub_22EC0E3E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  unsigned int *v25;
  char v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[9];

  v2 = a2;
  v31[8] = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  v29 = v31;
  v30 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 32);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 32);
  }
  if ((sub_22EC16FD8(a1, *(unsigned __int8 ***)(v2 + 24), v4, 0, (uint64_t)&v29, &v27) & 1) != 0)
  {
    v2 = 1;
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1 || v27 != 0)
  {
    v6 = v29;
    v7 = v30;
    v9 = *(_DWORD *)(v2 + 16);
    v8 = *(_DWORD *)(v2 + 20);
    v10 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*a1 + 88) + 15192), "__builtin_shufflevector", 0x17uLL);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 88) + 1960) + 80);
    v12 = sub_22E3CD31C((uint64_t *)(v11 + 72), v11);
    v13 = sub_22EFCE144(v12 + 40, v10);
    v14 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
    if ((v13 & 4) != 0 && v14)
      v14 = (_QWORD *)*v14;
    v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 32, 3);
    v16 = *(_QWORD *)(*a1 + 88);
    v17 = *(_QWORD *)(v16 + 16864);
    v28 = 0;
    sub_22EFF69F0(v15, v16, (uint64_t)v14, 0, v17, 0, v9, &v28, 0);
    v18 = sub_22EF5B848(*(_QWORD *)(*a1 + 88), v14[6], 0);
    v19 = sub_22E90092C(*a1, v15, v18, 64, 0, 0);
    v20 = *(_QWORD *)(*a1 + 88);
    v21 = sub_22E8BBA74((unint64_t)v14);
    v22 = *(_QWORD *)(v14[6] & 0xFFFFFFFFFFFFFFF0);
    if (v22)
      v23 = *(unsigned __int8 *)(v22 + 16) - 27 > 0xFFFFFFFD;
    else
      v23 = 0;
    if (!v23)
      v22 = sub_22F10CF48(v22);
    v24 = sub_22E8BBBD0(*(_QWORD *)(v22 + 24));
    v25 = sub_22EFFA488(v20, v19 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v6, v7, v21, v24, v8, 0, 0, 0);
    v2 = sub_22E97915C((_QWORD *)*a1, (unsigned int *)((unint64_t)v25 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (v29 != v31)
    free(v29);
  return v2;
}

uint64_t sub_22EC0E648(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  char v31;
  unsigned __int8 **v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  void *v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  char v55;
  int v56;
  void *v57[2];
  _QWORD v58[24];
  void *v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;

  v2 = a2;
  v64 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 1) == 0)
    return v2;
  v4 = *a1;
  v54 = 0;
  v59 = 0;
  v56 = 3;
  v57[0] = (void *)*(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v54, (int *)v57, (__int16 *)(v4 + 1693), (uint64_t *)&v59, &v56);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  if ((*(_BYTE *)(v2 + 2) & 1) == 0 || (v11 = *(unsigned int *)(v2 + 28), !(_DWORD)v11))
  {
    v22 = *(void **)(v2 + 32);
    v57[0] = v22;
    v59 = 0;
    if (sub_22E793870(a1 + 1, v57, &v59) && v59 != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v22 = (void *)*((_QWORD *)v59 + 1);
    if (v22)
    {
      v24 = *(_DWORD *)(v2 + 16);
      v25 = *(_DWORD *)(v2 + 20);
      v26 = *(_DWORD *)(v2 + 24);
      v28 = *(_QWORD *)(*a1 + 88);
      v23 = (uint64_t)v22;
      v27 = 0;
      goto LABEL_27;
    }
LABEL_29:
    v2 = 1;
    goto LABEL_30;
  }
  v12 = 0;
  v13 = 3 * v11;
  v48 = v2 + 40 + 8 * v13;
  v14 = 8 * v13;
  v15 = v2 + 40;
  while (1)
  {
    v16 = *(_DWORD *)v15;
    if (*(_DWORD *)v15 == 1)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
        goto LABEL_17;
    }
    else if (v16 == 7)
    {
      if (**(unsigned __int8 **)(v15 + 8) != 213)
        goto LABEL_17;
    }
    else if (((1 << v16) & 0x13D) != 0)
    {
LABEL_17:
      ++v12;
      goto LABEL_18;
    }
    sub_22EDC0108(*a1, v15, 0, (uint64_t)&v59);
    v56 = 0;
    LOBYTE(v54) = 0;
    v55 = 0;
    v17 = *a1;
    v51 = v59;
    v52 = v60;
    v53 = v61;
    sub_22EE7465C(v17, (uint64_t)&v51);
    LODWORD(v57[0]) = 0;
    v57[1] = 0;
    v18 = *a1;
    v19 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    if (sub_22EC14B5C(a1, (uint64_t)&v59, (uint64_t)v57, 1))
    {
      *(_DWORD *)(v18 + 11992) = v19;
      goto LABEL_29;
    }
    v20 = *a1;
    v49 = *(_OWORD *)v57;
    v50 = v58[0];
    v21 = sub_22EE74920(v20, (unsigned int *)&v49);
    if ((v21 & 0xFF00000000) == 0)
      break;
    v12 += v21;
    *(_DWORD *)(v18 + 11992) = v19;
LABEL_18:
    v15 += 24;
    v14 -= 24;
    if (!v14)
    {
      v23 = *(_QWORD *)(v2 + 32);
      v24 = *(_DWORD *)(v2 + 16);
      v25 = *(_DWORD *)(v2 + 20);
      v26 = *(_DWORD *)(v2 + 24);
      v27 = v12 | 0x100000000;
      v28 = *(_QWORD *)(*a1 + 88);
LABEL_27:
      v2 = sub_22F0622F8(v28, v24, v23, v25, v26, v27, 0, 0);
      goto LABEL_30;
    }
  }
  *(_DWORD *)(v18 + 11992) = v19;
  v30 = *(_DWORD *)(v2 + 20);
  v59 = (char *)&v60 + 8;
  *(_QWORD *)&v60 = 0x800000000;
  v62 = v30;
  v63 = v30;
  if ((sub_22EC14878((uint64_t)a1, a1, v2 + 40, (uint64_t)a1, v48) & 1) != 0)
  {
    v2 = 1;
    goto LABEL_52;
  }
  v57[0] = v58;
  v57[1] = (void *)0x800000000;
  if (!(_DWORD)v60)
  {
    LODWORD(v37) = 0;
    goto LABEL_49;
  }
  v31 = 0;
  v32 = (unsigned __int8 **)v59;
  v33 = 32 * v60;
  while (2)
  {
    v34 = sub_22E4EF088((uint64_t)v57, (unint64_t)v32, 1);
    v35 = (char *)v57[0] + 24 * LODWORD(v57[1]);
    v36 = *(_OWORD *)v34;
    *((_QWORD *)v35 + 2) = *(_QWORD *)(v34 + 16);
    *(_OWORD *)v35 = v36;
    v37 = ++LODWORD(v57[1]);
    v38 = *(_DWORD *)v32;
    if (*(_DWORD *)v32 == 1)
    {
      v39 = *(_BYTE *)(*(_QWORD *)((unint64_t)v32[1] & 0xFFFFFFFFFFFFFFF0) + 16) == 36;
LABEL_40:
      v40 = v39;
    }
    else
    {
      if (v38 == 7)
      {
        v39 = *v32[1] == 213;
        goto LABEL_40;
      }
      v40 = ((1 << v38) & 0x13D) == 0;
    }
    v31 |= v40;
    v32 += 4;
    v33 -= 32;
    if (v33)
      continue;
    break;
  }
  if ((v31 & 1) == 0)
  {
LABEL_49:
    v41 = *(_QWORD *)(v2 + 32);
    v42 = *(_DWORD *)(v2 + 16);
    v43 = *(_DWORD *)(v2 + 20);
    v44 = *(_DWORD *)(v2 + 24);
    v47 = v37 | 0x100000000;
    v46 = *(_QWORD *)(*a1 + 88);
    v45 = 0;
    v37 = 0;
    goto LABEL_50;
  }
  v41 = *(_QWORD *)(v2 + 32);
  v42 = *(_DWORD *)(v2 + 16);
  v43 = *(_DWORD *)(v2 + 20);
  v44 = *(_DWORD *)(v2 + 24);
  v45 = v57[0];
  v46 = *(_QWORD *)(*a1 + 88);
  v47 = 0;
LABEL_50:
  v2 = sub_22F0622F8(v46, v42, v41, v43, v44, v47, (uint64_t)v45, v37);
  if (v57[0] != v58)
    free(v57[0]);
LABEL_52:
  if (v59 != (char *)&v60 + 8)
    free(v59);
LABEL_30:
  sub_22EB48E64(v4);
  return v2;
}

uint64_t sub_22EC0EB34(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v4 = *a1;
  v5 = *a1 + 3688;
  v19 = *(_DWORD *)(*(_QWORD *)(v4 + 3688) + 576 * *(unsigned int *)(v4 + 3696) - 576);
  v18 = 0;
  v17 = 3;
  *(_QWORD *)v16 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v5, &v19, v16, (__int16 *)(v4 + 1693), &v18, &v17);
  v6 = *(unsigned int *)(v4 + 3696);
  v7 = v6 - 2;
  v8 = *(_QWORD *)(v4 + 3688);
  v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
  if (v9 == 5)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
    v10 = 1;
  }
  else if (v9 == 2)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
    v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
  }
  else
  {
    v10 = 0;
    *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
  }
  v11 = v8 + 576 * v6;
  *(_BYTE *)(v11 - 3) = v10;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v11 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v11 - 496));
  }
  v12 = sub_22EC1C1C8(a1, *(_QWORD *)(a2 + 16), 1u);
  if ((v12 & 1) != 0)
  {
    sub_22F32F704(*a1);
    return 1;
  }
  else
  {
    v13 = *a1;
    v14 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFFELL);
    if (*(_DWORD *)(*a1 + 11992) == -1 && *(unsigned int **)(a2 + 16) == v14)
    {
      sub_22F32F704(v13);
      return sub_22EBCC6C0(*a1, a2);
    }
    else
    {
      return sub_22EB497A8(v13, *(_DWORD *)(a2 + 24), v14, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
    }
  }
}

uint64_t sub_22EC0ECE0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v10;
  int v11;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 24);
  if (!v6)
  {
    v8 = 0;
    goto LABEL_7;
  }
  v7 = sub_22EBCEF90(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
  v10 = *(_DWORD *)(a2 + 32);
  if (!v10)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v10 = v11;
  }
  LODWORD(v12) = *(_DWORD *)(a2 + 36);
  if (!(_DWORD)v12)
  {
    v12 = *(_QWORD *)(a2 + 24);
    if (v12)
      sub_22F0D60E4(v12);
  }
  return sub_22EB542F0(*a1, *(_QWORD *)(v4 + 40), (void *)(v5 & 0xFFFFFFFFFFFFFFFELL), v8, v10, v12);
}

uint64_t sub_22EC0EDA0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v9;
  int v10;
  int v11;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(a2 + 24);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_7;
  }
  v6 = sub_22EBCEF90(a1, v5);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  v9 = *(_DWORD *)(a2 + 36);
  if (!v9)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v9 = v10;
  }
  v11 = *(_DWORD *)(a2 + 40);
  if (!v11)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  return sub_22F32FF64(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v7, *(_BYTE *)(a2 + 32), v9, v11);
}

uint64_t sub_22EC0EE54(uint64_t *a1, _DWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _DWORD *v6;
  unint64_t *v7;
  int *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  unsigned __int32 v27;
  _QWORD *v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  int *v42;
  uint64_t v43;
  size_t v44;
  unsigned __int32 v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v51;
  uint64_t v52;
  int64x2_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57[2];
  void *v58[2];
  _BYTE v59[32];
  uint64_t v60;
  int64x2_t v61;
  _BYTE v62[32];
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD v66[6];

  v2 = a1;
  v66[4] = *MEMORY[0x24BDAC8D0];
  v64 = v66;
  v65 = 0x400000000;
  v3 = a2[1];
  if (!(_DWORD)v3)
  {
    v5 = 0;
    goto LABEL_76;
  }
  v4 = 0;
  v5 = 0;
  v6 = a2 + 6;
  v53 = vdupq_n_s64(0x20uLL);
  v54 = (uint64_t)(a2 + 6);
  v55 = a2[1];
  while (2)
  {
    v7 = *(unint64_t **)&v6[2 * v4];
    v8 = (int *)(v7 + 1);
    v9 = *v7;
    if ((*v7 & 0xF) != 0 || !v9 || *(_BYTE *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
    {
      v60 = (uint64_t)v62;
      v61 = vdupq_n_s64(0x20uLL);
      v63 = 0;
      v10 = sub_22F11598C(v9);
      if (v61.i64[0] < (unint64_t)v10)
        sub_22EEB52C0(&v60, v10);
      v13 = sub_22EC0F9F4((_QWORD **)v2, (uint64_t)&v60, v9, (uint64_t)v8, v11, v12);
      if (v13 >= 0x10)
      {
        v15 = v13;
        if (v13 == *v7)
        {
          v16 = v65;
          v17 = HIDWORD(v65);
        }
        else
        {
          v25 = *(_QWORD *)(*v2 + 88);
          v26 = v61.i64[0] - v61.i64[1];
          v27 = v61.i32[0] - v61.i32[2];
          if (v61.i32[0] == v61.i32[2])
            v27 = sub_22F11598C(v15);
          v7 = (unint64_t *)sub_22E3CD3D4(v25 + 2032, v27 + 8, 3);
          *v7 = v15;
          memcpy(v7 + 1, (const void *)(v60 + v61.i64[1]), v26);
          v16 = v65;
          v17 = HIDWORD(v65);
          v5 = 1;
        }
        if (v16 >= v17)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v16 = v65;
        }
        v64[v16] = (uint64_t)v7;
        LODWORD(v65) = v65 + 1;
        v14 = 4;
      }
      else
      {
        v14 = 1;
      }
      if ((_BYTE *)v60 != v62 && v60)
        MEMORY[0x2348A0E84]();
      goto LABEL_53;
    }
    v18 = *(_QWORD *)(v9 + 32);
    if (v18 >= 0x10 && (*(_QWORD *)(v9 + 32) & 0xFLL) == 0)
      v37 = *(_QWORD *)((char *)&unk_22F483088
                      + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
    else
      v37 = 1;
    v20 = ((unint64_t)v8 + v37 + 3) & -v37;
    v57[0] = *(_QWORD *)(v9 + 32);
    v57[1] = v20;
    v58[0] = v59;
    v58[1] = (void *)0x200000000;
    sub_22EE73804(*v2, v18, v20, (uint64_t)v58);
    v51 = *(_DWORD *)(v9 + 20);
    LODWORD(v21) = v51 - 1;
    if (v51)
      v21 = v21;
    else
      v21 = 0;
    v52 = v21;
    v22 = v18;
    for (i = v18; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_32;
        v24 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v24 <= 0x39)
          break;
LABEL_27:
        if (sub_22F115668(i))
          v22 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_43;
      }
      if (v24 == 24)
        goto LABEL_42;
      if (v24 == 26)
        break;
      if (((1 << v24) & 0x20000000200003CLL) == 0)
        goto LABEL_27;
LABEL_32:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_32;
LABEL_42:
    v22 = i;
LABEL_43:
    sub_22F115668(v22);
    sub_22F1167E8(v57);
    v2 = a1;
    v28 = (_QWORD *)*a1;
    v29 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    v60 = (uint64_t)v62;
    v61 = v53;
    v63 = 0;
    v30 = sub_22F11598C(*v7);
    if (v61.i64[0] < (unint64_t)v30)
      sub_22EEB52C0(&v60, v30);
    v33 = sub_22EC0F9F4((_QWORD **)a1, (uint64_t)&v60, v18, v20, v31, v32);
    if (v33 < 0x10)
    {
LABEL_46:
      v14 = 1;
      goto LABEL_47;
    }
    v34 = v33;
    v35 = v18;
    while (2)
    {
      while (2)
      {
        if ((v35 & 0xF) != 0)
          goto LABEL_67;
        v36 = *(unsigned __int8 *)(*(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v36 > 0x39)
        {
LABEL_62:
          if (sub_22F115668(v35))
            v18 = v35;
          v35 = sub_22F115B7C(v35);
          if (!v35)
            goto LABEL_69;
          continue;
        }
        break;
      }
      if (v36 == 24)
        break;
      if (v36 != 26)
      {
        if (((1 << v36) & 0x20000000200003CLL) != 0)
          goto LABEL_67;
        goto LABEL_62;
      }
      if ((*(_BYTE *)(v35 + 23) & 0x10) == 0)
      {
LABEL_67:
        v35 = sub_22F115B7C(v35);
        continue;
      }
      break;
    }
    v18 = v35;
LABEL_69:
    v38 = sub_22F115668(v18);
    v39 = sub_22F1167E8(v57);
    v2 = a1;
    v40 = sub_22F34AE9C((_QWORD *)*a1, v34, v38 | ((unint64_t)v39 << 32), *v8, v52 | ((unint64_t)(v51 != 0) << 32));
    if (v40 < 0x10)
      goto LABEL_46;
    v41 = v40;
    sub_22EEB5360((uint64_t)&v60, v40, 4uLL, 4);
    *v42 = *v8;
    v43 = *(_QWORD *)(*a1 + 88);
    v44 = v61.i64[0] - v61.i64[1];
    v45 = v61.i32[0] - v61.i32[2];
    if (v61.i32[0] == v61.i32[2])
      v45 = sub_22F11598C(v41);
    v46 = (_QWORD *)sub_22E3CD3D4(v43 + 2032, v45 + 8, 3);
    *v46 = v41;
    memcpy(v46 + 1, (const void *)(v60 + v61.i64[1]), v44);
    v47 = v65;
    if (v65 >= (unint64_t)HIDWORD(v65))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v47 = v65;
    }
    v64[v47] = (uint64_t)v46;
    LODWORD(v65) = v65 + 1;
    v14 = 4;
LABEL_47:
    if ((_BYTE *)v60 != v62 && v60)
      MEMORY[0x2348A0E84]();
    *((_DWORD *)v28 + 2998) = v29;
    if (v58[0] != v59)
      free(v58[0]);
    v5 = 1;
    v6 = (_DWORD *)v54;
    v3 = v55;
LABEL_53:
    if (v14 == 4)
    {
      if (++v4 == v3)
      {
LABEL_76:
        if (*(_DWORD *)(*v2 + 11992) != -1 || (v5 & 1) != 0)
          v48 = sub_22EBC6244(*v2, (*a2 >> 18), a2[4], v64, v65, a2[5]);
        else
          v48 = (uint64_t)a2;
        goto LABEL_81;
      }
      continue;
    }
    break;
  }
  v48 = 1;
LABEL_81:
  if (v64 != v66)
    free(v64);
  return v48;
}

uint64_t sub_22EC0F4AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  uint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  _QWORD *v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;

  v2 = a2;
  if ((*(_BYTE *)(a2 + 2) & 0x40) != 0)
  {
    v9 = *(uint64_t **)(a2 + 16);
    v10 = sub_22EC0F7CC((_QWORD **)a1, v9);
    if (v10)
    {
      v11 = v10;
      v12 = (_QWORD *)*a1;
      if (v9 != (uint64_t *)v10 || *((_DWORD *)v12 + 2998) != -1)
      {
        v14 = *(_DWORD *)(v2 + 24);
        v15 = (*(_DWORD *)v2 >> 18) & 0xF;
        sub_22F0D4E74(v2);
        return sub_22EB28664((uint64_t)v12, v11, v14, v15, v16);
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v4 = (_QWORD *)*a1;
    sub_22EB4DECC(*a1, 0, 0, 3);
    v24 = 0;
    v5 = *(unsigned __int8 **)(v2 + 16);
    if (*v5 == 214 && (v6 = (unsigned __int8 *)*((_QWORD *)v5 + 3), *v6 == 163))
    {
      v7 = sub_22EC215B0(a1, *((_QWORD *)v5 + 3), 0, &v24);
      if (v7 >= 2)
      {
        if (v6 == (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL) && *(_DWORD *)(*a1 + 11992) == -1)
          v7 = (unint64_t)v5;
        else
          v7 = sub_22EB27A20((_QWORD *)*a1, *((_DWORD *)v5 + 4), *((_DWORD *)v5 + 5), v7 & 0xFFFFFFFFFFFFFFFELL);
      }
    }
    else
    {
      v7 = sub_22EBCEF90(a1, *(_QWORD *)(v2 + 16));
    }
    v18 = v24;
    if (v24)
    {
      v19 = *(_DWORD *)(v2 + 24);
      v20 = (*(_DWORD *)v2 >> 18) & 0xF;
      sub_22F0D4E74(v2);
      v2 = sub_22EB28664(*a1, v18, v19, v20, v21);
    }
    else if ((v7 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v22 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v22)
      {
        v23 = sub_22EB28F24((_QWORD *)*a1, v22, *(_DWORD *)(v2 + 24), (*(_DWORD *)v2 >> 18) & 0xF);
        if ((v23 & 1) != 0)
          v2 = 1;
        else
          v2 = v23;
      }
    }
    sub_22EB48E64(v4);
  }
  return v2;
}

uint64_t sub_22EC0F684(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = *(_DWORD *)a2 & 0x7C0000;
  v5 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == 0x100000 && *v5 == 163)
    v6 = sub_22EC215B0(a1, (uint64_t)v5, 1, 0);
  else
    v6 = sub_22EBCEF90(a1, v5);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v7)
    return sub_22EB2941C((_QWORD *)*a1, 0, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 0x1F, v7);
  return v2;
}

uint64_t sub_22EC0F728(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22EC0F7CC(a1, (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EBCEF90(a1, *(_QWORD *)(v2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  if (*((_DWORD *)*a1 + 2998) != -1
    || v5 != (uint64_t *)(*(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF8)
    || *(_QWORD *)(v2 + 16) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB4B7A8(*a1, *(_DWORD *)(v2 + 32), v6 & 0xFFFFFFFFFFFFFFFELL, v5, *(_DWORD *)(v2 + 36));
  }
  return v2;
}

unint64_t *sub_22EC0F7CC(_QWORD **a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  unsigned __int32 v17;
  uint64_t v19;
  int64x2_t v20;
  _BYTE v21[32];
  uint64_t v22;
  uint64_t v23;

  v2 = (unint64_t *)a2;
  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t)(a2 + 1);
  v5 = *a2;
  for (i = *a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_12;
      v7 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v7 <= 0x39)
        break;
LABEL_7:
      if (sub_22F115668(i))
        v5 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_14;
    }
    if (v7 == 24)
      goto LABEL_13;
    if (v7 == 26)
      break;
    if (((1 << v7) & 0x20000000200003CLL) == 0)
      goto LABEL_7;
LABEL_12:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_12;
LABEL_13:
  v5 = i;
LABEL_14:
  sub_22F115668(v5);
  v8 = *v2;
  if (*v2 >= 0x10)
  {
    v19 = (uint64_t)v21;
    v20 = vdupq_n_s64(0x20uLL);
    v22 = 0;
    v9 = sub_22F11598C(v8);
    if (v20.i64[0] < (unint64_t)v9)
      sub_22EEB52C0(&v19, v9);
    v12 = sub_22EC0F9F4(a1, (uint64_t)&v19, v8, v4, v10, v11);
    if (v12 > 0xF)
    {
      v14 = v12;
      v15 = (*a1)[11];
      v16 = v20.i64[0] - v20.i64[1];
      v17 = v20.i32[0] - v20.i32[2];
      if (v20.i32[0] == v20.i32[2])
        v17 = sub_22F11598C(v14);
      v2 = (unint64_t *)sub_22E3CD3D4(v15 + 2032, v17 + 8, 3);
      *v2 = v14;
      v13 = (_BYTE *)v19;
      memcpy(v2 + 1, (const void *)(v19 + v20.i64[1]), v16);
    }
    else
    {
      v2 = 0;
      v13 = (_BYTE *)v19;
    }
    if (v13 != v21 && v13)
      MEMORY[0x2348A0E84](v13, 0x1000C8077774924);
  }
  return v2;
}

unint64_t sub_22EC0F9F4(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if ((a3 & 0xF) == 0)
    __asm { BR              X11 }
  v8 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if ((v8 & 0xFFFFFFFFFFFFFFF0) != 0)
    v9 = *(_QWORD *)((char *)&unk_22F483088
                   + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v9 = 1;
  v10 = sub_22EC0F9F4(a1, a2, v8, (a4 + v9 - 1) & -v9, a5, a6);
  v11 = 0;
  if (v10 >= 0x10)
  {
    v12 = sub_22E8C1750(a1, v10, a3);
    if (v12 >= 0x10)
      return v12;
    else
      return 0;
  }
  return v11;
}

unint64_t sub_22EC14078(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  if (a2 >= 0x10)
  {
    v3 = sub_22EF579A8(*(_QWORD *)(*(_QWORD *)a1 + 88), a2, 0);
    v4 = sub_22EC0F7CC(a1, v3);
    if (v4)
      return *(_QWORD *)v4;
    else
      return 0;
  }
  return a2;
}

unint64_t sub_22EC140CC(uint64_t *a1, unint64_t a2, void *__s2, unint64_t a4, uint64_t a5)
{
  unint64_t v6;
  unsigned int v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  void *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD v65[2];
  int v66;
  int v67;
  unsigned int v68[24];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unint64_t v72;
  _OWORD *v73;
  uint64_t v74;
  _QWORD v75[11];

  v6 = a2;
  v75[8] = *MEMORY[0x24BDAC8D0];
  v73 = v75;
  v74 = 0x400000000;
  if (!a2)
  {
    v49 = 0;
    v70 = 0u;
    v71 = 0u;
    goto LABEL_76;
  }
  v10 = 0;
  v11 = a2;
  do
  {
    if (v10 >= HIDWORD(v74))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = v74;
    }
    v12 = (unint64_t *)&v73[v10];
    *v12 = v11;
    v12[1] = (unint64_t)__s2;
    v10 = v74 + 1;
    LODWORD(v74) = v74 + 1;
    v11 = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  while (v11);
  v70 = 0u;
  v71 = 0u;
  if (!v10)
  {
    v49 = 0;
    goto LABEL_76;
  }
  v63 = a1 + 1;
  do
  {
    LODWORD(v74) = v10 - 1;
    v13 = v73[v10 - 1];
    v69 = v13;
    v14 = v13;
    v15 = *(_QWORD *)(v13 + 16);
    if (!v15)
    {
      v37 = *(_QWORD *)(*a1 + 88);
      v38 = sub_22F0AB0EC((unint64_t *)&v69);
      sub_22F0AB958((uint64_t)&v70 + 8, v37, v38);
      *(_QWORD *)&v70 = v38 | ((unint64_t)v38 << 32);
      goto LABEL_39;
    }
    v16 = *(_QWORD *)(v13 + 8);
    v17 = (v16 >> 1) & 3;
    if (v17 - 2 >= 2)
    {
      if (v17 == 1)
      {
        v34 = *(_DWORD *)(v15 + 28) & 0x7F;
        if ((v34 - 35) < 3)
        {
          v46 = sub_22F0AABF8(v13);
          v72 = v46;
          v65[0] = 0;
          if (sub_22E793870(v63, &v72, v65) && v65[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
            v46 = *(_QWORD *)(v65[0] + 8);
          v47 = *(_QWORD *)(*a1 + 88);
          v48 = sub_22F0AB0EC((unint64_t *)&v69);
          sub_22F3E8E2C((uint64_t *)&v70 + 1, v47, v46, v48, SHIDWORD(v48));
          *(_QWORD *)&v70 = v48;
        }
        else
        {
          sub_22F0AB364((uint64_t *)&v69);
          v35 = *(_QWORD *)(v14 + 8) & 6;
          if (v34 == 16)
          {
            if (v35 == 2)
            {
              if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x10)
                v36 = *(_QWORD *)(v14 + 16);
              else
                v36 = 0;
            }
            else
            {
              v36 = 0;
            }
            v72 = v36;
            v65[0] = 0;
            if (sub_22E793870(v63, &v72, v65) && v65[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
              v36 = *(_QWORD *)(v65[0] + 8);
          }
          else
          {
            if (v35 == 2)
            {
              if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x11)
                v36 = *(_QWORD *)(v14 + 16);
              else
                v36 = 0;
            }
            else
            {
              v36 = 0;
            }
            v72 = v36;
            v65[0] = 0;
            if (sub_22E793870(v63, &v72, v65) && v65[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
              v36 = *(_QWORD *)(v65[0] + 8);
          }
          v39 = *(_QWORD *)(*a1 + 88);
          v40 = sub_22F0AB364((uint64_t *)&v69);
          v41 = sub_22F0AB364((uint64_t *)&v69);
          v42 = HIDWORD(v41);
          sub_22F0AB8AC((uint64_t *)&v70 + 1, v39, v36, v40, SHIDWORD(v41));
          if (!(_DWORD)v70)
            LODWORD(v70) = v40;
          DWORD1(v70) = v42;
        }
        goto LABEL_39;
      }
      if ((v16 & 6) != 0)
        v43 = 0;
      else
        v43 = *(_QWORD *)(v13 + 16);
      v44 = sub_22F0AB364((uint64_t *)&v69);
      v45 = sub_22F0AB364((uint64_t *)&v69);
      v65[0] = a4;
      v65[1] = v43;
      v66 = v44;
      v67 = HIDWORD(v45);
      LOBYTE(v62) = 0;
      if ((sub_22E958D90(*a1, 0, v65, 0, &v70, a5, 0, 0, v62) & 1) == 0)
        goto LABEL_39;
      goto LABEL_89;
    }
    v19 = sub_22F0AB4E0((uint64_t)&v69);
    v20 = (uint64_t)v18;
    if (v19 > 0xF)
    {
      v21 = sub_22EC14FB0(a1, v19, v18, a4, (uint64_t)&v70);
      if (!v21)
        goto LABEL_89;
      v20 = (uint64_t)(v21 + 1);
      v19 = *v21;
    }
    if (!v19)
      goto LABEL_89;
    v22 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
    v23 = *(_DWORD *)(v22 + 16);
    v24 = *(_QWORD *)(v22 + 8);
    if ((v23 & 0x400) == 0)
    {
      v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 16);
      v26 = *a1;
      if (v25 == 45)
        goto LABEL_23;
      if (v25 == 44 && (**(_QWORD **)(v26 + 72) & 0x200) != 0)
        goto LABEL_23;
      if ((v19 & 0xF) == 0 && v23 == 50 && (*(_BYTE *)(*(_QWORD *)(v19 + 24) + 28) & 0x80) != 0)
        goto LABEL_89;
      v57 = v19;
      v58 = v19;
      while (1)
      {
        if ((v58 & 0xF) != 0)
          goto LABEL_112;
        v59 = *(unsigned __int8 *)(*(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v59 > 0x39)
        {
LABEL_107:
          if (sub_22F115668(v58))
            v57 = v58;
          v58 = sub_22F115B7C(v58);
          if (!v58)
            goto LABEL_115;
        }
        else
        {
          if (v59 == 24)
            goto LABEL_114;
          if (v59 == 26)
          {
            if ((*(_BYTE *)(v58 + 23) & 0x10) != 0)
            {
LABEL_114:
              v57 = v58;
LABEL_115:
              v60 = sub_22F115668(v57);
              sub_22E8FCA40((_QWORD *)v26, v60, 0xF99u, 0, (uint64_t)v65);
              v72 = v19;
              v61 = sub_22E8901B8((uint64_t)v65, (uint64_t *)&v72);
              v64 = v70;
              sub_22E8906A0(v61, &v64);
              sub_22E903BEC((unsigned int *)v65);
LABEL_89:
              v6 = 0;
              goto LABEL_93;
            }
          }
          else if (((1 << v59) & 0x20000000200003CLL) == 0)
          {
            goto LABEL_107;
          }
LABEL_112:
          v58 = sub_22F115B7C(v58);
        }
      }
    }
    v26 = *a1;
    v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 16);
LABEL_23:
    if (v25 != 44)
      goto LABEL_38;
    v28 = v19;
    for (i = v19; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_35;
        v30 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v30 <= 0x39)
          break;
LABEL_30:
        if (sub_22F115668(i))
          v28 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_37;
      }
      if (v30 == 24)
        goto LABEL_36;
      if (v30 == 26)
        break;
      if (((1 << v30) & 0x20000000200003CLL) == 0)
        goto LABEL_30;
LABEL_35:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_35;
LABEL_36:
    v28 = i;
LABEL_37:
    v31 = sub_22F115668(v28);
    sub_22E8FCA40((_QWORD *)v26, v31, 0x1927u, 0, (uint64_t)v68);
    sub_22E903BEC(v68);
    v26 = *a1;
LABEL_38:
    v32 = *(_QWORD *)(v26 + 88);
    v33 = sub_22F0AB364((uint64_t *)&v69);
    sub_22E8ACD1C((uint64_t)&v70, v32, 0, v19, v20, SHIDWORD(v33));
LABEL_39:
    a4 = 0;
    a5 = 0;
    v10 = v74;
  }
  while ((_DWORD)v74);
  v49 = *((_QWORD *)&v70 + 1);
LABEL_76:
  if (v49 != v6 || *(_DWORD *)(*a1 + 11992) != -1)
  {
    v50 = DWORD2(v71);
    v51 = 0;
    if (v6)
    {
      do
      {
        v52 = *(_QWORD *)(v6 + 8);
        if ((v52 & 4) != 0)
          v53 = 12;
        else
          v53 = 8;
        if (*(_QWORD *)(v6 + 16))
          v54 = v53;
        else
          v54 = 4;
        v51 += v54;
        v6 = v52 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v52 & 0xFFFFFFFFFFFFFFF8) != 0);
    }
    if (DWORD2(v71) != v51 || memcmp((const void *)v71, __s2, DWORD2(v71)))
    {
      if (!v49)
        goto LABEL_89;
      if (HIDWORD(v71))
      {
        v55 = (void *)sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, v50, 3);
        memcpy(v55, (const void *)v71, DWORD2(v71));
        v49 = *((_QWORD *)&v70 + 1);
      }
    }
    v6 = v49;
  }
LABEL_93:
  if (HIDWORD(v71))
    free((void *)v71);
  if (v73 != (_OWORD *)v75)
    free(v73);
  return v6;
}

uint64_t sub_22EC14878(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[9];

  v6[6] = *MEMORY[0x24BDAC8D0];
  if (a3 != a5)
  {
    sub_22EDC0108(*a2, a3, 0, (uint64_t)v6);
    __asm { BR              X9 }
  }
  return 0;
}

BOOL sub_22EC14B5C(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  _BOOL8 v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v41;
  void *v42[2];
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;

  v4 = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v24 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      if (!v24)
        v24 = (unint64_t)sub_22EF579A8(*(_QWORD *)(*a1 + 88), *(_QWORD *)(a2 + 8), 0);
      v25 = sub_22EC0F7CC(a1, v24);
      if (v25)
      {
        v26 = *(_QWORD *)v25;
        *(_DWORD *)a3 = 1;
        *(_QWORD *)(a3 + 8) = v26;
        *(_QWORD *)(a3 + 24) = v25 & 0xFFFFFFFFFFFFFFFCLL | 2;
        return 0;
      }
      return v4;
    case 2:
    case 3:
    case 4:
      v8 = sub_22F0EECF4();
      v9 = sub_22EC14078((uint64_t)a1, v8);
      if (v9 < 0x10)
        return 1;
      v10 = v9;
      v11 = *(_QWORD *)(a2 + 16);
      if (*(_DWORD *)a2 == 2)
        v12 = *(_QWORD *)(a2 + 16);
      else
        v12 = 0;
      if (v12)
      {
        v43 = v12;
        *(_QWORD *)&v41 = 0;
        if (sub_22E793870(a1 + 1, &v43, &v41))
        {
          if ((_QWORD)v41 != a1[1] + 16 * *((unsigned int *)a1 + 6))
          {
            v11 = *(_QWORD *)(v41 + 8);
            if (!v11)
              return 1;
          }
        }
      }
      else
      {
        v11 = 0;
      }
      if (v10 == v8 && v12 == v11)
      {
        v4 = 0;
        v32 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(_OWORD *)(a3 + 16) = v32;
        return v4;
      }
      if (*(_DWORD *)a2 == 3)
      {
        v4 = 0;
        *(_DWORD *)a3 = 3;
        *(_QWORD *)(a3 + 8) = v10;
LABEL_52:
        *(_QWORD *)(a3 + 24) = 0;
        return v4;
      }
      if (*(_DWORD *)a2 != 4)
      {
        v4 = 0;
        *(_DWORD *)a3 = 2;
        *(_QWORD *)(a3 + 8) = v10;
        *(_QWORD *)(a3 + 16) = v11;
        goto LABEL_52;
      }
      v33 = *(_QWORD *)(*a1 + 88);
      sub_22E466FDC(a2, (uint64_t)&v43);
      sub_22F0EEA4C((uint64_t)&v41, v33, &v43, v10);
      *(_OWORD *)a3 = v41;
      *(void **)(a3 + 16) = v42[0];
      *(_QWORD *)(a3 + 24) = 0;
      if (v44 >= 0x41 && v43)
        MEMORY[0x2348A0E84](v43, 0x1000C8000313F17);
      return 0;
    case 5:
      v27 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      v28 = *(_QWORD *)(v27 + 8);
      if (*(_QWORD *)v27)
      {
        v29 = sub_22EC140CC((int)a1, *(_QWORD *)v27, *(void **)(v27 + 8));
        if (!v29)
          return v4;
        v31 = v29;
        v28 = v30;
      }
      else
      {
        v31 = 0;
      }
      v41 = 0u;
      *(_OWORD *)v42 = 0u;
      sub_22E8ACE30((uint64_t)&v41, v31, v28);
      if ((*(_DWORD *)a2 - 5) > 1)
        v34 = 0;
      else
        v34 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
      v35 = sub_22EBEF62C((uint64_t)a1, (uint64_t)&v41, *(_QWORD *)(a2 + 8), v34, 0, 0);
      v4 = v35 < 8;
      if (v35 >= 8)
      {
        v36 = v35;
        v37 = *(_QWORD *)(*a1 + 88);
        if ((*(_DWORD *)a2 - 5) > 1)
          v38 = 0;
        else
          v38 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
        v39 = sub_22E3CD3D4(v37 + 2032, 24, 3);
        *(_QWORD *)v39 = v31;
        *(_QWORD *)(v39 + 8) = v28;
        *(_DWORD *)(v39 + 16) = v38;
        *(_DWORD *)(v39 + 20) = 0;
        *(_QWORD *)a3 = 5;
        *(_QWORD *)(a3 + 8) = v36;
        *(_QWORD *)(a3 + 24) = v39 & 0xFFFFFFFFFFFFFFFCLL;
      }
      if (HIDWORD(v42[1]))
        free(v42[0]);
      return v4;
    case 7:
      v13 = *a1;
      if (a4)
        v14 = 0;
      else
        v14 = 4;
      *(_QWORD *)&v41 = 0;
      v45 = 1;
      v46 = v14;
      v43 = *(unsigned int *)(v13 + 1704);
      sub_22EB4DDB8(v13 + 3688, &v46, (int *)&v43, (__int16 *)(v13 + 1693), (uint64_t *)&v41, &v45);
      v15 = *(unsigned int *)(v13 + 3696);
      v16 = v15 - 2;
      v17 = *(_QWORD *)(v13 + 3688);
      v18 = *(_DWORD *)(v17 + 576 * (v15 - 2));
      if (v18 == 5)
      {
        *(_BYTE *)(v17 + 576 * v15 - 4) = *(_BYTE *)(v17 + 576 * v16 + 572);
        v19 = 1;
      }
      else if (v18 == 2)
      {
        *(_BYTE *)(v17 + 576 * v15 - 4) = 1;
        v19 = *(_BYTE *)(v17 + 576 * v16 + 573) != 0;
      }
      else
      {
        v19 = 0;
        *(_BYTE *)(v17 + 576 * v15 - 4) = 0;
      }
      v20 = v17 + 576 * v15;
      *(_BYTE *)(v20 - 3) = v19;
      *(_WORD *)(v13 + 1693) = 0;
      if (*(_DWORD *)(v13 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v13 + 1776), (llvm::SmallPtrSetImplBase *)(v20 - 560));
        sub_22EAEAE08(v13 + 1840, (uint64_t *)(v20 - 496));
      }
      if ((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v21 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      else
        v21 = *(_QWORD *)(a2 + 8);
      v22 = sub_22EBCEF90(a1, v21);
      v23 = sub_22EB51A84(*a1, v22);
      v4 = v23 & 1;
      if ((v23 & 1) == 0)
      {
        *(_DWORD *)a3 = 7;
        *(_QWORD *)(a3 + 8) = v23 & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)(a3 + 24) = v23 & 0xFFFFFFFFFFFFFFFCLL | 1;
      }
      sub_22EB48E64(v13);
      return v4;
    default:
      return v4;
  }
}

_QWORD *sub_22EC14FB0(uint64_t *a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unsigned int *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  unsigned __int32 v28;
  unsigned int *v30;
  unsigned int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  int64x2_t v42;
  _BYTE v43[32];
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _DWORD v47[66];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v41 = (uint64_t)v43;
  v42 = vdupq_n_s64(0x20uLL);
  v44 = 0;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v10 == 20)
  {
    v13 = *(_QWORD *)(a2 + 40);
    v15 = a3[4];
    v14 = a3[5];
    v16 = *a1;
    LODWORD(v45) = 0;
    v46 = v13;
    v47[2] = v15;
    v47[3] = v15;
    v39 = 0;
    sub_22ED66924(v16, 0, a5, v14, (uint64_t)&v45, a4, 0, &v39, 1);
    v17 = 0;
    v18 = v39;
    if (v39 < 8)
      goto LABEL_22;
    v39 = a2;
    v40 = a3;
    v45 = v47;
    v46 = 0x800000000;
    v47[64] = a3[6];
    v47[65] = a3[7];
    v19 = 0;
    if ((sub_22EC157B0((uint64_t)a1, (uint64_t)&v39, 0, (uint64_t)&v39, *(_DWORD *)(a2 + 20)) & 1) == 0)
    {
      if ((~(_BYTE)v18 & 6) == 0 && (v18 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v19 = sub_22F36CB1C(*(_QWORD *)(*a1 + 88), (*(_DWORD *)(v39 + 16) >> 19), *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 16), (uint64_t)&v45);
        sub_22EEB5360((uint64_t)&v41, v19, (8 * *(_DWORD *)(v19 + 20) + 32), 8);
        v31 = v30;
        *v30 = *v40;
        v33 = *(_QWORD *)(a5 + 8);
        v32 = (uint64_t *)(a5 + 8);
        if (!v33 || !sub_22F0ABC50(v32, *(_QWORD *)(*a1 + 88)))
          v34 = 0;
        *((_QWORD *)v31 + 1) = v34;
        v35 = v40;
        v31[5] = v40[5];
        v31[4] = v35[4];
        v31[6] = v35[6];
        v31[7] = v35[7];
        if ((_DWORD)v46)
        {
          v36 = 0;
          v37 = v31 + 8;
          v38 = 32 * v46;
          do
          {
            *v37++ = *(_QWORD *)((char *)v45 + v36 + 24);
            v36 += 32;
          }
          while (v38 != v36);
        }
      }
      else
      {
        v20 = sub_22ED60904((_QWORD *)*a1, v18, v40[4], (uint64_t)&v45);
        v19 = v20;
        if (v20 >= 0x10)
        {
          sub_22EEB5360((uint64_t)&v41, v20, (8 * *(_DWORD *)(v20 + 20) + 16), 8);
          v22 = v40;
          v21[1] = v40[5];
          *v21 = v22[4];
          v21[2] = v22[6];
          v21[3] = v22[7];
          if ((_DWORD)v46)
          {
            v23 = 0;
            v24 = v21 + 4;
            v25 = 32 * v46;
            do
            {
              *v24++ = *(_QWORD *)((char *)v45 + v23 + 24);
              v23 += 32;
            }
            while (v25 != v23);
          }
        }
      }
    }
    if (v45 != v47)
      free(v45);
  }
  else
  {
    if (v10 == 46)
    {
      v11 = sub_22EBEF62C((uint64_t)a1, a5, *(_QWORD *)(a2 + 32), *a3, a4, 1);
      if (v11 < 8)
      {
LABEL_18:
        v17 = 0;
        goto LABEL_22;
      }
      v12 = sub_22EC1537C((_QWORD **)a1, (uint64_t)&v41, a2, a3, v11);
    }
    else
    {
      v12 = sub_22EC0F9F4(a1, &v41, a2, a3, a5, a4);
    }
    v19 = v12;
  }
  if (v19 < 0x10)
    goto LABEL_18;
  v26 = *(_QWORD *)(*a1 + 88);
  v27 = v42.i64[0] - v42.i64[1];
  v28 = v42.i32[0] - v42.i32[2];
  if (v42.i32[0] == v42.i32[2])
    v28 = sub_22F11598C(v19);
  v17 = (_QWORD *)sub_22E3CD3D4(v26 + 2032, v28 + 8, 3);
  *v17 = v19;
  memcpy(v17 + 1, (const void *)(v41 + v42.i64[1]), v27);
LABEL_22:
  if ((_BYTE *)v41 != v43 && v41)
    MEMORY[0x2348A0E84]();
  return v17;
}

unint64_t sub_22EC1537C(_QWORD **a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v19;
  uint64_t v20;
  _DWORD v21[66];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v20 = 0x800000000;
  v21[64] = a4[2];
  v21[65] = a4[3];
  if (*(_DWORD *)(a3 + 20))
    __asm { BR              X9 }
  v5 = sub_22ED60904(*a1, a5, *a4, (uint64_t)&v19);
  v6 = v5;
  if (v5 >= 0x10)
  {
    v7 = 8 * *(_DWORD *)(v5 + 20);
    if (*(_BYTE *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 16) == 20)
    {
      sub_22EEB5360(a2, v5, (v7 + 32), 8);
      *(_DWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 20) = a4[1];
      *(_DWORD *)(v8 + 16) = *a4;
      *(_DWORD *)(v8 + 24) = a4[2];
      *(_DWORD *)(v8 + 28) = a4[3];
      if ((_DWORD)v20)
      {
        v9 = 0;
        v10 = (_QWORD *)(v8 + 32);
        v11 = 32 * v20;
        do
        {
          *v10++ = *(_QWORD *)((char *)v19 + v9 + 24);
          v9 += 32;
        }
        while (v11 != v9);
      }
    }
    else
    {
      sub_22EEB5360(a2, v5, (v7 + 16), 8);
      v13[1] = a4[1];
      *v13 = *a4;
      v13[2] = a4[2];
      v13[3] = a4[3];
      if ((_DWORD)v20)
      {
        v14 = 0;
        v15 = v13 + 4;
        v16 = 32 * v20;
        do
        {
          *v15++ = *(_QWORD *)((char *)v19 + v14 + 24);
          v14 += 32;
        }
        while (v16 != v14);
      }
    }
  }
  if (v19 != v21)
    free(v19);
  return v6;
}

uint64_t sub_22EC157B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  if (a2 != a4 || a3 != a5)
    __asm { BR              X9 }
  return 0;
}

unint64_t sub_22EC15A98(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40[18];
  int v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  __int128 v45;
  void *v46[2];
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[64];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int v59;
  _BYTE v60[24];
  int v61;
  __int16 v62;
  char v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[64];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned int v73;
  _BYTE v74[24];
  int v75;
  __int16 v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v10 = sub_22EC140CC(a1, *(_QWORD *)(a3 + 32), *(void **)(a4 + 8), 0, 0);
  if (!v10)
    return 0;
  v12 = v11;
  v13 = (*(_DWORD *)(a3 + 16) >> 19);
  v14 = *(_DWORD *)a4;
  v15 = *(_QWORD *)(a3 + 40);
  v16 = *(_DWORD *)(a4 + 16);
  v48 = v10;
  v49 = v11;
  v47 = v15;
  v45 = 0u;
  *(_OWORD *)v46 = 0u;
  sub_22E8ACE30((uint64_t)&v45, v10, v11);
  if ((sub_22F0AAC5C(v48) & 4) != 0 && !sub_22E958204(*a1, (uint64_t)&v45, 0))
  {
    v17 = sub_22EF65A30(*(_QWORD *)(*a1 + 88), v13, v48, v47, 0);
    goto LABEL_18;
  }
  if ((v13 - 5) <= 1)
  {
    v17 = sub_22ED717D8((_QWORD *)*a1, v13, v14, v48, v49, v47, v16, a5);
LABEL_18:
    v24 = v17;
    goto LABEL_40;
  }
  v44 = v13;
  v18 = (_QWORD *)*a1;
  v64 = 0;
  v65 = v67;
  v66 = 0x800000000;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = v18;
  v72 = v47;
  v73 = v16;
  sub_22EFC6D6C((uint64_t)v74, v47);
  *(_OWORD *)&v74[8] = xmmword_22F4555C0;
  v75 = 16842752;
  v76 = 0;
  v77 = 0;
  sub_22EC56024((uint64_t)&v64);
  v43 = 0;
  v19 = sub_22E958204(*a1, (uint64_t)&v45, 0);
  v43 = v19;
  if (v19)
  {
    if ((sub_22E958490(*a1, &v45, v19) & 1) == 0)
    {
      sub_22EC611AC(*a1, &v64, v43, 0);
      if ((_DWORD)v64 != 5)
      {
        if ((_DWORD)v64 != 2)
          goto LABEL_19;
        v20 = *(_QWORD *)v65 & 0xFFFFFFFFFFFFFFFCLL;
        v21 = *(_DWORD *)(v20 + 28) & 0x7F;
        if (v21 <= 0x2F && ((1 << v21) & 0xC00000060000) != 0)
        {
          v20 = sub_22EFBAEA4(*(_QWORD *)v65 & 0xFFFFFFFFFFFFFFFCLL);
          v21 = *(_DWORD *)(v20 + 28) & 0x7F;
        }
        if (v21 - 33 < 5)
        {
          if ((sub_22EA33594(*a1, v20, v44, 0, v16, v47) & 1) != 0)
          {
            v22 = *(_QWORD *)(v20 + 48);
            if (v22)
              v23 = v22 & 0xFFFFFFFFFFFFFFF0;
            else
              v23 = sub_22EF6462C(*(_QWORD *)(*a1 + 88), v20);
            v24 = sub_22EF65684(*(_QWORD *)(*a1 + 88), v13, v48, v23, 0);
            goto LABEL_31;
          }
          sub_22E8FCA40((_QWORD *)*a1, v14, 0x13E0u, 0, (uint64_t)&v50);
          sub_22E8BAE44((uint64_t)&v50, &v47);
          sub_22E903BEC((unsigned int *)&v50);
          sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v20 + 24), 0x6Fu, 0, (uint64_t)&v50);
          sub_22E903BEC((unsigned int *)&v50);
        }
        else
        {
LABEL_19:
          v25 = (_QWORD *)*a1;
          v50 = 0;
          v51 = v53;
          v52 = 0x800000000;
          v54 = 0;
          v55 = 0;
          v56 = 0;
          v57 = v25;
          v58 = v47;
          v59 = v16;
          sub_22EFC6D6C((uint64_t)v60, v47);
          *(_OWORD *)&v60[8] = xmmword_22F4555C0;
          v61 = 16842752;
          v62 = 0;
          v63 = 0;
          sub_22EC56024((uint64_t)&v50);
          sub_22EC611AC(*a1, &v50, v43, 0);
          if ((v50 - 2) <= 2)
          {
            v42 = *(_QWORD *)v51 & 0xFFFFFFFFFFFFFFFCLL;
            v35 = (_QWORD *)*a1;
            v41 = sub_22F31E40C(*a1, v42, v44);
            sub_22E8FCA40(v35, v16, 0x12A5u, 0, (uint64_t)v40);
            v36 = sub_22E890024((uint64_t)v40, (uint64_t *)&v42);
            v37 = sub_22E8900C4(v36, &v41);
            sub_22E8900C4(v37, (int *)&v44);
            sub_22E903BEC(v40);
            sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v42 + 24), 0x64u, 0, (uint64_t)v40);
          }
          else
          {
            sub_22E8FCA40((_QWORD *)*a1, v16, 0xFDFu, 0, (uint64_t)v40);
            v26 = sub_22E8900C4((uint64_t)v40, (int *)&v44);
            v27 = sub_22E8BAE44(v26, &v47);
            v28 = sub_22E894FB4(v27, (uint64_t *)&v43);
            v42 = sub_22F0AB0EC(&v48);
            sub_22E8906A0(v28, (uint64_t *)&v42);
          }
          sub_22E903BEC(v40);
          if (HIBYTE(v61))
          {
            if ((_DWORD)v50 == 5)
            {
              sub_22EC64D18(v57, (uint64_t)&v50);
            }
            else if (v55 && (*(_DWORD *)(v57[9] + 52) & 0x400000) != 0)
            {
              sub_22E90B5FC((unint64_t)v57, (uint64_t)&v50);
            }
          }
          if (v54)
          {
            v39 = sub_22EC6CBD0(v54);
            MEMORY[0x2348A0E9C](v39, 0x10E0C409F09D3C3);
          }
          if (v51 != v53)
            free(v51);
        }
      }
    }
  }
  v24 = 0;
LABEL_31:
  if (HIBYTE(v75))
  {
    if ((_DWORD)v64 == 5)
    {
      sub_22EC64D18(v71, (uint64_t)&v64);
    }
    else if (v69 && (*(_DWORD *)(v71[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v71, (uint64_t)&v64);
    }
  }
  if (v68)
  {
    v38 = sub_22EC6CBD0(v68);
    MEMORY[0x2348A0E9C](v38, 0x10E0C409F09D3C3);
  }
  if (v65 != v67)
    free(v65);
LABEL_40:
  if (HIDWORD(v46[1]))
    free(v46[0]);
  if (v24 < 0x10)
    return 0;
  v29 = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0);
  if (v29)
    v30 = *(_BYTE *)(v29 + 16) == 24;
  else
    v30 = 0;
  if (v30
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 24
    && (v29 = sub_22F10CF48(v29)) != 0)
  {
    sub_22EEB5360(a2, *(_QWORD *)(v29 + 40), 4uLL, 4);
    *v31 = *(_DWORD *)(a4 + 16);
    sub_22EEB5360(a2, v24, 0x10uLL, 8);
    *(_DWORD *)v32 = *(_DWORD *)a4;
    *(_QWORD *)(v32 + 8) = v12;
  }
  else
  {
    sub_22EEB5360(a2, v24, 0x18uLL, 8);
    *(_DWORD *)v33 = *(_DWORD *)a4;
    *(_QWORD *)(v33 + 8) = v12;
    *(_DWORD *)(v33 + 16) = *(_DWORD *)(a4 + 16);
  }
  return v24;
}

uint64_t sub_22EC160C0(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t i;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v54;
  unsigned int v56;
  void **v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  _QWORD v61[6];

  v61[4] = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  if (!a3)
    return 0;
  v11 = a5;
  v12 = a2;
  v13 = a1;
  v14 = 0;
  v56 = 0;
  v54 = a3;
  while (1)
  {
    v15 = *(_QWORD *)(v12 + 8 * v14);
    if (v15)
      break;
    v30 = *(_QWORD *)(a4 + 8 * v14);
    v31 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
    if (v31 && *(_BYTE *)(v31 + 16) == 36)
    {
      v32 = *(_QWORD *)(v31 + 32);
      v59 = v61;
      v60 = 0x200000000;
      v57 = &v59;
      LOBYTE(v58) = 0;
      HIDWORD(v58) = -1;
      sub_22EE72E1C((uint64_t)&v57, v32);
      v33 = *(_QWORD *)(v31 + 32);
      v34 = (uint64_t)v13;
      v35 = *v13;
      v36 = *(_DWORD *)(v35 + 11992);
      *(_DWORD *)(v35 + 11992) = -1;
      v37 = sub_22EC14078(v34, v33);
      *(_DWORD *)(v35 + 11992) = v36;
      if (v59 != v61)
        free(v59);
      if (v37 < 0x10)
        return 1;
      v13 = a1;
      v38 = sub_22EF663B4(*(_QWORD *)(*a1 + 88), v37, 0);
      v8 = v54;
    }
    else
    {
      v38 = sub_22EC14078((uint64_t)v13, v30);
      if (v38 < 0x10)
        return 1;
    }
    if (v11)
      sub_22F2F3918(a8, *(_DWORD *)(a6 + 8), *(_BYTE *)(v11 + v14));
    v40 = *(unsigned int *)(a6 + 8);
    if (v40 >= *(unsigned int *)(a6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v40 = *(unsigned int *)(a6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a6 + 8 * v40) = v38;
    ++*(_DWORD *)(a6 + 8);
    if (a7)
    {
      v41 = *(unsigned int *)(a7 + 8);
      if (v41 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v41 = *(unsigned int *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v41) = 0;
LABEL_60:
      ++*(_DWORD *)(a7 + 8);
    }
LABEL_61:
    if (++v14 == v8)
      return 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
  {
    v39 = sub_22EC16588(v13, *(_QWORD *)(v12 + 8 * v14), 0);
    if (v39)
      goto LABEL_52;
    return 1;
  }
  v59 = v61;
  v60 = 0x200000000;
  v16 = *(_QWORD *)(v15 + 56);
  v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 4) != 0)
    v17 = (uint64_t *)v17[4];
  v20 = *v17;
  v18 = v17 + 1;
  v19 = v20;
  v21 = *(_QWORD *)(v20 + 32);
  if (v21 >= 0x10 && (v21 & 0xF) == 0)
    v42 = *(_QWORD *)((char *)&unk_22F483088
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v42 = 1;
  v57 = (void **)v21;
  v58 = ((unint64_t)v18 + v42 + 3) & -v42;
  sub_22EE73804(*v13, v21, v58, (uint64_t)&v59);
  if (!(_DWORD)v60)
  {
    v24 = 0;
    LOBYTE(v27) = 0;
    goto LABEL_49;
  }
  v23 = *(_DWORD *)(v19 + 20);
  v24 = v23 != 0;
  v25 = v23 != 0;
  v26 = v23 - 1;
  if (v25)
    v27 = v26;
  else
    v27 = 0;
  v56 = v27 >> 8;
  for (i = v21; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_28;
      v29 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v29 <= 0x39)
        break;
LABEL_23:
      if (sub_22F115668(i))
        v21 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_48;
    }
    if (v29 == 24)
      goto LABEL_47;
    if (v29 == 26)
      break;
    if (((1 << v29) & 0x20000000200003CLL) == 0)
      goto LABEL_23;
LABEL_28:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_28;
LABEL_47:
  v21 = i;
LABEL_48:
  sub_22F115668(v21);
  sub_22F1167E8((uint64_t *)&v57);
LABEL_49:
  v43 = *a1;
  v44 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  v45 = v27 | (v56 << 8) | (unint64_t)(v24 << 32);
  v13 = a1;
  v39 = sub_22EC16588(a1, v15, v45);
  *(_DWORD *)(v43 + 11992) = v44;
  v12 = a2;
  v11 = a5;
  if (v59 != v61)
    free(v59);
  v8 = v54;
  if (v39)
  {
LABEL_52:
    if (v11)
      sub_22F2F3918(a8, *(_DWORD *)(a6 + 8), *(_BYTE *)(v11 + v14));
    v46 = *(_QWORD *)(v39 + 48);
    v47 = *(unsigned int *)(a6 + 8);
    if (v47 >= *(unsigned int *)(a6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v47 = *(unsigned int *)(a6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a6 + 8 * v47) = v46;
    ++*(_DWORD *)(a6 + 8);
    if (a7)
    {
      v48 = *(unsigned int *)(a7 + 8);
      if (v48 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v48 = *(unsigned int *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v48) = v39;
      goto LABEL_60;
    }
    goto LABEL_61;
  }
  return 1;
}

unint64_t sub_22EC16588(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int i;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  int *v51;
  uint64_t v52;
  size_t v53;
  unsigned __int32 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[2];
  char v58[8];
  int64x2_t v59;
  _BYTE v60[32];
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 56);
  v7 = (unint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0)
    v7 = (unint64_t *)v7[4];
  if ((a3 & 0xFF00000000) == 0 || (v8 = *v7, *(_BYTE *)(*(_QWORD *)(*v7 & 0xFFFFFFFFFFFFFFF0) + 16) != 36))
  {
    v17 = (uint64_t *)sub_22EC0F7CC(a1, v7);
    if (v17)
      goto LABEL_20;
    return 0;
  }
  *(_QWORD *)v58 = v60;
  v59 = vdupq_n_s64(0x20uLL);
  v61 = 0;
  v9 = sub_22F11598C(v8);
  if (v59.i64[0] < (unint64_t)v9)
    sub_22EEB52C0((uint64_t *)v58, v9);
  v12 = (int *)(v7 + 1);
  v13 = *(_QWORD *)(v8 + 32);
  if (v13 >= 0x10 && (*(_QWORD *)(v8 + 32) & 0xFLL) == 0)
    v46 = *(_QWORD *)((char *)&unk_22F483088
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v46 = 1;
  v15 = sub_22EC0F9F4(a1, v58, v13, ((unint64_t)v7 + v46 + 11) & -v46, v10, v11);
  if (v15 < 0x10)
  {
LABEL_14:
    v16 = 0;
    v17 = 0;
    goto LABEL_15;
  }
  v36 = v15;
  v37 = *(_QWORD *)(v8 + 32);
  v56 = v37;
  if (v37 >= 0x10 && (v37 & 0xF) == 0)
    v55 = *(_QWORD *)((char *)&unk_22F483088
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v55 = 1;
  v39 = *(_QWORD *)(v8 + 32);
  v57[0] = v39;
  v57[1] = ((unint64_t)v7 + v55 + 11) & -v55;
  while (1)
  {
    while (1)
    {
      if ((v39 & 0xF) != 0)
        goto LABEL_77;
      v40 = *(unsigned __int8 *)(*(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v40 <= 0x39)
        break;
LABEL_72:
      v41 = v39;
      v42 = sub_22F115668(v39);
      v43 = v56;
      if (v42)
        v43 = v41;
      v56 = v43;
      v39 = sub_22F115B7C(v41);
      if (!v39)
        goto LABEL_85;
    }
    if (v40 == 24)
      goto LABEL_84;
    if (v40 == 26)
      break;
    if (((1 << v40) & 0x20000000200003CLL) == 0)
      goto LABEL_72;
LABEL_77:
    v39 = sub_22F115B7C(v39);
  }
  if ((*(_BYTE *)(v39 + 23) & 0x10) == 0)
    goto LABEL_77;
LABEL_84:
  v56 = v39;
LABEL_85:
  v47 = sub_22F115668(v56);
  v48 = sub_22F1167E8(v57);
  v49 = sub_22F34AE9C((_QWORD *)*a1, v36, v47 | ((unint64_t)v48 << 32), *v12, a3);
  if (v49 < 0x10)
    goto LABEL_14;
  v50 = v49;
  sub_22EEB5360((uint64_t)v58, v49, 4uLL, 4);
  *v51 = *v12;
  v52 = *(_QWORD *)(*a1 + 88);
  v53 = v59.i64[0] - v59.i64[1];
  v54 = v59.i32[0] - v59.i32[2];
  if (v59.i32[0] == v59.i32[2])
    v54 = sub_22F11598C(v50);
  v17 = (uint64_t *)sub_22E3CD3D4(v52 + 2032, v54 + 8, 3);
  *v17 = v50;
  memcpy(v17 + 1, (const void *)(*(_QWORD *)v58 + v59.i64[1]), v53);
  v16 = 1;
LABEL_15:
  if (*(_BYTE **)v58 != v60 && *(_QWORD *)v58)
    MEMORY[0x2348A0E84]();
  if ((v16 & 1) == 0 || !v17)
    return 0;
LABEL_20:
  if (v17 != (uint64_t *)v7)
  {
    v20 = *(_QWORD *)(a2 + 16);
    v21 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
    if ((v20 & 4) != 0)
      v21 = (_QWORD *)*v21;
    v22 = *(_QWORD *)(a2 + 40);
    if ((v22 & 7) != 0)
      v23 = 0;
    else
      v23 = v22 & 0xFFFFFFFFFFFFFFF8;
    v24 = sub_22EFBF080(*(_QWORD *)(*a1 + 88), (uint64_t)v21, *(_DWORD *)(a2 + 64), *(_DWORD *)(a2 + 24), v23, *v17, (uint64_t)v17, *(_BYTE *)(a2 + 96) & 7, 0);
    v18 = v24;
    v25 = *(_DWORD *)(a2 + 96);
    if ((v25 & 0x1000) != 0)
      v26 = 0;
    else
      v26 = v25 & 0xFE000;
    v27 = (v25 >> 20);
    if (v27 == 255)
    {
      v28 = a2;
      if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
      {
        v29 = *(_QWORD *)(a2 + 16);
        v30 = v29 & 0xFFFFFFFFFFFFFFF8;
        if ((v29 & 4) != 0)
          v30 = *(_QWORD *)v30;
        for (i = *(_WORD *)(v30 + 8) & 0x7F; i != 83; i = *(_WORD *)(v30 + 8) & 0x7F)
        {
          v32 = -40;
          if (i > 70)
          {
            if (i == 71)
            {
              v32 = -56;
              goto LABEL_54;
            }
            if (i == 81)
              goto LABEL_54;
          }
          else
          {
            if (i <= 0x18)
            {
              if (i == 16)
                goto LABEL_41;
              if (((1 << i) & 0x1066) != 0)
                goto LABEL_54;
              if (i == 24)
              {
LABEL_41:
                v32 = -48;
                goto LABEL_54;
              }
            }
            if (i == 70)
            {
              v32 = -64;
              goto LABEL_54;
            }
          }
          v33 = i - 52;
          if ((i - 33) >= 5)
            v34 = -48;
          else
            v34 = -64;
          if (v33 >= 6)
            v32 = v34;
          else
            v32 = -72;
LABEL_54:
          v35 = *(_QWORD *)(v30 + v32 + 16);
          v30 = v35 & 0xFFFFFFFFFFFFFFF8;
          if ((v35 & 4) != 0)
            v30 = *(_QWORD *)v30;
        }
        v28 = v30 - 40;
      }
      v27 = sub_22F36F2CC(*(_QWORD *)(v28 + 88), a2);
      v44 = (unsigned int *)(v18 + 96);
      v45 = *(_DWORD *)(v18 + 96) & 0xFFF01FFF | v26;
      *(_DWORD *)(v18 + 96) = v45;
      if (v27 >= 0xFF)
      {
        sub_22F3AC2B8(v18, v27);
LABEL_83:
        *(_QWORD *)v58 = a2;
        sub_22F25E108(a1 + 1, v58)[1] = v18;
        return v18;
      }
    }
    else
    {
      v44 = (unsigned int *)(v24 + 96);
      v45 = *(_DWORD *)(v24 + 96) & 0xFFF01FFF | v26;
    }
    *v44 = v45 & 0xF00FFFFF | (v27 << 20);
    goto LABEL_83;
  }
  return a2;
}

uint64_t sub_22EC16AA4(uint64_t **a1, unsigned int a2, int *a3, uint64_t a4, _BYTE *a5)
{
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  int v18;
  uint64_t v19;
  void **v20;
  uint64_t i;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t *v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  unint64_t v33;
  uint64_t result;
  uint64_t v35;
  int *v36;
  unint64_t v38;
  int v40;
  int v41;
  void **v42;
  char v43;
  int v44;
  void *v45[2];
  _QWORD v46[5];

  v46[4] = *MEMORY[0x24BDAC8D0];
  v8 = *a3;
  if ((*a3 - 6) <= 2)
  {
    v9 = *a1;
    v45[0] = 0;
    v40 = 3;
    v41 = 4;
    v42 = (void **)*((unsigned int *)v9 + 426);
    sub_22EB4DDB8((uint64_t)(v9 + 461), &v41, (int *)&v42, (__int16 *)((char *)v9 + 1693), (uint64_t *)v45, &v40);
    v10 = *((unsigned int *)v9 + 924);
    v11 = v10 - 2;
    v12 = v9[461];
    v13 = *(_DWORD *)(v12 + 576 * (v10 - 2));
    if (v13 == 5)
    {
      *(_BYTE *)(v12 + 576 * v10 - 4) = *(_BYTE *)(v12 + 576 * v11 + 572);
      v14 = 1;
    }
    else if (v13 == 2)
    {
      *(_BYTE *)(v12 + 576 * v10 - 4) = 1;
      v14 = *(_BYTE *)(v12 + 576 * v11 + 573) != 0;
    }
    else
    {
      v14 = 0;
      *(_BYTE *)(v12 + 576 * v10 - 4) = 0;
    }
    v15 = v12 + 576 * v10;
    *(_BYTE *)(v15 - 3) = v14;
    *(_WORD *)((char *)v9 + 1693) = 0;
    if (*((_DWORD *)v9 + 462))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v9 + 222), (llvm::SmallPtrSetImplBase *)(v15 - 560));
      sub_22EAEAE08((uint64_t)(v9 + 230), (uint64_t *)(v15 - 496));
    }
    v16 = sub_22EBCEF90(a1, *((_QWORD *)a3 + 3));
    if ((v16 & 1) != 0
      || (LODWORD(v45[0]) = *a3,
          v17 = sub_22EB14270(*a1, (unsigned __int8 *)(v16 & 0xFFFFFFFFFFFFFFFELL), (int *)v45),
          (v17 & 1) != 0))
    {
      sub_22EB48E64(v9);
      return 1;
    }
    v18 = (int)v45[0];
    if (*((_QWORD *)a3 + 3) != ((unint64_t)v17 & 0xFFFFFFFFFFFFFFFELL) || LODWORD(v45[0]) != *a3)
      *a5 = 1;
    *((_QWORD *)a3 + 3) = (unint64_t)v17 & 0xFFFFFFFFFFFFFFFELL;
    *a3 = v18;
    sub_22EB48E64(v9);
    v8 = *a3;
  }
  if (v8 != 2)
    return 0;
  v36 = a3;
  v19 = *((_QWORD *)a3 + 2);
  if (v19)
  {
    v20 = (void **)*((_QWORD *)a3 + 1);
    v38 = a2 | ((unint64_t)a2 << 32);
    for (i = 8 * v19; i; i -= 8)
    {
      v22 = *v20;
      v23 = *(_QWORD *)((unint64_t)*v20 & 0xFFFFFFFFFFFFFFF0);
      if (v23 && *(_BYTE *)(v23 + 16) == 36
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 36
        && (v23 = sub_22F10CF48(v23)) != 0)
      {
        *a5 = 1;
        v45[0] = v46;
        v45[1] = (void *)0x200000000;
        v24 = *(_QWORD *)(v23 + 32);
        v42 = v45;
        v43 = 0;
        v44 = -1;
        sub_22EE72E1C((uint64_t)&v42, v24);
        v25 = *(_DWORD *)(v23 + 20);
        v26 = *a1;
        v27 = *((_DWORD *)*a1 + 2998);
        *((_DWORD *)*a1 + 2998) = -1;
        v28 = sub_22EC14078((uint64_t)a1, *(_QWORD *)(v23 + 32));
        if (v28 >= 0x10)
        {
          LODWORD(v29) = v25 - 1;
          if (v25)
            v29 = v29;
          else
            v29 = 0;
          v30 = sub_22EF663B4((*a1)[11], v28, v29 | ((unint64_t)(v25 != 0) << 32));
          v31 = *(unsigned int *)(a4 + 8);
          if (v31 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v31 = *(unsigned int *)(a4 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a4 + 8 * v31) = v30;
          ++*(_DWORD *)(a4 + 8);
        }
        *((_DWORD *)v26 + 2998) = v27;
        if (v45[0] != v46)
          free(v45[0]);
        if (v28 < 0x10)
          return 1;
      }
      else
      {
        v45[0] = (void *)sub_22EC14078((uint64_t)a1, (unint64_t)v22);
        if (v45[0] < (void *)0x10 || (sub_22EB14454((uint64_t)*a1, (unint64_t *)v45, v38) & 1) != 0)
          return 1;
        v32 = v45[0];
        if (v22 != v45[0])
          *a5 = 1;
        v33 = *(unsigned int *)(a4 + 8);
        if (v33 >= *(unsigned int *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v33 = *(unsigned int *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v33) = v32;
        ++*(_DWORD *)(a4 + 8);
      }
      ++v20;
    }
  }
  v35 = *(unsigned int *)(a4 + 8);
  *((_QWORD *)v36 + 1) = *(_QWORD *)a4;
  *((_QWORD *)v36 + 2) = v35;
  if ((_DWORD)v35)
    return 0;
  result = 0;
  *v36 = 1;
  return result;
}

unint64_t sub_22EC16EC4(_QWORD **a1, uint64_t a2, unint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7;
  unint64_t v10;
  unint64_t v12;
  unint64_t result;
  uint64_t v14;
  int *v15;
  uint64_t v16;

  v7 = a3;
  v10 = *(_QWORD *)(a3 + 32);
  if (v10 >= 0x10 && (v10 & 0xF) == 0)
    v16 = *(_QWORD *)((char *)&unk_22F483088
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v16 = 1;
  v12 = sub_22EC0F9F4(a1, a2, v10, ((unint64_t)a4 + v16 + 3) & -v16, a5, a6);
  result = 0;
  if (v12 >= 0x10)
  {
    if (*((_DWORD *)*a1 + 2998) == -1 && v12 == *(_QWORD *)(v7 + 32)
      || (v7 = sub_22EE7E490(*a1, v12, (*(_DWORD *)(v7 + 16) >> 19) & 1, *a4), result = 0, v7 >= 0x10))
    {
      v14 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
      if (!v14 || (*(_DWORD *)(v14 + 16) & 0xFE) != 0x28)
        sub_22F10CF48(v14);
      sub_22EEB5360(a2, v7, 4uLL, 4);
      *v15 = *a4;
      return v7;
    }
  }
  return result;
}

uint64_t sub_22EC16FD8(uint64_t *a1, unsigned __int8 **a2, unsigned int a3, int a4, uint64_t a5, _BYTE *a6)
{
  _BYTE *v6;
  int v8;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  int v31;
  uint64_t v32;
  void *v33[2];
  _QWORD v34[5];

  v34[4] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v6 = a6;
  v8 = a4;
  v11 = v34;
  v12 = a3;
  while (1)
  {
    v13 = *a2;
    if (v8)
      break;
    if (*v13 != 213)
    {
      v14 = sub_22EBCEF90(a1, *a2);
      if ((v14 & 1) != 0)
        return 1;
      goto LABEL_20;
    }
LABEL_9:
    v15 = *((_QWORD *)v13 + 3);
    v16 = v11;
    v33[0] = v11;
    v33[1] = (void *)0x200000000;
    v17 = *a1;
    v31 = 7;
    v32 = v15;
    sub_22EE7377C(v17, (uint64_t)&v31, (uint64_t)v33);
    v18 = *((_DWORD *)v13 + 5);
    v19 = *a1;
    v20 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    v21 = sub_22EBCEF90(a1, v15);
    if ((v21 & 1) != 0)
    {
      v24 = 0;
      v6 = a6;
    }
    else
    {
      LODWORD(v22) = v18 - 1;
      if (v18)
        v22 = v22;
      else
        v22 = 0;
      v23 = sub_22EE739C0(*a1, v21 & 0xFFFFFFFFFFFFFFFELL, *((unsigned int *)v13 + 4), v22 | ((unint64_t)(v18 != 0) << 32));
      v24 = 0;
      v6 = a6;
      if ((v23 & 1) == 0)
      {
        if (a6)
          *a6 = 1;
        v25 = *(unsigned int *)(a5 + 8);
        if (v25 >= *(unsigned int *)(a5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v25 = *(unsigned int *)(a5 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v25) = v23 & 0xFFFFFFFFFFFFFFFELL;
        ++*(_DWORD *)(a5 + 8);
        v24 = 1;
      }
    }
    *(_DWORD *)(v19 + 11992) = v20;
    v11 = v16;
    if (v33[0] != v16)
      free(v33[0]);
    v8 = a4;
    if ((v24 & 1) == 0)
      return 1;
LABEL_30:
    ++a2;
    if (!--v12)
      return 0;
  }
  if (!sub_22EFFF908(*a2))
  {
    v13 = *a2;
    if (**a2 != 213)
    {
      v14 = sub_22EC1726C(a1, *a2, 0);
      if ((v14 & 1) != 0)
        return 1;
LABEL_20:
      v26 = v14 & 0xFFFFFFFFFFFFFFFELL;
      if (v6 && *a2 != (unsigned __int8 *)v26)
        *v6 = 1;
      v27 = *(unsigned int *)(a5 + 8);
      if (v27 >= *(unsigned int *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = *(unsigned int *)(a5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v27) = v26;
      ++*(_DWORD *)(a5 + 8);
      goto LABEL_30;
    }
    goto LABEL_9;
  }
  if (v6)
  {
    result = 0;
    *v6 = 1;
    return result;
  }
  return 0;
}

uint64_t sub_22EC1726C(uint64_t *a1, unsigned __int8 *a2, char a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 **v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t *v41;
  unsigned int v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[9];

  v55[8] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v4 = a2;
  while (1)
  {
    v6 = *v4;
    if ((v6 & 0xFE) == 0xAC)
    {
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
      v6 = *v4;
    }
    if (v6 == 106)
    {
      v4 = *(unsigned __int8 **)(*((_QWORD *)v4 + 2) + 16);
      v6 = *v4;
    }
    if (v6 == 186)
    {
      v7 = *((_QWORD *)v4 + 2);
      v4 = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFF8);
      if ((v7 & 4) != 0)
        v4 = (unsigned __int8 *)*((_QWORD *)v4 + 5);
    }
    while (1)
    {
      v8 = *v4;
      if (v8 != 116)
        break;
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 3);
    }
    if (v8 == 153)
    {
      v4 = sub_22EFFB374(v4);
      v8 = *v4;
    }
    if (v8 != 132)
      break;
    v9 = (unsigned __int8 **)(v4 + 16);
LABEL_30:
    v4 = *v9;
    if (!*v9)
      return 0;
  }
  v10 = v8 & 0xFE;
  v11 = v8;
  if ((a3 & 1) == 0)
  {
    if (v10 != 118 || (*(_DWORD *)v4 & 0x100000) == 0)
      return sub_22EBCEF90(a1, v4);
    v11 = *(_DWORD *)v4;
  }
  if (v8 == 179)
  {
    v20 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v15 = v20;
    v21 = 0;
    v22 = 0;
    goto LABEL_35;
  }
  if (v8 == 131)
  {
    sub_22F0D4E74((uint64_t)v4);
    v18 = HIDWORD(v17);
    v19 = v17;
    v20 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v15 = v20;
    v21 = v19;
    v22 = v18;
LABEL_35:
    sub_22F002D50(v20, v21, 0, 0, v22);
    return v15;
  }
  if (v10 != 118 || v11 == 119)
    return sub_22EBCEF90(a1, v4);
  if ((*(_DWORD *)v4 & 0x200000) != 0)
  {
    v12 = *(_DWORD *)v4;
    v13 = v12 == 119;
    if (v12 == 119)
      v14 = v4;
    else
      v14 = 0;
    v9 = (unsigned __int8 **)(v14 + 48);
    if (!v13)
      v9 = (unsigned __int8 **)(v4 + 40);
    goto LABEL_30;
  }
  v23 = *a1;
  if ((*(_DWORD *)v4 & 0x100000) == 0
    || ((v25 = *(_DWORD *)(*(_QWORD *)(v23 + 3688) + 576 * *(unsigned int *)(v23 + 3696) - 576), v25 <= 3)
      ? (v26 = v25 == 2)
      : (v26 = 1),
        v26))
  {
    v24 = 1;
  }
  else
  {
    v24 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v23 + 72) + 1) & 2) != 0)
    {
      v53 = 0;
      v51 = 3;
      v52 = 1;
      v50 = *(unsigned int *)(v23 + 1704);
      sub_22EB4DDB8(v23 + 3688, &v52, (int *)&v50, (__int16 *)(v23 + 1693), (uint64_t *)&v53, &v51);
      v27 = *(unsigned int *)(v23 + 3696);
      v28 = v27 - 2;
      v29 = *(_QWORD *)(v23 + 3688);
      v30 = *(_DWORD *)(v29 + 576 * (v27 - 2));
      if (v30 == 5)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = *(_BYTE *)(v29 + 576 * v28 + 572);
        v31 = 1;
      }
      else if (v30 == 2)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = 1;
        v31 = *(_BYTE *)(v29 + 576 * v28 + 573) != 0;
      }
      else
      {
        v31 = 0;
        *(_BYTE *)(v29 + 576 * v27 - 4) = 0;
      }
      v32 = v29 + 576 * v27;
      *(_BYTE *)(v32 - 3) = v31;
      *(_WORD *)(v23 + 1693) = 0;
      if (*(_DWORD *)(v23 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v23 + 1776), (llvm::SmallPtrSetImplBase *)(v32 - 560));
        sub_22EAEAE08(v23 + 1840, (uint64_t *)(v32 - 496));
      }
      v24 = 0;
    }
  }
  v53 = v55;
  v54 = 0x800000000;
  LOBYTE(v50) = 0;
  v33 = *v4;
  v34 = v33 == 119;
  if (v33 == 119)
    v35 = v4;
  else
    v35 = 0;
  v36 = v35 + 48;
  if (v34)
    v37 = v36;
  else
    v37 = v4 + 40;
  v15 = 1;
  if ((sub_22EC16FD8(a1, v37, *((unsigned int *)v4 + 8), 1, &v53, &v50) & 1) != 0)
    goto LABEL_64;
  if ((*(_DWORD *)v4 & 0x100000) == 0)
  {
    v15 = 0;
    v38 = *((_QWORD *)v4 + 3);
    v39 = HIDWORD(v38);
    if (HIDWORD(v38))
    {
      v40 = v38;
      if ((_DWORD)v38)
      {
        v41 = (uint64_t *)v53;
        v42 = v54;
        v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v54 + 24, 3);
        sub_22F002D50(v15, v40, v41, v42, v39);
      }
    }
    goto LABEL_64;
  }
  if (*(_DWORD *)v4 != 119)
  {
    v43 = *((_DWORD *)v4 + 1);
    goto LABEL_63;
  }
  v47 = **((_QWORD **)v4 + 5);
  v48 = v47;
  while (2)
  {
    while (2)
    {
      if ((v48 & 0xF) != 0)
        goto LABEL_79;
      v49 = *(unsigned __int8 *)(*(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v49 > 0x39)
      {
LABEL_74:
        if (sub_22F115668(v48))
          v47 = v48;
        v48 = sub_22F115B7C(v48);
        if (!v48)
          goto LABEL_83;
        continue;
      }
      break;
    }
    if (v49 == 24)
      break;
    if (v49 != 26)
    {
      if (((1 << v49) & 0x20000000200003CLL) != 0)
        goto LABEL_79;
      goto LABEL_74;
    }
    if ((*(_BYTE *)(v48 + 23) & 0x10) == 0)
    {
LABEL_79:
      v48 = sub_22F115B7C(v48);
      continue;
    }
    break;
  }
  v47 = v48;
LABEL_83:
  v43 = sub_22F115668(v47);
LABEL_63:
  v44 = (uint64_t *)v53;
  v45 = v54;
  sub_22F060B18(v4);
  v15 = sub_22EB353A0(*a1, v43, v44, v45, v46);
LABEL_64:
  if (v53 != v55)
    free(v53);
  if ((v24 & 1) == 0)
    sub_22EB48E64(v23);
  return v15;
}

uint64_t sub_22EC17788(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t result;

  if (!a2)
    return (uint64_t)a2;
  v8 = a3;
  switch(a2->n128_u8[0])
  {
    case 1u:
      result = sub_22EC17E84(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      break;
    case 2u:
      result = sub_22EC183B4(a1, (uint64_t)a2);
      break;
    case 3u:
    case 9u:
    case 0x13u:
    case 0x60u:
      result = nullsub_910(a2);
      break;
    case 4u:
      result = sub_22EC185B0((_QWORD **)a1, (uint64_t)a2);
      break;
    case 5u:
      result = sub_22EC186D8(a1, (uint64_t)a2);
      break;
    case 6u:
      result = sub_22EC1899C(a1, (uint64_t)a2);
      break;
    case 7u:
      result = sub_22EC18B24(a1, (uint64_t)a2);
      break;
    case 8u:
      result = sub_22EC18D3C(a1, (uint64_t)a2);
      break;
    case 0xAu:
      result = sub_22EC18D44(a1, (uint64_t)a2);
      break;
    case 0xBu:
      result = sub_22EC18D98(a1, (uint64_t)a2);
      break;
    case 0xCu:
      result = sub_22EBF43C8(a1, (uint64_t)a2);
      break;
    case 0xDu:
      result = sub_22EC19080(a1, (uint64_t)a2);
      break;
    case 0xEu:
      result = sub_22EC19128(a1, (uint64_t)a2);
      break;
    case 0xFu:
      result = sub_22EB77BB4((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x10u:
      result = sub_22EC192FC((uint64_t)a1, (unsigned __int16 *)a2);
      break;
    case 0x11u:
      result = sub_22EC19624(a1, (uint64_t)a2);
      break;
    case 0x12u:
      result = sub_22EC1969C(a1, (uint64_t)a2);
      break;
    case 0x14u:
      result = sub_22EC198A8((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x15u:
      result = sub_22EC198B4(a1, a2);
      break;
    case 0x16u:
      result = sub_22EC19920(a1, a2);
      break;
    case 0x17u:
      result = sub_22EC1998C(a1, a2);
      break;
    case 0x18u:
      result = sub_22EC199F8(a1, a2);
      break;
    case 0x19u:
      result = sub_22EC19A64(a1, a2);
      break;
    case 0x1Au:
      result = sub_22EC19AD4(a1, a2);
      break;
    case 0x1Bu:
      result = sub_22EC19B40(a1, a2);
      break;
    case 0x1Cu:
      result = sub_22EC19BAC(a1, a2);
      break;
    case 0x1Du:
      result = sub_22EC19C18(a1, a2);
      break;
    case 0x1Eu:
      result = sub_22EC19C84(a1, a2);
      break;
    case 0x1Fu:
      result = sub_22EC19CF0(a1, a2);
      break;
    case 0x20u:
      result = sub_22EC19D5C(a1, a2);
      break;
    case 0x21u:
      result = sub_22EC19DC8(a1, a2);
      break;
    case 0x22u:
      result = sub_22EC19E34(a1, a2);
      break;
    case 0x23u:
      result = sub_22EC19EA0(a1, a2);
      break;
    case 0x24u:
      result = sub_22EC19F0C(a1, a2);
      break;
    case 0x25u:
      result = sub_22EC19F78(a1, a2);
      break;
    case 0x26u:
      result = sub_22EC19FE4(a1, a2);
      break;
    case 0x27u:
      result = sub_22EC1A050(a1, a2);
      break;
    case 0x28u:
      result = sub_22EC1A0BC(a1, a2);
      break;
    case 0x29u:
      result = sub_22EC1A128(a1, a2);
      break;
    case 0x2Au:
      result = sub_22EC1A194(a1, a2);
      break;
    case 0x2Bu:
      result = sub_22EC1A200(a1, a2);
      break;
    case 0x2Cu:
      result = sub_22EC1A26C(a1, a2);
      break;
    case 0x2Du:
      result = sub_22EC1A2D8(a1, a2);
      break;
    case 0x2Eu:
      result = sub_22EC1A344(a1, a2);
      break;
    case 0x2Fu:
      result = sub_22EC1A3B0(a1, a2);
      break;
    case 0x30u:
      result = sub_22EC1A41C(a1, a2);
      break;
    case 0x31u:
      result = sub_22EC1A488(a1, a2);
      break;
    case 0x32u:
      result = sub_22EC1A4F4(a1, a2);
      break;
    case 0x33u:
      result = sub_22EC1A560(a1, a2);
      break;
    case 0x34u:
      result = sub_22EC1A5CC(a1, a2);
      break;
    case 0x35u:
      result = sub_22EC1A638(a1, a2);
      break;
    case 0x36u:
      result = sub_22EC1A6A4(a1, a2);
      break;
    case 0x37u:
      result = sub_22EC1A710(a1, a2);
      break;
    case 0x38u:
      result = sub_22EC1A77C(a1, a2);
      break;
    case 0x39u:
      result = sub_22EC1A7E8(a1, a2);
      break;
    case 0x3Au:
      result = sub_22EC1A854(a1, a2);
      break;
    case 0x3Bu:
      result = sub_22EC1A8C0(a1, a2);
      break;
    case 0x3Cu:
    case 0x3Du:
      result = sub_22EC1A92C(a1, a2);
      break;
    case 0x3Eu:
      result = sub_22EC1A998(a1, a2);
      break;
    case 0x3Fu:
      result = sub_22EC1AA04(a1, a2);
      break;
    case 0x40u:
      sub_22EB79398((_QWORD *)*a1, (uint64_t)a2);
      return 1;
    case 0x41u:
      result = sub_22EC1AA70(a1, a2);
      break;
    case 0x42u:
      result = sub_22EC1AADC(a1, a2);
      break;
    case 0x43u:
      result = sub_22EC1AB48(a1, a2);
      break;
    case 0x44u:
      result = sub_22EC1ABB4(a1, a2);
      break;
    case 0x45u:
      result = sub_22EC1AC20(a1, a2);
      break;
    case 0x46u:
      result = sub_22EC1AC8C(a1, a2);
      break;
    case 0x47u:
      result = sub_22EC1ACF8(a1, a2);
      break;
    case 0x48u:
      result = sub_22EC1AD64(a1, a2);
      break;
    case 0x49u:
      result = sub_22EC1ADD0(a1, a2);
      break;
    case 0x4Au:
      result = sub_22EC1AE3C(a1, a2);
      break;
    case 0x4Bu:
      result = sub_22EC1AEA8(a1, a2);
      break;
    case 0x4Cu:
      result = sub_22EC1AF14(a1, a2);
      break;
    case 0x4Du:
      result = sub_22EC1AF80(a1, a2);
      break;
    case 0x4Eu:
      result = sub_22EC1AFEC(a1, a2);
      break;
    case 0x4Fu:
      result = sub_22EC1B058(a1, a2);
      break;
    case 0x50u:
      result = sub_22EC1B0C4(a1, a2);
      break;
    case 0x51u:
      result = sub_22EC1B130(a1, a2);
      break;
    case 0x52u:
      result = sub_22EC1B19C(a1, a2);
      break;
    case 0x53u:
      result = sub_22EC1B208(a1, a2);
      break;
    case 0x54u:
      result = sub_22EC1B274(a1, a2);
      break;
    case 0x55u:
      result = sub_22EC1B2E0(a1, a2);
      break;
    case 0x56u:
      result = sub_22EC1B34C((_QWORD **)a1, (uint64_t)a2);
      break;
    case 0x57u:
      result = sub_22EC1B438(a1, (uint64_t)a2);
      break;
    case 0x58u:
      result = sub_22EC1B4A4((uint64_t **)a1, (uint64_t)a2);
      break;
    case 0x59u:
      result = sub_22EC1B558((_QWORD **)a1, (uint64_t)a2);
      break;
    case 0x5Au:
      result = sub_22EC1B5D0(a1, (uint64_t)a2);
      break;
    case 0x5Bu:
      result = sub_22EC1B7F8(a1, (uint64_t)a2);
      break;
    case 0x5Cu:
      result = sub_22EC1B864(a1, (uint64_t)a2);
      break;
    case 0x5Du:
      result = sub_22EC1B958(a1, (uint64_t)a2);
      break;
    case 0x5Eu:
      result = sub_22EC1B9A8(a1, (uint64_t)a2);
      break;
    case 0x5Fu:
      result = sub_22EC1BA14(a1, (uint64_t)a2);
      break;
    case 0x61u:
      result = sub_22EC1BA5C(a1, (uint64_t)a2);
      break;
    case 0x62u:
      result = sub_22EC1BB10(a1, (unsigned __int16 *)a2);
      break;
    case 0x63u:
      result = sub_22EC1BD20(a1, (uint64_t)a2);
      break;
    case 0x64u:
      result = sub_22EC1BD70(a1, (unsigned __int16 *)a2);
      break;
    case 0x65u:
      result = sub_22EC1BE98(a1, (unsigned int *)a2, a3);
      break;
    case 0x66u:
    case 0x67u:
    case 0x68u:
    case 0x69u:
    case 0x6Au:
    case 0x6Bu:
    case 0x6Cu:
    case 0x6Du:
    case 0x6Eu:
    case 0x6Fu:
    case 0x70u:
    case 0x71u:
    case 0x72u:
    case 0x73u:
    case 0x74u:
    case 0x75u:
    case 0x76u:
    case 0x77u:
    case 0x78u:
    case 0x79u:
    case 0x7Au:
    case 0x7Bu:
    case 0x7Cu:
    case 0x7Du:
    case 0x7Eu:
    case 0x7Fu:
    case 0x80u:
    case 0x81u:
    case 0x82u:
    case 0x83u:
    case 0x84u:
    case 0x85u:
    case 0x86u:
    case 0x87u:
    case 0x88u:
    case 0x89u:
    case 0x8Au:
    case 0x8Bu:
    case 0x8Cu:
    case 0x8Du:
    case 0x8Eu:
    case 0x8Fu:
    case 0x90u:
    case 0x91u:
    case 0x92u:
    case 0x93u:
    case 0x94u:
    case 0x95u:
    case 0x96u:
    case 0x97u:
    case 0x98u:
    case 0x99u:
    case 0x9Au:
    case 0x9Bu:
    case 0x9Cu:
    case 0x9Du:
    case 0x9Eu:
    case 0x9Fu:
    case 0xA0u:
    case 0xA1u:
    case 0xA2u:
    case 0xA3u:
    case 0xA4u:
    case 0xA5u:
    case 0xA6u:
    case 0xA7u:
    case 0xA8u:
    case 0xA9u:
    case 0xAAu:
    case 0xABu:
    case 0xACu:
    case 0xADu:
    case 0xAEu:
    case 0xAFu:
    case 0xB0u:
    case 0xB1u:
    case 0xB2u:
    case 0xB3u:
    case 0xB4u:
    case 0xB5u:
    case 0xB6u:
    case 0xB7u:
    case 0xB8u:
    case 0xB9u:
    case 0xBAu:
    case 0xBBu:
    case 0xBCu:
    case 0xBDu:
    case 0xBEu:
    case 0xBFu:
    case 0xC0u:
    case 0xC1u:
    case 0xC2u:
    case 0xC3u:
    case 0xC4u:
    case 0xC5u:
    case 0xC6u:
    case 0xC7u:
    case 0xC8u:
    case 0xC9u:
    case 0xCAu:
    case 0xCBu:
    case 0xCCu:
    case 0xCDu:
    case 0xCEu:
    case 0xCFu:
    case 0xD0u:
    case 0xD1u:
    case 0xD2u:
    case 0xD3u:
    case 0xD4u:
    case 0xD5u:
    case 0xD6u:
    case 0xD7u:
    case 0xD8u:
    case 0xD9u:
    case 0xDAu:
    case 0xDBu:
    case 0xDCu:
    case 0xDDu:
    case 0xDEu:
    case 0xDFu:
    case 0xE0u:
    case 0xE1u:
    case 0xE2u:
    case 0xE3u:
    case 0xE4u:
    case 0xE5u:
    case 0xE6u:
    case 0xE7u:
    case 0xE8u:
    case 0xE9u:
    case 0xEAu:
      v10 = sub_22EBCEF90(a1, a2);
      if (v8 == 2)
        v10 = sub_22EB49994(*a1, v10);
      result = sub_22ED2B1FC(*a1, v10, v8 == 0);
      break;
    case 0xEBu:
      result = sub_22EC1BFF0((uint64_t)a1, (uint64_t)a2, a3);
      break;
    case 0xECu:
      result = sub_22EC1C09C((uint64_t)a1, (unsigned __int16 *)a2);
      break;
    default:
      return (uint64_t)a2;
  }
  return result;
}

uint64_t sub_22EC17E84(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v47;
  unsigned int v48;
  _QWORD v49[8];
  void *v50;
  uint64_t v51;
  _BYTE v52[32];
  void *v53;
  uint64_t v54;
  _BYTE v55[64];
  char *v56;
  uint64_t v57;
  _QWORD v58[10];

  v58[8] = *MEMORY[0x24BDAC8D0];
  v56 = (char *)v58;
  v57 = 0x800000000;
  v53 = v55;
  v54 = 0x800000000;
  v50 = v52;
  v51 = 0x400000000;
  v48 = 0;
  v10 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 8 * v10;
    v14 = 1;
    while (1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + v11);
      v16 = v51;
      if (v51 >= (unint64_t)HIDWORD(v51))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v51;
      }
      *((_QWORD *)v50 + v16) = v15;
      LODWORD(v51) = v51 + 1;
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + v11);
      v18 = v57;
      if (v57 >= (unint64_t)HIDWORD(v57))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v57;
      }
      *(_QWORD *)&v56[8 * v18] = v17;
      LODWORD(v57) = v57 + 1;
      v19 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + v11);
      v20 = sub_22EBCEF90(a1, v19);
      if ((v20 & 1) != 0)
        break;
      v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v22 = v19 != (v20 & 0xFFFFFFFFFFFFFFFELL);
      v10 = v54;
      if (v54 >= (unint64_t)HIDWORD(v54))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v54;
      }
      *((_QWORD *)v53 + v10) = v21;
      v12 |= v22;
      LODWORD(v10) = v54 + 1;
      LODWORD(v54) = v54 + 1;
      v11 += 8;
      if (v13 == v11)
        goto LABEL_13;
    }
  }
  else
  {
    v12 = 0;
LABEL_13:
    v23 = *(_DWORD *)(a2 + 20);
    if (v23)
    {
      v24 = 0;
      v14 = 1;
      while (1)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v26 = v51;
        if (v51 >= (unint64_t)HIDWORD(v51))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v26 = v51;
        }
        *((_QWORD *)v50 + v26) = v25;
        LODWORD(v51) = v51 + 1;
        v27 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v28 = v57;
        if (v57 >= (unint64_t)HIDWORD(v57))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v28 = v57;
        }
        *(_QWORD *)&v56[8 * v28] = v27;
        LODWORD(v57) = v57 + 1;
        v29 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v30 = sub_22EBCEF90(a1, v29);
        if ((v30 & 1) != 0)
          break;
        v31 = v30 & 0xFFFFFFFFFFFFFFFELL;
        v32 = v29 != (v30 & 0xFFFFFFFFFFFFFFFELL);
        v10 = v54;
        if (v54 >= (unint64_t)HIDWORD(v54))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v10 = v54;
        }
        *((_QWORD *)v53 + v10) = v31;
        v12 |= v32;
        LODWORD(v10) = v54 + 1;
        LODWORD(v54) = v54 + 1;
        if (v23 == ++v24)
          goto LABEL_23;
      }
    }
    else
    {
LABEL_23:
      v33 = *(_DWORD *)(a2 + 80);
      if (v33)
      {
        v34 = 0;
        v14 = 1;
        while (1)
        {
          v35 = *(_QWORD *)(*(_QWORD *)(a2 + 72)
                          + 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20)));
          v36 = v51;
          if (v51 >= (unint64_t)HIDWORD(v51))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v36 = v51;
          }
          *((_QWORD *)v50 + v36) = v35;
          LODWORD(v51) = v51 + 1;
          v37 = sub_22EBCEF90(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32)+ 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20))));
          if ((v37 & 1) != 0)
            break;
          v38 = v37 & 0xFFFFFFFFFFFFFFFELL;
          v39 = *(_QWORD *)(*(_QWORD *)(a2 + 32)
                          + 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20))) != (v37 & 0xFFFFFFFFFFFFFFFELL);
          v10 = v54;
          if (v54 >= (unint64_t)HIDWORD(v54))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v10 = v54;
          }
          *((_QWORD *)v53 + v10) = v38;
          v12 |= v39;
          LODWORD(v10) = v54 + 1;
          LODWORD(v54) = v54 + 1;
          if (v33 == ++v34)
            goto LABEL_31;
        }
      }
      else
      {
LABEL_31:
        v40 = *a1;
        if (*(_DWORD *)(*a1 + 11992) != -1 || (v12 & 1) != 0)
        {
          v41 = *(unsigned int *)(a2 + 24);
          v42 = 0;
          if ((_DWORD)v41)
          {
            v43 = 0;
            v44 = 8 * v41;
            do
            {
              v45 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + v43);
              if (v42 >= 8)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v42 = v48;
              }
              v49[v42] = v45;
              v42 = ++v48;
              v43 += 8;
            }
            while (v44 != v43);
            LODWORD(v10) = v54;
            v40 = *a1;
          }
          v14 = sub_22ED4E804(v40, *(_DWORD *)(a2 + 8), *(_BYTE *)(a2 + 12), *(_BYTE *)(a2 + 13), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v50, a8, v56, v57, (uint64_t *)v53, v10, *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL, (char *)v49, v42, 0, *(_DWORD *)(a2 + 80), v47, *(_DWORD *)(a2 + 40));
        }
        else
        {
          v14 = a2;
        }
      }
    }
  }
  if (v50 != v52)
    free(v50);
  if (v53 != v55)
    free(v53);
  if (v56 != (char *)v58)
    free(v56);
  return v14;
}

uint64_t sub_22EC183B4(uint64_t *a1, uint64_t a2)
{
  const void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v17;
  const void *v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22[10];

  v22[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(const void **)(a2 + 72);
  v5 = *(unsigned int *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20));
  v21 = 0;
  if (v7 < 9)
  {
    if (!(_DWORD)v7)
    {
      v15 = 0;
      v17 = *a1;
      goto LABEL_19;
    }
    v19 = *(const void **)(a2 + 72);
    v20 = *(unsigned int *)(a2 + 64);
  }
  else
  {
    v19 = *(const void **)(a2 + 72);
    v20 = *(unsigned int *)(a2 + 64);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v8 = 0;
  LOBYTE(v9) = 0;
  v10 = 0;
  do
  {
    while (1)
    {
      v11 = sub_22EBCEF90(a1, *(_QWORD *)(v6 + 8 * v8));
      if (v11 >= 2)
        break;
      v9 = 1;
      if (v7 - 1 == v8++)
        return v9;
    }
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    v13 = *(_QWORD *)(v6 + 8 * v8) != (v11 & 0xFFFFFFFFFFFFFFFELL);
    v14 = v21;
    if (v21 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = v21;
    }
    v22[v14] = v12;
    v10 |= v13;
    v15 = ++v21;
    ++v8;
  }
  while (v7 != v8);
  if ((v9 & 1) == 0)
  {
    v17 = *a1;
    v4 = v19;
    v5 = v20;
    if ((v10 & 1) != 0)
      return sub_22ED51D60(v17, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 40), v4, v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a2 + 80), (*(_DWORD *)(a2 + 20) + *(_DWORD *)(a2 + 16)), *(_QWORD *)(a2 + 88), *(unsigned int *)(a2 + 24), v22, v15, *(_DWORD *)(a2 + 44));
LABEL_19:
    if (*(_DWORD *)(v17 + 11992) == -1)
      return a2;
    return sub_22ED51D60(v17, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 40), v4, v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_QWORD *)(a2 + 80), (*(_DWORD *)(a2 + 20) + *(_DWORD *)(a2 + 16)), *(_QWORD *)(a2 + 88), *(unsigned int *)(a2 + 24), v22, v15, *(_DWORD *)(a2 + 44));
  }
  return 1;
}

uint64_t sub_22EC185B0(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  char *v12;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 56);
    v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 4) != 0)
      v6 = (uint64_t *)v6[4];
    if (!sub_22EC0F7CC(a1, v6))
      return 1;
    v7 = sub_22EACE428();
    if (!v7)
      return 1;
    v4 = v7;
    sub_22EFCCFA0((*a1)[27], v7);
    if ((*(_BYTE *)(v4 + 28) & 0x80) != 0)
      return 1;
  }
  v8 = sub_22EC17788(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v8 & 1) != 0)
    return 1;
  v9 = *a1;
  v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (v4 || *((_DWORD *)v9 + 2998) != -1 || *(_QWORD *)(v2 + 24) != v10)
  {
    v11 = *(_DWORD *)(v2 + 8);
    v2 = sub_22E3CD3D4(v9[11] + 2032, 32, 3);
    *(_BYTE *)v2 = 4;
    if (byte_255E04EB3)
    {
      v12 = sub_22F0D3748(4);
      ++*((_DWORD *)v12 + 2);
    }
    *(_DWORD *)(v2 + 8) = v11;
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v10;
  }
  return v2;
}

uint64_t sub_22EC186D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v23;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EC17788(a1, v4, 0);
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v5 = 0;
  }
  v6 = sub_22EC17788(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v6 & 1) != 0)
    return 1;
  v7 = sub_22EC17788(a1, *(_QWORD *)(v2 + 32), 0);
  if ((v7 & 1) != 0)
    return 1;
  v8 = sub_22EC17788(a1, *(_QWORD *)(v2 + 40), 0);
  if ((v8 & 1) != 0)
    return 1;
  v9 = sub_22EBCEF90(a1, *(_QWORD *)(v2 + 48));
  v10 = v9;
  if ((v9 & 1) != 0)
    return 1;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v10 = sub_22EB52F30(*a1, *(_DWORD *)(v2 + 84), (unsigned __int8 *)(v9 & 0xFFFFFFFFFFFFFFFELL), 0);
  if ((v10 & 1) != 0)
    return 1;
  if ((v10 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v10 = (uint64_t)sub_22EBCCCF0(*a1, (int *)(v10 & 0xFFFFFFFFFFFFFFFELL));
  v11 = sub_22EBCEF90(a1, *(_QWORD *)(v2 + 56));
  v12 = v11;
  if ((v11 & 1) != 0)
    return 1;
  if ((v11 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v12 = (unint64_t)sub_22EBCCCF0(*a1, (int *)(v11 & 0xFFFFFFFFFFFFFFFELL));
  v13 = sub_22EC17788(a1, *(_QWORD *)(v2 + 64), 0);
  v14 = v13;
  if ((v13 & 1) != 0)
    return 1;
  v15 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v23 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) == -1
    && *(_QWORD *)(v2 + 16) == v15
    && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 32) == (v7 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 40) == (v8 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 48) == (v10 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 56) == (v12 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 64) == (v13 & 0xFFFFFFFFFFFFFFFELL))
  {
    v17 = v2;
  }
  else
  {
    v16 = v13 & 0xFFFFFFFFFFFFFFFELL;
    v17 = sub_22E8C6118(a1, *(_DWORD *)(v2 + 8), *(_DWORD *)(v2 + 80), v15, *(_DWORD *)(v2 + 84), v6 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL, v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, v12 & 0xFFFFFFFFFFFFFFFELL, v13 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 88));
    if ((v17 & 1) != 0 && *(_QWORD *)(v2 + 64) != v16)
    {
      sub_22EA2BABC(*a1, *(_QWORD *)(v16 + 8));
      return 1;
    }
  }
  v18 = sub_22EC17788(a1, *(_QWORD *)(v2 + 72), 0);
  if ((v18 & 1) != 0)
    return 1;
  v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
  v20 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if ((v17 & 0xFFFFFFFFFFFFFFFELL) == v2 && *(_QWORD *)(v2 + 72) != v19)
  {
    v21 = sub_22E8C6118(a1, *(_DWORD *)(v2 + 8), *(_DWORD *)(v2 + 80), v23, *(_DWORD *)(v2 + 84), v6 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL, v8 & 0xFFFFFFFFFFFFFFFELL, v10 & 0xFFFFFFFFFFFFFFFELL, v12 & 0xFFFFFFFFFFFFFFFELL, v14 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 88));
    if ((v21 & 1) != 0)
      return 1;
    v20 = v21 & 0xFFFFFFFFFFFFFFFELL;
  }
  if (v20 != v2)
    return sub_22ED33C64(*a1, v20, v19);
  return v2;
}

uint64_t sub_22EC1899C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unsigned int v16;
  _QWORD v17[9];

  v17[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EC18D3C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v16 = 0;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (uint64_t *)(a2 + 24);
    v8 = 1;
    while (1)
    {
      v9 = sub_22EC185B0((_QWORD **)a1, *v7);
      if ((v9 & 1) != 0)
        break;
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      v6 = v6 || *v7 != v10;
      v11 = v16;
      if (v16 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v16;
      }
      v17[v11] = v10;
      v12 = ++v16;
      ++v7;
      if (!--v5)
        goto LABEL_14;
    }
  }
  else
  {
    v12 = 0;
    v6 = 0;
LABEL_14:
    v13 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1 && (*(_QWORD *)(a2 + 16) != v13 ? (v14 = 1) : (v14 = v6), (v14 & 1) == 0))
      return a2;
    else
      return sub_22ED36EF4(*a1, *(_DWORD *)(a2 + 8), v13, v17, v12);
  }
  return v8;
}

uint64_t sub_22EC18B24(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v13;
  uint64_t v14;
  const char *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  const char *v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[14];

  v34[12] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  sub_22F0D5A50(*(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 8)));
  v6 = v5;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFF8) + 72);
  v9 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFF8) + 76);
  v32 = v34;
  v33 = 0x400000000;
  if ((_DWORD)v8)
  {
    v28 = v5;
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 88;
    do
    {
      if (v9)
      {
        v11 = *(_QWORD *)(*(_QWORD *)v10 + 40) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)(*(_QWORD *)v10 + 40) & 7) != 0 || v11 == 0)
        {
          v14 = 0;
          v15 = "";
        }
        else
        {
          v13 = *(_DWORD **)(v11 + 16);
          v16 = *v13;
          v15 = (const char *)(v13 + 4);
          v14 = v16;
        }
        v17 = sub_22EC14078((uint64_t)a1, *(_QWORD *)(*(_QWORD *)v10 + 48));
        v29 = v15;
        v30 = v14;
        v31 = v17;
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v31 = 0;
      }
      v18 = sub_22E4EF088((uint64_t)&v32, (unint64_t)&v29, 1);
      v19 = (char *)v32 + 24 * v33;
      v20 = *(_OWORD *)v18;
      *((_QWORD *)v19 + 2) = *(_QWORD *)(v18 + 16);
      *(_OWORD *)v19 = v20;
      v21 = v33 + 1;
      LODWORD(v33) = v33 + 1;
      v10 += 8;
      --v9;
      --v8;
    }
    while (v8);
    v7 = *(_QWORD *)(a2 + 16);
    v22 = v32;
    v6 = v28;
  }
  else
  {
    v21 = 0;
    v22 = v34;
  }
  sub_22ED379B0(*a1, v6, 0, (v7 >> 1) & 3, (uint64_t)v22, v21, 0);
  v23 = *a1;
  sub_22E905168(*a1, 0);
  v24 = sub_22EC17788(a1, *(_QWORD *)(v4 + 8 * *(unsigned int *)(a2 + 8)), 0);
  v25 = *(_QWORD *)(*(_QWORD *)(v23 + 1896) + 8 * *(unsigned int *)(v23 + 1904) - 8);
  --*(_QWORD *)(v25 + 360);
  if ((v24 & 1) != 0)
  {
    sub_22F344E80(*a1);
    v26 = 1;
  }
  else
  {
    v26 = sub_22ED37CF8((_QWORD *)*a1, v24 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v32 != v34)
    free(v32);
  return v26;
}

uint64_t sub_22EC18D3C(uint64_t *a1, uint64_t a2)
{
  return sub_22EC1C1C8(a1, a2, 0);
}

uint64_t sub_22EC18D44(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EC1726C(a1, *(unsigned __int8 **)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB310(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, *(_BYTE *)(a2 + 32) & 1);
}

uint64_t sub_22EC18D98(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[6];
  uint64_t v30;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  void *v38;
  _QWORD v39[7];

  v39[6] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 1904);
  if ((_DWORD)v5)
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 1896) + 8 * v5 - 8);
  else
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 216);
  if (v7)
    v8 = v7 - 72;
  else
    v8 = 0;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  if (!sub_22E9FC668(*a1, *(_DWORD *)(v8 + 24)))
    return 1;
  v9 = sub_22E9F85C0();
  if (!v9)
    return 1;
  v12 = v9;
  *(_QWORD *)&v31[0] = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  sub_22F25E108(a1 + 1, v31)[1] = v9;
  *(_QWORD *)(v6 + 176) = v12;
  v13 = sub_22EC17788(a1, *(_QWORD *)(a2 + 32), 0);
  if ((v13 & 1) != 0)
    return 1;
  v14 = sub_22EC17788(a1, *(_QWORD *)(a2 + 40), 0);
  if ((v14 & 1) != 0)
    return 1;
  v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (!sub_22E9F9340((_QWORD *)*a1, (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFFELL)))
    return 1;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  *(_QWORD *)(v6 + 336) = v13 & 0xFFFFFFFFFFFFFFFELL;
  *(_QWORD *)(v6 + 344) = v15;
  v16 = sub_22EC17788(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v16 & 1) != 0)
    return 1;
  sub_22F31B0C0((uint64_t)v31, *a1, v8, v6, v16 & 0xFFFFFFFFFFFFFFFELL);
  if (!v37)
    goto LABEL_37;
  v17 = sub_22EC1726C(a1, *(unsigned __int8 **)(a2 + 80), 0);
  if ((v17 & 1) != 0)
    goto LABEL_37;
  *(_QWORD *)&v34 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22F31B2A0((uint64_t)v31) & 1) != 0)
    {
      goto LABEL_33;
    }
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(a2 + 56);
  if (v18)
  {
    v19 = sub_22EC17788(a1, v18, 0);
    if ((v19 & 1) != 0)
      goto LABEL_37;
    *((_QWORD *)&v32 + 1) = v19 & 0xFFFFFFFFFFFFFFFELL;
  }
  v20 = *(_QWORD *)(a2 + 48);
  if (v20)
  {
    v21 = sub_22EC17788(a1, v20, 0);
    if ((v21 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v32 = v21 & 0xFFFFFFFFFFFFFFFELL;
  }
  v22 = *(_QWORD *)(a2 + 96);
  if (v22)
  {
    v23 = sub_22EC17788(a1, v22, 0);
    if ((v23 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v35 = v23 & 0xFFFFFFFFFFFFFFFELL;
  }
  v24 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 64));
  if ((v24 & 1) != 0)
    goto LABEL_37;
  *(_QWORD *)&v33 = v24 & 0xFFFFFFFFFFFFFFFELL;
  v25 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 72));
  if ((v25 & 1) != 0)
    goto LABEL_37;
  *((_QWORD *)&v33 + 1) = v25 & 0xFFFFFFFFFFFFFFFELL;
  v26 = *(_QWORD *)(a2 + 88);
  if (!v26)
    goto LABEL_33;
  v27 = sub_22EC17788(a1, v26, 0);
  if ((v27 & 1) != 0)
  {
LABEL_37:
    v10 = 1;
    goto LABEL_38;
  }
  *((_QWORD *)&v34 + 1) = v27 & 0xFFFFFFFFFFFFFFFELL;
LABEL_33:
  v30 = v36;
  v29[4] = v34;
  v29[5] = v35;
  v29[0] = v31[0];
  v29[1] = v31[1];
  v29[2] = v32;
  v29[3] = v33;
  v28 = sub_22F3F2E7C(*(_QWORD *)(*a1 + 88), (uint64_t)v29);
  if (v28)
    v10 = v28;
  else
    v10 = 1;
LABEL_38:
  if (v38 != v39)
    free(v38);
  return v10;
}

uint64_t sub_22EC19080(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;

  v2 = a2;
  v4 = sub_22EC17788(a1, *(_QWORD *)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBCEF90(a1, *(_QWORD *)(v2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  if (*(_DWORD *)(*a1 + 11992) != -1
    || *(unsigned __int8 **)(v2 + 16) != v6
    || *(_QWORD *)(v2 + 8) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F3440A8(*a1, *(_DWORD *)(v2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 24), *(unsigned int *)(v2 + 24), v6, *(_DWORD *)(v2 + 28));
  }
  return v2;
}

uint64_t sub_22EC19128(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v4 = *a1;
  if (*(_DWORD *)(*(_QWORD *)(v4 + 72) + 72))
    sub_22EC80540(v4);
  v5 = sub_22EC17788(a1, *(_QWORD *)(a2 + 8), 0);
  if ((v5 & 1) != 0)
    return 1;
  if (v5 >= 2 && *(_DWORD *)(*(_QWORD *)(*a1 + 72) + 72) != 0)
    sub_22EC9AE58((_QWORD *)*a1, *(_DWORD *)(a2 + 4), (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v7 = *(_QWORD *)(a2 + 16);
  v8 = v7 ? *(_QWORD *)(v7 + 8) : 0;
  sub_22EC1C430((uint64_t)&v22, (uint64_t)a1, *(_DWORD *)(a2 + 4), v8, *(_QWORD *)(a2 + 24), 0);
  if ((_BYTE)v23)
    return 1;
  v9 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 32));
  if ((v9 & 1) != 0)
    return 1;
  v10 = *a1;
  v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    sub_22EFF605C(v9 & 0xFFFFFFFFFFFFFFFELL);
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  v14 = 1;
  v15 = sub_22EBCF22C(v10, v11, v13, 1, 0) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a2 + 32) && !v15)
    return v14;
  v16 = sub_22EC17788(a1, *(_QWORD *)(a2 + 40), 0);
  if ((v16 & 1) != 0)
    return 1;
  v17 = *a1;
  v18 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(a2 + 8) != v18)
    goto LABEL_21;
  v21 = *(_QWORD *)(a2 + 16);
  if (v21)
    v21 = *(_QWORD *)(v21 + 8);
  if ((_QWORD)v22 == v21
    && *(_OWORD *)(a2 + 24) == __PAIR128__(v11, *((unint64_t *)&v22 + 1))
    && *(_QWORD *)(a2 + 40) == (v16 & 0xFFFFFFFFFFFFFFFELL))
  {
    return a2;
  }
LABEL_21:
  v19 = *(_DWORD *)(a2 + 4);
  v24 = v22;
  v25 = v23;
  return sub_22ED31008(v17, v19, *(_DWORD *)(a2 + 48), v18, (uint64_t)&v24, v15, *(_DWORD *)(a2 + 52), (_DWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EC192FC(uint64_t a1, unsigned __int16 *a2)
{
  unsigned __int16 *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unsigned __int8 v42;
  unsigned __int8 v43;

  v2 = a2;
  if ((*a2 & 0x2000) != 0)
    v4 = *((_QWORD *)a2 + 2);
  else
    v4 = 0;
  v5 = sub_22EC17788(a1, v4, 0);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *v2;
  if ((v6 & 0x600) == 0x200)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
  }
  else
  {
    if ((v6 & 0x1000) != 0)
    {
      v12 = (v6 >> 13) & 1;
      v38 = *(_QWORD *)&v2[4 * v12 + 8];
      if (v38)
        v11 = *(_QWORD *)(v38 + 8);
      else
        v11 = 0;
    }
    else
    {
      v11 = 0;
      LODWORD(v12) = (v6 >> 13) & 1;
    }
    sub_22EC1C430((uint64_t)&v39, a1, *((_DWORD *)v2 + 1), v11, *(_QWORD *)&v2[4 * v12 + 8 + 4 * ((v6 >> 12) & 1)], (v6 & 0x700) == 256);
    if (v41)
      return 1;
    v7 = v39;
    v8 = v40;
    v9 = v42;
    v10 = v43;
    LODWORD(v6) = *v2;
  }
  v13 = (v6 & 0x700) != 0x100 || v9 == 0;
  v14 = v13;
  if (!v13 && !v10)
  {
    v15 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 8, 3);
    sub_22F0D5A50(*(_QWORD *)&v2[4 * ((*v2 >> 12) & 1) + 12 + 4 * ((*v2 >> 13) & 1)]);
    v17 = v16;
    *(_BYTE *)v15 = 19;
    if (byte_255E04EB3)
    {
      v18 = sub_22F0D3748(19);
      ++*((_DWORD *)v18 + 2);
    }
    *(_WORD *)v15 &= ~0x100u;
    *(_DWORD *)(v15 + 4) = v17;
    goto LABEL_22;
  }
  v15 = sub_22EC17788(a1, *(_QWORD *)&v2[4 * ((v6 >> 12) & 1) + 12 + 4 * ((v6 >> 13) & 1)], 0);
  if ((v15 & 1) != 0)
    return 1;
  if (v10)
    v21 = v14;
  else
    v21 = 1;
  if (v21 == 1)
  {
LABEL_22:
    v19 = *v2;
    if ((v19 & 0x800) != 0)
      v20 = *(_QWORD *)&v2[4 * ((v19 >> 13) & 1) + 16 + 4 * ((v19 >> 12) & 1)];
    else
      v20 = 0;
    v22 = sub_22EC17788(a1, v20, 0);
    if ((v22 & 1) == 0)
      goto LABEL_32;
    return 1;
  }
  v22 = 0;
LABEL_32:
  v23 = *(_QWORD *)a1;
  v24 = *v2;
  v25 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
    goto LABEL_39;
  v26 = (v24 & 0x2000) != 0 ? *((_QWORD *)v2 + 2) : 0;
  if (v26 != v25)
    goto LABEL_39;
  if ((v24 & 0x1000) != 0)
  {
    v34 = (v24 >> 13) & 1;
    v33 = *(_QWORD *)&v2[4 * v34 + 8];
    if (v33)
      v33 = *(_QWORD *)(v33 + 8);
  }
  else
  {
    v33 = 0;
    LODWORD(v34) = (v24 >> 13) & 1;
  }
  if (v7 != v33
    || (v35 = v2 + 8, v36 = v34 + ((v24 >> 12) & 1), v8 != *(_QWORD *)&v2[4 * v36 + 8])
    || *(_QWORD *)&v35[4 * (v36 + 1)] != (v15 & 0xFFFFFFFFFFFFFFFELL)
    || ((v24 & 0x800) != 0 ? (v37 = *(_QWORD *)&v35[4 * (v36 + 2)]) : (v37 = 0), v37 != (v22 & 0xFFFFFFFFFFFFFFFELL)))
  {
LABEL_39:
    v28 = (v24 >> 8) & 7;
    v29 = *((_DWORD *)v2 + 1);
    v30 = *((_DWORD *)v2 + 2);
    v31 = *((_DWORD *)v2 + 3);
    if ((v24 & 0x800) != 0)
      v32 = *(_DWORD *)&v2[4 * ((v24 >> 12) & 1) + 20 + 4 * ((v24 >> 13) & 1)];
    else
      v32 = 0;
    v39 = v7;
    v40 = v8;
    v41 = 0;
    v42 = v9;
    v43 = v10;
    return sub_22ED2D6D0(v23, v29, v28, v30, v25, (uint64_t)&v39, v31, (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFFELL), v32, (_BYTE *)(v22 & 0xFFFFFFFFFFFFFFFELL));
  }
  return (uint64_t)v2;
}

uint64_t sub_22EC19624(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (unint64_t)sub_22EBCCCF0(*a1, (int *)(v4 & 0xFFFFFFFFFFFFFFFELL)) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22ED343AC(*a1, *(_DWORD *)(v2 + 4), *(_DWORD *)(v2 + 8), v5);
  return v2;
}

uint64_t sub_22EC1969C(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  char v17;
  int v18;
  char *v19;
  __int128 v20;
  void *v21[2];
  __int128 v22;
  void *v23;
  __int128 v24;
  void *v25;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EC140CC(a1, v4, *(void **)(a2 + 24), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v22 = *(_OWORD *)(a2 + 32);
  v23 = *(void **)(a2 + 48);
  v9 = v22;
  if ((_QWORD)v22)
  {
    sub_22EC1C534((__n128 *)&v20, a1, (__n128 *)&v22);
    v22 = v20;
    v23 = v21[0];
    v9 = v20;
    if (!(_QWORD)v20)
      return 1;
  }
  if (*(_DWORD *)(*a1 + 11992) == -1)
  {
    v10 = v7 == *(_QWORD *)(a2 + 16) && v8 == *(_QWORD *)(a2 + 24);
    if (v10 && v9 == *(_QWORD *)(a2 + 32))
      return a2;
  }
  v20 = 0u;
  *(_OWORD *)v21 = 0u;
  sub_22E8ACE30((uint64_t)&v20, v7, v8);
  v13 = sub_22F3322F4(*a1, 0, (uint64_t)&v20, (uint64_t *)&v22);
  if (v13 != 2)
  {
    if (v13 == 1)
    {
      if (!*(_BYTE *)(a2 + 12))
      {
LABEL_21:
        v14 = 1;
        goto LABEL_23;
      }
    }
    else if (v13 || *(_BYTE *)(a2 + 12))
    {
      goto LABEL_21;
    }
    v11 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8, 3);
    v18 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)v11 = 19;
    if (byte_255E04EB3)
    {
      v19 = sub_22F0D3748(19);
      ++*((_DWORD *)v19 + 2);
    }
    *(_WORD *)v11 &= ~0x100u;
    *(_DWORD *)(v11 + 4) = v18;
    goto LABEL_33;
  }
  v14 = 0;
LABEL_23:
  v15 = sub_22EC18D3C(a1, *(_QWORD *)(a2 + 56));
  if ((v15 & 1) != 0)
    v11 = 1;
  else
    v11 = v15;
  if ((v14 & 1) == 0 && (v15 & 1) == 0)
  {
    v16 = *(_DWORD *)(a2 + 8);
    v17 = *(_BYTE *)(a2 + 12);
    v24 = v22;
    v25 = v23;
    v11 = sub_22F344AB0(*a1, v16, v17, v7, v8, &v24, v15 & 0xFFFFFFFFFFFFFFFELL);
  }
LABEL_33:
  if (HIDWORD(v21[1]))
    free(v21[0]);
  return v11;
}

uint64_t sub_22EC198A8(uint64_t a1, uint64_t a2)
{
  return sub_22EC17788(a1, *(_QWORD *)(a2 + 8), 0);
}

uint64_t sub_22EC198B4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC19920(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1998C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC199F8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC19A64(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC19AD4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC19B40(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC19BAC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC19C18(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC19C84(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC19CF0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC19D5C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC19DC8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC19E34(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC19EA0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC19F0C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC19F78(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC19FE4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1A050(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1A0BC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1A128(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1A194(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1A200(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1A26C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1A2D8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1A344(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1A3B0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1A41C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1A488(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1A4F4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1A560(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1A5CC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1A638(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1A6A4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1A710(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1A77C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1A7E8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1A854(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1A8C0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1A92C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1A998(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1AA04(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1AA70(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1AADC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1AB48(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1ABB4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1AC20(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1AC8C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1ACF8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1AD64(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1ADD0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1AE3C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1AEA8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1AF14(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1AF80(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1AFEC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1B058(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1B0C4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1B130(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1B19C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1B208(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1B274(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1B2E0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EC1C73C(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EC1B34C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 56);
    if ((v5 & 4) != 0)
    {
      v6 = *(uint64_t **)((v5 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v6)
        goto LABEL_6;
    }
    else if (v5 >= 8)
    {
      v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
LABEL_6:
      v7 = sub_22EC0F7CC(a1, v6);
      if (!v7)
        return 1;
      v8 = (uint64_t)v7;
      v9 = *v7;
      goto LABEL_10;
    }
    v10 = sub_22EC14078((uint64_t)a1, *(_QWORD *)(v4 + 48));
    if (v10 < 0x10)
      return 1;
    v9 = v10;
    v8 = 0;
LABEL_10:
    v11 = *(_QWORD *)(v4 + 40);
    if ((v11 & 7) != 0)
      v12 = 0;
    else
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    v4 = sub_22EB001B8(*a1, v8, v9, *(_DWORD *)(v4 + 64), *(_DWORD *)(v4 + 24), v12, 0);
    if (!v4)
      return 1;
  }
  v13 = sub_22EC17788(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v13 & 1) == 0)
    return sub_22ED36AF8((uint64_t)*a1, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v4, v13 & 0xFFFFFFFFFFFFFFFELL);
  return 1;
}

uint64_t sub_22EC1B438(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EC17788(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22F344474(*a1, *(_DWORD *)(v2 + 8), v5);
  return v2;
}

uint64_t sub_22EC1B4A4(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED36D40(*a1, *(_DWORD *)(v2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EC17788(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1
    || *(_QWORD *)(v2 + 16) != v7
    || *(_QWORD *)(v2 + 24) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22F344708((uint64_t)*a1, *(_DWORD *)(v2 + 8), v7, v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EC1B558(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EBCEF90(a1, v4);
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v5 = 0;
  }
  v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*((_DWORD *)*a1 + 2998) != -1 || *(_QWORD *)(v2 + 16) != v6)
    return sub_22ED36B94(*a1, *(_DWORD *)(v2 + 8), v6);
  return v2;
}

uint64_t sub_22EC1B5D0(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v21;
  uint64_t v22[9];

  v22[8] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a2 + 16);
  v5 = sub_22EC17788(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v5 & 1) != 0)
    return 1;
  v21 = 0;
  v6 = *(unsigned __int16 *)(a2 + 12);
  v7 = v6 | (*(unsigned __int8 *)(a2 + 14) << 16);
  v8 = (unsigned __int16)v6;
  if (!(_WORD)v6)
  {
    v9 = 0;
    if ((v7 & 0x10000) != 0)
    {
LABEL_14:
      v16 = v4[(unsigned __int16)v7 + 1];
      if (v16)
      {
        v17 = sub_22EC17788(a1, v16, 0);
        if ((v17 & 1) != 0)
          return 1;
        goto LABEL_18;
      }
    }
LABEL_17:
    v17 = 0;
LABEL_18:
    v18 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && !((*v4 != v18) | v9 & 1)
      && (((*(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16)) & 0x10000) != 0
        ? (v19 = v4[*(unsigned __int16 *)(a2 + 12) + 1])
        : (v19 = 0),
          v19 == (v17 & 0xFFFFFFFFFFFFFFFELL)))
    {
      return a2;
    }
    else
    {
      return sub_22F3444EC(*a1, *(_DWORD *)(a2 + 8), v18, v22, v21, v17 & 0xFFFFFFFFFFFFFFFELL);
    }
  }
  v9 = 0;
  v10 = (_QWORD *)(a2 + 24);
  v11 = 1;
  while (1)
  {
    v12 = sub_22EC17788(a1, *v10, 0);
    if ((v12 & 1) != 0)
      return v11;
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    v14 = *v10 != (v12 & 0xFFFFFFFFFFFFFFFELL);
    v15 = v21;
    if (v21 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = v21;
    }
    v22[v15] = v13;
    v9 |= v14;
    ++v21;
    ++v10;
    if (!--v8)
    {
      v7 = *(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16);
      if ((v7 & 0x10000) == 0)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
}

uint64_t sub_22EC1B7F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EC17788(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) != -1 || *(_QWORD *)(v2 + 16) != v5)
    return sub_22F344820(*a1, *(_DWORD *)(v2 + 8), v5);
  return v2;
}

unint64_t sub_22EC1B864(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = 1;
  v5 = sub_22EC17788(a1, *(_QWORD *)(a2 + 8), 1);
  if ((v5 & 1) == 0)
  {
    v6 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
    if ((v6 & 1) != 0)
      return 1;
    v7 = sub_22EC17788(a1, *(_QWORD *)(a2 + 24), 0);
    if ((v7 & 1) != 0)
      return 1;
    v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)(*a1 + 11992) == -1
      && *(_QWORD *)(a2 + 8) == v8
      && *(_QWORD *)(a2 + 16) == (v6 & 0xFFFFFFFFFFFFFFFELL)
      && *(_QWORD *)(a2 + 24) == (v7 & 0xFFFFFFFFFFFFFFFELL))
    {
      return a2;
    }
    v9 = sub_22ED3169C(*a1, *(_DWORD *)(a2 + 32), v8, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
    if ((v9 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v4 = 1;
      if ((v7 & 0xFFFFFFFFFFFFFFFELL) != 0 && (v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 24) = v7 & 0xFFFFFFFFFFFFFFFELL;
        return v9 & 0xFFFFFFFFFFFFFFFELL;
      }
    }
  }
  return v4;
}

uint64_t sub_22EC1B958(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EC1726C(a1, *(unsigned __int8 **)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED358AC(*a1, *(_DWORD *)(a2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, 0);
}

uint64_t sub_22EC1B9A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EC18D3C(a1, *(_QWORD *)(a2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22F3448B8((_QWORD *)*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EC1BA14(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EC18D3C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22F3F29BC(*(_QWORD *)(*a1 + 88), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EC1BA5C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v8;

  v2 = a2;
  v4 = sub_22EC18D3C(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_BYTE **)(v2 + 24);
  if (*v5 == 95)
  {
    v6 = sub_22EC1BA14(a1, (uint64_t)v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = sub_22EC1B9A8(a1, (uint64_t)v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_DWORD *)(*a1 + 11992) == -1
    && *(_QWORD *)(v2 + 16) == v8
    && *(_QWORD *)(v2 + 24) == (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return v2;
  }
  return sub_22ED3765C(*a1, *(_BYTE *)(v2 + 8), *(_DWORD *)(v2 + 12), v8, v6 & 0xFFFFFFFFFFFFFFFELL);
}

unint64_t sub_22EC1BB10(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  int v22[3];
  int v23;
  uint64_t v24;
  int v25;

  v4 = *a1;
  v25 = 4;
  v24 = 0;
  v23 = 3;
  *(_QWORD *)v22 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v25, v22, (__int16 *)(v4 + 1693), &v24, &v23);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = a2 + 12;
  v12 = sub_22EBCEF90(a1, *((_QWORD *)a2 + 3));
  v13 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v12);
  if ((v13 & 1) != 0)
  {
    sub_22EB48E64(v4);
  }
  else
  {
    v14 = *a2;
    if ((v14 & 0x100) != 0)
      v15 = *(_QWORD *)&v11[4 * ((v14 >> 8) & 1)];
    else
      v15 = 0;
    v16 = sub_22EBCEF90(a1, v15);
    v17 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v16);
    sub_22EB48E64(v4);
    if ((v17 & 1) == 0)
    {
      v18 = (*a2 & 0x100) != 0 ? *((_DWORD *)a2 + 12) : 0;
      v19 = sub_22ED2C48C(*a1, *((_DWORD *)a2 + 1), v13 & 0xFFFFFFFFFFFFFFFELL, v18, v17 & 0xFFFFFFFFFFFFFFFELL, *((_DWORD *)a2 + 2));
      if ((v19 & 1) == 0)
      {
        v20 = sub_22EC17788(a1, *(_QWORD *)&v11[4 * (((unint64_t)*a2 >> 8) & 1) + 4], 0);
        if ((v20 & 1) == 0)
        {
          result = v19 & 0xFFFFFFFFFFFFFFFELL;
          *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFFELL)
                    + 8 * (((unint64_t)*(unsigned __int16 *)(v19 & 0xFFFFFFFFFFFFFFFELL) >> 8) & 1)
                    + 32) = v20 & 0xFFFFFFFFFFFFFFFELL;
          return result;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_22EC1BD20(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EC17788(a1, *(_QWORD *)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED2C5AC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EC1BD70(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if ((*a2 & 0x100) != 0)
    v4 = *((_QWORD *)a2 + 3);
  else
    v4 = 0;
  v5 = sub_22EC17788(a1, v4, 0);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a2;
  if ((v6 & 0x200) != 0)
  {
    v8 = (v6 >> 8) & 1;
    v11 = *(_QWORD *)&a2[4 * v8 + 12];
    v7 = v11 ? *(_QWORD *)(v11 + 8) : 0;
  }
  else
  {
    v7 = 0;
    LODWORD(v8) = (v6 >> 8) & 1;
  }
  sub_22EC1C430((uint64_t)&v12, (uint64_t)a1, *((_DWORD *)a2 + 1), v7, *(_QWORD *)&a2[4 * v8 + 12 + 4 * ((v6 >> 9) & 1)], 2);
  if ((_BYTE)v13)
    return 1;
  v9 = *((_DWORD *)a2 + 1);
  v14 = v12;
  v15 = v13;
  if ((sub_22ED2E0D4(*a1, v9, *((_DWORD *)a2 + 4), v5 & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)&v14, *((_DWORD *)a2 + 5)) & 1) != 0
    || (sub_22EC17788(a1, *(_QWORD *)&a2[4 * ((*a2 >> 9) & 1) + 16 + 4 * (HIBYTE(*a2) & 1)], 0) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return sub_22ED2E298();
  }
}

uint64_t sub_22EC1BE98(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unint64_t v6;
  char **v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  unsigned int v13;
  char *v14[2];

  v4 = a2;
  v14[1] = *(char **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v7 = (char **)(a2 + 4);
  v6 = *a2;
  if (v6 >= 0x100)
  {
    v9 = 0;
    v10 = 8 * (v6 >> 8);
    do
    {
      v11 = *v7;
      if (*v7)
      {
        if (v9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v9 = v13;
        }
        v14[v9] = v11;
        v9 = ++v13;
      }
      ++v7;
      v10 -= 8;
    }
    while (v10);
  }
  v8 = sub_22EC17788(a1, *((_QWORD *)v4 + 1), a3);
  if ((v8 & 1) != 0)
    return 1;
  if (*((_QWORD *)v4 + 1) != (v8 & 0xFFFFFFFFFFFFFFFELL))
  {
    if (v13)
      return (uint64_t)sub_22ED2C6AC(*a1, v4[1], v14, v13, v8 & 0xFFFFFFFFFFFFFFFELL);
    return v8;
  }
  return (uint64_t)v4;
}

uint64_t sub_22EC1BFF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v5 = sub_22EC17788(a1, *(_QWORD *)(a2 + 16), a3);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = v6;
  v9 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v8, &v9)
    && v9 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v6 = *(_QWORD *)(v9 + 8);
  }
  if (!v6)
    return 1;
  if (v6 == *(_QWORD *)(a2 + 8))
    *(_QWORD *)(v6 + 48) = 0;
  return sub_22F343D54(*(_QWORD **)a1, *(_DWORD *)(a2 + 4), v6, 0, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EC1C09C(uint64_t a1, unsigned __int16 *a2)
{
  _DWORD *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v2 = a2;
  v4 = *a2;
  if ((v4 & 0x100) != 0 && (v15 = *((_QWORD *)a2 + 2)) != 0)
    v5 = *(_QWORD *)(v15 + 8);
  else
    v5 = 0;
  v6 = (uint64_t *)(a2 + 8);
  sub_22EC1C430((uint64_t)&v16, a1, *((_DWORD *)a2 + 1), v5, *(_QWORD *)&a2[4 * ((v4 >> 8) & 1) + 8], 0);
  if ((_BYTE)v17)
    return 1;
  v7 = sub_22EC17788(a1, v6[(((unint64_t)*(unsigned __int16 *)v2 >> 8) & 1) + 1], 0);
  if ((v7 & 1) != 0)
    return 1;
  v8 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
    goto LABEL_11;
  v9 = *(unsigned __int16 *)v2;
  if ((v9 & 0x100) != 0)
  {
    v10 = *v6;
    if (*v6)
      v10 = *(_QWORD *)(v10 + 8);
  }
  else
  {
    v10 = 0;
  }
  if ((_QWORD)v16 != v10
    || (v11 = (v9 >> 8) & 1, *((_QWORD *)&v16 + 1) != v6[v11])
    || v6[(v11 + 1)] != (v7 & 0xFFFFFFFFFFFFFFFELL))
  {
LABEL_11:
    v12 = v2[1];
    v13 = v2[2];
    v18 = v16;
    v19 = v17;
    return sub_22F343FAC(v8, v12, v13, (uint64_t)&v18, v2[3], (_BYTE *)(v7 & 0xFFFFFFFFFFFFFFFELL));
  }
  return (uint64_t)v2;
}

uint64_t sub_22EC1C1C8(uint64_t *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  char v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _BYTE *v26[9];

  v26[8] = *(_BYTE **)MEMORY[0x24BDAC8D0];
  v6 = *a1;
  sub_22E905168(*a1, 0);
  v7 = (_QWORD *)(a2 + 16);
  v8 = *(unsigned int *)a2;
  v9 = a2 + 16 + 8 * (v8 >> 8);
  v10 = 8 * (v8 >> 8);
  while (v10)
  {
    v11 = *(_BYTE **)(a2 + 8 + v10);
    v10 -= 8;
    if (*v11 != 19)
    {
      v25 = 0;
      if (v8 < 0x100)
      {
        v12 = 0;
        v13 = 0;
        goto LABEL_28;
      }
      v24 = v6;
      v23 = a2;
      goto LABEL_10;
    }
  }
  if (v8 <= 0xFF)
  {
    v12 = 0;
    v13 = 0;
    goto LABEL_28;
  }
  v23 = a2;
  v24 = v6;
  v11 = (_BYTE *)v7[(*(_DWORD *)a2 >> 8) - 1];
  v25 = 0;
LABEL_10:
  LOBYTE(a2) = 0;
  v13 = 0;
  do
  {
    while (1)
    {
      v14 = (_BYTE *)*v7;
      v15 = (a3 & (*v7 == (_QWORD)v11)) != 0 ? 2 : 0;
      v16 = sub_22EC17788(a1, *v7, v15);
      if ((v16 & 1) == 0)
        break;
      ++v7;
      a2 = 1;
      if (*v14 == 12 || v7 == (_QWORD *)v9)
      {
        v6 = v24;
        goto LABEL_31;
      }
    }
    v17 = (_BYTE *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    v18 = v14 != (_BYTE *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    v19 = v25;
    if (v25 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v19 = v25;
    }
    v26[v19] = v17;
    v13 |= v18;
    v12 = ++v25;
    ++v7;
  }
  while (v7 != (_QWORD *)v9);
  v6 = v24;
  if ((a2 & 1) != 0)
  {
    a2 = 1;
    goto LABEL_31;
  }
  a2 = v23;
LABEL_28:
  if (*(_DWORD *)(*a1 + 11992) != -1 || (v13 & 1) != 0)
    a2 = (uint64_t)sub_22ED2C004((_QWORD *)*a1, *(_DWORD *)(a2 + 4), *(unsigned int *)(a2 + 8), v26, v12);
LABEL_31:
  v21 = *(_QWORD *)(*(_QWORD *)(v6 + 1896) + 8 * *(unsigned int *)(v6 + 1904) - 8);
  --*(_QWORD *)(v21 + 360);
  return a2;
}

uint64_t sub_22EC1C430(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = result;
  if (a4)
  {
    v10 = a4;
    v11 = a4;
    v12 = 0;
    result = sub_22E793870((uint64_t *)(a2 + 8), &v11, &v12);
    if (!(_DWORD)result)
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
    if (v12 == *(_QWORD *)(a2 + 8) + 16 * *(unsigned int *)(a2 + 24))
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
    v10 = *(_QWORD *)(v12 + 8);
    if (v10)
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
  }
  else
  {
    if (!a5)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_DWORD *)(result + 15) = 0;
      return result;
    }
    result = sub_22EBCEF90(a2, a5);
    if ((result & 1) == 0)
      return sub_22EB530EC(*(_QWORD *)a2, a3, result & 0xFFFFFFFFFFFFFFFELL, a6, 1, v9);
  }
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_WORD *)(v9 + 16) = 1;
  *(_BYTE *)(v9 + 18) = 0;
  return result;
}

__n128 sub_22EC1C534(__n128 *a1, uint64_t *a2, __n128 *a3)
{
  unint64_t v4;
  int v7;
  char v8;
  unsigned int v9;
  int v10;
  __n128 result;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v4 = a3->n128_u64[0];
  if (!a3->n128_u64[0])
    goto LABEL_26;
  v7 = v4 & 7;
  v8 = v4 & 7;
  if (v7 == 7)
  {
    v9 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v9 >= 3)
      LOBYTE(v9) = 3;
    v8 = v9 | 8;
  }
  v10 = 1 << v8;
  if ((v10 & 0xE47) != 0)
  {
    result = *a3;
    *a1 = *a3;
    a1[1].n128_u64[0] = a3[1].n128_u64[0];
    return result;
  }
  if ((v10 & 0x38) == 0)
  {
    if ((~(_BYTE)v4 & 7) != 0)
      goto LABEL_18;
    v18 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v18 >= 3)
      v18 = 3;
    if (v18)
LABEL_18:
      v19 = 0;
    else
      v19 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 16);
    v23 = v19;
    v24 = 0;
    if (sub_22E793870(a2 + 1, &v23, &v24) && v24 != (_QWORD *)(a2[1] + 16 * *((unsigned int *)a2 + 6)))
      v19 = v24[1];
    if (v19)
    {
      *a1 = *a3;
      a1[1].n128_u64[0] = a3[1].n128_u64[0];
      a1->n128_u64[0] = sub_22F3AE65C((_QWORD *)(*(_QWORD *)(*a2 + 88) + 15224), v19);
      return result;
    }
    goto LABEL_26;
  }
  if ((v7 - 3) > 2)
  {
    v17 = 0;
    goto LABEL_25;
  }
  v12 = (uint64_t *)a3[1].n128_u64[0];
  if (!v12)
  {
    v17 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_25:
    v20 = sub_22EC14078((uint64_t)a2, v17);
    if (v20 > 0xF)
    {
      v15 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8) | v20 & 7;
      v16 = *(_QWORD *)(*a2 + 88);
      if (v7 == 7)
      {
        v14 = 0;
        v21 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
        if (v21 >= 3)
          v21 = 3;
        v7 = v21 | 8;
      }
      else
      {
        v14 = 0;
      }
      goto LABEL_32;
    }
LABEL_26:
    a1->n128_u64[0] = 0;
    a1->n128_u64[1] = 0;
    a1[1].n128_u64[0] = 0;
    return result;
  }
  v13 = sub_22EC0F7CC((_QWORD **)a2, v12);
  if (!v13)
    goto LABEL_26;
  v14 = v13;
  v15 = *v13 & 7 | *(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFFF0) + 8);
  v16 = *(_QWORD *)(*a2 + 88);
LABEL_32:
  v22 = sub_22EFC6D44((_QWORD *)(v16 + 15224), v7, v15);
  result = *a3;
  *a1 = *a3;
  a1->n128_u64[0] = v22;
  a1[1].n128_u64[0] = (unint64_t)v14;
  return result;
}

uint64_t sub_22EC1C73C(uint64_t *a1, __n128 *a2)
{
  _DWORD *v4;
  uint64_t v5;
  __n128 **v6;
  unsigned int v7;
  uint64_t v8;
  __n128 *v9;
  _QWORD *v10;
  unsigned __int32 v11;
  unsigned __int32 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t i;
  unint64_t v21;
  uint64_t v22;
  unsigned __int32 v23;
  uint64_t v24;
  __n128 v26;
  unint64_t v27;
  __n128 v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[18];

  v32[16] = *MEMORY[0x24BDAC8D0];
  v30 = v32;
  v31 = 0x1000000000;
  v4 = (_DWORD *)a2[1].n128_u64[1];
  if (!v4)
  {
    v5 = 0;
    goto LABEL_87;
  }
  v7 = *v4;
  v6 = (__n128 **)(v4 + 4);
  v5 = v7;
  if (v7 < 0x11)
  {
    if (!(_DWORD)v5)
      goto LABEL_79;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v8 = 8 * v5;
  do
  {
    v9 = *v6;
    if (*v6)
    {
      v10 = (_QWORD *)*a1;
      v11 = v9->n128_u32[2];
      v12 = (unsigned __int32 *)(*(_QWORD *)(*a1 + 12288) + 21440);
      *v12 = v11;
      switch(v11)
      {
        case 3u:
          v13 = sub_22EC1CE94(a1, v9);
          goto LABEL_73;
        case 4u:
          v13 = sub_22EC1D018((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 5u:
          v13 = (uint64_t)sub_22EC1D064(a1, (unsigned int *)v9);
          goto LABEL_73;
        case 6u:
          v13 = sub_22EC1D1DC((uint64_t **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 7u:
          v13 = sub_22EC1D360((uint64_t **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0xAu:
          v13 = (uint64_t)sub_22EB7BC58(v10, (int *)v9);
          goto LABEL_73;
        case 0xCu:
          v13 = sub_22EC1D3AC((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0xEu:
          v13 = (uint64_t)sub_22EC1D3F8((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0xFu:
          v13 = (uint64_t)sub_22EC1D544((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x10u:
          sub_22EB7BF50((uint64_t)v10, (uint64_t)v9);
          goto LABEL_73;
        case 0x11u:
          v13 = (uint64_t)sub_22EB7BF64(v10, (uint64_t)v9);
          goto LABEL_73;
        case 0x12u:
          v13 = (uint64_t)sub_22EC1D690(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x13u:
          v13 = sub_22EC1D824((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x14u:
          v13 = sub_22EC1D870((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x15u:
          v13 = sub_22EC1D8C8(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x16u:
          v13 = sub_22EC1D920((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x18u:
          v13 = sub_22EC1D970((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Au:
          v13 = (uint64_t)sub_22EC1D9C0((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x1Bu:
          v13 = sub_22EC1DB0C((uint64_t)a1, (uint64_t *)v9);
          goto LABEL_73;
        case 0x1Cu:
          v13 = sub_22EC1DB90(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Du:
          v13 = sub_22EC1DBDC((uint64_t)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Eu:
          v13 = (uint64_t)sub_22EC1DD28((uint64_t)a1, (int *)v9);
          goto LABEL_73;
        case 0x1Fu:
          v13 = (uint64_t)sub_22EC1DE7C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x20u:
          v13 = (uint64_t)sub_22EBF939C((uint64_t)v10, (int *)v9);
          goto LABEL_73;
        case 0x21u:
          v13 = sub_22EC1E2F8((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x22u:
          v13 = (uint64_t)sub_22EC1E344((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x23u:
          v13 = sub_22EC1E49C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x24u:
          v13 = sub_22EC1E4E8(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x25u:
          v13 = sub_22EC1E53C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x27u:
          v13 = (uint64_t)sub_22EC1E978((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x29u:
          v13 = sub_22EC1EAC4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x2Au:
          v13 = (uint64_t)sub_22EC1EC58((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x2Bu:
          v13 = sub_22EC1EDB0((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x2Cu:
          v13 = sub_22EC1EF08((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x2Eu:
          v13 = (uint64_t)sub_22EC1F098(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x34u:
          v13 = sub_22EC1F570(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x35u:
          v13 = (uint64_t)sub_22EC1F5BC((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x37u:
          v13 = sub_22EC1F708(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x38u:
          v13 = sub_22EC1F754((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x39u:
          v13 = sub_22EC1F7A0((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Au:
          v13 = sub_22EC1F7EC((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Bu:
          v13 = (uint64_t)sub_22EB7E124(v10, (int *)v9);
          goto LABEL_73;
        case 0x3Cu:
          v13 = sub_22EC1F838((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Du:
          v13 = sub_22EC1F890(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Eu:
          v13 = sub_22EC1F8F8((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Fu:
          v13 = (uint64_t)sub_22EC1F944((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x40u:
          v13 = (uint64_t)sub_22EB7E384(v10, (int *)v9);
          goto LABEL_73;
        case 0x42u:
          v13 = sub_22EC1FA90(a1, v9);
          goto LABEL_73;
        case 0x46u:
          v13 = sub_22EC1FED4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x47u:
          v13 = sub_22EC1FF20((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x49u:
          v13 = (uint64_t)sub_22EC1FF84((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x4Bu:
          v13 = sub_22EC200D0((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Cu:
          v13 = (uint64_t)sub_22EC2011C((uint64_t)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Du:
          v13 = sub_22EC202B4(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Eu:
          v13 = sub_22EC206F0((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x51u:
          v13 = (uint64_t)sub_22EC2073C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x58u:
          v13 = sub_22EC20BB8((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x59u:
          v13 = (uint64_t)sub_22EC20C04((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x5Au:
          v13 = (uint64_t)sub_22EC20D5C((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x5Bu:
          v13 = (uint64_t)sub_22EC20EB4(a1, (int *)v9);
LABEL_73:
          v9 = (__n128 *)v13;
          v15 = *a1;
          *(_DWORD *)(*(_QWORD *)(*a1 + 12288) + 21440) = 85;
          sub_22EB4E2D8(v15);
          if (v9)
            goto LABEL_74;
          goto LABEL_78;
        default:
          *v12 = 85;
          sub_22EB4E2D8(v10);
LABEL_74:
          v16 = v31;
          if (v31 >= (unint64_t)HIDWORD(v31))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v16 = v31;
          }
          *((_QWORD *)v30 + v16) = v9;
          break;
      }
    }
    else
    {
      v14 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = v31;
      }
      *((_QWORD *)v30 + v14) = 0;
    }
    LODWORD(v31) = v31 + 1;
LABEL_78:
    ++v6;
    v8 -= 8;
  }
  while (v8);
LABEL_79:
  v17 = (unsigned int *)a2[1].n128_u64[1];
  if (v17 && *((_BYTE *)v17 + 8) && *(_QWORD *)&v17[2 * *v17 + 4 + 2 * v17[1]])
  {
    sub_22EC84DA0(*a1, a2->n128_i32[2]);
    v18 = *a1;
    sub_22E905168(*a1, 0);
    v19 = a2->n128_u32[2];
    if (v19 <= 0x34 && ((1 << v19) & 0x10000800000204) != 0)
    {
      i = *(_QWORD *)(a2[1].n128_u64[1]
                    + 8 * *(unsigned int *)a2[1].n128_u64[1]
                    + 8 * *(unsigned int *)(a2[1].n128_u64[1] + 4)
                    + 16);
    }
    else
    {
      for (i = *(_QWORD *)(a2[1].n128_u64[1]
                          + 8 * *(unsigned int *)a2[1].n128_u64[1]
                          + 8 * *(unsigned int *)(a2[1].n128_u64[1] + 4)
                          + 16); *(_BYTE *)i == 7; i = *(_QWORD *)(i + 8 * *(unsigned int *)(i + 8) + 32))
        ;
    }
    v21 = sub_22EC17788(a1, i, 0);
    if (v21 >= 2
      && sub_22F4219DC(a2->n128_u32[2])
      && (*(_BYTE *)(*(_QWORD *)(*a1 + 72) + 76) & 0x20) != 0)
    {
      v21 = sub_22EC86C20(*a1, (unsigned __int8 *)(v21 & 0xFFFFFFFFFFFFFFFELL));
    }
    v22 = *(_QWORD *)(*(_QWORD *)(v18 + 1896) + 8 * *(unsigned int *)(v18 + 1904) - 8);
    --*(_QWORD *)(v22 + 360);
    if ((sub_22EC8617C((_QWORD *)*a1, v21, (uint64_t *)v30, v31) & 1) != 0)
      goto LABEL_91;
  }
LABEL_87:
  if (v5 != v31)
  {
LABEL_91:
    v24 = 1;
    goto LABEL_92;
  }
  v28.n128_u64[0] = 0;
  v28.n128_u32[2] = 0;
  v29 = 0;
  v23 = a2->n128_u32[2];
  if (v23 == 9)
  {
    v28 = a2[2];
    v29 = a2[3].n128_u64[0];
    sub_22EC1C534(&v26, a1, &v28);
    v28 = v26;
    v29 = v27;
  }
  v24 = sub_22EC87DEC();
LABEL_92:
  if (v30 != v32)
    free(v30);
  return v24;
}

uint64_t sub_22EC1CE94(uint64_t *a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v15;
  uint64_t v16[5];

  v16[4] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = a2[4];
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  v5 = a2 + 6;
  v6 = *(_QWORD *)&a2[2 * v4 + 6];
  if (!v6)
  {
    v9 = 0;
    v8 = v4;
    if (!v4)
      return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
LABEL_8:
    v10 = 8 * v8;
    do
    {
      v11 = sub_22EBCEF90(a1, *v5);
      if ((v11 & 1) == 0)
      {
        v12 = v15;
        if (v15 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v12 = v15;
        }
        v16[v12] = v11 & 0xFFFFFFFFFFFFFFFELL;
        ++v15;
      }
      ++v5;
      v10 -= 8;
    }
    while (v10);
    return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
  }
  v7 = sub_22EBCEF90(a1, v6);
  if ((v7 & 1) != 0)
    return 0;
  v8 = a2[4];
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (a2[4])
    goto LABEL_8;
  return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
}

uint64_t sub_22EC1D018(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E518(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EC1D064(uint64_t *a1, unsigned int *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = a2 + 6;
    while (1)
    {
      v7 = sub_22EBCEF90(a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22EBCEF90(a1, *(_QWORD *)&a2[2 * v9 + 6]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA5100(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[5], a2[1]);
}

uint64_t sub_22EC1D1DC(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  unsigned __int8 *v16[17];

  v16[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = sub_22EBCEF90(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v6 = 0;
  }
  v15 = 0;
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 16);
  }
  if (v7)
  {
    v8 = (_QWORD *)(a2 + 40);
    v9 = 8 * v7;
    while (1)
    {
      v10 = sub_22EBCEF90(a1, *v8);
      if ((v10 & 1) != 0)
        break;
      v11 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
      }
      v16[v11] = (unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFFELL);
      v12 = ++v15;
      ++v8;
      v9 -= 8;
      if (!v9)
        return sub_22ECA9A04(*a1, v6, v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  else
  {
    v12 = 0;
    return sub_22ECA9A04(*a1, v6, v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
  }
}

uint64_t sub_22EC1D360(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E2DC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EC1D3AC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E39C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EC1D3F8(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBCEF90(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

_DWORD *sub_22EC1D544(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  uint64_t v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBCEF90(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

unsigned __int8 *sub_22EC1D690(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  uint64_t v16[17];

  v16[16] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = (_QWORD *)(a2 + 40);
  v5 = *(unsigned int *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40 + 8 * v5);
  if (v6)
  {
    v7 = sub_22EBCEF90(a1, v6);
    if ((v7 & 1) != 0)
      return 0;
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  else
  {
    v8 = 0;
  }
  if (v5 > 0x10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  if ((_DWORD)v5)
  {
    v9 = 8 * v5;
    while (1)
    {
      v10 = sub_22EBCEF90(a1, *v4);
      if ((v10 & 1) != 0)
        break;
      v11 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
      }
      v16[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
      v12 = ++v15;
      ++v4;
      v9 -= 8;
      if (!v9)
        return sub_22ECA67B4(*a1, v8, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  v12 = 0;
  return sub_22ECA67B4(*a1, v8, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EC1D824(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F6E0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EC1D870(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = sub_22EBCEF90(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22F33EAFC(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EC1D8C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EBCEF90(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22EC9F86C(*a1, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EC1D920(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 40));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1F20(*a1, *(_DWORD *)(a2 + 32), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EC1D970(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 48));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA18BC(*a1, *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EC1D9C0(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBCEF90(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EC1DB0C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;

  v4 = sub_22EBCEF90(a1, a2[4]);
  if ((v4 & 1) != 0)
    return 0;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v6 = *((_DWORD *)a2 + 7);
  v7 = *a2;
  result = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 40, 3);
  *(_QWORD *)result = v7;
  *(_DWORD *)(result + 8) = 27;
  *(_QWORD *)(result + 32) = v5;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 89;
  *(_DWORD *)(result + 28) = v6;
  return result;
}

uint64_t sub_22EC1DB90(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EE2C(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EC1DBDC(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(a2 + 16);
  }
  if (!v4)
    return sub_22EC92F80();
  v5 = (_QWORD *)(a2 + 40);
  v6 = 8 * v4;
  while (1)
  {
    v7 = sub_22EBCEF90(a1, *v5);
    if ((v7 & 1) != 0)
      break;
    v8 = v11;
    if (v11 >= 0x10uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = v11;
    }
    v12[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
    ++v11;
    ++v5;
    v6 -= 8;
    if (!v6)
      return sub_22EC92F80();
  }
  return 0;
}

_DWORD *sub_22EC1DD28(uint64_t a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  _QWORD v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBCEF90(a1, *v5);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
  }
  v9 = 0;
LABEL_11:
  if (!v9)
    return 0;
  return sub_22F3EB9D4(*(_QWORD *)(*(_QWORD *)a1 + 88), *a2, a2[3], a2[1], v13, v9);
}

_DWORD *sub_22EC1DE7C(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  __int128 v40;
  size_t __n[2];
  int v42[3];
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[128];
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  __n128 v51;
  _QWORD v52[10];

  v52[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v42[0] = *(_DWORD *)a2;
  v42[1] = v6;
  v42[2] = v4;
  v48 = v50;
  v49 = 0x1000000000;
  v40 = 0u;
  *(_OWORD *)__n = 0u;
  v38.n128_u64[0] = 0;
  v38.n128_u32[2] = 0;
  v39 = 0;
  v45 = v47;
  v46 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 104);
    do
    {
      v9 = sub_22EBCEF90(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v49;
      if (v49 >= (unint64_t)HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v49;
      }
      *((_QWORD *)v48 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v49) = v49 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22EC140CC(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_48;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v40, v14, v15);
  v38 = *(__n128 *)(a2 + 56);
  v39 = *(_QWORD *)(a2 + 72);
  if (v38.n128_u64[0])
  {
    sub_22EC1C534(&v51, a1, &v38);
    v38 = v51;
    v39 = v52[0];
    if (!v51.n128_u64[0])
      goto LABEL_46;
  }
  v37 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 104 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        v51.n128_u64[0] = (unint64_t)v52;
        v51.n128_u64[1] = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v43 = v27;
            v44 = 0;
            if (sub_22E793870(a1 + 1, &v43, &v44)
              && v44 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v44[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = v51.n128_u32[2];
            if (v51.n128_u32[2] >= (unint64_t)v51.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = v51.n128_u32[2];
            }
            *(_QWORD *)(v51.n128_u64[0] + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++v51.n128_u32[2];
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v40 + 1);
        if (*((_QWORD *)&v40 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v40 + 1);
            LODWORD(v25) = v51.n128_u32[2];
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v38, 1, (*v19 >> 20) & 1, (const void *)v51.n128_u64[0], v51.n128_u64[0] + 8 * v25);
        v34 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v46;
        }
        *((_QWORD *)v45 + v34) = v33;
        LODWORD(v46) = v46 + 1;
        if ((_QWORD *)v51.n128_u64[0] != v52)
          free((void *)v51.n128_u64[0]);
      }
      else
      {
        v32 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v46;
        }
        *((_QWORD *)v45 + v32) = 0;
        LODWORD(v46) = v46 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v35 = sub_22ECA7F24((_QWORD *)*a1, (int *)(v37 + 80), 2u, (int *)(v37 + 88), 2, (uint64_t)&v40, (__int128 *)&v38, *(unsigned int *)(v37 + 96), (uint64_t)v48, v49, v42, (unsigned __int8 **)v45, v46);
LABEL_48:
  if (v45 != v47)
    free(v45);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v48 != v50)
    free(v48);
  return v35;
}

uint64_t sub_22EC1E2F8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F560(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

unsigned int *sub_22EC1E344(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBCEF90(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA94BC(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22EC1E49C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E41C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EC1E4E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FE98(*a1, *(_DWORD *)(a2 + 44), (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EC1E53C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  _DWORD **v14;
  _DWORD **v15;
  _DWORD *v16;
  int v17;
  BOOL v18;
  _DWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __int128 v35;
  size_t __n[2];
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[64];
  void *v42[2];
  _QWORD v43[16];
  unsigned __int8 **v44;
  uint64_t v45;
  _QWORD v46[18];

  v2 = a2;
  v46[16] = *MEMORY[0x24BDAC8D0];
  v44 = (unsigned __int8 **)v46;
  v45 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(v2 + 96);
    while (1)
    {
      v7 = sub_22EBCEF90(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v45;
      if (v45 >= (unint64_t)HIDWORD(v45))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v45;
      }
      v44[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v45) = v45 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v35 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v35, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    v33 = *(__n128 *)(v2 + 72);
    v34 = *(_QWORD *)(v2 + 88);
    if (!v33.n128_u64[0] || (sub_22EC1C534((__n128 *)v42, a1, &v33), v33 = *(__n128 *)v42, v34 = v43[0], v42[0]))
    {
      v42[0] = v43;
      v42[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v11)
      {
        v32 = v2;
        v14 = (_DWORD **)(v2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v15 = &v14[v11];
        do
        {
          v16 = *v14;
          if (*v14)
          {
            v39 = v41;
            v40 = 0x800000000;
            v17 = *(unsigned __int8 *)v16;
            v18 = v17 == 211;
            if (v17 == 211)
              v19 = v16;
            else
              v19 = 0;
            v20 = v19 + 16;
            if (v18)
              v21 = v20;
            else
              v21 = v16 + 20;
            v22 = v16[1];
            if ((_DWORD)v22)
            {
              v23 = 8 * v22;
              do
              {
                v24 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
                v37 = v24;
                v38 = 0;
                if (sub_22E793870(a1 + 1, &v37, &v38) && v38 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v24 = *(_QWORD *)(v38 + 8);
                v25 = *(unsigned int *)(v24 + 28);
                v22 = v40;
                if (v40 >= (unint64_t)HIDWORD(v40))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v22 = v40;
                }
                *((_QWORD *)v39 + v22) = (v25 >> 13) & 3 | v24;
                LODWORD(v22) = v40 + 1;
                LODWORD(v40) = v40 + 1;
                ++v21;
                v23 -= 8;
              }
              while (v23);
            }
            v26 = *(_QWORD *)(*a1 + 88);
            v27 = *((_QWORD *)&v35 + 1);
            if (*((_QWORD *)&v35 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v28 = (void *)sub_22E3CD3D4(v26 + 2032, LODWORD(__n[1]), 3);
                memcpy(v28, (const void *)__n[0], LODWORD(__n[1]));
                v27 = *((_QWORD *)&v35 + 1);
                LODWORD(v22) = v40;
              }
              else
              {
                v28 = (void *)__n[0];
              }
            }
            else
            {
              v28 = 0;
            }
            v30 = sub_22F0605AC(v26, 0, v27, (uint64_t)v28, (uint64_t)&v33, 1, (*v16 >> 20) & 1, v39, (uint64_t)v39 + 8 * v22);
            v31 = LODWORD(v42[1]);
            if (LODWORD(v42[1]) >= (unint64_t)HIDWORD(v42[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v31 = LODWORD(v42[1]);
            }
            *((_QWORD *)v42[0] + v31) = v30;
            ++LODWORD(v42[1]);
            if (v39 != v41)
              free(v39);
          }
          else
          {
            v29 = LODWORD(v42[1]);
            if (LODWORD(v42[1]) >= (unint64_t)HIDWORD(v42[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v42[1]);
            }
            *((_QWORD *)v42[0] + v29) = 0;
            ++LODWORD(v42[1]);
          }
          ++v14;
        }
        while (v14 != v15);
        v13 = (unsigned __int8 **)v42[0];
        v12 = LODWORD(v42[1]);
        v2 = v32;
      }
      else
      {
        v12 = 0;
        v13 = (unsigned __int8 **)v43;
      }
      v9 = sub_22F33F420(*a1, v44, v45, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 4), (uint64_t)&v35, (uint64_t)&v33, v13, v12);
      if (v42[0] != v43)
        free(v42[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v44 != v46)
    free(v44);
  return v9;
}

_DWORD *sub_22EC1E978(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBCEF90(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EC1EAC4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v14;
  uint64_t v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v5 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 32));
  if ((v5 & 1) != 0)
    return 0;
  v14 = 0;
  v6 = *(_DWORD *)(a2 + 16);
  if (v6 - 1 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a2 + 16);
  }
  v7 = (_QWORD *)(a2 + 40);
  if (a2 + 40 == v4 + 8 * v6)
  {
    v11 = 0;
    return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
  }
  else
  {
    v8 = 8 * v6 - 8;
    while (1)
    {
      v9 = sub_22EBCEF90(a1, *v7);
      if ((v9 & 1) != 0)
        break;
      v10 = v14;
      if (v14 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v14;
      }
      v15[v10] = v9 & 0xFFFFFFFFFFFFFFFELL;
      v11 = ++v14;
      ++v7;
      v8 -= 8;
      if (!v8)
        return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
}

unsigned int *sub_22EC1EC58(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBCEF90(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8EC4(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22EC1EDB0(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 16;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBCEF90(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EC1EF08(_QWORD **a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = a2 + 16;
    while (1)
    {
      v7 = sub_22EBCEF90(a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22EBCEF90(a1, *(_QWORD *)&a2[2 * v9 + 16 + 2 * v9 + 2 * v9 + 2 * v9 + 2 * v9]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA44D0(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[12], a2[13], a2[14], 0, a2[1]);
}

_DWORD *sub_22EC1F098(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  int v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  void *v42[2];
  int v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  size_t __n[2];
  int v48[3];
  unint64_t v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[128];
  void *v54;
  uint64_t v55;
  _BYTE v56[128];
  __int128 v57;
  _QWORD v58[10];

  v58[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v48[0] = *(_DWORD *)a2;
  v48[1] = v6;
  v48[2] = v4;
  v54 = v56;
  v55 = 0x1000000000;
  v46 = 0u;
  *(_OWORD *)__n = 0u;
  *(_QWORD *)&v44 = 0;
  DWORD2(v44) = 0;
  v51 = v53;
  v52 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 136);
    do
    {
      v9 = sub_22EBCEF90(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v55;
      if (v55 >= (unint64_t)HIDWORD(v55))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v55;
      }
      *((_QWORD *)v54 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v55) = v55 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22EC140CC(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_49;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v46, v14, v15);
  v44 = *(_OWORD *)(a2 + 56);
  v45 = *(_QWORD *)(a2 + 72);
  if ((_QWORD)v44)
  {
    sub_22EC1C534((__n128 *)&v57, a1, (__n128 *)&v44);
    v44 = v57;
    v45 = v58[0];
    if (!(_QWORD)v57)
      goto LABEL_46;
  }
  v38 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 136 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        *(_QWORD *)&v57 = v58;
        *((_QWORD *)&v57 + 1) = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v49 = v27;
            v50 = 0;
            if (sub_22E793870(a1 + 1, &v49, &v50)
              && v50 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v50[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = DWORD2(v57);
            if (DWORD2(v57) >= (unint64_t)HIDWORD(v57))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = DWORD2(v57);
            }
            *(_QWORD *)(v57 + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++DWORD2(v57);
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v46 + 1);
        if (*((_QWORD *)&v46 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v46 + 1);
            LODWORD(v25) = DWORD2(v57);
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v44, 1, (*v19 >> 20) & 1, (const void *)v57, v57 + 8 * v25);
        v34 = v52;
        if (v52 >= (unint64_t)HIDWORD(v52))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v52;
        }
        *((_QWORD *)v51 + v34) = v33;
        LODWORD(v52) = v52 + 1;
        if ((_QWORD *)v57 != v58)
          free((void *)v57);
      }
      else
      {
        v32 = v52;
        if (v52 >= (unint64_t)HIDWORD(v52))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v52;
        }
        *((_QWORD *)v51 + v32) = 0;
        LODWORD(v52) = v52 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v41 = v46;
  sub_22F0AB560(v42, (uint64_t)&v46 + 8);
  v39 = v44;
  v40 = v45;
  v35 = sub_22EC94100((_QWORD *)*a1, v38 + 80, 5u, v38 + 100, 5, (uint64_t)&v41, &v39, *(_DWORD *)(v38 + 120), *(_BYTE *)(v38 + 124), v37, *(_DWORD *)(v38 + 128), *(unsigned int *)(v38 + 132), (uint64_t)v54, v55, v48, 0, (unsigned __int8 **)v51, v52);
  if (v43)
    free(v42[1]);
LABEL_49:
  if (v51 != v53)
    free(v51);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v54 != v56)
    free(v54);
  return v35;
}

uint64_t sub_22EC1F570(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FCD4(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EC1F5BC(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBCEF90(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EC1F708(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FB70(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EC1F754(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F620(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EC1F7A0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F1E8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EC1F7EC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EFAC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EC1F838(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EBCEF90(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22EC9F118(*a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 12), (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EC1F890(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;

  v2 = a2;
  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  v5 = (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *a1;
  if (*(_DWORD **)(v2 + 16) != v5 || *(_DWORD *)(v6 + 11992) != -1)
    return sub_22F33E49C((_QWORD *)v6, v5, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 4));
  return v2;
}

uint64_t sub_22EC1F8F8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F4A0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EC1F944(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBCEF90(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EC1FA90(uint64_t *a1, __n128 *a2)
{
  __n128 *v2;
  unsigned int v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v30;
  __n128 v31;
  unint64_t v32;
  __int128 v33;
  size_t __n[2];
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40[2];
  _QWORD v41[16];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[18];

  v2 = a2;
  v44[16] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x1000000000;
  v4 = a2[1].n128_u32[0];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v2[1].n128_u32[0];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = &v2[6].n128_u64[1];
    while (1)
    {
      v7 = sub_22EBCEF90(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v43;
      }
      v42[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v43) = v43 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v28 = 0;
  }
  else
  {
LABEL_9:
    v33 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v33, v2[4].n128_u64[0], v2[4].n128_i64[1]);
    v31 = v2[5];
    v32 = v2[6].n128_u64[0];
    if (v31.n128_u64[0] && (sub_22EC1C534((__n128 *)v40, a1, &v31), v31 = *(__n128 *)v40, v32 = v41[0], !v40[0]))
    {
      v28 = 0;
    }
    else
    {
      v40[0] = v41;
      v40[1] = (void *)0x1000000000;
      v9 = v2[1].n128_u32[0];
      if ((_DWORD)v9)
      {
        v30 = v2;
        v10 = &v2[6].n128_u64[v9 + 1 + v9 + v9 + v9];
        v11 = &v10[v9];
        do
        {
          v12 = (_DWORD *)*v10;
          if (*v10)
          {
            v37 = v39;
            v38 = 0x800000000;
            v13 = *(unsigned __int8 *)v12;
            v14 = v13 == 211;
            if (v13 == 211)
              v15 = v12;
            else
              v15 = 0;
            v16 = v15 + 16;
            if (v14)
              v17 = v16;
            else
              v17 = v12 + 20;
            v18 = v12[1];
            if ((_DWORD)v18)
            {
              v19 = 8 * v18;
              do
              {
                v20 = *v17 & 0xFFFFFFFFFFFFFFFCLL;
                v35 = v20;
                v36 = 0;
                if (sub_22E793870(a1 + 1, &v35, &v36) && v36 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v20 = *(_QWORD *)(v36 + 8);
                v21 = *(unsigned int *)(v20 + 28);
                v18 = v38;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v18 = v38;
                }
                *((_QWORD *)v37 + v18) = (v21 >> 13) & 3 | v20;
                LODWORD(v18) = v38 + 1;
                LODWORD(v38) = v38 + 1;
                ++v17;
                v19 -= 8;
              }
              while (v19);
            }
            v22 = *(_QWORD *)(*a1 + 88);
            v23 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v24 = (void *)sub_22E3CD3D4(v22 + 2032, LODWORD(__n[1]), 3);
                memcpy(v24, (const void *)__n[0], LODWORD(__n[1]));
                v23 = *((_QWORD *)&v33 + 1);
                LODWORD(v18) = v38;
              }
              else
              {
                v24 = (void *)__n[0];
              }
            }
            else
            {
              v24 = 0;
            }
            v26 = sub_22F0605AC(v22, 0, v23, (uint64_t)v24, (uint64_t)&v31, 1, (*v12 >> 20) & 1, v37, (uint64_t)v37 + 8 * v18);
            v27 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v27) = v26;
            ++LODWORD(v40[1]);
            if (v37 != v39)
              free(v37);
          }
          else
          {
            v25 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v25) = 0;
            ++LODWORD(v40[1]);
          }
          ++v10;
        }
        while (v10 != v11);
        v2 = v30;
      }
      v28 = sub_22ECA41D4((_QWORD *)*a1, (uint64_t)v42, v43, v2[3].n128_i32[0], v2->n128_u32[0], v2->n128_i32[3], v2[3].n128_i32[1], v2[3].n128_i32[2], v2->n128_i32[1], (uint64_t)&v33, (uint64_t)&v31);
      if (v40[0] != v41)
        free(v40[0]);
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v42 != v44)
    free(v42);
  return v28;
}

uint64_t sub_22EC1FED4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E1DC(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EC1FF20(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 64));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1458(*a1, *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 44), *(_DWORD *)(a2 + 48), 0, *(_DWORD *)(a2 + 52), 0, *(_DWORD *)(a2 + 56), 0, *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EC1FF84(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBCEF90(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EC200D0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E25C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

int *sub_22EC2011C(uint64_t a1, uint64_t a2)
{
  int *v2;
  unsigned int v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  _QWORD *v14;
  unsigned int v16;
  _DWORD *v17[5];

  v2 = (int *)a2;
  v17[4] = *(_DWORD **)MEMORY[0x24BDAC8D0];
  v16 = 0;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v2[4];
  }
  if (v4)
  {
    v5 = 0;
    v6 = v2 + 6;
    v7 = 8 * v4;
    do
    {
      v8 = *v6;
      if (*v6)
      {
        v9 = sub_22EBCEF90(a1, *v6);
        if ((v9 & 1) != 0)
          return 0;
        v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
        v5 |= v8 != (v9 & 0xFFFFFFFFFFFFFFFELL);
        v11 = v16;
        v12 = (_DWORD *)(v9 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        v10 = 0;
        v12 = 0;
        v11 = v16;
      }
      if (v11 >= 4)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v16;
        v12 = (_DWORD *)v10;
      }
      v17[v11] = v12;
      v13 = ++v16;
      ++v6;
      v7 -= 8;
    }
    while (v7);
    if ((v5 & 1) == 0)
      goto LABEL_14;
    v14 = *(_QWORD **)a1;
    return sub_22ECA137C(v14, v17, v13, *v2, v2[3], v2[1]);
  }
LABEL_14:
  v14 = *(_QWORD **)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 11992) != -1)
  {
    v13 = v16;
    return sub_22ECA137C(v14, v17, v13, *v2, v2[3], v2[1]);
  }
  return v2;
}

uint64_t sub_22EC202B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _DWORD **v12;
  _DWORD **v13;
  _DWORD *v14;
  int v15;
  BOOL v16;
  _DWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __int128 v33;
  size_t __n[2];
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40[2];
  _QWORD v41[16];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[18];

  v2 = a2;
  v44[16] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(v2 + 96);
    while (1)
    {
      v7 = sub_22EBCEF90(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v43;
      }
      v42[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v43) = v43 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v33 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v33, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    v31 = *(__n128 *)(v2 + 72);
    v32 = *(_QWORD *)(v2 + 88);
    if (!v31.n128_u64[0] || (sub_22EC1C534((__n128 *)v40, a1, &v31), v31 = *(__n128 *)v40, v32 = v41[0], v40[0]))
    {
      v40[0] = v41;
      v40[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v11)
      {
        v30 = v2;
        v12 = (_DWORD **)(v2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v13 = &v12[v11];
        do
        {
          v14 = *v12;
          if (*v12)
          {
            v37 = v39;
            v38 = 0x800000000;
            v15 = *(unsigned __int8 *)v14;
            v16 = v15 == 211;
            if (v15 == 211)
              v17 = v14;
            else
              v17 = 0;
            v18 = v17 + 16;
            if (v16)
              v19 = v18;
            else
              v19 = v14 + 20;
            v20 = v14[1];
            if ((_DWORD)v20)
            {
              v21 = 8 * v20;
              do
              {
                v22 = *v19 & 0xFFFFFFFFFFFFFFFCLL;
                v35 = v22;
                v36 = 0;
                if (sub_22E793870(a1 + 1, &v35, &v36) && v36 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v22 = *(_QWORD *)(v36 + 8);
                v23 = *(unsigned int *)(v22 + 28);
                v20 = v38;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v20 = v38;
                }
                *((_QWORD *)v37 + v20) = (v23 >> 13) & 3 | v22;
                LODWORD(v20) = v38 + 1;
                LODWORD(v38) = v38 + 1;
                ++v19;
                v21 -= 8;
              }
              while (v21);
            }
            v24 = *(_QWORD *)(*a1 + 88);
            v25 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v26 = (void *)sub_22E3CD3D4(v24 + 2032, LODWORD(__n[1]), 3);
                memcpy(v26, (const void *)__n[0], LODWORD(__n[1]));
                v25 = *((_QWORD *)&v33 + 1);
                LODWORD(v20) = v38;
              }
              else
              {
                v26 = (void *)__n[0];
              }
            }
            else
            {
              v26 = 0;
            }
            v28 = sub_22F0605AC(v24, 0, v25, (uint64_t)v26, (uint64_t)&v31, 1, (*v14 >> 20) & 1, v37, (uint64_t)v37 + 8 * v20);
            v29 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v29) = v28;
            ++LODWORD(v40[1]);
            if (v37 != v39)
              free(v37);
          }
          else
          {
            v27 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v27) = 0;
            ++LODWORD(v40[1]);
          }
          ++v12;
        }
        while (v12 != v13);
        v2 = v30;
      }
      v9 = sub_22F33F264(*a1, (uint64_t)v42, v43, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 4), (uint64_t)&v33, (uint64_t)&v31);
      if (v40[0] != v41)
        free(v40[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v42 != v44)
    free(v42);
  return v9;
}

uint64_t sub_22EC206F0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F344(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EC2073C(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  __int128 v40;
  size_t __n[2];
  int v42[3];
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[128];
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  __n128 v51;
  _QWORD v52[10];

  v52[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v42[0] = *(_DWORD *)a2;
  v42[1] = v6;
  v42[2] = v4;
  v48 = v50;
  v49 = 0x1000000000;
  v40 = 0u;
  *(_OWORD *)__n = 0u;
  v38.n128_u64[0] = 0;
  v38.n128_u32[2] = 0;
  v39 = 0;
  v45 = v47;
  v46 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 104);
    do
    {
      v9 = sub_22EBCEF90(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v49;
      if (v49 >= (unint64_t)HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v49;
      }
      *((_QWORD *)v48 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v49) = v49 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22EC140CC(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_48;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v40, v14, v15);
  v38 = *(__n128 *)(a2 + 56);
  v39 = *(_QWORD *)(a2 + 72);
  if (v38.n128_u64[0])
  {
    sub_22EC1C534(&v51, a1, &v38);
    v38 = v51;
    v39 = v52[0];
    if (!v51.n128_u64[0])
      goto LABEL_46;
  }
  v37 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 104 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        v51.n128_u64[0] = (unint64_t)v52;
        v51.n128_u64[1] = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v43 = v27;
            v44 = 0;
            if (sub_22E793870(a1 + 1, &v43, &v44)
              && v44 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v44[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = v51.n128_u32[2];
            if (v51.n128_u32[2] >= (unint64_t)v51.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = v51.n128_u32[2];
            }
            *(_QWORD *)(v51.n128_u64[0] + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++v51.n128_u32[2];
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v40 + 1);
        if (*((_QWORD *)&v40 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v40 + 1);
            LODWORD(v25) = v51.n128_u32[2];
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v38, 1, (*v19 >> 20) & 1, (const void *)v51.n128_u64[0], v51.n128_u64[0] + 8 * v25);
        v34 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v46;
        }
        *((_QWORD *)v45 + v34) = v33;
        LODWORD(v46) = v46 + 1;
        if ((_QWORD *)v51.n128_u64[0] != v52)
          free((void *)v51.n128_u64[0]);
      }
      else
      {
        v32 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v46;
        }
        *((_QWORD *)v45 + v32) = 0;
        LODWORD(v46) = v46 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v35 = sub_22ECA7CAC((_QWORD *)*a1, (int *)(v37 + 80), 2u, (int *)(v37 + 88), 2, (uint64_t)&v40, (__int128 *)&v38, *(unsigned int *)(v37 + 96), (uint64_t)v48, v49, v42, (unsigned __int8 **)v45, v46);
LABEL_48:
  if (v45 != v47)
    free(v45);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v48 != v50)
    free(v48);
  return v35;
}

uint64_t sub_22EC20BB8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EBCEF90(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33ECC8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

unsigned int *sub_22EC20C04(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBCEF90(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8A30(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22EC20D5C(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  _DWORD *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EBCEF90(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA819C(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22EC20EB4(uint64_t *a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[49];

  v16[48] = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v15 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 0;
    v6 = a2 + 6;
    v7 = 2 * v4;
    do
    {
      v8 = *(_QWORD *)&v6[2 * (v5 + 1)];
      v9 = *(_QWORD *)&v6[4 * a2[4] + v5];
      v10 = sub_22EBCEF90(a1, *(_QWORD *)&v6[2 * v5]);
      if ((v10 & 1) == 0)
      {
        if (!v8 || (v8 = sub_22EBCEF90(a1, v8), (v8 & 1) == 0))
        {
          v11 = (_QWORD *)sub_22F2BAB24((uint64_t)&v14);
          *v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
          v11[1] = v8 & 0xFFFFFFFFFFFFFFFELL;
          v11[2] = v9;
        }
      }
      v5 += 2;
    }
    while (v7 != v5);
  }
  v12 = sub_22ECB0F9C(*a1, *a2, a2[3], a2[1], (uint64_t)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

unint64_t *sub_22EC21020(uint64_t *a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  unsigned __int32 v18;
  _QWORD *v19;
  int64x2_t v20;
  _QWORD v21[6];

  v2 = (unint64_t *)a2;
  v21[5] = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (*(_BYTE *)(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0) + 16) != 18)
    return sub_22EC0F7CC((_QWORD **)a1, a2);
  v5 = (uint64_t)(a2 + 1);
  for (i = *a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_13;
      v7 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v7 <= 0x39)
        break;
LABEL_8:
      if (sub_22F115668(i))
        v4 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_16;
    }
    if (v7 == 24)
      goto LABEL_15;
    if (v7 == 26)
      break;
    if (((1 << v7) & 0x20000000200003CLL) == 0)
      goto LABEL_8;
LABEL_13:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_13;
LABEL_15:
  v4 = i;
LABEL_16:
  sub_22F115668(v4);
  v9 = *v2;
  if (*v2 >= 0x10)
  {
    v19 = v21;
    v20 = vdupq_n_s64(0x20uLL);
    v21[4] = 0;
    v10 = sub_22F11598C(v9);
    if (v20.i64[0] < (unint64_t)v10)
      sub_22EEB52C0((uint64_t *)&v19, v10);
    v11 = v9 & 0xF;
    if ((v9 & 0xF) != 0)
      v12 = v9;
    else
      v12 = 0;
    if ((v9 & 0xF) != 0)
    {
      v9 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
      if ((v9 & 0xFFFFFFFFFFFFFFF0) != 0)
        v13 = *(_QWORD *)((char *)&unk_22F483088
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v13 = 1;
      v5 = (v5 + v13 - 1) & -v13;
    }
    v14 = sub_22EC15A98(a1, (uint64_t)&v19, v9, v5, 1);
    if (v14 < 0x10 || (v15 = v14, v11) && (v15 = sub_22E8C1750((_QWORD **)a1, v14, v12), v15 < 0x10))
    {
      v2 = 0;
    }
    else
    {
      v16 = *(_QWORD *)(*a1 + 88);
      v17 = v20.i64[0] - v20.i64[1];
      v18 = v20.i32[0] - v20.i32[2];
      if (v20.i32[0] == v20.i32[2])
        v18 = sub_22F11598C(v15);
      v2 = (unint64_t *)sub_22E3CD3D4(v16 + 2032, v18 + 8, 3);
      *v2 = v15;
      memcpy(v2 + 1, (char *)v19 + v20.i64[1], v17);
    }
    if (v19 != v21)
    {
      if (v19)
        MEMORY[0x2348A0E84]();
    }
  }
  return v2;
}

uint64_t sub_22EC21310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
    __asm { BR              X9 }
  return 0;
}

uint64_t sub_22EC215B0(uint64_t *a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned __int32 v14;
  unsigned __int32 v15;
  uint64_t v16;
  __n128 v18;
  void *v19[2];
  _DWORD v20[66];
  uint64_t v21;

  v6 = a2;
  v21 = *MEMORY[0x24BDAC8D0];
  v8 = sub_22EC140CC(a1, *(_QWORD *)(a2 + 16), *(void **)(a2 + 24), 0, 0);
  if (!v8)
    return 1;
  v10 = v8;
  v11 = v9;
  v12 = (*(_BYTE *)(v6 + 2) & 4) != 0 ? *(_DWORD *)(v6 + 64) : 0;
  sub_22EC1C534(&v18, a1, (__n128 *)(v6 + 32));
  if (!v18.n128_u64[0])
    return 1;
  v13 = *(unsigned int *)v6;
  if ((v13 & 0x40000) != 0 && (v14 = *(_DWORD *)(v6 + 56)) != 0)
  {
    v15 = *(_DWORD *)(v6 + 60);
    v19[0] = v20;
    v19[1] = (void *)0x800000000;
    v20[64] = v14;
    v20[65] = v15;
    v16 = v6 + 56 + 16 * ((v13 >> 18) & 1);
    if ((sub_22EC21310((uint64_t)a1, v16, v16 + 32 * *(unsigned int *)(v6 + 68)) & 1) != 0)
      v6 = 1;
    else
      v6 = sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v18, (uint64_t)v19, a3, a4);
    if (v19[0] != v20)
      free(v19[0]);
  }
  else if (*(_DWORD *)(*a1 + 11992) != -1
         || v10 != *(_QWORD *)(v6 + 16)
         || v11 != *(_QWORD *)(v6 + 24)
         || v18.n128_u64[0] != *(_QWORD *)(v6 + 32))
  {
    return sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v18, 0, a3, a4);
  }
  return v6;
}

uint64_t sub_22EC21784(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unsigned __int8 *v6;
  __n128 v7;
  uint64_t v8;

  v2 = a2;
  v4 = sub_22EC0F7CC((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  sub_22EBCEF90(a1, (unint64_t)v6, v7);
  if ((v8 & 1) != 0)
    return 1;
  if (*(_DWORD *)(*a1 + 11992) != -1
    || v5 != *(unint64_t **)(v2 + 24)
    || *(_QWORD *)(v2 + 16) != (v8 & 0xFFFFFFFFFFFFFFFELL))
  {
    __asm { BR              X12 }
  }
  return v2;
}

uint64_t sub_22EC21848@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 131, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22EC21854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 133, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22EC21860@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 145, v6, a3, a4, v5 | (a5 << 32));
}

uint64_t sub_22EC2186C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  return sub_22E95ADCC(a1, a2, 146, v6, a3, a4, v5 | (a5 << 32));
}

void sub_22EC21878()
{
  JUMPOUT(0x22EC21880);
}

unint64_t sub_22EC21894(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t *v9;
  unsigned int v10;
  unint64_t v11;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)(a1 + 8);
  v4 = (unsigned __int8 *)sub_22EFBC5B4(v3);
  result = sub_22EC1726C(v2, v4, (*(_BYTE *)(v3 + 96) & 0x60) == 32);
  if ((result & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v10 = *(_DWORD *)(v7 + 16);
    if (v10 >= *(_DWORD *)(v7 + 20))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = *(_DWORD *)(v7 + 16);
    }
    *(_OWORD *)(*(_QWORD *)(v7 + 8) + 16 * v10) = xmmword_22F45D8D0;
  }
  else
  {
    v11 = result & 0xFFFFFFFFFFFFFFFELL;
    result = sub_22F3369FC();
    v6 = result;
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_DWORD *)(v7 + 16);
    if (v8 >= *(_DWORD *)(v7 + 20))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_DWORD *)(v7 + 16);
    }
    v9 = (unint64_t *)(*(_QWORD *)(v7 + 8) + 16 * v8);
    *v9 = v11;
    v9[1] = v6;
  }
  ++*(_DWORD *)(v7 + 16);
  return result;
}

uint64_t sub_22EC21A04(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  _BOOL4 v17;
  uint64_t v18;
  int v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  const void *v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  unint64_t v36;
  __int16 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  const void *v48;
  void *v49;
  void **v50;
  uint64_t *v51;
  int v52;
  int v53;
  int v54;
  unint64_t v56;
  _BOOL4 v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  int v63;
  _BYTE v64[64];
  char **v65;

  v14 = sub_22E903070(a1, 0);
  v15 = v14;
  if (*(_QWORD *)(a1 + 10288) > 0xFuLL)
    goto LABEL_8;
  if ((*(_WORD *)(v14 + 8) & 0x7Eu) - 54 <= 3
    && (*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)(v14 - 72) + 32))(v14 - 72) + 80) & 0xE000) != 0x4000)
  {
    if ((*(_QWORD *)(v15 - 32) & 7) == 6)
    {
      v16 = *(_DWORD *)(*(_QWORD *)(v15 - 32) & 0xFFFFFFFFFFFFFFF8) - 1;
      v17 = v16 < 4;
      if (*(_DWORD *)a4 == 4)
      {
        if (v16 < 4)
          goto LABEL_99;
LABEL_103:
        v56 = sub_22EBBB18C(a1);
        return sub_22EC24AB8(a1, 0, v56, 0, 1u, a2, a3, 0, a4, a5, a6, 0, 0);
      }
LABEL_12:
      v60 = v64;
      v61 = v64;
      v62 = 4;
      v63 = 0;
      v18 = *(unsigned int *)(a4 + 16);
      if (!(_DWORD)v18)
      {
        v32 = 0;
        goto LABEL_96;
      }
      v58 = v17;
      v59 = v15;
      v19 = 0;
      v20 = 0;
      v21 = *(_QWORD **)(a4 + 8);
      v22 = 8 * v18;
      do
      {
        v23 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
        v24 = *(_DWORD *)(v23 + 28) & 0x7F;
        v25 = v24 > 0x2F;
        v26 = (1 << v24) & 0xC00000060000;
        if (!v25 && v26 != 0)
          v23 = sub_22EFBAEA4(*v21 & 0xFFFFFFFFFFFFFFFCLL);
        if (sub_22EFBAEF8(v23))
        {
          v28 = *(_QWORD *)(v23 + 16);
          v29 = (_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF8);
          if ((v28 & 4) != 0)
            v29 = (_QWORD *)*v29;
          v19 |= ((*(_DWORD *)(v23 + 28) & 0x7Fu) - 49 < 0x14) & (0x80207u >> ((*(_BYTE *)(v23 + 28) & 0x7F) - 49));
          if (v29)
            v30 = v29 - 8;
          else
            v30 = 0;
          v31 = (const void *)(*(uint64_t (**)(_QWORD *))(*v30 + 32))(v30);
          sub_22E3BA850((uint64_t)&v60, v31);
        }
        else
        {
          v20 = 1;
        }
        ++v21;
        v22 -= 8;
      }
      while (v22);
      if (HIDWORD(v62) == v63)
      {
        v32 = 0;
        goto LABEL_96;
      }
      v33 = *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 576);
      if (v33 < 2)
      {
        v34 = 10;
        if ((v19 & 1) != 0)
        {
          if ((**(_QWORD **)(a1 + 72) & 0x200) != 0)
            v34 = 8;
          else
            v34 = 10;
          if ((**(_QWORD **)(a1 + 72) & 0x200) != 0)
            v35 = 8;
          else
            v35 = 9;
        }
        else
        {
          v35 = 9;
        }
        v36 = v59;
        if (v58)
          goto LABEL_52;
LABEL_41:
        v37 = *(_WORD *)(v36 + 8);
        if ((v37 & 0x7Eu) - 58 < 0xFFFFFFFC || !v36)
        {
          if (v36)
            v40 = v36 - 64;
          else
            v40 = 0;
          goto LABEL_75;
        }
        v38 = v37 & 0x7F;
        v39 = -40;
        if (v38 > 70)
        {
          if (v38 != 83)
          {
            if (v38 == 71)
            {
              v39 = -56;
              goto LABEL_69;
            }
            if (v38 == 81)
              goto LABEL_69;
LABEL_64:
            v41 = v38 - 52;
            v42 = (v38 - 33) >= 5;
            v43 = -48;
            if (!v42)
              v43 = -64;
            if (v41 >= 6)
              v39 = v43;
            else
              v39 = -72;
          }
        }
        else
        {
          if (v38 > 0x18)
            goto LABEL_63;
          if (v38 != 16)
          {
            if (((1 << v38) & 0x1066) != 0)
              goto LABEL_69;
            if (v38 != 24)
            {
LABEL_63:
              if (v38 == 70)
              {
                v39 = -64;
                goto LABEL_69;
              }
              goto LABEL_64;
            }
          }
          v39 = -48;
        }
LABEL_69:
        v44 = *(_QWORD *)(v36 + v39 + 16);
        v45 = (_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF8);
        if ((v44 & 4) != 0)
          v45 = (_QWORD *)*v45;
        if (v45)
          v46 = v45 - 8;
        else
          v46 = 0;
        v40 = (*(uint64_t (**)(_QWORD *))(*v46 + 32))(v46);
LABEL_75:
        if (!*(_QWORD *)(a4 + 96)
          || (v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 32))(v40),
              v47 == (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 96) + 32))(*(_QWORD *)(a4 + 96))))
        {
LABEL_80:
          v65 = &v60;
          v49 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 32))(v40);
          v50 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v60, v49);
          if (v61 == v60)
            v51 = (uint64_t *)((char *)&v62 + 4);
          else
            v51 = &v62;
          if (v50 == (void **)&v61[8 * *(unsigned int *)v51])
          {
            v52 = sub_22EFB3B2C(v40, (uint64_t (*)(uint64_t, uint64_t))sub_22EC2628C, (uint64_t)&v65);
            if ((v20 & 1) != 0)
              v53 = 3;
            else
              v53 = v34;
            if ((v20 & 1) != 0)
              v54 = 1;
            else
              v54 = 4;
            if (v52)
              v32 = v53;
            else
              v32 = v54;
          }
          else if ((v20 & 1) != 0)
          {
            v32 = 1;
          }
          else
          {
            v32 = 4;
          }
          goto LABEL_96;
        }
        if (v61 != v60)
        {
          if (v62 >= 0x21 && 4 * (HIDWORD(v62) - v63) < v62)
          {
            llvm::SmallPtrSetImplBase::shrink_and_clear((llvm::SmallPtrSetImplBase *)&v60);
            goto LABEL_79;
          }
          memset(v61, 255, 8 * v62);
        }
        HIDWORD(v62) = 0;
        v63 = 0;
LABEL_79:
        v48 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 96) + 32))(*(_QWORD *)(a4 + 96));
        sub_22E3BA850((uint64_t)&v60, v48);
        goto LABEL_80;
      }
      v36 = v59;
      if (v33 == 3)
      {
        v34 = 6;
        v35 = 6;
        if (!v58)
          goto LABEL_41;
      }
      else
      {
        v35 = 9;
        v34 = 10;
        if (!v58)
          goto LABEL_41;
      }
LABEL_52:
      if ((v20 & 1) != 0)
        v32 = 2;
      else
        v32 = v35;
LABEL_96:
      if (v61 != v60)
        free(v61);
      __asm { BR              X10 }
    }
LABEL_8:
    if (*(_DWORD *)a4 == 4)
      goto LABEL_103;
    v17 = 0;
    goto LABEL_12;
  }
  if (*(_DWORD *)a4 != 4)
  {
    v17 = 1;
    goto LABEL_12;
  }
LABEL_99:
  if (a5 || a3)
    return sub_22ED66318((_QWORD *)a1, (uint64_t)a2, a3, a4, 0, a5);
  if (!a7)
    return sub_22EB235A8((_QWORD *)a1, (uint64_t)a2, a4, 0, 0);
  return a7;
}

unsigned int *sub_22EC22038(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  __int16 v15;
  int v16;
  uint64_t v17;
  _BOOL4 v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v38;
  unsigned int v39[25];
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v5 = a3;
  v8 = *(_DWORD *)(a4 + 8);
  LODWORD(v43) = v8;
  HIDWORD(v43) = v8;
  if (*(_QWORD *)(a2 + 8))
    LODWORD(v43) = *(_QWORD *)a2;
  v9 = *(_DWORD *)(a3 + 28) & 0x7F;
  v10 = v9 > 0x2F;
  v11 = (1 << v9) & 0xC00000060000;
  if (!v10 && v11 != 0)
    v5 = sub_22EFBAEA4(a3);
  v13 = sub_22E903070((uint64_t)a1, 0);
  if (!v13 || (v14 = v13, v15 = *(_WORD *)(v13 + 8), (v15 & 0x7Eu) - 58 < 0xFFFFFFFC))
  {
    if ((*(_DWORD *)(v5 + 28) & 0x7Fu) - 49 < 3)
    {
LABEL_65:
      sub_22E8FCA40(a1, v8, 0xE57u, 0, (uint64_t)v39);
      v38 = *(_QWORD *)a4;
      v36 = (unsigned int *)sub_22E894538((uint64_t)v39, &v38);
      goto LABEL_67;
    }
    v18 = (*(_DWORD *)(v5 + 28) & 0x7F) == 68;
LABEL_64:
    if (!v18)
    {
      sub_22E8FCA40(a1, v8, 0xEB4u, 0, (uint64_t)v39);
      v36 = v39;
      goto LABEL_67;
    }
    goto LABEL_65;
  }
  v16 = v15 & 0x7F;
  v17 = -40;
  if (v16 <= 70)
  {
    if (v16 <= 0x18)
    {
      if (v16 == 16)
      {
LABEL_13:
        v17 = -48;
        goto LABEL_27;
      }
      if (((1 << v16) & 0x1066) != 0)
        goto LABEL_27;
      if (v16 == 24)
        goto LABEL_13;
    }
    if (v16 == 70)
    {
LABEL_25:
      v17 = -64;
      goto LABEL_27;
    }
    goto LABEL_23;
  }
  if (v16 == 83)
    goto LABEL_27;
  if (v16 == 71)
  {
    v17 = -56;
    goto LABEL_27;
  }
  if (v16 != 81)
  {
LABEL_23:
    if ((v16 - 52) >= 6)
    {
      if ((v16 - 33) >= 5)
        goto LABEL_13;
      goto LABEL_25;
    }
    v17 = -72;
  }
LABEL_27:
  v19 = v13 - 72;
  v20 = *(_QWORD *)(v14 + v17 + 16);
  v21 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
  if ((v20 & 4) != 0)
    v21 = (_QWORD *)*v21;
  if (v21)
    v22 = (uint64_t)(v21 - 8);
  else
    v22 = 0;
  v42 = v22;
  v23 = *(_QWORD *)(v5 + 16);
  v24 = v23 & 0xFFFFFFFFFFFFFFF8;
  if ((v23 & 4) != 0)
    v24 = *(_QWORD *)v24;
  v25 = (*(_WORD *)(v24 + 8) & 0x7F) - 35;
  if (v24)
    v26 = v24 - 64;
  else
    v26 = 0;
  if (v25 >= 3)
    v27 = 0;
  else
    v27 = v26;
  v41 = v27;
  if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v19 + 32))(v19) + 80) & 0xE000) == 0x4000)
  {
    v30 = *(_DWORD *)(v5 + 28) & 0x7F;
    if ((v30 - 49) < 3)
      goto LABEL_53;
    v29 = 1;
    goto LABEL_51;
  }
  if ((*(_QWORD *)(v14 - 32) & 7) != 6)
  {
    v29 = 0;
    v18 = (*(_DWORD *)(v5 + 28) & 0x7Fu) - 49 < 3 || (*(_DWORD *)(v5 + 28) & 0x7F) == 68;
    v40 = v18;
    goto LABEL_54;
  }
  v28 = *(_DWORD *)(*(_QWORD *)(v14 - 32) & 0xFFFFFFFFFFFFFFF8) - 1;
  v29 = v28 < 4;
  v30 = *(_DWORD *)(v5 + 28) & 0x7F;
  if ((v30 - 49) >= 3)
  {
LABEL_51:
    v18 = v30 == 68;
    v40 = v30 == 68;
    if (v30 != 68 || !v29)
      goto LABEL_54;
    goto LABEL_53;
  }
  v18 = 1;
  v40 = 1;
  if (v28 > 3)
  {
    v29 = 0;
LABEL_54:
    if (v21 && v27 && (!*(_DWORD *)a2 || !*(_DWORD *)(a2 + 4)))
    {
      if (*(_QWORD *)(a2 + 8))
        v29 = 1;
      if (!v29)
      {
        v32 = sub_22EFCC008(v27 + 64);
        if (v32 != sub_22EFCC008(v22 + 64))
        {
          if (sub_22EFCBE78(v27 + 64, v22 + 64))
          {
            sub_22E8FCA40(a1, v8, 0xF9Au, 0, (uint64_t)v39);
            v33 = sub_22E894E38((uint64_t)v39, (unsigned __int8 *)&v40);
            v34 = sub_22E890024(v33, &v41);
            v38 = *(_QWORD *)a4;
            v35 = sub_22E894538(v34, &v38);
            v36 = (unsigned int *)sub_22E890024(v35, &v42);
LABEL_67:
            sub_22E8906A0((uint64_t)v36, &v43);
            return sub_22E903BEC(v39);
          }
        }
      }
    }
    goto LABEL_64;
  }
LABEL_53:
  sub_22E8FCA40(a1, v8, 0xE54u, 0, (uint64_t)v39);
  v31 = sub_22E8906A0((uint64_t)v39, &v43);
  v38 = *(_QWORD *)a4;
  sub_22E894538(v31, &v38);
  return sub_22E903BEC(v39);
}

uint64_t sub_22EC22410(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, unsigned int a7, uint64_t a8, __int128 *a9, uint64_t a10)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36[24];
  uint64_t v37;

  v37 = a3;
  if ((a4 & 1) == 0
    && ((v18 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0)) != 0 && *(_BYTE *)(v18 + 16) == 39
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
     && (v18 = sub_22F10CF48(v18)) != 0)
    && ((*(_BYTE *)(a1[9] + 1) & 0x40) == 0
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                 + 16) == 45))
  {
    sub_22E8FCA40(a1, a5, 0x1380u, 0, (uint64_t)v36);
    v19 = sub_22E8901B8((uint64_t)v36, &v37);
    sub_22F0D4E74(a2);
    v35 = v20;
    v21 = sub_22E8906A0(v19, &v35);
    v22 = *((unsigned int *)a9 + 2);
    sub_22EFC70E8(a9);
    LODWORD(v24) = *((_DWORD *)a9 + 2);
    if (v23)
      v24 = v23;
    else
      v24 = v24;
    v34 = v22 | (v24 << 32);
    sub_22E8906A0(v21, &v34);
    sub_22E903BEC(v36);
    return 1;
  }
  else
  {
    v26 = a1[11];
    v28 = *(_QWORD *)(a6 + 8);
    v27 = (uint64_t *)(a6 + 8);
    if (v28)
    {
      v29 = sub_22F0ABC50(v27, v26);
      v30 = v31;
    }
    else
    {
      v29 = 0;
      v30 = 0;
    }
    v32 = *a9;
    v33 = *((_QWORD *)a9 + 2);
    return sub_22F061D9C(v26, a2, a3, a4, a5, v29, v30, a7, a8, (uint64_t)&v32, a10);
  }
}

uint64_t sub_22EC225CC(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, _BOOL8 a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v25;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _BYTE v50[64];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  int v58;
  __int16 v59;
  char v60;
  uint64_t v61;

  v12 = a6;
  v13 = a5;
  v14 = a3;
  v15 = a2;
  v17 = a11;
  v18 = a12;
  v19 = a10;
  v61 = *MEMORY[0x24BDAC8D0];
  v46 = a5;
  v20 = a3 & 0xFFFFFFFFFFFFFFF0;
  if ((*(_BYTE *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
    return sub_22EC22410(a1, v15, v14, v13, a4, v12, a7, a8, (__int128 *)a9, v19);
  v21 = *(_QWORD *)(a6 + 8);
  if (v21)
  {
    v22 = a8;
    v25 = a7;
    v27 = a4;
    v28 = sub_22F0AAC5C(v21);
    a4 = v27;
    v15 = a2;
    a7 = v25;
    v14 = a3;
    v13 = a5;
    a8 = v22;
    v19 = a10;
    v12 = a6;
    v17 = a11;
    v18 = a12;
    if ((v28 & 4) != 0)
      return sub_22EC22410(a1, v15, v14, v13, a4, v12, a7, a8, (__int128 *)a9, v19);
  }
  v44 = a7;
  v41 = a8;
  v43 = a4;
  v47 = 0;
  v48 = v50;
  v49 = 0x800000000;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = a1;
  v55 = *(_OWORD *)a9;
  v56 = *(_QWORD *)(a9 + 16);
  v57 = xmmword_22F463A40;
  v58 = 16842752;
  v59 = 0;
  v60 = 0;
  sub_22EC56024((uint64_t)&v47);
  if (v15)
  {
    v45 = v15;
    v29 = v17;
    if (v18)
      v30 = *(_QWORD *)(v18 + 16);
    else
      v30 = 0;
    v35 = v43;
    v36 = v44;
    v38 = sub_22EC22E20((uint64_t)a1, (uint64_t)&v47, &v45, (char *)&v46, v43, v12, v30, v19 != 0, v44);
    if ((v45 & 1) != 0 || (v37 = v38, (v38 & 1) != 0))
    {
      v37 = 1;
    }
    else if (v38 < 2)
    {
      v39 = v45 & 0xFFFFFFFFFFFFFFFELL;
      v14 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v13 = v46;
LABEL_26:
      v37 = sub_22EC24AB8(a1, v39, v14, v35, v13, v12, v36, v41, &v47, v19, v29, 0, a12);
    }
  }
  else
  {
    v45 = 0;
    v32 = v44;
    if (v13)
    {
      v33 = *(_QWORD *)v20;
      if (!*(_QWORD *)v20 || *(_BYTE *)(v33 + 16) != 39)
      {
        v33 = sub_22F10CF48(v33);
        v32 = v44;
      }
      v20 = *(_QWORD *)(v33 + 32) & 0xFFFFFFFFFFFFFFF0;
    }
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
      v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v20 + 8) & 0xFFFFFFFFFFFFFFF0);
    else
      v34 = 0;
    v35 = v43;
    v36 = v32;
    if ((sub_22EC2297C(a1, (uint64_t)&v47, 0, v34, v43, v13, v12, v19 != 0, v32, &v45) & 1) != 0)
    {
      v37 = 1;
    }
    else
    {
      v29 = v17;
      v37 = v45;
      if (!v45)
      {
        v39 = 0;
        goto LABEL_26;
      }
    }
  }
  if (HIBYTE(v58))
  {
    if ((_DWORD)v47 == 5)
    {
      sub_22EC64D18(v54, (uint64_t)&v47);
    }
    else if (v52 && (*(_DWORD *)(v54[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v54, (uint64_t)&v47);
    }
  }
  if (v51)
  {
    v40 = sub_22EC6CBD0(v51);
    MEMORY[0x2348A0E9C](v40, 0x10E0C409F09D3C3);
  }
  if (v48 != v50)
    free(v48);
  return v37;
}

uint64_t sub_22EC2297C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, char a6, uint64_t a7, char a8, unsigned int a9, uint64_t *a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  void (**v34)(void);
  uint64_t v35;
  void (**v36)(void);
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  _BYTE v42[32];
  _BYTE v43[21];
  uint64_t v44;
  void *v45[2];
  int v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  void *v50[2];
  int v51;
  _BYTE v52[12];
  __int128 v53;
  uint64_t v54;
  uint64_t (**v55)();
  int v56;
  char v57;
  _BYTE v58[19];
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD v62[3];
  _QWORD *v63;
  _QWORD v64[3];
  _QWORD *v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  if (a3)
    sub_22F0D4E74(a3);
  else
    v17 = 0;
  v61 = v17;
  v18 = sub_22F114198(*(_QWORD *)(a4 + 24));
  if ((sub_22EBBC1D0((uint64_t)a1, a4 & 0xFFFFFFFFFFFFFFF0) & 1) != 0
    || (v55 = (uint64_t (**)())&unk_24FAB6EA8,
        v56 = 4977,
        *(_QWORD *)&v58[3] = &v61,
        v19 = 1,
        (sub_22EE8B0B0((uint64_t)a1, a5, a4 & 0xFFFFFFFFFFFFFFF0) & 1) == 0))
  {
    if ((a8 & 1) == 0 && !a9)
    {
      if (v18)
        v20 = v18 + 64;
      else
        v20 = 0;
      v60 = v20;
      if (*(_QWORD *)(a7 + 8))
      {
        v20 = sub_22E958204((uint64_t)a1, a7, 0);
        v60 = v20;
        if (sub_22E958490(a1, a7, v20))
        {
          sub_22E8FCA40(a1, *(_DWORD *)(a7 + 4), 0x1371u, 0, (uint64_t)&v55);
          *(_QWORD *)&v53 = *(_QWORD *)a7;
          v21 = sub_22E8906A0((uint64_t)&v55, (uint64_t *)&v53);
          sub_22E894FB4(v21, (uint64_t *)&v60);
LABEL_27:
          sub_22E903BEC((unsigned int *)&v55);
          return 1;
        }
        if ((*(_WORD *)(v20 + 8) & 0x7Fu) - 33 >= 0xA)
        {
          sub_22E8FCA40(a1, *(_DWORD *)(a2 + 128), 0x1206u, 0, (uint64_t)&v55);
          v35 = sub_22E894FB4((uint64_t)&v55, (uint64_t *)&v60);
          *(_QWORD *)&v53 = *(_QWORD *)a7;
          sub_22E8906A0(v35, (uint64_t *)&v53);
          goto LABEL_27;
        }
      }
      sub_22EC64868((uint64_t)a1, a2, v20, a7);
      if (*(_DWORD *)(a2 + 16))
        return 0;
      v25 = *(_QWORD *)(a2 + 120);
      v23 = a2 + 120;
      v24 = v25;
      v26 = *(_DWORD *)(v23 + 8);
      v40 = *(_QWORD *)(v23 - 8);
      v53 = *(_OWORD *)v23;
      v27 = *(_QWORD *)(v23 + 16);
      if (*(_BYTE *)(v23 + 41))
        v28 = 2;
      else
        v28 = *(_BYTE *)(v23 + 40);
      v38 = v28;
      v39 = *(_DWORD *)(v23 + 32);
      memset(v58, 0, sizeof(v58));
      v54 = v27;
      v55 = &off_24FAB8628;
      v59 = sub_22F114198(*(_QWORD *)(a4 + 24));
      v56 = 0;
      v57 = 0;
      v29 = *(unsigned int *)(v23 + 32);
      *(_QWORD *)&v47 = a1;
      *((_QWORD *)&v47 + 1) = v24;
      v30 = *(_QWORD *)a7;
      v48 = v60;
      v49 = v30;
      sub_22F0AB560(v50, a7 + 8);
      *(_DWORD *)v52 = v26;
      *(_QWORD *)&v52[4] = v61;
      v31 = (char *)operator new(0x50uLL);
      *(_QWORD *)v31 = &off_24FAB8660;
      *(_OWORD *)(v31 + 8) = v47;
      v32 = v49;
      *((_QWORD *)v31 + 3) = v48;
      *((_QWORD *)v31 + 4) = v32;
      sub_22F0AB560((_QWORD *)v31 + 5, (uint64_t)v50);
      *((_QWORD *)v31 + 8) = *(_QWORD *)v52;
      *((_DWORD *)v31 + 18) = *(_DWORD *)&v52[8];
      v65 = v31;
      *(_QWORD *)v42 = v40;
      *(_OWORD *)&v42[8] = v53;
      *(_QWORD *)&v42[24] = v54;
      *(_QWORD *)v43 = __PAIR64__(v38, v39);
      *(_QWORD *)&v43[8] = a3;
      *(_DWORD *)&v43[16] = a5;
      v43[20] = a6;
      v44 = *(_QWORD *)a7;
      sub_22F0AB560(v45, a7 + 8);
      v33 = (char *)operator new(0x60uLL);
      *(_QWORD *)v33 = &off_24FAB86A8;
      *(_OWORD *)(v33 + 8) = *(_OWORD *)v42;
      *(_OWORD *)(v33 + 24) = *(_OWORD *)&v42[16];
      *(_OWORD *)(v33 + 40) = *(_OWORD *)v43;
      *(_QWORD *)(v33 + 53) = *(_QWORD *)&v43[13];
      *((_QWORD *)v33 + 8) = v44;
      sub_22F0AB560((_QWORD *)v33 + 9, (uint64_t)v45);
      v63 = v33;
      *a10 = sub_22EC6B26C((uint64_t)a1, v23, v29, 0, a7, (uint64_t)&v55, v64, v62, 1, v60, 0, 0);
      if (v63 == v62)
      {
        v34 = (void (**)(void))(v62[0] + 32);
      }
      else
      {
        if (!v63)
          goto LABEL_30;
        v34 = (void (**)(void))(*v63 + 40);
      }
      (*v34)();
LABEL_30:
      if (v46)
        free(v45[1]);
      if (v65 == v64)
      {
        v36 = (void (**)(void))(v64[0] + 32);
      }
      else
      {
        if (!v65)
          goto LABEL_37;
        v36 = (void (**)(void))(*v65 + 40);
      }
      (*v36)();
LABEL_37:
      if (v51)
        free(v50[1]);
      return 0;
    }
    if (*(_QWORD *)(a7 + 8))
      v22 = 0;
    else
      v22 = a4 & 0xFFFFFFFFFFFFFFF0;
    LOBYTE(v55) = 0;
    return sub_22ED566F4((uint64_t)a1, a2, 0, a7, v22, 0, &v55, a9 | 0x100000000, 0, 1);
  }
  return v19;
}

uint64_t sub_22EC22E20(uint64_t a1, uint64_t a2, uint64_t *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  char *v13;
  uint64_t *v14;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _DWORD *v37;
  int v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  int v51;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  int v79;
  BOOL v80;
  BOOL v81;
  unsigned __int8 *v83;
  unsigned int v84;
  unsigned int *v85;
  const char *v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  char v92;
  int v93;
  uint64_t v94;
  unint64_t v95;
  const char *v96;
  int v97;
  char v98;
  const char *v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  int v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BOOL4 v122;
  const char *v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t *v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  int v148;
  uint64_t v149;
  int v150;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  BOOL v167;
  uint64_t v168;
  int v169;
  int v170;
  _DWORD *v172;
  unsigned int v173;
  unsigned int v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  int v178;
  BOOL v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t *v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  int v200;
  int v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  void *v207;
  void **v208;
  uint64_t v209;
  unsigned __int8 v210;
  void **v211;
  void **v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  int v221;
  _QWORD *v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  _BOOL4 v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  int v235;
  unsigned __int8 *v236;
  int v237;
  uint64_t v238;
  unsigned int *v239;
  unint64_t v240;
  uint64_t v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  unsigned int v245;
  BOOL v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  uint64_t *v252;
  unint64_t v253;
  uint64_t v254;
  unsigned int v255;
  uint64_t v256;
  unint64_t v257;
  int v258;
  _BYTE v259[96];
  _BYTE *v260;
  _BYTE v261[12];
  char v262;
  void *__p;
  uint64_t v264;
  uint64_t v265;
  char v266;
  uint64_t v267;
  uint64_t (**v268)();
  int v269;
  char v270;
  uint64_t v271;
  _BYTE v272[11];
  uint64_t v273;
  int v274;
  void **v275;
  unint64_t v276;
  unint64_t v277;
  void **v278;
  unint64_t v279;
  unint64_t *v280;
  unint64_t v281;
  __int128 v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char v286;
  _QWORD v287[5];

  v13 = a4;
  v14 = a3;
  v287[3] = *MEMORY[0x24BDAC8D0];
  v17 = sub_22EC2624C(a1, (_QWORD *)(*a3 & 0xFFFFFFFFFFFFFFFELL), *a4);
  *v14 = v17;
  if ((v17 & 1) != 0)
    return 1;
  v254 = a7;
  v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v275 = *(void ***)(a2 + 120);
  v276 = v18;
  v252 = (uint64_t *)(a2 + 120);
  v19 = *(_DWORD *)(a2 + 128);
  v274 = v19;
  if (!*v13)
    goto LABEL_12;
  v20 = v18 & 0xFFFFFFFFFFFFFFF0;
  v21 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0);
  v22 = *(unsigned __int8 *)(v21 + 16);
  if (v21 && v22 == 39)
    goto LABEL_11;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
  {
    v21 = sub_22F10CF48(v21);
    if (v21)
    {
LABEL_11:
      v18 = *(_QWORD *)(v21 + 32);
      v276 = v18;
      goto LABEL_12;
    }
    v21 = *(_QWORD *)v20;
    v22 = *(unsigned __int8 *)(*(_QWORD *)v20 + 16);
  }
  if (v22 == 32)
    goto LABEL_11;
  v23 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v23 == 32)
  {
    v21 = sub_22F10CF48(v21);
    if (v21)
      goto LABEL_11;
    v23 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v23 != 45)
  {
    if ((v23 - 25) >= 2)
    {
      sub_22E8FCA40((_QWORD *)a1, v19, 0x137Du, 0, (uint64_t)&v278);
      v94 = sub_22E8901B8((uint64_t)&v278, (uint64_t *)&v276);
      v95 = *v14 & 0xFFFFFFFFFFFFFFFELL;
      goto LABEL_213;
    }
    goto LABEL_191;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) == 0)
  {
    sub_22E8FCA40((_QWORD *)a1, a5, 0x1381u, 0, (uint64_t)&v278);
    v139 = sub_22E8901B8((uint64_t)&v278, (uint64_t *)&v276);
    LODWORD(v260) = *v13;
    v140 = sub_22E8900C4(v139, (int *)&v260);
    sub_22F0D4E74(*v14 & 0xFFFFFFFFFFFFFFFELL);
    v281 = v141;
    sub_22E8906A0(v140, (uint64_t *)&v281);
    BYTE12(v282) = 0;
    *(_QWORD *)((char *)&v282 + 4) = 0;
    v284 = 0;
    v285 = 0x100000000000000;
    v283 = 46;
    v286 = 0;
    v281 = a5 | ((unint64_t)a5 << 32);
    LOBYTE(v282) = 1;
    sub_22E890748((uint64_t)&v278, &v281);
    if (SHIBYTE(v285) < 0)
      operator delete((void *)v283);
    sub_22E903BEC((unsigned int *)&v278);
    v18 = v276;
  }
  *v13 = 0;
LABEL_12:
  v24 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0);
  if (v24)
    v25 = *(_BYTE *)(v24 + 16) == 6;
  else
    v25 = 0;
  if (v25
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 6
    && (v24 = sub_22F10CF48(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0))) != 0)
  {
    v26 = *(_QWORD *)(a1 + 88) + 2128;
    v278 = 0;
    v279 = v26;
    LODWORD(v280) = 6230;
    sub_22EB52944(a1, a5, 0, 0, (uint64_t *)&v278);
    if (v278 && v279)
      sub_22E3BB10C(v279, (unint64_t)v278);
    v27 = v14;
    v28 = *(_QWORD *)(v24 + 32);
    v29 = *(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF0);
    v256 = a6;
    v30 = a8;
    if ((*(_BYTE *)(v29 + 8) & 0xF) != 0)
      v29 = (unint64_t)sub_22F10D2BC(v28);
    v31 = a2;
    v32 = v30;
    v33 = v29 & 0xFFFFFFFFFFFFFFF0;
    v276 = v29 & 0xFFFFFFFFFFFFFFF0;
    v34 = *(_QWORD *)(a1 + 88);
    v35 = v13;
    v36 = a5;
    if (*v13)
      v33 = sub_22EF5B848(*(_QWORD *)(a1 + 88), v33, 0);
    v37 = (_DWORD *)(*v27 & 0xFFFFFFFFFFFFFFFELL);
    v38 = (*v37 >> 8) & 3;
    v39 = (unsigned int *)sub_22E3CD3D4(v34 + 2032, 24, 3);
    *v27 = (uint64_t)sub_22F003694(v39, v33, 61, (uint64_t)v37, 0, 0, v38);
    a5 = v36;
    v40 = v32;
    a6 = v256;
    v14 = v27;
    v13 = v35;
    a2 = v31;
    a8 = v40;
  }
  v41 = *(_QWORD *)(v276 & 0xFFFFFFFFFFFFFFF0);
  v42 = *(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v42 && *(_BYTE *)(v42 + 16) == 45)
  {
    v278 = 0;
    if (sub_22EC2297C((_QWORD *)a1, a2, *v14 & 0xFFFFFFFFFFFFFFFELL, v42, a5, *v13, a6, a8, a9, (uint64_t *)&v278))return 1;
    else
      return (uint64_t)v278;
  }
  v44 = sub_22E4EBB74(v41);
  if (v44)
  {
    v102 = v44;
    v104 = *(_DWORD *)a6;
    v103 = *(_DWORD *)(a6 + 4);
    if (v103)
      v105 = v104 == 0;
    else
      v105 = 1;
    v106 = *(_QWORD *)(a6 + 8);
    if ((!v105 || v106) && (!v104 || !v103 || v106))
    {
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)a6, 0x1208u, 0, (uint64_t)&v278);
      LODWORD(v268) = 1;
      v107 = sub_22E8900C4((uint64_t)&v278, (int *)&v268);
      v260 = *(_BYTE **)(a6 + 8);
      v108 = sub_22EA02390(v107, (uint64_t *)&v260);
      v109 = *(_QWORD *)a6;
      *(_QWORD *)((char *)&v282 + 4) = 0;
      BYTE12(v282) = 0;
      v284 = 0;
      v285 = 0;
      v283 = 0;
      v286 = 0;
      v281 = v109;
      LOBYTE(v282) = 1;
      sub_22E890748(v108, &v281);
      if (SHIBYTE(v285) < 0)
        operator delete((void *)v283);
      sub_22E903BEC((unsigned int *)&v278);
      *(_DWORD *)(a6 + 24) = 0;
      *(_QWORD *)a6 = 0;
      *(_QWORD *)(a6 + 8) = 0;
    }
    if ((v275 & 7) != 0)
      v110 = 0;
    else
      v110 = (unint64_t)v275 & 0xFFFFFFFFFFFFFFF8;
    v277 = v110;
    v111 = sub_22F272660(v102);
    if (!v111)
    {
      v165 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v102 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
      if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 2) == 0
        || ((v178 = *(_DWORD *)(*(_QWORD *)v165 + 16) & 0xFF800FF, v178 != 114819083)
          ? (v179 = v178 == 115343371)
          : (v179 = 1),
            !v179 ? (v180 = 0) : (v180 = 1),
            !*(_QWORD *)v165 || (v180 & 1) == 0))
      {
        v166 = *(_QWORD *)v165;
        if (v166)
          v167 = (*(_DWORD *)(v166 + 16) & 0xFF800FF) == 114819083;
        else
          v167 = 0;
        if (v167)
        {
          v168 = *(_QWORD *)(v277 + 16);
          if (*(_DWORD *)v168 == 3)
          {
            v169 = *(unsigned __int16 *)(v168 + 16);
            v170 = *(unsigned __int8 *)(v168 + 18);
            if (v169 == 29545 && v170 == 97)
            {
              v43 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
              v199 = *v14 & 0xFFFFFFFFFFFFFFFELL;
              v200 = *v13;
              v201 = v274;
              v202 = *(_QWORD *)(a1 + 88);
              v203 = sub_22F36E27C(v202);
              v204 = *(_QWORD *)(v203 + 48);
              if (v204)
                v205 = v204 & 0xFFFFFFFFFFFFFFF0;
              else
                v205 = sub_22EF6462C(v202, v203);
              sub_22F333EBC(v43, v199, v200 != 0, v201, a5, v205);
              return v43;
            }
          }
        }
        if (sub_22EC26C40(a1, v14))
          return sub_22EC22E20(a1, a2, v14, v13, a5, a6, v254, a8, a9);
      }
      goto LABEL_191;
    }
    v112 = v111;
    v281 = *v14 & 0xFFFFFFFFFFFFFFFELL;
    v278 = (void **)&unk_24FAB6ED0;
    LODWORD(v279) = 4977;
    v280 = &v281;
    v43 = 1;
    if ((sub_22EE8B0B0(a1, a5, v276) & 1) != 0)
      return v43;
    v273 = 0;
    v113 = sub_22EFDB894(v112, v277, &v273);
    if (v113)
    {
LABEL_272:
      if ((*(_BYTE *)(v113 + 28) & 0x80) != 0)
        return 1;
      v43 = 1;
      if ((sub_22EB17F48(a1, v113, &v274, 1, 0, 0, 0, 0) & 1) != 0)
        return v43;
      v185 = v112;
      v186 = v14;
      if ((*(_BYTE *)(v113 + 88) & 7u) - 3 < 2)
        goto LABEL_352;
      v187 = sub_22E90328C(a1);
      if (v187)
      {
        v188 = sub_22EFDC9F0(v187);
      }
      else
      {
        if (!v254)
        {
LABEL_277:
          v188 = 0;
          goto LABEL_307;
        }
        v228 = sub_22E903070(a1, 0);
        v188 = 0;
        if (v228 && (*(_WORD *)(v228 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA)
        {
          if ((*(_DWORD *)(v254 + 28) & 0x7F) != 0x14 && (*(_DWORD *)(v254 + 28) & 0x7F) != 0x15)
            goto LABEL_277;
          v188 = *(_QWORD *)(v254 + 88);
        }
      }
LABEL_307:
      if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 140) & 0x20000000000000) == 0)
      {
        if ((*(_BYTE *)(v113 + 88) & 7) == 1)
        {
          v218 = v273;
          if (v273)
          {
            v219 = v185;
            if (v273 == v185
              || (v220 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v273 + 32))(v273),
                  v219 = v218,
                  v220 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)v185 + 32))(v185)))
            {
              if (v188)
              {
                if (v188 == v219)
                  goto LABEL_352;
                v249 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v188 + 32))(v188);
                if (v249 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)v219 + 32))(v219))
                  goto LABEL_352;
              }
            }
          }
          v221 = v274;
          v222 = (_QWORD *)a1;
          v223 = 4556;
          goto LABEL_351;
        }
        v229 = v188 == 0;
        if (!v188 || v188 == v112)
        {
LABEL_349:
          if (v229)
          {
            v221 = v274;
            v222 = (_QWORD *)a1;
            v223 = 4575;
LABEL_351:
            sub_22E8FCA40(v222, v221, v223, 0, (uint64_t)&v278);
            v281 = *(_QWORD *)(v113 + 40);
            sub_22E894538((uint64_t)&v278, (uint64_t *)&v281);
            sub_22E903BEC((unsigned int *)&v278);
          }
        }
        else
        {
          v230 = v112;
          while (1)
          {
            v231 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v230 + 32))(v230);
            if (v231 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)v188 + 32))(v188))
              break;
            v232 = sub_22F3B46CC(v188);
            v229 = v232 == 0;
            if (v232)
            {
              v188 = v232;
              v230 = v185;
              if (v188 != v185)
                continue;
            }
            goto LABEL_349;
          }
        }
      }
      if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 8) == 0)
        goto LABEL_361;
LABEL_352:
      v236 = sub_22EFFA6B0((unsigned __int8 *)(*v186 & 0xFFFFFFFFFFFFFFFELL));
      v237 = *v236;
      if (v237 == 233)
      {
        if ((*(_DWORD *)v236 & 0x7C0000) == 0x140000)
        {
          v236 = sub_22EFFBBCC(*((unsigned __int8 **)v236 + 2));
          v237 = *v236;
        }
        else
        {
          v237 = *(_DWORD *)v236;
        }
      }
      if (v237 == 161
        && (v238 = *(_QWORD *)((*((_QWORD *)v236 + 1) & 0xFFFFFFFFFFFFFFF0) + 8), (v238 & 8) != 0)
        && (*(_QWORD *)((v238 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 0xC0)
      {
        sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v236 + 1), 0xA7Bu, 0, (uint64_t)v259);
        v239 = (unsigned int *)v259;
      }
      else
      {
LABEL_361:
        v240 = sub_22E90328C(a1);
        if (v240)
        {
          if ((v241 = v240, v242 = sub_22EFDBF50(v240), v242 <= 8) && ((1 << v242) & 0x188) != 0
            || (sub_22EC7BB24(a1, v185, v241, v113) & 1) != 0)
          {
LABEL_366:
            v43 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 48, 3);
            sub_22F3B6034(v113, v276);
            sub_22F2750A4(v43, v113, v243, v274, a5, *v186 & 0xFFFFFFFFFFFFFFFELL, *v13, 0);
            v244 = *(_QWORD *)((*(_QWORD *)(v113 + 48) & 0xFFFFFFFFFFFFFFF0) + 8);
            if ((v244 & 8) != 0 && (*(_QWORD *)((v244 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 0xC0)
            {
              v245 = *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 576);
              v246 = v245 > 3 || v245 == 2;
              if (v246
                && sub_22F1CF68C(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 32), 0x183Cu, v274, *(_QWORD *)(a1 + 104)) != 1)
              {
                v247 = *(unsigned int *)(a1 + 1904);
                if ((_DWORD)v247)
                  v248 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v247 - 8);
                else
                  v248 = 0;
                sub_22F32D650(v248, v43, 1);
              }
            }
            return v43;
          }
        }
        sub_22E8FCA40((_QWORD *)a1, v274, 0x1973u, 0, (uint64_t)&v278);
        v281 = *(_QWORD *)(v113 + 40);
        sub_22E894538((uint64_t)&v278, (uint64_t *)&v281);
        v239 = (unsigned int *)&v278;
      }
      sub_22E903BEC(v239);
      goto LABEL_366;
    }
    v270 = 1;
    v269 = 16843009;
    v271 = 0;
    memset(v272, 0, sizeof(v272));
    v268 = &off_24FAB86F0;
    BYTE1(v271) = *v13;
    v114 = v112;
    sub_22EC6AB20(a1, v252, 3, 0, 0, (uint64_t)&v268, 1, v112 + 48, (uint64_t)&v281, 0, 0, 1u);
    v115 = v281;
    if (!v281)
    {
      if (*v13 && sub_22EFDA7BC(v112, v277, 1))
      {
        sub_22E8FCA40((_QWORD *)a1, v274, 0x11D3u, 0, (uint64_t)&v278);
        v116 = sub_22E8BAE44((uint64_t)&v278, (uint64_t *)&v277);
        v267 = *(_QWORD *)((*v14 & 0xFFFFFFFFFFFFFFFELL) + 8);
        v117 = sub_22E8901B8(v116, &v267);
        v262 = 0;
        *(_QWORD *)&v261[4] = 0;
        v264 = 0;
        v265 = 0x100000000000000;
        v266 = 0;
        v260 = (_BYTE *)(a5 | (unint64_t)(a5 << 32));
        v261[0] = 1;
        __p = (void *)46;
        sub_22E890748(v117, &v260);
        if (SHIBYTE(v265) < 0)
          operator delete(__p);
      }
      else
      {
        sub_22E8FCA40((_QWORD *)a1, v274, 0x137Eu, 0, (uint64_t)&v278);
        v260 = *(_BYTE **)(v112 + 40);
        v182 = sub_22E894538((uint64_t)&v278, (uint64_t *)&v260);
        v183 = sub_22E894538(v182, (uint64_t *)&v275);
        sub_22F0D4E74(*v14 & 0xFFFFFFFFFFFFFFFELL);
        v267 = v184;
        sub_22E8906A0(v183, &v267);
      }
      sub_22E903BEC((unsigned int *)&v278);
      v113 = 0;
      goto LABEL_269;
    }
    v198 = sub_22F2E6D78((uint64_t)&v281);
    if (v198)
    {
      if ((*(_DWORD *)(v198 + 28) & 0x7F) == 0x33)
        v113 = v198;
      else
        v113 = 0;
    }
    else
    {
      v113 = 0;
    }
    v206 = *(_QWORD *)(a1 + 88) + 2128;
    v278 = 0;
    v279 = v206;
    LODWORD(v280) = 4991;
    v207 = *(void **)(v112 + 40);
    v278 = (void **)sub_22E3B8AAC(v206);
    *((_BYTE *)v278 + *(unsigned __int8 *)v278 + 1) = 10;
    v208 = v278;
    v209 = *(unsigned __int8 *)v278;
    v210 = v209 + 1;
    *(_BYTE *)v278 = v209 + 1;
    v208[v209 + 2] = v207;
    v211 = v275;
    *((_BYTE *)v208 + v210 + 1) = 10;
    v212 = v278;
    v213 = *(unsigned __int8 *)v278;
    *(_BYTE *)v278 = v213 + 1;
    v212[v213 + 2] = v211;
    sub_22EC6BEF8(a1, (uint64_t)&v281, (uint64_t)&v278, 1);
    if (v278 && v279)
      sub_22E3BB10C(v279, (unint64_t)v278);
    v214 = *(_QWORD *)(v113 + 16);
    v215 = v214 & 0xFFFFFFFFFFFFFFF8;
    if ((v214 & 4) != 0)
      v215 = *(_QWORD *)v215;
    v216 = *(_WORD *)(v215 + 8) & 0x7F;
    v217 = -40;
    if (v216 > 0x46)
    {
      switch(v216)
      {
        case 'S':
          goto LABEL_342;
        case 'G':
          v217 = -56;
          goto LABEL_342;
        case 'Q':
          goto LABEL_342;
      }
    }
    else
    {
      if (v216 <= 0x18)
      {
        if (v216 == 16)
          goto LABEL_303;
        if (((1 << v216) & 0x1066) != 0)
          goto LABEL_342;
        if (v216 == 24)
        {
LABEL_303:
          v217 = -48;
LABEL_342:
          v233 = v215 + v217;
          v234 = *(_DWORD *)(v233 + 28);
          if ((v234 & 0x7F) == 0x13)
          {
            v233 = *(_QWORD *)(v233 + 104);
            v234 = *(_DWORD *)(v233 + 28);
          }
          v235 = v234 & 0x7F;
          if (v235 != 22)
          {
            if (v235 != 21)
              goto LABEL_269;
            v233 = *(_QWORD *)(v233 + 88);
          }
          v273 = v233;
LABEL_269:
          v278 = (void **)v287;
          sub_22E8D19C8(&v278);
          if (*((uint64_t **)&v282 + 1) != &v284)
            free(*((void **)&v282 + 1));
          v112 = v114;
          if (!v115)
            return 1;
          goto LABEL_272;
        }
      }
      if (v216 == 70)
      {
LABEL_340:
        v217 = -64;
        goto LABEL_342;
      }
    }
    if (v216 - 52 < 6)
    {
      v217 = -72;
      goto LABEL_342;
    }
    if (v216 - 33 < 5)
      goto LABEL_340;
    goto LABEL_303;
  }
  v45 = v276;
  if (*v13)
    goto LABEL_33;
  v65 = *(_QWORD *)(v276 & 0xFFFFFFFFFFFFFFF0);
  if (v65 && *(_BYTE *)(v65 + 16) == 32)
  {
LABEL_65:
    v67 = *(_DWORD *)a6;
    v66 = *(_DWORD *)(a6 + 4);
    if (v66)
      v68 = v67 == 0;
    else
      v68 = 1;
    v69 = *(_QWORD *)(a6 + 8);
    if ((!v68 || v69) && (!v67 || !v66 || v69))
    {
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)a6, 0x1208u, 0, (uint64_t)&v278);
      LODWORD(v268) = 0;
      v70 = sub_22E8900C4((uint64_t)&v278, (int *)&v268);
      v260 = *(_BYTE **)(a6 + 8);
      v71 = sub_22EA02390(v70, (uint64_t *)&v260);
      v72 = *(_QWORD *)a6;
      *(_QWORD *)((char *)&v282 + 4) = 0;
      BYTE12(v282) = 0;
      v284 = 0;
      v285 = 0;
      v283 = 0;
      v286 = 0;
      v281 = v72;
      LOBYTE(v282) = 1;
      sub_22E890748(v71, &v281);
      if (SHIBYTE(v285) < 0)
        operator delete((void *)v283);
      sub_22E903BEC((unsigned int *)&v278);
      *(_DWORD *)(a6 + 24) = 0;
      *(_QWORD *)a6 = 0;
      *(_QWORD *)(a6 + 8) = 0;
    }
    v73 = sub_22EB1A358(a1, *v14 & 0xFFFFFFFFFFFFFFFELL, 0);
    *v14 = v73;
    if ((v73 & 1) != 0)
      return 1;
    v74 = a2;
    if ((v275 & 7) != 0)
      v75 = 0;
    else
      v75 = (unint64_t)v275 & 0xFFFFFFFFFFFFFFF8;
    v76 = *(_QWORD *)(*(_QWORD *)(v65 + 32) & 0xFFFFFFFFFFFFFFF0);
    if (v76)
      v77 = *(unsigned __int8 *)(v76 + 16) - 35 > 0xFFFFFFFD;
    else
      v77 = 0;
    if (!v77)
      v76 = sub_22F10CF48(v76);
    v78 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v76 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v79 = *(_DWORD *)(v78 + 16) & 0xFF800FF;
    if (v78)
      v80 = v79 == 114819083;
    else
      v80 = 0;
    if (v80)
    {
      v281 = v75 | 1;
      v118 = sub_22EC26DD4(v65, v75, (uint64_t *)&v281);
      if (!v118)
        goto LABEL_387;
      v119 = v118;
      if ((*(_DWORD *)(v118 + 28) & 0x7F) == 0x19)
      {
        v43 = 1;
        if ((sub_22EB17F48(a1, v118, &v274, 1, 0, 0, 0, 0) & 1) == 0)
        {
          v43 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 48, 3);
          sub_22F333FF4(v43, v119, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16872), 1, 3, v274, *v14 & 0xFFFFFFFFFFFFFFFELL);
        }
        return v43;
      }
      if ((*(_DWORD *)(v118 + 28) & 0x7F) != 0x18)
      {
LABEL_387:
        if (*v13 && sub_22EC26C40(a1, v14))
        {
          v58 = a5;
          v251 = a9;
          v59 = a1;
          v60 = v74;
          goto LABEL_59;
        }
LABEL_318:
        sub_22E8FCA40((_QWORD *)a1, v274, 0x11DAu, 0, (uint64_t)&v278);
        v227 = sub_22E894538((uint64_t)&v278, (uint64_t *)&v275);
        sub_22E8901B8(v227, (uint64_t *)&v276);
        goto LABEL_216;
      }
      v278 = (void **)sub_22F41FA34((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 80) + 544), *(_QWORD *)(a1 + 80) + 672, v75);
      v189 = sub_22EC26DD4(v65, 0, (uint64_t *)&v278);
      v190 = 0;
      if (v189)
      {
        if ((*(_DWORD *)(v189 + 28) & 0x7F) == 0x18)
          v190 = v189;
        else
          v190 = 0;
      }
      v191 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 48, 3);
      v43 = v191;
      v192 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16872);
      v193 = v274;
      v194 = *v14 & 0xFFFFFFFFFFFFFFFELL;
      v195 = v119;
      v196 = v190;
    }
    else
    {
      if (v78)
        v81 = v79 == 115343371;
      else
        v81 = 0;
      if (!v81)
        return sub_22EC2C60C((_QWORD *)a1, v65, *v14 & 0xFFFFFFFFFFFFFFFELL, a5, v275, v274, 0, 0, 0);
      v152 = sub_22E90328C(a1);
      if (!v152)
      {
        a2 = v74;
        if (sub_22EC26C40(a1, v14))
          goto LABEL_58;
        goto LABEL_191;
      }
      v281 = v75 | 1;
      v153 = sub_22EFDC9F0(v152);
      if (!v153)
      {
        a2 = v74;
        goto LABEL_191;
      }
      v154 = v153;
      v155 = sub_22EFDBA90(v153, v75 | 1, 0, 0, 1, 0);
      v253 = v154;
      if (v155)
      {
        v156 = v155;
        v43 = 1;
        if ((sub_22EB17F48(a1, v155, &v274, 1, 0, 0, 0, 0) & 1) != 0)
          return v43;
      }
      else
      {
        v156 = sub_22F3B4D74(v154, (uint64_t *)&v281, 0);
      }
      v260 = (_BYTE *)sub_22F41FA34((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 80) + 544), *(_QWORD *)(a1 + 80) + 672, v75);
      v197 = sub_22EFDBA90(v253, (uint64_t)v260, 0, 0, 1, 0);
      if (v197 || (v197 = sub_22F3B4D74(v253, (uint64_t *)&v260, 0)) != 0)
      {
        v43 = 1;
        if ((sub_22EB17F48(a1, v197, &v274, 1, 0, 0, 0, 0) & 1) != 0)
          return v43;
      }
      else
      {
        v224 = a8;
        v225 = v14;
        if (!v156)
        {
          v226 = v224;
          if (sub_22EC26C40(a1, v225))
            return sub_22EC22E20(a1, v74, v225, v13, a5, a6, v254, v226, a9);
          goto LABEL_318;
        }
        v197 = 0;
      }
      v191 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 48, 3);
      v43 = v191;
      v192 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16872);
      v193 = v274;
      v194 = *v14 & 0xFFFFFFFFFFFFFFFELL;
      v195 = v156;
      v196 = v197;
    }
    sub_22F2F4590(v191, v195, v196, v192, 1, 3, v193, v194);
    return v43;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v65 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32)
  {
    v65 = sub_22F10CF48(*(_QWORD *)(v276 & 0xFFFFFFFFFFFFFFF0));
    if (v65)
      goto LABEL_65;
    v45 = v276;
  }
LABEL_33:
  v46 = *(_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF0);
  v47 = *(_QWORD *)(*(_QWORD *)(v46 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (*(_DWORD *)(v47 + 16) == 56)
  {
    v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v48)
      v49 = (*(_DWORD *)(v48 + 16) & 0xFF800FF) == 87031819;
    else
      v49 = 0;
    if (!v49
      || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088)
                   + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 88) + 15088) - 24)
                   + 160) & 0x20) == 0)
    {
      if ((v275 & 7) != 0)
        v50 = 0;
      else
        v50 = (unint64_t)v275 & 0xFFFFFFFFFFFFFFF8;
      if (*v13)
      {
        v51 = 1;
      }
      else
      {
        v83 = (unsigned __int8 *)(*v14 & 0xFFFFFFFFFFFFFFFELL);
        if (*v83 == 217)
          v83 = (unsigned __int8 *)*((_QWORD *)v83 + 2);
        v51 = (*(_DWORD *)v83 >> 8) & 3;
      }
      v258 = v51;
      v84 = v274;
      v268 = (uint64_t (**)())v45;
      if (*(_BYTE *)(v46 + 16) != 56)
        v46 = sub_22F10CF48(v46);
      v257 = v50;
      v85 = *(unsigned int **)(v50 + 16);
      v281 = 0;
      *(_QWORD *)&v282 = 0;
      LODWORD(v273) = 0;
      v86 = (const char *)(v85 + 4);
      v87 = sub_22EC26FD4((unsigned __int16 *)v85 + 8, *v85);
      v88 = v87;
      v89 = *(_QWORD *)(a1 + 72);
      v90 = *(_QWORD *)(v89 + 100);
      if ((v90 & 0x2000000000) == 0
        || (*(_BYTE *)(v89 + 127) & 0x80) != 0
        || (*(_DWORD *)(v46 + 16) & 0x780000) != 0x80000)
      {
        if ((v87 - 2) < 2)
        {
          v92 = *v86;
          if (!*v86)
          {
            v98 = 0;
            goto LABEL_151;
          }
          v255 = v84;
          v93 = a5;
LABEL_115:
          v98 = 0;
          v99 = v86;
          while (1)
          {
            v100 = sub_22EC270A4(v88, v92);
            if (v100 == -1)
              break;
            v98 |= *((_BYTE *)&v281 + v100) != 0;
            *((_BYTE *)&v281 + v100) = 1;
            v101 = *(unsigned __int8 *)++v99;
            v92 = v101;
            if (!v101)
            {
              LODWORD(a5) = v93;
              v84 = v255;
              goto LABEL_151;
            }
          }
          LODWORD(a5) = v93;
          v84 = v255;
          if (*v99)
          {
            sub_22E8FCA40((_QWORD *)a1, a5, 0xD18u, 0, (uint64_t)&v278);
            v260 = v99;
LABEL_253:
            *(_QWORD *)v261 = 1;
            v126 = sub_22F2F2210((uint64_t)&v278, (uint64_t)&v260);
            LODWORD(v277) = v84;
            HIDWORD(v277) = v84;
            v127 = (uint64_t *)&v277;
            goto LABEL_215;
          }
LABEL_151:
          v120 = *(_QWORD *)(a1 + 72);
          if ((*(_DWORD *)(v120 + 52) & 0x40000000) != 0)
          {
            v121 = *(_QWORD *)(v120 + 56);
            v122 = (v121 & 0x100000000) != 0 ? *(_DWORD *)(v120 + 64) == 100 : v121 < 0x12C;
            if (v122 && v88 == 3)
            {
              sub_22E8FCA40((_QWORD *)a1, a5, 0x14C8u, 0, (uint64_t)&v278);
              v260 = (_BYTE *)(*(_QWORD *)(v257 + 16) + 16);
              *(_QWORD *)v261 = 1;
              v181 = sub_22F2F2210((uint64_t)&v278, (uint64_t)&v260);
              LODWORD(v277) = v84;
              HIDWORD(v277) = v84;
              sub_22E8906A0(v181, (uint64_t *)&v277);
              sub_22E903BEC((unsigned int *)&v278);
            }
          }
          v124 = v86;
          while (*v124)
          {
            v125 = sub_22EC270A4(v88, *v124);
            if (v125 != -1)
            {
              ++v124;
              if (v125 < *(_DWORD *)(v46 + 20))
                continue;
            }
            sub_22E8FCA40((_QWORD *)a1, a5, 0xD17u, 0, (uint64_t)&v278);
            v126 = sub_22E8901B8((uint64_t)&v278, (uint64_t *)&v268);
LABEL_165:
            LODWORD(v260) = v84;
            HIDWORD(v260) = v84;
            v127 = (uint64_t *)&v260;
            goto LABEL_215;
          }
          v128 = strlen(v86);
          LODWORD(v273) = v128;
          v129 = *(_QWORD *)(a1 + 72);
          if (((*(_DWORD *)(v129 + 52) & 0x40000000) != 0 || (*(_BYTE *)(v129 + 104) & 0x20) != 0)
            && (v128 > 0x10 || ((1 << v128) & 0x1011E) == 0))
          {
            sub_22E8FCA40((_QWORD *)a1, a5, 0x112Du, 0, (uint64_t)&v278);
            v126 = sub_22E89519C((uint64_t)&v278, (unsigned int *)&v273);
            goto LABEL_165;
          }
          v91 = v258;
          if ((v98 & 1) != 0)
            v91 = 0;
LABEL_172:
          if (v88 == 1)
            v130 = (*(_DWORD *)(v46 + 20) + 1) >> 1;
          else
            v130 = strlen(v86);
          if ((_DWORD)v130 == 1)
          {
            v131 = *(_QWORD *)(v46 + 32);
          }
          else
          {
            v132 = sub_22EF63724(*(_QWORD *)(a1 + 88), *(_QWORD *)(v46 + 32), v130, 0);
            v131 = sub_22EC27128(a1, v132);
          }
          if (v131 >= 0x10)
          {
            v133 = *(_QWORD *)(a1 + 72);
            if ((*(_BYTE *)(v133 + 104) & 0x20) == 0 || (*(_BYTE *)(v133 + 120) & 0x20) == 0)
            {
              v134 = *(_QWORD *)((*v14 & 0xFFFFFFFFFFFFFFFELL) + 8);
              v135 = *(_QWORD *)((v134 & 0xFFFFFFFFFFFFFFF0) + 8);
              v136 = v135 | v134;
              if ((v135 & 8) != 0)
              {
                v138 = *(_QWORD *)((v135 & 0xFFFFFFFFFFFFFFF0) + 0x18);
                v137 = v138 & 0xFFFFFFFF00000000;
                v138 = v138;
              }
              else
              {
                v137 = 0;
                v138 = 0;
              }
              v162 = v138 | v136 & 7;
              if (((v162 | v137) & 0xCFFFFFFF8) != 0)
              {
                v163 = *(_QWORD *)(a1 + 88);
                v278 = (void **)(v162 | v137);
                v164 = sub_22E491354((unsigned int *)&v278, v131);
                v131 = sub_22EF5DBC4(v163, v164, (uint64_t)v278);
              }
              else
              {
                v131 |= v162 & 7;
              }
            }
            v43 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
            v172 = (_DWORD *)(*v14 & 0xFFFFFFFFFFFFFFFELL);
            v173 = v274;
            *(_BYTE *)v43 = -89;
            if (byte_255E04EB3)
            {
              v250 = sub_22F0D3748(167);
              ++*((_DWORD *)v250 + 2);
            }
            v174 = (v91 << 8) | ((v91 != 0) << 11) | *(_DWORD *)v43 & 0xFFFC00FF;
            *(_DWORD *)v43 = v174;
            *(_QWORD *)(v43 + 8) = v131;
            *(_QWORD *)(v43 + 16) = v172;
            *(_QWORD *)(v43 + 24) = v257;
            *(_DWORD *)(v43 + 32) = v173;
            *(_DWORD *)v43 = *v172 & 0x3E000 | v174;
            return v43;
          }
          return 1;
        }
        if (v87 != 4)
        {
          if (v87)
          {
            v91 = v258;
            goto LABEL_172;
          }
          goto LABEL_252;
        }
        if ((v90 & 0x2000000000) == 0 || (*(_BYTE *)(v89 + 127) & 0x20) != 0)
        {
          v97 = *((unsigned __int8 *)v85 + 17);
          v96 = (char *)v85 + 17;
          v92 = v97;
          if (v97)
          {
            v255 = v84;
            v93 = a5;
            v86 = v96;
            goto LABEL_115;
          }
        }
      }
LABEL_252:
      sub_22E8FCA40((_QWORD *)a1, a5, 0xD18u, 0, (uint64_t)&v278);
      v260 = v86;
      goto LABEL_253;
    }
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a2 + 128), 0xD18u, 0, (uint64_t)&v278);
    v94 = sub_22E894538((uint64_t)&v278, (uint64_t *)&v275);
    v95 = *v14 & 0xFFFFFFFFFFFFFFFELL;
    if (!v95)
    {
LABEL_214:
      v281 = v95;
      v127 = (uint64_t *)&v281;
      v126 = v94;
LABEL_215:
      sub_22E8906A0(v126, v127);
LABEL_216:
      sub_22E903BEC((unsigned int *)&v278);
      return 1;
    }
LABEL_213:
    sub_22F0D4E74(v95);
    goto LABEL_214;
  }
  if ((*(_DWORD *)(v47 + 16) & 0xFF800FF) == 0x6E8000B && *v13 != 0)
  {
    if (((v53 = *(_QWORD *)(sub_22EB37688(*(_QWORD *)(a1 + 88)) & 0xFFFFFFFFFFFFFFF0)) == 0
       || *(_BYTE *)(v53 + 16) != 39)
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v53 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
       || (v53 = sub_22F10CF48(v53)) == 0)
      || ((v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v53 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
        ? (v55 = (*(_DWORD *)(v54 + 16) & 0xFF800FF) == 115867659)
        : (v55 = 0),
          !v55))
    {
      v56 = *v14 & 0xFFFFFFFFFFFFFFFELL;
      v57 = sub_22EB37688(*(_QWORD *)(a1 + 88));
      *v14 = sub_22E90092C(a1, v56, v57, 1, 0, 0);
LABEL_58:
      v58 = a5;
      v251 = a9;
      v59 = a1;
      v60 = a2;
LABEL_59:
      v61 = v14;
      v62 = v13;
LABEL_60:
      v63 = a6;
      v64 = v254;
      return sub_22EC22E20(v59, v60, v61, v62, v58, v63, v64, a8, v251);
    }
  }
LABEL_191:
  v142 = *(_QWORD *)(v276 & 0xFFFFFFFFFFFFFFF0);
  if (!v142 || *(_BYTE *)(v142 + 16) != 39)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v142 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
    {
      v148 = *v13;
      v149 = *(_QWORD *)(a1 + 88) + 2128;
      v278 = 0;
      v279 = v149;
      LODWORD(v280) = 3779;
      v144 = v254;
      if (!v148)
        goto LABEL_203;
      goto LABEL_201;
    }
    v142 = sub_22F10CF48(v142);
  }
  v143 = *v13;
  if (!v142 || *v13)
  {
    v146 = *(_QWORD *)(a1 + 88) + 2128;
    v278 = 0;
    v279 = v146;
    LODWORD(v280) = 3779;
    v144 = v254;
    if (!v143)
      goto LABEL_203;
LABEL_201:
    v147 = sub_22EC26E9C;
    goto LABEL_204;
  }
  v144 = v254;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v142 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) != 45
    || (v275 & 7) == 4)
  {
    v145 = *(_QWORD *)(a1 + 88) + 2128;
    v278 = 0;
    v279 = v145;
    LODWORD(v280) = 3779;
LABEL_203:
    v147 = sub_22EC26F10;
LABEL_204:
    v150 = sub_22E905A84(a1, v14, &v278, 0, v147);
    if (v278 && v279)
      sub_22E3BB10C(v279, (unint64_t)v278);
    if (!v150)
    {
      sub_22E8FCA40((_QWORD *)a1, a5, 0x1380u, 0, (uint64_t)&v278);
      v175 = sub_22E8901B8((uint64_t)&v278, (uint64_t *)&v276);
      sub_22F0D4E74(*v14 & 0xFFFFFFFFFFFFFFFELL);
      v281 = v176;
      v177 = sub_22E8906A0(v175, (uint64_t *)&v281);
      sub_22F2F2168(v177, (unsigned int *)&v274);
      goto LABEL_216;
    }
    if ((*v14 & 1) != 0)
      return 1;
    *v14 = sub_22EB1922C(a1, (void *)(*v14 & 0xFFFFFFFFFFFFFFFELL));
    v58 = a5;
    v251 = a9;
    v59 = a1;
    v60 = a2;
    v61 = v14;
    v62 = v13;
    v63 = a6;
    v64 = v144;
    return sub_22EC22E20(v59, v60, v61, v62, v58, v63, v64, a8, v251);
  }
  sub_22E8FCA40((_QWORD *)a1, a5, 0x1381u, 0, (uint64_t)&v278);
  v157 = sub_22E8901B8((uint64_t)&v278, (uint64_t *)&v276);
  LODWORD(v268) = *v13;
  v158 = sub_22E8900C4(v157, (int *)&v268);
  sub_22F0D4E74(*v14 & 0xFFFFFFFFFFFFFFFELL);
  v260 = (_BYTE *)v159;
  v160 = sub_22E8906A0(v158, (uint64_t *)&v260);
  BYTE12(v282) = 0;
  *(_QWORD *)((char *)&v282 + 4) = 0;
  v284 = 0;
  v285 = 0x200000000000000;
  v283 = 15917;
  v286 = 0;
  v281 = a5 | ((unint64_t)a5 << 32);
  LOBYTE(v282) = 1;
  sub_22E890748(v160, &v281);
  if (SHIBYTE(v285) < 0)
    operator delete((void *)v283);
  sub_22E903BEC((unsigned int *)&v278);
  sub_22EE03478(a1);
  v43 = 1;
  if (!v161)
  {
    *v13 = 1;
    v251 = a9;
    v59 = a1;
    v60 = a2;
    v61 = v14;
    v62 = v13;
    v58 = a5;
    goto LABEL_60;
  }
  return v43;
}

uint64_t sub_22EC24AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t *a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, char a12, uint64_t a13)
{
  unsigned __int8 *v18;
  uint64_t v19;
  unint64_t v20;
  __int128 *v21;
  int v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  BOOL v47;
  int v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  unsigned int v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  uint64_t *v58;
  unsigned int v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  unsigned int v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  unsigned int v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  char v126;
  unsigned int v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  int v132;
  unint64_t v134;
  char v135;
  uint64_t v136;
  char v137;
  void *__p;
  uint64_t v139;
  uint64_t v140;
  char v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147[2];
  int v148;
  uint64_t v149[2];

  v18 = (unsigned __int8 *)a2;
  v144 = a3;
  if (a5)
  {
    v19 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
    if (!v19 || *(_BYTE *)(v19 + 16) != 39)
      v19 = sub_22F10CF48(v19);
    v20 = *(_QWORD *)(v19 + 32);
    v144 = v20;
    *(_QWORD *)(a9 + 104) = v20;
  }
  else
  {
    *(_QWORD *)(a9 + 104) = a3;
    if (a2 && (*(_BYTE *)(a2 + 1) & 3) == 0)
    {
      v83 = sub_22F335E6C(a1, a2);
      if ((v83 & 1) != 0)
        return 1;
      v18 = (unsigned __int8 *)(v83 & 0xFFFFFFFFFFFFFFFELL);
    }
    v20 = a3;
  }
  v21 = (__int128 *)(a9 + 120);
  v143 = *(_QWORD *)(a9 + 120);
  v22 = *(_DWORD *)(a9 + 128);
  v142 = v22;
  if (*(_DWORD *)a9 == 5)
    return 1;
  v129 = a7;
  v130 = a4;
  v23 = a11;
  v24 = sub_22E903070(a1, 0);
  v25 = v24 - 72;
  if (!v24)
    v25 = 0;
  if ((*(_WORD *)(v24 + 8) & 0x7Eu) - 52 >= 6)
    v26 = 0;
  else
    v26 = v25;
  if (a11
    && v18
    && v26
    && ((*(_DWORD *)(v26 + 28) & 0x7F) == 0x39 || (*(_DWORD *)(v26 + 28) & 0x7F) == 0x37)
    && *sub_22EFFEB40(v18) == 133
    && (uint64_t *)a11[3] != a11)
  {
    while (1)
    {
      v27 = *((_DWORD *)v23 + 2);
      if ((v27 & 0x4000) != 0)
        break;
      v23 = (uint64_t *)*v23;
      if (v23 == (uint64_t *)v23[3])
        goto LABEL_27;
    }
    if ((v27 & 0x2000) == 0)
    {
      sub_22E8FCA40((_QWORD *)a1, v22, 0x18C6u, 0, (uint64_t)&v146);
      LOBYTE(v134) = (*(_DWORD *)(v26 + 28) & 0x7F) == 57;
      sub_22E894E38((uint64_t)&v146, (unsigned __int8 *)&v134);
      sub_22E903BEC((unsigned int *)&v146);
    }
  }
LABEL_27:
  if (!*(_DWORD *)(a9 + 16))
  {
    if (a6[1])
    {
      v44 = sub_22E958204(a1, (uint64_t)a6, 0);
    }
    else
    {
      v68 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 24));
      if (v68)
        v44 = v68 + 64;
      else
        v44 = 0;
    }
    v149[0] = v44;
    if (a13 && v18 && (a5 & 1) == 0)
    {
      v69 = (_BYTE *)(a1 + 10664);
      v70 = *(_DWORD *)(a1 + 8456);
      v128 = *(_BYTE *)(a1 + 11952);
      v126 = *(_BYTE *)(a1 + 10664);
      v132 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 180);
      sub_22EE03478(a1);
      if (!v71)
        *(_BYTE *)(a1 + 11952) = 1;
      *v69 = 1;
      v134 = 0;
      LOBYTE(v145) = 0;
      v53 = sub_22EBCD1E4((unsigned int *)a1, *(_QWORD *)(a1 + 12888), (uint64_t)v18, v130, 36, &v134, &v145);
      v72 = *(_DWORD *)(a1 + 8456);
      if (v53 >= 2 && v72 <= v70)
      {
        v146 = *a6;
        sub_22F0AB560(v147, (uint64_t)(a6 + 1));
        v53 = sub_22EC25EFC(a1, *(_QWORD *)a13, v53 & 0xFFFFFFFFFFFFFFFELL, v130, 36, (uint64_t)&v146, v129, *(_DWORD **)(a13 + 8), *(_QWORD *)(a13 + 16));
        if (v148)
          free(v147[1]);
        v72 = *(_DWORD *)(a1 + 8456);
      }
      *(_DWORD *)(a1 + 8456) = v70;
      *(_BYTE *)(a1 + 11952) = v128;
      *v69 = v126;
      v73 = *(_QWORD *)(a1 + 104);
      if (*(_DWORD *)(v73 + 180) == 5)
        *(_BYTE *)(v73 + 170) = 1;
      v74 = v132 ? 3 : 0;
      *(_DWORD *)(v73 + 180) = v74;
      if (v72 <= v70 && v53 >= 2)
      {
        sub_22E8FCA40((_QWORD *)a1, v130, 0xFABu, 0, (uint64_t)&v146);
        v75 = sub_22E894538((uint64_t)&v146, &v143);
        v76 = sub_22E894FB4(v75, v149);
        v137 = 0;
        v136 = 0;
        v139 = 0;
        v140 = 0x200000000000000;
        v141 = 0;
        v134 = v130 | (unint64_t)(v130 << 32);
        v135 = 1;
        __p = (void *)15917;
        sub_22E890748(v76, &v134);
        if (SHIBYTE(v140) < 0)
          operator delete(__p);
        sub_22E903BEC((unsigned int *)&v146);
        return v53;
      }
    }
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a9 + 128), 0xFAAu, 0, (uint64_t)&v146);
    v77 = sub_22E894538((uint64_t)&v146, &v143);
    v78 = sub_22E894FB4(v77, v149);
    if (v18)
      sub_22F0D4E74((uint64_t)v18);
    else
      v79 = 0;
    v134 = v79;
    sub_22E8906A0(v78, (uint64_t *)&v134);
LABEL_109:
    sub_22E903BEC((unsigned int *)&v146);
    return 1;
  }
  v127 = a5;
  v125 = a6 + 1;
  if (v18 && !a6[1] && (*v18 != 133 || (v18[2] & 4) == 0))
    goto LABEL_50;
  if ((a12 & 1) != 0)
    goto LABEL_50;
  v28 = sub_22E9580E4(a1, v20);
  v29 = v28 ? v28 - 64 : 0;
  if (!v28)
    goto LABEL_50;
  v30 = *(_QWORD **)(a9 + 8);
  v31 = *(unsigned int *)(a9 + 16);
  if (!(_DWORD)v31)
  {
LABEL_48:
    v37 = *v30 & 0xFFFFFFFFFFFFFFFCLL;
    v134 = v20;
    v149[0] = v37;
    if (!v18)
    {
      sub_22EC22038((_QWORD *)a1, (uint64_t)a6, v37, a9 + 120);
      return 1;
    }
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a9 + 128), 0x1207u, 0, (uint64_t)&v146);
    v145 = *a6;
    v38 = sub_22E8906A0((uint64_t)&v146, &v145);
    v39 = sub_22E890024(v38, v149);
    sub_22E8901B8(v39, (uint64_t *)&v134);
    goto LABEL_109;
  }
  v32 = 8 * v31;
  while (v18 || sub_22EFBAEF8(*v30 & 0xFFFFFFFFFFFFFFFCLL))
  {
    v33 = *(_QWORD *)((*v30 & 0xFFFFFFFFFFFFFFFCLL) + 16);
    v34 = (_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF8);
    if ((v33 & 4) != 0)
      v34 = (_QWORD *)*v34;
    v35 = sub_22EFCBFBC((unint64_t)v34);
    if ((*(_WORD *)(v35 + 8) & 0x7Eu) - 34 <= 3)
    {
      v36 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v35 - 64) + 32))(v35 - 64);
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29) == v36)
        break;
      v146 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 32))(v36);
      if (!sub_22EFB3B2C(v29, (uint64_t (*)(uint64_t, uint64_t))sub_22EFB5694, (uint64_t)&v146))
        break;
    }
    ++v30;
    v32 -= 8;
    if (!v32)
    {
      v30 = *(_QWORD **)(a9 + 8);
      goto LABEL_48;
    }
  }
LABEL_50:
  v40 = *(_DWORD *)a9;
  if ((*(_DWORD *)a9 - 3) <= 1)
  {
    *(_BYTE *)(a9 + 163) = 0;
    v41 = *(_QWORD *)(a1 + 88);
    if (*v125)
    {
      v42 = sub_22F0ABC50(v125, *(_QWORD *)(a1 + 88));
      v43 = v81;
    }
    else
    {
      v42 = 0;
      v43 = 0;
    }
    return sub_22F0620D4(v41, v40 == 4, (int *)v18, a3, v127, v130, v42, v43, v129, a9 + 120, a10, *(_QWORD **)(a9 + 8), *(_QWORD *)(a9 + 8) + 8 * *(unsigned int *)(a9 + 16));
  }
  v45 = **(_QWORD **)(a9 + 8);
  v46 = *(_DWORD *)((v45 & 0xFFFFFFFFFFFFFFFCLL) + 28);
  v47 = (v46 & 0x7Fu) > 0x2F || ((1 << (v46 & 0x7F)) & 0xC00000060000) == 0;
  v48 = v127;
  if (v47)
  {
    v49 = v45 & 0xFFFFFFFFFFFFFFFCLL;
  }
  else
  {
    v49 = sub_22EFBAEA4(v45 & 0xFFFFFFFFFFFFFFFCLL);
    v46 = *(_DWORD *)(v49 + 28);
  }
  v50 = v130;
  if ((v46 & 0x80) != 0)
    return 1;
  if (!v18)
  {
    v124 = v49;
    if (!sub_22EFBAEF8(v49))
    {
      if (a10 || v129)
        return sub_22ED66318((_QWORD *)a1, (uint64_t)a6, v129, a9, 0, a10);
      else
        return sub_22EB24A3C(a1, a6, a9 + 120, v124, v45 & 0xFFFFFFFFFFFFFFFCLL, 0, 0);
    }
    if (*a6)
      v51 = HIDWORD(*a6) == 0;
    else
      v51 = 1;
    if (v51)
      v52 = *(_DWORD *)(a9 + 128);
    else
      v52 = *a6;
    v18 = (unsigned __int8 *)sub_22EBBC14C(a1, v52, a3, 1);
    v49 = v124;
  }
  v53 = 1;
  v54 = v49;
  if ((sub_22EB17F48(a1, v49, &v142, 1, 0, 0, 0, 0) & 1) != 0)
    return v53;
  v55 = *(_DWORD *)(v54 + 28);
  v56 = v55 & 0x7F;
  v57 = v54;
  if ((v56 - 52) >= 0xFFFFFFFD)
    return sub_22EC25974(a1, v18, v127, v130, a6, v54, v45, a9 + 120);
  if (v56 == 68)
    return sub_22EC257BC(a1, a6, v142, v54, v45, v18);
  if (v56 != 58)
  {
    v58 = a6 + 1;
    if ((v56 - 67) < 0xFFFFFFF9)
    {
      v59 = (v55 & 0x7E) - 58;
      if (v59 >= 0xFFFFFFFC)
      {
        v60 = v57;
        sub_22E995A44((_QWORD *)a1, v18, v57);
        v57 = v60;
        v55 = *(_DWORD *)(v60 + 28);
        v59 = (v55 & 0x7E) - 58;
      }
      if (v59 >= 0xFFFFFFFC)
      {
        v62 = v45;
        v86 = v57;
        v87 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v57 + 32))(v57);
        v57 = v86;
        if ((*(_QWORD *)(v87 + 80) & 0xE000) == 0x4000
          || (*(_QWORD *)(v86 + 40) & 7) == 6
          && (*(_DWORD *)(*(_QWORD *)(v86 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4)
        {
          v88 = (uint64_t *)(v86 + 48);
          v89 = *(_QWORD *)(a1 + 88);
          v90 = 1;
        }
        else
        {
          v90 = 0;
          v89 = *(_QWORD *)(a1 + 88);
          v88 = (uint64_t *)(v89 + 16848);
        }
        v94 = *v88;
        v64 = v130;
        v65 = v129;
        if (*v125)
        {
          v106 = sub_22F0ABC50(v125, v89);
          v57 = v86;
          v66 = v106;
          v67 = v107;
        }
        else
        {
          v66 = 0;
          v67 = 0;
        }
        v123 = v90;
        v122 = v94;
        return (uint64_t)sub_22EC25D24(a1, (uint64_t)v18, v48, v64, v66, v67, v65, v57, v62, 0, v21, v122, v123, SWORD1(v123), SBYTE4(v123), SHIWORD(v123), 0);
      }
      v61 = v55 & 0x7F;
      if (v61 != 31)
      {
        if (v61 == 67)
        {
          v62 = v45;
          v63 = *(_QWORD *)(v57 + 48);
          v64 = v130;
          v65 = v129;
          if (*v125)
          {
            v114 = v57;
            v115 = sub_22F0ABC50(v125, *(_QWORD *)(a1 + 88));
            v57 = v114;
            v66 = v115;
            v67 = v116;
          }
          else
          {
            v66 = 0;
            v67 = 0;
          }
          v123 = 0;
LABEL_136:
          v122 = v63;
          return (uint64_t)sub_22EC25D24(a1, (uint64_t)v18, v48, v64, v66, v67, v65, v57, v62, 0, v21, v122, v123, SWORD1(v123), SBYTE4(v123), SHIWORD(v123), 0);
        }
        v104 = v57;
        if ((v61 - 33) > 9)
          v105 = 4995;
        else
          v105 = 4994;
        sub_22E8FCA40((_QWORD *)a1, v142, v105, 0, (uint64_t)&v146);
        v112 = sub_22E894538((uint64_t)&v146, &v143);
        v113 = sub_22E8901B8(v112, (uint64_t *)&v144);
        LODWORD(v134) = v127;
        sub_22E8900C4(v113, (int *)&v134);
        sub_22E903BEC((unsigned int *)&v146);
        sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v104 + 24), 0x1651u, 0, (uint64_t)&v146);
        sub_22E894538((uint64_t)&v146, &v143);
        sub_22E903BEC((unsigned int *)&v146);
        *(_BYTE *)(a9 + 163) = 0;
        return 1;
      }
      if (a10)
      {
        v95 = sub_22ED6569C((_QWORD *)a1, v57, v129, *(_DWORD *)(a9 + 128), a10);
        if (!v96)
        {
          v97 = v95;
          if (!v95)
            return sub_22EC22410((_QWORD *)a1, (uint64_t)v18, *((_QWORD *)v18 + 1), v127, v130, (uint64_t)a6, v129, a8, v21, a10);
          v98 = v45;
          if (!sub_22EFBC2B0(v95))
            sub_22EFBEC04(v97, 1, v142);
          v99 = *(_QWORD *)(v97 + 48);
          v100 = *(_QWORD *)(v99 & 0xFFFFFFFFFFFFFFF0);
          if (!v100 || (v101 = *(_DWORD *)(v100 + 16), (v101 & 0xFE) != 0x28))
          {
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v100 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
              || (v100 = sub_22F10CF48(v100)) == 0)
            {
LABEL_148:
              if (*v125)
              {
                v102 = sub_22F0ABC50(v125, *(_QWORD *)(a1 + 88));
                v103 = v119;
              }
              else
              {
                v102 = 0;
                v103 = 0;
              }
              return (uint64_t)sub_22EC25D24(a1, (uint64_t)v18, v127, v130, v102, v103, v129, v97, v98, 0, v21, v99, 1, 0, 0, 0, 0);
            }
            v101 = *(_DWORD *)(v100 + 16);
          }
          if ((v101 & 0x100000) != 0)
          {
            do
            {
              v100 = *(_QWORD *)(*(_QWORD *)(v100 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (v100)
              {
                v121 = *(_DWORD *)(v100 + 16);
                if ((v121 & 0xFE) == 0x28)
                  continue;
              }
              v100 = sub_22F10CF48(v100);
              v121 = *(_DWORD *)(v100 + 16);
            }
            while ((v121 & 0x100000) != 0);
          }
          v99 = *(_QWORD *)(v100 + 32);
          goto LABEL_148;
        }
      }
      else
      {
        sub_22F345DF8((_QWORD *)a1, v57 & 0xFFFFFFFFFFFFFFF9, v142);
      }
      return 1;
    }
    v62 = v45;
    v63 = *(_QWORD *)(v57 + 48);
    v84 = *(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0);
    if (v84 && (v85 = *(_DWORD *)(v84 + 16), (v85 & 0xFE) == 0x28))
    {
      v118 = v57;
      if ((v85 & 0x100000) != 0)
      {
        do
        {
LABEL_171:
          v84 = *(_QWORD *)(*(_QWORD *)(v84 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v84)
          {
            v120 = *(_DWORD *)(v84 + 16);
            if ((v120 & 0xFE) == 0x28)
              continue;
          }
          v84 = sub_22F10CF48(v84);
          v120 = *(_DWORD *)(v84 + 16);
        }
        while ((v120 & 0x100000) != 0);
      }
    }
    else
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v84 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
        || (v118 = v57, v84 = sub_22F10CF48(v84), v57 = v118, !v84))
      {
LABEL_128:
        v64 = v50;
        v65 = v129;
        if (*v58)
        {
          v91 = v57;
          v92 = sub_22F0ABC50(v58, *(_QWORD *)(a1 + 88));
          v57 = v91;
          v66 = v92;
          v67 = v93;
        }
        else
        {
          v66 = 0;
          v67 = 0;
        }
        v123 = 1;
        goto LABEL_136;
      }
      if ((*(_DWORD *)(v84 + 16) & 0x100000) != 0)
        goto LABEL_171;
    }
    v63 = *(_QWORD *)(v84 + 32);
    v48 = v127;
    v50 = v130;
    v58 = a6 + 1;
    v57 = v118;
    goto LABEL_128;
  }
  v53 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 56, 3);
  v108 = *(_QWORD *)(a1 + 88);
  v109 = *(_QWORD *)(v108 + 16872);
  if (*v125)
  {
    v110 = sub_22F0ABC50(v125, v108);
    v111 = v117;
  }
  else
  {
    v110 = 0;
    v111 = 0;
  }
  sub_22F2F44CC(v53, (uint64_t)v18, v54, v127, v109, 1, v110, v111, *(_DWORD *)(a9 + 128));
  return v53;
}

unint64_t sub_22EC257BC(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v16;
  _BOOL4 v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *i;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  void *v30[2];

  v10 = *(uint64_t **)(a4 + 56);
  v11 = *v10;
  v12 = (*(_DWORD *)(*v10 + 28) & 0x7F) - 67;
  v29 = 0u;
  *(_OWORD *)v30 = 0u;
  if (v11)
    v13 = v12 >= 0xFFFFFFF9;
  else
    v13 = 0;
  if (!v13)
  {
    v16 = *(unsigned int *)(a4 + 64);
    v17 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16) == 39;
    v26 = *(_QWORD *)(v11 + 40);
    v27 = a3;
    sub_22EFC6D6C((uint64_t)&v28, v26);
    v18 = sub_22EC25974(a1, a6, v17, 0, a2, v11, a5, (uint64_t)&v26) & 0xFFFFFFFFFFFFFFFELL;
    if (v18)
    {
      v19 = &v10[v16];
      goto LABEL_9;
    }
LABEL_15:
    v18 = 1;
    goto LABEL_16;
  }
  v26 = 0;
  v27 = a3;
  v20 = sub_22EB24A3C(a1, &v29, &v26, v11, 0, 0, 0);
  if ((v20 & 1) != 0)
    goto LABEL_15;
  v18 = v20 & 0xFFFFFFFFFFFFFFFELL;
  v10 = *(uint64_t **)(a4 + 56);
  v19 = &v10[*(unsigned int *)(a4 + 64)];
LABEL_9:
  for (i = v10 + 1;
        i != v19;
        v18 = sub_22EC25974(a1, v18, 0, 0, (uint64_t)v24, v22, ((unint64_t)*(unsigned int *)(v22 + 28) >> 13) & 3 | v22, (uint64_t)&v26) & 0xFFFFFFFFFFFFFFFELL)
  {
    v23 = *i++;
    v22 = v23;
    v26 = *(_QWORD *)(v23 + 40);
    v27 = a3;
    sub_22EFC6D6C((uint64_t)&v28, v26);
    if (i == v19)
      v24 = (__int128 *)a2;
    else
      v24 = &v29;
  }
LABEL_16:
  if (HIDWORD(v30[1]))
    free(v30[0]);
  return v18;
}

unint64_t sub_22EC25974(_QWORD *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;

  if ((a3 & 1) != 0)
  {
    v16 = 1;
  }
  else if ((*(_DWORD *)a2 & 0x1C00) != 0 || (v16 = (*(_DWORD *)a2 >> 8) & 3) == 0)
  {
    v52 = 0;
    goto LABEL_6;
  }
  LODWORD(v52) = v16;
  HIDWORD(v52) = *(_DWORD *)(a6 + 68) & 1;
LABEL_6:
  v17 = *(_QWORD *)(a6 + 48);
  v18 = *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 + 16);
    if ((v19 & 0xFE) == 0x28)
    {
      if ((v19 & 0x100000) != 0)
      {
        do
        {
LABEL_9:
          while (1)
          {
            v18 = *(_QWORD *)(*(_QWORD *)(v18 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v18)
              break;
            v20 = *(_DWORD *)(v18 + 16);
            if ((v20 & 0xFE) != 0x28)
              break;
            if ((v20 & 0x100000) == 0)
              goto LABEL_18;
          }
          v18 = sub_22F10CF48(v18);
        }
        while ((*(_DWORD *)(v18 + 16) & 0x100000) != 0);
      }
      goto LABEL_18;
    }
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v18 = sub_22F10CF48(v18);
    if (v18)
    {
      if ((*(_DWORD *)(v18 + 16) & 0x100000) != 0)
        goto LABEL_9;
LABEL_18:
      v17 = *(_QWORD *)(v18 + 32);
      v21 = 1;
      goto LABEL_45;
    }
  }
  v22 = *(_QWORD *)(a2 + 8);
  if (a3)
  {
    v23 = *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0);
    if (!v23 || *(_BYTE *)(v23 + 16) != 39)
      v23 = sub_22F10CF48(v23);
    v22 = *(_QWORD *)(v23 + 32);
  }
  v51 = a4;
  v24 = (uint64_t *)(v22 & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v25 & 8) != 0)
  {
    v27 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v26 = 0;
    v27 = 0;
  }
  v50 = a7;
  v28 = v27 | (v25 | v22) & 7;
  v29 = 4294967246;
  if ((*(_BYTE *)(a6 + 68) & 2) == 0)
    v29 = 4294967247;
  v30 = v29 & v28;
  v31 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF0) + 8);
  v32 = v31 | v17;
  v33 = a8;
  if ((v31 & 8) != 0)
  {
    v35 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v34 = v35 & 0xFFFFFFFF00000000;
    v35 = v35;
  }
  else
  {
    v34 = 0;
    v35 = 0;
  }
  v36 = v35 | v32 & 7;
  v53 = v30 | v26;
  sub_22E49FA0C(&v53, v36 | v34);
  if ((_DWORD)v53 == (_DWORD)v36 && HIDWORD(v53) == HIDWORD(v34))
  {
    a8 = v33;
  }
  else
  {
    a8 = v33;
    if ((v53 & 0xCFFFFFFF8) != 0)
    {
      v38 = a1[11];
      v39 = sub_22E491354((unsigned int *)&v53, v17);
      v17 = sub_22EF5DBC4(v38, v39, v53);
    }
    else
    {
      v17 |= v53 & 7;
    }
  }
  a7 = v50;
  v21 = v52;
  if (sub_22F10E1FC(*v24, 12))
    v17 = sub_22F369798(a1[11], 12, v17, v17);
  a4 = v51;
LABEL_45:
  v40 = a1[27];
  if (!v40 || (*(_WORD *)(v40 + 8) & 0x7Eu) - 58 < 0xFFFFFFFC || (*(_BYTE *)(v40 + 11) & 2) == 0)
  {
    v53 = a6;
    sub_22EAE2514((uint64_t)(a1 + 284), &v53);
  }
  v42 = *(_QWORD *)(a5 + 8);
  v41 = (uint64_t *)(a5 + 8);
  v43 = (unint64_t)sub_22EB24398((uint64_t)a1, a2, v42, a7 & 0xFFFFFFFFFFFFFFFCLL, a6);
  if ((v43 & 1) != 0)
    return 1;
  if (*(_DWORD *)(a1[9] + 72))
  {
    if (a3)
    {
      if ((sub_22EFC7ADC(a1[27]) & 1) == 0 && *sub_22EFFA6B0((unsigned __int8 *)(v43 & 0xFFFFFFFFFFFFFFFELL)) == 133)
      {
        v44 = sub_22EC7ECC4((uint64_t)a1, a6, 0, 0);
        if (v44)
          return sub_22F33F5F4((uint64_t)a1, v44, v21, SHIDWORD(v52), *(_DWORD *)(a8 + 8));
      }
    }
  }
  v45 = v43 & 0xFFFFFFFFFFFFFFFELL;
  if (*v41)
  {
    v46 = sub_22F0ABC50(v41, a1[11]);
    v47 = v49;
  }
  else
  {
    v46 = 0;
    v47 = 0;
  }
  return (unint64_t)sub_22EC25D24((uint64_t)a1, v45, a3, a4, v46, v47, 0, a6, a7, 0, (__int128 *)a8, v17, v21, SHIWORD(v21), SBYTE4(v52), SHIWORD(v52), 0);
}

_DWORD *sub_22EC25D24(uint64_t a1, uint64_t a2, int a3, int a4, unint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, char a10, __int128 *a11, uint64_t a12, char a13, __int16 a14, char a15, __int16 a16, uint64_t a17)
{
  uint64_t v21;
  char v22;
  _DWORD *v23;
  _DWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __int128 v39;
  uint64_t v40;

  v21 = *(_QWORD *)(a1 + 88);
  v39 = *a11;
  v40 = *((_QWORD *)a11 + 2);
  v22 = sub_22EB22004(a1, a8);
  v23 = (_DWORD *)sub_22EFFAF50(v21, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)&v39, a17, a12, a13, a14, a15, a16, v22);
  v24 = v23;
  if (a10)
    v25 = 0x200000;
  else
    v25 = 0;
  *v23 = *v23 & 0xFFDFFFFF | v25;
  sub_22EB52238(a1, (uint64_t)v23);
  v26 = *(_QWORD *)(a12 & 0xFFFFFFFFFFFFFFF0);
  if (!v26 || *(_BYTE *)(v26 + 16) != 26)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v26 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      return v24;
    v28 = sub_22F10CF48(*(_QWORD *)(a12 & 0xFFFFFFFFFFFFFFF0));
    if (!v28)
      return v24;
    v26 = v28;
  }
  if (((*(_QWORD *)(v26 + 16) >> 54) & 0xF) - 9 <= 1)
  {
    v29 = sub_22EB14850(a1, *((unsigned int *)a11 + 2));
    if (v29)
    {
      v30 = *(_QWORD *)((a12 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v30 & 8) != 0)
      {
        v32 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      }
      else
      {
        v31 = 0;
        v32 = 0;
      }
      v33 = v32 | (v30 | a12) & 7;
      if (((v33 | v31) & 0xCFFFFFFF8) != 0)
        v34 = sub_22EF5DBC4(*(_QWORD *)(a1 + 88), v29, v33 | v31);
      else
        v34 = v29 & 0xFFFFFFFFFFFFFFF0 | v33 & 7;
      *((_QWORD *)v24 + 1) = v34;
    }
  }
  return v24;
}

uint64_t sub_22EC25EFC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, unsigned int a7, _DWORD *a8, uint64_t a9)
{
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int v31;
  _QWORD v32[12];
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  unsigned int v37[24];
  void *v38[2];
  _QWORD v39[35];

  v39[33] = *MEMORY[0x24BDAC8D0];
  if ((**(_BYTE **)(a1 + 72) & 0x20) != 0 && *a8 == 4)
  {
    sub_22E8FCA40((_QWORD *)a1, a8[6], 0x14B4u, 0, (uint64_t)v37);
    sub_22E903BEC(v37);
  }
  v38[0] = v39;
  v38[1] = (void *)0x800000000;
  v39[32] = 0;
  v34 = 0;
  *(_QWORD *)&v35 = 0;
  DWORD2(v35) = 0;
  v36 = 0;
  sub_22EB223B4(a1, (uint64_t)a8, (uint64_t)v38, (uint64_t)&v35, &v34);
  v33 = v35;
  if (a5 == 36 && (*(_WORD *)(*(_QWORD *)(a1 + 72) + 96) & 0x40) != 0)
  {
    sub_22E8FCA40((_QWORD *)a1, a4, 0xDD3u, 0, (uint64_t)v32);
    v31 = 2;
    sub_22E8900C4((uint64_t)v32, &v31);
    sub_22E903BEC((unsigned int *)v32);
LABEL_15:
    v21 = 1;
    goto LABEL_16;
  }
  v17 = *(_QWORD *)(a6 + 8);
  if (v17)
    v30 = sub_22E958B98((_QWORD *)a1, a2, v17);
  else
    v30 = 0;
  v18 = sub_22EB29350(a1, a2, a3);
  if ((v18 & 1) != 0)
    goto LABEL_15;
  v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
  v20 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFFELL) + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
  {
LABEL_14:
    v21 = sub_22EC22410((_QWORD *)a1, v19, v20, a5 == 36, a4, a6, a7, v30, &v35, v34);
    goto LABEL_16;
  }
  if (sub_22EFC67A8(&v33))
  {
    v20 = *(_QWORD *)(v19 + 8);
    goto LABEL_14;
  }
  v23 = *(_QWORD *)(a6 + 8);
  if (v23)
  {
    v29 = sub_22F0AAC5C(v23);
    v20 = *(_QWORD *)(v19 + 8);
    if ((v29 & 4) != 0)
      goto LABEL_14;
  }
  else
  {
    v20 = *(_QWORD *)(v19 + 8);
  }
  v32[0] = a2;
  v32[1] = a8;
  v32[2] = a9;
  v24 = sub_22EC225CC((_QWORD *)a1, v19, v20, a4, a5 == 36, a6, a7, v30, (uint64_t)&v35, v34, a2, (uint64_t)v32);
  v21 = v24;
  if ((v24 & 1) == 0)
  {
    v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
    if (*(unsigned __int8 *)(v24 & 0xFFFFFFFFFFFFFFFELL) == 188)
    {
      v26 = *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 576);
      if (v26 > 3 || v26 == 2)
      {
        v27 = *(_DWORD *)v25;
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) & 0xFEu)
           - 2 > 3)
        {
          if ((v27 & 0x40000) != 0)
          {
            v28 = *(_QWORD *)(sub_22F40989C(*(_QWORD *)(*(_QWORD *)(v25 + 16) + 8), *(_QWORD *)(a1 + 88)) & 0xFFFFFFFFFFFFFFF0);
            if (v28)
            {
              if (*(_BYTE *)(v28 + 16) == 39
                && sub_22F10E1FC(*(_QWORD *)(*(_QWORD *)(v28 + 32) & 0xFFFFFFFFFFFFFFF0), 12))
              {
                sub_22E3BA850(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 248, (const void *)(v21 & 0xFFFFFFFFFFFFFFFELL));
              }
            }
          }
        }
        else if ((v27 & 0x40000) == 0)
        {
          sub_22EB2BD90(a1, *(unsigned __int8 **)(v25 + 16));
        }
      }
    }
  }
LABEL_16:
  if (v38[0] != v39)
    free(v38[0]);
  return v21;
}

uint64_t sub_22EC2624C(uint64_t a1, _QWORD *a2, int a3)
{
  if (a3
    && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2[1] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 25 >= 2)
  {
    return sub_22EB1B954(a1, a2);
  }
  else
  {
    return sub_22EB19A28(a1);
  }
}

BOOL sub_22EC2628C(llvm::SmallPtrSetImplBase **a1, uint64_t a2)
{
  llvm::SmallPtrSetImplBase *v2;
  void *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v4 = sub_22E3BA914(v2, v3);
  v5 = *((_QWORD *)v2 + 1);
  v6 = 16;
  if (v5 == *(_QWORD *)v2)
    v6 = 20;
  return v4 == (void **)(v5 + 8 * *(unsigned int *)((char *)v2 + v6));
}

void sub_22EC262EC()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22EC26300(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v3 = sub_22F2E6D78(a2);
  if (!v3)
    return 0;
  v4 = v3;
  if ((*(_DWORD *)(v3 + 28) & 0x7F) != 0x1D && (*(_DWORD *)(v3 + 28) & 0x7Fu) - 48 > 0x1A)
    return 0;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(v4 + 16);
  v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 4) != 0)
    v8 = *(_QWORD *)(v8 + 8);
  if (v8 == v6 + 64 && (*(_QWORD *)(v4 + 8) > 7uLL || *(_QWORD *)(v6 + 88) == v4))
    return 1;
  v9 = 0;
  if (v6 && (*(_DWORD *)(v6 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
  {
    v10 = sub_22E46A3A0(v6);
    if (v10 != v11)
    {
      v12 = v10;
      v13 = v11;
      while (1)
      {
        v14 = *(_QWORD *)(**(_QWORD **)(v12 + 16) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v14 + 8) & 0xF) != 0)
          v14 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v12 + 16));
        v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v15 && *(_BYTE *)(v15 + 16) == 45)
        {
          v16 = sub_22F114198(*(_QWORD *)(v15 + 24));
          v17 = *(_QWORD *)(v4 + 16);
          v18 = v17 & 0xFFFFFFFFFFFFFFF8;
          if ((v17 & 4) != 0)
            v18 = *(_QWORD *)(v18 + 8);
          if (v18 == v16 + 64 && (*(_QWORD *)(v4 + 8) > 7uLL || *(_QWORD *)(v16 + 88) == v4))
            break;
        }
        v12 += 24;
        if (v12 == v13)
          return 0;
      }
      return 1;
    }
    return 0;
  }
  return v9;
}

__n128 sub_22EC26454@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;
  uint64_t v6;

  v4 = operator new();
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *(_QWORD *)v4 = &off_24FAB8628;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v4 + 32) = v6;
  *a2 = v4;
  return result;
}

uint64_t sub_22EC264AC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24FAB8660;
  if (*(_DWORD *)(a1 + 60))
    free(*(void **)(a1 + 48));
  return a1;
}

void sub_22EC264E8(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24FAB8660;
  if (*(_DWORD *)(a1 + 60))
    free(*(void **)(a1 + 48));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EC26534(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_24FAB8660;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)v2 + 4) = v3;
  sub_22F0AB560((_QWORD *)v2 + 5, a1 + 40);
  *((_QWORD *)v2 + 8) = *(_QWORD *)(a1 + 64);
  *((_DWORD *)v2 + 18) = *(_DWORD *)(a1 + 72);
  return v2;
}

_QWORD *sub_22EC26598(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _QWORD *result;
  uint64_t v6;

  *(_QWORD *)a2 = &off_24FAB8660;
  v4 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  result = sub_22F0AB560((_QWORD *)(a2 + 40), a1 + 40);
  v6 = *(_QWORD *)(a1 + 64);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 64) = v6;
  return result;
}

void sub_22EC265F8(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 60))
    free(*(void **)(a1 + 48));
}

void sub_22EC2660C(void **__p)
{
  if (*((_DWORD *)__p + 15))
    free(__p[6]);
  operator delete(__p);
}

void sub_22EC2663C(uint64_t a1, uint64_t a2)
{
  char v4;
  size_t v5;
  int v6;
  void *v7;
  void **v8;
  uint64_t v9;
  void **p_s1;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  char *v24;
  char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *__s1;
  size_t __n;
  int v32;
  char v33;
  void *v34[2];
  char v35;

  if (!*(_QWORD *)a2)
  {
    sub_22E8FCA40(*(_QWORD **)(a1 + 8), *(_DWORD *)(a1 + 64), 0xFAAu, 0, (uint64_t)&__s1);
    v18 = sub_22E894538((uint64_t)&__s1, (uint64_t *)(a1 + 16));
    v19 = sub_22E894FB4(v18, (uint64_t *)(a1 + 24));
    sub_22E8906A0(v19, (uint64_t *)(a1 + 68));
    sub_22E903BEC((unsigned int *)&__s1);
    return;
  }
  if (*(_BYTE *)(a2 + 60))
  {
    sub_22EFC683C((uint64_t *)(a1 + 16), &__s1);
    sub_22EC6887C((uint64_t *)a2, *(unsigned int **)(*(_QWORD *)(a1 + 8) + 72), (uint64_t)v34);
    v4 = v33;
    if (v33 >= 0)
      v5 = v33 & 0x7F;
    else
      v5 = __n;
    v6 = v35;
    v7 = (void *)(v35 & 0x7F);
    if (v35 < 0)
      v7 = v34[1];
    if ((void *)v5 == v7)
    {
      if (v35 >= 0)
        v8 = v34;
      else
        v8 = (void **)v34[0];
      if (v33 < 0)
      {
        v17 = memcmp(__s1, v8, __n) == 0;
        goto LABEL_26;
      }
      if ((v33 & 0x7F) != 0)
      {
        v9 = (v33 & 0x7F) - 1;
        p_s1 = &__s1;
        do
        {
          v12 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          v11 = v12;
          v14 = *(unsigned __int8 *)v8;
          v8 = (void **)((char *)v8 + 1);
          v13 = v14;
          v16 = v9-- != 0;
          v17 = v11 == v13;
        }
        while (v11 == v13 && v16);
LABEL_26:
        if ((v6 & 0x80000000) == 0)
          goto LABEL_28;
        goto LABEL_27;
      }
      v17 = 1;
      if ((v35 & 0x80000000) == 0)
      {
LABEL_28:
        v20 = v17;
        if (v4 < 0)
          operator delete(__s1);
        goto LABEL_30;
      }
    }
    else
    {
      v17 = 0;
      if ((v35 & 0x80000000) == 0)
        goto LABEL_28;
    }
LABEL_27:
    operator delete(v34[0]);
    v4 = v33;
    goto LABEL_28;
  }
  v20 = 0;
LABEL_30:
  v21 = *(_QWORD *)(a1 + 8);
  v22 = *(_QWORD *)(a1 + 16);
  __n = *(_QWORD *)(v21 + 88) + 2128;
  v32 = 4012;
  __s1 = (void *)sub_22E3B8AAC(__n);
  v23 = __s1;
  v24 = (char *)__s1 + 336;
  v26 = *(unsigned __int8 *)__s1;
  v25 = (char *)__s1 + 1;
  v25[*(unsigned __int8 *)__s1] = 10;
  *v23 = v26 + 3;
  v23 += 16;
  *(_QWORD *)&v23[8 * v26] = v22;
  v27 = *(_QWORD *)(a1 + 24);
  v28 = (v26 + 1);
  v25[v28] = 13;
  *(_QWORD *)&v23[8 * v28] = v27;
  v29 = (v26 + 2);
  v25[v29] = 2;
  *(_QWORD *)&v23[8 * v29] = v20;
  sub_22E4D6448((uint64_t)v24, *(_QWORD *)(a1 + 32), 1);
  sub_22EC6BEF8(v21, a2, (uint64_t)&__s1, 1);
  if (__s1)
  {
    if (__n)
      sub_22E3BB10C(__n, (unint64_t)__s1);
  }
}

uint64_t sub_22EC26854(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24FAB86A8;
  if (*(_DWORD *)(a1 + 92))
    free(*(void **)(a1 + 80));
  return a1;
}

void sub_22EC26890(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24FAB86A8;
  if (*(_DWORD *)(a1 + 92))
    free(*(void **)(a1 + 80));
  JUMPOUT(0x2348A0E9CLL);
}

char *sub_22EC268DC(uint64_t a1)
{
  char *v2;
  __int128 v3;

  v2 = (char *)operator new(0x60uLL);
  *(_QWORD *)v2 = &off_24FAB86A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(v2 + 53) = *(_QWORD *)(a1 + 53);
  *((_QWORD *)v2 + 8) = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 24) = v3;
  sub_22F0AB560((_QWORD *)v2 + 9, a1 + 72);
  return v2;
}

_QWORD *sub_22EC26948(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24FAB86A8;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 53) = *(_QWORD *)(a1 + 53);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  return sub_22F0AB560((_QWORD *)(a2 + 72), a1 + 72);
}

void sub_22EC2698C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 92))
    free(*(void **)(a1 + 80));
}

void sub_22EC269A0(void **__p)
{
  if (*((_DWORD *)__p + 23))
    free(__p[10]);
  operator delete(__p);
}

uint64_t sub_22EC269D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  sub_22F333E34((uint64_t)&v15, a4);
  sub_22EA406B0((uint64_t)&v20, *(_QWORD *)(a1 + 8), (__int128 *)(a1 + 16), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44));
  LODWORD(v20) = 0;
  v22 = 0;
  if (v25)
  {
    v6 = sub_22EC6CBD0(v25);
    MEMORY[0x2348A0E9C](v6, 0x10E0C409F09D3C3);
  }
  v30 = 0;
  v29 = 0;
  v25 = 0;
  v26 = 0;
  v28 = v15;
  if (v17 && !*(_QWORD *)v16)
    v7 = (char *)v16 + 8 * v17;
  else
    v7 = (char *)v16;
  v8 = (char *)v16 + 8 * v17;
  if (v7 != v8)
  {
    v9 = v22;
    do
    {
      v10 = *(_QWORD *)v7;
      v11 = *(unsigned int *)(*(_QWORD *)v7 + 28);
      if (v9 >= v23)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v9 = v22;
      }
      *((_QWORD *)v21 + v9) = (v11 >> 13) & 3 | v10;
      v9 = ++v22;
      LODWORD(v20) = 2;
      v7 += 8;
    }
    while (v7 != v8);
  }
  sub_22EC561E4((uint64_t)&v20);
  v12 = sub_22EC24AB8(a2, *(_QWORD *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), *(unsigned int *)(a1 + 56), *(unsigned __int8 *)(a1 + 60), (uint64_t *)(a1 + 64), 0, 0, (uint64_t)&v20, 0, 0, 0, 0);
  if (v29)
  {
    if ((_DWORD)v20 == 5)
    {
      sub_22EC64D18(v27, (uint64_t)&v20);
    }
    else if (v26 && (*(_DWORD *)(v27[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v27, (uint64_t)&v20);
    }
  }
  if (v25)
  {
    v14 = sub_22EC6CBD0(v25);
    MEMORY[0x2348A0E9C](v14, 0x10E0C409F09D3C3);
  }
  if (v21 != &v24)
    free(v21);
  v20 = (void **)&v19;
  sub_22E8D19C8(&v20);
  if (v16 != &v18)
    free(v16);
  return v12;
}

uint64_t sub_22EC26C40(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v4 || *(_BYTE *)(v4 + 16) != 32)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
      return 0;
    v4 = sub_22F10CF48(v4);
    if (!v4)
      return 0;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = *(unsigned __int8 *)(v5 + 16) - 35 > 0xFFFFFFFD;
  else
    v6 = 0;
  if (!v6)
    v5 = sub_22F10CF48(v5);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_DWORD *)(v7 + 16) & 0xFF800FF;
  if (v7)
    v9 = v8 == 114819083;
  else
    v9 = 0;
  if (v9)
  {
    v12 = sub_22E583A80(*(_QWORD *)(a1 + 88));
  }
  else
  {
    if (v7)
      v10 = v8 == 115343371;
    else
      v10 = 0;
    if (!v10)
      return 0;
    v12 = sub_22E583AD4(*(_QWORD *)(a1 + 88));
  }
  v13 = v12;
  v14 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
  if (!v14 || *(_BYTE *)(v14 + 16) != 32)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
      goto LABEL_25;
    v14 = sub_22F10CF48(v14);
    if (!v14)
      goto LABEL_25;
  }
  v16 = *(_QWORD *)(*(_QWORD *)(v14 + 32) & 0xFFFFFFFFFFFFFFF0);
  if (!v16 || *(unsigned __int8 *)(v16 + 16) - 35 <= 0xFFFFFFFD)
    v16 = sub_22F10CF48(v16);
  if (sub_22F272660(v16))
  {
LABEL_25:
    v11 = 1;
    *a2 = sub_22E90092C(a1, *a2 & 0xFFFFFFFFFFFFFFFELL, v13, 1, 0, 0);
    return v11;
  }
  return 0;
}

unint64_t sub_22EC26DD4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t result;
  uint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;

  v6 = sub_22F3174CC(a1);
  if ((unint64_t *)v6 == v7)
  {
LABEL_7:
    v12 = sub_22F3174CC(a1);
    if ((unint64_t *)v12 == v13)
    {
      return 0;
    }
    else
    {
      v14 = (unint64_t *)v12;
      v15 = v13;
      do
      {
        result = sub_22EC26F34(*v14, a2, a3);
        if (result)
          break;
        ++v14;
      }
      while (v14 != v15);
    }
  }
  else
  {
    v8 = (unint64_t *)v6;
    v9 = v7;
    while (1)
    {
      v10 = *v8;
      if (a2)
      {
        result = sub_22EFDA7BC(*v8, a2, 1);
        if (result)
          break;
      }
      result = sub_22EFDA1A0(v10, *a3, 1, 0);
      if (result)
        break;
      if (++v8 == v9)
        goto LABEL_7;
    }
  }
  return result;
}

uint64_t sub_22EC26E9C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  if (result && *(_BYTE *)(result + 16) == 39)
    return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0)
                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                              + 16) == 45;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
  {
    result = sub_22F10CF48(result);
    if (!result)
      return result;
    return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0)
                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                              + 16) == 45;
  }
  return 0;
}

BOOL sub_22EC26F10(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45;
}

uint64_t sub_22EC26F34(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  if (!a2 || (result = sub_22EFDA7BC(a1, a2, 1)) == 0)
  {
    result = sub_22EFDA1A0(a1, *a3, 1, 0);
    if (!result)
    {
      v7 = sub_22F259248(a1);
      if ((_QWORD *)v7 == v8)
      {
        return 0;
      }
      else
      {
        v9 = (_QWORD *)v7;
        v10 = v8;
        do
        {
          result = sub_22EC26F34(*v9, a2, a3);
          if (result)
            break;
          ++v9;
        }
        while (v9 != v10);
      }
    }
  }
  return result;
}

uint64_t sub_22EC26FD4(unsigned __int16 *a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  int v5;
  int v6;
  unsigned int v7;

  if (a2 == 3)
  {
    if (*a1 != 25711 || *((_BYTE *)a1 + 2) != 100)
      goto LABEL_4;
    return 1;
  }
  if (a2 == 2)
  {
    if (*a1 != 26984)
    {
      v5 = *a1;
      v6 = 28524;
      goto LABEL_14;
    }
    return 1;
  }
  if (a2 != 4)
    goto LABEL_4;
  v5 = *(_DWORD *)a1;
  v6 = 1852143205;
LABEL_14:
  if (v5 == v6)
    return 1;
LABEL_4:
  v2 = *(char *)a1;
  if ((v2 - 119) < 4)
    return 2;
  result = 0;
  v7 = v2 - 83;
  if (v7 <= 0x20)
  {
    if (((1 << v7) & 0x8010C000) != 0)
    {
      return 3;
    }
    else if (((1 << v7) & 0x100000001) != 0)
    {
      return 4;
    }
  }
  return result;
}

uint64_t sub_22EC270A4(int a1, int a2)
{
  uint64_t v2;
  unsigned int v4;
  unsigned int v5;

  if (a1 == 2)
  {
    v2 = a2 - 119;
    if (v2 < 4)
      return dword_22F483340[v2];
    return 0xFFFFFFFFLL;
  }
  if (a1 != 3)
  {
    if (a1 == 4)
      return sub_22F3340B4(a2);
    return 0xFFFFFFFFLL;
  }
  if (a2 == 103)
    v4 = 1;
  else
    v4 = -1;
  if (a2 == 114)
    v4 = 0;
  if (a2 == 97)
    v5 = 3;
  else
    v5 = -1;
  if (a2 == 98)
    v5 = 2;
  if (a2 <= 102)
    return v5;
  else
    return v4;
}

unint64_t sub_22EC27128(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = (_QWORD *)(a1 + 2200);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 304))(v5, v4);
  v6 = *(unsigned int *)(a1 + 2208);
  v7 = *(_DWORD *)(a1 + 2240);
  if (!(v7 + (_DWORD)v6))
    return a2;
  v8 = -(int)v6;
  v9 = -(int)v6;
  while (1)
  {
    v10 = v9 < 0 ? *v4 + 8 * v6 : *(_QWORD *)(a1 + 2232);
    v11 = *(_QWORD *)(*(_QWORD *)(v10 + 8 * v8) + 80);
    if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + ((2 * (_BYTE)v11) & 8)) == a2)
      break;
    v9 = ++v8;
    if (v7 == v8)
      return a2;
  }
  if (v9 < 0)
    v13 = *v4 + 8 * v6;
  else
    v13 = *(_QWORD *)(a1 + 2232);
  return sub_22EF64680(*(_QWORD *)(a1 + 88), *(_QWORD *)(v13 + 8 * v8), 0);
}

uint64_t sub_22EC27204(_QWORD *a1, int *a2, unsigned int **a3, uint64_t a4)
{
  unsigned int *v6;
  unsigned int **v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  unsigned int v23;
  void *v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[32];
  void *v33;
  __int128 v34;
  _QWORD v35[18];

  v35[16] = *MEMORY[0x24BDAC8D0];
  v6 = *a3;
  if (a4 == 1)
    return sub_22EC274A0(a1, *a2, (uint64_t)v6);
  v33 = v35;
  v34 = xmmword_22F44E310;
  v30 = v32;
  v31 = 0x800000000;
  if (a4)
  {
    v7 = a3;
    v8 = 8 * a4;
    while (1)
    {
      v6 = *v7;
      v9 = **v7;
      if ((v9 & 0x1C0000) != 0)
        break;
      v10 = v6[1];
      v11 = v6[4] * ((v9 >> 21) & 7);
      v12 = v34;
      if (*((_QWORD *)&v34 + 1) < (unint64_t)v34 + v11)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v12 = v34;
      }
      v13 = v6 + 5;
      if ((_DWORD)v11)
      {
        memcpy((char *)v33 + v12, &v13[v10], v11);
        v12 = v34;
      }
      *(_QWORD *)&v34 = v12 + v11;
      sub_22F3340DC((uint64_t)&v30, (_BYTE *)v6 + 20, &v13[v6[1]]);
      ++v7;
      v8 -= 8;
      if (!v8)
        goto LABEL_12;
    }
    sub_22E8FCA40(a1, v6[5], 0xBDBu, 0, (uint64_t)&v28);
    sub_22F0D4E74((uint64_t)v6);
    v27 = v14;
    sub_22E8906A0((uint64_t)&v28, &v27);
    sub_22E903BEC((unsigned int *)&v28);
    v15 = 0;
  }
  else
  {
LABEL_12:
    v16 = sub_22EF5C728(a1[11], *((_QWORD *)v6 + 1));
    if (*(_BYTE *)(v16 + 16) == 2)
      v17 = v16;
    else
      v17 = 0;
    v18 = a1[11];
    v19 = *(_QWORD *)(v17 + 32);
    v29 = 32;
    v28 = (v34 + 1);
    v20 = sub_22EF5FE30(v18, v19, (const llvm::APInt *)&v28, 0, (*(_DWORD *)(v17 + 16) >> 22) & 7, (*(_DWORD *)(v17 + 16) >> 19) & 7);
    if (v29 >= 0x41 && v28)
      MEMORY[0x2348A0E84](v28, 0x1000C8000313F17);
    v21 = a1[11];
    v22 = v33;
    v23 = v34;
    v24 = v30;
    v25 = v31;
    v6 = (unsigned int *)sub_22E3CD3D4(v21 + 2032, v34 + 4 * v31 + 20, 3);
    sub_22EFF95DC((uint64_t)v6, v21, v22, v23, 0, 0, v20, v24, v25);
    v15 = 1;
  }
  if (v30 != v32)
    free(v30);
  if (v33 != v35)
    free(v33);
  if (v15)
    return sub_22EC274A0(a1, *a2, (uint64_t)v6);
  else
    return 1;
}

uint64_t sub_22EC274A0(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  char *v19;
  __int128 *v20;
  size_t v21;
  llvm::StringMapImpl *v22;
  const char *p_dst;
  const char *v24;
  size_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35[24];
  __int128 __dst;
  uint64_t v37;
  uint64_t v38;

  if ((sub_22E978904(a1, (unsigned __int8 *)a3) & 1) != 0)
    return 1;
  v8 = a1[11];
  v9 = *(_QWORD *)(v8 + 1384);
  if (v9 >= 0x10)
    goto LABEL_17;
  v10 = a1[9];
  if ((*(_QWORD *)(v10 + 140) & 0x20000000000) != 0)
  {
    if (*(char *)(v10 + 447) < 0)
    {
      sub_22E3BB2B4(&__dst, *(void **)(v10 + 424), *(_QWORD *)(v10 + 432));
      v8 = a1[11];
    }
    else
    {
      v20 = (__int128 *)(v10 + 424);
      __dst = *v20;
      v37 = *((_QWORD *)v20 + 2);
    }
    v21 = HIBYTE(v37) & 0x7F;
    if (v37 < 0)
      v21 = *((_QWORD *)&__dst + 1);
    v22 = *(llvm::StringMapImpl **)(v8 + 15192);
    p_dst = (const char *)&__dst;
    if (v37 < 0)
      p_dst = (const char *)__dst;
    if (v21)
      v24 = p_dst;
    else
      v24 = "NSConstantString";
    if (v21)
      v25 = v21;
    else
      v25 = 16;
    v38 = sub_22E3CB704(v22, v24, v25);
    v26 = sub_22EC65CE0(a1, a1[418], v38, a2, 0, 0);
    if (v26 && (*(_DWORD *)(v26 + 28) & 0x7F) == 0x16)
    {
      v27 = a1[11];
      *(_QWORD *)(v27 + 1384) = sub_22F36D148(v27, (uint64_t *)v26, 0);
      v28 = sub_22F36CC4C(a1[11], *(_QWORD *)(a1[11] + 1384));
    }
    else
    {
      sub_22E8FCA40(a1, *(_DWORD *)(a3 + 20), 0xFAFu, 0, (uint64_t)v35);
      v29 = sub_22E8BAE44((uint64_t)v35, &v38);
      sub_22F0D4E74(a3);
      v34 = v30;
      sub_22E8906A0(v29, &v34);
      sub_22E903BEC(v35);
      v31 = a1[11];
      v32 = sub_22F36E1B8(v31);
      v33 = *(_QWORD *)(v32 + 48);
      if (v33)
      {
        v18 = v33 & 0xFFFFFFFFFFFFFFF0;
        goto LABEL_39;
      }
      v28 = sub_22EF6462C(v31, v32);
    }
    v18 = v28;
LABEL_39:
    if (SHIBYTE(v37) < 0)
      operator delete((void *)__dst);
    goto LABEL_18;
  }
  v11 = sub_22F3E8F0C(a1[430], 1u);
  v12 = sub_22EC65CE0(a1, a1[418], v11, a2, 0, 0);
  if (v12 && (*(_DWORD *)(v12 + 28) & 0x7F) == 0x16)
  {
    v13 = a1[11];
    *(_QWORD *)(v13 + 1384) = sub_22F36D148(v13, (uint64_t *)v12, 0);
    v8 = a1[11];
    v9 = *(_QWORD *)(v8 + 1384);
  }
  else
  {
    v14 = a1[11];
    v9 = *(_QWORD *)(v14 + 1416);
    if (v9 <= 0xF)
    {
      v15 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v14 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v14 + 1960) + 80));
      if (v15)
        v16 = v15 + 40;
      else
        v16 = 0;
      v17 = sub_22F3B5B14(v14, v16, 0, v11, 0, 0, 0, 0);
      v9 = sub_22F36D148(a1[11], v17, 0);
      v14 = a1[11];
      *(_QWORD *)(v14 + 1416) = v9;
    }
    v8 = v14;
  }
LABEL_17:
  v18 = sub_22F36CC4C(v8, v9);
LABEL_18:
  v6 = sub_22E3CD3D4(a1[11] + 2032, 32, 3);
  *(_BYTE *)v6 = -52;
  if (byte_255E04EB3)
  {
    v19 = sub_22F0D3748(204);
    ++*((_DWORD *)v19 + 2);
  }
  *(_DWORD *)v6 = *(_DWORD *)v6 & 0xFFF800FF | 0x40000;
  *(_QWORD *)(v6 + 8) = v18;
  *(_QWORD *)(v6 + 16) = a3;
  *(_DWORD *)(v6 + 24) = a2;
  return v6;
}

uint64_t sub_22EC27798(uint64_t a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *((_QWORD *)a3 + 1);
  if (*a3 == 154)
  {
    switch((*(_DWORD *)a3 >> 18) & 7)
    {
      case 0:
      case 2:
        v6 = *(_QWORD *)(a1 + 88);
        v7 = 16408;
        goto LABEL_7;
      case 1:
        v6 = *(_QWORD *)(a1 + 88);
        v7 = 16424;
        goto LABEL_7;
      case 3:
        v6 = *(_QWORD *)(a1 + 88);
        v7 = 16448;
        goto LABEL_7;
      case 4:
        v6 = *(_QWORD *)(a1 + 88);
        v7 = 16456;
LABEL_7:
        v5 = *(_QWORD *)(v6 + v7);
        break;
      default:
        break;
    }
  }
  sub_22F0D4E74((uint64_t)a3);
  v9 = v8;
  v10 = 1;
  v11 = sub_22EC27918(a1, a2, v5, 1, v8);
  if (v11)
  {
    v12 = v11;
    sub_22E99E5D4(*(_QWORD *)(a1 + 88), **(_QWORD **)(v11 + 96), *(_QWORD *)(**(_QWORD **)(v11 + 96) + 48), (uint64_t)&v19);
    v13 = sub_22EC45014();
    if ((v13 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v15 = v9 & 0xFFFFFFFF00000000;
      v16 = v13 & 0xFFFFFFFFFFFFFFFELL;
      v17 = sub_22EC27B50(a1, (unsigned __int8 *)(v13 & 0xFFFFFFFFFFFFFFFELL));
      v18 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 40, 3);
      sub_22F334E28(v18, v16, *(_QWORD *)(a1 + 3464), v12, v17, v15 | a2);
      return sub_22EBCC6C0(a1, v18);
    }
  }
  return v10;
}

unint64_t sub_22EC27918(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unsigned int v25[24];
  uint64_t v26;
  uint64_t v27;

  v26 = a5;
  v27 = a3;
  v9 = sub_22F0AC150(*(uint64_t **)(a1 + 3440), a3);
  if ((v9 & 0xFF00000000) == 0)
  {
    if (a4)
    {
      sub_22E8FCA40((_QWORD *)a1, a2, 0xE58u, 0, (uint64_t)v25);
      v15 = sub_22E8901B8((uint64_t)v25, &v27);
      sub_22E8906A0(v15, &v26);
      sub_22E903BEC(v25);
    }
    return 0;
  }
  v10 = a1 + 8 * v9;
  v11 = *(_QWORD *)(v10 + 3480);
  if (!v11)
  {
    v12 = sub_22F3E95C8(*(_QWORD *)(a1 + 3440), v9, 0);
    v13 = *(_QWORD *)(a1 + 88);
    v14 = *(uint64_t **)(a1 + 3448);
    if (v14 || (v14 = sub_22EC288B4((_QWORD *)a1, a2, 2), (*(_QWORD *)(a1 + 3448) = v14) != 0))
    {
      if (*(_QWORD *)(a1 + 3464) <= 0xFuLL)
      {
        v17 = sub_22F36D148(v13, v14, 0);
        *(_QWORD *)(a1 + 3464) = sub_22F36CC4C(v13, v17);
        v14 = *(uint64_t **)(a1 + 3448);
      }
      v11 = sub_22EFDBA90((unint64_t)v14, v12, 0, 0, 1, 0);
      if (!v11)
      {
        if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 140) & 0x80000000000000) != 0)
        {
          v18 = *(_QWORD *)(a1 + 3448);
          if (v18)
            v19 = v18 + 48;
          else
            v19 = 0;
          v20 = sub_22F3B51C0(v13, 0, 0, v12, *(_QWORD *)(a1 + 3464), 0, v19, 0, 0, 0, 0, 1, 0, v24, 1, 0, 0);
          v11 = v20;
          v21 = *(_QWORD *)(a1 + 88);
          if (v20)
            v22 = v20 + 48;
          else
            v22 = 0;
          v23 = sub_22E3CB704(*(llvm::StringMapImpl **)(v13 + 15192), "value", 5uLL);
          *(_QWORD *)v25 = sub_22EFBF080(v21, v22, 0, 0, v23, a3, 0, 0, 0);
          sub_22F3B551C(v11, *(_QWORD *)(a1 + 88), v25, 1uLL, 0, 0);
        }
        else
        {
          v11 = 0;
        }
      }
      if (sub_22EC28AC0((_QWORD *)a1, a2, *(_QWORD *)(a1 + 3448), v12, v11))
      {
        *(_QWORD *)(v10 + 3480) = v11;
        return v11;
      }
    }
    return 0;
  }
  return v11;
}

uint64_t sub_22EC27B50(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned __int8 **v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _BOOL4 v16;
  llvm::APFloatBase *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  char v21[8];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[82];
  uint64_t v27[6];

  v27[5] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 72);
  if ((*(_QWORD *)(v2 + 140) & 0x40000000000) == 0 || !sub_22F2ABF98((_DWORD *)(v2 + 400)))
    return 0;
  v7 = a2;
  do
  {
    v8 = v7;
    v9 = *v7;
    if (v9 > 213)
    {
      if (v9 == 233)
      {
        if ((*(_DWORD *)v8 & 0x7C0000) != 0x300000)
          break;
        v11 = (unsigned __int8 **)(v8 + 16);
      }
      else
      {
        if (v9 != 214)
          break;
        v11 = (unsigned __int8 **)(v8 + 24);
      }
      goto LABEL_20;
    }
    if (v9 == 155)
    {
      if ((**((_DWORD **)v8 + 2) & 0x18000) != 0)
        break;
      if (v8[48])
        v11 = (unsigned __int8 **)(v8 + 24);
      else
        v11 = (unsigned __int8 **)(v8 + 32);
      goto LABEL_20;
    }
    if (v9 != 176)
      break;
    v10 = *((unsigned int *)v8 + 5);
    if ((_DWORD)v10 == -1)
      break;
    v11 = (unsigned __int8 **)&v8[8 * v10 + 40];
LABEL_20:
    v7 = *v11;
  }
  while (v7 != v8);
  if ((a2[2] & 1) != 0)
    return 0;
  v12 = *((_QWORD *)v8 + 1);
  v13 = *(_QWORD *)(a1 + 88);
  v3 = 0;
  if (!sub_22F007CB0(a2, v13, 0))
    return v3;
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v14)
    v15 = *(_DWORD *)(v14 + 16) == 11;
  else
    v15 = 0;
  if (v15 && (*(_DWORD *)(v14 + 16) & 0xFF80000) == 0x5300000)
  {
    v16 = 0;
  }
  else
  {
    v24 = v13;
    bzero(&v25, 0x2C0uLL);
    v16 = !sub_22F3E9660((uint64_t)&v24, v12, "BOOL", 4uLL, v27);
  }
  if (sub_22F2ABF98((_DWORD *)(v2 + 400)) && !v16)
    return 1;
  if ((*(_QWORD *)(v2 + 140) & 0x80000000000) != 0)
    return 0;
  LOWORD(v24) = 0;
  v25 = 0;
  LODWORD(v26[0]) = 0;
  if (sub_22F00554C((uint64_t)a2, (uint64_t)&v24, v13, 0, 0))
  {
    v3 = 1;
  }
  else
  {
    v17 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v20, 0.0);
    v18 = llvm::APFloatBase::IEEEdouble(v17);
    MEMORY[0x23489F4E0](&v22, v20, v18);
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v20);
    v3 = sub_22F0059FC((uint64_t)a2, (uint64_t)v21, v13, 0, 0);
    v19 = v22;
    if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v3) == v19)
      sub_22E463170((llvm::APFloatBase *)&v23);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v22);
  }
  if (LODWORD(v26[0]) >= 2)
    sub_22EF53BC0(v26);
  return v3;
}

uint64_t sub_22EC27DFC(_QWORD *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t v7;
  const unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t i;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  uint64_t v89[2];
  void *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  if ((a3[1] & 0x80) != 0)
  {
    v26 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
    v6 = v26;
    v27 = *(_QWORD *)(a1[11] + 16832);
    v28 = (uint64_t)a3;
LABEL_32:
    sub_22F334E28(v26, v28, v27, 0, 1, a2);
    return v6;
  }
  v6 = 1;
  v7 = sub_22EB1B954((uint64_t)a1, a3);
  if ((v7 & 1) == 0)
  {
    v9 = sub_22EC27B50((uint64_t)a1, a3);
    v88 = a2;
    v10 = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
    v11 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v87 = v11;
    v12 = v11 & 0xFFFFFFFFFFFFFFF0;
    v13 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
    if (v13 && *(_BYTE *)(v13 + 16) == 39)
      goto LABEL_7;
    v14 = *(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0);
    v15 = *(unsigned __int8 *)(v14 + 16);
    if (v15 == 39)
    {
      v13 = sub_22F10CF48(v13);
      if (v13)
      {
LABEL_7:
        if (*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v13 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a1[11] + 16408) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_8:
          v16 = a2;
          v17 = a1;
          v18 = 4091;
LABEL_9:
          sub_22E8FCA40(v17, v16, v18, 0, (uint64_t)&v90);
          v19 = sub_22E8901B8((uint64_t)&v90, (uint64_t *)&v87);
          sub_22F0D4E74((uint64_t)v10);
          v89[0] = v20;
          sub_22E8906A0(v19, v89);
          sub_22E903BEC((unsigned int *)&v90);
          return 1;
        }
        if (!a1[450])
        {
          v43 = sub_22EC288B4(a1, a2, 4);
          a1[450] = v43;
          if (!v43)
            return 1;
          v44 = sub_22F36D148(a1[11], v43, 0);
          a1[451] = sub_22F36CC4C(a1[11], v44);
        }
        if (*v10 != 153 || (*(_DWORD *)v10 & 0x1FC0000) != 0x300000)
          goto LABEL_76;
        v21 = (unsigned __int8 *)*((_QWORD *)v10 + 2);
        if (v21)
        {
          do
          {
            v22 = (uint64_t)v21;
            v23 = *v21;
            if (v23 > 0xD5)
            {
              if (v23 == 233)
              {
                if ((*(_DWORD *)v21 & 0x7C0000) != 0x300000)
                  goto LABEL_76;
                v23 = *(_DWORD *)v21;
                v25 = v21 + 16;
              }
              else
              {
                if (v23 != 214)
                  break;
                v25 = v21 + 24;
              }
            }
            else if (v23 == 155)
            {
              if ((**((_DWORD **)v21 + 2) & 0x18000) != 0)
                goto LABEL_76;
              v25 = v21 + 24;
              if (!*(_BYTE *)(v22 + 48))
                v25 = (unsigned __int8 *)(v22 + 32);
              v23 = 155;
            }
            else
            {
              if (v23 != 176)
                break;
              v24 = *((unsigned int *)v21 + 5);
              if ((_DWORD)v24 == -1)
                goto LABEL_76;
              v25 = &v21[8 * v24 + 40];
              v23 = 176;
            }
            v21 = *(unsigned __int8 **)v25;
          }
          while (v21 != (unsigned __int8 *)v22);
          if (v23 != 225)
            goto LABEL_76;
        }
        else
        {
          v22 = 0;
        }
        v47 = ((*(_DWORD *)v22 >> 21) & 7u) * *(_DWORD *)(v22 + 16);
        v89[0] = v22 + 4 * *(unsigned int *)(v22 + 4) + 20;
        if (!llvm::isLegalUTF8String((llvm *)v89, (const unsigned __int8 **)(v89[0] + v47), v8))
        {
          sub_22E8FCA40(a1, *(_DWORD *)(v22 + 20), 0x1A97u, 0, (uint64_t)&v90);
          v48 = sub_22E8901B8((uint64_t)&v90, a1 + 451);
          sub_22F0D4E74(v22);
          v86 = v49;
          sub_22E8906A0(v48, &v86);
          sub_22E903BEC((unsigned int *)&v90);
LABEL_76:
          v41 = a1[452];
          if (!v41)
          {
            v50 = sub_22E3CB704(*(llvm::StringMapImpl **)(a1[11] + 15192), "stringWithUTF8String", 0x14uLL) | 2;
            v41 = sub_22EFDBA90(a1[450], v50, 0, 0, 1, 0);
            if (!v41)
            {
              if ((*(_QWORD *)(a1[9] + 140) & 0x80000000000000) != 0)
              {
                v54 = a1[450];
                if (v54)
                  v55 = v54 + 48;
                else
                  v55 = 0;
                v56 = sub_22F3B51C0(a1[11], 0, 0, v50, a1[451], 0, v55, 0, 0, 0, 0, 1, 0, v85, 1, 0, 0);
                v41 = v56;
                v57 = a1[11];
                v58 = *(_QWORD *)(v57 + 16408) | 1;
                if (v56)
                  v59 = v56 + 48;
                else
                  v59 = 0;
                v60 = sub_22E3CB704(*(llvm::StringMapImpl **)(v57 + 15192), "value", 5uLL);
                v61 = sub_22EF5B848(a1[11], v58, 0);
                v90 = (void *)sub_22EFBF080(v57, v59, 0, 0, v60, v61, 0, 0, 0);
                sub_22F3B551C(v41, a1[11], &v90, 1uLL, 0, 0);
              }
              else
              {
                v41 = 0;
              }
            }
            if (!sub_22EC28AC0(a1, a2, a1[450], v50, v41))
              return 1;
            a1[452] = v41;
          }
          v51 = a1[451];
          for (i = *(_QWORD *)(*(_QWORD *)(v41 + 80) & 0xFFFFFFFFFFFFFFF0); ; i = *(_QWORD *)(v78 + 40))
          {
            v78 = sub_22F10D774(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0));
            if (!v78)
              break;
            v77 = *(_DWORD *)(v78 + 16) >> 19;
            if ((v77 - 33) < 4)
            {
              v51 = sub_22F369798(a1[11], v77, v51, v51);
              goto LABEL_115;
            }
          }
          goto LABEL_115;
        }
        v53 = sub_22F369798(a1[11], 33, a1[451], a1[451]);
        v26 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
        v6 = v26;
        v28 = (uint64_t)v10;
        v27 = v53;
        goto LABEL_32;
      }
      v13 = *(_QWORD *)v12;
      v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFFFF0);
      v15 = *(_DWORD *)(v14 + 16);
    }
    if (v15 == 44)
    {
      v34 = sub_22F114198(*(_QWORD *)(v14 + 24));
      if ((*(_BYTE *)(v34 + 74) & 1) == 0 && *(_QWORD *)(v34 + 128) <= 7uLL)
      {
        v16 = a2;
        v17 = a1;
        v18 = 4092;
        goto LABEL_9;
      }
      v35 = sub_22F114198(*(_QWORD *)(v14 + 24));
      v36 = sub_22E496830(v35);
      v37 = a2;
      v38 = (uint64_t)a1;
    }
    else
    {
      if (v15 != 11)
      {
        if (!sub_22F10DE84(v13))
          goto LABEL_8;
        if (!a1[432])
        {
          v45 = sub_22EC288B4(a1, a2, 3);
          a1[432] = v45;
          if (!v45)
            return 1;
          v46 = sub_22F36D148(a1[11], v45, 0);
          a1[434] = sub_22F36CC4C(a1[11], v46);
        }
        if (!a1[453])
        {
          v89[0] = sub_22E3CB704(*(llvm::StringMapImpl **)(a1[11] + 15192), "valueWithBytes", 0xEuLL);
          v89[1] = sub_22E3CB704(*(llvm::StringMapImpl **)(a1[11] + 15192), "objCType", 8uLL);
          v39 = sub_22F1D3E5C(*(uint64_t **)(a1[11] + 15200), 2u, v89);
          v40 = sub_22EFDBA90(a1[432], v39, 0, 0, 1, 0);
          if (!v40)
          {
            if ((*(_QWORD *)(a1[9] + 140) & 0x80000000000000) != 0)
            {
              v62 = a1[432];
              if (v62)
                v63 = v62 + 48;
              else
                v63 = 0;
              v64 = sub_22F3B51C0(a1[11], 0, 0, v39, a1[434], 0, v63, 0, 0, 0, 0, 1, 0, v85, 1, 0, 0);
              v40 = v64;
              v90 = &v92;
              v91 = 0x200000000;
              v65 = a1[11];
              if (v64)
                v66 = v64 + 48;
              else
                v66 = 0;
              v67 = sub_22E3CB704(*(llvm::StringMapImpl **)(v65 + 15192), "bytes", 5uLL);
              v68 = sub_22EFBF080(v65, v66, 0, 0, v67, *(_QWORD *)(a1[11] + 16816) | 1, 0, 0, 0);
              v69 = v91;
              if (v91 >= HIDWORD(v91))
              {
                v76 = v68;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v68 = v76;
                v69 = v91;
              }
              *((_QWORD *)v90 + v69) = v68;
              LODWORD(v91) = v91 + 1;
              v70 = a1[11];
              v71 = *(_QWORD *)(v70 + 16408) | 1;
              v72 = sub_22E3CB704(*(llvm::StringMapImpl **)(v70 + 15192), "type", 4uLL);
              v73 = sub_22EF5B848(a1[11], v71, 0);
              v74 = sub_22EFBF080(v70, v66, 0, 0, v72, v73, 0, 0, 0);
              v75 = v91;
              if (v91 >= HIDWORD(v91))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v75 = v91;
              }
              *((_QWORD *)v90 + v75) = v74;
              LODWORD(v91) = v91 + 1;
              sub_22F3B551C(v40, a1[11], v90, v91, 0, 0);
              if (v90 != &v92)
                free(v90);
            }
            else
            {
              v40 = 0;
            }
          }
          if (!sub_22EC28AC0(a1, a2, a1[432], v39, v40))
            return 1;
          a1[453] = v40;
        }
        if ((sub_22F111968(&v87, a1[11]) & 1) == 0)
        {
          v16 = a2;
          v17 = a1;
          v18 = 4102;
          goto LABEL_9;
        }
        v41 = a1[453];
        v42 = a1 + 434;
        goto LABEL_90;
      }
      v29 = v10;
      do
      {
        v30 = v29;
        v31 = *v29;
        if (v31 > 0xD5)
        {
          if (v31 == 233)
          {
            if ((*(_DWORD *)v29 & 0x7C0000) != 0x300000)
              goto LABEL_88;
            v31 = *(_DWORD *)v29;
            v33 = v29 + 16;
          }
          else
          {
            if (v31 != 214)
              break;
            v33 = v29 + 24;
          }
        }
        else if (v31 == 155)
        {
          if ((**((_DWORD **)v29 + 2) & 0x18000) != 0)
            goto LABEL_88;
          v33 = v29 + 24;
          if (!v30[48])
            v33 = v30 + 32;
          v31 = 155;
        }
        else
        {
          if (v31 != 176)
            break;
          v32 = *((unsigned int *)v29 + 5);
          if ((_DWORD)v32 == -1)
            goto LABEL_88;
          v33 = &v29[8 * v32 + 40];
          v31 = 176;
        }
        v29 = *(unsigned __int8 **)v33;
      }
      while (v29 != v30);
      if (v31 == 154)
      {
        switch((*(_DWORD *)v30 >> 18) & 7)
        {
          case 0:
          case 2:
            v11 = *(_QWORD *)(a1[11] + 16408);
            goto LABEL_87;
          case 1:
            v11 = *(_QWORD *)(a1[11] + 16424);
            goto LABEL_87;
          case 3:
            v11 = *(_QWORD *)(a1[11] + 16448);
            goto LABEL_87;
          case 4:
            v11 = *(_QWORD *)(a1[11] + 16456);
LABEL_87:
            v87 = v11;
            break;
          default:
            break;
        }
      }
LABEL_88:
      v37 = a2;
      v38 = (uint64_t)a1;
      v36 = v11;
    }
    v41 = sub_22EC27918(v38, v37, v36, 0, 0);
    v42 = a1 + 433;
LABEL_90:
    if (!v41)
      goto LABEL_8;
    v51 = *v42;
LABEL_115:
    sub_22EB17F48(a1, v41, &v88, 1, 0, 0, 0, 0);
    if (sub_22F10DE84(*(_QWORD *)(v87 & 0xFFFFFFFFFFFFFFF0)))
    {
      LODWORD(v90) = 9;
      v91 = 0;
      v92 = v87;
      v93 = 0;
      v94 = 0;
      sub_22EFF605C((uint64_t)v10);
      v80 = v79;
      v81 = a1;
    }
    else
    {
      if (!*(_DWORD *)(v41 + 104))
        goto LABEL_123;
      sub_22E99E5D4(a1[11], **(_QWORD **)(v41 + 96), *(_QWORD *)(**(_QWORD **)(v41 + 96) + 48), (uint64_t)&v90);
      v81 = a1;
      v80 = 0;
    }
    v82 = sub_22EC45014(v81, &v90, v80, v10, 0, 0);
    if ((v82 & 1) != 0)
      return 1;
    v10 = (unsigned __int8 *)(v82 & 0xFFFFFFFFFFFFFFFELL);
LABEL_123:
    v84 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
    sub_22F334E28(v84, (uint64_t)v10, v51, v41, v9, a2);
    return sub_22EBCC6C0((uint64_t)a1, v84);
  }
  return v6;
}

uint64_t *sub_22EC288B4(_QWORD *a1, int a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _DWORD *v21;
  const char *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _BYTE v26[96];
  const char *v27;
  uint64_t v28;
  unsigned int v29[25];
  int v30;

  v6 = sub_22F3E8F0C(a1[430], dword_22F4835CC[a3]);
  v7 = sub_22EC65CE0(a1, a1[418], v6, a2, 0, 0);
  if (v7)
  {
    v8 = (uint64_t *)v7;
    if ((*(_DWORD *)(v7 + 28) & 0x7F) == 0x16)
    {
      v30 = a3;
      goto LABEL_4;
    }
  }
  if ((*(_QWORD *)(a1[9] + 140) & 0x80000000000000) == 0)
  {
    v30 = a3;
LABEL_11:
    v11 = sub_22F3E8F0C(a1[430], dword_22F4835CC[a3]);
    sub_22E8FCA40(a1, a2, 0x13B4u, 0, (uint64_t)v29);
    v12 = *(_DWORD **)(v11 + 16);
    v13 = *v12;
    v27 = (const char *)(v12 + 4);
    v28 = v13;
    v14 = sub_22F2F2210((uint64_t)v29, (uint64_t)&v27);
    sub_22E8900C4(v14, &v30);
    v15 = v29;
LABEL_24:
    sub_22E903BEC(v15);
    return 0;
  }
  v16 = a1[11];
  v17 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v16 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v16 + 1960) + 80));
  if (v17)
    v18 = v17 + 40;
  else
    v18 = 0;
  v8 = sub_22F3B5B14(v16, v18, 0, v6, 0, 0, 0, 0);
  v30 = a3;
  if (!v8)
    goto LABEL_11;
LABEL_4:
  v9 = v8[15];
  if (!v9)
  {
    sub_22E3CD31C((uint64_t *)(v8[12] + 88), v8[12]);
    v9 = v8[15];
  }
  if (v9 <= 7 && (*(_QWORD *)(a1[9] + 140) & 0x80000000000000) == 0)
  {
    sub_22E8FCA40(a1, a2, 0x13B4u, 0, (uint64_t)v29);
    v19 = v8[5] & 0xFFFFFFFFFFFFFFF8;
    if ((v8[5] & 7) != 0 || v19 == 0)
    {
      v23 = 0;
      v22 = "";
    }
    else
    {
      v21 = *(_DWORD **)(v19 + 16);
      v24 = *v21;
      v22 = (const char *)(v21 + 4);
      v23 = v24;
    }
    v27 = v22;
    v28 = v23;
    v25 = sub_22F2F2210((uint64_t)v29, (uint64_t)&v27);
    sub_22E8900C4(v25, &v30);
    sub_22E903BEC(v29);
    sub_22E8FCA40(a1, *((_DWORD *)v8 + 6), 0x1609u, 0, (uint64_t)v26);
    v15 = (unsigned int *)v26;
    goto LABEL_24;
  }
  return v8;
}

BOOL sub_22EC28AC0(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  _BOOL8 v8;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  const char *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18[2];
  unsigned int v19[24];
  uint64_t v20;

  v20 = a4;
  if (a5)
  {
    v18[0] = *(_QWORD *)(a5 + 80);
    v7 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18[0] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 16);
    v8 = v7 == 32;
    if (v7 != 32)
    {
      sub_22E8FCA40(a1, a2, 0x1001u, 0, (uint64_t)v19);
      sub_22E894538((uint64_t)v19, &v20);
      sub_22E903BEC(v19);
      sub_22E8FCA40(a1, *(_DWORD *)(a5 + 24), 0x16F1u, 0, (uint64_t)v19);
      sub_22E8901B8((uint64_t)v19, v18);
      sub_22E903BEC(v19);
    }
  }
  else
  {
    sub_22E8FCA40(a1, a2, 0x13B1u, 0, (uint64_t)v19);
    v11 = sub_22E894538((uint64_t)v19, &v20);
    v12 = *(_QWORD *)(a3 + 40) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)(a3 + 40) & 7) != 0 || v12 == 0)
    {
      v16 = 0;
      v15 = "";
    }
    else
    {
      v14 = *(_DWORD **)(v12 + 16);
      v17 = *v14;
      v15 = (const char *)(v14 + 4);
      v16 = v17;
    }
    v18[0] = (uint64_t)v15;
    v18[1] = v16;
    sub_22F2F2210(v11, (uint64_t)v18);
    sub_22E903BEC(v19);
    return 0;
  }
  return v8;
}

uint64_t sub_22EC28BF4(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  _QWORD v67[12];

  v67[10] = *MEMORY[0x24BDAC8D0];
  if (!a1[454])
  {
    v8 = sub_22EC288B4(a1, a2, 0);
    a1[454] = v8;
    if (!v8)
      return 1;
  }
  v11 = a1[11];
  v12 = sub_22F36E1B8(v11);
  v13 = *(_QWORD *)(v12 + 48);
  if (v13)
    v14 = v13 & 0xFFFFFFFFFFFFFFF0;
  else
    v14 = sub_22EF6462C(v11, v12);
  v15 = a1[455];
  if (!v15)
  {
    v16 = sub_22F3E8F74(a1[430], 4u);
    v64 = v16;
    v17 = sub_22EFDBA90(a1[454], v16, 0, 0, 1, 0);
    if (v17)
    {
      v15 = v17;
    }
    else if ((*(_QWORD *)(a1[9] + 140) & 0x80000000000000) != 0)
    {
      v21 = a1[11];
      v22 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v21 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v21 + 1960) + 80));
      if (v22)
        v23 = v22 + 40;
      else
        v23 = 0;
      v24 = sub_22F3B51C0(v21, 0, 0, v16, v14, 0, v23, 0, 0, 0, 0, 1, 0, v60, 1, 0, 0);
      v15 = v24;
      v65 = v67;
      v66 = 0x200000000;
      v25 = a1[11];
      if (v24)
        v26 = v24 + 48;
      else
        v26 = 0;
      v27 = sub_22E3CB704(*(llvm::StringMapImpl **)(v25 + 15192), "objects", 7uLL);
      v28 = sub_22EF5B848(a1[11], v14, 0);
      *((_QWORD *)v65 + v66) = sub_22EFBF080(v25, v26, 0, 0, v27, v28, 0, 0, 0);
      LODWORD(v66) = v66 + 1;
      v29 = a1[11];
      v30 = sub_22E3CB704(*(llvm::StringMapImpl **)(v29 + 15192), "cnt", 3uLL);
      v31 = sub_22EFBF080(v29, v26, 0, 0, v30, *(_QWORD *)(a1[11] + 16536), 0, 0, 0);
      v32 = v66;
      if (v66 >= HIDWORD(v66))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v32 = v66;
      }
      *((_QWORD *)v65 + v32) = v31;
      LODWORD(v66) = v66 + 1;
      sub_22F3B551C(v15, a1[11], v65, v66, 0, 0);
      if (v65 != v67)
        free(v65);
      v16 = v64;
    }
    else
    {
      v15 = 0;
    }
    if (!sub_22EC28AC0(a1, a2, a1[454], v16, v15))
      return 1;
    v63 = *(_QWORD *)(**(_QWORD **)(v15 + 96) + 48);
    v18 = *(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0);
    if ((!v18 || *(_BYTE *)(v18 + 16) != 39)
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
       || (v18 = sub_22F10CF48(v18)) == 0)
      || *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v18 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
    {
      sub_22E8FCA40(a1, a2, 0x1001u, 0, (uint64_t)&v65);
      sub_22E894538((uint64_t)&v65, &v64);
      sub_22E903BEC((unsigned int *)&v65);
      sub_22E8FCA40(a1, *(_DWORD *)(**(_QWORD **)(v15 + 96) + 24), 0x16F0u, 0, (uint64_t)&v65);
      v62 = 0;
      v19 = sub_22E8900C4((uint64_t)&v65, &v62);
      v20 = sub_22E8901B8(v19, &v63);
      v61 = sub_22EF5B848(a1[11], v14 | 1, 0);
      sub_22E8901B8(v20, (uint64_t *)&v61);
LABEL_20:
      sub_22E903BEC((unsigned int *)&v65);
      return 1;
    }
    v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 96) + 8) + 48) & 0xFFFFFFFFFFFFFFF0)
                                + 8) & 0xFFFFFFFFFFFFFFF0);
    v34 = *(_DWORD *)(v33 + 16);
    if (v33)
      v35 = v34 == 11;
    else
      v35 = 0;
    if (v35)
    {
      if (((*(_DWORD *)(v33 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
        goto LABEL_66;
    }
    else
    {
      if (v33 && v34 == 44)
      {
        v36 = sub_22F114198(*(_QWORD *)(v33 + 24));
        if ((*(_BYTE *)(v36 + 74) & 1) == 0 && *(_QWORD *)(v36 + 128) <= 7uLL
          || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v33 + 24)) + 76) & 0x80) != 0)
        {
          goto LABEL_66;
        }
        goto LABEL_43;
      }
      if (v34 != 9)
      {
LABEL_66:
        sub_22E8FCA40(a1, a2, 0x1001u, 0, (uint64_t)&v65);
        sub_22E894538((uint64_t)&v65, &v64);
        sub_22E903BEC((unsigned int *)&v65);
        sub_22E8FCA40(a1, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 96) + 8) + 24), 0x16F0u, 0, (uint64_t)&v65);
        v62 = 1;
        v58 = sub_22E8900C4((uint64_t)&v65, &v62);
        v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 96) + 8) + 48);
        v59 = sub_22E8901B8(v58, (uint64_t *)&v61);
        sub_22F2F30F4(v59, (uint64_t)"integral");
        goto LABEL_20;
      }
    }
LABEL_43:
    a1[455] = v15;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v15 + 96) + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v37 || *(_BYTE *)(v37 + 16) != 39)
    sub_22F10CF48(v37);
  v38 = a1[9];
  v39 = sub_22F2ABF98((_DWORD *)(v38 + 400));
  v40 = 0;
  v41 = *(_QWORD *)(v38 + 140);
  if (v39 && (v41 & 0x100000000000) == 0)
  {
    if (a4)
    {
      v42 = 8 * a4 - 8;
      v43 = a3;
      do
      {
        v44 = (_DWORD *)*v43++;
        v40 = (*v44 & 0x10000) == 0;
        if ((*v44 & 0x10000) != 0)
          break;
        v45 = v42;
        v42 -= 8;
      }
      while (v45);
    }
    else
    {
      v40 = 1;
    }
  }
  if ((v41 & 0x40000000000) != 0 && !(v40 | sub_22F2ABF98((_DWORD *)(v38 + 400)) ^ 1))
    v40 = a4 == 0;
  v46 = a4;
  if ((_DWORD)a4)
  {
    v9 = 1;
    v47 = a3;
    while (1)
    {
      v48 = sub_22EC292A0();
      if ((v48 & 1) != 0)
        break;
      v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      *v47 = v48 & 0xFFFFFFFFFFFFFFFELL;
      v40 = v40
         && (*sub_22EFFEB40((unsigned __int8 *)(v48 & 0xFFFFFFFFFFFFFFFELL)) + 55) <= 3u
         && sub_22EFFFBEC(v49, a1[11], 0, 0, v50, v51, v52, v53);
      ++v47;
      if (!--v46)
        goto LABEL_64;
    }
  }
  else
  {
LABEL_64:
    v54 = a1[11];
    v55 = sub_22F36D148(v54, (uint64_t *)a1[454], 0);
    v56 = sub_22F36CC4C(v54, v55);
    v57 = sub_22F3C71A8(a1[11], a3, a4, v56, a1[455], v40, a2);
    return sub_22EBCC6C0((uint64_t)a1, v57);
  }
  return v9;
}

uint64_t sub_22EC292A0()
{
  uint64_t v0;
  unint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unint64_t v43;
  __int128 v44;
  void *__p;
  uint64_t v46;
  uint64_t v47;
  char v48;
  int v49;
  uint64_t v50[2];
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;

  v0 = MEMORY[0x24BDAC7A8]();
  v4 = v3;
  v57 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(v3 + 1) & 0x80) == 0)
  {
    v5 = v2;
    v6 = v1;
    v7 = v0;
    v8 = sub_22EB19A28(v0);
    if ((v8 & 1) != 0)
      return 1;
    v9 = (unsigned __int8 *)(v8 & 0xFFFFFFFFFFFFFFFELL);
    v51 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((*(_BYTE *)(*(_QWORD *)(v7 + 72) + 1) & 1) != 0
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) == 45)
    {
      v10 = *(_QWORD *)(v7 + 88);
      LODWORD(__p) = 0;
      LODWORD(v43) = 1;
      *(_QWORD *)&v44 = 0;
      *((_QWORD *)&v44 + 1) = sub_22EF60188(v10, v6);
      v46 = 0;
      sub_22F0D5A50((uint64_t)v9);
      v50[0] = (v11 << 32) | 2;
      v50[1] = 0;
      sub_22EC395BC(&v52, v7, &v43, v50, &v51, 1, 0, 1);
      if (v52)
      {
        v4 = sub_22EC3DF80((int)&v52, v7);
        sub_22EC3CE2C((uint64_t)&v52);
        return v4;
      }
      sub_22EC3CE2C((uint64_t)&v52);
      v9 = (unsigned __int8 *)v51;
    }
    v12 = sub_22EB1A358(v7, v9, 0);
    if ((v12 & 1) != 0)
      return 1;
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    v51 = v13;
    v14 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16);
    if (v14 == 10 || v14 == 32)
    {
      if (v5)
      {
LABEL_12:
        if (*v9 == 204)
        {
          v15 = *((_QWORD *)v9 + 2);
          if (v15)
          {
            v16 = *(unsigned int *)(v15 + 4);
            if (v16 >= 2)
            {
              v17 = (int *)(v15 + 20);
              while (1)
              {
                v18 = *v17++;
                if (v18 < 0)
                  break;
                if (!--v16)
                {
                  sub_22F0D5A50(v13);
                  sub_22E8FCA40((_QWORD *)v7, v19, 0x18DAu, 0, (uint64_t)&v52);
                  v43 = *(_QWORD *)(v51 + 8);
                  sub_22E8901B8((uint64_t)&v52, (uint64_t *)&v43);
                  sub_22E903BEC(&v52);
                  break;
                }
              }
            }
          }
        }
      }
LABEL_39:
      v31 = *(_QWORD *)(v7 + 88);
      v55 = 0;
      v52 = 1;
      v32 = sub_22EF60188(v31, v6);
      v53 = 0;
      v54 = v32;
      v56 = 0;
      v33 = v51;
      sub_22F0D5A50(v51);
      return sub_22EC45014(v7, &v52, v34, v33, 0, 0);
    }
    v20 = *v9;
    if (v20 > 0xB4)
    {
      if (v20 != 181)
      {
        if (v20 == 225)
        {
          if ((v9[2] & 0x1C) == 0)
          {
            sub_22F0D5A50((uint64_t)v9);
            sub_22E8FCA40((_QWORD *)v7, v37, 0xB90u, 0, (uint64_t)&v52);
            v49 = 0;
            v38 = sub_22E8900C4((uint64_t)&v52, &v49);
            sub_22F0D4E74((uint64_t)v9);
            v50[0] = v39;
            v40 = sub_22E8906A0(v38, v50);
            sub_22F0D5A50((uint64_t)v9);
            *(_QWORD *)((char *)&v44 + 4) = 0;
            BYTE12(v44) = 0;
            v46 = 0;
            v47 = 0x100000000000000;
            v43 = v41 | ((unint64_t)v41 << 32);
            LOBYTE(v44) = 0;
            __p = (void *)64;
            v48 = 0;
            sub_22E890748(v40, &v43);
            if (SHIBYTE(v47) < 0)
              operator delete(__p);
            sub_22E903BEC(&v52);
            sub_22F0D5A50((uint64_t)v9);
            v30 = sub_22EC274A0((_QWORD *)v7, v42, (uint64_t)v9);
            if ((v30 & 1) != 0)
              return 1;
            goto LABEL_38;
          }
LABEL_41:
          sub_22F0D5A50(v13);
          sub_22E8FCA40((_QWORD *)v7, v35, 0xE36u, 0, (uint64_t)&v52);
          v43 = *(_QWORD *)(v51 + 8);
          sub_22E8901B8((uint64_t)&v52, (uint64_t *)&v43);
          sub_22E903BEC(&v52);
          return 1;
        }
        if (v20 != 195)
          goto LABEL_41;
      }
    }
    else
    {
      v21 = v20 - 117;
      if (v21 > 0x35 || ((1 << v21) & 0x20002000000001) == 0)
        goto LABEL_41;
    }
    if ((sub_22F0AC150(*(uint64_t **)(v7 + 3440), *((_QWORD *)v9 + 1)) & 0xFF00000000) != 0)
    {
      v22 = *v9;
      switch(v22)
      {
        case 117:
          v23 = 2;
          break;
        case 154:
          v23 = 1;
          break;
        case 195:
          v23 = 2;
          break;
        default:
          v23 = 3;
          break;
      }
      v49 = v23;
      sub_22F0D5A50((uint64_t)v9);
      sub_22E8FCA40((_QWORD *)v7, v24, 0xB90u, 0, (uint64_t)&v52);
      v25 = sub_22E8900C4((uint64_t)&v52, &v49);
      sub_22F0D4E74((uint64_t)v9);
      v50[0] = v26;
      v27 = sub_22E8906A0(v25, v50);
      sub_22F0D5A50((uint64_t)v9);
      *(_QWORD *)((char *)&v44 + 4) = 0;
      BYTE12(v44) = 0;
      v46 = 0;
      v47 = 0x100000000000000;
      v43 = v28 | ((unint64_t)v28 << 32);
      LOBYTE(v44) = 0;
      __p = (void *)64;
      v48 = 0;
      sub_22E890748(v27, &v43);
      if (SHIBYTE(v47) < 0)
        operator delete(__p);
      sub_22E903BEC(&v52);
      sub_22F0D5A50((uint64_t)v9);
      v30 = sub_22EC27798(v7, v29, v9);
      if ((v30 & 1) != 0)
        return 1;
LABEL_38:
      v13 = v30 & 0xFFFFFFFFFFFFFFFELL;
      v51 = v13;
      if (v5)
        goto LABEL_12;
      goto LABEL_39;
    }
    v13 = v51;
    goto LABEL_41;
  }
  return v4;
}

uint64_t sub_22EC297B0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _BOOL4 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _DWORD *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  int v92;
  unsigned __int8 *v93;
  int v94;
  int v95;
  unsigned __int8 *v96;
  uint64_t *v97;
  void **v98;
  uint64_t **v99;
  uint64_t v100;
  _DWORD *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  _DWORD *v106;
  char v107;
  llvm::APInt *v108;
  unsigned int v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  llvm *v116;
  uint64_t v117;
  uint64_t v118;
  __int16 v119;
  char v120;
  int v121;
  unint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125[2];
  unsigned int v126;
  uint64_t v127[12];
  uint64_t v128[2];
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  char v132;
  __int128 v133;
  _DWORD v134[20];
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  if (!a1[456])
  {
    v8 = 1;
    v9 = sub_22EC288B4(a1, a2, 1);
    a1[456] = v9;
    if (!v9)
      return v8;
  }
  v11 = a1[11];
  v12 = sub_22F36E1B8(v11);
  v13 = *(_QWORD *)(v12 + 48);
  if (v13)
    v14 = v13 & 0xFFFFFFFFFFFFFFF0;
  else
    v14 = sub_22EF6462C(v11, v12);
  v15 = a1[457];
  if (!v15)
  {
    v16 = sub_22F3E91B4(a1[430], 4u);
    v127[0] = v16;
    v17 = sub_22EFDBA90(a1[456], v16, 0, 0, 1, 0);
    if (v17)
    {
      v15 = v17;
    }
    else if ((*(_QWORD *)(a1[9] + 140) & 0x80000000000000) != 0)
    {
      v30 = a1[11];
      v31 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v30 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v30 + 1960) + 80));
      if (v31)
        v32 = v31 + 40;
      else
        v32 = 0;
      v33 = sub_22F3B51C0(v30, 0, 0, v16, v14, 0, v32, 0, 0, 0, 0, 1, 0, v119, 1, 0, 0);
      v15 = v33;
      *(_QWORD *)&v133 = v134;
      *((_QWORD *)&v133 + 1) = 0x300000000;
      v34 = a1[11];
      if (v33)
        v35 = v33 + 48;
      else
        v35 = 0;
      v36 = sub_22E3CB704(*(llvm::StringMapImpl **)(v34 + 15192), "objects", 7uLL);
      v37 = sub_22EF5B848(a1[11], v14, 0);
      *(_QWORD *)(v133 + 8 * DWORD2(v133)) = sub_22EFBF080(v34, v35, 0, 0, v36, v37, 0, 0, 0);
      ++DWORD2(v133);
      v38 = a1[11];
      v39 = sub_22E3CB704(*(llvm::StringMapImpl **)(v38 + 15192), "keys", 4uLL);
      v40 = sub_22EF5B848(a1[11], v14, 0);
      v41 = sub_22EFBF080(v38, v35, 0, 0, v39, v40, 0, 0, 0);
      v42 = DWORD2(v133);
      if (DWORD2(v133) >= HIDWORD(v133))
      {
        v118 = v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v41 = v118;
        v42 = DWORD2(v133);
      }
      *(_QWORD *)(v133 + 8 * v42) = v41;
      ++DWORD2(v133);
      v43 = a1[11];
      v44 = sub_22E3CB704(*(llvm::StringMapImpl **)(v43 + 15192), "cnt", 3uLL);
      v45 = sub_22EFBF080(v43, v35, 0, 0, v44, *(_QWORD *)(a1[11] + 16536), 0, 0, 0);
      v46 = DWORD2(v133);
      if (DWORD2(v133) >= HIDWORD(v133))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v46 = DWORD2(v133);
      }
      *(_QWORD *)(v133 + 8 * v46) = v45;
      ++DWORD2(v133);
      sub_22F3B551C(v15, a1[11], (const void *)v133, DWORD2(v133), 0, 0);
      if ((_DWORD *)v133 != v134)
        free((void *)v133);
      v16 = v127[0];
    }
    else
    {
      v15 = 0;
    }
    if (!sub_22EC28AC0(a1, a2, a1[456], v16, v15))
      return 1;
    v128[0] = *(_QWORD *)(**(_QWORD **)(v15 + 96) + 48);
    v18 = *(_QWORD *)(v128[0] & 0xFFFFFFFFFFFFFFF0);
    if ((!v18 || *(_BYTE *)(v18 + 16) != 39)
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
       || (v18 = sub_22F10CF48(v18)) == 0)
      || (v19 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v18 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0),
          v19 != *(_QWORD *)(*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)))
    {
      sub_22E8FCA40(a1, a2, 0x1001u, 0, (uint64_t)&v133);
      sub_22E894538((uint64_t)&v133, v127);
      sub_22E903BEC((unsigned int *)&v133);
      sub_22E8FCA40(a1, *(_DWORD *)(**(_QWORD **)(v15 + 96) + 24), 0x16F0u, 0, (uint64_t)&v133);
      LODWORD(v122) = 0;
      v20 = sub_22E8900C4((uint64_t)&v133, (int *)&v122);
      v21 = sub_22E8901B8(v20, v128);
      v125[0] = sub_22EF5B848(a1[11], v14 | 1, 0);
      sub_22E8901B8(v21, v125);
LABEL_19:
      sub_22E903BEC((unsigned int *)&v133);
      return 1;
    }
    v125[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 96) + 8) + 48);
    v22 = *(_QWORD *)(v125[0] & 0xFFFFFFFFFFFFFFF0);
    if (!v22 || *(_BYTE *)(v22 + 16) != 39)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
        goto LABEL_33;
      v23 = sub_22F10CF48(*(_QWORD *)(v125[0] & 0xFFFFFFFFFFFFFFF0));
      if (!v23)
        goto LABEL_33;
      v22 = v23;
      v19 = *(_QWORD *)(*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    }
    v24 = (_QWORD *)(*(_QWORD *)((*(_QWORD *)(v22 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (*v24 != v19)
    {
      v25 = a1[458];
      if (v25 <= 0xF)
      {
        v26 = sub_22E3CB704(*(llvm::StringMapImpl **)(a1[11] + 15192), "NSCopying", 9uLL);
        v27 = sub_22EC65CE0(a1, a1[418], v26, a2, 11, 0);
        if (v27)
        {
          *(_QWORD *)&v133 = v27;
          v112 = sub_22EF667E8(a1[11], *(_QWORD *)(a1[11] + 16888), 0, 0, (uint64_t *)&v133, 1, 0);
          a1[458] = v112;
          v25 = sub_22F36CC4C(a1[11], v112);
          a1[458] = v25;
        }
        else
        {
          v25 = a1[458];
        }
        if (v25 < 0x10)
          goto LABEL_33;
        v24 = (_QWORD *)(*(_QWORD *)((*(_QWORD *)(v22 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      }
      if (*v24 != *(_QWORD *)(*(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_33:
        sub_22E8FCA40(a1, a2, 0x1001u, 0, (uint64_t)&v133);
        sub_22E894538((uint64_t)&v133, v127);
        sub_22E903BEC((unsigned int *)&v133);
        sub_22E8FCA40(a1, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 96) + 8) + 24), 0x16F0u, 0, (uint64_t)&v133);
        v8 = 1;
        v121 = 1;
        v28 = sub_22E8900C4((uint64_t)&v133, &v121);
        v29 = sub_22E8901B8(v28, v125);
        v122 = sub_22EF5B848(a1[11], v14 | 1, 0);
        sub_22E8901B8(v29, (uint64_t *)&v122);
        sub_22E903BEC((unsigned int *)&v133);
        return v8;
      }
    }
    v122 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 96) + 16) + 48);
    v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v122 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v48 = *(_DWORD *)(v47 + 16);
    if (v47)
      v49 = v48 == 11;
    else
      v49 = 0;
    if (v49)
    {
      if (((*(_DWORD *)(v47 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
        goto LABEL_144;
    }
    else
    {
      if (v47 && v48 == 44)
      {
        v50 = sub_22F114198(*(_QWORD *)(v47 + 24));
        if ((*(_BYTE *)(v50 + 74) & 1) == 0 && *(_QWORD *)(v50 + 128) <= 7uLL
          || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v47 + 24)) + 76) & 0x80) != 0)
        {
          goto LABEL_144;
        }
        goto LABEL_58;
      }
      if (v48 != 9)
      {
LABEL_144:
        sub_22E8FCA40(a1, a2, 0x1001u, 0, (uint64_t)&v133);
        sub_22E894538((uint64_t)&v133, v127);
        sub_22E903BEC((unsigned int *)&v133);
        sub_22E8FCA40(a1, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 96) + 16) + 24), 0x16F0u, 0, (uint64_t)&v133);
        v121 = 2;
        v113 = sub_22E8900C4((uint64_t)&v133, &v121);
        v114 = sub_22E8901B8(v113, (uint64_t *)&v122);
        sub_22F2F30F4(v114, (uint64_t)"integral");
        goto LABEL_19;
      }
    }
LABEL_58:
    a1[457] = v15;
  }
  v51 = *(_QWORD **)(v15 + 96);
  v52 = *(_QWORD *)(*(_QWORD *)(*v51 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v52 || *(_BYTE *)(v52 + 16) != 39)
  {
    sub_22F10CF48(v52);
    v51 = *(_QWORD **)(a1[457] + 96);
  }
  v53 = *(_QWORD *)(*(_QWORD *)(v51[1] + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v53 || *(_BYTE *)(v53 + 16) != 39)
    sub_22F10CF48(v53);
  v54 = a1[9];
  v55 = sub_22F2ABF98((_DWORD *)(v54 + 400));
  v56 = *(_QWORD *)(v54 + 140);
  if ((v56 & 0x200000000000) != 0)
    v57 = 0;
  else
    v57 = v55;
  v58 = a4 == 0;
  v59 = 32 * a4;
  if (a4 && v57)
  {
    v60 = v59 - 32;
    v61 = (_QWORD *)a3;
    while ((*(_BYTE *)(*v61 + 2) & 1) == 0 && (*(_BYTE *)(v61[1] + 2) & 1) == 0)
    {
      v60 -= 32;
      v61 += 4;
      if (v61 == (_QWORD *)(a3 + 32 * a4))
      {
        v57 = 1;
        v58 = 1;
        goto LABEL_76;
      }
    }
    v57 = 0;
    v58 = v60 == 0;
  }
LABEL_76:
  v62 = v58 & v57;
  if ((v56 & 0x40000000000) == 0)
  {
    if (a4)
      goto LABEL_78;
LABEL_101:
    v120 = 0;
LABEL_102:
    v82 = a1[11];
    v83 = sub_22F36D148(v82, (uint64_t *)a1[456], 0);
    v84 = sub_22F36CC4C(v82, v83);
    v85 = (_DWORD *)sub_22F3C73A8(a1[11], a3, a4, v120 & 1, v84, a1[457], v62, a2);
    v86 = (uint64_t)v85;
    if ((*v85 & 0x18000) == 0)
    {
      v125[0] = 0;
      v125[1] = 0;
      v126 = 0;
      v123 = 0;
      v124 = 0;
      v122 = (unint64_t)&v123;
      v87 = v85[4];
      v88 = v87 & 0x7FFFFFFF;
      if ((v87 & 0x7FFFFFFF) != 0)
      {
        v89 = 0;
        do
        {
          v90 = sub_22EFFA6B0(*(unsigned __int8 **)(v86 + 40 + 16 * v89));
          v91 = v90;
          v92 = *v90;
          if (v92 == 204)
          {
            v101 = (_DWORD *)*((_QWORD *)v90 + 2);
            v102 = (uint64_t)&v101[v101[1] + 5];
            v103 = ((*v101 >> 21) & 7u) * v101[4];
            sub_22EFF605C((uint64_t)v90);
            v105 = v104;
            *(_QWORD *)&v133 = v102;
            *((_QWORD *)&v133 + 1) = v103;
            v134[0] = v104;
            sub_22F334F98((uint64_t)v128, (uint64_t)v125, &v133, v134);
            if (!(_BYTE)v129)
            {
              sub_22E8FCA40(a1, v105, 0x1A89u, 0, (uint64_t)&v133);
              sub_22E903BEC((unsigned int *)&v133);
              sub_22E8FCA40(a1, *(_DWORD *)(v128[0] + 16), 0x16E9u, 0, (uint64_t)v127);
              sub_22E903BEC((unsigned int *)v127);
            }
            v92 = *v91;
          }
          if (v92 == 202)
          {
            v93 = (unsigned __int8 *)*((_QWORD *)v91 + 2);
            sub_22EFF605C((uint64_t)v91);
            v95 = v94;
            v96 = sub_22EFFA6B0(v93);
            if (*v96 == 225)
            {
              v111 = ((*(_DWORD *)v96 >> 21) & 7u) * *((_DWORD *)v96 + 4);
              *(_QWORD *)&v133 = &v96[4 * *((unsigned int *)v96 + 1) + 20];
              *((_QWORD *)&v133 + 1) = v111;
              v134[0] = v95;
              sub_22F334F98((uint64_t)v128, (uint64_t)v125, &v133, v134);
              if (!(_BYTE)v129)
              {
                sub_22E8FCA40(a1, v95, 0x1A89u, 0, (uint64_t)&v133);
                sub_22E903BEC((unsigned int *)&v133);
                sub_22E8FCA40(a1, *(_DWORD *)(v128[0] + 16), 0x16E9u, 0, (uint64_t)v127);
                sub_22E903BEC((unsigned int *)v127);
              }
            }
            else
            {
              LOWORD(v128[0]) = 0;
              v128[1] = 0;
              LODWORD(v129) = 0;
              if (sub_22F00554C((uint64_t)v93, (uint64_t)v128, a1[11], 2, 0))
              {
                DWORD2(v133) = v131;
                if (v131 > 0x40)
                  llvm::APInt::initSlowCase((llvm::APInt *)&v133, (const llvm::APInt *)&v130);
                else
                  *(_QWORD *)&v133 = v130;
                BYTE12(v133) = v132;
                v134[0] = v95;
                v97 = v123;
                v98 = (void **)&v123;
                v99 = &v123;
                if (!v123)
                  goto LABEL_125;
                v98 = (void **)&v123;
                while (1)
                {
                  while (1)
                  {
                    v99 = (uint64_t **)v97;
                    v100 = (uint64_t)(v97 + 4);
                    if ((sub_22E4634B4((uint64_t)&v133, (uint64_t)(v97 + 4)) & 0x80000000) == 0)
                      break;
                    v97 = *v99;
                    v98 = (void **)v99;
                    if (!*v99)
                      goto LABEL_125;
                  }
                  if ((sub_22E4634B4(v100, (uint64_t)&v133) & 0x80000000) == 0)
                    break;
                  v98 = (void **)(v99 + 1);
                  v97 = v99[1];
                  if (!v97)
                    goto LABEL_125;
                }
                v106 = *v98;
                if (*v98)
                {
                  v107 = 0;
                }
                else
                {
LABEL_125:
                  v106 = operator new(0x38uLL);
                  v108 = (llvm::APInt *)(v106 + 8);
                  v109 = DWORD2(v133);
                  v106[10] = DWORD2(v133);
                  if (v109 > 0x40)
                    llvm::APInt::initSlowCase(v108, (const llvm::APInt *)&v133);
                  else
                    *(_QWORD *)v108 = v133;
                  *((_BYTE *)v106 + 44) = BYTE12(v133);
                  v106[12] = v134[0];
                  *(_QWORD *)v106 = 0;
                  *((_QWORD *)v106 + 1) = 0;
                  *((_QWORD *)v106 + 2) = v99;
                  *v98 = v106;
                  v110 = (uint64_t *)v106;
                  if (*(_QWORD *)v122)
                  {
                    v122 = *(_QWORD *)v122;
                    v110 = (uint64_t *)*v98;
                  }
                  sub_22E49FD00(v123, v110);
                  ++v124;
                  v107 = 1;
                }
                if (DWORD2(v133) >= 0x41 && (_QWORD)v133)
                  MEMORY[0x2348A0E84](v133, 0x1000C8000313F17);
                if ((v107 & 1) == 0)
                {
                  sub_22E8FCA40(a1, v95, 0x1A89u, 0, (uint64_t)&v133);
                  sub_22E903BEC((unsigned int *)&v133);
                  sub_22E8FCA40(a1, v106[12], 0x16E9u, 0, (uint64_t)v127);
                  sub_22E903BEC((unsigned int *)v127);
                }
              }
              if (v129 >= 2)
                sub_22EF53BC0(&v129);
            }
          }
          ++v89;
        }
        while (v89 != v88);
        v115 = v123;
        v116 = (llvm *)v125[0];
        v117 = 24 * v126;
      }
      else
      {
        v116 = 0;
        v117 = 0;
        v115 = 0;
      }
      sub_22EC34868(v115);
      llvm::deallocate_buffer(v116, (void *)v117);
    }
    return sub_22EBCC6C0((uint64_t)a1, v86);
  }
  if (!(sub_22F2ABF98((_DWORD *)(v54 + 400)) ^ 1 | v62))
    v62 = a4 == 0;
  if (!a4)
    goto LABEL_101;
LABEL_78:
  v120 = 0;
  v63 = a3 + 8;
  v8 = 1;
  while (1)
  {
    v64 = sub_22EC292A0();
    if ((v64 & 1) != 0)
      return v8;
    v69 = sub_22EC292A0();
    if ((v69 & 1) != 0)
      return v8;
    v70 = v64 & 0xFFFFFFFFFFFFFFFELL;
    *(_QWORD *)(v63 - 8) = v64 & 0xFFFFFFFFFFFFFFFELL;
    *(_QWORD *)v63 = v69 & 0xFFFFFFFFFFFFFFFELL;
    if ((v62 & 1) != 0)
    {
      v71 = 0;
      if (sub_22EFFFBEC(v70, a1[11], 0, 0, v65, v66, v67, v68))
        v71 = *sub_22EFFEB40(*(unsigned __int8 **)(v63 - 8)) == 204;
    }
    else
    {
      v71 = 0;
    }
    v72 = *(_QWORD *)v63;
    v62 = (*sub_22EFFEB40(*(unsigned __int8 **)v63) + 55) <= 3u
       && v71
       && sub_22EFFFBEC(v72, a1[11], 0, 0, v73, v74, v75, v76);
    v78 = *(_DWORD *)(v63 + 8);
    if (v78)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v63 - 8) + 1) & 0x20) == 0 && (*(_BYTE *)(*(_QWORD *)v63 + 1) & 0x20) == 0)
      {
        sub_22E8FCA40(a1, v78, 0x1191u, 0, (uint64_t)&v133);
        sub_22F0D5A50(*(_QWORD *)(v63 - 8));
        v80 = v79;
        sub_22F0D60E4(*(_QWORD *)v63);
        v127[0] = __PAIR64__(v81, v80);
        sub_22E8906A0((uint64_t)&v133, v127);
        goto LABEL_19;
      }
      v120 = 1;
    }
    v63 += 32;
    v59 -= 32;
    if (!v59)
      goto LABEL_102;
  }
}

uint64_t sub_22EC2A5E0(uint64_t a1, unsigned int a2, uint64_t *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  void *v17;
  int v18;
  void **v19;
  uint64_t v20;
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *a3;
  v8 = v24;
  v9 = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(v9 + 16) & 0x400) != 0)
  {
    v13 = *(_QWORD *)(a1 + 88);
    v14 = *(_QWORD *)(v13 + 16832);
LABEL_16:
    v11 = sub_22E3CD3D4(v13 + 2032, 32, 3);
    sub_22F3351F0(v11, v14, (uint64_t)a3, a2, a4);
    return v11;
  }
  if ((*(_DWORD *)(v9 + 16) & 0xFEu) - 6 > 0xFFFFFFFB)
    goto LABEL_10;
  v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if ((v10 & 0xFEu) - 2 <= 3)
  {
    if (sub_22F10CF48(v9))
      goto LABEL_10;
    v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16);
  }
  if ((v10 & 0xFF800FF) == 0x528000B
    || (v21 = (void *)*a3,
        v22 = a3 + 1,
        v17 = &unk_24FAB84D8,
        v18 = 3592,
        v19 = &v21,
        v11 = 1,
        (sub_22EE8B0B0(a1, a2, v24) & 1) == 0))
  {
LABEL_10:
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v20 = 0;
    v15 = *(_QWORD *)(a1 + 88);
    LODWORD(v17) = 7;
    sub_22EF6B358(v15, v8);
    if (v23 >= 0)
      v16 = SHIBYTE(v23) & 0x7F;
    else
      v16 = (int)v22;
    v14 = sub_22EF7411C(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16408), v16);
    if (SHIBYTE(v23) < 0)
      operator delete(v21);
    v13 = *(_QWORD *)(a1 + 88);
    goto LABEL_16;
  }
  return v11;
}

uint64_t sub_22EC2A7D0(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5, uint64_t a6, int a7)
{
  uint64_t v8;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  size_t v24;
  __int128 *p_dst;
  unint64_t *v26;
  char v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;
  _QWORD *v33;
  char v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unsigned int v54;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  void *v63[2];
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  __int128 __p;
  unint64_t v70;
  char v71;
  _OWORD v72[6];
  uint64_t v73;
  uint64_t v74;
  __int128 __dst;
  unint64_t v76;

  v8 = a6;
  v74 = a2;
  v13 = a5 | ((unint64_t)a6 << 32);
  v14 = sub_22EAFB888(a1, a2, v13, 0, 1);
  if (!v14)
  {
    v14 = sub_22EAFB888(a1, a2, v13, 0, 0);
    if (!v14)
    {
      v15 = sub_22EAFBA08(a1, a2, 0);
      if (!v15)
      {
        sub_22E8FCA40((_QWORD *)a1, a4, 0x1BA3u, 0, (uint64_t)v72);
        sub_22E894538((uint64_t)v72, &v74);
LABEL_65:
        sub_22E903BEC((unsigned int *)v72);
        goto LABEL_66;
      }
      v73 = *(_QWORD *)(v15 + 40);
      sub_22E8FCA40((_QWORD *)a1, a4, 0x1BA4u, 0, (uint64_t)v72);
      v21 = sub_22E894538((uint64_t)v72, &v74);
      v22 = sub_22E894538(v21, &v73);
      sub_22F1D3A38(&v73, (char *)v63);
      if (v64 >= 0)
        v23 = v63;
      else
        v23 = (void **)v63[0];
      if (v64 >= 0)
        v24 = v64 & 0x7F;
      else
        v24 = (size_t)v63[1];
      v67 = 0;
      v68 = 0;
      v71 = 0;
      v65 = ((v8 << 32) - 0x100000000) | (a5 + 1);
      v66 = 1;
      if (v24 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v24 >= 0x17)
      {
        v43 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v24 | 7) != 0x17)
          v43 = v24 | 7;
        v44 = v43 + 1;
        p_dst = (__int128 *)operator new(v43 + 1);
        *((_QWORD *)&__dst + 1) = v24;
        v76 = v44 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v76) = v24;
        p_dst = &__dst;
        if (!v24)
          goto LABEL_61;
      }
      memmove(p_dst, v23, v24);
LABEL_61:
      *((_BYTE *)p_dst + v24) = 0;
      __p = __dst;
      v70 = v76;
      sub_22E890748(v22, &v65);
      if (SHIBYTE(v70) < 0)
        operator delete((void *)__p);
      if (v64 < 0)
        operator delete(v63[0]);
      goto LABEL_65;
    }
  }
  v60 = a3;
  v61 = v8;
  v16 = a3;
  if (a7
    && sub_22F1CF68C(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 32), 0x1A65u, 0, *(_QWORD *)(a1 + 104)) != 1)
  {
    v17 = *(_QWORD *)(a1 + 8560);
    v18 = *(unsigned int *)(a1 + 8576);
    v19 = (unint64_t *)(v17 + 40 * v18);
    if (*(_DWORD *)(a1 + 8568))
    {
      if ((_DWORD)v18)
      {
        v56 = 40 * v18;
        v20 = *(unint64_t **)(a1 + 8560);
        while (*v20 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v20 += 5;
          v56 -= 40;
          if (!v56)
            goto LABEL_8;
        }
      }
      else
      {
        v20 = *(unint64_t **)(a1 + 8560);
      }
    }
    else
    {
LABEL_8:
      v20 = (unint64_t *)(v17 + 40 * v18);
    }
    v26 = (unint64_t *)(v17 + 40 * v18);
    while (v20 != v26)
    {
      v27 = sub_22EC348C8((_QWORD *)a1, v16, a5, v61, v14, v20[2]);
      if ((sub_22EC348C8((_QWORD *)a1, v16, a5, v61, v14, v20[4]) & 1) != 0 || (v27 & 1) != 0)
        break;
      v28 = v20 + 5;
      while (v28 != v19)
      {
        v29 = *v28;
        v28 += 5;
        if (v29 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v20 = v28 - 5;
          goto LABEL_29;
        }
      }
      v20 = v19;
LABEL_29:
      ;
    }
  }
  v65 = a2;
  *(_QWORD *)&v72[0] = 0;
  if (!sub_22F2BB328((uint64_t *)(a1 + 8560), &v65, v72))
    goto LABEL_51;
  v30 = *(_QWORD *)&v72[0];
  if (*(_QWORD *)&v72[0] == *(_QWORD *)(a1 + 8560) + 40 * *(unsigned int *)(a1 + 8576))
    goto LABEL_51;
  v31 = 0;
  v32 = 0;
  v33 = (_QWORD *)(*(_QWORD *)&v72[0] + 8);
  v34 = 1;
  do
  {
    v35 = *v33 & 0xFFFFFFFFFFFFFFF8;
    if (v35)
    {
      if (sub_22EFDBD9C(*v33 & 0xFFFFFFFFFFFFFFF8))
      {
        v32 = 1;
        v31 = (_QWORD *)v35;
      }
      else
      {
        v34 = 0;
      }
    }
    v33 = (_QWORD *)(v33[1] & 0xFFFFFFFFFFFFFFF8);
  }
  while (v33);
  v36 = (_QWORD *)(v30 + 24);
  do
  {
    v37 = *v36 & 0xFFFFFFFFFFFFFFF8;
    if (v37)
    {
      if (sub_22EFDBD9C(*v36 & 0xFFFFFFFFFFFFFFF8))
      {
        v32 = 1;
        v33 = (_QWORD *)v37;
      }
      else
      {
        v34 = 0;
      }
    }
    v36 = (_QWORD *)(v36[1] & 0xFFFFFFFFFFFFFFF8);
  }
  while (v36);
  v38 = v31 ? v31 : v33;
  if (v34)
  {
LABEL_51:
    sub_22E8FCA40((_QWORD *)a1, v16, 0xCC4u, 0, (uint64_t)v72);
    v65 = *(_QWORD *)(v14 + 40);
    sub_22E894538((uint64_t)v72, &v65);
    sub_22E903BEC((unsigned int *)v72);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v14 + 24), 0x15BAu, 0, (uint64_t)v72);
    v41 = *(_QWORD *)(v14 + 40);
    goto LABEL_52;
  }
  if (v32)
  {
    v39 = v74;
    *(_QWORD *)&v72[0] = v74;
    v40 = sub_22E90328C(a1);
    if (!v40)
    {
LABEL_50:
      sub_22E8FCA40((_QWORD *)a1, v16, 0x1B5Au, 0, (uint64_t)v72);
      sub_22E894538((uint64_t)v72, &v74);
      sub_22E903BEC((unsigned int *)v72);
      sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v38 + 6), 0x15BAu, 0, (uint64_t)v72);
      v41 = v38[5];
LABEL_52:
      v65 = v41;
      sub_22E894538((uint64_t)v72, &v65);
      sub_22E903BEC((unsigned int *)v72);
      goto LABEL_53;
    }
    v57 = sub_22EFDC9F0(v40);
    v58 = sub_22EFDBA90(v57, v39, 1, 0, 1, 0);
    if (v58)
    {
      v59 = v58;
    }
    else
    {
      v59 = sub_22F3B4D74(v57, (uint64_t *)v72, 1);
      if (!v59)
      {
        v59 = sub_22EFDBA90(v57, v39, 0, 0, 1, 0);
        if (!v59)
        {
          v59 = sub_22F3B4D74(v57, (uint64_t *)v72, 0);
          if (!v59)
            goto LABEL_50;
        }
      }
    }
    if (!sub_22EFDBD9C(v59))
      goto LABEL_53;
    sub_22E8FCA40((_QWORD *)a1, v16, 0x1AE8u, 0, (uint64_t)v72);
    sub_22E894538((uint64_t)v72, &v74);
    sub_22E903BEC((unsigned int *)v72);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v59 + 24), 0x15BAu, 0, (uint64_t)v72);
    v41 = *(_QWORD *)(v59 + 40);
    goto LABEL_52;
  }
LABEL_53:
  a3 = v60;
  LODWORD(v8) = v61;
  if ((*(_QWORD *)(v14 + 56) & 0x3000000) != 0x2000000)
  {
    v42 = sub_22F1E361C(*(_QWORD **)(a1 + 112), *(_DWORD *)(v14 + 24));
    if (v42 == 3 || !v42)
    {
      *(_QWORD *)&v72[0] = v74;
      *((_QWORD *)&v72[0] + 1) = v16;
      sub_22F33433C(a1 + 8584, v72);
    }
  }
LABEL_66:
  if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 2) != 0)
  {
    v45 = sub_22F41F330(v74);
    if (v45 <= 0xB && ((1 << v45) & 0xEC0) != 0)
    {
      sub_22E8FCA40((_QWORD *)a1, a3, 0xA64u, 0, (uint64_t)v72);
      v46 = sub_22E894538((uint64_t)v72, &v74);
      v65 = __PAIR64__(v8, a5);
      sub_22E8906A0(v46, &v65);
      sub_22E903BEC((unsigned int *)v72);
    }
  }
  v47 = *(_QWORD *)(a1 + 88);
  v48 = sub_22F36E228(v47);
  v49 = *(_QWORD *)(v48 + 48);
  if (v49)
    v50 = v49 & 0xFFFFFFFFFFFFFFF0;
  else
    v50 = sub_22EF6462C(v47, v48);
  v51 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 32, 3);
  v52 = v74;
  *(_BYTE *)v51 = -49;
  if (byte_255E04EB3)
  {
    v53 = sub_22F0D3748(207);
    ++*((_DWORD *)v53 + 2);
  }
  v54 = *(_DWORD *)v51 & 0xFFFC00FF;
  *(_QWORD *)(v51 + 8) = v50;
  *(_QWORD *)(v51 + 16) = v52;
  *(_DWORD *)(v51 + 24) = a3;
  *(_DWORD *)(v51 + 28) = v8;
  *(_DWORD *)v51 = v54;
  return v51;
}

unint64_t sub_22EC2AEBC(uint64_t a1, int a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_22E903070(a1, 0);
  v5 = 0;
  if (v4 && (*(_WORD *)(v4 + 8) & 0x7F) == 0x18)
  {
    v5 = v4 - 48;
    sub_22F32FC30(a1, *(_QWORD *)(v4 + 72), a2, 0, 0);
  }
  return v5;
}

unsigned int *sub_22EC2AF28(unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15[24];
  unint64_t v16;

  v2 = *((_QWORD *)result + 27);
  if (v2)
    v3 = (*(_WORD *)(v2 + 8) & 0x7F) == 24;
  else
    v3 = 0;
  if (v3
    && (*(_BYTE *)(v2 + 12) & 2) != 0
    && *(_QWORD *)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v2 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
  {
    v4 = result;
    v5 = *((_QWORD *)result + 11);
    v6 = sub_22F36E044(v5);
    v7 = *(_QWORD *)(v6 + 48);
    if (v7)
      v8 = v7 & 0xFFFFFFFFFFFFFFF0;
    else
      v8 = sub_22EF6462C(v5, v6);
    v9 = sub_22EC2B078(v2 - 48, v8);
    if (v9)
    {
      v11 = v9;
      v12 = sub_22F3B5740(v9);
      v16 = v12;
      if (!(_DWORD)v12)
        LODWORD(v12) = *(_DWORD *)(v11 + 24);
      sub_22E8FCA40(v4, v12, 0x17B0u, 0, (uint64_t)v15);
      v14 = 1;
      v13 = sub_22E8900C4((uint64_t)v15, &v14);
      sub_22E8906A0(v13, (uint64_t *)&v16);
    }
    else
    {
      result = (unsigned int *)sub_22EFDBF50(v2 - 48);
      LODWORD(v16) = (_DWORD)result;
      if (!(_DWORD)result)
        return result;
      sub_22E8FCA40(v4, *(_DWORD *)(v2 - 24), 0x17B1u, 0, (uint64_t)v15);
      v14 = 1;
      v10 = sub_22E8900C4((uint64_t)v15, &v14);
      sub_22E8900C4(v10, (int *)&v16);
    }
    return sub_22E903BEC(v15);
  }
  return result;
}

unint64_t sub_22EC2B078(unint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x24BDAC8D0];
  while (1)
  {
    v3 = a1;
    if (*(_QWORD *)(a1 + 80) == a2)
      return v3;
    v4 = *(_QWORD *)(a1 + 16);
    v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 4) != 0)
      v5 = *(_QWORD *)v5;
    if (v5)
      v6 = (*(_WORD *)(v5 + 8) & 0x7E) == 20;
    else
      v6 = 0;
    if (v6)
    {
      v7 = (*(_DWORD *)(v5 - 20) & 0x7F) == 0x14 ? sub_22F3B55B8(v5 - 48) : *(_QWORD *)(v5 + 40);
      a1 = sub_22EFDA1A0(v7, *(_QWORD *)(v3 + 40), (*(_QWORD *)(v3 + 56) >> 17) & 1, 0);
      if (a1)
        continue;
    }
    v12 = v14;
    v13 = 0x400000000;
    sub_22EFDCAAC(v3, (uint64_t)&v12);
    if ((_DWORD)v13)
    {
      v8 = 0;
      v9 = 8 * v13;
      while (1)
      {
        v10 = sub_22EC2B078(*(_QWORD *)((char *)v12 + v8), a2);
        if (v10)
          break;
        v8 += 8;
        if (v9 == v8)
          goto LABEL_19;
      }
      v3 = v10;
    }
    else
    {
LABEL_19:
      v3 = 0;
    }
    if (v12 != v14)
      free(v12);
    return v3;
  }
}

uint64_t sub_22EC2B1BC(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unsigned int v17[24];

  result = (uint64_t)sub_22EFFA6B0(a2);
  if (*(unsigned __int8 *)result != 200)
    return result;
  v4 = result;
  if ((*(_BYTE *)(result + 27) & 1) == 0)
    return result;
  v5 = *(_QWORD *)(result + 16);
  if (!v5 || (*(_BYTE *)(v5 + 60) & 2) == 0)
    return result;
  v6 = (uint64_t *)(*(_QWORD *)(v5 + 80) & 0xFFFFFFFFFFFFFFF0);
  result = *v6;
  if (*v6)
  {
    v7 = *(_DWORD *)(result + 16);
    if ((v7 & 0xFE) == 0x28)
      goto LABEL_16;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    result = sub_22F10CF48(result);
    if (result)
    {
      v7 = *(_DWORD *)(result + 16);
LABEL_16:
      if ((v7 & 0x100000) != 0)
      {
        do
        {
          result = *(_QWORD *)(*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0);
          if (result)
          {
            v13 = *(_DWORD *)(result + 16);
            if ((v13 & 0xFE) == 0x28)
              continue;
          }
          result = sub_22F10CF48(result);
          v13 = *(_DWORD *)(result + 16);
        }
        while ((v13 & 0x100000) != 0);
      }
      v6 = (uint64_t *)(*(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFF0);
    }
  }
  if (*(_QWORD *)(v6[1] & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                          + 8) & 0xFFFFFFFFFFFFFFF0))
  {
    v8 = *(_QWORD *)(v5 + 80);
    v9 = a1[11];
    v10 = sub_22F36E044(v9);
    result = *(_QWORD *)(v10 + 48);
    if (!result)
      result = sub_22EF6462C(v9, v10);
    if (*(_QWORD *)(*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((result & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
    {
      sub_22E8FCA40(a1, *(_DWORD *)(v5 + 24), 0x17B2u, 0, (uint64_t)v17);
      v16 = (*(_DWORD *)(v5 + 56) & 0x20000) != 0;
      v11 = sub_22E894E38((uint64_t)v17, (unsigned __int8 *)&v16);
      v15 = *(_QWORD *)(v5 + 40);
      v12 = sub_22E894538(v11, &v15);
      v14 = *(_QWORD *)(v4 + 8);
      sub_22E8901B8(v12, &v14);
      return (uint64_t)sub_22E903BEC(v17);
    }
  }
  return result;
}

uint64_t sub_22EC2B378(uint64_t *a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 **a4, unint64_t a5, uint64_t a6, unsigned int *a7, uint64_t a8, _QWORD *a9, unsigned __int8 a10, char a11, int a12, unsigned int a13, unint64_t a14, unint64_t *a15, _DWORD *a16)
{
  int v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  size_t v42;
  __int128 *p_dst;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _DWORD *v51;
  unint64_t *v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  const void *v62;
  size_t v63;
  __int128 *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  BOOL v81;
  uint64_t k;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  unsigned int v97;
  unint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 *v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  BOOL v121;
  int v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t j;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t i;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t m;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  int v151;
  uint64_t v152;
  int v153;
  unsigned int v155;
  int v156;
  unsigned int v157[24];
  void *v158;
  size_t v159;
  char v160;
  _BYTE v161[20];
  char v162;
  __int128 __p;
  unint64_t v164;
  char v165;
  void *v166;
  __int128 v167;
  int v168;
  uint64_t v169;
  unsigned __int8 v170;
  uint64_t v171;
  __int128 __dst;
  unint64_t v173;

  v23 = a10;
  v171 = a6;
  v170 = a10;
  if (a8 && *a7)
    a13 = *a7;
  if (!a9)
  {
    v25 = a5;
    if ((_DWORD)a5)
    {
      do
      {
        if (((*a4)[1] & 0x80) == 0)
        {
          if ((*(_QWORD *)(a1[9] + 140) & 0x20000000000000) != 0)
          {
            v26 = sub_22EB32EC0((uint64_t)a1, a13, *a4, (unint64_t *)&v166);
            if ((v26 & 1) != 0)
              goto LABEL_157;
          }
          else
          {
            v26 = sub_22EB1BB84((uint64_t)a1, *a4);
            if ((v26 & 1) != 0)
              goto LABEL_157;
          }
          *a4 = (unsigned __int8 *)(v26 & 0xFFFFFFFFFFFFFFFELL);
        }
        ++a4;
        --v25;
      }
      while (v25);
      v23 = v170;
    }
    v27 = a1[9];
    v28 = *(_WORD *)(v27 + 148);
    v29 = *(_QWORD *)(v27 + 140);
    if (v23)
      v30 = 6345;
    else
      v30 = 6685;
    if ((v28 & 2) != 0)
      v31 = 2666;
    else
      v31 = v30;
    if ((v29 & 0x20000000000000) != 0)
      goto LABEL_45;
    v32 = sub_22EAFBA08((uint64_t)a1, v171, a3);
    if (!v32 || (*(_BYTE *)(v32 + 28) & 0x80) != 0)
    {
      sub_22E8FCA40(a1, a13, v31, 0, (uint64_t)&v166);
      v44 = sub_22E894538((uint64_t)&v166, &v171);
      v45 = sub_22E894E38(v44, &v170);
      v46 = a7[a8 - 1];
      *(_DWORD *)v161 = *a7;
      *(_DWORD *)&v161[4] = v46;
      sub_22E8906A0(v45, (uint64_t *)v161);
      goto LABEL_41;
    }
    if (v23)
      v33 = 6346;
    else
      v33 = 6686;
    if ((*(_WORD *)(a1[9] + 148) & 2) != 0)
      v34 = 3907;
    else
      v34 = v33;
    v169 = *(_QWORD *)(v32 + 40);
    if ((v169 & 7) != 1)
    {
      sub_22E8FCA40(a1, a13, v34, 0, (uint64_t)&v166);
      v56 = sub_22E894538((uint64_t)&v166, &v171);
      v57 = sub_22E894E38(v56, &v170);
      sub_22E894538(v57, &v169);
      goto LABEL_41;
    }
    v35 = *a7;
    v36 = a7[a8 - 1];
    sub_22E8FCA40(a1, a13, v34, 0, (uint64_t)&v166);
    v37 = sub_22E894538((uint64_t)&v166, &v171);
    v38 = sub_22E894E38(v37, &v170);
    v39 = sub_22E894538(v38, &v169);
    v40 = v35 | (v36 << 32);
    sub_22F1D3A38(&v169, (char *)&v158);
    if (v160 >= 0)
      v41 = &v158;
    else
      v41 = v158;
    if (v160 >= 0)
      v42 = v160 & 0x7F;
    else
      v42 = v159;
    *(_QWORD *)&v161[12] = 0;
    v162 = 0;
    v165 = 0;
    *(_QWORD *)v161 = v40;
    v161[8] = 1;
    if (v42 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_201;
    if (v42 >= 0x17)
    {
      v84 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v42 | 7) != 0x17)
        v84 = v42 | 7;
      v85 = v84 + 1;
      p_dst = (__int128 *)operator new(v84 + 1);
      *((_QWORD *)&__dst + 1) = v42;
      v173 = v85 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v173) = v42;
      p_dst = &__dst;
      if (!v42)
        goto LABEL_97;
    }
    memmove(p_dst, v41, v42);
LABEL_97:
    *((_BYTE *)p_dst + v42) = 0;
    __p = __dst;
    v164 = v173;
    sub_22E890748(v39, v161);
    if (SHIBYTE(v164) < 0)
      operator delete((void *)__p);
    if (v160 < 0)
      operator delete(v158);
LABEL_41:
    sub_22E903BEC((unsigned int *)&v166);
    v47 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
    if ((!v47 || *(_BYTE *)(v47 + 16) != 32)
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32
       || (v47 = sub_22F10CF48(v47)) == 0)
      || (v60 = sub_22F31179C(v47)) == 0
      || (v61 = v60,
          sub_22E8FCA40(a1, *(_DWORD *)(v60 + 24), 0x17A5u, 0, (uint64_t)v157),
          sub_22E903BEC(v157),
          !HIDWORD(a14))
      || !(_DWORD)a14
      || !sub_22EFDBA90(v61, v171, 0, 0, 1, 0))
    {
LABEL_45:
      v48 = *(_QWORD *)(a1[9] + 140);
      v49 = a1[11];
      if ((v48 & 0x20000000000000) != 0)
      {
        v50 = *(_QWORD *)(v49 + 16856);
        v52 = a15;
        v51 = a16;
      }
      else
      {
        v58 = sub_22F36E1B8(v49);
        v59 = *(_QWORD *)(v58 + 48);
        v52 = a15;
        v51 = a16;
        if (v59)
          v50 = v59 & 0xFFFFFFFFFFFFFFF0;
        else
          v50 = sub_22EF6462C(v49, v58);
      }
      v53 = 0;
      *v52 = v50;
      *v51 = 0;
      return v53 & 1;
    }
    sub_22E8FCA40(a1, a14, 0x17A6u, 0, (uint64_t)&v166);
    sub_22EFC683C((uint64_t *)(v61 + 40), &v158);
    if (v160 >= 0)
      v62 = &v158;
    else
      v62 = v158;
    if (v160 >= 0)
      v63 = v160 & 0x7F;
    else
      v63 = v159;
    *(_QWORD *)&v161[12] = 0;
    v162 = 0;
    v165 = 0;
    *(_QWORD *)v161 = a14;
    v161[8] = 1;
    if (v63 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v63 >= 0x17)
      {
        v128 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v63 | 7) != 0x17)
          v128 = v63 | 7;
        v129 = v128 + 1;
        v64 = (__int128 *)operator new(v128 + 1);
        *((_QWORD *)&__dst + 1) = v63;
        v173 = v129 | 0x8000000000000000;
        *(_QWORD *)&__dst = v64;
      }
      else
      {
        HIBYTE(v173) = v63;
        v64 = &__dst;
        if (!v63)
          goto LABEL_180;
      }
      memmove(v64, v62, v63);
LABEL_180:
      *((_BYTE *)v64 + v63) = 0;
      __p = __dst;
      v164 = v173;
      sub_22E890748((uint64_t)&v166, v161);
      if (SHIBYTE(v164) < 0)
        operator delete((void *)__p);
      if (v160 < 0)
        operator delete(v158);
      sub_22E903BEC((unsigned int *)&v166);
      goto LABEL_45;
    }
LABEL_201:
    abort();
  }
  v54 = a9[7];
  if ((v54 & 0x200000000) == 0)
  {
    sub_22F3B57F0((unint64_t)a9, a3);
LABEL_70:
    v67 = v55;
    goto LABEL_71;
  }
  v65 = a1[11];
  if ((v54 & 0x20000) != 0 && a10)
  {
LABEL_69:
    sub_22F3B57F0((unint64_t)a9, a3);
    v55 = sub_22EC34AE8(v65, v66);
    goto LABEL_70;
  }
  if (a11 && (v86 = sub_22E90328C((uint64_t)a1)) != 0 && (v87 = (uint64_t *)sub_22EFDC9F0(v86)) != 0)
  {
    v133 = sub_22F36D148(v65, v87, 0);
    v67 = sub_22F36CC4C(v65, v133);
    v166 = (void *)v67;
    sub_22F3B57F0((unint64_t)a9, a3);
    for (i = *(_QWORD *)(v134 & 0xFFFFFFFFFFFFFFF0); ; i = *(_QWORD *)(v147 + 40))
    {
      v147 = sub_22F10D774(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0));
      if (!v147)
        break;
      v153 = *(_DWORD *)(v147 + 16) >> 19;
      if ((v153 - 33) < 4)
      {
LABEL_216:
        sub_22F114F34(&v166);
        v148 = (uint64_t)v166;
        v149 = v65;
        v150 = v153;
        goto LABEL_217;
      }
    }
  }
  else
  {
    v88 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
    if (sub_22F409FB0(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0)))
    {
      v67 = sub_22F36CC4C(v65, a3);
      v166 = (void *)v67;
      sub_22F3B57F0((unint64_t)a9, a3);
      for (j = *(_QWORD *)(v125 & 0xFFFFFFFFFFFFFFF0); ; j = *(_QWORD *)(v146 + 40))
      {
        v146 = sub_22F10D774(*(_QWORD *)(j & 0xFFFFFFFFFFFFFFF0));
        if (!v146)
          break;
        v153 = *(_DWORD *)(v146 + 16) >> 19;
        if ((v153 - 33) < 4)
          goto LABEL_216;
      }
    }
    else
    {
      v89 = *v88;
      if ((*v88 && *(_BYTE *)(v89 + 16) == 32
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v89 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
         && (v89 = sub_22F10CF48(v89)) != 0)
        && sub_22E509ED0(v89))
      {
        goto LABEL_69;
      }
      if (((v127 = *v88) != 0 && *(_BYTE *)(v127 + 16) == 32
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v127 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
         && (v127 = sub_22F10CF48(v127)) != 0)
        && sub_22E509F54(v127))
      {
        goto LABEL_69;
      }
      v166 = (void *)a3;
      sub_22F3B57F0((unint64_t)a9, a3);
      v131 = sub_22F10D774(*(_QWORD *)(*(_QWORD *)(v130 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0));
      v67 = a3;
      if (v131)
      {
        while (1)
        {
          v132 = *(_DWORD *)(v131 + 16) >> 19;
          if ((v132 - 33) < 4)
            break;
          v131 = sub_22F10D774(*(_QWORD *)(*(_QWORD *)(v131 + 40) & 0xFFFFFFFFFFFFFFF0));
          if (!v131)
          {
            v67 = a3;
            goto LABEL_71;
          }
        }
        sub_22F114F34(&v166);
        v148 = (uint64_t)v166;
        v149 = v65;
        v150 = v132;
LABEL_217:
        v55 = sub_22F369798(v149, v150, v148, v148);
        goto LABEL_70;
      }
    }
  }
LABEL_71:
  if (!a10)
  {
    sub_22F114E70(*(_QWORD *)(v67 & 0xFFFFFFFFFFFFFFF0));
    if (v74)
    {
      v75 = sub_22F10D774(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0));
      if (v75)
      {
        while (1)
        {
          v144 = (*(_DWORD *)(v75 + 16) >> 19) - 33;
          if (v144 < 4)
            break;
          v75 = sub_22F10D774(*(_QWORD *)(*(_QWORD *)(v75 + 40) & 0xFFFFFFFFFFFFFFF0));
          v76 = 0;
          if (!v75)
            goto LABEL_80;
        }
        v76 = qword_22F4835F8[v144];
      }
      else
      {
        v76 = 0;
      }
LABEL_80:
      v77 = sub_22F10D774(*(_QWORD *)(*(_QWORD *)(v67 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0));
      if (v77)
      {
        while (1)
        {
          v145 = (*(_DWORD *)(v77 + 16) >> 19) - 33;
          if (v145 < 4)
            break;
          v77 = sub_22F10D774(*(_QWORD *)(*(_QWORD *)(v77 + 40) & 0xFFFFFFFFFFFFFFF0));
          v78 = 0;
          if (!v77)
            goto LABEL_82;
        }
        v78 = dword_22F483360[v145];
      }
      else
      {
        v78 = 0;
      }
LABEL_82:
      v79 = byte_22F4835BC[4 * v76 + v78];
      if (v78 != v79)
      {
LABEL_83:
        v80 = *(_QWORD *)(v67 & 0xFFFFFFFFFFFFFFF0);
        if (v80)
          v81 = *(_BYTE *)(v80 + 16) == 7;
        else
          v81 = 0;
        if (v81)
          v67 = *(_QWORD *)(v80 + 32);
        else
          v67 = sub_22F40989C(v67, a1[11]);
        for (k = *(_QWORD *)(v67 & 0xFFFFFFFFFFFFFFF0); ; k = *(_QWORD *)(v83 + 40))
        {
          v83 = sub_22F10D774(*(_QWORD *)(k & 0xFFFFFFFFFFFFFFF0));
          if (!v83)
            break;
          if (((*(_DWORD *)(v83 + 16) >> 19) - 37) > 0xFFFFFFFB)
            goto LABEL_83;
        }
        if (v79)
          v67 = sub_22F369798(a1[11], dword_22F46A4D0[(char)(v79 - 1)], v67, v67);
      }
    }
    goto LABEL_112;
  }
  v68 = a5;
  if (a2 && (*(_QWORD *)(a1[9] + 232) & 0x1000000000) == 0 && sub_22F00175C(a2))
  {
    sub_22F3B57F0((unint64_t)a9, a3);
    v166 = v69;
    sub_22F114F34(&v166);
    v70 = a1[11];
    v71 = sub_22F36E044(v70);
    v72 = *(_QWORD *)(v71 + 48);
    v73 = v72 ? v72 & 0xFFFFFFFFFFFFFFF0 : sub_22EF6462C(v70, v71);
    if (v166 == (void *)v73)
    {
      v136 = *(_QWORD *)(*((_QWORD *)sub_22EFFA6B0(a2) + 2) + 16);
      v137 = (_QWORD *)(v136 & 0xFFFFFFFFFFFFFFF8);
      if ((v136 & 4) != 0)
        v137 = (_QWORD *)*v137;
      if (v137)
        v138 = (uint64_t)(v137 - 6);
      else
        v138 = 0;
      v139 = a1[11];
      v140 = (uint64_t *)sub_22EFDC9F0(v138);
      v141 = sub_22F36D148(v139, v140, 0);
      v142 = sub_22F36CC4C(v139, v141);
      for (m = *(_QWORD *)(v67 & 0xFFFFFFFFFFFFFFF0); ; m = *(_QWORD *)(v152 + 40))
      {
        v152 = sub_22F10D774(*(_QWORD *)(m & 0xFFFFFFFFFFFFFFF0));
        if (!v152)
          break;
        v151 = *(_DWORD *)(v152 + 16) >> 19;
        if ((v151 - 33) < 4)
        {
          v142 = sub_22F369798(a1[11], v151, v142, v142);
          break;
        }
      }
      v67 = v142;
LABEL_112:
      v68 = a5;
    }
  }
  *a15 = v67;
  *a16 = sub_22E8BBBD0(a9[10]);
  if ((a6 & 7u) >= 2)
  {
    if ((a6 & 7) == 2)
    {
      v90 = 1;
      LODWORD(v169) = 1;
      v91 = 1;
    }
    else
    {
      v90 = *(_DWORD *)(a6 & 0xFFFFFFFFFFFFFFF8) - 3;
      LODWORD(v169) = v90;
      v91 = *(_DWORD *)(a6 & 0xFFFFFFFFFFFFFFF8) - 3;
    }
  }
  else
  {
    v90 = 0;
    v91 = 0;
    LODWORD(v169) = 0;
  }
  v92 = *((_DWORD *)a9 + 26);
  if (v92 > v91)
  {
    LODWORD(v169) = *((_DWORD *)a9 + 26);
    v90 = v92;
  }
  if (v68 >= v90)
  {
    v95 = a9[2];
    v96 = (_QWORD *)(v95 & 0xFFFFFFFFFFFFFFF8);
    if ((v95 & 4) != 0)
      v96 = (_QWORD *)*v96;
    sub_22F10F4E4(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0), (unint64_t)v96, (uint64_t)v161);
    v97 = v169;
    if ((_DWORD)v169)
    {
      v98 = 0;
      v99 = 0;
      while (1)
      {
        if ((a4[v98][1] & 0x80) == 0)
        {
          *(_QWORD *)&__dst = a4[v98];
          v100 = *(_QWORD *)(a9[12] + 8 * v98);
          if (sub_22F24DBE4(v100))
          {
            v101 = __dst;
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v100 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16) == 10)
            {
              v102 = sub_22EFFF40C((unsigned __int8 *)__dst, a1[11]);
              if (*v102 == 114)
                *(_DWORD *)(*((_QWORD *)v102 + 2) + 48) |= 0x20000u;
            }
          }
          else
          {
            v101 = __dst;
          }
          v103 = *(_QWORD *)(*(_QWORD *)(v101 + 8) & 0xFFFFFFFFFFFFFFF0);
          if (v103)
            v104 = (*(_DWORD *)(v103 + 16) & 0xFF800FF) == 138936331;
          else
            v104 = 0;
          if (v104 && !sub_22F32DD04(v100))
            *(_QWORD *)&__dst = sub_22EC2C298(a1, (unsigned __int8 *)__dst);
          v105 = *(_QWORD *)(v100 + 48);
          if (v105 == *(_QWORD *)(a1[11] + 16856))
          {
            v166 = 0;
            v106 = sub_22EB32EC0((uint64_t)a1, a13, (unsigned __int8 *)__dst, (unint64_t *)&v166);
            if ((v106 & 1) != 0)
            {
              v99 = 1;
            }
            else
            {
              a4[v98] = (unsigned __int8 *)(v106 & 0xFFFFFFFFFFFFFFFELL);
              *(_QWORD *)(v100 + 48) = v166;
            }
          }
          else
          {
            if (v161[16])
            {
              v166 = (void *)a1[11];
              v167 = *(_OWORD *)v161;
              v168 = 2;
              sub_22F10E588((uint64_t)&v166, v105);
              v108 = v107;
            }
            else
            {
              v108 = *(_QWORD *)(v100 + 48);
            }
            sub_22F0D4E74(__dst);
            v166 = &unk_24FAB6ED0;
            LODWORD(v167) = 2989;
            *((_QWORD *)&v167 + 1) = &__dst;
            if (sub_22EE8B0B0((uint64_t)a1, v109, v108))
            {
LABEL_157:
              v53 = 1;
              return v53 & 1;
            }
            sub_22E99E5D4(a1[11], v100, v108, (uint64_t)&v166);
            v110 = sub_22EC45014(a1, &v166, 0, __dst, 0, 0);
            if ((v110 & 1) != 0)
            {
              v99 = 1;
            }
            else
            {
              v111 = v110 & 0xFFFFFFFFFFFFFFFELL;
              a4[v98] = (unsigned __int8 *)(v110 & 0xFFFFFFFFFFFFFFFELL);
              if (v161[16]
                && (*(_BYTE *)(v111 + 1) & 3) == 0
                && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v108 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 16) == 10
                && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v111 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 16) == 10
                && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v105 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 16) == 32)
              {
                v158 = (void *)(v110 & 0xFFFFFFFFFFFFFFFELL);
                sub_22F32D3A8((unsigned int *)a1, &v158);
                a4[v98] = (unsigned __int8 *)((unint64_t)v158 & 0xFFFFFFFFFFFFFFFELL);
              }
            }
          }
        }
        ++v98;
        v97 = v169;
        if (v98 >= v169)
        {
          v68 = a5;
          goto LABEL_159;
        }
      }
    }
    v99 = 0;
LABEL_159:
    if ((*((_BYTE *)a9 + 58) & 4) != 0)
    {
      v121 = v68 >= v97;
      v122 = v68 - v97;
      if (v122 != 0 && v121)
      {
        v123 = (uint64_t *)&a4[v97];
        do
        {
          if ((*(_BYTE *)(*v123 + 1) & 0x80) == 0)
          {
            v124 = sub_22F32D0F4((uint64_t)a1, *v123, 2, 0);
            v99 |= v124;
            *v123 = v124 & 0xFFFFFFFFFFFFFFFELL;
          }
          ++v123;
          --v122;
        }
        while (v122);
      }
    }
    else if (v68 != v97)
    {
      sub_22F0D5A50((uint64_t)a4[v97]);
      sub_22E8FCA40(a1, v113, 0x1343u, 0, (uint64_t)&v166);
      v156 = 2;
      v114 = sub_22E8900C4((uint64_t)&v166, &v156);
      v115 = sub_22E89519C(v114, (unsigned int *)&v169);
      v155 = v68;
      v116 = sub_22E89519C(v115, &v155);
      *(_QWORD *)&__dst = (*(uint64_t (**)(_QWORD *))(*a9 + 16))(a9);
      v117 = sub_22E8906A0(v116, (uint64_t *)&__dst);
      sub_22F0D5A50((uint64_t)a4[v169]);
      v119 = v118;
      sub_22F0D60E4((uint64_t)a4[v68 - 1]);
      v158 = (void *)__PAIR64__(v120, v119);
      sub_22E8906A0(v117, (uint64_t *)&v158);
      sub_22E903BEC((unsigned int *)&v166);
    }
    sub_22EB18D60((uint64_t)a1, (uint64_t)a9, a13, (uint64_t)a4, a5);
    v53 = v99 | sub_22F310D38(a1, a9, a13, (uint64_t)a4, a5);
  }
  else
  {
    sub_22E8FCA40(a1, a13, 0x133Du, 0, (uint64_t)&v166);
    *(_DWORD *)v161 = 2;
    v93 = sub_22E8900C4((uint64_t)&v166, (int *)v161);
    v94 = sub_22E89519C(v93, (unsigned int *)&v169);
    LODWORD(__dst) = v68;
    sub_22E89519C(v94, (unsigned int *)&__dst);
    sub_22E903BEC((unsigned int *)&v166);
    v53 = 0;
  }
  return v53 & 1;
}

uint64_t sub_22EC2C298(uint64_t *a1, unsigned __int8 *a2)
{
  int v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD v28[4];
  void *v29;
  uint64_t v30;
  _QWORD v31[5];

  v31[4] = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (v4 == 214)
  {
    v6 = (int *)sub_22EC2C298(a1, *((_QWORD *)a2 + 3));
    v5 = sub_22E3CD3D4(a1[11] + 2032, 32, 3);
    sub_22EB54C14(v5, *((_DWORD *)a2 + 4), *((_DWORD *)a2 + 5), v6);
    return v5;
  }
  if (v4 == 233)
  {
    v7 = sub_22EC2C298(a1, *((_QWORD *)a2 + 2));
    v8 = a1[11];
    v9 = *(_QWORD *)(v7 + 8);
    v10 = (*(_DWORD *)v7 >> 8) & 3;
    v11 = (*(_DWORD *)v7 >> 10) & 7;
    v12 = *((_DWORD *)a2 + 1);
    if (a1[162] == a1[161])
    {
      v13 = 0;
    }
    else
    {
      v13 = a1[162];
      if (HIDWORD(v13))
      {
        v14 = 32;
        goto LABEL_11;
      }
    }
    v14 = 24;
LABEL_11:
    v5 = sub_22E3CD3D4(v8 + 2032, v14, 3);
    sub_22F0031D0(v5, v8, v7, 12, v9, v10, v11, v12, 0, v13);
    return v5;
  }
  if (v4 != 176)
    return *((_QWORD *)a2 + 2);
  v16 = *((_DWORD *)a2 + 4);
  v29 = v31;
  v30 = 0x400000000;
  v27 = 0;
  if (v16 >= 5)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if (v16 > 4)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  v17 = *((unsigned int *)a2 + 4);
  v18 = *((_DWORD *)a2 + 5);
  if ((_DWORD)v17)
  {
    v20 = a2 + 32;
    v21 = (v17 + 1);
    v22 = 8 * v17;
    do
    {
      v23 = *((_QWORD *)v20 + 1);
      v24 = *(_QWORD *)&v20[8 * v21];
      v25 = v27;
      if (v27 >= 4uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v25 = v27;
      }
      v28[v25] = v24;
      ++v27;
      if (!v18)
        v23 = sub_22EC2C298(a1, v23);
      v26 = v30;
      if (v30 >= (unint64_t)HIDWORD(v30))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v26 = v30;
      }
      *((_QWORD *)v29 + v26) = v23;
      v19 = v30 + 1;
      LODWORD(v30) = v30 + 1;
      --v18;
      v20 += 8;
      v22 -= 8;
    }
    while (v22);
    v18 = *((_DWORD *)a2 + 5);
  }
  else
  {
    v19 = v30;
  }
  v5 = sub_22F3C26AC(a1[11], *((_DWORD *)a2 + 1), *((_QWORD *)a2 + 4), v28, v27, (uint64_t *)v29, v19, *((_DWORD *)a2 + 6), *((_DWORD *)a2 + 7), 0, (*(_DWORD *)a2 & 0x2000) != 0, v18);
  if (v29 != v31)
    free(v29);
  return v5;
}

unint64_t sub_22EC2C5A0(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t result;
  unint64_t v4;
  unsigned __int8 *v5;

  result = sub_22EFCB584(*(_QWORD *)(a1 + 216));
  if (result)
  {
    v4 = result;
    result = (*(_DWORD *)(result + 28) & 0x7F) == 0x18
          && (v5 = sub_22EFFF0D0(a2), *v5 == 161)
          && *((_QWORD *)v5 + 2) == *(_QWORD *)(v4 + 120);
  }
  return result;
}

uint64_t sub_22EC2C60C(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, void **a5, unsigned int a6, unsigned int a7, uint64_t a8, char a9)
{
  unint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  unint64_t v47;
  _DWORD *v48;
  unsigned int v49;
  uint64_t v50;
  size_t v51;
  uint64_t v52;
  const char *v53;
  unint64_t v54;
  _DWORD *v55;
  unsigned int v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void **v77;
  void **v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  unint64_t v93;
  _DWORD *v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unsigned int *v101;
  size_t v102;
  const void *v103;
  unsigned int v104;
  __int128 *v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE __dst[24];
  __int128 __p;
  uint64_t v113;
  char v114;
  uint64_t v115[2];
  uint64_t (**v116)();
  _QWORD v117[3];
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t (**v121)();
  uint64_t v122;
  void ***v123;
  uint64_t *v124;
  uint64_t v125;
  unsigned int v126;
  void **v127;
  __int128 v128;
  uint64_t v129;
  unint64_t v130;
  char v131;
  _BYTE v132[12];
  __int128 v133;
  uint64_t v134;
  char v135;
  _QWORD v136[5];

  v136[3] = *MEMORY[0x24BDAC8D0];
  v127 = a5;
  v126 = a6;
  v125 = a3;
  v17 = sub_22F40A120(a2);
  v18 = sub_22F409D88(v17);
  if ((a5 & 7) != 0)
  {
    v19 = a6;
    v20 = a1;
    v21 = 3675;
    goto LABEL_3;
  }
  v24 = v18;
  if (a9)
  {
    LODWORD(v120) = a7;
    HIDWORD(v120) = a7;
  }
  else
  {
    sub_22F0D4E74(a3);
    v120 = v25;
  }
  v26 = *(_QWORD *)(a2 + 32);
  v121 = off_24FAB8798;
  LODWORD(v122) = 4571;
  v123 = &v127;
  v124 = &v120;
  v23 = 1;
  if ((sub_22EE8B0B0((uint64_t)a1, a6, v26) & 1) != 0)
    return v23;
  v27 = (unint64_t)a5 & 0xFFFFFFFFFFFFFFF8;
  v28 = sub_22EFDA7BC(v24, (unint64_t)a5 & 0xFFFFFFFFFFFFFFF8, 1);
  if (v28)
  {
    v29 = v28;
    v23 = 1;
    if ((sub_22EB17F48(a1, v28, &v126, 1, 0, 0, 0, 0) & 1) != 0)
      return v23;
    goto LABEL_36;
  }
  v110 = a8;
  v31 = sub_22F3174CC(a2);
  if ((unint64_t *)v31 == v32)
  {
LABEL_17:
    v119 = v27 | 1;
    v36 = sub_22EFDBA90(v24, v27 | 1, 1, 0, 1, 0);
    if (!v36)
    {
      v60 = sub_22F3174CC(a2);
      if ((uint64_t *)v60 == v61)
      {
LABEL_43:
        v36 = sub_22F3B4D74(v24, (uint64_t *)&v119, 1);
        if (!v36)
        {
          LODWORD(v23) = 0;
          goto LABEL_19;
        }
      }
      else
      {
        v62 = (uint64_t *)v60;
        v63 = v61;
        while (1)
        {
          v64 = sub_22F3B4CBC(*v62, v27 | 1, 1);
          if (v64)
            break;
          if (++v62 == v63)
            goto LABEL_43;
        }
        v36 = v64;
      }
    }
    v23 = 1;
    if ((sub_22EB17F48(a1, v36, &v126, 1, 0, 0, 0, 0) & 1) != 0)
      return v23;
LABEL_19:
    v37 = sub_22F41FA34((llvm::StringMapImpl *)(a1[10] + 544), a1[10] + 672, v27);
    v118 = v37;
    v38 = sub_22EFDBA90(v24, v37, 1, 0, 1, 0);
    if (v38)
      goto LABEL_20;
    v108 = v37;
    v109 = v36;
    v65 = sub_22F3174CC(a2);
    if ((uint64_t *)v65 != v66)
    {
      v67 = (uint64_t *)v65;
      v68 = v66;
      while (1)
      {
        v69 = sub_22F3B4CBC(*v67, v108, 1);
        if (v69)
          break;
        if (++v67 == v68)
          goto LABEL_50;
      }
      v38 = v69;
      v36 = v109;
LABEL_20:
      v23 = 1;
      v39 = v38;
      if ((sub_22EB17F48(a1, v38, &v126, 1, 0, 0, 0, 0) & 1) != 0)
        return v23;
      v109 = v36;
      if ((*(_BYTE *)(v39 + 29) & 2) == 0)
        goto LABEL_75;
      if ((*(_BYTE *)(v39 + 58) & 8) == 0)
        goto LABEL_75;
      if (sub_22EFDA7BC(v24, v27, 1))
        goto LABEL_75;
      v40 = sub_22EFDCBF0(v39, 1);
      if (!v40)
        goto LABEL_75;
      v41 = v40;
      if ((*(_BYTE *)(v40 + 72) & 0x80) != 0)
        goto LABEL_75;
      sub_22E8FCA40(a1, v126, 0x1B08u, 0, (uint64_t)&v121);
      v42 = sub_22E894538((uint64_t)&v121, (uint64_t *)&v127);
      *(_QWORD *)&v128 = a2 & 0xFFFFFFFFFFFFFFF0;
      v43 = sub_22E8901B8(v42, (uint64_t *)&v128);
      v44 = 0;
      v45 = *(_QWORD *)(v41 + 40);
      v46 = "";
      if ((v45 & 7) == 0)
      {
        v47 = v45 & 0xFFFFFFFFFFFFFFF8;
        if (v47)
        {
          v48 = *(_DWORD **)(v47 + 16);
          v49 = *v48;
          v46 = (const char *)(v48 + 4);
          v44 = v49;
        }
      }
      v116 = (uint64_t (**)())v46;
      v117[0] = v44;
      v50 = sub_22F2F2210(v43, (uint64_t)&v116);
      v51 = 0;
      v52 = *(_QWORD *)(v41 + 40);
      v53 = "";
      if ((v52 & 7) == 0)
      {
        v54 = v52 & 0xFFFFFFFFFFFFFFF8;
        if (v54)
        {
          v55 = *(_DWORD **)(v54 + 16);
          v56 = *v55;
          v53 = (const char *)(v55 + 4);
          v51 = v56;
        }
      }
      v132[8] = 0;
      *(_QWORD *)v132 = 0;
      v135 = 0;
      v130 = v126 | ((unint64_t)v126 << 32);
      v131 = 1;
      if (v51 >= 0x17)
      {
        if ((v51 | 7) == 0x17)
          v74 = (v51 & 0xFFFFFFF8) + 8;
        else
          v74 = v51 | 7;
        v57 = operator new(v74 + 1);
        *(_QWORD *)&__dst[8] = v51;
        *(_QWORD *)&__dst[16] = v74 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)__dst = v57;
      }
      else
      {
        __dst[23] = v51;
        v57 = __dst;
        if (!v51)
          goto LABEL_72;
      }
      memmove(v57, v53, v51);
LABEL_72:
      v57[v51] = 0;
      v133 = *(_OWORD *)__dst;
      v134 = *(_QWORD *)&__dst[16];
      sub_22E890748(v50, &v130);
      if (SHIBYTE(v134) < 0)
        operator delete((void *)v133);
      sub_22E903BEC((unsigned int *)&v121);
      goto LABEL_75;
    }
LABEL_50:
    v38 = sub_22F3B4D74(v24, &v118, 1);
    v36 = v109;
    if (v38)
      goto LABEL_20;
    if ((_DWORD)v23)
    {
      v39 = 0;
LABEL_75:
      v75 = sub_22E3CD3D4(a1[11] + 2032, 48, 3);
      v23 = v75;
      v76 = *(_QWORD *)(a1[11] + 16872);
      if (a9)
        sub_22F335340(v75, v109, v39, v76, v126, a7, v110);
      else
        sub_22F2F4590(v75, v109, v39, v76, 1, 3, v126, v125);
      return v23;
    }
    BYTE4(v117[0]) = 1;
    LODWORD(v117[0]) = 16843009;
    memset((char *)&v117[1] + 5, 0, 11);
    *(_QWORD *)((char *)v117 + 5) = 0;
    v116 = &off_24FAB8728;
    v121 = (uint64_t (**)())v127;
    LODWORD(v122) = v126;
    sub_22EFC6D6C((uint64_t)&v123, (uint64_t)v127);
    if (v24)
      v70 = v24 + 48;
    else
      v70 = 0;
    sub_22EC6AB20((uint64_t)a1, (uint64_t *)&v121, 0, 0, 0, (uint64_t)&v116, 1, v70, (uint64_t)&v130, 0, a2, 1u);
    v71 = v130;
    if (!v130)
    {
LABEL_62:
      v121 = (uint64_t (**)())v136;
      sub_22E8D19C8((void ***)&v121);
      if (*(__int128 **)&v132[4] != (__int128 *)((char *)&v133 + 8))
        free(*(void **)&v132[4]);
      v73 = sub_22EFDB894(v24, v27, (uint64_t *)__dst);
      if (v73)
      {
        v82 = v73;
        v83 = sub_22F40A264(*(_QWORD *)(*(_QWORD *)(v73 + 48) & 0xFFFFFFFFFFFFFFF0));
        if (v83)
        {
          v84 = *(_QWORD *)(v83 + 32);
          v121 = off_24FAB87C0;
          LODWORD(v122) = 4569;
          v123 = &v127;
          v124 = &v125;
          if ((sub_22EE8B0B0((uint64_t)a1, v126, v84) & 1) != 0)
            return 1;
        }
        sub_22E8FCA40(a1, v126, 0xE76u, 0, (uint64_t)&v121);
        v85 = sub_22E894538((uint64_t)&v121, (uint64_t *)&v127);
        *(_QWORD *)&v128 = a2 & 0xFFFFFFFFFFFFFFF0;
        v86 = sub_22E8901B8(v85, (uint64_t *)&v128);
        v115[0] = *(_QWORD *)(v82 + 40);
        v87 = sub_22E894538(v86, v115);
        v132[8] = 0;
        *(_QWORD *)v132 = 0;
        v134 = 0x200000000000000;
        v133 = 0x3E2DuLL;
        v135 = 0;
        v130 = a4 | ((unint64_t)a4 << 32);
        v131 = 1;
        sub_22E890748(v87, &v130);
        if (SHIBYTE(v134) < 0)
          operator delete((void *)v133);
LABEL_4:
        sub_22E903BEC((unsigned int *)&v121);
        return 1;
      }
      v19 = v126;
      v20 = a1;
      v21 = 4570;
LABEL_3:
      sub_22E8FCA40(v20, v19, v21, 0, (uint64_t)&v121);
      v22 = sub_22E894538((uint64_t)&v121, (uint64_t *)&v127);
      v130 = a2 & 0xFFFFFFFFFFFFFFF0;
      sub_22E8901B8(v22, (uint64_t *)&v130);
      goto LABEL_4;
    }
    if ((v130 & 7) != 0 || (v130 & 0xFFFFFFFFFFFFFFF8) != v27)
    {
      v122 = a1[11] + 2128;
      LODWORD(v123) = 4572;
      v77 = v127;
      v78 = (void **)sub_22E3B8AAC(v122);
      v121 = (uint64_t (**)())v78;
      v79 = (char *)v78 + 1;
      v80 = *(unsigned __int8 *)v78;
      v79[v80] = 10;
      *(_BYTE *)v78 = v80 + 2;
      v78 += 2;
      v78[v80] = v77;
      v81 = (v80 + 1);
      v79[v81] = 9;
      v78[v81] = (void *)(a2 & 0xFFFFFFFFFFFFFFF0);
      sub_22EC6BEF8((uint64_t)a1, (uint64_t)&v130, (uint64_t)&v121, 1);
      if (v121 && v122)
        sub_22E3BB10C(v122, (unint64_t)v121);
      LOBYTE(v107) = a9;
      v23 = sub_22EC2C60C(a1, a2, a3, a4, v71, v126, a7, v110, v107);
      goto LABEL_82;
    }
    if (!(_DWORD)v133)
      goto LABEL_62;
    v72 = **(_QWORD **)&v132[4];
    if (!**(_QWORD **)&v132[4] || (*(_DWORD *)(v72 + 28) & 0x7F) != 0x19 || (*(_BYTE *)(v72 + 73) & 0x40) == 0)
      goto LABEL_62;
    sub_22E8FCA40(a1, v126, 0xBDFu, 0, (uint64_t)&v121);
    v88 = sub_22E894538((uint64_t)&v121, (uint64_t *)&v127);
    v89 = sub_22F31179C(a2);
    v90 = 0;
    v91 = *(_QWORD *)(v89 + 40);
    v92 = "";
    if ((v91 & 7) == 0)
    {
      v93 = v91 & 0xFFFFFFFFFFFFFFF8;
      if (v93)
      {
        v94 = *(_DWORD **)(v93 + 16);
        v95 = *v94;
        v92 = (const char *)(v94 + 4);
        v90 = v95;
      }
    }
    v115[0] = (uint64_t)v92;
    v115[1] = v90;
    v96 = sub_22F2F2210(v88, (uint64_t)v115);
    sub_22F0D4E74(a3);
    v98 = v97;
    v99 = *(_QWORD *)(sub_22F31179C(a2) + 40);
    if ((v99 & 7) != 0 || (v100 = v99 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
      v102 = 0;
      __dst[20] = 0;
      *(_QWORD *)&__dst[12] = 0;
      v114 = 0;
      *(_QWORD *)__dst = v98;
      __dst[8] = 1;
      v105 = &v128;
      HIBYTE(v129) = 0;
    }
    else
    {
      v101 = *(unsigned int **)(v100 + 16);
      v104 = *v101;
      v103 = v101 + 4;
      v102 = v104;
      __dst[20] = 0;
      *(_QWORD *)&__dst[12] = 0;
      v114 = 0;
      *(_QWORD *)__dst = v98;
      __dst[8] = 1;
      if (v104 >= 0x17uLL)
      {
        if ((v102 | 7) == 0x17)
          v106 = (v102 & 0xFFFFFFF8) + 8;
        else
          v106 = v102 | 7;
        v105 = (__int128 *)operator new(v106 + 1);
        *((_QWORD *)&v128 + 1) = v102;
        v129 = v106 - 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&v128 = v105;
      }
      else
      {
        HIBYTE(v129) = v102;
        v105 = &v128;
        if (!v102)
          goto LABEL_103;
      }
      memmove(v105, v103, v102);
    }
LABEL_103:
    *((_BYTE *)v105 + v102) = 0;
    __p = v128;
    v113 = v129;
    sub_22E890748(v96, __dst);
    if (SHIBYTE(v113) < 0)
      operator delete((void *)__p);
    sub_22E903BEC((unsigned int *)&v121);
    v23 = 1;
LABEL_82:
    v121 = (uint64_t (**)())v136;
    sub_22E8D19C8((void ***)&v121);
    if (*(__int128 **)&v132[4] != (__int128 *)((char *)&v133 + 8))
      free(*(void **)&v132[4]);
    return v23;
  }
  v33 = (unint64_t *)v31;
  v34 = v32;
  while (1)
  {
    v35 = sub_22EFDA7BC(*v33, (unint64_t)a5 & 0xFFFFFFFFFFFFFFF8, 1);
    if (v35)
      break;
    if (++v33 == v34)
      goto LABEL_17;
  }
  v29 = v35;
  v23 = 1;
  a8 = v110;
  if ((sub_22EB17F48(a1, v35, &v126, 1, 0, 0, 0, 0) & 1) == 0)
  {
LABEL_36:
    v58 = sub_22E3CD3D4(a1[11] + 2032, 48, 3);
    v23 = v58;
    v59 = *(_QWORD *)(a1[11] + 16872);
    if (a9)
      sub_22F335288(v58, v29, v59, v126, a7, a8);
    else
      sub_22F333FF4(v58, v29, v59, 1, 3, v126, a3);
  }
  return v23;
}

uint64_t sub_22EC2D07C(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39[24];
  uint64_t v40;
  int v41;

  v41 = a5;
  v40 = a2;
  v9 = sub_22EA06918(a1, &v40, a4, 0);
  if (v9)
  {
    v10 = (uint64_t *)v9;
    v11 = 0;
LABEL_3:
    v12 = sub_22EFDA7BC((unint64_t)v10, a3, 2);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 80);
      v14 = *(_QWORD *)(v12 + 88);
    }
    else
    {
      v13 = a3 | 1;
      v14 = sub_22F41FA34((llvm::StringMapImpl *)(a1[10] + 544), a1[10] + 672, a3);
    }
    v37 = v14;
    v38 = v13;
    v15 = (_DWORD *)sub_22EFDBA90((unint64_t)v10, v13, 0, 0, 1, 0);
    if (v15 || (v15 = (_DWORD *)sub_22F3B4D74((uint64_t)v10, (uint64_t *)&v38, 0)) != 0)
    {
      v16 = 1;
      if ((sub_22EB17F48((uint64_t)a1, v15, (unsigned int *)&v41, 1, 0, 0, 0, 0) & 1) != 0)
        return v16;
    }
    else
    {
      LODWORD(v16) = 0;
    }
    v17 = (_DWORD *)sub_22EFDBA90((unint64_t)v10, v14, 0, 0, 1, 0);
    if (v17
      || (v17 = (_DWORD *)sub_22F3B4D74((uint64_t)v10, &v37, 0)) != 0
      || (v17 = (_DWORD *)sub_22EFDDB1C((unint64_t)v10, v14)) != 0)
    {
      v16 = 1;
      if ((sub_22EB17F48((uint64_t)a1, v17, (unsigned int *)&v41, 1, 0, 0, 0, 0) & 1) != 0)
        return v16;
      goto LABEL_9;
    }
    if ((_DWORD)v16)
    {
      v17 = 0;
LABEL_9:
      v18 = sub_22E3CD3D4(a1[11] + 2032, 48, 3);
      v16 = v18;
      v19 = *(_QWORD *)(a1[11] + 16872);
      if (v11)
        sub_22F335340(v18, (uint64_t)v15, (uint64_t)v17, v19, v41, a4, v11);
      else
        sub_22F3354A0(v18, (uint64_t)v15, (uint64_t)v17, v19, v41, a4, (uint64_t)v10);
      return v16;
    }
    sub_22E8FCA40(a1, v41, 0x11DAu, 0, (uint64_t)v39);
    v36 = a3;
    v30 = sub_22E8BAE44((uint64_t)v39, &v36);
    v35 = sub_22F36D148(a1[11], v10, 0);
    sub_22E8901B8(v30, (uint64_t *)&v35);
LABEL_20:
    sub_22E903BEC(v39);
    return 1;
  }
  v20 = *(_QWORD *)(v40 + 16);
  if (*(_DWORD *)v20 != 5
    || ((v21 = *(_DWORD *)(v20 + 16), v22 = *(unsigned __int8 *)(v20 + 20), v21 == 1701868915)
      ? (v23 = v22 == 114)
      : (v23 = 0),
        !v23 || (v24 = sub_22EC2AEBC((uint64_t)a1, a4)) == 0 || (v25 = v24, (v26 = sub_22EFDC9F0(v24)) == 0)))
  {
LABEL_19:
    sub_22E8FCA40(a1, a4, 0x12u, 0, (uint64_t)v39);
    LOWORD(v38) = 5;
    sub_22EC2D434((uint64_t)v39, (unsigned __int16 *)&v38);
    LOWORD(v37) = 21;
    sub_22EC2D434((uint64_t)v39, (unsigned __int16 *)&v37);
    goto LABEL_20;
  }
  v11 = sub_22F3346EC(v26) & 0xFFFFFFFFFFFFFFF0;
  if ((*(_BYTE *)(v25 + 58) & 2) == 0)
  {
    v31 = sub_22EFDC9F0(v25);
    v10 = (uint64_t *)sub_22F3B46CC(v31);
    if (v10)
      goto LABEL_3;
    goto LABEL_19;
  }
  if (!v11)
  {
    sub_22E8FCA40(a1, a4, 0x1247u, 0, (uint64_t)v39);
    v28 = *(_QWORD *)(sub_22EFDC9F0(v25) + 40);
    if ((v28 & 7) != 0)
      v29 = 0;
    else
      v29 = v28 & 0xFFFFFFFFFFFFFFF8;
    v38 = v29;
    sub_22E8BAE44((uint64_t)v39, (uint64_t *)&v38);
    goto LABEL_20;
  }
  v32 = sub_22F36CC4C(a1[11], v11);
  v33 = v32;
  v34 = *(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0);
  if (!v34 || *(_BYTE *)(v34 + 16) != 32)
    v34 = sub_22F10CF48(*(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0));
  return sub_22EC2C60C(a1, v34, 0, 0, (void **)a3, a5, a4, v33, 1);
}

uint64_t sub_22EC2D434(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  uint64_t v15;

  if (*(_BYTE *)(a1 + 80))
  {
    v4 = *a2;
    v5 = *(unsigned __int8 **)(a1 + 32);
    if (!v5)
    {
      v5 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 32) = v5;
    }
    v5[*v5 + 1] = 4;
    v6 = *(_BYTE **)(a1 + 32);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return a1;
    v9 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
    v15 = v10;
    v11 = sub_22F2F1D6C(v9, &v15)[1] + 32 * *(unsigned int *)(a1 + 88);
    v14 = *(unsigned __int8 **)(v11 + 8);
    v13 = (_QWORD *)(v11 + 8);
    v12 = v14;
    v4 = *a2;
    if (!v14)
    {
      v12 = (unsigned __int8 *)sub_22E3B8AAC(v13[1]);
      *v13 = v12;
    }
    v12[*v12 + 1] = 4;
    v6 = (_BYTE *)*v13;
  }
  v7 = *v6;
  *v6 = v7 + 1;
  *(_QWORD *)&v6[8 * v7 + 16] = v4;
  return a1;
}

uint64_t sub_22EC2D528(_QWORD *a1, uint64_t *a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, unint64_t *a7)
{
  unsigned int v9;
  uint64_t *v13;
  unint64_t v14;
  int v15;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  unint64_t v31;
  void **v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void **v37;
  uint64_t v38;
  int v39;
  uint64_t (**v40)();
  int v41;
  char v42;
  uint64_t v43;
  _BYTE v44[11];
  unsigned int v45;
  uint64_t v46[2];
  void *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  _BYTE v54[64];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned int v60;
  _QWORD v61[2];
  uint64_t v62;
  __int16 v63;
  int v64;
  char v65;
  uint64_t v66;

  v9 = a4;
  v66 = *MEMORY[0x24BDAC8D0];
  v45 = a4;
  *a7 = 0;
  if (a2 && a5)
  {
    v13 = a2;
    while ((*((_BYTE *)v13 + 9) & 8) == 0)
    {
      v13 = (uint64_t *)*v13;
      if (!v13)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    v51 = 0;
    v52 = v54;
    v53 = 0x800000000;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = a1;
    v59 = a3;
    v60 = a4;
    sub_22EFC6D6C((uint64_t)v61, a3);
    v61[1] = 0;
    v62 = 0;
    v63 = 0;
    v64 = 257;
    v65 = 0;
    sub_22EC56024((uint64_t)&v51);
    sub_22EC63520((uint64_t)a1, (uint64_t)&v51, a2, 0, 0);
    switch((int)v51)
    {
      case 0:
        v20 = sub_22E90328C((uint64_t)a1);
        if (!v20)
          goto LABEL_22;
        v21 = v20;
        if (sub_22EFDC9F0(v20))
        {
          v22 = sub_22EFDC9F0(v21);
          if (!sub_22EFDB894(v22, a3, v46))
            goto LABEL_22;
        }
        goto LABEL_21;
      case 1:
      case 3:
      case 4:
      case 5:
        BYTE1(v64) = 0;
        a6 = 1;
        goto LABEL_45;
      case 2:
        if ((a6 & 1) != 0)
          goto LABEL_21;
        v14 = *(_QWORD *)v52 & 0xFFFFFFFFFFFFFFFCLL;
        v15 = *(_DWORD *)(v14 + 28);
        if ((v15 & 0x7Fu) <= 0x2F && ((1 << (v15 & 0x7F)) & 0xC00000060000) != 0)
        {
          v14 = sub_22EFBAEA4(*(_QWORD *)v52 & 0xFFFFFFFFFFFFFFFCLL);
          v15 = *(_DWORD *)(v14 + 28);
        }
        v17 = v15 & 0x7F;
        if (v17 == 22)
        {
          v19 = sub_22F36D148(a1[11], (uint64_t *)v14, 0);
        }
        else
        {
          if ((v17 - 43) < 0xFFFFFFF6)
          {
LABEL_21:
            a6 = 1;
            goto LABEL_40;
          }
          v18 = *(_QWORD *)(v14 + 48);
          if (v18)
            v19 = v18 & 0xFFFFFFFFFFFFFFF0;
          else
            v19 = sub_22EF6462C(a1[11], v14);
          sub_22EB17F48((uint64_t)a1, (_DWORD *)v14, &v45, 1, 0, 0, 0, 0);
          v9 = v45;
        }
        v29 = sub_22EF579A8(a1[11], v19, v9);
        *a7 = sub_22EE7D030((uint64_t)a1, v19, (uint64_t)v29);
        a6 = 2;
LABEL_40:
        if (BYTE1(v64))
        {
          if ((_DWORD)v51 == 5)
          {
            sub_22EC64D18(v58, (uint64_t)&v51);
          }
          else if (v56 && (*(_DWORD *)(v58[9] + 52) & 0x400000) != 0)
          {
            sub_22E90B5FC((unint64_t)v58, (uint64_t)&v51);
          }
        }
LABEL_45:
        if (v55)
        {
          v36 = sub_22EC6CBD0(v55);
          MEMORY[0x2348A0E9C](v36, 0x10E0C409F09D3C3);
        }
        if (v52 != v54)
          free(v52);
        break;
      default:
LABEL_22:
        v23 = sub_22E90328C((uint64_t)a1);
        v41 = 16843009;
        v42 = 1;
        memset(v44, 0, sizeof(v44));
        v43 = 0;
        v40 = &off_24FAB8760;
        if (v23)
        {
          v24 = v23;
          if (sub_22EFDC9F0(v23))
          {
            v31 = sub_22EFDC9F0(v24);
            LOBYTE(v43) = sub_22F3B46CC(v31) != 0;
          }
        }
        a6 = 1;
        sub_22EC6AB20((uint64_t)a1, &v59, v62, a2, 0, (uint64_t)&v40, 1, 0, (uint64_t)v46, 0, 0, 0);
        if (v46[0])
        {
          if (!v48 || *(_QWORD *)v47)
          {
            v27 = sub_22F2E6D78((uint64_t)v46);
            if (v27)
            {
              v28 = (uint64_t *)v27;
              if ((*(_DWORD *)(v27 + 28) & 0x7F) == 0x16)
              {
                v38 = a1[11] + 2128;
                v39 = 5073;
                v32 = (void **)sub_22E3B8AAC(v38);
                v37 = v32;
                v33 = *(unsigned __int8 *)v32;
                *((_BYTE *)v32 + v33 + 1) = 5;
                *(_BYTE *)v32 = v33 + 1;
                v32[v33 + 2] = (void *)a3;
                sub_22EC6BEF8((uint64_t)a1, (uint64_t)v46, (uint64_t)&v37, 1);
                if (v37 && v38)
                  sub_22E3BB10C(v38, (unint64_t)v37);
                v34 = sub_22F36D148(a1[11], v28, 0);
                v35 = sub_22EF579A8(a1[11], v34, v9);
                *a7 = sub_22EE7D030((uint64_t)a1, v34, (uint64_t)v35);
                a6 = 2;
              }
              else
              {
                a6 = 1;
              }
            }
          }
          else
          {
            v38 = a1[11] + 2128;
            v39 = 5073;
            v25 = (void **)sub_22E3B8AAC(v38);
            v37 = v25;
            v26 = *(unsigned __int8 *)v25;
            *((_BYTE *)v25 + v26 + 1) = 5;
            *(_BYTE *)v25 = v26 + 1;
            v25[v26 + 2] = (void *)a3;
            sub_22EC6BEF8((uint64_t)a1, (uint64_t)v46, (uint64_t)&v37, 1);
            if (v37 && v38)
              sub_22E3BB10C(v38, (unint64_t)v37);
            a6 = 0;
          }
        }
        v37 = (void **)&v50;
        sub_22E8D19C8(&v37);
        if (v47 != &v49)
          free(v47);
        goto LABEL_40;
    }
  }
  return a6;
}

uint64_t sub_22EC2DA20(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int a7, uint64_t a8, int *a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13, unsigned __int8 a14)
{
  unint64_t v17;
  unsigned int *v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  unsigned __int8 **v46;
  uint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  BOOL v69;
  unint64_t v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  int v77;
  unsigned __int8 *v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  unsigned __int8 **v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  size_t v96;
  uint64_t v97;
  const char *v98;
  unint64_t v99;
  _DWORD *v100;
  unsigned int v101;
  __int128 *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  size_t v111;
  uint64_t v112;
  const char *v113;
  unint64_t v114;
  _DWORD *v115;
  unsigned int v116;
  __int128 *p_dst;
  uint64_t v118;
  const char *v119;
  __int128 *v120;
  uint64_t v121;
  const char *v122;
  __int128 *v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t *v159;
  int v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v192;
  uint64_t v193;
  BOOL v194;
  unint64_t v195;
  uint64_t v196;
  BOOL v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  _BYTE v225[96];
  unsigned int v226[24];
  _BYTE v227[96];
  _BYTE v228[96];
  unsigned int v229[24];
  unsigned int v230[24];
  unsigned int v231[24];
  unsigned int v232[24];
  unsigned int v233[24];
  unsigned int v234[24];
  unint64_t v235;
  unint64_t v236;
  unsigned int v237;
  uint64_t v238;
  unint64_t v239;
  __int128 __dst;
  uint64_t v241;
  int64_t v242;
  _BYTE v243[12];
  char v244;
  __int128 v245;
  uint64_t v246;
  char v247;
  int *v248;
  uint64_t v249;
  _QWORD v250[12];

  v17 = a2;
  v19 = (unsigned int *)a9;
  v250[10] = *MEMORY[0x24BDAC8D0];
  v239 = a3;
  v238 = a5;
  if ((_DWORD)a4)
  {
    LODWORD(v236) = a4;
    HIDWORD(v236) = a4;
    v20 = a4;
  }
  else
  {
    sub_22F0D5A50(a2);
    v20 = v21;
    sub_22F0D4E74(v17);
    v236 = v22;
  }
  v237 = v20;
  if (a10 && *a9)
  {
    v224 = *a9;
    v23 = a10;
  }
  else
  {
    v19 = &v237;
    v23 = 1;
    v224 = v20;
  }
  v24 = a14;
  if (!a7)
  {
    sub_22E8FCA40((_QWORD *)a1, v20, 0xF57u, 0, (uint64_t)&v248);
    *(_QWORD *)&v243[4] = 0;
    v244 = 0;
    v246 = 0x100000000000000;
    v245 = 0x5BuLL;
    v242 = v237 | ((unint64_t)v237 << 32);
    v243[0] = 0;
    v247 = 0;
    sub_22E890748((uint64_t)&v248, &v242);
    if (SHIBYTE(v246) < 0)
      operator delete((void *)v245);
    sub_22E903BEC((unsigned int *)&v248);
    a7 = v237;
  }
  if (v17)
  {
    v25 = *(_QWORD *)(v17 + 8);
    v26 = *(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_DWORD *)(v26 + 16) & 0xFE00000u) >= 0x8180001 && v26 != 0 && *(_DWORD *)(v26 + 16) == 11)
    {
      v29 = *(_QWORD *)(a1 + 88);
      if (v25 == *(_QWORD *)(v29 + 16856))
      {
        v92 = sub_22F36E1B8(*(_QWORD *)(a1 + 88));
        v93 = *(_QWORD *)(v92 + 48);
        if (v93)
          v94 = v93 & 0xFFFFFFFFFFFFFFF0;
        else
          v94 = sub_22EF6462C(v29, v92);
        v248 = (int *)a1;
        v249 = v94;
        v30 = sub_22EB53364((uint64_t)&v248, (unsigned __int8 *)v17);
        if ((v30 & 1) != 0)
          return 1;
      }
      else
      {
        v30 = sub_22EB19A28(a1);
        if ((v30 & 1) != 0)
          return 1;
      }
      v17 = v30 & 0xFFFFFFFFFFFFFFFELL;
    }
    if ((*(_BYTE *)(v17 + 1) & 0x80) != 0)
      return sub_22F062F54(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16832), 0, a7, v17, v238, a9, a10, 0, a12, a13, a11, 0, a14);
    v31 = 1;
    v32 = sub_22EB1B954(a1, (void *)v17);
    if ((v32 & 1) != 0)
      return v31;
    v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
    v239 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v34 = *(_QWORD *)(v239 & 0xFFFFFFFFFFFFFFF0);
    v35 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v35 != 10 && v35 != 32 && !sub_22F115064(v34))
    {
      if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 2) == 0)
      {
        v106 = *(_QWORD *)(a1 + 88);
        v107 = sub_22F36E1B8(v106);
        v108 = *(_QWORD *)(v107 + 48);
        v109 = v108 ? v108 & 0xFFFFFFFFFFFFFFF0 : sub_22EF6462C(v106, v107);
        if (v109 >= 0x10)
        {
          v124 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v239 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          v125 = *(_DWORD *)(v124 + 16);
          if (v125 > 0x26)
          {
            if (v125 == 44)
            {
              v126 = sub_22F114198(*(_QWORD *)(v124 + 24));
              if (((*(_BYTE *)(v126 + 74) & 1) != 0 || *(_QWORD *)(v126 + 128) >= 8uLL)
                && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v124 + 24)) + 76) & 0x80) == 0)
              {
                goto LABEL_287;
              }
            }
            else if (v125 == 39)
            {
              goto LABEL_287;
            }
          }
          else if (v125 == 11)
          {
            if (((*(_DWORD *)(v124 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
              goto LABEL_287;
          }
          else if (v125 == 9)
          {
LABEL_287:
            sub_22E8FCA40((_QWORD *)a1, v237, 0x18A2u, 0, (uint64_t)&v248);
            v138 = sub_22E8901B8((uint64_t)&v248, (uint64_t *)&v239);
            sub_22E8906A0(v138, (uint64_t *)&v236);
            sub_22E903BEC((unsigned int *)&v248);
            v139 = *(_QWORD *)(a1 + 88);
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v239 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16) == 39)
            {
              v140 = sub_22F36E1B8(*(_QWORD *)(a1 + 88));
              v141 = *(_QWORD *)(v140 + 48);
              if (v141)
                v142 = v141 & 0xFFFFFFFFFFFFFFF0;
              else
                v142 = sub_22EF6462C(v139, v140);
              v38 = sub_22E90092C(a1, v33, v142, 43, 0, 0);
            }
            else
            {
              if (sub_22EFFBE1C(v33, v139, 1))
                v160 = 14;
              else
                v160 = 22;
              v161 = *(_QWORD *)(a1 + 88);
              v162 = sub_22F36E1B8(v161);
              v163 = *(_QWORD *)(v162 + 48);
              if (v163)
                v164 = v163 & 0xFFFFFFFFFFFFFFF0;
              else
                v164 = sub_22EF6462C(v161, v162);
              v38 = sub_22E90092C(a1, v33, v164, v160, 0, 0);
              v24 = a14;
            }
LABEL_33:
            v33 = v38 & 0xFFFFFFFFFFFFFFFELL;
            v239 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFFFELL) + 8);
            goto LABEL_35;
          }
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
      {
        v36 = *(_QWORD *)(v33 + 8);
        v248 = (int *)&unk_24FAB6EF8;
        LODWORD(v249) = 3589;
        v37 = (unsigned __int8 *)v33;
        v31 = 1;
        if ((sub_22EE8B0B0(a1, v237, v36) & 1) != 0)
          return v31;
        v38 = sub_22F342A50((uint64_t *)a1, v37);
        v33 = (unint64_t)v37;
        if (v38 >= 2)
          goto LABEL_33;
      }
    }
  }
  else
  {
    v33 = 0;
  }
LABEL_35:
  v218 = v33;
  v219 = v24;
  if (a6)
    goto LABEL_36;
  *(_QWORD *)&__dst = 0;
  v88 = sub_22F409980(*(_QWORD *)(v239 & 0xFFFFFFFFFFFFFFF0), *(_QWORD *)(a1 + 88), (uint64_t *)&__dst);
  if ((v88 & 1) == 0)
  {
    v89 = *(_QWORD *)(v239 & 0xFFFFFFFFFFFFFFF0);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v89 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 10)
    {
      if (v218)
      {
        if (sub_22F115064(*(_QWORD *)(*(_QWORD *)(v218 + 8) & 0xFFFFFFFFFFFFFFF0)))
          goto LABEL_183;
        v89 = *(_QWORD *)(v239 & 0xFFFFFFFFFFFFFFF0);
      }
      if ((sub_22F409B28(v89) & 1) != 0
        || ((v134 = *(_QWORD *)(v239 & 0xFFFFFFFFFFFFFFF0)) != 0 && *(_BYTE *)(v134 + 16) == 32
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v134 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
         && (v134 = sub_22F10CF48(v134)) != 0)
        && sub_22E509F54(v134))
      {
        if ((sub_22F409B28(*(_QWORD *)(v239 & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
        {
          v135 = sub_22E90328C(a1);
          if (!v135
            || (v136 = sub_22EFDC9F0(v135)) == 0
            || (v137 = v136, (a6 = sub_22EFDBA90(v136, v238, 0, 0, 1, 0)) == 0)
            && (a6 = sub_22F3B4D74(v137, &v238, 0)) == 0)
          {
            if (v218 && (sub_22EC2C5A0(a1, (unsigned __int8 *)v218) & 1) != 0)
              goto LABEL_283;
            v242 = (int64_t)&v243[8];
            *(_QWORD *)v243 = 0x400000000;
            sub_22EAFB090(a1, v238, (uint64_t)&v242, 0, 1, 0);
            if (*(_DWORD *)v243)
            {
              v146 = v24;
              v147 = *(_QWORD *)v242;
              if ((*(_BYTE *)(*(_QWORD *)v242 + 58) & 2) != 0)
              {
                v148 = *(_QWORD *)(v147 + 16);
                v149 = v148 & 0xFFFFFFFFFFFFFFF8;
                if ((v148 & 4) != 0)
                  v149 = *(_QWORD *)v149;
                if (v149 && (*(_WORD *)(v149 + 8) & 0x7F) == 0x16 && sub_22F3B46CC(v149 - 48))
                {
                  sub_22E8FCA40((_QWORD *)a1, v224, 0x1B37u, 0, (uint64_t)&v248);
                  v182 = sub_22E894538((uint64_t)&v248, &v238);
                  v235 = __PAIR64__(a11, a7);
                  sub_22E8906A0(v182, (uint64_t *)&v235);
                  sub_22E903BEC((unsigned int *)&v248);
                }
              }
              v150 = sub_22ED06ACC((uint64_t *)a1, v238, a12, a13, (*(_QWORD *)(v147 + 56) >> 17) & 1, (uint64_t)&v242, 0);
              if (v150)
                a6 = v150;
              else
                a6 = v147;
              LOBYTE(v24) = v146;
            }
            else
            {
              a6 = 0;
            }
            if ((_BYTE *)v242 != &v243[8])
              free((void *)v242);
LABEL_324:
            v33 = v218;
            if (a6)
              goto LABEL_36;
LABEL_215:
            v41 = 0;
            v220 = 0;
            goto LABEL_66;
          }
LABEL_316:
          if ((sub_22EB17F48(a1, a6, v19, v23, 0, 0, 0, 0) & 1) == 0)
          {
LABEL_317:
            v33 = v218;
            goto LABEL_36;
          }
          return 1;
        }
        v165 = sub_22F40A1F8(*(_QWORD *)(v239 & 0xFFFFFFFFFFFFFFF0));
        v166 = v238;
        v167 = sub_22F3174CC(v165);
        if ((uint64_t *)v167 != v168)
        {
          v169 = (uint64_t *)v167;
          v170 = v168;
          while (1)
          {
            v171 = sub_22F3B4CBC(*v169, v166, 0);
            if (v171)
              break;
            if (++v169 == v170)
              goto LABEL_335;
          }
          a6 = v171;
LABEL_341:
          LOBYTE(v24) = v219;
          goto LABEL_317;
        }
LABEL_335:
        v172 = v238;
        v173 = sub_22F3174CC(v165);
        if ((uint64_t *)v173 != v174)
        {
          v175 = (uint64_t *)v173;
          v176 = v174;
          while (1)
          {
            v177 = sub_22F3B4CBC(*v175, v172, 1);
            if (v177)
              break;
            if (++v175 == v176)
              goto LABEL_283;
          }
          a6 = v177;
          v188 = *(_QWORD *)(a1 + 3440);
          if (v188)
          {
            v189 = *(_QWORD *)(a6 + 16);
            v190 = v189 & 0xFFFFFFFFFFFFFFF8;
            if ((v189 & 4) != 0)
              v190 = *(_QWORD *)v190;
            if (v190 && (*(_WORD *)(v190 + 8) & 0x7F) == 23)
            {
              v206 = sub_22F3E8F0C(v188, 0);
              v207 = *(_QWORD *)(a1 + 3344);
              v208 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v190 - 48) + 16))(v190 - 48);
              v209 = sub_22EC65CE0((_QWORD *)a1, v207, v206, v208, 0, 0);
              if (v209)
              {
                v210 = v209;
                if ((*(_DWORD *)(v209 + 28) & 0x7F) == 0x16)
                {
                  v211 = sub_22F276134(v209);
                  v212 = sub_22F2761B0(v210);
                  if (v211 != v212)
                  {
                    while (*(_QWORD *)(*(_QWORD *)v211 + 96) != *(_QWORD *)(v190 + 48))
                    {
                      v211 += 8;
                      if (v211 == v212)
                        goto LABEL_373;
                    }
                    LOBYTE(v24) = v219;
                    goto LABEL_324;
                  }
                }
              }
            }
          }
LABEL_373:
          sub_22E8FCA40((_QWORD *)a1, v224, 0x1A1Fu, 0, (uint64_t)&v248);
          v242 = *(_QWORD *)(a6 + 40);
          v192 = sub_22E894538((uint64_t)&v248, &v242);
          sub_22E894538(v192, &v238);
          sub_22E903BEC((unsigned int *)&v248);
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a6 + 24), 0x16B5u, 0, (uint64_t)&v248);
          v242 = *(_QWORD *)(a6 + 40);
          sub_22E894538((uint64_t)&v248, &v242);
          sub_22E903BEC((unsigned int *)&v248);
          goto LABEL_341;
        }
LABEL_283:
        v41 = 0;
        a6 = 0;
        v220 = 0;
        v33 = v218;
        goto LABEL_66;
      }
      v143 = sub_22F40A18C(*(_QWORD *)(v239 & 0xFFFFFFFFFFFFFFF0));
      if (v143)
      {
        v151 = v143;
        v221 = v238;
        v152 = sub_22F3174CC(v143);
        v216 = v153;
        if ((uint64_t *)v152 == v153)
        {
LABEL_310:
          v222 = v238;
          v156 = sub_22F3174CC(v151);
          if ((uint64_t *)v156 == v157)
            goto LABEL_283;
          v158 = (uint64_t *)v156;
          v159 = v157;
          while (1)
          {
            v155 = sub_22F3B4CBC(*v158, v222, 0);
            if (v155)
              break;
            if (++v158 == v159)
              goto LABEL_283;
          }
        }
        else
        {
          v154 = (uint64_t *)v152;
          while (1)
          {
            v155 = sub_22F3B4CBC(*v154, v221, 1);
            if (v155)
              break;
            if (++v154 == v216)
              goto LABEL_310;
          }
        }
        a6 = v155;
        goto LABEL_316;
      }
      v144 = sub_22F40A264(*(_QWORD *)(v239 & 0xFFFFFFFFFFFFFFF0));
      if (!v144)
      {
        sub_22E8FCA40((_QWORD *)a1, v237, 0xB6Fu, 0, (uint64_t)&v248);
        v145 = sub_22E8901B8((uint64_t)&v248, (uint64_t *)&v239);
        sub_22E8906A0(v145, (uint64_t *)&v236);
LABEL_295:
        sub_22E903BEC((unsigned int *)&v248);
        return 1;
      }
      v178 = v144;
      v223 = sub_22F31179C(v144);
      if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 2) != 0)
        v179 = 2676;
      else
        v179 = 6939;
      v180 = *(_QWORD *)(v178 + 32);
      v248 = (int *)&unk_24FAB6EA8;
      LODWORD(v249) = v179;
      v250[0] = &v236;
      if (sub_22EE8B0B0(a1, v237, v180))
      {
        if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 2) != 0)
          return 1;
        v217 = sub_22F31179C(v178);
        v181 = a4;
        if (v218)
          sub_22F0D5A50(v218);
        sub_22E8FCA40((_QWORD *)a1, v181, 0x17A7u, 0, (uint64_t)v234);
        sub_22E903BEC(v234);
      }
      else
      {
        a6 = sub_22EFDBA90(v223, v238, 1, 0, 1, 0);
        v217 = 0;
        if (a6)
          goto LABEL_356;
      }
      v183 = v238;
      v184 = sub_22F3174CC(v178);
      v214 = v185;
      if ((uint64_t *)v184 == v185)
      {
LABEL_364:
        v187 = sub_22F3B4D74(v223, &v238, 1);
        if (!v187)
        {
          if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 2) != 0)
          {
            sub_22E8FCA40((_QWORD *)a1, v224, 0xA69u, 0, (uint64_t)&v248);
            v242 = *(_QWORD *)(v178 + 32);
            v202 = sub_22E8901B8((uint64_t)&v248, &v242);
            v203 = sub_22E894538(v202, &v238);
            v204 = sub_22E8906A0(v203, (uint64_t *)&v236);
            v205 = a9[a10 - 1];
            LODWORD(v235) = *a9;
            HIDWORD(v235) = v205;
            sub_22E8906A0(v204, (uint64_t *)&v235);
            goto LABEL_295;
          }
          if (v218 && (sub_22EC2C5A0(a1, (unsigned __int8 *)v218) & 1) != 0)
            goto LABEL_283;
          v193 = *(_QWORD *)(*(_QWORD *)(v178 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v193)
            v194 = *(unsigned __int8 *)(v193 + 16) - 35 > 0xFFFFFFFD;
          else
            v194 = 0;
          if (!v194)
            v193 = sub_22F10CF48(v193);
          if ((*(_BYTE *)(v193 + 19) & 0xFC) != 0)
            goto LABEL_283;
          v242 = (int64_t)&v243[8];
          *(_QWORD *)v243 = 0x400000000;
          sub_22EAFB090(a1, v238, (uint64_t)&v242, 1, 0, 0);
          if (*(_DWORD *)v243)
          {
            v195 = *(_QWORD *)v242;
            v196 = sub_22ED06ACC((uint64_t *)a1, v238, a12, a13, (*(_QWORD *)(*(_QWORD *)v242 + 56) >> 17) & 1, (uint64_t)&v242, 0);
            if (v196)
              a6 = v196;
            else
              a6 = v195;
            sub_22EAFB384(a1, v238, a6, a7 | (unint64_t)(a11 << 32), 1, (uint64_t)&v242);
            if (a6)
              v197 = v217 == 0;
            else
              v197 = 0;
            if (v197)
            {
              sub_22E8FCA40((_QWORD *)a1, v224, 0x1A42u, 0, (uint64_t)&v248);
              v198 = *(_QWORD *)(sub_22F31179C(v178) + 40);
              if ((v198 & 7) != 0)
                v199 = 0;
              else
                v199 = v198 & 0xFFFFFFFFFFFFFFF8;
              v235 = v199;
              v200 = sub_22E8BAE44((uint64_t)&v248, (uint64_t *)&v235);
              v201 = sub_22E894538(v200, &v238);
              sub_22E8906A0(v201, (uint64_t *)&v236);
              sub_22E903BEC((unsigned int *)&v248);
            }
          }
          else
          {
            a6 = 0;
          }
          if ((_BYTE *)v242 != &v243[8])
            free((void *)v242);
          LOBYTE(v24) = v219;
          if (!a6)
            goto LABEL_283;
LABEL_356:
          if (!sub_22EB17F48(a1, a6, v19, v23, v217, 0, 0, 0))
            goto LABEL_317;
          return 1;
        }
      }
      else
      {
        v186 = (uint64_t *)v184;
        while (1)
        {
          v187 = sub_22F3B4CBC(*v186, v183, 1);
          if (v187)
            break;
          if (++v186 == v214)
            goto LABEL_364;
        }
      }
      a6 = v187;
      LOBYTE(v24) = v219;
      goto LABEL_356;
    }
  }
LABEL_183:
  v248 = (int *)v250;
  v249 = 0x400000000;
  v90 = __dst;
  sub_22EAFB090(a1, v238, (uint64_t)&v248, 1, 1, __dst);
  if ((_DWORD)v249)
  {
    a6 = *(_QWORD *)v248;
    v91 = sub_22ED06ACC((uint64_t *)a1, v238, a12, a13, (*(_QWORD *)(*(_QWORD *)v248 + 56) >> 17) & 1, (uint64_t)&v248, v90);
    if (v91)
      a6 = v91;
    if ((sub_22EAFB384(a1, v238, a6, a7 | (unint64_t)(a11 << 32), v88, (uint64_t)&v248) & 1) == 0)
      sub_22EB17F48(a1, a6, v19, v23, 0, 0, 0, 0);
  }
  else
  {
    a6 = 0;
  }
  v33 = v218;
  if (v248 != (int *)v250)
    free(v248);
  if (!a6)
    goto LABEL_215;
LABEL_36:
  if (sub_22EFDBF50(a6) == 3)
  {
    v39 = *(_DWORD *)(a1 + 1904);
    if (v39)
    {
      v40 = v39 - 1;
      while ((v40 & 0x80000000) == 0)
      {
        v41 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v40--);
        if ((*(_DWORD *)(v41 + 8) & 7) != 1)
          goto LABEL_43;
      }
    }
  }
  v41 = 0;
LABEL_43:
  if (!sub_22EFDBD9C(a6))
  {
    v220 = 1;
LABEL_66:
    v48 = *(_QWORD *)(v239 & 0xFFFFFFFFFFFFFFF0);
    v46 = (unsigned __int8 **)a12;
    if ((v48 && *(_BYTE *)(v48 + 16) == 32
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v48 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
       && (v48 = sub_22F10CF48(v48)) != 0)
      && sub_22E5761BC(v48)
      && (v219 & 1) == 0)
    {
      sub_22EFF605C(v33);
      sub_22E8FCA40((_QWORD *)a1, v49, 0x1A45u, 0, (uint64_t)v232);
      sub_22E903BEC(v232);
    }
    if (!v41)
      goto LABEL_85;
    goto LABEL_74;
  }
  v42 = *(_QWORD *)(v239 & 0xFFFFFFFFFFFFFFF0);
  if ((v42 && *(_BYTE *)(v42 + 16) == 32
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
     && (v42 = sub_22F10CF48(v42)) != 0)
    && sub_22E5761BC(v42)
    && (v24 & 1) == 0)
  {
    sub_22EFF605C(v33);
    sub_22E8FCA40((_QWORD *)a1, v43, 0xECEu, 0, (uint64_t)v233);
    sub_22E903BEC(v233);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a6 + 24), 0x15BAu, 0, (uint64_t)&v248);
    v242 = *(_QWORD *)(a6 + 40);
    sub_22E894538((uint64_t)&v248, &v242);
    sub_22E903BEC((unsigned int *)&v248);
  }
  v44 = *(_QWORD *)(v239 & 0xFFFFFFFFFFFFFFF0);
  if ((v44 && *(_BYTE *)(v44 + 16) == 32
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
     && (v44 = sub_22F10CF48(v44)) != 0)
    && sub_22E509ED0(v44)
    && (v24 & 1) == 0
    && (!sub_22F00175C((unsigned __int8 *)v33) || (*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 2) == 0))
  {
    sub_22EFF605C(v33);
    sub_22E8FCA40((_QWORD *)a1, v45, 0xECCu, 0, (uint64_t)&v248);
    if (!sub_22F00175C((unsigned __int8 *)v33))
    {
LABEL_60:
      sub_22E903BEC((unsigned int *)&v248);
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a6 + 24), 0x15BAu, 0, (uint64_t)&v248);
      v242 = *(_QWORD *)(a6 + 40);
      sub_22E894538((uint64_t)&v248, &v242);
      sub_22E903BEC((unsigned int *)&v248);
      goto LABEL_61;
    }
    v110 = v236;
    v111 = 0;
    v112 = *(_QWORD *)(sub_22EFDC9F0(a6) + 40);
    v113 = "";
    if ((v112 & 7) == 0)
    {
      v114 = v112 & 0xFFFFFFFFFFFFFFF8;
      if (v114)
      {
        v115 = *(_DWORD **)(v114 + 16);
        v116 = *v115;
        v113 = (const char *)(v115 + 4);
        v111 = v116;
      }
    }
    v244 = 0;
    *(_QWORD *)&v243[4] = 0;
    v246 = 0;
    v245 = 0uLL;
    v247 = 0;
    v242 = v110;
    v243[0] = 1;
    if (v111 >= 0x17)
    {
      if ((v111 | 7) == 0x17)
        v121 = (v111 & 0xFFFFFFF8) + 8;
      else
        v121 = v111 | 7;
      v122 = v113;
      v123 = (__int128 *)operator new(v121 + 1);
      v113 = v122;
      p_dst = v123;
      v241 = v121 - 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)&__dst = v123;
      *((_QWORD *)&__dst + 1) = v111;
    }
    else
    {
      HIBYTE(v241) = v111;
      p_dst = &__dst;
      if (!v111)
        goto LABEL_247;
    }
    memmove(p_dst, v113, v111);
LABEL_247:
    *((_BYTE *)p_dst + v111) = 0;
    v245 = __dst;
    v246 = v241;
    sub_22F334ACC((uint64_t *)&v248, &v242);
    if (SHIBYTE(v246) < 0)
      operator delete((void *)v245);
    v33 = v218;
    goto LABEL_60;
  }
LABEL_61:
  if (!(_DWORD)a4)
  {
    v220 = 1;
    v46 = (unsigned __int8 **)a12;
    if (!v41)
      goto LABEL_85;
    goto LABEL_74;
  }
  sub_22E8FCA40((_QWORD *)a1, a4, 0xECDu, 0, (uint64_t)&v248);
  v95 = *(_QWORD *)(v239 & 0xFFFFFFFFFFFFFFF0);
  if ((v95 && *(_BYTE *)(v95 + 16) == 32
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v95 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
     && (v95 = sub_22F10CF48(v95)) != 0)
    && sub_22E509ED0(v95))
  {
    v96 = 0;
    v97 = *(_QWORD *)(sub_22EFDC9F0(a6) + 40);
    v98 = "";
    if ((v97 & 7) == 0)
    {
      v99 = v97 & 0xFFFFFFFFFFFFFFF8;
      if (v99)
      {
        v100 = *(_DWORD **)(v99 + 16);
        v101 = *v100;
        v98 = (const char *)(v100 + 4);
        v96 = v101;
      }
    }
    v244 = 0;
    *(_QWORD *)&v243[4] = 0;
    v246 = 0;
    v245 = 0uLL;
    v247 = 0;
    v242 = a4 | (unint64_t)(a4 << 32);
    v243[0] = 1;
    if (v96 >= 0x17)
    {
      if ((v96 | 7) == 0x17)
        v118 = (v96 & 0xFFFFFFF8) + 8;
      else
        v118 = v96 | 7;
      v119 = v98;
      v120 = (__int128 *)operator new(v118 + 1);
      v98 = v119;
      v102 = v120;
      v241 = v118 - 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)&__dst = v120;
      *((_QWORD *)&__dst + 1) = v96;
      v46 = (unsigned __int8 **)a12;
    }
    else
    {
      HIBYTE(v241) = v96;
      v102 = &__dst;
      v46 = (unsigned __int8 **)a12;
      if (!v96)
      {
LABEL_238:
        *((_BYTE *)v102 + v96) = 0;
        v245 = __dst;
        v246 = v241;
        sub_22F334ACC((uint64_t *)&v248, &v242);
        if (SHIBYTE(v246) < 0)
          operator delete((void *)v245);
        goto LABEL_240;
      }
    }
    memmove(v102, v98, v96);
    goto LABEL_238;
  }
  v244 = 0;
  *(_QWORD *)&v243[4] = 0;
  v246 = 0x400000000000000;
  v245 = 0x666C6573uLL;
  v247 = 0;
  v242 = a4 | (unint64_t)(a4 << 32);
  v243[0] = 1;
  sub_22F334ACC((uint64_t *)&v248, &v242);
  if (SHIBYTE(v246) < 0)
    operator delete((void *)v245);
  v46 = (unsigned __int8 **)a12;
LABEL_240:
  v33 = v218;
  sub_22E903BEC((unsigned int *)&v248);
  sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(a6 + 24), 0x15BAu, 0, (uint64_t)&v248);
  v242 = *(_QWORD *)(a6 + 40);
  sub_22E894538((uint64_t)&v248, &v242);
  sub_22E903BEC((unsigned int *)&v248);
  v220 = 1;
  if (!v41)
    goto LABEL_85;
LABEL_74:
  v50 = *(_DWORD *)(v41 + 8);
  if ((v50 & 0x2000) == 0)
    goto LABEL_79;
  if (!(_DWORD)a4)
  {
    if ((sub_22EC2C5A0(a1, (unsigned __int8 *)v33) & 1) == 0)
    {
      if ((*(_BYTE *)(v41 + 9) & 0x80) == 0)
        goto LABEL_85;
      goto LABEL_83;
    }
    v51 = 6813;
    goto LABEL_78;
  }
  v104 = sub_22F40A264(*(_QWORD *)(v239 & 0xFFFFFFFFFFFFFFF0));
  if (!v104 || (v131 = sub_22F31179C(v104)) == 0)
  {
    v51 = 6812;
LABEL_78:
    v248 = 0;
    v52 = sub_22E90328C(a1);
    sub_22EFDC2D0(v52, (uint64_t *)&v248);
    sub_22E8FCA40((_QWORD *)a1, v224, v51, 0, (uint64_t)v231);
    sub_22E903BEC(v231);
    sub_22E8FCA40((_QWORD *)a1, v248[6], 0x16EEu, 0, (uint64_t)v230);
    sub_22E903BEC(v230);
    v50 = *(_DWORD *)(v41 + 8);
    v33 = v218;
LABEL_79:
    if ((v50 & 0x8000) == 0)
      goto LABEL_85;
    if ((_DWORD)a4)
      goto LABEL_81;
LABEL_83:
    if ((sub_22EC2C5A0(a1, (unsigned __int8 *)v33) & 1) != 0)
      *(_DWORD *)(v41 + 8) &= ~0x10000u;
    goto LABEL_85;
  }
  v132 = v131;
  if (((sub_22F3B4A28(v131) & 1) != 0 || sub_22EFDB060(v132)) && (sub_22EFDB5A0(v132, v238, 0) & 1) == 0)
  {
    v51 = 6812;
    v46 = (unsigned __int8 **)a12;
    goto LABEL_78;
  }
  v133 = *(_DWORD *)(v41 + 8);
  *(_DWORD *)(v41 + 8) = v133 & 0xFFFFBFFF;
  v46 = (unsigned __int8 **)a12;
  v33 = v218;
  if ((v133 & 0x8000) != 0)
  {
LABEL_81:
    sub_22E8FCA40((_QWORD *)a1, v224, 0x1AB7u, 0, (uint64_t)v229);
    sub_22E903BEC(v229);
  }
LABEL_85:
  v242 = 0;
  LODWORD(v235) = 0;
  v53 = *(_QWORD *)(v239 & 0xFFFFFFFFFFFFFFF0);
  if ((v53 && *(_BYTE *)(v53 + 16) == 32
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v53 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
     && (v53 = sub_22F10CF48(v53)) != 0)
    && sub_22E509ED0(v53))
  {
    v54 = 1;
  }
  else
  {
    v55 = *(_QWORD *)(v239 & 0xFFFFFFFFFFFFFFF0);
    v54 = (v55 && *(_BYTE *)(v55 + 16) == 32
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v55 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
        && (v55 = sub_22F10CF48(v55)) != 0)
       && sub_22E509F54(v55);
  }
  v56 = a7;
  if ((sub_22EC2B378((uint64_t *)a1, (unsigned __int8 *)v33, v239, v46, a13, v238, (unsigned int *)a9, a10, (_QWORD *)a6, v54, (_DWORD)a4 != 0, v213, a7, v236, (unint64_t *)&v242, &v235) & 1) != 0)return 1;
  if (!v220)
  {
    v60 = a1 + 72;
    if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 2) == 0)
      goto LABEL_114;
    v61 = sub_22F41F330(v238);
    goto LABEL_109;
  }
  v57 = *(_QWORD *)(a6 + 80);
  v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v57 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v58)
    v59 = (*(_DWORD *)(v58 + 16) & 0xFF800FF) == 86507531;
  else
    v59 = 0;
  if (v59 || (v248 = (int *)&unk_24FAB6EF8, LODWORD(v249) = 3559, v31 = 1, (sub_22EE8B0B0(a1, a7, v57) & 1) == 0))
  {
    v60 = a1 + 72;
    if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 2) == 0)
      goto LABEL_114;
    v61 = sub_22EFDBF50(a6);
LABEL_109:
    if (v61 <= 0xE)
    {
      if (((1 << v61) & 0xEC0) != 0)
      {
        sub_22E8FCA40((_QWORD *)a1, v224, 0xA62u, 0, (uint64_t)&v248);
        v62 = sub_22E894538((uint64_t)&v248, &v238);
        sub_22E8906A0(v62, (uint64_t *)&v236);
        goto LABEL_112;
      }
      if (v61 == 3)
      {
        if (v220)
          sub_22EAF2AC0(a1, a6, v239);
      }
      else
      {
        if (v61 != 14)
          goto LABEL_114;
        v77 = v220;
        if (!(_DWORD)a13)
          v77 = 0;
        if (v77 != 1)
          goto LABEL_114;
        v78 = *v46;
        do
        {
          v79 = (uint64_t)v78;
          v80 = *v78;
          if (v80 > 0xD5)
          {
            if (v80 == 233)
            {
              if ((*(_DWORD *)v78 & 0x7C0000) != 0x300000)
                goto LABEL_224;
              v80 = *(_DWORD *)v78;
              v82 = (unsigned __int8 **)(v78 + 16);
            }
            else
            {
              if (v80 != 214)
                break;
              v82 = (unsigned __int8 **)(v78 + 24);
            }
          }
          else if (v80 == 155)
          {
            if ((**((_DWORD **)v78 + 2) & 0x18000) != 0)
              goto LABEL_224;
            v82 = (unsigned __int8 **)(v78 + 24);
            if (!*(_BYTE *)(v79 + 48))
              v82 = (unsigned __int8 **)(v79 + 32);
            v80 = 155;
          }
          else
          {
            if (v80 != 176)
              break;
            v81 = *((unsigned int *)v78 + 5);
            if ((_DWORD)v81 == -1)
              goto LABEL_224;
            v82 = (unsigned __int8 **)&v78[8 * v81 + 40];
            v80 = 176;
          }
          v78 = *v82;
        }
        while (v78 != (unsigned __int8 *)v79);
        if (v80 != 207)
        {
LABEL_224:
          sub_22E8FCA40((_QWORD *)a1, v224, 0x183Au, 0, (uint64_t)v226);
          sub_22E903BEC(v226);
          sub_22EFF605C((uint64_t)*v46);
          sub_22E8FCA40((_QWORD *)a1, v105, 0x180Cu, 0, (uint64_t)v225);
          v63 = (unsigned int *)v225;
          goto LABEL_113;
        }
        v215 = *(_QWORD *)(v79 + 16);
        sub_22F0D4E74(v79);
        v84 = sub_22EAFB888(a1, v215, v83, 0, 1);
        if (!v84)
        {
          sub_22F0D4E74(v79);
          v84 = sub_22EAFB888(a1, v215, v85, 0, 0);
          if (!v84)
            goto LABEL_114;
        }
        v86 = v84;
        if (sub_22EFDBF50(v84) - 1 <= 4)
        {
          if (sub_22F32AD8C(v86))
            goto LABEL_114;
          sub_22E8FCA40((_QWORD *)a1, v224, 0xA71u, 0, (uint64_t)v228);
          v87 = (unsigned int *)v228;
          goto LABEL_320;
        }
        if (sub_22F24DC44(v86))
        {
          sub_22E8FCA40((_QWORD *)a1, v224, 0xA71u, 0, (uint64_t)v227);
          v87 = (unsigned int *)v227;
LABEL_320:
          sub_22E903BEC(v87);
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v86 + 24), 0x16B5u, 0, (uint64_t)&v248);
          *(_QWORD *)&__dst = *(_QWORD *)(v86 + 40);
          sub_22E894538((uint64_t)&v248, (uint64_t *)&__dst);
LABEL_112:
          v63 = (unsigned int *)&v248;
LABEL_113:
          sub_22E903BEC(v63);
        }
      }
    }
LABEL_114:
    sub_22EC30168((_QWORD *)a1, a6, v238, (uint64_t)v46, a13);
    v64 = *(_QWORD *)(a1 + 88);
    if ((_DWORD)a4)
    {
      v31 = sub_22F062D28(v64, v242, v235, v56, a4, 1, v239, v238, a9, a10, a6, (uint64_t)v46, a13, a11, 0, v219);
    }
    else
    {
      v31 = sub_22F062F54(v64, v242, v235, v56, v218, v238, a9, a10, a6, (uint64_t)v46, a13, a11, 0, v219);
      if ((v219 & 1) == 0)
        sub_22EC30328(a1, v31);
      v46 = (unsigned __int8 **)a12;
    }
    if (v220)
    {
      if (v218
        && sub_22EC2C5A0(a1, (unsigned __int8 *)v218)
        && ((v65 = *(_QWORD *)(v239 & 0xFFFFFFFFFFFFFFF0)) != 0 && *(_BYTE *)(v65 + 16) == 32
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v65 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
         && (v65 = sub_22F10CF48(v65)) != 0))
      {
        v66 = *(_QWORD *)(*(_QWORD *)(v65 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v66)
          v67 = *(unsigned __int8 *)(v66 + 16) - 35 > 0xFFFFFFFD;
        else
          v67 = 0;
        if (!v67)
          v66 = sub_22F10CF48(v66);
        v68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v66 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v68)
          v69 = (*(_DWORD *)(v68 + 16) & 0xFF800FF) == 115343371;
        else
          v69 = 0;
        if (v69)
        {
          v70 = sub_22E90328C(a1);
          if (v70)
          {
            v127 = *(_QWORD *)(a1 + 88);
            v128 = (uint64_t *)sub_22EFDC9F0(v70);
            v239 = sub_22F36D148(v127, v128, 0);
            v54 = 1;
          }
        }
      }
      sub_22EC305E4((_QWORD *)a1, v224, a6, v46, a13, v239, v54);
    }
    v71 = *(unsigned __int16 *)(*(_QWORD *)v60 + 148) | (*(unsigned __int8 *)(*(_QWORD *)v60 + 150) << 16);
    if ((*(_WORD *)(*(_QWORD *)v60 + 148) & 2) != 0)
    {
      if (sub_22F32FCE0(v31) == 3
        && ((_DWORD)a4 || sub_22EC2C5A0(a1, (unsigned __int8 *)v218)))
      {
        v103 = *(_QWORD *)(a1 + 216);
        if (v103)
        {
          if ((*(_WORD *)(v103 + 8) & 0x7F) == 0x18 && sub_22EFDBF50(v103 - 48) == 3)
          {
            *(_DWORD *)(v31 + 24) |= 0x2000000u;
            return v31;
          }
        }
      }
      sub_22E98F6A0(a1, v31);
      v71 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 72) + 148) | (*(unsigned __int8 *)(*(_QWORD *)(a1 + 72) + 150) << 16);
    }
    if ((v220 & (v219 ^ 1) & (v71 >> 3)) == 1)
    {
      v72 = sub_22EFDCBF0(a6, 1);
      if (v72)
      {
        v73 = v72;
        if ((*(_BYTE *)(v72 + 73) & 2) != 0
          || (v238 & 7) == 1
          && (v74 = *(_QWORD *)((v242 & 0xFFFFFFFFFFFFFFF0) + 8), (v74 & 8) != 0)
          && (*(_BYTE *)((v74 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xC0) != 0)
        {
          v75 = *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 576);
          if ((v75 > 3 || v75 == 2)
            && sub_22F1CF68C(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 32), 0x183Cu, v56, *(_QWORD *)(a1 + 104)) != 1)
          {
            v129 = *(unsigned int *)(a1 + 1904);
            if ((_DWORD)v129)
              v130 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v129 - 8);
            else
              v130 = 0;
            sub_22F30845C(v130, v31, v73);
          }
        }
      }
    }
    sub_22E98F2BC(a1, v31);
    return sub_22EBCC6C0(a1, v31);
  }
  return v31;
}

uint64_t sub_22EC2F730(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, int *a9, uint64_t a10, uint64_t a11, unsigned __int8 **a12, unsigned int a13, int a14, unsigned __int8 a15)
{
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  _BOOL4 v45;
  size_t v46;
  uint64_t v47;
  const char *v48;
  unint64_t v49;
  _DWORD *v50;
  unsigned int v51;
  __int128 *p_dst;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  int v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  BOOL v72;
  uint64_t *v73;
  uint64_t *v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v92;
  unsigned int v93;
  unint64_t v94;
  _QWORD *v95;
  unsigned int v97[24];
  unsigned int v98[25];
  int v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  uint64_t v103;
  char v104;
  __int128 __p;
  uint64_t v106;
  char v107;
  void *v108;
  uint64_t *v109;
  unint64_t *v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  __int128 __dst;
  uint64_t v115;

  v19 = a1;
  v20 = a10;
  v112 = a5;
  v113 = a3;
  v21 = a4;
  if ((_DWORD)a4)
    goto LABEL_16;
  v108 = (void *)*a2;
  v23 = (uint64_t)v108;
  v109 = a2 + 1;
  for (i = (uint64_t)v108; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_13;
      v25 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v25 <= 0x39)
        break;
LABEL_8:
      if (sub_22F115668(i))
        v23 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_15;
    }
    if (v25 == 24)
      goto LABEL_14;
    if (v25 == 26)
      break;
    if (((1 << v25) & 0x20000000200003CLL) == 0)
      goto LABEL_8;
LABEL_13:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_13;
LABEL_14:
  v23 = i;
LABEL_15:
  v21 = sub_22F115668(v23);
  sub_22F1167E8((uint64_t *)&v108);
  v19 = a1;
  v20 = a10;
LABEL_16:
  v111 = v21;
  if (!a7)
  {
    v26 = v20;
    v27 = v19;
    sub_22E8FCA40(v19, v21, 0xF57u, 0, (uint64_t)&v108);
    v103 = 0;
    v104 = 0;
    v106 = 0x100000000000000;
    v101 = v111 | ((unint64_t)v111 << 32);
    v102 = 0;
    __p = 0x5BuLL;
    v107 = 0;
    sub_22E890748((uint64_t)&v108, &v101);
    if (SHIBYTE(v106) < 0)
      operator delete((void *)__p);
    sub_22E903BEC((unsigned int *)&v108);
    v21 = v111;
    a7 = v111;
    v19 = v27;
    v20 = v26;
  }
  if (v20 && *a9)
  {
    v21 = *a9;
    v28 = (unsigned int *)a9;
    v29 = v20;
  }
  else
  {
    v28 = &v111;
    v29 = 1;
  }
  v30 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v30 + 17) & 4) != 0)
    return sub_22F062E40(v19[11], a3, 0, a7, (uint64_t)a2, a5, a9, v20, 0, (uint64_t)a12, a13, a11, 0, a15);
  v90 = v20;
  v95 = v19;
  v31 = sub_22E4EBB74(v30);
  if (!v31 || (v35 = sub_22F272660(v31)) == 0)
  {
    sub_22E8FCA40(v95, v111, 0xE60u, 0, (uint64_t)&v108);
    sub_22E8901B8((uint64_t)&v108, &v113);
    sub_22E903BEC((unsigned int *)&v108);
    return 1;
  }
  v89 = (uint64_t *)v35;
  v36 = v95;
  if ((*(_BYTE *)(v95[9] + 1) & 1) == 0)
  {
    sub_22EB17F48(v95, v35, v28, v29, 0, 0, 0, 0);
    v36 = v95;
  }
  v37 = a6;
  if (a6)
  {
LABEL_35:
    v100 = 0;
    v99 = 0;
    v38 = a13;
    v32 = 1;
    HIBYTE(v85) = (_DWORD)a4 != 0;
    LOBYTE(v85) = 1;
    if ((sub_22EC2B378(v36, 0, a3, a12, a13, a5, a9, v90, v37, v85, a7, 0, &v100, &v99) & 1) != 0)
      return v32;
    v39 = a11;
    v40 = v37;
    v41 = a15;
    if (!v40)
      goto LABEL_68;
    v42 = *(_QWORD *)(v40 + 80);
    v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v43)
      v44 = (*(_DWORD *)(v43 + 16) & 0xFF800FF) == 86507531;
    else
      v44 = 0;
    if (!v44)
    {
      v108 = &unk_24FAB6EF8;
      LODWORD(v109) = 3559;
      v32 = 1;
      if ((sub_22EE8B0B0((uint64_t)v95, a7, v42) & 1) != 0)
        return v32;
    }
    v45 = sub_22EFDBD9C(v40);
    if ((_DWORD)a4 && v45)
    {
      sub_22E8FCA40(v95, a4, 0xECDu, 0, (uint64_t)&v108);
      if ((*(_WORD *)(v95[9] + 148) & 2) != 0)
      {
        v48 = "self";
        v46 = 4;
      }
      else
      {
        v46 = 0;
        v47 = *(_QWORD *)(sub_22EFDC9F0(v40) + 40);
        v48 = "";
        if ((v47 & 7) == 0)
        {
          v49 = v47 & 0xFFFFFFFFFFFFFFF8;
          if (v49)
          {
            v50 = *(_DWORD **)(v49 + 16);
            v51 = *v50;
            v48 = (const char *)(v50 + 4);
            v46 = v51;
          }
        }
      }
      v104 = 0;
      v103 = 0;
      v107 = 0;
      v101 = a4 | (unint64_t)(a4 << 32);
      v102 = 1;
      if (v46 >= 0x17)
      {
        v53 = v40;
        if ((v46 | 7) == 0x17)
          v54 = (v46 & 0xFFFFFFF8) + 8;
        else
          v54 = v46 | 7;
        p_dst = (__int128 *)operator new(v54 + 1);
        v55 = v54 - 0x7FFFFFFFFFFFFFFFLL;
        v40 = v53;
        v41 = a15;
        *((_QWORD *)&__dst + 1) = v46;
        v115 = v55;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v115) = v46;
        p_dst = &__dst;
        if (!v46)
        {
LABEL_59:
          v39 = a11;
          *((_BYTE *)p_dst + v46) = 0;
          __p = __dst;
          v106 = v115;
          sub_22E890748((uint64_t)&v108, &v101);
          if (SHIBYTE(v106) < 0)
            operator delete((void *)__p);
          sub_22E903BEC((unsigned int *)&v108);
          sub_22E8FCA40(v95, *(_DWORD *)(v40 + 24), 0x15BAu, 0, (uint64_t)&v108);
          v101 = *(_QWORD *)(v40 + 40);
          sub_22E894538((uint64_t)&v108, (uint64_t *)&v101);
          sub_22E903BEC((unsigned int *)&v108);
          v38 = a13;
          goto LABEL_62;
        }
      }
      memmove(p_dst, v48, v46);
      goto LABEL_59;
    }
LABEL_62:
    if (sub_22EFDBF50(v40) == 13)
    {
      if ((_DWORD)a4)
      {
        v56 = (uint64_t)v95;
        v57 = sub_22E90328C((uint64_t)v95);
        if (v57)
        {
          v58 = v57;
          if (sub_22EFDBF50(v57) != 13)
          {
            sub_22E8FCA40(v95, v111, 0x1974u, 0, (uint64_t)v97);
            sub_22E903BEC(v97);
            sub_22E8FCA40(v95, *(_DWORD *)(v40 + 24), 0x16B5u, 0, (uint64_t)&v108);
            v101 = *(_QWORD *)(v40 + 40);
            sub_22E894538((uint64_t)&v108, (uint64_t *)&v101);
            sub_22E903BEC((unsigned int *)&v108);
            sub_22E8FCA40(v95, *(_DWORD *)(v58 + 24), 0x16B5u, 0, (uint64_t)&v108);
            v101 = *(_QWORD *)(v58 + 40);
            sub_22E894538((uint64_t)&v108, (uint64_t *)&v101);
            sub_22E903BEC((unsigned int *)&v108);
          }
        }
        v59 = (uint64_t)a12;
        sub_22EC30168(v95, v40, v112, (uint64_t)a12, a13);
LABEL_69:
        v60 = sub_22F062D28(*(_QWORD *)(v56 + 88), v100, v99, a7, a4, 0, v113, v112, a9, v90, v40, v59, v38, v39, SHIDWORD(v39), v41);
LABEL_82:
        if (v40)
          sub_22EC305E4(v95, v21, v40, a12, v38, v113, 1);
        return sub_22EBCC6C0((uint64_t)v95, v60);
      }
      v61 = *(_QWORD *)(v40 + 16);
      v62 = v61 & 0xFFFFFFFFFFFFFFF8;
      v63 = v95;
      if ((v61 & 4) != 0)
        v62 = *(_QWORD *)v62;
      v64 = *(_WORD *)(v62 + 8) & 0x7F;
      if (v62)
        v65 = (uint64_t *)(v62 - 48);
      else
        v65 = 0;
      if (v64 != 22)
        v65 = 0;
      if (v65 == v89)
      {
        sub_22E8FCA40(v95, v111, 0x1972u, 0, (uint64_t)v98);
        sub_22E903BEC(v98);
        sub_22E8FCA40(v95, *(_DWORD *)(v40 + 24), 0x16B5u, 0, (uint64_t)&v108);
        v101 = *(_QWORD *)(v40 + 40);
        sub_22E894538((uint64_t)&v108, (uint64_t *)&v101);
        sub_22E903BEC((unsigned int *)&v108);
        v63 = v95;
      }
      v59 = (uint64_t)a12;
      v56 = (uint64_t)v63;
      sub_22EC30168(v63, v40, v112, (uint64_t)a12, a13);
    }
    else
    {
LABEL_68:
      v56 = (uint64_t)v95;
      v59 = (uint64_t)a12;
      sub_22EC30168(v95, v40, v112, (uint64_t)a12, a13);
      if ((_DWORD)a4)
        goto LABEL_69;
    }
    v60 = sub_22F062E40(*(_QWORD *)(v56 + 88), v100, v99, a7, (uint64_t)a2, v112, a9, v90, v40, v59, v38, v39, SHIDWORD(v39), v41);
    if ((v41 & 1) == 0)
      sub_22EC30328(v56, v60);
    goto LABEL_82;
  }
  if ((_DWORD)a4)
  {
    LODWORD(v101) = a4;
    HIDWORD(v101) = a4;
    goto LABEL_101;
  }
  v66 = a2 + 1;
  v108 = (void *)*a2;
  v67 = (uint64_t)v108;
  v109 = a2 + 1;
  v68 = (uint64_t)v108;
  v69 = a2 + 1;
  while (2)
  {
    v92 = v66;
    while (2)
    {
      if ((v68 & 0xF) != 0)
        goto LABEL_94;
      v70 = *(unsigned __int8 *)(*(_QWORD *)(v68 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v70 > 0x39)
        break;
      if (v70 == 24)
      {
LABEL_114:
        v67 = v68;
        goto LABEL_100;
      }
      if (v70 == 26)
      {
        if ((*(_BYTE *)(v68 + 23) & 0x10) != 0)
          goto LABEL_114;
        goto LABEL_94;
      }
      if (((1 << v70) & 0x20000000200003CLL) != 0)
      {
LABEL_94:
        v68 = sub_22F115B7C(v68);
        v69 = v71;
        continue;
      }
      break;
    }
    v86 = v68;
    v87 = v69;
    v72 = sub_22F115668(v68) == 0;
    if (!v72)
      v67 = v86;
    v88 = v67;
    v73 = v92;
    if (!v72)
      v73 = v87;
    v68 = sub_22F115B7C(v86);
    v69 = v74;
    v66 = v73;
    v67 = v88;
    if (v68)
      continue;
    break;
  }
LABEL_100:
  v75 = sub_22F115668(v67);
  v101 = v75 | ((unint64_t)sub_22F1167E8((uint64_t *)&v108) << 32);
  v36 = v95;
LABEL_101:
  v93 = v111;
  v76 = (uint64_t)v36;
  v77 = sub_22F36D148(v36[11], v89, 0);
  if ((*(_WORD *)(*(_QWORD *)(v76 + 72) + 148) & 2) != 0)
    v78 = 2675;
  else
    v78 = 6938;
  v108 = &unk_24FAB6EA8;
  LODWORD(v109) = v78;
  v110 = &v101;
  if (!sub_22EE8B0B0(v76, v93, v77)
    || (v79 = sub_22EAFB888((uint64_t)v95, a5, a7 | (unint64_t)(a11 << 32), 0, 0)) == 0)
  {
    v83 = sub_22EFDBA90((unint64_t)v89, a5, 0, 0, 1, 0);
    v82 = v89;
    v80 = v83;
    v81 = v95;
    if (v83)
      goto LABEL_110;
    v84 = sub_22F3B4D74((uint64_t)v89, &v112, 0);
    v82 = v89;
    v81 = v95;
    v80 = v84;
    if (v84)
      goto LABEL_110;
    v94 = 0;
LABEL_111:
    v37 = v94;
    v36 = v95;
    goto LABEL_35;
  }
  v80 = v79;
  v81 = v95;
  if ((*(_WORD *)(v95[9] + 148) & 2) == 0)
  {
    sub_22E8FCA40(v95, *(_DWORD *)(v79 + 24), 0x16B7u, 0, (uint64_t)&v108);
    *(_QWORD *)&__dst = *(_QWORD *)(v80 + 40);
    sub_22E894538((uint64_t)&v108, (uint64_t *)&__dst);
    sub_22E903BEC((unsigned int *)&v108);
    v81 = v95;
  }
  v82 = v89;
LABEL_110:
  v94 = v80;
  if (!sub_22EB17F48(v81, v80, v28, v29, 0, 0, 0, v82))
    goto LABEL_111;
  return 1;
}

uint64_t sub_22EC30168(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t result;
  unsigned int v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24[24];

  result = sub_22F41F810(a3);
  if ((_DWORD)result == 1)
  {
    v10 = 0;
LABEL_3:
    if (v10 < a5)
    {
      v11 = *(unsigned __int8 **)(a4 + 8 * v10);
      result = (uint64_t)sub_22EFFA6B0(v11);
      if (*(unsigned __int8 *)result == 204)
      {
        result = sub_22E986A40((uint64_t)a1, *(int **)(result + 16));
        if ((_DWORD)result)
        {
          sub_22EFF605C((uint64_t)v11);
          sub_22E8FCA40(a1, v12, 0x1A98u, 0, (uint64_t)v24);
          v13 = sub_22F2F30F4((uint64_t)v24, (uint64_t)"%s");
          LODWORD(v22) = 0;
          v14 = sub_22E8900C4(v13, (int *)&v22);
          v23 = 0;
          sub_22E8900C4(v14, &v23);
          result = (uint64_t)sub_22E903BEC(v24);
          if (a2)
          {
            sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x16B5u, 0, (uint64_t)v24);
            v22 = *(_QWORD *)(a2 + 40);
            sub_22E894538((uint64_t)v24, &v22);
            return (uint64_t)sub_22E903BEC(v24);
          }
        }
      }
    }
  }
  else if (a2)
  {
    result = sub_22E47E5E0(a2);
    v15 = (uint64_t *)result;
    v17 = v16;
    while (1)
    {
      v18 = v15;
      if (v15 >= v17)
      {
        if (v15 == v17)
          return result;
        v19 = v17;
        while (*(_WORD *)(*v19 + 32) != 179)
        {
          if (++v19 == v15)
            return result;
        }
        v18 = v15;
      }
      else
      {
        while (*(_WORD *)(*v18 + 32) != 179)
        {
          if (++v18 == v17)
            return result;
        }
        v19 = v17;
      }
      if (v18 == v19)
        break;
      do
      {
        v21 = *v15++;
        v20 = v21;
      }
      while (*(_WORD *)(v21 + 32) != 179);
      result = sub_22E97DF98(v20);
      if ((_DWORD)result == 2)
      {
        v10 = *(_DWORD *)(v20 + 48) - 1;
        goto LABEL_3;
      }
    }
  }
  return result;
}

void sub_22EC30328(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  void *__p;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32[4];
  _BYTE v33[56];
  uint64_t v34;
  _QWORD v35[4];
  char v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[448];
  _QWORD v40[4];
  _QWORD v41[6];
  _QWORD v42[3];

  v42[2] = *MEMORY[0x24BDAC8D0];
  sub_22EFF605C(a2);
  v5 = v4;
  if (sub_22F1CF68C(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 32), 0x1AB2u, v4, *(_QWORD *)(a1 + 104)) != 1)
  {
    v6 = *(_QWORD **)(a1 + 112);
    v7 = *(_QWORD *)(a1 + 72);
    v35[0] = v6;
    v35[1] = v7;
    v35[2] = 0;
    v35[3] = 0;
    v36 = 1;
    v37 = v39;
    v38 = 0x800000000;
    v40[1] = 0;
    v40[0] = 0;
    v40[2] = v41;
    v40[3] = 0x400000000;
    v41[4] = v42;
    v42[0] = 0;
    v41[5] = 0;
    v42[1] = 1;
    if (sub_22EF52818(a2, *(_QWORD **)(a1 + 3440), (uint64_t)v35))
    {
      sub_22E8FCA40((_QWORD *)a1, v5, 0x1AB2u, 0, (uint64_t)&v24);
      v8 = (_QWORD *)(a2 + 16);
      if ((*(_BYTE *)(a2 + 27) & 1) != 0)
        v8 = (_QWORD *)(*v8 + 40);
      v23 = *v8;
      v9 = sub_22E894538((uint64_t)&v24, &v23);
      sub_22F0D4E74(a2);
      v22 = v10;
      v11 = sub_22E8906A0(v9, &v22);
      v12 = *(_OWORD *)(v11 + 9);
      *(_OWORD *)v32 = *(_OWORD *)v11;
      *(_OWORD *)((char *)&v32[1] + 1) = v12;
      v33[0] = 0;
      v33[48] = 0;
      if (*(_BYTE *)(v11 + 80))
        sub_22E907424((uint64_t)v33, v11 + 32);
      v34 = *(_QWORD *)(v11 + 88);
      sub_22E903BEC((unsigned int *)&v24);
      if (v36 && (_DWORD)v38)
      {
        v13 = (char *)v37;
        v14 = 56 * v38;
        while (1)
        {
          v15 = *(_DWORD *)v13;
          if (*(_DWORD *)v13 == 2)
          {
            v16 = sub_22EF4D3DC((unsigned int *)v13, v6);
            v26 = 0;
            v27 = 0;
            v29 = 0;
            v30 = 0;
            __p = 0;
            v31 = 0;
            v24 = v16;
            v25 = v17;
            goto LABEL_18;
          }
          if (v15 == 1)
            break;
          if (!v15)
          {
            sub_22E729148(*((void **)v13 + 1), *((_QWORD *)v13 + 2), *((_DWORD *)v13 + 6), v13[48], (uint64_t)&v24);
LABEL_18:
            sub_22F334ACC(v32, &v24);
            if (SHIBYTE(v30) < 0)
              operator delete(__p);
          }
          v13 += 56;
          v14 -= 56;
          if (!v14)
            goto LABEL_20;
        }
        v18 = *((unsigned int *)v13 + 6);
        v19 = sub_22EF4D434((unsigned int *)v13, v6);
        v20 = v13[48];
        v29 = 0;
        v30 = 0;
        __p = 0;
        v24 = v18 | (v18 << 32);
        v25 = 0;
        v26 = v19;
        v27 = v21;
        v31 = v20;
        goto LABEL_18;
      }
LABEL_20:
      sub_22E903BEC((unsigned int *)v32);
    }
    sub_22E3B4EF4((uint64_t)v40);
    if (v37 != v39)
      free(v37);
  }
}

unsigned int *sub_22EC305E4(_QWORD *a1, int a2, uint64_t a3, unsigned __int8 **a4, uint64_t a5, uint64_t a6, char a7)
{
  unsigned int *result;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  uint64_t *v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38[12];
  uint64_t v39;

  result = (unsigned int *)sub_22F41F330(*(_QWORD *)(a3 + 40));
  if ((_DWORD)result != 14 || a5 == 0)
    return result;
  v16 = *a4;
  if (!*a4)
  {
    v17 = 0;
    goto LABEL_26;
  }
  do
  {
    v17 = v16;
    v18 = *v16;
    if (v18 > 0xD5)
    {
      if (v18 == 233)
      {
        if ((*(_DWORD *)v16 & 0x7C0000) != 0x300000)
          return result;
        v18 = *(_DWORD *)v16;
        v20 = v16 + 16;
      }
      else
      {
        if (v18 != 214)
          break;
        v20 = v16 + 24;
      }
    }
    else if (v18 == 155)
    {
      if ((**((_DWORD **)v16 + 2) & 0x18000) != 0)
        return result;
      v20 = v16 + 24;
      if (!v17[48])
        v20 = v17 + 32;
      v18 = 155;
    }
    else
    {
      if (v18 != 176)
        break;
      v19 = *((unsigned int *)v16 + 5);
      if ((_DWORD)v19 == -1)
        return result;
      v20 = &v16[8 * v19 + 40];
      v18 = 176;
    }
    v16 = *(unsigned __int8 **)v20;
  }
  while (v16 != v17);
  if (v18 == 207)
  {
LABEL_26:
    v21 = *(_QWORD *)(a6 & 0xFFFFFFFFFFFFFFF0);
    if ((a7 & 1) != 0)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (!v22 || *(_BYTE *)(v22 + 16) != 34)
        return result;
      v23 = sub_22F409D88(v22);
      result = (unsigned int *)sub_22EFDBA90(v23, *((_QWORD *)v17 + 2), 0, 0, 1, 0);
      v24 = result;
      if (result)
        goto LABEL_30;
      v33 = sub_22F409D88(v22);
      v38[0] = *((_QWORD *)v17 + 2);
      v34 = 0;
    }
    else
    {
      if (!v21 || *(_BYTE *)(v21 + 16) != 32)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
          return result;
        result = (unsigned int *)sub_22F10CF48(v21);
        if (!result)
          return result;
        v21 = (uint64_t)result;
      }
      result = (unsigned int *)sub_22F31179C(v21);
      if (!result)
        return result;
      v32 = sub_22F31179C(v21);
      result = (unsigned int *)sub_22EFDBA90(v32, *((_QWORD *)v17 + 2), 1, 0, 1, 0);
      v24 = result;
      if (result)
        goto LABEL_30;
      v33 = sub_22F31179C(v21);
      v38[0] = *((_QWORD *)v17 + 2);
      v34 = 1;
    }
    result = (unsigned int *)sub_22F3B4D74(v33, v38, v34);
    v24 = result;
    if (!result)
      return result;
LABEL_30:
    v39 = *((_QWORD *)v24 + 10);
    v25 = (uint64_t *)(v39 & 0xFFFFFFFFFFFFFFF0);
    v26 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16);
    v27 = v26 > 0x38;
    v28 = (1 << v26) & 0x180200000000000;
    if (!v27 && v28 != 0)
    {
      sub_22E8FCA40(a1, a2, 0x1ABBu, 0, (uint64_t)v38);
      v37 = *(_QWORD *)(a3 + 40);
      v30 = sub_22E894538((uint64_t)v38, &v37);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v25 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
        v31 = sub_22F10E06C(*v25);
      else
        v31 = 2;
      v36 = v31;
      sub_22E8900C4(v30, &v36);
      sub_22E903BEC((unsigned int *)v38);
      sub_22E8FCA40(a1, v24[6], 0x16F4u, 0, (uint64_t)v38);
      v37 = *((_QWORD *)v24 + 5);
      v35 = sub_22E894538((uint64_t)v38, &v37);
      sub_22E8901B8(v35, &v39);
      return sub_22E903BEC((unsigned int *)v38);
    }
  }
  return result;
}

uint64_t sub_22EC308F4(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5, int *a6, uint64_t a7, uint64_t a8, unsigned __int8 **a9, unint64_t a10)
{
  unsigned int v10;
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  if (!a3)
    return 1;
  v10 = a8;
  v15 = (unint64_t)a3;
  if (*a3 == 215)
  {
    v17 = sub_22EB29350((_QWORD *)a1, a2, a3);
    if ((v17 & 1) != 0)
      return 1;
    v15 = v17 & 0xFFFFFFFFFFFFFFFELL;
  }
  v18 = *(_QWORD *)(a1 + 3672);
  if (!v18)
  {
    v18 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(a1 + 88) + 15192), "respondsToSelector", 0x12uLL) | 2;
    *(_QWORD *)(a1 + 3672) = v18;
  }
  if (v18 == a4)
  {
    v19 = sub_22EFFBBCC(*a9);
    if (*v19 == 207)
    {
      v23 = *((_QWORD *)v19 + 2);
      v24 = 0;
      v22 = *((_DWORD *)v19 + 6);
      if (sub_22F2BDD74((uint64_t *)(a1 + 8584), &v23, &v24))
      {
        if (v24 != *(_QWORD *)(a1 + 8584) + 16 * *(unsigned int *)(a1 + 8600))
        {
          v21 = *(_QWORD *)(a1 + 8608) + 16 * *(unsigned int *)(v24 + 8);
          if (v21 != *(_QWORD *)(a1 + 8616) && *(_DWORD *)(v21 + 8) == v22)
            sub_22EC34CF8(a1 + 8584, (_QWORD *)v21);
        }
      }
    }
  }
  return sub_22EC2DA20(a1, v15, *(_QWORD *)(v15 + 8), 0, a4, 0, a5, a8, a6, a7, v10, (uint64_t)a9, a10, 0);
}

uint64_t sub_22EC30A7C(uint64_t result, unint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  int v6;
  int v7;
  int v8;
  char v9;
  unsigned __int8 v10;
  char v11;
  unsigned __int8 v12;

  if ((*(_BYTE *)(*(_QWORD *)(result + 72) + 1) & 0x40) != 0)
  {
    v5 = (_QWORD *)result;
    v6 = sub_22EC30C10(*(_QWORD *)(a3 + 8));
    result = sub_22EC30C10(a2);
    if ((_DWORD)result == 1 && v6 == 4)
    {
      v12 = 0;
      result = sub_22EC30E3C(v5, a2, a3, &v12, 0);
      v7 = v12;
      if (!(_DWORD)result || !v12)
      {
        v11 = 0;
        result = sub_22EC313A0(v5, a2, a3, &v11, 0);
        if (!(_DWORD)result || !v11)
        {
          if (v7)
          {
            return sub_22EC30E3C(v5, a2, a3, &v12, 1);
          }
          else if (v11)
          {
            return sub_22EC313A0(v5, a2, a3, &v11, 1);
          }
        }
      }
    }
    else if ((_DWORD)result == 4 && v6 == 1)
    {
      v10 = 0;
      result = sub_22EC31904(v5, a2, a3, &v10, 0);
      v8 = v10;
      if (!(_DWORD)result || !v10)
      {
        v9 = 0;
        result = sub_22EC31DD0(v5, a2, a3, &v9, 0);
        if (!(_DWORD)result || !v9)
        {
          if (v8)
          {
            return sub_22EC31904(v5, a2, a3, &v10, 1);
          }
          else if (v9)
          {
            return sub_22EC31DD0(v5, a2, a3, &v9, 1);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22EC30C10(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  char i;
  char v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  int v16;

  v1 = a1;
  v2 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  if (v2 && (v3 = *(_DWORD *)(v2 + 16), (v3 & 0xFE) == 0x28))
  {
    if ((v3 & 0x100000) != 0)
      goto LABEL_4;
  }
  else
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
      || (v2 = sub_22F10CF48(v2)) == 0)
    {
      i = 0;
      goto LABEL_15;
    }
    for (; (*(_DWORD *)(v2 + 16) & 0x100000) != 0; v2 = sub_22F10CF48(v2))
    {
LABEL_4:
      while (1)
      {
        v2 = *(_QWORD *)(*(_QWORD *)(v2 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v2)
          break;
        v4 = *(_DWORD *)(v2 + 16);
        if ((v4 & 0xFE) != 0x28)
          break;
        if ((v4 & 0x100000) == 0)
          goto LABEL_13;
      }
    }
  }
LABEL_13:
  v1 = *(_QWORD *)(v2 + 32);
  for (i = 1; ; i = 1)
  {
    while (1)
    {
LABEL_15:
      v6 = i;
      v7 = v1 & 0xFFFFFFFFFFFFFFF0;
      v8 = *(_QWORD *)v7;
      v9 = *(unsigned __int8 *)(*(_QWORD *)v7 + 16);
      if (*(_QWORD *)v7 && v9 == 39)
        goto LABEL_19;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
        break;
      v8 = sub_22F10CF48(v8);
      if (!v8)
      {
        v8 = *(_QWORD *)v7;
        v9 = *(_DWORD *)(*(_QWORD *)v7 + 16);
        break;
      }
LABEL_19:
      v1 = *(_QWORD *)(v8 + 32);
      i = 1;
      if ((v6 & 1) == 0)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v10)
          v11 = (*(_DWORD *)(v10 + 16) & 0xFF800FF) == 86507531;
        else
          v11 = 0;
        if (v11)
          return 3;
        i = 1;
        if (*(_DWORD *)(v10 + 16) == 45)
          return 4;
      }
    }
    if ((v9 & 0xFEu) - 6 < 0xFFFFFFFC)
    {
      v12 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0;
      if ((*(_DWORD *)(*(_QWORD *)v12 + 16) & 0xFEu) - 2 > 3)
        goto LABEL_39;
      v8 = sub_22F10CF48(v8);
      if (!v8)
        break;
    }
    while (1)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(v8 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v13)
        v14 = (*(_DWORD *)(v13 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
      else
        v14 = 0;
      v8 = *(_QWORD *)(*(_QWORD *)(v8 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (!v14)
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
          break;
        v8 = sub_22F10CF48(v13);
        if (!v8)
          break;
      }
    }
    v1 = v13 & 0xFFFFFFFFFFFFFFF0;
  }
  v12 = *(_QWORD *)(*(_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFFFF0;
LABEL_39:
  v16 = *(unsigned __int8 *)(*(_QWORD *)v12 + 16);
  result = v16 == 32 || v16 == 10;
  if ((v6 & 1) != 0)
  {
    if ((_DWORD)result)
      return 2;
    else
      return 0;
  }
  return result;
}

uint64_t sub_22EC30E3C(_QWORD *a1, uint64_t a2, uint64_t a3, _BYTE *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  unint64_t v29;
  _DWORD *v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  unsigned int *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  unint64_t v50;
  _DWORD *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55[24];
  _BYTE v56[96];
  unsigned int v57[24];
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  unsigned int v61[24];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _BYTE v68[64];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  int v74;
  _QWORD v75[3];
  __int16 v76;
  int v77;
  char v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v63 = *(_QWORD *)(a3 + 8);
  v5 = v63;
  v64 = a2;
  *a4 = 0;
  v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
  v7 = 1;
  if (v6 && *(_BYTE *)(v6 + 16) == 50)
  {
    while (1)
    {
      v13 = *(_QWORD *)(v6 + 24);
      v14 = sub_22EC366C4(*(_QWORD *)(v13 + 80));
      if (v14)
        break;
      v63 = *(_QWORD *)((*(_QWORD *)(v13 + 80) & 0xFFFFFFFFFFFFFFF8)
                      + ((2 * *(_QWORD *)(v13 + 80)) & 8));
      v6 = *(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0);
      if (!v6 || *(_BYTE *)(v6 + 16) != 50)
        return v7;
    }
    v15 = *(_QWORD *)(v14 + 40);
    v62 = v15;
    v7 = v15 != 0;
    if (v15)
    {
      *a4 = 1;
      v16 = *(_QWORD *)(v15 + 16);
      if (*(_DWORD *)v16 != 2 || *(_WORD *)(v16 + 16) != 25705)
      {
        v65 = 0;
        v66 = v68;
        v67 = 0x800000000;
        v69 = 0;
        v70 = 0;
        v71 = 0;
        v72 = a1;
        v73 = v15;
        v74 = 0;
        sub_22EFC6D6C((uint64_t)v75, v15);
        v75[1] = 0;
        v75[2] = 0;
        v76 = 0;
        v77 = 257;
        v78 = 0;
        sub_22EC56024((uint64_t)&v65);
        if (!sub_22EC63520(a1, &v65, a1[418], 0, 0))
        {
          v35 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
          if ((!v35 || *(_BYTE *)(v35 + 16) != 32)
            && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32
             || (v35 = sub_22F10CF48(v35)) == 0)
            || !sub_22E5761BC(v35))
          {
            sub_22F0D5A50(a3);
            sub_22E8FCA40(a1, v36, 0xFF0u, 0, (uint64_t)v61);
            v59 = *(const char **)(a3 + 8);
            v37 = sub_22E8901B8((uint64_t)v61, (uint64_t *)&v59);
            sub_22E8BAE44(v37, &v62);
            sub_22E903BEC(v61);
            sub_22E8FCA40(a1, *(_DWORD *)(v13 + 56), 0x64u, 0, (uint64_t)v55);
            sub_22E903BEC(v55);
          }
          goto LABEL_37;
        }
        v17 = *v66 & 0xFFFFFFFFFFFFFFFCLL;
        v18 = *(_DWORD *)(v17 + 28);
        if ((v18 & 0x7Fu) <= 0x2F && ((1 << (v18 & 0x7F)) & 0xC00000060000) != 0)
        {
          v20 = sub_22EFBAEA4(*v66 & 0xFFFFFFFFFFFFFFFCLL);
          if (!v20)
            goto LABEL_37;
          v17 = v20;
          v18 = *(_DWORD *)(v20 + 28);
        }
        if ((v18 & 0x7F) == 0x16)
        {
          v21 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
          v22 = sub_22F40A264(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
          if (v22)
          {
            v39 = *(_QWORD *)(*(_QWORD *)(v22 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v39 || *(unsigned __int8 *)(v39 + 16) - 35 <= 0xFFFFFFFD)
              v39 = sub_22F10CF48(v39);
            v40 = sub_22F272660(v39);
            if (v40 != v17)
            {
              v41 = v40;
              if (!v40)
              {
                if (!a5)
                  goto LABEL_61;
LABEL_62:
                sub_22F0D5A50(a3);
                sub_22E8FCA40(a1, v45, 0x1AA1u, 0, (uint64_t)v61);
                v46 = sub_22E8901B8((uint64_t)v61, &v63);
                v47 = 0;
                v48 = *(_QWORD *)(v17 + 40);
                v49 = "";
                if ((v48 & 7) == 0)
                {
                  v50 = v48 & 0xFFFFFFFFFFFFFFF8;
                  if (v50)
                  {
                    v51 = *(_DWORD **)(v50 + 16);
                    v52 = *v51;
                    v49 = (const char *)(v51 + 4);
                    v47 = v52;
                  }
                }
                v59 = v49;
                v60 = v47;
                v53 = sub_22F2F2210(v46, (uint64_t)&v59);
                v58 = sub_22F10ACF8(*(_QWORD *)(v64 & 0xFFFFFFFFFFFFFFF0));
                sub_22E8901B8(v53, &v58);
                v34 = v61;
LABEL_30:
                sub_22E903BEC(v34);
LABEL_61:
                v7 = 0;
                goto LABEL_38;
              }
              v42 = v17;
              while (1)
              {
                v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 32))(v41);
                if (v43 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)v42 + 32))(v42))
                  break;
                v44 = sub_22F3B46CC(v42);
                v42 = v44;
                v7 = v44 != 0;
                if (v44 == v41 || !v44)
                {
                  if (v44 || !a5)
                    goto LABEL_38;
                  goto LABEL_62;
                }
              }
            }
          }
          else
          {
            v23 = *v21;
            if ((!*v21 || *(_BYTE *)(v23 + 16) != 32)
              && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32
               || (v23 = sub_22F10CF48(v23)) == 0)
              || !sub_22E5761BC(v23))
            {
              v7 = sub_22EF670E0(a1[11], a2, v17);
              if ((v7 & 1) != 0 || !a5)
                goto LABEL_38;
              sub_22F0D5A50(a3);
              sub_22E8FCA40(a1, v24, 0x1AA1u, 0, (uint64_t)v61);
              v25 = sub_22E8901B8((uint64_t)v61, &v63);
              v26 = 0;
              v27 = *(_QWORD *)(v17 + 40);
              v28 = "";
              if ((v27 & 7) == 0)
              {
                v29 = v27 & 0xFFFFFFFFFFFFFFF8;
                if (v29)
                {
                  v30 = *(_DWORD **)(v29 + 16);
                  v31 = *v30;
                  v28 = (const char *)(v30 + 4);
                  v26 = v31;
                }
              }
              v59 = v28;
              v60 = v26;
              v32 = sub_22F2F2210(v25, (uint64_t)&v59);
              sub_22E8901B8(v32, &v64);
              sub_22E903BEC(v61);
              sub_22E8FCA40(a1, *(_DWORD *)(v13 + 56), 0x64u, 0, (uint64_t)v57);
              sub_22E903BEC(v57);
              v33 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v17 + 16))(v17);
              sub_22E8FCA40(a1, v33, 0x64u, 0, (uint64_t)v56);
              v34 = (unsigned int *)v56;
              goto LABEL_30;
            }
          }
        }
LABEL_37:
        v7 = 1;
LABEL_38:
        if (BYTE1(v77))
        {
          if ((_DWORD)v65 == 5)
          {
            sub_22EC64D18(v72, (uint64_t)&v65);
          }
          else if (v70 && (*(_DWORD *)(v72[9] + 52) & 0x400000) != 0)
          {
            sub_22E90B5FC((unint64_t)v72, (uint64_t)&v65);
          }
        }
        if (v69)
        {
          v54 = sub_22EC6CBD0(v69);
          MEMORY[0x2348A0E9C](v54, 0x10E0C409F09D3C3);
        }
        if (v66 != (_QWORD *)v68)
          free(v66);
      }
    }
  }
  return v7;
}

uint64_t sub_22EC313A0(_QWORD *a1, uint64_t a2, uint64_t a3, _BYTE *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  unint64_t v29;
  _DWORD *v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  unsigned int *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  unint64_t v50;
  _DWORD *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55[24];
  _BYTE v56[96];
  unsigned int v57[24];
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  unsigned int v61[24];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _BYTE v68[64];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  int v74;
  _QWORD v75[3];
  __int16 v76;
  int v77;
  char v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v63 = *(_QWORD *)(a3 + 8);
  v5 = v63;
  v64 = a2;
  *a4 = 0;
  v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
  v7 = 1;
  if (v6 && *(_BYTE *)(v6 + 16) == 50)
  {
    while (1)
    {
      v13 = *(_QWORD *)(v6 + 24);
      v14 = sub_22EC3680C(*(_QWORD *)(v13 + 80));
      if (v14)
        break;
      v63 = *(_QWORD *)((*(_QWORD *)(v13 + 80) & 0xFFFFFFFFFFFFFFF8)
                      + ((2 * *(_QWORD *)(v13 + 80)) & 8));
      v6 = *(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0);
      if (!v6 || *(_BYTE *)(v6 + 16) != 50)
        return v7;
    }
    v15 = *(_QWORD *)(v14 + 40);
    v62 = v15;
    v7 = v15 != 0;
    if (v15)
    {
      *a4 = 1;
      v16 = *(_QWORD *)(v15 + 16);
      if (*(_DWORD *)v16 != 2 || *(_WORD *)(v16 + 16) != 25705)
      {
        v65 = 0;
        v66 = v68;
        v67 = 0x800000000;
        v69 = 0;
        v70 = 0;
        v71 = 0;
        v72 = a1;
        v73 = v15;
        v74 = 0;
        sub_22EFC6D6C((uint64_t)v75, v15);
        v75[1] = 0;
        v75[2] = 0;
        v76 = 0;
        v77 = 257;
        v78 = 0;
        sub_22EC56024((uint64_t)&v65);
        if (!sub_22EC63520(a1, &v65, a1[418], 0, 0))
        {
          v35 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
          if ((!v35 || *(_BYTE *)(v35 + 16) != 32)
            && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32
             || (v35 = sub_22F10CF48(v35)) == 0)
            || !sub_22E5761BC(v35))
          {
            sub_22F0D5A50(a3);
            sub_22E8FCA40(a1, v36, 0xFF0u, 0, (uint64_t)v61);
            v59 = *(const char **)(a3 + 8);
            v37 = sub_22E8901B8((uint64_t)v61, (uint64_t *)&v59);
            sub_22E8BAE44(v37, &v62);
            sub_22E903BEC(v61);
            sub_22E8FCA40(a1, *(_DWORD *)(v13 + 56), 0x64u, 0, (uint64_t)v55);
            sub_22E903BEC(v55);
          }
          goto LABEL_37;
        }
        v17 = *v66 & 0xFFFFFFFFFFFFFFFCLL;
        v18 = *(_DWORD *)(v17 + 28);
        if ((v18 & 0x7Fu) <= 0x2F && ((1 << (v18 & 0x7F)) & 0xC00000060000) != 0)
        {
          v20 = sub_22EFBAEA4(*v66 & 0xFFFFFFFFFFFFFFFCLL);
          if (!v20)
            goto LABEL_37;
          v17 = v20;
          v18 = *(_DWORD *)(v20 + 28);
        }
        if ((v18 & 0x7F) == 0x16)
        {
          v21 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
          v22 = sub_22F40A264(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
          if (v22)
          {
            v39 = *(_QWORD *)(*(_QWORD *)(v22 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v39 || *(unsigned __int8 *)(v39 + 16) - 35 <= 0xFFFFFFFD)
              v39 = sub_22F10CF48(v39);
            v40 = sub_22F272660(v39);
            if (v40 != v17)
            {
              v41 = v40;
              if (!v40)
              {
                if (!a5)
                  goto LABEL_61;
LABEL_62:
                sub_22F0D5A50(a3);
                sub_22E8FCA40(a1, v45, 0x1AA1u, 0, (uint64_t)v61);
                v46 = sub_22E8901B8((uint64_t)v61, &v63);
                v47 = 0;
                v48 = *(_QWORD *)(v17 + 40);
                v49 = "";
                if ((v48 & 7) == 0)
                {
                  v50 = v48 & 0xFFFFFFFFFFFFFFF8;
                  if (v50)
                  {
                    v51 = *(_DWORD **)(v50 + 16);
                    v52 = *v51;
                    v49 = (const char *)(v51 + 4);
                    v47 = v52;
                  }
                }
                v59 = v49;
                v60 = v47;
                v53 = sub_22F2F2210(v46, (uint64_t)&v59);
                v58 = sub_22F10ACF8(*(_QWORD *)(v64 & 0xFFFFFFFFFFFFFFF0));
                sub_22E8901B8(v53, &v58);
                v34 = v61;
LABEL_30:
                sub_22E903BEC(v34);
LABEL_61:
                v7 = 0;
                goto LABEL_38;
              }
              v42 = v17;
              while (1)
              {
                v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 32))(v41);
                if (v43 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)v42 + 32))(v42))
                  break;
                v44 = sub_22F3B46CC(v42);
                v42 = v44;
                v7 = v44 != 0;
                if (v44 == v41 || !v44)
                {
                  if (v44 || !a5)
                    goto LABEL_38;
                  goto LABEL_62;
                }
              }
            }
          }
          else
          {
            v23 = *v21;
            if ((!*v21 || *(_BYTE *)(v23 + 16) != 32)
              && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32
               || (v23 = sub_22F10CF48(v23)) == 0)
              || !sub_22E5761BC(v23))
            {
              v7 = sub_22EF670E0(a1[11], a2, v17);
              if ((v7 & 1) != 0 || !a5)
                goto LABEL_38;
              sub_22F0D5A50(a3);
              sub_22E8FCA40(a1, v24, 0x1AA1u, 0, (uint64_t)v61);
              v25 = sub_22E8901B8((uint64_t)v61, &v63);
              v26 = 0;
              v27 = *(_QWORD *)(v17 + 40);
              v28 = "";
              if ((v27 & 7) == 0)
              {
                v29 = v27 & 0xFFFFFFFFFFFFFFF8;
                if (v29)
                {
                  v30 = *(_DWORD **)(v29 + 16);
                  v31 = *v30;
                  v28 = (const char *)(v30 + 4);
                  v26 = v31;
                }
              }
              v59 = v28;
              v60 = v26;
              v32 = sub_22F2F2210(v25, (uint64_t)&v59);
              sub_22E8901B8(v32, &v64);
              sub_22E903BEC(v61);
              sub_22E8FCA40(a1, *(_DWORD *)(v13 + 56), 0x64u, 0, (uint64_t)v57);
              sub_22E903BEC(v57);
              v33 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v17 + 16))(v17);
              sub_22E8FCA40(a1, v33, 0x64u, 0, (uint64_t)v56);
              v34 = (unsigned int *)v56;
              goto LABEL_30;
            }
          }
        }
LABEL_37:
        v7 = 1;
LABEL_38:
        if (BYTE1(v77))
        {
          if ((_DWORD)v65 == 5)
          {
            sub_22EC64D18(v72, (uint64_t)&v65);
          }
          else if (v70 && (*(_DWORD *)(v72[9] + 52) & 0x400000) != 0)
          {
            sub_22E90B5FC((unint64_t)v72, (uint64_t)&v65);
          }
        }
        if (v69)
        {
          v54 = sub_22EC6CBD0(v69);
          MEMORY[0x2348A0E9C](v54, 0x10E0C409F09D3C3);
        }
        if (v66 != (_QWORD *)v68)
          free(v66);
      }
    }
  }
  return v7;
}

uint64_t sub_22EC31904(_QWORD *a1, uint64_t a2, uint64_t a3, _BYTE *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  uint64_t v27;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[96];
  unsigned int v37[24];
  _BYTE v38[96];
  unsigned int v39[24];
  _BYTE v40[96];
  uint64_t v41;
  unsigned int v42[24];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _BYTE v48[64];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  _QWORD v55[3];
  __int16 v56;
  int v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v43 = a2;
  v44 = a2;
  *a4 = 0;
  v5 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v6 = 1;
  if (!v5 || *(_BYTE *)(v5 + 16) != 50)
    return v6;
  while (1)
  {
    v11 = *(_QWORD *)(v5 + 24);
    v12 = sub_22EC366C4(*(_QWORD *)(v11 + 80));
    if (v12)
      break;
    v43 = *(_QWORD *)((*(_QWORD *)(v11 + 80) & 0xFFFFFFFFFFFFFFF8) + ((2 * *(_QWORD *)(v11 + 80)) & 8));
    v5 = *(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF0);
    if (!v5 || *(_BYTE *)(v5 + 16) != 50)
      return v6;
  }
  v13 = *(_QWORD *)(v12 + 40);
  if (!v13)
    return 0;
  *a4 = 1;
  v14 = *(_QWORD *)(v13 + 16);
  if (*(_DWORD *)v14 == 2 && *(_WORD *)(v14 + 16) == 25705)
    return 1;
  v45 = 0;
  v46 = v48;
  v47 = 0x800000000;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = a1;
  v53 = v13;
  v54 = 0;
  sub_22EFC6D6C((uint64_t)v55, v13);
  v55[1] = 0;
  v55[2] = 0;
  v56 = 0;
  v57 = 257;
  v58 = 0;
  sub_22EC56024((uint64_t)&v45);
  v15 = 0;
  if (sub_22EC63520(a1, &v45, a1[418], 0, 0))
  {
    v15 = (_DWORD *)(*v46 & 0xFFFFFFFFFFFFFFFCLL);
    v16 = v15[7];
    if ((v16 & 0x7Fu) <= 0x2F && ((1 << (v16 & 0x7F)) & 0xC00000060000) != 0)
    {
      v18 = sub_22EFBAEA4(*v46 & 0xFFFFFFFFFFFFFFFCLL);
      v15 = (_DWORD *)v18;
      if (!v18)
        goto LABEL_18;
      v16 = *(_DWORD *)(v18 + 28);
    }
    if ((v16 & 0x7F) == 0x16)
    {
      v23 = sub_22F40A264(*(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0));
      if (v23)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v23 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v30)
          v31 = *(unsigned __int8 *)(v30 + 16) - 35 > 0xFFFFFFFD;
        else
          v31 = 0;
        if (!v31)
          v30 = sub_22F10CF48(v30);
        v32 = sub_22F272660(v30);
        if (v15 == (_DWORD *)v32)
          goto LABEL_29;
        if (v32)
        {
          v6 = sub_22E595B08((uint64_t)v15, v32);
          if ((v6 & 1) != 0 || !a5)
            goto LABEL_30;
        }
        else if (!a5)
        {
          v6 = 0;
          goto LABEL_30;
        }
        sub_22F0D5A50(a3);
        sub_22E8FCA40(a1, v33, 0x1AA2u, 0, (uint64_t)v42);
        v41 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0));
        v34 = sub_22E8901B8((uint64_t)v42, &v41);
        sub_22E8901B8(v34, &v43);
        sub_22E903BEC(v42);
        v28 = *(_DWORD *)(v11 + 56);
        v22 = (unsigned int *)v40;
        v29 = v40;
      }
      else
      {
        v24 = *(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0);
        if ((v24 && *(_BYTE *)(v24 + 16) == 32
           || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
           && (v24 = sub_22F10CF48(v24)) != 0)
          && sub_22E5761BC(v24))
        {
          goto LABEL_29;
        }
        v6 = sub_22EF671D4(a1[11], *(_QWORD *)(a3 + 8), (unint64_t)v15);
        if ((v6 & 1) != 0 || !a5)
          goto LABEL_30;
        sub_22F0D5A50(a3);
        sub_22E8FCA40(a1, v26, 0x1AA2u, 0, (uint64_t)v42);
        v41 = *(_QWORD *)(a3 + 8);
        v27 = sub_22E8901B8((uint64_t)v42, &v41);
        sub_22E8901B8(v27, &v44);
        sub_22E903BEC(v42);
        sub_22E8FCA40(a1, *(_DWORD *)(v11 + 56), 0x64u, 0, (uint64_t)v39);
        sub_22E903BEC(v39);
        v28 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
        v22 = (unsigned int *)v38;
        v29 = v38;
      }
      sub_22E8FCA40(a1, v28, 0x64u, 0, (uint64_t)v29);
      v6 = 0;
      goto LABEL_20;
    }
  }
LABEL_18:
  sub_22F0D5A50(a3);
  sub_22E8FCA40(a1, v19, 0x1007u, 0, (uint64_t)v42);
  v41 = *(_QWORD *)(a3 + 8);
  v20 = sub_22E8901B8((uint64_t)v42, &v41);
  sub_22E8901B8(v20, &v44);
  sub_22E903BEC(v42);
  sub_22E8FCA40(a1, *(_DWORD *)(v11 + 56), 0x64u, 0, (uint64_t)v37);
  sub_22E903BEC(v37);
  if (!v15)
  {
LABEL_29:
    v6 = 1;
    goto LABEL_30;
  }
  v21 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
  v22 = (unsigned int *)v36;
  sub_22E8FCA40(a1, v21, 0x64u, 0, (uint64_t)v36);
  v6 = 1;
LABEL_20:
  sub_22E903BEC(v22);
LABEL_30:
  if (BYTE1(v57))
  {
    if ((_DWORD)v45 == 5)
    {
      sub_22EC64D18(v52, (uint64_t)&v45);
    }
    else if (v50 && (*(_DWORD *)(v52[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v52, (uint64_t)&v45);
    }
  }
  if (v49)
  {
    v35 = sub_22EC6CBD0(v49);
    MEMORY[0x2348A0E9C](v35, 0x10E0C409F09D3C3);
  }
  if (v46 != (_QWORD *)v48)
    free(v46);
  return v6;
}

uint64_t sub_22EC31DD0(_QWORD *a1, uint64_t a2, uint64_t a3, _BYTE *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  uint64_t v27;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[96];
  unsigned int v37[24];
  _BYTE v38[96];
  unsigned int v39[24];
  _BYTE v40[96];
  uint64_t v41;
  unsigned int v42[24];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _BYTE v48[64];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  _QWORD v55[3];
  __int16 v56;
  int v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v43 = a2;
  v44 = a2;
  *a4 = 0;
  v5 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v6 = 1;
  if (!v5 || *(_BYTE *)(v5 + 16) != 50)
    return v6;
  while (1)
  {
    v11 = *(_QWORD *)(v5 + 24);
    v12 = sub_22EC3680C(*(_QWORD *)(v11 + 80));
    if (v12)
      break;
    v43 = *(_QWORD *)((*(_QWORD *)(v11 + 80) & 0xFFFFFFFFFFFFFFF8) + ((2 * *(_QWORD *)(v11 + 80)) & 8));
    v5 = *(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF0);
    if (!v5 || *(_BYTE *)(v5 + 16) != 50)
      return v6;
  }
  v13 = *(_QWORD *)(v12 + 40);
  if (!v13)
    return 0;
  *a4 = 1;
  v14 = *(_QWORD *)(v13 + 16);
  if (*(_DWORD *)v14 == 2 && *(_WORD *)(v14 + 16) == 25705)
    return 1;
  v45 = 0;
  v46 = v48;
  v47 = 0x800000000;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = a1;
  v53 = v13;
  v54 = 0;
  sub_22EFC6D6C((uint64_t)v55, v13);
  v55[1] = 0;
  v55[2] = 0;
  v56 = 0;
  v57 = 257;
  v58 = 0;
  sub_22EC56024((uint64_t)&v45);
  v15 = 0;
  if (sub_22EC63520(a1, &v45, a1[418], 0, 0))
  {
    v15 = (_DWORD *)(*v46 & 0xFFFFFFFFFFFFFFFCLL);
    v16 = v15[7];
    if ((v16 & 0x7Fu) <= 0x2F && ((1 << (v16 & 0x7F)) & 0xC00000060000) != 0)
    {
      v18 = sub_22EFBAEA4(*v46 & 0xFFFFFFFFFFFFFFFCLL);
      v15 = (_DWORD *)v18;
      if (!v18)
        goto LABEL_18;
      v16 = *(_DWORD *)(v18 + 28);
    }
    if ((v16 & 0x7F) == 0x16)
    {
      v23 = sub_22F40A264(*(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0));
      if (v23)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v23 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v30)
          v31 = *(unsigned __int8 *)(v30 + 16) - 35 > 0xFFFFFFFD;
        else
          v31 = 0;
        if (!v31)
          v30 = sub_22F10CF48(v30);
        v32 = sub_22F272660(v30);
        if (v15 == (_DWORD *)v32)
          goto LABEL_29;
        if (v32)
        {
          v6 = sub_22E595B08((uint64_t)v15, v32);
          if ((v6 & 1) != 0 || !a5)
            goto LABEL_30;
        }
        else if (!a5)
        {
          v6 = 0;
          goto LABEL_30;
        }
        sub_22F0D5A50(a3);
        sub_22E8FCA40(a1, v33, 0x1AA2u, 0, (uint64_t)v42);
        v41 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0));
        v34 = sub_22E8901B8((uint64_t)v42, &v41);
        sub_22E8901B8(v34, &v43);
        sub_22E903BEC(v42);
        v28 = *(_DWORD *)(v11 + 56);
        v22 = (unsigned int *)v40;
        v29 = v40;
      }
      else
      {
        v24 = *(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0);
        if ((v24 && *(_BYTE *)(v24 + 16) == 32
           || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
           && (v24 = sub_22F10CF48(v24)) != 0)
          && sub_22E5761BC(v24))
        {
          goto LABEL_29;
        }
        v6 = sub_22EF671D4(a1[11], *(_QWORD *)(a3 + 8), (unint64_t)v15);
        if ((v6 & 1) != 0 || !a5)
          goto LABEL_30;
        sub_22F0D5A50(a3);
        sub_22E8FCA40(a1, v26, 0x1AA2u, 0, (uint64_t)v42);
        v41 = *(_QWORD *)(a3 + 8);
        v27 = sub_22E8901B8((uint64_t)v42, &v41);
        sub_22E8901B8(v27, &v44);
        sub_22E903BEC(v42);
        sub_22E8FCA40(a1, *(_DWORD *)(v11 + 56), 0x64u, 0, (uint64_t)v39);
        sub_22E903BEC(v39);
        v28 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
        v22 = (unsigned int *)v38;
        v29 = v38;
      }
      sub_22E8FCA40(a1, v28, 0x64u, 0, (uint64_t)v29);
      v6 = 0;
      goto LABEL_20;
    }
  }
LABEL_18:
  sub_22F0D5A50(a3);
  sub_22E8FCA40(a1, v19, 0x1007u, 0, (uint64_t)v42);
  v41 = *(_QWORD *)(a3 + 8);
  v20 = sub_22E8901B8((uint64_t)v42, &v41);
  sub_22E8901B8(v20, &v44);
  sub_22E903BEC(v42);
  sub_22E8FCA40(a1, *(_DWORD *)(v11 + 56), 0x64u, 0, (uint64_t)v37);
  sub_22E903BEC(v37);
  if (!v15)
  {
LABEL_29:
    v6 = 1;
    goto LABEL_30;
  }
  v21 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
  v22 = (unsigned int *)v36;
  sub_22E8FCA40(a1, v21, 0x64u, 0, (uint64_t)v36);
  v6 = 1;
LABEL_20:
  sub_22E903BEC(v22);
LABEL_30:
  if (BYTE1(v57))
  {
    if ((_DWORD)v45 == 5)
    {
      sub_22EC64D18(v52, (uint64_t)&v45);
    }
    else if (v50 && (*(_DWORD *)(v52[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v52, (uint64_t)&v45);
    }
  }
  if (v49)
  {
    v35 = sub_22EC6CBD0(v49);
    MEMORY[0x2348A0E9C](v35, 0x10E0C409F09D3C3);
  }
  if (v46 != (_QWORD *)v48)
    free(v46);
  return v6;
}

uint64_t sub_22EC3229C(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  int v10;
  uint64_t result;
  int v13;
  unsigned __int8 *v14;

  v14 = a3;
  v6 = *((_QWORD *)a3 + 1);
  if (*a3 != 205)
    goto LABEL_8;
  v7 = *((_QWORD *)a3 + 2);
  v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 4) != 0)
  {
    if (!v8)
      goto LABEL_8;
    v9 = (unint64_t *)(v8 + 80);
  }
  else
  {
    if (!v8)
      goto LABEL_8;
    v9 = (unint64_t *)(v8 + 56);
  }
  v6 = *v9;
LABEL_8:
  v10 = sub_22EC30C10(v6);
  result = sub_22EC30C10(a2);
  if (v10 == 1 && (_DWORD)result == 4)
  {
    sub_22F0D5A50((uint64_t)a3);
    return sub_22EC32354(a1, v13, a2, v6, (uint64_t *)&v14, 1);
  }
  return result;
}

uint64_t sub_22EC32354(uint64_t a1, int a2, unint64_t a3, unint64_t a4, uint64_t *a5, int a6)
{
  int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  int v37;
  const std::string::value_type *p_p;
  std::string::size_type v39;
  const std::string::value_type *v40;
  std::string::size_type v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  std::string *v49;
  size_t size;
  uint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  unint64_t v58;
  const std::string::value_type *v59;
  std::string::size_type v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::string *v65;
  size_t v66;
  std::string::size_type v67;
  const std::string::value_type *v68;
  std::string::size_type v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  std::string *v76;
  size_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93[24];
  unsigned int v94[24];
  unsigned int v95[24];
  unsigned int v96[24];
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100[24];
  unsigned int v101[25];
  unsigned __int8 v102;
  uint64_t v103;
  uint64_t v104[12];
  std::string v105;
  unint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  unint64_t v114;
  char v115;
  uint64_t v116;
  char v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  void *__p;
  void *v126;
  uint64_t v127;
  _BYTE v128[64];
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  int v134;
  _QWORD v135[3];
  __int16 v136;
  int v137;
  char v138;
  uint64_t v139;

  v139 = *MEMORY[0x24BDAC8D0];
  v98 = a4;
  v99 = a3;
  v12 = sub_22EC30C10(a4);
  v13 = sub_22EC30C10(a3);
  v14 = v12 == 4 && v13 == 1;
  v15 = v14;
  v16 = a4;
  if (!v14)
  {
    v17 = v13;
    result = 0;
    if (v12 != 1)
      return result;
    v16 = a3;
    if (v17 != 4)
      return result;
  }
  v97 = 0;
  v124 = a3;
  v123 = a4;
  result = sub_22EC32E48(v16, (uint64_t)&v97);
  if (!result)
    return result;
  v19 = *(_QWORD *)(result + 40);
  v122 = v19;
  if (!v19)
    return 0;
  v20 = a2;
  v22 = *(_QWORD *)(result + 48);
  v21 = *(_QWORD *)(result + 56);
  __p = 0;
  v126 = v128;
  v127 = 0x800000000;
  v129 = 0;
  v130 = 0;
  v131 = 0;
  v132 = (_QWORD *)a1;
  v133 = v19;
  v134 = 0;
  sub_22EFC6D6C((uint64_t)v135, v19);
  v135[2] = 0;
  v135[1] = 0;
  v136 = 0;
  v137 = 257;
  v138 = 0;
  sub_22EC56024((uint64_t)&__p);
  if ((sub_22EC63520(a1, &__p, *(_QWORD *)(a1 + 3344), 0, 0) & 1) == 0)
  {
    if (a6)
    {
      sub_22E8FCA40((_QWORD *)a1, a2, 0xFEDu, 0, (uint64_t)&v114);
      v29 = sub_22E8BAE44((uint64_t)&v114, &v122);
      v30 = sub_22E8901B8(v29, (uint64_t *)&v123);
      sub_22E8901B8(v30, (uint64_t *)&v124);
      sub_22E903BEC((unsigned int *)&v114);
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v97 + 56), 0x64u, 0, (uint64_t)&v106);
      v31 = (unsigned int *)&v106;
LABEL_31:
      sub_22E903BEC(v31);
    }
LABEL_32:
    v23 = 0;
    goto LABEL_33;
  }
  v23 = (uint64_t *)(*(_QWORD *)v126 & 0xFFFFFFFFFFFFFFFCLL);
  v24 = *((_DWORD *)v23 + 7);
  if ((v24 & 0x7Fu) <= 0x2F && ((1 << (v24 & 0x7F)) & 0xC00000060000) != 0)
  {
    v25 = sub_22EFBAEA4(*(_QWORD *)v126 & 0xFFFFFFFFFFFFFFFCLL);
    v23 = (uint64_t *)v25;
    if (!v25)
    {
      v32 = 1;
      if (!a6)
        goto LABEL_32;
      goto LABEL_29;
    }
    v24 = *(_DWORD *)(v25 + 28);
  }
  if ((v24 & 0x7F) != 0x16)
  {
    v32 = 0;
    if (!a6)
      goto LABEL_32;
LABEL_29:
    sub_22E8FCA40((_QWORD *)a1, v20, 0xFEEu, 0, (uint64_t)&v114);
    v33 = sub_22E8BAE44((uint64_t)&v114, &v122);
    v34 = sub_22E8901B8(v33, (uint64_t *)&v123);
    sub_22E8901B8(v34, (uint64_t *)&v124);
    sub_22E903BEC((unsigned int *)&v114);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v97 + 56), 0x64u, 0, (uint64_t)&v105);
    sub_22E903BEC((unsigned int *)&v105);
    if ((v32 & 1) == 0)
    {
      v35 = (*(uint64_t (**)(uint64_t *))(*v23 + 16))(v23);
      sub_22E8FCA40((_QWORD *)a1, v35, 0x64u, 0, (uint64_t)v104);
      v31 = (unsigned int *)v104;
      goto LABEL_31;
    }
    goto LABEL_32;
  }
  if (v22)
    v26 = v15;
  else
    v26 = 0;
  if ((v26 & 1) != 0)
  {
    v103 = v22 | 2;
    v27 = sub_22EFDBA90((unint64_t)v23, v22 | 2, 0, 0, 1, 0);
    if (v27)
    {
      v28 = v27;
      goto LABEL_124;
    }
    if (a6)
    {
      sub_22E8FCA40((_QWORD *)a1, v20, 0xFEFu, 0, (uint64_t)&v114);
      v86 = sub_22E8901B8((uint64_t)&v114, (uint64_t *)&v123);
      v87 = sub_22E8901B8(v86, (uint64_t *)&v124);
      v88 = sub_22E894538(v87, &v103);
      v102 = 0;
      sub_22E894E38(v88, &v102);
      sub_22E903BEC((unsigned int *)&v114);
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v97 + 56), 0x64u, 0, (uint64_t)v101);
      sub_22E903BEC(v101);
    }
LABEL_33:
    v28 = 0;
    goto LABEL_34;
  }
  v28 = 0;
LABEL_124:
  if (v21)
    v84 = v15;
  else
    v84 = 1;
  if ((v84 & 1) == 0)
  {
    v103 = v21 | 1;
    v85 = sub_22EFDBA90((unint64_t)v23, v21 | 1, 1, 0, 1, 0);
    if (v85)
    {
      v36 = v85;
      goto LABEL_131;
    }
    if (a6)
    {
      sub_22E8FCA40((_QWORD *)a1, v20, 0xFEFu, 0, (uint64_t)&v114);
      v89 = sub_22E8901B8((uint64_t)&v114, (uint64_t *)&v123);
      v90 = sub_22E8901B8(v89, (uint64_t *)&v124);
      v91 = sub_22E894538(v90, &v103);
      v102 = 1;
      sub_22E894E38(v91, &v102);
      sub_22E903BEC((unsigned int *)&v114);
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v97 + 56), 0x64u, 0, (uint64_t)v100);
      sub_22E903BEC(v100);
    }
LABEL_34:
    v36 = 0;
    v37 = 0;
    goto LABEL_35;
  }
  v36 = 0;
LABEL_131:
  v37 = 1;
LABEL_35:
  if (BYTE1(v137))
  {
    if ((_DWORD)__p == 5)
    {
      sub_22EC64D18(v132, (uint64_t)&__p);
    }
    else if (v130 && (*(_DWORD *)(v132[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v132, (uint64_t)&__p);
    }
  }
  if (v129)
  {
    v92 = sub_22EC6CBD0(v129);
    MEMORY[0x2348A0E9C](v92, 0x10E0C409F09D3C3);
  }
  if (v126 != v128)
  {
    free(v126);
    if (v37)
      goto LABEL_44;
    return 0;
  }
  if (!v37)
    return 0;
LABEL_44:
  if (v15)
  {
    result = v28 != 0;
    if (!v28 || !a6)
      return result;
    *((_BYTE *)&v105.__r_.__value_.__s + 23) = 1;
    LOWORD(v105.__r_.__value_.__l.__data_) = 91;
    sub_22EFC683C(v23 + 5, &__p);
    if (v127 >= 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if (v127 >= 0)
      v39 = HIBYTE(v127) & 0x7F;
    else
      v39 = (std::string::size_type)v126;
    std::string::append(&v105, p_p, v39);
    if (SHIBYTE(v127) < 0)
      operator delete(__p);
    std::string::append(&v105, " ");
    v114 = *(_QWORD *)(v28 + 40);
    sub_22F1D3A38((uint64_t *)&v114, (char *)&__p);
    if (v127 >= 0)
      v40 = (const std::string::value_type *)&__p;
    else
      v40 = (const std::string::value_type *)__p;
    if (v127 >= 0)
      v41 = HIBYTE(v127) & 0x7F;
    else
      v41 = (std::string::size_type)v126;
    std::string::append(&v105, v40, v41);
    if (SHIBYTE(v127) < 0)
      operator delete(__p);
    sub_22F0D60E4(*a5);
    v43 = sub_22F141A3C(v42, 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
    sub_22E8FCA40((_QWORD *)a1, v20, 0xFEFu, 0, (uint64_t)&__p);
    v44 = sub_22E8901B8((uint64_t)&__p, (uint64_t *)&v98);
    v45 = sub_22E8901B8(v44, (uint64_t *)&v99);
    v104[0] = *(_QWORD *)(v28 + 40);
    v46 = sub_22E894538(v45, v104);
    LOBYTE(v101[0]) = 0;
    v47 = sub_22E894E38(v46, (unsigned __int8 *)v101);
    sub_22F0D5A50(*a5);
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = &v105;
    else
      v49 = (std::string *)v105.__r_.__value_.__r.__words[0];
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v105.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v105.__r_.__value_.__l.__size_;
    sub_22E729148(v49, size, v48, 0, (uint64_t)&v114);
    v51 = sub_22E890748(v47, &v114);
    v109 = 0;
    v108 = 0;
    v112 = 0x100000000000000;
    v111 = 0;
    v106 = v43 | ((unint64_t)v43 << 32);
    v107 = 0;
    v110 = (void *)93;
    v113 = 0;
    sub_22E890748(v51, &v106);
    if (SHIBYTE(v112) < 0)
      operator delete(v110);
    if (SHIBYTE(v120) < 0)
      operator delete(v118);
    sub_22E903BEC((unsigned int *)&__p);
    v52 = (*(uint64_t (**)(uint64_t *))(*v23 + 16))(v23);
    sub_22E8FCA40((_QWORD *)a1, v52, 0x64u, 0, (uint64_t)v96);
    sub_22E903BEC(v96);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v97 + 56), 0x64u, 0, (uint64_t)v95);
    sub_22E903BEC(v95);
    v53 = sub_22F36D148(*(_QWORD *)(a1 + 88), v23, 0);
    __p = (void *)*a5;
    v54 = sub_22F3348F0((_QWORD *)a1, v53, 0, *(_DWORD *)(v28 + 24), *(_QWORD *)(v28 + 40), v28, (unsigned __int8 **)&__p, 1);
  }
  else
  {
    result = v36 != 0;
    if (!v36 || !a6)
      return result;
    memset(&v105, 0, sizeof(v105));
    sub_22F0D60E4(*a5);
    v56 = sub_22F141A3C(v55, 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
    if ((*(_BYTE *)(v36 + 58) & 8) == 0)
      goto LABEL_97;
    v57 = sub_22EFDCBF0(v36, 1);
    if (!v57)
      goto LABEL_97;
    v58 = v57;
    MEMORY[0x2348A0C14](&v105, ".");
    sub_22EFC683C((uint64_t *)(v58 + 40), &__p);
    if (v127 >= 0)
      v59 = (const std::string::value_type *)&__p;
    else
      v59 = (const std::string::value_type *)__p;
    if (v127 >= 0)
      v60 = HIBYTE(v127) & 0x7F;
    else
      v60 = (std::string::size_type)v126;
    std::string::append(&v105, v59, v60);
    if (SHIBYTE(v127) < 0)
      operator delete(__p);
    sub_22E8FCA40((_QWORD *)a1, v20, 0xFEFu, 0, (uint64_t)&__p);
    v61 = sub_22E8901B8((uint64_t)&__p, (uint64_t *)&v98);
    v62 = sub_22E8901B8(v61, (uint64_t *)&v99);
    v106 = *(_QWORD *)(v36 + 40);
    v63 = sub_22E894538(v62, (uint64_t *)&v106);
    LOBYTE(v104[0]) = 1;
    v64 = sub_22E894E38(v63, (unsigned __int8 *)v104);
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = &v105;
    else
      v65 = (std::string *)v105.__r_.__value_.__r.__words[0];
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v66 = *((_BYTE *)&v105.__r_.__value_.__s + 23) & 0x7F;
    else
      v66 = v105.__r_.__value_.__l.__size_;
    sub_22E729148(v65, v66, v56, 0, (uint64_t)&v114);
    sub_22E890748(v64, &v114);
    if (SHIBYTE(v120) < 0)
      operator delete(v118);
    sub_22E903BEC((unsigned int *)&__p);
    v67 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v67 = v105.__r_.__value_.__l.__size_;
    if (!v67)
    {
LABEL_97:
      MEMORY[0x2348A0C14](&v105, " ");
      v114 = *(_QWORD *)(v36 + 40);
      sub_22F1D3A38((uint64_t *)&v114, (char *)&__p);
      if (v127 >= 0)
        v68 = (const std::string::value_type *)&__p;
      else
        v68 = (const std::string::value_type *)__p;
      if (v127 >= 0)
        v69 = HIBYTE(v127) & 0x7F;
      else
        v69 = (std::string::size_type)v126;
      std::string::append(&v105, v68, v69);
      if (SHIBYTE(v127) < 0)
        operator delete(__p);
      std::string::append(&v105, "]");
      sub_22E8FCA40((_QWORD *)a1, v20, 0xFEFu, 0, (uint64_t)&__p);
      v70 = sub_22E8901B8((uint64_t)&__p, (uint64_t *)&v98);
      v71 = sub_22E8901B8(v70, (uint64_t *)&v99);
      v104[0] = *(_QWORD *)(v36 + 40);
      v72 = sub_22E894538(v71, v104);
      LOBYTE(v101[0]) = 1;
      v73 = sub_22E894E38(v72, (unsigned __int8 *)v101);
      sub_22F0D5A50(*a5);
      v116 = 0;
      v117 = 0;
      v120 = 0x100000000000000;
      v119 = 0;
      v114 = v74 | ((unint64_t)v74 << 32);
      v115 = 0;
      v118 = (void *)91;
      v121 = 0;
      v75 = sub_22E890748(v73, &v114);
      if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v76 = &v105;
      else
        v76 = (std::string *)v105.__r_.__value_.__r.__words[0];
      if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = *((_BYTE *)&v105.__r_.__value_.__s + 23) & 0x7F;
      else
        v77 = v105.__r_.__value_.__l.__size_;
      sub_22E729148(v76, v77, v56, 0, (uint64_t)&v106);
      sub_22E890748(v75, &v106);
      if (SHIBYTE(v112) < 0)
        operator delete(v110);
      if (SHIBYTE(v120) < 0)
        operator delete(v118);
      sub_22E903BEC((unsigned int *)&__p);
    }
    v78 = (*(uint64_t (**)(uint64_t *))(*v23 + 16))(v23);
    sub_22E8FCA40((_QWORD *)a1, v78, 0x64u, 0, (uint64_t)v94);
    sub_22E903BEC(v94);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v97 + 56), 0x64u, 0, (uint64_t)v93);
    sub_22E903BEC(v93);
    v80 = *a5;
    v81 = *(unsigned int *)(v36 + 24);
    v82 = *(_QWORD *)(v36 + 40);
    LODWORD(__p) = *(_DWORD *)(v36 + 24);
    if (v80)
      v83 = 0;
    else
      v83 = v81;
    v54 = sub_22EC2DA20(a1, v80, v98, v83, v82, v36, v81, v79, (int *)&__p, 1, v81, 0, 0, 1u);
  }
  *a5 = v54 & 0xFFFFFFFFFFFFFFFELL;
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  return 1;
}

uint64_t sub_22EC32E48(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  result = 0;
  v4 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  if (v4 && *(_BYTE *)(v4 + 16) == 50)
  {
    while (1)
    {
      *(_QWORD *)a2 = *(_QWORD *)(v4 + 24);
      v6 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v4 + 24) + 80) & 0xFFFFFFFFFFFFFFF8)
                                 + ((2 * *(_QWORD *)(*(_QWORD *)(v4 + 24) + 80)) & 8)) & 0xFFFFFFFFFFFFFFF0);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22F10ACF8(v6) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v7)
        {
          if (*(_BYTE *)(v7 + 16) == 45)
          {
            v8 = sub_22F114198(*(_QWORD *)(v7 + 24));
            v9 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 104) + 96), *(_QWORD *)(v8 + 104));
            if (v9)
              break;
          }
        }
      }
LABEL_20:
      result = 0;
      v4 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)a2 + 80) & 0xFFFFFFFFFFFFFFF8)
                                 + ((2 * *(_QWORD *)(*(_QWORD *)a2 + 80)) & 8)) & 0xFFFFFFFFFFFFFFF0);
      if (!v4 || *(_BYTE *)(v4 + 16) != 50)
        return result;
    }
    v10 = v9;
    v11 = 0;
    v12 = v9;
    while (1)
    {
      if ((*(_BYTE *)(v12 + 29) & 1) != 0)
      {
        sub_22EFC8E88(v12);
        v14 = *(uint64_t **)v13;
        v15 = *(unsigned int *)(v13 + 8);
        v16 = *(uint64_t **)v13;
        if ((_DWORD)v15)
        {
          v17 = 8 * v15;
          v16 = *(uint64_t **)v13;
          while (*(_WORD *)(*v16 + 32) != 255)
          {
            ++v16;
            v17 -= 8;
            if (!v17)
              goto LABEL_15;
          }
        }
        if (v16 != &v14[v15])
          break;
      }
LABEL_15:
      if ((*(_BYTE *)(v12 + 96) & 3) != 0)
      {
        if (v11)
          goto LABEL_20;
        v11 = 1;
      }
      v18 = sub_22E3CD31C((uint64_t *)(v12 + 96), v12);
      if (v18 != v10)
      {
        v12 = v18;
        if (v18)
          continue;
      }
      goto LABEL_20;
    }
    do
    {
      v19 = *v14++;
      result = v19;
    }
    while (*(_WORD *)(v19 + 32) != 255);
  }
  return result;
}

uint64_t sub_22EC32FE4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, int a5, uint64_t a6, char a7, int a8)
{
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t result;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  unsigned int v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  unsigned __int8 **v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  _BOOL4 v43;
  _BOOL4 v45;
  int v46;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  char v52;
  unsigned int v53[24];

  v14 = *(_QWORD *)(*a4 + 8);
  v15 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 + 16);
    if ((v17 & 0xFE) == 0x28)
    {
      if ((v17 & 0x100000) != 0)
      {
        do
        {
LABEL_4:
          while (1)
          {
            v16 = *(_QWORD *)(*(_QWORD *)(v16 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (!v16)
              break;
            v18 = *(_DWORD *)(v16 + 16);
            if ((v18 & 0xFE) != 0x28)
              break;
            if ((v18 & 0x100000) == 0)
              goto LABEL_13;
          }
          v16 = sub_22F10CF48(v16);
        }
        while ((*(_DWORD *)(v16 + 16) & 0x100000) != 0);
      }
      goto LABEL_13;
    }
  }
  v19 = a3;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v16 = sub_22F10CF48(v16);
    v19 = a3;
    if (v16)
    {
      if ((*(_DWORD *)(v16 + 16) & 0x100000) != 0)
        goto LABEL_4;
LABEL_13:
      v19 = *(_QWORD *)(v16 + 32);
    }
  }
  v20 = sub_22EC30C10(v14);
  v21 = sub_22EC30C10(v19);
  if (v20 != v21)
  {
    if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 2) == 0)
      return 0;
    v27 = v21;
    if (v20 > 4 || ((1 << v20) & 0x19) == 0)
    {
      if (!v21 && sub_22F110744(*v15, *(_QWORD *)(a1 + 88)))
        return 0;
    }
    else if (v21 <= 4 && ((1 << v21) & 0x19) != 0)
    {
      return 0;
    }
    if (v20 == 2)
    {
      if (v27 == 3 || v27 == 4 && (a5 - 1) < 3)
        return 0;
    }
    else if ((a5 - 1) <= 2 && v27 == 2 && v20 - 3 < 2)
    {
      return 0;
    }
    v49 = *(_QWORD *)(a1 + 88);
    v50 = v20;
    v51 = v27;
    v52 = 0;
    v33 = (unsigned __int8 *)*a4;
    if (*a4)
    {
      while (1)
      {
        v34 = v33;
        v35 = *v33;
        if (v35 > 213)
        {
          if (v35 == 233)
          {
            if ((*(_DWORD *)v34 & 0x7C0000) != 0x300000)
              goto LABEL_78;
            v37 = (unsigned __int8 **)(v34 + 16);
          }
          else
          {
            if (v35 != 214)
              goto LABEL_78;
            v37 = (unsigned __int8 **)(v34 + 24);
          }
        }
        else if (v35 == 155)
        {
          if ((**((_DWORD **)v34 + 2) & 0x18000) != 0)
            goto LABEL_78;
          if (v34[48])
            v37 = (unsigned __int8 **)(v34 + 24);
          else
            v37 = (unsigned __int8 **)(v34 + 32);
        }
        else
        {
          if (v35 != 176)
            goto LABEL_78;
          v36 = *((unsigned int *)v34 + 5);
          if ((_DWORD)v36 == -1)
            goto LABEL_78;
          v37 = (unsigned __int8 **)&v34[8 * v36 + 40];
        }
        v33 = *v37;
        if (v33 == v34)
          goto LABEL_78;
      }
    }
    v34 = 0;
LABEL_78:
    v39 = sub_22EC34E34(&v49, v34);
    if ((v39 - 1) < 2)
      return 0;
    if (v39 == 3)
    {
      v40 = *a4;
      v41 = *(_QWORD *)(*a4 + 8);
      v42 = (unsigned int *)sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 24, 3);
      sub_22F003694(v42, v41, 58, v40, 0, 0, 0);
      result = 0;
      *a4 = (uint64_t)v42;
      *(_WORD *)(a1 + 1693) = 257;
      return result;
    }
    if (v20 == 1)
    {
      if (v27 <= 4 && ((1 << v27) & 0x1A) != 0 && (a5 - 1) < 3)
        return 1;
      v43 = v27 == 1;
      if (v27 == 4 && (a7 & 1) != 0)
        return 0;
    }
    else
    {
      v43 = v27 == 1;
      if (v27 == 1 && !v20)
      {
        if ((sub_22EB39A74(a1, a3, a4, a6) & 1) != 0)
          return 2;
        v43 = 1;
      }
    }
    v45 = (a8 & 0xFFFFFFFE) == 0xE && v20 == 3;
    v46 = v45 && v43;
    if (v46)
      result = 0;
    else
      result = 2;
    if ((v46 & 1) != 0 || !(_DWORD)a6)
      return result;
    sub_22EC33478(a1, a2, a3, v27, *a4, (unsigned __int8 *)*a4, v20, a5);
    return 2;
  }
  result = 0;
  if ((a5 & 0xFFFFFFFD) == 1 && v20 == 1 && v14 != a3)
  {
    v24 = *v15;
    v25 = *(unsigned __int8 *)(*v15 + 16);
    if (*v15 && v25 == 37)
    {
      v26 = (uint64_t *)(v24 + 32);
LABEL_44:
      v29 = *v26;
      if (v29 != a3)
      {
        v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v30 & 8) != 0)
        {
          v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0;
          if (v31)
            v32 = (_DWORD)a6 == 0;
          else
            v32 = 1;
          if (v32)
            return 2 * (v31 != 0);
          v38 = a2;
          if (!HIDWORD(a2) || !(_DWORD)a2)
            sub_22EFF605C(*a4);
          sub_22E8FCA40((_QWORD *)a1, v38, 0xA6Eu, 0, (uint64_t)v53);
          sub_22E903BEC(v53);
          return 2;
        }
      }
      return 0;
    }
    if (v24 && v25 == 49)
    {
      v26 = (uint64_t *)(v24 + 24);
      goto LABEL_44;
    }
    result = 0;
    if (v24 && v25 == 7)
    {
      v26 = (uint64_t *)(v24 + 40);
      goto LABEL_44;
    }
  }
  return result;
}

uint64_t sub_22EC33478(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned __int8 *a6, unsigned int a7, int a8)
{
  int v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  _BOOL4 v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  int v40;
  uint64_t v41;
  unsigned __int8 **v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  int v60;
  uint64_t v61;
  unsigned __int8 **v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  unsigned int *v72;
  const char *v73;
  uint64_t v74;
  __int128 v75;
  unsigned int *v76;
  const char *v77;
  int v78;
  int v79;
  unsigned __int8 v80;
  int v81[24];
  uint64_t v82[12];
  int v83;
  _BYTE v84[25];
  _BYTE v85[48];
  char v86;
  uint64_t v87;
  _BOOL4 v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93[3];

  v93[0] = a2;
  v92 = a3;
  if (!HIDWORD(a2) || !(_DWORD)a2)
  {
    sub_22EFF605C(a5);
    LODWORD(a2) = v15;
  }
  v16 = a2;
  result = sub_22E9005E8(a1, a2, 4);
  if ((result & 1) != 0)
    return result;
  v18 = *(_QWORD *)(a5 + 8);
  v91 = v18;
  v90 = 0;
  if (a4 == 4 && a7 == 1)
  {
    result = sub_22EC32E48(a3, (uint64_t)&v90);
    if (result)
      return result;
    v19 = 0;
    v18 = v91;
LABEL_9:
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10)
      v20 = 2;
    else
      v20 = 3;
  }
  else
  {
    v19 = a4 == 1;
    if (a4 != 1 || a7 != 4)
    {
      v89 = 0;
      switch(a7)
      {
        case 0u:
        case 3u:
        case 4u:
          goto LABEL_17;
        case 1u:
          goto LABEL_9;
        case 2u:
          v20 = 4;
          goto LABEL_18;
        default:
          goto LABEL_19;
      }
      goto LABEL_19;
    }
    result = sub_22EC32E48(v18, (uint64_t)&v90);
    if (result)
      return result;
    v18 = v91;
LABEL_17:
    v20 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16) == 39;
  }
LABEL_18:
  v89 = v20;
LABEL_19:
  v21 = sub_22F141A3C(LODWORD(v93[0]), 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
  v22 = v21;
  if (v21)
    v23 = v21;
  else
    v23 = v16;
  v88 = (a8 - 4) < 0xFFFFFFFD;
  if (!v19 || a7 > 4 || ((1 << a7) & 0x1A) == 0)
  {
    if (a7 != 1 || a4 > 4 || ((1 << a4) & 0x1A) == 0)
    {
      sub_22E8FCA40((_QWORD *)a1, v16, 0xA6Bu, 0, (uint64_t)v84);
      LOBYTE(v81[0]) = !v88;
      v24 = sub_22E894E38((uint64_t)v84, (unsigned __int8 *)v81);
      v25 = sub_22E89519C(v24, &v89);
      v26 = sub_22E8901B8(v25, &v91);
      v27 = sub_22E8901B8(v26, &v92);
      v28 = sub_22E8906A0(v27, v93);
      sub_22F0D4E74(a5);
      v82[0] = v29;
      sub_22E8906A0(v28, v82);
      return (uint64_t)sub_22E903BEC((unsigned int *)v84);
    }
    v79 = v23;
    v50 = sub_22F334B74(a1, "CFBridgingRetain", 0x10uLL);
    v80 = v50;
    sub_22E8FCA40((_QWORD *)a1, v16, 0xA5Eu, 0, (uint64_t)v84);
    v51 = sub_22E89519C((uint64_t)v84, (unsigned int *)&v88);
    v81[0] = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v91 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                + 16) == 10;
    v52 = sub_22E89519C(v51, (unsigned int *)v81);
    v53 = sub_22E8901B8(v52, &v91);
    v83 = 2;
    v54 = sub_22E8900C4(v53, &v83);
    v55 = sub_22E8901B8(v54, &v92);
    v56 = sub_22E8906A0(v55, v93);
    sub_22F0D4E74(a5);
    v82[0] = v57;
    sub_22E8906A0(v56, v82);
    sub_22E903BEC((unsigned int *)v84);
    *(_QWORD *)v84 = *(_QWORD *)(a1 + 88);
    *(_DWORD *)&v84[8] = 1;
    *(_DWORD *)&v84[12] = a4;
    v84[16] = 1;
    v58 = (unsigned __int8 *)a5;
    while (1)
    {
      v59 = v58;
      v60 = *v58;
      if (v60 > 213)
      {
        if (v60 == 233)
        {
          if ((*(_DWORD *)v59 & 0x7C0000) != 0x300000)
            goto LABEL_76;
          v62 = (unsigned __int8 **)(v59 + 16);
        }
        else
        {
          if (v60 != 214)
            goto LABEL_76;
          v62 = (unsigned __int8 **)(v59 + 24);
        }
      }
      else if (v60 == 155)
      {
        if ((**((_DWORD **)v59 + 2) & 0x18000) != 0)
          goto LABEL_76;
        if (v59[48])
          v62 = (unsigned __int8 **)(v59 + 24);
        else
          v62 = (unsigned __int8 **)(v59 + 32);
      }
      else
      {
        if (v60 != 176 || (v61 = *((unsigned int *)v59 + 5), (_DWORD)v61 == -1))
        {
LABEL_76:
          v63 = sub_22EC34E34((uint64_t *)v84, v59);
          if (v63 == 3
            || ((v64 = v63, a8 != 3) ? (v65 = 5428) : (v65 = 5431),
                sub_22E8FCA40((_QWORD *)a1, v79, v65, 0, (uint64_t)v84),
                sub_22EC35ED0(a1, (uint64_t *)v84, a8, v22, v92, (unsigned __int8 *)a5, a6, "__bridge ", 0),
                result = (uint64_t)sub_22E903BEC((unsigned int *)v84),
                v64 != 2))
          {
            if (a8 == 3)
              v66 = v50;
            else
              v66 = 1;
            if ((v66 & 1) != 0)
            {
              v67 = v79;
              if (v50)
                sub_22EFF605C(a5);
              sub_22E8FCA40((_QWORD *)a1, v67, 0x1535u, 0, (uint64_t)v81);
              v68 = sub_22E8901B8((uint64_t)v81, &v92);
              v69 = sub_22E894E38(v68, &v80);
            }
            else
            {
              sub_22E8FCA40((_QWORD *)a1, v79, 0x1538u, 0, (uint64_t)v82);
              v69 = sub_22E8901B8((uint64_t)v82, &v92);
            }
            v74 = v69;
            v75 = *(_OWORD *)v69;
            *(_OWORD *)&v84[9] = *(_OWORD *)(v69 + 9);
            *(_OWORD *)v84 = v75;
            v85[0] = 0;
            v86 = 0;
            if (*(_BYTE *)(v69 + 80))
              sub_22E907424((uint64_t)v85, v69 + 32);
            v87 = *(_QWORD *)(v74 + 88);
            if (v66)
              v76 = (unsigned int *)v81;
            else
              v76 = (unsigned int *)v82;
            sub_22E903BEC(v76);
            if (v80)
              v77 = "CFBridgingRetain";
            else
              v77 = 0;
            sub_22EC35ED0(a1, (uint64_t *)v84, a8, v22, v92, (unsigned __int8 *)a5, a6, "__bridge_retained ", v77);
            return (uint64_t)sub_22E903BEC((unsigned int *)v84);
          }
          return result;
        }
        v62 = (unsigned __int8 **)&v59[8 * v61 + 40];
      }
      v58 = *v62;
      if (v58 == v59)
        goto LABEL_76;
    }
  }
  v78 = v23;
  sub_22E8FCA40((_QWORD *)a1, v16, 0xA5Eu, 0, (uint64_t)v84);
  v30 = sub_22E89519C((uint64_t)v84, (unsigned int *)&v88);
  v81[0] = 2;
  v31 = sub_22E8900C4(v30, v81);
  v32 = sub_22E8901B8(v31, &v91);
  v83 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v92 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                           + 16) == 10;
  v33 = sub_22E89519C(v32, (unsigned int *)&v83);
  v34 = sub_22E8901B8(v33, &v92);
  v35 = sub_22E8906A0(v34, v93);
  sub_22F0D4E74(a5);
  v82[0] = v36;
  sub_22E8906A0(v35, v82);
  sub_22E903BEC((unsigned int *)v84);
  v37 = sub_22F334B74(a1, "CFBridgingRelease", 0x11uLL);
  LOBYTE(v83) = v37;
  *(_QWORD *)v84 = *(_QWORD *)(a1 + 88);
  *(_DWORD *)&v84[8] = a7;
  *(_DWORD *)&v84[12] = 1;
  v84[16] = 1;
  v38 = (unsigned __int8 *)a5;
  do
  {
    v39 = v38;
    v40 = *v38;
    if (v40 > 213)
    {
      if (v40 == 233)
      {
        if ((*(_DWORD *)v39 & 0x7C0000) != 0x300000)
          break;
        v42 = (unsigned __int8 **)(v39 + 16);
      }
      else
      {
        if (v40 != 214)
          break;
        v42 = (unsigned __int8 **)(v39 + 24);
      }
      goto LABEL_47;
    }
    if (v40 == 155)
    {
      if ((**((_DWORD **)v39 + 2) & 0x18000) != 0)
        break;
      if (v39[48])
        v42 = (unsigned __int8 **)(v39 + 24);
      else
        v42 = (unsigned __int8 **)(v39 + 32);
      goto LABEL_47;
    }
    if (v40 != 176)
      break;
    v41 = *((unsigned int *)v39 + 5);
    if ((_DWORD)v41 == -1)
      break;
    v42 = (unsigned __int8 **)&v39[8 * v41 + 40];
LABEL_47:
    v38 = *v42;
  }
  while (v38 != v39);
  v43 = sub_22EC34E34((uint64_t *)v84, v39);
  if (v43 == 3
    || ((v44 = v43, a8 != 3) ? (v45 = 5428) : (v45 = 5431),
        sub_22E8FCA40((_QWORD *)a1, v78, v45, 0, (uint64_t)v84),
        sub_22EC35ED0(a1, (uint64_t *)v84, a8, v22, v92, (unsigned __int8 *)a5, a6, "__bridge ", 0),
        result = (uint64_t)sub_22E903BEC((unsigned int *)v84),
        v44 != 2))
  {
    if (a8 == 3)
      v46 = v37;
    else
      v46 = 1;
    if ((v46 & 1) != 0)
    {
      v47 = v78;
      if (v37)
        sub_22EFF605C(a5);
      sub_22E8FCA40((_QWORD *)a1, v47, 0x1536u, 0, (uint64_t)v81);
      v48 = sub_22E8901B8((uint64_t)v81, &v91);
      v49 = sub_22E894E38(v48, (unsigned __int8 *)&v83);
    }
    else
    {
      sub_22E8FCA40((_QWORD *)a1, v78, 0x1539u, 0, (uint64_t)v82);
      v49 = sub_22E8901B8((uint64_t)v82, &v91);
    }
    v70 = v49;
    v71 = *(_OWORD *)v49;
    *(_OWORD *)&v84[9] = *(_OWORD *)(v49 + 9);
    *(_OWORD *)v84 = v71;
    v85[0] = 0;
    v86 = 0;
    if (*(_BYTE *)(v49 + 80))
      sub_22E907424((uint64_t)v85, v49 + 32);
    v87 = *(_QWORD *)(v70 + 88);
    if (v46)
      v72 = (unsigned int *)v81;
    else
      v72 = (unsigned int *)v82;
    sub_22E903BEC(v72);
    if ((_BYTE)v83)
      v73 = "CFBridgingRelease";
    else
      v73 = 0;
    sub_22EC35ED0(a1, (uint64_t *)v84, a8, v22, v92, (unsigned __int8 *)a5, a6, "__bridge_transfer ", v73);
    return (uint64_t)sub_22E903BEC((unsigned int *)v84);
  }
  return result;
}

uint64_t sub_22EC33C80(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t **v6;
  unsigned int v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  int v20;
  uint64_t v21[2];

  do
  {
    v3 = a2;
    LODWORD(v4) = *a2;
    if (v4 > 0xD5)
    {
      if ((_DWORD)v4 == 233)
      {
        LODWORD(v4) = *(_DWORD *)a2;
        if ((*(_DWORD *)a2 & 0x7C0000) != 0x300000)
          goto LABEL_18;
        v5 = a2 + 16;
      }
      else
      {
        if ((_DWORD)v4 != 214)
          break;
        v5 = a2 + 24;
      }
    }
    else if ((_DWORD)v4 == 155)
    {
      if ((**((_DWORD **)a2 + 2) & 0x18000) != 0)
        goto LABEL_18;
      v5 = a2 + 24;
      if (!a2[48])
        v5 = a2 + 32;
      LOBYTE(v4) = -101;
    }
    else
    {
      if ((_DWORD)v4 != 176)
        break;
      v4 = *((unsigned int *)a2 + 5);
      if ((_DWORD)v4 == -1)
      {
LABEL_18:
        v6 = (uint64_t **)(a2 + 24);
        goto LABEL_19;
      }
      v5 = &a2[8 * v4 + 40];
      LOBYTE(v4) = -80;
    }
    a2 = *(unsigned __int8 **)v5;
  }
  while (*(unsigned __int8 **)v5 != v3);
  v6 = (uint64_t **)(v3 + 24);
  if (v4 == 144)
  {
    v7 = *((_DWORD *)v3 + 8);
    v8 = *((unsigned int *)v3 + 9);
    v9 = 1;
    goto LABEL_33;
  }
LABEL_19:
  v10 = (uint64_t)(*v6 + 1);
  v11 = **v6;
  v21[0] = v11;
  v21[1] = v10;
  for (i = v11; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_30;
      v13 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v13 <= 0x39)
        break;
LABEL_25:
      if (sub_22F115668(i))
        v11 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_32;
    }
    if (v13 == 24)
      goto LABEL_31;
    if (v13 == 26)
      break;
    if (((1 << v13) & 0x20000000200003CLL) == 0)
      goto LABEL_25;
LABEL_30:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_30;
LABEL_31:
  v11 = i;
LABEL_32:
  v7 = sub_22F115668(v11);
  v8 = sub_22F1167E8(v21);
  v9 = 3;
LABEL_33:
  v14 = **v6;
  v15 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0);
  if (v15 && (v16 = *(_DWORD *)(v15 + 16), (v16 & 0xFE) == 0x28))
  {
LABEL_39:
    if ((v16 & 0x100000) != 0)
    {
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v15 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v15)
        {
          v20 = *(_DWORD *)(v15 + 16);
          if ((v20 & 0xFE) == 0x28)
            continue;
        }
        v15 = sub_22F10CF48(v15);
        v20 = *(_DWORD *)(v15 + 16);
      }
      while ((v20 & 0x100000) != 0);
    }
    v17 = *(_QWORD *)(v15 + 32);
  }
  else
  {
    v17 = **v6;
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
    {
      v15 = sub_22F10CF48(v15);
      v17 = v14;
      if (v15)
      {
        v16 = *(_DWORD *)(v15 + 16);
        goto LABEL_39;
      }
    }
  }
  v18 = sub_22EC30C10(v17);
  return sub_22EC33478(a1, v7 | (v8 << 32), v14, v18, *((_QWORD *)v3 + 2), v3, 1u, v9);
}

uint64_t sub_22EC33F14(uint64_t a1, int a2, int a3, unsigned int a4, uint64_t *a5, void *a6)
{
  int v8;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t i;
  uint64_t v45;
  unsigned __int8 *v46;
  _BYTE *v47;
  unsigned __int8 *v48;
  _BYTE **v49;
  unsigned int *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _BYTE v67[12];
  char v68;
  _BYTE __p[24];
  char v70;
  unsigned int v71[25];
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;
  int v75[3];

  v8 = a3;
  v75[0] = a3;
  v11 = sub_22EB1B998(a1, a6);
  if ((v11 & 1) != 0)
    return 1;
  v12 = (_DWORD *)(v11 & 0xFFFFFFFFFFFFFFFELL);
  v13 = *a5;
  v14 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v73 = v14;
  v74 = v13;
  v15 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v15 + 17) & 4) != 0 || (v16 = *v12, (*v12 & 0x8000) != 0))
  {
    v20 = 0;
    v19 = 0;
    goto LABEL_17;
  }
  v17 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  v18 = v17 == 32 || v17 == 10;
  if (v18 && sub_22F11514C(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0)))
  {
    if (v17 == 10)
      v19 = 45;
    else
      v19 = 43;
    if (v8 == 1)
    {
      v20 = 1;
    }
    else
    {
      if (v8 == 2)
      {
        v72 = sub_22F334B74(a1, "CFBridgingRelease", 0x11uLL);
        sub_22E8FCA40((_QWORD *)a1, a4, 0xA5Du, 0, (uint64_t)v71);
        LODWORD(v65) = 2;
        v54 = sub_22E8900C4((uint64_t)v71, (int *)&v65);
        v55 = sub_22E8901B8(v54, &v73);
        LODWORD(v64) = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v74 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16) == 10;
        v56 = sub_22E8900C4(v55, (int *)&v64);
        v57 = sub_22E8901B8(v56, &v74);
        sub_22F0D4E74((uint64_t)v12);
        v66 = v58;
        v59 = sub_22E8906A0(v57, (uint64_t *)&v66);
        sub_22E8900C4(v59, v75);
        sub_22E903BEC(v71);
        sub_22E8FCA40((_QWORD *)a1, a4, 0x1534u, 0, (uint64_t)v71);
        v68 = 0;
        *(_QWORD *)&v67[4] = 0;
        __p[9] = 0;
        *(_WORD *)&__p[10] = 0;
        *(_DWORD *)&__p[12] = 0;
        *(_QWORD *)&__p[16] = 0x800000000000000;
        v70 = 0;
        v66 = a4 | ((unint64_t)a4 << 32);
        v67[0] = 1;
        strcpy(__p, "__bridge");
        sub_22E890748((uint64_t)v71, &v66);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        sub_22E903BEC(v71);
        sub_22E8FCA40((_QWORD *)a1, a4, 0x1536u, 0, (uint64_t)v71);
        v60 = sub_22E8901B8((uint64_t)v71, &v73);
        v61 = sub_22E894E38(v60, &v72);
        *(_QWORD *)&v67[4] = 0;
        v68 = 0;
        *(_QWORD *)&__p[16] = 0;
        v66 = a4 | ((unint64_t)a4 << 32);
        v67[0] = 1;
        v70 = 0;
        if (v72)
          v62 = "FBridgingRelease ";
        else
          v62 = "_bridge_transfer ";
        __p[17] = v62[16];
        *(_OWORD *)&__p[1] = *(_OWORD *)v62;
        if (v72)
          v63 = 67;
        else
          v63 = 95;
        __p[0] = v63;
        __p[23] = 18;
        sub_22E890748(v61, &v66);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        sub_22E903BEC(v71);
        LOBYTE(v8) = 0;
      }
      v20 = 0;
    }
    goto LABEL_17;
  }
  if (sub_22F11514C(v15))
  {
    v27 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16);
    if (v27 == 32 || v27 == 10)
    {
      if (!v8)
      {
        v46 = 0;
        v47 = v12;
        while (1)
        {
          v48 = v47;
          if (v16 == 214)
          {
            v49 = (_BYTE **)(v47 + 24);
          }
          else
          {
            if ((v16 + 102) < 0xF5u)
              goto LABEL_41;
            if (v16 == 153 && (*(_DWORD *)v47 & 0x1FC0000) == 0xEC0000)
            {
              if (v46)
              {
                v51 = *((_QWORD *)v47 + 2);
                LOBYTE(v8) = 0;
                v20 = 0;
                if (*v46 == 214)
                  *((_QWORD *)v46 + 3) = v51;
                else
                  *((_QWORD *)v46 + 2) = v51;
              }
              else
              {
                LOBYTE(v8) = 0;
                v20 = 0;
                v12 = (_DWORD *)*((_QWORD *)v47 + 2);
              }
              goto LABEL_43;
            }
            v49 = (_BYTE **)(v47 + 16);
          }
          v47 = *v49;
          LOBYTE(v16) = **v49;
          v46 = v48;
        }
      }
      if (v8 == 2)
      {
        v50 = (unsigned int *)sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 24, 3);
        v20 = 0;
        v19 = 1;
        v12 = sub_22F003694(v50, v14, 57, (uint64_t)v12, 0, 0, 0);
      }
      else
      {
        if (v8 == 1)
        {
          v72 = sub_22F334B74(a1, "CFBridgingRetain", 0x10uLL);
          sub_22E8FCA40((_QWORD *)a1, a4, 0xA5Du, 0, (uint64_t)v71);
          LODWORD(v65) = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v73 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16) == 10;
          v29 = sub_22E8900C4((uint64_t)v71, (int *)&v65);
          v30 = sub_22E8901B8(v29, &v73);
          LODWORD(v64) = 2;
          v31 = sub_22E8900C4(v30, (int *)&v64);
          v32 = sub_22E8901B8(v31, &v74);
          sub_22F0D4E74((uint64_t)v12);
          v66 = v33;
          v34 = sub_22E8906A0(v32, (uint64_t *)&v66);
          sub_22E8900C4(v34, v75);
          sub_22E903BEC(v71);
          sub_22E8FCA40((_QWORD *)a1, a4, 0x1534u, 0, (uint64_t)v71);
          v68 = 0;
          *(_QWORD *)&v67[4] = 0;
          __p[9] = 0;
          *(_WORD *)&__p[10] = 0;
          *(_DWORD *)&__p[12] = 0;
          *(_QWORD *)&__p[16] = 0x900000000000000;
          v70 = 0;
          v66 = a4 | ((unint64_t)a4 << 32);
          v67[0] = 1;
          strcpy(__p, "__bridge");
          sub_22E890748((uint64_t)v71, &v66);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          sub_22E903BEC(v71);
          sub_22E8FCA40((_QWORD *)a1, a4, 0x1535u, 0, (uint64_t)v71);
          v35 = sub_22E8901B8((uint64_t)v71, &v74);
          v36 = sub_22E894E38(v35, &v72);
          *(_QWORD *)&v67[4] = 0;
          v68 = 0;
          *(_QWORD *)&__p[16] = 0;
          v70 = 0;
          v66 = a4 | ((unint64_t)a4 << 32);
          v67[0] = 1;
          if (v72)
            v37 = "FBridgingRetain ";
          else
            v37 = "_bridge_retained";
          *(_OWORD *)&__p[1] = *(_OWORD *)v37;
          if (v72)
            v38 = 67;
          else
            v38 = 95;
          __p[0] = v38;
          __p[23] = 17;
          sub_22E890748(v36, &v66);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          sub_22E903BEC(v71);
LABEL_41:
          LOBYTE(v8) = 0;
        }
        v20 = 0;
LABEL_43:
        v19 = 1;
      }
LABEL_17:
      v21 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 48, 3);
      v22 = *a5;
      *(_BYTE *)v21 = -104;
      if (byte_255E04EB3)
      {
        v23 = sub_22F0D3748(152);
        ++*((_DWORD *)v23 + 2);
      }
      v24 = *(_DWORD *)v21;
      *(_QWORD *)(v21 + 8) = v22;
      *(_QWORD *)(v21 + 16) = v12;
      *(_QWORD *)v21 = v24 & 0xF80000FF | (v19 << 18);
      *(_QWORD *)(v21 + 24) = a5;
      *(_DWORD *)v21 = v24 & 0xF80000FF | (v19 << 18) | ((sub_22EFB2630(v21) & 0x1F) << 13);
      *(_DWORD *)(v21 + 32) = a2;
      *(_DWORD *)(v21 + 36) = a4;
      *(_BYTE *)(v21 + 40) = *(_BYTE *)(v21 + 40) & 0xFC | v8 & 3;
      if (v20)
      {
        *(_WORD *)(a1 + 1693) = 257;
        v25 = v74;
        v26 = (unsigned int *)sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 24, 3);
        return (uint64_t)sub_22F003694(v26, v25, 58, v21, 0, 0, 0);
      }
      return v21;
    }
  }
  sub_22E8FCA40((_QWORD *)a1, a2, 0xA5Cu, 0, (uint64_t)v71);
  v39 = sub_22E8901B8((uint64_t)v71, &v73);
  v40 = sub_22E8901B8(v39, &v74);
  sub_22E8900C4(v40, v75);
  sub_22F0D4E74((uint64_t)v12);
  v65 = v41;
  v42 = sub_22E8906A0(v40, &v65);
  v43 = *a5;
  v66 = v43;
  *(_QWORD *)v67 = a5 + 1;
  for (i = v43; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_55;
      v45 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v45 <= 0x39)
        break;
LABEL_50:
      if (sub_22F115668(i))
        v43 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_70;
    }
    if (v45 == 24)
      goto LABEL_69;
    if (v45 == 26)
      break;
    if (((1 << v45) & 0x20000000200003CLL) == 0)
      goto LABEL_50;
LABEL_55:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_55;
LABEL_69:
  v43 = i;
LABEL_70:
  v52 = sub_22F115668(v43);
  v64 = v52 | ((unint64_t)sub_22F1167E8((uint64_t *)&v66) << 32);
  sub_22E8906A0(v42, (uint64_t *)&v64);
  sub_22E903BEC(v71);
  return 1;
}

_OWORD *sub_22EC34704(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x23489D23C]((_QWORD *)v8, 24 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = xmmword_22F4572A0;
        result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 24 * v3;
      v13 = (uint64_t)v4;
      do
      {
        if (*(_QWORD *)v13 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v17 = 0;
          sub_22F335030(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v13, &v17);
          v14 = v17;
          *v17 = *(_OWORD *)v13;
          *((_DWORD *)v14 + 4) = *(_DWORD *)(v13 + 16);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    return (_OWORD *)llvm::deallocate_buffer(v4, (void *)(24 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v15 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v15)
    {
      v16 = 24 * v15;
      do
      {
        *result = xmmword_22F4572A0;
        result = (_OWORD *)((char *)result + 24);
        v16 -= 24;
      }
      while (v16);
    }
  }
  return result;
}

void sub_22EC34868(_QWORD *a1)
{
  uint64_t v2;

  if (a1)
  {
    sub_22EC34868(*a1);
    sub_22EC34868(a1[1]);
    if (*((_DWORD *)a1 + 10) >= 0x41u)
    {
      v2 = a1[4];
      if (v2)
        MEMORY[0x2348A0E84](v2, 0x1000C8000313F17);
    }
    operator delete(a1);
  }
}

uint64_t sub_22EC348C8(_QWORD *a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  char v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  void *__p;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unsigned int v36[26];

  v6 = (_QWORD *)(a6 & 0xFFFFFFFFFFFFFFF8);
  if ((a6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v9 = 0;
    v10 = a3 | ((unint64_t)a3 << 32);
    v11 = a4 | ((unint64_t)a4 << 32);
    do
    {
      v12 = *v6 & 0xFFFFFFFFFFFFFFF8;
      if (v12 != a5)
      {
        v13 = *(_QWORD *)(v12 + 16);
        v14 = v13 & 0xFFFFFFFFFFFFFFF8;
        if ((v13 & 4) != 0)
          v14 = *(_QWORD *)v14;
        if ((*(_WORD *)(v14 + 8) & 0x7E) != 0x14
          && *(_QWORD *)(v12 + 40) == *(_QWORD *)(a5 + 40)
          && (sub_22EAF7218((uint64_t)a1, a5, *v6 & 0xFFFFFFFFFFFFFFF8, 0) & 1) == 0)
        {
          if ((v9 & 1) == 0)
          {
            sub_22E8FCA40(a1, a2, 0x1A65u, 0, (uint64_t)v36);
            v35 = *(_QWORD *)(a5 + 40);
            v15 = sub_22E894538((uint64_t)v36, &v35);
            v30 = 0;
            v29 = 0;
            v32 = 0;
            v33 = 0x100000000000000;
            v31 = (void *)40;
            v27 = v10;
            v28 = 0;
            v34 = 0;
            v16 = sub_22E890748(v15, &v27);
            v22 = 0;
            v21 = 0;
            v24 = 0;
            v25 = 0x100000000000000;
            __p = (void *)41;
            v19 = v11;
            v20 = 0;
            v26 = 0;
            sub_22E890748(v16, &v19);
            if (SHIBYTE(v25) < 0)
              operator delete(__p);
            if (SHIBYTE(v33) < 0)
              operator delete(v31);
            sub_22E903BEC(v36);
            sub_22E8FCA40(a1, *(_DWORD *)(a5 + 24), 0x16B5u, 0, (uint64_t)v36);
            v27 = *(_QWORD *)(a5 + 40);
            sub_22E894538((uint64_t)v36, (uint64_t *)&v27);
            sub_22E903BEC(v36);
          }
          sub_22E8FCA40(a1, *(_DWORD *)(v12 + 24), 0x16B5u, 0, (uint64_t)v36);
          v27 = *(_QWORD *)(v12 + 40);
          sub_22E894538((uint64_t)v36, (uint64_t *)&v27);
          sub_22E903BEC(v36);
          v9 = 1;
        }
      }
      v6 = (_QWORD *)(v6[1] & 0xFFFFFFFFFFFFFFF8);
    }
    while (v6);
  }
  else
  {
    v9 = 0;
  }
  return v9 & 1;
}

unint64_t sub_22EC34AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int16 v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v2 = a2;
  v19 = a2;
  v4 = sub_22F114F34(&v19);
  v5 = sub_22F36E044(a1);
  v6 = *(_QWORD *)(v5 + 48);
  if (v4 >= 0x100u)
  {
    if (v6)
      v8 = v6 & 0xFFFFFFFFFFFFFFF0;
    else
      v8 = sub_22EF6462C(a1, v5);
    if (v19 != v8)
      return v2;
    v12 = *(_DWORD *)((char *)dword_22F46A4D0 + ((uint64_t)((unint64_t)v4 << 56) >> 54));
    v13 = sub_22F36E1B8(a1);
    v14 = *(_QWORD *)(v13 + 48);
    if (v14)
      v15 = v14 & 0xFFFFFFFFFFFFFFF0;
    else
      v15 = sub_22EF6462C(a1, v13);
    v16 = sub_22F36E1B8(a1);
    v17 = *(_QWORD *)(v16 + 48);
    if (v17)
      v18 = v17 & 0xFFFFFFFFFFFFFFF0;
    else
      v18 = sub_22EF6462C(a1, v16);
    return sub_22F369798(a1, v12, v15, v18);
  }
  else
  {
    if (v6)
      v7 = v6 & 0xFFFFFFFFFFFFFFF0;
    else
      v7 = sub_22EF6462C(a1, v5);
    if (v19 != v7)
      return v2;
    v9 = sub_22F36E1B8(a1);
    v10 = *(_QWORD *)(v9 + 48);
    if (v10)
      return v10 & 0xFFFFFFFFFFFFFFF0;
    return sub_22EF6462C(a1, v9);
  }
}

void sub_22EC34C40()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22EC34C54(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_22F2E6D78(a2);
  return v3 && (*(_DWORD *)(v3 + 28) & 0x7F) == 0x16 || sub_22F335560(a2);
}

__n128 sub_22EC34CA0@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 8) = result;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v4 = &off_24FAB8760;
  *a2 = v4;
  return result;
}

_QWORD *sub_22EC34CF8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;

  v18 = 0;
  if (sub_22F2BDD74((uint64_t *)a1, a2, &v18))
  {
    *v18 = -2;
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  v4 = *(_QWORD **)(a1 + 32);
  v5 = a2 + 2;
  if (a2 + 2 == v4)
  {
    *(_QWORD *)(a1 + 32) = a2;
  }
  else
  {
    v6 = 0;
    v7 = ((uint64_t)a2 - *(_QWORD *)(a1 + 24)) >> 4;
    do
    {
      v8 = &v5[v6];
      *(v8 - 2) = v5[v6];
      *((_DWORD *)v8 - 2) = v5[v6 + 1];
      v6 += 2;
    }
    while (v8 + 2 != v4);
    *(_QWORD *)(a1 + 32) = &a2[v6];
    if (v6 * 8)
    {
      v9 = *(unsigned int *)(a1 + 16);
      v10 = *(_QWORD *)a1 + 16 * v9;
      if (*(_DWORD *)(a1 + 8))
      {
        if ((_DWORD)v9)
        {
          v11 = 16 * v9;
          v12 = *(_QWORD *)a1;
          while (*(_QWORD *)v12 >= 0xFFFFFFFFFFFFFFFELL)
          {
            v12 += 16;
            v11 -= 16;
            if (!v11)
              goto LABEL_12;
          }
        }
        else
        {
          v12 = *(_QWORD *)a1;
        }
      }
      else
      {
LABEL_12:
        v12 = *(_QWORD *)a1 + 16 * v9;
      }
      v14 = *(_QWORD *)a1 + 16 * v9;
LABEL_17:
      while (v12 != v14)
      {
        v15 = *(unsigned int *)(v12 + 8);
        if (v7 < v15)
          *(_DWORD *)(v12 + 8) = v15 - 1;
        v16 = (unint64_t *)(v12 + 16);
        while (v16 != (unint64_t *)v10)
        {
          v17 = *v16;
          v16 += 2;
          if (v17 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v12 = (uint64_t)(v16 - 2);
            goto LABEL_17;
          }
        }
        v12 = v10;
      }
    }
  }
  return a2;
}

BOOL sub_22EC34E34(uint64_t *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  int v3;
  int v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;

uint64_t sub_22EC35A34()
{
  uint64_t v0;
  unint64_t v1;

  return sub_22EC35CFC(v0, v1);
}

void sub_22EC35A4C()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 2) & 4) == 0)
    JUMPOUT(0x22EC35A24);
  JUMPOUT(0x22EC35A80);
}

void sub_22EC35A88()
{
  uint64_t *v0;
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned __int8 **v11;

  v2 = *(unsigned __int8 **)(v1 + 32);
  if (v2)
  {
    while (1)
    {
      v3 = v2;
      v4 = *v2;
      if (v4 > 213)
      {
        if (v4 == 233)
        {
          if ((*(_DWORD *)v3 & 0x7C0000) != 0x300000)
            goto LABEL_19;
          v6 = (unsigned __int8 **)(v3 + 16);
        }
        else
        {
          if (v4 != 214)
            goto LABEL_19;
          v6 = (unsigned __int8 **)(v3 + 24);
        }
      }
      else if (v4 == 155)
      {
        if ((**((_DWORD **)v3 + 2) & 0x18000) != 0)
          goto LABEL_19;
        if (v3[48])
          v6 = (unsigned __int8 **)(v3 + 24);
        else
          v6 = (unsigned __int8 **)(v3 + 32);
      }
      else
      {
        if (v4 != 176)
          goto LABEL_19;
        v5 = *((unsigned int *)v3 + 5);
        if ((_DWORD)v5 == -1)
          goto LABEL_19;
        v6 = (unsigned __int8 **)&v3[8 * v5 + 40];
      }
      v2 = *v6;
      if (v2 == v3)
        goto LABEL_19;
    }
  }
  v3 = 0;
LABEL_19:
  if (sub_22EC34E34(v0, v3))
  {
    v7 = *(unsigned __int8 **)(v1 + 40);
    if (v7)
    {
      while (1)
      {
        v8 = v7;
        v9 = *v7;
        if (v9 > 213)
        {
          if (v9 == 233)
          {
            if ((*(_DWORD *)v8 & 0x7C0000) != 0x300000)
              goto LABEL_38;
            v11 = (unsigned __int8 **)(v8 + 16);
          }
          else
          {
            if (v9 != 214)
              goto LABEL_38;
            v11 = (unsigned __int8 **)(v8 + 24);
          }
        }
        else if (v9 == 155)
        {
          if ((**((_DWORD **)v8 + 2) & 0x18000) != 0)
            goto LABEL_38;
          if (v8[48])
            v11 = (unsigned __int8 **)(v8 + 24);
          else
            v11 = (unsigned __int8 **)(v8 + 32);
        }
        else
        {
          if (v9 != 176)
            goto LABEL_38;
          v10 = *((unsigned int *)v8 + 5);
          if ((_DWORD)v10 == -1)
            goto LABEL_38;
          v11 = (unsigned __int8 **)&v8[8 * v10 + 40];
        }
        v7 = *v11;
        if (v7 == v8)
          goto LABEL_38;
      }
    }
    v8 = 0;
LABEL_38:
    sub_22EC34E34(v0, v8);
  }
  JUMPOUT(0x22EC35A24);
}

void sub_22EC35B2C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  if ((*(_DWORD *)(*(_QWORD *)(v1 + 16) + 28) & 0x7Fu) - 60 >= 7)
    v2 = 0;
  else
    v2 = *(_QWORD *)(v1 + 16);
  v3 = *((_DWORD *)v0 + 3);
  if (v3 <= 4 && ((1 << v3) & 0x1A) != 0)
  {
    v4 = *((_DWORD *)v0 + 2);
    if (v4 <= 4 && ((1 << v4) & 0x1A) != 0)
    {
      if (v2)
      {
        if (!sub_22EFBC498(v2, *v0))
        {
          v5 = *(_QWORD *)(v2 + 48);
          if ((v5 & 1) != 0 || (*(_BYTE *)((v5 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) != 0)
            sub_22F1E361C(*(_QWORD **)(*v0 + 1992), *(_DWORD *)(v2 + 24));
        }
      }
    }
  }
  JUMPOUT(0x22EC35A24);
}

uint64_t sub_22EC35BA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if ((*(_BYTE *)(v1 + 27) & 1) != 0)
    v2 = *(_QWORD *)(v1 + 16);
  else
    v2 = 0;
  return sub_22EC35E24(v0, v2);
}

void sub_22EC35BB8()
{
  JUMPOUT(0x22EC35C88);
}

uint64_t sub_22EC35CFC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;

  v4 = sub_22EFFA604(*(unsigned __int8 **)(a2 + *(unsigned __int8 *)(a2 + 3)));
  if (!v4)
    return sub_22EFFBE1C(a2, *(_QWORD *)a1, 2) != 0;
  v5 = v4;
  if ((*(_DWORD *)(v4 + 28) & 0x7Eu) - 52 > 5)
    return sub_22EFFBE1C(a2, *(_QWORD *)a1, 2) != 0;
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (!v6 || *(unsigned __int8 *)(v6 + 16) - 27 <= 0xFFFFFFFD)
    v6 = sub_22F10CF48(v6);
  if (!sub_22F11514C(*(_QWORD *)(*(_QWORD *)(v6 + 24) & 0xFFFFFFFFFFFFFFF0)))
    return sub_22EFFBE1C(a2, *(_QWORD *)a1, 2) != 0;
  v8 = *(_DWORD *)(a1 + 12);
  if (v8 > 4 || ((1 << v8) & 0x1A) == 0)
    return sub_22EFFBE1C(a2, *(_QWORD *)a1, 2) != 0;
  if (sub_22F3355C0(v5))
    return 2;
  if (sub_22F335620(v5))
    goto LABEL_15;
  if (sub_22EFC01DC(v5, 0) != 404)
  {
    if (!sub_22F30AD50(v5))
      return sub_22EFFBE1C(a2, *(_QWORD *)a1, 2) != 0;
    if (!sub_22EEDF438(v5))
      return 2;
LABEL_15:
    if (*(_BYTE *)(a1 + 16))
      return 3;
    return sub_22EFFBE1C(a2, *(_QWORD *)a1, 2) != 0;
  }
  return 1;
}

uint64_t sub_22EC35E24(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  uint64_t result;
  unsigned int v8;

  if (!a2)
    return 0;
  v2 = *(_DWORD *)(a1 + 12);
  v3 = v2 > 4;
  v4 = (1 << v2) & 0x1A;
  if (v3 || v4 == 0)
    return 0;
  result = sub_22F11514C(*(_QWORD *)(*(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF0));
  if ((_DWORD)result)
  {
    if (sub_22F3355C0(a2))
      return 2;
    if (sub_22F335620(a2))
    {
      return 3;
    }
    else
    {
      v8 = sub_22F41F330(*(_QWORD *)(a2 + 40)) - 1;
      if (v8 > 4)
        return 2;
      return dword_22F4835E0[v8];
    }
  }
  return result;
}

void sub_22EC35ED0(uint64_t a1, uint64_t *a2, int a3, unsigned int a4, uint64_t a5, unsigned __int8 *a6, unsigned __int8 *a7, char *__src, const char *a9)
{
  unsigned __int8 *v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v20;
  unsigned __int8 *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const std::string::value_type *p_p;
  std::string::size_type v28;
  unsigned __int8 *v29;
  unint64_t v30;
  unint64_t v31;
  std::string *v32;
  size_t size;
  const std::string::value_type *v34;
  std::string::size_type v35;
  void *v36;
  std::string *v37;
  std::string::size_type v38;
  void *v39;
  size_t v40;
  size_t v41;
  size_t v42;
  int v43;
  size_t v44;
  uint64_t v45;
  std::string::size_type v46;
  void *p_dst;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  std::string *v51;
  size_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  std::string v56;
  std::string v57;
  char v58;
  uint64_t v59;
  std::string __dst;
  void *__p;
  __int128 v62;
  std::string v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v59 = a5;
  if (a3 == 2)
    return;
  v10 = a6;
  if (a9)
  {
    if (a3 == 3)
    {
      if (*a7 - 152 < 0xFFFFFFFA)
        return;
      v13 = *((unsigned int *)a7 + 8);
      v14 = *((unsigned int *)a7 + 11);
      __p = &v63;
      v62 = xmmword_22F44E330;
      v15 = *(unsigned __int8 *)sub_22F1E2D38(*(uint64_t **)(a1 + 112), (int)v13 - 1, 0);
      if ((word_22F4ADB24[v15] & 0xE8) != 0)
      {
        v16 = v62;
      }
      else
      {
        v16 = v62;
        if ((_DWORD)v15 != 36 || (**(_QWORD **)(a1 + 72) & 0x20000000) == 0)
          goto LABEL_79;
      }
      if ((unint64_t)(v16 + 1) > *((_QWORD *)&v62 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v16 = v62;
      }
      *((_BYTE *)__p + v16) = 32;
      v16 = v62 + 1;
      *(_QWORD *)&v62 = v62 + 1;
LABEL_79:
      v44 = strlen(a9);
      if (*((_QWORD *)&v62 + 1) < v44 + v16)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v16 = v62;
      }
      v45 = v14 << 32;
      if (v44)
      {
        memcpy((char *)__p + v16, a9, v44);
        v16 = v62;
      }
      v46 = v16 + v44;
      *(_QWORD *)&v62 = v46;
      *(std::string::size_type *)((char *)&v56.__r_.__value_.__r.__words[1] + 4) = 0;
      v56.__r_.__value_.__s.__data_[20] = 0;
      v58 = 0;
      v56.__r_.__value_.__r.__words[0] = v45 | v13;
      v56.__r_.__value_.__s.__data_[8] = 1;
      if (v46 <= 0x7FFFFFFFFFFFFFF7)
      {
        if (v46 >= 0x17)
        {
          v48 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v46 | 7) != 0x17)
            v48 = v46 | 7;
          v49 = v48 + 1;
          p_dst = operator new(v48 + 1);
          __dst.__r_.__value_.__l.__size_ = v46;
          __dst.__r_.__value_.__r.__words[2] = v49 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v46;
          p_dst = &__dst;
          if (!v46)
            goto LABEL_91;
        }
        memmove(p_dst, __p, v46);
LABEL_91:
        *((_BYTE *)p_dst + v46) = 0;
        v57 = __dst;
LABEL_92:
        sub_22F334ACC(a2, &v56);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v57.__r_.__value_.__l.__data_);
        if (__p != &v63)
          free(__p);
        return;
      }
LABEL_123:
      abort();
    }
    if (*a6 == 144)
      v10 = (unsigned __int8 *)*((_QWORD *)a6 + 2);
    v21 = sub_22EFFEB40(v10);
    sub_22F0D4E74((uint64_t)v21);
    v23 = v22;
    __p = &v63;
    v62 = xmmword_22F44E330;
    v24 = *(unsigned __int8 *)sub_22F1E2D38(*(uint64_t **)(a1 + 112), (int)v22 - 1, 0);
    if ((word_22F4ADB24[v24] & 0xE8) != 0)
    {
      v25 = v62;
    }
    else
    {
      v25 = v62;
      if ((_DWORD)v24 != 36 || (**(_QWORD **)(a1 + 72) & 0x20000000) == 0)
        goto LABEL_65;
    }
    if ((unint64_t)(v25 + 1) > *((_QWORD *)&v62 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v25 = v62;
    }
    *((_BYTE *)__p + v25) = 32;
    v25 = v62 + 1;
    *(_QWORD *)&v62 = v62 + 1;
LABEL_65:
    v40 = strlen(a9);
    v41 = v40;
    if (*((_QWORD *)&v62 + 1) < v40 + v25)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v25 = v62;
      if (!v41)
      {
LABEL_68:
        v42 = v25 + v41;
        *(_QWORD *)&v62 = v25 + v41;
        if (*v21 == 214)
        {
          sub_22E729148(__p, v42, v23, 0, (uint64_t)&v56);
        }
        else
        {
          if (v42 + 1 > *((_QWORD *)&v62 + 1))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v42 = v62;
          }
          *((_BYTE *)__p + v42) = 40;
          *(_QWORD *)&v62 = v62 + 1;
          sub_22E729148(__p, v62, v23, 0, (uint64_t)&v56);
          sub_22F334ACC(a2, &v56);
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v57.__r_.__value_.__l.__data_);
          v43 = sub_22F141A3C(HIDWORD(v23), 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
          *(std::string::size_type *)((char *)&v56.__r_.__value_.__r.__words[1] + 4) = 0;
          v56.__r_.__value_.__s.__data_[20] = 0;
          v57.__r_.__value_.__r.__words[2] = 0x100000000000000;
          LODWORD(v56.__r_.__value_.__l.__data_) = v43;
          HIDWORD(v56.__r_.__value_.__r.__words[0]) = v43;
          v56.__r_.__value_.__s.__data_[8] = 0;
          *(_OWORD *)&v57.__r_.__value_.__l.__data_ = 0x29uLL;
          v58 = 0;
        }
        goto LABEL_92;
      }
    }
    else if (!v40)
    {
      goto LABEL_68;
    }
    memcpy((char *)__p + v25, a9, v41);
    v25 = v62;
    goto LABEL_68;
  }
  if (a3 != 3)
  {
    if (a3 == 1)
    {
      if (__src)
        v20 = strlen(__src);
      else
        v20 = 0;
      sub_22E729148(__src, v20, a4, 0, (uint64_t)&__p);
      sub_22F334ACC(a2, &__p);
      if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      v50 = (void *)v63.__r_.__value_.__r.__words[0];
    }
    else
    {
      *((_BYTE *)&v56.__r_.__value_.__s + 23) = 1;
      LOWORD(v56.__r_.__value_.__l.__data_) = 40;
      std::string::append(&v56, __src);
      sub_22F1192C0(&v59, (uint64_t)&__p);
      if (v62 >= 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if (v62 >= 0)
        v28 = HIBYTE(v62) & 0x7F;
      else
        v28 = v62;
      std::string::append(&v56, p_p, v28);
      if (SHIBYTE(v62) < 0)
        operator delete(__p);
      std::string::append(&v56, ")");
      v29 = sub_22EFFEB40(v10);
      sub_22F0D4E74((uint64_t)v29);
      v31 = v30;
      if (*v29 == 214)
      {
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v32 = &v56;
        else
          v32 = (std::string *)v56.__r_.__value_.__r.__words[0];
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&v56.__r_.__value_.__s + 23) & 0x7F;
        else
          size = v56.__r_.__value_.__l.__size_;
        sub_22E729148(v32, size, v30, 0, (uint64_t)&__p);
      }
      else
      {
        std::string::append(&v56, "(");
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = &v56;
        else
          v51 = (std::string *)v56.__r_.__value_.__r.__words[0];
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v52 = *((_BYTE *)&v56.__r_.__value_.__s + 23) & 0x7F;
        else
          v52 = v56.__r_.__value_.__l.__size_;
        sub_22E729148(v51, v52, v31, 0, (uint64_t)&__p);
        sub_22F334ACC(a2, &__p);
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v63.__r_.__value_.__l.__data_);
        v53 = sub_22F141A3C(HIDWORD(v31), 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
        *(_QWORD *)((char *)&v62 + 4) = 0;
        BYTE12(v62) = 0;
        v63.__r_.__value_.__r.__words[2] = 0x100000000000000;
        __p = (void *)(v53 | ((unint64_t)v53 << 32));
        LOBYTE(v62) = 0;
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = 0x29uLL;
        v64 = 0;
      }
      sub_22F334ACC(a2, &__p);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      v50 = (void *)v56.__r_.__value_.__r.__words[0];
    }
LABEL_120:
    operator delete(v50);
    return;
  }
  if (*a7 - 152 < 0xFFFFFFFA)
    return;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 40;
  std::string::append(&__dst, __src);
  sub_22F1192C0(&v59, (uint64_t)&__p);
  if (v62 >= 0)
    v34 = (const std::string::value_type *)&__p;
  else
    v34 = (const std::string::value_type *)__p;
  if (v62 >= 0)
    v35 = HIBYTE(v62) & 0x7F;
  else
    v35 = v62;
  std::string::append(&__dst, v34, v35);
  if (SHIBYTE(v62) < 0)
    operator delete(__p);
  std::string::append(&__dst, ")");
  v36 = (void *)(*((unsigned int *)a7 + 8) | ((unint64_t)*((unsigned int *)a7 + 11) << 32));
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = &__dst;
  else
    v37 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
  else
    v38 = __dst.__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)&v62 + 4) = 0;
  BYTE12(v62) = 0;
  v64 = 0;
  __p = v36;
  LOBYTE(v62) = 1;
  if (v38 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_123;
  if (v38 >= 0x17)
  {
    v54 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v54 = v38 | 7;
    v55 = v54 + 1;
    v39 = operator new(v54 + 1);
    v56.__r_.__value_.__l.__size_ = v38;
    v56.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
    goto LABEL_115;
  }
  *((_BYTE *)&v56.__r_.__value_.__s + 23) = v38;
  v39 = &v56;
  if (v38)
LABEL_115:
    memmove(v39, v37, v38);
  *((_BYTE *)v39 + v38) = 0;
  v63 = v56;
  sub_22F334ACC(a2, &__p);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    v50 = (void *)__dst.__r_.__value_.__r.__words[0];
    goto LABEL_120;
  }
}

unint64_t sub_22EC366C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;

  v1 = *(_QWORD *)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + ((2 * (int)a1) & 8)) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
    return 0;
  v2 = sub_22F10ACF8(v1);
  result = 0;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
  {
    if (*(_BYTE *)(v4 + 16) == 45)
    {
      v5 = sub_22F114198(*(_QWORD *)(v4 + 24));
      result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v5 + 104) + 96), *(_QWORD *)(v5 + 104));
      if (result)
      {
        v6 = result;
        v7 = 0;
        v8 = result;
        while (1)
        {
          if ((*(_BYTE *)(v8 + 29) & 1) != 0)
          {
            sub_22EFC8E88(v8);
            v10 = *(unint64_t **)v9;
            v11 = *(unsigned int *)(v9 + 8);
            v12 = *(unint64_t **)v9;
            if ((_DWORD)v11)
            {
              v13 = 8 * v11;
              v12 = *(unint64_t **)v9;
              while (*(_WORD *)(*v12 + 32) != 253)
              {
                ++v12;
                v13 -= 8;
                if (!v13)
                  goto LABEL_13;
              }
            }
            if (v12 != &v10[v11])
              break;
          }
LABEL_13:
          if ((*(_BYTE *)(v8 + 96) & 3) != 0)
          {
            if (v7)
              return 0;
            v7 = 1;
          }
          v8 = sub_22E3CD31C((uint64_t *)(v8 + 96), v8);
          result = 0;
          if (v8 == v6 || !v8)
            return result;
        }
        do
        {
          v14 = *v10++;
          result = v14;
        }
        while (*(_WORD *)(v14 + 32) != 253);
      }
    }
  }
  return result;
}

unint64_t sub_22EC3680C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;

  v1 = *(_QWORD *)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + ((2 * (int)a1) & 8)) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
    return 0;
  v2 = sub_22F10ACF8(v1);
  result = 0;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
  {
    if (*(_BYTE *)(v4 + 16) == 45)
    {
      v5 = sub_22F114198(*(_QWORD *)(v4 + 24));
      result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v5 + 104) + 96), *(_QWORD *)(v5 + 104));
      if (result)
      {
        v6 = result;
        v7 = 0;
        v8 = result;
        while (1)
        {
          if ((*(_BYTE *)(v8 + 29) & 1) != 0)
          {
            sub_22EFC8E88(v8);
            v10 = *(unint64_t **)v9;
            v11 = *(unsigned int *)(v9 + 8);
            v12 = *(unint64_t **)v9;
            if ((_DWORD)v11)
            {
              v13 = 8 * v11;
              v12 = *(unint64_t **)v9;
              while (*(_WORD *)(*v12 + 32) != 254)
              {
                ++v12;
                v13 -= 8;
                if (!v13)
                  goto LABEL_13;
              }
            }
            if (v12 != &v10[v11])
              break;
          }
LABEL_13:
          if ((*(_BYTE *)(v8 + 96) & 3) != 0)
          {
            if (v7)
              return 0;
            v7 = 1;
          }
          v8 = sub_22E3CD31C((uint64_t *)(v8 + 96), v8);
          result = 0;
          if (v8 == v6 || !v8)
            return result;
        }
        do
        {
          v14 = *v10++;
          result = v14;
        }
        while (*(_WORD *)(v14 + 32) != 254);
      }
    }
  }
  return result;
}

uint64_t sub_22EC36954(int64x2_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned __int8 v16;
  BOOL v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  unint64_t v21;
  uint64_t (*v22)(unint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  unint64_t v23;
  int v24;
  uint64_t result;
  unint64_t v26;
  unsigned __int8 v27;
  BOOL v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  char *v44;
  int v45;
  int v46;
  unint64_t v47;
  char *v48;
  int v49;
  int v50;
  unint64_t v51;
  char *v52;
  int v53;
  __int32 v54;
  unsigned int v55;
  _BYTE v56[21];
  __int128 __p;
  uint64_t v58;
  char v59;

  if (!a2)
    return 0;
  v6 = a3;
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8);
  v10 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFFF0) + 8);
  v11 = v10 | a4 & 7;
  sub_22F0D4E74((uint64_t)a2);
  v13 = v12;
  v55 = sub_22F141A3C(HIDWORD(v12), 0, *(_QWORD **)(a5 + 112), *(_DWORD **)(a5 + 72));
  v14 = sub_22EFFEB40(a2);
  v15 = 0;
  v16 = *v14;
  if ((*v14 + 113) >= 0xBu)
  {
    v15 = 0;
    v17 = *v14 - 107 > 0x36 || ((1 << (v16 - 107)) & 0x40000FB5589801) == 0;
    if (v17 && (*v14 - 188 > 0x12 || ((1 << (*v14 + 68)) & 0x61001) == 0))
    {
      v27 = v16 + 41;
      v28 = v27 > 0x12u;
      v29 = (0x3FF7Eu >> v27) & 1;
      if (v28)
        v29 = 1;
      if (*a2 == 214)
        v15 = 0;
      else
        v15 = v29;
    }
  }
  v18 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
  if (!v18
    || *(_BYTE *)(v18 + 16) != 39
    || !((unsigned int (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))a1[2].i64[0])(*(_QWORD *)(v18 + 32) & 7 | *(_QWORD *)((*(_QWORD *)(v18 + 32) & 0xFFFFFFFFFFFFFFF0) + 8), v11, a5, v13, 1))
  {
    if (*(_BYTE *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 16) != 39 || (*(_DWORD *)v14 & 0x1F00) != 0x100)
      return 0;
    v22 = (uint64_t (*)(unint64_t, uint64_t, uint64_t, _QWORD, _QWORD))a1[2].i64[0];
    v23 = sub_22EF5B848(*(_QWORD *)(a5 + 88), v9 | v6 & 7, 0);
    v24 = v22(v23, v11, a5, v13, 0);
    result = 0;
    if (!v24)
      return result;
    if (*v14 == 233)
    {
      if ((*(_DWORD *)v14 & 0x7C0000) == 0x140000)
      {
        v56[20] = 0;
        *(_QWORD *)&v56[12] = 0;
        v58 = 0;
        __p = 0uLL;
        v59 = 0;
        *(_QWORD *)v56 = v13 | (v13 << 32);
        v56[8] = 1;
        v26 = a1->u64[1];
        if (v26 >= a1[1].i64[0])
        {
          v44 = sub_22EC37744(a1, (uint64_t)v56);
          v45 = SHIBYTE(v58);
          a1->i64[1] = (uint64_t)v44;
          if (v45 < 0)
            operator delete((void *)__p);
        }
        else
        {
          *(_OWORD *)v26 = *(_OWORD *)v56;
          *(_QWORD *)(v26 + 13) = *(_QWORD *)&v56[13];
          *(_QWORD *)(v26 + 32) = 0;
          *(_QWORD *)(v26 + 40) = 0;
          *(_QWORD *)(v26 + 24) = 0;
          *(_BYTE *)(v26 + 48) = 0;
          a1->i64[1] = v26 + 56;
        }
        v20 = 3;
        goto LABEL_63;
      }
      goto LABEL_62;
    }
    if (v15)
    {
      v56[20] = 0;
      *(_QWORD *)&v56[12] = 0;
      v58 = 0;
      __p = 0uLL;
      *(_QWORD *)v56 = v13 | ((unint64_t)v13 << 32);
      v56[8] = 0;
      v33 = a1->u64[1];
      v34 = a1[1].u64[0];
      LOWORD(__p) = 10278;
      HIBYTE(v58) = 2;
      v59 = 0;
      if (v33 >= v34)
      {
        v35 = sub_22EC37744(a1, (uint64_t)v56);
        v50 = SHIBYTE(v58);
        a1->i64[1] = (uint64_t)v35;
        if (v50 < 0)
        {
          operator delete((void *)__p);
          v35 = (char *)a1->i64[1];
        }
      }
      else
      {
        *(_OWORD *)v33 = *(_OWORD *)v56;
        *(_QWORD *)(v33 + 13) = *(_QWORD *)&v56[13];
        *(_OWORD *)(v33 + 24) = __p;
        *(_QWORD *)(v33 + 40) = v58;
        *(_BYTE *)(v33 + 48) = 0;
        v35 = (char *)(v33 + 56);
        a1->i64[1] = v33 + 56;
      }
      v56[20] = 0;
      *(_QWORD *)&v56[12] = 0;
      v58 = 0;
      __p = 0uLL;
      *(_QWORD *)v56 = v55 | ((unint64_t)v55 << 32);
      v56[8] = 0;
      v51 = a1[1].u64[0];
      LOBYTE(__p) = 41;
      HIBYTE(v58) = 1;
      v59 = 0;
      if ((unint64_t)v35 < v51)
      {
        *(_OWORD *)v35 = *(_OWORD *)v56;
        *(_QWORD *)(v35 + 13) = *(_QWORD *)&v56[13];
        *(_OWORD *)(v35 + 24) = __p;
        *((_QWORD *)v35 + 5) = v58;
        v35[48] = 0;
        v41 = v35 + 56;
        goto LABEL_59;
      }
    }
    else
    {
      v56[20] = 0;
      *(_QWORD *)&v56[12] = 0;
      v58 = 0;
      __p = 0uLL;
      *(_QWORD *)v56 = v13 | ((unint64_t)v13 << 32);
      v56[8] = 0;
      v39 = a1->u64[1];
      v40 = a1[1].u64[0];
      LOBYTE(__p) = 38;
      HIBYTE(v58) = 1;
      v59 = 0;
      if (v39 < v40)
      {
        *(_OWORD *)v39 = *(_OWORD *)v56;
        *(_QWORD *)(v39 + 13) = *(_QWORD *)&v56[13];
        *(_OWORD *)(v39 + 24) = __p;
        *(_QWORD *)(v39 + 40) = v58;
        *(_BYTE *)(v39 + 48) = 0;
        v41 = (char *)(v39 + 56);
LABEL_59:
        a1->i64[1] = (uint64_t)v41;
LABEL_62:
        v20 = 2;
        goto LABEL_63;
      }
    }
    v52 = sub_22EC37744(a1, (uint64_t)v56);
    v53 = SHIBYTE(v58);
    a1->i64[1] = (uint64_t)v52;
    if (v53 < 0)
      operator delete((void *)__p);
    goto LABEL_62;
  }
  v19 = sub_22EFFBBCC(v14);
  if (sub_22EFFBE1C((unint64_t)v19, *(_QWORD *)(a5 + 88), 2))
    return 0;
  if (*v14 == 233)
  {
    v20 = 1;
    if ((*(_DWORD *)v14 & 0x7C0000) == 0x100000)
    {
      v56[20] = 0;
      *(_QWORD *)&v56[12] = 0;
      v58 = 0;
      __p = 0uLL;
      v59 = 0;
      *(_QWORD *)v56 = v13 | (v13 << 32);
      v56[8] = 1;
      v21 = a1->u64[1];
      if (v21 >= a1[1].i64[0])
      {
        v42 = sub_22EC37744(a1, (uint64_t)v56);
        v43 = SHIBYTE(v58);
        a1->i64[1] = (uint64_t)v42;
        if (v43 < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_OWORD *)v21 = *(_OWORD *)v56;
        *(_QWORD *)(v21 + 13) = *(_QWORD *)&v56[13];
        *(_QWORD *)(v21 + 32) = 0;
        *(_QWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 24) = 0;
        *(_BYTE *)(v21 + 48) = 0;
        a1->i64[1] = v21 + 56;
      }
      v20 = 4;
    }
    goto LABEL_63;
  }
  if (v15)
  {
    v56[20] = 0;
    *(_QWORD *)&v56[12] = 0;
    v58 = 0;
    __p = 0uLL;
    *(_QWORD *)v56 = v13 | ((unint64_t)v13 << 32);
    v56[8] = 0;
    v30 = a1->u64[1];
    v31 = a1[1].u64[0];
    LOWORD(__p) = 10282;
    HIBYTE(v58) = 2;
    v59 = 0;
    if (v30 >= v31)
    {
      v32 = sub_22EC37744(a1, (uint64_t)v56);
      v46 = SHIBYTE(v58);
      a1->i64[1] = (uint64_t)v32;
      if (v46 < 0)
      {
        operator delete((void *)__p);
        v32 = (char *)a1->i64[1];
      }
    }
    else
    {
      *(_OWORD *)v30 = *(_OWORD *)v56;
      *(_QWORD *)(v30 + 13) = *(_QWORD *)&v56[13];
      *(_OWORD *)(v30 + 24) = __p;
      *(_QWORD *)(v30 + 40) = v58;
      *(_BYTE *)(v30 + 48) = 0;
      v32 = (char *)(v30 + 56);
      a1->i64[1] = v30 + 56;
    }
    v56[20] = 0;
    *(_QWORD *)&v56[12] = 0;
    v58 = 0;
    __p = 0uLL;
    *(_QWORD *)v56 = v55 | ((unint64_t)v55 << 32);
    v56[8] = 0;
    v47 = a1[1].u64[0];
    LOBYTE(__p) = 41;
    HIBYTE(v58) = 1;
    v59 = 0;
    if ((unint64_t)v32 < v47)
    {
      *(_OWORD *)v32 = *(_OWORD *)v56;
      *(_QWORD *)(v32 + 13) = *(_QWORD *)&v56[13];
      *(_OWORD *)(v32 + 24) = __p;
      *((_QWORD *)v32 + 5) = v58;
      v32[48] = 0;
      v38 = v32 + 56;
      goto LABEL_51;
    }
LABEL_52:
    v48 = sub_22EC37744(a1, (uint64_t)v56);
    v49 = SHIBYTE(v58);
    a1->i64[1] = (uint64_t)v48;
    if (v49 < 0)
      operator delete((void *)__p);
    goto LABEL_54;
  }
  v56[20] = 0;
  *(_QWORD *)&v56[12] = 0;
  v58 = 0;
  __p = 0uLL;
  *(_QWORD *)v56 = v13 | ((unint64_t)v13 << 32);
  v56[8] = 0;
  v36 = a1->u64[1];
  v37 = a1[1].u64[0];
  LOBYTE(__p) = 42;
  HIBYTE(v58) = 1;
  v59 = 0;
  if (v36 >= v37)
    goto LABEL_52;
  *(_OWORD *)v36 = *(_OWORD *)v56;
  *(_QWORD *)(v36 + 13) = *(_QWORD *)&v56[13];
  *(_OWORD *)(v36 + 24) = __p;
  *(_QWORD *)(v36 + 40) = v58;
  *(_BYTE *)(v36 + 48) = 0;
  v38 = (char *)(v36 + 56);
LABEL_51:
  a1->i64[1] = (uint64_t)v38;
LABEL_54:
  v20 = 1;
LABEL_63:
  v54 = a1[1].i32[2];
  a1[1].i32[2] = v54 + 1;
  if (!v54)
    a1[1].i32[3] = v20;
  return 1;
}

void sub_22EC36FF4(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v7 = (unint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_DWORD *)(v9 + 16);
  if (v9)
    v11 = v10 == 11;
  else
    v11 = 0;
  if (v11)
  {
    if (((v10 >> 19) & 0x1FF) - 166 >= 0x35)
      goto LABEL_11;
LABEL_26:
    sub_22EC371E8(v8, a3, a1, a4);
    v19 = *(_BYTE *)(a4 + 23);
    v20 = v19;
    v21 = v19 & 0x7F;
    if (v20 < 0)
      v21 = *(_QWORD *)(a4 + 8);
    if (v21)
    {
      std::operator+<char>();
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      *(_OWORD *)a4 = v22;
      *(_QWORD *)(a4 + 16) = v23;
    }
    return;
  }
  if (!v9 || v10 != 44)
  {
    v15 = v10 > 0x27u;
    v16 = (1 << v10) & 0x8180001600;
    if (!v15 && v16 != 0)
      goto LABEL_26;
    goto LABEL_11;
  }
  v12 = sub_22F114198(*(_QWORD *)(v9 + 24));
  if ((*(_BYTE *)(v12 + 74) & 1) != 0)
  {
    v8 = *v7;
    goto LABEL_26;
  }
  v13 = *(_QWORD *)(v12 + 128);
  v8 = *v7;
  if (v13 >= 8)
    goto LABEL_26;
LABEL_11:
  v14 = sub_22F10C2A4(v8);
  if (!v14)
    goto LABEL_12;
  v18 = v14;
  if ((*(_DWORD *)(v14 + 28) & 0x7Fu) - 35 > 2)
    goto LABEL_12;
  if (!*(_QWORD *)(v14 + 128))
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v14 + 104) + 96), *(_QWORD *)(v14 + 104));
    if (!*(_QWORD *)(v18 + 128))
      goto LABEL_12;
  }
  if ((*(_BYTE *)(a1[9] + 1) & 2) != 0)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v18 + 104) + 96), *(_QWORD *)(v18 + 104));
    if ((*(_WORD *)(*(_QWORD *)(v18 + 128) + 8) & 0x80) == 0)
    {
      *(_BYTE *)(a4 + 23) = 2;
      strcpy((char *)a4, "{}");
      return;
    }
  }
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v18 + 104) + 96), *(_QWORD *)(v18 + 104));
  if ((**(_QWORD **)(v18 + 128) & 0x80) == 0)
  {
LABEL_12:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    return;
  }
  *(_BYTE *)(a4 + 23) = 5;
  strcpy((char *)a4, " = {}");
}

unint64_t sub_22EC371E8@<X0>(unint64_t result@<X0>, int a2@<W1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  llvm *v12;
  int v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  llvm *v20;
  uint64_t v22;
  llvm *v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  __int16 v27;
  int v28;
  int v29;
  unsigned __int16 v30;
  int v31;
  _QWORD v32[2];
  uint64_t v33;

  v6 = result;
  v8 = *(_QWORD *)(result + 8);
  v9 = v8 & 0xFFFFFFFFFFFFFFF0;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v10 == 10 || v10 == 32)
  {
    v11 = a3[10];
    v12 = (llvm *)sub_22E3CB704(*(llvm::StringMapImpl **)(a3[11] + 15192), "nil", 3uLL);
    result = sub_22EC37514((unint64_t)v32, v11, v12, a2);
    if (v32[0] > 7uLL || v33 != 0)
    {
      *(_BYTE *)(a4 + 23) = 3;
      v14 = 7104878;
LABEL_18:
      *(_DWORD *)a4 = v14;
      return result;
    }
    v8 = *(_QWORD *)(v6 + 8);
    v9 = v8 & 0xFFFFFFFFFFFFFFF0;
  }
  else if (v10 == 44)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    return result;
  }
  v15 = *(_QWORD *)v9;
  v16 = *(_DWORD *)(*(_QWORD *)v9 + 16);
  if (v15)
    v17 = v16 == 11;
  else
    v17 = 0;
  if (v17 && ((v16 >> 19) & 0x1FE) - 210 <= 7)
  {
    *(_BYTE *)(a4 + 23) = 3;
    v14 = 3157552;
    goto LABEL_18;
  }
  if (v15)
    v18 = (v16 & 0xFF800FF) == 87031819;
  else
    v18 = 0;
  if (v18)
  {
    if ((*(_BYTE *)(a3[9] + 1) & 1) != 0
      || (v19 = a3[10],
          v20 = (llvm *)sub_22E3CB704(*(llvm::StringMapImpl **)(a3[11] + 15192), "false", 5uLL),
          result = sub_22EC37514((unint64_t)v32, v19, v20, a2),
          v32[0] > 7uLL)
      || v33)
    {
      *(_BYTE *)(a4 + 23) = 5;
      *(_DWORD *)a4 = 1936482662;
      v27 = 101;
LABEL_43:
      *(_WORD *)(a4 + 4) = v27;
      return result;
    }
    v8 = *(_QWORD *)(v6 + 8);
    v16 = *(_DWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v16 == 39 || v16 == 31)
  {
    if ((*(_BYTE *)(a3[9] + 1) & 2) != 0)
    {
      *(_BYTE *)(a4 + 23) = 7;
      strcpy((char *)a4, "nullptr");
      return result;
    }
    v22 = a3[10];
    v23 = (llvm *)sub_22E3CB704(*(llvm::StringMapImpl **)(a3[11] + 15192), "NULL", 4uLL);
    result = sub_22EC37514((unint64_t)v32, v22, v23, a2);
    if (v32[0] > 7uLL || v33)
    {
      *(_BYTE *)(a4 + 23) = 4;
      v29 = 1280070990;
      goto LABEL_49;
    }
    v8 = *(_QWORD *)(v6 + 8);
  }
  v24 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_DWORD *)(v24 + 16);
  if (v24)
    v26 = *(_DWORD *)(v24 + 16) == 11;
  else
    v26 = 0;
  if (!v26)
    goto LABEL_41;
  if (((v25 >> 19) & 0x1FF) - 167 > 0xD)
    goto LABEL_53;
  v28 = 1 << ((v25 >> 19) + 89);
  if ((v28 & 0x1803) == 0)
  {
    if ((v28 & 0x2004) != 0)
    {
      *(_BYTE *)(a4 + 23) = 5;
      v30 = 10060;
LABEL_57:
      *(_DWORD *)a4 = v30 | 0x305C0000;
      v27 = 39;
      goto LABEL_43;
    }
LABEL_53:
    v31 = v25 & 0xFF80000;
    if (v31 == 89653248)
    {
      *(_BYTE *)(a4 + 23) = 5;
      v30 = 10101;
    }
    else
    {
      if (v31 != 90177536)
      {
LABEL_41:
        *(_BYTE *)(a4 + 23) = 1;
        *(_WORD *)a4 = 48;
        return result;
      }
      *(_BYTE *)(a4 + 23) = 5;
      v30 = 10069;
    }
    goto LABEL_57;
  }
  *(_BYTE *)(a4 + 23) = 4;
  v29 = 657480743;
LABEL_49:
  *(_DWORD *)a4 = v29;
  *(_BYTE *)(a4 + 4) = 0;
  return result;
}

unint64_t sub_22EC37514(unint64_t result, uint64_t a2, llvm *a3, int a4)
{
  _QWORD *v4;
  unint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  llvm *v16;

  v4 = (_QWORD *)result;
  v16 = a3;
  if ((*((_BYTE *)a3 + 3) & 4) == 0)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    return result;
  }
  v7 = sub_22E6D72B8(*(_DWORD **)(a2 + 1584), &v16) + 1;
  v8 = (uint64_t *)(*v7 & 0xFFFFFFFFFFFFFFF8);
  if ((*v7 & 4) != 0 && v8)
    v8 = (uint64_t *)*v8;
  if (v8)
    v9 = (unint64_t)sub_22F4121A0(v8, a4, *(_QWORD **)(a2 + 88)) & 0xFFFFFFFFFFFFFFFBLL;
  else
    v9 = 0;
  v10 = sub_22E6D7534(v7, a2, v16);
  v11 = v10;
  if (!v10)
    goto LABEL_11;
  v11 = v10 + 8;
  v12 = *(_QWORD *)(v10 + 8);
  if (v12 < 8)
  {
    v11 = 0;
LABEL_11:
    v13 = 0;
    goto LABEL_12;
  }
  if ((v12 & 4) != 0)
  {
    v15 = v12 & 0xFFFFFFFFFFFFFFF8;
    v11 = *(_QWORD *)v15;
    v13 = *(unsigned int *)(v15 + 8);
  }
  else
  {
    v13 = 1;
  }
LABEL_12:
  result = sub_22E6D7534(v7, a2, v16);
  if (result)
    v14 = 4 * *(unsigned __int8 *)(result + 20);
  else
    v14 = 0;
  *v4 = v14 | v9;
  v4[1] = v11;
  v4[2] = v13;
  return result;
}

uint64_t sub_22EC37620(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  _BOOL4 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v16;

  v2 = a2;
  v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v4 & 8) != 0)
  {
    v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = *(_QWORD *)(*a1 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v7 + 8) & 0xF) != 0)
    v7 = (unint64_t)sub_22F10D2BC(*a1);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v8)
    v9 = *(_DWORD *)(v8 + 16) == 11;
  else
    v9 = 0;
  v10 = v9 && (*(_DWORD *)(v8 + 16) & 0xFF80000) == 86507520;
  v11 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v11 & 8) != 0)
  {
    v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  if (v10)
    v14 = v6 & 0xFFFFFFFFFFFFFFF7 | (v4 | v2) & 7;
  else
    v14 = v6 | (v4 | v2) & 7;
  v16 = v12 | v13 | (v11 | *a1) & 7;
  return sub_22E95F24C((unsigned int *)&v16, v14 | v5);
}

char *sub_22EC37744(int64x2_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  char *v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  int64x2_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  int64x2_t v19;
  uint64_t v20;
  int64x2_t *v21;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((a1->i64[1] - a1->i64[0]) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x492492492492492)
    abort();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[1].i64[0] - a1->i64[0]) >> 3)) >= 0x249249249249249)
    v5 = 0x492492492492492;
  else
    v5 = v3;
  v21 = a1 + 1;
  if (v5 > 0x492492492492492)
    sub_22E3B3F8C();
  v7 = (char *)operator new(56 * v5);
  v8 = &v7[56 * v2];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_QWORD *)(v8 + 13) = *(_QWORD *)(a2 + 13);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v8[48] = *(_BYTE *)(a2 + 48);
  v10 = a1->i64[0];
  v9 = a1->u64[1];
  if (v9 == a1->i64[0])
  {
    v14 = vdupq_n_s64(v9);
    v11 = &v7[56 * v2];
  }
  else
  {
    v11 = &v7[56 * v2];
    do
    {
      v12 = *(_OWORD *)(v9 - 56);
      *(_QWORD *)(v11 - 43) = *(_QWORD *)(v9 - 43);
      *(_OWORD *)(v11 - 56) = v12;
      v13 = *(_OWORD *)(v9 - 32);
      *((_QWORD *)v11 - 2) = *(_QWORD *)(v9 - 16);
      *((_OWORD *)v11 - 2) = v13;
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 32) = 0;
      *(v11 - 8) = *(_BYTE *)(v9 - 8);
      v11 -= 56;
      v9 -= 56;
    }
    while (v9 != v10);
    v14 = *a1;
  }
  v15 = v8 + 56;
  a1->i64[0] = (uint64_t)v11;
  a1->i64[1] = (uint64_t)(v8 + 56);
  v19 = v14;
  v16 = a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v7[56 * v5];
  v20 = v16;
  v18 = v14.i64[0];
  sub_22E9DA2E0((uint64_t)&v18);
  return v15;
}

uint64_t sub_22EC378D4(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v10;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 != 4 && v2 != 2)
    return 6;
  if (a1)
  {
    do
    {
      v4 = a1;
      LODWORD(v5) = *a1;
      if (v5 > 0xD5)
      {
        if ((_DWORD)v5 == 233)
        {
          LODWORD(v5) = *(_DWORD *)a1;
          if ((*(_DWORD *)a1 & 0x7C0000) != 0x300000)
            return 6;
          v6 = a1 + 16;
        }
        else
        {
          if ((_DWORD)v5 != 214)
            break;
          v6 = a1 + 24;
        }
      }
      else if ((_DWORD)v5 == 155)
      {
        if ((**((_DWORD **)a1 + 2) & 0x18000) != 0)
          return 6;
        v6 = a1 + 24;
        if (!a1[48])
          v6 = a1 + 32;
        LOBYTE(v5) = -101;
      }
      else
      {
        if ((_DWORD)v5 != 176)
          break;
        v5 = *((unsigned int *)a1 + 5);
        if ((_DWORD)v5 == -1)
          return 6;
        v6 = &a1[8 * v5 + 40];
        LOBYTE(v5) = -80;
      }
      a1 = *(unsigned __int8 **)v6;
    }
    while (*(unsigned __int8 **)v6 != v4);
    if (v5 == 225)
      __asm { BR              X11 }
    if (v5 != 196)
      return 6;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v8 = v7 && *(_DWORD *)(v7 + 16) == 11;
  if (v8
    && (((*(_DWORD *)(v7 + 16) >> 19) & 0x1FFu) - 167 <= 0xC
      ? (v10 = ((1 << ((*(_DWORD *)(v7 + 16) >> 19) + 89)) & 0x1803) == 0)
      : (v10 = 1),
        !v10))
  {
    return 0;
  }
  else
  {
    return 6;
  }
}

void sub_22EC37A4C(int a1@<W8>)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 8) & 0xFFFFFFFFFFFFFFF0;
  v4 = *(_QWORD *)v3;
  v5 = *(_DWORD *)(*(_QWORD *)v3 + 16);
  if (v4)
    v6 = v5 == 11;
  else
    v6 = 0;
  if (!v6)
    goto LABEL_5;
  if (((v5 >> 19) & 0x1FF) - 167 > 0xC || ((1 << ((v5 >> 19) + 89)) & 0x1803) == 0)
  {
    if ((v5 & 0xFF80000) != 0x5500000)
LABEL_5:
      sub_22EC3BFC8(v2, v1);
  }
  else if ((a1 & 0x1C0000) != 0x80000)
  {
    JUMPOUT(0x22EC37A0CLL);
  }
  JUMPOUT(0x22EC379DCLL);
}

void sub_22EC37B18()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  BOOL v5;

  if (!sub_22F36EDA0(v0, *(_QWORD *)(v0 + 16424), v1, 0))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 8) & 0xFFFFFFFFFFFFFFF0);
    v3 = *(_DWORD *)(v2 + 16);
    v4 = v2 && *(_DWORD *)(v2 + 16) == 11;
    if (!v4
      || (((v3 >> 19) & 0x1FF) - 167 <= 0xC ? (v5 = ((1 << ((v3 >> 19) + 89)) & 0x1803) == 0) : (v5 = 1),
          v5 && (v3 & 0xFF80000) != 0x5500000))
    {
      sub_22EC3BFC8(v1, v0);
    }
  }
  JUMPOUT(0x22EC379DCLL);
}

uint64_t sub_22EC37BCC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t *a5, char a6, char a7, char a8)
{
  _DWORD **v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned __int8 *v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  _QWORD *v37;
  int v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned int v42;
  _QWORD *v43;
  int v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  BOOL v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  unsigned __int8 **v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  _DWORD *v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  void *__p;
  uint64_t v78;
  uint64_t v79;
  char v80;
  unint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  unsigned __int8 v89;
  uint64_t v90[12];
  uint64_t v91;

  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 9) = a6;
  *(_BYTE *)(a1 + 10) = a7;
  *(_BYTE *)(a1 + 11) = a8;
  *(_QWORD *)(a1 + 16) = 0;
  v13 = (_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  if ((a6 & 1) != 0)
  {
    v15 = *(char **)(a4 + 16);
    v14 = *(char **)(a4 + 24);
    if (v15 == v14)
    {
LABEL_7:
      v17 = 0;
      goto LABEL_11;
    }
    v16 = *(_QWORD **)(a4 + 16);
    while (!*v16 || *(unsigned __int8 *)*v16 != 164)
    {
      if (++v16 == (_QWORD *)v14)
        goto LABEL_7;
    }
  }
  else
  {
    v15 = *(char **)(a4 + 16);
    v14 = *(char **)(a4 + 24);
  }
  v18 = *a5;
  sub_22F0D4E74(a4);
  v20 = (uint64_t)sub_22EC463A8(a1, v18, v19, (unint64_t)(v14 - v15) >> 3);
  v17 = v20;
  *(_QWORD *)(a1 + 16) = v20;
  if ((a6 & 1) == 0)
  {
    *(_QWORD *)(v20 + 48) = *(_QWORD *)(v20 + 48) & 3 | a4 | 4;
    *(_QWORD *)(a4 + 48) = *(_QWORD *)(a4 + 48) & 3 | v20 & 0xFFFFFFFFFFFFFFFBLL;
  }
LABEL_11:
  v72 = 0;
  sub_22EC46D18((_BYTE *)a1, a3, a4, a5, 1, (int *)&v72 + 1, v17, (unsigned int *)&v72, 1u);
  if (v17)
  {
    v21 = *a5;
    v90[0] = v21;
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) & 0xFEu)
       - 2 >= 4)
      v21 = sub_22F1133DC(v90, *(_QWORD *)(*(_QWORD *)a1 + 88));
    if (!*(_BYTE *)(a1 + 9))
      *(_QWORD *)(a4 + 8) = v21;
    *(_QWORD *)(v17 + 8) = v21;
  }
  if (*(_BYTE *)(a1 + 8))
    goto LABEL_83;
  v22 = HIDWORD(v72);
  if (HIDWORD(v72) >= ((*(_QWORD *)(a4 + 24) - *(_QWORD *)(a4 + 16)) >> 3)
    || (sub_22F1110EC(*(_QWORD *)(*a5 & 0xFFFFFFFFFFFFFFF0), 0) & 1) != 0)
  {
LABEL_50:
    if (*(_BYTE *)(a1 + 9))
    {
LABEL_81:
      v25 = *(unsigned __int8 *)(a1 + 8);
      goto LABEL_82;
    }
    v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v48 = *(_DWORD *)(v47 + 16);
    if (v47)
      v49 = v48 == 11;
    else
      v49 = 0;
    if (v49)
    {
      if (((v48 >> 19) & 0x1FF) - 166 >= 0x35)
        goto LABEL_76;
    }
    else if (v47 && v48 == 44)
    {
      v50 = sub_22F114198(*(_QWORD *)(v47 + 24));
      if ((*(_BYTE *)(v50 + 74) & 1) == 0 && *(_QWORD *)(v50 + 128) < 8uLL)
        goto LABEL_76;
    }
    else
    {
      v51 = v48 > 0x27u;
      v52 = (1 << v48) & 0x8180001600;
      if (v51 || v52 == 0)
      {
LABEL_76:
        v61 = sub_22F10C2A4(*(_QWORD *)(*a5 & 0xFFFFFFFFFFFFFFF0));
        if (v61)
        {
          v62 = v61;
          if ((*(_DWORD *)(v61 + 28) & 0x7Fu) - 35 <= 2)
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v61 + 104) + 96), *(_QWORD *)(v61 + 104));
            if ((**(_QWORD **)(v62 + 128) & 1) != 0)
            {
              if (((*(_QWORD *)(a4 + 24) - *(_QWORD *)(a4 + 16)) & 0x7FFFFFFF8) != 0
                || (v71 = sub_22F337E18(*(_QWORD *)a1, v62),
                    !v71
                 || (*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v71 + 32))(v71) + 82) & 0x40) != 0))
              {
                v63 = *(_QWORD **)a1;
                sub_22EFFD954(a4);
                sub_22E8FCA40(v63, v64, 0x1917u, 0, (uint64_t)v90);
                sub_22F0D4E74(a4);
                v81 = v65;
                v66 = sub_22E8906A0((uint64_t)v90, (uint64_t *)&v81);
                sub_22E8901B8(v66, (uint64_t *)a5);
                sub_22E903BEC((unsigned int *)v90);
              }
            }
          }
        }
        goto LABEL_81;
      }
    }
    v54 = *(unsigned __int8 ***)(a4 + 16);
    if (((*(_QWORD *)(a4 + 24) - (_QWORD)v54) & 0x7FFFFFFF8) == 8 && **v54 != 180)
    {
      v55 = *(_QWORD *)a1;
      sub_22F0D4E74(a4);
      v91 = v56;
      if (*(_DWORD *)(v55 + 10680) <= *(_DWORD *)(v55 + 11956))
      {
        v57 = *(_DWORD *)a3;
        if (*(_DWORD *)a3 <= 0x13u && (((1 << v57) & 0x8908E) != 0 || v57 == 6 && *(_QWORD *)(a3 + 8)))
        {
          sub_22E8FCA40((_QWORD *)v55, v56, 0x18AFu, 0, (uint64_t)v90);
          v89 = sub_22F111384(*(_QWORD *)(*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFFFF0));
          v58 = sub_22E894E38((uint64_t)v90, &v89);
          v59 = sub_22E8906A0(v58, &v91);
          v83 = 0;
          v84 = 0;
          v86 = 0;
          v87 = 0;
          v85 = 0;
          v88 = 0;
          v81 = v91 | ((unint64_t)v91 << 32);
          v82 = 1;
          v60 = sub_22E890748(v59, &v81);
          v75 = 0;
          v76 = 0;
          v78 = 0;
          v79 = 0;
          __p = 0;
          v80 = 0;
          v73 = HIDWORD(v91) | ((unint64_t)HIDWORD(v91) << 32);
          v74 = 1;
          sub_22E890748(v60, &v73);
          if (SHIBYTE(v79) < 0)
            operator delete(__p);
          if (SHIBYTE(v87) < 0)
            operator delete(v85);
          sub_22E903BEC((unsigned int *)v90);
        }
      }
    }
    goto LABEL_76;
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  if ((*(_BYTE *)(v24 + 1) & 1) != 0)
    v25 = 1;
  else
    v25 = (*(_DWORD *)(v24 + 52) & 0x40000000) != 0
       && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                           + 16)
        - 55 < 2;
  *(_BYTE *)(a1 + 8) = v25;
  if (!*(_BYTE *)(a1 + 9))
  {
    if ((_DWORD)v72 == 1)
    {
      v26 = **(unsigned __int8 ***)(v17 + 16);
      v27 = sub_22EF5C728(*(_QWORD *)(v23 + 88), *a5);
      if (v27)
      {
        if (!sub_22EC378D4(v26, v27))
        {
          if (v25)
            v36 = 3308;
          else
            v36 = 5232;
          v37 = *(_QWORD **)a1;
          sub_22F0D5A50(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 8 * v22));
          sub_22E8FCA40(v37, v38, v36, 0, (uint64_t)v90);
          sub_22F0D4E74(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 8 * v22));
          v81 = v39;
          v40 = v90;
          goto LABEL_49;
        }
      }
    }
    v28 = *(_QWORD *)(*a5 & 0xFFFFFFFFFFFFFFF0);
    if (sub_22F111384(v28))
    {
      if (v25)
        v29 = 3307;
      else
        v29 = 5231;
      v30 = *(_QWORD **)a1;
      sub_22F0D5A50(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 8 * v22));
      sub_22E8FCA40(v30, v31, v29, 0, (uint64_t)v90);
      v32 = sub_22E8901B8((uint64_t)v90, (uint64_t *)a5);
LABEL_48:
      v45 = (uint64_t *)v32;
      sub_22F0D4E74(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 8 * v22));
      v81 = v46;
      v40 = v45;
LABEL_49:
      sub_22E8906A0((uint64_t)v40, (uint64_t *)&v81);
      sub_22E903BEC((unsigned int *)v90);
      goto LABEL_50;
    }
    v33 = 0;
    LODWORD(v73) = 0;
    v34 = *(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0);
    v35 = *(_DWORD *)(v34 + 16);
    if ((v35 & 0xFE) - 2 >= 4)
    {
      if (*(_DWORD *)(v34 + 16) - 55 < 2)
      {
        v33 = 1;
        goto LABEL_44;
      }
      if (*(_DWORD *)(v34 + 16) <= 0x2Cu)
      {
        v41 = *(_DWORD *)(v34 + 16);
        if (((1 << v35) & 0x8180001600) != 0)
        {
LABEL_43:
          v33 = 2;
          goto LABEL_44;
        }
        if (v41 == 11)
        {
          if (((v35 >> 19) & 0x1FF) - 166 < 0x35)
            goto LABEL_43;
        }
        else if (v41 == 44)
        {
          v70 = sub_22F114198(*(_QWORD *)(v34 + 24));
          if ((*(_BYTE *)(v70 + 74) & 1) != 0 || *(_QWORD *)(v70 + 128) > 7uLL)
            goto LABEL_43;
          v28 = *(_QWORD *)(*a5 & 0xFFFFFFFFFFFFFFF0);
        }
      }
      if (sub_22F10E06C(v28))
        v33 = 3;
      else
        v33 = 4;
    }
LABEL_44:
    LODWORD(v73) = v33;
    if (v25)
      v42 = 3306;
    else
      v42 = 5230;
    v43 = *(_QWORD **)a1;
    sub_22F0D5A50(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 8 * v22));
    sub_22E8FCA40(v43, v44, v42, 0, (uint64_t)v90);
    v32 = sub_22E8900C4((uint64_t)v90, (int *)&v73);
    goto LABEL_48;
  }
LABEL_82:
  if (v25)
    goto LABEL_83;
  v68 = *v13;
  if (!*v13)
    return a1;
  LOBYTE(v90[0]) = 0;
  sub_22EC46504(a1, (__int128 *)a3, (unint64_t)v68, v90, 0, 0, 0);
  v69 = *(unsigned __int8 *)(a1 + 8);
  if (!LOBYTE(v90[0]))
  {
LABEL_90:
    if (!v69)
      return a1;
    goto LABEL_83;
  }
  if (!*(_BYTE *)(a1 + 8))
  {
    sub_22EC46504(a1, (__int128 *)a3, *(_QWORD *)(a1 + 16), v90, 0, 0, 0);
    v69 = *(unsigned __int8 *)(a1 + 8);
    goto LABEL_90;
  }
LABEL_83:
  if (*v13)
    **v13 |= 0x34000u;
  return a1;
}

uint64_t sub_22EC38374(_QWORD *a1, uint64_t *a2, int a3, int a4, uint64_t a5)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  __int128 v15;
  _DWORD *v16;
  _DWORD *v17;
  int *v18;
  unsigned int *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  void *v26;
  int *v27;
  _DWORD *v28;
  int v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  _DWORD *v34;
  int v35;
  BOOL v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unint64_t v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  unsigned int v47;
  void *v48;
  const void *v49;
  void **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const void *v55;
  void **v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void **v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v70;
  char v71;
  uint64_t v73;
  void *__p[2];
  unint64_t v75;
  void *__dst[2];
  unint64_t v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  unsigned int v82;
  unsigned __int8 v83;
  void *v84;
  unsigned int v85;
  char v86;
  void *v87;
  uint64_t v88;
  _BYTE v89[256];
  void *v90;
  uint64_t v91;
  _BYTE v92[768];
  _QWORD *v93;
  __int128 v94;
  _QWORD v95[7];

  v95[5] = *MEMORY[0x24BDAC8D0];
  v90 = v92;
  v91 = 0x2000000000;
  v87 = v89;
  v88 = 0x2000000000;
  v5 = *((_DWORD *)a2 + 2);
  if (!v5)
  {
    v65 = v89;
    goto LABEL_90;
  }
  v70 = a5;
  v7 = 0;
  v8 = 0;
  v71 = 0;
  do
  {
    v9 = *a2;
    v10 = *(_DWORD *)(*a2 + v7);
    if (v10 != 2)
    {
      if (v10 == 1)
      {
        v16 = (_DWORD *)(v9 + v7);
        v17 = *(_DWORD **)(v9 + v7 + 8);
        LODWORD(v94) = 1;
        v93 = 0;
        BYTE4(v94) = 0;
        if ((*v17 & 0x18000) != 0
          || (v17 = (_DWORD *)(sub_22EC38B34(a1, (uint64_t)v17, (uint64_t)&v93) & 0xFFFFFFFFFFFFFFFELL)) != 0)
        {
          v18 = v16 + 8;
          if (*v16 == 1)
            v19 = v16 + 4;
          else
            v19 = v16 + 6;
          v20 = *v19;
          if (*v16 == 1)
            v18 = v16 + 5;
          v21 = *v18;
          LODWORD(v78) = 1;
          v79 = __PAIR64__(v20, v88);
          LODWORD(v80) = 0;
          HIDWORD(v80) = v21;
          v22 = sub_22E4EF088((uint64_t)&v90, (unint64_t)&v78, 1);
          v23 = (char *)v90 + 24 * v91;
          v24 = *(_OWORD *)v22;
          *((_QWORD *)v23 + 2) = *(_QWORD *)(v22 + 16);
          *(_OWORD *)v23 = v24;
          LODWORD(v91) = v91 + 1;
          v25 = v88;
          if (v88 >= (unint64_t)HIDWORD(v88))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v25 = v88;
          }
          *((_QWORD *)v87 + v25) = v17;
          LODWORD(v88) = v88 + 1;
        }
        else
        {
          v71 = 1;
        }
        if (v94 >= 0x41)
        {
          v26 = v93;
          if (v93)
            goto LABEL_60;
        }
      }
      else if (!v10)
      {
        v11 = *(_QWORD *)(v9 + v7 + 8);
        LODWORD(v78) = 0;
        v12 = *(_QWORD *)(v9 + v7 + 16);
        v79 = v11 | 1;
        v80 = v12;
        v13 = sub_22E4EF088((uint64_t)&v90, (unint64_t)&v78, 1);
        v14 = (char *)v90 + 24 * v91;
        v15 = *(_OWORD *)v13;
        *((_QWORD *)v14 + 2) = *(_QWORD *)(v13 + 16);
        *(_OWORD *)v14 = v15;
        LODWORD(v91) = v91 + 1;
      }
      goto LABEL_61;
    }
    v27 = *(int **)(v9 + v7 + 16);
    v28 = *(_DWORD **)(v9 + v7 + 8);
    v85 = 1;
    v84 = 0;
    v86 = 0;
    v82 = 1;
    v81 = 0;
    v83 = 0;
    v29 = *v27;
    v30 = *v28 & 0x18000;
    if (!v30)
      v28 = (_DWORD *)(sub_22EC38B34(a1, (uint64_t)v28, (uint64_t)&v84) & 0xFFFFFFFFFFFFFFFELL);
    v31 = v29 & 0x18000;
    if (!v31)
      v27 = (int *)(sub_22EC38B34(a1, (uint64_t)v27, (uint64_t)&v81) & 0xFFFFFFFFFFFFFFFELL);
    if (v28)
      v32 = v27 == 0;
    else
      v32 = 1;
    if (v32)
    {
      v71 = 1;
      goto LABEL_55;
    }
    if (v30 | v31)
    {
LABEL_45:
      v34 = (_DWORD *)(v9 + v7);
      v35 = *(_DWORD *)(v9 + v7);
      v36 = v35 == 1;
      if (v35 == 1)
        v37 = (unsigned int *)(v9 + v7 + 16);
      else
        v37 = (unsigned int *)(v9 + v7 + 24);
      v38 = *v37;
      v39 = v34[7];
      v40 = v34 + 5;
      v41 = v34 + 8;
      if (v36)
        v41 = v40;
      v42 = *v41;
      LODWORD(v78) = 2;
      v79 = __PAIR64__(v38, v88);
      v80 = __PAIR64__(v42, v39);
      v43 = sub_22E4EF088((uint64_t)&v90, (unint64_t)&v78, 1);
      v44 = (char *)v90 + 24 * v91;
      v45 = *(_OWORD *)v43;
      *((_QWORD *)v44 + 2) = *(_QWORD *)(v43 + 16);
      *(_OWORD *)v44 = v45;
      LODWORD(v91) = v91 + 1;
      v46 = v88;
      if (v88 >= (unint64_t)HIDWORD(v88))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v46 = v88;
      }
      *((_QWORD *)v87 + v46) = v28;
      v47 = v88 + 1;
      LODWORD(v88) = v47;
      if (v47 >= HIDWORD(v88))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v47 = v88;
      }
      *((_QWORD *)v87 + v47) = v27;
      LODWORD(v88) = v88 + 1;
      goto LABEL_55;
    }
    if (v85 <= v82)
    {
      if (v85 < v82)
      {
        sub_22E46361C((llvm::APInt *)&v84, (uint64_t)&v78);
        if (v85 >= 0x41 && v84)
          MEMORY[0x2348A0E84](v84, 0x1000C8000313F17);
        v84 = v78;
        v85 = v79;
        v86 = BYTE4(v79);
      }
      v33 = v83;
    }
    else
    {
      sub_22E46361C((llvm::APInt *)&v81, (uint64_t)&v78);
      if (v82 >= 0x41 && v81)
        MEMORY[0x2348A0E84](v81, 0x1000C8000313F17);
      v81 = v78;
      v82 = v79;
      v33 = BYTE4(v79);
      v83 = BYTE4(v79);
    }
    if (v33)
    {
      if ((llvm::APInt::compare((llvm::APInt *)&v81, (const llvm::APInt *)&v84) & 0x80000000) == 0)
        goto LABEL_45;
    }
    else if ((llvm::APInt::compareSigned((llvm::APInt *)&v81, (const llvm::APInt *)&v84) & 0x80000000) == 0)
    {
      goto LABEL_45;
    }
    sub_22E8FCA40(a1, *(_DWORD *)(v9 + v7 + 28), 0xA8Du, 0, (uint64_t)&v78);
    v93 = v95;
    v94 = xmmword_22F455490;
    llvm::APInt::toString();
    v48 = (void *)v94;
    if ((unint64_t)v94 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_98;
    v49 = v93;
    if ((unint64_t)v94 >= 0x17)
    {
      v51 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
      if (((unint64_t)v94 | 7) != 0x17)
        v51 = v94 | 7;
      v52 = v51 + 1;
      v50 = (void **)operator new(v51 + 1);
      __dst[1] = v48;
      v77 = v52 | 0x8000000000000000;
      __dst[0] = v50;
LABEL_71:
      memmove(v50, v49, (size_t)v48);
      goto LABEL_72;
    }
    HIBYTE(v77) = v94;
    v50 = __dst;
    if ((_QWORD)v94)
      goto LABEL_71;
LABEL_72:
    *((_BYTE *)v48 + (_QWORD)v50) = 0;
    if (v93 != v95)
      free(v93);
    v53 = sub_22F2F3734((uint64_t)&v78, __dst);
    v93 = v95;
    v94 = xmmword_22F455490;
    llvm::APInt::toString();
    v54 = (void *)v94;
    if ((unint64_t)v94 > 0x7FFFFFFFFFFFFFF7)
LABEL_98:
      abort();
    v55 = v93;
    if ((unint64_t)v94 >= 0x17)
    {
      v57 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
      if (((unint64_t)v94 | 7) != 0x17)
        v57 = v94 | 7;
      v58 = v57 + 1;
      v59 = v93;
      v60 = (void **)operator new(v57 + 1);
      v55 = v59;
      v56 = v60;
      __p[1] = v54;
      v75 = v58 | 0x8000000000000000;
      __p[0] = v60;
    }
    else
    {
      HIBYTE(v75) = v94;
      v56 = __p;
      if (!(_QWORD)v94)
        goto LABEL_82;
    }
    memmove(v56, v55, (size_t)v54);
LABEL_82:
    *((_BYTE *)v54 + (_QWORD)v56) = 0;
    if (v93 != v95)
      free(v93);
    v61 = sub_22F2F3734(v53, __p);
    sub_22F0D4E74((uint64_t)v28);
    v93 = v62;
    v63 = sub_22E8906A0(v61, (uint64_t *)&v93);
    sub_22F0D4E74((uint64_t)v27);
    v73 = v64;
    sub_22E8906A0(v63, &v73);
    if (SHIBYTE(v75) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v77) < 0)
      operator delete(__dst[0]);
    sub_22E903BEC((unsigned int *)&v78);
    v71 = 1;
LABEL_55:
    if (v82 >= 0x41 && v81)
      MEMORY[0x2348A0E84](v81, 0x1000C8000313F17);
    if (v85 >= 0x41)
    {
      v26 = v84;
      if (v84)
LABEL_60:
        MEMORY[0x2348A0E84](v26, 0x1000C8000313F17);
    }
LABEL_61:
    ++v8;
    v7 += 40;
  }
  while (v8 < *((unsigned int *)a2 + 2));
  v65 = v87;
  a5 = v70;
  LOBYTE(v5) = v71;
LABEL_90:
  v66 = 1;
  if ((v5 & 1) == 0 && (a5 & 1) == 0)
  {
    v66 = sub_22F3C2884(a1[11], (uint64_t)v90, v91, (uint64_t)v65, v88, a3, a4, (int *)(a5 & 0xFFFFFFFFFFFFFFFELL));
    v65 = v87;
  }
  if (v65 != v89)
    free(v65);
  if (v90 != v92)
    free(v90);
  return v66;
}

uint64_t sub_22EC38B34(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t result;
  unsigned int v9;
  char v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  void *v18;
  void *__p[2];
  unint64_t v20;
  uint64_t (**v21)();
  char v22;
  void *__src;
  size_t __len[2];
  _QWORD v25[6];

  v25[5] = *MEMORY[0x24BDAC8D0];
  sub_22F0D5A50(a2);
  v7 = v6;
  v22 = 0;
  v21 = off_24FAB82C8;
  result = sub_22EB4CB24(a1, a2, a3, &v21, 1);
  if ((result & 1) != 0)
    return result;
  if (*(_BYTE *)(a3 + 12)
    || ((v9 = *(_DWORD *)(a3 + 8), v10 = v9 - 1, v9 >= 0x41)
      ? (v11 = (_QWORD *)(*(_QWORD *)a3 + 8 * ((v9 - 1) >> 6)))
      : (v11 = (_QWORD *)a3),
        ((*v11 >> v10) & 1) == 0))
  {
    *(_BYTE *)(a3 + 12) = 1;
    return result;
  }
  sub_22E8FCA40(a1, v7, 0xA8Eu, 0, (uint64_t)&v21);
  __src = v25;
  *(_OWORD *)__len = xmmword_22F455490;
  llvm::APInt::toString();
  v12 = (void *)__len[0];
  if (__len[0] >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v13 = __src;
  if (__len[0] >= 0x17)
  {
    v15 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len[0] | 7) != 0x17)
      v15 = __len[0] | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    __p[1] = v12;
    v20 = v16 | 0x8000000000000000;
    __p[0] = v14;
  }
  else
  {
    HIBYTE(v20) = __len[0];
    v14 = __p;
    if (!__len[0])
      goto LABEL_17;
  }
  memmove(v14, v13, (size_t)v12);
LABEL_17:
  *((_BYTE *)v12 + (_QWORD)v14) = 0;
  if (__src != v25)
    free(__src);
  v17 = sub_22F2F3734((uint64_t)&v21, __p);
  sub_22F0D4E74(a2);
  __src = v18;
  sub_22E8906A0(v17, (uint64_t *)&__src);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
  sub_22E903BEC((unsigned int *)&v21);
  return 1;
}

uint64_t sub_22EC38D34(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  BOOL v9;

  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  v6 = sub_22EF5C728(a2, *(_QWORD *)(a4 + 16));
  if (v6)
  {
    v7 = 7;
  }
  else
  {
    v6 = sub_22E3E4B64(*(_QWORD *)(*(_QWORD *)(a4 + 16) & 0xFFFFFFFFFFFFFFF0));
    if (v6)
    {
      v7 = 12;
    }
    else
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) & 0xFFFFFFFFFFFFFFF0);
      if (v6)
        v9 = *(_BYTE *)(v6 + 16) == 12;
      else
        v9 = 0;
      if (!v9)
        v6 = sub_22F10CF48(v6);
      v7 = 15;
    }
  }
  *(_DWORD *)a1 = v7;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v6 + 32);
  return a1;
}

uint64_t sub_22EC38DD0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v4 = a2;
  v6 = 0;
  *(_DWORD *)a1 = 6;
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v4;
  *(_WORD *)(a1 + 40) = 0;
  v8 = *(_QWORD *)((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v8 & 8) != 0)
    v6 = *(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
  if ((*(_DWORD *)(v4 + 28) & 0x7F) != 0x53)
  {
    v9 = *(_QWORD *)(v4 + 16);
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 4) != 0)
      v10 = *(_QWORD *)v10;
    for (i = *(_WORD *)(v10 + 8) & 0x7F; i != 83; i = *(_WORD *)(v10 + 8) & 0x7F)
    {
      v12 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v12 = -56;
          goto LABEL_11;
        }
        if (i == 81)
          goto LABEL_11;
      }
      else
      {
        if (i <= 0x18)
        {
          if (i == 16)
            goto LABEL_10;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_11;
          if (i == 24)
          {
LABEL_10:
            v12 = -48;
            goto LABEL_11;
          }
        }
        if (i == 70)
        {
          v12 = -64;
          goto LABEL_11;
        }
      }
      v14 = i - 52;
      if ((i - 33) >= 5)
        v15 = -48;
      else
        v15 = -64;
      if (v14 >= 6)
        v12 = v15;
      else
        v12 = -72;
LABEL_11:
      v13 = *(_QWORD *)(v10 + v12 + 16);
      v10 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0)
        v10 = *(_QWORD *)v10;
    }
    v4 = v10 - 40;
  }
  *(_QWORD *)(a1 + 16) = sub_22EF5DD84(*(_QWORD *)(v4 + 88), v7, v6);
  return a1;
}

uint64_t sub_22EC38F40(uint64_t a1, unint64_t a2, int a3, char a4, char a5)
{
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int i;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  v5 = a2;
  *(_DWORD *)a1 = 6;
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = a4;
  *(_BYTE *)(a1 + 41) = a5;
  if (!v5 || (*(_DWORD *)(v5 + 28) & 0x7F) != 0x53)
  {
    v8 = *(_QWORD *)(v5 + 16);
    v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    if ((v8 & 4) != 0)
      v9 = *(_QWORD *)v9;
    for (i = *(_WORD *)(v9 + 8) & 0x7F; i != 83; i = *(_WORD *)(v9 + 8) & 0x7F)
    {
      v11 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v11 = -56;
          goto LABEL_10;
        }
        if (i == 81)
          goto LABEL_10;
      }
      else
      {
        if (i <= 0x18)
        {
          if (i == 16)
            goto LABEL_9;
          if (((1 << i) & 0x1066) != 0)
            goto LABEL_10;
          if (i == 24)
          {
LABEL_9:
            v11 = -48;
            goto LABEL_10;
          }
        }
        if (i == 70)
        {
          v11 = -64;
          goto LABEL_10;
        }
      }
      v13 = i - 52;
      if ((i - 33) >= 5)
        v14 = -48;
      else
        v14 = -64;
      if (v13 >= 6)
        v11 = v14;
      else
        v11 = -72;
LABEL_10:
      v12 = *(_QWORD *)(v9 + v11 + 16);
      v9 = v12 & 0xFFFFFFFFFFFFFFF8;
      if ((v12 & 4) != 0)
        v9 = *(_QWORD *)v9;
    }
    v5 = v9 - 40;
  }
  *(_QWORD *)(a1 + 16) = sub_22EF5DD84(*(_QWORD *)(v5 + 88), v7, a3);
  return a1;
}

uint64_t sub_22EC39090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;

  v6 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)a1 = 10;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 32) = a3 & 0xFFFFFFFFFFFFFFFBLL;
  v7 = *(_QWORD *)((*(_QWORD *)(a4 + 16) & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v7 & 8) != 0)
    v6 = *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
  v8 = *(_QWORD *)(**(_QWORD **)(a3 + 16) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v8 + 8) & 0xF) != 0)
    v8 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(a3 + 16));
  result = sub_22EF5DD84(a2, v8 & 0xFFFFFFFFFFFFFFF0, v6);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_22EC39128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t result;

  *(_DWORD *)(a5 + 24) = 0;
  *(_DWORD *)a5 = 10;
  *(_QWORD *)(a5 + 8) = 0;
  v8 = 4;
  if (!a3)
    v8 = 0;
  *(_QWORD *)(a5 + 32) = a2 & 0xFFFFFFFFFFFFFFFBLL | v8;
  v9 = *(_QWORD *)(**(_QWORD **)(a2 + 16) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v9 + 8) & 0xF) != 0)
    v9 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(a2 + 16));
  result = sub_22EF5DD84(a1, v9 & 0xFFFFFFFFFFFFFFF0, a4);
  *(_QWORD *)(a5 + 16) = result;
  return result;
}

uint64_t sub_22EC391B4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = result;
  if ((*(_DWORD *)result - 14) >= 2)
  {
    if (*(_DWORD *)result == 37)
    {
      v3 = *(_QWORD *)(result + 16);
      if (v3)
      {
        v4 = v3 - 16;
        v5 = *(_QWORD *)(v3 - 8);
        if (v5)
        {
          v6 = 152 * v5;
          do
          {
            v7 = v3 + v6;
            if ((*(_DWORD *)(v3 + v6 - 152) & 0x7FFFFFFF) == 2)
            {
              v9 = *(void **)(v7 - 120);
              if ((void *)(v7 - 104) != v9)
              {
                v11 = v3;
                v12 = v4;
                v10 = v6;
                free(v9);
                v6 = v10;
                v3 = v11;
                v4 = v12;
              }
            }
            v6 -= 152;
          }
          while (v6);
        }
        MEMORY[0x2348A0E84](v4, 0x10A2C80E7F6F051);
      }
      result = *(_QWORD *)(v1 + 24);
      if (result)
        JUMPOUT(0x2348A0E84);
    }
  }
  else
  {
    v2 = *(_QWORD *)(result + 16);
    if (v2)
    {
      if ((*(_DWORD *)v2 & 0x7FFFFFFF) == 2)
      {
        v8 = *(void **)(v2 + 32);
        if (v8 != (void *)(v2 + 48))
          free(v8);
      }
      JUMPOUT(0x2348A0E9CLL);
    }
  }
  return result;
}

__n128 sub_22EC392E4(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  int v9;
  uint64_t v10;

  v9 = 9;
  if (a3 == 1)
  {
    v4 = 11;
  }
  else
  {
    if (a3 != 2)
      goto LABEL_4;
    v4 = 10;
  }
  v9 = v4;
LABEL_4:
  v10 = a2;
  v5 = sub_22EC51434(a1 + 8, (unint64_t)&v9);
  v6 = *(_QWORD *)(a1 + 8) + 40 * *(unsigned int *)(a1 + 16);
  v7 = *(_QWORD *)(v5 + 32);
  result = *(__n128 *)(v5 + 16);
  *(_OWORD *)v6 = *(_OWORD *)v5;
  *(__n128 *)(v6 + 16) = result;
  *(_QWORD *)(v6 + 32) = v7;
  ++*(_DWORD *)(a1 + 16);
  return result;
}

__n128 sub_22EC3936C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  int v12;
  uint64_t v13;
  uint64_t v14;

  if (a4)
    v6 = 15;
  else
    v6 = 14;
  v12 = v6;
  v13 = a3;
  v7 = operator new();
  v14 = sub_22EC4D2E0(v7, a2);
  v8 = sub_22EC51434(a1 + 8, (unint64_t)&v12);
  v9 = *(_QWORD *)(a1 + 8) + 40 * *(unsigned int *)(a1 + 16);
  v10 = *(_QWORD *)(v8 + 32);
  result = *(__n128 *)(v8 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v8;
  *(__n128 *)(v9 + 16) = result;
  *(_QWORD *)(v9 + 32) = v10;
  ++*(_DWORD *)(a1 + 16);
  return result;
}

__n128 sub_22EC39404(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, const void *a5, uint64_t a6)
{
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 result;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  int v27;

  v23 = 37;
  v24 = a2;
  is_mul_ok(a4, 0x98uLL);
  v11 = (_QWORD *)operator new[]();
  *v11 = 152;
  v11[1] = a4;
  if (a4)
  {
    v12 = v11 + 2;
    do
    {
      *(_DWORD *)v12 = 5;
      v13 = v12[2] & 0xFFFFFFFC04000000 | 0x20000000;
      v12[1] = 0;
      v12[2] = v13;
      v12[7] = 0;
      v12 += 19;
    }
    while (v12 != &v11[19 * a4 + 2]);
    v25 = v11 + 2;
    v14 = v11 + 8;
    v15 = 152 * a4;
    do
    {
      if ((*(_DWORD *)(v14 - 6) & 0x7FFFFFFF) == 2)
      {
        v16 = (_QWORD *)*(v14 - 2);
        if (v14 != v16)
          free(v16);
      }
      sub_22EC4D2E0((uint64_t)(v14 - 6), a3);
      a3 += 152;
      v14 += 19;
      v15 -= 152;
    }
    while (v15);
  }
  else
  {
    v25 = v11 + 2;
  }
  v17 = (void *)operator new[]();
  v18 = v17;
  if (a6)
  {
    bzero(v17, 8 * a6);
    memmove(v18, a5, 8 * a6);
  }
  v26 = v18;
  v27 = a4;
  v19 = sub_22EC51434(a1 + 8, (unint64_t)&v23);
  v20 = *(_QWORD *)(a1 + 8) + 40 * *(unsigned int *)(a1 + 16);
  v21 = *(_QWORD *)(v19 + 32);
  result = *(__n128 *)(v19 + 16);
  *(_OWORD *)v20 = *(_OWORD *)v19;
  *(__n128 *)(v20 + 16) = result;
  *(_QWORD *)(v20 + 32) = v21;
  ++*(_DWORD *)(a1 + 16);
  return result;
}

uint64_t sub_22EC395BC(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t *a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;

  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_QWORD *)(a1 + 16) = 0x400000000;
  *(_DWORD *)(a1 + 188) = 0;
  v9 = *(_DWORD *)(a4 + 4);
  *(_QWORD *)(a1 + 192) = a1 + 208;
  *(_QWORD *)(a1 + 200) = 0x1000000000;
  *(_QWORD *)(a1 + 2896) = a1 + 2928;
  *(_QWORD *)(a1 + 2904) = a1 + 2928;
  *(_QWORD *)(a1 + 2912) = 16;
  *(_DWORD *)(a1 + 2920) = 0;
  *(_OWORD *)(a1 + 3056) = 0u;
  *(_QWORD *)(a1 + 3072) = a1 + 3088;
  *(_QWORD *)(a1 + 3080) = 0x400000000;
  *(_QWORD *)(a1 + 3120) = a1 + 3136;
  *(_OWORD *)(a1 + 3128) = 0u;
  *(_QWORD *)(a1 + 3144) = 1;
  *(_DWORD *)(a1 + 3152) = v9;
  *(_DWORD *)(a1 + 6824) = 0;
  *(_OWORD *)(a1 + 3156) = 0u;
  *(_OWORD *)(a1 + 6832) = 0u;
  *(_OWORD *)(a1 + 6848) = 0u;
  *(_DWORD *)(a1 + 6864) = 0;
  *(_QWORD *)(a1 + 6872) = a1 + 6888;
  *(_QWORD *)(a1 + 6880) = 0x800000000;
  sub_22EC3968C(a1, a2, a3, (unsigned __int8 *)a4, a5, a6, a7, a8);
  return a1;
}

void sub_22EC3968C(uint64_t a1, unsigned int *a2, uint64_t a3, unsigned __int8 *a4, uint64_t *a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  _DWORD *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v54;
  unsigned __int8 *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  unsigned __int8 *v66;
  uint64_t v67;
  BOOL v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  _BOOL4 v85;
  _BOOL4 v86;
  uint64_t *v87;
  int v88;
  unsigned __int8 *v89;
  unsigned int v90;
  uint64_t v91;
  unsigned __int8 **v92;
  unsigned __int8 *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  unint64_t v103;
  int v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  BOOL v114;
  _BOOL4 v115;
  BOOL v116;
  uint64_t v117;
  unsigned int v118;
  char v119;
  _QWORD *v120;
  uint64_t v121;
  unsigned int v122;
  int v123;
  int *v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  unsigned int v128;
  unint64_t v129;
  char **v130;
  unsigned int v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  _DWORD *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  void *v152;
  char v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  BOOL v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  int v164;
  int v165;
  uint64_t v166;
  unint64_t *v167;
  _BOOL4 v168;
  uint64_t v169;
  int v170;
  int v171;
  int v172;
  int v173;
  BOOL v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  uint64_t v190;
  unsigned __int8 *v191;
  int v192;
  uint64_t v193;
  int v194;
  int v195;
  int v196;
  uint64_t v197;
  _QWORD *v198;
  int v199;
  unsigned int v200;
  unsigned __int8 *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  __int128 v209;
  uint64_t v210;
  int v211;
  __int16 v212;
  _QWORD *v213;
  uint64_t *v214;
  unint64_t *v215;
  unsigned int v216;
  int v217;
  unint64_t v218;
  uint64_t v220;
  unsigned __int8 *v222;
  unint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD v227[2];
  void *v228;
  void *v229;
  _QWORD v230[13];
  const void **v231;
  uint64_t v232;
  _QWORD v233[2];
  void *v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  void *v238;
  int v239;
  _QWORD v240[7];

  v240[5] = *MEMORY[0x24BDAC8D0];
  v14 = *((_QWORD *)a2 + 11);
  if ((_DWORD)a6)
  {
    v15 = a6;
    v16 = a5;
    do
    {
      v17 = *(_QWORD *)(*(_QWORD *)(*v16 + 8) & 0xFFFFFFFFFFFFFFF0);
      v18 = (*(_DWORD *)(v17 + 16) & 0xFF80000u) < 0x8200001 || v17 == 0;
      if (!v18 && *(_DWORD *)(v17 + 16) == 11)
      {
        v20 = sub_22EB19A28(a2);
        if ((v20 & 1) != 0)
        {
          v29 = a1;
          *(_DWORD *)a1 = 0;
          v30 = 37;
          goto LABEL_26;
        }
        *v16 = v20 & 0xFFFFFFFFFFFFFFFELL;
      }
      ++v16;
      --v15;
    }
    while (v15);
  }
  v21 = *(_QWORD *)(a3 + 16);
  v22 = (uint64_t *)(v21 & 0xFFFFFFFFFFFFFFF0);
  v23 = (_DWORD *)a1;
  if ((*(_BYTE *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
  {
LABEL_24:
    *(_DWORD *)a1 = 1;
    return;
  }
  if (!a6)
  {
    *(_DWORD *)a1 = 2;
    v222 = 0;
LABEL_28:
    v31 = 0;
    v32 = 0;
    v33 = *a4;
LABEL_29:
    v34 = v33;
    goto LABEL_30;
  }
  v24 = 0;
  v25 = 1;
  do
  {
    if ((*(_BYTE *)(a5[v24] + 1) & 0x80) != 0)
      goto LABEL_24;
    v24 = v25;
  }
  while (a6 > v25++);
  *(_DWORD *)a1 = 2;
  v222 = 0;
  if (a6 != 1)
    goto LABEL_28;
  v27 = (uint64_t *)*a5;
  v222 = (unsigned __int8 *)*a5;
  if ((*(_BYTE *)(*((_QWORD *)a2 + 9) + 1) & 0x40) != 0)
  {
    sub_22F0D5A50((uint64_t)v27);
    if ((sub_22EC32354((uint64_t)a2, v28, v21, v27[1], (uint64_t *)&v222, 1) & 1) != 0
      || (sub_22EB39A74(a2, v21, &v222, 1) & 1) != 0)
    {
      v27 = (uint64_t *)v222;
      *a5 = (uint64_t)v222;
    }
    else
    {
      v27 = (uint64_t *)v222;
    }
    v23 = (_DWORD *)a1;
  }
  if (*(unsigned __int8 *)v27 != 180)
  {
    v32 = v27[1];
    v33 = *a4;
    v31 = 1;
    goto LABEL_29;
  }
  v34 = *a4;
  if (*a4)
  {
    sub_22EC3B2AC(a2, a3, (uint64_t)a4, v27, (uint64_t)v23, a8);
    return;
  }
  v33 = 0;
  v32 = 0;
  v31 = 1;
LABEL_30:
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v22 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    if ((v31 & 1) != 0)
    {
      v35 = *a5;
      if (*(unsigned __int8 *)*a5 == 180)
      {
        *v23 = 0;
        v23[46] = 1;
      }
      else
      {
        v42 = *(_QWORD *)(*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFFFF0);
        if (!v42 || (v43 = *(_DWORD *)(v42 + 16), (v43 & 0xFE) != 0x28))
        {
          v42 = sub_22F10CF48(v42);
          v43 = *(_DWORD *)(v42 + 16);
        }
        if ((v43 & 0x100000) != 0)
        {
          do
          {
            while (1)
            {
              v42 = *(_QWORD *)(*(_QWORD *)(v42 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (!v42)
                break;
              v44 = *(_DWORD *)(v42 + 16);
              if ((v44 & 0xFE) != 0x28)
                break;
              if ((v44 & 0x100000) == 0)
                goto LABEL_63;
            }
            v42 = sub_22F10CF48(v42);
          }
          while ((*(_DWORD *)(v42 + 16) & 0x100000) != 0);
        }
LABEL_63:
        v45 = *(_QWORD *)(v42 + 32);
        v231 = 0;
        v46 = sub_22EF67F34(*((_QWORD *)a2 + 11), v45, &v231);
        v225 = sub_22EE8B05C((uint64_t)a2, v35);
        v224 = 0;
        v223 = sub_22EF67F34(*((_QWORD *)a2 + 11), v225, &v224);
        if ((sub_22EC4D3B4((uint64_t)a2, v35, &v225, &v223, v46, a1) & 1) == 0)
          sub_22EC4D4F4((uint64_t)a2, a3, (uint64_t)a4, v35, v45, v46, (uint64_t)v231, v225, v223, v224, SHIDWORD(v224), a1);
      }
    }
    else
    {
      *v23 = 0;
      v23[46] = 0;
    }
    return;
  }
  if (v34 == 4 || !v34 && !a6)
  {
    sub_22EC3BE04(a2, a3, a4, a1, 0);
    return;
  }
  if (v33 != 3)
  {
    v218 = v32;
    v40 = sub_22EF5C728(v14, v21);
    if (v40)
    {
      v41 = v40;
      if (!v222)
      {
LABEL_222:
        v112 = *(_QWORD *)(v41 + 32);
        v113 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v112 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v113)
          v114 = *(_DWORD *)(v113 + 16) == 11;
        else
          v114 = 0;
        if (!v114
          || (((*(_DWORD *)(v113 + 16) >> 19) & 0x1FFu) - 167 <= 0xC
            ? (v116 = ((1 << ((*(_DWORD *)(v113 + 16) >> 19) + 89)) & 0x1803) == 0)
            : (v116 = 1),
              v116))
        {
          v115 = sub_22EC3BFC8(v112, v14);
          v29 = a1;
          *(_DWORD *)a1 = 0;
          if (v115)
            v30 = 4;
          else
            v30 = 2;
        }
        else
        {
          v29 = a1;
          *(_DWORD *)a1 = 0;
          v30 = 3;
        }
        goto LABEL_26;
      }
      if (*(_BYTE *)(v40 + 16) == 5)
      {
        v29 = a1;
        *(_DWORD *)a1 = 0;
        v30 = 35;
        goto LABEL_26;
      }
      v52 = v40;
      switch(sub_22EC378D4(v222, v40))
      {
        case 0u:
          v38 = *(_QWORD *)(a3 + 16);
          v39 = 23;
          goto LABEL_82;
        case 1u:
          v29 = a1;
          *(_DWORD *)a1 = 0;
          v30 = 5;
          goto LABEL_26;
        case 2u:
          v29 = a1;
          *(_DWORD *)a1 = 0;
          v30 = 6;
          goto LABEL_26;
        case 3u:
          v29 = a1;
          *(_DWORD *)a1 = 0;
          v30 = 7;
          goto LABEL_26;
        case 4u:
          v29 = a1;
          *(_DWORD *)a1 = 0;
          v30 = 9;
          goto LABEL_26;
        case 5u:
          v29 = a1;
          *(_DWORD *)a1 = 0;
          v30 = 8;
          goto LABEL_26;
        default:
          v41 = v52;
          if (!v222)
            goto LABEL_222;
          if (*(_BYTE *)(v52 + 16) != 2
            || *(_QWORD *)(*(_QWORD *)((*((_QWORD *)v222 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
          {
            goto LABEL_156;
          }
          v178 = a3;
          break;
      }
      while (1)
      {
        v179 = *(_DWORD *)v178;
        if (*(_DWORD *)v178 != 7)
          break;
        v178 = *(_QWORD *)(v178 + 8);
        if (!v178)
          goto LABEL_156;
      }
      if (v179)
      {
        if (v179 != 16 && (v179 != 6 || !*(_BYTE *)(v178 + 40)))
          goto LABEL_156;
      }
      else if ((*(_DWORD *)(*(_QWORD *)(v178 + 32) + 28) & 0x7F) != 0x3D)
      {
LABEL_156:
        if ((*(_BYTE *)(*((_QWORD *)a2 + 9) + 1) & 1) != 0)
        {
          if (*(_DWORD *)a3 == 6 && *v222 == 180)
          {
            v70 = a1;
            sub_22EC3B2AC(a2, a3, (uint64_t)a4, (uint64_t *)v222, a1, a8);
            LODWORD(v231) = 29;
            v232 = v21;
            goto LABEL_117;
          }
          goto LABEL_222;
        }
        v89 = v222;
        do
        {
          v90 = *v89;
          if (v90 > 0xD5)
          {
            if (v90 == 233)
            {
              if ((*(_DWORD *)v89 & 0x7C0000) != 0x300000)
                goto LABEL_222;
              v90 = *(_DWORD *)v89;
              v92 = (unsigned __int8 **)(v89 + 16);
            }
            else
            {
              if (v90 != 214)
                break;
              v92 = (unsigned __int8 **)(v89 + 24);
            }
          }
          else if (v90 == 155)
          {
            if ((**((_DWORD **)v89 + 2) & 0x18000) != 0)
              goto LABEL_222;
            v92 = (unsigned __int8 **)(v89 + 24);
            if (!v89[48])
              v92 = (unsigned __int8 **)(v89 + 32);
            v90 = 155;
          }
          else
          {
            if (v90 != 176)
              break;
            v91 = *((unsigned int *)v89 + 5);
            if ((_DWORD)v91 == -1)
              goto LABEL_222;
            v92 = (unsigned __int8 **)&v89[8 * v91 + 40];
            v90 = 176;
          }
          v93 = *v92;
          v18 = v93 == v89;
          v89 = v93;
        }
        while (!v18);
        if (v90 != 156)
          goto LABEL_222;
        v94 = *((_QWORD *)v222 + 1);
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v94 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) & 0xFEu)
           - 2 > 3)
          goto LABEL_222;
        v95 = sub_22EF5C728(v14, v94);
        if (*(_QWORD *)((v52 & 0xFFFFFFFFFFFFFFF0) + 8) != *(_QWORD *)((v95 & 0xFFFFFFFFFFFFFFF0) + 8)
          && ((*(_QWORD *)((*(_QWORD *)(v52 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v52 + 32) & 7) != (*(_QWORD *)((*(_QWORD *)(v95 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v95 + 32) & 7)
           || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v95 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 2
           || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v52 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 4))
        {
          v29 = a1;
          *(_DWORD *)a1 = 0;
          v30 = 10;
          goto LABEL_26;
        }
        if (sub_22F0005B0((unint64_t)v222, *((_QWORD *)a2 + 11), 1, v96, v97, v98, v99, v100))
        {
          v29 = a1;
          *(_DWORD *)a1 = 0;
          v30 = 11;
          goto LABEL_26;
        }
        v69 = 28;
        goto LABEL_115;
      }
      if ((v222[1] & 3) == 0)
      {
        v69 = 27;
        goto LABEL_115;
      }
      sub_22EC38D34((uint64_t)&v231, *((_QWORD *)a2 + 11), 0, a3);
      v190 = *(_QWORD *)(sub_22EF5C728(v14, *((_QWORD *)v222 + 1)) + 32);
      v191 = v222;
      sub_22EFF605C((uint64_t)v222);
      sub_22E5BBE34((uint64_t)&v225, v192, v190, BYTE1(*(_DWORD *)v191) & 3, (*(_DWORD *)v191 >> 10) & 7, 0);
      v224 = &v225;
      sub_22EC3968C(a1, a2, &v231, a4, &v224, 1, a7, a8);
      if (*(_DWORD *)a1)
        sub_22F335CE4(a1, *(_QWORD *)(a3 + 16), v190);
      return;
    }
    v50 = *((_QWORD *)a2 + 9);
    v51 = (*(_WORD *)(v50 + 148) & 2) != 0 && (*(_DWORD *)a3 == 1 || *(_DWORD *)a3 == 19);
    if ((*(_DWORD *)(v50 + 52) & 0x40000000) != 0)
    {
      v54 = *(_QWORD *)(*(_QWORD *)(*v22 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v54 && (*(_DWORD *)(v54 + 16) & 0xFF800FF) == 116391947)
      {
        v216 = v51;
        v66 = v222;
        if ((sub_22F0085E8((uint64_t)v222, *((_QWORD *)a2 + 11), 0) & 1) != 0
          || ((v67 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v66 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
            ? (v68 = (*(_DWORD *)(v67 + 16) & 0xFF800FF) == 116391947)
            : (v68 = 0),
              v68))
        {
          v69 = 35;
LABEL_115:
          LODWORD(v231) = v69;
          v232 = v21;
LABEL_116:
          v70 = a1;
LABEL_117:
          v71 = v70 + 8;
          goto LABEL_118;
        }
        v50 = *((_QWORD *)a2 + 9);
        v51 = v216;
      }
    }
    if ((*(_BYTE *)(v50 + 1) & 1) == 0)
    {
      v56 = v222;
      if ((_DWORD)v51)
      {
        v57 = *((_QWORD *)v222 + 1);
        v58 = sub_22EF5C728(*((_QWORD *)a2 + 11), v57);
        v59 = v58;
        if (v58)
        {
          v60 = *(_QWORD *)(v58 + 32);
          v57 = sub_22EF5B848(*((_QWORD *)a2 + 11), v60, 0);
        }
        else
        {
          v60 = 0;
        }
        v225 = 0;
        if (sub_22ECFC458((uint64_t)a2, v57, *(_QWORD *)(a3 + 16), (unint64_t *)&v225))
        {
          v77 = 30;
          v78 = a1;
          v79 = 1 << *(_DWORD *)a3;
          if ((v79 & 0x7FFB8) == 0)
          {
            v110 = (v79 & 0x100045) != 0 ? *(_QWORD *)(a3 + 32) : *(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFF8;
            if (v110)
            {
              if ((*(_DWORD *)(v110 + 96) & 0xFF000) == 0x9000)
                v77 = 31;
              else
                v77 = 30;
            }
          }
          if (v59 || (v56[1] & 3) != 0)
          {
            LODWORD(v231) = 0;
            v232 = 0;
            v237 = 0;
            if (v59)
            {
              v233[0] = 536870914;
              v80 = sub_22EF5B848(*((_QWORD *)a2 + 11), v60, 0);
            }
            else
            {
              v233[0] = 536870913;
              v224 = (uint64_t *)*((_QWORD *)v56 + 1);
              v80 = sub_22F1133DC((uint64_t *)&v224, *((_QWORD *)a2 + 11));
            }
            sub_22EC3936C(a1, (uint64_t)&v231, v80, 0);
            if ((v231 & 0x7FFFFFFF) == 2 && v234 != &v236)
              free(v234);
            v78 = a1;
          }
          v109 = *(_QWORD *)(a3 + 16);
          LODWORD(v231) = v77;
          v232 = v109;
          v71 = v78 + 8;
          v70 = v78;
          goto LABEL_118;
        }
        v56 = v222;
        v50 = *((_QWORD *)a2 + 9);
      }
      v81 = a1;
      if ((*(_DWORD *)(v50 + 52) & 0x40000000) != 0)
      {
        v82 = *(_QWORD *)(*(_QWORD *)(*v22 + 8) & 0xFFFFFFFFFFFFFFF0);
        v83 = *(_DWORD *)(v82 + 16) & 0xFF800FF;
        v85 = v83 == 116916235 || v83 == 117964811;
        if (!v82 || !v85)
        {
          v168 = sub_22F420564((uint64_t)(a2 + 6), (uint64_t)"cl_intel_device_side_avc_motion_estimation", 42, v50);
          v81 = a1;
          if (!v168)
            goto LABEL_374;
          v169 = *(_QWORD *)(*(_QWORD *)(*v22 + 8) & 0xFFFFFFFFFFFFFFF0);
          v170 = *(_DWORD *)(v169 + 16);
          v171 = v170 & 0xFF800FF;
          v172 = v170 & 0xFF000FF;
          v173 = v170 & 0xFE000FF;
          v177 = v173 == 20971531 || v173 == 18874379 || v172 == 23068683 || v171 == 24117259;
          if (v169 && v177)
          {
            v81 = a1;
            if (v171 == 18874379 || v171 == 20971531)
              goto LABEL_374;
          }
          else
          {
            v81 = a1;
            if (!v169 || v171 != 24641547)
              goto LABEL_374;
          }
        }
        v86 = sub_22EC4F6C4(v56, (uint64_t)a2);
        v81 = a1;
        if (v86)
        {
          LODWORD(v231) = 36;
          v232 = v21;
          v71 = a1 + 8;
          v70 = a1;
LABEL_118:
          v72 = sub_22EC51434(v71, (unint64_t)&v231);
          v73 = *(_QWORD *)(v70 + 8) + 40 * *(unsigned int *)(v70 + 16);
          v74 = *(_QWORD *)(v72 + 32);
          v75 = *(_OWORD *)(v72 + 16);
          *(_OWORD *)v73 = *(_OWORD *)v72;
          *(_OWORD *)(v73 + 16) = v75;
          *(_QWORD *)(v73 + 32) = v74;
          ++*(_DWORD *)(v70 + 16);
          return;
        }
      }
LABEL_374:
      LODWORD(v231) = 22;
      v232 = v21;
      v185 = v81;
      v186 = sub_22EC51434(v81 + 8, (unint64_t)&v231);
      v187 = *(_QWORD *)(v185 + 8) + 40 * *(unsigned int *)(v185 + 16);
      v188 = *(_QWORD *)(v186 + 32);
      v189 = *(_OWORD *)(v186 + 16);
      *(_OWORD *)v187 = *(_OWORD *)v186;
      *(_OWORD *)(v187 + 16) = v189;
      *(_QWORD *)(v187 + 32) = v188;
      ++*(_DWORD *)(v185 + 16);
      sub_22EC3C054(*(_QWORD *)(*((_QWORD *)a2 + 9) + 140), *(_WORD *)(*((_QWORD *)a2 + 9) + 148), v185, (int *)a3);
      return;
    }
    v61 = *(_QWORD *)(v50 + 100);
    v62 = *v22;
    v63 = *(_QWORD *)(*v22 + 8);
    v64 = *(_DWORD *)(*(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0) + 16);
    if ((v61 & 0x2000000000) != 0 && v64 == 56 && !*a4)
    {
      if ((v63 & 0xF) != 0)
        v62 = (uint64_t)sub_22F10D2BC(v21);
      v87 = (uint64_t *)(v62 & 0xFFFFFFFFFFFFFFF0);
      v224 = (uint64_t *)(v62 & 0xFFFFFFFFFFFFFFF0);
      if (!v31)
      {
        v108 = *v87;
        if (!*v87 || *(_BYTE *)(v108 + 16) != 56)
          v108 = sub_22F10CF48(v108);
        if (a6 > *(unsigned int *)(v108 + 20))
        {
          v29 = a1;
          *(_DWORD *)a1 = 0;
          v30 = 40;
          goto LABEL_26;
        }
        v120 = v227;
        v225 = (uint64_t)v227;
        v226 = 0x400000000;
        sub_22E80A6E8((uint64_t)&v225, a6, 1);
        v215 = (unint64_t *)(a1 + 6872);
        do
        {
          v121 = *v87;
          if (!*v87 || *(_BYTE *)(v121 + 16) != 56)
          {
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v121 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 56)
              v121 = sub_22F10CF48(v121);
            else
              v121 = 0;
          }
          v122 = v226;
          if ((_DWORD)v226)
          {
            v123 = 0;
            v124 = (int *)v225;
            v125 = 4 * v226;
            do
            {
              v126 = *v124++;
              v123 += v126;
              v125 -= 4;
            }
            while (v125);
          }
          else
          {
            v123 = 0;
          }
          v217 = *(_DWORD *)(v121 + 20);
          if (v123 == v217)
          {
            v220 = v121;
            bzero(v233, 0x2A0uLL);
            v127 = a1;
            v231 = (const void **)v233;
            v232 = 0x400000000;
            v238 = v240;
            v239 = 4;
            v128 = *(_DWORD *)(a1 + 6880);
            v129 = *(_QWORD *)(a1 + 6872);
            if (v128 >= *(_DWORD *)(a1 + 6884))
            {
              v159 = v129 + 688 * v128 > (unint64_t)&v231;
              if (v129 <= (unint64_t)&v231 && v159)
              {
                v160 = (char *)&v231 - v129;
                sub_22F3360F0((uint64_t)v215);
                v129 = *v215;
                v130 = (char **)&v160[*v215];
              }
              else
              {
                sub_22F3360F0((uint64_t)v215);
                v129 = *v215;
                v130 = (char **)&v231;
              }
              v127 = a1;
            }
            else
            {
              v130 = (char **)&v231;
            }
            v131 = *(_DWORD *)(v127 + 6880);
            v132 = (_QWORD *)(v129 + 688 * v131);
            *v132 = v132 + 2;
            v132[1] = 0x400000000;
            if (*((_DWORD *)v130 + 2))
            {
              sub_22EC4F7E4((uint64_t)v132, (uint64_t)v130);
              v127 = a1;
            }
            v133 = (_QWORD *)(v129 + 688 * v131);
            v133[78] = v130[78];
            v133[79] = v133 + 81;
            v133[80] = 0x400000000;
            if (*((_DWORD *)v130 + 160))
            {
              sub_22F24C77C((uint64_t)(v133 + 79), (uint64_t)(v130 + 79));
              v127 = a1;
            }
            *(_BYTE *)(v129 + 688 * v131 + 680) = *((_BYTE *)v130 + 680);
            ++*(_DWORD *)(v127 + 6880);
            v134 = v127;
            if (v238 != v240)
              free(v238);
            sub_22EC4FA84((char **)&v231);
            v135 = *(_QWORD *)(v134 + 6872) + 688 * *(unsigned int *)(v134 + 6880);
            v136 = (_QWORD *)(v135 - 688);
            v138 = (_DWORD *)(v135 - 680);
            v137 = *(unsigned int *)(v135 - 680);
            v139 = a6;
            if ((_DWORD)v137 != (_DWORD)a6)
            {
              if (v137 > a6)
              {
                v161 = *v136 + 152 * v137 - 152;
                v162 = 152 * a6 - 152 * v137;
                do
                {
                  if ((*(_DWORD *)v161 & 0x7FFFFFFF) == 2)
                  {
                    v163 = *(void **)(v161 + 32);
                    if ((void *)(v161 + 48) != v163)
                      free(v163);
                  }
                  v161 -= 152;
                  v162 += 152;
                  v139 = a6;
                }
                while (v162);
              }
              else
              {
                if (*(_DWORD *)(v135 - 676) < a6)
                {
                  sub_22F33628C(v135 - 688);
                  v139 = a6;
                  v137 = *v138;
                }
                if (v137 != v139)
                {
                  v140 = *v136 + 152 * v139;
                  v141 = *v136 + 152 * v137;
                  do
                  {
                    *(_DWORD *)v141 = 5;
                    v142 = *(_QWORD *)(v141 + 16) & 0xFFFFFFFC04000000 | 0x20000000;
                    *(_QWORD *)(v141 + 8) = 0;
                    *(_QWORD *)(v141 + 16) = v142;
                    *(_QWORD *)(v141 + 56) = 0;
                    v141 += 152;
                  }
                  while (v141 != v140);
                }
              }
              *v138 = a6;
            }
            v143 = (_QWORD *)(v135 - 56);
            sub_22E50D8F0(v135 - 56, v139);
            *(_QWORD *)(v135 - 64) = v87;
            *(_BYTE *)(v135 - 8) = 1;
            if (!(_DWORD)v226)
              break;
            v213 = v120;
            v214 = v87;
            v144 = 0;
            v145 = 0;
            v146 = 152 * v226;
            v147 = v220;
            do
            {
              v148 = *(unsigned int *)(v225 + 4 * v145);
              if ((_DWORD)v148 == 1)
              {
                v149 = *(_QWORD *)(v147 + 32);
                *(_QWORD *)(*v143 + 8 * v145) = v149;
              }
              else if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v147 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 56)
              {
                v150 = sub_22EF63724(*((_QWORD *)a2 + 11), *(_QWORD *)(v147 + 32), v148, (*(_DWORD *)(v147 + 16) >> 19) & 0xF);
                v149 = sub_22EC27128((uint64_t)a2, v150);
                *(_QWORD *)(*v143 + 8 * v145) = v149;
              }
              else
              {
                v149 = *(_QWORD *)(*v143 + 8 * v145);
              }
              LOWORD(v211) = 0;
              sub_22ECFA94C(&v231, a2, a5[v145], v149, 0, 0, 1, 0, 0, v211);
              v151 = *v136 + v144;
              if ((*(_DWORD *)v151 & 0x7FFFFFFF) == 2)
              {
                v152 = *(void **)(v151 + 32);
                if ((void *)(v151 + 48) != v152)
                  free(v152);
              }
              sub_22EC4D2E0(v151, (uint64_t)&v231);
              if ((v231 & 0x7FFFFFFF) == 2 && v234 != &v236)
                free(v234);
              v153 = *(_BYTE *)(v135 - 8);
              if (v153)
                v153 = (*(_DWORD *)(*v136 + v144) & 0x7FFFFFFF) != 4;
              v147 = v220;
              *(_BYTE *)(v135 - 8) = v153;
              ++v145;
              v144 += 152;
            }
            while (v146 != v144);
            v122 = v226;
            v120 = v213;
            v87 = v214;
          }
          if (!v122)
            break;
          v154 = v225 - 4;
          while (1)
          {
            v155 = *(_DWORD *)(v154 + 4 * v122) + 1;
            *(_DWORD *)(v154 + 4 * v122) = v155;
            v156 = v226;
            if (v155 <= v217 - (int)a6 + 1)
              break;
            v122 = v226 - 1;
            LODWORD(v226) = v226 - 1;
            if ((_DWORD)v156 == 1)
              goto LABEL_310;
          }
          if (!(_DWORD)v226)
            break;
          v157 = v226;
          v158 = v226;
          if (a6 > HIDWORD(v226))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v157 = v226;
            v158 = v226;
          }
          if (a6 != v156)
          {
            memset_pattern16((void *)(v225 + 4 * v157), &unk_22F483960, 4 * (a6 - v156));
            v158 = v226;
          }
          LODWORD(v226) = v158 + a6 - v156;
        }
        while ((_DWORD)v226);
LABEL_310:
        v231 = 0;
        v164 = sub_22ED11CBC((uint64_t)v215, a2, (uint64_t *)&v231);
        if (v164)
        {
          *(_DWORD *)a1 = 0;
          *(_DWORD *)(a1 + 184) = 41;
          *(_DWORD *)(a1 + 188) = v164;
        }
        else
        {
          sub_22EC39404(a1, (uint64_t)v87, (uint64_t)*v231, *((unsigned int *)v231 + 2), v231[79], *((unsigned int *)v231 + 160));
        }
        v167 = (unint64_t *)v225;
        if ((_QWORD *)v225 == v120)
          return;
LABEL_434:
        free(v167);
        return;
      }
      sub_22ECFA94C(&v231, a2, *a5, v62 & 0xFFFFFFFFFFFFFFF0, 0, 2 * (*a4 != 2), 0, 1, 0, 0);
      v88 = (int)v231;
      if ((v231 & 0x7FFFFFFF) == 4)
      {
        *(_DWORD *)a1 = 0;
        *(_DWORD *)(a1 + 184) = 24;
LABEL_431:
        if ((v88 & 0x7FFFFFFF) != 2)
          return;
        v167 = (unint64_t *)v234;
LABEL_433:
        if (v167 == &v236)
          return;
        goto LABEL_434;
      }
      sub_22EC3936C(a1, (uint64_t)&v231, v62 & 0xFFFFFFFFFFFFFFF0, 0);
      sub_22EC39404(a1, v62 & 0xFFFFFFFFFFFFFFF0, (uint64_t)&v231, 1uLL, &v224, 1);
      goto LABEL_430;
    }
    if (v64 == 45)
    {
      if (!*a4
        || *a4 == 2
        && (*(_QWORD *)(*(_QWORD *)((v218 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
         || (sub_22F0D5A50((uint64_t)v222), sub_22EAAB1B8(a2, v65, v218, v21))))
      {
        sub_22EC3C124(a2, (_DWORD *)a3, a4, a5, a6, v21, v21, a1, 0, 0);
      }
      else
      {
        sub_22EC3C758(a2, v21, a4, (uint64_t)v222, a1, a7);
      }
      return;
    }
    if (a6 >= 2)
    {
      *(_DWORD *)a1 = 0;
      v76 = 26;
LABEL_123:
      *(_DWORD *)(a1 + 184) = v76;
      return;
    }
    if (*(unsigned __int8 *)*a5 == 180)
    {
      *(_DWORD *)a1 = 0;
      v76 = 27;
      goto LABEL_123;
    }
    if (v218 < 0x10)
    {
LABEL_194:
      if ((v61 & 0x2000000000) != 0)
      {
        v105 = 0;
        if (v64 != 56 || (*(_QWORD *)(v50 + 116) & 0x20000000000) == 0 || *(_DWORD *)a3 != 7)
        {
LABEL_394:
          HIBYTE(v212) = v105;
          LOBYTE(v212) = 0;
          sub_22ECFA94C(&v231, a2, v222, v21, 1, 0, 0, *(unsigned __int16 *)a4 > 0x3FFu, v51, v212);
          if ((v231 & 0x7FFFFFFF) != 4)
          {
            if ((v231 & 0x7FFFFFFF) == 0 && (v233[0] & 0xFF00) == 0x1A00)
            {
              v195 = 30;
              v196 = 1 << *(_DWORD *)a3;
              if ((v196 & 0x7FFB8) == 0)
              {
                v197 = (v196 & 0x100045) != 0 ? *(_QWORD *)(a3 + 32) : *(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFF8;
                if (v197)
                {
                  if ((*(_DWORD *)(v197 + 96) & 0xFF000) == 0x9000)
                    v195 = 31;
                  else
                    v195 = 30;
                }
              }
              if (LOBYTE(v233[0]) - 1 <= 1)
              {
                LODWORD(v225) = 0;
                v228 = v234;
                v229 = v234;
                v230[0] = v234;
                v230[1] = 0;
                v226 = 0;
                v227[0] = LOBYTE(v233[0]) | 0x20000000;
                sub_22EC3936C(a1, (uint64_t)&v225, (uint64_t)v234, 0);
                if ((v225 & 0x7FFFFFFF) == 2 && v228 != v230)
                  free(v228);
              }
              LODWORD(v225) = v195;
              v226 = v21;
              goto LABEL_429;
            }
            sub_22EC3936C(a1, (uint64_t)&v231, v21, a7);
            sub_22EC3C054(*(_QWORD *)(*((_QWORD *)a2 + 9) + 140), *(_WORD *)(*((_QWORD *)a2 + 9) + 148), a1, (int *)a3);
LABEL_430:
            v88 = (int)v231;
            goto LABEL_431;
          }
          if ((*(_BYTE *)(*((_QWORD *)a2 + 9) + 1) & 2) != 0
            && *(_DWORD *)a3 == 3
            && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) == 39
            && *v222 == 117
            && (v222[2] & 4) == 0)
          {
            v198 = (_QWORD *)*((_QWORD *)a2 + 14);
            sub_22EFF605C((uint64_t)v222);
            v200 = sub_22F1E361C(v198, v199);
            if (v200)
            {
              if (v200 != 3)
              {
                v210 = *(_QWORD *)(a3 + 16);
                LODWORD(v225) = 21;
                v226 = v210;
LABEL_429:
                v206 = sub_22EC51434(a1 + 8, (unint64_t)&v225);
                v207 = *(_QWORD *)(a1 + 8) + 40 * *(unsigned int *)(a1 + 16);
                v208 = *(_QWORD *)(v206 + 32);
                v209 = *(_OWORD *)(v206 + 16);
                *(_OWORD *)v207 = *(_OWORD *)v206;
                *(_OWORD *)(v207 + 16) = v209;
                *(_QWORD *)(v207 + 32) = v208;
                ++*(_DWORD *)(a1 + 16);
                goto LABEL_430;
              }
            }
          }
          v201 = v222;
          v202 = *((_QWORD *)v222 + 1);
          if (v202 == *(_QWORD *)(v14 + 16840))
          {
            if (!sub_22ED13340(a2, (uint64_t)v222, v21, 0, &v224, 0))
            {
              v204 = a1;
              *(_DWORD *)a1 = 0;
              v205 = 12;
LABEL_416:
              *(_DWORD *)(v204 + 184) = v205;
              goto LABEL_430;
            }
            v201 = v222;
            v202 = *((_QWORD *)v222 + 1);
          }
          if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v202 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 16)
             - 25 <= 1
            && *v201 == 161
            && (v203 = *((_QWORD *)v201 + 2), (*(_DWORD *)(v203 + 28) & 0x7Eu) - 52 <= 5)
            && !sub_22ED10E50(a2, v203, 0, 0, 0))
          {
            v204 = a1;
            *(_DWORD *)a1 = 0;
            v205 = 38;
          }
          else
          {
            v204 = a1;
            *(_DWORD *)a1 = 0;
            v205 = 24;
          }
          goto LABEL_416;
        }
        v106 = v51;
        v107 = sub_22E3E4B64(*v22);
        if (v107)
        {
          v105 = 0;
          if (v218 < 0x10)
          {
LABEL_393:
            v51 = v106;
            goto LABEL_394;
          }
          v51 = v106;
          if ((*(_DWORD *)(v107 + 16) & 0x780000) == 0x80000)
            goto LABEL_394;
LABEL_361:
          v181 = (uint64_t *)(v218 & 0xFFFFFFFFFFFFFFF0);
          v182 = *(_QWORD *)(v218 & 0xFFFFFFFFFFFFFFF0);
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v182 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 56)
            goto LABEL_392;
          v183 = sub_22E3E4B64(v182);
          if (v183)
          {
            if ((*(_DWORD *)(v183 + 16) & 0x780000) == 0x80000)
              goto LABEL_392;
          }
          v184 = *v22;
          if (!*v22 || *(_BYTE *)(v184 + 16) != 56)
          {
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v184 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 56)
              v184 = sub_22F10CF48(*v22);
            else
              v184 = 0;
          }
          v193 = *v181;
          if (!*v181 || *(_BYTE *)(v193 + 16) != 56)
          {
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v193 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 56)
              v193 = sub_22F10CF48(v193);
            else
              v193 = 0;
          }
          if (*v222 == 189 && (v194 = *(_DWORD *)(v184 + 20), v194 == *(_DWORD *)(v193 + 20)))
            v105 = v194 == *((_DWORD *)v222 + 8);
          else
LABEL_392:
            v105 = 0;
          goto LABEL_393;
        }
        if (v218 >= 0x10)
          goto LABEL_361;
        v51 = v106;
      }
      v105 = 0;
      goto LABEL_394;
    }
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v218 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 16) != 45)
    {
      if ((*(_DWORD *)(*(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFF800FF) == 0x530000B
        && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v218 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFF800FF) == 0x6D0000B
        && !*a4)
      {
        v165 = *(_DWORD *)v222;
        LODWORD(v231) = 0;
        v236 = v21;
        v237 = 0;
        v233[1] = v218;
        v234 = (void *)v218;
        if ((v165 & 0x300) != 0)
          v166 = 536874753;
        else
          v166 = 536874752;
        v232 = 0;
        v233[0] = v166;
        v235 = v21;
        sub_22EC3936C(a1, (uint64_t)&v231, v21, 0);
        if ((v231 & 0x7FFFFFFF) != 2)
          return;
        v167 = (unint64_t *)v234;
        goto LABEL_433;
      }
      goto LABEL_194;
    }
    if (*(_BYTE *)(v62 + 16) == 6 || v64 == 6 && (v62 = sub_22F10CF48(*v22)) != 0)
    {
      v117 = *(_QWORD *)(v62 + 32);
      if (*(_QWORD *)(*(_QWORD *)((v218 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v117 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
      {
        v119 = 0;
        v21 = *(_QWORD *)(v62 + 32);
LABEL_369:
        sub_22EC3C758(a2, v21, a4, (uint64_t)v222, a1, a7);
        sub_22EC3C054(*(_QWORD *)(*((_QWORD *)a2 + 9) + 140), *(_WORD *)(*((_QWORD *)a2 + 9) + 148), a1, (int *)a3);
        if ((v119 & 1) != 0 || !*(_DWORD *)a1)
          return;
        v38 = *(_QWORD *)(a3 + 16);
        v39 = 13;
        goto LABEL_82;
      }
      sub_22F0D5A50((uint64_t)v222);
      if (sub_22EAAB1B8(a2, v118, v218, v117))
      {
        v119 = 0;
        v21 = *(_QWORD *)(v62 + 32);
        goto LABEL_369;
      }
    }
    v119 = 1;
    goto LABEL_369;
  }
  if (*(_DWORD *)a3)
    goto LABEL_39;
  if (sub_22E634350(*(_QWORD *)(a3 + 32)))
    return;
  v47 = *(_DWORD *)a3;
  v48 = 0;
  v49 = 1 << *(_DWORD *)a3;
  if ((v49 & 0x7FFB8) == 0)
  {
    if ((v49 & 0x100045) != 0)
      v48 = *(_QWORD *)(a3 + 32);
    else
      v48 = *(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFF8;
  }
  if ((*(_BYTE *)(v48 + 29) & 1) != 0)
  {
    sub_22EFC8E88(v48);
    if (!sub_22E54E894(*(_QWORD *)v180, *(_QWORD *)v180 + 8 * *(unsigned int *)(v180 + 8)))
      return;
    v47 = *(_DWORD *)a3;
  }
  v101 = 0;
  v102 = 1 << v47;
  if ((v102 & 0x7FFB8) == 0)
  {
    if ((v102 & 0x100045) != 0)
      v101 = *(_QWORD *)(a3 + 32);
    else
      v101 = *(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFF8;
  }
  if (!sub_22E633F90(v101))
  {
    v103 = 0;
    v104 = 1 << *(_DWORD *)a3;
    if ((v104 & 0x7FFB8) == 0)
    {
      if ((v104 & 0x100045) != 0)
        v103 = *(_QWORD *)(a3 + 32);
      else
        v103 = *(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFF8;
    }
    if ((*(_BYTE *)(v103 + 29) & 1) == 0
      || (sub_22EFC8E88(v103),
          sub_22F271604(*(uint64_t **)v111, (uint64_t *)(*(_QWORD *)v111 + 8 * *(unsigned int *)(v111 + 8)))))
    {
LABEL_39:
      v36 = sub_22EF5BA38(*((_QWORD *)a2 + 11), *(_QWORD *)(a3 + 16));
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 45
        && (*(_BYTE *)(*((_QWORD *)a2 + 9) + 1) & 1) != 0)
      {
        sub_22EC3C124(a2, (_DWORD *)a3, a4, 0, 0, v36, *(_QWORD *)(a3 + 16), a1, 0, 0);
        return;
      }
      if ((v36 & 1) == 0)
      {
        v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v37 & 1) == 0)
          goto LABEL_45;
      }
      if ((*(_BYTE *)(*((_QWORD *)a2 + 9) + 1) & 1) == 0)
      {
        v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFFF0) + 8);
LABEL_45:
        if ((v37 & 8) == 0 || (*(_WORD *)((v37 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 0)
          return;
        v38 = *(_QWORD *)(a3 + 16);
        v39 = 21;
LABEL_82:
        LODWORD(v231) = v39;
        v232 = v38;
        goto LABEL_116;
      }
      if (sub_22EC4F580((uint64_t)a2, a1, a3))
        return;
      v29 = a1;
      *(_DWORD *)a1 = 0;
      v30 = 33;
LABEL_26:
      *(_DWORD *)(v29 + 184) = v30;
    }
  }
}

double sub_22EC3B2AC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  __int128 v19;
  BOOL v20;
  uint64_t v21;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 **v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _BOOL4 v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v84;
  __int128 v85;
  unint64_t v86;
  unint64_t v87;
  void *v88;
  unint64_t v89;
  _QWORD v90[13];
  unint64_t v91;
  uint64_t v92[2];
  unint64_t v93;
  unsigned __int8 *v94;
  unint64_t v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  v12 = *(_QWORD *)(a2 + 16);
  v91 = v12;
  v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(a1[9] + 1) & 1) == 0)
    goto LABEL_23;
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_DWORD *)(v15 + 16);
  if (v15)
    v17 = v16 == 11;
  else
    v17 = 0;
  if (v17)
  {
    if (((v16 >> 19) & 0x1FF) - 166 >= 0x35)
      goto LABEL_23;
  }
  else if (v15 && v16 == 44)
  {
    v18 = sub_22F114198(*(_QWORD *)(v15 + 24));
    if ((*(_BYTE *)(v18 + 74) & 1) != 0)
    {
      v14 = *v13;
    }
    else
    {
      v14 = *v13;
      if (*(_QWORD *)(v18 + 128) < 8uLL)
        goto LABEL_23;
    }
  }
  else
  {
    v20 = v16 > 0x27u;
    v21 = (1 << v16) & 0x8180001600;
    if (v20 || v21 == 0)
      goto LABEL_23;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 12
    && ((a4[3] - a4[2]) & 0x7FFFFFFF0) != 0)
  {
    *(_DWORD *)a5 = 0;
    v23 = 26;
LABEL_124:
    *(_DWORD *)(a5 + 184) = v23;
    return *(double *)&v19;
  }
LABEL_23:
  v24 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if ((v24 & 0xFE) != 0x28)
  {
    if (v24 == 45)
    {
      sub_22EFFD954((unint64_t)a4);
      if (sub_22EE8B180(a1, v25))
      {
        *(_QWORD *)(a5 + 6832) = v12;
LABEL_30:
        *(_DWORD *)a5 = 0;
        v23 = 34;
        goto LABEL_124;
      }
    }
    if ((*(_BYTE *)(a1[9] + 1) & 2) == 0)
      goto LABEL_76;
    v26 = a4[2];
    if (((a4[3] - v26) & 0x7FFFFFFF8) != 8)
      goto LABEL_76;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
    {
      v27 = *(_QWORD *)(*(_QWORD *)v26 + 8);
      if (*(_QWORD *)(*(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
        || (sub_22EFFD954((unint64_t)a4), sub_22EAAB1B8(a1, v28, v27, v12)))
      {
        *(_QWORD *)&v85 = a4;
        *(_QWORD *)&v19 = sub_22EC3C124(a1, (_DWORD *)a2, (unsigned __int8 *)a3, (uint64_t *)&v85, 1uLL, v12, v12, a5, 0, 1u).n128_u64[0];
        return *(double *)&v19;
      }
    }
    v41 = sub_22EF5C728(a1[11], v12);
    if (!v41)
      goto LABEL_76;
    v42 = v41;
    v94 = 0;
    v43 = *(unsigned __int8 **)a4[2];
    v94 = v43;
    if (*(_BYTE *)(v42 + 16) == 5 || sub_22EC378D4(v43, v42))
      goto LABEL_76;
    if (*(_BYTE *)a3 == 1)
    {
      v44 = a4[5];
      *(_QWORD *)&v85 = (unint64_t)*(unsigned int *)(a3 + 4) << 32;
      *((_QWORD *)&v85 + 1) = v44;
    }
    else
    {
      v85 = *(_OWORD *)a3;
    }
    sub_22EC3968C(a5, a1, a2, &v85, &v94, 1, 1, a6);
    if (!*(_DWORD *)a5)
    {
LABEL_76:
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45 && !sub_22F111060(*v13))
        goto LABEL_79;
      v52 = *(_QWORD *)a1[9];
      if ((v52 & 0x200) != 0)
      {
        if ((sub_22EAC21FC(a1, v12, 0) & 1) != 0)
        {
LABEL_79:
          if ((*(_BYTE *)(a1[9] + 1) & 2) == 0)
          {
            *(_DWORD *)a5 = 0;
            v23 = 29;
            goto LABEL_124;
          }
          if (((a4[3] - a4[2]) & 0x7FFFFFFF8) == 0)
          {
            v81 = sub_22F10C2A4(*v13);
            if (v81)
              v82 = (*(_DWORD *)(v81 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v81;
            else
              v82 = 0;
            if (sub_22F337E18((uint64_t)a1, v82))
            {
              *(double *)&v19 = sub_22EC3BE04(a1, a2, (unsigned __int8 *)a3, a5, (uint64_t)a4);
              return *(double *)&v19;
            }
          }
          v93 = 0;
          if (!sub_22EAC21FC(a1, v12, &v93))
          {
            *(_QWORD *)&v85 = a4;
            *(_QWORD *)&v19 = sub_22EC3C124(a1, (_DWORD *)a2, (unsigned __int8 *)a3, (uint64_t *)&v85, 1uLL, v12, v12, a5, 1u, 0).n128_u64[0];
            return *(double *)&v19;
          }
          sub_22EFF605C((uint64_t)a4);
          if (sub_22EE8B180(a1, v53))
          {
            *(_QWORD *)(a5 + 6832) = v93;
            goto LABEL_30;
          }
          v58 = a1[11];
          v59 = v93 | 1;
          v60 = sub_22EF67C8C(v58);
          v61 = sub_22EF5CDF0(v58, *(_QWORD *)(v60 & 0xFFFFFFFFFFFFFFF0));
          v62 = ((unint64_t)(a4[3] - a4[2]) >> 3);
          DWORD2(v85) = v61;
          if (v61 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v85);
          }
          else
          {
            v63 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v61;
            if (!v61)
              v63 = 0;
            *(_QWORD *)&v85 = v63 & v62;
          }
          v64 = sub_22EF5FE30(v58, v59, (const llvm::APInt *)&v85, 0, 0, 0);
          if (DWORD2(v85) >= 0x41 && (_QWORD)v85)
            MEMORY[0x2348A0E84](v85, 0x1000C8000313F17);
          LODWORD(v85) = 9;
          *((_QWORD *)&v85 + 1) = 0;
          v86 = v64;
          LODWORD(v87) = 0;
          v88 = 0;
          sub_22EFF605C((uint64_t)a4);
          v66 = v65;
          sub_22EFFD954((unint64_t)a4);
          v68 = v67;
          sub_22EFFD9B4((unint64_t)a4);
          v92[0] = (v66 << 32) | 1;
          v92[1] = v68 | (unint64_t)(v69 << 32);
          sub_22EC3B2AC(a1, &v85, v92, a4, a5, a6);
          if (!*(_DWORD *)a5)
            return *(double *)&v19;
          LODWORD(v94) = 33;
          v95 = v12;
          v70 = a5 + 8;
          v71 = &v94;
LABEL_127:
          v78 = sub_22EC51434(v70, (unint64_t)v71);
          v79 = *(_QWORD *)(a5 + 8) + 40 * *(unsigned int *)(a5 + 16);
          v80 = *(_QWORD *)(v78 + 32);
          v19 = *(_OWORD *)(v78 + 16);
          *(_OWORD *)v79 = *(_OWORD *)v78;
          *(_OWORD *)(v79 + 16) = v19;
          *(_QWORD *)(v79 + 32) = v80;
          ++*(_DWORD *)(a5 + 16);
          return *(double *)&v19;
        }
        v52 = *(_QWORD *)a1[9];
      }
      if ((v52 & 0x100) == 0)
        goto LABEL_122;
      if (sub_22F111060(*v13))
        goto LABEL_122;
      v54 = (uint64_t *)a4[2];
      if (((a4[3] - (_QWORD)v54) & 0x7FFFFFFF8) != 8)
        goto LABEL_122;
      v55 = *(_QWORD *)(*(_QWORD *)(*v13 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (*(_BYTE *)(v55 + 16) != 44)
        v55 = 0;
      if ((*(_BYTE *)(a1[9] + 1) & 8) != 0 && *(_BYTE *)a3 == 1)
      {
        if (v55)
        {
          v72 = *v54;
          if ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(v55 + 24)) + 77) & 2) != 0
            && *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v72 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
            && ((sub_22F1107D8(*(_QWORD *)(*(_QWORD *)(v72 + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) != 0
             || sub_22F10E0EC(*(_QWORD *)(*(_QWORD *)(v72 + 8) & 0xFFFFFFFFFFFFFFF0))))
          {
            LODWORD(v85) = 0;
            *((_QWORD *)&v85 + 1) = 0;
            v90[1] = 0;
            if ((*(_DWORD *)v72 & 0x300) != 0)
              v73 = 536870913;
            else
              v73 = 0x20000000;
            v74 = *(_QWORD *)(v72 + 8);
            v75 = sub_22F10E0EC(*(_QWORD *)(v74 & 0xFFFFFFFFFFFFFFF0));
            v76 = 2304;
            if (v75)
              v76 = 3072;
            v86 = v73 | v76;
            v87 = v74;
            v88 = (void *)v74;
            v89 = v12;
            v90[0] = v12;
            sub_22EC3936C(a5, (uint64_t)&v85, v12, 1);
            *(_QWORD *)&v19 = sub_22F335D6C(a5, *(_QWORD *)(a2 + 16), (uint64_t)a4).n128_u64[0];
            if ((v85 & 0x7FFFFFFF) == 2 && v88 != v90)
              free(v88);
            return *(double *)&v19;
          }
        }
      }
      v56 = *(_QWORD *)a4[2];
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v56 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                                      + 16) != 45
        && ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v56 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                       + 16) & 0xFF800FF) != 0x6D0000B
         || (v77 = *(_QWORD *)(*(_QWORD *)(*v13 + 8) & 0xFFFFFFFFFFFFFFF0)) == 0
         || (*(_DWORD *)(v77 + 16) & 0xFF800FF) != 0x530000B))
      {
LABEL_122:
        sub_22EC37BCC((uint64_t)&v94, (uint64_t)a1, a2, (unint64_t)a4, &v91, 1, a6, 0);
        if ((_BYTE)v95)
        {
          *(_DWORD *)a5 = 0;
          v23 = 36;
          goto LABEL_124;
        }
        LODWORD(v85) = 16;
        *((_QWORD *)&v85 + 1) = v91;
        v70 = a5 + 8;
        v71 = (unsigned __int8 **)&v85;
        goto LABEL_127;
      }
      if (*(_BYTE *)a3 == 1)
      {
        v57 = a4[5];
        *(_QWORD *)&v85 = (unint64_t)*(unsigned int *)(a3 + 4) << 32;
        *((_QWORD *)&v85 + 1) = v57;
      }
      else
      {
        v85 = *(_OWORD *)a3;
      }
      v94 = (unsigned __int8 *)v56;
      sub_22EC3968C(a5, a1, a2, &v85, &v94, 1, 1, a6);
      if (!*(_DWORD *)a5)
        return *(double *)&v19;
    }
    v40 = *(_QWORD *)(a2 + 16);
    v39 = a5;
LABEL_131:
    *(_QWORD *)&v19 = sub_22F335D6C(v39, v40, (uint64_t)a4).n128_u64[0];
    return *(double *)&v19;
  }
  if ((*(_BYTE *)(a1[9] + 1) & 2) == 0 || *(_DWORD *)a2 == 17)
  {
    *(_DWORD *)a5 = 0;
    v23 = 28;
    goto LABEL_124;
  }
  v29 = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF0;
  v30 = *(_QWORD *)v29;
  if (!*(_QWORD *)v29 || (v31 = *(_DWORD *)(v30 + 16), (v31 & 0xFE) != 0x28))
  {
    v30 = sub_22F10CF48(v30);
    v31 = *(_DWORD *)(v30 + 16);
  }
  if ((v31 & 0x100000) != 0)
  {
    do
    {
      while (1)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(v30 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v30)
          break;
        v32 = *(_DWORD *)(v30 + 16);
        if ((v32 & 0xFE) != 0x28)
          break;
        if ((v32 & 0x100000) == 0)
          goto LABEL_46;
      }
      v30 = sub_22F10CF48(v30);
    }
    while ((*(_DWORD *)(v30 + 16) & 0x100000) != 0);
  }
LABEL_46:
  v33 = *(_QWORD *)(v30 + 32);
  v92[0] = 0;
  v34 = sub_22EF67F34(a1[11], v33, v92);
  v35 = (uint64_t *)a4[2];
  if (((a4[3] - (_QWORD)v35) & 0x7FFFFFFF8) == 8)
  {
    v36 = *v35;
    *(_QWORD *)&v85 = sub_22EE8B05C((uint64_t)a1, *v35);
    v94 = 0;
    v93 = sub_22EF67F34(a1[11], v85, &v94);
    if ((sub_22EC4D3B4((uint64_t)a1, v36, (uint64_t *)&v85, &v93, v34, a5) & 1) != 0)
      return *(double *)&v19;
    v84 = v29;
    sub_22F0D5A50(v36);
    v37 = v85;
    if ((int)sub_22ED0169C((uint64_t)a1, v38, v33, v85, 0) >= 1)
    {
      *(double *)&v19 = sub_22EC4D4F4((uint64_t)a1, a2, a3, v36, v33, v34, v92[0], v37, v93, v94, SHIDWORD(v94), a5);
      if (!*(_DWORD *)a5)
        return *(double *)&v19;
      v39 = a5;
      v40 = v33;
      goto LABEL_131;
    }
    v29 = v84;
    if (*(_DWORD *)(a5 + 16))
      sub_22F335D6C(a5, v33, (uint64_t)a4);
  }
  v45 = v33;
  if (LODWORD(v92[0]) >= 0x800)
  {
    v94 = 0;
    sub_22EF67F34(a1[11], a4[1], &v94);
    if (!sub_22E95F2F0(LODWORD(v92[0]) >> 11, v94 >> 11))
    {
      *(_DWORD *)a5 = 0;
      v23 = 21;
      goto LABEL_124;
    }
    if ((v92[0] & 0xC000007F8) != 0)
    {
      v46 = a1[11];
      *(_QWORD *)&v85 = v92[0] & 0xFFFFFFFF000007FFLL;
      v47 = sub_22E491354((unsigned int *)&v85, v34);
      v45 = sub_22EF5DBC4(v46, v47, v85);
    }
    else
    {
      v45 = v92[0] & 7 | v34;
    }
  }
  LODWORD(v85) = 9;
  *((_QWORD *)&v85 + 1) = 0;
  v86 = v45;
  LODWORD(v87) = 0;
  v88 = 0;
  sub_22EC3B2AC(a1, &v85, a3, a4, a5, a6);
  if (*(_DWORD *)a5)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 41
      && (v92[0] & 5) != 1)
    {
      *(_DWORD *)a5 = 0;
      v23 = 14;
      goto LABEL_124;
    }
    LODWORD(v94) = 5;
    v95 = v45;
    v48 = sub_22EC51434(a5 + 8, (unint64_t)&v94);
    v49 = *(_QWORD *)(a5 + 8) + 40 * *(unsigned int *)(a5 + 16);
    v50 = *(_QWORD *)(v48 + 32);
    v19 = *(_OWORD *)(v48 + 16);
    *(_OWORD *)v49 = *(_OWORD *)v48;
    *(_OWORD *)(v49 + 16) = v19;
    *(_QWORD *)(v49 + 32) = v50;
    ++*(_DWORD *)(a5 + 16);
    if (LODWORD(v92[0]) >= 0x800)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 41)
        v51 = 2;
      else
        v51 = 1;
      *(_QWORD *)&v19 = sub_22EC392E4(a5, v33, v51).n128_u64[0];
    }
  }
  return *(double *)&v19;
}

double sub_22EC3BE04(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v28;
  uint64_t v29;

  v10 = sub_22EF5BA38(a1[11], *(_QWORD *)(a2 + 16));
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v11
    && *(_BYTE *)(v11 + 16) == 45
    && ((v12 = v10, (v13 = sub_22F114198(*(_QWORD *)(v11 + 24))) != 0)
      ? (v14 = (*(_DWORD *)(v13 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
      : (v14 = 0),
        v14))
  {
    v20 = v13;
    v21 = (_QWORD *)sub_22F337E18((uint64_t)a1, v13);
    if (v21
      && (*(_BYTE *)(v21[14] + 83) & 2) != 0
      && (*(_BYTE *)((*(uint64_t (**)(_QWORD *))(*v21 + 32))(v21) + 82) & 0x40) == 0)
    {
      v22 = *(_QWORD *)(a2 + 16);
      LODWORD(v28) = 21;
      v29 = v22;
      v23 = sub_22EC51434(a4 + 8, (unint64_t)&v28);
      v24 = *(_QWORD *)(a4 + 8) + 40 * *(unsigned int *)(a4 + 16);
      v25 = *(_QWORD *)(v23 + 32);
      v26 = *(_OWORD *)(v23 + 16);
      *(_OWORD *)v24 = *(_OWORD *)v23;
      *(_OWORD *)(v24 + 16) = v26;
      *(_QWORD *)(v24 + 32) = v25;
      ++*(_DWORD *)(a4 + 16);
    }
    if ((*(_BYTE *)(a1[9] + 1) & 2) != 0 || !sub_22EC4F51C(v20))
    {
      v28 = a5;
      *(_QWORD *)&v19 = sub_22EC3C124(a1, (_DWORD *)a2, a3, &v28, a5 != 0, v12, *(_QWORD *)(a2 + 16), a4, a5 != 0, 0).n128_u64[0];
    }
    else
    {
      *(_DWORD *)a4 = 0;
      *(_DWORD *)(a4 + 184) = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a2 + 16);
    LODWORD(v28) = 21;
    v29 = v15;
    v16 = sub_22EC51434(a4 + 8, (unint64_t)&v28);
    v17 = *(_QWORD *)(a4 + 8) + 40 * *(unsigned int *)(a4 + 16);
    v18 = *(_QWORD *)(v16 + 32);
    v19 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)v17 = *(_OWORD *)v16;
    *(_OWORD *)(v17 + 16) = v19;
    *(_QWORD *)(v17 + 32) = v18;
    ++*(_DWORD *)(a4 + 16);
  }
  return *(double *)&v19;
}

BOOL sub_22EC3BFC8(unint64_t a1, uint64_t a2)
{
  if (sub_22F36EDA0(a2, *(_QWORD *)(a2 + 16424), a1, 0))
    return 1;
  if ((**(_WORD **)(a2 + 2000) & 0x102) == 0)
    return 0;
  if (sub_22F36EDA0(a2, *(_QWORD *)(a2 + 16448), a1, 0))
    return 1;
  return sub_22F36EDA0(a2, *(_QWORD *)(a2 + 16456), a1, 0);
}

__n128 sub_22EC3C054(uint64_t a1, char a2, uint64_t a3, int *a4)
{
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __n128 result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  if ((a2 & 2) == 0)
    return result;
  v6 = *a4;
  if ((*a4 - 3) < 2)
  {
    v8 = *((_QWORD *)a4 + 2);
    v9 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
    v10 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v10 == 10 || v10 == 32)
      goto LABEL_14;
    if (!sub_22F115064(v9))
      return result;
LABEL_13:
    v8 = *((_QWORD *)a4 + 2);
LABEL_14:
    v15 = 32;
    v16 = v8;
    v12 = sub_22EC51434(a3 + 8, (unint64_t)&v15);
    v13 = *(_QWORD *)(a3 + 8) + 40 * *(unsigned int *)(a3 + 16);
    v14 = *(_QWORD *)(v12 + 32);
    result = *(__n128 *)(v12 + 16);
    *(_OWORD *)v13 = *(_OWORD *)v12;
    *(__n128 *)(v13 + 16) = result;
    *(_QWORD *)(v13 + 32) = v14;
    ++*(_DWORD *)(a3 + 16);
    return result;
  }
  v7 = v6 == 19 || v6 == 1;
  if (v7 && (a4[8] & 4) != 0)
    goto LABEL_13;
  return result;
}

__n128 sub_22EC3C124(_QWORD *a1, _DWORD *a2, unsigned __int8 *a3, uint64_t *a4, unint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10)
{
  unsigned __int8 v17;
  uint64_t v18;
  __n128 result;
  int v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  _BYTE *v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t *v80;
  unint64_t v81;
  _QWORD *v82;
  int v83;
  unint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;

  v17 = a9;
  if ((a9 | a10) == 1)
  {
    v18 = *a4;
    if (*a4)
    {
      v78 = 0;
      v80 = *(uint64_t **)(v18 + 16);
      v81 = ((*(_QWORD *)(v18 + 24) - (_QWORD)v80) >> 3);
      goto LABEL_6;
    }
  }
  else
  {
    v18 = 0;
  }
  v78 = 1;
  v80 = a4;
  v81 = a5;
LABEL_6:
  if (sub_22EE8B180(a1, *((unsigned int *)a3 + 1)))
  {
    *(_QWORD *)(a8 + 6832) = a6;
    *(_DWORD *)a8 = 0;
    v20 = 34;
LABEL_8:
    *(_DWORD *)(a8 + 184) = v20;
    return result;
  }
  if ((*(_BYTE *)(a1[9] + 1) & 8) != 0)
  {
    v21 = *a2 > 0xEu || ((1 << *a2) & 0x4C00) == 0;
    v22 = v21 && v81 == 1;
    if (v22
      && (*(_BYTE *)(*v80 + 1) & 3) == 0
      && *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*v80 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((a6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
    {
      v83 = 9;
      v84 = a6;
      v55 = sub_22EC51434(a8 + 8, (unint64_t)&v83);
      v56 = *(_QWORD *)(a8 + 8) + 40 * *(unsigned int *)(a8 + 16);
      v57 = *(_QWORD *)(v55 + 32);
      result = *(__n128 *)(v55 + 16);
      *(_OWORD *)v56 = *(_OWORD *)v55;
      *(__n128 *)(v56 + 16) = result;
      *(_QWORD *)(v56 + 32) = v57;
      ++*(_DWORD *)(a8 + 16);
      if ((v78 & 1) == 0)
      {
        v50 = a8;
        v49 = a6;
        goto LABEL_42;
      }
      return result;
    }
  }
  v75 = (uint64_t)a2;
  v76 = a7;
  v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v23 + 16) != 45)
    v23 = 0;
  v24 = a1;
  v25 = sub_22F114198(*(_QWORD *)(v23 + 24));
  v77 = a8;
  v26 = a8 + 192;
  v27 = *a3;
  if (v27 != 2)
    v17 = 1;
  v28 = sub_22EC66BE4((uint64_t)v24, v25);
  v29 = v28;
  v82 = 0;
  v74 = (uint64_t)v24;
  if (a9
    && (v81 || (v58 = v28, v59 = sub_22F337E18((uint64_t)v24, v25), v29 = v58, !v59))
    && (v30 = v29,
        v31 = sub_22EC4EFB8(v24, *((_DWORD *)a3 + 1), a4, a5, v26, a6, v29, (uint64_t)&v82, v27 == 2, v17, 1, 1, 0),
        v29 = v30,
        v31 != 1))
  {
    v32 = a3;
    v34 = 34;
    v33 = a9;
  }
  else
  {
    v32 = a3;
    v33 = a9;
    v31 = sub_22EC4EFB8(v24, *((_DWORD *)a3 + 1), v80, v81, v26, a6, v29, (uint64_t)&v82, v27 == 2, v17, 0, a9, 0);
    v34 = 20;
  }
  a8 = v77;
  if (v31)
  {
    *(_DWORD *)v77 = 0;
    v35 = v33 ? 32 : 31;
    *(_DWORD *)(v77 + 184) = v35;
    *(_DWORD *)(v77 + 188) = v31;
    if (v31 != 3)
      return result;
  }
  v36 = *(_DWORD *)(v77 + 200);
  v37 = v82;
  v38 = *v82;
  if (!*v82 || (*(_DWORD *)(v38 + 28) & 0x7F) != 0x38)
  {
    v51 = *v32;
    if (v31 == 3)
    {
      if (v51 != 2)
        return result;
      goto LABEL_86;
    }
    if (v51 != 3
      || (v52 = *(_QWORD *)(v75 + 16), (v52 & 1) == 0) && (*(_BYTE *)((v52 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) == 0)
    {
LABEL_77:
      if (v33 && *v32 == 2)
      {
        v66 = *(_QWORD *)(v38 + 112);
        v67 = *(_QWORD *)(v66 + 80);
        v68 = (v67 & 0x4000000000000000) != 0 ? *(_QWORD *)(v66 + 16 * ((v67 >> 61) & 1) + 168) & 3 : v67 >> 63;
        if (v68 == 1)
        {
          *(_DWORD *)v77 = 0;
          v20 = 39;
          goto LABEL_8;
        }
      }
LABEL_86:
      v69 = v82[1];
      if (a9 | a10)
        v70 = v34;
      else
        v70 = 19;
      v83 = v70;
      v84 = v76;
      v85 = v36 > 1;
      v86 = v38;
      v87 = v69;
      v71 = sub_22EC51434(v77 + 8, (unint64_t)&v83);
      v72 = *(_QWORD *)(v77 + 8) + 40 * *(unsigned int *)(v77 + 16);
      v73 = *(_QWORD *)(v71 + 32);
      result = *(__n128 *)(v71 + 16);
      *(_OWORD *)v72 = *(_OWORD *)v71;
      *(__n128 *)(v72 + 16) = result;
      *(_QWORD *)(v72 + 32) = v73;
      ++*(_DWORD *)(v77 + 16);
      return result;
    }
    v53 = *(_WORD *)(v38 + 80) & 0x7F;
    v54 = -40;
    if (v53 > 0x46)
    {
      if (v53 == 83)
        goto LABEL_71;
      if (v53 == 71)
      {
        v54 = -56;
        goto LABEL_71;
      }
      if (v53 != 81)
      {
LABEL_66:
        v60 = v53 - 52;
        v61 = v53 - 33 >= 5;
        v62 = -48;
        if (!v61)
          v62 = -64;
        if (v60 >= 6)
          v54 = v62;
        else
          v54 = -72;
      }
    }
    else
    {
      if (v53 > 0x18)
        goto LABEL_65;
      if (v53 == 16)
      {
LABEL_52:
        v54 = -48;
        goto LABEL_71;
      }
      if (((1 << v53) & 0x1066) == 0)
      {
        if (v53 == 24)
          goto LABEL_52;
LABEL_65:
        if (v53 == 70)
        {
          v54 = -64;
          goto LABEL_71;
        }
        goto LABEL_66;
      }
    }
LABEL_71:
    v63 = *(_QWORD *)(v38 + 72 + v54 + 16);
    v64 = (_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF8);
    if ((v63 & 4) != 0)
      v64 = (_QWORD *)*v64;
    if (v64)
      v65 = (unint64_t)(v64 - 8);
    else
      v65 = 0;
    if (!sub_22EC4FB1C(v65))
    {
      if (!sub_22EC4F580(v74, v77, v75))
      {
        *(_DWORD *)v77 = 0;
        v20 = 33;
        goto LABEL_8;
      }
      return result;
    }
    goto LABEL_77;
  }
  v39 = *(_QWORD *)(*(_QWORD *)(v38 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v39)
    v40 = *(unsigned __int8 *)(v39 + 16) - 27 > 0xFFFFFFFD;
  else
    v40 = 0;
  if (!v40)
  {
    v39 = sub_22F10CF48(v39);
    v37 = v82;
  }
  v41 = *(_QWORD *)(v39 + 24);
  v42 = v37[1];
  v83 = 8;
  v84 = v41;
  v85 = v36 > 1;
  v86 = v38;
  v87 = v42;
  v43 = sub_22EC51434(v77 + 8, (unint64_t)&v83);
  v44 = *(_QWORD *)(v77 + 8) + 40 * *(unsigned int *)(v77 + 16);
  v45 = *(_QWORD *)(v43 + 32);
  result = *(__n128 *)(v43 + 16);
  *(_OWORD *)v44 = *(_OWORD *)v43;
  *(__n128 *)(v44 + 16) = result;
  *(_QWORD *)(v44 + 32) = v45;
  ++*(_DWORD *)(v77 + 16);
  if ((*(_QWORD *)((v41 & 0xFFFFFFFFFFFFFFF0) + 8) | v41 & 7) != (*(_QWORD *)((a6 & 0xFFFFFFFFFFFFFFF0) + 8) | a6 & 7))
  {
    v83 = 9;
    v84 = a6;
    v46 = sub_22EC51434(v77 + 8, (unint64_t)&v83);
    v47 = *(_QWORD *)(v77 + 8) + 40 * *(unsigned int *)(v77 + 16);
    v48 = *(_QWORD *)(v46 + 32);
    result = *(__n128 *)(v46 + 16);
    *(_OWORD *)v47 = *(_OWORD *)v46;
    *(__n128 *)(v47 + 16) = result;
    *(_QWORD *)(v47 + 32) = v48;
    ++*(_DWORD *)(v77 + 16);
  }
  if (v33)
  {
    v49 = *(_QWORD *)(v75 + 16);
    v50 = v77;
LABEL_42:
    result.n128_u64[0] = sub_22F335D6C(v50, v49, v18).n128_u64[0];
  }
  return result;
}

__n128 sub_22EC3C758(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  BOOL v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  int v45;
  __n128 result;
  uint64_t v47;
  unint64_t v48;
  int v49;
  unsigned int v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  void *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  __int128 v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  __int128 v83;
  void *v84[2];
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88[2];

  v8 = a4;
  v88[0] = a4;
  v79 = *(_QWORD *)(a4 + 8);
  v12 = a5 + 192;
  sub_22ECF9840(a5 + 192, 2);
  v13 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v13 & 8) != 0)
    v14 = *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 0x18);
  else
    v14 = 0;
  *(_DWORD *)(a5 + 6824) = v14 >> 11;
  v15 = *a3;
  v16 = a2;
  if ((*(_BYTE *)(a1[9] + 1) & 8) == 0)
    v16 = sub_22EF5DEB0(a1[11], a2);
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v80 = a2;
  v76 = a2 & 0xFFFFFFFFFFFFFFF0;
  v77 = a3;
  v75 = a6;
  v78 = v16;
  if (v17)
  {
    if (*(_BYTE *)(v17 + 16) == 45)
    {
      v18 = sub_22F114198(*(_QWORD *)(v17 + 24));
      if ((sub_22EE8B180(a1, *((unsigned int *)a3 + 1)) & 1) == 0)
      {
        v19 = sub_22EC66BE4((uint64_t)a1, v18);
        if (v19)
        {
          while (1)
          {
            v20 = (unint64_t *)(v19 & 0xFFFFFFFFFFFFFFF8);
            v21 = (v19 & 0xFFFFFFFFFFFFFFF8) == 0 || (v19 & 4) == 0;
            v22 = v19 & 0xFFFFFFFFFFFFFFF8;
            if (!v21)
              v22 = *v20;
            v23 = *(_DWORD *)(v22 + 28);
            v24 = v23 & 0x7F;
            if (v24 <= 0x2F)
            {
              if (((1 << (v23 & 0x7F)) & 0xC00000060000) != 0)
              {
                v25 = sub_22EFBAEA4(v22);
                v23 = *(_DWORD *)(v25 + 28);
                LODWORD(v24) = v23 & 0x7F;
              }
              else
              {
                v25 = v22;
                if (v24 == 13)
                  goto LABEL_29;
              }
            }
            else
            {
              v25 = v22;
            }
            if ((_DWORD)v24 == 29)
              v26 = (_QWORD *)v25;
            else
              v26 = 0;
            if (v26)
            {
              v25 = v26[6];
              LODWORD(v24) = *(_DWORD *)(v25 + 28) & 0x7F;
            }
            if ((_DWORD)v24 != 55 || (*(_BYTE *)(v25 + 28) & 0x80) != 0 || !sub_22EFD8400(v25, 1))
              goto LABEL_29;
            v27 = (v23 >> 13) & 3 | v22;
            if (v26)
              break;
            sub_22ED0475C((uint64_t)a1, v25, v27, v78, (uint64_t)v88, 1uLL, v12, 1, 0, v15 != 2, 0, 0, 0, 0, 0);
            if (v21)
            {
LABEL_35:
              v8 = v88[0];
              a2 = v80;
              goto LABEL_36;
            }
LABEL_30:
            v19 = v20[1];
            if (!v19)
              goto LABEL_35;
          }
          sub_22ED07F48(a1, v26, v27, v78, 0, (uint64_t)v88, 1uLL, v12, 1u, 0, v15 != 2, 0, 0);
LABEL_29:
          if (v21)
            goto LABEL_35;
          goto LABEL_30;
        }
      }
    }
  }
LABEL_36:
  sub_22F0D5A50(v8);
  v29 = v28;
  v30 = sub_22EF5DEB0(a1[11], a2);
  v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v79 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v32 = v29;
  if (v31)
  {
    if (*(_BYTE *)(v31 + 16) == 45)
    {
      v33 = v30;
      if ((sub_22EE8B180(a1, v29) & 1) == 0)
      {
        v34 = sub_22F114198(*(_QWORD *)(v31 + 24));
        v35 = sub_22EFD4DF4(v34);
        if ((uint64_t *)v35 != v36)
        {
          v37 = (uint64_t *)v35;
          v38 = v36;
          do
          {
            v39 = *v37;
            v40 = *v37 & 0xFFFFFFFFFFFFFFFCLL;
            v41 = *(_QWORD *)(v40 + 16);
            v42 = (_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF8);
            if ((v41 & 4) != 0)
              v42 = (_QWORD *)*v42;
            if (v42)
              v43 = (uint64_t)(v42 - 8);
            else
              v43 = 0;
            v44 = *(_DWORD *)(v40 + 28);
            if ((v44 & 0x7E) == 0x2E)
            {
              v40 = *(_QWORD *)(v40 + 64);
              v44 = *(_DWORD *)(v40 + 28);
            }
            if ((v44 & 0x7F) == 0x1D)
              sub_22ED096FC((uint64_t)a1, (uint64_t *)v40, v39, v43, v88[0], v33, v12, v15 != 2, v15 != 2, 1);
            else
              sub_22ED08B24((uint64_t)a1, (uint64_t *)v40, v39, v43, v88[0], v80, v12, v15 != 2, v15 != 2, 0, 1);
            ++v37;
          }
          while (v37 != v38);
        }
      }
    }
  }
  v87 = 0;
  v45 = sub_22ED03FCC(v12, a1, v32, &v87);
  if (!v45 || (*(_DWORD *)a5 = 0, *(_DWORD *)(a5 + 184) = 30, *(_DWORD *)(a5 + 188) = v45, v45 == 3) && *v77 == 2)
  {
    v47 = v87;
    v48 = *(_QWORD *)v87;
    v49 = *(_DWORD *)(*(_QWORD *)v87 + 28);
    *(_DWORD *)(*(_QWORD *)v87 + 28) = v49 | 0x800;
    v50 = *(_DWORD *)(a5 + 200);
    if ((v49 & 0x7F) == 0x37)
    {
      v51 = *(void **)(v47 + 8);
      v52 = a1[11];
      v53 = *(_QWORD *)(v78 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v53 + 8) & 0xF) != 0)
        v53 = (unint64_t)sub_22F10D2BC(v78);
      v54 = *(_QWORD *)((v78 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v54 & 8) != 0)
        v55 = *(_DWORD *)((v54 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
      else
        v55 = 0;
      v81 = 8;
      v82 = sub_22EF5DD84(v52, v53 & 0xFFFFFFFFFFFFFFF0, v55);
      LOBYTE(v83) = v50 > 1;
      *((_QWORD *)&v83 + 1) = v48;
      v84[0] = v51;
      v68 = sub_22EC51434(a5 + 8, (unint64_t)&v81);
      v69 = *(_QWORD *)(a5 + 8) + 40 * *(unsigned int *)(a5 + 16);
      v70 = *(_QWORD *)(v68 + 32);
      result = *(__n128 *)(v68 + 16);
      *(_OWORD *)v69 = *(_OWORD *)v68;
      *(__n128 *)(v69 + 16) = result;
      *(_QWORD *)(v69 + 32) = v70;
      ++*(_DWORD *)(a5 + 16);
      if ((*(_BYTE *)(a1[9] + 1) & 8) == 0)
      {
        v71 = 7;
LABEL_80:
        v81 = v71;
        v82 = v80;
        v66 = a5 + 8;
        goto LABEL_81;
      }
      if ((v80 & 0xF) != 0 || (*(_BYTE *)(v76 + 8) & 0xF) != 0)
      {
        v71 = 9;
        goto LABEL_80;
      }
    }
    else
    {
      v56 = sub_22E8BBA74(v48);
      v57 = *(void **)(v87 + 8);
      v81 = 8;
      v82 = v56;
      LOBYTE(v83) = v50 > 1;
      *((_QWORD *)&v83 + 1) = v48;
      v84[0] = v57;
      v58 = sub_22EC51434(a5 + 8, (unint64_t)&v81);
      v59 = *(_QWORD *)(a5 + 8) + 40 * *(unsigned int *)(a5 + 16);
      v60 = *(_QWORD *)(v58 + 32);
      result = *(__n128 *)(v58 + 16);
      *(_OWORD *)v59 = *(_OWORD *)v58;
      *(__n128 *)(v59 + 16) = result;
      *(_QWORD *)(v59 + 32) = v60;
      ++*(_DWORD *)(a5 + 16);
      v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v61 && *(_BYTE *)(v61 + 16) == 45)
      {
        if ((*(_BYTE *)(a1[9] + 1) & 8) == 0)
          goto LABEL_68;
        v62 = *(_QWORD *)(*(_QWORD *)(v48 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (!v62 || *(unsigned __int8 *)(v62 + 16) - 27 <= 0xFFFFFFFD)
          v62 = sub_22F10CF48(v62);
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v62 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) & 0xFE) == 0x28
          || (v63 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFFFF0) + 8),
              v64 = *(_QWORD *)(v76 + 8),
              *(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(v64 & 0xFFFFFFFFFFFFFFF0))
          || (v64 & 8) != 0 && (*(_DWORD *)((v64 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0)
        {
LABEL_68:
          v65 = 7;
        }
        else
        {
          if ((v63 | v56 & 7) == (v64 | v80 & 7))
            return result;
          v65 = 9;
        }
        v81 = v65;
        v82 = v80;
        v66 = a5 + 8;
LABEL_81:
        v72 = sub_22EC51434(v66, (unint64_t)&v81);
        v73 = *(_QWORD *)(a5 + 8) + 40 * *(unsigned int *)(a5 + 16);
        v74 = *(_QWORD *)(v72 + 32);
        result = *(__n128 *)(v72 + 16);
        *(_OWORD *)v73 = *(_OWORD *)v72;
        *(__n128 *)(v73 + 16) = result;
        *(_QWORD *)(v73 + 32) = v74;
        ++*(_DWORD *)(a5 + 16);
        return result;
      }
      if ((*(_DWORD *)(v87 + 112) & 0xFFFFFF) != 0)
      {
        v82 = 0;
        v81 = 0;
        v67 = *(_OWORD *)(v87 + 128);
        v83 = *(_OWORD *)(v87 + 112);
        *(_OWORD *)v84 = v67;
        v85 = *(_OWORD *)(v87 + 144);
        v86 = *(_QWORD *)(v87 + 160);
        result.n128_u64[0] = sub_22EC3936C(a5, (uint64_t)&v81, v80, v75).n128_u64[0];
        if ((v81 & 0x7FFFFFFF) == 2 && v84[0] != &v85)
          free(v84[0]);
      }
    }
  }
  return result;
}

uint64_t sub_22EC3CE2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = 40 * v2;
    do
    {
      sub_22EC391B4(v3);
      v3 += 40;
      v4 -= 40;
    }
    while (v4);
  }
  sub_22EC4FB8C((char **)(a1 + 6872));
  if (*(char *)(a1 + 6863) < 0)
    operator delete(*(void **)(a1 + 6840));
  sub_22E9DC79C((uint64_t *)(a1 + 192));
  v5 = *(void **)(a1 + 8);
  if (v5 != (void *)(a1 + 24))
    free(v5);
  return a1;
}

unsigned int *sub_22EC3CEBC(unsigned int *result, unsigned int *a2)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  _BYTE v10[96];
  uint64_t v11;
  _BYTE v12[96];

  v3 = *a2;
  if ((int)*a2 <= 17)
  {
    if (v3 != 1)
    {
      if (v3 != 2)
        return result;
      v4 = *((_QWORD *)a2 + 4);
      if (!v4)
        return result;
      v6 = *((_QWORD *)a2 + 4);
LABEL_15:
      if (!*(_DWORD *)(v6 + 24))
        return result;
      v7 = v4;
      if (v3 > 5)
      {
        while (2)
        {
          if (v3 == 6)
          {
LABEL_19:
            if (*(_QWORD *)(v7 + 40))
            {
              if (v3 > 5)
              {
                if (v3 == 6)
                  goto LABEL_23;
              }
              else if (v3 != 1)
              {
LABEL_23:
                result = (unsigned int *)sub_22E8FCA40(result, *(_DWORD *)(v4 + 24), 0x1759u, 0, (uint64_t)v12);
                v4 = *a2;
                switch((int)v4)
                {
                  case 0:
                  case 2:
                  case 6:
                    goto LABEL_35;
                  case 1:
                    break;
                  case 3:
                  case 4:
                  case 5:
                    __break(1u);
                    continue;
                  default:
                    if ((_DWORD)v4 != 19)
                      goto LABEL_35;
                    break;
                }
                v9 = *((_QWORD *)a2 + 4) & 0xFFFFFFFFFFFFFFF8;
                goto LABEL_36;
              }
              v4 &= 0xFFFFFFFFFFFFFFF8;
              goto LABEL_23;
            }
            if (v3 > 5)
            {
              if (v3 == 6)
                goto LABEL_30;
            }
            else if (v3 != 1)
            {
LABEL_30:
              sub_22E8FCA40(result, *(_DWORD *)(v4 + 24), 0x1757u, 0, (uint64_t)v10);
              v8 = (unsigned int *)v10;
              return sub_22E903BEC(v8);
            }
            v4 &= 0xFFFFFFFFFFFFFFF8;
            goto LABEL_30;
          }
          break;
        }
      }
      else if (v3 != 1)
      {
        goto LABEL_19;
      }
      v7 = v4 & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_19;
    }
LABEL_9:
    v4 = *((_QWORD *)a2 + 4);
    if (v4 < 8)
      return result;
    v6 = v4 & 0xFFFFFFFFFFFFFFF8;
    goto LABEL_15;
  }
  if (v3 == 19)
    goto LABEL_9;
  if (v3 == 18)
  {
    v5 = *((_QWORD *)a2 + 4);
    if (v5)
    {
      sub_22E8FCA40(result, *(_DWORD *)(v5 + 24), 0x16B6u, 0, (uint64_t)v12);
LABEL_35:
      v9 = *((_QWORD *)a2 + 4);
LABEL_36:
      v11 = *(_QWORD *)(v9 + 40);
      sub_22E894538((uint64_t)v12, &v11);
      v8 = (unsigned int *)v12;
      return sub_22E903BEC(v8);
    }
  }
  return result;
}

void sub_22EC3D074(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

void sub_22EC3D0C8()
{
  JUMPOUT(0x22EC3D0B4);
}

void sub_22EC3D0D0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  uint64_t v46;
  unsigned __int8 *v47;
  unint64_t v48;
  int v49;
  _QWORD v50[5];
  unint64_t v51;
  int v52;
  uint64_t v53;
  void *v54[2];
  _BYTE v55[248];

  if (*(_QWORD *)(v46 + 8))
    JUMPOUT(0x22EC3D0B4);
  v48 = a3 & 0xFFFFFFFFFFFFFFF8 | 5;
  v51 = v48 & 0xFFFFFFFFFFFFFFF8;
  v52 = v48 & 5;
  if ((v48 & 5) != 0)
  {
    v50[0] = &v52;
    v50[1] = a1;
    v50[2] = &v51;
    v50[3] = a2;
    v50[4] = &v53;
    v49 = sub_22F1CF68C(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 32), 0x1942u, 0, *(_QWORD *)(a1 + 104));
    v54[0] = v55;
    v54[1] = (void *)0x800000000;
    if ((v47[1] & 3) != 0)
      sub_22EC3D21C((uint64_t)v54, v47, 0, (uint64_t (*)(uint64_t, uint64_t, unsigned __int8 *, __n128))sub_22EC515B8, (uint64_t)v50, v49 != 1);
    else
      sub_22EC3D6C0((uint64_t)v54, (unint64_t)v47, (uint64_t (*)(uint64_t, uint64_t, unsigned __int8 *, __n128))sub_22EC515B8, (uint64_t)v50, 0, v49 != 1);
    if (v54[0] != v55)
      free(v54[0]);
  }
}

_DWORD *sub_22EC3D21C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t (*a4)(uint64_t a1, uint64_t a2, unsigned __int8 *a3, __n128 a4), uint64_t a5, uint64_t a6)
{
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  __n128 v15;
  int v16;
  unint64_t *v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  int v48;

  v47 = a1;
  v48 = *(_DWORD *)(a1 + 8);
  do
  {
    v12 = a2;
    v13 = *a2;
    if ((v13 & 0xFE) == 0xAC)
    {
      a2 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
      v13 = *a2;
    }
    if (v13 == 180 && sub_22EFFD7E8((uint64_t)a2))
      a2 = (unsigned __int8 *)**((_QWORD **)a2 + 2);
    v14 = sub_22EC4FC24(a2);
    a2 = v14;
    v16 = *v14;
    if ((v16 + 102) >= 0xF5u)
    {
      if ((*(_BYTE *)(*((_QWORD *)v14 + 2) + 1) & 3) != 0)
        a2 = (unsigned __int8 *)*((_QWORD *)v14 + 2);
      v16 = *a2;
    }
    if (v16 != 107)
      goto LABEL_27;
    v17 = (unint64_t *)(a2 + 24);
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v19 = *(_DWORD *)(v18 + 16);
    if (v18)
      v20 = v19 == 11;
    else
      v20 = 0;
    if (v20)
    {
      if (((*(_DWORD *)(v18 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
        goto LABEL_24;
      goto LABEL_23;
    }
    if (v18 && v19 == 44)
    {
      v21 = sub_22F114198(*(_QWORD *)(v18 + 24));
      if ((*(_BYTE *)(v21 + 74) & 1) == 0 && *(_QWORD *)(v21 + 128) <= 7uLL
        || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v18 + 24)) + 72) & 0x8000000000) != 0)
      {
        goto LABEL_24;
      }
LABEL_23:
      v17 = (unint64_t *)(a2 + 16);
      goto LABEL_24;
    }
    if (v19 == 9)
      goto LABEL_23;
LABEL_24:
    v22 = *v17;
    if (*(unsigned __int8 *)*v17 != 153 || (*(_DWORD *)v22 & 0x1FC0000) != 0x300000)
      goto LABEL_71;
    a2 = *(unsigned __int8 **)(v22 + 16);
    v16 = *a2;
LABEL_27:
    if (v16 == 121)
    {
      v23 = *((_QWORD *)a2 + 2);
      v45.n128_u32[0] = 0;
      v45.n128_u64[1] = (unint64_t)a2;
      v46 = v23;
      v15 = sub_22E467108(a1, &v45);
      v24 = *((_QWORD *)a2 + 2);
      v25 = *(_QWORD *)(v24 + 72) & 3;
      if ((_DWORD)v25)
        v26 = (_DWORD)v25 == 3;
      else
        v26 = 1;
      if (v26)
      {
        a2 = 0;
      }
      else
      {
        a2 = (unsigned __int8 *)(*(_QWORD *)(v24 + 72) & 0xFFFFFFFFFFFFFFFCLL);
        if ((*(_BYTE *)(v24 + 68) & 1) != 0)
          a2 = *(unsigned __int8 **)a2;
      }
    }
  }
  while (a2 != v12);
  v27 = *v12;
  if (v27 == 186)
  {
    if (((unsigned int (*)(uint64_t, uint64_t, unsigned __int8 *, uint64_t, __n128))a4)(a5, a1, v12, a3, v15))
    {
      v28 = *((_QWORD *)v12 + 2);
      v29 = v28 & 0xFFFFFFFFFFFFFFF8;
      if ((v28 & 4) != 0)
        v29 = *(_QWORD *)(v29 + 40);
      sub_22EC3D6C0(a1, v29, a4, a5, 1, a6);
    }
    v27 = *v12;
  }
  if ((v27 + 118) <= 4u)
  {
    if ((_DWORD)a6)
      sub_22EC4FCEC(a1, v12, (uint64_t)a4, a5);
    sub_22EC504FC(a1, v12, (uint64_t)a4, a5);
    return sub_22EC50A30(&v47);
  }
  if (v27 > 190)
  {
    if (v27 == 191 || v27 == 233 && (*(_DWORD *)v12 & 0x7C0000) == 0x140000)
    {
      v22 = *((_QWORD *)v12 + 2);
LABEL_71:
      sub_22EC3D6C0(a1, v22, a4, a5, 1, a6);
    }
  }
  else if ((v27 - 102) >= 2)
  {
    if (v27 == 161)
    {
      v41 = *((_QWORD *)v12 + 2);
      if (v41)
      {
        if ((*(_DWORD *)(v41 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9
          && sub_22E3CB5E0(*((_QWORD *)v12 + 2))
          && (v12[2] & 0x40) == 0)
        {
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16) & 0xFE) != 0x28)
          {
            ((void (*)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))a4)(a5, a1, v12, a3);
            return sub_22EC50A30(&v47);
          }
          if ((*(_DWORD *)(*((_QWORD *)v12 + 2) + 28) & 0x7F) != 0x40 && sub_22EFBC5B4(v41))
          {
            v42 = *(unsigned int *)(a1 + 8);
            if (!(_DWORD)v42)
            {
LABEL_86:
              v45.n128_u32[0] = 2;
              v45.n128_u64[1] = (unint64_t)v12;
              v46 = v41;
              sub_22E467108(a1, &v45);
              v35 = sub_22EFBC5B4(v41);
              v38 = a1;
              v39 = 0;
              goto LABEL_66;
            }
            v43 = 24 * v42;
            v44 = (_QWORD *)(*(_QWORD *)a1 + 16);
            while (*((_DWORD *)v44 - 4) != 2 || *v44 != v41)
            {
              v44 += 3;
              v43 -= 24;
              if (!v43)
                goto LABEL_86;
            }
          }
        }
      }
    }
  }
  else
  {
    v30 = 40;
    if (v27 == 103)
      v30 = 32;
    v31 = *(_QWORD *)&v12[v30];
    v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v32)
      v33 = (*(_DWORD *)(v32 + 16) & 0xFF800FF) == 86507531;
    else
      v33 = 0;
    if (!v33)
    {
      sub_22EC3D21C(a1, v31, a3, a4, a5, a6, v15);
      v27 = *v12;
    }
    v20 = v27 == 103;
    v34 = 48;
    if (v20)
      v34 = 40;
    v35 = *(_QWORD *)&v12[v34];
    v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v36)
      v37 = (*(_DWORD *)(v36 + 16) & 0xFF800FF) == 86507531;
    else
      v37 = 0;
    if (!v37)
    {
      v38 = a1;
      v39 = a3;
LABEL_66:
      sub_22EC3D21C(v38, v35, v39, a4, a5, a6, v15);
    }
  }
  return sub_22EC50A30(&v47);
}

_DWORD *sub_22EC3D6C0(uint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t a1, uint64_t a2, unsigned __int8 *a3, __n128 a4), uint64_t a4, int a5, unsigned __int8 a6)
{
  unsigned __int8 *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned __int8 *v15;
  __n128 v16;
  uint64_t v17;
  unsigned __int8 **v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  unsigned __int8 **v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  __n128 v31;
  uint64_t (*v32)(uint64_t, uint64_t, unsigned __int8 *, __n128);
  uint64_t v33;
  unint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, unsigned __int8 *, __n128);
  __n128 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t, unsigned __int8 *, __n128);
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v62;
  _QWORD *v63;
  unint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  __n128 v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  __n128 v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  __n128 v75;
  _QWORD *v76;
  uint64_t v77;
  int v78;
  unsigned __int8 v79;
  uint64_t (*v80)(uint64_t, uint64_t, unsigned __int8 *, __n128);
  __n128 *v81;

  v80 = a3;
  v81 = (__n128 *)a4;
  v79 = a6;
  v77 = a1;
  v78 = *(_DWORD *)(a1 + 8);
  while (2)
  {
    v9 = (unsigned __int8 *)a2;
    v10 = a2;
    if (*(_BYTE *)a2 == 121)
    {
      v11 = *(_QWORD **)(a2 + 16);
      v75.n128_u32[0] = 0;
      v75.n128_u64[1] = a2;
      v76 = v11;
      sub_22E467108(a1, &v75);
      v12 = *(_QWORD *)(a2 + 16);
      v13 = *(_QWORD *)(v12 + 72) & 3;
      if ((_DWORD)v13)
        v14 = (_DWORD)v13 == 3;
      else
        v14 = 1;
      if (v14)
      {
        v10 = 0;
      }
      else
      {
        v10 = *(_QWORD *)(v12 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_BYTE *)(v12 + 68) & 1) != 0)
          v10 = *(_QWORD *)v10;
      }
    }
    if ((*(_BYTE *)v10 & 0xFE) == 0xAC)
      v10 = *(_QWORD *)(v10 + 16);
    v15 = sub_22EC4FC24((unsigned __int8 *)v10);
    if (*v15 == 116)
      v15 = (unsigned __int8 *)*((_QWORD *)v15 + 3);
    do
    {
      a2 = (unint64_t)v15;
      LODWORD(v17) = *v15;
      if (v17 > 0xD5)
      {
        if ((_DWORD)v17 == 233)
        {
          LODWORD(v17) = *(_DWORD *)v15;
          if ((*(_DWORD *)v15 & 0x7C0000) != 0x300000)
            break;
          v18 = (unsigned __int8 **)(v15 + 16);
        }
        else
        {
          if ((_DWORD)v17 != 214)
            break;
          v18 = (unsigned __int8 **)(v15 + 24);
        }
      }
      else if ((_DWORD)v17 == 155)
      {
        if ((**((_DWORD **)v15 + 2) & 0x18000) != 0)
          goto LABEL_34;
        v18 = (unsigned __int8 **)(v15 + 24);
        if (!v15[48])
          v18 = (unsigned __int8 **)(v15 + 32);
        LOBYTE(v17) = -101;
      }
      else
      {
        if ((_DWORD)v17 != 176)
          break;
        v17 = *((unsigned int *)v15 + 5);
        if ((_DWORD)v17 == -1)
          goto LABEL_34;
        v18 = (unsigned __int8 **)&v15[8 * v17 + 40];
        LOBYTE(v17) = -80;
      }
      v15 = *v18;
    }
    while (*v18 != (unsigned __int8 *)a2);
    if ((v17 + 102) >= 0xF5u)
    {
      v19 = (*(_DWORD *)a2 >> 18) & 0x7F;
      v20 = (v19 - 4);
      if (v20 <= 0x3E)
      {
        if (((1 << (v19 - 4)) & 0x40000380048F00BELL) != 0)
        {
LABEL_33:
          a2 = *(_QWORD *)(a2 + 16);
          goto LABEL_34;
        }
        if (v19 == 4)
        {
          v75.n128_u32[0] = 3;
          v75.n128_u64[1] = a2;
          v76 = 0;
          v16 = sub_22E467108(a1, &v75);
          v75.n128_u64[0] = (unint64_t)&v80;
          v75.n128_u64[1] = (unint64_t)&v79;
          v37 = v79;
          v35 = sub_22EC51014;
          v36 = &v75;
          v38 = a1;
          v34 = a2;
LABEL_116:
          v39 = 0;
          goto LABEL_61;
        }
        if (v20 == 8)
        {
          v75.n128_u32[0] = 1;
          v75.n128_u64[1] = a2;
          v76 = 0;
          v16 = sub_22E467108(a1, &v75);
          v34 = *(_QWORD *)(a2 + 16);
          goto LABEL_115;
        }
      }
      if (v19 != 1)
        return sub_22EC50A30(&v77);
      goto LABEL_33;
    }
LABEL_34:
    if (v9 != (unsigned __int8 *)a2)
      continue;
    break;
  }
  v21 = *v9;
  switch(v21)
  {
    case 132:
      v34 = *((_QWORD *)v9 + 2);
      v35 = v80;
      v36 = v81;
      v37 = v79;
      v38 = a1;
      v39 = 1;
LABEL_61:
      sub_22EC3D21C(v38, v34, v39, v35, v36, v37, v16);
      return sub_22EC50A30(&v77);
    case 180:
      if (!a5)
        return sub_22EC50A30(&v77);
      if (sub_22EFFD7E8((uint64_t)v9))
      {
        v40 = **((_QWORD **)v9 + 2);
        goto LABEL_111;
      }
      v48 = *(_QWORD *)(*((_QWORD *)v9 + 1) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
      {
        v49 = *((_QWORD *)v9 + 3) - *((_QWORD *)v9 + 2);
        if ((v49 & 0x7FFFFFFF8) != 0)
        {
          v50 = 0;
          v51 = (v49 >> 3);
          v52 = v80;
          v53 = (uint64_t)v81;
          v54 = v79;
          do
            sub_22EC3D6C0(a1, *(_QWORD *)(*((_QWORD *)v9 + 2) + 8 * v50++), v52, v53, 1, v54 != 0, v16);
          while (v51 != v50);
        }
        return sub_22EC50A30(&v77);
      }
      v56 = sub_22F10C2A4(v48);
      if (!v56)
        return sub_22EC50A30(&v77);
      v57 = v56;
      if ((*(_DWORD *)(v56 + 28) & 0x7Fu) - 35 > 2)
        return sub_22EC50A30(&v77);
      if ((*(_DWORD *)(v56 + 72) & 0xE000) != 0x4000
        || (v58 = *((_QWORD *)v9 + 7), (v58 & 2) == 0)
        || (v59 = v58 & 0xFFFFFFFFFFFFFFFCLL) == 0
        || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v59 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) & 0xFE) != 0x28)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v56 + 104) + 96), *(_QWORD *)(v56 + 104));
        if (*(_DWORD *)(*(_QWORD *)(v57 + 128) + 16))
        {
          v68 = 0;
          do
          {
            v69 = *((_QWORD *)v9 + 2);
            if (v68 >= ((unint64_t)(*((_QWORD *)v9 + 3) - v69) >> 3))
              break;
            sub_22EC3D6C0(a1, *(_QWORD *)(v69 + 8 * v68++), v80, v81, 1, v79, v67);
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v57 + 104) + 96), *(_QWORD *)(v57 + 104));
          }
          while (v68 < *(unsigned int *)(*(_QWORD *)(v57 + 128) + 16));
        }
        else
        {
          LODWORD(v68) = 0;
        }
        v70 = sub_22EFC3B90(v57);
        if (v70)
        {
          v68 = v68;
          v72 = *((_QWORD *)v9 + 2);
          if (v68 < (unint64_t)((unint64_t)(*((_QWORD *)v9 + 3) - v72) >> 3))
          {
            v73 = v70;
LABEL_140:
            if ((*(_BYTE *)(v73 + 68) & 1) == 0 || *(_QWORD *)(v73 + 40))
            {
              v74 = *(_QWORD *)(v72 + 8 * v68);
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v73 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                              + 16) & 0xFE) == 0x28)
                sub_22EC3D21C(a1, v74, 0, v80, v81, v79 != 0, v71);
              else
                sub_22EC3D6C0(a1, v74, v80, v81, 1, v79 != 0, v71);
              ++v68;
            }
            while (1)
            {
              v73 = *(_QWORD *)(v73 + 8) & 0xFFFFFFFFFFFFFFF8;
              if (!v73)
                break;
              if ((*(_DWORD *)(v73 + 28) & 0x7Fu) - 49 <= 2)
              {
                v72 = *((_QWORD *)v9 + 2);
                if (v68 < ((unint64_t)(*((_QWORD *)v9 + 3) - v72) >> 3))
                  goto LABEL_140;
                return sub_22EC50A30(&v77);
              }
            }
          }
        }
        return sub_22EC50A30(&v77);
      }
      v34 = **((_QWORD **)v9 + 2);
LABEL_115:
      v35 = v80;
      v36 = v81;
      v37 = v79;
      v38 = a1;
      goto LABEL_116;
    case 182:
      v62 = sub_22F3C64D0((uint64_t)v9);
      if (*((_WORD *)v9 + 2))
      {
        v63 = (_QWORD *)v62;
        v64 = (unint64_t *)(v9 + 32);
        v65 = 8 * *((unsigned __int16 *)v9 + 2);
        do
        {
          v66 = *v64;
          if (*v64)
          {
            if ((*v63 & 0xFFFFFFFFFFFFFFF8) != 0
              && (*(_DWORD *)((*v63 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu) - 60 <= 6)
            {
              v75.n128_u32[0] = 6;
              v75.n128_u64[1] = v66;
              v76 = v63;
              v16 = sub_22E467108(a1, &v75);
            }
            if ((*(_BYTE *)(v66 + 1) & 3) != 0)
              sub_22EC3D21C(a1, v66, 0, v80, v81, v79 != 0, v16);
            else
              sub_22EC3D6C0(a1, v66, v80, v81, 1, v79 != 0, v16);
            if ((*v63 & 0xFFFFFFFFFFFFFFF8) != 0
              && (*(_DWORD *)((*v63 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x7Fu) - 60 <= 6)
            {
              --*(_DWORD *)(a1 + 8);
            }
          }
          v63 += 2;
          ++v64;
          v65 -= 8;
        }
        while (v65);
      }
      break;
  }
  v22 = *v9;
  if ((v22 & 0xFE) == 0x76)
  {
    v23 = *((_QWORD *)v9 + 2);
    v75.n128_u32[0] = 0;
    v24 = sub_22EFD8088(v23, (int *)&v75);
    v22 = *v9;
    if (v24)
    {
      if (v22 == 119)
        v25 = v9;
      else
        v25 = 0;
      v26 = (unsigned __int8 **)(v25 + 48);
      if (v22 != 119)
        v26 = (unsigned __int8 **)(v9 + 40);
      v27 = *v26;
      if (*v27 == 186)
      {
        v28 = *((_QWORD *)v27 + 2);
        v29 = v28 & 0xFFFFFFFFFFFFFFF8;
        if ((v28 & 4) != 0)
          v29 = *(_QWORD *)(v29 + 40);
        v30 = (_QWORD *)*((_QWORD *)v9 + 2);
        v75.n128_u32[0] = 5;
        v75.n128_u64[1] = v29;
        v76 = v30;
        v31 = sub_22E467108(a1, &v75);
        sub_22EC3D6C0(a1, v29, v80, v81, 1, 0, v31);
        --*(_DWORD *)(a1 + 8);
        v22 = *v9;
      }
    }
  }
  if (v22 > 111)
  {
    if ((v22 - 112) > 0x1E)
    {
LABEL_100:
      if (v22 != 233 || (*(_DWORD *)v9 & 0x7C0000) != 0x100000 || **((unsigned __int8 **)v9 + 2) == 186)
        return sub_22EC50A30(&v77);
      v75.n128_u32[0] = 1;
      v75.n128_u64[1] = (unint64_t)v9;
      v76 = 0;
      v16 = sub_22E467108(a1, &v75);
      v34 = *((_QWORD *)v9 + 2);
      goto LABEL_115;
    }
    if (((1 << (v22 - 112)) & 0x7C0000C0) != 0)
    {
      v32 = v80;
      v33 = (uint64_t)v81;
      if (v79)
        sub_22EC4FCEC(a1, v9, (uint64_t)v80, (uint64_t)v81);
      sub_22EC504FC(a1, v9, (uint64_t)v32, v33);
      return sub_22EC50A30(&v77);
    }
    if (v22 != 112)
    {
      if (v22 == 114)
      {
        v55 = *((_QWORD *)v9 + 2);
        if (!*(_DWORD *)(v55 + 112) && (*(_BYTE *)(v55 + 49) & 0x40) == 0)
          return sub_22EC50A30(&v77);
LABEL_99:
        ((void (*)(__n128 *, uint64_t, unsigned __int8 *, _QWORD))v80)(v81, a1, v9, 0);
        return sub_22EC50A30(&v77);
      }
      goto LABEL_100;
    }
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) != 39
      || ((*(_DWORD *)v9 >> 18) & 0x3Fu) - 7 < 0xFFFFFFFE)
    {
      return sub_22EC50A30(&v77);
    }
    v40 = *((_QWORD *)v9 + 2);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) != 39)
    {
      v40 = *((_QWORD *)v9 + 3);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) != 39)
        return sub_22EC50A30(&v77);
    }
LABEL_111:
    sub_22EC3D6C0(a1, v40, v80, v81, 1, v79, v16);
    return sub_22EC50A30(&v77);
  }
  if ((v22 - 102) >= 2)
  {
    if (v22 != 104)
      return sub_22EC50A30(&v77);
    goto LABEL_99;
  }
  v41 = 40;
  if (v22 == 103)
    v41 = 32;
  v42 = *(_QWORD *)&v9[v41];
  v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v43)
    v44 = (*(_DWORD *)(v43 + 16) & 0xFF800FF) == 86507531;
  else
    v44 = 0;
  if (!v44)
  {
    sub_22EC3D6C0(a1, v42, v80, v81, 1, v79, v16);
    v22 = *v9;
  }
  v14 = v22 == 103;
  v45 = 48;
  if (v14)
    v45 = 40;
  v40 = *(_QWORD *)&v9[v45];
  v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v46)
    v47 = (*(_DWORD *)(v46 + 16) & 0xFF800FF) == 86507531;
  else
    v47 = 0;
  if (!v47)
    goto LABEL_111;
  return sub_22EC50A30(&v77);
}

uint64_t sub_22EC3DF80(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, unsigned __int8 **a5, uint64_t a6, unint64_t *a7, uint64_t a8)
{
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char v22;
  uint64_t v23;
  char v24;
  int v25;
  void *v26;
  size_t v27;
  size_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int8 *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  unint64_t v45;
  int v46;
  int v47;
  int v48;
  unint64_t *v49;
  uint64_t v50;
  uint64_t v52;
  unsigned int v53;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned __int8 *v68;
  uint64_t v69;
  int v70;
  char v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  char v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  int v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  int v104;
  int v105;
  unsigned int v106;
  int v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  unsigned __int8 *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned __int8 *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 *v123;
  __int128 v124;
  unint64_t *v125;
  uint64_t v126;
  int v127;
  unint64_t *v128;
  uint64_t v129;
  int v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t **v134;
  unint64_t v135;
  int v136;
  unint64_t *v137;
  int v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unsigned __int8 *v143;
  uint64_t v144;
  BOOL v145;
  unsigned __int8 *v146;
  unsigned __int8 *v147;
  unsigned int v148;
  uint64_t v149;
  unsigned __int8 *v150;
  uint64_t v151;
  int v152;
  unsigned __int8 *v153;
  unsigned __int8 *v154;
  unsigned __int8 *v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  int v163;
  unint64_t v164;
  uint64_t *v165;
  unint64_t v166;
  unint64_t v167;
  __n128 v168;
  int v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  _BOOL4 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int *v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned __int8 v189;
  uint64_t v190;
  unint64_t v191;
  int v192;
  uint64_t v193;
  BOOL v194;
  char v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  int v201;
  uint64_t v202;
  int v203;
  uint64_t **v204;
  __int128 *v205;
  uint64_t v206;
  unint64_t v207;
  unsigned int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  BOOL v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  _DWORD *v217;
  unint64_t v218;
  int v219;
  int v220;
  int v221;
  uint64_t v222;
  unsigned int v223;
  uint64_t (**v224)();
  int v225;
  _QWORD *v226;
  uint64_t v227;
  char *v228;
  unsigned int v229;
  uint64_t v230;
  _QWORD *v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  int v235;
  unint64_t v236;
  uint64_t v237;
  BOOL v238;
  int v239;
  unint64_t v240;
  uint64_t v242;
  unsigned int v243;
  BOOL v244;
  int v245;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  char v251;
  char v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  int v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int v267;
  int v268;
  uint64_t v270;
  uint64_t v271;
  int v272;
  BOOL v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  int v277;
  int v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  unsigned __int8 *v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int v285;
  uint64_t v286;
  int v287;
  _QWORD *v288;
  unsigned int v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unsigned int v296;
  char v297;
  int v298;
  uint64_t v299;
  unsigned int v300;
  uint64_t v301;
  int v302;
  uint64_t v303;
  unsigned int v304;
  BOOL v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  _QWORD *v310;
  uint64_t *v311;
  uint64_t v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  unsigned int v316;
  uint64_t v317;
  unsigned int v318;
  unsigned int v319;
  uint64_t v320;
  size_t v321;
  const void *v322;
  size_t v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  int v328;
  int v329;
  uint64_t v330;
  int v331;
  uint64_t v332;
  int v333;
  uint64_t v334;
  uint64_t v335;
  unsigned __int8 *v336;
  uint64_t v337;
  _QWORD *v338;
  int v339;
  unsigned __int8 *v340;
  uint64_t v341;
  unsigned __int8 *v342;
  uint64_t v343;
  unsigned __int8 **v344;
  int v345;
  BOOL v346;
  unsigned __int8 *v347;
  unsigned __int8 **v348;
  unsigned int *v349;
  uint64_t v350;
  unsigned __int8 *v351;
  unsigned __int8 *v352;
  uint64_t v353;
  unsigned __int8 *v354;
  uint64_t v355;
  BOOL v356;
  unsigned int v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  int v361;
  int v362;
  unsigned __int8 *v364;
  unsigned __int8 *v365;
  unsigned int v366;
  uint64_t v367;
  unsigned __int8 **v368;
  int v369;
  unsigned int v370;
  uint64_t v371;
  unsigned int v372;
  int v373;
  int i;
  int v375;
  int v376;
  uint64_t v377;
  int v378;
  int v379;
  int v380;
  char v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t *v386;
  uint64_t *v387;
  unsigned __int8 v389;
  unint64_t v390;
  char v391;
  uint64_t v392;
  char v393;
  void *__p;
  uint64_t v395;
  uint64_t v396;
  char v397;
  uint64_t v398[5];
  char v399;
  uint64_t v400;
  unint64_t v401;
  char v402;
  uint64_t v403;
  char v404;
  _BYTE *v405;
  _DWORD *v406;
  uint64_t v407;
  char v408;
  uint64_t v409;
  uint64_t v410;
  _QWORD *v411;
  uint64_t v412;
  _BYTE v413[32];
  __int128 v414;
  __int128 v415;
  __int128 v416;
  _BYTE v417[24];
  int v418;
  uint64_t v419;
  unint64_t v420;
  unsigned int v421;
  _BYTE v422[12];
  void *v423;
  uint64_t v424;
  uint64_t v425;
  char v426;
  uint64_t v427;

  v12 = a2;
  v427 = *MEMORY[0x24BDAC8D0];
  v14 = *(_DWORD *)a1;
  if (!*(_DWORD *)a1)
  {
    sub_22EC412B0((int *)a1, a2, (int *)a3, a4, a5, a6);
    return 1;
  }
  if (*(char *)(a1 + 6863) < 0)
    v15 = *(_QWORD *)(a1 + 6848);
  else
    v15 = *(unsigned __int8 *)(a1 + 6863);
  if (v15)
  {
    v17 = 3203;
    v18 = 1 << *(_DWORD *)a3;
    if ((v18 & 0x7FFB8) != 0)
    {
LABEL_9:
      v420 = *(_QWORD *)(a3 + 16);
      sub_22E8FCA40((_QWORD *)v12, *((_DWORD *)a4 + 1), v17, 0, (uint64_t)v417);
      v19 = sub_22E8901B8((uint64_t)v417, (uint64_t *)&v420);
      v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v420 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v20)
        v21 = *(_BYTE *)(v20 + 16) == 45;
      else
        v21 = 0;
      v22 = v21;
      LOBYTE(v401) = v22;
      v23 = sub_22E894E38(v19, (unsigned __int8 *)&v401);
      v24 = *(_BYTE *)(a1 + 6863);
      v25 = v24;
      if (v24 >= 0)
        v26 = (void *)(a1 + 6840);
      else
        v26 = *(void **)(a1 + 6840);
      v27 = v24 & 0x7F;
      if (v25 >= 0)
        v28 = v27;
      else
        v28 = *(_QWORD *)(a1 + 6848);
      sub_22E729148(v26, v28, *(_DWORD *)(a1 + 6864), 0, (uint64_t)&v414);
      sub_22E890748(v23, &v414);
      if (SHIBYTE(v416) < 0)
        operator delete(*((void **)&v415 + 1));
      sub_22E903BEC((unsigned int *)v417);
      v14 = *(_DWORD *)a1;
      goto LABEL_24;
    }
    if ((v18 & 0x100045) != 0)
    {
      v41 = *(_QWORD *)(a3 + 32);
      if (!v41)
        goto LABEL_9;
    }
    else
    {
      v41 = *(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFF8;
      if (!v41)
        goto LABEL_9;
    }
    if ((**(_BYTE **)(a2 + 72) & 0x10) != 0)
    {
      if (sub_22E46B3EC(v41))
        v17 = 5209;
      else
        v17 = 3203;
    }
    goto LABEL_9;
  }
LABEL_24:
  if (v14 == 1)
  {
    if (a7)
    {
      v29 = *(_QWORD *)(a3 + 16);
      if ((*(_BYTE *)(*(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0 && a6 == 1)
      {
        v30 = sub_22EF5C728(*(_QWORD *)(v12 + 88), v29);
        if (v30)
        {
          if (*(_DWORD *)(v30 + 16) == 4 && **a5 == 180)
          {
            v31 = 0;
            v32 = 1 << *(_DWORD *)a3;
            v33 = 0;
            if ((v32 & 0x7FFB8) == 0)
            {
              if ((v32 & 0x100045) != 0)
                v34 = *(_QWORD *)(a3 + 32);
              else
                v34 = *(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFF8;
              if (!v34 || (*(_DWORD *)(v34 + 28) & 0x7Fu) - 49 > 0x11)
                goto LABEL_655;
              v358 = *(_QWORD *)(v34 + 56);
              v359 = v358 & 0xFFFFFFFFFFFFFFF8;
              if ((v358 & 4) != 0)
                v359 = *(_QWORD *)(v359 + 32);
              if (v359 && (v360 = *(_QWORD *)v359, (*(_QWORD *)v359 & 0xFLL) == 0))
              {
                v31 = 0;
                if (v360)
                {
                  v375 = *(unsigned __int8 *)(*(_QWORD *)(v360 & 0xFFFFFFFFFFFFFFF0) + 16);
                  v33 = 0;
                  if (v375 == 4)
                  {
                    v31 = *(unsigned int *)(v359 + 8);
                    v33 = (unint64_t)*(unsigned int *)(v359 + 12) << 32;
                  }
                }
                else
                {
                  v33 = 0;
                }
              }
              else
              {
LABEL_655:
                v31 = 0;
                v33 = 0;
              }
            }
            *a7 = sub_22EF6042C(*(_QWORD *)(v12 + 88), *(_QWORD *)(v30 + 32), 0, (*(_DWORD *)(v30 + 16) >> 22) & 7, (*(_DWORD *)(v30 + 16) >> 19) & 7, v33 | v31);
          }
        }
      }
    }
    if (*a4 > 0x2FFu || *a4)
      return (uint64_t)*a5;
    v362 = *((_DWORD *)a4 + 2);
    v361 = *((_DWORD *)a4 + 3);
    v16 = sub_22E3CD3D4(*(_QWORD *)(v12 + 88) + 2032, 8 * a6 + 24, 3);
    sub_22F002D50(v16, v362, (uint64_t *)a5, a6, v361);
    return v16;
  }
  if (!*(_DWORD *)(a1 + 16))
    return 0;
  if ((*(_BYTE *)(*(_QWORD *)(v12 + 72) + 1) & 2) != 0
    && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) & 0xFE) == 0x28
    && a6 == 1)
  {
    v36 = *a5;
    if (**a5 == 180 && (*(_DWORD *)a3 > 0x13u || ((1 << *(_DWORD *)a3) & 0x80006) == 0))
    {
      sub_22F0D5A50((uint64_t)*a5);
      sub_22E8FCA40((_QWORD *)v12, v37, 0x1931u, 0, (uint64_t)v417);
      sub_22F0D4E74((uint64_t)v36);
      *(_QWORD *)&v414 = v38;
      sub_22E8906A0((uint64_t)v417, (uint64_t *)&v414);
      sub_22E903BEC((unsigned int *)v417);
    }
  }
  v386 = (uint64_t *)(a3 + 16);
  v384 = *(_QWORD *)(a3 + 16);
  v39 = *(_QWORD *)((v384 & 0xFFFFFFFFFFFFFFF0) + 8);
  v40 = (v39 & 8) != 0 && (*(_QWORD *)((v39 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) == 2048;
  v42 = *(_QWORD *)(v384 & 0xFFFFFFFFFFFFFFF0);
  if (*(_DWORD *)(*(_QWORD *)(v12 + 72) + 56) >= 0xC8u)
  {
    v43 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 6 || v40;
    if (!v43 && !*(_DWORD *)a3 && a6)
    {
      sub_22F0D5A50((uint64_t)*a5);
      sub_22E8FCA40((_QWORD *)v12, v44, 0x111Bu, 0, (uint64_t)v417);
      LODWORD(v420) = 1;
      v12 = sub_22E8900C4((uint64_t)v417, (int *)&v420);
      v46 = *(_DWORD *)a3;
      switch(*(_DWORD *)a3)
      {
        case 0:
        case 2:
        case 6:
          goto LABEL_94;
        case 1:
          goto LABEL_93;
        case 3:
        case 4:
        case 5:
          goto LABEL_99;
        default:
          if (v46 == 19)
LABEL_93:
            v63 = *(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFF8;
          else
LABEL_94:
            v63 = *(_QWORD *)(a3 + 32);
          v64 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v63 + 16))(v63);
          sub_22F0D60E4((uint64_t)*a5);
          *(_QWORD *)&v414 = __PAIR64__(v65, v64);
          sub_22E8906A0(v12, (uint64_t *)&v414);
          sub_22E903BEC((unsigned int *)v417);
          break;
      }
      return 1;
    }
  }
  if (!v42 || (v47 = *(_DWORD *)(v42 + 16), (v47 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_63;
    v42 = sub_22F10CF48(v42);
    if (!v42)
      goto LABEL_63;
    v47 = *(_DWORD *)(v42 + 16);
  }
  if ((v47 & 0x100000) != 0)
  {
    do
    {
      v42 = *(_QWORD *)(*(_QWORD *)(v42 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v42)
      {
        v378 = *(_DWORD *)(v42 + 16);
        if ((v378 & 0xFE) == 0x28)
          continue;
      }
      v42 = sub_22F10CF48(v42);
      v378 = *(_DWORD *)(v42 + 16);
    }
    while ((v378 & 0x100000) != 0);
  }
  v384 = *(_QWORD *)(v42 + 32);
LABEL_63:
  if (a7)
  {
    v46 = *(_DWORD *)a3;
    v48 = 1 << *(_DWORD *)a3;
    v49 = (unint64_t *)(a3 + 16);
    if ((v48 & 0x7FFB8) == 0)
    {
      if ((v48 & 0x100045) != 0)
      {
        v45 = *(_QWORD *)(a3 + 32);
        v62 = v45;
      }
      else
      {
        v45 = *(_QWORD *)(a3 + 32);
        v62 = v45 & 0xFFFFFFFFFFFFFFF8;
      }
      v49 = (unint64_t *)(a3 + 16);
      if (v62)
      {
        switch(v46)
        {
          case 0:
          case 2:
          case 6:
            goto LABEL_102;
          case 1:
            goto LABEL_101;
          case 3:
          case 4:
          case 5:
LABEL_99:
            __break(1u);
            goto LABEL_100;
          default:
LABEL_100:
            if (v46 != 20)
LABEL_101:
              v45 &= 0xFFFFFFFFFFFFFFF8;
LABEL_102:
            v49 = (unint64_t *)(v45 + 48);
            break;
        }
      }
    }
    *a7 = *v49;
  }
  v382 = a6;
  v387 = (uint64_t *)a5;
  v411 = v413;
  v412 = 0x400000000;
  v50 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)v50 > 0x24u || ((1 << *(_DWORD *)v50) & 0x1BFFC7FFFFLL) == 0)
  {
    v52 = 0;
  }
  else
  {
    v52 = (uint64_t)*a5;
    if ((unint64_t)*a5 < 2)
    {
      v16 = 1;
      goto LABEL_666;
    }
    if ((v52 & 0xFFFFFFFFFFFFFFFELL) != 0 && *(unsigned __int8 *)(v52 & 0xFFFFFFFFFFFFFFFELL) == 180)
    {
      v53 = *(_DWORD *)(*(_QWORD *)(v12 + 3688) + 576 * *(unsigned int *)(v12 + 3696) - 576);
      if (v53 <= 3 && v53 != 2)
      {
        v55 = 1;
        if ((*(_BYTE *)(*(_QWORD *)(v12 + 72) + 1) & 2) != 0)
        {
          LODWORD(v420) = 1;
          *(_QWORD *)v417 = 0;
          LODWORD(v401) = 3;
          *(_QWORD *)&v414 = *(unsigned int *)(v12 + 1704);
          sub_22EB4DDB8(v12 + 3688, (int *)&v420, (int *)&v414, (__int16 *)(v12 + 1693), (uint64_t *)v417, (int *)&v401);
          v56 = *(unsigned int *)(v12 + 3696);
          v57 = v56 - 2;
          v58 = *(_QWORD *)(v12 + 3688);
          v59 = *(_DWORD *)(v58 + 576 * (v56 - 2));
          if (v59 == 5)
          {
            *(_BYTE *)(v58 + 576 * v56 - 4) = *(_BYTE *)(v58 + 576 * v57 + 572);
            v60 = 1;
          }
          else if (v59 == 2)
          {
            *(_BYTE *)(v58 + 576 * v56 - 4) = 1;
            v60 = *(_BYTE *)(v58 + 576 * v57 + 573) != 0;
          }
          else
          {
            v60 = 0;
            *(_BYTE *)(v58 + 576 * v56 - 4) = 0;
          }
          v61 = v58 + 576 * v56;
          *(_BYTE *)(v61 - 3) = v60;
          *(_WORD *)(v12 + 1693) = 0;
          if (*(_DWORD *)(v12 + 1848))
          {
            llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v12 + 1776), (llvm::SmallPtrSetImplBase *)(v61 - 560));
            sub_22EAEAE08(v12 + 1840, (uint64_t *)(v61 - 496));
          }
          v55 = 0;
          v50 = *(_QWORD *)(a1 + 8);
        }
        goto LABEL_105;
      }
    }
  }
  v55 = 1;
LABEL_105:
  v381 = v55;
  v389 = 0;
  v66 = *(_DWORD *)(a1 + 16);
  if (v66)
  {
    v67 = v50 + 40 * v66;
    v385 = v67;
    while (1)
    {
      if ((v52 & 1) != 0)
        goto LABEL_662;
      v68 = (unsigned __int8 *)(v52 & 0xFFFFFFFFFFFFFFFELL);
      if ((v52 & 0xFFFFFFFFFFFFFFFELL) != 0)
        v69 = *((_QWORD *)v68 + 1);
      else
        v69 = 0;
      v70 = *(_DWORD *)v50;
      switch(*(_DWORD *)v50)
      {
        case 0:
          sub_22E90B2C0(v12, (unsigned __int8 *)(v52 & 0xFFFFFFFFFFFFFFFELL), *(_QWORD *)(v50 + 32));
          v167 = *(_QWORD *)(v50 + 32) & 0xFFFFFFFFFFFFFFFCLL;
          *(_DWORD *)v417 = *((_DWORD *)a4 + 1);
          if ((sub_22EB17F48(v12, v167, v417, 1, 0, 0, 0, 0) & 1) != 0)
            goto LABEL_662;
          v52 = sub_22ED147E8(v12, (unsigned __int8 *)(v52 & 0xFFFFFFFFFFFFFFFELL), *(_QWORD *)(v50 + 32), *(_QWORD *)(v50 + 24), v168);
          if ((v52 & 1) != 0)
            goto LABEL_484;
          v112 = sub_22EB19A28(v12);
          goto LABEL_483;
        case 1:
        case 2:
        case 3:
          *(_QWORD *)v417 = &v417[16];
          *(_QWORD *)&v417[8] = 0x400000000;
          v71 = *a4 > 0x3FFu;
          v72 = *(_QWORD *)(v50 + 8);
          sub_22F0D5A50(v52 & 0xFFFFFFFFFFFFFFFELL);
          v74 = v73;
          sub_22F0D4E74(v52 & 0xFFFFFFFFFFFFFFFELL);
          v76 = sub_22EAAB46C(v12, v69, v72, 5082, 0xA41u, v74, v75, 0, (uint64_t)v417, v71);
          if ((v76 & 1) != 0)
          {
            v383 = 1;
          }
          else
          {
            if (*(_DWORD *)v50 == 3)
              v113 = 1;
            else
              v113 = 2 * (*(_DWORD *)v50 == 2);
            v52 = (uint64_t)sub_22EFFB64C(*(_QWORD *)(v12 + 88), *(_QWORD *)(v50 + 8), 7, v52 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v417, v113, 0);
          }
          v67 = v385;
          if (*(_BYTE **)v417 != &v417[16])
            free(*(void **)v417);
          if ((v76 & 1) != 0)
            goto LABEL_663;
          goto LABEL_484;
        case 4:
          if (sub_22EB168F8(v12, v52 & 0xFFFFFFFFFFFFFFFELL, v384))
            goto LABEL_662;
          v144 = *(_QWORD *)(*((_QWORD *)v68 + 1) & 0xFFFFFFFFFFFFFFF0);
          if (v144)
            v145 = *(_BYTE *)(v144 + 16) == 26;
          else
            v145 = 0;
          if (!v145
            && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v144 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26
             || !sub_22F10CF48(v144)))
          {
            goto LABEL_257;
          }
          v146 = (unsigned __int8 *)(v52 & 0xFFFFFFFFFFFFFFFELL);
          do
          {
            v147 = v146;
            v148 = *v146;
            if (v148 > 0xD5)
            {
              if (v148 == 233)
              {
                if ((*(_DWORD *)v146 & 0x7C0000) != 0x300000)
                  goto LABEL_257;
                v148 = *(_DWORD *)v146;
                v150 = v146 + 16;
              }
              else
              {
                if (v148 != 214)
                  break;
                v150 = v146 + 24;
              }
            }
            else if (v148 == 155)
            {
              if ((**((_DWORD **)v146 + 2) & 0x18000) != 0)
                goto LABEL_257;
              v150 = v146 + 24;
              if (!v147[48])
                v150 = v147 + 32;
              v148 = 155;
            }
            else
            {
              if (v148 != 176)
                break;
              v149 = *((unsigned int *)v146 + 5);
              if ((_DWORD)v149 == -1)
                goto LABEL_257;
              v150 = &v146[8 * v149 + 40];
              v148 = 176;
            }
            v146 = *(unsigned __int8 **)v150;
          }
          while (v146 != v147);
          if (v148 == 161)
          {
            v151 = *((_QWORD *)v147 + 2);
            if (v151)
            {
              if ((*(_DWORD *)(v151 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
              {
                if ((v147[2] & 4) != 0)
                {
                  *(_OWORD *)v417 = *((_OWORD *)v147 + 2);
                  v152 = sub_22F0AB0EC((unint64_t *)v417);
                }
                else
                {
                  v152 = *((_DWORD *)v147 + 1);
                }
                if (!sub_22ED10E50((_QWORD *)v12, v151, 1, 0, v152))
                  goto LABEL_662;
              }
            }
          }
LABEL_257:
          v153 = sub_22EFFBBCC((unsigned __int8 *)(v52 & 0xFFFFFFFFFFFFFFFELL));
          if (*v153 != 233)
            goto LABEL_484;
          v154 = v153;
          if ((*(_DWORD *)v153 & 0x7C0000) != 0x140000)
            goto LABEL_484;
          v155 = sub_22EFFBBCC(*((unsigned __int8 **)v153 + 2));
          if (!sub_22EFFBE1C((unint64_t)v155, *(_QWORD *)(v12 + 88), 2))
            goto LABEL_484;
          v156 = *((_DWORD *)v154 + 1);
          *(_QWORD *)&v417[8] = *(_QWORD *)(v12 + 88) + 2128;
          v157 = *(_QWORD *)&v417[8];
          *(_DWORD *)&v417[16] = 6309;
          sub_22F0D4E74(*((_QWORD *)v154 + 2));
          v159 = v158;
          *(_QWORD *)v417 = sub_22E3B8AAC(v157);
          sub_22E4D6448(*(_QWORD *)v417 + 336, v159, 1);
          *(_QWORD *)&v414 = v154;
          sub_22EB52944(v12, v156, &v414, 1uLL, (uint64_t *)v417);
          if (*(_QWORD *)v417 && *(_QWORD *)&v417[8])
            sub_22E3BB10C(*(unint64_t *)&v417[8], *(unint64_t *)v417);
          goto LABEL_341;
        case 5:
          if (sub_22EB168F8(v12, v52 & 0xFFFFFFFFFFFFFFFELL, v384))
            goto LABEL_662;
          v172 = *(_QWORD *)(v50 + 8);
          v173 = *(_QWORD *)(v172 & 0xFFFFFFFFFFFFFFF0);
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v173 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 4
            || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v68 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) == 4)
          {
            goto LABEL_286;
          }
          while (2)
          {
            if (v173 && (*(_DWORD *)(v173 + 16) & 0xFEu) - 6 > 0xFFFFFFFB)
            {
              v334 = v173;
LABEL_570:
              v173 = *(_QWORD *)(*(_QWORD *)(v334 + 32) & 0xFFFFFFFFFFFFFFF0);
              continue;
            }
            break;
          }
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v173 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
          {
            v334 = sub_22F10CF48(v173);
            if (v334)
              goto LABEL_570;
          }
          v174 = *(_QWORD *)(*((_QWORD *)v68 + 1) & 0xFFFFFFFFFFFFFFF0);
          v175 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v174 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
          if (v175 == 39 || v175 == 32)
          {
            v174 = *(_QWORD *)(sub_22F10ACF8(*(_QWORD *)(*((_QWORD *)v68 + 1) & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF0);
          }
          else if ((v175 & 0xFEu) - 2 <= 3)
          {
            while (1)
            {
              if (v174 && (*(_DWORD *)(v174 + 16) & 0xFEu) - 6 > 0xFFFFFFFB)
              {
                v335 = v174;
              }
              else
              {
                if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v174 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
                  break;
                v335 = sub_22F10CF48(v174);
                if (!v335)
                  break;
              }
              v174 = *(_QWORD *)(*(_QWORD *)(v335 + 32) & 0xFFFFFFFFFFFFFFF0);
            }
          }
          if (*(_QWORD *)(*(_QWORD *)(v173 + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)(v174 + 8) & 0xFFFFFFFFFFFFFFF0))
            v172 = *((_QWORD *)v68 + 1);
LABEL_286:
          v176 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v386 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 16) == 40;
          v52 = sub_22E3CD3D4(*(_QWORD *)(v12 + 88) + 2032, 24, 3);
          v177 = sub_22F0623F0(v52, v172, (uint64_t)v68, v176, 0);
          *(_BYTE *)(v12 + 1693) = 1;
          v178 = *(_QWORD *)(v177 + 16);
          if ((v178 & 4) == 0)
            goto LABEL_341;
          v67 = v385;
          if (sub_22F3B2674(v178 & 0xFFFFFFFFFFFFFFF8) == 1
            && sub_22F115260(*(_QWORD *)(v52 + 8)))
          {
            *(_WORD *)(v12 + 1693) = 257;
          }
          goto LABEL_484;
        case 6:
          goto LABEL_291;
        case 7:
          v169 = *(_DWORD *)a3;
          if ((*(_DWORD *)a3 & 0xFFFFFFFE) == 0xA)
            goto LABEL_275;
          v170 = *(_QWORD *)(v50 + 8);
          v171 = *((unsigned int *)a4 + 1);
          *(_QWORD *)v417 = &unk_24FAB6EF8;
          *(_DWORD *)&v417[8] = 2621;
          if ((sub_22EAB2EB4(v12, v171, v170, (void (***)(_QWORD, uint64_t, _QWORD, uint64_t))v417) & 1) != 0)
            goto LABEL_662;
          v169 = *(_DWORD *)a3;
LABEL_275:
          if (((1 << v169) & 0x3FDFD) != 0)
            sub_22EBCC6C0(v12, v52 & 0xFFFFFFFFFFFFFFFELL);
LABEL_291:
          v112 = sub_22EC43634();
          goto LABEL_483;
        case 8:
          v185 = *(_QWORD *)(v50 + 24);
          v184 = *(_QWORD *)(v50 + 32);
          v186 = *(unsigned __int8 *)(v50 + 16);
          if (v185 && (*(_DWORD *)(v185 + 28) & 0x7F) == 0x37)
          {
            *(_QWORD *)v417 = &v417[16];
            *(_QWORD *)&v417[8] = 0x800000000;
            sub_22F0D5A50(v52 & 0xFFFFFFFFFFFFFFFELL);
            *(_QWORD *)&v414 = v52 & 0xFFFFFFFFFFFFFFFELL;
            v188 = v187;
            if ((sub_22EACCC94(v12) & 1) != 0
              || (v189 = v186 != 0,
                  v190 = v184,
                  v191 = v184 & 0xFFFFFFFFFFFFFFFCLL,
                  v52 = sub_22EACC28C(v12, v188, *(_QWORD *)(v50 + 8), v191, v185, *(unsigned __int8 ***)v417, *(unsigned int *)&v417[8], v189, 0, 0, 0, 0, 0), (v52 & 1) != 0))
            {
              v194 = 0;
              v195 = 0;
              v383 = 1;
            }
            else
            {
              sub_22E90A630((_QWORD *)v12, *((_DWORD *)a4 + 1), v185, v190, a3, 0);
              LODWORD(v420) = *((_DWORD *)a4 + 1);
              v192 = sub_22EB17F48(v12, v191, &v420, 1, 0, 0, 0, 0);
              v193 = v383;
              if (v192)
                v193 = 1;
              v383 = v193;
              v194 = v192 == 0;
              if (v192)
                v195 = 0;
              else
                v195 = 21;
            }
            if (*(_BYTE **)v417 != &v417[16])
              free(*(void **)v417);
            if (!v194)
              goto LABEL_663;
LABEL_390:
            if ((*(_DWORD *)a3 & 0xFFFFFFFE) == 0xA)
            {
              v239 = 1;
            }
            else
            {
              v249 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFFFELL) + 8);
              v250 = *((unsigned int *)a4 + 1);
              *(_QWORD *)v417 = &unk_24FAB6EF8;
              *(_DWORD *)&v417[8] = 2621;
              v251 = sub_22EAB2EB4(v12, v250, v249, (void (***)(_QWORD, uint64_t, _QWORD, uint64_t))v417);
              v239 = 1;
              if ((v251 & 1) != 0)
                goto LABEL_662;
            }
            goto LABEL_393;
          }
          v235 = *((_DWORD *)a4 + 1);
          *(_QWORD *)v417 = 0;
          sub_22E90AE54(v12, v235, v52 & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)v417, v184);
          v236 = v184 & 0xFFFFFFFFFFFFFFFCLL;
          *(_DWORD *)v417 = *((_DWORD *)a4 + 1);
          if ((sub_22EB17F48(v12, v236, v417, 1, 0, 0, 0, 0) & 1) != 0)
            goto LABEL_662;
          v52 = sub_22EBCE6E4(v12, v52 & 0xFFFFFFFFFFFFFFFELL, v236, v185, v186 != 0);
          if ((v52 & 1) != 0)
            goto LABEL_662;
          v237 = *(_QWORD *)(*(_QWORD *)(v185 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (v237)
            v238 = *(unsigned __int8 *)(v237 + 16) - 27 > 0xFFFFFFFD;
          else
            v238 = 0;
          if (!v238)
            v237 = sub_22F10CF48(v237);
          v195 = 20;
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v237 + 24) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) == 45)
            goto LABEL_390;
          v239 = 0;
LABEL_393:
          v380 = v239;
          if (*(_QWORD *)(v12 + 1296) == *(_QWORD *)(v12 + 1288))
          {
            v252 = v195;
            v253 = 0;
            v254 = 24;
          }
          else
          {
            v252 = v195;
            v253 = *(_QWORD *)(v12 + 1296);
            if (HIDWORD(v253))
              v254 = 32;
            else
              v254 = 24;
          }
          v255 = v52 & 0xFFFFFFFFFFFFFFFELL;
          v256 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFFFELL) + 8);
          v257 = (*(_DWORD *)(v52 & 0xFFFFFFFFFFFFFFFELL) >> 8) & 3;
          v52 = sub_22E3CD3D4(*(_QWORD *)(v12 + 88) + 2032, v254, 3);
          sub_22F003694((unsigned int *)v52, v256, v252, v255, 0, v253, v257);
          v67 = v385;
          if (((1 << *(_DWORD *)a3) & 0x3FDFD) == 0)
          {
            v275 = v52 & 0xFFFFFFFFFFFFFFFELL;
            v276 = v12;
LABEL_444:
            v112 = sub_22EBCC6C0(v276, v275);
            goto LABEL_483;
          }
          if (v380)
          {
            if (((1 << *(_DWORD *)a3) & 0x1FD18) == 0)
            {
              v258 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFFFELL) + 8);
              v259 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v258 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
              if (v259)
              {
                if (*(_BYTE *)(v259 + 16) == 45)
                {
                  v260 = sub_22F114198(*(_QWORD *)(v259 + 24));
                  v379 = 0;
                  v261 = sub_22EC6602C(v12, v260) & 0xFFFFFFFFFFFFFFF8;
                  sub_22F0D5A50(v52 & 0xFFFFFFFFFFFFFFFELL);
                  v263 = v262;
                  v264 = *(_QWORD *)(v12 + 88) + 2128;
                  *(_QWORD *)v417 = 0;
                  *(_QWORD *)&v417[8] = v264;
                  *(_DWORD *)&v417[16] = 2587;
                  *(_QWORD *)v417 = sub_22E3B8AAC(v264);
                  *(_BYTE *)(*(_QWORD *)v417 + **(_BYTE **)v417 + 1) = 9;
                  v265 = *(_QWORD *)v417;
                  v266 = **(_BYTE **)v417;
                  **(_BYTE **)v417 = v266 + 1;
                  *(_QWORD *)(v265 + 8 * v266 + 16) = v258;
                  sub_22E90A46C(v12, v263, v261, (uint64_t)v417, 0);
                  if (*(_QWORD *)v417 && *(_QWORD *)&v417[8])
                    sub_22E3BB10C(*(unint64_t *)&v417[8], *(unint64_t *)v417);
                  sub_22F0D5A50(v52 & 0xFFFFFFFFFFFFFFFELL);
                  sub_22EB4E494(v12, v267, v261, 1);
                  sub_22F0D5A50(v52 & 0xFFFFFFFFFFFFFFFELL);
                  *(_DWORD *)v417 = v268;
                  v67 = v385;
                  if ((sub_22EB17F48(v12, v261, v417, 1, 0, 0, 0, 0) & 1) != 0)
                    goto LABEL_662;
                }
              }
            }
          }
LABEL_484:
          v50 += 40;
          if (v50 == v67)
            goto LABEL_583;
          break;
        case 9:
        case 0xA:
        case 0xB:
          if (v70 == 11)
            v77 = 1;
          else
            v77 = 2 * (v70 == 10);
          v78 = *(_QWORD *)(v50 + 8);
          if (v77)
          {
            v79 = *(_QWORD *)((v78 & 0xFFFFFFFFFFFFFFF0) + 8);
            if ((v79 & 8) != 0)
              v80 = *(_DWORD *)((v79 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
            else
              v80 = 0;
            v81 = *(_QWORD *)((*((_QWORD *)v68 + 1) & 0xFFFFFFFFFFFFFFF0) + 8);
            if ((v81 & 8) != 0)
              v82 = *(_DWORD *)((v81 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
            else
              v82 = 0;
            if (v80 == v82)
              v83 = 5;
            else
              v83 = 66;
          }
          else
          {
            v233 = sub_22F10ACF8(*(_QWORD *)(v78 & 0xFFFFFFFFFFFFFFF0));
            v234 = sub_22F10ACF8(*(_QWORD *)(*((_QWORD *)v68 + 1) & 0xFFFFFFFFFFFFFFF0));
            if (v233 >= 0x10)
            {
              v330 = *(_QWORD *)((v233 & 0xFFFFFFFFFFFFFFF0) + 8);
              if ((v330 & 8) != 0)
                v331 = *(_DWORD *)((v330 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
              else
                v331 = 0;
              v332 = *(_QWORD *)((v234 & 0xFFFFFFFFFFFFFFF0) + 8);
              if ((v332 & 8) != 0)
                v333 = *(_DWORD *)((v332 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
              else
                v333 = 0;
              if (v331 == v333)
                v83 = 5;
              else
                v83 = 66;
              v67 = v385;
            }
            else
            {
              v83 = 5;
            }
          }
          v161 = v12;
          v162 = (unint64_t)v68;
          v160 = v78;
          v163 = v77;
          goto LABEL_482;
        case 0xC:
          v160 = *(_QWORD *)(v50 + 8);
          v161 = v12;
          v162 = v52 & 0xFFFFFFFFFFFFFFFELL;
          v83 = 5;
          v163 = 1;
          goto LABEL_482;
        case 0xD:
          v160 = *(_QWORD *)(v50 + 8);
          v161 = v12;
          v162 = v52 & 0xFFFFFFFFFFFFFFFELL;
          v83 = 62;
          goto LABEL_481;
        case 0xE:
        case 0xF:
          v84 = *(_QWORD *)(*((_QWORD *)v68 + 1) & 0xFFFFFFFFFFFFFFF0);
          if ((v84 && *(_BYTE *)(v84 + 16) == 39
             || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v84 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
             && (v84 = sub_22F10CF48(v84)) != 0)
            && ((v85 = *(_QWORD *)(*(_QWORD *)(v50 + 8) & 0xFFFFFFFFFFFFFFF0)) != 0 && *(_BYTE *)(v85 + 16) == 39
             || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v85 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
             && (v85 = sub_22F10CF48(v85)) != 0)
            && sub_22F10E1FC(*(_QWORD *)(*(_QWORD *)(v84 + 32) & 0xFFFFFFFFFFFFFFF0), 12)
            && (sub_22F10E1FC(*(_QWORD *)(*(_QWORD *)(v85 + 32) & 0xFFFFFFFFFFFFFFF0), 12) & 1) == 0
            && *((unsigned __int8 *)a4 + 1) << 8 != 768)
          {
            sub_22EFF605C((uint64_t)v68);
            sub_22E8FCA40((_QWORD *)v12, v86, 0x1A74u, 0, (uint64_t)v417);
            sub_22F0D4E74((uint64_t)v68);
            *(_QWORD *)&v414 = v87;
            sub_22E8906A0((uint64_t)v417, (uint64_t *)&v414);
            sub_22E903BEC((unsigned int *)v417);
          }
          v88 = *a4;
          v89 = v88 & 0xFF00;
          if (v88 <= 0x2FF)
            v90 = 0;
          else
            v90 = 3;
          if (v89 == 1280)
            v90 = 2;
          if (v89 == 1024)
            v91 = 1;
          else
            v91 = v90;
          v92 = *(_QWORD *)(v50 + 8);
          v93 = *(_QWORD *)(v50 + 16);
          v94 = sub_22EC43D70(*(_DWORD *)a3);
          v52 = sub_22EBC4694(v12, v68, v92, v93, v94, v91);
          if ((v52 & 1) != 0)
            goto LABEL_662;
          sub_22E990EC8(v12, *(_QWORD *)(*(_QWORD *)(v50 + 8) & 0xFFFFFFFFFFFFFFF0), v68);
          if (*(_DWORD *)v50 != 15)
            goto LABEL_341;
          v67 = v385;
          if ((*(_BYTE *)(*(_QWORD *)(v12 + 72) + 1) & 1) == 0)
            goto LABEL_484;
          v95 = *(_DWORD **)(v50 + 16);
          v96 = *v95 & 0x7FFFFFFF;
          if ((v96 - 2) < 3)
            goto LABEL_484;
          if (v96 == 1)
          {
            v97 = (uint64_t)(v95 + 20);
          }
          else if (v96)
          {
            v97 = 0;
          }
          else
          {
            v97 = (uint64_t)(v95 + 4);
          }
          v290 = *v386;
          LODWORD(v420) = 0;
          v410 = 0;
          switch(sub_22ECF86A8(v97, *(_QWORD *)(v12 + 88), (uint64_t *)(v52 & 0xFFFFFFFFFFFFFFFELL), (uint64_t)&v420, &v410, 0))
          {
            case 0u:
            case 4u:
              goto LABEL_454;
            case 1u:
              sub_22F0D5A50(v52 & 0xFFFFFFFFFFFFFFFELL);
              v301 = *(_QWORD *)(v12 + 72);
              if ((*(_QWORD *)v301 & 0x200) == 0)
              {
                v300 = 6679;
                goto LABEL_498;
              }
              v300 = 5273;
              if ((*(_QWORD *)v301 & 0x20) == 0)
                goto LABEL_498;
              v305 = *(_DWORD *)(v301 + 192) > 0xB532B7Fu;
              v306 = 6679;
              goto LABEL_496;
            case 2u:
              sub_22F0D5A50(v52 & 0xFFFFFFFFFFFFFFFELL);
              v303 = *(_QWORD *)(v12 + 72);
              if ((*(_QWORD *)v303 & 0x200) != 0)
              {
                v304 = 5272;
                if ((*(_QWORD *)v303 & 0x20) != 0)
                {
                  if (*(_DWORD *)(v303 + 192) <= 0xB532B7Fu)
                    v304 = 6678;
                  else
                    v304 = 5272;
                }
              }
              else
              {
                v304 = 6678;
              }
              sub_22E8FCA40((_QWORD *)v12, v302, v304, 0, (uint64_t)v417);
              sub_22F0D4E74(v52 & 0xFFFFFFFFFFFFFFFELL);
              v401 = v324;
              v325 = sub_22E8906A0((uint64_t)v417, (uint64_t *)&v401);
              sub_22EF55AB4((uint64_t)&v420, *(_QWORD *)(v12 + 88), v410, &v414);
              v326 = sub_22F2F3734(v325, (void **)&v414);
              v398[0] = *(_QWORD *)(v290 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0;
              sub_22E8901B8(v326, v398);
              if (SBYTE7(v415) < 0)
                operator delete((void *)v414);
              goto LABEL_499;
            case 3u:
              sub_22F0D5A50(v52 & 0xFFFFFFFFFFFFFFFELL);
              v299 = *(_QWORD *)(v12 + 72);
              if ((*(_QWORD *)v299 & 0x200) != 0)
              {
                v300 = 5274;
                if ((*(_QWORD *)v299 & 0x20) != 0)
                {
                  v305 = *(_DWORD *)(v299 + 192) > 0xB532B7Fu;
                  v306 = 6680;
LABEL_496:
                  if (!v305)
                    v300 = v306;
                }
              }
              else
              {
                v300 = 6680;
              }
LABEL_498:
              sub_22E8FCA40((_QWORD *)v12, v298, v300, 0, (uint64_t)v417);
              sub_22F0D4E74(v52 & 0xFFFFFFFFFFFFFFFELL);
              *(_QWORD *)&v414 = v307;
              v308 = sub_22E8906A0((uint64_t)v417, (uint64_t *)&v414);
              v401 = *(_QWORD *)(v69 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0;
              v309 = sub_22E8901B8(v308, (uint64_t *)&v401);
              v398[0] = *(_QWORD *)(v290 & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0;
              sub_22E8901B8(v309, v398);
LABEL_499:
              sub_22E903BEC((unsigned int *)v417);
              break;
            default:
              break;
          }
          *(_QWORD *)v417 = &v418;
          *(_OWORD *)&v417[8] = xmmword_22F44E310;
          sub_22F242C48((uint64_t)&v401, (uint64_t)v417);
          v310 = v406;
          if ((unint64_t)(v405 - (_BYTE *)v406) > 0xB)
          {
            v406[2] = 1014264673;
            *v310 = *(_QWORD *)"static_cast<";
            v406 += 3;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v401, "static_cast<");
          }
          v311 = (uint64_t *)(v290 & 0xFFFFFFFFFFFFFFF0);
          v312 = sub_22F10D4DC(*v311);
          v67 = v385;
          if (v312)
          {
            (*(void (**)(_QWORD, unint64_t *))(**(_QWORD **)(v312 + 24) + 88))(*(_QWORD *)(v312 + 24), &v401);
          }
          else
          {
            v320 = *(_QWORD *)(*(_QWORD *)(*v311 + 8) & 0xFFFFFFFFFFFFFFF0);
            if (!v320 || *(_BYTE *)(v320 + 16) != 11)
              goto LABEL_511;
            sub_22E462F04((unint64_t *)&v414, *(unsigned int **)(v12 + 72));
            v322 = (const void *)sub_22F1125EC(v320);
            v323 = v321;
            if (v321 <= v405 - (_BYTE *)v406)
            {
              if (v321)
              {
                memcpy(v406, v322, v321);
                v406 = (_DWORD *)((char *)v406 + v323);
              }
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)&v401, (const char *)v322);
            }
          }
          if ((unint64_t)(v405 - (_BYTE *)v406) > 1)
          {
            *(_WORD *)v406 = 10302;
            v406 = (_DWORD *)((char *)v406 + 2);
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v401, ">(");
          }
          sub_22F0D5A50(v52 & 0xFFFFFFFFFFFFFFFELL);
          sub_22E8FCA40((_QWORD *)v12, v313, 0x1631u, 0, (uint64_t)&v414);
          sub_22F0D4E74(v52 & 0xFFFFFFFFFFFFFFFELL);
          v400 = v314;
          v315 = sub_22E8906A0((uint64_t)&v414, &v400);
          sub_22F0D5A50(v52 & 0xFFFFFFFFFFFFFFFELL);
          sub_22E729148(*(void **)v409, *(_QWORD *)(v409 + 8), v316, 0, (uint64_t)v398);
          v317 = sub_22E890748(v315, v398);
          sub_22F0D60E4(v52 & 0xFFFFFFFFFFFFFFFELL);
          v319 = sub_22F141A3C(v318, 0, *(_QWORD **)(v12 + 112), *(_DWORD **)(v12 + 72));
          v392 = 0;
          v393 = 0;
          v395 = 0;
          v396 = 0x100000000000000;
          __p = (void *)41;
          v390 = v319 | ((unint64_t)v319 << 32);
          v391 = 0;
          v397 = 0;
          sub_22E890748(v317, &v390);
          if (SHIBYTE(v396) < 0)
            operator delete(__p);
          v67 = v385;
          if (v399 < 0)
            operator delete((void *)v398[3]);
          sub_22E903BEC((unsigned int *)&v414);
LABEL_511:
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v401);
          if (*(int **)v417 != &v418)
            free(*(void **)v417);
LABEL_454:
          if (v420 >= 2)
            sub_22EF53BC0((uint64_t *)&v420);
          goto LABEL_484;
        case 0x10:
          if ((*(_DWORD *)a3 & 0xFFFFFFFE) != 0xA)
          {
            v119 = *(_QWORD *)(v50 + 8);
            v120 = *((unsigned int *)a4 + 1);
            *(_QWORD *)v417 = &unk_24FAB6EF8;
            *(_DWORD *)&v417[8] = 2621;
            if ((sub_22EAB2EB4(v12, v120, v119, (void (***)(_QWORD, uint64_t, _QWORD, uint64_t))v417) & 1) != 0)
              goto LABEL_662;
          }
          v401 = *(_QWORD *)(v50 + 8);
          v121 = *(_QWORD *)(a3 + 16) & 7 | *(_QWORD *)((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFFFF0) + 8);
          v122 = *(_QWORD *)((v401 & 0xFFFFFFFFFFFFFFF0) + 8) | v401 & 7;
          *(_DWORD *)v417 = 9;
          *(_QWORD *)&v417[8] = 0;
          *(_QWORD *)&v417[16] = v401;
          v418 = 0;
          v419 = 0;
          v123 = (__int128 *)v417;
          if (v121 == v122)
            v123 = (__int128 *)a3;
          v124 = v123[1];
          v414 = *v123;
          v415 = v124;
          v416 = v123[2];
          sub_22EC37BCC((uint64_t)&v420, v12, (uint64_t)&v414, v52 & 0xFFFFFFFFFFFFFFFELL, &v401, 0, 0, 0);
          if ((_BYTE)v421)
            goto LABEL_662;
          v125 = a7;
          if (!a7)
            goto LABEL_442;
          v126 = *(_QWORD *)(*a7 & 0xFFFFFFFFFFFFFFF0);
          if (v126)
          {
            v127 = *(_DWORD *)(v126 + 16);
            if ((v127 & 0xFE) == 0x28)
              goto LABEL_547;
          }
          v128 = a7;
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v126 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
          {
            v126 = sub_22F10CF48(v126);
            v128 = a7;
            if (v126)
            {
              v127 = *(_DWORD *)(v126 + 16);
LABEL_547:
              if ((v127 & 0x100000) != 0)
              {
                do
                {
                  v126 = *(_QWORD *)(*(_QWORD *)(v126 + 32) & 0xFFFFFFFFFFFFFFF0);
                  if (!v126 || (v329 = *(_DWORD *)(v126 + 16), (v329 & 0xFE) != 0x28))
                  {
                    v126 = sub_22F10CF48(v126);
                    v329 = *(_DWORD *)(v126 + 16);
                  }
                  v125 = a7;
                  v67 = v385;
                }
                while ((v329 & 0x100000) != 0);
              }
              v128 = (unint64_t *)(v126 + 32);
            }
          }
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v128 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) != 4)
            goto LABEL_442;
          v129 = *(_QWORD *)(*v125 & 0xFFFFFFFFFFFFFFF0);
          v130 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v129 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
          if (v130 == 40)
          {
            v283 = *(_QWORD *)(v12 + 88);
            v284 = v401;
            v285 = *(_DWORD *)(v129 + 16);
            if (v285 != 40)
              v285 = *(_DWORD *)(sub_22F10CF48(v129) + 16);
            v131 = sub_22EF5F8C4(v283, v284, (v285 >> 19) & 1);
            goto LABEL_439;
          }
          if (v130 == 41)
          {
            v131 = sub_22EF5FB8C(*(_QWORD *)(v12 + 88), v401);
LABEL_439:
            v401 = v131;
            goto LABEL_441;
          }
          v131 = v401;
LABEL_441:
          *v125 = v131;
LABEL_442:
          v52 = *(_QWORD *)&v422[4];
          if (((1 << v414) & 0x3FDFD) != 0)
            goto LABEL_484;
          v276 = v12;
          v275 = *(_QWORD *)&v422[4];
          goto LABEL_444;
        case 0x11:
          v52 = **((_QWORD **)v68 + 2);
          goto LABEL_484;
        case 0x12:
          *(_QWORD *)v417 = v52 & 0xFFFFFFFFFFFFFFFELL;
          v215 = *(_QWORD *)(v50 + 16);
          v52 = sub_22E3CD3D4(*(_QWORD *)(v12 + 88) + 2032, 64, 3);
          v216 = sub_22EFFD1B0(v52, *(_QWORD *)(v12 + 88), *(_DWORD *)(v215 + 40), (uint64_t *)v417, 1, *(_DWORD *)(v215 + 44));
          *(_QWORD *)(v216 + 48) = *(_QWORD *)(v216 + 48) & 3 | v215 | 4;
          *(_QWORD *)(v215 + 48) = *(_QWORD *)(v215 + 48) & 3 | v216 & 0xFFFFFFFFFFFFFFFBLL;
          v217 = *(_DWORD **)v417;
          v67 = v385;
          *(_QWORD *)(v216 + 8) = *(_QWORD *)(*(_QWORD *)v417 + 8);
          *(_DWORD *)v216 = *(_DWORD *)v216 & 0xFFFFFCFF | (((*v217 >> 8) & 3) << 8);
          goto LABEL_484;
        case 0x13:
        case 0x22:
          if ((*(_DWORD *)a3 & 0xFFFFFFFE) != 0xA)
          {
            v98 = *(_QWORD *)(v50 + 8);
            v99 = *((unsigned int *)a4 + 1);
            *(_QWORD *)v417 = &unk_24FAB6EF8;
            *(_DWORD *)&v417[8] = 2621;
            if ((sub_22EAB2EB4(v12, v99, v98, (void (***)(_QWORD, uint64_t, _QWORD, uint64_t))v417) & 1) != 0)
              goto LABEL_662;
          }
          v100 = *v386;
          v101 = *(_QWORD *)(*v386 & 0xFFFFFFFFFFFFFFF0);
          if (v101)
          {
            v102 = *(_DWORD *)(v101 + 16);
            if ((v102 & 0xFE) == 0x28)
              goto LABEL_534;
          }
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v101 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
          {
            v101 = sub_22F10CF48(v101);
            if (v101)
            {
              v102 = *(_DWORD *)(v101 + 16);
LABEL_534:
              if ((v102 & 0x100000) != 0)
              {
                do
                {
                  v101 = *(_QWORD *)(*(_QWORD *)(v101 + 32) & 0xFFFFFFFFFFFFFFF0);
                  if (v101)
                  {
                    v327 = *(_DWORD *)(v101 + 16);
                    if ((v327 & 0xFE) == 0x28)
                      continue;
                  }
                  v101 = sub_22F10CF48(v101);
                  v327 = *(_DWORD *)(v101 + 16);
                }
                while ((v327 & 0x100000) != 0);
              }
              v100 = *(_QWORD *)(v101 + 32);
            }
          }
          v103 = 0;
          *(_DWORD *)v417 = 9;
          *(_QWORD *)&v417[8] = 0;
          *(_QWORD *)&v417[16] = v100;
          v418 = 0;
          v419 = 0;
          v104 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v386 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                           + 16);
          v105 = *(_DWORD *)v50;
          *(_QWORD *)&v414 = v52 & 0xFFFFFFFFFFFFFFFELL;
          v106 = *(unsigned __int8 *)a4;
          if (v106 > 4)
          {
            v108 = 0;
            v67 = v385;
          }
          else
          {
            v107 = 1 << v106;
            v108 = 0;
            v67 = v385;
            if ((v107 & 0x13) != 0)
            {
              v103 = *((_DWORD *)a4 + 2);
              v108 = *((unsigned int *)a4 + 3);
            }
          }
          if ((v104 & 0xFE) == 0x28)
            v109 = v417;
          else
            v109 = (_BYTE *)a3;
          if (v68)
            v110 = (uint64_t *)&v414;
          else
            v110 = v387;
          if (v68)
            v111 = 1;
          else
            v111 = v382;
          v112 = sub_22EC43E28((_QWORD *)v12, (uint64_t)v109, (unsigned __int8 *)a4, (uint64_t)v110, v111, v50, &v389, v105 == 34, v105 == 34, v379, v103, v108);
          goto LABEL_483;
        case 0x14:
          if ((*(_DWORD *)a3 & 0xFFFFFFFE) != 0xA)
          {
            v196 = *(_QWORD *)(v50 + 8);
            v197 = *((unsigned int *)a4 + 1);
            *(_QWORD *)v417 = &unk_24FAB6EF8;
            *(_DWORD *)&v417[8] = 2621;
            if ((sub_22EAB2EB4(v12, v197, v196, (void (***)(_QWORD, uint64_t, _QWORD, uint64_t))v417) & 1) != 0)
              goto LABEL_662;
          }
          v198 = *v386;
          v199 = *(_QWORD *)(*v386 & 0xFFFFFFFFFFFFFFF0);
          if (v199)
          {
            v200 = *(_DWORD *)(v199 + 16);
            if ((v200 & 0xFE) == 0x28)
              goto LABEL_538;
          }
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v199 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
          {
            v199 = sub_22F10CF48(v199);
            if (v199)
            {
              v200 = *(_DWORD *)(v199 + 16);
LABEL_538:
              if ((v200 & 0x100000) != 0)
              {
                do
                {
                  v199 = *(_QWORD *)(*(_QWORD *)(v199 + 32) & 0xFFFFFFFFFFFFFFF0);
                  if (v199)
                  {
                    v328 = *(_DWORD *)(v199 + 16);
                    if ((v328 & 0xFE) == 0x28)
                      continue;
                  }
                  v199 = sub_22F10CF48(v199);
                  v328 = *(_DWORD *)(v199 + 16);
                }
                while ((v328 & 0x100000) != 0);
              }
              v198 = *(_QWORD *)(v199 + 32);
            }
          }
          LODWORD(v414) = 9;
          *((_QWORD *)&v414 + 1) = 0;
          *(_QWORD *)&v415 = v198;
          DWORD2(v415) = 0;
          *(_QWORD *)&v416 = 0;
          v201 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                           + 16) & 0xFE;
          v202 = *v387;
          sub_22EFF605C(*v387);
          sub_22E8FCA40((_QWORD *)v12, v203, 0x1922u, 0, (uint64_t)v417);
          sub_22F0D4E74(v202);
          v420 = (unint64_t)v204;
          sub_22E8906A0((uint64_t)v417, (uint64_t *)&v420);
          sub_22E903BEC((unsigned int *)v417);
          if (v201 == 40)
            v205 = &v414;
          else
            v205 = (__int128 *)a3;
          v206 = sub_22EC43E28((_QWORD *)v12, (uint64_t)v205, (unsigned __int8 *)a4, *(_QWORD *)(v202 + 16), ((*(_QWORD *)(v202 + 24) - *(_QWORD *)(v202 + 16)) >> 3), v50, &v389, 1, 0, v379, *(_DWORD *)(v202 + 40), *(unsigned int *)(v202 + 44));
          goto LABEL_313;
        case 0x15:
          if (v50 + 40 == v67 || (*(_DWORD *)(v50 + 40) - 19) > 1)
          {
            if (*a4 == 4 && (*a4 & 0xFF00) != 0x200 && (**(_QWORD **)(v12 + 72) & 0x100) != 0)
            {
              if (*(_DWORD *)a3 != 17 && *(_DWORD *)a3 != 9 || (v231 = *(_QWORD **)(a3 + 32)) == 0)
                v231 = sub_22EF579A8(*(_QWORD *)(v12 + 88), *(_QWORD *)(v50 + 8), *((_DWORD *)a4 + 1));
              v52 = sub_22E3CD3D4(*(_QWORD *)(v12 + 88) + 2032, 24, 3);
              *(_QWORD *)v417 = *v386;
              v232 = sub_22F1133DC((uint64_t *)v417, *(_QWORD *)(v12 + 88));
              sub_22EBD096C(v52, v232, (uint64_t)v231, *((_DWORD *)a4 + 3));
            }
            else
            {
              v52 = sub_22E3CD3D4(*(_QWORD *)(v12 + 88) + 2032, 16, 3);
              sub_22E5018F0(v52, *(_QWORD *)(v50 + 8));
            }
          }
          else
          {
            v389 = 1;
          }
          goto LABEL_484;
        case 0x16:
          v218 = *((_QWORD *)v68 + 1);
          *(_QWORD *)v417 = v52;
          v219 = sub_22EB392FC(v12, *(_QWORD *)(v50 + 8), v417, 1, *(_DWORD *)a3 == 19, 1);
          v52 = *(_QWORD *)v417;
          if ((v417[0] & 1) != 0)
            goto LABEL_662;
          v220 = v219;
          *(_QWORD *)&v414 = *(_QWORD *)v417;
          if (v219 && (*(_DWORD *)a3 == 19 || *(_DWORD *)a3 == 1))
          {
            if (!sub_22EB39090(v12, *(_QWORD *)(v50 + 8), (uint64_t *)&v414))
              v220 = 0;
            v52 = v414;
          }
          if ((v52 & 1) != 0)
            goto LABEL_662;
          LOBYTE(v420) = 0;
          v221 = *((_DWORD *)a4 + 1);
          v222 = *(_QWORD *)(v50 + 8);
          v223 = sub_22EC43D70(*(_DWORD *)a3);
          if ((sub_22EB43580(v12, v220, v221, v222, v218, v68, v223, &v420) & 1) != 0)
          {
            sub_22EC3CEBC((unsigned int *)v12, (unsigned int *)a3);
LABEL_662:
            v383 = 1;
            goto LABEL_663;
          }
          if ((_BYTE)v420)
            sub_22EC3CEBC((unsigned int *)v12, (unsigned int *)a3);
LABEL_341:
          v67 = v385;
          goto LABEL_484;
        case 0x17:
          v164 = *(_QWORD *)(v50 + 8);
          *(_QWORD *)v417 = v164;
          v165 = (uint64_t *)v417;
          if (a7
            && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v386 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16) == 4)
          {
            v165 = (uint64_t *)a7;
          }
          v166 = sub_22EF5C728(*(_QWORD *)(v12 + 88), v164);
          sub_22EC44448(v52 & 0xFFFFFFFFFFFFFFFELL, v165, v166, (_QWORD *)v12);
          goto LABEL_484;
        case 0x18:
          v160 = *(_QWORD *)(v50 + 8);
          v163 = (*(_DWORD *)v68 >> 8) & 3;
          v161 = v12;
          v162 = v52 & 0xFFFFFFFFFFFFFFFELL;
          v83 = 46;
          goto LABEL_482;
        case 0x19:
          v224 = (uint64_t (**)())sub_22E3CD3D4(*(_QWORD *)(v12 + 88) + 2032, 24, 3);
          sub_22EFF605C(v52 & 0xFFFFFFFFFFFFFFFELL);
          sub_22E5BBE34((uint64_t)v224, v225, *((_QWORD *)v68 + 1), BYTE1(*(_DWORD *)v68) & 3, (*(_DWORD *)v68 >> 10) & 7, v52 & 0xFFFFFFFFFFFFFFFELL);
          v226 = (_QWORD *)sub_22E3CD3D4(*(_QWORD *)(v12 + 88) + 2032, 16, 3);
          v227 = sub_22EF67C8C(*(_QWORD *)(v12 + 88));
          *(_BYTE *)v226 = 105;
          if (byte_255E04EB3)
          {
            v228 = sub_22F0D3748(105);
            ++*((_DWORD *)v228 + 2);
          }
          v229 = *(_DWORD *)v226 & 0xFFFC00FF;
          v226[1] = v227;
          *(_DWORD *)v226 = v229;
          v52 = sub_22EB2AFE4(v12, v224, *((_DWORD *)a4 + 1), v226, *((_DWORD *)a4 + 1));
          v230 = v412;
          if (v412 >= (unint64_t)HIDWORD(v412))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v230 = v412;
          }
          v411[v230] = v224;
          LODWORD(v412) = v412 + 1;
          goto LABEL_484;
        case 0x1A:
          v291 = v411[v412 - 1];
          LODWORD(v412) = v412 - 1;
          v52 = sub_22E3CD3D4(*(_QWORD *)(v12 + 88) + 2032, 32, 3);
          sub_22F336394(v52, *(_QWORD *)(v50 + 8), v291, (uint64_t)v68);
          goto LABEL_484;
        case 0x1B:
          goto LABEL_221;
        case 0x1C:
          sub_22E8FCA40((_QWORD *)v12, *((_DWORD *)a4 + 1), 0x1438u, 0, (uint64_t)v417);
          v132 = sub_22E8901B8((uint64_t)v417, (uint64_t *)(v50 + 8));
          *(_QWORD *)&v414 = *((_QWORD *)v68 + 1);
          v133 = sub_22E8901B8(v132, (uint64_t *)&v414);
          sub_22F0D4E74(v52 & 0xFFFFFFFFFFFFFFFELL);
          v420 = (unint64_t)v134;
          v67 = v385;
          sub_22E8906A0(v133, (uint64_t *)&v420);
          sub_22E903BEC((unsigned int *)v417);
          v135 = v52 & 0xFFFFFFFFFFFFFFFELL;
          while (2)
          {
            v136 = *(_DWORD *)v135;
            *(_DWORD *)v135 &= 0xFFFFFCFF;
            if (v136 > 0xD5u)
            {
              if (v136 == 233)
              {
                v137 = (unint64_t *)(v135 + 16);
              }
              else if (v136 == 214)
              {
                v137 = (unint64_t *)(v135 + 24);
              }
              else
              {
LABEL_218:
                v138 = *(unsigned __int8 *)(v135 + 48);
                v139 = (unint64_t *)(v135 + 24);
                v137 = (unint64_t *)(v135 + 32);
                if (v138)
                  v137 = v139;
              }
LABEL_220:
              v135 = *v137;
              continue;
            }
            break;
          }
          if (v136 == 176)
          {
            v137 = (unint64_t *)(v135 + 8 * (*(_DWORD *)(v135 + 20) + 1) + 32);
            goto LABEL_220;
          }
          if (v136 != 156)
            goto LABEL_218;
LABEL_221:
          if (a7)
          {
            v140 = sub_22EF5C728(*(_QWORD *)(v12 + 88), *(_QWORD *)(v50 + 8));
            if (v140)
            {
              v141 = v140;
              if (*(_BYTE *)(v140 + 16) == 4)
              {
                v142 = sub_22EF5C728(*(_QWORD *)(v12 + 88), *((_QWORD *)v68 + 1));
                if (v142)
                {
                  if (*(_DWORD *)(v142 + 16) == 2)
                  {
                    if ((*(_DWORD *)(v142 + 16) & 0x2000000) != 0)
                      v143 = *(unsigned __int8 **)(v142 + 56);
                    else
                      v143 = 0;
                    *a7 = sub_22EF5FE30(*(_QWORD *)(v12 + 88), *(_QWORD *)(v141 + 32), (const llvm::APInt *)(v142 + 40), v143, 0, 0);
                  }
                }
              }
            }
          }
          goto LABEL_484;
        case 0x1D:
          sub_22E8FCA40((_QWORD *)v12, *((_DWORD *)a4 + 1), 0x1439u, 0, (uint64_t)v417);
          sub_22F0D4E74(v52 & 0xFFFFFFFFFFFFFFFELL);
          *(_QWORD *)&v414 = v118;
          sub_22E8906A0((uint64_t)v417, (uint64_t *)&v414);
          goto LABEL_470;
        case 0x1E:
        case 0x1F:
          LOBYTE(v401) = 0;
          v277 = sub_22EC51154(*(_QWORD *)(v12 + 88), (unsigned __int8 *)(v52 & 0xFFFFFFFFFFFFFFFELL), 0, &v401);
          v278 = v277;
          if ((*(_WORD *)(*(_QWORD *)(v12 + 72) + 148) & 2) != 0 && (_BYTE)v401)
            *(_WORD *)(v12 + 1693) = 257;
          if (v277)
          {
            sub_22EFF605C(v52 & 0xFFFFFFFFFFFFFFFELL);
            sub_22E8FCA40((_QWORD *)v12, v279, 0xA6Fu, 0, (uint64_t)v417);
            LODWORD(v420) = v278 - 1;
            v280 = sub_22E89519C((uint64_t)v417, (unsigned int *)&v420);
            sub_22F0D4E74(v52 & 0xFFFFFFFFFFFFFFFELL);
            *(_QWORD *)&v414 = v281;
            v67 = v385;
            sub_22E8906A0(v280, (uint64_t *)&v414);
            sub_22E903BEC((unsigned int *)v417);
          }
          v52 = sub_22E3CD3D4(*(_QWORD *)(v12 + 88) + 2032, 24, 3);
          sub_22F336424(v52, (uint64_t)v68, *(_QWORD *)(v50 + 8), *(_DWORD *)v50 == 30);
          goto LABEL_484;
        case 0x20:
          v179 = *(_QWORD *)(v50 + 8);
          v180 = (unsigned int *)sub_22E3CD3D4(*(_QWORD *)(v12 + 88) + 2032, 24, 3);
          v52 = (uint64_t)v180;
          v181 = v179;
          v182 = 57;
          v183 = (uint64_t)v68;
          goto LABEL_293;
        case 0x21:
          sub_22EFF605C(v52 & 0xFFFFFFFFFFFFFFFELL);
          sub_22E8FCA40((_QWORD *)v12, v292, 0x192Cu, 0, (uint64_t)v417);
          sub_22F0D4E74(v52 & 0xFFFFFFFFFFFFFFFELL);
          *(_QWORD *)&v414 = v293;
          sub_22E8906A0((uint64_t)v417, (uint64_t *)&v414);
          sub_22E903BEC((unsigned int *)v417);
          v294 = *((_QWORD *)v68 + 1);
          v295 = sub_22E3CD3D4(*(_QWORD *)(v12 + 88) + 2032, 24, 3);
          sub_22F0623F0(v295, v294, v52 & 0xFFFFFFFFFFFFFFFELL, 0, 0);
          *(_BYTE *)(v12 + 1693) = 1;
          v52 = sub_22E3CD3D4(*(_QWORD *)(v12 + 88) + 2032, 24, 3);
          sub_22F3364C0(v52, *(_QWORD *)(v50 + 8), v295);
          if (((1 << *(_DWORD *)a3) & 0x3FDFD) != 0)
            goto LABEL_341;
          v206 = sub_22EBCC6C0(v12, v52 & 0xFFFFFFFFFFFFFFFELL);
LABEL_313:
          v52 = v206;
          goto LABEL_341;
        case 0x23:
          if (!v68)
          {
            v114 = 0;
            goto LABEL_370;
          }
          while (2)
          {
            v114 = v68;
            v115 = *v68;
            if (v115 > 0xD5)
            {
              if (v115 == 233)
              {
                if ((*(_DWORD *)v68 & 0x7C0000) != 0x300000)
                  goto LABEL_370;
                v117 = v68 + 16;
              }
              else
              {
                if (v115 != 214)
                  goto LABEL_370;
                v117 = v68 + 24;
              }
LABEL_193:
              v68 = *(unsigned __int8 **)v117;
              if (*(unsigned __int8 **)v117 == v114)
                goto LABEL_370;
              continue;
            }
            break;
          }
          if (v115 == 155)
          {
            if ((**((_DWORD **)v68 + 2) & 0x18000) != 0)
              goto LABEL_370;
            if (v68[48])
              v117 = v68 + 24;
            else
              v117 = v68 + 32;
            goto LABEL_193;
          }
          if (v115 == 176)
          {
            v116 = *((unsigned int *)v68 + 5);
            if ((_DWORD)v116 != -1)
            {
              v117 = &v68[8 * v116 + 40];
              goto LABEL_193;
            }
          }
LABEL_370:
          v240 = *((_QWORD *)v114 + 1);
          v401 = v240;
          if (*(_DWORD *)a3 != 19 && *(_DWORD *)a3 != 1)
          {
            if (!sub_22EFFFBEC((uint64_t)v114, *(_QWORD *)(v12 + 88), 0, 0, (uint64_t)a5, a6, (uint64_t)a7, a8))
              goto LABEL_484;
            v270 = v401;
            v271 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v401 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            v272 = *(_DWORD *)(v271 + 16);
            if (v271)
              v273 = v272 == 11;
            else
              v273 = 0;
            if (v273)
            {
              if (((*(_DWORD *)(v271 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
                goto LABEL_468;
            }
            else if (v271 && v272 == 44)
            {
              v274 = sub_22F114198(*(_QWORD *)(v271 + 24));
              if ((*(_BYTE *)(v274 + 74) & 1) == 0 && *(_QWORD *)(v274 + 128) <= 7uLL
                || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v271 + 24)) + 76) & 0x80) != 0)
              {
LABEL_468:
                v287 = *((_DWORD *)a4 + 1);
                v288 = (_QWORD *)v12;
                v289 = 4684;
LABEL_469:
                sub_22E8FCA40(v288, v287, v289, 0, (uint64_t)v417);
                sub_22E8901B8((uint64_t)v417, (uint64_t *)&v401);
LABEL_470:
                sub_22E903BEC((unsigned int *)v417);
                goto LABEL_484;
              }
              v270 = v401;
            }
            else if (v272 != 9)
            {
              goto LABEL_468;
            }
            if (sub_22EF6A330(*(_QWORD *)(v12 + 88), v270) != 32)
              goto LABEL_468;
            LOWORD(v414) = 0;
            *((_QWORD *)&v414 + 1) = 0;
            LODWORD(v415) = 0;
            sub_22F00554C((uint64_t)v114, (uint64_t)&v414, *(_QWORD *)(v12 + 88), 0, 0);
            v421 = v416;
            if (v416 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v420, (const llvm::APInt *)((char *)&v415 + 8));
            else
              v420 = *((_QWORD *)&v415 + 1);
            v422[0] = BYTE4(v416);
            v296 = sub_22E5FA634((uint64_t ***)&v420, 0xFFFFFFFFFFFFFFFFLL);
            v297 = v296;
            if (((v296 >> 4) & 3) - 3 <= 0xFFFFFFFD
              && !sub_22F420564(v12 + 24, (uint64_t)"cl_intel_device_side_avc_motion_estimation", 42, *(_QWORD *)(v12 + 72)))
            {
              sub_22E8FCA40((_QWORD *)v12, *((_DWORD *)a4 + 1), 0x1B38u, 0, (uint64_t)v417);
              sub_22F2F30F4((uint64_t)v417, (uint64_t)"Filter Mode");
              sub_22E903BEC((unsigned int *)v417);
            }
            if ((v297 & 0xEu) >= 9uLL)
            {
              sub_22E8FCA40((_QWORD *)v12, *((_DWORD *)a4 + 1), 0x1B38u, 0, (uint64_t)v417);
              sub_22F2F30F4((uint64_t)v417, (uint64_t)"Addressing Mode");
              sub_22E903BEC((unsigned int *)v417);
            }
            if (v421 >= 0x41 && v420)
              MEMORY[0x2348A0E84](v420, 0x1000C8000313F17);
            if (v415 >= 2)
              sub_22EF53BC0((uint64_t *)&v415);
LABEL_480:
            v160 = *(_QWORD *)(*(_QWORD *)(v12 + 88) + 17208);
            v161 = v12;
            v162 = (unint64_t)v114;
            v83 = 67;
LABEL_481:
            v163 = 0;
LABEL_482:
            v112 = sub_22E90092C(v161, v162, v160, v83, v163, 0);
LABEL_483:
            v52 = v112;
            goto LABEL_484;
          }
          v242 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v240 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          v243 = *(_DWORD *)(v242 + 16);
          if (v242)
            v244 = (v243 & 0xFF800FF) == 116391947;
          else
            v244 = 0;
          v245 = *(_DWORD *)(v242 + 16);
          if (!v244 && v245 != 9)
          {
            if (v245 == 44)
            {
              v286 = sub_22F114198(*(_QWORD *)(v242 + 24));
              if ((*(_BYTE *)(v286 + 74) & 1) == 0 && *(_QWORD *)(v286 + 128) < 8uLL
                || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v242 + 24)) + 76) & 0x80) != 0)
              {
LABEL_448:
                v287 = *((_DWORD *)a4 + 1);
                v288 = (_QWORD *)v12;
                v289 = 4683;
                goto LABEL_469;
              }
            }
            else if (v245 != 11 || ((v243 >> 19) & 0x1FE) - 166 >= 0x14)
            {
              goto LABEL_448;
            }
          }
          if (*v114 != 161)
            goto LABEL_480;
          v247 = *((_QWORD *)v114 + 2);
          if (sub_22E3CB5E0(v247))
          {
            v248 = *(_QWORD *)(v50 + 8);
            v180 = (unsigned int *)sub_22E3CD3D4(*(_QWORD *)(v12 + 88) + 2032, 24, 3);
            v52 = (uint64_t)v180;
            v181 = v248;
            v182 = 4;
            v183 = (uint64_t)v114;
LABEL_293:
            sub_22F003694(v180, v181, v182, v183, 0, 0, 0);
            goto LABEL_484;
          }
          v282 = (unsigned __int8 *)sub_22EFBC5B4(v247);
          if (v282 && *v282 == 153)
          {
            v114 = (unsigned __int8 *)*((_QWORD *)v282 + 2);
            v401 = *((_QWORD *)v114 + 1);
            goto LABEL_480;
          }
          goto LABEL_484;
        case 0x24:
          v160 = *(_QWORD *)(v50 + 8);
          v163 = (*(_DWORD *)v68 >> 8) & 3;
          v161 = v12;
          v162 = v52 & 0xFFFFFFFFFFFFFFFELL;
          v83 = 65;
          goto LABEL_482;
        case 0x25:
          v207 = *(unsigned int *)(v50 + 32);
          *(_QWORD *)v417 = &v417[16];
          *(_QWORD *)&v417[8] = 0x400000000;
          sub_22E4639CC((uint64_t)v417, v207, 0);
          v208 = *(_DWORD *)(v50 + 32);
          if (!v208)
            goto LABEL_318;
          v209 = 0;
          v210 = 0;
          v211 = 152 * v208;
          while (1)
          {
            v52 = 1;
            v212 = sub_22EBC4694(v12, v387[v209], *(_QWORD *)(*(_QWORD *)(v50 + 24) + v209 * 8), *(_QWORD *)(v50 + 16) + v210, 1, 0);
            if ((v212 & 1) != 0)
              break;
            *(_QWORD *)(*(_QWORD *)v417 + v209 * 8) = v212 & 0xFFFFFFFFFFFFFFFELL;
            v210 += 152;
            ++v209;
            if (v211 == v210)
            {
LABEL_318:
              v213 = *(_DWORD *)a3 == 17 || *(_DWORD *)a3 == 9;
              if (!v213 || (v214 = *(_QWORD **)(a3 + 32)) == 0)
                v214 = sub_22EF579A8(*(_QWORD *)(v12 + 88), *(_QWORD *)(v50 + 8), *((_DWORD *)a4 + 1));
              v52 = sub_22E3CD3D4(*(_QWORD *)(v12 + 88) + 2032, 48, 3);
              sub_22F0614DC(v52, *(_QWORD *)(v12 + 88), v214, *(uint64_t **)v417, *(unsigned int *)&v417[8], *((_QWORD *)a4 + 1));
              break;
            }
          }
          v67 = v385;
          if (*(_BYTE **)v417 != &v417[16])
            free(*(void **)v417);
          goto LABEL_484;
        default:
          goto LABEL_484;
      }
    }
  }
LABEL_583:
  v336 = (unsigned __int8 *)(v52 & 0xFFFFFFFFFFFFFFFELL);
  if ((v52 & 0xFFFFFFFFFFFFFFFELL) != 0)
    sub_22EC3D074(v12, a3);
  if (*(_DWORD *)a3 == 6)
  {
    v337 = *(_QWORD *)(a3 + 32);
    if ((*(_BYTE *)(v337 + 68) & 1) != 0)
      sub_22E98B43C((_QWORD *)v12, v337, (unsigned __int8 *)(v52 & 0xFFFFFFFFFFFFFFFELL), *((_DWORD *)a4 + 1));
  }
  v383 = v52;
  if (!v336)
    goto LABEL_663;
  if (*(_DWORD *)(v12 + 10680) > *(_DWORD *)(v12 + 11956))
    goto LABEL_663;
  v338 = (_QWORD *)(*((_QWORD *)v336 + 1) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v338 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 45)
    goto LABEL_663;
  v339 = *(_DWORD *)a3;
  if (v339 == 3)
  {
    while (1)
    {
      v340 = v336;
      LODWORD(v341) = *v336;
      if (v341 > 0xD5)
      {
        if ((_DWORD)v341 == 233)
        {
          LOBYTE(v341) = *(_DWORD *)v336;
          if ((*(_DWORD *)v336 & 0x7C0000) != 0x300000)
            goto LABEL_607;
          v342 = v336 + 16;
        }
        else
        {
          if ((_DWORD)v341 != 214)
            goto LABEL_607;
          v342 = v336 + 24;
        }
      }
      else if ((_DWORD)v341 == 155)
      {
        if ((**((_DWORD **)v336 + 2) & 0x18000) != 0)
          goto LABEL_663;
        v342 = v336 + 24;
        if (!v336[48])
          v342 = v336 + 32;
        LOBYTE(v341) = -101;
      }
      else
      {
        if ((_DWORD)v341 != 176)
          goto LABEL_607;
        v341 = *((unsigned int *)v336 + 5);
        if ((_DWORD)v341 == -1)
          goto LABEL_663;
        v342 = &v336[8 * v341 + 40];
        LOBYTE(v341) = -80;
      }
      v336 = *(unsigned __int8 **)v342;
      if (*(unsigned __int8 **)v342 == v340)
      {
LABEL_607:
        if ((v341 & 0xFE) != 0x76)
          goto LABEL_663;
        if (*((_DWORD *)v340 + 8) != 1)
          goto LABEL_663;
        v343 = *((_QWORD *)v340 + 2);
        *(_DWORD *)v417 = 0;
        if (!sub_22EFD8088(v343, (int *)v417))
          goto LABEL_663;
        v344 = (unsigned __int8 **)(v340 + 40);
        v345 = *v340;
        v346 = v345 == 119;
        if (v345 == 119)
          v347 = v340;
        else
          v347 = 0;
        v348 = (unsigned __int8 **)(v347 + 48);
        if (v346)
          v344 = v348;
        v336 = sub_22EFFEB40(*v344);
        goto LABEL_616;
      }
    }
  }
  do
  {
LABEL_616:
    v349 = (unsigned int *)v336;
    LODWORD(v350) = *v336;
    if (v350 > 0xD5)
    {
      if ((_DWORD)v350 == 233)
      {
        LODWORD(v350) = *(_DWORD *)v336;
        if ((*(_DWORD *)v336 & 0x7C0000) != 0x300000)
          break;
        v351 = v336 + 16;
      }
      else
      {
        if ((_DWORD)v350 != 214)
          break;
        v351 = v336 + 24;
      }
    }
    else if ((_DWORD)v350 == 155)
    {
      if ((**((_DWORD **)v336 + 2) & 0x18000) != 0)
        goto LABEL_663;
      v351 = v336 + 24;
      if (!v336[48])
        v351 = v336 + 32;
      LOBYTE(v350) = -101;
    }
    else
    {
      if ((_DWORD)v350 != 176)
        break;
      v350 = *((unsigned int *)v336 + 5);
      if ((_DWORD)v350 == -1)
        goto LABEL_663;
      v351 = &v336[8 * v350 + 40];
      LOBYTE(v350) = -80;
    }
    v336 = *(unsigned __int8 **)v351;
  }
  while (*(unsigned int **)v351 != v349);
  if ((v350 + 113) < 0xFBu || sub_22EFFA8F0((uint64_t)v349) != 1192)
    goto LABEL_663;
  v352 = sub_22EFFED0C(*(unsigned __int8 **)((char *)&v349[2 * (((unint64_t)*v349 >> 18) & 1) + 2]
                                           + ((unint64_t)*v349 >> 24)));
  v353 = (uint64_t)v352;
  if (v339 == 3)
  {
    v354 = sub_22EFFA6B0(v352);
    if (*v354 == 161 && (v354[2] & 0x40) == 0)
    {
      v355 = *((_QWORD *)v354 + 2);
      v356 = v355 && (*(_DWORD *)(v355 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9;
      if (v356
        && sub_22E3CB5E0(*((_QWORD *)v354 + 2))
        && !sub_22E49C868(v355)
        && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v355 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 45
        && *(_QWORD *)(v338[1] & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v355 + 48) & 0xFFFFFFFFFFFFFFF0)
                                                                                + 8) & 0xFFFFFFFFFFFFFFF0))
      {
        if ((*(_DWORD *)(v355 + 28) & 0x7F) == 0x40)
          v357 = 6946;
        else
          v357 = 6880;
        goto LABEL_688;
      }
    }
    goto LABEL_663;
  }
  v364 = sub_22EFFED0C(v352);
  do
  {
    v365 = v364;
    v366 = *v364;
    if (v366 > 0xD5)
    {
      if (v366 == 233)
      {
        if ((*(_DWORD *)v364 & 0x7C0000) != 0x300000)
          break;
        v368 = (unsigned __int8 **)(v364 + 16);
      }
      else
      {
        if (v366 != 214)
          break;
        v368 = (unsigned __int8 **)(v364 + 24);
      }
      goto LABEL_684;
    }
    if (v366 == 155)
    {
      if ((**((_DWORD **)v364 + 2) & 0x18000) != 0)
        break;
      if (v364[48])
        v368 = (unsigned __int8 **)(v364 + 24);
      else
        v368 = (unsigned __int8 **)(v364 + 32);
      goto LABEL_684;
    }
    if (v366 != 176)
      break;
    v367 = *((unsigned int *)v364 + 5);
    if ((_DWORD)v367 == -1)
      break;
    v368 = (unsigned __int8 **)&v364[8 * v367 + 40];
LABEL_684:
    v364 = *v368;
  }
  while (*v368 != v365);
  if ((v365[1] & 3) == 0
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v365 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) == 45)
  {
    v357 = 6879;
LABEL_688:
    sub_22EFFAE7C(v349);
    sub_22E8FCA40((_QWORD *)v12, v369, v357, 0, (uint64_t)v417);
    sub_22E903BEC((unsigned int *)v417);
    sub_22F0D5A50(*(_QWORD *)((char *)v349 + *((unsigned __int8 *)v349 + 3)));
    if ((v370 & 0x80000000) == 0)
    {
      v371 = v349[5];
      if ((v371 & 0x80000000) == 0)
      {
        v372 = v370;
        sub_22F0D5A50(v353);
        for (i = v373; i < 0; i = sub_22F1E25A4(*(_QWORD **)(v12 + 112), i))
        {
          if (!sub_22F1E2980(*(_QWORD *)(v12 + 112), i, 0))
            break;
        }
        sub_22EFFAE7C(v349);
        sub_22E8FCA40((_QWORD *)v12, v376, 0x17B6u, 0, (uint64_t)&v414);
        v422[8] = 0;
        *(_QWORD *)v422 = 0;
        v424 = 0;
        v425 = 0;
        v423 = 0;
        v426 = 0;
        v420 = v372 | ((unint64_t)(i - 1) << 32);
        LOBYTE(v421) = 1;
        v377 = sub_22E890748((uint64_t)&v414, &v420);
        v404 = 0;
        v403 = 0;
        v406 = 0;
        v407 = 0;
        v405 = 0;
        v408 = 0;
        v401 = v371 | (v371 << 32);
        v402 = 1;
        sub_22E890748(v377, &v401);
        if (SHIBYTE(v407) < 0)
          operator delete(v405);
        if (SHIBYTE(v425) < 0)
          operator delete(v423);
        sub_22E903BEC((unsigned int *)&v414);
      }
    }
  }
LABEL_663:
  if ((v381 & 1) == 0)
    sub_22EB48E64(v12);
  v16 = v383;
LABEL_666:
  if (v411 != (_QWORD *)v413)
    free(v411);
  return v16;
}

BOOL sub_22EC412B0(int *a1, uint64_t a2, int *a3, unsigned __int16 *a4, unsigned __int8 **a5, uint64_t a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  void **v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  unsigned __int8 v36;
  unint64_t v37;
  void **v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  _QWORD *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  char v50;
  unsigned __int8 *v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned __int8 *v62;
  uint64_t *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  _QWORD *v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  unint64_t *v78;
  unint64_t v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  void **v84;
  unsigned int *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  _BYTE *v91;
  _BYTE *v92;
  unint64_t v93;
  uint64_t v94;
  unsigned __int8 v95;
  _BOOL8 v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  void **v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  unint64_t *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  void *v123;
  int v124;
  unsigned int v125;
  void *v126;
  uint64_t v127;
  int v128;
  void **v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  unint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  void **v139;
  unsigned __int8 *v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  void **v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  void *v166;
  unint64_t v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  unint64_t **v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t *v179;
  uint64_t v180;
  unsigned int v181;
  uint64_t v182;
  int v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  uint64_t *v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  void **v205;
  _BYTE *v206;
  uint64_t v207;
  unsigned __int8 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  unint64_t v216;
  unsigned __int8 *v217;
  _BYTE *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  int v239;
  uint64_t *v240;
  void *v241;
  uint64_t v242;
  unsigned __int8 *v243;
  _QWORD *v244;
  unsigned __int8 *v245;
  uint64_t v246;
  unsigned int v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  unint64_t v251;
  uint64_t v252;
  void *v253;
  uint64_t v254;
  uint64_t v255;
  unsigned int v256;
  unint64_t v257;
  unsigned int v258;
  BOOL v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  _OWORD *v292;
  unint64_t v293;
  int v294;
  unsigned int v295[25];
  int v296;
  int v297;
  _OWORD *v298;
  unint64_t v299;
  int v300;
  unsigned int v301[25];
  int v302;
  _BYTE v303[96];
  uint64_t v304;
  void *v305;
  __int128 v306;
  void *__p;
  uint64_t v308;
  uint64_t v309;
  char v310;
  int v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unsigned int v315[24];
  _BYTE v316[96];
  _BYTE v317[96];
  _BYTE v318[96];
  unint64_t *v319;
  unint64_t v320;
  void *v321;
  int v322[2];
  int v323;
  uint64_t v324;

  v324 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  if (!*a1)
  {
    v7 = a6;
    v8 = (uint64_t)a5;
    if (a6 == 1)
    {
      v13 = *a5;
      if (**a5 == 180)
      {
        v14 = (unsigned __int8 **)*((_QWORD *)v13 + 2);
        if (((*((_QWORD *)v13 + 3) - (_QWORD)v14) & 0x7FFFFFFF8) == 8)
          v13 = *v14;
      }
    }
    else
    {
      v13 = 0;
    }
    v15 = *((_QWORD *)a3 + 2);
    v320 = v15;
    v16 = a1[46];
    switch(v16)
    {
      case 0:
        if (!a6)
        {
          sub_22EC447A4((_QWORD *)a2, *((_DWORD *)a4 + 1), v15);
          goto LABEL_150;
        }
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0x1230u, 0, (uint64_t)&v321);
        sub_22F0D5A50(*(_QWORD *)v8);
        v107 = v106;
        sub_22F0D60E4(*(_QWORD *)(v8 + 8 * v7 - 8));
        v305 = (void *)__PAIR64__(v108, v107);
LABEL_136:
        v139 = &v321;
        v111 = (uint64_t *)&v305;
        goto LABEL_147;
      case 1:
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0xE8Du, 0, (uint64_t)&v321);
        LODWORD(v314) = 1;
        goto LABEL_96;
      case 2:
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0xA96u, 0, (uint64_t)&v321);
        LODWORD(v305) = 0;
        goto LABEL_114;
      case 3:
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0xA96u, 0, (uint64_t)&v321);
        v121 = 1;
        goto LABEL_113;
      case 4:
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0xA96u, 0, (uint64_t)&v321);
        v121 = 2;
LABEL_113:
        LODWORD(v305) = v121;
LABEL_114:
        sub_22E8900C4((uint64_t)&v321, (int *)&v305);
        goto LABEL_148;
      case 5:
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0xA94u, 0, (uint64_t)v318);
        v85 = (unsigned int *)v318;
        goto LABEL_149;
      case 6:
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0xA99u, 0, (uint64_t)v317);
        v85 = (unsigned int *)v317;
        goto LABEL_149;
      case 7:
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0xA93u, 0, (uint64_t)v316);
        v85 = (unsigned int *)v316;
        goto LABEL_149;
      case 8:
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0xA97u, 0, (uint64_t)v315);
        sub_22E903BEC(v315);
        sub_22F0D5A50(*(_QWORD *)v8);
        sub_22E8FCA40((_QWORD *)a2, v124, 0x1544u, 0, (uint64_t)&v321);
        sub_22F0D5A50(*(_QWORD *)v8);
        *(_QWORD *)((char *)&v306 + 4) = 0;
        BYTE12(v306) = 0;
        v308 = 0;
        v309 = 0x200000000000000;
        v305 = (void *)(v125 | ((unint64_t)v125 << 32));
        LOBYTE(v306) = 0;
        __p = (void *)14453;
        v310 = 0;
        sub_22E890748((uint64_t)&v321, &v305);
        if (SHIBYTE(v309) < 0)
          operator delete(__p);
        goto LABEL_148;
      case 9:
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0xA98u, 0, (uint64_t)&v321);
        LODWORD(v305) = (**(_DWORD **)(a2 + 72) >> 12) & 1;
        sub_22E89519C((uint64_t)&v321, (unsigned int *)&v305);
        goto LABEL_148;
      case 10:
      case 11:
        if (v16 == 10)
          v17 = 2706;
        else
          v17 = 2709;
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), v17, 0, (uint64_t)&v321);
        v18 = *(_QWORD *)(v320 & 0xFFFFFFFFFFFFFFF0);
        if (v18)
        {
          v19 = *(_DWORD *)(v18 + 16);
          if ((v19 & 0xFE) == 0x28)
            goto LABEL_16;
        }
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
          goto LABEL_79;
        v18 = sub_22F10CF48(v18);
        if (!v18)
          goto LABEL_79;
        v19 = *(_DWORD *)(v18 + 16);
LABEL_16:
        if ((v19 & 0x100000) != 0)
        {
          do
          {
            v18 = *(_QWORD *)(*(_QWORD *)(v18 + 32) & 0xFFFFFFFFFFFFFFF0);
            if (v18)
            {
              v276 = *(_DWORD *)(v18 + 16);
              if ((v276 & 0xFE) == 0x28)
                continue;
            }
            v18 = sub_22F10CF48(v18);
            v276 = *(_DWORD *)(v18 + 16);
          }
          while ((v276 & 0x100000) != 0);
        }
        goto LABEL_17;
      case 12:
        v113 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0);
        if (v113)
        {
          v114 = *(_DWORD *)(v113 + 16);
          if ((v114 & 0xFE) == 0x28)
            goto LABEL_367;
        }
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v113 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
        {
          v113 = sub_22F10CF48(v113);
          if (v113)
          {
            v114 = *(_DWORD *)(v113 + 16);
LABEL_367:
            if ((v114 & 0x100000) != 0)
            {
              do
              {
                v113 = *(_QWORD *)(*(_QWORD *)(v113 + 32) & 0xFFFFFFFFFFFFFFF0);
                if (v113)
                {
                  v280 = *(_DWORD *)(v113 + 16);
                  if ((v280 & 0xFE) == 0x28)
                    continue;
                }
                v113 = sub_22F10CF48(v113);
                v280 = *(_DWORD *)(v113 + 16);
              }
              while ((v280 & 0x100000) != 0);
            }
            v15 = *(_QWORD *)(v113 + 32);
          }
        }
        sub_22ED13340((unsigned int *)a2, (uint64_t)v13, v15, 1, &v321, 0);
        goto LABEL_150;
      case 13:
      case 30:
        v30 = a1[47];
        if (v30 != 1)
        {
          if (v30 != 3)
          {
            if (v30 != 2)
              goto LABEL_150;
            v290 = (uint64_t)(a1 + 48);
            v31 = *((_DWORD *)a4 + 1);
            if (v16 == 30)
            {
              *(_QWORD *)v322 = *(_QWORD *)(a2 + 88) + 2128;
              v323 = 4911;
              v32 = *((_QWORD *)v13 + 1);
              v33 = (_BYTE *)sub_22E3B8AAC(*(uint64_t *)v322);
              v321 = v33;
              v34 = v33 + 1;
              v35 = *v33;
              v34[v35] = 9;
              v36 = v35 + 1;
              *v33 = v35 + 2;
              *(_QWORD *)&v33[8 * v35 + 16] = v32;
              v37 = v320;
              v34[v36] = 9;
              *(_QWORD *)&v33[8 * v36 + 16] = v37;
              v38 = &v321;
            }
            else
            {
              *(_QWORD *)&v306 = *(_QWORD *)(a2 + 88) + 2128;
              DWORD2(v306) = 4641;
              v33 = (_BYTE *)sub_22E3B8AAC(v306);
              v305 = v33;
              v206 = v33 + 1;
              v207 = *v33;
              v206[v207] = 9;
              v208 = v207 + 1;
              *v33 = v207 + 2;
              *(_QWORD *)&v33[8 * v207 + 16] = v15;
              v209 = *((_QWORD *)v13 + 1);
              v206[v208] = 9;
              *(_QWORD *)&v33[8 * v208 + 16] = v209;
              v38 = &v305;
            }
            sub_22F0D4E74(*(_QWORD *)v8);
            sub_22E4D6448((uint64_t)(v33 + 336), v210, 1);
            v311 = v31;
            sub_22E78D434((uint64_t)&v312, (uint64_t *)v38);
            sub_22ED1231C(v290, &v311, (_QWORD *)a2, 2, v8, v7, "", 0, 0);
            if (v312 && v313)
            {
              sub_22E3BB10C(v313, v312);
              v312 = 0;
            }
            if (v16 == 30)
            {
LABEL_84:
              v99 = v321;
              if (!v321)
                goto LABEL_150;
              v100 = *(_QWORD *)v322;
              if (!*(_QWORD *)v322)
                goto LABEL_150;
            }
            else
            {
              v99 = v305;
              if (!v305)
                goto LABEL_150;
              v100 = v306;
              if (!(_QWORD)v306)
                goto LABEL_150;
            }
            goto LABEL_216;
          }
          sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0x1363u, 0, (uint64_t)&v321);
          v305 = (void *)*((_QWORD *)v13 + 1);
          v173 = sub_22E8901B8((uint64_t)&v321, (uint64_t *)&v305);
          v174 = *(_QWORD *)(v320 & 0xFFFFFFFFFFFFFFF0);
          if (!v174 || (v175 = *(_DWORD *)(v174 + 16), (v175 & 0xFE) != 0x28))
          {
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v174 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
              || (v174 = sub_22F10CF48(v174)) == 0)
            {
              v176 = (unint64_t **)&v320;
LABEL_196:
              v319 = *v176;
              v177 = sub_22E8901B8(v173, (uint64_t *)&v319);
              sub_22F0D4E74(*(_QWORD *)v8);
              v314 = v178;
              sub_22E8906A0(v177, (uint64_t *)&v314);
              sub_22E903BEC((unsigned int *)&v321);
              v321 = 0;
              sub_22ED03FCC(a1 + 48, a2, *((unsigned int *)a4 + 1), &v321);
              v179 = (unint64_t *)v321;
              goto LABEL_211;
            }
            v175 = *(_DWORD *)(v174 + 16);
          }
          if ((v175 & 0x100000) != 0)
          {
            do
            {
              v174 = *(_QWORD *)(*(_QWORD *)(v174 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (v174)
              {
                v285 = *(_DWORD *)(v174 + 16);
                if ((v285 & 0xFE) == 0x28)
                  continue;
              }
              v174 = sub_22F10CF48(v174);
              v285 = *(_DWORD *)(v174 + 16);
            }
            while ((v285 & 0x100000) != 0);
          }
          v176 = (unint64_t **)(v174 + 32);
          goto LABEL_196;
        }
        v180 = (uint64_t)(a1 + 48);
        sub_22ECFE46C(&v321);
        v181 = *((_DWORD *)a4 + 1);
        v182 = *(_QWORD *)(v320 & 0xFFFFFFFFFFFFFFF0);
        if (v182)
        {
          v183 = *(_DWORD *)(v182 + 16);
          if ((v183 & 0xFE) == 0x28)
            goto LABEL_406;
        }
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v182 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28
          && (v182 = sub_22F10CF48(v182)) != 0)
        {
          v183 = *(_DWORD *)(v182 + 16);
LABEL_406:
          if ((v183 & 0x100000) != 0)
          {
            do
            {
              v182 = *(_QWORD *)(*(_QWORD *)(v182 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (v182)
              {
                v286 = *(_DWORD *)(v182 + 16);
                if ((v286 & 0xFE) == 0x28)
                  continue;
              }
              v182 = sub_22F10CF48(v182);
              v286 = *(_DWORD *)(v182 + 16);
            }
            while ((v286 & 0x100000) != 0);
          }
          v184 = (uint64_t *)(v182 + 32);
        }
        else
        {
          v184 = (uint64_t *)&v320;
        }
        v185 = *v184;
        v319 = (unint64_t *)*((_QWORD *)v13 + 1);
        sub_22F0D4E74(*(_QWORD *)v8);
        v314 = v186;
        v305 = &unk_24FAB8820;
        LODWORD(v306) = 5000;
        *((_QWORD *)&v306 + 1) = &v319;
        __p = &v314;
        if ((sub_22EE8B0B0(a2, v181, v185) & 1) != 0)
          goto LABEL_207;
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0x1387u, 0, (uint64_t)&v305);
        LOBYTE(v302) = *a3 == 3;
        v187 = sub_22E894E38((uint64_t)&v305, (unsigned __int8 *)&v302);
        v319 = (unint64_t *)*((_QWORD *)v13 + 1);
        v188 = sub_22E8901B8(v187, (uint64_t *)&v319);
        sub_22F0D4E74(*(_QWORD *)v8);
        v314 = v189;
        v190 = sub_22E8906A0(v188, (uint64_t *)&v314);
        v191 = *(_QWORD *)(v320 & 0xFFFFFFFFFFFFFFF0);
        if (v191)
        {
          v192 = *(_DWORD *)(v191 + 16);
          if ((v192 & 0xFE) == 0x28)
            goto LABEL_439;
        }
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v191 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28
          && (v191 = sub_22F10CF48(v191)) != 0)
        {
          v192 = *(_DWORD *)(v191 + 16);
LABEL_439:
          if ((v192 & 0x100000) != 0)
          {
            do
            {
              v191 = *(_QWORD *)(*(_QWORD *)(v191 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (v191)
              {
                v288 = *(_DWORD *)(v191 + 16);
                if ((v288 & 0xFE) == 0x28)
                  continue;
              }
              v191 = sub_22F10CF48(v191);
              v288 = *(_DWORD *)(v191 + 16);
            }
            while ((v288 & 0x100000) != 0);
          }
          v193 = (uint64_t *)(v191 + 32);
        }
        else
        {
          v193 = (uint64_t *)&v320;
        }
        v304 = *v193;
        sub_22E8901B8(v190, &v304);
        sub_22E903BEC((unsigned int *)&v305);
LABEL_207:
        sub_22ECFEBA0(v180, a2, v8, v7, (char *)v321, v322[0], "", 0, 0);
        if (v321 != &v323)
          free(v321);
        goto LABEL_150;
      case 14:
        if (**a5 != 180)
          goto LABEL_65;
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0xE9Eu, 0, (uint64_t)&v321);
        v70 = *(_QWORD *)(v320 & 0xFFFFFFFFFFFFFFF0);
        if (v70)
        {
          v71 = *(_DWORD *)(v70 + 16);
          if ((v71 & 0xFE) == 0x28)
            goto LABEL_398;
        }
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v70 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28
          && (v70 = sub_22F10CF48(v70)) != 0)
        {
          v71 = *(_DWORD *)(v70 + 16);
LABEL_398:
          if ((v71 & 0x100000) != 0)
          {
            do
            {
              v70 = *(_QWORD *)(*(_QWORD *)(v70 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (v70)
              {
                v284 = *(_DWORD *)(v70 + 16);
                if ((v284 & 0xFE) == 0x28)
                  continue;
              }
              v70 = sub_22F10CF48(v70);
              v284 = *(_DWORD *)(v70 + 16);
            }
            while ((v284 & 0x100000) != 0);
          }
          v72 = (unint64_t *)(v70 + 32);
        }
        else
        {
          v72 = &v320;
        }
        v73 = *v72;
        if ((v73 & 4) != 0)
          LOBYTE(v74) = 1;
        else
          v74 = (*(unsigned __int8 *)((v73 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
        LOBYTE(v314) = v74;
        v202 = sub_22E894E38((uint64_t)&v321, (unsigned __int8 *)&v314);
        v203 = *(_QWORD *)(v320 & 0xFFFFFFFFFFFFFFF0);
        if (v203)
        {
          v204 = *(_DWORD *)(v203 + 16);
          if ((v204 & 0xFE) == 0x28)
            goto LABEL_410;
        }
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v203 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28
          && (v203 = sub_22F10CF48(v203)) != 0)
        {
          v204 = *(_DWORD *)(v203 + 16);
LABEL_410:
          if ((v204 & 0x100000) != 0)
          {
            do
            {
              v203 = *(_QWORD *)(*(_QWORD *)(v203 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (v203)
              {
                v287 = *(_DWORD *)(v203 + 16);
                if ((v287 & 0xFE) == 0x28)
                  continue;
              }
              v203 = sub_22F10CF48(v203);
              v287 = *(_DWORD *)(v203 + 16);
            }
            while ((v287 & 0x100000) != 0);
          }
          v205 = (void **)(v203 + 32);
        }
        else
        {
          v205 = (void **)&v320;
        }
        v305 = *v205;
        v104 = v202;
LABEL_97:
        v109 = sub_22E8901B8(v104, (uint64_t *)&v305);
        sub_22F0D4E74(*(_QWORD *)v8);
        v319 = v110;
        v111 = (uint64_t *)&v319;
        goto LABEL_146;
      case 15:
        v140 = sub_22F0018D8(*a5);
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0x122Bu, 0, (uint64_t)&v321);
        if ((v320 & 4) != 0)
          LOBYTE(v141) = 1;
        else
          v141 = (*(unsigned __int8 *)((v320 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
        LOBYTE(v314) = v141;
        v165 = sub_22E894E38((uint64_t)&v321, (unsigned __int8 *)&v314);
        if (v140)
          v166 = (void *)*((_QWORD *)v140 + 5);
        else
          v166 = 0;
        v305 = v166;
        v197 = sub_22E894538(v165, (uint64_t *)&v305);
        LOBYTE(v304) = v140 != 0;
        v198 = sub_22E894E38(v197, (unsigned __int8 *)&v304);
        sub_22F0D4E74(*(_QWORD *)v8);
        v319 = v199;
        sub_22E8906A0(v198, (uint64_t *)&v319);
        sub_22E903BEC((unsigned int *)&v321);
        if (!v140)
          goto LABEL_150;
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)v140 + 6), 0x1558u, 0, (uint64_t)v303);
        v85 = (unsigned int *)v303;
        goto LABEL_149;
      case 16:
        v67 = *((_DWORD *)a4 + 1);
        v68 = (_QWORD *)a2;
        v69 = 4654;
        goto LABEL_117;
      case 17:
        v67 = *((_DWORD *)a4 + 1);
        v68 = (_QWORD *)a2;
        v69 = 4652;
        goto LABEL_117;
      case 18:
        v67 = *((_DWORD *)a4 + 1);
        v68 = (_QWORD *)a2;
        v69 = 4653;
LABEL_117:
        sub_22E8FCA40(v68, v67, v69, 0, (uint64_t)&v321);
        if ((v320 & 4) != 0)
          LOBYTE(v122) = 1;
        else
          v122 = (*(unsigned __int8 *)((v320 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
        LOBYTE(v319) = v122;
        v112 = sub_22E894E38((uint64_t)&v321, (unsigned __int8 *)&v319);
        goto LABEL_121;
      case 19:
LABEL_65:
        if (v16 == 14)
          v75 = 3743;
        else
          v75 = 3744;
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), v75, 0, (uint64_t)&v321);
        v76 = *(_QWORD *)(v320 & 0xFFFFFFFFFFFFFFF0);
        if (v76)
        {
          v77 = *(_DWORD *)(v76 + 16);
          if ((v77 & 0xFE) == 0x28)
            goto LABEL_353;
        }
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v76 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28
          && (v76 = sub_22F10CF48(v76)) != 0)
        {
          v77 = *(_DWORD *)(v76 + 16);
LABEL_353:
          if ((v77 & 0x100000) != 0)
          {
            do
            {
              v76 = *(_QWORD *)(*(_QWORD *)(v76 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (v76)
              {
                v277 = *(_DWORD *)(v76 + 16);
                if ((v277 & 0xFE) == 0x28)
                  continue;
              }
              v76 = sub_22F10CF48(v76);
              v277 = *(_DWORD *)(v76 + 16);
            }
            while ((v277 & 0x100000) != 0);
          }
          v78 = (unint64_t *)(v76 + 32);
        }
        else
        {
          v78 = &v320;
        }
        v79 = *v78;
        if ((v79 & 4) != 0)
          LOBYTE(v80) = 1;
        else
          v80 = (*(unsigned __int8 *)((v79 & 0xFFFFFFFFFFFFFFF0) + 8) >> 2) & 1;
        LOBYTE(v304) = v80;
        v142 = sub_22E894E38((uint64_t)&v321, (unsigned __int8 *)&v304);
        v143 = *(_QWORD *)(v320 & 0xFFFFFFFFFFFFFFF0);
        if (v143)
        {
          v144 = *(_DWORD *)(v143 + 16);
          if ((v144 & 0xFE) == 0x28)
            goto LABEL_357;
        }
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v143 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28
          && (v143 = sub_22F10CF48(v143)) != 0)
        {
          v144 = *(_DWORD *)(v143 + 16);
LABEL_357:
          if ((v144 & 0x100000) != 0)
          {
            do
            {
              v143 = *(_QWORD *)(*(_QWORD *)(v143 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (v143)
              {
                v278 = *(_DWORD *)(v143 + 16);
                if ((v278 & 0xFE) == 0x28)
                  continue;
              }
              v143 = sub_22F10CF48(v143);
              v278 = *(_DWORD *)(v143 + 16);
            }
            while ((v278 & 0x100000) != 0);
          }
          v145 = (void **)(v143 + 32);
        }
        else
        {
          v145 = (void **)&v320;
        }
        v305 = *v145;
        v84 = (void **)v142;
        goto LABEL_145;
      case 20:
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0xEA1u, 0, (uint64_t)&v321);
        v18 = *(_QWORD *)(v320 & 0xFFFFFFFFFFFFFFF0);
        if (v18)
        {
          v83 = *(_DWORD *)(v18 + 16);
          if ((v83 & 0xFE) == 0x28)
            goto LABEL_475;
        }
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
        {
          v18 = sub_22F10CF48(v18);
          if (v18)
          {
            while (1)
            {
              v83 = *(_DWORD *)(v18 + 16);
              do
              {
LABEL_475:
                if ((v83 & 0x100000) == 0)
                {
LABEL_17:
                  v20 = (void **)(v18 + 32);
                  goto LABEL_80;
                }
                v18 = *(_QWORD *)(*(_QWORD *)(v18 + 32) & 0xFFFFFFFFFFFFFFF0);
                if (!v18)
                  break;
                v83 = *(_DWORD *)(v18 + 16);
              }
              while ((v83 & 0xFE) == 0x28);
              v18 = sub_22F10CF48(v18);
            }
          }
        }
LABEL_79:
        v20 = (void **)&v320;
LABEL_80:
        v305 = *v20;
        v84 = &v321;
LABEL_145:
        v146 = sub_22E8901B8((uint64_t)v84, (uint64_t *)&v305);
        v319 = (unint64_t *)*((_QWORD *)v13 + 1);
        v109 = sub_22E8901B8(v146, (uint64_t *)&v319);
        sub_22F0D4E74(*(_QWORD *)v8);
        v314 = v147;
        v111 = (uint64_t *)&v314;
        goto LABEL_146;
      case 21:
        v115 = (unint64_t *)*((_QWORD *)v13 + 1);
        v319 = v115;
        v116 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0);
        if (v116)
        {
          v117 = *(_DWORD *)(v116 + 16);
          if ((v117 & 0xFE) == 0x28)
            goto LABEL_371;
        }
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v116 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
        {
          v116 = sub_22F10CF48(v116);
          if (v116)
          {
            v117 = *(_DWORD *)(v116 + 16);
LABEL_371:
            if ((v117 & 0x100000) != 0)
            {
              do
              {
                v116 = *(_QWORD *)(*(_QWORD *)(v116 + 32) & 0xFFFFFFFFFFFFFFF0);
                if (v116)
                {
                  v281 = *(_DWORD *)(v116 + 16);
                  if ((v281 & 0xFE) == 0x28)
                    continue;
                }
                v116 = sub_22F10CF48(v116);
                v281 = *(_DWORD *)(v116 + 16);
              }
              while ((v281 & 0x100000) != 0);
            }
            v15 = *(_QWORD *)(v116 + 32);
          }
        }
        v314 = v15;
        v118 = *(_QWORD *)(((unint64_t)v115 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v118 & 8) != 0)
        {
          v120 = *(_QWORD *)((v118 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          v119 = *(_QWORD *)((v118 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
        }
        else
        {
          v119 = 0;
          v120 = 0;
        }
        v151 = (void *)(v119 | v120 | (v118 | v115) & 7);
        v152 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v152 & 8) != 0)
        {
          v154 = *(_QWORD *)((v152 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          v153 = *(_QWORD *)((v152 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
        }
        else
        {
          v153 = 0;
          v154 = 0;
        }
        v321 = v151;
        sub_22E96251C((unsigned int *)&v321, v153 | v154 | (v152 | v15) & 7);
        v155 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v155 & 8) != 0)
          v156 = *(_DWORD *)((v155 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
        else
          v156 = 0;
        v157 = *(_QWORD *)(((unint64_t)v115 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v157 & 8) != 0)
          v158 = *(_DWORD *)((v157 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
        else
          v158 = 0;
        v159 = (unint64_t)v321;
        if (sub_22E95F2F0(v156, v158))
        {
          if ((v159 & 0x600) != 0)
          {
            sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0xF37u, 0, (uint64_t)&v321);
            v160 = sub_22E8901B8((uint64_t)&v321, (uint64_t *)&v314);
            v161 = sub_22E8901B8(v160, (uint64_t *)&v319);
            LODWORD(v304) = (v159 >> 9) & 3;
            v112 = sub_22EC44A2C(v161, (unsigned int *)&v304);
            goto LABEL_121;
          }
          if ((v159 & 0xCFFFFFFFFLL) != 0)
          {
            sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0x1227u, 0, (uint64_t)&v321);
            v211 = sub_22E8901B8((uint64_t)&v321, (uint64_t *)&v314);
            v212 = sub_22E8901B8(v211, (uint64_t *)&v319);
            LODWORD(v304) = 0;
            v213 = sub_22E8900C4(v212, (int *)&v304);
            v214 = v213;
            v215 = v159 & 7;
            v216 = v159 & 7;
            if (*(_BYTE *)(v213 + 80))
            {
              v217 = *(unsigned __int8 **)(v213 + 32);
              if (!v217)
              {
                v217 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(v214 + 40));
                *(_QWORD *)(v214 + 32) = v217;
              }
              v217[*v217 + 1] = 8;
              v218 = *(_BYTE **)(v214 + 32);
            }
            else
            {
              if (!*(_BYTE *)(v213 + 92))
              {
LABEL_247:
                v302 = v215;
                v112 = sub_22E89519C(v214, (unsigned int *)&v302);
LABEL_121:
                v109 = v112;
                sub_22F0D4E74(*(_QWORD *)v8);
                v305 = v123;
                v111 = (uint64_t *)&v305;
LABEL_146:
                v139 = (void **)v109;
LABEL_147:
                sub_22E8906A0((uint64_t)v139, v111);
                goto LABEL_148;
              }
              v240 = (uint64_t *)(*(_QWORD *)v213 + 12784);
              v241 = *(void **)(v213 + 16);
              if (v241)
                v241 = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v241 + 32))(v241);
              v305 = v241;
              v242 = sub_22F2F1D6C(v240, (uint64_t *)&v305)[1] + 32 * *(unsigned int *)(v214 + 88);
              v245 = *(unsigned __int8 **)(v242 + 8);
              v244 = (_QWORD *)(v242 + 8);
              v243 = v245;
              if (!v245)
              {
                v243 = (unsigned __int8 *)sub_22E3B8AAC(v244[1]);
                *v244 = v243;
              }
              v243[*v243 + 1] = 8;
              v218 = (_BYTE *)*v244;
            }
            v219 = *v218;
            *v218 = v219 + 1;
            *(_QWORD *)&v218[8 * v219 + 16] = v216;
            goto LABEL_247;
          }
          sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0x1227u, 0, (uint64_t)&v321);
          v220 = sub_22E8901B8((uint64_t)&v321, (uint64_t *)&v314);
          v163 = sub_22E8901B8(v220, (uint64_t *)&v319);
          v164 = 2;
        }
        else
        {
          sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0x1227u, 0, (uint64_t)&v321);
          v162 = sub_22E8901B8((uint64_t)&v321, (uint64_t *)&v314);
          v163 = sub_22E8901B8(v162, (uint64_t *)&v319);
          v164 = 1;
        }
        LODWORD(v304) = v164;
        v112 = sub_22E8900C4(v163, (int *)&v304);
        goto LABEL_121;
      case 22:
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0x122Au, 0, (uint64_t)&v321);
        v105 = (uint64_t)&v321;
        goto LABEL_99;
      case 23:
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0x1228u, 0, (uint64_t)&v321);
        v127 = *(_QWORD *)(v320 & 0xFFFFFFFFFFFFFFF0);
        if (v127)
        {
          v128 = *(_DWORD *)(v127 + 16);
          if ((v128 & 0xFE) == 0x28)
            goto LABEL_375;
        }
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v127 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28
          && (v127 = sub_22F10CF48(v127)) != 0)
        {
          v128 = *(_DWORD *)(v127 + 16);
LABEL_375:
          if ((v128 & 0x100000) != 0)
          {
            do
            {
              v127 = *(_QWORD *)(*(_QWORD *)(v127 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (v127)
              {
                v282 = *(_DWORD *)(v127 + 16);
                if ((v282 & 0xFE) == 0x28)
                  continue;
              }
              v127 = sub_22F10CF48(v127);
              v282 = *(_DWORD *)(v127 + 16);
            }
            while ((v282 & 0x100000) != 0);
          }
          v129 = (void **)(v127 + 32);
        }
        else
        {
          v129 = (void **)&v320;
        }
        v305 = *v129;
        v130 = sub_22E8901B8((uint64_t)&v321, (uint64_t *)&v305);
        v131 = *(_QWORD *)(v320 & 0xFFFFFFFFFFFFFFF0);
        if (v131)
        {
          v132 = *(_DWORD *)(v131 + 16);
          if ((v132 & 0xFE) == 0x28)
            goto LABEL_379;
        }
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v131 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28
          && (v131 = sub_22F10CF48(v131)) != 0)
        {
          v132 = *(_DWORD *)(v131 + 16);
LABEL_379:
          if ((v132 & 0x100000) != 0)
          {
            do
            {
              v131 = *(_QWORD *)(*(_QWORD *)(v131 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (v131)
              {
                v283 = *(_DWORD *)(v131 + 16);
                if ((v283 & 0xFE) == 0x28)
                  continue;
              }
              v131 = sub_22F10CF48(v131);
              v283 = *(_DWORD *)(v131 + 16);
            }
            while ((v283 & 0x100000) != 0);
          }
          v133 = (unint64_t *)(v131 + 32);
        }
        else
        {
          v133 = &v320;
        }
        LOBYTE(v304) = sub_22F1110EC(*(_QWORD *)(*v133 & 0xFFFFFFFFFFFFFFF0), 0);
        v134 = sub_22E894E38(v130, (unsigned __int8 *)&v304);
        LOBYTE(v302) = (*(_DWORD *)v13 & 0x300) == 256;
        v135 = sub_22E894E38(v134, (unsigned __int8 *)&v302);
        v319 = (unint64_t *)*((_QWORD *)v13 + 1);
        v136 = sub_22E8901B8(v135, (uint64_t *)&v319);
        sub_22F0D4E74(*(_QWORD *)v8);
        v314 = v137;
        sub_22E8906A0(v136, (uint64_t *)&v314);
        sub_22E903BEC((unsigned int *)&v321);
        sub_22EC44ACC((unsigned int *)a2, (uint64_t)a3, *(unsigned __int8 **)v8);
        goto LABEL_150;
      case 24:
        v86 = *((_QWORD *)v13 + 1);
        v87 = *(_QWORD *)(a2 + 88) + 2128;
        v88 = *a3;
        v89 = (_BYTE *)sub_22E3B8AAC(v87);
        v90 = *v89;
        v91 = v89 + 1;
        v91[v90] = 2;
        v92 = v89 + 16;
        *(_QWORD *)&v89[8 * v90 + 16] = v88;
        v93 = v320;
        v94 = (v90 + 1);
        v91[v94] = 9;
        v95 = v90 + 2;
        *v89 = v90 + 2;
        *(_QWORD *)&v89[8 * v94 + 16] = v93;
        v96 = (*(_DWORD *)v13 & 0x300) == 256;
        v91[v95] = 2;
        *(_QWORD *)&v92[8 * v95] = v96;
        v97 = (v90 + 3);
        v91[v97] = 9;
        *v89 = v90 + 4;
        *(_QWORD *)&v92[8 * v97] = v86;
        sub_22F0D4E74(*(_QWORD *)v8);
        sub_22E4D6448((uint64_t)(v89 + 336), v98, 1);
        v323 = 3610;
        *(_QWORD *)v322 = v87;
        v321 = (void *)sub_22E3B8AAC(v87);
        sub_22E78D4E8(v321, (uint64_t)v89);
        sub_22E3BB10C(v87, (unint64_t)v89);
        sub_22ECFC6F4(a2, (unsigned __int8 **)&v321, v86, v320);
        sub_22E90379C((_QWORD *)a2, *((_DWORD *)a4 + 1), (uint64_t)&v321, 0, (uint64_t)v301);
        sub_22E903BEC(v301);
        sub_22EC44ACC((unsigned int *)a2, (uint64_t)a3, *(unsigned __int8 **)v8);
        goto LABEL_84;
      case 26:
        v62 = *a5;
        if (**a5 == 180
          && (v63 = (uint64_t *)*((_QWORD *)v62 + 2), ((*((_QWORD *)v62 + 3) - (_QWORD)v63) & 0x7FFFFFFF8) != 0))
        {
          sub_22F0D60E4(*v63);
          v65 = v64;
          sub_22EFFD9B4((unint64_t)v62);
        }
        else
        {
          sub_22F0D60E4((uint64_t)*a5);
          v65 = v149;
          sub_22F0D60E4(*(_QWORD *)(v8 + 8 * v7 - 8));
        }
        v305 = (void *)(v65 | (unint64_t)(v66 << 32));
        LODWORD(v305) = sub_22F141A3C(v65, 0, *(_QWORD **)(a2 + 112), *(_DWORD **)(a2 + 72));
        if (*a4 < 0x400u)
        {
          sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0xCEAu, 0, (uint64_t)&v321);
          LODWORD(v319) = 2;
          v150 = sub_22E8900C4((uint64_t)&v321, (int *)&v319);
        }
        else
        {
          sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0xB98u, 0, (uint64_t)&v321);
          v150 = (uint64_t)&v321;
        }
        sub_22E8906A0(v150, (uint64_t *)&v305);
        goto LABEL_148;
      case 27:
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0xE8Du, 0, (uint64_t)&v321);
        LODWORD(v314) = 0;
LABEL_96:
        v104 = sub_22E8900C4((uint64_t)&v321, (int *)&v314);
        v305 = (void *)*((_QWORD *)a3 + 2);
        goto LABEL_97;
      case 28:
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0x1229u, 0, (uint64_t)&v321);
        v101 = *(_QWORD *)(v320 & 0xFFFFFFFFFFFFFFF0);
        if (v101)
        {
          v102 = *(_DWORD *)(v101 + 16);
          if ((v102 & 0xFE) == 0x28)
            goto LABEL_363;
        }
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v101 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28
          && (v101 = sub_22F10CF48(v101)) != 0)
        {
          v102 = *(_DWORD *)(v101 + 16);
LABEL_363:
          if ((v102 & 0x100000) != 0)
          {
            do
            {
              v101 = *(_QWORD *)(*(_QWORD *)(v101 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (v101)
              {
                v279 = *(_DWORD *)(v101 + 16);
                if ((v279 & 0xFE) == 0x28)
                  continue;
              }
              v101 = sub_22F10CF48(v101);
              v279 = *(_DWORD *)(v101 + 16);
            }
            while ((v279 & 0x100000) != 0);
          }
          v103 = (void **)(v101 + 32);
        }
        else
        {
          v103 = (void **)&v320;
        }
        v305 = *v103;
        v104 = (uint64_t)&v321;
        goto LABEL_97;
      case 29:
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0xE1Eu, 0, (uint64_t)&v321);
        LOBYTE(v319) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v320 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                + 16) == 45;
        v105 = sub_22E894E38((uint64_t)&v321, (unsigned __int8 *)&v319);
LABEL_99:
        v112 = sub_22E8901B8(v105, (uint64_t *)&v320);
        goto LABEL_121;
      case 31:
      case 32:
        v305 = 0;
        if (a6)
        {
          sub_22F0D5A50((uint64_t)*a5);
          v22 = v21;
          sub_22F0D60E4(*(_QWORD *)(v8 + 8 * v7 - 8));
          v305 = (void *)(v22 | (unint64_t)(v23 << 32));
        }
        if (v16 == 32)
        {
          v24 = *(_QWORD *)v8;
          v8 = *(_QWORD *)(*(_QWORD *)v8 + 16);
          LODWORD(v7) = (unint64_t)(*(_QWORD *)(v24 + 24) - v8) >> 3;
        }
        v25 = a1[47];
        if (v25 != 1)
        {
          if (v25 != 3)
          {
            if (v25 != 2)
            {
LABEL_150:
              sub_22EC3CEBC((unsigned int *)a2, (unsigned int *)a3);
              return v6 == 0;
            }
            v26 = *((_DWORD *)a4 + 1);
            v27 = *(_QWORD *)(a2 + 88) + 2128;
            v28 = (_BYTE *)sub_22E3B8AAC(v27);
            v29 = *v28;
            v28[v29 + 1] = 9;
            *v28 = v29 + 1;
            *(_QWORD *)&v28[8 * v29 + 16] = v15;
            sub_22E4D6448((uint64_t)(v28 + 336), (uint64_t)v305, 1);
            v297 = v26;
            v300 = 4462;
            v299 = v27;
            v298 = (_OWORD *)sub_22E3B8AAC(v27);
            sub_22E78D4E8(v298, (uint64_t)v28);
            sub_22ED1231C((uint64_t)(a1 + 48), &v297, (_QWORD *)a2, 2, v8, v7, "", 0, 0);
            if (v298 && v299)
            {
              sub_22E3BB10C(v299, (unint64_t)v298);
              v298 = 0;
            }
            goto LABEL_215;
          }
          v319 = 0;
          if (sub_22ED03FCC(a1 + 48, a2, *((unsigned int *)a4 + 1), &v319) == 3)
          {
            v167 = *v319;
            if ((*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)*v319 + 32))(*v319) + 82) & 0x40) != 0
              && (*(_BYTE *)(v167 + 83) & 2) != 0
              && (*(_DWORD *)(v167 + 28) & 0x7Eu) - 54 <= 3)
            {
              sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0x117Bu, 0, (uint64_t)&v321);
              LOBYTE(v314) = sub_22EAB3978(a2, *v319);
              LODWORD(v314) = v314;
              v168 = sub_22E8900C4((uint64_t)&v321, (int *)&v314);
            }
            else
            {
              sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0x1177u, 0, (uint64_t)&v321);
              v168 = (uint64_t)&v321;
            }
            v194 = sub_22E8901B8(v168, (uint64_t *)&v320);
            sub_22E8906A0(v194, (uint64_t *)&v305);
            sub_22E903BEC((unsigned int *)&v321);
            v179 = v319;
LABEL_211:
            sub_22EB17D68(a2, *v179);
            goto LABEL_150;
          }
          sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0x1177u, 0, (uint64_t)&v321);
          v289 = sub_22E8901B8((uint64_t)&v321, (uint64_t *)&v320);
          sub_22E8906A0(v289, (uint64_t *)&v305);
          sub_22E8FCBA4((unsigned int *)&v321);
          __break(1u);
          goto LABEL_467;
        }
        if (*(_BYTE *)a4 != 3
          || (v169 = *a3, *a3 != 10) && v169 != 6
          || (v170 = *(_QWORD *)(a2 + 216), (*(_WORD *)(v170 + 8) & 0x7F) != 0x37))
        {
          v195 = *((_DWORD *)a4 + 1);
          v27 = *(_QWORD *)(a2 + 88) + 2128;
          v28 = (_BYTE *)sub_22E3B8AAC(v27);
          v196 = *v28;
          v28[v196 + 1] = 9;
          *v28 = v196 + 1;
          *(_QWORD *)&v28[8 * v196 + 16] = v15;
          sub_22E4D6448((uint64_t)(v28 + 336), (uint64_t)v305, 1);
          v291 = v195;
          v294 = 4482;
          v293 = v27;
          v292 = (_OWORD *)sub_22E3B8AAC(v27);
          sub_22E78D4E8(v292, (uint64_t)v28);
          sub_22ED1231C((uint64_t)(a1 + 48), &v291, (_QWORD *)a2, 0, v8, v7, "", 0, 0);
          if (v292 && v293)
          {
            sub_22E3BB10C(v293, (unint64_t)v292);
            v292 = 0;
          }
LABEL_215:
          v100 = v27;
          v99 = v28;
LABEL_216:
          sub_22E3BB10C(v100, (unint64_t)v99);
          goto LABEL_150;
        }
        v319 = 0;
        if ((*(_BYTE *)(v170 + 15) & 0x20) != 0)
        {
          v171 = *(_QWORD *)(v170 + 96);
          if (v171)
          {
            do
              v171 = *(_QWORD *)(v171 + 72);
            while (v171 && (*(_DWORD *)(v171 + 28) & 0x7E) == 0x2E);
            v319 = (unint64_t *)sub_22F0AABF8(*(_QWORD *)(v171 + 64));
            v169 = *a3;
          }
        }
        if (v169 == 10)
        {
          sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0xF53u, 0, (uint64_t)&v321);
          if (v319)
            v172 = 2;
          else
            v172 = (*(_DWORD *)(v170 - 44) >> 9) & 1;
          v302 = v172;
          v221 = sub_22E8900C4((uint64_t)&v321, &v302);
          v222 = *(_WORD *)(v170 + 8) & 0x7F;
          v223 = -40;
          if (v222 > 0x46)
          {
            switch(v222)
            {
              case 'S':
                goto LABEL_272;
              case 'G':
                v223 = -56;
                goto LABEL_272;
              case 'Q':
LABEL_272:
                v228 = *(_QWORD *)(v170 + v223 + 16);
                v229 = (_QWORD *)(v228 & 0xFFFFFFFFFFFFFFF8);
                if ((v228 & 4) != 0)
                  v229 = (_QWORD *)*v229;
                if (v229)
                  v230 = (unint64_t)(v229 - 8);
                else
                  v230 = 0;
                v231 = *(_QWORD *)(v230 + 48);
                if (v231)
                  v232 = v231 & 0xFFFFFFFFFFFFFFF0;
                else
                  v232 = sub_22EF6462C(*(_QWORD *)(a2 + 88), v230);
                v314 = v232;
                v233 = sub_22E8901B8(v221, (uint64_t *)&v314);
                v296 = 0;
                v234 = sub_22E8900C4(v233, &v296);
                v304 = *((_QWORD *)a3 + 2);
                v235 = sub_22E8901B8(v234, &v304);
                sub_22E890024(v235, (uint64_t *)&v319);
                sub_22E903BEC((unsigned int *)&v321);
                v236 = *(_QWORD *)(**(_QWORD **)((*((_QWORD *)a3 + 4) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFFFFFFFFFF0);
                if ((*(_BYTE *)(v236 + 8) & 0xF) != 0)
                  v236 = (unint64_t)sub_22F10D2BC(**(_QWORD **)((*((_QWORD *)a3 + 4) & 0xFFFFFFFFFFFFFFF8) + 16));
                v8 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v236 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                             + 24));
                sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(v8 + 24), 0x1771u, 0, (uint64_t)&v321);
                v237 = *(_QWORD *)(v8 + 48);
                if (v237)
                {
LABEL_283:
                  v238 = v237 & 0xFFFFFFFFFFFFFFF0;
LABEL_284:
                  v314 = v238;
                  sub_22E8901B8((uint64_t)&v321, (uint64_t *)&v314);
LABEL_148:
                  v85 = (unsigned int *)&v321;
LABEL_149:
                  sub_22E903BEC(v85);
                  goto LABEL_150;
                }
LABEL_467:
                v275 = *(_QWORD *)(a2 + 88);
                v274 = v8;
LABEL_468:
                v238 = sub_22EF6462C(v275, v274);
                goto LABEL_284;
            }
          }
          else
          {
            if (v222 <= 0x18)
            {
              if (v222 == 16)
              {
LABEL_252:
                v223 = -48;
                goto LABEL_272;
              }
              if (((1 << v222) & 0x1066) != 0)
                goto LABEL_272;
              if (v222 == 24)
                goto LABEL_252;
            }
            if (v222 == 70)
            {
LABEL_270:
              v223 = -64;
              goto LABEL_272;
            }
          }
          if (v222 - 52 >= 6)
          {
            if (v222 - 33 >= 5)
              goto LABEL_252;
            goto LABEL_270;
          }
          v223 = -72;
          goto LABEL_272;
        }
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0xF53u, 0, (uint64_t)&v321);
        if (v319)
          v239 = 2;
        else
          v239 = (*(_DWORD *)(v170 - 44) >> 9) & 1;
        v302 = v239;
        v246 = sub_22E8900C4((uint64_t)&v321, &v302);
        v247 = *(_WORD *)(v170 + 8) & 0x7F;
        v248 = -40;
        if (v247 > 0x46)
        {
          if (v247 == 83)
            goto LABEL_334;
          if (v247 == 71)
          {
            v248 = -56;
            goto LABEL_334;
          }
          if (v247 != 81)
          {
LABEL_329:
            v258 = v247 - 52;
            v259 = v247 - 33 >= 5;
            v260 = -48;
            if (!v259)
              v260 = -64;
            if (v258 >= 6)
              v248 = v260;
            else
              v248 = -72;
          }
        }
        else
        {
          if (v247 > 0x18)
            goto LABEL_328;
          if (v247 == 16)
          {
LABEL_307:
            v248 = -48;
            goto LABEL_334;
          }
          if (((1 << v247) & 0x1066) == 0)
          {
            if (v247 == 24)
              goto LABEL_307;
LABEL_328:
            if (v247 == 70)
            {
              v248 = -64;
              goto LABEL_334;
            }
            goto LABEL_329;
          }
        }
LABEL_334:
        v261 = *(_QWORD *)(v170 + v248 + 16);
        v262 = (_QWORD *)(v261 & 0xFFFFFFFFFFFFFFF8);
        if ((v261 & 4) != 0)
          v262 = (_QWORD *)*v262;
        if (v262)
          v263 = (unint64_t)(v262 - 8);
        else
          v263 = 0;
        v264 = *(_QWORD *)(v263 + 48);
        if (v264)
          v265 = v264 & 0xFFFFFFFFFFFFFFF0;
        else
          v265 = sub_22EF6462C(*(_QWORD *)(a2 + 88), v263);
        v314 = v265;
        v266 = sub_22E8901B8(v246, (uint64_t *)&v314);
        v296 = 1;
        v267 = sub_22E8900C4(v266, &v296);
        v304 = sub_22F3359A8((unsigned int *)a3);
        v268 = sub_22E894538(v267, &v304);
        sub_22E890024(v268, (uint64_t *)&v319);
        sub_22E903BEC((unsigned int *)&v321);
        v256 = *a3;
        switch(*a3)
        {
          case 0:
          case 2:
          case 6:
            goto LABEL_346;
          case 1:
            goto LABEL_345;
          case 3:
          case 4:
          case 5:
            goto LABEL_343;
          default:
            goto LABEL_344;
        }
      case 33:
        if (*a3 != 6 || (v46 = *(_QWORD *)(a2 + 216), (*(_WORD *)(v46 + 8) & 0x7F) != 0x37))
        {
          sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0xC83u, 0, (uint64_t)&v321);
          v47 = sub_22E8901B8((uint64_t)&v321, (uint64_t *)&v320);
          v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v320 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          if (v48)
            v49 = *(_BYTE *)(v48 + 16) == 45;
          else
            v49 = 0;
          v50 = v49;
          LOBYTE(v305) = v50;
          v51 = (unsigned __int8 *)&v305;
LABEL_125:
          sub_22E894E38(v47, v51);
          goto LABEL_148;
        }
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0x13C8u, 0, (uint64_t)&v321);
        if ((*(_BYTE *)(v46 + 15) & 0x20) != 0 && *(_QWORD *)(v46 + 96))
          v224 = 2;
        else
          v224 = (*(_DWORD *)(v46 - 44) >> 9) & 1;
        LODWORD(v314) = v224;
        v225 = sub_22E8900C4((uint64_t)&v321, (int *)&v314);
        v226 = *(_WORD *)(v46 + 8) & 0x7F;
        v227 = -40;
        if (v226 > 0x46)
        {
          if (v226 != 83)
          {
            if (v226 == 71)
            {
              v227 = -56;
              goto LABEL_309;
            }
            if (v226 == 81)
              goto LABEL_309;
LABEL_299:
            if (v226 - 52 < 6)
            {
              v227 = -72;
            }
            else
            {
              v227 = -48;
              if (v226 - 33 < 5)
                v227 = -64;
            }
          }
        }
        else
        {
          if (v226 > 0x18)
            goto LABEL_298;
          if (v226 != 16)
          {
            if (((1 << v226) & 0x1066) != 0)
              goto LABEL_309;
            if (v226 != 24)
            {
LABEL_298:
              if (v226 == 70)
              {
                v227 = -64;
                goto LABEL_309;
              }
              goto LABEL_299;
            }
          }
          v227 = -48;
        }
LABEL_309:
        v249 = *(_QWORD *)(v46 + v227 + 16);
        v250 = (_QWORD *)(v249 & 0xFFFFFFFFFFFFFFF8);
        if ((v249 & 4) != 0)
          v250 = (_QWORD *)*v250;
        if (v250)
          v251 = (unint64_t)(v250 - 8);
        else
          v251 = 0;
        v252 = *(_QWORD *)(v251 + 48);
        if (v252)
          v253 = (void *)(v252 & 0xFFFFFFFFFFFFFFF0);
        else
          v253 = (void *)sub_22EF6462C(*(_QWORD *)(a2 + 88), v251);
        v305 = v253;
        v254 = sub_22E8901B8(v225, (uint64_t *)&v305);
        LODWORD(v304) = 1;
        v255 = sub_22E8900C4(v254, (int *)&v304);
        v319 = (unint64_t *)sub_22F3359A8((unsigned int *)a3);
        sub_22E894538(v255, (uint64_t *)&v319);
        sub_22E903BEC((unsigned int *)&v321);
        v256 = *a3;
        switch(*a3)
        {
          case 0:
          case 2:
          case 6:
            goto LABEL_320;
          case 1:
            goto LABEL_319;
          case 3:
          case 4:
          case 5:
LABEL_343:
            __break(1u);
LABEL_344:
            if (v256 == 19)
LABEL_345:
              v269 = *((_QWORD *)a3 + 4) & 0xFFFFFFFFFFFFFFF8;
            else
LABEL_346:
              v269 = *((_QWORD *)a3 + 4);
            sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(v269 + 24), 0x1650u, 0, (uint64_t)v295);
            sub_22E903BEC(v295);
            v270 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 2) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            if (!v270 || *(_BYTE *)(v270 + 16) != 45)
              goto LABEL_150;
            v271 = sub_22F114198(*(_QWORD *)(v270 + 24));
            sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(v271 + 24), 0x1771u, 0, (uint64_t)&v321);
            v272 = *(_QWORD *)(a2 + 88);
            v273 = sub_22F114198(*(_QWORD *)(v270 + 24));
            v237 = *(_QWORD *)(v273 + 48);
            if (v237)
              goto LABEL_283;
            v274 = v273;
            v275 = v272;
            break;
          default:
            if (v256 == 19)
LABEL_319:
              v257 = *((_QWORD *)a3 + 4) & 0xFFFFFFFFFFFFFFF8;
            else
LABEL_320:
              v257 = *((_QWORD *)a3 + 4);
            sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(v257 + 24), 0x1771u, 0, (uint64_t)&v321);
            v305 = (void *)sub_22F3359A8((unsigned int *)a3);
            sub_22E894538((uint64_t)&v321, (uint64_t *)&v305);
            goto LABEL_148;
        }
        goto LABEL_468;
      case 34:
        v81 = *((_DWORD *)a4 + 1);
        v82 = *((_QWORD *)a1 + 854);
        v321 = &unk_24FAB6EF8;
        v322[0] = 3613;
        sub_22EE8B0B0(a2, v81, v82);
        goto LABEL_150;
      case 35:
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0x1404u, 0, (uint64_t)&v321);
        sub_22F0D4E74(*(_QWORD *)v8);
        v305 = v138;
        goto LABEL_136;
      case 36:
        sub_22EC44D9C((_QWORD *)a2, (uint64_t)a3, (unint64_t)*a5);
        goto LABEL_150;
      case 38:
        v60 = *((_QWORD *)v13 + 2);
        sub_22F0D5A50((uint64_t)v13);
        sub_22ED10E50((_QWORD *)a2, v60, 1, 0, v61);
        goto LABEL_150;
      case 39:
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0x1255u, 0, (uint64_t)&v321);
        sub_22F0D4E74(*(_QWORD *)v8);
        v305 = v126;
        sub_22E8906A0((uint64_t)&v321, (uint64_t *)&v305);
        sub_22E903BEC((unsigned int *)&v321);
        v305 = 0;
        sub_22ED03FCC(a1 + 48, a2, *((unsigned int *)a4 + 1), &v305);
        sub_22E8FCA40((_QWORD *)a2, *(_DWORD *)(*(_QWORD *)v305 + 24), 0x15E5u, 0, (uint64_t)&v321);
        LOBYTE(v319) = 0;
        v47 = (uint64_t)&v321;
        v51 = (unsigned __int8 *)&v319;
        goto LABEL_125;
      case 40:
        sub_22E8FCA40((_QWORD *)a2, *((_DWORD *)a4 + 1), 0xF3Fu, 0, (uint64_t)&v321);
        v52 = *(_QWORD *)(v320 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v52 + 8) & 0xF) != 0)
          v52 = (unint64_t)sub_22F10D2BC(v320);
        v305 = (void *)(v52 & 0xFFFFFFFFFFFFFFF0);
        v53 = sub_22E8901B8((uint64_t)&v321, (uint64_t *)&v305);
        sub_22F0D5A50(*(_QWORD *)v8);
        v55 = v54;
        sub_22F0D60E4(*(_QWORD *)(v8 + 8 * v7 - 8));
        v319 = (unint64_t *)__PAIR64__(v56, v55);
        v57 = sub_22E8906A0(v53, (uint64_t *)&v319);
        v58 = *(_QWORD *)(v320 & 0xFFFFFFFFFFFFFFF0);
        if (!v58 || *(_BYTE *)(v58 + 16) != 56)
          v58 = sub_22F10CF48(v58);
        LODWORD(v314) = *(_DWORD *)(v58 + 20);
        v59 = sub_22E89519C(v57, (unsigned int *)&v314);
        LODWORD(v304) = v7;
        sub_22E89519C(v59, (unsigned int *)&v304);
        goto LABEL_148;
      case 41:
        sub_22F0D5A50((uint64_t)*a5);
        v40 = v39;
        sub_22F0D60E4(*(_QWORD *)(v8 + 8 * v7 - 8));
        v305 = (void *)__PAIR64__(v41, v40);
        v42 = a1[47];
        if (v42 == 1)
        {
          v43 = *((_DWORD *)a4 + 1);
          v44 = (_QWORD *)a2;
          v45 = 4482;
        }
        else
        {
          if (v42 != 2)
            goto LABEL_150;
          v43 = *((_DWORD *)a4 + 1);
          v44 = (_QWORD *)a2;
          v45 = 4462;
        }
        sub_22E8FCA40(v44, v43, v45, 0, (uint64_t)&v321);
        v200 = *(_QWORD *)(v320 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v200 + 8) & 0xF) != 0)
          v200 = (unint64_t)sub_22F10D2BC(v320);
        v319 = (unint64_t *)(v200 & 0xFFFFFFFFFFFFFFF0);
        v201 = sub_22E8901B8((uint64_t)&v321, (uint64_t *)&v319);
        sub_22E8906A0(v201, (uint64_t *)&v305);
        sub_22E903BEC((unsigned int *)&v321);
        sub_22ED11DD4((uint64_t *)a1 + 859, (_QWORD *)a2);
        goto LABEL_150;
      default:
        goto LABEL_150;
    }
  }
  return v6 == 0;
}

uint64_t sub_22EC43634()
{
  uint64_t v0;
  unint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  _BOOL4 v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  _OWORD *v57;
  unint64_t v58;
  int v59;
  unsigned int v60;
  _OWORD *v61;
  unint64_t v62;
  int v63;
  unint64_t *v64;
  unsigned __int8 *v65;
  void *v66;
  int v67;
  void *v68;
  uint64_t v69;
  _BYTE v70[80];
  _QWORD *v71;
  uint64_t v72;
  _QWORD v73[339];
  int v74;
  _OWORD v75[9];
  _QWORD *v76;
  uint64_t v77;
  _QWORD v78[5];
  __int128 v79;
  uint64_t v80;
  unsigned int v81;
  __int128 v82;
  int v83;
  uint64_t v84;

  v0 = MEMORY[0x24BDAC7A8]();
  v5 = v3;
  v84 = *MEMORY[0x24BDAC8D0];
  if ((v3 & 1) == 0)
  {
    v6 = v1;
    v65 = (unsigned __int8 *)(v3 & 0xFFFFFFFFFFFFFFFELL);
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
    {
      if (*(_BYTE *)(v7 + 16) == 45)
      {
        v8 = v4;
        v9 = v2;
        v10 = (_QWORD *)v0;
        v11 = sub_22F114198(*(_QWORD *)(v7 + 24));
        if (v11)
        {
          v12 = v11;
          v13 = sub_22EC4EF78(v9);
          v71 = &unk_24FAB6EF8;
          LODWORD(v72) = 4781;
          if ((sub_22EE8B0B0((uint64_t)v10, v13, v6) & 1) == 0)
          {
            v71 = v73;
            v72 = 0x1000000000;
            v73[336] = v75;
            v73[337] = v75;
            v73[338] = 16;
            v74 = 0;
            v75[8] = 0u;
            v76 = v78;
            v77 = 0x400000000;
            v78[4] = (char *)&v79 + 8;
            v79 = 0u;
            v80 = 1;
            v81 = v13;
            v83 = 0;
            v82 = 0u;
            v14 = sub_22EC66BE4((uint64_t)v10, v12);
            v64 = 0;
            v15 = sub_22EC4EFB8(v10, v13, (uint64_t *)&v65, 1uLL, (uint64_t)&v71, v6, v14, (uint64_t)&v64, 0, 1u, 0, 0, 1u);
            switch(v15)
            {
              case 3:
                sub_22E8FCA40(v10, v13, 0x12ACu, 0, (uint64_t)&v68);
                v55 = *v9;
                v35 = sub_22E8900C4((uint64_t)&v68, (int *)&v55);
                v66 = (void *)*((_QWORD *)v65 + 1);
                v36 = sub_22E8901B8(v35, (uint64_t *)&v66);
                sub_22F0D4E74((uint64_t)v65);
                v54 = v37;
                sub_22E8906A0(v36, &v54);
                sub_22E903BEC((unsigned int *)&v68);
                sub_22EB17D68(v10, *v64);
                goto LABEL_25;
              case 2:
                v27 = v10[11] + 2128;
                v28 = (int)*v9;
                v29 = (_BYTE *)sub_22E3B8AAC(v27);
                v30 = v29 + 1;
                v31 = *v29;
                v30[v31] = 2;
                *v29 = v31 + 2;
                v32 = v31 + 1;
                *(_QWORD *)&v29[8 * v31 + 16] = v28;
                v33 = *((_QWORD *)v65 + 1);
                v30[v32] = 9;
                *(_QWORD *)&v29[8 * v32 + 16] = v33;
                sub_22F0D4E74((uint64_t)v65);
                sub_22E4D6448((uint64_t)(v29 + 336), v34, 1);
                v56 = v13;
                v59 = 4779;
                v58 = v27;
                v57 = (_OWORD *)sub_22E3B8AAC(v27);
                sub_22E78D4E8(v57, (uint64_t)v29);
                sub_22ED1231C((uint64_t)&v71, (int *)&v56, v10, 2, (int)&v65, 1u, "", 0, 0);
                if (v57 && v58)
                {
                  sub_22E3BB10C(v58, (unint64_t)v57);
                  v57 = 0;
                }
                sub_22E3BB10C(v27, (unint64_t)v29);
                goto LABEL_25;
              case 1:
                v16 = 4782;
                if (v8)
                {
                  sub_22EE03478((uint64_t)v10);
                  if (v17)
                    v16 = 4782;
                  else
                    v16 = 5346;
                }
                v18 = v10[11] + 2128;
                v19 = (int)*v9;
                v20 = (_BYTE *)sub_22E3B8AAC(v18);
                v21 = v20 + 1;
                v22 = *v20;
                v21[v22] = 2;
                *v20 = v22 + 2;
                v23 = v22 + 1;
                *(_QWORD *)&v20[8 * v22 + 16] = v19;
                v24 = *((_QWORD *)v65 + 1);
                v21[v23] = 9;
                *(_QWORD *)&v20[8 * v23 + 16] = v24;
                sub_22F0D4E74((uint64_t)v65);
                sub_22E4D6448((uint64_t)(v20 + 336), v25, 1);
                v60 = v13;
                v63 = v16;
                v62 = v18;
                v61 = (_OWORD *)sub_22E3B8AAC(v18);
                sub_22E78D4E8(v61, (uint64_t)v20);
                sub_22ED1231C((uint64_t)&v71, (int *)&v60, v10, 0, (int)&v65, 1u, "", 0, 0);
                if (v61 && v62)
                {
                  sub_22E3BB10C(v62, (unint64_t)v61);
                  v61 = 0;
                }
                sub_22E3BB10C(v18, (unint64_t)v20);
                if (v8)
                {
                  sub_22EE03478((uint64_t)v10);
                  if (v26)
                    v5 = 1;
                  goto LABEL_26;
                }
LABEL_25:
                v5 = 1;
LABEL_26:
                sub_22E9DC79C((uint64_t *)&v71);
                return v5;
            }
            v39 = v72;
            v40 = *v64;
            v68 = v70;
            v69 = 0x800000000;
            sub_22E90A630(v10, v13, v40, v64[1], (uint64_t)v9, v8);
            if (v8)
            {
              v41 = *(_QWORD *)(*(_QWORD *)(v40 + 48) & 0xFFFFFFFFFFFFFFF0);
              if (v41 && *(_BYTE *)(v41 + 16) == 26
                || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
                && (v41 = sub_22F10CF48(v41)) != 0)
              {
                v42 = (unsigned __int16)(*(_QWORD *)(v41 + 16) >> 38);
                if (v42 == 1)
                {
LABEL_35:
                  v5 = (uint64_t)v65;
                  goto LABEL_50;
                }
              }
              else
              {
                v42 = 0;
              }
              v43 = 1;
              v44 = v42;
              do
              {
                v45 = *(_QWORD *)(*(_QWORD *)(v40 + 120) + 8 * v43);
                v46 = *(_QWORD *)(v45 + 48);
                v66 = &unk_24FAB6EF8;
                v67 = 2989;
                if ((sub_22EE8B0B0((uint64_t)v10, v13, v46) & 1) != 0)
                  break;
                sub_22EB31884(v10, v13, v40, v45);
                ++v43;
              }
              while (v44 != (_DWORD)v43);
              goto LABEL_35;
            }
            if ((sub_22EACCC94(v10) & 1) != 0)
            {
              v5 = 1;
LABEL_50:
              if (v68 != v70)
                free(v68);
              goto LABEL_26;
            }
            if (!sub_22EFFF950(v65, v10[11], v12))
            {
              v50 = 0;
LABEL_44:
              v51 = (sub_22E46BB88(v40) & 0xFFFFF800) == 0 && v50;
              v52 = sub_22EACC3D8((uint64_t)v10, v13, v6, v64[1] & 0xFFFFFFFFFFFFFFFCLL, v40, v51, (uint64_t *)v68, v69, v39 > 1, 0, 0, 0, 0, 0);
              v5 = v52;
              if ((v52 & 1) == 0 && ((1 << *v9) & 0x3FDFD) == 0)
                v5 = sub_22EBCC6C0((uint64_t)v10, v52 & 0xFFFFFFFFFFFFFFFELL);
              goto LABEL_50;
            }
            v47 = (uint64_t *)(*(_QWORD *)(**(_QWORD **)(*v64 + 120) + 48) & 0xFFFFFFFFFFFFFFF0);
            v48 = *v47;
            if (!*v47 || (v49 = *(_DWORD *)(v48 + 16), (v49 & 0xFE) != 0x28))
            {
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
                || (v48 = sub_22F10CF48(v48)) == 0)
              {
LABEL_42:
                v50 = *(_QWORD *)(v47[1] & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((*((_QWORD *)v65 + 1) & 0xFFFFFFFFFFFFFFF0)
                                                                                          + 8) & 0xFFFFFFFFFFFFFFF0);
                goto LABEL_44;
              }
              v49 = *(_DWORD *)(v48 + 16);
            }
            if ((v49 & 0x100000) != 0)
            {
              do
              {
                v48 = *(_QWORD *)(*(_QWORD *)(v48 + 32) & 0xFFFFFFFFFFFFFFF0);
                if (v48)
                {
                  v53 = *(_DWORD *)(v48 + 16);
                  if ((v53 & 0xFE) == 0x28)
                    continue;
                }
                v48 = sub_22F10CF48(v48);
                v53 = *(_DWORD *)(v48 + 16);
              }
              while ((v53 & 0x100000) != 0);
            }
            v47 = (uint64_t *)(*(_QWORD *)(v48 + 32) & 0xFFFFFFFFFFFFFFF0);
            goto LABEL_42;
          }
        }
      }
    }
  }
  return v5;
}

uint64_t sub_22EC43D70(int a1)
{
  return ((uint64_t (*)(uint64_t))((char *)nullsub_724 + 4 * byte_22F483732[a1]))(4);
}

uint64_t sub_22EC43D98()
{
  return 2;
}

uint64_t sub_22EC43DA0()
{
  return 6;
}

uint64_t sub_22EC43DDC()
{
  return 3;
}

uint64_t sub_22EC43E28(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7, int a8, unsigned __int8 a9, int a10, unsigned int a11, uint64_t a12)
{
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  unsigned __int8 v61;
  uint64_t *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  _QWORD *v66;
  unsigned int *v67;
  unint64_t *v68;
  unsigned int v69;
  unint64_t v70;
  _QWORD v71[2];
  unsigned int v72;
  void *v73;
  uint64_t v74;
  _QWORD v75[10];
  uint64_t vars0;

  v75[8] = *MEMORY[0x24BDAC8D0];
  v19 = *(_QWORD *)(a6 + 24);
  v70 = v19;
  v20 = *(unsigned __int8 *)(a6 + 16);
  v73 = v75;
  v74 = 0x800000000;
  v21 = *a3;
  v22 = *((_DWORD *)a3 + 2);
  if (v22)
    v23 = v21 == 2;
  else
    v23 = 0;
  if (!v23)
    v22 = *((_DWORD *)a3 + 1);
  v69 = v22;
  if (v21 == 3
    && (*(_BYTE *)(v19 + 83) & 2) != 0
    && !sub_22EFC0EB8(v19)
    && (*(_BYTE *)(v70 + 82) & 0x80) != 0
    && (sub_22EFC9084(v70, 0) & 1) == 0)
  {
    v66 = a1;
    v67 = &v69;
    v68 = &v70;
    v72 = v69;
    v71[0] = a1;
    v71[1] = &v72;
    v25 = *(_QWORD *)off_255E04E38(&off_255E04E38, v69);
    if (!v25)
      goto LABEL_15;
    v26 = (uint64_t)&vars0 - v25;
    if (v26 < 0)
      v26 = -v26;
    if ((unint64_t)(v26 - 8126464) <= 0x40000)
      sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)v71, (uint64_t)sub_22EC5113C, (uint64_t)&v66);
    else
LABEL_15:
      sub_22EAC7348((uint64_t)a1, v24, v70);
  }
  if (*a3 != 2 && a5 == 1)
  {
    v27 = a1[11];
    v28 = *(_QWORD *)(a6 + 32) & 0xFFFFFFFFFFFFFFFCLL;
    v29 = *(_DWORD *)(v28 + 28);
    v30 = v29 & 0x7F;
    if (v30 <= 0x2F)
    {
      if (((1 << (v29 & 0x7F)) & 0xC00000060000) != 0)
      {
        v63 = a1[11];
        v65 = a7;
        v56 = *(_QWORD *)(a6 + 32) & 0xFFFFFFFFFFFFFFFCLL;
        v57 = sub_22EFBAEA4(v28);
        v28 = v56;
        v31 = v57;
        v27 = v63;
        a7 = v65;
        v29 = *(_DWORD *)(v31 + 28);
        LODWORD(v30) = v29 & 0x7F;
      }
      else
      {
        v31 = *(_QWORD *)(a6 + 32) & 0xFFFFFFFFFFFFFFFCLL;
        if (v30 == 13)
        {
          v66 = 0;
          v67 = 0;
          v68 = 0;
LABEL_31:
          sub_22EC4F388(v27, &v66);
          goto LABEL_32;
        }
      }
    }
    else
    {
      v31 = *(_QWORD *)(a6 + 32) & 0xFFFFFFFFFFFFFFFCLL;
    }
    v32 = v28 | (v29 >> 13) & 3;
    if ((_DWORD)v30 == 29)
      v33 = (unint64_t *)v31;
    else
      v33 = 0;
    v66 = (_QWORD *)v32;
    v68 = v33;
    if (v33)
    {
      v31 = v33[6];
      LODWORD(v30) = *(_DWORD *)(v31 + 28) & 0x7F;
    }
    if ((_DWORD)v30 == 55)
      v34 = (unsigned int *)v31;
    else
      v34 = 0;
    v67 = v34;
    goto LABEL_31;
  }
LABEL_32:
  if ((sub_22EACCC94(a1) & 1) != 0)
  {
LABEL_77:
    v40 = 1;
    goto LABEL_78;
  }
  v64 = a7;
  v36 = a11;
  v35 = a12;
  v37 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 - 17) >= 2)
  {
    if (v37 == 10)
      goto LABEL_41;
    if (v37 != 9)
    {
LABEL_46:
      if (v37 == 11)
        v39 = 3;
      else
        v39 = 0;
      if (a8)
      {
LABEL_68:
        if ((v37 == 5 || v37 == 3) && *(_BYTE *)(a2 + 36))
          v51 = sub_22EACC3D8((uint64_t)a1, v69, *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 32) & 0xFFFFFFFFFFFFFFFCLL, v70, 1, (uint64_t *)v73, v74, v20 != 0, a8, a9, *v64, v39, v36 | (unint64_t)(v35 << 32));
        else
          v51 = sub_22EACC28C((uint64_t)a1, v69, *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 32) & 0xFFFFFFFFFFFFFFFCLL, v70, (unsigned __int8 **)v73, v74, v20 != 0, a8, a9, *v64, v39, v36 | (unint64_t)(v35 << 32));
        goto LABEL_73;
      }
LABEL_50:
      if (*a3)
      {
        v36 = 0;
        v35 = 0;
      }
      else
      {
        v36 = *((_DWORD *)a3 + 2);
        v35 = *((unsigned int *)a3 + 3);
      }
      goto LABEL_68;
    }
  }
  v38 = *a3;
  if (v38 != 4)
  {
    if (v38 == 1)
      goto LABEL_52;
    if (*a3)
      goto LABEL_40;
  }
  if ((_DWORD)a5 == 1)
  {
LABEL_40:
    if (v37 == 10)
    {
LABEL_41:
      if ((*(_BYTE *)((*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF8) + 12) & 1) != 0)
        v39 = 2;
      else
        v39 = 1;
      if (a8)
        goto LABEL_68;
      goto LABEL_50;
    }
    goto LABEL_46;
  }
LABEL_52:
  v40 = 1;
  if ((sub_22EB17F48(a1, v70, &v69, 1, 0, 0, 0, 0) & 1) != 0)
    goto LABEL_78;
  if (*(_DWORD *)a2 != 17 && *(_DWORD *)a2 != 9 || (v41 = *(uint64_t **)(a2 + 32)) == 0)
    v41 = sub_22EF579A8(a1[11], *(_QWORD *)(a2 + 16), v69);
  v42 = *a3;
  if (v42 == 1)
    v43 = a11;
  else
    v43 = *((unsigned int *)a3 + 2);
  if (v42 == 1)
    v44 = a12;
  else
    v44 = *((unsigned int *)a3 + 3);
  v45 = v70;
  v46 = *(_QWORD *)(a6 + 32) & 0xFFFFFFFFFFFFFFFCLL;
  v62 = v41;
  if (v46)
  {
    if ((*(_DWORD *)(v46 + 28) & 0x7F) == 0x2F)
    {
      v45 = sub_22EAC7678(a1, v69, v70);
      if ((sub_22EB17F48(a1, v45, &v69, 1, 0, 0, 0, 0) & 1) != 0)
        goto LABEL_77;
    }
  }
  v61 = v20 != 0;
  sub_22EB4E494(a1, v69, v45, 1);
  v47 = a1[11];
  v66 = *(_QWORD **)(a2 + 16);
  v59 = sub_22F1133DC((uint64_t *)&v66, v47);
  v60 = (uint64_t *)v73;
  v48 = v74;
  v58 = v43 | (v44 << 32);
  v49 = *v64;
  v50 = sub_22E3CD3D4(v47 + 2032, (8 * v74) + 48, 3);
  sub_22F0615F0(v50, v45, v59, v62, v60, v48, v58, v61, a8, a9, v49);
  v51 = sub_22EB346AC((uint64_t)a1, v50, v45);
LABEL_73:
  v52 = v51;
  if ((v51 & 1) != 0)
    goto LABEL_77;
  sub_22E90A630(a1, v69, v70, *(_QWORD *)(a6 + 32), a2, 0);
  v40 = 1;
  if ((sub_22EB17F48(a1, *(_QWORD *)(a6 + 32) & 0xFFFFFFFFFFFFFFFCLL, &v69, 1, 0, 0, 0, 0) & 1) != 0)
    goto LABEL_78;
  v53 = sub_22EF5C728(a1[11], *(_QWORD *)(a2 + 16));
  if (v53)
  {
    v54 = sub_22EF5BA38(a1[11], *(_QWORD *)(v53 + 32));
    if ((sub_22EC4A7BC(v54, v69, (uint64_t)a1) & 1) != 0)
      goto LABEL_77;
  }
  if (((1 << *(_DWORD *)a2) & 0x3FDFD) != 0)
    v40 = v52;
  else
    v40 = sub_22EBCC6C0((uint64_t)a1, v52 & 0xFFFFFFFFFFFFFFFELL);
LABEL_78:
  if (v73 != v75)
    free(v73);
  return v40;
}

uint64_t sub_22EC44448(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t result;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t *v13;
  char *v14;
  _QWORD *v15;
  int v16;
  int v17;
  _QWORD *v18;
  unsigned int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;

  v7 = a1;
  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (result)
    v9 = (*(_DWORD *)(result + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
  else
    v9 = 0;
  if (!v9)
    result = sub_22F10CF48(result);
  v10 = (_QWORD *)(result + 40);
  if (*(_DWORD *)(result + 48) >= 0x41u)
    v10 = (_QWORD *)*v10;
  v11 = (_QWORD *)*v10;
  if (!a3 || *(_BYTE *)(a3 + 16) != 4)
  {
    if ((*(_BYTE *)(a4[9] + 1) & 1) != 0)
    {
      v20 = (unsigned __int8 *)v7;
      do
      {
        v21 = v20;
        v22 = *v20;
        if (v22 > 0xD5)
        {
          if (v22 == 233)
          {
            if ((*(_DWORD *)v20 & 0x7C0000) != 0x300000)
              goto LABEL_52;
            v22 = *(_DWORD *)v20;
            v24 = v20 + 16;
          }
          else
          {
            if (v22 != 214)
              break;
            v24 = v20 + 24;
          }
        }
        else if (v22 == 155)
        {
          if ((**((_DWORD **)v20 + 2) & 0x18000) != 0)
            goto LABEL_52;
          v24 = v20 + 24;
          if (!v21[48])
            v24 = v21 + 32;
          v22 = 155;
        }
        else
        {
          if (v22 != 176)
            break;
          v23 = *((unsigned int *)v20 + 5);
          if ((_DWORD)v23 == -1)
            goto LABEL_52;
          v24 = &v20[8 * v23 + 40];
          v22 = 176;
        }
        v20 = *(unsigned __int8 **)v24;
      }
      while (v20 != v21);
      if (v22 == 225)
        v11 = (_QWORD *)((char *)v11 + ((int)(*(_DWORD *)v21 << 7) >> 31));
LABEL_52:
      v25 = (_QWORD *)(a3 + 40);
      if (*(_DWORD *)(a3 + 48) >= 0x41u)
        v25 = (_QWORD *)*v25;
      if ((unint64_t)v11 <= *v25)
        goto LABEL_57;
      sub_22F0D5A50(v7);
      v17 = v26;
      v18 = a4;
      v19 = 3621;
    }
    else
    {
      v14 = (char *)v11 - 1;
      v15 = (_QWORD *)(a3 + 40);
      if (*(_DWORD *)(a3 + 48) >= 0x41u)
        v15 = (_QWORD *)*v15;
      if ((unint64_t)v14 <= *v15)
        goto LABEL_57;
      sub_22F0D5A50(v7);
      v17 = v16;
      v18 = a4;
      v19 = 5276;
    }
    sub_22E8FCA40(v18, v17, v19, 0, (uint64_t)&v32);
    sub_22F0D4E74(v7);
    v31 = v27;
    sub_22E8906A0((uint64_t)&v32, &v31);
    result = (uint64_t)sub_22E903BEC((unsigned int *)&v32);
LABEL_57:
    v28 = *a2;
    while (1)
    {
      *(_QWORD *)(v7 + 8) = v28;
      v29 = *(_DWORD *)v7;
      *(_DWORD *)v7 &= 0xFFFFFCFF;
      if (v29 <= 0xD5u)
      {
        if (v29 == 176)
        {
          v30 = (uint64_t *)(v7 + 8 * (*(_DWORD *)(v7 + 20) + 1) + 32);
          goto LABEL_71;
        }
        if (v29 == 196)
          return result;
      }
      else
      {
        switch(v29)
        {
          case 0xD6u:
            v30 = (uint64_t *)(v7 + 24);
            goto LABEL_71;
          case 0xE9u:
            v30 = (uint64_t *)(v7 + 16);
            goto LABEL_71;
          case 0xE1u:
            return result;
        }
      }
      if (*(_BYTE *)(v7 + 48))
        v30 = (uint64_t *)(v7 + 24);
      else
        v30 = (uint64_t *)(v7 + 32);
LABEL_71:
      v7 = *v30;
    }
  }
  v33 = 32;
  v32 = v11;
  result = sub_22EF5FE30(a4[11], *(_QWORD *)(a3 + 32), (const llvm::APInt *)&v32, 0, 0, 0);
  *a2 = result;
  while (1)
  {
    *(_QWORD *)(v7 + 8) = result;
    v12 = *(_DWORD *)v7;
    *(_DWORD *)v7 &= 0xFFFFFCFF;
    if (v12 <= 0xD5u)
      break;
    switch(v12)
    {
      case 0xD6u:
        v13 = (uint64_t *)(v7 + 24);
        goto LABEL_24;
      case 0xE9u:
        v13 = (uint64_t *)(v7 + 16);
        goto LABEL_24;
      case 0xE1u:
        goto LABEL_30;
    }
LABEL_21:
    if (*(_BYTE *)(v7 + 48))
      v13 = (uint64_t *)(v7 + 24);
    else
      v13 = (uint64_t *)(v7 + 32);
LABEL_24:
    v7 = *v13;
  }
  if (v12 == 176)
  {
    v13 = (uint64_t *)(v7 + 8 * (*(_DWORD *)(v7 + 20) + 1) + 32);
    goto LABEL_24;
  }
  if (v12 != 196)
    goto LABEL_21;
LABEL_30:
  if (v33 >= 0x41)
  {
    result = v32;
    if (v32)
      return MEMORY[0x2348A0E84](v32, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_22EC447A4(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23[24];

  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    v7 = a3;
    sub_22E8FCA40(a1, a2, 0x1236u, 0, (uint64_t)v23);
    v8 = *v5;
    if (!*v5 || (v9 = *(_DWORD *)(v8 + 16), (v9 & 0xFE) != 0x28))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
        || (v8 = sub_22F10CF48(v8)) == 0)
      {
LABEL_5:
        v22 = v7;
        sub_22E8901B8((uint64_t)v23, &v22);
        goto LABEL_6;
      }
      v9 = *(_DWORD *)(v8 + 16);
    }
    if ((v9 & 0x100000) != 0)
    {
      do
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v8 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v8)
        {
          v21 = *(_DWORD *)(v8 + 16);
          if ((v21 & 0xFE) == 0x28)
            continue;
        }
        v8 = sub_22F10CF48(v8);
        v21 = *(_DWORD *)(v8 + 16);
      }
      while ((v21 & 0x100000) != 0);
    }
    v7 = *(_QWORD *)(v8 + 32);
    goto LABEL_5;
  }
  while (1)
  {
    if (v6 && (*(_DWORD *)(v6 + 16) & 0xFEu) - 6 > 0xFFFFFFFB)
    {
      v11 = v6;
      goto LABEL_13;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
      break;
    v11 = sub_22F10CF48(v6);
    if (!v11)
      break;
LABEL_13:
    v6 = *(_QWORD *)(*(_QWORD *)(v11 + 32) & 0xFFFFFFFFFFFFFFF0);
  }
  result = sub_22F10C2A4(v6);
  if (result)
  {
    v12 = result;
    if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 > 2)
      return 0;
    v22 = result;
    result = sub_22EC4F51C(result);
    if ((_DWORD)result)
    {
      v13 = sub_22EFC3B90(v12);
      if (!v13)
        goto LABEL_25;
      v14 = v13;
LABEL_19:
      if ((*(_BYTE *)(v14 + 68) & 1) != 0 && !*(_QWORD *)(v14 + 40)
        || !sub_22EC447A4(a1, *(unsigned int *)(v14 + 24), *(_QWORD *)(v14 + 48)))
      {
        while (1)
        {
          v14 = *(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v14)
            break;
          if ((*(_DWORD *)(v14 + 28) & 0x7Fu) - 49 < 3)
            goto LABEL_19;
        }
LABEL_25:
        v15 = sub_22E46A3A0(v12);
        if ((unsigned int *)v15 != v16)
        {
          v17 = (unsigned int *)v15;
          v18 = v16;
          while (1)
          {
            v19 = *v17;
            v20 = *(_QWORD *)(**((_QWORD **)v17 + 2) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v20 + 8) & 0xF) != 0)
              v20 = (unint64_t)sub_22F10D2BC(**((_QWORD **)v17 + 2));
            if (sub_22EC447A4(a1, v19, v20 & 0xFFFFFFFFFFFFFFF0))
              break;
            v17 += 6;
            if (v17 == v18)
              return 0;
          }
          goto LABEL_33;
        }
        return 0;
      }
LABEL_33:
      sub_22E8FCA40(a1, a2, 0x1815u, 0, (uint64_t)v23);
      sub_22E890024((uint64_t)v23, &v22);
LABEL_6:
      sub_22E903BEC(v23);
      return 1;
    }
  }
  return result;
}

uint64_t sub_22EC44A2C(uint64_t a1, unsigned int *a2)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 80))
  {
    sub_22EC52194((unsigned __int8 **)(a1 + 32), a2);
  }
  else if (*(_BYTE *)(a1 + 92))
  {
    v5 = (uint64_t *)(*(_QWORD *)a1 + 12784);
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v8 = v6;
    v7 = sub_22F2F1D6C(v5, &v8);
    sub_22EC52194((unsigned __int8 **)(v7[1] + 32 * *(unsigned int *)(a1 + 88) + 8), a2);
  }
  return a1;
}

unsigned int *sub_22EC44ACC(unsigned int *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *result;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32[24];

  v6 = *(_QWORD *)(a2 + 16);
  v7 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if (!v8 || (v9 = *(_DWORD *)(v8 + 16), (v9 & 0xFE) != 0x28))
  {
    v10 = v6 & 0xFFFFFFFFFFFFFFF0;
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_4;
    v8 = sub_22F10CF48(v8);
    if (!v8)
    {
      v10 = v6 & 0xFFFFFFFFFFFFFFF0;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(v8 + 16);
  }
  if ((v9 & 0x100000) != 0)
  {
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v8 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v8)
      {
        v29 = *(_DWORD *)(v8 + 16);
        if ((v29 & 0xFE) == 0x28)
          continue;
      }
      v8 = sub_22F10CF48(v8);
      v29 = *(_DWORD *)(v8 + 16);
    }
    while ((v29 & 0x100000) != 0);
  }
  v10 = *(_QWORD *)(v8 + 32) & 0xFFFFFFFFFFFFFFF0;
LABEL_4:
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) == 32)
  {
    sub_22EC2B1BC(a1, a3);
    if (*(_DWORD *)a2 == 3)
      sub_22EC2AF28(a1, v6);
  }
  v11 = (uint64_t *)(*((_QWORD *)a3 + 1) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_22F10ACF8(*(_QWORD *)(v11[1] & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0));
  v14 = sub_22F10AEAC(*v11);
  result = (unsigned int *)sub_22F10AEAC(*v7);
  if (v14)
    v16 = result == 0;
  else
    v16 = 1;
  if (!v16 && (*(_WORD *)(v14 + 72) & 0x7F) == 0x23)
  {
    v17 = (unint64_t)result;
    if ((result[18] & 0x7F) == 0x23
      && (*(_BYTE *)(v14 + 28) & 0x80) == 0
      && (result[7] & 0x80) == 0
      && !*(_QWORD *)(v14 + 128))
    {
      result = (unsigned int *)sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v14 + 104) + 96), *(_QWORD *)(v14 + 104));
      if (!*(_QWORD *)(v14 + 128))
      {
        v18 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v18 & 8) != 0)
        {
          v20 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
        }
        else
        {
          v19 = 0;
          v20 = 0;
        }
        *(_QWORD *)v32 = v19 | v20 | (v18 | v13) & 7;
        v21 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v21 & 8) != 0)
        {
          v23 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
        }
        else
        {
          v22 = 0;
          v23 = 0;
        }
        result = (unsigned int *)sub_22E95F24C(v32, v22 | v23 | (v21 | v12) & 7);
        if ((_DWORD)result)
        {
          sub_22E8FCA40(a1, *(_DWORD *)(v14 + 24), 0x160Au, 0, (uint64_t)v32);
          v24 = *(_QWORD *)(v14 + 48);
          if (v24)
            v25 = v24 & 0xFFFFFFFFFFFFFFF0;
          else
            v25 = sub_22EF6462C(*((_QWORD *)a1 + 11), v14);
          v31 = v25;
          v26 = sub_22E8901B8((uint64_t)v32, (uint64_t *)&v31);
          v27 = *(_QWORD *)(v17 + 48);
          if (v27)
            v28 = v27 & 0xFFFFFFFFFFFFFFF0;
          else
            v28 = sub_22EF6462C(*((_QWORD *)a1 + 11), v17);
          v30 = v28;
          sub_22E8901B8(v26, (uint64_t *)&v30);
          return sub_22E903BEC(v32);
        }
      }
    }
  }
  return result;
}

unsigned int *sub_22EC44D9C(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *(_QWORD *)(a2 + 16);
  v27 = 0;
  v28 = v6;
  if ((*(_BYTE *)(a1[9] + 1) & 2) == 0 || !sub_22EAC21FC(a1, v6, &v27))
  {
    v15 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      return (unsigned int *)sub_22EC37BCC(&v21, a1, a2, a3, &v28, 0, 0, 0);
    v16 = *(_DWORD *)(v15 + 16);
    if ((v16 & 0xFE) != 0x28)
    {
      v15 = sub_22F10CF48(v15);
      v16 = *(_DWORD *)(v15 + 16);
    }
    if ((v16 & 0x100000) != 0)
    {
      do
      {
        while (1)
        {
          v15 = *(_QWORD *)(*(_QWORD *)(v15 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (!v15)
            break;
          v17 = *(_DWORD *)(v15 + 16);
          if ((v17 & 0xFE) != 0x28)
            break;
          if ((v17 & 0x100000) == 0)
            goto LABEL_20;
        }
        v15 = sub_22F10CF48(v15);
      }
      while ((*(_DWORD *)(v15 + 16) & 0x100000) != 0);
    }
LABEL_20:
    v26 = *(_QWORD *)(v15 + 32);
    LODWORD(v21) = 9;
    v22 = 0;
    v23 = v26;
    v24 = 0;
    v25 = 0;
    sub_22EC44D9C(a1, &v21, a3);
    sub_22EFFD954(a3);
    v19 = 1 << *(_DWORD *)a2;
    if ((v19 & 0x7FFB8) == 0)
    {
      if ((v19 & 0x100045) == 0)
      {
        v20 = *(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFF8;
        if (!v20)
          goto LABEL_24;
        goto LABEL_23;
      }
      v20 = *(_QWORD *)(a2 + 32);
      if (v20)
LABEL_23:
        v18 = *(_DWORD *)(v20 + 24);
    }
LABEL_24:
    sub_22E8FCA40(a1, v18, 0x162Bu, 0, (uint64_t)&v21);
    sub_22E8901B8((uint64_t)&v21, &v26);
    return sub_22E903BEC((unsigned int *)&v21);
  }
  v7 = a1[11];
  v8 = v27 | 1;
  v9 = sub_22EF67C8C(v7);
  v10 = sub_22EF5CDF0(v7, *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0));
  v11 = ((*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 3);
  LODWORD(v22) = v10;
  if (v10 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v21);
  }
  else
  {
    v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
    if (!v10)
      v12 = 0;
    v21 = v12 & v11;
  }
  v13 = sub_22EF5FE30(v7, v8, (const llvm::APInt *)&v21, 0, 0, 0);
  if (v22 >= 0x41)
  {
    if (v21)
      MEMORY[0x2348A0E84](v21, 0x1000C8000313F17);
  }
  LODWORD(v21) = 9;
  v22 = 0;
  v23 = v13;
  v24 = 0;
  v25 = 0;
  return (unsigned int *)sub_22EC44D9C(a1, &v21, a3);
}

uint64_t sub_22EC45014()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned int v31;
  int *v32;
  uint64_t v33;
  _QWORD v34[2];
  unsigned __int8 *v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;

  v0 = MEMORY[0x24BDAC7A8]();
  v42 = *MEMORY[0x24BDAC8D0];
  if ((v3 & 1) != 0)
    return 1;
  v6 = v5;
  v7 = v4;
  v8 = v2;
  v9 = v1;
  v10 = v0;
  v11 = v3 & 0xFFFFFFFFFFFFFFFELL;
  v35 = (unsigned __int8 *)(v3 & 0xFFFFFFFFFFFFFFFELL);
  if (!v2)
  {
    sub_22F0D5A50(v3 & 0xFFFFFFFFFFFFFFFELL);
    v8 = v12;
  }
  sub_22F0D5A50(v11);
  v14 = 2;
  if (v6)
    v14 = 258;
  v34[0] = v14 | (v13 << 32);
  v34[1] = v8 | ((unint64_t)v8 << 32);
  sub_22EC395BC((uint64_t)&v36, (unsigned int *)v10, v9, (uint64_t)v34, (uint64_t *)&v35, 1uLL, v7, 1);
  if ((*(_DWORD *)v9 == 1 || *(_DWORD *)v9 == 19) && v38 && (v16 = v37 + 40 * v38, *(_DWORD *)(v16 - 40) == 19))
  {
    v19 = *(_QWORD *)(v10 + 8792);
    v20 = *(unsigned int *)(v10 + 8800);
    if ((_DWORD)v20)
    {
      v24 = 8 * v20;
      v21 = *(_QWORD **)(v10 + 8792);
      while (*v21 != *(_QWORD *)(v9 + 16))
      {
        ++v21;
        v24 -= 8;
        if (!v24)
        {
          v21 = (_QWORD *)(v19 + 8 * v20);
          break;
        }
      }
    }
    else
    {
      v21 = *(_QWORD **)(v10 + 8792);
    }
    if (v20 != ((uint64_t)v21 - v19) >> 3)
    {
      v36 = 0;
      v39 = 0x10000001FLL;
      if (v41)
      {
        v25 = *(_QWORD *)(v16 - 16);
        v26 = (_BYTE *)(v40 + 105);
        v27 = 168 * v41;
        while ((*(v26 - 1) & 1) == 0 || *(_QWORD *)(v26 - 105) != v25 || !*(_QWORD *)(v26 - 49))
        {
          v26 += 168;
          v27 -= 168;
          if (!v27)
            goto LABEL_15;
        }
        if (sub_22EFBAACC(v25))
        {
          *(v26 - 1) &= ~1u;
          *v26 = 2;
          v28 = *(unsigned int **)(v26 - 57);
          v29 = v35;
          v30 = *(_QWORD *)(**(_QWORD **)(v25 + 120) + 48);
          v31 = *v28;
          if ((*v28 & 0x7FFFFFFF) == 2)
          {
            v32 = (int *)*((_QWORD *)v28 + 4);
            if (v32 != (int *)(v28 + 12))
            {
              free(v32);
              v31 = *v28;
            }
          }
          *v28 = v31 & 0x80000000 | 4;
          v33 = *((_QWORD *)v29 + 1);
          v28[6] = 0;
          *((_QWORD *)v28 + 4) = v33;
          *((_QWORD *)v28 + 5) = v30;
          *((_QWORD *)v28 + 2) = v29;
        }
      }
    }
LABEL_15:
    v22 = *(_QWORD *)(v9 + 16);
    v23 = *(_DWORD *)(v10 + 8800);
    if (v23 >= *(_DWORD *)(v10 + 8804))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v23 = *(_DWORD *)(v10 + 8800);
    }
    *(_QWORD *)(*(_QWORD *)(v10 + 8792) + 8 * v23) = v22;
    ++*(_DWORD *)(v10 + 8800);
    v17 = sub_22EC3DF80((uint64_t)&v36, v10, v9, (unsigned __int16 *)v34, &v35, 1, 0, v15);
    --*(_DWORD *)(v10 + 8800);
  }
  else
  {
    v17 = sub_22EC3DF80((uint64_t)&v36, v10, v9, (unsigned __int16 *)v34, &v35, 1, 0, v15);
  }
  sub_22EC3CE2C((uint64_t)&v36);
  return v17;
}

unint64_t sub_22EC4531C()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unsigned __int8 **v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  unint64_t result;
  uint64_t v25;
  int v26;
  BOOL v28;
  unsigned __int8 **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unsigned int v86[25];
  int v87;
  uint64_t v88[2];
  unint64_t v89;
  unsigned __int8 *v90;
  unint64_t v91;
  int v92;
  int v93;
  _OWORD *v94;
  unint64_t v95;
  int v96;
  int v97;
  _OWORD *v98;
  unint64_t v99;
  int v100;
  uint64_t v101[9];
  BOOL v102;
  char v103;
  _QWORD *v104;
  __int128 v105;
  uint64_t v106;
  unsigned int v107[24];
  uint64_t v108;
  unsigned __int8 **v109;
  unint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD v114[339];
  int v115;
  _OWORD v116[9];
  _QWORD *v117;
  uint64_t v118;
  _QWORD v119[5];
  __int128 v120;
  uint64_t v121;
  int v122;
  __int128 v123;
  int v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  _BYTE v128[64];
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int16 v137;
  int v138;
  char v139;
  uint64_t v140;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = (_QWORD *)v0;
  v140 = *MEMORY[0x24BDAC8D0];
  v109 = v3;
  v110 = v1;
  v12 = *(_QWORD *)(*v9 & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v112) = 0;
  v13 = sub_22F110500((uint64_t)&v112, v12);
  if (*(_BYTE *)(v13 + 16) == 15)
    v14 = v13;
  else
    v14 = 0;
  v108 = *(_QWORD *)(v14 + 40);
  if ((sub_22F0F0A4C(&v108) & 4) != 0)
    return sub_22F347230((uint64_t)v11);
  v15 = sub_22F0F08CC(&v108);
  if (!v15 || (v16 = v15, (*(_DWORD *)(v15 + 28) & 0x7F) != 0x1C))
  {
    sub_22E8FCA40(v11, *((_DWORD *)v6 + 1), 0xC71u, 0, (uint64_t)&v112);
    LODWORD(v125) = sub_22F31CFF0((uint64_t)v11, v108);
    v25 = sub_22E8900C4((uint64_t)&v112, (int *)&v125);
    sub_22F30C54C(v25, &v108);
    sub_22E903BEC((unsigned int *)&v112);
    result = sub_22F0F08CC(&v108);
    if (result)
    {
      sub_22E8FCA40(v11, *(_DWORD *)(result + 24), 0x17D6u, 0, (uint64_t)v107);
      sub_22E903BEC(v107);
      return 0;
    }
    return result;
  }
  if (v2)
  {
    v17 = 0;
    v18 = 1;
    while ((v4[v17][1] & 0x80) == 0)
    {
      v17 = v18;
      v64 = v2 > v18++;
      if (!v64)
        goto LABEL_11;
    }
    v36 = *v10;
    v37 = *v10;
    while (1)
    {
      if ((v37 & 0xF) != 0)
        goto LABEL_53;
      v38 = *(unsigned __int8 *)(*(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v38 > 0x39)
      {
LABEL_48:
        if (sub_22F115668(v37))
          v36 = v37;
        v37 = sub_22F115B7C(v37);
        if (!v37)
          goto LABEL_129;
      }
      else
      {
        if (v38 == 24)
          goto LABEL_128;
        if (v38 == 26)
        {
          if ((*(_BYTE *)(v37 + 23) & 0x10) != 0)
          {
LABEL_128:
            v36 = v37;
LABEL_129:
            v68 = sub_22F115668(v36);
            sub_22E8FCA40(v11, v68, 0x18FCu, 0, (uint64_t)&v112);
            v69 = *v10;
            v125 = v69;
            v126 = v10 + 1;
            v70 = v69;
            while (1)
            {
              if ((v70 & 0xF) != 0)
                goto LABEL_140;
              v71 = *(unsigned __int8 *)(*(_QWORD *)(v70 & 0xFFFFFFFFFFFFFFF0) + 16);
              if (v71 <= 0x39)
              {
                if (v71 == 24)
                  goto LABEL_141;
                if (v71 == 26)
                {
                  if ((*(_BYTE *)(v70 + 23) & 0x10) != 0)
                  {
LABEL_141:
                    v69 = v70;
LABEL_142:
                    v72 = sub_22F115668(v69);
                    v90 = (unsigned __int8 *)(v72 | ((unint64_t)sub_22F1167E8(&v125) << 32));
                    v73 = sub_22E8906A0((uint64_t)&v112, (uint64_t *)&v90);
                    LODWORD(v101[0]) = 0;
                    sub_22E8900C4(v73, (int *)v101);
                    sub_22E903BEC((unsigned int *)&v112);
                    return sub_22F347230((uint64_t)v11);
                  }
LABEL_140:
                  v70 = sub_22F115B7C(v70);
                  continue;
                }
                if (((1 << v71) & 0x20000000200003CLL) != 0)
                  goto LABEL_140;
              }
              if (sub_22F115668(v70))
                v69 = v70;
              v70 = sub_22F115B7C(v70);
              if (!v70)
                goto LABEL_142;
            }
          }
        }
        else if (((1 << v38) & 0x20000000200003CLL) == 0)
        {
          goto LABEL_48;
        }
LABEL_53:
        v37 = sub_22F115B7C(v37);
      }
    }
  }
LABEL_11:
  v19 = sub_22F3AE65C((_QWORD *)(v11[11] + 15224), v15);
  v112 = (_QWORD *)*v10;
  v113 = (uint64_t)(v10 + 1);
  *(_QWORD *)&v105 = v19;
  DWORD2(v105) = sub_22F1167E8((uint64_t *)&v112);
  sub_22EFC6D6C((uint64_t)&v106, v19);
  v125 = 0;
  v126 = v128;
  v127 = 0x800000000;
  v129 = 0;
  v130 = 0;
  v131 = 0;
  v132 = v11;
  v133 = v105;
  v136 = 0;
  v134 = v106;
  v135 = 0;
  v137 = 0;
  v138 = 257;
  v139 = 0;
  sub_22EC56024((uint64_t)&v125);
  v20 = *(_QWORD *)(v16 + 16);
  v21 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
  if ((v20 & 4) != 0)
    v21 = (_QWORD *)*v21;
  sub_22EC611AC(v11, &v125, v21, 0);
  BYTE1(v138) = 0;
  v22 = *v6;
  if (v110 == 1 && *v6)
  {
    if (**v109 == 180)
      v23 = (uint64_t)*v109;
    else
      v23 = 0;
  }
  else
  {
    v23 = 0;
  }
  v26 = *((_DWORD *)v6 + 1);
  v112 = v114;
  v113 = 0x1000000000;
  v114[336] = v116;
  v114[337] = v116;
  v114[338] = 16;
  v115 = 0;
  v116[8] = 0u;
  v117 = v119;
  v118 = 0x400000000;
  v119[4] = (char *)&v120 + 8;
  v120 = 0u;
  v121 = 1;
  v122 = v26;
  v124 = 0;
  v123 = 0u;
  v104 = 0;
  v103 = 0;
  v28 = v22 != 2 || v23 != 0;
  v102 = v28;
  v101[0] = (uint64_t)&v112;
  v101[1] = (uint64_t)&v103;
  v101[2] = (uint64_t)&v125;
  v101[3] = (uint64_t)&v102;
  v101[4] = (uint64_t)v11;
  v101[5] = (uint64_t)v6;
  v101[6] = v8;
  v101[7] = (uint64_t)&v109;
  v101[8] = (uint64_t)&v104;
  if (v23)
  {
    v29 = *(unsigned __int8 ***)(v23 + 16);
    v30 = (*(_QWORD *)(v23 + 24) - (_QWORD)v29) >> 3;
    if ((_DWORD)v30 == 1)
    {
      v39 = *v29;
      v40 = sub_22F10C2A4(*(_QWORD *)(*((_QWORD *)*v29 + 1) & 0xFFFFFFFFFFFFFFF0));
      if (v40)
      {
        v55 = (*(_DWORD *)(v40 + 28) & 0x7Fu) - 35 >= 3 ? 0 : v40;
        if (*v39 != 180 && v55 && (sub_22EE8B180(v11, *((unsigned int *)v6 + 1)) & 1) == 0)
        {
          v90 = (unsigned __int8 *)v16;
          v88[0] = (uint64_t)&v90;
          if ((*(_DWORD *)(v55 + 28) & 0x7E) == 0x24)
          {
            v56 = *(_QWORD *)(v55 + 152);
            v57 = v56 & 0xFFFFFFFFFFFFFFF8;
            if ((v56 & 4) != 0 && v57)
            {
              do
              {
                v58 = *(_QWORD *)(*(_QWORD *)v57 + 152);
                v57 = v58 & 0xFFFFFFFFFFFFFFF8;
              }
              while ((v58 & 4) != 0 && v57);
            }
            if (v57)
            {
              if (v16 == v57)
                goto LABEL_104;
              v59 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v57 + 32))(v57);
              if (v59 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)v16 + 32))(v16))
                goto LABEL_104;
            }
          }
          if (!sub_22EFB3B2C(v55, (uint64_t (*)(uint64_t, uint64_t))sub_22EC51384, (uint64_t)v88))
          {
LABEL_104:
            v41 = 1;
LABEL_56:
            v42 = ((*(_QWORD *)(v23 + 24) - *(_QWORD *)(v23 + 16)) >> 3);
            v109 = *(unsigned __int8 ***)(v23 + 16);
            v110 = v42;
            if (v41 != 1)
              goto LABEL_58;
            goto LABEL_57;
          }
        }
      }
    }
    else if (!(_DWORD)v30 && (_DWORD)v127)
    {
      v31 = v126;
      v32 = 8 * v127;
      do
      {
        v33 = *v31 & 0xFFFFFFFFFFFFFFFCLL;
        v34 = *(_DWORD *)(v33 + 28);
        if ((v34 & 0x7Fu) <= 0x2F && ((1 << (v34 & 0x7F)) & 0xC00000060000) != 0)
        {
          v33 = sub_22EFBAEA4(v33);
          v34 = *(_DWORD *)(v33 + 28);
        }
        if ((v34 & 0x7Eu) - 58 >= 0xFFFFFFFA && !sub_22EFC0EB8(v33))
          goto LABEL_104;
        ++v31;
        v32 -= 8;
      }
      while (v32);
    }
    v41 = sub_22EC46154(v101, 1);
    goto LABEL_56;
  }
LABEL_57:
  v41 = sub_22EC46154(v101, 0);
LABEL_58:
  switch(v41)
  {
    case 0:
      v60 = *v104;
      if (v23 && *v6 == 2 && (*(_QWORD *)(v60 + 168) & 3) == 1)
      {
        LOBYTE(v88[0]) = (*(_DWORD *)(v60 + 28) & 0x200) == 0;
        sub_22E8FCA40(v11, *((_DWORD *)v6 + 1), 0xC6Fu, 0, (uint64_t)&v90);
        v61 = sub_22F30C54C((uint64_t)&v90, &v108);
        sub_22E894E38(v61, (unsigned __int8 *)v88);
        sub_22E903BEC((unsigned int *)&v90);
        sub_22E8FCA40(v11, *(_DWORD *)(*v104 + 24), 0x15E5u, 0, (uint64_t)&v90);
        sub_22E894E38((uint64_t)&v90, (unsigned __int8 *)v88);
        sub_22E903BEC((unsigned int *)&v90);
        goto LABEL_78;
      }
      LODWORD(v90) = *((_DWORD *)v6 + 1);
      sub_22EB17F48(v11, v60, &v90, 1, 0, 0, 0, 0);
      sub_22EB4E494(v11, *((unsigned int *)v6 + 1), *v104, 1);
      goto LABEL_111;
    case 1:
      v43 = *(_QWORD *)(v16 + 48);
      v44 = *((unsigned int *)v6 + 1);
      if (!*(_QWORD *)(v43 + 48))
        sub_22EF6462C(v11[11], v43);
      v47 = sub_22EE8B180(v11, v44);
      v48 = *((_DWORD *)v6 + 1);
      if (v47)
        v49 = 3184;
      else
        v49 = 3181;
      v50 = v11[11] + 2128;
      v90 = 0;
      v91 = v50;
      v92 = v49;
      sub_22F0F0B50(&v90, v108);
      v51 = v127;
      v52 = v90;
      if (!v90)
      {
        v52 = (unsigned __int8 *)sub_22E3B8AAC(v91);
        v90 = v52;
      }
      v52[*v52 + 1] = 2;
      v53 = v90;
      v54 = *v90;
      *v90 = v54 + 1;
      *(_QWORD *)&v53[8 * v54 + 16] = v51 != 0;
      v93 = v48;
      v96 = v92;
      v95 = v91;
      v94 = (_OWORD *)sub_22E3B8AAC(v91);
      sub_22E78D4E8(v94, (uint64_t)v90);
      sub_22ED1231C((uint64_t)&v112, &v93, v11, 0, (int)v109, v110, "", 0, 0);
      if (v94 && v95)
      {
        sub_22E3BB10C(v95, (unint64_t)v94);
        v94 = 0;
      }
      goto LABEL_75;
    case 2:
      v45 = *((_DWORD *)v6 + 1);
      v46 = v11[11] + 2128;
      v90 = 0;
      v91 = v46;
      v92 = 3180;
      sub_22F0F0B50(&v90, v108);
      v97 = v45;
      v100 = v92;
      v98 = 0;
      v99 = v91;
      if (v90)
      {
        v98 = (_OWORD *)sub_22E3B8AAC(v91);
        sub_22E78D4E8(v98, (uint64_t)v90);
      }
      sub_22ED1231C((uint64_t)&v112, &v97, v11, 2, (int)v109, v110, "", 0, 0);
      if (v98 && v99)
      {
        sub_22E3BB10C(v99, (unint64_t)v98);
        v98 = 0;
      }
LABEL_75:
      if (v90 && v91)
        sub_22E3BB10C(v91, (unint64_t)v90);
      goto LABEL_78;
    case 3:
      sub_22E8FCA40(v11, *((_DWORD *)v6 + 1), 0xC6Eu, 0, (uint64_t)&v90);
      sub_22F30C54C((uint64_t)&v90, &v108);
      sub_22E903BEC((unsigned int *)&v90);
      sub_22EB17D68(v11, *v104);
LABEL_78:
      v111 = 0;
      goto LABEL_79;
    default:
LABEL_111:
      v62 = *v10;
      v63 = *(_QWORD *)(*(_QWORD *)(*v104 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v63)
        v64 = *(unsigned __int8 *)(v63 + 16) - 27 > 0xFFFFFFFD;
      else
        v64 = 0;
      if (!v64)
        v63 = sub_22F10CF48(v63);
      v111 = sub_22F34729C((uint64_t)v11, v62, *(_QWORD *)(v63 + 24));
      v65 = *v10;
      v66 = *v10;
      break;
  }
  while (1)
  {
    while (1)
    {
      if ((v66 & 0xF) != 0)
        goto LABEL_127;
      v67 = *(unsigned __int8 *)(*(_QWORD *)(v66 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v67 <= 0x39)
        break;
LABEL_122:
      if (sub_22F115668(v66))
        v65 = v66;
      v66 = sub_22F115B7C(v66);
      if (!v66)
        goto LABEL_145;
    }
    if (v67 == 24)
      goto LABEL_144;
    if (v67 == 26)
      break;
    if (((1 << v67) & 0x20000000200003CLL) == 0)
      goto LABEL_122;
LABEL_127:
    v66 = sub_22F115B7C(v66);
  }
  if ((*(_BYTE *)(v66 + 23) & 0x10) == 0)
    goto LABEL_127;
LABEL_144:
  v65 = v66;
LABEL_145:
  v74 = sub_22F115668(v65);
  sub_22E8FCA40(v11, v74, 0x18FCu, 0, (uint64_t)&v90);
  v75 = *v10;
  v88[0] = v75;
  v88[1] = (uint64_t)(v10 + 1);
  v76 = v75;
  while (2)
  {
    while (2)
    {
      if ((v76 & 0xF) != 0)
        goto LABEL_156;
      v77 = *(unsigned __int8 *)(*(_QWORD *)(v76 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v77 > 0x39)
      {
LABEL_151:
        if (sub_22F115668(v76))
          v75 = v76;
        v76 = sub_22F115B7C(v76);
        if (!v76)
          goto LABEL_158;
        continue;
      }
      break;
    }
    if (v77 == 24)
      break;
    if (v77 != 26)
    {
      if (((1 << v77) & 0x20000000200003CLL) != 0)
        goto LABEL_156;
      goto LABEL_151;
    }
    if ((*(_BYTE *)(v76 + 23) & 0x10) == 0)
    {
LABEL_156:
      v76 = sub_22F115B7C(v76);
      continue;
    }
    break;
  }
  v75 = v76;
LABEL_158:
  v78 = sub_22F115668(v75);
  v89 = v78 | ((unint64_t)sub_22F1167E8(v88) << 32);
  v79 = sub_22E8906A0((uint64_t)&v90, (uint64_t *)&v89);
  v87 = 1;
  v80 = sub_22E8900C4(v79, &v87);
  sub_22E8901B8(v80, &v111);
  sub_22E903BEC((unsigned int *)&v90);
  if (v103)
    goto LABEL_79;
  v81 = *v10;
  v82 = v81;
  while (2)
  {
    while (2)
    {
      if ((v82 & 0xF) != 0)
        goto LABEL_170;
      v83 = *(unsigned __int8 *)(*(_QWORD *)(v82 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v83 > 0x39)
      {
LABEL_165:
        if (sub_22F115668(v82))
          v81 = v82;
        v82 = sub_22F115B7C(v82);
        if (!v82)
          goto LABEL_172;
        continue;
      }
      break;
    }
    if (v83 == 24)
      break;
    if (v83 != 26)
    {
      if (((1 << v83) & 0x20000000200003CLL) != 0)
        goto LABEL_170;
      goto LABEL_165;
    }
    if ((*(_BYTE *)(v82 + 23) & 0x10) == 0)
    {
LABEL_170:
      v82 = sub_22F115B7C(v82);
      continue;
    }
    break;
  }
  v81 = v82;
LABEL_172:
  v84 = sub_22F115668(v81);
  sub_22E8FCA40(v11, v84, 0x18F0u, 0, (uint64_t)&v90);
  sub_22F30C54C((uint64_t)&v90, &v108);
  sub_22E903BEC((unsigned int *)&v90);
  sub_22E8FCA40(v11, *(_DWORD *)(v16 + 24), 0x17C8u, 0, (uint64_t)v86);
  sub_22E903BEC(v86);
LABEL_79:
  sub_22E9DC79C((uint64_t *)&v112);
  if (BYTE1(v138))
  {
    if ((_DWORD)v125 == 5)
    {
      sub_22EC64D18(v132, (uint64_t)&v125);
    }
    else if (v130 && (*(_DWORD *)(v132[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v132, (uint64_t)&v125);
    }
  }
  if (v129)
  {
    v85 = sub_22EC6CBD0(v129);
    MEMORY[0x2348A0E9C](v85, 0x10E0C409F09D3C3);
  }
  if (v126 != v128)
    free(v126);
  return v111;
}

uint64_t sub_22EC46154(uint64_t *a1, int a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t i;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v23;
  int v24;

  v4 = (_QWORD *)a1[4];
  sub_22ECF9840(*a1, 0);
  v5 = a1[2];
  *(_BYTE *)a1[1] = 0;
  v6 = *(unsigned int *)(v5 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)(v5 + 8);
    for (i = 8 * v6; i; i -= 8)
    {
      v9 = *v7 & 0xFFFFFFFFFFFFFFFCLL;
      v10 = *(_DWORD *)(v9 + 28);
      if ((v10 & 0x7Fu) <= 0x2F && ((1 << (v10 & 0x7F)) & 0xC00000060000) != 0)
      {
        v9 = sub_22EFBAEA4(*v7 & 0xFFFFFFFFFFFFFFFCLL);
        v10 = *(_DWORD *)(v9 + 28);
      }
      if ((v10 & 0x80) != 0)
        goto LABEL_37;
      if ((v10 & 0x7F) == 0x1D)
        v12 = v9;
      else
        v12 = 0;
      if (v12)
      {
        v9 = *(_QWORD *)(v12 + 48);
        if (v9)
        {
          v10 = *(_DWORD *)(v9 + 28);
LABEL_16:
          if ((v10 & 0x7F) == 0x35)
          {
            if ((v10 & 0x200) == 0)
              *(_BYTE *)a1[1] = 1;
            if (*(_BYTE *)a1[3]
              || sub_22EFC0EB8(v9) <= 1
              && (((v14 = *(_QWORD *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFF0)) != 0
                 ? (v15 = *(_BYTE *)(v14 + 16) == 26)
                 : (v15 = 0),
                   (v15
                 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
                 && (v14 = sub_22F10CF48(v14)) != 0)
                && (*(_DWORD *)(v14 + 20) & 0x3FFFC0) != 0)
               || sub_22EFBF68C(v9)))
            {
              if (!a2 || sub_22EAC23F4(v4, v9))
              {
                if ((*(_DWORD *)(v9 + 28) & 0x7F) == 0x37)
                  v13 = *(_QWORD *)(a1[6] + 16);
                else
                  v13 = 0;
                v16 = *v7;
                v17 = (uint64_t *)a1[7];
                v18 = *v17;
                v19 = v17[1];
                v20 = *a1;
                v21 = *(unsigned __int8 *)a1[5] == 2;
                if (v12)
                {
                  BYTE4(v23) = 0;
                  WORD1(v23) = *(_BYTE *)a1[3] != 0;
                  LOWORD(v23) = v21;
                  sub_22ED07F48(v4, v12, v16, v13, 0, v18, v19, v20, v23);
                }
                else
                {
                  LOBYTE(v24) = 0;
                  BYTE3(v23) = 0;
                  LOBYTE(v23) = 0;
                  *(_WORD *)((char *)&v23 + 1) = *(_BYTE *)a1[3] != 0;
                  sub_22ED0475C(v4, v9, v16, v13, v18, v19, v20, v21, v23, 0, 0, v24);
                }
              }
            }
          }
        }
      }
      else if ((v10 & 0x7Eu) - 52 < 6)
      {
        goto LABEL_16;
      }
LABEL_37:
      ++v7;
    }
  }
  return sub_22ED03FCC(*a1, v4, *(unsigned int *)(a1[5] + 4), a1[8]);
}

_QWORD *sub_22EC463A8(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  int v5;
  unint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;

  v5 = a3;
  v8 = HIDWORD(a3);
  v9 = (_QWORD *)sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 64, 3);
  sub_22EFFD1B0((uint64_t)v9, *(_QWORD *)(*(_QWORD *)a1 + 88), v5, 0, 0, v8);
  v19 = a2;
  v10 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v12 = a2;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu)
     - 2 >= 4)
    v12 = sub_22F1133DC(&v19, *(_QWORD *)(*(_QWORD *)a1 + 88));
  v9[1] = v12;
  v13 = sub_22EF5C728(v11, a2);
  if (!v13)
  {
    v17 = sub_22E3E4B64(*v10);
    if (v17)
    {
      v16 = *(_DWORD *)(v17 + 20);
      goto LABEL_15;
    }
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45)
    {
      v16 = sub_22EC46C30(a2);
      goto LABEL_15;
    }
LABEL_14:
    v16 = 0;
    goto LABEL_15;
  }
  if (*(_BYTE *)(v13 + 16) != 2)
    goto LABEL_14;
  v14 = (_QWORD *)(v13 + 40);
  if (*(_DWORD *)(v13 + 48) >= 0x41u)
    v14 = (_QWORD *)*v14;
  v15 = *(_DWORD *)v14;
  if (v15 <= a4)
    v16 = v15;
  else
    v16 = 0;
LABEL_15:
  sub_22EFFD480(v9, *(_QWORD *)(*(_QWORD *)a1 + 88), v16);
  return v9;
}

void sub_22EC46504(uint64_t a1, __int128 *a2, unint64_t a3, _BYTE *a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  _DWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v32;
  unsigned __int8 *v33;
  int v34;
  uint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BOOL4 v41;
  unint64_t v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  int v60;
  uint64_t v61;
  _BYTE *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int v72;
  uint64_t v73;
  _OWORD v76[3];
  __int128 v77;
  __int128 v78;
  __int128 v79;

  if ((_DWORD)a7 && *(_BYTE *)(a1 + 9))
    return;
  if (!sub_22EFFD7E8(a3))
  {
    v13 = *(_QWORD *)(a3 + 8);
    v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v14 && *(_BYTE *)(v14 + 16) == 45)
    {
      v15 = sub_22F114198(*(_QWORD *)(v14 + 24));
      v16 = v15;
      if ((*(_DWORD *)(v15 + 72) & 0xE000) == 0x4000)
      {
        v17 = *(_QWORD *)(a3 + 56);
        if ((v17 & 2) != 0)
        {
          v18 = v17 & 0xFFFFFFFFFFFFFFFCLL;
          if ((v17 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            goto LABEL_13;
        }
        if ((*(_DWORD *)(v15 + 28) & 0x7Fu) - 35 <= 2)
        {
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v15 + 104) + 96), *(_QWORD *)(v15 + 104));
          if ((**(_QWORD **)(v16 + 128) & 0x800000) != 0)
          {
            v70 = sub_22EFC3B90(v16);
            if (!v70)
              goto LABEL_4;
            v18 = v70;
LABEL_121:
            if ((*(_DWORD *)(v18 + 72) & 3) == 3 || (*(_DWORD *)(v18 + 72) & 3) == 0)
            {
              while (1)
              {
                v18 = *(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8;
                if (!v18)
                  goto LABEL_4;
                if ((*(_DWORD *)(v18 + 28) & 0x7Fu) - 49 < 3)
                  goto LABEL_121;
              }
            }
LABEL_13:
            sub_22EC4CFAC((_QWORD **)a1, 0, v18, (uint64_t)a2, a3, a4, a7);
            goto LABEL_4;
          }
        }
      }
      v50 = sub_22EC46C30(*(_QWORD *)(a3 + 8));
      if (!*(_BYTE *)(a1 + 9))
      {
        v51 = ((*(_DWORD *)(v16 + 72) >> 23) & 1) + v50;
        if (v51 > ((*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 3))
        {
          v52 = *(_QWORD *)(*(_QWORD *)a1 + 88);
          *(_QWORD *)&v77 = 0;
          sub_22EFFD4BC((char *)(a3 + 16), v52, v51, &v77);
        }
      }
      if ((*(_DWORD *)(v16 + 28) & 0x7Fu) - 38 < 0xFFFFFFFD || (v53 = sub_22E46A3A0(v16), v53 == v54))
      {
        v57 = 0;
LABEL_106:
        v68 = sub_22EFC3B90(v16);
        if (v68)
        {
          v69 = v68;
LABEL_108:
          if ((*(_BYTE *)(v69 + 68) & 1) != 0 && !*(_QWORD *)(v69 + 40))
          {
LABEL_114:
            while (1)
            {
              v69 = *(_QWORD *)(v69 + 8) & 0xFFFFFFFFFFFFFFF8;
              if (!v69)
                break;
              if ((*(_DWORD *)(v69 + 28) & 0x7Fu) - 49 < 3)
                goto LABEL_108;
            }
          }
          else if (!*(_BYTE *)(a1 + 8))
          {
            sub_22EC4CFAC((_QWORD **)a1, v57, v69, (uint64_t)a2, a3, a4, a7);
            if (!*(_BYTE *)(a1 + 8) && (*(_DWORD *)(v16 + 72) & 0xE000) != 0x4000)
            {
              v57 = (v57 + 1);
              goto LABEL_114;
            }
          }
        }
        goto LABEL_4;
      }
      v55 = v53;
      v56 = v54;
      v57 = 0;
      while (1)
      {
        if (*(_BYTE *)(a1 + 8))
          goto LABEL_4;
        sub_22EC39090((uint64_t)&v77, *(_QWORD *)(*(_QWORD *)a1 + 88), v55, (uint64_t)a2);
        v58 = *(_QWORD *)(a3 + 16);
        if (v57 < ((unint64_t)(*(_QWORD *)(a3 + 24) - v58) >> 3)
          && (v59 = *(unsigned __int8 **)(v58 + 8 * v57)) != 0)
        {
          v60 = *v59;
          if (v60 == 165)
          {
            v59 = (unsigned __int8 *)*((_QWORD *)v59 + 3);
            v61 = a1;
            v62 = a4;
            v63 = a3;
            v64 = v57;
            v65 = 1;
            goto LABEL_98;
          }
          if (v60 == 180)
          {
            v61 = a1;
            v62 = a4;
            v63 = a3;
            v64 = v57;
            v65 = a7;
LABEL_98:
            sub_22EC46504(v61, &v77, v59, v62, v63, v64, v65);
          }
        }
        else
        {
          if ((_DWORD)a7)
          {
            v66 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 16, 3);
            v67 = *(_QWORD *)(**(_QWORD **)(v55 + 16) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v67 + 8) & 0xF) != 0)
              v67 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(v55 + 16));
            sub_22F336010(v66, v67 & 0xFFFFFFFFFFFFFFF0);
            if ((v66 & 1) == 0)
            {
LABEL_94:
              if (!*(_BYTE *)(a1 + 9))
              {
                *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v57) = v66 & 0xFFFFFFFFFFFFFFFELL;
                if ((v66 & 0xFFFFFFFFFFFFFFFELL) != 0)
                  *(_DWORD *)a3 |= *(_DWORD *)(v66 & 0xFFFFFFFFFFFFFFFELL) & 0x3E000;
              }
              goto LABEL_103;
            }
          }
          else
          {
            sub_22EFFD9B4(a3);
            v66 = sub_22EC49F30();
            if ((v66 & 1) == 0)
              goto LABEL_94;
          }
          *(_BYTE *)(a1 + 8) = 1;
        }
LABEL_103:
        v57 = (v57 + 1);
        v55 += 24;
        if (v55 == v56)
          goto LABEL_106;
      }
    }
    v19 = a2[1];
    v77 = *a2;
    v78 = v19;
    v79 = a2[2];
    v20 = *(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16);
    v21 = v20 >> 3;
    v22 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)a1 + 88), v13);
    if (!v22)
    {
      v27 = sub_22E3E4B64(*(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0));
      if (!v27)
      {
        v24 = *(_QWORD *)(a3 + 8);
        if (!(_DWORD)v21)
          goto LABEL_4;
        goto LABEL_28;
      }
      v24 = *(_QWORD *)(v27 + 32);
      LODWORD(v21) = *(_DWORD *)(v27 + 20);
LABEL_27:
      sub_22EC38D34((uint64_t)v76, *(_QWORD *)(*(_QWORD *)a1 + 88), 0, (uint64_t)a2);
      v77 = v76[0];
      v78 = v76[1];
      v79 = v76[2];
      if (!(_DWORD)v21)
        goto LABEL_4;
LABEL_28:
      v28 = 0;
      v29 = 0;
      v30 = (v20 >> 3);
      while (1)
      {
        if (*(_BYTE *)(a1 + 8))
          goto LABEL_4;
        if ((_DWORD)v77 == 12 || (_DWORD)v77 == 7)
          LODWORD(v79) = v28;
        if (v28 >= v30)
        {
          v40 = *(_QWORD *)(a3 + 56);
          v41 = v40 > 3;
          v42 = v40 & 2;
          if ((v40 & 2) != 0)
            v41 = 0;
          if (((v41 | v29) & 1) != 0)
            goto LABEL_4;
        }
        else
        {
          v32 = *(_QWORD *)(a3 + 16);
          v33 = *(unsigned __int8 **)(v32 + 8 * v28);
          if (v33)
          {
            v34 = *v33;
            if (v34 == 165)
            {
              v33 = (unsigned __int8 *)*((_QWORD *)v33 + 3);
              v35 = a1;
              v36 = a4;
              v37 = a3;
              v38 = v28;
              v39 = 1;
              goto LABEL_65;
            }
            if (v34 == 180)
            {
              v35 = a1;
              v36 = a4;
              v37 = a3;
              v38 = v28;
              v39 = a7;
LABEL_65:
              sub_22EC46504(v35, &v77, v33, v36, v37, v38, v39);
              goto LABEL_66;
            }
            goto LABEL_66;
          }
          v40 = *(_QWORD *)(a3 + 56);
          v42 = v40 & 2;
          if (v40 >= 4 && (v40 & 2) == 0)
          {
            v47 = (_DWORD *)(v40 & 0xFFFFFFFFFFFFFFFCLL);
            *(_QWORD *)(v32 + 8 * v28) = v47;
            if (v47)
            {
              v48 = *v47 & 0x3E000 | *(_DWORD *)a3;
LABEL_61:
              *(_DWORD *)a3 = v48;
              goto LABEL_66;
            }
            goto LABEL_66;
          }
        }
        if (v42)
          v43 = 0;
        else
          v43 = v40 > 3;
        v44 = v43;
        if (((v44 | v29) & 1) != 0)
        {
          v29 |= v44 ^ 1;
        }
        else
        {
          if ((_DWORD)a7)
          {
            v46 = (_DWORD *)sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 16, 3);
            sub_22F336010((uint64_t)v46, v24);
          }
          else
          {
            sub_22EFFD9B4(a3);
            v45 = sub_22EC49F30();
            if ((v45 & 1) != 0)
            {
              *(_BYTE *)(a1 + 8) = 1;
              goto LABEL_4;
            }
            v46 = (_DWORD *)(v45 & 0xFFFFFFFFFFFFFFFELL);
          }
          if (*(_BYTE *)(a1 + 8))
            goto LABEL_56;
          if (*(_BYTE *)(a1 + 9))
          {
            v29 = 1;
            goto LABEL_66;
          }
          if (v28 < v30)
          {
            if ((_DWORD)v77 == 7)
            {
              sub_22F3C21E8((_QWORD *)a3, (uint64_t)v46);
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v28) = v46;
              if (v46)
              {
                v29 = 0;
                v48 = *v46 & 0x3E000 | *(_DWORD *)a3;
                goto LABEL_61;
              }
            }
LABEL_56:
            v29 = 0;
            goto LABEL_66;
          }
          if ((_DWORD)v77 == 7)
          {
            sub_22F3C21E8((_QWORD *)a3, (uint64_t)v46);
            goto LABEL_4;
          }
          v29 = 0;
          v49 = *(unsigned __int8 *)v46;
          if (v49 != 179 && v49 != 190)
          {
            sub_22EFFD554(a3, *(_QWORD *)(*(_QWORD *)a1 + 88), v28, v46);
            v29 = 0;
            *a4 = 1;
          }
        }
LABEL_66:
        if (v21 == ++v28)
          goto LABEL_4;
      }
    }
    if (*(_BYTE *)(v22 + 16) == 2)
    {
      v23 = (_QWORD *)(v22 + 40);
      if (*(_DWORD *)(v22 + 48) >= 0x41u)
        v23 = (_QWORD *)*v23;
      LODWORD(v21) = *(_DWORD *)v23;
    }
    v24 = *(_QWORD *)(v22 + 32);
    if (*(_DWORD *)a2 == 8)
    {
      v25 = *(_QWORD *)(a2[1] & 0xFFFFFFFFFFFFFFF0);
      if (v25 && (*(_DWORD *)(v25 + 16) & 0xFEu) - 6 > 0xFFFFFFFB)
      {
        v72 = *(_DWORD *)(v25 + 16);
LABEL_131:
        v26 = v72 == 4;
        goto LABEL_24;
      }
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
      {
        v73 = sub_22F10CF48(v25);
        if (v73)
        {
          v72 = *(unsigned __int8 *)(v73 + 16);
          goto LABEL_131;
        }
      }
    }
    v26 = 0;
LABEL_24:
    LODWORD(v21) = v26 + v21;
    goto LABEL_27;
  }
LABEL_4:
  if (a5)
  {
    v12 = *(_DWORD **)(*(_QWORD *)(a5 + 16) + 8 * a6);
    if (v12)
      *(_DWORD *)a5 |= *v12 & 0x3E000;
  }
}

uint64_t sub_22EC46C30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  int v4;
  unint64_t v5;
  _BOOL4 v6;

  v1 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 24));
  v2 = v1;
  if (v1)
    v3 = (*(_DWORD *)(v1 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
  else
    v3 = 0;
  if (v3)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v1 + 104) + 96), *(_QWORD *)(v1 + 104));
    v4 = *(_DWORD *)(*(_QWORD *)(v2 + 128) + 16);
  }
  else
  {
    v4 = 0;
  }
  v5 = sub_22EFC3B90(v2);
  if (v5)
  {
LABEL_8:
    v6 = (*(_BYTE *)(v5 + 68) & 1) != 0 && *(_QWORD *)(v5 + 40) == 0;
    v4 += !v6;
    while (1)
    {
      v5 = *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v5)
        break;
      if ((*(_DWORD *)(v5 + 28) & 0x7Fu) - 49 < 3)
        goto LABEL_8;
    }
  }
  if ((*(_DWORD *)(v2 + 72) & 0xE000) != 0x4000)
    return (v4 + ((int)(*(_DWORD *)(v2 + 72) << 8) >> 31));
  if (v4 >= 1)
    return 1;
  return v4;
}

void sub_22EC46D18(_BYTE *a1, uint64_t a2, unint64_t a3, unint64_t *a4, int a5, int *a6, uint64_t a7, unsigned int *a8, unsigned __int8 a9)
{
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v23;
  _QWORD *v24;
  int v26;
  uint64_t v27;
  BOOL v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  _BYTE *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  _BYTE *v39;
  unsigned int v40;
  uint64_t v41;
  _BYTE *v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  _BYTE *v48;
  _QWORD **v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  char v54;
  _BYTE *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v71;
  unint64_t v72;
  _BYTE *v73;
  int v74;
  int v75;
  _QWORD *v76;
  unsigned int v77;
  uint64_t v78;
  _QWORD **v79;
  _QWORD **v80;
  _BYTE *v81;
  _QWORD *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  BOOL v88;
  _QWORD *v89;
  _QWORD **v90;
  int v91;
  uint64_t v92;
  const char *v93;
  int v95;
  _QWORD *v96;
  int v97;
  _QWORD *v98;
  int v99;
  int v100;
  unsigned int v101;
  uint64_t v102;
  _BOOL4 v103;
  uint64_t v104;
  uint64_t v106;
  _QWORD **v107;
  uint64_t v108;
  unsigned int v109;
  char v110;
  uint64_t v111[12];
  unsigned int v112;
  const char *v113;
  uint64_t v114;
  unsigned int v115;
  char v116;
  int v117;
  _BYTE v118[32];
  int v119;
  unsigned int v120;
  unsigned int v121[3];

  v14 = a1;
  v15 = *a4;
  v16 = *a4 & 0xFFFFFFFFFFFFFFF0;
  v17 = *(_QWORD *)v16;
  v18 = *(_QWORD *)(*(_QWORD *)v16 + 8) & 0xFFFFFFFFFFFFFFF0;
  v19 = *(_DWORD *)(*(_QWORD *)v18 + 16);
  if (v19 == 12 && a5 != 0)
  {
    if (((*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) & 0x7FFFFFFF8) == 0x10)
    {
      v24 = *(_QWORD **)a1;
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 1) & 1) == 0 && !a1[9])
      {
        sub_22EFFD954(a3);
        sub_22E8FCA40(v24, v26, 0x1444u, 0, (uint64_t)&v114);
        sub_22F0D4E74(a3);
        v111[0] = v27;
        sub_22E8906A0((uint64_t)&v114, v111);
        sub_22E903BEC((unsigned int *)&v114);
        v14 = a1;
        v17 = *(_QWORD *)v16;
      }
      if (v17)
        v28 = *(_BYTE *)(v17 + 16) == 12;
      else
        v28 = 0;
      if (!v28)
      {
        v29 = v14;
        sub_22F10CF48(v17);
        v14 = v29;
      }
      sub_22EC38D34((uint64_t)&v114, *(_QWORD *)(*(_QWORD *)v14 + 88), 0, a2);
      v117 = *a6;
      sub_22EC48FF8();
      v117 = *a6;
      sub_22EC48FF8();
      return;
    }
LABEL_48:
    sub_22EC477A0(v14, a2, a3, v15, a6, a7, a8);
    return;
  }
  if (v19 <= 0x2Cu)
  {
    if (((1 << v19) & 0x8180001600) != 0)
      goto LABEL_48;
    if (v19 != 11)
    {
      if (v19 != 44)
        goto LABEL_25;
      v23 = sub_22F114198(*(_QWORD *)(*(_QWORD *)v18 + 24));
      if ((*(_BYTE *)(v23 + 74) & 1) != 0)
      {
        v15 = *a4;
      }
      else
      {
        v15 = *a4;
        if (*(_QWORD *)(v23 + 128) <= 7uLL)
        {
          v17 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0);
          v18 = *(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0;
          v14 = a1;
          goto LABEL_25;
        }
      }
      v14 = a1;
      goto LABEL_48;
    }
    if (((v19 >> 19) & 0x1FF) - 166 < 0x35)
      goto LABEL_48;
  }
LABEL_25:
  v30 = *(_QWORD *)v18;
  v31 = *(_DWORD *)(*(_QWORD *)v18 + 16);
  if (v31 - 55 > 1)
  {
    if (v31 == 45)
    {
      v107 = (_QWORD **)v14;
      v44 = sub_22F114198(*(_QWORD *)(v30 + 24));
      v45 = v44;
      if (v44)
        v46 = (*(_DWORD *)(v44 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
      else
        v46 = 0;
      if (v46)
      {
        v47 = sub_22E46A3A0(v44);
        v104 = v67;
      }
      else
      {
        v104 = 0;
        v47 = 0;
      }
      v68 = *a4;
      v69 = sub_22EFC3B90(v45);
      sub_22EC47B0C(v107, a2, a3, v68, v47, v104, v69, a5, (unsigned int *)a6, a7, a8, a9);
      return;
    }
    if ((v31 & 0xFEu) - 2 <= 3)
    {
      v49 = (_QWORD **)v14;
      v50 = *(_QWORD *)(*(_QWORD *)v14 + 88);
      v51 = sub_22EF67C8C(v50);
      v52 = sub_22EF5CDF0(v50, *(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF0));
      v115 = v52;
      if (v52 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v114);
        v116 = 0;
        v109 = v115;
        if (v115 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v108, (const llvm::APInt *)&v114);
          v54 = v116;
LABEL_55:
          v110 = v54;
          sub_22EC48604(v49, a2, a3, a4, (uint64_t)&v108, a5, a6, a7, (int *)a8);
          if (v109 >= 0x41 && v108)
            MEMORY[0x2348A0E84](v108, 0x1000C8000313F17);
          if (v115 >= 0x41 && v114)
            MEMORY[0x2348A0E84](v114, 0x1000C8000313F17);
          return;
        }
        v53 = v114;
      }
      else
      {
        v53 = 0;
        v114 = 0;
        v116 = 0;
        v109 = v52;
      }
      v54 = 0;
      v108 = v53;
      goto LABEL_55;
    }
    if ((v31 & 0xFF800FF) != 0x528000B && v31 - 25 > 1)
    {
      if ((v31 & 0xFE) == 0x28)
      {
        sub_22EC48E20((uint64_t)v14, a2, a3, v15, (unsigned int *)a6, a7, a8);
        return;
      }
      if (v31 - 33 <= 1)
      {
        if (v14[9])
          goto LABEL_95;
        v96 = *(_QWORD **)v14;
        v73 = v14;
        sub_22EFFD954(a3);
        v75 = v97;
        v76 = v96;
        v77 = 3617;
        goto LABEL_82;
      }
      if ((v31 & 0xFC000FF) == 0x140000B || (v31 & 0xFE000FF) == 18874379)
        goto LABEL_48;
      v73 = v14;
      v95 = sub_22F111384(v17);
      v14 = v73;
      if (v95)
        goto LABEL_48;
      if (!v73[9])
      {
        v71 = *(_QWORD **)v73;
        v72 = a3;
        goto LABEL_81;
      }
    }
    else
    {
      ++*a6;
      if (!v14[9])
      {
        v71 = *(_QWORD **)v14;
        v72 = a3;
        v73 = v14;
LABEL_81:
        sub_22EFFD954(v72);
        v75 = v74;
        v76 = v71;
        v77 = 3558;
LABEL_82:
        sub_22E8FCA40(v76, v75, v77, 0, (uint64_t)&v114);
        sub_22E8901B8((uint64_t)&v114, (uint64_t *)a4);
        sub_22E903BEC((unsigned int *)&v114);
        v14 = v73;
      }
    }
LABEL_95:
    v14[8] = 1;
    return;
  }
  if (*(unsigned __int8 *)(v17 + 16) - 57 <= 0xFFFFFFFD)
  {
    v32 = v14;
    v33 = sub_22F10CF48(v17);
    v14 = v32;
    v17 = v33;
  }
  v34 = *(_DWORD *)(v17 + 20);
  v120 = 0;
  v121[0] = v34;
  v35 = *a6;
  v36 = *(_QWORD *)(a3 + 16);
  if (v35 >= ((unint64_t)(*(_QWORD *)(a3 + 24) - v36) >> 3))
  {
    v48 = v14;
    sub_22EC38D34((uint64_t)v111, *(_QWORD *)(*(_QWORD *)v14 + 88), 0, a2);
    if (!*((_QWORD *)v48 + 2))
    {
      sub_22EFFD9B4(a3);
      sub_22EC49F30();
    }
  }
  else
  {
    v106 = *(_QWORD *)(v17 + 32);
    v37 = *(_QWORD *)v14;
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 72) + 52) & 0x40000000) != 0)
    {
      v55 = v14;
      sub_22EC38D34((uint64_t)v118, *(_QWORD *)(v37 + 88), 0, a2);
      if (v34)
      {
        v56 = 0;
        v57 = v34;
        do
        {
          v58 = *a6;
          v59 = *(_QWORD *)(a3 + 16);
          if (v58 >= ((unint64_t)(*(_QWORD *)(a3 + 24) - v59) >> 3))
            break;
          v119 = *a6;
          v60 = *(_QWORD *)(*(_QWORD *)(v59 + 8 * v58) + 8) & 0xFFFFFFFFFFFFFFF0;
          v61 = *(_QWORD *)v60;
          v62 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v60 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
          if ((v62 - 55) > 1)
          {
            LODWORD(v64) = 1;
          }
          else
          {
            v63 = *(_DWORD *)(v61 + 16);
            if (v63 - 57 <= 0xFFFFFFFD)
            {
              v61 = sub_22F10CF48(v61);
              v62 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v60 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
              v63 = *(_DWORD *)(v61 + 16);
            }
            v64 = *(unsigned int *)(v61 + 20);
            v65 = *(_QWORD *)(*(_QWORD *)v55 + 88);
            v66 = (v63 >> 19) & 0xF;
            if (v62 == 56)
              sub_22EF63724(v65, v106, v64, v66);
            else
              sub_22F36B7E4(v65, v106, v64, v66);
          }
          sub_22EC48FF8();
          v56 += v64;
          v120 = v56;
          --v57;
        }
        while (v57);
        if (v56 != v34)
        {
          v81 = v55;
          if (!v55[9])
          {
            v82 = *(_QWORD **)v55;
            sub_22EFFD954(a3);
            sub_22E8FCA40(v82, v83, 0x140Eu, 0, (uint64_t)v111);
            LOBYTE(v113) = v56 < v34;
            v84 = sub_22E894E38((uint64_t)v111, (unsigned __int8 *)&v113);
            v85 = sub_22E89519C(v84, v121);
            sub_22E89519C(v85, &v120);
            sub_22E903BEC((unsigned int *)v111);
            v81 = v55;
          }
          v81[8] = 1;
        }
      }
    }
    else
    {
      v38 = *(unsigned __int8 **)(v36 + 8 * v35);
      if (*v38 != 180
        && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v38 + 1) & 0xFFFFFFFFFFFFFFF0)
                                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 55 <= 1)
      {
        v39 = v14;
        if (v14[9])
        {
          v103 = sub_22F335F3C();
          v42 = v39;
          if (!v103)
            goto LABEL_125;
          v41 = sub_22EC49774(v39);
        }
        else
        {
          sub_22F0D5A50((uint64_t)v38);
          v41 = sub_22EC45014(v37, a2, v40, v38, 1, 0);
        }
        v42 = v39;
        if ((v41 & 1) == 0)
        {
          v43 = (_DWORD *)(v41 & 0xFFFFFFFFFFFFFFFELL);
          if (v38 != (unsigned __int8 *)(v41 & 0xFFFFFFFFFFFFFFFELL))
          {
            v38 = (unsigned __int8 *)(v41 & 0xFFFFFFFFFFFFFFFELL);
            if (!v39[9])
            {
              *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * *a6) = v43;
              if (v43)
                *(_DWORD *)a3 |= *v43 & 0x3E000;
              v38 = (unsigned __int8 *)(v41 & 0xFFFFFFFFFFFFFFFELL);
            }
          }
          goto LABEL_126;
        }
LABEL_125:
        v38 = 0;
        v42[8] = 1;
LABEL_126:
        sub_22EC496F8(v42, a7, a8, v38);
        ++*a6;
        return;
      }
      v78 = *(_QWORD *)(v37 + 88);
      v79 = (_QWORD **)v14;
      sub_22EC38D34((uint64_t)v118, v78, 0, a2);
      v80 = v79;
      if (v34)
      {
        while (*a6 < ((*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 3))
        {
          v119 = *a6;
          sub_22EC48FF8();
          v80 = v79;
          if (!--v34)
            goto LABEL_98;
        }
        if (!v80[2])
        {
          sub_22EFFD9B4(a3);
          sub_22EC49F30();
          v80 = v79;
        }
      }
LABEL_98:
      if (!*((_BYTE *)v80 + 9))
      {
        v86 = *(unsigned __int8 *)(*(_QWORD *)((*v80)[11] + 15088) + 80);
        v87 = *(_QWORD *)(*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF0);
        if (v87)
          v88 = *(unsigned __int8 *)(v87 + 16) - 57 > 0xFFFFFFFD;
        else
          v88 = 0;
        if (!v88)
        {
          v87 = sub_22F10CF48(v87);
          v80 = v79;
        }
        if (v86 && ((*(_DWORD *)(v87 + 16) >> 19) & 0xFu) - 5 <= 1)
        {
          v89 = *v80;
          v90 = v80;
          sub_22EFFD954(a3);
          sub_22E8FCA40(v89, v91, 0x1A68u, 0, (uint64_t)&v114);
          sub_22E903BEC((unsigned int *)&v114);
          v112 = sub_22EF5CDF0((*v90)[11], *(_QWORD *)(v106 & 0xFFFFFFFFFFFFFFF0));
          v92 = *(_QWORD *)(v106 & 0xFFFFFFFFFFFFFFF0);
          if (sub_22F10E0EC(v92))
          {
            v93 = "f";
          }
          else if (sub_22F110930(v92))
          {
            v93 = "s";
          }
          else
          {
            sub_22F110B50(*(_QWORD *)(v106 & 0xFFFFFFFFFFFFFFF0));
            v93 = "u";
          }
          v113 = v93;
          v98 = *v79;
          sub_22EFFD954(a3);
          v100 = v99;
          if ((unint64_t)sub_22EF5CDF0(v98[11], v17) <= 0x40)
            v101 = 5824;
          else
            v101 = 5825;
          sub_22E8FCA40(v98, v100, v101, 0, (uint64_t)v111);
          v102 = sub_22E96133C((uint64_t)v111, (uint64_t *)&v113);
          sub_22E89519C(v102, &v112);
          sub_22E903BEC((unsigned int *)v111);
        }
      }
    }
  }
}

void sub_22EC477A0(_BYTE *a1, uint64_t a2, unint64_t a3, uint64_t a4, int *a5, uint64_t a6, unsigned int *a7)
{
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  unsigned int v43[24];
  uint64_t v44;

  v44 = a4;
  v11 = *a5;
  v12 = *(_QWORD *)(a3 + 16);
  if (v11 >= ((unint64_t)(*(_QWORD *)(a3 + 24) - v12) >> 3))
  {
    if (!a1[9])
    {
      if (sub_22F111384(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0)))
      {
        v21 = *(_QWORD *)a1;
        sub_22EFFD954(a3);
        if ((**(_QWORD **)(v21 + 72) & 0x200) != 0)
          v23 = 6437;
        else
          v23 = 3291;
        sub_22E8FCA40((_QWORD *)v21, v22, v23, 0, (uint64_t)v43);
        v24 = sub_22E8901B8((uint64_t)v43, &v44);
        sub_22F0D4E74(a3);
        v42 = v25;
        v26 = (unsigned int *)v24;
      }
      else
      {
        v37 = *(_QWORD *)a1;
        sub_22EFFD954(a3);
        if ((**(_QWORD **)(v37 + 72) & 0x200) != 0)
          v39 = 6436;
        else
          v39 = 3290;
        sub_22E8FCA40((_QWORD *)v37, v38, v39, 0, (uint64_t)v43);
        sub_22F0D4E74(a3);
        v42 = v40;
        v26 = v43;
      }
      sub_22E8906A0((uint64_t)v26, &v42);
      sub_22E903BEC(v43);
    }
    a1[8] = (**(_QWORD **)(*(_QWORD *)a1 + 72) & 0x200) == 0;
    v32 = *a5 + 1;
    goto LABEL_29;
  }
  v13 = *(_DWORD **)(v12 + 8 * v11);
  v14 = *(unsigned __int8 *)v13;
  if (v14 == 164)
  {
    if (!a1[9])
    {
      v27 = *(_QWORD **)a1;
      sub_22F0D5A50((uint64_t)v13);
      sub_22E8FCA40(v27, v28, 0xCADu, 0, (uint64_t)v43);
      v41 = sub_22F111384(*(_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF0));
      v29 = sub_22E894E38((uint64_t)v43, &v41);
      v30 = sub_22E8901B8(v29, &v44);
      sub_22F0D4E74((uint64_t)v13);
      v42 = v31;
      sub_22E8906A0(v30, &v42);
      sub_22E903BEC(v43);
      LODWORD(v11) = *a5;
    }
    a1[8] = 1;
    v32 = v11 + 1;
LABEL_29:
    *a5 = v32;
    ++*a7;
    return;
  }
  if (v14 != 180)
  {
    v33 = *(_QWORD *)a1;
    if (a1[9])
    {
      if (sub_22F335F3C())
      {
        v35 = sub_22EC49774(a1);
        if ((v35 & 1) == 0)
        {
LABEL_18:
          v36 = (_DWORD *)(v35 & 0xFFFFFFFFFFFFFFFELL);
          if (v13 != (_DWORD *)(v35 & 0xFFFFFFFFFFFFFFFELL))
          {
            v13 = (_DWORD *)(v35 & 0xFFFFFFFFFFFFFFFELL);
            if (!a1[9])
            {
              *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * *a5) = v36;
              if (v36)
                *(_DWORD *)a3 |= *v36 & 0x3E000;
              v13 = (_DWORD *)(v35 & 0xFFFFFFFFFFFFFFFELL);
            }
          }
          goto LABEL_33;
        }
      }
    }
    else
    {
      sub_22F0D5A50((uint64_t)v13);
      v35 = sub_22EC45014(v33, a2, v34, v13, 1, 0);
      if ((v35 & 1) == 0)
        goto LABEL_18;
    }
    v13 = 0;
    a1[8] = 1;
LABEL_33:
    sub_22EC496F8(a1, a6, a7, v13);
    ++*a5;
    return;
  }
  if (!a1[9])
  {
    v17 = *(_QWORD **)a1;
    sub_22EFFD954((unint64_t)v13);
    sub_22E8FCA40(v17, v18, 0x14A5u, 0, (uint64_t)v43);
    v41 = sub_22F111384(*(_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF0));
    v19 = sub_22E894E38((uint64_t)v43, &v41);
    sub_22F0D4E74((uint64_t)v13);
    v42 = v20;
    sub_22E8906A0(v19, &v42);
    sub_22E903BEC(v43);
    a4 = v44;
  }
  sub_22EC477A0(a1, a2, v13, a4, a5, a6, a7);
}

void sub_22EC47B0C(_QWORD **a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, int a8, unsigned int *a9, uint64_t a10, unsigned int *a11, unsigned __int8 a12)
{
  unint64_t v12;
  uint64_t *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL4 v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v51;
  unint64_t v52;
  BOOL v54;
  unint64_t v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  _QWORD *v67;
  int v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  _BOOL4 v72;
  unint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78[24];
  unint64_t v79;
  uint64_t v80;

  v12 = a7;
  v79 = a7;
  v80 = a4;
  v18 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                           + 24))
                 + 28) & 0x80) != 0)
  {
    ++*a9;
    goto LABEL_21;
  }
  if (!sub_22F10E06C(*v18) || ((*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) & 0x7FFFFFFF8) != 0)
  {
    if (a5 == a6)
    {
      v19 = 0;
    }
    else
    {
      v19 = 0;
      do
      {
        v20 = *a9;
        v21 = *(_QWORD *)(a3 + 16);
        if (v20 < ((unint64_t)(*(_QWORD *)(a3 + 24) - v21) >> 3)
          && (v22 = *(unsigned __int8 **)(v21 + 8 * v20)) != 0
          && *v22 != 164)
        {
          sub_22F0D5A50((uint64_t)v22);
          v24 = v25;
          sub_22EC39090((uint64_t)&v75, (*a1)[11], a5, a2);
          if ((*(_BYTE *)(*(_QWORD *)(**(_QWORD **)(a5 + 16) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xF) != 0)
            sub_22F10D2BC(**(_QWORD **)(a5 + 16));
          sub_22EC48FF8();
          v19 = 1;
        }
        else
        {
          sub_22EFFD9B4(a3);
          v24 = v23;
          sub_22EC39090((uint64_t)&v75, (*a1)[11], a5, a2);
          if (!a1[2])
            sub_22EC49F30();
        }
        if (!*((_BYTE *)a1 + 9))
        {
          v26 = *(_QWORD *)(**(_QWORD **)(a5 + 16) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v26 + 8) & 0xF) != 0)
            v26 = (unint64_t)sub_22F10D2BC(**(_QWORD **)(a5 + 16));
          if ((sub_22EC4A7BC(v26 & 0xFFFFFFFFFFFFFFF0, v24, (uint64_t)*a1) & 1) != 0)
            goto LABEL_21;
        }
        a5 += 24;
      }
      while (a5 != a6);
      v18 = (uint64_t *)(v80 & 0xFFFFFFFFFFFFFFF0);
    }
    v71 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 24));
    v27 = sub_22EFC3B90(v71);
    v28 = 0;
    if (v27)
    {
LABEL_25:
      ++v28;
      while (1)
      {
        v27 = *(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v27)
          break;
        if ((*(_DWORD *)(v27 + 28) & 0x7Fu) - 49 < 3)
          goto LABEL_25;
      }
    }
    v72 = !sub_22EFFD880(a3, (*a1)[9]);
    v29 = *a9;
    v30 = *(_QWORD *)(a3 + 16);
    v31 = *(_QWORD *)(a3 + 24);
    if (v29 >= ((unint64_t)(v31 - v30) >> 3))
    {
      v70 = 0;
      goto LABEL_101;
    }
    v70 = 0;
    while (1)
    {
      v32 = *(unsigned __int8 **)(v30 + 8 * v29);
      sub_22F0D5A50((uint64_t)v32);
      v34 = v33;
      v35 = *v32;
      if (v35 == 164)
      {
        if (!a8)
          return;
        if (sub_22EC4A8F4((uint64_t)a1, a2, a3, (uint64_t)v32, 0, (uint64_t)&v80, (uint64_t)&v79, 0, a9, (unsigned __int8 *)a10, a11, 1, a12))
        {
          LOBYTE(v72) = 0;
          v70 = 1;
          *((_BYTE *)a1 + 8) = 1;
        }
        else if (*((_BYTE *)a1 + 9))
        {
          LOBYTE(v72) = 0;
          v70 = 1;
        }
        else
        {
          v37 = sub_22EFC3B90(v71);
          while (1)
          {
            v38 = v37;
            do
              v38 = *(_QWORD *)(v38 + 8) & 0xFFFFFFFFFFFFFFF8;
            while (v38 && (*(_DWORD *)(v38 + 28) & 0x7Fu) - 49 > 2);
            if (v79 == v38)
              break;
            do
              v37 = *(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF8;
            while (v37 && (*(_DWORD *)(v37 + 28) & 0x7Fu) - 49 >= 3);
          }
          v39 = sub_22EF5BA38((*a1)[11], *(_QWORD *)(v37 + 48));
          if ((sub_22EC4A7BC(v39, v34, (uint64_t)*a1) & 1) != 0)
            goto LABEL_21;
          v70 = 1;
          LOBYTE(v72) = 0;
        }
      }
      else
      {
        if (!v79)
          goto LABEL_101;
        if ((*(_BYTE *)(v71 + 76) & 0x20) != 0)
        {
          if (((v31 - v30) & 0x7FFFFFFF8) != 8)
            goto LABEL_98;
          if (v28 != 1)
          {
            if (v35 != 181)
              goto LABEL_98;
            sub_22F257F94((uint64_t)(v32 + 16), (llvm::APInt *)&v75);
            v36 = v76;
            if (v76 > 0x40)
            {
              v40 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v75);
              if (v75)
                MEMORY[0x2348A0E84](v75, 0x1000C8000313F17);
              if (v40 != v36)
              {
LABEL_98:
                if (!*((_BYTE *)a1 + 9))
                {
                  sub_22E8FCA40(*a1, v34, 0xFBEu, 0, (uint64_t)v78);
                  sub_22E903BEC(v78);
                }
                *((_BYTE *)a1 + 8) = 1;
LABEL_101:
                v51 = v79;
                if (!*((_BYTE *)a1 + 9) && (v19 & 1) != 0 && v72)
                {
                  if (v79)
                  {
                    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v79 + 48) & 0xFFFFFFFFFFFFFFF0)
                                                          + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 16) != 4)
                    {
                      v54 = sub_22F10E06C(*(_QWORD *)(v80 & 0xFFFFFFFFFFFFFFF0));
                      v51 = v79;
                      if (!v54)
                      {
                        if (v79)
                        {
                          v55 = v79;
LABEL_127:
                          if (((*(_BYTE *)(v55 + 68) & 1) == 0 || *(_QWORD *)(v55 + 40))
                            && ((*(_DWORD *)(v55 + 72) & 3) != 3 ? (v56 = (*(_DWORD *)(v55 + 72) & 3) == 0) : (v56 = 1),
                                v56))
                          {
                            v67 = *a1;
                            sub_22F0D4E74(a3);
                            sub_22E8FCA40(v67, v68, 0x1A5Au, 0, (uint64_t)&v75);
                            v74 = v55;
                            sub_22E890024((uint64_t)&v75, (uint64_t *)&v74);
                            sub_22E903BEC((unsigned int *)&v75);
                            v51 = v79;
                          }
                          else
                          {
                            while (1)
                            {
                              v55 = *(_QWORD *)(v55 + 8) & 0xFFFFFFFFFFFFFFF8;
                              if (!v55)
                                break;
                              if ((*(_DWORD *)(v55 + 28) & 0x7Fu) - 49 < 3)
                                goto LABEL_127;
                            }
                          }
                        }
                      }
                    }
                    goto LABEL_106;
                  }
                }
                else
                {
LABEL_106:
                  if (!a10)
                  {
                    if (v51)
                    {
                      if (!sub_22F10E06C(*(_QWORD *)(v80 & 0xFFFFFFFFFFFFFFF0)))
                      {
                        v52 = v79;
                        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v79 + 48) & 0xFFFFFFFFFFFFFFF0)
                                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                                      + 16) != 4)
                        {
LABEL_110:
                          if (!*((_BYTE *)a1 + 8))
                          {
                            if (((*(_BYTE *)(v52 + 68) & 1) == 0 || *(_QWORD *)(v52 + 40))
                              && ((*(_DWORD *)(v52 + 72) & 3) == 3 || (*(_DWORD *)(v52 + 72) & 3) == 0))
                            {
                              sub_22EC38DD0((uint64_t)&v75, v52, a2);
                              if (!a1[2])
                              {
                                sub_22EFFD9B4(a3);
                                sub_22EC49F30();
                              }
                              v52 = v79;
                            }
                            while (1)
                            {
                              v52 = *(_QWORD *)(v52 + 8) & 0xFFFFFFFFFFFFFFF8;
                              if (!v52)
                                break;
                              if ((*(_DWORD *)(v52 + 28) & 0x7Fu) - 49 <= 2)
                              {
                                v79 = v52;
                                goto LABEL_110;
                              }
                            }
                            v79 = 0;
                          }
                        }
                      }
                    }
                  }
                }
                if (*((_BYTE *)a1 + 9))
                {
LABEL_144:
                  if (v79)
                  {
                    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v79 + 48) & 0xFFFFFFFFFFFFFFF0)
                                                          + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 16) == 4)
                    {
                      v61 = *a9;
                      v62 = *(_QWORD *)(a3 + 16);
                      if (v61 < ((unint64_t)(*(_QWORD *)(a3 + 24) - v62) >> 3))
                      {
                        v63 = *(unsigned __int8 **)(v62 + 8 * v61);
                        if (sub_22EC4CD94((uint64_t)a1, *(_DWORD *)a2, *(_QWORD *)(a2 + 32), v63, v79, a12))
                        {
                          *((_BYTE *)a1 + 8) = 1;
                          ++*a9;
                        }
                        else
                        {
                          sub_22EC38DD0((uint64_t)&v75, v79, a2);
                          if (*v63 == 180)
                            sub_22EC48FF8();
                          else
                            sub_22EC497C8(a1, (uint64_t)&v75, a3, v77, a9, a10, a11);
                        }
                      }
                    }
                  }
                  return;
                }
                if ((v70 & 1) != 0)
                {
                  v64 = sub_22EFC3B90(v71);
                  if (!v64)
                    goto LABEL_144;
                }
                else
                {
                  v64 = v79;
                  if (!v79)
                    goto LABEL_144;
                }
LABEL_156:
                v65 = sub_22EF5BA38((*a1)[11], *(_QWORD *)(v64 + 48));
                sub_22EFFD9B4(a3);
                if ((sub_22EC4A7BC(v65, v66, (uint64_t)*a1) & 1) == 0)
                {
                  while (1)
                  {
                    v64 = *(_QWORD *)(v64 + 8) & 0xFFFFFFFFFFFFFFF8;
                    if (!v64)
                      goto LABEL_144;
                    if ((*(_DWORD *)(v64 + 28) & 0x7Fu) - 49 <= 2)
                      goto LABEL_156;
                  }
                }
LABEL_21:
                *((_BYTE *)a1 + 8) = 1;
                return;
              }
            }
            else if (v75)
            {
              goto LABEL_98;
            }
          }
        }
        if ((v19 & 1) != 0 && sub_22F10E06C(*(_QWORD *)(v80 & 0xFFFFFFFFFFFFFFF0)))
        {
          v19 = 1;
          goto LABEL_101;
        }
        v41 = v79;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v79 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) == 4)
          goto LABEL_101;
        if ((*(_BYTE *)(v79 + 68) & 1) != 0 && !*(_QWORD *)(v79 + 40))
        {
          do
            v41 = *(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF8;
          while (v41 && (*(_DWORD *)(v41 + 28) & 0x7Fu) - 49 > 2);
          v79 = v41;
          goto LABEL_82;
        }
        v42 = (uint64_t)*a1;
        if (*((_BYTE *)a1 + 9))
        {
          if (!sub_22EB17B6C(*a1, v79, *((unsigned __int8 *)a1 + 10)))
            goto LABEL_78;
        }
        else
        {
          sub_22F0D5A50(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * *a9));
          LODWORD(v75) = v46;
          if (sub_22EB17F48(v42, v41, &v75, 1, 0, 0, 0, 0))
          {
LABEL_78:
            ++*a9;
            v47 = v79;
            do
              v47 = *(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF8;
            while (v47 && (*(_DWORD *)(v47 + 28) & 0x7Fu) - 49 > 2);
            v79 = v47;
            *((_BYTE *)a1 + 8) = 1;
            goto LABEL_82;
          }
        }
        if (!*((_BYTE *)a1 + 9))
        {
          v43 = sub_22EF5BA38((*a1)[11], *(_QWORD *)(v79 + 48));
          if (sub_22EC4A7BC(v43, v34, (uint64_t)*a1))
            goto LABEL_21;
        }
        sub_22EC38DD0((uint64_t)&v75, v79, a2);
        sub_22EC48FF8();
        v44 = sub_22F10E06C(*(_QWORD *)(v80 & 0xFFFFFFFFFFFFFFF0));
        v45 = v79;
        if (a10 && v44)
          *(_QWORD *)(a10 + 56) = v79 | 2;
        do
          v45 = *(_QWORD *)(v45 + 8) & 0xFFFFFFFFFFFFFFF8;
        while (v45 && (*(_DWORD *)(v45 + 28) & 0x7Fu) - 49 > 2);
        v79 = v45;
      }
      v19 = 1;
LABEL_82:
      v29 = *a9;
      v30 = *(_QWORD *)(a3 + 16);
      v31 = *(_QWORD *)(a3 + 24);
      if (v29 >= ((unint64_t)(v31 - v30) >> 3))
        goto LABEL_101;
    }
  }
  v48 = sub_22F114198(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 24));
  v49 = v48;
  if (!*((_BYTE *)a1 + 9))
  {
    v57 = sub_22EFC3B90(v48);
    if (v57)
    {
      v58 = v57;
LABEL_138:
      v59 = sub_22EF5BA38((*a1)[11], *(_QWORD *)(v58 + 48));
      sub_22EFFD9B4(a3);
      if ((sub_22EC4A7BC(v59, v60, (uint64_t)*a1) & 1) != 0)
        goto LABEL_21;
      while (1)
      {
        v58 = *(_QWORD *)(v58 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v58)
          break;
        if ((*(_DWORD *)(v58 + 28) & 0x7Fu) - 49 <= 2)
          goto LABEL_138;
      }
    }
  }
  if ((*(_DWORD *)(v49 + 28) & 0x7Fu) - 35 <= 2)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v49 + 104) + 96), *(_QWORD *)(v49 + 104));
    if ((**(_QWORD **)(v49 + 128) & 0x800000) != 0)
    {
      if (!a10 || !v12)
        return;
LABEL_90:
      if ((*(_DWORD *)(v12 + 72) & 3) != 3 && (*(_DWORD *)(v12 + 72) & 3) != 0)
      {
        v69 = v12 | 2;
LABEL_172:
        *(_QWORD *)(a10 + 56) = v69;
        return;
      }
      while (1)
      {
        v12 = *(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v12)
          break;
        if ((*(_DWORD *)(v12 + 28) & 0x7Fu) - 49 <= 2)
        {
          v79 = v12;
          goto LABEL_90;
        }
      }
      v79 = 0;
    }
  }
  if (!v12)
    return;
  while ((*(_BYTE *)(v12 + 68) & 1) != 0 && !*(_QWORD *)(v12 + 40))
  {
    do
    {
      v12 = *(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v12)
        return;
    }
    while ((*(_DWORD *)(v12 + 28) & 0x7Fu) - 49 > 2);
    v79 = v12;
  }
  sub_22EC38DD0((uint64_t)&v75, v12, a2);
  if (!a1[2])
  {
    sub_22EFFD9B4(a3);
    sub_22EC49F30();
  }
  if (a10)
  {
    v69 = v79 | 2;
    goto LABEL_172;
  }
}

